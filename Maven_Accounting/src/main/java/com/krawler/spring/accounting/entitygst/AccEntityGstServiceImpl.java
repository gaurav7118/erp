/*
 * Copyright (C) 2016 Krawler Information Systems Pvt Ltd
 * All rights reserved.
 *
 */
package com.krawler.spring.accounting.entitygst;

import com.krawler.common.admin.AuditAction;
import com.krawler.common.admin.Company;
import com.krawler.common.admin.FieldComboData;
import com.krawler.common.admin.FieldParams;
import com.krawler.common.admin.ImportLog;
import com.krawler.common.admin.IndiaComplianceCompanyPreferences;
import com.krawler.common.admin.KWLDateFormat;
import com.krawler.common.dao.BaseDAO;
import com.krawler.common.service.ServiceException;
import com.krawler.common.session.SessionExpiredException;
import com.krawler.common.util.Constants;
import com.krawler.common.util.CsvReader;
import com.krawler.common.util.StringUtil;
import com.krawler.esp.handlers.StorageHandler;
import com.krawler.hql.accounting.AccountingException;
import com.krawler.hql.accounting.CreditNoteDetail;
import com.krawler.hql.accounting.EntitybasedLineLevelTermRate;
import com.krawler.hql.accounting.ExchangeRateDetails;
import com.krawler.hql.accounting.Invoice;
import com.krawler.hql.accounting.InvoiceDetail;
import com.krawler.hql.accounting.InvoiceDetailTermsMap;
import com.krawler.hql.accounting.LineLevelTerms;
import com.krawler.hql.accounting.ProductCategoryGstRulesMappping;
import com.krawler.hql.accounting.Producttype;
import com.krawler.hql.accounting.SalesReturnDetail;
import com.krawler.hql.accounting.SalesReturnDetailsTermMap;
import com.krawler.spring.accounting.account.accAccountDAO;
import com.krawler.spring.accounting.accountservice.AccAccountServiceImpl;
import com.krawler.spring.accounting.currency.accCurrencyImpl;
import com.krawler.spring.accounting.gst.dto.GstReturn;
import com.krawler.spring.accounting.gst.services.GSTR1ServiceDao;
import com.krawler.spring.accounting.gst.services.GSTRConstants;
import com.krawler.spring.accounting.gst.services.gstr2.GSTR2Dao;
import com.krawler.spring.accounting.gst.services.gstr2.GSTR2Service;
import com.krawler.spring.accounting.handler.AccountingHandlerDAO;
import com.krawler.spring.accounting.handler.AccountingManager;
import com.krawler.spring.accounting.invoice.accInvoiceControllerCMN;
import com.krawler.spring.accounting.invoice.accInvoiceDAO;
import com.krawler.spring.accounting.product.accProductDAO;
import com.krawler.spring.accounting.salesorder.accSalesOrderServiceImpl;
import com.krawler.spring.auditTrailModule.auditTrailDAO;
import com.krawler.spring.authHandler.authHandler;
import com.krawler.spring.common.KwlReturnObject;
import com.krawler.spring.common.fieldDataManager;
import com.krawler.spring.common.fieldManagerDAO;
import com.krawler.spring.gst.AccGstServiceImpl;
import com.krawler.spring.importFunctionality.ImportDAO;
import com.krawler.spring.importFunctionality.ImportHandler;
import com.krawler.spring.storageHandler.storageHandlerImpl;
import com.krawler.utils.json.base.JSONArray;
import com.krawler.utils.json.base.JSONException;
import com.krawler.utils.json.base.JSONObject;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.math.BigInteger;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.*;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.zip.ZipEntry;
import java.util.zip.ZipInputStream;
import org.apache.commons.fileupload.DiskFileUpload;
import org.apache.commons.fileupload.FileItem;
import org.apache.poi.hssf.usermodel.HSSFCell;
import org.apache.poi.hssf.usermodel.HSSFCellStyle;
import org.apache.poi.hssf.usermodel.HSSFFont;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.hssf.util.HSSFColor;
import org.apache.poi.ss.usermodel.CellStyle;
import org.apache.poi.ss.usermodel.Font;
import org.springframework.context.MessageSource;
import org.springframework.transaction.annotation.Propagation;
import org.springframework.transaction.annotation.Transactional;
import com.krawler.spring.common.kwlCommonTablesDAO;
import com.krawler.common.admin.MultiEntityDimesionCustomData;
import com.krawler.common.util.DataInvalidateException;
import com.krawler.common.util.IndiaComplianceConstants;
import com.krawler.hql.accounting.DefaultTerms;
import com.krawler.hql.accounting.GSTCessRuleType;
import com.krawler.spring.accounting.gst.dto.GSTR2Submission;
import com.krawler.spring.accounting.gst.services.gstr2.GSTR2DeskeraServiceImpl;
import javax.servlet.ServletContext;
import com.krawler.esp.handlers.ServerEventManager;
import com.krawler.spring.accounting.masteritems.accMasterItemsDAO;
import com.krawler.spring.exportFuctionality.ExportRecordHandler;
import java.util.regex.Pattern;

/**
 *
 * @author Suhas.Chaware
 */
public class AccEntityGstServiceImpl extends BaseDAO implements AccEntityGstService {

    private accProductDAO accProductObj;
    private accAccountDAO accAccountDAOobj;
    private AccEntityGstDao accEntityGstDao;
    private ImportHandler importHandler;
    private ImportDAO importDao;
    private AccEntityGstService accEntityGstService;
    private accInvoiceDAO accInvoiceDAOobj;
    private fieldManagerDAO fieldManagerDAOobj;
    private AccountingHandlerDAO accountingHandlerDAOobj;
    private fieldDataManager fieldDataManagercntrl;
    private MessageSource messageSource;
    private auditTrailDAO auditTrailObj;
    private GSTR1ServiceDao gSTR1DeskeraServiceDao;
    private GSTR2Dao gstr2Dao;
    private GSTR2Service gSTR2Service;
    private accCurrencyImpl accCurrencyDAOObj;
    private kwlCommonTablesDAO kwlCommonTablesDAOObj;
    private AccGSTReportServiceDAO accGSTReportService;
    private accMasterItemsDAO accMasterItemsDAOobj;

    public void setgSTR2Service(GSTR2Service gSTR2Service) {
        this.gSTR2Service = gSTR2Service;
    }

    public void setgstr2Dao(GSTR2Dao gstr2Dao) {
        this.gstr2Dao = gstr2Dao;
    }
    public void setgSTR1DeskeraServiceDao(GSTR1ServiceDao gSTR1DeskeraServiceDao) {
        this.gSTR1DeskeraServiceDao = gSTR1DeskeraServiceDao;
    }

    public void setAccEntityGstDao(AccEntityGstDao accEntityGstDao) {
        this.accEntityGstDao = accEntityGstDao;
    }

    public void setaccProductDAO(accProductDAO accProductObj) {
        this.accProductObj = accProductObj;
    }

    public void setAccEntityGstService(AccEntityGstService accEntityGstService) {
        this.accEntityGstService = accEntityGstService;
    }

    public void setimportDAO(ImportDAO importDao) {
        this.importDao = importDao;
    }
    public void setaccInvoiceDAOobj(accInvoiceDAO accInvoiceDAOobj) {
        this.accInvoiceDAOobj = accInvoiceDAOobj;
    }
    public void setaccAccountDAO(accAccountDAO accAccountDAOobj) {
        this.accAccountDAOobj = accAccountDAOobj;
    }

    public void setimportHandler(ImportHandler importHandler) {
        this.importHandler = importHandler;
    }

    public void setFieldManagerDAO(fieldManagerDAO fieldManagerDAOobj) {
        this.fieldManagerDAOobj = fieldManagerDAOobj;
    }

    public void setaccountingHandlerDAO(AccountingHandlerDAO AccountingHandlerDAOobj) {
        this.accountingHandlerDAOobj = AccountingHandlerDAOobj;
    }

    public void setFieldDataManager(fieldDataManager fieldDataManagercntrl) {
        this.fieldDataManagercntrl = fieldDataManagercntrl;
    }

    public void setMessageSource(MessageSource ms) {
        this.messageSource = ms;

    }
    public void setauditTrailDAO(auditTrailDAO auditTrailDAOObj) {
        this.auditTrailObj = auditTrailDAOObj;
    }

    public void setAccCurrencyDAOObj(accCurrencyImpl accCurrencyDAOObj) {
        this.accCurrencyDAOObj = accCurrencyDAOObj;
    }
    public void setKwlCommonTablesDAO(kwlCommonTablesDAO KwlCommonTablesDAOObj) {
        this.kwlCommonTablesDAOObj = KwlCommonTablesDAOObj;
    }

    public void setAccGSTReportService(AccGSTReportServiceDAO accGSTReportService) {
        this.accGSTReportService = accGSTReportService;
    }
    public void setaccMasterItemsDAO(accMasterItemsDAO accMasterItemsDAOobj) {
        this.accMasterItemsDAOobj = accMasterItemsDAOobj;
    }
    /**
     * Method for getting GST Rule Setup Grid Data(Custom Records).
     *
     * @param requestParams
     * @return
     */
    @Override
    public JSONObject getGSTRuleSetup(JSONObject requestParams) throws ServiceException, ParseException, com.krawler.utils.json.base.JSONException {
        JSONObject finalReturnObj = new JSONObject();
        try {
            String storeRec = "";
            JSONObject jMeta = new JSONObject();
            JSONArray jarrColumns = new JSONArray();
            JSONArray jarrRecords = new JSONArray();
            JSONObject jobjTemp = new JSONObject();
            JSONArray dataJArr = new JSONArray();
            JSONArray pagedJson = new JSONArray();

            /**
             * Create Column model
             */
            HashMap<String, Object> fieldParamsRequestMap = new HashMap<>();
            ArrayList fieldParamsfilter_names = new ArrayList();
            ArrayList fieldParamsfilter_params = new ArrayList();

            KwlReturnObject KWLObj = accountingHandlerDAOobj.getObject(Company.class.getName(), requestParams.optString(Constants.companyKey));
            Company company = (Company) KWLObj.getEntityList().get(0);
            String countryid = company.getCountry().getID();
            requestParams.put("countryid", countryid);

            fieldParamsfilter_names.add(Constants.FIELDPARAMS_ISACTIVATE);
            fieldParamsfilter_params.add(1);
            fieldParamsfilter_names.add(Constants.GST_CONFIG_TYPE);
            fieldParamsfilter_params.add(Constants.GST_CONFIG_ISFORGST);
            fieldParamsfilter_names.add(Constants.moduleid);
            fieldParamsfilter_params.add(Constants.GSTModule);
            fieldParamsfilter_names.add("companyid");
            fieldParamsfilter_params.add(requestParams.optString("companyid"));
            fieldParamsRequestMap.put(Constants.filterNamesKey, fieldParamsfilter_names);
            fieldParamsRequestMap.put(Constants.filterParamsKey, fieldParamsfilter_params);
            KwlReturnObject result = accEntityGstDao.getChildFieldParamsForGSTRule(fieldParamsRequestMap);
            List<FieldParams> fieldParamses = result.getEntityList();
            for (FieldParams fieldParams : fieldParamses) {
                jobjTemp = new JSONObject();
                jobjTemp.put("header", fieldParams.getFieldlabel());
                jobjTemp.put("dataIndex", "shippedLoc" + fieldParams.getGSTMappingColnum());
                jobjTemp.put("align", "center");
                jobjTemp.put("width", 150);
                jobjTemp.put("pdfwidth", 150);
                jarrColumns.put(jobjTemp);
                //Records
                jobjTemp = new JSONObject();
                jobjTemp.put("name", "shippedLoc" + fieldParams.getGSTMappingColnum());
                jarrRecords.put(jobjTemp);
            }

            JSONObject params = new JSONObject();
            params.put("termType", 7);
            params.put("companyid", requestParams.optString("companyid"));
            params.put("isInput", requestParams.optBoolean("isSales"));
            /**
             * get GST master
             */

            KwlReturnObject kwlReturnObject = accEntityGstDao.getGSTTermDetails(params);
            List<LineLevelTerms> lineLevelTerms = kwlReturnObject.getEntityList();
            Map<String, String> GSTTermMap = new HashMap();
            for (LineLevelTerms lineLevelTerms1 : lineLevelTerms) {
                /**
                 * Create Map for Term Id,Name
                 */
                jobjTemp = new JSONObject();
                jobjTemp.put("header", lineLevelTerms1.getTerm());
                jobjTemp.put("dataIndex", lineLevelTerms1.getId());
                jobjTemp.put("align", "center");
                jobjTemp.put("width", 150);
                jobjTemp.put("renderer", "WtfGlobal.gstdecimalRenderer");
                jobjTemp.put("pdfwidth", 150);
                jarrColumns.put(jobjTemp);
                //Records
                jobjTemp = new JSONObject();
                jobjTemp.put("name", lineLevelTerms1.getId());
                jarrRecords.put(jobjTemp);
            }
            /**
             * ERP-34044
             */
            if(countryid.equals(String.valueOf(Constants.indian_country_id))){
                jobjTemp = new JSONObject();
                jobjTemp.put("header","" );
                jobjTemp.put("dataIndex", "groupTerm");
                jarrColumns.put(jobjTemp);
                //Records
                jobjTemp = new JSONObject();
                jobjTemp.put("name", "groupTerm");
                jarrRecords.put(jobjTemp);
            }
            /**
             * get rule data from table
             */
            requestParams.put("df", authHandler.getDateOnlyFormat());
            JSONObject dataObj = getEntityRuleSetup(requestParams);
            dataJArr = dataObj.optJSONArray("dataArr");

            pagedJson = dataJArr;
            finalReturnObj.put("totalCount", dataJArr.length());
            finalReturnObj.put("columns", jarrColumns);
            finalReturnObj.put("coldata", pagedJson);
            jMeta.put("totalProperty", "totalCount");
            jMeta.put("root", "coldata");
            jMeta.put("fields", jarrRecords);
            finalReturnObj.put("metaData", jMeta);
            boolean isExport = false;
            if (requestParams.has("isExport")) {
                isExport = Boolean.parseBoolean(requestParams.optString("isExport"));
            }
            if (isExport) {
                finalReturnObj.put("data", dataJArr);
            }
        } catch (ServiceException | com.krawler.utils.json.base.JSONException ex) {
            Logger.getLogger(AccGstServiceImpl.class.getName()).log(Level.INFO, ex.getMessage());
        } catch (SessionExpiredException ex) {
            Logger.getLogger(AccGstServiceImpl.class.getName()).log(Level.SEVERE, null, ex);
        }
        return finalReturnObj;
    }

    public JSONObject getEntityRuleSetup(JSONObject params) throws ServiceException, ParseException, com.krawler.utils.json.base.JSONException {
        Map<String, Object> reqParams = new HashMap();
        JSONArray jSONArray = new JSONArray();
        String entity = params.optString("entity");
        if (StringUtil.isNullOrEmpty(entity)) {
            return new JSONObject().put("dataArr", jSONArray);
        }
        DateFormat df = (DateFormat) params.opt(Constants.df);

        String productcategory = params.optString("productcategory");
        String transactiondate = params.optString("transactiondate");
        /**
         * Need to get Max location column
         */
        int locationNo = 2;
        reqParams.put("applieddate", df.parse(transactiondate));
        reqParams.put("colnum", locationNo);
        if (!StringUtil.isNullOrEmpty(productcategory)) {
            reqParams.put("isProdCategoryPresent", true);
            reqParams.put("productcategory", productcategory);
        }
        reqParams.put("entity", entity);
        boolean termSalesOrPurchaseCheck = params.optBoolean("isSales");
        reqParams.put("salesOrPurchase", termSalesOrPurchaseCheck);

        /**
         * Get mapped Entity State  and then check GST Rule Local and Other
         * If Entity E1 and State is S1 then
         * For E1 entity S1 state Rule is Local and Except S1 All state will be in Other
         */
        int GSTMappingColnum= 1;
        String entityStateID = "";
        String companyid = params.optString(Constants.companyKey);
        if(params.optInt("countryid") == Constants.indian_country_id){
            int colnumforstate = fieldManagerDAOobj.getColumnFromFieldParams(Constants.STATE, companyid, Constants.GSTModule, 0);
            Map<String, Object> map = new HashMap<>();
            Object res = null;
            map.put(Constants.fieldlabel, Constants.STATE);
            map.put(Constants.companyid, companyid);
            map.put(Constants.moduleid, Constants.GSTModule);
            map.put("customcolumn", 0);
            res = kwlCommonTablesDAOObj.getRequestedObjectFields(FieldParams.class, new String[]{"GSTMappingColnum"}, map);
            GSTMappingColnum = res != null ? (Integer)res : 1;

            map = new HashMap<>();
            res = null;
            map.put("fcdId", entity);
            res = kwlCommonTablesDAOObj.getRequestedObjectFields(MultiEntityDimesionCustomData.class, new String[]{"col"+colnumforstate}, map);
            entityStateID = res != null ? (String) res : "";
        }
        /**
         * Get Dimensions created for GST
         */
        HashMap<String, Object> hashMap = new HashMap();
        List<String> filter_names = new ArrayList();
        List<Object> filter_values = new ArrayList();
        filter_names.add("companyid");
        filter_names.add("GSTConfigType");
        filter_names.add("moduleid");
        filter_values.add(params.optString("companyid"));
        filter_values.add(Constants.GST_CONFIG_ISFORGST);
        filter_values.add(Constants.GSTModule);
        hashMap.put("filter_names", filter_names);
        hashMap.put("filter_values", filter_values);
        KwlReturnObject kro = fieldManagerDAOobj.getFieldParams(hashMap);
        Map<String, String> dimvaluemap = new HashMap();
        if (kro.getEntityList() != null && kro.getEntityList().size() > 0 && kro.getEntityList().get(0) != null) {
            List<FieldParams> fieldParamses = kro.getEntityList();
            for (FieldParams fieldParams : fieldParamses) {
                params.put("fieldid", fieldParams.getId());
                params.put("companyid", fieldParams.getCompanyid());
                KwlReturnObject object = accEntityGstDao.getFieldCombodataForModule(params);
                List<FieldComboData> comboDatas = object.getEntityList();
                for (FieldComboData fieldComboData : comboDatas) {
                    dimvaluemap.put(fieldComboData.getId(), fieldComboData.getValue());
                }
            }
        }
        hashMap.put("filter_names", df);
        /**
         * Get State/City wise GST rate applied against Entity >> Product
         *
         */
        reqParams.put("companyid", params.optString("companyid"));
        KwlReturnObject result = accEntityGstDao.getGroupByEntityBasedTermRate(reqParams);
        if (result.getEntityList() != null && result.getEntityList().size() > 0 && result.getEntityList().get(0) != null) {
            for (Iterator it = result.getEntityList().iterator(); it.hasNext();) {
                Object[] object = (Object[]) it.next();
                String entitywiserate = object[0].toString();
                String arr[] = entitywiserate.split(",");
                JSONObject jSONObject = new JSONObject();
                for (String string : arr) {
                    String[] pair = string.split(":");
                    jSONObject.put(pair[0], pair[1]);
                }
                /**
                 * ERP-34044
                 */
                if (params.optInt("countryid") == Constants.indian_country_id && !StringUtil.isNullOrEmpty(entityStateID) && object.length>=GSTMappingColnum && 
                        object[GSTMappingColnum]!=null && !StringUtil.isNullOrEmpty(object[GSTMappingColnum].toString())) {
                    if (entityStateID.equals(object[GSTMappingColnum].toString())) {
                        jSONObject.put("groupTerm", "Local");
                    } else {
                        jSONObject.put("groupTerm", "Other");
                     }
                }
                jSONObject.put("shippedLoc1", dimvaluemap.get((String) "" + object[1]));
                jSONObject.put("shippedLoc2", dimvaluemap.get((String) "" + object[2]));
                jSONObject.put("shippedLoc3", dimvaluemap.get((String) "" + object[3]));
                jSONObject.put("shippedLoc4", dimvaluemap.get((String) "" + object[4]));
                jSONObject.put("shippedLoc5", dimvaluemap.get((String) "" + object[5]));
                jSONArray.put(jSONObject);
            }

        }

        return new JSONObject().put("dataArr", jSONArray);
    }

    private String getLocation(EntitybasedLineLevelTermRate entitybasedLineLevelTermRate, int col) {
        String location = "";
        switch (col) {
            case 1:
                location = entitybasedLineLevelTermRate.getShippedLoc1().getValue();
                break;
            case 2:
                location = entitybasedLineLevelTermRate.getShippedLoc2().getValue();
                break;
            case 3:
                location = entitybasedLineLevelTermRate.getShippedLoc3().getValue();
                break;
            case 4:
                location = entitybasedLineLevelTermRate.getShippedLoc4().getValue();
                break;
            case 5:
                location = entitybasedLineLevelTermRate.getShippedLoc5().getValue();
                break;
        }
        return location;
    }

    /**
     *
     * @param reqParams
     * @return
     * @Desc : get Field combo data for particular module id
     * @throws ServiceException
     * @throws com.krawler.utils.json.base.JSONException
     */
    public JSONObject getFieldComboDataForModule(JSONObject reqParams) throws ServiceException, com.krawler.utils.json.base.JSONException {

        KwlReturnObject kwlReturnObject = accEntityGstDao.getFieldCombodataForModule(reqParams);
        List<FieldComboData> fieldComboDatas = kwlReturnObject.getEntityList();
        JSONObject jSONObject = new JSONObject();
        JSONArray array = new JSONArray();
        for (FieldComboData fieldComboData : fieldComboDatas) {
            jSONObject = new JSONObject();
            jSONObject.put("id", fieldComboData.getId());
            jSONObject.put("name", fieldComboData.getValue());
            array.put(jSONObject);
        }

        return new JSONObject().put("data", array);
    }

    /**
     * ERP-33643
     *
     * @param params (State : StateID from FieldComboData, Entity : EntityID from FieldComboData)
     * @return (success1 : true (for CGST,SGST), false (for IGST).
     * @desc get State mapped with entity to check for user to show 
     *  either : CGST and SGST Input box
     *  Or     : IGST Input box.
     * @throws JSONException
     * @throws ServiceException
     */
    @Override
    public JSONObject isStateMappedwithEntity(JSONObject params) throws JSONException, ServiceException, ParseException {
        JSONObject entityStateMap = new JSONObject();
        Map<String, Object> requestParams = new HashMap();
        /**
         * Get column number from FieldParams for State.
         */
        HashMap hashMap =  new HashMap<String,Object>();
        List<String> filter_names = new ArrayList();
        List<Object> filter_values = new ArrayList();
        filter_names.add(Constants.companyid);
        filter_values.add(params.optString(Constants.companyid));
        filter_names.add(Constants.fieldlabel);
        filter_values.add(Constants.STATE);
        filter_names.add(Constants.moduleid);
        filter_values.add(Constants.GSTModule);
        hashMap.put("filter_names", filter_names);
        hashMap.put("filter_values", filter_values);
        KwlReturnObject kro = fieldManagerDAOobj.getFieldParams(hashMap);
        if (kro.getEntityList() != null && kro.getEntityList().size() == 1 && kro.getEntityList().get(0) != null) {
            FieldParams fieldParamses = (FieldParams) kro.getEntityList().get(0);
            String column = "col"+fieldParamses.getColnum();
            requestParams.put(Constants.column, column);
        }
        requestParams.put(Constants.entity, params.get(Constants.entity));
        requestParams.put(Constants.STATE, params.get(Constants.STATE));
        KwlReturnObject result = accEntityGstDao.isStateMappedwithEntity(requestParams);
        if(result.isSuccessFlag()&&result.getRecordTotalCount()>0){
            /**
             * true to indicate match found in DB, hence it is local State,
             * hence CGST and SGST will be applicable.
             */
            entityStateMap.put(Constants.success1, true);
        }else if(result.isSuccessFlag()){
            /**
             * false to indicate match not found in DB, hence it is other State,
             * hence IGST will be applicable.
             */
            entityStateMap.put(Constants.success1, false);
        }
        return new JSONObject().put(Constants.data, entityStateMap);
    }
    /**
     * ERP-32829
     *
     * @param params
     * @return
     * @Desc : save GST rule set up
     * @throws JSONException
     * @throws ServiceException
     */
    @Transactional(propagation = Propagation.REQUIRED, rollbackFor = {SessionExpiredException.class, AccountingException.class, ServiceException.class, JSONException.class})
    public JSONObject saveGSTRuleSetup(JSONObject params) throws JSONException, ServiceException, ParseException {
        String auditaction="added";
        Locale locale = null;
        Double oldValue = 0.0;
        String termName = "";
        boolean isNewRule = false;
        if (params.has(Constants.locale)) {
            locale = (Locale) params.get(Constants.locale);
        }
        /**
         * Message for Audit Trial entry.
         */
        String details = "";
        /**
         * isAddOrEdit flag used to differ import case from add edit case to
         * enter detailed Audit Trail Entry.
         */
        boolean isAddOrEdit = params.optBoolean(Constants.isAddOrEdit);
        String dateFormat = null;
        String dateFormatId = params.optString("dateFormat");
        if (!StringUtil.isNullOrEmpty(dateFormatId)) {                          //Getting Date Format
            KwlReturnObject kdfObj = accountingHandlerDAOobj.getObject(KWLDateFormat.class.getName(), dateFormatId);
            KWLDateFormat kdf = (KWLDateFormat) kdfObj.getEntityList().get(0);

            dateFormat = kdf != null ? kdf.getJavaForm() : null;
        }
        DateFormat df = new SimpleDateFormat(dateFormat);

        /**
         * get GST term details for processing
         */
        params.put("termType", 7);
        KwlReturnObject kwlReturnObject = accEntityGstDao.getGSTTermDetails(params);
        List<LineLevelTerms> lineLevelTerms = kwlReturnObject.getEntityList();
        Map<String, String> GSTTermMap = new HashMap();
        JSONObject GSTDefaultTermMap = new JSONObject();
        for (LineLevelTerms lineLevelTerms1 : lineLevelTerms) {
            /**
             * Create Map for Term Id,Name
             */
            GSTTermMap.put(lineLevelTerms1.getTerm(), lineLevelTerms1.getId());
            GSTDefaultTermMap.put(lineLevelTerms1.getId(), lineLevelTerms1.getDefaultTerms()!=null ? lineLevelTerms1.getDefaultTerms().getId() : "");
        }
        params.put("GSTDefaultTermMap", GSTDefaultTermMap);
        /**
         * Need to convert input request data into entity wise array to save in
         * DB
         */
        JSONArray dataArr = new JSONArray();
        dataArr = createEntityTermJson(params, GSTTermMap);

        /**
         * Iterate data to pass data to impl layer
         */
        Map<String, Object> reqMap = new HashMap();
        for (int index = 0; index < dataArr.length(); index++) {
            JSONObject dataObj = dataArr.getJSONObject(index);
            /**
             * Pass this object as it is to save
             */
            reqMap.put("term", dataObj.optString("term"));
            reqMap.put("entity", dataObj.optString("entity"));
            reqMap.put("percentage", dataObj.optDouble("percentage"));
            reqMap.put("amount", dataObj.optDouble("amount", 0));
            reqMap.put("type", dataObj.optInt("type", 1));
            try {
                reqMap.put("applieddate", df.parse(dataObj.optString("applieddate")));
            } catch (ParseException ex) {
                Logger.getLogger(AccAccountServiceImpl.class.getName()).log(Level.SEVERE, null, ex);
            }
            reqMap.put("shiplocation1", dataObj.optString("shiplocation1"));
            reqMap.put("shiplocation2", dataObj.optString("shiplocation2"));
            reqMap.put("shiplocation3", dataObj.optString("shiplocation3"));
            reqMap.put("shiplocation4", dataObj.optString("shiplocation4"));
            reqMap.put("shiplocation5", dataObj.optString("shiplocation5"));
            reqMap.put(Constants.isMerchantExporter, dataObj.optBoolean(Constants.isMerchantExporter,false));
            reqMap.put(Constants.COUNTRY_ID, params.optString(Constants.COUNTRY_ID, ""));
            reqMap.put(IndiaComplianceConstants.GST_CESS_TYPE, dataObj.optString(IndiaComplianceConstants.GST_CESS_TYPE,""));
            reqMap.put(IndiaComplianceConstants.GST_CESS_VALUATION_AMOUNT, dataObj.optDouble(IndiaComplianceConstants.GST_CESS_VALUATION_AMOUNT,0.0));
            /**
             * Need to update rule if it is present already
             */
            boolean isEdit = false;
            if (!StringUtil.isNullOrEmpty(dataObj.optString("prodcategory"))) {
                reqMap.put("prodcategory", dataObj.optString("prodcategory"));
            }
            List returnList = accEntityGstDao.getRuleIdInEditCase(reqMap);
            if (!returnList.isEmpty() && returnList.get(0) != null) {
                String id = (String) returnList.get(0);
                reqMap.put("id", id);
                /**
                 * creating parameter as required for method checkTermsUsed().
                 * Required parameters are : 
                 * 1. id1
                 */
                JSONObject jobj = new JSONObject();
                jobj.put(Constants.id1, id);
                JSONArray jArr = new JSONArray();
                jArr.put(jobj);
                JSONObject jobjParam = new JSONObject();
                jobjParam.put(Constants.data, jArr);
                KwlReturnObject res = checkTermsUsed(jobjParam);
                if (res.isSuccessFlag()) {
                    /**
                     * Get Module Names and Used Term Name for edit case. and
                     * simply skip this record in import case.
                     */
                    if (isAddOrEdit) {
                        List result = res.getEntityList();
                        if (result.get(0) != null) {
                            Map<String, String> terms = (Map) result.get(0);
                            if (terms.containsKey(Constants.modulename)) {
                                params.put(Constants.modulename, terms.get(Constants.modulename));
                                /**
                                 * Message on UI for not allowing user to edit GST Rule.
                                 */
                                params.put(Constants.RES_msg, messageSource.getMessage("acc.gstrr.cannotEditRule", new Object[]{terms.get(Constants.modulename)}, locale));
                                /**
                                 * False to display warning message box in UI.
                                 */
                                params.put(Constants.RES_success, false);
                            }
                            if (terms.containsKey(Constants.usedTerms)) {
                                params.put(Constants.usedTerms, terms.get(Constants.usedTerms));
                            }
                        }
                    }
                    continue;
                } else if (isAddOrEdit) {
                    List result = res.getEntityList();
                    if (result.get(0) != null) {
                        Map<String, String> terms = (Map) result.get(0);
                        if (terms.containsKey(Constants.usedTerms)) {
                            params.put(Constants.unusedTerms, terms.get(Constants.unusedTerms));
                        }
                    }
                    /**
                     * message to be displayed for successfully editing rule.
                     */
                    params.put(Constants.RES_msg, messageSource.getMessage("acc.gstrr.ruleEdited", null, locale));
                    params.put(Constants.RES_success, true);
                    /**
                     * Get Old Values and TermName for Audit Trial.
                     */
                    Map<String, Object> filterMap = new HashMap();
                    filterMap.put(Constants.Acc_id, id);
                    Object[] editValues = (Object []) kwlCommonTablesDAOObj.getRequestedObjectFields(EntitybasedLineLevelTermRate.class, new String[]{Constants.percentage, Constants.lineLevelTerms}, filterMap);
                    oldValue = (editValues[0] != null ? ((Double) editValues[0]) : 0.0);
                    termName = (editValues[1] != null ? ((LineLevelTerms) editValues[1]).getTerm() : "");
                }
                isEdit = true;
                auditaction = " updated";
            }
            KwlReturnObject returnObject = accEntityGstDao.saveGSTRuleSetup(reqMap);
            if (!StringUtil.isNullOrEmpty(dataObj.optString("prodcategory")) &&!isEdit) {
                /**
                 * If rule set for any product category then save mapping for
                 * category-Term
                 */
                if (returnObject.getEntityList().size() > 0 && returnObject.getEntityList().get(0) != null) {
                    reqMap.remove("id");
                    reqMap.put("prodcategory", dataObj.optString("prodcategory"));
                    reqMap.put("entityterm", returnObject.getEntityList().get(0));
                    accEntityGstDao.saveGSTRuleProdCategoryMapping(reqMap);
                }
            }
            if(isAddOrEdit){
                /**
                 * Add Audit Trial parameters.
                 */
                reqMap.put(Constants.remoteIPAddress, params.getString(Constants.remoteIPAddress));
                reqMap.put(Constants.useridKey, params.getString(Constants.useridKey));
                /**
                 * Detailed Individual Entry in case of add and edit.
                 */
                if(!isEdit){
                    if (returnObject.getEntityList().size() > 0 && returnObject.getEntityList().get(0) != null) {
                        List<String> res = new ArrayList();
                        EntitybasedLineLevelTermRate term = ((EntitybasedLineLevelTermRate) returnObject.getEntityList().get(0));
                        res.add(term.getId());
                        Map<String, String> termNames = getTermName(res);
                        /**
                         * Even If 2 or more rules added in 
                         * EntityBasesLineleveltermsRate we need to show only
                         * one. 
                         * e.g : CGST and SGST : show StateName:appliedDate.
                         */
                        if (termNames.containsKey(res.get(0))) {
                            params.put(Constants.unusedTerms, termNames.get(res.get(0)));
                        }
                        /**
                         * Message for on UI for successfully adding a new rule.
                         */
                        params.put(Constants.RES_msg, messageSource.getMessage("acc.gstrr.ruleAdded", null, locale));
                        params.put(Constants.RES_success, true);
                        details = messageSource.getMessage("acc.gstrr.add.auditDetailEntry", new Object[]{params.optString(Constants.user), params.optString(Constants.unusedTerms)} ,locale);
                        isNewRule = true;
                    }
                } else {
                    Double editeValue = reqMap.get(Constants.percentage) != null ? (Double) reqMap.get(Constants.percentage) : 0.0;
                    /**
                     * Do Audit Trial entry only when value is changed.
                     */
                    if (!oldValue.equals(editeValue)) {
                        details = messageSource.getMessage("acc.gstrr.edit.auditDetailEntry", new Object[]{params.optString(Constants.user), params.optString(Constants.unusedTerms), termName, oldValue, reqMap.get(Constants.percentage)}, locale);
                        auditTrailObj.insertAuditLog(AuditAction.GST, details, reqMap, params.optString("companyid"));
                    }
                }
            }
        }
        if (!params.has(Constants.isAddOrEdit)) {
            details = "User " + params.optString("user") + " has " + auditaction + " GST rule";
            reqMap.put("userid", params.optString("userid"));
            auditTrailObj.insertAuditLog(AuditAction.GST, details, reqMap, params.optString("companyid"));
        } else if (isNewRule) {
            /**
             * Audit Trial for adding new Rule, once for every Rule.
             */
            auditTrailObj.insertAuditLog(AuditAction.GST, details, reqMap, params.optString("companyid"));
        }
        return params;
    }
    /**
     * @desc : Method Gives Term Name for every id given in List
     * @param RuleIDs (id: EntityBasedLineLevelTermsRate's ID)
     * @return Map (id (of EntityBasedLineLevelTermsRate) : TermName (format =
     * ShippedLocation5:ShippedLocation4:ShippedLocation3:ShippedLocation2:ShippedLocation1:AppliedDate))
     * @throws ServiceException
     */
    Map<String, String> getTermName(List<String> RuleIDs) throws ServiceException {
        Map<String, String> termNames = new HashMap();
        for (String id : RuleIDs) {
            String appliedDate = "";
            Map<String, Object> filterMap = new HashMap();
            filterMap.put("id", id);
            Object[] stateFCDArray = (Object[]) kwlCommonTablesDAOObj.getRequestedObjectFields(EntitybasedLineLevelTermRate.class, new String[]{Constants.shippedLoc1, Constants.shippedLoc2, Constants.shippedLoc3, Constants.shippedLoc4, Constants.shippedLoc5}, filterMap);
            EntitybasedLineLevelTermRate eltr = (EntitybasedLineLevelTermRate) get(EntitybasedLineLevelTermRate.class, id);
            if (eltr != null) {
                SimpleDateFormat df = new SimpleDateFormat("yyyy-MM-dd");
                appliedDate = df.format(eltr.getAppliedDate());
            }
            if (stateFCDArray[4] != null && stateFCDArray[3] != null && stateFCDArray[2] != null && stateFCDArray[1] != null && stateFCDArray[0] != null) {
                String stateFCD5 = ((FieldComboData) stateFCDArray[4]).getValue();
                String stateFCD4 = ((FieldComboData) stateFCDArray[3]).getValue();
                String stateFCD3 = ((FieldComboData) stateFCDArray[2]).getValue();
                String stateFCD2 = ((FieldComboData) stateFCDArray[1]).getValue();
                String stateFCD1 = ((FieldComboData) stateFCDArray[0]).getValue();
                String unusedTerm = " " + stateFCD1 + ":" + " " + stateFCD2 + ":" + " " + stateFCD3 + ":" + " " + stateFCD4 + ":" + " " + stateFCD5 + ":" + appliedDate;
                termNames.put(id, unusedTerm);
            } else if (stateFCDArray[3] != null && stateFCDArray[2] != null && stateFCDArray[1] != null && stateFCDArray[0] != null) {
                String stateFCD4 = ((FieldComboData) stateFCDArray[3]).getValue();
                String stateFCD3 = ((FieldComboData) stateFCDArray[2]).getValue();
                String stateFCD2 = ((FieldComboData) stateFCDArray[1]).getValue();
                String stateFCD1 = ((FieldComboData) stateFCDArray[0]).getValue();
                String unusedTerm = " " + stateFCD1 + ":" + " " + stateFCD2 + ":" + " " + stateFCD3 + ":" + " " + stateFCD4 + ":" + appliedDate;
                termNames.put(id, unusedTerm);
            } else if (stateFCDArray[2] != null && stateFCDArray[1] != null && stateFCDArray[0] != null) {
                String stateFCD3 = ((FieldComboData) stateFCDArray[2]).getValue();
                String stateFCD2 = ((FieldComboData) stateFCDArray[1]).getValue();
                String stateFCD1 = ((FieldComboData) stateFCDArray[0]).getValue();
                String unusedTerm = " " + stateFCD1 + ":" + " " + stateFCD2 + ":" + " " + stateFCD3 + ":" + appliedDate;
                termNames.put(id, unusedTerm);
            } else if (stateFCDArray[1] != null && stateFCDArray[0] != null) {
                String stateFCD2 = ((FieldComboData) stateFCDArray[1]).getValue();
                String stateFCD1 = ((FieldComboData) stateFCDArray[0]).getValue();
                String unusedTerm = " " + stateFCD1 + ":" + " " + stateFCD2 + ":" + appliedDate;
                termNames.put(id, unusedTerm);
            } else if (stateFCDArray[0] != null) {
                String stateFCD1 = ((FieldComboData) stateFCDArray[0]).getValue();
                String unusedTerm = " " + stateFCD1 + ":" + appliedDate;
                termNames.put(id, unusedTerm);
            }
        }
        return termNames;
    }

    /**
     * ERP-32829
     *
     * @param params
     * @param termsList = List contains all terms i.e. GST master id
     * @return
     * @Desc : Create Json Array for each Term
     * @throws JSONException
     */
    public JSONArray createEntityTermJson(JSONObject params, Map<String, String> termMap) throws JSONException, ServiceException, ParseException {
        JSONArray returnArr = new JSONArray();
        JSONArray array = params.optJSONArray("data");
        String entity = params.optString("entity");
        String applieddate = params.optString("applieddate");
        boolean salesOrPurchase = params.optBoolean("isInput");
        JSONObject GSTDefaultTermMap = params.optJSONObject("GSTDefaultTermMap");
        String companyid = params.optString(Constants.companyKey);
        String countryid = "";
        KwlReturnObject KWLObj = accountingHandlerDAOobj.getObject(Company.class.getName(), companyid);
        if (KWLObj != null && !KWLObj.getEntityList().isEmpty()) {
            Company company = (Company) KWLObj.getEntityList().get(0);
            countryid = company.getCountry().getID();
        }
        String localstate="";
        for (int index = 0; index < array.length(); index++) {
            /**
             * Iterate each location wise row
             */
            JSONObject nObject = array.optJSONObject(index);
            for (Map.Entry<String, String> entry : termMap.entrySet()) {
                String string = entry.getValue();

//            }
//            for (String string : termsList) {
                /**
                 * Iterate each GST master
                 */
                if (nObject.has(string)) {
                    /**
                     * if Rate set for GST then create Json Object
                     */
                    JSONObject termobj = new JSONObject();
                    termobj.put("term", string);
                    if (!StringUtil.isNullOrEmpty(entity)) {
                        termobj.put("entity", entity);
                    } else {
                        termobj.put("entity", nObject.optString("entity"));
                    }
                    if (!StringUtil.isNullOrEmpty(applieddate)) {
                        termobj.put("applieddate", applieddate);
                    } else {
                        termobj.put("applieddate", nObject.optString("applieddate"));
                    }
                    termobj.put("percentage", nObject.optDouble(string));
                    termobj.put("prodcategory", nObject.optString("prodcategory"));
                    termobj.put("shiplocation1", nObject.optString("shiplocation1"));
                    termobj.put("shiplocation2", nObject.optString("shiplocation2"));
                    termobj.put("shiplocation3", nObject.optString("shiplocation3"));
                    termobj.put("shiplocation4", nObject.optString("shiplocation4"));
                    termobj.put("shiplocation5", nObject.optString("shiplocation5"));
                    termobj.put(Constants.isMerchantExporter, nObject.optBoolean(Constants.isMerchantExporter,false));
                    /**
                     * Check Term is of Type CESS for INDIA GST 
                     * if Yes then get CESS Calculation Type and Valuation Amount
                     */
                    if(!StringUtil.isNullOrEmpty(countryid) && countryid.equalsIgnoreCase(Constants.INDIA_COUNTRYID) && GSTDefaultTermMap!=null && !StringUtil.isNullOrEmpty(GSTDefaultTermMap.optString(string,""))){
                        String termID = GSTDefaultTermMap.optString(string,"");
                        if(salesOrPurchase && termID.equals((String) LineLevelTerms.GSTName.get("OutputCESS"))){
                            termobj.put(IndiaComplianceConstants.GST_CESS_TYPE, nObject.optString(IndiaComplianceConstants.GST_CESS_TYPE,""));
                            termobj.put(IndiaComplianceConstants.GST_CESS_VALUATION_AMOUNT, nObject.optDouble(IndiaComplianceConstants.GST_CESS_VALUATION_AMOUNT,0.0));
                        }else if(!salesOrPurchase && termID.equals((String) LineLevelTerms.GSTName.get("InputCESS"))){
                            termobj.put(IndiaComplianceConstants.GST_CESS_TYPE, nObject.optString(IndiaComplianceConstants.GST_CESS_TYPE,""));
                            termobj.put(IndiaComplianceConstants.GST_CESS_VALUATION_AMOUNT, nObject.optDouble(IndiaComplianceConstants.GST_CESS_VALUATION_AMOUNT,0.0));
                        }
                    }
                    /**
                     * if To location other then iterate loop for all states
                     */
                    if (nObject.optString("shiplocation1").contains("Other")) {
                        List<String> states = accEntityGstDao.getStatesFromFCD(nObject);
                        for (String state : states) {
                            returnArr.length();
                            String fieldId = nObject.optString("fieldid");
                            String diaValue = accAccountDAOobj.getComboIdForAccount(state, fieldId);
                            if (diaValue.equalsIgnoreCase(localstate)) {
                                /**
                                 * if local state comes then ignore step
                                 */
                                continue;
                            }
                            JSONObject copy=new JSONObject(termobj.toString());
                            copy.put("shiplocation1", diaValue);
                            returnArr.put(copy);
                        }
                    } else {
                        localstate = nObject.optString("shiplocation1");
                        returnArr.put(termobj);
                    }
                }
            }
        }
        return returnArr;
    }
    
    /**
     * 
     * @param requestJobj
     * @return
     * @throws JSONException
     * @throws FileNotFoundException
     * @throws IOException
     * @throws ServiceException 
     */
    @Transactional(propagation = Propagation.REQUIRED, rollbackFor = {SessionExpiredException.class, AccountingException.class, ServiceException.class, JSONException.class})
    public JSONObject importEwayFieldsData(JSONObject requestJobj) throws JSONException, FileNotFoundException, IOException, ServiceException {
        Locale locale = Locale.forLanguageTag(requestJobj.getString(Constants.language));
        JSONObject jobj = new JSONObject();
        String msg = "";
        boolean issuccess = true;
        int total = 0, failed = 0;
        String fileName = "", tableName = "", extn = "", failureFileType = "";
        try {
            String mode = requestJobj.optString("modName");
            fileName = requestJobj.optString("filename");
            extn = fileName.substring(fileName.lastIndexOf(".") + 1);
            String companyid = requestJobj.optString("companyid");
            String dateFormat = null, dateFormatId = requestJobj.optString("dateFormat");
            if (extn.equalsIgnoreCase("csv") && !StringUtil.isNullOrEmpty(dateFormatId)) {
                KWLDateFormat kdf = (KWLDateFormat) kwlCommonTablesDAOObj.getClassObject(KWLDateFormat.class.getName(), dateFormatId);
                dateFormat = kdf != null ? kdf.getJavaForm() : null;
            }
            int ImportModuleId = requestJobj.optInt("ImportModuleId");
            Object extraObj = requestJobj.optString("extraObj");
            /**
             * Get Custom table Details
             */
            KwlReturnObject kwlReturnObject = accMasterItemsDAOobj.getCustomTableName(new JSONObject());
            List customTableList = kwlReturnObject.getEntityList();
            JSONArray customTablesDetails = accMasterItemsDAOobj.createJsonForCustomTableList(customTableList);
            JSONObject obj = new JSONObject();
            obj.put("module", ImportModuleId);
            obj.put("lineitem", 0);
            String refTableName = "", refTablePrimaryKey = "", reftableclasspath = "";
            JSONArray customTablesArrayObj = StringUtil.findAllJsonObjectFromJsonArray(customTablesDetails, obj);
            if (customTablesArrayObj.length() >= 1) {
                JSONObject globalObj = customTablesArrayObj.getJSONObject(0);
                refTableName = globalObj.optString("reftable", "").replaceAll("\"", "").trim();
                refTablePrimaryKey = globalObj.optString("refprimarykey", "");
                refTablePrimaryKey = refTablePrimaryKey.substring(0, 1).toUpperCase() + refTablePrimaryKey.substring(1);
                if(ImportModuleId==Constants.Acc_Goods_Receipt_ModuleId){
                    refTablePrimaryKey = "GoodsReceiptOrderId";
                }
                if(ImportModuleId==Constants.Acc_Purchase_Return_ModuleId){
                    refTablePrimaryKey = "PurchaseReturnId";
                }
                if(ImportModuleId==Constants.Acc_Sales_Return_ModuleId){
                    refTablePrimaryKey = "SalesReturnId";
                }
                reftableclasspath = globalObj.optString("reftableclasspath", "");
            }
            String jsondata = requestJobj.optString("resjson");
            JSONObject rootcsvjobj = new JSONObject(jsondata);
            JSONArray mapping = rootcsvjobj.getJSONArray("root");
            /**
             * Get Column config details from table
             */
            HashMap<String, Object> params = new HashMap<String, Object>();
            params.put("moduleId", String.valueOf(IndiaComplianceConstants.EWAY_BILL_IMPORT_MODULEID));
            params.put("companyid", companyid);
            params.put("isdocumentimport", "F");
            params.put("subModuleFlag", new Integer(0));
            params.put("isBomlessFile", false);
            params.put("updateExistingRecordFlag", false);
            JSONArray columnConfig = importHandler.getModuleColumnConfig(params);
            tableName = importDao.getTableName(fileName);
            HashMap<String, Object> filterParams = new HashMap<String, Object>();
            KwlReturnObject kresult = importDao.getFileData(tableName, filterParams); //Fetch all valid records
            List fileDataList = kresult.getEntityList();
            Iterator itr = fileDataList.iterator();
            List failureArr = new ArrayList();
            List failureColumnArr = new ArrayList();
            /**
             * Skip header row from file and add last error msg colum 
             * if any error then error msg added in this column
             */
            if (itr.hasNext()) {
                Object[] fileData = (Object[]) itr.next(); //Skip header row
                Map<Integer, Object> invalidColumn = new HashMap<>();//This Map is used to hold index of column whose data is invalid. 
                List headerArr = new ArrayList();
                for (int header = 1; header < fileData.length - 3; header++) {
                    if (fileData[header] != null && !fileData[header].equals("")) {
                        headerArr.add(fileData[header]);
                    }
                }
                headerArr.add("Error Message");// adding one more header as Error Message
                failureArr.add(headerArr);
                failureColumnArr.add(invalidColumn);
            }
            int recIndex = 0;
            importDao.markRecordValidation(tableName, -1, 1, "", ""); //reset all invalidation
            while (itr.hasNext()) {
                total++;
                Object[] fileData = (Object[]) itr.next();
                recIndex = (Integer) fileData[0];
                Map<Integer, Object> invalidColumn = new HashMap<>();//This Map is used to hold index of column whose data is invalid. this kept under while loop because it needs initialization for each record
                HashMap<String, Object> dataMap = new HashMap<String, Object>();
                HashMap<String, Object> columnHeaderMap = new HashMap<String, Object>();
                HashMap<String, Object> columnCSVindexMap = new HashMap<String, Object>();
                JSONArray customfield = new JSONArray();
                /**
                 * Get Individual row data details with column index
                 */
                for (int k = 0; k < mapping.length(); k++) {
                    JSONObject mappingJson = mapping.getJSONObject(k);
                    String datakey = mappingJson.getString("columnname");
                    Object dataValue = importHandler.cleanHTML((String) fileData[mappingJson.getInt("csvindex") + 1]); //+1 for id column at index-0
                    dataMap.put(datakey, dataValue);
                    columnHeaderMap.put(datakey, mappingJson.getString("csvheader"));
                    columnCSVindexMap.put(datakey, mappingJson.getInt("csvindex") + 1);
                }
                Object object = null;
                try {
                    /**
                     * Validate before import any records again in final import
                     */
                    validateEwayFieldsImportColumns(requestJobj, columnConfig, dataMap, columnHeaderMap, columnCSVindexMap, customTablesArrayObj, dateFormat);
                    HashMap<String, Object> requestParams = new HashMap<String, Object>();
                    HashMap<String, Object> customTableDataMap = new HashMap<>();
                    customTableDataMap.put("Companyid", companyid);
                    customTableDataMap.put("ModuleId", String.valueOf(ImportModuleId));
                    /**
                     * Get all data detail for each row with required key and value 
                     */
                    for (int k = 0; k < columnConfig.length(); k++) {
                        JSONObject columnConfigObj = columnConfig.getJSONObject(k);
                        String formfieldname = columnConfigObj.optString("formfieldname");
                        String data = dataMap.containsKey(formfieldname) && dataMap.get(formfieldname) != null ? (String) dataMap.get(formfieldname) : "";
                        data = data.replaceAll("\"", "").trim();
                        String columnName = columnConfigObj.optString("columnName").replaceAll("\"", "").trim();
                        if (formfieldname.equalsIgnoreCase("DocumentNumber")) {
                            if (IndiaComplianceConstants.globalTableNames.containsKey(ImportModuleId)) {
                                JSONObject globalTableDetails = IndiaComplianceConstants.globalTableNames.get(ImportModuleId);
                                String globaleTableName = globalTableDetails.optString(IndiaComplianceConstants.GLOBALTABLENAME, "");
                                String documentNumberColumn = globalTableDetails.optString(IndiaComplianceConstants.DOCUMENT_NUMBER_COLUMN, "");
                                String selectIDQuery = " id ";
                                if(refTableName.equalsIgnoreCase("accjecustomdata")){
                                    selectIDQuery = " journalentry ";
                                }
                                String query = " select " + selectIDQuery + " from " + globaleTableName + " where " + documentNumberColumn + " = '" + data + "' and company='" + companyid + "' ";
                                List result = accEntityGstDao.executeCustomBuildQuery(query, new ArrayList());
                                if (result != null && !result.isEmpty()) {
                                    customTableDataMap.put(refTablePrimaryKey, result.get(0));
                                }
                            }
                        }
                        /**
                         * Get E-Way Bill No column details
                         */
                        if (formfieldname.equalsIgnoreCase("EWayBillNo")) {
                            int colnumForEWayBillNo = fieldManagerDAOobj.getColumnFromFieldParams(columnName, companyid, ImportModuleId, 0);
                            customTableDataMap.put("Col" + colnumForEWayBillNo, data);
                        }
                         /**
                         * Get E-Way Bill Date column details
                         */
                        if (formfieldname.equalsIgnoreCase("EWayBillDate")) {
                            int colnumforEWayBillDate = fieldManagerDAOobj.getColumnFromFieldParams(columnName, companyid, ImportModuleId, 0);
                            dateFormat = dateFormat != null ? dateFormat : Constants.yyyyMMdd;
                            SimpleDateFormat sdf = new SimpleDateFormat(dateFormat);
                            Date date = sdf.parse(data);
                            customTableDataMap.put("Col" + colnumforEWayBillDate, date);
                        }
                    }
                    /**
                     * Added record using reflection only if Primary key present because this import function update records only
                     * not adding new entry
                     */
                    if (customTableDataMap.containsKey(refTablePrimaryKey)) {
                        object = importDao.saveRecord(requestParams, customTableDataMap, null, mode, reftableclasspath, refTablePrimaryKey, extraObj, customfield);
                    }
                } catch (Exception ex) {
                    /**
                     * If validation have any exception then mark this records as Invalid
                     */
                    failed++;
                    String errorMsg = ex.getMessage(), invalidColumns = "";
                    try {
                        JSONObject errorLog = new JSONObject(errorMsg);
                        errorMsg = errorLog.getString("errorMsg");
                        errorMsg = errorMsg.replaceAll("<br/>", "");//since we used same method (validateDataMAP2()) for validation while valoidating and import. 
                        //At the time of validation we need to break line so appended <br/> where as while importing it does not require so replacing it with empty 
                        invalidColumns = errorLog.getString("invalidColumns");
                    } catch (JSONException jex) {
                    }
                    List failureRecArr = new ArrayList();
                    for (int cellData = 1; cellData < fileData.length - 3; cellData++) {
                        failureRecArr.add(fileData[cellData]);
                    }
                    failureRecArr.add(errorMsg.replaceAll("\"", ""));
                    failureArr.add(failureRecArr);

                    failureColumnArr.add(invalidColumn);
                }
            }
            /**
             * Create failure file if any record invalid
             */
            if (failed > 0) {
                failureFileType = "xls";
                importDao.createFailureXlsFiles(fileName, failureArr, ".xls", failureColumnArr);
            }
            /**
             * Create final return msg
             */
            int success = total - failed;
            if (total == 0) {
                msg = "Empty file.";
            } else if (success == 0) {
                msg = messageSource.getMessage("acc.rem.169", null, locale);
            } else if (success == total) {
                msg = "All records are imported successfully.";
            } else {
                msg = "Imported " + success + " record" + (success > 1 ? "s" : "") + " successfully";
                msg += (failed == 0 ? "." : " and failed to import " + failed + " record" + (failed > 1 ? "s" : "") + ".");
            }
        } catch (Exception e) {
            issuccess = false;
            msg = "" + e.getMessage();
            Logger.getLogger(ImportHandler.class.getName()).log(Level.SEVERE, null, e);
        } finally {
            try {
                //Insert Integration log
                HashMap<String, Object> logDataMap = new HashMap<String, Object>();
                String logId = requestJobj.optString("logId");
                if (!StringUtil.isNullOrEmpty(logId)) {
                    logDataMap.put("Id", logId);
                }
                logDataMap.put("FileName", ImportLog.getActualFileName(fileName));
                logDataMap.put("StorageName", fileName);
                logDataMap.put("Log", msg);
                logDataMap.put("Type", fileName.substring(fileName.lastIndexOf(".") + 1));
                logDataMap.put("FailureFileType", failureFileType);
                logDataMap.put("TotalRecs", total);
                logDataMap.put("Rejected", issuccess ? failed : total);// if fail then rejected = total
                logDataMap.put("Module", String.valueOf(IndiaComplianceConstants.EWAY_BILL_IMPORT_MODULEID));
                logDataMap.put("ImportDate", new Date());
                logDataMap.put("User", requestJobj.optString("userid"));
                logDataMap.put("Company", requestJobj.optString("companyid"));
                importDao.saveImportLog(logDataMap);
                /**
                 * Remove dynamic temporary table after import complete
                 */
                importDao.removeFileTable(tableName);//Remove table after importing all records
            } catch (Exception ex) {
                Logger.getLogger(ImportHandler.class.getName()).log(Level.SEVERE, null, ex);
            }
            try {
                jobj.put("success", issuccess);
                jobj.put("msg", msg);
                jobj.put("totalrecords", total);
                jobj.put("successrecords", total - failed);
                jobj.put("failedrecords", failed);
                jobj.put("filename", ImportLog.getActualFileName(fileName));
                jobj.put("mailurl", requestJobj.optString("mailurl"));
            } catch (JSONException ex) {
                Logger.getLogger(ImportHandler.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return jobj;
    }
    /**
     * Validate Import File Before Import actual data 
     * @param requestJobj
     * @return
     * @throws JSONException
     * @throws FileNotFoundException
     * @throws IOException
     * @throws ServiceException 
     */
    public JSONObject validateEwayFieldsData(JSONObject requestJobj) throws JSONException, FileNotFoundException, IOException, ServiceException {
        JSONObject jobj = new JSONObject();
        String msg = "";
        boolean issuccess = true;
        int total = 0, failed = 0, fileSize = 0;
        String fileName = "", extn = "";
        String exceededLimit = "no", channelName = "";
        try {
            fileName = (String) requestJobj.get("filename");
            extn = fileName.substring(fileName.lastIndexOf(".") + 1);
            channelName = "/ValidateFile/" + fileName;
            String jsondata = requestJobj.optString("resjson");
            jsondata = jsondata.replaceAll("\\n", "").trim();
            JSONObject rootcsvjobj = new JSONObject(jsondata);
            JSONArray mapping = rootcsvjobj.getJSONArray("root");

            String dateFormat = null, dateFormatId = requestJobj.optString("dateFormat","");
            if ((extn.equalsIgnoreCase("csv") || extn.equalsIgnoreCase("xls")) && !StringUtil.isNullOrEmpty(dateFormatId)) {
                KWLDateFormat kdf = (KWLDateFormat) kwlCommonTablesDAOObj.getClassObject(KWLDateFormat.class.getName(), dateFormatId);
                dateFormat = kdf != null ? kdf.getJavaForm() : null;
            }
            HashMap<String, Object> params = new HashMap<String, Object> ();
            params.put("moduleId", String.valueOf(IndiaComplianceConstants.EWAY_BILL_IMPORT_MODULEID));
            params.put("companyid", requestJobj.optString("companyid"));
            params.put("isdocumentimport", "F");
            params.put("subModuleFlag", new Integer(0));
            params.put("isBomlessFile", false);
            params.put("updateExistingRecordFlag", false);
            JSONArray columnConfig = importHandler.getModuleColumnConfig(params);
            
            String tableName = importDao.getTableName(fileName);
            KwlReturnObject kresult = importDao.getFileData(tableName, new HashMap<String, Object>());
            List fileDataList = kresult.getEntityList();
            Iterator itr = fileDataList.iterator();

            importDao.markRecordValidation(tableName, -1, 1, "", ""); //reset all invalidation
            JSONArray recordJArr = new JSONArray(), columnsJArr = new JSONArray(), DataJArr = new JSONArray();
            if (itr.hasNext()) { //this if block create an array of column data of file
                Object[] fileData = (Object[]) itr.next();
                JSONObject jtemp = new JSONObject();
                jtemp.put("header", "Row No.");
                jtemp.put("dataIndex", "col0");
                jtemp.put("width", 50);
                columnsJArr.put(jtemp);

                for (int i = 1; i < fileData.length - 3; i++) {    //Discard columns, id at index 0 and isvalid,validationlog at last 2.
                    jtemp = new JSONObject();
                    jtemp.put("header", fileData[i] == null ? "" : fileData[i].toString());
                    jtemp.put("dataIndex", "col" + i);
                    columnsJArr.put(jtemp);
                }

                jtemp = new JSONObject();
                jtemp.put("header", "Validation Log");
                jtemp.put("dataIndex", "validateLog");
                columnsJArr.put(jtemp);

                //Create record Obj for grid's store
                for (int i = 0; i < fileData.length - 1; i++) {
                    jtemp = new JSONObject();
                    jtemp.put("name", "col" + i);
                    recordJArr.put(jtemp);
                }
                jtemp = new JSONObject();
                jtemp.put("name", "validateLog");
                recordJArr.put(jtemp);
            }
            try {
                jobj.put("record", recordJArr);
                jobj.put("columns", columnsJArr);
                jobj.put("data", DataJArr);
                jobj.put("count", failed);
                jobj.put("valid", 0);
                jobj.put("totalrecords", total);
                jobj.put("isHeader", true);
                jobj.put("finishedValidation", false);
                ServerEventManager.publish(channelName, jobj.toString(), (ServletContext) requestJobj.get("servletContext"));
            } catch (Exception ex) {
                throw ex;
            }
            fileSize = fileDataList.size() - 1;
            jobj.put("isHeader", false);
            int recIndex = 0;
            /*
            * Get Custom Table and its All details
            */
            KwlReturnObject kwlReturnObject = accMasterItemsDAOobj.getCustomTableName(new JSONObject());
            List customTableList = kwlReturnObject.getEntityList();
            JSONArray customTablesArrayObj = accMasterItemsDAOobj.createJsonForCustomTableList(customTableList);
            
            while (itr.hasNext()) {
                Object[] fileData = (Object[]) itr.next();
                recIndex = (Integer) fileData[0];
                HashMap<String, Object> dataMap = new HashMap<String, Object>();
                HashMap<String, Object> columnHeaderMap = new HashMap<String, Object>();
                HashMap<String, Object> columnCSVindexMap = new HashMap<String, Object>();
                for (int k = 0; k < mapping.length(); k++) {
                    JSONObject mappingJson = mapping.getJSONObject(k);
                    String datakey = mappingJson.getString("columnname");
                    Object dataValue = importHandler.cleanHTML((String) fileData[mappingJson.getInt("csvindex") + 1]); //+1 for id column at index-0
                    dataMap.put(datakey, dataValue);
                    columnHeaderMap.put(datakey, mappingJson.getString("csvheader"));
                    columnCSVindexMap.put(datakey, mappingJson.getInt("csvindex") + 1);
                }
                try {
                    //Update processing status at client side
                    if (total > 0 && total % 10 == 0) {
                        try {
                            ServerEventManager.publish(channelName, "{parsedCount:" + total + ",invalidCount:" + failed + ", fileSize:" + fileSize + ", finishedValidation:false}", (ServletContext) requestJobj.get("servletContext"));
                        } catch (Exception ex) {
                            throw ex;
                        }
                    }
                    /**
                     * Validate each field from individual row
                     */
                    validateEwayFieldsImportColumns(requestJobj,columnConfig, dataMap,columnHeaderMap,columnCSVindexMap,customTablesArrayObj,dateFormat);
                } catch (Exception ex) {
                    failed++;
                    String errorMsg = ex.getMessage(), invalidColumns = "";
                    try {
                        JSONObject errorLog = new JSONObject(errorMsg);
                        errorMsg = errorLog.getString("errorMsg");
                        invalidColumns = errorLog.getString("invalidColumns");
                    } catch (JSONException jex) {
                    }

                    importDao.markRecordValidation(tableName, recIndex, 0, errorMsg, invalidColumns);
                    JSONObject jtemp = new JSONObject();
                    for (int i = 0; i < fileData.length - 2; i++) {
                        jtemp.put("col" + i, fileData[i] == null ? "" : fileData[i].toString());
                    }
                    jtemp.put("invalidcolumns", invalidColumns);
                    jtemp.put("validateLog", errorMsg);
                    DataJArr.put(jtemp);
                }
                total++;
            }
                int success = total - failed;
                if (total == 0) {
                    msg = "Empty file.";
                } else if (success == 0) {
                    msg = "All the records are invalid.";
                } else if (success == total) {
                    msg = "All the records are valid.";
                } else {
                    msg = "" + success + " valid record" + (success > 1 ? "s" : "") + "";
                    msg += (failed == 0 ? "." : " and " + failed + " invalid record" + (failed > 1 ? "s" : "") + ".");
                }
                jobj.put("record", recordJArr);
                jobj.put("columns", columnsJArr);
                jobj.put("data", DataJArr);
                jobj.put("count", failed);
                jobj.put("valid", success);
                jobj.put("totalrecords", total);
                try {
                    ServerEventManager.publish(channelName, "{parsedCount:" + total + ",invalidCount:" + failed + ", fileSize:" + fileSize + ", finishedValidation:true}", (ServletContext) requestJobj.get("servletContext"));
                } catch (Exception ex) {
                    throw ex;
                }
        } catch (Exception e) {
            issuccess = false;
            msg = "" + e.getMessage();
            Logger.getLogger(AccEntityGstServiceImpl.class.getName()).log(Level.SEVERE, null, e);
        } finally {
            try {
                jobj.put("success", issuccess);
                jobj.put("msg", msg);
                jobj.put("exceededLimit", exceededLimit);
            } catch (JSONException ex) {
                Logger.getLogger(AccEntityGstServiceImpl.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return jobj;
    }
    /**
     * 
     * @param requestJobj
     * @param columnConfigArray
     * @param dataMap
     * @param columnHeaderMap
     * @param columnCSVindexMap
     * @param bulkData
     * @param dateFormat
     * @return
     * @throws JSONException
     * @throws DataInvalidateException
     * @throws ServiceException 
     */
    public JSONObject validateEwayFieldsImportColumns(JSONObject requestJobj, JSONArray columnConfigArray, Map<String, Object> dataMap, Map<String, Object> columnHeaderMap, Map<String, Object> columnCSVindexMap, JSONArray customTablesArrayObj, String dateFormat) throws JSONException, DataInvalidateException, ServiceException {
        JSONObject jobj = new JSONObject();
        int ImportModuleId = requestJobj.optInt("ImportModuleId");
        Locale locale = (Locale) requestJobj.opt(Constants.locale);
        String companyid = requestJobj.optString("companyid");
        Set invalidColumns = new HashSet();
        String errorMsg = "";
        for (int k = 0; k < columnConfigArray.length(); k++) {
            JSONObject columnConfig = columnConfigArray.getJSONObject(k);
            int maxLength = columnConfig.optInt("maxLength");
            String formfieldname = columnConfig.optString("formfieldname");
            String columnName = columnConfig.optString("columnName");
            boolean isNotNull = columnConfig.optBoolean("isNotNull");
            String validatetype = columnConfig.optString("validatetype");
            String data = dataMap.containsKey(formfieldname) && dataMap.get(formfieldname) != null ? (String) dataMap.get(formfieldname) : "";
            data = data.replaceAll("\"", "").trim();
            /**
             * Common Validation
             */
            if (isNotNull) {
                if (dataMap.containsKey(formfieldname) && (dataMap.get(formfieldname) == null || StringUtil.isNullOrEmpty(dataMap.get(formfieldname).toString()))) {
                    errorMsg += messageSource.getMessage("acc.export.Emptydatafoundin", null, locale) + columnName;
                    invalidColumns.add(columnName);
                }
            }
            if (maxLength > 0 && data != null && data.length() > maxLength) {
                errorMsg += messageSource.getMessage("acc.import.document.eway.fieldsdata.maxlength.error", new Object[]{maxLength, columnName}, locale);
                invalidColumns.add(columnName);
            }
            if (validatetype.equalsIgnoreCase("date")) {
                if (!StringUtil.isNullOrEmpty(data)) {
                    try {
                        dateFormat = dateFormat != null ? dateFormat : Constants.yyyyMMdd;
                        SimpleDateFormat sdf = new SimpleDateFormat(dateFormat);
                        sdf.setLenient(false);//it is set false so that exact match get parsed
                        Date date = sdf.parse(data);
                    } catch (Exception ex) {
                        errorMsg += messageSource.getMessage("acc.import.document.eway.fieldsdata.invalid.date.error", new Object[]{dateFormat}, locale);
                        invalidColumns.add(columnName);
                    }
                } else {
                    errorMsg += messageSource.getMessage("acc.export.Emptydatafoundin", null, locale) + columnName + ". ";
                    invalidColumns.add(columnName);
                }
            }
            /**
             * Individual column validation
             */
            if (formfieldname.equalsIgnoreCase("DocumentNumber")) {
                if (IndiaComplianceConstants.globalTableNames.containsKey(ImportModuleId)) {
                    JSONObject globalTableDetails = IndiaComplianceConstants.globalTableNames.get(ImportModuleId);
                    String globaleTableName = globalTableDetails.optString(IndiaComplianceConstants.GLOBALTABLENAME, "");
                    String documentNumberColumn = globalTableDetails.optString(IndiaComplianceConstants.DOCUMENT_NUMBER_COLUMN, "");
                    String moduleName = globalTableDetails.optString(IndiaComplianceConstants.MODULE_NAME, "");
                    String query = " select id from " + globaleTableName + " where " + documentNumberColumn + " = '" + data + "' and company='" + companyid + "' ";
                    List result = accEntityGstDao.executeCustomBuildQuery(query, new ArrayList());
                    if (result == null || result.isEmpty()) {
                        errorMsg += messageSource.getMessage("acc.import.document.eway.fieldsdata.invalid.document.error", new Object[]{moduleName}, locale);
                        invalidColumns.add(columnName);
                    }
                }
            }
            if (formfieldname.equalsIgnoreCase("EWayBillNo")) {
                if (!Pattern.matches("^[0-9]+$", data)) {
                    errorMsg += messageSource.getMessage("acc.import.document.eway.fieldsdata.invalid.number.error", new Object[]{columnName}, locale);
                    invalidColumns.add(columnName);
                }
            }
        }
        if (!StringUtil.isNullOrEmpty(errorMsg)) {
            JSONObject errorLog = new JSONObject();
            errorLog.put("errorMsg", errorMsg);
            errorLog.put("invalidColumns", StringUtil.join(",", invalidColumns));
            errorMsg = errorLog.toString();
            throw new DataInvalidateException(errorMsg);
        }
        return jobj;
    }
    /**
     * ERP-32829
     *
     * @param requestJobj
     * @return
     * @Desc : Create Json Format using CSV file to save GST rules
     * @throws JSONException
     * @throws FileNotFoundException
     * @throws IOException
     * @throws ServiceException
     */
    @Transactional(propagation = Propagation.REQUIRED, rollbackFor = {SessionExpiredException.class, AccountingException.class, ServiceException.class, JSONException.class})
    public JSONObject createJsonObjectToSaveGSTRules(JSONObject requestJobj) throws JSONException, FileNotFoundException, IOException, ServiceException {
        
        Locale locale = Locale.forLanguageTag(requestJobj.getString(Constants.language));
        FileInputStream fileInputStream = null;
        JSONObject returnObj = new JSONObject();
        String companyid = requestJobj.optString("companyid");
        CsvReader csvReader = null;
        String fileName = requestJobj.getString("filename");
        String failureMsg = "";
        String destinationDirectory = storageHandlerImpl.GetDocStorePath() + "importplans";
        File filePath = new File(destinationDirectory + File.separator + fileName);
        fileInputStream = new FileInputStream(filePath);
        String delimiterType = requestJobj.getString("delimiterType");
        csvReader = new CsvReader(new InputStreamReader(fileInputStream), delimiterType);
        String dateFormat = null;
        String dateFormatId = requestJobj.getString("dateFormat");
        returnObj.put("dateFormat", dateFormatId);
        JSONObject resjson = new JSONObject(requestJobj.getString("resjson"));
        JSONArray jSONArray = resjson.getJSONArray("root");
        String[] recarr = null;
        String msg = "",countryid="",stateValidator="";
        JSONArray data = new JSONArray();
        StringBuilder failedRecords = new StringBuilder();
        int failed = 0;
        int count = 0;
        boolean issuccess = false;
        try {
            if (!StringUtil.isNullOrEmpty(dateFormatId)) {                          //Getting Date Format
                KwlReturnObject kdfObj = accountingHandlerDAOobj.getObject(KWLDateFormat.class.getName(), dateFormatId);
                KWLDateFormat kdf = (KWLDateFormat) kdfObj.getEntityList().get(0);

                dateFormat = kdf != null ? kdf.getJavaForm() : null;
            }
            DateFormat df = new SimpleDateFormat(dateFormat);
            df.setLenient(false);
            if (!StringUtil.isNullOrEmpty(companyid)) {
                KwlReturnObject companyResult = null;
                companyResult = accountingHandlerDAOobj.getObject(Company.class.getName(), companyid);
                Company company = (Company) companyResult.getEntityList().get(0);
                countryid = company.getCountry().getID();

            }
            /**
             * Create map for entity name and ID
             */
            requestJobj.put("termType", 7);
            KwlReturnObject kwlReturnObject = accEntityGstDao.getGSTTermDetails(requestJobj);
            List<LineLevelTerms> lineLevelTerms = kwlReturnObject.getEntityList();
            Map<String, String> GSTTermMap = new HashMap();
            JSONObject GSTDefaultTermMap = new JSONObject();
            String CESSTermID ="";
            boolean salesOrPurchase = requestJobj.optBoolean("isInput");
            for (LineLevelTerms lineLevelTerms1 : lineLevelTerms) {
                GSTTermMap.put(lineLevelTerms1.getTerm(), lineLevelTerms1.getId());
                GSTDefaultTermMap.put(lineLevelTerms1.getId(), lineLevelTerms1.getDefaultTerms()!=null ? lineLevelTerms1.getDefaultTerms().getId() : "");
                if (lineLevelTerms1.getDefaultTerms() != null && salesOrPurchase && LineLevelTerms.GSTName.get("OutputCESS").equalsIgnoreCase(lineLevelTerms1.getDefaultTerms().getId())) {
                    CESSTermID = lineLevelTerms1.getId();
                }
                if (lineLevelTerms1.getDefaultTerms() != null && !salesOrPurchase && LineLevelTerms.GSTName.get("InputCESS").equalsIgnoreCase(lineLevelTerms1.getDefaultTerms().getId())) {
                    CESSTermID = lineLevelTerms1.getId();
                }
            }
            requestJobj.put("GSTDefaultTermMap", GSTDefaultTermMap);
            /**
             * get Field Id for product category
             */
            HashMap<String, Object> fieldparams = new HashMap<>();
            fieldparams.put("filedname", "Custom_"+Constants.GSTProdCategory);
            fieldparams.put("moduleid", Constants.Acc_Product_Master_ModuleId);
            fieldparams.put("companyid", companyid);
            String ProdFieldId = fieldManagerDAOobj.getFieldParamsId(fieldparams);

            /**
             * get Field Id for Entity
             */
            fieldparams = new HashMap<>();
            fieldparams.put("moduleid", Constants.GSTModule);
            fieldparams.put("companyid", companyid);

            fieldparams.put(Constants.filter_names, Arrays.asList(Constants.companyid, Constants.moduleid));
            fieldparams.put(Constants.filter_values, Arrays.asList(companyid, Constants.GSTModule));

            KwlReturnObject kwlReturnObjectGstCust = fieldManagerDAOobj.getFieldParams(fieldparams);
            /*
             * Add Custom Fileds in Diamension map
             */
            HashMap<String, String> dimensionField = new HashMap<>();
            HashMap<String, Integer> dimensionFieldColumnNo = new HashMap<>();
            HashMap<String, Integer> dimensionCustomColumnNumber = new HashMap<>();  
            HashMap<String, Integer> gstConfigType = new HashMap<>();  
            List<FieldParams> fieldParamsGstCust = kwlReturnObjectGstCust.getEntityList();
            /*
             * Add Diamension field in dimensionField map Add Diamension column
             * in dimensionFieldcolumnno map
             */
            for (FieldParams fieldParamsObj : fieldParamsGstCust) {
                String field = fieldParamsObj.getFieldname();
                String fieldId = fieldParamsObj.getId();
                int colnum = fieldParamsObj.getGSTMappingColnum();
                int customColumnNumber=fieldParamsObj.getColnum();
                dimensionField.put(field, fieldId);
                dimensionFieldColumnNo.put(fieldId, colnum);
                dimensionCustomColumnNumber.put(field, customColumnNumber);
                gstConfigType.put(field, fieldParamsObj.getGSTConfigType());                
            }
            fieldparams = null;

            HashMap<String, Integer> columnConfig = new HashMap<>();
            for (int i = 0; i < jSONArray.length(); i++) {
                JSONObject jSONObject = jSONArray.getJSONObject(i);
                columnConfig.put(jSONObject.getString("dataindex"), jSONObject.getInt("csvindex"));
            }
            String fieldId = "";
            String entityId = "";
            int shiploccpunt = 0;
            int failedRecord = 0;
            String diaValue = "";
            String diaValueForFail = "";
            while (csvReader.readRecord()) {
                shiploccpunt = 0;
                failureMsg = "";
                recarr = csvReader.getValues();
                /*
                 * Skip First row eg. T T T
                 */
                if (count == 0) {
                    failedRecords.append(createCSVrecord(recarr)).append("\" \"");
                } else if (count == 1) {
                    /*
                     * Skip Second Row e.g Header
                     */
                    failedRecords.append("\n").append(createCSVrecord(recarr)).append("\"Error Message\"");
                } else {
                    /*
                     * Starting from Third row which is Values of coresponding
                     * headers
                     */
                    try {
                        JSONObject nObject = new JSONObject();
                        nObject.put("companyid", companyid);
                        String entity = "", stateValueFromDB = "";
                        String state = "",fieldValue="";
                        Set<String> keyDia = dimensionField.keySet();
                        if (columnConfig.containsKey("Output CGST") && columnConfig.get("Output CGST") != null) {
                            stateValidator = recarr[(Integer) columnConfig.get("Output CGST")].replaceAll("\"", "").trim();
                        }
                        if(columnConfig.containsKey("Input CGST") && columnConfig.get("Input CGST") != null){
                            stateValidator=recarr[(Integer) columnConfig.get("Input CGST")].replaceAll("\"", "").trim();
                        }
                        for (String keyPaire : keyDia) {
                            /*
                             * If file column is Entity or Custom field for Entity
                             */
                            int gstConfigType1=gstConfigType.containsKey(keyPaire)?gstConfigType.get(keyPaire):0;                            
                            if (gstConfigType1==Constants.GST_CONFIG_ISFORGST || gstConfigType1==Constants.GST_CONFIG_CUSTOM_TO_ENTITY || gstConfigType1==Constants.GST_CONFIG_ISFORMULTIENTITY) {                                                   //columnConfig is in request To check  
//                                if (keyPaire.equals("Custom_Entity") || keyPaire.equals("Custom_State")) {
                                    entity = recarr[(Integer) columnConfig.get("Custom_Entity")].replaceAll("\"", "").trim();
                                    state = keyPaire.equals("Custom_State")?recarr[(Integer) columnConfig.get("Custom_State")].replaceAll("\"", "").trim():"Other";                                    
                                    if (columnConfig.containsKey(keyPaire)) {
                                    fieldValue = recarr[(Integer) columnConfig.get(keyPaire)].replaceAll("\"", "").trim();
                                    diaValueForFail = entity;
                                    if (StringUtil.isNullOrEmpty(entity)) {
                                        failureMsg += "Cannot set empty data for Entity column. ";
                                    } else {
                                        fieldId = dimensionField.get("Custom_Entity");
                                        entity = accAccountDAOobj.getComboIdForAccount(entity, fieldId);
                                        if (!StringUtil.isNullOrEmpty(entity)) {
                                            if (keyPaire.equals("Custom_Entity")) {
                                                nObject.put("entity", entity);
                                            }
//                                            if ((keyPaire.equals("Custom_State") && !state.equals("Other")) || keyPaire.equals("Custom_City") || keyPaire.equals("Custom_County")) { 
                                            /*
                                             * Here Custom fields of Entity will be validated i.e. State,Product Tax Class.
                                             */
                                            if (countryid.equalsIgnoreCase(Constants.INDIA_COUNTRYID) && (gstConfigType1 == Constants.GST_CONFIG_ISFORGST || gstConfigType1 == Constants.GST_CONFIG_CUSTOM_TO_ENTITY ||
                                                    !(gstConfigType1 == Constants.GST_CONFIG_ISFORMULTIENTITY)) && !(state.equalsIgnoreCase("Other") && 
                                                    keyPaire.equals("Custom_State") && stateValidator.equalsIgnoreCase("NA"))) { // if country=india and dimension=state and statevalue=Other and Input/OutputCGST=NA means Other state case for india 
                                                int stateColNum = dimensionCustomColumnNumber.containsKey(keyPaire) ? dimensionCustomColumnNumber.get(keyPaire) : 0;
                                                JSONObject entityData = new JSONObject();
                                                entityData.put("colNum", stateColNum);
                                                entityData.put("comboId", entity);
                                                entityData.put("companyId", companyid);
                                                entityData.put("xType", "4");
                                                stateValueFromDB = importDao.getEntityCustomData(entityData);
                                                if (!StringUtil.isNullOrEmpty(stateValueFromDB)) {
                                                    if (!stateValueFromDB.equalsIgnoreCase(fieldValue)) {
                                                        failureMsg += fieldValue+" "+ messageSource.getMessage("acc.gst.entity.field.validation.mapping", null, locale) + " " + diaValueForFail + " " + messageSource.getMessage("acc.gst.entity.correct.and.import", null, locale);
                                                    }
                                                } else {
                                                    failureMsg += keyPaire +" "+ messageSource.getMessage("acc.gst.entity.field.validation.existance", null, locale) + " " + diaValueForFail + " " + messageSource.getMessage("acc.gst.terms.retry", null, locale);
                                                }
                                            }

                                        } else if (gstConfigType1 == Constants.GST_CONFIG_ISFORMULTIENTITY) {
                                            failureMsg += "Entity Dimension " + diaValueForFail + " " + messageSource.getMessage("acc.gst.entity.not.available.in.masterconfiguration", null,  locale.forLanguageTag(Constants.language));
                                        } else {
                                            failureMsg += " " + fieldValue + " " + messageSource.getMessage("acc.gst.entity.cannot.validated", null, locale) + " " + diaValueForFail + " ";
                                        }
                                    }
                                }
                            }
                            /*
                             * To Check All diamention and add proper id in
                             * shiplocation1...shiplocation5
                             */
                            if (columnConfig.containsKey(keyPaire)) {
                                //columnConfig is in request To check  
                                if (!keyPaire.equals("Custom_Entity") && !GSTTermMap.containsKey(keyPaire) && !keyPaire.equals("Custom_"+Constants.GSTProdCategory)) {
                                    diaValue = recarr[(Integer) columnConfig.get(keyPaire)].replaceAll("\"", "").trim();
                                    diaValueForFail = diaValue;
                                    if (StringUtil.isNullOrEmpty(diaValue)) {
                                        failureMsg += "Cannot set empty data for " + keyPaire + " column . ";
                                    } else {
                                        fieldId = dimensionField.get(keyPaire);
                                        /*
                                         * Getting column no of particuler
                                         * diamension
                                         */
                                        int shipcol = dimensionFieldColumnNo.get(fieldId);
                                        /**
                                         * if dimvalue is other
                                         */
                                        if(diaValue.contains("Other")){
                                            nObject.put("fieldid", fieldId);
                                        }else{
                                            diaValue = accAccountDAOobj.getComboIdForAccount(diaValue, fieldId);
                                        }
                                        if (!StringUtil.isNullOrEmpty(diaValue)) {
                                            nObject.put("shiplocation" + shipcol, diaValue);
                                        } else if(gstConfigType1==Constants.GST_CONFIG_ISFORGST) {
                                            failureMsg += keyPaire + " Dimension " + diaValueForFail +" "+ messageSource.getMessage("acc.gst.entity.not.available.in.masterconfiguration", null, locale);
                                        }

                                    }
                                }
                            }

                        }

                        String termrate = "";
                        /*
                         * To check GST Mater Fields
                         */
                        Set<String> keyLineTerm = GSTTermMap.keySet();
                        for (String keyTerm : keyLineTerm) {
                            if (columnConfig.containsKey(keyTerm) && !dimensionField.containsKey(keyTerm)) {
                                //columnConfig is in request To check  
                                termrate = recarr[(Integer) columnConfig.get(keyTerm)].replaceAll("\"", "").trim();
                                if (StringUtil.isNullOrEmpty(termrate)) {
                                    failureMsg += "Cannot set empty data for " + keyTerm + " column . ";
                                } else {
                                    /**
                                     * // * get Term Id //
                                     */
                                    entity = (String) GSTTermMap.get(keyTerm);
                                    if (!termrate.equalsIgnoreCase("NA")) {
                                        double rate = Double.parseDouble(termrate);
                                        rate = authHandler.roundGSTValue(rate, companyid);
                                        /**
                                         * As tax is invalid if greater than 100 percent
                                         */
                                        if(rate>100){
                                            failureMsg += messageSource.getMessage("acc.gst.rule.invaliddata", new Object[]{keyTerm}, locale);
                                        }
                                        if (!StringUtil.isNullOrEmpty(entity)) {
                                            nObject.put(entity, rate);
                                        }
                                    }
                                }
                            }
                        }
                        /*
                         * Applied date column is mandatorary and it must be
                         * enterrd query in default header table
                         */

                        Date applieddate = null;
                        if (columnConfig.containsKey("Applieddate")) {
                            String receivePaymentDateStr = recarr[(Integer) columnConfig.get("Applieddate")].replaceAll("\"", "").trim();

                            if (StringUtil.isNullOrEmpty(receivePaymentDateStr)) {
                                failureMsg += "applied Date is not available. ";
                            } else {
                                try {
                                    nObject.put("applieddate", receivePaymentDateStr);

                                } catch (Exception ex) {
                                    failureMsg += "Incorrect date format for Creation Date, Please specify values in " + dateFormat + " format. ";
                                }
                            }
                        } else {
                            failureMsg += "applied Date column is not found. ";
                        }
                        /**
                         * Handle GST Rules import 'CESS Type/ Valuation Amount
                         * ' column validation for INDIA GST.
                         */
                        if (!StringUtil.isNullOrEmpty(countryid) && countryid.equalsIgnoreCase(Constants.INDIA_COUNTRYID) && !StringUtil.isNullOrEmpty(CESSTermID) && columnConfig.containsKey(IndiaComplianceConstants.GST_CESS_TYPE)) {
                            String cessType = recarr[(Integer) columnConfig.get(IndiaComplianceConstants.GST_CESS_TYPE)].replaceAll("\"", "").trim();
                            String valuationAmount = recarr[(Integer) columnConfig.get(IndiaComplianceConstants.GST_CESS_VALUATION_AMOUNT)].replaceAll("\"", "").trim();
                            if (!StringUtil.isNullOrEmpty(cessType)) {
                                String CESSTermPercentages = nObject.optString(CESSTermID, "");
                                if (!StringUtil.isNullOrEmpty(CESSTermPercentages) && !CESSTermPercentages.equalsIgnoreCase("NA")) {
                                    JSONObject cessTypeJSON = new JSONObject();
                                    cessTypeJSON.put("name", cessType);
                                    KwlReturnObject cessTypeKWLObj = accEntityGstDao.getCESSCalculationType(cessTypeJSON);
                                    List cessTypeList = cessTypeKWLObj.getEntityList();
                                    if (cessTypeKWLObj == null || cessTypeList.isEmpty()) {
                                        failureMsg += messageSource.getMessage("acc.gstrr.gstrule.cesstype.error.txt1", new Object[]{}, locale);
                                    } else {
                                        GSTCessRuleType GSTCessRuleTypeObject = (GSTCessRuleType) cessTypeList.get(0);
                                        String CESSTypeID = GSTCessRuleTypeObject.getId();
                                        nObject.put(IndiaComplianceConstants.GST_CESS_TYPE, CESSTypeID);
                                        if (!StringUtil.isNullOrEmpty(valuationAmount)) {
                                            if(valuationAmount.equalsIgnoreCase("NA") || valuationAmount.equalsIgnoreCase("Not Applicable")){
                                                nObject.put(IndiaComplianceConstants.GST_CESS_VALUATION_AMOUNT, 0.0);
                                            }else{
                                            nObject.put(IndiaComplianceConstants.GST_CESS_VALUATION_AMOUNT, Double.parseDouble(valuationAmount));
                                            }
                                        } else if(!CESSTypeID.equalsIgnoreCase(IndiaComplianceConstants.CESSTYPE.get(IndiaComplianceConstants.NOT_APPLICABLE)) && !CESSTypeID.equalsIgnoreCase(IndiaComplianceConstants.CESSTYPE.get(IndiaComplianceConstants.PERCENTAGES))){
                                            failureMsg += messageSource.getMessage("acc.gstrr.gstrule.cesstype.error.txt2", new Object[]{}, locale);
                                        }
                                    }
                                } else {
                                    failureMsg += messageSource.getMessage("acc.gstrr.gstrule.cesstype.error.txt3", new Object[]{}, locale);
                                }
                            } else if (!StringUtil.isNullOrEmpty(valuationAmount)) {
                                failureMsg +=  messageSource.getMessage("acc.gstrr.gstrule.cesstype.error.txt4", new Object[]{}, locale);
                            }
                        }
                        /**
                         * Merchant Exporter validation in GST rule Import
                         */
                        boolean isMerchantExporterValue = false;
                        if (!StringUtil.isNullOrEmpty(countryid) && Integer.valueOf(countryid)==Constants.indian_country_id && columnConfig.containsKey(Constants.isMerchantExporter)) {
                            String isMerchantExporter = recarr[(Integer) columnConfig.get(Constants.isMerchantExporter)].replaceAll("\"", "").trim();
                            if (!StringUtil.isNullOrEmpty(isMerchantExporter) && !(isMerchantExporter.equalsIgnoreCase("true") || isMerchantExporter.equalsIgnoreCase("1") || isMerchantExporter.equalsIgnoreCase("T") || isMerchantExporter.equalsIgnoreCase("YES")
                                    || isMerchantExporter.equalsIgnoreCase("false") || isMerchantExporter.equalsIgnoreCase("0") || isMerchantExporter.equalsIgnoreCase("F") || isMerchantExporter.equalsIgnoreCase("NO"))) {
                                failureMsg += messageSource.getMessage("acc.import.gstrule.isMerchantExporter.error", new Object[]{isMerchantExporter}, locale);
                            }else{
                                if(isMerchantExporter.equalsIgnoreCase("true") || isMerchantExporter.equalsIgnoreCase("1") || isMerchantExporter.equalsIgnoreCase("T") || isMerchantExporter.equalsIgnoreCase("YES")){
                                    isMerchantExporterValue =true;
                                }
                            }
                        }
                        nObject.put(Constants.isMerchantExporter, isMerchantExporterValue);
                        String prodcategory = "";
                        if (columnConfig.containsKey("Custom_"+Constants.GSTProdCategory)) {                                                   //columnConfig is in request To check  
                            prodcategory = recarr[(Integer) columnConfig.get("Custom_"+Constants.GSTProdCategory)].replaceAll("\"", "").trim();
                            diaValueForFail = prodcategory;
                            if (StringUtil.isNullOrEmpty(prodcategory)) {
                                failureMsg += "prodcategory  is not available. ";
                            } else {
                                /**
                                 * get Id from dim value
                                 */
                                prodcategory = accAccountDAOobj.getComboIdForAccount(prodcategory, ProdFieldId);
                                if (!StringUtil.isNullOrEmpty(prodcategory)) {
                                    nObject.put("prodcategory", prodcategory);
                                } else {
                                    failureMsg += Constants.GSTProdCategory+" Dimension " + diaValueForFail +" "+ messageSource.getMessage("acc.gst.entity.not.available.in.masterconfiguration", null, locale);
                                }
                            }
                        } else {
                            failureMsg += Constants.GSTProdCategory+" column is not found. ";
                        }
                        /**
                         * to check if rule is already present and used. if so,
                         * then cannot change particular rule.
                         */
                        if (columnConfig.containsKey("Custom_" + Constants.STATE)) {
                            JSONArray jArr = new JSONArray();
                            JSONObject jObj;
                            /**
                             * Check if rule present. if rule present fetch its
                             * ID.
                             */
                            /**
                             * Need to convert input request data into entity
                             * wise array to as saved in DB
                             */
                            jArr.put(nObject);
                            JSONObject paramJObj = new JSONObject();
                            paramJObj.put(Constants.data, jArr);
                            JSONArray dataArr = new JSONArray();
                            paramJObj.put("GSTDefaultTermMap", GSTDefaultTermMap);
                            paramJObj.put(Constants.companyKey, companyid);
                            dataArr = createEntityTermJson(paramJObj, GSTTermMap);
                            List<String> stateIDs = new ArrayList();
                            /**
                             * Pass this object as it is to save
                             */
                            List<String> returnList = null;
                            Map<String, Object> reqMap = new HashMap();
                            for (int i = 0; i < dataArr.length(); i++) {
                                jObj = dataArr.getJSONObject(i);
                                reqMap.put(Constants.term, jObj.optString(Constants.term));
                                reqMap.put(Constants.entity, jObj.optString(Constants.entity));
                                reqMap.put(Constants.percentage, jObj.optDouble(Constants.percentage));
                                reqMap.put(Constants.type, jObj.optInt(Constants.type, 1));
                                try {
                                    reqMap.put(Constants.appliedDate, df.parse(jObj.optString(Constants.appliedDate)));
                                } catch (ParseException ex) {
                                    Logger.getLogger(AccAccountServiceImpl.class.getName()).log(Level.SEVERE, null, ex);
                                }
                                reqMap.put(Constants.shippedLocation1, jObj.optString(Constants.shippedLocation1));
                                reqMap.put(Constants.shippedLocation2, jObj.optString(Constants.shippedLocation2));
                                reqMap.put(Constants.shippedLocation3, jObj.optString(Constants.shippedLocation3));
                                reqMap.put(Constants.shippedLocation4, jObj.optString(Constants.shippedLocation4));
                                reqMap.put(Constants.shippedLocation5, jObj.optString(Constants.shippedLocation5));
                                reqMap.put(Constants.isMerchantExporter, jObj.optBoolean(Constants.isMerchantExporter,false));
                                reqMap.put(Constants.COUNTRY_ID, countryid);
                                /**
                                 * Need to update rule if it is present already
                                 */
                                if (!StringUtil.isNullOrEmpty(nObject.optString(Constants.prodCategory))) {
                                    reqMap.put(Constants.prodCategory, nObject.optString(Constants.prodCategory));
                                }
                                reqMap.put(IndiaComplianceConstants.GST_CESS_TYPE, jObj.optString(IndiaComplianceConstants.GST_CESS_TYPE, ""));
                                reqMap.put(IndiaComplianceConstants.GST_CESS_VALUATION_AMOUNT, jObj.optDouble(IndiaComplianceConstants.GST_CESS_VALUATION_AMOUNT, 0.0));
                                returnList = accEntityGstDao.getRuleIdInEditCase(reqMap);
                                if (!returnList.isEmpty() && returnList.get(0) != null) {
                                    stateIDs.add(returnList.get(0));
                                }
                            }

                            /**
                             * Not to do anything if this is not edit case.
                             */
                            jArr = new JSONArray();
                            if (!stateIDs.isEmpty()) {
                                /**
                                 * creating parameter as required for method
                                 * checkTermsUsed(). Required parameters are :
                                 * 1. id1
                                 */
                                for (String ruleId : stateIDs) {
                                    jObj = new JSONObject();
                                    jObj.put(Constants.id1, ruleId);
                                    jArr.put(jObj);
                                }
                                /**
                                 * Passing JSONArray as Required by method.
                                 */
                                JSONObject jobjParam = new JSONObject();
                                jobjParam.put(Constants.data, jArr);
                                KwlReturnObject res = checkTermsUsed(jobjParam);
                                List result = res.getEntityList();
                                if (result.get(0) != null) {
                                    Map<String, String> terms = (Map) result.get(0);
                                    if (terms.containsKey(Constants.usedTerms) && !StringUtil.isNullOrEmpty(terms.get(Constants.usedTerms))) {
                                        String usedTerms = "";
                                        String moduleNames = "";
                                        if (terms.containsKey(Constants.modulename)) {
                                            moduleNames = terms.get(Constants.modulename);
                                        }
                                        if (terms.containsKey(Constants.usedTerms)) {
                                            usedTerms = terms.get(Constants.usedTerms);
                                        }
                                        failureMsg += messageSource.getMessage("acc.gstrr.cannotEditRuleImportLog", new Object[]{usedTerms, moduleNames}, locale);
                                        /**
                                         * Rule should be added in case of
                                         * failure because, rule is used. So
                                         * that, if 3 out of 10 rules are used,
                                         * other 7 will get imported.
                                         */
                                        data.put(nObject);
                                    }
                                }
                            }
                        }
                        if (!StringUtil.isNullOrEmpty(failureMsg)) {
                            throw new AccountingException(failureMsg);
                        }
                        data.put(nObject);
                    } catch (AccountingException ex) {
                        String errorMsg = "";
                        failedRecord++;
                        if (ex.getMessage() != null) {
                            errorMsg = ex.getMessage();
                        } else if (ex.getCause() != null) {
                            errorMsg = ex.getCause().getMessage();
                        }
                        failedRecords.append("\n" + createCSVrecord(recarr) + "\"" + errorMsg.replaceAll("\"", "") + "\"");
                    }
                }
                count++;
            }
            count-=2; //skipping first row i.e. T T T and also Second Row i.e. Headers 
            if (failedRecord > 0) {
                /**
                 * data JSONArray will contain data only if data is valid.
                 * add rule if there exists any valid record.
                 */
                if (data.length()>0) {
                    failed = failedRecord;
                    msg = messageSource.getMessage("acc.gstrr.failedToImport", null, locale);
                    importHandler.createFailureFiles(fileName, failedRecords, ".csv");
                    requestJobj.put("data", data);
                    requestJobj.put("companyid", companyid);
                    accEntityGstService.saveGSTRuleSetup(requestJobj);
                } else {
                    failed = count;
                    msg = "Failed to import all the records.";
                    importHandler.createFailureFiles(fileName, failedRecords, ".csv");
                }
            } else {
                msg = "All records are imported successfully.";
                requestJobj.put("data", data);
                requestJobj.put("companyid", companyid);
                accEntityGstService.saveGSTRuleSetup(requestJobj);
            }

        } catch (Exception ex) {
            Logger.getLogger(AccEntityGstServiceImpl.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            fileInputStream.close();
            csvReader.close();

            // For saving import log
            saveImportLog(requestJobj, msg, count, failed, Constants.GSTModule);

            try {
                returnObj.put("success", true);
                returnObj.put("msg", msg);
                returnObj.put("totalrecords", count);
                returnObj.put("successrecords", count - failed);
                returnObj.put("failedrecords", failed);
                returnObj.put("filename", fileName);
                returnObj.put("Module", Constants.GSTModule);
            } catch (JSONException ex) {
                Logger.getLogger(AccEntityGstServiceImpl.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return returnObj;
    }

    /**
     * ERP-32829
     *
     * @Desc : Function to return applied GST for product based on Entity and
     * dimension selection
     * @param params
     * @return
     */
    @Transactional(propagation = Propagation.REQUIRED)
    public JSONObject getGSTForProduct(JSONObject params, HashMap<String, Object> requestParams) throws ServiceException, JSONException, ParseException {
        JSONObject returnObj = new JSONObject();
        DateFormat df = (DateFormat) requestParams.get(Constants.df);
        Map<String, Object> reqParams = new HashMap();
        reqParams.put("df", df);
        params.put("df", df);
        boolean isFixedAsset=params.optBoolean("isFixedAsset");
        String productids = params.optString("productids");
        String companyid = params.optString("companyid");
        String transactiondate = params.optString("transactiondate");
        if (!StringUtil.isNullOrEmpty(transactiondate)) {

            reqParams.put("applieddate", df.parse(transactiondate));
            params.put("applieddate", transactiondate);
        }
        reqParams.put(Constants.isMerchantExporter, params.optBoolean(Constants.isMerchantExporter, false));
        KwlReturnObject companyResult = null;
        companyResult = accountingHandlerDAOobj.getObject(Company.class.getName(), companyid);
        Company company = (Company) companyResult.getEntityList().get(0);
        String countryid = company.getCountry().getID();
        /**
         * This INDIA country specific code used only if Customer And vendor
         * type GST rule apply .
         * if(Export || Import){
         *  Apply IGST 
         * } else if (Deemed Export (SEZ) and within date range){ 
         *  then Apply IGST tax IGST Pick from GST Rule Setup 
         * }else if (Deemed Export (SEZ) and Out of date range) {
         *  Normal GST Calculation 
         * } else { 
         *  Normal GST Calculation 
         * }
         *
         */ 
        int uniqueCase  = params.optInt("uniqueCase" , 0);
        boolean isSEZIGST  = params.optBoolean("isSEZIGST",false);
        if (Constants.indian_country_id == Integer.parseInt(countryid)) {
            if(uniqueCase==Constants.APPLY_IGST || isSEZIGST){
                params.put("uniqueCase" ,Constants.APPLY_IGST);
            }
        }
        boolean isSales = params.optBoolean("termSalesOrPurchaseCheck");
        /**
         * get dimension data i.e. entity and location dim
         */
        String customfield = params.optString("dimArr");
        if (!StringUtil.isNullOrEmpty(customfield)) {
            JSONArray jcustomarray = new JSONArray(customfield);
            for (int dim = 0; dim < jcustomarray.length(); dim++) {
                JSONObject jSONObject = jcustomarray.optJSONObject(dim);
                int moduleid = Constants.GSTModule;
                String fieldname = jSONObject.optString("fieldname");
//                if(fieldname.contains("Entity")){
//                    moduleid=Constants.Acc_Customer_ModuleId;
//                }
                String dimvalue = jSONObject.optString("dimvalue");
                int gstmappingcolnum = jSONObject.optInt("gstmappingcolnum");

                /**
                 * Get Module specific data
                 */
                String actualValue = fieldDataManagercntrl.getValuesForLinkRecordsWithoutInsert(moduleid, companyid, fieldname, dimvalue, 0);
                if (fieldname.contains("Entity")) {
                    reqParams.put("entity", actualValue);
                } else if(!StringUtil.isNullOrEmpty(actualValue) && params.optInt("uniqueCase", 0)!= Constants.APPLY_IGST){ // If Unques case for Apply IGST then dont pass location dimesion value- This is for INDIA
                    reqParams.put("todimension" + gstmappingcolnum, actualValue);
                }
                /**
                 * Get State dimension value ID and Column number For INDIA GST to get CESS GST rule ,
                 * IGST apply in case of Customer/ Vendor Type is Export/ SEZ
                 */
                if(Constants.indian_country_id == Integer.parseInt(countryid) && !StringUtil.isNullOrEmpty(actualValue) && fieldname.contains(Constants.CUSTOM_STATE_NAME)){
                    params.put(Constants.CUSTOM_STATE_NAME + "_id", actualValue);
                    params.put(Constants.CUSTOM_STATE_NAME + "_colnum", gstmappingcolnum);
                }
            }

        }
        String[] prodArr = productids.split(",");
        JSONArray prodTermArray = new JSONArray();
        for (int index = 0; index < prodArr.length; index++) {
            String productid = prodArr[index];
            /**
             * get Product category
             */
            params.put("productid", productid);
            reqParams.put("productid", productid);
            /**
             * get Product tax class for product based on date.
             */
            accEntityGstDao.getProductTaxClassOnDate(params);
//            getProductTaxClassOnDate(params);
            if (StringUtil.isNullOrEmpty(params.optString("productcategory"))){
                getProdCategoryDimension(params);
            }
            /*
            If RCM is enabled then product having tax class Non-Gst,Nil rated,exempted can-not be selected ERP-39127
            */
            int valueType = params.optInt("valuetype");
            boolean isRCM=true;
            if(valueType==FieldComboData.ValueTypeMap.get(FieldComboData.TaxClass_Exempted)||valueType==FieldComboData.ValueTypeMap.get(FieldComboData.TaxClass_Non_GST_Product)||valueType==FieldComboData.ValueTypeMap.get(FieldComboData.TaxClass_ZeroPercenatge)){
               isRCM=false;
               
            }
            if (!StringUtil.isNullOrEmpty(params.optString("productcategory"))) {
                reqParams.put("productcategory", params.optString("productcategory"));
                reqParams.put("assetproductcategory", params.optString("assetproductcategory"));
                reqParams.put("isProdCategoryPresent", true);
                params.remove("productcategory");
                params.remove("assetproductcategory");
            }else{
                /**
                 * Blank Array
                 */
                JSONObject nObject = new JSONObject();
                nObject.put("productid", productid);
                nObject.put("LineTermdetails", "[]");
                int isIdNone =1;
                if(prodArr.length==1 && StringUtil.isNullOrEmpty(productid)){
                    isIdNone =0;
                }
                nObject.put("isIdNone", isIdNone); // 1= For Prodict Tax Class /Category
                nObject.put("RCM", isRCM);
                prodTermArray.put(nObject);
                continue;
            }
            /**
             * Check Location dimension value is present
             * For India "State" Location Dimension
             * For USA "State", "City", "County"
             * If no location present then send empty GST Rule Array
             */
            params.put(Constants.COUNTRY_ID, countryid);
            boolean isLocationPresent = isLocaionDimensionValuePresent(params, reqParams);
            if (!isLocationPresent) {
                /**
                 * Blank Array  if Location Dimension value not present or empty
                 */
                JSONObject nObject = new JSONObject();
                nObject.put("productid", productid);
                nObject.put("LineTermdetails", "[]");
                if (isFixedAsset) {
                    nObject.put("taxclass", reqParams.containsKey("assetproductcategory") ? reqParams.get("assetproductcategory").toString() : "");
                } else {
                    nObject.put("taxclass", reqParams.containsKey("productcategory") ? reqParams.get("productcategory").toString() : "");
                }
                nObject.put("isIdNone", 3); // 3 = For Location Dimension value not present or empty
                nObject.put("RCM", isRCM);
                prodTermArray.put(nObject);
                continue;
            }

            reqParams.put("salesOrPurchase", isSales);
            /**
             * get GST rate based on product category
             */
            reqParams.put("companyid", companyid);
            KwlReturnObject result = accEntityGstDao.getEntityBasedTermRate(reqParams);
            if (result.getEntityList() != null && result.getEntityList().size() > 0 && result.getEntityList().get(0) != null) {
                ArrayList<EntitybasedLineLevelTermRate> productTermDetail = (ArrayList<EntitybasedLineLevelTermRate>) result.getEntityList();
                /**
                 * Handle unique cases like NOGST,SOMEGST etc 
                 * Based on type of customer and vendor
                 */
                if (Constants.indian_country_id == Integer.parseInt(countryid)) {
                    productTermDetail = (ArrayList<EntitybasedLineLevelTermRate>) getGSTList(productTermDetail, params);
                }

                /**
                 * If rule present then create array for it
                 */
                
                JSONArray productTermJsonArry = fetchProductTermEntityRateMapDetails(productTermDetail, reqParams);
                JSONObject nObject = new JSONObject();
                nObject.put("productid", productid);
                nObject.put("LineTermdetails", productTermJsonArry.toString());
                nObject.put("isIdNone", 0); // 0= No Error
                if(isFixedAsset){
                    nObject.put("taxclass", reqParams.containsKey("assetproductcategory")?reqParams.get("assetproductcategory").toString():"");
                }else{
                    nObject.put("taxclass", reqParams.containsKey("productcategory")?reqParams.get("productcategory").toString():"");
                }
                nObject.put("RCM", isRCM);
                prodTermArray.put(nObject);

            } else {
                /**
                 * Blank Array
                 */
                JSONObject nObject = new JSONObject();
                nObject.put("productid", productid);
                nObject.put("LineTermdetails", "[]");
                if (isFixedAsset) {
                    nObject.put("taxclass", reqParams.containsKey("assetproductcategory") ? reqParams.get("assetproductcategory").toString() : "");
                } else {
                    nObject.put("taxclass", reqParams.containsKey("productcategory") ? reqParams.get("productcategory").toString() : "");
                }
                nObject.put("isIdNone", 2); // 2= For Entity None
                nObject.put("RCM", isRCM);
                prodTermArray.put(nObject);
            }
        }
        returnObj.put("prodTermArray", prodTermArray);
        returnObj.put(Constants.RES_success, true);
        return returnObj;
    }
        /**
     * Check Location dimension value is present
     * e.g. In India values for "State" Dimension
     * In USA values for "State", "City", "County" dimensions
     *
     * @param params
     * @param reqParams
     * @return 
     */
    public boolean isLocaionDimensionValuePresent(JSONObject params, Map<String, Object> reqParams) throws ServiceException, JSONException {
        boolean isLocationPresent = true;
        String countryid = params.optString(Constants.COUNTRY_ID, "");
        String companyid = params.optString(Constants.companyid, "");
        if (!StringUtil.isNullOrEmpty(countryid)) {
            int GSTMappingColnum = 1;
            List resultList = null;
            String locationKey = "todimension";
            if (Constants.indian_country_id == Integer.parseInt(countryid) && params.optInt("uniqueCase", 0) != Constants.APPLY_IGST) {
                params.put(Constants.fieldlabel, "'" + Constants.STATE + "'");
                params.put(Constants.moduleid, Constants.GSTModule);
                params.put(Constants.customcolumn, "0");
                resultList = accEntityGstDao.getGSTMappingColnumOfLocationDimension(params);
                if (resultList != null && !resultList.isEmpty()) {
                    Object[] details = (Object[]) resultList.get(0);
                    GSTMappingColnum = details.length >= 2 && details[1] != null ? (Integer) details[1] : 1;
                    locationKey = "todimension";
                    locationKey = locationKey + GSTMappingColnum;
                    if (!reqParams.containsKey(locationKey) || (reqParams.get(locationKey) == null || StringUtil.isNullOrEmpty(reqParams.get(locationKey).toString()))) {
                        isLocationPresent = false;
                    }
                }
            } else if (Constants.USA_country_id == Integer.parseInt(countryid)) {
                params.put(Constants.fieldlabel, "'" + Constants.STATE + "','" + Constants.CITY + "','" + Constants.COUNTY + "'");
                params.put(Constants.moduleid, Constants.GSTModule);
                params.put(Constants.customcolumn, "0");
                resultList = accEntityGstDao.getGSTMappingColnumOfLocationDimension(params);
                if (resultList != null && !resultList.isEmpty()) {
                    for (Object resultListObj : resultList) {
                        Object[] details = (Object[]) resultListObj;
                        if (details.length >= 2 && details[1] != null) {
                            GSTMappingColnum = (Integer) details[1];
                        } else if (details.length >= 2 && details[0] != null) {
                            String fieldLabel = (String) details[0];
                            if (fieldLabel.equalsIgnoreCase(Constants.STATE)) {
                                GSTMappingColnum = 1;
                            } else if (fieldLabel.equalsIgnoreCase(Constants.CITY)) {
                                GSTMappingColnum = 2;
                            } else if (fieldLabel.equalsIgnoreCase(Constants.COUNTY)) {
                                GSTMappingColnum = 3;
                            }
                        }
                        locationKey = "todimension";
                        locationKey = locationKey + GSTMappingColnum;
                        if (!reqParams.containsKey(locationKey) || (reqParams.get(locationKey) == null || StringUtil.isNullOrEmpty(reqParams.get(locationKey).toString()))) {
                            isLocationPresent = false;
                        }
                    }
                }
            }
        }
        return isLocationPresent;
    }
    public JSONObject getGSTForAdvance(JSONObject params, HashMap<String, Object> requestParams) throws ServiceException, JSONException, ParseException {
        JSONObject returnObj = new JSONObject();
        DateFormat df = (DateFormat) requestParams.get(Constants.df);
        Map<String, Object> reqParams = new HashMap();
        reqParams.put("df", df);
        String productids = params.optString("productids");
        String companyid = params.optString("companyid");
        String transactiondate = params.optString("transactiondate");
        if (!StringUtil.isNullOrEmpty(transactiondate)) {

            reqParams.put("applieddate", df.parse(transactiondate));
        }
        boolean isSales = params.optBoolean("termSalesOrPurchaseCheck");
        /**
         * get dimension data i.e. entity and location dim
         */
        String customfield = params.optString("dimArr");
        if (!StringUtil.isNullOrEmpty(customfield)) {
            JSONArray jcustomarray = new JSONArray(customfield);
            for (int dim = 0; dim < jcustomarray.length(); dim++) {
                JSONObject jSONObject = jcustomarray.optJSONObject(dim);
                int moduleid = Constants.GSTModule;
                String fieldname = jSONObject.optString("fieldname");
//                if(fieldname.contains("Entity")){
//                    moduleid=Constants.Acc_Customer_ModuleId;
//                }
                String dimvalue = jSONObject.optString("dimvalue");
                int gstmappingcolnum = jSONObject.optInt("gstmappingcolnum");

                /**
                 * Get Module specific data
                 */
                String actualValue = fieldDataManagercntrl.getValuesForLinkRecords(moduleid, companyid, fieldname, dimvalue, 0);
                if (fieldname.contains("Entity")) {
                    reqParams.put("entity", actualValue);
                } else {
                    reqParams.put("todimension" + gstmappingcolnum, actualValue);
                }
            }

        }
        String[] prodArr = productids.split(",");
        JSONArray prodTermArray = new JSONArray();
        for (int index = 0; index < prodArr.length; index++) {
            String productid = prodArr[index];
            /**
             * get Product category
             */
            params.put("productid", productid);
            reqParams.put("productid", productid);
            getProdCategoryDimensionForAdvance(params);
            if (!StringUtil.isNullOrEmpty(params.optString("productcategory"))) {
                reqParams.put("productcategory", params.optString("productcategory"));
                reqParams.put("isProdCategoryPresent", true);
                params.remove("productcategory");
            }

            reqParams.put("salesOrPurchase", isSales);
            /**
             * get GST rate based on product category
             */
            reqParams.put("companyid", companyid);
            KwlReturnObject result = accEntityGstDao.getEntityBasedTermRate(reqParams);
            if (result.getEntityList() != null && result.getEntityList().size() > 0 && result.getEntityList().get(0) != null) {
                ArrayList<EntitybasedLineLevelTermRate> productTermDetail = (ArrayList<EntitybasedLineLevelTermRate>) result.getEntityList();
                /**
                 * Handle unique cases like NOGST,SOMEGST etc Based on type of
                 * customer and vendor
                 */
                productTermDetail = (ArrayList<EntitybasedLineLevelTermRate>) getGSTList(productTermDetail, params);

                /**
                 * If rule present then create array for it
                 */
                JSONArray productTermJsonArry = fetchProductTermEntityRateMapDetails(productTermDetail, reqParams);
                JSONObject nObject = new JSONObject();
                nObject.put("productid", productid);
                nObject.put("LineTermdetails", productTermJsonArry.toString());
                prodTermArray.put(nObject);

            } else {
                /**
                 * Blank Array
                 */
                JSONObject nObject = new JSONObject();
                nObject.put("productid", productid);
                nObject.put("LineTermdetails", "[]");
                prodTermArray.put(nObject);
            }
        }
        returnObj.put("prodTermArray", prodTermArray);
        returnObj.put(Constants.RES_success, true);
        return returnObj;
    }

    /**
     * @Function to APPLY GST based on Customer vendor type
     * @param productTermDetail
     * @param object
     * @return
     */
    public List getGSTList(ArrayList<EntitybasedLineLevelTermRate> productTermDetail, JSONObject object) {
        int uniqueCase = object.optInt("uniqueCase");
        if (uniqueCase == Constants.APPLYGST) {
            return productTermDetail;
        } else if (uniqueCase == Constants.NOGST) {
            return new ArrayList<EntitybasedLineLevelTermRate>();
        } else if (uniqueCase == Constants.APPLY_IGST) {
            ArrayList<EntitybasedLineLevelTermRate> returnList = new ArrayList();
            /**
             * For India Case If Vendor location is out of India and if we are
             * purchasing goods from out of India then IGST will be charged
             */
            String ruleStateID = object.optString(Constants.CUSTOM_STATE_NAME + "_id", "");
            int gstmappingcolnum = object.optInt(Constants.CUSTOM_STATE_NAME + "_colnum", 1);
            boolean isIGSTAdded = false;
            for (EntitybasedLineLevelTermRate entitybasedLineLevelTermRate : productTermDetail) {
                DefaultTerms defaultTerms = entitybasedLineLevelTermRate.getLineLevelTerms().getDefaultTerms();
                /**
                 * IGST apply in case of Customer/ Vendor Type is Export/ SEZ
                 * productTermDetail having all entries against State Dimension,
                 * From this we need to take single IGST rule for calculation.
                 * Checked default terms id or term name is IGST (IF Default terms id not present then compared on term name)
                 */
                if (!isIGSTAdded && defaultTerms == null && entitybasedLineLevelTermRate.getLineLevelTerms().getTerm().contains("IGST")) {
                    returnList.add(entitybasedLineLevelTermRate);
                    isIGSTAdded = true;
                } else if (!isIGSTAdded && (defaultTerms.getId().equalsIgnoreCase(LineLevelTerms.GSTName.get("OutputIGST")) || defaultTerms.getId().equalsIgnoreCase(LineLevelTerms.GSTName.get("InputIGST")))) {
                    returnList.add(entitybasedLineLevelTermRate);
                    isIGSTAdded = true;
                }
                /**
                 * IGST apply in case of Customer/ Vendor Type is Export/ SEZ
                 * productTermDetail having all entries against State Dimension.
                 * Get CESS tax rule against given billing state
                 * checked default terms id or term name is CESS (IF Default terms id not present then compared on term name)
                 */
                if (gstmappingcolnum == 1 && entitybasedLineLevelTermRate.getShippedLoc1()!=null && !StringUtil.isNullOrEmpty(ruleStateID)) {
                    String addresDimID1 = entitybasedLineLevelTermRate.getShippedLoc1().getId();
                    if(addresDimID1.equalsIgnoreCase(ruleStateID) && defaultTerms==null && entitybasedLineLevelTermRate.getLineLevelTerms().getTerm().contains("CESS")){
                        returnList.add(entitybasedLineLevelTermRate);
                    }else if(addresDimID1.equalsIgnoreCase(ruleStateID) && defaultTerms!=null && (defaultTerms.getId().equalsIgnoreCase(LineLevelTerms.GSTName.get("OutputCESS")) || defaultTerms.getId().equalsIgnoreCase(LineLevelTerms.GSTName.get("InputCESS")))){
                        returnList.add(entitybasedLineLevelTermRate);
                    }
                }
            }
            return returnList;
        }
        return productTermDetail;
    }
    /**
     * ERP-32829
     *
     * @param reqParams
     * @return
     * @Desc : Get product category using dimension
     * @throws ServiceException
     * @throws JSONException
     */
    JSONObject getProdCategoryDimension(JSONObject reqParams) throws ServiceException, JSONException {
        boolean isFixedAsset=reqParams.optBoolean("isFixedAsset");
        reqParams.put("moduleid", isFixedAsset?Constants.Acc_FixedAssets_AssetsGroups_ModuleId:Constants.Acc_Product_Master_ModuleId);
        reqParams.put("fieldlabel", Constants.GSTProdCategory);
        /**
         * get column number for product category dimension
         */
        List list = accEntityGstDao.getColumnNumberForDimension(reqParams);
        if (!list.isEmpty() && list.get(0) != null) {
            String colnum = "" + list.get(0);
            reqParams.put("colnum", colnum);
            List dimList = accEntityGstDao.getDimensionValueTaggedtoProd(reqParams);
            if (!dimList.isEmpty() && dimList.get(0) != null) {
                reqParams.put("productcategory", (String) dimList.get(0));
                reqParams.put("assetproductcategory", (String) dimList.get(0));
                /**
                 * for Asset Need to get Asset specific id from FCD
                 */
                if (isFixedAsset) {
                    reqParams.put("fcdid", (String) dimList.get(0));
                    reqParams.put("moduleid", Constants.Acc_Product_Master_ModuleId);
                    dimList = accEntityGstDao.getAssetSpecificCategoryIdFromFCD(reqParams);
                    if (!dimList.isEmpty() && dimList.get(0) != null) {
                        reqParams.put("productcategory", (String) dimList.get(0));
                    }
                }
            }
        }
        return reqParams;

    }
    JSONObject getProdCategoryDimensionForAdvance(JSONObject reqParams) throws ServiceException, JSONException {
        reqParams.put("fieldlabel", Constants.GSTProdCategory);
        /**
         * get column number for product category dimension
         */
        reqParams.put("fcdid", reqParams.optString("productid"));
        reqParams.put("companyid", reqParams.optString("companyid"));
        reqParams.put("moduleid", Constants.Acc_Product_Master_ModuleId);
        List dimList = accEntityGstDao.getAssetSpecificCategoryIdFromFCD(reqParams);
        if (!dimList.isEmpty() && dimList.get(0) != null) {
            reqParams.put("productcategory", (String) dimList.get(0));
        }

        return reqParams;

    }
    /**
     * ERP-32829
     *
     * @param productTermDetail
     * @param reqParams
     * @return
     */
    public JSONArray fetchProductTermEntityRateMapDetails(ArrayList<EntitybasedLineLevelTermRate> productTermDetail, Map<String, Object> reqParams) {
        String productid = "";
        if (reqParams.containsKey("productid") && reqParams.get("productid") != null) {
            productid = (String) reqParams.get("productid");
        }

        JSONArray productTermJsonArry = new JSONArray();
        try {
            for (EntitybasedLineLevelTermRate productTermsMapObj : productTermDetail) {
                JSONObject productTermJsonObj = new JSONObject();
                productTermJsonObj.put("productid", productid);
                productTermJsonObj.put("termid", productTermsMapObj.getLineLevelTerms().getId());
                productTermJsonObj.put("productentitytermid", productTermsMapObj.getId());
                productTermJsonObj.put("payableaccountid", productTermsMapObj.getLineLevelTerms().getPayableAccount()!=null?productTermsMapObj.getLineLevelTerms().getPayableAccount().getID():"");
                productTermJsonObj.put("term", productTermsMapObj.getLineLevelTerms().getTerm());
                productTermJsonObj.put("termtype", productTermsMapObj.getLineLevelTerms().getTermType());
                productTermJsonObj.put("termsequence", productTermsMapObj.getLineLevelTerms().getTermSequence());
                productTermJsonObj.put("formula", productTermsMapObj.getLineLevelTerms().getFormula());
                productTermJsonObj.put("formulaids", productTermsMapObj.getLineLevelTerms().getFormula());
                productTermJsonObj.put("termpercentage", productTermsMapObj.getPercentage());
                productTermJsonObj.put("originalTermPercentage", productTermsMapObj.getPercentage()); // For Service tax term abatment calculation
                productTermJsonObj.put("termamount", "0.0");
                productTermJsonObj.put("assessablevalue", "0.0");
                productTermJsonObj.put("glaccountname", productTermsMapObj.getLineLevelTerms().getAccount().getAccountName());
                productTermJsonObj.put("accountid", productTermsMapObj.getLineLevelTerms().getAccount().getID());
                productTermJsonObj.put("glaccount", productTermsMapObj.getLineLevelTerms().getAccount().getID());
                productTermJsonObj.put("IsOtherTermTaxable", productTermsMapObj.getLineLevelTerms().isOtherTermTaxable());
                productTermJsonObj.put("sign", productTermsMapObj.getLineLevelTerms().getSign());
                productTermJsonObj.put("taxtype", productTermsMapObj.getTaxType());
                productTermJsonObj.put("purchasevalueorsalevalue", productTermsMapObj.getLineLevelTerms().getPurchaseValueOrSaleValue());
                productTermJsonObj.put("isDefault", true);
                productTermJsonObj.put("deductionorabatementpercent", productTermsMapObj.getLineLevelTerms().getDeductionOrAbatementPercent());
                productTermJsonObj.put("taxvalue", productTermsMapObj.getPercentage());
                productTermJsonObj.put("formType", !StringUtil.isNullOrEmpty(productTermsMapObj.getLineLevelTerms().getFormType()) ? productTermsMapObj.getLineLevelTerms().getFormType() : "1"); // 1 for without form SDP-7150
                productTermJsonObj.put("isIsAdditionalTax", productTermsMapObj.getLineLevelTerms().isIsAdditionalTax());
                productTermJsonObj.put("includeInTDSCalculation", productTermsMapObj.getLineLevelTerms().isIncludeInTDSCalculation());
                productTermJsonObj.put("creditnotavailedaccount", productTermsMapObj.getLineLevelTerms().getCreditNotAvailedAccount() != null ? productTermsMapObj.getLineLevelTerms().getCreditNotAvailedAccount().getID() : "");
                productTermJsonObj.put(IndiaComplianceConstants.GST_CESS_TYPE, productTermsMapObj.getCessType()!=null ? productTermsMapObj.getCessType().getId() : "");
                productTermJsonObj.put(IndiaComplianceConstants.GST_CESS_VALUATION_AMOUNT, productTermsMapObj.getValuationAmount());
                productTermJsonObj.put(IndiaComplianceConstants.DEFAULT_TERMID, productTermsMapObj.getLineLevelTerms().getDefaultTerms()!=null ? productTermsMapObj.getLineLevelTerms().getDefaultTerms().getId() : "");
                productTermJsonArry.put(productTermJsonObj);
            }
        } catch (Exception ex) {
            Logger.getLogger(AccEntityGstServiceImpl.class.getName()).log(Level.SEVERE, null, ex);
        }
        return productTermJsonArry;
    }

    public String createCSVrecord(Object[] listArray) {
        String rec = "";
        for (int i = 0; i < listArray.length; i++) {
            rec += "\"" + (listArray[i] == null ? "" : listArray[i].toString().replaceAll("\"", "")) + "\",";
        }
        return rec;
    }
    /*
     * To save Import Log
     */

    public void saveImportLog(JSONObject requestJobj, String msg, int total, int failed, int moduleID) {

        try {
            HashMap<String, Object> logDataMap = new HashMap<>();
            logDataMap.put("FileName", ImportLog.getActualFileName(requestJobj.getString("filename")));
            logDataMap.put("StorageName", requestJobj.getString("filename"));
            logDataMap.put("Log", msg);
            logDataMap.put("Type", "csv");
            logDataMap.put("FailureFileType", failed > 0 ? "csv" : "");
            logDataMap.put("TotalRecs", total);
            logDataMap.put("Rejected", failed);
            logDataMap.put("Module", moduleID);
            logDataMap.put("ImportDate", new Date());
            logDataMap.put("User", requestJobj.getString(Constants.useridKey));
            logDataMap.put("Company", requestJobj.getString(Constants.companyKey));
            importDao.saveImportLog(logDataMap);
        } catch (Exception ex) {
            Logger.getLogger(accSalesOrderServiceImpl.class.getName()).log(Level.SEVERE, null, ex);
        }
    }




    @Override
    public JSONObject getGSTRMatchAndReconcile(JSONObject params) throws ServiceException, JSONException {
        JSONObject object = new JSONObject();

        JSONObject revinvwithgstn = new JSONObject();


        JSONArray array = new JSONArray();


        try {

            revinvwithgstn.put("sno", "1");
            revinvwithgstn.put("itemDescription", "Sofa");
            revinvwithgstn.put("hsn", "Iyer Furniture LTD.");
            revinvwithgstn.put("qty", "3");
            revinvwithgstn.put("rateItem", "48000.00");
            revinvwithgstn.put("discount", "0.00");
            revinvwithgstn.put("taxableVal", "48000.00");
            revinvwithgstn.put("sgstRate", "6.00");
            revinvwithgstn.put("sgst", "6.00");
            revinvwithgstn.put("cgstRate", "5.00");
            revinvwithgstn.put("cgst", "5.00");
            revinvwithgstn.put("igstRate", "6.00");
            revinvwithgstn.put("igst", "6.00");
            revinvwithgstn.put("total", "50000.00");
            revinvwithgstn.put("diffAmt", "51000.00");

          
            array.put(revinvwithgstn);

            object.put("data", array);

        } catch (JSONException ex) {
            throw ServiceException.FAILURE(ex.getMessage(), ex);
        }
        return object;
    }
    /*
       Preparing column model for GSTR2 Sections except(AT,ATADJ,Nil Rated).
       Fetching respective section name from requset parameters , and according to that preparing column model
       for each section.
       hideFlag is used for hide/show the column
    */
     public void getColumnModelForGSTR2_B2BDetails(JSONArray jarrRecords, JSONArray jarrColumns, JSONObject params) throws JSONException {
        String storeRec = "";

        String section = params.optString("section");
        Locale requestcontextutilsobj = null;
        if (params.has("requestcontextutilsobj")) {
            requestcontextutilsobj = (Locale) params.opt("requestcontextutilsobj");
        }
        JSONObject jobjTemp = new JSONObject();
        storeRec = ",supplierName,date,gstin,billno,hsnno,value,taxableAmt,type,invNum,cess,igstamt,cgstamt,sgstamt,entityid,documentType,portcode,invoicetype"
                + ",IGSTrate,IGSTamount,CGSTrate,CGSTamount,SGSTrate,SGSTamount,placeofsupply,ecomoperator,statecode,customer,originalhsnno,originaltype,totalTax,totalAmt,transtype,invoiceid,originalinvoicedate,originalinvoiceno,supplierType,supplierinvoiceno";
      
        String[] recArr = storeRec.split(",");
        // Get those fields in record for whome, no special properties present like type, defVal, mapping etc.
        for (String rec : recArr) {
            jobjTemp = new JSONObject();
            jobjTemp.put("name", rec);
            if (rec.equals("taxableAmt") || rec.equals("igstamt") || rec.equals("cgstamt") || rec.equals("sgstamt")
                    || rec.equals("totalTax") || rec.equals("totalAmt") || rec.equals("cess")) {
                jobjTemp.put("type", "float");
            }
            jarrRecords.put(jobjTemp);
        }
        boolean hideFlag=false;
        if(params.optString("InvType").equals("Import_of_service")||params.optString("InvType").equals("B2B_Unregistered")||params.optString("InvType").equals("Credit_note_unreg")){
            hideFlag=true;
        }

          //"Customer Name"
          jobjTemp = new JSONObject();
          jobjTemp.put("header", "<b>" + messageSource.getMessage("acc.gstr2.supplierName", null, requestcontextutilsobj) + "<b>");
          jobjTemp.put("dataIndex", "supplierName");
          jobjTemp.put("align", "left");
          jobjTemp.put("width", 120);
          jobjTemp.put("pdfwidth", 120);
          jarrColumns.put(jobjTemp);
                              
          jobjTemp = new JSONObject();
          jobjTemp.put("header", "<b>" + messageSource.getMessage("acc.gstr2.supplierGSTIN", null, requestcontextutilsobj) + "<b>");
          jobjTemp.put("dataIndex", "gstin");
          jobjTemp.put("hidden", hideFlag);
          jobjTemp.put("summaryRenderer", "function(){\n"
                 + "            return '<div class=\"grid-summary-common\">'+WtfGlobal.getLocaleText(\"acc.common.total\")+'</div>'\n"
                 + "        }");
          jobjTemp.put("align", "left");
          jobjTemp.put("width", 120);
          jobjTemp.put("pdfwidth", 120);
          jarrColumns.put(jobjTemp);
          
          if (params.optString("InvType").equals("Import_of_goods") || params.optString("InvType").equals("Nil_rated")) {
              hideFlag = true;
          }
          if(params.optString("InvType").equals("Import_of_service")||params.optString("InvType").equals("B2B_Unregistered")){
              hideFlag = false;
          }
          jobjTemp = new JSONObject();
          jobjTemp.put("header", "<b>" + messageSource.getMessage("acc.invoice.gridInvNo", null, requestcontextutilsobj) + "<b>");
          jobjTemp.put("dataIndex", "invNum");
          jobjTemp.put("align", "left");
          jobjTemp.put("hidden", hideFlag);
          jobjTemp.put("width", 120);
          jobjTemp.put("pdfwidth", 120);
          jarrColumns.put(jobjTemp);
          
          if(params.optString("InvType").equals("Import_of_service")){
              hideFlag = true;
          }
          
          if (params.optString("InvType").equals("Import_of_service")||params.optString("InvType").equals("Credit_note_reg")||params.optString("InvType").equals("B2B_reg")||params.optString("InvType").equals("B2B_Unregistered")) {
              jobjTemp = new JSONObject();
              jobjTemp.put("header", "<b>" + messageSource.getMessage("acc.agedPay.invoiceDate", null, requestcontextutilsobj) + "<b>");
              jobjTemp.put("dataIndex", "date");
              jobjTemp.put("align", "left");
              jobjTemp.put("width", 120);
              jobjTemp.put("pdfwidth", 120);
              jarrColumns.put(jobjTemp);
          }
          if (params.optString("InvType").equals("Import_of_service")||params.optString("InvType").equals("Import_of_goods")||params.optString("InvType").equals("B2B_reg")) {
              jobjTemp = new JSONObject();
              jobjTemp.put("header", "<b>" + messageSource.getMessage("acc.CP.supplierinvoicenumber", null, requestcontextutilsobj) + "<b>");
              jobjTemp.put("dataIndex", "supplierinvoiceno");
              jobjTemp.put("align", "left");
              jobjTemp.put("width", 120);
              jobjTemp.put("pdfwidth", 120);
              jarrColumns.put(jobjTemp);
          }
          if (params.optString("InvType").equals("Import_of_goods")) {
              jobjTemp = new JSONObject();
              jobjTemp.put("header", "<b>" + messageSource.getMessage("acc.gstr2.billNo", null, requestcontextutilsobj) + "<b>");
              jobjTemp.put("dataIndex", "invNum");
              jobjTemp.put("align", "left");
              jobjTemp.put("width", 120);
              jobjTemp.put("pdfwidth", 120);
              jarrColumns.put(jobjTemp);

              jobjTemp = new JSONObject();
              jobjTemp.put("header", "<b>" + messageSource.getMessage("acc.gstr2.billEntryDate", null, requestcontextutilsobj) + "<b>");
              jobjTemp.put("dataIndex", "date");
              jobjTemp.put("align", "left");
              jobjTemp.put("width", 120);
              jobjTemp.put("pdfwidth", 120);
              jarrColumns.put(jobjTemp);
              
              jobjTemp = new JSONObject();
              jobjTemp.put("header", "<b>" + messageSource.getMessage("acc.gstr2.portCode", null, requestcontextutilsobj) + "<b>");
              jobjTemp.put("dataIndex", "portcode");
              jobjTemp.put("align", "left");
              jobjTemp.put("width", 120);
              jobjTemp.put("pdfwidth", 120);
              jarrColumns.put(jobjTemp);
          }
          if (params.optString("InvType").equals("Credit_note_reg")) {
              jobjTemp = new JSONObject();
              jobjTemp.put("header", "<b>" + messageSource.getMessage("acc.field.DocumentType", null, requestcontextutilsobj) + "<b>");
              jobjTemp.put("dataIndex", "invoicetype");
              jobjTemp.put("align", "left");
              jobjTemp.put("width", 110);
              jobjTemp.put("pdfwidth", 110);
              jarrColumns.put(jobjTemp);
          }
          if (params.optString("InvType").equals("Credit_note_unreg")) {
              jobjTemp = new JSONObject();
              jobjTemp.put("header", "<b>" + messageSource.getMessage("acc.invoice.gridInvNo", null, requestcontextutilsobj) + "<b>");
              jobjTemp.put("dataIndex", "invNum");
              jobjTemp.put("align", "left");
              jobjTemp.put("width", 120);
              jobjTemp.put("pdfwidth", 120);
              jarrColumns.put(jobjTemp);

              jobjTemp = new JSONObject();
              jobjTemp.put("header", "<b>" + messageSource.getMessage("acc.agedPay.invoiceDate", null, requestcontextutilsobj) + "<b>");
              jobjTemp.put("dataIndex", "date");
              jobjTemp.put("align", "left");
              jobjTemp.put("width", 120);
              jobjTemp.put("pdfwidth", 120);
              jarrColumns.put(jobjTemp);

              jobjTemp = new JSONObject();
              jobjTemp.put("header", "<b>" + messageSource.getMessage("acc.field.DocumentType", null, requestcontextutilsobj) + "<b>");
              jobjTemp.put("dataIndex", "invoicetype");
              jobjTemp.put("align", "left");
              jobjTemp.put("width", 110);
              jobjTemp.put("pdfwidth", 110);
              jarrColumns.put(jobjTemp);

              jobjTemp = new JSONObject();
              jobjTemp.put("header", "<b>" + messageSource.getMessage("acc.gstr2.supplierType", null, requestcontextutilsobj) + "<b>");
              jobjTemp.put("dataIndex", "supplierType");
              jobjTemp.put("width", 110);
              jobjTemp.put("pdfwidth", 110);
              jarrColumns.put(jobjTemp);

              jobjTemp = new JSONObject();
              jobjTemp.put("header", "<b>" + messageSource.getMessage("acc.masterConfig.22", null, requestcontextutilsobj) + "<b>");
              jobjTemp.put("dataIndex", "");
              jobjTemp.put("width", 110);
              jobjTemp.put("pdfwidth", 110);
              jarrColumns.put(jobjTemp);

              jobjTemp = new JSONObject();
              jobjTemp.put("header", "<b>" + messageSource.getMessage("acc.dnList.reason", null, requestcontextutilsobj) + "<b>");
              jobjTemp.put("dataIndex", "reason");
              jobjTemp.put("width", 110);
              jobjTemp.put("pdfwidth", 110);
              jarrColumns.put(jobjTemp);
         }
          jobjTemp = new JSONObject();
          jobjTemp.put("header", "<b>" + messageSource.getMessage("acc.field.TotalInvoiceAmount", null, requestcontextutilsobj) + "<b>");
          jobjTemp.put("dataIndex", "totalAmt");
          jobjTemp.put("align", "right");
          jobjTemp.put("renderer", "WtfGlobal.withoutRateCurrencyDeletedSymbol");
          jobjTemp.put("width", 110);
          jobjTemp.put("summaryType", "sum");
          jobjTemp.put("summaryRenderer", "WtfGlobal.currencySummaryRenderer");
          jobjTemp.put("pdfwidth", 110);
          jarrColumns.put(jobjTemp);

          if (params.optString("InvType").equals("B2B_Unregistered")) {
              jobjTemp = new JSONObject();
              jobjTemp.put("header", "<b>" + messageSource.getMessage("acc.gstr1.placeofsupply", null, requestcontextutilsobj) + "<b>");
              jobjTemp.put("dataIndex", "placeofsupply");
              jobjTemp.put("summaryRenderer", "function(){\n"
                 + "            return '<div class=\"grid-summary-common\">'+WtfGlobal.getLocaleText(\"acc.common.total\")+'</div>'\n"
                 + "        }");
              jobjTemp.put("width", 110);
              jobjTemp.put("pdfwidth", 110);
              jarrColumns.put(jobjTemp);

              jobjTemp = new JSONObject();
              jobjTemp.put("header", "<b>" + messageSource.getMessage("acc.gstr2.supplierType", null, requestcontextutilsobj) + "<b>");
              jobjTemp.put("dataIndex", "supplierType");
              jobjTemp.put("width", 110);
              jobjTemp.put("pdfwidth", 110);
              jarrColumns.put(jobjTemp);
          }
          if(params.optString("InvType").equals("Import_of_service")){
              jobjTemp = new JSONObject();
              jobjTemp.put("header", "<b>" + messageSource.getMessage("acc.dnList.reason", null, requestcontextutilsobj) + "<b>");
              jobjTemp.put("dataIndex", "reason");
              jobjTemp.put("width", 110);
              jobjTemp.put("pdfwidth", 110);
              jarrColumns.put(jobjTemp);         
              
              jobjTemp = new JSONObject();
              jobjTemp.put("header", "<b>" + messageSource.getMessage("acc.gstr1.placeofsupply", null, requestcontextutilsobj) + "<b>");
              jobjTemp.put("dataIndex", "placeofsupply");
              jobjTemp.put("summaryRenderer", "function(){\n"
                 + "            return '<div class=\"grid-summary-common\">'+WtfGlobal.getLocaleText(\"acc.common.total\")+'</div>'\n"
                 + "        }");
              jobjTemp.put("width", 110);
              jobjTemp.put("pdfwidth", 110);
              jarrColumns.put(jobjTemp);
          }
          jobjTemp = new JSONObject();
          jobjTemp.put("header", "<b>" + messageSource.getMessage("acc.contract.product.replacement.Status", null, requestcontextutilsobj) + "<b>");
          jobjTemp.put("dataIndex", "");          
          jobjTemp.put("hidden", hideFlag);        
          jobjTemp.put("align", "left");
          jobjTemp.put("width", 120);
          jobjTemp.put("pdfwidth", 120);
          jarrColumns.put(jobjTemp);
          
          if(params.optString("InvType").equals("Credit_note_reg")){
          jobjTemp = new JSONObject();
          jobjTemp.put("header", "<b>" + messageSource.getMessage("acc.gstr2.noteNumber", null, requestcontextutilsobj) + "<b>");
          jobjTemp.put("dataIndex", "originalinvoiceno");
          jobjTemp.put("hidden", hideFlag);
          jobjTemp.put("align", "left");
          jobjTemp.put("width", 120);
          jobjTemp.put("pdfwidth", 120);
          jarrColumns.put(jobjTemp);

          jobjTemp = new JSONObject();
          jobjTemp.put("header", "<b>" + messageSource.getMessage("acc.gstr2.noteDate", null, requestcontextutilsobj) + "<b>");
          jobjTemp.put("dataIndex", "originalinvoicedate");         
          jobjTemp.put("hidden", hideFlag);
          jobjTemp.put("align", "left");
          jobjTemp.put("width", 120);
          jobjTemp.put("pdfwidth", 120);
          jarrColumns.put(jobjTemp);
          }
          jobjTemp = new JSONObject();
          jobjTemp.put("header", "<b>" + messageSource.getMessage("acc.gstr1.taxableamount", null, requestcontextutilsobj) + "<b>");
          jobjTemp.put("dataIndex", "taxableAmt");
          jobjTemp.put("align", "right");
          jobjTemp.put("renderer", "WtfGlobal.withoutRateCurrencyDeletedSymbol");
          jobjTemp.put("summaryType", "sum");
          jobjTemp.put("summaryRenderer", "WtfGlobal.currencySummaryRenderer");
          jobjTemp.put("width", 120);
          jobjTemp.put("pdfwidth", 120);
          jarrColumns.put(jobjTemp);

          jobjTemp = new JSONObject();
          jobjTemp.put("header", "<b>" + messageSource.getMessage("acc.gstr1.IGST", null, requestcontextutilsobj) + "<b>");
          jobjTemp.put("dataIndex", "igstamt");
          jobjTemp.put("width", 120);
          jobjTemp.put("renderer", "WtfGlobal.withoutRateCurrencyDeletedSymbol");
          jobjTemp.put("align", "right");
          jobjTemp.put("summaryType", "sum");
          jobjTemp.put("summaryRenderer", "WtfGlobal.currencySummaryRenderer");
          jobjTemp.put("pdfwidth", 120);
          jarrColumns.put(jobjTemp);

          jobjTemp = new JSONObject();
          jobjTemp.put("header", "<b>" + messageSource.getMessage("acc.gstr1.CGST", null, requestcontextutilsobj) + "<b>");
          jobjTemp.put("dataIndex", "cgstamt");
          jobjTemp.put("width", 120);
          jobjTemp.put("renderer", "WtfGlobal.withoutRateCurrencyDeletedSymbol");
          jobjTemp.put("align", "right");
          jobjTemp.put("summaryType", "sum");
          jobjTemp.put("summaryRenderer", "WtfGlobal.currencySummaryRenderer");
          jobjTemp.put("pdfwidth", 120);
          jarrColumns.put(jobjTemp);

          jobjTemp = new JSONObject();
          jobjTemp.put("header", "<b>" + messageSource.getMessage("acc.gstr1.SGST", null, requestcontextutilsobj) + "<b>");
          jobjTemp.put("dataIndex", "sgstamt");
          jobjTemp.put("width", 120);
          jobjTemp.put("renderer", "WtfGlobal.withoutRateCurrencyDeletedSymbol");
          jobjTemp.put("align", "right");
          jobjTemp.put("summaryType", "sum");
          jobjTemp.put("summaryRenderer", "WtfGlobal.currencySummaryRenderer");
          jobjTemp.put("pdfwidth", 120);
          jarrColumns.put(jobjTemp);
         
          jobjTemp = new JSONObject();
          jobjTemp.put("header", "<b>" + messageSource.getMessage("acc.gstr1.cessamount", null, requestcontextutilsobj) + "<b>");
          jobjTemp.put("dataIndex", "cess");
          jobjTemp.put("align", "right");
          jobjTemp.put("renderer", "WtfGlobal.withoutRateCurrencyDeletedSymbol");
          jobjTemp.put("summaryType", "sum");
          jobjTemp.put("summaryRenderer", "WtfGlobal.currencySummaryRenderer");
          jobjTemp.put("width", 120);
          jobjTemp.put("pdfwidth", 120);
          jarrColumns.put(jobjTemp);
          
          jobjTemp = new JSONObject();
          jobjTemp.put("header", "<b>" + messageSource.getMessage("acc.contract.product.replacement.Status", null, requestcontextutilsobj) + "<b>");
          jobjTemp.put("dataIndex", "");          
          jobjTemp.put("align", "left");
          jobjTemp.put("width", 120);
          jobjTemp.put("pdfwidth", 120);
          jarrColumns.put(jobjTemp);
          

    }
     
    public void getColumnModelForGSTR2_NilRated(JSONArray jarrRecords, JSONArray jarrColumns, JSONObject params) throws JSONException {
        String storeRec = "";
        String section = params.optString("section");
        Locale requestcontextutilsobj = null;
        if (params.has("requestcontextutilsobj")) {
            requestcontextutilsobj = (Locale) params.opt("requestcontextutilsobj");
        }
        JSONObject jobjTemp = new JSONObject();
        storeRec = "gstin,value,termamount,type,pos,invoicenumber,entrydate,vendorname,supplierinvoiceno";
        String[] recArr = storeRec.split(",");
        // Get those fields in record for whome, no special properties present like type, defVal, mapping etc.
        for (String rec : recArr) {
            jobjTemp = new JSONObject();
            jobjTemp.put("name", rec);
            jarrRecords.put(jobjTemp);
        }

        // Gel column model - 
        jobjTemp = new JSONObject();
        jobjTemp.put("header", "<b>" + messageSource.getMessage("acc.gstr2.supplyType", null, requestcontextutilsobj) + "<b>");
        jobjTemp.put("dataIndex", "vendorname");
        jobjTemp.put("width", 150);
        jobjTemp.put("align", "left");
        jobjTemp.put("pdfwidth", 150);
        jarrColumns.put(jobjTemp);

        jobjTemp = new JSONObject();
        jobjTemp.put("header", "<b>" + messageSource.getMessage("acc.gstr2.supplierGSTIN", null, requestcontextutilsobj) + "<b>");
        jobjTemp.put("dataIndex", "gstin");
        jobjTemp.put("align", "left");
        jobjTemp.put("width", 150);
        jobjTemp.put("pdfwidth", 150);
        jarrColumns.put(jobjTemp);
        
        jobjTemp = new JSONObject();
        jobjTemp.put("header", "<b>" + messageSource.getMessage("acc.CP.supplierinvoicenumber", null, requestcontextutilsobj) + "<b>");
        jobjTemp.put("dataIndex", "supplierinvoiceno");
        jobjTemp.put("width", 150);
        jobjTemp.put("align", "left");
        jobjTemp.put("pdfwidth", 150);
        jarrColumns.put(jobjTemp);

        jobjTemp = new JSONObject();
        jobjTemp.put("header", "<b>" + messageSource.getMessage("acc.gstr1.placeofsupply", null, requestcontextutilsobj) + "<b>");
        jobjTemp.put("dataIndex", "pos");
        jobjTemp.put("align", "left");
        jobjTemp.put("hidden",true);
        jobjTemp.put("width", 150);
        jobjTemp.put("pdfwidth", 150);
        jarrColumns.put(jobjTemp);

        jobjTemp = new JSONObject();
        jobjTemp.put("header", "<b>" + messageSource.getMessage("acc.prList.invNo", null, requestcontextutilsobj) + "<b>");
        jobjTemp.put("dataIndex", "invoicenumber");
        jobjTemp.put("align", "left");
        jobjTemp.put("width", 150);
        jobjTemp.put("pdfwidth", 150);
        jarrColumns.put(jobjTemp);

        jobjTemp = new JSONObject();
        jobjTemp.put("header", "<b>" + messageSource.getMessage("acc.rem.34", null, requestcontextutilsobj) + "<b>");
        jobjTemp.put("dataIndex", "entrydate");
        jobjTemp.put("width", 150);
        jobjTemp.put("align", "left");
        jobjTemp.put("pdfwidth", 150);
        jarrColumns.put(jobjTemp);

        jobjTemp = new JSONObject();
        jobjTemp.put("header", "<b>" + messageSource.getMessage("acc.gstr1.taxableamount", null, requestcontextutilsobj) + "<b>");
        jobjTemp.put("dataIndex", "termamount");
        jobjTemp.put("renderer", "WtfGlobal.withoutRateCurrencyDeletedSymbol");
        jobjTemp.put("align", "right");
        jobjTemp.put("width", 150);
        jobjTemp.put("pdfwidth", 150);
        jarrColumns.put(jobjTemp);

        jobjTemp = new JSONObject();
        jobjTemp.put("header", "<b>" + messageSource.getMessage("acc.gstr2.status", null, requestcontextutilsobj) + "<b>");
        jobjTemp.put("dataIndex", "status");
        jobjTemp.put("align", "right");
        jobjTemp.put("width", 150);
        jobjTemp.put("pdfwidth", 150);
        jarrColumns.put(jobjTemp);

    }
    public void getColumnModelForGSTR2_Advance(JSONArray jarrRecords, JSONArray jarrColumns, JSONObject params) throws JSONException {
        String storeRec = "";
        String section = params.optString("section");
        Locale requestcontextutilsobj = null;
        if (params.has("requestcontextutilsobj")) {
            requestcontextutilsobj = (Locale) params.opt("requestcontextutilsobj");
        }
        JSONObject jobjTemp = new JSONObject();
        storeRec = "date,gstin,billno,hsnno,value,sumTaxableAmt,type,originalinvdate,originalinvno,amountbeforetax,placeofsupply"
                + ",igstamt,cgstamt,sgstamt,cessamt,statecode,customer,originalhsnno,originaltype,noteno,notedate,rate,supplierName,supplierGSTIN,receiptno,receiptdate";
        String[] recArr = storeRec.split(",");
        // Get those fields in record for whome, no special properties present like type, defVal, mapping etc.
        for (String rec : recArr) {
            jobjTemp = new JSONObject();
            jobjTemp.put("name", rec);
            jarrRecords.put(jobjTemp);
        }

        // Gel column model - 
        boolean hideFlag=false;
        
        if (params.optString("InvType").equals("Advance_paid")) {
            jobjTemp = new JSONObject();
            jobjTemp.put("header", "<b>" + messageSource.getMessage("acc.gstr1.placeofsupply", null, requestcontextutilsobj) + "<b>");
            jobjTemp.put("dataIndex", "placeofsupply");
            jobjTemp.put("width", 150);
            jobjTemp.put("align", "left");
            jobjTemp.put("pdfwidth", 150);
            jarrColumns.put(jobjTemp);

            jobjTemp = new JSONObject();
            jobjTemp.put("header", "<b>" + messageSource.getMessage("acc.field.Rate", null, requestcontextutilsobj) + "<b>");
            jobjTemp.put("dataIndex", "rate");
            jobjTemp.put("align", "left");
            jobjTemp.put("width", 150);
            jobjTemp.put("pdfwidth", 150);
            jarrColumns.put(jobjTemp);
        }
        if (params.optString("InvType").equals("Advance_adjusted")) {
            jobjTemp = new JSONObject();
            jobjTemp.put("header", "<b>" + messageSource.getMessage("acc.gstr2.supplierName", null, requestcontextutilsobj) + "<b>");
            jobjTemp.put("dataIndex", "supplierName");
            jobjTemp.put("width", 150);
            jobjTemp.put("align", "left");
            jobjTemp.put("pdfwidth", 150);
            jarrColumns.put(jobjTemp);

            jobjTemp = new JSONObject();
            jobjTemp.put("header", "<b>" + messageSource.getMessage("acc.gstr2.supplierGSTIN", null, requestcontextutilsobj) + "<b>");
            jobjTemp.put("dataIndex", "gstin");
            jobjTemp.put("align", "left");
            jobjTemp.put("width", 150);
            jobjTemp.put("pdfwidth", 150);
            jarrColumns.put(jobjTemp);

            jobjTemp = new JSONObject();
            jobjTemp.put("header", "<b>" + messageSource.getMessage("acc.agedPay.gridIno", null, requestcontextutilsobj) + "<b>");
            jobjTemp.put("dataIndex", "receiptno");
            jobjTemp.put("width", 150);
            jobjTemp.put("align", "left");
            jobjTemp.put("pdfwidth", 150);
            jarrColumns.put(jobjTemp);

            jobjTemp = new JSONObject();
            jobjTemp.put("header", "<b>" + messageSource.getMessage("acc.rem.34", null, requestcontextutilsobj) + "<b>");
            jobjTemp.put("dataIndex", "receiptdate");
            jobjTemp.put("align", "left");
            jobjTemp.put("width", 150);
            jobjTemp.put("pdfwidth", 150);
            jarrColumns.put(jobjTemp);

        }
        jobjTemp = new JSONObject();
        jobjTemp.put("header", "<b>" + messageSource.getMessage("acc.gstr1.taxableamount", null, requestcontextutilsobj) + "<b>");
        jobjTemp.put("dataIndex", "sumTaxableAmt");
        jobjTemp.put("renderer", "WtfGlobal.withoutRateCurrencyDeletedSymbol");
        jobjTemp.put("align", "left");
        jobjTemp.put("width", 150);
        jobjTemp.put("pdfwidth", 150);
        jarrColumns.put(jobjTemp);

        jobjTemp = new JSONObject();
        jobjTemp.put("header", "<b>" + messageSource.getMessage("acc.gstr1.integratedtaxamt", null, requestcontextutilsobj) + "<b>");
        jobjTemp.put("dataIndex", "igstamt");
        jobjTemp.put("renderer", "WtfGlobal.withoutRateCurrencyDeletedSymbol");
        jobjTemp.put("align", "left");
        jobjTemp.put("width", 150);
        jobjTemp.put("pdfwidth", 150);
        jarrColumns.put(jobjTemp);

        jobjTemp = new JSONObject();
        jobjTemp.put("header", "<b>" + messageSource.getMessage("acc.gstr1.centraltaxamt", null, requestcontextutilsobj) + "<b>");
        jobjTemp.put("dataIndex", "cgstamt");
        jobjTemp.put("width", 150);
        jobjTemp.put("renderer", "WtfGlobal.withoutRateCurrencyDeletedSymbol");
        jobjTemp.put("align", "left");
        jobjTemp.put("pdfwidth", 150);
        jarrColumns.put(jobjTemp);
        jobjTemp = new JSONObject();
        jobjTemp.put("header", "<b>" + messageSource.getMessage("acc.gstr1.statetaxamt", null, requestcontextutilsobj) + "<b>");
        jobjTemp.put("dataIndex", "sgstamt");
        jobjTemp.put("width", 150);
        jobjTemp.put("renderer", "WtfGlobal.withoutRateCurrencyDeletedSymbol");
        jobjTemp.put("align", "left");
        jobjTemp.put("pdfwidth", 150);
        jarrColumns.put(jobjTemp);

        jobjTemp = new JSONObject();
        jobjTemp.put("header", "<b>" + messageSource.getMessage("acc.gstr1.CESS", null, requestcontextutilsobj) + "<b>");
        jobjTemp.put("dataIndex", "cessamt");
        jobjTemp.put("renderer", "WtfGlobal.withoutRateCurrencyDeletedSymbol");
        jobjTemp.put("align", "right");
        jobjTemp.put("width", 150);
        jobjTemp.put("pdfwidth", 150);
        jarrColumns.put(jobjTemp);

        jobjTemp = new JSONObject();
        jobjTemp.put("header", "<b>" + messageSource.getMessage("acc.gstr2.status", null, requestcontextutilsobj) + "<b>");
        jobjTemp.put("dataIndex", "CGSTamount");
        jobjTemp.put("renderer", "WtfGlobal.withoutRateCurrencyDeletedSymbol");
        jobjTemp.put("align", "right");
        jobjTemp.put("width", 150);
        jobjTemp.put("pdfwidth", 150);
        jarrColumns.put(jobjTemp);

    }
    /**
     * @Description - Computation of GSTR1 Summary for all sections
     * i.e.B2B,B2CL....
     * @param params
     * @return
     * @throws ServiceException
     * @throws JSONException
     */
    public JSONObject getGSTR1Summary(JSONObject params) throws ServiceException, JSONException {
        JSONObject object = new JSONObject();
        JSONObject jMeta = new JSONObject();
        JSONArray jarrColumns = new JSONArray();
        JSONArray jarrRecords = new JSONArray();
        JSONArray dataJArr = new JSONArray();
        if (params.optBoolean("isforstore", false)) {
            /**
             * If request for combo box
             */
            return object=getGSTR1SectionCombo();
        }
        JSONArray array = new JSONArray();
        JSONArray array1 = new JSONArray();
        String start = params.optString("start");
        String limit = params.optString("limit");
        String companyId = params.optString("companyid");
        JSONObject reqParams = params;
        reqParams.put("isGSTR1", true);
        getEntityDataForRequestedModule(reqParams);
        getColNumForRequestedModules(reqParams);
        getLocalStateOfEntity(reqParams);
        try {
            getColumnModelForGSTSummary(jarrRecords, jarrColumns, params);
            reqParams.put("entitycolnum", reqParams.optString("invoiceentitycolnum"));
            reqParams.put("entityValue", reqParams.optString("invoiceentityValue"));
            reqParams.put("excludeTermAmountForRCMInvoices",true);
            JSONObject b2bobj = getB2BInvoiceDetails(reqParams, null);
            reqParams.remove("excludeTermAmountForRCMInvoices");
            JSONObject B2B = new JSONObject();
            B2B = b2bobj.getJSONArray("summaryArr").getJSONObject(0);
            dataJArr.put(B2B);
            JSONObject b2clobj = getB2ClInvoiceDetails(reqParams);
            JSONObject B2CL = new JSONObject();
            B2CL = b2clobj.getJSONArray("summaryArr").getJSONObject(0);
            dataJArr.put(B2CL);
            JSONObject b2csobj = getB2CSInvoiceDetails(reqParams);
            JSONObject B2CS = new JSONObject();
            B2CS = b2csobj.getJSONArray("summaryArr").getJSONObject(0);
            dataJArr.put(B2CS);
            reqParams.put("entitycolnum", reqParams.optString("cnentitycolnum"));
            reqParams.put("entityValue", reqParams.optString("cnentityValue"));
            JSONObject cdnrobj = getCDNRInvoiceDetails(reqParams, null);
            JSONObject CDNR = new JSONObject();
            CDNR = cdnrobj.getJSONArray("summaryArr").getJSONObject(0);
            dataJArr.put(CDNR);
            JSONObject cdnurobj = getCDNURInvoiceDetails(reqParams);
            JSONObject CDNUR = new JSONObject();
            CDNUR = cdnurobj.getJSONArray("summaryArr").getJSONObject(0);
            dataJArr.put(CDNUR);
            reqParams.put("entitycolnum", reqParams.optString("invoiceentitycolnum"));
            reqParams.put("entityValue", reqParams.optString("invoiceentityValue"));
            JSONObject exportobj = getExportInvoiceDetails(reqParams);
            JSONObject EXPORT = new JSONObject();
            EXPORT = exportobj.getJSONArray("summaryArr").getJSONObject(0);
            dataJArr.put(EXPORT);
            reqParams.put("entitycolnum", reqParams.optString("receiptentitycolnum"));
            reqParams.put("entityValue", reqParams.optString("receiptentityValue"));
            JSONObject atobj = getTaxLiabilityOnAdvance(reqParams);
            JSONObject AT = new JSONObject();
            AT = atobj.getJSONArray("summaryArr").getJSONObject(0);
            dataJArr.put(AT);
            JSONObject atadjobj = getAdjustedAdvance(reqParams);
            JSONObject ATADJ = new JSONObject();
            ATADJ = atadjobj.getJSONArray("summaryArr").getJSONObject(0);
            dataJArr.put(ATADJ);
            reqParams.put("entitycolnum", reqParams.optString("invoiceentitycolnum"));
            reqParams.put("entityValue", reqParams.optString("invoiceentityValue"));
            params.put("reportid", Constants.GSTR3B_Summary_Report);
            JSONObject exemptobj = getExemptInvoiceDetails(reqParams);
            JSONObject EXEMPT = new JSONObject();
            EXEMPT = exemptobj.getJSONArray("summaryArr").getJSONObject(0);
            dataJArr.put(EXEMPT);

            /**
             * Total based on each section
             */
            getTotalAmountsForGSTR1(dataJArr, reqParams);
            JSONObject DOCS = new JSONObject();
            DOCS.put("typeofinvoice", "<b>DOCS<b>");
            dataJArr.put(DOCS);
            reqParams.put("entitycolnum", reqParams.optString("invoiceentitycolnum"));
            reqParams.put("entityValue", reqParams.optString("invoiceentityValue"));
            JSONObject hsnobj = getHSNSummarydetails(reqParams);
            JSONObject HSN = new JSONObject();
            HSN = hsnobj.getJSONArray("summaryArr").getJSONObject(0);
            dataJArr.put(HSN);

            JSONArray pagedJson = new JSONArray();
            pagedJson = dataJArr;
            if (!StringUtil.isNullOrEmpty(start) && !StringUtil.isNullOrEmpty(limit)) {
                pagedJson = StringUtil.getPagedJSON(pagedJson, Integer.parseInt(start), Integer.parseInt(limit));
            }
            object.put("totalCount", dataJArr.length());
            object.put("columns", jarrColumns);
            object.put("coldata", pagedJson);
            jMeta.put("totalProperty", "totalCount");
            jMeta.put("root", "coldata");
            jMeta.put("fields", jarrRecords);
            object.put("metaData", jMeta);
            if (params.optBoolean("isExport")) {
                object.put("data", dataJArr);
                object.put("columns", jarrColumns);
            }

        } catch (JSONException ex) {
            throw ServiceException.FAILURE(ex.getMessage(), ex);
        }
        return object;
    }
    /**
     * Put Asset Disposal/ Acquired Invoice Dimension column number details
     * @param params
     * @param reqParams
     * @throws ServiceException
     * @throws JSONException 
     */
    public void putAssetInvoiceDimensionColumnDetails(JSONObject params, JSONObject reqParams)throws ServiceException, JSONException{
        String companyId = params.optString("companyid");
        int colnum = 0;
        HashMap fieldparams = new HashMap<>();
        fieldparams.put(Constants.filter_names, Arrays.asList(Constants.companyid, Constants.moduleid, "fieldname"));
        fieldparams.put(Constants.filter_values, Arrays.asList(companyId, Constants.Acc_FixedAssets_AssetsGroups_ModuleId, "Custom_" + Constants.HSN_SACCODE));

        KwlReturnObject kwlReturnObjectGstCust = fieldManagerDAOobj.getFieldParams(fieldparams);
        List<FieldParams> fieldParamses = kwlReturnObjectGstCust.getEntityList();
        for (FieldParams fieldParams : fieldParamses) {
            colnum = fieldParams.getColnum();
        }
        reqParams.put(GSTRConstants.ASSET_HSNCOLUMN, colnum);
        params.put(GSTRConstants.ASSET_HSNCOLUMN, colnum);
        fieldparams.put(Constants.filter_names, Arrays.asList(Constants.companyid, Constants.moduleid, "fieldname"));
        fieldparams.put(Constants.filter_values, Arrays.asList(companyId, Constants.Acc_FixedAssets_AssetsGroups_ModuleId, "Custom_" + Constants.GSTProdCategory));
        kwlReturnObjectGstCust = fieldManagerDAOobj.getFieldParams(fieldparams);
        fieldParamses = kwlReturnObjectGstCust.getEntityList();
        for (FieldParams fieldParams : fieldParamses) {
            colnum = fieldParams.getColnum();
        }
        reqParams.put(GSTRConstants.ASSET_TAXCLASSCOLUMN, colnum);
        params.put(GSTRConstants.ASSET_TAXCLASSCOLUMN, colnum);
        /*
         To get Unit Quantity Code column number asset Group
         */
        fieldparams.put(Constants.filter_names, Arrays.asList(Constants.companyid, Constants.moduleid, "fieldname"));
        fieldparams.put(Constants.filter_values, Arrays.asList(companyId, Constants.Acc_FixedAssets_AssetsGroups_ModuleId, "Custom_" + Constants.GST_UNIT_QUANTITY_CODE));
        kwlReturnObjectGstCust = fieldManagerDAOobj.getFieldParams(fieldparams);
        fieldParamses = kwlReturnObjectGstCust.getEntityList();
        for (FieldParams fieldParams : fieldParamses) {
            colnum = fieldParams.getColnum();
        }
        reqParams.put(GSTRConstants.ASSET_UQCCOLUMN, colnum);
        params.put(GSTRConstants.ASSET_UQCCOLUMN, colnum);
        /**
         * get State column no for asset Sales Invoice module
         */
        int colnumforstate = fieldManagerDAOobj.getColumnFromFieldParams(Constants.STATE, companyId, Constants.Acc_FixedAssets_DisposalInvoice_ModuleId, 0);
        reqParams.put(GSTRConstants.ASSET_STATE_SALES_COLUMN, colnumforstate);
        params.put(GSTRConstants.ASSET_STATE_SALES_COLUMN, colnumforstate);
        /**
         * get State column no for asset Purchase Invoice module
         */
        colnumforstate = fieldManagerDAOobj.getColumnFromFieldParams(Constants.STATE, companyId, Constants.Acc_FixedAssets_PurchaseInvoice_ModuleId, 0);
        reqParams.put(GSTRConstants.ASSET_STATE_PURCHASE_COLUMN, colnumforstate);
        params.put(GSTRConstants.ASSET_STATE_PURCHASE_COLUMN, colnumforstate);
        
        /**
         * Get Entity Value and its column no for asset Sales invoice
         */
        fieldparams.put(Constants.filter_names, Arrays.asList(Constants.companyid, Constants.moduleid, "fieldname"));
        fieldparams.put(Constants.filter_values, Arrays.asList(companyId, Constants.Acc_FixedAssets_DisposalInvoice_ModuleId, "Custom_" + Constants.ENTITY));
        String fieldid = "";
        kwlReturnObjectGstCust = fieldManagerDAOobj.getFieldParams(fieldparams);
        fieldParamses = kwlReturnObjectGstCust.getEntityList();
        for (FieldParams fieldParams : fieldParamses) {
            colnum = fieldParams.getColnum();
            fieldid = fieldParams.getId();
        }
        String entityValue = params.optString("entity");
        String ids = fieldManagerDAOobj.getIdsUsingParamsValueWithoutInsert(fieldid, entityValue);
        reqParams.put(GSTRConstants.ASSET_SALES_INVOICE_ENTITYCOLUMN, colnum);
        params.put(GSTRConstants.ASSET_SALES_INVOICE_ENTITYCOLUMN, colnum);
        reqParams.put(GSTRConstants.ASSET_SALES_INVOICE_ENTIYVALUE, ids);
        params.put(GSTRConstants.ASSET_SALES_INVOICE_ENTIYVALUE, ids);
        /**
         * Get Entity Value and its column no for asset Purchase invoice
         */
        fieldparams.put(Constants.filter_names, Arrays.asList(Constants.companyid, Constants.moduleid, "fieldname"));
        fieldparams.put(Constants.filter_values, Arrays.asList(companyId, Constants.Acc_FixedAssets_PurchaseInvoice_ModuleId, "Custom_" + Constants.ENTITY));
        fieldid = "";
        kwlReturnObjectGstCust = fieldManagerDAOobj.getFieldParams(fieldparams);
        fieldParamses = kwlReturnObjectGstCust.getEntityList();
        for (FieldParams fieldParams : fieldParamses) {
            colnum = fieldParams.getColnum();
            fieldid = fieldParams.getId();
        }
        entityValue = params.optString("entity");
        ids = fieldManagerDAOobj.getIdsUsingParamsValueWithoutInsert(fieldid, entityValue);
        reqParams.put(GSTRConstants.ASSET_PURCHASE_INVOICE_ENTITYCOLUMN, colnum);
        params.put(GSTRConstants.ASSET_PURCHASE_INVOICE_ENTITYCOLUMN, colnum);
        reqParams.put(GSTRConstants.ASSET_PURCHASE_INVOICE_ENTIYVALUE, ids);
        params.put(GSTRConstants.ASSET_PURCHASE_INVOICE_ENTIYVALUE, ids);
    }
     public void putLeaseInvoiceDimensionColumnDetails(JSONObject params, JSONObject reqParams)throws ServiceException, JSONException{
        String companyId = params.optString("companyid");
        int colnum = 0;
        HashMap fieldparams = new HashMap<>();

        /**
         * get State column no for lease Sales Invoice module
         */
        int colnumforstate = fieldManagerDAOobj.getColumnFromFieldParams(Constants.STATE, companyId, Constants.LEASE_INVOICE_MODULEID, 0);
        reqParams.put(GSTRConstants.Lease_STATE_SALES_COLUMN, colnumforstate);
        params.put(GSTRConstants.Lease_STATE_SALES_COLUMN, colnumforstate);
        
        
        /**
         * Get Entity Value and its column no for lease Sales invoice
         */
        fieldparams.put(Constants.filter_names, Arrays.asList(Constants.companyid, Constants.moduleid, "fieldname"));
        fieldparams.put(Constants.filter_values, Arrays.asList(companyId, Constants.LEASE_INVOICE_MODULEID, "Custom_" + Constants.ENTITY));
        String fieldid = "";
       KwlReturnObject kwlReturnObjectGstCust = fieldManagerDAOobj.getFieldParams(fieldparams);
       List<FieldParams>  fieldParamses = kwlReturnObjectGstCust.getEntityList();
        for (FieldParams fieldParams : fieldParamses) {
            colnum = fieldParams.getColnum();
            fieldid = fieldParams.getId();
        }
        String entityValue = params.optString("entity");
        String ids = fieldManagerDAOobj.getIdsUsingParamsValueWithoutInsert(fieldid, entityValue);
        reqParams.put(GSTRConstants.Lease_SALES_INVOICE_ENTITYCOLUMN, colnum);
        params.put(GSTRConstants.Lease_SALES_INVOICE_ENTITYCOLUMN, colnum);
        reqParams.put(GSTRConstants.Lease_SALES_INVOICE_ENTIYVALUE, ids);
        params.put(GSTRConstants.Lease_SALES_INVOICE_ENTIYVALUE, ids);
    }
    /**
     * Function to get Entity column number and value for selected entity for
     * all modules collectively.
     * @param reqParams
     * @throws ServiceException
     * @throws JSONException
     */
    public void getEntityDataForRequestedModule(JSONObject reqParams) throws ServiceException, JSONException {
        JSONObject params = new JSONObject();
        String entityModuleIds = Constants.Acc_Invoice_ModuleId + "," + Constants.Acc_Vendor_Invoice_ModuleId + ","
                + Constants.Acc_Receive_Payment_ModuleId + "," + Constants.Acc_Make_Payment_ModuleId
                + "," + Constants.Acc_Debit_Note_ModuleId + "," + Constants.Acc_Credit_Note_ModuleId + ","
                + Constants.Acc_FixedAssets_DisposalInvoice_ModuleId + "," + Constants.Acc_FixedAssets_PurchaseInvoice_ModuleId + ","
                + Constants.LEASE_INVOICE_MODULEID + "," + Constants.Acc_Delivery_Order_ModuleId+","+Constants.Acc_GENERAL_LEDGER_ModuleId;
        params.put("moduleids", entityModuleIds);
        params.put("fieldlabel", Constants.ENTITY);
        params.put("fcdvalue", reqParams.optString("entity"));
        params.put("companyid", reqParams.optString("companyid"));
        List entityList = fieldManagerDAOobj.getEntityDataForRequestedModule(params);
        geModulewiseEntityData(entityList, reqParams);
    }

    public void geModulewiseEntityData(List entityList, JSONObject reqParams) throws JSONException {
        if (entityList != null && !entityList.isEmpty()) {
            for (Object object : entityList) {
                Object[] entityObj = (Object[]) object;
                int moduleid = Integer.parseInt(entityObj[0].toString());
                int colnum = Integer.parseInt(entityObj[2].toString());
                String entityvalue = (String) entityObj[3];
                switch (moduleid) {
                    case Constants.Acc_Invoice_ModuleId:
                        reqParams.put("invoiceentitycolnum", colnum);
                        reqParams.put("invoiceentityValue", entityvalue);
                        break;
                    case Constants.Acc_Vendor_Invoice_ModuleId:
                        reqParams.put("goodsreceiptentitycolnum", colnum);
                        reqParams.put("goodsreceiptentityValue", entityvalue);
                        break;
                    case Constants.Acc_Receive_Payment_ModuleId:
                        reqParams.put("receiptentitycolnum", colnum);
                        reqParams.put("receiptentityValue", entityvalue);
                        break;
                    case Constants.Acc_Make_Payment_ModuleId:
                        reqParams.put("paymententitycolnum", colnum);
                        reqParams.put("paymententityValue", entityvalue);
                        break;
                    case Constants.Acc_Debit_Note_ModuleId:
                        reqParams.put("dnentitycolnum", colnum);
                        reqParams.put("dnentityValue", entityvalue);
                        break;
                    case Constants.Acc_Credit_Note_ModuleId:
                        reqParams.put("cnentitycolnum", colnum);
                        reqParams.put("cnentityValue", entityvalue);
                        break;
                    case Constants.Acc_Delivery_Order_ModuleId:
                        reqParams.put("doentitycolnum", colnum);
                        reqParams.put("doentityValue", entityvalue);
                        break;
                    case Constants.Acc_Sales_Order_ModuleId:
                        reqParams.put("soentitycolnum", colnum);
                        reqParams.put("soentityValue", entityvalue);
                        break;
                    case Constants.Acc_Purchase_Order_ModuleId:
                        reqParams.put("poentitycolnum", colnum);
                        reqParams.put("poentityValue", entityvalue);
                        break;                        
                    case Constants.Acc_Goods_Receipt_ModuleId:
                        reqParams.put("grnentitycolnum", colnum);
                        reqParams.put("grnentityValue", entityvalue);
                        break;                        
                    case Constants.Acc_FixedAssets_DisposalInvoice_ModuleId:
                        reqParams.put(GSTRConstants.ASSET_SALES_INVOICE_ENTITYCOLUMN, colnum);
                        reqParams.put(GSTRConstants.ASSET_SALES_INVOICE_ENTIYVALUE, entityvalue);
                        break;
                    case Constants.Acc_FixedAssets_PurchaseInvoice_ModuleId:
                        reqParams.put(GSTRConstants.ASSET_PURCHASE_INVOICE_ENTITYCOLUMN, colnum);
                        reqParams.put(GSTRConstants.ASSET_PURCHASE_INVOICE_ENTIYVALUE, entityvalue);
                        break;
                    case Constants.LEASE_INVOICE_MODULEID:
                        reqParams.put(GSTRConstants.Lease_SALES_INVOICE_ENTITYCOLUMN, colnum);
                        reqParams.put(GSTRConstants.Lease_SALES_INVOICE_ENTIYVALUE, entityvalue);
                        break;
                    case Constants.Acc_GENERAL_LEDGER_ModuleId:
                        reqParams.put("jeentitycolnum", colnum);
                        reqParams.put("jeentityValue", entityvalue);
                        break;                         
                }
            }
        }
    }

    /**
     * Function to get column number for several dimensions for different
     * modules in one queue.
     *
     * @param reqParams
     * @throws ServiceException
     * @throws JSONException
     */
    public void getColNumForRequestedModules(JSONObject reqParams) throws ServiceException, JSONException {
        Map<String, Integer> fieldData = new HashMap<>();
        fieldData.put(Constants.HSN_SACCODE + Constants.Acc_Product_Master_ModuleId, Constants.Acc_Product_Master_ModuleId);
        fieldData.put(Constants.HSN_SACCODE + Constants.Acc_FixedAssets_AssetsGroups_ModuleId, Constants.Acc_FixedAssets_AssetsGroups_ModuleId);
        fieldData.put(Constants.GSTProdCategory + Constants.Acc_Product_Master_ModuleId, Constants.Acc_Product_Master_ModuleId);
        fieldData.put(Constants.GSTProdCategory + Constants.Acc_FixedAssets_AssetsGroups_ModuleId, Constants.Acc_FixedAssets_AssetsGroups_ModuleId);
        fieldData.put(Constants.GST_UNIT_QUANTITY_CODE + Constants.Acc_Product_Master_ModuleId, Constants.Acc_Product_Master_ModuleId);
        fieldData.put(Constants.GST_UNIT_QUANTITY_CODE + Constants.Acc_FixedAssets_AssetsGroups_ModuleId, Constants.Acc_FixedAssets_AssetsGroups_ModuleId);
        fieldData.put(Constants.GST_E_Commerce_Operator + Constants.Acc_Invoice_ModuleId, Constants.Acc_Invoice_ModuleId);
        fieldData.put(GSTRConstants.GSTCNCN_REASON + Constants.Acc_Debit_Note_ModuleId, Constants.Acc_Debit_Note_ModuleId);
        fieldData.put(GSTRConstants.GSTCNCN_REASON + Constants.Acc_Credit_Note_ModuleId, Constants.Acc_Credit_Note_ModuleId);
        List colList = fieldManagerDAOobj.getColnumForDimensionCollectively(fieldData, reqParams);
        getModulewiseColNumData(colList, reqParams);
    }

    public void getModulewiseColNumData(List colList, JSONObject reqParams) throws JSONException {
        if (colList != null && !colList.isEmpty()) {
            for (Object object : colList) {
                Object[] moduleObj = (Object[]) object;
                int colnum = Integer.parseInt(moduleObj[0].toString());
                String fieldlabel = (String) moduleObj[1];
                int moduleid = Integer.parseInt(moduleObj[2].toString());
                switch (moduleid) {
                    case Constants.Acc_Product_Master_ModuleId:
                        if (fieldlabel.equalsIgnoreCase(Constants.HSN_SACCODE)) {
                            reqParams.put("hsncolnum", colnum);
                        } else if (fieldlabel.equalsIgnoreCase(Constants.GSTProdCategory)) {
                            reqParams.put("taxclasscolnum", colnum);
                        } else {
                            reqParams.put("uqccolnum", colnum);
                        }
                        break;
                    case Constants.Acc_FixedAssets_AssetsGroups_ModuleId:
                        if (fieldlabel.equalsIgnoreCase(Constants.HSN_SACCODE)) {
                            reqParams.put(GSTRConstants.ASSET_HSNCOLUMN, colnum);
                        } else if (fieldlabel.equalsIgnoreCase(Constants.GSTProdCategory)) {
                            reqParams.put(GSTRConstants.ASSET_TAXCLASSCOLUMN, colnum);
                        } else {
                            reqParams.put(GSTRConstants.ASSET_UQCCOLUMN, colnum);
                        }
                        break;
                    case Constants.Acc_Invoice_ModuleId:
                        if (fieldlabel.equalsIgnoreCase(Constants.STATE)) {
                            reqParams.put("invoicestatecolnum", colnum);
                        } else if (fieldlabel.equalsIgnoreCase(Constants.GST_E_Commerce_Operator)) {
                            reqParams.put("ecom", colnum);
                        }
                        break;
                    case Constants.Acc_Vendor_Invoice_ModuleId:
                        if (fieldlabel.equalsIgnoreCase(Constants.STATE)) {
                            reqParams.put("goodsreceiptstatecolnum", colnum);
                        }
                        break;
                    case Constants.Acc_Sales_Order_ModuleId:
                        if (fieldlabel.equalsIgnoreCase(Constants.STATE)) {
                            reqParams.put("sostatecolnum", colnum);
                        }
                        break;
                    case Constants.Acc_Purchase_Order_ModuleId:
                        if (fieldlabel.equalsIgnoreCase(Constants.STATE)) {
                            reqParams.put("postatecolnum", colnum);
                        }
                        break;                         
                    case Constants.Acc_Debit_Note_ModuleId:
                        /**
                         * Get State col number for CN/ DN
                         */
                        if (fieldlabel.equalsIgnoreCase(Constants.STATE)) {
                            reqParams.put(GSTRConstants.DN_STATE_COLUMN, colnum);
                        } else {
                            reqParams.put("dnreasoncol", colnum);
                        }
                        break;
                    case Constants.Acc_Credit_Note_ModuleId:
                        if (fieldlabel.equalsIgnoreCase(Constants.STATE)) {
                            reqParams.put(GSTRConstants.CN_STATE_COLUMN, colnum);
                        } else {
                            reqParams.put("cnreasoncol", colnum);
                        }
                        break;
                    case Constants.Acc_Delivery_Order_ModuleId:
                        if (fieldlabel.equalsIgnoreCase(Constants.STATE)) {
                            reqParams.put("dostatecolnum", colnum);
                        }
                        break;
                    case Constants.Acc_Goods_Receipt_ModuleId:
                        if (fieldlabel.equalsIgnoreCase(Constants.STATE)) {
                            reqParams.put("grnstatecolnum", colnum);
                        }
                        break;
                }
            }
        }
    }

    /**
     * Function to get state map to entity.
     *
     * @param reqParams
     * @throws ServiceException
     * @throws JSONException
     */
    public void getLocalStateOfEntity(JSONObject reqParams) throws ServiceException, JSONException {
        String localState = fieldManagerDAOobj.getStateForEntity(reqParams);
        reqParams.put("localState", localState);
    }
    public JSONObject getGSTR1SectionCombo() throws JSONException {
        JSONArray dataJArr = new JSONArray();
        JSONObject object1 = new JSONObject();
        object1.put("typeofinvoice", GSTRConstants.B2B);
        dataJArr.put(object1);
        object1 = new JSONObject();
        object1.put("typeofinvoice", GSTRConstants.B2CL);
        dataJArr.put(object1);
        object1 = new JSONObject();
        object1.put("typeofinvoice", GSTRConstants.B2CS);
        dataJArr.put(object1);
        object1 = new JSONObject();
        object1.put("typeofinvoice", GSTRConstants.CDNR);
        dataJArr.put(object1);
        object1 = new JSONObject();
        object1.put("typeofinvoice", GSTRConstants.CDNUR);
        dataJArr.put(object1);
        object1 = new JSONObject();
        object1.put("typeofinvoice", GSTRConstants.EXPORT);
        dataJArr.put(object1);
        object1 = new JSONObject();
        object1.put("typeofinvoice", GSTRConstants.AT);
        dataJArr.put(object1);
        object1 = new JSONObject();
        object1.put("typeofinvoice", GSTRConstants.ATADJ);
        dataJArr.put(object1);
        object1 = new JSONObject();
        object1.put("typeofinvoice", GSTRConstants.EXEMPT);
        dataJArr.put(object1);
        object1 = new JSONObject();
        object1.put("typeofinvoice", GSTRConstants.HSNSummary);
        dataJArr.put(object1);
        object1 = new JSONObject();
        object1.put("typeofinvoice", GSTRConstants.DOCSSummary);
        dataJArr.put(object1);
        return new JSONObject().put("data", dataJArr);
    }
    /**
     * * Get GST Computation Report section name for Detail view 
     * @return
     * @throws JSONException 
     */
    @Override
    public JSONObject getGSTComputationReportSectionCombo(JSONObject requestParams) throws JSONException {
        JSONArray dataJArr = new JSONArray();
        JSONObject sectionNameObject = new JSONObject();
        sectionNameObject.put("typeofinvoice", GSTRConstants.GST_COMPUTATION_SECTION_SALES_1);
        dataJArr.put(sectionNameObject);
        sectionNameObject = new JSONObject();
        sectionNameObject.put("typeofinvoice", GSTRConstants.GST_COMPUTATION_SECTION_SALES_1_1);
        dataJArr.put(sectionNameObject);
        sectionNameObject = new JSONObject();
        sectionNameObject.put("typeofinvoice", GSTRConstants.GST_COMPUTATION_SECTION_SALES_1_2);
        dataJArr.put(sectionNameObject);
        sectionNameObject = new JSONObject();
        sectionNameObject.put("typeofinvoice", GSTRConstants.GST_COMPUTATION_SECTION_SALES_1_3);
        sectionNameObject = new JSONObject();
        sectionNameObject.put("typeofinvoice", GSTRConstants.GST_COMPUTATION_SECTION_SALES_2);
        dataJArr.put(sectionNameObject);
        sectionNameObject = new JSONObject();
        sectionNameObject.put("typeofinvoice", GSTRConstants.GST_COMPUTATION_SECTION_SALES_2_2);
        dataJArr.put(sectionNameObject);
        sectionNameObject = new JSONObject();
        sectionNameObject.put("typeofinvoice", GSTRConstants.GST_COMPUTATION_SECTION_SALES_3);
        dataJArr.put(sectionNameObject);
        sectionNameObject = new JSONObject();
        sectionNameObject.put("typeofinvoice", GSTRConstants.GST_COMPUTATION_SECTION_SALES_3_1);
        dataJArr.put(sectionNameObject);
        sectionNameObject = new JSONObject();
        sectionNameObject.put("typeofinvoice", GSTRConstants.GST_COMPUTATION_SECTION_SALES_4);
        dataJArr.put(sectionNameObject);
        sectionNameObject = new JSONObject();
        sectionNameObject.put("typeofinvoice", GSTRConstants.GST_COMPUTATION_SECTION_SALES_4_1);
        dataJArr.put(sectionNameObject);
        sectionNameObject = new JSONObject();
        sectionNameObject.put("typeofinvoice", GSTRConstants.GST_COMPUTATION_SECTION_SALES_4_2);
        dataJArr.put(sectionNameObject);
        sectionNameObject = new JSONObject();
        sectionNameObject.put("typeofinvoice", GSTRConstants.GST_COMPUTATION_SECTION_SALES_7);
        dataJArr.put(sectionNameObject);
        sectionNameObject = new JSONObject();
        sectionNameObject.put("typeofinvoice", GSTRConstants.GST_COMPUTATION_SECTION_SALES_7_1);
        dataJArr.put(sectionNameObject);
        sectionNameObject = new JSONObject();
        sectionNameObject.put("typeofinvoice", GSTRConstants.GST_COMPUTATION_SECTION_SALES_7_2);
        dataJArr.put(sectionNameObject);
        sectionNameObject = new JSONObject();
        sectionNameObject.put("typeofinvoice", GSTRConstants.GST_COMPUTATION_SECTION_SALES_7_3);
        dataJArr.put(sectionNameObject);
        sectionNameObject = new JSONObject();
        sectionNameObject.put("typeofinvoice", GSTRConstants.GST_COMPUTATION_SECTION_SALES_7_4);
        dataJArr.put(sectionNameObject);
        sectionNameObject = new JSONObject();
        sectionNameObject.put("typeofinvoice", GSTRConstants.GST_COMPUTATION_SECTION_SALES_7_5);
        dataJArr.put(sectionNameObject);
        sectionNameObject = new JSONObject();
        sectionNameObject.put("typeofinvoice", GSTRConstants.GST_COMPUTATION_SECTION_SALES_8);
        dataJArr.put(sectionNameObject);
        sectionNameObject = new JSONObject();
        sectionNameObject.put("typeofinvoice", GSTRConstants.GST_COMPUTATION_SECTION_SALES_9);
        dataJArr.put(sectionNameObject);
        sectionNameObject = new JSONObject();
        sectionNameObject.put("typeofinvoice", GSTRConstants.GST_COMPUTATION_SECTION_SALES_9_1);
        dataJArr.put(sectionNameObject);
        sectionNameObject = new JSONObject();
        sectionNameObject.put("typeofinvoice", GSTRConstants.GST_COMPUTATION_SECTION_SALES_9_2);
        dataJArr.put(sectionNameObject);
        sectionNameObject = new JSONObject();
        sectionNameObject.put("typeofinvoice", GSTRConstants.GST_COMPUTATION_SECTION_SALES_10);
        dataJArr.put(sectionNameObject);
        sectionNameObject = new JSONObject();
        sectionNameObject.put("typeofinvoice", GSTRConstants.GST_COMPUTATION_SECTION_SALES_10_1);
        dataJArr.put(sectionNameObject);
        sectionNameObject = new JSONObject();
        sectionNameObject.put("typeofinvoice", GSTRConstants.GST_COMPUTATION_SECTION_SALES_10_2);
        dataJArr.put(sectionNameObject);
        sectionNameObject = new JSONObject();
        sectionNameObject.put("typeofinvoice", GSTRConstants.GST_COMPUTATION_SECTION_PURCHASES_1);
        dataJArr.put(sectionNameObject);
        sectionNameObject = new JSONObject();
        sectionNameObject.put("typeofinvoice", GSTRConstants.GST_COMPUTATION_SECTION_PURCHASES_1_1);
        dataJArr.put(sectionNameObject);
        sectionNameObject = new JSONObject();
        sectionNameObject.put("typeofinvoice", GSTRConstants.GST_COMPUTATION_SECTION_PURCHASES_2);
        dataJArr.put(sectionNameObject);
        sectionNameObject = new JSONObject();
        sectionNameObject.put("typeofinvoice", GSTRConstants.GST_COMPUTATION_SECTION_PURCHASES_3);
        dataJArr.put(sectionNameObject);
        sectionNameObject = new JSONObject();
        sectionNameObject.put("typeofinvoice", GSTRConstants.GST_COMPUTATION_SECTION_PURCHASES_3_1);
        dataJArr.put(sectionNameObject);
        sectionNameObject = new JSONObject();
        sectionNameObject.put("typeofinvoice", GSTRConstants.GST_COMPUTATION_SECTION_PURCHASES_3_2);
        dataJArr.put(sectionNameObject);
        sectionNameObject = new JSONObject();
        sectionNameObject.put("typeofinvoice", GSTRConstants.GST_COMPUTATION_SECTION_PURCHASES_4);
        dataJArr.put(sectionNameObject);
        sectionNameObject = new JSONObject();
        sectionNameObject.put("typeofinvoice", GSTRConstants.GST_COMPUTATION_SECTION_PURCHASES_5);
        dataJArr.put(sectionNameObject);
        sectionNameObject = new JSONObject();
        sectionNameObject.put("typeofinvoice", GSTRConstants.GST_COMPUTATION_SECTION_PURCHASES_6);
        dataJArr.put(sectionNameObject);
        sectionNameObject = new JSONObject();
        sectionNameObject.put("typeofinvoice", GSTRConstants.GST_COMPUTATION_SECTION_PURCHASES_7);
        dataJArr.put(sectionNameObject);
        sectionNameObject = new JSONObject();
        sectionNameObject.put("typeofinvoice", GSTRConstants.GST_COMPUTATION_SECTION_PURCHASES_7_1);
        dataJArr.put(sectionNameObject);
        sectionNameObject = new JSONObject();
        sectionNameObject.put("typeofinvoice", GSTRConstants.GST_COMPUTATION_SECTION_PURCHASES_7_2);
        dataJArr.put(sectionNameObject);
        sectionNameObject = new JSONObject();
        sectionNameObject.put("typeofinvoice", GSTRConstants.GST_COMPUTATION_SECTION_PURCHASES_11);
        dataJArr.put(sectionNameObject);
        sectionNameObject = new JSONObject();
        sectionNameObject.put("typeofinvoice", GSTRConstants.GST_COMPUTATION_SECTION_PURCHASES_11_10);
        dataJArr.put(sectionNameObject);
        sectionNameObject = new JSONObject();
        sectionNameObject.put("typeofinvoice", GSTRConstants.GST_COMPUTATION_SECTION_PURCHASES_12);
        dataJArr.put(sectionNameObject);
        sectionNameObject = new JSONObject();
        sectionNameObject.put("typeofinvoice", GSTRConstants.GST_COMPUTATION_SECTION_PURCHASES_13_1);
        dataJArr.put(sectionNameObject);
        return new JSONObject().put("data", dataJArr);
    }
    /**
     * * Get GSTR3B section name for Detail view 
     * @return
     * @throws JSONException 
     */
    @Override
    public JSONObject getGSTR3BReportSectionCombo(JSONObject requestParams) throws JSONException {
        JSONArray dataJArr = new JSONArray();
        JSONObject sectionNameObject = new JSONObject();
        sectionNameObject.put("typeofinvoice", GSTRConstants.GSTR3B_SECTION_3_1_A);
        dataJArr.put(sectionNameObject);
        sectionNameObject = new JSONObject();
        sectionNameObject.put("typeofinvoice", GSTRConstants.GSTR3B_SECTION_3_1_B);
        dataJArr.put(sectionNameObject);
        sectionNameObject = new JSONObject();
        sectionNameObject.put("typeofinvoice", GSTRConstants.GSTR3B_SECTION_3_1_C);
        dataJArr.put(sectionNameObject);
        sectionNameObject = new JSONObject();
        sectionNameObject.put("typeofinvoice", GSTRConstants.GSTR3B_SECTION_3_1_D);
        dataJArr.put(sectionNameObject);
        sectionNameObject = new JSONObject();
        sectionNameObject.put("typeofinvoice", GSTRConstants.GSTR3B_SECTION_3_1_E);
        dataJArr.put(sectionNameObject);
        sectionNameObject = new JSONObject();
        sectionNameObject.put("typeofinvoice", GSTRConstants.GSTR3B_SECTION_3_2_A);
        dataJArr.put(sectionNameObject);
        sectionNameObject = new JSONObject();
        sectionNameObject.put("typeofinvoice", GSTRConstants.GSTR3B_SECTION_3_2_B);
        dataJArr.put(sectionNameObject);
        /**
         * Currently, we have not implemented UIN.
         */
        sectionNameObject = new JSONObject();
        sectionNameObject.put("typeofinvoice", GSTRConstants.GSTR3B_SECTION_3_2_C);
        dataJArr.put(sectionNameObject);
        sectionNameObject = new JSONObject();
        sectionNameObject.put("typeofinvoice", GSTRConstants.GSTR3B_SECTION_4_A_1);
        dataJArr.put(sectionNameObject);
        sectionNameObject = new JSONObject();
        sectionNameObject.put("typeofinvoice", GSTRConstants.GSTR3B_SECTION_4_A_2);
        dataJArr.put(sectionNameObject);
        sectionNameObject = new JSONObject();
        sectionNameObject.put("typeofinvoice", GSTRConstants.GSTR3B_SECTION_4_A_3);
        dataJArr.put(sectionNameObject);
        sectionNameObject = new JSONObject();
        sectionNameObject.put("typeofinvoice", GSTRConstants.GSTR3B_SECTION_4_A_4);
        dataJArr.put(sectionNameObject);
        sectionNameObject = new JSONObject();
        sectionNameObject.put("typeofinvoice", GSTRConstants.GSTR3B_SECTION_4_A_5);
        dataJArr.put(sectionNameObject);
        /**
         * Currently, we don't show any values in this section.
         */
        sectionNameObject = new JSONObject();
        sectionNameObject.put("typeofinvoice", GSTRConstants.GSTR3B_SECTION_4_B_1);
        dataJArr.put(sectionNameObject);
        /**
         * Currently, we don't show any values in this section.
         */
        sectionNameObject = new JSONObject();
        sectionNameObject.put("typeofinvoice", GSTRConstants.GSTR3B_SECTION_4_B_2);
        dataJArr.put(sectionNameObject);
        /**
         * Currently, we don't show any values in this section.
         */
        sectionNameObject = new JSONObject();
        sectionNameObject.put("typeofinvoice", GSTRConstants.GSTR3B_SECTION_4_D_1);
        dataJArr.put(sectionNameObject);
        /**
         * Currently, we don't show any values in this section.
         */
        sectionNameObject = new JSONObject();
        sectionNameObject.put("typeofinvoice", GSTRConstants.GSTR3B_SECTION_4_D_2);
        dataJArr.put(sectionNameObject);
        sectionNameObject = new JSONObject();
        sectionNameObject.put("typeofinvoice", GSTRConstants.GSTR3B_SECTION_5_1);
        dataJArr.put(sectionNameObject);
        sectionNameObject = new JSONObject();
        sectionNameObject.put("typeofinvoice", GSTRConstants.GSTR3B_SECTION_5_2);
        dataJArr.put(sectionNameObject);
        sectionNameObject = new JSONObject();
        sectionNameObject.put("typeofinvoice", GSTRConstants.GSTR3B_SECTION_5_3);
        dataJArr.put(sectionNameObject);
        sectionNameObject = new JSONObject();
        sectionNameObject.put("typeofinvoice", GSTRConstants.GSTR3B_SECTION_5_4);
        dataJArr.put(sectionNameObject);
        return new JSONObject().put("data", dataJArr);
    }
    /**
     * Function return JSON of Mismatch report section name
     * @return JSONObject
     * @throws JSONException 
     */
    public JSONObject getGSTMisMatchReportSectionCombo() throws JSONException {
        JSONArray dataJArr = new JSONArray();
        JSONObject sectionNameObj = new JSONObject();
        sectionNameObj.put("typeofinvoice", GSTRConstants.GSTMisMatch_SECTION_HSNNotAvailable);
        dataJArr.put(sectionNameObj);
        sectionNameObj = new JSONObject();
        sectionNameObj.put("typeofinvoice", GSTRConstants.GSTMisMatch_SECTION_UQCNotAvailable);
        dataJArr.put(sectionNameObj);
        sectionNameObj = new JSONObject();
        sectionNameObj.put("typeofinvoice", GSTRConstants.GSTMisMatch_SECTION_GSTINBlank);
        dataJArr.put(sectionNameObj);
        sectionNameObj = new JSONObject();
        sectionNameObj.put("typeofinvoice", GSTRConstants.GSTMisMatch_SECTION_GSTINnonBlank);
        dataJArr.put(sectionNameObj);
        sectionNameObj = new JSONObject();
        sectionNameObj.put("typeofinvoice", GSTRConstants.GSTMisMatch_SECTION_GSTINInvalid);
        dataJArr.put(sectionNameObj);
        sectionNameObj = new JSONObject();
        sectionNameObj.put("typeofinvoice", GSTRConstants.GSTMisMatch_SECTION_GSTRegistrationTypeblank);
        dataJArr.put(sectionNameObj);
        sectionNameObj = new JSONObject();
        sectionNameObj.put("typeofinvoice", GSTRConstants.GSTMisMatch_SECTION_CustomerVendorTypeblank);
        dataJArr.put(sectionNameObj);
        sectionNameObj = new JSONObject();
        sectionNameObj.put("typeofinvoice", GSTRConstants.GSTMisMatch_SECTION_RCMSalestoUnregisteredPerson);
        dataJArr.put(sectionNameObj);
        sectionNameObj = new JSONObject();
        sectionNameObj.put("typeofinvoice", GSTRConstants.GSTMisMatch_SECTION_ProducttaxMismatch);
        dataJArr.put(sectionNameObj);
        sectionNameObj = new JSONObject();
        sectionNameObj.put("typeofinvoice", GSTRConstants.GSTMisMatch_SECTION_StateMismatch);
        dataJArr.put(sectionNameObj);
        sectionNameObj = new JSONObject();
        sectionNameObj.put("typeofinvoice", GSTRConstants.GSTMisMatch_SECTION_ManuallyenteredInvoiceNumber);
        dataJArr.put(sectionNameObj);
        sectionNameObj = new JSONObject();
        sectionNameObj.put("typeofinvoice", GSTRConstants.Sec_GST_History_Not_Present);
        dataJArr.put(sectionNameObj);
//        sectionNameObj = new JSONObject();
//        sectionNameObj.put("typeofinvoice", GSTRConstants.GSTMisMatch_SECTION_INVALIDCN);
//        dataJArr.put(sectionNameObj);
        return new JSONObject().put("data", dataJArr);
    }
    /**
     * GSTE 2 Report section names
     * @return
     * @throws JSONException 
     */
    public JSONObject getGSTR2ReportSectionCombo() throws JSONException {
        JSONArray dataJArr = new JSONArray();
        JSONObject sectionNameObj = new JSONObject();
        sectionNameObj = new JSONObject();
        sectionNameObj.put("typeofinvoice", GSTRConstants.GSTR2_B2B);
        dataJArr.put(sectionNameObj);
        sectionNameObj = new JSONObject();
        sectionNameObj.put("typeofinvoice", GSTRConstants.GSTR2_CDN);
        dataJArr.put(sectionNameObj);
        sectionNameObj = new JSONObject();
        sectionNameObj.put("typeofinvoice", GSTRConstants.GSTR2_B2B_unregister);
        dataJArr.put(sectionNameObj);
        sectionNameObj = new JSONObject();
        sectionNameObj.put("typeofinvoice", GSTRConstants.GSTR2_ImpServices);
        dataJArr.put(sectionNameObj);
        sectionNameObj = new JSONObject();
        sectionNameObj.put("typeofinvoice", GSTRConstants.GSTR2_ImpGoods);
        dataJArr.put(sectionNameObj);
        sectionNameObj = new JSONObject();
        sectionNameObj.put("typeofinvoice", GSTRConstants.GSTR2_CDN_unregister);
        dataJArr.put(sectionNameObj);
        sectionNameObj = new JSONObject();
        sectionNameObj.put("typeofinvoice", GSTRConstants.GSTR2_nilRated);
        dataJArr.put(sectionNameObj);
        sectionNameObj = new JSONObject();
        sectionNameObj.put("typeofinvoice", GSTRConstants.GSTR2_AdvancePaid);
        dataJArr.put(sectionNameObj);
        sectionNameObj = new JSONObject();
        sectionNameObj.put("typeofinvoice", GSTRConstants.GSTR2_AdvanceAdjust);
        dataJArr.put(sectionNameObj);
        
        return new JSONObject().put("data", dataJArr);
    }
    private void getTotalAmountsForGSTR1(JSONArray dataArr, JSONObject reqParams) throws JSONException {
        String companyId = reqParams.optString("companyid");
        int numberofinvoices = 0;
        double igstamt = 0d;
        double sgstamt = 0d;
        double cgstamt = 0d;
        double cessamt = 0d;
        double sumTaxableAmt = 0d;
        double sumTaxAmt = 0d;
        double sumTotalAmt = 0d;
        for (int index = 0; index < dataArr.length(); index++) {
            JSONObject nObject = dataArr.getJSONObject(index);
            String typeofinvoice=nObject.optString("typeofinvoice").replaceAll("<b>","");
            if (typeofinvoice.equalsIgnoreCase(GSTRConstants.B2B)
                    || typeofinvoice.equalsIgnoreCase(GSTRConstants.B2CL)
                    || typeofinvoice.equalsIgnoreCase(GSTRConstants.B2CS)
                    || typeofinvoice.equalsIgnoreCase(GSTRConstants.EXPORT)
                    || typeofinvoice.equalsIgnoreCase(GSTRConstants.EXEMPT)
                    || typeofinvoice.equalsIgnoreCase(GSTRConstants.AT)
                    || typeofinvoice.equalsIgnoreCase(GSTRConstants.CDNR)
                    || typeofinvoice.equalsIgnoreCase(GSTRConstants.CDNUR)
                    || typeofinvoice.equalsIgnoreCase(GSTRConstants.ATADJ)) {
                numberofinvoices += nObject.optInt("numberofinvoices");
                igstamt += nObject.optDouble("igstamt",0);
                sgstamt += nObject.optDouble("sgstamt",0);
                cgstamt += nObject.optDouble("cgstamt",0);
                cessamt += nObject.optDouble("cessamt",0);
                sumTaxableAmt += nObject.optDouble("sumTaxableAmt",0);
                sumTaxAmt += nObject.optDouble("sumTaxAmt",0);
                sumTotalAmt += nObject.optDouble("sumTotalAmt",0);}
//            } else if (typeofinvoice.equalsIgnoreCase(GSTRConstants.CDNR)
//                    || typeofinvoice.equalsIgnoreCase(GSTRConstants.CDNUR)
//                    || typeofinvoice.equalsIgnoreCase(GSTRConstants.ATADJ)) {
//                numberofinvoices += nObject.optInt("numberofinvoices");
//                igstamt -= nObject.optDouble("igstamt",0);
//                sgstamt -= nObject.optDouble("sgstamt",0);
//                cgstamt -= nObject.optDouble("cgstamt",0);
//                cessamt -= nObject.optDouble("cessamt",0);
//                sumTaxableAmt -= nObject.optDouble("sumTaxableAmt",0);
//                sumTaxAmt -= nObject.optDouble("sumTaxAmt",0);
//                sumTotalAmt -= nObject.optDouble("sumTotalAmt",0);
//            }
            
        }
        JSONObject summaryObj = new JSONObject();
        summaryObj.put("numberofinvoices", "<b>"+numberofinvoices+"<b>");
        summaryObj.put("typeofinvoice", "<b>Total<b>");
        summaryObj.put("igstamt", authHandler.formattedAmount(igstamt, companyId));
        summaryObj.put("sgstamt", authHandler.formattedAmount(sgstamt, companyId));
        summaryObj.put("cgstamt", authHandler.formattedAmount(cgstamt, companyId));
        summaryObj.put("cessamt", authHandler.formattedAmount(cessamt, companyId));
        summaryObj.put("sumTaxableAmt", authHandler.formattedAmount(sumTaxableAmt, companyId));
        summaryObj.put("sumTaxAmt", authHandler.formattedAmount(sumTaxAmt, companyId));
        summaryObj.put("sumTotalAmt", authHandler.formattedAmount(sumTotalAmt, companyId));
        dataArr.put(summaryObj);
    }
    /**
     * Method to get summary for Purchase side data
     *
     * @param params
     * @return
     * @throws ServiceException
     * @throws JSONException
     */
    public JSONObject getGSTR2Summary(JSONObject params) throws ServiceException, JSONException {
        JSONObject object = new JSONObject();
        JSONObject jMeta = new JSONObject();
        JSONArray jarrColumns = new JSONArray();
        JSONArray jarrRecords = new JSONArray();
        JSONArray dataJArr = new JSONArray();
        JSONArray array = new JSONArray();
        JSONArray array1 = new JSONArray();
        String start = params.optString("start");
        String limit = params.optString("limit");
        String companyId = params.optString("companyid");
        Company company = null;
        KwlReturnObject companyResult = null;
        if (params.optBoolean("isforstore", false)) {
            /**
             * If request for Section combo box
             */
            return object = getGSTR2ReportSectionCombo();
        }
        companyResult = accountingHandlerDAOobj.getObject(Company.class.getName(), companyId);
        company = (Company) companyResult.getEntityList().get(0);
        params.put("isPurchase", true);
        JSONObject reqParams = params;
        /* * before starting sectional data need to get column no for Product Tax
         * Class (HSN)
         */
        int colnum = 0;
        HashMap fieldparams = new HashMap<>();
        fieldparams.put(Constants.filter_names, Arrays.asList(Constants.companyid, Constants.moduleid, "fieldname"));
        fieldparams.put(Constants.filter_values, Arrays.asList(companyId, Constants.Acc_Product_Master_ModuleId, "Custom_" + Constants.HSN_SACCODE));
        KwlReturnObject kwlReturnObjectGstCust = fieldManagerDAOobj.getFieldParams(fieldparams);
        List<FieldParams> fieldParamses = kwlReturnObjectGstCust.getEntityList();
        for (FieldParams fieldParams : fieldParamses) {
            colnum = fieldParams.getColnum();
        }
        reqParams.put("hsncolnum", colnum);
        fieldparams.put(Constants.filter_names, Arrays.asList(Constants.companyid, Constants.moduleid, "fieldname"));
        fieldparams.put(Constants.filter_values, Arrays.asList(companyId, Constants.Acc_Product_Master_ModuleId, "Custom_" + Constants.GSTProdCategory));
        kwlReturnObjectGstCust = fieldManagerDAOobj.getFieldParams(fieldparams);
        fieldParamses = kwlReturnObjectGstCust.getEntityList();
        for (FieldParams fieldParams : fieldParamses) {
            colnum = fieldParams.getColnum();
        }
        params.put("taxclasscolnum", colnum);
        /**
         * get State column no for Invoice module
         */
        int colnumforstate = fieldManagerDAOobj.getColumnFromFieldParams(Constants.STATE, companyId, Constants.Acc_Vendor_Invoice_ModuleId, 0);
        params.put("statecolnum", colnumforstate);
        /**
         * Get Local state Value
         */
        String entityId = params.optString("entityid");
        params.put("companyid", companyId);
        params.put("entityid", entityId);
        String localState = fieldManagerDAOobj.getStateForEntity(params);
        params.put("localState", localState);
        params.put("entityState", localState);
        /**
         * Get Entity Value and its column no for invoice
         */
        fieldparams.put(Constants.filter_names, Arrays.asList(Constants.companyid, Constants.moduleid, "fieldname"));
        fieldparams.put(Constants.filter_values, Arrays.asList(companyId, Constants.Acc_Vendor_Invoice_ModuleId, "Custom_" + Constants.ENTITY));
        String fieldid = "";
        kwlReturnObjectGstCust = fieldManagerDAOobj.getFieldParams(fieldparams);
        fieldParamses = kwlReturnObjectGstCust.getEntityList();
        for (FieldParams fieldParams : fieldParamses) {
            colnum = fieldParams.getColnum();
            fieldid = fieldParams.getId();
        }
        String entityValue = params.optString("entity");
        String ids = fieldManagerDAOobj.getIdsUsingParamsValueWithoutInsert(fieldid, entityValue);
        reqParams.put("invoiceentitycolnum", colnum);
        reqParams.put("invoiceentityValue", ids);
        fieldparams.put(Constants.filter_names, Arrays.asList(Constants.companyid, Constants.moduleid, "fieldname"));
        fieldparams.put(Constants.filter_values, Arrays.asList(companyId, Constants.Acc_Make_Payment_ModuleId, "Custom_" + Constants.ENTITY));
        kwlReturnObjectGstCust = fieldManagerDAOobj.getFieldParams(fieldparams);
        fieldParamses = kwlReturnObjectGstCust.getEntityList();
        for (FieldParams fieldParams : fieldParamses) {
            colnum = fieldParams.getColnum();
            fieldid = fieldParams.getId();
        }
        ids = fieldManagerDAOobj.getIdsUsingParamsValueWithoutInsert(fieldid, entityValue);
        reqParams.put("paymententitycolnum", colnum);
        reqParams.put("paymententityValue", ids);
        fieldparams.put(Constants.filter_names, Arrays.asList(Constants.companyid, Constants.moduleid, "fieldname"));
        fieldparams.put(Constants.filter_values, Arrays.asList(companyId, Constants.Acc_Debit_Note_ModuleId, "Custom_" + Constants.ENTITY));
        kwlReturnObjectGstCust = fieldManagerDAOobj.getFieldParams(fieldparams);
        fieldParamses = kwlReturnObjectGstCust.getEntityList();
        for (FieldParams fieldParams : fieldParamses) {
            colnum = fieldParams.getColnum();
            fieldid = fieldParams.getId();
        }
        ids = fieldManagerDAOobj.getIdsUsingParamsValueWithoutInsert(fieldid, entityValue);
        reqParams.put("cnentitycolnum", colnum);
        reqParams.put("cnentityValue", ids);

        fieldparams.put(Constants.filter_names, Arrays.asList(Constants.companyid, Constants.moduleid, "fieldname"));
        fieldparams.put(Constants.filter_values, Arrays.asList(companyId, Constants.Acc_GENERAL_LEDGER_ModuleId, "Custom_" + Constants.ENTITY));
        kwlReturnObjectGstCust = fieldManagerDAOobj.getFieldParams(fieldparams);
        fieldParamses = kwlReturnObjectGstCust.getEntityList();
        for (FieldParams fieldParams : fieldParamses) {
            colnum = fieldParams.getColnum();
            fieldid = fieldParams.getId();
        }
        ids = fieldManagerDAOobj.getIdsUsingParamsValueWithoutInsert(fieldid, entityValue);
        reqParams.put("jeentitycolnum", colnum);
        reqParams.put("jeentityValue", ids);
        
        fieldparams.put(Constants.filter_names, Arrays.asList(Constants.companyid, Constants.moduleid, "fieldname"));
        fieldparams.put(Constants.filter_values, Arrays.asList(companyId, Constants.Acc_Credit_Note_ModuleId, "Custom_" + Constants.ENTITY));
        kwlReturnObjectGstCust = fieldManagerDAOobj.getFieldParams(fieldparams);
        fieldParamses = kwlReturnObjectGstCust.getEntityList();
        for (FieldParams fieldParams : fieldParamses) {
            colnum = fieldParams.getColnum();
            fieldid = fieldParams.getId();
        }
        ids = fieldManagerDAOobj.getIdsUsingParamsValue(fieldid, entityValue);
        reqParams.put("cnentitycolnum", colnum);
        reqParams.put("cnentityValue", ids);
        reqParams.put("Report_type","gstr2");
        reqParams.put("isGSTR1",false);
        try {
            /**
             * Put Asset Disposal/ Acquire Invoice Dimension column number
             * details
             */
            putAssetInvoiceDimensionColumnDetails(params, reqParams);
            /**
             * Put Lease Sales Invoice Dimension column number details
             */
            putLeaseInvoiceDimensionColumnDetails(params, reqParams);
            getColumnModelForGSTSummary(jarrRecords, jarrColumns, params);
                        
            JSONObject header= new JSONObject();
            header.put("typeofinvoice", "<b>" + GSTRConstants.GSTR2_ToBeReconciledWithTheGSTPortal + "</b>");
            params.put("isViewRenderer", false);
            dataJArr.put(header);
            
            reqParams.put("entitycolnum", reqParams.optString("invoiceentitycolnum"));
            reqParams.put("entityValue", reqParams.optString("invoiceentityValue"));
            /**
             * Add Additional parameter to reqParams
             */
            params = new JSONObject(reqParams, JSONObject.getNames(reqParams));
            params.put("registrationType", Constants.GSTRegType_Regular + "," + Constants.GSTRegType_Regular_ECommerce);
            params.put("CustomerType", Constants.CUSTVENTYPE_NA + "," + Constants.CUSTVENTYPE_DEEMED_EXPORT + "," + Constants.CUSTVENTYPE_SEZ+ "," + Constants.CUSTVENTYPE_SEZWOPAY);
            params.put("taxClassType", FieldComboData.TaxClass_Percenatge);
//            params.put("zerorated", false);
            params.put("typeofjoinisleft", true);
            params.put("typeofinvoice", GSTRConstants.GSTR2_B2B);
            JSONObject b2bobj = getB2BInvoiceDetails(params, null);
            JSONObject B2B = new JSONObject();
            B2B = b2bobj.getJSONArray("summaryArr").getJSONObject(0);
            dataJArr.put(B2B);
              
            /**
             * CDN Invoices
             */
            params = new JSONObject(reqParams, JSONObject.getNames(reqParams));
            params.put("entitycolnum", reqParams.optString("cnentitycolnum"));
            params.put("registrationType",Constants.GSTRegType_Regular+","+Constants.GSTRegType_Regular_ECommerce);
            params.put("entityValue", reqParams.optString("cnentityValue"));
            params.put("typeofinvoice", GSTRConstants.GSTR2_CDN);
            JSONObject cdnrobj = getCDNRInvoiceDetails(params, null);
            JSONObject CDNR = new JSONObject();
            CDNR = cdnrobj.getJSONArray("summaryArr").getJSONObject(0);
            dataJArr.put(CDNR);

                        
            JSONObject header1= new JSONObject();
            header1.put("typeofinvoice", "<b>" + GSTRConstants.GSTR2_ToBeUploadedOnTheGSTPortal + "</b>");
            dataJArr.put(header1);            
            /**
             * B2B Unregistered Invoice
             */
            params = new JSONObject(reqParams, JSONObject.getNames(reqParams));
            params.put("registrationType",Constants.GSTRegType_Unregistered);
            params.put("CustomerType", Constants.CUSTVENTYPE_NA + "," + Constants.CUSTVENTYPE_DEEMED_EXPORT + "," + Constants.CUSTVENTYPE_SEZ+ "," + Constants.CUSTVENTYPE_SEZWOPAY);
            params.put("taxClassType", FieldComboData.TaxClass_Percenatge);
//            params.put("zerorated", false);
            params.put("typeofjoinisleft", true);
            params.put("typeofinvoice", GSTRConstants.GSTR2_B2B_unregister);
            b2bobj = getB2BInvoiceDetails(params, null);
            B2B = new JSONObject();
            B2B = b2bobj.getJSONArray("summaryArr").getJSONObject(0);
            dataJArr.put(B2B);
            /**
             * Import of Services
             */
            params = new JSONObject(reqParams, JSONObject.getNames(reqParams));
            params.put("CustomerType", Constants.CUSTVENTYPE_Import);
//            params.put("taxClassType", FieldComboData.TaxClass_Percenatge);
            params.put("isServiceProduct", true);
            params.put("typeofinvoice", GSTRConstants.GSTR2_ImpServices);
            params.put(GSTRConstants.ADD_LANDEDCOST_JOIN_FOR_IMPORT_INVOICES, true);
            params.put("excludetaxClassType", true);
            params.put("typeofjoinisleft", true);
            JSONObject exportobj = getB2BInvoiceDetails(params, null);
            JSONObject EXPORT = new JSONObject();
            EXPORT = exportobj.getJSONArray("summaryArr").getJSONObject(0);
            dataJArr.put(EXPORT);
            /**
             * Import of Goods
             */
            params = new JSONObject(reqParams, JSONObject.getNames(reqParams));
            params.put("CustomerType", Constants.CUSTVENTYPE_Import);
//            params.put("taxClassType", FieldComboData.TaxClass_Percenatge);
            params.put("isServiceProduct", false);
            params.put("typeofinvoice", GSTRConstants.GSTR2_ImpGoods);
            params.put(GSTRConstants.ADD_LANDEDCOST_JOIN_FOR_IMPORT_INVOICES, true);
            params.put("typeofjoinisleft", true);
            params.put("excludetaxClassType", true);
            exportobj = getB2BInvoiceDetails(params, null);
            EXPORT = new JSONObject();
            EXPORT = exportobj.getJSONArray("summaryArr").getJSONObject(0);
            dataJArr.put(EXPORT);
           

            /**
             * CDN Unregistered
             */
            JSONObject CDNUR = new JSONObject();
            params = new JSONObject(reqParams, JSONObject.getNames(reqParams));
            params.put("entitycolnum", reqParams.optString("cnentitycolnum"));
            params.put("registrationType", Constants.GSTRegType_Unregistered);
            params.put("entityValue", reqParams.optString("cnentityValue"));
            params.put("typeofinvoice", GSTRConstants.GSTR2_CDN_unregister);
            JSONObject cdnurobj = getCDNRInvoiceDetails(params, null);
            CDNUR = new JSONObject();
            CDNUR = cdnurobj.getJSONArray("summaryArr").getJSONObject(0);
            dataJArr.put(CDNUR);

            /**
             * NIL Rated
             */
            
            params = new JSONObject(reqParams, JSONObject.getNames(reqParams));
            params.put("goodsreceiptentitycolnum", reqParams.optString("invoiceentitycolnum"));
            params.put("goodsreceiptentityValue", reqParams.optString("invoiceentityValue"));
            params.put("entitycolnum", reqParams.optString("invoiceentitycolnum"));
            params.put("entityValue", reqParams.optString("invoiceentityValue"));
            params.put("typeofinvoice", GSTRConstants.GSTR2_nilRated);
            params.put("registrationType", Constants.GSTRegType_Composition);
            params.put("typeofjoinisleft", true);
            JSONObject exemptComposition = getExemptPurchaseInvoiceDetails(params);
            JSONObject exempComp = exemptComposition.getJSONArray("summaryArr").getJSONObject(0);
            double sumTaxableAmt= 0.0,sumTotalAmt=0.0;
            int noOfInvoices=0;
            sumTaxableAmt = exempComp.optDouble("sumTaxableAmt");
            sumTotalAmt = exempComp.optDouble("sumTotalAmt");
            noOfInvoices=exempComp.optInt("numberofinvoices");
            params.remove("registrationType");
            params.put("taxClassType", FieldComboData.TaxClass_Exempted + "," + FieldComboData.TaxClass_Non_GST_Product);
            params.put("typeofjoinisleft", true);
            exportobj = getExemptPurchaseInvoiceDetails(params);
            JSONObject EXEMPT = new JSONObject();
            EXEMPT = exportobj.getJSONArray("summaryArr").getJSONObject(0);
            sumTaxableAmt += EXEMPT.optDouble("sumTaxableAmt");
            sumTotalAmt += EXEMPT.optDouble("sumTotalAmt");
            noOfInvoices += EXEMPT.optInt("numberofinvoices");
            /**
             * For Product Tax Class 0%
             */
            params.put("taxClassType", FieldComboData.TaxClass_ZeroPercenatge);
            params.put("typeofjoinisleft", true);
            params.put(GSTRConstants.IS_PRODUCT_TAX_ZERO, true);
            exportobj = getExemptPurchaseInvoiceDetails(params);
            params.remove(GSTRConstants.IS_PRODUCT_TAX_ZERO);
            EXEMPT = new JSONObject();
            EXEMPT = exportobj.getJSONArray("summaryArr").getJSONObject(0);
            sumTaxableAmt += EXEMPT.optDouble("sumTaxableAmt");
            sumTotalAmt += EXEMPT.optDouble("sumTotalAmt");
            noOfInvoices += EXEMPT.optInt("numberofinvoices");
            
            EXEMPT.put("sumTaxableAmt", sumTaxableAmt);
            EXEMPT.put("sumTotalAmt",sumTotalAmt);
            EXEMPT.put("numberofinvoices", noOfInvoices);
            dataJArr.put(EXEMPT);

//            JSONObject summaryObj = new JSONObject();
//            summaryObj.put("numberofinvoices", 0);
//            summaryObj.put("typeofinvoice", "ISD Credit");
//            summaryObj.put("sumTaxableAmt", 0);
//            summaryObj.put("sumTaxAmt", 0);
//            summaryObj.put("sumTotalAmt", 0);
//            dataJArr.put(summaryObj);

            params = new JSONObject(reqParams, JSONObject.getNames(reqParams));
            params.put("entitycolnum", reqParams.optString("paymententitycolnum"));
            params.put("entityValue", reqParams.optString("paymententityValue"));
            params.put("typeofinvoice", GSTRConstants.GSTR2_AdvancePaid);
            JSONObject atobj = getTaxLiabilityOnAdvance(params);
            JSONObject AT = new JSONObject();
            AT = atobj.getJSONArray("summaryArr").getJSONObject(0);
            dataJArr.put(AT);
            params.put("typeofinvoice", GSTRConstants.GSTR2_AdvanceAdjust);
            JSONObject atadjobj = getAdjustedAdvance(params);
            JSONObject ATADJ = new JSONObject();
            ATADJ = atadjobj.getJSONArray("summaryArr").getJSONObject(0);
            dataJArr.put(ATADJ);
//
//            summaryObj = new JSONObject();
//            summaryObj.put("numberofinvoices", 0);
//            summaryObj.put("typeofinvoice", "ITC Reversal");
//            summaryObj.put("sumTaxableAmt", 0);
//            summaryObj.put("sumTaxAmt", 0);
//            summaryObj.put("sumTotalAmt", 0);
//            dataJArr.put(summaryObj);
//            /**
//             * HSN summary of Inward supplies
//             */
//            params = new JSONObject(reqParams, JSONObject.getNames(reqParams));
//            params.put("entitycolnum", reqParams.optString("invoiceentitycolnum"));
//            params.put("entityValue", reqParams.optString("invoiceentityValue"));
//            params.put("typeofinvoice", "HSN summary of Inward supplies");
//            exportobj = getHSNSummarydetails(params);
//            EXPORT = new JSONObject();
//            EXPORT = exportobj.getJSONArray("summaryArr").getJSONObject(0);
//            dataJArr.put(EXPORT);

            JSONArray pagedJson = new JSONArray();
            pagedJson = dataJArr;
            if (!StringUtil.isNullOrEmpty(start) && !StringUtil.isNullOrEmpty(limit)) {
                pagedJson = StringUtil.getPagedJSON(pagedJson, Integer.parseInt(start), Integer.parseInt(limit));
            }
            object.put("totalCount", dataJArr.length());
            object.put("columns", jarrColumns);
            object.put("coldata", pagedJson);
            jMeta.put("totalProperty", "totalCount");
            jMeta.put("root", "coldata");
            jMeta.put("fields", jarrRecords);
            object.put("metaData", jMeta);
            if (params.optBoolean("isExport")) {
                object.put("data", dataJArr);
                object.put("columns", jarrColumns);
            }
        } catch (JSONException ex) {
            throw ServiceException.FAILURE(ex.getMessage(), ex);
        }
        return object;
    }
    /**
     * @Description - To get Business to Business invoice details with summation
     * of taxable amount and taxes at Invoice level as well as computation of
     * B2B summary for GSTR1 at B2B level
     * @param params
     * @return
     * @throws ServiceException
     * @throws JSONException
     */
    public JSONObject getB2BInvoiceDetails(JSONObject params, Map<String,JSONObject> mapForGSTR2A) throws ServiceException, JSONException {
        String companyId = params.optString("companyid");
        JSONObject jobject = new JSONObject();
        JSONArray columnDataArr = new JSONArray();
        JSONArray b2bArr = new JSONArray();
        JSONObject summaryb2bObj = new JSONObject();
        JSONArray summaryArr = new JSONArray();
        JSONObject invwithgstn = new JSONObject();
        String typeofinvoice = GSTRConstants.B2B;
        if (params.has("isPurchase") && params.optBoolean("isPurchase")) {
            invwithgstn = gSTR2Service.getB2BInvoices(params);
            typeofinvoice=params.optString("typeofinvoice");
        } else {
            invwithgstn = gSTR1DeskeraServiceDao.getB2BInvoices(params);
        }
        String idate = "";
        String invNum = "";
        String Gstin = "";
        String place = "";
        String ecomGstin="";
        String supplierName="";
        String customerName="";
        String supplierInvNo="";
        int noOfInvoices = 0;
        double sumTaxableAmt = 0.0;
        double sumTaxAmt = 0.0;
        double sumigstAmt = 0.0;
        double sumcgstAmt = 0.0;
        double sumsgstAmt = 0.0;
        double sumcessAmt = 0.0;
        double sumTotalAmt = 0.0;
        b2bArr = invwithgstn.getJSONArray("b2b");
        for (int i = 0; i < b2bArr.length(); i++) {
          
            JSONObject inv = b2bArr.getJSONObject(i);
            Gstin = inv.getString("ctin");
            JSONArray invArr = inv.getJSONArray("inv");
            for (int j = 0; j < invArr.length(); j++) {
                double taxableAmtInv = 0.0;
                double totalTax = 0.0;
                double totalAmt = 0.0; 
                double cess = 0.0; 
                double igstAmt = 0.0;
                double cgstAmt = 0.0;
                double sgstAmt = 0.0;
                JSONObject columnData = new JSONObject();
                JSONObject Itms = invArr.getJSONObject(j);
                noOfInvoices++;
                JSONArray itmsArr = Itms.getJSONArray("itms");
                idate = Itms.getString("idt");
                invNum = Itms.getString("inum");
                place = Itms.getString("pos");
                customerName=Itms.optString("customerName");
                //Determine whether the supplier is Inter-State or Intra-State (Comparing with local State of Entity)
                if(!StringUtil.isNullOrEmpty(place) && place.equals(params.optString("entityState"))){
                    columnData.put("supplierType","Intra-State");
                }else{
                    columnData.put("supplierType","Inter-State");
                }
                ecomGstin=Itms.getString("etin");
                supplierName=Itms.optString("vendorname");
                supplierInvNo=Itms.optString("supplierinvoiceno");
                for (int k = 0; k < itmsArr.length(); k++) {
                    JSONObject itmsDetail = itmsArr.getJSONObject(k);
                    JSONObject ItmsDetail = itmsDetail.getJSONObject("itm_det");
                    Double cgst = ItmsDetail.optDouble("camt");
                    Double sgst = ItmsDetail.optDouble("samt");
                    Double igst = ItmsDetail.optDouble("iamt");
                    Double csgst = ItmsDetail.optDouble("csamt");
                    cess += csgst;
                    igstAmt+=igst;
                    sgstAmt+=sgst;
                    cgstAmt+=cgst;
//                    if (ItmsDetail.optDouble("rt") != 0.0) {
                        taxableAmtInv += ItmsDetail.optDouble("txval");
                        totalTax += (cgst + sgst + igst + csgst);
                        sumigstAmt +=igst;
                        sumcgstAmt +=cgst;
                        sumsgstAmt +=sgst;
                        sumcessAmt +=csgst;
//                }
                }
                totalAmt = (taxableAmtInv + totalTax);
                columnData.put("supplierName",supplierName);
                columnData.put("taxableAmt", authHandler.formattedAmount(taxableAmtInv, companyId));
                columnData.put("totalTax", authHandler.formattedAmount(totalTax, companyId));
                columnData.put("totalAmt", authHandler.formattedAmount(totalAmt, companyId));
                columnData.put("date", idate);
                columnData.put("invNum", invNum);
                columnData.put("cess", authHandler.formattedAmount(cess, companyId));
                columnData.put("igstamt", authHandler.formattedAmount(igstAmt, companyId));
                columnData.put("sgstamt", authHandler.formattedAmount(sgstAmt, companyId));
                columnData.put("cgstamt", authHandler.formattedAmount(cgstAmt, companyId));
                columnData.put("gstin", Gstin);
                columnData.put("placeofsupply", place);
                columnData.put("customername",customerName);
                columnData.put(GSTRConstants.supplierinvoiceno, Itms.optString(GSTRConstants.supplierinvoiceno, ""));
                columnData.put(GSTRConstants.vendorname, Itms.optString(GSTRConstants.vendorname, ""));
                columnData.put(GSTRConstants.invoiceid, Itms.optString("invoiceId", ""));
                columnData.put("ecomoperator", ecomGstin);
                columnData.put("gstrsubmissionid",Itms.optString("gstrsubmissionid", ""));
                columnData.put("submissionstatus", Itms.optString("submissionstatus", ""));
                columnDataArr.put(columnData);
                if (mapForGSTR2A != null) {
                    mapForGSTR2A.put(Gstin + GSTRConstants.separator + Itms.optString(GSTRConstants.supplierinvoiceno, ""), columnData);
                }
                sumTaxableAmt += taxableAmtInv;
                sumTaxAmt += totalTax;
                sumTotalAmt += totalAmt;
            }
        }
        summaryb2bObj.put("numberofinvoices", noOfInvoices);
        if (params.optBoolean("isGSTR1")) {
            /**
             * code execute for GSTR1 report to show particulars in bold
             */
            summaryb2bObj.put("typeofinvoice", "<b>" + typeofinvoice + "<b>");
        } else {
            summaryb2bObj.put("typeofinvoice", typeofinvoice);
        }
        summaryb2bObj.put("igstamt", authHandler.formattedAmount(sumigstAmt, companyId));
        summaryb2bObj.put("sgstamt", authHandler.formattedAmount(sumsgstAmt, companyId));
        summaryb2bObj.put("cgstamt", authHandler.formattedAmount(sumcgstAmt, companyId));
        summaryb2bObj.put("cessamt", authHandler.formattedAmount(sumcessAmt, companyId));
        summaryb2bObj.put("sumTaxableAmt", authHandler.formattedAmount(sumTaxableAmt, companyId));
        summaryb2bObj.put("sumTaxAmt", authHandler.formattedAmount(sumTaxAmt, companyId));
        summaryb2bObj.put("sumTotalAmt", authHandler.formattedAmount(sumTotalAmt, companyId));
        summaryArr.put(summaryb2bObj);
        jobject.put("summaryArr", summaryArr);
        jobject.put("data", columnDataArr);

        return jobject;
    }

    /**
     * @Description - To get Business to Consumer(Large)i.e.whose turnover is
     * more than 2.5 lakh invoice details with summation of taxable amount and
     * taxes at Invoice level as well as computation of B2CL summary for GSTR1
     * at B2CL level
     * @param params
     * @return
     * @throws ServiceException
     * @throws JSONException
     */
    public JSONObject getB2ClInvoiceDetails(JSONObject params) throws ServiceException, JSONException {
        String companyId=params.optString("companyid");
        JSONObject jobject = new JSONObject();
        JSONArray columnB2ClArr = new JSONArray();
        JSONArray b2bArr = new JSONArray();
        JSONObject summaryObj = new JSONObject();
        JSONArray summaryArr = new JSONArray();
        JSONObject B2CL = gSTR1DeskeraServiceDao.getB2CLInvoices(params);
        String invdate = "";
        String invNumber = "";
        String GSTIN = "";
        String place = "";
        String ecomGstin="";
        String customerName="";
        int noOfInvoices = 0;
        String typeofinvoice = GSTRConstants.B2CL;
        double sumTaxableAmt = 0.0;
        double sumTaxAmt = 0.0;
        double sumTotalAmt = 0.0;
        double totalTax = 0.0;
        double totalAmt = 0.0;
        double sumigstAmt = 0.0;
        double sumcgstAmt = 0.0;
        double sumsgstAmt = 0.0;
        double sumcessAmt = 0.0;
        double taxableAmtInv = 0.0;
        b2bArr = B2CL.getJSONArray("b2cl");
        for (int i = 0; i < b2bArr.length(); i++) {
            double cess = 0.0;
            JSONObject inv = b2bArr.getJSONObject(i);
            GSTIN = inv.optString("ctin");
            JSONArray invArr = inv.getJSONArray("inv");
            noOfInvoices += invArr.length();
            for (int j = 0; j < invArr.length(); j++) {
                totalTax = 0.0;
                totalAmt = 0.0;
                taxableAmtInv = 0.0;
                double igstAmt = 0.0;
                double cgstAmt = 0.0;
                double sgstAmt = 0.0;
                JSONObject columnData = new JSONObject();
                JSONObject Itms = invArr.getJSONObject(j);
                JSONArray itmsArr = Itms.getJSONArray("itms");
                invdate = Itms.getString("idt");
                invNumber = Itms.getString("inum");
                place = Itms.getString("pos");
                ecomGstin=Itms.getString("etin");
                customerName=Itms.optString("customerName");
                for (int k = 0; k < itmsArr.length(); k++) {
                    JSONObject itmsDetail = itmsArr.getJSONObject(k);
                    JSONObject ItmsDetail = itmsDetail.getJSONObject("itm_det");
                    Double cgst = ItmsDetail.optDouble("camt");
                    Double sgst = ItmsDetail.optDouble("samt");
                    Double igst = ItmsDetail.optDouble("iamt");
                    Double csgst = ItmsDetail.optDouble("csamt");
                    cess += csgst;
                    igstAmt += igst;
                    sgstAmt += sgst;
                    cgstAmt += cgst;
                    taxableAmtInv += ItmsDetail.optDouble("txval");
                    totalTax += (cgst + sgst + igst + csgst);
                    sumigstAmt += igst;
                    sumcgstAmt += cgst;
                    sumsgstAmt += sgst;
                    sumcessAmt += csgst;
                }
                totalAmt = (taxableAmtInv + totalTax);
                columnData.put("taxableAmt", authHandler.formattedAmount(taxableAmtInv, companyId));
                columnData.put("totalTax", authHandler.formattedAmount(totalTax, companyId));
                columnData.put("totalAmt", authHandler.formattedAmount(totalAmt, companyId));
                columnData.put("date", invdate);
                columnData.put("invNum", invNumber);
                columnData.put("igstamt", authHandler.formattedAmount(igstAmt, companyId));
                columnData.put("sgstamt", authHandler.formattedAmount(sgstAmt, companyId));
                columnData.put("cgstamt", authHandler.formattedAmount(cgstAmt, companyId));
                columnData.put("cess", authHandler.formattedAmount(cess, companyId));
                columnData.put("gstin", GSTIN);
                columnData.put("placeofsupply", place);
                columnData.put("ecomoperator",ecomGstin);
                columnData.put("customername",customerName);
                columnB2ClArr.put(columnData);
                sumTaxableAmt += taxableAmtInv;
                sumTaxAmt += totalTax;
                sumTotalAmt += totalAmt;
            }
        }
        summaryObj.put("numberofinvoices", noOfInvoices);
        summaryObj.put("typeofinvoice", "<b>"+typeofinvoice+"<b>");
        summaryObj.put("igstamt", authHandler.formattedAmount(sumigstAmt, companyId));
        summaryObj.put("sgstamt", authHandler.formattedAmount(sumsgstAmt, companyId));
        summaryObj.put("cgstamt", authHandler.formattedAmount(sumcgstAmt, companyId));
        summaryObj.put("cessamt", authHandler.formattedAmount(sumcessAmt, companyId));
        summaryObj.put("sumTaxableAmt", authHandler.formattedAmount(sumTaxableAmt, companyId));
        summaryObj.put("sumTaxAmt", authHandler.formattedAmount(sumTaxAmt, companyId));
        summaryObj.put("sumTotalAmt", authHandler.formattedAmount(sumTotalAmt, companyId));
        summaryArr.put(summaryObj);
        jobject.put("summaryArr", summaryArr);
        jobject.put("data", columnB2ClArr);
        return jobject;
    }
    

    /**
     * @Description - To get Business to Consumer(Small)i.e.whose turnover is
     * less than 2.5 lakh invoice details with summation of taxable amount and
     * taxes at Invoice level as well as computation of B2CS summary for GSTR1
     * at B2CS level
     * @param params
     * @return
     * @throws ServiceException
     * @throws JSONException
     */

    public JSONObject getB2CSInvoiceDetails(JSONObject params) throws ServiceException, JSONException {
        String companyId = params.optString("companyid");
        JSONObject jobject = new JSONObject();
        JSONArray columnB2CSArr = new JSONArray();
        JSONArray b2csArr = new JSONArray();
        JSONObject summaryObj = new JSONObject();
        JSONArray summaryArr = new JSONArray();
        JSONObject B2CS = gSTR1DeskeraServiceDao.getB2CSInvoices(params);
        String invdate = "";
        String invNumber = "";
        String gstin = "";
        String type = "";
        String place = "";
        String EcomNo="";
        String customerName="";
        int noOfInvoices = 0;
        String typeofinvoice = GSTRConstants.B2CS;
        double sumTaxableAmt = 0.0;
        double sumTaxAmt = 0.0;
        double sumTotalAmt = 0.0;
        double sumigstAmt = 0.0;
        double sumcgstAmt = 0.0;
        double sumsgstAmt = 0.0;
        double sumcessAmt = 0.0;
        b2csArr = B2CS.getJSONArray("b2cs");
        Map<String, JSONArray> invoiceMap = AccountingManager.getSortedArrayMapBasedOnJSONAttribute(b2csArr, "invid");
        for (String invkey : invoiceMap.keySet()) {
            JSONArray invDetailArr = invoiceMap.get(invkey);
            double cess = 0.0;
            double taxableAmt = 0.0;
            double taxableAmtInv = 0.0;
            double totCGST = 0.0;
            double totSGST = 0.0;
            double totIGST = 0.0;
            for (int dindex = 0; dindex < invDetailArr.length(); dindex++) {
                JSONObject inv = invDetailArr.getJSONObject(dindex);
                EcomNo = inv.optString("etin");
                invdate=inv.optString("idt");
                invNumber=inv.optString("inum");
                type = inv.getString("doctype");
                gstin=inv.getString("gstin");
                customerName=inv.optString("customerName");
//            taxRate = inv.optDouble("rt");
                place = inv.getString("pos");
                Double cgst = inv.optDouble("camt");
                Double sgst = inv.optDouble("samt");
                Double igst = inv.optDouble("iamt");
                Double csgst = inv.optDouble("csamt");
                cess += csgst;
                taxableAmt += inv.optDouble("txval");
                totCGST += cgst;
                totSGST += sgst;
                totIGST += igst;
            }
            double totalTax = (totCGST + totSGST + totIGST + cess);
            JSONObject columnData = new JSONObject();
            sumigstAmt += totIGST;
            sumcgstAmt += totCGST;
            sumsgstAmt += totSGST;
            sumcessAmt += cess;
            sumTaxableAmt += taxableAmt;
            sumTaxAmt += totalTax;
            sumTotalAmt += taxableAmt + totalTax;
            columnData.put("taxableAmt", authHandler.formattedAmount(taxableAmt,companyId));
            columnData.put("totalTax", authHandler.formattedAmount(totalTax, companyId));
            columnData.put("totalAmt", authHandler.formattedAmount(taxableAmt + totalTax, companyId));
            columnData.put("date", invdate);
            columnData.put("invNum", invNumber);
            columnData.put("gstin", gstin);
            columnData.put("cess", authHandler.formattedAmount(cess, companyId));
            columnData.put("CGSTamount", authHandler.formattedAmount(totCGST, companyId));
            columnData.put("SGSTamount", authHandler.formattedAmount(totSGST, companyId));
            columnData.put("IGSTamount", authHandler.formattedAmount(totIGST, companyId));
            columnData.put("placeofsupply", place);
            columnData.put("customername",customerName);
//            columnData.put("rate", taxRate);
            columnData.put("type", type);
            columnData.put("etin", EcomNo);
            columnB2CSArr.put(columnData);
            noOfInvoices++;
        }
         if (params.optBoolean("isGSTR1")) {
            /**
             * code execute for GSTR1 report to show particulars in bold
             */
            summaryObj.put("typeofinvoice", "<b>" + typeofinvoice + "<b>");
        } else {
            summaryObj.put("typeofinvoice", typeofinvoice);
        }
        summaryObj.put("numberofinvoices", B2CS.optInt("count"));
        summaryObj.put("igstamt", (sumigstAmt));
        summaryObj.put("sgstamt", authHandler.formattedAmount(sumsgstAmt, companyId));
        summaryObj.put("cgstamt", authHandler.formattedAmount(sumcgstAmt, companyId));
        summaryObj.put("cessamt", authHandler.formattedAmount(sumcessAmt, companyId));
        summaryObj.put("sumTaxableAmt", (sumTaxableAmt));
        summaryObj.put("sumTaxAmt", authHandler.formattedAmount(sumTaxAmt, companyId));
        summaryObj.put("sumTotalAmt", authHandler.formattedAmount(sumTotalAmt, companyId));
        summaryArr.put(summaryObj);
        jobject.put("summaryArr", summaryArr);
        jobject.put("data", columnB2CSArr);
        return jobject;
    }

    /**
     * @Description - To get CDNR - Credit/Debit Note Return Details at Invoice
     * level
     * @param params
     * @return
     * @throws ServiceException
     * @throws JSONException
     */
    public JSONObject getCDNRInvoiceDetails(JSONObject params, Map<String,JSONObject> mapForGSTR2A) throws ServiceException, JSONException {
        String companyId = params.optString("companyid");
        JSONObject jobject = new JSONObject();
        JSONArray columnCDNRArr = new JSONArray();
        JSONArray cdnrArr = new JSONArray();
        JSONObject summaryObj = new JSONObject();
        JSONArray summaryArr = new JSONArray();
        JSONObject CDNR=new JSONObject();
        String typeofinvoice = GSTRConstants.CDNR;
        if (params.has("isPurchase") && params.optBoolean("isPurchase")) {
             CDNR = gSTR2Service.getCDNInvoices(params);
             typeofinvoice=params.optString("typeofinvoice");
        }else{
             CDNR = gSTR1DeskeraServiceDao.getCDNRInvoices(params);
        }
        
        String invdate = "";
        String invNumber = "";
        String type = "";
        String place = "";
        String Gstin = "";
        String invType = "";
        String originalDate = "";
        String originalInvNum = "";
        String supplierName="";
        String documentType="";
        String customerName="";
        int noOfInvoices = 0;
        double sumTaxableAmt = 0.0;
        double sumTaxAmt = 0.0;
        double sumTotalAmt = 0.0;
        double sumigstAmt = 0.0;
        double sumcgstAmt = 0.0;
        double sumsgstAmt = 0.0;
        double sumcessAmt = 0.0;
        cdnrArr = CDNR.optJSONArray("cndr");
        for (int cdnr = 0; cdnr < cdnrArr.length(); cdnr++) {
            double totalTax = 0.0;
            double totalAmt = 0.0;
            double cess = 0.0;
            double taxableAmtInv = 0.0;
            JSONObject jdata = cdnrArr.optJSONObject(cdnr);
            JSONArray invArr = jdata.optJSONArray("nt");
            Gstin = jdata.optString("ctin");
            noOfInvoices += invArr.length();
            for (int invoice = 0; invoice < invArr.length(); invoice++) {
                taxableAmtInv = 0.0;
                totalTax = 0.0;
                cess = 0.0;
                double igstAmt = 0.0;
                double cgstAmt = 0.0;
                double sgstAmt = 0.0;
                JSONObject columnData = new JSONObject();
                JSONObject Itms = invArr.optJSONObject(invoice);
                JSONArray itmsArr = Itms.optJSONArray("itms");
                invdate = Itms.optString("idt");
                invNumber = Itms.optString("inum");
                invType = Itms.optString("inv_typ");
                originalDate = Itms.optString("nt_dt");
                originalInvNum = Itms.optString("nt_num");
                String reason = Itms.optString("rsn");
                place = Itms.optString("pos");
                customerName=Itms.optString("customerName");
                 //Determine whether the supplier is Inter-State or Intra-State (Comparing with local State of Entity)
                if(!StringUtil.isNullOrEmpty(place) && place.equals(params.optString("entityState"))){
                    columnData.put("supplierType","Intra-State");
                }else{
                    columnData.put("supplierType","Inter-State");
                }
                supplierName=Itms.optString("vendorname");
                for (int k = 0; k < itmsArr.length(); k++) {
                    JSONObject itmsDetail = itmsArr.optJSONObject(k);
                    JSONObject ItmsDetail = itmsDetail.optJSONObject("itm_det");
                    Double cgst = ItmsDetail.optDouble("camt");
                    Double sgst = ItmsDetail.optDouble("samt");
                    Double igst = ItmsDetail.optDouble("iamt");
                    Double csgst = ItmsDetail.optDouble("csamt");
                    cess += csgst;
                    cgstAmt += cgst;
                    sgstAmt += sgst;
                    igstAmt += igst;
                    Double TaxableAmt = ItmsDetail.optDouble("txval");
                    totalTax += (cgst + sgst + igst + csgst);
                    sumigstAmt += igst;
                    sumcgstAmt += cgst;
                    sumsgstAmt += sgst;
                    sumcessAmt += csgst;
                    taxableAmtInv += TaxableAmt;
                }
                totalAmt=0.0;
                totalAmt += (taxableAmtInv + totalTax);
                columnData.put("documentType", "Credit Voucher");
                columnData.put("supplierName",supplierName);
                columnData.put("taxableAmt", authHandler.formattedAmount(taxableAmtInv, companyId));
                columnData.put("totalTax", authHandler.formattedAmount(totalTax, companyId));
                columnData.put("totalAmt", authHandler.formattedAmount(totalAmt, companyId));
                columnData.put("date", invdate);
                columnData.put("invNum", invNumber);
                columnData.put("invoicetype", invType);
                columnData.put("igstamt", authHandler.formattedAmount(igstAmt, companyId));
                columnData.put("sgstamt", authHandler.formattedAmount(sgstAmt, companyId));
                columnData.put("cgstamt", authHandler.formattedAmount(cgstAmt, companyId));
                columnData.put("gstin", Gstin);
                columnData.put("cess", authHandler.formattedAmount(cess, companyId));
                columnData.put("gstin", Gstin);
                columnData.put("placeofsupply", place);
                columnData.put("customername",customerName);
                columnData.put("originalinvoicedate", originalDate);
                columnData.put("originalinvoiceno", originalInvNum);
                columnData.put("gstrsubmissionid", Itms.optString("gstrsubmissionid", ""));
                columnData.put("submissionstatus", Itms.optString("submissionstatus", ""));
                columnData.put("reasondesc", reason);
                if (mapForGSTR2A != null) {
                    mapForGSTR2A.put(Gstin + GSTRConstants.separator + originalInvNum, columnData);
                }
                columnCDNRArr.put(columnData);
                sumTaxableAmt += taxableAmtInv;
                sumTaxAmt += totalTax;
                sumTotalAmt += totalAmt;
            }

        }
         if (params.optBoolean("isGSTR1")) {
            /**
             * code execute for GSTR1 report to show particulars in bold
             */
            summaryObj.put("typeofinvoice", "<b>" + typeofinvoice + "<b>");
        } else {
            summaryObj.put("typeofinvoice", typeofinvoice);
        }
        summaryObj.put("numberofinvoices", noOfInvoices);
        summaryObj.put("igstamt", authHandler.formattedAmount(sumigstAmt, companyId));
        summaryObj.put("sgstamt", authHandler.formattedAmount(sumsgstAmt, companyId));
        summaryObj.put("cgstamt", authHandler.formattedAmount(sumcgstAmt, companyId));
        summaryObj.put("cessamt", authHandler.formattedAmount(sumcessAmt, companyId));
        summaryObj.put("sumTaxableAmt", authHandler.formattedAmount(sumTaxableAmt, companyId));
        summaryObj.put("sumTaxAmt", authHandler.formattedAmount(sumTaxAmt, companyId));
        summaryObj.put("sumTotalAmt", authHandler.formattedAmount(sumTotalAmt, companyId));
        summaryArr.put(summaryObj);
        jobject.put("summaryArr", summaryArr);
        jobject.put("data", columnCDNRArr);
        return jobject;
    }

    /**
     * @Description - To get details CDNUR - Credit/ Debit Note for unregistered
     * Persons at Invoice level
     * @param params
     * @return
     * @throws ServiceException
     * @throws JSONException
     */
    public JSONObject getCDNURInvoiceDetails(JSONObject params) throws ServiceException, JSONException {
        String companyId=params.optString("companyid");
        JSONObject jobject = new JSONObject();
        JSONArray columnCDNRArr = new JSONArray();
        JSONArray cdnurArr = new JSONArray();
        JSONObject summaryObj = new JSONObject();
        JSONArray summaryArr = new JSONArray();
        JSONObject CDNR = gSTR1DeskeraServiceDao.getCDNURInvoices(params);
        String invdate = "";
        String invNumber = "";
        String type = "";
        String place = "";
        String Gstin = "";
        String invType = "";
        String originalDate = "";
        String originalInvNum = "";
        String customerName="";
        int noOfInvoices = 0;
        String typeofinvoice = GSTRConstants.CDNUR;
        double sumTaxableAmt = 0.0;
        double sumTaxAmt = 0.0;
        double sumTotalAmt = 0.0;
        double sumigstAmt = 0.0;
        double sumcgstAmt = 0.0;
        double sumsgstAmt = 0.0;
        double sumcessAmt = 0.0;
        cdnurArr = CDNR.optJSONArray("cdnur");
        for (int cdnur = 0; cdnur < cdnurArr.length(); cdnur++) {
            noOfInvoices = cdnurArr.length();
            double totalTax = 0.0;
            double totalAmt = 0.0;
            double totalAmtInv = 0.0;
            double cess = 0.0;
            double igstAmt = 0.0;
            double cgstAmt = 0.0;
            double sgstAmt = 0.0;
            double taxableAmt = 0.0;
            double taxableAmtInv = 0.0;
            JSONObject columnData = new JSONObject();
            JSONObject Itms = cdnurArr.optJSONObject(cdnur);
            JSONArray itmsArr = Itms.optJSONArray("itms");
            invdate = Itms.optString("idt");
            invNumber = Itms.optString("inum");
            invType = Itms.optString("inum");
            originalDate = Itms.optString("nt_dt");
            originalInvNum = Itms.optString("nt_num");
            String reason = Itms.optString("rsn");
            String pos= Itms.optString("pos");
            place=Itms.optString("pos");
            type = Itms.optString("typ");
            customerName=Itms.optString("customerName");
            for (int itms = 0; itms < itmsArr.length(); itms++) {
                JSONObject itmsDetail = itmsArr.optJSONObject(itms);
                JSONObject ItmsDetail = itmsDetail.optJSONObject("itm_det");
                Double cgst = ItmsDetail.optDouble("camt");
                Double sgst = ItmsDetail.optDouble("samt");
                Double igst = ItmsDetail.optDouble("iamt");
                Double csgst = ItmsDetail.optDouble("csamt");
                cess += csgst;
                cgstAmt += cgst;
                sgstAmt += sgst;
                igstAmt += igst;
                Double TaxableAmt = ItmsDetail.optDouble("txval");
                totalTax += (cgst + sgst + igst + csgst);
                sumigstAmt += igst;
                sumcgstAmt += cgst;
                sumsgstAmt += sgst;
                sumcessAmt += csgst;
                taxableAmtInv += TaxableAmt;
            }
            totalAmt += (taxableAmtInv + totalTax);
            sumTaxableAmt += taxableAmtInv;
            sumTaxAmt += totalTax;
            sumTotalAmt += totalAmt;
            columnData.put("taxableAmt", authHandler.formattedAmount(taxableAmtInv, companyId));
            columnData.put("totalTax", authHandler.formattedAmount(totalTax, companyId));
            columnData.put("totalAmt", authHandler.formattedAmount(totalAmt, companyId));
            columnData.put("date", invdate);
            columnData.put("invNum", invNumber);
            columnData.put("invoicetype", invType);
            columnData.put("igstamt", authHandler.formattedAmount(igstAmt, companyId));
            columnData.put("sgstamt", authHandler.formattedAmount(sgstAmt, companyId));
            columnData.put("cgstamt", authHandler.formattedAmount(cgstAmt, companyId));
            columnData.put("gstin", Gstin);
            columnData.put("cess", authHandler.formattedAmount(cess, companyId));
            columnData.put("gstin", Gstin);
            columnData.put("type", type);
            columnData.put("originalinvoicedate", originalDate);
            columnData.put("originalinvoiceno", originalInvNum);
            columnData.put("placeofsupply", pos);
            columnData.put("placeofsupply", place);
            columnData.put("customername",customerName);
            columnData.put("reasondesc", reason);
            columnCDNRArr.put(columnData);
        }
         if (params.optBoolean("isGSTR1")) {
            /**
             * code execute for GSTR1 report to show particulars in bold
             */
            summaryObj.put("typeofinvoice", "<b>" + typeofinvoice + "<b>");
        } else {
            summaryObj.put("typeofinvoice", typeofinvoice);
        }
        summaryObj.put("numberofinvoices", noOfInvoices);
        summaryObj.put("igstamt", authHandler.formattedAmount(sumigstAmt, companyId));
        summaryObj.put("sgstamt", authHandler.formattedAmount(sumsgstAmt, companyId));
        summaryObj.put("cgstamt", authHandler.formattedAmount(sumcgstAmt, companyId));
        summaryObj.put("cessamt", authHandler.formattedAmount(sumcessAmt, companyId));
        summaryObj.put("sumTaxableAmt", authHandler.formattedAmount(sumTaxableAmt, companyId));
        summaryObj.put("sumTaxAmt", authHandler.formattedAmount(sumTaxAmt, companyId));
        summaryObj.put("sumTotalAmt", authHandler.formattedAmount(sumTotalAmt, companyId));
        summaryArr.put(summaryObj);
        jobject.put("summaryArr", summaryArr);
        jobject.put("data", columnCDNRArr);
        return jobject;
    }

    /**
     * @Description - To get Invoice level details of Export type customers
     * @param params
     * @return
     * @throws ServiceException
     * @throws JSONException
     */
    public JSONObject getExportInvoiceDetails(JSONObject params) throws ServiceException, JSONException {
        String companyId=params.optString("companyid");
        JSONObject jobject = new JSONObject();
        JSONArray columnEXPORTArr = new JSONArray();
        JSONArray exportArr = new JSONArray();
        JSONObject summaryObj = new JSONObject();
        JSONArray summaryArr = new JSONArray();
        JSONObject EXPORT = gSTR1DeskeraServiceDao.getExportTypeInvoice(params);
        String invdate = "";
        String invNumber = "";
        String shipingPortCode = "";
        String shipingdate = "";
        String shipingnum = "";
        String place = "";
        String customerName="";
        int noOfInvoices = 0;
        String typeofinvoice = GSTRConstants.EXPORT;
        double sumTaxableAmt = 0.0;
        double sumTaxAmt = 0.0;
        double sumTotalAmt = 0.0;
        double sumigstAmt = 0.0;
        double sumcgstAmt = 0.0;
        double sumsgstAmt = 0.0;
        double sumcessAmt = 0.0;
        exportArr = EXPORT.optJSONArray("exp");
        for (int export = 0; export < exportArr.length(); export++) {
            double totalTax = 0.0;
            double totalAmt = 0.0;
            double totalAmtInv = 0.0;
            double cess = 0.0;
            double taxableAmtInv = 0.0;
            JSONObject inv = exportArr.optJSONObject(export);
            String exportType = inv.optString("ex_tp");
            JSONArray invArr = inv.optJSONArray("inv");
            for (int invoice = 0; invoice < invArr.length(); invoice++) {
                taxableAmtInv = 0.0;
                totalTax = 0.0;
                cess = 0.0;
                double igstAmt = 0.0;
                double cgstAmt = 0.0;
                double sgstAmt = 0.0;
                JSONObject columnData = new JSONObject();
                JSONObject Itms = invArr.optJSONObject(invoice);
                noOfInvoices++;
                JSONArray itmsArr = Itms.optJSONArray("itms");
                invNumber = Itms.optString("inum");
                invdate = Itms.optString("idt");
                place = Itms.optString("pos");
                customerName=Itms.optString("customerName");
                shipingPortCode = Itms.optString("sbpcode");
                shipingdate = Itms.optString("sbdt");
                shipingnum = Itms.optString("sbnum");
                for (int k = 0; k < itmsArr.length(); k++) {
                    JSONObject itmsDetail = itmsArr.optJSONObject(k);
                    JSONObject ItmsDetail = itmsDetail.optJSONObject("itm_det");
                    Double cgst = ItmsDetail.optDouble("camt");
                    Double sgst = ItmsDetail.optDouble("samt");
                    Double igst = ItmsDetail.optDouble("iamt");
                    Double csgst = ItmsDetail.optDouble("csamt");
                    cess += csgst;
                    igstAmt+=igst;
                    sgstAmt+=sgst;
                    cgstAmt+=cgst;
                    Double TaxableAmt = ItmsDetail.optDouble("txval");
                    totalTax += (cgst + sgst + igst + csgst);
                    sumigstAmt += igst;
                    sumcgstAmt += cgst;
                    sumsgstAmt += sgst;
                    sumcessAmt += csgst;
                    taxableAmtInv += TaxableAmt;
                }
                totalAmt = 0.0;
                totalAmt += (taxableAmtInv + totalTax);
                columnData.put("exporttype", exportType);
                columnData.put("taxableAmt", authHandler.formattedAmount(taxableAmtInv, companyId));
                columnData.put("totalTax", authHandler.formattedAmount(totalTax, companyId));
                columnData.put("totalAmt", authHandler.formattedAmount(totalAmt, companyId));
                columnData.put("date", invdate);
                columnData.put("invNum", invNumber);
                columnData.put("igstamt", authHandler.formattedAmount(igstAmt, companyId));
                columnData.put("sgstamt", authHandler.formattedAmount(sgstAmt, companyId));
                columnData.put("cgstamt", authHandler.formattedAmount(cgstAmt, companyId));
                columnData.put("shippingbillportcode", shipingPortCode);
                columnData.put("shipingnum", shipingnum);
                columnData.put("shipingdate", shipingdate);
                columnData.put("cess", authHandler.formattedAmount(cess, companyId));
                columnData.put("placeofsupply", place);
                columnData.put("customername",customerName);
                columnData.put("gstin","NA");
                columnEXPORTArr.put(columnData);
                sumTaxableAmt += taxableAmtInv;
                sumTaxAmt += totalTax;
                sumTotalAmt += totalAmt;
            }
        }
         if (params.optBoolean("isGSTR1")) {
            /**
             * code execute for GSTR1 report to show particulars in bold
             */
            summaryObj.put("typeofinvoice", "<b>" + typeofinvoice + "<b>");
        } else {
            summaryObj.put("typeofinvoice", typeofinvoice);
        }
        summaryObj.put("numberofinvoices", noOfInvoices);
        summaryObj.put("igstamt", authHandler.formattedAmount(sumigstAmt, companyId));
        summaryObj.put("sgstamt", authHandler.formattedAmount(sumsgstAmt, companyId));
        summaryObj.put("cgstamt", authHandler.formattedAmount(sumcgstAmt, companyId));
        summaryObj.put("cessamt", authHandler.formattedAmount(sumcessAmt, companyId));
        summaryObj.put("sumTaxableAmt", authHandler.formattedAmount(sumTaxableAmt, companyId));
        summaryObj.put("sumTaxAmt", authHandler.formattedAmount(sumTaxAmt, companyId));
        summaryObj.put("sumTotalAmt", authHandler.formattedAmount(sumTotalAmt, companyId));
        summaryArr.put(summaryObj);
        jobject.put("summaryArr", summaryArr);
        jobject.put("data", columnEXPORTArr);
        return jobject;
    }
/**
 * Function to get Invoice,CN,Refund,DN data for customer collectively.
 * @param reqParams
 * @return
 * @throws ServiceException
 * @throws JSONException 
 */
    public JSONObject combineInvoiceCNDNRefundForExemptDetails(JSONObject reqParams) throws ServiceException, JSONException {
        JSONObject retObject = new JSONObject();
        JSONArray dataArr = new JSONArray();
        JSONArray tempArr = new JSONArray();
        JSONObject jSONObject = getInvoiceForGSTR3BTaxable(reqParams);
        retObject.put("totalamount", retObject.optDouble("totalamount", 0) + jSONObject.optDouble("totalamount", 0));
        retObject.put("count", retObject.optInt("count", 0) + jSONObject.optInt("count", 0));
        tempArr = jSONObject.optJSONArray("data");
        if (tempArr != null && tempArr.length() > 0) {
            dataArr = StringUtil.concatJSONArray(dataArr, tempArr);
            tempArr = new JSONArray();
        }
        jSONObject = getCNForGSTR3BTaxable(reqParams);
        retObject.put("totalamount", retObject.optDouble("totalamount", 0) + jSONObject.optDouble("totalamount", 0));
        retObject.put("count", retObject.optInt("count", 0) + jSONObject.optInt("count", 0));
        tempArr = jSONObject.optJSONArray("data");
        if (tempArr != null && tempArr.length() > 0) {
            dataArr = StringUtil.concatJSONArray(dataArr, tempArr);
            tempArr = new JSONArray();
        }
        jSONObject = getDNAgainstSalesForGSTR3BTaxable(reqParams);
        retObject.put("totalamount", retObject.optDouble("totalamount", 0) + jSONObject.optDouble("totalamount", 0));
        retObject.put("count", retObject.optInt("count", 0) + jSONObject.optInt("count", 0));
        tempArr = jSONObject.optJSONArray("data");
        if (tempArr != null && tempArr.length() > 0) {
            dataArr = StringUtil.concatJSONArray(dataArr, tempArr);
            tempArr = new JSONArray();
        }
        return retObject.put("data", dataArr);
    }
    /**
     * @Description - To get details of Registered and Un-registered supplies on
     * Interstate and Intrastate of Exempt,Non-GST and Nil-rated Supplies
     * @param params
     * @return
     * @throws ServiceException
     * @throws JSONException
     */
    public JSONObject getExemptInvoiceDetails(JSONObject params) throws ServiceException, JSONException {
        JSONObject jobject = new JSONObject();
        JSONObject jSONObject = new JSONObject();
        JSONObject columnData = new JSONObject();
        JSONArray columnDataArr = new JSONArray();
        JSONObject summaryExeObj = new JSONObject();
        JSONArray summaryArr = new JSONArray();
        String start = params.optString("start");
        String limit = params.optString("limit");
        String companyId = params.optString("companyid");
        Company company = null;
        KwlReturnObject companyResult = null;
        companyResult = accountingHandlerDAOobj.getObject(Company.class.getName(), companyId);
        company = (Company) companyResult.getEntityList().get(0);
        // Inter-State supplies to registered persons
        columnData = new JSONObject();
        double NilIntrStTotal = 0.0;
        double ExemptIntrStTotal = 0.0;
        double NongstIntrStTotal = 0.0;
        double totalamount=0d;
        int noOfInvoices=0;
        /**
         * Json Array for Detail View
         */
        params.put("typeofjoinisleft", true);
        params.put(GSTR3BConstants.DETAILED_VIEW_REPORT, true);
        JSONArray nilRatedArr=new JSONArray();
        JSONArray exemptArr=new JSONArray();
        JSONArray nonGstArr=new JSONArray();
        JSONArray tempArr=new JSONArray();
        JSONArray finalDetailsArr=new JSONArray();
        JSONObject reqParams = new JSONObject(params, JSONObject.getNames(params));
        reqParams.put("registrationType", Constants.GSTRegType_Regular + "," + Constants.GSTRegType_Composition);
        reqParams.put("interstate", true);
        reqParams.put("CustomerType", Constants.CUSTVENTYPE_NA + "," + Constants.CUSTVENTYPE_SEZWOPAY+","+Constants.CUSTVENTYPE_SEZ);
//        reqParams.put("GST3B", true);
        reqParams.put("taxClassType", FieldComboData.TaxClass_ZeroPercenatge);
        reqParams.put("typeofjoinisleft", true);
        jSONObject = combineInvoiceCNDNRefundForExemptDetails(reqParams);
        NilIntrStTotal = jSONObject.optDouble("totalamount");
        totalamount +=NilIntrStTotal;
        noOfInvoices+=jSONObject.optInt("count");
        columnData.put("companyname", company.getCompanyName());
        columnData.put("description", "Inter-State supplies to registered persons");
        columnData.put("nilratedsupplies", authHandler.formattedAmount(NilIntrStTotal, companyId));
        tempArr = jSONObject.optJSONArray("data");
        if (tempArr != null && tempArr.length() > 0) {
            nilRatedArr = concatJSONArrayWithAmmendment(nilRatedArr, tempArr, "Nil Rated");
            tempArr = new JSONArray();
        }
        /**
         * Get Inter Exempted
         */
        reqParams = new JSONObject(params, JSONObject.getNames(params));
//        reqParams.put("GST3B", true);
        reqParams.put("taxClassType", FieldComboData.TaxClass_Exempted);
        reqParams.put("CustomerType", Constants.CUSTVENTYPE_NA + "," + Constants.CUSTVENTYPE_SEZWOPAY+","+Constants.CUSTVENTYPE_SEZ);
        reqParams.put("registrationType", Constants.GSTRegType_Regular + "," + Constants.GSTRegType_Composition);
        reqParams.put("interstate", true);
        jSONObject = combineInvoiceCNDNRefundForExemptDetails(reqParams);
        noOfInvoices+=jSONObject.optInt("count");
        ExemptIntrStTotal = jSONObject.optDouble("totalamount");
        totalamount +=ExemptIntrStTotal;
        columnData.put("exempted", authHandler.formattedAmount(ExemptIntrStTotal, companyId));
        tempArr = jSONObject.optJSONArray("data");
        if (tempArr != null && tempArr.length() > 0) {
            exemptArr = concatJSONArrayWithAmmendment(exemptArr, tempArr, "Exempt");
            tempArr = new JSONArray();
        }

        
        /**
         * Get Non GST - Inter
         */
        reqParams = new JSONObject(params, JSONObject.getNames(params));
//        reqParams.put("GST3B", true);
        reqParams.put("registrationType", Constants.GSTRegType_Regular + "," + Constants.GSTRegType_Composition);
        reqParams.put("interstate", true);
        reqParams.put("CustomerType", Constants.CUSTVENTYPE_NA + "," + Constants.CUSTVENTYPE_SEZWOPAY+","+Constants.CUSTVENTYPE_SEZ);
        reqParams.put("taxClassType", FieldComboData.TaxClass_Non_GST_Product);
        jSONObject = combineInvoiceCNDNRefundForExemptDetails(reqParams);
        noOfInvoices+=jSONObject.optInt("count");
        NongstIntrStTotal += jSONObject.optDouble("totalamount");
        totalamount +=NongstIntrStTotal;
        columnData.put("nongstsupplies", authHandler.formattedAmount(NongstIntrStTotal, companyId));
        columnDataArr.put(columnData);
        tempArr = jSONObject.optJSONArray("data");
        if (tempArr != null && tempArr.length() > 0) {
            nonGstArr = concatJSONArrayWithAmmendment(nonGstArr, tempArr, "Non GST");
            tempArr = new JSONArray();
        }
        
        
        /**
         * For Intra - Register Person
         */
        columnData = new JSONObject();
        NilIntrStTotal = 0.0;
        ExemptIntrStTotal = 0.0;
        NongstIntrStTotal = 0.0;
        reqParams = new JSONObject(params, JSONObject.getNames(params));
        reqParams.put("registrationType", Constants.GSTRegType_Regular + "," + Constants.GSTRegType_Composition);
        reqParams.put("intrastate", true);
//        reqParams.put("GST3B", true);
        reqParams.put("CustomerType", Constants.CUSTVENTYPE_NA + "," + Constants.CUSTVENTYPE_SEZWOPAY);
        reqParams.put("taxClassType", FieldComboData.TaxClass_ZeroPercenatge);
        reqParams.put("typeofjoinisleft", true);
        jSONObject = combineInvoiceCNDNRefundForExemptDetails(reqParams);
        noOfInvoices+=jSONObject.optInt("count");
        NilIntrStTotal = jSONObject.optDouble("totalamount");
        totalamount +=NilIntrStTotal;
        columnData.put("companyname", company.getCompanyName());
        columnData.put("description", "Intra-State supplies to registered persons");
        columnData.put("nilratedsupplies", authHandler.formattedAmount(NilIntrStTotal, companyId));
        tempArr = jSONObject.optJSONArray("data");
        if (tempArr != null && tempArr.length() > 0) {
            nilRatedArr = concatJSONArrayWithAmmendment(nilRatedArr, tempArr, "Nil Rated");
            tempArr = new JSONArray();
        }

        /**
         * Get Intra Exempted
         */
        reqParams = new JSONObject(params, JSONObject.getNames(params));
//        reqParams.put("GST3B", true);
        reqParams.put("taxClassType", FieldComboData.TaxClass_Exempted);
        reqParams.put("registrationType", Constants.GSTRegType_Regular + "," + Constants.GSTRegType_Composition);
        reqParams.put("intrastate", true);
        reqParams.put("CustomerType", Constants.CUSTVENTYPE_NA + "," + Constants.CUSTVENTYPE_SEZWOPAY);
        jSONObject = combineInvoiceCNDNRefundForExemptDetails(reqParams);
        noOfInvoices+=jSONObject.optInt("count");
        ExemptIntrStTotal = jSONObject.optDouble("totalamount");
        totalamount +=ExemptIntrStTotal;
        columnData.put("exempted", authHandler.formattedAmount(ExemptIntrStTotal, companyId));
        tempArr = jSONObject.optJSONArray("data");
        if (tempArr != null && tempArr.length() > 0) {
            exemptArr = concatJSONArrayWithAmmendment(exemptArr, tempArr, "Exempt");
            tempArr = new JSONArray();
        }


        /**
         * Get Non GST - Intra
         */
        reqParams = new JSONObject(params, JSONObject.getNames(params));
//        reqParams.put("GST3B", true);
        reqParams.put("registrationType", Constants.GSTRegType_Regular + "," + Constants.GSTRegType_Composition);
        reqParams.put("intrastate", true);
        reqParams.put("CustomerType", Constants.CUSTVENTYPE_NA + "," + Constants.CUSTVENTYPE_SEZWOPAY);
        reqParams.put("taxClassType", FieldComboData.TaxClass_Non_GST_Product);
        jSONObject = combineInvoiceCNDNRefundForExemptDetails(reqParams);
        noOfInvoices+=jSONObject.optInt("count");
        NongstIntrStTotal += jSONObject.optDouble("totalamount");
        totalamount +=NongstIntrStTotal;
        columnData.put("nongstsupplies", authHandler.formattedAmount(NongstIntrStTotal, companyId));
        columnDataArr.put(columnData);
        tempArr = jSONObject.optJSONArray("data");
        if (tempArr != null && tempArr.length() > 0) {
            nonGstArr = concatJSONArrayWithAmmendment(nonGstArr, tempArr, "Non GST");
            tempArr = new JSONArray();
        }


        
 /**
  * For Inter - Unregister
  */
        
         columnData = new JSONObject();
         NilIntrStTotal = 0.0;
         ExemptIntrStTotal = 0.0;
         NongstIntrStTotal = 0.0;
         reqParams = new JSONObject(params, JSONObject.getNames(params));
        reqParams.put("registrationType", Constants.GSTRegType_Unregistered + "," + Constants.GSTRegType_Consumer);
        reqParams.put("interstate", true);
//        reqParams.put("GST3B", true);
        reqParams.put("CustomerType", Constants.CUSTVENTYPE_NA + "," + Constants.CUSTVENTYPE_SEZWOPAY+","+Constants.CUSTVENTYPE_SEZ);
        reqParams.put("taxClassType", FieldComboData.TaxClass_ZeroPercenatge);
        reqParams.put("typeofjoinisleft", true);
        jSONObject = combineInvoiceCNDNRefundForExemptDetails(reqParams);
        noOfInvoices+=jSONObject.optInt("count");
        NilIntrStTotal = jSONObject.optDouble("totalamount");
        totalamount +=NilIntrStTotal;
        columnData.put("companyname", company.getCompanyName());
        columnData.put("description", "Inter-State supplies to unregistered persons");
        columnData.put("nilratedsupplies", authHandler.formattedAmount(NilIntrStTotal, companyId));
        tempArr = jSONObject.optJSONArray("data");
        if (tempArr != null && tempArr.length() > 0) {
            nilRatedArr = concatJSONArrayWithAmmendment(nilRatedArr, tempArr, "Nil Rated");
            tempArr = new JSONArray();
        }

        /**
         * Get Inter Exempted
         */
        reqParams = new JSONObject(params, JSONObject.getNames(params));
//        reqParams.put("GST3B", true);
        reqParams.put("taxClassType", FieldComboData.TaxClass_Exempted);
        reqParams.put("registrationType", Constants.GSTRegType_Unregistered + "," + Constants.GSTRegType_Consumer);
        reqParams.put("interstate", true);
        reqParams.put("CustomerType", Constants.CUSTVENTYPE_NA + "," + Constants.CUSTVENTYPE_SEZWOPAY+","+Constants.CUSTVENTYPE_SEZ);
        jSONObject = combineInvoiceCNDNRefundForExemptDetails(reqParams);
        noOfInvoices+=jSONObject.optInt("count");
        ExemptIntrStTotal = jSONObject.optDouble("totalamount");
        totalamount +=ExemptIntrStTotal;
        columnData.put("exempted", authHandler.formattedAmount(ExemptIntrStTotal, companyId));
         tempArr = jSONObject.optJSONArray("data");
        if (tempArr != null && tempArr.length() > 0) {
            exemptArr = concatJSONArrayWithAmmendment(exemptArr, tempArr, "Exempt");
            tempArr = new JSONArray();
        }

        
        /**
         * Get Non GST - Inter
         */
        reqParams = new JSONObject(params, JSONObject.getNames(params));
//        reqParams.put("GST3B", true);
        reqParams.put("registrationType", Constants.GSTRegType_Unregistered + "," + Constants.GSTRegType_Consumer);
        reqParams.put("interstate", true);
        reqParams.put("CustomerType", Constants.CUSTVENTYPE_NA + "," + Constants.CUSTVENTYPE_SEZWOPAY+","+Constants.CUSTVENTYPE_SEZ);
        reqParams.put("taxClassType", FieldComboData.TaxClass_Non_GST_Product);
        jSONObject = combineInvoiceCNDNRefundForExemptDetails(reqParams);
        noOfInvoices+=jSONObject.optInt("count");
        NongstIntrStTotal += jSONObject.optDouble("totalamount");
        totalamount +=NongstIntrStTotal;
        columnData.put("nongstsupplies", authHandler.formattedAmount(NongstIntrStTotal, companyId));
        columnDataArr.put(columnData);
        tempArr = jSONObject.optJSONArray("data");
        if (tempArr != null && tempArr.length() > 0) {
            nonGstArr = concatJSONArrayWithAmmendment(nonGstArr, tempArr, "Non GST");
            tempArr = new JSONArray();
        }

        
        /**
         * For Intra - UnRegister Person
         */
        columnData = new JSONObject();
        NilIntrStTotal = 0.0;
        ExemptIntrStTotal = 0.0;
        NongstIntrStTotal = 0.0;
        reqParams = new JSONObject(params, JSONObject.getNames(params));
        reqParams.put("registrationType", Constants.GSTRegType_Unregistered + "," + Constants.GSTRegType_Consumer);
        reqParams.put("intrastate", true);
//        reqParams.put("GST3B", true);
        reqParams.put("CustomerType", Constants.CUSTVENTYPE_NA + "," + Constants.CUSTVENTYPE_SEZWOPAY);
        reqParams.put("taxClassType", FieldComboData.TaxClass_ZeroPercenatge);
        reqParams.put("typeofjoinisleft", true);
        jSONObject = combineInvoiceCNDNRefundForExemptDetails(reqParams);
        noOfInvoices+=jSONObject.optInt("count");
        NilIntrStTotal = jSONObject.optDouble("totalamount");
        totalamount +=NilIntrStTotal;
        columnData.put("companyname", company.getCompanyName());
        columnData.put("description", "Intra-State supplies to unregistered persons");
        columnData.put("nilratedsupplies", authHandler.formattedAmount(NilIntrStTotal, companyId));
        tempArr = jSONObject.optJSONArray("data");
        if (tempArr != null && tempArr.length() > 0) {
            nilRatedArr = concatJSONArrayWithAmmendment(nilRatedArr, tempArr, "Nil Rated");
            tempArr = new JSONArray();
        }

        /**
         * Get Intra Exempted
         */
        reqParams = new JSONObject(params, JSONObject.getNames(params));
//        reqParams.put("GST3B", true);
        reqParams.put("taxClassType", FieldComboData.TaxClass_Exempted);
        reqParams.put("registrationType", Constants.GSTRegType_Unregistered + "," + Constants.GSTRegType_Consumer);
        reqParams.put("intrastate", true);
        reqParams.put("CustomerType", Constants.CUSTVENTYPE_NA + "," + Constants.CUSTVENTYPE_SEZWOPAY);
        jSONObject = combineInvoiceCNDNRefundForExemptDetails(reqParams);
        noOfInvoices+=jSONObject.optInt("count");
        ExemptIntrStTotal = jSONObject.optDouble("totalamount");
        totalamount +=ExemptIntrStTotal;
        columnData.put("exempted", authHandler.formattedAmount(ExemptIntrStTotal, companyId));
        tempArr = jSONObject.optJSONArray("data");
        if (tempArr != null && tempArr.length() > 0) {
            exemptArr = concatJSONArrayWithAmmendment(exemptArr, tempArr, "Exempt");
            tempArr = new JSONArray();
        }

        /**
         * Get Non GST - Intra
         */
        reqParams = new JSONObject(params, JSONObject.getNames(params));
//        reqParams.put("GST3B", true);
        reqParams.put("registrationType", Constants.GSTRegType_Unregistered + "," + Constants.GSTRegType_Consumer);
        reqParams.put("intrastate", true);
        reqParams.put("CustomerType", Constants.CUSTVENTYPE_NA + "," + Constants.CUSTVENTYPE_SEZWOPAY);
        reqParams.put("taxClassType", FieldComboData.TaxClass_Non_GST_Product);
        jSONObject = combineInvoiceCNDNRefundForExemptDetails(reqParams);
        noOfInvoices+=jSONObject.optInt("count");
        NongstIntrStTotal += jSONObject.optDouble("totalamount");
        totalamount +=NongstIntrStTotal;
        columnData.put("nongstsupplies", authHandler.formattedAmount(NongstIntrStTotal, companyId));
        tempArr = jSONObject.optJSONArray("data");
        if (tempArr != null && tempArr.length() > 0) {
            nonGstArr = concatJSONArrayWithAmmendment(nonGstArr, tempArr, "Non GST");
            tempArr = new JSONArray();
        }
        finalDetailsArr = StringUtil.concatJSONArray(finalDetailsArr, nilRatedArr);
        finalDetailsArr = StringUtil.concatJSONArray(finalDetailsArr, exemptArr);
        finalDetailsArr = StringUtil.concatJSONArray(finalDetailsArr, nonGstArr);
        jobject.put("detailsdata", finalDetailsArr);
        columnDataArr.put(columnData);
        summaryExeObj.put("typeofinvoice","<b>"+GSTRConstants.EXEMPT+"<b>");
        summaryExeObj.put("numberofinvoices", noOfInvoices);
        summaryExeObj.put("sumTaxableAmt", authHandler.formattedAmount(totalamount, companyId));
        summaryExeObj.put("igstamt", authHandler.formattedAmount(0, companyId));
        summaryExeObj.put("sgstamt", authHandler.formattedAmount(0, companyId));
        summaryExeObj.put("cgstamt", authHandler.formattedAmount(0, companyId));
        summaryExeObj.put("cessamt", authHandler.formattedAmount(0, companyId));
        summaryExeObj.put("sumTaxAmt", authHandler.formattedAmount(0, companyId));
        summaryExeObj.put("sumTotalAmt", authHandler.formattedAmount(totalamount, companyId));
        summaryArr.put(summaryExeObj);
        jobject.put("summaryArr", summaryArr);
        jobject.put("data", columnDataArr);

        return jobject;
    }
    /**
     * Function to add doc type in the json array i.e Non GST,Exempt etc.
     * @param Array1
     * @param Array2
     * @param taxclasstype
     * @return
     * @throws JSONException 
     */
    public static JSONArray concatJSONArrayWithAmmendment(JSONArray Array1, JSONArray Array2, String taxclasstype) throws JSONException {
        for (int i = 0; i < Array2.length(); i++) {
            if (Array2.optJSONObject(i) != null) {
                Array1.put(Array2.optJSONObject(i).put("taxclasstype", taxclasstype));
            }
        }
        return Array1;
    }
    /**
     * @Description - To get Section wise details of GSTR1 Summary for the
     * invoice level detailed view
     * @param params
     * @return
     * @throws ServiceException
     * @throws JSONException
     */
    public JSONObject getGSTR1SummaryDetails(JSONObject params) throws ServiceException, JSONException {
        JSONObject object = new JSONObject();
        JSONObject jMeta = new JSONObject();

        JSONArray jarrColumns = new JSONArray();
        JSONArray jarrRecords = new JSONArray();
        JSONArray b2bArr = new JSONArray();
        JSONArray dataJArr = new JSONArray();

        String start = params.optString("start");
        String limit = params.optString("limit");
        String companyId = params.optString("companyid");
        JSONObject reqParams = params;
        getEntityDataForRequestedModule(reqParams);
        getColNumForRequestedModules(reqParams);
        getLocalStateOfEntity(reqParams);
        reqParams.put("isGSTR1", true);
        try {
            String section = params.optString("section");
            switch (section) {
                case GSTRConstants.ATADJ: {
                    reqParams.put("entitycolnum", reqParams.optInt("receiptentitycolnum"));
                    reqParams.put("entityValue", reqParams.optString("receiptentityValue"));
                    getColumnModelForATADJDetails(jarrRecords, jarrColumns, params);
                    JSONObject nObject = getAdjustedAdvance(reqParams);
                    dataJArr = nObject.optJSONArray("data");
                    break;
                }
                case GSTRConstants.AT: {
                    reqParams.put("entitycolnum", reqParams.optInt("receiptentitycolnum"));
                    reqParams.put("entityValue", reqParams.optString("receiptentityValue"));
                    getColumnModelForATADJDetails(jarrRecords, jarrColumns, reqParams);
                    JSONObject nObject = getTaxLiabilityOnAdvance(reqParams);
                    dataJArr = nObject.optJSONArray("data");
                    break;
                }
                case GSTRConstants.B2B: {
                    reqParams.put("entitycolnum", reqParams.optInt("invoiceentitycolnum"));
                    reqParams.put("entityValue", reqParams.optString("invoiceentityValue"));                   
                    getColumnModelForB2BDetails(jarrRecords, jarrColumns, reqParams);
                    reqParams.put("excludeTermAmountForRCMInvoices", true);
                    JSONObject jobject = getB2BInvoiceDetails(reqParams, null);
                    dataJArr = jobject.getJSONArray("data");
                    break;
                }
                case GSTRConstants.B2CL: {
                    reqParams.put("entitycolnum", reqParams.optInt("invoiceentitycolnum"));
                    reqParams.put("entityValue", reqParams.optString("invoiceentityValue"));
                    getColumnModelForB2BDetails(jarrRecords, jarrColumns, reqParams);
                    JSONObject jobject = getB2ClInvoiceDetails(reqParams);
                    dataJArr = jobject.getJSONArray("data");
                    break;
                }
                case GSTRConstants.B2CS: {
                    reqParams.put("isGSTR1", true);
                    reqParams.put("entitycolnum", reqParams.optInt("invoiceentitycolnum"));
                    reqParams.put("entityValue", reqParams.optString("invoiceentityValue"));
                    getColumnModelForB2CSDetails(jarrRecords, jarrColumns, reqParams);
                    JSONObject jobject = getB2CSInvoiceDetails(reqParams);
                    dataJArr = jobject.getJSONArray("data");
                    break;
                }
                case GSTRConstants.CDNR: {
                    reqParams.put("entitycolnum", reqParams.optInt("cnentitycolnum"));
                    reqParams.put("entityValue", reqParams.optString("cnentityValue"));                    
                    getColumnModelForCDNRDetails(jarrRecords, jarrColumns, reqParams);
                    JSONObject jobject = getCDNRInvoiceDetails(reqParams, null);
                    dataJArr = jobject.getJSONArray("data");
                    break;
                }
                case GSTRConstants.CDNUR: {
                    reqParams.put("entitycolnum", reqParams.optInt("cnentitycolnum"));
                    reqParams.put("entityValue", reqParams.optString("cnentityValue"));
                    getColumnModelForCDNURDetails(jarrRecords, jarrColumns, reqParams);
                    JSONObject jobject = getCDNURInvoiceDetails(reqParams);
                    dataJArr = jobject.getJSONArray("data");
                    break;

                }
                case GSTRConstants.EXEMPT: {
                    reqParams.put("entitycolnum", reqParams.optInt("invoiceentitycolnum"));
                    reqParams.put("entityValue", reqParams.optString("invoiceentityValue"));
                    params.put("showtypeforexempt", true);
                    accGSTReportService.getColumnModelForGSTR3BDetails(jarrRecords, jarrColumns, params);
                    JSONObject jobject = getExemptInvoiceDetails(reqParams);
                    dataJArr = jobject.getJSONArray("detailsdata");
                    break;
                }
                case GSTRConstants.EXPORT: {
                    reqParams.put("entitycolnum", reqParams.optInt("invoiceentitycolnum"));
                    reqParams.put("entityValue", reqParams.optString("invoiceentityValue"));                    
                    getColumnModelForB2BDetails(jarrRecords, jarrColumns, reqParams);
                    JSONObject jobject = getExportInvoiceDetails(reqParams);
                    dataJArr = jobject.getJSONArray("data");
                    break;
                }
                case GSTRConstants.HSNSummary: {
                    reqParams.put("entitycolnum", reqParams.optInt("invoiceentitycolnum"));
                    reqParams.put("entityValue", reqParams.optString("invoiceentityValue"));                                        
                    getColumnModelForHSNDetails(jarrRecords, jarrColumns, reqParams);
                    JSONObject nObject = getHSNSummarydetails(reqParams);
                    dataJArr = nObject.getJSONArray("data");
                    break;
                }
                case "DOCS": {
                    reqParams.put("entitycolnum", reqParams.optInt("invoiceentitycolnum"));
                    reqParams.put("entityValue", reqParams.optString("invoiceentityValue"));                                        
                    getColumnModelForDOCSDetails(jarrRecords, jarrColumns, reqParams);
                    reqParams.put("companyname", reqParams.optString(Constants.companyname));
                    reqParams.put("b2bdocs", true);
                    JSONObject b2bjsonobject = gSTR1DeskeraServiceDao.getDocumentDetails(reqParams);
                    JSONArray b2barr = b2bjsonobject.getJSONArray("docs");
                    for (int i = 0; i < b2barr.length(); i++) {
                        dataJArr.put(b2barr.getJSONObject(i));
                    }
                    reqParams.put("b2bdocs", false);
                    reqParams.put("b2cldocs", true);
                    JSONObject b2cljsonobject = gSTR1DeskeraServiceDao.getDocumentDetails(reqParams);
                    JSONArray b2clarr = b2cljsonobject.getJSONArray("docs");
                    for (int i = 0; i < b2clarr.length(); i++) {
                        dataJArr.put(b2clarr.getJSONObject(i));
                    }

                    reqParams.put("entitycolnum", reqParams.optInt("dnentitycolnum"));
                    reqParams.put("entityValue", reqParams.optString("dnentityValue"));
                    reqParams.put("b2cldocs", false);
                    reqParams.put("dndocs", true);
                    JSONObject cdnrjsonobject = gSTR1DeskeraServiceDao.getDocumentDetails(reqParams);
                    JSONArray cdnrarr = cdnrjsonobject.getJSONArray("docs");
                    for (int i = 0; i < cdnrarr.length(); i++) {
                        dataJArr.put(cdnrarr.getJSONObject(i));
                    }

                    reqParams.put("entitycolnum", reqParams.optInt("cnentitycolnum"));
                    reqParams.put("entityValue", reqParams.optString("cnentityValue"));
                    reqParams.put("dndocs", false);
                    reqParams.put("cdnrdocs", true);
                    cdnrjsonobject = gSTR1DeskeraServiceDao.getDocumentDetails(reqParams);
                    cdnrarr = cdnrjsonobject.getJSONArray("docs");
                    for (int i = 0; i < cdnrarr.length(); i++) {
                        dataJArr.put(cdnrarr.getJSONObject(i));
                    }

                    reqParams.put("entitycolnum", reqParams.optInt("receiptentitycolnum"));
                    reqParams.put("entityValue", reqParams.optString("receiptentityValue"));
                    reqParams.put("cdnrdocs", false);
                    reqParams.put("advancedocs", true);
                    JSONObject advancejsonobject = gSTR1DeskeraServiceDao.getDocumentDetails(reqParams);
                    JSONArray advanceArr = advancejsonobject.getJSONArray("docs");
                    for (int i = 0; i < advanceArr.length(); i++) {
                        dataJArr.put(advanceArr.getJSONObject(i));
                    }
  
                    reqParams.put("entitycolnum", reqParams.optInt("doentitycolnum"));
                    reqParams.put("entityValue", reqParams.optString("doentityValue"));
                    reqParams.put("advancedocs", false);
                    reqParams.put("dodocs", true);
                    JSONObject dojsonobject = gSTR1DeskeraServiceDao.getDocumentDetails(reqParams);
                    JSONArray doarr = dojsonobject.getJSONArray("docs");
                    for (int i = 0; i < doarr.length(); i++) {
                        dataJArr.put(doarr.getJSONObject(i));
                    }

                    reqParams.put("entitycolnum", reqParams.optInt("paymententitycolnum"));
                    reqParams.put("entityValue", reqParams.optString("paymententityValue"));
                    reqParams.put("dodocs", false);
                    reqParams.put("paymentdocs", true);
                    JSONObject paymentjsonobject = gSTR1DeskeraServiceDao.getDocumentDetails(reqParams);
                    JSONArray paymentarr = paymentjsonobject.getJSONArray("docs");
                    for (int i = 0; i < paymentarr.length(); i++) {
                        dataJArr.put(paymentarr.getJSONObject(i));
                    }
                    break;
                }
            }
            JSONArray pagedJson = new JSONArray();
            pagedJson = dataJArr;
            if (!StringUtil.isNullOrEmpty(start) && !StringUtil.isNullOrEmpty(limit)) {
                pagedJson = StringUtil.getPagedJSON(pagedJson, Integer.parseInt(start), Integer.parseInt(limit));
            }
            object.put("totalCount", dataJArr.length());
            object.put("columns", jarrColumns);
            object.put("coldata", pagedJson);
            jMeta.put("totalProperty", "totalCount");
            jMeta.put("root", "coldata");
            jMeta.put("fields", jarrRecords);
            object.put("metaData", jMeta);
            if (params.optBoolean("isExport")) {
                object.put("data", dataJArr);
                object.put("columns", jarrColumns);
            }

        } catch (JSONException ex) {
            throw ServiceException.FAILURE(ex.getMessage(), ex);
        }
        return object;
    }
    public JSONObject getGSTR2SummaryDetails(JSONObject params) throws ServiceException, JSONException {
        JSONObject object = new JSONObject();
        JSONObject jMeta = new JSONObject();

        JSONArray jarrColumns = new JSONArray();
        JSONArray jarrRecords = new JSONArray();
        JSONArray b2bArr = new JSONArray();
        JSONArray dataJArr = new JSONArray();

        String start = params.optString("start");
        String limit = params.optString("limit");
        String companyId = params.optString("companyid");
        Company company = null;
        KwlReturnObject companyResult = null;
        companyResult = accountingHandlerDAOobj.getObject(Company.class.getName(), companyId);
        company = (Company) companyResult.getEntityList().get(0);
        params.put("isPurchase", true);
        JSONObject reqParams = params;
        /* * before starting sectional data need to get column no for Product Tax
         * Class (HSN)
         */
        int colnum = 0;
        HashMap fieldparams = new HashMap<>();
        fieldparams.put(Constants.filter_names, Arrays.asList(Constants.companyid, Constants.moduleid, "fieldname"));
        fieldparams.put(Constants.filter_values, Arrays.asList(companyId, Constants.Acc_Product_Master_ModuleId, "Custom_" + Constants.HSN_SACCODE));

        KwlReturnObject kwlReturnObjectGstCust = fieldManagerDAOobj.getFieldParams(fieldparams);
        List<FieldParams> fieldParamses = kwlReturnObjectGstCust.getEntityList();
        for (FieldParams fieldParams : fieldParamses) {
            colnum = fieldParams.getColnum();
        }
        reqParams.put("hsncolnum", colnum);
        fieldparams.put(Constants.filter_names, Arrays.asList(Constants.companyid, Constants.moduleid, "fieldname"));
        fieldparams.put(Constants.filter_values, Arrays.asList(companyId, Constants.Acc_Product_Master_ModuleId, "Custom_" + Constants.GSTProdCategory));
        kwlReturnObjectGstCust = fieldManagerDAOobj.getFieldParams(fieldparams);
        fieldParamses = kwlReturnObjectGstCust.getEntityList();
        for (FieldParams fieldParams : fieldParamses) {
            colnum = fieldParams.getColnum();
        }
        params.put("taxclasscolnum", colnum);
        reqParams.put("taxclasscolnum", colnum);
        /**
         * get State column no for Invoice module
         */
        int colnumforstate = fieldManagerDAOobj.getColumnFromFieldParams(Constants.STATE, companyId, Constants.Acc_Vendor_Invoice_ModuleId, 0);
        params.put("statecolnum", colnumforstate);
        
        /**
         * Get Local state Value
         */
        String entityId =params.optString("entityid");
        params.put("companyid", companyId);
        params.put("entityid", entityId);
        String localState=fieldManagerDAOobj.getStateForEntity(params);
        params.put("localState", localState);
        params.put("entityState", localState);
        /**
         * Get Entity Value and its column no for invoice
         */
        fieldparams.put(Constants.filter_names, Arrays.asList(Constants.companyid, Constants.moduleid, "fieldname"));
        fieldparams.put(Constants.filter_values, Arrays.asList(companyId, Constants.Acc_Vendor_Invoice_ModuleId, "Custom_" + Constants.ENTITY));
        String fieldid = "";
        kwlReturnObjectGstCust = fieldManagerDAOobj.getFieldParams(fieldparams);
        fieldParamses = kwlReturnObjectGstCust.getEntityList();
        for (FieldParams fieldParams : fieldParamses) {
            colnum = fieldParams.getColnum();
            fieldid = fieldParams.getId();
        }
        String entityValue =params.optString("entity");
        String ids = fieldManagerDAOobj.getIdsUsingParamsValueWithoutInsert(fieldid, entityValue);
        reqParams.put("entitycolnum", colnum);
        reqParams.put("entityValue", ids);
        /**
         * Put Asset Disposal/ Acquire Invoice Dimension column number details
         */
        putAssetInvoiceDimensionColumnDetails(params, reqParams);
        /**
         * Put Lease Sales Invoice Dimension column number details
         */
        putLeaseInvoiceDimensionColumnDetails(params, reqParams);
        try {

            String section = params.optString("section");
            switch (section) {
                case GSTRConstants.GSTR2_AdvanceAdjust: {
                    /**
                     * Get Entity Value and its column no for Receipt
                     */
                    fieldparams.put(Constants.filter_names, Arrays.asList(Constants.companyid, Constants.moduleid, "fieldname"));
                    fieldparams.put(Constants.filter_values, Arrays.asList(companyId, Constants.Acc_Make_Payment_ModuleId, "Custom_" + Constants.ENTITY));
                    kwlReturnObjectGstCust = fieldManagerDAOobj.getFieldParams(fieldparams);
                    fieldParamses = kwlReturnObjectGstCust.getEntityList();
                    for (FieldParams fieldParams : fieldParamses) {
                        colnum = fieldParams.getColnum();
                        fieldid = fieldParams.getId();
                    }
                    ids = fieldManagerDAOobj.getIdsUsingParamsValueWithoutInsert(fieldid, entityValue);
                    reqParams.put("entitycolnum", colnum);
                    reqParams.put("entityValue", ids);
                    params.put("InvType","Advance_adjusted");
                    getColumnModelForGSTR2_Advance(jarrRecords, jarrColumns, params);
                    JSONObject nObject = getAdjustedAdvance(reqParams);
                    dataJArr = nObject.optJSONArray("data");
                    break;
                }
                case GSTRConstants.GSTR2_AdvancePaid: {
                    /**
                     * Get Entity Value and its column no for Receipt
                     */
                    fieldparams.put(Constants.filter_names, Arrays.asList(Constants.companyid, Constants.moduleid, "fieldname"));
                    fieldparams.put(Constants.filter_values, Arrays.asList(companyId, Constants.Acc_Make_Payment_ModuleId, "Custom_" + Constants.ENTITY));
                    kwlReturnObjectGstCust = fieldManagerDAOobj.getFieldParams(fieldparams);
                    fieldParamses = kwlReturnObjectGstCust.getEntityList();
                    for (FieldParams fieldParams : fieldParamses) {
                        colnum = fieldParams.getColnum();
                        fieldid = fieldParams.getId();
                    }
                    ids = fieldManagerDAOobj.getIdsUsingParamsValueWithoutInsert(fieldid, entityValue);
                    reqParams.put("entitycolnum", colnum);
                    reqParams.put("entityValue", ids);
                    params.put("InvType","Advance_paid");
                    getColumnModelForGSTR2_Advance(jarrRecords, jarrColumns, reqParams);
                    JSONObject nObject = getTaxLiabilityOnAdvance(reqParams);
                    dataJArr = nObject.optJSONArray("data");
                    break;
                }
                case GSTRConstants.GSTR2_B2B: {
                    JSONObject parameters = new JSONObject(reqParams, JSONObject.getNames(reqParams));
                    parameters.put("registrationType", Constants.GSTRegType_Regular + "," + Constants.GSTRegType_Regular_ECommerce);
                    parameters.put("CustomerType", Constants.CUSTVENTYPE_NA  + "," + Constants.CUSTVENTYPE_DEEMED_EXPORT + "," + Constants.CUSTVENTYPE_SEZ + "," + Constants.CUSTVENTYPE_SEZWOPAY);
                    parameters.put("taxClassType", FieldComboData.TaxClass_Percenatge);
//                    parameters.put("zerorated", false);
                    parameters.put("typeofjoinisleft",true);
                    parameters.put("typeofinvoice", "B2B Invoices - 3, 4A");
                    reqParams.put("InvType", "B2B_reg");
                    getColumnModelForGSTR2_B2BDetails(jarrRecords, jarrColumns, reqParams);
                    JSONObject jobject = getB2BInvoiceDetails(parameters, null);
                    dataJArr = jobject.getJSONArray("data");
                    if (params.optBoolean("isGSTR2AMatchAndReconcile", false)) {
                        dataJArr = sortJsonForGSTR2A(dataJArr);
                    }
                    break;
                }
                case GSTRConstants.GSTR2_B2B_unregister:{
                    JSONObject parameters = new JSONObject(reqParams, JSONObject.getNames(reqParams));
                    parameters.put("registrationType", Constants.GSTRegType_Unregistered);
                    parameters.put("CustomerType", Constants.CUSTVENTYPE_NA  + "," + Constants.CUSTVENTYPE_DEEMED_EXPORT + "," + Constants.CUSTVENTYPE_SEZ + "," + Constants.CUSTVENTYPE_SEZWOPAY);
                    parameters.put("taxClassType", FieldComboData.TaxClass_Percenatge);
//                    parameters.put("zerorated", false);
                    /**
                     * typeofjoinisleft parameter missing from Details view report, Same parameter present in Summary view
                     */
                    parameters.put("typeofjoinisleft", true);
                    parameters.put("typeofinvoice", "B2BUR Invoices - 4B");
                    parameters.put("entityState",localState);
                    reqParams.put("InvType","B2B_Unregistered");
                    getColumnModelForGSTR2_B2BDetails(jarrRecords, jarrColumns, reqParams);
                    JSONObject jobject = getB2BInvoiceDetails(parameters, null);
                    dataJArr = jobject.getJSONArray("data");
                    break;
                }
                case GSTRConstants.GSTR2_ImpGoods: {
                    JSONObject parameters = new JSONObject(reqParams, JSONObject.getNames(reqParams));
                    parameters.put("CustomerType", Constants.CUSTVENTYPE_Import);
//                    parameters.put("taxClassType", FieldComboData.TaxClass_Percenatge);
                    parameters.put("isServiceProduct", false);
                    parameters.put("typeofinvoice", "Import of Goods - 5");
                    parameters.put("typeofjoinisleft", true);
                    parameters.put("isGSTINnull", true);
                    reqParams.put("InvType","Import_of_goods");
                    parameters.put("excludetaxClassType", true);
                    parameters.put(GSTRConstants.ADD_LANDEDCOST_JOIN_FOR_IMPORT_INVOICES, true);
                    getColumnModelForGSTR2_B2BDetails(jarrRecords, jarrColumns, params);
                    JSONObject jobject = getB2BInvoiceDetails(parameters, null);
                    dataJArr = jobject.getJSONArray("data");
                    break;
                }
                case GSTRConstants.GSTR2_ImpServices: {
                    JSONObject parameters = new JSONObject(reqParams, JSONObject.getNames(reqParams));
                    parameters.put("CustomerType", Constants.CUSTVENTYPE_Import);
//                    parameters.put("taxClassType", FieldComboData.TaxClass_Percenatge);
                    parameters.put("isServiceProduct", true);
                    parameters.put("typeofinvoice", "Import of Services - 4C");
                    parameters.put("typeofjoinisleft", true);
                    reqParams.put("InvType","Import_of_service");
                    parameters.put("excludetaxClassType", true);
                    parameters.put(GSTRConstants.ADD_LANDEDCOST_JOIN_FOR_IMPORT_INVOICES, true);
                    getColumnModelForGSTR2_B2BDetails(jarrRecords, jarrColumns, reqParams);
                    JSONObject jobject = getB2BInvoiceDetails(parameters, null);
                    dataJArr = jobject.getJSONArray("data");
                    break;
                }
                case "Purchase from Composition Dealer": {
                    JSONObject parameters = new JSONObject(reqParams, JSONObject.getNames(reqParams));
                    parameters.put("isGSTINnull", false);
                    parameters.put("registrationType", Constants.GSTRegType_Composition + "," + Constants.GSTRegType_Composition_ECommerce);
                    parameters.put("CustomerType", Constants.CUSTVENTYPE_NA);
                    parameters.put("taxClassType", FieldComboData.TaxClass_Percenatge);
                    parameters.put("zerorated", false);
                    parameters.put("typeofinvoice", "Purchase from Composition Dealer");
                    getColumnModelForB2BDetails(jarrRecords, jarrColumns, reqParams);
                    JSONObject jobject = getB2BInvoiceDetails(parameters, null);
                    dataJArr = jobject.getJSONArray("data");
                    break;
                }
                case GSTRConstants.GSTR2_CDN: {
                    /**
                     * Get Entity Value and its column no for Receipt
                     */
                    fieldparams.put(Constants.filter_names, Arrays.asList(Constants.companyid, Constants.moduleid, "fieldname"));
                    fieldparams.put(Constants.filter_values, Arrays.asList(companyId, Constants.Acc_Debit_Note_ModuleId, "Custom_" + Constants.ENTITY));
                    kwlReturnObjectGstCust = fieldManagerDAOobj.getFieldParams(fieldparams);
                    fieldParamses = kwlReturnObjectGstCust.getEntityList();
                    for (FieldParams fieldParams : fieldParamses) {
                        colnum = fieldParams.getColnum();
                        fieldid = fieldParams.getId();
                    }
                    ids = fieldManagerDAOobj.getIdsUsingParamsValueWithoutInsert(fieldid, entityValue);
                    reqParams.put("entitycolnum", colnum);
                    reqParams.put("entityValue", ids);
                    reqParams.put("dnentitycolnum", colnum);
                    reqParams.put("dnentityValue", ids);
                    fieldparams.put(Constants.filter_names, Arrays.asList(Constants.companyid, Constants.moduleid, "fieldname"));
                    fieldparams.put(Constants.filter_values, Arrays.asList(companyId, Constants.Acc_Credit_Note_ModuleId, "Custom_" + Constants.ENTITY));
                    kwlReturnObjectGstCust = fieldManagerDAOobj.getFieldParams(fieldparams);
                    fieldParamses = kwlReturnObjectGstCust.getEntityList();
                    for (FieldParams fieldParams : fieldParamses) {
                        colnum = fieldParams.getColnum();
                        fieldid = fieldParams.getId();
                    }
                    ids = fieldManagerDAOobj.getIdsUsingParamsValue(fieldid, entityValue);
                    reqParams.put("cnentitycolnum", colnum);
                    reqParams.put("cnentityValue", ids);
                    reqParams.put("registrationType",Constants.GSTRegType_Regular+","+Constants.GSTRegType_Regular_ECommerce);
                    reqParams.put("typeofinvoice", "Credit/Debit Notes Regular - 6C");
                    reqParams.put("InvType","Credit_note_reg");
                    getColumnModelForGSTR2_B2BDetails(jarrRecords, jarrColumns, reqParams);
                    JSONObject jobject = getCDNRInvoiceDetails(reqParams, null);
                    dataJArr = jobject.getJSONArray("data");
                    break;
                }
                case GSTRConstants.GSTR2_CDN_unregister: {
                    /**
                     * Get Entity Value and its column no for Receipt
                     */
                    fieldparams.put(Constants.filter_names, Arrays.asList(Constants.companyid, Constants.moduleid, "fieldname"));
                    fieldparams.put(Constants.filter_values, Arrays.asList(companyId, Constants.Acc_Debit_Note_ModuleId, "Custom_" + Constants.ENTITY));
                    kwlReturnObjectGstCust = fieldManagerDAOobj.getFieldParams(fieldparams);
                    fieldParamses = kwlReturnObjectGstCust.getEntityList();
                    for (FieldParams fieldParams : fieldParamses) {
                        colnum = fieldParams.getColnum();
                        fieldid = fieldParams.getId();
                    }
                    ids = fieldManagerDAOobj.getIdsUsingParamsValueWithoutInsert(fieldid, entityValue);
                    reqParams.put("entitycolnum", colnum);
                    reqParams.put("entityValue", ids);
                    reqParams.put("dnentitycolnum", colnum);
                    reqParams.put("dnentityValue", ids);
                    fieldparams.put(Constants.filter_names, Arrays.asList(Constants.companyid, Constants.moduleid, "fieldname"));
                    fieldparams.put(Constants.filter_values, Arrays.asList(companyId, Constants.Acc_Credit_Note_ModuleId, "Custom_" + Constants.ENTITY));
                    kwlReturnObjectGstCust = fieldManagerDAOobj.getFieldParams(fieldparams);
                    fieldParamses = kwlReturnObjectGstCust.getEntityList();
                    for (FieldParams fieldParams : fieldParamses) {
                        colnum = fieldParams.getColnum();
                        fieldid = fieldParams.getId();
                    }
                    ids = fieldManagerDAOobj.getIdsUsingParamsValue(fieldid, entityValue);
                    reqParams.put("cnentitycolnum", colnum);
                    reqParams.put("cnentityValue", ids);
                    reqParams.put("registrationType", Constants.GSTRegType_Unregistered);
                    reqParams.put("InvType","Credit_note_unreg");
                    reqParams.put("typeofinvoice", "Credit/Debit Notes Unregistered - 6C");
                    getColumnModelForGSTR2_B2BDetails(jarrRecords, jarrColumns, reqParams);
                    JSONObject jobject = getCDNRInvoiceDetails(reqParams, null);
                    dataJArr = jobject.getJSONArray("data");
                    break;
                }
                case "CDNUR": {
                    /**
                     * Get Entity Value and its column no for Receipt
                     */
                    fieldparams.put(Constants.filter_names, Arrays.asList(Constants.companyid, Constants.moduleid, "fieldname"));
                    fieldparams.put(Constants.filter_values, Arrays.asList(companyId, Constants.Acc_Credit_Note_ModuleId, "Custom_" + Constants.ENTITY));
                    kwlReturnObjectGstCust = fieldManagerDAOobj.getFieldParams(fieldparams);
                    fieldParamses = kwlReturnObjectGstCust.getEntityList();
                    for (FieldParams fieldParams : fieldParamses) {
                        colnum = fieldParams.getColnum();
                        fieldid = fieldParams.getId();
                    }
                    ids = fieldManagerDAOobj.getIdsUsingParamsValueWithoutInsert(fieldid, entityValue);
                    reqParams.put("entitycolnum", colnum);
                    reqParams.put("entityValue", ids);
                    reqParams.put("cnentitycolnum", colnum);
                    reqParams.put("cnentityValue", ids);
                    fieldparams.put(Constants.filter_names, Arrays.asList(Constants.companyid, Constants.moduleid, "fieldname"));
                    fieldparams.put(Constants.filter_values, Arrays.asList(companyId, Constants.Acc_Debit_Note_ModuleId, "Custom_" + Constants.ENTITY));
                    kwlReturnObjectGstCust = fieldManagerDAOobj.getFieldParams(fieldparams);
                    fieldParamses = kwlReturnObjectGstCust.getEntityList();
                    for (FieldParams fieldParams : fieldParamses) {
                        colnum = fieldParams.getColnum();
                        fieldid = fieldParams.getId();
                    }
                    ids = fieldManagerDAOobj.getIdsUsingParamsValue(fieldid, entityValue);
                    reqParams.put("dnentitycolnum", colnum);
                    reqParams.put("dnentityValue", ids);
                    getColumnModelForGSTR2_B2BDetails(jarrRecords, jarrColumns, params);
                    JSONObject jobject = getCDNURInvoiceDetails(reqParams);
                    dataJArr = jobject.getJSONArray("data");
                    break;

                }
                case GSTRConstants.GSTR2_nilRated: {
                    reqParams.put("invoiceentitycolnum", colnum);
                    reqParams.put("invoiceentityValue", ids);
                    params.put("goodsreceiptentitycolnum", colnum);
                    params.put("goodsreceiptentityValue", ids);
                    reqParams.put("registrationType", Constants.GSTRegType_Composition);
                    reqParams.put("typeofjoinisleft", true);
                    getColumnModelForGSTR2_NilRated(jarrRecords, jarrColumns, params);
                    reqParams.put("typeofinvoice", "Nil Rated Invoices - 7 - (Summary)");
                    // For Vendor registration type = composition
                    JSONObject JSONObject = getExemptPurchaseInvoiceDetails(reqParams);
                    dataJArr = JSONObject.getJSONArray("data");
                    // For Product tax class  = Exempted
                    reqParams.remove("registrationType");
                    reqParams.put("taxClassType", FieldComboData.TaxClass_Exempted);
                    JSONObject ExemptObj = getExemptPurchaseInvoiceDetails(reqParams);
                    JSONArray tempArr=ExemptObj.optJSONArray("data");
                    dataJArr = StringUtil.concatJSONArray(dataJArr, tempArr);
                    // For Product tax class  = Non-GST Product
                    reqParams.put("taxClassType", FieldComboData.TaxClass_Non_GST_Product);
                    JSONObject NonGST = getExemptPurchaseInvoiceDetails(reqParams);
                    JSONArray NonGSTArr=NonGST.optJSONArray("data");
                    dataJArr = StringUtil.concatJSONArray(dataJArr, NonGSTArr);
                    // For Product tax class  = Product Tax class 0%
                    reqParams.put("taxClassType", FieldComboData.TaxClass_ZeroPercenatge);
                    reqParams.put(GSTRConstants.IS_PRODUCT_TAX_ZERO, true);
                    JSONObject ZeroRated = getExemptPurchaseInvoiceDetails(reqParams);
                    JSONArray ZeroRatedArr=ZeroRated.optJSONArray("data");
                    dataJArr = StringUtil.concatJSONArray(dataJArr, ZeroRatedArr);
                    reqParams.remove(GSTRConstants.IS_PRODUCT_TAX_ZERO);
                    break;
                }
                case "EXPORT": {
                    getColumnModelForExportDetails(jarrRecords, jarrColumns, reqParams);
                    JSONObject jobject = getExportInvoiceDetails(reqParams);
                    dataJArr = jobject.getJSONArray("data");
                    break;
                }
                case "HSN summary of Inward supplies": {
                    getColumnModelForHSNDetails(jarrRecords, jarrColumns, reqParams);
                    reqParams.put("typeofinvoice", "HSN summary of Inward supplies");
                    JSONObject nObject = getHSNSummarydetails(reqParams);
                    dataJArr = nObject.getJSONArray("data");
                    break;
                }
                case "TDS":
                case "TCS":
                case "ITC": {
                    /**
                     * Get Entity Value and its column no for JE
                     */
                    fieldparams.put(Constants.filter_names, Arrays.asList(Constants.companyid, Constants.moduleid, "fieldname"));
                    fieldparams.put(Constants.filter_values, Arrays.asList(companyId, Constants.Acc_GENERAL_LEDGER_ModuleId, "Custom_" + Constants.ENTITY));
                    kwlReturnObjectGstCust = fieldManagerDAOobj.getFieldParams(fieldparams);
                    fieldParamses = kwlReturnObjectGstCust.getEntityList();
                    for (FieldParams fieldParams : fieldParamses) {
                        colnum = fieldParams.getColnum();
                        fieldid = fieldParams.getId();
                    }
                    ids = fieldManagerDAOobj.getIdsUsingParamsValueWithoutInsert(fieldid, entityValue);
                    reqParams.put("entitycolnum", colnum);
                    reqParams.put("entityValue", ids);
                    if (section.equalsIgnoreCase("TDS")) {
                        reqParams.put("gstrjetype", Constants.JETYPE_TDS);
                    } else if (section.equalsIgnoreCase("TCS")) {
                        reqParams.put("gstrjetype", Constants.JETYPE_TCS);
                    } else if (section.equalsIgnoreCase("ITC")) {
                        reqParams.put("gstrjetype", Constants.JETYPE_ITC);
                    }

                    getColumnModelForTCSTDSDetails(jarrRecords, jarrColumns, reqParams);
                    JSONObject jobject = getTDSTCSITCDetails(reqParams);
                    dataJArr = jobject.getJSONArray("data");
                    break;
                }
            }
            JSONArray pagedJson = new JSONArray();
            pagedJson = dataJArr;
            if (!StringUtil.isNullOrEmpty(start) && !StringUtil.isNullOrEmpty(limit)) {
                pagedJson = StringUtil.getPagedJSON(pagedJson, Integer.parseInt(start), Integer.parseInt(limit));
            }
            object.put("totalCount", dataJArr.length());
            object.put("columns", jarrColumns);
            object.put("coldata", pagedJson);
            jMeta.put("totalProperty", "totalCount");
            jMeta.put("root", "coldata");
            jMeta.put("fields", jarrRecords);
            object.put("metaData", jMeta);
            if (params.optBoolean("isExport")) {
                object.put("data", dataJArr);
                object.put("columns", jarrColumns);
            }

        } catch (JSONException ex) {
            throw ServiceException.FAILURE(ex.getMessage(), ex);
        }
        return object;
    }
    /**
     * GSTR1 Home page
     *
     * @param jarrRecords
     * @param jarrColumns
     * @param params
     * @throws JSONException
     */
    public JSONArray getColumnModelGSTR1Report(JSONArray jarrRecords, JSONArray jarrColumns, JSONObject params) throws JSONException {
        String storeRec = "";
        String section = params.optString("section");
        String startdate = params.optString("startdate");
        String enddate = params.optString("enddate");
        Locale requestcontextutilsobj = null;
        if (params.has("requestcontextutilsobj")) {
            requestcontextutilsobj = (Locale) params.opt("requestcontextutilsobj");
        }
        JSONObject jobjTemp = new JSONObject();
        storeRec = "section,tabno";
        String[] recArr = storeRec.split(",");
        // Get those fields in record for whome, no special properties present like type, defVal, mapping etc.
        for (String rec : recArr) {
            jobjTemp = new JSONObject();
            jobjTemp.put("name", rec);
            jarrRecords.put(jobjTemp);
        }
        jobjTemp = new JSONObject();
        jobjTemp.put("header", "Sctions");
        jobjTemp.put("dataIndex", "section");
        jobjTemp.put("width", 1400);
        jobjTemp.put("align", "left");
        jobjTemp.put("pdfwidth", 150);
        jobjTemp.put("renderer", "WtfGlobal.linkRendererForGSTR");
        jarrColumns.put(jobjTemp);

        JSONArray data = new JSONArray();
        JSONObject jSONObject = new JSONObject();
        jSONObject.put("section", "1. GSTIN");
//        jSONObject.put("renderer","WtfGlobal.linkDeletedRenderer");

        data.put(jSONObject);
        jSONObject = new JSONObject();
        jSONObject.put("section", "2. Name of Taxable Person :" + params.optString("subdomain"));
        data.put(jSONObject);
        jSONObject = new JSONObject();
        jSONObject.put("section", "3. Aggregate Turnover of the Taxable Person in the previous");
        data.put(jSONObject);
        jSONObject = new JSONObject();
        jSONObject.put("section", "4. Period : " + startdate + " To " + enddate);
        data.put(jSONObject);
        jSONObject = new JSONObject();
        jSONObject.put("section", "5. Taxable outward supplies to a registered person");
        jSONObject.put("tabno", "5");
        data.put(jSONObject);
        jSONObject = new JSONObject();
        jSONObject.put("section", "5A. Amendments to details of Outward Supplies to a registered person of earlier tax periods");
        jSONObject.put("tabno", "5A");
        data.put(jSONObject);
        jSONObject = new JSONObject();
        jSONObject.put("tabno", "6");
        jSONObject.put("section", "6. Taxable outward supplies to a consumer where Place of Supply (State Code) is other than the State where supplier is located (Inter-state supplies) and Invoice value is more than \n"
                + "Rs 2.5 lakh");
        data.put(jSONObject);
        jSONObject = new JSONObject();
        jSONObject.put("tabno", "6A");
        jSONObject.put("section", "6A. Amendment to taxable outward supplies to a consumer of earlier tax periods where Place of Supply (State Code) is other than the State where supplier is located (Inter-state supplies) and Invoice value is more than Rs 2.5 lakh .");
        data.put(jSONObject);
        jSONObject = new JSONObject();
        jSONObject.put("tabno", "7");
        jSONObject.put("section", "7. Taxable outward supplies to consumer (Other than 6 above)");
        data.put(jSONObject);
        jSONObject = new JSONObject();
        jSONObject.put("tabno", "7A");
        jSONObject.put("section", "7A. Amendment to Taxable outward supplies to consumer of earlier tax periods (original supplies covered under 7 above in earlier tax period (s))");
        data.put(jSONObject);
        jSONObject = new JSONObject();
        jSONObject.put("tabno", "8");
        jSONObject.put("section", "8. Details of Credit/Debit Notes");
        data.put(jSONObject);
        return data;
    }

    /**
     * @Section 5
     * @param jarrRecords
     * @param jarrColumns
     * @param params
     * @throws JSONException
     */
    public void getColumnModelForSIWithGSTN(JSONArray jarrRecords, JSONArray jarrColumns, JSONObject params) throws JSONException {
        String storeRec = "";
        String section = params.optString("section");
        Locale requestcontextutilsobj = null;
        if (params.has("requestcontextutilsobj")) {
            requestcontextutilsobj = (Locale) params.opt("requestcontextutilsobj");
        }
        JSONObject jobjTemp = new JSONObject();
        storeRec = "date,custgstin,billno,hsnno,value,taxableamt,type,originaldate,originalbillno,pos"
                + ",IGSTrate,IGSTamount,CGSTrate,CGSTamount,SGSTrate,SGSTamount,statecode,customer,originalhsnno,originaltype";
        String[] recArr = storeRec.split(",");
        // Get those fields in record for whome, no special properties present like type, defVal, mapping etc.
        for (String rec : recArr) {
            jobjTemp = new JSONObject();
            jobjTemp.put("name", rec);
            jarrRecords.put(jobjTemp);
        }

        // Gel column model - 
        if (section.equalsIgnoreCase("5A") || section.equalsIgnoreCase("6A")) {
            jobjTemp = new JSONObject();
            jobjTemp.put("header", "Original Invoice No");
            jobjTemp.put("dataIndex", "originalbillno");
            jobjTemp.put("width", 150);
            jobjTemp.put("align", "left");
            jobjTemp.put("pdfwidth", 150);
            jarrColumns.put(jobjTemp);
            jobjTemp = new JSONObject();
            jobjTemp.put("header", "Original Invoice Date");
            jobjTemp.put("dataIndex", "originaldate");
            jobjTemp.put("width", 150);
            jobjTemp.put("align", "left");
            jobjTemp.put("pdfwidth", 150);
            jarrColumns.put(jobjTemp);
        }
        if (section.equalsIgnoreCase("6") || section.equalsIgnoreCase("6A")) {
            jobjTemp = new JSONObject();
            jobjTemp.put("header", "State Code");
            jobjTemp.put("dataIndex", "statecode");
            jobjTemp.put("width", 150);
            jobjTemp.put("align", "left");
            jobjTemp.put("pdfwidth", 150);
            jarrColumns.put(jobjTemp);
            jobjTemp = new JSONObject();
            jobjTemp.put("header", "Recipient");
            jobjTemp.put("dataIndex", "customer");
            jobjTemp.put("hidden", true);
            jobjTemp.put("width", 150);
            jobjTemp.put("align", "left");
            jobjTemp.put("pdfwidth", 150);
            jarrColumns.put(jobjTemp);
        }
        if (section.equalsIgnoreCase("5") || section.equalsIgnoreCase("5A")) {
            jobjTemp = new JSONObject();
            jobjTemp.put("header", "GSTN");
            jobjTemp.put("dataIndex", "custgstin");
            jobjTemp.put("width", 150);
            jobjTemp.put("align", "left");
            jobjTemp.put("pdfwidth", 150);
            jarrColumns.put(jobjTemp);
        }

        if (section.equalsIgnoreCase("5") || section.equalsIgnoreCase("5A") || section.equalsIgnoreCase("6") || section.equalsIgnoreCase("6A")) {
            jobjTemp = new JSONObject();
            jobjTemp.put("header", "Invoice No");
            jobjTemp.put("dataIndex", "billno");
            jobjTemp.put("align", "left");
            jobjTemp.put("width", 150);
            jobjTemp.put("pdfwidth", 150);
            jarrColumns.put(jobjTemp);

            jobjTemp = new JSONObject();
            jobjTemp.put("header", "Invoice Date");
            jobjTemp.put("dataIndex", "date");
            jobjTemp.put("align", "left");
            jobjTemp.put("width", 150);
            jobjTemp.put("pdfwidth", 150);
            jarrColumns.put(jobjTemp);

            jobjTemp = new JSONObject();
            jobjTemp.put("header", "Type");
            jobjTemp.put("dataIndex", "type");
            jobjTemp.put("align", "left");
            jobjTemp.put("width", 150);
            jobjTemp.put("pdfwidth", 150);
            jarrColumns.put(jobjTemp);

            jobjTemp = new JSONObject();
            jobjTemp.put("header", "Value");
            jobjTemp.put("dataIndex", "value");
            jobjTemp.put("renderer", "WtfGlobal.withoutRateCurrencyDeletedSymbol");
            jobjTemp.put("align", "right");
            jobjTemp.put("width", 150);
            jobjTemp.put("pdfwidth", 150);
            jarrColumns.put(jobjTemp);

            jobjTemp = new JSONObject();
            jobjTemp.put("header", "HSN No");
            jobjTemp.put("dataIndex", "hsnno");
            jobjTemp.put("width", 150);
            jobjTemp.put("align", "left");
            jobjTemp.put("pdfwidth", 150);
            jarrColumns.put(jobjTemp);

            jobjTemp = new JSONObject();
            jobjTemp.put("header", "Taxable Value");
            jobjTemp.put("dataIndex", "taxableamt");
            jobjTemp.put("renderer", "WtfGlobal.withoutRateCurrencyDeletedSymbol");
            jobjTemp.put("width", 150);
            jobjTemp.put("align", "left");
            jobjTemp.put("pdfwidth", 150);
            jarrColumns.put(jobjTemp);
        }
        if (section.equalsIgnoreCase("7A")) {
            jobjTemp = new JSONObject();
            jobjTemp.put("header", "Original Invoice Month");
            jobjTemp.put("dataIndex", "month");
            jobjTemp.put("width", 150);
            jobjTemp.put("align", "left");
            jobjTemp.put("pdfwidth", 150);
            jarrColumns.put(jobjTemp);
            jobjTemp = new JSONObject();
            jobjTemp.put("header", "Original Inv Type");
            jobjTemp.put("dataIndex", "originaltype");
            jobjTemp.put("align", "left");
            jobjTemp.put("width", 150);
            jobjTemp.put("pdfwidth", 150);
            jarrColumns.put(jobjTemp);
            jobjTemp = new JSONObject();
            jobjTemp.put("header", " Original Inv HSN No");
            jobjTemp.put("dataIndex", "originalhsnno");
            jobjTemp.put("width", 150);
            jobjTemp.put("align", "left");
            jobjTemp.put("pdfwidth", 150);
            jarrColumns.put(jobjTemp);

            jobjTemp = new JSONObject();
            jobjTemp.put("header", "Original Inv State Code");
            jobjTemp.put("dataIndex", "statecode");
            jobjTemp.put("width", 150);
            jobjTemp.put("align", "left");
            jobjTemp.put("pdfwidth", 150);
            jarrColumns.put(jobjTemp);
        }
        if (section.equalsIgnoreCase("7") || section.equalsIgnoreCase("7A")) {
            jobjTemp = new JSONObject();
            jobjTemp.put("header", "Type");
            jobjTemp.put("dataIndex", "type");
            jobjTemp.put("align", "left");
            jobjTemp.put("width", 150);
            jobjTemp.put("pdfwidth", 150);
            jarrColumns.put(jobjTemp);
            jobjTemp = new JSONObject();
            jobjTemp.put("header", "HSN No");
            jobjTemp.put("dataIndex", "hsnno");
            jobjTemp.put("width", 150);
            jobjTemp.put("align", "left");
            jobjTemp.put("pdfwidth", 150);
            jarrColumns.put(jobjTemp);

            jobjTemp = new JSONObject();
            jobjTemp.put("header", "State Code");
            jobjTemp.put("dataIndex", "statecode");
            jobjTemp.put("width", 150);
            jobjTemp.put("align", "left");
            jobjTemp.put("pdfwidth", 150);
            jarrColumns.put(jobjTemp);
            jobjTemp = new JSONObject();
            jobjTemp.put("header", "Aggregate Taxable Value");
            jobjTemp.put("renderer", "WtfGlobal.withoutRateCurrencyDeletedSymbol");
            jobjTemp.put("dataIndex", "taxableamt");
            jobjTemp.put("align", "right");
            jobjTemp.put("width", 150);
            jobjTemp.put("pdfwidth", 150);
            jarrColumns.put(jobjTemp);
        }
        jobjTemp = new JSONObject();
        jobjTemp.put("header", "IGST rate");
        jobjTemp.put("dataIndex", "IGSTrate");
        jobjTemp.put("align", "right");
        jobjTemp.put("width", 150);
        jobjTemp.put("pdfwidth", 150);
        jobjTemp.put("renderer", "WtfGlobal.gstdecimalRenderer");
        jarrColumns.put(jobjTemp);

        jobjTemp = new JSONObject();
        jobjTemp.put("header", "IGST Amount");
        jobjTemp.put("dataIndex", "IGSTamount");
        jobjTemp.put("renderer", "WtfGlobal.withoutRateCurrencyDeletedSymbol");
        jobjTemp.put("align", "right");
        jobjTemp.put("width", 150);
        jobjTemp.put("pdfwidth", 150);
        jarrColumns.put(jobjTemp);

        if (section.equalsIgnoreCase("5") || section.equalsIgnoreCase("5A") || section.equalsIgnoreCase("7") || section.equalsIgnoreCase("7A")) {
            jobjTemp = new JSONObject();
            jobjTemp.put("header", "CGST Rate");
            jobjTemp.put("dataIndex", "CGSTrate");
            jobjTemp.put("renderer", "WtfGlobal.gstdecimalRenderer");
            jobjTemp.put("align", "right");
            jobjTemp.put("width", 150);
            jobjTemp.put("pdfwidth", 150);
            jarrColumns.put(jobjTemp);

            jobjTemp = new JSONObject();
            jobjTemp.put("header", "CGST Amount");
            jobjTemp.put("dataIndex", "CGSTamount");
            jobjTemp.put("renderer", "WtfGlobal.withoutRateCurrencyDeletedSymbol");
            jobjTemp.put("align", "right");
            jobjTemp.put("width", 150);
            jobjTemp.put("pdfwidth", 150);
            jarrColumns.put(jobjTemp);

            jobjTemp = new JSONObject();
            jobjTemp.put("header", "SGST Rate");
            jobjTemp.put("dataIndex", "SGSTrate");
            jobjTemp.put("renderer", "WtfGlobal.gstdecimalRenderer");
            jobjTemp.put("align", "right");
            jobjTemp.put("width", 150);
            jobjTemp.put("pdfwidth", 150);
            jarrColumns.put(jobjTemp);

            jobjTemp = new JSONObject();
            jobjTemp.put("header", "SGST Amount");
            jobjTemp.put("dataIndex", "SGSTamount");
            jobjTemp.put("renderer", "WtfGlobal.withoutRateCurrencyDeletedSymbol");
            jobjTemp.put("align", "right");
            jobjTemp.put("width", 150);
            jobjTemp.put("pdfwidth", 150);
            jarrColumns.put(jobjTemp);
        }
        if (!section.equalsIgnoreCase("7") && !section.equalsIgnoreCase("7A")) {
            jobjTemp = new JSONObject();
            jobjTemp.put("header", "POS");
            jobjTemp.put("dataIndex", "pos");
            jobjTemp.put("align", "right");
            jobjTemp.put("width", 150);
            jobjTemp.put("pdfwidth", 150);
            jarrColumns.put(jobjTemp);
        }

    }
    public void getColumnModelForGSTSummary(JSONArray jarrRecords, JSONArray jarrColumns, JSONObject params) throws JSONException {
        String storeRec = "";
        String section = params.optString("companyid");;
        Locale requestcontextutilsobj = null;
        if (params.has("requestcontextutilsobj")) {
            requestcontextutilsobj = (Locale) params.opt("requestcontextutilsobj");
        }
        JSONObject jobjTemp = new JSONObject();
        storeRec = "typeofinvoice,numberofinvoices,sumTaxableAmt,sumTaxAmt,sumTotalAmt,entity,view,igstamt,cgstamt,sgstamt,cessamt,sumTotalITCAmt";

        String[] recArr = storeRec.split(",");
        // Get those fields in record for whome, no special properties present like type, defVal, mapping etc.
        for (String rec : recArr) {
            jobjTemp = new JSONObject();
            jobjTemp.put("name", rec);
            jarrRecords.put(jobjTemp);
        }
        boolean hideFlag=false;

        // Gel column model - 
        jobjTemp = new JSONObject();
        jobjTemp.put("header", "<b>" + messageSource.getMessage("acc.grtr1.Particulars", null, requestcontextutilsobj) + "<b>");
        jobjTemp.put("dataIndex", "typeofinvoice");
        jobjTemp.put("width", 350);
        jobjTemp.put("align", "left");
        jobjTemp.put("pdfwidth", 150);
        jarrColumns.put(jobjTemp);
        jobjTemp = new JSONObject();
        jobjTemp.put("header", "<b>" + messageSource.getMessage("acc.gstr1.numberofinvoices", null, requestcontextutilsobj) + "<b>");
        jobjTemp.put("dataIndex", "numberofinvoices");
        jobjTemp.put("width", 150);
        jobjTemp.put("align", "center");
        jobjTemp.put("pdfwidth", 150);
        jarrColumns.put(jobjTemp);
        
        jobjTemp = new JSONObject();
        jobjTemp.put("header", "<b>" + messageSource.getMessage("acc.gstr1.taxableamount", null, requestcontextutilsobj) + "<b>");
        jobjTemp.put("dataIndex", "sumTaxableAmt");
        jobjTemp.put("width", 150);
        jobjTemp.put("renderer", "WtfGlobal.withoutRateCurrencyDeletedSymbol");
        jobjTemp.put("align", "right");
        jobjTemp.put("pdfwidth", 150);
        jarrColumns.put(jobjTemp);
        
        jobjTemp = new JSONObject();
        jobjTemp.put("header", "<b>" + messageSource.getMessage("acc.gstr2.totalITCavailable", null, requestcontextutilsobj) + "<b>");
        jobjTemp.put("dataIndex", " ");
        jobjTemp.put("hidden", true);
        jobjTemp.put("width", 150);
        jobjTemp.put("renderer", "WtfGlobal.withoutRateCurrencyDeletedSymbol");
        jobjTemp.put("align", "right");
        jobjTemp.put("pdfwidth", 150);
        jarrColumns.put(jobjTemp);


        jobjTemp = new JSONObject();
        jobjTemp.put("header", "<b>" + messageSource.getMessage("acc.gstr1.IGST", null, requestcontextutilsobj) + "<b>");
        jobjTemp.put("dataIndex", "igstamt");
        jobjTemp.put("width", 150);
        jobjTemp.put("hidden", hideFlag);
        jobjTemp.put("renderer", "WtfGlobal.withoutRateCurrencyDeletedSymbol");
        jobjTemp.put("align", "right");
        jobjTemp.put("pdfwidth", 150);
        jarrColumns.put(jobjTemp);

        jobjTemp = new JSONObject();
        jobjTemp.put("header", "<b>" + messageSource.getMessage("acc.gstr1.CGST", null, requestcontextutilsobj) + "<b>");
        jobjTemp.put("dataIndex", "cgstamt");
        jobjTemp.put("width", 150);
        jobjTemp.put("hidden", hideFlag);
        jobjTemp.put("renderer", "WtfGlobal.withoutRateCurrencyDeletedSymbol");
        jobjTemp.put("align", "right");
        jobjTemp.put("pdfwidth", 150);
        jarrColumns.put(jobjTemp);

        jobjTemp = new JSONObject();
        jobjTemp.put("header", "<b>" + messageSource.getMessage("acc.gstr1.SGST", null, requestcontextutilsobj) + "<b>");
        jobjTemp.put("dataIndex", "sgstamt");
        jobjTemp.put("width", 150);
        jobjTemp.put("hidden", hideFlag);
        jobjTemp.put("renderer", "WtfGlobal.withoutRateCurrencyDeletedSymbol");
        jobjTemp.put("align", "right");
        jobjTemp.put("pdfwidth", 150);
        jarrColumns.put(jobjTemp);

        jobjTemp = new JSONObject();
        jobjTemp.put("header", "<b>" + messageSource.getMessage("acc.gstr1.CESS", null, requestcontextutilsobj) + "<b>");
        jobjTemp.put("dataIndex", "cessamt");
        jobjTemp.put("width", 150);
        jobjTemp.put("hidden", hideFlag);
        jobjTemp.put("renderer", "WtfGlobal.withoutRateCurrencyDeletedSymbol");
        jobjTemp.put("align", "right");
        jobjTemp.put("pdfwidth", 150);
        jarrColumns.put(jobjTemp);

        jobjTemp = new JSONObject();
        jobjTemp.put("header", "<b>" + messageSource.getMessage("acc.invoice.TotalTaxAmt", null, requestcontextutilsobj) + "<b>");
        jobjTemp.put("dataIndex", "sumTaxAmt");
        jobjTemp.put("width", 150);
        jobjTemp.put("hidden", hideFlag);
        jobjTemp.put("renderer", "WtfGlobal.withoutRateCurrencyDeletedSymbol");
        jobjTemp.put("align", "right");
        jobjTemp.put("pdfwidth", 150);
        jarrColumns.put(jobjTemp);
        jobjTemp = new JSONObject();
        jobjTemp.put("header", "<b>" + messageSource.getMessage("acc.gstr1.totalAmountInclTaxes", null, requestcontextutilsobj) + "<b>");
        jobjTemp.put("dataIndex", "sumTotalAmt");
        jobjTemp.put("width", 150);
        jobjTemp.put("hidden", hideFlag);
        jobjTemp.put("renderer", "WtfGlobal.withoutRateCurrencyDeletedSymbol");
        jobjTemp.put("align", "right");
        jobjTemp.put("pdfwidth", 150);
        jarrColumns.put(jobjTemp);
        jobjTemp = new JSONObject();
        jobjTemp.put("header", "<b>" + messageSource.getMessage("acc.lp.dishonouredChequeView", null, requestcontextutilsobj) + "<b>");;
        jobjTemp.put("dataIndex", "view");
        jobjTemp.put("width", 100);
        jobjTemp.put("align", "center");
        jobjTemp.put("pdfwidth", 100);
        jobjTemp.put("renderer", "function(value, css, record, row, column, store){\n"
                    + "                    return \"<img id='AcceptImg' class='add'  style='height:18px; width:18px;' src='images/report.gif' title='View Report '></img>\";}");
        
        jarrColumns.put(jobjTemp);

    }

    public void getColumnModelForATADJDetails(JSONArray jarrRecords, JSONArray jarrColumns, JSONObject params) throws JSONException {
        String storeRec = "";

        String section = params.optString("section");
        Locale requestcontextutilsobj = null;
        if (params.has("requestcontextutilsobj")) {
            requestcontextutilsobj = (Locale) params.opt("requestcontextutilsobj");
        }
        JSONObject jobjTemp = new JSONObject();
        storeRec = "date,gstin,billno,hsnno,value,taxableAmt,type,receiptno,cess,rate,sumTaxableAmt,igstamt,cgstamt,sgstamt,"
                + "cessamt,sumTaxAmt,sumTotalAmt,receiptdate"
                + ",placeofsupply,originaltype,totalTax,totalAmt,transtype,grossadvancereceived,customername";
        String[] recArr = storeRec.split(",");
        // Get those fields in record for whome, no special properties present like type, defVal, mapping etc.
        for (String rec : recArr) {
            jobjTemp = new JSONObject();
            jobjTemp.put("name", rec);
            if(rec.equals("sumTaxableAmt") || rec.equals("igstamt") || rec.equals("cgstamt") || rec.equals("sgstamt")
                    || rec.equals("cessamt")|| rec.equals("sumTaxAmt") || rec.equals("sumTotalAmt")){
                jobjTemp.put("type", "float");
            }
            jarrRecords.put(jobjTemp);
        }

        //"Customer Name"
        jobjTemp = new JSONObject();
        jobjTemp.put("header", "<b>" + messageSource.getMessage("acc.inventoryList.date", null, requestcontextutilsobj) + "<b>");
        jobjTemp.put("dataIndex", "receiptdate");
        jobjTemp.put("align", "left");
        jobjTemp.put("width", 120);
        jobjTemp.put("pdfwidth", 120);
        jarrColumns.put(jobjTemp);



        jobjTemp = new JSONObject();
        jobjTemp.put("header", "<b>" + messageSource.getMessage("acc.gstr1.gstin", null, requestcontextutilsobj) + "<b>");
        jobjTemp.put("dataIndex", "gstin");
        jobjTemp.put("align", "left");
        jobjTemp.put("width", 100);
        jobjTemp.put("pdfwidth", 100);
        jarrColumns.put(jobjTemp);
        
        jobjTemp = new JSONObject();
        jobjTemp.put("header", "<b>" + messageSource.getMessage("acc.report.chechInCheckOutReport.gridHeader.customerName", null, requestcontextutilsobj) + "<b>");
        jobjTemp.put("dataIndex", "customername");
        jobjTemp.put("align", "left");
        jobjTemp.put("width", 100);
        jobjTemp.put("pdfwidth", 100);
        jarrColumns.put(jobjTemp);
        
        jobjTemp = new JSONObject();
        jobjTemp.put("header", "<b>" + messageSource.getMessage("acc.agedPay.gridIno", null, requestcontextutilsobj) + "<b>");
        jobjTemp.put("dataIndex", "receiptno");
        jobjTemp.put("align", "left");
        jobjTemp.put("width", 110);
        jobjTemp.put("pdfwidth", 110);
        jarrColumns.put(jobjTemp);

        jobjTemp = new JSONObject();
        jobjTemp.put("header", "<b>" + messageSource.getMessage("acc.gstr1.placeofsupply", null, requestcontextutilsobj) + "<b>");
        jobjTemp.put("dataIndex", "placeofsupply");
        jobjTemp.put("align", "left");
        jobjTemp.put("summaryRenderer", "function(){\n"
                + "            return '<div class=\"grid-summary-common\">'+WtfGlobal.getLocaleText(\"acc.common.total\")+'</div>'\n"
                + "        }");
        jobjTemp.put("width", 100);
        jobjTemp.put("pdfwidth", 100);
        jarrColumns.put(jobjTemp);

        jobjTemp = new JSONObject();
        jobjTemp.put("header", "<b>" + messageSource.getMessage("acc.gstr1.taxableamount", null, requestcontextutilsobj) + "<b>");
        jobjTemp.put("dataIndex", "sumTaxableAmt");
        jobjTemp.put("width", 150);
        jobjTemp.put("summaryType", "sum");
        jobjTemp.put("summaryRenderer", "WtfGlobal.currencySummaryRenderer");
        jobjTemp.put("renderer", "WtfGlobal.withoutRateCurrencyDeletedSymbol");
        jobjTemp.put("align", "right");
        jobjTemp.put("pdfwidth", 150);
        jarrColumns.put(jobjTemp);

        jobjTemp = new JSONObject();
        jobjTemp.put("header", "<b>" + messageSource.getMessage("acc.gstr1.IGST", null, requestcontextutilsobj) + "<b>");
        jobjTemp.put("dataIndex", "igstamt");
        jobjTemp.put("width", 150);
        jobjTemp.put("summaryType", "sum");
        jobjTemp.put("summaryRenderer", "WtfGlobal.currencySummaryRenderer");
        jobjTemp.put("renderer", "WtfGlobal.withoutRateCurrencyDeletedSymbol");
        jobjTemp.put("align", "right");
        jobjTemp.put("pdfwidth", 150);
        jarrColumns.put(jobjTemp);

        jobjTemp = new JSONObject();
        jobjTemp.put("header", "<b>" + messageSource.getMessage("acc.gstr1.CGST", null, requestcontextutilsobj) + "<b>");
        jobjTemp.put("dataIndex", "cgstamt");
        jobjTemp.put("width", 150);
        jobjTemp.put("summaryType", "sum");
        jobjTemp.put("summaryRenderer", "WtfGlobal.currencySummaryRenderer");
        jobjTemp.put("renderer", "WtfGlobal.withoutRateCurrencyDeletedSymbol");
        jobjTemp.put("align", "right");
        jobjTemp.put("pdfwidth", 150);
        jarrColumns.put(jobjTemp);

        jobjTemp = new JSONObject();
        jobjTemp.put("header", "<b>" + messageSource.getMessage("acc.gstr1.SGST", null, requestcontextutilsobj) + "<b>");
        jobjTemp.put("dataIndex", "sgstamt");
        jobjTemp.put("width", 150);
        jobjTemp.put("summaryType", "sum");
        jobjTemp.put("summaryRenderer", "WtfGlobal.currencySummaryRenderer");
        jobjTemp.put("renderer", "WtfGlobal.withoutRateCurrencyDeletedSymbol");
        jobjTemp.put("align", "right");
        jobjTemp.put("pdfwidth", 150);
        jarrColumns.put(jobjTemp);

        jobjTemp = new JSONObject();
        jobjTemp.put("header", "<b>" + messageSource.getMessage("acc.gstr1.CESS", null, requestcontextutilsobj) + "<b>");
        jobjTemp.put("dataIndex", "cessamt");
        jobjTemp.put("width", 150);
        jobjTemp.put("summaryType", "sum");
        jobjTemp.put("summaryRenderer", "WtfGlobal.currencySummaryRenderer");
        jobjTemp.put("renderer", "WtfGlobal.withoutRateCurrencyDeletedSymbol");
        jobjTemp.put("align", "right");
        jobjTemp.put("pdfwidth", 150);
        jarrColumns.put(jobjTemp);

        jobjTemp = new JSONObject();
        jobjTemp.put("header", "<b>" + messageSource.getMessage("acc.invoice.TotalTaxAmt", null, requestcontextutilsobj) + "<b>");
        jobjTemp.put("dataIndex", "sumTaxAmt");
        jobjTemp.put("width", 150);
        jobjTemp.put("summaryType", "sum");
        jobjTemp.put("summaryRenderer", "WtfGlobal.currencySummaryRenderer");
        jobjTemp.put("renderer", "WtfGlobal.withoutRateCurrencyDeletedSymbol");
        jobjTemp.put("align", "right");
        jobjTemp.put("pdfwidth", 150);
        jarrColumns.put(jobjTemp);
        jobjTemp = new JSONObject();
        jobjTemp.put("header", "<b>" + messageSource.getMessage("acc.gstr1.totalAmountInclTaxes", null, requestcontextutilsobj) + "<b>");
        jobjTemp.put("dataIndex", "sumTotalAmt");
        jobjTemp.put("width", 150);
        jobjTemp.put("summaryType", "sum");
        jobjTemp.put("summaryRenderer", "WtfGlobal.currencySummaryRenderer");
        jobjTemp.put("renderer", "WtfGlobal.withoutRateCurrencyDeletedSymbol");
        jobjTemp.put("align", "right");
        jobjTemp.put("pdfwidth", 150);
        jarrColumns.put(jobjTemp);

    }
    public void getColumnModelForB2BDetails(JSONArray jarrRecords, JSONArray jarrColumns, JSONObject params) throws JSONException {
        String storeRec = "";

        String section = params.optString("section");
        Locale requestcontextutilsobj = null;
        if (params.has("requestcontextutilsobj")) {
            requestcontextutilsobj = (Locale) params.opt("requestcontextutilsobj");
        }
        JSONObject jobjTemp = new JSONObject();
        storeRec = "date,gstin,billno,hsnno,value,taxableAmt,type,invNum,cess,igstamt,cgstamt,sgstamt,entityid"
                + ",IGSTrate,IGSTamount,CGSTrate,CGSTamount,SGSTrate,SGSTamount,placeofsupply,ecomoperator,statecode,customer,originalhsnno,originaltype,totalTax,totalAmt,transtype,invoiceid,customername";
        if (params.optBoolean("isGSTR2AMatchAndReconcile", false)) {
            storeRec += ",supplierinvoiceno,vendorname";
        }
        if (params.optBoolean("isGSTR2AComparisonWindow", false)) {
            storeRec += ",status,gtaxableAmt,gtotalTax,gtotalAmt,gcess,comments,system_gstrsubmissionid,import_gstrsubmissionid,gstrsubmissionid,submissionstatus";
        }
        String[] recArr = storeRec.split(",");
        // Get those fields in record for whome, no special properties present like type, defVal, mapping etc.
        for (String rec : recArr) {
            jobjTemp = new JSONObject();
            jobjTemp.put("name", rec);
            if (rec.equals("taxableAmt") || rec.equals("igstamt") || rec.equals("cgstamt") || rec.equals("sgstamt")
                    || rec.equals("totalTax") || rec.equals("totalAmt") || rec.equals("cess")) {
                jobjTemp.put("type", "float");
            }
            jarrRecords.put(jobjTemp);
        }

        //"Customer Name"
        jobjTemp = new JSONObject();
        jobjTemp.put("header", "<b>" + messageSource.getMessage("acc.inventoryList.date", null, requestcontextutilsobj) + "<b>");
        jobjTemp.put("dataIndex", "date");
        jobjTemp.put("align", "left");
        jobjTemp.put("width", 120);
        jobjTemp.put("pdfwidth", 120);
        jarrColumns.put(jobjTemp);
        
        jobjTemp = new JSONObject();
        jobjTemp.put("header", "<b>" + messageSource.getMessage("acc.report.chechInCheckOutReport.gridHeader.customerName", null, requestcontextutilsobj) + "<b>");
        jobjTemp.put("dataIndex", "customername");
        jobjTemp.put("align", "left");
        jobjTemp.put("width", 120);
        jobjTemp.put("pdfwidth", 120);
        jarrColumns.put(jobjTemp);

        if (params.optBoolean("isGSTR1")) {
            jobjTemp = new JSONObject();
            jobjTemp.put("header", "<b>" + messageSource.getMessage("acc.grtr1.Particulars", null, requestcontextutilsobj) + "<b>");
            jobjTemp.put("dataIndex", "customer");
            jobjTemp.put("align", "left");
            jobjTemp.put("hidden", true);
            jobjTemp.put("width", 120);
            jobjTemp.put("pdfwidth", 120);
            jarrColumns.put(jobjTemp);
        }
        jobjTemp = new JSONObject();
        jobjTemp.put("header", "<b>" + messageSource.getMessage("acc.agedPay.gridIno", null, requestcontextutilsobj) + "<b>");
        jobjTemp.put("dataIndex", "invNum");
        if (params.optBoolean("isCallFromGSTR2A", false)) {
            jobjTemp.put("hidden", true);
        }
        jobjTemp.put("align", "left");
        jobjTemp.put("width", 120);
        jobjTemp.put("pdfwidth", 120);
        jarrColumns.put(jobjTemp);

        if (params.optBoolean("isGSTR2AMatchAndReconcile", false)) {
            jobjTemp = new JSONObject();
            jobjTemp.put("header", "<b>" + messageSource.getMessage("acc.invoice.SupplierInvoiceNo", null, requestcontextutilsobj) + "<b>");
            jobjTemp.put("dataIndex", "supplierinvoiceno");
            jobjTemp.put("align", "left");
            jobjTemp.put("width", 110);
            jobjTemp.put("pdfwidth", 110);
            jarrColumns.put(jobjTemp);

            jobjTemp = new JSONObject();
            jobjTemp.put("header", "<b>" + messageSource.getMessage("acc.careport.column.supplier", null, requestcontextutilsobj) + "<b>");
            jobjTemp.put("dataIndex", "vendorname");
            jobjTemp.put("align", "left");
            if (params.optBoolean("isCallFromGSTR2A", false)) {
                jobjTemp.put("hidden", true);
            }
            jobjTemp.put("width", 110);
            jobjTemp.put("pdfwidth", 110);
            jarrColumns.put(jobjTemp);
        }

        jobjTemp = new JSONObject();
        jobjTemp.put("header", "<b>" + messageSource.getMessage("acc.gstr1.gstin", null, requestcontextutilsobj) + "<b>");
        jobjTemp.put("dataIndex", "gstin");
        jobjTemp.put("align", "left");
        jobjTemp.put("width", 120);
        jobjTemp.put("pdfwidth", 120);
        jarrColumns.put(jobjTemp);

        jobjTemp = new JSONObject();
        jobjTemp.put("header", "<b>" + messageSource.getMessage("acc.gstr1.placeofsupply", null, requestcontextutilsobj) + "<b>");
        jobjTemp.put("dataIndex", "placeofsupply");
        jobjTemp.put("summaryRenderer", "function(){\n"
                + "            return '<div class=\"grid-summary-common\">'+WtfGlobal.getLocaleText(\"acc.common.total\")+'</div>'\n"
                + "        }");
        jobjTemp.put("align", "left");
        jobjTemp.put("width", 120);
        jobjTemp.put("pdfwidth", 120);
        jarrColumns.put(jobjTemp);

        jobjTemp = new JSONObject();
        jobjTemp.put("header", "<b>" + messageSource.getMessage("acc.gstr1.ecomoperator", null, requestcontextutilsobj) + "<b>");
        jobjTemp.put("dataIndex", "entityid");
        jobjTemp.put("hidden", true);
        jobjTemp.put("align", "left");
        jobjTemp.put("width", 120);
        jobjTemp.put("pdfwidth", 120);
        jarrColumns.put(jobjTemp);
        jobjTemp = new JSONObject();

        jobjTemp.put("header", "<b>" + messageSource.getMessage("acc.gstr1.taxableamount", null, requestcontextutilsobj) + "<b>");
        jobjTemp.put("dataIndex", "taxableAmt");
        jobjTemp.put("align", "right");
        if (params.optBoolean("isGSTR2AComparisonWindow", false)) {
            jobjTemp.put("renderer", "this.taxableAmountRenderer");
        } else {
            jobjTemp.put("renderer", "WtfGlobal.withoutRateCurrencyDeletedSymbol");
        }
        jobjTemp.put("summaryType", "sum");
        jobjTemp.put("summaryRenderer", "WtfGlobal.currencySummaryRenderer");
        jobjTemp.put("width", 120);
        jobjTemp.put("pdfwidth", 120);
        jarrColumns.put(jobjTemp);

        if (params.optBoolean("isGSTR1")) {
            jobjTemp = new JSONObject();
            jobjTemp.put("header", "<b>" + messageSource.getMessage("acc.gstr1.IGST", null, requestcontextutilsobj) + "<b>");
            jobjTemp.put("dataIndex", "igstamt");
            jobjTemp.put("width", 120);
            jobjTemp.put("summaryType", "sum");
            jobjTemp.put("renderer", "WtfGlobal.withoutRateCurrencyDeletedSymbol");
            jobjTemp.put("summaryRenderer", "WtfGlobal.currencySummaryRenderer");
            jobjTemp.put("align", "right");
            jobjTemp.put("pdfwidth", 120);
            jarrColumns.put(jobjTemp);

            jobjTemp = new JSONObject();
            jobjTemp.put("header", "<b>" + messageSource.getMessage("acc.gstr1.CGST", null, requestcontextutilsobj) + "<b>");
            jobjTemp.put("dataIndex", "cgstamt");
            jobjTemp.put("width", 120);
            jobjTemp.put("summaryType", "sum");
            jobjTemp.put("renderer", "WtfGlobal.withoutRateCurrencyDeletedSymbol");
            jobjTemp.put("summaryRenderer", "WtfGlobal.currencySummaryRenderer");
            jobjTemp.put("align", "right");
            jobjTemp.put("pdfwidth", 120);
            jarrColumns.put(jobjTemp);

            jobjTemp = new JSONObject();
            jobjTemp.put("header", "<b>" + messageSource.getMessage("acc.gstr1.SGST", null, requestcontextutilsobj) + "<b>");
            jobjTemp.put("dataIndex", "sgstamt");
            jobjTemp.put("width", 120);
            jobjTemp.put("renderer", "WtfGlobal.withoutRateCurrencyDeletedSymbol");
            jobjTemp.put("summaryType", "sum");
            jobjTemp.put("summaryRenderer", "WtfGlobal.currencySummaryRenderer");
            jobjTemp.put("align", "right");
            jobjTemp.put("pdfwidth", 120);
            jarrColumns.put(jobjTemp);
        }
        jobjTemp = new JSONObject();
        jobjTemp.put("header", "<b>" + messageSource.getMessage("acc.gstr1.cessamount", null, requestcontextutilsobj) + "<b>");
        jobjTemp.put("dataIndex", "cess");
        jobjTemp.put("align", "right");
        if (params.optBoolean("isGSTR2AComparisonWindow", false)) {
            jobjTemp.put("renderer", "this.totalCessRenderer");
        } else {
            jobjTemp.put("renderer", "WtfGlobal.withoutRateCurrencyDeletedSymbol");
            jobjTemp.put("summaryType", "sum");
            jobjTemp.put("summaryRenderer", "WtfGlobal.currencySummaryRenderer");
        }

        jobjTemp.put("width", 120);
        jobjTemp.put("pdfwidth", 120);
        jarrColumns.put(jobjTemp);

        jobjTemp = new JSONObject();
        jobjTemp.put("header", "<b>" + messageSource.getMessage("acc.invoice.TotalTaxAmt", null, requestcontextutilsobj) + "<b>");
        jobjTemp.put("dataIndex", "totalTax");
        jobjTemp.put("align", "right");
        if (params.optBoolean("isGSTR2AComparisonWindow", false)) {
            jobjTemp.put("renderer", "this.totalTaxRenderer");
        } else {
            jobjTemp.put("renderer", "WtfGlobal.withoutRateCurrencyDeletedSymbol");
            jobjTemp.put("summaryType", "sum");
            jobjTemp.put("summaryRenderer", "WtfGlobal.currencySummaryRenderer");
        }
        jobjTemp.put("width", 120);
        jobjTemp.put("pdfwidth", 120);
        jarrColumns.put(jobjTemp);

        jobjTemp = new JSONObject();
        jobjTemp.put("header", "<b>" + messageSource.getMessage("acc.gstr1.totalAmountInclTaxes", null, requestcontextutilsobj) + "<b>");
        jobjTemp.put("dataIndex", "totalAmt");
        jobjTemp.put("align", "right");
        if (params.optBoolean("isGSTR2AComparisonWindow", false)) {
            jobjTemp.put("renderer", "this.totalAmountRenderer");
        } else {
            jobjTemp.put("renderer", "WtfGlobal.withoutRateCurrencyDeletedSymbol");
            jobjTemp.put("summaryType", "sum");
            jobjTemp.put("summaryRenderer", "WtfGlobal.currencySummaryRenderer");
        }
        jobjTemp.put("width", 120);
        jobjTemp.put("pdfwidth", 120);
        jarrColumns.put(jobjTemp);

        if (params.optBoolean("isGSTR2AComparisonWindow", false)) {
            jobjTemp = new JSONObject();
            jobjTemp.put("header", "<b>" + messageSource.getMessage("acc.invoiceList.status", null, requestcontextutilsobj) + "<b>");
            jobjTemp.put("dataIndex", "status");
            jobjTemp.put("renderer", "this.statusRenderer");
            jobjTemp.put("align", "left");
            jobjTemp.put("width", 150);
            jobjTemp.put("pdfwidth", 150);
            jarrColumns.put(jobjTemp);

            jobjTemp = new JSONObject();
            jobjTemp.put("header", "<b>" + "Comments" + "<b>");
            jobjTemp.put("dataIndex", "comments");
            jobjTemp.put("align", "left");
            jobjTemp.put("width", 250);
            jobjTemp.put("pdfwidth", 250);
            jarrColumns.put(jobjTemp);
            
            jobjTemp = new JSONObject();
            jobjTemp.put("header", "<b>" + "Submission Status" + "<b>");
            jobjTemp.put("dataIndex", "submissionstatus");
            jobjTemp.put("align", "left");
            jobjTemp.put("width", 250);
            jobjTemp.put("pdfwidth", 250);
            jarrColumns.put(jobjTemp);
        }
    }
    public void getColumnModelForB2CSDetails(JSONArray jarrRecords, JSONArray jarrColumns, JSONObject params) throws JSONException {
        String storeRec = "";

        String section = params.optString("section");
        Locale requestcontextutilsobj = null;
        if (params.has("requestcontextutilsobj")) {
            requestcontextutilsobj = (Locale) params.opt("requestcontextutilsobj");
        }
        JSONObject jobjTemp = new JSONObject();
        storeRec = "date,gstin,billno,hsnno,value,taxableAmt,type,invNum,cess,customername"
                + ",IGSTrate,IGSTamount,CGSTrate,CGSTamount,SGSTrate,SGSTamount,placeofsupply,ecomoperator,statecode,customer,originalhsnno,originaltype,totalTax,totalAmt,transtype,rate";
        String[] recArr = storeRec.split(",");
        // Get those fields in record for whome, no special properties present like type, defVal, mapping etc.
        for (String rec : recArr) {
            jobjTemp = new JSONObject();
            jobjTemp.put("name", rec);
            if(rec.equals("taxableAmt") || rec.equals("CGSTamount") ||  rec.equals("SGSTamount") ||  rec.equals("IGSTamount")
                    ||  rec.equals("totalTax") ||  rec.equals("totalAmt") || rec.equals("cess")){
                jobjTemp.put("type", "float");
            }
            jarrRecords.put(jobjTemp);
        }

        //"Customer Name"
        jobjTemp = new JSONObject();
        jobjTemp.put("header", "<b>" + messageSource.getMessage("acc.inventoryList.date", null, requestcontextutilsobj) + "<b>");
        jobjTemp.put("dataIndex", "date");
        jobjTemp.put("align", "left");
        jobjTemp.put("width", 120);
//        jobjTemp.put("hidden", true);
        jobjTemp.put("pdfwidth", 120);
        jarrColumns.put(jobjTemp);

        jobjTemp = new JSONObject();
        jobjTemp.put("header", "<b>" + messageSource.getMessage("acc.agedPay.gridIno", null, requestcontextutilsobj) + "<b>");
        jobjTemp.put("dataIndex", "invNum");
        jobjTemp.put("align", "left");
//        jobjTemp.put("hidden", true);
        jobjTemp.put("width", 110);
        jobjTemp.put("pdfwidth", 110);
        jarrColumns.put(jobjTemp);

        jobjTemp = new JSONObject();
        jobjTemp.put("header", "<b>" + messageSource.getMessage("acc.je.type", null, requestcontextutilsobj) + "<b>");
        jobjTemp.put("dataIndex", "type");
        jobjTemp.put("align", "left");
        jobjTemp.put("width", 110);
        jobjTemp.put("pdfwidth", 110);
        jarrColumns.put(jobjTemp);

        jobjTemp = new JSONObject();
        jobjTemp.put("header", "<b>" + messageSource.getMessage("acc.report.chechInCheckOutReport.gridHeader.customerName", null, requestcontextutilsobj) + "<b>");
        jobjTemp.put("dataIndex", "customername");
        jobjTemp.put("align", "left");
        jobjTemp.put("width", 120);
        jobjTemp.put("pdfwidth", 120);
        jarrColumns.put(jobjTemp);

        jobjTemp = new JSONObject();
        jobjTemp.put("header", "<b>" + messageSource.getMessage("acc.gstr1.gstin", null, requestcontextutilsobj) + "<b>");
        jobjTemp.put("dataIndex", "gstin");
        jobjTemp.put("align", "left");
        jobjTemp.put("width", 100);
        jobjTemp.put("pdfwidth", 100);
        jarrColumns.put(jobjTemp);

        jobjTemp = new JSONObject();
        jobjTemp.put("header", "<b>" + messageSource.getMessage("acc.gstr1.placeofsupply", null, requestcontextutilsobj) + "<b>");
        jobjTemp.put("dataIndex", "placeofsupply");
        jobjTemp.put("align", "left");
        jobjTemp.put("width", 100);
        jobjTemp.put("summaryRenderer", "function(){\n"
                + "            return '<div class=\"grid-summary-common\">'+WtfGlobal.getLocaleText(\"acc.common.total\")+'</div>'\n"
                + "        }");
        jobjTemp.put("pdfwidth", 100);
        jarrColumns.put(jobjTemp);

        jobjTemp = new JSONObject();
        jobjTemp.put("header", "<b>" + messageSource.getMessage("acc.gstr1.ecomoperator", null, requestcontextutilsobj) + "<b>");
        jobjTemp.put("dataIndex", "ecomoperator");
        jobjTemp.put("hidden", true);
        jobjTemp.put("align", "left");
        jobjTemp.put("width", 100);
        jobjTemp.put("pdfwidth", 100);
        jarrColumns.put(jobjTemp);
        jobjTemp = new JSONObject();

        jobjTemp = new JSONObject();
        jobjTemp.put("header", "<b>" + messageSource.getMessage("acc.gstr1.rate%", null, requestcontextutilsobj) + "<b>");
        jobjTemp.put("dataIndex", "rate");
        jobjTemp.put("align", "left");
        jobjTemp.put("hidden", true);
        jobjTemp.put("width", 100);
        jobjTemp.put("pdfwidth", 100);
        jarrColumns.put(jobjTemp);

        jobjTemp = new JSONObject();
        jobjTemp.put("header", "<b>" + messageSource.getMessage("acc.gstr1.taxableamount", null, requestcontextutilsobj) + "<b>");
        jobjTemp.put("dataIndex", "taxableAmt");
        jobjTemp.put("summaryType", "sum");
        jobjTemp.put("summaryRenderer", "WtfGlobal.currencySummaryRenderer");
        jobjTemp.put("align", "right");
        jobjTemp.put("renderer", "WtfGlobal.withoutRateCurrencyDeletedSymbol");
        jobjTemp.put("width", 100);
        jobjTemp.put("pdfwidth", 100);
        jarrColumns.put(jobjTemp);

        jobjTemp = new JSONObject();
        jobjTemp.put("header", "<b>" + messageSource.getMessage("acc.gstr1.integratedtaxamt", null, requestcontextutilsobj) + "<b>");
        jobjTemp.put("dataIndex", "IGSTamount");
        jobjTemp.put("summaryType", "sum");
        jobjTemp.put("summaryRenderer", "WtfGlobal.currencySummaryRenderer");
//        jobjTemp.put("hidden", true);
        jobjTemp.put("align", "right");
        jobjTemp.put("renderer", "WtfGlobal.withoutRateCurrencyDeletedSymbol");
        jobjTemp.put("width", 100);
        jobjTemp.put("pdfwidth", 100);
        jarrColumns.put(jobjTemp);

        jobjTemp = new JSONObject();
        jobjTemp.put("header", "<b>" + messageSource.getMessage("acc.gstr1.centraltaxamt", null, requestcontextutilsobj) + "<b>");
        jobjTemp.put("dataIndex", "CGSTamount");
        jobjTemp.put("summaryType", "sum");
        jobjTemp.put("summaryRenderer", "WtfGlobal.currencySummaryRenderer");
//        jobjTemp.put("hidden", true);
        jobjTemp.put("align", "right");
        jobjTemp.put("renderer", "WtfGlobal.withoutRateCurrencyDeletedSymbol");
        jobjTemp.put("width", 100);
        jobjTemp.put("pdfwidth", 100);
        jarrColumns.put(jobjTemp);

        jobjTemp = new JSONObject();
        jobjTemp.put("header", "<b>" + messageSource.getMessage("acc.gstr1.statetaxamt", null, requestcontextutilsobj) + "<b>");
        jobjTemp.put("dataIndex", "SGSTamount");
        jobjTemp.put("summaryType", "sum");
        jobjTemp.put("summaryRenderer", "WtfGlobal.currencySummaryRenderer");
        jobjTemp.put("align", "right");
//        jobjTemp.put("hidden", true);
        jobjTemp.put("renderer", "WtfGlobal.withoutRateCurrencyDeletedSymbol");
        jobjTemp.put("width", 100);
        jobjTemp.put("pdfwidth", 100);
        jarrColumns.put(jobjTemp);

        jobjTemp = new JSONObject();
        jobjTemp.put("header", "<b>" + messageSource.getMessage("acc.invoice.TotalTaxAmt", null, requestcontextutilsobj) + "<b>");
        jobjTemp.put("dataIndex", "totalTax");
        jobjTemp.put("summaryType", "sum");
        jobjTemp.put("summaryRenderer", "WtfGlobal.currencySummaryRenderer");
        jobjTemp.put("align", "right");
//        jobjTemp.put("hidden", true);
        jobjTemp.put("renderer", "WtfGlobal.withoutRateCurrencyDeletedSymbol");
        jobjTemp.put("width", 100);
        jobjTemp.put("pdfwidth", 100);
        jarrColumns.put(jobjTemp);

        jobjTemp = new JSONObject();
        jobjTemp.put("header", "<b>" + messageSource.getMessage("acc.gstr1.cessamount", null, requestcontextutilsobj) + "<b>");
        jobjTemp.put("dataIndex", "cess");
        jobjTemp.put("align", "right");
        jobjTemp.put("renderer", "WtfGlobal.withoutRateCurrencyDeletedSymbol");
        jobjTemp.put("width", 100);
        jobjTemp.put("pdfwidth", 100);
        jarrColumns.put(jobjTemp);

        jobjTemp = new JSONObject();
        jobjTemp.put("header", "<b>" + messageSource.getMessage("acc.gstr1.totalAmountInclTaxes", null, requestcontextutilsobj) + "<b>");
        jobjTemp.put("dataIndex", "totalAmt");
        jobjTemp.put("summaryType", "sum");
        jobjTemp.put("summaryRenderer", "WtfGlobal.currencySummaryRenderer");
        jobjTemp.put("align", "right");
//        jobjTemp.put("hidden", true);
        jobjTemp.put("renderer", "WtfGlobal.withoutRateCurrencyDeletedSymbol");
        jobjTemp.put("width", 100);
        jobjTemp.put("pdfwidth", 100);
        jarrColumns.put(jobjTemp);

    }

    public void getColumnModelForCDNRDetails(JSONArray jarrRecords, JSONArray jarrColumns, JSONObject params) throws JSONException {
        String storeRec = "";

        String section = params.optString("section");
        Locale requestcontextutilsobj = null;
        if (params.has("requestcontextutilsobj")) {
            requestcontextutilsobj = (Locale) params.opt("requestcontextutilsobj");
        }
        JSONObject jobjTemp = new JSONObject();
        storeRec = "date,gstin,billno,hsnno,value,taxableAmt,type,invNum,cess,originalinvoiceno,originalinvoicedate,igstamt,cgstamt,sgstamt"
                + ",IGSTrate,IGSTamount,CGSTrate,CGSTamount,SGSTrate,SGSTamount,placeofsupply,ecomoperator,statecode,customername,originalhsnno,originaltype,totalTax,totalAmt,invoicetype,reasondesc,rate";
        if (params.optBoolean("isGSTR2AComparisonWindow", false)) {
            storeRec += ",status,gtaxableAmt,gtotalTax,gtotalAmt,gcess,comments,system_gstrsubmissionid,import_gstrsubmissionid,gstrsubmissionid,submissionstatus";
        }
        String[] recArr = storeRec.split(",");
        // Get those fields in record for whome, no special properties present like type, defVal, mapping etc.
        for (String rec : recArr) {
            jobjTemp = new JSONObject();
            jobjTemp.put("name", rec);
            if (rec.equals("taxableAmt") || rec.equals("igstamt") || rec.equals("cgstamt") || rec.equals("sgstamt")
                    || rec.equals("totalTax") || rec.equals("totalAmt") || rec.equals("cess")) {
                jobjTemp.put("type", "float");
            }
            jarrRecords.put(jobjTemp);
        }

        //"Customer Name"
        jobjTemp = new JSONObject();
        jobjTemp.put("header", "<b>" + messageSource.getMessage("acc.cnList.gridNoteNo", null, requestcontextutilsobj) + "<b>");
        jobjTemp.put("dataIndex", "originalinvoiceno");
        jobjTemp.put("align", "left");
        if (params.optBoolean("isCallFromGSTR2A", false)) {
            jobjTemp.put("hidden", true);
        }
        jobjTemp.put("width", 120);
        jobjTemp.put("pdfwidth", 120);
        jarrColumns.put(jobjTemp);

        jobjTemp = new JSONObject();
        jobjTemp.put("header", "<b>" + messageSource.getMessage("acc.inventoryList.date", null, requestcontextutilsobj) + "<b>");
        jobjTemp.put("dataIndex", "originalinvoicedate");
        jobjTemp.put("align", "left");
        jobjTemp.put("width", 120);
        if (params.optBoolean("isCallFromGSTR2A", false)) {
            jobjTemp.put("hidden", true);
        }
        jobjTemp.put("pdfwidth", 120);
        jarrColumns.put(jobjTemp);

        jobjTemp = new JSONObject();
        jobjTemp.put("header", "<b>" + messageSource.getMessage("acc.gstr1.originalinvoicedate", null, requestcontextutilsobj) + "<b>");
        jobjTemp.put("dataIndex", "date");
        jobjTemp.put("align", "left");
        jobjTemp.put("width", 120);
        jobjTemp.put("pdfwidth", 120);
        jarrColumns.put(jobjTemp);

        jobjTemp = new JSONObject();
        jobjTemp.put("header", "<b>" + messageSource.getMessage("acc.agedPay.gridIno", null, requestcontextutilsobj) + "<b>");
        jobjTemp.put("dataIndex", "invNum");
        jobjTemp.put("align", "left");
        jobjTemp.put("width", 110);
        jobjTemp.put("pdfwidth", 110);
        jarrColumns.put(jobjTemp);

        jobjTemp = new JSONObject();
        jobjTemp.put("header", "<b>" + messageSource.getMessage("acc.gstr1.gstin", null, requestcontextutilsobj) + "<b>");
        jobjTemp.put("dataIndex", "gstin");
        jobjTemp.put("align", "left");
        jobjTemp.put("width", 110);
        jobjTemp.put("pdfwidth", 110);
        jarrColumns.put(jobjTemp);

        jobjTemp = new JSONObject();
        jobjTemp.put("header", "<b>" + messageSource.getMessage("acc.report.chechInCheckOutReport.gridHeader.customerName", null, requestcontextutilsobj) + "<b>");
        jobjTemp.put("dataIndex", "customername");
        jobjTemp.put("align", "left");
        jobjTemp.put("width", 150);
        jobjTemp.put("pdfwidth", 150);
        jarrColumns.put(jobjTemp);
        if (params.optBoolean("isGSTR2AComparisonWindow", false)) {
            jobjTemp = new JSONObject();
            jobjTemp.put("header", "<b>" + messageSource.getMessage("acc.gstr1.invoicetype", null, requestcontextutilsobj) + "<b>");
            jobjTemp.put("dataIndex", "invoicetype");
            jobjTemp.put("align", "left");
            jobjTemp.put("width", 150);
            jobjTemp.put("pdfwidth", 150);
            jarrColumns.put(jobjTemp);
        }

        jobjTemp = new JSONObject();
        jobjTemp.put("header", "<b>" + messageSource.getMessage("acc.gstr1.reasondesc", null, requestcontextutilsobj) + "<b>");
        jobjTemp.put("dataIndex", "reasondesc");
        jobjTemp.put("align", "left");
        jobjTemp.put("width", 150);
        jobjTemp.put("pdfwidth", 150);
        jarrColumns.put(jobjTemp);

        jobjTemp = new JSONObject();
        jobjTemp.put("header", "<b>" + messageSource.getMessage("acc.gstr1.placeofsupply", null, requestcontextutilsobj) + "<b>");
        jobjTemp.put("dataIndex", "placeofsupply");
        jobjTemp.put("align", "left");
        jobjTemp.put("width", 100);
        jobjTemp.put("pdfwidth", 100);
        jarrColumns.put(jobjTemp);

        jobjTemp = new JSONObject();
        jobjTemp.put("header", "<b>" + messageSource.getMessage("acc.gstr1.taxableamount", null, requestcontextutilsobj) + "<b>");
        jobjTemp.put("dataIndex", "taxableAmt");
        jobjTemp.put("summaryType", "sum");
        jobjTemp.put("summaryRenderer", "WtfGlobal.currencySummaryRenderer");
        jobjTemp.put("align", "right");
        if (params.optBoolean("isGSTR2AComparisonWindow", false)) {
            jobjTemp.put("renderer", "this.taxableAmountRenderer");
        } else {
        jobjTemp.put("renderer", "WtfGlobal.withoutRateCurrencyDeletedSymbol");
        }
        jobjTemp.put("width", 100);
        jobjTemp.put("pdfwidth", 100);
        jarrColumns.put(jobjTemp);

        if (!params.optBoolean("isGSTR2AComparisonWindow", false)) {
            jobjTemp = new JSONObject();
            jobjTemp.put("header", "<b>" + messageSource.getMessage("acc.gstr1.IGST", null, requestcontextutilsobj) + "<b>");
            jobjTemp.put("dataIndex", "igstamt");
            jobjTemp.put("width", 120);
            jobjTemp.put("renderer", "WtfGlobal.withoutRateCurrencyDeletedSymbol");
            jobjTemp.put("summaryType", "sum");
            jobjTemp.put("summaryRenderer", "WtfGlobal.currencySummaryRenderer");
            jobjTemp.put("align", "right");
            jobjTemp.put("pdfwidth", 120);
            jarrColumns.put(jobjTemp);

            jobjTemp = new JSONObject();
            jobjTemp.put("header", "<b>" + messageSource.getMessage("acc.gstr1.CGST", null, requestcontextutilsobj) + "<b>");
            jobjTemp.put("dataIndex", "cgstamt");
            jobjTemp.put("width", 120);
            jobjTemp.put("renderer", "WtfGlobal.withoutRateCurrencyDeletedSymbol");
            jobjTemp.put("summaryType", "sum");
            jobjTemp.put("summaryRenderer", "WtfGlobal.currencySummaryRenderer");
            jobjTemp.put("align", "right");
            jobjTemp.put("pdfwidth", 120);
            jarrColumns.put(jobjTemp);

            jobjTemp = new JSONObject();
            jobjTemp.put("header", "<b>" + messageSource.getMessage("acc.gstr1.SGST", null, requestcontextutilsobj) + "<b>");
            jobjTemp.put("dataIndex", "sgstamt");
            jobjTemp.put("width", 120);
            jobjTemp.put("renderer", "WtfGlobal.withoutRateCurrencyDeletedSymbol");
            jobjTemp.put("summaryType", "sum");
            jobjTemp.put("summaryRenderer", "WtfGlobal.currencySummaryRenderer");
            jobjTemp.put("align", "right");
            jobjTemp.put("pdfwidth", 120);
            jarrColumns.put(jobjTemp);
            jobjTemp = new JSONObject();
            jobjTemp.put("header", "<b>" + messageSource.getMessage("acc.gstr1.cessamount", null, requestcontextutilsobj) + "<b>");
            jobjTemp.put("dataIndex", "cess");
            jobjTemp.put("align", "right");
            jobjTemp.put("renderer", "WtfGlobal.withoutRateCurrencyDeletedSymbol");
            jobjTemp.put("summaryType", "sum");
            jobjTemp.put("summaryRenderer", "WtfGlobal.currencySummaryRenderer");
            jobjTemp.put("width", 120);
            jobjTemp.put("pdfwidth", 120);
            jarrColumns.put(jobjTemp);
        }
        jobjTemp = new JSONObject();
        jobjTemp.put("header", "<b>" + messageSource.getMessage("acc.invoice.TotalTaxAmt", null, requestcontextutilsobj) + "<b>");
        jobjTemp.put("dataIndex", "totalTax");
        jobjTemp.put("summaryType", "sum");
        jobjTemp.put("summaryRenderer", "WtfGlobal.currencySummaryRenderer");
        jobjTemp.put("align", "right");
        if (params.optBoolean("isGSTR2AComparisonWindow", false)) {
            jobjTemp.put("renderer", "this.totalTaxRenderer");
        } else {
            jobjTemp.put("renderer", "WtfGlobal.withoutRateCurrencyDeletedSymbol");
        }
        jobjTemp.put("width", 100);
        jobjTemp.put("pdfwidth", 100);
        jarrColumns.put(jobjTemp);

        jobjTemp = new JSONObject();
        jobjTemp.put("header", "<b>" + messageSource.getMessage("acc.gstr1.totalAmountInclTaxes", null, requestcontextutilsobj) + "<b>");
        jobjTemp.put("dataIndex", "totalAmt");
        jobjTemp.put("summaryType", "sum");
        jobjTemp.put("summaryRenderer", "WtfGlobal.currencySummaryRenderer");
        jobjTemp.put("align", "right");
        if (params.optBoolean("isGSTR2AComparisonWindow", false)) {
            jobjTemp.put("renderer", "this.totalAmountRenderer");
        } else {
            jobjTemp.put("renderer", "WtfGlobal.withoutRateCurrencyDeletedSymbol");
        }
        jobjTemp.put("width", 100);
        jobjTemp.put("pdfwidth", 100);
        jarrColumns.put(jobjTemp);

        if (params.optBoolean("isGSTR2AComparisonWindow", false)) {
            jobjTemp = new JSONObject();
            jobjTemp.put("header", "<b>" + messageSource.getMessage("acc.invoiceList.status", null, requestcontextutilsobj) + "<b>");
            jobjTemp.put("dataIndex", "status");
            jobjTemp.put("renderer", "this.statusRenderer");
            jobjTemp.put("align", "left");
            jobjTemp.put("width", 150);
            jobjTemp.put("pdfwidth", 150);
            jarrColumns.put(jobjTemp);

            jobjTemp = new JSONObject();
            jobjTemp.put("header", "<b>" + "Comments" + "<b>");
            jobjTemp.put("dataIndex", "comments");
            jobjTemp.put("align", "left");
            jobjTemp.put("width", 250);
            jobjTemp.put("pdfwidth", 250);
            jarrColumns.put(jobjTemp);
            
            jobjTemp = new JSONObject();
            jobjTemp.put("header", "<b>" + "Submission Status" + "<b>");
            jobjTemp.put("dataIndex", "submissionstatus");
            jobjTemp.put("align", "left");
            jobjTemp.put("width", 250);
            jobjTemp.put("pdfwidth", 250);
            jarrColumns.put(jobjTemp);
        }
    }
    public void getColumnModelForCDNURDetails(JSONArray jarrRecords, JSONArray jarrColumns, JSONObject params) throws JSONException {
        String storeRec = "";

        String section = params.optString("section");
        Locale requestcontextutilsobj = null;
        if (params.has("requestcontextutilsobj")) {
            requestcontextutilsobj = (Locale) params.opt("requestcontextutilsobj");
        }
        JSONObject jobjTemp = new JSONObject();
        storeRec = "date,gstin,billno,hsnno,value,taxableAmt,type,invNum,cess,cnno,originalinvoicedate,cgstamt,sgstamt,igstamt,cess,originalinvoiceno"
                + ",IGSTrate,IGSTamount,CGSTrate,CGSTamount,SGSTrate,SGSTamount,placeofsupply,ecomoperator,statecode,customername,originalhsnno,originaltype,totalTax,totalAmt,invoicetype,reasondesc,rate";
        if (params.optBoolean("isGSTR2AComparisonWindow", false)) {
            storeRec += ",status,gtaxableAmt,gtotalTax,gtotalAmt,gcess,comments";
        }
        String[] recArr = storeRec.split(",");
        // Get those fields in record for whome, no special properties present like type, defVal, mapping etc.
        for (String rec : recArr) {
            jobjTemp = new JSONObject();
            jobjTemp.put("name", rec);
            if (rec.equals("taxableAmt") || rec.equals("igstamt") || rec.equals("cgstamt") || rec.equals("sgstamt")
                    || rec.equals("totalTax") || rec.equals("totalAmt") || rec.equals("cess")) {
                jobjTemp.put("type", "float");
            }
            jarrRecords.put(jobjTemp);
        }

        jobjTemp = new JSONObject();
        jobjTemp.put("header", "<b>" + messageSource.getMessage("acc.inventoryList.date", null, requestcontextutilsobj) + "<b>");
        jobjTemp.put("dataIndex", "originalinvoicedate");
        jobjTemp.put("align", "left");
        jobjTemp.put("width", 120);
        jobjTemp.put("pdfwidth", 120);
        jarrColumns.put(jobjTemp);

        jobjTemp = new JSONObject();
        jobjTemp.put("header", "<b>" + messageSource.getMessage("acc.gstr1.gstin", null, requestcontextutilsobj) + "<b>");
        jobjTemp.put("dataIndex", "gstin");
        jobjTemp.put("align", "left");
        jobjTemp.put("width", 100);
        jobjTemp.put("pdfwidth", 100);
        jarrColumns.put(jobjTemp);
        
        jobjTemp = new JSONObject();
        jobjTemp.put("header", "<b>" + messageSource.getMessage("acc.contractActivityPanel.AccountName", null, requestcontextutilsobj) + "<b>");
        jobjTemp.put("dataIndex", "customername");
        jobjTemp.put("align", "left");
        jobjTemp.put("width", 120);
        jobjTemp.put("pdfwidth", 120);
        jarrColumns.put(jobjTemp);
        
        jobjTemp = new JSONObject();
        jobjTemp.put("header", "<b>" + messageSource.getMessage("acc.gstr1.placeofsupply", null, requestcontextutilsobj) + "<b>");
        jobjTemp.put("dataIndex", "placeofsupply");
        jobjTemp.put("align", "left");
        jobjTemp.put("summaryRenderer", "function(){\n"
                + "            return '<div class=\"grid-summary-common\">'+WtfGlobal.getLocaleText(\"acc.common.total\")+'</div>'\n"
                + "        }");
        jobjTemp.put("width", 120);
        jobjTemp.put("pdfwidth", 120);
        jarrColumns.put(jobjTemp);

        //"Customer Name"
        jobjTemp = new JSONObject();
        jobjTemp.put("header", "<b>" + messageSource.getMessage("acc.cnList.gridNoteNo", null, requestcontextutilsobj) + "<b>");
        jobjTemp.put("dataIndex", "originalinvoiceno");
        jobjTemp.put("align", "left");
        jobjTemp.put("width", 120);
        jobjTemp.put("pdfwidth", 120);
        jarrColumns.put(jobjTemp);

        jobjTemp = new JSONObject();
        jobjTemp.put("header", "<b>" + messageSource.getMessage("acc.gstr1.originalinvoicedate", null, requestcontextutilsobj) + "<b>");
        jobjTemp.put("dataIndex", "date");
        jobjTemp.put("align", "left");
        jobjTemp.put("width", 120);
        jobjTemp.put("pdfwidth", 120);
        jarrColumns.put(jobjTemp);

        jobjTemp = new JSONObject();
        jobjTemp.put("header", "<b>" + messageSource.getMessage("acc.agedPay.gridIno", null, requestcontextutilsobj) + "<b>");
        jobjTemp.put("dataIndex", "invNum");
        jobjTemp.put("align", "left");
        jobjTemp.put("width", 120);
        jobjTemp.put("pdfwidth", 120);
        jarrColumns.put(jobjTemp);
        
        jobjTemp = new JSONObject();
        jobjTemp.put("header", "<b>" + messageSource.getMessage("acc.gstr1.reasondesc", null, requestcontextutilsobj) + "<b>");
        jobjTemp.put("dataIndex", "reasondesc");
        jobjTemp.put("align", "left");
        jobjTemp.put("width", 150);
        jobjTemp.put("pdfwidth", 150);
        jarrColumns.put(jobjTemp);
        
        jobjTemp = new JSONObject();
        jobjTemp.put("header", "<b>" + messageSource.getMessage("acc.gstr1.taxableamount", null, requestcontextutilsobj) + "<b>");
        jobjTemp.put("dataIndex", "taxableAmt");
        jobjTemp.put("align", "right");
        jobjTemp.put("renderer", "WtfGlobal.withoutRateCurrencyDeletedSymbol");
        jobjTemp.put("summaryType", "sum");
        jobjTemp.put("summaryRenderer", "WtfGlobal.currencySummaryRenderer");
        jobjTemp.put("width", 120);
        jobjTemp.put("pdfwidth", 120);
        jarrColumns.put(jobjTemp);

        jobjTemp = new JSONObject();
        jobjTemp.put("header", "<b>" + messageSource.getMessage("acc.gstr1.IGST", null, requestcontextutilsobj) + "<b>");
        jobjTemp.put("dataIndex", "igstamt");
        jobjTemp.put("width", 120);
        jobjTemp.put("renderer", "WtfGlobal.withoutRateCurrencyDeletedSymbol");
        jobjTemp.put("summaryType", "sum");
        jobjTemp.put("summaryRenderer", "WtfGlobal.currencySummaryRenderer");
        jobjTemp.put("align", "right");
        jobjTemp.put("pdfwidth", 120);
        jarrColumns.put(jobjTemp);

        jobjTemp = new JSONObject();
        jobjTemp.put("header", "<b>" + messageSource.getMessage("acc.gstr1.CGST", null, requestcontextutilsobj) + "<b>");
        jobjTemp.put("dataIndex", "cgstamt");
        jobjTemp.put("width", 120);
        jobjTemp.put("renderer", "WtfGlobal.withoutRateCurrencyDeletedSymbol");
        jobjTemp.put("summaryType", "sum");
        jobjTemp.put("summaryRenderer", "WtfGlobal.currencySummaryRenderer");
        jobjTemp.put("align", "right");
        jobjTemp.put("pdfwidth", 120);
        jarrColumns.put(jobjTemp);

        jobjTemp = new JSONObject();
        jobjTemp.put("header", "<b>" + messageSource.getMessage("acc.gstr1.SGST", null, requestcontextutilsobj) + "<b>");
        jobjTemp.put("dataIndex", "sgstamt");
        jobjTemp.put("width", 120);
        jobjTemp.put("renderer", "WtfGlobal.withoutRateCurrencyDeletedSymbol");
        jobjTemp.put("summaryType", "sum");
        jobjTemp.put("summaryRenderer", "WtfGlobal.currencySummaryRenderer");
        jobjTemp.put("align", "right");
        jobjTemp.put("pdfwidth", 120);
        jarrColumns.put(jobjTemp);
        jobjTemp = new JSONObject();
        jobjTemp.put("header", "<b>" + messageSource.getMessage("acc.gstr1.cessamount", null, requestcontextutilsobj) + "<b>");
        jobjTemp.put("dataIndex", "cess");
        jobjTemp.put("align", "right");
        jobjTemp.put("renderer", "WtfGlobal.withoutRateCurrencyDeletedSymbol");
        jobjTemp.put("summaryType", "sum");
        jobjTemp.put("summaryRenderer", "WtfGlobal.currencySummaryRenderer");
        jobjTemp.put("width", 120);
        jobjTemp.put("pdfwidth", 120);
        jarrColumns.put(jobjTemp);

        jobjTemp = new JSONObject();
        jobjTemp.put("header", "<b>" + messageSource.getMessage("acc.invoice.TotalTaxAmt", null, requestcontextutilsobj) + "<b>");
        jobjTemp.put("dataIndex", "totalTax");
        jobjTemp.put("align", "right");
        jobjTemp.put("renderer", "WtfGlobal.withoutRateCurrencyDeletedSymbol");
        jobjTemp.put("summaryType", "sum");
        jobjTemp.put("summaryRenderer", "WtfGlobal.currencySummaryRenderer");
        jobjTemp.put("pdfwidth", 120);
        jobjTemp.put("width", 120);
        jarrColumns.put(jobjTemp);

        jobjTemp = new JSONObject();
        jobjTemp.put("header", "<b>" + messageSource.getMessage("acc.gstr1.totalAmountInclTaxes", null, requestcontextutilsobj) + "<b>");
        jobjTemp.put("dataIndex", "totalAmt");
        jobjTemp.put("align", "right");
        jobjTemp.put("renderer", "WtfGlobal.withoutRateCurrencyDeletedSymbol");
        jobjTemp.put("summaryType", "sum");
        jobjTemp.put("summaryRenderer", "WtfGlobal.currencySummaryRenderer");
        jobjTemp.put("width", 120);
        jobjTemp.put("pdfwidth", 120);
        jarrColumns.put(jobjTemp);

    }
    public void getColumnModelForEXEMPDetails(JSONArray jarrRecords, JSONArray jarrColumns, JSONObject params) throws JSONException {
        String storeRec = "";

        String section = params.optString("section");
        Locale requestcontextutilsobj = null;
        if (params.has("requestcontextutilsobj")) {
            requestcontextutilsobj = (Locale) params.opt("requestcontextutilsobj");
        }
        JSONObject jobjTemp = new JSONObject();
        storeRec = "description,nilratedsupplies,exempted,nongstsupplies,companyname";

        String[] recArr = storeRec.split(",");
        // Get those fields in record for whome, no special properties present like type, defVal, mapping etc.
        for (String rec : recArr) {
            jobjTemp = new JSONObject();
            jobjTemp.put("name", rec);
            jarrRecords.put(jobjTemp);
        }
        jobjTemp = new JSONObject();
        jobjTemp.put("header", "Company");
        jobjTemp.put("dataIndex", "companyname");
        jobjTemp.put("hidden", true);
        jobjTemp.put("width", 120);
        jobjTemp.put("pdfwidth", 120);
        jarrColumns.put(jobjTemp);
        //"Customer Name"
        jobjTemp = new JSONObject();
        jobjTemp.put("header", "<b>" + messageSource.getMessage("acc.masterConfig.taxes.gridDescription", null, requestcontextutilsobj) + "<b>");
        jobjTemp.put("dataIndex", "description");
        jobjTemp.put("align", "left");
        jobjTemp.put("width", 120);
        jobjTemp.put("pdfwidth", 120);
        jarrColumns.put(jobjTemp);

        String header = messageSource.getMessage("acc.gstr1.nilratedsupplies", null, requestcontextutilsobj);
        if (params.optBoolean("isPurchase", false)) {
            header = "Taxable Amount";
        }
        jobjTemp = new JSONObject();
        jobjTemp.put("header", "<b>"+header+"<b>");
        jobjTemp.put("dataIndex", "nilratedsupplies");
        jobjTemp.put("align", "right");
        jobjTemp.put("renderer", "WtfGlobal.withoutRateCurrencyDeletedSymbol");
        jobjTemp.put("width", 120);
        jobjTemp.put("pdfwidth", 120);
        jarrColumns.put(jobjTemp);

        jobjTemp = new JSONObject();
        jobjTemp.put("header", "<b>" + messageSource.getMessage("acc.gstr1.exempted", null, requestcontextutilsobj) + "<b>");
        jobjTemp.put("dataIndex", "exempted");
        jobjTemp.put("align", "right");
        jobjTemp.put("hidden", params.optBoolean("isPurchase",false));
        jobjTemp.put("renderer", "WtfGlobal.withoutRateCurrencyDeletedSymbol");
        jobjTemp.put("width", 120);
        jobjTemp.put("pdfwidth", 120);
        jarrColumns.put(jobjTemp);

        jobjTemp = new JSONObject();
        jobjTemp.put("header", "<b>" + messageSource.getMessage("acc.gstr1.nongstsupplies", null, requestcontextutilsobj) + "<b>");
        jobjTemp.put("dataIndex", "nongstsupplies");
        jobjTemp.put("align", "right");
        jobjTemp.put("hidden", params.optBoolean("isPurchase",false));
        jobjTemp.put("renderer", "WtfGlobal.withoutRateCurrencyDeletedSymbol");
        jobjTemp.put("width", 120);
        jobjTemp.put("pdfwidth", 120);
        jarrColumns.put(jobjTemp);

    }
    public void getColumnModelForTCSTDSDetails(JSONArray jarrRecords, JSONArray jarrColumns, JSONObject params) throws JSONException {
        String storeRec = "";

        String section = params.optString("section");
        Locale requestcontextutilsobj = null;
        if (params.has("requestcontextutilsobj")) {
            requestcontextutilsobj = (Locale) params.opt("requestcontextutilsobj");
        }
        JSONObject jobjTemp = new JSONObject();
        storeRec = "journalentryno,journalentryid,jeamount";

        String[] recArr = storeRec.split(",");
        // Get those fields in record for whome, no special properties present like type, defVal, mapping etc.
        for (String rec : recArr) {
            jobjTemp = new JSONObject();
            jobjTemp.put("name", rec);
            jarrRecords.put(jobjTemp);
        }

        //"Customer Name"
        jobjTemp = new JSONObject();
        jobjTemp.put("header", "<b>" + messageSource.getMessage("acc.dnList.gridJEno", null, requestcontextutilsobj) + "<b>");
        jobjTemp.put("dataIndex", "journalentryno");
        jobjTemp.put("align", "right");
        jobjTemp.put("width", 120);
        jobjTemp.put("pdfwidth", 120);
        jarrColumns.put(jobjTemp);

        jobjTemp = new JSONObject();
        jobjTemp.put("header", "<b>" + messageSource.getMessage("acc.assetworkorder.TotalAmount", null, requestcontextutilsobj) + "<b>");
        jobjTemp.put("dataIndex", "jeamount");
        jobjTemp.put("align", "right");
        jobjTemp.put("hidden", false);
        jobjTemp.put("renderer", "WtfGlobal.withoutRateCurrencyDeletedSymbol");
        jobjTemp.put("width", 120);
        jobjTemp.put("pdfwidth", 120);
        jarrColumns.put(jobjTemp);

    }
    public void getColumnModelForDOCSDetails(JSONArray jarrRecords, JSONArray jarrColumns, JSONObject params) throws JSONException {
        String storeRec = "";

        String section = params.optString("section");
        Locale requestcontextutilsobj = null;
        if (params.has("requestcontextutilsobj")) {
            requestcontextutilsobj = (Locale) params.opt("requestcontextutilsobj");
        }
        JSONObject jobjTemp = new JSONObject();
        storeRec = "natureofdocument,fromInv,toInv,noofinvoices,companyname";

        String[] recArr = storeRec.split(",");
        // Get those fields in record for whome, no special properties present like type, defVal, mapping etc.
        for (String rec : recArr) {
            jobjTemp = new JSONObject();
            jobjTemp.put("name", rec);
            jarrRecords.put(jobjTemp);
        }

        jobjTemp = new JSONObject();
        jobjTemp.put("header", "Company");
        jobjTemp.put("dataIndex", "companyname");
        jobjTemp.put("hidden", true);
        jobjTemp.put("width", 120);
        jobjTemp.put("pdfwidth", 120);
        jarrColumns.put(jobjTemp);
        //"Customer Name"
        jobjTemp = new JSONObject();
        jobjTemp.put("header", "<b>" + messageSource.getMessage("acc.gstr1.natureofdocument", null, requestcontextutilsobj) + "<b>");
        jobjTemp.put("dataIndex", "natureofdocument");
        jobjTemp.put("align", "left");
        jobjTemp.put("width", 120);
        jobjTemp.put("pdfwidth", 120);
        jarrColumns.put(jobjTemp);

        jobjTemp = new JSONObject();
        jobjTemp.put("header", "<b>" + messageSource.getMessage("acc.gstr1.from", null, requestcontextutilsobj) + "<b>");
        jobjTemp.put("dataIndex", "fromInv");
        jobjTemp.put("align", "left");
        jobjTemp.put("width", 120);
        jobjTemp.put("pdfwidth", 120);
        jarrColumns.put(jobjTemp);

        jobjTemp = new JSONObject();
        jobjTemp.put("header", "<b>" + messageSource.getMessage("acc.gstr1.to", null, requestcontextutilsobj) + "<b>");
        jobjTemp.put("dataIndex", "toInv");
        jobjTemp.put("align", "left");
        jobjTemp.put("width", 120);
        jobjTemp.put("pdfwidth", 120);
        jarrColumns.put(jobjTemp);

        jobjTemp = new JSONObject();
        jobjTemp.put("header", "<b>" + messageSource.getMessage("acc.gstr1.numberofinvoices", null, requestcontextutilsobj) + "<b>");
        jobjTemp.put("dataIndex", "noofinvoices");
        jobjTemp.put("align", "left");
        jobjTemp.put("width", 120);
        jobjTemp.put("pdfwidth", 120);
        jarrColumns.put(jobjTemp);

    }

    public void getColumnModelForExportDetails(JSONArray jarrRecords, JSONArray jarrColumns, JSONObject params) throws JSONException {
        String storeRec = "";

        String section = params.optString("section");
        Locale requestcontextutilsobj = null;
        if (params.has("requestcontextutilsobj")) {
            requestcontextutilsobj = (Locale) params.opt("requestcontextutilsobj");
        }
        JSONObject jobjTemp = new JSONObject();
        storeRec = "date,gstin,billno,hsnno,value,taxableAmt,type,invNum,cess,shippingbillnumber"
                + ",shippingbillportcode,shippingbilldate,placeofsupply,ecomoperator,statecode,customer,originalhsnno,originaltype,totalTax,totalAmt,invoicetype,reasondesc,rate";
        String[] recArr = storeRec.split(",");
        // Get those fields in record for whome, no special properties present like type, defVal, mapping etc.
        for (String rec : recArr) {
            jobjTemp = new JSONObject();
            jobjTemp.put("name", rec);
            jarrRecords.put(jobjTemp);
        }

        //"Customer Name"
        jobjTemp = new JSONObject();
        jobjTemp.put("header", "<b>" + messageSource.getMessage("acc.inventoryList.date", null, requestcontextutilsobj) + "<b>");
        jobjTemp.put("dataIndex", "date");
        jobjTemp.put("align", "left");
        jobjTemp.put("width", 120);
        jobjTemp.put("pdfwidth", 120);
        jarrColumns.put(jobjTemp);

        jobjTemp = new JSONObject();
        jobjTemp.put("header", "<b>" + messageSource.getMessage("acc.agedPay.gridIno", null, requestcontextutilsobj) + "<b>");
        jobjTemp.put("dataIndex", "invNum");
        jobjTemp.put("align", "left");
        jobjTemp.put("width", 110);
        jobjTemp.put("pdfwidth", 110);
        jarrColumns.put(jobjTemp);

        jobjTemp = new JSONObject();
        jobjTemp.put("header", "<b>" + messageSource.getMessage("acc.gstr1.shippingbillportcode", null, requestcontextutilsobj) + "<b>");
        jobjTemp.put("dataIndex", "shippingbillportcode");
        jobjTemp.put("align", "left");
        jobjTemp.put("width", 110);
        jobjTemp.put("pdfwidth", 110);
        jarrColumns.put(jobjTemp);

        jobjTemp = new JSONObject();
        jobjTemp.put("header", "<b>" + messageSource.getMessage("acc.gstr1.shippingbilldate", null, requestcontextutilsobj) + "<b>");
        jobjTemp.put("dataIndex", "shippingbilldate");
        jobjTemp.put("align", "left");
        jobjTemp.put("width", 110);
        jobjTemp.put("pdfwidth", 110);
        jarrColumns.put(jobjTemp);

        jobjTemp = new JSONObject();
        jobjTemp.put("header", "<b>" + messageSource.getMessage("acc.gstr1.shippingbillnumber", null, requestcontextutilsobj) + "<b>");
        jobjTemp.put("dataIndex", "shippingbillnumber");
        jobjTemp.put("align", "left");
        jobjTemp.put("width", 110);
        jobjTemp.put("pdfwidth", 110);
        jarrColumns.put(jobjTemp);

        jobjTemp = new JSONObject();
        jobjTemp.put("header", "<b>" + messageSource.getMessage("acc.gstr1.exporttype", null, requestcontextutilsobj) + "<b>");
        jobjTemp.put("dataIndex", "shippingbillnumber");
        jobjTemp.put("align", "left");
        jobjTemp.put("width", 110);
        jobjTemp.put("pdfwidth", 110);
        jarrColumns.put(jobjTemp);

        jobjTemp = new JSONObject();
        jobjTemp.put("header", "<b>" + messageSource.getMessage("acc.invoice.customer", null, requestcontextutilsobj) + "<b>");
        jobjTemp.put("dataIndex", "customer");
        jobjTemp.put("hidden", true);
        jobjTemp.put("align", "left");
        jobjTemp.put("width", 150);
        jobjTemp.put("pdfwidth", 150);
        jarrColumns.put(jobjTemp);

        jobjTemp = new JSONObject();
        jobjTemp.put("header", "<b>" + messageSource.getMessage("acc.gstr1.invoicetype", null, requestcontextutilsobj) + "<b>");
        jobjTemp.put("dataIndex", "invoicetype");
        jobjTemp.put("align", "left");
        jobjTemp.put("width", 150);
        jobjTemp.put("pdfwidth", 150);
        jarrColumns.put(jobjTemp);

        jobjTemp = new JSONObject();
        jobjTemp.put("header", "<b>" + messageSource.getMessage("acc.gstr1.reasondesc", null, requestcontextutilsobj) + "<b>");
        jobjTemp.put("dataIndex", "reasondesc");
        jobjTemp.put("align", "left");
        jobjTemp.put("width", 150);
        jobjTemp.put("pdfwidth", 150);
        jarrColumns.put(jobjTemp);

        jobjTemp = new JSONObject();
        jobjTemp.put("header", "<b>" + messageSource.getMessage("acc.gstr1.placeofsupply", null, requestcontextutilsobj) + "<b>");
        jobjTemp.put("dataIndex", "placeofsupply");
        jobjTemp.put("align", "left");
        jobjTemp.put("width", 100);
        jobjTemp.put("pdfwidth", 100);
        jarrColumns.put(jobjTemp);
        jobjTemp = new JSONObject();
        jobjTemp.put("header", "<b>" + messageSource.getMessage("acc.gstr1.taxableamount", null, requestcontextutilsobj) + "<b>");
        jobjTemp.put("dataIndex", "taxableAmt");
        jobjTemp.put("align", "right");
        jobjTemp.put("width", 100);
        jobjTemp.put("renderer", "WtfGlobal.withoutRateCurrencyDeletedSymbol");
        jobjTemp.put("pdfwidth", 100);
        jarrColumns.put(jobjTemp);
        jobjTemp = new JSONObject();
        jobjTemp.put("header", "<b>" + messageSource.getMessage("acc.invoice.TotalTaxAmt", null, requestcontextutilsobj) + "<b>");
        jobjTemp.put("dataIndex", "totalTax");
        jobjTemp.put("align", "right");
        jobjTemp.put("width", 100);
        jobjTemp.put("renderer", "WtfGlobal.withoutRateCurrencyDeletedSymbol");
        jobjTemp.put("pdfwidth", 100);
        jarrColumns.put(jobjTemp);

        jobjTemp = new JSONObject();
        jobjTemp.put("header", "<b>" + messageSource.getMessage("acc.gstr1.totalAmountInclTaxes", null, requestcontextutilsobj) + "<b>");
        jobjTemp.put("dataIndex", "totalAmt");
        jobjTemp.put("align", "right");
        jobjTemp.put("renderer", "WtfGlobal.withoutRateCurrencyDeletedSymbol");
        jobjTemp.put("width", 100);
        jobjTemp.put("pdfwidth", 100);
        jarrColumns.put(jobjTemp);

    }

    public void getColumnModelForHSNDetails(JSONArray jarrRecords, JSONArray jarrColumns, JSONObject params) throws JSONException {
        String storeRec = "";

        String section = params.optString("section");
        Locale requestcontextutilsobj = null;
        if (params.has("requestcontextutilsobj")) {
            requestcontextutilsobj = (Locale) params.opt("requestcontextutilsobj");
        }
        JSONObject jobjTemp = new JSONObject();
        storeRec = "date,gstin,billno,hsnno,value,taxableAmt,type,invNum,cess,description,uqc,totalquantity"
                + ",IGSTrate,IGSTamount,CGSTrate,CGSTamount,SGSTrate,SGSTamount,placeofsupply,ecomoperator,statecode,customer,originalhsnno,originaltype,totaltax,totalAmt,transtype,rate";
        String[] recArr = storeRec.split(",");
        // Get those fields in record for whome, no special properties present like type, defVal, mapping etc.
        for (String rec : recArr) {
            jobjTemp = new JSONObject();
            jobjTemp.put("name", rec);
            if (rec.equals("taxableAmt") || rec.equals("CGSTamount") || rec.equals("SGSTamount") || rec.equals("IGSTamount")
                    || rec.equals("totalTax") || rec.equals("totalAmt") || rec.equals("cess") || rec.equals("totalquantity")) {
                jobjTemp.put("type", "float");
            }
            jarrRecords.put(jobjTemp);
        }

        //"Customer Name"
        jobjTemp = new JSONObject();
        jobjTemp.put("header", "<b>" + messageSource.getMessage("acc.product.HSNcode", null, requestcontextutilsobj) + "<b>");
        jobjTemp.put("dataIndex", "hsnno");
        jobjTemp.put("align", "left");
        jobjTemp.put("width", 120);
        jobjTemp.put("pdfwidth", 120);
        jarrColumns.put(jobjTemp);

        jobjTemp = new JSONObject();
        jobjTemp.put("header", "<b>" + messageSource.getMessage("acc.agedPay.gridIno", null, requestcontextutilsobj) + "<b>");
        jobjTemp.put("dataIndex", "invNum");
        jobjTemp.put("align", "left");
        jobjTemp.put("width", 110);
        jobjTemp.put("pdfwidth", 110);
        jarrColumns.put(jobjTemp);

        jobjTemp = new JSONObject();
        jobjTemp.put("header", "<b>" + messageSource.getMessage("acc.masterConfig.taxes.gridDescription", null, requestcontextutilsobj) + "<b>");
        jobjTemp.put("dataIndex", "description");
        jobjTemp.put("align", "left");
        jobjTemp.put("width", 110);
        jobjTemp.put("pdfwidth", 110);
        jarrColumns.put(jobjTemp);

        jobjTemp = new JSONObject();
        jobjTemp.put("header", "<b>" + messageSource.getMessage("acc.gstr1.uqc", null, requestcontextutilsobj) + "<b>");
        jobjTemp.put("dataIndex", "uqc");
        jobjTemp.put("align", "left");
        jobjTemp.put("summaryRenderer", "function(){\n"
                + "            return '<div class=\"grid-summary-common\">'+WtfGlobal.getLocaleText(\"acc.common.total\")+'</div>'\n"
                + "        }");
        jobjTemp.put("width", 110);
        jobjTemp.put("pdfwidth", 110);
        jarrColumns.put(jobjTemp);

        jobjTemp = new JSONObject();
        jobjTemp.put("header", "<b>" + messageSource.getMessage("acc.mastercontract.totalquantity", null, requestcontextutilsobj) + "<b>");
        jobjTemp.put("dataIndex", "totalquantity");
        jobjTemp.put("summaryType", "sum");
        jobjTemp.put("summaryRenderer", "WtfGlobal.currencySummaryRenderer");
        jobjTemp.put("align", "left");
        jobjTemp.put("width", 150);
        jobjTemp.put("pdfwidth", 150);
        jarrColumns.put(jobjTemp);

        jobjTemp = new JSONObject();
        jobjTemp.put("header", "<b>" + messageSource.getMessage("acc.gstr1.gstin", null, requestcontextutilsobj) + "<b>");
        jobjTemp.put("dataIndex", "gstin");
        jobjTemp.put("align", "left");
        jobjTemp.put("hidden", true);
        jobjTemp.put("width", 100);
        jobjTemp.put("pdfwidth", 100);
        jarrColumns.put(jobjTemp);

        jobjTemp = new JSONObject();
        jobjTemp.put("header", "<b>" + messageSource.getMessage("acc.gstr1.taxableamount", null, requestcontextutilsobj) + "<b>");
        jobjTemp.put("dataIndex", "taxableAmt");
        jobjTemp.put("align", "right");
        jobjTemp.put("summaryType", "sum");
        jobjTemp.put("summaryRenderer", "WtfGlobal.currencySummaryRenderer");
        jobjTemp.put("width", 100);
        jobjTemp.put("renderer", "WtfGlobal.withoutRateCurrencyDeletedSymbol");
        jobjTemp.put("pdfwidth", 100);
        jarrColumns.put(jobjTemp);

        jobjTemp = new JSONObject();
        jobjTemp.put("header", "<b>" + messageSource.getMessage("acc.gstr1.integratedtaxamt", null, requestcontextutilsobj) + "<b>");
        jobjTemp.put("dataIndex", "IGSTamount");
        jobjTemp.put("summaryType", "sum");
        jobjTemp.put("summaryRenderer", "WtfGlobal.currencySummaryRenderer");
        jobjTemp.put("align", "right");
        jobjTemp.put("width", 100);
        jobjTemp.put("renderer", "WtfGlobal.withoutRateCurrencyDeletedSymbol");
        jobjTemp.put("pdfwidth", 100);
        jarrColumns.put(jobjTemp);

        jobjTemp = new JSONObject();
        jobjTemp.put("header", "<b>" + messageSource.getMessage("acc.gstr1.centraltaxamt", null, requestcontextutilsobj) + "<b>");
        jobjTemp.put("dataIndex", "CGSTamount");
        jobjTemp.put("summaryType", "sum");
        jobjTemp.put("summaryRenderer", "WtfGlobal.currencySummaryRenderer");
        jobjTemp.put("align", "right");
        jobjTemp.put("width", 100);
        jobjTemp.put("renderer", "WtfGlobal.withoutRateCurrencyDeletedSymbol");
        jobjTemp.put("pdfwidth", 100);
        jarrColumns.put(jobjTemp);

        jobjTemp = new JSONObject();
        jobjTemp.put("header", "<b>" + messageSource.getMessage("acc.gstr1.statetaxamt", null, requestcontextutilsobj) + "<b>");
        jobjTemp.put("dataIndex", "SGSTamount");
        jobjTemp.put("summaryType", "sum");
        jobjTemp.put("summaryRenderer", "WtfGlobal.currencySummaryRenderer");
        jobjTemp.put("align", "right");
        jobjTemp.put("width", 100);
        jobjTemp.put("renderer", "WtfGlobal.withoutRateCurrencyDeletedSymbol");
        jobjTemp.put("pdfwidth", 100);
        jarrColumns.put(jobjTemp);

        jobjTemp = new JSONObject();
        jobjTemp.put("header", "<b>" + messageSource.getMessage("acc.invoice.TotalTaxAmt", null, requestcontextutilsobj) + "<b>");
        jobjTemp.put("dataIndex", "totaltax");
        jobjTemp.put("summaryType", "sum");
        jobjTemp.put("summaryRenderer", "WtfGlobal.currencySummaryRenderer");
        jobjTemp.put("align", "right");
        jobjTemp.put("width", 100);
        jobjTemp.put("renderer", "WtfGlobal.withoutRateCurrencyDeletedSymbol");
        jobjTemp.put("pdfwidth", 100);
        jarrColumns.put(jobjTemp);

        jobjTemp = new JSONObject();
        jobjTemp.put("header", "<b>" + messageSource.getMessage("acc.gstr1.cessamount", null, requestcontextutilsobj) + "<b>");
        jobjTemp.put("dataIndex", "cess");
        jobjTemp.put("summaryType", "sum");
        jobjTemp.put("summaryRenderer", "WtfGlobal.currencySummaryRenderer");
        jobjTemp.put("align", "right");
        jobjTemp.put("width", 100);
        jobjTemp.put("renderer", "WtfGlobal.withoutRateCurrencyDeletedSymbol");
        jobjTemp.put("pdfwidth", 100);
        jarrColumns.put(jobjTemp);

        jobjTemp = new JSONObject();
        jobjTemp.put("header", "<b>" + messageSource.getMessage("acc.gstr1.totalAmountInclTaxes", null, requestcontextutilsobj) + "<b>");
        jobjTemp.put("dataIndex", "totalAmt");
        jobjTemp.put("summaryType", "sum");
        jobjTemp.put("summaryRenderer", "WtfGlobal.currencySummaryRenderer");
        jobjTemp.put("align", "right");
        jobjTemp.put("width", 100);
        jobjTemp.put("renderer", "WtfGlobal.withoutRateCurrencyDeletedSymbol");
        jobjTemp.put("pdfwidth", 100);
        jarrColumns.put(jobjTemp);

    }

    public void getColumnModelForCNDN(JSONArray jarrRecords, JSONArray jarrColumns, JSONObject params) throws JSONException {
        String storeRec = "";
        String section = params.optString("section");
        Locale requestcontextutilsobj = null;
        if (params.has("requestcontextutilsobj")) {
            requestcontextutilsobj = (Locale) params.opt("requestcontextutilsobj");
        }
        JSONObject jobjTemp = new JSONObject();
        storeRec = "date,custgstin,billno,hsnno,value,taxableamt,type,originalinvdate,originalinvno,amountbeforetax,pos"
                + ",IGSTrate,IGSTamount,CGSTrate,CGSTamount,SGSTrate,SGSTamount,statecode,customer,originalhsnno,originaltype,noteno,notedate";
        String[] recArr = storeRec.split(",");
        // Get those fields in record for whome, no special properties present like type, defVal, mapping etc.
        for (String rec : recArr) {
            jobjTemp = new JSONObject();
            jobjTemp.put("name", rec);
            jarrRecords.put(jobjTemp);
        }

        // Gel column model - 
        jobjTemp = new JSONObject();
        jobjTemp.put("header", "GSTN");
        jobjTemp.put("dataIndex", "custgstin");
        jobjTemp.put("width", 150);
        jobjTemp.put("align", "left");
        jobjTemp.put("pdfwidth", 150);
        jarrColumns.put(jobjTemp);

        jobjTemp = new JSONObject();
        jobjTemp.put("header", "Type");
        jobjTemp.put("dataIndex", "type");
        jobjTemp.put("align", "left");
        jobjTemp.put("width", 150);
        jobjTemp.put("pdfwidth", 150);
        jarrColumns.put(jobjTemp);

        jobjTemp = new JSONObject();
        jobjTemp.put("header", "CN/DN No");
        jobjTemp.put("dataIndex", "noteno");
        jobjTemp.put("align", "left");
        jobjTemp.put("width", 150);
        jobjTemp.put("pdfwidth", 150);
        jarrColumns.put(jobjTemp);

        jobjTemp = new JSONObject();
        jobjTemp.put("header", "CN/DN Date");
        jobjTemp.put("dataIndex", "notedate");
        jobjTemp.put("align", "left");
        jobjTemp.put("width", 150);
        jobjTemp.put("pdfwidth", 150);
        jarrColumns.put(jobjTemp);

        jobjTemp = new JSONObject();
        jobjTemp.put("header", "Original Invoice No");
        jobjTemp.put("dataIndex", "originalinvno");
        jobjTemp.put("width", 150);
        jobjTemp.put("align", "left");
        jobjTemp.put("pdfwidth", 150);
        jarrColumns.put(jobjTemp);
        jobjTemp = new JSONObject();
        jobjTemp.put("header", "Original Invoice Date");
        jobjTemp.put("dataIndex", "originalinvdate");
        jobjTemp.put("width", 150);
        jobjTemp.put("align", "left");
        jobjTemp.put("pdfwidth", 150);
        jarrColumns.put(jobjTemp);

        jobjTemp = new JSONObject();
        jobjTemp.put("header", "Differential Value");
        jobjTemp.put("dataIndex", "amountbeforetax");
        jobjTemp.put("renderer", "WtfGlobal.withoutRateCurrencyDeletedSymbol");
        jobjTemp.put("align", "right");
        jobjTemp.put("width", 150);
        jobjTemp.put("pdfwidth", 150);
        jarrColumns.put(jobjTemp);

        jobjTemp = new JSONObject();
        jobjTemp.put("header", "IGST rate");
        jobjTemp.put("dataIndex", "IGSTrate");
        jobjTemp.put("renderer", "WtfGlobal.gstdecimalRenderer");
        jobjTemp.put("align", "right");
        jobjTemp.put("width", 150);
        jobjTemp.put("pdfwidth", 150);
        jarrColumns.put(jobjTemp);

        jobjTemp = new JSONObject();
        jobjTemp.put("header", "IGST Amount");
        jobjTemp.put("dataIndex", "IGSTamount");
        jobjTemp.put("renderer", "WtfGlobal.withoutRateCurrencyDeletedSymbol");
        jobjTemp.put("align", "right");
        jobjTemp.put("width", 150);
        jobjTemp.put("pdfwidth", 150);
        jarrColumns.put(jobjTemp);

        jobjTemp = new JSONObject();
        jobjTemp.put("header", "CGST Rate");
        jobjTemp.put("dataIndex", "CGSTrate");
        jobjTemp.put("renderer", "WtfGlobal.gstdecimalRenderer");
        jobjTemp.put("align", "right");
        jobjTemp.put("width", 150);
        jobjTemp.put("pdfwidth", 150);
        jarrColumns.put(jobjTemp);

        jobjTemp = new JSONObject();
        jobjTemp.put("header", "CGST Amount");
        jobjTemp.put("dataIndex", "CGSTamount");
        jobjTemp.put("renderer", "WtfGlobal.withoutRateCurrencyDeletedSymbol");
        jobjTemp.put("align", "right");
        jobjTemp.put("width", 150);
        jobjTemp.put("pdfwidth", 150);
        jarrColumns.put(jobjTemp);

        jobjTemp = new JSONObject();
        jobjTemp.put("header", "SGST Rate");
        jobjTemp.put("dataIndex", "SGSTrate");
        jobjTemp.put("renderer", "WtfGlobal.gstdecimalRenderer");
        jobjTemp.put("align", "right");
        jobjTemp.put("width", 150);
        jobjTemp.put("pdfwidth", 150);
        jarrColumns.put(jobjTemp);

        jobjTemp = new JSONObject();
        jobjTemp.put("header", "SGST Amount");
        jobjTemp.put("dataIndex", "SGSTamount");
        jobjTemp.put("renderer", "WtfGlobal.withoutRateCurrencyDeletedSymbol");
        jobjTemp.put("align", "right");
        jobjTemp.put("width", 150);
        jobjTemp.put("pdfwidth", 150);
        jarrColumns.put(jobjTemp);

    }
    /**
     *
     * @param paramsObj
     * @Desc Get GST Sales Tax Liability Details
     * @return
     * @throws JSONException
     */
    public JSONObject getGSTSalesTaxLiabilityReportDetails(JSONObject paramsObj) throws JSONException {
        JSONObject commData = new JSONObject();
        try {
            boolean isDetailedReport = paramsObj.optBoolean("isDetailedReport", false);
            if (!isDetailedReport) {
                JSONObject DataObj = getGSTSalesTaxLiabilityReportGirdData(paramsObj);
                
                DataObj.put("success", true);
                commData = DataObj;
            } else {
                JSONArray DataJArr = getGSTSalesTaxLiabilityDetailReportData(paramsObj);
                
                commData.put("success", true);
                commData.put("data", DataJArr);
            }
            
        } catch (Exception ex) {
            Logger.getLogger(AccEntityGstController.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
        }
        return commData;
    }
    
    /**
     *
     * @param paramsObj
     * @return
     * @Desc Get GST Sales tax Liability Report Colum data
     * @throws ServiceException
     * @throws JSONException
     */
    public JSONObject getGSTSalesTaxLiabilityReportGirdData(JSONObject paramsObj) throws ServiceException, JSONException, ParseException {
        JSONObject reportData = new JSONObject();
        try {
            String companyid = paramsObj.optString(Constants.companyKey, null);
            String  gcurrencyid = paramsObj.optString(Constants.globalCurrencyKey, null);
            /**
             * currencyMap is used for getting exchange rate in case of exchange rate is 0
             */
            HashMap currencyMap = new HashMap();
            currencyMap.put(Constants.companyKey, companyid);
            currencyMap.put(Constants.globalCurrencyKey, gcurrencyid);
            
            JSONArray taxDetails = new JSONArray();
            paramsObj.put("isInput", true);
            paramsObj.put("termType", 7); // 7 is for GST
            KwlReturnObject result = accEntityGstDao.getGSTTermDetails(paramsObj); //Get GST term details
            
            if (result.getEntityList().size() > 0) {
                List<LineLevelTerms> lineLevelTerms = result.getEntityList();
                for (LineLevelTerms lineLevelTermObject : lineLevelTerms) {
                    String lineLevelTermid = lineLevelTermObject.getId();
                    paramsObj.put("taxid", lineLevelTermid);
                    result = accEntityGstDao.getInvoicesForGSTSalesTaxLiabilityReport(paramsObj);
                    List<Object[]> reportDataList = result.getEntityList();
                    JSONObject invoiceTermAmtAndTotalAmt = accEntityGstDao.getinvoiceTermAmtAndTotalAmtforGSTSalesTaxLiabilityReport(paramsObj);
                    JSONArray lineLevelTermInvObj = new JSONArray();
                    double nonTaxableSales = 0.0; // Invice amount which tax not charged
                    double taxableSales = 0.0; // Invoice amount which tax has charged
                    double taxCharged = 0.0; // Total tax charged
                    
                    for (Object[] row : reportDataList) {
                        double unitPrice = row[6] != null ? (double) row[6] : 0.0;
                        double quantity = row[7] != null ? (double) row[7] : 0.0;
                        double taxRate = row[8] != null ? (double) row[8] : 0.0;
                        double taxAmt = row[9] != null ? (double) row[9] : 0.0;
                        String currencyid = row[10] != null ? row[10].toString() : "";
                        double exchangeRate = row[11] != null ? (double) row[11] : 0.0;
                        double totalProductAmount = row[14] != null ? (double) row[14] : 0.0;
                        /**
                         * converting foreign currency amount in base currency
                         * **InvoiceAmount is taken as invoiceamountinbase from DB so no need to convert
                         */
                        if(StringUtil.isNullOrEmpty(currencyid)) {
                            currencyid = gcurrencyid;
                        }
                        if(!StringUtil.isNullOrEmpty(currencyid) && !StringUtil.equalIgnoreCase(currencyid, gcurrencyid)) {
                            if((exchangeRate == 0 || exchangeRate == 0.0)) {
                                String exchangeRateDetailid = row[12] != null ? row[12].toString() : null;
                                long dateInMills = row[13] != null ? (long) row[13] : 0;
                                Date createdDate = new Date(dateInMills);
                                KwlReturnObject resultObj = accCurrencyDAOObj.getExcDetailID(currencyMap, currencyid, createdDate, exchangeRateDetailid);
                                ExchangeRateDetails erd = (ExchangeRateDetails) resultObj.getEntityList().get(0);
                                exchangeRate = erd.getExchangeRate();
                            }
                            unitPrice = authHandler.round(unitPrice / exchangeRate, companyid);
                            taxAmt = authHandler.round(taxAmt / exchangeRate, companyid);   
                        }
                        
                        if (taxAmt > 0.0) {
                            taxableSales += totalProductAmount;
                        } else {
                            nonTaxableSales += totalProductAmount;
                        }

                        taxCharged += taxAmt;
                        
                        JSONObject invObj = new JSONObject();
                        invObj.put("invoiceid", row[0] != null ? row[0].toString() : "");
                        invObj.put("invoiceNumber", row[1] != null ? row[1].toString() : "");
                        invObj.put("invoiceAmount", row[2] != null ? row[2].toString() : "");
                        invObj.put("productid", row[3] != null ? row[3].toString() : "");
                        invObj.put("productCode", row[4] != null ? row[4].toString() : "");
                        invObj.put("productName", row[5] != null ? row[5].toString() : "");
                        invObj.put("unitPrice", unitPrice);
                        invObj.put("quantity", quantity);
                        invObj.put("taxRate", taxRate);
                        invObj.put("taxAmount", taxAmt);
                        lineLevelTermInvObj.put(invObj);
                    }
                    JSONObject taxTermObj = new JSONObject();
                    taxTermObj.put("taxid", lineLevelTermid);
                    taxTermObj.put("taxName", lineLevelTermObject.getTerm());
                    taxTermObj.put("totalSales", invoiceTermAmtAndTotalAmt.optDouble("InvoiceAmountTotal", 0.0));
                    /**
                     * Invoice term amount added in Non-Taxable amount
                     */
                    taxTermObj.put("nonTaxableSales", (nonTaxableSales + invoiceTermAmtAndTotalAmt.optDouble("InvoiceTermTotal", 0.0)));
                    taxTermObj.put("taxableSales", taxableSales);
                    taxTermObj.put("taxCharged", taxCharged);
                    taxTermObj.put("ExpanderData", lineLevelTermInvObj);
                    taxDetails.put(taxTermObj);
                }
                reportData.put("data", taxDetails);
            }
        } catch (Exception ex) {
            Logger.getLogger(AccEntityGstServiceImpl.class.getName()).log(Level.SEVERE, null, ex);
        }
        return reportData;
    }

    /**
     *
     * @param paramsObj
     * @return
     * @Desc Get GST Sales tax Liability Detail Report Colum data
     * @throws ServiceException
     */
    public JSONArray getGSTSalesTaxLiabilityDetailReportData(JSONObject paramsObj) throws ServiceException, JSONException, ParseException {
        JSONArray columnDataJSONArray = new JSONArray();
        
        String companyid = paramsObj.optString(Constants.companyKey, null);
        String gcurrencyid = paramsObj.optString(Constants.globalCurrencyKey, null);
        /**
         * currencyMap is used for getting exchange rate in case of exchange rate is 0 
         */
        HashMap currencyMap = new HashMap();
        currencyMap.put(Constants.companyKey, companyid);
        currencyMap.put(Constants.globalCurrencyKey, gcurrencyid);
        
        KwlReturnObject kwlReturnObject = accEntityGstDao.getGSTSalesTaxLiabilityReportData(paramsObj);
        List<Object[]> list = kwlReturnObject.getEntityList();
        
        for (Object[] row : list) {
            JSONObject jobj = new JSONObject();
            
            if(row[0] != null) {
                jobj.put("shippedloc1", row[0].toString());
                jobj.put("shippedloc1Name", row[1] != null ? row[1].toString() : "");
            } else {
                jobj.put("shippedloc1", "No Tax");
                jobj.put("shippedloc1Name", "No Tax");
            }
            
            if(row[2] != null) {
                jobj.put("shippedloc2", row[2].toString());
                jobj.put("shippedloc2Name", row[3] != null ? row[3].toString() : "");
            } else {
                jobj.put("shippedloc2", "No Tax");
                jobj.put("shippedloc2Name", "No Tax");
            }
            
            if(row[4] != null) {
                jobj.put("shippedloc3", row[4].toString());
                jobj.put("shippedloc3Name", row[5] != null ? row[5].toString() : "");
            } else {
                jobj.put("shippedloc3", "No Tax");
                jobj.put("shippedloc3Name", "No Tax");
            }
            
            if(row[6] != null) {
                jobj.put("shippedloc4", row[6].toString());
                jobj.put("shippedloc4Name", row[7] != null ? row[7].toString() : "");
            } else {
                jobj.put("shippedloc4", "No Tax");
                jobj.put("shippedloc4Name", "No Tax");
            }
            
            if(row[8] != null) {
                jobj.put("shippedloc5", row[8].toString());
                jobj.put("shippedloc5Name", row[9] != null ? row[9].toString() : "");
            } else {
                jobj.put("shippedloc5", "No Tax");
                jobj.put("shippedloc5Name", "No Tax");
            }
            
            double totalSales = row[12] != null ? (double) row[12] : 0.0;
            double nonTaxableSales = row[13] != null ? (double) row[13] : 0.0;
            double taxableSales = row[14] != null ? (double) row[14] : 0.0;
            double taxAmount = row[15] != null ? (double) row[15] : 0.0;
            String currencyid = row[16] != null ? row[16].toString() : "";
            double exchangeRate = row[17] != null ? (double) row[17] : 0.0;
            double invoiceTermAmt = row[20] != null ? (double) row[20] : 0.0;
            /**
             * converting foreign currency amount in base currency
             */
            if (StringUtil.isNullOrEmpty(currencyid)) {
                currencyid = gcurrencyid;
            }
            if (!StringUtil.isNullOrEmpty(currencyid) && !StringUtil.equalIgnoreCase(currencyid, gcurrencyid)) {
                if ((exchangeRate == 0 || exchangeRate == 0.0)) {
                    String exchangeRateDetailid = row[18] != null ? row[18].toString() : null;
                    long dateInMills = row[19] != null ? (long) row[19] : 0;
                    Date createdDate = new Date(dateInMills);
                    KwlReturnObject resultObj = accCurrencyDAOObj.getExcDetailID(currencyMap, currencyid, createdDate, exchangeRateDetailid);
                    ExchangeRateDetails erd = (ExchangeRateDetails) resultObj.getEntityList().get(0);
                    exchangeRate = erd.getExchangeRate();
                }
                totalSales = authHandler.round(totalSales / exchangeRate, companyid);
                nonTaxableSales = authHandler.round(nonTaxableSales / exchangeRate, companyid);
                taxableSales = authHandler.round(taxableSales / exchangeRate, companyid);
                taxAmount = authHandler.round(taxAmount / exchangeRate, companyid);
                invoiceTermAmt = authHandler.round(invoiceTermAmt / exchangeRate, companyid);
            }
                        
            jobj.put("invoiceid", row[10] != null ? row[10].toString() : "");
            jobj.put("invoicenumber", row[11] != null ? row[11].toString() : "");
            jobj.put("totalSales", totalSales);
            /**
             * Added Invoice term amount in Non-Taxable Sales
             */
            jobj.put("nonTaxableSales", (nonTaxableSales + invoiceTermAmt));
            jobj.put("taxableSales", taxableSales);
            jobj.put("taxAmount", taxAmount);
            
            columnDataJSONArray.put(jobj);
        }
        
        return columnDataJSONArray;
    }

    /**
     *
     * @param reqParams
     * @return
     * @Desc : get data for Customer wise Report from Invoice
     * @throws ServiceException
     * @throws com.krawler.utils.json.base.JSONException
     */
    public JSONObject getTaxForCustomer(JSONObject reqParams) throws ServiceException, com.krawler.utils.json.base.JSONException {
        boolean isRevised = reqParams.optBoolean("isRevised", false);
        /**
         * get Invoice list
         */
        KwlReturnObject kwlReturnObject = accEntityGstDao.getInvoiceData(reqParams);
        List<Invoice> invoices = kwlReturnObject.getEntityList();
        JSONArray array = new JSONArray();
        for (Invoice invoice : invoices) {
            /**
             * Iterate Invoices
             */
            Map<String, Object> map = new HashMap();
            String custGSTIN = invoice.getCustomer().getGSTIN();
            String customer = invoice.getCustomer().getName();
//            Date date = invoice.getJournalEntry().getEntryDate();
            Date date = invoice.getCreationDate();
            String billno = invoice.getInvoiceNumber();
            double invamt = invoice.getInvoiceamountinbase();
            Date originaldate = null;
            String originalbillno = null;
            if (isRevised) {
//                originaldate = invoice.getParentInvoice() != null ? invoice.getParentInvoice().getJournalEntry().getEntryDate() : null;
                originaldate = invoice.getParentInvoice() != null ? invoice.getParentInvoice().getCreationDate() : null;
                originalbillno = invoice.getParentInvoice() != null ? invoice.getParentInvoice().getInvoiceNumber() : "";
            }
            reqParams.put("invoiceid", invoice.getID());
            /**
             * get Invoice Details
             */
            kwlReturnObject = accEntityGstDao.getInvoiceDetailData(reqParams);
            reqParams.remove("invoiceid");
            List<InvoiceDetail> invoiceDetails = kwlReturnObject.getEntityList();
            for (InvoiceDetail invoiceDetail : invoiceDetails) {
                /*
                 Iterate Invoice details
                 */
                JSONObject jSONObject = new JSONObject();
                /**
                 * Get HSN value
                 */
                String hsnno = "";
                reqParams.put("productidforclass", invoiceDetail.getInventory().getProduct().getID());
                List fcdlist = accEntityGstDao.getProductClassValue(reqParams);
                if (!fcdlist.isEmpty() && fcdlist.get(0) != null) {
                    Iterator iterator=fcdlist.iterator();
                    while (iterator.hasNext()) {
                        Object[] object = (Object[]) iterator.next();
                        hsnno=object[0].toString();
                    }
                }

                double rate = invoiceDetail.getRate();
                double qty = invoiceDetail.getInventory().getQuantity();
                double discount = invoiceDetail.getDiscount() != null ? invoiceDetail.getDiscount().getDiscountValue() : 0d;
                double taxableamt = qty * rate - discount;
                reqParams.put("invoicedetail", invoiceDetail.getID());
                if (map.containsKey(hsnno)) {
                    /**
                     * If product with same HSN then update that entry
                     */
                    jSONObject = (JSONObject) map.get(hsnno);
                    jSONObject.put("taxableamt", jSONObject.optDouble("taxableamt") + taxableamt);
                    /**
                     * Get GST master wise data
                     */
                    getGSTDetailsForInvoice(reqParams, jSONObject);
                } else {
                    /**
                     * new HSN product
                     */
                    jSONObject.put("custgstin", custGSTIN);
                    jSONObject.put("customer", customer);
                    jSONObject.put("billno", billno);
                    jSONObject.put("hsnno", hsnno);
                    jSONObject.put("date", date);
                    jSONObject.put("value", invamt);
                    jSONObject.put("type", getProductType(invoiceDetail.getInventory().getProduct().getProducttype().getID()));
                    jSONObject.put("taxableamt", taxableamt);
                    if (isRevised) {
                        jSONObject.put("originaldate", originaldate);
                        jSONObject.put("originalbillno", originalbillno);
                    }
                    /**
                     * get GST master wise data
                     */
                    getGSTDetailsForInvoice(reqParams, jSONObject);
                }
                /**
                 * put entry in map for HSN
                 */
                if (jSONObject.optBoolean("isjsonincluded")) {
                    map.put(hsnno, jSONObject);
                }

            }
            /**
             * Iterate all HSN entries
             */
            for (Map.Entry<String, Object> entry : map.entrySet()) {
                JSONObject jSONObject = (JSONObject) entry.getValue();
                /**
                 * put JsonObject in Array
                 */
                array.put(jSONObject);
            }
        }
        return new JSONObject().put("data", array);
    }

    /**
     *
     * @param reqParams
     * @param jSONObject
     * @Desc : get GST master wise data for invoice details
     * @throws ServiceException
     * @throws JSONException
     */
    private void getGSTDetailsForInvoice(JSONObject reqParams, JSONObject jSONObject) throws ServiceException, JSONException {
        boolean interstate = reqParams.optBoolean("interstate", false);
        KwlReturnObject kwlReturnObject = accEntityGstDao.getGSTDetailsForInvoice(reqParams);
        List<InvoiceDetailTermsMap> invoiceDetailTermsMap = kwlReturnObject.getEntityList();
        for (InvoiceDetailTermsMap invoiceDetailTermsMap1 : invoiceDetailTermsMap) {
            String key = invoiceDetailTermsMap1.getEntitybasedLineLevelTermRate().getLineLevelTerms().getTerm();
            if (interstate && !key.contains("IGST")) {
                continue;
            }
            /**
             * Iterate applied GST and put its Percentage and Amount accordingly
             */
            double percentage = invoiceDetailTermsMap1.getPercentage();
            double termamount = jSONObject.optDouble("taxableamt") * percentage / 100;
            if (key.contains("IGST")) {
                key = "IGST";
                jSONObject.put(key + "rate", invoiceDetailTermsMap1.getPercentage());
                jSONObject.put(key + "amount", termamount);
            } else if (key.contains("CGST")) {
                key = "CGST";
                jSONObject.put(key + "rate", invoiceDetailTermsMap1.getPercentage());
                jSONObject.put(key + "amount", termamount);
            } else if (key.contains("SGST")) {
                key = "SGST";
                jSONObject.put(key + "rate", invoiceDetailTermsMap1.getPercentage());
                jSONObject.put(key + "amount", termamount);
            } else {
                key = "UTGST";
                jSONObject.put(key + "rate", invoiceDetailTermsMap1.getPercentage());
                jSONObject.put(key + "amount", termamount);
            }

            jSONObject.put("isjsonincluded", true);
            /**
             * get Delivered location
             */
            jSONObject.put("pos", invoiceDetailTermsMap1.getEntitybasedLineLevelTermRate().getShippedLoc1() != null ? invoiceDetailTermsMap1.getEntitybasedLineLevelTermRate().getShippedLoc1().getValue() : "");
            jSONObject.put("statecode", invoiceDetailTermsMap1.getEntitybasedLineLevelTermRate().getShippedLoc1() != null ? invoiceDetailTermsMap1.getEntitybasedLineLevelTermRate().getShippedLoc1().getValue() : "");
        }
    }

    /**
     * @Dsec : get Product Type
     * @param typeId
     * @return
     */
    private String getProductType(String typeId) {
        if (typeId.equalsIgnoreCase(Producttype.SERVICE)) {
            /**
             * Service Type
             */
            return "S";
        } else {
            /**
             * Goods
             */
            return "G";
        }
    }

    /**
     * @Dsec : get All Invoice data using HSN
     * @param reqParams
     * @return
     * @throws ServiceException
     * @throws com.krawler.utils.json.base.JSONException
     */
    public JSONObject getAllInvoicesDataByHSN(JSONObject reqParams) throws ServiceException, com.krawler.utils.json.base.JSONException {
        boolean isRevised = reqParams.optBoolean("isRevised", false);
        JSONArray array = new JSONArray();
        KwlReturnObject kwlReturnObject = accEntityGstDao.getInvoiceDetailData(reqParams);
        List<InvoiceDetail> invoiceDetails = kwlReturnObject.getEntityList();
        for (InvoiceDetail detail : invoiceDetails) {
            Map<String, Object> map = new HashMap();
            /**
             * Get HSN value
             */
            String hsnno = "";
            String hsncode="";
            reqParams.put("productidforclass", detail.getInventory().getProduct().getID());
            List fcdlist = accEntityGstDao.getProductClassValue(reqParams);
            if (!fcdlist.isEmpty() && fcdlist.get(0) != null) {
                Iterator iterator = fcdlist.iterator();
                while (iterator.hasNext()) {
                    Object[] object = (Object[]) iterator.next();
                    hsnno = object[1].toString();
                    hsncode=object[0].toString();
                }
            }
//            String hsncode = detail.getInventory().getProduct().getHSNCode();
            /**
             * Get Different state wise data for hsn code
             */
            reqParams.put("HSNCode", hsnno);
            kwlReturnObject = accEntityGstDao.getLocationwiseInvoiceDetailsForProduct(reqParams);
            List<InvoiceDetailTermsMap> hsnInvd = kwlReturnObject.getEntityList();
            for (InvoiceDetailTermsMap detailTermsMap : hsnInvd) {
                /*
                 Iterate Invoice details
                 */
                JSONObject jSONObject = new JSONObject();
                String statecode = detailTermsMap.getEntitybasedLineLevelTermRate().getShippedLoc1().getValue();
                double rate = detailTermsMap.getInvoicedetail().getRate();
                double qty = detailTermsMap.getInvoicedetail().getInventory().getQuantity();
                double discount = detailTermsMap.getInvoicedetail().getDiscount() != null ? detailTermsMap.getInvoicedetail().getDiscount().getDiscountValue() : 0d;
                double taxableamt = qty * rate - discount;
                reqParams.put("invoicedetail", detailTermsMap.getInvoicedetail().getID());
                if (map.containsKey(statecode)) {
                    /**
                     * If product with same HSN then update that entry
                     */
                    jSONObject = (JSONObject) map.get(statecode);
                    jSONObject.put("taxableamt", jSONObject.optDouble("taxableamt") + taxableamt);
                    /**
                     * Get GST master wise data
                     */
                    getGSTDetailsForInvoice(reqParams, jSONObject);
                } else {
                    /**
                     * new HSN product
                     */
                    jSONObject.put("hsnno", hsncode);
                    jSONObject.put("type", getProductType(detailTermsMap.getInvoicedetail().getInventory().getProduct().getProducttype().getID()));
                    jSONObject.put("taxableamt", taxableamt);
                    if (isRevised) {
                        jSONObject.put("originalhsnno", hsncode);
                        jSONObject.put("originaltype", getProductType(detailTermsMap.getInvoicedetail().getInventory().getProduct().getProducttype().getID()));
                        jSONObject.put("originalstatecode", "");
                    }
                    /**
                     * get GST master wise data
                     */
                    getGSTDetailsForInvoice(reqParams, jSONObject);
                }
                /**
                 * put entry in map for HSN
                 */
                if (jSONObject.optBoolean("isjsonincluded")) {
                    map.put(statecode, jSONObject);
                }

            }
            /**
             * Iterate all HSN entries
             */
            for (Map.Entry<String, Object> entry : map.entrySet()) {
                JSONObject jSONObject = (JSONObject) entry.getValue();
                /**
                 * put JsonObject in Array
                 */
                array.put(jSONObject);
            }
        }
        return new JSONObject().put("data", array);
    }

    /**
     * @Desc : For credit note issues
     * @param reqParams
     * @return
     * @throws ServiceException
     * @throws JSONException
     */
    public JSONObject getCreditIssuestoCustomer(JSONObject reqParams) throws ServiceException, JSONException {
        JSONArray array = new JSONArray();
        KwlReturnObject kwlReturnObject = accEntityGstDao.getCreditNoteDetailsForGSTR1(reqParams);
        List<CreditNoteDetail> creditNoteDetails = kwlReturnObject.getEntityList();
        for (CreditNoteDetail creditNoteDetail : creditNoteDetails) {
            JSONObject jSONObject = new JSONObject();
            jSONObject.put("custgstin", creditNoteDetail.getCreditNote().getCustomer().getGSTIN());
            jSONObject.put("type", "CN");
            jSONObject.put("noteno", creditNoteDetail.getCreditNote().getCreditNoteNumber());
//            jSONObject.put("notedate", creditNoteDetail.getCreditNote().getJournalEntry().getEntryDate());
            jSONObject.put("notedate", creditNoteDetail.getCreditNote().getCreationDate());
            jSONObject.put("originalinvno", creditNoteDetail.getInvoice() != null ? creditNoteDetail.getInvoice().getInvoiceNumber() : "");
//            jSONObject.put("originalinvdate", creditNoteDetail.getInvoice() != null ? creditNoteDetail.getInvoice().getJournalEntry().getEntryDate() : "");
            jSONObject.put("originalinvdate", creditNoteDetail.getInvoice() != null ? creditNoteDetail.getInvoice().getCreationDate() : "");
            /**
             * calculate amount before gst
             */
            double amountbeforetax = 0d;
            Set<SalesReturnDetail> salesReturnDetails = creditNoteDetail.getCreditNote().getSalesReturn().getRows();
            for (SalesReturnDetail salesReturnDetail : salesReturnDetails) {
                double quantity = salesReturnDetail.getInventory().getQuantity();
                double rowAmt = salesReturnDetail.getRate() * quantity;
                amountbeforetax = amountbeforetax + rowAmt;
                jSONObject.put("taxableamt", rowAmt);
                reqParams.put("srdetail", salesReturnDetail.getID());
                getGSTDetailsForReturn(reqParams, jSONObject);

            }
            jSONObject.put("amountbeforetax", amountbeforetax);
            array.put(jSONObject);

        }
        return new JSONObject().put("data", array);
    }

    /**
     * @Desc : get GST details for Sates Return with CN against invoice
     * @param reqParams
     * @param jSONObject
     * @throws ServiceException
     * @throws JSONException
     */
    private void getGSTDetailsForReturn(JSONObject reqParams, JSONObject jSONObject) throws ServiceException, JSONException {
        KwlReturnObject kwlReturnObject = accEntityGstDao.getGSTDetailsForReturn(reqParams);
        List<SalesReturnDetailsTermMap> returnDetailsTermMaps = kwlReturnObject.getEntityList();
        for (SalesReturnDetailsTermMap returnDetailsTermMap : returnDetailsTermMaps) {
            String key = returnDetailsTermMap.getEntitybasedLineLevelTermRate().getLineLevelTerms().getTerm();

            /**
             * Iterate applied GST and put its Percentage and Amount accordingly
             */
            double percentage = returnDetailsTermMap.getPercentage();
            double termamount = jSONObject.optDouble("taxableamt") * percentage / 100;
            if (key.contains("IGST")) {
                key = "IGST";
                jSONObject.put(key + "rate", percentage);
                jSONObject.put(key + "amount", termamount);
            } else if (key.contains("CGST")) {
                key = "CGST";
                jSONObject.put(key + "rate", percentage);
                jSONObject.put(key + "amount", termamount);
            } else if (key.contains("SGST")) {
                key = "SGST";
                jSONObject.put(key + "rate", percentage);
                jSONObject.put(key + "amount", termamount);
            } else {
                key = "UTGST";
                jSONObject.put(key + "rate", percentage);
                jSONObject.put(key + "amount", termamount);
            }
        }
    }

  
    public void getGSTINForEntity(JSONObject params){


    }
    /**
     * @Desc JSON Array for Entity Based Line Level Term
     * @param productTermDetail
     * @param reqParams
     * @return
     */
    @Override
    @Transactional(propagation = Propagation.REQUIRED)
    public JSONArray fetchEntityBasedLineLevelTermRate(ArrayList<EntitybasedLineLevelTermRate> productTermDetail, Map<String, Object> reqParams) {

        JSONArray productTermJsonArry = new JSONArray();
        try {
            for (EntitybasedLineLevelTermRate productTermsMapObj : productTermDetail) {
                JSONObject productTermJsonObj = new JSONObject();
                productTermJsonObj.put("id", productTermsMapObj.getId());
                productTermJsonObj.put("termid", productTermsMapObj.getLineLevelTerms().getId());
                productTermJsonObj.put("entityid", productTermsMapObj.getEntity() != null ? productTermsMapObj.getEntity().getId() : "");
                productTermJsonObj.put("shippedloc1", productTermsMapObj.getShippedLoc1() != null ? productTermsMapObj.getShippedLoc1().getId() : "");
                productTermJsonObj.put("shippedloc2", productTermsMapObj.getShippedLoc2() != null ? productTermsMapObj.getShippedLoc2().getId() : "");
                productTermJsonObj.put("shippedloc3", productTermsMapObj.getShippedLoc3() != null ? productTermsMapObj.getShippedLoc3().getId() : "");
                productTermJsonObj.put("shippedloc4", productTermsMapObj.getShippedLoc4() != null ? productTermsMapObj.getShippedLoc4().getId() : "");
                productTermJsonObj.put("shippedloc5", productTermsMapObj.getShippedLoc5() != null ? productTermsMapObj.getShippedLoc5().getId() : "");
                productTermJsonObj.put("applieddate", productTermsMapObj.getAppliedDate() != null ? productTermsMapObj.getAppliedDate() : "");
                productTermJsonObj.put("taxtype", productTermsMapObj != null  ? productTermsMapObj.getTaxType() : "");
                productTermJsonObj.put("percentage", productTermsMapObj != null ? productTermsMapObj.getPercentage() : "");
                productTermJsonObj.put("termamount", productTermsMapObj != null ? productTermsMapObj.getTermAmount() : "");
                productTermJsonArry.put(productTermJsonObj);
            }
        } catch (JSONException ex) {
            Logger.getLogger(AccEntityGstServiceImpl.class.getName()).log(Level.SEVERE, null, ex);
        }
        return productTermJsonArry;
    }

    /**
     * @Desc JSONArray for Product Category Mapping for GST Rule
     * @param productCategoryGSTRuleMap
     * @param reqParams
     * @return
     */
    @Override
    @Transactional(propagation = Propagation.REQUIRED)
    public JSONArray fetchProductCategoryGSTRuleMapDetails(ArrayList<ProductCategoryGstRulesMappping> productCategoryGSTRuleMap, Map<String, Object> reqParams) {

        JSONArray prodCatGSTRuleMapArr = new JSONArray();
        try {
            Iterator iter = productCategoryGSTRuleMap.iterator();
            while (iter.hasNext()) {
                Object[] object = (Object[]) iter.next();
                JSONObject prodCatGSTRuleMapJObj = new JSONObject();
                prodCatGSTRuleMapJObj.put("id", object[0]);
                prodCatGSTRuleMapJObj.put("prodcategoryid", object[1]);
                prodCatGSTRuleMapJObj.put("entitybasedlineleveltermrateid", object[2]);
                prodCatGSTRuleMapArr.put(prodCatGSTRuleMapJObj);

            }
        } catch (JSONException ex) {
            Logger.getLogger(AccEntityGstServiceImpl.class.getName()).log(Level.SEVERE, null, ex);
        }
        return prodCatGSTRuleMapArr;
    }

    /**
     * Get Field Combo Data according to FieldParams
     * @param list
     * @param mapData
     * @return
     * @throws ServiceException
     * @throws JSONException
     */
    @Override
    @Transactional(propagation = Propagation.REQUIRED)
    public JSONObject fetchMasterDataForGSTFields(List<FieldParams> list, Map mapData) throws ServiceException, JSONException {
        JSONObject result = new JSONObject();
        KwlReturnObject kwlReturnObject = null;
        String companyid = "";
        try {
            if (!StringUtil.isNullObject(list)) {
                if (mapData.containsKey(Constants.companyid)) {
                    companyid = (String) mapData.get(Constants.companyid);
                }
                for (FieldParams fp : list) {
                    JSONArray jarr = new JSONArray();
                    kwlReturnObject = accAccountDAOobj.getFieldComboDatabyFieldID(fp.getId(), companyid);
                    List<FieldComboData> listFC = kwlReturnObject.getEntityList();
                    for (FieldComboData fc : listFC) {
                        JSONObject jobj = new JSONObject();
                        jobj.put("id", fc.getId());
                        jobj.put("value", fc.getValue());
                        jarr.put(jobj);
                    }

                    if (fp.getFieldlabel().equalsIgnoreCase(Constants.GST_ADDRESS_STATE_KEY)) {
                        result.put(Constants.GST_ADDRESS_STATE_KEY, jarr);
                    } else if (fp.getFieldlabel().equalsIgnoreCase(Constants.GST_ADDRESS_CITY_KEY)) {
                        result.put(Constants.GST_ADDRESS_CITY_KEY, jarr);
                    } else if (fp.getFieldlabel().equalsIgnoreCase(Constants.GST_ADDRESS_COUNTY_KEY)) {
                        result.put(Constants.GST_ADDRESS_COUNTY_KEY, jarr);
                    } else if (fp.getFieldlabel().equalsIgnoreCase(Constants.GST_ENTITY_KEY)) {
                        result.put(Constants.GST_ENTITY_KEY, jarr);
                    } else if (fp.getFieldlabel().equalsIgnoreCase(Constants.GSTProdCategory)) {
                        result.put(Constants.GST_PRODUCT_CATEGORY_KEY, jarr);
                    } else if (fp.getFieldlabel().equalsIgnoreCase(Constants.HSN_SACCODE)) {
                        result.put("hsncode", jarr);
                     }

                }
            }
        } catch (ServiceException | JSONException e) {
            throw ServiceException.FAILURE(e.getMessage(), e);
        }
        return result;
    }
    /**
     * @Desc : Tax liability arising on account of receipt of consideration for
     * which invoices have not been issued in the same tax period.
     * @param reqParams
     * @return
     * @throws JSONException
     * @throws ServiceException
     */
    public JSONObject getTaxLiabilityOnAdvance(JSONObject reqParams) throws JSONException, ServiceException {
        JSONArray returnArr = new JSONArray();
        String companyId=reqParams.optString("companyid");
        double sumTaxAmt=0d;
        double IGSTAmount=0d;
        double CGSTAmount=0d;
        double SGSTAmount=0d;
        double CESSAmount=0d;
        JSONObject gstr3Obj=new JSONObject();
         JSONObject jobject =new JSONObject();
        JSONObject summaryObj = new JSONObject();
        JSONArray summaryArr = new JSONArray();
        String typeofinvoice=GSTRConstants.AT;
        JSONObject dataObj=new JSONObject();
        if (reqParams.has("isPurchase") && reqParams.optBoolean("isPurchase")) {
            dataObj = gSTR2Service.getRCMOnAdvance(reqParams);
            typeofinvoice=reqParams.optString("typeofinvoice");
        } else {
            dataObj = gSTR1DeskeraServiceDao.getAT(reqParams);
        }
    
        JSONArray dataArray = dataObj.optJSONArray("at");
        for (int index = 0; index < dataArray.length(); index++) {
            JSONObject posObj = dataArray.getJSONObject(index);

            JSONArray itemsarrArray = posObj.getJSONArray("itms");
            for (int itemindex = 0; itemindex < itemsarrArray.length(); itemindex++) {
                JSONObject jSONObject = new JSONObject();
                JSONObject itemObj = itemsarrArray.getJSONObject(itemindex);
                IGSTAmount += itemObj.optDouble("iamt");
                CGSTAmount += itemObj.optDouble("camt");
                SGSTAmount += itemObj.optDouble("samt");
                CESSAmount += itemObj.optDouble("csamt");
                sumTaxAmt += itemObj.optDouble("iamt") + itemObj.optDouble("camt") + itemObj.optDouble("samt") + itemObj.optDouble("csamt");
                double taxamt = itemObj.optDouble("iamt") + itemObj.optDouble("camt") + itemObj.optDouble("samt") + itemObj.optDouble("csamt");
                if (reqParams.optBoolean(GSTR3BConstants.DETAILED_VIEW_REPORT, false)) {
                    jSONObject.put(GSTR3BConstants.DATAINDEX_PERSONNAME, posObj.optString("customerName"));
                    jSONObject.put(GSTR3BConstants.DATAINDEX_TRANSACTION_NUMBER, itemObj.optString("anum"));
                    jSONObject.put(GSTR3BConstants.DATAINDEX_DATE, itemObj.optString("adt"));
                    jSONObject.put(GSTR3BConstants.DATAINDEX_GSTIN, itemObj.optString("gstin"));
                    jSONObject.put(GSTR3BConstants.DATAINDEX_IGSTAMOUNT, itemObj.optDouble("iamt"));
                    jSONObject.put(GSTR3BConstants.DATAINDEX_CGSTAMOUNT, itemObj.optDouble("camt"));
                    jSONObject.put(GSTR3BConstants.DATAINDEX_SGSTAMOUNT, itemObj.optDouble("samt"));
                    jSONObject.put(GSTR3BConstants.DATAINDEX_CESS, itemObj.optDouble("csamt"));
                    jSONObject.put(GSTR3BConstants.DATAINDEX_TAXABLE_AMOUNT, itemObj.optDouble("txval"));
                    jSONObject.put(GSTR3BConstants.DATAINDEX_TOTAL_TAX, taxamt);
                    jSONObject.put(GSTR3BConstants.DATAINDEX_TOTAL_AMOUNT, itemObj.optDouble("txval") + taxamt);
                    jSONObject.put(GSTR3BConstants.DATAINDEX_POS, posObj.optString(GSTRConstants.pos));
                    jSONObject.put(GSTR3BConstants.DATAINDEX_DOCTYPE, "Receipt/Payment (Liability on Advance)");
                } else {
                    jSONObject.put("placeofsupply", posObj.optString(GSTRConstants.pos));
                    jSONObject.put("pos", posObj.optString(GSTRConstants.pos));
                    jSONObject.put("stcode", posObj.optString(GSTRConstants.statecode));
                    jSONObject.put("customername", posObj.optString("customerName"));
                    jSONObject.put("receiptno", itemObj.optString("anum"));
                    jSONObject.put("receiptdate", itemObj.optString("adt"));
                    jSONObject.put("gstin", itemObj.optString("gstin"));
                    jSONObject.put("igstamt", itemObj.optDouble("iamt"));
                    jSONObject.put("cgstamt", itemObj.optDouble("camt"));
                    jSONObject.put("sgstamt", itemObj.optDouble("samt"));
                    jSONObject.put("cessamt", itemObj.optDouble("csamt"));
                    jSONObject.put("taxableAmt", itemObj.optDouble("txval"));
                    jSONObject.put("sumTaxableAmt", itemObj.optDouble("txval"));
                    jSONObject.put("sumTaxAmt", taxamt);
                    jSONObject.put("sumTotalAmt", itemObj.optDouble("txval") + taxamt);
                    jSONObject.put("rate", itemObj.optString("rt"));
                }
                returnArr.put(jSONObject);
            }
        }
        jobject.put("data", returnArr);

        if (!reqParams.optBoolean(GSTR3BConstants.DETAILED_VIEW_REPORT, false)) {
            if (reqParams.optBoolean("isGSTR1")) {
                /**
                 * code execute for GSTR1 report to show particulars in bold
                 */
                summaryObj.put("typeofinvoice", "<b>" + typeofinvoice + "<b>");
            } else {
                summaryObj.put("typeofinvoice", typeofinvoice);
            }
            summaryObj.put("numberofinvoices", dataObj.optInt("count"));
            summaryObj.put("igstamt", authHandler.formattedAmount(IGSTAmount, companyId));
            summaryObj.put("sgstamt", authHandler.formattedAmount(SGSTAmount, companyId));
            summaryObj.put("cgstamt", authHandler.formattedAmount(CGSTAmount, companyId));
            summaryObj.put("cessamt", authHandler.formattedAmount(CESSAmount, companyId));
            summaryObj.put("sumTaxableAmt", authHandler.formattedAmount(dataObj.optDouble("taxableamt"), companyId));
            summaryObj.put("sumTaxAmt", authHandler.formattedAmount(sumTaxAmt, companyId));
            summaryObj.put("sumTotalAmt", authHandler.formattedAmount(dataObj.optDouble("taxableamt") + sumTaxAmt, companyId));
            summaryArr.put(summaryObj);
            jobject.put("summaryArr", summaryArr);
        }
        if (!reqParams.optBoolean(GSTR3BConstants.DETAILED_VIEW_REPORT, false) || (reqParams.has("reportid") && reqParams.optInt("reportid", 0) == Constants.GSTR3B_Summary_Report)) {
            /**
             * Put data for GSTR3B
             */
            gstr3Obj.put("taxableamt", authHandler.formattedAmount(dataObj.optDouble("taxableamt"), companyId));
            gstr3Obj.put("taxableamt3b", authHandler.formattedAmount(dataObj.optDouble("taxableamt3b"), companyId));
            gstr3Obj.put("csgst3b", authHandler.formattedAmount(dataObj.optDouble("csgst3b"), companyId));
            gstr3Obj.put("cgst3b", authHandler.formattedAmount(dataObj.optDouble("cgst3b"), companyId));
            gstr3Obj.put("sgst3b", authHandler.formattedAmount(dataObj.optDouble("sgst3b"), companyId));
            gstr3Obj.put("igst3b", authHandler.formattedAmount(dataObj.optDouble("igst3b"), companyId));
            gstr3Obj.put("igst", authHandler.formattedAmount(IGSTAmount, companyId));
            gstr3Obj.put("cgst", authHandler.formattedAmount(CGSTAmount, companyId));
            gstr3Obj.put("sgst", authHandler.formattedAmount(SGSTAmount, companyId));
            gstr3Obj.put("csgst", authHandler.formattedAmount(CESSAmount, companyId));
            gstr3Obj.put("totaltax", authHandler.formattedAmount(sumTaxAmt, companyId));
            gstr3Obj.put("totalamount", authHandler.formattedAmount(dataObj.optDouble("taxableamt") + sumTaxAmt, companyId));
            jobject.put("gstr3Obj", gstr3Obj);
        }
        return jobject;
    }

    /**
     * @Desc : Adjustment of tax liability for tax already paid on advance
     * receipt of consideration and invoices issued in the current period for
     * the supplies.
     * @param reqParams
     * @return
     * @throws JSONException
     * @throws ServiceException
     */
    public JSONObject getAdjustedAdvance(JSONObject reqParams) throws JSONException, ServiceException {
        String companyId=reqParams.optString("companyid");
        double sumTaxAmt=0d;
        double IGSTAmount=0d;
        double CGSTAmount=0d;
        double SGSTAmount=0d;
        double CESSAmount=0d;
        JSONObject gstr3Obj=new JSONObject();
        JSONArray returnArr = new JSONArray();
        JSONObject jobject =new JSONObject();
        JSONObject summaryObj = new JSONObject();
        JSONArray summaryArr = new JSONArray();
        String typeofinvoice=GSTRConstants.ATADJ;
        JSONObject dataObj=new JSONObject();
        if (reqParams.has("isPurchase") && reqParams.optBoolean("isPurchase")) {
            dataObj = gSTR2Service.getTaxPaidOnAdvance(reqParams);
            typeofinvoice=reqParams.optString("typeofinvoice");
        }else{
            dataObj = gSTR1DeskeraServiceDao.getAdvanceReceiptAdjustmentMerged(reqParams);
        }
        
        JSONArray dataArray = dataObj.optJSONArray("atadj");
        for (int index = 0; index < dataArray.length(); index++) {
            JSONObject posObj = dataArray.getJSONObject(index);
            JSONArray itemsarrArray = posObj.getJSONArray("itms");
            for (int itemindex = 0; itemindex < itemsarrArray.length(); itemindex++) {
                JSONObject jSONObject = new JSONObject();
               
                JSONObject itemObj = itemsarrArray.getJSONObject(itemindex);
                IGSTAmount += itemObj.optDouble("iamt");
                CGSTAmount += itemObj.optDouble("camt");
                SGSTAmount += itemObj.optDouble("samt");
                CESSAmount += itemObj.optDouble("csamt");
                sumTaxAmt += itemObj.optDouble("iamt") + itemObj.optDouble("camt") + itemObj.optDouble("samt") + itemObj.optDouble("csamt");
                double taxamt = itemObj.optDouble("iamt") + itemObj.optDouble("camt") + itemObj.optDouble("samt") + itemObj.optDouble("csamt");
                if (reqParams.optBoolean(GSTR3BConstants.DETAILED_VIEW_REPORT, false)) {
                    jSONObject.put(GSTR3BConstants.DATAINDEX_PERSONNAME, posObj.optString("customerName"));
                    jSONObject.put(GSTR3BConstants.DATAINDEX_TRANSACTION_NUMBER, itemObj.optString("anum"));
                    jSONObject.put(GSTR3BConstants.DATAINDEX_DATE, itemObj.optString("adt"));
                    if (!StringUtil.isNullOrEmpty(itemObj.optString("gstin"))) {
                        jSONObject.put(GSTR3BConstants.DATAINDEX_GSTIN, itemObj.optString("gstin"));
                    }
                    jSONObject.put(GSTR3BConstants.DATAINDEX_IGSTAMOUNT, itemObj.optDouble("iamt"));
                    jSONObject.put(GSTR3BConstants.DATAINDEX_CGSTAMOUNT, itemObj.optDouble("camt"));
                    jSONObject.put(GSTR3BConstants.DATAINDEX_SGSTAMOUNT, itemObj.optDouble("samt"));
                    jSONObject.put(GSTR3BConstants.DATAINDEX_CESS, itemObj.optDouble("csamt"));
                    jSONObject.put(GSTR3BConstants.DATAINDEX_TAXABLE_AMOUNT, itemObj.optDouble("txval"));
                    jSONObject.put(GSTR3BConstants.DATAINDEX_TOTAL_TAX, taxamt);
                    jSONObject.put(GSTR3BConstants.DATAINDEX_TOTAL_AMOUNT, itemObj.optDouble("txval") + taxamt);
                    jSONObject.put(GSTR3BConstants.DATAINDEX_DOCTYPE, "Receipt/Payment (Adjusted Advance)");
                    jSONObject.put(GSTR3BConstants.DATAINDEX_POS, posObj.optString(GSTRConstants.pos));
                } else {
                    jSONObject.put("placeofsupply", posObj.optString(GSTRConstants.pos));
                    jSONObject.put("pos", posObj.optString(GSTRConstants.pos));
                    jSONObject.put("stcode", posObj.optString(GSTRConstants.statecode));
                    jSONObject.put("supplierName", posObj.optString("vendorName"));
                    jSONObject.put("gstin", posObj.optString("gstin"));
                    jSONObject.put("customername", posObj.optString("customerName"));
                    jSONObject.put("receiptno", itemObj.optString("anum"));
                    jSONObject.put("receiptdate", itemObj.optString("adt"));
                    if (!StringUtil.isNullOrEmpty(itemObj.optString("gstin"))) {
                        jSONObject.put("gstin", itemObj.optString("gstin"));
                    }
                    jSONObject.put("igstamt", itemObj.optDouble("iamt"));
                    jSONObject.put("cgstamt", itemObj.optDouble("camt"));
                    jSONObject.put("sgstamt", itemObj.optDouble("samt"));
                    jSONObject.put("cessamt", itemObj.optDouble("csamt"));
                    jSONObject.put("sumTaxableAmt", itemObj.optDouble("txval"));
                    jSONObject.put("sumTaxAmt", taxamt);
                    jSONObject.put("sumTotalAmt", itemObj.optDouble("txval") + taxamt);
                }
                returnArr.put(jSONObject);
            }
        }
        jobject.put("data", returnArr);
        if (!reqParams.optBoolean(GSTR3BConstants.DETAILED_VIEW_REPORT, false)) {
            if (reqParams.optBoolean("isGSTR1")) {
                /**
                 * code execute for GSTR1 report to show particulars in bold
                 */
                summaryObj.put("typeofinvoice", "<b>" + typeofinvoice + "<b>");
            } else {
                summaryObj.put("typeofinvoice", typeofinvoice);
            }
            summaryObj.put("numberofinvoices", dataObj.optInt("count"));
            summaryObj.put("igstamt", authHandler.formattedAmount(IGSTAmount, companyId));
            summaryObj.put("sgstamt", authHandler.formattedAmount(SGSTAmount, companyId));
            summaryObj.put("cgstamt", authHandler.formattedAmount(CGSTAmount, companyId));
            summaryObj.put("cessamt", authHandler.formattedAmount(CESSAmount, companyId));
            summaryObj.put("sumTaxableAmt", authHandler.formattedAmount(dataObj.optDouble("taxableamt"), companyId));
            summaryObj.put("sumTaxAmt", authHandler.formattedAmount(sumTaxAmt, companyId));
            summaryObj.put("sumTotalAmt", authHandler.formattedAmount(dataObj.optDouble("taxableamt") + sumTaxAmt, companyId));
            summaryArr.put(summaryObj);
            jobject.put("summaryArr", summaryArr);
        }
        if (!reqParams.optBoolean(GSTR3BConstants.DETAILED_VIEW_REPORT, false) || (reqParams.has("reportid") && reqParams.optInt("reportid", 0) == Constants.GSTR3B_Summary_Report)) {
            /**
             * Put data for GSTR3B
             */
            gstr3Obj.put("taxableamt", authHandler.formattedAmount(dataObj.optDouble("taxableamt"), companyId));
            gstr3Obj.put("igst", authHandler.formattedAmount(IGSTAmount, companyId));
            gstr3Obj.put("cgst", authHandler.formattedAmount(CGSTAmount, companyId));
            gstr3Obj.put("sgst", authHandler.formattedAmount(SGSTAmount, companyId));
            gstr3Obj.put("csgst", authHandler.formattedAmount(CESSAmount, companyId));
            gstr3Obj.put("totaltax", authHandler.formattedAmount(sumTaxAmt, companyId));
            gstr3Obj.put("totalamount", authHandler.formattedAmount(dataObj.optDouble("taxableamt") + sumTaxAmt, companyId));
            jobject.put("gstr3Obj", gstr3Obj);
        }
        return jobject;
    }
    /**
     * @Desc : HSN wise summary of goods /services supplied during the tax
     * period
     * @param reqParams
     * @return
     * @throws JSONException
     * @throws ServiceException
     */
    public JSONObject getHSNSummarydetails(JSONObject reqParams) throws JSONException, ServiceException {
        String companyId=reqParams.optString("companyid");
        JSONArray returnArr = new JSONArray();
        JSONObject jobject =new JSONObject();
        JSONObject summaryObj = new JSONObject();
        JSONArray summaryArr = new JSONArray();
        String typeofinvoice = GSTRConstants.HSNSummary;
        JSONObject dataObj = new JSONObject();
        if (reqParams.has("isPurchase") && reqParams.optBoolean("isPurchase")) {
            dataObj = gSTR2Service.getHSNSummarydetails(reqParams);
            typeofinvoice = reqParams.optString("typeofinvoice");
        } else {
            dataObj = gSTR1DeskeraServiceDao.getHSNSummarydetails(reqParams);
        }
        double taxableAmt=0.0;
        double taxAmt=0.0;
        double totalAmt = 0.0;
        double sumTaxableAmt = 0.0;
        double sumTaxAmt = 0.0;
        double sumTotalAmt = 0.0;
        double sumigstAmt = 0.0;
        double sumcgstAmt = 0.0;
        double sumsgstAmt = 0.0;
        double sumcessAmt = 0.0;
        JSONArray dataArray = dataObj.optJSONArray("hsn");
        for (int index = 0; index < dataArray.length(); index++) {
            taxAmt = 0.0;
            totalAmt = 0.0;
            JSONObject posObj = dataArray.getJSONObject(index);
            JSONArray itemsarrArray = posObj.getJSONArray("data");
            for (int itemindex = 0; itemindex < itemsarrArray.length(); itemindex++) {
                
                JSONObject jSONObject = new JSONObject();
                JSONObject itemObj = itemsarrArray.getJSONObject(itemindex);
                jSONObject.put("hsnno", itemObj.optString("hsn_sc"));
                jSONObject.put("description", itemObj.optString("desc"));
                jSONObject.put("uqc", itemObj.optString("uqc"));
                jSONObject.put("totalquantity", itemObj.optDouble("qty"));
                taxableAmt = itemObj.optDouble("txval");
                jSONObject.put("taxableAmt", authHandler.formattedAmount(taxableAmt,companyId));
                jSONObject.put("IGSTamount", authHandler.formattedAmount(itemObj.optDouble("iamt"),companyId));
                jSONObject.put("CGSTamount", authHandler.formattedAmount(itemObj.optDouble("camt"),companyId));
                jSONObject.put("SGSTamount", authHandler.formattedAmount(itemObj.optDouble("samt"),companyId));
                jSONObject.put("cess", authHandler.formattedAmount(itemObj.optDouble("csamt"),companyId));
                taxAmt =(itemObj.optDouble("iamt")+itemObj.optDouble("camt")+itemObj.optDouble("samt")+itemObj.optDouble("csamt"));
                jSONObject.put("totaltax", authHandler.formattedAmount(taxAmt, companyId));
                sumigstAmt += itemObj.optDouble("iamt");
                sumcgstAmt += itemObj.optDouble("camt");
                sumsgstAmt += itemObj.optDouble("samt");
                sumcessAmt += itemObj.optDouble("csamt");
                totalAmt=itemObj.optDouble("val");
                jSONObject.put("totalAmt",  authHandler.formattedAmount(itemObj.optDouble("val"),companyId));
                jSONObject.put("gstin","NA");
                jSONObject.put("invNum", itemObj.optString("invnum"));
                returnArr.put(jSONObject);
                sumTaxableAmt += taxableAmt;
                sumTaxAmt += taxAmt;
                sumTotalAmt += totalAmt;
            }
        }
        jobject.put("data", returnArr);
        if (reqParams.optBoolean("isGSTR1")) {
            /**
             * code execute for GSTR1 report to show particulars in bold
             */
            summaryObj.put("typeofinvoice", "<b>" + typeofinvoice + "<b>");
        } else {
            summaryObj.put("typeofinvoice", typeofinvoice);
        }
        summaryObj.put("numberofinvoices", "");
        summaryObj.put("igstamt", authHandler.formattedAmount(sumigstAmt, companyId));
        summaryObj.put("sgstamt", authHandler.formattedAmount(sumsgstAmt, companyId));
        summaryObj.put("cgstamt", authHandler.formattedAmount(sumcgstAmt, companyId));
        summaryObj.put("cessamt", authHandler.formattedAmount(sumcessAmt, companyId));
        summaryObj.put("sumTaxableAmt", authHandler.formattedAmount(sumTaxableAmt, companyId));
        summaryObj.put("sumTaxAmt", authHandler.formattedAmount(sumTaxAmt, companyId));
        summaryObj.put("sumTotalAmt", authHandler.formattedAmount(sumTotalAmt, companyId));
        summaryArr.put(summaryObj);
        jobject.put("summaryArr", summaryArr);
        return jobject;
    }

    /**
     * @Description - To get export Excel file as per column model populating in
     * GSTR1-Details
     * @param params
     * @return
     * @throws JSONException
     * @throws ServiceException
     */
    @Override
    public HSSFWorkbook exportGSTR1Summary(JSONObject params) throws JSONException, ServiceException {
        JSONObject reqParams = params;
        String companyId = params.getString("companyid");
        /* * before starting sectional data need to get column no for Product Tax
         * Class (HSN)
         */
       
        JSONArray array = new JSONArray();
        JSONArray array1 = new JSONArray();
        String start = params.optString("start");
        String limit = params.optString("limit");
    
        getEntityDataForRequestedModule(reqParams);
        getColNumForRequestedModules(reqParams);
        getLocalStateOfEntity(reqParams);
        HSSFWorkbook wb = new HSSFWorkbook();
        /**
         * B2B
         */
        reqParams.put("entitycolnum", reqParams.optString("invoiceentitycolnum"));
        reqParams.put("entityValue", reqParams.optString("invoiceentityValue"));
        reqParams.put("excludeTermAmountForRCMInvoices", true);
        JSONObject invwithgstn = getB2BInvoiceDetails(reqParams,null);
        reqParams.remove("excludeTermAmountForRCMInvoices");
        invwithgstn.put(Constants.entity, params.optString(Constants.entity, ""));
        invwithgstn.put(Constants.companyKey, params.optString(Constants.companyKey, ""));
        GSTR1ExportToExcel.writedatain_B2B(wb, invwithgstn);

        /**
         * B2CL
         */
        JSONObject B2CL = getB2ClInvoiceDetails(reqParams);
        B2CL.put(Constants.entity, params.optString(Constants.entity, ""));
        B2CL.put(Constants.companyKey, params.optString(Constants.companyKey, ""));
        GSTR1ExportToExcel.writedatain_B2CL(wb, B2CL);

        /**
         * B2CS
         */
        JSONObject B2CS = getB2CSInvoiceDetails(reqParams);
        B2CS.put(Constants.entity, params.optString(Constants.entity, ""));
        B2CS.put(Constants.companyKey, params.optString(Constants.companyKey, ""));
        GSTR1ExportToExcel.writedatain_B2CS(wb, B2CS);
        /**
         * CDNR
         */
        reqParams.put("entitycolnum", reqParams.optString("cnentitycolnum"));
        reqParams.put("entityValue", reqParams.optString("cnentityValue"));
        int dnreasoncol=fieldManagerDAOobj.getColumnFromFieldParams(GSTRConstants.GSTCNCN_REASON, companyId, Constants.Acc_Debit_Note_ModuleId, 0);
        int cnreasoncol=fieldManagerDAOobj.getColumnFromFieldParams(GSTRConstants.GSTCNCN_REASON, companyId, Constants.Acc_Credit_Note_ModuleId, 0);
        reqParams.put("dnreasoncol", dnreasoncol);
        reqParams.put("cnreasoncol", cnreasoncol);
        JSONObject CDNR = getCDNRInvoiceDetails(reqParams, null);
        CDNR.put(Constants.entity, params.optString(Constants.entity, ""));
        CDNR.put(Constants.companyKey, params.optString(Constants.companyKey, ""));
        GSTR1ExportToExcel.writedatain_CDNR(wb, CDNR);
        /**
         * CDNUR
         */
        JSONObject CDNUR = getCDNURInvoiceDetails(reqParams);
        CDNUR.put(Constants.entity, params.optString(Constants.entity, ""));
        CDNUR.put(Constants.companyKey, params.optString(Constants.companyKey, ""));
        GSTR1ExportToExcel.writedatain_CDNUR(wb, CDNUR);

        reqParams.put("entitycolnum", reqParams.optString("receiptentitycolnum"));
        reqParams.put("entityValue", reqParams.optString("receiptentityValue"));
        /**
         * AT
         */
        JSONObject atobj = getTaxLiabilityOnAdvance(reqParams);
        atobj.put(Constants.entity, params.optString(Constants.entity, ""));
        atobj.put(Constants.companyKey, params.optString(Constants.companyKey, ""));
        GSTR1ExportToExcel.writedatain_AT(wb, atobj);

        /**
         * Adjusted Advance
         */
        JSONObject atadjobj = getAdjustedAdvance(reqParams);
        atadjobj.put(Constants.entity, params.optString(Constants.entity, ""));
        atadjobj.put(Constants.companyKey, params.optString(Constants.companyKey, ""));
        GSTR1ExportToExcel.writedatain_ATADJ(wb, atadjobj);

        /**
         * HSN
         */
        reqParams.put("entitycolnum", reqParams.optString("invoiceentitycolnum"));
        reqParams.put("entityValue", reqParams.optString("invoiceentityValue"));
        JSONObject hsnobj = getHSNSummarydetails(reqParams);
        hsnobj.put(Constants.entity, params.optString(Constants.entity, ""));
        hsnobj.put(Constants.companyKey, params.optString(Constants.companyKey, ""));
        GSTR1ExportToExcel.writedatain_HSN(wb, hsnobj);

        /**
         * Export
         */
        reqParams.put("entitycolnum", reqParams.optString("invoiceentitycolnum"));
        reqParams.put("entityValue", reqParams.optString("invoiceentityValue"));
        JSONObject exportobj = getExportInvoiceDetails(reqParams);
        exportobj.put(Constants.entity, params.optString(Constants.entity, ""));
        exportobj.put(Constants.companyKey, params.optString(Constants.companyKey, ""));
        GSTR1ExportToExcel.writedatain_EXP(wb, exportobj);
        /**
         * Exempt
         */
        reqParams.put("entitycolnum", reqParams.optString("invoiceentitycolnum"));
        reqParams.put("entityValue", reqParams.optString("invoiceentityValue"));
        JSONObject exemptobj = getExemptInvoiceDetails(reqParams);
        exemptobj.put(Constants.entity, params.optString(Constants.entity, ""));
        exemptobj.put(Constants.companyKey, params.optString(Constants.companyKey, ""));
        JSONArray dataJArr = exemptobj.has("detailsdata") ? exemptobj.optJSONArray("detailsdata") : new JSONArray();
        AccGSTReportServiceImpl.writeDataForGSTR3B(wb, dataJArr, "exemp", "Exempt", params);

        reqParams.put("section", "DOCS");
        reqParams.put("atadj",false);
        JSONObject docsObj = getGSTR1SummaryDetails(reqParams);
        docsObj.put(Constants.entity, params.optString(Constants.entity, ""));
        GSTR1ExportToExcel.writedatain_DOCS(wb, docsObj);
        return wb;
    }
    /**
     * @Description - To get export Excel file as per column model populating in
     * GSTR2-Details
     * @param params
     * @return
     * @throws JSONException
     * @throws ServiceException
     */
    @Override
    public HSSFWorkbook exportGSTR2Summary(JSONObject params) throws JSONException, ServiceException {
        params.put("isPurchase", true);
        JSONObject reqParams = params;
        String companyId = params.getString("companyid");
        /* * before starting sectional data need to get column no for Product Tax
         * Class (HSN)
         */
        JSONArray array = new JSONArray();
        JSONArray array1 = new JSONArray();
        String start = params.optString("start");
        String limit = params.optString("limit");
        Company company = null;
        KwlReturnObject companyResult = null;
        companyResult = accountingHandlerDAOobj.getObject(Company.class.getName(), companyId);
        company = (Company) companyResult.getEntityList().get(0);
        /* * before starting sectional data need to get column no for Product Tax
         * Class (HSN)
         */
        int colnum = 0;
        HashMap fieldparams = new HashMap<>();
        fieldparams.put(Constants.filter_names, Arrays.asList(Constants.companyid, Constants.moduleid, "fieldname"));
        fieldparams.put(Constants.filter_values, Arrays.asList(companyId, Constants.Acc_Product_Master_ModuleId, "Custom_" + Constants.HSN_SACCODE));
        KwlReturnObject kwlReturnObjectGstCust = fieldManagerDAOobj.getFieldParams(fieldparams);
        List<FieldParams> fieldParamses = kwlReturnObjectGstCust.getEntityList();
        for (FieldParams fieldParams : fieldParamses) {
            colnum = fieldParams.getColnum();
        }
        reqParams.put("hsncolnum", colnum);
        fieldparams.put(Constants.filter_names, Arrays.asList(Constants.companyid, Constants.moduleid, "fieldname"));
        fieldparams.put(Constants.filter_values, Arrays.asList(companyId, Constants.Acc_Product_Master_ModuleId, "Custom_" + Constants.GSTProdCategory));
        kwlReturnObjectGstCust = fieldManagerDAOobj.getFieldParams(fieldparams);
        fieldParamses = kwlReturnObjectGstCust.getEntityList();
        for (FieldParams fieldParams : fieldParamses) {
            colnum = fieldParams.getColnum();
        }
        params.put("taxclasscolnum", colnum);
        /**
         * get State column no for Invoice module
         */
        int colnumforstate = fieldManagerDAOobj.getColumnFromFieldParams(Constants.STATE, companyId, Constants.Acc_Vendor_Invoice_ModuleId, 0);
        params.put("statecolnum", colnumforstate);
        /**
         * Get Local state Value
         */
        String entityId = params.optString("entityid");
        params.put("companyid", companyId);
        params.put("entityid", entityId);
        String localState = fieldManagerDAOobj.getStateForEntity(params);
        params.put("localState", localState);
        params.put("entityState", localState);
        /**
         * Get Entity Value and its column no for invoice
         */
        fieldparams.put(Constants.filter_names, Arrays.asList(Constants.companyid, Constants.moduleid, "fieldname"));
        fieldparams.put(Constants.filter_values, Arrays.asList(companyId, Constants.Acc_Vendor_Invoice_ModuleId, "Custom_" + Constants.ENTITY));
        String fieldid = "";
        kwlReturnObjectGstCust = fieldManagerDAOobj.getFieldParams(fieldparams);
        fieldParamses = kwlReturnObjectGstCust.getEntityList();
        for (FieldParams fieldParams : fieldParamses) {
            colnum = fieldParams.getColnum();
            fieldid = fieldParams.getId();
        }
        String entityValue = params.optString("entity");
        String ids = fieldManagerDAOobj.getIdsUsingParamsValueWithoutInsert(fieldid, entityValue);
        reqParams.put("invoiceentitycolnum", colnum);
        reqParams.put("invoiceentityValue", ids);
        fieldparams.put(Constants.filter_names, Arrays.asList(Constants.companyid, Constants.moduleid, "fieldname"));
        fieldparams.put(Constants.filter_values, Arrays.asList(companyId, Constants.Acc_Make_Payment_ModuleId, "Custom_" + Constants.ENTITY));
        kwlReturnObjectGstCust = fieldManagerDAOobj.getFieldParams(fieldparams);
        fieldParamses = kwlReturnObjectGstCust.getEntityList();
        for (FieldParams fieldParams : fieldParamses) {
            colnum = fieldParams.getColnum();
            fieldid = fieldParams.getId();
        }
        ids = fieldManagerDAOobj.getIdsUsingParamsValueWithoutInsert(fieldid, entityValue);
        reqParams.put("receiptentitycolnum", colnum);
        reqParams.put("receiptentityValue", ids);

        fieldparams.put(Constants.filter_names, Arrays.asList(Constants.companyid, Constants.moduleid, "fieldname"));
        fieldparams.put(Constants.filter_values, Arrays.asList(companyId, Constants.Acc_Debit_Note_ModuleId, "Custom_" + Constants.ENTITY));
        kwlReturnObjectGstCust = fieldManagerDAOobj.getFieldParams(fieldparams);
        fieldParamses = kwlReturnObjectGstCust.getEntityList();
        for (FieldParams fieldParams : fieldParamses) {
            colnum = fieldParams.getColnum();
            fieldid = fieldParams.getId();
        }
        ids = fieldManagerDAOobj.getIdsUsingParamsValueWithoutInsert(fieldid, entityValue);
        reqParams.put("cnentitycolnum", colnum);
        reqParams.put("cnentityValue", ids);

        fieldparams.put(Constants.filter_names, Arrays.asList(Constants.companyid, Constants.moduleid, "fieldname"));
        fieldparams.put(Constants.filter_values, Arrays.asList(companyId, Constants.Acc_GENERAL_LEDGER_ModuleId, "Custom_" + Constants.ENTITY));
        kwlReturnObjectGstCust = fieldManagerDAOobj.getFieldParams(fieldparams);
        fieldParamses = kwlReturnObjectGstCust.getEntityList();
        for (FieldParams fieldParams : fieldParamses) {
            colnum = fieldParams.getColnum();
            fieldid = fieldParams.getId();
        }
        ids = fieldManagerDAOobj.getIdsUsingParamsValueWithoutInsert(fieldid, entityValue);
        reqParams.put("jeentitycolnum", colnum);
        reqParams.put("jeentityValue", ids);

        HSSFWorkbook wb = new HSSFWorkbook();
        reqParams.put("entitycolnum", reqParams.optString("invoiceentitycolnum"));
        reqParams.put("entityValue", reqParams.optString("invoiceentityValue"));
        
        fieldparams.put(Constants.filter_names, Arrays.asList(Constants.companyid, Constants.moduleid, "fieldname"));
        fieldparams.put(Constants.filter_values, Arrays.asList(companyId, Constants.Acc_Credit_Note_ModuleId, "Custom_" + Constants.ENTITY));
        kwlReturnObjectGstCust = fieldManagerDAOobj.getFieldParams(fieldparams);
        fieldParamses = kwlReturnObjectGstCust.getEntityList();
        for (FieldParams fieldParams : fieldParamses) {
            colnum = fieldParams.getColnum();
            fieldid = fieldParams.getId();
        }
        ids = fieldManagerDAOobj.getIdsUsingParamsValue(fieldid, entityValue);
        reqParams.put("cnentitycolnum", colnum);
        reqParams.put("cnentityValue", ids);
        /**
         * Asset Invoice details
         */
        putAssetInvoiceDimensionColumnDetails(params, reqParams);
        /**
         * Put Lease Sales Invoice Dimension column number details
         */
        putLeaseInvoiceDimensionColumnDetails(params, reqParams);
        /**
         * B2B
         */
        params = new JSONObject(reqParams, JSONObject.getNames(reqParams));
        params.put("registrationType", Constants.GSTRegType_Regular + "," + Constants.GSTRegType_Regular_ECommerce);
        params.put("CustomerType", Constants.CUSTVENTYPE_NA  + "," + Constants.CUSTVENTYPE_DEEMED_EXPORT + "," + Constants.CUSTVENTYPE_SEZ+ "," + Constants.CUSTVENTYPE_SEZWOPAY);
        params.put("taxClassType", FieldComboData.TaxClass_Percenatge);
        params.put("typeofjoinisleft",true);
//        params.put("zerorated", false);
         params.put("typeofinvoice", "B2B Invoices");
        JSONObject invwithgstn = getB2BInvoiceDetails(params, null);
        invwithgstn.put("isPurchase", true);
        invwithgstn.put(Constants.entity, params.optString(Constants.entity, ""));
        invwithgstn.put(Constants.companyKey, params.optString(Constants.companyKey, ""));
        GSTR2ExportToExcel.writedatain_GSTR2B2B(wb, invwithgstn);

          /**
         * CDN Invoices
         */
        params = new JSONObject(reqParams, JSONObject.getNames(reqParams));
        params.put("entitycolnum", reqParams.optString("cnentitycolnum"));
        params.put("registrationType",Constants.GSTRegType_Regular+","+Constants.GSTRegType_Regular_ECommerce);
        params.put("entityValue", reqParams.optString("cnentityValue"));
        params.put("typeofinvoice", "CDN Invoices");
        JSONObject CDNR = getCDNRInvoiceDetails(params, null);
        CDNR.put("isPurchase", true);
        CDNR.put(Constants.entity, params.optString(Constants.entity, ""));
        CDNR.put(Constants.companyKey, params.optString(Constants.companyKey, ""));
        GSTR2ExportToExcel.writedatain_GSTR2CDNR(wb, CDNR);

        /**
         * B2B Unregistered Invoice
         */
        params = new JSONObject(reqParams, JSONObject.getNames(reqParams));
        params.put("registrationType", Constants.GSTRegType_Unregistered);
        params.put("CustomerType", Constants.CUSTVENTYPE_NA  + "," + Constants.CUSTVENTYPE_DEEMED_EXPORT + "," + Constants.CUSTVENTYPE_SEZ+ "," + Constants.CUSTVENTYPE_SEZWOPAY);
        params.put("taxClassType", FieldComboData.TaxClass_Percenatge);
//        params.put("zerorated", false);
        params.put("typeofinvoice", "B2B Unregistered Invoice");
        JSONObject B2BUR = getB2BInvoiceDetails(params, null);
        B2BUR.put("isPurchase", true);
        B2BUR.put(Constants.entity, params.optString(Constants.entity, ""));
        B2BUR.put(Constants.companyKey, params.optString(Constants.companyKey, ""));
        GSTR2ExportToExcel.writedatain_GSTR2B2B_URD(wb, B2BUR);



        /**
         * Import Service
         */
        params = new JSONObject(reqParams, JSONObject.getNames(reqParams));
        params.put("CustomerType", Constants.CUSTVENTYPE_Import);
//                    parameters.put("taxClassType", FieldComboData.TaxClass_Percenatge);
        params.put("isServiceProduct", true);
        params.put("typeofinvoice", "Import of Services");
        params.put("typeofjoinisleft", true);
        params.put("InvType", "Import_of_service");
        params.put("excludetaxClassType", true);
        params.put(GSTRConstants.ADD_LANDEDCOST_JOIN_FOR_IMPORT_INVOICES, true);
        JSONObject ImpService = getB2BInvoiceDetails(params, null);
        ImpService.put("isPurchase", true);
        ImpService.put(Constants.entity, params.optString(Constants.entity, ""));
        ImpService.put(Constants.companyKey, params.optString(Constants.companyKey, ""));
        GSTR2ExportToExcel.writedatain_GSTR2Import_service(wb, ImpService);

 /**
         * Import goods
         */
        params = new JSONObject(reqParams, JSONObject.getNames(reqParams));
        params.put("CustomerType", Constants.CUSTVENTYPE_Import);
//                    parameters.put("taxClassType", FieldComboData.TaxClass_Percenatge);
        params.put("isServiceProduct", false);
        params.put("typeofinvoice", "Import of Goods");
        params.put("typeofjoinisleft", true);
        params.put("isGSTINnull", true);
        params.put("InvType", "Import_of_goods");
        params.put("excludetaxClassType", true);
        params.put(GSTRConstants.ADD_LANDEDCOST_JOIN_FOR_IMPORT_INVOICES, true);
        JSONObject ImpGoods = getB2BInvoiceDetails(params, null);
        ImpGoods.put("isPurchase", true);
        ImpGoods.put(Constants.entity, params.optString(Constants.entity, ""));
        ImpGoods.put(Constants.companyKey, params.optString(Constants.companyKey, ""));
        GSTR2ExportToExcel.writedatain_GSTR2Import_goods(wb, ImpGoods);      


        /**
         * CDN Unregistered
         */
        JSONObject cdnrobj = null;
        params = new JSONObject(reqParams, JSONObject.getNames(reqParams));
        params.put("entitycolnum", reqParams.optString("cnentitycolnum"));
        params.put("registrationType", Constants.GSTRegType_Unregistered);
        params.put("entityValue", reqParams.optString("cnentityValue"));
        params.put("typeofinvoice", "CDN Unregistered");
        cdnrobj = getCDNRInvoiceDetails(params, null);
        cdnrobj.put("isPurchase", true);
        cdnrobj.put("sheetname", "CDN Unregistered");
        cdnrobj.put(Constants.entity, params.optString(Constants.entity, ""));
        cdnrobj.put(Constants.companyKey, params.optString(Constants.companyKey, ""));
        GSTR2ExportToExcel.writedatain_GSTR2CDNUR(wb, cdnrobj);


        /**
         * NIL Rated
         */
        params = new JSONObject(reqParams, JSONObject.getNames(reqParams));
        params.put("goodsreceiptentitycolnum", reqParams.optString("invoiceentitycolnum"));
        params.put("goodsreceiptentityValue", reqParams.optString("invoiceentityValue"));
        params.put("entitycolnum", reqParams.optString("invoiceentitycolnum"));
        params.put("entityValue", reqParams.optString("invoiceentityValue"));
        params.put("typeofinvoice", "NIL Rated");
        params.put("section", GSTRConstants.GSTR2_nilRated);
        params.put("isExport",true);
        JSONObject nilratedjobj = getGSTR2SummaryDetails(params);
        nilratedjobj.put("isPurchase", true);
        nilratedjobj.put("sheetname", "NIL Rated");
        nilratedjobj.put(Constants.entity, params.optString(Constants.entity, ""));
        nilratedjobj.put(Constants.companyKey, params.optString(Constants.companyKey, ""));
        GSTR2ExportToExcel.writedatain_GSTR2Nil_Rated(wb, nilratedjobj);

        
        /*
         *
         * Advance Section
         */
        
        fieldparams.put(Constants.filter_names, Arrays.asList(Constants.companyid, Constants.moduleid, "fieldname"));
        fieldparams.put(Constants.filter_values, Arrays.asList(companyId, Constants.Acc_Make_Payment_ModuleId, "Custom_" + Constants.ENTITY));
        kwlReturnObjectGstCust = fieldManagerDAOobj.getFieldParams(fieldparams);
        fieldParamses = kwlReturnObjectGstCust.getEntityList();
        for (FieldParams fieldParams : fieldParamses) {
            colnum = fieldParams.getColnum();
            fieldid = fieldParams.getId();
        }
        ids = fieldManagerDAOobj.getIdsUsingParamsValueWithoutInsert(fieldid, entityValue);
        reqParams.put("entitycolnum", colnum);
        reqParams.put("entityValue", ids);
        params.put("typeofinvoice", "RCM on Advance");
        params = new JSONObject(reqParams, JSONObject.getNames(reqParams));
        JSONObject at = getTaxLiabilityOnAdvance(params);
        at.put("isPurchase", true);
        at.put(Constants.entity, params.optString(Constants.entity, ""));
        at.put(Constants.companyKey, params.optString(Constants.companyKey, ""));
        GSTR2ExportToExcel.writedatain_GSTR2AT(wb, at);
        /*
         *
         * Tax paid on  Advance Adjusted
         */

        params = new JSONObject(reqParams, JSONObject.getNames(reqParams));
        params.put("typeofinvoice", "Tax paid on RCM Advance");
        JSONObject atadj = getAdjustedAdvance(params);
        atadj.put("isPurchase", true);
        atadj.put(Constants.entity, params.optString(Constants.entity, ""));
        atadj.put(Constants.companyKey, params.optString(Constants.companyKey, ""));
        GSTR2ExportToExcel.writedatain_GSTR2ATADJ(wb, atadj);


        return wb;
    }
    /**
     * @Description - To get Export Excel file with invoice level details of all
     * sections for E-Filing of GSTR1
     * @param params
     * @return
     * @throws JSONException
     * @throws ServiceException
     */
    @Override
    public HSSFWorkbook exportGSTR1Efiling(JSONObject params) throws JSONException, ServiceException {
       JSONObject reqParams = params;
        String companyId = params.getString("companyid");
        /* * before starting sectional data need to get column no for Product Tax
         * Class (HSN)
         */
       
        JSONArray array = new JSONArray();
        JSONArray array1 = new JSONArray();
        String start = params.optString("start");
        String limit = params.optString("limit");
    
        getEntityDataForRequestedModule(reqParams);
        getColNumForRequestedModules(reqParams);
        getLocalStateOfEntity(reqParams);
        /**
         * Get Export related data
         */
        String fieldlables = "'" + Constants.GSTR1_SHIPPING_PORT + "','" + Constants.GSTR1_SHIPPING_DATE + "','" + Constants.GSTR1_SHIPPING_BILL_NO + "'";
        JSONObject fpparams = new JSONObject();
        fpparams.put("moduleid", Constants.Acc_Invoice_ModuleId);
        fpparams.put("companyId", companyId);
        fpparams.put("customColumn", 0);
        fpparams.put("fieldlables", fieldlables);
        List fieldscol = fieldManagerDAOobj.getFieldwiseColumnFieldParams(fpparams);
        if (!fieldscol.isEmpty() && fieldscol.size() > 0 && fieldscol.get(0) != null) {
            for (Iterator it = fieldscol.iterator(); it.hasNext();) {
                String object = (String) it.next();
                String[] pair = object.split(":");
                reqParams.put(pair[0] + "colnum", pair[1]);
            }
        }
        HSSFWorkbook eFilingWb = new HSSFWorkbook();
        
        // adding first blank sheet
        HSSFSheet sheet = eFilingWb.createSheet("GSTR1-efiling");
        
        reqParams.put("entitycolnum", reqParams.optString("invoiceentitycolnum"));
        reqParams.put("entityValue", reqParams.optString("invoiceentityValue"));
        reqParams.put("excludeTermAmountForRCMInvoices", true);
        JSONObject invwithgstn = gSTR1DeskeraServiceDao.getB2BInvoices(reqParams);
        reqParams.remove("excludeTermAmountForRCMInvoices");
        GSTR1ExportToExcel.writedatain_efilingB2B(eFilingWb, invwithgstn);

        /**
         * B2CL
         */
        JSONObject B2CL = gSTR1DeskeraServiceDao.getB2CLInvoices(params);
        GSTR1ExportToExcel.writedatain_efilingB2CL(eFilingWb, B2CL);

        /**
         * B2CS
         */
        JSONObject B2CS = gSTR1DeskeraServiceDao.getB2CSInvoices(params);
        GSTR1ExportToExcel.writedatain_efilingB2CS(eFilingWb, B2CS);

        reqParams.put("entitycolnum", reqParams.optString("cnentitycolnum"));
        reqParams.put("entityValue", reqParams.optString("cnentityValue"));

        JSONObject CDNR = gSTR1DeskeraServiceDao.getCDNRInvoices(params);
        GSTR1ExportToExcel.writedatain_efilingCDNR(eFilingWb, CDNR);

        JSONObject CDNUR = gSTR1DeskeraServiceDao.getCDNURInvoices(params);
        GSTR1ExportToExcel.writedatain_efilingCDNUR(eFilingWb, CDNUR);

        /**
         * Export
         */
        reqParams.put("entitycolnum", reqParams.optString("invoiceentitycolnum"));
        reqParams.put("entityValue", reqParams.optString("invoiceentityValue"));

        JSONObject EXPORT = gSTR1DeskeraServiceDao.getExportTypeInvoice(params);
        GSTR1ExportToExcel.writedatain_efilingExport(eFilingWb, EXPORT);        
        
        reqParams.put("entitycolnum", reqParams.optString("receiptentitycolnum"));
        reqParams.put("entityValue", reqParams.optString("receiptentityValue"));
        /**
         * AT
         */
        JSONObject atobj = gSTR1DeskeraServiceDao.getAT(reqParams);
        GSTR1ExportToExcel.writedatain_EfilingAT(eFilingWb, atobj);

        /**
         * Adjusted Advance
         */
        JSONObject atadjobj = gSTR1DeskeraServiceDao.getAdvanceReceiptAdjustmentMerged(reqParams);
        GSTR1ExportToExcel.writedatain_EfilingATADJ(eFilingWb, atadjobj);

        reqParams.put("entitycolnum", reqParams.optString("invoiceentitycolnum"));
        reqParams.put("entityValue", reqParams.optString("invoiceentityValue"));
        params.put("reportid", Constants.GSTR3B_Summary_Report);
        JSONObject exemptobj = getExemptInvoiceDetails(reqParams);
        exemptobj.put("isEfiling", true);
        GSTR1ExportToExcel.writedatain_EXEMP(eFilingWb, exemptobj);

        /**
         * HSN
         */
        reqParams.put("entitycolnum", reqParams.optString("invoiceentitycolnum"));
        reqParams.put("entityValue", reqParams.optString("invoiceentityValue"));
        atobj = getHSNSummarydetails(reqParams);
        atobj=convertHSNJSONForEfilling(atobj);
        atobj.put("isEfiling", true);
        GSTR1ExportToExcel.writedatain_HSN(eFilingWb, atobj);
        
        reqParams.put("section", "DOCS");
        reqParams.put("atadj",false);
        JSONObject docsObj = getGSTR1SummaryDetails(reqParams);
        docsObj.put("isEfiling", true);
        GSTR1ExportToExcel.writedatain_DOCS(eFilingWb, docsObj);
        return eFilingWb;
    }
    /**
     * Function to create JSON for HSN E-Filling
     * @param dataObj
     * @return
     * @throws JSONException 
     */
    public JSONObject convertHSNJSONForEfilling(JSONObject dataObj) throws JSONException {
        JSONObject returnobj = new JSONObject();
        JSONArray finalArr=new JSONArray();
        JSONArray dataArr = dataObj.optJSONArray("data");
        Map<String, JSONArray> hsnMap = AccountingManager.getSortedArrayMapBasedOnJSONAttribute(dataArr,"hsnno");
        for (String hsnkey : hsnMap.keySet()) {
            JSONArray hsnArr = hsnMap.get(hsnkey);
            Map<String, JSONArray> uqcMap = AccountingManager.getSortedArrayMapBasedOnJSONAttribute(hsnArr, "uqc");
            for (String uqckey : uqcMap.keySet()) {
                JSONObject jSONObject=new JSONObject();
                JSONArray itemArr = uqcMap.get(uqckey);
                for (int i = 0; i < itemArr.length(); i++) {
                    JSONObject itemObj = itemArr.getJSONObject(i);
                    jSONObject.put("hsnno", itemObj.optString("hsnno"));
                    jSONObject.put("description", itemObj.optString("description"));
                    jSONObject.put("uqc", itemObj.optString("uqc"));
                    jSONObject.put("totalquantity", jSONObject.optDouble("totalquantity",0) + itemObj.optDouble("totalquantity",0));
                    jSONObject.put("taxableAmt", jSONObject.optDouble("taxableAmt",0) + itemObj.optDouble("taxableAmt",0));
                    jSONObject.put("IGSTamount", jSONObject.optDouble("IGSTamount",0) + itemObj.optDouble("IGSTamount",0));
                    jSONObject.put("CGSTamount", jSONObject.optDouble("CGSTamount",0) + itemObj.optDouble("CGSTamount",0));
                    jSONObject.put("SGSTamount", jSONObject.optDouble("SGSTamount",0) + itemObj.optDouble("SGSTamount",0));
                    jSONObject.put("cess", jSONObject.optDouble("cess",0) + itemObj.optDouble("cess",0));
                    jSONObject.put("totaltax", jSONObject.optDouble("totaltax",0) + itemObj.optDouble("totaltax",0));
                    jSONObject.put("totalAmt", jSONObject.optDouble("totalAmt",0) + itemObj.optDouble("totalAmt",0));
                    jSONObject.put("gstin", "NA");
                }
                finalArr.put(jSONObject);
            }
        }
    return  returnobj.put("data", finalArr) ;
}
    
    /**
     * GST computation section wise functions
     */
    public JSONObject getGSTComputation_Sales_Section_1(JSONObject params) throws JSONException, ServiceException {
        JSONObject reqParams = new JSONObject(params, JSONObject.getNames(params));
        reqParams.put("isGSTINnull", false);
        reqParams.put("registrationType", Constants.GSTRegType_Regular);
        reqParams.put("CustomerType", Constants.CUSTVENTYPE_NA);
        reqParams.put("isRCMApplicable", false);
        reqParams.put("typeofjoinisleft", true);
        reqParams.put("taxClassType", FieldComboData.TaxClass_Percenatge);
        JSONObject dataObj = getInvoiceForGSTR3BTaxable(reqParams);
        return dataObj;
    }

    public JSONObject getGSTComputation_Sales_Section_1_1(JSONObject params) throws JSONException, ServiceException {
        JSONObject reqParams = new JSONObject(params, JSONObject.getNames(params));
        reqParams.put("isGSTINnull", false);
        reqParams.put("registrationType", Constants.GSTRegType_Regular);
        reqParams.put("CustomerType", Constants.CUSTVENTYPE_NA);
        reqParams.put("isRCMApplicable", true);
        reqParams.put("taxClassType", FieldComboData.TaxClass_Percenatge);
        reqParams.put("typeofjoinisleft", true);
        reqParams.put("excludeTermAmountForRCMInvoices", true);
        JSONObject dataObj = getInvoiceForGSTR3BTaxable(reqParams);
        return dataObj;
    }

    public JSONObject getGSTComputation_Sales_Section_1_2(JSONObject params) throws JSONException, ServiceException {
        JSONObject reqParams = new JSONObject(params, JSONObject.getNames(params));
        reqParams.put("isGSTINnull", false);
        reqParams.put("interstate", true);
//        reqParams.put("isRCMApplicable", false);
        reqParams.put("registrationType", Constants.GSTRegType_Composition);
        reqParams.put("CustomerType", Constants.CUSTVENTYPE_NA);
        reqParams.put("taxClassType", FieldComboData.TaxClass_Percenatge);
        reqParams.put("typeofjoinisleft", true);
        JSONObject dataObj = getInvoiceForGSTR3BTaxable(reqParams);
        return dataObj;
    }

    public JSONObject getGSTComputation_Sales_Section_1_3(JSONObject params) throws JSONException, ServiceException {
        JSONObject reqParams = new JSONObject(params, JSONObject.getNames(params));
        reqParams.put("isGSTINnull", false);
        reqParams.put("intrastate", true);
//        reqParams.put("isRCMApplicable", false);
        reqParams.put("registrationType", Constants.GSTRegType_Composition);
        reqParams.put("CustomerType", Constants.CUSTVENTYPE_NA);
        reqParams.put("taxClassType", FieldComboData.TaxClass_Percenatge);
        reqParams.put("typeofjoinisleft", true);
        JSONObject dataObj = getInvoiceForGSTR3BTaxable(reqParams);
        return dataObj;
    }

    public JSONObject getGSTComputation_Sales_Section_2(JSONObject params) throws JSONException, ServiceException {
        JSONObject reqParams = new JSONObject(params, JSONObject.getNames(params));
        reqParams.put("isGSTINnull", true);
        reqParams.put("greaterlimit", true);
        reqParams.put("limitamount", 250000);
        reqParams.put("interstate", true);
        reqParams.put("isRCMApplicable", false);
        reqParams.put("registrationType", Constants.GSTRegType_Unregistered);
        reqParams.put("CustomerType", Constants.CUSTVENTYPE_NA);
        reqParams.put("taxClassType", FieldComboData.TaxClass_Percenatge);
        JSONObject dataObj = getInvoiceForGSTR3BTaxable(reqParams);
        return dataObj;
    }

    public JSONObject getGSTComputation_Sales_Section_2_2(JSONObject params) throws JSONException, ServiceException {
        JSONObject reqParams = new JSONObject(params, JSONObject.getNames(params));
        reqParams.put("isGSTINnull", true);
//        reqParams.put("greaterlimit", false);
        reqParams.put("registrationType", Constants.GSTRegType_Unregistered);
        reqParams.put("limitamount", 250000);
        reqParams.put("isRCMApplicable", false);
        reqParams.put("isb2cs", true);
        reqParams.put("CustomerType", Constants.CUSTVENTYPE_NA);
        reqParams.put("taxClassType", FieldComboData.TaxClass_Percenatge);
        JSONObject dataObj = getInvoiceForGSTR3BTaxable(reqParams);
        return dataObj;
    }

    public JSONObject getGSTComputation_Sales_Section_3(JSONObject params) throws JSONException, ServiceException {
        JSONObject reqParams = new JSONObject(params, JSONObject.getNames(params));
        reqParams.put("isGSTINnull", true);
        reqParams.put("registrationType", Constants.GSTRegType_Unregistered);
        reqParams.put("CustomerType", Constants.CUSTVENTYPE_Export + "," + Constants.CUSTVENTYPE_ExportWOPAY);
        reqParams.put("typeofjoinisleft", true);
        reqParams.put("isRCMApplicable", false);
        reqParams.put("taxClassType", FieldComboData.TaxClass_Percenatge);
        JSONObject dataObj = getInvoiceForGSTR3BTaxable(reqParams);
        return dataObj;
    }

    public JSONObject getGSTComputation_Sales_Section_3_1(JSONObject params) throws JSONException, ServiceException {
        JSONObject reqParams = new JSONObject(params, JSONObject.getNames(params));
        reqParams.put("isGSTINnull", false);
        reqParams.put("registrationType", Constants.GSTRegType_Regular);
        reqParams.put("CustomerType", Constants.CUSTVENTYPE_SEZ + "," + Constants.CUSTVENTYPE_SEZWOPAY);
        reqParams.put("typeofjoinisleft", true);
        reqParams.put("isRCMApplicable", false);
        reqParams.put("taxClassType", FieldComboData.TaxClass_Percenatge);
        JSONObject dataObj = getInvoiceForGSTR3BTaxable(reqParams);
        return dataObj;
    }

    public JSONObject getGSTComputation_Sales_Section_4(JSONObject params) throws JSONException, ServiceException {
        JSONObject reqParams = new JSONObject(params, JSONObject.getNames(params));
        reqParams.put("registrationType", Constants.GSTRegType_Regular + "," + Constants.GSTRegType_Unregistered + "," + Constants.GSTRegType_Composition);
        reqParams.put("taxClassType", FieldComboData.TaxClass_ZeroPercenatge);
        reqParams.put("typeofjoinisleft", true);
        reqParams.put("isRCMApplicable", false);
        reqParams.put("CustomerType", Constants.CUSTVENTYPE_NA + "," + Constants.CUSTVENTYPE_SEZ + "," + Constants.CUSTVENTYPE_SEZWOPAY + "," + Constants.CUSTVENTYPE_Export + "," + Constants.CUSTVENTYPE_ExportWOPAY);
        JSONObject dataObj = getInvoiceForGSTR3BTaxable(reqParams);
        return dataObj;
    }

    public JSONObject getGSTComputation_Sales_Section_4_1(JSONObject params) throws JSONException, ServiceException {
        JSONObject reqParams = new JSONObject(params, JSONObject.getNames(params));
        reqParams.put("registrationType", Constants.GSTRegType_Regular + "," + Constants.GSTRegType_Unregistered + "," + Constants.GSTRegType_Composition);
        reqParams.put("taxClassType", FieldComboData.TaxClass_Exempted);
        reqParams.put("typeofjoinisleft", true);
        reqParams.put("isRCMApplicable", false);
        reqParams.put("CustomerType", Constants.CUSTVENTYPE_NA + "," + Constants.CUSTVENTYPE_SEZ + "," + Constants.CUSTVENTYPE_SEZWOPAY + "," + Constants.CUSTVENTYPE_Export + "," + Constants.CUSTVENTYPE_ExportWOPAY);
        JSONObject dataObj = getInvoiceForGSTR3BTaxable(reqParams);
        return dataObj;
    }

    public JSONObject getGSTComputation_Sales_Section_4_2(JSONObject params) throws JSONException, ServiceException {
        JSONObject reqParams = new JSONObject(params, JSONObject.getNames(params));
        reqParams.put("registrationType", Constants.GSTRegType_Regular + "," + Constants.GSTRegType_Unregistered + "," + Constants.GSTRegType_Composition);
        reqParams.put("taxClassType", FieldComboData.TaxClass_Non_GST_Product);
        reqParams.put("typeofjoinisleft", true);
        reqParams.put("isRCMApplicable", false);
        reqParams.put("CustomerType", Constants.CUSTVENTYPE_NA + "," + Constants.CUSTVENTYPE_SEZ + "," + Constants.CUSTVENTYPE_SEZWOPAY + "," + Constants.CUSTVENTYPE_Export + "," + Constants.CUSTVENTYPE_ExportWOPAY);
        JSONObject dataObj = getInvoiceForGSTR3BTaxable(reqParams);
        return dataObj;
    }

    public JSONObject getGSTComputation_Sales_Section_7(JSONObject params) throws JSONException, ServiceException {
        JSONObject reqParams = new JSONObject(params, JSONObject.getNames(params));
        reqParams.put("registrationType", Constants.GSTRegType_Regular);
        reqParams.put("isGSTINnull", false);
        reqParams.put("CustomerType", Constants.CUSTVENTYPE_NA + "," + Constants.CUSTVENTYPE_SEZ + "," + Constants.CUSTVENTYPE_SEZWOPAY);
        reqParams.put("isRCMApplicable", false);
        reqParams.put("typeofjoinisleft", true);
        JSONObject dataObj = getDNAgainstSalesForGSTR3BTaxable(reqParams);
        return dataObj;
    }

    public JSONObject getGSTComputation_Sales_Section_7_2(JSONObject params) throws JSONException, ServiceException {
        JSONObject reqParams = new JSONObject(params, JSONObject.getNames(params));
        reqParams.put("registrationType", Constants.GSTRegType_Composition);
        reqParams.put("isGSTINnull", false);
        reqParams.put("CustomerType", Constants.CUSTVENTYPE_NA);
        reqParams.put("typeofjoinisleft", true);
        JSONObject dataObj = getDNAgainstSalesForGSTR3BTaxable(reqParams);
        return dataObj;
    }

    public JSONObject getGSTComputation_Sales_Section_7_1(JSONObject params) throws JSONException, ServiceException {
        JSONObject reqParams = new JSONObject(params, JSONObject.getNames(params));
        reqParams.put("registrationType", Constants.GSTRegType_Unregistered);
        reqParams.put("isGSTINnull", true);
        reqParams.put("typeofjoinisleft", true);
        reqParams.put("CustomerType", Constants.CUSTVENTYPE_NA + "," + Constants.CUSTVENTYPE_Export + "," + Constants.CUSTVENTYPE_ExportWOPAY);
        JSONObject dataObj = getDNAgainstSalesForGSTR3BTaxable(reqParams);
        return dataObj;
    }

    public JSONObject getGSTComputation_Sales_Section_7_3(JSONObject params) throws JSONException, ServiceException {
        JSONObject reqParams = new JSONObject(params, JSONObject.getNames(params));
        reqParams.put("registrationType", Constants.GSTRegType_Regular);
        reqParams.put("isGSTINnull", false);
        reqParams.put("typeofjoinisleft", true);
        reqParams.put("CustomerType", Constants.CUSTVENTYPE_NA + "," + Constants.CUSTVENTYPE_SEZ + "," + Constants.CUSTVENTYPE_SEZWOPAY);
        JSONObject dataObj = getCNForGSTR3BTaxable(reqParams);
        return dataObj;
    }

    public JSONObject getGSTComputation_Sales_Section_7_5(JSONObject params) throws JSONException, ServiceException {
        JSONObject reqParams = new JSONObject(params, JSONObject.getNames(params));
        reqParams.put("registrationType", Constants.GSTRegType_Composition);
        reqParams.put("isGSTINnull", false);
        reqParams.put("CustomerType", Constants.CUSTVENTYPE_NA);
        reqParams.put("isRCMApplicable", false);
        reqParams.put("typeofjoinisleft", true);
        JSONObject dataObj = getCNForGSTR3BTaxable(reqParams);
        return dataObj;
    }

    public JSONObject getGSTComputation_Sales_Section_7_4(JSONObject params) throws JSONException, ServiceException {
        JSONObject reqParams = new JSONObject(params, JSONObject.getNames(params));
        reqParams.put("registrationType", Constants.GSTRegType_Unregistered);
        reqParams.put("isGSTINnull", true);
        reqParams.put("typeofjoinisleft", true);
        reqParams.put("CustomerType", Constants.CUSTVENTYPE_NA + "," + Constants.CUSTVENTYPE_Export + "," + Constants.CUSTVENTYPE_ExportWOPAY);
        JSONObject dataObj = getCNForGSTR3BTaxable(reqParams);
        return dataObj;
    }

    public JSONObject getGSTComputation_Sales_Section_8(JSONObject params) throws JSONException, ServiceException {
        JSONObject reqParams = new JSONObject(params, JSONObject.getNames(params));
        return new JSONObject();
    }

    public JSONObject getGSTComputation_Sales_Section_9_4(JSONObject params) throws JSONException, ServiceException {
        JSONObject reqParams = new JSONObject(params, JSONObject.getNames(params));
        return new JSONObject();
    }

    public JSONObject getGSTComputation_Sales_Section_9(JSONObject params) throws JSONException, ServiceException {
        JSONObject reqParams = new JSONObject(params, JSONObject.getNames(params));
        reqParams.put("entitycolnum", reqParams.optString("receiptentitycolnum"));
        reqParams.put("entityValue", reqParams.optString("receiptentityValue"));
        reqParams.put("registrationType", Constants.GSTRegType_Regular);
        reqParams.put("isGSTINnull", false);
        reqParams.put("CustomerType", Constants.CUSTVENTYPE_NA + "," + Constants.CUSTVENTYPE_SEZ + "," + Constants.CUSTVENTYPE_SEZWOPAY);
        reqParams.put("isRCMApplicable", false);
        JSONObject dataObj = getTaxLiabilityOnAdvance(reqParams);
        return dataObj;
    }

    public JSONObject getGSTComputation_Sales_Section_9_1(JSONObject params) throws JSONException, ServiceException {
        JSONObject reqParams = new JSONObject(params, JSONObject.getNames(params));
        reqParams.put("entitycolnum", reqParams.optString("receiptentitycolnum"));
        reqParams.put("entityValue", reqParams.optString("receiptentityValue"));
        reqParams.put("registrationType", Constants.GSTRegType_Unregistered);
        reqParams.put("isGSTINnull", true);
        reqParams.put("CustomerType", Constants.CUSTVENTYPE_NA + "," + Constants.CUSTVENTYPE_Export + "," + Constants.CUSTVENTYPE_ExportWOPAY);
        reqParams.put("isRCMApplicable", false);
        JSONObject dataObj = getTaxLiabilityOnAdvance(reqParams);
        return dataObj;
    }

    public JSONObject getGSTComputation_Sales_Section_9_2(JSONObject params) throws JSONException, ServiceException {
        JSONObject reqParams = new JSONObject(params, JSONObject.getNames(params));
        reqParams.put("entitycolnum", reqParams.optString("receiptentitycolnum"));
        reqParams.put("entityValue", reqParams.optString("receiptentityValue"));
        reqParams.put("registrationType", Constants.GSTRegType_Composition);
        reqParams.put("isGSTINnull", false);
        reqParams.put("CustomerType", Constants.CUSTVENTYPE_NA);
        reqParams.put("isRCMApplicable", false);
        JSONObject dataObj = getTaxLiabilityOnAdvance(reqParams);
        return dataObj;
    }

    public JSONObject getGSTComputation_Sales_Section_10_1(JSONObject params) throws JSONException, ServiceException {
        JSONObject reqParams = new JSONObject(params, JSONObject.getNames(params));
        reqParams.put("entitycolnum", reqParams.optString("receiptentitycolnum"));
        reqParams.put("entityValue", reqParams.optString("receiptentityValue"));
        reqParams.put("registrationType", Constants.GSTRegType_Unregistered);
        reqParams.put("isGSTINnull", true);
        reqParams.put("CustomerType", Constants.CUSTVENTYPE_NA + "," + Constants.CUSTVENTYPE_Export);
        reqParams.put("isRCMApplicable", false);
        JSONObject dataObj = getAdjustedAdvance(reqParams);
        return dataObj;
    }

    public JSONObject getGSTComputation_Sales_Section_10_2(JSONObject params) throws JSONException, ServiceException {
        JSONObject reqParams = new JSONObject(params, JSONObject.getNames(params));
        reqParams.put("entitycolnum", reqParams.optString("receiptentitycolnum"));
        reqParams.put("entityValue", reqParams.optString("receiptentityValue"));
        reqParams.put("registrationType", Constants.GSTRegType_Composition);
        reqParams.put("isGSTINnull", false);
        reqParams.put("CustomerType", Constants.CUSTVENTYPE_NA);
        reqParams.put("isRCMApplicable", false);
        JSONObject dataObj = getAdjustedAdvance(reqParams);
        return dataObj;
    }

    public JSONObject getGSTComputation_Sales_Section_10(JSONObject params) throws JSONException, ServiceException {
        JSONObject reqParams = new JSONObject(params, JSONObject.getNames(params));
        reqParams.put("entitycolnum", reqParams.optString("receiptentitycolnum"));
        reqParams.put("entityValue", reqParams.optString("receiptentityValue"));
        reqParams.put("registrationType", Constants.GSTRegType_Regular);
        reqParams.put("isGSTINnull", false);
        reqParams.put("CustomerType", Constants.CUSTVENTYPE_NA + "," + Constants.CUSTVENTYPE_SEZ + "," + Constants.CUSTVENTYPE_SEZWOPAY);
        JSONObject dataObj = getAdjustedAdvance(reqParams);
        return dataObj;
    }

    public JSONObject getGSTComputation_Purchase_Section_1(JSONObject params) throws JSONException, ServiceException {
        JSONObject reqParams = new JSONObject(params, JSONObject.getNames(params));
        reqParams.put("isGSTINnull", false);
        reqParams.put("isRCMApplicable", false);
        reqParams.put("registrationType", Constants.GSTRegType_Regular);
        reqParams.put("CustomerType", Constants.CUSTVENTYPE_NA);
        reqParams.put("typeofjoinisleft", true);
        reqParams.put("taxClassType", FieldComboData.TaxClass_Percenatge);
        reqParams.put("itctype", Constants.GST_ITCTYPE_DEFAULT+","+Constants.GST_ITCTYPE_REVERSED);
        JSONObject dataObj = getGoodsReceiptForGSTR3BTaxable(reqParams);
        return dataObj;
    }

    public JSONObject getGSTComputation_Purchase_Section_1_1(JSONObject params) throws JSONException, ServiceException {
        JSONObject reqParams = new JSONObject(params, JSONObject.getNames(params));
        reqParams.put("isGSTINnull", false);
        reqParams.put("isRCMApplicable", true);
        reqParams.put("registrationType", Constants.GSTRegType_Regular);
        reqParams.put("CustomerType", Constants.CUSTVENTYPE_NA);
        reqParams.put("typeofjoinisleft", true);
        reqParams.put("taxClassType", FieldComboData.TaxClass_Percenatge);
        reqParams.put("itctype", Constants.GST_ITCTYPE_DEFAULT+","+Constants.GST_ITCTYPE_REVERSED);
        JSONObject dataObj = getGoodsReceiptForGSTR3BTaxable(reqParams);
        return dataObj;
    }

    public JSONObject getGSTComputation_Purchase_Section_2(JSONObject params) throws JSONException, ServiceException {
        JSONObject reqParams = new JSONObject(params, JSONObject.getNames(params));
        reqParams.put("isGSTINnull", true);
        reqParams.put("registrationType", Constants.GSTRegType_Unregistered);
        reqParams.put("CustomerType", Constants.CUSTVENTYPE_NA);
        reqParams.put("typeofjoinisleft", true);
        reqParams.put("taxClassType", FieldComboData.TaxClass_Percenatge);
        reqParams.put("itctype", Constants.GST_ITCTYPE_DEFAULT+","+Constants.GST_ITCTYPE_REVERSED);
        JSONObject dataObj = getGoodsReceiptForGSTR3BTaxable(reqParams);
        return dataObj;
    }

    public JSONObject getGSTComputation_Purchase_Section_3(JSONObject params) throws JSONException, ServiceException {
        JSONObject reqParams = new JSONObject(params, JSONObject.getNames(params));
        reqParams.put("isServiceProduct", true);
        reqParams.put("isGSTINnull", true);
        reqParams.put("CustomerType", Constants.CUSTVENTYPE_Import);
        reqParams.put(GSTRConstants.ADD_LANDEDCOST_JOIN_FOR_IMPORT_INVOICES, true);
        reqParams.put("excludetaxClassType", true);
        reqParams.put("registrationType", Constants.GSTRegType_Unregistered);
        reqParams.put("typeofjoinisleft", true);
        reqParams.put("isRCMApplicable", false);
        reqParams.put("taxClassType", FieldComboData.TaxClass_Percenatge);
        reqParams.put("itctype", Constants.GST_ITCTYPE_DEFAULT+","+Constants.GST_ITCTYPE_REVERSED);
        JSONObject dataObj = getGoodsReceiptForGSTR3BTaxable(reqParams);
        return dataObj;
    }

    public JSONObject getGSTComputation_Purchase_Section_3_1(JSONObject params) throws JSONException, ServiceException {
        JSONObject reqParams = new JSONObject(params, JSONObject.getNames(params));
        reqParams.put("isServiceProduct", false);
        reqParams.put("isGSTINnull", true);
        reqParams.put("CustomerType", Constants.CUSTVENTYPE_Import);
        reqParams.put(GSTRConstants.ADD_LANDEDCOST_JOIN_FOR_IMPORT_INVOICES, true);
        reqParams.put("registrationType", Constants.GSTRegType_Unregistered);
        reqParams.put("excludetaxClassType", true);
        reqParams.put("typeofjoinisleft", true);
        reqParams.put("isRCMApplicable", false);
        reqParams.put("taxClassType", FieldComboData.TaxClass_Percenatge);
        reqParams.put("itctype", Constants.GST_ITCTYPE_DEFAULT+","+Constants.GST_ITCTYPE_REVERSED);
        JSONObject dataObj = getGoodsReceiptForGSTR3BTaxable(reqParams);
        return dataObj;
    }

    public JSONObject getGSTComputation_Purchase_Section_3_2(JSONObject params) throws JSONException, ServiceException {
        JSONObject reqParams = new JSONObject(params, JSONObject.getNames(params));
        reqParams.put("isGSTINnull", false);
        reqParams.put("registrationType", Constants.GSTRegType_Regular);
        reqParams.put("CustomerType", Constants.CUSTVENTYPE_SEZ + "," + Constants.CUSTVENTYPE_SEZWOPAY);
        reqParams.put("typeofjoinisleft", true);
        reqParams.put("isRCMApplicable", false);
        reqParams.put("taxClassType", FieldComboData.TaxClass_Percenatge);
        reqParams.put("itctype", Constants.GST_ITCTYPE_DEFAULT+","+Constants.GST_ITCTYPE_REVERSED);
        JSONObject dataObj = getGoodsReceiptForGSTR3BTaxable(reqParams);
        return dataObj;
    }

    public JSONObject getGSTComputation_Purchase_Section_6_1(JSONObject params) throws JSONException, ServiceException {
        JSONObject reqParams = new JSONObject(params, JSONObject.getNames(params));
        return new JSONObject();
    }

    public JSONObject getGSTComputation_Purchase_Section_6_2(JSONObject params) throws JSONException, ServiceException {
        JSONObject reqParams = new JSONObject(params, JSONObject.getNames(params));
        return new JSONObject();
    }

    public JSONObject getGSTComputation_Purchase_Section_4(JSONObject params) throws JSONException, ServiceException {
        JSONObject reqParams = new JSONObject(params, JSONObject.getNames(params));
        reqParams.remove("isGSTINnull");
        reqParams.put("CustomerType", Constants.CUSTVENTYPE_NA + "," + Constants.CUSTVENTYPE_SEZ + "," + Constants.CUSTVENTYPE_SEZWOPAY+","+Constants.CUSTVENTYPE_Import);
        reqParams.put("registrationType", Constants.GSTRegType_Regular + "," + Constants.GSTRegType_Composition+","+Constants.GSTRegType_Unregistered);
        reqParams.put("typeofjoinisleft", true);
//        reqParams.put("taxClassType", FieldComboData.TaxClass_Percenatge);
        reqParams.remove("cnentityValue");
        JSONObject dataObj = getDNForGSTR3BTaxable(reqParams);
        return dataObj;
    }

    public JSONObject getGSTComputation_Purchase_Section_5(JSONObject params) throws JSONException, ServiceException {
        JSONObject reqParams = new JSONObject(params, JSONObject.getNames(params));
        reqParams.remove("isGSTINnull");
        reqParams.put("CustomerType", Constants.CUSTVENTYPE_NA + "," + Constants.CUSTVENTYPE_SEZ + "," + Constants.CUSTVENTYPE_SEZWOPAY+","+Constants.CUSTVENTYPE_Import);
        reqParams.put("registrationType", Constants.GSTRegType_Regular + "," + Constants.GSTRegType_Composition + "," + Constants.GSTRegType_Unregistered);
        reqParams.put("typeofjoinisleft", true);
//        reqParams.put("taxClassType", FieldComboData.TaxClass_Percenatge);
        reqParams.put("onlycnagainstvendor", true);
        JSONObject dataObj = getDNForGSTR3BTaxable(reqParams);
        return dataObj;
    }

    public JSONObject getGSTComputation_Purchase_Section_6_5(JSONObject params) throws JSONException, ServiceException {
        JSONObject reqParams = new JSONObject(params, JSONObject.getNames(params));
        return new JSONObject();
    }

    public JSONObject getGSTComputation_Purchase_Section_6(JSONObject params) throws JSONException, ServiceException {
        JSONObject reqParams = new JSONObject(params, JSONObject.getNames(params));
        reqParams.put("isGSTINnull", false);
        reqParams.put("registrationType", Constants.GSTRegType_Composition);
        reqParams.put("CustomerType", Constants.CUSTVENTYPE_NA);
        reqParams.put("typeofjoinisleft", true);
        reqParams.put("isRCMApplicable", false);
        reqParams.put("taxClassType", FieldComboData.TaxClass_Percenatge);
        reqParams.put("itctype", Constants.GST_ITCTYPE_DEFAULT+","+Constants.GST_ITCTYPE_REVERSED);
        JSONObject dataObj = getGoodsReceiptForGSTR3BTaxable(reqParams);
        return dataObj;
    }

    public JSONObject getGSTComputation_Purchase_Section_7(JSONObject params) throws JSONException, ServiceException {
        JSONObject reqParams = new JSONObject(params, JSONObject.getNames(params));
        reqParams.put("taxClassType", FieldComboData.TaxClass_Exempted);
        reqParams.put("isRCMApplicable", false);
        reqParams.put("CustomerType", Constants.CUSTVENTYPE_NA + "," + Constants.CUSTVENTYPE_SEZ + "," + Constants.CUSTVENTYPE_SEZWOPAY + "," + Constants.CUSTVENTYPE_Import);
        reqParams.put("itctype", Constants.GST_ITCTYPE_DEFAULT+","+Constants.GST_ITCTYPE_REVERSED);
        JSONObject dataObj = getGoodsReceiptForGSTR3BNonGST(reqParams);
        return dataObj;
    }

    public JSONObject getGSTComputation_Purchase_Section_7_1(JSONObject params) throws JSONException, ServiceException {
        JSONObject reqParams = new JSONObject(params, JSONObject.getNames(params));
        reqParams.put("taxClassType", FieldComboData.TaxClass_ZeroPercenatge);
        reqParams.put("isRCMApplicable", false);
        reqParams.put("CustomerType", Constants.CUSTVENTYPE_NA + "," + Constants.CUSTVENTYPE_SEZ + "," + Constants.CUSTVENTYPE_SEZWOPAY + "," + Constants.CUSTVENTYPE_Import);
        reqParams.put("typeofjoinisleft", true);
        reqParams.put("itctype", Constants.GST_ITCTYPE_DEFAULT+","+Constants.GST_ITCTYPE_REVERSED);
        JSONObject dataObj = getGoodsReceiptForGSTR3BTaxable(reqParams);
        return dataObj;
    }

    public JSONObject getGSTComputation_Purchase_Section_7_2(JSONObject params) throws JSONException, ServiceException {
        JSONObject reqParams = new JSONObject(params, JSONObject.getNames(params));
        reqParams.put("taxClassType", FieldComboData.TaxClass_Non_GST_Product);
        reqParams.put("isRCMApplicable", false);
        reqParams.put("CustomerType", Constants.CUSTVENTYPE_NA + "," + Constants.CUSTVENTYPE_SEZ + "," + Constants.CUSTVENTYPE_SEZWOPAY + "," + Constants.CUSTVENTYPE_Import);
        reqParams.put("itctype", Constants.GST_ITCTYPE_DEFAULT+","+Constants.GST_ITCTYPE_REVERSED);
        JSONObject dataObj = getGoodsReceiptForGSTR3BNonGST(reqParams);
        return dataObj;
    }

    public JSONObject getGSTComputation_Purchase_Section_11(JSONObject params) throws JSONException, ServiceException {
        JSONObject reqParams = new JSONObject(params, JSONObject.getNames(params));
//        reqParams.put("isPurchase", true);
//        reqParams.put("entitycolnum", reqParams.optString("paymententitycolnum"));
//        reqParams.put("entityValue", reqParams.optString("paymententityValue"));
//        JSONObject dataObj = getTaxLiabilityOnAdvance(reqParams);
        return new JSONObject();
    }
    public JSONObject getGSTComputation_Purchase_Section_11_10(JSONObject params) throws JSONException, ServiceException {
        JSONObject reqParams = new JSONObject(params, JSONObject.getNames(params));
        JSONObject dataObj = gSTR2Service.getITCJournalEntryDetails(params, new JSONArray());
        return dataObj;
    }
    public JSONObject getGSTComputation_Purchase_Section_12(JSONObject params) throws JSONException, ServiceException {
        JSONObject reqParams = new JSONObject(params, JSONObject.getNames(params));
//        reqParams.put("isPurchase", true);
//        reqParams.put("entitycolnum", reqParams.optString("paymententitycolnum"));
//        reqParams.put("entityValue", reqParams.optString("paymententityValue"));
//        JSONObject dataObj = getAdjustedAdvance(reqParams);
        return new JSONObject();
    }
    public JSONObject getGSTComputation_Purchase_Section_13_1(JSONObject params) throws JSONException, ServiceException {
        JSONObject reqParams = new JSONObject(params, JSONObject.getNames(params));
        reqParams.put("isGSTINnull", false);
        reqParams.put("isRCMApplicable", false);
        reqParams.put("GST3B", !params.optBoolean(GSTR3BConstants.DETAILED_VIEW_REPORT, false));
        reqParams.put("registrationType", Constants.GSTRegType_Regular);
        reqParams.put("CustomerType", Constants.CUSTVENTYPE_NA + "," + Constants.CUSTVENTYPE_SEZ);
        reqParams.put("typeofjoinisleft", true);
        reqParams.put("taxClassType", FieldComboData.TaxClass_Percenatge);
        reqParams.put("itctype", Constants.GST_ITCTYPE_BLOCKED);
        JSONObject dataObj = getGoodsReceiptForGSTR3BTaxable(reqParams);
        return dataObj;
    }
    /**
     * a) Outward taxable supplies (other than zero rated, nil rated and
     * exempted)
     *
     * @param reqParams
     * @return
     * @throws JSONException
     * @throws ServiceException
     */
    public JSONObject getInvoiceForGSTR3BTaxable(JSONObject reqParams) throws JSONException, ServiceException {
        /**
         * Get Invoice total sum
         */
        String companyId=reqParams.optString("companyid");
        reqParams.put("entitycolnum", reqParams.optString("invoiceentitycolnum"));
        reqParams.put("entityValue", reqParams.optString("invoiceentityValue"));
        JSONObject jSONObject = new JSONObject();
        List<Object> invoiceData = accEntityGstDao.getInvoiceDataWithDetailsInSql(reqParams);
        reqParams.remove("isb2cs");   // remove to avoid CN index while fetching data
        double taxableAmountInv = 0d;
        double totalAmountInv = 0d;
        double IGSTAmount = 0d;
        double CGSTAmount = 0d;
        double SGSTAmount = 0d;
        double CESSAmount = 0d;
        int count=0;
        if (!reqParams.optBoolean(GSTR3BConstants.DETAILED_VIEW_REPORT, false)) {
            for (Object object : invoiceData) {
                Object[] data = (Object[]) object;
                String term = data[1]!=null?data[1].toString():"";
                double termamount = data[0]!=null?(Double) data[0]:0;
                count = data[4]!=null?((BigInteger) data[4]).intValue():0;
                totalAmountInv = data[3]!=null?(Double) data[3]:0;
                if (term.equalsIgnoreCase(LineLevelTerms.GSTName.get("OutputIGST").toString())) {
                    taxableAmountInv += data[2]!=null?(Double) data[2]:0;
                    IGSTAmount += termamount;
                } else if (term.equalsIgnoreCase(LineLevelTerms.GSTName.get("OutputCGST").toString())) {
                    taxableAmountInv += data[2]!=null?(Double) data[2]:0;
                    CGSTAmount += termamount;
                } else if (term.equalsIgnoreCase(LineLevelTerms.GSTName.get("OutputSGST").toString())) {
                    SGSTAmount += termamount;
                } else if (term.equalsIgnoreCase(LineLevelTerms.GSTName.get("OutputUTGST").toString())) {
                    SGSTAmount += termamount;
                } else if (term.equalsIgnoreCase(LineLevelTerms.GSTName.get("OutputCESS").toString())) {
                    CESSAmount += termamount;
                } else if(StringUtil.isNullOrEmpty(term)){
                    taxableAmountInv += data[2]!=null?(Double) data[2]:0;
                }
            }
            jSONObject.put("count", count);
            jSONObject.put("taxableamt", authHandler.formattedAmount(taxableAmountInv, companyId));
            jSONObject.put("igst", authHandler.formattedAmount(IGSTAmount,companyId));
            jSONObject.put("cgst", authHandler.formattedAmount(CGSTAmount,companyId));
            jSONObject.put("sgst", authHandler.formattedAmount(SGSTAmount,companyId));
            jSONObject.put("csgst", authHandler.formattedAmount(CESSAmount,companyId));
            jSONObject.put("totaltax", authHandler.formattedAmount(IGSTAmount+CGSTAmount+SGSTAmount+CESSAmount,companyId));
            jSONObject.put("totalamount", authHandler.formattedAmount(taxableAmountInv+IGSTAmount+CGSTAmount+SGSTAmount+CESSAmount,companyId));
        } else {
            jSONObject = accGSTReportService.getSalesInvoiceJSONArrayForGSTR3B(invoiceData, reqParams, companyId);
        }
        return jSONObject;
    }
    public JSONObject getGoodsReceiptForGSTR3BTaxable(JSONObject reqParams) throws JSONException, ServiceException {
        /**
         * Get Invoice total sum
         */
        reqParams.put("entitycolnum", reqParams.optString("goodsreceiptentitycolnum"));
        reqParams.put("entityValue", reqParams.optString("goodsreceiptentityValue"));
        JSONObject jSONObject = new JSONObject();
        List<Object> invoiceData = gstr2Dao.getInvoiceDataWithDetailsInSql(reqParams);
        String companyId = reqParams.optString("companyid");
        double taxableAmountInv = 0d;
        double totalAmountInv = 0d;
        double IGSTAmount = 0d;
        double CGSTAmount = 0d;
        double SGSTAmount = 0d;
        double CESSAmount = 0d;
        int count=0;
        if (!reqParams.optBoolean(GSTR3BConstants.DETAILED_VIEW_REPORT, false)) {
            for (Object object : invoiceData) {
                Object[] data = (Object[]) object;
                String term = data[1] != null ? data[1].toString() : "";
                double termamount = data[0] != null ? (Double) data[0] : 0;
                totalAmountInv = data[3] != null ? (Double) data[3] : 0;
                count = data[4] != null ? ((BigInteger) data[4]).intValue() : 0;
                if (term.equalsIgnoreCase(LineLevelTerms.GSTName.get("InputIGST").toString()) || term.equalsIgnoreCase(LineLevelTerms.GSTName.get("OutputIGST").toString())) {
                    IGSTAmount += termamount;
                    taxableAmountInv += data[2] != null ? (Double) data[2] : 0;
                } else if (term.equalsIgnoreCase(LineLevelTerms.GSTName.get("InputCGST").toString()) || term.equalsIgnoreCase(LineLevelTerms.GSTName.get("OutputCGST").toString())) {
                    CGSTAmount += termamount;
                    taxableAmountInv += data[2] != null ? (Double) data[2] : 0;
                } else if (term.equalsIgnoreCase(LineLevelTerms.GSTName.get("InputSGST").toString()) || term.equalsIgnoreCase(LineLevelTerms.GSTName.get("OutputSGST").toString())) {
                    SGSTAmount += termamount;
                } else if (term.equalsIgnoreCase(LineLevelTerms.GSTName.get("InputUTGST").toString()) || term.equalsIgnoreCase(LineLevelTerms.GSTName.get("OutputUTGST").toString())) {
                    SGSTAmount += termamount;
                } else if (term.equalsIgnoreCase(LineLevelTerms.GSTName.get("InputCESS").toString()) || term.equalsIgnoreCase(LineLevelTerms.GSTName.get("OutputCESS").toString())) {
                    CESSAmount += termamount;
                } else if (StringUtil.isNullOrEmpty(term)) {
                    taxableAmountInv += data[2] != null ? (Double) data[2] : 0;
                }
            }
            jSONObject.put("count", count);
            jSONObject.put("taxableamt", authHandler.formattedAmount(taxableAmountInv, companyId));
            jSONObject.put("igst", authHandler.formattedAmount(IGSTAmount, companyId));
            jSONObject.put("cgst", authHandler.formattedAmount(CGSTAmount, companyId));
            jSONObject.put("sgst", authHandler.formattedAmount(SGSTAmount, companyId));
            jSONObject.put("csgst", authHandler.formattedAmount(CESSAmount, companyId));
            jSONObject.put("totaltax", authHandler.formattedAmount(IGSTAmount + CGSTAmount + SGSTAmount + CESSAmount, companyId));
            jSONObject.put("totalamount", authHandler.formattedAmount(taxableAmountInv + IGSTAmount + CGSTAmount + SGSTAmount + CESSAmount, companyId));
        } else {
            jSONObject = accGSTReportService.getPurchaseInvoiceJSONArrayForGSTR3B(invoiceData, reqParams, companyId);
        }
        return jSONObject;
    }
    public JSONObject getDNForGSTR3BTaxable(JSONObject reqParams) throws JSONException, ServiceException {
        /**
         * Get Invoice total sum
         */
        JSONObject jSONObject = new JSONObject();
        double taxableAmountCN = 0d;
        double totalAmountCN = 0d;
        double IGSTAmount = 0d;
        double CGSTAmount = 0d;
        double SGSTAmount = 0d;
        double CESSAmount = 0d;

        /**
         * Get CN amount
         */
        List<Object> cnData = new ArrayList();
        if (!reqParams.optBoolean("onlycnagainstvendor", false)) {
            reqParams.put("entitycolnum", reqParams.optString("dnentitycolnum"));
            reqParams.put("entityValue", reqParams.optString("dnentityValue"));
            cnData = gstr2Dao.getCNDNWithInvoiceDetailsInSql(reqParams);
            if (reqParams.has("zerorated")) {
                reqParams.remove("zerorated");
            }
            List<Object> cnDataWithoutInventory = gstr2Dao.getDNAgainstVendor(reqParams);
            if (cnDataWithoutInventory != null && !cnDataWithoutInventory.isEmpty()) {
                cnData.addAll(cnDataWithoutInventory);
            }
        }
        reqParams.put("isDebitNoteTransaction", true);
        if (reqParams.has("cnentitycolnum") && reqParams.has("cnentityValue")) {
            /**
             * Return CN against vendors
             */
            if (reqParams.optBoolean("onlycnagainstvendor", false)) {
                cnData.clear();
                reqParams.put("isDebitNoteTransaction", false);
            }
            reqParams.put("entitycolnum", reqParams.optString("cnentitycolnum"));
            reqParams.put("entityValue", reqParams.optString("cnentityValue"));
            List<Object> dnAgainstCustomer = gstr2Dao.getCNAgainstVendor(reqParams);
            if (dnAgainstCustomer != null) {
                cnData.addAll(dnAgainstCustomer);
            } 
            reqParams.put("entitycolnum", reqParams.optString("dnentitycolnum"));
            reqParams.put("entityValue", reqParams.optString("dnentityValue"));
        }
        String companyId = reqParams.optString("companyid");
        if (!reqParams.optBoolean(GSTR3BConstants.DETAILED_VIEW_REPORT, false)) {
        for (Object object : cnData) {
            Object[] data = (Object[]) object;
            String term = data[1] != null ? data[1].toString() : "";
            double termamount = data[0] != null ? (Double) data[0] : 0;
            totalAmountCN = data[3] != null ? (Double) data[3] : 0;
            if (term.equalsIgnoreCase(LineLevelTerms.GSTName.get("InputIGST").toString())) {
                taxableAmountCN += data[2] != null ? (Double) data[2] : 0;
                IGSTAmount += termamount;
            } else if (term.equalsIgnoreCase(LineLevelTerms.GSTName.get("InputCGST").toString())) {
                taxableAmountCN += data[2] != null ? (Double) data[2] : 0;
                CGSTAmount += termamount;
            } else if (term.equalsIgnoreCase(LineLevelTerms.GSTName.get("InputSGST").toString())) {
                SGSTAmount += termamount;
            } else if (term.equalsIgnoreCase(LineLevelTerms.GSTName.get("InputUTGST").toString())) {
                SGSTAmount += termamount;
            } else if (term.equalsIgnoreCase(LineLevelTerms.GSTName.get("InputCESS").toString())) {
                CESSAmount += termamount;
            } else if (StringUtil.isNullOrEmpty(term)) {
                taxableAmountCN += data[2] != null ? (Double) data[2] : 0;
            }
        }
        jSONObject.put("taxableamt", authHandler.formattedAmount(taxableAmountCN, companyId));
        jSONObject.put("igst", authHandler.formattedAmount(IGSTAmount, companyId));
        jSONObject.put("cgst", authHandler.formattedAmount(CGSTAmount, companyId));
        jSONObject.put("sgst", authHandler.formattedAmount(SGSTAmount, companyId));
        jSONObject.put("csgst", authHandler.formattedAmount(CESSAmount, companyId));
        jSONObject.put("totaltax", authHandler.formattedAmount(IGSTAmount + CGSTAmount + SGSTAmount + CESSAmount, companyId));
        jSONObject.put("totalamount", authHandler.formattedAmount(taxableAmountCN+IGSTAmount+CGSTAmount+SGSTAmount+CESSAmount, companyId));
        } else {
            jSONObject = accGSTReportService.getDebitNoteJSONArrayForGSTR3B(cnData, reqParams, companyId);
        }
//        jSONObject.put("totalamount", authHandler.formattedAmount(totalAmountCN, companyId));
        return jSONObject;
    }
    public JSONObject getGoodsReceiptForGSTR3BNonGST(JSONObject reqParams) throws JSONException, ServiceException {
        /**
         * Get Invoice total sum
         */
        double taxableAmountInv = 0d;
        double IGSTAmount = 0d;
        double CGSTAmount = 0d;
        double SGSTAmount = 0d;
        double CESSAmount = 0d;
        int count=0;
        JSONObject jSONObject = new JSONObject();
        reqParams.put("entitycolnum", reqParams.optString("goodsreceiptentitycolnum"));
        reqParams.put("entityValue", reqParams.optString("goodsreceiptentityValue"));
//        reqParams.put("isGSTINnull", false);
        reqParams.put("GST3B", !reqParams.optBoolean(GSTR3BConstants.DETAILED_VIEW_REPORT, false));
        reqParams.put("typeofjoinisleft", true);
        reqParams.remove("zerorated");
        String companyId = reqParams.optString("companyid");
        List invoiceData = accEntityGstDao.getNonGSTGoodsReceiptDataWithDetailsInSql(reqParams);
        if (!reqParams.optBoolean(GSTR3BConstants.DETAILED_VIEW_REPORT, false)) {
            for (Object object : invoiceData) {
                Object[] data = (Object[]) object;
                taxableAmountInv = data[0] != null ? (Double) data[0] : 0;
                count = data[1] != null ? ((BigInteger) data[1]).intValue() : 0;
            }
            jSONObject.put("count", count);
            jSONObject.put("Nature of Supplies", "e) Non GST outward supplies");
            jSONObject.put("taxableamt", authHandler.formattedAmount(taxableAmountInv, companyId));
            jSONObject.put("igst", authHandler.formattedAmount(IGSTAmount, companyId));
            jSONObject.put("cgst", authHandler.formattedAmount(CGSTAmount, companyId));
            jSONObject.put("sgst", authHandler.formattedAmount(SGSTAmount, companyId));
            jSONObject.put("csgst", authHandler.formattedAmount(CESSAmount, companyId));
            jSONObject.put("totaltax", authHandler.formattedAmount(IGSTAmount + CGSTAmount + SGSTAmount + CESSAmount, companyId));
            jSONObject.put("totalamount", authHandler.formattedAmount(taxableAmountInv + IGSTAmount + CGSTAmount + SGSTAmount + CESSAmount, companyId));
        } else {
            jSONObject = accGSTReportService.getPurchaseInvoiceJSONArrayForGSTR3B(invoiceData, reqParams, companyId);
        }
        return jSONObject;
    }
    public JSONObject getCNForGSTR3BTaxable(JSONObject reqParams) throws JSONException, ServiceException {
        /**
         * Get Invoice total sum
         */
        String companyId=reqParams.optString("companyid");
        JSONObject jSONObject = new JSONObject();
        double taxableAmountCN = 0d;
        double totalAmountCN = 0d;
        double IGSTAmount = 0d;
        double CGSTAmount = 0d;
        double SGSTAmount = 0d;
        double CESSAmount = 0d;

        /**
         * Get CN amount
         */
        reqParams.put("entitycolnum", reqParams.optString("cnentitycolnum"));
        reqParams.put("entityValue", reqParams.optString("cnentityValue"));
        List<Object> cnData = accEntityGstDao.getCNDNWithInvoiceDetailsInSql(reqParams);
        List<Object> cnWithoutInventory = accEntityGstDao.getCNAgainstCustomer(reqParams);
        if (cnWithoutInventory != null && !cnWithoutInventory.isEmpty()) {
            cnData.addAll(cnWithoutInventory);
        }
        /**
         * Add data for Cash Sales refund 
         */
        reqParams.put("entitycolnum", reqParams.optString("paymententitycolnum"));
        reqParams.put("entityValue", reqParams.optString("paymententityValue"));
        List<Object> refundlist = accEntityGstDao.getCashRefundWithInvoiceDetailsInSql(reqParams);
        if (refundlist != null && refundlist.size() > 0) {
            cnData.addAll(refundlist);
        } 
        if (!reqParams.optBoolean(GSTR3BConstants.DETAILED_VIEW_REPORT, false)) {
            for (Object object : cnData) {
                Object[] data = (Object[]) object;
                String term = data[1] != null ? data[1].toString() : "";
                double termamount = data[0] != null ? (Double) data[0] : 0;

                totalAmountCN = (Double) data[3];
                if (term.equalsIgnoreCase(LineLevelTerms.GSTName.get("OutputIGST").toString())) {
                    taxableAmountCN += data[2] != null ? (Double) data[2] : 0;
                    IGSTAmount += termamount;
                } else if (term.equalsIgnoreCase(LineLevelTerms.GSTName.get("OutputCGST").toString())) {
                    taxableAmountCN += data[2] != null ? (Double) data[2] : 0;
                    CGSTAmount += termamount;
                } else if (term.equalsIgnoreCase(LineLevelTerms.GSTName.get("OutputSGST").toString())) {
                    SGSTAmount += termamount;
                } else if (term.equalsIgnoreCase(LineLevelTerms.GSTName.get("OutputUTGST").toString())) {
                    SGSTAmount += termamount;
                } else if (term.equalsIgnoreCase(LineLevelTerms.GSTName.get("OutputCESS").toString())) {
                    CESSAmount += termamount;
                } else if (StringUtil.isNullOrEmpty(term)) {
                    taxableAmountCN += data[2] != null ? (Double) data[2] : 0;
                }
            }

            jSONObject.put("taxableamt", authHandler.formattedAmount(taxableAmountCN,companyId));
            jSONObject.put("igst", authHandler.formattedAmount(IGSTAmount,companyId));
            jSONObject.put("cgst", authHandler.formattedAmount(CGSTAmount,companyId));
            jSONObject.put("sgst", authHandler.formattedAmount(SGSTAmount,companyId));
            jSONObject.put("csgst", authHandler.formattedAmount(CESSAmount,companyId));
            jSONObject.put("totaltax", authHandler.formattedAmount(IGSTAmount+CGSTAmount+SGSTAmount+CESSAmount,companyId));
            jSONObject.put("totalamount",authHandler.formattedAmount(taxableAmountCN+IGSTAmount+CGSTAmount+SGSTAmount+CESSAmount,companyId));
        } else {
            jSONObject = accGSTReportService.getCreditNoteJSONArrayForGSTR3B(cnData, reqParams, companyId);
        }
        return jSONObject;
    }

    public JSONObject getAdvanceForGSTR3BTaxable(JSONObject reqParams) throws JSONException, ServiceException {
        /**
         * Get Invoice total sum
         */
        String companyId=reqParams.optString("companyid");
        JSONObject jSONObject = new JSONObject();
        double taxableAmountAdv = 0d;
        double IGSTAmount = 0d;
        double CGSTAmount = 0d;
        double SGSTAmount = 0d;
        double CESSAmount = 0d;
        reqParams.put("entitycolnum", reqParams.optString("receiptentitycolnum"));
        reqParams.put("entityValue", reqParams.optString("receiptentityValue"));
        if (reqParams.optBoolean("at")) {
            /**
             * Get Advance for which invoice not linked yet
             */

            reqParams.put("at", true);
            List<Object> receiptList = accEntityGstDao.getAdvanceDetailsInSql(reqParams);
            JSONArray bulkData = gSTR1DeskeraServiceDao.createJsonForAdvanceDataFetchedFromDB(receiptList, reqParams);
            Map<String, JSONArray> advanceMap = AccountingManager.getSortedArrayMapBasedOnJSONAttribute(bulkData, GSTRConstants.receiptadvanceid);
            for (String advdetailkey : advanceMap.keySet()) {
                double rate = 0d;
                JSONArray adDetailArr = advanceMap.get(advdetailkey);
                JSONObject advanceobj = adDetailArr.getJSONObject(0);
                taxableAmountAdv += advanceobj.optDouble(GSTRConstants.receiptamount) - advanceobj.optDouble(GSTRConstants.receipttaxamount);
                for (int index = 0; index < adDetailArr.length(); index++) {
                    JSONObject invdetailObj = adDetailArr.getJSONObject(index);
                    String defaultterm = invdetailObj.optString(GSTRConstants.defaultterm);

                    /**
                     * Iterate applied GST and put its Percentage and Amount
                     * accordingly
                     */
                    double termamount = invdetailObj.optDouble(GSTRConstants.termamount);
                    double taxrate = invdetailObj.optDouble(GSTRConstants.taxrate);
                    /**
                     * calculate tax amount by considering partial case
                     */
                    termamount = (advanceobj.optDouble(GSTRConstants.receiptamount) - advanceobj.optDouble(GSTRConstants.receipttaxamount)) * invdetailObj.optDouble(GSTRConstants.taxrate) / 100;
                    if (defaultterm.equalsIgnoreCase(LineLevelTerms.GSTName.get("OutputIGST").toString())) {
                        IGSTAmount += termamount;
                    } else if (defaultterm.equalsIgnoreCase(LineLevelTerms.GSTName.get("OutputCGST").toString())) {
                        CGSTAmount += termamount;
                    } else if (defaultterm.equalsIgnoreCase(LineLevelTerms.GSTName.get("OutputSGST").toString())) {
                        SGSTAmount += termamount;
                    } else if (defaultterm.equalsIgnoreCase(LineLevelTerms.GSTName.get("OutputUTGST").toString())) {
                        SGSTAmount += termamount;
                    } else if (defaultterm.equalsIgnoreCase(LineLevelTerms.GSTName.get("OutputCESS").toString())) {
                        CESSAmount += termamount;
                    }
                }
            }

//            reqParams.put("entitycolnum", reqParams.optString("receiptentitycolnum"));
//            reqParams.put("entityValue", reqParams.optString("receiptentityValue"));
//            List<Object> AdvData = accEntityGstDao.getAdvanceDetailsInSql(reqParams);
//            for (Object object : AdvData) {
//                Object[] data = (Object[]) object;
//                String term = data[1].toString();
//                double termamount = (Double) data[0];
//                if (term.equalsIgnoreCase(LineLevelTerms.GSTName.get("OutputIGST").toString())) {
//                    taxableAmountAdv += (Double) data[2];
//                    IGSTAmount += termamount;
//                } else if (term.equalsIgnoreCase(LineLevelTerms.GSTName.get("OutputCGST").toString())) {
//                    taxableAmountAdv += (Double) data[2];
//                    CGSTAmount += termamount;
//                } else if (term.equalsIgnoreCase(LineLevelTerms.GSTName.get("OutputSGST").toString())) {
//                    SGSTAmount += termamount;
//                } else if (term.equalsIgnoreCase(LineLevelTerms.GSTName.get("OutputUTGST").toString())) {
//                    SGSTAmount += termamount;
//                } else if (term.equalsIgnoreCase(LineLevelTerms.GSTName.get("OutputCESS").toString())) {
//                    CESSAmount += termamount;
//                }
//            }
        } else {
            /**
             * Get Advance for which invoice isLinked
             */
            reqParams.put("atadj", true);
            List<Object> receiptList = accEntityGstDao.getAdvanceDetailsInSql(reqParams);
            JSONArray bulkData = gSTR1DeskeraServiceDao.createJsonForAdvanceDataFetchedFromDB(receiptList, reqParams);
            Map<String, JSONArray> advanceMap = AccountingManager.getSortedArrayMapBasedOnJSONAttribute(bulkData, GSTRConstants.receiptadvanceid);
            for (String advdetailkey : advanceMap.keySet()) {
                double rate = 0d;
                JSONArray adDetailArr = advanceMap.get(advdetailkey);
                JSONObject advanceobj = adDetailArr.getJSONObject(0);
                taxableAmountAdv += advanceobj.optDouble(GSTRConstants.adjustedamount);
                for (int index = 0; index < adDetailArr.length(); index++) {
                    JSONObject invdetailObj = adDetailArr.getJSONObject(index);
                    String defaultterm = invdetailObj.optString(GSTRConstants.defaultterm);

                    /**
                     * Iterate applied GST and put its Percentage and Amount
                     * accordingly
                     */
                    double termamount = invdetailObj.optDouble(GSTRConstants.termamount);
                    double taxrate = invdetailObj.optDouble(GSTRConstants.taxrate);
                    /**
                     * calculate tax amount by considering partial case
                     */
                    termamount = advanceobj.optDouble(GSTRConstants.adjustedamount) * invdetailObj.optDouble(GSTRConstants.taxrate) / 100;
                    if (defaultterm.equalsIgnoreCase(LineLevelTerms.GSTName.get("OutputIGST").toString())) {
                        IGSTAmount += termamount;
                    } else if (defaultterm.equalsIgnoreCase(LineLevelTerms.GSTName.get("OutputCGST").toString())) {
                        CGSTAmount += termamount;
                    } else if (defaultterm.equalsIgnoreCase(LineLevelTerms.GSTName.get("OutputSGST").toString())) {
                        SGSTAmount += termamount;
                    } else if (defaultterm.equalsIgnoreCase(LineLevelTerms.GSTName.get("OutputUTGST").toString())) {
                        SGSTAmount += termamount;
                    } else if (defaultterm.equalsIgnoreCase(LineLevelTerms.GSTName.get("OutputCESS").toString())) {
                        CESSAmount += termamount;
                    }
                }
            }

//            reqParams.put("entitycolnum", reqParams.optString("receiptentitycolnum"));
//            reqParams.put("entityValue", reqParams.optString("receiptentityValue"));
//            List<Object> AdvDataLinked = accEntityGstDao.getAdvanceDetailsInSql(reqParams);
//            for (Object object : AdvDataLinked) {
//                Object[] data = (Object[]) object;
//                String term = data[1].toString();
//                double termamount = (Double) data[0];
//                taxableAmountAdv = (Double) data[2];
//                if (term.equalsIgnoreCase(LineLevelTerms.GSTName.get("OutputIGST").toString())) {
//                    taxableAmountAdv += (Double) data[2];
//                    IGSTAmount += termamount;
//                } else if (term.equalsIgnoreCase(LineLevelTerms.GSTName.get("OutputCGST").toString())) {
//                    taxableAmountAdv += (Double) data[2];
//                    CGSTAmount += termamount;
//                } else if (term.equalsIgnoreCase(LineLevelTerms.GSTName.get("OutputSGST").toString())) {
//                    SGSTAmount += termamount;
//                } else if (term.equalsIgnoreCase(LineLevelTerms.GSTName.get("OutputUTGST").toString())) {
//                    SGSTAmount += termamount;
//                } else if (term.equalsIgnoreCase(LineLevelTerms.GSTName.get("OutputCESS").toString())) {
//                    CESSAmount += termamount;
//                }
//            }
        }

        jSONObject.put("taxableamt", authHandler.formattedAmount(taxableAmountAdv,companyId));
        jSONObject.put("igst", authHandler.formattedAmount(IGSTAmount,companyId));
        jSONObject.put("cgst", authHandler.formattedAmount(CGSTAmount,companyId));
        jSONObject.put("sgst", authHandler.formattedAmount(SGSTAmount,companyId));
        jSONObject.put("csgst", authHandler.formattedAmount(CESSAmount,companyId));
        jSONObject.put("totaltax", authHandler.formattedAmount(IGSTAmount+CGSTAmount+SGSTAmount+CESSAmount,companyId));
        jSONObject.put("totalamount", authHandler.formattedAmount(taxableAmountAdv+IGSTAmount+CGSTAmount+SGSTAmount+CESSAmount,companyId));
        return jSONObject;
    }

    /**
     * b) Outward taxable supplies (zero rated)
     *
     * @param reqParams
     * @param returnArr
     * @return
     * @throws JSONException
     * @throws ServiceException
     */
    public JSONObject getInvoiceForGSTR3BZeroRated(JSONObject reqParams) throws JSONException, ServiceException {
        /**
         * Get Invoice total sum
         */
        String companyId=reqParams.optString("companyid");
        reqParams.put("entitycolnum", reqParams.optString("invoiceentitycolnum"));
        reqParams.put("entityValue", reqParams.optString("invoiceentityValue"));
        JSONObject jSONObject = new JSONObject();
        List<Object> invoiceData = accEntityGstDao.getInvoiceDataWithDetailsInSql(reqParams);
        if (!reqParams.optBoolean(GSTR3BConstants.DETAILED_VIEW_REPORT, false)) {
            double taxableAmountInv = 0d;
            double taxableAmountCN = 0d;
            double taxableAmountAdv = 0d;
            double taxableAmountAdvAdjusted = 0d;
            double IGSTAmount = 0d;
            double CGSTAmount = 0d;
            double SGSTAmount = 0d;
            double CESSAmount = 0d;
            for (Object object : invoiceData) {
                Object[] data = (Object[]) object;
//            String term = data[1]!=null?data[1].toString():"";
//            double termamount = data[0]!=null?(Double) data[0]:0;
                taxableAmountInv = data[2]!=null?(Double) data[2]:0;
            }

//        /**
//         * Get CN amount
//         */
//        reqParams.put("entitycolnum", reqParams.optString("cnentitycolnum"));
//        reqParams.put("entityValue", reqParams.optString("cnentityValue"));
//        reqParams.put("isGSTINnull", false);
//        reqParams.put("GST3B", true);
//        List<Object> cnData = accEntityGstDao.getCNDNWithInvoiceDetailsInSql(reqParams);
//        for (Object object : cnData) {
//            Object[] data = (Object[]) object;
//            String term = data[1].toString();
//            double termamount = (Double) data[0];
//            taxableAmountCN = (Double) data[2];
//        }
//
//        /**
//         * Get Advance for which idx not linked yet
//         */
//        reqParams.put("entitycolnum", reqParams.optString("receiptentitycolnum"));
//        reqParams.put("entityValue", reqParams.optString("receiptentityValue"));
//        reqParams.put("isGSTINnull", false);
//        reqParams.put("GST3B", true);
//        reqParams.put("at", true);
//        reqParams.remove("atadj");
//        List<Object> AdvData = accEntityGstDao.getAdvanceDetailsInSql(reqParams);
//        for (Object object : AdvData) {
//            Object[] data = (Object[]) object;
//            String term = data[1].toString();
//            double termamount = (Double) data[0];
//            taxableAmountAdv = (Double) data[2];
//
//        }
//        /**
//         * Get Advance for which invoice isLinked
//         */
//        reqParams.put("entitycolnum", reqParams.optString("receiptentitycolnum"));
//        reqParams.put("entityValue", reqParams.optString("receiptentityValue"));
//        reqParams.put("isGSTINnull", false);
//        reqParams.put("GST3B", true);
//        reqParams.remove("at");
//        reqParams.put("atadj", true);
//        AdvData = accEntityGstDao.getAdvanceDetailsInSql(reqParams);
//        for (Object object : AdvData) {
//            Object[] data = (Object[]) object;
//            String term = data[1].toString();
//            double termamount = (Double) data[0];
//            taxableAmountAdvAdjusted = (Double) data[2];
//
//        }
            jSONObject.put("Nature of Supplies", "b) Outward taxable supplies (zero rated)");
            jSONObject.put("taxableamt", authHandler.formattedAmount(taxableAmountInv,companyId));
            jSONObject.put("igst", authHandler.formattedAmount(IGSTAmount,companyId));
            jSONObject.put("cgst", authHandler.formattedAmount(CGSTAmount,companyId));
            jSONObject.put("sgst", authHandler.formattedAmount(SGSTAmount,companyId));
            jSONObject.put("csgst", authHandler.formattedAmount(CESSAmount,companyId));
            jSONObject.put("totaltax", authHandler.formattedAmount(IGSTAmount+CGSTAmount+SGSTAmount+CESSAmount,companyId));
            jSONObject.put("totalamount", authHandler.formattedAmount(taxableAmountInv,companyId));
        } else {
            jSONObject = accGSTReportService.getSalesInvoiceJSONArrayForGSTR3B(invoiceData, reqParams, companyId);
        }
        return jSONObject;
    }

    public JSONObject getInvoiceForGSTR3BNillRated(JSONObject reqParams) throws JSONException, ServiceException {
        /**
         * Get Invoice total sum
         */
        String companyId=reqParams.optString("companyid");
        double taxableAmountInv = 0d;
        double taxableAmountCN = 0d;
        double taxableAmountAdv = 0d;
        double taxableAmountAdvAdjusted = 0d;
        double IGSTAmount = 0d;
        double CGSTAmount = 0d;
        double SGSTAmount = 0d;
        double CESSAmount = 0d;
        int count=0;
        JSONObject jSONObject = new JSONObject();
        reqParams.put("entitycolnum", reqParams.optString("invoiceentitycolnum"));
        reqParams.put("entityValue", reqParams.optString("invoiceentityValue"));
//        reqParams.put("isGSTINnull", false);
        reqParams.put("GST3B", !reqParams.optBoolean(GSTR3BConstants.DETAILED_VIEW_REPORT, false));
        reqParams.remove("zerorated");
        List invoiceData = accEntityGstDao.getNillInvoiceDataWithDetailsInSql(reqParams);
        if (!reqParams.optBoolean(GSTR3BConstants.DETAILED_VIEW_REPORT, false)) {
            for (Object object : invoiceData) {
                Object[] data = (Object[]) object;
                taxableAmountInv = data[0] != null ? (Double) data[0] : 0;
                count = data[1] != null ? ((BigInteger) data[1]).intValue() : 0;
            }

//
//        /**
//         * Get CN amount
//         */
//        reqParams.put("entitycolnum", reqParams.optString("cnentitycolnum"));
//        reqParams.put("entityValue", reqParams.optString("cnentityValue"));
//        reqParams.put("isGSTINnull", false);
//        reqParams.put("GST3B", true);
//        List cnData = accEntityGstDao.getNillCNDNWithInvoiceDetailsInSql(reqParams);
//        if (!cnData.isEmpty() && cnData.get(0) != null) {
//            taxableAmountCN = (Double) cnData.get(0);
//        }
//
//        /**
//         * Get Advance for which invoice not linked yet
//         */
//        reqParams.put("entitycolnum", reqParams.optString("receiptentitycolnum"));
//        reqParams.put("entityValue", reqParams.optString("receiptentityValue"));
//        reqParams.put("isGSTINnull", false);
//        reqParams.put("GST3B", true);
//        reqParams.put("at", true);
//        reqParams.remove("atadj");
//        List AdvData = accEntityGstDao.getNillAdvanceDetailsInSql(reqParams);
//        if (!AdvData.isEmpty() && AdvData.get(0) != null) {
//            taxableAmountAdv = (Double) AdvData.get(0);
//        }
//        /**
//         * Get Advance for which invoice isLinked
//         */
//        reqParams.put("entitycolnum", reqParams.optString("receiptentitycolnum"));
//        reqParams.put("entityValue", reqParams.optString("receiptentityValue"));
//        reqParams.put("isGSTINnull", false);
//        reqParams.put("GST3B", true);
//        reqParams.remove("at");
//        reqParams.put("atadj", true);
//        AdvData = accEntityGstDao.getNillAdvanceDetailsInSql(reqParams);
//        if (!AdvData.isEmpty() && AdvData.get(0) != null) {
//            taxableAmountAdvAdjusted = (Double) AdvData.get(0);
//        }
            jSONObject.put("count", count);
            jSONObject.put("Nature of Supplies", "e) Non GST outward supplies");
            jSONObject.put("taxableamt", authHandler.formattedAmount(taxableAmountInv,companyId));
            jSONObject.put("igst", authHandler.formattedAmount(IGSTAmount,companyId));
            jSONObject.put("cgst", authHandler.formattedAmount(CGSTAmount,companyId));
            jSONObject.put("sgst", authHandler.formattedAmount(SGSTAmount,companyId));
            jSONObject.put("csgst", authHandler.formattedAmount(CESSAmount,companyId));
            jSONObject.put("totaltax", authHandler.formattedAmount(IGSTAmount+CGSTAmount+SGSTAmount+CESSAmount,companyId));
            jSONObject.put("totalamount", authHandler.formattedAmount(taxableAmountInv,companyId));
        } else {
            jSONObject = accGSTReportService.getSalesInvoiceJSONArrayForGSTR3B(invoiceData, reqParams, companyId);
        }
        return jSONObject;
    }
    
    
    
    public void getColumnModelForGSTRComputation(JSONArray jarrRecords, JSONArray jarrColumns, JSONObject params) throws JSONException {
        String storeRec = "";
        String section = params.optString("companyid");;
        Locale requestcontextutilsobj = null;
        if (params.has("requestcontextutilsobj")) {
            requestcontextutilsobj = (Locale) params.opt("requestcontextutilsobj");
        }
        JSONObject jobjTemp = new JSONObject();
        storeRec = "section,type,typeofsales,pos,taxableamt,igst,cgst,sgst,csgst,totaltax,totalamount,heading,fmt,level,view,enableViewDetail";

        String[] recArr = storeRec.split(",");
        // Get those fields in record for whome, no special properties present like type, defVal, mapping etc.
        for (String rec : recArr) {
            jobjTemp = new JSONObject();
            jobjTemp.put("name", rec);
            jarrRecords.put(jobjTemp);
        }

        // Gel column model - 
        jobjTemp = new JSONObject();
        jobjTemp.put("header", "Headings");
        jobjTemp.put("dataIndex", "heading");
        jobjTemp.put("width", 150);
        jobjTemp.put("align", "left");
        jobjTemp.put("pdfwidth", 150);
        jarrColumns.put(jobjTemp);
        jobjTemp = new JSONObject();
        jobjTemp.put("header", "Section");
        jobjTemp.put("dataIndex", "section");
        jobjTemp.put("width", 150);
        jobjTemp.put("align", "left");
        jobjTemp.put("pdfwidth", 150);
        jarrColumns.put(jobjTemp);
        jobjTemp = new JSONObject();
        jobjTemp.put("header", "Type of Sales");
        jobjTemp.put("dataIndex", "typeofsales");
        jobjTemp.put("autoWidth", true);
        jobjTemp.put("align", "left");
        jobjTemp.put("width", 400); // Type of Sales column width added becuase it is not visible properly
        jobjTemp.put("renderer", "function(value){var res = \"<span class='gridRow'  wtf:qtip='\"+value+\"'>\"+value+\"</span>\";return res;}"); // Added Renderer for tooltip
        jobjTemp.put("pdfwidth", 150);
        jarrColumns.put(jobjTemp);
        jobjTemp = new JSONObject();
        jobjTemp.put("header", "Place of supply");
        jobjTemp.put("dataIndex", "pos");
        jobjTemp.put("hidden", params.optBoolean("isSummary",true));
        jobjTemp.put("width", 150);
        jobjTemp.put("align", "right");
        jobjTemp.put("pdfwidth", 150);
        jarrColumns.put(jobjTemp);
        jobjTemp = new JSONObject();
        jobjTemp.put("header", "Taxable Value");
        jobjTemp.put("dataIndex", "taxableamt");
        jobjTemp.put("width", 150);
        jobjTemp.put("align", "right");
        jobjTemp.put("renderer", "WtfGlobal.currencyDeletedRenderer");
        jobjTemp.put("pdfwidth", 150);
        jarrColumns.put(jobjTemp);
        jobjTemp = new JSONObject();
        jobjTemp.put("header", "Integrated Tax Amount");
        jobjTemp.put("dataIndex", "igst");
        jobjTemp.put("width", 150);
        jobjTemp.put("align", "right");
        jobjTemp.put("renderer", "WtfGlobal.currencyDeletedRenderer");
        jobjTemp.put("pdfwidth", 150);
        jarrColumns.put(jobjTemp);
        jobjTemp = new JSONObject();
        jobjTemp.put("header", "Central Tax Amount");
        jobjTemp.put("dataIndex", "cgst");
        jobjTemp.put("renderer", "WtfGlobal.currencyDeletedRenderer");
        jobjTemp.put("width", 150);
        jobjTemp.put("align", "right");
        jobjTemp.put("pdfwidth", 150);
        jarrColumns.put(jobjTemp);
        jobjTemp = new JSONObject();
        jobjTemp.put("header", "State Tax Amount");
        jobjTemp.put("renderer", "WtfGlobal.currencyDeletedRenderer");
        jobjTemp.put("dataIndex", "sgst");
        jobjTemp.put("width", 150);
        jobjTemp.put("align", "right");
        jobjTemp.put("pdfwidth", 150);
        jarrColumns.put(jobjTemp);
        jobjTemp = new JSONObject();
        jobjTemp.put("header", "Cess Amount");
        jobjTemp.put("dataIndex", "csgst");
        jobjTemp.put("width", 150);
        jobjTemp.put("align", "right");
        jobjTemp.put("renderer", "WtfGlobal.currencyDeletedRenderer");
        jobjTemp.put("pdfwidth", 150);
        jarrColumns.put(jobjTemp);
        jobjTemp = new JSONObject();
        jobjTemp.put("header", "Tax Amount");
        jobjTemp.put("dataIndex", "totaltax");
        jobjTemp.put("renderer", "WtfGlobal.currencyDeletedRenderer");
        jobjTemp.put("width", 150);
        jobjTemp.put("align", "right");
        jobjTemp.put("pdfwidth", 150);
        jarrColumns.put(jobjTemp);
        jobjTemp = new JSONObject();
        jobjTemp.put("header", "<b>" + messageSource.getMessage("acc.gstr1.totalAmountInclTaxes", null, requestcontextutilsobj) + "<b>");
        jobjTemp.put("dataIndex", "totalamount");
        jobjTemp.put("renderer", "WtfGlobal.currencyDeletedRenderer");
        jobjTemp.put("width", 150);
        jobjTemp.put("align", "right");
        jobjTemp.put("pdfwidth", 150);
        jarrColumns.put(jobjTemp);
        
        jobjTemp = new JSONObject();
        jobjTemp.put("header", messageSource.getMessage("acc.lp.dishonouredChequeView", null, requestcontextutilsobj));
        jobjTemp.put("dataIndex", "view");
        jobjTemp.put("width", 100);
        jobjTemp.put("align", "center");
        jobjTemp.put("pdfwidth", 100);
        jobjTemp.put("renderer", "");
        jarrColumns.put(jobjTemp);
    }
    public HSSFWorkbook exportGSTRComputationReport(JSONObject params) throws JSONException, ServiceException {
        HSSFWorkbook wb = new HSSFWorkbook();
        params.put("isExport", true);
        JSONObject jSONObject = new JSONObject();
        jSONObject = getGSTComputationSummaryReport(params);
        jSONObject.put(Constants.entity, params.optString(Constants.entity, ""));
        jSONObject.put(Constants.companyKey, params.optString(Constants.companyKey, ""));
        GSTR1ExportToExcel.writedatain_GST3B(wb, jSONObject);
        return wb;
    }

    public JSONObject getTotalForGSTR3B(JSONObject reqParams) throws JSONException {
        JSONArray dataArr = reqParams.getJSONArray("dataArr");
        String companyId = reqParams.optString("companyid");
        JSONObject returnObj = new JSONObject();
        boolean isPurchase = reqParams.optBoolean("isPurchase",false);
        double taxableamt = 0d;
        double igst = 0d;
        double cgst = 0d;
        double csgst = 0d;
        double sgst = 0d;
        double totaltax = 0d;
        double totalamount = 0d;
        for (int index = 0; index < dataArr.length(); index++) {
            JSONObject jSONObject = dataArr.getJSONObject(index);
            String section = jSONObject.optString("section");
                taxableamt += StringUtil.isNullOrEmpty(jSONObject.optString("taxableamt")) ? 0.0 : Double.parseDouble(jSONObject.optString("taxableamt"));
                igst += StringUtil.isNullOrEmpty(jSONObject.optString("igst")) ? 0.0 : Double.parseDouble(jSONObject.optString("igst"));
                cgst += StringUtil.isNullOrEmpty(jSONObject.optString("cgst")) ? 0.0 : Double.parseDouble(jSONObject.optString("cgst"));
                csgst += StringUtil.isNullOrEmpty(jSONObject.optString("csgst")) ? 0.0 : Double.parseDouble(jSONObject.optString("csgst"));
                sgst += StringUtil.isNullOrEmpty(jSONObject.optString("sgst")) ? 0.0 : Double.parseDouble(jSONObject.optString("sgst"));
                totaltax += StringUtil.isNullOrEmpty(jSONObject.optString("totaltax")) ? 0.0 : Double.parseDouble(jSONObject.optString("totaltax"));
                totalamount += StringUtil.isNullOrEmpty(jSONObject.optString("totalamount")) ? 0.0 : Double.parseDouble(jSONObject.optString("totalamount"));
        }
        returnObj.put("taxableamt", authHandler.formattedAmount(taxableamt, companyId));
        returnObj.put("igst", authHandler.formattedAmount(igst, companyId));
        returnObj.put("cgst", authHandler.formattedAmount(cgst, companyId));
        returnObj.put("csgst", authHandler.formattedAmount(csgst, companyId));
        returnObj.put("sgst", authHandler.formattedAmount(sgst, companyId));
        returnObj.put("totaltax", authHandler.formattedAmount(totaltax, companyId));
        returnObj.put("totalamount", authHandler.formattedAmount(totalamount, companyId));
        return returnObj;
    }


    public JSONObject getExemptPurchaseInvoiceDetails(JSONObject params) throws ServiceException, JSONException {
        String companyId = params.optString("companyid");
        JSONObject jobject = new JSONObject();
        JSONArray columnDataArr = new JSONArray();
        JSONArray b2bArr = new JSONArray();
        JSONObject summaryb2bObj = new JSONObject();
        JSONArray summaryArr = new JSONArray();
        String typeofinvoice = params.optString("typeofinvoice");
        params.put("isExempt", true);
        params.put("typeofjoinisleft", true);
        
         List<Object> invoiceList = accEntityGstDao.getNonGSTGoodsReceiptDataWithDetailsInSql(params);
        double sumTaxableAmt=0.0;
        int noOfInvoices = 0;
        JSONArray bulkData = new JSONArray();
        for (Object object : invoiceList) {
            Object[] data = (Object[]) object;
            JSONObject columnData = new JSONObject();
            columnData.put(GSTRConstants.invoicenumber, data[0] != null ? data[0].toString():"");
            if (data[0] != null) {
                noOfInvoices++;
            }
            columnData.put(GSTRConstants.pos, data[1] != null ? data[1].toString():"");
            if (data[4] != null && data[2].toString().equalsIgnoreCase("composition")) {
                columnData.put(GSTRConstants.vendorname, data[2] != null ? data[2].toString() : "");
            }
            columnData.put(GSTRConstants.gstin, data[3] != null ?(String) data[3]:"");
            columnData.put(GSTRConstants.entrydate, data[4] != null ? data[4].toString() : "");
            columnData.put(GSTRConstants.termamount,data[5] != null ? (Double) data[5]:0);
            sumTaxableAmt+= data[5] != null ? (Double) data[5]:0;
             if (data[6] != null && data[6].toString().equalsIgnoreCase(FieldComboData.TaxClass_Exempted)||data[6].toString().equalsIgnoreCase(FieldComboData.TaxClass_Non_GST_Product)||data[6].toString().equalsIgnoreCase(FieldComboData.TaxClass_ZeroPercenatge)) {
                 columnData.put(GSTRConstants.vendorname, data[6] != null ? (String) data[6]:"");
            }
            columnData.put(GSTRConstants.supplierinvoiceno,data[7] != null ? (String) data[7]:"");
            columnDataArr.put(columnData);
        }        
        summaryb2bObj.put("numberofinvoices", noOfInvoices);
        summaryb2bObj.put("igstamt", authHandler.formattedAmount(0, companyId));
        summaryb2bObj.put("sgstamt", authHandler.formattedAmount(0, companyId));
        summaryb2bObj.put("cgstamt", authHandler.formattedAmount(0, companyId));
        summaryb2bObj.put("cessamt", authHandler.formattedAmount(0, companyId));
        summaryb2bObj.put("typeofinvoice", typeofinvoice);
        summaryb2bObj.put("sumTaxableAmt", authHandler.formattedAmount(sumTaxableAmt, companyId));
        summaryb2bObj.put("sumTaxAmt", authHandler.formattedAmount(0, companyId));
        summaryb2bObj.put("sumTotalAmt", authHandler.formattedAmount(sumTaxableAmt, companyId));
        summaryArr.put(summaryb2bObj);
        jobject.put("summaryArr", summaryArr);
        jobject.put("data", columnDataArr);

        return jobject;
    }
    public JSONObject getTDSTCSITCDetails(JSONObject params) throws ServiceException, JSONException {
        String companyId = params.optString("companyid");
        JSONObject jobject = new JSONObject();
        JSONArray columnDataArr = new JSONArray();
        JSONArray b2bArr = new JSONArray();
        JSONObject summaryb2bObj = new JSONObject();
        JSONArray summaryArr = new JSONArray();
        JSONObject invwithgstn = new JSONObject();
        String typeofinvoice = params.optString("typeofinvoice");
        int noOfInvoices = 0;
        double totalamount = 0d;
        /**
         * Get JE data
         */
        boolean returnEmptySection = false;
        HashMap<String, Object> prefparams = new HashMap<>();
        prefparams.put("id", companyId);
        List columnList = kwlCommonTablesDAOObj.getRequestedObjectFieldsInCollection(IndiaComplianceCompanyPreferences.class, new String[]{"istcsapplicable", "istdsapplicable"}, prefparams);
        if (columnList != null && !columnList.isEmpty()) {
            for (Object object : columnList) {
                Object[] columnPref = (Object[]) object;
                boolean istcsapplicable = columnPref[0] != null ? ((Boolean) columnPref[0]) : false;
                boolean istdsapplicable = columnPref[1] != null ? ((Boolean) columnPref[1]) : false;
                String gstrjetype = params.optString("gstrjetype");
                if (gstrjetype.equalsIgnoreCase(Constants.JETYPE_TCS) && !istcsapplicable) {
                    returnEmptySection = true;
                } else if (gstrjetype.equalsIgnoreCase(Constants.JETYPE_TDS) && !istdsapplicable) {
                    returnEmptySection = true;
                }
            }
        }
        if (!returnEmptySection) {
            List<Object> jeList = gstr2Dao.getTDSTCSITCDetails(params);
            for (Object object : jeList) {
                noOfInvoices++;
                Object[] data = (Object[]) object;
                String jeid = data[0] != null ? data[0].toString() : "";
                String jeno = data[1] != null ? data[1].toString() : "";
                double amount = data[2] != null ? (Double) data[2] : 0;
                totalamount += amount;
                JSONObject jSONObject = new JSONObject();
                jSONObject.put("journalentryid", jeid);
                jSONObject.put("journalentryno", jeno);
                jSONObject.put("jeamount", amount);
                columnDataArr.put(jSONObject);
            }
        }

        summaryb2bObj.put("numberofinvoices", noOfInvoices);
        summaryb2bObj.put("typeofinvoice", typeofinvoice);
        summaryb2bObj.put("sumTaxableAmt", authHandler.formattedAmount(0, companyId));
        summaryb2bObj.put("sumTaxAmt", authHandler.formattedAmount(totalamount, companyId));
        summaryb2bObj.put("sumTotalAmt", authHandler.formattedAmount(totalamount, companyId));
        summaryArr.put(summaryb2bObj);
        jobject.put("summaryArr", summaryArr);
        jobject.put("data", columnDataArr);
        return jobject;
    }
    /**
     * @param requestParams (data: JSONArray in which everyObject (id(Of
     * EntitybasedLineleveTermsRate),
     * applieDdate('yyyy-MM-dd')) )
     * @return list containing Map[moduleName, UsedTerms, UnusedTerms] module names and terms
     * those are used as well as unused.
     * @desc check if particular rule mentioned is used or not used, along side
     * if used then in gives module name where rule is used.
     * @throws ServiceException
     * @throws ParseException
     * @throws com.krawler.utils.json.base.JSONException
     */
    @Override
    public KwlReturnObject checkTermsUsed(JSONObject requestParams) throws ServiceException, ParseException, com.krawler.utils.json.base.JSONException {
        String msg = "";
        JSONArray jArr = new JSONArray(requestParams.optString(Constants.RES_data));
        Map<String, Object> fieldParamsRequestMap;
        List<String> listTables = new ArrayList<>(Arrays.asList(Constants.DODetailTermMap, Constants.InvoiceDetailTermMap, Constants.PODetailTermMap, Constants.PRDetailTermMap, Constants.QuotationDetailTermMap, Constants.RADetailTermMap, Constants.ReceiptDetailTermMap, Constants.RODetailTermMap, Constants.SODetailTermMap, Constants.SRDetailTermMap, Constants.VQDetailTermMap));
        /**
         * HashMap for module names to table name Mapping
         */
        Map<String, String> forModuleNames = new HashMap<>();
        forModuleNames.put(Constants.DODetailTermMap, Constants.Delivery_Order);
        forModuleNames.put(Constants.InvoiceDetailTermMap, Constants.CUSTOMER_INVOICE + " or " + Constants.CASH_SALE); //CUSTOMER OR VENDOR INVOICE
        forModuleNames.put(Constants.PODetailTermMap, Constants.ACC_PURCHASE_ORDER);
        forModuleNames.put(Constants.PRDetailTermMap, Constants.PURCHASE_RETURN);
        forModuleNames.put(Constants.QuotationDetailTermMap, Constants.CUSTOMER_QUOTATION);
        forModuleNames.put(Constants.RADetailTermMap, Constants.RECEIVE_PAYMENT);
        forModuleNames.put(Constants.ReceiptDetailTermMap, Constants.VENDOR_INVOICE + " or " + Constants.CASH_PURCHASE);
        forModuleNames.put(Constants.RODetailTermMap, Constants.Goods_Receipt);
        forModuleNames.put(Constants.SODetailTermMap, Constants.SALESORDER);
        forModuleNames.put(Constants.SRDetailTermMap, Constants.SALES_RETURN);
        forModuleNames.put(Constants.VQDetailTermMap, Constants.VENDOR_QUOTATION);

        KwlReturnObject result = null;
        String unusedTerms = "";
        String usedTerms = "";
        String moduleNames = "";
        String documentNumber = "";
        boolean isGetDocumentNumber = requestParams.optBoolean("isGetDocumentNumber", false);
        boolean isTermUsed = false;
        for (int i = 0; i < jArr.length(); i++) {
            isTermUsed = false;
            JSONObject jobj = jArr.getJSONObject(i);
            fieldParamsRequestMap = new HashMap();
            /**
             * Data from UI side is managed for ID as follows: - id1, id2, id3
             * can come on the basis of rule and its entries e.g : rule 1 :
             * SGST, CGST, CESS : rule 2 : IGST, CESS
             *
             * In Other words, All These IDs belong to same GST Rule.
             */
            if (!StringUtil.isNullOrEmpty(jobj.optString(Constants.id1))) {
                fieldParamsRequestMap.put(Constants.id1, jobj.optString(Constants.id1));
            }
            if (!StringUtil.isNullOrEmpty(jobj.optString(Constants.id2))) {
                fieldParamsRequestMap.put(Constants.id2, jobj.optString(Constants.id2));
            }
            if (!StringUtil.isNullOrEmpty(jobj.optString(Constants.id3))) {
                fieldParamsRequestMap.put(Constants.id3, jobj.optString(Constants.id3));
            }
            fieldParamsRequestMap.put(Constants.tableName, listTables);
            fieldParamsRequestMap.put(Constants.modulename, forModuleNames);
            fieldParamsRequestMap.put("isGetDocumentNumber", isGetDocumentNumber);

            result = accEntityGstDao.checkDetailTermMapForDelete(fieldParamsRequestMap);
            /**
             * If isSuccessFlag is false then break, Note the TableName and
             * Break the loop.
             */
            if (!result.isSuccessFlag()) {
                isTermUsed = true;
                /**
                 * usedTerms will be displayed to user. Hence Only id1 is used
                 * to display TermName
                 */
                List termIds = new ArrayList();
                termIds.add(jobj.optString(Constants.id1));
                Map<String, String> termName = getTermName(termIds);
                if (termName.containsKey(jobj.optString(Constants.id1))) {
                    String ruleName = termName.get(jobj.optString(Constants.id1));
                    /**
                     * Not to Add ruleName Again if Already Mentioned
                     */
                    if (!usedTerms.contains(ruleName)) {
                        usedTerms += ruleName + ", ";
                    }
                }
                /**
                 * if Entry of module name is made then not to mention it again.
                 */
                if (!moduleNames.contains(result.getMsg())) {
                    moduleNames += " " + result.getMsg() + ",";
                }
                if(isGetDocumentNumber){
                    if (result != null && result.getEntityList() != null && result.getEntityList().size() != 0) {
                        List<Object[]> res = result.getEntityList();
                        for (Object[] row : res) {
                            if (row!=null && row.length>=3 && row[2]!=null && !documentNumber.contains(row[2].toString())) {
                                documentNumber += " " + row[2] + ",";
                            }
                        }
                    }
                }
            }
            if (!isTermUsed) {
                /**
                 * unusedTerms will be displayed to user. Hence Only id1 is used
                 * to display TermName
                 */
                List termIds = new ArrayList();
                termIds.add(jobj.optString(Constants.id1));
                Map<String, String> termName = getTermName(termIds);
                if (termName.containsKey(jobj.optString(Constants.id1))) {
                    String ruleName = termName.get(jobj.optString(Constants.id1));
                    /**
                     * Not to Add ruleName Again if Already Mentioned
                     */
                    if (!unusedTerms.contains(ruleName)) {
                        unusedTerms += ruleName + ", ";
                    }
                }
            }
        }
        /**
         * If Length of String is Greater than 0 the only create substring
         * SubString is created to remove appended ','(comma) in Last of String.
         */
        usedTerms = usedTerms.substring(0, (usedTerms.length() > 0 ? usedTerms.length() - 1 : 0));
        unusedTerms = unusedTerms.substring(0, (unusedTerms.length() > 0 ? unusedTerms.length() - 1 : 0));
        moduleNames = moduleNames.substring(0, (moduleNames.length() > 0 ? moduleNames.length() - 1 : 0));
        /**
         * Return a Map with Terms.
         */
        Map<String, String> checkedTerms = new HashMap();
        checkedTerms.put(Constants.usedTerms, usedTerms);
        checkedTerms.put(Constants.unusedTerms, unusedTerms);
        checkedTerms.put(Constants.modulename, moduleNames);
        if(isGetDocumentNumber){
            documentNumber = documentNumber.substring(0, (documentNumber.length() > 0 ? documentNumber.length() - 1 : 0));
            checkedTerms.put("documentNumber", documentNumber);
        }
        List listData = new ArrayList();
        listData.add(checkedTerms);
        /**
         * If function is used for single rule isTermUsed can directly indicate
         * term used or not.
         */
        if (jArr.length() == 1) {
            return new KwlReturnObject(isTermUsed, msg, msg, listData, 0);
        }
        return new KwlReturnObject(true, msg, msg, listData, 0);
    }
    /**
     * Method of deleting GSTRule Report Item
     *
     * @param requestParams
     * @return msg
     * @throws ServiceException
     * @throws ParseException
     * @throws com.krawler.utils.json.base.JSONException
     */
    @Override
    public String deleteGSTRuleReportItem(JSONObject requestParams) throws ServiceException, ParseException, com.krawler.utils.json.base.JSONException {
        String msg = "";
        Map<String, Object> auditRequestParams = new HashMap<String, Object>();
        String auditID = AuditAction.GST_RULE_DELETE;
        String auditMsg = "";
        JSONArray jArr = new JSONArray(requestParams.optString(Constants.RES_data));
        Map<String, Object> fieldParamsRequestMap;
        Locale locale = (Locale) requestParams.get("locale");
        List<String> listTables = new ArrayList<>(Arrays.asList(Constants.DODetailTermMap, Constants.InvoiceDetailTermMap, Constants.PODetailTermMap, Constants.PRDetailTermMap, Constants.QuotationDetailTermMap, Constants.RADetailTermMap, Constants.ReceiptDetailTermMap, Constants.RODetailTermMap, Constants.SODetailTermMap, Constants.SRDetailTermMap, Constants.VQDetailTermMap));
        /**
         * HashMap for module names to table name Mapping
         */
        Map<String, String> forModuleNames = new HashMap<>();
        forModuleNames.put(Constants.DODetailTermMap, Constants.Delivery_Order);
        forModuleNames.put(Constants.InvoiceDetailTermMap, Constants.CUSTOMER_INVOICE+" or "+Constants.CASH_SALE); //CUSTOMER OR VENDOR INVOICE
        forModuleNames.put(Constants.PODetailTermMap, Constants.ACC_PURCHASE_ORDER);
        forModuleNames.put(Constants.PRDetailTermMap, Constants.PURCHASE_RETURN);
        forModuleNames.put(Constants.QuotationDetailTermMap, Constants.CUSTOMER_QUOTATION);
        forModuleNames.put(Constants.RADetailTermMap, Constants.RECEIVE_PAYMENT);
        forModuleNames.put(Constants.ReceiptDetailTermMap, Constants.VENDOR_INVOICE+" or "+Constants.CASH_PURCHASE);
        forModuleNames.put(Constants.RODetailTermMap, Constants.Goods_Receipt);
        forModuleNames.put(Constants.SODetailTermMap, Constants.SALESORDER);
        forModuleNames.put(Constants.SRDetailTermMap, Constants.SALES_RETURN);
        forModuleNames.put(Constants.VQDetailTermMap, Constants.VENDOR_QUOTATION);

        KwlReturnObject result = null;
        /**
         * if deleteRecord = true then Delete Record if deleteRecord = false
         * then Don't Delete Record * if allRecordsUndeleted = true then None of
         * the records are deleted if allRecordsDeleted = true then All of the
         * records are deleted
         */
        String successfullyDeleted = "";
        String failedToDelete = "";
        String moduleNames = "";
        boolean allRecordsUndeleted = true;
        boolean allRecordsDeleted = true;
        boolean deleteRecord;
        for (int i = 0; i < jArr.length(); i++) {
            deleteRecord = true; // For Every new Record in Multi-Select Delete Operation 
            JSONObject jobj = jArr.getJSONObject(i);
            fieldParamsRequestMap = new HashMap();
            if (!StringUtil.isNullOrEmpty(jobj.optString(Constants.id1))) {
                fieldParamsRequestMap.put(Constants.id1, jobj.optString(Constants.id1));
            }
            if (!StringUtil.isNullOrEmpty(jobj.optString(Constants.id2))) {
                fieldParamsRequestMap.put(Constants.id2, jobj.optString(Constants.id2));
            }
            if (!StringUtil.isNullOrEmpty(jobj.optString(Constants.id3))) {
                fieldParamsRequestMap.put(Constants.id3, jobj.optString(Constants.id3));
            }
            fieldParamsRequestMap.put(Constants.tableName, listTables);
            fieldParamsRequestMap.put(Constants.modulename, forModuleNames);

            result = accEntityGstDao.checkDetailTermMapForDelete(fieldParamsRequestMap);
            /**
             * If isSuccessFlag is false then break, Note the TableName and
             * Break the loop.
             */
            if (!result.isSuccessFlag()) {
                deleteRecord = false;
                allRecordsDeleted = false;
                List termIds = new ArrayList();
                termIds.add(jobj.optString(Constants.id1));
                Map<String, String> termName = getTermName(termIds);
                if(termName.containsKey(jobj.optString(Constants.id1))){
                   failedToDelete += termName.get(jobj.optString(Constants.id1)) + ", ";
                }
                /**
                 * if Entry of module name is made then not to enter it again.
                 */
                if(!moduleNames.contains(result.getMsg())){
                    moduleNames += " " + result.getMsg() + ",";
                }
                continue;
            }
            /**
             * If deleteRecord = true then Delete Particular Rule and Note down
             * Rule Name.
             */
            if (deleteRecord) {
                List termIds = new ArrayList();
                termIds.add(jobj.optString(Constants.id1));
                Map<String, String> termName = getTermName(termIds);
                if(termName.containsKey(jobj.optString(Constants.id1))){
                   successfullyDeleted += termName.get(jobj.optString(Constants.id1)) + ", ";
                }
                result = accEntityGstDao.deleteGSTRuleReportItem(fieldParamsRequestMap);
                allRecordsUndeleted = false;
            }
        }
        /**
         * If Length of String is Greater than 0 the only create substring
         * SubString is created to remove appended ','(comma) in Last of String.
         */
        successfullyDeleted = successfullyDeleted.substring(0, (successfullyDeleted.length() > 0 ? successfullyDeleted.length() - 1 : 0));
        failedToDelete = failedToDelete.substring(0, (failedToDelete.length() > 0 ? failedToDelete.length() - 1 : 0));
        moduleNames = moduleNames.substring(0, (moduleNames.length() > 0 ? moduleNames.length() - 1 : 0));

        if (allRecordsDeleted) {
            msg = messageSource.getMessage("acc.gstrr.sucessfulDelete", new Object[]{successfullyDeleted}, locale);
        } else {
            if (allRecordsUndeleted) {
                msg = messageSource.getMessage("acc.gstrr.failedDelete", new Object[]{failedToDelete, moduleNames}, locale);
            } else {
                msg = messageSource.getMessage("acc.gstrr.partialDelete", new Object[]{successfullyDeleted, failedToDelete, moduleNames}, locale);
            }
        }
        /**
         * Make An Audit Trial Entry.
         */
        if (!allRecordsUndeleted) {
            auditMsg = messageSource.getMessage("acc.gstrr.auditDeleteMessage", new Object[]{requestParams.getString(Constants.userfullname), successfullyDeleted}, locale);
            auditRequestParams.put(Constants.reqHeader, requestParams.getString(Constants.reqHeader));
            auditRequestParams.put(Constants.remoteIPAddress, requestParams.getString(Constants.remoteIPAddress));
            auditRequestParams.put(Constants.useridKey, requestParams.getString(Constants.useridKey));
            auditTrailObj.insertAuditLog(auditID, auditMsg, auditRequestParams, requestParams.optString("accountid"));
        }

        return msg;
    }
    /**
     * @desc delete LineLevelTerm
     * @param requestParams (termId: LineLevelTerm's ID, term : String (Name of Term))
     * @return msg
     * @throws ServiceException
     * @throws ParseException
     * @throws com.krawler.utils.json.base.JSONException
     */
    @Override
    public String deleteLineLevelTerm(JSONObject requestParams) throws ServiceException, ParseException, com.krawler.utils.json.base.JSONException {
        String msg = "";
        Map<String, Object> auditRequestParams = new HashMap<String, Object>();
        String auditID = AuditAction.GST_TERM_DELETE;
        String auditMsg = "";
        Map<String, Object> fieldParamsRequestMap;
        Locale locale = (Locale) requestParams.get(Constants.locale);
        KwlReturnObject result = null;
        String successfullyDeleted = "";
        fieldParamsRequestMap = new HashMap();
        if (!StringUtil.isNullOrEmpty(requestParams.optString(Constants.termId))) {
            fieldParamsRequestMap.put(Constants.termId, requestParams.optString(Constants.termId));
        }
        result = accEntityGstDao.checkLineLevelTermUsed(fieldParamsRequestMap);
        /**
         * If isSuccessFlag is false then Note the TableName and Break the loop.
         */
        if (result.isSuccessFlag()) {
            result = accEntityGstDao.deleteLineLevelTerm(fieldParamsRequestMap);
            successfullyDeleted += " " + requestParams.optString(Constants.termName);
            msg = messageSource.getMessage("acc.gstterm.sucessfulDelete", new Object[]{successfullyDeleted}, locale);
            /**
             * Make An Audit Trial Entry.
             */
            auditMsg = messageSource.getMessage("acc.gstterm.auditDeleteMessage", new Object[]{requestParams.getString(Constants.userfullname), successfullyDeleted}, locale);
            auditRequestParams.put(Constants.reqHeader, requestParams.getString(Constants.reqHeader));
            auditRequestParams.put(Constants.remoteIPAddress, requestParams.getString(Constants.remoteIPAddress));
            auditRequestParams.put(Constants.useridKey, requestParams.getString(Constants.useridKey));
            auditTrailObj.insertAuditLog(auditID, auditMsg, auditRequestParams, requestParams.optString("accountid"));
        } else {
            msg = messageSource.getMessage("acc.gstterm.failedDelete", null, locale);
        }
        return msg;
    }
        
    /**
     *
     * @param requestParams
     * @return finalReturnObj
     * @throws ServiceException
     * @throws ParseException
     * @throws com.krawler.utils.json.base.JSONException
     */
    @Override
    public JSONObject getGSTRuleReport(JSONObject requestParams) throws ServiceException, ParseException, com.krawler.utils.json.base.JSONException {
        JSONObject finalReturnObj = new JSONObject();
        try {

            JSONObject jMeta = new JSONObject();
            JSONArray jarrColumns = new JSONArray();
            JSONArray jarrRecords = new JSONArray();
            JSONObject jobjTemp = new JSONObject();
            JSONArray dataJArr = new JSONArray();
            JSONArray pagedJson = new JSONArray();

            /**
             * Create Column model
             */
            HashMap<String, Object> fieldParamsRequestMap = new HashMap<>();
            ArrayList fieldParamsfilter_names = new ArrayList();
            ArrayList fieldParamsfilter_params = new ArrayList();
            ArrayList orderby_params = new ArrayList();
            ArrayList orderType = new ArrayList();

            KwlReturnObject KWLObj = accountingHandlerDAOobj.getObject(Company.class.getName(), requestParams.optString(Constants.companyKey));
            Company company = (Company) KWLObj.getEntityList().get(0);
            String countryid = company.getCountry().getID();
            requestParams.put("countryid", countryid);

            fieldParamsfilter_names.add(Constants.FIELDPARAMS_ISACTIVATE);
            fieldParamsfilter_params.add(1);
            fieldParamsfilter_names.add(Constants.GST_CONFIG_TYPE);
            fieldParamsfilter_params.add(Constants.GST_CONFIG_ISFORGST);
            fieldParamsfilter_names.add(Constants.moduleid);
            fieldParamsfilter_params.add(Constants.GSTModule);
            fieldParamsfilter_names.add("companyid");
            fieldParamsfilter_params.add(requestParams.optString("companyid"));
            
            orderby_params.add(Constants.gstMappingColumnNumber);
            orderType.add(Constants.ascending);
            fieldParamsRequestMap.put(Constants.filterNamesKey, fieldParamsfilter_names);
            fieldParamsRequestMap.put(Constants.filterParamsKey, fieldParamsfilter_params);
            fieldParamsRequestMap.put(Constants.orderBy, orderby_params);
            fieldParamsRequestMap.put(Constants.orderType, orderType);
            KwlReturnObject result = accEntityGstDao.getChildFieldParamsForGSTRule(fieldParamsRequestMap);
            List<FieldParams> fieldParamses = result.getEntityList();
            for (FieldParams fieldParams : fieldParamses) {
                jobjTemp = new JSONObject();
                jobjTemp.put("header", fieldParams.getFieldlabel());
                jobjTemp.put("dataIndex", "shippedLoc" + fieldParams.getGSTMappingColnum());
                jobjTemp.put("align", "center");
                jobjTemp.put("width", 150);
                jobjTemp.put("pdfwidth", 150);
                jarrColumns.put(jobjTemp);
                //Records
                jobjTemp = new JSONObject();
                jobjTemp.put("name", "shippedLoc" + fieldParams.getGSTMappingColnum());
                jarrRecords.put(jobjTemp);
            }

            jobjTemp = new JSONObject();
            jobjTemp.put("header", "Applied Date");
            jobjTemp.put("dataIndex", "applieddate");
            jobjTemp.put("align", "center");
            jarrColumns.put(jobjTemp);
            //Records
            jobjTemp = new JSONObject();
            jobjTemp.put("name", "applieddate");
            jarrRecords.put(jobjTemp);

            JSONObject params = new JSONObject();
            params.put("termType", 7);
            params.put("companyid", requestParams.optString("companyid"));
            params.put("isInput", requestParams.optBoolean("isSales"));
            /**
             * get GST master
             */

            KwlReturnObject kwlReturnObject = accEntityGstDao.getGSTTermDetails(params);
            List<LineLevelTerms> lineLevelTerms = kwlReturnObject.getEntityList();
            for (LineLevelTerms lineLevelTerms1 : lineLevelTerms) {
                /**
                 * Create Map for Term Id,Name
                 */
                jobjTemp = new JSONObject();
                jobjTemp.put("header", lineLevelTerms1.getTerm());
                jobjTemp.put("dataIndex", lineLevelTerms1.getId());
                jobjTemp.put("align", "center");
                jobjTemp.put("width", 150);
                jobjTemp.put("renderer", "WtfGlobal.gstdecimalRenderer");
                jobjTemp.put("pdfwidth", 150);
                jarrColumns.put(jobjTemp);
                //Records
                jobjTemp = new JSONObject();
                jobjTemp.put("name", lineLevelTerms1.getId());
                jarrRecords.put(jobjTemp);
            }

            jobjTemp = new JSONObject();
            jobjTemp.put("header", Constants.GSTProdCategory);
            jobjTemp.put("dataIndex", "percentage");
            jobjTemp.put("align", "center");
            jarrColumns.put(jobjTemp);
            //Records
            jobjTemp = new JSONObject();
            jobjTemp.put("name", "percentage");
            jarrRecords.put(jobjTemp);
            
            /**
             * CESS only added for Indian country
             */
            if (!StringUtil.isNullOrEmpty(countryid)&&Integer.parseInt(countryid)==Constants.indian_country_id) {
                /**
             * Cess Type Column (Not Visible to GUI)
                 */
            jobjTemp = new JSONObject();
            jobjTemp.put("header", "");
            jobjTemp.put("dataIndex", IndiaComplianceConstants.GST_CESS_TYPE);
            jobjTemp.put("hidden", true);
            jobjTemp.put("hideable", false);
            jobjTemp.put("align", "center");
            jarrColumns.put(jobjTemp);
            //Records
            jobjTemp = new JSONObject();
            jobjTemp.put("name", IndiaComplianceConstants.GST_CESS_TYPE);
            jarrRecords.put(jobjTemp);
            
            jobjTemp = new JSONObject();
            jobjTemp.put("header", "");
            jobjTemp.put("hidden", true);
            jobjTemp.put("hideable", false);
            jobjTemp.put("dataIndex", IndiaComplianceConstants.GST_CESS_VALUATION_AMOUNT);
            
            jobjTemp.put("align", "center");
            jarrColumns.put(jobjTemp);
            //Records
            jobjTemp = new JSONObject();
            jobjTemp.put("name", IndiaComplianceConstants.GST_CESS_VALUATION_AMOUNT);
            jarrRecords.put(jobjTemp);
             /**
             * Merchant Exporter column in GST rule report
             */
            jobjTemp = new JSONObject();
            jobjTemp.put("header", "Is Merchant Exporter");
            jobjTemp.put("dataIndex", Constants.isMerchantExporter);
            jobjTemp.put("align", "center");
            jarrColumns.put(jobjTemp);
            //Records
            jobjTemp = new JSONObject();
            jobjTemp.put("name", Constants.isMerchantExporter);
            jarrRecords.put(jobjTemp);
            }
            /**
             * get rule data from table
             */
            requestParams.put("df", authHandler.getDateOnlyFormat());

            //GET ALL DATA
            JSONObject dataObj = getEntityRuleReport(requestParams);
            dataJArr = dataObj.optJSONArray("dataArr");
            int totalCount = dataObj.optInt("totalCount");

            pagedJson = dataJArr;
            finalReturnObj.put("totalCount", totalCount);
            finalReturnObj.put("columns", jarrColumns);
            finalReturnObj.put("coldata", pagedJson);
            jMeta.put("totalProperty", "totalCount");
            jMeta.put("root", "coldata");
            jMeta.put("fields", jarrRecords);
            finalReturnObj.put("metaData", jMeta);

        } catch (ServiceException | com.krawler.utils.json.base.JSONException ex) {
            Logger.getLogger(AccGstServiceImpl.class.getName()).log(Level.INFO, ex.getMessage());
        } catch (SessionExpiredException ex) {
            Logger.getLogger(AccGstServiceImpl.class.getName()).log(Level.SEVERE, null, ex);
        }
        return finalReturnObj;
    }

    /**
     * @param params
     * @return dataAndCount
     * @throws ServiceException
     * @throws ParseException
     * @throws com.krawler.utils.json.base.JSONException
     */
    public JSONObject getEntityRuleReport(JSONObject params) throws ServiceException, ParseException, com.krawler.utils.json.base.JSONException {
        Map<String, Object> reqParams = new HashMap();
        JSONArray jSONArray = new JSONArray();
        String entity = params.optString("entity");
        if (StringUtil.isNullOrEmpty(entity)) {
            return new JSONObject().put("dataArr", jSONArray);
        }
        DateFormat df = (DateFormat) params.opt(Constants.df);

        reqParams.put("entity", entity);
        boolean termSalesOrPurchaseCheck = params.optBoolean("isSales");
        reqParams.put("isSales", termSalesOrPurchaseCheck);

        HashMap<String, Object> hashMap = new HashMap();
        List<String> filter_names = new ArrayList();
        List<Object> filter_values = new ArrayList();
        Map<String, String> dimvaluemap = new HashMap();

        /**
         * GetParameters for GSTRuleReport
         */
        filter_names.add("companyid");
        filter_names.add(Constants.fieldlabel);
        filter_names.add("moduleid");
        filter_values.add(params.optString("companyid"));
        filter_values.add(Constants.GSTProdCategory);
        filter_values.add(30);//This part should contain 'Constants.GSTModule', but no data available for it to show.                        
        hashMap.put("filter_names", filter_names);
        hashMap.put("filter_values", filter_values);
        KwlReturnObject kro = fieldManagerDAOobj.getFieldParams(hashMap);
        if (kro.getEntityList() != null && kro.getEntityList().size() > 0 && kro.getEntityList().get(0) != null) {
            List<FieldParams> fieldParamses = kro.getEntityList();
            for (FieldParams fieldParams : fieldParamses) {
                params.put("fieldid", fieldParams.getId());
                params.put("companyid", fieldParams.getCompanyid());
                KwlReturnObject object = accEntityGstDao.getFieldCombodataForModule(params);
                List<FieldComboData> comboDatas = object.getEntityList();
                int count = 0;
                for (FieldComboData fieldComboData : comboDatas) {
                    reqParams.put(("prod" + (++count)), fieldComboData.getId());
                }
                reqParams.put("productTaxClassCount", count);
            }
        }

        /**
         * Reset filter_names and filter_values for next FieldParams and
         * FieldComboData Query.
         */
        filter_names.remove(1);
        filter_values.remove(1);
        filter_names.remove(1);
        filter_values.remove(1);
        filter_names.add("GSTConfigType");
        filter_values.add(Constants.GST_CONFIG_ISFORGST);
        filter_names.add("moduleid");
        filter_values.add(Constants.GSTModule);
        //hashMap = new HashMap();
        hashMap.put("filter_names", filter_names);
        hashMap.put("filter_values", filter_values);
        kro = fieldManagerDAOobj.getFieldParams(hashMap);
        if (kro.getEntityList() != null && kro.getEntityList().size() > 0 && kro.getEntityList().get(0) != null) {
            List<FieldParams> fieldParamses = kro.getEntityList();
            for (FieldParams fieldParams : fieldParamses) {
                params.put("fieldid", fieldParams.getId());
                params.put("companyid", fieldParams.getCompanyid());
                KwlReturnObject object = accEntityGstDao.getFieldCombodataForModule(params);
                List<FieldComboData> comboDatas = object.getEntityList();
                for (FieldComboData fieldComboData : comboDatas) {
                    dimvaluemap.put(fieldComboData.getId(), fieldComboData.getValue());
                }
            }
        }
        hashMap.put("filter_names", df);

        /**
         * Get State/City wise GST rate applied against Entity >> Product
         */
        reqParams.put("startDate", df.parse(params.optString("startDate")));
        reqParams.put("endDate", df.parse(params.optString("endDate")));
        reqParams.put("ss", params.optString("ss"));
        reqParams.put("companyid", params.optString("companyid"));
        reqParams.put("start", params.optString("start"));
        reqParams.put("limit", params.optString("limit"));

        KwlReturnObject result = accEntityGstDao.getGroupByAllEntityBasedTermRate(reqParams);
        if (result.getEntityList() != null && result.getEntityList().size() > 0 && result.getEntityList().get(0) != null) {
            for (Iterator it = result.getEntityList().iterator(); it.hasNext();) {
                Object[] object = (Object[]) it.next();
                String entitywiserate = object[0].toString();
                String arr[] = entitywiserate.split(",");
                JSONObject jSONObject = new JSONObject();
                for (String string : arr) {
                    String[] pair = string.split(":");
                    jSONObject.put(pair[0], pair[1]);
                }
                entitywiserate = object[1].toString();
                arr = entitywiserate.split(",");
                int count = 1;
                for (String string : arr) {
                    String[] pair = string.split(":");
                    jSONObject.put("id" + count++, pair[1]);
                }

                if (params.optString("countryid", "").equals(String.valueOf(Constants.indian_country_id))) {
                    if (arr.length == 1) {
                        jSONObject.put("groupTerm", "Other");
                    } else {
                        jSONObject.put("groupTerm", "Local");
                    }
                    /**
                     * Get CESS Details as CESS Type and Calculation amount 
                     */
                    String CSSTypeArray[] = object.length>9 && object[9] != null ? object[9].toString().split(",") : null;
                    if (CSSTypeArray != null) {
                        for (String string : CSSTypeArray) {
                            if (string != null) {
                                String[] pair = string.split(":");
                                if (pair != null && pair.length >= 2) {
                                    jSONObject.put(IndiaComplianceConstants.GST_CESS_TYPE, pair[0]);
                                    jSONObject.put(IndiaComplianceConstants.GST_CESS_VALUATION_AMOUNT, pair[1]);
                                }
                            }
                        }
                    }
                    /**
                     * Merchant Exporter value in GST rule report
                     * if TRUE the "YES"  else "NO"
                     */
                    String isMerchantExporter[] = object.length > 10 && object[10] != null ? object[10].toString().split(",") : null;
                    if (isMerchantExporter != null) {
                        for (String string : isMerchantExporter) {
                            if (string != null) {
                                jSONObject.put(Constants.isMerchantExporter, string.equalsIgnoreCase("F")? "No" : "Yes");
                            }
                        }
                    }
                }
                
                /**
                 * Map Location Keys to Location Names.
                 */
                jSONObject.put("shippedLoc1", dimvaluemap.get((String) "" + object[2]));
                jSONObject.put("shippedLoc2", dimvaluemap.get((String) "" + object[3]));
                jSONObject.put("shippedLoc3", dimvaluemap.get((String) "" + object[4]));
                jSONObject.put("shippedLoc4", dimvaluemap.get((String) "" + object[5]));
                jSONObject.put("shippedLoc5", dimvaluemap.get((String) "" + object[6]));

                jSONObject.put("percentage", "" + object[7]);
                jSONObject.put("applieddate", "" + object[8]);
                jSONArray.put(jSONObject);
            }

        }
        JSONObject dataAndCount = new JSONObject();
        dataAndCount.put("totalCount", result.getRecordTotalCount());
        dataAndCount.put("dataArr", jSONArray);
        return dataAndCount;
    }
    /**
     * Function for GST MisMatch report summary
     *
     * @param params
     * @return
     * @throws ServiceException
     * @throws JSONException
     */
    public JSONObject getGSTRMisMatchSummary(JSONObject params) throws ServiceException, JSONException {
        JSONObject object = new JSONObject();
        JSONObject jMeta = new JSONObject();
        JSONArray jarrColumns = new JSONArray();
        JSONArray jarrRecords = new JSONArray();
        JSONArray dataJArr = new JSONArray();
        if (params.optBoolean("isforstore", false)) {
            /**
             * If request for Section combo box
             */
            return object = getGSTMisMatchReportSectionCombo();
        }
        JSONArray array = new JSONArray();
        JSONArray array1 = new JSONArray();
        String start = params.optString("start");
        String limit = params.optString("limit");
        String companyId = params.optString("companyid");
        JSONObject reqParams = params;
        /**
         * Get column number for Entity, State,HSN,UQC etc.
         */
        JSONObject entityParams = new JSONObject();
        String entityModuleIds = Constants.Acc_Invoice_ModuleId + "," + Constants.Acc_Vendor_Invoice_ModuleId + ","
                + Constants.Acc_Sales_Order_ModuleId + "," + Constants.Acc_Purchase_Order_ModuleId+ "," + Constants.Acc_Delivery_Order_ModuleId +","+ Constants.Acc_Goods_Receipt_ModuleId 
                + "," + Constants.Acc_Credit_Note_ModuleId + "," + Constants.Acc_Debit_Note_ModuleId; // GET CN/ DN module entity detail
        params.put("moduleids", entityModuleIds);
        params.put("fieldlabel", Constants.ENTITY);
        params.put("fcdvalue", reqParams.optString("entity"));
        params.put("companyid", reqParams.optString("companyid"));
        List entityList = fieldManagerDAOobj.getEntityDataForRequestedModule(params);
        geModulewiseEntityData(entityList, reqParams);
        Map<String, Integer> fieldData = new HashMap<>();
        fieldData.put(Constants.HSN_SACCODE + Constants.Acc_Product_Master_ModuleId, Constants.Acc_Product_Master_ModuleId);
        fieldData.put(Constants.GSTProdCategory + Constants.Acc_Product_Master_ModuleId, Constants.Acc_Product_Master_ModuleId);
        fieldData.put(Constants.GST_UNIT_QUANTITY_CODE + Constants.Acc_Product_Master_ModuleId, Constants.Acc_Product_Master_ModuleId);
        fieldData.put(Constants.STATE + Constants.Acc_Invoice_ModuleId, Constants.Acc_Invoice_ModuleId);
        fieldData.put(Constants.STATE + Constants.Acc_Vendor_Invoice_ModuleId, Constants.Acc_Vendor_Invoice_ModuleId);
        fieldData.put(Constants.STATE + Constants.Acc_Sales_Order_ModuleId, Constants.Acc_Sales_Order_ModuleId);
        fieldData.put(Constants.STATE + Constants.Acc_Purchase_Order_ModuleId, Constants.Acc_Purchase_Order_ModuleId);
        fieldData.put(Constants.STATE + Constants.Acc_Delivery_Order_ModuleId, Constants.Acc_Delivery_Order_ModuleId);
        fieldData.put(Constants.STATE + Constants.Acc_Goods_Receipt_ModuleId, Constants.Acc_Goods_Receipt_ModuleId);
        /**
         * Get State field col number for CN and DN
         */
        fieldData.put(Constants.STATE + Constants.Acc_Credit_Note_ModuleId, Constants.Acc_Credit_Note_ModuleId);
        fieldData.put(Constants.STATE + Constants.Acc_Debit_Note_ModuleId, Constants.Acc_Debit_Note_ModuleId);
        List colList = fieldManagerDAOobj.getColnumForDimensionCollectively(fieldData, reqParams);
        getModulewiseColNumData(colList, reqParams);

        try {

            getColumnModelForGSTMissingDocSummary(jarrRecords, jarrColumns, params);
            reqParams.put("isInvoice",true);

            /**
             * HSN
             */
            JSONObject parameter = new JSONObject(reqParams, JSONObject.getNames(reqParams));
            parameter.put("typeofinvoice", GSTRConstants.GSTMisMatch_SECTION_HSNNotAvailable);
            parameter.put("ishsnblank", true);
            parameter.put("ishsninvalid",true);// HSN code's length should be less than 8 digit
            JSONObject b2bobj = getGSTMissingInvoice(parameter);
            JSONObject B2B = new JSONObject();
            B2B = b2bobj.getJSONArray("summaryArr").getJSONObject(0);
            dataJArr.put(B2B);

            /**
             * UQC
             */
            parameter = new JSONObject(reqParams, JSONObject.getNames(reqParams));
            parameter.put("typeofinvoice", GSTRConstants.GSTMisMatch_SECTION_UQCNotAvailable);
            parameter.put("isuqcblank", true);
            b2bobj = getGSTMissingInvoice(parameter);
            B2B = new JSONObject();
            B2B = b2bobj.getJSONArray("summaryArr").getJSONObject(0);
            dataJArr.put(B2B);

            /**
             * GSTIN Blank
             */
            parameter = new JSONObject(reqParams, JSONObject.getNames(reqParams));
            parameter.put("typeofinvoice", GSTRConstants.GSTMisMatch_SECTION_GSTINBlank);
            parameter.put("isGSTINnull", true);
            parameter.put("registrationType", Constants.GSTRegType_Regular + "," + Constants.GSTRegType_Regular_ECommerce + "," + Constants.GSTRegType_Composition + "," + Constants.GSTRegType_Composition_ECommerce);
            b2bobj = getGSTMissingInvoice(parameter);
            B2B = new JSONObject();
            B2B = b2bobj.getJSONArray("summaryArr").getJSONObject(0);
            dataJArr.put(B2B);

            /**
             * GSTIN non Blank
             */
            parameter = new JSONObject(reqParams, JSONObject.getNames(reqParams));
            parameter.put("typeofinvoice", GSTRConstants.GSTMisMatch_SECTION_GSTINnonBlank);
            parameter.put("isGSTINnull", false);
            parameter.put("registrationType", Constants.GSTRegType_Unregistered + "," + Constants.GSTRegType_Consumer);
            b2bobj = getGSTMissingInvoice(parameter);
            B2B = new JSONObject();
            B2B = b2bobj.getJSONArray("summaryArr").getJSONObject(0);
            dataJArr.put(B2B);

            /*
            * GSTIN Number Invalid
            */
            parameter = new JSONObject(reqParams, JSONObject.getNames(reqParams));
            parameter.put("typeofinvoice", GSTRConstants.GSTMisMatch_SECTION_GSTINInvalid);
            parameter.put("isGSTINnull", false);
            parameter.put("registrationType", Constants.GSTRegType_Regular + "," + Constants.GSTRegType_Regular_ECommerce + "," + Constants.GSTRegType_Composition + "," + Constants.GSTRegType_Composition_ECommerce);
            b2bobj = getGSTMissingInvoice(parameter);
            B2B = new JSONObject();
            B2B = b2bobj.getJSONArray("summaryArr").getJSONObject(0);
            dataJArr.put(B2B);
            /**
             * GST Registration Type blank
             */
            parameter = new JSONObject(reqParams, JSONObject.getNames(reqParams));
            parameter.put("typeofinvoice", GSTRConstants.GSTMisMatch_SECTION_GSTRegistrationTypeblank);
            parameter.put("isgstregtypeblank", true);
            b2bobj = getGSTMissingInvoice(parameter);
            B2B = new JSONObject();
            B2B = b2bobj.getJSONArray("summaryArr").getJSONObject(0);
            dataJArr.put(B2B);

            /**
             * Customer Type blank
             */
            parameter = new JSONObject(reqParams, JSONObject.getNames(reqParams));
            parameter.put("typeofinvoice", GSTRConstants.GSTMisMatch_SECTION_CustomerVendorTypeblank);
            parameter.put("iscusttypeblank", true);
            b2bobj = getGSTMissingInvoice(parameter);
            B2B = new JSONObject();
            B2B = b2bobj.getJSONArray("summaryArr").getJSONObject(0);
            dataJArr.put(B2B);

            /**
             * RCM Sales to Unregistered Person
             */
            parameter = new JSONObject(reqParams, JSONObject.getNames(reqParams));
            parameter.put("typeofinvoice", GSTRConstants.GSTMisMatch_SECTION_RCMSalestoUnregisteredPerson);
            parameter.put("registrationType", Constants.GSTRegType_Unregistered + "," + Constants.GSTRegType_Consumer);
            parameter.put("isRCMApplicable", true);
            b2bobj = getGSTMissingInvoice(parameter);
            B2B = new JSONObject();
            B2B = b2bobj.getJSONArray("summaryArr").getJSONObject(0);
            dataJArr.put(B2B);

            /**
             * Product tax Mismatch
             */
            parameter = new JSONObject(reqParams, JSONObject.getNames(reqParams));
            parameter.put("typeofinvoice", GSTRConstants.GSTMisMatch_SECTION_ProducttaxMismatch);
            parameter.put("istaxclassmismatch", true);
            b2bobj = getGSTMissingInvoice(parameter);
            B2B = new JSONObject();
            B2B = b2bobj.getJSONArray("summaryArr").getJSONObject(0);
            dataJArr.put(B2B);
            
            /**
             * State Mismatch
             */
            parameter = new JSONObject(reqParams, JSONObject.getNames(reqParams));
            parameter.put("typeofinvoice", GSTRConstants.GSTMisMatch_SECTION_StateMismatch);
            parameter.put("statemismatch", true);
            parameter.put("CustomerType", Constants.CUSTVENTYPE_DEEMED_EXPORT + "," + Constants.CUSTVENTYPE_NA + "," + Constants.CUSTVENTYPE_SEZ+ "," + Constants.CUSTVENTYPE_SEZWOPAY);
            b2bobj = getGSTMissingInvoice(parameter);
            B2B = new JSONObject();
            B2B = b2bobj.getJSONArray("summaryArr").getJSONObject(0);
            dataJArr.put(B2B);

            /**
             * Manually entered Invoice Number
             */
            parameter = new JSONObject(reqParams, JSONObject.getNames(reqParams));
            parameter.put("typeofinvoice", GSTRConstants.GSTMisMatch_SECTION_ManuallyenteredInvoiceNumber);
            parameter.put("withoutseqformat", true);
            b2bobj = getGSTMissingInvoice(parameter);
            B2B = new JSONObject();
            B2B = b2bobj.getJSONArray("summaryArr").getJSONObject(0);
            dataJArr.put(B2B);
            
            /**
             * GST-History not present
             */
            parameter = new JSONObject(reqParams, JSONObject.getNames(reqParams));
            parameter.put("typeofinvoice", GSTRConstants.Sec_GST_History_Not_Present);
            parameter.put("ishistoryblank",true);
            b2bobj = getGSTMissingInvoice(parameter);
            B2B = new JSONObject();
            B2B = b2bobj.getJSONArray("summaryArr").getJSONObject(0);
            dataJArr.put(B2B);
            
//            /**
//             * Invalid CN
//             */
//            parameter = new JSONObject(reqParams, JSONObject.getNames(reqParams));
//            parameter.put("typeofinvoice", GSTRConstants.GSTMisMatch_SECTION_INVALIDCN);
//            parameter.put("isCNDN", true);
//            parameter.put("isInvoice", false);
//            parameter.put("iscndnwithoutinvoice", true);
//            b2bobj = getGSTMissingInvoice(parameter);
//            B2B = new JSONObject();
//            B2B = b2bobj.getJSONArray("summaryArr").getJSONObject(0);
//            dataJArr.put(B2B);
            
            JSONArray pagedJson = new JSONArray();
            pagedJson = dataJArr;
            if (!StringUtil.isNullOrEmpty(start) && !StringUtil.isNullOrEmpty(limit)) {
                pagedJson = StringUtil.getPagedJSON(pagedJson, Integer.parseInt(start), Integer.parseInt(limit));
            }
            object.put("totalCount", dataJArr.length());
            object.put("columns", jarrColumns);
            object.put("coldata", pagedJson);
            jMeta.put("totalProperty", "totalCount");
            jMeta.put("root", "coldata");
            jMeta.put("fields", jarrRecords);
            object.put("metaData", jMeta);
            if (params.optBoolean("isExport")) {
                object.put("data", dataJArr);
                object.put("columns", jarrColumns);
            }

        } catch (JSONException ex) {
            throw ServiceException.FAILURE(ex.getMessage(), ex);
        }
        return object;
    }

    public void getColumnModelForGSTMissingDocSummary(JSONArray jarrRecords, JSONArray jarrColumns, JSONObject params) throws JSONException {
        String storeRec = "";
        String section = params.optString("companyid");;
        Locale requestcontextutilsobj = null;
        if (params.has("requestcontextutilsobj")) {
            requestcontextutilsobj = (Locale) params.opt("requestcontextutilsobj");
        }
        JSONObject jobjTemp = new JSONObject();
        storeRec = "typeofinvoice,numberofinvoices,sumTaxableAmt,sumTaxAmt,sumTotalAmt,entity,view";

        String[] recArr = storeRec.split(",");
        // Get those fields in record for whome, no special properties present like type, defVal, mapping etc.
        for (String rec : recArr) {
            jobjTemp = new JSONObject();
            jobjTemp.put("name", rec);
            jarrRecords.put(jobjTemp);
        }

        // Gel column model - 
        jobjTemp = new JSONObject();
        jobjTemp.put("header", "<b>" + messageSource.getMessage("acc.gstmismatch.mismatchType", null, requestcontextutilsobj) + "<b>");
        jobjTemp.put("dataIndex", "typeofinvoice");
        jobjTemp.put("width", 150);
        jobjTemp.put("align", "center");
        jobjTemp.put("pdfwidth", 150);
        jarrColumns.put(jobjTemp);
        jobjTemp = new JSONObject();
        jobjTemp.put("header", "<b>" + messageSource.getMessage("acc.gstr1.numberofinvoices", null, requestcontextutilsobj) + "<b>");
        jobjTemp.put("dataIndex", "numberofinvoices");
        jobjTemp.put("width", 150);
        jobjTemp.put("align", "center");
        jobjTemp.put("pdfwidth", 150);
        jarrColumns.put(jobjTemp);

        jobjTemp = new JSONObject();
        jobjTemp.put("header", "<b>" + messageSource.getMessage("acc.lp.dishonouredChequeView", null, requestcontextutilsobj) + "<b>");;
        jobjTemp.put("dataIndex", "view");
        jobjTemp.put("width", 150);
        jobjTemp.put("align", "center");
        jobjTemp.put("pdfwidth", 150);
        jobjTemp.put("renderer", "function(value, css, record, row, column, store){\n"
                + "                    return \"<img id='AcceptImg' class='add'  style='height:18px; width:18px;' src='images/report.gif' title='View Report '></img>\";}");

        jarrColumns.put(jobjTemp);

    }

    public JSONObject getGSTMissingInvoice(JSONObject params) throws ServiceException, JSONException {
        String companyId = params.optString("companyid");
        JSONObject jobject = new JSONObject();
        JSONArray tempArr = new JSONArray();
        JSONArray b2bArr = new JSONArray();
        JSONObject summaryb2bObj = new JSONObject();
        JSONArray summaryArr = new JSONArray();
        JSONObject invwithgstn = new JSONObject();
        String typeofinvoice = params.optString("typeofinvoice");
        invwithgstn = gSTR1DeskeraServiceDao.getGSTMissingInvoice(params);        
        JSONArray dataArr = invwithgstn.getJSONArray("data");
        // ERM: 955 - Code to check whether GSTIN is valid or invalid 
        if (params.has("typeofinvoice") && params.optString("typeofinvoice").equals(GSTRConstants.GSTMisMatch_SECTION_GSTINInvalid)) {
            for (int temp = 0; temp < dataArr.length(); temp++) {
                JSONObject tempObj = dataArr.optJSONObject(temp);
                if (tempObj.has(GSTRConstants.gstin) && !StringUtil.isNullOrEmpty(tempObj.optString(GSTRConstants.gstin))) {
                    String GSTIN = tempObj.optString(GSTRConstants.gstin);
                    boolean isGstinValid = true;
                    isGstinValid = StringUtil.isGSTINValid(GSTIN);
                    if (!isGstinValid) {
                        tempArr.put(dataArr.getJSONObject(temp));
                    }
                }
            }
            dataArr = tempArr;
        }
        summaryb2bObj.put("numberofinvoices", dataArr.length());
        summaryb2bObj.put("typeofinvoice", typeofinvoice);
        summaryArr.put(summaryb2bObj);
        jobject.put("summaryArr", summaryArr);
        jobject.put("data", dataArr);

        return jobject;
    }

    public JSONObject getGSTRMisMatchSummaryDetails(JSONObject params) throws ServiceException, JSONException {
        JSONObject object = new JSONObject();
        JSONObject jMeta = new JSONObject();

        JSONArray jarrColumns = new JSONArray();
        JSONArray jarrRecords = new JSONArray();
        JSONArray b2bArr = new JSONArray();
        JSONArray dataJArr = new JSONArray();
        
        String start = params.optString("start");
        String limit = params.optString("limit");
        String companyId = params.optString("companyid");
        JSONObject reqParams = params;
        /**
         * Get column number for Entity, State,HSN,UQC etc.
         */
        JSONObject entityParams = new JSONObject();
        String entityModuleIds = Constants.Acc_Invoice_ModuleId + "," + Constants.Acc_Vendor_Invoice_ModuleId + ","
                + Constants.Acc_Sales_Order_ModuleId + "," + Constants.Acc_Purchase_Order_ModuleId+ "," + Constants.Acc_Delivery_Order_ModuleId + "," + Constants.Acc_Goods_Receipt_ModuleId
                + "," + Constants.Acc_Credit_Note_ModuleId + "," + Constants.Acc_Debit_Note_ModuleId; // Get Entity fields details for CN/DN module
        params.put("moduleids", entityModuleIds);
        params.put("fieldlabel", Constants.ENTITY);
        params.put("fcdvalue", reqParams.optString("entity"));
        params.put("companyid", reqParams.optString("companyid"));
        List entityList = fieldManagerDAOobj.getEntityDataForRequestedModule(params);
        geModulewiseEntityData(entityList, reqParams);
        Map<String, Integer> fieldData = new HashMap<>();
        fieldData.put(Constants.HSN_SACCODE + Constants.Acc_Product_Master_ModuleId, Constants.Acc_Product_Master_ModuleId);
        fieldData.put(Constants.GSTProdCategory + Constants.Acc_Product_Master_ModuleId, Constants.Acc_Product_Master_ModuleId);
        fieldData.put(Constants.GST_UNIT_QUANTITY_CODE + Constants.Acc_Product_Master_ModuleId, Constants.Acc_Product_Master_ModuleId);
        fieldData.put(Constants.STATE + Constants.Acc_Invoice_ModuleId, Constants.Acc_Invoice_ModuleId);
        fieldData.put(Constants.STATE + Constants.Acc_Vendor_Invoice_ModuleId, Constants.Acc_Vendor_Invoice_ModuleId);
        fieldData.put(Constants.STATE + Constants.Acc_Sales_Order_ModuleId, Constants.Acc_Sales_Order_ModuleId);
        fieldData.put(Constants.STATE + Constants.Acc_Purchase_Order_ModuleId, Constants.Acc_Purchase_Order_ModuleId);
        fieldData.put(Constants.STATE + Constants.Acc_Delivery_Order_ModuleId, Constants.Acc_Delivery_Order_ModuleId);
        fieldData.put(Constants.STATE + Constants.Acc_Goods_Receipt_ModuleId, Constants.Acc_Goods_Receipt_ModuleId);
        /**
         * Get State fields details for CN and DN module
         */
        fieldData.put(Constants.STATE + Constants.Acc_Credit_Note_ModuleId, Constants.Acc_Credit_Note_ModuleId);
        fieldData.put(Constants.STATE + Constants.Acc_Debit_Note_ModuleId, Constants.Acc_Debit_Note_ModuleId);
        List colList = fieldManagerDAOobj.getColnumForDimensionCollectively(fieldData, reqParams);
        getModulewiseColNumData(colList, reqParams);

        try {
            String section = params.optString("section");
            getColumnModelForGSTMisMatch(jarrRecords, jarrColumns, params);
            reqParams.put("isInvoice",true);
            switch (section) {
                case GSTRConstants.GSTMisMatch_SECTION_HSNNotAvailable: {
                    /**
                     * HSN
                     */
                    reqParams.put("ishsnblank", true);
                    reqParams.put("ishsninvalid",true); // HSN code's length should be less than 8 digit ERM-1092
                    JSONObject b2bobj = getGSTMissingInvoice(reqParams);
                    dataJArr = b2bobj.getJSONArray("data");                     
                    break;
                }
                case GSTRConstants.GSTMisMatch_SECTION_UQCNotAvailable: {
                    /**
                     * UQC Not Available
                     */
                    reqParams.put("isuqcblank", true);
                    JSONObject b2bobj = getGSTMissingInvoice(reqParams);
                    dataJArr = b2bobj.getJSONArray("data");
                    break;
                }
                case GSTRConstants.GSTMisMatch_SECTION_GSTINBlank: {
                    /**
                     * GSTIN Blank
                     */
                    reqParams.put("isGSTINnull", true);
                    reqParams.put("registrationType", Constants.GSTRegType_Regular + "," + Constants.GSTRegType_Regular_ECommerce + "," + Constants.GSTRegType_Composition + "," + Constants.GSTRegType_Composition_ECommerce);
                    JSONObject b2bobj = getGSTMissingInvoice(reqParams);
                    dataJArr = b2bobj.getJSONArray("data");
                    break;
                }
                case GSTRConstants.GSTMisMatch_SECTION_GSTINnonBlank: {
                    /**
                     * GSTIN non Blank
                     */
                    reqParams.put("isGSTINnull", false);
                    reqParams.put("registrationType", Constants.GSTRegType_Unregistered + "," + Constants.GSTRegType_Consumer);
                    JSONObject b2bobj = getGSTMissingInvoice(reqParams);
                    dataJArr = b2bobj.getJSONArray("data");
                    break;
                }
                case GSTRConstants.GSTMisMatch_SECTION_GSTINInvalid: {
                    /**
                     * GSTIN non Blank
                     */
                    reqParams.put("typeofinvoice", GSTRConstants.GSTMisMatch_SECTION_GSTINInvalid);
                    reqParams.put("isGSTINnull", false);
                    reqParams.put("registrationType", Constants.GSTRegType_Regular + "," + Constants.GSTRegType_Regular_ECommerce + "," + Constants.GSTRegType_Composition + "," + Constants.GSTRegType_Composition_ECommerce);
                    JSONObject b2bobj = getGSTMissingInvoice(reqParams);
                    dataJArr = b2bobj.getJSONArray("data");
                    break;
                }
                case GSTRConstants.GSTMisMatch_SECTION_GSTRegistrationTypeblank: {
                    /**
                     * GST Registration Type blank
                     */
                    reqParams.put("isgstregtypeblank", true);
                    JSONObject b2bobj = getGSTMissingInvoice(reqParams);
                    dataJArr = b2bobj.getJSONArray("data");
                    break;
                }
                case GSTRConstants.GSTMisMatch_SECTION_CustomerVendorTypeblank: {
                    /**
                     * Customer/Vendor Type blank
                     */
                    reqParams.put("iscusttypeblank", true);
                    JSONObject b2bobj = getGSTMissingInvoice(reqParams);
                    dataJArr = b2bobj.getJSONArray("data");
                    break;
                }
                case GSTRConstants.GSTMisMatch_SECTION_RCMSalestoUnregisteredPerson: {
                    /**
                     * RCM Sales to Unregistered Person
                     */
                    reqParams.put("registrationType", Constants.GSTRegType_Unregistered + "," + Constants.GSTRegType_Consumer);
                    reqParams.put("isRCMApplicable", true);
                    JSONObject b2bobj = getGSTMissingInvoice(reqParams);
                    dataJArr = b2bobj.getJSONArray("data");
                    break;
                }
                case GSTRConstants.GSTMisMatch_SECTION_ProducttaxMismatch: {
                    /**
                     * Product tax Mismatch
                     */
                    reqParams.put("istaxclassmismatch", true);
                    JSONObject b2bobj = getGSTMissingInvoice(reqParams);
                    dataJArr = b2bobj.getJSONArray("data");
                    if (dataJArr.length() > 0) {
                        for (int i = 0; i < dataJArr.length(); i++) {
                            if (dataJArr.getJSONObject(i).optBoolean("istaxroundedreason") && dataJArr.getJSONObject(i).optBoolean("istaxclassreason")) {
                                dataJArr.getJSONObject(i).put("reason", GSTRConstants.ProductTaxClass_Mismatch + " and "+GSTRConstants.RoundOff_Mismatch);
                            } else if (dataJArr.getJSONObject(i).optBoolean("istaxroundedreason")) {
                                dataJArr.getJSONObject(i).put("reason", GSTRConstants.RoundOff_Mismatch);
                            } else {
                                dataJArr.getJSONObject(i).put("reason", GSTRConstants.ProductTaxClass_Mismatch);
                            }
                        }
                    }
                    break;
                }
                case GSTRConstants.GSTMisMatch_SECTION_StateMismatch: {
                    /**
                     * State Mismatch
                     */
                    reqParams.put("statemismatch", true);
                    reqParams.put("CustomerType", Constants.CUSTVENTYPE_DEEMED_EXPORT + "," + Constants.CUSTVENTYPE_NA + "," + Constants.CUSTVENTYPE_SEZ+ "," + Constants.CUSTVENTYPE_SEZWOPAY);
                    JSONObject b2bobj = getGSTMissingInvoice(reqParams);
                    dataJArr = b2bobj.getJSONArray("data");
                    break;
                }
                case GSTRConstants.GSTMisMatch_SECTION_ManuallyenteredInvoiceNumber: {
                    /**
                     * Manually entered Invoice Number
                     */
                    reqParams.put("withoutseqformat", true);
                    JSONObject b2bobj = getGSTMissingInvoice(reqParams);
                    dataJArr = b2bobj.getJSONArray("data");
                    break;
                }

                case GSTRConstants.Sec_GST_History_Not_Present: {
                    /**
                     * GST-History not present
                     */
                    reqParams.put("ishistoryblank", true);
                    JSONObject b2bobj = getGSTMissingInvoice(reqParams);
                    dataJArr = b2bobj.getJSONArray("data");           
                }
//                case GSTRConstants.GSTMisMatch_SECTION_INVALIDCN: {
//                    /**
//                     * GST-History not present
//                     */
//                    reqParams.put("isCNDN", true);
//                    reqParams.put("isInvoice", false);
//                    reqParams.put("iscndnwithoutinvoice", true);
//                    JSONObject b2bobj = getGSTMissingInvoice(reqParams);
//                    dataJArr = b2bobj.getJSONArray("data");
//                }
            }
            JSONArray pagedJson = new JSONArray();
            pagedJson = dataJArr;
            if (!StringUtil.isNullOrEmpty(start) && !StringUtil.isNullOrEmpty(limit)) {
                pagedJson = StringUtil.getPagedJSON(pagedJson, Integer.parseInt(start), Integer.parseInt(limit));
            }
            object.put("totalCount", dataJArr.length());
            object.put("columns", jarrColumns);
            object.put("coldata", pagedJson);
            jMeta.put("totalProperty", "totalCount");
            jMeta.put("root", "coldata");
            jMeta.put("fields", jarrRecords);
            object.put("metaData", jMeta);
            if (params.optBoolean("isExport")) {
                object.put("data", dataJArr);
                object.put("columns", jarrColumns);
            }

        } catch (JSONException ex) {
            throw ServiceException.FAILURE(ex.getMessage(), ex);
        }
        return object;
    }

    public void getColumnModelForGSTMisMatch(JSONArray jarrRecords, JSONArray jarrColumns, JSONObject params) throws JSONException {
        String storeRec = "";
        String section = params.optString("section");;
        Locale requestcontextutilsobj = null;
        if (params.has("requestcontextutilsobj")) {
            requestcontextutilsobj = (Locale) params.opt("requestcontextutilsobj");
        }
        JSONObject jobjTemp = new JSONObject();
        storeRec = "typeofinvoice,taxamount,amount,billno,billdate,entity,view,productid,customer,returnno,reason,gsttypename";

        String[] recArr = storeRec.split(",");
        // Get those fields in record for whome, no special properties present like type, defVal, mapping etc.
        for (String rec : recArr) {
            jobjTemp = new JSONObject();
            jobjTemp.put("name", rec);
            jarrRecords.put(jobjTemp);
        }

        // Gel column model - 
        jobjTemp = new JSONObject();
        jobjTemp.put("header", "<b>" + messageSource.getMessage("acc.gstr1.invoicetype", null, requestcontextutilsobj) + "<b>");
        jobjTemp.put("dataIndex", "typeofinvoice");
        jobjTemp.put("width", 150);
        jobjTemp.put("align", "center");
        jobjTemp.put("pdfwidth", 150);
        jarrColumns.put(jobjTemp);
        jobjTemp = new JSONObject();
        jobjTemp.put("header", "<b>" + messageSource.getMessage("acc.reval.transaction", null, requestcontextutilsobj) + "<b>");
        jobjTemp.put("dataIndex", "billno");
        jobjTemp.put("width", 150);
        jobjTemp.put("align", "center");
        jobjTemp.put("pdfwidth", 150);
        jarrColumns.put(jobjTemp);
        jobjTemp = new JSONObject();
        jobjTemp.put("header", "<b>" + messageSource.getMessage("acc.contractReoprt.SRContrat", null, requestcontextutilsobj) + "<b>");
        jobjTemp.put("dataIndex", "returnno");
        jobjTemp.put("width", 150);
        jobjTemp.put("align", "center");
        jobjTemp.put("pdfwidth", 150);
        jarrColumns.put(jobjTemp);
        jobjTemp = new JSONObject();
        jobjTemp.put("header", "<b>" + messageSource.getMessage("acc.field.TransactionDate", null, requestcontextutilsobj) + "<b>");
        jobjTemp.put("dataIndex", "billdate");
        jobjTemp.put("width", 150);
//        jobjTemp.put("renderer", "WtfGlobal.withoutRateCurrencyDeletedSymbol");
        jobjTemp.put("align", "right");
        jobjTemp.put("pdfwidth", 150);
        jarrColumns.put(jobjTemp);
        jobjTemp = new JSONObject();
        jobjTemp.put("header", "<b>" + messageSource.getMessage("acc.contract.customer", null, requestcontextutilsobj) + "<b>");
        jobjTemp.put("dataIndex", "customer");
        jobjTemp.put("width", 150);
        jobjTemp.put("align", "center");
        jobjTemp.put("pdfwidth", 150);
        jarrColumns.put(jobjTemp);
        jobjTemp = new JSONObject();
        jobjTemp.put("header", "<b>" + messageSource.getMessage("acc.field.ProductCode", null, requestcontextutilsobj) + "<b>");
        jobjTemp.put("dataIndex", "productid");
        jobjTemp.put("width", 150);
        jobjTemp.put("align", "center");
        jobjTemp.put("pdfwidth", 150);
        jarrColumns.put(jobjTemp);
        jobjTemp = new JSONObject();
        jobjTemp.put("header", "<b>" + messageSource.getMessage("acc.invoice.TotalTaxAmt", null, requestcontextutilsobj) + "<b>");
        jobjTemp.put("dataIndex", "taxamount");
        jobjTemp.put("width", 150);
        jobjTemp.put("renderer", "WtfGlobal.withoutRateCurrencyDeletedSymbol");
        jobjTemp.put("align", "right");
        jobjTemp.put("pdfwidth", 150);
        jarrColumns.put(jobjTemp);
        jobjTemp = new JSONObject();
        jobjTemp.put("header", "<b>" + messageSource.getMessage("acc.gstr1.totalAmountInclTaxes", null, requestcontextutilsobj) + "<b>");
        jobjTemp.put("dataIndex", "amount");
        jobjTemp.put("width", 150);
        jobjTemp.put("renderer", "WtfGlobal.withoutRateCurrencyDeletedSymbol");
        jobjTemp.put("align", "right");
        jobjTemp.put("pdfwidth", 150);
        jarrColumns.put(jobjTemp);
        jobjTemp = new JSONObject();
        jobjTemp.put("header", "<b>" + messageSource.getMessage("acc.gstr1.reason", null, requestcontextutilsobj) + "<b>");
        jobjTemp.put("dataIndex", "reason");
        jobjTemp.put("width", 150);
        jobjTemp.put("align", "center");
        jobjTemp.put("pdfwidth", 150);
        /**
         * Added render for show Reason column value in tool tip
         */
        boolean isHiddengsttypenameColumn = true;
        if (section.equalsIgnoreCase(GSTRConstants.GSTMisMatch_SECTION_CustomerVendorTypeblank)
                || section.equalsIgnoreCase(GSTRConstants.GSTMisMatch_SECTION_GSTRegistrationTypeblank)) {
            isHiddengsttypenameColumn = false;
        }
        jobjTemp.put("renderer", "function(value){var res = \"<span class='gridRow'  wtf:qtip='\"+value+\"'>\"+value+\"</span>\";return res;}");
        jarrColumns.put(jobjTemp);
        jobjTemp = new JSONObject();
        jobjTemp.put("header", "<b>" + GSTRConstants.GST_TYPE_COLUMN_NAME + "<b>");
        jobjTemp.put("dataIndex", "gsttypename");
        jobjTemp.put("width", 150);
        jobjTemp.put("align", "center");
        jobjTemp.put("hidden", isHiddengsttypenameColumn);
        jobjTemp.put("pdfwidth", 150);
        jobjTemp.put("renderer", "function(value){var res = \"<span class='gridRow'  wtf:qtip='\"+value+\"'>\"+value+\"</span>\";return res;}");
        jarrColumns.put(jobjTemp);

    }

    public HSSFWorkbook exportGSTRMisMatchSummary(JSONObject params) throws JSONException, ServiceException {
        JSONObject reqParams = params;
        String companyId = params.getString("companyid");
        /* * before starting sectional data need to get column no for Product Tax
         * Class (HSN)
         */

        JSONArray array = new JSONArray();
        JSONArray array1 = new JSONArray();
        String start = params.optString("start");
        String limit = params.optString("limit");
        /**
         * Get column number for Entity, State,HSN,UQC etc.
         */
        JSONObject entityParams = new JSONObject();
        String entityModuleIds = Constants.Acc_Invoice_ModuleId + "," + Constants.Acc_Vendor_Invoice_ModuleId + ","
                + Constants.Acc_Sales_Order_ModuleId + "," + Constants.Acc_Purchase_Order_ModuleId+ "," + Constants.Acc_Delivery_Order_ModuleId + "," + Constants.Acc_Goods_Receipt_ModuleId
                + "," + Constants.Acc_Credit_Note_ModuleId + "," + Constants.Acc_Debit_Note_ModuleId; // Get Entity fields details for CN/DN module
        params.put("moduleids", entityModuleIds);
        params.put("fieldlabel", Constants.ENTITY);
        params.put("fcdvalue", reqParams.optString("entity"));
        params.put("companyid", reqParams.optString("companyid"));
        List entityList = fieldManagerDAOobj.getEntityDataForRequestedModule(params);
        geModulewiseEntityData(entityList, reqParams);
        Map<String, Integer> fieldData = new HashMap<>();
        fieldData.put(Constants.HSN_SACCODE + Constants.Acc_Product_Master_ModuleId, Constants.Acc_Product_Master_ModuleId);
        fieldData.put(Constants.GSTProdCategory + Constants.Acc_Product_Master_ModuleId, Constants.Acc_Product_Master_ModuleId);
        fieldData.put(Constants.GST_UNIT_QUANTITY_CODE + Constants.Acc_Product_Master_ModuleId, Constants.Acc_Product_Master_ModuleId);
        fieldData.put(Constants.STATE + Constants.Acc_Invoice_ModuleId, Constants.Acc_Invoice_ModuleId);
        fieldData.put(Constants.STATE + Constants.Acc_Vendor_Invoice_ModuleId, Constants.Acc_Vendor_Invoice_ModuleId);
        fieldData.put(Constants.STATE + Constants.Acc_Sales_Order_ModuleId, Constants.Acc_Sales_Order_ModuleId);
        fieldData.put(Constants.STATE + Constants.Acc_Purchase_Order_ModuleId, Constants.Acc_Purchase_Order_ModuleId);
        fieldData.put(Constants.STATE + Constants.Acc_Delivery_Order_ModuleId, Constants.Acc_Delivery_Order_ModuleId);
        fieldData.put(Constants.STATE + Constants.Acc_Goods_Receipt_ModuleId, Constants.Acc_Goods_Receipt_ModuleId);
        /**
         * Get State fields details for CN and DN module
         */
        fieldData.put(Constants.STATE + Constants.Acc_Credit_Note_ModuleId, Constants.Acc_Credit_Note_ModuleId);
        fieldData.put(Constants.STATE + Constants.Acc_Debit_Note_ModuleId, Constants.Acc_Debit_Note_ModuleId);
        List colList = fieldManagerDAOobj.getColnumForDimensionCollectively(fieldData, reqParams);
        getModulewiseColNumData(colList, reqParams);

        reqParams.put("isInvoice", true);
        HSSFWorkbook wb = new HSSFWorkbook();

        JSONObject parameter = new JSONObject(reqParams, JSONObject.getNames(reqParams));
        parameter.put("typeofinvoice", GSTRConstants.GSTMisMatch_SECTION_HSNNotAvailable);
        parameter.put("ishsnblank", true); 
        reqParams.put("ishsninvalid",true);// HSN code's length should be less than 8 digit
        JSONObject b2bobj = getGSTMissingInvoice(parameter);
        b2bobj.put("typeofinvoice", GSTRConstants.GSTMisMatch_SECTION_HSNNotAvailable);
        b2bobj.put(Constants.entity, params.optString(Constants.entity, ""));
        GSTR1ExportToExcel.writedatain_MisMatchReportData(wb, b2bobj);
        /**
         * UQC
         */
        parameter = new JSONObject(reqParams, JSONObject.getNames(reqParams));
        parameter.put("typeofinvoice", GSTRConstants.GSTMisMatch_SECTION_UQCNotAvailable);
        parameter.put("isuqcblank", true);
        b2bobj = getGSTMissingInvoice(parameter);
        b2bobj.put("typeofinvoice", GSTRConstants.GSTMisMatch_SECTION_UQCNotAvailable);
        b2bobj.put(Constants.entity, params.optString(Constants.entity, ""));
        GSTR1ExportToExcel.writedatain_MisMatchReportData(wb, b2bobj);

        /**
         * GSTIN Blank
         */
        parameter = new JSONObject(reqParams, JSONObject.getNames(reqParams));
        parameter.put("typeofinvoice", GSTRConstants.GSTMisMatch_SECTION_GSTINBlank);
        parameter.put("isGSTINnull", true);
        parameter.put("registrationType", Constants.GSTRegType_Regular + "," + Constants.GSTRegType_Regular_ECommerce + "," + Constants.GSTRegType_Composition + "," + Constants.GSTRegType_Composition_ECommerce);
        b2bobj = getGSTMissingInvoice(parameter);
        b2bobj.put("typeofinvoice", GSTRConstants.GSTMisMatch_SECTION_GSTINBlank);
        b2bobj.put(Constants.entity, params.optString(Constants.entity, ""));
        GSTR1ExportToExcel.writedatain_MisMatchReportData(wb, b2bobj);

        /**
         * GSTIN non Blank
         */
        parameter = new JSONObject(reqParams, JSONObject.getNames(reqParams));
        parameter.put("typeofinvoice", GSTRConstants.GSTMisMatch_SECTION_GSTINnonBlank);
        parameter.put("isGSTINnull", false);
        parameter.put("registrationType", Constants.GSTRegType_Unregistered + "," + Constants.GSTRegType_Consumer);
        b2bobj = getGSTMissingInvoice(parameter);
        b2bobj.put("typeofinvoice", GSTRConstants.GSTMisMatch_SECTION_GSTINnonBlank);
        b2bobj.put(Constants.entity, params.optString(Constants.entity, ""));
        GSTR1ExportToExcel.writedatain_MisMatchReportData(wb, b2bobj);

        /**
         * Invalid GSTIN
         */
        parameter = new JSONObject(reqParams, JSONObject.getNames(reqParams));
        parameter.put("typeofinvoice", GSTRConstants.GSTMisMatch_SECTION_GSTINInvalid);
        parameter.put("isGSTINnull", false);
        parameter.put("registrationType", Constants.GSTRegType_Regular + "," + Constants.GSTRegType_Regular_ECommerce + "," + Constants.GSTRegType_Composition + "," + Constants.GSTRegType_Composition_ECommerce);
        b2bobj = getGSTMissingInvoice(parameter);
        b2bobj.put("typeofinvoice", GSTRConstants.GSTMisMatch_SECTION_GSTINInvalid);
        b2bobj.put(Constants.entity, params.optString(Constants.entity, ""));
        GSTR1ExportToExcel.writedatain_MisMatchReportData(wb, b2bobj);
        
        /**
         * GST Registration Type blank
         */
        parameter = new JSONObject(reqParams, JSONObject.getNames(reqParams));
        parameter.put("typeofinvoice", GSTRConstants.GSTMisMatch_SECTION_GSTRegistrationTypeblank);
        parameter.put("isgstregtypeblank", true);
        b2bobj = getGSTMissingInvoice(parameter);
        b2bobj.put("typeofinvoice", GSTRConstants.GSTMisMatch_SECTION_GSTRegistrationTypeblank);
        b2bobj.put(Constants.entity, params.optString(Constants.entity, ""));
        GSTR1ExportToExcel.writedatain_MisMatchReportData(wb, b2bobj);

        /**
         * Customer Type blank
         */
        parameter = new JSONObject(reqParams, JSONObject.getNames(reqParams));
        parameter.put("typeofinvoice", GSTRConstants.GSTMisMatch_SECTION_CustomerVendorTypeblank);
        parameter.put("iscusttypeblank", true);
        b2bobj = getGSTMissingInvoice(parameter);
        b2bobj.put("typeofinvoice", GSTRConstants.GSTMisMatch_SECTION_CustomerVendorTypeblank);
        b2bobj.put(Constants.entity, params.optString(Constants.entity, ""));
        GSTR1ExportToExcel.writedatain_MisMatchReportData(wb, b2bobj);

        /**
         * RCM Sales to Unregistered Person
         */
        parameter = new JSONObject(reqParams, JSONObject.getNames(reqParams));
        parameter.put("typeofinvoice", GSTRConstants.GSTMisMatch_SECTION_RCMSalestoUnregisteredPerson);
        parameter.put("registrationType", Constants.GSTRegType_Unregistered + "," + Constants.GSTRegType_Consumer);
        parameter.put("isRCMApplicable", true);
        b2bobj = getGSTMissingInvoice(parameter);
        b2bobj.put("typeofinvoice", GSTRConstants.GSTMisMatch_SECTION_RCMSalestoUnregisteredPerson);
        b2bobj.put(Constants.entity, params.optString(Constants.entity, ""));
        GSTR1ExportToExcel.writedatain_MisMatchReportData(wb, b2bobj);

        /**
         * Product tax Mismatch
         */
        parameter = new JSONObject(reqParams, JSONObject.getNames(reqParams));
        parameter.put("typeofinvoice", GSTRConstants.GSTMisMatch_SECTION_ProducttaxMismatch);
        parameter.put("istaxclassmismatch", true);
        b2bobj = getGSTMissingInvoice(parameter);
        b2bobj.put("typeofinvoice", GSTRConstants.GSTMisMatch_SECTION_ProducttaxMismatch);
        b2bobj.put(Constants.entity, params.optString(Constants.entity, ""));
        GSTR1ExportToExcel.writedatain_MisMatchReportData(wb, b2bobj);

        /**
         * State Mismatch
         */
        parameter = new JSONObject(reqParams, JSONObject.getNames(reqParams));
        parameter.put("typeofinvoice", GSTRConstants.GSTMisMatch_SECTION_StateMismatch);
        parameter.put("statemismatch", true);
        parameter.put("CustomerType", Constants.CUSTVENTYPE_DEEMED_EXPORT + "," + Constants.CUSTVENTYPE_NA + "," + Constants.CUSTVENTYPE_SEZ+ "," + Constants.CUSTVENTYPE_SEZWOPAY);
        b2bobj = getGSTMissingInvoice(parameter);
        b2bobj.put("typeofinvoice", GSTRConstants.GSTMisMatch_SECTION_StateMismatch);
        b2bobj.put(Constants.entity, params.optString(Constants.entity, ""));
        GSTR1ExportToExcel.writedatain_MisMatchReportData(wb, b2bobj);

        /**
         * Manually entered Invoice Number
         */
        parameter = new JSONObject(reqParams, JSONObject.getNames(reqParams));
        parameter.put("typeofinvoice", GSTRConstants.GSTMisMatch_SECTION_ManuallyenteredInvoiceNumber);
        parameter.put("withoutseqformat", true);
        b2bobj = getGSTMissingInvoice(parameter);
        b2bobj.put("typeofinvoice", GSTRConstants.GSTMisMatch_SECTION_ManuallyenteredInvoiceNumber);
        b2bobj.put(Constants.entity, params.optString(Constants.entity, ""));
        GSTR1ExportToExcel.writedatain_MisMatchReportData(wb, b2bobj);
        /**
         * GST-History not present
         */
        parameter.put("typeofinvoice", GSTRConstants.Sec_GST_History_Not_Present);
        parameter.put("ishistoryblank", true);
        b2bobj = getGSTMissingInvoice(parameter);
        b2bobj.put("typeofinvoice", GSTRConstants.Sec_GST_History_Not_Present);
        b2bobj.put(Constants.entity, params.optString(Constants.entity, ""));
        GSTR1ExportToExcel.writedatain_MisMatchReportData(wb, b2bobj);    
        
//        /**
//         * Invalid CN
//         */
//        parameter.put("typeofinvoice", GSTRConstants.GSTMisMatch_SECTION_INVALIDCN);
//        parameter.put("isCNDN", true);
//        parameter.put("isInvoice", false);
//        parameter.put("iscndnwithoutinvoice", true);
//        b2bobj = getGSTMissingInvoice(parameter);
//        b2bobj.put("typeofinvoice", GSTRConstants.GSTMisMatch_SECTION_INVALIDCN);
//        b2bobj.put(Constants.entity, params.optString(Constants.entity, ""));
//        GSTR1ExportToExcel.writedatain_MisMatchReportData(wb, b2bobj);


        return wb;
    }
    
    private GstReturn saveGSTR2JSONData(JSONObject arrParam, String jsonString, String uploadFileName, String companyid) throws JSONException {
        JSONObject gstr2Params = new JSONObject();
        gstr2Params.put(Constants.companyKey, companyid);
        if (arrParam.has(GstReturn.ENTITYID_KEY) && arrParam.get(GstReturn.ENTITYID_KEY) != null) {
            gstr2Params.put(GstReturn.ENTITYID_KEY, (String) arrParam.get(GstReturn.ENTITYID_KEY));
        }
        if (arrParam.has(GstReturn.MONTH_KEY) && arrParam.get(GstReturn.MONTH_KEY) != null) {
            gstr2Params.put(GstReturn.MONTH_KEY, Integer.parseInt((String) arrParam.get(GstReturn.MONTH_KEY)));
        }
        if (arrParam.has(GstReturn.YEAR_KEY) && arrParam.get(GstReturn.YEAR_KEY) != null) {
            gstr2Params.put(GstReturn.YEAR_KEY, Integer.parseInt((String) arrParam.get(GstReturn.YEAR_KEY)));
        }
        gstr2Params.put(GstReturn.GSTR2AJSON_KEY, jsonString);
        gstr2Params.put(Constants.companyKey, companyid);
        gstr2Params.put(GstReturn.UPLOADFILE_KEY, uploadFileName);
        KwlReturnObject gstReturnResult = gstr2Dao.saveGSTR2JSON(gstr2Params);
        return gstReturnResult != null && gstReturnResult.getEntityList() != null && !gstReturnResult.getEntityList().isEmpty() ? (GstReturn) gstReturnResult.getEntityList().get(0) : null;
    }
    
    @Override
    public JSONObject getGSTR2AImportData(JSONObject params) throws ServiceException, JSONException {
        JSONObject object = new JSONObject();
        JSONObject jMeta = new JSONObject();
        JSONArray jarrColumns = new JSONArray();
        JSONArray jarrRecords = new JSONArray();
        JSONArray dataJArr = new JSONArray();
        String start = params.optString("start");
        String limit = params.optString("limit");
        String companyId = params.optString("companyid");
        JSONObject reqParams = params;
        Map<String, JSONObject> importedTransactions = new HashMap<>();
        try {
            Map<String, String> stateCodeAndValueMap = createStateCodeAndValueMap(params);
            String section = params.optString("section");
            switch (section) {
                case "B2B Invoices": {
                    getColumnModelForB2BDetails(jarrRecords, jarrColumns, reqParams);
                    JSONObject dataObject = getGSTR2AInvoiceDetailsFromImportJSON(reqParams, stateCodeAndValueMap, importedTransactions);
                    dataJArr = dataObject.getJSONArray("data");
                    dataJArr = sortJsonForGSTR2A(dataJArr);
                    break;
                }
                case "CDN Invoices": {
                    getColumnModelForCDNRDetails(jarrRecords, jarrColumns, reqParams);
                    JSONObject dataObject = getGSTR2AInvoiceDetailsFromImportJSON(reqParams, stateCodeAndValueMap, importedTransactions);
                    dataJArr = dataObject.getJSONArray("data");
                    break;
                }
            }
            JSONArray pagedJson = new JSONArray();
            pagedJson = dataJArr;
            if (!StringUtil.isNullOrEmpty(start) && !StringUtil.isNullOrEmpty(limit)) {
                pagedJson = StringUtil.getPagedJSON(pagedJson, Integer.parseInt(start), Integer.parseInt(limit));
            }
            object.put("totalCount", dataJArr.length());
            object.put("columns", jarrColumns);
            object.put("coldata", pagedJson);
            jMeta.put("totalProperty", "totalCount");
            jMeta.put("root", "coldata");
            jMeta.put("fields", jarrRecords);
            object.put("metaData", jMeta);
            if (params.optBoolean("isExport")) {
                object.put("data", dataJArr);
                object.put("columns", jarrColumns);
            }

        } catch (JSONException ex) {
            throw ServiceException.FAILURE(ex.getMessage(), ex);
        }
        return object;
    }
    
    @Override
    public GstReturn uploadGSTR2JSONData(JSONObject params, List fileItems) throws JSONException, ServiceException, AccountingException {
        GstReturn gstReturn = null;
        try {
            String fileName, Ext, uploadFileName;
            DiskFileUpload fu = (DiskFileUpload) params.get("diskFileUpload");
            FileItem fi = null;
            String companyid = params.optString(Constants.companyKey);
            JSONObject arrParam = (JSONObject) params.get("arrParam");
            String storePath = StorageHandler.GetDocStorePath();
            File destDir = new File(storePath + GstReturn.FILE_UPLOAD_DIRECTORY);
            if (!destDir.exists()) {
                destDir.mkdirs();
            }
            File uploadFile = null;
            fu = new DiskFileUpload();
            fu.setSizeMax(-1);
            fu.setSizeThreshold(4096);
            fu.setRepositoryPath(storePath);
            for (Iterator i = fileItems.iterator(); i.hasNext();) {
                fi = (FileItem) i.next();
                if (!fi.isFormField()) {
                    if (fi.getSize() != 0) {
                        Ext = "";
                        uploadFileName = UUID.randomUUID().toString();
                        fileName = new String(fi.getName().getBytes(), "UTF8");
                        if (fileName.contains(".")) {
                            Ext = fileName.substring(fileName.lastIndexOf("."));
                        }
                        if (Ext.equalsIgnoreCase(".json")) {
                            uploadFile = new File(storePath + GstReturn.FILE_UPLOAD_DIRECTORY + File.separator + uploadFileName + Ext);
                            fi.write(uploadFile);

                            File file = new File(storePath + GstReturn.FILE_UPLOAD_DIRECTORY + File.separator + uploadFileName + Ext);
                            if (file.exists()) {
                                BufferedReader br = new BufferedReader(new InputStreamReader((new FileInputStream(file))));
                                StringBuilder jsonString = new StringBuilder();
                                String record = "";
                                while ((record = br.readLine()) != null) {
                                    jsonString.append(record);
                                }
                                saveGSTR2JSONData(arrParam, jsonString.toString(), uploadFileName, companyid);
                            }
                        } else if (Ext.equalsIgnoreCase(".zip")) {
                            uploadFile = new File(storePath + GstReturn.FILE_UPLOAD_DIRECTORY + File.separator + fileName);
                            fi.write(uploadFile);
                            ZipInputStream zin = new ZipInputStream(new FileInputStream(uploadFile));
                            ZipEntry entry;
                            byte[] buffer = new byte[1024 * 1024];
                            while ((entry = zin.getNextEntry()) != null) {
                                File newFile = new File(storePath + GstReturn.FILE_UPLOAD_DIRECTORY + File.separator + entry.getName());
                                FileOutputStream fos = new FileOutputStream(newFile);
                                int len;
                                while ((len = zin.read(buffer)) > 0) {
                                    fos.write(buffer, 0, len);
                                }
                                fos.close();
                                BufferedReader br = new BufferedReader(new InputStreamReader((new FileInputStream(newFile))));
                                StringBuilder jsonString = new StringBuilder();
                                String record = "";
                                while ((record = br.readLine()) != null) {
                                    jsonString.append(record);
                                }
                                saveGSTR2JSONData(arrParam, jsonString.toString(), uploadFileName, companyid);
                                //close this ZipEntry
                                zin.closeEntry();
                                entry = zin.getNextEntry();
                            }
                            zin.close();
                        } else {
                            throw new AccountingException("File not uploaded! Please provide valid file format.");
                        }
                    } else {
                        throw new AccountingException("File not uploaded! File should not be empty.");
                    }
                }
            }
        } catch (AccountingException ex) {
            Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
            throw new AccountingException(ex.getMessage());
        } catch (Exception ex) {
            Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
            throw new AccountingException("File not uploaded! File should not be empty.");
        }
        return gstReturn;
    }

    private JSONObject getGSTR2AInvoiceDetailsFromImportJSON(JSONObject params, Map<String, String> stateCodeAndValueMap, Map<String, JSONObject> importedTransactions) throws ServiceException, JSONException {
        JSONObject dataObject = new JSONObject();
        try {
            DateFormat df = new SimpleDateFormat("yyyy-MM-dd");
            JSONArray dataArr = new JSONArray();
            KwlReturnObject result = gstr2Dao.getImportedGSTR2AData(params);
            if (result != null && result.getEntityList() != null && !result.getEntityList().isEmpty()) {
                GstReturn gstReturn = (GstReturn) result.getEntityList().get(0);
                if (gstReturn != null) {
                    JSONObject gstr2aImportedJSON = new JSONObject(gstReturn.getGstr2a());
                    if (params.optString("section").equals("B2B Invoices") && gstr2aImportedJSON.has("b2b")) {
                        JSONArray b2bJSONArray = gstr2aImportedJSON.getJSONArray("b2b");
                        for (int i = 0; i < b2bJSONArray.length(); i++) {
                            JSONObject invoiceObject = b2bJSONArray.getJSONObject(i);
                            if (invoiceObject.has("inv")) {
                                JSONArray invoiceArr = invoiceObject.getJSONArray("inv");
                                for (int j = 0; j < invoiceArr.length(); j++) {
                                    JSONObject invoice = invoiceArr.getJSONObject(j);
                                    double cess = 0.0;
                                    double taxableAmtInv = 0.0, totalTax = 0.0;
                                    int count = 1;
                                    if (invoice.has("itms")) {
                                        JSONArray itmsArray = invoice.getJSONArray("itms");
                                        for (int k = 0; k < itmsArray.length(); k++) {
                                            JSONObject itms_d = itmsArray.getJSONObject(k);
                                            if (itms_d.has("itm_det")) {
                                                JSONObject invoice_dt = itms_d.getJSONObject("itm_det");
                                                Double cgst = invoice_dt.optDouble("camt", 0.0);
                                                Double sgst = invoice_dt.optDouble("samt", 0.0);
                                                Double igst = invoice_dt.optDouble("iamt", 0.0);
                                                Double csgst = invoice_dt.optDouble("csamt", 0.0);
                                                cess += csgst;
                                                if (invoice_dt.optDouble("rt", 0.0) != 0.0) {
                                                    taxableAmtInv += invoice_dt.optDouble("txval", 0.0);
                                                    totalTax += (cgst + sgst + igst + csgst);
                                                }
                                            }
                                        }
                                    }
                                    JSONObject columnData = new JSONObject();
                                    columnData.put("taxableAmt", authHandler.formattedAmount(taxableAmtInv, params.optString(Constants.companyKey)));
                                    columnData.put("totalTax", authHandler.formattedAmount(totalTax, params.optString(Constants.companyKey)));
                                    columnData.put("totalAmt", authHandler.formattedAmount(invoice.optDouble("val", 0.0), params.optString(Constants.companyKey)));
                                    try {
                                        Date idt = new SimpleDateFormat("dd-MM-yyyy").parse(invoice.optString("idt"));
                                        columnData.put("date", df.format(idt));
                                    } catch (ParseException | JSONException ex) {
                                        columnData.put("date", invoice.optString("idt"));
                                    }
                                    columnData.put("invNum", invoice.optString("inum"));
                                    columnData.put("supplierinvoiceno", invoice.optString("inum"));
                                    columnData.put("cess", authHandler.formattedAmount(cess, params.optString(Constants.companyKey)));
                                    columnData.put("gstin", invoiceObject.optString("ctin"));
                                    columnData.put("placeofsupply", stateCodeAndValueMap.containsKey(invoice.optString("pos")) ? stateCodeAndValueMap.get(invoice.optString("pos")) : "");
                                    if (params.has("isGSTR2AComparisonWindow") && params.optBoolean("isGSTR2AComparisonWindow", false)) {
                                        try {
                                            JSONObject json = new JSONObject();
                                            json.put("supplierInvoiceNo", invoice.optString("inum"));
                                            Date idt = new SimpleDateFormat("dd-MM-yyyy").parse(invoice.optString("idt"));
                                            String billdate = df.format(idt);
                                            json.put("creationDate", df.parse(billdate));
                                            json.put("transactionJson", invoice.toString());
                                            json.put("gstRegNumber", invoiceObject.optString("ctin"));
                                            json.put("companyid", params.optString(Constants.companyKey));
                                            json.put("type", GSTR2Submission.B2B);
                                            if (params.has("month")) {
                                                json.put("month", params.optInt("month", 0));
                                            }
                                            if (params.has("year")) {
                                                json.put("year", params.optInt("year", 0));
                                            }
                                            json.put("systemTransaction", false);
                                            json.put("entityid", params.optString("entityid", ""));
                                            GSTR2Submission gstr2Submission = accEntityGstDao.saveOrGetGSTR2Submission(json);
                                            columnData.put("gstrsubmissionid", gstr2Submission.getID());
                                            columnData.put("submissionstatus", GSTR2Submission.getSubmissionStatus(gstr2Submission.getFlag()));
                                        } catch (Exception ex) {
                                            Logger.getLogger(GSTR2DeskeraServiceImpl.class.getName()).log(Level.WARNING, ex.getMessage());
                                        }
                                    }
                                    dataArr.put(columnData);
                                    importedTransactions.put(invoiceObject.optString("ctin") + GSTRConstants.separator + invoice.optString("inum"), columnData);
                                }
                            }
                        }
                    } else if (params.optString("section").equals("CDN Invoices") && gstr2aImportedJSON.has("cdn")) {
                        JSONArray cdnJSONArray = gstr2aImportedJSON.getJSONArray("cdn");
                        for (int i = 0; i < cdnJSONArray.length(); i++) {
                            JSONObject invoiceObject = cdnJSONArray.getJSONObject(i);
                            JSONArray invArr = invoiceObject.optJSONArray("nt");
                            for (int idx = 0; idx < invArr.length(); idx++) {
                                double taxableAmtInv = 0.0;
                                double totalTax = 0.0;
                                double cess = 0.0;
                                JSONObject columnData = new JSONObject();
                                JSONObject invoice = invArr.optJSONObject(idx);
                                JSONArray itmsArr = invoice.optJSONArray("itms");
                                for (int k = 0; k < itmsArr.length(); k++) {
                                    JSONObject itmsDetail = itmsArr.optJSONObject(k);
                                    JSONObject ItmsDetail = itmsDetail.optJSONObject("itm_det");
                                    Double cgst = ItmsDetail.optDouble("camt",0.0);
                                    Double sgst = ItmsDetail.optDouble("samt",0.0);
                                    Double igst = ItmsDetail.optDouble("iamt",0.0);
                                    Double csgst = ItmsDetail.optDouble("csamt",0.0);
                                    cess += csgst;
                                    totalTax += (cgst + sgst + igst + csgst);
                                    taxableAmtInv += ItmsDetail.optDouble("txval",0.0);
                                }
                                columnData.put("taxableAmt", authHandler.formattedAmount(taxableAmtInv,params.optString(Constants.companyKey)));
                                columnData.put("totalTax", authHandler.formattedAmount(totalTax, params.optString(Constants.companyKey)));
                                columnData.put("totalAmt", authHandler.formattedAmount(invoice.optDouble("val"),params.optString(Constants.companyKey)));
                                try {
                                    Date idt = new SimpleDateFormat("dd-MM-yyyy").parse(invoice.optString("nt_dt"));
                                    columnData.put("date", df.format(idt));
                                } catch (Exception ex) {
                                    columnData.put("date", invoice.optString("nt_dt"));
                                }
                                columnData.put("invNum", invoice.optString("nt_num"));
//                                columnData.put("invoicetype", invType);
                                columnData.put("cess", authHandler.formattedAmount(cess,params.optString(Constants.companyKey)));
                                columnData.put("gstin", invoiceObject.optString("ctin"));
                                columnData.put("placeofsupply", stateCodeAndValueMap.containsKey(invoice.optString("pos","")) ? stateCodeAndValueMap.get(invoice.optString("pos")) : "");
//                                columnData.put("originalinvoicedate", originalDate);
//                                columnData.put("originalinvoiceno", originalInvNum);
                                columnData.put("rsn", invoice.optString("p_gst"));
                                if (params.has("isGSTR2AComparisonWindow") && params.optBoolean("isGSTR2AComparisonWindow", false)) {
                                    try {
                                        JSONObject json = new JSONObject();
                                        json.put("supplierInvoiceNo", invoice.optString("nt_num"));
                                        Date idt = new SimpleDateFormat("dd-MM-yyyy").parse(invoice.optString("nt_dt"));
                                        String billdate = df.format(idt);
                                        json.put("creationDate", df.parse(billdate));
                                        json.put("transactionJson", invoice.toString());
                                        json.put("gstRegNumber", invoiceObject.optString("ctin"));
                                        json.put("type", GSTR2Submission.CDNR);
                                        json.put("companyid", params.optString(Constants.companyKey));
                                        if (params.has("month")) {
                                            json.put("month", params.optInt("month", 0));
                                        }
                                        if (params.has("year")) {
                                            json.put("year", params.optInt("year", 0));
                                        }
                                        json.put("systemTransaction", false);
                                        json.put("entityid", params.optString("entityid", ""));
                                        GSTR2Submission gstr2Submission = accEntityGstDao.saveOrGetGSTR2Submission(json);
                                        columnData.put("gstrsubmissionid", gstr2Submission.getID());
                                        columnData.put("submissionstatus", GSTR2Submission.getSubmissionStatus(gstr2Submission.getFlag()));
                                    } catch (Exception ex) {
                                        Logger.getLogger(GSTR2DeskeraServiceImpl.class.getName()).log(Level.WARNING, ex.getMessage());
                                    }
                                }
                                importedTransactions.put(invoiceObject.optString("ctin") + GSTRConstants.separator + invoice.optString("nt_num"), columnData);
                                dataArr.put(columnData);
                            }
                        }
                    }
                }
            }
            dataObject.put("data", dataArr);
        } catch (Exception ex) {
            throw ServiceException.FAILURE(ex.getMessage(), ex);
        }
        return dataObject;
    }
    private Map<String, String> createStateCodeAndValueMap(JSONObject params) throws JSONException {
        Map<String, String> stateCodeAndValueMap = new HashMap<>();
        JSONObject reqParams = new JSONObject();
        reqParams.put(Constants.companyKey, params.optString(Constants.companyKey));
        reqParams.put(Constants.moduleid, Constants.Acc_Vendor_Invoice_ModuleId);
        reqParams.put(Constants.fieldlabel, Constants.STATE);
        KwlReturnObject result = fieldManagerDAOobj.getFieldComboDescAndValue(reqParams);
        if (result != null && result.getEntityList() != null && !result.getEntityList().isEmpty()) {
            List list = result.getEntityList();
            for (Object object : list) {
                Object[] objArr = (Object[]) object;
                String itemDescription = (String) objArr[0];
                String itemValue = (String) objArr[1];
                if (params.optBoolean("ValueCodeMap", false)) {
                    stateCodeAndValueMap.put(itemValue, itemDescription);
                } else {
                    stateCodeAndValueMap.put(itemDescription, itemValue);
                }
            }
        }
        return stateCodeAndValueMap;
    }

    @Override
    public JSONObject getGSTR2AComparisonData(JSONObject params) throws ServiceException, JSONException {
        JSONObject json = new JSONObject();
        try {       
            JSONObject jMeta = new JSONObject();
            JSONArray jarrColumns = new JSONArray();
            JSONArray jarrRecords = new JSONArray();
            JSONArray dataJArr = new JSONArray();
            String start = params.optString("start");
            String limit = params.optString("limit");
            Map<String, String> stateCodeAndValueMap = createStateCodeAndValueMap(params);
            String section = params.optString("section");
            Map<String, JSONObject> importedTransactions = new HashMap<>();
            Map<String, JSONObject> systemTransactions = new HashMap<>();
            String companyId = params.optString(Constants.companyKey);
            JSONObject reqParams = params;
            /* * before starting sectional data need to get column no for Product Tax
             * Class (HSN)
             */
            int colnum = 0;
            HashMap fieldparams = new HashMap<>();
            fieldparams.put(Constants.filter_names, Arrays.asList(Constants.companyid, Constants.moduleid, "fieldname"));
            fieldparams.put(Constants.filter_values, Arrays.asList(companyId, Constants.Acc_Product_Master_ModuleId, "Custom_" + Constants.HSN_SACCODE));

            KwlReturnObject kwlReturnObjectGstCust = fieldManagerDAOobj.getFieldParams(fieldparams);
            List<FieldParams> fieldParamses = kwlReturnObjectGstCust.getEntityList();
            for (FieldParams fieldParams : fieldParamses) {
                colnum = fieldParams.getColnum();
            }
            reqParams.put("hsncolnum", colnum);
            fieldparams.put(Constants.filter_names, Arrays.asList(Constants.companyid, Constants.moduleid, "fieldname"));
            fieldparams.put(Constants.filter_values, Arrays.asList(companyId, Constants.Acc_Product_Master_ModuleId, "Custom_" + Constants.GSTProdCategory));
            kwlReturnObjectGstCust = fieldManagerDAOobj.getFieldParams(fieldparams);
            fieldParamses = kwlReturnObjectGstCust.getEntityList();
            for (FieldParams fieldParams : fieldParamses) {
                colnum = fieldParams.getColnum();
            }
            params.put("taxclasscolnum", colnum);
            /**
             * get State column no for Invoice module
             */
            int colnumforstate = fieldManagerDAOobj.getColumnFromFieldParams(Constants.STATE, companyId, Constants.Acc_Vendor_Invoice_ModuleId, 0);
            params.put("statecolnum", colnumforstate);

            /**
             * Get Local state Value
             */
            String entityId = params.optString("entityid");
            params.put("companyid", companyId);
            params.put("entityid", entityId);
            String localState = fieldManagerDAOobj.getStateForEntity(params);
            params.put("localState", localState);
            /**
             * Get Entity Value and its column no for invoice
             */
            fieldparams.put(Constants.filter_names, Arrays.asList(Constants.companyid, Constants.moduleid, "fieldname"));
            fieldparams.put(Constants.filter_values, Arrays.asList(companyId, Constants.Acc_Vendor_Invoice_ModuleId, "Custom_" + Constants.ENTITY));
            String fieldid = "";
            kwlReturnObjectGstCust = fieldManagerDAOobj.getFieldParams(fieldparams);
            fieldParamses = kwlReturnObjectGstCust.getEntityList();
            for (FieldParams fieldParams : fieldParamses) {
                colnum = fieldParams.getColnum();
                fieldid = fieldParams.getId();
            }
            String entityValue = params.optString("entity");
            String ids = fieldManagerDAOobj.getIdsUsingParamsValueWithoutInsert(fieldid, entityValue);
            reqParams.put("entitycolnum", colnum);
            reqParams.put("entityValue", ids);
             /**
             * Put Asset Disposal/ Acquire Invoice Dimension column number
             * details
             */
            putAssetInvoiceDimensionColumnDetails(params, reqParams);
            /**
             * Put Lease Sales Invoice Dimension column number details
             */
            putLeaseInvoiceDimensionColumnDetails(params, reqParams);
            switch (section) {
                case "B2B Invoices": {
                    getColumnModelForB2BDetails(jarrRecords, jarrColumns, reqParams);
                    getGSTR2AInvoiceDetailsFromImportJSON(reqParams, stateCodeAndValueMap,importedTransactions);
                    JSONObject parameters = new JSONObject(reqParams, JSONObject.getNames(reqParams));
                    parameters.put("registrationType", Constants.GSTRegType_Regular + "," + Constants.GSTRegType_Regular_ECommerce);
                    parameters.put("CustomerType", Constants.CUSTVENTYPE_NA + "," + Constants.CUSTVENTYPE_DEEMED_EXPORT + "," + Constants.CUSTVENTYPE_SEZ);
                    parameters.put("taxClassType", FieldComboData.TaxClass_Percenatge);
                    parameters.put("zerorated", false);
                    parameters.put("typeofinvoice", "B2B Invoices");
                    parameters.put("isPurchase", true);
                    getB2BInvoiceDetails(parameters,  systemTransactions);
                    dataJArr = prepareB2BGSTR2AJSON(systemTransactions, importedTransactions, params);
                    dataJArr = sortJsonForGSTR2A(dataJArr);
                    break;
                }
                case "CDN Invoices": {
                    getColumnModelForCDNRDetails(jarrRecords, jarrColumns, reqParams);
                    getGSTR2AInvoiceDetailsFromImportJSON(reqParams, stateCodeAndValueMap, importedTransactions);
                    /**
                     * Get Entity Value and its column no for Receipt
                     */
                    fieldparams.put(Constants.filter_names, Arrays.asList(Constants.companyid, Constants.moduleid, "fieldname"));
                    fieldparams.put(Constants.filter_values, Arrays.asList(companyId, Constants.Acc_Debit_Note_ModuleId, "Custom_" + Constants.ENTITY));
                    kwlReturnObjectGstCust = fieldManagerDAOobj.getFieldParams(fieldparams);
                    fieldParamses = kwlReturnObjectGstCust.getEntityList();
                    for (FieldParams fieldParams : fieldParamses) {
                        colnum = fieldParams.getColnum();
                        fieldid = fieldParams.getId();
                    }
                    ids = fieldManagerDAOobj.getIdsUsingParamsValueWithoutInsert(fieldid, entityValue);
                    reqParams.put("entitycolnum", colnum);
                    reqParams.put("entityValue", ids);
                    reqParams.put("registrationType", Constants.GSTRegType_Regular + "," + Constants.GSTRegType_Regular_ECommerce);
                    reqParams.put("typeofinvoice", "Purchase from Composition Dealer");
                    reqParams.put("isPurchase", true);
                    getCDNRInvoiceDetails(reqParams, systemTransactions);
                    dataJArr = prepareB2BGSTR2AJSON(systemTransactions, importedTransactions, params);
                    break;
                }
            }
            JSONArray pagedJson = new JSONArray();
            pagedJson = dataJArr;
            if (!StringUtil.isNullOrEmpty(start) && !StringUtil.isNullOrEmpty(limit)) {
                pagedJson = StringUtil.getPagedJSON(pagedJson, Integer.parseInt(start), Integer.parseInt(limit));
            }
            json.put("totalCount", dataJArr.length());
            json.put("columns", jarrColumns);
            json.put("coldata", pagedJson);
            jMeta.put("totalProperty", "totalCount");
            jMeta.put("root", "coldata");
            jMeta.put("fields", jarrRecords);
            json.put("metaData", jMeta);
            if (params.optBoolean("isExport")) {
                json.put("data", dataJArr);
                json.put("columns", jarrColumns);
            }

        } catch (Exception ex) {
            Logger.getLogger(AccEntityGstServiceImpl.class.getName()).log(Level.WARNING, ex.getMessage());
        }
        return json;
    }
    private JSONArray prepareB2BGSTR2AJSON(Map<String, JSONObject> systemTransactions, Map<String, JSONObject> importedTransactions, JSONObject params) throws JSONException {
        JSONArray dataArr = new JSONArray();
        int comparisonFilter = params.optInt("comparisonfilter", 0);
        for (Map.Entry<String, JSONObject> entry : systemTransactions.entrySet()) {
            String key = entry.getKey();
            JSONObject transactionJSON = entry.getValue();
            if (!importedTransactions.containsKey(key) ) {
                if (comparisonFilter == GSTRConstants.Comparison_ALL || comparisonFilter == GSTRConstants.Comparison_PRESENT_IN_SYSTEM) {
                    transactionJSON.put("status", "Missing In GST Portal");
                    transactionJSON.put("comments", "Missing In GST Portal");
                    transactionJSON.put("system_gstrsubmissionid", transactionJSON.optString("gstrsubmissionid", ""));
                    dataArr.put(transactionJSON);
                }
            } else {
                JSONObject importedJSON = importedTransactions.get(key);
                if (params.optString("section", "").equalsIgnoreCase("B2B Invoices")) {
                    if (importedJSON.optString("invNum", "").equalsIgnoreCase(transactionJSON.optString(GSTRConstants.supplierinvoiceno, ""))
                            && importedJSON.optDouble("taxableAmt", 0.0) == transactionJSON.optDouble("taxableAmt", 0.0)
                            && importedJSON.optDouble("totalAmt", 0.0) == transactionJSON.optDouble("totalAmt", 0.0)
                            && importedJSON.optDouble("cess", 0.0) == transactionJSON.optDouble("cess", 0.0)
                            && importedJSON.optDouble("totalTax", 0.0) == transactionJSON.optDouble("totalTax", 0.0)) {
                        if ((comparisonFilter == GSTRConstants.Comparison_ALL || comparisonFilter == GSTRConstants.Comparison_MATCHED)) {
                            transactionJSON.put("status", "Matched");
                            transactionJSON.put("comments", "Matched");
                            transactionJSON.put("system_gstrsubmissionid", transactionJSON.optString("gstrsubmissionid", ""));
                            transactionJSON.put("import_gstrsubmissionid", importedJSON.optString("gstrsubmissionid", ""));
                            dataArr.put(transactionJSON);
                        }
                    } else if (comparisonFilter == GSTRConstants.Comparison_ALL || comparisonFilter == GSTRConstants.Comparison_NOT_MATCHED) {
                        transactionJSON.put("gtaxableAmt", importedJSON.optDouble("taxableAmt", 0.0));
                        transactionJSON.put("gtotalAmt", importedJSON.optDouble("totalAmt", 0.0));
                        transactionJSON.put("gtotalTax", importedJSON.optDouble("totalTax", 0.0));
                        transactionJSON.put("gcess", importedJSON.optDouble("cess", 0.0));
                        transactionJSON.put("status", "Not Matched");
                        StringBuilder comments = new StringBuilder();
                        if (importedJSON.optDouble("taxableAmt", 0.0) != transactionJSON.optDouble("taxableAmt", 0.0)) {
                            comments.append("Taxable Amount is not matching- GST Portal Value: ").append(importedJSON.optDouble("taxableAmt", 0.0)).append(" and Deskera Value: ").append(transactionJSON.optDouble("taxableAmt", 0.0)).append(", Difference(GST Portal - Deskera's Figure): ").append(authHandler.round(importedJSON.optDouble("taxableAmt", 0.0) - transactionJSON.optDouble("taxableAmt", 0.0),params.optString(Constants.companyKey)));
                        }
                        if (importedJSON.optDouble("totalAmt", 0.0) != transactionJSON.optDouble("totalAmt", 0.0)) {
                            if (comments.length() > 0) {
                                comments.append(".");
                            }
                            comments.append("Total Amount is not matching- GST Portal Value: ").append(importedJSON.optDouble("totalAmt", 0.0)).append(" and Deskera Value: ").append(transactionJSON.optDouble("totalAmt", 0.0)).append(", Difference(GST Portal - Deskera's Figure): ").append(authHandler.round(importedJSON.optDouble("totalAmt", 0.0) - transactionJSON.optDouble("totalAmt", 0.0),params.optString(Constants.companyKey)));
                        }
                        if (importedJSON.optDouble("totalTax", 0.0) != transactionJSON.optDouble("totalTax", 0.0)) {
                            if (comments.length() > 0) {
                                comments.append(".");
                            }
                            comments.append("Total Tax is not matching- GST Portal Value: ").append(importedJSON.optDouble("totalTax", 0.0)).append(" and Deskera Value: ").append(transactionJSON.optDouble("totalTax", 0.0)).append(", Difference(GST Portal - Deskera's Figure): ").append(authHandler.round(importedJSON.optDouble("totalTax", 0.0) - transactionJSON.optDouble("totalTax", 0.0),params.optString(Constants.companyKey)));
                        }
                        if (importedJSON.optDouble("cess", 0.0) != transactionJSON.optDouble("cess", 0.0)) {
                            if (comments.length() > 0) {
                                comments.append(".");
                            }
                            comments.append("Cess is not matching- GST Portal Value: ").append(importedJSON.optDouble("cess", 0.0)).append(" and Deskera Value: ").append(transactionJSON.optDouble("cess", 0.0)).append(", Difference(GST Portal - Deskera's Figure): ").append(authHandler.round(importedJSON.optDouble("cess", 0.0) - transactionJSON.optDouble("cess", 0.0),params.optString(Constants.companyKey)));
                        }
                        transactionJSON.put("comments", comments.toString());
                        transactionJSON.put("system_gstrsubmissionid", transactionJSON.optString("gstrsubmissionid", ""));
                        transactionJSON.put("import_gstrsubmissionid", importedJSON.optString("gstrsubmissionid", ""));
                        dataArr.put(transactionJSON);
                    }
                } else {
                    if (importedJSON.optString("invNum", "").equalsIgnoreCase(transactionJSON.optString("invNum", ""))
                            && importedJSON.optDouble("taxableAmt", 0.0) == transactionJSON.optDouble("taxableAmt", 0.0)
                            && importedJSON.optDouble("totalAmt", 0.0) == transactionJSON.optDouble("totalAmt", 0.0)
                            && importedJSON.optDouble("cess", 0.0) == transactionJSON.optDouble("cess", 0.0)
                            && importedJSON.optDouble("totalTax", 0.0) == transactionJSON.optDouble("totalTax", 0.0)) {
                        if (comparisonFilter == GSTRConstants.Comparison_ALL || comparisonFilter == GSTRConstants.Comparison_MATCHED) {
                            transactionJSON.put("status", "Matched");
                            transactionJSON.put("comments", "Matched");
                            transactionJSON.put("system_gstrsubmissionid", transactionJSON.optString("gstrsubmissionid", ""));
                            transactionJSON.put("import_gstrsubmissionid", importedJSON.optString("gstrsubmissionid", ""));
                            dataArr.put(transactionJSON);
                        }
                    } else if (comparisonFilter == GSTRConstants.Comparison_ALL || comparisonFilter == GSTRConstants.Comparison_NOT_MATCHED) {
                        transactionJSON.put("status", "Not Matched");
                        transactionJSON.put("gtaxableAmt", importedJSON.optDouble("taxableAmt", 0.0));
                        transactionJSON.put("gtotalAmt", importedJSON.optDouble("totalAmt", 0.0));
                        transactionJSON.put("gtotalTax", importedJSON.optDouble("totalTax", 0.0));
                        transactionJSON.put("gcess", importedJSON.optDouble("cess", 0.0));
                        StringBuilder comments = new StringBuilder();
                        if (importedJSON.optDouble("taxableAmt", 0.0) != transactionJSON.optDouble("taxableAmt", 0.0)) {
                            comments.append("Taxable Amount is not matching- GST Portal Value: ").append(importedJSON.optDouble("taxableAmt", 0.0)).append(" and Deskera Value: ").append(transactionJSON.optDouble("taxableAmt", 0.0)).append(", Difference(GST Portal - Deskera's Figure): ").append(authHandler.round(importedJSON.optDouble("taxableAmt", 0.0) - transactionJSON.optDouble("taxableAmt", 0.0),params.optString(Constants.companyKey)));
                        }
                        if (importedJSON.optDouble("totalAmt", 0.0) != transactionJSON.optDouble("totalAmt", 0.0)) {
                            if (comments.length() > 0) {
                                comments.append(".");
                            }
                            comments.append("Total Amount is not matching- GST Portal Value: ").append(importedJSON.optDouble("totalAmt", 0.0)).append(" and Deskera Value: ").append(transactionJSON.optDouble("totalAmt", 0.0)).append(", Difference(GST Portal - Deskera's Figure): ").append(authHandler.round(importedJSON.optDouble("totalAmt", 0.0) - transactionJSON.optDouble("totalAmt", 0.0),params.optString(Constants.companyKey)));
                        }
                        if (importedJSON.optDouble("totalTax", 0.0) != transactionJSON.optDouble("totalTax", 0.0)) {
                            if (comments.length() > 0) {
                                comments.append(".");
                            }
                            comments.append("Total Tax is not matching- GST Portal Value: ").append(importedJSON.optDouble("totalTax", 0.0)).append(" and Deskera Value: ").append(transactionJSON.optDouble("totalTax", 0.0)).append(", Difference(GST Portal - Deskera's Figure): ").append(authHandler.round(importedJSON.optDouble("totalTax", 0.0) - transactionJSON.optDouble("totalTax", 0.0),params.optString(Constants.companyKey)));
                        }
                        if (importedJSON.optDouble("cess", 0.0) != transactionJSON.optDouble("cess", 0.0)) {
                            if (comments.length() > 0) {
                                comments.append(".");
                            }
                            comments.append("Cess is not matching- GST Portal Value: ").append(importedJSON.optDouble("cess", 0.0)).append(" and Deskera Value: ").append(transactionJSON.optDouble("cess", 0.0)).append(", Difference(GST Portal - Deskera's Figure): ").append(authHandler.round(importedJSON.optDouble("cess", 0.0) - transactionJSON.optDouble("cess", 0.0), params.optString(Constants.companyKey)));
                        }
                        transactionJSON.put("comments", comments.toString());
                        transactionJSON.put("system_gstrsubmissionid", transactionJSON.optString("gstrsubmissionid", ""));
                        transactionJSON.put("import_gstrsubmissionid", importedJSON.optString("gstrsubmissionid", ""));
                        dataArr.put(transactionJSON);
                    }
                }
            }
        }
        if ((comparisonFilter == GSTRConstants.Comparison_ALL || comparisonFilter == GSTRConstants.Comparison_PRESENT_IN_IMPORT)) {
            for (Map.Entry<String, JSONObject> entry : importedTransactions.entrySet()) {
                String key = entry.getKey();
                JSONObject importedJSON = entry.getValue();
                if (!systemTransactions.containsKey(key)) {
                    importedJSON.put("status", "Missing In Deskera");
                    importedJSON.put("comments", "Missing In Deskera");
                    importedJSON.put("import_gstrsubmissionid", importedJSON.optString("gstrsubmissionid", ""));
                    dataArr.put(importedJSON);
                }
            }
        }
        return dataArr;
    }
            /**
     *
     * @param array = Array need to be sort
     * @return = return sorted array by date & supplier invoice no. (Ascending).
     * @throws JSONException
     */
    public static JSONArray sortJsonForGSTR2A(JSONArray array) throws JSONException {
        List<JSONObject> jsons = new ArrayList<>();
        try {
            for (int i = 0; i < array.length(); i++) {
                jsons.add(array.getJSONObject(i));
            }
            Collections.sort(jsons, new Comparator<JSONObject>() {
                @Override
                public int compare(JSONObject ja, JSONObject jb) {
                    try {
                        DateFormat df = new SimpleDateFormat("yyyy-MM-dd");
                        String s1 = ja.optString("date");
                        String s2 = jb.optString("date");
                        Date date1 = df.parse(s1);
                        Date date2 = df.parse(s2);

                        if (date1.getTime() < date2.getTime()) {
                            return -1;
                        } else if (date1.getTime() > date2.getTime()) {
                            return 1;
                        } else {
                            return ja.optString("supplierinvoiceno", "").compareTo(jb.optString("supplierinvoiceno", ""));
                        }
                    } catch (ParseException ex) {
                        Logger.getLogger(AccEntityGstServiceImpl.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    return 0;
                }
            });

        } catch (JSONException ex) {
            Logger.getLogger(AccEntityGstServiceImpl.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            Logger.getLogger(AccEntityGstServiceImpl.class.getName()).log(Level.SEVERE, null, ex);
        }
        return new JSONArray(jsons);
    }
    
    /**
     *
     * @param params
     * @return
     * @throws ServiceException
     * @throws JSONException
     * @throws com.krawler.hql.accounting.AccountingException
     */
    @Override
    @Transactional(propagation = Propagation.REQUIRED, rollbackFor = {SessionExpiredException.class, AccountingException.class, ServiceException.class, JSONException.class})
    public JSONObject updateGSTR2TransactionFlag(JSONObject params) throws ServiceException, JSONException, AccountingException {
        JSONObject json = new JSONObject();
        try {
            if (!StringUtil.isNullOrEmpty(params.optString("jsonString"))) {
                JSONArray selectedArr = new JSONArray("[" + params.optString("jsonString") + "]");
                params.put("ValueCodeMap", true);
                Map<String, String> stateValueAndCodeMap = createStateCodeAndValueMap(params);
                for (int idx = 0; idx < selectedArr.length(); idx++) {
                    JSONObject recordJSON = selectedArr.getJSONObject(idx);
                    prepareJSONForGSTNPortal(params, recordJSON,stateValueAndCodeMap);
                }
            }
        } catch (Exception ex) {
            Logger.getLogger(AccEntityGstServiceImpl.class.getName()).log(Level.WARNING, ex.getMessage());
            throw new AccountingException(ex.getMessage());
        } 
        return json;
    }
    
    private boolean prepareJSONForGSTNPortal(JSONObject params, JSONObject record, Map<String, String> stateValueAndCodeMap) throws ServiceException, JSONException, ParseException {
        boolean success = false;
        String import_gstrsubmissionid = record.optString("import_gstrsubmissionid", null);
        String system_gstrsubmissionid = record.optString("system_gstrsubmissionid", null);
        DateFormat yyyyMMdd = new SimpleDateFormat("yyyy-MM-dd");
        DateFormat ddMMYYYY = new SimpleDateFormat("dd-MM-yyyy");
        if (params.optString("updateFlag").equals(GSTR2Submission.ACCEPT)) {
            GSTR2Submission importTransaction = (GSTR2Submission) kwlCommonTablesDAOObj.getClassObject(GSTR2Submission.class.getName(), import_gstrsubmissionid);
            GSTR2Submission systemTransaction = (GSTR2Submission) kwlCommonTablesDAOObj.getClassObject(GSTR2Submission.class.getName(), system_gstrsubmissionid);
            if (importTransaction != null && systemTransaction != null) {
                JSONObject json = new JSONObject(importTransaction.getTransactionJson());
                json.put("flag", params.optString("updateFlag"));
                json.put("updby", "S");
                json.put("cflag", "A");
                if (json.has("itms")) {
                    JSONArray itmsArray = json.getJSONArray("itms");
                    JSONArray itmsArr = new JSONArray();
                    for (int k = 0; k < itmsArray.length(); k++) {
                        JSONObject itms_d = itmsArray.getJSONObject(k);
                        if (itms_d.has("itm_det")) {
                            JSONObject invoice_dt = itms_d.getJSONObject("itm_det");
                            Double cgst = invoice_dt.optDouble("camt", 0.0);
                            Double sgst = invoice_dt.optDouble("samt", 0.0);
                            Double igst = invoice_dt.optDouble("iamt", 0.0);
                            Double csgst = invoice_dt.optDouble("csamt", 0.0);
                            JSONObject itc_detail = new JSONObject();
                            itc_detail.put("tx_cs", csgst);
                            itc_detail.put("tx_i", igst);
                            itc_detail.put("tx_c", cgst);
                            itc_detail.put("tx_s", sgst);
                            itc_detail.put("elg", "ip");
                            itms_d.put("itc", itc_detail);
                            itmsArr.put(itms_d);
                        }
                    }
                    json.put("itms", itmsArr);
                }
                importTransaction.setJsonToBeUploaded(json.toString());
                importTransaction.setFlag(params.optString("updateFlag"));
                systemTransaction.setJsonToBeUploaded(json.toString());
                systemTransaction.setFlag(params.optString("updateFlag"));

                success = true;
            }
        } else if (params.optString("updateFlag").equals(GSTR2Submission.PENDING)) {
            GSTR2Submission systemTransaction = (GSTR2Submission) kwlCommonTablesDAOObj.getClassObject(GSTR2Submission.class.getName(), system_gstrsubmissionid);
            if (systemTransaction != null) {
                systemTransaction.setFlag(params.optString("updateFlag"));
                success = true;
            }
        } else if (params.optString("updateFlag").equals(GSTR2Submission.ADD_TO_GSTN)) {
            GSTR2Submission systemTransaction = (GSTR2Submission) kwlCommonTablesDAOObj.getClassObject(GSTR2Submission.class.getName(), system_gstrsubmissionid);
            if (systemTransaction != null) {
                JSONObject json = new JSONObject(systemTransaction.getTransactionJson());
                JSONObject jsonToBeUploaded = new JSONObject();
                if (systemTransaction.getType() == GSTR2Submission.B2B) {
                    jsonToBeUploaded.put("inum", StringUtil.isNullOrEmpty(systemTransaction.getSupplierInvoiceNo()) ? "" : systemTransaction.getSupplierInvoiceNo());
                    if (!StringUtil.isNullOrEmpty(json.optString("idt"))) {
                        jsonToBeUploaded.put("idt", ddMMYYYY.format(yyyyMMdd.parse(json.optString("idt"))));
                    }
                    jsonToBeUploaded.put("val", json.optDouble("val"));
                    jsonToBeUploaded.put("rchrg", "N");
                    jsonToBeUploaded.put("pos", stateValueAndCodeMap.containsKey(json.optString(GSTRConstants.pos, "")) ? stateValueAndCodeMap.get(json.optString(GSTRConstants.pos, "")) : "");
                    jsonToBeUploaded.put("inv_typ", "R");
                    jsonToBeUploaded.put("updby", "R");
                    if (json.has("itms")) {
                        JSONArray itmsArray = json.getJSONArray("itms");
                        JSONArray itmArr = new JSONArray();
                        int count = 1;
                        for (int k = 0; k < itmsArray.length(); k++) {
                            JSONObject itms_d = itmsArray.getJSONObject(k);
                            JSONObject itmJSON = new JSONObject();
                            if (itms_d.has("itm_det")) {
                                JSONObject invoice_dt = itms_d.getJSONObject("itm_det");
                                JSONObject itm_detail = new JSONObject();
                                if (invoice_dt.optDouble("camt", 0.0) != 0.0) {
                                    itm_detail.put("camt", invoice_dt.optDouble("camt", 0.0));
                                }
                                if (invoice_dt.optDouble("samt", 0.0) != 0.0) {
                                    itm_detail.put("samt", invoice_dt.optDouble("samt", 0.0));
                                }
                                if (invoice_dt.optDouble("iamt", 0.0) != 0.0) {
                                    itm_detail.put("iamt", invoice_dt.optDouble("iamt", 0.0));
                                }
                                if (invoice_dt.optDouble("csamt", 0.0) != 0.0) {
                                    itm_detail.put("csamt", invoice_dt.optDouble("csamt", 0.0));
                                }
                                itm_detail.put("rt", invoice_dt.optDouble("rt", 0.0));
                                itm_detail.put("txval", invoice_dt.optDouble("txval", 0.0));

                                JSONObject itc_detail = new JSONObject();
                                itc_detail.put("tx_c", invoice_dt.optDouble("camt", 0.0));
                                itc_detail.put("tx_s", invoice_dt.optDouble("samt", 0.0));
                                itc_detail.put("tx_i", invoice_dt.optDouble("iamt", 0.0));
                                itc_detail.put("tx_cs", invoice_dt.optDouble("csamt", 0.0));
                                itc_detail.put("elg", "ip");
                                itmJSON.put("itc", itc_detail);
                                itmJSON.put("num", count++);
                                itmJSON.put("itm_det", itm_detail);
                                itmArr.put(itmJSON);
                            }
                        }
                        jsonToBeUploaded.put("itms", itmArr);
                    }
                    systemTransaction.setJsonToBeUploaded(jsonToBeUploaded.toString());
                    systemTransaction.setFlag(params.optString("updateFlag"));
                } else if (systemTransaction.getType() == GSTR2Submission.CDNR) {
                    jsonToBeUploaded.put("inum", StringUtil.isNullOrEmpty(json.optString("inum", null)) ? "" : json.optString("inum", ""));
                    jsonToBeUploaded.put("nt_num", StringUtil.isNullOrEmpty(json.optString("nt_num", null)) ? "" : json.optString("nt_num", ""));
                    if (!StringUtil.isNullOrEmpty(json.optString("idt"))) {
                        jsonToBeUploaded.put("idt", ddMMYYYY.format(yyyyMMdd.parse(json.optString("idt"))));
                    }
                    if (!StringUtil.isNullOrEmpty(json.optString("nt_dt"))) {
                        jsonToBeUploaded.put("nt_dt", ddMMYYYY.format(yyyyMMdd.parse(json.optString("nt_dt"))));
                    }
                    jsonToBeUploaded.put("p_gst", json.optString("p_gst", ""));
                    jsonToBeUploaded.put("rsn", json.optString("rsn", ""));
                    jsonToBeUploaded.put("ntty", json.optString("ntty", ""));
                    jsonToBeUploaded.put("val", json.optDouble("val"));
                    jsonToBeUploaded.put("updby", "R");
                    if (json.has("itms")) {
                        JSONArray itmsArray = json.getJSONArray("itms");
                        JSONArray itmArr = new JSONArray();
                        int count = 1;
                        for (int k = 0; k < itmsArray.length(); k++) {
                            JSONObject itms_d = itmsArray.getJSONObject(k);
                            JSONObject itmJSON = new JSONObject();
                            if (itms_d.has("itm_det")) {
                                JSONObject invoice_dt = itms_d.getJSONObject("itm_det");
                                JSONObject itm_detail = new JSONObject();
                                if (invoice_dt.optDouble("camt", 0.0) != 0.0) {
                                    itm_detail.put("camt", invoice_dt.optDouble("camt", 0.0));
                                }
                                if (invoice_dt.optDouble("samt", 0.0) != 0.0) {
                                    itm_detail.put("samt", invoice_dt.optDouble("samt", 0.0));
                                }
                                if (invoice_dt.optDouble("iamt", 0.0) != 0.0) {
                                    itm_detail.put("iamt", invoice_dt.optDouble("iamt", 0.0));
                                }
                                if (invoice_dt.optDouble("csamt", 0.0) != 0.0) {
                                    itm_detail.put("csamt", invoice_dt.optDouble("csamt", 0.0));
                                }
                                itm_detail.put("rt", invoice_dt.optDouble("rt", 0.0));
                                itm_detail.put("txval", invoice_dt.optDouble("txval", 0.0));

                                JSONObject itc_detail = new JSONObject();
                                itc_detail.put("tx_c", invoice_dt.optDouble("camt", 0.0));
                                itc_detail.put("tx_s", invoice_dt.optDouble("samt", 0.0));
                                itc_detail.put("tx_i", invoice_dt.optDouble("iamt", 0.0));
                                itc_detail.put("tx_cs", invoice_dt.optDouble("csamt", 0.0));
                                itc_detail.put("elg", "ip");
                                itmJSON.put("itc", itc_detail);
                                itmJSON.put("num", count++);
                                itmJSON.put("itm_det", itm_detail);
                                itmArr.put(itmJSON);
                            }
                        }
                        jsonToBeUploaded.put("itms", itmArr);
                    }
                    systemTransaction.setJsonToBeUploaded(jsonToBeUploaded.toString());
                    systemTransaction.setFlag(params.optString("updateFlag"));
                }
                success = true;
            }
        } else if (params.optString("updateFlag").equals(GSTR2Submission.MODIFIED)) {
            GSTR2Submission importTransaction = (GSTR2Submission) kwlCommonTablesDAOObj.getClassObject(GSTR2Submission.class.getName(), import_gstrsubmissionid);
            GSTR2Submission systemTransaction = (GSTR2Submission) kwlCommonTablesDAOObj.getClassObject(GSTR2Submission.class.getName(), system_gstrsubmissionid);
            if (importTransaction != null && systemTransaction != null) {
                JSONObject importedJSON = new JSONObject(importTransaction.getTransactionJson());
                JSONObject systemJSON = new JSONObject(systemTransaction.getTransactionJson());
                JSONObject jsonToBeUploaded = new JSONObject(importedJSON, JSONObject.getNames(importedJSON));
                jsonToBeUploaded.put("flag", params.optString("updateFlag"));
                jsonToBeUploaded.put("updby", "S");
                jsonToBeUploaded.put("cflag", "M");
                if (systemJSON.has("itms")) {
                    JSONArray itmsArray = systemJSON.getJSONArray("itms");
                    JSONArray itmArr = new JSONArray();
                    int count = 1;
                    for (int k = 0; k < itmsArray.length(); k++) {
                        JSONObject itms_d = itmsArray.getJSONObject(k);
                        JSONObject itmJSON = new JSONObject();
                        if (itms_d.has("itm_det")) {
                            JSONObject invoice_dt = itms_d.getJSONObject("itm_det");
                            JSONObject itm_detail = new JSONObject();
                            if (invoice_dt.optDouble("camt", 0.0) != 0.0) {
                                itm_detail.put("camt", invoice_dt.optDouble("camt", 0.0));
                            }
                            if (invoice_dt.optDouble("samt", 0.0) != 0.0) {
                                itm_detail.put("samt", invoice_dt.optDouble("samt", 0.0));
                            }
                            if (invoice_dt.optDouble("iamt", 0.0) != 0.0) {
                                itm_detail.put("iamt", invoice_dt.optDouble("iamt", 0.0));
                            }
                            if (invoice_dt.optDouble("csamt", 0.0) != 0.0) {
                                itm_detail.put("csamt", invoice_dt.optDouble("csamt", 0.0));
                            }
                            itm_detail.put("rt", invoice_dt.optDouble("rt", 0.0));
                            itm_detail.put("txval", invoice_dt.optDouble("txval", 0.0));

                            JSONObject itc_detail = new JSONObject();
                            itc_detail.put("tx_c", invoice_dt.optDouble("camt", 0.0));
                            itc_detail.put("tx_s", invoice_dt.optDouble("samt", 0.0));
                            itc_detail.put("tx_i", invoice_dt.optDouble("iamt", 0.0));
                            itc_detail.put("tx_cs", invoice_dt.optDouble("csamt", 0.0));
                            itc_detail.put("elg", "ip");
                            itmJSON.put("itc", itc_detail);
                            itmJSON.put("num", count++);
                            itmJSON.put("itm_det", itm_detail);
                            itmArr.put(itmJSON);
                        }
                    }
                    jsonToBeUploaded.put("itms", itmArr);
                }
                systemTransaction.setJsonToBeUploaded(jsonToBeUploaded.toString());
                systemTransaction.setFlag(params.optString("updateFlag"));
                importTransaction.setJsonToBeUploaded(jsonToBeUploaded.toString());
                importTransaction.setFlag(params.optString("updateFlag"));

                success = true;
            }
        } else if (params.optString("updateFlag").equals(GSTR2Submission.REJECT)) {
            GSTR2Submission importTransaction = (GSTR2Submission) kwlCommonTablesDAOObj.getClassObject(GSTR2Submission.class.getName(), import_gstrsubmissionid);
            if (importTransaction != null) {
                JSONObject json = new JSONObject(importTransaction.getTransactionJson());
                json.put("updby", "S");
                json.put("cflag", "R");
                json.put("flag", "R");
                if (json.has("itms")) {
                    JSONArray itmsArray = json.getJSONArray("itms");
                    JSONArray itmsArr = new JSONArray();
                    for (int k = 0; k < itmsArray.length(); k++) {
                        JSONObject itms_d = itmsArray.getJSONObject(k);
                        if (itms_d.has("itm_det")) {
                            JSONObject itc_detail = new JSONObject();
                            itc_detail.put("tx_cs", 0.0);
                            itc_detail.put("tx_i", 0.0);
                            itc_detail.put("tx_c", 0.0);
                            itc_detail.put("tx_s", 0.0);
                            itc_detail.put("elg", "no");
                            itms_d.put("itc", itc_detail);
                            itmsArr.put(itms_d);
                        }
                    }
                    json.put("itms", itmsArr);
                }
                importTransaction.setFlag(params.optString("updateFlag"));
                importTransaction.setJsonToBeUploaded(json.toString());

                success = true;
            }
        }
        return success;
    }
    
    @Override
    public JSONObject exportJsonForGSTR2(JSONObject params) throws ServiceException, JSONException {
        JSONObject json = new JSONObject();
        try {
            JSONArray b2bArr = new JSONArray();
            JSONArray cdnrArr = new JSONArray();
            JSONObject reqParams = new JSONObject();
            reqParams.put("companyid", params.optString("companyid",""));
            reqParams.put("month", params.optInt("month", 0));
            reqParams.put("year", params.optInt("year", 0));
            reqParams.put("entityid", params.optString("entityid", ""));
            reqParams.put("flag", GSTR2Submission.ACCEPT);
            reqParams.put("systemTransaction", false);
            reqParams.put("isNotNulljsontobeuploaded", true);
            KwlReturnObject result = accEntityGstDao.getGSTR2Submission(reqParams);
            Map<String, JSONArray> b2bMap = new HashMap<>();
            Map<String, JSONArray> cndrMap = new HashMap<>();
            if (result.getEntityList() != null && !result.getEntityList().isEmpty()) {
                /**
                 * Preparing JSON for accepted transactions.
                 */
                List<GSTR2Submission> submissionList = result.getEntityList();
                prepareTransactionMapForGSTR2Export(b2bMap, cndrMap, submissionList);
            }
            reqParams.put("flag", GSTR2Submission.REJECT);
            result = accEntityGstDao.getGSTR2Submission(reqParams);
            if (result.getEntityList() != null && !result.getEntityList().isEmpty()) {
                /**
                 * Preparing JSON for rejected transactions.
                 */
                List<GSTR2Submission> submissionList = result.getEntityList();
                prepareTransactionMapForGSTR2Export(b2bMap, cndrMap, submissionList);
            }
            reqParams.put("flag", GSTR2Submission.MODIFIED);
            reqParams.put("systemTransaction", true);
            result = accEntityGstDao.getGSTR2Submission(reqParams);
            if (result.getEntityList() != null && !result.getEntityList().isEmpty()) {
                /**
                 * Preparing JSON for Modified transactions.
                 */
                List<GSTR2Submission> submissionList = result.getEntityList();
                prepareTransactionMapForGSTR2Export(b2bMap, cndrMap, submissionList);
            }
            reqParams.put("flag", GSTR2Submission.ADD_TO_GSTN);
            reqParams.put("systemTransaction", true);
            result = accEntityGstDao.getGSTR2Submission(reqParams);
            if (result.getEntityList() != null && !result.getEntityList().isEmpty()) {
                /**
                 * Preparing JSON for Modified transactions.
                 */
                List<GSTR2Submission> submissionList = result.getEntityList();
                prepareTransactionMapForGSTR2Export(b2bMap, cndrMap, submissionList);
            }
            for (Map.Entry<String, JSONArray> entrySet : b2bMap.entrySet()) {
                String ctin = entrySet.getKey();
                JSONArray invArr = entrySet.getValue();
                JSONObject temp = new JSONObject();
                temp.put("ctin", ctin);
                temp.put("inv", invArr);
                b2bArr.put(temp);
            }
            for (Map.Entry<String, JSONArray> entrySet : cndrMap.entrySet()) {
                String ctin = entrySet.getKey();
                JSONArray invArr = entrySet.getValue();
                JSONObject temp = new JSONObject();
                temp.put("ctin", ctin);
                temp.put("nt", invArr);
                cdnrArr.put(temp);
            }
            json.put("b2b", b2bArr);
            json.put("cdn", cdnrArr);
            json.put("cdna", new JSONArray());
            json.put("b2ba", new JSONArray());
            json.put("fp", (String.format("%02d", (params.optInt("month", 0) + 1)) + params.optInt("year", 0)));
            int colnumforgstn = fieldManagerDAOobj.getColumnFromFieldParams(Constants.GSTIN,  params.optString(Constants.companyKey), Constants.GSTModule, 0);
            Map<String, Object> map = new HashMap<>();
            map.put("fcdId", params.optString("entityid"));
            Object res = kwlCommonTablesDAOObj.getRequestedObjectFields(MultiEntityDimesionCustomData.class, new String[]{"col" + colnumforgstn}, map);
            String gstn = res != null ? (String) res : "";
            json.put("gstin", gstn);
        } catch (Exception ex) {
            Logger.getLogger(AccEntityGstServiceImpl.class.getName()).log(Level.WARNING, ex.getMessage());
        }
        return json;
    }
    private void prepareTransactionMapForGSTR2Export(Map<String, JSONArray> b2bMap, Map<String, JSONArray> cndrMap, List<GSTR2Submission> submissionList) throws JSONException {
        for (GSTR2Submission submission : submissionList) {
            if (!StringUtil.isNullOrEmpty(submission.getJsonToBeUploaded())) {
                JSONObject transactionJSON = new JSONObject(submission.getJsonToBeUploaded());
                if (submission.getType() == GSTR2Submission.B2B) {
                    if (b2bMap.containsKey(submission.getGstRegNumber())) {
                        JSONArray gstnTransactionArr = b2bMap.get(submission.getGstRegNumber());
                        gstnTransactionArr.put(transactionJSON);
                        b2bMap.put(submission.getGstRegNumber(), gstnTransactionArr);
                    } else {
                        JSONArray gstnTransactionArr = new JSONArray();
                        gstnTransactionArr.put(transactionJSON);
                        b2bMap.put(submission.getGstRegNumber(), gstnTransactionArr);
                    }
                } else if (submission.getType() == GSTR2Submission.CDNR) {
                    if (cndrMap.containsKey(submission.getGstRegNumber())) {
                        JSONArray gstnTransactionArr = b2bMap.get(submission.getGstRegNumber());
                        gstnTransactionArr.put(transactionJSON);
                        cndrMap.put(submission.getGstRegNumber(), gstnTransactionArr);
                    } else {
                        JSONArray gstnTransactionArr = new JSONArray();
                        gstnTransactionArr.put(transactionJSON);
                        cndrMap.put(submission.getGstRegNumber(), gstnTransactionArr);
                    }
                }
            }
        }
    }
    
    public JSONObject getDNAgainstSalesForGSTR3BTaxable(JSONObject reqParams) throws JSONException, ServiceException {
        /**
         * Get Invoice total sum
         */
        String companyId=reqParams.optString("companyid");
        JSONObject jSONObject = new JSONObject();
        double taxableAmountCN = 0d;
        double totalAmountCN = 0d;
        double IGSTAmount = 0d;
        double CGSTAmount = 0d;
        double SGSTAmount = 0d;
        double CESSAmount = 0d;

        /**
         * Get CN amount
         */
        reqParams.put("entitycolnum", reqParams.optString("dnentitycolnum"));
        reqParams.put("entityValue", reqParams.optString("dnentityValue"));
        List<Object> cnData = accEntityGstDao.getDNAgainstCustomer(reqParams);
        if (!reqParams.optBoolean(GSTR3BConstants.DETAILED_VIEW_REPORT, false)) {
            for (Object object : cnData) {
                Object[] data = (Object[]) object;
                String term = data[1] != null ? data[1].toString() : "";
                double termamount = data[0] != null ? (Double) data[0] : 0;

                totalAmountCN = (Double) data[3];
                if (term.equalsIgnoreCase(LineLevelTerms.GSTName.get("OutputIGST").toString())) {
                    taxableAmountCN += data[2] != null ? (Double) data[2] : 0;
                    IGSTAmount += termamount;
                } else if (term.equalsIgnoreCase(LineLevelTerms.GSTName.get("OutputCGST").toString())) {
                    taxableAmountCN += data[2] != null ? (Double) data[2] : 0;
                    CGSTAmount += termamount;
                } else if (term.equalsIgnoreCase(LineLevelTerms.GSTName.get("OutputSGST").toString())) {
                    SGSTAmount += termamount;
                } else if (term.equalsIgnoreCase(LineLevelTerms.GSTName.get("OutputUTGST").toString())) {
                    SGSTAmount += termamount;
                } else if (term.equalsIgnoreCase(LineLevelTerms.GSTName.get("OutputCESS").toString())) {
                    CESSAmount += termamount;
                } else if (StringUtil.isNullOrEmpty(term)) {
                    taxableAmountCN += data[2] != null ? (Double) data[2] : 0;
                }
            }
            jSONObject.put("taxableamt", authHandler.formattedAmount(taxableAmountCN,companyId));
            jSONObject.put("igst", authHandler.formattedAmount(IGSTAmount,companyId));
            jSONObject.put("cgst", authHandler.formattedAmount(CGSTAmount,companyId));
            jSONObject.put("sgst", authHandler.formattedAmount(SGSTAmount,companyId));
            jSONObject.put("csgst", authHandler.formattedAmount(CESSAmount,companyId));
            jSONObject.put("totaltax", authHandler.formattedAmount(IGSTAmount+CGSTAmount+SGSTAmount+CESSAmount,companyId));
            jSONObject.put("totalamount",authHandler.formattedAmount(taxableAmountCN+IGSTAmount+CGSTAmount+SGSTAmount+CESSAmount,companyId));
        } else {
            reqParams.put("isDebitNoteTransaction", true);
            jSONObject = accGSTReportService.getCreditNoteJSONArrayForGSTR3B(cnData, reqParams, companyId);
            reqParams.remove("isDebitNoteTransaction");
        }
        return jSONObject;
    }
    /**
     * Desc - Get INDIA GST Term CESS calculation type details in JSON Array
     * @param reqParams
     * @return
     * @throws JSONException
     * @throws ServiceException 
     */
    public JSONObject getCESSCalculationType(JSONObject reqParams) throws JSONException, ServiceException {
        JSONObject jSONObject = new JSONObject();
        KwlReturnObject kwlReturnObject = accEntityGstDao.getCESSCalculationType(reqParams);
        if (kwlReturnObject != null) {
            JSONArray JArray = new JSONArray();
            List<GSTCessRuleType> cessRuleTypes = kwlReturnObject.getEntityList();
            for (GSTCessRuleType ruleType : cessRuleTypes) {
                JSONObject obj = new JSONObject();
                obj.put("id", ruleType.getId());
                obj.put("name", ruleType.getName());
                JArray.put(obj);
            }
            jSONObject.put("data", JArray);
        }
        return jSONObject;
    }
    
    /**
     * Description: Method to get GSTR3B Summary Report.
     *
     * @param params
     * @return
     * @throws ServiceException
     * @throws JSONException
     */
    @Override
    public JSONObject getGSTR3BSummaryReport(JSONObject params) throws ServiceException, JSONException {
        JSONObject json = new JSONObject();
        try {
            JSONObject jMeta = new JSONObject();
            JSONArray jarrColumns = new JSONArray();
            JSONArray jarrRecords = new JSONArray();
            JSONArray dataJArr = new JSONArray();
            JSONArray exportJArr = new JSONArray();
            JSONObject exportJSON = new JSONObject();
            String start = params.optString("start");
            String limit = params.optString("limit");
            String companyId = params.optString("companyid");
            
            params.put(GSTR3BConstants.DETAILED_VIEW_REPORT, true);

            /* * before starting sectional data need to get column no for Product Tax
             * Class (HSN)
             */
            getEntityDataForRequestedModule(params);
            getColNumForRequestedModules(params);
            getLocalStateOfEntity(params);
            getColumnModelForGSTR3B(jarrRecords, jarrColumns, params);

            JSONObject summaryJSON = new JSONObject();
            summaryJSON.put("particulars", "GST Payable [3.1 - (4A - 4B)]");
            summaryJSON.put("fmt", "B");
            summaryJSON.put("showBold", true);
            
            JSONObject totalJSONObject = getGSTR3B_Section_3_1_Data(params, companyId, dataJArr, exportJArr);
            summaryJSON.put("taxableamt", authHandler.formattedAmount(totalJSONObject.optDouble("taxableamt", 0.0), companyId));
            summaryJSON.put("igst", authHandler.formattedAmount(totalJSONObject.optDouble("igst", 0.0), companyId));
            summaryJSON.put("cgst", authHandler.formattedAmount(totalJSONObject.optDouble("cgst", 0.0), companyId));
            summaryJSON.put("sgst", authHandler.formattedAmount(totalJSONObject.optDouble("sgst", 0.0), companyId));
            summaryJSON.put("csgst", authHandler.formattedAmount(totalJSONObject.optDouble("csgst", 0.0), companyId));
            summaryJSON.put("totaltax", authHandler.formattedAmount(totalJSONObject.optDouble("totaltax", 0.0), companyId));
            summaryJSON.put("totalamount", authHandler.formattedAmount(totalJSONObject.optDouble("totalamount", 0.0), companyId));
            
            exportJSON.put("sup_details", exportJArr);
            exportJArr = new JSONArray();
            
            totalJSONObject = getGSTR3B_Section_3_2_Data(params, companyId, dataJArr, exportJArr);
            
            getGSTR3B_Section_4_Data(params, companyId, dataJArr, exportJArr, summaryJSON);

            totalJSONObject =  getGSTR3B_Section_5_Data(params, companyId, dataJArr, exportJArr);
            /**
             * No need to consider Exempt/Zero/Nil rated in the total.
             */
//            summaryJSON.put("taxableamt", authHandler.formattedAmount(summaryJSON.optDouble("taxableamt", 0.0) - totalJSONObject.optDouble("taxableamt", 0.0), companyId));
//            summaryJSON.put("igst", authHandler.formattedAmount(summaryJSON.optDouble("igst", 0.0) - totalJSONObject.optDouble("igst", 0.0), companyId));
//            summaryJSON.put("cgst", authHandler.formattedAmount(summaryJSON.optDouble("cgst", 0.0) - totalJSONObject.optDouble("cgst", 0.0), companyId));
//            summaryJSON.put("sgst", authHandler.formattedAmount(summaryJSON.optDouble("sgst", 0.0) - totalJSONObject.optDouble("sgst", 0.0), companyId));
//            summaryJSON.put("csgst", authHandler.formattedAmount(summaryJSON.optDouble("csgst", 0.0) - totalJSONObject.optDouble("csgst", 0.0), companyId));
//            summaryJSON.put("totaltax", authHandler.formattedAmount(summaryJSON.optDouble("totaltax", 0.0) - totalJSONObject.optDouble("totaltax", 0.0), companyId));
//            summaryJSON.put("totalamount", authHandler.formattedAmount(summaryJSON.optDouble("totalamount", 0.0) - totalJSONObject.optDouble("totalamount", 0.0), companyId));
            
            dataJArr.put(summaryJSON);
            summaryJSON = new JSONObject();
            summaryJSON.put("particulars", "Note : Excess ITC value will be shown in negative");
            summaryJSON.put("fmt", "B");
            summaryJSON.put("showBold", true);
            dataJArr.put(summaryJSON);
            JSONArray pagedJson = new JSONArray();
            pagedJson = dataJArr;
            if (!StringUtil.isNullOrEmpty(start) && !StringUtil.isNullOrEmpty(limit)) {
                pagedJson = StringUtil.getPagedJSON(pagedJson, Integer.parseInt(start), Integer.parseInt(limit));
            }
            json.put("totalCount", dataJArr.length());
            json.put("columns", jarrColumns);
            json.put("coldata", pagedJson);
            jMeta.put("totalProperty", "totalCount");
            jMeta.put("root", "coldata");
            jMeta.put("fields", jarrRecords);
            json.put("metaData", jMeta);
            Map<String, Object> map = new HashMap<>();
            map.put("fcdId", params.opt("entityid"));
            int gstin_column = fieldManagerDAOobj.getColumnFromFieldParams(Constants.GSTIN, companyId, Constants.GSTModule, 0);
            Object res = kwlCommonTablesDAOObj.getRequestedObjectFields(MultiEntityDimesionCustomData.class, new String[]{"col" + gstin_column}, map);
            String gstin = res != null ? (String) res : "";
            exportJSON.put("gstin", gstin);
            json.put("exportJSON", exportJSON);
            if (params.optBoolean("isExport")) {
                json.put("data", dataJArr);
                json.put("columns", jarrColumns);
            }
        } catch (JSONException | ServiceException ex) {
            throw ServiceException.FAILURE(ex.getMessage(), ex);
        } catch (Exception ex) {
            Logger.getLogger(AccEntityGstServiceImpl.class.getName()).log(Level.INFO, ex.getMessage());
        }
        return json;
    }
    
    @Override
    public JSONObject getGSTR3BSummaryDetails(JSONObject params) throws ServiceException, JSONException {
        JSONObject object = new JSONObject();
        JSONObject jMeta = new JSONObject();
        JSONArray jarrColumns = new JSONArray();
        JSONArray jarrRecords = new JSONArray();
        JSONArray dataJArr = new JSONArray();
        String start = params.optString("start");
        String limit = params.optString("limit");
        String companyId = params.optString("companyid");

        getEntityDataForRequestedModule(params);
        getColNumForRequestedModules(params);
        getLocalStateOfEntity(params);
        params.put(GSTR3BConstants.DETAILED_VIEW_REPORT, true);

        String section = params.optString("section");
        accGSTReportService.getColumnModelForGSTR3BDetails(jarrRecords, jarrColumns, params);
        switch (section) {
            case GSTRConstants.GSTR3B_SECTION_3_1_A:
                getGSTR3B_Section_3_1_A_Data(params, companyId, dataJArr);
                break;
            case GSTRConstants.GSTR3B_SECTION_3_1_B:
                getGSTR3B_Section_3_1_B_Data(params, companyId, dataJArr);
                break;
            case GSTRConstants.GSTR3B_SECTION_3_1_C:
                getGSTR3B_Section_3_1_C_Data(params, companyId, dataJArr);
                break;
            case GSTRConstants.GSTR3B_SECTION_3_1_D:
                getGSTR3B_Section_3_1_D_Data(params, companyId, dataJArr);
                break;
            case GSTRConstants.GSTR3B_SECTION_3_1_E:
                getGSTR3B_Section_3_1_E_Data(params, companyId, dataJArr);
                break;
            case GSTRConstants.GSTR3B_SECTION_3_2_A:
                getGSTR3B_Section_3_2_A_Data(params, companyId, dataJArr);
                break;
            case GSTRConstants.GSTR3B_SECTION_3_2_B:
                getGSTR3B_Section_3_2_B_Data(params, companyId, dataJArr);
                break;
            case GSTRConstants.GSTR3B_SECTION_3_2_C:
                /**
                 * Currently, we have not implemented UIN.
                 */
                break;
                // todo
            case GSTRConstants.GSTR3B_SECTION_4_A_1:
                getGSTR3B_Section_4_A_1_Data(params, companyId, dataJArr);
                break;
            case GSTRConstants.GSTR3B_SECTION_4_A_2:
                getGSTR3B_Section_4_A_2_Data(params, companyId, dataJArr);
                break;
            case GSTRConstants.GSTR3B_SECTION_4_A_3:
                getGSTR3B_Section_4_A_3_Data(params, companyId, dataJArr);
                break;
            case GSTRConstants.GSTR3B_SECTION_4_A_4:
                /**
                 * Currently, we don't show any values in this section.
                 */
                break;
            case GSTRConstants.GSTR3B_SECTION_4_A_5:
                getGSTR3B_Section_4_A_5_Data(params, companyId, dataJArr);
                break;
            case GSTRConstants.GSTR3B_SECTION_4_B_1:
                /**
                 * Currently, we don't show any values in this section.
                 */
                gstGSTR3B_Section_4_B_1_Data(params, companyId, dataJArr);
                break;
            case GSTRConstants.GSTR3B_SECTION_4_B_2:
                /**
                 * Currently, we don't show any values in this section.
                 */
                break;
            case GSTRConstants.GSTR3B_SECTION_4_D_1:
                /**
                 * Currently, we don't show any values in this section.
                 */
                getGSTR3B_Section_4_D_1_Data(params, companyId, dataJArr);
                break;
            case GSTRConstants.GSTR3B_SECTION_4_D_2:
                /**
                 * Currently, we don't show any values in this section.
                 */
                break;
            case GSTRConstants.GSTR3B_SECTION_5_1:
                getGSTR3B_Section_5_1_Data(params, companyId, dataJArr);
                break;
            case GSTRConstants.GSTR3B_SECTION_5_2:
                getGSTR3B_Section_5_2_Data(params, companyId, dataJArr);
                break;
            case GSTRConstants.GSTR3B_SECTION_5_3:
                getGSTR3B_Section_5_3_Data(params, companyId, dataJArr);
                break;
            case GSTRConstants.GSTR3B_SECTION_5_4:
                getGSTR3B_Section_5_4_Data(params, companyId, dataJArr);
                break;
        }
        dataJArr = sortJsonForGSTR2A(dataJArr);
        JSONArray pagedJson = new JSONArray();
        pagedJson = dataJArr;
        if (!StringUtil.isNullOrEmpty(start) && !StringUtil.isNullOrEmpty(limit)) {
            pagedJson = StringUtil.getPagedJSON(pagedJson, Integer.parseInt(start), Integer.parseInt(limit));
        }
        object.put("totalCount", dataJArr.length());
        object.put("columns", jarrColumns);
        object.put("coldata", pagedJson);
        jMeta.put("totalProperty", "totalCount");
        jMeta.put("root", "coldata");
        jMeta.put("fields", jarrRecords);
        object.put("metaData", jMeta);
        return object;
    }
    /**
     * GST computation summary report
     *
     * @param params
     * @return
     * @throws ServiceException
     * @throws JSONException
     */
    public JSONObject getGSTComputationSummaryReport(JSONObject params) throws ServiceException, JSONException {
        JSONObject object = new JSONObject();
        JSONObject jMeta = new JSONObject();
        JSONArray jarrColumns = new JSONArray();
        JSONArray jarrRecords = new JSONArray();
        JSONArray dataJArr = new JSONArray();
        JSONArray array = new JSONArray();
        JSONArray array1 = new JSONArray();
        String start = params.optString("start");
        String limit = params.optString("limit");
        String companyId = params.optString("companyid");
        /**
         * Put all required parameter for GST report
         */
        getEntityDataForRequestedModule(params);
        getColNumForRequestedModules(params);
        getLocalStateOfEntity(params);
        /**
         * Get Column Model
         */
        params.put(GSTR3BConstants.DETAILED_VIEW_REPORT, true);
        params.put("reportid", Constants.GSTR3B_Summary_Report);
        getColumnModelForGSTRComputation(jarrRecords, jarrColumns, params);
        JSONObject jSONObject = new JSONObject();
        jSONObject = getGSTComputation_Sales_Section_1(params);
        jSONObject.put("section", "4.1");
        jSONObject.put("level", 0);
        jSONObject.put("leaf", false);
        jSONObject.put("fmt", "B");
        jSONObject.put("heading", GSTRConstants.GST_COMPUTATION_SECTION_SALES_1);
        jSONObject.put("typeofsales", "Reg. sales");
        jSONObject.put("enableViewDetail", true);
        dataJArr.put(jSONObject);

        jSONObject = new JSONObject();
        jSONObject = getGSTComputation_Sales_Section_1_1(params);
        jSONObject.put("section", "4.2");
        jSONObject.put("level", 1);
        jSONObject.put("leaf", true);
        jSONObject.put("fmt", "T");
        jSONObject.put("enableViewDetail", true);
        jSONObject.put("typeofsales", GSTRConstants.GST_COMPUTATION_SECTION_SALES_1_1);
        dataJArr.put(jSONObject);

        jSONObject = new JSONObject();
        jSONObject = getGSTComputation_Sales_Section_1_2(params);
        jSONObject.put("typeofsales", GSTRConstants.GST_COMPUTATION_SECTION_SALES_1_2);
        jSONObject.put("level", 1);
        jSONObject.put("section", "4.3");
        jSONObject.put("enableViewDetail", true);
        jSONObject.put("leaf", true);
        jSONObject.put("fmt", "T");
        dataJArr.put(jSONObject);

        jSONObject = new JSONObject();
        jSONObject = getGSTComputation_Sales_Section_1_3(params);
        jSONObject.put("typeofsales", GSTRConstants.GST_COMPUTATION_SECTION_SALES_1_3);
        jSONObject.put("section", "4.4");
        jSONObject.put("enableViewDetail", true);
        jSONObject.put("level", 1);
        jSONObject.put("leaf", true);
        jSONObject.put("fmt", "T");
        dataJArr.put(jSONObject);

        jSONObject = new JSONObject();
        jSONObject = getGSTComputation_Sales_Section_2(params);
        jSONObject.put("section", "5.1");
        jSONObject.put("enableViewDetail", true);
        jSONObject.put("level", 0);
        jSONObject.put("leaf", false);
        jSONObject.put("fmt", "B");
        jSONObject.put("heading", "Inter State Unregistered Sales");
        jSONObject.put("typeofsales", GSTRConstants.GST_COMPUTATION_SECTION_SALES_2);
        dataJArr.put(jSONObject);

        jSONObject = new JSONObject();
        jSONObject = getGSTComputation_Sales_Section_2_2(params);
        jSONObject.put("section", "7.1");
        jSONObject.put("enableViewDetail", true);
        jSONObject.put("level", 0);
        jSONObject.put("leaf", false);
        jSONObject.put("fmt", "B");
        jSONObject.put("heading", "Other Unregistered Sales");
        jSONObject.put("typeofsales", GSTRConstants.GST_COMPUTATION_SECTION_SALES_2_2);
        dataJArr.put(jSONObject);

        jSONObject = new JSONObject();
        jSONObject = getGSTComputation_Sales_Section_3(params);
        jSONObject.put("section", "6.1");
        jSONObject.put("level", 0);
        jSONObject.put("enableViewDetail", true);
        jSONObject.put("leaf", false);
        jSONObject.put("fmt", "B");
        jSONObject.put("heading", "Zero Rated Supplies");
        jSONObject.put("typeofsales", GSTRConstants.GST_COMPUTATION_SECTION_SALES_3);
        dataJArr.put(jSONObject);

        jSONObject = new JSONObject();
        jSONObject = getGSTComputation_Sales_Section_3_1(params);
        jSONObject.put("section", "6.2");
        jSONObject.put("level", 1);
        jSONObject.put("enableViewDetail", true);
        jSONObject.put("leaf", true);
        jSONObject.put("fmt", "T");
//        jSONObject.put("heading", "Zero Rated Supplies");
        jSONObject.put("typeofsales", GSTRConstants.GST_COMPUTATION_SECTION_SALES_3_1);
        dataJArr.put(jSONObject);

        jSONObject = new JSONObject();
        jSONObject = getGSTComputation_Sales_Section_4(params);
        jSONObject.put("section", "8.1");
        jSONObject.put("typeofsales", GSTRConstants.GST_COMPUTATION_SECTION_SALES_4);
        jSONObject.put("level", 1);
        jSONObject.put("enableViewDetail", true);
        jSONObject.put("leaf", true);
        jSONObject.put("fmt", "T");
        dataJArr.put(jSONObject);

        jSONObject = new JSONObject();
        jSONObject = getGSTComputation_Sales_Section_4_1(params);
        jSONObject.put("typeofsales", GSTRConstants.GST_COMPUTATION_SECTION_SALES_4_1);
        jSONObject.put("level", 1);
        jSONObject.put("section", "8.2");
        jSONObject.put("enableViewDetail", true);
        jSONObject.put("leaf", true);
        jSONObject.put("fmt", "T");
        dataJArr.put(jSONObject);

        jSONObject = new JSONObject();
        jSONObject = getGSTComputation_Sales_Section_4_2(params);
        jSONObject.put("section", "8.3");
        jSONObject.put("typeofsales", GSTRConstants.GST_COMPUTATION_SECTION_SALES_4_2);
        jSONObject.put("level", 1);
        jSONObject.put("enableViewDetail", true);
        jSONObject.put("leaf", true);
        jSONObject.put("fmt", "T");
        dataJArr.put(jSONObject);

        jSONObject = new JSONObject();
        jSONObject = getGSTComputation_Sales_Section_7(params);
        jSONObject.put("section", "9.1");
        jSONObject.put("heading", "DN");
        jSONObject.put("level", 0);
        jSONObject.put("enableViewDetail", true);
        jSONObject.put("leaf", false);
        jSONObject.put("fmt", "B");
        jSONObject.put("typeofsales", GSTRConstants.GST_COMPUTATION_SECTION_SALES_7);
        dataJArr.put(jSONObject);

        jSONObject = new JSONObject();
        jSONObject = getGSTComputation_Sales_Section_7_1(params);
        jSONObject.put("section", "9.2");
//        jSONObject.put("heading", "DN");
        jSONObject.put("enableViewDetail", true);
        jSONObject.put("level", 1);
        jSONObject.put("leaf", true);
        jSONObject.put("fmt", "T");
        jSONObject.put("typeofsales", GSTRConstants.GST_COMPUTATION_SECTION_SALES_7_1);
        dataJArr.put(jSONObject);

        jSONObject = new JSONObject();
        jSONObject = getGSTComputation_Sales_Section_7_2(params);
        jSONObject.put("section", "9.3");
        jSONObject.put("enableViewDetail", true);
//        jSONObject.put("heading", "DN");
        jSONObject.put("level", 1);
        jSONObject.put("leaf", true);
        jSONObject.put("fmt", "T");
        jSONObject.put("typeofsales", GSTRConstants.GST_COMPUTATION_SECTION_SALES_7_2);
        dataJArr.put(jSONObject);

        jSONObject = new JSONObject();
        jSONObject = getGSTComputation_Sales_Section_7_3(params);
        jSONObject.put("section", "9.4");
        jSONObject.put("enableViewDetail", true);
        jSONObject.put("heading", "CN");
        jSONObject.put("level", 0);
        jSONObject.put("leaf", false);
        jSONObject.put("fmt", "B");
        jSONObject.put("typeofsales", GSTRConstants.GST_COMPUTATION_SECTION_SALES_7_3);
        dataJArr.put(jSONObject);

        jSONObject = new JSONObject();
        jSONObject = getGSTComputation_Sales_Section_7_4(params);
        jSONObject.put("section", "9.5");
        jSONObject.put("enableViewDetail", true);
//        jSONObject.put("heading", "CN");
        jSONObject.put("level", 1);
        jSONObject.put("leaf", true);
        jSONObject.put("fmt", "T");
        jSONObject.put("typeofsales", GSTRConstants.GST_COMPUTATION_SECTION_SALES_7_4);
        dataJArr.put(jSONObject);

        jSONObject = new JSONObject();
        jSONObject = getGSTComputation_Sales_Section_7_5(params);
        jSONObject.put("section", "9.6");
        jSONObject.put("enableViewDetail", true);
//        jSONObject.put("heading", "CN");
        jSONObject.put("level", 1);
        jSONObject.put("leaf", true);
        jSONObject.put("fmt", "T");
        jSONObject.put("typeofsales", GSTRConstants.GST_COMPUTATION_SECTION_SALES_7_5);
        dataJArr.put(jSONObject);

        jSONObject = new JSONObject();
        jSONObject = getGSTComputation_Sales_Section_8(params);
        jSONObject.put("section", "9.7");
        jSONObject.put("heading", "Refund");
        jSONObject.put("level", 0);
        jSONObject.put("leaf", false);
        jSONObject.put("fmt", "B");
        jSONObject.put("typeofsales", GSTRConstants.GST_COMPUTATION_SECTION_SALES_8);
        dataJArr.put(jSONObject);

        jSONObject = new JSONObject();
        jSONObject = getGSTComputation_Sales_Section_9(params);
        jSONObject = jSONObject.optJSONObject("gstr3Obj");
        jSONObject.put("section", "11.1");
        jSONObject.put("enableViewDetail", true);
        jSONObject.put("heading", "Advance");
        jSONObject.put("level", 0);
        jSONObject.put("leaf", false);
        jSONObject.put("fmt", "B");
        jSONObject.put("typeofsales", GSTRConstants.GST_COMPUTATION_SECTION_SALES_9);
        dataJArr.put(jSONObject);

        jSONObject = new JSONObject();
        jSONObject = getGSTComputation_Sales_Section_9_1(params);
        jSONObject = jSONObject.optJSONObject("gstr3Obj");
        jSONObject.put("section", "11.2");
        jSONObject.put("level", 1);
        jSONObject.put("enableViewDetail", true);
        jSONObject.put("leaf", true);
        jSONObject.put("fmt", "T");
        jSONObject.put("typeofsales", GSTRConstants.GST_COMPUTATION_SECTION_SALES_9_1);
        dataJArr.put(jSONObject);

        jSONObject = new JSONObject();
        jSONObject = getGSTComputation_Sales_Section_9_2(params);
        jSONObject = jSONObject.optJSONObject("gstr3Obj");
        jSONObject.put("section", "11.3");
        jSONObject.put("level", 1);
        jSONObject.put("enableViewDetail", true);
        jSONObject.put("leaf", true);
        jSONObject.put("fmt", "T");
        jSONObject.put("typeofsales", GSTRConstants.GST_COMPUTATION_SECTION_SALES_9_2);
        dataJArr.put(jSONObject);

        jSONObject = new JSONObject();
        jSONObject = getGSTComputation_Sales_Section_10(params);
        jSONObject = jSONObject.optJSONObject("gstr3Obj");
        jSONObject.put("section", "11.4");
        jSONObject.put("typeofsales", GSTRConstants.GST_COMPUTATION_SECTION_SALES_10);
        jSONObject.put("level", 1);
        jSONObject.put("leaf", true);
        jSONObject.put("enableViewDetail", true);
        jSONObject.put("fmt", "T");
        dataJArr.put(jSONObject);

        jSONObject = new JSONObject();
        jSONObject = getGSTComputation_Sales_Section_10_1(params);
        jSONObject = jSONObject.optJSONObject("gstr3Obj");
        jSONObject.put("section", "11.5");
        jSONObject.put("typeofsales", GSTRConstants.GST_COMPUTATION_SECTION_SALES_10_1);
        jSONObject.put("level", 1);
        jSONObject.put("enableViewDetail", true);
        jSONObject.put("leaf", true);
        jSONObject.put("fmt", "T");
        dataJArr.put(jSONObject);

        jSONObject = new JSONObject();
        jSONObject = getGSTComputation_Sales_Section_10_2(params);
        jSONObject = jSONObject.optJSONObject("gstr3Obj");
        jSONObject.put("section", "11.6");
        jSONObject.put("typeofsales", GSTRConstants.GST_COMPUTATION_SECTION_SALES_10_2);
        jSONObject.put("level", 1);
        jSONObject.put("enableViewDetail", true);
        jSONObject.put("leaf", true);
        jSONObject.put("fmt", "T");
        dataJArr.put(jSONObject);
        /**
         * Total (Define Formula) Sales
         */
        jSONObject = new JSONObject();
        JSONObject reqParams = new JSONObject(params, JSONObject.getNames(params));
        reqParams.put("dataArr", dataJArr);
        jSONObject = getTotalForGSTR3B(reqParams);
        JSONObject salesSummaryTotal = new JSONObject(jSONObject.toString());
        jSONObject.put("typeofsales", "Total Of Sales");
        jSONObject.put("section", "11.7");
        jSONObject.put("level", 1);
        jSONObject.put("leaf", true);
        jSONObject.put("fmt", "T");
        dataJArr.put(jSONObject);

        JSONArray purchasesArr = new JSONArray();
        jSONObject = new JSONObject();
        jSONObject = getGSTComputation_Purchase_Section_1(params);
        jSONObject.put("section", "4.1");
        jSONObject.put("heading", "Registered Purchases");
        jSONObject.put("level", 0);
        jSONObject.put("enableViewDetail", true);
        jSONObject.put("leaf", false);
        jSONObject.put("fmt", "B");
        jSONObject.put("typeofsales", GSTRConstants.GST_COMPUTATION_SECTION_PURCHASES_1);
        purchasesArr.put(jSONObject);
        dataJArr.put(jSONObject);

        jSONObject = new JSONObject();
        jSONObject = getGSTComputation_Purchase_Section_1_1(params);
        jSONObject.put("section", "4.2");
        jSONObject.put("typeofsales", GSTRConstants.GST_COMPUTATION_SECTION_PURCHASES_1_1);
        jSONObject.put("level", 1);
        jSONObject.put("enableViewDetail", true);
        jSONObject.put("leaf", true);
        jSONObject.put("fmt", "T");
        purchasesArr.put(jSONObject);
        dataJArr.put(jSONObject);


        jSONObject = new JSONObject();
        jSONObject = getGSTComputation_Purchase_Section_3(params);
        jSONObject.put("section", "4.3");
        jSONObject.put("heading", "Import");
        jSONObject.put("level", 0);
        jSONObject.put("enableViewDetail", true);
        jSONObject.put("leaf", false);
        jSONObject.put("fmt", "B");
        jSONObject.put("typeofsales", GSTRConstants.GST_COMPUTATION_SECTION_PURCHASES_3);
        purchasesArr.put(jSONObject);
        dataJArr.put(jSONObject);

        jSONObject = new JSONObject();
        jSONObject = getGSTComputation_Purchase_Section_3_1(params);
        jSONObject.put("section", "4.4");
        jSONObject.put("typeofsales", GSTRConstants.GST_COMPUTATION_SECTION_PURCHASES_3_1);
        jSONObject.put("level", 1);
        jSONObject.put("enableViewDetail", true);
        jSONObject.put("leaf", true);
        jSONObject.put("fmt", "T");
        purchasesArr.put(jSONObject);
        dataJArr.put(jSONObject);
        jSONObject = new JSONObject();
        jSONObject = getGSTComputation_Purchase_Section_3_2(params);
        jSONObject.put("section", "4.5");
        jSONObject.put("typeofsales", GSTRConstants.GST_COMPUTATION_SECTION_PURCHASES_3_2);
        jSONObject.put("level", 1);
        jSONObject.put("enableViewDetail", true);
        jSONObject.put("leaf", true);
        jSONObject.put("fmt", "T");
        purchasesArr.put(jSONObject);
        dataJArr.put(jSONObject);

        jSONObject = new JSONObject();
        jSONObject = getGSTComputation_Purchase_Section_4(params);
        jSONObject.put("section", "4.6");
        jSONObject.put("typeofsales", GSTRConstants.GST_COMPUTATION_SECTION_PURCHASES_4);
        jSONObject.put("level", 1);
        jSONObject.put("enableViewDetail", true);
        jSONObject.put("leaf", true);
        jSONObject.put("fmt", "T");
        purchasesArr.put(jSONObject);
        dataJArr.put(jSONObject);
        jSONObject = new JSONObject();
        jSONObject = getGSTComputation_Purchase_Section_5(params);
        jSONObject.put("section", "4.7");
        jSONObject.put("typeofsales", GSTRConstants.GST_COMPUTATION_SECTION_PURCHASES_5);
        jSONObject.put("level", 1);
        jSONObject.put("enableViewDetail", true);
        jSONObject.put("leaf", true);
        jSONObject.put("fmt", "T");
        purchasesArr.put(jSONObject);
        dataJArr.put(jSONObject);

        jSONObject = new JSONObject();
        jSONObject.put("section", "4.8");
        jSONObject.put("heading", GSTRConstants.GST_COMPUTATION_SECTION_PURCHASES_8);
        jSONObject.put("level", 0);
        jSONObject.put("leaf", false);
        jSONObject.put("fmt", "B");
        jSONObject.put("typeofsales", "ISD Invoices");
        purchasesArr.put(jSONObject);
        dataJArr.put(jSONObject);

        jSONObject = new JSONObject();
        jSONObject.put("section", "4.9");
        jSONObject.put("typeofsales", GSTRConstants.GST_COMPUTATION_SECTION_PURCHASES_8_1);
        jSONObject.put("level", 1);
        jSONObject.put("leaf", true);
        jSONObject.put("fmt", "T");
        purchasesArr.put(jSONObject);
        dataJArr.put(jSONObject);
        jSONObject = new JSONObject();
        jSONObject.put("section", "4.10");
        jSONObject.put("heading", "TDS (Tax Deduct at Source)");
        jSONObject.put("level", 0);
        jSONObject.put("leaf", false);
        jSONObject.put("fmt", "B");
        jSONObject.put("typeofsales", GSTRConstants.GST_COMPUTATION_SECTION_PURCHASES_9);
        purchasesArr.put(jSONObject);
        dataJArr.put(jSONObject);
        jSONObject = new JSONObject();
        jSONObject.put("section", "4.11");
        jSONObject.put("heading", "TCS (Tax Collected at source)");
        jSONObject.put("level", 0);
        jSONObject.put("leaf", false);
        jSONObject.put("fmt", "B");
        jSONObject.put("typeofsales", GSTRConstants.GST_COMPUTATION_SECTION_PURCHASES_10);
        purchasesArr.put(jSONObject);
        dataJArr.put(jSONObject);

        jSONObject = new JSONObject();
        jSONObject = getGSTComputation_Purchase_Section_11(params);
//        jSONObject = jSONObject.optJSONObject("gstr3Obj");
        jSONObject.put("section", "4.12");
        jSONObject.put("heading", "Advance payments");
        jSONObject.put("level", 0);
        jSONObject.put("enableViewDetail", true);
        jSONObject.put("leaf", false);
        jSONObject.put("fmt", "B");
        jSONObject.put("typeofsales", GSTRConstants.GST_COMPUTATION_SECTION_PURCHASES_11);
        purchasesArr.put(jSONObject);
        dataJArr.put(jSONObject);

        jSONObject = new JSONObject();
        jSONObject = getGSTComputation_Purchase_Section_12(params);
//        jSONObject = jSONObject.optJSONObject("gstr3Obj");
        jSONObject.put("section", "4.13");
        jSONObject.put("heading", "Advance adjustment");
        jSONObject.put("level", 0);
        jSONObject.put("leaf", false);
        jSONObject.put("enableViewDetail", true);
        jSONObject.put("fmt", "B");
        jSONObject.put("typeofsales", GSTRConstants.GST_COMPUTATION_SECTION_PURCHASES_12);
        purchasesArr.put(jSONObject);
        dataJArr.put(jSONObject);

        /**
         * Define total.
         */
        jSONObject = new JSONObject();
        reqParams = new JSONObject(params, JSONObject.getNames(params));
        reqParams.put("isPurchase", true);
        reqParams.put("dataArr", purchasesArr);
        jSONObject = getTotalForGSTR3B(reqParams);
        JSONObject purchaseSummaryTotal = new JSONObject(jSONObject.toString());
        jSONObject.put("typeofsales", "Total Of Purchases");
        jSONObject.put("section", "4.14");
        jSONObject.put("level", 1);
        jSONObject.put("leaf", true);
        jSONObject.put("fmt", "T");
        dataJArr.put(jSONObject);
//        /**
//         * 11.1.
//         */
//        jSONObject = new JSONObject();
//        jSONObject.put("heading", "Input Tax Credit Reversal/Reclaim");
//        jSONObject.put("level", 0);
//        jSONObject.put("leaf", false);
//        jSONObject.put("fmt", "B");
//        jSONObject.put("section", "11.1");
//        dataJArr.put(jSONObject);
//
//        /**
//         * Amount in terms of rule 2(2) of ITC Rules.
//         */
//        jSONObject = new JSONObject();
//        jSONObject.put("section", "11.2");
//        jSONObject.put("typeofsales", "Amount in terms of rule 2(2) of ITC Rules");
//        jSONObject.put("level", 1);
//        jSONObject.put("leaf", true);
//        jSONObject.put("fmt", "T");
//        dataJArr.put(jSONObject);
//
//        /**
//         * Amount in terms of rule 4(1)(j) (ii) of ITC Rules.
//         */
//        jSONObject = new JSONObject();
//        jSONObject.put("section", "11.3");
//        jSONObject.put("typeofsales", "Amount in terms of rule 4(1)(j) (ii) of ITC Rules");
//        jSONObject.put("level", 1);
//        jSONObject.put("leaf", true);
//        jSONObject.put("fmt", "T");
//        dataJArr.put(jSONObject);
//        /**
//         * Amount in terms of rule 7 (1) (m) of ITC Rules.
//         */
//        jSONObject = new JSONObject();
//        jSONObject.put("section", "11.4");
//        jSONObject.put("typeofsales", "Amount in terms of rule 7 (1) (m) of ITC Rules");
//        jSONObject.put("level", 1);
//        jSONObject.put("leaf", true);
//        jSONObject.put("fmt", "T");
//        dataJArr.put(jSONObject);
//        /**
//         * Amount in terms of rule 8(1) (h) of the ITC Rules.
//         */
//        jSONObject = new JSONObject();
//        jSONObject.put("section", "11.5");
//        jSONObject.put("typeofsales", "Amount in terms of rule 8(1) (h) of the ITC Rules");
//        jSONObject.put("level", 1);
//        jSONObject.put("leaf", true);
//        jSONObject.put("fmt", "T");
//        dataJArr.put(jSONObject);
//        /**
//         * Amount in terms of rule 7 (2)(a) of ITC Rules.
//         */
//        jSONObject = new JSONObject();
//        jSONObject.put("section", "11.6");
//        jSONObject.put("typeofsales", "Amount in terms of rule 7 (2)(a) of ITC Rules");
//        jSONObject.put("level", 1);
//        jSONObject.put("leaf", true);
//        jSONObject.put("fmt", "T");
//        dataJArr.put(jSONObject);
//        /**
//         * Amount in terms of rule 7(2)(b) of ITC Rules .
//         */
//        jSONObject = new JSONObject();
//        jSONObject.put("section", "11.7");
//        jSONObject.put("typeofsales", "Amount in terms of rule 7(2)(b) of ITC Rules");
//        jSONObject.put("level", 1);
//        jSONObject.put("leaf", true);
//        jSONObject.put("fmt", "T");
//        dataJArr.put(jSONObject);
//        /**
//         * On account of amount paid subsequent to reversal of ITC.
//         */
//        jSONObject = new JSONObject();
//        jSONObject.put("section", "11.8");
//        jSONObject.put("typeofsales", "On account of amount paid subsequent to reversal of ITC");
//        jSONObject.put("level", 1);
//        jSONObject.put("leaf", true);
//        jSONObject.put("fmt", "T");
//        dataJArr.put(jSONObject);
//        /**
//         * Any other liability (Specify).
//         */
//        jSONObject = new JSONObject();
//        jSONObject.put("section", "11.9");
//        jSONObject.put("typeofsales", "Any other liability (Specify)");
//        jSONObject.put("level", 1);
//        jSONObject.put("leaf", true);
//        jSONObject.put("fmt", "T");
//        dataJArr.put(jSONObject);
        
        jSONObject = new JSONObject();
        jSONObject = getGSTComputation_Purchase_Section_11_10(params);
        jSONObject.put("section", "4.15");
        jSONObject.put("level", 0);
        jSONObject.put("fmt", "B");
//        jSONObject.put("leaf", true);
        jSONObject.put("enableViewDetail", true);
        jSONObject.put("heading", GSTRConstants.GST_COMPUTATION_SECTION_PURCHASES_11_10);
        jSONObject.put("typeofsales", GSTRConstants.GST_COMPUTATION_SECTION_PURCHASES_11_10);
        JSONObject ReversedITCObj = new JSONObject(jSONObject.toString());
        dataJArr.put(jSONObject);
        
        jSONObject = new JSONObject();
        jSONObject.put("section", "4.16");
        jSONObject.put("heading", "ITC Reclaimed");
        jSONObject.put("typeofsales", "ITC Reclaimed");
        jSONObject.put("level", 0);
//        jSONObject.put("leaf", true);
        jSONObject.put("fmt", "B");
        dataJArr.put(jSONObject);
        /**
         * ITC claimed on mismatched/duplication of invoices/debit notes.
         */
//        jSONObject = new JSONObject();
//        jSONObject.put("section", "12.1");
//        jSONObject.put("heading", "Addition & Reduction");
//        jSONObject.put("level", 0);
//        jSONObject.put("leaf", false);
//        jSONObject.put("fmt", "B");
//        jSONObject.put("typeofsales", "ITC claimed on mismatched/duplication of invoices/debit notes");
//        dataJArr.put(jSONObject);
//        /**
//         * Tax liability on mismatched credit notes.
//         */
//        jSONObject = new JSONObject();
//        jSONObject.put("section", "12.2");
//        jSONObject.put("typeofsales", "Tax liability on mismatched credit notes ");
//        jSONObject.put("level", 1);
//        jSONObject.put("leaf", true);
//        jSONObject.put("fmt", "T");
//        dataJArr.put(jSONObject);
//        /**
//         * Reclaim on account of rectification of mismatched invoices/debit
//         * notes .
//         */
//        jSONObject = new JSONObject();
//        jSONObject.put("section", "12.3");
//        jSONObject.put("typeofsales", "Reclaim on account of rectification of mismatched invoices/debit notes ");
//        jSONObject.put("level", 1);
//        jSONObject.put("leaf", true);
//        jSONObject.put("fmt", "T");
//        dataJArr.put(jSONObject);
//        /**
//         * Reclaim on account of rectification of mismatched credit note.
//         */
//        jSONObject = new JSONObject();
//        jSONObject.put("section", "12.4");
//        jSONObject.put("typeofsales", "Reclaim on account of rectification of mismatched credit note");
//        jSONObject.put("level", 1);
//        jSONObject.put("leaf", true);
//        jSONObject.put("fmt", "T");
//        dataJArr.put(jSONObject);
//        /**
//         * Negative tax liability from previous tax periods.
//         */
//        jSONObject = new JSONObject();
//        jSONObject.put("section", "12.5");
//        jSONObject.put("typeofsales", "Negative tax liability from previous tax periods");
//        jSONObject.put("level", 1);
//        jSONObject.put("leaf", true);
//        jSONObject.put("fmt", "T");
//        dataJArr.put(jSONObject);
//        /**
//         * Tax paid on advance in earlier tax periods and adjusted with tax on
//         * supplies made in current tax period.
//         */
//        jSONObject = new JSONObject();
//        jSONObject.put("section", "12.6");
//        jSONObject.put("typeofsales", "Tax paid on advance in earlier tax periods and adjusted with tax on supplies made in current tax period");
//        jSONObject.put("level", 1);
//        jSONObject.put("leaf", true);
//        jSONObject.put("fmt", "T");
//        dataJArr.put(jSONObject);

        /**
         * GST Payable.
         */
        jSONObject = new JSONObject();
//        jSONObject.put("section", "14.1");
        jSONObject.put("heading", "GST Payable");
        jSONObject.put("level", 0);
        jSONObject.put("leaf", false);
        jSONObject.put("fmt", "B");
        dataJArr.put(jSONObject);

//        salesSummaryTotal.put("section", "14.2");
        salesSummaryTotal.put("typeofsales", "Total Sales (Summary)");
        salesSummaryTotal.put("level", 1);
        salesSummaryTotal.put("leaf", true);
        salesSummaryTotal.put("fmt", "T");
        dataJArr.put(salesSummaryTotal);

//        purchaseSummaryTotal.put("section", "14.3");
        purchaseSummaryTotal.put("typeofsales", "Total Purchases (Summary)");
        purchaseSummaryTotal.put("level", 1);
        purchaseSummaryTotal.put("leaf", true);
        purchaseSummaryTotal.put("fmt", "T");
        dataJArr.put(purchaseSummaryTotal);

        jSONObject = new JSONObject();
        jSONObject.put("typeofsales", "Total GST Payable [11.7-(4.14-4.15+4.16)]");
        jSONObject.put("level", 1);
        jSONObject.put("leaf", true);
        jSONObject.put("fmt", "T");
        jSONObject.put("taxableamt", authHandler.formattedAmount(salesSummaryTotal.optDouble("taxableamt", 0.0) - purchaseSummaryTotal.optDouble("taxableamt", 0.0)+ReversedITCObj.optDouble("taxableamt", 0.0), companyId));
        jSONObject.put("igst", authHandler.formattedAmount(salesSummaryTotal.optDouble("igst", 0.0) - purchaseSummaryTotal.optDouble("igst", 0.0)+ReversedITCObj.optDouble("igst", 0.0), companyId));
        jSONObject.put("cgst", authHandler.formattedAmount(salesSummaryTotal.optDouble("cgst", 0.0) - purchaseSummaryTotal.optDouble("cgst", 0.0)+ReversedITCObj.optDouble("cgst", 0.0), companyId));
        jSONObject.put("csgst", authHandler.formattedAmount(salesSummaryTotal.optDouble("csgst", 0.0) - purchaseSummaryTotal.optDouble("csgst", 0.0)+ReversedITCObj.optDouble("csgst", 0.0), companyId));
        jSONObject.put("sgst", authHandler.formattedAmount(salesSummaryTotal.optDouble("sgst", 0.0) - purchaseSummaryTotal.optDouble("sgst", 0.0)+ReversedITCObj.optDouble("sgst", 0.0), companyId));
        jSONObject.put("totaltax", authHandler.formattedAmount(salesSummaryTotal.optDouble("totaltax", 0.0) - purchaseSummaryTotal.optDouble("totaltax", 0.0)+ReversedITCObj.optDouble("totaltax", 0.0), companyId));
        jSONObject.put("totalamount", authHandler.formattedAmount(salesSummaryTotal.optDouble("totalamount", 0.0) - purchaseSummaryTotal.optDouble("totalamount", 0.0)+ReversedITCObj.optDouble("totalamount", 0.0), companyId));
        dataJArr.put(jSONObject);
        
        jSONObject = new JSONObject();
        jSONObject = getGSTComputation_Purchase_Section_13_1(params);
        jSONObject.put("section", "4.17");
        jSONObject.put("heading", "Ineligible ITC");
        jSONObject.put("level", 0);
        jSONObject.put("enableViewDetail", true);
        jSONObject.put("leaf", false);
        jSONObject.put("fmt", "B");
        jSONObject.put("typeofsales", GSTRConstants.GST_COMPUTATION_SECTION_PURCHASES_13_1);
        dataJArr.put(jSONObject);
        
        jSONObject = new JSONObject();
        jSONObject = getGSTComputation_Purchase_Section_6(params);
        jSONObject.put("section", "5.1");
        jSONObject.put("heading", "Composition");
        jSONObject.put("level", 0);
        jSONObject.put("enableViewDetail", true);
        jSONObject.put("leaf", false);
        jSONObject.put("fmt", "B");
        jSONObject.put("typeofsales", GSTRConstants.GST_COMPUTATION_SECTION_PURCHASES_6);
        dataJArr.put(jSONObject);

        jSONObject = new JSONObject();
        jSONObject = getGSTComputation_Purchase_Section_7(params);
        jSONObject.put("level", 0);
        jSONObject.put("section", "5.2");
        jSONObject.put("enableViewDetail", true);
        jSONObject.put("heading", "Exempted");
        jSONObject.put("leaf", false);
        jSONObject.put("fmt", "B");
        jSONObject.put("typeofsales", GSTRConstants.GST_COMPUTATION_SECTION_PURCHASES_7);
        
        dataJArr.put(jSONObject);
        jSONObject = new JSONObject();
        jSONObject = getGSTComputation_Purchase_Section_7_1(params);
        jSONObject.put("section", "5.3");
        jSONObject.put("typeofsales", GSTRConstants.GST_COMPUTATION_SECTION_PURCHASES_7_1);
        jSONObject.put("level", 1);
        jSONObject.put("enableViewDetail", true);
        jSONObject.put("leaf", true);
        jSONObject.put("fmt", "T");
        dataJArr.put(jSONObject);
        
        jSONObject = new JSONObject();
        jSONObject = getGSTComputation_Purchase_Section_7_2(params);
        jSONObject.put("section", "5.4");
        jSONObject.put("typeofsales", GSTRConstants.GST_COMPUTATION_SECTION_PURCHASES_7_2);
        jSONObject.put("level", 1);
        jSONObject.put("leaf", true);
        jSONObject.put("enableViewDetail", true);
        jSONObject.put("fmt", "T");
        dataJArr.put(jSONObject);

        jSONObject = new JSONObject();
        jSONObject = getGSTComputation_Purchase_Section_2(params);
        jSONObject.put("section", "5.5");
        jSONObject.put("heading", "Unregistered");
        jSONObject.put("level", 0);
        jSONObject.put("enableViewDetail", true);
        jSONObject.put("leaf", false);
        jSONObject.put("fmt", "B");
        jSONObject.put("typeofsales", GSTRConstants.GST_COMPUTATION_SECTION_PURCHASES_2);
        dataJArr.put(jSONObject);
        
        JSONArray pagedJson = new JSONArray();
        pagedJson = dataJArr;
        if (!StringUtil.isNullOrEmpty(start) && !StringUtil.isNullOrEmpty(limit)) {
            pagedJson = StringUtil.getPagedJSON(pagedJson, Integer.parseInt(start), Integer.parseInt(limit));
        }
        object.put("totalCount", dataJArr.length());
        object.put("columns", jarrColumns);
        object.put("coldata", pagedJson);
        jMeta.put("totalProperty", "totalCount");
        jMeta.put("root", "coldata");
        jMeta.put("fields", jarrRecords);
        object.put("metaData", jMeta);
        if (params.optBoolean("isExport")) {
            object.put("data", dataJArr);
            object.put("columns", jarrColumns);
        }
        return object;
    }
    /**
     * GST computation details report
     *
     * @param params
     * @return
     * @throws ServiceException
     * @throws JSONException
     */
    public JSONObject getGSTComputationDetailReport(JSONObject params) throws ServiceException, JSONException {
        JSONObject object = new JSONObject();
        JSONObject jMeta = new JSONObject();
        JSONArray jarrColumns = new JSONArray();
        JSONArray jarrRecords = new JSONArray();
        JSONArray dataJArr = new JSONArray();
        String start = params.optString("start");
        String limit = params.optString("limit");
        String companyId = params.optString("companyid");
        params.put("companyid", companyId);
        /**
         * Put all required parameter for GST report
         */
        getEntityDataForRequestedModule(params);
        getColNumForRequestedModules(params);
        getLocalStateOfEntity(params);
        
        params.put(GSTR3BConstants.DETAILED_VIEW_REPORT, true);
        String section = params.optString("section");
        accGSTReportService.getColumnModelForGSTR3BDetails(jarrRecords, jarrColumns, params);
        JSONObject dataObj = new JSONObject();
        params.put(GSTR3BConstants.DETAILED_VIEW_REPORT, true);
        switch (section) {
            case GSTRConstants.GST_COMPUTATION_SECTION_SALES_1:
                dataObj = getGSTComputation_Sales_Section_1(params);
                break;
            case GSTRConstants.GST_COMPUTATION_SECTION_SALES_1_1:
                dataObj = getGSTComputation_Sales_Section_1_1(params);
                break;
            case GSTRConstants.GST_COMPUTATION_SECTION_SALES_1_2:
                dataObj = getGSTComputation_Sales_Section_1_2(params);
                break;
            case GSTRConstants.GST_COMPUTATION_SECTION_SALES_1_3:
                dataObj = getGSTComputation_Sales_Section_1_3(params);
                break;
            case GSTRConstants.GST_COMPUTATION_SECTION_SALES_2:
                dataObj = getGSTComputation_Sales_Section_2(params);
                break;
            case GSTRConstants.GST_COMPUTATION_SECTION_SALES_2_2:
                dataObj = getGSTComputation_Sales_Section_2_2(params);
                break;
            case GSTRConstants.GST_COMPUTATION_SECTION_SALES_3:
                dataObj = getGSTComputation_Sales_Section_3(params);
                break;
            case GSTRConstants.GST_COMPUTATION_SECTION_SALES_3_1:
                dataObj = getGSTComputation_Sales_Section_3_1(params);
                break;
            case GSTRConstants.GST_COMPUTATION_SECTION_SALES_4:
                dataObj = getGSTComputation_Sales_Section_4(params);
                break;
            case GSTRConstants.GST_COMPUTATION_SECTION_SALES_4_1:
                dataObj = getGSTComputation_Sales_Section_4_1(params);
                break;
            case GSTRConstants.GST_COMPUTATION_SECTION_SALES_4_2:
                dataObj = getGSTComputation_Sales_Section_4_2(params);
                break;
            case GSTRConstants.GST_COMPUTATION_SECTION_SALES_7:
                dataObj = getGSTComputation_Sales_Section_7(params);
                break;
            case GSTRConstants.GST_COMPUTATION_SECTION_SALES_7_1:
                dataObj = getGSTComputation_Sales_Section_7_1(params);
                break;
            case GSTRConstants.GST_COMPUTATION_SECTION_SALES_7_2:
                dataObj = getGSTComputation_Sales_Section_7_2(params);
                break;
            case GSTRConstants.GST_COMPUTATION_SECTION_SALES_7_3:
                dataObj = getGSTComputation_Sales_Section_7_3(params);
                break;
            case GSTRConstants.GST_COMPUTATION_SECTION_SALES_7_4:
                dataObj = getGSTComputation_Sales_Section_7_4(params);
                break;
            case GSTRConstants.GST_COMPUTATION_SECTION_SALES_7_5:
                dataObj = getGSTComputation_Sales_Section_7_5(params);
                break;
            case GSTRConstants.GST_COMPUTATION_SECTION_SALES_8:
                dataObj = getGSTComputation_Sales_Section_8(params);
                break;
            case GSTRConstants.GST_COMPUTATION_SECTION_SALES_9:
                dataObj = getGSTComputation_Sales_Section_9(params);
                break;
            case GSTRConstants.GST_COMPUTATION_SECTION_SALES_9_1:
                dataObj = getGSTComputation_Sales_Section_9_1(params);
                break;
            case GSTRConstants.GST_COMPUTATION_SECTION_SALES_9_2:
                dataObj = getGSTComputation_Sales_Section_9_2(params);
                break;
            case GSTRConstants.GST_COMPUTATION_SECTION_SALES_10:
                dataObj = getGSTComputation_Sales_Section_10(params);
                break;
            case GSTRConstants.GST_COMPUTATION_SECTION_SALES_10_1:
                dataObj = getGSTComputation_Sales_Section_10_1(params);
                break;
            case GSTRConstants.GST_COMPUTATION_SECTION_SALES_10_2:
                dataObj = getGSTComputation_Sales_Section_10_2(params);
                break;
            case GSTRConstants.GST_COMPUTATION_SECTION_PURCHASES_1:
                dataObj = getGSTComputation_Purchase_Section_1(params);
                break;
            case GSTRConstants.GST_COMPUTATION_SECTION_PURCHASES_1_1:
                dataObj = getGSTComputation_Purchase_Section_1_1(params);
                break;
            case GSTRConstants.GST_COMPUTATION_SECTION_PURCHASES_2:
                dataObj = getGSTComputation_Purchase_Section_2(params);
                break;
            case GSTRConstants.GST_COMPUTATION_SECTION_PURCHASES_3:
                dataObj = getGSTComputation_Purchase_Section_3(params);
                break;
            case GSTRConstants.GST_COMPUTATION_SECTION_PURCHASES_3_1:
                dataObj = getGSTComputation_Purchase_Section_3_1(params);
                break;
            case GSTRConstants.GST_COMPUTATION_SECTION_PURCHASES_3_2:
                dataObj = getGSTComputation_Purchase_Section_3_2(params);
                break;
            case GSTRConstants.GST_COMPUTATION_SECTION_PURCHASES_4:
                dataObj = getGSTComputation_Purchase_Section_4(params);
                break;
            case GSTRConstants.GST_COMPUTATION_SECTION_PURCHASES_5:
                dataObj = getGSTComputation_Purchase_Section_5(params);
                break;

            case GSTRConstants.GST_COMPUTATION_SECTION_PURCHASES_6:
                dataObj = getGSTComputation_Purchase_Section_6(params);
                break;
            case GSTRConstants.GST_COMPUTATION_SECTION_PURCHASES_7:
                dataObj = getGSTComputation_Purchase_Section_7(params);
                break;
            case GSTRConstants.GST_COMPUTATION_SECTION_PURCHASES_7_1:
                dataObj = getGSTComputation_Purchase_Section_7_1(params);
                break;
            case GSTRConstants.GST_COMPUTATION_SECTION_PURCHASES_7_2:
                dataObj = getGSTComputation_Purchase_Section_7_2(params);
                break;
            case GSTRConstants.GST_COMPUTATION_SECTION_PURCHASES_11:
                dataObj = getGSTComputation_Purchase_Section_11(params);
                break;
            case GSTRConstants.GST_COMPUTATION_SECTION_PURCHASES_12:
                dataObj = getGSTComputation_Purchase_Section_12(params);
                break;
            case GSTRConstants.GST_COMPUTATION_SECTION_PURCHASES_11_10:
                dataObj = getGSTComputation_Purchase_Section_11_10(params);
                break;    
            case GSTRConstants.GST_COMPUTATION_SECTION_PURCHASES_13_1:
                dataObj = getGSTComputation_Purchase_Section_13_1(params);
                break;                 
        }

        dataJArr = dataObj.has("data") ? dataObj.optJSONArray("data") : new JSONArray();
        JSONArray pagedJson = new JSONArray();
        pagedJson = dataJArr;
        if (!StringUtil.isNullOrEmpty(start) && !StringUtil.isNullOrEmpty(limit)) {
            pagedJson = StringUtil.getPagedJSON(pagedJson, Integer.parseInt(start), Integer.parseInt(limit));
        }
        object.put("totalCount", dataJArr.length());
        object.put("columns", jarrColumns);
        object.put("coldata", pagedJson);
        jMeta.put("totalProperty", "totalCount");
        jMeta.put("root", "coldata");
        jMeta.put("fields", jarrRecords);
        object.put("metaData", jMeta);
        return object;
    }
    /**
     * Function to put required parameter for GST reports in Request parameter
     *
     * @param params
     * @throws JSONException
     * @throws ServiceException
     */
    private void putRequiredParameterForGSTReports(JSONObject params) throws JSONException, ServiceException {
        /* * before starting sectional data need to get column no for Product Tax
         * Class (HSN)
         */
        String companyId = params.optString("companyid");
        int colnum = 0;
        HashMap fieldparams = new HashMap<>();
        fieldparams.put(Constants.filter_names, Arrays.asList(Constants.companyid, Constants.moduleid, "fieldname"));
        fieldparams.put(Constants.filter_values, Arrays.asList(companyId, Constants.Acc_Product_Master_ModuleId, "Custom_" + Constants.HSN_SACCODE));

        KwlReturnObject kwlReturnObjectGstCust = fieldManagerDAOobj.getFieldParams(fieldparams);
        List<FieldParams> fieldParamses = kwlReturnObjectGstCust.getEntityList();
        for (FieldParams fieldParams : fieldParamses) {
            colnum = fieldParams.getColnum();
        }
        params.put("hsncolnum", colnum);
        fieldparams.put(Constants.filter_names, Arrays.asList(Constants.companyid, Constants.moduleid, "fieldname"));
        fieldparams.put(Constants.filter_values, Arrays.asList(companyId, Constants.Acc_Product_Master_ModuleId, "Custom_" + Constants.GSTProdCategory));
        kwlReturnObjectGstCust = fieldManagerDAOobj.getFieldParams(fieldparams);
        fieldParamses = kwlReturnObjectGstCust.getEntityList();
        for (FieldParams fieldParams : fieldParamses) {
            colnum = fieldParams.getColnum();
        }
        params.put("taxclasscolnum", colnum);
        /**
         * Get Entity Value and its column no for invoice
         */
        fieldparams.put(Constants.filter_names, Arrays.asList(Constants.companyid, Constants.moduleid, "fieldname"));
        fieldparams.put(Constants.filter_values, Arrays.asList(companyId, Constants.Acc_Invoice_ModuleId, "Custom_" + Constants.ENTITY));
        String fieldid = "";
        kwlReturnObjectGstCust = fieldManagerDAOobj.getFieldParams(fieldparams);
        fieldParamses = kwlReturnObjectGstCust.getEntityList();
        for (FieldParams fieldParams : fieldParamses) {
            colnum = fieldParams.getColnum();
            fieldid = fieldParams.getId();
        }
        String entityValue = params.optString("entity");
        String ids = fieldManagerDAOobj.getIdsUsingParamsValueWithoutInsert(fieldid, entityValue);
        params.put("invoiceentitycolnum", colnum);
        params.put("invoiceentityValue", ids);
        fieldparams.put(Constants.filter_names, Arrays.asList(Constants.companyid, Constants.moduleid, "fieldname"));
        fieldparams.put(Constants.filter_values, Arrays.asList(companyId, Constants.Acc_Receive_Payment_ModuleId, "Custom_" + Constants.ENTITY));
        kwlReturnObjectGstCust = fieldManagerDAOobj.getFieldParams(fieldparams);
        fieldParamses = kwlReturnObjectGstCust.getEntityList();
        for (FieldParams fieldParams : fieldParamses) {
            colnum = fieldParams.getColnum();
            fieldid = fieldParams.getId();
        }
        ids = fieldManagerDAOobj.getIdsUsingParamsValueWithoutInsert(fieldid, entityValue);
        params.put("receiptentitycolnum", colnum);
        params.put("receiptentityValue", ids);

        fieldparams.put(Constants.filter_names, Arrays.asList(Constants.companyid, Constants.moduleid, "fieldname"));
        fieldparams.put(Constants.filter_values, Arrays.asList(companyId, Constants.Acc_Credit_Note_ModuleId, "Custom_" + Constants.ENTITY));
        kwlReturnObjectGstCust = fieldManagerDAOobj.getFieldParams(fieldparams);
        fieldParamses = kwlReturnObjectGstCust.getEntityList();
        for (FieldParams fieldParams : fieldParamses) {
            colnum = fieldParams.getColnum();
            fieldid = fieldParams.getId();
        }
        ids = fieldManagerDAOobj.getIdsUsingParamsValueWithoutInsert(fieldid, entityValue);
        params.put("cnentitycolnum", colnum);
        params.put("cnentityValue", ids);

        fieldparams.put(Constants.filter_names, Arrays.asList(Constants.companyid, Constants.moduleid, "fieldname"));
        fieldparams.put(Constants.filter_values, Arrays.asList(companyId, Constants.Acc_Vendor_Invoice_ModuleId, "Custom_" + Constants.ENTITY));
        kwlReturnObjectGstCust = fieldManagerDAOobj.getFieldParams(fieldparams);
        fieldParamses = kwlReturnObjectGstCust.getEntityList();
        for (FieldParams fieldParams : fieldParamses) {
            colnum = fieldParams.getColnum();
            fieldid = fieldParams.getId();
        }
        ids = fieldManagerDAOobj.getIdsUsingParamsValueWithoutInsert(fieldid, entityValue);
        params.put("goodsreceiptentitycolnum", colnum);
        params.put("goodsreceiptentityValue", ids);

        fieldparams.put(Constants.filter_names, Arrays.asList(Constants.companyid, Constants.moduleid, "fieldname"));
        fieldparams.put(Constants.filter_values, Arrays.asList(companyId, Constants.Acc_Debit_Note_ModuleId, "Custom_" + Constants.ENTITY));
        kwlReturnObjectGstCust = fieldManagerDAOobj.getFieldParams(fieldparams);
        fieldParamses = kwlReturnObjectGstCust.getEntityList();
        for (FieldParams fieldParams : fieldParamses) {
            colnum = fieldParams.getColnum();
            fieldid = fieldParams.getId();
        }
        ids = fieldManagerDAOobj.getIdsUsingParamsValueWithoutInsert(fieldid, entityValue);
        params.put("dnentitycolnum", colnum);
        params.put("dnentityValue", ids);

        fieldparams.put(Constants.filter_names, Arrays.asList(Constants.companyid, Constants.moduleid, "fieldname"));
        fieldparams.put(Constants.filter_values, Arrays.asList(companyId, Constants.Acc_Make_Payment_ModuleId, "Custom_" + Constants.ENTITY));
        kwlReturnObjectGstCust = fieldManagerDAOobj.getFieldParams(fieldparams);
        fieldParamses = kwlReturnObjectGstCust.getEntityList();
        for (FieldParams fieldParams : fieldParamses) {
            colnum = fieldParams.getColnum();
            fieldid = fieldParams.getId();
        }
        ids = fieldManagerDAOobj.getIdsUsingParamsValueWithoutInsert(fieldid, entityValue);
        params.put("paymententitycolnum", colnum);
        params.put("paymententityValue", ids);

        /**
         * get State column no for Invoice module
         */
        int colnumforstate = fieldManagerDAOobj.getColumnFromFieldParams(Constants.STATE, companyId, Constants.Acc_Invoice_ModuleId, 0);
        params.put("salesstatecolnum", colnumforstate);

        colnumforstate = fieldManagerDAOobj.getColumnFromFieldParams(Constants.STATE, companyId, Constants.Acc_Vendor_Invoice_ModuleId, 0);
        params.put("purchasestatecolnum", colnumforstate);

        String entityId = params.optString("entityid");
        params.put("companyid", companyId);
        params.put("entityid", entityId);
        String localState = fieldManagerDAOobj.getStateForEntity(params);
        params.put("localState", localState);
        params.put(GSTR3BConstants.DETAILED_VIEW_REPORT, true);
        /**
         * Put Asset Disposal/ Acquire Invoice Dimension column number details
         */
        putAssetInvoiceDimensionColumnDetails(params, params);
        /**
         * Put Lease Sales Invoice Dimension column number details
         */
        putLeaseInvoiceDimensionColumnDetails(params, params);
    }
    /**
     * Function to export GST computation detail report
     *
     * @param params
     * @return
     * @throws JSONException
     * @throws ServiceException
     */
    public HSSFWorkbook exportGSTComputationDetails(JSONObject params) throws JSONException, ServiceException {
        String companyId = params.optString("companyid");

        getEntityDataForRequestedModule(params);
        getColNumForRequestedModules(params);
        getLocalStateOfEntity(params);
        params.put(GSTR3BConstants.DETAILED_VIEW_REPORT, true);
        HSSFWorkbook wb = new HSSFWorkbook();
        JSONArray dataJArr = new JSONArray();

        JSONObject dataObj = getGSTComputation_Sales_Section_1(params);
        dataJArr = dataObj.has("data") ? dataObj.optJSONArray("data") : new JSONArray();
        AccGSTReportServiceImpl.writeDataForGSTR3B(wb, dataJArr, "Sales_4.1", GSTRConstants.GST_COMPUTATION_SECTION_SALES_1, params);

        dataObj = getGSTComputation_Sales_Section_1_1(params);
        dataJArr = dataObj.has("data") ? dataObj.optJSONArray("data") : new JSONArray();
        AccGSTReportServiceImpl.writeDataForGSTR3B(wb, dataJArr, "Sales_4.2", GSTRConstants.GST_COMPUTATION_SECTION_SALES_1_1, params);

        dataObj = getGSTComputation_Sales_Section_1_2(params);
        dataJArr = dataObj.has("data") ? dataObj.optJSONArray("data") : new JSONArray();
        AccGSTReportServiceImpl.writeDataForGSTR3B(wb, dataJArr, "Sales_4.3", GSTRConstants.GST_COMPUTATION_SECTION_SALES_1_2, params);

        dataObj = getGSTComputation_Sales_Section_1_3(params);
        dataJArr = dataObj.has("data") ? dataObj.optJSONArray("data") : new JSONArray();
        AccGSTReportServiceImpl.writeDataForGSTR3B(wb, dataJArr, "Sales_4.4", GSTRConstants.GST_COMPUTATION_SECTION_SALES_1_3, params);

        dataObj = getGSTComputation_Sales_Section_2(params);
        dataJArr = dataObj.has("data") ? dataObj.optJSONArray("data") : new JSONArray();
        AccGSTReportServiceImpl.writeDataForGSTR3B(wb, dataJArr, "Sales_5.1", GSTRConstants.GST_COMPUTATION_SECTION_SALES_2, params);

        dataObj = getGSTComputation_Sales_Section_2_2(params);
        dataJArr = dataObj.has("data") ? dataObj.optJSONArray("data") : new JSONArray();
        AccGSTReportServiceImpl.writeDataForGSTR3B(wb, dataJArr, "Sales_7.1", GSTRConstants.GST_COMPUTATION_SECTION_SALES_2_2, params);

        dataObj = getGSTComputation_Sales_Section_3(params);
        dataJArr = dataObj.has("data") ? dataObj.optJSONArray("data") : new JSONArray();
        AccGSTReportServiceImpl.writeDataForGSTR3B(wb, dataJArr, "Sales_6.1", GSTRConstants.GST_COMPUTATION_SECTION_SALES_3, params);

        dataObj = getGSTComputation_Sales_Section_3_1(params);
        dataJArr = dataObj.has("data") ? dataObj.optJSONArray("data") : new JSONArray();
        AccGSTReportServiceImpl.writeDataForGSTR3B(wb, dataJArr, "Sales_6.2", GSTRConstants.GST_COMPUTATION_SECTION_SALES_3_1, params);

        dataObj = getGSTComputation_Sales_Section_4(params);
        dataJArr = dataObj.has("data") ? dataObj.optJSONArray("data") : new JSONArray();
        AccGSTReportServiceImpl.writeDataForGSTR3B(wb, dataJArr, "Sales_8.1", GSTRConstants.GST_COMPUTATION_SECTION_SALES_4, params);

        dataObj = getGSTComputation_Sales_Section_4_1(params);
        dataJArr = dataObj.has("data") ? dataObj.optJSONArray("data") : new JSONArray();
        AccGSTReportServiceImpl.writeDataForGSTR3B(wb, dataJArr, "Sales_8.2", GSTRConstants.GST_COMPUTATION_SECTION_SALES_4_1, params);

        dataObj = getGSTComputation_Sales_Section_4_2(params);
        dataJArr = dataObj.has("data") ? dataObj.optJSONArray("data") : new JSONArray();
        AccGSTReportServiceImpl.writeDataForGSTR3B(wb, dataJArr, "Sales_8.3", GSTRConstants.GST_COMPUTATION_SECTION_SALES_4_2, params);

        dataObj = getGSTComputation_Sales_Section_7(params);
        dataJArr = dataObj.has("data") ? dataObj.optJSONArray("data") : new JSONArray();
        AccGSTReportServiceImpl.writeDataForGSTR3B(wb, dataJArr, "Sales_9.1", GSTRConstants.GST_COMPUTATION_SECTION_SALES_7, params);

        dataObj = getGSTComputation_Sales_Section_7_1(params);
        dataJArr = dataObj.has("data") ? dataObj.optJSONArray("data") : new JSONArray();
        AccGSTReportServiceImpl.writeDataForGSTR3B(wb, dataJArr, "Sales_9.2", GSTRConstants.GST_COMPUTATION_SECTION_SALES_7_1, params);

        dataObj = getGSTComputation_Sales_Section_7_2(params);
        dataJArr = dataObj.has("data") ? dataObj.optJSONArray("data") : new JSONArray();
        AccGSTReportServiceImpl.writeDataForGSTR3B(wb, dataJArr, "Sales_9.3", GSTRConstants.GST_COMPUTATION_SECTION_SALES_7_2, params);

        dataObj = getGSTComputation_Sales_Section_7_3(params);
        dataJArr = dataObj.has("data") ? dataObj.optJSONArray("data") : new JSONArray();
        AccGSTReportServiceImpl.writeDataForGSTR3B(wb, dataJArr, "Sales_9.4", GSTRConstants.GST_COMPUTATION_SECTION_SALES_7_3, params);

        dataObj = getGSTComputation_Sales_Section_7_4(params);
        dataJArr = dataObj.has("data") ? dataObj.optJSONArray("data") : new JSONArray();
        AccGSTReportServiceImpl.writeDataForGSTR3B(wb, dataJArr, "Sales_9.5", GSTRConstants.GST_COMPUTATION_SECTION_SALES_7_4, params);

        dataObj = getGSTComputation_Sales_Section_7_5(params);
        dataJArr = dataObj.has("data") ? dataObj.optJSONArray("data") : new JSONArray();
        AccGSTReportServiceImpl.writeDataForGSTR3B(wb, dataJArr, "Sales_9.6", GSTRConstants.GST_COMPUTATION_SECTION_SALES_7_5, params);

        dataObj = getGSTComputation_Sales_Section_8(params);
        dataJArr = dataObj.has("data") ? dataObj.optJSONArray("data") : new JSONArray();
        AccGSTReportServiceImpl.writeDataForGSTR3B(wb, dataJArr, "Sales_9.7", GSTRConstants.GST_COMPUTATION_SECTION_SALES_8, params);

        dataObj = getGSTComputation_Sales_Section_9(params);
        dataJArr = dataObj.has("data") ? dataObj.optJSONArray("data") : new JSONArray();
        AccGSTReportServiceImpl.writeDataForGSTR3B(wb, dataJArr, "Sales_11.1", GSTRConstants.GST_COMPUTATION_SECTION_SALES_9, params);

        dataObj = getGSTComputation_Sales_Section_9_1(params);
        dataJArr = dataObj.has("data") ? dataObj.optJSONArray("data") : new JSONArray();
        AccGSTReportServiceImpl.writeDataForGSTR3B(wb, dataJArr, "Sales_11.2", GSTRConstants.GST_COMPUTATION_SECTION_SALES_9_1, params);

        dataObj = getGSTComputation_Sales_Section_9_2(params);
        dataJArr = dataObj.has("data") ? dataObj.optJSONArray("data") : new JSONArray();
        AccGSTReportServiceImpl.writeDataForGSTR3B(wb, dataJArr, "Sales_11.3", GSTRConstants.GST_COMPUTATION_SECTION_SALES_9_2, params);

        dataObj = getGSTComputation_Sales_Section_10(params);
        dataJArr = dataObj.has("data") ? dataObj.optJSONArray("data") : new JSONArray();
        AccGSTReportServiceImpl.writeDataForGSTR3B(wb, dataJArr, "Sales_11.4", GSTRConstants.GST_COMPUTATION_SECTION_SALES_10, params);

        dataObj = getGSTComputation_Sales_Section_10_1(params);
        dataJArr = dataObj.has("data") ? dataObj.optJSONArray("data") : new JSONArray();
        AccGSTReportServiceImpl.writeDataForGSTR3B(wb, dataJArr, "Sales_11.5", GSTRConstants.GST_COMPUTATION_SECTION_SALES_10_1, params);

        dataObj = getGSTComputation_Sales_Section_10_2(params);
        dataJArr = dataObj.has("data") ? dataObj.optJSONArray("data") : new JSONArray();
        AccGSTReportServiceImpl.writeDataForGSTR3B(wb, dataJArr, "Sales_11.6", GSTRConstants.GST_COMPUTATION_SECTION_SALES_10_2, params);

        dataObj = getGSTComputation_Purchase_Section_1(params);
        dataJArr = dataObj.has("data") ? dataObj.optJSONArray("data") : new JSONArray();
        AccGSTReportServiceImpl.writeDataForGSTR3B(wb, dataJArr, "Purchases_4.1", GSTRConstants.GST_COMPUTATION_SECTION_PURCHASES_1, params);

        dataObj = getGSTComputation_Purchase_Section_1_1(params);
        dataJArr = dataObj.has("data") ? dataObj.optJSONArray("data") : new JSONArray();
        AccGSTReportServiceImpl.writeDataForGSTR3B(wb, dataJArr, "Purchases_4.2", GSTRConstants.GST_COMPUTATION_SECTION_PURCHASES_1_1, params);

        dataObj = getGSTComputation_Purchase_Section_3(params);
        dataJArr = dataObj.has("data") ? dataObj.optJSONArray("data") : new JSONArray();
        AccGSTReportServiceImpl.writeDataForGSTR3B(wb, dataJArr, "Purchases_4.3", GSTRConstants.GST_COMPUTATION_SECTION_PURCHASES_3, params);

        dataObj = getGSTComputation_Purchase_Section_3_1(params);
        dataJArr = dataObj.has("data") ? dataObj.optJSONArray("data") : new JSONArray();
        AccGSTReportServiceImpl.writeDataForGSTR3B(wb, dataJArr, "Purchases_4.4", GSTRConstants.GST_COMPUTATION_SECTION_PURCHASES_3_1, params);

        dataObj = getGSTComputation_Purchase_Section_3_2(params);
        dataJArr = dataObj.has("data") ? dataObj.optJSONArray("data") : new JSONArray();
        AccGSTReportServiceImpl.writeDataForGSTR3B(wb, dataJArr, "Purchases_4.5", GSTRConstants.GST_COMPUTATION_SECTION_PURCHASES_3_2, params);

        dataObj = getGSTComputation_Purchase_Section_4(params);
        dataJArr = dataObj.has("data") ? dataObj.optJSONArray("data") : new JSONArray();
        AccGSTReportServiceImpl.writeDataForGSTR3B(wb, dataJArr, "Purchases_4.6", GSTRConstants.GST_COMPUTATION_SECTION_PURCHASES_4, params);

        dataObj = getGSTComputation_Purchase_Section_5(params);
        dataJArr = dataObj.has("data") ? dataObj.optJSONArray("data") : new JSONArray();
        AccGSTReportServiceImpl.writeDataForGSTR3B(wb, dataJArr, "Purchases_4.7", GSTRConstants.GST_COMPUTATION_SECTION_PURCHASES_5, params);

        dataObj = getGSTComputation_Purchase_Section_11(params);
        dataJArr = dataObj.has("data") ? dataObj.optJSONArray("data") : new JSONArray();
        AccGSTReportServiceImpl.writeDataForGSTR3B(wb, dataJArr, "Purchases_4.12", GSTRConstants.GST_COMPUTATION_SECTION_PURCHASES_11, params);

        dataObj = getGSTComputation_Purchase_Section_12(params);
        dataJArr = dataObj.has("data") ? dataObj.optJSONArray("data") : new JSONArray();
        AccGSTReportServiceImpl.writeDataForGSTR3B(wb, dataJArr, "Purchases_4.13", GSTRConstants.GST_COMPUTATION_SECTION_PURCHASES_12, params);

        dataObj = getGSTComputation_Purchase_Section_11_10(params);
        dataJArr = dataObj.has("data") ? dataObj.optJSONArray("data") : new JSONArray();
        AccGSTReportServiceImpl.writeDataForGSTR3B(wb, dataJArr, "Purchases_4.15", GSTRConstants.GST_COMPUTATION_SECTION_PURCHASES_11_10, params);

        dataObj = getGSTComputation_Purchase_Section_13_1(params);
        dataJArr = dataObj.has("data") ? dataObj.optJSONArray("data") : new JSONArray();
        AccGSTReportServiceImpl.writeDataForGSTR3B(wb, dataJArr, "Purchases_4.17", GSTRConstants.GST_COMPUTATION_SECTION_PURCHASES_13_1, params);

        dataObj = getGSTComputation_Purchase_Section_6(params);
        dataJArr = dataObj.has("data") ? dataObj.optJSONArray("data") : new JSONArray();
        AccGSTReportServiceImpl.writeDataForGSTR3B(wb, dataJArr, "Purchases_5.1", GSTRConstants.GST_COMPUTATION_SECTION_PURCHASES_6, params);

        dataObj = getGSTComputation_Purchase_Section_7(params);
        dataJArr = dataObj.has("data") ? dataObj.optJSONArray("data") : new JSONArray();
        AccGSTReportServiceImpl.writeDataForGSTR3B(wb, dataJArr, "Purchases_5.2", GSTRConstants.GST_COMPUTATION_SECTION_PURCHASES_7, params);

        dataObj = getGSTComputation_Purchase_Section_7_1(params);
        dataJArr = dataObj.has("data") ? dataObj.optJSONArray("data") : new JSONArray();
        AccGSTReportServiceImpl.writeDataForGSTR3B(wb, dataJArr, "Purchases_5.3", GSTRConstants.GST_COMPUTATION_SECTION_PURCHASES_7_1, params);

        dataObj = getGSTComputation_Purchase_Section_7_2(params);
        dataJArr = dataObj.has("data") ? dataObj.optJSONArray("data") : new JSONArray();
        AccGSTReportServiceImpl.writeDataForGSTR3B(wb, dataJArr, "Purchases_5.4", GSTRConstants.GST_COMPUTATION_SECTION_PURCHASES_7_2, params);

        dataObj = getGSTComputation_Purchase_Section_2(params);
        dataJArr = dataObj.has("data") ? dataObj.optJSONArray("data") : new JSONArray();
        AccGSTReportServiceImpl.writeDataForGSTR3B(wb, dataJArr, "Purchases_5.5", GSTRConstants.GST_COMPUTATION_SECTION_PURCHASES_2, params);
        return wb;
    }
    private void getColumnModelForGSTR3B(JSONArray jarrRecords, JSONArray jarrColumns, JSONObject params) throws JSONException {
        
        Locale requestcontextutilsobj = null;
        if (params.has("requestcontextutilsobj")) {
            requestcontextutilsobj = (Locale) params.opt("requestcontextutilsobj");
        }
        JSONObject jobjTemp = new JSONObject();
        String storeRec = "tableno,particulars,taxableamt,totaltax,totalamount,view,igst,sgst,cgst,csgst,enableViewDetail,showBold,isLabel,section,taxclasstype";

        String[] recArr = storeRec.split(",");
        // Get those fields in record for whome, no special properties present like type, defVal, mapping etc.
        for (String rec : recArr) {
            jobjTemp = new JSONObject();
            jobjTemp.put("name", rec);
            jarrRecords.put(jobjTemp);
        }

        jobjTemp = new JSONObject();
        jobjTemp.put("header", "Section");
        jobjTemp.put("dataIndex", "tableno");
        jobjTemp.put("width", 150);
        jobjTemp.put("align", "left");
        jobjTemp.put("pdfwidth", 150);
        jarrColumns.put(jobjTemp);
        
        jobjTemp = new JSONObject();
        jobjTemp.put("header", "taxclasstype");
        jobjTemp.put("dataIndex", "taxclasstype");
        jobjTemp.put("width", 150);
        jobjTemp.put("hidden", true);
        jobjTemp.put("align", "left");
        jobjTemp.put("pdfwidth", 150);
        jarrColumns.put(jobjTemp);
        jobjTemp = new JSONObject();
        jobjTemp.put("header", messageSource.getMessage("acc.balanceSheet.particulars", null, requestcontextutilsobj));
        jobjTemp.put("dataIndex", "particulars");
        jobjTemp.put("width", 400);
        jobjTemp.put("align", "left");
        jobjTemp.put("pdfwidth", 400);
        jobjTemp.put("renderer", "function(value){var res = \"<span class='gridRow'  wtf:qtip='\"+value+\"'>\"+value+\"</span>\";return res;}");//Added renderer for tooltip
        jarrColumns.put(jobjTemp);

        jobjTemp = new JSONObject();
        jobjTemp.put("header", "Taxable Value");
        jobjTemp.put("dataIndex", "taxableamt");
        jobjTemp.put("width", 150);
        jobjTemp.put("align", "right");
//        jobjTemp.put("renderer", "this.currencyDeletedRenderer");
        jobjTemp.put("renderer", "this.currencyDeletedRenderer");
        jobjTemp.put("pdfwidth", 150);
        jarrColumns.put(jobjTemp);

        jobjTemp = new JSONObject();
        jobjTemp.put("header", "Integrated Tax Amount");
        jobjTemp.put("dataIndex", "igst");
        jobjTemp.put("width", 150);
        jobjTemp.put("align", "right");
//        jobjTemp.put("renderer", "this.currencyDeletedRenderer");
        jobjTemp.put("renderer", "this.currencyDeletedRenderer");
        jobjTemp.put("pdfwidth", 150);
        jarrColumns.put(jobjTemp);

        jobjTemp = new JSONObject();
        jobjTemp.put("header", "Central Tax Amount");
        jobjTemp.put("dataIndex", "cgst");
//        jobjTemp.put("renderer", "this.currencyDeletedRenderer");
        jobjTemp.put("renderer", "this.currencyDeletedRenderer");
        jobjTemp.put("width", 150);
        jobjTemp.put("align", "right");
        jobjTemp.put("pdfwidth", 150);
        jarrColumns.put(jobjTemp);

        jobjTemp = new JSONObject();
        jobjTemp.put("header", "State Tax Amount");
//        jobjTemp.put("renderer", "this.currencyDeletedRenderer");
        jobjTemp.put("renderer", "this.currencyDeletedRenderer");
        jobjTemp.put("dataIndex", "sgst");
        jobjTemp.put("width", 150);
        jobjTemp.put("align", "right");
        jobjTemp.put("pdfwidth", 150);
        jarrColumns.put(jobjTemp);

        jobjTemp = new JSONObject();
        jobjTemp.put("header", "Cess Amount");
        jobjTemp.put("dataIndex", "csgst");
        jobjTemp.put("width", 150);
        jobjTemp.put("align", "right");
//        jobjTemp.put("renderer", "this.currencyDeletedRenderer");
        jobjTemp.put("renderer", "this.currencyDeletedRenderer");
        jobjTemp.put("pdfwidth", 150);
        jarrColumns.put(jobjTemp);

        jobjTemp = new JSONObject();
        jobjTemp.put("header", messageSource.getMessage("acc.invoicegrid.TaxAmount", null, requestcontextutilsobj));
        jobjTemp.put("dataIndex", "totaltax");
//        jobjTemp.put("renderer", "this.currencyDeletedRenderer");
        jobjTemp.put("renderer", "this.currencyDeletedRenderer");
        jobjTemp.put("width", 150);
        jobjTemp.put("align", "right");
        jobjTemp.put("pdfwidth", 150);
        jarrColumns.put(jobjTemp);

        jobjTemp = new JSONObject();
        jobjTemp.put("header", messageSource.getMessage("acc.lp.dishonouredChequeView", null, requestcontextutilsobj));
        jobjTemp.put("dataIndex", "view");
        jobjTemp.put("width", 100);
        jobjTemp.put("align", "center");
        jobjTemp.put("pdfwidth", 100);
        jobjTemp.put("renderer", "");
        jarrColumns.put(jobjTemp);
    }

    private JSONObject getGSTR3B_Section_3_1_Data(JSONObject params, String companyId, JSONArray dataJArr, JSONArray exportJSONArr) throws JSONException, ServiceException {
        
        double total_csgst, total_cgst, total_sgst, total_igst, total_taxableamount, total_tax, total_amount;
        /**
         * 3.1 (a) start.
         */
        JSONObject jSONObject = new JSONObject();
        jSONObject.put("tableno", "3.1");
        jSONObject.put("particulars", "Outward supplies and inward supplies liable to reverse charge");
        jSONObject.put("fmt", "B");
        jSONObject.put("showBold", true);
        jSONObject.put("isLabel", true);

        dataJArr.put(jSONObject);

        jSONObject = getGSTR3B_Section_3_1_A_Data(params, companyId, dataJArr);
        total_csgst = jSONObject.optDouble("csgst", 0.0);
        total_cgst = jSONObject.optDouble("cgst", 0.0);
        total_sgst = jSONObject.optDouble("sgst", 0.0);
        total_igst = jSONObject.optDouble("igst", 0.0);
        total_taxableamount = jSONObject.optDouble("taxableamt", 0.0);
        total_tax = jSONObject.optDouble("totaltax", 0.0);
        total_amount = jSONObject.optDouble("totalamount", 0.0);
        
        JSONObject osup_details = new JSONObject();
        osup_details.put("txval", jSONObject.optDouble("taxableamt", 0.0));
        osup_details.put("iamt", jSONObject.optDouble("igst", 0.0));
        osup_details.put("camt", jSONObject.optDouble("cgst", 0.0));
        osup_details.put("samt", jSONObject.optDouble("sgst", 0.0));
        osup_details.put("csamt", jSONObject.optDouble("csgst", 0.0));
        JSONObject exportJSON = new JSONObject();
        exportJSON.put("osup_details", osup_details);
        exportJSONArr.put(exportJSON);

        /**
         * 3.1 (b) start.
         */
        jSONObject = getGSTR3B_Section_3_1_B_Data(params, companyId, dataJArr);

        total_csgst += jSONObject.optDouble("csgst", 0.0);
        total_cgst += jSONObject.optDouble("cgst", 0.0);
        total_sgst += jSONObject.optDouble("sgst", 0.0);
        total_igst += jSONObject.optDouble("igst", 0.0);
        total_taxableamount += jSONObject.optDouble("taxableamt", 0.0);
        total_tax += jSONObject.optDouble("totaltax", 0.0);
        total_amount += jSONObject.optDouble("totalamount", 0.0);

        JSONObject osup_zero = new JSONObject();
        osup_zero.put("txval", jSONObject.optDouble("taxableamt", 0.0));
        osup_zero.put("iamt", jSONObject.optDouble("igst", 0.0));
        osup_zero.put("camt", jSONObject.optDouble("cgst", 0.0));
        osup_zero.put("samt", jSONObject.optDouble("sgst", 0.0));
        osup_zero.put("csamt", jSONObject.optDouble("csgst", 0.0));
        exportJSON = new JSONObject();
        exportJSON.put("osup_zero", osup_zero);
        exportJSONArr.put(exportJSON);
        
        
        jSONObject = getGSTR3B_Section_3_1_C_Data(params, companyId, dataJArr);

        total_csgst += jSONObject.optDouble("csgst", 0.0);
        total_cgst += jSONObject.optDouble("cgst", 0.0);
        total_sgst += jSONObject.optDouble("sgst", 0.0);
        total_igst += jSONObject.optDouble("igst", 0.0);
        total_taxableamount += jSONObject.optDouble("taxableamt", 0.0);
        total_tax += jSONObject.optDouble("totaltax", 0.0);
        total_amount += jSONObject.optDouble("totalamount", 0.0);

        JSONObject osup_nil_exmp = new JSONObject();
        osup_nil_exmp.put("txval", jSONObject.optDouble("taxableamt", 0.0));
        osup_nil_exmp.put("iamt", jSONObject.optDouble("igst", 0.0));
        osup_nil_exmp.put("camt", jSONObject.optDouble("cgst", 0.0));
        osup_nil_exmp.put("samt", jSONObject.optDouble("sgst", 0.0));
        osup_nil_exmp.put("csamt", jSONObject.optDouble("csgst", 0.0));
        exportJSON = new JSONObject();
        exportJSON.put("osup_nil_exmp", osup_nil_exmp);
        exportJSONArr.put(exportJSON);
        
        /**
         * 3.1 (d) start.
         */
        jSONObject = getGSTR3B_Section_3_1_D_Data(params, companyId, dataJArr);
        total_csgst += jSONObject.optDouble("csgst", 0.0);
        total_cgst += jSONObject.optDouble("cgst", 0.0);
        total_sgst += jSONObject.optDouble("sgst", 0.0);
        total_igst += jSONObject.optDouble("igst", 0.0);
        total_taxableamount += jSONObject.optDouble("taxableamt", 0.0);
        total_tax += jSONObject.optDouble("totaltax", 0.0);
        total_amount += jSONObject.optDouble("totalamount", 0.0);

        JSONObject isup_rev = new JSONObject();
        isup_rev.put("txval", jSONObject.optDouble("taxableamt", 0.0));
        isup_rev.put("iamt", jSONObject.optDouble("igst", 0.0));
        isup_rev.put("camt", jSONObject.optDouble("cgst", 0.0));
        isup_rev.put("samt", jSONObject.optDouble("sgst", 0.0));
        isup_rev.put("csamt", jSONObject.optDouble("csgst", 0.0));
        exportJSON = new JSONObject();
        exportJSON.put("isup_rev", isup_rev);
        exportJSONArr.put(exportJSON);
        /**
         * 3.1 (e) start.
         */
        jSONObject = getGSTR3B_Section_3_1_E_Data(params, companyId, dataJArr);

        total_csgst += jSONObject.optDouble("csgst", 0.0);
        total_cgst += jSONObject.optDouble("cgst", 0.0);
        total_sgst += jSONObject.optDouble("sgst", 0.0);
        total_igst += jSONObject.optDouble("igst", 0.0);
        total_taxableamount += jSONObject.optDouble("taxableamt", 0.0);
        total_tax += jSONObject.optDouble("totaltax", 0.0);
        total_amount += jSONObject.optDouble("totalamount", 0.0);
        
        JSONObject osup_nongst = new JSONObject();
        osup_nongst.put("txval", jSONObject.optDouble("taxableamt", 0.0));
        osup_nongst.put("iamt", jSONObject.optDouble("igst", 0.0));
        osup_nongst.put("camt", jSONObject.optDouble("cgst", 0.0));
        osup_nongst.put("samt", jSONObject.optDouble("sgst", 0.0));
        osup_nongst.put("csamt", jSONObject.optDouble("csgst", 0.0));
        exportJSON = new JSONObject();
        exportJSON.put("osup_nongst", osup_nongst);
        exportJSONArr.put(exportJSON);
        
        /**
         * Total 3.1.
         */
        jSONObject = new JSONObject();
        jSONObject.put("tableno", "");
        jSONObject.put("particulars", "3.1 Total [(a)+(b)+(c)+(d)+(e)]");
        jSONObject.put("fmt", "B");
        jSONObject.put("showBold", true);
        jSONObject.put("taxableamt", authHandler.formattedAmount(total_taxableamount, companyId));
        jSONObject.put("igst", authHandler.formattedAmount(total_igst, companyId));
        jSONObject.put("cgst", authHandler.formattedAmount(total_cgst, companyId));
        jSONObject.put("sgst", authHandler.formattedAmount(total_sgst, companyId));
        jSONObject.put("csgst", authHandler.formattedAmount(total_csgst, companyId));
        jSONObject.put("totaltax", authHandler.formattedAmount(total_tax, companyId));
        jSONObject.put("totalamount", authHandler.formattedAmount(total_amount, companyId));
        dataJArr.put(jSONObject);
        
        return jSONObject;
    }

    private JSONObject getGSTR3B_Section_3_1_A_Data(JSONObject params, String companyId, JSONArray dataJArr) throws JSONException, ServiceException {
        
        JSONObject jSONObject = new JSONObject();
        /**
         * REGTYPE:Regular. RCM:Both. CUSTTYPE:NA. Interstate/Intrastate: Both.
         */

        JSONObject reqParams = new JSONObject(params, JSONObject.getNames(params));
        reqParams.put("isGSTINnull", false);
        reqParams.put("GST3B", !params.optBoolean(GSTR3BConstants.DETAILED_VIEW_REPORT,false));
        reqParams.put("registrationType", Constants.GSTRegType_Regular);
        reqParams.put("CustomerType", Constants.CUSTVENTYPE_NA);
//        reqParams.put("isRCMApplicable", false);
        reqParams.put("typeofjoinisleft", true);
        reqParams.put("taxClassType", FieldComboData.TaxClass_Percenatge);
        if ((reqParams.has("reportid") && reqParams.optInt("reportid", 0) == Constants.GSTR3B_Summary_Report) || (!StringUtil.isNullOrEmpty(params.optString("transactionType", null)) && (params.optInt("transactionType", 0) == GSTRConstants.GSTR3B_TRANSACTION_TYPE_INVOICE || params.optInt("transactionType", 0) == GSTRConstants.GSTR3B_TRANSACTION_TYPE_ALL))) {
            /**
             * For GSTR3B-Detail View.
             */
            jSONObject = getInvoiceForGSTR3BTaxable(reqParams);
        }
        if (!(reqParams.has("reportid") && reqParams.optInt("reportid", 0) == Constants.GSTR3B_Summary_Report) && params.optBoolean(GSTR3BConstants.DETAILED_VIEW_REPORT, false)) {
            JSONArray tempArr = jSONObject.optJSONArray("data");
            if (tempArr != null && tempArr.length() > 0) {
                dataJArr = StringUtil.concatJSONArray(dataJArr, tempArr);
            }
        }
       
        /**
         * REGTYPE:Composition. RCM:Both.CUSTTYPE:NA. Interstate/Intrastate:
         * Both.
         */
        reqParams = new JSONObject(params, JSONObject.getNames(params));
        reqParams.put("isGSTINnull", false);
        reqParams.put("GST3B",!params.optBoolean(GSTR3BConstants.DETAILED_VIEW_REPORT,false));
//        reqParams.put("intrastate", true);
//        reqParams.put("isRCMApplicable", false);
        reqParams.put("registrationType", Constants.GSTRegType_Composition);
        reqParams.put("CustomerType", Constants.CUSTVENTYPE_NA);
        reqParams.put("taxClassType", FieldComboData.TaxClass_Percenatge);
        reqParams.put("typeofjoinisleft", true);
        JSONObject temp = new JSONObject();
        if ((reqParams.has("reportid") && reqParams.optInt("reportid", 0) == Constants.GSTR3B_Summary_Report) || (!StringUtil.isNullOrEmpty(params.optString("transactionType", null)) && (params.optInt("transactionType", 0) == GSTRConstants.GSTR3B_TRANSACTION_TYPE_INVOICE || params.optInt("transactionType", 0) == GSTRConstants.GSTR3B_TRANSACTION_TYPE_ALL))) {
            temp = getInvoiceForGSTR3BTaxable(reqParams);
        }
        if (!(reqParams.has("reportid") && reqParams.optInt("reportid", 0) == Constants.GSTR3B_Summary_Report) && params.optBoolean(GSTR3BConstants.DETAILED_VIEW_REPORT, false)) {
            JSONArray tempArr = temp.optJSONArray("data");
            if (tempArr != null && tempArr.length() > 0) {
                dataJArr = StringUtil.concatJSONArray(dataJArr, tempArr);
            }
        } else {
            jSONObject.put("taxableamt", authHandler.formattedAmount((jSONObject.optDouble("taxableamt", 0.0) + temp.optDouble("taxableamt", 0.0)), companyId));
            jSONObject.put("igst", authHandler.formattedAmount((jSONObject.optDouble("igst", 0.0) + temp.optDouble("igst", 0.0)), companyId));
            jSONObject.put("cgst", authHandler.formattedAmount((jSONObject.optDouble("cgst", 0.0) + temp.optDouble("cgst", 0.0)), companyId));
            jSONObject.put("sgst", authHandler.formattedAmount((jSONObject.optDouble("sgst", 0.0) + temp.optDouble("sgst", 0.0)), companyId));
            jSONObject.put("csgst", authHandler.formattedAmount((jSONObject.optDouble("csgst", 0.0) + temp.optDouble("csgst", 0.0)), companyId));
            jSONObject.put("totaltax", authHandler.formattedAmount((jSONObject.optDouble("totaltax", 0.0) + temp.optDouble("totaltax", 0.0)), companyId));
            jSONObject.put("totalamount", authHandler.formattedAmount((jSONObject.optDouble("totalamount", 0.0) + temp.optDouble("totalamount", 0.0)), companyId));
        }
        
        /**
         * REGTYPE:Unregistered. RCM:Both.CUSTTYPE:NA. Interstate/Intrastate:
         * Both.
         */
        reqParams = new JSONObject(params, JSONObject.getNames(params));
        reqParams.put("GST3B",!params.optBoolean(GSTR3BConstants.DETAILED_VIEW_REPORT,false));
        reqParams.put("isGSTINnull", true);
//        reqParams.put("greaterlimit", true);
//        reqParams.put("limitamount", 250000);
        reqParams.put("registrationType", Constants.GSTRegType_Unregistered);
        reqParams.put("CustomerType", Constants.CUSTVENTYPE_NA);
        reqParams.put("taxClassType", FieldComboData.TaxClass_Percenatge);
//        reqParams.put("intrastate", true);
        temp = new JSONObject();
        if ((reqParams.has("reportid") && reqParams.optInt("reportid", 0) == Constants.GSTR3B_Summary_Report) || (!StringUtil.isNullOrEmpty(params.optString("transactionType", null)) && (params.optInt("transactionType", 0) == GSTRConstants.GSTR3B_TRANSACTION_TYPE_INVOICE || params.optInt("transactionType", 0) == GSTRConstants.GSTR3B_TRANSACTION_TYPE_ALL))) {
            temp = getInvoiceForGSTR3BTaxable(reqParams);
        }
        if (!(reqParams.has("reportid") && reqParams.optInt("reportid", 0) == Constants.GSTR3B_Summary_Report) && params.optBoolean(GSTR3BConstants.DETAILED_VIEW_REPORT, false)) {
            JSONArray tempArr = temp.optJSONArray("data");
            if (tempArr != null && tempArr.length() > 0) {
                dataJArr = StringUtil.concatJSONArray(dataJArr, tempArr);
            }
        } else {
            jSONObject.put("taxableamt", authHandler.formattedAmount((jSONObject.optDouble("taxableamt", 0.0) + temp.optDouble("taxableamt", 0.0)), companyId));
            jSONObject.put("igst", authHandler.formattedAmount((jSONObject.optDouble("igst", 0.0) + temp.optDouble("igst", 0.0)), companyId));
            jSONObject.put("cgst", authHandler.formattedAmount((jSONObject.optDouble("cgst", 0.0) + temp.optDouble("cgst", 0.0)), companyId));
            jSONObject.put("sgst", authHandler.formattedAmount((jSONObject.optDouble("sgst", 0.0) + temp.optDouble("sgst", 0.0)), companyId));
            jSONObject.put("csgst", authHandler.formattedAmount((jSONObject.optDouble("csgst", 0.0) + temp.optDouble("csgst", 0.0)), companyId));
            jSONObject.put("totaltax", authHandler.formattedAmount((jSONObject.optDouble("totaltax", 0.0) + temp.optDouble("totaltax", 0.0)), companyId));
            jSONObject.put("totalamount", authHandler.formattedAmount((jSONObject.optDouble("totalamount", 0.0) + temp.optDouble("totalamount", 0.0)), companyId));
        }

        /**
         * REGTYPE:Regular,Unregistered,Composition.CUSTTYPE:NA.
         * Interstate/Intrastate: Both.
         */
        reqParams = new JSONObject(params, JSONObject.getNames(params));
        reqParams.put("GST3B", !params.optBoolean(GSTR3BConstants.DETAILED_VIEW_REPORT, false));
        reqParams.put("registrationType", Constants.GSTRegType_Regular + "," + Constants.GSTRegType_Composition + "," + Constants.GSTRegType_Unregistered);
        reqParams.put("CustomerType", Constants.CUSTVENTYPE_NA);
        reqParams.put("taxClassType", FieldComboData.TaxClass_Percenatge);
        temp =   new JSONObject();
        if ((reqParams.has("reportid") && reqParams.optInt("reportid", 0) == Constants.GSTR3B_Summary_Report) || (!StringUtil.isNullOrEmpty(params.optString("transactionType", null)) && (params.optInt("transactionType", 0) == GSTRConstants.GSTR3B_TRANSACTION_TYPE_NOTE || params.optInt("transactionType", 0) == GSTRConstants.GSTR3B_TRANSACTION_TYPE_ALL))) {
            temp = getDNAgainstSalesForGSTR3BTaxable(reqParams);
        }
        if (!(reqParams.has("reportid") && reqParams.optInt("reportid", 0) == Constants.GSTR3B_Summary_Report) && params.optBoolean(GSTR3BConstants.DETAILED_VIEW_REPORT, false)) {
            JSONArray tempArr = temp.optJSONArray("data");
            if (tempArr != null && tempArr.length() > 0) {
                dataJArr = StringUtil.concatJSONArray(dataJArr, tempArr);
            }
        } else {
            jSONObject.put("taxableamt", authHandler.formattedAmount((jSONObject.optDouble("taxableamt", 0.0) + temp.optDouble("taxableamt", 0.0)), companyId));
            jSONObject.put("igst", authHandler.formattedAmount((jSONObject.optDouble("igst", 0.0) + temp.optDouble("igst", 0.0)), companyId));
            jSONObject.put("cgst", authHandler.formattedAmount((jSONObject.optDouble("cgst", 0.0) + temp.optDouble("cgst", 0.0)), companyId));
            jSONObject.put("sgst", authHandler.formattedAmount((jSONObject.optDouble("sgst", 0.0) + temp.optDouble("sgst", 0.0)), companyId));
            jSONObject.put("csgst", authHandler.formattedAmount((jSONObject.optDouble("csgst", 0.0) + temp.optDouble("csgst", 0.0)), companyId));
            jSONObject.put("totaltax", authHandler.formattedAmount((jSONObject.optDouble("totaltax", 0.0) + temp.optDouble("totaltax", 0.0)), companyId));
            jSONObject.put("totalamount", authHandler.formattedAmount((jSONObject.optDouble("totalamount", 0.0) + temp.optDouble("totalamount", 0.0)), companyId));

        }
        /**
         * REGTYPE:Regular,Unregistered,Composition.CUSTTYPE:NA.
         * Interstate/Intrastate: Both.
         */
        reqParams = new JSONObject(params, JSONObject.getNames(params));
        reqParams.put("GST3B", !params.optBoolean(GSTR3BConstants.DETAILED_VIEW_REPORT, false));
//        reqParams.put("intrastate", true);
        reqParams.put("registrationType", Constants.GSTRegType_Regular + "," + Constants.GSTRegType_Composition + "," + Constants.GSTRegType_Unregistered);
        reqParams.put("CustomerType", Constants.CUSTVENTYPE_NA);
        reqParams.put("typeofjoinisleft", true);
        reqParams.put("taxClassType", FieldComboData.TaxClass_Percenatge);
        temp =   new JSONObject();
        if ((reqParams.has("reportid") && reqParams.optInt("reportid", 0) == Constants.GSTR3B_Summary_Report) || (!StringUtil.isNullOrEmpty(params.optString("transactionType", null)) && (params.optInt("transactionType", 0) == GSTRConstants.GSTR3B_TRANSACTION_TYPE_NOTE || params.optInt("transactionType", 0) == GSTRConstants.GSTR3B_TRANSACTION_TYPE_ALL))) {
            temp = getCNForGSTR3BTaxable(reqParams);
        }
        if (!(reqParams.has("reportid") && reqParams.optInt("reportid", 0) == Constants.GSTR3B_Summary_Report) && params.optBoolean(GSTR3BConstants.DETAILED_VIEW_REPORT, false)) {
            JSONArray tempArr = temp.optJSONArray("data");
            if (tempArr != null && tempArr.length() > 0) {
                dataJArr = StringUtil.concatJSONArray(dataJArr, tempArr);
            }
        } else {
            jSONObject.put("taxableamt", authHandler.formattedAmount((jSONObject.optDouble("taxableamt", 0.0) + temp.optDouble("taxableamt", 0.0)), companyId));
            jSONObject.put("igst", authHandler.formattedAmount((jSONObject.optDouble("igst", 0.0) + temp.optDouble("igst", 0.0)), companyId));
            jSONObject.put("cgst", authHandler.formattedAmount((jSONObject.optDouble("cgst", 0.0) + temp.optDouble("cgst", 0.0)), companyId));
            jSONObject.put("sgst", authHandler.formattedAmount((jSONObject.optDouble("sgst", 0.0) + temp.optDouble("sgst", 0.0)), companyId));
            jSONObject.put("csgst", authHandler.formattedAmount((jSONObject.optDouble("csgst", 0.0) + temp.optDouble("csgst", 0.0)), companyId));
            jSONObject.put("totaltax", authHandler.formattedAmount((jSONObject.optDouble("totaltax", 0.0) + temp.optDouble("totaltax", 0.0)), companyId));
            jSONObject.put("totalamount", authHandler.formattedAmount((jSONObject.optDouble("totalamount", 0.0) + temp.optDouble("totalamount", 0.0)), companyId));
        }
        
        /**
         * REGTYPE:Regular,Unregistered,Composition.CUSTTYPE:NA.
         * Interstate/Intrastate: Both.
         */
        reqParams = new JSONObject(params, JSONObject.getNames(params));
        reqParams.put("entitycolnum", reqParams.optString("receiptentitycolnum"));
        reqParams.put("entityValue", reqParams.optString("receiptentityValue"));
        reqParams.put("registrationType", Constants.GSTRegType_Regular + "," + Constants.GSTRegType_Composition + "," + Constants.GSTRegType_Unregistered);
        reqParams.put("CustomerType", Constants.CUSTVENTYPE_NA);
        reqParams.put("taxClassType", FieldComboData.TaxClass_Percenatge);
//        reqParams.put("intrastate", true);
        JSONObject tempObj = new JSONObject();
        if ((reqParams.has("reportid") && reqParams.optInt("reportid", 0) == Constants.GSTR3B_Summary_Report) || (!StringUtil.isNullOrEmpty(params.optString("transactionType", null)) && (params.optInt("transactionType", 0) == GSTRConstants.GSTR3B_TRANSACTION_TYPE_PAYMENT_RECEIPT || params.optInt("transactionType", 0) == GSTRConstants.GSTR3B_TRANSACTION_TYPE_ALL))) {
            tempObj = getTaxLiabilityOnAdvance(reqParams);
        }
        if (!(reqParams.has("reportid") && reqParams.optInt("reportid", 0) == Constants.GSTR3B_Summary_Report) && reqParams.optBoolean(GSTR3BConstants.DETAILED_VIEW_REPORT, false)) {
            JSONArray tempArr = tempObj.optJSONArray("data");
            if (tempArr != null && tempArr.length() > 0) {
                dataJArr = StringUtil.concatJSONArray(dataJArr, tempArr);
            }
        } else {
            temp = tempObj.optJSONObject("gstr3Obj");
            double totaltaxamt=temp.optDouble("csgst3b", 0.0)+temp.optDouble("cgst3b", 0.0)+temp.optDouble("sgst3b", 0.0)+temp.optDouble("igst3b", 0.0);
            jSONObject.put("taxableamt", authHandler.formattedAmount((jSONObject.optDouble("taxableamt", 0.0) + temp.optDouble("taxableamt3b", 0.0)), companyId));
            jSONObject.put("igst", authHandler.formattedAmount((jSONObject.optDouble("igst", 0.0) + temp.optDouble("igst3b", 0.0)), companyId));
            jSONObject.put("cgst", authHandler.formattedAmount((jSONObject.optDouble("cgst", 0.0) + temp.optDouble("cgst3b", 0.0)), companyId));
            jSONObject.put("sgst", authHandler.formattedAmount((jSONObject.optDouble("sgst", 0.0) + temp.optDouble("sgst3b", 0.0)), companyId));
            jSONObject.put("csgst", authHandler.formattedAmount((jSONObject.optDouble("csgst", 0.0) + temp.optDouble("csgst3b", 0.0)), companyId));
            jSONObject.put("totaltax", authHandler.formattedAmount((jSONObject.optDouble("totaltax", 0.0) + totaltaxamt), companyId));
            jSONObject.put("totalamount", authHandler.formattedAmount((jSONObject.optDouble("totalamount", 0.0) + temp.optDouble("taxableamt3b", 0.0)+totaltaxamt), companyId));
        }
        /**
         * REGTYPE:Regular,Unregistered,Composition.CUSTTYPE:NA.
         * Interstate/Intrastate: Both.
         */
        reqParams = new JSONObject(params, JSONObject.getNames(params));
        reqParams.put("entitycolnum", reqParams.optString("receiptentitycolnum"));
        reqParams.put("entityValue", reqParams.optString("receiptentityValue"));
//        reqParams.put("intrastate", true);
        reqParams.put("registrationType", Constants.GSTRegType_Regular + "," + Constants.GSTRegType_Composition + "," + Constants.GSTRegType_Unregistered);
        reqParams.put("CustomerType", Constants.CUSTVENTYPE_NA);
        reqParams.put("taxClassType", FieldComboData.TaxClass_Percenatge);
        tempObj = new JSONObject();
        if ((reqParams.has("reportid") && reqParams.optInt("reportid", 0) == Constants.GSTR3B_Summary_Report) || (!StringUtil.isNullOrEmpty(params.optString("transactionType", null)) && (params.optInt("transactionType", 0) == GSTRConstants.GSTR3B_TRANSACTION_TYPE_PAYMENT_RECEIPT || params.optInt("transactionType", 0) == GSTRConstants.GSTR3B_TRANSACTION_TYPE_ALL))) {
            tempObj = getAdjustedAdvance(reqParams);
        }
        if (!(reqParams.has("reportid") && reqParams.optInt("reportid", 0) == Constants.GSTR3B_Summary_Report) && reqParams.optBoolean(GSTR3BConstants.DETAILED_VIEW_REPORT, false)) {
            JSONArray tempArr = tempObj.optJSONArray("data");
            if (tempArr != null && tempArr.length() > 0) {
                dataJArr = StringUtil.concatJSONArray(dataJArr, tempArr);
            }
        } else {
            temp = tempObj.optJSONObject("gstr3Obj");
            jSONObject.put("taxableamt", authHandler.formattedAmount((jSONObject.optDouble("taxableamt", 0.0) + temp.optDouble("taxableamt", 0.0)), companyId));
            jSONObject.put("igst", authHandler.formattedAmount((jSONObject.optDouble("igst", 0.0) + temp.optDouble("igst", 0.0)), companyId));
            jSONObject.put("cgst", authHandler.formattedAmount((jSONObject.optDouble("cgst", 0.0) + temp.optDouble("cgst", 0.0)), companyId));
            jSONObject.put("sgst", authHandler.formattedAmount((jSONObject.optDouble("sgst", 0.0) + temp.optDouble("sgst", 0.0)), companyId));
            jSONObject.put("csgst", authHandler.formattedAmount((jSONObject.optDouble("csgst", 0.0) + temp.optDouble("csgst", 0.0)), companyId));
            jSONObject.put("totaltax", authHandler.formattedAmount((jSONObject.optDouble("totaltax", 0.0) + temp.optDouble("totaltax", 0.0)), companyId));
            jSONObject.put("totalamount", authHandler.formattedAmount((jSONObject.optDouble("totalamount", 0.0) + temp.optDouble("totalamount", 0.0)), companyId));

            jSONObject.put("tableno", "");
            jSONObject.put("particulars", GSTRConstants.GSTR3B_SECTION_3_1_A);
            jSONObject.put("fmt", "B");
            jSONObject.put("enableViewDetail", true);
            dataJArr.put(jSONObject);
        }
        return jSONObject;
    }

    private JSONObject getGSTR3B_Section_3_1_B_Data(JSONObject params, String companyId, JSONArray dataJArr) throws JSONException, ServiceException {
        
        JSONObject jSONObject = new JSONObject();
    
        /**
         * REGTYPE:Unregistered.CUSTTYPE:Export,ExportWOPAY.
         * Interstate/Intrastate: Both.
         */
        jSONObject = new JSONObject();
        JSONObject reqParams = new JSONObject(params, JSONObject.getNames(params));
        reqParams.put("isGSTINnull", true);
        reqParams.put("GST3B", !params.optBoolean(GSTR3BConstants.DETAILED_VIEW_REPORT, false));
        reqParams.put("registrationType", Constants.GSTRegType_Unregistered);
        reqParams.put("CustomerType", Constants.CUSTVENTYPE_Export + "," + Constants.CUSTVENTYPE_ExportWOPAY);
        reqParams.put("typeofjoinisleft", true);
//        reqParams.put("taxClassType", FieldComboData.TaxClass_Percenatge);
//        reqParams.put("interstate", true);
        jSONObject = new JSONObject();
        if ((reqParams.has("reportid") && reqParams.optInt("reportid", 0) == Constants.GSTR3B_Summary_Report) || (!StringUtil.isNullOrEmpty(params.optString("transactionType", null)) && (params.optInt("transactionType", 0) == GSTRConstants.GSTR3B_TRANSACTION_TYPE_INVOICE || params.optInt("transactionType", 0) == GSTRConstants.GSTR3B_TRANSACTION_TYPE_ALL))) {
            jSONObject = getInvoiceForGSTR3BTaxable(reqParams);
        }
        if (!(reqParams.has("reportid") && reqParams.optInt("reportid", 0) == Constants.GSTR3B_Summary_Report) && params.optBoolean(GSTR3BConstants.DETAILED_VIEW_REPORT, false)) {
            JSONArray tempArr = jSONObject.optJSONArray("data");
            if (tempArr != null && tempArr.length() > 0) {
                dataJArr = StringUtil.concatJSONArray(dataJArr, tempArr);
            }
        }
        
        /**
         * REGTYPE:Regular. CUSTTYPE:SEZ,SEZWOPAY. Interstate/Intrastate: Both.
         */
        reqParams = new JSONObject(params, JSONObject.getNames(params));
        reqParams.put("isGSTINnull", false);
        reqParams.put("GST3B", !params.optBoolean(GSTR3BConstants.DETAILED_VIEW_REPORT, false));
        reqParams.put("registrationType", Constants.GSTRegType_Regular);
        reqParams.put("CustomerType", Constants.CUSTVENTYPE_SEZ + "," + Constants.CUSTVENTYPE_SEZWOPAY);
        reqParams.put("typeofjoinisleft", true);
//        reqParams.put("taxClassType", FieldComboData.TaxClass_Percenatge);
//        reqParams.put("interstate", true);
        JSONObject temp = new JSONObject();
        if ((reqParams.has("reportid") && reqParams.optInt("reportid", 0) == Constants.GSTR3B_Summary_Report) || (!StringUtil.isNullOrEmpty(params.optString("transactionType", null)) && (params.optInt("transactionType", 0) == GSTRConstants.GSTR3B_TRANSACTION_TYPE_INVOICE || params.optInt("transactionType", 0) == GSTRConstants.GSTR3B_TRANSACTION_TYPE_ALL))) {
            temp = getInvoiceForGSTR3BTaxable(reqParams);
        }
        if (!(reqParams.has("reportid") && reqParams.optInt("reportid", 0) == Constants.GSTR3B_Summary_Report) && params.optBoolean(GSTR3BConstants.DETAILED_VIEW_REPORT, false)) {
            JSONArray tempArr = temp.optJSONArray("data");
            if (tempArr != null && tempArr.length() > 0) {
                dataJArr = StringUtil.concatJSONArray(dataJArr, tempArr);
            }
        } else {
            jSONObject.put("taxableamt", authHandler.formattedAmount((jSONObject.optDouble("taxableamt", 0.0) + temp.optDouble("taxableamt", 0.0)), companyId));
            jSONObject.put("igst", authHandler.formattedAmount((jSONObject.optDouble("igst", 0.0) + temp.optDouble("igst", 0.0)), companyId));
            jSONObject.put("cgst", authHandler.formattedAmount((jSONObject.optDouble("cgst", 0.0) + temp.optDouble("cgst", 0.0)), companyId));
            jSONObject.put("sgst", authHandler.formattedAmount((jSONObject.optDouble("sgst", 0.0) + temp.optDouble("sgst", 0.0)), companyId));
            jSONObject.put("csgst", authHandler.formattedAmount((jSONObject.optDouble("csgst", 0.0) + temp.optDouble("csgst", 0.0)), companyId));
            jSONObject.put("totaltax", authHandler.formattedAmount((jSONObject.optDouble("totaltax", 0.0) + temp.optDouble("totaltax", 0.0)), companyId));
            jSONObject.put("totalamount", authHandler.formattedAmount((jSONObject.optDouble("totalamount", 0.0) + temp.optDouble("totalamount", 0.0)), companyId));
        }
             
        /**
         * REGTYPE:Regular. CUSTTYPE:SEZ,SEZWOPAY. Interstate/Intrastate:
         * Both.
         */
        reqParams = new JSONObject(params, JSONObject.getNames(params));
        reqParams.put("GST3B", !params.optBoolean(GSTR3BConstants.DETAILED_VIEW_REPORT, false));
        reqParams.put("registrationType", Constants.GSTRegType_Regular);
        reqParams.put("CustomerType", Constants.CUSTVENTYPE_SEZ + "," + Constants.CUSTVENTYPE_SEZWOPAY);
        reqParams.put("taxClassType", FieldComboData.TaxClass_ZeroPercenatge + "," + FieldComboData.TaxClass_Exempted +","+FieldComboData.TaxClass_Percenatge+","+FieldComboData.TaxClass_Non_GST_Product);
//        reqParams.put("interstate", true);
        temp =   new JSONObject();
        if ((reqParams.has("reportid") && reqParams.optInt("reportid", 0) == Constants.GSTR3B_Summary_Report) || (!StringUtil.isNullOrEmpty(params.optString("transactionType", null)) && (params.optInt("transactionType", 0) == GSTRConstants.GSTR3B_TRANSACTION_TYPE_NOTE || params.optInt("transactionType", 0) == GSTRConstants.GSTR3B_TRANSACTION_TYPE_ALL))) {
            temp = getDNAgainstSalesForGSTR3BTaxable(reqParams);
        }
        if (!(reqParams.has("reportid") && reqParams.optInt("reportid", 0) == Constants.GSTR3B_Summary_Report) && params.optBoolean(GSTR3BConstants.DETAILED_VIEW_REPORT, false)) {
            JSONArray tempArr = temp.optJSONArray("data");
            if (tempArr != null && tempArr.length() > 0) {
                dataJArr = StringUtil.concatJSONArray(dataJArr, tempArr);
            }
        } else {
            jSONObject.put("taxableamt", authHandler.formattedAmount((jSONObject.optDouble("taxableamt", 0.0) + temp.optDouble("taxableamt", 0.0)), companyId));
            jSONObject.put("igst", authHandler.formattedAmount((jSONObject.optDouble("igst", 0.0) + temp.optDouble("igst", 0.0)), companyId));
            jSONObject.put("cgst", authHandler.formattedAmount((jSONObject.optDouble("cgst", 0.0) + temp.optDouble("cgst", 0.0)), companyId));
            jSONObject.put("sgst", authHandler.formattedAmount((jSONObject.optDouble("sgst", 0.0) + temp.optDouble("sgst", 0.0)), companyId));
            jSONObject.put("csgst", authHandler.formattedAmount((jSONObject.optDouble("csgst", 0.0) + temp.optDouble("csgst", 0.0)), companyId));
            jSONObject.put("totaltax", authHandler.formattedAmount((jSONObject.optDouble("totaltax", 0.0) + temp.optDouble("totaltax", 0.0)), companyId));
            jSONObject.put("totalamount", authHandler.formattedAmount((jSONObject.optDouble("totalamount", 0.0) + temp.optDouble("totalamount", 0.0)), companyId));

        }
        
        /**
         * REGTYPE:Unregistered.CUSTTYPE:Export,ExportWOPAY.
         * Interstate/Intrastate: Both.
         */
        reqParams = new JSONObject(params, JSONObject.getNames(params));
        reqParams.put("GST3B", !params.optBoolean(GSTR3BConstants.DETAILED_VIEW_REPORT, false));
        reqParams.put("registrationType", Constants.GSTRegType_Unregistered);
        reqParams.put("CustomerType", Constants.CUSTVENTYPE_Export + "," + Constants.CUSTVENTYPE_ExportWOPAY);
        reqParams.put("taxClassType", FieldComboData.TaxClass_ZeroPercenatge + "," + FieldComboData.TaxClass_Exempted +","+FieldComboData.TaxClass_Percenatge+","+FieldComboData.TaxClass_Non_GST_Product);
//        reqParams.put("interstate", true);
        temp = new JSONObject();
        if ((reqParams.has("reportid") && reqParams.optInt("reportid", 0) == Constants.GSTR3B_Summary_Report) || (!StringUtil.isNullOrEmpty(params.optString("transactionType", null)) && (params.optInt("transactionType", 0) == GSTRConstants.GSTR3B_TRANSACTION_TYPE_NOTE || params.optInt("transactionType", 0) == GSTRConstants.GSTR3B_TRANSACTION_TYPE_ALL))) {
            temp = getDNAgainstSalesForGSTR3BTaxable(reqParams);
        }
        if (!(reqParams.has("reportid") && reqParams.optInt("reportid", 0) == Constants.GSTR3B_Summary_Report) && params.optBoolean(GSTR3BConstants.DETAILED_VIEW_REPORT, false)) {
            JSONArray tempArr = temp.optJSONArray("data");
            if (tempArr != null && tempArr.length() > 0) {
                dataJArr = StringUtil.concatJSONArray(dataJArr, tempArr);
            }
        } else {
            jSONObject.put("taxableamt", authHandler.formattedAmount((jSONObject.optDouble("taxableamt", 0.0) + temp.optDouble("taxableamt", 0.0)), companyId));
            jSONObject.put("igst", authHandler.formattedAmount((jSONObject.optDouble("igst", 0.0) + temp.optDouble("igst", 0.0)), companyId));
            jSONObject.put("cgst", authHandler.formattedAmount((jSONObject.optDouble("cgst", 0.0) + temp.optDouble("cgst", 0.0)), companyId));
            jSONObject.put("sgst", authHandler.formattedAmount((jSONObject.optDouble("sgst", 0.0) + temp.optDouble("sgst", 0.0)), companyId));
            jSONObject.put("csgst", authHandler.formattedAmount((jSONObject.optDouble("csgst", 0.0) + temp.optDouble("csgst", 0.0)), companyId));
            jSONObject.put("totaltax", authHandler.formattedAmount((jSONObject.optDouble("totaltax", 0.0) + temp.optDouble("totaltax", 0.0)), companyId));
            jSONObject.put("totalamount", authHandler.formattedAmount((jSONObject.optDouble("totalamount", 0.0) + temp.optDouble("totalamount", 0.0)), companyId));
        }
           
        /**
         * REGTYPE:Regular. CUSTTYPE:SEZ,SEZWOPAY. Interstate/Intrastate: Both.
         */
        reqParams = new JSONObject(params, JSONObject.getNames(params));
        reqParams.put("GST3B", !params.optBoolean(GSTR3BConstants.DETAILED_VIEW_REPORT, false));
        reqParams.put("registrationType", Constants.GSTRegType_Regular);
        reqParams.put("CustomerType", Constants.CUSTVENTYPE_SEZ + "," + Constants.CUSTVENTYPE_SEZWOPAY);
        reqParams.put("taxClassType", FieldComboData.TaxClass_ZeroPercenatge + "," + FieldComboData.TaxClass_Exempted +","+FieldComboData.TaxClass_Percenatge+","+FieldComboData.TaxClass_Non_GST_Product);
//        reqParams.put("interstate", true);
        reqParams.put("typeofjoinisleft", true);
        temp =   new JSONObject();
        if ((reqParams.has("reportid") && reqParams.optInt("reportid", 0) == Constants.GSTR3B_Summary_Report) || (!StringUtil.isNullOrEmpty(params.optString("transactionType", null)) && (params.optInt("transactionType", 0) == GSTRConstants.GSTR3B_TRANSACTION_TYPE_NOTE || params.optInt("transactionType", 0) == GSTRConstants.GSTR3B_TRANSACTION_TYPE_ALL))) {
            temp = getCNForGSTR3BTaxable(reqParams);
        }
        if (!(reqParams.has("reportid") && reqParams.optInt("reportid", 0) == Constants.GSTR3B_Summary_Report) && params.optBoolean(GSTR3BConstants.DETAILED_VIEW_REPORT, false)) {
            JSONArray tempArr = temp.optJSONArray("data");
            if (tempArr != null && tempArr.length() > 0) {
                dataJArr = StringUtil.concatJSONArray(dataJArr, tempArr);
            }
        } else {
            jSONObject.put("taxableamt", authHandler.formattedAmount((jSONObject.optDouble("taxableamt", 0.0) + temp.optDouble("taxableamt", 0.0)), companyId));
            jSONObject.put("igst", authHandler.formattedAmount((jSONObject.optDouble("igst", 0.0) + temp.optDouble("igst", 0.0)), companyId));
            jSONObject.put("cgst", authHandler.formattedAmount((jSONObject.optDouble("cgst", 0.0) + temp.optDouble("cgst", 0.0)), companyId));
            jSONObject.put("sgst", authHandler.formattedAmount((jSONObject.optDouble("sgst", 0.0) + temp.optDouble("sgst", 0.0)), companyId));
            jSONObject.put("csgst", authHandler.formattedAmount((jSONObject.optDouble("csgst", 0.0) + temp.optDouble("csgst", 0.0)), companyId));
            jSONObject.put("totaltax", authHandler.formattedAmount((jSONObject.optDouble("totaltax", 0.0) + temp.optDouble("totaltax", 0.0)), companyId));
            jSONObject.put("totalamount", authHandler.formattedAmount((jSONObject.optDouble("totalamount", 0.0) + temp.optDouble("totalamount", 0.0)), companyId));
        }
        
        /**
         * REGTYPE:Unregistered.CUSTTYPE:Export,ExportWOPAY.
         * Interstate/Intrastate: Both.
         */
        
        reqParams = new JSONObject(params, JSONObject.getNames(params));
        reqParams.put("GST3B", !params.optBoolean(GSTR3BConstants.DETAILED_VIEW_REPORT, false));
//        reqParams.put("interstate", true);
        reqParams.put("taxClassType", FieldComboData.TaxClass_ZeroPercenatge + "," + FieldComboData.TaxClass_Exempted +","+FieldComboData.TaxClass_Percenatge+","+FieldComboData.TaxClass_Non_GST_Product);
        reqParams.put("registrationType", Constants.GSTRegType_Unregistered);
        reqParams.put("CustomerType", Constants.CUSTVENTYPE_Export + "," + Constants.CUSTVENTYPE_ExportWOPAY);
        temp = new JSONObject();
        if ((reqParams.has("reportid") && reqParams.optInt("reportid", 0) == Constants.GSTR3B_Summary_Report) || (!StringUtil.isNullOrEmpty(params.optString("transactionType", null)) && (params.optInt("transactionType", 0) == GSTRConstants.GSTR3B_TRANSACTION_TYPE_NOTE || params.optInt("transactionType", 0) == GSTRConstants.GSTR3B_TRANSACTION_TYPE_ALL))) {
            temp = getCNForGSTR3BTaxable(reqParams);
        }
        if (!(reqParams.has("reportid") && reqParams.optInt("reportid", 0) == Constants.GSTR3B_Summary_Report) && params.optBoolean(GSTR3BConstants.DETAILED_VIEW_REPORT, false)) {
            JSONArray tempArr = temp.optJSONArray("data");
            if (tempArr != null && tempArr.length() > 0) {
                dataJArr = StringUtil.concatJSONArray(dataJArr, tempArr);
            }
        } else {
            jSONObject.put("taxableamt", authHandler.formattedAmount((jSONObject.optDouble("taxableamt", 0.0) + temp.optDouble("taxableamt", 0.0)), companyId));
            jSONObject.put("igst", authHandler.formattedAmount((jSONObject.optDouble("igst", 0.0) + temp.optDouble("igst", 0.0)), companyId));
            jSONObject.put("cgst", authHandler.formattedAmount((jSONObject.optDouble("cgst", 0.0) + temp.optDouble("cgst", 0.0)), companyId));
            jSONObject.put("sgst", authHandler.formattedAmount((jSONObject.optDouble("sgst", 0.0) + temp.optDouble("sgst", 0.0)), companyId));
            jSONObject.put("csgst", authHandler.formattedAmount((jSONObject.optDouble("csgst", 0.0) + temp.optDouble("csgst", 0.0)), companyId));
            jSONObject.put("totaltax", authHandler.formattedAmount((jSONObject.optDouble("totaltax", 0.0) + temp.optDouble("totaltax", 0.0)), companyId));
            jSONObject.put("totalamount", authHandler.formattedAmount((jSONObject.optDouble("totalamount", 0.0) + temp.optDouble("totalamount", 0.0)), companyId));
        }
        
        /**
         * REGTYPE:Regular. CUSTTYPE:SEZ,SEZWOPAY. Interstate/Intrastate: Both.
         */
        reqParams = new JSONObject(params, JSONObject.getNames(params));
        reqParams.put("entitycolnum", reqParams.optString("receiptentitycolnum"));
        reqParams.put("entityValue", reqParams.optString("receiptentityValue"));
        reqParams.put("registrationType", Constants.GSTRegType_Regular);
        reqParams.put("taxClassType", FieldComboData.TaxClass_ZeroPercenatge + "," + FieldComboData.TaxClass_Exempted +","+FieldComboData.TaxClass_Percenatge+","+FieldComboData.TaxClass_Non_GST_Product);
        reqParams.put("CustomerType", Constants.CUSTVENTYPE_SEZ + "," + Constants.CUSTVENTYPE_SEZWOPAY);
//        reqParams.put("interstate", true);
        JSONObject tempObj = new JSONObject();
        if ((reqParams.has("reportid") && reqParams.optInt("reportid", 0) == Constants.GSTR3B_Summary_Report) || (!StringUtil.isNullOrEmpty(params.optString("transactionType", null)) && (params.optInt("transactionType", 0) == GSTRConstants.GSTR3B_TRANSACTION_TYPE_PAYMENT_RECEIPT || params.optInt("transactionType", 0) == GSTRConstants.GSTR3B_TRANSACTION_TYPE_ALL))) {
            tempObj = getTaxLiabilityOnAdvance(reqParams);
        }
        if (!(reqParams.has("reportid") && reqParams.optInt("reportid", 0) == Constants.GSTR3B_Summary_Report) && reqParams.optBoolean(GSTR3BConstants.DETAILED_VIEW_REPORT, false)) {
            JSONArray tempArr = tempObj.optJSONArray("data");
            if (tempArr != null && tempArr.length() > 0) {
                dataJArr = StringUtil.concatJSONArray(dataJArr, tempArr);
            }
        } else {
            temp = tempObj.optJSONObject("gstr3Obj");
            double totaltaxamt = temp.optDouble("csgst3b", 0.0) + temp.optDouble("cgst3b", 0.0) + temp.optDouble("sgst3b", 0.0) + temp.optDouble("igst3b", 0.0);
            jSONObject.put("taxableamt", authHandler.formattedAmount((jSONObject.optDouble("taxableamt", 0.0) + temp.optDouble("taxableamt3b", 0.0)), companyId));
            jSONObject.put("igst", authHandler.formattedAmount((jSONObject.optDouble("igst", 0.0) + temp.optDouble("igst3b", 0.0)), companyId));
            jSONObject.put("cgst", authHandler.formattedAmount((jSONObject.optDouble("cgst", 0.0) + temp.optDouble("cgst3b", 0.0)), companyId));
            jSONObject.put("sgst", authHandler.formattedAmount((jSONObject.optDouble("sgst", 0.0) + temp.optDouble("sgst3b", 0.0)), companyId));
            jSONObject.put("csgst", authHandler.formattedAmount((jSONObject.optDouble("csgst", 0.0) + temp.optDouble("csgst3b", 0.0)), companyId));
            jSONObject.put("totaltax", authHandler.formattedAmount((jSONObject.optDouble("totaltax", 0.0) + totaltaxamt), companyId));
            jSONObject.put("totalamount", authHandler.formattedAmount((jSONObject.optDouble("totalamount", 0.0) + temp.optDouble("taxableamt3b", 0.0) + totaltaxamt), companyId));
        }
        
        /**
         * REGTYPE:Unregistered.CUSTTYPE:Export,ExportWOPAY.
         * Interstate/Intrastate: Both.
         */
        reqParams = new JSONObject(params, JSONObject.getNames(params));
        reqParams.put("entitycolnum", reqParams.optString("receiptentitycolnum"));
        reqParams.put("entityValue", reqParams.optString("receiptentityValue"));
        reqParams.put("registrationType", Constants.GSTRegType_Unregistered);
        reqParams.put("taxClassType", FieldComboData.TaxClass_ZeroPercenatge + "," + FieldComboData.TaxClass_Exempted +","+FieldComboData.TaxClass_Percenatge+","+FieldComboData.TaxClass_Non_GST_Product);
        reqParams.put("CustomerType", Constants.CUSTVENTYPE_Export + "," + Constants.CUSTVENTYPE_ExportWOPAY);
//        reqParams.put("interstate", true);
        tempObj = new JSONObject();
        if ((reqParams.has("reportid") && reqParams.optInt("reportid", 0) == Constants.GSTR3B_Summary_Report) || (!StringUtil.isNullOrEmpty(params.optString("transactionType", null)) && (params.optInt("transactionType", 0) == GSTRConstants.GSTR3B_TRANSACTION_TYPE_PAYMENT_RECEIPT || params.optInt("transactionType", 0) == GSTRConstants.GSTR3B_TRANSACTION_TYPE_ALL))) {
            tempObj = getTaxLiabilityOnAdvance(reqParams);
        }
        if (!(reqParams.has("reportid") && reqParams.optInt("reportid", 0) == Constants.GSTR3B_Summary_Report) && reqParams.optBoolean(GSTR3BConstants.DETAILED_VIEW_REPORT, false)) {
            JSONArray tempArr = tempObj.optJSONArray("data");
            if (tempArr != null && tempArr.length() > 0) {
                dataJArr = StringUtil.concatJSONArray(dataJArr, tempArr);
            }
        } else {
            temp = tempObj.optJSONObject("gstr3Obj");
            double totaltaxamt = temp.optDouble("csgst3b", 0.0) + temp.optDouble("cgst3b", 0.0) + temp.optDouble("sgst3b", 0.0) + temp.optDouble("igst3b", 0.0);
            jSONObject.put("taxableamt", authHandler.formattedAmount((jSONObject.optDouble("taxableamt", 0.0) + temp.optDouble("taxableamt3b", 0.0)), companyId));
            jSONObject.put("igst", authHandler.formattedAmount((jSONObject.optDouble("igst", 0.0) + temp.optDouble("igst3b", 0.0)), companyId));
            jSONObject.put("cgst", authHandler.formattedAmount((jSONObject.optDouble("cgst", 0.0) + temp.optDouble("cgst3b", 0.0)), companyId));
            jSONObject.put("sgst", authHandler.formattedAmount((jSONObject.optDouble("sgst", 0.0) + temp.optDouble("sgst3b", 0.0)), companyId));
            jSONObject.put("csgst", authHandler.formattedAmount((jSONObject.optDouble("csgst", 0.0) + temp.optDouble("csgst3b", 0.0)), companyId));
            jSONObject.put("totaltax", authHandler.formattedAmount((jSONObject.optDouble("totaltax", 0.0) + totaltaxamt), companyId));
            jSONObject.put("totalamount", authHandler.formattedAmount((jSONObject.optDouble("totalamount", 0.0) + temp.optDouble("taxableamt3b", 0.0) + totaltaxamt), companyId));
        }
        
        /**
         * REGTYPE:Regular. CUSTTYPE:SEZ,SEZWOPAY. Interstate/Intrastate: Both.
         */
        reqParams = new JSONObject(params, JSONObject.getNames(params));
        reqParams.put("entitycolnum", reqParams.optString("receiptentitycolnum"));
        reqParams.put("entityValue", reqParams.optString("receiptentityValue"));
//        reqParams.put("interstate", true);
        reqParams.put("registrationType", Constants.GSTRegType_Regular);
        reqParams.put("taxClassType", FieldComboData.TaxClass_ZeroPercenatge + "," + FieldComboData.TaxClass_Exempted +","+FieldComboData.TaxClass_Percenatge+","+FieldComboData.TaxClass_Non_GST_Product);
        reqParams.put("CustomerType", Constants.CUSTVENTYPE_SEZ + "," + Constants.CUSTVENTYPE_SEZWOPAY);
        tempObj = new JSONObject();
        if ((reqParams.has("reportid") && reqParams.optInt("reportid", 0) == Constants.GSTR3B_Summary_Report) || (!StringUtil.isNullOrEmpty(params.optString("transactionType", null)) && (params.optInt("transactionType", 0) == GSTRConstants.GSTR3B_TRANSACTION_TYPE_PAYMENT_RECEIPT || params.optInt("transactionType", 0) == GSTRConstants.GSTR3B_TRANSACTION_TYPE_ALL))) {
            tempObj = getAdjustedAdvance(reqParams);
        }
        if (!(reqParams.has("reportid") && reqParams.optInt("reportid", 0) == Constants.GSTR3B_Summary_Report) && reqParams.optBoolean(GSTR3BConstants.DETAILED_VIEW_REPORT, false)) {
            JSONArray tempArr = tempObj.optJSONArray("data");
            if (tempArr != null && tempArr.length() > 0) {
                dataJArr = StringUtil.concatJSONArray(dataJArr, tempArr);
            }
        } else {
            temp = tempObj.optJSONObject("gstr3Obj");
            jSONObject.put("taxableamt", authHandler.formattedAmount((jSONObject.optDouble("taxableamt", 0.0) + temp.optDouble("taxableamt", 0.0)), companyId));
            jSONObject.put("igst", authHandler.formattedAmount((jSONObject.optDouble("igst", 0.0) + temp.optDouble("igst", 0.0)), companyId));
            jSONObject.put("cgst", authHandler.formattedAmount((jSONObject.optDouble("cgst", 0.0) + temp.optDouble("cgst", 0.0)), companyId));
            jSONObject.put("sgst", authHandler.formattedAmount((jSONObject.optDouble("sgst", 0.0) + temp.optDouble("sgst", 0.0)), companyId));
            jSONObject.put("csgst", authHandler.formattedAmount((jSONObject.optDouble("csgst", 0.0) + temp.optDouble("csgst", 0.0)), companyId));
            jSONObject.put("totaltax", authHandler.formattedAmount((jSONObject.optDouble("totaltax", 0.0) + temp.optDouble("totaltax", 0.0)), companyId));
            jSONObject.put("totalamount", authHandler.formattedAmount((jSONObject.optDouble("totalamount", 0.0) + temp.optDouble("totalamount", 0.0)), companyId));

        }
        /**
         * REGTYPE:Unregistered.CUSTTYPE:Export,ExportWOPAY.
         * Interstate/Intrastate: Both.
         */
        reqParams = new JSONObject(params, JSONObject.getNames(params));
        reqParams.put("entitycolnum", reqParams.optString("receiptentitycolnum"));
        reqParams.put("entityValue", reqParams.optString("receiptentityValue"));
//        reqParams.put("interstate", true);
        reqParams.put("registrationType", Constants.GSTRegType_Unregistered);
        reqParams.put("taxClassType", FieldComboData.TaxClass_ZeroPercenatge + "," + FieldComboData.TaxClass_Exempted +","+FieldComboData.TaxClass_Percenatge+","+FieldComboData.TaxClass_Non_GST_Product);
        reqParams.put("CustomerType", Constants.CUSTVENTYPE_Export + "," + Constants.CUSTVENTYPE_ExportWOPAY);
        tempObj = new JSONObject();
        if ((reqParams.has("reportid") && reqParams.optInt("reportid", 0) == Constants.GSTR3B_Summary_Report) || (!StringUtil.isNullOrEmpty(params.optString("transactionType", null)) && (params.optInt("transactionType", 0) == GSTRConstants.GSTR3B_TRANSACTION_TYPE_PAYMENT_RECEIPT || params.optInt("transactionType", 0) == GSTRConstants.GSTR3B_TRANSACTION_TYPE_ALL))) {
            tempObj = getAdjustedAdvance(reqParams);
        }
        if (!(reqParams.has("reportid") && reqParams.optInt("reportid", 0) == Constants.GSTR3B_Summary_Report) && reqParams.optBoolean(GSTR3BConstants.DETAILED_VIEW_REPORT, false)) {
            JSONArray tempArr = tempObj.optJSONArray("data");
            if (tempArr != null && tempArr.length() > 0) {
                dataJArr = StringUtil.concatJSONArray(dataJArr, tempArr);
            }
        } else {
            temp = tempObj.optJSONObject("gstr3Obj");
            jSONObject.put("taxableamt", authHandler.formattedAmount((jSONObject.optDouble("taxableamt", 0.0) + temp.optDouble("taxableamt", 0.0)), companyId));
            jSONObject.put("igst", authHandler.formattedAmount((jSONObject.optDouble("igst", 0.0) + temp.optDouble("igst", 0.0)), companyId));
            jSONObject.put("cgst", authHandler.formattedAmount((jSONObject.optDouble("cgst", 0.0) + temp.optDouble("cgst", 0.0)), companyId));
            jSONObject.put("sgst", authHandler.formattedAmount((jSONObject.optDouble("sgst", 0.0) + temp.optDouble("sgst", 0.0)), companyId));
            jSONObject.put("csgst", authHandler.formattedAmount((jSONObject.optDouble("csgst", 0.0) + temp.optDouble("csgst", 0.0)), companyId));
            jSONObject.put("totaltax", authHandler.formattedAmount((jSONObject.optDouble("totaltax", 0.0) + temp.optDouble("totaltax", 0.0)), companyId));
            jSONObject.put("totalamount", authHandler.formattedAmount((jSONObject.optDouble("totalamount", 0.0) + temp.optDouble("totalamount", 0.0)), companyId));

        
            jSONObject.put("tableno", "");
            jSONObject.put("particulars", GSTRConstants.GSTR3B_SECTION_3_1_B);
            jSONObject.put("fmt", "B");
            jSONObject.put("enableViewDetail", true);
            dataJArr.put(jSONObject);
        }
        return jSONObject;
    }

    private JSONObject getGSTR3B_Section_3_1_C_Data(JSONObject params, String companyId, JSONArray dataJArr) throws JSONException, ServiceException {
        
        /**
         * Invoice- REGTYPE:Regular,Composition,Unregistered.CUSTTYPE:NA,Export,ExportWOPAY,SEZ,SEZWOPAY.
         * Product Tax Class: 0%.
         */

        JSONObject jSONObject = new JSONObject();
        JSONObject reqParams = new JSONObject(params, JSONObject.getNames(params));
        reqParams.put("GST3B", !params.optBoolean(GSTR3BConstants.DETAILED_VIEW_REPORT, false));
        reqParams.put("typeofjoinisleft", true);
        reqParams.put("taxClassType", FieldComboData.TaxClass_ZeroPercenatge);
        reqParams.put("registrationType", Constants.GSTRegType_Regular + "," + Constants.GSTRegType_Composition + "," + Constants.GSTRegType_Unregistered);
        reqParams.put("CustomerType", Constants.CUSTVENTYPE_NA);
        jSONObject = new JSONObject();
        if ((reqParams.has("reportid") && reqParams.optInt("reportid", 0) == Constants.GSTR3B_Summary_Report) || (!StringUtil.isNullOrEmpty(params.optString("transactionType", null)) && (params.optInt("transactionType", 0) == GSTRConstants.GSTR3B_TRANSACTION_TYPE_INVOICE || params.optInt("transactionType", 0) == GSTRConstants.GSTR3B_TRANSACTION_TYPE_ALL))) {
            jSONObject = getInvoiceForGSTR3BTaxable(reqParams);
        }
        if (!(reqParams.has("reportid") && reqParams.optInt("reportid", 0) == Constants.GSTR3B_Summary_Report) && params.optBoolean(GSTR3BConstants.DETAILED_VIEW_REPORT, false)) {
            JSONArray tempArr = jSONObject.optJSONArray("data");
            if (tempArr != null && tempArr.length() > 0) {
                dataJArr = StringUtil.concatJSONArray(dataJArr, tempArr);
            }
        }
        /**
         * Invoice- REGTYPE:Regular,Composition,Unregistered.CUSTTYPE:NA,Export,ExportWOPAY,SEZ,SEZWOPAY.
         * Product Tax Class: Exempted.
         */
        reqParams = new JSONObject(params, JSONObject.getNames(params));
        reqParams.put("GST3B", true);
        reqParams.put("registrationType", Constants.GSTRegType_Regular + "," + Constants.GSTRegType_Composition + "," + Constants.GSTRegType_Unregistered);
        reqParams.put("CustomerType", Constants.CUSTVENTYPE_NA);
        reqParams.put("taxClassType", FieldComboData.TaxClass_Exempted);
        reqParams.put("typeofjoinisleft", true);
        JSONObject temp = new JSONObject();
        if ((reqParams.has("reportid") && reqParams.optInt("reportid", 0) == Constants.GSTR3B_Summary_Report) || (!StringUtil.isNullOrEmpty(params.optString("transactionType", null)) && (params.optInt("transactionType", 0) == GSTRConstants.GSTR3B_TRANSACTION_TYPE_INVOICE || params.optInt("transactionType", 0) == GSTRConstants.GSTR3B_TRANSACTION_TYPE_ALL))) {
            temp = getInvoiceForGSTR3BNillRated(reqParams);
        }
        if (!(reqParams.has("reportid") && reqParams.optInt("reportid", 0) == Constants.GSTR3B_Summary_Report) && params.optBoolean(GSTR3BConstants.DETAILED_VIEW_REPORT, false)) {
            JSONArray tempArr = temp.optJSONArray("data");
            if (tempArr != null && tempArr.length() > 0) {
                dataJArr = StringUtil.concatJSONArray(dataJArr, tempArr);
            }
        } else {
            jSONObject.put("count", (jSONObject.optInt("count", 0) + temp.optInt("count", 0)));
            jSONObject.put("taxableamt", authHandler.formattedAmount((jSONObject.optDouble("taxableamt", 0.0) + temp.optDouble("taxableamt", 0.0)), companyId));
            jSONObject.put("igst", authHandler.formattedAmount((jSONObject.optDouble("igst", 0.0) + temp.optDouble("igst", 0.0)), companyId));
            jSONObject.put("cgst", authHandler.formattedAmount((jSONObject.optDouble("cgst", 0.0) + temp.optDouble("cgst", 0.0)), companyId));
            jSONObject.put("sgst", authHandler.formattedAmount((jSONObject.optDouble("sgst", 0.0) + temp.optDouble("sgst", 0.0)), companyId));
            jSONObject.put("csgst", authHandler.formattedAmount((jSONObject.optDouble("csgst", 0.0) + temp.optDouble("csgst", 0.0)), companyId));
            jSONObject.put("totaltax", authHandler.formattedAmount((jSONObject.optDouble("totaltax", 0.0) + temp.optDouble("totaltax", 0.0)), companyId));
            jSONObject.put("totalamount", authHandler.formattedAmount((jSONObject.optDouble("totalamount", 0.0) + temp.optDouble("totalamount", 0.0)), companyId));
        }
        
           
        /**
         * Debit Note- REGTYPE:Regular,Composition,Unregistered.CUSTTYPE:NA,Export,ExportWOPAY,SEZ,SEZWOPAY.
         * Product Tax Class: 0%,Exempted.
         */
        reqParams = new JSONObject(params, JSONObject.getNames(params));
        reqParams.put("typeofjoinisleft", true);
        reqParams.put("GST3B", !params.optBoolean(GSTR3BConstants.DETAILED_VIEW_REPORT, false));
        reqParams.put("registrationType", Constants.GSTRegType_Regular + "," + Constants.GSTRegType_Composition + "," + Constants.GSTRegType_Unregistered);
        reqParams.put("taxClassType", FieldComboData.TaxClass_ZeroPercenatge + "," + FieldComboData.TaxClass_Exempted);
        reqParams.put("CustomerType", Constants.CUSTVENTYPE_NA);
        temp = new JSONObject();
        if ((reqParams.has("reportid") && reqParams.optInt("reportid", 0) == Constants.GSTR3B_Summary_Report) || (!StringUtil.isNullOrEmpty(params.optString("transactionType", null)) && (params.optInt("transactionType", 0) == GSTRConstants.GSTR3B_TRANSACTION_TYPE_NOTE || params.optInt("transactionType", 0) == GSTRConstants.GSTR3B_TRANSACTION_TYPE_ALL))) {
            temp = getDNAgainstSalesForGSTR3BTaxable(reqParams);
        }
        if (!(reqParams.has("reportid") && reqParams.optInt("reportid", 0) == Constants.GSTR3B_Summary_Report) && params.optBoolean(GSTR3BConstants.DETAILED_VIEW_REPORT, false)) {
            JSONArray tempArr = temp.optJSONArray("data");
            if (tempArr != null && tempArr.length() > 0) {
                dataJArr = StringUtil.concatJSONArray(dataJArr, tempArr);
            }
        } else {
            jSONObject.put("taxableamt", authHandler.formattedAmount((jSONObject.optDouble("taxableamt", 0.0) + temp.optDouble("taxableamt", 0.0)), companyId));
            jSONObject.put("igst", authHandler.formattedAmount((jSONObject.optDouble("igst", 0.0) + temp.optDouble("igst", 0.0)), companyId));
            jSONObject.put("cgst", authHandler.formattedAmount((jSONObject.optDouble("cgst", 0.0) + temp.optDouble("cgst", 0.0)), companyId));
            jSONObject.put("sgst", authHandler.formattedAmount((jSONObject.optDouble("sgst", 0.0) + temp.optDouble("sgst", 0.0)), companyId));
            jSONObject.put("csgst", authHandler.formattedAmount((jSONObject.optDouble("csgst", 0.0) + temp.optDouble("csgst", 0.0)), companyId));
            jSONObject.put("totaltax", authHandler.formattedAmount((jSONObject.optDouble("totaltax", 0.0) + temp.optDouble("totaltax", 0.0)), companyId));
            jSONObject.put("totalamount", authHandler.formattedAmount((jSONObject.optDouble("totalamount", 0.0) + temp.optDouble("totalamount", 0.0)), companyId));
        }
         /**
         * Credit Note- REGTYPE:Regular,Composition,Unregistered.CUSTTYPE:NA,Export,ExportWOPAY,SEZ,SEZWOPAY.
         * Product Tax Class: 0%,Exempted.
         */
        reqParams = new JSONObject(params, JSONObject.getNames(params));
        reqParams.put("typeofjoinisleft", true);
        reqParams.put("GST3B", !params.optBoolean(GSTR3BConstants.DETAILED_VIEW_REPORT, false));
        reqParams.put("taxClassType", FieldComboData.TaxClass_ZeroPercenatge + "," + FieldComboData.TaxClass_Exempted);
        reqParams.put("registrationType", Constants.GSTRegType_Regular + "," + Constants.GSTRegType_Composition + "," + Constants.GSTRegType_Unregistered);
        reqParams.put("CustomerType", Constants.CUSTVENTYPE_NA );
        temp = new JSONObject();
        if ((reqParams.has("reportid") && reqParams.optInt("reportid", 0) == Constants.GSTR3B_Summary_Report) || (!StringUtil.isNullOrEmpty(params.optString("transactionType", null)) && (params.optInt("transactionType", 0) == GSTRConstants.GSTR3B_TRANSACTION_TYPE_NOTE || params.optInt("transactionType", 0) == GSTRConstants.GSTR3B_TRANSACTION_TYPE_ALL))) {
            temp = getCNForGSTR3BTaxable(reqParams);
        }
        if (!(reqParams.has("reportid") && reqParams.optInt("reportid", 0) == Constants.GSTR3B_Summary_Report) && params.optBoolean(GSTR3BConstants.DETAILED_VIEW_REPORT, false)) {
            JSONArray tempArr = temp.optJSONArray("data");
            if (tempArr != null && tempArr.length() > 0) {
                dataJArr = StringUtil.concatJSONArray(dataJArr, tempArr);
            }
        } else {
            jSONObject.put("taxableamt", authHandler.formattedAmount((jSONObject.optDouble("taxableamt", 0.0) + temp.optDouble("taxableamt", 0.0)), companyId));
            jSONObject.put("igst", authHandler.formattedAmount((jSONObject.optDouble("igst", 0.0) + temp.optDouble("igst", 0.0)), companyId));
            jSONObject.put("cgst", authHandler.formattedAmount((jSONObject.optDouble("cgst", 0.0) + temp.optDouble("cgst", 0.0)), companyId));
            jSONObject.put("sgst", authHandler.formattedAmount((jSONObject.optDouble("sgst", 0.0) + temp.optDouble("sgst", 0.0)), companyId));
            jSONObject.put("csgst", authHandler.formattedAmount((jSONObject.optDouble("csgst", 0.0) + temp.optDouble("csgst", 0.0)), companyId));
            jSONObject.put("totaltax", authHandler.formattedAmount((jSONObject.optDouble("totaltax", 0.0) + temp.optDouble("totaltax", 0.0)), companyId));
            jSONObject.put("totalamount", authHandler.formattedAmount((jSONObject.optDouble("totalamount", 0.0) + temp.optDouble("totalamount", 0.0)), companyId));
        }
        
        /**
         * Advance Liability- REGTYPE:Regular,Composition,Unregistered.CUSTTYPE:NA,Export,ExportWOPAY,SEZ,SEZWOPAY.
         * Product Tax Class: 0%,Exempted.
         */
        reqParams = new JSONObject(params, JSONObject.getNames(params));
        reqParams.put("entitycolnum", reqParams.optString("receiptentitycolnum"));
        reqParams.put("entityValue", reqParams.optString("receiptentityValue"));
        reqParams.put("taxClassType", FieldComboData.TaxClass_ZeroPercenatge + "," + FieldComboData.TaxClass_Exempted);
        reqParams.put("registrationType", Constants.GSTRegType_Regular + "," + Constants.GSTRegType_Composition + "," + Constants.GSTRegType_Unregistered);
        reqParams.put("CustomerType", Constants.CUSTVENTYPE_NA);
        JSONObject tempObj = new JSONObject();
        if ((reqParams.has("reportid") && reqParams.optInt("reportid", 0) == Constants.GSTR3B_Summary_Report) || (!StringUtil.isNullOrEmpty(params.optString("transactionType", null)) && (params.optInt("transactionType", 0) == GSTRConstants.GSTR3B_TRANSACTION_TYPE_PAYMENT_RECEIPT || params.optInt("transactionType", 0) == GSTRConstants.GSTR3B_TRANSACTION_TYPE_ALL))) {
            tempObj = getTaxLiabilityOnAdvance(reqParams);
        }
        if (!(reqParams.has("reportid") && reqParams.optInt("reportid", 0) == Constants.GSTR3B_Summary_Report) && reqParams.optBoolean(GSTR3BConstants.DETAILED_VIEW_REPORT, false)) {
            JSONArray tempArr = tempObj.optJSONArray("data");
            if (tempArr != null && tempArr.length() > 0) {
                dataJArr = StringUtil.concatJSONArray(dataJArr, tempArr);
            }
        } else {
            temp = tempObj.optJSONObject("gstr3Obj");
            double totaltaxamt = temp.optDouble("csgst3b", 0.0) + temp.optDouble("cgst3b", 0.0) + temp.optDouble("sgst3b", 0.0) + temp.optDouble("igst3b", 0.0);
            jSONObject.put("taxableamt", authHandler.formattedAmount((jSONObject.optDouble("taxableamt", 0.0) + temp.optDouble("taxableamt3b", 0.0)), companyId));
            jSONObject.put("igst", authHandler.formattedAmount((jSONObject.optDouble("igst", 0.0) + temp.optDouble("igst3b", 0.0)), companyId));
            jSONObject.put("cgst", authHandler.formattedAmount((jSONObject.optDouble("cgst", 0.0) + temp.optDouble("cgst3b", 0.0)), companyId));
            jSONObject.put("sgst", authHandler.formattedAmount((jSONObject.optDouble("sgst", 0.0) + temp.optDouble("sgst3b", 0.0)), companyId));
            jSONObject.put("csgst", authHandler.formattedAmount((jSONObject.optDouble("csgst", 0.0) + temp.optDouble("csgst3b", 0.0)), companyId));
            jSONObject.put("totaltax", authHandler.formattedAmount((jSONObject.optDouble("totaltax", 0.0) + totaltaxamt), companyId));
            jSONObject.put("totalamount", authHandler.formattedAmount((jSONObject.optDouble("totalamount", 0.0) + temp.optDouble("taxableamt3b", 0.0) + totaltaxamt), companyId));
        }
        /**
         * Adjusted Advance- REGTYPE:Regular,Composition,Unregistered.CUSTTYPE:NA,Export,ExportWOPAY,SEZ,SEZWOPAY.
         * Product Tax Class: 0%,Exempted.
         */
        reqParams = new JSONObject(params, JSONObject.getNames(params));
        reqParams.put("entitycolnum", reqParams.optString("receiptentitycolnum"));
        reqParams.put("entityValue", reqParams.optString("receiptentityValue"));
        reqParams.put("taxClassType", FieldComboData.TaxClass_ZeroPercenatge + "," + FieldComboData.TaxClass_Exempted);
        reqParams.put("registrationType", Constants.GSTRegType_Regular + "," + Constants.GSTRegType_Composition + "," + Constants.GSTRegType_Unregistered);
        reqParams.put("CustomerType", Constants.CUSTVENTYPE_NA);
        tempObj = new JSONObject();
        if ((reqParams.has("reportid") && reqParams.optInt("reportid", 0) == Constants.GSTR3B_Summary_Report) || (!StringUtil.isNullOrEmpty(params.optString("transactionType", null)) && (params.optInt("transactionType", 0) == GSTRConstants.GSTR3B_TRANSACTION_TYPE_PAYMENT_RECEIPT || params.optInt("transactionType", 0) == GSTRConstants.GSTR3B_TRANSACTION_TYPE_ALL))) {
            tempObj = getAdjustedAdvance(reqParams);
        }
        if (!(reqParams.has("reportid") && reqParams.optInt("reportid", 0) == Constants.GSTR3B_Summary_Report) && reqParams.optBoolean(GSTR3BConstants.DETAILED_VIEW_REPORT, false)) {
            JSONArray tempArr = tempObj.optJSONArray("data");
            if (tempArr != null && tempArr.length() > 0) {
                dataJArr = StringUtil.concatJSONArray(dataJArr, tempArr);
            }
        } else {
            temp = tempObj.optJSONObject("gstr3Obj");
            jSONObject.put("taxableamt", authHandler.formattedAmount((jSONObject.optDouble("taxableamt", 0.0) + temp.optDouble("taxableamt", 0.0)), companyId));
            jSONObject.put("igst", authHandler.formattedAmount((jSONObject.optDouble("igst", 0.0) + temp.optDouble("igst", 0.0)), companyId));
            jSONObject.put("cgst", authHandler.formattedAmount((jSONObject.optDouble("cgst", 0.0) + temp.optDouble("cgst", 0.0)), companyId));
            jSONObject.put("sgst", authHandler.formattedAmount((jSONObject.optDouble("sgst", 0.0) + temp.optDouble("sgst", 0.0)), companyId));
            jSONObject.put("csgst", authHandler.formattedAmount((jSONObject.optDouble("csgst", 0.0) + temp.optDouble("csgst", 0.0)), companyId));
            jSONObject.put("totaltax", authHandler.formattedAmount((jSONObject.optDouble("totaltax", 0.0) + temp.optDouble("totaltax", 0.0)), companyId));
            jSONObject.put("totalamount", authHandler.formattedAmount((jSONObject.optDouble("totalamount", 0.0) + temp.optDouble("totalamount", 0.0)), companyId));

        
            jSONObject.put("tableno", "");
            jSONObject.put("particulars", GSTRConstants.GSTR3B_SECTION_3_1_C);
            jSONObject.put("fmt", "B");
            jSONObject.put("enableViewDetail", true);
            dataJArr.put(jSONObject);
        }
        return jSONObject;
    }

    private JSONObject getGSTR3B_Section_3_1_D_Data(JSONObject params, String companyId, JSONArray dataJArr) throws JSONException, ServiceException {
        
        JSONObject jSONObject = new JSONObject();
        JSONObject reqParams = new JSONObject(params, JSONObject.getNames(params));
        reqParams.put("isGSTINnull", false);
        reqParams.put("GST3B", !params.optBoolean(GSTR3BConstants.DETAILED_VIEW_REPORT, false));
        reqParams.put("isRCMApplicable", true);
        reqParams.put("registrationType", Constants.GSTRegType_Regular);
        reqParams.put("CustomerType", Constants.CUSTVENTYPE_NA);
        reqParams.put("typeofjoinisleft", true);
        reqParams.put("taxClassType", FieldComboData.TaxClass_Percenatge);
        if ((reqParams.has("reportid") && reqParams.optInt("reportid", 0) == Constants.GSTR3B_Summary_Report) || (!StringUtil.isNullOrEmpty(params.optString("transactionType", null)) && (params.optInt("transactionType", 0) == GSTRConstants.GSTR3B_TRANSACTION_TYPE_INVOICE || params.optInt("transactionType", 0) == GSTRConstants.GSTR3B_TRANSACTION_TYPE_ALL))) {
            jSONObject = getGoodsReceiptForGSTR3BTaxable(reqParams);
        }
        if (!(reqParams.has("reportid") && reqParams.optInt("reportid", 0) == Constants.GSTR3B_Summary_Report) && params.optBoolean(GSTR3BConstants.DETAILED_VIEW_REPORT, false)) {
            JSONArray tempArr = jSONObject.optJSONArray("data");
            if (tempArr != null && tempArr.length() > 0) {
                dataJArr = StringUtil.concatJSONArray(dataJArr, tempArr);
            }
        } 
        reqParams = new JSONObject(params, JSONObject.getNames(params));
        reqParams.put("GST3B", !params.optBoolean(GSTR3BConstants.DETAILED_VIEW_REPORT, false));
        reqParams.put("isRCMApplicable", true);
        reqParams.put("registrationType", Constants.GSTRegType_Unregistered);
        reqParams.put("CustomerType", Constants.CUSTVENTYPE_NA);
        reqParams.put("typeofjoinisleft", true);
        reqParams.put("taxClassType", FieldComboData.TaxClass_Percenatge);
        JSONObject temp = new JSONObject();
        if ((reqParams.has("reportid") && reqParams.optInt("reportid", 0) == Constants.GSTR3B_Summary_Report) || (!StringUtil.isNullOrEmpty(params.optString("transactionType", null)) && (params.optInt("transactionType", 0) == GSTRConstants.GSTR3B_TRANSACTION_TYPE_INVOICE || params.optInt("transactionType", 0) == GSTRConstants.GSTR3B_TRANSACTION_TYPE_ALL))) {
            temp = getGoodsReceiptForGSTR3BTaxable(reqParams);
        }
        if (!(reqParams.has("reportid") && reqParams.optInt("reportid", 0) == Constants.GSTR3B_Summary_Report) && params.optBoolean(GSTR3BConstants.DETAILED_VIEW_REPORT, false)) {
            JSONArray tempArr = temp.optJSONArray("data");
            if (tempArr != null && tempArr.length() > 0) {
                dataJArr = StringUtil.concatJSONArray(dataJArr, tempArr);
            }
        } else {
            jSONObject.put("taxableamt", authHandler.formattedAmount((jSONObject.optDouble("taxableamt", 0.0) + temp.optDouble("taxableamt", 0.0)), companyId));
            jSONObject.put("igst", authHandler.formattedAmount((jSONObject.optDouble("igst", 0.0) + temp.optDouble("igst", 0.0)), companyId));
            jSONObject.put("cgst", authHandler.formattedAmount((jSONObject.optDouble("cgst", 0.0) + temp.optDouble("cgst", 0.0)), companyId));
            jSONObject.put("sgst", authHandler.formattedAmount((jSONObject.optDouble("sgst", 0.0) + temp.optDouble("sgst", 0.0)), companyId));
            jSONObject.put("csgst", authHandler.formattedAmount((jSONObject.optDouble("csgst", 0.0) + temp.optDouble("csgst", 0.0)), companyId));
            jSONObject.put("totaltax", authHandler.formattedAmount((jSONObject.optDouble("totaltax", 0.0) + temp.optDouble("totaltax", 0.0)), companyId));
            jSONObject.put("totalamount", authHandler.formattedAmount((jSONObject.optDouble("totalamount", 0.0) + temp.optDouble("totalamount", 0.0)), companyId));

            jSONObject.put("tableno", "");
            jSONObject.put("particulars", GSTRConstants.GSTR3B_SECTION_3_1_D);
            jSONObject.put("fmt", "B");
            jSONObject.put("enableViewDetail", true);
            dataJArr.put(jSONObject);
        }
        return jSONObject;
    }

    private JSONObject getGSTR3B_Section_3_1_E_Data(JSONObject params, String companyId, JSONArray dataJArr) throws JSONException, ServiceException {
        /**
         * Invoice-
         * REGTYPE:Regular,Composition,Unregistered.CUSTTYPE:NA,Export,ExportWOPAY,SEZ,SEZWOPAY.
         * Product Tax Class: NON-GST.
         */
        JSONObject jSONObject = new JSONObject();
        JSONObject reqParams = new JSONObject(params, JSONObject.getNames(params));
        reqParams.put("GST3B", !params.optBoolean(GSTR3BConstants.DETAILED_VIEW_REPORT, false));
        reqParams.put("registrationType", Constants.GSTRegType_Regular + "," + Constants.GSTRegType_Composition + "," + Constants.GSTRegType_Unregistered);
        reqParams.put("CustomerType", Constants.CUSTVENTYPE_NA );
        reqParams.put("taxClassType", FieldComboData.TaxClass_Non_GST_Product);
        if ((reqParams.has("reportid") && reqParams.optInt("reportid", 0) == Constants.GSTR3B_Summary_Report) || (!StringUtil.isNullOrEmpty(params.optString("transactionType", null)) && (params.optInt("transactionType", 0) == GSTRConstants.GSTR3B_TRANSACTION_TYPE_INVOICE || params.optInt("transactionType", 0) == GSTRConstants.GSTR3B_TRANSACTION_TYPE_ALL))) {
            jSONObject = getInvoiceForGSTR3BNillRated(reqParams);
        }
        if (!(reqParams.has("reportid") && reqParams.optInt("reportid", 0) == Constants.GSTR3B_Summary_Report) && params.optBoolean(GSTR3BConstants.DETAILED_VIEW_REPORT, false)) {
            JSONArray tempArr = jSONObject.optJSONArray("data");
            if (tempArr != null && tempArr.length() > 0) {
                dataJArr = StringUtil.concatJSONArray(dataJArr, tempArr);
            }
        }
        /**
         * Debit Note-
         * REGTYPE:Regular,Composition,Unregistered.CUSTTYPE:NA,Export,ExportWOPAY,SEZ,SEZWOPAY.
         * Product Tax Class: NON-GST.
         */
        reqParams = new JSONObject(params, JSONObject.getNames(params));
        reqParams.put("GST3B", !params.optBoolean(GSTR3BConstants.DETAILED_VIEW_REPORT, false));
        reqParams.put("registrationType", Constants.GSTRegType_Regular + "," + Constants.GSTRegType_Composition + "," + Constants.GSTRegType_Unregistered);
        reqParams.put("taxClassType", FieldComboData.TaxClass_Non_GST_Product);
        reqParams.put("CustomerType", Constants.CUSTVENTYPE_NA );
        JSONObject temp = new JSONObject();
        if ((reqParams.has("reportid") && reqParams.optInt("reportid", 0) == Constants.GSTR3B_Summary_Report) || (!StringUtil.isNullOrEmpty(params.optString("transactionType", null)) && (params.optInt("transactionType", 0) == GSTRConstants.GSTR3B_TRANSACTION_TYPE_NOTE || params.optInt("transactionType", 0) == GSTRConstants.GSTR3B_TRANSACTION_TYPE_ALL))) {
            temp = getDNAgainstSalesForGSTR3BTaxable(reqParams);
        }
        if (!(reqParams.has("reportid") && reqParams.optInt("reportid", 0) == Constants.GSTR3B_Summary_Report) && params.optBoolean(GSTR3BConstants.DETAILED_VIEW_REPORT, false)) {
            JSONArray tempArr = temp.optJSONArray("data");
            if (tempArr != null && tempArr.length() > 0) {
                dataJArr = StringUtil.concatJSONArray(dataJArr, tempArr);
            }
        } else {
            jSONObject.put("taxableamt", authHandler.formattedAmount((jSONObject.optDouble("taxableamt", 0.0) + temp.optDouble("taxableamt", 0.0)), companyId));
            jSONObject.put("igst", authHandler.formattedAmount((jSONObject.optDouble("igst", 0.0) + temp.optDouble("igst", 0.0)), companyId));
            jSONObject.put("cgst", authHandler.formattedAmount((jSONObject.optDouble("cgst", 0.0) + temp.optDouble("cgst", 0.0)), companyId));
            jSONObject.put("sgst", authHandler.formattedAmount((jSONObject.optDouble("sgst", 0.0) + temp.optDouble("sgst", 0.0)), companyId));
            jSONObject.put("csgst", authHandler.formattedAmount((jSONObject.optDouble("csgst", 0.0) + temp.optDouble("csgst", 0.0)), companyId));
            jSONObject.put("totaltax", authHandler.formattedAmount((jSONObject.optDouble("totaltax", 0.0) + temp.optDouble("totaltax", 0.0)), companyId));
            jSONObject.put("totalamount", authHandler.formattedAmount((jSONObject.optDouble("totalamount", 0.0) + temp.optDouble("totalamount", 0.0)), companyId));

        }
        /**
         * Credit Note-
         * REGTYPE:Regular,Composition,Unregistered.CUSTTYPE:NA,Export,ExportWOPAY,SEZ,SEZWOPAY.
         * Product Tax Class: NON-GST.
         */
        reqParams = new JSONObject(params, JSONObject.getNames(params));
        reqParams.put("typeofjoinisleft", true);
        reqParams.put("GST3B", !params.optBoolean(GSTR3BConstants.DETAILED_VIEW_REPORT, false));
        reqParams.put("taxClassType", FieldComboData.TaxClass_Non_GST_Product);
        reqParams.put("registrationType", Constants.GSTRegType_Regular + "," + Constants.GSTRegType_Composition + "," + Constants.GSTRegType_Unregistered);
        reqParams.put("CustomerType", Constants.CUSTVENTYPE_NA);
        temp = new JSONObject();
        if ((reqParams.has("reportid") && reqParams.optInt("reportid", 0) == Constants.GSTR3B_Summary_Report) || (!StringUtil.isNullOrEmpty(params.optString("transactionType", null)) && (params.optInt("transactionType", 0) == GSTRConstants.GSTR3B_TRANSACTION_TYPE_NOTE || params.optInt("transactionType", 0) == GSTRConstants.GSTR3B_TRANSACTION_TYPE_ALL))) {
            temp = getCNForGSTR3BTaxable(reqParams);
        }
        if (!(reqParams.has("reportid") && reqParams.optInt("reportid", 0) == Constants.GSTR3B_Summary_Report) && params.optBoolean(GSTR3BConstants.DETAILED_VIEW_REPORT, false)) {
            JSONArray tempArr = temp.optJSONArray("data");
            if (tempArr != null && tempArr.length() > 0) {
                dataJArr = StringUtil.concatJSONArray(dataJArr, tempArr);
            }
        } else {
            jSONObject.put("taxableamt", authHandler.formattedAmount((jSONObject.optDouble("taxableamt", 0.0) + temp.optDouble("taxableamt", 0.0)), companyId));
            jSONObject.put("igst", authHandler.formattedAmount((jSONObject.optDouble("igst", 0.0) + temp.optDouble("igst", 0.0)), companyId));
            jSONObject.put("cgst", authHandler.formattedAmount((jSONObject.optDouble("cgst", 0.0) + temp.optDouble("cgst", 0.0)), companyId));
            jSONObject.put("sgst", authHandler.formattedAmount((jSONObject.optDouble("sgst", 0.0) + temp.optDouble("sgst", 0.0)), companyId));
            jSONObject.put("csgst", authHandler.formattedAmount((jSONObject.optDouble("csgst", 0.0) + temp.optDouble("csgst", 0.0)), companyId));
            jSONObject.put("totaltax", authHandler.formattedAmount((jSONObject.optDouble("totaltax", 0.0) + temp.optDouble("totaltax", 0.0)), companyId));
            jSONObject.put("totalamount", authHandler.formattedAmount((jSONObject.optDouble("totalamount", 0.0) + temp.optDouble("totalamount", 0.0)), companyId));
        }

        /**
         * Advance Liability-
         * REGTYPE:Regular,Composition,Unregistered.CUSTTYPE:NA,Export,ExportWOPAY,SEZ,SEZWOPAY.
         * Product Tax Class: NON-GST.
         */
        reqParams = new JSONObject(params, JSONObject.getNames(params));
        reqParams.put("entitycolnum", reqParams.optString("receiptentitycolnum"));
        reqParams.put("entityValue", reqParams.optString("receiptentityValue"));
        reqParams.put("taxClassType", FieldComboData.TaxClass_Non_GST_Product);
        reqParams.put("registrationType", Constants.GSTRegType_Regular + "," + Constants.GSTRegType_Composition + "," + Constants.GSTRegType_Unregistered);
        reqParams.put("CustomerType", Constants.CUSTVENTYPE_NA);
        JSONObject tempObj = new JSONObject();
        if ((reqParams.has("reportid") && reqParams.optInt("reportid", 0) == Constants.GSTR3B_Summary_Report) || (!StringUtil.isNullOrEmpty(params.optString("transactionType", null)) && (params.optInt("transactionType", 0) == GSTRConstants.GSTR3B_TRANSACTION_TYPE_PAYMENT_RECEIPT || params.optInt("transactionType", 0) == GSTRConstants.GSTR3B_TRANSACTION_TYPE_ALL))) {
            tempObj = getTaxLiabilityOnAdvance(reqParams);
        }
        if (!(reqParams.has("reportid") && reqParams.optInt("reportid", 0) == Constants.GSTR3B_Summary_Report) && reqParams.optBoolean(GSTR3BConstants.DETAILED_VIEW_REPORT, false)) {
            JSONArray tempArr = tempObj.optJSONArray("data");
            if (tempArr != null && tempArr.length() > 0) {
                dataJArr = StringUtil.concatJSONArray(dataJArr, tempArr);
            }
        } else {
            temp = tempObj.optJSONObject("gstr3Obj");
            double totaltaxamt = temp.optDouble("csgst3b", 0.0) + temp.optDouble("cgst3b", 0.0) + temp.optDouble("sgst3b", 0.0) + temp.optDouble("igst3b", 0.0);
            jSONObject.put("taxableamt", authHandler.formattedAmount((jSONObject.optDouble("taxableamt", 0.0) + temp.optDouble("taxableamt3b", 0.0)), companyId));
            jSONObject.put("igst", authHandler.formattedAmount((jSONObject.optDouble("igst", 0.0) + temp.optDouble("igst3b", 0.0)), companyId));
            jSONObject.put("cgst", authHandler.formattedAmount((jSONObject.optDouble("cgst", 0.0) + temp.optDouble("cgst3b", 0.0)), companyId));
            jSONObject.put("sgst", authHandler.formattedAmount((jSONObject.optDouble("sgst", 0.0) + temp.optDouble("sgst3b", 0.0)), companyId));
            jSONObject.put("csgst", authHandler.formattedAmount((jSONObject.optDouble("csgst", 0.0) + temp.optDouble("csgst3b", 0.0)), companyId));
            jSONObject.put("totaltax", authHandler.formattedAmount((jSONObject.optDouble("totaltax", 0.0) + totaltaxamt), companyId));
            jSONObject.put("totalamount", authHandler.formattedAmount((jSONObject.optDouble("totalamount", 0.0) + temp.optDouble("taxableamt3b", 0.0) + totaltaxamt), companyId));
        }
        /**
         * Adjusted Advance-
         * REGTYPE:Regular,Composition,Unregistered.CUSTTYPE:NA,Export,ExportWOPAY,SEZ,SEZWOPAY.
         * Product Tax Class: NON-GST.
         */
        reqParams = new JSONObject(params, JSONObject.getNames(params));
        reqParams.put("entitycolnum", reqParams.optString("receiptentitycolnum"));
        reqParams.put("entityValue", reqParams.optString("receiptentityValue"));
        reqParams.put("taxClassType", FieldComboData.TaxClass_Non_GST_Product);
        reqParams.put("registrationType", Constants.GSTRegType_Regular + "," + Constants.GSTRegType_Composition + "," + Constants.GSTRegType_Unregistered);
        reqParams.put("CustomerType", Constants.CUSTVENTYPE_NA );
        tempObj = new JSONObject();
        if ((reqParams.has("reportid") && reqParams.optInt("reportid", 0) == Constants.GSTR3B_Summary_Report) || (!StringUtil.isNullOrEmpty(params.optString("transactionType", null)) && (params.optInt("transactionType", 0) == GSTRConstants.GSTR3B_TRANSACTION_TYPE_PAYMENT_RECEIPT || params.optInt("transactionType", 0) == GSTRConstants.GSTR3B_TRANSACTION_TYPE_ALL))) {
            tempObj = getAdjustedAdvance(reqParams);
        }
        if (!(reqParams.has("reportid") && reqParams.optInt("reportid", 0) == Constants.GSTR3B_Summary_Report) && reqParams.optBoolean(GSTR3BConstants.DETAILED_VIEW_REPORT, false)) {
            JSONArray tempArr = tempObj.optJSONArray("data");
            if (tempArr != null && tempArr.length() > 0) {
                dataJArr = StringUtil.concatJSONArray(dataJArr, tempArr);
            }
        } else {
            temp = tempObj.optJSONObject("gstr3Obj");
            jSONObject.put("taxableamt", authHandler.formattedAmount((jSONObject.optDouble("taxableamt", 0.0) + temp.optDouble("taxableamt", 0.0)), companyId));
            jSONObject.put("igst", authHandler.formattedAmount((jSONObject.optDouble("igst", 0.0) + temp.optDouble("igst", 0.0)), companyId));
            jSONObject.put("cgst", authHandler.formattedAmount((jSONObject.optDouble("cgst", 0.0) + temp.optDouble("cgst", 0.0)), companyId));
            jSONObject.put("sgst", authHandler.formattedAmount((jSONObject.optDouble("sgst", 0.0) + temp.optDouble("sgst", 0.0)), companyId));
            jSONObject.put("csgst", authHandler.formattedAmount((jSONObject.optDouble("csgst", 0.0) + temp.optDouble("csgst", 0.0)), companyId));
            jSONObject.put("totaltax", authHandler.formattedAmount((jSONObject.optDouble("totaltax", 0.0) + temp.optDouble("totaltax", 0.0)), companyId));
            jSONObject.put("totalamount", authHandler.formattedAmount((jSONObject.optDouble("totalamount", 0.0) + temp.optDouble("totalamount", 0.0)), companyId));

            jSONObject.put("tableno", "");
            jSONObject.put("particulars", GSTRConstants.GSTR3B_SECTION_3_1_E);
            jSONObject.put("fmt", "B");
            jSONObject.put("enableViewDetail", true);
            dataJArr.put(jSONObject);
        }
        return jSONObject;
    }

    private JSONObject getGSTR3B_Section_3_2_Data(JSONObject params, String companyId, JSONArray dataJArr, JSONArray exportJSONArr) throws JSONException, ServiceException {
        
        /**
         * Section 3.2.
         */
        JSONObject jSONObject = new JSONObject();
        jSONObject.put("tableno", "3.2");
        jSONObject.put("particulars", "Of the supplies shown in 3.1 (a) above, details of inter-state supplies made to unregistered persons, composition taxable persons and UIN holders");
        jSONObject.put("fmt", "B");
        jSONObject.put("showBold", true);
        jSONObject.put("isLabel", true);
        dataJArr.put(jSONObject);

        JSONObject totalJSON_A = getGSTR3B_Section_3_2_A_Data(params, companyId, dataJArr);

        JSONObject totalJSON_B = getGSTR3B_Section_3_2_B_Data(params, companyId, dataJArr);

        JSONObject totalJSON_C = getGSTR3B_Section_3_2_C_Data(params, companyId, dataJArr);

        jSONObject = new JSONObject();
        jSONObject.put("tableno", "");
        jSONObject.put("particulars", "3.2 Total [(a)+(b)+(c)]");
        jSONObject.put("fmt", "B");
        jSONObject.put("taxableamt", authHandler.formattedAmount((totalJSON_A.optDouble("taxableamt", 0.0) + totalJSON_B.optDouble("taxableamt", 0.0) + totalJSON_C.optDouble("taxableamt", 0.0)), companyId));
        jSONObject.put("igst", authHandler.formattedAmount((totalJSON_A.optDouble("igst", 0.0) + totalJSON_B.optDouble("igst", 0.0) + totalJSON_C.optDouble("igst", 0.0)), companyId));
        jSONObject.put("cgst", authHandler.formattedAmount((totalJSON_A.optDouble("cgst", 0.0) + totalJSON_B.optDouble("cgst", 0.0) + totalJSON_C.optDouble("cgst", 0.0)), companyId));
        jSONObject.put("sgst", authHandler.formattedAmount((totalJSON_A.optDouble("sgst", 0.0) + totalJSON_B.optDouble("sgst", 0.0) + totalJSON_C.optDouble("sgst", 0.0)), companyId));
        jSONObject.put("csgst", authHandler.formattedAmount((totalJSON_A.optDouble("csgst", 0.0) + totalJSON_B.optDouble("csgst", 0.0) + totalJSON_C.optDouble("csgst", 0.0)), companyId));
        jSONObject.put("totaltax", authHandler.formattedAmount((totalJSON_A.optDouble("totaltax", 0.0) + totalJSON_B.optDouble("totaltax", 0.0) + totalJSON_C.optDouble("totaltax", 0.0)), companyId));
        jSONObject.put("totalamount", authHandler.formattedAmount((totalJSON_A.optDouble("totalamount", 0.0) + totalJSON_B.optDouble("totalamount", 0.0) + totalJSON_C.optDouble("totalamount", 0.0)), companyId));
        jSONObject.put("showBold", true);
        dataJArr.put(jSONObject);
        return jSONObject;

    }

    private JSONObject getGSTR3B_Section_3_2_A_Data(JSONObject params, String companyId, JSONArray dataJArr) throws JSONException, ServiceException {
        JSONObject jSONObject = new JSONObject();
        double total_csgst, total_cgst, total_sgst, total_igst, total_taxableamount, total_tax, total_amount;
        total_csgst = total_cgst = total_sgst = total_igst = total_taxableamount = total_tax = total_amount = 0.0;
        /**
         * Invoice- REGTYPE:Unregistered.CUSTTYPE:NA,Export,ExportWOPAY.
         * Interstate/Intrastate: Interstate.
         */
        JSONObject reqParams = new JSONObject(params, JSONObject.getNames(params));
        reqParams.put("GST3B", !params.optBoolean(GSTR3BConstants.DETAILED_VIEW_REPORT, false));
        reqParams.put("isGSTINnull", true);
//        reqParams.put("greaterlimit", true);
//        reqParams.put("limitamount", 250000);
        reqParams.put("registrationType", Constants.GSTRegType_Unregistered);
        reqParams.put("CustomerType", Constants.CUSTVENTYPE_NA + "," + Constants.CUSTVENTYPE_Export + "," + Constants.CUSTVENTYPE_ExportWOPAY);
        reqParams.put("taxClassType", FieldComboData.TaxClass_Percenatge);
        reqParams.put("interstate", true);
        reqParams.put("typeofjoinisleft", true);
        JSONObject temp = new JSONObject();
        if ((reqParams.has("reportid") && reqParams.optInt("reportid", 0) == Constants.GSTR3B_Summary_Report) || (!StringUtil.isNullOrEmpty(params.optString("transactionType", null)) && (params.optInt("transactionType", 0) == GSTRConstants.GSTR3B_TRANSACTION_TYPE_INVOICE || params.optInt("transactionType", 0) == GSTRConstants.GSTR3B_TRANSACTION_TYPE_ALL))) {
            /**
             * For GSTR3B-Detail View.
             */
            temp = getInvoiceForGSTR3BTaxable(reqParams);
        }
        if (!(reqParams.has("reportid") && reqParams.optInt("reportid", 0) == Constants.GSTR3B_Summary_Report) && params.optBoolean(GSTR3BConstants.DETAILED_VIEW_REPORT, false)) {
            JSONArray tempArr = temp.optJSONArray("data");
            if (tempArr != null && tempArr.length() > 0) {
                dataJArr = StringUtil.concatJSONArray(dataJArr, tempArr);
            }
        } else {
            total_csgst = temp.optDouble("csgst", 0.0);
            total_cgst = temp.optDouble("cgst", 0.0);
            total_sgst = temp.optDouble("sgst", 0.0);
            total_igst = temp.optDouble("igst", 0.0);
            total_taxableamount = temp.optDouble("taxableamt", 0.0);
            total_tax = temp.optDouble("totaltax", 0.0);
            total_amount = temp.optDouble("totalamount", 0.0);
        }
        
        /**
         * Debit Note- REGTYPE:Unregistered.CUSTTYPE:NA,Export,ExportWOPAY.
         * Interstate/Intrastate: Interstate.
         */
        reqParams = new JSONObject(params, JSONObject.getNames(params));
        reqParams.put("GST3B", !params.optBoolean(GSTR3BConstants.DETAILED_VIEW_REPORT, false));
        reqParams.put("registrationType", Constants.GSTRegType_Unregistered);
        reqParams.put("CustomerType", Constants.CUSTVENTYPE_NA + "," + Constants.CUSTVENTYPE_Export + "," + Constants.CUSTVENTYPE_ExportWOPAY);
        reqParams.put("taxClassType", FieldComboData.TaxClass_Percenatge);
        reqParams.put("interstate", true);
        temp = new JSONObject();
        if ((reqParams.has("reportid") && reqParams.optInt("reportid", 0) == Constants.GSTR3B_Summary_Report) || (!StringUtil.isNullOrEmpty(params.optString("transactionType", null)) && (params.optInt("transactionType", 0) == GSTRConstants.GSTR3B_TRANSACTION_TYPE_NOTE || params.optInt("transactionType", 0) == GSTRConstants.GSTR3B_TRANSACTION_TYPE_ALL))) {
            temp = getDNAgainstSalesForGSTR3BTaxable(reqParams);
        }
        if (!(reqParams.has("reportid") && reqParams.optInt("reportid", 0) == Constants.GSTR3B_Summary_Report) && params.optBoolean(GSTR3BConstants.DETAILED_VIEW_REPORT, false)) {
            JSONArray tempArr = temp.optJSONArray("data");
            if (tempArr != null && tempArr.length() > 0) {
                dataJArr = StringUtil.concatJSONArray(dataJArr, tempArr);
            }
        } else {
            total_csgst += temp.optDouble("csgst", 0.0);
            total_cgst += temp.optDouble("cgst", 0.0);
            total_sgst += temp.optDouble("sgst", 0.0);
            total_igst += temp.optDouble("igst", 0.0);
            total_taxableamount += temp.optDouble("taxableamt", 0.0);
            total_tax += temp.optDouble("totaltax", 0.0);
            total_amount += temp.optDouble("totalamount", 0.0);
        }
        

        /**
         * Credit Note- REGTYPE:Unregistered.CUSTTYPE:NA,Export,ExportWOPAY.
         * Interstate/Intrastate: Interstate.
         */
        reqParams = new JSONObject(params, JSONObject.getNames(params));
        reqParams.put("GST3B", !params.optBoolean(GSTR3BConstants.DETAILED_VIEW_REPORT, false));
         reqParams.put("registrationType", Constants.GSTRegType_Unregistered);
        reqParams.put("CustomerType", Constants.CUSTVENTYPE_NA + "," + Constants.CUSTVENTYPE_Export + "," + Constants.CUSTVENTYPE_ExportWOPAY);
        reqParams.put("taxClassType", FieldComboData.TaxClass_Percenatge);
        reqParams.put("interstate", true);
        temp = new JSONObject();
        if ((reqParams.has("reportid") && reqParams.optInt("reportid", 0) == Constants.GSTR3B_Summary_Report) || (!StringUtil.isNullOrEmpty(params.optString("transactionType", null)) && (params.optInt("transactionType", 0) == GSTRConstants.GSTR3B_TRANSACTION_TYPE_NOTE || params.optInt("transactionType", 0) == GSTRConstants.GSTR3B_TRANSACTION_TYPE_ALL))) {
            temp = getCNForGSTR3BTaxable(reqParams);
        }
        if (!(reqParams.has("reportid") && reqParams.optInt("reportid", 0) == Constants.GSTR3B_Summary_Report) && params.optBoolean(GSTR3BConstants.DETAILED_VIEW_REPORT, false)) {
            JSONArray tempArr = temp.optJSONArray("data");
            if (tempArr != null && tempArr.length() > 0) {
                dataJArr = StringUtil.concatJSONArray(dataJArr, tempArr);
            }
        } else {
            total_csgst += temp.optDouble("csgst", 0.0);
            total_cgst += temp.optDouble("cgst", 0.0);
            total_sgst += temp.optDouble("sgst", 0.0);
            total_igst += temp.optDouble("igst", 0.0);
            total_taxableamount += temp.optDouble("taxableamt", 0.0);
            total_tax += temp.optDouble("totaltax", 0.0);
            total_amount += temp.optDouble("totalamount", 0.0);
        }
        
        /**
         * Tax Liability- REGTYPE:Unregistered.CUSTTYPE:NA,Export,ExportWOPAY.
         * Interstate/Intrastate: Interstate.
         */
        reqParams = new JSONObject(params, JSONObject.getNames(params));
        reqParams.put("entitycolnum", reqParams.optString("receiptentitycolnum"));
        reqParams.put("entityValue", reqParams.optString("receiptentityValue"));
         reqParams.put("registrationType", Constants.GSTRegType_Unregistered);
        reqParams.put("CustomerType", Constants.CUSTVENTYPE_NA + "," + Constants.CUSTVENTYPE_Export + "," + Constants.CUSTVENTYPE_ExportWOPAY);
        reqParams.put("taxClassType", FieldComboData.TaxClass_Percenatge);
        reqParams.put("interstate", true);
        JSONObject tempObj = new JSONObject();
        if ((reqParams.has("reportid") && reqParams.optInt("reportid", 0) == Constants.GSTR3B_Summary_Report) || (!StringUtil.isNullOrEmpty(params.optString("transactionType", null)) && (params.optInt("transactionType", 0) == GSTRConstants.GSTR3B_TRANSACTION_TYPE_PAYMENT_RECEIPT || params.optInt("transactionType", 0) == GSTRConstants.GSTR3B_TRANSACTION_TYPE_ALL))) {
            tempObj = getTaxLiabilityOnAdvance(reqParams);
        }
        if (!(reqParams.has("reportid") && reqParams.optInt("reportid", 0) == Constants.GSTR3B_Summary_Report) && reqParams.optBoolean(GSTR3BConstants.DETAILED_VIEW_REPORT, false)) {
            JSONArray tempArr = tempObj.optJSONArray("data");
            if (tempArr != null && tempArr.length() > 0) {
                dataJArr = StringUtil.concatJSONArray(dataJArr, tempArr);
            }
        } else {
            temp = tempObj.getJSONObject("gstr3Obj");

            total_csgst += temp.optDouble("csgst", 0.0);
            total_cgst += temp.optDouble("cgst", 0.0);
            total_sgst += temp.optDouble("sgst", 0.0);
            total_igst += temp.optDouble("igst", 0.0);
            total_taxableamount += temp.optDouble("taxableamt", 0.0);
            total_tax += temp.optDouble("totaltax", 0.0);
            total_amount += temp.optDouble("totalamount", 0.0);
        }
        /**
         * Advance Adjusted-
         * REGTYPE:Unregistered.CUSTTYPE:NA,Export,ExportWOPAY.
         * Interstate/Intrastate: Interstate.
         */
        reqParams = new JSONObject(params, JSONObject.getNames(params));
        reqParams.put("entitycolnum", reqParams.optString("receiptentitycolnum"));
        reqParams.put("entityValue", reqParams.optString("receiptentityValue"));
        reqParams.put("registrationType", Constants.GSTRegType_Unregistered);
        reqParams.put("CustomerType", Constants.CUSTVENTYPE_NA + "," + Constants.CUSTVENTYPE_Export + "," + Constants.CUSTVENTYPE_ExportWOPAY);
        reqParams.put("taxClassType", FieldComboData.TaxClass_Percenatge);
        reqParams.put("interstate", true);
        tempObj = new JSONObject();
        if ((reqParams.has("reportid") && reqParams.optInt("reportid", 0) == Constants.GSTR3B_Summary_Report) || (!StringUtil.isNullOrEmpty(params.optString("transactionType", null)) && (params.optInt("transactionType", 0) == GSTRConstants.GSTR3B_TRANSACTION_TYPE_PAYMENT_RECEIPT || params.optInt("transactionType", 0) == GSTRConstants.GSTR3B_TRANSACTION_TYPE_ALL))) {
            tempObj = getAdjustedAdvance(reqParams);
        }
        if (!(reqParams.has("reportid") && reqParams.optInt("reportid", 0) == Constants.GSTR3B_Summary_Report) && reqParams.optBoolean(GSTR3BConstants.DETAILED_VIEW_REPORT, false)) {
            JSONArray tempArr = tempObj.optJSONArray("data");
            if (tempArr != null && tempArr.length() > 0) {
                dataJArr = StringUtil.concatJSONArray(dataJArr, tempArr);
            }
        } else {
            temp = tempObj.getJSONObject("gstr3Obj");

            total_csgst += temp.optDouble("csgst", 0.0);
            total_cgst += temp.optDouble("cgst", 0.0);
            total_sgst += temp.optDouble("sgst", 0.0);
            total_igst += temp.optDouble("igst", 0.0);
            total_taxableamount += temp.optDouble("taxableamt", 0.0);
            total_tax += temp.optDouble("totaltax", 0.0);
            total_amount += temp.optDouble("totalamount", 0.0);

            jSONObject.put("tableno", "");
            jSONObject.put("particulars", GSTRConstants.GSTR3B_SECTION_3_2_A);
            jSONObject.put("fmt", "B");
            jSONObject.put("section", GSTRConstants.GSTR3B_INTERSSUPPLY_UNREG_DETAILS);
            jSONObject.put("enableViewDetail", true);
            jSONObject.put("taxableamt", authHandler.formattedAmount(total_taxableamount, companyId));
            jSONObject.put("igst", authHandler.formattedAmount(total_igst, companyId));
            jSONObject.put("cgst", authHandler.formattedAmount(total_cgst, companyId));
            jSONObject.put("sgst", authHandler.formattedAmount(total_sgst, companyId));
            jSONObject.put("csgst", authHandler.formattedAmount(total_csgst, companyId));
            jSONObject.put("totaltax", authHandler.formattedAmount(total_tax, companyId));
            jSONObject.put("totalamount", authHandler.formattedAmount(total_amount, companyId));
            dataJArr.put(jSONObject);
        }
        return jSONObject;
    }

    private JSONObject getGSTR3B_Section_3_2_B_Data(JSONObject params, String companyId, JSONArray dataJArr) throws JSONException, ServiceException {
        JSONObject jSONObject = new JSONObject();
        double total_csgst, total_cgst, total_sgst, total_igst, total_taxableamount, total_tax, total_amount;
        total_csgst = total_cgst = total_sgst = total_igst = total_taxableamount = total_tax = total_amount = 0.0;
        /**
         * Invoice- REGTYPE:Composition.CUSTTYPE:NA. Interstate/Intrastate:
         * Interstate.
         */
        JSONObject reqParams = new JSONObject(params, JSONObject.getNames(params));
        reqParams.put("isGSTINnull", false);
        reqParams.put("GST3B", !params.optBoolean(GSTR3BConstants.DETAILED_VIEW_REPORT, false));
        reqParams.put("interstate", true);
//        reqParams.put("isRCMApplicable", false);
        reqParams.put("registrationType", Constants.GSTRegType_Composition);
        reqParams.put("CustomerType", Constants.CUSTVENTYPE_NA);
        reqParams.put("taxClassType", FieldComboData.TaxClass_Percenatge);
        reqParams.put("typeofjoinisleft", true);
        JSONObject temp = new JSONObject();
        if ((reqParams.has("reportid") && reqParams.optInt("reportid", 0) == Constants.GSTR3B_Summary_Report) || (!StringUtil.isNullOrEmpty(params.optString("transactionType", null)) && (params.optInt("transactionType", 0) == GSTRConstants.GSTR3B_TRANSACTION_TYPE_INVOICE || params.optInt("transactionType", 0) == GSTRConstants.GSTR3B_TRANSACTION_TYPE_ALL))) {
            /**
             * For GSTR3B-Detail View.
             */
            temp = getInvoiceForGSTR3BTaxable(reqParams);
        }
        if (!(reqParams.has("reportid") && reqParams.optInt("reportid", 0) == Constants.GSTR3B_Summary_Report) && params.optBoolean(GSTR3BConstants.DETAILED_VIEW_REPORT, false)) {
            JSONArray tempArr = temp.optJSONArray("data");
            if (tempArr != null && tempArr.length() > 0) {
                dataJArr = StringUtil.concatJSONArray(dataJArr, tempArr);
            }
        } else {
            total_csgst = temp.optDouble("csgst", 0.0);
            total_cgst = temp.optDouble("cgst", 0.0);
            total_sgst = temp.optDouble("sgst", 0.0);
            total_igst = temp.optDouble("igst", 0.0);
            total_taxableamount = temp.optDouble("taxableamt", 0.0);
            total_tax = temp.optDouble("totaltax", 0.0);
            total_amount = temp.optDouble("totalamount", 0.0);
        }

        /**
         * Debit Note- REGTYPE:Composition.CUSTTYPE:NA. Interstate/Intrastate:
         * Interstate.
         */
        reqParams = new JSONObject(params, JSONObject.getNames(params));
        reqParams.put("GST3B", !params.optBoolean(GSTR3BConstants.DETAILED_VIEW_REPORT, false));
        reqParams.put("interstate", true);
        reqParams.put("registrationType", Constants.GSTRegType_Composition);
        reqParams.put("CustomerType", Constants.CUSTVENTYPE_NA);    
        reqParams.put("taxClassType", FieldComboData.TaxClass_Percenatge);
        temp = new JSONObject();
        if ((reqParams.has("reportid") && reqParams.optInt("reportid", 0) == Constants.GSTR3B_Summary_Report) || (!StringUtil.isNullOrEmpty(params.optString("transactionType", null)) && (params.optInt("transactionType", 0) == GSTRConstants.GSTR3B_TRANSACTION_TYPE_NOTE || params.optInt("transactionType", 0) == GSTRConstants.GSTR3B_TRANSACTION_TYPE_ALL))) {
            temp = getDNAgainstSalesForGSTR3BTaxable(reqParams);
        }
        if (!(reqParams.has("reportid") && reqParams.optInt("reportid", 0) == Constants.GSTR3B_Summary_Report) && params.optBoolean(GSTR3BConstants.DETAILED_VIEW_REPORT, false)) {
            JSONArray tempArr = temp.optJSONArray("data");
            if (tempArr != null && tempArr.length() > 0) {
                dataJArr = StringUtil.concatJSONArray(dataJArr, tempArr);
            }
        } else {
            total_csgst += temp.optDouble("csgst", 0.0);
            total_cgst += temp.optDouble("cgst", 0.0);
            total_sgst += temp.optDouble("sgst", 0.0);
            total_igst += temp.optDouble("igst", 0.0);
            total_taxableamount += temp.optDouble("taxableamt", 0.0);
            total_tax += temp.optDouble("totaltax", 0.0);
            total_amount += temp.optDouble("totalamount", 0.0);
        }
        /**
         * Credit Note- REGTYPE:Composition.CUSTTYPE:NA. Interstate/Intrastate:
         * Interstate.
         */
        reqParams = new JSONObject(params, JSONObject.getNames(params));
        reqParams.put("GST3B", !params.optBoolean(GSTR3BConstants.DETAILED_VIEW_REPORT, false));
        reqParams.put("interstate", true);
        reqParams.put("registrationType", Constants.GSTRegType_Composition);
        reqParams.put("CustomerType", Constants.CUSTVENTYPE_NA);
        reqParams.put("taxClassType", FieldComboData.TaxClass_Percenatge);
        temp = new JSONObject();
        if ((reqParams.has("reportid") && reqParams.optInt("reportid", 0) == Constants.GSTR3B_Summary_Report) || (!StringUtil.isNullOrEmpty(params.optString("transactionType", null)) && (params.optInt("transactionType", 0) == GSTRConstants.GSTR3B_TRANSACTION_TYPE_NOTE || params.optInt("transactionType", 0) == GSTRConstants.GSTR3B_TRANSACTION_TYPE_ALL))) {
            temp = getCNForGSTR3BTaxable(reqParams);
        }
        if (!(reqParams.has("reportid") && reqParams.optInt("reportid", 0) == Constants.GSTR3B_Summary_Report) && params.optBoolean(GSTR3BConstants.DETAILED_VIEW_REPORT, false)) {
            JSONArray tempArr = temp.optJSONArray("data");
            if (tempArr != null && tempArr.length() > 0) {
                dataJArr = StringUtil.concatJSONArray(dataJArr, tempArr);
            }
        } else {
            total_csgst += temp.optDouble("csgst", 0.0);
            total_cgst += temp.optDouble("cgst", 0.0);
            total_sgst += temp.optDouble("sgst", 0.0);
            total_igst += temp.optDouble("igst", 0.0);
            total_taxableamount += temp.optDouble("taxableamt", 0.0);
            total_tax += temp.optDouble("totaltax", 0.0);
            total_amount += temp.optDouble("totalamount", 0.0);
        }
        
        /**
         * Tax Liability- REGTYPE:Composition.CUSTTYPE:NA. Interstate/Intrastate:
         * Interstate.
         */
        reqParams = new JSONObject(params, JSONObject.getNames(params));
        reqParams.put("entitycolnum", reqParams.optString("receiptentitycolnum"));
        reqParams.put("entityValue", reqParams.optString("receiptentityValue"));
        reqParams.put("interstate", true);
        reqParams.put("registrationType", Constants.GSTRegType_Composition);
        reqParams.put("CustomerType", Constants.CUSTVENTYPE_NA);
        reqParams.put("taxClassType", FieldComboData.TaxClass_Percenatge);
        JSONObject tempObj = new JSONObject();
        if ((reqParams.has("reportid") && reqParams.optInt("reportid", 0) == Constants.GSTR3B_Summary_Report) || (!StringUtil.isNullOrEmpty(params.optString("transactionType", null)) && (params.optInt("transactionType", 0) == GSTRConstants.GSTR3B_TRANSACTION_TYPE_PAYMENT_RECEIPT || params.optInt("transactionType", 0) == GSTRConstants.GSTR3B_TRANSACTION_TYPE_ALL))) {
            tempObj = getTaxLiabilityOnAdvance(reqParams);
        }
        if (!(reqParams.has("reportid") && reqParams.optInt("reportid", 0) == Constants.GSTR3B_Summary_Report) && reqParams.optBoolean(GSTR3BConstants.DETAILED_VIEW_REPORT, false)) {
            JSONArray tempArr = tempObj.optJSONArray("data");
            if (tempArr != null && tempArr.length() > 0) {
                dataJArr = StringUtil.concatJSONArray(dataJArr, tempArr);
            }
        } else {
            temp = tempObj.getJSONObject("gstr3Obj");

            total_csgst += temp.optDouble("csgst", 0.0);
            total_cgst += temp.optDouble("cgst", 0.0);
            total_sgst += temp.optDouble("sgst", 0.0);
            total_igst += temp.optDouble("igst", 0.0);
            total_taxableamount += temp.optDouble("taxableamt", 0.0);
            total_tax += temp.optDouble("totaltax", 0.0);
            total_amount += temp.optDouble("totalamount", 0.0);
        }
        /**
         * Advance Adjustment- REGTYPE:Composition.CUSTTYPE:NA. Interstate/Intrastate:
         * Interstate.
         */
        reqParams = new JSONObject(params, JSONObject.getNames(params));
        reqParams.put("entitycolnum", reqParams.optString("receiptentitycolnum"));
        reqParams.put("entityValue", reqParams.optString("receiptentityValue"));
        reqParams.put("interstate", true);
        reqParams.put("registrationType", Constants.GSTRegType_Composition);
        reqParams.put("CustomerType", Constants.CUSTVENTYPE_NA);
        reqParams.put("taxClassType", FieldComboData.TaxClass_Percenatge);
        tempObj = new JSONObject();
        if ((reqParams.has("reportid") && reqParams.optInt("reportid", 0) == Constants.GSTR3B_Summary_Report) || (!StringUtil.isNullOrEmpty(params.optString("transactionType", null)) && (params.optInt("transactionType", 0) == GSTRConstants.GSTR3B_TRANSACTION_TYPE_PAYMENT_RECEIPT || params.optInt("transactionType", 0) == GSTRConstants.GSTR3B_TRANSACTION_TYPE_ALL))) {
            tempObj = getAdjustedAdvance(reqParams);
        }
        if (!(reqParams.has("reportid") && reqParams.optInt("reportid", 0) == Constants.GSTR3B_Summary_Report) && reqParams.optBoolean(GSTR3BConstants.DETAILED_VIEW_REPORT, false)) {
            JSONArray tempArr = tempObj.optJSONArray("data");
            if (tempArr != null && tempArr.length() > 0) {
                dataJArr = StringUtil.concatJSONArray(dataJArr, tempArr);
            }
        } else {
            temp = tempObj.getJSONObject("gstr3Obj");

            total_csgst += temp.optDouble("csgst", 0.0);
            total_cgst += temp.optDouble("cgst", 0.0);
            total_sgst += temp.optDouble("sgst", 0.0);
            total_igst += temp.optDouble("igst", 0.0);
            total_taxableamount += temp.optDouble("taxableamt", 0.0);
            total_tax += temp.optDouble("totaltax", 0.0);
            total_amount += temp.optDouble("totalamount", 0.0);

            jSONObject.put("tableno", "");
            jSONObject.put("particulars", GSTRConstants.GSTR3B_SECTION_3_2_B);
            jSONObject.put("fmt", "B");
            jSONObject.put("enableViewDetail", true);
            jSONObject.put("section", GSTRConstants.GSTR3B_INTERSSUPPLY_COMPOSITION_DETAILS);
            jSONObject.put("taxableamt", authHandler.formattedAmount(total_taxableamount, companyId));
            jSONObject.put("igst", authHandler.formattedAmount(total_igst, companyId));
            jSONObject.put("cgst", authHandler.formattedAmount(total_cgst, companyId));
            jSONObject.put("sgst", authHandler.formattedAmount(total_sgst, companyId));
            jSONObject.put("csgst", authHandler.formattedAmount(total_csgst, companyId));
            jSONObject.put("totaltax", authHandler.formattedAmount(total_tax, companyId));
            jSONObject.put("totalamount", authHandler.formattedAmount(total_amount, companyId));
            dataJArr.put(jSONObject);
        }
        return jSONObject;
    }

    private JSONObject getGSTR3B_Section_3_2_C_Data(JSONObject params, String companyId, JSONArray dataJArr) throws JSONException, ServiceException {
        
        JSONObject totalJSON = new JSONObject();
        JSONObject jSONObject = new JSONObject();
        jSONObject.put("tableno", "");
        jSONObject.put("particulars", GSTRConstants.GSTR3B_SECTION_3_2_C);
        jSONObject.put("fmt", "B");
        jSONObject.put("section", GSTRConstants.GSTR3B_INTERSSUPPLY_UIN_DETAILS);
        jSONObject.put("enableViewDetail", true);
        dataJArr.put(jSONObject);
        return totalJSON;
    }

     private void getGSTR3B_Section_4_Data(JSONObject params, String companyId, JSONArray dataJArr, JSONArray exportJSONArr, JSONObject summaryObject) throws JSONException, ServiceException {
        
        /**
         * Section 4 start.
         */

        JSONObject jSONObject = new JSONObject();
        jSONObject.put("tableno", "4");
        jSONObject.put("particulars", "Eligible ITC");
        jSONObject.put("fmt", "B");
        jSONObject.put("isLabel", true);
        jSONObject.put("showBold", true);
        dataJArr.put(jSONObject);

        JSONObject totalJSON_A = gstGSTR3B_Section_4_A_Data(params, companyId, dataJArr,exportJSONArr);
        totalJSON_A.put("tableno", "");
        totalJSON_A.put("showBold", true);
        totalJSON_A.put("particulars", "4 (A) Total [(1)+(2)+(3)+(4)+(5)]");
        totalJSON_A.put("fmt", "B");
        dataJArr.put(totalJSON_A);
        
        summaryObject.put("taxableamt", authHandler.formattedAmount(summaryObject.optDouble("taxableamt", 0.0) - totalJSON_A.optDouble("taxableamt", 0.0), companyId));
        summaryObject.put("igst", authHandler.formattedAmount(summaryObject.optDouble("igst", 0.0) - totalJSON_A.optDouble("igst", 0.0), companyId));
        summaryObject.put("cgst", authHandler.formattedAmount(summaryObject.optDouble("cgst", 0.0) - totalJSON_A.optDouble("cgst", 0.0), companyId));
        summaryObject.put("sgst", authHandler.formattedAmount(summaryObject.optDouble("sgst", 0.0) - totalJSON_A.optDouble("sgst", 0.0), companyId));
        summaryObject.put("csgst", authHandler.formattedAmount(summaryObject.optDouble("csgst", 0.0) - totalJSON_A.optDouble("csgst", 0.0), companyId));
        summaryObject.put("totaltax", authHandler.formattedAmount(summaryObject.optDouble("totaltax", 0.0) - totalJSON_A.optDouble("totaltax", 0.0), companyId));
        summaryObject.put("totalamount", authHandler.formattedAmount(summaryObject.optDouble("totalamount", 0.0) - totalJSON_A.optDouble("totalamount", 0.0), companyId));

        JSONObject totalJSON_B = gstGSTR3B_Section_4_B_Data(params, companyId, dataJArr,exportJSONArr);
        totalJSON_B.put("tableno", "");
        totalJSON_B.put("particulars", "4 (B) Total [(1)+(2)]");
        totalJSON_B.put("fmt", "B");
        totalJSON_B.put("showBold", true);
        dataJArr.put(totalJSON_B);

        summaryObject.put("taxableamt", authHandler.formattedAmount(summaryObject.optDouble("taxableamt", 0.0) + totalJSON_B.optDouble("taxableamt", 0.0), companyId));
        summaryObject.put("igst", authHandler.formattedAmount(summaryObject.optDouble("igst", 0.0) + totalJSON_B.optDouble("igst", 0.0), companyId));
        summaryObject.put("cgst", authHandler.formattedAmount(summaryObject.optDouble("cgst", 0.0) + totalJSON_B.optDouble("cgst", 0.0), companyId));
        summaryObject.put("sgst", authHandler.formattedAmount(summaryObject.optDouble("sgst", 0.0) + totalJSON_B.optDouble("sgst", 0.0), companyId));
        summaryObject.put("csgst", authHandler.formattedAmount(summaryObject.optDouble("csgst", 0.0) + totalJSON_B.optDouble("csgst", 0.0), companyId));
        summaryObject.put("totaltax", authHandler.formattedAmount(summaryObject.optDouble("totaltax", 0.0) + totalJSON_B.optDouble("totaltax", 0.0), companyId));
        summaryObject.put("totalamount", authHandler.formattedAmount(summaryObject.optDouble("totalamount", 0.0) + totalJSON_B.optDouble("totalamount", 0.0), companyId));

        jSONObject = new JSONObject();
        jSONObject.put("tableno", "");
        jSONObject.put("particulars", "(C) Net ITC Available (A) – (B)");
        jSONObject.put("fmt", "B");
        jSONObject.put("showBold", true);
        jSONObject.put("taxableamt", authHandler.formattedAmount((totalJSON_A.optDouble("taxableamt", 0.0) - totalJSON_B.optDouble("taxableamt", 0.0)), companyId));
        jSONObject.put("igst", authHandler.formattedAmount((totalJSON_A.optDouble("igst", 0.0) - totalJSON_B.optDouble("igst", 0.0)), companyId));
        jSONObject.put("cgst", authHandler.formattedAmount((totalJSON_A.optDouble("cgst", 0.0) - totalJSON_B.optDouble("cgst", 0.0)), companyId));
        jSONObject.put("sgst", authHandler.formattedAmount((totalJSON_A.optDouble("sgst", 0.0) - totalJSON_B.optDouble("sgst", 0.0)), companyId));
        jSONObject.put("csgst", authHandler.formattedAmount((totalJSON_A.optDouble("csgst", 0.0) - totalJSON_B.optDouble("csgst", 0.0)), companyId));
        jSONObject.put("totaltax", authHandler.formattedAmount((totalJSON_A.optDouble("totaltax", 0.0) - totalJSON_B.optDouble("totaltax", 0.0)), companyId));
        jSONObject.put("totalamount", authHandler.formattedAmount((totalJSON_A.optDouble("totalamount", 0.0) - totalJSON_B.optDouble("totalamount", 0.0)), companyId));

        dataJArr.put(jSONObject);

        JSONObject totalJSON_D = getGSTR3B_Section_4_D_Data(params, companyId, dataJArr, exportJSONArr);
        totalJSON_D.put("tableno", "");
        totalJSON_D.put("showBold", true);
        totalJSON_D.put("particulars", "4 (D) Total [(1)+(2)]");
        totalJSON_D.put("fmt", "B");
        dataJArr.put(totalJSON_D);
    }

    private JSONObject gstGSTR3B_Section_4_A_Data(JSONObject params, String companyId, JSONArray dataJArr, JSONArray exportJSONArr) throws JSONException, ServiceException {
        JSONObject totalJSON = new JSONObject();
        JSONObject jSONObject = new JSONObject();
        jSONObject.put("tableno", "");
        jSONObject.put("particulars", "(A) ITC Available (whether in full or part)");
        jSONObject.put("fmt", "B");
        jSONObject.put("isLabel", true);
        jSONObject.put("showBold", true);
        dataJArr.put(jSONObject);

        jSONObject = getGSTR3B_Section_4_A_1_Data(params, companyId, dataJArr);

        totalJSON.put("taxableamt", jSONObject.optDouble("taxableamt", 0.0));
        totalJSON.put("igst", jSONObject.optDouble("igst", 0.0));
        totalJSON.put("cgst", jSONObject.optDouble("cgst", 0.0));
        totalJSON.put("sgst", jSONObject.optDouble("sgst", 0.0));
        totalJSON.put("csgst", jSONObject.optDouble("csgst", 0.0));
        totalJSON.put("totaltax", jSONObject.optDouble("totaltax", 0.0));
        totalJSON.put("totalamount", jSONObject.optDouble("totalamount", 0.0));

        jSONObject = getGSTR3B_Section_4_A_2_Data(params, companyId, dataJArr);

        totalJSON.put("taxableamt", authHandler.formattedAmount((jSONObject.optDouble("taxableamt", 0.0) + totalJSON.optDouble("taxableamt", 0.0)), companyId));
        totalJSON.put("igst", authHandler.formattedAmount((jSONObject.optDouble("igst", 0.0) + totalJSON.optDouble("igst", 0.0)), companyId));
        totalJSON.put("cgst", authHandler.formattedAmount((jSONObject.optDouble("cgst", 0.0) + totalJSON.optDouble("cgst", 0.0)), companyId));
        totalJSON.put("sgst", authHandler.formattedAmount((jSONObject.optDouble("sgst", 0.0) + totalJSON.optDouble("sgst", 0.0)), companyId));
        totalJSON.put("csgst", authHandler.formattedAmount((jSONObject.optDouble("csgst", 0.0) + totalJSON.optDouble("csgst", 0.0)), companyId));
        totalJSON.put("totaltax", authHandler.formattedAmount((jSONObject.optDouble("totaltax", 0.0) + totalJSON.optDouble("totaltax", 0.0)), companyId));
        totalJSON.put("totalamount", authHandler.formattedAmount((jSONObject.optDouble("totalamount", 0.0) + totalJSON.optDouble("totalamount", 0.0)), companyId));

        jSONObject = getGSTR3B_Section_4_A_3_Data(params, companyId, dataJArr);

        totalJSON.put("taxableamt", authHandler.formattedAmount((jSONObject.optDouble("taxableamt", 0.0) + totalJSON.optDouble("taxableamt", 0.0)), companyId));
        totalJSON.put("igst", authHandler.formattedAmount((jSONObject.optDouble("igst", 0.0) + totalJSON.optDouble("igst", 0.0)), companyId));
        totalJSON.put("cgst", authHandler.formattedAmount((jSONObject.optDouble("cgst", 0.0) + totalJSON.optDouble("cgst", 0.0)), companyId));
        totalJSON.put("sgst", authHandler.formattedAmount((jSONObject.optDouble("sgst", 0.0) + totalJSON.optDouble("sgst", 0.0)), companyId));
        totalJSON.put("csgst", authHandler.formattedAmount((jSONObject.optDouble("csgst", 0.0) + totalJSON.optDouble("csgst", 0.0)), companyId));
        totalJSON.put("totaltax", authHandler.formattedAmount((jSONObject.optDouble("totaltax", 0.0) + totalJSON.optDouble("totaltax", 0.0)), companyId));
        totalJSON.put("totalamount", authHandler.formattedAmount((jSONObject.optDouble("totalamount", 0.0) + totalJSON.optDouble("totalamount", 0.0)), companyId));

        jSONObject = getGSTR3B_Section_4_A_4_Data(params, companyId, dataJArr);

        jSONObject = getGSTR3B_Section_4_A_5_Data(params, companyId, dataJArr);

        totalJSON.put("taxableamt", authHandler.formattedAmount((jSONObject.optDouble("taxableamt", 0.0) + totalJSON.optDouble("taxableamt", 0.0)), companyId));
        totalJSON.put("igst", authHandler.formattedAmount((jSONObject.optDouble("igst", 0.0) + totalJSON.optDouble("igst", 0.0)), companyId));
        totalJSON.put("cgst", authHandler.formattedAmount((jSONObject.optDouble("cgst", 0.0) + totalJSON.optDouble("cgst", 0.0)), companyId));
        totalJSON.put("sgst", authHandler.formattedAmount((jSONObject.optDouble("sgst", 0.0) + totalJSON.optDouble("sgst", 0.0)), companyId));
        totalJSON.put("csgst", authHandler.formattedAmount((jSONObject.optDouble("csgst", 0.0) + totalJSON.optDouble("csgst", 0.0)), companyId));
        totalJSON.put("totaltax", authHandler.formattedAmount((jSONObject.optDouble("totaltax", 0.0) + totalJSON.optDouble("totaltax", 0.0)), companyId));
        totalJSON.put("totalamount", authHandler.formattedAmount((jSONObject.optDouble("totalamount", 0.0) + totalJSON.optDouble("totalamount", 0.0)), companyId));

        return totalJSON;
    }

    private JSONObject getGSTR3B_Section_4_A_1_Data(JSONObject params, String companyId, JSONArray dataJArr) throws JSONException, ServiceException {
        /**
         * Purchase Invoice- REGTYPE:Unregistered.CUSTTYPE:Import.
         * Interstate/Intrastate: Both. PRODUCTTYPE: Other than service.
         */
        JSONObject reqParams = new JSONObject(params, JSONObject.getNames(params));
        reqParams.put("GST3B", !params.optBoolean(GSTR3BConstants.DETAILED_VIEW_REPORT, false));
        reqParams.put("isServiceProduct", false);
        reqParams.put("CustomerType", Constants.CUSTVENTYPE_Import);
        reqParams.put(GSTRConstants.ADD_LANDEDCOST_JOIN_FOR_IMPORT_INVOICES, true);
        reqParams.put("excludetaxClassType", true);
        reqParams.put("registrationType", Constants.GSTRegType_Unregistered);
        reqParams.put("typeofjoinisleft", true);
//        reqParams.put("interstate", true);
        reqParams.put("taxClassType", FieldComboData.TaxClass_Percenatge);
        reqParams.put("itctype", Constants.GST_ITCTYPE_DEFAULT+","+Constants.GST_ITCTYPE_REVERSED);
        JSONObject jSONObject = new JSONObject();
        if ((reqParams.has("reportid") && reqParams.optInt("reportid", 0) == Constants.GSTR3B_Summary_Report) || (!StringUtil.isNullOrEmpty(params.optString("transactionType", null)) && (params.optInt("transactionType", 0) == GSTRConstants.GSTR3B_TRANSACTION_TYPE_INVOICE || params.optInt("transactionType", 0) == GSTRConstants.GSTR3B_TRANSACTION_TYPE_ALL))) {
            /**
             * For GSTR3B-Detail View.
             */
            jSONObject = getGoodsReceiptForGSTR3BTaxable(reqParams);
        }
        if (!(reqParams.has("reportid") && reqParams.optInt("reportid", 0) == Constants.GSTR3B_Summary_Report) && params.optBoolean(GSTR3BConstants.DETAILED_VIEW_REPORT, false)) {
            JSONArray tempArr = jSONObject.optJSONArray("data");
            if (tempArr != null && tempArr.length() > 0) {
                dataJArr = StringUtil.concatJSONArray(dataJArr, tempArr);
            }
        }

        /**
         * Vendor DN 
         */
        reqParams = new JSONObject(params, JSONObject.getNames(params));
        reqParams.put("GST3B", !params.optBoolean(GSTR3BConstants.DETAILED_VIEW_REPORT, false));
        reqParams.put("isServiceProduct", false);
        reqParams.put("CustomerType", Constants.CUSTVENTYPE_Import);
        reqParams.put("registrationType", Constants.GSTRegType_Unregistered);
        reqParams.put("typeofjoinisleft", true);
        reqParams.put("taxClassType", FieldComboData.TaxClass_Percenatge);
        reqParams.remove("cnentityValue");
        JSONObject temp = new JSONObject();
        if ((reqParams.has("reportid") && reqParams.optInt("reportid", 0) == Constants.GSTR3B_Summary_Report) || (!StringUtil.isNullOrEmpty(params.optString("transactionType", null)) && (params.optInt("transactionType", 0) == GSTRConstants.GSTR3B_TRANSACTION_TYPE_NOTE || params.optInt("transactionType", 0) == GSTRConstants.GSTR3B_TRANSACTION_TYPE_ALL))) {
            /**
             * For GSTR3B-Detail View.
             */
            temp = getDNForGSTR3BTaxable(reqParams);
        }
        if (!(reqParams.has("reportid") && reqParams.optInt("reportid", 0) == Constants.GSTR3B_Summary_Report) && params.optBoolean(GSTR3BConstants.DETAILED_VIEW_REPORT, false)) {
            JSONArray tempArr = temp.optJSONArray("data");
            if (tempArr != null && tempArr.length() > 0) {
                dataJArr = StringUtil.concatJSONArray(dataJArr, tempArr);
            }
        } else {
            jSONObject.put("taxableamt", authHandler.formattedAmount((jSONObject.optDouble("taxableamt", 0.0) + temp.optDouble("taxableamt", 0.0)), companyId));
            jSONObject.put("igst", authHandler.formattedAmount((jSONObject.optDouble("igst", 0.0) + temp.optDouble("igst", 0.0)), companyId));
            jSONObject.put("cgst", authHandler.formattedAmount((jSONObject.optDouble("cgst", 0.0) + temp.optDouble("cgst", 0.0)), companyId));
            jSONObject.put("sgst", authHandler.formattedAmount((jSONObject.optDouble("sgst", 0.0) + temp.optDouble("sgst", 0.0)), companyId));
            jSONObject.put("csgst", authHandler.formattedAmount((jSONObject.optDouble("csgst", 0.0) + temp.optDouble("csgst", 0.0)), companyId));
            jSONObject.put("totaltax", authHandler.formattedAmount((jSONObject.optDouble("totaltax", 0.0) + temp.optDouble("totaltax", 0.0)), companyId));
            jSONObject.put("totalamount", authHandler.formattedAmount((jSONObject.optDouble("totalamount", 0.0) + temp.optDouble("totalamount", 0.0)), companyId));

        }

        /**
         *  Vendor CN
         */
        reqParams = new JSONObject(params, JSONObject.getNames(params));
        reqParams.put("GST3B", !params.optBoolean(GSTR3BConstants.DETAILED_VIEW_REPORT, false));
        reqParams.put("isServiceProduct", false);
        reqParams.put("CustomerType", Constants.CUSTVENTYPE_Import);
        reqParams.put("registrationType", Constants.GSTRegType_Unregistered);
        reqParams.put("typeofjoinisleft", true);
        reqParams.put("taxClassType", FieldComboData.TaxClass_Percenatge);
        reqParams.put("onlycnagainstvendor", true);
        temp = new JSONObject();
        if ((reqParams.has("reportid") && reqParams.optInt("reportid", 0) == Constants.GSTR3B_Summary_Report) || (!StringUtil.isNullOrEmpty(params.optString("transactionType", null)) && (params.optInt("transactionType", 0) == GSTRConstants.GSTR3B_TRANSACTION_TYPE_NOTE || params.optInt("transactionType", 0) == GSTRConstants.GSTR3B_TRANSACTION_TYPE_ALL))) {
            /**
             * For GSTR3B-Detail View.
             */
            temp = getDNForGSTR3BTaxable(reqParams);
        }
        if (!(reqParams.has("reportid") && reqParams.optInt("reportid", 0) == Constants.GSTR3B_Summary_Report) && params.optBoolean(GSTR3BConstants.DETAILED_VIEW_REPORT, false)) {
            JSONArray tempArr = temp.optJSONArray("data");
            if (tempArr != null && tempArr.length() > 0) {
                dataJArr = StringUtil.concatJSONArray(dataJArr, tempArr);
            }
        } else {
            jSONObject.put("taxableamt", authHandler.formattedAmount((jSONObject.optDouble("taxableamt", 0.0) + temp.optDouble("taxableamt", 0.0)), companyId));
            jSONObject.put("igst", authHandler.formattedAmount((jSONObject.optDouble("igst", 0.0) + temp.optDouble("igst", 0.0)), companyId));
            jSONObject.put("cgst", authHandler.formattedAmount((jSONObject.optDouble("cgst", 0.0) + temp.optDouble("cgst", 0.0)), companyId));
            jSONObject.put("sgst", authHandler.formattedAmount((jSONObject.optDouble("sgst", 0.0) + temp.optDouble("sgst", 0.0)), companyId));
            jSONObject.put("csgst", authHandler.formattedAmount((jSONObject.optDouble("csgst", 0.0) + temp.optDouble("csgst", 0.0)), companyId));
            jSONObject.put("totaltax", authHandler.formattedAmount((jSONObject.optDouble("totaltax", 0.0) + temp.optDouble("totaltax", 0.0)), companyId));
            jSONObject.put("totalamount", authHandler.formattedAmount((jSONObject.optDouble("totalamount", 0.0) + temp.optDouble("totalamount", 0.0)), companyId));
            jSONObject.put("tableno", "");
            jSONObject.put("particulars", GSTRConstants.GSTR3B_SECTION_4_A_1);
            jSONObject.put("fmt", "B");
            jSONObject.put("enableViewDetail", true);
            dataJArr.put(jSONObject);
        }
        return jSONObject;
    }

    private JSONObject getGSTR3B_Section_4_A_2_Data(JSONObject params, String companyId, JSONArray dataJArr) throws JSONException, ServiceException {
        /**
         * Purchase Invoice- REGTYPE:Unregistered.CUSTTYPE:Import.
         * Interstate/Intrastate: Both. PRODUCTTYPE: Service.
         */
        JSONObject reqParams = new JSONObject(params, JSONObject.getNames(params));
        reqParams.put("GST3B", !params.optBoolean(GSTR3BConstants.DETAILED_VIEW_REPORT, false));
        reqParams.put("isServiceProduct", true);
//            reqParams.put("isRCMApplicable", false);
        reqParams.put("CustomerType", Constants.CUSTVENTYPE_Import);
        reqParams.put(GSTRConstants.ADD_LANDEDCOST_JOIN_FOR_IMPORT_INVOICES, true);
        reqParams.put("registrationType", Constants.GSTRegType_Unregistered);
        reqParams.put("typeofjoinisleft", true);
//        reqParams.put("interstate", true);
        reqParams.put("taxClassType", FieldComboData.TaxClass_Percenatge);
        reqParams.put("itctype", Constants.GST_ITCTYPE_DEFAULT+","+Constants.GST_ITCTYPE_REVERSED);
        JSONObject jSONObject = new JSONObject();
        if ((reqParams.has("reportid") && reqParams.optInt("reportid", 0) == Constants.GSTR3B_Summary_Report) || (!StringUtil.isNullOrEmpty(params.optString("transactionType", null)) && (params.optInt("transactionType", 0) == GSTRConstants.GSTR3B_TRANSACTION_TYPE_INVOICE || params.optInt("transactionType", 0) == GSTRConstants.GSTR3B_TRANSACTION_TYPE_ALL))) {
            /**
             * For GSTR3B-Detail View.
             */
            jSONObject = getGoodsReceiptForGSTR3BTaxable(reqParams);
        }
        if (!(reqParams.has("reportid") && reqParams.optInt("reportid", 0) == Constants.GSTR3B_Summary_Report) && params.optBoolean(GSTR3BConstants.DETAILED_VIEW_REPORT, false)) {
            JSONArray tempArr = jSONObject.optJSONArray("data");
            if (tempArr != null && tempArr.length() > 0) {
                dataJArr = StringUtil.concatJSONArray(dataJArr, tempArr);
            }
        }
        
        /**
         * Vendor DN
         */
        reqParams = new JSONObject(params, JSONObject.getNames(params));
        reqParams.put("GST3B", !params.optBoolean(GSTR3BConstants.DETAILED_VIEW_REPORT, false));
        reqParams.put("isServiceProduct", true);
        reqParams.put("CustomerType", Constants.CUSTVENTYPE_Import);
        reqParams.put("registrationType", Constants.GSTRegType_Unregistered);
        reqParams.put("typeofjoinisleft", true);
        reqParams.put("taxClassType", FieldComboData.TaxClass_Percenatge);
        reqParams.remove("cnentityValue");
        JSONObject temp = new JSONObject();
        if ((reqParams.has("reportid") && reqParams.optInt("reportid", 0) == Constants.GSTR3B_Summary_Report) || (!StringUtil.isNullOrEmpty(params.optString("transactionType", null)) && (params.optInt("transactionType", 0) == GSTRConstants.GSTR3B_TRANSACTION_TYPE_NOTE || params.optInt("transactionType", 0) == GSTRConstants.GSTR3B_TRANSACTION_TYPE_ALL))) {
            /**
             * For GSTR3B-Detail View.
             */
            temp = getDNForGSTR3BTaxable(reqParams);
        }
        if (!(reqParams.has("reportid") && reqParams.optInt("reportid", 0) == Constants.GSTR3B_Summary_Report) && params.optBoolean(GSTR3BConstants.DETAILED_VIEW_REPORT, false)) {
            JSONArray tempArr = temp.optJSONArray("data");
            if (tempArr != null && tempArr.length() > 0) {
                dataJArr = StringUtil.concatJSONArray(dataJArr, tempArr);
            }
        } else {
            jSONObject.put("taxableamt", authHandler.formattedAmount((jSONObject.optDouble("taxableamt", 0.0) + temp.optDouble("taxableamt", 0.0)), companyId));
            jSONObject.put("igst", authHandler.formattedAmount((jSONObject.optDouble("igst", 0.0) + temp.optDouble("igst", 0.0)), companyId));
            jSONObject.put("cgst", authHandler.formattedAmount((jSONObject.optDouble("cgst", 0.0) + temp.optDouble("cgst", 0.0)), companyId));
            jSONObject.put("sgst", authHandler.formattedAmount((jSONObject.optDouble("sgst", 0.0) + temp.optDouble("sgst", 0.0)), companyId));
            jSONObject.put("csgst", authHandler.formattedAmount((jSONObject.optDouble("csgst", 0.0) + temp.optDouble("csgst", 0.0)), companyId));
            jSONObject.put("totaltax", authHandler.formattedAmount((jSONObject.optDouble("totaltax", 0.0) + temp.optDouble("totaltax", 0.0)), companyId));
            jSONObject.put("totalamount", authHandler.formattedAmount((jSONObject.optDouble("totalamount", 0.0) + temp.optDouble("totalamount", 0.0)), companyId));
        }
        /**
         * Vendor CN
         */

        reqParams = new JSONObject(params, JSONObject.getNames(params));
        reqParams.put("GST3B", !params.optBoolean(GSTR3BConstants.DETAILED_VIEW_REPORT, false));
        reqParams.put("isServiceProduct", true);
        reqParams.put("CustomerType", Constants.CUSTVENTYPE_Import);
        reqParams.put("registrationType", Constants.GSTRegType_Unregistered);
        reqParams.put("typeofjoinisleft", true);
        reqParams.put("taxClassType", FieldComboData.TaxClass_Percenatge);
        reqParams.put("onlycnagainstvendor", true);
        temp = new JSONObject();
        if ((reqParams.has("reportid") && reqParams.optInt("reportid", 0) == Constants.GSTR3B_Summary_Report) || (!StringUtil.isNullOrEmpty(params.optString("transactionType", null)) && (params.optInt("transactionType", 0) == GSTRConstants.GSTR3B_TRANSACTION_TYPE_NOTE || params.optInt("transactionType", 0) == GSTRConstants.GSTR3B_TRANSACTION_TYPE_ALL))) {
            /**
             * For GSTR3B-Detail View.
             */
            temp = getDNForGSTR3BTaxable(reqParams);
        }
        if (!(reqParams.has("reportid") && reqParams.optInt("reportid", 0) == Constants.GSTR3B_Summary_Report) && params.optBoolean(GSTR3BConstants.DETAILED_VIEW_REPORT, false)) {
            JSONArray tempArr = temp.optJSONArray("data");
            if (tempArr != null && tempArr.length() > 0) {
                dataJArr = StringUtil.concatJSONArray(dataJArr, tempArr);
            }
        } else {
            jSONObject.put("taxableamt", authHandler.formattedAmount((jSONObject.optDouble("taxableamt", 0.0) + temp.optDouble("taxableamt", 0.0)), companyId));
            jSONObject.put("igst", authHandler.formattedAmount((jSONObject.optDouble("igst", 0.0) + temp.optDouble("igst", 0.0)), companyId));
            jSONObject.put("cgst", authHandler.formattedAmount((jSONObject.optDouble("cgst", 0.0) + temp.optDouble("cgst", 0.0)), companyId));
            jSONObject.put("sgst", authHandler.formattedAmount((jSONObject.optDouble("sgst", 0.0) + temp.optDouble("sgst", 0.0)), companyId));
            jSONObject.put("csgst", authHandler.formattedAmount((jSONObject.optDouble("csgst", 0.0) + temp.optDouble("csgst", 0.0)), companyId));
            jSONObject.put("totaltax", authHandler.formattedAmount((jSONObject.optDouble("totaltax", 0.0) + temp.optDouble("totaltax", 0.0)), companyId));
            jSONObject.put("totalamount", authHandler.formattedAmount((jSONObject.optDouble("totalamount", 0.0) + temp.optDouble("totalamount", 0.0)), companyId));
            jSONObject.put("tableno", "");
            jSONObject.put("particulars", GSTRConstants.GSTR3B_SECTION_4_A_2);
            jSONObject.put("fmt", "B");
            jSONObject.put("enableViewDetail", true);
            dataJArr.put(jSONObject);
        }
        return jSONObject;
    }
    private JSONObject getGSTR3B_Section_4_A_3_Data(JSONObject params, String companyId, JSONArray dataJArr) throws JSONException, ServiceException {
        
        /**
         * Purchase Invoice- REGTYPE:Regular.CUSTTYPE:NA.
         * Interstate/Intrastate: Both. RCM: TRUE. InterState/IntraState : Both.
         */
        JSONObject reqParams = new JSONObject(params, JSONObject.getNames(params));
        reqParams.put("isGSTINnull", false);
        reqParams.put("GST3B", !params.optBoolean(GSTR3BConstants.DETAILED_VIEW_REPORT, false));
        reqParams.put("isRCMApplicable", true);
        reqParams.put("registrationType", Constants.GSTRegType_Regular);
        reqParams.put("CustomerType", Constants.CUSTVENTYPE_NA);
        reqParams.put("typeofjoinisleft", true);
        reqParams.put("taxClassType", FieldComboData.TaxClass_Percenatge);
        reqParams.put("itctype", Constants.GST_ITCTYPE_DEFAULT+","+Constants.GST_ITCTYPE_REVERSED);
        JSONObject jSONObject = new JSONObject();
        if ((reqParams.has("reportid") && reqParams.optInt("reportid", 0) == Constants.GSTR3B_Summary_Report) || (!StringUtil.isNullOrEmpty(params.optString("transactionType", null)) && (params.optInt("transactionType", 0) == GSTRConstants.GSTR3B_TRANSACTION_TYPE_INVOICE || params.optInt("transactionType", 0) == GSTRConstants.GSTR3B_TRANSACTION_TYPE_ALL))) {
            /**
             * For GSTR3B-Detail View.
             */
            jSONObject = getGoodsReceiptForGSTR3BTaxable(reqParams);
        }
        if (!(reqParams.has("reportid") && reqParams.optInt("reportid", 0) == Constants.GSTR3B_Summary_Report) && params.optBoolean(GSTR3BConstants.DETAILED_VIEW_REPORT, false)) {
            JSONArray tempArr = jSONObject.optJSONArray("data");
            if (tempArr != null && tempArr.length() > 0) {
                dataJArr = StringUtil.concatJSONArray(dataJArr, tempArr);
            }
        } 
         /**
         * Purchase Invoice- REGTYPE:Unregistered.CUSTTYPE:NA.
         * Interstate/Intrastate: Both. RCM: TRUE. InterState/IntraState : Both.
         */
        reqParams = new JSONObject(params, JSONObject.getNames(params));
        reqParams.put("GST3B", !params.optBoolean(GSTR3BConstants.DETAILED_VIEW_REPORT, false));
        reqParams.put("isRCMApplicable", true);
        reqParams.put("CustomerType", Constants.CUSTVENTYPE_NA);
        reqParams.put("registrationType", Constants.GSTRegType_Unregistered);
        reqParams.put("typeofjoinisleft", true);
        reqParams.put("taxClassType", FieldComboData.TaxClass_Percenatge);
        reqParams.put("itctype", Constants.GST_ITCTYPE_DEFAULT+","+Constants.GST_ITCTYPE_REVERSED);
        JSONObject temp = new JSONObject();
        if ((reqParams.has("reportid") && reqParams.optInt("reportid", 0) == Constants.GSTR3B_Summary_Report) || (!StringUtil.isNullOrEmpty(params.optString("transactionType", null)) && (params.optInt("transactionType", 0) == GSTRConstants.GSTR3B_TRANSACTION_TYPE_INVOICE || params.optInt("transactionType", 0) == GSTRConstants.GSTR3B_TRANSACTION_TYPE_ALL))) {
            /**
             * For GSTR3B-Detail View.
             */
            temp = getGoodsReceiptForGSTR3BTaxable(reqParams);
        }
        if (!(reqParams.has("reportid") && reqParams.optInt("reportid", 0) == Constants.GSTR3B_Summary_Report) && params.optBoolean(GSTR3BConstants.DETAILED_VIEW_REPORT, false)) {
            JSONArray tempArr = temp.optJSONArray("data");
            if (tempArr != null && tempArr.length() > 0) {
                dataJArr = StringUtil.concatJSONArray(dataJArr, tempArr);
            }
        } else {
            jSONObject.put("taxableamt", authHandler.formattedAmount((jSONObject.optDouble("taxableamt", 0.0) + temp.optDouble("taxableamt", 0.0)), companyId));
            jSONObject.put("igst", authHandler.formattedAmount((jSONObject.optDouble("igst", 0.0) + temp.optDouble("igst", 0.0)), companyId));
            jSONObject.put("cgst", authHandler.formattedAmount((jSONObject.optDouble("cgst", 0.0) + temp.optDouble("cgst", 0.0)), companyId));
            jSONObject.put("sgst", authHandler.formattedAmount((jSONObject.optDouble("sgst", 0.0) + temp.optDouble("sgst", 0.0)), companyId));
            jSONObject.put("csgst", authHandler.formattedAmount((jSONObject.optDouble("csgst", 0.0) + temp.optDouble("csgst", 0.0)), companyId));
            jSONObject.put("totaltax", authHandler.formattedAmount((jSONObject.optDouble("totaltax", 0.0) + temp.optDouble("totaltax", 0.0)), companyId));
            jSONObject.put("totalamount", authHandler.formattedAmount((jSONObject.optDouble("totalamount", 0.0) + temp.optDouble("totalamount", 0.0)), companyId));
            
            jSONObject.put("tableno", "");
            jSONObject.put("particulars", GSTRConstants.GSTR3B_SECTION_4_A_3);
            jSONObject.put("fmt", "B");
            jSONObject.put("enableViewDetail", true);
            dataJArr.put(jSONObject);
        }
        return jSONObject;
    }
    private JSONObject getGSTR3B_Section_4_A_4_Data(JSONObject params, String companyId, JSONArray dataJArr) throws JSONException, ServiceException {
        JSONObject jSONObject = new JSONObject();
        jSONObject.put("tableno", "");
        jSONObject.put("particulars", GSTRConstants.GSTR3B_SECTION_4_A_4);
        jSONObject.put("fmt", "B");
        jSONObject.put("enableViewDetail", true);
        dataJArr.put(jSONObject);
        return jSONObject;
    }
    private JSONObject getGSTR3B_Section_4_A_5_Data(JSONObject params, String companyId, JSONArray dataJArr) throws JSONException, ServiceException {
        JSONObject jSONObject = new JSONObject();
        double total_csgst, total_cgst, total_sgst, total_igst, total_taxableamount, total_tax, total_amount;
        total_csgst = total_cgst = total_sgst = total_igst = total_taxableamount = total_tax = total_amount = 0.0;
        /**
         * Purchase Invoice- REGTYPE:Regular.CUSTTYPE:NA. Interstate/Intrastate:
         * Both. RCM : FALSE.
         */
        JSONObject reqParams = new JSONObject(params, JSONObject.getNames(params));
        reqParams.put("isGSTINnull", false);
        reqParams.put("isRCMApplicable", false);
        reqParams.put("GST3B", !params.optBoolean(GSTR3BConstants.DETAILED_VIEW_REPORT, false));
        reqParams.put("registrationType", Constants.GSTRegType_Regular);
        reqParams.put("CustomerType", Constants.CUSTVENTYPE_NA + "," + Constants.CUSTVENTYPE_SEZ + "," + Constants.CUSTVENTYPE_SEZWOPAY);
        reqParams.put("typeofjoinisleft", true);
        reqParams.put("taxClassType", FieldComboData.TaxClass_Percenatge);
        reqParams.put("itctype", Constants.GST_ITCTYPE_DEFAULT+","+Constants.GST_ITCTYPE_REVERSED);
        JSONObject temp = new JSONObject();
        if ((reqParams.has("reportid") && reqParams.optInt("reportid", 0) == Constants.GSTR3B_Summary_Report) || (!StringUtil.isNullOrEmpty(params.optString("transactionType", null)) && (params.optInt("transactionType", 0) == GSTRConstants.GSTR3B_TRANSACTION_TYPE_INVOICE || params.optInt("transactionType", 0) == GSTRConstants.GSTR3B_TRANSACTION_TYPE_ALL))) {
            /**
             * For GSTR3B-Detail View.
             */
            temp = getGoodsReceiptForGSTR3BTaxable(reqParams);
        }
        if (!(reqParams.has("reportid") && reqParams.optInt("reportid", 0) == Constants.GSTR3B_Summary_Report) && params.optBoolean(GSTR3BConstants.DETAILED_VIEW_REPORT, false)) {
            JSONArray tempArr = temp.optJSONArray("data");
            if (tempArr != null && tempArr.length() > 0) {
                dataJArr = StringUtil.concatJSONArray(dataJArr, tempArr);
            }
        } else {
            total_csgst += temp.optDouble("csgst", 0.0);
            total_cgst += temp.optDouble("cgst", 0.0);
            total_sgst += temp.optDouble("sgst", 0.0);
            total_igst += temp.optDouble("igst", 0.0);
            total_taxableamount += temp.optDouble("taxableamt", 0.0);
            total_tax += temp.optDouble("totaltax", 0.0);
            total_amount += temp.optDouble("totalamount", 0.0);
        }
       
//        /**
//         * Purchase Invoice- REGTYPE:Unregistered.CUSTTYPE:NA.
//         * Interstate/Intrastate: Both. RCM : FALSE.
//         */
//        reqParams = new JSONObject(params, JSONObject.getNames(params));
//        reqParams.put("GST3B", !params.optBoolean(GSTR3BConstants.DETAILED_VIEW_REPORT, false));
//        reqParams.put("isGSTINnull", true);
//        reqParams.put("isRCMApplicable", false);
//        reqParams.put("registrationType", Constants.GSTRegType_Unregistered);
//        reqParams.put("CustomerType", Constants.CUSTVENTYPE_NA);
//        reqParams.put("typeofjoinisleft", true);
//        reqParams.put("taxClassType", FieldComboData.TaxClass_Percenatge);
//        temp = new JSONObject();
//        if ((reqParams.has("reportid") && reqParams.optInt("reportid", 0) == Constants.GSTR3B_Summary_Report) || (!StringUtil.isNullOrEmpty(params.optString("transactionType", null)) && (params.optInt("transactionType", 0) == GSTRConstants.GSTR3B_TRANSACTION_TYPE_INVOICE || params.optInt("transactionType", 0) == GSTRConstants.GSTR3B_TRANSACTION_TYPE_ALL))) {
//        /**
//             * For GSTR3B-Detail View.
//             */
//            temp = getGoodsReceiptForGSTR3BTaxable(reqParams);
//        }
//        if (!(reqParams.has("reportid") && reqParams.optInt("reportid", 0) == Constants.GSTR3B_Summary_Report) && params.optBoolean(GSTR3BConstants.DETAILED_VIEW_REPORT, false)) {
//            JSONArray tempArr = temp.optJSONArray("data");
//            if (tempArr != null && tempArr.length() > 0) {
//                dataJArr = StringUtil.concatJSONArray(dataJArr, tempArr);
//            }
//        } else {
//            total_csgst += temp.optDouble("csgst", 0.0);
//            total_cgst += temp.optDouble("cgst", 0.0);
//            total_sgst += temp.optDouble("sgst", 0.0);
//            total_igst += temp.optDouble("igst", 0.0);
//            total_taxableamount += temp.optDouble("taxableamt", 0.0);
//            total_tax += temp.optDouble("totaltax", 0.0);
//            total_amount += temp.optDouble("totalamount", 0.0);
//        }
        /**
         * Vendor DN
         */
        reqParams = new JSONObject(params, JSONObject.getNames(params));
        reqParams.put("GST3B", !params.optBoolean(GSTR3BConstants.DETAILED_VIEW_REPORT, false));
        reqParams.put("CustomerType", Constants.CUSTVENTYPE_NA + "," + Constants.CUSTVENTYPE_SEZWOPAY + "," + Constants.CUSTVENTYPE_SEZ);
        reqParams.put("registrationType",Constants.GSTRegType_Regular);
        reqParams.put("typeofjoinisleft", true);
        reqParams.put("taxClassType", FieldComboData.TaxClass_Percenatge);
        reqParams.remove("cnentityValue");
        temp = new JSONObject();
        if ((reqParams.has("reportid") && reqParams.optInt("reportid", 0) == Constants.GSTR3B_Summary_Report) || (!StringUtil.isNullOrEmpty(params.optString("transactionType", null)) && (params.optInt("transactionType", 0) == GSTRConstants.GSTR3B_TRANSACTION_TYPE_NOTE || params.optInt("transactionType", 0) == GSTRConstants.GSTR3B_TRANSACTION_TYPE_ALL))) {
            /**
             * For GSTR3B-Detail View.
             */
            temp = getDNForGSTR3BTaxable(reqParams);
        }
        if (!(reqParams.has("reportid") && reqParams.optInt("reportid", 0) == Constants.GSTR3B_Summary_Report) && params.optBoolean(GSTR3BConstants.DETAILED_VIEW_REPORT, false)) {
            JSONArray tempArr = temp.optJSONArray("data");
            if (tempArr != null && tempArr.length() > 0) {
                dataJArr = StringUtil.concatJSONArray(dataJArr, tempArr);
            }
        } else {
            total_csgst += temp.optDouble("csgst", 0.0);
            total_cgst += temp.optDouble("cgst", 0.0);
            total_sgst += temp.optDouble("sgst", 0.0);
            total_igst += temp.optDouble("igst", 0.0);
            total_taxableamount += temp.optDouble("taxableamt", 0.0);
            total_tax += temp.optDouble("totaltax", 0.0);
            total_amount += temp.optDouble("totalamount", 0.0);
        }
        /**
         * Vendor CN
         */
        reqParams = new JSONObject(params, JSONObject.getNames(params));
        reqParams.put("GST3B", !params.optBoolean(GSTR3BConstants.DETAILED_VIEW_REPORT, false));
        reqParams.put("CustomerType", Constants.CUSTVENTYPE_NA + "," + Constants.CUSTVENTYPE_SEZWOPAY + "," + Constants.CUSTVENTYPE_SEZ);
        reqParams.put("registrationType",Constants.GSTRegType_Regular);
        reqParams.put("typeofjoinisleft", true);
        reqParams.put("taxClassType", FieldComboData.TaxClass_Percenatge);
        reqParams.put("onlycnagainstvendor", true);
        temp = new JSONObject();
        if ((reqParams.has("reportid") && reqParams.optInt("reportid", 0) == Constants.GSTR3B_Summary_Report) || (!StringUtil.isNullOrEmpty(params.optString("transactionType", null)) && (params.optInt("transactionType", 0) == GSTRConstants.GSTR3B_TRANSACTION_TYPE_NOTE || params.optInt("transactionType", 0) == GSTRConstants.GSTR3B_TRANSACTION_TYPE_ALL))) {
            /**
             * For GSTR3B-Detail View.
             */
            temp = getDNForGSTR3BTaxable(reqParams);
        }
        if (!(reqParams.has("reportid") && reqParams.optInt("reportid", 0) == Constants.GSTR3B_Summary_Report) && params.optBoolean(GSTR3BConstants.DETAILED_VIEW_REPORT, false)) {
            JSONArray tempArr = temp.optJSONArray("data");
            if (tempArr != null && tempArr.length() > 0) {
                dataJArr = StringUtil.concatJSONArray(dataJArr, tempArr);
            }
        } else {
            total_csgst += temp.optDouble("csgst", 0.0);
            total_cgst += temp.optDouble("cgst", 0.0);
            total_sgst += temp.optDouble("sgst", 0.0);
            total_igst += temp.optDouble("igst", 0.0);
            total_taxableamount += temp.optDouble("taxableamt", 0.0);
            total_tax += temp.optDouble("totaltax", 0.0);
            total_amount += temp.optDouble("totalamount", 0.0);
        }
        // 5.2
//        reqParams = new JSONObject(params, JSONObject.getNames(params));
//        reqParams.put("GST3B", true);
////            reqParams.put("isRCMApplicable", false);
//        reqParams.put("CustomerType", Constants.CUSTVENTYPE_SEZ + "," + Constants.CUSTVENTYPE_SEZWOPAY);
//        reqParams.put("registrationType", Constants.GSTRegType_Regular + "," + Constants.GSTRegType_Regular_ECommerce + "," + Constants.GSTRegType_Unregistered);
//        reqParams.put("typeofjoinisleft", true);
//        reqParams.put("taxClassType", FieldComboData.TaxClass_Percenatge);
//        temp = getGoodsReceiptForGSTR3BTaxable(reqParams);
//        total_csgst += temp.optDouble("csgst", 0.0);
//        total_cgst += temp.optDouble("cgst", 0.0);
//        total_sgst += temp.optDouble("sgst", 0.0);
//        total_igst += temp.optDouble("igst", 0.0);
//        total_taxableamount += temp.optDouble("taxableamt", 0.0);
//        total_tax += temp.optDouble("totaltax", 0.0);
//        total_amount += temp.optDouble("totalamount", 0.0);
        if ((reqParams.has("reportid") && reqParams.optInt("reportid", 0) == Constants.GSTR3B_Summary_Report) || !params.optBoolean(GSTR3BConstants.DETAILED_VIEW_REPORT, false)) {
            jSONObject.put("tableno", "");
            jSONObject.put("particulars", GSTRConstants.GSTR3B_SECTION_4_A_5);
            jSONObject.put("fmt", "B");
            jSONObject.put("enableViewDetail", true);
            jSONObject.put("taxableamt", authHandler.formattedAmount(total_taxableamount, companyId));
            jSONObject.put("igst", authHandler.formattedAmount(total_igst, companyId));
            jSONObject.put("cgst", authHandler.formattedAmount(total_cgst, companyId));
            jSONObject.put("sgst", authHandler.formattedAmount(total_sgst, companyId));
            jSONObject.put("csgst", authHandler.formattedAmount(total_csgst, companyId));
            jSONObject.put("totaltax", authHandler.formattedAmount(total_tax, companyId));
            jSONObject.put("totalamount", authHandler.formattedAmount(total_amount, companyId));
            dataJArr.put(jSONObject);
        }
        return jSONObject;
    }
    private JSONObject gstGSTR3B_Section_4_B_Data(JSONObject params, String companyId, JSONArray dataJArr, JSONArray exportJSONArr) throws JSONException, ServiceException {
        double total_csgst, total_cgst, total_sgst, total_igst, total_taxableamount, total_tax, total_amount;
        total_csgst = total_cgst = total_sgst = total_igst = total_taxableamount = total_tax = total_amount = 0.0;
        JSONObject totalJSON = new JSONObject();

        JSONObject jSONObject = new JSONObject();
        jSONObject.put("tableno", "");
        jSONObject.put("particulars", "(B) ITC Reversed");
        jSONObject.put("fmt", "B");
        jSONObject.put("isLabel", true);
        jSONObject.put("showBold", true);
        dataJArr.put(jSONObject);

        jSONObject = gstGSTR3B_Section_4_B_1_Data(params, companyId, dataJArr);
        jSONObject.put("tableno", "");
        jSONObject.put("particulars", GSTRConstants.GSTR3B_SECTION_4_B_1);
        jSONObject.put("fmt", "B");
        jSONObject.put("enableViewDetail", true);
        dataJArr.put(jSONObject);
        total_csgst += jSONObject.optDouble("csgst", 0.0);
        total_cgst += jSONObject.optDouble("cgst", 0.0);
        total_sgst += jSONObject.optDouble("sgst", 0.0);
        total_igst += jSONObject.optDouble("igst", 0.0);
        total_taxableamount += jSONObject.optDouble("taxableamt", 0.0);
        total_tax += jSONObject.optDouble("totaltax", 0.0);
        total_amount += jSONObject.optDouble("totalamount", 0.0);

        jSONObject = new JSONObject();
        jSONObject.put("tableno", "");
        jSONObject.put("particulars", GSTRConstants.GSTR3B_SECTION_4_B_2);
        jSONObject.put("fmt", "B");
        dataJArr.put(jSONObject);

        totalJSON.put("taxableamt", authHandler.formattedAmount(total_taxableamount, companyId));
        totalJSON.put("igst", authHandler.formattedAmount(total_igst, companyId));
        totalJSON.put("cgst", authHandler.formattedAmount(total_cgst, companyId));
        totalJSON.put("sgst", authHandler.formattedAmount(total_sgst, companyId));
        totalJSON.put("csgst", authHandler.formattedAmount(total_csgst, companyId));
        totalJSON.put("totaltax", authHandler.formattedAmount(total_tax, companyId));
        totalJSON.put("totalamount", authHandler.formattedAmount(total_amount, companyId));

        return totalJSON;
    }
    private JSONObject gstGSTR3B_Section_4_B_1_Data(JSONObject params, String companyId, JSONArray dataJArr) throws JSONException, ServiceException {
        JSONObject jSONObject = gSTR2Service.getITCJournalEntryDetails(params, dataJArr);

        return jSONObject;
    }
    private JSONObject getGSTR3B_Section_4_D_Data(JSONObject params, String companyId, JSONArray dataJArr, JSONArray exportJSONArr) throws JSONException, ServiceException {
        double total_csgst, total_cgst, total_sgst, total_igst, total_taxableamount, total_tax, total_amount;
        total_csgst = total_cgst = total_sgst = total_igst = total_taxableamount = total_tax = total_amount = 0.0;
        JSONObject jSONObject = new JSONObject();
        JSONObject totalJSON = new JSONObject();
        jSONObject.put("tableno", "");
        jSONObject.put("particulars", "(D) Ineligible ITC");
        jSONObject.put("fmt", "B");
        jSONObject.put("isLabel", true);
        jSONObject.put("showBold", true);
        dataJArr.put(jSONObject);

        JSONObject json_4_d_1 = getGSTR3B_Section_4_D_1_Data(params, companyId, dataJArr);
        total_csgst += json_4_d_1.optDouble("csgst", 0.0);
        total_cgst += json_4_d_1.optDouble("cgst", 0.0);
        total_sgst += json_4_d_1.optDouble("sgst", 0.0);
        total_igst += json_4_d_1.optDouble("igst", 0.0);
        total_taxableamount += json_4_d_1.optDouble("taxableamt", 0.0);
        total_tax += json_4_d_1.optDouble("totaltax", 0.0);
        total_amount += json_4_d_1.optDouble("totalamount", 0.0);

        jSONObject = new JSONObject();
        jSONObject.put("tableno", "");
        jSONObject.put("particulars", GSTRConstants.GSTR3B_SECTION_4_D_2);
        jSONObject.put("fmt", "B");

        dataJArr.put(jSONObject);

        totalJSON.put("taxableamt", authHandler.formattedAmount(total_taxableamount, companyId));
        totalJSON.put("igst", authHandler.formattedAmount(total_igst, companyId));
        totalJSON.put("cgst", authHandler.formattedAmount(total_cgst, companyId));
        totalJSON.put("sgst", authHandler.formattedAmount(total_sgst, companyId));
        totalJSON.put("csgst", authHandler.formattedAmount(total_csgst, companyId));
        totalJSON.put("totaltax", authHandler.formattedAmount(total_tax, companyId));
        totalJSON.put("totalamount", authHandler.formattedAmount(total_amount, companyId));
        return totalJSON;
    }
    private JSONObject getGSTR3B_Section_4_D_1_Data(JSONObject params, String companyId, JSONArray dataJArr) throws JSONException, ServiceException {
        JSONObject jSONObject = new JSONObject();
        JSONObject reqParams = new JSONObject(params, JSONObject.getNames(params));
        reqParams.put("isGSTINnull", false);
        reqParams.put("isRCMApplicable", false);
        reqParams.put("GST3B", !params.optBoolean(GSTR3BConstants.DETAILED_VIEW_REPORT, false));
        reqParams.put("registrationType", Constants.GSTRegType_Regular);
        reqParams.put("CustomerType", Constants.CUSTVENTYPE_NA + "," + Constants.CUSTVENTYPE_SEZ);
        reqParams.put("typeofjoinisleft", true);
        reqParams.put("taxClassType", FieldComboData.TaxClass_Percenatge);
        reqParams.put("itctype", Constants.GST_ITCTYPE_BLOCKED);
        JSONObject temp = new JSONObject();
        if ((reqParams.has("reportid") && reqParams.optInt("reportid", 0) == Constants.GSTR3B_Summary_Report) || (!StringUtil.isNullOrEmpty(params.optString("transactionType", null)) && (params.optInt("transactionType", 0) == GSTRConstants.GSTR3B_TRANSACTION_TYPE_INVOICE || params.optInt("transactionType", 0) == GSTRConstants.GSTR3B_TRANSACTION_TYPE_ALL))) {
            /**
             * For GSTR3B-Detail View.
             */
            temp = getGoodsReceiptForGSTR3BTaxable(reqParams);
        }
        if (!(reqParams.has("reportid") && reqParams.optInt("reportid", 0) == Constants.GSTR3B_Summary_Report) && params.optBoolean(GSTR3BConstants.DETAILED_VIEW_REPORT, false)) {
            JSONArray tempArr = temp.optJSONArray("data");
            if (tempArr != null && tempArr.length() > 0) {
                dataJArr = StringUtil.concatJSONArray(dataJArr, tempArr);
            }
        } else {
            double total_csgst = temp.optDouble("csgst", 0.0);
            double total_cgst = temp.optDouble("cgst", 0.0);
            double total_sgst = temp.optDouble("sgst", 0.0);
            double total_igst = temp.optDouble("igst", 0.0);
            double total_taxableamount = temp.optDouble("taxableamt", 0.0);
            double total_tax = temp.optDouble("totaltax", 0.0);
            double total_amount = temp.optDouble("totalamount", 0.0);
            jSONObject.put("tableno", "");
            jSONObject.put("particulars", GSTRConstants.GSTR3B_SECTION_4_D_1);
            jSONObject.put("fmt", "B");
            jSONObject.put("enableViewDetail", true);
            jSONObject.put("taxableamt", authHandler.formattedAmount(total_taxableamount, companyId));
            jSONObject.put("igst", authHandler.formattedAmount(total_igst, companyId));
            jSONObject.put("cgst", authHandler.formattedAmount(total_cgst, companyId));
            jSONObject.put("sgst", authHandler.formattedAmount(total_sgst, companyId));
            jSONObject.put("csgst", authHandler.formattedAmount(total_csgst, companyId));
            jSONObject.put("totaltax", authHandler.formattedAmount(total_igst + total_cgst + total_sgst + total_csgst, companyId));
            jSONObject.put("totalamount", authHandler.formattedAmount(total_taxableamount + total_igst + total_cgst + total_sgst + total_csgst, companyId));
            dataJArr.put(jSONObject);
        }
        return jSONObject;
    }
    private JSONObject getGSTR3B_Section_5_Data(JSONObject params, String companyId, JSONArray dataJArr, JSONArray exportJSONArr) throws JSONException, ServiceException {
        double total_csgst, total_cgst, total_sgst, total_igst, total_taxableamount, total_tax, total_amount;
        total_csgst = total_cgst = total_sgst = total_igst = total_taxableamount = total_tax = total_amount = 0.0;
        JSONObject jSONObject = new JSONObject();
        JSONObject totalJSON = new JSONObject();
        jSONObject.put("tableno", "5");
        jSONObject.put("particulars", "Values of exempt, nil-rated and non-GST inward supplies");
        jSONObject.put("fmt", "B");
        jSONObject.put("showBold", true);
        jSONObject.put("isLabel", true);
        dataJArr.put(jSONObject);
        
        jSONObject = getGSTR3B_Section_5_1_Data(params, companyId, dataJArr);
        total_csgst = jSONObject.optDouble("csgst", 0.0);
        total_cgst = jSONObject.optDouble("cgst", 0.0);
        total_sgst = jSONObject.optDouble("sgst", 0.0);
        total_igst = jSONObject.optDouble("igst", 0.0);
        total_taxableamount = jSONObject.optDouble("taxableamt", 0.0);
        total_tax = jSONObject.optDouble("totaltax", 0.0);
        total_amount = jSONObject.optDouble("totalamount", 0.0);

        jSONObject = getGSTR3B_Section_5_2_Data(params, companyId, dataJArr);
        total_csgst += jSONObject.optDouble("csgst", 0.0);
        total_cgst += jSONObject.optDouble("cgst", 0.0);
        total_sgst += jSONObject.optDouble("sgst", 0.0);
        total_igst += jSONObject.optDouble("igst", 0.0);
        total_taxableamount += jSONObject.optDouble("taxableamt", 0.0);
        total_tax += jSONObject.optDouble("totaltax", 0.0);
        total_amount += jSONObject.optDouble("totalamount", 0.0);
 
        jSONObject = getGSTR3B_Section_5_3_Data(params, companyId, dataJArr);
      
        total_csgst += jSONObject.optDouble("csgst", 0.0);
        total_cgst += jSONObject.optDouble("cgst", 0.0);
        total_sgst += jSONObject.optDouble("sgst", 0.0);
        total_igst += jSONObject.optDouble("igst", 0.0);
        total_taxableamount += jSONObject.optDouble("taxableamt", 0.0);
        total_tax += jSONObject.optDouble("totaltax", 0.0);
        total_amount += jSONObject.optDouble("totalamount", 0.0);
      
        jSONObject = getGSTR3B_Section_5_4_Data(params, companyId, dataJArr);
        total_csgst += jSONObject.optDouble("csgst", 0.0);
        total_cgst += jSONObject.optDouble("cgst", 0.0);
        total_sgst += jSONObject.optDouble("sgst", 0.0);
        total_igst += jSONObject.optDouble("igst", 0.0);
        total_taxableamount += jSONObject.optDouble("taxableamt", 0.0);
        total_tax += jSONObject.optDouble("totaltax", 0.0);
        total_amount += jSONObject.optDouble("totalamount", 0.0);

        totalJSON.put("taxableamt", authHandler.formattedAmount(total_taxableamount, companyId));
        totalJSON.put("igst", authHandler.formattedAmount(total_igst, companyId));
        totalJSON.put("cgst", authHandler.formattedAmount(total_cgst, companyId));
        totalJSON.put("sgst", authHandler.formattedAmount(total_sgst, companyId));
        totalJSON.put("csgst", authHandler.formattedAmount(total_csgst, companyId));
        totalJSON.put("totaltax", authHandler.formattedAmount(total_tax, companyId));
        totalJSON.put("totalamount", authHandler.formattedAmount(total_amount, companyId));
        totalJSON.put("tableno", "");
        totalJSON.put("showBold", true);
        totalJSON.put("particulars", "5 Total [(1)+(2)+(3)+(4)]");
        totalJSON.put("fmt", "B");
        dataJArr.put(totalJSON);
        return totalJSON;
    }
    private JSONObject getGSTR3B_Section_5_1_Data(JSONObject params, String companyId, JSONArray dataJArr) throws JSONException, ServiceException {
        /**
         * Purchase Invoice-
         * REGTYPE:Regular,Unregistered.CUSTTYPE:NA,SEZ,SEZWOPAY,Import.
         * Interstate/Intrastate: Both. Product Tax: Exempted.
         */
        JSONObject reqParams = new JSONObject(params, JSONObject.getNames(params));
        reqParams.put("taxClassType", FieldComboData.TaxClass_Exempted);
        reqParams.put("registrationType", Constants.GSTRegType_Regular + "," + Constants.GSTRegType_Unregistered);
        reqParams.put("CustomerType", Constants.CUSTVENTYPE_NA + "," + Constants.CUSTVENTYPE_SEZ + "," + Constants.CUSTVENTYPE_SEZWOPAY + "," + Constants.CUSTVENTYPE_Import);
        reqParams.put("itctype", Constants.GST_ITCTYPE_DEFAULT+","+Constants.GST_ITCTYPE_REVERSED);
        JSONObject jSONObject = new JSONObject();
        if ((reqParams.has("reportid") && reqParams.optInt("reportid", 0) == Constants.GSTR3B_Summary_Report) || (!StringUtil.isNullOrEmpty(params.optString("transactionType", null)) && (params.optInt("transactionType", 0) == GSTRConstants.GSTR3B_TRANSACTION_TYPE_INVOICE || params.optInt("transactionType", 0) == GSTRConstants.GSTR3B_TRANSACTION_TYPE_ALL))) {
            /**
             * For GSTR3B-Detail View.
             */
            jSONObject = getGoodsReceiptForGSTR3BNonGST(reqParams);
        }
        if (!(reqParams.has("reportid") && reqParams.optInt("reportid", 0) == Constants.GSTR3B_Summary_Report) && params.optBoolean(GSTR3BConstants.DETAILED_VIEW_REPORT, false)) {
            JSONArray tempArr = jSONObject.optJSONArray("data");
            if (tempArr != null && tempArr.length() > 0) {
                dataJArr = StringUtil.concatJSONArray(dataJArr, tempArr);
            }
        }
        /**
         * Vendor DN
         */
        reqParams = new JSONObject(params, JSONObject.getNames(params));
        reqParams.put("GST3B", !params.optBoolean(GSTR3BConstants.DETAILED_VIEW_REPORT, false));
        reqParams.put("isRCMApplicable", false);
        reqParams.put("typeofjoinisleft", true);
        reqParams.put("taxClassType", FieldComboData.TaxClass_Exempted);
        reqParams.put("registrationType", Constants.GSTRegType_Regular + "," + Constants.GSTRegType_Unregistered);
        reqParams.put("CustomerType", Constants.CUSTVENTYPE_NA + "," + Constants.CUSTVENTYPE_SEZ + "," + Constants.CUSTVENTYPE_SEZWOPAY + "," + Constants.CUSTVENTYPE_Import);
        reqParams.remove("cnentityValue");
        JSONObject temp = new JSONObject();
        if ((reqParams.has("reportid") && reqParams.optInt("reportid", 0) == Constants.GSTR3B_Summary_Report) || (!StringUtil.isNullOrEmpty(params.optString("transactionType", null)) && (params.optInt("transactionType", 0) == GSTRConstants.GSTR3B_TRANSACTION_TYPE_NOTE || params.optInt("transactionType", 0) == GSTRConstants.GSTR3B_TRANSACTION_TYPE_ALL))) {
            /**
             * For GSTR3B-Detail View.
             */
            temp = getDNForGSTR3BTaxable(reqParams);
        }
        if (!(reqParams.has("reportid") && reqParams.optInt("reportid", 0) == Constants.GSTR3B_Summary_Report) && params.optBoolean(GSTR3BConstants.DETAILED_VIEW_REPORT, false)) {
            JSONArray tempArr = temp.optJSONArray("data");
            if (tempArr != null && tempArr.length() > 0) {
                dataJArr = StringUtil.concatJSONArray(dataJArr, tempArr);
            }
        } else {
            jSONObject.put("taxableamt", authHandler.formattedAmount((jSONObject.optDouble("taxableamt", 0.0) + temp.optDouble("taxableamt", 0.0)), companyId));
            jSONObject.put("igst", authHandler.formattedAmount((jSONObject.optDouble("igst", 0.0) + temp.optDouble("igst", 0.0)), companyId));
            jSONObject.put("cgst", authHandler.formattedAmount((jSONObject.optDouble("cgst", 0.0) + temp.optDouble("cgst", 0.0)), companyId));
            jSONObject.put("sgst", authHandler.formattedAmount((jSONObject.optDouble("sgst", 0.0) + temp.optDouble("sgst", 0.0)), companyId));
            jSONObject.put("csgst", authHandler.formattedAmount((jSONObject.optDouble("csgst", 0.0) + temp.optDouble("csgst", 0.0)), companyId));
            jSONObject.put("totaltax", authHandler.formattedAmount((jSONObject.optDouble("totaltax", 0.0) + temp.optDouble("totaltax", 0.0)), companyId));
            jSONObject.put("totalamount", authHandler.formattedAmount((jSONObject.optDouble("totalamount", 0.0) + temp.optDouble("totalamount", 0.0)), companyId));
        }
        /**
         * Vendor CN
         */
        reqParams = new JSONObject(params, JSONObject.getNames(params));
        reqParams.put("GST3B", !params.optBoolean(GSTR3BConstants.DETAILED_VIEW_REPORT, false));
        reqParams.put("isRCMApplicable", false);
        reqParams.put("typeofjoinisleft", true);
        reqParams.put("taxClassType", FieldComboData.TaxClass_Exempted);
        reqParams.put("registrationType", Constants.GSTRegType_Regular + "," + Constants.GSTRegType_Unregistered);
        reqParams.put("CustomerType", Constants.CUSTVENTYPE_NA + "," + Constants.CUSTVENTYPE_SEZ + "," + Constants.CUSTVENTYPE_SEZWOPAY + "," + Constants.CUSTVENTYPE_Import);
        reqParams.put("onlycnagainstvendor", true);
        temp = new JSONObject();
        if ((reqParams.has("reportid") && reqParams.optInt("reportid", 0) == Constants.GSTR3B_Summary_Report) || (!StringUtil.isNullOrEmpty(params.optString("transactionType", null)) && (params.optInt("transactionType", 0) == GSTRConstants.GSTR3B_TRANSACTION_TYPE_NOTE || params.optInt("transactionType", 0) == GSTRConstants.GSTR3B_TRANSACTION_TYPE_ALL))) {
            /**
             * For GSTR3B-Detail View.
             */
            temp = getDNForGSTR3BTaxable(reqParams);
        }
        if (!(reqParams.has("reportid") && reqParams.optInt("reportid", 0) == Constants.GSTR3B_Summary_Report) && params.optBoolean(GSTR3BConstants.DETAILED_VIEW_REPORT, false)) {
            JSONArray tempArr = temp.optJSONArray("data");
            if (tempArr != null && tempArr.length() > 0) {
                dataJArr = StringUtil.concatJSONArray(dataJArr, tempArr);
            }
        } else {
            jSONObject.put("taxableamt", authHandler.formattedAmount((jSONObject.optDouble("taxableamt", 0.0) + temp.optDouble("taxableamt", 0.0)), companyId));
            jSONObject.put("igst", authHandler.formattedAmount((jSONObject.optDouble("igst", 0.0) + temp.optDouble("igst", 0.0)), companyId));
            jSONObject.put("cgst", authHandler.formattedAmount((jSONObject.optDouble("cgst", 0.0) + temp.optDouble("cgst", 0.0)), companyId));
            jSONObject.put("sgst", authHandler.formattedAmount((jSONObject.optDouble("sgst", 0.0) + temp.optDouble("sgst", 0.0)), companyId));
            jSONObject.put("csgst", authHandler.formattedAmount((jSONObject.optDouble("csgst", 0.0) + temp.optDouble("csgst", 0.0)), companyId));
            jSONObject.put("totaltax", authHandler.formattedAmount((jSONObject.optDouble("totaltax", 0.0) + temp.optDouble("totaltax", 0.0)), companyId));
            jSONObject.put("totalamount", authHandler.formattedAmount((jSONObject.optDouble("totalamount", 0.0) + temp.optDouble("totalamount", 0.0)), companyId));
            jSONObject.put("tableno", "");
            jSONObject.put("particulars", GSTRConstants.GSTR3B_SECTION_5_1);
            jSONObject.put("fmt", "B");
            jSONObject.put("enableViewDetail", true);            
        }
       /**
         * Purchase Invoice- REGTYPE:Unregistered.CUSTTYPE:NA. ERP-40740
         * Interstate/Intrastate: Both. RCM : FALSE.
         */
        reqParams = new JSONObject(params, JSONObject.getNames(params));
        reqParams.put("GST3B", !params.optBoolean(GSTR3BConstants.DETAILED_VIEW_REPORT, false));
        reqParams.put("isGSTINnull", true);
        reqParams.put("isRCMApplicable", false);
        reqParams.put("registrationType", Constants.GSTRegType_Unregistered);
        reqParams.put("CustomerType", Constants.CUSTVENTYPE_NA);
        reqParams.put("typeofjoinisleft", true);
        reqParams.put("taxClassType", FieldComboData.TaxClass_Percenatge);
        temp = new JSONObject();
        if ((reqParams.has("reportid") && reqParams.optInt("reportid", 0) == Constants.GSTR3B_Summary_Report) || (!StringUtil.isNullOrEmpty(params.optString("transactionType", null)) && (params.optInt("transactionType", 0) == GSTRConstants.GSTR3B_TRANSACTION_TYPE_INVOICE || params.optInt("transactionType", 0) == GSTRConstants.GSTR3B_TRANSACTION_TYPE_ALL))) {
        /**
             * For GSTR3B-Detail View.
             */
            temp = getGoodsReceiptForGSTR3BTaxable(reqParams);
        }
        if (!(reqParams.has("reportid") && reqParams.optInt("reportid", 0) == Constants.GSTR3B_Summary_Report) && params.optBoolean(GSTR3BConstants.DETAILED_VIEW_REPORT, false)) {
            JSONArray tempArr = temp.optJSONArray("data");
            if (tempArr != null && tempArr.length() > 0) {
                dataJArr = StringUtil.concatJSONArray(dataJArr, tempArr);
            }
        } else {
            jSONObject.put("taxableamt", authHandler.formattedAmount((jSONObject.optDouble("taxableamt", 0.0) + temp.optDouble("taxableamt", 0.0)), companyId));
            jSONObject.put("igst", authHandler.formattedAmount((jSONObject.optDouble("igst", 0.0) + temp.optDouble("igst", 0.0)), companyId));
            jSONObject.put("cgst", authHandler.formattedAmount((jSONObject.optDouble("cgst", 0.0) + temp.optDouble("cgst", 0.0)), companyId));
            jSONObject.put("sgst", authHandler.formattedAmount((jSONObject.optDouble("sgst", 0.0) + temp.optDouble("sgst", 0.0)), companyId));
            jSONObject.put("csgst", authHandler.formattedAmount((jSONObject.optDouble("csgst", 0.0) + temp.optDouble("csgst", 0.0)), companyId));
            jSONObject.put("totaltax", authHandler.formattedAmount((jSONObject.optDouble("totaltax", 0.0) + temp.optDouble("totaltax", 0.0)), companyId));
            jSONObject.put("totalamount", authHandler.formattedAmount((jSONObject.optDouble("totalamount", 0.0) + temp.optDouble("totalamount", 0.0)), companyId));
            jSONObject.put("tableno", "");
            jSONObject.put("particulars", GSTRConstants.GSTR3B_SECTION_5_1);
            jSONObject.put("fmt", "B");
            jSONObject.put("enableViewDetail", true);
        }
        /**
         * Vendor DN  (ERP-40740)
         */
        reqParams = new JSONObject(params, JSONObject.getNames(params));
        reqParams.put("GST3B", !params.optBoolean(GSTR3BConstants.DETAILED_VIEW_REPORT, false));
        reqParams.put("CustomerType", Constants.CUSTVENTYPE_NA);
        reqParams.put("registrationType", Constants.GSTRegType_Unregistered);
        reqParams.put("typeofjoinisleft", true);
        reqParams.put("taxClassType", FieldComboData.TaxClass_Percenatge);
        reqParams.remove("cnentityValue");
        temp = new JSONObject();
        if ((reqParams.has("reportid") && reqParams.optInt("reportid", 0) == Constants.GSTR3B_Summary_Report) || (!StringUtil.isNullOrEmpty(params.optString("transactionType", null)) && (params.optInt("transactionType", 0) == GSTRConstants.GSTR3B_TRANSACTION_TYPE_NOTE || params.optInt("transactionType", 0) == GSTRConstants.GSTR3B_TRANSACTION_TYPE_ALL))) {
            /**
             * For GSTR3B-Detail View.
             */
            temp = getDNForGSTR3BTaxable(reqParams);
        }
        if (!(reqParams.has("reportid") && reqParams.optInt("reportid", 0) == Constants.GSTR3B_Summary_Report) && params.optBoolean(GSTR3BConstants.DETAILED_VIEW_REPORT, false)) {
            JSONArray tempArr = temp.optJSONArray("data");
            if (tempArr != null && tempArr.length() > 0) {
                dataJArr = StringUtil.concatJSONArray(dataJArr, tempArr);
            }
        } else {
            jSONObject.put("taxableamt", authHandler.formattedAmount((jSONObject.optDouble("taxableamt", 0.0) + temp.optDouble("taxableamt", 0.0)), companyId));
            jSONObject.put("igst", authHandler.formattedAmount((jSONObject.optDouble("igst", 0.0) + temp.optDouble("igst", 0.0)), companyId));
            jSONObject.put("cgst", authHandler.formattedAmount((jSONObject.optDouble("cgst", 0.0) + temp.optDouble("cgst", 0.0)), companyId));
            jSONObject.put("sgst", authHandler.formattedAmount((jSONObject.optDouble("sgst", 0.0) + temp.optDouble("sgst", 0.0)), companyId));
            jSONObject.put("csgst", authHandler.formattedAmount((jSONObject.optDouble("csgst", 0.0) + temp.optDouble("csgst", 0.0)), companyId));
            jSONObject.put("totaltax", authHandler.formattedAmount((jSONObject.optDouble("totaltax", 0.0) + temp.optDouble("totaltax", 0.0)), companyId));
            jSONObject.put("totalamount", authHandler.formattedAmount((jSONObject.optDouble("totalamount", 0.0) + temp.optDouble("totalamount", 0.0)), companyId));
            jSONObject.put("tableno", "");
            jSONObject.put("particulars", GSTRConstants.GSTR3B_SECTION_5_1);
            jSONObject.put("fmt", "B");
            jSONObject.put("enableViewDetail", true);
        }
        /**
         * Vendor CN (ERP-40740)
         */
        reqParams = new JSONObject(params, JSONObject.getNames(params));
        reqParams.put("GST3B", !params.optBoolean(GSTR3BConstants.DETAILED_VIEW_REPORT, false));
        reqParams.put("CustomerType", Constants.CUSTVENTYPE_NA);
        reqParams.put("registrationType", Constants.GSTRegType_Unregistered);
        reqParams.put("typeofjoinisleft", true);
        reqParams.put("taxClassType", FieldComboData.TaxClass_Percenatge);
        reqParams.put("onlycnagainstvendor", true);
        temp = new JSONObject();
        if ((reqParams.has("reportid") && reqParams.optInt("reportid", 0) == Constants.GSTR3B_Summary_Report) || (!StringUtil.isNullOrEmpty(params.optString("transactionType", null)) && (params.optInt("transactionType", 0) == GSTRConstants.GSTR3B_TRANSACTION_TYPE_NOTE || params.optInt("transactionType", 0) == GSTRConstants.GSTR3B_TRANSACTION_TYPE_ALL))) {
            /**
             * For GSTR3B-Detail View.
             */
            temp = getDNForGSTR3BTaxable(reqParams);
        }
        if (!(reqParams.has("reportid") && reqParams.optInt("reportid", 0) == Constants.GSTR3B_Summary_Report) && params.optBoolean(GSTR3BConstants.DETAILED_VIEW_REPORT, false)) {
            JSONArray tempArr = temp.optJSONArray("data");
            if (tempArr != null && tempArr.length() > 0) {
                dataJArr = StringUtil.concatJSONArray(dataJArr, tempArr);
            }
        } else {
            jSONObject.put("taxableamt", authHandler.formattedAmount((jSONObject.optDouble("taxableamt", 0.0) + temp.optDouble("taxableamt", 0.0)), companyId));
            jSONObject.put("igst", authHandler.formattedAmount((jSONObject.optDouble("igst", 0.0) + temp.optDouble("igst", 0.0)), companyId));
            jSONObject.put("cgst", authHandler.formattedAmount((jSONObject.optDouble("cgst", 0.0) + temp.optDouble("cgst", 0.0)), companyId));
            jSONObject.put("sgst", authHandler.formattedAmount((jSONObject.optDouble("sgst", 0.0) + temp.optDouble("sgst", 0.0)), companyId));
            jSONObject.put("csgst", authHandler.formattedAmount((jSONObject.optDouble("csgst", 0.0) + temp.optDouble("csgst", 0.0)), companyId));
            jSONObject.put("totaltax", authHandler.formattedAmount((jSONObject.optDouble("totaltax", 0.0) + temp.optDouble("totaltax", 0.0)), companyId));
            jSONObject.put("totalamount", authHandler.formattedAmount((jSONObject.optDouble("totalamount", 0.0) + temp.optDouble("totalamount", 0.0)), companyId));
            jSONObject.put("tableno", "");
            jSONObject.put("particulars", GSTRConstants.GSTR3B_SECTION_5_1);
            jSONObject.put("fmt", "B");
            jSONObject.put("enableViewDetail", true);
            dataJArr.put(jSONObject);
        }
        return jSONObject;
    }

    private JSONObject getGSTR3B_Section_5_2_Data(JSONObject params, String companyId, JSONArray dataJArr) throws JSONException, ServiceException {
         /**
         * Purchase Invoice-
         * REGTYPE:Regular,Unregistered.CUSTTYPE:NA,SEZ,SEZWOPAY,Import.
         * Interstate/Intrastate: Both. Product Tax: Non_GST.
         */
        JSONObject reqParams = new JSONObject(params, JSONObject.getNames(params));
        reqParams.put("GST3B", true);
        reqParams.put("taxClassType", FieldComboData.TaxClass_Non_GST_Product);
        reqParams.put("registrationType", Constants.GSTRegType_Regular + "," + Constants.GSTRegType_Unregistered);
        reqParams.put("CustomerType", Constants.CUSTVENTYPE_NA + "," + Constants.CUSTVENTYPE_SEZ + "," + Constants.CUSTVENTYPE_SEZWOPAY + "," + Constants.CUSTVENTYPE_Import);
        reqParams.put("itctype", Constants.GST_ITCTYPE_DEFAULT+","+Constants.GST_ITCTYPE_REVERSED);
        JSONObject jSONObject = new JSONObject();
        if ((reqParams.has("reportid") && reqParams.optInt("reportid", 0) == Constants.GSTR3B_Summary_Report) || (!StringUtil.isNullOrEmpty(params.optString("transactionType", null)) && (params.optInt("transactionType", 0) == GSTRConstants.GSTR3B_TRANSACTION_TYPE_INVOICE || params.optInt("transactionType", 0) == GSTRConstants.GSTR3B_TRANSACTION_TYPE_ALL))) {
            /**
             * For GSTR3B-Detail View.
             */
            jSONObject = getGoodsReceiptForGSTR3BNonGST(reqParams);
        }
        if (!(reqParams.has("reportid") && reqParams.optInt("reportid", 0) == Constants.GSTR3B_Summary_Report) && params.optBoolean(GSTR3BConstants.DETAILED_VIEW_REPORT, false)) {
            JSONArray tempArr = jSONObject.optJSONArray("data");
            if (tempArr != null && tempArr.length() > 0) {
                dataJArr = StringUtil.concatJSONArray(dataJArr, tempArr);
            }
        }

        /**
         * Vendor DN
         */
        reqParams = new JSONObject(params, JSONObject.getNames(params));
        reqParams.put("GST3B", !params.optBoolean(GSTR3BConstants.DETAILED_VIEW_REPORT, false));
        reqParams.put("isRCMApplicable", false);
        reqParams.put("typeofjoinisleft", true);
        reqParams.put("taxClassType", FieldComboData.TaxClass_Non_GST_Product);
        reqParams.put("registrationType", Constants.GSTRegType_Regular + "," + Constants.GSTRegType_Unregistered);
        reqParams.put("CustomerType", Constants.CUSTVENTYPE_NA + "," + Constants.CUSTVENTYPE_SEZ + "," + Constants.CUSTVENTYPE_SEZWOPAY + "," + Constants.CUSTVENTYPE_Import);
        reqParams.remove("cnentityValue");
        JSONObject temp = new JSONObject();
        if ((reqParams.has("reportid") && reqParams.optInt("reportid", 0) == Constants.GSTR3B_Summary_Report) || (!StringUtil.isNullOrEmpty(params.optString("transactionType", null)) && (params.optInt("transactionType", 0) == GSTRConstants.GSTR3B_TRANSACTION_TYPE_NOTE || params.optInt("transactionType", 0) == GSTRConstants.GSTR3B_TRANSACTION_TYPE_ALL))) {
            /**
             * For GSTR3B-Detail View.
             */
            temp = getDNForGSTR3BTaxable(reqParams);
        }
        if (!(reqParams.has("reportid") && reqParams.optInt("reportid", 0) == Constants.GSTR3B_Summary_Report) && params.optBoolean(GSTR3BConstants.DETAILED_VIEW_REPORT, false)) {
            JSONArray tempArr = temp.optJSONArray("data");
            if (tempArr != null && tempArr.length() > 0) {
                dataJArr = StringUtil.concatJSONArray(dataJArr, tempArr);
            }
        } else {
            jSONObject.put("taxableamt", authHandler.formattedAmount((jSONObject.optDouble("taxableamt", 0.0) + temp.optDouble("taxableamt", 0.0)), companyId));
            jSONObject.put("igst", authHandler.formattedAmount((jSONObject.optDouble("igst", 0.0) + temp.optDouble("igst", 0.0)), companyId));
            jSONObject.put("cgst", authHandler.formattedAmount((jSONObject.optDouble("cgst", 0.0) + temp.optDouble("cgst", 0.0)), companyId));
            jSONObject.put("sgst", authHandler.formattedAmount((jSONObject.optDouble("sgst", 0.0) + temp.optDouble("sgst", 0.0)), companyId));
            jSONObject.put("csgst", authHandler.formattedAmount((jSONObject.optDouble("csgst", 0.0) + temp.optDouble("csgst", 0.0)), companyId));
            jSONObject.put("totaltax", authHandler.formattedAmount((jSONObject.optDouble("totaltax", 0.0) + temp.optDouble("totaltax", 0.0)), companyId));
            jSONObject.put("totalamount", authHandler.formattedAmount((jSONObject.optDouble("totalamount", 0.0) + temp.optDouble("totalamount", 0.0)), companyId));

        }

        /**
         * Vendor CN
         */
        reqParams = new JSONObject(params, JSONObject.getNames(params));
        reqParams.put("GST3B", !params.optBoolean(GSTR3BConstants.DETAILED_VIEW_REPORT, false));
        reqParams.put("isRCMApplicable", false);
        reqParams.put("typeofjoinisleft", true);
        reqParams.put("taxClassType", FieldComboData.TaxClass_Non_GST_Product);
        reqParams.put("registrationType", Constants.GSTRegType_Regular + "," + Constants.GSTRegType_Unregistered);
        reqParams.put("CustomerType", Constants.CUSTVENTYPE_NA + "," + Constants.CUSTVENTYPE_SEZ + "," + Constants.CUSTVENTYPE_SEZWOPAY + "," + Constants.CUSTVENTYPE_Import);
        reqParams.put("onlycnagainstvendor", true);
        temp = new JSONObject();
        if ((reqParams.has("reportid") && reqParams.optInt("reportid", 0) == Constants.GSTR3B_Summary_Report) || (!StringUtil.isNullOrEmpty(params.optString("transactionType", null)) && (params.optInt("transactionType", 0) == GSTRConstants.GSTR3B_TRANSACTION_TYPE_NOTE || params.optInt("transactionType", 0) == GSTRConstants.GSTR3B_TRANSACTION_TYPE_ALL))) {
            /**
             * For GSTR3B-Detail View.
             */
            temp = getDNForGSTR3BTaxable(reqParams);
        }
        if (!(reqParams.has("reportid") && reqParams.optInt("reportid", 0) == Constants.GSTR3B_Summary_Report) && params.optBoolean(GSTR3BConstants.DETAILED_VIEW_REPORT, false)) {
            JSONArray tempArr = temp.optJSONArray("data");
            if (tempArr != null && tempArr.length() > 0) {
                dataJArr = StringUtil.concatJSONArray(dataJArr, tempArr);
            }
        } else {
            jSONObject.put("taxableamt", authHandler.formattedAmount((jSONObject.optDouble("taxableamt", 0.0) + temp.optDouble("taxableamt", 0.0)), companyId));
            jSONObject.put("igst", authHandler.formattedAmount((jSONObject.optDouble("igst", 0.0) + temp.optDouble("igst", 0.0)), companyId));
            jSONObject.put("cgst", authHandler.formattedAmount((jSONObject.optDouble("cgst", 0.0) + temp.optDouble("cgst", 0.0)), companyId));
            jSONObject.put("sgst", authHandler.formattedAmount((jSONObject.optDouble("sgst", 0.0) + temp.optDouble("sgst", 0.0)), companyId));
            jSONObject.put("csgst", authHandler.formattedAmount((jSONObject.optDouble("csgst", 0.0) + temp.optDouble("csgst", 0.0)), companyId));
            jSONObject.put("totaltax", authHandler.formattedAmount((jSONObject.optDouble("totaltax", 0.0) + temp.optDouble("totaltax", 0.0)), companyId));
            jSONObject.put("totalamount", authHandler.formattedAmount((jSONObject.optDouble("totalamount", 0.0) + temp.optDouble("totalamount", 0.0)), companyId));
            jSONObject.put("tableno", "");
            jSONObject.put("particulars", GSTRConstants.GSTR3B_SECTION_5_2);
            jSONObject.put("fmt", "B");
            jSONObject.put("enableViewDetail", true);
            dataJArr.put(jSONObject);
        }
        return jSONObject;
    }

    private JSONObject getGSTR3B_Section_5_3_Data(JSONObject params, String companyId, JSONArray dataJArr) throws JSONException, ServiceException {
        /**
         * Purchase Invoice-
         * REGTYPE:Regular,Unregistered.CUSTTYPE:NA,SEZ,SEZWOPAY,Import.
         * Interstate/Intrastate: Both. Product Tax: 0%.
         */
        JSONObject reqParams = new JSONObject(params, JSONObject.getNames(params));
        reqParams.put("GST3B", !params.optBoolean(GSTR3BConstants.DETAILED_VIEW_REPORT, false));
        reqParams.put("isRCMApplicable", false);
        reqParams.put("taxClassType", FieldComboData.TaxClass_ZeroPercenatge);
        reqParams.put("registrationType", Constants.GSTRegType_Regular + "," + Constants.GSTRegType_Unregistered);
        reqParams.put("CustomerType", Constants.CUSTVENTYPE_NA + "," + Constants.CUSTVENTYPE_SEZ + "," + Constants.CUSTVENTYPE_SEZWOPAY + "," + Constants.CUSTVENTYPE_Import);
        reqParams.put("itctype", Constants.GST_ITCTYPE_DEFAULT+","+Constants.GST_ITCTYPE_REVERSED);
        reqParams.put("typeofjoinisleft", true);
        JSONObject jSONObject = new JSONObject();
        if ((reqParams.has("reportid") && reqParams.optInt("reportid", 0) == Constants.GSTR3B_Summary_Report) || (!StringUtil.isNullOrEmpty(params.optString("transactionType", null)) && (params.optInt("transactionType", 0) == GSTRConstants.GSTR3B_TRANSACTION_TYPE_INVOICE || params.optInt("transactionType", 0) == GSTRConstants.GSTR3B_TRANSACTION_TYPE_ALL))) {
            /**
             * For GSTR3B-Detail View.
             */
            jSONObject = getGoodsReceiptForGSTR3BTaxable(reqParams);
        }
        if (!(reqParams.has("reportid") && reqParams.optInt("reportid", 0) == Constants.GSTR3B_Summary_Report) && params.optBoolean(GSTR3BConstants.DETAILED_VIEW_REPORT, false)) {
            JSONArray tempArr = jSONObject.optJSONArray("data");
            if (tempArr != null && tempArr.length() > 0) {
                dataJArr = StringUtil.concatJSONArray(dataJArr, tempArr);
            }
        }
        /**
         * Vendor DN
         */
        reqParams = new JSONObject(params, JSONObject.getNames(params));
        reqParams.put("GST3B", !params.optBoolean(GSTR3BConstants.DETAILED_VIEW_REPORT, false));
        reqParams.put("isRCMApplicable", false);
        reqParams.put("taxClassType", FieldComboData.TaxClass_ZeroPercenatge);
        reqParams.put("registrationType", Constants.GSTRegType_Regular + "," + Constants.GSTRegType_Unregistered);
        reqParams.put("CustomerType", Constants.CUSTVENTYPE_NA + "," + Constants.CUSTVENTYPE_SEZ + "," + Constants.CUSTVENTYPE_SEZWOPAY + "," + Constants.CUSTVENTYPE_Import);
        reqParams.put("typeofjoinisleft", true);
        reqParams.remove("cnentityValue");
        JSONObject temp = new JSONObject();
        if ((reqParams.has("reportid") && reqParams.optInt("reportid", 0) == Constants.GSTR3B_Summary_Report) || (!StringUtil.isNullOrEmpty(params.optString("transactionType", null)) && (params.optInt("transactionType", 0) == GSTRConstants.GSTR3B_TRANSACTION_TYPE_NOTE || params.optInt("transactionType", 0) == GSTRConstants.GSTR3B_TRANSACTION_TYPE_ALL))) {
            /**
             * For GSTR3B-Detail View.
             */
            temp = getDNForGSTR3BTaxable(reqParams);
        }
        if (!(reqParams.has("reportid") && reqParams.optInt("reportid", 0) == Constants.GSTR3B_Summary_Report) && params.optBoolean(GSTR3BConstants.DETAILED_VIEW_REPORT, false)) {
            JSONArray tempArr = temp.optJSONArray("data");
            if (tempArr != null && tempArr.length() > 0) {
                dataJArr = StringUtil.concatJSONArray(dataJArr, tempArr);
            }
        } else {
            jSONObject.put("taxableamt", authHandler.formattedAmount((jSONObject.optDouble("taxableamt", 0.0) + temp.optDouble("taxableamt", 0.0)), companyId));
            jSONObject.put("igst", authHandler.formattedAmount((jSONObject.optDouble("igst", 0.0) + temp.optDouble("igst", 0.0)), companyId));
            jSONObject.put("cgst", authHandler.formattedAmount((jSONObject.optDouble("cgst", 0.0) + temp.optDouble("cgst", 0.0)), companyId));
            jSONObject.put("sgst", authHandler.formattedAmount((jSONObject.optDouble("sgst", 0.0) + temp.optDouble("sgst", 0.0)), companyId));
            jSONObject.put("csgst", authHandler.formattedAmount((jSONObject.optDouble("csgst", 0.0) + temp.optDouble("csgst", 0.0)), companyId));
            jSONObject.put("totaltax", authHandler.formattedAmount((jSONObject.optDouble("totaltax", 0.0) + temp.optDouble("totaltax", 0.0)), companyId));
            jSONObject.put("totalamount", authHandler.formattedAmount((jSONObject.optDouble("totalamount", 0.0) + temp.optDouble("totalamount", 0.0)), companyId));

        }

        /**
         * Vendor CN
         */
        reqParams = new JSONObject(params, JSONObject.getNames(params));
        reqParams.put("GST3B", !params.optBoolean(GSTR3BConstants.DETAILED_VIEW_REPORT, false));
        reqParams.put("isRCMApplicable", false);
        reqParams.put("taxClassType", FieldComboData.TaxClass_ZeroPercenatge);
        reqParams.put("registrationType", Constants.GSTRegType_Regular + "," + Constants.GSTRegType_Unregistered);
        reqParams.put("CustomerType", Constants.CUSTVENTYPE_NA + "," + Constants.CUSTVENTYPE_SEZ + "," + Constants.CUSTVENTYPE_SEZWOPAY + "," + Constants.CUSTVENTYPE_Import);
        reqParams.put("typeofjoinisleft", true);
        reqParams.put("onlycnagainstvendor", true);
        temp = new JSONObject();
        if ((reqParams.has("reportid") && reqParams.optInt("reportid", 0) == Constants.GSTR3B_Summary_Report) || (!StringUtil.isNullOrEmpty(params.optString("transactionType", null)) && (params.optInt("transactionType", 0) == GSTRConstants.GSTR3B_TRANSACTION_TYPE_NOTE || params.optInt("transactionType", 0) == GSTRConstants.GSTR3B_TRANSACTION_TYPE_ALL))) {
            /**
             * For GSTR3B-Detail View.
             */
            temp = getDNForGSTR3BTaxable(reqParams);
        }
        if (!(reqParams.has("reportid") && reqParams.optInt("reportid", 0) == Constants.GSTR3B_Summary_Report) && params.optBoolean(GSTR3BConstants.DETAILED_VIEW_REPORT, false)) {
            JSONArray tempArr = temp.optJSONArray("data");
            if (tempArr != null && tempArr.length() > 0) {
                dataJArr = StringUtil.concatJSONArray(dataJArr, tempArr);
            }
        } else {
            jSONObject.put("taxableamt", authHandler.formattedAmount((jSONObject.optDouble("taxableamt", 0.0) + temp.optDouble("taxableamt", 0.0)), companyId));
            jSONObject.put("igst", authHandler.formattedAmount((jSONObject.optDouble("igst", 0.0) + temp.optDouble("igst", 0.0)), companyId));
            jSONObject.put("cgst", authHandler.formattedAmount((jSONObject.optDouble("cgst", 0.0) + temp.optDouble("cgst", 0.0)), companyId));
            jSONObject.put("sgst", authHandler.formattedAmount((jSONObject.optDouble("sgst", 0.0) + temp.optDouble("sgst", 0.0)), companyId));
            jSONObject.put("csgst", authHandler.formattedAmount((jSONObject.optDouble("csgst", 0.0) + temp.optDouble("csgst", 0.0)), companyId));
            jSONObject.put("totaltax", authHandler.formattedAmount((jSONObject.optDouble("totaltax", 0.0) + temp.optDouble("totaltax", 0.0)), companyId));
            jSONObject.put("totalamount", authHandler.formattedAmount((jSONObject.optDouble("totalamount", 0.0) + temp.optDouble("totalamount", 0.0)), companyId));
            jSONObject.put("tableno", "");
            jSONObject.put("particulars", GSTRConstants.GSTR3B_SECTION_5_3);
            jSONObject.put("fmt", "B");
            jSONObject.put("enableViewDetail", true);
            dataJArr.put(jSONObject);
        }
        return jSONObject;
    }

    private JSONObject getGSTR3B_Section_5_4_Data(JSONObject params, String companyId, JSONArray dataJArr) throws JSONException, ServiceException {
          /**
         * Purchase Invoice-
         * REGTYPE:Composition.CUSTTYPE:NA.
         * Interstate/Intrastate: Both. 
         */
        JSONObject reqParams = new JSONObject(params, JSONObject.getNames(params));
        reqParams.put("GST3B", !params.optBoolean(GSTR3BConstants.DETAILED_VIEW_REPORT, false));
        reqParams.put("isGSTINnull", false);
        reqParams.put("registrationType", Constants.GSTRegType_Composition);
        reqParams.put("CustomerType", Constants.CUSTVENTYPE_NA);
        reqParams.put("typeofjoinisleft", true);
        reqParams.put("itctype", Constants.GST_ITCTYPE_DEFAULT+","+Constants.GST_ITCTYPE_REVERSED);
//        reqParams.put("taxClassType", FieldComboData.TaxClass_Percenatge);
        reqParams.put("excludetaxClassType", true);
        JSONObject jSONObject = new JSONObject();
        if ((reqParams.has("reportid") && reqParams.optInt("reportid", 0) == Constants.GSTR3B_Summary_Report) || (!StringUtil.isNullOrEmpty(params.optString("transactionType", null)) && (params.optInt("transactionType", 0) == GSTRConstants.GSTR3B_TRANSACTION_TYPE_INVOICE || params.optInt("transactionType", 0) == GSTRConstants.GSTR3B_TRANSACTION_TYPE_ALL))) {
            /**
             * For GSTR3B-Detail View.
             */
            jSONObject = getGoodsReceiptForGSTR3BTaxable(reqParams);
        }
        if (!(reqParams.has("reportid") && reqParams.optInt("reportid", 0) == Constants.GSTR3B_Summary_Report) && params.optBoolean(GSTR3BConstants.DETAILED_VIEW_REPORT, false)) {
            JSONArray tempArr = jSONObject.optJSONArray("data");
            if (tempArr != null && tempArr.length() > 0) {
                dataJArr = StringUtil.concatJSONArray(dataJArr, tempArr);
            }
        }

        /**
         * Vendor DN
         */
        reqParams = new JSONObject(params, JSONObject.getNames(params));
        reqParams.put("GST3B", !params.optBoolean(GSTR3BConstants.DETAILED_VIEW_REPORT, false));
        reqParams.put("isGSTINnull", false);
        reqParams.put("registrationType", Constants.GSTRegType_Composition);
        reqParams.put("CustomerType", Constants.CUSTVENTYPE_NA);
        reqParams.put("typeofjoinisleft", true);
        reqParams.remove("cnentityValue");
        JSONObject temp = new JSONObject();
        if ((reqParams.has("reportid") && reqParams.optInt("reportid", 0) == Constants.GSTR3B_Summary_Report) || (!StringUtil.isNullOrEmpty(params.optString("transactionType", null)) && (params.optInt("transactionType", 0) == GSTRConstants.GSTR3B_TRANSACTION_TYPE_NOTE || params.optInt("transactionType", 0) == GSTRConstants.GSTR3B_TRANSACTION_TYPE_ALL))) {
            /**
             * For GSTR3B-Detail View.
             */
            temp = getDNForGSTR3BTaxable(reqParams);
        }
        if (!(reqParams.has("reportid") && reqParams.optInt("reportid", 0) == Constants.GSTR3B_Summary_Report) && params.optBoolean(GSTR3BConstants.DETAILED_VIEW_REPORT, false)) {
            JSONArray tempArr = temp.optJSONArray("data");
            if (tempArr != null && tempArr.length() > 0) {
                dataJArr = StringUtil.concatJSONArray(dataJArr, tempArr);
            }
        } else {
            jSONObject.put("taxableamt", authHandler.formattedAmount((jSONObject.optDouble("taxableamt", 0.0) + temp.optDouble("taxableamt", 0.0)), companyId));
            jSONObject.put("igst", authHandler.formattedAmount((jSONObject.optDouble("igst", 0.0) + temp.optDouble("igst", 0.0)), companyId));
            jSONObject.put("cgst", authHandler.formattedAmount((jSONObject.optDouble("cgst", 0.0) + temp.optDouble("cgst", 0.0)), companyId));
            jSONObject.put("sgst", authHandler.formattedAmount((jSONObject.optDouble("sgst", 0.0) + temp.optDouble("sgst", 0.0)), companyId));
            jSONObject.put("csgst", authHandler.formattedAmount((jSONObject.optDouble("csgst", 0.0) + temp.optDouble("csgst", 0.0)), companyId));
            jSONObject.put("totaltax", authHandler.formattedAmount((jSONObject.optDouble("totaltax", 0.0) + temp.optDouble("totaltax", 0.0)), companyId));
            jSONObject.put("totalamount", authHandler.formattedAmount((jSONObject.optDouble("totalamount", 0.0) + temp.optDouble("totalamount", 0.0)), companyId));

        }

        /**
         * Vendor CN
         *
         */
        reqParams = new JSONObject(params, JSONObject.getNames(params));
        reqParams.put("GST3B", !params.optBoolean(GSTR3BConstants.DETAILED_VIEW_REPORT, false));
        reqParams.put("isGSTINnull", false);
        reqParams.put("registrationType", Constants.GSTRegType_Composition);
        reqParams.put("CustomerType", Constants.CUSTVENTYPE_NA);
        reqParams.put("typeofjoinisleft", true);
        reqParams.put("onlycnagainstvendor", true);
        temp = new JSONObject();
        if ((reqParams.has("reportid") && reqParams.optInt("reportid", 0) == Constants.GSTR3B_Summary_Report) || (!StringUtil.isNullOrEmpty(params.optString("transactionType", null)) && (params.optInt("transactionType", 0) == GSTRConstants.GSTR3B_TRANSACTION_TYPE_NOTE || params.optInt("transactionType", 0) == GSTRConstants.GSTR3B_TRANSACTION_TYPE_ALL))) {
            /**
             * For GSTR3B-Detail View.
             */
            temp = getDNForGSTR3BTaxable(reqParams);
        }
        if (!(reqParams.has("reportid") && reqParams.optInt("reportid", 0) == Constants.GSTR3B_Summary_Report) && params.optBoolean(GSTR3BConstants.DETAILED_VIEW_REPORT, false)) {
            JSONArray tempArr = temp.optJSONArray("data");
            if (tempArr != null && tempArr.length() > 0) {
                dataJArr = StringUtil.concatJSONArray(dataJArr, tempArr);
            }
        } else {
            jSONObject.put("taxableamt", authHandler.formattedAmount((jSONObject.optDouble("taxableamt", 0.0) + temp.optDouble("taxableamt", 0.0)), companyId));
            jSONObject.put("igst", authHandler.formattedAmount((jSONObject.optDouble("igst", 0.0) + temp.optDouble("igst", 0.0)), companyId));
            jSONObject.put("cgst", authHandler.formattedAmount((jSONObject.optDouble("cgst", 0.0) + temp.optDouble("cgst", 0.0)), companyId));
            jSONObject.put("sgst", authHandler.formattedAmount((jSONObject.optDouble("sgst", 0.0) + temp.optDouble("sgst", 0.0)), companyId));
            jSONObject.put("csgst", authHandler.formattedAmount((jSONObject.optDouble("csgst", 0.0) + temp.optDouble("csgst", 0.0)), companyId));
            jSONObject.put("totaltax", authHandler.formattedAmount((jSONObject.optDouble("totaltax", 0.0) + temp.optDouble("totaltax", 0.0)), companyId));
            jSONObject.put("totalamount", authHandler.formattedAmount((jSONObject.optDouble("totalamount", 0.0) + temp.optDouble("totalamount", 0.0)), companyId));
            jSONObject.put("tableno", "");
            jSONObject.put("particulars", GSTRConstants.GSTR3B_SECTION_5_4);
            jSONObject.put("fmt", "B");
            jSONObject.put("enableViewDetail", true);
            dataJArr.put(jSONObject);
        }
        return jSONObject;
    }
    /**
     * Function to check whether GST fields history present after any date
     * @param params
     * @return
     * @throws ServiceException
     * @throws JSONException 
     */
    public JSONObject getGSTFieldsChangedStatus(JSONObject params) throws ServiceException, JSONException {
        Map<String, Object> reqMap = new HashMap();
        if (!StringUtil.isNullOrEmpty(params.optString("masterid"))) {
            reqMap.put("masterid", params.optString("masterid"));
        }
        if (!StringUtil.isNullOrEmpty(params.optString("isCustomer"))) {
            reqMap.put("isCustomer", params.optBoolean("isCustomer"));
        }
        if (!StringUtil.isNullOrEmpty(params.optString("productids"))) {
            String productids = params.optString("productids");
            if (productids.length() > 1) {
                productids = productids.substring(0, productids.length() - 1);
            }
            reqMap.put("productids", productids);
        }
        if (!StringUtil.isNullOrEmpty(params.optString("applydate"))) {
            try {
                reqMap.put("applydate", authHandler.getDateOnlyFormat().parse(params.optString("applydate")));
                reqMap.put("transactiondate", authHandler.getDateOnlyFormat().parse(params.optString("transactiondate")));
            } catch (SessionExpiredException ex) {
                Logger.getLogger(AccEntityGstServiceImpl.class.getName()).log(Level.SEVERE, null, ex);
            } catch (ParseException ex) {
                Logger.getLogger(AccEntityGstServiceImpl.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        JSONObject data = new JSONObject();
        boolean isdatachanged = false;
        /**
         * Check for customer/vendor history.
         */
        List list = accEntityGstDao.getMasterHistoryForGSTFields(reqMap);
        if (!list.isEmpty() && list.size() > 0) {
            isdatachanged = true;
            return data.put("isdatachanged", isdatachanged);
        }
        /**
         * Check for Product tax class history.
         */
        list = accEntityGstDao.getTaxClassHistoryForGSTFields(reqMap);
        if (!list.isEmpty() && list.size() > 0) {
            isdatachanged = true;
            return data.put("isdatachanged", isdatachanged);
        }
        return data.put("isdatachanged", isdatachanged);
    }
    @Override
    public HSSFWorkbook exportGSTR3BDetails(JSONObject params) throws JSONException, ServiceException {
        String companyId = params.optString("companyid");

        getEntityDataForRequestedModule(params);
        getColNumForRequestedModules(params);
        getLocalStateOfEntity(params);
        params.put(GSTR3BConstants.DETAILED_VIEW_REPORT, true);

        HSSFWorkbook wb = new HSSFWorkbook();
        JSONArray dataJArr = new JSONArray();

        getGSTR3B_Section_3_1_A_Data(params, companyId, dataJArr);
        dataJArr = sortJsonForGSTR2A(dataJArr);
        AccGSTReportServiceImpl.writeDataForGSTR3B(wb, dataJArr, "3.1.A", GSTRConstants.GSTR3B_SECTION_3_1_A,params);

        dataJArr = new JSONArray();
        getGSTR3B_Section_3_1_B_Data(params, companyId, dataJArr);
        dataJArr = sortJsonForGSTR2A(dataJArr);
        AccGSTReportServiceImpl.writeDataForGSTR3B(wb, dataJArr, "3.1.B", GSTRConstants.GSTR3B_SECTION_3_1_B,params);

        dataJArr = new JSONArray();
        getGSTR3B_Section_3_1_C_Data(params, companyId, dataJArr);
        dataJArr = sortJsonForGSTR2A(dataJArr);
        AccGSTReportServiceImpl.writeDataForGSTR3B(wb, dataJArr, "3.1.C", GSTRConstants.GSTR3B_SECTION_3_1_C, params);

        dataJArr = new JSONArray();
        getGSTR3B_Section_3_1_D_Data(params, companyId, dataJArr);
        dataJArr = sortJsonForGSTR2A(dataJArr);
        AccGSTReportServiceImpl.writeDataForGSTR3B(wb, dataJArr, "3.1.D", GSTRConstants.GSTR3B_SECTION_3_1_D, params);

        dataJArr = new JSONArray();
        getGSTR3B_Section_3_1_E_Data(params, companyId, dataJArr);
        dataJArr = sortJsonForGSTR2A(dataJArr);
        AccGSTReportServiceImpl.writeDataForGSTR3B(wb, dataJArr, "3.1.E", GSTRConstants.GSTR3B_SECTION_3_1_E, params);

        dataJArr = new JSONArray();
        getGSTR3B_Section_3_2_A_Data(params, companyId, dataJArr);
        dataJArr = sortJsonForGSTR2A(dataJArr);
        AccGSTReportServiceImpl.writeDataForGSTR3B(wb, dataJArr, "3.2.A", GSTRConstants.GSTR3B_SECTION_3_2_A, params);

        dataJArr = new JSONArray();
        getGSTR3B_Section_3_2_B_Data(params, companyId, dataJArr);
        dataJArr = sortJsonForGSTR2A(dataJArr);
        AccGSTReportServiceImpl.writeDataForGSTR3B(wb, dataJArr, "3.2.B", GSTRConstants.GSTR3B_SECTION_3_2_B, params);

        dataJArr = new JSONArray();
        getGSTR3B_Section_4_A_1_Data(params, companyId, dataJArr);
        dataJArr = sortJsonForGSTR2A(dataJArr);
        AccGSTReportServiceImpl.writeDataForGSTR3B(wb, dataJArr, "4.A.1", GSTRConstants.GSTR3B_SECTION_4_A_1, params);

        dataJArr = new JSONArray();
        getGSTR3B_Section_4_A_2_Data(params, companyId, dataJArr);
        dataJArr = sortJsonForGSTR2A(dataJArr);
        AccGSTReportServiceImpl.writeDataForGSTR3B(wb, dataJArr, "4.A.2", GSTRConstants.GSTR3B_SECTION_4_A_2, params);

        dataJArr = new JSONArray();
        getGSTR3B_Section_4_A_3_Data(params, companyId, dataJArr);
        dataJArr = sortJsonForGSTR2A(dataJArr);
        AccGSTReportServiceImpl.writeDataForGSTR3B(wb, dataJArr, "4.A.3", GSTRConstants.GSTR3B_SECTION_4_A_3, params);

        dataJArr = new JSONArray();
        getGSTR3B_Section_4_A_5_Data(params, companyId, dataJArr);
        dataJArr = sortJsonForGSTR2A(dataJArr);
        AccGSTReportServiceImpl.writeDataForGSTR3B(wb, dataJArr, "4.A.5", GSTRConstants.GSTR3B_SECTION_4_A_5, params);

        dataJArr = new JSONArray();
        gstGSTR3B_Section_4_B_1_Data(params, companyId, dataJArr);
        dataJArr = sortJsonForGSTR2A(dataJArr);
        AccGSTReportServiceImpl.writeDataForGSTR3B(wb, dataJArr, "4.B.1", GSTRConstants.GSTR3B_SECTION_4_B_1, params);
     
        dataJArr = new JSONArray();
        getGSTR3B_Section_4_D_1_Data(params, companyId, dataJArr);
        dataJArr = sortJsonForGSTR2A(dataJArr);
        AccGSTReportServiceImpl.writeDataForGSTR3B(wb, dataJArr, "4.D.1", GSTRConstants.GSTR3B_SECTION_4_D_1, params);
        
        dataJArr = new JSONArray();
        getGSTR3B_Section_5_1_Data(params, companyId, dataJArr);
        dataJArr = sortJsonForGSTR2A(dataJArr);
        AccGSTReportServiceImpl.writeDataForGSTR3B(wb, dataJArr, "5.1", GSTRConstants.GSTR3B_SECTION_5_1, params);

        dataJArr = new JSONArray();
        getGSTR3B_Section_5_2_Data(params, companyId, dataJArr);
        dataJArr = sortJsonForGSTR2A(dataJArr);
        AccGSTReportServiceImpl.writeDataForGSTR3B(wb, dataJArr, "5.2", GSTRConstants.GSTR3B_SECTION_5_2, params);

        dataJArr = new JSONArray();
        getGSTR3B_Section_5_3_Data(params, companyId, dataJArr);
        dataJArr = sortJsonForGSTR2A(dataJArr);
        AccGSTReportServiceImpl.writeDataForGSTR3B(wb, dataJArr, "5.3", GSTRConstants.GSTR3B_SECTION_5_3, params);

        dataJArr = new JSONArray();
        getGSTR3B_Section_5_4_Data(params, companyId, dataJArr);
        dataJArr = sortJsonForGSTR2A(dataJArr);
        AccGSTReportServiceImpl.writeDataForGSTR3B(wb, dataJArr, "5.4", GSTRConstants.GSTR3B_SECTION_5_4, params);
        
        return wb;
    }
}
