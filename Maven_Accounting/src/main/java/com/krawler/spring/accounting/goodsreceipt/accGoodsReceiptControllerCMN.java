/*
 * Copyright (C) 2012  Krawler Information Systems Pvt Ltd
 * All rights reserved.
 * 
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
* 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 */
package com.krawler.spring.accounting.goodsreceipt;

import com.krawler.hql.accounting.PurchaseReturnDetailsTermMap;
import com.itextpdf.text.DocumentException;
import com.krawler.common.admin.*;
import com.krawler.common.service.ServiceException;
import com.krawler.common.session.SessionExpiredException;
import com.krawler.common.util.CommonIndonesianNumberToWords;
import com.krawler.common.util.Constants;
import com.krawler.common.util.FieldConstants;
import com.krawler.common.util.IndiaComplianceConstants;
import com.krawler.common.util.StringUtil;
import com.krawler.esp.handlers.FileUploadHandler;
import com.krawler.esp.handlers.SendMailHandler;
import com.krawler.esp.handlers.StorageHandler;
import com.krawler.esp.servlets.ProfileImageServlet;
import com.krawler.hql.accounting.*;
import com.krawler.inventory.exception.InventoryException;
import com.krawler.inventory.model.stockmovement.StockMovementService;
import com.krawler.spring.accounting.account.accAccountDAO;
import com.krawler.spring.accounting.account.accCusVenMapDAO;
import com.krawler.spring.accounting.bankreconciliation.accBankReconciliationDAO;
import com.krawler.spring.accounting.companypreferances.accCompanyPreferencesDAO;
import com.krawler.spring.accounting.costCenter.CCConstants;
import com.krawler.spring.accounting.creditnote.accCreditNoteDAO;
import com.krawler.spring.accounting.currency.accCurrencyDAO;
import com.krawler.spring.accounting.customDesign.*;
import com.krawler.spring.accounting.debitnote.accDebitNoteDAO;
import com.krawler.spring.accounting.debitnote.accDebitNoteService;
import com.krawler.spring.accounting.discount.accDiscountDAO;
import com.krawler.spring.accounting.goodsreceipt.dm.GoodsReceiptInfo;
import com.krawler.spring.accounting.handler.*;
import com.krawler.spring.accounting.handler.AccountingHandlerDAO;
import com.krawler.spring.accounting.handler.AccountingManager;
import com.krawler.spring.accounting.invoice.*;
import com.krawler.spring.accounting.jasperreports.*;
import com.krawler.spring.accounting.jasperreports.StatementOfAccounts;
import com.krawler.spring.accounting.jasperreports.StatementOfAccountsSubReport;
import com.krawler.spring.accounting.journalentry.accJournalEntryDAO;
import com.krawler.spring.accounting.masteritems.accMasterItemsDAO;
import com.krawler.spring.accounting.multiLevelApprovalRule.AccMultiLevelApprovalDAO;
import com.krawler.spring.accounting.payment.accPaymentDAO;
import com.krawler.spring.accounting.product.accProductDAO;
import com.krawler.spring.accounting.purchaseorder.accPurchaseOrderDAO;
import com.krawler.spring.accounting.receipt.accReceiptDAO;
import com.krawler.spring.accounting.salesorder.AccSalesOrderServiceDAO;
import com.krawler.spring.accounting.tax.accTaxDAO;
import com.krawler.spring.accounting.vendor.accVendorDAO;
import com.krawler.spring.accounting.vendorpayment.accVendorPaymentDAO;
import com.krawler.spring.auditTrailModule.auditTrailDAO;
import com.krawler.spring.authHandler.authHandler;
import com.krawler.spring.authHandler.authHandlerDAO;
import com.krawler.spring.common.AccCommonTablesDAO;
import com.krawler.spring.common.CommonFnController;
import com.krawler.spring.common.KwlReturnObject;
import com.krawler.spring.common.kwlCommonTablesDAO;
import com.krawler.spring.exportFuctionality.AccExportReportsServiceDAO;
import com.krawler.spring.exportFuctionality.ExportRecordHandler;
import com.krawler.spring.exportFunctionality.exportMPXDAOImpl;
import com.krawler.spring.exportFuctionality.ExportSOA;
import com.krawler.spring.sessionHandler.sessionHandlerImpl;
import com.krawler.spring.storageHandler.storageHandlerImpl;
import com.krawler.utils.json.base.JSONArray;
import com.krawler.utils.json.base.JSONException;
import com.krawler.utils.json.base.JSONObject;
import java.io.*;
import java.io.UnsupportedEncodingException;
import java.text.DateFormat;
import java.text.DecimalFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.*;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.mail.MessagingException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import net.sf.jasperreports.engine.*;
import net.sf.jasperreports.engine.JRExporterParameter;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.data.JRBeanCollectionDataSource;
import net.sf.jasperreports.engine.design.JasperDesign;
import net.sf.jasperreports.engine.export.JRPdfExporter;
import net.sf.jasperreports.engine.export.JRPdfExporterParameter;
import net.sf.jasperreports.engine.xml.JRXmlLoader;
import org.apache.velocity.VelocityContext;
import org.apache.velocity.app.VelocityEngine;

import org.springframework.context.MessageSource;
import org.springframework.context.MessageSourceAware;
import org.springframework.orm.hibernate3.HibernateTransactionManager;
import org.springframework.transaction.TransactionDefinition;
import org.springframework.transaction.TransactionStatus;
import org.springframework.transaction.support.DefaultTransactionDefinition;
import org.springframework.web.servlet.ModelAndView;
import org.springframework.web.servlet.mvc.multiaction.MultiActionController;
import org.springframework.web.servlet.support.RequestContextUtils;
import com.krawler.spring.common.fieldDataManager;
import com.krawler.spring.permissionHandler.permissionHandlerDAO;
import com.krawler.esp.handlers.ServerEventManager;
import com.krawler.inventory.model.ist.GRODetailISTMapping;
import com.krawler.inventory.model.ist.InterStoreTransferStatus;
import com.krawler.inventory.model.stock.StockService;
import javax.script.ScriptEngine;
import javax.script.ScriptEngineManager;
import javax.servlet.ServletContext;
import com.krawler.spring.accounting.handler.AccDashboardServiceImpl;
import static com.krawler.spring.accounting.handler.AccountingManager.getGlobalCurrencyidFromRequest;
import static com.krawler.spring.sessionHandler.sessionHandlerImpl.getCompanyidFromRequest;

/**
 *
 * @author krawler
 */
public class accGoodsReceiptControllerCMN extends MultiActionController implements GoodsReceiptCMNConstants, MessageSourceAware{
    
    public class SortDebitNoteDetail implements Comparator<DebitNoteDetail> {
        @Override
        public int compare(DebitNoteDetail DND1, DebitNoteDetail DND2) {
            if (DND1.getSrno() > DND2.getSrno()) {
                return 1;
            } else {
                return -1;
            }
        }
    }
    
    private HibernateTransactionManager txnManager;
    private AccExportReportsServiceDAO accExportReportsServiceDAOobj;
    private AccExportReportsServiceDAO accExportOtherReportsServiceDAOobj; 
    private AccGoodsReceiptServiceDAO accGoodsReceiptServiceDAO;
    private accGoodsReceiptDAO accGoodsReceiptobj;
    private accInvoiceDAO accInvoiceDAOobj;
    private accInvoiceCMN accInvoiceCommon;
    private accVendorPaymentDAO accVendorPaymentobj;
    private accJournalEntryDAO accJournalEntryobj;
    private accProductDAO accProductObj;
    private accDebitNoteDAO accDebitNoteobj;
    private accCurrencyDAO accCurrencyDAOobj;
    private accVendorDAO accVendorDAOobj;
    private AccGoodsReceiptServiceHandler accGoodsReceiptServiceHandler;
    private accTaxDAO accTaxObj;
    private accDiscountDAO accDiscountobj;
    private AccountingHandlerDAO accountingHandlerDAOobj;
    private exportMPXDAOImpl exportDaoObj;
    private String successView;
    private kwlCommonTablesDAO kwlCommonTablesDAOObj;
    private accGoodsReceiptCMN accGoodsReceiptCommon;
    private MessageSource messageSource;
    private accAccountDAO accAccountDAOobj;
    private authHandlerDAO authHandlerDAOObj;
    private CustomDesignDAO customDesignDAOObj;
    private VelocityEngine velocityEngine;
    private accCompanyPreferencesDAO accCompanyPreferencesObj;
    private accReceiptDAO accReceiptDAOobj;
    private accCreditNoteDAO accCreditNoteDAOobj;
    //Neeraj  
    private CommonEnglishNumberToWords EnglishNumberToWordsOjb = new CommonEnglishNumberToWords();
    private CommonIndonesianNumberToWords IndonesianNumberToWordsOjb = new CommonIndonesianNumberToWords();
    private auditTrailDAO auditTrailObj;
    private accCusVenMapDAO accCusVenMapDAOObj;
    private AccCommonTablesDAO accCommonTablesDAO;
    private accMasterItemsDAO accMasterItemsDAOobj;
    private accDebitNoteService accDebitNoteService;
    private AccMultiLevelApprovalDAO accMultiLevelApprovalDAOObj;
    private AccSalesOrderServiceDAO accSalesOrderServiceDAOobj;
    private StockMovementService stockMovementService;
    private accPaymentDAO accPaymentDAOobj;
    private fieldDataManager fieldDataManagercntrl;
    private AccInvoiceServiceDAO accInvoiceServiceDAO;
    private permissionHandlerDAO permissionHandlerDAOObj;
    private AccLinkDataDao accLinkDataDao;
    private accBankReconciliationDAO accBankReconciliationObj;
    private accPurchaseOrderDAO accPurchaseOrderobj;
    private ExportSOA exportSOA;
    private StockService stockService;
    private AccDashboardServiceImpl accDashboardServiceImpl;
    
    public void setStockService(StockService stockService) {
        this.stockService = stockService;
    }
    public void setExportSOA(ExportSOA exportSOA) {
        this.exportSOA = exportSOA;
    }
    public void setFieldDataManager(fieldDataManager fieldDataManagercntrl) {
        this.fieldDataManagercntrl = fieldDataManagercntrl;
    }
    public void setaccPaymentDAO(accPaymentDAO accPaymentDAOobj) {
        this.accPaymentDAOobj = accPaymentDAOobj;
    }
    public void setAccLinkDataDao(AccLinkDataDao accLinkDataDao) {
        this.accLinkDataDao = accLinkDataDao;
    }
    public void setpermissionHandlerDAO(permissionHandlerDAO permissionHandlerDAOObj1) {
        this.permissionHandlerDAOObj = permissionHandlerDAOObj1;
    }
   public void setaccExportOtherReportsServiceDAO(AccExportReportsServiceDAO accExportReportsServiceDAOobj) {
        this.accExportOtherReportsServiceDAOobj = accExportReportsServiceDAOobj;
    }
    public void setAccCusVenMapDAOObj(accCusVenMapDAO accCusVenMapDAOObj) {
        this.accCusVenMapDAOObj = accCusVenMapDAOObj;
    }
    public void setaccExportReportsServiceDAO(AccExportReportsServiceDAO accExportReportsServiceDAOobj) {
        this.accExportReportsServiceDAOobj = accExportReportsServiceDAOobj;
    }
    
    public void setAccGoodsReceiptServiceHandler(AccGoodsReceiptServiceHandler accGoodsReceiptServiceHandler) {
        this.accGoodsReceiptServiceHandler = accGoodsReceiptServiceHandler;
    }

    public void setaccGoodsReceiptServiceDAO(AccGoodsReceiptServiceDAO accGoodsReceiptServiceDAO) {
        this.accGoodsReceiptServiceDAO = accGoodsReceiptServiceDAO;
    }
       
    public void setauditTrailDAO(auditTrailDAO auditTrailDAOObj){
        this.auditTrailObj = auditTrailDAOObj;
    }
    
    public void setaccSalesOrderServiceDAO(AccSalesOrderServiceDAO accSalesOrderServiceDAOobj) {
        this.accSalesOrderServiceDAOobj = accSalesOrderServiceDAOobj;
    }
    
    public void setStockMovementService(StockMovementService stockMovementService) {
        this.stockMovementService = stockMovementService;
    }
    
    public void setaccReceiptDAO(accReceiptDAO accReceiptDAOobj) {
        this.accReceiptDAOobj = accReceiptDAOobj;
    }
     
    public void setaccCreditNoteDAO(accCreditNoteDAO accCreditNoteDAOobj) {
        this.accCreditNoteDAOobj = accCreditNoteDAOobj;
    }
    
    public void setaccAccountDAO(accAccountDAO accAccountDAOobj) {
        this.accAccountDAOobj = accAccountDAOobj;
    }
    
    @Override
    public void setMessageSource(MessageSource msg) {
            this.messageSource = msg;
    }

    public void setkwlCommonTablesDAO(kwlCommonTablesDAO kwlCommonTablesDAOObj1) {
        this.kwlCommonTablesDAOObj = kwlCommonTablesDAOObj1;
    }
    public void setaccGoodsReceiptCMN(accGoodsReceiptCMN accGoodsReceiptCommon) {
        this.accGoodsReceiptCommon = accGoodsReceiptCommon;
    }

    public void setTxnManager(HibernateTransactionManager txManager) {
        this.txnManager = txManager;
    }
    public void setaccGoodsReceiptDAO(accGoodsReceiptDAO accGoodsReceiptobj) {
        this.accGoodsReceiptobj = accGoodsReceiptobj;
    }
    public void setaccVendorPaymentDAO(accVendorPaymentDAO accVendorPaymentobj) {
        this.accVendorPaymentobj = accVendorPaymentobj;
    }
    public void setaccJournalEntryDAO(accJournalEntryDAO accJournalEntryobj) {
        this.accJournalEntryobj = accJournalEntryobj;
    }
    public void setaccProductDAO(accProductDAO accProductObj) {
        this.accProductObj = accProductObj;
    }
    public void setaccDebitNoteDAO(accDebitNoteDAO accDebitNoteobj) {
        this.accDebitNoteobj = accDebitNoteobj;
    }
    public void setaccCurrencyDAO(accCurrencyDAO accCurrencyDAOobj) {
        this.accCurrencyDAOobj = accCurrencyDAOobj;
    }
    public void setaccVendorDAO(accVendorDAO accVendorDAOobj) {
        this.accVendorDAOobj = accVendorDAOobj;
    }
    public void setaccTaxDAO(accTaxDAO accTaxObj) {
        this.accTaxObj = accTaxObj;
    }
    public void setaccDiscountDAO(accDiscountDAO accDiscountobj){
        this.accDiscountobj = accDiscountobj;
    }
    public void setaccountingHandlerDAO(AccountingHandlerDAO AccountingHandlerDAOobj) {
        this.accountingHandlerDAOobj = AccountingHandlerDAOobj;
    }
    public void setexportMPXDAOImpl(exportMPXDAOImpl exportDaoObj) {
        this.exportDaoObj = exportDaoObj;
    }
    public String getSuccessView() {
        return successView;
    }
    public void setSuccessView(String successView) {
        this.successView = successView;
    }

    public void setAuthHandlerDAOObj(authHandlerDAO authHandlerDAOObj) {
        this.authHandlerDAOObj = authHandlerDAOObj;
    }
    
    public void setcustomDesignDAO(CustomDesignDAO customDesignDAOObj) {
        this.customDesignDAOObj = customDesignDAOObj;
    }
    public void setvelocityEngine(VelocityEngine velocityEngine) {
        this.velocityEngine = velocityEngine;
    }
    public void setaccInvoiceDAO(accInvoiceDAO accInvoiceDAOobj) {
        this.accInvoiceDAOobj = accInvoiceDAOobj;
    }
    public void setAccInvoiceCommon(accInvoiceCMN accInvoiceCommon) {
        this.accInvoiceCommon = accInvoiceCommon;
    }
    public void setaccCompanyPreferencesDAO(accCompanyPreferencesDAO accCompanyPreferencesObj) {
        this.accCompanyPreferencesObj = accCompanyPreferencesObj;
    }
    
    public void setaccCommonTablesDAO(AccCommonTablesDAO accCommonTablesDAO) {
        this.accCommonTablesDAO = accCommonTablesDAO;
    }
    
    public void setaccMasterItemsDAO(accMasterItemsDAO accMasterItemsDAOobj) {
        this.accMasterItemsDAOobj = accMasterItemsDAOobj;
    }
    
    public void setaccDebitNoteService(accDebitNoteService accDebitNoteService) {
        this.accDebitNoteService = accDebitNoteService;
    }

    public void setaccMultiLevelApprovalDAOObj(AccMultiLevelApprovalDAO accMultiLevelApprovalDAO) {
        this.accMultiLevelApprovalDAOObj = accMultiLevelApprovalDAO;
    }
    
    public void setAccInvoiceServiceDAO(AccInvoiceServiceDAO accInvoiceServiceDAO) {
        this.accInvoiceServiceDAO = accInvoiceServiceDAO;
    }
    public void setaccBankReconciliationDAO(accBankReconciliationDAO accBankReconciliationObj) {
        this.accBankReconciliationObj = accBankReconciliationObj;
    }
    public void setaccPurchaseOrderDAO(accPurchaseOrderDAO accPurchaseOrderobj) {
        this.accPurchaseOrderobj = accPurchaseOrderobj;
    }
    public void setAccDashboardServiceImpl(AccDashboardServiceImpl accDashboardServiceImpl) {
        this.accDashboardServiceImpl = accDashboardServiceImpl;
    }

    public ModelAndView getGoodsReceiptListForLinking(HttpServletRequest request, HttpServletResponse response){
        JSONObject jobj = new JSONObject();
        boolean issuccess = false;
        String msg = "", start = null, limit = null;
        try {
            HashMap<String, Object> requestParams = getGoodsReceiptMap(request);
            KwlReturnObject extracapresult = accountingHandlerDAOobj.getObject(ExtraCompanyPreferences.class.getName(), sessionHandlerImpl.getCompanyid(request));
            ExtraCompanyPreferences extraCompanyPreferences = (ExtraCompanyPreferences) extracapresult.getEntityList().get(0);
            //get module id which requested getPurchaseOrders
            if (request.getParameter("requestModuleid") != null && !StringUtil.isNullOrEmpty(request.getParameter("requestModuleid"))) {
                int requestModuleID = Integer.parseInt(request.getParameter("requestModuleid"));
                if (extraCompanyPreferences.isEnableLinkToSelWin()) {
                    requestParams.put("requestModuleid", requestModuleID);
                }
                if (extraCompanyPreferences.isEnableLinkToSelWin() && !Boolean.parseBoolean(request.getParameter("isGrid")) && (requestModuleID == Constants.Acc_Goods_Receipt_ModuleId || requestModuleID == Constants.Acc_Purchase_Return_ModuleId || requestModuleID == Constants.Acc_FixedAssets_GoodsReceipt_ModuleId)) {
                    requestParams.put("start", "0");
                    requestParams.put("limit", "10");
                    start = "0";
                    limit = "10";
                }
            }
            boolean contraentryflag = request.getParameter("contraentryflag") != null;
            requestParams.put("onlyMRPJOBWORKIN", (request.getParameter("onlyMRPJOBWORKIN") != null) ? Boolean.parseBoolean(request.getParameter("onlyMRPJOBWORKIN")) : false);
            requestParams.put("isPIlinktoPR", (request.getParameter("isPIlinktoPR") != null) ? Boolean.parseBoolean(request.getParameter("isPIlinktoPR")) : false);
            requestParams.put("islinkPItoCN", (request.getParameter("islinkPItoCN") != null) ? Boolean.parseBoolean(request.getParameter("islinkPItoCN")) : false);
            String accid = request.getParameter(ACCID);
            if (contraentryflag && !StringUtil.isNullOrEmpty(accid)) {//Replace mapped vendorid for selected customer.
                HashMap<String, Object> requestParams1 = new HashMap<String, Object>();
                requestParams1.put("customeraccountid", accid);
                KwlReturnObject result = accCusVenMapDAOObj.getCustomerVendorMapping(requestParams1);
                Iterator itr = result.getEntityList().iterator();
                String newAccid = accid;
                while (itr.hasNext()) {
                    CustomerVendorMapping cvMapping = (CustomerVendorMapping) itr.next();
                    newAccid = cvMapping.getVendoraccountid().getID();
                }
                requestParams.put(ACCID, newAccid);
            }
            String salesPurchaseReturnflagStr = request.getParameter("salesPurchaseReturnflag");
            if (!StringUtil.isNullOrEmpty(salesPurchaseReturnflagStr)) {
                boolean salesPurchaseReturnflag = Boolean.parseBoolean(salesPurchaseReturnflagStr);
                requestParams.put("salesPurchaseReturnflag", salesPurchaseReturnflag);
            }
            boolean CashAndInvoice = Boolean.FALSE.parseBoolean(String.valueOf(request.getParameter("CashAndInvoice")));
            requestParams.put("CashAndInvoice", CashAndInvoice);
            if (request.getParameter("minimumAmountDue") != null) {
                requestParams.put("minimumAmountDue", Double.parseDouble(request.getParameter("minimumAmountDue").toString()));
            }
            /* ERP-3689
             * Parameter invoicesForNoteEditMode is used to skip the invoices which are allready linked in DN
             * Because such invoices are included at the last of this function
             */
            String invoicesForNoteEditMode = request.getParameter("invoicesForNoteEditMode");
            String noteId = request.getParameter("noteId");
            if (!StringUtil.isNullOrEmpty(noteId) && !StringUtil.isNullOrEmpty(invoicesForNoteEditMode)) {
                JSONObject DNInvoicesJsonObj = getDebitNoteGR(request);
                JSONArray DNInvoicesArray = DNInvoicesJsonObj.optJSONArray("data");
                String InvoiceIdsUsedInDn = "";
                for (int i = 0; i < DNInvoicesArray.length(); i++) {
                    JSONObject obj = DNInvoicesArray.optJSONObject(i);
                    InvoiceIdsUsedInDn += "'" + obj.optString("billid") + "'" + ",";
                }
                if (!StringUtil.isNullOrEmpty(InvoiceIdsUsedInDn)) {
                    InvoiceIdsUsedInDn = InvoiceIdsUsedInDn.substring(0, InvoiceIdsUsedInDn.length() - 1);
                }
                requestParams.put("invoiceIdToSkip", InvoiceIdsUsedInDn);
                request.setAttribute("invoiceIdToSkip", InvoiceIdsUsedInDn);// also Skip invoices for opening type which are used in DN for Edit case.
            }
            if (!StringUtil.isNullOrEmpty(request.getParameter("ignoreCashPurchase"))) { // to ingnore CashPurchase in case of linking to PurchaseInvoice in GR From. 
                requestParams.put("ignoreCashPurchase", Boolean.parseBoolean(request.getParameter("ignoreCashPurchase")));
            }
            JSONArray dataJArr = accGoodsReceiptServiceDAO.getGoodsReceiptListForLinking(requestParams);
            int count = dataJArr.length();

            JSONArray pagedJson = dataJArr;
            if (request.getParameter(START) != null) {
                start = request.getParameter(START);
                limit = request.getParameter(LIMIT);
            }
            if (!StringUtil.isNullOrEmpty(start) && !StringUtil.isNullOrEmpty(limit)) {
                pagedJson = StringUtil.getPagedJSON(pagedJson, Integer.parseInt(start), Integer.parseInt(limit));
            }

            jobj.put(DATA, pagedJson);
            jobj.put(COUNT, count);
            issuccess = true;
        } catch (SessionExpiredException | ServiceException ex) {
            msg = ex.getMessage();
            Logger.getLogger(accGoodsReceiptController.class.getName()).log(Level.SEVERE, null, ex);
        }  catch (Exception ex) {
            msg = "accGoodsReceiptController.getGoodsReceipts : " + ex.getMessage();
        } finally {
            try {
                jobj.put(SUCCESS, issuccess);
                jobj.put(MSG, msg);
            } catch (JSONException ex) {
                Logger.getLogger(accGoodsReceiptController.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return new ModelAndView(JSONVIEW, MODEL, jobj.toString());
    }
    public ModelAndView getGoodsReceipts(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        boolean issuccess = false;
        String msg = "",start=null,limit=null;
        try{

            HashMap<String, Object> requestParams = getGoodsReceiptMap(request);
            KwlReturnObject extracapresult = accountingHandlerDAOobj.getObject(ExtraCompanyPreferences.class.getName(), sessionHandlerImpl.getCompanyid(request));
            ExtraCompanyPreferences extraCompanyPreferences = (ExtraCompanyPreferences) extracapresult.getEntityList().get(0);
            //get module id which requested getPurchaseOrders
            if (request.getParameter("requestModuleid") != null && !StringUtil.isNullOrEmpty(request.getParameter("requestModuleid"))) {
                int requestModuleID=Integer.parseInt(request.getParameter("requestModuleid"));
                if(extraCompanyPreferences.isEnableLinkToSelWin()){
                    requestParams.put("requestModuleid", requestModuleID);    
                }
                if(extraCompanyPreferences.isEnableLinkToSelWin() && !Boolean.parseBoolean(request.getParameter("isGrid")) && (requestModuleID == Constants.Acc_Goods_Receipt_ModuleId || requestModuleID == Constants.Acc_Purchase_Return_ModuleId || requestModuleID==Constants.Acc_FixedAssets_GoodsReceipt_ModuleId)){
                     requestParams.put("start","0");
                     requestParams.put("limit", "10");
                     start="0";
                     limit= "10";
                }
            }
            boolean contraentryflag = request.getParameter("contraentryflag")!=null;
            requestParams.put("onlyMRPJOBWORKIN" ,(request.getParameter("onlyMRPJOBWORKIN") != null)? Boolean.parseBoolean(request.getParameter("onlyMRPJOBWORKIN")): false);
            requestParams.put("isPIlinktoPR" ,(request.getParameter("isPIlinktoPR") != null)? Boolean.parseBoolean(request.getParameter("isPIlinktoPR")): false);
            requestParams.put("islinkPItoCN" ,(request.getParameter("islinkPItoCN") != null)? Boolean.parseBoolean(request.getParameter("islinkPItoCN")): false);
            String accid = request.getParameter(ACCID);
            if(contraentryflag && !StringUtil.isNullOrEmpty(accid)) {//Replace mapped vendorid for selected customer.
                HashMap<String, Object> requestParams1 = new HashMap<String, Object>();
                requestParams1.put("customeraccountid", accid);
                KwlReturnObject result = accCusVenMapDAOObj.getCustomerVendorMapping(requestParams1);
                Iterator itr = result.getEntityList().iterator();
                String newAccid = accid;
                while (itr.hasNext()) {
                    CustomerVendorMapping cvMapping = (CustomerVendorMapping) itr.next();
                    newAccid = cvMapping.getVendoraccountid().getID();
                }
                requestParams.put(ACCID, newAccid);
            }
            String salesPurchaseReturnflagStr = request.getParameter("salesPurchaseReturnflag");
            boolean openingTrans = true;
            if(!StringUtil.isNullOrEmpty(salesPurchaseReturnflagStr)){
                boolean salesPurchaseReturnflag = Boolean.parseBoolean(salesPurchaseReturnflagStr);
                requestParams.put("salesPurchaseReturnflag", salesPurchaseReturnflag);
            }
            if(!StringUtil.isNullOrEmpty(request.getParameter("openingTrans"))){
               openingTrans = Boolean.parseBoolean(request.getParameter("openingTrans"));
            }
            
            boolean CashAndInvoice=Boolean.FALSE.parseBoolean(String.valueOf(request.getParameter("CashAndInvoice")));
            requestParams.put("CashAndInvoice", CashAndInvoice);
            if(request.getParameter("minimumAmountDue")!=null){
                requestParams.put("minimumAmountDue", Double.parseDouble(request.getParameter("minimumAmountDue").toString()));
            }
            /**
             * Get Linking flag CN/DN with overcharge/Undercharge
             */
            boolean isLinkOverUnderCharge= false;
            if(!StringUtil.isNullOrEmpty(request.getParameter("isLinkOverUnderCharge"))){
                isLinkOverUnderCharge = Boolean.parseBoolean(request.getParameter("isLinkOverUnderCharge"));
            }
            requestParams.put("isLinkOverUnderCharge", isLinkOverUnderCharge);
            /* ERP-3689
             * Parameter invoicesForNoteEditMode is used to skip the invoices which are allready linked in DN
             * Because such invoices are included at the last of this function
             */
            String invoicesForNoteEditMode= request.getParameter("invoicesForNoteEditMode");
            String noteId = request.getParameter("noteId");
            if(!StringUtil.isNullOrEmpty(noteId) && !StringUtil.isNullOrEmpty(invoicesForNoteEditMode)){
                JSONObject DNInvoicesJsonObj=getDebitNoteGR(request);
                JSONArray DNInvoicesArray = DNInvoicesJsonObj.optJSONArray("data");
                String InvoiceIdsUsedInDn="";
                for(int i=0 ; i<DNInvoicesArray.length();i++){
                    JSONObject obj = DNInvoicesArray.optJSONObject(i);
                    InvoiceIdsUsedInDn+="'"+obj.optString("billid")+"'"+",";
                }
                if (!StringUtil.isNullOrEmpty(InvoiceIdsUsedInDn)) {
                    InvoiceIdsUsedInDn = InvoiceIdsUsedInDn.substring(0, InvoiceIdsUsedInDn.length() - 1);
                }    
                requestParams.put("invoiceIdToSkip",InvoiceIdsUsedInDn);
                request.setAttribute("invoiceIdToSkip",InvoiceIdsUsedInDn);// also Skip invoices for opening type which are used in DN for Edit case.
            }
            requestParams.put("billids", request.getParameter("billids"));
            if (!StringUtil.isNullOrEmpty(request.getParameter("getRecordBasedOnJEDate"))) {
                requestParams.put("getRecordBasedOnJEDate", request.getParameter("getRecordBasedOnJEDate"));
            }
            
            KwlReturnObject result = accGoodsReceiptobj.getGoodsReceipts(requestParams);
            List list = result.getEntityList();

            JSONArray DataJArr = getGoodsReceiptsJson(requestParams, list);
           
            if (openingTrans) {
                /**
                 * Passing empty HashSet as we want to fetch all the opening
                 * invoices.invoiceList contains id of invoices which we do not
                 * want to put in response JSON. ERP-41122
                 */
                HashSet invoiceList = new HashSet();    
                getOpeningBalanceInvoicesJsonArray(request, DataJArr, invoiceList);
            }
            boolean fullPaidFlag = StringUtil.getBoolean(request.getParameter("fullPaidFlag"));
            if(fullPaidFlag) {
               JSONArray temp = new JSONArray();               
               for(int i = 0; i < DataJArr.length(); i++) {
                   if(DataJArr.getJSONObject(i).getDouble(AMOUNTDUE) == 0)
                       temp.put(DataJArr.getJSONObject(i));
               }
               DataJArr = temp;
            } else if(request.getParameter("minimumAmountDue")!=null){
               JSONArray temp = new JSONArray();
               double minimumAmountDue = Double.parseDouble(request.getParameter("minimumAmountDue").toString());
               for(int i = 0; i < DataJArr.length(); i++) {
                   if(DataJArr.getJSONObject(i).getDouble(AMOUNTDUE) >= minimumAmountDue)
                       temp.put(DataJArr.getJSONObject(i));
               }
               DataJArr = temp;
            }
            /*ERP-3689
             * Below code is written to add those invoices which are linked to some DN
             * This is done because, system is fetching those invoices having amount due =0
             * There fore above code fetches invoices with amount due>0 and below code fetches the invoice used in DN even thay have amount due =0
             * This is for EDIT case od DN
             */
            if(!StringUtil.isNullOrEmpty(noteId) && !StringUtil.isNullOrEmpty(invoicesForNoteEditMode)){
                JSONObject DNInvoicesJsonObj=getDebitNoteGR(request);
                JSONArray DNInvoicesArray = DNInvoicesJsonObj.optJSONArray("data");
                for(int i=0 ; i<DNInvoicesArray.length();i++){
                    JSONObject obj = DNInvoicesArray.optJSONObject(i);
                    DataJArr.put(obj);
                }
            }
            int count = DataJArr.length();

            JSONArray pagedJson = DataJArr;
            if( request.getParameter(START)!=null) {
             start = request.getParameter(START);
             limit = request.getParameter(LIMIT);
           }
            if (!StringUtil.isNullOrEmpty(start) && !StringUtil.isNullOrEmpty(limit)) {
                pagedJson = StringUtil.getPagedJSON(pagedJson, Integer.parseInt(start), Integer.parseInt(limit));
            }

            jobj.put( DATA,pagedJson);
            jobj.put( COUNT,count);
            issuccess = true;
        } catch (SessionExpiredException | ServiceException ex) {
            msg = ex.getMessage();
            Logger.getLogger(accGoodsReceiptController.class.getName()).log(Level.SEVERE, null, ex);
        }catch (Exception ex) {
            msg = "accGoodsReceiptController.getGoodsReceipts : "+ex.getMessage();
        } finally {
            try {
                jobj.put( SUCCESS,issuccess);
                jobj.put( MSG,msg);
            } catch (JSONException ex) {
                Logger.getLogger(accGoodsReceiptController.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return new ModelAndView(JSONVIEW,MODEL, jobj.toString());
    }
    public ModelAndView setExchangeRate(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        boolean issuccess = false;
        String msg = "";
        try{
            HashMap<String, Object> requestParams = getGoodsReceiptMap(request);
            boolean CashAndInvoice=Boolean.FALSE.parseBoolean(String.valueOf(request.getParameter("CashAndInvoice")));
            requestParams.put("CashAndInvoice", CashAndInvoice);
            KwlReturnObject result = accGoodsReceiptobj.getGoodsReceipts(requestParams);
            List list = result.getEntityList();
            setExchangeRateforGoodsReceipts(requestParams, list,request);           
            HashMap requestmap = AccInvoiceServiceHandler.getInvoiceRequestMap(request);  
            requestmap.put("CashAndInvoice",CashAndInvoice);
            KwlReturnObject resultinvoice = accInvoiceDAOobj.getInvoices(requestmap);
            list = resultinvoice.getEntityList();
            setExchangeRateforInvoices(request,list);                      
            msg="Exchange rate of outstanding records for selected currency  has been successfully updated.";
            issuccess = true;
        } catch (SessionExpiredException | ServiceException ex) {
            msg = ex.getMessage();
            Logger.getLogger(accGoodsReceiptController.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            msg = "accGoodsReceiptController.getGoodsReceipts : "+ex.getMessage();
        } finally {
            try {
                jobj.put( SUCCESS,issuccess);
                jobj.put( MSG,msg);
            } catch (JSONException ex) {
                Logger.getLogger(accGoodsReceiptController.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return new ModelAndView(JSONVIEW,MODEL, jobj.toString());
    }
    public void setExchangeRateforGoodsReceipts(HashMap<String, Object> request, List<GoodsReceipt> list,HttpServletRequest req) throws ServiceException {
        try {              
            List ll=null;
            double exchageRate=0;
            exchageRate= Double.parseDouble(req.getParameter("exchangeRate").toString());
            if(list!=null && !list.isEmpty()){
                for(GoodsReceipt gReceipt:list){                               
                    JournalEntry je = gReceipt.getJournalEntry();
                    double amountdue= 0;
                    if(gReceipt.isIsExpenseType()){
                        ll=accGoodsReceiptCommon.getExpGRAmountDue(request,gReceipt);
                        amountdue=(Double)ll.get(1);                      
                    }
                    else{
                        if(Constants.InvoiceAmountDueFlag) {
                            ll = accGoodsReceiptCommon.getInvoiceDiscountAmountInfo(request, gReceipt);
                            amountdue = (Double)ll.get(1); 
                        } else {
                            ll=accGoodsReceiptCommon.getGRAmountDue(request,gReceipt);
                            amountdue=(Double)ll.get(1);                     
                        }
                    }                  
                    if(gReceipt.isIsOpeningBalenceInvoice()==false && amountdue>0){
                         HashMap<String, Object> requestParams = new HashMap<String, Object>();
                         requestParams.put("jeid", je.getID());
                         requestParams.put("exchangerate",exchageRate);
                        accGoodsReceiptobj.updateExchnageforInvoices(requestParams);                        
                    }
                }
            }
        } catch (Exception ex) {
            throw ServiceException.FAILURE("accGoodsReceiptController.getGoodsReceiptsJson : " + ex.getMessage(), ex);
        }
    }
     public void setExchangeRateforInvoices(HttpServletRequest request, List<Invoice> list) throws SessionExpiredException, ServiceException {      
        try{
            HashMap requestParams = AccInvoiceServiceHandler.getInvoiceRequestMap(request);
            double exchageRate=0;
            exchageRate= Double.parseDouble(request.getParameter("exchangeRate").toString());                      
            for (Invoice invoice : list) {                         
                JournalEntry je = invoice.getJournalEntry();
                JournalEntryDetail d = invoice.getCustomerEntry();  
                double amountdue =0;
                if(Constants.InvoiceAmountDueFlag) {
                    List ll = accInvoiceCommon.getInvoiceDiscountAmountInfo(requestParams, invoice);
                    amountdue = (Double) ll.get(0);
                } else {
                    List ll = accInvoiceCommon.getAmountDue_Discount(requestParams,invoice);
                    amountdue = (Double) ll.get(0);
                }
                if(invoice.isIsOpeningBalenceInvoice()==false && amountdue>0){
                     HashMap<String, Object> requestParamsupdate = new HashMap<String, Object>();
                        requestParamsupdate.put("jeid", je.getID());
                        requestParamsupdate.put("exchangerate",exchageRate);
                    accGoodsReceiptobj.updateExchnageforInvoices(requestParamsupdate);                    
                }
                }                  
        } catch (Exception ex) {
            throw ServiceException.FAILURE("getInvoiceJson : "+ex.getMessage(), ex);
        }
    }
    public ModelAndView getDebitNoteGR(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        String msg = "";
        boolean issuccess = false;
        try {
            jobj = getDebitNoteGR(request);
            issuccess = true;
        } catch (ServiceException ex) {
            msg = ex.getMessage();
            Logger.getLogger(accGoodsReceiptController.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
        } catch (Exception ex) {
            msg = "accGoodsReceiptController.getDebitNoteGR:" + ex.getMessage();
            Logger.getLogger(accGoodsReceiptController.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
        } finally {
            try {
                jobj.put("success", issuccess);
                jobj.put("msg", msg);
            } catch (JSONException ex) {
                Logger.getLogger(accGoodsReceiptController.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
            }
        }
        return new ModelAndView("jsonView", "model", jobj.toString());
    }
   
    public ModelAndView getColoumnerPurchaseRegisterDetails(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        boolean issuccess = false;
        String msg = "";
        try {
            boolean export=false;
            jobj=getColoumnerPurchaseRegister(request,export);
            issuccess = true;
        } catch (Exception e) {
            msg = "" + e.getMessage();
            Logger.getLogger(accGoodsReceiptController.class.getName()).log(Level.SEVERE, null, e);
        } finally {
            try {
                jobj.put("success", issuccess);
                jobj.put("msg", msg);
            } catch (JSONException ex) {
                Logger.getLogger(accGoodsReceiptController.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return new ModelAndView("jsonView_ex", Constants.model, jobj.toString());
    }
    public JSONObject getColoumnerPurchaseRegister(HttpServletRequest request, boolean export) {
        JSONObject jobj = new JSONObject();
        JSONArray jArrRows = new JSONArray();
        String curr = "";
        try {
            JSONObject commData = new JSONObject();
            JSONArray jarrColumns = new JSONArray();
            JSONObject jMeta = new JSONObject();
            JSONObject jobjTemp = new JSONObject();
            String fileType = request.getParameter("filetype");
            JSONObject jobjGroupTotal = new JSONObject();
            JSONObject jobjTotal = new JSONObject();
            JSONArray jarrRecords = new JSONArray();

            jobjTemp.put("name", "date");
            jarrRecords.put(jobjTemp);
            jobjTemp = new JSONObject();
            jobjTemp.put("name", "invoiceno");
            jarrRecords.put(jobjTemp);
            jobjTemp = new JSONObject();
            jobjTemp.put("name", "documenttye");
            jarrRecords.put(jobjTemp);
            jobjTemp = new JSONObject();
            jobjTemp.put("name", "vendor");
            jarrRecords.put(jobjTemp);
            jobjTemp = new JSONObject();
            jobjTemp.put("name", "vattin");
            jarrRecords.put(jobjTemp);
            jobjTemp = new JSONObject();
            jobjTemp.put("name", "csttin");
            jarrRecords.put(jobjTemp);
            jobjTemp = new JSONObject();
            jobjTemp.put("name", "ecc");
            jarrRecords.put(jobjTemp);
            jobjTemp = new JSONObject();
            jobjTemp.put("name", "servicetaxregno");
            jarrRecords.put(jobjTemp);
            jobjTemp = new JSONObject();
            jobjTemp.put("name", "productname");
            jarrRecords.put(jobjTemp);
            jobjTemp = new JSONObject();
            jobjTemp.put("name", "quantitywithuom");
            jarrRecords.put(jobjTemp);
            jobjTemp = new JSONObject();
            jobjTemp.put("name", "rate");
            jarrRecords.put(jobjTemp);
            jobjTemp = new JSONObject();
            jobjTemp.put("name", "valueofitem");
            jarrRecords.put(jobjTemp);
            jobjTemp = new JSONObject();
            jobjTemp.put("name", "discount");
            jarrRecords.put(jobjTemp);
            jobjTemp = new JSONObject();
            jobjTemp.put("name", "amount");
            jarrRecords.put(jobjTemp);

            jobjTemp = new JSONObject();
            jobjTemp.put("header", "<span wtf:qtip='Date'>Date</span>");
            jobjTemp.put("dataIndex", "date");
            jobjTemp.put("pdfwidth", 150);
            jarrColumns.put(jobjTemp);
            
            jobjTemp = new JSONObject();
            jobjTemp.put("header", "<span wtf:qtip='Invoice No'>Invoice No</span>");
            jobjTemp.put("dataIndex", "invoiceno");
            jobjTemp.put("pdfwidth", 150);
            jarrColumns.put(jobjTemp);
            
            jobjTemp = new JSONObject();
            jobjTemp.put("header", "<span wtf:qtip='Document Type'>Document Type</span>");
            jobjTemp.put("dataIndex", "documenttye");
            jobjTemp.put("pdfwidth", 150);
            jarrColumns.put(jobjTemp);

            jobjTemp = new JSONObject();
            jobjTemp.put("header", "<span wtf:qtip='Vendor'>Vendor</span>");
            jobjTemp.put("dataIndex", "vendor");
            jobjTemp.put("pdfwidth", 150);
            jarrColumns.put(jobjTemp);

            jobjTemp = new JSONObject();
            jobjTemp.put("header", "<span wtf:qtip='VAT TIN'>VAT TIN</span>");
            jobjTemp.put("dataIndex", "vattin");
            jobjTemp.put("pdfwidth", 150);
            jarrColumns.put(jobjTemp);

            jobjTemp = new JSONObject();
            jobjTemp.put("header", "<span wtf:qtip='CST TIN'>CST TIN</span>");
            jobjTemp.put("dataIndex", "csttin");
            jobjTemp.put("pdfwidth", 150);
            jarrColumns.put(jobjTemp);

            jobjTemp = new JSONObject();
            jobjTemp.put("header","<span wtf:qtip='ECC'>ECC</span>");
            jobjTemp.put("dataIndex", "ecc");
            jobjTemp.put("pdfwidth", 150);
            jarrColumns.put(jobjTemp);

            jobjTemp = new JSONObject();
            jobjTemp.put("header", "<span wtf:qtip='Service Tax Reg No'>Service Tax Reg No</span>");
            jobjTemp.put("dataIndex", "servicetaxregno");
            jobjTemp.put("pdfwidth", 150);
            jarrColumns.put(jobjTemp);

            jobjTemp = new JSONObject();
            jobjTemp.put("header","<span wtf:qtip='Product Name'>Product Name</span>");
            jobjTemp.put("dataIndex", "productname");
            jobjTemp.put("pdfwidth", 150);
            jarrColumns.put(jobjTemp);

            jobjTemp = new JSONObject();
            jobjTemp.put("header", "<span wtf:qtip='Quantity with UOM'>Quantity with UOM</span>");
            jobjTemp.put("dataIndex", "quantitywithuom");
            jobjTemp.put("pdfwidth", 150);
            jarrColumns.put(jobjTemp);

            jobjTemp = new JSONObject();
            jobjTemp.put("header", "<span wtf:qtip='Per Unit Rate'>Per Unit Rate </span>");
            jobjTemp.put("dataIndex", "rate");
            jobjTemp.put("pdfwidth", 150);
            jarrColumns.put(jobjTemp);

            jobjTemp = new JSONObject();
            jobjTemp.put("header", "<span wtf:qtip='Value of Items '>Value of Items </span>");
            jobjTemp.put("dataIndex", "valueofitem");
            jobjTemp.put("pdfwidth", 150);
            jarrColumns.put(jobjTemp);

            String companyid = request.getParameter("companyid");
            HashMap<String, Object> requestParams = getGoodsReceiptMap(request);
            requestParams.put("companyid", companyid);
            requestParams.put(Constants.REQ_startdate, !StringUtil.isNullOrEmpty(request.getParameter("fromdate"))? request.getParameter("fromdate") : request.getParameter("startDate"));
            requestParams.put(Constants.REQ_enddate, !StringUtil.isNullOrEmpty(request.getParameter("todate"))? request.getParameter("todate") : request.getParameter("endDate"));
            String start=request.getParameter("start");
            String limit=request.getParameter("limit");
            
            if(requestParams.containsKey("start")){
                requestParams.remove("start");
            }
            if(requestParams.containsKey("limit")){
                requestParams.remove("limit");
            }
            requestParams.put("includeAllRec", true);
            requestParams.put("CashAndInvoice", true);
            KwlReturnObject result = accGoodsReceiptobj.getGoodsReceiptsMerged(requestParams);
            JSONArray DataJArr = new JSONArray();
            List list1 = result.getEntityList();
            double totalInvoiceAmt=0;
            DataJArr = accGoodsReceiptServiceHandler.getGoodsReceiptsJsonMerged(requestParams, list1, DataJArr, accountingHandlerDAOobj, accCurrencyDAOobj, accGoodsReceiptobj, accAccountDAOobj, accGoodsReceiptCommon, accTaxObj);
            int totalCount=DataJArr.length();
            result = accGoodsReceiptobj.getGoodsReceiptsMerged(requestParams);
            DataJArr = new JSONArray();
            list1 = result.getEntityList();
            DataJArr = accGoodsReceiptServiceHandler.getGoodsReceiptsJsonMerged(requestParams, list1, DataJArr, accountingHandlerDAOobj, accCurrencyDAOobj, accGoodsReceiptobj, accAccountDAOobj, accGoodsReceiptCommon, accTaxObj);
            
            KwlReturnObject curresult = accountingHandlerDAOobj.getObject(KWLCurrency.class.getName(), sessionHandlerImpl.getCurrencyID(request));
            KWLCurrency currency = (KWLCurrency) curresult.getEntityList().get(0);
            String currsymb = "";
            currsymb = currency.getHtmlcode() != null ? currency.getHtmlcode() : "";
            curr = currency.getSymbol() != null ? currency.getSymbol() : "";
            for (int i = 0; i < DataJArr.length(); i++) {
                jobjGroupTotal = new JSONObject();
                JSONObject finalAmountJson=new JSONObject();
                Double invoiceAmt=0d;
                JSONObject temp = new JSONObject();
                temp = DataJArr.getJSONObject(i);
                
                String billid = jobj.optString("billid", temp.getString("billid"));
                String[] invoices = {};
                JSONArray invTerm = new JSONArray(temp.getString("termdetails"));
                for (int invtermcnt = 0; invtermcnt < invTerm.length(); invtermcnt++) {
                    JSONObject invTermJson=invTerm.getJSONObject(invtermcnt);
                    String GlobalTermName = invTermJson.getString("term");
                        GlobalTermName = GlobalTermName.replaceAll("%", " Per");
                        GlobalTermName = GlobalTermName.replaceAll("\\.", "DOT");
                        boolean recordAlreadyexist = false;
                        for (int m = 0; m < jarrRecords.length(); m++) {
                            String testString=jarrRecords.getJSONObject(m).getString("name");
                            if (testString.replace(".", "").equalsIgnoreCase("invTerm"+invTermJson.getString("term").replace(".", ""))) {
                                recordAlreadyexist = true;
                                break;
                            }
                        }
                        if (!recordAlreadyexist) {
                            JSONObject jColumn = new JSONObject();
                            jColumn.put("header", "<span wtf:qtip='"+GlobalTermName.replaceAll("DOT", ".")+"'>"+GlobalTermName.replaceAll("DOT", ".")+"</span>");
                            jColumn.put("dataIndex","invTerm"+GlobalTermName);
                            jColumn.put("pdfwidth", 150);
                            jarrColumns.put(jColumn);

                            JSONObject jRec = new JSONObject();
                            jRec.put("name","invTerm"+GlobalTermName);
                            jarrRecords.put(jRec);
                        }
                        invoiceAmt+=Double.parseDouble(invTermJson.getString("termamount"));
                        finalAmountJson.put("invTerm"+GlobalTermName, Double.parseDouble(invTermJson.getString("termamount")));
                        jobjGroupTotal.put("invTerm"+GlobalTermName, Double.parseDouble(invTermJson.getString("termamount")));
                        jobjTotal.put("invTerm"+GlobalTermName,(jobjTotal.opt("invTerm"+GlobalTermName)!= null? (Double)jobjTotal.opt("invTerm"+GlobalTermName):0) +Double.parseDouble(invTermJson.getString("termamount")) );
                        SimpleDateFormat df = new SimpleDateFormat("dd/MM/yyyy");
                        String date = df.format(authHandler.getGlobalDateFormat().parse(temp.getString("date")));
                        finalAmountJson.put("date", date);
                        finalAmountJson.put("invoiceno", temp.getString("billno"));
                        finalAmountJson.put("documenttye", "Purchase");
                        finalAmountJson.put("vendor", temp.getString("personname"));
                        finalAmountJson.put("vattin", temp.has("vvattin")?temp.getString("vvattin"):"");
                        finalAmountJson.put("csttin", temp.has("vcsttin")?temp.getString("vcsttin"):"");
                        finalAmountJson.put("ecc", temp.has("veccno")?temp.getString("veccno"):"");
                        finalAmountJson.put("servicetaxregno", temp.has("vservicetaxregno")?temp.getString("vservicetaxregno"):"");
                }
                invoices = billid.split(",");
                JSONArray DataRowsArr = accGoodsReceiptCommon.getGoodsReceiptRows(request, invoices);
                for (int k = 0; k < DataRowsArr.length(); k++) {
                    
                    jobjTemp = new JSONObject();
                    SimpleDateFormat df = new SimpleDateFormat("dd/MM/yyyy");
                    String date = df.format(authHandler.getGlobalDateFormat().parse(temp.getString("date")));
                    jobjTemp.put("date", date);
                    jobjTemp.put("invoiceno", temp.getString("billno"));
                    jobjTemp.put("documenttye", "Purchase");
                    jobjTemp.put("vendor", temp.getString("personname"));
                    jobjTemp.put("vattin", temp.has("vvattin")?temp.getString("vvattin"):"");
                    jobjTemp.put("csttin", temp.has("vcsttin")?temp.getString("vcsttin"):"");
                    jobjTemp.put("ecc", temp.has("veccno")?temp.getString("veccno"):"");
                    jobjTemp.put("servicetaxregno", temp.has("vservicetaxregno")?temp.getString("vservicetaxregno"):"");

                    JSONObject jobRow = new JSONObject();
                    jobRow = DataRowsArr.getJSONObject(k);
                    if(!jobRow.has("productname") || !jobRow.has("quantity")){
                        break;
                    }
                    invoiceAmt+=Double.parseDouble(jobRow.getString("amount"))+Double.parseDouble(jobRow.getString("taxamount"))+Double.parseDouble(jobRow.getString("OtherTermNonTaxableAmount"));
                    jobjTemp.put("productname", jobRow.getString("productname"));
                    jobjTemp.put("quantitywithuom", jobRow.getString("quantity") + " " + jobRow.getString("uomname"));
                    jobjTemp.put("rate", jobRow.getString("rate"));
                    double discount=0d;
                    discount=Double.parseDouble(jobRow.getString("rate"))/100*Double.parseDouble(jobRow.getString("prdiscount"))* Double.parseDouble(jobRow.getString("quantity"));
                    jobjTemp.put("discount", discount);
                    jobjTemp.put("valueofitem", Double.parseDouble(jobRow.getString("rate")) * Double.parseDouble(jobRow.getString("quantity")));
                    JSONArray lineTermArray = new JSONArray(jobRow.getString("LineTermdetails"));
                    for (int count = 0; count < lineTermArray.length(); count++) {

                        JSONObject jtemp = lineTermArray.getJSONObject(count);
                        String LineLevelTermName = jtemp.getString("term");
                        LineLevelTermName = LineLevelTermName.replaceAll("%", " Per");
                        LineLevelTermName = LineLevelTermName.replaceAll("\\.", "DOT");
                        boolean recordAlreadyexist = false;
                        for (int m = 0; m < jarrRecords.length(); m++) {
                            String testString=jarrRecords.getJSONObject(m).getString("name");
                            if (testString.replace(".", "").equalsIgnoreCase(LineLevelTermName.replace(".", ""))) {
                                recordAlreadyexist = true;
                                break;
                            }
                        }
                        if (!recordAlreadyexist) {
                            JSONObject jColumn = new JSONObject();
                            jColumn.put("header", "<span wtf:qtip='"+LineLevelTermName.replaceAll("DOT", ".") +"'>"+LineLevelTermName.replaceAll("DOT", ".")+"</span>");
                            jColumn.put("dataIndex",LineLevelTermName);
                            jColumn.put("pdfwidth", 150);
                            jarrColumns.put(jColumn);

                            JSONObject jRec = new JSONObject();
                            jRec.put("name",LineLevelTermName);
                            jarrRecords.put(jRec);
                        }
                        
                        if(export && StringUtil.equal(fileType, "xls")){
                            Double LineLevelTermValue = 0.0;
                            if(jobjGroupTotal.opt("LineLevelTermName")!= null){
                                LineLevelTermValue = (Double)jobjGroupTotal.get(LineLevelTermName);
                                LineLevelTermValue += (!StringUtil.isNullOrEmpty(jtemp.getString("termamount")))?Double.parseDouble(jtemp.getString("termamount")):Double.parseDouble("0");
                            }else{
                                LineLevelTermValue = (!StringUtil.isNullOrEmpty(jtemp.getString("termamount")))?Double.parseDouble(jtemp.getString("termamount")):Double.parseDouble("0");
                            }
                            jobjGroupTotal.put(LineLevelTermName,LineLevelTermValue);
                            jobjTotal.put(LineLevelTermName,(jobjTotal.opt(LineLevelTermName)!= null? (Double)jobjTotal.opt(LineLevelTermName):0) +LineLevelTermValue );
                        }
                        jobjTemp.put(LineLevelTermName, (!StringUtil.isNullOrEmpty(jtemp.getString("termamount")))?Double.parseDouble(jtemp.getString("termamount")):Double.parseDouble("0"));
                    }
                    if(export && StringUtil.equal(fileType, "xls")){
                        jobjGroupTotal.put("discount",(jobjGroupTotal.opt("discount")!= null? (Double)jobjGroupTotal.opt("discount"):0) + discount);
                        jobjGroupTotal.put("valueofitem",(jobjGroupTotal.opt("valueofitem")!= null? (Double)jobjGroupTotal.opt("valueofitem"):0) + Double.parseDouble(jobRow.getString("rate")) * Double.parseDouble(jobRow.getString("quantity")));
                        jobjGroupTotal.put("amount",(jobjGroupTotal.opt("amount")!= null? (Double)jobjGroupTotal.opt("amount"):0) +invoiceAmt );
                        jobjTotal.put("discount",(jobjTotal.opt("discount")!= null? (Double)jobjTotal.opt("discount"):0) + discount);
                        jobjTotal.put("valueofitem",(jobjTotal.opt("valueofitem")!= null? (Double)jobjTotal.opt("valueofitem"):0) + Double.parseDouble(jobRow.getString("rate")) * Double.parseDouble(jobRow.getString("quantity")));
                        jobjTotal.put("amount",(jobjTotal.opt("amount")!= null? (Double)jobjTotal.opt("amount"):0) +invoiceAmt );
                    }
                    jobjTemp.put("amount", invoiceAmt);
                    jArrRows.put(jobjTemp);
                }
                totalInvoiceAmt += invoiceAmt;
                if(finalAmountJson.length() != 0){
                    jArrRows.put(finalAmountJson);
                }
                if(export && StringUtil.equal(fileType, "xls")){
                    jobjGroupTotal.put("rate","Total");
                    jArrRows.put(jobjGroupTotal);
                }

            }
            if(export && StringUtil.equal(fileType, "xls")){
                jobjTotal.put("rate","Total");
                jArrRows.put(jobjTotal);
            }
            jobjTemp = new JSONObject();
            jobjTemp.put("header", "<span wtf:qtip='Discount Received '>Discount Received </span>");
            jobjTemp.put("dataIndex", "discount");
            jobjTemp.put("pdfwidth", 150);
            jarrColumns.put(jobjTemp);
            
            jobjTemp = new JSONObject();
            jobjTemp.put("header","<span wtf:qtip='Gross Total (Invoice Amount ) '>Gross Total (Invoice Amount ) </span>");
            jobjTemp.put("dataIndex", "amount");
            jobjTemp.put("pdfwidth", 150);
            jarrColumns.put(jobjTemp);
            if (!export) { // ERP-29426
                totalCount = jArrRows.length();
                if (!StringUtil.isNullOrEmpty(start) && !StringUtil.isNullOrEmpty(limit)) {
                    jArrRows = StringUtil.getPagedJSON(jArrRows, Integer.parseInt(start), Integer.parseInt(limit));
                }
            }
            commData.put("success", true);
            commData.put("totalInvoiceAmt", totalInvoiceAmt);
            commData.put("currSymb", curr+". ");
            commData.put("coldata", jArrRows);
            commData.put("columns", jarrColumns);
            jMeta.put("totalProperty", "totalCount");
            jMeta.put("root", "coldata");
            commData.put("totalCount", totalCount);
            jMeta.put("fields", jarrRecords);
            commData.put("metaData", jMeta);
            jobj.put("valid", true);
            
            if (export) {
                jobj.put("data", jArrRows);
            } else {
                jobj.put("data", commData);
            }
        } catch (Exception ex) {
            Logger.getLogger(accGoodsReceiptController.class.getName()).log(Level.SEVERE, null, ex);
        }
        return jobj;
    }
    public ModelAndView exportPurchaseRegisterXls(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        String view = "jsonView_ex";
        try{
            boolean export=true;
            jobj=getColoumnerPurchaseRegister(request,export);
            String fileType = request.getParameter("filetype");
            if (StringUtil.equal(fileType, "print")) {
                String GenerateDate = authHandler.getDateFormatter(request).format(new Date());
                jobj.put("GenerateDate", GenerateDate);
                view = "jsonView-empty";
            }
            exportDaoObj.processRequest(request, response, jobj);
        } catch (SessionExpiredException ex) {
            Logger.getLogger(accGoodsReceiptController.class.getName()).log(Level.SEVERE, null, ex);
        } catch(Exception ex) {
            Logger.getLogger(accGoodsReceiptController.class.getName()).log(Level.SEVERE, null, ex);
        }
        return new ModelAndView(view, "model", jobj.toString());
    }
    
    public JSONObject getDebitNoteGR(HttpServletRequest request) throws ServiceException, SessionExpiredException {
        JSONObject jobj = new JSONObject();
        JSONArray jArray = new JSONArray();
        String companyid = sessionHandlerImpl.getCompanyid(request);
        HashMap<String, Object> requestParams = AccountingManager.getGlobalParams(request);
        DateFormat df = authHandler.getDateOnlyFormat();
        try {
            String dNoteId = request.getParameter("noteId");
            KwlReturnObject result = accountingHandlerDAOobj.getObject(DebitNote.class.getName(), dNoteId);
            DebitNote dn = (DebitNote) result.getEntityList().get(0);

            if (dn != null) {
                Set<DebitNoteDetail> rows = dn.getRows();
                Set<DebitNoteDetail> Debitnotedetail = new TreeSet<DebitNoteDetail>(new SortDebitNoteDetail());
                Debitnotedetail.addAll(rows);
                
                //Get custom fields/dimensions FieldMap
                HashMap<String, String> customFieldMap = new HashMap<>();
                HashMap<String, String> customDateFieldMap = new HashMap<>();
                HashMap<String, Object> fieldrequestParams = new HashMap();
                fieldrequestParams.put(Constants.filter_names, Arrays.asList(Constants.companyid, Constants.moduleid));
                fieldrequestParams.put(Constants.filter_values, Arrays.asList(companyid, Constants.Acc_Vendor_Invoice_ModuleId));
                HashMap<String, String> replaceFieldMap = new HashMap<>();
                HashMap<String, Integer> FieldMap = accAccountDAOobj.getFieldParamsCustomMap(fieldrequestParams, replaceFieldMap, customFieldMap, customDateFieldMap);
                
                for (DebitNoteDetail detail : Debitnotedetail) {
                    JSONObject obj = new JSONObject();
                    if (detail.getGoodsReceipt() != null) {
                        obj.put("linkdetailid", detail.getID());

                        /*
                         * Checked Null for Invoice linked with Debit Note at
                         * the time of edit Debit Note which was created without
                         * selection any Invoice
                         */

                        obj.put("billid", detail.getGoodsReceipt() != null ? detail.getGoodsReceipt().getID() : "");
                        obj.put("billno", detail.getGoodsReceipt() != null ? detail.getGoodsReceipt().getGoodsReceiptNumber() : "");

                        if (detail.getGoodsReceipt() != null) {
                            obj.put("taxamount", detail.getGoodsReceipt().getTaxEntry() == null ? 0 : detail.getGoodsReceipt().getTaxEntry().getAmount());
                        }
                         obj.put(Constants.SUPPLIERINVOICENO,detail.getGoodsReceipt().getSupplierInvoiceNo()!= null ? detail.getGoodsReceipt().getSupplierInvoiceNo(): "");
                        Discount disc = detail.getDiscount();
                        double exchangeratefortransaction = detail.getExchangeRateForTransaction();
                        double invoiceReturnedAmt = 0d;
                        if (disc != null) {
                            obj.put("invamount", authHandler.round(disc.getDiscountValue(),companyid));
                            invoiceReturnedAmt = disc.getAmountinInvCurrency();
                        } else {
                            obj.put("invamount", 0);
                        }

                        double amountdue = 0;
                        double amountDueOriginal = 0;
                        if (detail.getGoodsReceipt() != null && detail.getGoodsReceipt().isIsOpeningBalenceInvoice() && !detail.getGoodsReceipt().isNormalInvoice()) {
                            amountdue = detail.getGoodsReceipt().getOpeningBalanceAmountDue();
                            amountDueOriginal = detail.getGoodsReceipt().getOriginalOpeningBalanceAmount();
                            obj.put("amount", detail.getGoodsReceipt().getOriginalOpeningBalanceAmount());
                        } else {
                            if (Constants.InvoiceAmountDueFlag && detail.getGoodsReceipt() != null) {
                                List ll = accGoodsReceiptCommon.getInvoiceDiscountAmountInfo(requestParams, detail.getGoodsReceipt());
                                amountdue = (Double) ll.get(5);
                            } else {
                                if (detail.getGoodsReceipt() != null) {
                                    List ll = accGoodsReceiptCommon.getGRAmountDue(requestParams, detail.getGoodsReceipt());
                                    amountdue = (Double) ll.get(5);
                                }

                            }
                            amountDueOriginal = detail.getGoodsReceipt() != null ? detail.getGoodsReceipt().getVendorEntry().getAmount() : 0;
                            obj.put("amount", detail.getGoodsReceipt() != null ? detail.getGoodsReceipt().getVendorEntry().getAmount() : 0);
                        }


                        if (dn.getApprovestatuslevel() == 11) {//pending approval DN : invoices used in such dn amount due has not knocked off. so no need to add invoiceReturnedAmt
                            amountdue = amountdue + invoiceReturnedAmt;// added invoiceReturnedAmt to show original value which was at time of creation.
                        }
                        amountdue = amountdue * exchangeratefortransaction;
                        obj.put("amountdue", authHandler.round(amountdue, companyid));
                        obj.put("amountDueOriginal", authHandler.round(amountDueOriginal, companyid));
                        obj.put("exchangeratefortransaction", exchangeratefortransaction);
                        obj.put("currencysymbol", detail.getGoodsReceipt() != null ? detail.getGoodsReceipt().getCurrency().getSymbol() : "");
                        obj.put("linkingdate", detail.getGrLinkDate()!=null?df.format(detail.getGrLinkDate()):"");  //date of delivery order
                        obj.put("currencysymbolpayment", dn.getCurrency().getSymbol());
                        if (detail.getGoodsReceipt() != null) {
                            obj.put("invoicedate", df.format(detail.getGoodsReceipt().getCreationDate()));
                            //In Debite Note Js Side Rec Name is Date . 
                            obj.put("date", df.format(detail.getGoodsReceipt().getCreationDate()));
                            /**
                             * Passing JE date in response for validating date on JS Side ERM-655
                             */
                            obj.put("jeDate", detail.getGoodsReceipt().isIsOpeningBalenceInvoice() ? df.format(detail.getGoodsReceipt().getCreationDate()) : df.format(detail.getGoodsReceipt().getJournalEntry().getEntryDate()));
                        }
                        if (detail.getDiscount() != null) {
                            obj.put("typeFigure", detail.getDiscount().getTypeFigure());    // Figure calculated resctive to invoice amount due
                            obj.put("typeOfFigure", detail.getDiscount().getTypeOfFigure()); // Criteria of calculation for amount - Flat or Percentage
                        }

                        //Get Normal Goods Receipt Custom Data only
                        KwlReturnObject custumObjresult = null;
                        if (detail.getGoodsReceipt().isNormalInvoice()) {
                            Map<String, Object> variableMap = new HashMap<>();
                            custumObjresult = accountingHandlerDAOobj.getObject(AccJECustomData.class.getName(), detail.getGoodsReceipt().getJournalEntry().getID());
                            replaceFieldMap = new HashMap<>();
                            if (custumObjresult != null && custumObjresult.getEntityList().size() > 0) {
                                AccJECustomData jeDetailCustom = (AccJECustomData) custumObjresult.getEntityList().get(0);
                                if (jeDetailCustom != null) {
                                    AccountingManager.setCustomColumnValues(jeDetailCustom, FieldMap, replaceFieldMap, variableMap);
                                    JSONObject params = new JSONObject();
                                    fieldDataManagercntrl.addCustomData(variableMap, customFieldMap, customDateFieldMap, obj, params);
                                }
                            }
                        }
                        jArray.put(obj);
                    }
                }
            }
            jobj.put("data", jArray);
        } catch (JSONException ex) {
            Logger.getLogger(accGoodsReceiptController.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
        }
        return jobj;
    }
    
    public ModelAndView getClaimedBadDebtInvoices(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        boolean issuccess = false;
        String msg = "";
        try {
            JSONArray DataJArr = accGoodsReceiptServiceDAO.getBadDebtClaimedInvoicesJson(request);
            jobj.put("data", DataJArr);
            jobj.put("count", DataJArr.length());
        } catch (Exception ex) {
            msg = "" + ex.getMessage();
            Logger.getLogger(accGoodsReceiptControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                jobj.put("success", issuccess);
                jobj.put("msg", msg);
            } catch (JSONException ex) {
                Logger.getLogger(accGoodsReceiptControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return new ModelAndView("jsonView", "model", jobj.toString());
    }
    
    public ModelAndView exportClaimedBadDebtInvoice(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        String view = "jsonView_ex";
        try {
            JSONArray DataJArr = accGoodsReceiptServiceDAO.getBadDebtClaimedInvoicesJson(request);

            jobj.put("data", DataJArr);
            jobj.put("totalCount", DataJArr.length());

            String fileType = request.getParameter("filetype");
            if (StringUtil.equal(fileType, "print")) {
                String GenerateDate = authHandler.getDateOnlyFormat().format(new Date());
                jobj.put("GenerateDate", GenerateDate);
                view = "jsonView-empty";
            }
            exportDaoObj.processRequest(request, response, jobj);
        } catch (SessionExpiredException ex) {
            Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
        } catch (Exception ex) {
            Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
        }
        return new ModelAndView(view, "model", jobj.toString());
    }
    
    public ModelAndView getRecoveredBadDebtInvoices(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        boolean issuccess = false;
        String msg = "";
        try {
            JSONArray DataJArr = accGoodsReceiptServiceDAO.getRecoveredBadDebtInvoices(request);
            jobj.put("data", DataJArr);
            jobj.put("count", DataJArr.length());
        } catch (Exception ex) {
            msg = "" + ex.getMessage();
            Logger.getLogger(accGoodsReceiptControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                jobj.put("success", issuccess);
                jobj.put("msg", msg);
            } catch (JSONException ex) {
                Logger.getLogger(accGoodsReceiptControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return new ModelAndView("jsonView", "model", jobj.toString());
    }
    
    public ModelAndView exportRecoveredBadDebtInvoices(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        String view = "jsonView_ex";
        try {

            boolean isForExport = true;
            JSONArray DataJArr = accGoodsReceiptServiceDAO.getRecoveredBadDebtInvoices(request);

            jobj.put("data", DataJArr);
            jobj.put("totalCount", DataJArr.length());

            String fileType = request.getParameter("filetype");
            if (StringUtil.equal(fileType, "print")) {
                String GenerateDate = authHandler.getDateOnlyFormat().format(new Date());
                jobj.put("GenerateDate", GenerateDate);
                view = "jsonView-empty";
            }
            exportDaoObj.processRequest(request, response, jobj);
        } catch (SessionExpiredException ex) {
            Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
        } catch (Exception ex) {
            Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
        }
        return new ModelAndView(view, "model", jobj.toString());
    }
    public ModelAndView updateGoodsReceiptTransactionDetailsInJE(HttpServletRequest request, HttpServletResponse response) throws SessionExpiredException, ServiceException {
        DefaultTransactionDefinition def = new DefaultTransactionDefinition();
        def.setName("Invoice_Tx");
        def.setPropagationBehavior(TransactionDefinition.PROPAGATION_REQUIRED);
        TransactionStatus status = txnManager.getTransaction(def);
        JSONObject jobj = new JSONObject();
        int jeupdatedcount = 0;
        boolean issuccess = false;
        try {
            HashMap<String, Object> tempParams = new HashMap<String, Object>();
            String subdomain="";
            String[] subdomainArray = null;
            if (!StringUtil.isNullOrEmpty(request.getParameter("subdomain"))) {
                subdomain = (String) request.getParameter("subdomain");
                subdomainArray = subdomain.split(",");
            }
            KwlReturnObject company = accCompanyPreferencesObj.getCompanyList(subdomainArray);
            Iterator ctr = company.getEntityList().iterator();
            while (ctr.hasNext()) {
                String companyid = ctr.next().toString();
                HashMap<String, Object> requestParams = new HashMap<String, Object>();
                requestParams.put("companyid", companyid);
                KwlReturnObject result = accGoodsReceiptobj.getGoodsReceiptsAndJE(requestParams);
                Iterator itr = result.getEntityList().iterator();
                while (itr.hasNext()) {
                    GoodsReceipt goodsReceipt = (GoodsReceipt) itr.next();
                    tempParams = new HashMap<String, Object>();
                    int moduleid = 0;
                    if (goodsReceipt.isFixedAssetInvoice()) {
                        moduleid = Constants.Acc_FixedAssets_PurchaseInvoice_ModuleId;
                    } else if (goodsReceipt.isCashtransaction()) {
                        moduleid = Constants.Acc_Cash_Purchase_ModuleId;
                    } else if (goodsReceipt.isIsconsignment()) {
                        moduleid = Constants.Acc_Consignment_GoodsReceipt_ModuleId;
                    } else {
                        moduleid = Constants.Acc_Vendor_Invoice_ModuleId;
                    }
                    tempParams.put("transactionID", goodsReceipt.getID());
                    tempParams.put("moduleID", moduleid);
                    tempParams.put("journalEntry", goodsReceipt.getJournalEntry());
                    boolean isUpdated = accJournalEntryobj.updateJEDetails(tempParams);
                    if (isUpdated) {
                        jeupdatedcount++;
                    }
                }
            }
            txnManager.commit(status);
            issuccess = true;
        } catch (Exception ex) {
            Logger.getLogger(accGoodsReceiptController.class.getName()).log(Level.SEVERE, null, ex);
            txnManager.rollback(status);
        } finally {
            try {
                jobj.put("success", issuccess);
                jobj.put("Updated JE Records ", jeupdatedcount);
            } catch (JSONException ex) {
                Logger.getLogger(accGoodsReceiptController.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return new ModelAndView("jsonView", "model", jobj.toString());
    }

    public ModelAndView getGoodsReceiptsMerged(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        JSONArray DataJArr = new JSONArray();
        boolean issuccess = false;
        String Searchjson = "";
        String invoiceSearchJson = "";
        String receiptSearchJson = "";
        String cnSearchJson = "";
        String dnSearchJson = "";
        String makePaymentSearchJson = "";
        boolean isAdvanceSearch = false;
        JSONObject totalAmountJSON = new JSONObject();
        String filterConjuctionCriteria = com.krawler.common.util.Constants.and;
        String msg = "";
        JSONObject paramObj = new JSONObject();
        try{
            paramObj = StringUtil.convertRequestToJsonObject(request);
            HashMap<String, Object> requestParams = getGoodsReceiptMap(request);
            boolean isExportReport = !StringUtil.isNullOrEmpty(request.getParameter("isExportReport")) ? Boolean.parseBoolean(request.getParameter("isExportReport")):false;
            boolean ispendingAproval = request.getParameter("ispendingapproval")!=null?Boolean.parseBoolean(request.getParameter("ispendingapproval")):false;
            boolean consolidateFlag = request.getParameter("consolidateFlag")!=null?Boolean.parseBoolean(request.getParameter("consolidateFlag")):false;            
            boolean ispendingpayment = request.getParameter("ispendingpayment")!=null?Boolean.parseBoolean(request.getParameter("ispendingpayment")):false;            
            String[] companyids = (consolidateFlag && request.getParameter("companyids")!=null)?request.getParameter("companyids").split(","):sessionHandlerImpl.getCompanyid(request).split(",");
            String gcurrencyid = (consolidateFlag && request.getParameter("gcurrencyid")!=null)?request.getParameter("gcurrencyid"):sessionHandlerImpl.getCurrencyID(request);            
            int datefilter = StringUtil.getInteger(request.getParameter("datefilter"));// 0 = Invoice Due date OR 1 = Invoice date
            boolean report = request.getParameter("report")!=null?Boolean.parseBoolean(request.getParameter("report")):false;
            boolean isAged = request.getParameter("isAged")!=null?Boolean.parseBoolean(request.getParameter("isAged")):false;
            boolean isDraft = request.getParameter("isDraft")!=null?Boolean.parseBoolean(request.getParameter("isDraft")):false;
            int isgroupcomboDate = request.getParameter("groupcombo")!=null?Integer.parseInt(request.getParameter("groupcombo")):0;
            int invoiceLinkedWithGRNStatus = request.getParameter("invoiceLinkedWithGRNStatus")!=null?Integer.parseInt(request.getParameter("invoiceLinkedWithGRNStatus")):0;//invoiceLinkedWithGRNStatus is non zero when we apply linking filter in Invoice
            boolean isConsignment = request.getParameter("isConsignment")!=null?Boolean.parseBoolean(request.getParameter("isConsignment")):false;
            boolean isMRPJOBWORKIN = request.getParameter("isMRPJOBWORKIN")!=null?Boolean.parseBoolean(request.getParameter("isMRPJOBWORKIN")):false;            
            boolean requestfromdimensionbasedreport = request.getParameter("requestfromdimensionbasedreport")!=null?Boolean.parseBoolean(request.getParameter("requestfromdimensionbasedreport")):false;
            boolean includeAllRec = request.getParameter("includeAllRec")!=null?Boolean.parseBoolean(request.getParameter("includeAllRec")):false;
            boolean isCallForLandedCostInvoices = request.getParameter("isCallForLandedCostInvoices")!=null?Boolean.parseBoolean(request.getParameter("isCallForLandedCostInvoices")):false;
            requestParams.put("includeAllRec", includeAllRec);
            requestParams.put("requestfromdimensionbasedreport", requestfromdimensionbasedreport);
            requestParams.put("isCallForLandedCostInvoices", isCallForLandedCostInvoices);
            requestParams.put("datefilter", datefilter);
            requestParams.put("report", report);
            requestParams.put("isConsignment", isConsignment);
            requestParams.put("isDraft", isDraft);
            requestParams.put("isMRPJOBWORKIN", isMRPJOBWORKIN);
            requestParams.put("ispendingAproval", ispendingAproval);
            requestParams.put("onlyInventoryPI", request.getParameter("onlyInventoryPI"));
            requestParams.put("onlyExpensePI", request.getParameter("onlyExpensePI"));
            boolean consignmentNoForGr=Boolean.parseBoolean(request.getParameter("consignmentNoForGr"));
            boolean isInvoice=Boolean.parseBoolean(request.getParameter("isInvoice"));
            if(request.getParameter("getRepeateInvoice")!=null){
                requestParams.put("getRepeateInvoice",request.getParameter("getRepeateInvoice"));
            }
             ExtraCompanyPreferences extraPref = (ExtraCompanyPreferences) kwlCommonTablesDAOObj.getClassObject("com.krawler.common.admin.ExtraCompanyPreferences", sessionHandlerImpl.getCompanyid(request));
            if (extraPref != null && extraPref.isEnablesalespersonAgentFlow()) {
                int permCode = sessionHandlerImpl.getPerms(request, Constants.VENDOR_PERMCODE);
                if (!((permCode & Constants.VENDOR_VIEWALL_PERMCODE) == Constants.VENDOR_VIEWALL_PERMCODE)) {
                    /*
                     * when (permCode & Constants.VENDOR_VIEWALL_PERMCODE) == Constants.VENDOR_VIEWALL_PERMCODE is true then user has permission to view all vendors documents,so at that time there is need to filter record according to user&agent. 
                     */
                    String userId = sessionHandlerImpl.getUserid(request);
                    requestParams.put("userid", userId);
                    requestParams.put("enablesalespersonagentflow", extraPref.isEnablesalespersonAgentFlow());
                }
            }
            if (extraPref != null && extraPref.getCompany().getCountry()!= null && extraPref.getCompany().getCountry().getID().equals(String.valueOf(Constants.indian_country_id))) {
                requestParams.put("formtypeid", request.getParameter("formtypeid")!=null?request.getParameter("formtypeid"):null);
                requestParams.put("vatcommodityid", request.getParameter("vatcommodityid")!=null?request.getParameter("vatcommodityid"):null);
                requestParams.put("checkformstatus", request.getParameter("checkformstatus")!=null?request.getParameter("checkformstatus"):null);
            }
            if(request.getParameter("pagingFlag")!=null)
                requestParams.put("pagingFlag", StringUtil.getBoolean(request.getParameter("pagingFlag")));
            
            if (request.getParameter("ccrAllRecords") != null) //All CC records flag
            {
                requestParams.put("ccrAllRecords", StringUtil.getBoolean(request.getParameter("ccrAllRecords")));
            }
            if (!StringUtil.isNullOrEmpty(request.getParameter("isreversalitc"))) {
                requestParams.put("isreversalitc", Boolean.parseBoolean(request.getParameter("isreversalitc")));
            }
            boolean isForTemplate = false;
            if(!StringUtil.isNullOrEmpty(request.getParameter("isForTemplate"))){
                isForTemplate = Boolean.parseBoolean(request.getParameter("isForTemplate"));
            }
            String companyid = "";
             String dir = "";
            String sort = "";
            if(!StringUtil.isNullOrEmpty(request.getParameter("dir")) && !StringUtil.isNullOrEmpty(request.getParameter("sort"))){
                dir = request.getParameter("dir");
                 sort = request.getParameter("sort");
                   requestParams.put("sort", sort);
                requestParams.put("dir", dir);
            }
            
            KwlReturnObject userResult = accountingHandlerDAOobj.getObject(User.class.getName(), sessionHandlerImpl.getUserid(request));
            User user = (User) userResult.getEntityList().get(0);
            if (!StringUtil.isNullOrEmpty(user.getDepartment())) {
                requestParams.put("userDepartment", user.getDepartment());
            }
            if(!StringUtil.isNullOrEmpty(request.getParameter("linknumber"))){
                requestParams.put("linknumber", request.getParameter("linknumber"));
            }
            
            for(int cnt=0; cnt<companyids.length; cnt++) {
                companyid = companyids[cnt];                
                request.setAttribute("companyid", companyid);
                request.setAttribute("gcurrencyid", gcurrencyid);
                requestParams.put("companyid", companyid);
                requestParams.put("gcurrencyid", gcurrencyid);
                requestParams.put("isForTemplate", isForTemplate);
                requestParams.put("custVendorID", request.getParameter("custVendorID"));
                boolean isBadDebtInvoices = false;
                if (!StringUtil.isNullOrEmpty(request.getParameter("isBadDebtInvoices"))) {// Changes For Malasian Company
                    isBadDebtInvoices = Boolean.parseBoolean(request.getParameter("isBadDebtInvoices"));
                    if (isBadDebtInvoices) {
                        int baddebttype = Integer.parseInt(request.getParameter("baddebttype"));
                        requestParams.put("isBadDebtInvoices", isBadDebtInvoices);
                        requestParams.put("baddebttype", baddebttype);
                        requestParams.put("selectedCriteriaDate", request.getParameter("selectedCriteriaDate"));
                        requestParams.put("badDebtCriteria", request.getParameter("badDebtCriteria"));
                        
                        if (baddebttype == 0) {
                            requestParams.put("badDebtCalculationDate", request.getParameter("badDebtCalculationDate"));
                            requestParams.put("badDebtCriteria", Integer.parseInt(request.getParameter("badDebtCriteria")));
                        } else {
                            requestParams.put("badDebtCalculationFromDate", request.getParameter("badDebtCalculationFromDate"));
                            requestParams.put("badDebtCalculationToDate", request.getParameter("badDebtCalculationToDate"));
                        }

                    }
                }
                if (requestParams.containsKey("filterConjuctionCriteria") && requestParams.get("filterConjuctionCriteria") != null) {
                    if (requestParams.get("filterConjuctionCriteria").toString().equalsIgnoreCase("OR")) {
                        filterConjuctionCriteria = com.krawler.common.util.Constants.or;
                    }
                }
                /**
                 * Create search Json module wise
                 * Invoice
                 * Debit/Credit Note
                 * Payment
                 */
                if (isAged && requestParams.containsKey("searchJson") && requestParams.get("searchJson") != null) {
                    Searchjson = requestParams.get("searchJson").toString();
                    if (!StringUtil.isNullOrEmpty(Searchjson)) {
                        isAdvanceSearch=true;
                        HashMap<String, Object> reqPar1 = new HashMap<String, Object>();
                        reqPar1.put(Constants.companyKey, requestParams.get(Constants.companyKey));
                        reqPar1.put(Constants.Acc_Search_Json, Searchjson);
                        reqPar1.put(Constants.Filter_Criteria, filterConjuctionCriteria);
                        reqPar1.put("moduleid", Constants.Acc_Vendor_Invoice_ModuleId);
                        invoiceSearchJson = fieldDataManagercntrl.getSearchJsonByModuleID(reqPar1);
                        reqPar1.remove("moduleid");
                        reqPar1.put("moduleid", Constants.Acc_Receive_Payment_ModuleId);
                        receiptSearchJson = fieldDataManagercntrl.getSearchJsonByModuleID(reqPar1);
                        reqPar1.put("moduleid", Constants.Acc_Debit_Note_ModuleId);
                        dnSearchJson = fieldDataManagercntrl.getSearchJsonByModuleID(reqPar1);
                        reqPar1.put("moduleid", Constants.Acc_Credit_Note_ModuleId);
                        cnSearchJson = fieldDataManagercntrl.getSearchJsonByModuleID(reqPar1);
                        reqPar1.put("moduleid", Constants.Acc_Make_Payment_ModuleId);
                        makePaymentSearchJson = fieldDataManagercntrl.getSearchJsonByModuleID(reqPar1);
                    }
                }
                if(isAdvanceSearch){
                  requestParams.put(Constants.Acc_Search_Json, invoiceSearchJson);  
                  requestParams.put(Constants.Filter_Criteria, request.getParameter(Constants.Filter_Criteria));
                }
                if (!StringUtil.isNullOrEmpty(request.getParameter("billid"))) {
                    KwlReturnObject result = accountingHandlerDAOobj.getObject(GoodsReceipt.class.getName(), request.getParameter("billid"));
                    GoodsReceipt gr = (GoodsReceipt) result.getEntityList().get(0);
                    requestParams.put("isFixedAsset", gr.isFixedAssetInvoice());
                }   
                if (isAged) {
                    requestParams.put("isAgedPayables", true);
                    if ((isgroupcomboDate == Constants.AgedPayableBaseCurrency || isgroupcomboDate == Constants.AgedPayableOtherthanBaseCurrency)) {//2==BaseCurrency,3=Other than base currency 
                        requestParams.put("groupcombo", isgroupcomboDate);
                        requestParams.put(Constants.globalCurrencyKey, sessionHandlerImpl.getCurrencyID(request));
                    }
                }
                /* ----Flag has value non zero if linking with GR filter will get applied from Invoice module---- */
                if(invoiceLinkedWithGRNStatus!=0){
                   requestParams.put("invoiceLinkedWithGRNStatus", invoiceLinkedWithGRNStatus); 
                }
                
                KwlReturnObject result = accGoodsReceiptobj.getGoodsReceiptsMerged(requestParams);
                List list = result.getEntityList();
                if (consignmentNoForGr || isInvoice) {
                    DataJArr = accGoodsReceiptServiceHandler.getGoodsReceiptsJsonMergedForConsignmentNo(requestParams, list, DataJArr, accountingHandlerDAOobj, accCurrencyDAOobj, accGoodsReceiptobj, accAccountDAOobj, accGoodsReceiptCommon, accTaxObj);
                }else if(isAged){                 
                    requestParams= accGoodsReceiptServiceDAO.getVendorAgedPayableMap(request, requestParams);
                    DataJArr = accGoodsReceiptServiceHandler.getGoodsReceiptsJsonForAgedPayables(requestParams, list, DataJArr, accountingHandlerDAOobj, accCurrencyDAOobj, accGoodsReceiptobj, accAccountDAOobj, accGoodsReceiptCommon, accTaxObj);
                } else {
                    DataJArr = accGoodsReceiptServiceHandler.getGoodsReceiptsJsonMerged(requestParams, list, DataJArr, accountingHandlerDAOobj, accCurrencyDAOobj, accGoodsReceiptobj, accAccountDAOobj, accGoodsReceiptCommon, accTaxObj);
                }
               
                if (request.getParameter(Constants.COMPANY_SUBDOMAIN) != null) {
                    requestParams.put(Constants.COMPANY_SUBDOMAIN, request.getParameter(Constants.COMPANY_SUBDOMAIN));
                }
                /*
                 * Fetching bad debt opening invoices
                 */
                if (isBadDebtInvoices) {
                    requestParams.put("isOpeningBalanceInvoices", "true");
                    result = accGoodsReceiptobj.getGoodsReceiptsMerged(requestParams);
                    requestParams.put("isOpeningBalanceInvoices", "false");
                    list = result.getEntityList();
                    DataJArr = accGoodsReceiptServiceHandler.getGoodsReceiptsJsonMerged(requestParams, list, DataJArr, accountingHandlerDAOobj, accCurrencyDAOobj, accGoodsReceiptobj, accAccountDAOobj, accGoodsReceiptCommon, accTaxObj);
                }
            }
            
            if (isAged) {
                requestParams.put("agedReport", true);
                requestParams.put("isAgedPayables", true);
                if (requestParams.containsKey("start")) { // In case of Ageing Removing paging because it is applying on each vendor data (CN/DN etc). Due to this complete number of record not showing in AP Report.  
                    requestParams.remove("start");
                }
                if (requestParams.containsKey("limit")) {
                    requestParams.remove("limit");
                }     
                KwlReturnObject result = null;
                if (requestfromdimensionbasedreport) {
                JSONArray OBJArryInvoice = new JSONArray();
                    result = accGoodsReceiptobj.getOpeningBalanceInvoices(requestParams);
                    if (result != null && result.getEntityList() != null && !result.getEntityList().isEmpty()) {
                        OBJArryInvoice = AccGoodsReceiptServiceHandler.getAgedOpeningBalanceInvoiceJson(requestParams, result.getEntityList(), OBJArryInvoice, accCurrencyDAOobj, accountingHandlerDAOobj, accGoodsReceiptCommon, accAccountDAOobj, fieldDataManagercntrl);
                }
                for (int i = 0; i < OBJArryInvoice.length(); i++) {
                    DataJArr.put(OBJArryInvoice.get(i));
                }
                } 
                else {
                    if (isAdvanceSearch) {
                        requestParams.put(Constants.Acc_Search_Json, invoiceSearchJson);
                        requestParams.put(Constants.Filter_Criteria, request.getParameter(Constants.Filter_Criteria));
                        requestParams.put(Constants.moduleid, Constants.Acc_Vendor_Invoice_ModuleId);
                    }
                    JSONArray OBJArryInvoice = new JSONArray();
                    result = accGoodsReceiptobj.getOpeningBalanceInvoices(requestParams);
                    if (result != null && result.getEntityList() != null && !result.getEntityList().isEmpty()) {
                        OBJArryInvoice = AccGoodsReceiptServiceHandler.getAgedOpeningBalanceInvoiceJson(requestParams, result.getEntityList(), OBJArryInvoice, accCurrencyDAOobj, accountingHandlerDAOobj, accGoodsReceiptCommon, accAccountDAOobj, fieldDataManagercntrl);
                    }
                    for (int i = 0; i < OBJArryInvoice.length(); i++) {
                        DataJArr.put(OBJArryInvoice.get(i));
                    }
                    if (isAdvanceSearch) {
                        requestParams.put(Constants.Acc_Search_Json, dnSearchJson);
                        requestParams.put(Constants.Filter_Criteria, request.getParameter(Constants.Filter_Criteria));
                        requestParams.put(Constants.moduleid, Constants.Acc_Debit_Note_ModuleId);
                    }
                JSONArray OBJArryDebitNote = new JSONArray();
                    result = accDebitNoteobj.getOpeningBalanceDNs(requestParams);
                    if (result != null && result.getEntityList() != null && !result.getEntityList().isEmpty()) {
                        OBJArryDebitNote = AccGoodsReceiptServiceHandler.getAgedOpeningBalanceDebitNoteJson(requestParams, result.getEntityList(), OBJArryDebitNote, accCurrencyDAOobj, accountingHandlerDAOobj, accReceiptDAOobj, accDebitNoteobj,accAccountDAOobj, fieldDataManagercntrl);
                }
                for (int i = 0; i < OBJArryDebitNote.length(); i++) {
                    DataJArr.put(OBJArryDebitNote.get(i));
                }
                if (isAdvanceSearch) {
                    requestParams.put(Constants.Acc_Search_Json, cnSearchJson);
                    requestParams.put(Constants.Filter_Criteria, request.getParameter(Constants.Filter_Criteria));
                    requestParams.put(Constants.moduleid, Constants.Acc_Credit_Note_ModuleId);
                }
                JSONArray OBJArryCreditNote = new JSONArray();
                    result = accCreditNoteDAOobj.getOpeningBalanceVendorCNs(requestParams);
                    if (result != null && result.getEntityList() != null && !result.getEntityList().isEmpty()) {
                        OBJArryCreditNote = AccGoodsReceiptServiceHandler.getAgedOpeningBalanceCreditNoteJson(requestParams, result.getEntityList(), OBJArryCreditNote, accCurrencyDAOobj, accountingHandlerDAOobj, accPaymentDAOobj, accVendorPaymentobj, accDebitNoteobj,accAccountDAOobj, fieldDataManagercntrl);
                }
                for (int i = 0; i < OBJArryCreditNote.length(); i++) {
                    DataJArr.put(OBJArryCreditNote.get(i));
                }
                if (isAdvanceSearch) {
                    requestParams.put(Constants.Acc_Search_Json, makePaymentSearchJson);
                    requestParams.put(Constants.Filter_Criteria, request.getParameter(Constants.Filter_Criteria));
                    requestParams.put(Constants.moduleid, Constants.Acc_Make_Payment_ModuleId);
                }
                JSONArray OBJArryPayment = new JSONArray();
                    result = accVendorPaymentobj.getOpeningBalancePayments(requestParams);
                    if (result != null && result.getEntityList() != null && !result.getEntityList().isEmpty()) {
                        OBJArryPayment = AccGoodsReceiptServiceHandler.getAgedOpeningBalancePaymentJson(requestParams, result.getEntityList(), OBJArryPayment, accCurrencyDAOobj, accountingHandlerDAOobj, accVendorPaymentobj,accAccountDAOobj, fieldDataManagercntrl);
                }
                for (int i = 0; i < OBJArryPayment.length(); i++) {
                    DataJArr.put(OBJArryPayment.get(i));
                }
                if (isAdvanceSearch) {
                    requestParams.put(Constants.Acc_Search_Json, dnSearchJson);
                    requestParams.put(Constants.Filter_Criteria, request.getParameter(Constants.Filter_Criteria));
                }
                JSONArray debitNotejArr = new JSONArray();
                result = accDebitNoteobj.getDebitNoteMerged(requestParams);
                    if (result != null && result.getEntityList() != null && !result.getEntityList().isEmpty()) {
                        debitNotejArr = AccGoodsReceiptServiceHandler.getDebitNotesMergedJson(requestParams, result.getEntityList(), debitNotejArr, accCurrencyDAOobj, accountingHandlerDAOobj, accReceiptDAOobj, accDebitNoteobj,accAccountDAOobj, fieldDataManagercntrl, accJournalEntryobj);
                }
                for (int i = 0; i < debitNotejArr.length(); i++) {
                    DataJArr.put(debitNotejArr.get(i));
                }
                if (isAdvanceSearch) {
                    requestParams.put(Constants.Acc_Search_Json, cnSearchJson);
                    requestParams.put(Constants.Filter_Criteria, request.getParameter(Constants.Filter_Criteria));
                }
                requestParams.put("cntype", 4);//This is used for getting Credit note against vendor 
                JSONArray CreditNotejArr = new JSONArray();
                result = accCreditNoteDAOobj.getCreditNoteMerged(requestParams);
                if (result != null && result.getEntityList() != null && !result.getEntityList().isEmpty()) {
                    CreditNotejArr = AccGoodsReceiptServiceHandler.getCreditNotesMergedJson(requestParams, result.getEntityList(), CreditNotejArr, accCurrencyDAOobj, accountingHandlerDAOobj, accPaymentDAOobj, accVendorPaymentobj, accDebitNoteobj, accAccountDAOobj, fieldDataManagercntrl, accJournalEntryobj);
                }
                for (int i = 0; i < CreditNotejArr.length(); i++) {
                  DataJArr.put(CreditNotejArr.get(i));    
                }
                if (isAdvanceSearch) {
                    requestParams.put(Constants.Acc_Search_Json, makePaymentSearchJson);
                    requestParams.put(Constants.Filter_Criteria, request.getParameter(Constants.Filter_Criteria));
                }
                requestParams.remove("cntype");
                JSONArray makePaymentJArr = new JSONArray();
                requestParams.put("allAdvPayment", true); // needs only Advance type record so that putted true
                requestParams.put("paymentWindowType", 1);//Payment to Vendor record
                result = accVendorPaymentobj.getPayments(requestParams);            
                    if (result != null && result.getEntityList() != null && !result.getEntityList().isEmpty()) {
                        companyid = sessionHandlerImpl.getCompanyid(request);
                        requestParams.put("companyid", companyid);
                        makePaymentJArr = AccGoodsReceiptServiceHandler.getPaymentsJson(requestParams, result.getEntityList(), makePaymentJArr, accCurrencyDAOobj, accountingHandlerDAOobj, accVendorPaymentobj);
                }
                for (int i = 0; i < makePaymentJArr.length(); i++) {
                    DataJArr.put(makePaymentJArr.get(i));
                }
                if (isAdvanceSearch) {
                    requestParams.put(Constants.Acc_Search_Json, receiptSearchJson);
                    requestParams.put(Constants.Filter_Criteria, request.getParameter(Constants.Filter_Criteria));
                }
                    requestParams.put("allAdvPayment", true); // needs only refund type record so that putted true
                    requestParams.put("paymentWindowType", 2);//Receipt to Vendor record
                    JSONArray receivePaymentJArr = new JSONArray();
                    result = accReceiptDAOobj.getReceipts(requestParams);
                    receivePaymentJArr = AccInvoiceServiceHandler.getReceiptsJson(requestParams, result.getEntityList(), receivePaymentJArr, accountingHandlerDAOobj, authHandlerDAOObj, accCurrencyDAOobj, accReceiptDAOobj, request, accAccountDAOobj, fieldDataManagercntrl, accJournalEntryobj);
                    for (int i = 0; i < receivePaymentJArr.length(); i++) {
                        DataJArr.put(receivePaymentJArr.get(i));
                    }
                    requestParams.remove("allAdvPayment");
                    requestParams.remove("paymentWindowType");
                }
         
                String sortKey="";
                if (isgroupcomboDate == 1) {//IF Sort By date
                    sortKey = "date";
                    DataJArr = AccountingManager.sortJsonArrayOnDateValues(DataJArr, (DateFormat) requestParams.get(Constants.df),sortKey,true);
                } else {
                    sortKey = "type";
                    DataJArr = AccountingManager.sortJsonArrayOnStringValues(DataJArr, sortKey,true);
                }
                if (sort.equals("code") && !(sort.equals(""))) {     //Sort record by Customer code
                    sortKey = "code";
                } else {
                    sortKey = "personinfo";  //Sort record by Customer Name
                }     
                if (dir.equals("DESC")){
                    DataJArr = AccountingManager.sortJsonArrayOnStringValuesByIgnoringCase(DataJArr, sortKey, false);
                } else {
                    DataJArr = AccountingManager.sortJsonArrayOnStringValuesByIgnoringCase(DataJArr, sortKey, true);    //show multigrouping JSONArray required to sort    
                }
              }
                
            if(request.getParameter("minimumAmountDue")!=null){
               JSONArray temp = new JSONArray();
               double minimumAmountDue = Double.parseDouble(request.getParameter("minimumAmountDue").toString());
               for(int i = 0; i < DataJArr.length(); i++) {
                   if(DataJArr.getJSONObject(i).getDouble(AMOUNTDUE) >= minimumAmountDue)
                       temp.put(DataJArr.getJSONObject(i));
               }
               DataJArr = temp;
            } else if(ispendingpayment){
               JSONArray temp = new JSONArray();
               for(int i = 0; i < DataJArr.length(); i++) {
                   if(DataJArr.getJSONObject(i).getDouble(AMOUNTDUE) > 0)
                       temp.put(DataJArr.getJSONObject(i));
               }
               DataJArr = temp;
            }
            int count = 0;
            if(requestParams.containsKey("totalCount") && 
                    !(invoiceLinkedWithGRNStatus == Constants.Filter_Invoice_WithFullGRN || invoiceLinkedWithGRNStatus == Constants.Filter_Invoice_WithNoGRN || invoiceLinkedWithGRNStatus == Constants.Filter_Invoice_WithPartialGRN)){
                count = (Integer)requestParams.get("totalCount");
            }else{
                count = DataJArr.length();
            }
            
            JSONArray pagedJson = DataJArr;
            String start = request.getParameter(START);
            String limit = request.getParameter(LIMIT);
            if(isExportReport){ //SDP-7909
                limit = String.valueOf(pagedJson.length());
            }
            /**
             * for 'PI With Full GRN', 'PI With No GRN' and 'PI With Partial GRN filter'
             * handling paging issue.
             */
            if (request.getParameter("pagingFlag") == null || 
                    (invoiceLinkedWithGRNStatus == Constants.Filter_Invoice_WithFullGRN || invoiceLinkedWithGRNStatus == Constants.Filter_Invoice_WithNoGRN || invoiceLinkedWithGRNStatus == Constants.Filter_Invoice_WithPartialGRN)) {
                if (!StringUtil.isNullOrEmpty(start) && !StringUtil.isNullOrEmpty(limit)) {
                    if (isAged) { // ADD GRNAD TOTAL AS LAST RECORD IN PAGED JSON
                        pagedJson = StringUtil.getPagedJSONForAgedWIthTotal(pagedJson, Integer.parseInt(start), Integer.parseInt(limit));
                        totalAmountJSON = pagedJson.getJSONObject(pagedJson.length()-1);
                        pagedJson.remove(pagedJson.length()-1);
                        jobj.put(Constants.AGEDAMOUNTSUMMARY, totalAmountJSON);
                    } else {
                    pagedJson = StringUtil.getPagedJSON(pagedJson, Integer.parseInt(start), Integer.parseInt(limit));
                }
            }
                
            }

            if(isAged){
                addCustomFields(request, companyid, requestParams, pagedJson);
                paramObj.put(Constants.agedPayableDateFilter, datefilter);
                paramObj.put(Constants.agedPayableInterval, request.getParameter("duration") == null ? 30 : Integer.parseInt(request.getParameter("duration")));
                paramObj.put(Constants.agedPayableNoOfInterval, StringUtil.isNullOrEmpty(request.getParameter("noOfInterval"))? 7 : Integer.parseInt(request.getParameter("noOfInterval")));
                
                accDashboardServiceImpl.saveUserPreferencesOptions(paramObj);
            }
           
            jobj.put( DATA,pagedJson);  
            jobj.put( COUNT,count);
            issuccess = true;
        } catch (SessionExpiredException | ServiceException ex) {
            msg = ex.getMessage();
            Logger.getLogger(accGoodsReceiptControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            msg = "accGoodsReceiptControllerCMN.getGoodsReceiptsMerged : "+ex.getMessage();
        } finally {
            try {
                jobj.put( SUCCESS,issuccess);
                jobj.put( MSG,msg);
            } catch (JSONException ex) {
                Logger.getLogger(accGoodsReceiptController.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return new ModelAndView(JSONVIEW,MODEL, jobj.toString());
    }
    
    public void addCustomFields(HttpServletRequest request,String companyid, HashMap<String, Object> requestParams, JSONArray pagedJson) throws JSONException, ServiceException, ParseException, SessionExpiredException {
         //Goods Receipt Custom data

        //Custom Field for Opening Invoice
        HashMap<String, String> gropeningInvreplaceFieldMap = new HashMap<String, String>();
        HashMap<String, String> gropeningInvcustomFieldMap = new HashMap<String, String>();
        HashMap<String, String> gropeningInvcustomDateFieldMap = new HashMap<String, String>();
        HashMap<String, Integer> gropeningInvFieldMap = null;

        boolean isFixedAsset = requestParams.containsKey("isFixedAsset") ? (Boolean) requestParams.get("isFixedAsset") : false;
        boolean isConsignment = requestParams.containsKey("isConsignment") ? (Boolean) requestParams.get("isConsignment") : false;

        HashMap<String, Object> gropeningInvfieldrequestParams = new HashMap();

        gropeningInvfieldrequestParams.put(Constants.filter_names, Arrays.asList(Constants.companyid, Constants.moduleid));
        gropeningInvfieldrequestParams.put(Constants.filter_values, Arrays.asList(companyid, isFixedAsset ? Constants.Acc_FixedAssets_PurchaseInvoice_ModuleId : isConsignment ? Constants.Acc_Consignment_GoodsReceipt_ModuleId : Constants.Acc_Vendor_Invoice_ModuleId));

        gropeningInvFieldMap = accAccountDAOobj.getFieldParamsCustomMap(gropeningInvfieldrequestParams, gropeningInvreplaceFieldMap, gropeningInvcustomFieldMap, gropeningInvcustomDateFieldMap);

        //Custom Field for Opening Debit Note
        HashMap<String, String> openingDNreplaceFieldMap = new HashMap<String, String>();

        HashMap<String, String> openingDNcustomFieldMap = new HashMap<String, String>();
        HashMap<String, String> openingDNcustomDateFieldMap = new HashMap<String, String>();
        HashMap<String, Object> openingDNfieldrequestParams = new HashMap();
        HashMap<String, Integer> openingDNFieldMap = null;
        openingDNfieldrequestParams.put(Constants.filter_names, Arrays.asList(Constants.companyid, Constants.moduleid));
        openingDNfieldrequestParams.put(Constants.filter_values, Arrays.asList(companyid, Constants.Acc_Debit_Note_ModuleId));

        openingDNFieldMap = accAccountDAOobj.getFieldParamsCustomMap(openingDNfieldrequestParams, openingDNreplaceFieldMap, openingDNcustomFieldMap, openingDNcustomDateFieldMap);

        //Custom Field for Opening Credit Note
        HashMap<String, String> openingCNreplaceFieldMap = new HashMap<String, String>();
        HashMap<String, String> openingCNcustomFieldMap = new HashMap<String, String>();
        HashMap<String, String> openingCNcustomDateFieldMap = new HashMap<String, String>();
        HashMap<String, Object> openingCNfieldrequestParams = new HashMap();
        HashMap<String, Integer> openingCNFieldMap = null;
        openingCNfieldrequestParams.put(Constants.filter_names, Arrays.asList(Constants.companyid, Constants.moduleid));
        openingCNfieldrequestParams.put(Constants.filter_values, Arrays.asList(companyid, Constants.Acc_Credit_Note_ModuleId));

        openingCNFieldMap = accAccountDAOobj.getFieldParamsCustomMap(openingCNfieldrequestParams, openingCNreplaceFieldMap, openingCNcustomFieldMap, openingCNcustomDateFieldMap);

        //Custom Field for Opening Payment
        HashMap<String, String> openingPaycustomFieldMap = new HashMap<String, String>();
        HashMap<String, String> openingPaycustomDateFieldMap = new HashMap<String, String>();
        HashMap<String, Object> openingPayfieldrequestParams = new HashMap();
        openingPayfieldrequestParams.put(Constants.filter_names, Arrays.asList(Constants.companyid, Constants.moduleid));
        openingPayfieldrequestParams.put(Constants.filter_values, Arrays.asList(companyid, Constants.Acc_Make_Payment_ModuleId));
        HashMap<String, String> openingPayreplaceFieldMap = new HashMap<String, String>();
        HashMap<String, Integer> openingPayFieldMap = accAccountDAOobj.getFieldParamsCustomMap(openingPayfieldrequestParams, openingPayreplaceFieldMap, openingPaycustomFieldMap, openingPaycustomDateFieldMap);

        //Custom Field for Merged Debit Note
        HashMap<String, String> mergedDNreplaceFieldMap = new HashMap<String, String>();
        HashMap<String, String> mergedDNcustomFieldMap = new HashMap<String, String>();
        HashMap<String, String> mergedDNcustomDateFieldMap = new HashMap<String, String>();
        HashMap<String, Integer> mergedDNFieldMap = null;
        HashMap<String, Object> mergedDNfieldrequestParams = new HashMap();
        mergedDNfieldrequestParams.put(Constants.filter_names, Arrays.asList(Constants.companyid, Constants.moduleid));
        mergedDNfieldrequestParams.put(Constants.filter_values, Arrays.asList(companyid, Constants.Acc_Debit_Note_ModuleId));
        if (accAccountDAOobj != null) {
            mergedDNFieldMap = accAccountDAOobj.getFieldParamsCustomMap(mergedDNfieldrequestParams, mergedDNreplaceFieldMap, mergedDNcustomFieldMap, mergedDNcustomDateFieldMap);
        }
        //Custom field details Maps for Line Level data Merged Debit Note
        HashMap<String, Object> mergedDNfieldrequestParamsRows = new HashMap();
        HashMap<String, String> mergedDNreplaceFieldMapRows = new HashMap();
        HashMap<String, String> mergedDNcustomFieldMapRows = new HashMap();
        HashMap<String, String> mergedDNcustomDateFieldMapRows = new HashMap();
        mergedDNfieldrequestParamsRows.put(Constants.filter_names, Arrays.asList(Constants.companyid, Constants.moduleid));
        mergedDNfieldrequestParamsRows.put(Constants.filter_values, Arrays.asList(companyid, Constants.Acc_Debit_Note_ModuleId));
        HashMap<String, Integer> mergedDNfieldMapRows = null;
        if (accAccountDAOobj != null) {
            mergedDNfieldMapRows = accAccountDAOobj.getFieldParamsCustomMapForRows(mergedDNfieldrequestParamsRows, mergedDNreplaceFieldMapRows, mergedDNcustomFieldMapRows, mergedDNcustomDateFieldMapRows);
        }

        //Custom Field for Merged Credit Note 
        HashMap<String, String> mergedCNreplaceFieldMap = new HashMap<String, String>();
        HashMap<String, String> mergedCNcustomFieldMap = new HashMap<String, String>();
        HashMap<String, String> mergedCNcustomDateFieldMap = new HashMap<String, String>();
        HashMap<String, Integer> mergedCNFieldMap = null;
        HashMap<String, Object> mergedCNfieldrequestParams = new HashMap();
        mergedCNfieldrequestParams.put(Constants.filter_names, Arrays.asList(Constants.companyid, Constants.moduleid));
        mergedCNfieldrequestParams.put(Constants.filter_values, Arrays.asList(companyid, Constants.Acc_Credit_Note_ModuleId));
        if (accAccountDAOobj != null) {
            mergedCNFieldMap = accAccountDAOobj.getFieldParamsCustomMap(mergedCNfieldrequestParams, mergedCNreplaceFieldMap, mergedCNcustomFieldMap, mergedCNcustomDateFieldMap);
        }

        //Custom field details Maps for Line Level data for Merged Credit Note
        HashMap<String, Object> mergedCNfieldrequestParamsRows = new HashMap();
        HashMap<String, String> mergedCNreplaceFieldMapRows = new HashMap();
        HashMap<String, String> mergedCNcustomFieldMapRows = new HashMap();
        HashMap<String, String> mergedCNcustomDateFieldMapRows = new HashMap();
        mergedCNfieldrequestParamsRows.put(Constants.filter_names, Arrays.asList(Constants.companyid, Constants.moduleid));
        mergedCNfieldrequestParamsRows.put(Constants.filter_values, Arrays.asList(companyid, Constants.Acc_Credit_Note_ModuleId));
        HashMap<String, Integer> mergedCNfieldMapRows = null;
        if (accAccountDAOobj != null) {
            mergedCNfieldMapRows = accAccountDAOobj.getFieldParamsCustomMapForRows(mergedCNfieldrequestParamsRows, mergedCNreplaceFieldMapRows, mergedCNcustomFieldMapRows, mergedCNcustomDateFieldMapRows);
        }
        //Custom Field for opening receipts
        HashMap<String, String> openingRTreplaceFieldMap = new HashMap<String, String>();
        HashMap<String, String> openingRTcustomFieldMap = new HashMap<String, String>();
        HashMap<String, String> openingRTcustomDateFieldMap = new HashMap<String, String>();
        HashMap<String, Integer> openingRTFieldMap = null;
        HashMap<String, Object> openingRTfieldrequestParams = new HashMap();
        openingRTfieldrequestParams.put(Constants.filter_names, Arrays.asList(Constants.companyid, Constants.moduleid));
        openingRTfieldrequestParams.put(Constants.filter_values, Arrays.asList(sessionHandlerImpl.getCompanyid(request), Constants.Acc_Receive_Payment_ModuleId));
        if (accAccountDAOobj != null) {
            openingRTFieldMap = accAccountDAOobj.getFieldParamsCustomMap(openingRTfieldrequestParams, openingRTreplaceFieldMap, openingRTcustomFieldMap, openingRTcustomDateFieldMap);
        }

        //Receipt custom data
        HashMap<String, Object> rtfieldrequestParamsGlobalLevel = new HashMap();
        HashMap<String, String> rtcustomFieldMapGlobalLevel = new HashMap<String, String>();
        HashMap<String, String> rtcustomDateFieldMapGlobalLevel = new HashMap<String, String>();
        HashMap<String, Integer> rtFieldMapGlobalLevel = null;
        rtfieldrequestParamsGlobalLevel.put(Constants.filter_names, Arrays.asList(Constants.companyid, Constants.moduleid));
        rtfieldrequestParamsGlobalLevel.put(Constants.filter_values, Arrays.asList(companyid, Constants.Acc_Receive_Payment_ModuleId));
        HashMap<String, String> rtreplaceFieldMapGlobalLevel = new HashMap<String, String>();
        if (accAccountDAOobj != null) {
            rtFieldMapGlobalLevel = accAccountDAOobj.getFieldParamsCustomMap(rtfieldrequestParamsGlobalLevel, rtreplaceFieldMapGlobalLevel, rtcustomFieldMapGlobalLevel, rtcustomDateFieldMapGlobalLevel);
        }

        //Custom field details Maps for Line Level data
        HashMap<String, Object> rtfieldrequestParamsRows = new HashMap();
        HashMap<String, String> rtreplaceFieldMapRows = new HashMap();
        HashMap<String, String> rtcustomFieldMapRows = new HashMap();
        HashMap<String, String> rtcustomDateFieldMapRows = new HashMap();
        rtfieldrequestParamsRows.put(Constants.filter_names, Arrays.asList(Constants.companyid, Constants.moduleid));
        rtfieldrequestParamsRows.put(Constants.filter_values, Arrays.asList(companyid, Constants.Acc_Receive_Payment_ModuleId));
        HashMap<String, Integer> rtfieldMapRows = null;
        if (accAccountDAOobj != null) {
            rtfieldMapRows = accAccountDAOobj.getFieldParamsCustomMapForRows(rtfieldrequestParamsRows, rtreplaceFieldMapRows, rtcustomFieldMapRows, rtcustomDateFieldMapRows);
        }
        
        //Custom field details Maps for Line Level data
        HashMap<String, String> grInvoicecustomFieldMap = new HashMap<String, String>();
        HashMap<String, String> grInvoicecustomDateFieldMap = new HashMap<String, String>();
        HashMap<String, Object> grInvoicefieldrequestParams = new HashMap();
        int moduleid = (requestParams.containsKey("isFixedAsset") ? (Boolean) requestParams.get("isFixedAsset") : false) ? Constants.Acc_FixedAssets_PurchaseInvoice_ModuleId : isConsignment ? Constants.Acc_Consignment_GoodsReceipt_ModuleId : Constants.Acc_Vendor_Invoice_ModuleId;
        grInvoicefieldrequestParams.put(Constants.filter_names, Arrays.asList(Constants.companyid, Constants.moduleid));
        grInvoicefieldrequestParams.put(Constants.filter_values, Arrays.asList(companyid, moduleid));
        HashMap<String, String> grInvoicereplaceFieldMap = new HashMap<String, String>();
        HashMap<String, Integer> grInvoiceFieldMap = accAccountDAOobj.getFieldParamsCustomMap(grInvoicefieldrequestParams, grInvoicereplaceFieldMap, grInvoicecustomFieldMap, grInvoicecustomDateFieldMap);

        //Custom field details Maps for Line Level data
        HashMap<String, Object> grInvoicefieldrequestParamsRows = new HashMap();
        HashMap<String, String> grInvoicereplaceFieldMapRows = new HashMap();
        HashMap<String, String> grInvoicecustomFieldMapRows = new HashMap();
        HashMap<String, String> grInvoicecustomDateFieldMapRows = new HashMap();
        grInvoicefieldrequestParamsRows.put(Constants.filter_names, Arrays.asList(Constants.companyid, Constants.moduleid, Constants.customcolumn));
        grInvoicefieldrequestParamsRows.put(Constants.filter_values, Arrays.asList(companyid, moduleid, 1));
        HashMap<String, Integer> grInvoicefieldMapRows = null;
        grInvoicefieldMapRows = accAccountDAOobj.getFieldParamsCustomMap(grInvoicefieldrequestParamsRows, grInvoicereplaceFieldMapRows, grInvoicecustomFieldMapRows, grInvoicecustomDateFieldMapRows);
       
        for (int i = 0; i < pagedJson.length(); i++) {
            JSONObject obj = pagedJson.getJSONObject(i);

            if (obj.optString("type", "").equals("Purchase Invoice")) {
                String grId = obj.getString("billid");
                KwlReturnObject objItr = accountingHandlerDAOobj.getObject(GoodsReceipt.class.getName(), grId);
                GoodsReceipt gReceipt = (GoodsReceipt) objItr.getEntityList().get(0);
                if (gReceipt.isNormalInvoice()) {
                    accGoodsReceiptServiceDAO.getCustmDataForPurchaseInvoice(requestParams, pagedJson, companyid, grInvoicereplaceFieldMap, grInvoicecustomFieldMap, grInvoicecustomDateFieldMap, grInvoiceFieldMap, grInvoicereplaceFieldMapRows, grInvoicecustomFieldMapRows, grInvoicecustomDateFieldMapRows, grInvoicefieldMapRows);
                    
                } else {
                    AccGoodsReceiptServiceHandler.getOpeningInvoiceCustomfield(companyid, gReceipt, requestParams, accountingHandlerDAOobj, gropeningInvreplaceFieldMap, gropeningInvFieldMap, gropeningInvcustomFieldMap, gropeningInvcustomDateFieldMap, obj, fieldDataManagercntrl);

                }

            }
            if (obj.optString("type", "").equals("Debit Note")) {
                String Id = obj.getString("billid");
                KwlReturnObject objItr = accountingHandlerDAOobj.getObject(DebitNote.class.getName(), Id);
                DebitNote debitNote = (DebitNote) objItr.getEntityList().get(0);
                if (debitNote.isNormalDN()) {
                    AccGoodsReceiptServiceHandler.getDebitNotesMergedCustomField(companyid, accJournalEntryobj, debitNote, accountingHandlerDAOobj, mergedDNreplaceFieldMap, mergedDNFieldMap, mergedDNcustomFieldMap, mergedDNcustomDateFieldMap, accDebitNoteobj, mergedDNfieldMapRows, mergedDNreplaceFieldMapRows, mergedDNcustomFieldMapRows, mergedDNcustomDateFieldMapRows, obj, fieldDataManagercntrl);
                } else {
                    AccGoodsReceiptServiceHandler.getOpeningDebitNoteCustomField(companyid, debitNote, requestParams, accountingHandlerDAOobj, openingDNreplaceFieldMap, openingDNFieldMap, openingDNcustomFieldMap, openingDNcustomDateFieldMap, obj, fieldDataManagercntrl);
                }

            }
            if (obj.optString("type", "").equals("Credit Note")) {
                String Id = obj.getString("billid");
                KwlReturnObject objItr = accountingHandlerDAOobj.getObject(CreditNote.class.getName(), Id);
                CreditNote creditNote = (CreditNote) objItr.getEntityList().get(0);
                if (creditNote.isNormalCN()) {
                    AccGoodsReceiptServiceHandler.getCreditNotesMergedCustomField(companyid, accJournalEntryobj, creditNote, accountingHandlerDAOobj, mergedCNreplaceFieldMap, mergedCNFieldMap, mergedCNcustomFieldMap, mergedCNcustomDateFieldMap, accDebitNoteobj, mergedCNfieldMapRows, mergedCNreplaceFieldMapRows, mergedCNcustomFieldMapRows, mergedCNcustomDateFieldMapRows, obj, fieldDataManagercntrl);
                } else {
                    AccGoodsReceiptServiceHandler.getOpeningCreditNoteCustomField(companyid, creditNote, requestParams, accountingHandlerDAOobj, openingCNreplaceFieldMap, openingCNFieldMap, openingCNcustomFieldMap, openingCNcustomDateFieldMap, obj, fieldDataManagercntrl);

                }
            }
            if (obj.optString("type", "").equals("Payment Made")) {
                String Id = obj.getString("billid");
                KwlReturnObject objItr = accountingHandlerDAOobj.getObject(Payment.class.getName(), Id);
                Payment payment = (Payment) objItr.getEntityList().get(0);
                if(!payment.isNormalPayment()){
                
                AccGoodsReceiptServiceHandler.getOpeningPaymentCustomField(companyid, payment, requestParams, accountingHandlerDAOobj, openingPayreplaceFieldMap, openingPayFieldMap, openingPaycustomFieldMap, openingPaycustomDateFieldMap, obj, fieldDataManagercntrl);
            
                }
            }
            if (obj.optString("type", "").equals("Payment Received")) {

                String id = obj.getString("billid");
                Receipt receipt = (Receipt) kwlCommonTablesDAOObj.getObject(Receipt.class.getName(), id).getEntityList().get(0);
                if (receipt.isNormalReceipt()) {
                    AccInvoiceServiceHandler.getReceiptCustomField(companyid, fieldDataManagercntrl, accJournalEntryobj, accountingHandlerDAOobj, accReceiptDAOobj, request, receipt, rtcustomFieldMapGlobalLevel, rtcustomDateFieldMapGlobalLevel, rtFieldMapGlobalLevel, rtreplaceFieldMapGlobalLevel, rtreplaceFieldMapRows, rtcustomFieldMapRows, rtcustomDateFieldMapRows, rtfieldMapRows, obj);
                } else {
                    AccInvoiceServiceHandler.getOpeningReceiptCustomField(companyid, fieldDataManagercntrl, accJournalEntryobj, request, receipt, openingRTreplaceFieldMap, openingRTcustomFieldMap, openingRTcustomDateFieldMap, openingRTFieldMap, obj);
                }
            }

        }
     
    }
    public ModelAndView goodsReceiptDetailsForSupplierExcise(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobjData = new JSONObject();
        try {
            String companyid= sessionHandlerImpl.getCompanyid(request).toString();
            String productid=request.getParameter("productid");
            DateFormat sdf = authHandler.getUserDateFormatter(request);
            String natureOfPurchase ="";
            HashMap<String, Object> requestParams = new HashMap<String, Object>();
            if(!StringUtil.isNullOrEmpty(request.getParameter("natureofpurchase"))){
                natureOfPurchase = request.getParameter("natureofpurchase");
                requestParams.put("natureofpurchase", natureOfPurchase);
            }
            requestParams.put("companyid",companyid);
            requestParams.put("productid",productid);
            KwlReturnObject result = accGoodsReceiptobj.getGoodsReceiptsForDealerExciseDetails(requestParams);
            Iterator gred = result.getEntityList().iterator();
            while(gred.hasNext()){
                Object[] row = (Object[]) gred.next();
                JSONObject jobj = new JSONObject();
                double availableQty=(double)row[8] * (double)row[7];
                double utilizedQty=(double)row[8] * (double)row[7];
                if(row[0]!=null){
                    HashMap<String, Object> grdParamParams = new HashMap<String, Object>();
                    grdParamParams.put("companyid", companyid);
                    grdParamParams.put("goodsreceiptdetails", row[0]);
                    grdParamParams.put("filterdata", request.getParameter("filterdata"));
                    grdParamParams.put("invoice", request.getParameter("invoice"));
                    KwlReturnObject resultgoodsreceipt = accGoodsReceiptobj.getutilizedGoodsReceiptsForDealerExciseDetails(grdParamParams);
                    Iterator gredUtilized = resultgoodsreceipt.getEntityList().iterator();
                    int utilizedqty=0;
                    while(gredUtilized.hasNext()){
                        Object[] rowUtilized = (Object[]) gredUtilized.next();
                        utilizedqty+=(Integer)rowUtilized[0];
                    }
                    availableQty = availableQty-utilizedqty;
                    utilizedQty = availableQty;
                    if(availableQty<=0){
                        continue;
                    }
                }
                jobj.put("goodsreceiptid",row[0]!=null?row[0].toString():"");
                jobj.put("invoiceName",row[1]!=null?row[1].toString():"");
                jobj.put("availableQuantitybase",row[2]!=null?row[2].toString():"");
                if(row[3]!=null){
                    Date date=(Date)row[3];
                    jobj.put("invoiceDate",sdf.format(date));
                    jobj.put("invoiceNameAndDate",(row[1]!=null?row[1].toString()+"/":"")+sdf.format(date));
                }
                jobj.put("vendorid",row[4]!=null?row[4].toString():"");
                jobj.put("vendorName",row[5]!=null?row[5].toString():"");
                if(row[6]!=null){
                    KwlReturnObject userResult = accountingHandlerDAOobj.getObject(MasterItem.class.getName(),row[6].toString());
                    MasterItem mi = (MasterItem) userResult.getEntityList().get(0);
                    jobj.put("natureofpurchaseName",mi!=null&&!StringUtil.isNullOrEmpty(mi.getValue())?mi.getValue():"");
                    jobj.put("vendorNameAndnop",(row[5]!=null?row[5].toString()+"/":"")+(mi!=null&&!StringUtil.isNullOrEmpty(mi.getValue())?mi.getValue():""));
                    jobj.put("natureofpurchaseId",mi!=null&&!StringUtil.isNullOrEmpty(mi.getID())?mi.getID():"");
                }
                if(row[7]!=null &&row[8]!=null){
                    jobj.put("availableQuantity",availableQty);
                    jobj.put("actualQuantity",utilizedQty);
                }
                jobjData.append("data", jobj);
            }
            
        } catch (JSONException  | ServiceException | SessionExpiredException ex) {
            Logger.getLogger(accGoodsReceiptControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
        } 
         return new ModelAndView(JSONVIEW,MODEL, jobjData.toString());
    }
    
    public ModelAndView exportPurchaseByVendor(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        String view = "jsonView_ex";
        try {
            JSONObject paramJobj = StringUtil.convertRequestToJsonObject(request);
            HashMap requestParams = AccInvoiceServiceHandler.getInvoiceRequestMap(request);
            String productIds = request.getParameter("productids");
            requestParams.put(GoodsReceiptConstants.PRODUCTID, productIds);
            KwlReturnObject result = accGoodsReceiptobj.getPurchaseByVendor(requestParams);
            List list = result.getEntityList();
            String fileType = request.getParameter("filetype");
            if (!StringUtil.equal(fileType, "pdf")) {
                paramJobj.put(Constants.isExport, true);
            }
            JSONObject dataObj = getPurchaseByVendorJson(paramJobj, list);
            
            if (StringUtil.equal(fileType, "print")) {
                String GenerateDate = authHandler.getDateOnlyFormat().format(new Date());
                dataObj.put("GenerateDate", GenerateDate);
                view = "jsonView-empty";
            }
            if (StringUtil.equal(fileType, "pdf")) {
                List jasperPrint = null;
                 response.setHeader("Content-Disposition", "attachment;filename=" + "PurchaseByVendorReport.pdf");
                jasperPrint = accGoodsReceiptServiceHandler.exportPurchaseByVendorJasper(request, dataObj.optJSONArray("data"), accountingHandlerDAOobj);
                JRPdfExporter exp = new JRPdfExporter();
                exp.setParameter(JRExporterParameter.JASPER_PRINT_LIST, jasperPrint);
                exp.setParameter(JRPdfExporterParameter.OUTPUT_STREAM, response.getOutputStream());
                exp.exportReport();
            } else {
                exportDaoObj.processRequest(request, response, dataObj);
            }
        } catch (SessionExpiredException ex) {
            Logger.getLogger(accGoodsReceiptControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            Logger.getLogger(accGoodsReceiptControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
        }
        return new ModelAndView(view, "model", jobj.toString());
    }
    public ModelAndView updateGoodsReceiptAmountInBase(HttpServletRequest request, HttpServletResponse response) throws SessionExpiredException, ServiceException {
        DefaultTransactionDefinition def = new DefaultTransactionDefinition();
        def.setName("Invoice_Tx");
        def.setPropagationBehavior(TransactionDefinition.PROPAGATION_REQUIRED);
        TransactionStatus status = txnManager.getTransaction(def);
        JSONObject jobj = new JSONObject();
        int invoiceUpdated = 0;
        boolean issuccess = false;
        try {
            String subdomain = "";
            String[] subdomainArray = null;
            if (!StringUtil.isNullOrEmpty(request.getParameter("subdomain"))) {
                subdomain = (String) request.getParameter("subdomain");
                subdomainArray = subdomain.split(",");
            }
            KwlReturnObject company = accCompanyPreferencesObj.getCompanyList(subdomainArray);
            Iterator ctr = company.getEntityList().iterator();
            while (ctr.hasNext()) {
                String companyid = ctr.next().toString();
                HashMap<String, Object> requestParams = new HashMap<String, Object>();
                requestParams.put("companyid", companyid);
                KwlReturnObject result = accGoodsReceiptobj.getGoodsReceiptsHavingInvoiceAmount(requestParams);
                List<GoodsReceipt> invList = result.getEntityList();
                for (GoodsReceipt goodsreceipt : invList) {
                    double externalCurrencyRate = 0d;
                    double invoiceOriginalAmount = 0;
                    Date grCreationDate = null;
                    boolean isopeningBalanceInvoice = goodsreceipt.isIsOpeningBalenceInvoice();
                    String currencyid = (goodsreceipt.getCurrency() == null ?goodsreceipt.getCompany().getCurrency().getCurrencyID() : goodsreceipt.getCurrency().getCurrencyID());
                    JournalEntry je = null;
                    JournalEntryDetail d = null;
                    if (goodsreceipt.isNormalInvoice()) {
                        je = goodsreceipt.getJournalEntry();
                        d = goodsreceipt.getVendorEntry();
                    }
                    if (je != null) {
                        grCreationDate = goodsreceipt.getCreationDate();
                        if (isopeningBalanceInvoice && !goodsreceipt.isNormalInvoice()) {
                            externalCurrencyRate = goodsreceipt.getExchangeRateForOpeningTransaction();
                            invoiceOriginalAmount = goodsreceipt.getOriginalOpeningBalanceAmount();
                        } else {
                            externalCurrencyRate = je.getExternalCurrencyRate();
                            invoiceOriginalAmount = d.getAmount();
                        }
                        KwlReturnObject bAmt = null;
                        requestParams.put("gcurrencyid", goodsreceipt.getCompany().getCurrency().getCurrencyID());
                        if (isopeningBalanceInvoice && goodsreceipt.isConversionRateFromCurrencyToBase()) {// if invoice is opening balance invoice and Conversion rate is taken from user is Currency to base then following method will be called.
                            bAmt = accCurrencyDAOobj.getCurrencyToBaseAmountAccordingToCurrencyToBaseExchangeRate(requestParams, invoiceOriginalAmount, currencyid, grCreationDate, externalCurrencyRate);
                        } else {
                            bAmt = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, invoiceOriginalAmount, currencyid, grCreationDate, externalCurrencyRate);
                        }
                        double amountinbase = (Double) bAmt.getEntityList().get(0);
                        JSONObject tempParams = new JSONObject();
                        tempParams.put("invoiceid", goodsreceipt.getID());
                        tempParams.put(Constants.invoiceamountinbase, amountinbase);
                        boolean success = accGoodsReceiptobj.updateInvoiceAmountInBase(goodsreceipt, tempParams);
                        if (success) {
                            invoiceUpdated++;
                        }
                    }
                }
            }
            txnManager.commit(status);
            issuccess = true;
        } catch (Exception ex) {
            Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
            txnManager.rollback(status);
        } finally {
            try {
                jobj.put("success", issuccess);
                jobj.put("totalInvoicesUpdated", invoiceUpdated);
            } catch (JSONException ex) {
                Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return new ModelAndView("jsonView", "model", jobj.toString());
    }
    public ModelAndView getPurchaseByVendor(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        boolean issuccess = false;
        String msg = "";
        try {
            JSONObject paramJobj = StringUtil.convertRequestToJsonObject(request);
            HashMap requestParams = AccInvoiceServiceHandler.getInvoiceRequestMap(request);
            String start = request.getParameter("start");
            String limit = request.getParameter("limit");
            String productIds = request.getParameter("productids");
            requestParams.put("start", start);
            requestParams.put("limit", limit);
            requestParams.put(GoodsReceiptConstants.PRODUCTID, productIds);
            KwlReturnObject result = accGoodsReceiptobj.getPurchaseByVendor(requestParams);
            List list = result.getEntityList();
            JSONArray DataJArr = new JSONArray();
            JSONObject dataObj = getPurchaseByVendorJson(paramJobj, list);
            if (dataObj.has("data")) {
                DataJArr = dataObj.getJSONArray("data");
            }
            int count = result.getRecordTotalCount();
            jobj.put("data", DataJArr);
            jobj.put("count", count);
            issuccess = true;
        } catch (Exception ex) {
            msg = "" + ex.getMessage();
            Logger.getLogger(accGoodsReceiptControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                jobj.put("success", issuccess);
                jobj.put("msg", msg);
            } catch (JSONException ex) {
                Logger.getLogger(accGoodsReceiptControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return new ModelAndView("jsonView", "model", jobj.toString());
    }

    public JSONObject getPurchaseByVendorJson(JSONObject paramJobj, List list) throws SessionExpiredException, ServiceException {
        JSONObject jobj = new JSONObject();
        JSONArray jArr = new JSONArray();
        try {
            HashMap requestParams = AccInvoiceServiceHandler.getInvoiceRequestMapJson(paramJobj);
            DateFormat df = authHandler.getDateOnlyFormat();
            String companyid = paramJobj.optString(Constants.companyKey);
            KwlReturnObject cap = accountingHandlerDAOobj.getObject(CompanyAccountPreferences.class.getName(), companyid);
            KwlReturnObject curresult = accountingHandlerDAOobj.getObject(KWLCurrency.class.getName(), paramJobj.optString(Constants.currencyKey));
            KWLCurrency currency = (KWLCurrency) curresult.getEntityList().get(0);
            CompanyAccountPreferences pref = (CompanyAccountPreferences) cap.getEntityList().get(0);
            String cashAccount = pref.getCashAccount().getID();
            Iterator itr = list.iterator();
            double totalAmountWithTax = 0;
            double totalAmountWithoutTax = 0;
            double totalAmount = 0;
            boolean isExport = paramJobj.optBoolean(Constants.isExport);
            while (itr.hasNext()) {
                Object[] oj = (Object[]) itr.next();
                String invid = oj[0].toString();
                KwlReturnObject objItr = accountingHandlerDAOobj.getObject(GoodsReceipt.class.getName(), invid);
                GoodsReceipt gReceipt = (GoodsReceipt) objItr.getEntityList().get(0);
                JournalEntry je = gReceipt.getJournalEntry();
                String currencyid = (gReceipt.getCurrency() == null ? currency.getCurrencyID() : gReceipt.getCurrency().getCurrencyID());
                JSONObject obj = new JSONObject();
                obj.put("billid", gReceipt.getID());
                obj.put("customername", gReceipt.getVendor() == null ? "" : gReceipt.getVendor().getName());
                obj.put("customerid", gReceipt.getVendor() == null ? "" : gReceipt.getVendor().getID());
                obj.put("personname", gReceipt.getVendor() == null ? "" : gReceipt.getVendor().getName());
                obj.put("agentname", gReceipt.getMasterAgent()== null ? "" : gReceipt.getMasterAgent().getValue());
                obj.put("personid", gReceipt.getVendor() == null ? "" : gReceipt.getVendor().getID());
                obj.put(Constants.SEQUENCEFORMATID, gReceipt.getSeqformat() == null ? "" : gReceipt.getSeqformat().getID());
                obj.put("journalentryid", (je != null ? je.getID() : ""));
                obj.put("costcenterid", (je != null ? je.getCostcenter() == null ? "" : je.getCostcenter().getID() : ""));
                obj.put("costcenterName", (je != null ? je.getCostcenter() == null ? "" : je.getCostcenter().getName() : ""));
                obj.put("lasteditedby", gReceipt.getModifiedby() == null ? "" : (gReceipt.getModifiedby().getFirstName() + " " + gReceipt.getModifiedby().getLastName()));
                obj.put("shipdate", gReceipt.getShipDate() == null ? "" : df.format(gReceipt.getShipDate()));
                obj.put("termid", gReceipt.getTermid() == null ? "" : gReceipt.getTermid().getID());
                obj.put("duedate", gReceipt.getDueDate() == null ? "" : df.format(gReceipt.getDueDate()));
                obj.put("memo", gReceipt.getMemo() == null ? "" : gReceipt.getMemo());
                obj.put("shipvia", gReceipt.getShipvia() == null ? "" : gReceipt.getShipvia());
                obj.put("fob", gReceipt.getFob() == null ? "" : gReceipt.getFob());
                
                boolean includeprotax = false;
                double rowTaxAmt = 0d;
                double taxAmt = 0d;
                if (gReceipt.getTaxEntry() != null) {// if Invoice Level Tax is available
                    taxAmt = gReceipt.getTaxEntry() == null ? 0 : gReceipt.getTaxEntry().getAmount();
                }
                Set<GoodsReceiptDetail> goodsReceiptDetails = gReceipt.getRows();
                for (GoodsReceiptDetail goodsReceiptDetail : goodsReceiptDetails) {
                    if (goodsReceiptDetail.getTax() != null) {
                        includeprotax = true;
                        rowTaxAmt += goodsReceiptDetail.getRowTaxAmount() + goodsReceiptDetail.getRowTermTaxAmount();
                    }
                }
                taxAmt += rowTaxAmt;// either row level tax will be avvailable or invoice level
                obj.put("taxamount", taxAmt);
                obj.put("includeprotax", includeprotax);
                obj.put("taxincluded", gReceipt.getTax() != null);
                obj.put("taxid", gReceipt.getTax() == null ? "" : gReceipt.getTax().getID());
                obj.put("taxname", gReceipt.getTax() == null ? "" : gReceipt.getTax().getName());
                obj.put("billno", gReceipt.getGoodsReceiptNumber());
                obj.put("currencyid", currencyid);
                obj.put("currencysymbol", (gReceipt.getCurrency() == null ? currency.getSymbol() : gReceipt.getCurrency().getSymbol()));
                obj.put("currencycode", (gReceipt.getCurrency() == null ? currency.getCurrencyCode() : gReceipt.getCurrency().getCurrencyCode()));
                KwlReturnObject bAmt = accCurrencyDAOobj.getBaseToCurrencyAmount(requestParams, 1.0, currencyid, gReceipt.getCreationDate(), 0);
                obj.put("oldcurrencyrate", (Double) bAmt.getEntityList().get(0));
                obj.put("date", df.format(gReceipt.getCreationDate()));
                JournalEntryDetail d = gReceipt.getVendorEntry();
                Account account = d.getAccount();
                if (account.getID().equals(cashAccount)) {
                    obj.put("incash", true);
                } else {
                    obj.put("incash", false);
                }
                JournalEntryDetail invoiceTaxEntry = gReceipt.getTaxEntry();
                /*
                 * For Product search, add Products details from Good Receipt details
                 */

                String idvString = !StringUtil.isNullOrEmpty(oj[3].toString()) ? oj[3].toString() : ""; //as in list grdetails id comes 4th
                KwlReturnObject objItrID = accountingHandlerDAOobj.getObject(GoodsReceiptDetail.class.getName(), idvString);
                GoodsReceiptDetail idvObj = (GoodsReceiptDetail) objItrID.getEntityList().get(0);

                if (idvObj != null) {
                    obj.put("rowproductname", idvObj.getInventory().getProduct().getName());
                    obj.put("rowproductid", idvObj.getInventory().getProduct().getProductid());
                    obj.put("rowproductdescription", StringUtil.isNullOrEmpty(idvObj.getDescription()) ? "" : idvObj.getDescription());
                    double quantity = idvObj.getInventory().getQuantity();
                    obj.put("rowquantity", authHandler.formattedQuantity(quantity, companyid)); //To show quantity with four decimal point in PDF & Print
                    double baseuomrate = idvObj.getInventory().getBaseuomrate();
                    double baseUOMQuantity = quantity * baseuomrate;
                    obj.put("rowbaseuomquantity", authHandler.formattedQuantity(baseUOMQuantity, companyid)); //To show Base UOM Quantity with four decimal point in PDF & Print
                    obj.put("rowrate", idvObj.getRate());
                    obj.put("uom", idvObj.getInventory().getUom()!=null ? idvObj.getInventory().getUom().getNameEmptyforNA():"");// used in jasper pdf
                    Map amthm = accGoodsReceiptCommon.getGoodsReceiptProductAmount(idvObj.getGoodsReceipt(), companyid);
                    Object[] val = (Object[]) amthm.get(idvObj);
//                    double amount = authHandler.round((Double) val[0], companyid); // authHandler.round(quantity * idvObj.getRate(), Constants.AMOUNT_DIGIT_AFTER_DECIMAL); 
                    double amount = authHandler.round((idvObj.getRate() * quantity), companyid);
                    double discount = idvObj.getDiscount() != null ? idvObj.getDiscount().getDiscountValue() : 0;
                    double amountWithoutTax = 0;
                    /**
                     * If transaction is includingGST then get rate including GST for calculation
                     */
                    if(!idvObj.getGoodsReceipt().isGstIncluded()){
                        amountWithoutTax = amount - discount;
                        amount = amountWithoutTax;
                    } else{
                        amountWithoutTax = (idvObj.getRateincludegst() * quantity) - discount;
                        amount = (idvObj.getRateincludegst() * quantity) - discount - idvObj.getRowTaxAmount();
                    }
                    obj.put("amount", amountWithoutTax);
//                    double amountWithoutTax = authHandler.round((Double) val[3], companyid);
                    double amountInBase = (Double) accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, amount, currencyid, idvObj.getGoodsReceipt().getCreationDate(), idvObj.getGoodsReceipt().getExternalCurrencyRate()).getEntityList().get(0);
                    obj.put("amountinbase", amountInBase);
                    double rowTaxPercent = 0;
                    double rowTaxAmount = 0;
                    boolean isRowTaxApplicable = false;
                    if (idvObj.getTax() != null) {
                        KwlReturnObject perresult = accTaxObj.getTaxPercent(companyid, gReceipt.getCreationDate(), idvObj.getTax().getID());
                        rowTaxPercent = (Double) perresult.getEntityList().get(0);
                        isRowTaxApplicable = (Boolean) perresult.getEntityList().get(1);
                    }
                    obj.put("rowprtaxpercent", rowTaxPercent);
                    if (idvObj.isWasRowTaxFieldEditable()) { //After made row tax field editable tax calculation will be take place according to row tax amount. -From DATE - 28 -Jan-2014
                        if (isRowTaxApplicable) {
                            rowTaxAmount = (Double) accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, (idvObj.getRowTaxAmount()+idvObj.getRowTermTaxAmount()), currencyid, idvObj.getGoodsReceipt().getCreationDate(), idvObj.getGoodsReceipt().getExternalCurrencyRate()).getEntityList().get(0);;

                        }
                    } else {// for earlier invoices it will be done according to row tax percent as selected in Tax combo column.
                        rowTaxAmount = amountInBase * rowTaxPercent / 100;
                    }

                    if (rowTaxPercent > 0) {
                        obj.put("amountinbasewithtax", amountInBase + (rowTaxAmount));//obj.put("amountinbasewithtax", amountInBase + (amountInBase * rowTaxPercent/100));
                    } else {
                        obj.put("amountinbasewithtax", amountInBase);
                    }
                }

                requestParams.put("taxtype", 2);
                double percent = 0.0;
                KwlReturnObject result = accTaxObj.getTax(requestParams);
                List<Object[]> listTax = result.getEntityList();

                if (listTax != null && !listTax.isEmpty()) {
                    for (Object[] row : listTax) {
                        if (row[2] == null) {
                            continue;
                        }
                        Tax tax = (Tax) row[0];
                        if (gReceipt.getTax() != null ? tax.getID().equals(gReceipt.getTax().getID()) : false) {
                            percent = (Double) row[1];
                        }
                    }
                }
                if (invoiceTaxEntry != null) {
                    double amountInBaseWithInLineTax = obj.getDouble("amountinbasewithtax");
                    double amount = obj.getDouble("amountinbasewithtax");
                    double taxAmount = amount * percent / 100;
                    if (taxAmount > 0) {
                        obj.put("amountinbasewithtax", amountInBaseWithInLineTax + (taxAmount));//obj.put("amountinbasewithtax", amountInBase + (amountInBase * rowTaxPercent/100));
                    } else {
                        obj.put("amountinbasewithtax", amountInBaseWithInLineTax);
                    }
                }
                if (isExport) {
                    totalAmountWithTax += obj.optDouble("amountinbase", 0);
                    totalAmountWithoutTax += obj.optDouble("amountinbasewithtax", 0);
                    totalAmount += obj.optDouble("amount", 0);
                }
                jArr.put(obj);
            }
            if (isExport) {
                JSONObject obj = new JSONObject();
                obj.put("customername", "Total");
                obj.put("amountinbase", totalAmountWithTax);
                obj.put("amountinbasewithtax", totalAmountWithoutTax);
                obj.put("amount", totalAmount);
                jArr.put(obj);
            }

            jobj.put("data", jArr);
        } catch (JSONException ex) {
            throw ServiceException.FAILURE("getInvoiceJson : " + ex.getMessage(), ex);
        }
        return jobj;
    }
    public ModelAndView getWeeklyCashFlowUnPaidInvoices(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        JSONArray DataJArr = new JSONArray();
        boolean issuccess = false;
        String msg = "";
        try{

            HashMap<String, Object> requestParams = getGoodsReceiptMap(request);
            boolean consolidateFlag = request.getParameter("consolidateFlag")!=null?Boolean.parseBoolean(request.getParameter("consolidateFlag")):false;            
            boolean ispendingpayment = request.getParameter("ispendingpayment")!=null?Boolean.parseBoolean(request.getParameter("ispendingpayment")):false;            
            String[] companyids = (consolidateFlag && request.getParameter("companyids")!=null)?request.getParameter("companyids").split(","):sessionHandlerImpl.getCompanyid(request).split(",");
            String gcurrencyid = (consolidateFlag && request.getParameter("gcurrencyid")!=null)?request.getParameter("gcurrencyid"):sessionHandlerImpl.getCurrencyID(request);            
            int datefilter = StringUtil.getInteger(request.getParameter("datefilter"));// 0 = Invoice Due date OR 1 = Invoice date
            boolean report = request.getParameter("report")!=null?Boolean.parseBoolean(request.getParameter("report")):false;
            boolean isAged = request.getParameter("isAged")!=null?Boolean.parseBoolean(request.getParameter("isAged")):false;
            requestParams.put("datefilter", datefilter);
            requestParams.put("report", report);        
            boolean isForTemplate = false;
            if(!StringUtil.isNullOrEmpty(request.getParameter("isForTemplate"))){
                isForTemplate = Boolean.parseBoolean(request.getParameter("isForTemplate"));
            }
            String companyid = "";
             String dir = "";
            String sort = "";
            if(!StringUtil.isNullOrEmpty(request.getParameter("dir")) && !StringUtil.isNullOrEmpty(request.getParameter("sort"))){
                dir = request.getParameter("dir");
                 sort = request.getParameter("sort");
                   requestParams.put("sort", sort);
                requestParams.put("dir", dir);
            }
            for(int cnt=0; cnt<companyids.length; cnt++) {
                companyid = companyids[cnt];                
                request.setAttribute("companyid", companyid);
                request.setAttribute("gcurrencyid", gcurrencyid);
                requestParams.put("companyid", companyid);
                requestParams.put("gcurrencyid", gcurrencyid);
                requestParams.put("isForTemplate", isForTemplate);
               
                KwlReturnObject result = accGoodsReceiptobj.WeeklyCashFlowUnPaidInvoices(requestParams);
                List list = result.getEntityList();
                
                requestParams.put("timezonediff", TimeZone.getTimeZone("GMT"+sessionHandlerImpl.getTimeZoneDifference(request)));
                requestParams.put("tmz", sessionHandlerImpl.getTimeZoneDifference(request));
                DataJArr = getWeeklyCashFlowUnPaidInvoicesMerged(requestParams, list, DataJArr);
            }
            
            if (isAged) {
                JSONArray debitNotejArr = new JSONArray();
                requestParams.put("agedReport", true);
                KwlReturnObject result = accDebitNoteobj.getDebitNoteMerged(requestParams);
                debitNotejArr = AccGoodsReceiptServiceHandler.getDebitNotesMergedJson(requestParams, result.getEntityList(), debitNotejArr,accCurrencyDAOobj,accountingHandlerDAOobj,accReceiptDAOobj,accDebitNoteobj,accAccountDAOobj, fieldDataManagercntrl, accJournalEntryobj);
                for (int i = 0; i < debitNotejArr.length(); i++) {
                    DataJArr.put(debitNotejArr.get(i));
                }
                
                requestParams.put("cntype", 4);//This is used for getting Credit note against vendor 
                JSONArray CreditNotejArr = new JSONArray();
                result = accCreditNoteDAOobj.getCreditNoteMerged(requestParams);
                CreditNotejArr = AccGoodsReceiptServiceHandler.getCreditNotesMergedJson(requestParams, result.getEntityList(), CreditNotejArr,accCurrencyDAOobj,accountingHandlerDAOobj,accPaymentDAOobj,accVendorPaymentobj,accDebitNoteobj,accAccountDAOobj, fieldDataManagercntrl, accJournalEntryobj);   
                for(int i=0; i<CreditNotejArr.length();i++){
                  DataJArr.put(CreditNotejArr.get(i));    
                }
                requestParams.remove("cntype");
                
                requestParams.put("isadvancepayment", true);//Only Advance payment type make payments required so it is true 
                JSONArray makePaymentJArr = new JSONArray();
                requestParams.put("allAdvPayment", true); // needs only Advance type record so that putted true
                requestParams.put("paymentWindowType", 1);//Payment to Vendor record
                result = accVendorPaymentobj.getPayments(requestParams);  
                companyid = sessionHandlerImpl.getCompanyid(request);
                requestParams.put("companyid", companyid);
                makePaymentJArr = AccGoodsReceiptServiceHandler.getPaymentsJson(requestParams, result.getEntityList(),makePaymentJArr,accCurrencyDAOobj,accountingHandlerDAOobj,accVendorPaymentobj);
                for (int i = 0; i < makePaymentJArr.length(); i++) {
                    DataJArr.put(makePaymentJArr.get(i));
                }
                requestParams.remove("isadvancepayment");

                requestParams.put("allAdvPayment", true); // needs only refund type record so that putted true
                requestParams.put("paymentWindowType", 2);//Receipt to Vendor record
                JSONArray receivePaymentJArr = new JSONArray();
                result = accReceiptDAOobj.getReceipts(requestParams);
                receivePaymentJArr = AccInvoiceServiceHandler.getReceiptsJson(requestParams, result.getEntityList(), receivePaymentJArr, accountingHandlerDAOobj, authHandlerDAOObj, accCurrencyDAOobj, accReceiptDAOobj, request, accAccountDAOobj, fieldDataManagercntrl, accJournalEntryobj);
                for (int i = 0; i < receivePaymentJArr.length(); i++) {
                    DataJArr.put(receivePaymentJArr.get(i));
                }
                requestParams.remove("allAdvPayment");
                requestParams.remove("paymentWindowType");
                }
            
            if(request.getParameter("minimumAmountDue")!=null){
               JSONArray temp = new JSONArray();
               double minimumAmountDue = Double.parseDouble(request.getParameter("minimumAmountDue").toString());
               for(int i = 0; i < DataJArr.length(); i++) {
                   if(DataJArr.getJSONObject(i).getDouble(AMOUNTDUE) >= minimumAmountDue)
                       temp.put(DataJArr.getJSONObject(i));
               }
               DataJArr = temp;
            } else if(ispendingpayment){
               JSONArray temp = new JSONArray();
               for(int i = 0; i < DataJArr.length(); i++) {
                   if(DataJArr.getJSONObject(i).getDouble(AMOUNTDUE) > 0)
                       temp.put(DataJArr.getJSONObject(i));
               }
               DataJArr = temp;
            }
            int count = DataJArr.length();
            JSONArray arrayOfColumn = new JSONArray();
            for (int i = 0; i < DataJArr.length(); i++) {
                if (DataJArr.getJSONObject(i).has("columns")) {   
                    arrayOfColumn.put(DataJArr.getJSONObject(i));
                }
            }
            JSONArray arrayOfInvoiceData= new JSONArray();
            for (int i = 0; i < DataJArr.length(); i++) {
                if (DataJArr.getJSONObject(i).has("persondata")) {   
                    arrayOfInvoiceData.put(DataJArr.getJSONObject(i));
                }
            }
            
            JSONArray pagedJson = arrayOfInvoiceData;
            String start = request.getParameter(START);
            String limit = request.getParameter(LIMIT);
            if (!StringUtil.isNullOrEmpty(start) && !StringUtil.isNullOrEmpty(limit)) {
                pagedJson = StringUtil.getPagedJSON(arrayOfInvoiceData, Integer.parseInt(start), Integer.parseInt(limit));
            }
           
            if(isAged){
              String sortKey = "type";
              JSONArray array=AccountingManager.sortJsonArrayOnStringValues(pagedJson,sortKey,true);
              sortKey = "personname";
              array = AccountingManager.sortJsonArrayOnStringValues(array,sortKey,true);//show multigrouping JSONArray required to sort    
              JSONArray arrayWithColumns=new JSONArray();
              arrayWithColumns.put(array);
              arrayWithColumns.put(arrayOfColumn);
              jobj.put( DATA,arrayWithColumns);   
            }else{
               jobj.put( DATA,pagedJson);  
            }
            jobj.put( COUNT,count);
            issuccess = true;
        } catch (SessionExpiredException | ServiceException ex) {
            msg = ex.getMessage();
            Logger.getLogger(accGoodsReceiptController.class.getName()).log(Level.SEVERE, null, ex);
        }  catch (Exception ex) {
            msg = "accGoodsReceiptController.getGoodsReceipts : "+ex.getMessage();
        } finally {
            try {
                jobj.put( SUCCESS,issuccess);
                jobj.put( MSG,msg);
            } catch (JSONException ex) {
                Logger.getLogger(accGoodsReceiptController.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return new ModelAndView(JSONVIEW,MODEL, jobj.toString());
    }
    
    public JSONArray getWeeklyCashFlowUnPaidInvoicesMerged(HashMap<String, Object> request, List<GoodsReceipt> list, JSONArray jArr) throws ServiceException {
        JSONArray tempArray= new JSONArray();
        try {
            String companyid = (String) request.get(COMPANYID);
            String currencyid = (String) request.get(GCURRENCYID);
            DateFormat df = (DateFormat) request.get(DATEFORMAT);
            String only1099AccStr = (String) request.get(ONLY1099ACC);
            List ll = null;
            KwlReturnObject curresult = accountingHandlerDAOobj.getObject(KWLCurrency.class.getName(), currencyid);
            KWLCurrency currency = (KWLCurrency) curresult.getEntityList().get(0);
            double taxPercent = 0;
            boolean belongsTo1099 = false;
            boolean isProduct = (request.containsKey(PRODUCTID) && !StringUtil.isNullOrEmpty((String)request.get(PRODUCTID)))? true : false;
            boolean only1099Acc = (only1099AccStr != null ? Boolean.parseBoolean(only1099AccStr) : false);
            boolean ignoreZero = request.get(IGNOREZERO) != null;
            boolean onlyAmountDue = request.get(ONLYAMOUNTDUE) != null;
            boolean report=request.get("report")!=null;
            int duration = 7;
            int intervals=(request.containsKey(DURATION) && request.get(DURATION)!=null)?Integer.parseInt(request.get(DURATION).toString()):30;
            String curDateString = "";
            Date curDate = null;
            boolean booleanAged = false;//Added for aged payable/receivable

            HashMap<String, String> customFieldMap = new HashMap<String, String>();
            HashMap<String, String> customDateFieldMap = new HashMap<String, String>();
            
            HashMap<String, Object> fieldrequestParams = new HashMap();
            fieldrequestParams.put(Constants.filter_names, Arrays.asList(Constants.companyid, Constants.moduleid));
            fieldrequestParams.put(Constants.filter_values, Arrays.asList(companyid, Constants.Acc_Vendor_Invoice_ModuleId));
            HashMap<String, String> replaceFieldMap = new HashMap<String, String>();
            HashMap<String, Integer> FieldMap = accAccountDAOobj.getFieldParamsCustomMap(fieldrequestParams, replaceFieldMap,customFieldMap,customDateFieldMap);

            
            Calendar cal1 = Calendar.getInstance();
            Calendar cal2 = Calendar.getInstance();
            Calendar cal3 = Calendar.getInstance();
            Calendar cal4 = Calendar.getInstance();
            Calendar cal5 = Calendar.getInstance();
            Calendar cal6 = Calendar.getInstance();
            Calendar cal7 = Calendar.getInstance();

            if (request.get("startdate") != null) {//Added for aged payable/receivable
                curDateString = (String) request.get("startdate");
                curDate = df.parse(curDateString);
                booleanAged = true;
                cal1.setTime(curDate);
                cal2.setTime(curDate);
                cal3.setTime(curDate);
                cal4.setTime(curDate);
                cal5.setTime(curDate);
                cal6.setTime(curDate);
                cal7.setTime(curDate);
                cal2.add(Calendar.DAY_OF_YEAR, -duration);
                cal3.add(Calendar.DAY_OF_YEAR, -(duration * 2));
                cal4.add(Calendar.DAY_OF_YEAR, -(duration * 3));
                cal5.add(Calendar.DAY_OF_YEAR, -(duration * 4));
                cal6.add(Calendar.DAY_OF_YEAR, -(duration * 5));
                cal7.add(Calendar.DAY_OF_YEAR, -(duration * 6));
            }
            
            double amountdue1 = 0;
            double amountdue2 = 0;
            double amountdue3 = 0;
            double amountdue4 = 0;
            double amountdue5 = 0;
            double amountdue6 = 0;
            double amountdue7 = 0;
            double amountdue8 = 0;

            if (list != null && !list.isEmpty()) {
                Iterator itr = list.iterator();
                while (itr.hasNext()) {

                    Object[] oj = (Object[]) itr.next();
                    String invid = oj[0].toString();
                    //Withoutinventory 0 for normal, 1 for billing
                    boolean withoutinventory = Boolean.parseBoolean(oj[1].toString());
                    if (withoutinventory) {
                        amountdue1 = amountdue2 = amountdue3 = amountdue4 = amountdue5 = amountdue6 = amountdue7 = amountdue8 = 0;
                        taxPercent = 0;
                        double deductDiscount = 0;

                        KwlReturnObject objItr = accountingHandlerDAOobj.getObject(BillingGoodsReceipt.class.getName(), invid);
                        BillingGoodsReceipt invoice = (BillingGoodsReceipt) objItr.getEntityList().get(0);

                        double totalDiscount = (invoice.getDiscount() == null ? 0 : invoice.getDiscount().getDiscountValue());
                        JournalEntry je = invoice.getJournalEntry();
                        JournalEntryDetail d = invoice.getVendorEntry();
                        Account account = d.getAccount();
                        double amount = 0, ramount = 0;
                        Iterator itrBir = accGoodsReceiptCommon.applyBillingDebitNotes(request, invoice).values().iterator();
                        while (itrBir.hasNext()) {
                            Object[] temp = (Object[]) itrBir.next();
                            amount += (Double) temp[0] - (Double) temp[2]; // - (Double) temp[3];
                            deductDiscount += (Double) temp[3];
                        }
                        JournalEntryDetail tempd = invoice.getShipEntry();
                        if (tempd != null) {
                            amount += tempd.getAmount();
                        }
                        tempd = invoice.getOtherEntry();
                        if (tempd != null) {
                            amount += tempd.getAmount();
                        }
                        tempd = invoice.getTaxEntry();
                        if (tempd != null) {
                            amount += tempd.getAmount();
                        }
                        amount = amount - (totalDiscount - deductDiscount);
                        KwlReturnObject brdAmt = accGoodsReceiptobj.getAmtromBPD(invoice.getID());
                        List l = brdAmt.getEntityList();
                        //                String q = "select sum(amount) from BillingPaymentDetail pd where pd.billingPayment.deleted=false and pd.billingGoodsReceipt.ID=? group by pd.billingGoodsReceipt";
                        //                List l = HibernateUtil.executeQuery(session, q, invoice.getID());
                        ramount = (l.isEmpty() ? 0 : (Double) l.get(0));
                        currencyid = (invoice.getCurrency() == null ? currency.getCurrencyID() : invoice.getCurrency().getCurrencyID());
                        double amountdue = amount - ramount;
                        int isReval=0;
                        if(report){
                            brdAmt = accGoodsReceiptobj.getRevalFlag(invoice.getID());
                            List reval = brdAmt.getEntityList();
                            if(!reval.isEmpty() && (Long)reval.get(0) >0){
                                isReval=1;
                            }
                        }
                        if (onlyAmountDue && authHandler.round(amountdue, companyid) == 0) {
                            continue;
                        }
                        JSONObject obj = new JSONObject();
                        obj.put(BILLID, invoice.getID());
                        obj.put("isOpeningBalanceTransaction", false);
                        obj.put("companyid", invoice.getCompany().getCompanyID());
                        obj.put("companyname", invoice.getCompany().getCompanyName());
                        obj.put("withoutinventory", withoutinventory);
                        obj.put(PERSONID, invoice.getVendor() == null ? account.getID() : invoice.getVendor().getID());// account.getID());
                        obj.put(PERSONEMAIL, invoice.getVendor() == null ? "" : invoice.getVendor().getEmail());
                        //obj.put("crdraccid", invoice.getDebtorEntry().getAccount().getID());// account.getID());
                        obj.put(BILLNO, invoice.getBillingGoodsReceiptNumber());
                        obj.put(CURRENCYID, currencyid);
                        obj.put(CURRENCYSYMBOL, (invoice.getCurrency() == null ? currency.getSymbol() : invoice.getCurrency().getSymbol()));
                        obj.put(CURRENCYNAME, (invoice.getCurrency() == null ? currency.getName() : invoice.getCurrency().getName()));
                        obj.put("currencyCode", (invoice.getCurrency() == null ? currency.getCurrencyCode() : invoice.getCurrency().getCurrencyCode()));
                        obj.put(COMPANYADDRESS, invoice.getCompany().getAddress());
                        obj.put(OLDCURRENCYRATE, accCurrencyDAOobj.getBaseToCurrencyAmount(request, 1.0, currencyid, je.getEntryDate(), je.getExternalCurrencyRate()).getEntityList().get(0));
                        obj.put(BILLTO, invoice.getBillFrom());
                        obj.put(SHIPTO, invoice.getShipFrom());
                        obj.put(JOURNALENTRYID, je.getID());
                        obj.put(ENTRYNO, je.getEntryNumber());
                        obj.put("externalcurrencyrate", je.getExternalCurrencyRate());
                        obj.put(DATE, df.format(je.getEntryDate()));
                        obj.put(SHIPDATE, invoice.getShipDate()==null? "" : df.format(invoice.getShipDate()));
                        obj.put(DUEDATE, df.format(invoice.getDueDate()));
                        obj.put(PERSONNAME, invoice.getVendor() == null ? account.getName() : invoice.getVendor().getName());
                        obj.put(TAXAMOUNT, invoice.getTaxEntry() == null ? 0 : invoice.getTaxEntry().getAmount());
                        obj.put(TERMNAME, invoice.getVendor() == null ? "" : ((invoice.getVendor().getDebitTerm() == null)?"":invoice.getVendor().getDebitTerm().getTermname()));
                        obj.put(TAXINCLUDED, invoice.getTax() == null ? false : true);
                        obj.put(TAXID, invoice.getTax() == null ? "" : invoice.getTax().getID());
                        obj.put(TAXNAME, invoice.getTax() == null ? "" : invoice.getTax().getName());
                        obj.put(MEMO, invoice.getMemo());
                        obj.put("posttext", invoice.getPostText());
                        obj.put(DELETED, invoice.isDeleted());
                        obj.put(DISCOUNT, invoice.getDiscount() == null ? 0 : invoice.getDiscount().getDiscountValue());
                        obj.put(ISPERCENTDISCOUNT, invoice.getDiscount() == null ? false : invoice.getDiscount().isInPercent());
                        obj.put(DISCOUNTVAL, invoice.getDiscount() == null ? 0 : invoice.getDiscount().getDiscount());
                        obj.put("shipvia", invoice.getShipvia()==null?"":invoice.getShipvia());
                        obj.put("fob", invoice.getFob()==null?"":invoice.getFob());
                        obj.put(CCConstants.JSON_costcenterid, je.getCostcenter() == null ? "" : je.getCostcenter().getID());
                        obj.put(CCConstants.JSON_costcenterName, je.getCostcenter() == null ? "" : je.getCostcenter().getName());
                        obj.put("archieve", 0);
                        obj.put("termdetails", AccGoodsReceiptServiceHandler.getTermDetails(invoice.getID(),accGoodsReceiptobj));
                        obj.put("billto",invoice.getBillTo()==null?"":invoice.getBillTo());
                        obj.put("shipto",invoice.getShipTo()==null?"":invoice.getShipTo());
                        if(report){
                            obj.put("isreval", isReval);
                        }    
                        int pendingApprovalInt = invoice.getPendingapproval();
                        obj.put("approvalstatusint", pendingApprovalInt);
                        if(pendingApprovalInt == Constants.LEVEL_ONE) {
                            obj.put("approvalstatus", "Pending level 1 approval");
                        } else if(pendingApprovalInt == Constants.LEVEL_TWO) {
                            obj.put("approvalstatus", "Pending level 2 approval");
                        } else {
                            obj.put("approvalstatus", "");
                        }
                        
                        obj.put("isfavourite", invoice.isFavourite());
                            obj.put(AMOUNTDUE, authHandler.round(amountdue, companyid));
                            if (booleanAged) {
                                //int datefilter = request.containsKey("datefilter") ? (Integer) request.get("datefilter") : 0;
                                int datefilter = (request.containsKey("datefilter") && request.get("datefilter") != null) ? Integer.parseInt(request.get("datefilter").toString()) : 0;// 0 = Invoice Due date OR 1 = Invoice date
                                Date dueDate = null;
                                    if (!StringUtil.isNullOrEmpty(df.format(invoice.getDueDate()))) {
                                    dueDate = df.parse(df.format(invoice.getDueDate()));
                                }
                                if(datefilter==0)
                                    dueDate = df.parse(df.format(invoice.getDueDate()));
                               else 
                                    dueDate = df.parse(df.format(invoice.getJournalEntry().getEntryDate()));

                                Date cal1Date = null;
                                Date cal2Date = null;
                                String cal1String = "";
                                String cal2String = "";
                                for (int interVal = 0; interVal < intervals; interVal++) {
                                    cal1.setTime(curDate);
                                    cal1.add(Calendar.DAY_OF_YEAR, duration * interVal);

                                    cal2.setTime(curDate);
                                    cal2.add(Calendar.DAY_OF_YEAR, duration * (interVal + 1));

                                    cal1String = authHandler.getDateOnlyFormat().format(cal1.getTime());
                                    cal1Date = authHandler.getDateOnlyFormat().parse(cal1String);

                                    cal2String = authHandler.getDateOnlyFormat().format(cal2.getTime());
                                    cal2Date = authHandler.getDateOnlyFormat().parse(cal2String);
                                    
                                    if (dueDate.after(cal1Date) && dueDate.before(cal2Date)) {
                                        amountdue1 = authHandler.round(amountdue, companyid);
                                        obj.put("amountdue"+interVal, amountdue1);
                                    }
                                }   
                            }


                            obj.put(AMOUNTDUEINBASE, authHandler.round((Double) accCurrencyDAOobj.getCurrencyToBaseAmount(request, amountdue, currencyid, je.getEntryDate(), je.getExternalCurrencyRate()).getEntityList().get(0), companyid));
                        obj.put(AMOUNTDUENONNEGATIVE, authHandler.round(amountdue, companyid));
                        obj.put(AMOUNT, d.getAmount());
                        obj.put(AMOUNTINBASE, authHandler.round((Double) accCurrencyDAOobj.getCurrencyToBaseAmount(request, d.getAmount(), currencyid, je.getEntryDate(), je.getExternalCurrencyRate()).getEntityList().get(0), companyid));

                        obj.put(AMOUNTDUE1, amountdue1);
                        obj.put(AMOUNTDUE2, amountdue2);
                        obj.put(AMOUNTDUE3, amountdue3);
                        obj.put(AMOUNTDUE4, amountdue4);
                        obj.put(AMOUNTDUE5, amountdue5);
                        obj.put(AMOUNTDUE6, amountdue6);
                        obj.put(AMOUNTDUE7, amountdue7);
                        obj.put(AMOUNTDUE8, amountdue8);
                        obj.put(TYPE, "Vendor Invoice");
                        obj.put(DEDUCTDISCOUNT, deductDiscount);
                        boolean includeprotax = false;
                        Set<BillingGoodsReceiptDetail> billingGoodsReceiptDetails = invoice.getRows();
                        for (BillingGoodsReceiptDetail billingGoodsReceiptDetail : billingGoodsReceiptDetails) {
                             if (billingGoodsReceiptDetail.getTax() != null) {
                                  includeprotax = true;
                                break;
                            }
                        }
                        obj.put("includeprotax", includeprotax);
                    
                        if (!(ignoreZero && authHandler.round(amountdue, companyid) <= 0)) {
                            jArr.put(obj);
                        }
                        if (invoice.getTax() != null) {
                            //                    taxPercent = CompanyHandler.getTaxPercent(session, request, je.getEntryDate(), invoice.getTax().getID());
                            KwlReturnObject perresult = accTaxObj.getTaxPercent(companyid, je.getEntryDate(), invoice.getTax().getID());
                            taxPercent = (Double) perresult.getEntityList().get(0);
                        }
                        obj.put(TAXPERCENT, taxPercent);  //tax in percent applyind on invoice

                    } else {
                        amountdue1 = amountdue2 = amountdue3 = amountdue4 = amountdue5 = amountdue6 = amountdue7 = amountdue8 = 0;
                        KwlReturnObject objItr = accountingHandlerDAOobj.getObject(GoodsReceipt.class.getName(), invid);
                        GoodsReceipt gReceipt = (GoodsReceipt) objItr.getEntityList().get(0);

                        JournalEntry je = null;
                        JournalEntryDetail d = null;
                        if(gReceipt.isNormalInvoice()){
                            je = gReceipt.getJournalEntry();
                            d = gReceipt.getVendorEntry();
                        }
                        
                        double invoiceOriginalAmt = 0d;
                        double externalCurrencyRate = 0d;
                        boolean isopeningBalanceInvoice = gReceipt.isIsOpeningBalenceInvoice();
                        Date creationDate = null;
                        
                        currencyid = (gReceipt.getCurrency() == null ? currency.getCurrencyID() : gReceipt.getCurrency().getCurrencyID());
                        Account account = null;
                        creationDate = gReceipt.getCreationDate();
                        if (gReceipt.isIsOpeningBalenceInvoice() && !gReceipt.isNormalInvoice()) {
                            KwlReturnObject accObjItr = accountingHandlerDAOobj.getObject(Account.class.getName(), gReceipt.getVendor().getAccount().getID());
                            account = (Account) accObjItr.getEntityList().get(0);
                            externalCurrencyRate = gReceipt.getExchangeRateForOpeningTransaction();
                            invoiceOriginalAmt = gReceipt.getOriginalOpeningBalanceAmount();
                        } else {
                            account = d.getAccount();
                            externalCurrencyRate = je.getExternalCurrencyRate();
                            invoiceOriginalAmt = d.getAmount();
                        }
                        double amountdue = 0, deductDiscount = 0;
                        if (gReceipt.isIsExpenseType()) {
                            ll = accGoodsReceiptCommon.getExpGRAmountDue(request, gReceipt);
                            amountdue = (Double) ll.get(1);
                            belongsTo1099 = (Boolean) ll.get(3);
                        } else {
                            if (gReceipt.isIsOpeningBalenceInvoice() && !gReceipt.isNormalInvoice()) {
                                ll = new ArrayList();
                                ll.add(gReceipt.getOriginalOpeningBalanceAmount());
                                ll.add(gReceipt.getOpeningBalanceAmountDue());
                                ll.add("");
                                ll.add(false);
                                ll.add(0.0);
                            } else {
                                if(Constants.InvoiceAmountDueFlag) {
                                    ll = accGoodsReceiptCommon.getInvoiceDiscountAmountInfo(request, gReceipt);
                                } else {
                                    ll = accGoodsReceiptCommon.getGRAmountDue(request, gReceipt);
                                }
                            }
                            
                            amountdue = (Double) ll.get(1);
                            belongsTo1099 = (Boolean) ll.get(3);
                            deductDiscount = (Double) ll.get(4);
                        }
                        if (onlyAmountDue && authHandler.round(amountdue, companyid) == 0 || (only1099Acc && !belongsTo1099)) {//remove //belongsTo1099&&gReceipt.isIsExpenseType()\\ in case of viewing all accounts. [PS]
                            continue;
                        }
                       int isReval=0;
                       if(report){ 
                        KwlReturnObject brdAmt = accGoodsReceiptobj.getRevalFlag(gReceipt.getID());
                        List reval = brdAmt.getEntityList();
                            if(!reval.isEmpty() && (Long)reval.get(0) >0){
                                isReval=1;
                            }
                       }
                                              
                       if(request.containsKey("excludeInvoiceId") && request.get("excludeInvoiceId")!=null) {
                           String excludeInvoiceId = (String) request.get("excludeInvoiceId");
                           if(gReceipt.getGoodsReceiptNumber().equals(excludeInvoiceId))
                               continue;
                       }
                       
                        JSONObject obj = new JSONObject();
                        obj.put(BILLID, gReceipt.getID());
                        obj.put("isOpeningBalanceTransaction", gReceipt.isIsOpeningBalenceInvoice());
                        obj.put("isNormalTransaction", gReceipt.isNormalInvoice());
                        obj.put("companyid", gReceipt.getCompany().getCompanyID());
                        obj.put("companyname", gReceipt.getCompany().getCompanyName());
                        obj.put("withoutinventory", withoutinventory);
                        obj.put(PERSONID, gReceipt.getVendor() == null ? account.getID() : gReceipt.getVendor().getID());
                        obj.put(PERSONEMAIL, gReceipt.getVendor() == null ? "" : gReceipt.getVendor().getEmail());
                        obj.put(BILLNO, gReceipt.getGoodsReceiptNumber());
                        obj.put(CURRENCYID, currencyid);
                        obj.put(CURRENCYSYMBOL, (gReceipt.getCurrency() == null ? currency.getSymbol() : gReceipt.getCurrency().getSymbol()));
                        obj.put("currencyCode", (gReceipt.getCurrency() == null ? currency.getCurrencyCode() : gReceipt.getCurrency().getCurrencyCode()));
                        obj.put(CURRENCYNAME, (gReceipt.getCurrency() == null ? currency.getName() : gReceipt.getCurrency().getName()));
                        obj.put(COMPANYADDRESS, gReceipt.getCompany().getAddress());
                        obj.put(COMPANYNAME, gReceipt.getCompany().getCompanyName());
                        KwlReturnObject bAmt = accCurrencyDAOobj.getBaseToCurrencyAmount(request, 1.0, currencyid, creationDate, 0);
                        obj.put(OLDCURRENCYRATE, bAmt.getEntityList().get(0));
                        obj.put(BILLTO, gReceipt.getBillFrom());
                        obj.put(ISEXPENSEINV, gReceipt.isIsExpenseType());
                        obj.put(SHIPTO, gReceipt.getShipFrom());
                        obj.put(JOURNALENTRYID, je!=null?je.getID():"");
                        obj.put(EXTERNALCURRENCYRATE, externalCurrencyRate);
                        obj.put(ENTRYNO, je!=null?je.getEntryNumber():"");
                        obj.put(DATE, df.format(creationDate));
                        obj.put(SHIPDATE, gReceipt.getShipDate()==null? "" : df.format(gReceipt.getShipDate()));
                        obj.put(DUEDATE, df.format(gReceipt.getDueDate()));
                        obj.put(PERSONNAME, gReceipt.getVendor() == null ? account.getName() : gReceipt.getVendor().getName());
                        obj.put("agent", gReceipt.getMasterAgent()==null?"":gReceipt.getMasterAgent().getID());
                        obj.put(MEMO, gReceipt.getMemo());
                        obj.put("shiplengthval", gReceipt.getShiplength());
                        obj.put("invoicetype", gReceipt.getInvoicetype());
                        obj.put("posttext", gReceipt.getPostText());
                        obj.put(TERMNAME, gReceipt.getVendor() == null ? "" : ((gReceipt.getVendor().getDebitTerm() == null)?"":gReceipt.getVendor().getDebitTerm().getTermname()));
                        obj.put(DELETED, gReceipt.isDeleted());
                        obj.put(TAXINCLUDED, gReceipt.getTax() == null ? false : true);
                        obj.put(TAXID, gReceipt.getTax() == null ? "" : gReceipt.getTax().getID());
                        obj.put(TAXNAME, gReceipt.getTax() == null ? "" : gReceipt.getTax().getName());
                        obj.put(TAXAMOUNT, gReceipt.getTaxEntry() == null ? 0 : gReceipt.getTaxEntry().getAmount());
                        obj.put(DISCOUNT, gReceipt.getDiscount() == null ? 0 : gReceipt.getDiscount().getDiscountValue());
                        obj.put(ISPERCENTDISCOUNT, gReceipt.getDiscount() == null ? false : gReceipt.getDiscount().isInPercent());
                        obj.put(DISCOUNTVAL, gReceipt.getDiscount() == null ? 0 : gReceipt.getDiscount().getDiscount());
                        obj.put(CCConstants.JSON_costcenterid, je!=null?(je.getCostcenter() == null ? "" : je.getCostcenter().getID()):"");
                        obj.put(CCConstants.JSON_costcenterName, je!=null?(je.getCostcenter() == null ? "" : je.getCostcenter().getName()):"");
                        obj.put("isfavourite", gReceipt.isFavourite());
                        obj.put("isprinted", gReceipt.isPrinted());
                        obj.put("cashtransaction", gReceipt.isCashtransaction());
                        obj.put("archieve", 0);
                        obj.put("shipvia", gReceipt.getShipvia()==null?"":gReceipt.getShipvia());
                        obj.put("fob", gReceipt.getFob()==null?"":gReceipt.getFob());
                        obj.put("termdetails", AccGoodsReceiptServiceHandler.getTermDetails(gReceipt.getID(),accGoodsReceiptobj));
                        obj.put("termdays", gReceipt.getTermid()==null? 0:gReceipt.getTermid().getTermdays());
                        //ERP-20637
                        if (gReceipt.getLandedInvoice() != null) {
                            Set<GoodsReceipt> landInvoiceSet = gReceipt.getLandedInvoice();
                            String landedInvoiceId = "", landedInvoiceNumber = "";
                            for (GoodsReceipt grObj : landInvoiceSet) {
                                if (!(StringUtil.isNullOrEmpty(landedInvoiceId) && StringUtil.isNullOrEmpty(landedInvoiceId))) {
                                    landedInvoiceId += ",";
                                    landedInvoiceNumber += ",";
                                }
                                landedInvoiceId += grObj.getID();
                                landedInvoiceNumber += grObj.getGoodsReceiptNumber();
                            }
                            obj.put("landedInvoiceID", landedInvoiceId);
                            obj.put("landedInvoiceNumber", landedInvoiceNumber);
                        }
                        obj.put("billto",gReceipt.getBillTo()==null?"":gReceipt.getBillTo());
                        obj.put("shipto",gReceipt.getShipTo()==null?"":gReceipt.getShipTo());
                        obj=AccountingAddressManager.getTransactionAddressJSON(obj,gReceipt.getBillingShippingAddresses(),true);
                        if(report){ obj.put("isreval", isReval); }
                        int pendingApprovalInt = gReceipt.getPendingapproval();
                        obj.put("approvalstatusint", pendingApprovalInt);
                        if(pendingApprovalInt == Constants.LEVEL_ONE) {
                            obj.put("approvalstatus", "Pending level 1 approval");
                        } else if(pendingApprovalInt == Constants.LEVEL_TWO) {
                            obj.put("approvalstatus", "Pending level 2 approval");
                        } else {
                            obj.put("approvalstatus", "");
                        }
                        /*For Product search, add Products details from Invoice details*/
                         
                        if(isProduct && gReceipt.isNormalInvoice()) {
                           String idvString = isProduct ? oj[4].toString() : ""; //as in list invoiedetail id comes 4th
                            KwlReturnObject objItrGRD = accountingHandlerDAOobj.getObject(GoodsReceiptDetail.class.getName(), idvString);
                            GoodsReceiptDetail idvObj = (GoodsReceiptDetail) objItrGRD.getEntityList().get(0);
                            if(idvObj != null) {
                                obj.put("rowproductname", idvObj.getInventory().getProduct().getName());
                                obj.put("rowquantity", idvObj.getInventory().isInvrecord() ? idvObj.getInventory().getQuantity() : idvObj.getInventory().getActquantity());
                                obj.put("rowrate", idvObj.getRate()); 
                                
                                Discount disc = idvObj.getDiscount();
                                if (disc != null && disc.isInPercent()) {
                                    obj.put("rowprdiscount", disc.getDiscount()); //product discount in percent
                                } else {
                                    obj.put("rowprdiscount", 0);
                                }
                                
                                double rowTaxPercent = 0;
                                if (idvObj.getTax() != null) {
                                    KwlReturnObject perresult = accTaxObj.getTaxPercent(companyid, gReceipt.getCreationDate(), idvObj.getTax().getID());
                                    rowTaxPercent = (Double) perresult.getEntityList().get(0);
                                }
                                obj.put("rowprtaxpercent", rowTaxPercent);
                                
                            }
                        }


                        //For getting tax in percent applyied on invoice [PS]
                        if (gReceipt.getTax() != null) {
                            KwlReturnObject taxresult = accTaxObj.getTaxPercent(companyid, gReceipt.getCreationDate(), gReceipt.getTax().getID());
                            taxPercent = (Double) taxresult.getEntityList().get(0);
                        }
                        obj.put(TAXPERCENT, taxPercent);

                        //For getting amountdue [PS]
                        if (gReceipt.isCashtransaction()) {
                            obj.put(AMOUNTDUEINBASE, 0);
                            obj.put(AMOUNTDUE, 0);
                            obj.put(AMOUNTDUENONNEGATIVE, 0);
                            obj.put(INCASH, true);
                        } else {
                            if (isopeningBalanceInvoice && gReceipt.isConversionRateFromCurrencyToBase()) {// if invoice is opening balance invoice and Conversion rate is taken from user is Currency to base then following method will be called.
                                bAmt = accCurrencyDAOobj.getCurrencyToBaseAmountAccordingToCurrencyToBaseExchangeRate(request, amountdue, currencyid, creationDate, externalCurrencyRate);
                            } else {
                                bAmt = accCurrencyDAOobj.getCurrencyToBaseAmount(request, amountdue, currencyid, creationDate, externalCurrencyRate);
                            }
                            obj.put(AMOUNTDUEINBASE, authHandler.round((Double) bAmt.getEntityList().get(0), companyid));
                            obj.put(AMOUNTDUE, authHandler.round(amountdue, companyid));

                            if (booleanAged) {//Added for aged payable/receivable
                               int datefilter = (request.containsKey("datefilter") && request.get("datefilter") != null) ? Integer.parseInt(request.get("datefilter").toString()) : 0;// 0 = Invoice Due date OR 1 = Invoice date
                                Date dueDate = null;
                                    if (!StringUtil.isNullOrEmpty(df.format(gReceipt.getDueDate()))) {
                                    dueDate = df.parse(df.format(gReceipt.getDueDate()));
                                    }
                                if (datefilter == 0) {
                                    dueDate = df.parse(df.format(gReceipt.getDueDate()));
                                } else {
                                    dueDate = df.parse(df.format(creationDate));
                                }
                                Date cal1Date = null;
                                Date cal2Date = null;
                                String cal1String = "";
                                String cal2String = "";

                                for (int interVal = 0; interVal < intervals; interVal++) {
                                    cal1.setTime(curDate);
                                    cal1.add(Calendar.DAY_OF_YEAR, duration * interVal);

                                    cal2.setTime(curDate);
                                    cal2.add(Calendar.DAY_OF_YEAR, duration * (interVal + 1));

                                    cal1String = authHandler.getDateOnlyFormat().format(cal1.getTime());
                                    cal1Date = authHandler.getDateOnlyFormat().parse(cal1String);

                                    cal2String = authHandler.getDateOnlyFormat().format(cal2.getTime());
                                    cal2Date = authHandler.getDateOnlyFormat().parse(cal2String);
                                    if (dueDate.after(cal1Date) && dueDate.before(cal2Date)) {
                                        amountdue1 = authHandler.round(amountdue, companyid);
                                        obj.put("amountdue" + interVal, amountdue1);
                                    }
                                }
                            }


                            obj.put(AMOUNTDUENONNEGATIVE, (amountdue <= 0) ? 0 : authHandler.round(amountdue, companyid));
                        }
                        boolean includeprotax = false;
                        if (!gReceipt.isIsExpenseType() && gReceipt.isNormalInvoice()) {
                            Set<GoodsReceiptDetail> goodsReceiptDetails = gReceipt.getRows();
                            for (GoodsReceiptDetail goodsReceiptDetail : goodsReceiptDetails) {
                                if (goodsReceiptDetail.getTax() != null) {
                                    includeprotax = true;
                                    break;
                                }
                            }
                        } else if(gReceipt.isIsExpenseType()) {
                            Set<ExpenseGRDetail> expenseGRDetails = gReceipt.getExpenserows();
                            for (ExpenseGRDetail expGReceiptDetail : expenseGRDetails) {
                            System.out.println(expGReceiptDetail.getGoodsReceipt().getGoodsReceiptNumber());
                                if (expGReceiptDetail.getTax() != null) {
                                    includeprotax = true;
                                    break;
                                }
                            }
                        }
                        obj.put("includeprotax", includeprotax);
                        if(gReceipt.getModifiedby()!=null){
                            obj.put("lasteditedby",StringUtil.getFullName(gReceipt.getModifiedby()));
                        }
                        //for getting total invoice amount [PS]
                        if (gReceipt.isIsExpenseType()) {
                            obj.put(AMOUNT, (Double) ll.get(0));//for expense invoice                        
                            bAmt = accCurrencyDAOobj.getCurrencyToBaseAmount(request, (Double) ll.get(0), currencyid, gReceipt.getCreationDate(), je.getExternalCurrencyRate());
                            obj.put(AMOUNTINBASE, bAmt.getEntityList().get(0));
                        } else {
                            obj.put(AMOUNT, invoiceOriginalAmt); //actual invoice amount
                            if (isopeningBalanceInvoice && gReceipt.isConversionRateFromCurrencyToBase()) {// if invoice is opening balance invoice and Conversion rate is taken from user is Currency to base then following method will be called.
                                bAmt = accCurrencyDAOobj.getCurrencyToBaseAmountAccordingToCurrencyToBaseExchangeRate(request, invoiceOriginalAmt, currencyid, creationDate, externalCurrencyRate);
                            } else {
                                bAmt = accCurrencyDAOobj.getCurrencyToBaseAmount(request, invoiceOriginalAmt, currencyid, creationDate, externalCurrencyRate);
                            }
                            obj.put(AMOUNTINBASE, bAmt.getEntityList().get(0));
                        }
                        obj.put(ACCOUNTNAMES, (String) ll.get(2));
                        obj.put(AMOUNTDUE1, amountdue1);
                        obj.put(AMOUNTDUE2, amountdue2);
                        obj.put(AMOUNTDUE3, amountdue3);
                        obj.put(AMOUNTDUE4, amountdue4);
                        obj.put(AMOUNTDUE5, amountdue5);
                        obj.put(AMOUNTDUE6, amountdue6);
                        obj.put(AMOUNTDUE7, amountdue7);
                        obj.put(AMOUNTDUE8, amountdue8);
                        obj.put(TYPE, "Vendor Invoice");
                        obj.put(DEDUCTDISCOUNT, deductDiscount);
                        
                        KwlReturnObject custumObjresult = null;
                        if(gReceipt.isNormalInvoice()){
                        Map<String, Object> variableMap = new HashMap<String, Object>();
                        custumObjresult = accountingHandlerDAOobj.getObject(AccJECustomData.class.getName(), je.getID());
                        replaceFieldMap = new HashMap<String, String>();
                        DateFormat defaultDateFormat = new SimpleDateFormat(Constants.MMMMdyyyy);
                        Date dateFromDB=null;
                        if (custumObjresult != null && custumObjresult.getEntityList().size()>0) {
                            AccJECustomData jeDetailCustom = (AccJECustomData) custumObjresult.getEntityList().get(0);
                            if (jeDetailCustom!=null) {
                                AccountingManager.setCustomColumnValues(jeDetailCustom, FieldMap, replaceFieldMap, variableMap);
                                for (Map.Entry<String, Object> varEntry : variableMap.entrySet()) {
                                    String coldata = varEntry.getValue()!=null?varEntry.getValue().toString():"";
                                    if (customFieldMap.containsKey(varEntry.getKey())) {
                                        KwlReturnObject rdresult = accountingHandlerDAOobj.getObject(FieldComboData.class.getName(), coldata);
                                        FieldComboData fieldComboData = (FieldComboData) rdresult.getEntityList().get(0);
                                        if (fieldComboData != null) {
                                            obj.put(varEntry.getKey(), fieldComboData.getValue() != null ? fieldComboData.getValue() : "");
                                        }
                                    } else if (customDateFieldMap.containsKey(varEntry.getKey())) {
                                        DateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
                                        dateFromDB=defaultDateFormat.parse(coldata);
                                        obj.put(varEntry.getKey(), sdf.format(dateFromDB));
                                    } else {
                                        if (!StringUtil.isNullOrEmpty(coldata)) {
                                            obj.put(varEntry.getKey(), coldata);
                                        }
                                    }
                                }
                            }
                        }
                        }
                        if (!(ignoreZero && authHandler.round(amountdue, companyid) <= 0)) {
                            jArr.put(obj);
                        }
                    }

                }
                tempArray.put(new JSONObject().put("persondata", jArr));
                        
            }
            
            SimpleDateFormat sdf = new SimpleDateFormat("dd-MM-yyyy");
            if(request.containsKey("tmz")) {
                sdf.setTimeZone(TimeZone.getTimeZone("GMT"+request.get("tmz").toString()));
            }
            JSONArray columnNames = new JSONArray();
            for(int interVal =0; interVal < intervals;interVal++) {
                cal1.setTime(curDate);
                cal1.add(Calendar.DAY_OF_YEAR, duration*interVal);
                
                cal2.setTime(curDate);
                cal2.add(Calendar.DAY_OF_YEAR, duration*(interVal+1)-1);
                JSONObject columnName = new JSONObject();
                columnName.put("name","Week ("+sdf.format(cal1.getTime())+" - "+sdf.format(cal2.getTime())+")");
                columnName.put("dataindex","amountdue"+interVal);
                columnNames.put(columnName);
            }
            
            tempArray.put(new JSONObject().put("columns", columnNames));

        } catch (Exception ex) {
            throw ServiceException.FAILURE("accGoodsReceiptController.getGoodsReceiptsJson : " + ex.getMessage(), ex);
        }
        return tempArray;
    }
    
    public ModelAndView getOpeningBalenceInvoices(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        JSONArray DataJArr = new JSONArray();
        boolean issuccess = false;
        String msg = "";
        try{

            HashMap<String, Object> requestParams = getGoodsReceiptMap(request);
            String[] companyids = sessionHandlerImpl.getCompanyid(request).split(",");
            String gcurrencyid = sessionHandlerImpl.getCurrencyID(request);
            
            String vendorId = request.getParameter("custVenId");
            String companyid = "";
             String dir = "";
            String sort = "";
            if(!StringUtil.isNullOrEmpty(request.getParameter("dir")) && !StringUtil.isNullOrEmpty(request.getParameter("sort"))){
                dir = request.getParameter("dir");
                 sort = request.getParameter("sort");
                   requestParams.put("sort", sort);
                requestParams.put("dir", dir);
            }
            
           
            // Excise Opening Balance check from Vendor Master ERP-27108 : to hide JE POST
            boolean isExciseInvoice = false;
            if(!StringUtil.isNullOrEmpty(request.getParameter("isExciseInvoice"))){
                isExciseInvoice =Boolean.valueOf(request.getParameter("isExciseInvoice"));
                requestParams.put("isExciseInvoice", isExciseInvoice);
            }
            
            
            for(int cnt=0; cnt<companyids.length; cnt++) {
                companyid = companyids[cnt];                
                request.setAttribute("companyid", companyid);
                request.setAttribute("gcurrencyid", gcurrencyid);
                requestParams.put("companyid", companyid);
                requestParams.put("gcurrencyid", gcurrencyid);
                requestParams.put(VENDORID, vendorId);
                
                KwlReturnObject result = accGoodsReceiptobj.getOpeningBalanceInvoices(requestParams);
                List list = result.getEntityList();

                DataJArr = getOpeningBalanceInvoiceJson(request, list, DataJArr);
            }
            
            int count = DataJArr.length();

            JSONArray pagedJson = DataJArr;
            String start = request.getParameter(START);
            String limit = request.getParameter(LIMIT);
            if (!StringUtil.isNullOrEmpty(start) && !StringUtil.isNullOrEmpty(limit)) {
                pagedJson = StringUtil.getPagedJSON(pagedJson, Integer.parseInt(start), Integer.parseInt(limit));
            }

            jobj.put(DATA,pagedJson);
            jobj.put(COUNT,count);
            issuccess = true;
        } catch (SessionExpiredException | ServiceException ex) {
            msg = ex.getMessage();
            Logger.getLogger(accGoodsReceiptController.class.getName()).log(Level.SEVERE, null, ex);
        }  catch (Exception ex) {
            msg = "accGoodsReceiptController.getGoodsReceipts : "+ex.getMessage();
        } finally {
            try {
                jobj.put( SUCCESS,issuccess);
                jobj.put( MSG,msg);
            } catch (JSONException ex) {
                Logger.getLogger(accGoodsReceiptController.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return new ModelAndView(JSONVIEW,MODEL, jobj.toString());
    }
    
    public JSONArray getOpeningBalanceInvoiceJson(HttpServletRequest request, List list, JSONArray dataArray) {
        try {
            String companyid = sessionHandlerImpl.getCompanyid(request);
            DateFormat df = authHandler.getDateOnlyFormat();
            HashMap<String, Object> requestParams = getGoodsReceiptMap(request);
            Iterator it = null;
            if (list != null) {
                it = list.iterator();
                while (it.hasNext()) {
                    String grId = (String) it.next();

                    KwlReturnObject objItr = accountingHandlerDAOobj.getObject(GoodsReceipt.class.getName(), grId);
                    GoodsReceipt gReceipt = (GoodsReceipt) objItr.getEntityList().get(0);

                    JSONObject invoiceJson = new JSONObject();

                    double amountdue = 0;
                    double invoiceOriginalAmount = 0;
                    double exchangeRateForOtherCurrency = 0d;
                    boolean isopeningBalanceInvoice = gReceipt.isIsOpeningBalenceInvoice();
                    Date invoiceCreationDate = null;
                    if (gReceipt.isNormalInvoice()) {
                        if(Constants.InvoiceAmountDueFlag) {
                            List ll = accGoodsReceiptCommon.getInvoiceDiscountAmountInfo(requestParams, gReceipt);
                            amountdue = (Double) ll.get(1);
                        } else {
                            List ll = accGoodsReceiptCommon.getGRAmountDue(requestParams, gReceipt);
                            amountdue = (Double) ll.get(1);
                        }
                        
                        invoiceCreationDate = gReceipt.getCreationDate();
                        exchangeRateForOtherCurrency = gReceipt.getJournalEntry().getExternalCurrencyRate();
                        invoiceOriginalAmount = gReceipt.getVendorEntry().getAmount();
                    } else {
                        invoiceCreationDate = gReceipt.getCreationDate();
                        amountdue = gReceipt.getOpeningBalanceAmountDue();
                        invoiceOriginalAmount = gReceipt.getOriginalOpeningBalanceAmount();
                        exchangeRateForOtherCurrency = gReceipt.getExchangeRateForOpeningTransaction();
                    }
                    
                   
                    String termId = "";
                    if (gReceipt.getTermid() != null) {
                        termId = ((gReceipt.getTermid().getID()) == null) ? "" : gReceipt.getTermid().getID();
                    } else {
                        termId = (gReceipt.getVendor().getDebitTerm()) == null ? "" : gReceipt.getVendor().getDebitTerm().getID();
                    }
                    
                        invoiceJson.put("transactionId", gReceipt.getID());
                        invoiceJson.put("exchangeRateForOtherCurrency", exchangeRateForOtherCurrency);
                        invoiceJson.put("isCurrencyToBaseExchangeRate", gReceipt.isConversionRateFromCurrencyToBase());
                        invoiceJson.put("isNormalTransaction", gReceipt.isNormalInvoice());
                        invoiceJson.put("transactionNo", gReceipt.getGoodsReceiptNumber());
                        invoiceJson.put("transactionAmount", authHandler.formattedAmount(invoiceOriginalAmount, companyid));
                        invoiceJson.put("excludingGstAmount", authHandler.formattedAmount(gReceipt.getExcludingGstAmount(), companyid));
                        invoiceJson.put("transactionDate", df.format(invoiceCreationDate));
                        invoiceJson.put("currencysymbol", (gReceipt.getCurrency() == null ? "" : gReceipt.getCurrency().getSymbol()));
                        invoiceJson.put("currencyid", (gReceipt.getCurrency() == null ? "" : gReceipt.getCurrency().getCurrencyID()));
                        invoiceJson.put("porefno", gReceipt.getPartyInvoiceNumber());
                        invoiceJson.put("termdays", gReceipt.getVendor() == null ? "" : ((gReceipt.getVendor().getDebitTerm()) == null) ? "" : gReceipt.getVendor().getDebitTerm().getTermdays());
                        invoiceJson.put("termid",termId);
                        invoiceJson.put("taxAmount",gReceipt.getTaxamount());
                        invoiceJson.put("salesPerson", gReceipt.getMasterSalesPerson() == null ? "" : gReceipt.getMasterSalesPerson().getID());
                        invoiceJson.put("dueDate", df.format(gReceipt.getDueDate()));
                        invoiceJson.put("poRefDate", gReceipt.getPartyInvoiceDate() != null ? df.format(gReceipt.getPartyInvoiceDate()) : null);
                        invoiceJson.put("memo", !StringUtil.isNullOrEmpty(gReceipt.getMemo()) ? gReceipt.getMemo(): "");

                        invoiceJson.put("transactionAmountDue", authHandler.formattedAmount(amountdue, companyid));

                        KwlReturnObject bAmt = null;
                        double transactionAmountInBase = 0d;
                        if(Constants.OpeningBalanceBaseAmountFlag) {
                            transactionAmountInBase = gReceipt.getOriginalOpeningBalanceBaseAmount();
                        } else {
                            if (isopeningBalanceInvoice && gReceipt.isConversionRateFromCurrencyToBase()) {// if invoice is opening balance invoice and Conversion rate is taken from user is Currency to base then following method will be called.
                                bAmt = accCurrencyDAOobj.getCurrencyToBaseAmountAccordingToCurrencyToBaseExchangeRate(requestParams, invoiceOriginalAmount, gReceipt.getCurrency().getCurrencyID(), invoiceCreationDate, exchangeRateForOtherCurrency);
                            } else {
                                bAmt = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, invoiceOriginalAmount, gReceipt.getCurrency().getCurrencyID(), invoiceCreationDate, exchangeRateForOtherCurrency);
                            }
                            transactionAmountInBase = (Double) bAmt.getEntityList().get(0);
                        }
                        invoiceJson.put("transactionAmountInBase", authHandler.formattedAmount(transactionAmountInBase, companyid));
                        int isReval = 0;
                        KwlReturnObject brdAmt = accGoodsReceiptobj.getRevalFlag(gReceipt.getID());
                        List reval = brdAmt.getEntityList();
                        if (!reval.isEmpty() && (Long) reval.get(0) > 0) {
                            isReval = 1;
                        }
                        invoiceJson.put("isreval", isReval);
                        /*
                         * Maintaining flag for restricting user from editing/deleting claimed transaction
                         */
                        if(gReceipt.getClaimAmountDue() != 0){
                            invoiceJson.put("isClaimedTransaction", true);
                        } 
                    dataArray.put(invoiceJson);
                }
            }
        } catch (ServiceException | SessionExpiredException | JSONException ex) {
            Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
        }
        return dataArray;
    }

    public ModelAndView exportGoodsReceipts(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        JSONArray DataJArr = new JSONArray();
        String view = JSONVIEW_EX;
        try{
            HashMap<String, Object> requestParams = getGoodsReceiptMap(request);
            if (!StringUtil.isNullOrEmpty(request.getParameter("ss"))) {
                requestParams.put("ss", StringUtil.DecodeText(request.getParameter("ss")));
            }
            requestParams.put("filetype", (String)request.getParameter("filetype"));
            boolean consolidateFlag = request.getParameter("consolidateFlag")!=null?Boolean.parseBoolean(request.getParameter("consolidateFlag")):false;            
            String[] companyids = (consolidateFlag && request.getParameter("companyids")!=null)?request.getParameter("companyids").split(","):sessionHandlerImpl.getCompanyid(request).split(",");
            String gcurrencyid = (consolidateFlag && request.getParameter("gcurrencyid")!=null)?request.getParameter("gcurrencyid"):sessionHandlerImpl.getCurrencyID(request);            
            boolean isAged = request.getParameter("isAged")!=null?Boolean.parseBoolean(request.getParameter("isAged")):false;
            boolean ispendingpayment = request.getParameter("ispendingpayment")!=null?Boolean.parseBoolean(request.getParameter("ispendingpayment")):false;
            boolean requestfromdimensionbasedreport = request.getParameter("requestfromdimensionbasedreport")!=null?Boolean.parseBoolean(request.getParameter("requestfromdimensionbasedreport")):false;
            boolean includeAllRec = request.getParameter("includeAllRec")!=null?Boolean.parseBoolean(request.getParameter("includeAllRec")):false;
            int invoiceLinkedWithGRNStatus = request.getParameter("invoiceLinkedWithGRNStatus") != null ? Integer.parseInt(request.getParameter("invoiceLinkedWithGRNStatus")) : 0;
            requestParams.put("onlyInventoryPI", !StringUtil.isNullOrEmpty(request.getParameter("isConsignment")) ? request.getParameter("onlyInventoryPI") : "false");
            requestParams.put("onlyExpensePI", !StringUtil.isNullOrEmpty(request.getParameter("isConsignment")) ? request.getParameter("onlyExpensePI") : "false");
            if(invoiceLinkedWithGRNStatus != 0) {
                requestParams.put("invoiceLinkedWithGRNStatus", invoiceLinkedWithGRNStatus);
            }
            
            requestParams.put("ispendingpayment",ispendingpayment);
            requestParams.put("includeAllRec", includeAllRec);
            request.setAttribute("isExport", true);
            requestParams.put("requestfromdimensionbasedreport", requestfromdimensionbasedreport);
            String companyid = "";
            ExtraCompanyPreferences extraPref = (ExtraCompanyPreferences) kwlCommonTablesDAOObj.getClassObject("com.krawler.common.admin.ExtraCompanyPreferences", sessionHandlerImpl.getCompanyid(request));
            if (extraPref != null && extraPref.isEnablesalespersonAgentFlow()) {
                int permCode = sessionHandlerImpl.getPerms(request, Constants.VENDOR_PERMCODE);
                if (!((permCode & Constants.VENDOR_VIEWALL_PERMCODE) == Constants.VENDOR_VIEWALL_PERMCODE)) {
                    /*
                     * when (permCode & Constants.VENDOR_VIEWALL_PERMCODE) == Constants.VENDOR_VIEWALL_PERMCODE is true then user has permission to view all vendors documents,so at that time there is need to filter record according to user&agent. 
                     */
                    String userId = sessionHandlerImpl.getUserid(request);
                    requestParams.put("userid", userId);
                    requestParams.put("enablesalespersonagentflow", extraPref.isEnablesalespersonAgentFlow());
                }
            }
            
            //Advance Search releated common code  
            boolean isAdvanceSearch = false;
            String Searchjson = "";
            String invoiceSearchJson = "";
            String receiptSearchJson = "";
            String cnSearchJson = "";
            String dnSearchJson = "";
            String makePaymentSearchJson = "";
            String filterConjuctionCriteria = com.krawler.common.util.Constants.and;
            if (requestParams.containsKey(Constants.Filter_Criteria) && requestParams.get(Constants.Filter_Criteria) != null) {
                if (requestParams.get(Constants.Filter_Criteria).toString().equalsIgnoreCase("OR")) {
                    filterConjuctionCriteria = com.krawler.common.util.Constants.or;
                }
            }
            if (isAged && requestParams.containsKey(Constants.Acc_Search_Json) && requestParams.get(Constants.Acc_Search_Json) != null) {
                Searchjson = requestParams.get(Constants.Acc_Search_Json).toString();
                if (!StringUtil.isNullOrEmpty(Searchjson)) {
                    isAdvanceSearch = true;
                    requestParams.put(Constants.Filter_Criteria, request.getParameter(InvoiceConstants.Filter_Criteria));

                    HashMap<String, Object> reqPar1 = new HashMap<>();
                    reqPar1.put(Constants.companyKey, requestParams.get(Constants.companyKey));
                    reqPar1.put(Constants.Acc_Search_Json, Searchjson);
                    reqPar1.put(Constants.Filter_Criteria, filterConjuctionCriteria);
                    reqPar1.put(Constants.moduleid, Constants.Acc_Vendor_Invoice_ModuleId);
                    invoiceSearchJson = fieldDataManagercntrl.getSearchJsonByModuleID(reqPar1);
                    reqPar1.remove(Constants.moduleid);
                    reqPar1.put(Constants.moduleid, Constants.Acc_Receive_Payment_ModuleId);
                    receiptSearchJson = fieldDataManagercntrl.getSearchJsonByModuleID(reqPar1);
                    reqPar1.put(Constants.moduleid, Constants.Acc_Debit_Note_ModuleId);
                    dnSearchJson = fieldDataManagercntrl.getSearchJsonByModuleID(reqPar1);
                    reqPar1.put(Constants.moduleid, Constants.Acc_Credit_Note_ModuleId);
                    cnSearchJson = fieldDataManagercntrl.getSearchJsonByModuleID(reqPar1);
                    reqPar1.put(Constants.moduleid, Constants.Acc_Make_Payment_ModuleId);
                    makePaymentSearchJson = fieldDataManagercntrl.getSearchJsonByModuleID(reqPar1);
                }
            }
            
            for (int cnt = 0; cnt < companyids.length; cnt++) {
                companyid = companyids[cnt];
                request.setAttribute("companyid", companyid);
                request.setAttribute("gcurrencyid", gcurrencyid);
                requestParams.put("companyid", companyid);
                requestParams.put("gcurrencyid", gcurrencyid);
                requestParams.put("agedReport", true);
                requestParams.put("isExport", true);
                boolean isBadDebtInvoices = false;
                if (!StringUtil.isNullOrEmpty(request.getParameter("isBadDebtInvoices"))) {// Changes For Malasian Company
                    isBadDebtInvoices = Boolean.parseBoolean(request.getParameter("isBadDebtInvoices"));
                    if (isBadDebtInvoices) {
                        int baddebttype = Integer.parseInt(request.getParameter("baddebttype"));
                        requestParams.put("isBadDebtInvoices", isBadDebtInvoices);
                        requestParams.put("baddebttype", baddebttype);
                        requestParams.put("selectedCriteriaDate", request.getParameter("selectedCriteriaDate"));
                        requestParams.put("badDebtCriteria", request.getParameter("badDebtCriteria"));

                        if (baddebttype == 0) {
                            requestParams.put("badDebtCalculationDate", request.getParameter("badDebtCalculationDate"));
                            requestParams.put("badDebtCriteria", Integer.parseInt(request.getParameter("badDebtCriteria")));
                        } else {
                            requestParams.put("badDebtCalculationFromDate", request.getParameter("badDebtCalculationFromDate"));
                            requestParams.put("badDebtCalculationToDate", request.getParameter("badDebtCalculationToDate"));
                        }
                    }
                }
                if (isAged) {
                    
                    requestParams.put("isAgedPayables", true);
                   
                    
                }
                if (isAdvanceSearch) {
                    requestParams.put(Constants.Acc_Search_Json, invoiceSearchJson);
                    requestParams.put(Constants.moduleid, Constants.Acc_Vendor_Invoice_ModuleId);
                    requestParams.put(Constants.Filter_Criteria, request.getParameter(InvoiceConstants.Filter_Criteria));
                }

                KwlReturnObject result = accGoodsReceiptobj.getGoodsReceiptsMerged(requestParams);
                List<GoodsReceipt> list = result.getEntityList();
                DataJArr = accGoodsReceiptServiceHandler.getGoodsReceiptsJsonMerged(requestParams, list, DataJArr, accountingHandlerDAOobj, accCurrencyDAOobj, accGoodsReceiptobj, accAccountDAOobj, accGoodsReceiptCommon, accTaxObj);
                if (request.getParameter("type") != null && request.getParameter("type").equals("detailedXls")) {
                    DataJArr = getDetailExcelJsonVendorInvoice(request, response, requestParams, DataJArr);
                }
                if (isAged) {

                    if (requestParams.containsKey("start")) { // In case of Ageing Removing paging because it is applying on each vendor data (CN/DN etc). Due to this complete number of record not showing in AP Report.  
                        requestParams.remove("start");
                    }
                    if (requestParams.containsKey("limit")) {
                        requestParams.remove("limit");
                    }
                    if (requestfromdimensionbasedreport) {
                        JSONArray OBJArryInvoice = new JSONArray();
                        result = accGoodsReceiptobj.getOpeningBalanceInvoices(requestParams);
                        OBJArryInvoice = AccGoodsReceiptServiceHandler.getAgedOpeningBalanceInvoiceJson(requestParams, result.getEntityList(), OBJArryInvoice, accCurrencyDAOobj, accountingHandlerDAOobj, accGoodsReceiptCommon, accAccountDAOobj, fieldDataManagercntrl);
                        for (int i = 0; i < OBJArryInvoice.length(); i++) {
                            DataJArr.put(OBJArryInvoice.get(i));
                        }
                    } else {

                        if (isAdvanceSearch) {
                            requestParams.put(Constants.Acc_Search_Json, invoiceSearchJson);
                            requestParams.put(Constants.moduleid, Constants.Acc_Vendor_Invoice_ModuleId);
                            requestParams.put(Constants.Filter_Criteria, request.getParameter(InvoiceConstants.Filter_Criteria));
                        }
                        JSONArray OBJArryInvoice = new JSONArray();
                        result = accGoodsReceiptobj.getOpeningBalanceInvoices(requestParams);
                        OBJArryInvoice = AccGoodsReceiptServiceHandler.getAgedOpeningBalanceInvoiceJson(requestParams, result.getEntityList(), OBJArryInvoice, accCurrencyDAOobj, accountingHandlerDAOobj, accGoodsReceiptCommon, accAccountDAOobj, fieldDataManagercntrl);
                        for (int i = 0; i < OBJArryInvoice.length(); i++) {
                            DataJArr.put(OBJArryInvoice.get(i));
                        }
                        if (isAdvanceSearch) {
                            requestParams.put(Constants.Acc_Search_Json, dnSearchJson);
                            requestParams.put(Constants.moduleid, Constants.Acc_Debit_Note_ModuleId);
                            requestParams.put(Constants.Filter_Criteria, request.getParameter(InvoiceConstants.Filter_Criteria));
                        }
                        JSONArray OBJArryDebitNote = new JSONArray();
                        result = accDebitNoteobj.getOpeningBalanceDNs(requestParams);
                        OBJArryDebitNote = AccGoodsReceiptServiceHandler.getAgedOpeningBalanceDebitNoteJson(requestParams, result.getEntityList(), OBJArryDebitNote, accCurrencyDAOobj, accountingHandlerDAOobj, accReceiptDAOobj, accDebitNoteobj, accAccountDAOobj, fieldDataManagercntrl);
                        for (int i = 0; i < OBJArryDebitNote.length(); i++) {
                            DataJArr.put(OBJArryDebitNote.get(i));
                        }

                        if (isAdvanceSearch) {
                            requestParams.put(Constants.Acc_Search_Json, cnSearchJson);
                            requestParams.put(Constants.moduleid, Constants.Acc_Credit_Note_ModuleId);
                            requestParams.put(Constants.Filter_Criteria, request.getParameter(InvoiceConstants.Filter_Criteria));
                        }
                        JSONArray OBJArryCreditNote = new JSONArray();
                        result = accCreditNoteDAOobj.getOpeningBalanceVendorCNs(requestParams);
                        OBJArryCreditNote = AccGoodsReceiptServiceHandler.getAgedOpeningBalanceCreditNoteJson(requestParams, result.getEntityList(), OBJArryCreditNote, accCurrencyDAOobj, accountingHandlerDAOobj, accPaymentDAOobj, accVendorPaymentobj, accDebitNoteobj, accAccountDAOobj, fieldDataManagercntrl);
                        for (int i = 0; i < OBJArryCreditNote.length(); i++) {
                            DataJArr.put(OBJArryCreditNote.get(i));
                        }

                        if (isAdvanceSearch) {
                            requestParams.put(Constants.Acc_Search_Json, makePaymentSearchJson);
                            requestParams.put(Constants.moduleid, Constants.Acc_Make_Payment_ModuleId);
                            requestParams.put(Constants.Filter_Criteria, request.getParameter(InvoiceConstants.Filter_Criteria));
                        }
                        JSONArray OBJArryPayment = new JSONArray();
                        result = accVendorPaymentobj.getOpeningBalancePayments(requestParams);
                        OBJArryPayment = AccGoodsReceiptServiceHandler.getAgedOpeningBalancePaymentJson(requestParams, result.getEntityList(), OBJArryPayment, accCurrencyDAOobj, accountingHandlerDAOobj, accVendorPaymentobj, accAccountDAOobj, fieldDataManagercntrl);
                        for (int i = 0; i < OBJArryPayment.length(); i++) {
                            DataJArr.put(OBJArryPayment.get(i));
                        }

                        if (isAdvanceSearch) {
                            requestParams.put(Constants.Acc_Search_Json, dnSearchJson);
                            requestParams.put(Constants.Filter_Criteria, request.getParameter(InvoiceConstants.Filter_Criteria));
                        }
                        JSONArray debitNotejArr = new JSONArray();
                        result = accDebitNoteobj.getDebitNoteMerged(requestParams);
                        debitNotejArr = AccGoodsReceiptServiceHandler.getDebitNotesMergedJson(requestParams, result.getEntityList(), debitNotejArr, accCurrencyDAOobj, accountingHandlerDAOobj, accReceiptDAOobj, accDebitNoteobj, accAccountDAOobj, fieldDataManagercntrl, accJournalEntryobj);
                        for (int i = 0; i < debitNotejArr.length(); i++) {
                            DataJArr.put(debitNotejArr.get(i));
                        }

                        if (isAdvanceSearch) {
                            requestParams.put(Constants.Acc_Search_Json, cnSearchJson);
                            requestParams.put(Constants.Filter_Criteria, request.getParameter(InvoiceConstants.Filter_Criteria));
                        }
                        requestParams.put("cntype", 4);//This is used for getting Credit note against vendor 
                        JSONArray CreditNotejArr = new JSONArray();
                        result = accCreditNoteDAOobj.getCreditNoteMerged(requestParams);
                        CreditNotejArr = AccGoodsReceiptServiceHandler.getCreditNotesMergedJson(requestParams, result.getEntityList(), CreditNotejArr, accCurrencyDAOobj, accountingHandlerDAOobj, accPaymentDAOobj, accVendorPaymentobj, accDebitNoteobj, accAccountDAOobj, fieldDataManagercntrl, accJournalEntryobj);
                        for (int i = 0; i < CreditNotejArr.length(); i++) {
                            DataJArr.put(CreditNotejArr.get(i));
                        }

                        if (isAdvanceSearch) {
                            requestParams.put(Constants.Acc_Search_Json, makePaymentSearchJson);
                            requestParams.put(Constants.Filter_Criteria, request.getParameter(InvoiceConstants.Filter_Criteria));
                        }
                        JSONArray makePaymentJArr = new JSONArray();
                        requestParams.put("allAdvPayment", true); // needs only Advance type record so that putted true
                        requestParams.put("paymentWindowType", 1);//Payment to Vendor record
                        result = accVendorPaymentobj.getPayments(requestParams);
                        companyid = sessionHandlerImpl.getCompanyid(request);
                        requestParams.put("companyid", companyid);
                        makePaymentJArr = AccGoodsReceiptServiceHandler.getPaymentsJson(requestParams, result.getEntityList(), makePaymentJArr, accCurrencyDAOobj, accountingHandlerDAOobj, accVendorPaymentobj);
                        for (int i = 0; i < makePaymentJArr.length(); i++) {
                            DataJArr.put(makePaymentJArr.get(i));
                        }

                        if (isAdvanceSearch) {
                            requestParams.put(Constants.Acc_Search_Json, receiptSearchJson);
                            requestParams.put(Constants.Filter_Criteria, request.getParameter(InvoiceConstants.Filter_Criteria));
                        }
                        requestParams.put("allAdvPayment", true); // needs only refund type record so that putted true
                        requestParams.put("paymentWindowType", 2);//Receipt to Vendor record
                        JSONArray receivePaymentJArr = new JSONArray();
                        result = accReceiptDAOobj.getReceipts(requestParams);
                        receivePaymentJArr = AccInvoiceServiceHandler.getReceiptsJson(requestParams, result.getEntityList(), receivePaymentJArr, accountingHandlerDAOobj, authHandlerDAOObj, accCurrencyDAOobj, accReceiptDAOobj, request, accAccountDAOobj, fieldDataManagercntrl, accJournalEntryobj);
                        for (int i = 0; i < receivePaymentJArr.length(); i++) {
                            DataJArr.put(receivePaymentJArr.get(i));
                        }
                        requestParams.remove("allAdvPayment");
                        requestParams.remove("paymentWindowType");
                    }
                }
            }
            if (isAged) {           //sort Json as per vendor and calculate total for CSV
                addCustomFields(request, companyid, requestParams, DataJArr);
                String sortKey = "type";
                DataJArr = AccountingManager.sortJsonArrayOnStringValues(DataJArr,sortKey, true);
                
                /**
                 * Detail Export AP(CSV,XLS,PRINT)
                 */
                
                String dir = "";
                String sort = "";
                if (!StringUtil.isNullOrEmpty(request.getParameter("dir")) && !StringUtil.isNullOrEmpty(request.getParameter("sort"))) {
                    dir = request.getParameter("dir");
                    sort = request.getParameter("sort");
                }
                if (sort.equals("code") && !(sort.equals(""))) {     //Sort record by Customer code
                    sortKey = "code";
                } else {
                    sortKey = "personname";  //Sort record by Customer Name
                }
                if (dir.equals("DESC")) {
                    DataJArr = AccountingManager.sortJsonArrayOnStringValuesByIgnoringCase(DataJArr, sortKey, false);
                } else {
                    DataJArr = AccountingManager.sortJsonArrayOnStringValuesByIgnoringCase(DataJArr, sortKey, true);    //show multigrouping JSONArray required to sort    
                }
                DataJArr = AccInvoiceServiceHandler.calculateSubtotal(request, DataJArr);
            }
            String fileType = request.getParameter("filetype");
            if (StringUtil.equal(fileType, "print")) {
                DataJArr = exportDaoObj.addTotalsForPrint(DataJArr, companyid);
            }
            jobj.put( DATA,DataJArr);
            if (StringUtil.equal(fileType, "print")) {
                String  GenerateDate = authHandler.getDateFormatter(request).format(new Date());
                jobj.put("GenerateDate", GenerateDate);
                view = JSONVIEWEMPTY;
            }
            exportDaoObj.processRequest(request, response, jobj);
        } catch (SessionExpiredException ex) {
            Logger.getLogger(accGoodsReceiptController.class.getName()).log(Level.SEVERE, null, ex);
        } catch(Exception ex) {
            Logger.getLogger(accGoodsReceiptController.class.getName()).log(Level.SEVERE, null, ex);
        }
        return new ModelAndView(view,MODEL, jobj.toString());
    }
     public JSONArray getDetailExcelJsonVendorInvoice(HttpServletRequest request, HttpServletResponse response, HashMap<String, Object> requestParams, JSONArray DataJArr) throws JSONException, SessionExpiredException, ServiceException, SessionExpiredException, SessionExpiredException {
        boolean consolidateFlag = request.getParameter("consolidateFlag") != null ? Boolean.parseBoolean(request.getParameter("consolidateFlag")) : false;
        String[] companyids = (consolidateFlag && request.getParameter("companyids") != null) ? request.getParameter("companyids").split(",") : sessionHandlerImpl.getCompanyid(request).split(",");
        JSONArray tempArray = new JSONArray();
        for (int i = 0; i < DataJArr.length(); i++) {
            JSONObject rowjobj = new JSONObject();
            rowjobj = DataJArr.getJSONObject(i);
            String billid = rowjobj.optString("billid", "");   //Invoice ID 
            DateFormat userDateFormat=null;
            if(requestParams.containsKey(Constants.userdf)){
                userDateFormat= (DateFormat) requestParams.get(Constants.userdf);
            }
            request.setAttribute(Constants.userdf,userDateFormat);
            JSONArray DataRowsArr = accGoodsReceiptCommon.getGoodsReceiptRows(request, billid.split(","));
            rowjobj.put("type","");
            tempArray.put(rowjobj);
            for (int j = 0; j < DataRowsArr.length(); j++) {
                JSONObject tempjobj = new JSONObject();
                tempjobj = DataRowsArr.getJSONObject(j);
                exportDaoObj.editJsonKeyForExcelFile(tempjobj, Constants.Acc_Vendor_Invoice_ModuleId);
                tempArray.put(tempjobj);
            }
        }
        return tempArray;
    }
    public void exportDeliveryOrderJasper(HttpServletRequest request, HttpServletResponse response) throws ServiceException, SessionExpiredException {
        try {
            int templateflag = Integer.parseInt(request.getParameter("templateflag"));
            List jasperPrint = new ArrayList();
            if(templateflag==Constants.BIT_templateflag){
                jasperPrint = accExportReportsServiceDAOobj.exportBITDeliveryOrderJasper(request, response);
            }else if(templateflag==Constants.FascinaWindows_templateflag){
                jasperPrint = accExportOtherReportsServiceDAOobj.exportFascinaWindowsDeliveryOrderJasper(request, response);
            }else{
                jasperPrint = accExportReportsServiceDAOobj.exportDeliveryOrderJasper(request, response);
            }
            JRPdfExporter exp = new JRPdfExporter();
            exp.setParameter(JRExporterParameter.JASPER_PRINT_LIST, jasperPrint);
            exp.setParameter(JRPdfExporterParameter.OUTPUT_STREAM, response.getOutputStream());
            exp.exportReport();
        } catch (Exception e) {
            Logger.getLogger(accGoodsReceiptController.class.getName()).log(Level.SEVERE, null, e);
        }
    }
    
    public ModelAndView getProductCompositionStatus(HttpServletRequest request, HttpServletResponse response) {
        String billid = "";
        JSONObject jobj = new JSONObject();
        boolean issuccess = false;
        String msg = "";
        String recordIDs = request.getParameter("recordids") != null ? request.getParameter("recordids") : "";
        String recArray[] = recordIDs.split(",");
        try {
            if (recArray.length != 0) {
                for (String s : recArray) {
                    billid = s;
                    if (StringUtil.isNullOrEmpty(billid)) {
                        billid = request.getParameter("bills") != null ? request.getParameter("bills") : "";
                    }
                    DeliveryOrder deliveryOrder = null;
                    deliveryOrder = (DeliveryOrder) kwlCommonTablesDAOObj.getClassObject(DeliveryOrder.class.getName(), billid);
                    HashMap<String, Object> invRequestParams = new HashMap<String, Object>();
                    ArrayList filter_names = new ArrayList(), filter_params = new ArrayList(), order_by = new ArrayList(), order_type = new ArrayList();
                    order_by.add("srno");
                    order_type.add("asc");
                    invRequestParams.put("order_by", order_by);
                    invRequestParams.put("order_type", order_type);
                    KwlReturnObject idresult = null;
                    Iterator itr = null;
                    filter_names.add("deliveryOrder.ID");
                    filter_params.add(deliveryOrder.getID());
                    invRequestParams.put("filter_names", filter_names);
                    invRequestParams.put("filter_params", filter_params);
                    idresult = accInvoiceDAOobj.getDeliveryOrderDetails(invRequestParams);
                    itr = idresult.getEntityList().iterator();
                    while (itr.hasNext()) {
                        DeliveryOrderDetail row = (DeliveryOrderDetail) itr.next();
                        HashMap<String, Object> doRequestParams = new HashMap<String, Object>();
                        ArrayList filter_names1 = new ArrayList(), filter_params1 = new ArrayList(), order_by1 = new ArrayList(), order_type1 = new ArrayList();
                        filter_names1.add("product.ID");
                        doRequestParams.put("filter_names", filter_names1);
                        doRequestParams.put("filter_params", filter_params1);
                        filter_params1.clear();
                        filter_params1.add(row.getProduct().getID());
                        KwlReturnObject productCompositionRes = accProductObj.getProductCompositionDetails(doRequestParams);
                        if (productCompositionRes.getRecordTotalCount() == 0) {
                            issuccess = true;
                            msg = row.getProduct().getName() + ",";
                        }
                    }
                }
            }
        } catch (Exception ex) {
            Logger.getLogger(accGoodsReceiptController.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                jobj.put(SUCCESS, issuccess);
                jobj.put(MSG, msg.equals("") ? "" : msg.substring(0, msg.length() - 1));
            } catch (JSONException ex) {
                Logger.getLogger(accGoodsReceiptController.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return new ModelAndView(JSONVIEW, MODEL, jobj.toString());
    }
    
    public void exportProductCompositionJasper(HttpServletRequest request, HttpServletResponse response) throws ServiceException, SessionExpiredException {
        try {
            int templateflag = Integer.parseInt(request.getParameter("templateflag"));
            List jasperPrint = new ArrayList();
            jasperPrint = accExportReportsServiceDAOobj.exportProductCompositionJasper(request, response);
            JRPdfExporter exp = new JRPdfExporter();
            exp.setParameter(JRExporterParameter.JASPER_PRINT_LIST, jasperPrint);
            exp.setParameter(JRPdfExporterParameter.OUTPUT_STREAM, response.getOutputStream());
            exp.exportReport();
        } catch (Exception e) {
            Logger.getLogger(accGoodsReceiptController.class.getName()).log(Level.SEVERE, null, e);
        }
    }
    
    public void exportInvoicepackingList(HttpServletRequest request, HttpServletResponse response) throws ServiceException, SessionExpiredException {
        try {
            int templateflag = Integer.parseInt(request.getParameter("templateflag"));
            List jasperPrint = new ArrayList();
            jasperPrint = accExportReportsServiceDAOobj.exportInvoicepackingList(request, response);
            JRPdfExporter exp = new JRPdfExporter();
            exp.setParameter(JRExporterParameter.JASPER_PRINT_LIST, jasperPrint);
            exp.setParameter(JRPdfExporterParameter.OUTPUT_STREAM, response.getOutputStream());
            exp.exportReport();
        } catch (Exception e) {
            Logger.getLogger(accGoodsReceiptController.class.getName()).log(Level.SEVERE, null, e);
        }
    }
    
    public void exportPermitInvoiceList(HttpServletRequest request, HttpServletResponse response) throws ServiceException, SessionExpiredException {
        try {
            int templateflag = Integer.parseInt(request.getParameter("templateflag"));
            List jasperPrint = new ArrayList();
            jasperPrint = accExportOtherReportsServiceDAOobj.exportPermitInvoiceList(request, response);
            JRPdfExporter exp = new JRPdfExporter();
            exp.setParameter(JRExporterParameter.JASPER_PRINT_LIST, jasperPrint);
            exp.setParameter(JRPdfExporterParameter.OUTPUT_STREAM, response.getOutputStream());
            exp.exportReport();
        } catch (Exception e) {
            Logger.getLogger(accGoodsReceiptController.class.getName()).log(Level.SEVERE, null, e);
        }
    }
      
     public void exportPacificTecDeliveryOrderJasper(HttpServletRequest request, HttpServletResponse response) throws ServiceException, SessionExpiredException {
        try {
            List jasperPrint = accExportReportsServiceDAOobj.exportPacificTecDeliveryOrderJasper(request, response);
            JRPdfExporter exp = new JRPdfExporter();
            exp.setParameter(JRExporterParameter.JASPER_PRINT_LIST, jasperPrint);
            exp.setParameter(JRPdfExporterParameter.OUTPUT_STREAM, response.getOutputStream());
            exp.exportReport();
        } catch (Exception e) {
            Logger.getLogger(accGoodsReceiptController.class.getName()).log(Level.SEVERE, null, e);
        }
    }
     
     public void exportDiamondAviationDeliveryOrder(HttpServletRequest request, HttpServletResponse response) throws ServiceException, SessionExpiredException {
        try {
            List jasperPrint = accExportOtherReportsServiceDAOobj.exportDiamondAviationDeliveryOrder(request, response);
            JRPdfExporter exp = new JRPdfExporter();
            exp.setParameter(JRExporterParameter.JASPER_PRINT_LIST, jasperPrint);
            exp.setParameter(JRPdfExporterParameter.OUTPUT_STREAM, response.getOutputStream());
            exp.exportReport();
        } catch (Exception e) {
            Logger.getLogger(accGoodsReceiptController.class.getName()).log(Level.SEVERE, null, e);
        }
    }
     public void exportDiamondAviationDeliveryOrderPackages(HttpServletRequest request, HttpServletResponse response) throws ServiceException, SessionExpiredException {
        try {
            List jasperPrint = accExportOtherReportsServiceDAOobj.exportDiamondAviationDeliveryOrderPackages(request, response);
            JRPdfExporter exp = new JRPdfExporter();
            exp.setParameter(JRExporterParameter.JASPER_PRINT_LIST, jasperPrint);
            exp.setParameter(JRPdfExporterParameter.OUTPUT_STREAM, response.getOutputStream());
            exp.exportReport();
        } catch (Exception e) {
            Logger.getLogger(accGoodsReceiptController.class.getName()).log(Level.SEVERE, null, e);
        }
    }
    
    public void exportFerrateGroupVendorInvoiceJasper(HttpServletRequest request, HttpServletResponse response) throws ServiceException, SessionExpiredException {
        try {
            List jasperPrint = accExportReportsServiceDAOobj.exportFerrateGroupVendorInvoiceJasper(request, response);
            JRPdfExporter exp = new JRPdfExporter();
            exp.setParameter(JRExporterParameter.JASPER_PRINT_LIST, jasperPrint);
            exp.setParameter(JRPdfExporterParameter.OUTPUT_STREAM, response.getOutputStream());
            exp.exportReport();
        } catch (Exception e) {
            Logger.getLogger(accGoodsReceiptController.class.getName()).log(Level.SEVERE, null, e);
        }
    }
    
    public JSONObject getSelectedGoodsReceiptJson(HttpServletRequest request) {
        JSONObject jobj = new JSONObject();
        JSONArray DataJArr = new JSONArray();
        try {
            HashMap<String, Object> requestParams = getGoodsReceiptMap(request);
            requestParams.put("filetype", (String)request.getParameter("filetype"));
            boolean consolidateFlag = request.getParameter("consolidateFlag")!=null?Boolean.parseBoolean(request.getParameter("consolidateFlag")):false;            
            String[] companyids = (consolidateFlag && request.getParameter("companyids")!=null)?request.getParameter("companyids").split(","):sessionHandlerImpl.getCompanyid(request).split(",");
            String gcurrencyid = (consolidateFlag && request.getParameter("gcurrencyid")!=null)?request.getParameter("gcurrencyid"):sessionHandlerImpl.getCurrencyID(request);            
            String companyid = "";
            String invoiceIds = request.getParameter("invoiceIds");
            for(int cnt=0; cnt<companyids.length; cnt++) {
                companyid = companyids[cnt];                
                request.setAttribute("companyid", companyid);
                request.setAttribute("gcurrencyid", gcurrencyid);
                requestParams.put("companyid", companyid);
                requestParams.put("gcurrencyid", gcurrencyid);
                
                KwlReturnObject result = accGoodsReceiptobj.getSelectedGoodsReceiptsMerged(requestParams, invoiceIds);
                List<GoodsReceipt> list = result.getEntityList();                
                DataJArr = accGoodsReceiptServiceHandler.getGoodsReceiptsJsonMerged(requestParams, list, DataJArr, accountingHandlerDAOobj,  accCurrencyDAOobj,  accGoodsReceiptobj, accAccountDAOobj, accGoodsReceiptCommon, accTaxObj);
            }
            jobj.put( DATA,DataJArr);
        } catch (JSONException | ServiceException | SessionExpiredException ex) {
            Logger.getLogger(accGoodsReceiptControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
        } 
        return jobj;
    }
    
    public void getOpeningBalanceInvoicesJsonArray(HttpServletRequest request, JSONArray DataJArr,HashSet invoicesList) {
        try {
            HashMap requestParams = getGoodsReceiptMap(request);
            String companyid = sessionHandlerImpl.getCompanyid(request);
            boolean doflag = requestParams.containsKey("doflag") ? (Boolean) requestParams.get("doflag") : false;
            boolean salesPurchaseReturnflag = requestParams.containsKey("salesPurchaseReturnflag") ? (Boolean) requestParams.get("salesPurchaseReturnflag") : false;
            DateFormat df = (DateFormat) requestParams.get(DATEFORMAT);
            String only1099AccStr = (String) requestParams.get(ONLY1099ACC);
            String currencyid = (String) requestParams.get(GCURRENCYID);
            boolean notlinkCNFromInvoiceFlag = false;
            if (!StringUtil.isNullOrEmpty(request.getParameter("notlinkCNFromInvoiceFlag"))) {
                notlinkCNFromInvoiceFlag = Boolean.parseBoolean(request.getParameter("notlinkCNFromInvoiceFlag"));
            }
            if (request.getAttribute("invoiceIdToSkip") != null) {
                requestParams.put("invoiceIdToSkip", request.getAttribute("invoiceIdToSkip"));
            }
            KwlReturnObject extraprefresult = accountingHandlerDAOobj.getObject(ExtraCompanyPreferences.class.getName(), companyid);
            ExtraCompanyPreferences extraCompanyPreferences = extraprefresult != null ? (ExtraCompanyPreferences) extraprefresult.getEntityList().get(0) : null;
            String accountId = request.getParameter("accid");
            if (!StringUtil.isNullOrEmpty(accountId)) {
                requestParams.put(VENDORID, accountId);
            }
            boolean forMonthWiseInvoice = request.getParameter("forMonthWiseInvoices") == null ?false:Boolean.parseBoolean(request.getParameter("forMonthWiseInvoices").toString());
            String months = request.getParameter("months")==null?"":request.getParameter("months").toString();
            
            Set<Integer> monthsSet = new HashSet<Integer>();
            if (forMonthWiseInvoice && !(StringUtil.isNullOrEmpty(months))) {
                String[] monthsArray = months.split(",");
                for (int i = 0; i < monthsArray.length; i++) {
                    monthsSet.add(Integer.parseInt(monthsArray[i]));
                }
            }
            
            List ll = null;

            KwlReturnObject curresult = accountingHandlerDAOobj.getObject(KWLCurrency.class.getName(), currencyid);
            KWLCurrency currency = (KWLCurrency) curresult.getEntityList().get(0);

            boolean belongsTo1099 = false;

            boolean only1099Acc = (only1099AccStr != null ? Boolean.parseBoolean(only1099AccStr) : false);
            boolean ignoreZero = requestParams.get("ignorezero") != null ? Boolean.parseBoolean(requestParams.get("ignorezero").toString()) : false;
            boolean onlyAmountDue = requestParams.get(ONLYAMOUNTDUE) != null;


            requestParams.put("excludeNormalInv", true);
            requestParams.put("df", df);
            if(request.getParameter("forMonthWiseInvoices") != null){
                requestParams.put("forMonthWiseInvoices",request.getParameter("forMonthWiseInvoices"));
            }
            /*
             * Parameter for claimed invoice 
             */
            requestParams.put("onlyclaimedamountdue", true);
            KwlReturnObject result = accGoodsReceiptobj.getOpeningBalanceInvoices(requestParams);
            List list = result.getEntityList();
            boolean isInvoiceIsClaimed=false;
            boolean isEdit = request.getParameter("isEdit") == null ? false : Boolean.parseBoolean(request.getParameter("isEdit"));
            int moduleId = !StringUtil.isNullOrEmpty(request.getParameter("requestModuleid")) ? Integer.parseInt(request.getParameter("requestModuleid")) : 0;
            if (list != null) {
                Iterator it = list.iterator();
                while (it.hasNext()) {
                    String grId = it.next().toString();
                    /**
                     * In case of payment edit the invoices which are already
                     * avaliable in paymentdetails i.e at line level should not
                     * be available again in invoice selection screen.Hence
                     * checking whether payment is being edited and whether the
                     * this method is called from make payment and checking
                     * invoicesList contains Purchase invoice id if yes then
                     * continue i.e not inserting that particular PI in response
                     * JSON. ERP-41122
                     * This method is called from below methods of this class itself.
                     * getGoodsReceipts
                     * getGoodsReceiptsForPayment
                     * getMonthWiseGoodsReceiptsDue
                     * getMonthWiseGoodsReceipts
                     */
                    if (moduleId == Constants.Acc_Make_Payment_ModuleId && isEdit && (invoicesList.contains(grId))) {
                        continue;
                    }
                    KwlReturnObject objItr = accountingHandlerDAOobj.getObject(GoodsReceipt.class.getName(), grId);
                    GoodsReceipt gReceipt = (GoodsReceipt) objItr.getEntityList().get(0);
                    isInvoiceIsClaimed = gReceipt.getBadDebtType() == Constants.Invoice_Claimed || gReceipt.getBadDebtType() == Constants.Invoice_Recovered;
                    
                    JournalEntry je = null;
                    currencyid = (gReceipt.getCurrency() == null ? currency.getCurrencyID() : gReceipt.getCurrency().getCurrencyID());

                    Date invoiceCreationDate = null;
                    double externalCurrencyRate = 0d;
                    boolean isopeningBalanceInvoice = gReceipt.isIsOpeningBalenceInvoice();
                    if (gReceipt.isNormalInvoice()) {
                        je = gReceipt.getJournalEntry();
                        invoiceCreationDate = gReceipt.getCreationDate();
                        externalCurrencyRate = je.getExternalCurrencyRate();
                    } else {
                        invoiceCreationDate = gReceipt.getCreationDate();
                        externalCurrencyRate = gReceipt.getExchangeRateForOpeningTransaction();
                    }
                    Calendar cal = Calendar.getInstance();
                    cal.setTime(invoiceCreationDate);
                    int grMonth = cal.get(Calendar.MONTH);
                    if (forMonthWiseInvoice && !monthsSet.contains(grMonth)) {
                        continue;
                    }
                    double amountdue = 0, deductDiscount = 0;
                    double grAmount = gReceipt.getOriginalOpeningBalanceAmount();
                    if (gReceipt.isIsExpenseType()) {
                        ll = accGoodsReceiptCommon.getExpGRAmountDue(requestParams, gReceipt);
                        amountdue = (Double) ll.get(1);
                        belongsTo1099 = (Boolean) ll.get(3);
                    } else {
                        if (gReceipt.isIsOpeningBalenceInvoice() && !gReceipt.isNormalInvoice()) {
                            ll = new ArrayList();
                            ll.add(gReceipt.getOriginalOpeningBalanceAmount());
                            ll.add(gReceipt.getOpeningBalanceAmountDue());
                            ll.add("");
                            ll.add(false);
                            ll.add(0.0);
                        } else {
                            if (Constants.InvoiceAmountDueFlag) {
                                ll = accGoodsReceiptCommon.getInvoiceDiscountAmountInfo(requestParams, gReceipt);
                            } else {
                                ll = accGoodsReceiptCommon.getGRAmountDue(requestParams, gReceipt);
                            }
                        }
                        if (isInvoiceIsClaimed) {
                            amountdue = gReceipt.getClaimAmountDue();
                        } else {
                            amountdue = (Double) ll.get(1);
                        }
                        belongsTo1099 = (Boolean) ll.get(3);
                        deductDiscount = (Double) ll.get(4);
                    }

                    if (onlyAmountDue && authHandler.round(amountdue, companyid) == 0 || (only1099Acc && !belongsTo1099)) {//remove //belongsTo1099&&gReceipt.isIsExpenseType()\\ in case of viewing all accounts. [PS]
                        continue;
                    }
                    Set<GoodsReceiptDetail> grDetails = gReceipt.getRows();
                    JSONObject obj = new JSONObject();
                    obj.put(BILLID, gReceipt.getID());
                    obj.put(PERSONID, gReceipt.getVendor() == null ? "" : gReceipt.getVendor().getID());
                    obj.put(PERSONEMAIL, gReceipt.getVendor() == null ? "" : gReceipt.getVendor().getEmail());
                    obj.put(BILLNO, gReceipt.getGoodsReceiptNumber());
                    obj.put("transectionno", gReceipt.getGoodsReceiptNumber());
                    obj.put(CURRENCYID, currencyid);
                    obj.put(CURRENCYSYMBOL, (gReceipt.getCurrency() == null ? currency.getSymbol() : gReceipt.getCurrency().getSymbol()));
                    obj.put("currencyidtransaction",currencyid);
                    obj.put("currencysymboltransaction", (gReceipt.getCurrency() == null ? currency.getSymbol() : gReceipt.getCurrency().getSymbol()));
                    obj.put(COMPANYADDRESS, gReceipt.getCompany().getAddress());
                    obj.put(COMPANYNAME, gReceipt.getCompany().getCompanyName());
                    if (requestParams.containsKey("currencyfilterfortrans")&&requestParams.containsKey("isReceipt")) {
                        String currencyFilterForTrans = requestParams.get("currencyfilterfortrans") != null ? (String) requestParams.get("currencyfilterfortrans") : "";
                        KwlReturnObject currencyFilterResult = accountingHandlerDAOobj.getObject(KWLCurrency.class.getName(), currencyFilterForTrans);
                        KWLCurrency currencyFilter = (KWLCurrency) currencyFilterResult.getEntityList().get(0);
                        obj.put("currencyidpayment",currencyFilterForTrans);
                        obj.put("currencysymbolpayment", (currencyFilter == null ? currency.getSymbol() : currencyFilter.getSymbol()));
                    }
                    
                    KwlReturnObject bAmt = accCurrencyDAOobj.getBaseToCurrencyAmount(requestParams, 1.0, currencyid, invoiceCreationDate, 0);
                    obj.put(OLDCURRENCYRATE, bAmt.getEntityList().get(0));

                    obj.put(OLDCURRENCYRATE, bAmt.getEntityList().get(0));
                    obj.put(BILLTO, gReceipt.getBillFrom());
                    obj.put(ISEXPENSEINV, gReceipt.isIsExpenseType());
                    obj.put(SHIPTO, gReceipt.getShipFrom());
                    obj.put(JOURNALENTRYID, je != null ? je.getID() : "");
                    obj.put("accountid", gReceipt.getAccount()!=null?gReceipt.getAccount().getID():"");
                    obj.put(EXTERNALCURRENCYRATE, externalCurrencyRate);
                    obj.put(ENTRYNO, je != null ? je.getEntryNumber() : "");
                    obj.put(DATE, df.format(invoiceCreationDate));
                    obj.put("creationdate", df.format(invoiceCreationDate));
                    obj.put("invoicedate", df.format(invoiceCreationDate));
                    obj.put(SHIPDATE, gReceipt.getShipDate() == null ? "" : df.format(gReceipt.getShipDate()));
                    obj.put(DUEDATE, df.format(gReceipt.getDueDate()));
                    obj.put(PERSONNAME, gReceipt.getVendor() == null ? "" : gReceipt.getVendor().getName());
                    obj.put(MEMO, gReceipt.getMemo());
                    obj.put(TERMNAME, gReceipt.getVendor() == null ? "" : ((gReceipt.getVendor().getDebitTerm() == null) ? "" : gReceipt.getVendor().getDebitTerm().getTermname()));
                    obj.put(DELETED, gReceipt.isDeleted());
                    obj.put(TAXINCLUDED, gReceipt.getTax() == null ? false : true);
                    obj.put(TAXID, gReceipt.getTax() == null ? "" : gReceipt.getTax().getID());
                    obj.put(TAXNAME, gReceipt.getTax() == null ? "" : gReceipt.getTax().getName());
                    obj.put(TAXAMOUNT, gReceipt.getTaxEntry() == null ? 0 : gReceipt.getTaxEntry().getAmount());
                    obj.put(DISCOUNT, gReceipt.getDiscount() == null ? 0 : gReceipt.getDiscount().getDiscountValue());
                    obj.put(ISPERCENTDISCOUNT, gReceipt.getDiscount() == null ? false : gReceipt.getDiscount().isInPercent());
                    obj.put(DISCOUNTVAL, gReceipt.getDiscount() == null ? 0 : gReceipt.getDiscount().getDiscount());
                    obj.put("shipvia", gReceipt.getShipvia() == null ? "" : gReceipt.getShipvia());
                    obj.put("fob", gReceipt.getFob() == null ? "" : gReceipt.getFob());
                    obj.put(CCConstants.JSON_costcenterid, je != null ? (je.getCostcenter() == null ? "" : je.getCostcenter().getID()) : "");
                    obj.put(CCConstants.JSON_costcenterName, je != null ? (je.getCostcenter() == null ? "" : je.getCostcenter().getName()) : "");
                    obj.put("linkingdate",df.format(new Date()));
                    obj.put(TAXPERCENT, 0);
                    obj.put("invType","0");
                    obj.put(AMOUNT, grAmount); //actual invoice amount
                    JSONObject jObj = null;
                    double discountValue = 0.0;
                    int applicableDays = -1;
                    boolean discountType = false;
                    if (!StringUtil.isNullOrEmpty(extraCompanyPreferences.getColumnPref())) {
                        jObj = new JSONObject((String) extraCompanyPreferences.getColumnPref());
                        if (jObj.has(Constants.DISCOUNT_ON_PAYMENT_TERMS) && jObj.get(Constants.DISCOUNT_ON_PAYMENT_TERMS) != null && jObj.optBoolean(Constants.DISCOUNT_ON_PAYMENT_TERMS, false)) {
                            Term term = gReceipt.getTermid();
                            if (term != null && term.getDiscountName() != null) {
                                DiscountMaster discountMaster = term.getDiscountName();
                                discountValue = discountMaster.getValue();
                                discountType = discountMaster.isDiscounttype();
                                applicableDays = term.getApplicableDays();
                            }
                        }
                    }
                    obj.put("discountvalue", discountValue);
                    obj.put("discounttype", discountType ? Integer.parseInt(Constants.DISCOUNT_MASTER_TYPE_PERCENTAGE) : Integer.parseInt(Constants.DISCOUNT_MASTER_TYPE_FLAT));
                    obj.put("applicabledays", applicableDays);
                    obj.put("grcreationdate", df.format(gReceipt.getCreationDate()));
                    obj.put("invoiceduedate", df.format(gReceipt.getDueDate()));
                    if (isopeningBalanceInvoice && gReceipt.isConversionRateFromCurrencyToBase()) {// if invoice is opening balance invoice and Conversion rate is taken from user is Currency to base then following method will be called.
                        bAmt = accCurrencyDAOobj.getCurrencyToBaseAmountAccordingToCurrencyToBaseExchangeRate(requestParams, grAmount, currencyid, invoiceCreationDate, externalCurrencyRate);
                    } else {
                        bAmt = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, grAmount, currencyid, invoiceCreationDate, externalCurrencyRate);
                    }
                    
                    obj.put(AMOUNTINBASE, bAmt.getEntityList().get(0));
                    obj.put("isOpeningBalanceTransaction", true);
                    
                    String currencyFilterForTrans = "";
                if (requestParams.containsKey("currencyfilterfortrans")) {
                    currencyFilterForTrans = requestParams.get("currencyfilterfortrans") != null ? (String) requestParams.get("currencyfilterfortrans") : "";
                }

                double amountDueOriginal = amountdue;
                if (!StringUtil.isNullOrEmpty(currencyFilterForTrans) && !StringUtil.isNullOrEmpty(currencyid) && !currencyFilterForTrans.equals(currencyid)) {

                    KwlReturnObject bAmtCurrencyFilter = null;
                    if (isopeningBalanceInvoice && gReceipt.isConversionRateFromCurrencyToBase()) {// if invoice is opening balance invoice and Conversion rate is taken from user is Currency to base then following method will be called.
                        bAmtCurrencyFilter = accCurrencyDAOobj.getOneCurrencyToOtherModifiedAccordingToCurrencyToBaseExchangeRate(requestParams, amountdue, currencyid, currencyFilterForTrans, invoiceCreationDate, externalCurrencyRate);
                    } else {
                        bAmtCurrencyFilter = accCurrencyDAOobj.getOneCurrencyToOtherModified(requestParams, amountdue, currencyid, currencyFilterForTrans, invoiceCreationDate, externalCurrencyRate);
                    }
                    amountdue = (Double) bAmtCurrencyFilter.getEntityList().get(0);
                }
                if (isopeningBalanceInvoice && gReceipt.isConversionRateFromCurrencyToBase()) {// if invoice is opening balance invoice and Conversion rate is taken from user is Currency to base then following method will be called.
                    bAmt = accCurrencyDAOobj.getCurrencyToBaseAmountAccordingToCurrencyToBaseExchangeRate(requestParams, amountDueOriginal, currencyid, invoiceCreationDate, externalCurrencyRate);
                }else{
                    bAmt = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, amountDueOriginal, currencyid, invoiceCreationDate, externalCurrencyRate);
                }
                
                obj.put(AMOUNTDUEINBASE, authHandler.round((Double) bAmt.getEntityList().get(0), companyid));
                obj.put(AMOUNTDUE, authHandler.round(amountdue, companyid));
                obj.put(AMOUNTDUENONNEGATIVE, (amountdue <= 0) ? 0 : authHandler.round(amountdue, companyid));              
                obj.put("amountDueOriginal", (amountDueOriginal <= 0) ? 0 : authHandler.round(amountDueOriginal,companyid));
                obj.put("amountDueOriginalSaved", (amountDueOriginal <= 0) ? 0 : authHandler.round(amountDueOriginal,companyid));
                obj.put("exchangeratefortransaction", (amountDueOriginal <= 0&&amountdue<=0) ? 0 : (amountdue/amountDueOriginal));
                obj.put(ACCOUNTNAMES, (gReceipt.getAccount()==null)?"":gReceipt.getAccount().getName());
                    if (!(ignoreZero && authHandler.round(amountdue, companyid) <= 0)) {
                        /*
                         * While creating delivery order, checked if DOs with
                         * all quantities of invoice are created
                         */
                        boolean addFlag = true;
                        if (doflag && gReceipt.isDeleted()) {
                            addFlag = false;
                        } else if (doflag && StringUtil.equal(getInvoiceStatusForGRO(grDetails), "Closed")) {
                            addFlag = false;
                        } else if (salesPurchaseReturnflag && StringUtil.equal(getInvoiceStatusForPurchaseReturn(grDetails), "Completely Returned")) {
                            addFlag = false;
                        } else if (notlinkCNFromInvoiceFlag) {
                            addFlag = false;
                        }
                        if (addFlag && !doflag) {
                            DataJArr.put(obj);
                        }

                    }

                }
            }


        } catch (JSONException | ServiceException |SessionExpiredException ex) {
            Logger.getLogger(accGoodsReceiptControllerCMN.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
        } 
    }

    public JSONArray getGoodsReceiptsJson(HashMap<String, Object> request, List<GoodsReceipt> list) throws ServiceException {
        JSONArray jArr = new JSONArray();
             try {
            String companyid = (String) request.get(COMPANYID);
            String basecurrencyid = (String) request.get(GCURRENCYID);
            boolean doflag = request.containsKey("doflag")?  (Boolean)request.get("doflag") : false;
            boolean isPIlinktoPR = request.containsKey("isPIlinktoPR")?  (Boolean)request.get("isPIlinktoPR") : false;
            boolean isFixedAsset=request.containsKey("isFixedAsset")?  (Boolean)request.get("isFixedAsset") : false;
            boolean islinkPItoCN=request.containsKey("islinkPItoCN")?  (Boolean)request.get("islinkPItoCN") : false;
            /**
             * Get Linking flag for CN/DN with Overcharge/Undercharge
             * And get Request moduleid (CN or DN)
             */
            boolean isLinkOverUnderCharge=request.containsKey("isLinkOverUnderCharge") && request.get("isLinkOverUnderCharge")!=null?  (Boolean)request.get("isLinkOverUnderCharge") : false;
            int requestModuleid=request.containsKey("requestModuleid") && request.get("requestModuleid")!=null?  (Integer)request.get("requestModuleid") : -1;
            int moduleid=isFixedAsset ?  Constants.Acc_FixedAssets_PurchaseInvoice_ModuleId: Constants.Acc_Vendor_Invoice_ModuleId;
            DateFormat df = (DateFormat) request.get(DATEFORMAT);
            String only1099AccStr=(String)request.get(ONLY1099ACC);
            List ll=null;
            KwlReturnObject curresult = accountingHandlerDAOobj.getObject(KWLCurrency.class.getName(), basecurrencyid);
            KWLCurrency currency = (KWLCurrency) curresult.getEntityList().get(0);
            KwlReturnObject capresult = accountingHandlerDAOobj.loadObject(CompanyAccountPreferences.class.getName(), companyid);
            CompanyAccountPreferences preferences = (CompanyAccountPreferences) capresult.getEntityList().get(0);
            String cashAccount = preferences.getCashAccount().getID();
            double taxPercent = 0;
            boolean belongsTo1099=false;

            boolean only1099Acc = (only1099AccStr != null?Boolean.parseBoolean(only1099AccStr):false);
            boolean ignoreZero = request.get("ignorezero") != null?Boolean.parseBoolean(request.get("ignorezero").toString()):false;
            boolean onlyAmountDue = request.get(ONLYAMOUNTDUE) != null;
            int duration = 30;

            String curDateString = "";
            Date curDate = null;
            boolean booleanAged = false;//Added for aged payable/receivable
            
            HashMap<String, String> customFieldMap = new HashMap<String, String>();
            HashMap<String, String> customDateFieldMap = new HashMap<String, String>();

            HashMap<String, Object> fieldrequestParams = new HashMap();
            fieldrequestParams.put(Constants.filter_names, Arrays.asList(Constants.companyid, Constants.moduleid));
            fieldrequestParams.put(Constants.filter_values, Arrays.asList(companyid,moduleid));
            HashMap<String, String> replaceFieldMap = new HashMap<String, String>();
            HashMap<String, Integer> FieldMap = accAccountDAOobj.getFieldParamsCustomMap(fieldrequestParams, replaceFieldMap, customFieldMap, customDateFieldMap);

            Calendar cal1 = Calendar.getInstance();
            Calendar cal2 = Calendar.getInstance();
            Calendar cal3 = Calendar.getInstance();
            
            if(request.get(Constants.asOfDate) != null){//Added for aged payable/receivable
                curDateString = (String) request.get(Constants.asOfDate);
                curDate = df.parse(curDateString);
                booleanAged = true;
                cal1.setTime(curDate);
                cal2.setTime(curDate);
                cal3.setTime(curDate);
                cal2.add(Calendar.DAY_OF_YEAR, -duration);
                cal3.add(Calendar.DAY_OF_YEAR, -(duration * 2));
            }
            
                 Date cal1Date = null;
                 Date cal2Date = null;
                 Date cal3Date = null;

                 String cal1String = authHandler.getDateOnlyFormat().format(cal1.getTime());
                 cal1Date = authHandler.getDateOnlyFormat().parse(cal1String);

                 String cal2String = authHandler.getDateOnlyFormat().format(cal2.getTime());
                 cal2Date = authHandler.getDateOnlyFormat().parse(cal2String);

                 String cal3String = authHandler.getDateOnlyFormat().format(cal3.getTime());
                 cal3Date = authHandler.getDateOnlyFormat().parse(cal3String);
            
            double amountdue1 = 0;
            double amountdue2 = 0;
            double amountdue3 = 0;
            double amountdue4 = 0;
            List<String> idsList = new ArrayList<String>();
            
            for (GoodsReceipt gReceipt : list) {
                idsList.add(gReceipt.getID());
            }
            Map<String, GoodsReceiptInfo> invoiceObjectMap  = accGoodsReceiptobj.getGoodsReceiptInfoList(idsList);
            Map<String, JournalEntry> GoodsReceiptJEMap  = accGoodsReceiptobj.getGRInvoiceJEList(idsList);
            Map<String, List<ReceiptTermsMap>>  GoodsReceiptTermMapList  = accGoodsReceiptobj.getInvoiceTermMapGRList(idsList);
            Map<String, List<ReceiptDetail>> receiptDetailsMap = accReceiptDAOobj.getContraPayReceiptFromGReceiptList(idsList);
            Map<String, List<PaymentDetail>> paymentDetailsMap =  accVendorPaymentobj.getPaymentsInfoFromGReceiptList(idsList);
            Map<String, List<DebitNoteDetail>> dnDetailsMap =  accDebitNoteobj.getDNRowsFromVendorInvoiceList(idsList);
            if(list!=null && !list.isEmpty()){
                for(GoodsReceipt gReceipt:list){
                    taxPercent = 0;
                    amountdue1 = amountdue2 = amountdue3 = amountdue4 = 0;
                    GoodsReceiptInfo grInfo = invoiceObjectMap.get(gReceipt.getID());
                    JournalEntry je = GoodsReceiptJEMap.get(gReceipt.getID());
                    JournalEntryDetail d = gReceipt.getVendorEntry();
                    String currencyid = (gReceipt.getCurrency() == null ? currency.getCurrencyID() : gReceipt.getCurrency().getCurrencyID());
                    Account account = d.getAccount();
                    double amountdue= 0, deductDiscount = 0,amountDueOriginal=0;
                    if(gReceipt.isIsExpenseType()){
                        ll=accGoodsReceiptCommon.getExpGRAmountDue(request,gReceipt);
                        amountdue=(Double)ll.get(1);
                        belongsTo1099=(Boolean)ll.get(3);
                        amountDueOriginal=(Double)ll.get(4);
                    }
                    else{
                        if(Constants.InvoiceAmountDueFlag) {
                            ll = accGoodsReceiptCommon.getInvoiceDiscountAmountInfo(request, gReceipt);
                            amountdue=(Double)ll.get(1);
                            belongsTo1099=(Boolean)ll.get(3);
                            deductDiscount = (Double)ll.get(4);
                            amountDueOriginal=(Double)ll.get(5);
                        } else {
                            ll=accGoodsReceiptCommon.getGRAmountDue(request,gReceipt, currencyid, basecurrencyid, GoodsReceiptJEMap.get(gReceipt.getID()), 
                                    GoodsReceiptTermMapList.get(gReceipt.getID()), receiptDetailsMap.get(gReceipt.getID()), paymentDetailsMap.get(gReceipt.getID()), dnDetailsMap.get(gReceipt.getID()));
                            amountdue=(Double)ll.get(1);
                            belongsTo1099=(Boolean)ll.get(3);
                            deductDiscount = (Double)ll.get(4);
                            amountDueOriginal=(Double)ll.get(5);
                        }
                    }
                    Set<GoodsReceiptDetail> grDetails = gReceipt.getRows();
                    Iterator itr = grDetails.iterator();
                    boolean isLinkInGR = false;
                    if (doflag) {
                        while (itr.hasNext()) {
                            GoodsReceiptDetail goodsreceiptdetail = (GoodsReceiptDetail) itr.next();
                            if (goodsreceiptdetail.getGoodsReceiptOrderDetails() != null) {
                                isLinkInGR = true;
                                break;
                            }
                        }
                    }

                    if (onlyAmountDue && authHandler.round(amountdue, companyid) == 0 || (only1099Acc && !belongsTo1099)) {//remove //belongsTo1099&&gReceipt.isIsExpenseType()\\ in case of viewing all accounts. [PS]
                        continue;
                    }
                    boolean addFlag = true;
                    if (!(ignoreZero && authHandler.round(amountdue, companyid) <= 0)) {
                        /*
                         * While creating delivery order, checked if DOs with
                         * all quantities of invoice are created
                         */
                        if ((doflag && gReceipt.isDeleted()) || isLinkInGR) {
                            addFlag = false;
                            continue;
                        }
                    }
                    Vendor vendor=grInfo.getVendor();
                    Date invoiceCreationDate = gReceipt.getCreationDate();
                    double currencyToBaseRate = accCurrencyDAOobj.getCurrencyToBaseRate(request, currencyid, invoiceCreationDate);
                    JSONObject obj = new JSONObject();
                    String currencyFilterForTrans = "";
                    if (request.containsKey("currencyfilterfortrans")&&request.containsKey("isReceipt")) {
                        currencyFilterForTrans = request.get("currencyfilterfortrans") != null ? (String) request.get("currencyfilterfortrans") : "";
                        KwlReturnObject currencyFilterResult = accountingHandlerDAOobj.getObject(KWLCurrency.class.getName(), currencyFilterForTrans);
                        KWLCurrency currencyFilter = (KWLCurrency) currencyFilterResult.getEntityList().get(0);
                        obj.put("currencyidpayment",currencyFilterForTrans);
                        obj.put("currencysymbolpayment", (currencyFilter == null ? currency.getSymbol() : currencyFilter.getSymbol()));
                    }
                    obj.put(BILLID, gReceipt.getID());
                    obj.put("invoicedate", gReceipt.getCreationDate()==null ? "" : df.format(gReceipt.getCreationDate()));
                    obj.put(PERSONID, vendor==null?account.getID():vendor.getID());
                    obj.put(PERSONEMAIL, vendor==null?"":vendor.getEmail());
                    obj.put(BILLNO, gReceipt.getGoodsReceiptNumber());
                    obj.put("transectionno", gReceipt.getGoodsReceiptNumber());
                    obj.put( CURRENCYID,currencyid);
                    obj.put(CURRENCYSYMBOL, (gReceipt.getCurrency() == null ? currency.getSymbol() : gReceipt.getCurrency().getSymbol()));
                    obj.put("currencyidtransaction",currencyid);
                    obj.put("currencysymboltransaction", (gReceipt.getCurrency() == null ? currency.getSymbol() : gReceipt.getCurrency().getSymbol()));
                    obj.put(COMPANYADDRESS, grInfo.getCompany().getAddress());
                    obj.put(COMPANYNAME, grInfo.getCompany().getCompanyName());
                    obj.put(OLDCURRENCYRATE,currencyToBaseRate * 1.0);
                    obj.put(BILLTO, gReceipt.getBillFrom());
                    obj.put(ISEXPENSEINV, gReceipt.isIsExpenseType());
                    obj.put(SHIPTO, gReceipt.getShipFrom());
                    obj.put(JOURNALENTRYID, je.getID());
                    obj.put("accountid", gReceipt.getAccount().getID());
                    obj.put("gtaapplicable", gReceipt.isGtaapplicable());
                    obj.put("isClaimedInvoice", (gReceipt.getBadDebtType()==1 || gReceipt.getBadDebtType()==2));// for Malasian Company
                    obj.put(EXTERNALCURRENCYRATE, je.getExternalCurrencyRate());
                    obj.put(ENTRYNO, je.getEntryNumber());
                    obj.put(DATE, df.format(gReceipt.getCreationDate()));
                    obj.put("linkingdate",df.format(new Date()));
                    /**
                     * Passing JE date in response for validating date on JS
                     * Side ERM-655.
                     */
                    obj.put("jeDate", gReceipt.isIsOpeningBalenceInvoice()?( gReceipt.getCreationDate()==null ? "" : df.format(gReceipt.getCreationDate()) ): df.format(je.getEntryDate()));
                    obj.put("creationdate", df.format(gReceipt.getCreationDate()));
                    obj.put(SHIPDATE, gReceipt.getShipDate()==null? "" : df.format(gReceipt.getShipDate()));
                    obj.put(DUEDATE, df.format(gReceipt.getDueDate()));
                    obj.put(PERSONNAME, vendor==null?account.getName():vendor.getName());
                    obj.put(ALIASNAME, vendor==null?"":vendor.getAliasname());
                    obj.put(MEMO, gReceipt.getMemo());
                    obj.put(TERMNAME,vendor==null?"":((vendor.getDebitTerm()== null)?"":vendor.getDebitTerm().getTermname()));
                    obj.put("termid",vendor==null?"":((vendor.getDebitTerm()== null)?"":vendor.getDebitTerm().getID()));//ERP-16831
                    obj.put(DELETED, gReceipt.isDeleted());
                    obj.put(TAXINCLUDED, gReceipt.getTax() == null ? false : true);
                    obj.put(TAXID, gReceipt.getTax() == null ? "" : gReceipt.getTax().getID());
                    obj.put(TAXNAME, gReceipt.getTax() == null ? "" : gReceipt.getTax().getName());
                    obj.put(TAXAMOUNT, gReceipt.getTaxEntry() == null ? 0 : gReceipt.getTaxEntry().getAmount());
                    obj.put(DISCOUNT, gReceipt.getDiscount() == null ? 0 : gReceipt.getDiscount().getDiscountValue());
                    obj.put(ISPERCENTDISCOUNT, gReceipt.getDiscount()==null?false:gReceipt.getDiscount().isInPercent());
                    obj.put(DISCOUNTVAL, gReceipt.getDiscount()==null?0:gReceipt.getDiscount().getDiscount());
                    obj.put("shipvia", gReceipt.getShipvia()==null?"":gReceipt.getShipvia());
                    obj.put("fob", gReceipt.getFob()==null?"":gReceipt.getFob());
                    obj.put("isConsignment", gReceipt.isIsconsignment());
                    obj.put("gstIncluded", gReceipt.isGstIncluded());
                    obj.put("agent", gReceipt.getMasterAgent() == null ? "" : gReceipt.getMasterAgent().getID());
                    obj.put("agentname", gReceipt.getMasterAgent() == null ? "" : gReceipt.getMasterAgent().getValue()); 
                    obj.put(CCConstants.JSON_costcenterid, je.getCostcenter()==null?"":je.getCostcenter().getID());
                    obj.put(CCConstants.JSON_costcenterName, je.getCostcenter()==null?"":je.getCostcenter().getName());
                    obj.put(Constants.SUPPLIERINVOICENO, gReceipt.getSupplierInvoiceNo() != null ? gReceipt.getSupplierInvoiceNo() : "");                    
                    obj.put("termdetails", accGoodsReceiptServiceHandler.getPurchaseInvoiceTermDetails(gReceipt.getID(), accGoodsReceiptobj));             //ERP-33441 [SDP-9434]Need Invoice Term to populate when linked to other module
                     /**
                     * Put GST document history.
                     */
                    if (gReceipt.getCompany().getCountry().getID().equalsIgnoreCase("" + Constants.indian_country_id)) {
                        obj.put("refdocid", gReceipt.getID());
                        fieldDataManagercntrl.getGSTDocumentHistory(obj);
                        /**
                         * Get Merchant Exporter Check 
                         */
                        obj.put(Constants.isMerchantExporter, gReceipt.isIsMerchantExporter());
                    }

                    obj=AccountingAddressManager.getTransactionAddressJSON(obj,gReceipt.getBillingShippingAddresses(),true);
                    //For getting tax in percent applyied on invoice [PS]
                    if (gReceipt.getTax() != null) {
                        KwlReturnObject taxresult = accTaxObj.getTaxPercent(companyid, gReceipt.getCreationDate(), gReceipt.getTax().getID());
                        taxPercent = (Double) taxresult.getEntityList().get(0);
                    }
                    obj.put( TAXPERCENT,taxPercent);
                    // Included Product tax or not
                    boolean includeprotax = false;
                    if (!gReceipt.isIsExpenseType() && gReceipt.isNormalInvoice()) {
                        Set<GoodsReceiptDetail> goodsReceiptDetails = gReceipt.getRows();
                        for (GoodsReceiptDetail goodsReceiptDetail : goodsReceiptDetails) {
                            if (goodsReceiptDetail.getTax() != null) {
                                includeprotax = true;
                                break;
                            }
                        }
                    } else if (gReceipt.isIsExpenseType()) {
                        Set<ExpenseGRDetail> expenseGRDetails = gReceipt.getExpenserows();
                        for (ExpenseGRDetail expGReceiptDetail : expenseGRDetails) {
                            if (expGReceiptDetail.getTax() != null) {
                                includeprotax = true;
                                break;
                            }
                        }
                    }
                    obj.put("includeprotax", includeprotax);
                    obj.put("isapplytaxtoterms",gReceipt.isApplyTaxToTerms());

    //For getting amountdue [PS]
                    double amountinbase = amountdue;
                    if (account.getID().equals(cashAccount)) {
                        obj.put(AMOUNTDUEINBASE, 0);
                        obj.put(AMOUNTDUE, 0);
                        obj.put(AMOUNTDUENONNEGATIVE, 0);
                        obj.put("amountDueOriginal", 0);
                        obj.put("amountDueOriginalSaved", 0);
                        obj.put(INCASH, true);
                    } else {
                        if(amountdue!=0) {
                            if(je.getExternalCurrencyRate()!=0) {
                                amountinbase =  amountdue/je.getExternalCurrencyRate();
                            } else if(currencyToBaseRate!=0) {
                                amountinbase =  amountdue/currencyToBaseRate;
                            }
                        }
                        obj.put(AMOUNTDUEINBASE, authHandler.round(amountinbase,companyid));
                        obj.put(AMOUNTDUE,authHandler.round(amountdue,companyid));

                        if(booleanAged){//Added for aged payable/receivable
                            Date dueDate = null;
                            if(!StringUtil.isNullOrEmpty(df.format(gReceipt.getDueDate()))){
                                dueDate = df.parse(df.format(gReceipt.getDueDate()));
                            }
                            int datefilter = request.containsKey("datefilter") ? (Integer)request.get("datefilter") : 0;
                            if(datefilter==0 || datefilter == Constants.agedDueDate0to30Filter)
                                dueDate = df.parse(df.format(gReceipt.getDueDate()));
                            else 
                                dueDate = df.parse(df.format(gReceipt.getCreationDate()));

                            if (dueDate.after(cal1Date) || dueDate.equals(cal1Date)) {
                                if (dueDate.equals(cal1Date) && (datefilter == Constants.agedDueDate0to30Filter || datefilter == Constants.agedInvoiceDate0to30Filter)) {
                                    amountdue2 = authHandler.round(amountdue, companyid);  // 0-30 Days
                                } else {
                                    amountdue1 = authHandler.round(amountdue, companyid); // Current
                                }
                            } else if ((cal2Date.before(dueDate) || cal2Date.equals(dueDate)) && cal1Date.after(dueDate)) {
                                amountdue2 = authHandler.round(amountdue,companyid);
                            } else if ((cal3Date.before(dueDate) || cal3Date.equals(dueDate)) && cal2Date.after(dueDate)) {
                                amountdue3 = authHandler.round(amountdue,companyid);
                            } else {
                                amountdue4 = authHandler.round(amountdue,companyid);
                            }
                        }
                        KwlReturnObject custumObjresult = null;
                        if (gReceipt.isNormalInvoice()) {
                            Map<String, Object> variableMap = new HashMap<String, Object>();
                            custumObjresult = accountingHandlerDAOobj.getObject(AccJECustomData.class.getName(), je.getID());
                            replaceFieldMap = new HashMap<String, String>();
                            if (custumObjresult != null && custumObjresult.getEntityList().size() > 0) {
                                AccJECustomData jeDetailCustom = (AccJECustomData) custumObjresult.getEntityList().get(0);
                                if (jeDetailCustom != null) {
                                    AccountingManager.setCustomColumnValues(jeDetailCustom, FieldMap, replaceFieldMap, variableMap);
                                    JSONObject params = new JSONObject();
                                    if (doflag || isPIlinktoPR || islinkPItoCN) {
                                        int moduleId = isFixedAsset ? Constants.Acc_FixedAssets_GoodsReceipt_ModuleId : Constants.Acc_Goods_Receipt_ModuleId;
                                        if(isPIlinktoPR){
                                            moduleId =  Constants.Acc_Purchase_Return_ModuleId;
                                        }
                                        if(islinkPItoCN){
                                            moduleId =  Constants.Acc_Credit_Note_ModuleId;
                                        }
                                        /** 
                                         * handle linking case for Overcharge and Undercharge in Debit Note and Credit note module ID 
                                         * 
                                         */
                                        if(isLinkOverUnderCharge && requestModuleid!=-1){
                                            moduleId =  requestModuleid; 
                                        }
                                        params.put("linkModuleId", moduleId);
                                        params.put("isLink", true);
                                        params.put("companyid", companyid);
                                        params.put("customcolumn", 0);
                                    }
                                    fieldDataManagercntrl.addCustomData(variableMap, customFieldMap, customDateFieldMap, obj, params);
                                }
                            }
                        }
                        obj.put(AMOUNTDUENONNEGATIVE, (amountdue <= 0) ? 0 : authHandler.round(amountdue,companyid));
                        obj.put("amountDueOriginal", (amountDueOriginal <= 0) ? 0 : authHandler.round(amountDueOriginal,companyid));
                        obj.put("amountDueOriginalSaved", (amountDueOriginal <= 0) ? 0 : authHandler.round(amountDueOriginal,companyid));
                        obj.put("exchangeratefortransaction", (amountDueOriginal <= 0&&amountdue<=0) ? 0 :(amountdue/amountDueOriginal));
                    }

    //for getting total invoice amount [PS]
                    if(gReceipt.isIsExpenseType()){
                        obj.put(AMOUNT, (Double)ll.get(0));//for expense invoice                        
                        KwlReturnObject bAmt = accCurrencyDAOobj.getCurrencyToBaseAmount(request, (Double)ll.get(0), currencyid, gReceipt.getCreationDate(),je.getExternalCurrencyRate());
                        obj.put(AMOUNTINBASE, bAmt.getEntityList().get(0));
                    }
                    else{
                        double accAmountinBase =  d.getAmount();
                        if(accAmountinBase!=0) {
                            if(je.getExternalCurrencyRate()!=0) {
                                accAmountinBase =  accAmountinBase/je.getExternalCurrencyRate();
                            } else if(currencyToBaseRate!=0) {
                                accAmountinBase =  accAmountinBase/currencyToBaseRate;
                            }
                        }
                        obj.put(AMOUNT, d.getAmount()); //actual invoice amount
                        obj.put(AMOUNTINBASE, accAmountinBase);
                    }
                    obj.put(ACCOUNTNAMES, (String)ll.get(2));
                    obj.put(AMOUNTDUE1, amountdue1);
                    obj.put(AMOUNTDUE2,amountdue2);
                    obj.put(AMOUNTDUE3, amountdue3);
                    obj.put(AMOUNTDUE4, amountdue4);
                    obj.put(DEDUCTDISCOUNT, deductDiscount);
                    if (!(ignoreZero && authHandler.round(amountdue, companyid) <= 0)) {
                        if (addFlag) {
                            jArr.put(obj);
                        }

                    }
                }
            }
            if(request.containsKey("filetype")){
            	if(request.get("filetype").equals("print")){
            		double total = 0;
	            	for(int i = 0; i < jArr.length(); i++)
	            		total = total + (Double)jArr.getJSONObject(i).get(AMOUNTDUEINBASE);
	            	JSONObject obj1 = new JSONObject();
	            	obj1.put(AMOUNTDUEINBASE, total);
	            	obj1.put(BILLNO, "Total Amount Due");
	            	jArr.put(obj1);
	            }
            }
        } catch (Exception ex) {
            throw ServiceException.FAILURE("accGoodsReceiptController.getGoodsReceiptsJson : " + ex.getMessage(), ex);
        }
        return jArr;
    }    
    /*
     * Function to fetch Invoice status for Delivery order. Checked if delivery
     * order of all invoice quantities is prepared.
     */
    public String getInvoiceStatusForGRO(Set<GoodsReceiptDetail> ivDetail) throws ServiceException {
        Iterator ite = ivDetail.iterator();
        String result = "Closed";
            while (ite.hasNext()) {
                GoodsReceiptDetail iDetail = (GoodsReceiptDetail) ite.next();
                KwlReturnObject idresult = accGoodsReceiptobj.getGDOIDFromVendorInvoiceDetails(iDetail.getID());
                List list = idresult.getEntityList();
                Iterator ite1 = list.iterator();
                double qua = 0;
                while (ite1.hasNext()) {
                    GoodsReceiptOrderDetails ge = (GoodsReceiptOrderDetails) ite1.next();
                    qua += ge.getInventory().getQuantity();
                }
                if (qua < iDetail.getInventory().getQuantity()) {
                    result = "Open";
                    break;
                }
            }
        return result;
    }
    
     /*
     Function to fetch Invoice status for Purchase Return. Checked if Purchase Return of all invoice quantities is prepared.
     */
    public String getInvoiceStatusForPurchaseReturn(Set<GoodsReceiptDetail> ivDetail) throws ServiceException {
        Iterator ite = ivDetail.iterator();
        String result = "Completely Returned";
        while (ite.hasNext()) {
            GoodsReceiptDetail iDetail = (GoodsReceiptDetail) ite.next();
            KwlReturnObject idresult = accGoodsReceiptobj.getPurchaseReturnIDFromVendorInvoiceDetails(iDetail.getID());
            List list = idresult.getEntityList();
            Iterator ite1 = list.iterator();
            double qua = 0;
            while (ite1.hasNext()) {
                PurchaseReturnDetail prd = (PurchaseReturnDetail) ite1.next();
                qua += prd.getInventory().getQuantity();
            }
            if (qua < iDetail.getInventory().getQuantity()) {
                result = "Completely Not Returned";
                break;
            }
        }
        return result;
    }
    
    public ModelAndView getGoodsReceiptRows(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        boolean issuccess = false;
        String msg = "";
        try{
            JSONArray DataJArr = accGoodsReceiptCommon.getGoodsReceiptRows(request,null);
            jobj.put( DATA,DataJArr);
            issuccess = true;
        } catch (ServiceException ex) {
            Logger.getLogger(accGoodsReceiptController.class.getName()).log(Level.SEVERE, null, ex);
            issuccess = false;
            msg = ex.getMessage();
        } catch (Exception ex) {
            issuccess = false;
            msg = ""+ex.getMessage();
            Logger.getLogger(accGoodsReceiptController.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                jobj.put( SUCCESS,issuccess);
                jobj.put( MSG,msg);
            } catch (JSONException ex) {
                Logger.getLogger(accGoodsReceiptController.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return new ModelAndView(JSONVIEW,MODEL, jobj.toString());
    }

    public ModelAndView getVendorAgedPayable(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        boolean issuccess = false;
        boolean isAged = request.getParameter("isAged")!=null?Boolean.parseBoolean(request.getParameter("isAged")):false;
        boolean isExportReport = !StringUtil.isNullOrEmpty(request.getParameter("isExportReport")) ? Boolean.parseBoolean(request.getParameter("isExportReport")):false;
        boolean isParentChild = request.getParameter("isParentChild")!=null?Boolean.parseBoolean(request.getParameter("isParentChild")):false;
        String msg = "";
        String view = "jsonView";
        boolean isWidgetRequest = request.getParameter("isWidgetRequest") != null ? Boolean.parseBoolean(request.getParameter("isWidgetRequest")) : false;
        JSONObject totalAmountJSON = new JSONObject();
        
        try{
            HashMap<String, Object> requestParams = AccGoodsReceiptServiceHandler.getGoodsReceiptRequestMap(request);
            JSONArray DataJArr = new JSONArray();
            if (isParentChild) {
                /**
                 * Show Vendor in Parent Child Hierarchy Report
                 */
                DataJArr = accGoodsReceiptServiceDAO.getParentChildVendorAgedPayableMerged(request, requestParams);
            } else {
                /**
                 * Call Normal Aged payable report
                 */
                DataJArr = accGoodsReceiptServiceDAO.getVendorAgedPayableMerged(request, requestParams);
            }

            JSONArray pagedJArr = DataJArr;
            String start = request.getParameter(START);
            String limit = request.getParameter(LIMIT);
            if(isExportReport){ //SDP-7909
                limit = String.valueOf(pagedJArr.length());
            }
            if (!StringUtil.isNullOrEmpty(start) && !StringUtil.isNullOrEmpty(limit)) {	
                 if (isAged && !isWidgetRequest) { // ADD GRNAD TOTAL AS LAST RECORD IN PAGED JSON
                    pagedJArr = StringUtil.getPagedJSONForAgedWIthTotal(pagedJArr, Integer.parseInt(start), Integer.parseInt(limit));
                    totalAmountJSON = pagedJArr.getJSONObject(pagedJArr.length()-1);
                    pagedJArr.remove(pagedJArr.length()-1);
                    jobj.put(Constants.AGEDAMOUNTSUMMARY, totalAmountJSON);
                 } else {
                    pagedJArr = StringUtil.getPagedJSON(pagedJArr, Integer.parseInt(start), Integer.parseInt(limit));
                }
            }
            issuccess = true;
            
            if (isWidgetRequest) {
                view = "jsonView_ex";
                JSONObject commData = new JSONObject();
                JSONObject jMeta = new JSONObject();
                Map<String, Object> requestParamsForCM = new HashMap<>();
                Map<String, JSONArray> returnMap = accInvoiceServiceDAO.getColumnModuleForAPAR(requestParamsForCM);
                JSONArray jarrRecords = returnMap.get("record");
                JSONArray jarrColumns = returnMap.get("columns");
                commData.put("success", true);
                jMeta.put("totalProperty", "totalCount");
                jMeta.put("root", "coldata");
                jMeta.put("fields", jarrRecords); //Record Array
                commData.put("coldata", pagedJArr);  //Actual data
                commData.put("columns", jarrColumns); //Column Module Array
                commData.put("totalCount", pagedJArr.length());
                commData.put("metaData", jMeta);

                jobj.put("valid", true);
                jobj.put("data", commData);
            } else {
                jobj.put(DATA, pagedJArr);
                jobj.put(COUNT, DataJArr.length());
            }
        } catch (SessionExpiredException | ServiceException ex) {
            msg = ex.getMessage();
            Logger.getLogger(accGoodsReceiptController.class.getName()).log(Level.SEVERE, null, ex);
        }catch (Exception ex) {
            msg = "accGoodsReceiptController.getVendorAgedPayable : "+ex.getMessage();
        } finally {
            try {
                jobj.put( SUCCESS,issuccess);
                jobj.put( MSG,msg);
            } catch (JSONException ex) {
                Logger.getLogger(accGoodsReceiptController.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return new ModelAndView(view, "model", jobj.toString());
    }
    
    public ModelAndView getVendorAgedPayablebasedonDimensions(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        boolean issuccess = false;
        String msg = "";
        try{
            HashMap<String, Object> requestParams = new HashMap<String, Object>();
            requestParams.put(COMPANYID, sessionHandlerImpl.getCompanyid(request));
            requestParams.put(GCURRENCYID, sessionHandlerImpl.getCurrencyID(request));
            requestParams.put(DATEFORMAT, authHandler.getDateFormatter(request));
            requestParams.put(START, request.getParameter(START));
            requestParams.put(LIMIT, request.getParameter(LIMIT));
            requestParams.put(SS, request.getParameter(SS));
            requestParams.put(ACCID, request.getParameter(ACCID));
            requestParams.put(CASHONLY, request.getParameter(CASHONLY));
            requestParams.put(CREDITONLY, request.getParameter(CREDITONLY));
            requestParams.put(IGNOREZERO, request.getParameter(IGNOREZERO));
            requestParams.put(CURDATE, request.getParameter(CURDATE));
            requestParams.put(PERSONGROUP, request.getParameter(PERSONGROUP));
            requestParams.put(ISAGEDGRAPH, request.getParameter(ISAGEDGRAPH));
            requestParams.put(VENDORID, request.getParameter(VENDORID));
            requestParams.put(NONDELETED, request.getParameter(NONDELETED));
            requestParams.put(DURATION, request.getParameter(DURATION));
            requestParams.put(ISDISTRIBUTIVE, request.getParameter(ISDISTRIBUTIVE));
            requestParams.put(WITHINVENTORY, request.getParameter(WITHINVENTORY));
            requestParams.put(Constants.df, authHandler.getDateFormatter(request));
            requestParams.put(Constants.REQ_startdate ,request.getParameter(Constants.REQ_startdate));
            requestParams.put(Constants.REQ_enddate ,request.getParameter(Constants.REQ_enddate));
            requestParams.put(Constants.Acc_Search_Json ,request.getParameter(Constants.Acc_Search_Json));
            requestParams.put(Constants.moduleid ,Constants.Acc_Vendor_Invoice_ModuleId);
            requestParams.put(Constants.Filter_Criteria ,request.getParameter(InvoiceConstants.Filter_Criteria));
            boolean requestfromdimensionbasedreport = request.getParameter("requestfromdimensionbasedreport")!=null?Boolean.parseBoolean(request.getParameter("requestfromdimensionbasedreport")):false;
            requestParams.put("requestfromdimensionbasedreport", requestfromdimensionbasedreport);
            requestParams.put("pendingapproval" ,(request.getParameter("pendingapproval") != null)? Boolean.parseBoolean(request.getParameter("pendingapproval")): false);
            requestParams.put("istemplate" ,(request.getParameter("istemplate") != null)? Integer.parseInt(request.getParameter("istemplate")): 0);
            requestParams.put("datefilter", request.getParameter("datefilter"));
            requestParams.put("custVendorID", request.getParameter("custVendorID"));
            requestParams.put("asofdate", request.getParameter("asofdate"));
            requestParams.put("isAged", request.getParameter("isAged"));
            requestParams.put("isAgedPayables", true);
            requestParams.put("noOfInterval",(request.getParameter("noOfInterval") != null) ? request.getParameter("noOfInterval") : 7);
             jobj = accGoodsReceiptServiceDAO.getVendorAgedPayablebasedonDimensions(request, requestParams);
            issuccess = true;
        } catch (SessionExpiredException | ServiceException ex) {
            msg = ex.getMessage();
            Logger.getLogger(accGoodsReceiptController.class.getName()).log(Level.SEVERE, null, ex);
        }catch (Exception ex) {
            msg = "accGoodsReceiptController.getVendorAgedPayable : "+ex.getMessage();
        } finally {
            try {
                jobj.put( SUCCESS,issuccess);
                jobj.put( MSG,msg);
            } catch (JSONException ex) {
                Logger.getLogger(accGoodsReceiptController.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return new ModelAndView(JSONVIEW_EX,MODEL, jobj.toString());
    }
    
    
    public ModelAndView exportVendorAgedPayablebasedonDimensions(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        String view = JSONVIEW_EX;
        try{
            HashMap<String, Object> requestParams = new HashMap<String, Object>();
            requestParams.put(COMPANYID, sessionHandlerImpl.getCompanyid(request));
            requestParams.put(GCURRENCYID, sessionHandlerImpl.getCurrencyID(request));
            requestParams.put(DATEFORMAT, authHandler.getDateFormatter(request));
            requestParams.put(START, request.getParameter(START));
            requestParams.put(LIMIT, request.getParameter(LIMIT));
            requestParams.put(SS, request.getParameter(SS));
            requestParams.put(ACCID, request.getParameter(ACCID));
            requestParams.put(CASHONLY, request.getParameter(CASHONLY));
            requestParams.put(CREDITONLY, request.getParameter(CREDITONLY));
            requestParams.put(IGNOREZERO, request.getParameter(IGNOREZERO));
            requestParams.put(CURDATE, request.getParameter(CURDATE));
            requestParams.put(PERSONGROUP, request.getParameter(PERSONGROUP));
            requestParams.put(ISAGEDGRAPH, request.getParameter(ISAGEDGRAPH));
            requestParams.put(VENDORID, request.getParameter(VENDORID));
            requestParams.put(NONDELETED, request.getParameter(NONDELETED));
            requestParams.put(DURATION, request.getParameter(DURATION));
            requestParams.put(ISDISTRIBUTIVE, request.getParameter(ISDISTRIBUTIVE));
            requestParams.put(WITHINVENTORY, request.getParameter(WITHINVENTORY));
            requestParams.put(Constants.df, authHandler.getDateFormatter(request));
            requestParams.put(Constants.REQ_startdate ,request.getParameter(Constants.REQ_startdate));
            requestParams.put(Constants.REQ_enddate ,request.getParameter(Constants.REQ_enddate));
            requestParams.put(Constants.Acc_Search_Json ,request.getParameter(Constants.Acc_Search_Json));
            requestParams.put(Constants.moduleid ,Constants.Acc_Vendor_Invoice_ModuleId);
             requestParams.put(Constants.Filter_Criteria ,request.getParameter(InvoiceConstants.Filter_Criteria));
            boolean requestfromdimensionbasedreport = request.getParameter("requestfromdimensionbasedreport")!=null?Boolean.parseBoolean(request.getParameter("requestfromdimensionbasedreport")):false;
            requestParams.put("requestfromdimensionbasedreport", requestfromdimensionbasedreport);
            requestParams.put("isAged" ,request.getParameter("isAged"));
            requestParams.put("asofdate", request.getParameter("asofdate"));
            requestParams.put("pendingapproval" ,(request.getParameter("pendingapproval") != null)? Boolean.parseBoolean(request.getParameter("pendingapproval")): false);
            requestParams.put("istemplate" ,(request.getParameter("istemplate") != null)? Integer.parseInt(request.getParameter("istemplate")): 0);
            requestParams.put("datefilter", request.getParameter("datefilter"));
            requestParams.put("custVendorID", request.getParameter("custVendorID"));
            requestParams.put("exportAgedPayables", true); 
            requestParams.put("exportAgedReceivables", true); 
            requestParams.put("isAgedPayables", true); 
            requestParams.put("noOfInterval",(request.getParameter("noOfInterval") != null) ? request.getParameter("noOfInterval") : 7);
             jobj = accGoodsReceiptServiceDAO.getVendorAgedPayablebasedonDimensions(request, requestParams);
           String fileType = request.getParameter("filetype");
            if (StringUtil.equal(fileType, "print")) {
                String  GenerateDate = authHandler.getDateFormatter(request).format(new Date());
                jobj.put("GenerateDate", GenerateDate);
                view = JSONVIEWEMPTY;
            }
            exportDaoObj.processRequest(request, response, jobj);
        } catch (SessionExpiredException ex) {
            Logger.getLogger(accGoodsReceiptController.class.getName()).log(Level.SEVERE, null, ex);
        } catch(Exception ex) {
            Logger.getLogger(accGoodsReceiptController.class.getName()).log(Level.SEVERE, null, ex);
        }
        return new ModelAndView(view,MODEL, jobj.toString());
    }
     
    public ModelAndView getVendorAgedPayableDetailedbasedonDimensions(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        boolean issuccess = false;
        String msg = "";
        try{
            HashMap<String, Object> requestParams = new HashMap<String, Object>();
            requestParams.put(COMPANYID, sessionHandlerImpl.getCompanyid(request));
            requestParams.put(GCURRENCYID, sessionHandlerImpl.getCurrencyID(request));
            requestParams.put(DATEFORMAT, authHandler.getDateFormatter(request));
            requestParams.put(START, request.getParameter(START));
            requestParams.put(LIMIT, request.getParameter(LIMIT));
            requestParams.put(SS, request.getParameter(SS));
            requestParams.put(ACCID, request.getParameter(ACCID));
            requestParams.put(CASHONLY, request.getParameter(CASHONLY));
            requestParams.put(CREDITONLY, request.getParameter(CREDITONLY));
            requestParams.put(IGNOREZERO, request.getParameter(IGNOREZERO));
            requestParams.put(CURDATE, request.getParameter(CURDATE));
            requestParams.put(PERSONGROUP, request.getParameter(PERSONGROUP));
            requestParams.put(ISAGEDGRAPH, request.getParameter(ISAGEDGRAPH));
            requestParams.put(VENDORID, request.getParameter(VENDORID));
            requestParams.put(NONDELETED, request.getParameter(NONDELETED));
            requestParams.put(DURATION, request.getParameter(DURATION));
            requestParams.put(ISDISTRIBUTIVE, request.getParameter(ISDISTRIBUTIVE));
            requestParams.put(WITHINVENTORY, request.getParameter(WITHINVENTORY));
            requestParams.put(Constants.df, authHandler.getDateFormatter(request));
            requestParams.put(Constants.REQ_startdate ,request.getParameter(Constants.REQ_startdate));
            requestParams.put(Constants.REQ_enddate ,request.getParameter(Constants.REQ_enddate));
            requestParams.put(Constants.Acc_Search_Json ,request.getParameter(Constants.Acc_Search_Json));
            requestParams.put(Constants.moduleid ,Constants.Acc_Vendor_Invoice_ModuleId);
            boolean requestfromdimensionbasedreport = request.getParameter("requestfromdimensionbasedreport")!=null?Boolean.parseBoolean(request.getParameter("requestfromdimensionbasedreport")):false;
            requestParams.put("requestfromdimensionbasedreport", requestfromdimensionbasedreport);
            requestParams.put("pendingapproval" ,(request.getParameter("pendingapproval") != null)? Boolean.parseBoolean(request.getParameter("pendingapproval")): false);
            requestParams.put("istemplate" ,(request.getParameter("istemplate") != null)? Integer.parseInt(request.getParameter("istemplate")): 0);
            requestParams.put("datefilter", request.getParameter("datefilter"));
            requestParams.put("custVendorID", request.getParameter("custVendorID"));
            requestParams.put("asofdate", request.getParameter("asofdate"));
            requestParams.put("isAged", request.getParameter("isAged"));
            requestParams.put("isAgedPayables", true);
            requestParams.put("noOfInterval",(request.getParameter("noOfInterval") != null) ? request.getParameter("noOfInterval") : 7);
             jobj = accGoodsReceiptServiceDAO.getVendorAgedPayableDetailedbasedonDimensions(request, requestParams);
            issuccess = true;
        } catch (SessionExpiredException | ServiceException ex) {
            msg = ex.getMessage();
            Logger.getLogger(accGoodsReceiptController.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            msg = "accGoodsReceiptController.getVendorAgedPayable : "+ex.getMessage();
        } finally {
            try {
                jobj.put( SUCCESS,issuccess);
                jobj.put( MSG,msg);
            } catch (JSONException ex) {
                Logger.getLogger(accGoodsReceiptController.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return new ModelAndView(JSONVIEW_EX,MODEL, jobj.toString());
    }
    
    
    public ModelAndView exportVendorAgedPayableDetailedbasedonDimensions(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        String view = JSONVIEW_EX;
        try{
            HashMap<String, Object> requestParams = new HashMap<String, Object>();
            requestParams.put(COMPANYID, sessionHandlerImpl.getCompanyid(request));
            requestParams.put(GCURRENCYID, sessionHandlerImpl.getCurrencyID(request));
            requestParams.put(DATEFORMAT, authHandler.getDateFormatter(request));
            requestParams.put(START, request.getParameter(START));
            requestParams.put(LIMIT, request.getParameter(LIMIT));
            requestParams.put(SS, request.getParameter(SS));
            requestParams.put(ACCID, request.getParameter(ACCID));
            requestParams.put(CASHONLY, request.getParameter(CASHONLY));
            requestParams.put(CREDITONLY, request.getParameter(CREDITONLY));
            requestParams.put(IGNOREZERO, request.getParameter(IGNOREZERO));
            requestParams.put(CURDATE, request.getParameter(CURDATE));
            requestParams.put(PERSONGROUP, request.getParameter(PERSONGROUP));
            requestParams.put(ISAGEDGRAPH, request.getParameter(ISAGEDGRAPH));
            requestParams.put(VENDORID, request.getParameter(VENDORID));
            requestParams.put(NONDELETED, request.getParameter(NONDELETED));
            requestParams.put(DURATION, request.getParameter(DURATION));
            requestParams.put(ISDISTRIBUTIVE, request.getParameter(ISDISTRIBUTIVE));
            requestParams.put(WITHINVENTORY, request.getParameter(WITHINVENTORY));
            requestParams.put(Constants.df, authHandler.getDateFormatter(request));
            requestParams.put(Constants.REQ_startdate ,request.getParameter(Constants.REQ_startdate));
            requestParams.put(Constants.REQ_enddate ,request.getParameter(Constants.REQ_enddate));
            requestParams.put(Constants.Acc_Search_Json ,request.getParameter(Constants.Acc_Search_Json));
            requestParams.put(Constants.moduleid ,Constants.Acc_Vendor_Invoice_ModuleId);
            boolean requestfromdimensionbasedreport = request.getParameter("requestfromdimensionbasedreport")!=null?Boolean.parseBoolean(request.getParameter("requestfromdimensionbasedreport")):false;
            requestParams.put("requestfromdimensionbasedreport", requestfromdimensionbasedreport);
            requestParams.put("isAged" ,request.getParameter("isAged"));
            requestParams.put("asofdate", request.getParameter("asofdate"));
            requestParams.put("pendingapproval" ,(request.getParameter("pendingapproval") != null)? Boolean.parseBoolean(request.getParameter("pendingapproval")): false);
            requestParams.put("istemplate" ,(request.getParameter("istemplate") != null)? Integer.parseInt(request.getParameter("istemplate")): 0);
            requestParams.put("datefilter", request.getParameter("datefilter"));
            requestParams.put("custVendorID", request.getParameter("custVendorID"));
            requestParams.put("exportAgedPayables", true); 
            requestParams.put("exportAgedReceivables", true); 
            requestParams.put("isAgedPayables", true); 
            requestParams.put("noOfInterval",(request.getParameter("noOfInterval") != null) ? request.getParameter("noOfInterval") : 7);
             jobj = accGoodsReceiptServiceDAO.getVendorAgedPayableDetailedbasedonDimensions(request, requestParams);
           String fileType = request.getParameter("filetype");
            if (StringUtil.equal(fileType, "print")) {
                String  GenerateDate = authHandler.getDateFormatter(request).format(new Date());
                jobj.put("GenerateDate", GenerateDate);
                view = JSONVIEWEMPTY;
            }
            exportDaoObj.processRequest(request, response, jobj);
        } catch (SessionExpiredException ex) {
            Logger.getLogger(accGoodsReceiptController.class.getName()).log(Level.SEVERE, null, ex);
        } catch(Exception ex) {
            Logger.getLogger(accGoodsReceiptController.class.getName()).log(Level.SEVERE, null, ex);
        }
        return new ModelAndView(view,MODEL, jobj.toString());
    }
    
    public void exportVendorLedgerJasperReport(HttpServletRequest request, HttpServletResponse response) {

        try {
            JSONObject paramJobj = StringUtil.convertRequestToJsonObject(request);
            paramJobj.put(Constants.JRXML_REAL_PATH_KEY, request.getSession().getServletContext().getRealPath("jrxml"));
             boolean threadFlag = false;
            if (!StringUtil.isNullOrEmpty(paramJobj.optString("threadflag", null))) {
                threadFlag = Boolean.parseBoolean(paramJobj.optString("threadflag"));
            }
            //Thread Process
            if (threadFlag) {
                HashMap<String, Object> requestParams = AccountingManager.getGlobalParamsJson(paramJobj);
                String companyid = paramJobj.getString(Constants.companyKey);
                KwlReturnObject cmpresult = accountingHandlerDAOobj.getObject(Company.class.getName(), companyid);
                Company company = (Company) cmpresult.getEntityList().get(0);
                requestParams.put("paramsJsonObject", paramJobj);
                exportSOA.add(requestParams);
                exportSOA.setCompany(company);
                exportSOA.setIscustomer(false);

                Thread t = new Thread(exportSOA);        //Run method for this thread is available in ExportSOA.java
                t.start();
            } else { 
                if (!request.getParameter("typeoffile").contains("ZIP")) {
                JasperPrint jasperPrint = accExportReportsServiceDAOobj.exportVendorLedgerJasperReport(paramJobj);
                JRPdfExporter exp = new JRPdfExporter();
                exp.setParameter(JRExporterParameter.JASPER_PRINT, jasperPrint);
                exp.setParameter(JRPdfExporterParameter.OUTPUT_STREAM, response.getOutputStream());
                    int reportid = !StringUtil.isNullOrEmpty(paramJobj.optString("reportid")) ? Integer.parseInt(paramJobj.optString("reportid")) : -1;
                    if (reportid == Constants.SOA_VENDOR_ACCOUNT_STATEMENT_REPORTID) {
                        response.setHeader("Content-Disposition", "attachment;filename=" + "SOA - VendorAccount Statement_v1.pdf");
                    } else {
                        response.setHeader("Content-Disposition", "attachment;filename=" + "StatementOfAccounts_v1.pdf");
                    }
                exp.exportReport();
            } else {
                accExportReportsServiceDAOobj.exportSOAtoZIP_FILE(paramJobj, response, false);
            }
            }
        } catch (Exception e) {
            Logger.getLogger(accGoodsReceiptController.class.getName()).log(Level.SEVERE, null, e);
        }
    }
public ModelAndView exportSATSVendorLedgerJasperReport(HttpServletRequest request, HttpServletResponse response) {

        Map<String, Object> statementOfAccountsMap = new HashMap<String, Object>();
        String view = "";
        int templateFlag = Integer.parseInt(request.getParameter("templateflag"));

        StatementOfAccounts statementOfAccounts = new StatementOfAccounts();
        ArrayList<StatementOfAccounts> statementOfAccountsList = new ArrayList<StatementOfAccounts>();
        try {
            String companyid = sessionHandlerImpl.getCompanyid(request);
            KwlReturnObject result = accountingHandlerDAOobj.getObject(CompanyAccountPreferences.class.getName(), sessionHandlerImpl.getCompanyid(request));
            CompanyAccountPreferences companyAccountPreferences = (CompanyAccountPreferences) result.getEntityList().get(0);

            KwlReturnObject cmpresult = accountingHandlerDAOobj.getObject(Company.class.getName(), companyid);
            Company company = (Company) cmpresult.getEntityList().get(0);
            statementOfAccounts.setName(company.getCompanyName() != null ? company.getCompanyName() : "");
            Calendar cal1 = Calendar.getInstance();
            Date date = cal1.getTime();
            DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
            statementOfAccounts.setDate(date != null ? df.format(date) : "");
            statementOfAccounts.setEmail(company.getEmailID() != null ? company.getEmailID() : "");
            statementOfAccounts.setFax(company.getFaxNumber() != null ? company.getFaxNumber() : "");
            statementOfAccounts.setPhone(company.getPhoneNumber() != null ? company.getPhoneNumber() : "");
            statementOfAccounts.setGstRegNo(companyAccountPreferences.getGstNumber() != null ? companyAccountPreferences.getGstNumber() : "");
            statementOfAccounts.setUem(companyAccountPreferences.getCompanyUEN() != null ? companyAccountPreferences.getCompanyUEN() : "");
            statementOfAccounts.setCurrency(company.getCurrency() != null ? company.getCurrency().getName() : "");
            statementOfAccountsList.add(statementOfAccounts);

            statementOfAccountsMap = getSATSVendorLedgerJasper(request, templateFlag);
            statementOfAccountsMap.put("format", "pdf");
            String fileName1 = StorageHandler.GetDocStorePath() + companyid + "_template" + FileUploadHandler.getCompanyImageExt();
            statementOfAccountsMap.put("imagePath", fileName1);
            statementOfAccountsMap.put("imagePath2", "http://67.192.230.254/test/logo_footer.png");
            statementOfAccountsMap.put("imagePath3", "http://67.192.230.254/test/sms_chinesename.png");
            statementOfAccountsMap.put("datasource", new JRBeanCollectionDataSource(statementOfAccountsList));
            InputStream inputStream = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/SATSStatementOfAccounts.jrxml");
            JasperDesign jasperDesign = JRXmlLoader.load(inputStream);
            JasperReport jasperReport = JasperCompileManager.compileReport(jasperDesign);

            InputStream inputStreamSubReport = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/SATSStatementOfAccountsSubReport.jrxml");
            JasperDesign jasperDesignSubReport = JRXmlLoader.load(inputStreamSubReport);
            JasperReport jasperReportSubReport = JasperCompileManager.compileReport(jasperDesignSubReport);

            statementOfAccountsMap.put("StatementOfAccountsSubReport", jasperReportSubReport);
            response.setHeader("Content-Disposition", "attachment;filename=" + "StatementOfAccounts_v1.pdf");
            JRBeanCollectionDataSource beanColDataSource = new JRBeanCollectionDataSource(statementOfAccountsList);
            JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, statementOfAccountsMap, beanColDataSource);
            JRPdfExporter exporter = new JRPdfExporter();
            exporter.setParameter(JRExporterParameter.JASPER_PRINT, jasperPrint);
            exporter.setParameter(JRPdfExporterParameter.OUTPUT_STREAM, response.getOutputStream());
            exporter.exportReport();
        } catch (Exception ex) {
            Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
        }
        return new ModelAndView(view, statementOfAccountsMap);
    }

    public Map<String, Object> getSATSVendorLedgerJasper(HttpServletRequest request, int templateFlag) throws ServiceException, SessionExpiredException, UnsupportedEncodingException {
        JSONObject jobj = new JSONObject();
        ArrayList<StatementOfAccountsSubReport> statementOfReportsSubReportList = new ArrayList<StatementOfAccountsSubReport>();
        HashMap<String, StatementOfAccountsSubReport> stmSubReportListMap = new HashMap<String, StatementOfAccountsSubReport>();
        Map<String, Object> statementOfAccountsMap = new HashMap<String, Object>();
        HashMap<String, ArrayList> amountDueMap = new HashMap<String, ArrayList>();
        String companyid = sessionHandlerImpl.getCompanyid(request);
        try {

            boolean isPostDatedCheque = false;
            if (request.getParameter("isPostDatedCheque") != null) {
                isPostDatedCheque = Boolean.parseBoolean(request.getParameter("isPostDatedCheque"));
            }
            Date startDate = authHandler.getDateOnlyFormat().parse(request.getParameter("stdate"));
            Date endDate = authHandler.getDateOnlyFormat().parse(request.getParameter("enddate"));
            DateFormat df = authHandler.getDateOnlyFormat();
            DateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");
            DecimalFormat satsAmountFormat = new DecimalFormat("##,###,##0.000");
            DateFormat satsSOAdateFormat1 = new SimpleDateFormat("dd.MM.yyyy");
            DateFormat satsSOAdateFormat2 = new SimpleDateFormat("MMMM dd, yyyy");
            String vendorIds = request.getParameter("vendorIds");
            String withoutinventory = request.getParameter("withoutinventory");
            HashMap<String, Object> requestParams = AccountingManager.getGlobalParams(request);
            requestParams.put("vendorIds", vendorIds);
            requestParams.put("withoutinventory", withoutinventory);
            requestParams.put("startDate", startDate);
            requestParams.put("endDate", endDate);
            requestParams.put("isPostDatedCheque", isPostDatedCheque);

            String searchJson = request.getParameter(Constants.Acc_Search_Json);
            String filterConjuctionCriteria = request.getParameter(Constants.Filter_Criteria);
            if (!StringUtil.isNullOrEmpty(searchJson)) {
                requestParams.put(Constants.Acc_Search_Json, searchJson);
            }
            if (!StringUtil.isNullOrEmpty(filterConjuctionCriteria)) {
                requestParams.put(Constants.Filter_Criteria, filterConjuctionCriteria);
            }

            boolean isAdvanceSearch = false;
            String invoiceSearchJson = "";
            String receiptSearchJson = "";
            String cnSearchJson = "";
            String dnSearchJson = "";
            String makePaymentSearchJson = "";

            if (requestParams.containsKey(Constants.Filter_Criteria) && requestParams.get(Constants.Filter_Criteria) != null) {
                if (requestParams.get(Constants.Filter_Criteria).toString().equalsIgnoreCase("OR")) {
                    filterConjuctionCriteria = com.krawler.common.util.Constants.or;
                }
            }
            if (requestParams.containsKey(Constants.Acc_Search_Json) && requestParams.get(Constants.Acc_Search_Json) != null) {
                searchJson = requestParams.get(Constants.Acc_Search_Json).toString();
                if (!StringUtil.isNullOrEmpty(searchJson)) {
                    isAdvanceSearch = true;
                    requestParams.put(Constants.Filter_Criteria, request.getParameter(Constants.Filter_Criteria));
                    HashMap<String, Object> reqPar1 = new HashMap<>();
                    reqPar1.put(Constants.companyKey, requestParams.get(Constants.companyKey));
                    reqPar1.put(Constants.Acc_Search_Json, searchJson);
                    reqPar1.put(Constants.Filter_Criteria, filterConjuctionCriteria);
                    reqPar1.put(Constants.moduleid, Constants.Acc_Vendor_Invoice_ModuleId);
                    invoiceSearchJson = fieldDataManagercntrl.getSearchJsonByModuleID(reqPar1);
                    reqPar1.remove(Constants.moduleid);
                    reqPar1.put(Constants.moduleid, Constants.Acc_Receive_Payment_ModuleId);
                    receiptSearchJson = fieldDataManagercntrl.getSearchJsonByModuleID(reqPar1);
                    reqPar1.put(Constants.moduleid, Constants.Acc_Debit_Note_ModuleId);
                    dnSearchJson = fieldDataManagercntrl.getSearchJsonByModuleID(reqPar1);
                    reqPar1.put(Constants.moduleid, Constants.Acc_Credit_Note_ModuleId);
                    cnSearchJson = fieldDataManagercntrl.getSearchJsonByModuleID(reqPar1);
                    reqPar1.put(Constants.moduleid, Constants.Acc_Make_Payment_ModuleId);
                    makePaymentSearchJson = fieldDataManagercntrl.getSearchJsonByModuleID(reqPar1);
                }
            }
            requestParams.put("invoiceSearchJson", invoiceSearchJson);
            requestParams.put("receiptSearchJson", receiptSearchJson);
            requestParams.put("cnSearchJson", cnSearchJson);
            requestParams.put("dnSearchJson", dnSearchJson);
            requestParams.put("makePaymentSearchJson", makePaymentSearchJson);
            requestParams.put("isAdvanceSearch", isAdvanceSearch);
            
            KwlReturnObject customerLedger = accInvoiceDAOobj.getVendorLedgerReport(requestParams);
            List customerLedgerList = customerLedger.getEntityList();
            KwlReturnObject curresult = accountingHandlerDAOobj.getObject(KWLCurrency.class.getName(), sessionHandlerImpl.getCurrencyID(request));
            KWLCurrency baseCurrency = (KWLCurrency) curresult.getEntityList().get(0);
            double balanceAmtInBase = 0;
            double balanceAmount = 0;
            String prevCustomer = "";
            Date curDate = null;
            int duration = Integer.parseInt(request.getParameter("interval"));
            Calendar cal1 = Calendar.getInstance();
            Calendar cal2 = Calendar.getInstance();
            Calendar cal3 = Calendar.getInstance();
            Calendar cal4 = Calendar.getInstance();
            curDate = Calendar.getInstance().getTime();
            cal1.setTime(curDate);
            cal2.setTime(curDate);
            cal3.setTime(curDate);
            cal4.setTime(curDate);
            cal2.add(Calendar.DAY_OF_YEAR, -duration);
            cal3.add(Calendar.DAY_OF_YEAR, -(duration * 2));
            cal4.add(Calendar.DAY_OF_YEAR, -(duration * 3));

            HashMap<String, JSONObject> hashMapJSON = new HashMap<String, JSONObject>();
            HashMap<String, Object> requestParamsAged = new HashMap<String, Object>();
            requestParamsAged.put(COMPANYID, sessionHandlerImpl.getCompanyid(request));
            requestParamsAged.put(GCURRENCYID, sessionHandlerImpl.getCurrencyID(request));
            requestParamsAged.put(DATEFORMAT, authHandler.getDateOnlyFormat());
            requestParamsAged.put("df", authHandler.getDateOnlyFormat());
            requestParamsAged.put(START, request.getParameter(START));
            requestParamsAged.put(LIMIT, request.getParameter(LIMIT));
            requestParamsAged.put(SS, request.getParameter(SS));
            requestParamsAged.put(ACCID, request.getParameter(ACCID));
            requestParamsAged.put(CASHONLY, request.getParameter(CASHONLY));
            requestParamsAged.put(CREDITONLY, request.getParameter(CREDITONLY));
            requestParamsAged.put(IGNOREZERO, request.getParameter(IGNOREZERO));
            requestParamsAged.put(CURDATE, request.getParameter(CURDATE));
            requestParamsAged.put(PERSONGROUP, request.getParameter(PERSONGROUP));
            requestParamsAged.put(ISAGEDGRAPH, request.getParameter(ISAGEDGRAPH));
            requestParamsAged.put(VENDORID, request.getParameter(VENDORID));
            requestParamsAged.put(NONDELETED, request.getParameter(NONDELETED));
            requestParamsAged.put(DURATION, request.getParameter(DURATION));
            requestParamsAged.put(ISDISTRIBUTIVE, request.getParameter(ISDISTRIBUTIVE));
            requestParamsAged.put(WITHINVENTORY, request.getParameter(WITHINVENTORY));
            requestParamsAged.put("pendingapproval", (request.getParameter("pendingapproval") != null) ? Boolean.parseBoolean(request.getParameter("pendingapproval")) : false);
            requestParamsAged.put("istemplate", (request.getParameter("istemplate") != null) ? Integer.parseInt(request.getParameter("istemplate")) : 0);
            requestParams.put(Constants.Acc_Search_Json, request.getParameter(Constants.Acc_Search_Json));
            requestParams.put(Constants.Filter_Criteria, request.getParameter(InvoiceConstants.Filter_Criteria));
            requestParams.put(Constants.moduleid, request.getParameter(Constants.moduleid));

            JSONArray jSONArray = accGoodsReceiptServiceDAO.getVendorAgedPayableMerged(request, requestParamsAged);
            for (int i = 0; i < jSONArray.length(); i++) {
                JSONObject jSONObject = jSONArray.getJSONObject(i);
                hashMapJSON.put(jSONObject.getString("personid"), jSONObject);
            }

            String defValue = authHandler.getCompleteDFStringForAmount("0.", companyid);
            ArrayList<Double> amountDueList = new ArrayList<Double>();
            double currencyTotalAmount = 0.00;
            Map<String, HashMap> currencyHashMap = new HashMap<String, HashMap>();
            Map<String, String> currencyCodeHashMap = new HashMap<String, String>();
            for (int i = 0; i < customerLedgerList.size(); i++) {
                Object[] tempCustomerLedger = (Object[]) customerLedgerList.get(i);
                String type = (String) tempCustomerLedger[0];
                String invoiceNumber = (String) tempCustomerLedger[2]; // if(type=='invoice') ==> invoice.invoicenumber, if(type=='receipt') ==> receipt.receiptnumber, if(type=='creditnote') ==> creditnote.cnnumber
                String currencyid = StringUtil.isNullOrEmpty((String) tempCustomerLedger[5]) ? sessionHandlerImpl.getCurrencyID(request) : (String) tempCustomerLedger[5]; // if(type=='invoice') ==> invoice.currency, if(type=='receipt') ==> receipt.currency, if(type=='creditnote') ==> creditnote.currency
                double amount = (Double) tempCustomerLedger[6]; // if(type=='invoice') ==> jedetail.amount, if(type=='receipt') ==> receiptdetails.amount, if(type=='creditnote') ==> jedetail.amount
                String jeEntryNumber = (String) tempCustomerLedger[7];
                Date jeEntryDate = (Date) tempCustomerLedger[8];
                double jeEntryExternalCurrencyRate = (Double) tempCustomerLedger[9];
                String invoiceCustomerId = (String) tempCustomerLedger[10];
                KwlReturnObject custresult = accountingHandlerDAOobj.getObject(Vendor.class.getName(), invoiceCustomerId);
                Vendor ven = (Vendor) custresult.getEntityList().get(0);
                String invoiceCustomerCode = ven.getAcccode();
                
                //String invoiceCustomerAdd = accVendorHandler.getVendorAddress(ven, true); //refer ticket ERP-10777
                //params to send to get billing address
                HashMap<String, Object> addressParams = new HashMap<String, Object>();
                addressParams.put("companyid", companyid);
                addressParams.put("isDefaultAddress", true);    //always true to get defaultaddress
                addressParams.put("isBillingAddress", true);    //true to get billing address
                addressParams.put("vendorid", ven.getID());
                String invoiceCustomerAdd = accountingHandlerDAOobj.getVendorAddress(addressParams);
                
                String invoiceCustomerName = (String) tempCustomerLedger[11];
                String invoiceCustomerAcc = ven.getAccount()!=null?ven.getAccount().getAcccode():"";
                String invoiceCustomerTerms = ven.getDebitTerm()!=null?ven.getDebitTerm().getTermdays()+" Days":"";

                KWLCurrency currency = null;
                if (!StringUtil.isNullOrEmpty(currencyid)) {
                    KwlReturnObject curresult1 = accountingHandlerDAOobj.getObject(KWLCurrency.class.getName(), currencyid);
                    currency = (KWLCurrency) curresult1.getEntityList().get(0);
                }

                if (!prevCustomer.equals(invoiceCustomerId)) {
                    currencyHashMap.clear();
                    currencyCodeHashMap.clear();
                    prevCustomer = invoiceCustomerId;
                    balanceAmtInBase = 0;
                    balanceAmount = 0;
                    HashMap<String, Double> currncyAmount = new HashMap<String, Double>();
                    currncyAmount.put(currency.getCurrencyID(), 0.00);
                    currencyHashMap.put(invoiceCustomerId, currncyAmount);
                    currencyTotalAmount = 0.00;
                }
                if (!currencyCodeHashMap.containsKey(currency.getCurrencyID())) {
                    currencyCodeHashMap.put(currency.getCurrencyID(), currency.getCurrencyCode());
                }
                StatementOfAccountsSubReport statementOfReportsSubReport = new StatementOfAccountsSubReport();
                statementOfReportsSubReport.setAmountDue1(defValue); //need to set default bcoz when value is 0 then default value printed as 0.00 or 0.000
                statementOfReportsSubReport.setAmountDue2(defValue);
                statementOfReportsSubReport.setAmountDue3(defValue);
                statementOfReportsSubReport.setAmountDue4(defValue);
                statementOfReportsSubReport.setAmountDue5(defValue);
                statementOfReportsSubReport.setBalance(defValue);
                Object[] tempNextCustomerLedger = null;
                if (i != customerLedgerList.size() - 1) {
                    tempNextCustomerLedger = (Object[]) customerLedgerList.get(i + 1);
                }
                String nextInvoiceCustomerId = tempNextCustomerLedger != null ? (String) tempNextCustomerLedger[10] : "";
                statementOfReportsSubReport.setTransactionId(invoiceNumber);
                statementOfReportsSubReport.setJeId(jeEntryNumber);
                statementOfReportsSubReport.setDate(satsSOAdateFormat1.format(jeEntryDate));
                KwlReturnObject bAmt = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, amount, currencyid, jeEntryDate, jeEntryExternalCurrencyRate);
                double amountinbase = (Double) bAmt.getEntityList().get(0);
                amountinbase = authHandler.round(amountinbase, companyid);

                if (type.equalsIgnoreCase("Cash Purchase")) {
                    statementOfReportsSubReport.setAmount((amount != 0) ? amount < 0 ? satsAmountFormat.format(amount * -1) : satsAmountFormat.format(amount) : "");
                    statementOfReportsSubReport.setBaseamount((amountinbase != 0) ? amountinbase < 0 ? satsAmountFormat.format(amountinbase * -1) : satsAmountFormat.format(amountinbase) : "");
                    statementOfReportsSubReport.setBalance((currencyTotalAmount != 0) ? currencyTotalAmount < 0 ? satsAmountFormat.format(currencyTotalAmount * -1) : satsAmountFormat.format(currencyTotalAmount) : satsAmountFormat.format(0));
                    statementOfReportsSubReport.setNegativesign1(amount <= 0 ? "" : "-");
                    statementOfReportsSubReport.setNegativesign2(amountinbase <= 0 ? "" : "-");
                    statementOfReportsSubReport.setNegativesign3(currencyTotalAmount >= 0 ? "" : "-");

                } else if (type.equalsIgnoreCase("Vendor Invoice")) {
                    HashMap<String, Double> tempHashMap = currencyHashMap.containsKey(invoiceCustomerId) ? currencyHashMap.get(invoiceCustomerId) : new HashMap<String, Double>();
                    currencyTotalAmount = tempHashMap.containsKey(currency.getCurrencyID()) ? tempHashMap.get(currency.getCurrencyID()) : 0.00;
                    currencyTotalAmount = currencyTotalAmount - amount;
                    tempHashMap.put(currency.getCurrencyID(), currencyTotalAmount);
                    currencyHashMap.put(invoiceCustomerId, tempHashMap);
                    balanceAmtInBase = balanceAmtInBase - amountinbase;
                    balanceAmount = balanceAmount - amount;
                    statementOfReportsSubReport.setAmount((amount != 0) ? amount < 0 ? satsAmountFormat.format(amount * -1) : satsAmountFormat.format(amount) : "");
                    statementOfReportsSubReport.setBaseamount((amountinbase != 0) ? amountinbase < 0 ? satsAmountFormat.format(amountinbase * -1) : satsAmountFormat.format(amountinbase) : "");
                    statementOfReportsSubReport.setBalance((balanceAmtInBase != 0) ? balanceAmtInBase < 0 ? satsAmountFormat.format(balanceAmtInBase * -1) : satsAmountFormat.format(balanceAmtInBase) : satsAmountFormat.format(0));
                    statementOfReportsSubReport.setNegativesign1(amount <= 0 ? "" : "-");
                    statementOfReportsSubReport.setNegativesign2(amountinbase <= 0 ? "" : "-");
                    statementOfReportsSubReport.setNegativesign3(balanceAmtInBase >= 0 ? "" : "-");

                } else if (type.equalsIgnoreCase("Payment Received")) {
                    HashMap<String, Double> tempHashMap = currencyHashMap.containsKey(invoiceCustomerId) ? currencyHashMap.get(invoiceCustomerId) : new HashMap<String, Double>();
                    currencyTotalAmount = tempHashMap.containsKey(currency.getCurrencyID()) ? tempHashMap.get(currency.getCurrencyID()) : 0.00;
                    currencyTotalAmount = currencyTotalAmount - amount;
                    tempHashMap.put(currency.getCurrencyID(), currencyTotalAmount);
                    currencyHashMap.put(invoiceCustomerId, tempHashMap);
                    balanceAmtInBase = balanceAmtInBase - amountinbase;
                    balanceAmount = balanceAmount - amount;
                    statementOfReportsSubReport.setAmount((amount != 0) ? amount < 0 ? satsAmountFormat.format(amount * -1) : satsAmountFormat.format(amount) : "");
                    statementOfReportsSubReport.setBaseamount((amountinbase != 0) ? amountinbase < 0 ? satsAmountFormat.format(amountinbase * -1) : satsAmountFormat.format(amountinbase) : "");
                    statementOfReportsSubReport.setBalance((balanceAmtInBase != 0) ? balanceAmtInBase < 0 ? satsAmountFormat.format(balanceAmtInBase * -1) : satsAmountFormat.format(balanceAmtInBase) : satsAmountFormat.format(0));
                    statementOfReportsSubReport.setNegativesign1(amount <= 0 ? "" : "-");
                    statementOfReportsSubReport.setNegativesign2(amountinbase <= 0 ? "" : "-");
                    statementOfReportsSubReport.setNegativesign3(balanceAmtInBase >= 0 ? "" : "-");

                } else if (type.equalsIgnoreCase("Credit Note")) {
                    HashMap<String, Double> tempHashMap = currencyHashMap.containsKey(invoiceCustomerId) ? currencyHashMap.get(invoiceCustomerId) : new HashMap<String, Double>();
                    currencyTotalAmount = tempHashMap.containsKey(currency.getCurrencyID()) ? tempHashMap.get(currency.getCurrencyID()) : 0.00;
                    currencyTotalAmount = currencyTotalAmount - amount;
                    tempHashMap.put(currency.getCurrencyID(), currencyTotalAmount);
                    currencyHashMap.put(invoiceCustomerId, tempHashMap);
                    balanceAmtInBase = balanceAmtInBase - amountinbase;
                    balanceAmount = balanceAmount - amount;
                    statementOfReportsSubReport.setAmount((amount != 0) ? amount < 0 ? satsAmountFormat.format(amount * -1) : satsAmountFormat.format(amount) : "");
                    statementOfReportsSubReport.setBaseamount((amountinbase != 0) ? amountinbase < 0 ? satsAmountFormat.format(amountinbase * -1) : satsAmountFormat.format(amountinbase) : "");
                    statementOfReportsSubReport.setBalance((balanceAmtInBase != 0) ? balanceAmtInBase < 0 ? satsAmountFormat.format(balanceAmtInBase * -1) : satsAmountFormat.format(balanceAmtInBase) : satsAmountFormat.format(0));
                    statementOfReportsSubReport.setNegativesign1(amount <= 0 ? "" : "-");
                    statementOfReportsSubReport.setNegativesign2(amountinbase <= 0 ? "" : "-");
                    statementOfReportsSubReport.setNegativesign3(balanceAmtInBase >= 0 ? "" : "-");

                } else {  //if((type.equalsIgnoreCase("Payment Made")) || (type.equalsIgnoreCase("Debit Note")))
                    HashMap<String, Double> tempHashMap = currencyHashMap.containsKey(invoiceCustomerId) ? currencyHashMap.get(invoiceCustomerId) : new HashMap<String, Double>();
                    currencyTotalAmount = tempHashMap.containsKey(currency.getCurrencyID()) ? tempHashMap.get(currency.getCurrencyID()) : 0.00;
                    currencyTotalAmount = currencyTotalAmount + amount;
                    tempHashMap.put(currency.getCurrencyID(), currencyTotalAmount);
                    currencyHashMap.put(invoiceCustomerId, tempHashMap);
                    balanceAmtInBase = balanceAmtInBase + amountinbase;
                    balanceAmount = balanceAmount + amount;
                    statementOfReportsSubReport.setAmount((amount != 0) ? amount < 0 ? satsAmountFormat.format(amount * -1) : satsAmountFormat.format(amount) : "");
                    statementOfReportsSubReport.setBaseamount((amountinbase != 0) ? amountinbase < 0 ? satsAmountFormat.format(amountinbase * -1) : satsAmountFormat.format(amountinbase) : "");
                    statementOfReportsSubReport.setBalance((balanceAmtInBase != 0) ? balanceAmtInBase < 0 ? satsAmountFormat.format(balanceAmtInBase * -1) : satsAmountFormat.format(balanceAmtInBase) : satsAmountFormat.format(0));
                    statementOfReportsSubReport.setNegativesign1("");
                    statementOfReportsSubReport.setNegativesign2("");
                    statementOfReportsSubReport.setNegativesign3(balanceAmtInBase >= 0 ? "" : "-");
                }
                statementOfReportsSubReport.setCustomer(invoiceCustomerName);
                statementOfReportsSubReport.setCustomercode(invoiceCustomerCode);
                statementOfReportsSubReport.setCustomerAddress(invoiceCustomerAdd.replaceAll("\n", "<br>"));
                statementOfReportsSubReport.setAttn("");
                 statementOfReportsSubReport.setCustomeracccode(invoiceCustomerAcc);
                statementOfReportsSubReport.setTerms(invoiceCustomerTerms);
                if (hashMapJSON.containsKey(invoiceCustomerId)) {
                    JSONObject jSONObject = hashMapJSON.get(invoiceCustomerId);
                    statementOfReportsSubReport.setAmountDue1((jSONObject.getDouble("amountdueinbase2")) < 0 ? ((satsAmountFormat.format(jSONObject.getDouble("amountdueinbase2") * -1)) + "-") : satsAmountFormat.format(jSONObject.getDouble("amountdueinbase2")) + "");
                    statementOfReportsSubReport.setAmountDue2((jSONObject.getDouble("amountdueinbase3")) < 0 ? ((satsAmountFormat.format(jSONObject.getDouble("amountdueinbase3") * -1)) + "-") : satsAmountFormat.format(jSONObject.getDouble("amountdueinbase3")) + "");
                    statementOfReportsSubReport.setAmountDue3((jSONObject.getDouble("amountdueinbase4")) < 0 ? ((satsAmountFormat.format(jSONObject.getDouble("amountdueinbase4") * -1)) + "-") : satsAmountFormat.format(jSONObject.getDouble("amountdueinbase4")) + "");
                    statementOfReportsSubReport.setAmountDue4((jSONObject.getDouble("amountdueinbase5")) < 0 ? ((satsAmountFormat.format(jSONObject.getDouble("amountdueinbase5") * -1)) + "-") : satsAmountFormat.format(jSONObject.getDouble("amountdueinbase5")) + "");
                    statementOfReportsSubReport.setAmountDue5((jSONObject.getDouble("totalinbase")) < 0 ? ((satsAmountFormat.format(jSONObject.getDouble("totalinbase") * -1)) + "-") : satsAmountFormat.format(jSONObject.getDouble("totalinbase")) + "");
                }
                amountDueMap.put(invoiceCustomerId, amountDueList);
                statementOfReportsSubReport.setAmount1Header("Current");
                statementOfReportsSubReport.setAmount2Header("1 month");
                statementOfReportsSubReport.setAmount3Header("2 months");
                statementOfReportsSubReport.setAmount4Header("3 months & over");
                statementOfReportsSubReport.setCurrency(currency.getCurrencyCode());
                statementOfReportsSubReport.setAgeingCurrency(baseCurrency.getCurrencyCode());
                statementOfReportsSubReport.setBaseCurrency(baseCurrency.getCurrencyCode());
                if (i == customerLedgerList.size() - 1) {
                    statementOfReportsSubReport.setPageBreak(false);
                }
                List<SOABalanceOutstandingPojo> outstandingPojos = new ArrayList<SOABalanceOutstandingPojo>();
                if (!nextInvoiceCustomerId.equals(invoiceCustomerId)) {
                    statementOfReportsSubReport.setOutstandingFlag(true);
                    for (Map.Entry<String, HashMap> entry : currencyHashMap.entrySet()) {
                        HashMap<String, Double> tempHashMap = entry.getValue();
                        for (Map.Entry<String, Double> entryInner : tempHashMap.entrySet()) {
                            SOABalanceOutstandingPojo sOABalanceOutstandingPojo = new SOABalanceOutstandingPojo();
                            sOABalanceOutstandingPojo.setBaseCurrency(currencyCodeHashMap.get(entryInner.getKey()));
                            sOABalanceOutstandingPojo.setBalance(authHandler.formattedAmount(authHandler.round(entryInner.getValue(), companyid), companyid));
                            outstandingPojos.add(sOABalanceOutstandingPojo);
                        }
                    }
                }
                KwlReturnObject result = accountingHandlerDAOobj.getObject(CompanyAccountPreferences.class.getName(), sessionHandlerImpl.getCompanyid(request));
                CompanyAccountPreferences companyAccountPreferences = (CompanyAccountPreferences) result.getEntityList().get(0);

                KwlReturnObject cmpresult = accountingHandlerDAOobj.getObject(Company.class.getName(), companyid);
                Company company = (Company) cmpresult.getEntityList().get(0);
                Calendar cal0 = Calendar.getInstance();
                Date date = cal0.getTime();
                DateFormat df1 = new SimpleDateFormat("dd/MM/yyyy");
                statementOfReportsSubReport.setHeaderdate(date != null ? satsSOAdateFormat2.format(date) : "");
                statementOfReportsSubReport.setGstRegNo(companyAccountPreferences.getGstNumber() != null ? companyAccountPreferences.getGstNumber() : "");
                statementOfReportsSubReport.setUem(companyAccountPreferences.getCompanyUEN() != null ? companyAccountPreferences.getCompanyUEN() : "");
                statementOfReportsSubReport.setBasecurrencysymbol(company.getCurrency() != null ? company.getCurrency().getName() : "");
                String fileName1 = StorageHandler.GetDocStorePath() + companyid + "_template" + FileUploadHandler.getCompanyImageExt();
                statementOfReportsSubReport.setImagepath(fileName1);
                statementOfReportsSubReport.setsOABalanceOutstandingPojos(outstandingPojos);
                if (templateFlag == 4 && statementOfReportsSubReport.getBalance().contains("0.00")) {
                    statementOfReportsSubReport.setBalance((currency.getSymbol() != null ? currency.getSymbol() : currency.getCurrencyCode()) + authHandler.formattedAmount(0, companyid));
                    statementOfReportsSubReport.setDebit("");
                    statementOfReportsSubReport.setCredit("");
                }
                statementOfReportsSubReport.setCreditordebit("Debit");
                statementOfReportsSubReport.setCustorven("Vendor");
                statementOfReportsSubReportList.add(statementOfReportsSubReport);
                stmSubReportListMap.put(invoiceCustomerId, statementOfReportsSubReport);
            }
            statementOfAccountsMap.put("StatementOfAccountsSubReportData", new JRBeanCollectionDataSource(statementOfReportsSubReportList));
        } catch (ParseException ex) {
            Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
            throw ServiceException.FAILURE("getVendorLedgerJasper : " + ex.getMessage(), ex);
        } catch (JSONException ex) {
            Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
            throw ServiceException.FAILURE("getVendorLedgerJasper : " + ex.getMessage(), ex);
        }

        return statementOfAccountsMap;
    }

    
    public ModelAndView exportVendorAgedPayable(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        String view = JSONVIEW_EX;
        String fileType = request.getParameter("filetype");
        try{
            HashMap<String, Object> requestParams = AccGoodsReceiptServiceHandler.getGoodsReceiptRequestMap(request);
            if (fileType.equals("detailedXls")) {
                requestParams.put("detailedXls", true);
            }
            JSONArray DataJArr = accGoodsReceiptServiceDAO.getVendorAgedPayableMerged(request, requestParams);
            jobj.put(DATA, DataJArr);
            if (StringUtil.equal(fileType, "print")) {
                String  GenerateDate = authHandler.getDateOnlyFormat().format(new Date());
                jobj.put("GenerateDate", GenerateDate);
                view = JSONVIEWEMPTY;
            }
            exportDaoObj.processRequest(request, response, jobj);
        } catch (SessionExpiredException ex) {
            Logger.getLogger(accGoodsReceiptController.class.getName()).log(Level.SEVERE, null, ex);
        } catch(Exception ex) {
            Logger.getLogger(accGoodsReceiptController.class.getName()).log(Level.SEVERE, null, ex);
        }
        return new ModelAndView(view,MODEL, jobj.toString());
    }
    public ModelAndView exportCustomizedVendorAgedPayable(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        String view = JSONVIEW_EX;
        try{
            HashMap<String, Object> requestParams = new HashMap<String, Object>();
            requestParams.put(COMPANYID, sessionHandlerImpl.getCompanyid(request));
            requestParams.put(GCURRENCYID, sessionHandlerImpl.getCurrencyID(request));
            requestParams.put(DATEFORMAT, authHandler.getDateOnlyFormat());
            requestParams.put(START, request.getParameter(START));
            requestParams.put(LIMIT, request.getParameter(LIMIT));
            requestParams.put(SS, request.getParameter(SS));
            requestParams.put(ACCID, request.getParameter(ACCID));
            requestParams.put(CASHONLY, request.getParameter(CASHONLY));
            requestParams.put(CREDITONLY, request.getParameter(CREDITONLY));
            requestParams.put(IGNOREZERO, request.getParameter(IGNOREZERO));
            requestParams.put(CURDATE, request.getParameter(CURDATE));
            requestParams.put(PERSONGROUP, request.getParameter(PERSONGROUP));
            requestParams.put(ISAGEDGRAPH, request.getParameter(ISAGEDGRAPH));
            requestParams.put(VENDORID, request.getParameter(VENDORID));
            requestParams.put(NONDELETED, request.getParameter(NONDELETED));
            requestParams.put(DURATION, request.getParameter(DURATION));
            requestParams.put(ISDISTRIBUTIVE, request.getParameter(ISDISTRIBUTIVE));
            requestParams.put(WITHINVENTORY, request.getParameter(WITHINVENTORY));
            requestParams.put("pendingapproval" ,(request.getParameter("pendingapproval") != null)? Boolean.parseBoolean(request.getParameter("pendingapproval")): false);
            requestParams.put("istemplate" ,(request.getParameter("istemplate") != null)? Integer.parseInt(request.getParameter("istemplate")): 0);
            requestParams.put("exportAgedReceivables", true); 
            requestParams.put(Constants.df, authHandler.getDateOnlyFormat());
            JSONArray DataJArr = accGoodsReceiptServiceDAO.getVendorAgedPayableMerged(request, requestParams);
            jobj.put( DATA,DataJArr);
            String fileType = request.getParameter("filetype");
            if (StringUtil.equal(fileType, "print")) {
                String  GenerateDate = authHandler.getDateOnlyFormat().format(new Date());
                jobj.put("GenerateDate", GenerateDate);
                view = JSONVIEWEMPTY;
            }
            exportDaoObj.processRequest(request, response, jobj);
        } catch (SessionExpiredException ex) {
            Logger.getLogger(accGoodsReceiptController.class.getName()).log(Level.SEVERE, null, ex);
        } catch(Exception ex) {
            Logger.getLogger(accGoodsReceiptController.class.getName()).log(Level.SEVERE, null, ex);
        }
        return new ModelAndView(view,MODEL, jobj.toString());
    }
    public JSONArray getVendorAgedPayable(HttpServletRequest request, HashMap requestParams) throws SessionExpiredException, ServiceException {
        JSONObject jObj = new JSONObject();
        JSONArray jArr = new JSONArray();
        try {
            String companyid = sessionHandlerImpl.getCompanyid(request);
            String curDateString = (request.getParameter(CURDATE)!=null?request.getParameter(CURDATE):(request.getParameter("stdate")!=null?request.getParameter("stdate"):""));
            Date curDate = authHandler.getDateOnlyFormat().parse(curDateString);
            int duration = request.getParameter(DURATION)==null?0:Integer.parseInt(request.getParameter(DURATION));
            boolean isdistibutive = StringUtil.getBoolean(request.getParameter(ISDISTRIBUTIVE));
            boolean withinventory=StringUtil.getBoolean(request.getParameter(WITHINVENTORY));
            double amountdue1 = 0;
            double amountdue2 = 0;
            double amountdue3 = 0;
            double amountdue4 = 0;
            Calendar cal1 = Calendar.getInstance();
            Calendar cal2 = Calendar.getInstance();
            Calendar cal3 = Calendar.getInstance();
            cal1.setTime(curDate);
            cal2.setTime(curDate);
            cal3.setTime(curDate);
            cal2.add(Calendar.DAY_OF_YEAR, -duration);
            cal3.add(Calendar.DAY_OF_YEAR, -(duration * 2));
            
            Date cal1Date = null;
            Date cal2Date = null;
            Date cal3Date = null;
            String cal1String = authHandler.getDateOnlyFormat().format(cal1.getTime());
            cal1Date = authHandler.getDateOnlyFormat().parse(cal1String);

            String cal2String = authHandler.getDateOnlyFormat().format(cal2.getTime());
            cal2Date = authHandler.getDateOnlyFormat().parse(cal2String);

            String cal3String = authHandler.getDateOnlyFormat().format(cal3.getTime());
            cal3Date = authHandler.getDateOnlyFormat().parse(cal3String);
            KwlReturnObject result = accVendorDAOobj.getVendorForAgedPayable(requestParams);
            Iterator itrcust = result.getEntityList().iterator();
            while (itrcust.hasNext()) {
                amountdue1 = amountdue2 = amountdue3 = amountdue4 = 0;
                String personID = null;
                String personName = null;
                String aliasname = "";
                String currencySymbol=null;
                String currencyid=null;
                Object venid = itrcust.next();
                requestParams.put(VENDORID, venid);
                requestParams.put("accid", venid);
                JSONArray invjarr = new JSONArray();
                if(withinventory){
                    result = accGoodsReceiptobj.getGoodsReceipts(requestParams);
                    invjarr = getGoodsReceiptsJson(requestParams, result.getEntityList());
                }else{
                    result = accGoodsReceiptobj.getBillingGoodsReceiptsData(requestParams);
                    invjarr = getBillingGoodsReceiptsJson(requestParams, result.getEntityList(), request);
                }

                for (int i = 0; i < invjarr.length(); i++) {
                    JSONObject invobj = invjarr.getJSONObject(i);
                    personID = invobj.getString(PERSONID);
                    personName = invobj.getString(PERSONNAME);
                    aliasname = invobj.getString(ALIASNAME)!=null?invobj.getString(ALIASNAME):"";
                    currencySymbol=invobj.getString(CURRENCYSYMBOL);
                    currencyid=invobj.getString(CURRENCYID);
                    Date dueDate = null;
                    if(!StringUtil.isNullOrEmpty(invobj.getString(DUEDATE))){
                            dueDate = authHandler.getDateOnlyFormat().parse(invobj.getString(DUEDATE));
                        }
                    if (isdistibutive) {
                        if (dueDate.after(cal1Date) || dueDate.equals(cal1Date)) {
                            amountdue1 += invobj.getDouble(AMOUNTDUE);
                        } else if ((cal2Date.before(dueDate) || cal2Date.equals(dueDate)) && cal1Date.after(dueDate)) {
                            amountdue2 += invobj.getDouble(AMOUNTDUE);
                        } else if ((cal3Date.before(dueDate) || cal3Date.equals(dueDate)) && cal2Date.after(dueDate)) {
                            amountdue3 += invobj.getDouble(AMOUNTDUE);
                        } else {
                            amountdue4 += invobj.getDouble(AMOUNTDUE);
                        }
                    } else {
                        if (dueDate.after(cal1Date) || dueDate.equals(cal1Date)) {
                            amountdue1 += invobj.getDouble(AMOUNTDUE);
                        }
                        if (dueDate.after(cal2Date) || dueDate.equals(cal2Date)) {
                            amountdue2 += invobj.getDouble(AMOUNTDUE);
                        }
                        if (dueDate.after(cal3Date) || dueDate.equals(cal3Date)) {
                            amountdue3 += invobj.getDouble(AMOUNTDUE);
                        }
                        amountdue4 += invobj.getDouble(AMOUNTDUE);
                    }
                }
                if (invjarr.length() > 0) {
                    jObj = new JSONObject();
                    jObj.put( PERSONID,personID);
                    jObj.put( PERSONNAME,personName);
                    jObj.put( ALIASNAME,aliasname);
                    jObj.put(AMOUNTDUE1, Double.valueOf(authHandler.formattedAmount(amountdue1, companyid)));
                    jObj.put(AMOUNTDUE2,Double.valueOf(authHandler.formattedAmount(amountdue2, companyid)));
                    jObj.put(AMOUNTDUE3, Double.valueOf(authHandler.formattedAmount(amountdue3, companyid)));
                    jObj.put(AMOUNTDUE4, Double.valueOf(authHandler.formattedAmount(amountdue4, companyid)));
                    jObj.put( CURRENCYSYMBOL,currencySymbol);
                    jObj.put( CURRENCYID,currencyid);
                    double amountdue= Double.valueOf(authHandler.formattedAmount((amountdue1 + amountdue2 + amountdue3 + amountdue4), companyid));
                    jObj.put(TOTAL ,amountdue);
                    jArr.put(jObj);
                }
            }
        } catch (JSONException | ParseException | ServiceException ex) {
            Logger.getLogger(accGoodsReceiptController.class.getName()).log(Level.SEVERE, null, ex);
            throw ServiceException.FAILURE("getVendorAgedPayable : "+ex.getMessage(), ex);
        }
        return jArr;
    }

       public ModelAndView isInvoicehasDepreciatedORSoldAsset(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj=new JSONObject();
        String msg="";
        boolean issuccess = false;

        DefaultTransactionDefinition def = new DefaultTransactionDefinition();
        def.setName("R_Tx");
        def.setPropagationBehavior(TransactionDefinition.PROPAGATION_REQUIRED);

        TransactionStatus status = txnManager.getTransaction(def);
        try {
            JSONObject jobject = isInvoicehasDepreciatedORSoldAsset(request);
            jobj.put("data", jobject);
            txnManager.commit(status);
            issuccess = true;
            
        } catch (SessionExpiredException ex) {
            txnManager.rollback(status);
            msg = ex.getMessage();
            Logger.getLogger(accGoodsReceiptControllerCMN.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
        } catch (Exception ex) {
            txnManager.rollback(status);
            msg = ""+ex.getMessage();
            Logger.getLogger(accGoodsReceiptControllerCMN.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
        } finally{
            try {
                jobj.put( SUCCESS,issuccess);
                jobj.put( MSG,msg);
            } catch (JSONException ex) {
                Logger.getLogger(accGoodsReceiptControllerCMN.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
            }
        }
        return new ModelAndView(JSONVIEW,MODEL, jobj.toString());
    }

    private JSONObject isInvoicehasDepreciatedORSoldAsset(HttpServletRequest request) throws SessionExpiredException, ServiceException, JSONException {
        JSONObject jobj = new JSONObject();
        String companyId = sessionHandlerImpl.getCompanyid(request);
        String billid = request.getParameter("billid");

        HashMap<String, Object> requestParams = new HashMap<String, Object>();
        requestParams.put("companyid", companyId);

        boolean isInvoicehasDepreciatedAsset = accGoodsReceiptobj.isInvoicehasDepreciatedAsset(billid, companyId);

        // check invoice hase sold asset or not
        
        boolean isInvoicehasSoldAsset = accGoodsReceiptobj.isInvoicehasSoldAsset(billid, companyId);
        
        if(!isInvoicehasDepreciatedAsset){
            isInvoicehasDepreciatedAsset = isInvoicehasSoldAsset;
        }
        
        jobj.put("isInvoicehasDepreciatedAsset", isInvoicehasDepreciatedAsset);

        return jobj;
    }
      
    public ModelAndView isGROhasDepreciatedORSoldAsset(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj=new JSONObject();
        String msg="";
        boolean issuccess = false;

        DefaultTransactionDefinition def = new DefaultTransactionDefinition();
        def.setName("R_Tx");
        def.setPropagationBehavior(TransactionDefinition.PROPAGATION_REQUIRED);

        TransactionStatus status = txnManager.getTransaction(def);
        try {
            JSONObject jobject = isGROhasDepreciatedORSoldAsset(request);
            jobj.put("data", jobject);

            issuccess = true;
            txnManager.commit(status);
            
        } catch (SessionExpiredException ex) {
            txnManager.rollback(status);
            msg = ex.getMessage();
            Logger.getLogger(accGoodsReceiptControllerCMN.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
        } catch (Exception ex) {
            txnManager.rollback(status);
            msg = ""+ex.getMessage();
            Logger.getLogger(accGoodsReceiptControllerCMN.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
        } finally{
            try {
                /*if (status != null) {
                    txnManager.commit(status);
                }*/
                jobj.put( SUCCESS,issuccess);
                jobj.put( MSG,msg);
            } catch (JSONException ex) {
                Logger.getLogger(accGoodsReceiptControllerCMN.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
            }
        }
        return new ModelAndView(JSONVIEW,MODEL, jobj.toString());
    }

    private JSONObject isGROhasDepreciatedORSoldAsset(HttpServletRequest request) throws SessionExpiredException, ServiceException, JSONException {
        JSONObject jobj = new JSONObject();
        String companyId = sessionHandlerImpl.getCompanyid(request);
        String billid = request.getParameter("billid");

        String msg = "This Order has Depreciated Asset so it cannot be edited";
        
        HashMap<String, Object> requestParams = new HashMap<String, Object>();
        requestParams.put("companyid", companyId);

        boolean isInvoicehasDepreciatedAsset = accGoodsReceiptobj.isGROhasDepreciatedAsset(billid, companyId);

        // check invoice hase sold asset or not
        
        boolean isInvoicehasSoldAsset = accGoodsReceiptobj.isGROhasSoldAsset(billid, companyId);
        
        if(!isInvoicehasDepreciatedAsset){
            isInvoicehasDepreciatedAsset = isInvoicehasSoldAsset;
        }
        
        
        boolean isGROhasLeasedAsset = accGoodsReceiptobj.isGROhasLeasedAsset(billid, companyId);

        if (!isInvoicehasDepreciatedAsset) {
            isInvoicehasDepreciatedAsset = isGROhasLeasedAsset;
        }
        
        if (isInvoicehasSoldAsset) {
            msg = "This Order has Sold Asset so it cannot be edited";
        } else if (isGROhasLeasedAsset) {
            msg = "This Order has Leased Asset so it cannot be edited";
        }
        
        
        jobj.put("isInvoicehasDepreciatedAsset", isInvoicehasDepreciatedAsset);
        jobj.put("msg", msg);

        return jobj;
    }
    
    public ModelAndView deleteGoodsReceipt(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj=new JSONObject();
        String msg="",msgtext="";
        boolean issuccess = false;
        boolean isFixedAsset = false;
        boolean isConsignment = false;
        if (!StringUtil.isNullOrEmpty(request.getParameter("isFixedAsset"))) {
            isFixedAsset = Boolean.parseBoolean(request.getParameter("isFixedAsset"));
        }
        if (!StringUtil.isNullOrEmpty(request.getParameter("isConsignment"))) {
            isConsignment = Boolean.parseBoolean(request.getParameter("isConsignment"));
        }
        msgtext= (isFixedAsset)?"acc.fgr.del":(isConsignment?"acc.consignment.veninv.del":"acc.gr.del");
        DefaultTransactionDefinition def = new DefaultTransactionDefinition();
        def.setName("R_Tx");
        def.setPropagationBehavior(TransactionDefinition.PROPAGATION_REQUIRED);

        TransactionStatus status = txnManager.getTransaction(def);
        try {
            String linkedTransaction=deleteGoodsReceipt(request,jobj);
           
            txnManager.commit(status);
            issuccess = true;
            if(StringUtil.isNullOrEmpty(linkedTransaction)){
                msg = messageSource.getMessage(msgtext, null, RequestContextUtils.getLocale(request));   //"Vendor Invoice(s) has been deleted successfully";
            }else{
                msgtext= (isFixedAsset)?"acc.field.AquiredInvoicesexcept":(isConsignment?"acc.consignment.venInvoicesexcept":"acc.field.VendorInvoicesexcept");
                msg = messageSource.getMessage( msgtext, null, RequestContextUtils.getLocale(request))+" "+linkedTransaction.substring(0,linkedTransaction.length()-2)+" "+messageSource.getMessage("acc.field.deletedsuccessfully", null, RequestContextUtils.getLocale(request)) + " " + messageSource.getMessage("acc.field.usedintransactionorlockingperiod", null, RequestContextUtils.getLocale(request));
            }
        } catch (SessionExpiredException ex) {
            txnManager.rollback(status);
            msg = ex.getMessage();
            Logger.getLogger(accGoodsReceiptControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            txnManager.rollback(status);
            msg = ""+ex.getMessage();
            Logger.getLogger(accGoodsReceiptControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
        } finally{
            try {
                jobj.put( SUCCESS,issuccess);
                jobj.put( MSG,msg);
            } catch (JSONException ex) {
                Logger.getLogger(accGoodsReceiptControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return new ModelAndView(JSONVIEW,MODEL, jobj.toString());
    }

    public String deleteGoodsReceipt(HttpServletRequest request,JSONObject Modulejobj) throws ServiceException, AccountingException, SessionExpiredException {
        String linkedTransaction="";
        try {
            JSONArray jArr = new JSONArray(request.getParameter(DATA));
            
            boolean isFixedAsset = false;
            
            if (!StringUtil.isNullOrEmpty(request.getParameter("isFixedAsset"))) {
                isFixedAsset = Boolean.parseBoolean(request.getParameter("isFixedAsset"));
            }
            boolean isConsignment = false;
            
            if (!StringUtil.isNullOrEmpty(request.getParameter("isConsignment"))) {
                isConsignment = Boolean.parseBoolean(request.getParameter("isConsignment"));
            }            
            String companyid = sessionHandlerImpl.getCompanyid(request);
            KwlReturnObject capresult = accountingHandlerDAOobj.getObject(CompanyAccountPreferences.class.getName(), companyid);
            CompanyAccountPreferences preferences = (CompanyAccountPreferences) capresult.getEntityList().get(0);

            HashMap<String ,Object> reconcileMap = new HashMap<>();
            String greceiptid = "",greceiptno="",entryno="";
            KwlReturnObject result;
             String productids="";
            for (int i = 0; i < jArr.length(); i++) {
                JSONObject jobj = jArr.getJSONObject(i);
                greceiptid = StringUtil.DecodeText(jobj.optString(BILLID));
                KwlReturnObject res = accountingHandlerDAOobj.getObject(GoodsReceipt.class.getName(), greceiptid);
                GoodsReceipt goodsReceipt = (GoodsReceipt) res.getEntityList().get(0);
                greceiptno=goodsReceipt.getGoodsReceiptNumber();//jobj.getString("billno");
                entryno=goodsReceipt.getJournalEntry()!=null?goodsReceipt.getJournalEntry().getEntryNumber():"";
                String journalEntryid=goodsReceipt.getJournalEntry()!=null?goodsReceipt.getJournalEntry().getID():"";
                
                if (goodsReceipt.isIsExpenseType()) {

                    String landedInvoice = accProductObj.procrutmentInvoice(goodsReceipt.getID(), companyid);
                    KwlReturnObject Lanadedres = accountingHandlerDAOobj.getObject(GoodsReceipt.class.getName(), landedInvoice);
                    GoodsReceipt landedgoodsReceipt = (GoodsReceipt) Lanadedres.getEntityList().get(0);
                    if (!StringUtil.isNullObject(landedgoodsReceipt)) {
                        for (GoodsReceiptDetail gd : landedgoodsReceipt.getRows()) {
                            productids = gd.getInventory().getProduct().getID() + ",";
                            Modulejobj.put("isExpenseInv", true);
                        }
                    }
                }

                if (isFixedAsset) {
                HashMap<String, Object> requestParams = new HashMap<String, Object>();
                    requestParams.put("greceiptid", greceiptid);
                    requestParams.put("companyid", companyid);
                    accGoodsReceiptobj.deleteAssetDetailsLinkedWithGR(requestParams);
                }
                result = accDebitNoteobj.getDNDetailsFromGReceipt(greceiptid, companyid);
                List<String> list = result.getEntityList();
                if (!list.isEmpty()) {
                    linkedTransaction+=greceiptno+", ";
                            continue;
                    //throw new AccountingException(messageSource.getMessage("acc.nee.62", null, RequestContextUtils.getLocale(request)));
                }
                
                result = accCreditNoteDAOobj.getCreditNoteLinkedWithInvoice(greceiptid, companyid);     //to check wether invoice is linked to credit note against vendor only for malaysian country ERP-27284 / ERP-28249
                List<String> linkedInvList = result.getEntityList();
                if (!linkedInvList.isEmpty()) {
                    linkedTransaction+=greceiptno+", ";
                            continue;
                }
                
                result = accGoodsReceiptobj.getDebitNoteForOverchargedLinkedWithInvoice(greceiptid, companyid);
                List dnOverchargeList = result.getEntityList();
                if (dnOverchargeList != null && !dnOverchargeList.isEmpty()) {
                    linkedTransaction += greceiptno + ", ";
                    continue;
                }
                
                result = accDebitNoteobj.getDNDetailsFromGReceiptOtherwise(greceiptid, companyid);  //while deleting GR check wether it is used in debit note otherwise
                list = result.getEntityList();
                if (!list.isEmpty()) {
                    //throw new AccountingException(messageSource.getMessage("acc.nee.62", null, RequestContextUtils.getLocale(request)));
                    linkedTransaction += greceiptno + ", ";
                    continue;
                }
                result = accGoodsReceiptobj.getGRFromGRInvoice(greceiptid, companyid);
                list = result.getEntityList();
                if (!list.isEmpty()) {
                    linkedTransaction+=greceiptno+", ";
                            continue;
                    //throw new AccountingException(messageSource.getMessage("acc.nee.68", null, RequestContextUtils.getLocale(request)));
                }
                result = accVendorPaymentobj.getPaymentsFromGReceipt(greceiptid, companyid);
                list = result.getEntityList();
                if (!list.isEmpty()) {
                    linkedTransaction+=greceiptno+", ";
                            continue;
                    //throw new AccountingException(messageSource.getMessage("acc.nee.63", null, RequestContextUtils.getLocale(request)));
                }
                HashMap<String, Object> requestParams = new HashMap<String, Object>();
                requestParams.put("grid", greceiptid);
                requestParams.put("companyid", companyid);
                result = accVendorPaymentobj.getLinkedDetailsPayment(requestParams);
                list = result.getEntityList();
                if (!list.isEmpty()) {
                    linkedTransaction+=greceiptno+", ";
                            continue;
                    //throw new AccountingException(messageSource.getMessage("acc.nee.63", null, RequestContextUtils.getLocale(request)));
                }
                result = accGoodsReceiptobj.getPRFromGReceipt(greceiptid, companyid);
                list = result.getEntityList();
                if (!list.isEmpty()) {
                    linkedTransaction+=greceiptno+", ";
                            continue; 
                }
                result = accGoodsReceiptobj.getConsignmentNumberFromGReceipt(greceiptid, companyid);   //while deleting GR check wether it is used in Consignment Cost
                list = result.getEntityList();
                if (list != null && !list.isEmpty()) {
                    linkedTransaction += greceiptno + ", ";
                    continue;
                    //throw new AccountingException(messageSource.getMessage("acc.nee.74", null, RequestContextUtils.getLocale(request)));
                }
                /**
                 * Method to check the payment is Reconciled or not according to
                 * its JE id
                 */
                reconcileMap.put("jeid", journalEntryid);
                reconcileMap.put("companyid", companyid);
                boolean isReconciledFlag = accBankReconciliationObj.isRecordReconciled(reconcileMap);
                if (isReconciledFlag) {
                    throw new AccountingException(messageSource.getMessage("acc.reconcilation.Cannotdeletepayment", null, RequestContextUtils.getLocale(request)) + " " + "<b>" + greceiptno + "</b>" + " " + messageSource.getMessage("acc.reconcilation.asitisreconciled", null, RequestContextUtils.getLocale(request)));
                }
                // India Compliance check Supplier excise details mapping
                KwlReturnObject companyRes = accountingHandlerDAOobj.getObject(Company.class.getName(), companyid);
                Company company = (Company) companyRes.getEntityList().get(0);
                if (company != null && company.getCountry() != null && Integer.parseInt(company.getCountry().getID()) == Constants.indian_country_id ) {
                   
                   /*
                    * TDS Payment is done or not at Goods Receipt's each line level, If TDS payment is done we will not allow to delete 
                    *
                    */
                    result = accGoodsReceiptobj.getGoodsReceiptTDSPayment(greceiptid, companyid);
                    list = result.getEntityList();
                    if (list != null && !list.isEmpty()) {
                        linkedTransaction += greceiptno + ", ";
                        continue;
                    }
                    
                    KwlReturnObject grDetailsRes = accountingHandlerDAOobj.getObject(GoodsReceipt.class.getName(), greceiptid);
                    GoodsReceipt goodsReceiptDetail = (GoodsReceipt) grDetailsRes.getEntityList().get(0);
                    if (goodsReceiptDetail.isIsExciseInvoice()) {
                        Set<GoodsReceiptDetail> rows = goodsReceiptDetail.getRows();
                        for (GoodsReceiptDetail goodsReceiptDetailsRow : rows) {
                            result = accGoodsReceiptobj.getSupplierExciseDetailsMapping(goodsReceiptDetailsRow.getID(), companyid);   //while deleting GR check wether it is used in Consignment Cost
                            list = result.getEntityList();
                            if (list != null && !list.isEmpty()) {
                                linkedTransaction += greceiptno + ", ";
                                break;
                                //throw new AccountingException(messageSource.getMessage("acc.nee.74", null, RequestContextUtils.getLocale(request)));
                            }
                        }
                        if (!StringUtil.isNullOrEmpty(linkedTransaction)) {
                            continue;
                        }
                    }
                }
                
                // Check if invoice has been claimed or recovered then it should not be delete
                // for Malasian Company
                HashMap<String, Object> badMaps = new HashMap<String, Object>();
                badMaps.put("companyid",companyid);
                badMaps.put("invoiceid",greceiptid);

                result = accGoodsReceiptobj.getBadDebtPurchaseInvoiceMappingForGoodsReceipt(badMaps);
                list = result.getEntityList();
                if (!list.isEmpty()) {
                    linkedTransaction += greceiptno + ", ";
                    continue;
                }
                try {
                    result = accGoodsReceiptobj.deleteGoodsReceiptEntry(greceiptid, companyid);
                } catch (AccountingException ex) {                      // throw accounting exception if transaction falls under locked accounring period and return transaction number.
                    linkedTransaction += greceiptno + ", ";
                    continue;
                }
                result = accGoodsReceiptobj.deleteGoodsReceiptsLandedInvoice(greceiptid,companyid);//deleting Landed Invoice.
                result = accGoodsReceiptobj.getJEFromGR(greceiptid, companyid);
                list = result.getEntityList();
                if(list!=null && !list.isEmpty()){
                    for(String jeid:list){
                        result = accJournalEntryobj.deleteJournalEntry(jeid, companyid);
                        //Delete entry from optimized table
                        accJournalEntryobj.deleteAccountJEs_optimized(jeid);
                    }
                }
                //ERM-447 check and delete the landed invoice JE
                if (goodsReceipt.getLandedInvoiceJE() != null) {
                    result = accJournalEntryobj.deleteJournalEntry(goodsReceipt.getLandedInvoiceJE().getID(), companyid);
                }
                /*
                 * Delete JE and Mapping Entry of TDS Exemption Limit
                 * 
                 */
                result = accJournalEntryobj.getTDSJEEntryMapping(greceiptid, companyid);
                list = result.getEntityList();
                if (list != null && !list.isEmpty()) {
                    for (String tdsjeid : list) {
                        KwlReturnObject tdsJEObj = accountingHandlerDAOobj.getObject(TdsJEMapping.class.getName(), tdsjeid);
                        TdsJEMapping tdsJEMapping = (TdsJEMapping) tdsJEObj.getEntityList().get(0);
                        result = accJournalEntryobj.deleteJournalEntry(tdsJEMapping.getJournalEntry().getID(), companyid);
                    }
                }
                result = accGoodsReceiptobj.getGRDiscount(greceiptid);
                list = result.getEntityList();
                 if(list!=null && !list.isEmpty()){
                    for(String discountid:list){
                        result = accDiscountobj.deleteDiscountEntry(discountid, companyid);
                    }
                 }

                result = accGoodsReceiptobj.getGRDetailsDiscount(greceiptid);
                list = result.getEntityList();
                if(list!=null && !list.isEmpty()){
                    for(String discountid:list){
                        result = accDiscountobj.deleteDiscountEntry(discountid, companyid);
                    }
                }
                
                result = accGoodsReceiptobj.getGRInventory(greceiptid);
                list = result.getEntityList();
                  if(list!=null && !list.isEmpty()){
                    for(String inventoryid:list){
                        result = accProductObj.deleteInventoryEntry(inventoryid, companyid);
                    }
                  }
                result = accJournalEntryobj.deleteJournalEntryReval(greceiptid, companyid);
                if (preferences.isInventoryAccountingIntegration() && !preferences.isWithInvUpdate()) {
                
                    String action="17";
                    boolean isDirectUpdateInvFlag=false;
                    if(preferences.isUpdateInvLevel()){
                       isDirectUpdateInvFlag=true;
                       action="19";//Direct Inventory Update action
                    }                
                
                    
                    JSONArray productArray = new JSONArray();

                    
                    Set<GoodsReceiptDetail> goodsReceiptDetails = goodsReceipt.getRows();
                    for (GoodsReceiptDetail goodsReceiptDetail : goodsReceiptDetails) {
                        JSONObject productObject = new JSONObject();
                        productObject.put("itemUomId", goodsReceiptDetail.getInventory().getUom().getID());                            
                        productObject.put("itemBaseUomRate", goodsReceiptDetail.getInventory().getBaseuomrate());                                                        
                        productObject.put("itemQuantity", goodsReceiptDetail.getInventory().getBaseuomquantity()*(-1));                      
                        productObject.put("quantity", goodsReceiptDetail.getInventory().getQuantity()*(-1));
                        //productObject.put("itemQuantity", goodsReceiptDetail.getInventory().getQuantity()*(-1));
                        productObject.put("itemCode", goodsReceiptDetail.getInventory().getProduct().getProductid());
                        if(isDirectUpdateInvFlag){
                             productObject.put("storeid", goodsReceiptDetail.getInvstoreid());
                             productObject.put("locationid", goodsReceiptDetail.getInvlocid());
                        }
                        productArray.put(productObject);
                    }
                    if (productArray.length() > 0) {

                        String sendDateFormat = "yyyy-MM-dd";
                        DateFormat dateformat = new SimpleDateFormat(sendDateFormat);
                        Date date = goodsReceipt.getCreationDate();
                        String stringDate = dateformat.format(date);

                        JSONObject jSONObject = new JSONObject();
                        jSONObject.put("deliveryDate", stringDate);
                        jSONObject.put("dateFormat", sendDateFormat);                        
                        jSONObject.put("details", productArray);
                        jSONObject.put("orderNumber", goodsReceipt.getGoodsReceiptNumber());
                        jSONObject.put("companyId", companyid);
                        jSONObject.put("purchasing", true);

                        String url = this.getServletContext().getInitParameter("inventoryURL");
                        CommonFnController cfc = new CommonFnController();
                        cfc.updateInventoryLevel(request, jSONObject, url,action);
                    }
                }
                StringBuffer journalEntryMsg = new StringBuffer();
                if (!StringUtil.isNullOrEmpty(entryno)) {
                    journalEntryMsg.append(" along with the JE No. " + entryno);
                }
                boolean iscash = StringUtil.isNullOrEmpty(request.getParameter("incash")) ? false : Boolean.parseBoolean(request.getParameter("incash"));
                boolean isReject = StringUtil.isNullOrEmpty(request.getParameter("isReject")) ? false : Boolean.parseBoolean(request.getParameter("isReject"));
                String actionMsg = "deleted";
                if (isReject == true) {
                    actionMsg = "rejected";
                }
                String audtmsg = "";
                if (isFixedAsset) {
                    audtmsg = " Asset Acquired Invoice ";
                } else if(isConsignment) {
                    audtmsg = " Consignment Purchase Invoice ";
                } else {
                    audtmsg = " Vendor Invoice ";
                }
                if (!iscash) {
                    auditTrailObj.insertAuditLog(AuditAction.INVOICE_DELETED, "User " + sessionHandlerImpl.getUserFullName(request) + " has " + actionMsg + audtmsg + greceiptno + journalEntryMsg.toString(), request, greceiptid);
                } else {
                    auditTrailObj.insertAuditLog(AuditAction.CASH_PURCHASE_DELETED, "User " + sessionHandlerImpl.getUserFullName(request) + " has " + actionMsg + " Cash Purchase " + greceiptno + journalEntryMsg.toString(), request, greceiptid);
                }
            }
             if (!StringUtil.isNullOrEmpty(productids)) {
                productids = productids.substring(0, productids.length() - 1);
                Modulejobj.put("productIds", productids);
            }
        } catch (JSONException ex) {
            throw new AccountingException("Cannot extract data from client");
        }
        return linkedTransaction;
    }

    public ModelAndView deleteGoodsReceiptPermanent(HttpServletRequest request, HttpServletResponse response) throws JSONException, SessionExpiredException, ServiceException {
        JSONObject responsejobj = new JSONObject();
        boolean issuccess = false;
        String channelName = "";

        String url = this.getServletContext().getInitParameter("inventoryURL");
        JSONObject nObject = StringUtil.convertRequestToJsonObject(request);
        nObject.put(Constants.inventoryURL, url);
        
        JSONArray jArr = new JSONArray(nObject.optString("data", "[{}]"));
        String productids = "";
        String companyid = sessionHandlerImpl.getCompanyid(request);
        for (int i = 0; i < jArr.length(); i++) {
            JSONObject jobj = jArr.getJSONObject(i);
            String greceiptid = jobj.optString("billid");

            String landedInvoice = accProductObj.procrutmentInvoice(greceiptid, companyid);
            KwlReturnObject Lanadedres = accountingHandlerDAOobj.getObject(GoodsReceipt.class.getName(), landedInvoice);
            GoodsReceipt landedgoodsReceipt = (GoodsReceipt) Lanadedres.getEntityList().get(0);
            if (!StringUtil.isNullObject(landedgoodsReceipt)) {
                for (GoodsReceiptDetail gd : landedgoodsReceipt.getRows()) {
                    productids = gd.getInventory().getProduct().getID() + ",";
                    responsejobj.put("isExpenseInv", true);
                }
            }
        }

        
        responsejobj = accGoodsReceiptServiceDAO.deleteGoodsReceiptPermanentJSON(nObject);
        issuccess = responsejobj.optBoolean(Constants.RES_success, false);
        channelName = responsejobj.optString(Constants.channelName, null);
        
         if (!StringUtil.isNullOrEmpty(productids)) {
            productids = productids.substring(0, productids.length() - 1);
            responsejobj.put("productIds", productids);
             responsejobj.put("isExpenseInv", true);
        }

        if (issuccess && !StringUtil.isNullOrEmpty(channelName)) {
            responsejobj.put(Constants.userSessionId, (request.getSession(true)).getAttribute(Constants.userSessionId));// adding user session id to idenntify unique user session
            ServerEventManager.publish(channelName, responsejobj.toString(), (ServletContext) this.getServletContext());
        }
        return new ModelAndView(JSONVIEW, MODEL, responsejobj.toString());
    }
        
    public ModelAndView deleteOpeningBalanceGoodsReceiptPermanent(HttpServletRequest request, HttpServletResponse response) throws JSONException {
        JSONObject jobj = new JSONObject();
        String msg = "";
        boolean issuccess = false;

        DefaultTransactionDefinition def = new DefaultTransactionDefinition();
        def.setName("R_Tx");
        def.setPropagationBehavior(TransactionDefinition.PROPAGATION_REQUIRED);

        TransactionStatus status = txnManager.getTransaction(def);
        try {
            String TransactionsInUse = deleteOpeningBalanceGoodsReceiptPermanent(request);
            if (!StringUtil.isNullOrEmpty(TransactionsInUse)) {
                TransactionsInUse = TransactionsInUse.substring(0, TransactionsInUse.length() - 2);
            }
            txnManager.commit(status);
            issuccess = true;
            msg = (StringUtil.isNullOrEmpty(TransactionsInUse))?messageSource.getMessage("acc.gr.del", null, RequestContextUtils.getLocale(request)):messageSource.getMessage("acc.ob.vendorInvoicesExcept", null, RequestContextUtils.getLocale(request))+" "+TransactionsInUse+" "+messageSource.getMessage("acc.field.hasbeendeletedsuccessfully", null, RequestContextUtils.getLocale(request));  //"Vendor Invoice(s) has been deleted successfully";
        } catch (SessionExpiredException ex) {
            txnManager.rollback(status);
            msg = ex.getMessage();
            Logger.getLogger(accGoodsReceiptControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            txnManager.rollback(status);
            msg = "" + ex.getMessage();
            Logger.getLogger(accGoodsReceiptControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                jobj.put(SUCCESS, issuccess);
                jobj.put(MSG, msg);
            } catch (JSONException ex) {
                Logger.getLogger(accGoodsReceiptControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return new ModelAndView(JSONVIEW, MODEL, jobj.toString());
    }
  
    public String deleteOpeningBalanceGoodsReceiptPermanent(HttpServletRequest request) throws ServiceException, AccountingException, SessionExpiredException {
        String UsedTransactions="";
        String companyid = sessionHandlerImpl.getCompanyid(request);
        String greceiptid[] = request.getParameterValues("billidArray");
        String invoiceno[]=request.getParameterValues("invoicenoArray");
        String isExciseInvoice=request.getParameter("isExciseInvoice");
        boolean isexciseinvoice=false;
        if(!StringUtil.isNullOrEmpty(isExciseInvoice)){
            isexciseinvoice=Boolean.valueOf(isExciseInvoice);
        }
        
        KwlReturnObject result;
            for(int cnt=0;cnt<greceiptid.length;cnt++)
            {    
              String transactionNumber=invoiceno[cnt];
                if (!StringUtil.isNullOrEmpty(greceiptid[cnt])) {

                    try{
                        result = accDebitNoteobj.getDNDetailsFromOpeningBalanceGR(greceiptid[cnt], companyid);
                        List<String> list = result.getEntityList();
                        if (!list.isEmpty()) 
                        {
                            UsedTransactions+= transactionNumber+", ";
                            throw new AccountingException(messageSource.getMessage("acc.nee.62", null, RequestContextUtils.getLocale(request)));
                        }
                        
                        result = accGoodsReceiptobj.getGRFromGRInvoice(greceiptid[cnt], companyid);
                        list = result.getEntityList();
                        if (!list.isEmpty()) 
                        {
                            UsedTransactions+= transactionNumber+", ";
                            throw new AccountingException(messageSource.getMessage("acc.nee.68", null, RequestContextUtils.getLocale(request)));
                        }

                        result = accVendorPaymentobj.getPaymentsFromGReceipt(greceiptid[cnt], companyid);
                        list = result.getEntityList();
                        if (!list.isEmpty()) 
                        {
                            UsedTransactions+= transactionNumber+", ";
                            throw new AccountingException(messageSource.getMessage("acc.nee.63", null, RequestContextUtils.getLocale(request)));                        
                        }
                        
                        /*
                         * Check if invoice is claimed as bad debt
                         */ 
                        HashMap<String, Object> badMaps = new HashMap<String, Object>();
                        badMaps.put("companyid",companyid);
                        badMaps.put("invoiceid",greceiptid[cnt]);

                        result = accGoodsReceiptobj.getBadDebtPurchaseInvoiceMappingForGoodsReceipt(badMaps);
                        list = result.getEntityList();
                        if (!list.isEmpty()) {
                            UsedTransactions+= transactionNumber+", ";
                            throw new AccountingException(messageSource.getMessage("acc.nee.63", null, RequestContextUtils.getLocale(request)));                        
                        }
                        
                        HashMap<String, Object> reqParams1 = new HashMap();
                        reqParams1.put("grid", greceiptid[cnt]);
                        reqParams1.put("companyid", companyid);
                        result = accVendorPaymentobj.getLinkedDetailsPayment(reqParams1);
                        list = result.getEntityList();
                        if(!list.isEmpty()){
                            UsedTransactions+= transactionNumber+", ";
                            throw new AccountingException(messageSource.getMessage("acc.openingGR.usedInPayment", null, RequestContextUtils.getLocale(request)));                        
                        }
                        accJournalEntryobj.permanentDeleteJournalEntryDetailReval(greceiptid[cnt], companyid);
                        accJournalEntryobj.permanentDeleteJournalEntryReval(greceiptid[cnt], companyid);
                        accGoodsReceiptobj.deleteOpeningGoodsReceiptsCustomData(greceiptid[cnt]);
                        if (isexciseinvoice) {
                            accGoodsReceiptobj.deleteGoodsReceiptDetails(greceiptid[cnt], companyid);
                        }
                        accGoodsReceiptobj.deleteGoodsReceipts(greceiptid[cnt], companyid);
                        auditTrailObj.insertAuditLog(AuditAction.OPENING_BALANCE_DELETED, "User " + sessionHandlerImpl.getUserFullName(request) + " has deleted an Opening Balance Vendor Invoice Permanently "  + invoiceno[cnt] , request, greceiptid[cnt]); 
                    }catch(Exception ex)
                    {
                    }
        }
            
        }
            return UsedTransactions;
    }
   
    public ModelAndView deleteBillingGoodsReceipt(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj=new JSONObject();
        String msg="";
        boolean issuccess = false;

        DefaultTransactionDefinition def = new DefaultTransactionDefinition();
        def.setName("R_Tx");
        def.setPropagationBehavior(TransactionDefinition.PROPAGATION_REQUIRED);

        TransactionStatus status = txnManager.getTransaction(def);
        try {
            deleteBillingGoodsReceipt(request);
            txnManager.commit(status);
            issuccess = true;
            msg = messageSource.getMessage("acc.gr.del", null, RequestContextUtils.getLocale(request));   //"Vendor Invoice(s) has been deleted successfully";
        } catch (SessionExpiredException ex) {
            txnManager.rollback(status);
            msg = ex.getMessage();
            Logger.getLogger(accGoodsReceiptControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            txnManager.rollback(status);
            msg = ""+ex.getMessage();
            Logger.getLogger(accGoodsReceiptControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
        } finally{
            try {
                jobj.put( SUCCESS,issuccess);
                jobj.put( MSG,msg);
            } catch (JSONException ex) {
                Logger.getLogger(accGoodsReceiptControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return new ModelAndView(JSONVIEW,MODEL, jobj.toString());
    }

    public void deleteBillingGoodsReceipt(HttpServletRequest request) throws ServiceException, AccountingException, SessionExpiredException {
        try {
            JSONArray jArr = new JSONArray(request.getParameter(DATA));
            String companyid = sessionHandlerImpl.getCompanyid(request);

            String greceiptid = "", jeid = "";
            KwlReturnObject result;
            for (int i = 0; i < jArr.length(); i++) {
                JSONObject jobj = jArr.getJSONObject(i);
                greceiptid = StringUtil.DecodeText(jobj.optString(BILLID));

                result = accDebitNoteobj.getBDNDetailsFromGReceipt(greceiptid, companyid);
                List<BillingGoodsReceipt> list = result.getEntityList();
                if (!list.isEmpty()) {
                    throw new AccountingException(messageSource.getMessage("acc.nee.62", null, RequestContextUtils.getLocale(request)));
                }

                result = accVendorPaymentobj.getBillingPaymentsFromGReceipt(greceiptid, companyid);
                list = result.getEntityList();
                if (!list.isEmpty()) {
                    throw new AccountingException(messageSource.getMessage("acc.nee.63", null, RequestContextUtils.getLocale(request)));
                }

                result = accGoodsReceiptobj.deleteBillingGoodsReceiptEntry(greceiptid, companyid);

                result = accGoodsReceiptobj.getFromBGR(greceiptid, companyid);
                list = result.getEntityList();
                 if(list!=null && !list.isEmpty()){
                    for(BillingGoodsReceipt bgr:list){
                        if (bgr.getJournalEntry() != null) {
                            jeid = bgr.getJournalEntry().getID();
                            result = accJournalEntryobj.deleteJournalEntry(jeid, companyid);
                            //Delete entry from optimized table
                            accJournalEntryobj.deleteAccountJEs_optimized(jeid);
                        }
                    }
                }

                result = accGoodsReceiptobj.getBGRDiscount(greceiptid, companyid);
                list = result.getEntityList();
                if(list!=null && !list.isEmpty()){
                    for(BillingGoodsReceipt bgr:list){
                        if (bgr.getDiscount() != null) {
                            String discountid = bgr.getDiscount().getID();
                            result = accDiscountobj.deleteDiscountEntry(discountid, companyid);
                        }
                    }
                }
                result = accGoodsReceiptobj.getBGRDetailsDiscount(greceiptid, companyid);
                List<BillingGoodsReceiptDetail> bGRList = result.getEntityList();
                if(list!=null && !list.isEmpty()){
                    for(BillingGoodsReceiptDetail bgrd:bGRList){
                        if (bgrd.getDiscount() !=  null) {
                            String discountid = bgrd.getDiscount().getID();
                            result = accDiscountobj.deleteDiscountEntry(discountid, companyid);
                        }
                    }
                }
                result = accJournalEntryobj.deleteJournalEntryReval(greceiptid, companyid);
            }
        }catch (JSONException ex) {
            throw new AccountingException("Cannot extract data from client");
        }
    } 
    //service for aged payable bar chart data
    public ModelAndView getAccountPayableBarChart(HttpServletRequest request, HttpServletResponse response) {
        JSONObject result = new JSONObject();
        try {
            JSONArray jarr = getMonthWisePayable(request);
            result.put(Constants.data, jarr);

        } catch (JSONException ex) {
            Logger.getLogger(accGoodsReceiptControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
        } catch(Exception ex) {
            Logger.getLogger(accGoodsReceiptControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
        }
        return new ModelAndView(JSONVIEW, MODEL, result.toString());
    }
    
    public ModelAndView getAccountPayableChartGraphical(HttpServletRequest request, HttpServletResponse response) {
        JSONArray jarr = new JSONArray();        
        JSONObject obj = new JSONObject();
        try {
            DateFormat sdf = new SimpleDateFormat("MMM");
            Random t = new Random();
            DateFormat sdf1 = new SimpleDateFormat("MM");
            Calendar c1 = Calendar.getInstance();
            Calendar cal = Calendar.getInstance();
            cal.set(Calendar.DAY_OF_MONTH, 1);
            String currMonthStr = sdf1.format(c1.getTime());
            int currMonth = Integer.parseInt(currMonthStr);
            for (int i = 0; i < currMonth; i++) {                                
                cal.set(Calendar.MONTH, i);
                JSONObject temp = new JSONObject();
                temp.put("monthname", sdf.format(cal.getTime()));
                temp.put("amountreceived", t.nextInt(50000));
                temp.put("amountdue", t.nextInt(100000));
                temp.put("colorreceived", "#2D4059");
                temp.put("colordue", "#D85C6F");
                jarr.put(temp);
            }
            
            obj.put("data", jarr);
            obj.put("count", jarr.length());
            obj.put("success", true);
            obj.put("valid", true);
        } catch (Exception ex) {
            Logger.getLogger(accGoodsReceiptControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
        }
        return new ModelAndView(JSONVIEW_EX, MODEL,obj.toString());
    }
    public ModelAndView getAccountReceivedChartGraphical(HttpServletRequest request, HttpServletResponse response) {
        JSONArray jarr = new JSONArray();        
        JSONObject obj = new JSONObject();
        try {
            DateFormat sdf = new SimpleDateFormat("MMM");
            Random t = new Random();
            DateFormat sdf1 = new SimpleDateFormat("MM");
            Calendar c1 = Calendar.getInstance();
            Calendar cal = Calendar.getInstance();
            cal.set(Calendar.DAY_OF_MONTH, 1);
            String currMonthStr = sdf1.format(c1.getTime());
            int currMonth = Integer.parseInt(currMonthStr);
            for (int i = 0 ; i < currMonth; i++) {                                
                cal.set(Calendar.MONTH, i);
                JSONObject temp = new JSONObject();
                temp.put("monthname", sdf.format(cal.getTime()));
                temp.put("amountreceived", t.nextInt(50000));
                temp.put("amountdue", t.nextInt(100000));
                temp.put("colorreceived", "#3A4750");
                temp.put("colordue", "#00ADB5");
                jarr.put(temp);
            }
            
            obj.put("data", jarr);
            obj.put("count", jarr.length());
            obj.put("success", true);
            obj.put("valid", true);
        } catch (Exception ex) {
            Logger.getLogger(accGoodsReceiptControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
        }
        return new ModelAndView(JSONVIEW_EX, MODEL,obj.toString());
    }

    public JSONArray getMonthWisePayable(HttpServletRequest request) throws ServiceException, SessionExpiredException {
        JSONArray finalJArr = new JSONArray();
        try {
            HashMap<String, Object> requestParams = getGoodsReceiptMap(request);

            JSONArray jArr = new JSONArray();
            KwlReturnObject result = null;
                result = accGoodsReceiptobj.getGoodsReceiptsMerged(requestParams);
                List list = result.getEntityList();
                List pagingList = list;
                jArr = accGoodsReceiptServiceHandler.getGoodsReceiptsJsonMerged(requestParams, pagingList, jArr, accountingHandlerDAOobj,  accCurrencyDAOobj,  accGoodsReceiptobj, accAccountDAOobj, accGoodsReceiptCommon, accTaxObj);
            KwlReturnObject cap = kwlCommonTablesDAOObj.getObject(CompanyAccountPreferences.class.getName(), sessionHandlerImpl.getCompanyid(request));
            CompanyAccountPreferences pref = (CompanyAccountPreferences) cap.getEntityList().get(0);

            Calendar cal = Calendar.getInstance();
            cal.set(Calendar.DAY_OF_MONTH, 1);
            Calendar startFinYearCal = Calendar.getInstance();
            Calendar endFinYearCal = Calendar.getInstance();

            DateFormat sdf = new SimpleDateFormat("MMM");
            startFinYearCal.setTime(pref.getFinancialYearFrom());
            endFinYearCal.setTime(pref.getFinancialYearFrom());
            endFinYearCal.add(Calendar.YEAR, 1);
            int checkMonth = 0;
            for (int i = startFinYearCal.get(Calendar.MONTH); i < 12; i++) {
                JSONObject finalObj = new JSONObject();
                finalObj.put( MONTH,i);
                cal.set(Calendar.MONTH, i);
                finalObj.put(MONTHNAME, sdf.format(cal.getTime()));
                finalObj.put(TOTALAMOUNT, 0);
                finalObj.put(AMOUNTRECEIVED, 0);
                finalObj.put(AMOUNTDUE, 0);
                finalJArr.put(finalObj);
            }
            for (int i = 0; i < startFinYearCal.get(Calendar.MONTH); i++) {
                JSONObject finalObj = new JSONObject();
                finalObj.put( MONTH,i);
                cal.set(Calendar.MONTH, i);
                finalObj.put(MONTHNAME, sdf.format(cal.getTime()));
                finalObj.put(TOTALAMOUNT, 0);
                finalObj.put(AMOUNTRECEIVED, 0);
                finalObj.put(AMOUNTDUE, 0);
                finalJArr.put(finalObj);
            }
            for (int i = 0; i < jArr.length(); i++) {
                JSONObject obj = jArr.getJSONObject(i);
                Date dueDate =null;
                if(!StringUtil.isNullOrEmpty(obj.getString(DUEDATE))){
                    dueDate = authHandler.getDateOnlyFormat().parse(obj.getString(DUEDATE));
                }
                cal.setTime(dueDate);
                if (dueDate.after(pref.getBookBeginningFrom()) && dueDate.before(endFinYearCal.getTime())) {
                    checkMonth = cal.get(Calendar.MONTH);
                    int month = (checkMonth - startFinYearCal.get(Calendar.MONTH)) > 0 ? checkMonth - startFinYearCal.get(Calendar.MONTH) : startFinYearCal.get(Calendar.MONTH) - checkMonth;
                    JSONObject finalObj = finalJArr.optJSONObject(month);
                    double tamount = obj.getDouble(AMOUNTINBASE);
                    double damount = obj.getDouble(AMOUNTDUEINBASE);
                    finalObj.put(TOTALAMOUNT, finalObj.getDouble(TOTALAMOUNT) + tamount);
                    finalObj.put(AMOUNTDUE, finalObj.getDouble(AMOUNTDUE) + damount);
                    finalObj.put(AMOUNTRECEIVED, finalObj.getDouble(AMOUNTRECEIVED) + tamount - damount);
                }
            }
        } catch (ParseException | JSONException ex) {
            throw ServiceException.FAILURE("getMonthWisePayable : " + ex.getMessage(), ex);
        } 
        return finalJArr;
    }
// made following method static to access from out side to this class likr accInvoiceCMN
    public static HashMap<String, Object> getGoodsReceiptMap(HttpServletRequest request) throws SessionExpiredException {
        HashMap<String, Object> requestParams = AccountingManager.getGlobalParams(request);
            requestParams.put(COMPANYID, sessionHandlerImpl.getCompanyid(request));
            requestParams.put(GCURRENCYID, sessionHandlerImpl.getCurrencyID(request));
            requestParams.put(DATEFORMAT, authHandler.getGlobalDateFormat());
            requestParams.put(START, request.getParameter(START));
            requestParams.put(LIMIT, request.getParameter(LIMIT));
            requestParams.put(SS, request.getParameter(SS));
            requestParams.put(ACCID, request.getParameter(ACCID));
            requestParams.put(CASHONLY, request.getParameter(CASHONLY));
            requestParams.put(CREDITONLY, request.getParameter(CREDITONLY));
            requestParams.put("CashAndInvoice", request.getParameter("CashAndInvoice")!=null?Boolean.parseBoolean(request.getParameter("CashAndInvoice")):false);
            boolean fullPaidFlag = StringUtil.getBoolean(request.getParameter("fullPaidFlag"));
            requestParams.put(IGNOREZERO, fullPaidFlag?"false":request.getParameter(IGNOREZERO));
            requestParams.put(CURDATE, request.getParameter(CURDATE));
            requestParams.put(PERSONGROUP, request.getParameter(PERSONGROUP));
            requestParams.put(ISAGEDGRAPH, request.getParameter(ISAGEDGRAPH));
            requestParams.put(VENDORID, request.getParameter(VENDORID));
            requestParams.put(DELETED, request.getParameter(DELETED));
            requestParams.put(NONDELETED, request.getParameter(NONDELETED));
            requestParams.put(YEAR, request.getParameter(YEAR));
            requestParams.put(BILLID, request.getParameter(BILLID));
            requestParams.put(ONLYAMOUNTDUE,request.getParameter("onlyAmountDue"));
            requestParams.put(ONLY1099VEND, request.getParameter(ONLY1099VEND));
            requestParams.put(ONLY1099ACC, request.getParameter(ONLY1099ACC));
            requestParams.put(ONLYEXPENSEINV, request.getParameter(ONLYEXPENSEINV));
            requestParams.put(FOR1099REPORT, request.getParameter(FOR1099REPORT));
            requestParams.put("datefilter", StringUtil.getInteger(request.getParameter("datefilter")));
            requestParams.put("custVendorID", request.getParameter("custVendorID"));
            requestParams.put(PRODUCTID, (request.getParameter(PRODUCTID) == null)? "" : request.getParameter(PRODUCTID));
            requestParams.put(InvoiceConstants.productCategoryid, request.getParameter(InvoiceConstants.productCategoryid));
            requestParams.put(termid, (request.getParameter(termid) == null)? "" : request.getParameter(termid));
            requestParams.put(PRODFILTERVENID, (request.getParameter(PRODFILTERVENID) == null)? "" : request.getParameter(PRODFILTERVENID));
            requestParams.put(NEWVENDORID, (request.getParameter(NEWVENDORID) == null)? "" : request.getParameter(NEWVENDORID));
            requestParams.put(CCConstants.REQ_costCenterId,request.getParameter(CCConstants.REQ_costCenterId));
            requestParams.put(Constants.REQ_startdate ,request.getParameter(Constants.REQ_startdate));
            requestParams.put(Constants.REQ_enddate ,request.getParameter(Constants.REQ_enddate));
            requestParams.put("asofdate", request.getParameter("asofdate"));
            requestParams.put("isAged", request.getParameter("isAged"));
            requestParams.put("doflag", request.getParameter("doflag")!=null?true:false);
            requestParams.put("currencyfilterfortrans", (request.getParameter("currencyfilterfortrans") == null)? "" : request.getParameter("currencyfilterfortrans"));
            requestParams.put(Constants.MARKED_FAVOURITE, request.getParameter(Constants.MARKED_FAVOURITE));
            requestParams.put("pendingapproval" ,(request.getParameter("pendingapproval") != null)? Boolean.parseBoolean(request.getParameter("pendingapproval")): false);
            requestParams.put("istemplate" ,(request.getParameter("istemplate") != null)? Integer.parseInt(request.getParameter("istemplate")): 0);
            requestParams.put(DURATION ,(request.getParameter(DURATION) != null)? Integer.parseInt(request.getParameter(DURATION)): 0);
            requestParams.put("direction", (request.getParameter("direction") == null)? "" : request.getParameter("direction"));
            requestParams.put("isLifoFifo", (request.getParameter("isLifoFifo") == null)? "" : request.getParameter("isLifoFifo"));
            requestParams.put(Constants.Acc_Search_Json ,request.getParameter(Constants.Acc_Search_Json));
            requestParams.put(Constants.Filter_Criteria ,request.getParameter(InvoiceConstants.Filter_Criteria));
            requestParams.put(Constants.moduleid ,request.getParameter(Constants.moduleid));
            requestParams.put("isOpeningBalanceInvoices", request.getParameter("isOpeningBalanceInvoices"));
            requestParams.put("isFixedAsset" ,(request.getParameter("isFixedAsset") != null)? Boolean.parseBoolean(request.getParameter("isFixedAsset")): false);
            requestParams.put("isConsignment" ,(request.getParameter("isConsignment") != null)? Boolean.parseBoolean(request.getParameter("isConsignment")): false);
            requestParams.put("includeFixedAssetInvoicesFlag" ,(request.getParameter("includeFixedAssetInvoicesFlag") != null)? Boolean.parseBoolean(request.getParameter("includeFixedAssetInvoicesFlag")): false);
            if (request.getParameter("isReceipt") != null) {
                requestParams.put("isReceipt", request.getParameter("isReceipt"));
            }
            if(!StringUtil.isNullOrEmpty(request.getParameter("excludeInvoiceId"))) {
                requestParams.put("excludeInvoiceId", request.getParameter("excludeInvoiceId"));
            }
            if(!StringUtil.isNullOrEmpty(request.getParameter("groupcombo"))){
                int groupcombo= Integer.parseInt(request.getParameter("groupcombo"));
                requestParams.put("groupcombo",groupcombo);
            }
            
            if(!StringUtil.isNullOrEmpty(request.getParameter(Constants.userdateformat))){
            requestParams.put(Constants.userdf, sessionHandlerImpl.getUserDateFormat(request));
            }
            requestParams.put("isExport", ((StringUtil.isNullOrEmpty(request.getParameter("isExport"))) ? false : Boolean.parseBoolean(request.getParameter("isExport"))));
            requestParams.put("isCurrencyExchangeWindow", ((StringUtil.isNullOrEmpty(request.getParameter("isCurrencyExchangeWindow"))) ? false : Boolean.parseBoolean(request.getParameter("isCurrencyExchangeWindow"))));
            requestParams.put("downloadexchangerateflag", ((StringUtil.isNullOrEmpty(request.getParameter("downloadexchangerateflag"))) ? false : Boolean.parseBoolean(request.getParameter("downloadexchangerateflag"))));
            
            requestParams.put("noOfInterval",StringUtil.isNullOrEmpty(request.getParameter("noOfInterval"))? 7 : Integer.parseInt(request.getParameter("noOfInterval")));
            requestParams.put(Constants.customerCategoryid, request.getParameter(Constants.customerCategoryid));
            requestParams.put(Constants.productid, (request.getParameter(Constants.productid) == null)? "" : request.getParameter(Constants.productid));
            requestParams.put(Constants.productCategoryid, (request.getParameter(Constants.productCategoryid) == null)? "" : request.getParameter(Constants.productCategoryid));
            requestParams.put("excludeLinkedConsignments", (request.getParameter("excludeLinkedConsignments")==null)? "":request.getParameter("excludeLinkedConsignments"));
            requestParams.put("upperLimitDate", request.getParameter("upperLimitDate")==null?"":request.getParameter("upperLimitDate"));
            requestParams.put("filterForClaimedDateForPayment", request.getParameter("filterForClaimedDateForPayment")==null?"":request.getParameter("filterForClaimedDateForPayment"));
            if (!StringUtil.isNullOrEmpty(sessionHandlerImpl.getBrowserTZ(request))) {
                requestParams.put("browsertz", sessionHandlerImpl.getBrowserTZ(request));
            }
            if (!StringUtil.isNullOrEmpty(request.getParameter("requestModuleid"))) {
                requestParams.put("requestModuleid", Integer.parseInt(request.getParameter("requestModuleid")));
            }
            if (!StringUtil.isNullOrEmpty(request.getParameter("isCopyInvoice"))) {
                requestParams.put("isCopyInvoice", Boolean.parseBoolean(request.getParameter("isCopyInvoice")));
            }
            if (!StringUtil.isNullOrEmpty(request.getParameter(Constants.isDraft))) {
                requestParams.put(Constants.isDraft, Boolean.parseBoolean(request.getParameter(Constants.isDraft)));
            }
            return requestParams;
    }

    public static HashMap<String, Object> getGoodsReceiptMapJson(JSONObject paramJobj) throws SessionExpiredException, JSONException, ServiceException {
        HashMap<String, Object> requestParams = AccountingManager.getGlobalParamsJson(paramJobj);
        requestParams.put(COMPANYID, paramJobj.getString(Constants.companyKey));
        requestParams.put(GCURRENCYID, paramJobj.optString("currencyid", null));
        requestParams.put(DATEFORMAT, authHandler.getGlobalDateFormat());
        requestParams.put(START, paramJobj.optString(START, null));
        requestParams.put(LIMIT, paramJobj.optString(LIMIT, null));
        requestParams.put(SS, paramJobj.optString(SS, null));
        requestParams.put(ACCID, paramJobj.optString(ACCID, null));
        requestParams.put(CASHONLY, paramJobj.optString(CASHONLY, null));
        requestParams.put(CREDITONLY, paramJobj.optString(CREDITONLY, null));
        requestParams.put("CashAndInvoice", paramJobj.optString("CashAndInvoice", null) != null ? Boolean.parseBoolean(paramJobj.getString("CashAndInvoice")) : false);
        boolean fullPaidFlag = StringUtil.getBoolean(paramJobj.optString("fullPaidFlag", "false"));
        requestParams.put(IGNOREZERO, fullPaidFlag ? "false" : paramJobj.optString(IGNOREZERO));
        requestParams.put(CURDATE, paramJobj.optString(CURDATE, null));
        requestParams.put(PERSONGROUP, paramJobj.optString(PERSONGROUP, null));
        requestParams.put(ISAGEDGRAPH, paramJobj.optString(ISAGEDGRAPH, null));
        requestParams.put(VENDORID, paramJobj.optString(VENDORID, null));
        requestParams.put(DELETED, paramJobj.optString(DELETED, null));
        requestParams.put(NONDELETED, paramJobj.optString(NONDELETED, null));
        requestParams.put(YEAR, paramJobj.optString(YEAR, null));
        requestParams.put(BILLID, paramJobj.optString(BILLID, null));
        requestParams.put(ONLYAMOUNTDUE, paramJobj.optString("onlyAmountDue", null));
        requestParams.put(ONLY1099VEND, paramJobj.optString(ONLY1099VEND, null));
        requestParams.put(ONLY1099ACC, paramJobj.optString(ONLY1099ACC, null));
        requestParams.put(ONLYEXPENSEINV, paramJobj.optString(ONLYEXPENSEINV, null));
        requestParams.put(FOR1099REPORT, paramJobj.optString(FOR1099REPORT, null));
        requestParams.put("datefilter", StringUtil.getInteger(paramJobj.optString("datefilter", null)));
        requestParams.put("custVendorID", paramJobj.optString("custVendorID", null));
        requestParams.put(PRODUCTID, (paramJobj.optString(PRODUCTID, null) == null) ? "" : paramJobj.getString(PRODUCTID));
        requestParams.put(InvoiceConstants.productCategoryid, paramJobj.optString(InvoiceConstants.productCategoryid));
        requestParams.put(termid, (paramJobj.optString(termid, null) == null) ? "" : paramJobj.getString(termid));
        requestParams.put(PRODFILTERVENID, (paramJobj.optString(PRODFILTERVENID, null) == null) ? "" : paramJobj.getString(PRODFILTERVENID));
        requestParams.put(NEWVENDORID, (paramJobj.optString(NEWVENDORID, null) == null) ? "" : paramJobj.getString(NEWVENDORID));
        requestParams.put(CCConstants.REQ_costCenterId, paramJobj.optString(CCConstants.REQ_costCenterId, null));
        requestParams.put(Constants.REQ_startdate, paramJobj.optString(Constants.REQ_startdate, null));
        requestParams.put(Constants.REQ_enddate, paramJobj.optString(Constants.REQ_enddate, null));
        requestParams.put("asofdate", paramJobj.optString("asofdate", null));
        requestParams.put("isAged", paramJobj.optString("isAged", null));
        requestParams.put("doflag", paramJobj.optString("doflag", null) != null ? true : false);
        requestParams.put("currencyfilterfortrans", (paramJobj.optString("currencyfilterfortrans", null) == null) ? "" : paramJobj.getString("currencyfilterfortrans"));
        requestParams.put(Constants.MARKED_FAVOURITE, paramJobj.optString(Constants.MARKED_FAVOURITE, null));
        requestParams.put("pendingapproval", (paramJobj.optString("pendingapproval", null) != null) ? Boolean.parseBoolean(paramJobj.getString("pendingapproval")) : false);
        requestParams.put("istemplate", (paramJobj.optString("istemplate", null) != null) ? Integer.parseInt(paramJobj.getString("istemplate")) : 0);
        requestParams.put(DURATION, (paramJobj.optString(DURATION, null) != null) ? Integer.parseInt(paramJobj.getString(DURATION)) : 0);
        requestParams.put("direction", (paramJobj.optString("direction", null) == null) ? "" : paramJobj.getString("direction"));
        requestParams.put("isLifoFifo", (paramJobj.optString("isLifoFifo", null) == null) ? "" : paramJobj.getString("isLifoFifo"));
        requestParams.put(Constants.Acc_Search_Json, paramJobj.optString(Constants.Acc_Search_Json, null));
        requestParams.put(Constants.Filter_Criteria, paramJobj.optString(InvoiceConstants.Filter_Criteria, null));
        requestParams.put(Constants.moduleid, paramJobj.optString(Constants.moduleid, null));
        requestParams.put("isOpeningBalanceInvoices", paramJobj.optString("isOpeningBalanceInvoices", null));
        requestParams.put("isFixedAsset", (paramJobj.optString("isFixedAsset", null) != null) ? Boolean.parseBoolean(paramJobj.getString("isFixedAsset")) : false);
        requestParams.put("isConsignment", (paramJobj.optString("isConsignment", null) != null) ? Boolean.parseBoolean(paramJobj.getString("isConsignment")) : false);
        requestParams.put("includeFixedAssetInvoicesFlag", (paramJobj.optString("includeFixedAssetInvoicesFlag", null) != null) ? Boolean.parseBoolean(paramJobj.getString("includeFixedAssetInvoicesFlag")) : false);
        if (paramJobj.optString("isReceipt", null) != null) {
            requestParams.put("isReceipt", paramJobj.getString("isReceipt"));
        }
        if (!StringUtil.isNullOrEmpty(paramJobj.optString("excludeInvoiceId", null))) {
            requestParams.put("excludeInvoiceId", paramJobj.getString("excludeInvoiceId"));
        }
        requestParams.put(Constants.customerCategoryid, paramJobj.optString(Constants.customerCategoryid, null));
        requestParams.put(Constants.productid, (paramJobj.optString(Constants.productid, null) == null) ? "" : paramJobj.getString(Constants.productid));
        requestParams.put(Constants.productCategoryid, (paramJobj.optString(Constants.productCategoryid, null) == null) ? "" : paramJobj.getString(Constants.productCategoryid));
        requestParams.put("excludeLinkedConsignments", (paramJobj.optString("excludeLinkedConsignments", null) == null) ? "" : paramJobj.getString("excludeLinkedConsignments"));
        requestParams.put("upperLimitDate", paramJobj.optString("upperLimitDate", null) == null ? "" : paramJobj.getString("upperLimitDate"));
        requestParams.put("filterForClaimedDateForPayment", paramJobj.optString("filterForClaimedDateForPayment", null) == null ? "" : paramJobj.getString("filterForClaimedDateForPayment"));
        if (!StringUtil.isNullOrEmpty(paramJobj.optString("groupcombo", null))) {
            int groupcombo = Integer.parseInt(paramJobj.optString("groupcombo"));
            requestParams.put("groupcombo", groupcombo);
        }

        if (!StringUtil.isNullOrEmpty(paramJobj.optString(Constants.browsertz, null))) {
            requestParams.put("browsertz", paramJobj.optString(Constants.browsertz, null));
        }
        if (!StringUtil.isNullOrEmpty(paramJobj.optString("requestModuleid", null))) {
            requestParams.put("requestModuleid", Integer.parseInt(paramJobj.optString("requestModuleid")));
        }

        return requestParams;
    } 
    //service for aged payable pie chart data
    public ModelAndView getAgedPayablePie(HttpServletRequest request, HttpServletResponse response) throws ServiceException, SessionExpiredException {
        JSONObject result = new JSONObject();
        JSONArray jArr = new JSONArray();
        ArrayList arr = new ArrayList();
        boolean flag = true;
        try {
            HashMap<String, Double> map = new HashMap<String, Double>();
            HashMap<String, String> personnameMap = new HashMap<String, String>();
            String companyid = sessionHandlerImpl.getCompanyid(request);            
            HashMap<String, Object> requestParams = getGoodsReceiptMap(request);
            JSONArray jarr = new JSONArray();
            KwlReturnObject resultObj = null;
            resultObj = accGoodsReceiptobj.getGoodsReceiptsMerged(requestParams);
            List list = resultObj.getEntityList();
            List pagingList = list;
            jarr = accGoodsReceiptServiceHandler.getGoodsReceiptsJsonMerged(requestParams, pagingList, jarr, accountingHandlerDAOobj, accCurrencyDAOobj, accGoodsReceiptobj, accAccountDAOobj, accGoodsReceiptCommon, accTaxObj);
            
            String personname = "";
            double amountdue = 0;
            for (int j = 0; j < jarr.length(); j++) {
                flag = true;
                String personid = jarr.getJSONObject(j).getString(PERSONID);
                for (int i = 0; i < arr.size(); i++) {
                    if (arr.get(i).equals(personid)) {
                        flag = false;
                        break;
                    }
                }
                if (flag) {
                    amountdue = 0;
                    for (int k = 0; k < jarr.length(); k++) {
                        if (personid.equals(jarr.getJSONObject(k).getString(PERSONID))) {
                            amountdue += jarr.getJSONObject(k).getDouble(AMOUNTDUEINBASE);
                        }
                    }
                    arr.add(personid);
                    if (amountdue > 0) {
                        personname = jarr.getJSONObject(j).getString(PERSONNAME);
                        amountdue = Double.valueOf(authHandler.formattedAmount(amountdue, companyid));
                        map.put(personid, amountdue);
                        personnameMap.put(personid, personname);
                    }
                }
            }

            HashMap sorted_map = StringUtil.sortHashMapByValuesD(map);
            int custCnt = 0;
            double othersAmtDue = 0;
            Iterator it = sorted_map.keySet().iterator();
            JSONObject temp = null;
            while (it.hasNext()) {
                Object key = it.next();
                if (custCnt < 10) {
                    temp = new JSONObject();
                    temp.put("customername", personnameMap.get(key));
                    double totalinbase = Double.parseDouble(sorted_map.get(key).toString());
                    if(totalinbase <= 0) {
                        break;
                    }
                    temp.put("total", totalinbase);
                    jArr.put(temp);
                } else {
                    othersAmtDue += Double.parseDouble(sorted_map.get(key).toString());
                }
                custCnt++;
            }
            if (othersAmtDue > 0) {
                temp = new JSONObject();
                othersAmtDue = Double.valueOf(authHandler.formattedAmount(othersAmtDue, companyid));
                temp.put("customername", "Others");
                temp.put("total", othersAmtDue);
                jArr.put(temp);
            }
            result.put(Constants.data, jArr);
        } catch (JSONException ex) {
            Logger.getLogger(accGoodsReceiptControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
        }
        return new ModelAndView(JSONVIEW, MODEL, result.toString());
    }

    public ModelAndView exportGoodsReceipt(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        String view = JSONVIEW_EX;
        try{
            HashMap<String, Object> requestParams = getGoodsReceiptMap(request);
            KwlReturnObject result = accGoodsReceiptobj.getGoodsReceipts(requestParams);
            JSONArray DataJArr = getGoodsReceiptsJson(requestParams, result.getEntityList());
            jobj.put( DATA,DataJArr);
            String fileType = request.getParameter("filetype");
            if (StringUtil.equal(fileType, "print")) {
                String  GenerateDate = authHandler.getDateOnlyFormat().format(new Date());
                jobj.put("GenerateDate", GenerateDate);
                view = JSONVIEWEMPTY;
            }
            exportDaoObj.processRequest(request, response, jobj);
        } catch (SessionExpiredException ex) {
            Logger.getLogger(accGoodsReceiptControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
        } catch(Exception ex) {
            Logger.getLogger(accGoodsReceiptControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
        }
        return new ModelAndView(view,MODEL, jobj.toString());
    }
    
    
    
    public ByteArrayOutputStream getBaosForPdf(HttpServletRequest request) throws JSONException, ServiceException{
        ByteArrayOutputStream baos = null;
        boolean multiRecordMailFlag = Boolean.parseBoolean(request.getParameter("multiRecordMailFlag"));
        if (multiRecordMailFlag) {
            String gridconfig = "{" +
                            "data:[{'header':'personname','title':'"+messageSource.getMessage("acc.agedPay.gridVendor/AccName", null, RequestContextUtils.getLocale(request))+"','width':'200','align':''},{'header':'billno','title':'"+messageSource.getMessage("acc.agedPay.gridVIno", null, RequestContextUtils.getLocale(request))+"','width':'150','align':''},{'header':'date','title':'"+messageSource.getMessage("acc.agedPay.gridDate", null, RequestContextUtils.getLocale(request))+"','width':'150','align':'date'},{'header':'duedate','title':'"+messageSource.getMessage("acc.agedPay.gridDueDate", null, RequestContextUtils.getLocale(request))+"','width':'150','align':'date'},{'header':'termname','title':'Term Name','width':'150','align':''},{'header':'amount','title':'Amount','width':'150','align':'currency'},{'header':'amountdue','title':'"+messageSource.getMessage("acc.agedPay.gridAmtDue", null, RequestContextUtils.getLocale(request))+"','width':'150','align':'currency'},{'header':'amountdueinbase','title':'Amount Due (In Home Currency)','width':'150','align':'currency'}]," +
                            "groupdata:{'groupBy':'personname','groupSummaryField':'amountdue','groupSummaryText':'"+messageSource.getMessage("acc.nee.2", null, RequestContextUtils.getLocale(request))+" ','reportSummaryField':'amountdueinbase','reportSummaryText':'Total Aged Payable '}" +
                            "}";
            JSONObject grid = new JSONObject(gridconfig);
            JSONObject multiRecord = new JSONObject();
            multiRecord = getSelectedGoodsReceiptJson(request);
            baos = exportDaoObj.getPdfData(grid, request, multiRecord);
        }
        return baos;
    }
    
    public ModelAndView sendMail(HttpServletRequest request, HttpServletResponse response ) throws FileNotFoundException, IOException, DocumentException, ServiceException, JSONException {
       java.io.OutputStream os = null;
       JSONObject jobj = new JSONObject();
       List<String> list = new ArrayList<String>();
        {
        
            ByteArrayOutputStream baos = null;
            FileInputStream fis=null;
            FileOutputStream fos=null;
            boolean issuccess = false;
            try {
                String[] emails=request.getParameter("emailid").split(";");
                String plainMsg =request.getParameter("message");

                String subject = request.getParameter("subject");
                boolean sendPdf = Boolean.parseBoolean((String)request.getParameter("sendpdf"));
                CompanyAccountPreferences preferences = (CompanyAccountPreferences) kwlCommonTablesDAOObj.getClassObject(CompanyAccountPreferences.class.getName(), sessionHandlerImpl.getCompanyid(request));
                Company company = preferences.getCompany();
               // double amount = 0;
                Date invDate = new Date();
                String fromID = StringUtil.isNullOrEmpty(company.getEmailID())?authHandlerDAOObj.getSysEmailIdByCompanyID(company.getCompanyID()):company.getEmailID();
                File destDir=new File("");
                String[] path = new String[]{};
                String[] Names = new String[]{};
                JSONArray attachments=new JSONArray();
                if (!StringUtil.isNullOrEmpty(request.getParameter("attachments"))) {
                    attachments = new JSONArray(request.getParameter("attachments"));
                }
                if(sendPdf){  
                    double amount = 0.0;
                    if (!StringUtil.isNullOrEmpty(request.getParameter("amount"))) {
                        amount = Double.parseDouble((String) request.getParameter("amount"));
                    }               
                    String dateStr = "";
                    try {
                        DateFormat df = authHandler.getDateOnlyFormat();
                        dateStr = df.format(invDate);
                    } catch(Exception ex) {
                    }
                    
                    baos = getBaosForPdf(request);
                    Names = new String[attachments.length()+1];
                    destDir = new File(storageHandlerImpl.GetProfileImgStorePath(), "AgedPayableReport"+dateStr+".pdf");
                    Names[0] = "AgedPayableReport" + dateStr + ".pdf";
                    FileOutputStream oss = new FileOutputStream(destDir);
                    baos.writeTo(oss);                   
                    list.add(destDir.getAbsolutePath());
                    oss.close();
                    path = list.toArray(new String[attachments.length() + 1]);
                    for (int i = 0; i < attachments.length(); i++) {
                            path[i+1 ] = StorageHandler.GetDocStorePath() + attachments.getJSONObject(i).get("id").toString();
                            Names[i+1] = attachments.getJSONObject(i).get("name").toString();
                        }
                } else { //when default pdf is not attached
                    path = list.toArray(new String[attachments.length()]);
                    Names = new String[attachments.length()];
                    for (int i = 0; i < attachments.length(); i++) {
                        path[i] = StorageHandler.GetDocStorePath() + attachments.getJSONObject(i).get("id").toString();
                        Names[i] = attachments.getJSONObject(i).get("name").toString();
                    }
                }              
                try {
                    if (emails.length > 0) {
                        Map<String, Object> smtpConfigMap = authHandler.getSMTPConfigMap(company);
                        SendMailHandler.postMail(emails, subject, plainMsg, plainMsg, fromID, path,Names, smtpConfigMap);
                        issuccess=true;                        
                    }
                } catch (MessagingException e) {  
                    try{
                        throw new MessageSizeExceedingException(e.getMessage()); 
                    }catch(MessageSizeExceedingException exception){
                       if(StringUtil.isNullOrEmpty(exception.toString())){                    
                            Logger.getLogger(accGoodsReceiptControllerCMN.class.getName()).log(Level.SEVERE, null, e);
                       }else{
                            issuccess=false;
                            jobj.put("success", issuccess);
                            jobj.put("isMsgSizeException",true);
                            jobj.put("msg",exception.toString());
                       }
                    }                                                    
                }
               
                } catch (SessionExpiredException ex) {
                    Logger.getLogger(CommonFnController.class.getName()).log(Level.SEVERE, null, ex);
                }   catch (Exception e) {
                      issuccess=false;
                 } finally {
                    try{
                    if(baos!=null)
                        baos.close();
                     if(os!=null)
                        os.close();
                     if(fis!=null)
                        fis.close();
                     if(fos!=null)
                        fos.close();
                         } catch (IOException ex) {
                    Logger.getLogger(AopAdvisor.class.getName()).log(Level.SEVERE, null, ex);
                }
                    if(jobj.length()==0){
                        jobj.put("success", issuccess);
                        jobj.put("msg", messageSource.getMessage("acc.rem.165", null, RequestContextUtils.getLocale(request)));
                    }                        
                }
        }
       return new ModelAndView("jsonView", "model", jobj.toString());
    }

    public ModelAndView getBillingGoodsReceipts(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        boolean issuccess = false;
        String msg = "";
        try{

            HashMap<String, Object> requestParams = getBillingGoodsReceiptMap(request);
            boolean contraentryflag = request.getParameter("contraentryflag")!=null;
            String accid = request.getParameter(ACCID);
            if(contraentryflag && !StringUtil.isNullOrEmpty(accid)) {//Replace mapped vendorid for selected customer.
                HashMap<String, Object> requestParams1 = new HashMap<String, Object>();
                requestParams1.put("customeraccountid", accid);
                KwlReturnObject result = accCusVenMapDAOObj.getCustomerVendorMapping(requestParams1);
                Iterator itr = result.getEntityList().iterator();
                String newAccid = accid;
                while (itr.hasNext()) {
                    CustomerVendorMapping cvMapping = (CustomerVendorMapping) itr.next();
                    newAccid = cvMapping.getVendoraccountid().getID();
                }
                requestParams.put(ACCID, newAccid);
            }
            
            KwlReturnObject result = accGoodsReceiptobj.getBillingGoodsReceiptsData(requestParams);
            List list = result.getEntityList();
            int count = result.getRecordTotalCount();

            List pagingList = list;
            String start = request.getParameter(START);
            String limit = request.getParameter(LIMIT);
            if (!StringUtil.isNullOrEmpty(start) && !StringUtil.isNullOrEmpty(limit)) {
                pagingList = StringUtil.getPagedList(list, Integer.parseInt(start), Integer.parseInt(limit));
            }

            JSONArray DataJArr = getBillingGoodsReceiptsJson(requestParams, pagingList, request);
            if(request.getParameter("minimumAmountDue")!=null){
               JSONArray temp = new JSONArray();
               double minimumAmountDue = Double.parseDouble(request.getParameter("minimumAmountDue").toString());
               for(int i = 0; i < DataJArr.length(); i++) {
                   if(DataJArr.getJSONObject(i).getDouble(AMOUNTDUE) >= minimumAmountDue)
                       temp.put(DataJArr.getJSONObject(i));
               }
               DataJArr = temp;
            }
            jobj.put( DATA,DataJArr);
            jobj.put( COUNT,count);
            issuccess = true;
        } catch (SessionExpiredException ex) {
            msg = ex.getMessage();
            Logger.getLogger(accGoodsReceiptController.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ServiceException ex) {
            msg = ex.getMessage();
            Logger.getLogger(accGoodsReceiptController.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            msg = "accGoodsReceiptController.getGoodsReceipts : "+ex.getMessage();
        } finally {
            try {
                jobj.put( SUCCESS,issuccess);
                jobj.put( MSG,msg);
            } catch (JSONException ex) {
                Logger.getLogger(accGoodsReceiptController.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return new ModelAndView(JSONVIEW,MODEL, jobj.toString());
    }
    
    public ModelAndView exportBillingGoodsReceipts(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        String view = JSONVIEW_EX;
        try{
             HashMap<String, Object> requestParams = getBillingGoodsReceiptMap(request);
            KwlReturnObject result = accGoodsReceiptobj.getBillingGoodsReceiptsData(requestParams);
            int count = result.getRecordTotalCount();
            List list = result.getEntityList();
            JSONArray DataJArr = getBillingGoodsReceiptsJson(requestParams, list, request);
            jobj.put( DATA,DataJArr);
            String fileType = request.getParameter("filetype");
            if (StringUtil.equal(fileType, "print")) {
                String  GenerateDate = authHandler.getDateOnlyFormat().format(new Date());
                jobj.put("GenerateDate", GenerateDate);
                view = JSONVIEWEMPTY;
            }
            exportDaoObj.processRequest(request, response, jobj);
        } catch (SessionExpiredException ex) {
            Logger.getLogger(accGoodsReceiptController.class.getName()).log(Level.SEVERE, null, ex);
        } catch(Exception ex) {
            Logger.getLogger(accGoodsReceiptController.class.getName()).log(Level.SEVERE, null, ex);
        }
        return new ModelAndView(view,MODEL, jobj.toString());
    }
    public HashMap<String, Object> getBillingGoodsReceiptMap(HttpServletRequest request) throws SessionExpiredException {
        HashMap<String, Object> requestParams = new HashMap<String, Object>();
            requestParams.put(COMPANYID, sessionHandlerImpl.getCompanyid(request));
            requestParams.put(GCURRENCYID, sessionHandlerImpl.getCurrencyID(request));
            requestParams.put(DATEFORMAT, authHandler.getDateOnlyFormat());
            requestParams.put(START, request.getParameter(START));
            requestParams.put(LIMIT, request.getParameter(LIMIT));
            requestParams.put(SS, request.getParameter(SS));
            requestParams.put(ACCID, request.getParameter(ACCID));
            requestParams.put(CASHONLY, request.getParameter(CASHONLY));
            requestParams.put(CREDITONLY, request.getParameter(CREDITONLY));
            requestParams.put(IGNOREZERO, request.getParameter(IGNOREZERO));
            requestParams.put(CURDATE, request.getParameter(CURDATE));
            requestParams.put(DELETED, request.getParameter(DELETED));
            requestParams.put(NONDELETED, request.getParameter(NONDELETED));
            requestParams.put(BILLID, request.getParameter(BILLID));
            requestParams.put(VENDORID, request.getParameter(VENDORID));
        requestParams.put(ONLYAMOUNTDUE,request.getParameter("onlyAmountDue"));
        requestParams.put(CCConstants.REQ_costCenterId,request.getParameter(CCConstants.REQ_costCenterId));
        requestParams.put(Constants.REQ_startdate ,request.getParameter(Constants.REQ_startdate));
        requestParams.put(Constants.REQ_enddate ,request.getParameter(Constants.REQ_enddate));
        requestParams.put("currencyfilterfortrans", (request.getParameter("currencyfilterfortrans") == null)? "" : request.getParameter("currencyfilterfortrans"));
        requestParams.put("pendingapproval" ,(request.getParameter("pendingapproval") != null)? Boolean.parseBoolean(request.getParameter("pendingapproval")): false);
        requestParams.put("istemplate" ,(request.getParameter("istemplate") != null)? Integer.parseInt(request.getParameter("istemplate")): 0);
        requestParams.put("direction", (request.getParameter("direction") == null)? "" : request.getParameter("direction"));
        requestParams.put("isLifoFifo", (request.getParameter("isLifoFifo") == null)? "" : request.getParameter("isLifoFifo"));
        return requestParams;
    }

    public JSONArray getBillingGoodsReceiptsJson(HashMap<String, Object> requestParam, List<BillingGoodsReceipt> list, HttpServletRequest request) throws ServiceException {
        JSONArray jArr = new JSONArray();
        try {
            String companyid = (String) requestParam.get(COMPANYID);
            String currencyid = (String) requestParam.get(GCURRENCYID);
            DateFormat df = (DateFormat) requestParam.get(DATEFORMAT);
            KwlReturnObject curresult = accountingHandlerDAOobj.getObject(KWLCurrency.class.getName(), currencyid);
            KWLCurrency currency = (KWLCurrency) curresult.getEntityList().get(0);
            KwlReturnObject capresult = accountingHandlerDAOobj.getObject(CompanyAccountPreferences.class.getName(), companyid);
            CompanyAccountPreferences preferences = (CompanyAccountPreferences) capresult.getEntityList().get(0);
            String cashAccount = preferences.getCashAccount().getID();
            boolean ignoreZero = requestParam.get(IGNOREZERO) != null;
            boolean onlyAmountDue = requestParam.get(ONLYAMOUNTDUE) != null;
            int duration = 30;

            boolean booleanAged = false;
            Date curDate = null;
            
            Calendar cal1 = Calendar.getInstance();
            Calendar cal2 = Calendar.getInstance();
            Calendar cal3 = Calendar.getInstance();

            if(requestParam.get(CURDATE) != null){
                curDate = df.parse((String) requestParam.get(CURDATE));
                cal1.setTime(curDate);
                cal2.setTime(curDate);
                cal3.setTime(curDate);
                cal2.add(Calendar.DAY_OF_YEAR, -duration);
                cal3.add(Calendar.DAY_OF_YEAR, -(duration * 2));
                booleanAged = true;
            }
            
            Date cal1Date = null;
            Date cal2Date = null;
            Date cal3Date = null;

            String cal1String = authHandler.getDateOnlyFormat().format(cal1.getTime());
            cal1Date = authHandler.getDateOnlyFormat().parse(cal1String);

            String cal2String = authHandler.getDateOnlyFormat().format(cal2.getTime());
            cal2Date = authHandler.getDateOnlyFormat().parse(cal2String);

            String cal3String = authHandler.getDateOnlyFormat().format(cal3.getTime());
            cal3Date = authHandler.getDateOnlyFormat().parse(cal3String);
            
            double amountdue1 = 0;
            double amountdue2 = 0;
            double amountdue3 = 0;
            double amountdue4 = 0;
            
            if(list!=null && !list.isEmpty()){
                for(BillingGoodsReceipt invoice:list){
                    amountdue1 = amountdue2 = amountdue3 = amountdue4 = 0;
                    double taxPercent = 0, deductDiscount = 0;
                    double totalDiscount = (invoice.getDiscount() == null ? 0 : invoice.getDiscount().getDiscountValue());
                    JournalEntry je = invoice.getJournalEntry();
                    JournalEntryDetail d = invoice.getVendorEntry();
                    Account account = d.getAccount();
                    double amount = 0, ramount = 0;
                    Iterator itrBir = accGoodsReceiptCommon.applyBillingDebitNotes(requestParam, invoice).values().iterator();
                    while (itrBir.hasNext()) {
                        Object[] temp = (Object[]) itrBir.next();
                        amount += (Double) temp[0]-(Double) temp[2]; // - (Double) temp[3];
                        deductDiscount += (Double) temp[3];
                    }
                    JournalEntryDetail tempd = invoice.getShipEntry();
                    if (tempd != null) {
                        amount += tempd.getAmount();
                    }
                    tempd = invoice.getOtherEntry();
                    if (tempd != null) {
                        amount += tempd.getAmount();
                    }
                    tempd = invoice.getTaxEntry();
                    if (tempd != null) {
                        amount += tempd.getAmount();
                    }
                    amount = amount - (totalDiscount - deductDiscount);
                    KwlReturnObject brdAmt = accGoodsReceiptobj.getAmtromBPD(invoice.getID());
                    List l = brdAmt.getEntityList();
                    ramount = (l.isEmpty() ? 0 : (Double) l.get(0));
                    currencyid=(invoice.getCurrency()==null?currency.getCurrencyID(): invoice.getCurrency().getCurrencyID());
                    double amountdue=amount - ramount;

                    if(onlyAmountDue&&authHandler.round(amountdue,companyid)==0)
                        continue;
                    JSONObject obj = new JSONObject();
                    obj.put(BILLID, invoice.getID());
                    obj.put(PERSONID,invoice.getVendor()==null?account.getID():invoice.getVendor().getID());// account.getID());
                    obj.put(PERSONEMAIL, invoice.getVendor()==null?"":invoice.getVendor().getEmail());
                    //obj.put("crdraccid",(invoice.getDebtorEntry()!=null)?invoice.getDebtorEntry().getAccount().getID():"");// account.getID());
                    obj.put(BILLNO, invoice.getBillingGoodsReceiptNumber());
                    obj.put(CURRENCYID,currencyid);
                    obj.put(CURRENCYSYMBOL,(invoice.getCurrency()==null?"": invoice.getCurrency().getSymbol()));
                    obj.put(COMPANYADDRESS, invoice.getCompany().getAddress());
                    obj.put(OLDCURRENCYRATE, accCurrencyDAOobj.getBaseToCurrencyAmount(requestParam,1.0,currencyid,je.getEntryDate(),je.getExternalCurrencyRate()).getEntityList().get(0));
                    obj.put(BILLTO, invoice.getBillFrom());                    
                    obj.put(SHIPTO, invoice.getShipFrom());
                    obj.put(JOURNALENTRYID, je.getID());
                    obj.put(ENTRYNO, je.getEntryNumber());
                    obj.put("externalcurrencyrate", je.getExternalCurrencyRate());
                    obj.put(DATE, authHandler.getDateOnlyFormat().format(je.getEntryDate()));
                    obj.put(SHIPDATE, invoice.getShipDate()==null? "" : df.format(invoice.getShipDate()));
                    obj.put(DUEDATE, authHandler.getDateOnlyFormat().format(invoice.getDueDate()));
                    obj.put(PERSONNAME, invoice.getVendor()==null?account.getName():invoice.getVendor().getName());
                    obj.put(ALIASNAME, invoice.getVendor()==null?"":invoice.getVendor().getAliasname());
                    obj.put(TAXAMOUNT, invoice.getTaxEntry()==null?0:invoice.getTaxEntry().getAmount());
                    obj.put(TAXINCLUDED, invoice.getTax() == null ? false : true);
                    obj.put(TAXID, invoice.getTax() == null ? "" : invoice.getTax().getID());
                    obj.put(TAXNAME, invoice.getTax() == null ? "" : invoice.getTax().getName());
                    obj.put(MEMO, invoice.getMemo());
                    obj.put(DELETED, invoice.isDeleted());
                    obj.put(DISCOUNT, invoice.getDiscount()==null?0:invoice.getDiscount().getDiscountValue());
                    obj.put(ISPERCENTDISCOUNT, invoice.getDiscount()==null?false:invoice.getDiscount().isInPercent());
                    obj.put(DISCOUNTVAL, invoice.getDiscount()==null?0:invoice.getDiscount().getDiscount());
                    obj.put("shipvia", invoice.getShipvia()==null?"":invoice.getShipvia());
                    obj.put("fob", invoice.getFob()==null?"":invoice.getFob());
                    obj.put(CCConstants.JSON_costcenterid, je.getCostcenter()==null?"":je.getCostcenter().getID());
                    obj.put(CCConstants.JSON_costcenterName, je.getCostcenter()==null?"":je.getCostcenter().getName());
                    if(account.getID().equals(cashAccount)){
                          obj.put(AMOUNTDUE,0);
                          obj.put(INCASH,true);
                          obj.put(AMOUNTDUEINBASE, 0);

                    }
                    else{
                       // obj.put("amountdue", amountdue);
                        obj.put(AMOUNTDUE, authHandler.round(amountdue,companyid));
                        if(booleanAged){
                            Date dueDate = null;
                            if(!StringUtil.isNullOrEmpty(df.format(invoice.getDueDate()))){
                                dueDate = df.parse(df.format(invoice.getDueDate()));
                            }
                            if (dueDate.after(cal1Date) || dueDate.equals(cal1Date)) {
                                amountdue1 = authHandler.round(amountdue,companyid);
                            } else if ((cal2Date.before(dueDate) || cal2Date.equals(dueDate)) && cal1Date.after(dueDate)) {
                                amountdue2 = authHandler.round(amountdue,companyid);
                            } else if ((cal3Date.before(dueDate) || cal3Date.equals(dueDate)) && cal2Date.after(dueDate)) {
                                amountdue3 = authHandler.round(amountdue,companyid);
                            } else {
                                amountdue4 = authHandler.round(amountdue,companyid);
                            }
                        }


                        obj.put(AMOUNTDUEINBASE, authHandler.round((Double)accCurrencyDAOobj.getCurrencyToBaseAmount(requestParam,amountdue,currencyid,je.getEntryDate(),je.getExternalCurrencyRate()).getEntityList().get(0),companyid));
                    }
                    obj.put(AMOUNTDUENONNEGATIVE, authHandler.round(amountdue,companyid));
                    obj.put(AMOUNT, d.getAmount());
                    obj.put(AMOUNTINBASE, authHandler.round((Double)accCurrencyDAOobj.getCurrencyToBaseAmount(requestParam,d.getAmount(),currencyid,je.getEntryDate(),je.getExternalCurrencyRate()).getEntityList().get(0),companyid));

                    obj.put(AMOUNTDUE1, amountdue1);
                    obj.put(AMOUNTDUE2,amountdue2);
                    obj.put(AMOUNTDUE3, amountdue3);
                    obj.put(AMOUNTDUE4, amountdue4);
                    obj.put(DEDUCTDISCOUNT, deductDiscount);
                    
                    if (!(ignoreZero && authHandler.round(amountdue,companyid) <= 0)) {
                        jArr.put(obj);
                    }
                    if (invoice.getTax() != null) {
                        KwlReturnObject perresult = accTaxObj.getTaxPercent(companyid, je.getEntryDate(), invoice.getTax().getID());
                        taxPercent = (Double) perresult.getEntityList().get(0);
                    }
                    obj.put( TAXPERCENT,taxPercent);  //tax in percent applyind on invoice


                }
            }
        } catch (Exception ex) {
            throw ServiceException.FAILURE("accGoodsReceiptController.getBillingGoodsReceiptsJson : " + ex.getMessage(), ex);
        }
        return jArr;
    }
    
    public ModelAndView getBillingGoodsReceiptRows(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        boolean issuccess = false;
        String msg = "";
        try{
            JSONArray DataJArr = accGoodsReceiptCommon.getBillingGoodsReceiptRows(request);
            jobj.put( DATA,DataJArr);
        } catch (ServiceException ex) {
            Logger.getLogger(accGoodsReceiptController.class.getName()).log(Level.SEVERE, null, ex);
            issuccess = false;
            msg = ex.getMessage();
        } catch (Exception ex) {
            issuccess = false;
            msg = ""+ex.getMessage();
            Logger.getLogger(accGoodsReceiptController.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                jobj.put( SUCCESS,issuccess);
                jobj.put( MSG,msg);
            } catch (JSONException ex) {
                Logger.getLogger(accGoodsReceiptController.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return new ModelAndView(JSONVIEW,MODEL, jobj.toString());
    }
    
    public ModelAndView getGoodsReceiptOrdersMerged(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj=new JSONObject();
        String msg = "";
        boolean issuccess = false;
        try {
            HashMap<String, Object> requestParams = getGoodsReceiptOrdersMap(request);
            boolean pendingapproval = (request.getParameter("pendingapproval") != null)? Boolean.parseBoolean(request.getParameter("pendingapproval")): false;
            boolean consolidateFlag = request.getParameter("consolidateFlag")!=null?Boolean.parseBoolean(request.getParameter("consolidateFlag")):false;            
            String companyid = (consolidateFlag && request.getParameter("companyids")!=null)?request.getParameter("companyids"):sessionHandlerImpl.getCompanyid(request);
            String gcurrencyid = (consolidateFlag && request.getParameter("gcurrencyid")!=null)?request.getParameter("gcurrencyid"):sessionHandlerImpl.getCurrencyID(request);
            String newcustomerid=request.getParameter("newcustomerid");
            request.setAttribute("companyid", companyid);
            request.setAttribute("gcurrencyid", gcurrencyid);
            requestParams.put("companyid", companyid);
            requestParams.put("gcurrencyid", gcurrencyid);
            requestParams.put("newvendorid",newcustomerid);
            if(!StringUtil.isNullOrEmpty(request.getParameter("searchJson")))
            {
                requestParams.put("searchJson", request.getParameter("searchJson"));
                requestParams.put("moduleid", request.getParameter("moduleid"));
                requestParams.put("filterConjuctionCriteria", request.getParameter("filterConjuctionCriteria"));
            }
            if(!StringUtil.isNullOrEmpty(request.getParameter("isJobWorkOutGRO"))){
                requestParams.put("isJobWorkOutGRO",(request.getParameter("isJobWorkOutGRO") != null)? Boolean.parseBoolean(request.getParameter("isJobWorkOutGRO")): false);
            }
             ExtraCompanyPreferences extraPref = (ExtraCompanyPreferences) kwlCommonTablesDAOObj.getClassObject("com.krawler.common.admin.ExtraCompanyPreferences", sessionHandlerImpl.getCompanyid(request));
            if (extraPref != null && extraPref.isEnablesalespersonAgentFlow()) {
                int permCode = sessionHandlerImpl.getPerms(request, Constants.VENDOR_PERMCODE);
                if (!((permCode & Constants.VENDOR_VIEWALL_PERMCODE) == Constants.VENDOR_VIEWALL_PERMCODE)) {
                    /*
                     * when (permCode & Constants.VENDOR_VIEWALL_PERMCODE) == Constants.VENDOR_VIEWALL_PERMCODE is true then user has permission to view all vendors documents,so at that time there is need to filter record according to user&agent. 
                     */
                    String userId = sessionHandlerImpl.getUserid(request);
                    requestParams.put("userid", userId);
                    requestParams.put("enablesalespersonagentflow", extraPref.isEnablesalespersonAgentFlow());
                }
                Map<String, Object> salesPersonParams = new HashMap<>();

                salesPersonParams.put("userid", sessionHandlerImpl.getUserid(request));
                salesPersonParams.put("companyid", sessionHandlerImpl.getCompanyid(request));
                salesPersonParams.put("grID", "20");
                KwlReturnObject masterItemByUserList = accountingHandlerDAOobj.getMasterItemByUserID(salesPersonParams);
                List<MasterItem> masterItems = masterItemByUserList.getEntityList();
                String salesPersons = "";
                StringBuffer salesPersonids = new StringBuffer();
                for (Object obj : masterItems) {
                    if (obj != null) {
                        salesPersonids.append(obj.toString() + ",");
                    }
                }
                if (salesPersonids.length() > 0) {
                    salesPersons = salesPersonids.substring(0, (salesPersonids.length() - 1));
                    requestParams.put("salesPersonid", salesPersons);
               }
            }
            String dir = "";
            String sort = "";
            if (!StringUtil.isNullOrEmpty(request.getParameter("dir")) && !StringUtil.isNullOrEmpty(request.getParameter("sort"))) {
                dir = request.getParameter("dir");
                sort = request.getParameter("sort");
                requestParams.put("sort", sort);
                requestParams.put("dir", dir);
            }
            if (!StringUtil.isNullOrEmpty(request.getParameter("srflag"))) {
                requestParams.put("srflag", request.getParameter("srflag"));
            }
            if (!StringUtil.isNullOrEmpty(request.getParameter("linkFlag"))) {
                requestParams.put("linkFlag", request.getParameter("linkFlag"));
            }
            if(!StringUtil.isNullOrEmpty(request.getParameter("linknumber"))){
                requestParams.put("linknumber", request.getParameter("linknumber"));
            }
            KwlReturnObject extracapresult = accountingHandlerDAOobj.getObject(ExtraCompanyPreferences.class.getName(), sessionHandlerImpl.getCompanyid(request));
            ExtraCompanyPreferences extraCompanyPreferences = (ExtraCompanyPreferences) extracapresult.getEntityList().get(0);
            if (request.getParameter("requestModuleid") != null && !StringUtil.isNullOrEmpty(request.getParameter("requestModuleid"))) {
                int requestModuleID = Integer.parseInt(request.getParameter("requestModuleid"));
                if (extraCompanyPreferences.isEnableLinkToSelWin()) {
                    requestParams.put("requestModuleid", requestModuleID);
                }
                if (extraCompanyPreferences.isEnableLinkToSelWin() && !Boolean.parseBoolean(request.getParameter("isGrid")) && (requestModuleID == Constants.Acc_Purchase_Return_ModuleId || requestModuleID == Constants.Acc_Vendor_Invoice_ModuleId || requestModuleID == Constants.Acc_ConsignmentPurchaseReturn_ModuleId || requestModuleID == Constants.Acc_FixedAssets_Purchase_Return_ModuleId || requestModuleID == Constants.Acc_FixedAssets_PurchaseInvoice_ModuleId )) {
                    requestParams.put("start", "0");
                    requestParams.put("limit", "10");
                }
            }
            
            KwlReturnObject userResult = accountingHandlerDAOobj.getObject(User.class.getName(), sessionHandlerImpl.getUserid(request));
            User user = (User) userResult.getEntityList().get(0);
            if (!StringUtil.isNullOrEmpty(user.getDepartment())) {
                requestParams.put("userDepartment", user.getDepartment());
            }
            
//            KwlReturnObject result = accGoodsReceiptobj.getGoodsReceiptOrdersMerged(requestParams);
            // this will be an option under 'View' dropdown list
            boolean isUnInvoiced = request.getParameter("isUnInvoiced")!=null?Boolean.parseBoolean(request.getParameter("isUnInvoiced")):false;
            requestParams.put("isUnInvoiced", isUnInvoiced);
            
            KwlReturnObject result = null;
        if (!isUnInvoiced) {
                if (pendingapproval) {
                    requestParams.put("userid", sessionHandlerImpl.getUserid(request));
                    result = accGoodsReceiptobj.getPendingGRO(requestParams);
                } else {
                    result = accGoodsReceiptobj.getGoodsReceiptOrdersMerged(requestParams);
                }
            } else {
                result = accGoodsReceiptobj.getUnInvoicedGoodsReceiptOrders(requestParams);
            }
            
            boolean dropDownData = false;
            if (!StringUtil.isNullOrEmpty(request.getParameter("dropDownData"))) {
                dropDownData = Boolean.parseBoolean(request.getParameter("dropDownData"));
            }
            if (dropDownData) { // get only required data creation form
                JSONArray jarr = getGoodsReceiptOrdersJson(request, result.getEntityList());
                jobj.put("data", jarr);
                jobj.put("count", result.getRecordTotalCount());
                issuccess = true;
            } else { // get data for report
                JSONObject requestJSON = StringUtil.convertRequestToJsonObject(request);
                requestJSON.put("getBrowserTZ", sessionHandlerImpl.getBrowserTZ(request));
                requestJSON.put(Constants.userdf,sessionHandlerImpl.getUserDateFormat(request));
                JSONArray jarr = accGoodsReceiptServiceHandler.getGoodsReceiptOrdersJsonMerged(requestJSON, result.getEntityList());
                jobj.put("data", jarr);
                jobj.put("count", result.getRecordTotalCount());
                issuccess = true;
            }
        } catch (Exception ex) {
            msg = "" + ex.getMessage();
            Logger.getLogger(accGoodsReceiptController.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                jobj.put("success", issuccess);
                jobj.put("msg", msg);
            } catch (JSONException ex) {
                Logger.getLogger(accGoodsReceiptController.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return new ModelAndView("jsonView", "model", jobj.toString());
    }
        
    public HashMap<String, Object> getGoodsReceiptOrdersMap (HttpServletRequest request) throws SessionExpiredException {
        HashMap<String, Object> requestParams = AccountingManager.getGlobalParams(request);
        requestParams.put(Constants.ss, request.getParameter(Constants.ss));
        //checking filetype to print all records for csv,print & pdf
        if (StringUtil.isNullOrEmpty(request.getParameter("filetype"))) {
            requestParams.put(Constants.start, request.getParameter(Constants.start));
            requestParams.put(Constants.limit, request.getParameter(Constants.limit));
        }
        requestParams.put(BILLID, request.getParameter(BILLID));
        requestParams.put(CCConstants.REQ_costCenterId,request.getParameter(CCConstants.REQ_costCenterId));
        requestParams.put(CCConstants.REQ_vendorId,request.getParameter(CCConstants.REQ_vendorId));
        requestParams.put(Constants.REQ_startdate ,request.getParameter(Constants.REQ_startdate));
        requestParams.put(Constants.REQ_enddate ,request.getParameter(Constants.REQ_enddate));
        requestParams.put(Constants.Acc_Search_Json ,request.getParameter(Constants.Acc_Search_Json));
        requestParams.put(Constants.moduleid ,request.getParameter(Constants.moduleid));
        requestParams.put(Constants.Filter_Criteria ,request.getParameter(InvoiceConstants.Filter_Criteria));
        requestParams.put("pendingapproval" ,(request.getParameter("pendingapproval") != null)? Boolean.parseBoolean(request.getParameter("pendingapproval")): false);
        requestParams.put("istemplate" ,(request.getParameter("istemplate") != null)? Integer.parseInt(request.getParameter("istemplate")): 0);
        requestParams.put(Constants.MARKED_FAVOURITE ,request.getParameter(Constants.MARKED_FAVOURITE));
        requestParams.put("deleted", request.getParameter("deleted"));
        requestParams.put("currencyfilterfortrans", (request.getParameter("currencyfilterfortrans") == null)? "" : request.getParameter("currencyfilterfortrans"));
        requestParams.put("isFixedAsset" ,(request.getParameter("isFixedAsset") != null)? Boolean.parseBoolean(request.getParameter("isFixedAsset")): false);
        requestParams.put("isConsignment" ,(request.getParameter("isConsignment") != null)? Boolean.parseBoolean(request.getParameter("isConsignment")): false);
        requestParams.put(Constants.productid, (request.getParameter(Constants.productid) == null)? "" : request.getParameter(Constants.productid));
        requestParams.put(Constants.productCategoryid, (request.getParameter(Constants.productCategoryid) == null)? "" : request.getParameter(Constants.productCategoryid));
        requestParams.put(Constants.customerCategoryid, request.getParameter(Constants.customerCategoryid));
        return requestParams;
    }
    
                
                        

     public String getGoodsReceiptOrderPRStatus(Set<GoodsReceiptOrderDetails> orderDetail) throws ServiceException {
        Iterator ite = orderDetail.iterator();

        String result = "Closed";
        while (ite.hasNext()) {
            GoodsReceiptOrderDetails soDetail = (GoodsReceiptOrderDetails) ite.next();
            KwlReturnObject idresult = accGoodsReceiptobj.getIDFromPRD(soDetail.getID());
            List list = idresult.getEntityList();
            Iterator ite1 = list.iterator();
            double qua = 0;
            while (ite1.hasNext()) {
                PurchaseReturnDetail ge = (PurchaseReturnDetail) ite1.next();
                qua += ge.getInventory().getQuantity();
            }
            if (qua < soDetail.getActualQuantity()) {
                result = "Open";
                break;
            }
        }
        return result;
    }
    public JSONArray getGoodsReceiptOrdersJson(HttpServletRequest request, List list) throws ServiceException {
        JSONArray jArr = new JSONArray();
        try {
            HashMap<String, Object> requestParams = AccountingManager.getGlobalParams(request);
            String companyid = sessionHandlerImpl.getCompanyid(request);
            double quantity = 0;
            double amount;
            boolean closeflag = request.getParameter("closeflag") != null ? true : false;
            boolean avoidRecursiveLink = request.getParameter("avoidRecursiveLink") != null ? true : false;// true-skipp GR which already linked with PI
            boolean srflag = request.getParameter("srflag") != null ? true : false;
            boolean isFixedAsset = Boolean.FALSE.parseBoolean(request.getParameter("isFixedAsset"));
            boolean isConsignment = Boolean.FALSE.parseBoolean(request.getParameter("isConsignment"));
            boolean isExport = (request.getAttribute("isExport") == null) ? false : Boolean.parseBoolean(request.getParameter("isExport").toString());
            boolean linkFlag = request.getParameter("linkFlag") == null ? false : Boolean.parseBoolean(request.getParameter("linkFlag").toString());
            int moduleid = isFixedAsset ? Constants.Acc_FixedAssets_GoodsReceipt_ModuleId : isConsignment ? Constants.Acc_Consignment_GoodsReceiptOrder_ModuleId : Constants.Acc_Goods_Receipt_ModuleId;
            boolean FixedAsset_DOGRlinkFlag = !StringUtil.isNullOrEmpty(request.getParameter("FA_DOGRlinkFlag")) ? Boolean.parseBoolean(request.getParameter("FA_DOGRlinkFlag")) : false;
            if (isConsignment) {
                moduleid = Constants.Acc_Consignment_GoodsReceiptOrder_ModuleId;
            }
            HashMap<String, Object> fieldrequestParams = new HashMap();
            fieldrequestParams.put(Constants.filter_names, Arrays.asList(Constants.companyid, Constants.moduleid));
            fieldrequestParams.put(Constants.filter_values, Arrays.asList(sessionHandlerImpl.getCompanyid(request), moduleid));
            HashMap<String, String> replaceFieldMap1 = new HashMap<String, String>();
            HashMap<String, String> customFieldMap = new HashMap<String, String>();
            HashMap<String, String> customDateFieldMap = new HashMap<String, String>();
            // HashMap<String, Integer> fieldMap = accAccountDAOobj.getFieldParamsMap(fieldrequestParams, replaceFieldMap);
            HashMap<String, Integer> fieldMap = accAccountDAOobj.getFieldParamsCustomMap(fieldrequestParams, replaceFieldMap1, customFieldMap, customDateFieldMap);
            Iterator itr = list.iterator();
            while (itr.hasNext()) {
                //SalesOrder salesOrder=(SalesOrder)itr.next();
                Object[] oj = (Object[]) itr.next();
                String orderid = oj[0].toString();
                //Withoutinventory 0 for normal, 1 for billing
                KwlReturnObject objItr = accountingHandlerDAOobj.getObject(GoodsReceiptOrder.class.getName(), orderid);
                GoodsReceiptOrder grOrder = (GoodsReceiptOrder) objItr.getEntityList().get(0);
                Set<GoodsReceiptOrderDetails> doRows = grOrder.getRows();
                Iterator itr1=doRows.iterator();
                boolean isLinkInPI=false;
                if (linkFlag) {
                    while (itr1.hasNext()) {
                        GoodsReceiptOrderDetails godsreceiptorderdetails = (GoodsReceiptOrderDetails) itr1.next();
                        if (godsreceiptorderdetails.getVidetails() != null) {
                            isLinkInPI = true;
                            break;
                        }
                    }
                }
                
               
                boolean addflag = true;
                String status = "Open";
                double groQuantity=0.0;
                if (srflag) {   //this flag is true  in purchase return case
                    status = getGoodsReceiptOrderPRStatus(doRows);
                } else {
                    /*
                     Checking GR if it is already returned then we do not load GR again in invoice
                    
                     or load with remaining quantity which is not returned     
                    
                     */
                    Iterator itr2 = doRows.iterator();
                    while (itr2.hasNext()) {
                        GoodsReceiptOrderDetails tempdodetails = (GoodsReceiptOrderDetails) itr2.next();
                        groQuantity = getGoodsReceiptOrderDetailStatus(tempdodetails);
                        if (groQuantity > 0) {
                            status = "Open";
                            break;
                        } else {
                            status = "Closed";
                        }
                    }
                }
                
                if ((closeflag && grOrder.isDeleted()) || (isLinkInPI && !srflag)) {
                    addflag = false;
                    continue;
                } else if (closeflag && (status.equalsIgnoreCase("Closed"))) {
                    addflag = false;
                    continue;
                }
                amount = 0;
                if (doRows != null && !doRows.isEmpty()) {
                    for (GoodsReceiptOrderDetails temp : doRows) {
                        quantity = temp.getInventory().getQuantity();
                        amount += temp.getRate() * quantity;
                        if (avoidRecursiveLink && (temp.getVidetails() != null)) {
                            addflag = false;
                            continue;
                        }
                    }
                }
                Vendor vendor = grOrder.getVendor();
                JSONObject obj = new JSONObject();
                obj.put("billid", grOrder.getID());
                obj.put("gtaapplicable", grOrder.isRcmApplicable());
                obj.put("companyid", grOrder.getCompany().getCompanyID());
                obj.put("companyname", grOrder.getCompany().getCompanyName());
                obj.put("externalcurrencyrate", grOrder.getExternalCurrencyRate());
                obj.put("withoutinventory", false);
                obj.put("personid", vendor.getID());
                obj.put("billno", grOrder.getGoodsReceiptOrderNumber());
                obj.put("date", authHandler.getDateOnlyFormat().format(grOrder.getOrderDate()));
                obj.put("personname", vendor.getName());
                obj.put("aliasname", StringUtil.isNullOrEmpty(vendor.getAliasname()) ? "" : vendor.getAliasname());
                obj.put("personemail", vendor.getEmail());
                obj.put("memo", grOrder.getMemo());
                obj.put("agent", grOrder.getMasterAgent() == null ? "" : grOrder.getMasterAgent().getID());
                obj.put("agentname", grOrder.getMasterAgent() == null ? "" : grOrder.getMasterAgent().getValue());
                obj.put("posttext", grOrder.getPostText() == null ? "" : grOrder.getPostText());
                obj.put("costcenterid", grOrder.getCostcenter() == null ? "" : grOrder.getCostcenter().getID());
                obj.put("costcenterName", grOrder.getCostcenter() == null ? "" : grOrder.getCostcenter().getName());
                obj.put("statusID", grOrder.getStatus() == null ? "" : grOrder.getStatus().getID());
                obj.put("status", grOrder.getStatus() == null ? "" : grOrder.getStatus().getValue());
                obj.put(SHIPDATE, grOrder.getShipdate() == null ? "" : authHandler.getDateOnlyFormat().format(grOrder.getShipdate()));
                obj.put("termid", grOrder.getTerm()== null ? "" : grOrder.getTerm().getID());
                obj.put("termdetails", accGoodsReceiptServiceHandler.getGoodsReceiptOrderTermDetails(grOrder.getID(),accGoodsReceiptobj));
                if(grOrder.getTermsincludegst()!=null) {
                    obj.put(Constants.termsincludegst, grOrder.getTermsincludegst());
                }
                obj.put("termamount", CommonFunctions.getTotalTermsAmount(AccGoodsReceiptServiceHandler.getGRTermDetails(grOrder.getID(),accGoodsReceiptobj)));
                obj.put("shipvia", grOrder.getShipvia() == null ? "" : grOrder.getShipvia());
                obj.put("fob", grOrder.getFob() == null ? "" : grOrder.getFob());
                obj.put("permitNumber", grOrder.getPermitNumber() == null ? "" : grOrder.getPermitNumber());
                obj.put("isfavourite", grOrder.isFavourite());
                obj.put("isprinted", grOrder.isPrinted());
                obj.put("isautogenerateddo", grOrder.isIsAutoGeneratedGRO());
                obj.put("deleted", grOrder.isDeleted());
                obj.put("currencyid", (grOrder.getCurrency() == null ? "" : grOrder.getCurrency().getCurrencyID()));
                obj.put("currencysymbol", (grOrder.getCurrency() == null ? "" : grOrder.getCurrency().getSymbol()));
                obj.put("challannumber", (StringUtil.isNullOrEmpty(grOrder.getChallanNumber())? "" : grOrder.getChallanNumber()));
                obj.put(Constants.SEQUENCEFORMATID, grOrder.getSeqformat() != null ? grOrder.getSeqformat().getID() : "");
                obj.put("isConsignment", grOrder.isIsconsignment());
                obj.put("gstIncluded", grOrder.isGstIncluded()); // ERP-28308
                boolean isApplyTaxToTerms=grOrder.isApplyTaxToTerms();
                obj.put("isapplytaxtoterms", isApplyTaxToTerms);
                obj.put(Constants.isMerchantExporter, grOrder.isIsMerchantExporter());
                 /**
                 * Put GST document history.
                 */
                if (grOrder.getCompany().getCountry().getID().equalsIgnoreCase("" + Constants.indian_country_id)) {
                    obj.put("refdocid", grOrder.getID());
                    fieldDataManagercntrl.getGSTDocumentHistory(obj);

                }
                obj.put(Constants.SUPPLIERINVOICENO, grOrder.getSupplierInvoiceNo() != null ? grOrder.getSupplierInvoiceNo() : "");
                if (grOrder.getModifiedby() != null) {
                    obj.put("lasteditedby", StringUtil.getFullName(grOrder.getModifiedby()));
                }
                double taxPercent = 0;
                    if (grOrder.getTax() != null) {
                        KwlReturnObject taxresult = accTaxObj.getTaxPercent(sessionHandlerImpl.getCompanyid(request),grOrder.getOrderDate() , grOrder.getTax().getID());
                        taxPercent = (Double) taxresult.getEntityList().get(0);
                        
                    }
                    obj.put( "taxid",grOrder.getTax() != null ? grOrder.getTax().getID() : "");
                    obj.put( TAXPERCENT,taxPercent);
                    Set<GoodsReceiptOrderDetails> goodsReceiptOrderDetails = grOrder.getRows();
                    boolean includeprotax = false;
                    double rowTaxAmt = 0;
                    boolean isTaxRowLvlAndFromTaxGlobalLvl = false;
                    for (GoodsReceiptOrderDetails goodsReceiptOrderDetail : goodsReceiptOrderDetails) {
                        if (goodsReceiptOrderDetail.getPodetails() != null && goodsReceiptOrderDetail.getPodetails().getPurchaseOrder() != null) {
                            if (goodsReceiptOrderDetail.getPodetails().getPurchaseOrder().getTax() != null) {
                                isTaxRowLvlAndFromTaxGlobalLvl = true;
                            }
                        }
                        if (goodsReceiptOrderDetail.getVidetails()!= null && goodsReceiptOrderDetail.getVidetails().getGoodsReceipt()!= null) {
                            if (goodsReceiptOrderDetail.getVidetails().getGoodsReceipt().getTax() != null) {
                                isTaxRowLvlAndFromTaxGlobalLvl = true;
                            }
                        }
                        if (goodsReceiptOrderDetail.getTax() != null) {
                            includeprotax = true;
                            rowTaxAmt += goodsReceiptOrderDetail.getRowTaxAmount();
                        }
                    }
                    obj.put("isTaxRowLvlAndFromTaxGlobalLvl", isTaxRowLvlAndFromTaxGlobalLvl);
                    obj.put("includeprotax", includeprotax);
                    obj.put("rowTaxAmt", rowTaxAmt);
                    obj=AccountingAddressManager.getTransactionAddressJSON(obj, grOrder.getBillingShippingAddresses(), true);
                obj.put(Constants.IsRoundingAdjustmentApplied, grOrder.isIsRoundingAdjustmentApplied());
                if (grOrder.isIsRoundingAdjustmentApplied()) {//for rounding the exact amount is considered
                    amount = grOrder.getTotalamount();
                }
                obj.put("amount", authHandler.round(amount, companyid));
                if (grOrder.getCurrency() != null) {
                    KwlReturnObject bAmt = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, amount, grOrder.getCurrency().getCurrencyID(), grOrder.getOrderDate(), grOrder.getExternalCurrencyRate());
                    obj.put("amountinbase", authHandler.round((Double) bAmt.getEntityList().get(0), companyid));
                }
                obj.put("approvalstatusinfo", grOrder.getApprovestatuslevel() == -1 ? "Rejected" : grOrder.getApprovestatuslevel() < 11 ? "Waiting for Approval at Level - " + grOrder.getApprovestatuslevel() : "Approved");
                obj.put("approvalstatus", grOrder.getApprovestatuslevel());
                Map<String, Object> variableMap = new HashMap<String, Object>();
                GoodsReceiptOrderCustomData goodsReceiptOrderCustomData = (GoodsReceiptOrderCustomData) grOrder.getGoodsReceiptOrderCustomData();
                HashMap<String, String> replaceFieldMap = new HashMap<String, String>();
                AccountingManager.setCustomColumnValues(goodsReceiptOrderCustomData, fieldMap, replaceFieldMap, variableMap);
                /*  Code to populate Custom field  while linking documents                
                
                 Refer Same code as GoodsreceiptordersJsonMerged        
                 */
                if (goodsReceiptOrderCustomData != null) {

                    JSONObject params = new JSONObject();
                    params.put("isExport", isExport);
                    if (linkFlag || srflag || FixedAsset_DOGRlinkFlag) {
                        int moduleId = isFixedAsset ? Constants.Acc_FixedAssets_PurchaseInvoice_ModuleId : srflag ? Constants.Acc_Purchase_Return_ModuleId : Constants.Acc_Vendor_Invoice_ModuleId;
                        if (FixedAsset_DOGRlinkFlag) {
                            moduleId = Constants.Acc_FixedAssets_Purchase_Return_ModuleId;
                        } else if (isConsignment) {
                            moduleId = Constants.Acc_ConsignmentPurchaseReturn_ModuleId;
                        }
                        params.put("linkModuleId", moduleId);
                        params.put("isLink", true);
                        params.put("companyid", grOrder.getCompany().getCompanyID());
                        params.put("customcolumn", 0);
                    }
                    if (!StringUtil.isNullOrEmpty(sessionHandlerImpl.getBrowserTZ(request))) {
                        params.put("browsertz", sessionHandlerImpl.getBrowserTZ(request));
                    }
                    fieldDataManagercntrl.addCustomData(variableMap, customFieldMap, customDateFieldMap, obj, params);
                }
                if (addflag) {
                    jArr.put(obj);
                }
            }
        } catch (Exception ex) {
            throw ServiceException.FAILURE("getDeliveryOrdersJson : " + ex.getMessage(), ex);
        }
        return jArr;
    }
     public String getGoodsReceiptOrderStatus(Set<GoodsReceiptOrderDetails> orderDetail) throws ServiceException {
        Iterator ite = orderDetail.iterator();

        String result = "Closed";
        while (ite.hasNext()) {
            GoodsReceiptOrderDetails soDetail = (GoodsReceiptOrderDetails) ite.next();
            KwlReturnObject idresult = accGoodsReceiptobj.getIDFromGROD(soDetail.getID());
            List list = idresult.getEntityList();
            Iterator ite1 = list.iterator();
            double qua = 0;
            while (ite1.hasNext()) {
                GoodsReceiptDetail ge = (GoodsReceiptDetail) ite1.next();
                qua += ge.getInventory().getQuantity();
            }
            if (qua < soDetail.getActualQuantity()) {
                result = "Open";
                break;
            }
        }
        return result;
    }
         
   public ModelAndView getGoodsReceiptOrderRows(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj=new JSONObject();
        String msg = "";
        boolean issuccess = false;
        try {
             jobj = getGoodsReceiptOrderRows(request);
            issuccess = true;
        } catch (SessionExpiredException| ServiceException ex) {
            msg = ex.getMessage();
            Logger.getLogger(accGoodsReceiptController.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            msg = "accSalesOrderController.getSalesOrderRows:" + ex.getMessage();
            Logger.getLogger(accGoodsReceiptController.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                jobj.put("success", issuccess);
                jobj.put("msg", msg);
            } catch (JSONException ex) {
                Logger.getLogger(accGoodsReceiptController.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return new ModelAndView("jsonView", "model", jobj.toString());
    }
        
     public JSONObject getGoodsReceiptOrderRows(HttpServletRequest request) throws SessionExpiredException, ServiceException, ParseException, UnsupportedEncodingException {
        JSONObject jobj=new JSONObject();
        try {
            String companyid = sessionHandlerImpl.getCompanyid(request);
            String gcurrencyid = sessionHandlerImpl.getCurrencyID(request);
            JSONObject paramJobj=StringUtil.convertRequestToJsonObject(request);
            DateFormat userDateFormat=null;
            if(paramJobj.has(Constants.userdateformat)){
                userDateFormat=new SimpleDateFormat(String.valueOf(paramJobj.get(Constants.userdateformat)));
            }
            HashMap<String,Object> requestParams = new HashMap<String, Object>();
            requestParams.put(Constants.companyKey,companyid);
            requestParams.put(Constants.globalCurrencyKey, gcurrencyid);
            boolean FA_DOGRlinkFlag = (request.getParameter("FA_DOGRlinkFlag") != null)? Boolean.parseBoolean(request.getParameter("FA_DOGRlinkFlag")): false;
            boolean isFixedAsset=Boolean.FALSE.parseBoolean(request.getParameter("isFixedAsset"));
            boolean isConsignment=Boolean.FALSE.parseBoolean(request.getParameter("isConsignment"));
            int moduleid=isFixedAsset ? Constants.Acc_FixedAssets_GoodsReceipt_ModuleId : isConsignment?Constants.Acc_Consignment_GoodsReceiptOrder_ModuleId:Constants.Acc_Goods_Receipt_ModuleId;
            boolean isForLinking = request.getParameter("isForLinking") != null ? true : false; // While GR linking  in PI
            if (isConsignment) {
                moduleid = Constants.Acc_Consignment_GoodsReceiptOrder_ModuleId;
            }
            boolean isEdit = (StringUtil.isNullOrEmpty(request.getParameter("isEdit"))) ? false : Boolean.parseBoolean(request.getParameter("isEdit"));
            DateFormat df = authHandler.getDateOnlyFormat();
            KwlReturnObject capresult = accountingHandlerDAOobj.loadObject(ExtraCompanyPreferences.class.getName(), companyid);
            ExtraCompanyPreferences extraCompanyPreferences = (ExtraCompanyPreferences) capresult.getEntityList().get(0);
            KwlReturnObject cap = accountingHandlerDAOobj.loadObject(CompanyAccountPreferences.class.getName(), companyid);
            CompanyAccountPreferences preferences = (CompanyAccountPreferences) cap.getEntityList().get(0);
            boolean closeflag = request.getParameter("closeflag")!=null?true:false;
            boolean srflag = request.getParameter("srflag")!=null?true:false;
            boolean prflag = (StringUtil.isNullOrEmpty(request.getParameter("prflag"))) ? false : Boolean.parseBoolean(request.getParameter("prflag"));
            boolean linkingFlag = (StringUtil.isNullOrEmpty(request.getParameter("linkingFlag")))?false:Boolean.parseBoolean(request.getParameter("linkingFlag"));
            boolean isCopy = StringUtil.isNullOrEmpty(request.getParameter("copyInv")) ? false : Boolean.parseBoolean(request.getParameter("copyInv"));
            boolean isLocationForProduct=false;
            boolean isWarehouseForProduct=false;
            boolean isBatchForProduct=false;
            boolean isSerialForProduct=false;
            boolean isRowForProduct = false;
            boolean isRackForProduct = false;
            boolean isBinForProduct = false;
            String description="";
            String[] sos=request.getParameter("bills")!=null?(String[]) request.getParameter("bills").split(","):(String[]) (request.getAttribute("billid").toString()).split(",");
            int i=0;
            boolean isForReport = false;
            String dtype = request.getParameter("dtype");
            if(!StringUtil.isNullOrEmpty(dtype) && dtype.equals("report")){
                isForReport = true;
            }
            boolean isExport = false;
            if (request.getAttribute("isExport")!=null) {
                isExport = (boolean) request.getAttribute("isExport");
            }
            int countryid = 0;
            if(extraCompanyPreferences != null && extraCompanyPreferences.getCompany().getCountry() != null){
                countryid = Integer.parseInt(extraCompanyPreferences.getCompany().getCountry().getID());
            }
            JSONArray jArr=new JSONArray();
            
            HashMap<String, Object> fieldrequestParams = new HashMap();
            fieldrequestParams.put(Constants.filter_names, Arrays.asList(Constants.companyid, Constants.moduleid,Constants.customcolumn));
            fieldrequestParams.put(Constants.filter_values, Arrays.asList(companyid,moduleid,1));
            HashMap<String, String> replaceFieldMap1 = new HashMap<String, String>();
            HashMap<String, String> customFieldMap = new HashMap<String, String>();
            HashMap<String, String> customDateFieldMap = new HashMap<String, String>();
            HashMap<String, Integer> fieldMap = accAccountDAOobj.getFieldParamsCustomMapForRows(fieldrequestParams, replaceFieldMap1, customFieldMap, customDateFieldMap);

            HashMap<String, Object> doRequestParams = new HashMap<String, Object>();
            ArrayList filter_names = new ArrayList(),filter_params = new ArrayList(), order_by = new ArrayList(), order_type = new ArrayList();
            filter_names.add("grOrder.ID");
            order_by.add("srno");
            order_type.add("asc");
            doRequestParams.put("filter_names", filter_names);
            doRequestParams.put("filter_params", filter_params);
            doRequestParams.put("order_by", order_by);
            doRequestParams.put("order_type", order_type);

            HashMap<String, Object> fieldrequestParams1 = new HashMap();
            fieldrequestParams1.put(Constants.filter_names, Arrays.asList(Constants.companyid, Constants.moduleid, Constants.customcolumn));
            fieldrequestParams1.put(Constants.filter_values, Arrays.asList(companyid, Constants.Acc_FixedAssets_Details_ModuleId, 1));
            HashMap<String, String> customFieldMap1 = new HashMap<String, String>();
            HashMap<String, String> customDateFieldMap1 = new HashMap<String, String>();
            HashMap<String, String> replaceFieldMap11 = new HashMap<String, String>();
            HashMap<String, Integer> fieldMap1 = accAccountDAOobj.getFieldParamsCustomMapForRows(fieldrequestParams1, replaceFieldMap11, customFieldMap1, customDateFieldMap1);
            
            
            
            HashMap<String, Object> serialfieldrequestParams = new HashMap();
            serialfieldrequestParams.put(Constants.filter_names, Arrays.asList(Constants.companyid, Constants.moduleid, Constants.customcolumn));
            serialfieldrequestParams.put(Constants.filter_values, Arrays.asList(companyid, Constants.SerialWindow_ModuleId, 1));
            HashMap<String, String> serialcustomFieldMap = new HashMap<String, String>();
            HashMap<String, String> serialcustomDateFieldMap = new HashMap<String, String>();
            HashMap<String, String> serialreplaceFieldMap = new HashMap<String, String>();
            HashMap<String, Integer> serialfieldMap = accAccountDAOobj.getFieldParamsCustomMapForRows(fieldrequestParams, serialreplaceFieldMap, serialcustomFieldMap, serialcustomDateFieldMap);
            while(sos!=null&&i<sos.length){
                KwlReturnObject result = accountingHandlerDAOobj.getObject(GoodsReceiptOrder.class.getName(), sos[i]);
                GoodsReceiptOrder grorder = (GoodsReceiptOrder) result.getEntityList().get(0);
                filter_params.clear();
                filter_params.add(grorder.getID());
                KwlReturnObject podresult = accGoodsReceiptobj.getGoodsReceiptOrderDetails(doRequestParams);
                List<GoodsReceiptOrderDetails> goodsReceiptOrderDetails= podresult.getEntityList();
                if(goodsReceiptOrderDetails!=null && !goodsReceiptOrderDetails.isEmpty()){
                    StringBuilder documentIDs = new StringBuilder();
                    for (GoodsReceiptOrderDetails row : goodsReceiptOrderDetails) { //get document id for batch/serial/location product
                        Product product = row.getProduct();
                        if (product != null && !StringUtil.isNullOrEmpty(product.getID())) {
                            if ((preferences.isIsBatchCompulsory() || preferences.isIsSerialCompulsory() || preferences.isIslocationcompulsory() || preferences.isIswarehousecompulsory() || preferences.isIsrowcompulsory() || preferences.isIsrackcompulsory() || preferences.isIsbincompulsory()) && !isCopy) {  //check if company level option is on then only we will check productt level
                                if (product.isIsBatchForProduct() || product.isIslocationforproduct() || product.isIswarehouseforproduct() || product.isIsrowforproduct() || product.isIsrackforproduct() || product.isIsbinforproduct()) {
                                    documentIDs.append("'" + row.getID() + "'").append(",");
                                }
                            }
                        }
                    }
                    Map<String, List<Object[]>> baMap = new HashMap<>();
                    Map<String, Object> batchSerialReqMap = new HashMap<>();
                    batchSerialReqMap.put(Constants.companyKey, companyid);
                    batchSerialReqMap.put(Constants.df, df);
                    batchSerialReqMap.put("linkingFlag", linkingFlag);
                    batchSerialReqMap.put("isEdit", isEdit);
                    batchSerialReqMap.put("isConsignment", isConsignment);
                    batchSerialReqMap.put("isFixedAsset", isFixedAsset);
                    batchSerialReqMap.put("srflag", srflag);
                    batchSerialReqMap.put("moduleID", moduleid);
                    if (documentIDs.length() > 0) { // batchDetails
                        batchSerialReqMap.put("documentIds", documentIDs.substring(0, documentIDs.length() - 1));
                        baMap = accInvoiceServiceDAO.getBatchDetailsMap(batchSerialReqMap);
                    }
                for(GoodsReceiptOrderDetails row:goodsReceiptOrderDetails) { 
                    JSONObject obj = new JSONObject();
                    Product rowProduct=row.getProduct();
                    obj.put("billid", grorder.getID());
                    obj.put("billno", grorder.getGoodsReceiptOrderNumber());
                    obj.put("currencysymbol", grorder.getCurrency().getSymbol());  //ERP-10464
                    obj.put(GoodsReceiptCMNConstants.EXTERNALCURRENCYRATE, grorder.getExternalCurrencyRate());
                    obj.put("srno", row.getSrno());
                    obj.put("rowid", row.getID());
                    obj.put("originalTransactionRowid", row.getID());
                    obj.put("productid", rowProduct.getID());
                    obj.put("purchasetaxId", rowProduct.getPurchasetaxid());
                    obj.put("salestaxId", rowProduct.getSalestaxid());
                    obj.put("barcodetype", rowProduct.getBarcodefield());  //ERM-304
                    obj.put("hasAccess", rowProduct.isIsActive());
                    obj.put("shelfLocation", row.getShelfLocation());
                    obj.put("productname",rowProduct.getName());
                    obj.put("isAsset",rowProduct.isAsset());
                    if(row.getInventory()!=null){
                    obj.put("unitname", row.getInventory().getUom()!=null?row.getInventory().getUom().getNameEmptyforNA():rowProduct.getUnitOfMeasure()==null?"":rowProduct.getUnitOfMeasure().getNameEmptyforNA());
                    }else{
                        obj.put("unitname","");
                    }
                    if (!StringUtil.isNullOrEmpty(row.getDescription())) {
                        description = row.getDescription();
                    } else if (!StringUtil.isNullOrEmpty(row.getProduct().getDescription())) {
                        description = row.getProduct().getDescription();
                    } else {
                        description = "";
                    }
                    obj.put("desc", StringUtil.DecodeText(description));
                    obj.put("supplierpartnumber", StringUtil.isNullOrEmpty(row.getSupplierpartnumber())?"":row.getSupplierpartnumber());
                    if(rowProduct.isAsset()){     //In case of asset product type ll be 'Asset'
                        obj.put("type","Asset");
                    } else {
                        obj.put("type",rowProduct.getProducttype()==null?"":rowProduct.getProducttype().getName());
                    }                    
                    obj.put("pid",rowProduct.getProductid());
                    obj.put("statusID", row.getGrOrder().getStatus()==null?"":row.getGrOrder().getStatus().getID());
                    obj.put("status", row.getGrOrder().getStatus() == null ? "" : row.getGrOrder().getStatus().getValue());
                    obj.put("posttext", grorder.getPostText()==null?"":grorder.getPostText());
                    obj.put("invstore",(StringUtil.isNullOrEmpty(row.getInvstoreid()))?"":row.getInvstoreid());
                    obj.put("invlocation",(StringUtil.isNullOrEmpty(row.getInvlocid()))?"":row.getInvlocid());
                    obj.put("quantity", row.getActualQuantity());
                    if(countryid == Constants.indian_country_id){
                        obj.put("formtypeid", grorder.getFormtype());//Vendor's applied Form.
                    }
                    
                    if (grorder.isFixedAssetGRO()) {
                        
                        HashMap<String, Object> assParams = new HashMap<String, Object>();
                        assParams.put("companyId", companyid);
                        assParams.put("invrecord", false);
                        KwlReturnObject assResult = accProductObj.getAssetDetails(assParams);

                        List assetList = assResult.getEntityList();

                        List<String> assetNameList = new ArrayList<String>();

                        Iterator it = assetList.iterator();
                        while(it.hasNext()){
                            AssetDetails ad = (AssetDetails) it.next();
                            assetNameList.add(ad.getAssetId());
                        }
                        
                        
                        JSONArray assetDetailsJArr = new JSONArray();
                        HashMap<String, Object> assetDetailsParams = new HashMap<String, Object>();
                        assetDetailsParams.put("companyid", companyid);
                        assetDetailsParams.put("invoiceDetailId", row.getID());
                        assetDetailsParams.put("moduleId", Constants.Acc_Goods_Receipt_ModuleId);

                        KwlReturnObject assetInvMapObj = accProductObj.getAssetInvoiceDetailMapping(assetDetailsParams);
                        List assetInvMapList = assetInvMapObj.getEntityList();
                        Iterator assetInvMapListIt = assetInvMapList.iterator();
                        while (assetInvMapListIt.hasNext()) {
                            AssetInvoiceDetailMapping invoiceDetailMapping = (AssetInvoiceDetailMapping) assetInvMapListIt.next();
                            AssetDetails assetDetails = invoiceDetailMapping.getAssetDetails();
                            if(assetDetails.isPurchaseReturn() && !(isEdit && isFixedAsset)){
                                continue;
                            }
                            JSONObject assetDetailsJOBJ = new JSONObject();
                            
                            // <-- Following statement must be first statement in putting assetDetailsJOBJ
                            
                            if (linkingFlag || (row.getVidetails() != null)) {// in case of edit linkingFlag comes false so manualy checking that it is linked with transactions or not
                                if (linkingFlag && assetNameList.contains(assetDetails.getAssetId()) && !prflag) { // don't put assets which are included in Invoice and put when prflag is false
                                    continue;
                                }

                                assetDetailsJOBJ.put("assetId", assetDetails.getId());
                            } else {
                                assetDetailsJOBJ.put("assetId", assetDetails.getAssetId());
                            }

                            assetDetailsJOBJ.put("assetdetailId", assetDetails.getId());
                            assetDetailsJOBJ.put("assetName", assetDetails.getAssetId());
                            assetDetailsJOBJ.put("assetdescription", assetDetails.getAssetDescription()!=null?assetDetails.getAssetDescription():"");
                            assetDetailsJOBJ.put("location", (assetDetails.getLocation() != null) ? assetDetails.getLocation().getId() : "");
                            assetDetailsJOBJ.put("department", (assetDetails.getDepartment() != null) ? assetDetails.getDepartment().getId() : "");
                            assetDetailsJOBJ.put("assetUser", (assetDetails.getAssetUser() != null) ? assetDetails.getAssetUser().getUserID() : "");
                            assetDetailsJOBJ.put("cost", assetDetails.getCost());
                            assetDetailsJOBJ.put("costInForeignCurrency", assetDetails.getCostInForeignCurrency());
                            assetDetailsJOBJ.put("salvageRate", assetDetails.getSalvageRate());
                            assetDetailsJOBJ.put("salvageValue", assetDetails.getSalvageValue());
                            assetDetailsJOBJ.put("salvageValueInForeignCurrency", assetDetails.getSalvageValueInForeignCurrency());
                            assetDetailsJOBJ.put("accumulatedDepreciation", assetDetails.getAccumulatedDepreciation());
                            assetDetailsJOBJ.put("assetLife", assetDetails.getAssetLife());
                            assetDetailsJOBJ.put("elapsedLife", assetDetails.getElapsedLife());
                            assetDetailsJOBJ.put("nominalValue", assetDetails.getElapsedLife());
                            assetDetailsJOBJ.put("batch", assetDetails.getBatch());
                            accGoodsReceiptCommon.addMachine(assetDetailsJOBJ,companyid);
                            boolean isDepreciationPosted = false;
                            HashMap<String, Object> assetParams = new HashMap<String, Object>();
                            assetParams.put("assetDetailsId", assetDetails.getId());
                            assetParams.put("companyid", companyid);

                            KwlReturnObject assDepreciationResult = accProductObj.getAssetDepreciationDetail(assetParams);
                            List assList = assDepreciationResult.getEntityList();

                            Iterator assIt = assList.iterator();
                            while (assIt.hasNext()) {
                                isDepreciationPosted = true;
                                break;
                            }
                            assetDetailsJOBJ.put("isDepreciationPosted", isDepreciationPosted);
                            Map<String, Object> variableMap = new HashMap<String, Object>();
                            AssetDetailsCustomData jeDetailCustom = (AssetDetailsCustomData) assetDetails.getAssetDetailsCustomData();
                            replaceFieldMap11 = new HashMap<String, String>();
                            if (jeDetailCustom != null) {
                                AccountingManager.setCustomColumnValues(jeDetailCustom, fieldMap1, replaceFieldMap11, variableMap);
                                JSONObject params = new JSONObject();
                                params.put("companyid", companyid);
                                params.put("getCustomFieldArray", true);
                                params.put(Constants.userdf,userDateFormat);
                                fieldDataManagercntrl.getLineLevelCustomData(variableMap, customFieldMap1, customDateFieldMap1, assetDetailsJOBJ, params);
                            }
                            if (rowProduct!=null && !StringUtil.isNullOrEmpty(rowProduct.getID())) {
                                Product product =rowProduct;// (Product) prodresult.getEntityList().get(0);;
                                isBatchForProduct = product.isIsBatchForProduct();
                                isSerialForProduct = product.isIsSerialForProduct();
                                isLocationForProduct = product.isIslocationforproduct();
                                isWarehouseForProduct = product.isIswarehouseforproduct();
                                isRowForProduct = product.isIsrowforproduct();
                                isRackForProduct = product.isIsrackforproduct();
                                isBinForProduct = product.isIsbinforproduct();
                                if(extraCompanyPreferences!=null && extraCompanyPreferences.getUomSchemaType()==Constants.PackagingUOM){
                                    obj.put("caseuom", (product.getPackaging()!=null && product.getPackaging().getCasingUoM()!=null)?product.getPackaging().getCasingUoM().getID():"");
                                    obj.put("caseuomvalue", (product.getPackaging()!=null && product.getPackaging().getCasingUoM()!=null)?product.getPackaging().getCasingUomValue():1);
                                    obj.put("inneruom", (product.getPackaging()!=null && product.getPackaging().getInnerUoM()!=null)?product.getPackaging().getInnerUoM().getID():"");
                                    obj.put("inneruomvalue", (product.getPackaging()!=null && product.getPackaging().getInnerUoM()!=null)?product.getPackaging().getInnerUomValue():1);
                                    obj.put("stockuom", (product.getUnitOfMeasure()!=null)?product.getUnitOfMeasure().getID():"");
                                }
                            }
                            if (preferences.isIsBatchCompulsory() || preferences.isIsSerialCompulsory() || preferences.isIslocationcompulsory() || preferences.isIswarehousecompulsory() || preferences.isIsrowcompulsory() || preferences.isIsrackcompulsory() || preferences.isIsbincompulsory()) {  //check if company level option is on then only we will check productt level
                                if (isBatchForProduct || isSerialForProduct || isSerialForProduct || isLocationForProduct || isWarehouseForProduct|| isRowForProduct || isRackForProduct  || isBinForProduct) {  //product level batch and serial no on or not
                                    assetDetailsJOBJ.put("batchdetails", getNewBatchJson(rowProduct, request, assetDetails.getId()));
                                }
                            }
                            assetDetailsJOBJ.put("installationDate", df.format(assetDetails.getInstallationDate()));
                            assetDetailsJOBJ.put("purchaseDate", df.format(assetDetails.getPurchaseDate()));
                            assetDetailsJArr.put(assetDetailsJOBJ);
                        }
                        obj.put("assetDetails", assetDetailsJArr.toString());
                    }
                    if (rowProduct!=null && !StringUtil.isNullOrEmpty(rowProduct.getID())) {
                        Product product = rowProduct;//(Product) prodresult.getEntityList().get(0);
                        isLocationForProduct = product.isIslocationforproduct();
                        isWarehouseForProduct = product.isIswarehouseforproduct();
                        isBatchForProduct = product.isIsBatchForProduct();
                        isSerialForProduct = product.isIsSerialForProduct();
                        isRowForProduct = product.isIsrowforproduct();
                        isRackForProduct = product.isIsrackforproduct();
                        isBinForProduct = product.isIsbinforproduct();
                    }
                    
                    obj.put("isLocationForProduct", isLocationForProduct);
                    obj.put("isWarehouseForProduct", isWarehouseForProduct);
                    obj.put("isBatchForProduct", isBatchForProduct);
                    obj.put("isSerialForProduct", isSerialForProduct);
                    obj.put("isBinForProduct", isBinForProduct);
                    obj.put("isRowForProduct", isRowForProduct);
                    obj.put("isRackForProduct", isRackForProduct);
                    obj.put("isWarehouseLocationsetCopyCase", false);
                    obj.put("warrantyperiod", rowProduct.getWarrantyperiod());
                    obj.put("warrantyperiodsal", rowProduct.getWarrantyperiodsal());

                    if ((preferences.isIsBatchCompulsory() || preferences.isIsSerialCompulsory() || preferences.isIslocationcompulsory() || preferences.isIswarehousecompulsory() || preferences.isIsrowcompulsory() || preferences.isIsrackcompulsory() || preferences.isIsbincompulsory()) && !isCopy) {  //check if company level option is on then only we will check productt level
                        if (isBatchForProduct || isSerialForProduct || isSerialForProduct || isLocationForProduct || isWarehouseForProduct || isRowForProduct || isRackForProduct  || isBinForProduct) {  //product level batch and serial no on or not
                            obj.put("batchdetails", getNewBatchJson(batchSerialReqMap, rowProduct, row.getID(), serialfieldMap, baMap, serialreplaceFieldMap, serialcustomFieldMap, serialcustomDateFieldMap));
                        }
                    }else if ((preferences.isIsBatchCompulsory() || preferences.isIsSerialCompulsory() || preferences.isIslocationcompulsory() || preferences.isIswarehousecompulsory() || preferences.isIsrowcompulsory() || preferences.isIsrackcompulsory() || preferences.isIsbincompulsory()) && isCopy) {  //check if company level option is on then only we will check productt level
                        if ((isLocationForProduct || isWarehouseForProduct || isRowForProduct || isRackForProduct || isBinForProduct) && !(isBatchForProduct || isSerialForProduct)) {  //product level batch and serial no on or not
                            obj.put("batchdetails", getNewBatchJson(batchSerialReqMap, rowProduct, row.getID(), serialfieldMap, baMap, serialreplaceFieldMap, serialcustomFieldMap, serialcustomDateFieldMap));
                        }
                    }
                    obj.put("dquantity", row.getDeliveredQuantity());
                    double baseuomrate = row.getInventory().getBaseuomrate();
                    if(row.getInventory().getUom()!=null) {
                        obj.put("baseuomid", row.getInventory().getProduct().getUnitOfMeasure()!=null?row.getInventory().getProduct().getUnitOfMeasure().getID():"");                        
                        obj.put("uomid", row.getInventory().getUom().getID());                        
                    } else {
                        obj.put("baseuomid", row.getInventory().getProduct().getUnitOfMeasure()!=null?row.getInventory().getProduct().getUnitOfMeasure().getID():"");                        
                        obj.put("uomid", row.getInventory().getProduct().getUnitOfMeasure()!=null?row.getInventory().getProduct().getUnitOfMeasure().getID():"");                        
                    }
                    obj.put("baseuomquantity", authHandler.calculateBaseUOMQuatity(row.getDeliveredQuantity(),baseuomrate, companyid));
                    obj.put("baseuomrate", baseuomrate);
                    obj.put("uomname", (row.getUom() != null)?row.getUom().getNameEmptyforNA():"");
                    obj.put("multiuom", rowProduct.isMultiuom());
                    obj.put("baseuomname", rowProduct.getUnitOfMeasure()==null?"":rowProduct.getUnitOfMeasure().getNameEmptyforNA());
                    obj.put("blockLooseSell", rowProduct.isblockLooseSell());
                    obj.put("uomschematypeid", rowProduct.getUomSchemaType() != null ? rowProduct.getUomSchemaType().getID() : "");
                    JSONObject jObj = null;
                    if (!StringUtil.isNullOrEmpty(extraCompanyPreferences.getColumnPref())) {
                        jObj = new JSONObject((String) extraCompanyPreferences.getColumnPref());
                        if (jObj.has(Constants.isDisplayUOM) && jObj.get(Constants.isDisplayUOM) != null && (Boolean) jObj.get(Constants.isDisplayUOM) != false) {
                            obj = accProductObj.getProductDisplayUOM(row.getInventory().getProduct(), row.getDeliveredQuantity(), baseuomrate, true, obj);
                        }
                    }
                    String productsBaseUomId = (rowProduct.getUnitOfMeasure() == null)?"":rowProduct.getUnitOfMeasure().getID();
                    String selectedUomId = (row.getUom() != null)?row.getUom().getID():"";
                    
                    if (rowProduct.isblockLooseSell() && !productsBaseUomId.equals(selectedUomId)) {
                        // Get Available Quantity of Product For Selected UOM

                        KwlReturnObject qtyResult = accProductObj.getAvailableQuantityInSelectedUOM(rowProduct.getID(), selectedUomId);
                        double availableQuantity = qtyResult.getEntityList().get(0) == null ? 0 : (Double) qtyResult.getEntityList().get(0);
                        obj.put("availableQtyInSelectedUOM", availableQuantity);
                        obj.put("isAnotherUOMSelected", true);
                        
                        // Getting Open PO/SO count
                        
                        HashMap<String, Object> orderParams=new HashMap<String, Object>();            
                        orderParams.put("companyid", companyid);
                        orderParams.put("gcurrencyid", gcurrencyid);
                        orderParams.put("df", authHandler.getDateOnlyFormat());            
                        orderParams.put("pendingapproval", false);
                        orderParams.put("startdate" ,authHandler.getDates(preferences.getFinancialYearFrom(), true));
                        orderParams.put("enddate" ,authHandler.getDates(preferences.getFinancialYearFrom(), false));
                        orderParams.put("currentuomid" ,selectedUomId);
                        orderParams.put("productId" ,rowProduct.getID());
                        
                        double pocountinselecteduom = accSalesOrderServiceDAOobj.getPOCount(orderParams);
                        
                        double socountinselecteduom = accSalesOrderServiceDAOobj.getSOCount(orderParams);
                        
                        obj.put("pocountinselecteduom", pocountinselecteduom);
                        obj.put("socountinselecteduom", socountinselecteduom);

                    } else {
                        /**
                         * If isblockLooseSell check from company preference is false then get the actual quantity of product.
                         */
                        KwlReturnObject Qtyresult = accProductObj.getQuantity(rowProduct.getID());
                        obj.put("availableQtyInSelectedUOM", (Qtyresult.getEntityList().get(0) == null ? 0 : Qtyresult.getEntityList().get(0)));
                    }
                    
                    obj.put("rate", row.getRate());
                    obj.put("priceSource", row.getPriceSource() != null? row.getPriceSource() : "");
                    if (row.getPricingBandMasterid() != null) {
                        KwlReturnObject PricebandResult = accountingHandlerDAOobj.getObject(PricingBandMaster.class.getName(), row.getPricingBandMasterid());
                        PricingBandMaster pricingBandMaster = PricebandResult != null ? (PricingBandMaster) PricebandResult.getEntityList().get(0) : null;
                        obj.put("pricingbandmasterid", pricingBandMaster != null ? pricingBandMaster.getID() : "");
                        obj.put("pricingbandmastername", pricingBandMaster != null ? pricingBandMaster.getName() : "");
                    }
                    obj.put("rateIncludingGst", authHandler.roundUnitPrice(row.getRateincludegst(), companyid));
                    
                    if (!linkingFlag) {
                        if (row.getVidetails() != null) {
                            obj.put("linkto", row.getVidetails().getGoodsReceipt().getGoodsReceiptNumber());
                            obj.put("linkid", row.getVidetails().getGoodsReceipt().getID());
                            /*
                                 ERM-1037
                                 Field used for comparing dates to restrict linking of future doument date in Goods Receipt Order document editing
                             */
                            obj.put("linkDate", row.getVidetails().getGoodsReceipt().getCreationDate());
                            obj.put("rowid", row.getVidetails().getID());
                            obj.put("savedrowid", row.getVidetails().getID());
                            obj.put("docrowid", row.getID());
                            obj.put("linktype", 1);
                        } else if (row.getPodetails() != null) {
                            obj.put("linkto", row.getPodetails().getPurchaseOrder().getPurchaseOrderNumber());
                            obj.put("linkid", row.getPodetails().getPurchaseOrder().getID());
                            /*
                                 ERM-1037
                                 Field used for comparing dates to restrict linking of future doument date in Goods Receipt Order document editing
                             */
                            obj.put("linkDate", row.getPodetails().getPurchaseOrder().getOrderDate());
                            obj.put("rowid", row.getPodetails().getID());
                            obj.put("savedrowid", row.getPodetails().getID());
                            obj.put("docrowid", row.getID());
                            obj.put("linktype", 0);
                        }else if (row.getSecuritydetails() != null) {
                            /*
                             * while security gate entry is linking to goods receipt 
                             * then display no in goods receipt form
                             */
                            obj.put("linkto", row.getSecuritydetails().getSecurityGateEntry().getSecurityNumber());
                            obj.put("linkid", row.getSecuritydetails().getSecurityGateEntry().getID());
                            /*
                                 ERM-1037
                                 Field used for comparing dates to restrict linking of future doument date in Goods Receipt Order document editing
                             */
                            obj.put("linkDate", row.getSecuritydetails().getSecurityGateEntry().getSecurityDate());
                            obj.put("rowid", row.getSecuritydetails().getID());
                            obj.put("savedrowid", row.getSecuritydetails().getID());
                            obj.put("docrowid", row.getID());
                            obj.put("linktype", 3);
                        } else {
                                obj.put("linkto", "");
                                obj.put("linkid", "");
                                obj.put("linktype", -1);
                        }
                    }
                    
                    obj.put("description", StringUtil.DecodeText(description));
                    obj.put("remark", row.getRemark());
                    obj.put("partno", (row.getPartno()!=null) ? row.getPartno() : "" );
                    obj.put("discountispercent", row.getDiscountispercent());
                    obj.put("prdiscount", row.getDiscount());
                    obj.put("copyquantity", row.getDeliveredQuantity());
                    obj.put("recTermAmount", row.getRowTermAmount());
                    obj.put("OtherTermNonTaxableAmount", row.getOtherTermNonTaxableAmount());
                    if (extraCompanyPreferences.getLineLevelTermFlag()==1) {
                        JSONArray dateTermMap = accGoodsReceiptobj.getGRODetailsTermMap(row.getID());
                        obj.put("LineTermdetails", dateTermMap.toString());
                        if (row.getCompany().getCountry().getID().equalsIgnoreCase("" + Constants.indian_country_id)) {
                            /**
                             * Put GST Tax Class History.
                             */
                            obj.put("refdocid", row.getID());
                            fieldDataManagercntrl.getGSTTaxClassHistory(obj);
                        }

                    }
                    Map<String, Object> variableMap = new HashMap<String, Object>();
                    GoodsReceiptOrderDetailsCustomDate goodsReceiptOrderDetailsCustomDate = (GoodsReceiptOrderDetailsCustomDate) row.getGoodsReceiptOrderDetailsCustomDate();
                    HashMap<String, String> replaceFieldMap = new HashMap<String, String>();
                    AccountingManager.setCustomColumnValues(goodsReceiptOrderDetailsCustomDate, fieldMap, replaceFieldMap, variableMap);
                    if (goodsReceiptOrderDetailsCustomDate != null) {
                        JSONObject params = new JSONObject();
                        params.put("isExport", isExport);
                        params.put("isForReport", isForReport);
                        params.put(Constants.userdf,userDateFormat);
                         /*--- generateInvoiceFromTransactionForms ->Flag is true if invoice is generated from GR form------*/
                        boolean generateInvoiceFromTransactionForms = (StringUtil.isNullOrEmpty(request.getParameter("generateInvoiceFromTransactionForms"))) ? false : Boolean.parseBoolean(request.getParameter("generateInvoiceFromTransactionForms"));
                        if (linkingFlag || srflag || FA_DOGRlinkFlag || generateInvoiceFromTransactionForms) {
                            int moduleId = isFixedAsset ? Constants.Acc_FixedAssets_PurchaseInvoice_ModuleId : srflag?Constants.Acc_Purchase_Return_ModuleId: Constants.Acc_Vendor_Invoice_ModuleId;
                            if(isConsignment){
                                moduleId=Constants.Acc_ConsignmentPurchaseReturn_ModuleId;
                            }else if(FA_DOGRlinkFlag){
                                moduleId=Constants.Acc_FixedAssets_Purchase_Return_ModuleId;
                            }
                            params.put("linkModuleId", moduleId);
                            params.put("isLink", true);
                            params.put("companyid", companyid);
                        }
                        fieldDataManagercntrl.getLineLevelCustomData(variableMap, customFieldMap, customDateFieldMap, obj, params);
                    }
                    
                    // Get Product level Custom field data
                    HashMap<String, Object> fieldParams = new HashMap();
                    HashMap<String, String> customProductFieldMap = new HashMap<String, String>();
                    HashMap<String, String> customProductDateFieldMap = new HashMap<String, String>();
                    Map<String, Object> variableMapProduct = new HashMap<String, Object>();
                    fieldParams.put(Constants.filter_names, Arrays.asList(Constants.companyid, Constants.moduleid, Constants.customcolumn));
                    fieldParams.put(Constants.filter_values, Arrays.asList(companyid, Constants.Acc_Product_Master_ModuleId, 0));
                    HashMap<String, String> replaceFieldMapProduct = new HashMap<String, String>();
                    HashMap<String, Integer> FieldMapProduct = accAccountDAOobj.getFieldParamsCustomMapForRows(fieldParams, replaceFieldMapProduct, customProductFieldMap, customProductDateFieldMap);
                    GoodsReceiptOrderProductCustomData GRODetailProductCustomData = (GoodsReceiptOrderProductCustomData) row.getGroProductcustomdata();
                    AccountingManager.setCustomColumnValues(GRODetailProductCustomData, FieldMapProduct, replaceFieldMapProduct, variableMapProduct);
                    
                     if (GRODetailProductCustomData != null) {
                         JSONObject params = new JSONObject();
                        if (isForReport) {
                            params.put("isForReport", isForReport);
                        }
                        params.put("isExport", isExport);
                        params.put(Constants.userdf,userDateFormat);
                        fieldDataManagercntrl.getLineLevelCustomData(variableMapProduct, customProductFieldMap, customProductDateFieldMap, obj, params);
                    }
                    double quantity =0.0;
                    double invoiceRowProductQty = authHandler.calculateBaseUOMQuatity(row.getDeliveredQuantity(), baseuomrate, companyid);
                    double remainedQty = invoiceRowProductQty;// which has not been linked yet
                    if (closeflag) {
                         if (srflag) {
                                quantity = getGoodsReceiptOrderDetailStatusForPR(row);
                            } else {
                                quantity = getGoodsReceiptOrderDetailStatus(row);
                            } 
                        obj.put("quantity", quantity);
                        obj.put("dquantity", quantity);
                        obj.put("baseuomquantity", authHandler.calculateBaseUOMQuatity(quantity,baseuomrate, companyid));
                        obj.put("baseuomrate", baseuomrate);
                        
                        remainedQty = authHandler.calculateBaseUOMQuatity(quantity,baseuomrate, companyid);
                        
                    } else {
                        obj.put("quantity", row.getActualQuantity());
                        obj.put("baseuomquantity", authHandler.calculateBaseUOMQuatity(row.getDeliveredQuantity(),baseuomrate, companyid));
                        obj.put("baseuomrate", baseuomrate);
                        
                        
                    }
                    obj.put("prtaxid", (row.getTax() != null) ? row.getTax().getID() : "None");
                    obj.put(Constants.isUserModifiedTaxAmount, row.isIsUserModifiedTaxAmount());
//                    obj.put("prtaxid", row.getTax() != null ? (isCopy || linkingFlag ? (row.getTax().isActivated() ? row.getTax().getID() : "") : row.getTax().getID()) : "None");//ERP-38656
                    obj.put("taxamount", row.getRowTaxAmount());
                    obj.put("rowTaxAmount", row.getRowTaxAmount());
                    double rowTaxPercent = 0;
                    
                    
                    if (row.getTax() != null) {

                        KwlReturnObject perresult = accTaxObj.getTaxPercent((String) requestParams.get("companyid"), row.getGrOrder().getOrderDate(), row.getTax().getID());
                        rowTaxPercent = (Double) perresult.getEntityList().get(0);
                        double rowTaxAmount = row.getRowTaxAmount();
                        double taxAmt = (rowTaxAmount / invoiceRowProductQty) * remainedQty;
                        obj.put("taxamount", taxAmt);
                        obj.put("rowTaxAmount", taxAmt);
                    }
                    obj.put("rowTaxPercent", rowTaxPercent);
                    if (closeflag && (srflag || isForLinking)) {  //in Purchase return & invoice, We do not show the row which is already used
                        if (remainedQty > 0) {
                            jArr.put(obj);
                        }
                    } else {
                        jArr.put(obj);
                    }
                }
                }
                i++;
                jobj.put("data", jArr);
            }
        } catch (JSONException je) {
            throw ServiceException.FAILURE(je.getMessage(), je);
        }
        return jobj;
    }

    public String getBatchJson(ProductBatch productBatch, HttpServletRequest request,boolean isbatch,boolean isBatchForProduct,boolean isserial,boolean isSerialForProduct) throws ServiceException, SessionExpiredException, JSONException {
        JSONArray jSONArray = new JSONArray();
        DateFormat df = authHandler.getDateOnlyFormat();
       HashMap<String, Object> filterRequestParams = new HashMap<String, Object>();
        ArrayList filter_names = new ArrayList(), filter_params = new ArrayList();
        filter_names.add("batch.id");
        filter_params.add(productBatch.getId());
        
        filter_names.add("company.companyID");
        filter_params.add(sessionHandlerImpl.getCompanyid(request));
        
        filterRequestParams.put("filter_names", filter_names);
        filterRequestParams.put("filter_params", filter_params);
        KwlReturnObject kmsg = accCommonTablesDAO.getSerialForBatch(filterRequestParams);
        String purchasebatchid=accCommonTablesDAO.getPurchaseBatchId(productBatch.getId());
        if (StringUtil.isNullOrEmpty(purchasebatchid)) {
            purchasebatchid = productBatch.getId();
        }
        List list = kmsg.getEntityList();
        Iterator iter = list.iterator();
        int i = 1;
        while (iter.hasNext()) {
            BatchSerial batchSerial = (BatchSerial) iter.next();
            JSONObject obj = new JSONObject();
            if (i == 1) {
                obj.put("id", productBatch.getId());
                obj.put("batch", productBatch.getName());
                obj.put("batchname", productBatch.getName());
                obj.put("location", productBatch.getLocation().getId());
                obj.put("warehouse", productBatch.getWarehouse().getId());
                obj.put("mfgdate", productBatch.getMfgdate()!=null?authHandler.getDateOnlyFormat().format(productBatch.getMfgdate()):"");
                obj.put("expdate",productBatch.getExpdate()!=null?authHandler.getDateOnlyFormat().format(productBatch.getExpdate()):"");
                obj.put("quantity", productBatch.getQuantity());
                obj.put("balance", productBatch.getBalance());
                obj.put("asset", productBatch.getAsset());
            } else {
                obj.put("id", "");
                obj.put("batch","");
                obj.put("batchname","");
                obj.put("location","");
                obj.put("warehouse","");
                obj.put("mfgdate", "");
                obj.put("expdate", "");
                obj.put("quantity", "");
                obj.put("balance","");
            }
            i++;
            String purchaseserialid=accCommonTablesDAO.getPurchaseSerialId(batchSerial.getId());
            obj.put("serialnoid", batchSerial.getId());
            obj.put("serialno", batchSerial.getName());
            if (!StringUtil.isNullOrEmpty(purchasebatchid)) {
                obj.put("purchasebatchid", purchasebatchid);
            }
            if (StringUtil.isNullOrEmpty(purchaseserialid)) {
                purchaseserialid = batchSerial.getId();
             }
            if (!StringUtil.isNullOrEmpty(purchaseserialid)) {
                obj.put("purchaseserialid", purchaseserialid);

            }
            obj.put("expstart",batchSerial.getExpfromdate()!=null?authHandler.getDateOnlyFormat().format(batchSerial.getExpfromdate()):"");
            obj.put("expend", batchSerial.getExptodate()!=null?authHandler.getDateOnlyFormat().format(batchSerial.getExptodate()):"");
            jSONArray.put(obj);

        }

      if (isBatchForProduct &&  !isSerialForProduct) //only in batch case
        {
            JSONObject Jobj = new JSONObject();
            Jobj = getOnlyBatchDetail(productBatch, request);
            if(!StringUtil.isNullOrEmpty(purchasebatchid)){
              Jobj.put("purchasebatchid", purchasebatchid);
            }
            jSONArray.put(Jobj);
        }
        return jSONArray.toString();
    } 
     
    public String getNewBatchJson(Product product, HttpServletRequest request, String documentid) throws ServiceException, SessionExpiredException, JSONException {
        JSONArray jSONArray = new JSONArray();
        DateFormat df = authHandler.getDateOnlyFormat();
        KwlReturnObject kmsg = null;
        boolean linkingFlag = (StringUtil.isNullOrEmpty(request.getParameter("linkingFlag")))?false:Boolean.parseBoolean(request.getParameter("linkingFlag"));
        boolean isEdit=(StringUtil.isNullOrEmpty(request.getParameter("isEdit")))?false:Boolean.parseBoolean(request.getParameter("isEdit"));
        String moduleID=request.getParameter("moduleid");
          boolean isBatch=false;
        if (!product.isIsBatchForProduct() && !product.isIslocationforproduct() && !product.isIswarehouseforproduct() && !product.isIsrowforproduct() && !product.isIsrackforproduct() && !product.isIsbinforproduct() && product.isIsSerialForProduct()) {
            kmsg = accCommonTablesDAO.getOnlySerialDetails(documentid,linkingFlag,moduleID,false,isEdit);
        } else {
             isBatch=true;
            kmsg = accCommonTablesDAO.getBatchSerialDetails(documentid,!product.isIsSerialForProduct(),linkingFlag,moduleID,false,isEdit,"");
        }
        HashMap<String, Object> fieldrequestParams = new HashMap();
          fieldrequestParams.put(Constants.filter_names, Arrays.asList(Constants.companyid, Constants.moduleid, Constants.customcolumn));
          fieldrequestParams.put(Constants.filter_values, Arrays.asList(sessionHandlerImpl.getCompanyid(request), Constants.SerialWindow_ModuleId, 1));
          HashMap<String, String> customFieldMap = new HashMap<String, String>();
          HashMap<String, String> customDateFieldMap = new HashMap<String, String>();
          HashMap<String, String> replaceFieldMap1 = new HashMap<String, String>();
          HashMap<String, Integer> fieldMap = accAccountDAOobj.getFieldParamsCustomMapForRows(fieldrequestParams, replaceFieldMap1, customFieldMap, customDateFieldMap);
        double ActbatchQty = 1;
        double batchQty = 0;
        List batchserialdetails = kmsg.getEntityList();
        Iterator iter = batchserialdetails.iterator();
        while (iter.hasNext()) {
            Object[] objArr = (Object[]) iter.next();
            JSONObject obj = new JSONObject();
            obj.put("id", objArr[0] != null ? (String) objArr[0] : "");
            obj.put("batch", objArr[1] != null ? (String) objArr[1] : "");
            obj.put("batchname", objArr[1] != null ? (String) objArr[1] : "");
            obj.put("location", objArr[2] != null ? (String) objArr[2] : "");
            obj.put("warehouse", objArr[3] != null ? (String) objArr[3] : "");
           if (isBatch){
                obj.put("row", objArr[15] != null ? (String) objArr[15] : "");
                obj.put("rack", objArr[16] != null ? (String) objArr[16] : "");
                obj.put("bin", objArr[17] != null ? (String) objArr[17] : "");
         }
           String locationid="";
           String warehouseid="";
           String batchid=(String)objArr[0];
         if(objArr[2] != null){
             locationid=(String)objArr[2];
         }  
        if(objArr[3] != null){
             warehouseid=(String)objArr[3];
         }
        double quantity = getNewBatchRemainingQuantity(locationid, warehouseid,sessionHandlerImpl.getCompanyid(request),product.getID(), batchid,moduleID,isEdit,documentid);
         obj.put("avlquantity", quantity);
            if ((product.isIsBatchForProduct() || product.isIslocationforproduct() || product.isIswarehouseforproduct() || product.isIsrowforproduct() || product.isIsrackforproduct() || product.isIsbinforproduct()) && product.isIsSerialForProduct()) {
                ActbatchQty=accCommonTablesDAO.getBatchQuantity(documentid,(String)objArr[0]);

                if (batchQty == 0) {
                    batchQty = ActbatchQty;
                }
                if (batchQty == ActbatchQty) {
                    obj.put("isreadyonly", false);
                     obj.put("quantity", ActbatchQty);
                } else {
                    obj.put("isreadyonly", true);
                    obj.put("quantity", "");
                }

            } else {
                obj.put("isreadyonly", false);
                obj.put("quantity", ActbatchQty);
            }
            if (!product.isIsBatchForProduct() && !product.isIslocationforproduct() && !product.isIswarehouseforproduct() && !product.isIsrowforproduct() && !product.isIsrackforproduct() && !product.isIsbinforproduct() && product.isIsSerialForProduct()) {
                obj.put("mfgdate", "");
                obj.put("expdate", "");
            } else {
                obj.put("mfgdate", objArr[4] != null ? df.format(objArr[4]) : "");
                obj.put("expdate", objArr[5] != null ? df.format(objArr[5]) : "");
            }

           
            if ((product.isIsBatchForProduct() || product.isIslocationforproduct() || product.isIswarehouseforproduct() || product.isIsrowforproduct() || product.isIsrackforproduct() || product.isIsbinforproduct()) && !product.isIsSerialForProduct()) {
                obj.put("quantity", objArr[11] != null ? objArr[11] : "");
             }

            obj.put("balance", 0);
            obj.put("asset", "");
            obj.put("serialnoid", objArr[7] != null ? (String) objArr[7] : "");
            obj.put("serialno", objArr[8] != null ? (String) objArr[8] : "");
            obj.put("purchasebatchid", objArr[0] != null ? (String) objArr[0] : "");
            obj.put("purchaseserialid", objArr[7] != null ? (String) objArr[7] : "");
            obj.put("expstart", (objArr[9] != null && !objArr[9].toString().equalsIgnoreCase("")) ? df.format(objArr[9]) : "");
            obj.put("expend", (objArr[10] != null && !objArr[10].toString().equalsIgnoreCase(""))  ? df.format(objArr[10]) : "");
            obj.put("skufield", objArr[13] != null ? objArr[13] : "");
            obj.put("documentid", documentid != null ? documentid : "");
            obj.put("productid", product != null ? product.getID() : "");
            
            if(linkingFlag && !isEdit ){ //For geting only unused Serial batch details in DO
                if(product.isIsSerialForProduct() && objArr[7] != null ){
                    KwlReturnObject result1 = accountingHandlerDAOobj.getObject(NewBatchSerial.class.getName(), objArr[7].toString());
                    NewBatchSerial newBatchSerial = (NewBatchSerial) result1.getEntityList().get(0);
                    if(newBatchSerial != null && newBatchSerial.getQuantitydue()==0){
                        continue;
                    }
                }else if(product.isIsBatchForProduct() && ! product.isIsSerialForProduct() && objArr[0] != null){
                    KwlReturnObject result1 = accountingHandlerDAOobj.getObject(NewProductBatch.class.getName(), objArr[0].toString());
                    NewProductBatch newProductBatch = (NewProductBatch) result1.getEntityList().get(0);
                    if(newProductBatch !=null && newProductBatch.getQuantitydue()==0){
                        continue;
                    }
                }
            }
            if (objArr[14] != null && !objArr[14].toString().equalsIgnoreCase("")) {    //Get SerialDocumentMappingId
                KwlReturnObject result1 = accountingHandlerDAOobj.getObject(SerialDocumentMapping.class.getName(), objArr[14].toString());
                SerialDocumentMapping sdm = (SerialDocumentMapping) result1.getEntityList().get(0);
                Map<String, Object> variableMap = new HashMap<String, Object>();
                SerialCustomData serialCustomData = (SerialCustomData) sdm.getSerialCustomData();
                HashMap<String, String> replaceFieldMap = new HashMap<String, String>();
                AccountingManager.setCustomColumnValues(serialCustomData, fieldMap, replaceFieldMap, variableMap);
                DateFormat defaultDateFormat=new SimpleDateFormat(Constants.MMMMdyyyy);
                        Date dateFromDB=null;
                for (Map.Entry<String, Object> varEntry : variableMap.entrySet()) {
                    String coldata = varEntry.getValue().toString();
                    String valueForReport = "";
                    if (customFieldMap.containsKey(varEntry.getKey()) && coldata != null) {
                        try {
                            String[] valueData = coldata.split(",");
                            for (String value : valueData) {
                                FieldComboData fieldComboData = (FieldComboData) kwlCommonTablesDAOObj.getClassObject(FieldComboData.class.getName(), value);
                                if (fieldComboData != null) {
                                      valueForReport += value + ",";
                                }
                            }
                            if (valueForReport.length() > 1) {
                                valueForReport = valueForReport.substring(0, valueForReport.length() - 1);
                            }
                            obj.put(varEntry.getKey(), valueForReport);//fieldComboData.getValue()!=null ?fieldComboData.getValue():"");
                        } catch (Exception ex) {
                            obj.put(varEntry.getKey(), coldata);
                        }
                    } else if (customDateFieldMap.containsKey(varEntry.getKey())) {
                        DateFormat df2 = new SimpleDateFormat("yyyy-MM-dd");
                        try {
                            dateFromDB = defaultDateFormat.parse(coldata);
                            coldata = df2.format(dateFromDB);
                            //This code change is made because date will not be long value now,it will be date in String form refer ERP-32324 
                        } catch (Exception e) {
                        }
                        obj.put(varEntry.getKey(), coldata);

                    } else {
                        if (!StringUtil.isNullOrEmpty(coldata)) {
                            obj.put(varEntry.getKey(), coldata);
                        }
                    }
                }
            }
            jSONArray.put(obj);
            batchQty--;

        }


        return jSONArray.toString();
    }
     private double getNewBatchRemainingQuantity(String locationid, String warehouseid, String companyId, String productid, String purchasebatchid, String transType,boolean isEdit,String documentid) throws ServiceException {
        double quantity = 0.0;
        double srquantity = 0.0;
        try {
            HashMap<String, Object> filterRequestParams = new HashMap<String, Object>();
            HashMap<String, Object> filterRequestParamsforEdit = new HashMap<String, Object>();
            ArrayList filter_names = new ArrayList(), filter_params = new ArrayList(), order_by = new ArrayList(), order_type = new ArrayList();
            ArrayList filter_namesforEdit = new ArrayList(), filter_paramsforEdit = new ArrayList(), order_byforEdit = new ArrayList(), order_typeforEdit = new ArrayList();
            filter_names.add("company.companyID");
            filter_params.add(companyId);

            if (!StringUtil.isNullOrEmpty(warehouseid)) {
                filter_names.add("warehouse.id");
                filter_params.add(warehouseid);
            }
            if (!StringUtil.isNullOrEmpty(locationid)) {
                filter_names.add("location.id");
                filter_params.add(locationid);
            }
            if (!StringUtil.isNullOrEmpty(purchasebatchid)) {
                filter_names.add("id");
                filter_params.add(purchasebatchid);
            }

            filter_names.add("product");
            filter_params.add(productid);

            filterRequestParams.put("filter_names", filter_names);
            filterRequestParams.put("filter_params", filter_params);
            filterRequestParams.put("order_by", order_by);
            filterRequestParams.put("order_type", order_type);
            KwlReturnObject result = accMasterItemsDAOobj.getNewBatches(filterRequestParams,false,false);
            int inttransType = 0;
            if (!StringUtil.isNullOrEmpty(transType)) {
                inttransType = Integer.parseInt(transType);
            }
            List listResult = result.getEntityList();
            Iterator itrResult = listResult.iterator();
            while (itrResult.hasNext()) {
                NewProductBatch newProductBatch = (NewProductBatch) itrResult.next();
                HashMap<String, Object> filterParamsForPRBatch = new HashMap<String, Object>();
                ArrayList PRfilter_names = new ArrayList(), PRfilter_params = new ArrayList();
                if (inttransType == Constants.Acc_Sales_Return_ModuleId) {
                    PRfilter_names.add("ispurchasereturn");
                    PRfilter_params.add(false);
                    PRfilter_names.add("transactiontype");
                    PRfilter_params.add(27);
                    PRfilter_names.add("batchmapid.id");
                    PRfilter_params.add(newProductBatch.getId());
                    filterParamsForPRBatch.put("filter_names", PRfilter_names);
                    filterParamsForPRBatch.put("filter_params", PRfilter_params);
                    KwlReturnObject PRresult = accMasterItemsDAOobj.getPRBatchQuantity(filterParamsForPRBatch);
                    List locationResult = PRresult.getEntityList();
                    Iterator LocitrResult = locationResult.iterator();
                    while (LocitrResult.hasNext()) {
                        LocationBatchDocumentMapping locationBatchDocumentMapping = (LocationBatchDocumentMapping) LocitrResult.next();
                        quantity = quantity + locationBatchDocumentMapping.getQuantity();
                    }
                    //for Sales return we are showing those quantity whose DO has been made
                    HashMap<String, Object> filterParamsForSRBatch = new HashMap<String, Object>();
                    ArrayList SRfilter_names = new ArrayList(), SRfilter_params = new ArrayList();
                    SRfilter_names.add("ispurchasereturn");
                    SRfilter_params.add(false);
                    SRfilter_names.add("transactiontype");
                    SRfilter_params.add(29);
                    SRfilter_names.add("batchmapid.id");
                    SRfilter_params.add(newProductBatch.getId());
                    filterParamsForSRBatch.put("filter_names", SRfilter_names);
                    filterParamsForSRBatch.put("filter_params", SRfilter_params);
                    KwlReturnObject SRresult = accMasterItemsDAOobj.getPRBatchQuantity(filterParamsForSRBatch);
                    List SRLocResult = SRresult.getEntityList();
                    Iterator SRLocitrResult = SRLocResult.iterator();
                    while (SRLocitrResult.hasNext()) {
                        LocationBatchDocumentMapping locationBatchDocumentMapping = (LocationBatchDocumentMapping) SRLocitrResult.next();
                        srquantity = srquantity + locationBatchDocumentMapping.getQuantity();
                    }
                    quantity=quantity-srquantity;
                } else {


                    double dueQty = newProductBatch.getQuantitydue();
                    if (dueQty > 0) {
                        quantity = quantity + dueQty;
                    }
                }
            }
            if (isEdit && !StringUtil.isNullOrEmpty(documentid)) {

                if (!StringUtil.isNullOrEmpty(warehouseid)) {
                    filter_namesforEdit.add("batchmapid.warehouse.id");
                    filter_paramsforEdit.add(warehouseid);
                }
                if (!StringUtil.isNullOrEmpty(locationid)) {
                    filter_namesforEdit.add("batchmapid.location.id");
                    filter_paramsforEdit.add(locationid);
                }
                if (!StringUtil.isNullOrEmpty(purchasebatchid)) {
                    filter_namesforEdit.add("batchmapid.id");
                    filter_paramsforEdit.add(purchasebatchid);
                }
                if (!StringUtil.isNullOrEmpty(documentid)) {
                    filter_namesforEdit.add("documentid");
                    filter_paramsforEdit.add(documentid);
                }

                filter_namesforEdit.add("ispurchasereturn");
                if (inttransType == Constants.Acc_Purchase_Return_ModuleId || inttransType == Constants.Acc_ConsignmentPurchaseReturn_ModuleId) {
                    filter_paramsforEdit.add(true);
                } else {
                    filter_paramsforEdit.add(false);
                }
                filter_namesforEdit.add("transactiontype");
                filter_paramsforEdit.add(inttransType);

                filterRequestParamsforEdit.put("filter_names", filter_namesforEdit);
                filterRequestParamsforEdit.put("filter_params", filter_paramsforEdit);
                KwlReturnObject PRresult = accMasterItemsDAOobj.getPRBatchQuantity(filterRequestParamsforEdit);
                List locationResult = PRresult.getEntityList();
                Iterator LocitrResult = locationResult.iterator();
                while (LocitrResult.hasNext()) {
                    LocationBatchDocumentMapping locationBatchDocumentMapping = (LocationBatchDocumentMapping) LocitrResult.next();
                    quantity = quantity + locationBatchDocumentMapping.getQuantity();
                }
            }

        } catch (Exception ex) {
            Logger.getLogger(accGoodsReceiptControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
            throw ServiceException.FAILURE("accGoodsReceiptControllerCMN.getBatchRemainingQuantity() -: " + ex.getMessage(), ex);
        }
        return authHandler.roundQuantity(quantity,companyId);
    }
    public JSONObject getOnlyBatchDetail(ProductBatch productBatch, HttpServletRequest request) throws JSONException, SessionExpiredException {

        JSONObject obj = new JSONObject();
        obj.put("id", productBatch.getId());
        obj.put("batch", productBatch.getName());
        obj.put("batchname", productBatch.getName());
        obj.put("location", productBatch.getLocation().getId());
        obj.put("warehouse", productBatch.getWarehouse().getId());
        obj.put("mfgdate", productBatch.getMfgdate() != null ? authHandler.getDateOnlyFormat().format(productBatch.getMfgdate()) : "");
        obj.put("expdate", productBatch.getExpdate() != null ? authHandler.getDateOnlyFormat().format(productBatch.getExpdate()) : "");
        obj.put("quantity", productBatch.getQuantity());
        obj.put("balance", productBatch.getBalance());
        obj.put("asset", productBatch.getAsset());
        obj.put("expstart", "");
        obj.put("expend","");
        
        return obj;
    }
    public double getGoodsReceiptOrderDetailStatus(GoodsReceiptOrderDetails sod) throws ServiceException {
        double result = sod.getDeliveredQuantity(); //ERP-13865
        
        KwlReturnObject idresult = accGoodsReceiptobj.getIDFromGROD(sod.getID());
        List list = idresult.getEntityList();
        Iterator ite1 = list.iterator();
        double qua = 0;
        while (ite1.hasNext()) {
            GoodsReceiptDetail ge = (GoodsReceiptDetail) ite1.next();
            qua += ge.getInventory().getQuantity();
        }
         KwlReturnObject idresultpr =accGoodsReceiptobj.getIDFromPRD(sod.getID());
        List listpr = idresultpr.getEntityList();
        Iterator ite2 = listpr.iterator();
        double returnqua = 0;
        while (ite2.hasNext()) {
            PurchaseReturnDetail ge = (PurchaseReturnDetail) ite2.next();
            returnqua += ge.getInventory().getQuantity();
        }
        
        result = result - (qua+returnqua);
        return result;
    }
    
       public double getGoodsReceiptOrderDetailStatusForPR(GoodsReceiptOrderDetails sod) throws ServiceException {
        double result = sod.getDeliveredQuantity();
        
        KwlReturnObject idresult = accGoodsReceiptobj.getIDFromPRD(sod.getID());
        List list = idresult.getEntityList();
        Iterator ite1 = list.iterator();
        double qua = 0;
        while (ite1.hasNext()) {
            PurchaseReturnDetail ge = (PurchaseReturnDetail) ite1.next();
            qua += ge.getInventory().getQuantity();
        }
        result = result - qua;
        return result;
    } 
    
    
     public ModelAndView exportGoodsReceiptOrder(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        String view = "jsonView_ex";
        try{
            HashMap<String, Object> requestParams = getGoodsReceiptOrdersMap(request);
            boolean consolidateFlag = request.getParameter("consolidateFlag")!=null?Boolean.parseBoolean(request.getParameter("consolidateFlag")):false;            
            String companyid = (consolidateFlag && request.getParameter("companyids")!=null)?request.getParameter("companyids"):sessionHandlerImpl.getCompanyid(request);
            String gcurrencyid = (consolidateFlag && request.getParameter("gcurrencyid")!=null)?request.getParameter("gcurrencyid"):sessionHandlerImpl.getCurrencyID(request);                        
            String newVendorId = !StringUtil.isNullOrEmpty(request.getParameter("newcustomerid")) ? request.getParameter("newcustomerid") : "";
            request.setAttribute("companyid", companyid);
            request.setAttribute("gcurrencyid", gcurrencyid);
            request.setAttribute("newvendorid", newVendorId);
            requestParams.put("companyid", companyid);
            requestParams.put("gcurrencyid", gcurrencyid);
            request.setAttribute("isExport", true);
            requestParams.put("newvendorid", newVendorId);
             
            ExtraCompanyPreferences extraPref = (ExtraCompanyPreferences) kwlCommonTablesDAOObj.getClassObject("com.krawler.common.admin.ExtraCompanyPreferences", sessionHandlerImpl.getCompanyid(request));
            if (extraPref != null && extraPref.isEnablesalespersonAgentFlow()) {
                int permCode = sessionHandlerImpl.getPerms(request, Constants.VENDOR_PERMCODE);
                if (!((permCode & Constants.VENDOR_VIEWALL_PERMCODE) == Constants.VENDOR_VIEWALL_PERMCODE)) {
                    /*
                     * when (permCode & Constants.VENDOR_VIEWALL_PERMCODE) == Constants.VENDOR_VIEWALL_PERMCODE is true then user has permission to view all vendors documents,so at that time there is need to filter record according to user&agent. 
                     */
                    String userId = sessionHandlerImpl.getUserid(request);
                    requestParams.put("userid", userId);
                    requestParams.put("enablesalespersonagentflow", extraPref.isEnablesalespersonAgentFlow());
                }
            }
            boolean isUnInvoiced = request.getParameter("isUnInvoiced")!=null?Boolean.parseBoolean(request.getParameter("isUnInvoiced")):false;
            KwlReturnObject result = null;
            if (!isUnInvoiced)
            	result = accGoodsReceiptobj.getGoodsReceiptOrdersMerged(requestParams);
            else
            	result = accGoodsReceiptobj.getUnInvoicedGoodsReceiptOrders(requestParams);
            JSONObject requestJSON = StringUtil.convertRequestToJsonObject(request);
            requestJSON.put("getBrowserTZ", sessionHandlerImpl.getBrowserTZ(request));
            requestJSON.put(Constants.userdf,sessionHandlerImpl.getUserDateFormat(request));
            JSONArray jarr = accGoodsReceiptServiceHandler.getGoodsReceiptOrdersJsonMerged(requestJSON, result.getEntityList());
              if (request.getParameter("type") != null && request.getParameter("type").equals("detailedXls")) {
                    jarr = getDetailExcelJsonGoodsReceiptOrder(request, response, requestParams, jarr);
                }
            String fileType = request.getParameter("filetype");
            if (StringUtil.equal(fileType, "print")) {
                jarr = exportDaoObj.addTotalsForPrint(jarr, companyid);
            }
            jobj.put("data", jarr);
            if (StringUtil.equal(fileType, "print")) {
                String  GenerateDate = authHandler.getDateOnlyFormat().format(new Date());
                jobj.put("GenerateDate", GenerateDate);
                view = "jsonView-empty";
            }else if(fileType.equals("xls")){
             request.setAttribute("isSummaryXls", true);
            }
            exportDaoObj.processRequest(request, response, jobj);
        } catch (SessionExpiredException ex) {
            Logger.getLogger(accGoodsReceiptController.class.getName()).log(Level.SEVERE, null, ex);
        } catch(Exception ex) {
            Logger.getLogger(accGoodsReceiptController.class.getName()).log(Level.SEVERE, null, ex);
        }
        return new ModelAndView(view, "model", jobj.toString());
    }
      public JSONArray getDetailExcelJsonGoodsReceiptOrder(HttpServletRequest request, HttpServletResponse response, HashMap<String, Object> requestParams, JSONArray DataJArr) throws JSONException, SessionExpiredException, ServiceException, SessionExpiredException, SessionExpiredException {
        boolean consolidateFlag = request.getParameter("consolidateFlag") != null ? Boolean.parseBoolean(request.getParameter("consolidateFlag")) : false;
        String[] companyids = (consolidateFlag && request.getParameter("companyids") != null) ? request.getParameter("companyids").split(",") : sessionHandlerImpl.getCompanyid(request).split(",");
        JSONArray tempArray = new JSONArray();
        for (int i = 0; i < DataJArr.length(); i++) {
            try {
                JSONObject rowjobj = new JSONObject();
                rowjobj = DataJArr.getJSONObject(i);
                String billid = rowjobj.optString("billid", "");   //Invoice ID 
                request.setAttribute("billid",billid);
                JSONArray DataRowsArr = getGoodsReceiptOrderRows(request).getJSONArray("data");
                rowjobj.put("type","");
                tempArray.put(rowjobj);
                for (int j = 0; j < DataRowsArr.length(); j++) {
                    JSONObject tempjobj = new JSONObject();
                    tempjobj = DataRowsArr.getJSONObject(j);
                    exportDaoObj.editJsonKeyForExcelFile(tempjobj, Constants.Acc_Goods_Receipt_ModuleId);
                    tempArray.put(tempjobj);
                }
            } catch (SessionExpiredException | ServiceException | ParseException | UnsupportedEncodingException ex) {
                Logger.getLogger(accGoodsReceiptControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
            } 
        }
        return tempArray;
    }
     public JSONObject getForeignCurrencyExposureJsonObject(JSONObject dataObj, double minRate, double maxRate) throws JSONException {
        JSONObject jObj = new JSONObject();

        String companyid = dataObj.optString("companyid");
        Double amount = dataObj.getDouble("amount");
        Double oldcurrencyrate = dataObj.getDouble("oldcurrencyrate");
        Double externalcurrencyrate = dataObj.optDouble("externalcurrencyrate",0.0);
        if(externalcurrencyrate!=0){
            oldcurrencyrate=externalcurrencyrate;
        }
        Double amountinbase = dataObj.getDouble("amountinbase");

        jObj.put("companyid", dataObj.getString("companyid"));
        jObj.put("billid", dataObj.getString("billid"));
        jObj.put("companyname", dataObj.getString("companyname"));
        jObj.put("currencyid", dataObj.getString("currencyid"));
        jObj.put("costcenterid", dataObj.getString("costcenterid"));
        jObj.put("costcenterName", dataObj.getString("costcenterName"));
        jObj.put("deleted", dataObj.getBoolean("deleted"));

        jObj.put("personname", dataObj.getString("personname"));
        jObj.put("invoiceno", dataObj.getString("billno"));
        jObj.put("billno", dataObj.getString("billno"));
        jObj.put("date", dataObj.getString("date"));
        jObj.put("currencycode", dataObj.getString("currencyCode"));
        jObj.put("currencysymbol", dataObj.getString("currencysymbol"));
        jObj.put("amount", amount);
        jObj.put("oldcurrencyratetobase", dataObj.optString("exchangerate",""));
        jObj.put("amountinbase", amountinbase);

        if (minRate != 0.00) {
            double amountinbase1 = amount / minRate;
            jObj.put("amountinbase1", amountinbase1);
            jObj.put("netgainloss1", ( amountinbase1-amountinbase));
            jObj.put("netgainlosspercent1", authHandler.round((amountinbase1-amountinbase) / amountinbase * 100, companyid));
        }

        if (maxRate != 0.00) {
            double amountinbase2 = amount / maxRate;
            jObj.put("amountinbase2", amountinbase2);
            jObj.put("netgainloss2", (amountinbase2-amountinbase));
            jObj.put("netgainlosspercent2", authHandler.round((amountinbase2-amountinbase) / amountinbase * 100, companyid));
        }

        return jObj;

    }
     
     
     public ModelAndView exportForeignCurrencyExposureReport(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        String view = "jsonView_ex";
        try {
            JSONArray jArr = getForeignCurrencyExposureData(request);
            JSONObject dataObj = new JSONObject();
            dataObj.put(Constants.data, jArr);
            String fileType = request.getParameter("filetype");
            if (StringUtil.equal(fileType, "print")) {
                String GenerateDate = authHandler.getDateFormatter(request).format(new Date());
                dataObj.put("GenerateDate", GenerateDate);
                view = "jsonView-empty";
            }
            exportDaoObj.processRequest(request, response, dataObj);
        } catch (SessionExpiredException ex) {
            Logger.getLogger(accGoodsReceiptControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            Logger.getLogger(accGoodsReceiptControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
        }
        return new ModelAndView(view, "model", jobj.toString());
    }
     
     
    public ModelAndView getForeignCurrencyExposure(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        String msg = "";
        boolean issuccess = false;
        JSONArray jArr = new JSONArray();
        try {
            
            jArr = getForeignCurrencyExposureData(request);
            
            jobj.put("data", jArr);
            jobj.put("count", jArr.length());
            issuccess = true;
            
        } catch (Exception ex) {
            ex.printStackTrace();
            msg = "" + ex.getMessage();
            Logger.getLogger(accGoodsReceiptControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                jobj.put("success", issuccess);
                jobj.put("msg", msg);
            } catch (JSONException ex) {
                ex.printStackTrace();
                Logger.getLogger(accGoodsReceiptControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return new ModelAndView("jsonView", "model", jobj.toString());
    }
    
    public JSONArray getForeignCurrencyExposureData(HttpServletRequest request) {
        JSONArray DataJArr = new JSONArray();
        JSONArray jArr = new JSONArray();
        try {
            
            boolean consolidateFlag = request.getParameter("consolidateFlag") != null ? Boolean.parseBoolean(request.getParameter("consolidateFlag")) : false;
            String[] companyids = (consolidateFlag && request.getParameter("companyids") != null) ? request.getParameter("companyids").split(",") : sessionHandlerImpl.getCompanyid(request).split(",");
            String gcurrencyid = (consolidateFlag && request.getParameter("gcurrencyid") != null) ? request.getParameter("gcurrencyid") : sessionHandlerImpl.getCurrencyID(request);
            String currencyid = (request.getParameter(Constants.currencyKey) != null) ? request.getParameter(Constants.currencyKey) : "";
            double minRate = !StringUtil.isNullOrEmpty(request.getParameter("minrate")) ? Double.parseDouble(request.getParameter("minrate")) : 0.00;
            double maxRate = !StringUtil.isNullOrEmpty(request.getParameter("maxrate")) ? Double.parseDouble(request.getParameter("maxrate")) : 0.00;
            
            System.out.println("GoodsReceipt - currencyid:" + currencyid + "--minRate:" + minRate + "--maxRate:" + maxRate);
            
            HashMap requestParams = getGoodsReceiptMap(request);
            
            requestParams.put(Constants.currencyKey, currencyid);
            
            String companyid = "";
            String filteringCurrId = request.getParameter("currencyid");
            boolean filterOnCurrencyFlag = false;
            if (!StringUtil.isNullOrEmpty(filteringCurrId)) {
                filterOnCurrencyFlag = true;
            }
            
            for (int cnt = 0; cnt < companyids.length; cnt++) {
                companyid = companyids[cnt];
                request.setAttribute("companyid", companyid);
                request.setAttribute("gcurrencyid", gcurrencyid);
                requestParams.put("companyid", companyid);
                requestParams.put("gcurrencyid", gcurrencyid);
                requestParams.put("fceFlag", gcurrencyid);
                if (request.getParameter("minimumAmountDue") != null) {
                    requestParams.put("minimumAmountDue", Double.parseDouble(request.getParameter("minimumAmountDue").toString()));
                }
                KwlReturnObject result = accGoodsReceiptobj.getGoodsReceiptsMerged(requestParams);
                List list = result.getEntityList();
                DataJArr = accGoodsReceiptServiceHandler.getGoodsReceiptsJsonMerged(requestParams, list, DataJArr, accountingHandlerDAOobj, accCurrencyDAOobj, accGoodsReceiptobj, accAccountDAOobj, accGoodsReceiptCommon, accTaxObj);
            }
            
            if (request.getParameter("minimumAmountDue") != null) {
                JSONArray temp = new JSONArray();
                double minimumAmountDue = Double.parseDouble(request.getParameter("minimumAmountDue").toString());
                for (int i = 0; i < DataJArr.length(); i++) {
                    if (DataJArr.getJSONObject(i).getDouble("amountdue") >= minimumAmountDue) {
                        temp.put(DataJArr.getJSONObject(i));
                    }
                }
                DataJArr = temp;
            }
            JSONArray pagedJson = DataJArr;
            String start = request.getParameter("start");
            String limit = request.getParameter("limit");
            if (!StringUtil.isNullOrEmpty(start) && !StringUtil.isNullOrEmpty(limit)) {
                pagedJson = StringUtil.getPagedJSON(pagedJson, Integer.parseInt(start), Integer.parseInt(limit));
            }
            
            for (int i = 0; i < DataJArr.length(); i++) {
                JSONObject dataObj = DataJArr.getJSONObject(i);
                
                JSONObject jObj = new JSONObject();
                
                if (filterOnCurrencyFlag) {
                    if ((dataObj.getString("currencyid").equalsIgnoreCase(filteringCurrId))) {
                        jObj = getForeignCurrencyExposureJsonObject(dataObj, minRate, maxRate);
                        jArr.put(jObj);
                    }
                } else {
                    if (!(dataObj.getString("currencyid").equalsIgnoreCase(gcurrencyid))) {
                        jObj = getForeignCurrencyExposureJsonObject(dataObj, minRate, maxRate);
                        jArr.put(jObj);
                    }
                }
            }
            
        } catch (Exception ex) {
            Logger.getLogger(accGoodsReceiptControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
        }        
        return jArr;
    }

     class MessageSizeExceedingException extends Exception{

        String msg="";
        public MessageSizeExceedingException(String message) {
            this.msg=message.trim();
        }
    
        @Override
        public String toString(){
            String sizeExceedingMsg="552 4.3.1 Message size exceeds fixed maximum message size";
            
            if(sizeExceedingMsg.equalsIgnoreCase(this.msg)){
                 return ("Attached file(s) size is exceeding message size limit!");
            }else{
                return ("");
            }
                
        }                
    }
     
     public ModelAndView getPurchaseReturn(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj=new JSONObject();
        String msg = "";
        boolean issuccess = false;
        try {
            HashMap<String, Object> requestParams = getGoodsReceiptMap(request);
            boolean consolidateFlag = request.getParameter("consolidateFlag")!=null?Boolean.parseBoolean(request.getParameter("consolidateFlag")):false;            
            String companyid = (consolidateFlag && request.getParameter("companyids")!=null)?request.getParameter("companyids"):sessionHandlerImpl.getCompanyid(request);
            String gcurrencyid = (consolidateFlag && request.getParameter("gcurrencyid")!=null)?request.getParameter("gcurrencyid"):sessionHandlerImpl.getCurrencyID(request);                        
            String moduleid = StringUtil.isNullOrEmpty(request.getParameter("moduleid")) ? "" : request.getParameter("moduleid"); 
            requestParams.put("moduleid", moduleid);
            request.setAttribute("companyid", companyid);
            request.setAttribute("gcurrencyid", gcurrencyid);
            requestParams.put("companyid", companyid);
            requestParams.put("gcurrencyid", gcurrencyid);
            
            boolean isPurchaseReturnCreditNote = false;
            
            if(!StringUtil.isNullOrEmpty(request.getParameter("isNoteReturns"))) {
                isPurchaseReturnCreditNote = Boolean.parseBoolean(request.getParameter("isNoteReturns"));
            }
            
            requestParams.put("isPurchaseReturnCreditNote", isPurchaseReturnCreditNote);
            
            if(!StringUtil.isNullOrEmpty(request.getParameter("searchJson")))
            {
                requestParams.put("searchJson", request.getParameter("searchJson"));
                requestParams.put("moduleid", request.getParameter("moduleid"));
                requestParams.put("filterConjuctionCriteria", request.getParameter("filterConjuctionCriteria"));
            }
            if(!StringUtil.isNullOrEmpty(request.getParameter("linknumber"))){
                requestParams.put("linknumber", request.getParameter("linknumber"));
            }
            
             ExtraCompanyPreferences extraPref = (ExtraCompanyPreferences) kwlCommonTablesDAOObj.getClassObject("com.krawler.common.admin.ExtraCompanyPreferences", sessionHandlerImpl.getCompanyid(request));
            if (extraPref != null && extraPref.isEnablesalespersonAgentFlow()) {
                int permCode = sessionHandlerImpl.getPerms(request, Constants.VENDOR_PERMCODE);
                if (!((permCode & Constants.VENDOR_VIEWALL_PERMCODE) == Constants.VENDOR_VIEWALL_PERMCODE)) {
                    /*
                     * when (permCode & Constants.VENDOR_VIEWALL_PERMCODE) == Constants.VENDOR_VIEWALL_PERMCODE is true then user has permission to view all vendors documents,so at that time there is need to filter record according to user&agent. 
                     */
                    String userId = sessionHandlerImpl.getUserid(request);
                    requestParams.put("userid", userId);
                    requestParams.put("enablesalespersonagentflow", extraPref.isEnablesalespersonAgentFlow());
                }
            }
            if(!StringUtil.isNullOrEmpty(request.getParameter("linknumber"))){
                requestParams.put("linknumber", request.getParameter("linknumber"));
            }
             String dir = "";
            String sort = "";
            if (!StringUtil.isNullOrEmpty(request.getParameter("dir")) && !StringUtil.isNullOrEmpty(request.getParameter("sort"))) {
                dir = request.getParameter("dir");
                sort = request.getParameter("sort");
                requestParams.put("sort", sort);
                requestParams.put("dir", dir);
            }
            KwlReturnObject result = accGoodsReceiptobj.getPurchaseReturn(requestParams);
            JSONArray jarr = accGoodsReceiptServiceDAO.getPurchaseReturnJson(requestParams, result.getEntityList());            
            jobj.put("data", jarr);
            jobj.put("count", result.getRecordTotalCount());
            issuccess = true;
        } catch (Exception ex) {
            msg = "" + ex.getMessage();
            Logger.getLogger(accGoodsReceiptControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                jobj.put("success", issuccess);
                jobj.put("msg", msg);
            } catch (JSONException ex) {
                Logger.getLogger(accGoodsReceiptControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return new ModelAndView("jsonView", "model", jobj.toString());
    }
    
    
    
  public ModelAndView getPurchaseReturnRows(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj=new JSONObject();
        String msg = "";
        boolean issuccess = false;
        try {
            jobj = getPurchaseReturnRows(request);
            issuccess = true;
        } catch (SessionExpiredException | ServiceException ex) {
            msg = ex.getMessage();
            Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
        }  catch (Exception ex) {
            msg = "accGoodsReceiptControllerCMN.getPurchaseReturnRows:" + ex.getMessage();
            Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                jobj.put("success", issuccess);
                jobj.put("msg", msg);
            } catch (JSONException ex) {
                Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return new ModelAndView("jsonView", "model", jobj.toString());
    }
        
     public JSONObject getPurchaseReturnRows(HttpServletRequest request) throws SessionExpiredException, ServiceException, UnsupportedEncodingException {
        JSONObject jobj=new JSONObject();
        try {
            HashMap<String,Object> requestParams = new HashMap<String, Object>();
            DateFormat userDateFormat= (DateFormat) request.getAttribute(Constants.userdf);
            requestParams.put(Constants.userdf,userDateFormat);
            requestParams.put("companyid", sessionHandlerImpl.getCompanyid(request));
            requestParams.put("gcurrencyid", sessionHandlerImpl.getCurrencyID(request));
            boolean isBatchForProduct=false;
            boolean isSerialForProduct=false;
            boolean isLocationForProduct=false;
            boolean isWarehouseForProduct = false;
            boolean isRowForProduct = false;
            boolean isRackForProduct = false;
            boolean isBinForProduct = false;
            boolean isForReport = false;
            String description="";
            String dtype = request.getParameter("dtype");
            if (!StringUtil.isNullOrEmpty(dtype) && dtype.equals("report")) {
                isForReport = true;
            }
            boolean isExport = false;
            if (request.getAttribute("isExport") != null) {
                isExport = (boolean) request.getAttribute("isExport");
            }
            boolean isConsignment=(StringUtil.isNullOrEmpty(request.getParameter("isConsignment")))?false:Boolean.parseBoolean(request.getParameter("isConsignment"));
            boolean isFixedAsset = (!StringUtil.isNullOrEmpty(request.getParameter("isFixedAsset"))) ? Boolean.parseBoolean(request.getParameter("isFixedAsset")) : false;
            boolean isCopy = (!StringUtil.isNullOrEmpty(request.getParameter("copyInv"))) ? Boolean.parseBoolean(request.getParameter("copyInv")) : false;
            String[] sos = request.getParameter(BILLS)==null?null: (String[]) request.getParameter(BILLS).split(",");
            if (request.getAttribute("billid") != null) {
                sos = (String[]) (request.getAttribute("billid").toString()).split(",");
            }
            int i=0;
            JSONArray jArr=new JSONArray();
            int addobj = 1;
            KwlReturnObject extracap = accountingHandlerDAOobj.getObject(ExtraCompanyPreferences.class.getName(), sessionHandlerImpl.getCompanyid(request));
            ExtraCompanyPreferences extraCompanyPreferences = (ExtraCompanyPreferences) extracap.getEntityList().get(0);
            
            KwlReturnObject curresult = accountingHandlerDAOobj.getObject(KWLCurrency.class.getName(), sessionHandlerImpl.getCurrencyID(request));
            KWLCurrency currency = (KWLCurrency) curresult.getEntityList().get(0);
            
            KwlReturnObject resultavaibaleQty =null;
            HashMap<String, Object> fieldrequestParams = new HashMap();
            HashMap<String, String> customFieldMap = new HashMap<String, String>();
            HashMap<String, String> customDateFieldMap = new HashMap<String, String>();
            fieldrequestParams.put(Constants.filter_names, Arrays.asList(Constants.companyid, Constants.moduleid,Constants.customcolumn));
            fieldrequestParams.put(Constants.filter_values, Arrays.asList(sessionHandlerImpl.getCompanyid(request),isConsignment?Constants.Acc_ConsignmentPurchaseReturn_ModuleId:isFixedAsset?Constants.Acc_FixedAssets_Purchase_Return_ModuleId:Constants.Acc_Purchase_Return_ModuleId,1));
            HashMap<String, String> replaceFieldMap = new HashMap<String, String>();
            HashMap<String, Integer> FieldMap = accAccountDAOobj.getFieldParamsCustomMapForRows(fieldrequestParams, replaceFieldMap,customFieldMap,customDateFieldMap);
            
            String companyid=(String) requestParams.get(COMPANYID);
            KwlReturnObject companyObj = accountingHandlerDAOobj.getObject(Company.class.getName(), companyid);
            Company company = (Company) companyObj.getEntityList().get(0);
            int countryid = company.getCountry() != null ? Integer.parseInt(company.getCountry().getID()) : 0;
            
            HashMap<String, Object> doRequestParams = new HashMap<String, Object>();
            ArrayList filter_names = new ArrayList(),filter_params = new ArrayList(), order_by = new ArrayList(), order_type = new ArrayList();
            filter_names.add("purchaseReturn.ID");
            order_by.add("srno");
            order_type.add("asc");
            doRequestParams.put("filter_names", filter_names);
            doRequestParams.put("filter_params", filter_params);
            doRequestParams.put("order_by", order_by);
            doRequestParams.put("order_type", order_type);

            
            while(sos!=null&&i<sos.length){
                KwlReturnObject result = accountingHandlerDAOobj.getObject(PurchaseReturn.class.getName(), sos[i]);
                PurchaseReturn purchaseReturn = (PurchaseReturn) result.getEntityList().get(0);
                filter_params.clear();
                filter_params.add(purchaseReturn.getID());
                KwlReturnObject podresult = accGoodsReceiptobj.getPurchaseReturnDetails(doRequestParams);
                Iterator itr = podresult.getEntityList().iterator();
                
                while(itr.hasNext()) {
                    PurchaseReturnDetail row=(PurchaseReturnDetail)itr.next();
                    JSONObject obj = new JSONObject();
                    obj.put("billid", purchaseReturn.getID());
                    obj.put("billno", purchaseReturn.getPurchaseReturnNumber());
                    obj.put("externalcurrencyrate", purchaseReturn.getExternalCurrencyRate());
                    obj.put("srno", row.getSrno());
                    obj.put("rowid", row.getID());
                    obj.put("currencysymbol", (purchaseReturn.getCurrency() == null ? currency.getSymbol() : purchaseReturn.getCurrency().getSymbol()));
                    obj.put("productid", row.getProduct().getID());
                    obj.put("purchasetaxId", row.getProduct().getPurchasetaxid());
                    obj.put("salestaxId", row.getProduct().getSalestaxid());
                    obj.put("productname",row.getProduct().getName());
                    obj.put("invstore",(StringUtil.isNullOrEmpty(row.getInvstoreid()))?"":row.getInvstoreid());
                    obj.put("invlocation",(StringUtil.isNullOrEmpty(row.getInvlocid()))?"":row.getInvlocid());
                    obj.put("unitname", row.getInventory().getUom()!=null?row.getInventory().getUom().getNameEmptyforNA():row.getProduct().getUnitOfMeasure()==null?"":row.getProduct().getUnitOfMeasure().getNameEmptyforNA());
                    obj.put("baseuomname", row.getProduct().getUnitOfMeasure()==null?"":row.getProduct().getUnitOfMeasure().getNameEmptyforNA());
                    obj.put("multiuom", row.getProduct().isMultiuom());
                    
                    if (!StringUtil.isNullOrEmpty(row.getDescription())) {
                        description = row.getDescription();
                    } else if (!StringUtil.isNullOrEmpty(row.getProduct().getDescription())) {
                        description = row.getProduct().getDescription();
                    } else {
                        description = "";
                    }
                    obj.put("desc", StringUtil.DecodeText(description));
                    obj.put("type",row.getProduct().getProducttype()==null?"":row.getProduct().getProducttype().getName());
                    obj.put("pid",row.getProduct().getProductid());
                    obj.put("memo", row.getRemark());
                    obj.put("reason", (row.getReason() != null)?row.getReason().getID():"");
                    obj.put("prtaxid", (row.getTax() != null)?row.getTax().getID():"None");
                    obj.put(Constants.isUserModifiedTaxAmount, row.isIsUserModifiedTaxAmount());
//                    obj.put("prtaxid", row.getTax() != null ? (isCopy ? (row.getTax().isActivated() ? row.getTax().getID() : "") : row.getTax().getID()) : "None");//ERP-38656
                    obj.put("taxamount", row.getRowTaxAmount());
                    obj.put("taxamountforlinking", row.getRowTaxAmount());
                    obj.put("discountispercent", row.getDiscountispercent());
                    obj.put("prdiscount", row.getDiscount());
                    obj.put("quantity", row.getActualQuantity());
                    obj.put("dquantity", row.getReturnQuantity());
                    obj.put("isNoteAlso", purchaseReturn.isIsNoteAlso());
                    obj.put("isConsignment", purchaseReturn.isIsconsignment());
                    if(countryid == Constants.indian_country_id){
                        obj.put("formtypeid", purchaseReturn.getFormtype());
                        obj.put("isInterstateParty", purchaseReturn.getVendor() != null ? purchaseReturn.getVendor().isInterstateparty():false);
                    }
                    double baseuomrate = row.getInventory().getBaseuomrate();
                    if(row.getInventory().getUom()!=null) {
                        obj.put("uomid", row.getInventory().getUom().getID());                        
                    } else {
                        obj.put("uomid", row.getInventory().getProduct().getUnitOfMeasure()!=null?row.getInventory().getProduct().getUnitOfMeasure().getID():"");                        
                    }
                    obj.put("baseuomquantity", authHandler.calculateBaseUOMQuatity(row.getReturnQuantity(),baseuomrate, companyid));
                    obj.put("baseuomrate", baseuomrate);
                    JSONObject jObj = null;
                    if (!StringUtil.isNullOrEmpty(extraCompanyPreferences.getColumnPref())) {
                        jObj = new JSONObject((String) extraCompanyPreferences.getColumnPref());
                        if (jObj.has(Constants.isDisplayUOM) && jObj.get(Constants.isDisplayUOM) != null && (Boolean) jObj.get(Constants.isDisplayUOM) != false) {
                            obj = accProductObj.getProductDisplayUOM(row.getInventory().getProduct(), row.getReturnQuantity(), baseuomrate, true, obj);
                        }
                    }
                     
                    if (!StringUtil.isNullOrEmpty(row.getProduct().getID())) {
                        KwlReturnObject prodresult = accProductObj.getObject(Product.class.getName(), row.getProduct().getID());
                        Product product = (Product) prodresult.getEntityList().get(0);
                        isBatchForProduct = product.isIsBatchForProduct();
                        isSerialForProduct = product.isIsSerialForProduct();
                        isLocationForProduct = product.isIslocationforproduct();
                        isWarehouseForProduct = product.isIswarehouseforproduct();
                        isRowForProduct = product.isIsrowforproduct();
                        isRackForProduct = product.isIsrackforproduct();
                        isBinForProduct = product.isIsbinforproduct();
                        if(extraCompanyPreferences!=null && extraCompanyPreferences.getUomSchemaType()==Constants.PackagingUOM){
                            obj.put("caseuom", (product.getPackaging()!=null && product.getPackaging().getCasingUoM()!=null)?product.getPackaging().getCasingUoM().getID():"");
                            obj.put("caseuomvalue", (product.getPackaging()!=null && product.getPackaging().getCasingUoM()!=null)?product.getPackaging().getCasingUomValue():1);
                            obj.put("inneruom", (product.getPackaging()!=null && product.getPackaging().getInnerUoM()!=null)?product.getPackaging().getInnerUoM().getID():"");
                            obj.put("inneruomvalue", (product.getPackaging()!=null && product.getPackaging().getInnerUoM()!=null)?product.getPackaging().getInnerUomValue():1);
                            obj.put("stockuom", (product.getUnitOfMeasure()!=null)?product.getUnitOfMeasure().getID():"");
                       }
                    }
                    obj.put("isLocationForProduct", isLocationForProduct);
                    obj.put("isWarehouseForProduct", isWarehouseForProduct);
                    obj.put("isBatchForProduct", isBatchForProduct);
                    obj.put("isSerialForProduct", isSerialForProduct);    
                    obj.put("isRowForProduct", isRowForProduct);    
                    obj.put("isRackForProduct", isRackForProduct);    
                    obj.put("isBinForProduct", isBinForProduct);    
                    
                    if (isFixedAsset) { // if it is a FixedAsset get asset details
                        getAssetDetailJsonObject(request, row, obj);
                    }

                    KwlReturnObject cap = accountingHandlerDAOobj.getObject(CompanyAccountPreferences.class.getName(), sessionHandlerImpl.getCompanyid(request));
                    CompanyAccountPreferences preferences = (CompanyAccountPreferences) cap.getEntityList().get(0);
                  if (preferences.isIsBatchCompulsory() || preferences.isIsSerialCompulsory() || preferences.isIslocationcompulsory() || preferences.isIswarehousecompulsory() || preferences.isIsrowcompulsory() || preferences.isIsrackcompulsory() || preferences.isIsbincompulsory()) {  //check if company level option is on then only we will check productt level
                        if ((isBatchForProduct || isSerialForProduct || isSerialForProduct || isLocationForProduct || isWarehouseForProduct || isRowForProduct || isRackForProduct  || isBinForProduct) && (!isCopy)) {  //product level batch and serial no on or not
                            obj.put("batchdetails", getNewBatchJson(row.getProduct(), request, row.getID()));
                        }
                    }
                    obj.put("copyquantity", row.getReturnQuantity());
                    obj.put("description", StringUtil.DecodeText(description));
                    obj.put("partno", (row.getPartno()!=null) ? row.getPartno() : "" );
                    obj.put("remark", row.getRemark());
                    obj.put("isAsset", row.getProduct().isAsset());
                    obj.put("rate", row.getRate());
                    obj.put("rateIncludingGst", row.getRateincludegst());
                    obj.put("priceSource", row.getPriceSource() != null? row.getPriceSource() : "");
                    if (row.getPricingBandMasterid() != null) {
                        KwlReturnObject PricebandResult = accountingHandlerDAOobj.getObject(PricingBandMaster.class.getName(), row.getPricingBandMasterid());
                        PricingBandMaster pricingBandMaster = PricebandResult != null ? (PricingBandMaster) PricebandResult.getEntityList().get(0) : null;
                        obj.put("pricingbandmasterid", pricingBandMaster != null ? pricingBandMaster.getID() : "");
                        obj.put("pricingbandmastername", pricingBandMaster != null ? pricingBandMaster.getName() : "");
                    }
                  
                    if ((row.getGrdetails()!= null) && (!(row.getGrdetails().equals("undefined")))) {
                                                        
                        GoodsReceiptOrderDetails grdetails =row.getGrdetails();
                        obj.put("linkto", grdetails.getGrOrder().getGoodsReceiptOrderNumber());
                        obj.put("linkid",grdetails.getGrOrder().getID());
                        obj.put("gstIncluded",grdetails.getGrOrder().isGstIncluded());
                        /*
                             ERM-1037
                             Field used for comparing dates to restrict linking of future doument date in Purchase Return document editing
                         */
                        obj.put("invcreationdate",grdetails.getGrOrder().getOrderDate());
                        obj.put("rowid", grdetails.getID());
                        obj.put("savedrowid", grdetails.getID());
                        obj.put("linktype", 0);
                    } else if (row.getVidetails() != null) {
                        GoodsReceiptDetail videtails=row.getVidetails();
                        GoodsReceipt gReceipt=videtails.getGoodsReceipt();
                        obj.put("linkto", gReceipt.getGoodsReceiptNumber());
                        obj.put("linkid",gReceipt.getID());
                        obj.put("gstIncluded",gReceipt.isGstIncluded());
                        /*
                             ERM-1037
                             Field used for comparing dates to restrict linking of future doument date in Purchase Return document editing
                         */
                        obj.put("invcreationdate",gReceipt.getCreationDate());
                        obj.put("rowid", videtails.getID());
                        obj.put("savedrowid", videtails.getID());
                        obj.put("linktype", 1);
                        obj.put("linktransactionamountdue", gReceipt.getInvoiceamountdue());
                        //getting linked invoice details in edit case for PR->DN
                        obj.put("invbillid", gReceipt.getID());
                        obj.put("invjournalentryid", gReceipt.getJournalEntry()!=null ? gReceipt.getJournalEntry().getID():"");
                        obj.put("invjeentryno", gReceipt.getJournalEntry()!=null?gReceipt.getJournalEntry().getEntryNumber():"");
                        obj.put("invamountinbase", gReceipt.getInvoiceAmountInBase());
                        obj.put("invdiscount", gReceipt.getDiscount());
                        obj.put("invamount", gReceipt.getInvoiceAmount());
                        obj.put("invamountdue", gReceipt.getInvoiceamountdue());
                    } else {
                        obj.put("linkto", "");
                        obj.put("linkid", "");
                        obj.put("linktype", -1);
                    }
                    if (extraCompanyPreferences.getProductOptimizedFlag()!=Constants.Show_all_Products) {
                        resultavaibaleQty = accProductObj.getQuantity(row.getProduct().getID());

                        obj.put("availablequantity", (resultavaibaleQty.getEntityList().get(0) == null ? 0 : resultavaibaleQty.getEntityList().get(0)));

                        KwlReturnObject result2 = accProductObj.getAssemblyLockQuantity(row.getProduct().getID());//get the lock quantity of assembly type of product locked in SO
                        Double assmblyLockQuantity = (Double) (result2.getEntityList().get(0) == null ? 0.0 : result2.getEntityList().get(0));

                        KwlReturnObject result1 = accProductObj.getLockQuantity(row.getProduct().getID());
                        Double SoLockQuantity = (Double) (result1.getEntityList().get(0) == null ? 0.0 : result1.getEntityList().get(0));

                        obj.put("lockquantity", assmblyLockQuantity + SoLockQuantity);
                    }
                    obj.put("recTermAmount",row.getRowtermamount());
                    obj.put("OtherTermNonTaxableAmount",row.getOtherTermNonTaxableAmount());
                    
                    JSONArray TermdetailsjArr = new JSONArray();
                    if(extraCompanyPreferences.getLineLevelTermFlag()==1){ // For India Country 
                        HashMap<String, Object> PurchaseReturnDetailParams = new HashMap<String, Object>();
                        PurchaseReturnDetailParams.put("PurchaseReturnDetailid", row.getID());
                        KwlReturnObject prdTermMapresult = accGoodsReceiptobj.getPurchaseReturnDetailTermMap(PurchaseReturnDetailParams);
                        List<PurchaseReturnDetailsTermMap> PurchaseReturnDetailTermsMapList = prdTermMapresult.getEntityList();
                        for (PurchaseReturnDetailsTermMap purchaseReturnDetailTermMap : PurchaseReturnDetailTermsMapList) {
                            LineLevelTerms mt = purchaseReturnDetailTermMap.getTerm();
                            com.krawler.utils.json.base.JSONObject jsonobj = new com.krawler.utils.json.base.JSONObject();
                            com.krawler.utils.json.base.JSONObject jsonObj = new com.krawler.utils.json.base.JSONObject();
                            jsonObj.put("id", mt.getId());
                            jsonObj.put("termid", purchaseReturnDetailTermMap.getTerm().getId());
                            /**
                             * ERP-32829 
                             */
                            jsonObj.put("productentitytermid", purchaseReturnDetailTermMap.getEntitybasedLineLevelTermRate()!=null?purchaseReturnDetailTermMap.getEntitybasedLineLevelTermRate().getId():"");
                            jsonObj.put("isDefault", purchaseReturnDetailTermMap.isIsGSTApplied());
                            jsonObj.put("term", mt.getTerm());
                            jsonObj.put("formulaids", mt.getFormula());
                            jsonObj.put("termtype", mt.getTermType());
                            jsonObj.put("termsequence", mt.getTermSequence());
                            jsonObj.put("termamount", purchaseReturnDetailTermMap.getTermamount());
                            jsonObj.put("termpercentage", purchaseReturnDetailTermMap.getPercentage());
                            jsonObj.put("originalTermPercentage", mt.getPercentage());  // For Service tax term abatment calculation
                            jsonObj.put("glaccountname", mt.getAccount().getName());
                            jsonObj.put("accountid", mt.getAccount().getID());
                            jsonObj.put("glaccount", mt.getAccount().getID());
                            jsonObj.put("IsOtherTermTaxable", mt.isOtherTermTaxable());
                            jsonObj.put("assessablevalue", purchaseReturnDetailTermMap.getAssessablevalue());
                            jsonObj.put("purchasevalueorsalevalue", purchaseReturnDetailTermMap.getPurchaseValueOrSaleValue());
                            jsonObj.put("deductionorabatementpercent", purchaseReturnDetailTermMap.getDeductionOrAbatementPercent());
                            jsonObj.put("taxtype", purchaseReturnDetailTermMap.getTaxType());
                            jsonObj.put("sign", mt.getSign());
                            jsonObj.put("taxvalue", purchaseReturnDetailTermMap.getTaxType()==0 ? purchaseReturnDetailTermMap.getTermamount() : purchaseReturnDetailTermMap.getPercentage());
                            jsonobj.put("payableaccountid", mt.getPayableAccount() != null ? mt.getPayableAccount().getID() : "");
                            jsonObj.put(IndiaComplianceConstants.GST_CESS_TYPE, purchaseReturnDetailTermMap.getEntitybasedLineLevelTermRate()!=null && purchaseReturnDetailTermMap.getEntitybasedLineLevelTermRate().getCessType()!=null ? purchaseReturnDetailTermMap.getEntitybasedLineLevelTermRate().getCessType().getId() : "");
                            jsonObj.put(IndiaComplianceConstants.GST_CESS_VALUATION_AMOUNT, purchaseReturnDetailTermMap.getEntitybasedLineLevelTermRate()!=null ? purchaseReturnDetailTermMap.getEntitybasedLineLevelTermRate().getValuationAmount() :0.0);
                            jsonObj.put(IndiaComplianceConstants.DEFAULT_TERMID, mt!=null && mt.getDefaultTerms()!=null ? mt.getDefaultTerms().getId() : "");
                            TermdetailsjArr.put(jsonObj);
                        }
                        if (row.getCompany().getCountry().getID().equalsIgnoreCase("" + Constants.indian_country_id)) {

                            /**
                             * Put GST Tax Class History.
                             */
                            obj.put("refdocid", row.getID());
                            fieldDataManagercntrl.getGSTTaxClassHistory(obj);
                        }
                    }
                    obj.put("LineTermdetails",TermdetailsjArr);
                    
                    // Only For India country and TDS applicable true
                    if (company.getCountry() != null && !StringUtil.isNullOrEmpty(company.getCountry().getID()) && Constants.indian_country_id == Integer.parseInt(company.getCountry().getID()) && extraCompanyPreferences.isTDSapplicable() && row.getNatureOfPayment()!=null) {// TDS Details
                        JSONArray jrrAppliedTDS = new JSONArray();
                        JSONObject jobjAppliedTDS = new JSONObject();
                        KwlReturnObject deducteeTypeObj = accountingHandlerDAOobj.getObject(MasterItem.class.getName(), row.getPurchaseReturn().getVendor().getDeducteeType());
                        MasterItem deducteeTypeMI = (MasterItem) deducteeTypeObj.getEntityList().get(0);
                        if (deducteeTypeMI != null) {
                            jobjAppliedTDS.put("tdsAssessableAmount", row.getTdsAssessableAmount());// On which TDS is Applied
                            jobjAppliedTDS.put("deducteetypename", deducteeTypeMI.getValue());
                            jobjAppliedTDS.put("amount", "");//amount);
                            jobjAppliedTDS.put("enteramount", "");//amount);
                            jobjAppliedTDS.put("ruleid", row.getTdsRuleId());
                            jobjAppliedTDS.put("tdsamount", row.getTdsLineAmount());
                            jobjAppliedTDS.put("rowid", row.getTdsRuleId());
                            jobjAppliedTDS.put("tdspercentage", row.getTdsRate());
                            jobjAppliedTDS.put("natureofpayment", row.getNatureOfPayment()!=null?row.getNatureOfPayment().getID():"");
                            jobjAppliedTDS.put("natureofpaymentName", row.getNatureOfPayment()!=null?row.getNatureOfPayment().getCode() + " - " + row.getNatureOfPayment().getValue():"");
                            jobjAppliedTDS.put("tdsaccountid", row.getTdsPayableAccount()!=null?row.getTdsPayableAccount().getID():"");
                            jrrAppliedTDS.put(jobjAppliedTDS);
                            obj.put("appliedTDS", jrrAppliedTDS.toString());
                            obj.put("tdsamount", row.getTdsLineAmount());
                        }
                    }
                  
                    Map<String, Object> variableMap = new HashMap<String, Object>();
                    PurchaseReturnDetailCustomDate purchaseReturnDetailCustomDate = (PurchaseReturnDetailCustomDate) row.getPurchaseReturnDetailCustomDate();
                    AccountingManager.setCustomColumnValues(purchaseReturnDetailCustomDate, FieldMap, replaceFieldMap, variableMap);
                    if (purchaseReturnDetailCustomDate != null) {
                        JSONObject params = new JSONObject();

                        params.put("isExport", isExport);
                        params.put("isForReport", isForReport);
                        params.put(Constants.userdf, userDateFormat);
                        fieldDataManagercntrl.getLineLevelCustomData(variableMap, customFieldMap, customDateFieldMap, obj, params);
                    }
                    // Get Product level Custom field data
                    HashMap<String, Object> fieldrequestParamsProduct = new HashMap();
                    HashMap<String, String> customProductFieldMap = new HashMap<String, String>();
                    HashMap<String, String> customProductDateFieldMap = new HashMap<String, String>();
                    Map<String, Object> variableMapProduct = new HashMap<String, Object>();
                    fieldrequestParamsProduct.put(Constants.filter_names, Arrays.asList(Constants.companyid, Constants.moduleid, Constants.customcolumn));
                    fieldrequestParamsProduct.put(Constants.filter_values, Arrays.asList(sessionHandlerImpl.getCompanyid(request), Constants.Acc_Product_Master_ModuleId, 0));
                    HashMap<String, String> replaceFieldMapProduct = new HashMap<String, String>();
                    HashMap<String, Integer> FieldMapProduct = accAccountDAOobj.getFieldParamsCustomMapForRows(fieldrequestParamsProduct, replaceFieldMapProduct, customProductFieldMap, customProductDateFieldMap);
                    PurchaseReturnDetailProductCustomData PRDetailProductCustomData = (PurchaseReturnDetailProductCustomData) row.getPurchaseReturnDetailProductCustomData();
                    AccountingManager.setCustomColumnValues(PRDetailProductCustomData, FieldMapProduct, replaceFieldMapProduct, variableMapProduct);
                    
                     if (PRDetailProductCustomData != null) {
                        JSONObject params = new JSONObject();
                        params.put("isExport", isExport);
                        params.put("isForReport", isForReport);
                        params.put(Constants.userdf,userDateFormat);
                        fieldDataManagercntrl.getLineLevelCustomData(variableMapProduct, customProductFieldMap, customProductDateFieldMap, obj, params);
                    }
                    jArr.put(obj);
                }
                i++;
                jobj.put("data", jArr);
            }
        } catch (JSONException je) {
            throw ServiceException.FAILURE(je.getMessage(), je);
        }
        return jobj;
    }
     
    
    private void getAssetDetailJsonObject(HttpServletRequest request, PurchaseReturnDetail row, JSONObject obj) throws ServiceException, JSONException, SessionExpiredException, UnsupportedEncodingException {
        String companyid = sessionHandlerImpl.getCompanyid(request);
        DateFormat df = authHandler.getDateOnlyFormat();
        JSONObject paramJobj = StringUtil.convertRequestToJsonObject(request);
        DateFormat userDateFormat = null;
        if (paramJobj.has(Constants.userdateformat)) {
            userDateFormat = new SimpleDateFormat(String.valueOf(paramJobj.get(Constants.userdateformat)));
        }
        JSONArray assetDetailsJArr = new JSONArray();
        HashMap<String, Object> assetDetailsParams = new HashMap<String, Object>();
        assetDetailsParams.put("companyid", companyid);
        assetDetailsParams.put("invoiceDetailId", row.getID());
        assetDetailsParams.put("moduleId", Constants.Acc_FixedAssets_Purchase_Return_ModuleId);
        KwlReturnObject assetInvMapObj = accProductObj.getAssetInvoiceDetailMapping(assetDetailsParams);
        List assetInvMapList = assetInvMapObj.getEntityList();
        Iterator assetInvMapListIt = assetInvMapList.iterator();
        KwlReturnObject cap = accountingHandlerDAOobj.getObject(CompanyAccountPreferences.class.getName(), sessionHandlerImpl.getCompanyid(request));
        CompanyAccountPreferences preferences = (CompanyAccountPreferences) cap.getEntityList().get(0);
        boolean isBatchForProduct = obj.optBoolean("isBatchForProduct");
        boolean isSerialForProduct = obj.optBoolean("isSerialForProduct");;
        boolean isLocationForProduct = obj.optBoolean("isLocationForProduct");;
        boolean isWarehouseForProduct = obj.optBoolean("isWarehouseForProduct");;
        boolean isRowForProduct = obj.optBoolean("isRowForProduct");;
        boolean isRackForProduct = obj.optBoolean("isRackForProduct");;
        boolean isBinForProduct = obj.optBoolean("isBinForProduct");;  
        
        while (assetInvMapListIt.hasNext()) {
            AssetInvoiceDetailMapping invoiceDetailMapping = (AssetInvoiceDetailMapping) assetInvMapListIt.next();
            AssetDetails assetDetails = invoiceDetailMapping.getAssetDetails();
            JSONObject assetDetailsJOBJ = new JSONObject();

            assetDetailsJOBJ.put("assetId", assetDetails.getId());

            assetDetailsJOBJ.put("assetdetailId", assetDetails.getId());
            assetDetailsJOBJ.put("sellAmount", assetDetails.getSellAmount());
            assetDetailsJOBJ.put("assetName", assetDetails.getAssetId());
            assetDetailsJOBJ.put("location", (assetDetails.getLocation() != null) ? assetDetails.getLocation().getId() : "");
            assetDetailsJOBJ.put("department", (assetDetails.getDepartment() != null) ? assetDetails.getDepartment().getId() : "");
            assetDetailsJOBJ.put("assetdescription", (assetDetails.getAssetDescription() != null) ? assetDetails.getAssetDescription() : "");
            assetDetailsJOBJ.put("assetUser", (assetDetails.getAssetUser() != null) ? assetDetails.getAssetUser().getUserID() : "");
            assetDetailsJOBJ.put("cost", assetDetails.getCost());
            assetDetailsJOBJ.put("salvageRate", assetDetails.getSalvageRate());
            assetDetailsJOBJ.put("salvageValue", assetDetails.getSalvageValue());
            assetDetailsJOBJ.put("accumulatedDepreciation", assetDetails.getAccumulatedDepreciation());
            assetDetailsJOBJ.put("assetLife", assetDetails.getAssetLife());
            assetDetailsJOBJ.put("elapsedLife", assetDetails.getElapsedLife());
            assetDetailsJOBJ.put("nominalValue", assetDetails.getElapsedLife());
            assetDetailsJOBJ.put("installationDate", df.format(assetDetails.getInstallationDate()));
            assetDetailsJOBJ.put("purchaseDate", df.format(assetDetails.getPurchaseDate()));
            
            if (preferences.isIsBatchCompulsory() || preferences.isIsSerialCompulsory() || preferences.isIslocationcompulsory() || preferences.isIswarehousecompulsory() || preferences.isIsrowcompulsory() || preferences.isIsrackcompulsory() || preferences.isIsbincompulsory()) {  //check if company level option is on then only we will check productt level
                if ((isBatchForProduct || isSerialForProduct || isSerialForProduct || isLocationForProduct || isWarehouseForProduct || isRowForProduct || isRackForProduct || isBinForProduct)) {  //product level batch and serial no on or not
                    assetDetailsJOBJ.put("batchdetails", getNewBatchJson(row.getProduct(), request, assetDetails.getId()));
                }
            }
            
            HashMap<String, Object> fieldrequestParams1 = new HashMap();
            fieldrequestParams1.put(Constants.filter_names, Arrays.asList(Constants.companyid, Constants.moduleid, Constants.customcolumn));
            fieldrequestParams1.put(Constants.filter_values, Arrays.asList(sessionHandlerImpl.getCompanyid(request), Constants.Acc_FixedAssets_Details_ModuleId, 1));
            HashMap<String, String> customFieldMap1 = new HashMap<String, String>();
            HashMap<String, String> customDateFieldMap1 = new HashMap<String, String>();
            HashMap<String, String> replaceFieldMap11 = new HashMap<String, String>();
            HashMap<String, Integer> fieldMap1 = accAccountDAOobj.getFieldParamsCustomMapForRows(fieldrequestParams1, replaceFieldMap11, customFieldMap1, customDateFieldMap1);
            Map<String, Object> variableMap = new HashMap<String, Object>();
            AssetDetailsCustomData jeDetailCustom = (AssetDetailsCustomData) assetDetails.getAssetDetailsCustomData();
            replaceFieldMap11 = new HashMap<String, String>();
            if (jeDetailCustom != null) {
                AccountingManager.setCustomColumnValues(jeDetailCustom, fieldMap1, replaceFieldMap11, variableMap);
                JSONObject params = new JSONObject();
                params.put("companyid", companyid);
                params.put("getCustomFieldArray", true);
                params.put(Constants.userdf,userDateFormat);
                fieldDataManagercntrl.getLineLevelCustomData(variableMap, customFieldMap1, customDateFieldMap1, assetDetailsJOBJ, params);
            }
            
            assetDetailsJArr.put(assetDetailsJOBJ);
        }
        obj.put("assetDetails", assetDetailsJArr.toString());
    }
             
    public List deletePurchaseReturn(HttpServletRequest request) throws SessionExpiredException, AccountingException, ServiceException {
        String linkedTransaction="";
        StringBuffer productIds = new StringBuffer();
        List resultList = new ArrayList();
        try {
            boolean isFixedAsset = false;
            if (!StringUtil.isNullOrEmpty(request.getParameter("isFixedAsset"))) {
                isFixedAsset = Boolean.parseBoolean(request.getParameter("isFixedAsset"));
            }
            String audtmsg = "";
            if (isFixedAsset) {
                audtmsg = " Asset ";
            } else {
                audtmsg = " ";
            }
            JSONArray jArr = new JSONArray(request.getParameter("data"));
            String companyid = sessionHandlerImpl.getCompanyid(request);
            KwlReturnObject capresult = accountingHandlerDAOobj.getObject(CompanyAccountPreferences.class.getName(), companyid);
            CompanyAccountPreferences preferences = (CompanyAccountPreferences) capresult.getEntityList().get(0);
            String prid="",prno="";
            KwlReturnObject extracap = accountingHandlerDAOobj.getObject(ExtraCompanyPreferences.class.getName(),companyid);
            ExtraCompanyPreferences extraCompanyPreferences = (ExtraCompanyPreferences) extracap.getEntityList().get(0);
            boolean isnegativestockforlocwar = extraCompanyPreferences.isIsnegativestockforlocwar();   
            for (int i = 0; i < jArr.length(); i++) {
                JSONObject jobj = jArr.getJSONObject(i);
                if (!StringUtil.isNullOrEmpty(jobj.getString("billid"))) {
                    String srid = StringUtil.DecodeText(jobj.optString("billid"));
                    prno=jobj.getString("billno");
                    HashMap<String, Object> requestParams = new HashMap<String, Object>();
                    requestParams.put("prid", srid);
                    requestParams.put("companyid", companyid);
                    requestParams.put("prno", prno);
                    requestParams.put("isnegativestockforlocwar", isnegativestockforlocwar);
                    if (isFixedAsset) {
                        accGoodsReceiptobj.deleteAssetDetailsLinkedWithPurchaseReturn(requestParams);
                    }
                    
                    KwlReturnObject rdresult = accountingHandlerDAOobj.getObject(PurchaseReturn.class.getName(), srid);
                    PurchaseReturn purchaseReturn = (PurchaseReturn) rdresult.getEntityList().get(0);
                    if (!purchaseReturn.isIsdeletable()) {
                        linkedTransaction += prno + ", ";
                        continue;
                    }
                    if (extraCompanyPreferences != null && (extraCompanyPreferences.isActivateMRPModule() || preferences.getInventoryValuationType() == Constants.PERPETUAL_VALUATION_METHOD)) { // delete JE temporary
                        KwlReturnObject result = accGoodsReceiptobj.getProductsFromPurchaseReturn(srid, companyid);
                        if (result != null && result.getEntityList() != null && !result.getEntityList().isEmpty()) {
                            List productList = result.getEntityList();
                            if (productList != null && !productList.isEmpty()) {
                                for (Object object : productList) {
                                    String productid = (String) object;
                                    if (productIds.indexOf(productid) == -1) {
                                        productIds.append(productid).append(",");
                                    }
                                }
                            }
                        }
                    }
                    //check Debit node is made from this Purchase return
                    String debitNoteId = accGoodsReceiptobj.getDebitNoteIdFromPRId(srid, companyid);
                    if (!StringUtil.isNullOrEmpty(debitNoteId)) {
                        //Check whether linked DN is paid partially/fully
                        boolean isNoteLinkedWithPayment = accDebitNoteService.isNoteLinkedWithPayment(debitNoteId);
                        boolean isNoteLinkedWithAdvancePayment = accDebitNoteService.isNoteLinkedWithAdvancePayment(debitNoteId);
                        if (isNoteLinkedWithPayment || isNoteLinkedWithAdvancePayment) {
                            linkedTransaction += prno + ", ";
                            continue;
                        }
                    }
                   accGoodsReceiptobj.updatePOBalanceQtyAfterPR(srid, companyid);
                    Set <PurchaseReturnDetail> srDetails = purchaseReturn.getRows();
                    Iterator it = srDetails.iterator();
                    while(it.hasNext()){
                        PurchaseReturnDetail srdObj = (PurchaseReturnDetail)it.next();
                        accProductObj.deleteInventoryEntry(srdObj.getID(),companyid);
                    }
                    stockMovementService.removeStockMovementByReferenceId(purchaseReturn.getCompany(), purchaseReturn.getID());
                    if (extraCompanyPreferences != null && (extraCompanyPreferences.isActivateMRPModule() || preferences.getInventoryValuationType()== Constants.PERPETUAL_VALUATION_METHOD)) { // delete JE temporary
                        if (purchaseReturn != null && purchaseReturn.getInventoryJE() != null) {
                            accJournalEntryobj.deleteJournalEntry(purchaseReturn.getInventoryJE().getID(), companyid);
                        }
                    }
                    accGoodsReceiptobj.deletePurchasesBatchSerialDetails(requestParams);
                    accGoodsReceiptobj.deletePurchaseReturn(srid, companyid);
                    
                    Set<String> invoiceIDSet = new HashSet<>();
                    if (!StringUtil.isNullOrEmpty(debitNoteId)) {
                        KwlReturnObject dnObj = accountingHandlerDAOobj.getObject(DebitNote.class.getName(), debitNoteId);
                        DebitNote debitNote = (DebitNote) dnObj.getEntityList().get(0);                          /*
                         * Before deleting DebitNoteDetail Keeping id of
                         * Goodsrceipt utlized in DN
                         */
                        if (debitNote.getApprovestatuslevel() == 11) {//for approved DN
                            for (DebitNoteDetail cnd : debitNote.getRows()) {
                                if (cnd.getGoodsReceipt() != null) {
                                    invoiceIDSet.add(cnd.getGoodsReceipt().getID());
                                }
                            }
                        }
                        HashMap<String, Object> dataMap = new HashMap<String, Object>();
                        dataMap.put("dnid", debitNoteId);
                        dataMap.put("companyid", companyid);
                        accDebitNoteService.deleteDebitNotePartialy(dataMap);
                    }

                    //Delete Rouding JEs if created against PI
                    String roundingJENo = "";
                    String roundingIDs = "";
                    if (!invoiceIDSet.isEmpty()) {
                        String invIDs = "";
                        for (String invID : invoiceIDSet) {
                            invIDs = invID + ",";
                        }
                        if (!StringUtil.isNullOrEmpty(invIDs)) {
                            invIDs = invIDs.substring(0, invIDs.length() - 1);
                        }
                        KwlReturnObject jeResult = accJournalEntryobj.getRoundingJournalEntryByGRIds(invIDs, companyid);
                        List<JournalEntry> jeList = jeResult.getEntityList();
                        for (JournalEntry roundingJE : jeList) {
                            roundingJENo = roundingJE.getEntryNumber() + ",";
                            roundingIDs = roundingJE.getID() + ",";
                            accDebitNoteService.deleteJEArray(roundingJE.getID(), companyid);
                        }

                        if (!StringUtil.isNullOrEmpty(roundingJENo)) {
                            roundingJENo = roundingJENo.substring(0, roundingJENo.length() - 1);
                        }
                        if (!StringUtil.isNullOrEmpty(roundingIDs)) {
                            roundingIDs = roundingIDs.substring(0, roundingIDs.length() - 1);
                        }
                    }
                    auditTrailObj.insertAuditLog("87", "User " + sessionHandlerImpl.getUserFullName(request) + " has deleted"+audtmsg+"Purchase Return " +prno, request, prid); 

                    if (!StringUtil.isNullOrEmpty(roundingJENo)) {
                        auditTrailObj.insertAuditLog(AuditAction.ROUNDING_OFF_JE_DELETED, "User " + sessionHandlerImpl.getUserFullName(request) + " has delted Purchase Return "+ prno+"." + messageSource.getMessage("acc.roundingje.roundingje", null, RequestContextUtils.getLocale(request)) + " " + roundingJENo + messageSource.getMessage("acc.roundingje.roundingjedelted", null, RequestContextUtils.getLocale(request)) + ".", request, roundingIDs);
                    }
                    
                    if (preferences.isInventoryAccountingIntegration() && preferences.isWithInvUpdate()) {
                        
                        String action="17";
                        boolean isDirectUpdateInvFlag=false;
                        if(preferences.isUpdateInvLevel()){
                            isDirectUpdateInvFlag=true;
                            action="19";//Direct Inventory Update action
                        }                
                
                        JSONArray productArray = new JSONArray();

                        KwlReturnObject res = accountingHandlerDAOobj.getObject(PurchaseReturn.class.getName(), srid);
                        PurchaseReturn purchaseReturn1 = (PurchaseReturn) res.getEntityList().get(0);
                        
                        Set<PurchaseReturnDetail> purchaseReturnDetails = purchaseReturn1.getRows();
                        for (PurchaseReturnDetail purchaseReturnDetail : purchaseReturnDetails) {
                                JSONObject productObject = new JSONObject();
                            productObject.put("itemUomId", purchaseReturnDetail.getInventory().getUom().getID());                            
                            productObject.put("itemBaseUomRate", purchaseReturnDetail.getInventory().getBaseuomrate());                                                        
                            productObject.put("itemQuantity", purchaseReturnDetail.getInventory().getBaseuomquantity());                      
                            productObject.put("quantity", purchaseReturnDetail.getInventory().getQuantity());
                            //productObject.put("itemQuantity", purchaseReturnDetail.getInventory().getQuantity());
                            productObject.put("itemCode", purchaseReturnDetail.getInventory().getProduct().getProductid());
                            if(isDirectUpdateInvFlag){
                                productObject.put("storeid", purchaseReturnDetail.getInvstoreid());
                                productObject.put("locationid", purchaseReturnDetail.getInvlocid());
                            }
                                productArray.put(productObject);
                            }
                        if (productArray.length() > 0) {

                            String sendDateFormat = "yyyy-MM-dd";
                            DateFormat dateformat = new SimpleDateFormat(sendDateFormat);
                            Date date = purchaseReturn1.getOrderDate();
                            String stringDate = dateformat.format(date);

                            JSONObject jSONObject = new JSONObject();
                            jSONObject.put("deliveryDate", stringDate);
                            jSONObject.put("dateFormat", sendDateFormat);
                            jSONObject.put("details", productArray);
                            jSONObject.put("orderNumber", purchaseReturn1.getPurchaseReturnNumber());
                            jSONObject.put("companyId", companyid);
                            jSONObject.put("purchasing", true);

                            String url = this.getServletContext().getInitParameter("inventoryURL");
                            CommonFnController cfc = new CommonFnController();
                            cfc.updateInventoryLevel(request, jSONObject, url,action);
                        }
                    }
                }
            }
            resultList.add(0, linkedTransaction);
            resultList.add(1, productIds);
        } catch (InventoryException ex) {
            throw new AccountingException(messageSource.getMessage("acc.common.excp1", null, RequestContextUtils.getLocale(request)));
        } catch (JSONException ex) {
            throw new AccountingException(messageSource.getMessage("acc.common.excp1", null, RequestContextUtils.getLocale(request)));
        }
        return resultList;
    }        

        
    public ModelAndView deletePurchaseReturn(HttpServletRequest request, HttpServletResponse response){
        JSONObject jobj=new JSONObject();
        String msg="",msgtext="",linkedTransaction="";
        boolean issuccess = false;
        boolean isConsignment = false;
        DefaultTransactionDefinition def = new DefaultTransactionDefinition();
        def.setName("SO_Tx");
        def.setPropagationBehavior(TransactionDefinition.PROPAGATION_REQUIRED);
        List list = new ArrayList();
        StringBuffer productIds = new StringBuffer();
        TransactionStatus status = txnManager.getTransaction(def);
        try {
            if (!StringUtil.isNullOrEmpty(request.getParameter("isConsignment"))) {
                isConsignment = Boolean.parseBoolean(request.getParameter("isConsignment"));
            }
            boolean isFixedAsset = request.getParameter("isFixedAsset") != null ? Boolean.parseBoolean(request.getParameter("isFixedAsset")) : false;
            list = deletePurchaseReturn(request);
            if (list != null && !list.isEmpty()) {
                linkedTransaction = (String) list.get(0);
            }
            txnManager.commit(status);
            issuccess = true;
            msgtext = (isFixedAsset) ? "acc.field.assetPurchaseReturnHasBeenDeletedSuccessfully" : (isConsignment ? "acc.Consignment.purchaseReturnhasbeendeletedsuccessfully" : "acc.field.PurchaseReturnhasbeendeletedsuccessfully");
            if (StringUtil.isNullOrEmpty(linkedTransaction)) {
                msg = messageSource.getMessage(msgtext, null, RequestContextUtils.getLocale(request));
            } else {
                msgtext = "acc.field.PurchaseReturnexcept";
                msg = messageSource.getMessage(msgtext, null, RequestContextUtils.getLocale(request)) + " " + linkedTransaction.substring(0, linkedTransaction.length() - 2) + " " + messageSource.getMessage("acc.field.hasbeendeletedsuccessfully", null, RequestContextUtils.getLocale(request));
            }
            if (list != null && list.size() > 0) {
                productIds = (StringBuffer) list.get(1);
            }
        } catch (SessionExpiredException ex) {
            txnManager.rollback(status);
            msg = ex.getMessage();
            Logger.getLogger(accGoodsReceiptControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            txnManager.rollback(status);
            msg = "" + ex.getMessage();
            Logger.getLogger(accGoodsReceiptControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                jobj.put("success", issuccess);
                jobj.put("msg", msg);
                jobj.put("productIds", productIds);
            } catch (JSONException ex) {
                Logger.getLogger(accGoodsReceiptControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return new ModelAndView("jsonView", "model", jobj.toString());
    }
     
    public ModelAndView deletePurchaseReturnPermanent(HttpServletRequest request, HttpServletResponse response) throws SessionExpiredException, JSONException {
        JSONObject responsejobj = new JSONObject();
        String url = this.getServletContext().getInitParameter("inventoryURL");
        JSONObject nObject = StringUtil.convertRequestToJsonObject(request);
        nObject.put(Constants.inventoryURL, url);
        responsejobj = accGoodsReceiptServiceDAO.deletePurchaseReturnPermanentJSON(nObject);
        return new ModelAndView("jsonView", "model", responsejobj.toString());
    }

    public ModelAndView exportPurchaseReturn(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        String view = "jsonView_ex";
        try{
            HashMap<String, Object> requestParams = getGoodsReceiptMap(request);
            boolean consolidateFlag = request.getParameter("consolidateFlag")!=null?Boolean.parseBoolean(request.getParameter("consolidateFlag")):false;            
            String companyid = (consolidateFlag && request.getParameter("companyids")!=null)?request.getParameter("companyids"):sessionHandlerImpl.getCompanyid(request);
            String gcurrencyid = (consolidateFlag && request.getParameter("gcurrencyid")!=null)?request.getParameter("gcurrencyid"):sessionHandlerImpl.getCurrencyID(request);            
            request.setAttribute("companyid", companyid);
            request.setAttribute("gcurrencyid", gcurrencyid);
            requestParams.put("companyid", companyid);
            requestParams.put("gcurrencyid", gcurrencyid);
            request.setAttribute("isExport", true);
            //SJ[ERP-16634] -start
            boolean isPurchaseReturnCreditNote = false;
            if (!StringUtil.isNullOrEmpty(request.getParameter("isNoteReturns"))) {
                isPurchaseReturnCreditNote = Boolean.parseBoolean(request.getParameter("isNoteReturns"));
            }
            requestParams.put("isPurchaseReturnCreditNote", isPurchaseReturnCreditNote);
            //SJ[ERP-16634]  -end   
            ExtraCompanyPreferences extraPref = (ExtraCompanyPreferences) kwlCommonTablesDAOObj.getClassObject("com.krawler.common.admin.ExtraCompanyPreferences", sessionHandlerImpl.getCompanyid(request));
            if (extraPref != null && extraPref.isEnablesalespersonAgentFlow()) {
                int permCode = sessionHandlerImpl.getPerms(request, Constants.VENDOR_PERMCODE);
                if (!((permCode & Constants.VENDOR_VIEWALL_PERMCODE) == Constants.VENDOR_VIEWALL_PERMCODE)) {
                    /*
                     * when (permCode & Constants.VENDOR_VIEWALL_PERMCODE) == Constants.VENDOR_VIEWALL_PERMCODE is true then user has permission to view all vendors documents,so at that time there is need to filter record according to user&agent. 
                     */
                    String userId = sessionHandlerImpl.getUserid(request);
                    requestParams.put("userid", userId);
                    requestParams.put("enablesalespersonagentflow", extraPref.isEnablesalespersonAgentFlow());
                }
            }  
                
            KwlReturnObject result = accGoodsReceiptobj.getPurchaseReturn(requestParams);
            JSONArray jarr = accGoodsReceiptServiceDAO.getPurchaseReturnJson(requestParams, result.getEntityList());
            if (request.getParameter("type") != null && request.getParameter("type").equals("detailedXls")) {
                jarr = getDetailJsonPurchaseReturn(request, response, requestParams, jarr);
            }
            jobj.put("data", jarr);
            String fileType = request.getParameter("filetype");
            if (StringUtil.equal(fileType, "print")) {
                String  GenerateDate = authHandler.getDateFormatter(request).format(new Date());
                jobj.put("GenerateDate", GenerateDate);
                view = "jsonView-empty";
            }else if(fileType.equals("xls")){
             request.setAttribute("isSummaryXls", true);
            }
            exportDaoObj.processRequest(request, response, jobj);
        } catch (SessionExpiredException ex) {
            Logger.getLogger(accGoodsReceiptControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
        } catch(Exception ex) {
            Logger.getLogger(accGoodsReceiptControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
        }
        return new ModelAndView(view, "model", jobj.toString());
    }
      public JSONArray getDetailJsonPurchaseReturn(HttpServletRequest request, HttpServletResponse response, HashMap<String, Object> requestParams, JSONArray DataJArr) throws JSONException, SessionExpiredException, ServiceException, SessionExpiredException, SessionExpiredException, SessionExpiredException, UnsupportedEncodingException {
        boolean consolidateFlag = request.getParameter("consolidateFlag") != null ? Boolean.parseBoolean(request.getParameter("consolidateFlag")) : false;
        String[] companyids = (consolidateFlag && request.getParameter("companyids") != null) ? request.getParameter("companyids").split(",") : sessionHandlerImpl.getCompanyid(request).split(",");
        String gcurrencyid = (consolidateFlag && request.getParameter("gcurrencyid") != null) ? request.getParameter("gcurrencyid") : sessionHandlerImpl.getCurrencyID(request);
        String companyid = companyids[0];
        JSONArray tempArray = new JSONArray();
         for (int i = 0; i < DataJArr.length(); i++) {
             JSONObject rowjobj = new JSONObject();
             rowjobj = DataJArr.getJSONObject(i);
             String billid = rowjobj.optString("billid", "");   //Invoice ID 
             request.setAttribute("companyid", companyid);
             request.setAttribute("gcurrencyid", gcurrencyid);
             request.setAttribute("billid", billid);
             DateFormat dateFormat=null;
             if(requestParams.containsKey(Constants.userdf) && requestParams.get(Constants.userdf) != null){
                  dateFormat=(DateFormat)requestParams.get(Constants.userdf);
                  request.setAttribute(Constants.userdf,dateFormat);
             }
             JSONArray DataRowsArr = null;
             DataRowsArr = getPurchaseReturnRows(request).getJSONArray("data");
             tempArray.put(rowjobj);
             rowjobj.put("type","");
             for (int j = 0; j < DataRowsArr.length(); j++) {
                 JSONObject tempjobj = new JSONObject();
                 tempjobj = DataRowsArr.getJSONObject(j);
                 exportDaoObj.editJsonKeyForExcelFile(tempjobj, Constants.Acc_Purchase_Return_ModuleId);
                 tempArray.put(tempjobj);
             }
         }
        return tempArray;
    } 
  public ModelAndView exportSinglePurchaseReturn(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        String view = "jsonView-empty";
        try {
            JSONObject requestObj = StringUtil.convertRequestToJsonObject(request);
            HashMap<String, Object>otherconfigrequestParams = new HashMap();
            String vqID = requestObj.optString("bills");
            String companyid = requestObj.optString(Constants.companyKey);
            int moduleid = requestObj.optInt(Constants.moduleid);
            
            boolean isConsignment = requestObj.optBoolean("isConsignment", false);
            if (isConsignment) {
                moduleid = Constants.Acc_ConsignmentPurchaseReturn_ModuleId;
            }
            KwlReturnObject objItr = accountingHandlerDAOobj.getObject(PurchaseReturn.class.getName(), vqID);
            PurchaseReturn pr  = (PurchaseReturn) objItr.getEntityList().get(0);
             AccCustomData  accCustomData = null;
            if (pr.getPurchaseReturnCustomData()!= null) {
                accCustomData = pr.getPurchaseReturnCustomData();
            }
            String recordids = requestObj.optString("recordids");
            ArrayList<String> vqIDList = CustomDesignHandler.getSelectedBillIDs(recordids);  
            
            HashMap<String, JSONArray> itemDataSalesReturn = new HashMap<String, JSONArray>();
            for (int count = 0; count < vqIDList.size(); count++) {
                JSONArray lineItemsArr = accGoodsReceiptCommon.getPurchaseReturnDetailsItemJSON(requestObj, vqIDList.get(count), moduleid);
                itemDataSalesReturn.put(vqIDList.get(count), lineItemsArr);
                
                // Below Function called to update print flag for PR Report
                accCommonTablesDAO.updatePrintFlag(moduleid, vqIDList.get(count), companyid);
            }
            otherconfigrequestParams.put(Constants.moduleid, moduleid);
            otherconfigrequestParams.put(Constants.isConsignment, isConsignment);
            String vqPostText = pr.getPostText() == null ? "" : pr.getPostText();
            ExportRecordHandler.exportSingleGeneric(request, response,itemDataSalesReturn,accCustomData,customDesignDAOObj,accCommonTablesDAO,accAccountDAOobj, accountingHandlerDAOobj,velocityEngine,vqPostText,otherconfigrequestParams,accInvoiceServiceDAO,accGoodsReceiptServiceDAO);

        } catch (Exception ex) {
            Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
        }
        return new ModelAndView(view, "model", jobj.toString());
    }
    
   
    
    public ModelAndView updatePurchaseReturnFavourite(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        boolean issuccess = false;
        String msg = "";
        DefaultTransactionDefinition def = new DefaultTransactionDefinition();
        def.setName("IC_Tx");
        def.setPropagationBehavior(TransactionDefinition.PROPAGATION_REQUIRED);
    
        TransactionStatus status = txnManager.getTransaction(def);
        try {
            KwlReturnObject result = null;
            HashMap<String, Object> doDataMap = new HashMap<String, Object>();
            String id = request.getParameter("id");
            String companyid = sessionHandlerImpl.getCompanyid(request);
            doDataMap.put("companyid", companyid);
            doDataMap.put("orderdate", new Date(request.getParameter("date")));
            doDataMap.put("id", id);
            doDataMap.put("isfavourite", request.getParameter("isfavourite"));
            if (!StringUtil.isNullOrEmpty(id)) {
                result = accGoodsReceiptobj.savePurchaseReturn(doDataMap);
            }
            msg = "set successfully.";
            issuccess = true;
            txnManager.commit(status);
        } catch (ServiceException | SessionExpiredException ex) {
            txnManager.rollback(status);
            issuccess = false;
            msg = ex.getMessage();
            Logger.getLogger(accGoodsReceiptControllerCMN.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
        } finally {
            try {
                jobj.put("success", issuccess);
                jobj.put("msg", msg);
            } catch (JSONException ex) {
                Logger.getLogger(accGoodsReceiptControllerCMN.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
            }
        }
        return new ModelAndView("jsonView", "model", jobj.toString());
    }
     
    //Neeraj Change 
    //export single record of Vendor Invoice  
    public ModelAndView exportSingleGoodsReceipt(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        String view = "jsonView-empty";
        try {
            HashMap<String, Object>otherconfigrequestParams = new HashMap();
            String goodsReceiptID = request.getParameter("bills");
            String recordids = "";
            int moduleid = 0;
            if(!StringUtil.isNullOrEmpty(request.getParameter("recordids")))
                recordids = request.getParameter("recordids");
            if(!StringUtil.isNullOrEmpty(request.getParameter(Constants.moduleid))){
                moduleid=Integer.parseInt(request.getParameter(Constants.moduleid));
            }
            //change module id for asset module
            boolean isFixedAsset = false;
            if (!StringUtil.isNullOrEmpty(request.getParameter(Constants.isFixedAsset))) {
                isFixedAsset = Boolean.parseBoolean(request.getParameter(Constants.isFixedAsset));
            }
            if(isFixedAsset){
                moduleid = Constants.Acc_FixedAssets_PurchaseInvoice_ModuleId;
            }
            ArrayList<String> goodsReceiptIDList = CustomDesignHandler.getSelectedBillIDs(recordids);
            String companyid = AccountingManager.getCompanyidFromRequest(request);
            KwlReturnObject objItr = accountingHandlerDAOobj.getObject(GoodsReceipt.class.getName(), goodsReceiptID);
            GoodsReceipt goodsReceipt = (GoodsReceipt) objItr.getEntityList().get(0);
            AccCustomData accCustomData = null;
            HashMap<String, Object> fieldrequestParams = new HashMap();
            fieldrequestParams.put(Constants.filter_names, Arrays.asList(Constants.companyid, Constants.moduleid, Constants.customcolumn));
            fieldrequestParams.put(Constants.filter_values, Arrays.asList(companyid, moduleid, 1));
            HashMap<String, String> replaceFieldMap = new HashMap<String, String>();
            HashMap<String, Integer> FieldMap = accAccountDAOobj.getFieldParamsMap(fieldrequestParams, replaceFieldMap);
            replaceFieldMap = new HashMap<String, String>();
            HashMap<String, JSONArray>  itemDataAgainstGoodsReceipt = new HashMap<String, JSONArray>();
             /*
             * Dimensions----Customcolumn=1-lineitem;Customfield=0=Dimension
             */
            fieldrequestParams.clear();
            HashMap<String, String> dimensionFieldMap = new HashMap<String, String>();
            fieldrequestParams.put(Constants.filter_names, Arrays.asList(Constants.companyid, Constants.moduleid, Constants.customcolumn,Constants.customfield));
            fieldrequestParams.put(Constants.filter_values, Arrays.asList(companyid, moduleid,1,0));
            HashMap<String, Integer> DimensionFieldMap = accAccountDAOobj.getFieldParamsMap(fieldrequestParams,dimensionFieldMap);
           
            fieldrequestParams.clear();
            HashMap<String, String> customfieldFieldMap = new HashMap<String, String>();
            fieldrequestParams.put(Constants.filter_names, Arrays.asList(Constants.companyid, Constants.moduleid, Constants.customcolumn, Constants.customfield));
            fieldrequestParams.put(Constants.filter_values, Arrays.asList(companyid, moduleid, 1, 1));
            HashMap<String, Integer> LineLevelCustomFieldMap = accAccountDAOobj.getFieldParamsMap(fieldrequestParams, customfieldFieldMap);
            //reset module id
            if(isFixedAsset){
                moduleid = Constants.Acc_Vendor_Invoice_ModuleId;
            }
              //For product custom field
            fieldrequestParams.clear();
            HashMap<String, String> productCustomfieldFieldMap = new HashMap<String, String>();
            fieldrequestParams.put(Constants.filter_names, Arrays.asList(Constants.companyid, Constants.moduleid, Constants.customcolumn));
            fieldrequestParams.put(Constants.filter_values, Arrays.asList(companyid, Constants.Acc_Product_Master_ModuleId, 0));
            HashMap<String, Integer> ProductLevelCustomFieldMap = accAccountDAOobj.getFieldParamsMap(fieldrequestParams, productCustomfieldFieldMap);
        
            HashMap<String, Object> paramMap = new HashMap();
            paramMap.put(Constants.fieldMap, FieldMap);
            paramMap.put(Constants.replaceFieldMap, replaceFieldMap);
            paramMap.put(Constants.dimensionFieldMap, DimensionFieldMap);
            paramMap.put(Constants.lineLevelCustomFieldMap, LineLevelCustomFieldMap);
            paramMap.put(Constants.productLevelCustomFieldMap, ProductLevelCustomFieldMap);
            JSONObject requestObj = StringUtil.convertRequestToJsonObject(request);
            
            for(int count=0 ; count < goodsReceiptIDList.size() ; count++ ){
                JSONArray lineItemsArr = accGoodsReceiptCommon.getGoodsReceiptDetailsItemJSON(requestObj, goodsReceiptIDList.get(count), paramMap);
                itemDataAgainstGoodsReceipt.put(goodsReceiptIDList.get(count), lineItemsArr);

                // Below Function called to update print flag for GR Report
                accCommonTablesDAO.updatePrintFlag(moduleid, goodsReceiptIDList.get(count), companyid);
            }
            otherconfigrequestParams.put(Constants.moduleid, moduleid);
            String goodsReceiptPostText = goodsReceipt.getPostText() == null ? "" : goodsReceipt.getPostText();
            ExportRecordHandler.exportSingleGeneric(request, response, itemDataAgainstGoodsReceipt, accCustomData, customDesignDAOObj,accCommonTablesDAO, accAccountDAOobj, accountingHandlerDAOobj, velocityEngine, goodsReceiptPostText,otherconfigrequestParams,accInvoiceServiceDAO,accGoodsReceiptServiceDAO);
        } catch (SessionExpiredException ex) {
            Logger.getLogger(accGoodsReceiptControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            Logger.getLogger(accGoodsReceiptControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
        }
        return new ModelAndView(view, "model", jobj.toString());
    }

   //Vendor Quotation
     public ModelAndView exportSingleVendorQuotation(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        String view = "jsonView-empty";
        try {
            JSONObject requestObj = StringUtil.convertRequestToJsonObject(request);
            HashMap<String, Object>otherconfigrequestParams = new HashMap();
            String vqID = requestObj.optString("bills");
            String companyid = requestObj.optString(Constants.companyKey);
            int moduleid = requestObj.optInt(Constants.moduleid, 0);
            //change module id for asset module.
            boolean isFixedAsset = requestObj.optBoolean(Constants.isFixedAsset);
            if(isFixedAsset){
                moduleid = Constants.Acc_FixedAssets_Vendor_Quotation_ModuleId;
            }
            String recordids = requestObj.optString("recordids");
            ArrayList<String> vqIDList = CustomDesignHandler.getSelectedBillIDs(recordids);

            KwlReturnObject objItr = accountingHandlerDAOobj.getObject(VendorQuotation.class.getName(), vqID);
            VendorQuotation vendorquotation = (VendorQuotation) objItr.getEntityList().get(0);
            AccCustomData  accCustomData = null;

            HashMap<String, Object> fieldrequestParams = new HashMap();
            fieldrequestParams.put(Constants.filter_names, Arrays.asList(Constants.companyid, Constants.moduleid, Constants.customcolumn));
            fieldrequestParams.put(Constants.filter_values, Arrays.asList(companyid, moduleid, 1));
            HashMap<String, String> replaceFieldMap = new HashMap<String, String>();
            HashMap<String, Integer> FieldMap = accAccountDAOobj.getFieldParamsMap(fieldrequestParams, replaceFieldMap);
            replaceFieldMap = new HashMap<String, String>();
              /*
             * Dimensions----Customcolumn=1-lineitem;Customfield=0=Dimension
             */
            fieldrequestParams.clear();
            HashMap<String, String> dimensionFieldMap = new HashMap<String, String>();
            fieldrequestParams.put(Constants.filter_names, Arrays.asList(Constants.companyid, Constants.moduleid, Constants.customcolumn,Constants.customfield));
            fieldrequestParams.put(Constants.filter_values, Arrays.asList(companyid, moduleid,1,0));
            HashMap<String, Integer> DimensionFieldMap = accAccountDAOobj.getFieldParamsMap(fieldrequestParams,dimensionFieldMap);
            
            fieldrequestParams.clear();
            HashMap<String, String> customfieldFieldMap = new HashMap<String, String>();
            fieldrequestParams.put(Constants.filter_names, Arrays.asList(Constants.companyid, Constants.moduleid, Constants.customcolumn, Constants.customfield));
            fieldrequestParams.put(Constants.filter_values, Arrays.asList(companyid, moduleid, 1, 1));
            HashMap<String, Integer> LineLevelCustomFieldMap = accAccountDAOobj.getFieldParamsMap(fieldrequestParams, customfieldFieldMap);
            //reset module id
            if(isFixedAsset){
                moduleid = Constants.Acc_Vendor_Quotation_ModuleId;
            }
            //For product custom field
            fieldrequestParams.clear();
            HashMap<String, String> productCustomfieldFieldMap = new HashMap<String, String>();
            fieldrequestParams.put(Constants.filter_names, Arrays.asList(Constants.companyid, Constants.moduleid, Constants.customcolumn));
            fieldrequestParams.put(Constants.filter_values, Arrays.asList(companyid, Constants.Acc_Product_Master_ModuleId, 0));
            HashMap<String, Integer> ProductLevelCustomFieldMap = accAccountDAOobj.getFieldParamsMap(fieldrequestParams, productCustomfieldFieldMap);

            HashMap<String, JSONArray>  itemDataVendorQuotation = new HashMap<String, JSONArray>();
            
            HashMap<String, Object> paramMap = new HashMap();
            paramMap.put(Constants.fieldMap, FieldMap);
            paramMap.put(Constants.replaceFieldMap, replaceFieldMap);
            paramMap.put(Constants.dimensionFieldMap, DimensionFieldMap);
            paramMap.put(Constants.lineLevelCustomFieldMap, LineLevelCustomFieldMap);
            paramMap.put(Constants.productLevelCustomFieldMap, ProductLevelCustomFieldMap);
            
            for(int count=0 ; count < vqIDList.size() ; count++ ){
                JSONArray lineItemsArr = accGoodsReceiptCommon.getVendorQuotationDetailsItemJSON(requestObj, vqIDList.get(count), paramMap);
                itemDataVendorQuotation.put(vqIDList.get(count), lineItemsArr); 

                // Below Function called to update print flag for VQ Report
                accCommonTablesDAO.updatePrintFlag(moduleid, vqIDList.get(count), companyid);
            }
            
            otherconfigrequestParams.put(Constants.moduleid, moduleid);
            String vqPostText = vendorquotation.getPostText() == null ? "" : vendorquotation.getPostText();
            ExportRecordHandler.exportSingleGeneric(request, response,itemDataVendorQuotation,accCustomData,customDesignDAOObj,accCommonTablesDAO,accAccountDAOobj, accountingHandlerDAOobj,velocityEngine,vqPostText,otherconfigrequestParams,accInvoiceServiceDAO,accGoodsReceiptServiceDAO);
        } catch (SessionExpiredException ex) {
            Logger.getLogger(accGoodsReceiptControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            Logger.getLogger(accGoodsReceiptControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
        }
        return new ModelAndView(view, "model", jobj.toString());
    }

   public void exportSingleDebitNote(HttpServletRequest request, HttpServletResponse response) throws ServiceException, SessionExpiredException {
       try {
           JSONObject requestObj = StringUtil.convertRequestToJsonObject(request);
            HashMap<String, Object>otherconfigrequestParams = new HashMap();
            String SOID = requestObj.optString("bills");
            String companyid = requestObj.optString(Constants.companyKey);
            int moduleid = requestObj.optInt(Constants.moduleid, 0);

            KwlReturnObject objItr = accountingHandlerDAOobj.getObject(DebitNote.class.getName(), SOID);
            AccCustomData accCustomData = null;
            String recordids = requestObj.optString("recordids");
            ArrayList<String> SOIDList = CustomDesignHandler.getSelectedBillIDs(recordids);
            HashMap<String, Object> fieldrequestParams = new HashMap();
            fieldrequestParams.put(Constants.filter_names, Arrays.asList(Constants.companyid, Constants.moduleid, Constants.customcolumn));
            fieldrequestParams.put(Constants.filter_values, Arrays.asList(companyid, Constants.Acc_Debit_Note_ModuleId, 1));
            HashMap<String, String> replaceFieldMap = new HashMap<String, String>();
            HashMap<String, Integer> FieldMap = accAccountDAOobj.getFieldParamsMap(fieldrequestParams, replaceFieldMap);
            replaceFieldMap = new HashMap<String, String>();

            /*
             * Dimensions----Customcolumn=1-lineitem;Customfield=0=Dimension
             */
            fieldrequestParams.clear();
            HashMap<String, String> dimensionFieldMap = new HashMap<String, String>();
            fieldrequestParams.put(Constants.filter_names, Arrays.asList(Constants.companyid, Constants.moduleid, Constants.customcolumn, Constants.customfield));
            fieldrequestParams.put(Constants.filter_values, Arrays.asList(companyid, Constants.Acc_Debit_Note_ModuleId, 1, 0));
            HashMap<String, Integer> DimensionFieldMap = accAccountDAOobj.getFieldParamsMap(fieldrequestParams, dimensionFieldMap);

            fieldrequestParams.clear();
            HashMap<String, String> customfieldFieldMap = new HashMap<String, String>();
            fieldrequestParams.put(Constants.filter_names, Arrays.asList(Constants.companyid, Constants.moduleid, Constants.customcolumn, Constants.customfield));
            fieldrequestParams.put(Constants.filter_values, Arrays.asList(companyid, Constants.Acc_Debit_Note_ModuleId, 1, 1));
            HashMap<String, Integer> LineLevelCustomFieldMap = accAccountDAOobj.getFieldParamsMap(fieldrequestParams, customfieldFieldMap);

            HashMap<String, JSONArray> itemDataDebitNote = new HashMap<String, JSONArray>();
            
            HashMap<String, Object> paramMap = new HashMap();
            paramMap.put(Constants.fieldMap, FieldMap);
            paramMap.put(Constants.replaceFieldMap, replaceFieldMap);
            paramMap.put(Constants.dimensionFieldMap, DimensionFieldMap);
            paramMap.put(Constants.lineLevelCustomFieldMap, LineLevelCustomFieldMap);
            
            for (int count = 0; count < SOIDList.size(); count++) {
                JSONArray lineItemsArr = getDNDetailsItemJSON(requestObj, SOIDList.get(count), paramMap);
                itemDataDebitNote.put(SOIDList.get(count), lineItemsArr);

                // Below Function called to update print flag for DN Report
                accCommonTablesDAO.updatePrintFlag(moduleid, SOIDList.get(count), companyid);
            }

            otherconfigrequestParams.put(Constants.moduleid, moduleid);
            String invoicePostText = "";
            ExportRecordHandler.exportSingleGeneric(request, response, itemDataDebitNote, accCustomData, customDesignDAOObj,accCommonTablesDAO, accAccountDAOobj, accountingHandlerDAOobj, velocityEngine, invoicePostText,otherconfigrequestParams,accInvoiceServiceDAO,accGoodsReceiptServiceDAO);
       } catch (JSONException ex) {
           Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
       }
    }
     
    public JSONArray getSODetailsItemJSON(HttpServletRequest request, String companyid, String SOID, HashMap<String, Integer> FieldMap, HashMap<String, String> replaceFieldMap) {
        JSONArray jArr = new JSONArray();
        try {
            double total = 0;
            HashMap<String, Object> soRequestParams = new HashMap<String, Object>();
            ArrayList filter_names = new ArrayList(), filter_params = new ArrayList(), order_by = new ArrayList(), order_type = new ArrayList();
            int countryLanguageId = Constants.OtherCountryLanguageId; // 0
            KwlReturnObject extraprefresult = accountingHandlerDAOobj.getObject(ExtraCompanyPreferences.class.getName(), companyid);
            ExtraCompanyPreferences extraCompanyPreferences = extraprefresult != null ? (ExtraCompanyPreferences) extraprefresult.getEntityList().get(0) : null;
            if (extraCompanyPreferences.isAmountInIndianWord()) {
                countryLanguageId = Constants.CountryIndiaLanguageId; //for india id is 1;
            }

            KwlReturnObject curresult = accountingHandlerDAOobj.getObject(KWLCurrency.class.getName(), sessionHandlerImpl.getCurrencyID(request));
            KwlReturnObject cap = kwlCommonTablesDAOObj.getObject(DebitNote.class.getName(), SOID);
            DebitNote debitNote = (DebitNote) cap.getEntityList().get(0);
            Set<JournalEntryDetail> entryset = new HashSet<JournalEntryDetail>();

            if (debitNote.isNormalDN()) {
                entryset = debitNote.getJournalEntry().getDetails();
            }
            Customer customerObj = new Customer();
            Iterator itr = entryset.iterator();
            Account cEntry = null;
            KWLCurrency currency = (KWLCurrency) curresult.getEntityList().get(0);
            if (itr != null) {
                while (itr.hasNext()) {
                    cEntry = ((JournalEntryDetail) itr.next()).getAccount();
                    customerObj = (Customer) kwlCommonTablesDAOObj.getClassObject(Customer.class.getName(), cEntry.getID());
                    if (customerObj != null) {
                        break;
                    }
                }
            }
            double taxMain = 0;
            double discountMain = 0;
            double subTotal = 0;

            filter_names.add("debitNote.ID");
            filter_params.add(debitNote.getID());
            soRequestParams.put("filter_names", filter_names);
            soRequestParams.put("filter_params", filter_params);
            KwlReturnObject idresult = null;
            idresult = accDebitNoteobj.getDebitNoteDetails(soRequestParams);
            itr = idresult.getEntityList().iterator();
            DebitNoteDetail row = null;
            boolean otherwiseFlag = false;
            double quantity = 0;
            Discount discount = null;
            String uom = "";
            if (!StringUtil.isNullOrEmpty(request.getParameter("otherwise"))) {
                otherwiseFlag = Boolean.parseBoolean(request.getParameter("otherwise"));
            }
            while (itr.hasNext()) {

                Product product = null;
                row = (DebitNoteDetail) itr.next();
                if (!otherwiseFlag) {
                    product = row.getGoodsReceiptRow().getInventory().getProduct();
                    quantity = row.getQuantity();
                    if (row.getDiscount() != null) {
                        if (row.getTotalDiscount() != null) {
                            discountMain = discountMain + row.getTotalDiscount();
                            total = total - row.getTotalDiscount();
                        }
                        discount = row.getDiscount();
                    }
                    if (row.getTaxAmount() != null) {
                        taxMain = taxMain + row.getTaxAmount();
                        total = total + row.getTaxAmount();
                    }
                    try {
                        uom = row.getGoodsReceiptRow().getInventory().getProduct().getUnitOfMeasure() == null ? "" : row.getGoodsReceiptRow().getInventory().getProduct().getUnitOfMeasure().getNameEmptyforNA();
                    } catch (Exception ex) {//In case of exception use uom="";
                    }
                } 
                subTotal += discount.getDiscountValue();
                total += discount.getDiscountValue();
                JSONObject obj = new JSONObject();
                obj.put("1", product.getName());// productname
                obj.put("type", product.getProducttype() == null ? "" : product.getName());
                obj.put("2", StringUtil.isNullOrEmpty(product.getDescription()) ? "" : product.getDescription());//Product Description
                obj.put("4", quantity + " " + uom); // Quantity
                obj.put("6", discount.getDiscountValue());// Discount
                obj.put("8", debitNote.getCurrency().getCurrencyCode());
                obj.put("orignalamount", subTotal);
                jArr.put(obj);
            }


            String netinword = "";
            netinword = EnglishNumberToWordsOjb.convert(Double.parseDouble(String.valueOf(total)), currency, countryLanguageId);

            JSONObject summaryData = new JSONObject();
            summaryData.put("summarydata", true);
            summaryData.put("11", total);
            summaryData.put("12", subTotal);
            summaryData.put("13", discountMain);
            summaryData.put("14", taxMain);
            summaryData.put("15", netinword + " Only.");
            jArr.put(summaryData);
        } catch (Exception ex) {
        }
        return jArr;
    }
     
 public void exportDebitNoteJasperReport(HttpServletRequest request, HttpServletResponse response) 
    {
        try {
            List jasperPrint = accExportReportsServiceDAOobj.exportDebitNoteJasperReport(request, response);
            JRPdfExporter exp = new JRPdfExporter();
            exp.setParameter(JRExporterParameter.JASPER_PRINT_LIST, jasperPrint);
            exp.setParameter(JRPdfExporterParameter.OUTPUT_STREAM, response.getOutputStream());
            
            exp.exportReport();
        } catch (Exception e) {
            Logger.getLogger(accGoodsReceiptController.class.getName()).log(Level.SEVERE, null, e);
        }
        
    }
    public void exportGCBDebittNoteJasperReport(HttpServletRequest request, HttpServletResponse response) 
    {
        try {
            List jasperPrint = accExportOtherReportsServiceDAOobj.exportGCBDebittNoteJasperReport(request, response);
            JRPdfExporter exp = new JRPdfExporter();
            exp.setParameter(JRExporterParameter.JASPER_PRINT_LIST, jasperPrint);
            exp.setParameter(JRPdfExporterParameter.OUTPUT_STREAM, response.getOutputStream());
            
            exp.exportReport();
        } catch (Exception e) {
            Logger.getLogger(accGoodsReceiptController.class.getName()).log(Level.SEVERE, null, e);
        }
        
    }
  public JSONArray getDNDetailsItemJSON(JSONObject requestObj, String SOID, HashMap<String, Object> paramMap) {

        JSONArray jArr = new JSONArray();
        try {
            HashMap<String, Integer> FieldMap = (HashMap<String, Integer>) paramMap.get(Constants.fieldMap);
            HashMap<String, String> replaceFieldMap = (HashMap<String, String>) paramMap.get(Constants.replaceFieldMap);
            HashMap<String, Integer> DimensionFieldMap = (HashMap<String, Integer>) paramMap.get(Constants.dimensionFieldMap);
            HashMap<String, Integer> LineLevelCustomFieldMap = (HashMap<String, Integer>) paramMap.get(Constants.lineLevelCustomFieldMap);
            String companyid = requestObj.optString(Constants.companyKey);
            JSONArray accJSONArr = new JSONArray();
            JSONArray invJSONArr = new JSONArray();
            JSONObject summaryData = new JSONObject();
            List<Object> list = new ArrayList<Object>();
            JSONArray dbCustomJSONArr = new JSONArray();
            int count = 1;
            String netinword = "", globallevelcustomfields = "", globalleveldimensions = "";
            HashMap<String, Object> requestParams = AccountingManager.getGlobalParams(requestObj);
            HashMap<String, Object> soRequestParams = new HashMap<String, Object>();
            ArrayList filter_names = new ArrayList(), filter_params = new ArrayList(), order_by = new ArrayList(), order_type = new ArrayList();
            PdfTemplateConfig config = null;
            String templateid = requestObj.optString("templateid");
            KwlReturnObject tempResult = customDesignDAOObj.getDesignTemplate(templateid);
            List list1 = tempResult.getEntityList();
            Object[] row = (Object[]) list1.get(0);
            String templateSubtype = row[8] != null ? row[8].toString() : "";
            DateFormat df = authHandler.getDateOnlyFormat();
            String invoicedates = "", billAddr = "", shipAddr = "", customerOrVendorTitle = "", VATTInnumber = "", CSTTInNumber = "", custOrVendorPanNumber = "";
            //variables to append all accounts and invoices fields 
            String invoiceNos = "";
            String invAmounts = "";
            String invTaxAmounts = "";
            String invAmountDues = "";
            String invEnterAmounts = "";
            double invoicesubtotal = 0;
            double invoicetotaltax = 0;
            double invoicetotalamount = 0;

            String accCodes = "";
            String accNames = "";
            String accTaxNames = "";
            String accAmounts = "";
            String accTaxAmounts = "", accAmountExcludeGST = "", gstin = "";
            String accAmountWithTaxes = "";
            String accDescriptions = "", accReason = "";
            String accTaxPercent = "";
            double accountsubtotal = 0;
            double accounttotaltax = 0, accounttaxamount = 0;
            double accounttotalamount = 0, accounttotalamountwithtax = 0;
            double accounttaxpercent = 0;
            double bascurrencyaccountsubtotal = 0, bascurrencyaccounttotaltax = 0, basecurrencyaccounttotalamount = 0;
            double bascurrencyinvoicesubtotal = 0, bascurrencyinvoicetotaltax = 0, basecurrencyinvoicetotalamount = 0;
            boolean isIncludeGST = false;
            String GSTExchangeRate = ""; //used for singapore GST where company has singapore country and base curreny other than SGD
            KwlReturnObject resultcompany = accountingHandlerDAOobj.getObject(CompanyAccountPreferences.class.getName(), companyid);
            CompanyAccountPreferences companyAccountPreferences = (CompanyAccountPreferences) resultcompany.getEntityList().get(0);
            KwlReturnObject extraprefresult = accountingHandlerDAOobj.getObject(ExtraCompanyPreferences.class.getName(), companyid);
            ExtraCompanyPreferences extraCompanyPreferences = (ExtraCompanyPreferences) extraprefresult.getEntityList().get(0);

            int countryLanguageId = Constants.OtherCountryLanguageId; // 0
            if (extraCompanyPreferences.isAmountInIndianWord()) {
                countryLanguageId = Constants.CountryIndiaLanguageId; //for india id is 1;
            }

            int countryid = 0;
            if (extraCompanyPreferences.getCompany() != null && extraCompanyPreferences.getCompany().getCountry() != null && !StringUtil.isNullOrEmpty(extraCompanyPreferences.getCompany().getCountry().getID())) {
                countryid = Integer.parseInt(extraCompanyPreferences.getCompany().getCountry().getID());
            }

            Product product = null;
            int quantitydigitafterdecimal = 2, amountdigitafterdecimal = 2, unitpricedigitafterdecimal = 2;
            KwlReturnObject accResult = accAccountDAOobj.quotationindecimalforcompany(companyid);
            if (accResult.getEntityList().get(0) != null) {
                Object[] decimalcontact = (Object[]) accResult.getEntityList().get(0);
                if (decimalcontact[1] != null) {
                    quantitydigitafterdecimal = (Integer) decimalcontact[1];
                }
                if (decimalcontact[2] != null) {//getting amount in decimal value from companyaccpreferences
                    amountdigitafterdecimal = (Integer) decimalcontact[2];
                }
                if (decimalcontact[3] != null) {
                    unitpricedigitafterdecimal = Integer.parseInt(decimalcontact[3].toString());
                }
            }
            
            KwlReturnObject curresult = accountingHandlerDAOobj.getObject(KWLCurrency.class.getName(), requestObj.optString(Constants.globalCurrencyKey));
            KwlReturnObject cap = kwlCommonTablesDAOObj.getObject(DebitNote.class.getName(), SOID);
            
            DebitNote debitNote = (DebitNote) cap.getEntityList().get(0);
            Set<JournalEntryDetail> entryset = debitNote.getJournalEntry().getDetails();
            Customer customerObj = new Customer();
            Vendor vendorObj = new Vendor();
            Iterator itr = entryset.iterator();
            Account cEntry = null;
            KWLCurrency currency = (KWLCurrency) curresult.getEntityList().get(0);
            //document currency
            if (debitNote != null && debitNote.getCurrency() != null && !StringUtil.isNullOrEmpty(debitNote.getCurrency().getCurrencyID())) {
                summaryData.put(CustomDesignerConstants.DOCUMENT_CURRENCY_ID, debitNote.getCurrency().getCurrencyID());
            }
            /**
             * get customer/vendor title (Mr./Mrs.)
             */
            if (debitNote.getCustomer() != null) {
                customerOrVendorTitle = debitNote.getCustomer().getTitle();
                VATTInnumber = debitNote.getCustomer().getVATTINnumber() != null ? debitNote.getCustomer().getVATTINnumber() : "";
                CSTTInNumber = debitNote.getCustomer().getCSTTINnumber() != null ? debitNote.getCustomer().getCSTTINnumber() : "";
                custOrVendorPanNumber = debitNote.getCustomer().getPANnumber() != null ? debitNote.getCustomer().getPANnumber() : "";
                gstin = debitNote.getCustomer().getGSTIN() != null ? debitNote.getCustomer().getGSTIN() : "";
            } else if (debitNote.getVendor() != null) {
                customerOrVendorTitle = debitNote.getVendor().getTitle();
                VATTInnumber = debitNote.getVendor().getVATTINnumber() != null ? debitNote.getVendor().getVATTINnumber() : "";
                CSTTInNumber = debitNote.getVendor().getCSTTINnumber() != null ? debitNote.getVendor().getCSTTINnumber() : "";
                custOrVendorPanNumber = debitNote.getVendor().getPANnumber() != null ? debitNote.getVendor().getPANnumber() : "";
                gstin = debitNote.getVendor().getGSTIN() != null ? debitNote.getVendor().getGSTIN() : "";
            }
            if (!StringUtil.isNullOrEmpty(customerOrVendorTitle)) {
                KwlReturnObject masterItemResult = accountingHandlerDAOobj.getObject(MasterItem.class.getName(), customerOrVendorTitle);
                MasterItem masterItem = (MasterItem) masterItemResult.getEntityList().get(0);
                customerOrVendorTitle = masterItem.getValue();
            }
            while (itr.hasNext()) {
                cEntry = ((JournalEntryDetail) itr.next()).getAccount();
                customerObj = (Customer) kwlCommonTablesDAOObj.getClassObject(Customer.class.getName(), cEntry.getID());
                vendorObj = (Vendor) kwlCommonTablesDAOObj.getClassObject(Vendor.class.getName(), cEntry.getID());
                if (customerObj != null || vendorObj != null) {
                    break;
                }
            }

            //Calculating account grid and its values
            String debitNoteId = SOID;
            String debitterm = "", venAccountNo = "";
            double subtotal = 0;
            double totaltax = 0;
            double totalamount = 0;
            String allLineLevelTax = "", allLineLevelTaxAmount = "", allLineLevelTaxBasic = "", taxName = "", taxPercent = "", taxAmount = "";
            Set<String> lineLevelTaxesGST = new HashSet<String>();
            Map<String, Object> lineLevelTaxAmountGST = new HashMap<String, Object>();
            Map<String, Object> lineLevelTaxPercentGST = new HashMap<String, Object>();
            Map<String, Object> lineLevelTaxBasicGST = new HashMap<String, Object>();
            Map<String,Double> lineLevelTaxNames = new LinkedHashMap<String,Double>();

            boolean isOtherwise = false;
            KwlReturnObject result = accountingHandlerDAOobj.getObject(DebitNote.class.getName(), debitNoteId);
            DebitNote dn = (DebitNote) result.getEntityList().get(0);
            isIncludeGST = dn.isIncludingGST();

            /*
             * ExchangeRate values
             */
            double externalcurrency = dn.getExternalCurrencyRate();
            double revExchangeRate = 0.0;
            if (externalcurrency != 0) {
                revExchangeRate = 1 / externalcurrency;
            }

            if (dn != null) {
                 /*
                 *  Template Sub Type 
                 *   0 - Debit Note
                 *   1 - Debit Note with Purchase Return 
                 *   7 - Undercharged CN
                 *   8 - Overcharged CN
                 */
                if (!templateSubtype.equals("1") && !templateSubtype.equals(CustomDesignerConstants.UNDERCHARGE_SUBTYPE) && !templateSubtype.equals(CustomDesignerConstants.OVERCHARGE_SUBTYPE)) {
                    Set<DebitNoteTaxEntry> dnTaxEntryDetails = dn.getDnTaxEntryDetails();
                    if (dnTaxEntryDetails != null && !dnTaxEntryDetails.isEmpty()) {

                        HashMap<String, Object> fieldrequestParams = new HashMap();
                        HashMap<String, String> customFieldMap = new HashMap<String, String>();
                        HashMap<String, String> customDateFieldMap = new HashMap<String, String>();
                        fieldrequestParams.put(Constants.filter_names, Arrays.asList(Constants.companyid, Constants.moduleid));
                        fieldrequestParams.put(Constants.filter_values, Arrays.asList(dn.getCompany().getCompanyID(), Constants.Acc_Debit_Note_ModuleId));
                        HashMap<String, String> replaceFieldMap1 = new HashMap<String, String>();
                        HashMap<String, Integer> FieldMap1 = accAccountDAOobj.getFieldParamsCustomMap(fieldrequestParams, replaceFieldMap1, customFieldMap, customDateFieldMap);

                        for (DebitNoteTaxEntry noteTaxEntry : dnTaxEntryDetails) {
                            String lineLevelTax = "";
                            String lineLevelTaxPercent = "";
                            String lineLevelTaxAmount = "";
                            double lineLevelTaxAmountTotal = 0;
                            JSONObject obj = new JSONObject();
                            if(extraCompanyPreferences.isIsNewGST()){ // for New gst check 
                                JSONObject json = new JSONObject();
                                json.put("debitNoteTaxEntry", noteTaxEntry.getID());
                                KwlReturnObject dnTermResult = accDebitNoteobj.getDebitNoteDetailTermMap(json);
                                if (dnTermResult.getEntityList() != null && dnTermResult.getEntityList().size() > 0 && dnTermResult.getEntityList().get(0) != null) {
                                    ArrayList<DebitNoteDetailTermMap> productTermDetail = (ArrayList<DebitNoteDetailTermMap>) dnTermResult.getEntityList();
                                    JSONArray productTermJsonArry = new JSONArray();
                                    double termAccount = 0.0;
                                    obj.put(CustomDesignerConstants.CGSTPERCENT, 0);
                                    obj.put(CustomDesignerConstants.CGSTAMOUNT, 0);
                                    obj.put(CustomDesignerConstants.IGSTPERCENT, 0);
                                    obj.put(CustomDesignerConstants.IGSTAMOUNT, 0);
                                    obj.put(CustomDesignerConstants.SGSTPERCENT, 0);
                                    obj.put(CustomDesignerConstants.SGSTAMOUNT, 0);
                                    obj.put(CustomDesignerConstants.UTGSTPERCENT, 0);
                                    obj.put(CustomDesignerConstants.UTGSTAMOUNT, 0);
                                    obj.put(CustomDesignerConstants.CESSPERCENT, 0);
                                    obj.put(CustomDesignerConstants.CESSAMOUNT, 0);
                                    for (DebitNoteDetailTermMap productTermsMapObj : productTermDetail) {
                                        LineLevelTerms mt = productTermsMapObj.getEntitybasedLineLevelTermRate().getLineLevelTerms();
                                        if (mt.getTerm().contains(CustomDesignerConstants.CGST)) {
                                            obj.put(CustomDesignerConstants.CGSTPERCENT, productTermsMapObj.getPercentage());
                                            obj.put(CustomDesignerConstants.CGSTAMOUNT, productTermsMapObj.getTermamount());
    //                                        gstTaxSummaryDetailsTableData.put(CustomDesignerConstants.CGSTPERCENT, productTermsMapObj.getPercentage());
    //                                        gstTaxSummaryDetailsTableData.put(CustomDesignerConstants.CGSTAMOUNT, productTermsMapObj.getTermamount());
                                        } else if (mt.getTerm().contains(CustomDesignerConstants.IGST)) {
                                            obj.put(CustomDesignerConstants.IGSTPERCENT, productTermsMapObj.getPercentage());
                                            obj.put(CustomDesignerConstants.IGSTAMOUNT, productTermsMapObj.getTermamount());
    //                                        gstTaxSummaryDetailsTableData.put(CustomDesignerConstants.IGSTPERCENT, productTermsMapObj.getPercentage());
    //                                        gstTaxSummaryDetailsTableData.put(CustomDesignerConstants.IGSTAMOUNT, productTermsMapObj.getTermamount());
                                        } else if (mt.getTerm().contains(CustomDesignerConstants.SGST)) {
                                            obj.put(CustomDesignerConstants.SGSTPERCENT, productTermsMapObj.getPercentage());
                                            obj.put(CustomDesignerConstants.SGSTAMOUNT, productTermsMapObj.getTermamount());
    //                                        gstTaxSummaryDetailsTableData.put(CustomDesignerConstants.SGSTPERCENT, productTermsMapObj.getPercentage());
    //                                        gstTaxSummaryDetailsTableData.put(CustomDesignerConstants.SGSTAMOUNT, productTermsMapObj.getTermamount());
                                        } else if (mt.getTerm().contains(CustomDesignerConstants.UTGST)) {
                                            obj.put(CustomDesignerConstants.UTGSTPERCENT, productTermsMapObj.getPercentage());
                                            obj.put(CustomDesignerConstants.UTGSTAMOUNT, productTermsMapObj.getTermamount());
    //                                        gstTaxSummaryDetailsTableData.put(CustomDesignerConstants.UTGSTPERCENT, productTermsMapObj.getPercentage());
    //                                        gstTaxSummaryDetailsTableData.put(CustomDesignerConstants.UTGSTAMOUNT, productTermsMapObj.getTermamount());
                                        } else if (mt.getTerm().contains(CustomDesignerConstants.CESS)) {
                                            obj.put(CustomDesignerConstants.CESSPERCENT, productTermsMapObj.getPercentage());
                                            obj.put(CustomDesignerConstants.CESSAMOUNT, productTermsMapObj.getTermamount());
    //                                        gstTaxSummaryDetailsTableData.put(CustomDesignerConstants.CESSPERCENT, productTermsMapObj.getPercentage());
    //                                        gstTaxSummaryDetailsTableData.put(CustomDesignerConstants.CESSAMOUNT, productTermsMapObj.getTermamount());
                                        } 

                                        lineLevelTax += mt.getTerm();
                                        lineLevelTax += "!##";

                                        lineLevelTaxPercent += authHandler.formattingDecimalForAmount(productTermsMapObj.getPercentage(), companyid);
                                        lineLevelTaxPercent += "!##";
                                        lineLevelTaxAmount += CustomDesignHandler.getAmountinCommaDecimal(productTermsMapObj.getTermamount(), amountdigitafterdecimal,countryid);
                                        /*
                                         * calculating total of line level taxes
                                         */
                                        lineLevelTaxAmountTotal += productTermsMapObj.getTermamount();
                                        lineLevelTaxAmount += "!##";
                                        if(lineLevelTaxNames.containsKey(mt.getTerm()) && lineLevelTaxNames.get(mt.getTerm())!=null){
                                            double value = lineLevelTaxNames.get(mt.getTerm());
                                            lineLevelTaxNames.put(mt.getTerm(),productTermsMapObj.getTermamount()+value );
                                        } else{
                                            lineLevelTaxNames.put(mt.getTerm(),productTermsMapObj.getTermamount());
                                        }
                                    }
                                }
                                if(noteTaxEntry.getProductid() != null){
                                    KwlReturnObject custresult = accountingHandlerDAOobj.getObject(Product.class.getName(), noteTaxEntry.getProductid());
                                    product = (Product) custresult.getEntityList().get(0);
                                }
                            }
                            
                            if(!StringUtil.isNullOrEmpty(lineLevelTax)){
                                lineLevelTax = lineLevelTax.substring(0, lineLevelTax.length()-3);
                            }
                            if(!StringUtil.isNullOrEmpty(lineLevelTaxPercent)){
                                lineLevelTaxPercent=lineLevelTaxPercent.substring(0, lineLevelTaxPercent.length()-3);
                            }
                            if(!StringUtil.isNullOrEmpty(lineLevelTaxAmount)){
                                lineLevelTaxAmount= lineLevelTaxAmount.substring(0, lineLevelTaxAmount.length()-3);
                            }
                            obj.put(CustomDesignerConstants.LineLevelTax, lineLevelTax);
                            obj.put(CustomDesignerConstants.LineLevelTaxAmount, lineLevelTaxAmount);
                            obj.put(CustomDesignerConstants.LineLevelTaxPercent, lineLevelTaxPercent);
                            
                            obj.put("accountid", noteTaxEntry.getAccount().getID());
                            obj.put(CustomDesignerConstants.CNDN_AccountCode_fieldTypeId, (noteTaxEntry.getAccount().getAcccode()) != null ? noteTaxEntry.getAccount().getAcccode() : "");                   // Account Code
                            obj.put(CustomDesignerConstants.CNDN_Account_fieldTypeId, (noteTaxEntry.getAccount()) != null ? noteTaxEntry.getAccount().getName() : "");                   // Account Name
                            obj.put(CustomDesignerConstants.CNDN_AccountTax_fieldTypeId, (noteTaxEntry.getTax() != null) ? noteTaxEntry.getTax().getName() : "");                       // Tax Name    
                            /*
                             * If in debit note isDebitForMultiCNDN true then values will be Negative
                             * If in debit note isDebitForMultiCNDN true then values will be Positive
                             */
                            int changevalue = 1;
                            if (noteTaxEntry.isDebitForMultiCNDN()) {
                                changevalue = -1;
                            }
                            obj.put(CustomDesignerConstants.CNDN_AccountAmount_fieldTypeId, changevalue * noteTaxEntry.getAmount());                                                                     // Amount
                            obj.put(CustomDesignerConstants.CNDN_AccountTaxAmount_fieldTypeId, changevalue * noteTaxEntry.getTaxamount());                                                                  // Tax Amount           
                            if (isIncludeGST) {//If isIncludeGSt true
                                obj.put(CustomDesignerConstants.CNDN_AccountAmountExcludeGST_fieldTypeId, authHandler.formattedAmount(changevalue * noteTaxEntry.getRateIncludingGst(), companyid));
                                obj.put(CustomDesignerConstants.CNDN_AccountTotalAmount_fieldTypeId, authHandler.formattedAmount(changevalue * noteTaxEntry.getAmount(), companyid));                                       // Amount with Tax 
                            } else {
                                obj.put(CustomDesignerConstants.CNDN_AccountAmountExcludeGST_fieldTypeId, authHandler.formattedAmount(changevalue * noteTaxEntry.getAmount(), companyid));
                                obj.put(CustomDesignerConstants.CNDN_AccountTotalAmount_fieldTypeId, authHandler.formattedAmount(changevalue * (noteTaxEntry.getAmount() + noteTaxEntry.getTaxamount()), companyid));         // Amount with Tax                               // Amount with Tax 
                            }
                            obj.put(CustomDesignerConstants.CNDN_AccountDescription_fieldTypeId, StringUtil.isNullOrEmpty(noteTaxEntry.getDescription()) ? "" : StringUtil.DecodeText(noteTaxEntry.getDescription()));   // Description  
                            obj.put(CustomDesignerConstants.CNDN_AccountReason_fieldTypeId, (noteTaxEntry.getReason() == null ? "" : (StringUtil.isNullOrEmpty(noteTaxEntry.getReason().getValue()) ? "" : noteTaxEntry.getReason().getValue())));   //Reason 
                            obj.put("srNoForRow", noteTaxEntry.getSrNoForRow());    //get Serial no of row for sorting purpose
                            
                            //GST Exchange Rate
                            if (countryid == Integer.parseInt(Constants.SINGAPOREID) && !companyAccountPreferences.getCompany().getCurrency().getCurrencyID().equalsIgnoreCase(Constants.SGDID)) {
                                obj.put(CustomDesignerConstants.CustomDesignGSTExchangeRate_fieldTypeId, authHandler.formattedAmount(noteTaxEntry.getGstCurrencyRate(), companyid));
                            }
                            
                            /*
                            * If debit note against Customer and isDebitForMultiCNDN true then values will be substracted
                            * If debit note against Vendor and isDebitForMultiCNDN true then values will be Added
                            */
                            if (noteTaxEntry.isDebitForMultiCNDN()) {
                                subtotal -= noteTaxEntry.getAmount();
                                totaltax -= noteTaxEntry.getTaxamount();
                                accountsubtotal -= noteTaxEntry.getAmount();
                                accounttotaltax -= noteTaxEntry.getTaxamount();
                                if (isIncludeGST) {
                                    accounttotalamount -= noteTaxEntry.getAmount();
                                } else {
                                    accounttotalamount -= noteTaxEntry.getAmount() + noteTaxEntry.getTaxamount();
                                }
                            } else {
                                subtotal += noteTaxEntry.getAmount();
                                totaltax += noteTaxEntry.getTaxamount();
                                accountsubtotal += noteTaxEntry.getAmount();
                                accounttotaltax += noteTaxEntry.getTaxamount();
                                if (isIncludeGST) {
                                    accounttotalamount += noteTaxEntry.getAmount();
                                } else {
                                    accounttotalamount += noteTaxEntry.getAmount() + noteTaxEntry.getTaxamount();
                                }
                            }
                            accounttaxamount = noteTaxEntry.getTaxamount();  //ERP-20872
                            accounttotalamountwithtax = noteTaxEntry.getAmount() + noteTaxEntry.getTaxamount();  //ERP-20872
                            accounttaxpercent = (accounttaxamount / (accounttotalamountwithtax)) * 100;  //ERP-20872
                            obj.put(CustomDesignerConstants.SummaryTaxPercent, String.valueOf(authHandler.round(accounttaxpercent, companyid)));   // Tax Percent  //ERP-20872
                        /*
                             * Fetching distinct taxes used at line level,
                             * feetched in the set Also, fetched the information
                             * related to tax in different maps
                             */
                            double rowTaxPercentGST = 0.0;
                            if (noteTaxEntry.getTax() != null) {
                                String taxCode = noteTaxEntry.getTax().getTaxCode();
                                if (!lineLevelTaxesGST.contains(taxCode)) {
                                    lineLevelTaxesGST.add(taxCode);
                                    KwlReturnObject perresult = accTaxObj.getTaxPercent(companyid, dn.getCreationDate(), noteTaxEntry.getTax().getID());
                                    rowTaxPercentGST = (Double) perresult.getEntityList().get(0);
                                    lineLevelTaxPercentGST.put(taxCode, rowTaxPercentGST);
                                    lineLevelTaxAmountGST.put(taxCode, 0.0);
                                    lineLevelTaxBasicGST.put(taxCode, 0.0);
                                }
                                lineLevelTaxAmountGST.put(taxCode, (Double) lineLevelTaxAmountGST.get(taxCode) + noteTaxEntry.getTaxamount());
                                lineLevelTaxBasicGST.put(taxCode, (Double) lineLevelTaxBasicGST.get(taxCode) + obj.optDouble(CustomDesignerConstants.CNDN_AccountAmount_fieldTypeId, 0.0));
                            }

                            // ## Get Custom Field Data 
                            Map<String, Object> variableMap = new HashMap<String, Object>();
                            HashMap<String, Object> invDetailRequestParams = new HashMap<String, Object>();
                            ArrayList Detailfilter_names = new ArrayList(), Detailfilter_params = new ArrayList();
                            Detailfilter_names.add(Constants.Acc_JEDetail_recdetailId);
                            Detailfilter_params.add(noteTaxEntry.getID());
                            invDetailRequestParams.put("filter_names", Detailfilter_names);
                            invDetailRequestParams.put("filter_params", Detailfilter_params);
                            KwlReturnObject idcustresult = accDebitNoteobj.geDebitNoteCustomData(invDetailRequestParams);
                            if (idcustresult.getEntityList().size() > 0) {
                                AccJEDetailCustomData jeDetailCustom = (AccJEDetailCustomData) idcustresult.getEntityList().get(0);
                                ExportRecordHandler.AssignLineItemCustomfieldsDimensionValues(requestObj, jeDetailCustom, FieldMap, obj, kwlCommonTablesDAOObj, variableMap);
                            }
                            obj.put(CustomDesignerConstants.SrNo, noteTaxEntry.getSrNoForRow());
                            /*
                             * Set All Line level Dimension & All LIne level
                             * Custom Field Values
                             */
                            obj = CustomDesignHandler.setAllLinelevelDimensionCustomFieldValues(DimensionFieldMap, variableMap, obj, false);//for dimensions
                            obj = CustomDesignHandler.setAllLinelevelDimensionCustomFieldValues(LineLevelCustomFieldMap, variableMap, obj, true);//for customfields
                            if (countryid == Constants.indian_country_id) {
                                if (noteTaxEntry.getProductid() != null) {
                                    obj.put(CustomDesignerConstants.CNDN_AccountTaxAmount_fieldTypeId, authHandler.formattedAmount(changevalue * noteTaxEntry.getTermAmount(), companyid));// Tax Amount
                                    accounttotaltax += noteTaxEntry.getTermAmount();
                                }
                            }
                            accJSONArr.put(obj);
                            count++;
                        }
                        JSONArray sortedArray = new JSONArray();
                        sortedArray = authHandler.sortJson(accJSONArr);   //sort JSON Array according Sr no of row.
                        if (sortedArray.length() == accJSONArr.length()) {
                            accJSONArr = sortedArray;
                        }
                    }

                    //Calculating invoices & its values 
                    Set<DebitNoteDetail> rows = dn.getRows();
                    int invcount = 1;
                    boolean pushAccountData = true;   //For debit note created through Party Journal Entry 
                    for (DebitNoteDetail detail : rows) {
                        if (detail.getGoodsReceipt() == null) {
                            isOtherwise = true;
                        }
                        double invtax = 0, invamount = 0;
                        JSONObject obj = new JSONObject();
                        obj.put("billid", detail.getGoodsReceipt() == null ? "" : detail.getGoodsReceipt().getID());
                        obj.put(CustomDesignerConstants.CNDN_InvoiceNo_fieldTypeId, detail.getGoodsReceipt() == null ? "" : detail.getGoodsReceipt().getGoodsReceiptNumber());                 // TaxInvoice Number
                        obj.put(CustomDesignerConstants.CNDN_InvoiceTax_fieldTypeId, detail.getGoodsReceipt() == null ? 0 : (detail.getGoodsReceipt().getTaxEntry() == null ? 0 : detail.getGoodsReceipt().getTaxEntry().getAmount()));               // Tax Amount           
                        invtax = detail.getGoodsReceipt() == null ? 0 : (detail.getGoodsReceipt().getTaxEntry() == null ? 0 : detail.getGoodsReceipt().getTaxEntry().getAmount());

                        obj.put(CustomDesignerConstants.InvoiceTax, authHandler.formattedAmount(invtax, companyid));
                        Discount disc = detail.getDiscount();
                        double invoiceReturnedAmt = 0d;
                        if (disc != null) {
                            obj.put("invamount", disc.getDiscountValue());
                            invoiceReturnedAmt = disc.getDiscountValue();
                        } else {
                            obj.put("invamount", 0);
                        }

                        List ll = null;
                        if (detail.getGoodsReceipt() != null) {
                            if (detail.getGoodsReceipt().isIsOpeningBalenceInvoice() && !detail.getGoodsReceipt().isNormalInvoice()) {
                                ll = new ArrayList();
                                ll.add(detail.getGoodsReceipt().getOpeningBalanceAmountDue());
                                ll.add(0.0);
                                ll.add(0.0);
                                obj.put("amount", detail.getGoodsReceipt().getOriginalOpeningBalanceAmount());
                                invamount = detail.getGoodsReceipt().getOriginalOpeningBalanceAmount();
                                obj.put(CustomDesignerConstants.CNDN_InvoiceAmount_fieldTypeId, detail.getGoodsReceipt() == null ? "" : CustomDesignHandler.getAmountinCommaForm(detail.getGoodsReceipt().getOriginalOpeningBalanceAmount(), countryid));// Invoice Amount     
                                obj.put(CustomDesignerConstants.CNDN_INvoiceDates_fieldTypeId, detail.getGoodsReceipt() == null ? "" : authHandler.getUTCToUserLocalDateFormatter_NEWJson(requestObj, detail.getGoodsReceipt().getCreationDate()));
                            } else {
                                if (Constants.InvoiceAmountDueFlag) {
                                    ll = accGoodsReceiptCommon.getInvoiceDiscountAmountInfo(requestParams, detail.getGoodsReceipt());
                                } else {
                                    ll = accGoodsReceiptCommon.getGRAmountDue(requestParams, detail.getGoodsReceipt());
                                }
                                obj.put("amount", detail.getGoodsReceipt().getVendorEntry().getAmount());
                                invamount = detail.getGoodsReceipt().getVendorEntry().getAmount();//Invoice Sub Total
                                obj.put(CustomDesignerConstants.CNDN_InvoiceAmount_fieldTypeId, detail.getGoodsReceipt() == null ? "" : CustomDesignHandler.getAmountinCommaForm(detail.getGoodsReceipt().getVendorEntry().getAmount(), countryid));                // Invoice Amount     
                                obj.put(CustomDesignerConstants.CNDN_INvoiceDates_fieldTypeId, detail.getGoodsReceipt() == null ? "" : authHandler.getUTCToUserLocalDateFormatter_NEWJson(requestObj, detail.getGoodsReceipt().getVendorEntry().getJournalEntry().getEntryDate()));
                            }
                            invoicesubtotal += invamount;//Invoice Sub Total
                            invoicetotaltax += invtax; //Invoice Total Tax
                            invoicetotalamount += invamount + invtax; //Invoice Total Amount
                            double amountdue = (Double) ll.get(1) + invoiceReturnedAmt;// added invoiceReturnedAmt to show original value which was at time of creation.
                            obj.put("amountdue", authHandler.round(amountdue, companyid));
                            obj.put(CustomDesignerConstants.CNDN_InvoiceAmountDue_fieldTypeId, authHandler.round(amountdue, companyid));             // Invoice Amount Due                         
                            obj.put(CustomDesignerConstants.CNDN_InvoiceEnterAmount_fieldTypeId, invoiceReturnedAmt);
                        } else {
                            obj.put("amount", 0);
                            obj.put("amountdue", 0);
                            obj.put(CustomDesignerConstants.CNDN_InvoiceAmountDue_fieldTypeId, "");             // Invoice Amount Due                         
                            obj.put(CustomDesignerConstants.CNDN_InvoiceEnterAmount_fieldTypeId, "");
                        }
                        if (detail.getDebitNote() != null && detail.getDebitNote().getDnTaxEntryDetails().isEmpty() && detail.getDebitNote().getDnTaxEntryDetails().size() == 0) {
                            /*
                              * Print Credit note Created by party journal Entry  
                              */
                            if (pushAccountData) {
                                obj.put(CustomDesignerConstants.CNDN_AccountCode_fieldTypeId, (detail.getDebitNote() != null && detail.getDebitNote().getAccount().getAcccode() != null) ? detail.getDebitNote().getAccount().getAcccode() : "");                   // Account Code
                                obj.put(CustomDesignerConstants.CNDN_Account_fieldTypeId, (detail.getDebitNote() != null && detail.getDebitNote().getAccount() != null) ? detail.getDebitNote().getAccount().getName() : "");                   // Account Name
                                obj.put(CustomDesignerConstants.CNDN_AccountDescription_fieldTypeId, (detail.getDebitNote() != null && detail.getDebitNote().getAccount() != null && !StringUtil.isNullOrEmpty(detail.getDebitNote().getAccount().getDescription())) ? detail.getDebitNote().getAccount().getDescription() : "");                   // Account Name
                                obj.put(CustomDesignerConstants.CNDN_AccountAmount_fieldTypeId, (detail.getDebitNote() != null) ? authHandler.formattedAmount(detail.getDebitNote().getDnamount(), companyid) : "");  // Amount
                                obj.put(CustomDesignerConstants.CNDN_AccountTotalAmount_fieldTypeId, (detail.getDebitNote() != null) ? authHandler.formattedAmount(detail.getDebitNote().getDnamount(), companyid) : "");  // Amount
                                obj.put(CustomDesignerConstants.CNDN_AccountTaxAmount_fieldTypeId, "0.0");  // tax Amount
                                obj.put(CustomDesignerConstants.SummaryTaxPercent, "");
                                obj.put(CustomDesignerConstants.CNDN_AccountTax_fieldTypeId, "");
                                obj.put(CustomDesignerConstants.CNDN_AccountAmountExcludeGST_fieldTypeId, (detail.getDebitNote() != null) ? authHandler.formattedAmount(detail.getDebitNote().getDnamount(), companyid) : "");
                                obj.put(CustomDesignerConstants.CNDN_AccountReason_fieldTypeId, "");
                                accounttotalamount = detail.getDebitNote().getDnamount();
                                accJSONArr.put(obj);
                                pushAccountData = false;
                            }
                        }
                        obj.put(CustomDesignerConstants.SrNo, invcount);
                        obj.put(CustomDesignerConstants.SummaryTaxPercent, "");   // Tax Percent  //ERP-20872
                        obj.put(CustomDesignerConstants.AllDimensions, "");
                        obj.put(CustomDesignerConstants.AllLinelevelCustomFields, "");
                        invJSONArr.put(obj);
                        invcount++;
                    }

                    totalamount = debitNote.getDnamount();

                    debitterm = debitNote.getVendor() == null ? String.valueOf(debitNote.getCustomer().getCreditTerm().getTermname()) : String.valueOf(debitNote.getVendor().getDebitTerm().getTermname());
                    venAccountNo = debitNote.getCustomer() == null ? (debitNote.getVendor().getAccount().getAcccode() != null ? debitNote.getVendor().getAccount().getAcccode() : "") : (debitNote.getCustomer().getAccount().getAcccode() != null ? debitNote.getCustomer().getAccount().getAcccode() : "");

                    // Append respective field values
                    for (int cnt = 0; cnt < accJSONArr.length(); cnt++) {
                        JSONObject jObj = (JSONObject) accJSONArr.get(cnt);
                        if (cnt == 0) {
                            accCodes = (StringUtil.isNullOrEmpty(jObj.getString(CustomDesignerConstants.CNDN_AccountCode_fieldTypeId)) ? "-" : jObj.getString(CustomDesignerConstants.CNDN_AccountCode_fieldTypeId));
                            accNames = (StringUtil.isNullOrEmpty(jObj.getString(CustomDesignerConstants.CNDN_Account_fieldTypeId)) ? "-" : jObj.getString(CustomDesignerConstants.CNDN_Account_fieldTypeId));
                            accTaxNames = (StringUtil.isNullOrEmpty(jObj.getString(CustomDesignerConstants.CNDN_AccountTax_fieldTypeId)) ? "-" : jObj.getString(CustomDesignerConstants.CNDN_AccountTax_fieldTypeId));
                            accAmounts = (StringUtil.isNullOrEmpty(Double.toString(jObj.getDouble(CustomDesignerConstants.CNDN_AccountAmount_fieldTypeId))) ? "-" : Double.toString(jObj.getDouble(CustomDesignerConstants.CNDN_AccountAmount_fieldTypeId)));
                            accTaxAmounts = (StringUtil.isNullOrEmpty(Double.toString(jObj.getDouble(CustomDesignerConstants.CNDN_AccountTaxAmount_fieldTypeId))) ? "-" : Double.toString(jObj.getDouble(CustomDesignerConstants.CNDN_AccountTaxAmount_fieldTypeId)));
                            accAmountWithTaxes = (StringUtil.isNullOrEmpty(Double.toString(jObj.getDouble(CustomDesignerConstants.CNDN_AccountTotalAmount_fieldTypeId))) ? "-" : Double.toString(jObj.getDouble(CustomDesignerConstants.CNDN_AccountTotalAmount_fieldTypeId)));
                            accDescriptions = (StringUtil.isNullOrEmpty(jObj.getString(CustomDesignerConstants.CNDN_AccountDescription_fieldTypeId)) ? "-" : jObj.getString(CustomDesignerConstants.CNDN_AccountDescription_fieldTypeId));
                            accTaxPercent = (StringUtil.isNullOrEmpty(jObj.getString(CustomDesignerConstants.SummaryTaxPercent)) ? "-" : jObj.getString(CustomDesignerConstants.SummaryTaxPercent));  //ERP-20872
                            accReason = (StringUtil.isNullOrEmpty(jObj.getString(CustomDesignerConstants.CNDN_AccountReason_fieldTypeId)) ? "-" : jObj.getString(CustomDesignerConstants.CNDN_AccountReason_fieldTypeId));
                            accAmountExcludeGST = (StringUtil.isNullOrEmpty(Double.toString(jObj.getDouble(CustomDesignerConstants.CNDN_AccountAmountExcludeGST_fieldTypeId))) ? "-" : Double.toString(jObj.getDouble(CustomDesignerConstants.CNDN_AccountAmountExcludeGST_fieldTypeId)));
                            GSTExchangeRate = jObj.optString(CustomDesignerConstants.CustomDesignGSTExchangeRate_fieldTypeId, "");
                            taxName = jObj.optString(CustomDesignerConstants.LineLevelTax, "-");
                            taxPercent = jObj.optString(CustomDesignerConstants.LineLevelTaxPercent, "");
                            taxAmount = jObj.optString(CustomDesignerConstants.LineLevelTaxAmount, "");
                        } else {
                            accCodes = accCodes + "," + (StringUtil.isNullOrEmpty(jObj.getString(CustomDesignerConstants.CNDN_AccountCode_fieldTypeId)) ? "-" : jObj.getString(CustomDesignerConstants.CNDN_AccountCode_fieldTypeId));
                            accNames = accNames + "," + (StringUtil.isNullOrEmpty(jObj.getString(CustomDesignerConstants.CNDN_Account_fieldTypeId)) ? "-" : jObj.getString(CustomDesignerConstants.CNDN_Account_fieldTypeId));
                            accTaxNames = accTaxNames + "," + (StringUtil.isNullOrEmpty(jObj.getString(CustomDesignerConstants.CNDN_AccountTax_fieldTypeId)) ? "-" : jObj.getString(CustomDesignerConstants.CNDN_AccountTax_fieldTypeId));
                            accAmounts = accAmounts + "," + (StringUtil.isNullOrEmpty(Double.toString(jObj.getDouble(CustomDesignerConstants.CNDN_AccountAmount_fieldTypeId))) ? "-" : Double.toString(jObj.getDouble(CustomDesignerConstants.CNDN_AccountAmount_fieldTypeId)));
                            accTaxAmounts = accTaxAmounts + "," + (StringUtil.isNullOrEmpty(Double.toString(jObj.getDouble(CustomDesignerConstants.CNDN_AccountTaxAmount_fieldTypeId))) ? "-" : Double.toString(jObj.getDouble(CustomDesignerConstants.CNDN_AccountTaxAmount_fieldTypeId)));
                            accAmountWithTaxes = accAmountWithTaxes + "," + (StringUtil.isNullOrEmpty(Double.toString(jObj.getDouble(CustomDesignerConstants.CNDN_AccountTotalAmount_fieldTypeId))) ? "-" : Double.toString(jObj.getDouble(CustomDesignerConstants.CNDN_AccountTotalAmount_fieldTypeId)));
                            accDescriptions = accDescriptions + "," + (StringUtil.isNullOrEmpty(jObj.getString(CustomDesignerConstants.CNDN_AccountDescription_fieldTypeId)) ? "-" : jObj.getString(CustomDesignerConstants.CNDN_AccountDescription_fieldTypeId));
                            accTaxPercent = accTaxPercent + "," + (StringUtil.isNullOrEmpty(jObj.getString(CustomDesignerConstants.SummaryTaxPercent)) ? "-" : jObj.getString(CustomDesignerConstants.SummaryTaxPercent));  //ERP-20872
                            accReason = accReason + "," + (StringUtil.isNullOrEmpty(jObj.getString(CustomDesignerConstants.CNDN_AccountReason_fieldTypeId)) ? "-" : jObj.getString(CustomDesignerConstants.CNDN_AccountReason_fieldTypeId));
                            accAmountExcludeGST = accAmountExcludeGST + "," + (StringUtil.isNullOrEmpty(Double.toString(jObj.getDouble(CustomDesignerConstants.CNDN_AccountAmountExcludeGST_fieldTypeId))) ? "-" : Double.toString(jObj.getDouble(CustomDesignerConstants.CNDN_AccountAmountExcludeGST_fieldTypeId)));
                            if (!StringUtil.isNullOrEmpty(GSTExchangeRate)) {
                                GSTExchangeRate = GSTExchangeRate + "," + jObj.optString(CustomDesignerConstants.CustomDesignGSTExchangeRate_fieldTypeId, "");
                            } else {
                                GSTExchangeRate = jObj.optString(CustomDesignerConstants.CustomDesignGSTExchangeRate_fieldTypeId, "");
                            }
                            taxName = taxName + "," + jObj.optString(CustomDesignerConstants.LineLevelTax, "-");
                            taxPercent = taxPercent + "," + jObj.optString(CustomDesignerConstants.LineLevelTaxPercent, "");
                            taxAmount = taxAmount + "," + jObj.optString(CustomDesignerConstants.LineLevelTaxAmount, "");
                        }
                    }

                    if (!isOtherwise) {
                        for (int cnt = 0; cnt < invJSONArr.length(); cnt++) {
                            JSONObject jObj = (JSONObject) invJSONArr.get(cnt);
                            if (cnt == 0) {
                                invoiceNos = (StringUtil.isNullOrEmpty(jObj.getString(CustomDesignerConstants.CNDN_InvoiceNo_fieldTypeId)) ? "-" : jObj.getString(CustomDesignerConstants.CNDN_InvoiceNo_fieldTypeId));
                                invAmounts = (StringUtil.isNullOrEmpty(jObj.getString(CustomDesignerConstants.CNDN_InvoiceAmount_fieldTypeId)) ? "-" : jObj.getString(CustomDesignerConstants.CNDN_InvoiceAmount_fieldTypeId));
                                invTaxAmounts = (StringUtil.isNullOrEmpty(Double.toString(jObj.getDouble(CustomDesignerConstants.CNDN_InvoiceTax_fieldTypeId))) ? "-" : Double.toString(jObj.getDouble(CustomDesignerConstants.CNDN_InvoiceTax_fieldTypeId)));
                                invAmountDues = (StringUtil.isNullOrEmpty(Double.toString(jObj.getDouble(CustomDesignerConstants.CNDN_InvoiceAmountDue_fieldTypeId))) ? "-" : Double.toString(jObj.getDouble(CustomDesignerConstants.CNDN_InvoiceAmountDue_fieldTypeId)));
                                invEnterAmounts = (StringUtil.isNullOrEmpty(Double.toString(jObj.getDouble(CustomDesignerConstants.CNDN_InvoiceEnterAmount_fieldTypeId))) ? "-" : Double.toString(jObj.getDouble(CustomDesignerConstants.CNDN_InvoiceEnterAmount_fieldTypeId)));
                                invoicedates = (StringUtil.isNullOrEmpty(jObj.getString(CustomDesignerConstants.CNDN_INvoiceDates_fieldTypeId)) ? "-" : jObj.getString(CustomDesignerConstants.CNDN_INvoiceDates_fieldTypeId));
                            } else {
                                invoiceNos = invoiceNos + "," + (StringUtil.isNullOrEmpty(jObj.getString(CustomDesignerConstants.CNDN_InvoiceNo_fieldTypeId)) ? "-" : jObj.getString(CustomDesignerConstants.CNDN_InvoiceNo_fieldTypeId));
                                invAmounts = invAmounts + "," + (StringUtil.isNullOrEmpty(jObj.getString(CustomDesignerConstants.CNDN_InvoiceAmount_fieldTypeId)) ? "-" : jObj.getString(CustomDesignerConstants.CNDN_InvoiceAmount_fieldTypeId));
                                invTaxAmounts = invTaxAmounts + "," + (StringUtil.isNullOrEmpty(Double.toString(jObj.getDouble(CustomDesignerConstants.CNDN_InvoiceTax_fieldTypeId))) ? "-" : Double.toString(jObj.getDouble(CustomDesignerConstants.CNDN_InvoiceTax_fieldTypeId)));
                                invAmountDues = invAmountDues + "," + (StringUtil.isNullOrEmpty(Double.toString(jObj.getDouble(CustomDesignerConstants.CNDN_InvoiceAmountDue_fieldTypeId))) ? "-" : Double.toString(jObj.getDouble(CustomDesignerConstants.CNDN_InvoiceAmountDue_fieldTypeId)));
                                invEnterAmounts = invEnterAmounts + "," + (StringUtil.isNullOrEmpty(Double.toString(jObj.getDouble(CustomDesignerConstants.CNDN_InvoiceEnterAmount_fieldTypeId))) ? "-" : Double.toString(jObj.getDouble(CustomDesignerConstants.CNDN_InvoiceEnterAmount_fieldTypeId)));
                                invoicedates = invoicedates + "," + (StringUtil.isNullOrEmpty(jObj.getString(CustomDesignerConstants.CNDN_INvoiceDates_fieldTypeId)) ? "-" : jObj.getString(CustomDesignerConstants.CNDN_INvoiceDates_fieldTypeId));
                            }
                        }
                    } else {
                        invoiceNos = "";
                        invAmounts = "";
                        invTaxAmounts = "";
                        invAmountDues = "";
                        invEnterAmounts = "";
                        invoicedates = "";
                    }

                    filter_names.add("debitNote.ID");
                    filter_params.add(debitNote.getID());
                    soRequestParams.put("filter_names", filter_names);
                    soRequestParams.put("filter_params", filter_params);
                    KwlReturnObject idresult = null;
                    idresult = accDebitNoteobj.getDebitNoteDetails(soRequestParams);
                    itr = idresult.getEntityList().iterator();
                    KwlReturnObject templateConfig = accCommonTablesDAO.getPDFTemplateRow(companyid, requestObj.optInt("moduleid"));

                    if (templateConfig.getEntityList().size() > 0) {
                        config = (PdfTemplateConfig) templateConfig.getEntityList().get(0);
                    }
                    netinword = EnglishNumberToWordsOjb.convert(Double.parseDouble(String.valueOf(totalamount)), currency, countryLanguageId);
                    /*
                     * Get amount in indonesian words.
                     */
                    String indonesianAmountInWords = "";
                    if (countryid == Constants.INDONESIAN_COUNTRY_ID) {
                        KWLCurrency indoCurrency = (KWLCurrency) kwlCommonTablesDAOObj.getClassObject(KWLCurrency.class.getName(), Constants.CountryIndonesianCurrencyId);
                        indonesianAmountInWords = IndonesianNumberToWordsOjb.indonesiaConvert(Double.parseDouble(String.valueOf(totalamount)), indoCurrency);
                    }

                    String term = "";
                    double termValue = 0.0;
                    if (!StringUtil.isNullOrEmpty(debitNote.getID())) {
                        HashMap<String, Object> requestParam = new HashMap();
                        requestParam.put("debitNoteId", debitNote.getID());
                        KwlReturnObject curresult1 = null;
                        curresult1 = accDebitNoteobj.getDebitNoteTermMap(requestParam);
                        List<DebitNoteTermsMap> termMap = curresult1.getEntityList();
                        for (DebitNoteTermsMap debitNoteTermsMap : termMap) {
                            InvoiceTermsSales mt = debitNoteTermsMap.getTerm();
                            double termAmnt = debitNoteTermsMap.getTermamount();
                            String termName = (mt.getTerm() + (termAmnt > 0 ? "(+)" : "(-)"));
                            double tempTermValue = (termAmnt > 0 ? termAmnt : (termAmnt * -1));
                            term += "<div> <table><tr><td>" + termName + " : </td><td>" + Double.toString(tempTermValue) + "</td></tr></table></div><br>";
                            termValue += tempTermValue;
                        }
                        if (!StringUtil.isNullOrEmpty(term) && term.indexOf("<br>") != -1) {
                            term = term.substring(0, term.lastIndexOf("<br>"));
                        }
                    }
                    jArr.put(accJSONArr);
                    jArr.put(invJSONArr);
                    
                    summaryData.put("summarydata", true);
                    summaryData.put(CustomDesignerConstants.CustomDesignAmountinwords_fieldTypeId, netinword + " Only.");
                    summaryData.put(CustomDesignerConstants.CustomDesign_Amount_in_words_Bahasa_Indonesia, indonesianAmountInWords);
                    summaryData.put(CustomDesignerConstants.CustomDesignCompanyPostText_fieldTypeId, config == null ? "" : config.getPdfPostText());

                    summaryData.put(CustomDesignerConstants.CNDN_InvoiceNo_fieldTypeId, invoiceNos);
                    summaryData.put(CustomDesignerConstants.CNDN_InvoiceAmount_fieldTypeId, invAmounts);
                    summaryData.put(CustomDesignerConstants.CNDN_InvoiceTax_fieldTypeId, invTaxAmounts);
                    summaryData.put(CustomDesignerConstants.InvoiceTax, invTaxAmounts);
                    summaryData.put(CustomDesignerConstants.CNDN_InvoiceAmountDue_fieldTypeId, invAmountDues);
                    summaryData.put(CustomDesignerConstants.CNDN_InvoiceEnterAmount_fieldTypeId, invEnterAmounts);
                    summaryData.put(CustomDesignerConstants.CNDN_INvoiceDates_fieldTypeId, invoicedates);

                    summaryData.put(CustomDesignerConstants.CNDN_AccountCode_fieldTypeId, accCodes);
                    summaryData.put(CustomDesignerConstants.CNDN_Account_fieldTypeId, accNames);
                    summaryData.put(CustomDesignerConstants.CNDN_AccountAmount_fieldTypeId, accAmounts);
                    summaryData.put(CustomDesignerConstants.CNDN_AccountTax_fieldTypeId, accTaxNames);
                    summaryData.put(CustomDesignerConstants.CNDN_AccountTaxAmount_fieldTypeId, accTaxAmounts);
                    summaryData.put(CustomDesignerConstants.CNDN_AccountTotalAmount_fieldTypeId, accAmountWithTaxes);
                    summaryData.put(CustomDesignerConstants.CNDN_AccountDescription_fieldTypeId, accDescriptions);
                    summaryData.put(CustomDesignerConstants.SummaryTaxPercent, accTaxPercent);  //ERP-20872
                    summaryData.put(CustomDesignerConstants.CNDN_AccountReason_fieldTypeId, accReason);
                    summaryData.put(CustomDesignerConstants.CNDN_AccountAmountExcludeGST_fieldTypeId, accAmountExcludeGST);
                    //COMPANY INFO
                    summaryData.put(CustomDesignerConstants.CustomDesignCompanyUEN_fieldTypeId, companyAccountPreferences.getCompanyUEN() != null ? companyAccountPreferences.getCompanyUEN() : "");
                    summaryData.put(CustomDesignerConstants.CustomDesignCompanyGRN_No_fieldTypeId, companyAccountPreferences.getGstNumber() != null ? companyAccountPreferences.getGstNumber() : "");

                    if(extraCompanyPreferences.isIsNewGST()){ // for New gst check 
                        if(!lineLevelTaxNames.isEmpty()){
                            Iterator lineTax = lineLevelTaxNames.entrySet().iterator();
                            while(lineTax.hasNext()){
                                Map.Entry tax = (Map.Entry)lineTax.next();
                                allLineLevelTax += tax.getKey();
                                allLineLevelTax += "!##";
                                double taxamount = (double)tax.getValue();
                                allLineLevelTaxAmount += tax.getValue().toString();
                                allLineLevelTaxAmount += "!##";
//                                TotalLineLevelTaxAmount += taxamount;
                            }
                        }
                        if(!StringUtil.isNullOrEmpty(allLineLevelTax)){
                            allLineLevelTax = allLineLevelTax.substring(0, allLineLevelTax.length()-3);
                        }
                        if(!StringUtil.isNullOrEmpty(allLineLevelTaxAmount)){
                            allLineLevelTaxAmount = allLineLevelTaxAmount.substring(0, allLineLevelTaxAmount.length()-3);
                        }
                    } else {
                        /*
                         * Putting all line taxes and its information in summary
                         * data separated by !##
                         */
                        for (String key : lineLevelTaxesGST) {
                            allLineLevelTax += key + "!##";
                            allLineLevelTaxAmount += lineLevelTaxAmountGST.get(key).toString() + "!##";
                            allLineLevelTaxBasic += lineLevelTaxBasicGST.get(key).toString() + "!##";
                        }
                    }
                    summaryData.put(CustomDesignerConstants.AllLineLevelTax, allLineLevelTax);
                    summaryData.put(CustomDesignerConstants.AllLineLevelTaxAmount, allLineLevelTaxAmount);
                    summaryData.put(CustomDesignerConstants.AllLineLevelTaxBasic, allLineLevelTaxBasic);
                    /*
                     * All Global Section Custom Field and DImensions
                     */
                    HashMap<String, Object> returnvalues = new HashMap<String, Object>();
                    HashMap<String, Object> extraparams = new HashMap<String, Object>();
                    df = authHandler.getUserDateFormatterJson(requestObj);//User Date Formatter
                    extraparams.put(Constants.companyid, companyid);
                    extraparams.put(Constants.moduleid, Constants.Acc_Debit_Note_ModuleId);
                    extraparams.put(Constants.customcolumn, 0);
                    extraparams.put(Constants.customfield, 1);
                    extraparams.put(CustomDesignerConstants.isCustomfield, "true");
                    extraparams.put("billid", debitNote.getID());
                    returnvalues = ExportRecordHandler.returnGlobalLevelCustomFieldDimensionValues(df, summaryData, accAccountDAOobj, accountingHandlerDAOobj, extraparams);
                    if (returnvalues.containsKey("returnValue")) {
                        globallevelcustomfields = (String) returnvalues.get("returnValue");
                    }
                    if (returnvalues.containsKey("summaryData")) {
                        summaryData = (JSONObject) returnvalues.get("summaryData");
                    }

                    returnvalues.clear();
                    //global level dimensionfields
                    extraparams.put(Constants.customcolumn, 0);
                    extraparams.put(Constants.customfield, 0);
                    extraparams.put(CustomDesignerConstants.isCustomfield, "false");
                    returnvalues = ExportRecordHandler.returnGlobalLevelCustomFieldDimensionValues(df, summaryData, accAccountDAOobj, accountingHandlerDAOobj, extraparams);
                    if (returnvalues.containsKey("returnValue")) {
                        globalleveldimensions = (String) returnvalues.get("returnValue");
                    }
                    if (returnvalues.containsKey("summaryData")) {
                        summaryData = (JSONObject) returnvalues.get("summaryData");
                    }

                    //Details like company details
                    CommonFunctions.getCommonFieldsForAllModulesSummaryData(summaryData, extraparams, accountingHandlerDAOobj);

                    //Base Currency values in Subtotal, Total Tax and Total Amount  for Account
                    if (externalcurrency != 0) {
                        bascurrencyaccountsubtotal = accountsubtotal * revExchangeRate;  //Base currency account subtotal
                        bascurrencyaccounttotaltax = accounttotaltax * revExchangeRate;//Base currency account total tax
                        basecurrencyaccounttotalamount = accounttotalamount * revExchangeRate;//Base currency account total amount
                    } else {
                        bascurrencyaccountsubtotal = accountsubtotal;
                        bascurrencyaccounttotaltax = accounttotaltax;
                        basecurrencyaccounttotalamount = accounttotalamount;
                    }

                    //Base Currency values in Subtotal, Total Tax and Total Amount  for Invoice
                    if (externalcurrency != 0) {
                        bascurrencyinvoicesubtotal = invoicesubtotal * revExchangeRate;  //Base currency account subtotal
                        bascurrencyinvoicetotaltax = invoicetotaltax * revExchangeRate;//Base currency account total tax
                        basecurrencyinvoicetotalamount = invoicetotalamount * revExchangeRate;//Base currency account total amount
                    } else {
                        bascurrencyinvoicesubtotal = invoicesubtotal;
                        bascurrencyinvoicetotaltax = invoicetotaltax;
                        basecurrencyinvoicetotalamount = invoicetotalamount;
                    }

                    if (debitNote.getVendor() != null) {//for otherwise and Against Customer
                        HashMap<String, Object> addrRequestParams = new HashMap<String, Object>();
                        addrRequestParams.put("vendorid", debitNote.getVendor().getID());
                        addrRequestParams.put("companyid", companyid);
                        KwlReturnObject addressResult = accountingHandlerDAOobj.getVendorAddressDetails(addrRequestParams);
                        List<AddressDetails> addressResultList = addressResult.getEntityList();
                        CommonFunctions.getAddressSummaryData(addressResultList, summaryData, companyAccountPreferences, extraCompanyPreferences);
                        addrRequestParams.put("isBillingAddress", true);
                        addrRequestParams.put("isDefaultAddress", true);
                        addrRequestParams.put("isSeparator", true);
                        billAddr = accountingHandlerDAOobj.getVendorAddress(addrRequestParams);
                        addrRequestParams.put("isBillingAddress", false);
                        shipAddr = accountingHandlerDAOobj.getVendorAddress(addrRequestParams);
                        summaryData.put(CustomDesignerConstants.CustomerVendor_Code, debitNote.getVendor() != null ? (debitNote.getVendor().getAcccode() != null ? debitNote.getVendor().getAcccode() : "") : "");
                        summaryData.put(CustomDesignerConstants.CustomerVendor_Term, debitNote.getVendor().getDebitTerm() != null ? debitNote.getVendor().getDebitTerm().getTermname() : "");
                    } else {//for 3rd condition against Customer
                        HashMap<String, Object> addrRequestParams = new HashMap<String, Object>();
                        addrRequestParams.put("customerid", debitNote.getCustomer().getID());
                        addrRequestParams.put("companyid", companyid);
                        KwlReturnObject addressResult = accountingHandlerDAOobj.getCustomerAddressDetails(addrRequestParams);
                        List<AddressDetails> addressResultList = addressResult.getEntityList();
                        CommonFunctions.getAddressSummaryData(addressResultList, summaryData, companyAccountPreferences, extraCompanyPreferences);
                        addrRequestParams.put("isBillingAddress", true);
                        addrRequestParams.put("isDefaultAddress", true);
                        addrRequestParams.put("isSeparator", true);
                        billAddr = accountingHandlerDAOobj.getCustomerAddress(addrRequestParams);
                        addrRequestParams.put("isBillingAddress", false);
                        shipAddr = accountingHandlerDAOobj.getCustomerAddress(addrRequestParams);
                        summaryData.put(CustomDesignerConstants.CustomerVendor_Code, debitNote.getCustomer() != null ? (debitNote.getCustomer().getAcccode() != null ? debitNote.getCustomer().getAcccode() : "") : "");
                        summaryData.put(CustomDesignerConstants.CustomerVendor_Term, debitNote.getCustomer().getCreditTerm() != null ? debitNote.getCustomer().getCreditTerm().getTermname() : "");
                    }
                    if(extraCompanyPreferences.isIsNewGST() && product != null){
                        ExportRecordHandler.setHsnSacProductDimensionField(product, summaryData, companyid, accAccountDAOobj, kwlCommonTablesDAOObj);
                    }
                    summaryData.put(CustomDesignerConstants.Createdby, debitNote.getCreatedby() != null ? debitNote.getCreatedby().getFullName() : "");
                    summaryData.put(CustomDesignerConstants.Updatedby, debitNote.getModifiedby() != null ? debitNote.getModifiedby().getFullName() : "");
                    summaryData.put(CustomDesignerConstants.CustomDesignSubTotal_fieldTypeId, String.valueOf(subtotal));
                    summaryData.put(CustomDesignerConstants.CustomDesignTotalTax_fieldTypeId, String.valueOf(totaltax));
                    summaryData.put(CustomDesignerConstants.CustomDesignTotalAmount_fieldTypeId, String.valueOf(totalamount));
                    summaryData.put(CustomDesignerConstants.CustomDesignAmountinwords_fieldTypeId, netinword + " Only.");
                    summaryData.put(CustomDesignerConstants.CustomDesignCreditTerm_fieldTypeId, debitterm);
                    summaryData.put(CustomDesignerConstants.Customer_AccountNo_fieldTypeId, venAccountNo);//Vendor Account Number
                    summaryData.put(CustomDesignerConstants.CustomDesignCompanyPostText_fieldTypeId, config == null ? "" : config.getPdfPostText());

                    summaryData.put(CustomDesignerConstants.SrNo, 1);
                    summaryData.put(CustomDesignerConstants.BillTo, billAddr);
                    summaryData.put(CustomDesignerConstants.ShipTo, shipAddr);
                    summaryData.put(CustomDesignerConstants.AccountSubTotal, authHandler.formattedAmount(accountsubtotal, companyid));//Account Sub Total
                    summaryData.put(CustomDesignerConstants.AccountTotalTax, authHandler.formattedAmount(accounttotaltax, companyid)); //Account Total Tax
                    summaryData.put(CustomDesignerConstants.AccountTotalAmount, authHandler.formattedAmount(accounttotalamount, companyid)); //Account Total Amount
                    summaryData.put(CustomDesignerConstants.InvoiceSubTotal, authHandler.formattedAmount(invoicesubtotal, companyid));//Invoice SubTotal
                    summaryData.put(CustomDesignerConstants.InvoiceTotalTax, authHandler.formattedAmount(invoicetotaltax, companyid)); //Invoice Total Tax
                    summaryData.put(CustomDesignerConstants.InvoiceTotalAmount, authHandler.formattedAmount(invoicetotalamount, companyid)); //Invoice Total Amount
                    summaryData.put(CustomDesignerConstants.BaseCurrencyAccountSubTotal, authHandler.formattedAmount(bascurrencyaccountsubtotal, companyid));//Base Currency Account Sub Total
                    summaryData.put(CustomDesignerConstants.BaseCurrencyAccountTotalTax, authHandler.formattedAmount(bascurrencyaccounttotaltax, companyid)); //Base Currency Account Total Tax
                    summaryData.put(CustomDesignerConstants.BaseCurrencyAccountTotalAmount, authHandler.formattedAmount(basecurrencyaccounttotalamount, companyid)); //Base Currency Account Total Amount
                    summaryData.put(CustomDesignerConstants.CustomDesignExchangeRate_fieldTypeId, revExchangeRate);
                    
                    //GST Exchange Rate
                    if (countryid == Integer.parseInt(Constants.SINGAPOREID) && !companyAccountPreferences.getCompany().getCurrency().getCurrencyID().equalsIgnoreCase(Constants.SGDID)) {
                        summaryData.put(CustomDesignerConstants.CustomDesignGSTExchangeRate_fieldTypeId, !StringUtil.isNullOrEmpty(GSTExchangeRate) ? GSTExchangeRate : "");
                    } else {
                        summaryData.put(CustomDesignerConstants.CustomDesignGSTExchangeRate_fieldTypeId, "");
                    }

                    //Sub-Total, Total tax, And Total Amount in Base currency for Invoice
                    summaryData.put(CustomDesignerConstants.BaseCurrencyInvoiceSubTotal, authHandler.formattedAmount(bascurrencyinvoicesubtotal, companyid));//Base Currency Invoice SubTotal
                    summaryData.put(CustomDesignerConstants.BaseCurrencyInvoiceTotalTax, authHandler.formattedAmount(bascurrencyinvoicetotaltax, companyid)); //Base Currency Invoice Total Tax
                    summaryData.put(CustomDesignerConstants.BaseCurrencyInvoiceTotal, authHandler.formattedAmount(basecurrencyinvoicetotalamount, companyid)); //Base Currency Invoice Total Amount
                    summaryData.put(CustomDesignerConstants.AllGloballevelCustomfields, globallevelcustomfields);
                    summaryData.put(CustomDesignerConstants.AllGloballevelDimensions, globalleveldimensions);
                    summaryData.put(CustomDesignerConstants.AllDimensions, "");
                    summaryData.put(CustomDesignerConstants.AllLinelevelCustomFields, "");
                    summaryData.put(CustomDesignerConstants.CUSTOMER_OR_VENDOR_TITLE, customerOrVendorTitle);
                    summaryData.put(CustomDesignerConstants.CustomerVendor_VAT_TIN_NO, VATTInnumber);
                    summaryData.put(CustomDesignerConstants.CustomerVendor_CST_TIN_NO, CSTTInNumber);
                    summaryData.put(CustomDesignerConstants.Company_VAT_TIN_NO, extraCompanyPreferences.getVatNumber() != null ? extraCompanyPreferences.getVatNumber() : "");
                    summaryData.put(CustomDesignerConstants.Company_CST_TIN_NO, extraCompanyPreferences.getCstNumber() != null ? extraCompanyPreferences.getCstNumber() : "");
                    summaryData.put(CustomDesignerConstants.CompanyPANNumber, extraCompanyPreferences.getPanNumber() != null ? extraCompanyPreferences.getPanNumber() : "");
                    summaryData.put(CustomDesignerConstants.CUSTOMER_PAN_NO, custOrVendorPanNumber);
                    summaryData.put(CustomDesignerConstants.CUSTOMER_VENDOR_GSTIN_NUMBER, gstin);
                    summaryData.put(CustomDesignerConstants.LineLevelTax, taxName);
                    summaryData.put(CustomDesignerConstants.LineLevelTaxPercent, taxPercent);
                    summaryData.put(CustomDesignerConstants.LineLevelTaxAmount, taxAmount);
                    
                    jArr.put(summaryData);

                    //getting all the custom fields at line level
                    result = customDesignDAOObj.getCustomLineFields(companyid, Constants.Acc_Debit_Note_ModuleId);
                    list = result.getEntityList();
                    for (int cnt = 0; cnt < list.size(); cnt++) {
                        JSONObject obj = new JSONObject();
                        HashMap<String, String> map = new HashMap<String, String>();
                        Object[] rowcustom = (Object[]) list.get(cnt);
                        map.put("Custom_" + rowcustom[2], "{label:'" + rowcustom[2] + "',xtype:'" + rowcustom[1].toString() + "'}");
                        dbCustomJSONArr.put(map);
                    }
                    jArr.put(dbCustomJSONArr);
                }
                /*
                 *  Template Sub Type 
                 *   0 - Debit Note
                 *   1 - Debit Note with Purchase Return 
                 */
                if (!StringUtil.isNullObject(dn.getPurchaseReturn()) && templateSubtype.equals("1")) {
                    int moduleid = Constants.Acc_Purchase_Return_ModuleId;
                    JSONArray PurchaseReturnlineItemsArr = accGoodsReceiptCommon.getPurchaseReturnDetailsItemJSON(requestObj, dn.getPurchaseReturn().getID(), moduleid);
                    for (int cnt = 0; cnt < PurchaseReturnlineItemsArr.length(); cnt++) {
                        JSONObject itemData = PurchaseReturnlineItemsArr.getJSONObject(cnt);
                        jArr.put(itemData);
                    }
                }
                
                /*
                 * Template Sub Type
                 * 7 - Undercharged CN
                 * 8 - Overcharged CN
                 */
                
                /*
                 * Getting line item data for undercharged and overcharged CN
                 */
                
                if(dn.getRowsGst() !=null) {
                    Map<String, Object> summaryParams = new HashMap<>();
                    summaryParams.put("templateSubtype", templateSubtype);
                    summaryParams.put("companyAccountPreferences", companyAccountPreferences);
                    summaryParams.put("extraCompanyPreferences", extraCompanyPreferences);
                    summaryParams.put("pdfConfig", config);
                    summaryParams.put("lineLevelTaxesGST", lineLevelTaxesGST);
                    summaryParams.put("lineLevelTaxAmountGST", lineLevelTaxAmountGST);
                    summaryParams.put("lineLevelTaxBasicGST", lineLevelTaxBasicGST);
                    summaryParams.put("debitNote", dn);
                    summaryParams.put("accountsubtotal", accountsubtotal);
                    summaryParams.put("accounttotaltax", accounttotaltax);
                    summaryParams.put("accounttotalamount", accounttotalamount);
                    summaryParams.put("invoicesubtotal", invoicesubtotal);
                    summaryParams.put("invoicetotaltax", invoicetotaltax);
                    summaryParams.put("invoicetotalamount", invoicetotalamount);
                    summaryParams.put("totalwithtax", 0);
                    summaryParams.put("GSTExchangeRate", GSTExchangeRate);
                    summaryParams.put("invoiceNos", invoiceNos);
                    summaryParams.put("invAmounts", invAmounts);
                    summaryParams.put("invTaxAmounts", invTaxAmounts);
                    summaryParams.put("invAmountDues", invAmountDues);
                    summaryParams.put("invEnterAmounts", invEnterAmounts);
                    summaryParams.put("invoicedates", invoicedates);
                    summaryParams.put("accCodes", accCodes);
                    summaryParams.put("accNames", accNames);
                    summaryParams.put("accAmounts", accAmounts);
                    summaryParams.put("accTaxNames", accTaxNames);
                    summaryParams.put("accTaxAmounts", accTaxAmounts);
                    summaryParams.put("accAmountWithTaxes", accAmountWithTaxes);
                    summaryParams.put("accDescriptions", accDescriptions);
                    summaryParams.put("accTaxPercent", accTaxPercent);
                    summaryParams.put("accReason", accReason);
                    summaryParams.put("accAmountExcludeGST", accAmountExcludeGST);
                    summaryParams.put("subTotal", 0);
                    summaryParams.put("totaltax", totaltax);
                    summaryParams.put("salespersonvalue", "");

                    if (templateSubtype.equals(CustomDesignerConstants.OVERCHARGE_SUBTYPE)) {
                        jArr = accGoodsReceiptCommon.getOverchargeDNDetailsItemJSON(requestObj, summaryParams);
                    } else if (templateSubtype.equals(CustomDesignerConstants.UNDERCHARGE_SUBTYPE)) {
                        jArr = accGoodsReceiptCommon.getUnderchargeDNDetailsItemJSON(requestObj, summaryParams);
                    }
                }

            }
        } catch (Exception ex) {
            Logger.getLogger(accGoodsReceiptControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
        }
        return jArr;
    }
       
     public void exportSingleGROrder(HttpServletRequest request, HttpServletResponse response) {
        try {
            HashMap<String, Object>otherconfigrequestParams = new HashMap();
            String SOID = request.getParameter("bills");
            String companyid = AccountingManager.getCompanyidFromRequest(request);
            int moduleid = 0;
            if(!StringUtil.isNullOrEmpty(request.getParameter(Constants.moduleid))){
                moduleid=Integer.parseInt(request.getParameter(Constants.moduleid));
            }
            /**
             * change module id for asset module
             */
            boolean isFixedAsset = false;
            if (!StringUtil.isNullOrEmpty(request.getParameter(Constants.isFixedAsset))) {
                isFixedAsset = Boolean.parseBoolean(request.getParameter(Constants.isFixedAsset));
            }
            if(isFixedAsset){
                moduleid = Constants.Acc_FixedAssets_GoodsReceipt_ModuleId;
            }
            KwlReturnObject objItr = accountingHandlerDAOobj.getObject(GoodsReceiptOrder.class.getName(), SOID);
            GoodsReceiptOrder goodsReceiptOrder = (GoodsReceiptOrder) objItr.getEntityList().get(0);
            AccCustomData accCustomData = null;
            if (goodsReceiptOrder.getGoodsReceiptOrderCustomData() != null) {
                accCustomData = goodsReceiptOrder.getGoodsReceiptOrderCustomData();
            }
            String recordids = "";
            if(!StringUtil.isNullOrEmpty(request.getParameter("recordids")))
                recordids = request.getParameter("recordids");
            ArrayList<String> SOIDList = CustomDesignHandler.getSelectedBillIDs(recordids);
            HashMap<String, Object> fieldrequestParams = new HashMap();
            fieldrequestParams.put(Constants.filter_names, Arrays.asList(Constants.companyid, Constants.moduleid, Constants.customcolumn));
            fieldrequestParams.put(Constants.filter_values, Arrays.asList(companyid, moduleid, 1));
            HashMap<String, String> replaceFieldMap = new HashMap<String, String>();
            HashMap<String, Integer> FieldMap = accAccountDAOobj.getFieldParamsMap(fieldrequestParams, replaceFieldMap);
            replaceFieldMap = new HashMap<String, String>();
             /*
             * Dimensions----Customcolumn=1-lineitem;Customfield=0=Dimension
             */
            fieldrequestParams.clear();
            HashMap<String, String> dimensionFieldMap = new HashMap<String, String>();
            fieldrequestParams.put(Constants.filter_names, Arrays.asList(Constants.companyid, Constants.moduleid, Constants.customcolumn, Constants.customfield));
            fieldrequestParams.put(Constants.filter_values, Arrays.asList(companyid, moduleid, 1, 0));
            HashMap<String, Integer> DimensionFieldMap = accAccountDAOobj.getFieldParamsMap(fieldrequestParams, dimensionFieldMap);

            fieldrequestParams.clear();
            HashMap<String, String> customfieldFieldMap = new HashMap<String, String>();
            fieldrequestParams.put(Constants.filter_names, Arrays.asList(Constants.companyid, Constants.moduleid, Constants.customcolumn, Constants.customfield));
            fieldrequestParams.put(Constants.filter_values, Arrays.asList(companyid, moduleid, 1, 1));
            HashMap<String, Integer> LineLevelCustomFieldMap = accAccountDAOobj.getFieldParamsMap(fieldrequestParams, customfieldFieldMap);
            /**
             * reset module id
             */
            if(isFixedAsset){
                moduleid = Constants.Acc_Goods_Receipt_ModuleId;
            }
            HashMap<String, JSONArray> itemDataGROrder = new HashMap<String, JSONArray>();
            
            HashMap<String, Object> paramMap = new HashMap();
            paramMap.put(Constants.fieldMap, FieldMap);
            paramMap.put(Constants.replaceFieldMap, replaceFieldMap);
            paramMap.put(Constants.dimensionFieldMap, DimensionFieldMap);
            paramMap.put(Constants.lineLevelCustomFieldMap, LineLevelCustomFieldMap);
            
            JSONObject requestObj = StringUtil.convertRequestToJsonObject(request);
            
            for (int count = 0; count < SOIDList.size(); count++) {
                JSONArray lineItemsArr = accGoodsReceiptCommon.getGRODetailsItemJSON(requestObj, SOIDList.get(count), paramMap);
                itemDataGROrder.put(SOIDList.get(count), lineItemsArr);

                // Below Function called to update print flag for GRO Report
                accCommonTablesDAO.updatePrintFlag(moduleid, SOIDList.get(count), companyid); 
            }

            otherconfigrequestParams.put(Constants.moduleid, moduleid);
            String invoicePostText = goodsReceiptOrder.getPostText() == null ? "" : goodsReceiptOrder.getPostText();
            ExportRecordHandler.exportSingleGeneric(request, response, itemDataGROrder, accCustomData, customDesignDAOObj,accCommonTablesDAO, accAccountDAOobj, accountingHandlerDAOobj, velocityEngine, invoicePostText,otherconfigrequestParams,accInvoiceServiceDAO,accGoodsReceiptServiceDAO);
        } catch (ServiceException | SessionExpiredException ex) {
           Logger.getLogger(accGoodsReceiptControllerCMN.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
        } catch (Exception ex) {
           Logger.getLogger(accGoodsReceiptControllerCMN.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
        }
    }
    
 
    
    public ModelAndView getAgeingAnalysisDetailsJasper(HttpServletRequest request, HttpServletResponse response) throws ServiceException, SessionExpiredException {
        Map<String, Object> agedReceivableMap = new HashMap<String, Object>();
        AgedReceivable agedReceivable = new AgedReceivable();
        ArrayList<AgedReceivable> agedReceivableList = new ArrayList<AgedReceivable>();
        try {
            int templateflag=Integer.parseInt(request.getParameter("templateflag"));
            boolean isLandscape = request.getParameter("isLandscape") != null ? Boolean.parseBoolean(request.getParameter("isLandscape")) : false;
            boolean isParentChild = request.getParameter("isParentChild") != null ? Boolean.parseBoolean(request.getParameter("isParentChild")) : false;   //True for Aged Payable Based On Parent Child report.
            int isgroupcomboDate = request.getParameter("groupcombo")!=null?Integer.parseInt(request.getParameter("groupcombo")):0;
            String companyid = sessionHandlerImpl.getCompanyid(request);
            KwlReturnObject cmpresult = accountingHandlerDAOobj.getObject(Company.class.getName(), companyid);
            Company company = (Company) cmpresult.getEntityList().get(0);

            agedReceivable.setName(company.getCompanyName());
            agedReceivable.setEmail(company.getEmailID() != null ? company.getEmailID() : "");
            agedReceivable.setFax(company.getFaxNumber() != null ? company.getFaxNumber() : "");
            agedReceivable.setPhone(company.getPhoneNumber() != null ? company.getPhoneNumber() : "");

            KWLCurrency currency = company.getCurrency();
            agedReceivable.setCurrencyinword(currency.getName().toString());

            SimpleDateFormat df = new SimpleDateFormat(Constants.ddMMyyyy);
            String endDate = df.format(authHandler.getDateOnlyFormat().parse(request.getParameter("enddate")));
            Calendar c = Calendar.getInstance();
            c.setTime(df.parse(endDate)); // number of days to substract
            //           c.add(Calendar.DATE, -1);
            endDate = df.format(c.getTime());
//            String startDate = df.format(authHandler.getDateOnlyFormat().parse(request.getParameter("stdate")));
            String startDate = null;
            if (!StringUtil.isNullOrEmpty(request.getParameter("stdate")) && !request.getParameter("stdate").equals("undefined")) {
                startDate = df.format(authHandler.getGlobalDateFormat().parse(request.getParameter("stdate")));
            } else {
                startDate = df.format(authHandler.getGlobalDateFormat().parse(Constants.opening_Date));
            }
            if (!StringUtil.isNullOrEmpty(request.getParameter("asofdate")) && !request.getParameter("asofdate").equals("undefined")) {
                String asOfDate = df.format(authHandler.getGlobalDateFormat().parse(request.getParameter("asofdate")));
                agedReceivable.setAsOnDate("As of Date : " + asOfDate);
            }
            if (!StringUtil.isNullOrEmpty(request.getParameter("datefilter")) && !request.getParameter("datefilter").equals("undefined")) {
                String agedon = "Aged On :";
                if (Integer.parseInt(request.getParameter("datefilter")) == Constants.agedDueDate1to30Filter) {
                    agedon += Constants.agedDueDate1to30Days;
                } else if (Integer.parseInt(request.getParameter("datefilter")) == Constants.agedInvoiceDateFilter) {
                    agedon += Constants.agedInvoiceDate;
                } else if (Integer.parseInt(request.getParameter("datefilter")) == Constants.agedInvoiceDate0to30Filter) {
                    agedon += Constants.agedInvoiceDate0to30;
                } else {
                    agedon += Constants.agedDueDate0to30Days;
                }
                agedReceivable.setAgedOn(agedon);
            }
//            String date = "From Date : " + startDate + ",To Date : " + endDate;
            String date = "To Date : " + endDate;
            agedReceivable.setDateRange(date);
            KwlReturnObject result = accountingHandlerDAOobj.getObject(CompanyAccountPreferences.class.getName(), sessionHandlerImpl.getCompanyid(request));
            CompanyAccountPreferences companyAccountPreferences = (CompanyAccountPreferences) result.getEntityList().get(0);
            String fiscalstart = df.format(companyAccountPreferences.getFinancialYearFrom());
            Calendar c1 = Calendar.getInstance();
            c1.setTime(df.parse(fiscalstart));
            c1.add(Calendar.YEAR, 1); // number of years to add
            c1.add(Calendar.DATE, -1);
            String fiscalend = df.format(c1.getTime());
            String period = fiscalstart + " - " + fiscalend;
            agedReceivable.setStartDate(period);
            int duration = Integer.parseInt(request.getParameter("duration"));
            agedReceivable.setAmountDue1Header(duration + " & Below");
            agedReceivable.setAmountDue2Header(duration + 1 + "-" + (2 * duration));
            agedReceivable.setAmountDue3Header("Over " + (2 * duration));
             if ((templateflag == Constants.F1RecreationLeasing_templateflag || templateflag == Constants.F1Recreation_templateflag) && isgroupcomboDate!=1)  
            {  agedReceivable.setCurentAmountDueHeader("Current");//Current
               agedReceivable.setAmountDue1Header(1+"-"+duration);//1-30
               agedReceivable.setAmountDue3Header((2 * duration)+1+"-"+(3 * duration));//61-90
               agedReceivable.setAmountDue4Header((3 * duration)+1+"-"+(4 * duration));//91-120
               agedReceivable.setAmountDue5Header((4 * duration)+1+"-"+(5 * duration));//121-150
               agedReceivable.setAmountDue6Header((5 * duration)+1+"-"+(6 * duration));//151-180
               agedReceivable.setAmountDue7Header(">"+(6 * duration));//>180
            }
            agedReceivableMap = getAgedPayablebleJasperDetails(request, response);

            agedReceivableList.add(agedReceivable);
            agedReceivableMap.put("companyaddress", AccountingAddressManager.getCompanyDefaultBillingAddress(companyid, accountingHandlerDAOobj));
            agedReceivableMap.put("format", "pdf");
            agedReceivableMap.put("person", "Vendor");
            String fileName1 = StorageHandler.GetDocStorePath() + companyid + "_template" + FileUploadHandler.getCompanyImageExt();
            String fileName2 = StorageHandler.GetDocStorePath()+ companyid + "_onlyLogo" + FileUploadHandler.getCompanyImageExt();
            if(templateflag==Constants.sms_templateflag || templateflag==Constants.smsholding_templateflag){
                agedReceivableMap.put("imagePath", fileName2);
            }else{
                agedReceivableMap.put("imagePath", fileName1);
            }
           
            agedReceivableMap.put("datasource", new JRBeanCollectionDataSource(agedReceivableList));
             if (isParentChild) {
                response.setHeader("Content-Disposition", "attachment;filename=" + "AgedPayableBasedOnParentChildReportView_v1.pdf");
            } else {
                response.setHeader("Content-Disposition", "attachment;filename=" + "AgedPayableReportView_v1.pdf");
            }
            String mainReportName="AgedReceivable";
            String subReportName="AgedReceivableSubReport";
            if (isgroupcomboDate == 1) {
                subReportName = "AgedReceivableSortByDateSubreport";
            } else if (templateflag == Constants.F1RecreationLeasing_templateflag || templateflag == Constants.F1Recreation_templateflag){
                mainReportName = "AgedReceivableDetailedAllInterval";
                subReportName = "AgedReceivableDetailedSubReportAllInterval";
            }
           
            if(isLandscape){
                mainReportName+="Landscape";
                subReportName+="Landscape";
            }
            InputStream inputStream = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/"+mainReportName+".jrxml");
            JasperDesign jasperDesign = JRXmlLoader.load(inputStream);
            JasperReport jasperReport = JasperCompileManager.compileReport(jasperDesign);

            InputStream inputStreamSubReport = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/"+subReportName+".jrxml");
            JasperDesign jasperDesignSubReport = JRXmlLoader.load(inputStreamSubReport);
            JasperReport jasperReportSubReport = JasperCompileManager.compileReport(jasperDesignSubReport);
            
            agedReceivableMap.put("AgedReceivableSubReport", jasperReportSubReport);
            JRBeanCollectionDataSource beanColDataSource = new JRBeanCollectionDataSource(agedReceivableList);
            JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, agedReceivableMap, beanColDataSource);
            
            JRPdfExporter exp = new JRPdfExporter();
            exp.setParameter(JRExporterParameter.JASPER_PRINT, jasperPrint);
            exp.setParameter(JRPdfExporterParameter.OUTPUT_STREAM, response.getOutputStream());
            exp.exportReport();
            
        } catch (Exception ex) {
            Logger.getLogger(accGoodsReceiptControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
        }
        return new ModelAndView("", agedReceivableMap);
    }

    public Map<String, Object> getAgedPayablebleJasperDetails(HttpServletRequest request, HttpServletResponse response) throws ServiceException, SessionExpiredException {
        ArrayList<AgedReceivableSubReport> agedReceivableSubReportList = new ArrayList< AgedReceivableSubReport>();
        Map<String, Object> agedReceivableMap = new HashMap<String, Object>();
        SimpleDateFormat df = new SimpleDateFormat("dd/MM/yyyy");
        JSONObject jobj = new JSONObject();
        try {
            String companyid = sessionHandlerImpl.getCompanyid(request);
            KwlReturnObject companyresult = accountingHandlerDAOobj.getObject(Company.class.getName(), companyid);
            Company company = (Company) companyresult.getEntityList().get(0);
            KWLCurrency currency = company.getCurrency();

            ModelAndView result=getGoodsReceiptsMerged(request,response);
            String model = (String) result.getModel().get("model");
            JSONObject objJSONObj = new JSONObject(model);
            JSONArray DataJArr = objJSONObj.getJSONArray("data");
            HashMap<String,Double> currencyTotal = new HashMap<String,Double>();
            double amountdue1 = 0.0;
            for (int i = 0; i < DataJArr.length(); i++) {
                AgedReceivableSubReport agedReceivableSubReport = new AgedReceivableSubReport();
                jobj = DataJArr.getJSONObject(i);
                agedReceivableSubReport.setCustomerName(jobj.optString("personname") != null ? jobj.getString("personname") : "");
                agedReceivableSubReport.setBasecurr(currency.getName()!= null ? currency.getName().toString(): currency.getSymbol());
            
                if (jobj.optString("personid") != null && !StringUtil.isNullOrEmpty(jobj.optString("personid"))) {
                    KwlReturnObject cmpresult = accountingHandlerDAOobj.getObject(Vendor.class.getName(), jobj.getString("personid"));
                    Vendor customer = (Vendor) cmpresult.getEntityList().get(0);
                    agedReceivableSubReport.setCustomerCode(customer.getAcccode() != null ? customer.getAcccode() : "");
                    agedReceivableSubReport.setCreditlimit(StringUtil.isNullOrEmpty(Double.toString(customer.getDebitlimit())) ? "" : authHandler.formattedAmount(customer.getDebitlimit(), companyid));
                    agedReceivableSubReport.setCreditdays(customer.getDebitTerm() != null ? Integer.toString(customer.getDebitTerm().getTermdays()) : "");
                }
                
                agedReceivableSubReport.setDate(jobj.optString("date") != null ? df.format(Date.parse(jobj.getString("date"))) : "");
                KwlReturnObject currencyresult = accountingHandlerDAOobj.getObject(KWLCurrency.class.getName(), jobj.getString("currencyid"));
                KWLCurrency currency1 = (KWLCurrency)currencyresult.getEntityList().get(0);   
                    agedReceivableSubReport.setExchangerate(jobj.getString("exchangerate"));
                    agedReceivableSubReport.setCurrency(currency1.getName());
                    agedReceivableSubReport.setEntryNumber(jobj.optString("billno") != null ? jobj.getString("billno") : "");
                if(currencyTotal.containsKey(currency1.getName())){
                    Double newValue=0.0;
                    Double oldValue=0.0;
                    oldValue=currencyTotal.get(currency1.getName());
                    newValue=jobj.optString("amountdue") != null ? Double.parseDouble(jobj.getString("amountdue")) : 0.0;
                    currencyTotal.put(currency1.getName(), oldValue+newValue);
                }else{
                    currencyTotal.put(currency1.getName(), jobj.optString("amountdue") != null ? Double.parseDouble(jobj.getString("amountdue")) : 0.0);
                }
                agedReceivableSubReport.setEntryType(jobj.optString("type") != null ? jobj.getString("type") : "");
                agedReceivableSubReport.setDocumentAmount(jobj.optString("amountdue") != null ? Double.parseDouble(jobj.getString("amountdue")) : 0.0);
                agedReceivableSubReport.setTotalinbase(jobj.optString("amountdueinbase") != null ? Double.parseDouble(jobj.getString("amountdueinbase")) : 0.0);
//                agedReceivableSubReport.setAmountDue1(jobj.optString("amountdue2") != null ? Double.parseDouble(jobj.getString("amountdue2")) : 0.0);
               //Show current and 1-30 Days Column amount in 30 and Below Column (in PDF Case).   jobj.getString("amountdue1") :- Current , jobj.optString("amountdue2") - 1-30. 
                amountdue1 = (jobj.optString("amountdue1") != null ? Double.parseDouble(jobj.getString("amountdue1")) : 0.00) + (jobj.optString("amountdue2") != null ? Double.parseDouble(jobj.getString("amountdue2")) : 0.00);
                agedReceivableSubReport.setAmountDue1(amountdue1);
                agedReceivableSubReport.setAmountDue2(jobj.optString("amountdue3") != null ? Double.parseDouble(jobj.getString("amountdue3")) : 0.0);
                double total = 0.0;
                if (jobj.optString("amountdue1") != null) {
                    agedReceivableSubReport.setDueAmount1(Double.parseDouble(jobj.getString("amountdue1")));
                }
                if (jobj.optString("amountdue2") != null) {
                    agedReceivableSubReport.setDueAmount2(Double.parseDouble(jobj.getString("amountdue2")));
                }
                if (jobj.optString("amountdue3") != null) {
                    agedReceivableSubReport.setDueAmount3(Double.parseDouble(jobj.getString("amountdue3")));
                }
                if (jobj.optString("amountdue4") != null) {
                    total = total + Double.parseDouble(jobj.getString("amountdue4"));
                    agedReceivableSubReport.setDueAmount4(Double.parseDouble(jobj.getString("amountdue4")));
                }
                if (jobj.optString("amountdue5") != null) {
                    total = total + Double.parseDouble(jobj.getString("amountdue5"));
                    agedReceivableSubReport.setDueAmount5(Double.parseDouble(jobj.getString("amountdue5")));
                }
                if (jobj.optString("amountdue6") != null) {
                    total = total + Double.parseDouble(jobj.getString("amountdue6"));
                    agedReceivableSubReport.setDueAmount6(Double.parseDouble(jobj.getString("amountdue6")));
                }
                if (jobj.optString("amountdue7") != null) {
                    total = total + Double.parseDouble(jobj.getString("amountdue7"));
                    agedReceivableSubReport.setDueAmount7(Double.parseDouble(jobj.getString("amountdue7")));
                }
                double amountdue8 = 0;
                if (jobj.optString("amountdue8") != null) {
                    amountdue8 = Double.parseDouble(jobj.getString("amountdue8"));
                    total = total + amountdue8;
                }
                if (jobj.optString("amountdue9") != null) {
                    amountdue8 += Double.parseDouble(jobj.getString("amountdue9"));
                    total = total + Double.parseDouble(jobj.getString("amountdue9"));
                }
                if (jobj.optString("amountdue10") != null) {
                    amountdue8 += Double.parseDouble(jobj.getString("amountdue10"));
                    total = total + Double.parseDouble(jobj.getString("amountdue10"));
                }
                if (jobj.optString("amountdue11") != null) {
                    amountdue8 += Double.parseDouble(jobj.getString("amountdue11"));
                    total = total + Double.parseDouble(jobj.getString("amountdue11"));
                }
//                        if (jobj.optString("accruedbalance") != null) {
//                            accruedBalance = Double.parseDouble(jobj.getString("accruedbalance"));
//                            total = total + accruedBalance;
//                        }
                agedReceivableSubReport.setDueAmount8(amountdue8);
                agedReceivableSubReport.setBasecurr(currency.getName());
                agedReceivableSubReport.setAmountDue3(total);
                agedReceivableSubReportList.add(agedReceivableSubReport);
            }
            List<CurrencyWiseGrandTotals> ctList = new ArrayList<CurrencyWiseGrandTotals>();
            for (String key : currencyTotal.keySet()) {
                Double value = currencyTotal.get(key);
                CurrencyWiseGrandTotals ct = new CurrencyWiseGrandTotals();
                ct.setCurrency(key);
                ct.setTotal(value);
                ctList.add(ct);
            }
            
            AgedReceivableSubReport lastList =agedReceivableSubReportList.get(agedReceivableSubReportList.size()-1);
            lastList.setCtList(ctList);
            agedReceivableSubReportList.remove(agedReceivableSubReportList.size()-1);
            agedReceivableSubReportList.add(lastList);
            
            agedReceivableMap.put("AgedReceivableSubReportData", new JRBeanCollectionDataSource(agedReceivableSubReportList));
        } catch (JSONException ex) {
            Logger.getLogger(accGoodsReceiptControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
            throw ServiceException.FAILURE("getAgedPayablebleJasperDetails : " + ex.getMessage(), ex);
        }
        return agedReceivableMap;
    }

    public ModelAndView getAgeingAnalysisSummariesedJasper(HttpServletRequest request, HttpServletResponse response) throws ServiceException, SessionExpiredException {
        Map<String, Object> agedReceivableMap = new HashMap<String, Object>();
        String satsFileName ="AgedReceivableWithoutAging.jrxml";
        String satsSubReportFileName ="";
        String jrxmlFilename ="";
        String filename ="";
        AgedReceivable agedReceivable = new AgedReceivable();
        ArrayList<AgedReceivable> agedReceivableList = new ArrayList<AgedReceivable>();
        try {
            int templateflag=Integer.parseInt(request.getParameter("templateflag"));
            boolean isLandscape = request.getParameter("isLandscape") != null ? Boolean.parseBoolean(request.getParameter("isLandscape")) : false;
            boolean isParentChild = request.getParameter("isParentChild") != null ? Boolean.parseBoolean(request.getParameter("isParentChild")) : false; //True for Aged Payable Based On Parent Child report.
            boolean reportWithoutAging = Boolean.parseBoolean(request.getParameter("reportWithoutAging"));
            String companyid = sessionHandlerImpl.getCompanyid(request);
            if (templateflag == Constants.sats_templateflag) {
                if (reportWithoutAging) {
                    satsSubReportFileName = "SATSAgedReceivableWithoutAgingSubReport.jrxml";
                    filename = "AgedPayableWithoutAging_v1";
                } else {
                    satsSubReportFileName = "SATSAgedReceivableSummarisedSubReport.jrxml";
                    filename = "AgedPayableSummarised_v1";
                }
            } else if (templateflag == Constants.F1RecreationLeasing_templateflag || templateflag == Constants.F1Recreation_templateflag) {
                if (reportWithoutAging) {
                    jrxmlFilename = "AgedReceivableWithoutAging";
                    filename = "AgedPayableWithoutAging_v1";
                } else {
                    jrxmlFilename = "AgedReceivablesAllIntervals";
                    filename = "AgedPayableSummarised_v1";
                }
            } else {
                if (reportWithoutAging) {
                    jrxmlFilename = "AgedReceivableWithoutAging";
                    filename = "AgedPayableWithoutAging_v1";
                } else {
                    if (isParentChild) {
                        filename = "AgedPayableBasedOnParentChildSummarised_v1";                       
                    } else {
                        filename = "AgedPayableSummarised_v1";
                    }
                    jrxmlFilename = "AgedReceivableSummarised";
                    
                }
            }
            KwlReturnObject cmpresult = accountingHandlerDAOobj.getObject(Company.class.getName(), companyid);
            Company company = (Company) cmpresult.getEntityList().get(0);

            agedReceivable.setName(company.getCompanyName());
            agedReceivable.setEmail(company.getEmailID() != null ? company.getEmailID() : "");
            agedReceivable.setFax(company.getFaxNumber() != null ? company.getFaxNumber() : "");
            agedReceivable.setPhone(company.getPhoneNumber() != null ? company.getPhoneNumber() : "");

            KWLCurrency currency = company.getCurrency();
            agedReceivable.setCurrencyinword(currency.getName().toString());

            SimpleDateFormat df = new SimpleDateFormat(Constants.ddMMyyyy);
            String endDate = df.format(authHandler.getDateOnlyFormat().parse(request.getParameter("enddate")));
            Calendar c = Calendar.getInstance();
            c.setTime(df.parse(endDate)); // number of days to substract
            //           c.add(Calendar.DATE, -1);
            endDate = df.format(c.getTime());
//            String startDate = df.format(authHandler.getDateOnlyFormat().parse(request.getParameter("stdate")));
            String startDate = null;
            if (!StringUtil.isNullOrEmpty(request.getParameter("stdate"))) {
                startDate = df.format(authHandler.getGlobalDateFormat().parse(request.getParameter("stdate")));
            } else {
                startDate = df.format(authHandler.getGlobalDateFormat().parse(Constants.opening_Date));
            }
            if (!StringUtil.isNullOrEmpty(request.getParameter("asofdate")) && !request.getParameter("asofdate").equals("undefined")) {
                String asOfDate = df.format(authHandler.getGlobalDateFormat().parse(request.getParameter("asofdate")));
                agedReceivable.setAsOnDate("As of Date : " + asOfDate);
            }
            if (!StringUtil.isNullOrEmpty(request.getParameter("datefilter")) && !request.getParameter("datefilter").equals("undefined")) {
                String agedon = "Aged On :";

                if (Integer.parseInt(request.getParameter("datefilter")) == Constants.agedDueDate1to30Filter) {
                    agedon += Constants.agedDueDate1to30Days;
                } else if (Integer.parseInt(request.getParameter("datefilter")) == Constants.agedInvoiceDateFilter) {
                    agedon += Constants.agedInvoiceDate;
                } else if (Integer.parseInt(request.getParameter("datefilter")) == Constants.agedInvoiceDate0to30Filter) {
                    agedon += Constants.agedInvoiceDate0to30;
                } else {
                    agedon += Constants.agedDueDate0to30Days;
                }
                agedReceivable.setAgedOn(agedon);
            }
            String date = "To Date : " + endDate;
//            String date = "From Date : " + startDate + ",To Date : " + endDate;
            agedReceivable.setDateRange(date);
            KwlReturnObject result = accountingHandlerDAOobj.getObject(CompanyAccountPreferences.class.getName(), sessionHandlerImpl.getCompanyid(request));
            CompanyAccountPreferences companyAccountPreferences = (CompanyAccountPreferences) result.getEntityList().get(0);
            String fiscalstart = df.format(companyAccountPreferences.getFinancialYearFrom());
            Calendar c1 = Calendar.getInstance();
            c1.setTime(df.parse(fiscalstart));
            c1.add(Calendar.YEAR, 1); // number of years to add
            c1.add(Calendar.DATE, -1);
            String fiscalend = df.format(c1.getTime());
            String period = fiscalstart + " - " + fiscalend;
            agedReceivable.setStartDate(period);
            int duration = Integer.parseInt(request.getParameter("duration"));
            agedReceivable.setAmountDue1Header(duration + " & Below");
            agedReceivable.setAmountDue2Header(duration + 1 + "-" + (2 * duration));
            agedReceivable.setAmountDue3Header("Over " + (2 * duration));
             if (templateflag == Constants.F1RecreationLeasing_templateflag || templateflag == Constants.F1Recreation_templateflag) 
            {  agedReceivable.setCurentAmountDueHeader("Current");//Current
               agedReceivable.setAmountDue1Header(1+"-"+duration);
               agedReceivable.setAmountDue3Header((2 * duration)+1+"-"+(3 * duration));//61-90
               agedReceivable.setAmountDue4Header((3 * duration)+1+"-"+(4 * duration));//91-120
               agedReceivable.setAmountDue5Header((4 * duration)+1+"-"+(5 * duration));//121-150
               agedReceivable.setAmountDue6Header((5 * duration)+1+"-"+(6 * duration));//151-180
               agedReceivable.setAmountDue7Header(">"+(6 * duration));//>180
            }
            agedReceivableMap = getAgedPayableSummarisedJasper(request, response);
            String asonDate = df.format(authHandler.getDateOnlyFormat().parse(request.getParameter("asofdate")));
            boolean flag=false;
            if (templateflag == Constants.Monzone_templateflag) {   //Show following footer details only in Monzone template
                flag=true;
                agedReceivable.setAsOnDate("As on - "+asonDate);
                double amountdueinbasecol1 = StringUtil.isNullOrEmpty(agedReceivableMap.get("amountdueinbasecol1").toString()) ? 0 : Double.parseDouble(agedReceivableMap.get("amountdueinbasecol1").toString());
                double amountdueinbasecol2 = StringUtil.isNullOrEmpty(agedReceivableMap.get("amountdueinbasecol2").toString()) ? 0 : Double.parseDouble(agedReceivableMap.get("amountdueinbasecol2").toString());
                double amountdueinbasecol3 = StringUtil.isNullOrEmpty(agedReceivableMap.get("amountdueinbasecol3").toString()) ? 0 : Double.parseDouble(agedReceivableMap.get("amountdueinbasecol3").toString());
                agedReceivable.setColTotalHeader("Sub Total (" + currency.getName().toString()+")");
                agedReceivable.setAmountDue1Total(authHandler.formattedCommaSeparatedAmount(amountdueinbasecol1, companyid));
                agedReceivable.setAmountDue2Total(authHandler.formattedCommaSeparatedAmount(amountdueinbasecol2, companyid));
                agedReceivable.setAmountDue3Total(authHandler.formattedCommaSeparatedAmount(amountdueinbasecol3, companyid));
            }
            agedReceivableMap.put("isMonzone", flag);
            agedReceivableList.add(agedReceivable);
            agedReceivableMap.put("format", "pdf");
            agedReceivableMap.put("person", "Vendor");
            String fileName1 = StorageHandler.GetDocStorePath() + companyid + "_template" + FileUploadHandler.getCompanyImageExt();
            String fileName2 = StorageHandler.GetDocStorePath()+ companyid + "_onlyLogo" + FileUploadHandler.getCompanyImageExt();
            if(templateflag==Constants.sms_templateflag || templateflag==Constants.smsholding_templateflag){
                agedReceivableMap.put("imagePath", fileName2);
            }else{
                agedReceivableMap.put("imagePath", fileName1);
            }
            agedReceivableMap.put("datasource", new JRBeanCollectionDataSource(agedReceivableList));
            agedReceivableMap.put("companyaddress", AccountingAddressManager.getCompanyDefaultBillingAddress(companyid, accountingHandlerDAOobj));
            
            String orientation="";
            if(isLandscape){
                orientation+="Landscape";
            }
            InputStream inputStream = null;
            InputStream inputStreamSubReport = null;
            if (templateflag == Constants.sats_templateflag) {
                inputStream = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/" + satsFileName);
                inputStreamSubReport = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/" + satsSubReportFileName);
            } else {
                inputStream = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/" + jrxmlFilename + orientation + ".jrxml");
                inputStreamSubReport = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/" + jrxmlFilename + "SubReport" + orientation + ".jrxml");
            }

            JasperDesign jasperDesign = JRXmlLoader.load(inputStream);
            JasperReport jasperReport = JasperCompileManager.compileReport(jasperDesign);
            JasperDesign jasperDesignSubReport = JRXmlLoader.load(inputStreamSubReport);
            JasperReport jasperReportSubReport = JasperCompileManager.compileReport(jasperDesignSubReport);
            agedReceivableMap.put("AgedReceivableSubReport", jasperReportSubReport);
            JRBeanCollectionDataSource beanColDataSource = new JRBeanCollectionDataSource(agedReceivableList);
            JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, agedReceivableMap, beanColDataSource);

            JRPdfExporter exp = new JRPdfExporter();
            exp.setParameter(JRPdfExporterParameter.JASPER_PRINT, jasperPrint);
            exp.setParameter(JRPdfExporterParameter.OUTPUT_STREAM, response.getOutputStream());
            response.setHeader("Content-Disposition", "attachment;filename=\"" + filename +".pdf\"");
            exp.exportReport();
            
        } catch (Exception ex) {
            Logger.getLogger(accGoodsReceiptControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
        }
        return new ModelAndView("", agedReceivableMap);
        
    }

    public Map<String, Object> getAgedPayableSummarisedJasper(HttpServletRequest request, HttpServletResponse response) throws ServiceException, SessionExpiredException {
        ArrayList<AgedReceivableSubReport> agedReceivableSubReportList = new ArrayList< AgedReceivableSubReport>();
        HashMap<String, AgedReceivableSubReport> arSubReportListMap = new HashMap<String, AgedReceivableSubReport>();
        Map<String, Object> agedReceivableMap = new HashMap<String, Object>();
        JSONObject jobj = new JSONObject();
        double finaltotal=0;
        double amountdueinbasecol1 = 0;   //ERP-6383 : TO show in PDF for Monzone
        double amountdueinbasecol2 = 0;
        double amountdueinbasecol3 = 0;
        try {
            String companyid = sessionHandlerImpl.getCompanyid(request);
            int templateflag = StringUtil.isNullOrEmpty(request.getParameter("templateflag"))?0:Integer.parseInt(request.getParameter("templateflag"));   //ERP-6383
            KwlReturnObject companyresult = accountingHandlerDAOobj.getObject(Company.class.getName(), companyid);
            Company company = (Company) companyresult.getEntityList().get(0);
            KWLCurrency currency = company.getCurrency();
            
            HashMap<String, Object> requestParams = new HashMap<String, Object>();
                requestParams.put(COMPANYID, sessionHandlerImpl.getCompanyid(request));
                requestParams.put(GCURRENCYID, sessionHandlerImpl.getCurrencyID(request));
                requestParams.put(DATEFORMAT, authHandler.getDateOnlyFormat());
                requestParams.put(START, request.getParameter(START));
                requestParams.put(LIMIT, request.getParameter(LIMIT));
                requestParams.put(SS, request.getParameter(SS));
                requestParams.put(ACCID, request.getParameter(ACCID));
                requestParams.put(CASHONLY, request.getParameter(CASHONLY));
                requestParams.put(CREDITONLY, request.getParameter(CREDITONLY));
                requestParams.put(IGNOREZERO, request.getParameter(IGNOREZERO));
                requestParams.put(CURDATE, request.getParameter(CURDATE));
                requestParams.put(PERSONGROUP, request.getParameter(PERSONGROUP));
                requestParams.put(ISAGEDGRAPH, request.getParameter(ISAGEDGRAPH));
                requestParams.put(VENDORID, request.getParameter(VENDORID));
                requestParams.put("custVendorID",request.getParameter("custVendorID"));
                requestParams.put(NONDELETED, request.getParameter(NONDELETED));
                requestParams.put(DURATION, request.getParameter(DURATION));
                requestParams.put(ISDISTRIBUTIVE, request.getParameter(ISDISTRIBUTIVE));
                requestParams.put(WITHINVENTORY, request.getParameter(WITHINVENTORY));
                requestParams.put(Constants.df, authHandler.getDateOnlyFormat());
                requestParams.put(Constants.REQ_startdate, request.getParameter(Constants.REQ_startdate));
                requestParams.put(Constants.REQ_enddate, request.getParameter(Constants.REQ_enddate));
                requestParams.put(Constants.Acc_Search_Json, request.getParameter(Constants.Acc_Search_Json));
                requestParams.put(Constants.Filter_Criteria, request.getParameter(InvoiceConstants.Filter_Criteria));
                requestParams.put(Constants.moduleid, request.getParameter(Constants.moduleid));
                requestParams.put("pendingapproval", (request.getParameter("pendingapproval") != null) ? Boolean.parseBoolean(request.getParameter("pendingapproval")) : false);
                requestParams.put("istemplate", (request.getParameter("istemplate") != null) ? Integer.parseInt(request.getParameter("istemplate")) : 0);
                requestParams.put("datefilter", request.getParameter("datefilter"));
                requestParams.put("asofdate", request.getParameter("asofdate"));
                requestParams.put("isAged", request.getParameter("isAged"));
                requestParams.put("exportAgedPayables", true);
                requestParams.put("isAgedPayables", true);
                requestParams.put("detailedPDF", true);
                
            JSONArray allTransaction = new JSONArray();
            request.setAttribute("isCurrencyDetails", false);

            allTransaction = accGoodsReceiptServiceDAO.getVendorAgedPayableMerged(request, requestParams);
            /**
             * AP Summary View Export (PDF)
             */
            String sort = "";
            String dir = "";
            Map<String, JSONArray> jArrMap;
            if (!StringUtil.isNullOrEmpty(request.getParameter("dir")) && !StringUtil.isNullOrEmpty(request.getParameter("sort"))) {
                dir = request.getParameter("dir");
                sort = request.getParameter("sort");
            }
            if (sort.equals("code") && !(sort.equals(""))) {
                jArrMap = AccountingManager.getSortedArrayMapBasedOnJSONAttribute(allTransaction, InvoiceConstants.code, dir);
            } else {
                jArrMap = AccountingManager.getSortedArrayMapBasedOnJSONAttribute(allTransaction, InvoiceConstants.personinfo,dir);
            }

            for (String key : jArrMap.keySet()) {

                JSONArray jarr = jArrMap.get(key);

                AgedReceivableSubReport agedReceivableSubReport = new AgedReceivableSubReport();
                ArrayList<AgedReceivableSubReportCurrencyWiseAgeing> ageingList = new ArrayList< AgedReceivableSubReportCurrencyWiseAgeing>();
                for (int i = 0; i < jarr.length(); i++) {
                    jobj = jarr.getJSONObject(i);

                    if (i == 0) {

                        agedReceivableSubReport.setCustomerId(jobj.optString("personid") != null ? jobj.getString("personid") : "");
                        agedReceivableSubReport.setCustomerName(jobj.optString("personname") != null ? jobj.getString("personname") : "");
                        agedReceivableSubReport.setBasecurr(currency.getName() != null ? currency.getName().toString() : currency.getSymbol());
                        if (templateflag != Constants.Monzone_templateflag) {
                            agedReceivableSubReport.setCredit("Debit Limit : ");
                            agedReceivableSubReport.setCreditdaystitle("Debit Days : ");
                        }
                        if (jobj.optString("personid") != null && !StringUtil.isNullOrEmpty(jobj.optString("personid"))) {
                            KwlReturnObject cmpresult = accountingHandlerDAOobj.getObject(Vendor.class.getName(), jobj.getString("personid"));
                            Vendor customer = (Vendor) cmpresult.getEntityList().get(0);
                            agedReceivableSubReport.setCustomerCode(customer.getAcccode() != null ? customer.getAcccode() : "");
                            if (templateflag != Constants.Monzone_templateflag) {   //Hide Debit Limit & Days in Monzone Template
                                agedReceivableSubReport.setCreditlimit(StringUtil.isNullOrEmpty(Double.toString(customer.getDebitlimit())) ? "" : authHandler.formattedAmount(customer.getDebitlimit(), companyid));
                                agedReceivableSubReport.setCreditdays(customer.getDebitTerm() != null ? Integer.toString(customer.getDebitTerm().getTermdays()) : "");
                            }
                        }
                        agedReceivableSubReport.setCurrency(jobj.optString("currencyname") != null ? jobj.getString("currencyname") : "");
                        agedReceivableSubReport.setTotalinbase(jobj.optString("totalinbase") != null ? Double.parseDouble(jobj.getString("totalinbase")) : 0.00);
                        double amountdue1 = (jobj.optString("amountdue1") != null ? Double.parseDouble(jobj.getString("amountdue1")) : 0.00) + (jobj.optString("amountdue2") != null ? Double.parseDouble(jobj.getString("amountdue2")) : 0.00);
                        agedReceivableSubReport.setAmountDue1(amountdue1);
                        agedReceivableSubReport.setAmountDue2(jobj.optString("amountdue3") != null ? Double.parseDouble(jobj.getString("amountdue3")) : 0.00);
                        finaltotal += jobj.optString("totalinbase") != null ? Double.parseDouble(jobj.getString("totalinbase")) : 0.00;
                        double total = 0.0;
                        if (jobj.optString("amountdue1") != null) {
                            agedReceivableSubReport.setDueAmount1(Double.parseDouble(jobj.getString("amountdue1")));
                        }
                        if (jobj.optString("amountdue2") != null) {
                            agedReceivableSubReport.setDueAmount2(Double.parseDouble(jobj.getString("amountdue2")));
                        }
                        if (jobj.optString("amountdue3") != null) {
                            agedReceivableSubReport.setDueAmount3(Double.parseDouble(jobj.getString("amountdue3")));
                        }
                        if (jobj.optString("amountdue4") != null) {
                            total = total + Double.parseDouble(jobj.getString("amountdue4"));
                            agedReceivableSubReport.setDueAmount4(Double.parseDouble(jobj.getString("amountdue4")));
                        }
                        if (jobj.optString("amountdue5") != null) {
                            total = total + Double.parseDouble(jobj.getString("amountdue5"));
                            agedReceivableSubReport.setDueAmount5(Double.parseDouble(jobj.getString("amountdue5")));
                        }
                        if (jobj.optString("amountdue6") != null) {
                            total = total + Double.parseDouble(jobj.getString("amountdue6"));
                            agedReceivableSubReport.setDueAmount6(Double.parseDouble(jobj.getString("amountdue6")));
                        }
                        if (jobj.optString("amountdue7") != null) {
                            total = total + Double.parseDouble(jobj.getString("amountdue7"));
                            agedReceivableSubReport.setDueAmount7(Double.parseDouble(jobj.getString("amountdue7")));
                        }
                        double amountdue8 = 0;
//                                double accruedBalance = 0;
                        if (jobj.optString("amountdue8") != null) {
                            amountdue8 = Double.parseDouble(jobj.getString("amountdue8"));
                            total = total + amountdue8;
                        }
//                                if (jobj.optString("accruedbalance") != null) {
//                                    accruedBalance = Double.parseDouble(jobj.getString("accruedbalance"));
//                                    total = total + accruedBalance;
//                                }
                        if (jobj.optString("amountdue9") != null) {
                            amountdue8 += Double.parseDouble(jobj.getString("amountdue9"));
                            total = total + Double.parseDouble(jobj.getString("amountdue9"));
                        }
                        if (jobj.optString("amountdue10") != null) {
                            amountdue8 += Double.parseDouble(jobj.getString("amountdue10"));
                            total = total + Double.parseDouble(jobj.getString("amountdue10"));
                        }
                        if (jobj.optString("amountdue11") != null) {
                            amountdue8 += Double.parseDouble(jobj.getString("amountdue11"));
                            total = total + Double.parseDouble(jobj.getString("amountdue11"));
                        }
                        agedReceivableSubReport.setDueAmount8(amountdue8);
                        //ERP-6383 : TO show in PDF for Monzone
                        amountdueinbasecol1 += (Double.parseDouble(jobj.optString("amountdueinbase1")) + Double.parseDouble(jobj.optString("amountdueinbase2")));
                        amountdueinbasecol2 += Double.parseDouble(jobj.optString("amountdueinbase3"));
                        amountdueinbasecol3 += (Double.parseDouble(jobj.optString("amountdueinbase4")) + Double.parseDouble(jobj.optString("amountdueinbase5")) + Double.parseDouble(jobj.optString("amountdueinbase6")) + Double.parseDouble(jobj.optString("amountdueinbase7")) + Double.parseDouble(jobj.optString("amountdueinbase8")) + Double.parseDouble(jobj.optString("amountdueinbase9")) + Double.parseDouble(jobj.optString("amountdueinbase10")) + Double.parseDouble(jobj.optString("amountdueinbase11")));
                        agedReceivableSubReport.setTotalinbase(jobj.optString("totalinbase") != null ? Double.parseDouble(jobj.getString("totalinbase")) : 0.00);
                        agedReceivableSubReport.setAmountDue3(total);

                    } else {
                        JSONObject jobj1 = jobj;

                        AgedReceivableSubReportCurrencyWiseAgeing ageing = new AgedReceivableSubReportCurrencyWiseAgeing();
                        ageing.setCurrency(jobj1.optString("currencyname") != null ? jobj1.getString("currencyname") : "");
//                        ageing.setDocumentAmount(jobj1.optString("total") != null ? Double.parseDouble(jobj1.getString("total")) : 0.00);
                        ageing.setAmountDue1((jobj1.optString("amountdue1") != null ? Double.parseDouble(jobj1.getString("amountdue1")) : 0.00) + (jobj1.optString("amountdue2") != null ? Double.parseDouble(jobj1.getString("amountdue2")) : 0.00));
                        ageing.setAmountDue2(jobj1.optString("amountdue3") != null ? Double.parseDouble(jobj1.getString("amountdue3")) : 0.00);
                        double total1 = 0.0;
                        if (jobj1.optString("amountdue1") != null) {
                            ageing.setDueAmount1(Double.parseDouble(jobj1.getString("amountdue1")));
                        }
                        if (jobj1.optString("amountdue2") != null) {
                            ageing.setDueAmount2(Double.parseDouble(jobj1.getString("amountdue2")));
                        }
                        if (jobj1.optString("amountdue3") != null) {
                            ageing.setDueAmount3(Double.parseDouble(jobj1.getString("amountdue3")));
                        }
                        if (jobj1.optString("amountdue4") != null) {
                            total1 = total1 + Double.parseDouble(jobj1.getString("amountdue4"));
                            ageing.setDueAmount4(Double.parseDouble(jobj1.getString("amountdue4")));
                        }
                        if (jobj1.optString("amountdue5") != null) {
                            total1 = total1 + Double.parseDouble(jobj1.getString("amountdue5"));
                            ageing.setDueAmount5(Double.parseDouble(jobj1.getString("amountdue5")));
                        }
                        if (jobj1.optString("amountdue6") != null) {
                            total1 = total1 + Double.parseDouble(jobj1.getString("amountdue6"));
                            ageing.setDueAmount6(Double.parseDouble(jobj1.getString("amountdue6")));
                        }
                        if (jobj1.optString("amountdue7") != null) {
                            total1 = total1 + Double.parseDouble(jobj1.getString("amountdue7"));
                            ageing.setDueAmount7(Double.parseDouble(jobj1.getString("amountdue7")));
                        }
                        double amountdue8 = 0;
//                            double accruedBalance = 0;
                        if (jobj1.optString("amountdue8") != null) {
                            amountdue8 = Double.parseDouble(jobj1.getString("amountdue8"));
                            total1 = total1 + amountdue8;
                        }
//                            if (jobj1.optString("accruedbalance") != null) {
//                                accruedBalance = Double.parseDouble(jobj1.getString("accruedbalance"));
//                                total1 = total1 + accruedBalance;
//                            }
                        if (jobj.optString("amountdue9") != null) {
                            amountdue8 += Double.parseDouble(jobj.getString("amountdue9"));
                            total1 = total1 + Double.parseDouble(jobj.getString("amountdue9"));
                        }
                        if (jobj.optString("amountdue10") != null) {
                            amountdue8 += Double.parseDouble(jobj.getString("amountdue10"));
                            total1 = total1 + Double.parseDouble(jobj.getString("amountdue10"));
                        }
                        if (jobj.optString("amountdue11") != null) {
                            amountdue8 += Double.parseDouble(jobj.getString("amountdue11"));
                            total1 = total1 + Double.parseDouble(jobj.getString("amountdue11"));
                        }

                        ageing.setDueAmount8(amountdue8);
                        ageing.setTotalinbase(jobj1.optString("totalinbase") != null ? Double.parseDouble(jobj1.getString("totalinbase")) : 0.00);
                        ageing.setAmountDue3(total1);
                        ageingList.add(ageing);
                    }//else

                }//for

                agedReceivableSubReport.setAgedReceivableSubReportCurrencyWiseAgeings(ageingList);
                agedReceivableSubReportList.add(agedReceivableSubReport);
                arSubReportListMap.put(key, agedReceivableSubReport);

            }
            agedReceivableMap.put("AgedReceivableSubReportData", new JRBeanCollectionDataSource(agedReceivableSubReportList));
            agedReceivableMap.put("amountdueinbasecol1", authHandler.round(amountdueinbasecol1, companyid)); //ERP-6383 : TO show in PDF for Monzone
            agedReceivableMap.put("amountdueinbasecol2", authHandler.round(amountdueinbasecol2, companyid));
            agedReceivableMap.put("amountdueinbasecol3", authHandler.round(amountdueinbasecol3, companyid));
            agedReceivableMap.put("total", finaltotal);
            agedReceivableMap.put("basecurr", currency.getName() != null ? currency.getName().toString() : currency.getSymbol());
        } catch (JSONException ex) {
            Logger.getLogger(accGoodsReceiptControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
            throw ServiceException.FAILURE("getAgedReceivableJasperDetails : " + ex.getMessage(), ex);
        }
        return agedReceivableMap;
    }
    
    public ModelAndView getVendorInvoiceLinkedInTransaction(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        String msg = "";
        boolean issuccess = false;
        try {
            jobj = getVendorInvoiceLinkedInTransaction(request);
            issuccess = true;
        } catch (SessionExpiredException ex) {
            msg = ex.getMessage();
            Logger.getLogger(accGoodsReceiptControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ServiceException ex) {
            msg = "accGoodsReceiptControllerCMN.getVendorInvoiceLinkedInTransaction:" + ex.getMessage();
            Logger.getLogger(accGoodsReceiptControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            msg = "accGoodsReceiptControllerCMN.getVendorInvoiceLinkedInTransaction:" + ex.getMessage();
            Logger.getLogger(accGoodsReceiptControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                jobj.put("success", issuccess);
                jobj.put("msg", msg);
            } catch (JSONException ex) {
                Logger.getLogger(accGoodsReceiptControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return new ModelAndView("jsonView", "model", jobj.toString());
    }

    public JSONObject getVendorInvoiceLinkedInTransaction(HttpServletRequest request) throws SessionExpiredException, ServiceException {
        JSONObject jobj = new JSONObject();
        JSONArray jArr = new JSONArray();
        try {
            HashMap<String, Object> requestParams = AccountingManager.getGlobalParams(request);
            String billid = request.getParameter("billid");
            String companyid = sessionHandlerImpl.getCompanyid(request);
            String isFixedAsset = request.getParameter("isFixedAsset");
            boolean isExpenseInvoice = StringUtil.isNullOrEmpty(request.getParameter("isExpenseInvoice"))?false:Boolean.FALSE.parseBoolean(request.getParameter("isExpenseInvoice"));
            DateFormat df = authHandler.getDateOnlyFormat();
            String gcurrencyid = request.getParameter("gcurrencyid") != null ? request.getParameter("gcurrencyid") : sessionHandlerImpl.getCurrencyID(request);
            KwlReturnObject curresult = accountingHandlerDAOobj.getObject(KWLCurrency.class.getName(), gcurrencyid);
            KWLCurrency currency = (KWLCurrency) curresult.getEntityList().get(0);

            double tax = 0;
            if (!StringUtil.isNullOrEmpty(billid)) {

                /*
                 * Block for building Json when Purchase Invoice linked with
                 * Debit Note
                 */
                
                KwlReturnObject cnresult = accGoodsReceiptobj.getDebitNoteLinkedWithInvoice(billid, companyid);
                List listc = cnresult.getEntityList();
            //    Iterator itr1 = listc.iterator();

                 for (int index = 0; index < listc.size(); index++) {
                    Object[] linkedRPObj = (Object[]) listc.get(index);
                    String orderid = (String) linkedRPObj[0];
                    Date linkdate = (Date)linkedRPObj[1];

                    JSONObject obj = new JSONObject();
                    KwlReturnObject objItr = accountingHandlerDAOobj.getObject(DebitNote.class.getName(), orderid);
                    DebitNote debitNote = (DebitNote) objItr.getEntityList().get(0);
                    JournalEntry je = debitNote.getJournalEntry();
                    /*
                     * There is no use of getting object of Journal Entry
                     * Details because used code for that has been commented
                     * below that is not being used here
                     */
//                    KwlReturnObject resultObject = accountingHandlerDAOobj.getObject(JournalEntryDetail.class.getName(), debitNote.getVendorEntry().getID());
//                    JournalEntryDetail details = (JournalEntryDetail) resultObject.getEntityList().get(0);
                    Vendor vendor = debitNote.getVendor();
                    double amountdue = debitNote.isOtherwise() ? debitNote.getDnamountdue() : 0;
                    double amountDueOriginal = debitNote.isOtherwise() ? debitNote.getDnamountdue() : 0;
                    // obj.put("withoutinventory", withoutinventory);
                    obj.put("transactionNo", debitNote.getDebitNoteNumber());
                    obj.put("billid", debitNote.getID());
                    //obj.put("isReturnNote", debitNote.getPurchaseReturn() == null ? false : true);
                    obj.put("companyid", debitNote.getCompany().getCompanyID());
                    obj.put("withoutinventory", false);
//                    obj.put("date", (debitNote.isIsOpeningBalenceDN()) ? (df.format(debitNote.getCreationDate())) : df.format(debitNote.getJournalEntry().getEntryDate()));  //date of delivery order
                    obj.put("date", df.format(debitNote.getCreationDate()));  //date of delivery order
                    obj.put("linkingdate", df.format(linkdate));
                    obj.put("journalEntryNo", (debitNote.isIsOpeningBalenceDN()) ? "" : debitNote.getJournalEntry().getEntryNumber());  //journal entry no
                    obj.put("mergedCategoryData", "Debit Note");  //type of data
                    obj.put("personname", vendor.getName());
                    obj.put("personid", vendor.getID());
                    obj.put("deleted", debitNote.isDeleted());
                    obj.put("otherwise", debitNote.isOtherwise());
                    obj.put("isprinted", debitNote.isPrinted());
                    obj.put("openflag", debitNote.isOpenflag());
                    obj.put("isCreatedFromReturnForm", (debitNote.getPurchaseReturn() != null) ? true : false);
                    obj.put("cntype", debitNote.getDntype());
                    obj.put("costcenterid", debitNote.getCostcenter() == null ? "" : debitNote.getCostcenter().getID());
                    obj.put("costcenterName", debitNote.getCostcenter() == null ? "" : debitNote.getCostcenter().getName());
                    obj.put("memo", debitNote.getMemo());
                    obj.put("cntype", 1);
                    //  obj.put("isOldRecord", debitNote.isOldRecord());
                    obj.put("journalentryid", debitNote.isIsOpeningBalenceDN() ? "" : je.getID());
                    obj.put("currencysymbol", (debitNote.getCurrency() == null ? currency.getSymbol() : debitNote.getCurrency().getSymbol()));
                    obj.put("currencyid", (debitNote.getCurrency() == null ? currency.getCurrencyID() : debitNote.getCurrency().getCurrencyID()));
                    obj.put("entryno", debitNote.isIsOpeningBalenceDN() ? "" : je.getEntryNumber());
                    obj.put("noteno", debitNote.getDebitNoteNumber());
                    obj.put("noteid", debitNote.getID());
                    obj.put("exchangeratefortransaction", (amountDueOriginal <= 0 && amountdue <= 0) ? 0 : (amountdue / amountDueOriginal));
                    obj.put("amountdue", 0);
                    obj.put("amountduenonnegative", 0);
                    
                    /*
                     * Remove unnecessary Code because it is not being used when
                     * showing linked transaction then showing data in expander,
                     * separate request is called
                     */
                    obj.put("accountid", debitNote.getAccount() == null ? "" : debitNote.getAccount().getID());
                    obj.put("accountnames", debitNote.getAccount() == null ? "" : debitNote.getAccount().getName());
                    obj.put("currencyidtransaction", gcurrencyid);
                    obj.put("externalcurrencyrate", debitNote.isIsOpeningBalenceDN() ? debitNote.getExchangeRateForOpeningTransaction() : je.getExternalCurrencyRate());
                    obj.put("currencysymboltransaction", (debitNote.getCurrency() == null ? currency.getSymbol() : debitNote.getCurrency().getSymbol()));
                    if (debitNote.getDntype() == Constants.DebitNoteAgainstPurchaseInvoice) {
                        obj.put("isCopyAllowed", false);
                    }
                    obj.put("currencycode", (debitNote.getCurrency() == null ? currency.getCurrencyCode() : debitNote.getCurrency().getCurrencyCode()));
                    obj.put(Constants.SEQUENCEFORMATID, debitNote.getSeqformat() != null ? debitNote.getSeqformat().getID() : "");
                    String reason = "";

                    if (!StringUtil.isNullOrEmpty(reason)) {
                        obj.put("reason", reason.substring(0, reason.length() - 1));
                    } else {
                        obj.put("reason", reason);
                    }
                    obj.put("isOpeningBalanceTransaction", debitNote.isIsOpeningBalenceDN());
                    obj.put("type", 4);//Purchase invoice linked with Debit Note i.e PI->DN
                    
          //for custom fields
                    HashMap<String, String> replaceFieldMap = new HashMap<String, String>();
                    HashMap<String, String> customFieldMap = new HashMap<String, String>();
                    HashMap<String, String> customDateFieldMap = new HashMap<String, String>();
                    HashMap<String, Integer> FieldMap = null;
                    HashMap<String, Object> fieldrequestParams = new HashMap();
                    fieldrequestParams.put(Constants.filter_names, Arrays.asList(Constants.companyid, Constants.moduleid));
                    fieldrequestParams.put(Constants.filter_values, Arrays.asList(companyid, Constants.Acc_Debit_Note_ModuleId));
                    FieldMap = accAccountDAOobj.getFieldParamsCustomMap(fieldrequestParams, replaceFieldMap, customFieldMap, customDateFieldMap);
                    Map<String, Object> variableMap = new HashMap<String, Object>();
                    HashMap<String, Object> cnDetailRequestParams = new HashMap<String, Object>();
                    ArrayList Detailfilter_names = new ArrayList(), Detailfilter_params = new ArrayList();
                    Detailfilter_names.add("companyid");
                    Detailfilter_params.add(debitNote.getCompany().getCompanyID());
                    Detailfilter_names.add("journalentryId");
                    Detailfilter_params.add(debitNote.isIsOpeningBalenceDN()?"":debitNote.getJournalEntry().getID());
                    Detailfilter_names.add("moduleId");
                    Detailfilter_params.add(Constants.Acc_Debit_Note_ModuleId + "");
                    cnDetailRequestParams.put("filter_names", Detailfilter_names);
                    cnDetailRequestParams.put("filter_params", Detailfilter_params);
                    KwlReturnObject idcustresult = accJournalEntryobj.getJournalEntryCustomData(cnDetailRequestParams);
                    if (idcustresult.getEntityList().size() > 0) {
                        AccJECustomData jeCustom = (AccJECustomData) idcustresult.getEntityList().get(0);
                        AccountingManager.setCustomColumnValues(jeCustom, FieldMap, replaceFieldMap, variableMap);
                        JSONObject params = new JSONObject();
                        boolean isExport = (request.getAttribute("isExport") == null) ? false : true;
                        params.put("isExport", isExport);
                        fieldDataManagercntrl.addCustomData(variableMap, customFieldMap, customDateFieldMap, obj, params);


                    }
                    jArr.put(obj);
                }
                 
                 
                KwlReturnObject dnOverchargeResult = accGoodsReceiptobj.getDebitNoteForOverchargedLinkedWithInvoice(billid, companyid);
                List dnOverchargeList = dnOverchargeResult.getEntityList();
                for (Object dnOverchargeList1 : dnOverchargeList) {
                    String noteId = (String) dnOverchargeList1;
                    JSONObject obj = new JSONObject();
                    KwlReturnObject objItr = accountingHandlerDAOobj.getObject(DebitNote.class.getName(), noteId);
                    DebitNote debitNote = (DebitNote) objItr.getEntityList().get(0);
                    JournalEntry je = debitNote.getJournalEntry();
                    Vendor vendor = debitNote.getVendor();
                    obj.put("transactionNo", debitNote.getDebitNoteNumber());
                    obj.put("billid", debitNote.getID());
                    obj.put("noteno", debitNote.getDebitNoteNumber());
                    obj.put("noteid", debitNote.getID());
                    obj.put("journalEntryNo", (debitNote.isIsOpeningBalenceDN()) ? "" : je.getEntryNumber());  //journal entry no
                    obj.put("journalentryid", debitNote.isIsOpeningBalenceDN() ? "" : je.getID());
                    obj.put("entryno", debitNote.isIsOpeningBalenceDN() ? "" : je.getEntryNumber());
                    obj.put("mergedCategoryData", "Debit Note");
                    obj.put("withoutinventory", false);
                    obj.put("date", df.format(debitNote.getCreationDate()));
                    obj.put("linkingdate", df.format(debitNote.getCreationDate()));
                    obj.put("personname", vendor.getName());
                    obj.put("personid", vendor.getID());
                    obj.put("otherwise", debitNote.isOtherwise());
                    obj.put("isCreatedFromReturnForm", (debitNote.getPurchaseReturn() != null));
                    obj.put("cntype", debitNote.getDntype());
                    obj.put("costcenterid", debitNote.getCostcenter() == null ? "" : debitNote.getCostcenter().getID());
                    obj.put("costcenterName", debitNote.getCostcenter() == null ? "" : debitNote.getCostcenter().getName());
                    obj.put("memo", debitNote.getMemo() != null ? debitNote.getMemo() : "");
                    obj.put("currencysymbol", (debitNote.getCurrency() == null ? currency.getSymbol() : debitNote.getCurrency().getSymbol()));
                    obj.put("currencyid", (debitNote.getCurrency() == null ? currency.getCurrencyID() : debitNote.getCurrency().getCurrencyID()));
                    obj.put("amountdue", debitNote.getDnamountdue());
                    obj.put("accountid", debitNote.getAccount() == null ? "" : debitNote.getAccount().getID());
                    obj.put("accountnames", debitNote.getAccount() == null ? "" : debitNote.getAccount().getName());
                    obj.put("currencyidtransaction", gcurrencyid);
                    obj.put("externalcurrencyrate", debitNote.isIsOpeningBalenceDN() ? debitNote.getExchangeRateForOpeningTransaction() : je.getExternalCurrencyRate());
                    obj.put("currencysymboltransaction", (debitNote.getCurrency() == null ? currency.getSymbol() : debitNote.getCurrency().getSymbol()));
                    obj.put("isCopyAllowed", false);
                    obj.put("currencycode", (debitNote.getCurrency() == null ? currency.getCurrencyCode() : debitNote.getCurrency().getCurrencyCode()));
                    obj.put(Constants.SEQUENCEFORMATID, debitNote.getSeqformat() != null ? debitNote.getSeqformat().getID() : "");
                    obj.put("reason", debitNote.getMemo());
                    obj.put("isOpeningBalanceTransaction", debitNote.isIsOpeningBalenceDN());
                    obj.put("agentid", debitNote.getAgent() != null ? debitNote.getAgent().getID() : "");
                    obj.put("lasteditedby", debitNote.getModifiedby() != null ? (debitNote.getModifiedby().getFirstName() + " " + debitNote.getModifiedby().getLastName()) : "");
                    obj.put("type", 4);//DN for Overcharged PI
                    
                    boolean includeprotax = false;
                    Set<DebitNoteAgainstCustomerGst> rows = debitNote.getRowsGst();
                    for (DebitNoteAgainstCustomerGst row : rows) {
                        if (row.getTax() != null) {
                            includeprotax = true;
                            break;
                        }
                    }
                    obj.put("includeprotax", includeprotax);
                    
                    HashMap<String, String> replaceFieldMap = new HashMap<>();
                    HashMap<String, String> customFieldMap = new HashMap<>();
                    HashMap<String, String> customDateFieldMap = new HashMap<>();
                    HashMap<String, Integer> FieldMap = null;
                    HashMap<String, Object> fieldrequestParams = new HashMap();
                    fieldrequestParams.put(Constants.filter_names, Arrays.asList(Constants.companyid, Constants.moduleid));
                    fieldrequestParams.put(Constants.filter_values, Arrays.asList(companyid, Constants.Acc_Debit_Note_ModuleId));
                    FieldMap = accAccountDAOobj.getFieldParamsCustomMap(fieldrequestParams, replaceFieldMap, customFieldMap, customDateFieldMap);
                    Map<String, Object> variableMap = new HashMap<>();
                    HashMap<String, Object> cnDetailRequestParams = new HashMap<>();
                    ArrayList Detailfilter_names = new ArrayList(), Detailfilter_params = new ArrayList();
                    Detailfilter_names.add("companyid");
                    Detailfilter_params.add(debitNote.getCompany().getCompanyID());
                    Detailfilter_names.add("journalentryId");
                    Detailfilter_params.add(debitNote.isIsOpeningBalenceDN() ? "" : debitNote.getJournalEntry().getID());
                    Detailfilter_names.add("moduleId");
                    Detailfilter_params.add(Constants.Acc_Debit_Note_ModuleId + "");
                    cnDetailRequestParams.put("filter_names", Detailfilter_names);
                    cnDetailRequestParams.put("filter_params", Detailfilter_params);
                    KwlReturnObject idcustresult = accJournalEntryobj.getJournalEntryCustomData(cnDetailRequestParams);
                    if (idcustresult.getEntityList().size() > 0) {
                        AccJECustomData jeCustom = (AccJECustomData) idcustresult.getEntityList().get(0);
                        AccountingManager.setCustomColumnValues(jeCustom, FieldMap, replaceFieldMap, variableMap);
                        JSONObject params = new JSONObject();
                        params.put(Constants.isExport, false);
                        fieldDataManagercntrl.addCustomData(variableMap, customFieldMap, customDateFieldMap, obj, params);
                    }
                    jArr.put(obj);
                }
                 
                 
                /*
                 * While linking purchase invoice is link to credit note
                 *
                 */
                KwlReturnObject cnIresult = accGoodsReceiptobj.getCreditNoteLinkedWithInvoice(billid, companyid);
                List listcn = cnIresult.getEntityList();
                for (int index = 0; index < listcn.size(); index++) {
                    String orderid = (String) listcn.get(index);
                    JSONObject obj = new JSONObject();
                    KwlReturnObject objItr = accountingHandlerDAOobj.getObject(CreditNote.class.getName(), orderid);
                    CreditNote creditNote = (CreditNote) objItr.getEntityList().get(0);
                    JournalEntry je = creditNote.getJournalEntry();
                    JournalEntryDetail details = null;
                    if (!creditNote.isOtherwise()) {
                        KwlReturnObject resultObject = accountingHandlerDAOobj.getObject(JournalEntryDetail.class.getName(), creditNote.getCustomerEntry().getID());
                        details = (JournalEntryDetail) resultObject.getEntityList().get(0);
                    }
                    int type = 0; // SI->CN
                    Vendor vendor = creditNote.getVendor();
                    obj.put(Constants.billid, creditNote.getID());
                    obj.put(Constants.companyKey, creditNote.getCompany().getCompanyID());
                    obj.put("withoutinventory", "");
                    obj.put("transactionNo", creditNote.getCreditNoteNumber());   //delivery order no
                    obj.put("date", df.format(creditNote.getCreationDate()));  //date of delivery order
                    obj.put("linkingdate", df.format(creditNote.getCreationDate()));
                    obj.put("mergedCategoryData", "Credit Note");  //type of data
                    obj.put("personname", vendor.getName());
                    obj.put("isReturnNote", creditNote.getSalesReturn() == null ? false : true);
                    obj.put("noteid", creditNote.getID());
                    obj.put("isOldRecord", creditNote.isOldRecord());
                    obj.put(Constants.companyKey, creditNote.getCompany().getCompanyID());
                    obj.put("companyname", creditNote.getCompany().getCompanyName());
                    obj.put("noteno", creditNote.getCreditNoteNumber());
                    obj.put("journalEntryNo", je != null ? je.getEntryNumber() : "");
                    obj.put("personid", vendor.getID());
                    obj.put("amount", creditNote.isOtherwise() ? creditNote.getCnamount() : details.getAmount());
                    obj.put("date", df.format(creditNote.getCreationDate()));
                    obj.put("memo", creditNote.getMemo());
                    obj.put("deleted", creditNote.isDeleted());
                    obj.put("isprinted", creditNote.isPrinted());
                    obj.put("openflag", creditNote.isOpenflag());
                    obj.put("isCreatedFromReturnForm", (creditNote.getSalesReturn() != null) ? true : false);
                    obj.put("cntype", creditNote.getCntype());
                    obj.put("costcenterid", creditNote.getCostcenter() == null ? "" : creditNote.getCostcenter().getID());
                    obj.put("costcenterName", creditNote.getCostcenter() == null ? "" : creditNote.getCostcenter().getName());
                    obj.put("externalcurrencyrate", !creditNote.isIsOpeningBalenceCN() ? je.getExternalCurrencyRate() : creditNote.getExternalCurrencyRate());
                    obj.put("currencysymbol", (creditNote.getCurrency() == null ? currency.getSymbol() : creditNote.getCurrency().getSymbol()));
                    obj.put(Constants.currencyKey, (creditNote.getCurrency() == null ? currency.getCurrencyID() : creditNote.getCurrency().getCurrencyID()));
                    obj.put("journalentryid", je != null ? je.getID() : "");
                    Set<CreditNoteTaxEntry> cnTaxEntryDetails = creditNote.getCnTaxEntryDetails();
                    String reason = "";
                    double totalCnTax = 0;
                    if (cnTaxEntryDetails != null && !cnTaxEntryDetails.isEmpty()) {

                        for (CreditNoteTaxEntry noteTaxEntry : cnTaxEntryDetails) {
                            reason += ((noteTaxEntry.getReason() != null) ? noteTaxEntry.getReason().getValue() : "") + ",";
                            if (noteTaxEntry.isDebitForMultiCNDN()) {
                                totalCnTax += noteTaxEntry.getTaxamount();
                            } else {
                                totalCnTax -= noteTaxEntry.getTaxamount();
                            }
                        }
                    }
                    obj.put("taxamount", authHandler.round(totalCnTax, companyid));
                    double cnTotalAmount = creditNote.isOtherwise() ? creditNote.getCnamount() : details.getAmount();
                    obj.put("amountbeforegst", authHandler.round(cnTotalAmount - totalCnTax, companyid));
                    if (!StringUtil.isNullOrEmpty(reason)) {
                        obj.put("reason", reason.substring(0, reason.length() - 1));
                    } else {
                        obj.put("reason", reason);
                    }

                    obj.put(Constants.SEQUENCEFORMATID, creditNote.getSeqformat() != null ? creditNote.getSeqformat().getID() : "");
                    KwlReturnObject result = null;
                    if (!creditNote.isIsOpeningBalenceCN() || je != null) {
                        result = accJournalEntryobj.getJournalEntryDetail(je.getID(), sessionHandlerImpl.getCompanyid(request));
                        Iterator iterator = result.getEntityList().iterator();
                        while (iterator.hasNext()) {
                            JournalEntryDetail jed = (JournalEntryDetail) iterator.next();
                            Account account = null;
                            account = jed.getAccount();
                            if (account.getMastertypevalue() == Group.ACCOUNTTYPE_GST) {//GST transaction.
                                if (jed.isDebit()) {
                                    tax = jed.getAmount();
                                }
                            }
                        }
                    }
                    result = accCreditNoteDAOobj.getTotalTax_TotalDiscount(creditNote.getID());
                    double totTax = 0, totDiscount = 0;
                    if (result != null && result.getEntityList() != null) {
                        Iterator resItr = result.getEntityList().iterator();
                        Object[] sumRow = (Object[]) resItr.next();
                        if (sumRow[0] != null) {
                            totTax = Double.parseDouble(sumRow[0].toString());
                        }
                        if (sumRow[1] != null) {
                            totDiscount = Double.parseDouble(sumRow[1].toString());
                        }
                    }

                    obj.put("noteSubTotal", cnTotalAmount + totDiscount - totTax);
                    obj.put("notetax", tax);
                    obj.put("totalTax", totTax);
                    obj.put("totalDiscount", totDiscount);
                    /*
                     * Credit note will be allowed to copy in following case- 1.
                     * CN against sales invoice - NOT allowed 2. CN otherwise -
                     * allowed if no invoice is linked to CN at time of creation
                     * or later on 3. CN against Vendor - Allowed
                     */
                    if (creditNote.getCntype() == Constants.CreditNoteAgainstSalesInvoice) {
                        obj.put("isCopyAllowed", false);
                    }
                    HashMap<String, Integer> FieldMap = null;
                    HashMap<String, Object> fieldrequestParams = new HashMap();
                    HashMap<String, String> replaceFieldMap = new HashMap<String, String>();
                    HashMap<String, String> customFieldMap = new HashMap<String, String>();
                    HashMap<String, String> customDateFieldMap = new HashMap<String, String>();
                    fieldrequestParams.put(Constants.filter_names, Arrays.asList(Constants.companyid, Constants.moduleid));
                    fieldrequestParams.put(Constants.filter_values, Arrays.asList(sessionHandlerImpl.getCompanyid(request), Constants.Acc_Credit_Note_ModuleId));
                    FieldMap = accAccountDAOobj.getFieldParamsCustomMap(fieldrequestParams, replaceFieldMap, customFieldMap, customDateFieldMap);
                    Map<String, Object> variableMap = new HashMap<String, Object>();
                    HashMap<String, Object> invDetailRequestParams = new HashMap<String, Object>();
                    if (!creditNote.isIsOpeningBalenceCN() || je != null) {
                        ArrayList Detailfilter_names = new ArrayList(), Detailfilter_params = new ArrayList();
                        Detailfilter_names.add(Constants.companyKey);
                        Detailfilter_params.add(creditNote.getCompany().getCompanyID());
                        Detailfilter_names.add("journalentryId");
                        Detailfilter_params.add(creditNote.getJournalEntry().getID());
                        Detailfilter_names.add("moduleId");
                        Detailfilter_params.add(Constants.Acc_Credit_Note_ModuleId + "");
                        invDetailRequestParams.put("filter_names", Detailfilter_names);
                        invDetailRequestParams.put("filter_params", Detailfilter_params);
                        KwlReturnObject idcustresult = accJournalEntryobj.getJournalEntryCustomData(invDetailRequestParams);
                        if (idcustresult.getEntityList().size() > 0) {
                            AccJECustomData jeCustom = (AccJECustomData) idcustresult.getEntityList().get(0);
                            AccountingManager.setCustomColumnValues(jeCustom, FieldMap, replaceFieldMap, variableMap);
                            JSONObject params = new JSONObject();
                            boolean isExport = (request.getAttribute(Constants.isExport) == null) ? false : true;
                            params.put(Constants.isExport, isExport);
                            fieldDataManagercntrl.addCustomData(variableMap, customFieldMap, customDateFieldMap, obj, params);
                        }
                    }
                    obj.put("type", type);
                    jArr.put(obj);
                }
                 
                 
                KwlReturnObject linkedMPResult = accGoodsReceiptobj.getAdvancePaymentsLinkedWithInvoice(billid, companyid);
                List listLinkedPaymentDetail = linkedMPResult.getEntityList();
                Set<String> paymentIds = new HashSet<String>();  // Used to avoid the duplication of payment number when getting details of invoice linking
                  for (int index = 0; index < listLinkedPaymentDetail.size(); index++) {
                    Object[] linkedMPObj = (Object[]) listLinkedPaymentDetail.get(index);
                    String orderid = (String) linkedMPObj[0];
                    Date linkdate =  (Date)linkedMPObj[1];
                    paymentIds.add(orderid);
                    JSONObject obj = new JSONObject();
                    KwlReturnObject objItr = accountingHandlerDAOobj.getObject(Payment.class.getName(), orderid);
                    Payment payment = (Payment) objItr.getEntityList().get(0);
                    String jeNumber = (payment.isIsOpeningBalencePayment()) ? "" : payment.getJournalEntry().getEntryNumber();
                    String jeIds = (payment.isIsOpeningBalencePayment()) ? "" : payment.getJournalEntry().getID();
                    if (payment.getJournalEntryForBankCharges() != null) {
                        jeNumber += "<br>" + payment.getJournalEntryForBankCharges().getEntryNumber();
                        jeIds += "," + payment.getJournalEntryForBankCharges().getID();
                    }
                    if (payment.getJournalEntryForBankInterest() != null) {
                        jeNumber += "<br>" + payment.getJournalEntryForBankInterest().getEntryNumber();
                        jeIds += "," + payment.getJournalEntryForBankInterest().getID();
                    }
                    Vendor vendor = payment.getVendor();
                    obj.put("billid", payment.getID());
                    obj.put("linkingdate", df.format(linkdate)); 
                    obj.put("companyid", payment.getCompany().getCompanyID());
                    obj.put("withoutinventory", "");
                    obj.put("transactionNo", payment.getPaymentNumber());   //payment no
                    obj.put("date", df.format(payment.getCreationDate()));  //date of delivery order
                    obj.put("journalEntryNo", jeNumber);  //journal entry no
                    obj.put("mergedCategoryData", "Payment Voucher");  //type of data
                    obj.put("personname", vendor.getName());
                    obj.put("paymentwindowtype", payment.getPaymentWindowType());
                    obj.put("journalentryid", jeIds);
                    Date paymentCreationDate = null;
                    double externalCurrencyRate = 0d;
                    paymentCreationDate = payment.getCreationDate();
                    if (payment.isIsOpeningBalencePayment()) {
                        externalCurrencyRate = payment.getExchangeRateForOpeningTransaction();
                    } else {
                        paymentCreationDate = payment.getCreationDate();
                        externalCurrencyRate = payment.getJournalEntry().getExternalCurrencyRate();
                    }
                    if (payment.getExternalCurrencyRate() == 0) {
                        KwlReturnObject bAmt = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, 1.0d, payment.getCurrency().getCurrencyID(), paymentCreationDate, externalCurrencyRate);
                        obj.put("externalcurrencyrate", 1 / (Double) bAmt.getEntityList().get(0));
                    } else {
                        obj.put("externalcurrencyrate", payment.getExternalCurrencyRate());
                    }
                    obj.put("type", 6);//Purchase invoice linked with Advance Payment i.e PI->Advance Payment
                    
                    //for custom fields                    
                    HashMap<String, Object> fieldrequestParamsGlobalLevel = new HashMap();
                    HashMap<String, String> customFieldMapGlobalLevel = new HashMap<String, String>();
                    HashMap<String, String> customDateFieldMapGlobalLevel = new HashMap<String, String>();
                    fieldrequestParamsGlobalLevel.put(Constants.filter_names, Arrays.asList(Constants.companyid, Constants.moduleid));
                    fieldrequestParamsGlobalLevel.put(Constants.filter_values, Arrays.asList(companyid, Constants.Acc_Make_Payment_ModuleId));
                    HashMap<String, String> replaceFieldMapGlobalLevel = new HashMap<String, String>();
                    HashMap<String, Integer> FieldMapGlobalLevel = accAccountDAOobj.getFieldParamsCustomMap(fieldrequestParamsGlobalLevel, replaceFieldMapGlobalLevel, customFieldMapGlobalLevel, customDateFieldMapGlobalLevel);
                    Map<String, Object> variableMap = new HashMap<String, Object>();
                    HashMap<String, Object> invDetailRequestParams = new HashMap<String, Object>();
                    ArrayList Detailfilter_names = new ArrayList(), Detailfilter_params = new ArrayList();
                    Detailfilter_names.add("companyid");
                    Detailfilter_params.add(payment.getCompany().getCompanyID());
                    Detailfilter_names.add("journalentryId");
                    Detailfilter_params.add(payment.isIsOpeningBalencePayment()?"":payment.getJournalEntry().getID());
                    Detailfilter_names.add("moduleId");
                    Detailfilter_params.add(Constants.Acc_Make_Payment_ModuleId + "");
                    invDetailRequestParams.put("filter_names", Detailfilter_names);
                    invDetailRequestParams.put("filter_params", Detailfilter_params);
                    KwlReturnObject idcustresult = accVendorPaymentobj.getVendorPaymentGlobalCustomData(invDetailRequestParams);
                    if (idcustresult.getEntityList().size() > 0) {
                        AccJECustomData jeCustom = (AccJECustomData) idcustresult.getEntityList().get(0);
                        AccountingManager.setCustomColumnValues(jeCustom, FieldMapGlobalLevel, replaceFieldMapGlobalLevel, variableMap);
                        for (Map.Entry<String, Object> varEntry : variableMap.entrySet()) {
                            String coldata = varEntry.getValue().toString();
                            if (customFieldMapGlobalLevel.containsKey(varEntry.getKey())) {
                                //   boolean isExport = (request.getAttribute("isExport") == null) ? false : true;
                                String value = "";
                                String Ids[] = coldata.split(",");
                                for (int i = 0; i < Ids.length; i++) {
                                    KwlReturnObject rdresult = accountingHandlerDAOobj.getObject(FieldComboData.class.getName(), Ids[i]);
                                    FieldComboData fieldComboData = (FieldComboData) rdresult.getEntityList().get(0);
                                    if (fieldComboData != null) {
                                        if (fieldComboData.getField().getFieldtype() == 12 || fieldComboData.getField().getFieldtype() == 7) {
                                            value += Ids[i] != null ? Ids[i] + "," : ",";
                                        } else {
                                            value += fieldComboData.getValue() != null ? fieldComboData.getValue() + "," : ",";
                                            obj.put("Dimension_" + fieldComboData.getField().getFieldlabel(), fieldComboData.getValue() != null ? fieldComboData.getValue() : ""); //to differentiate custom field and dimension in sms payment templates.
                                        }

                                    }
                                }
                                if (!StringUtil.isNullOrEmpty(value)) {
                                    value = value.substring(0, value.length() - 1);
                                }
                                obj.put(varEntry.getKey(), value);
                            } else if (customDateFieldMapGlobalLevel.containsKey(varEntry.getKey())) {
                                obj.put(varEntry.getKey(), coldata);
                            } else {
                                if (!StringUtil.isNullOrEmpty(coldata)) {
                                    obj.put(varEntry.getKey(), coldata);
                                }
                            }
                        }
                    }
                    jArr.put(obj);
                }
                KwlReturnObject rpresult = accGoodsReceiptobj.getPaymentVouchersLinkedWithInvoice(billid, companyid);
                List listr = rpresult.getEntityList();
                Iterator itr2 = listr.iterator();
                while (itr2.hasNext()) {
                    String orderid = (String) itr2.next();
                    if (!paymentIds.contains(orderid)) {
                        JSONObject obj = new JSONObject();
                        KwlReturnObject objItr = accountingHandlerDAOobj.getObject(Payment.class.getName(), orderid);
                        Payment payment = (Payment) objItr.getEntityList().get(0);
                        Vendor vendor = payment.getVendor();
                        String jeNumber = (payment.isIsOpeningBalencePayment()) ? "" : payment.getJournalEntry().getEntryNumber();
                        String jeIds = payment.getJournalEntry().getID();
                        if (payment.getJournalEntryForBankCharges() != null) {
                            jeNumber += "<br>" + payment.getJournalEntryForBankCharges().getEntryNumber();
                            jeIds += "," + payment.getJournalEntryForBankCharges().getID();
                        }
                        if (payment.getJournalEntryForBankInterest() != null) {
                            jeNumber += "<br>" + payment.getJournalEntryForBankInterest().getEntryNumber();
                            jeIds += "," + payment.getJournalEntryForBankInterest().getID();
                        }
                        obj.put("billid", payment.getID());
                        obj.put("companyid", payment.getCompany().getCompanyID());
                        obj.put("withoutinventory", "");
                        obj.put("transactionNo", payment.getPaymentNumber());   //delivery order no
                        Date paymentCreationDate = null;
                        double externalCurrencyRate = 0d;
                        paymentCreationDate = payment.getCreationDate();
                        if (payment.isIsOpeningBalencePayment()) {
                            externalCurrencyRate = payment.getExchangeRateForOpeningTransaction();
                        } else {
                            externalCurrencyRate = payment.getJournalEntry().getExternalCurrencyRate();
                        }
                        if (payment.isIsOpeningBalencePayment()) {
                            obj.put("externalcurrencyrate", payment.getExchangeRateForOpeningTransaction());
                        } else if (payment.getExternalCurrencyRate() == 0) {
                            KwlReturnObject bAmt = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, 1.0d, payment.getCurrency().getCurrencyID(), paymentCreationDate, externalCurrencyRate);
                            obj.put("externalcurrencyrate", 1 / (Double) bAmt.getEntityList().get(0));
                        } else {
                            obj.put("externalcurrencyrate", payment.getExternalCurrencyRate());
                        }
                        obj.put("date", df.format(payment.getCreationDate()));  //date of delivery order
                        obj.put("linkingdate", df.format(payment.getCreationDate()));    //date of delivery order
                        obj.put("journalEntryNo", jeNumber);  //journal entry no
                        obj.put("mergedCategoryData", "Payment Voucher");  //type of data
                        obj.put("personname", vendor.getName());
                        obj.put("paymentwindowtype", payment.getPaymentWindowType());
                        obj.put("journalentryid",jeIds);  
                        obj.put("deleted",payment.isDeleted());  
                        obj.put("type", 7);//purchase invoice linked with make payment i.e PI->MP
                        
                        HashMap<String, Object> fieldrequestParamsGlobalLevel = new HashMap();
                        HashMap<String, String> customFieldMapGlobalLevel = new HashMap<String, String>();
                        HashMap<String, String> customDateFieldMapGlobalLevel = new HashMap<String, String>();
                        fieldrequestParamsGlobalLevel.put(Constants.filter_names, Arrays.asList(Constants.companyid, Constants.moduleid));
                        fieldrequestParamsGlobalLevel.put(Constants.filter_values, Arrays.asList(companyid, Constants.Acc_Make_Payment_ModuleId));
                        HashMap<String, String> replaceFieldMapGlobalLevel = new HashMap<String, String>();
                        HashMap<String, Integer> FieldMapGlobalLevel = accAccountDAOobj.getFieldParamsCustomMap(fieldrequestParamsGlobalLevel, replaceFieldMapGlobalLevel, customFieldMapGlobalLevel, customDateFieldMapGlobalLevel);
                        Map<String, Object> variableMap = new HashMap<String, Object>();
                        HashMap<String, Object> invDetailRequestParams = new HashMap<String, Object>();
                        ArrayList Detailfilter_names = new ArrayList(), Detailfilter_params = new ArrayList();
                        Detailfilter_names.add("companyid");
                        Detailfilter_params.add(payment.getCompany().getCompanyID());
                        Detailfilter_names.add("journalentryId");
                        Detailfilter_params.add(payment.isIsOpeningBalencePayment()?"":payment.getJournalEntry().getID());
                        Detailfilter_names.add("moduleId");
                        Detailfilter_params.add(Constants.Acc_Make_Payment_ModuleId + "");
                        invDetailRequestParams.put("filter_names", Detailfilter_names);
                        invDetailRequestParams.put("filter_params", Detailfilter_params);
                        KwlReturnObject idcustresult = accVendorPaymentobj.getVendorPaymentGlobalCustomData(invDetailRequestParams);
                        if (idcustresult.getEntityList().size() > 0) {
                            AccJECustomData jeCustom = (AccJECustomData) idcustresult.getEntityList().get(0);
                            AccountingManager.setCustomColumnValues(jeCustom, FieldMapGlobalLevel, replaceFieldMapGlobalLevel, variableMap);
                            for (Map.Entry<String, Object> varEntry : variableMap.entrySet()) {
                                String coldata = varEntry.getValue().toString();
                                if (customFieldMapGlobalLevel.containsKey(varEntry.getKey())) {
                                    //   boolean isExport = (request.getAttribute("isExport") == null) ? false : true;
                                    String value = "";
                                    String Ids[] = coldata.split(",");
                                    for (int i = 0; i < Ids.length; i++) {
                                        KwlReturnObject rdresult = accountingHandlerDAOobj.getObject(FieldComboData.class.getName(), Ids[i]);
                                        FieldComboData fieldComboData = (FieldComboData) rdresult.getEntityList().get(0);
                                        if (fieldComboData != null) {
                                            if (fieldComboData.getField().getFieldtype() == 12 || fieldComboData.getField().getFieldtype() == 7) {
                                                value += Ids[i] != null ? Ids[i] + "," : ",";
                                            } else {
                                                value += fieldComboData.getValue() != null ? fieldComboData.getValue() + "," : ",";
                                                obj.put("Dimension_" + fieldComboData.getField().getFieldlabel(), fieldComboData.getValue() != null ? fieldComboData.getValue() : ""); //to differentiate custom field and dimension in sms payment templates.
                                            }

                                        }
                                    }
                                    if (!StringUtil.isNullOrEmpty(value)) {
                                        value = value.substring(0, value.length() - 1);
                                    }
                                    obj.put(varEntry.getKey(), value);
                                } else if (customDateFieldMapGlobalLevel.containsKey(varEntry.getKey())) {
                                    obj.put(varEntry.getKey(), coldata);
                                } else {
                                    if (!StringUtil.isNullOrEmpty(coldata)) {
                                        obj.put(varEntry.getKey(), coldata);
                                    }
                                }
                            }
                        }
                        jArr.put(obj);
                    }
                }
                
              /* Purchase invoice linked with GR forward as well as backward linking 
               i.e PI->GR & GR->PI respectively*/
                
                requestParams = new HashMap<String, Object>();
                requestParams.put("companyid", companyid);
                requestParams.put("goodreceiptid", billid);
                requestParams.put("isFixedAsset", isFixedAsset);

               // KwlReturnObject resultgo = accGoodsReceiptobj.getGoodsReceiptOrdersMerged(requestParams);
                /* This method return Goods Receipt Linked with purchase Invoice for 
                 * both forwad as well as backward linking
                                  */
                KwlReturnObject resultgo = accGoodsReceiptobj.getGoodsReceiptLinkedWithPurchaseInvoice(billid, companyid);
                
                List list1 = resultgo.getEntityList();

                Iterator itr3 = list1.iterator();
                while (itr3.hasNext()) {
                    
                    Object[] oj = (Object[]) itr3.next();
                    GoodsReceiptOrder grOrder = (GoodsReceiptOrder) oj[0];
                     int type = (int) oj[1];//Type=0 PI->GR and Type=1 GR->PI
                    JSONObject obj = new JSONObject();

                    Vendor vendor = grOrder.getVendor();
                    obj.put("billid", grOrder.getID());
                    obj.put("companyid", grOrder.getCompany().getCompanyID());
                    obj.put("companyname", grOrder.getCompany().getCompanyName());
                    obj.put("withoutinventory", false);
                    obj.put("personid", vendor.getID());
                    obj.put("transactionNo", grOrder.getGoodsReceiptOrderNumber());
                    obj.put("gtaapplicable", grOrder.isRcmApplicable());
                    //obj.put("duedate", authHandler.getDateFormatter(request).format(salesOrder.getDueDate()));
                    obj.put("date", df.format(grOrder.getOrderDate()));
                    obj.put("personname", vendor.getName());
                    obj.put("externalcurrencyrate", grOrder.getExternalCurrencyRate());
                    obj.put("withoutinventory", false);
                    obj.put("personid", vendor.getID());
                    obj.put("billno", grOrder.getGoodsReceiptOrderNumber());
                    obj.put("isRoundingAdjustmentApplied", grOrder.isIsRoundingAdjustmentApplied());
                    obj.put("date", authHandler.getDateFormatter(request).format(grOrder.getOrderDate()));
                    obj.put("personname", vendor.getName());
                    obj.put("aliasname", StringUtil.isNullOrEmpty(vendor.getAliasname()) ? "" : vendor.getAliasname());
                    obj.put("personemail", vendor.getEmail());
                    obj.put("memo", grOrder.getMemo());
                    obj.put("agent", grOrder.getMasterAgent() == null ? "" : grOrder.getMasterAgent().getID());
                    obj.put("agentname", grOrder.getMasterAgent() == null ? "" : grOrder.getMasterAgent().getValue());
                    obj.put("posttext", grOrder.getPostText() == null ? "" : grOrder.getPostText());
                    obj.put("costcenterid", grOrder.getCostcenter() == null ? "" : grOrder.getCostcenter().getID());
                    obj.put("costcenterName", grOrder.getCostcenter() == null ? "" : grOrder.getCostcenter().getName());
                    obj.put("statusID", grOrder.getStatus() == null ? "" : grOrder.getStatus().getID());
                    obj.put("status", grOrder.getStatus() == null ? "" : grOrder.getStatus().getValue());
                    obj.put(SHIPDATE, grOrder.getShipdate() == null ? "" : authHandler.getDateFormatter(request).format(grOrder.getShipdate()));
                    obj.put("shipvia", grOrder.getShipvia() == null ? "" : grOrder.getShipvia());
                    obj.put("fob", grOrder.getFob() == null ? "" : grOrder.getFob());
                    obj.put("permitNumber", grOrder.getPermitNumber() == null ? "" : grOrder.getPermitNumber());
                    obj.put("isfavourite", grOrder.isFavourite());
                    obj.put("isprinted", grOrder.isPrinted());
                    obj.put("isautogenerateddo", grOrder.isIsAutoGeneratedGRO());
                    obj.put("deleted", grOrder.isDeleted());
                    obj.put("currencyid", (grOrder.getCurrency() == null ? "" : grOrder.getCurrency().getCurrencyID()));
                    obj.put("currencysymbol", (grOrder.getCurrency() == null ? "" : grOrder.getCurrency().getSymbol()));
                    obj.put(Constants.SEQUENCEFORMATID, grOrder.getSeqformat() != null ? grOrder.getSeqformat().getID() : "");
                    obj.put("isConsignment", grOrder.isIsconsignment());
                    if (grOrder.getModifiedby() != null) {
                        obj.put("lasteditedby", StringUtil.getFullName(grOrder.getModifiedby()));
                    }
                    double taxPercent = 0;
                    if (grOrder.getTax() != null) {
                        KwlReturnObject taxresult = accTaxObj.getTaxPercent(sessionHandlerImpl.getCompanyid(request), grOrder.getOrderDate(), grOrder.getTax().getID());
                        taxPercent = (Double) taxresult.getEntityList().get(0);

                    }
                    obj.put("taxid", grOrder.getTax() != null ? grOrder.getTax().getID() : "None");
                    obj.put(TAXPERCENT, taxPercent);
                    Set<GoodsReceiptOrderDetails> goodsReceiptOrderDetails = grOrder.getRows();
                    boolean includeprotax = false;
                    double rowTaxAmt = 0;
                    boolean isTaxRowLvlAndFromTaxGlobalLvl = false;
                    for (GoodsReceiptOrderDetails goodsReceiptOrderDetail : goodsReceiptOrderDetails) {
                        if (goodsReceiptOrderDetail.getPodetails() != null && goodsReceiptOrderDetail.getPodetails().getPurchaseOrder() != null) {
                            if (goodsReceiptOrderDetail.getPodetails().getPurchaseOrder().getTax() != null) {
                                isTaxRowLvlAndFromTaxGlobalLvl = true;
                            }
                        }
                        if (goodsReceiptOrderDetail.getVidetails() != null && goodsReceiptOrderDetail.getVidetails().getGoodsReceipt() != null) {
                            if (goodsReceiptOrderDetail.getVidetails().getGoodsReceipt().getTax() != null) {
                                isTaxRowLvlAndFromTaxGlobalLvl = true;
                            }
                        }
                        if (goodsReceiptOrderDetail.getTax() != null) {
                            includeprotax = true;
                            rowTaxAmt += goodsReceiptOrderDetail.getRowTaxAmount();
                        }
                    }
                    obj.put("isTaxRowLvlAndFromTaxGlobalLvl", isTaxRowLvlAndFromTaxGlobalLvl);
                    obj.put("includeprotax", includeprotax);
                    obj.put("rowTaxAmt", rowTaxAmt);
                    obj = AccountingAddressManager.getTransactionAddressJSON(obj, grOrder.getBillingShippingAddresses(), true);
                    if (grOrder.isFixedAssetGRO()) {
                        obj.put("mergedCategoryData", "Fixed Asset Goods Receipt");
                    } else {
                        obj.put("mergedCategoryData", Constants.Goods_Receipt); // type of data 
                    }
                    obj.put("type", type);
                    jArr.put(obj);
                }

                  /* Purchase invoice linked with PR for forward linking 
               i.e PI->PR */
                
                KwlReturnObject prresult = accGoodsReceiptobj.getPurchaseReturnLinkedWithInvoice(billid, companyid);
                List listpr = prresult.getEntityList();
                Iterator itr4 = listpr.iterator();
                while (itr4.hasNext()) {
                    String orderid = (String) itr4.next();
                    JSONObject obj = new JSONObject();
                    KwlReturnObject objItr = accountingHandlerDAOobj.getObject(PurchaseReturn.class.getName(), orderid);
                    PurchaseReturn purchaseReturn = (PurchaseReturn) objItr.getEntityList().get(0);

                    Vendor vendor = purchaseReturn.getVendor();
                    obj.put("billid", purchaseReturn.getID());
                    obj.put("companyid", purchaseReturn.getCompany().getCompanyID());
                    obj.put("transactionNo", purchaseReturn.getPurchaseReturnNumber());   //delivery order no
                    obj.put("date", df.format(purchaseReturn.getOrderDate()));  //date of delivery order
                    obj.put("mergedCategoryData", "Purchase Return");  //type of data
                    obj.put("personname", vendor.getName());
                    obj.put("billid", purchaseReturn.getID());
                    obj.put("companyid", purchaseReturn.getCompany().getCompanyID());
                    obj.put("companyname", purchaseReturn.getCompany().getCompanyName());
                    obj.put("withoutinventory", false);
                    obj.put("personid", vendor.getID());
                    obj.put("billno", purchaseReturn.getPurchaseReturnNumber());
                    obj.put("date", authHandler.getDateFormatter(request).format(purchaseReturn.getOrderDate()));
                    obj.put("personname", vendor.getName());
                    obj.put("memo", purchaseReturn.getMemo());
                    obj.put("externalcurrencyrate", purchaseReturn.getExternalCurrencyRate());
                    obj.put("costcenterid", purchaseReturn.getCostcenter() == null ? "" : purchaseReturn.getCostcenter().getID());
                    obj.put("costcenterName", purchaseReturn.getCostcenter() == null ? "" : purchaseReturn.getCostcenter().getName());
                    obj.put("taxid", purchaseReturn.getTax() != null ? purchaseReturn.getTax().getID() : "");
                    obj.put("shipdate", purchaseReturn.getShipdate() == null ? "" : authHandler.getDateFormatter(request).format(purchaseReturn.getShipdate()));
                    obj.put("shipvia", purchaseReturn.getShipvia() == null ? "" : purchaseReturn.getShipvia());
                    obj.put("fob", purchaseReturn.getFob() == null ? "" : purchaseReturn.getFob());
                    obj.put("deleted", purchaseReturn.isDeleted());
                    obj.put("currencyid", (purchaseReturn.getCurrency() == null ? "" : purchaseReturn.getCurrency().getCurrencyID()));
                    obj.put("currencysymbol", (purchaseReturn.getCurrency() == null ? "" : purchaseReturn.getCurrency().getSymbol()));
                    obj.put("currencycode", (purchaseReturn.getCurrency() == null ? "" : purchaseReturn.getCurrency().getCurrencyCode()));
                    obj.put("sequenceformatid", purchaseReturn.getSeqformat() != null ? purchaseReturn.getSeqformat().getID() : "");
                    obj.put("isConsignment", purchaseReturn.isIsconsignment());

                    if (purchaseReturn.getModifiedby() != null) {
                        obj.put("lasteditedby", StringUtil.getFullName(purchaseReturn.getModifiedby()));
                    }

                    Set<PurchaseReturnDetail> doRows = purchaseReturn.getRows();
                    double amount = 0;
                    double quantity = 0;
                    boolean includeprotax = false;
                    if (doRows != null && !doRows.isEmpty()) {
                        for (PurchaseReturnDetail temp : doRows) {
                            quantity = temp.getInventory().getQuantity();
                            double rowAmt = temp.getRate() * quantity;

                            double disc = 0;

                            if (temp.getDiscountispercent() == 1) {
                                disc = rowAmt * temp.getDiscount() / 100;
                            } else {
                                disc = temp.getDiscount();
                            }

                            rowAmt = rowAmt - disc;

                            // getting tax also

                            double taxAmt = temp.getRowTaxAmount();
                            rowAmt += taxAmt;

                            amount += rowAmt;
                            if (temp.getTax() != null) {
                                includeprotax = true;
                            }
                        }
                    }
                    obj.put("includeprotax", includeprotax);
                    obj.put("amount", authHandler.round(amount, companyid));
                    obj.put("type", 3);//Purchase Invoice linked with Purchase Return i.e PI->PR
                    jArr.put(obj);
                }
                
               /* Purchase Invoice Linked with Vendor Quotation i.e VQ->PI */
                               
                HashMap<String, Object> requestparams = new HashMap<String, Object>();
                requestparams.put("quotationid", billid);
                requestparams.put("companyid", companyid);
                KwlReturnObject vqresult = accGoodsReceiptobj.getVendorInvoiceInvoiceLinkedWithPI(billid, companyid);
                List vendorquotation = vqresult.getEntityList();
                if (vendorquotation != null && vendorquotation.size() > 0) {
                    jArr=accSalesOrderServiceDAOobj.getVendorQuotationJsonForLinking(jArr, vendorquotation, currency,df, companyid);
                }
                
                /* Purchase Invoice linked with Purchase Order i.e PO->PI*/
                
                KwlReturnObject poresult = null;
                if (isExpenseInvoice) {
                    poresult = accGoodsReceiptobj.getPurchaseOrderLinkedWithExpensePI(billid, companyid);
                } else {
                    poresult = accGoodsReceiptobj.getPurchaseOrderLinkedWithPI(billid, companyid);
                }
                if (poresult!=null &&  poresult.getEntityList() != null && poresult.getEntityList().size() > 0) {
                    jArr=accSalesOrderServiceDAOobj.getPurchaseOrderJsonForLinking(jArr, poresult.getEntityList(), currency,df);
                }
                
                KwlReturnObject companyItr = accountingHandlerDAOobj.getObject(Company.class.getName(), companyid);
                Company company = (Company) companyItr.getEntityList().get(0);
                /*
                    Vendor Invoice's TDS Payment is Done so showing Linked GL Payment in linked Information
                */
                if (company != null && company.getCountry() != null && Constants.indian_country_id == Integer.parseInt(company.getCountry().getID())) {
                    KwlReturnObject linkedTDSPaymentResult = accGoodsReceiptobj.listLinkedTDSPaymentDetail(billid, companyid);
                    List listLinkedTDSPaymentDetail = linkedTDSPaymentResult.getEntityList();
                    Set<String> tdsPaymentIds = new HashSet<String>();  // Used to avoid the duplication of payment number when getting details of invoice linking
                    for (int index = 0; index < listLinkedTDSPaymentDetail.size(); index++) {
                        Object[] linkedMPObj = (Object[]) listLinkedTDSPaymentDetail.get(index);
                        String orderid = (String) linkedMPObj[0];
                        tdsPaymentIds.add(orderid);
                        JSONObject obj = new JSONObject();
                        KwlReturnObject objItr = accountingHandlerDAOobj.getObject(Payment.class.getName(), orderid);
                        Payment payment = (Payment) objItr.getEntityList().get(0);

                        String jeNumber = (payment.isIsOpeningBalencePayment()) ? "" : payment.getJournalEntry().getEntryNumber();
                        String jeIds = (payment.isIsOpeningBalencePayment()) ? "" : payment.getJournalEntry().getID();
                        if (payment.getJournalEntryForBankCharges() != null) {
                            jeNumber += "<br>" + payment.getJournalEntryForBankCharges().getEntryNumber();
                            jeIds += "," + payment.getJournalEntryForBankCharges().getID();
                        }
                        if (payment.getJournalEntryForBankInterest() != null) {
                            jeNumber += "<br>" + payment.getJournalEntryForBankInterest().getEntryNumber();
                            jeIds += "," + payment.getJournalEntryForBankInterest().getID();
                        }
                        obj.put("billid", payment.getID());
                        obj.put("linkingdate", df.format(payment.getCreationDate()));
                        obj.put("companyid", payment.getCompany().getCompanyID());
                        obj.put("withoutinventory", "");
                        obj.put("transactionNo", payment.getPaymentNumber());   //payment no
                        obj.put("date", df.format(payment.getCreationDate()));  //date of delivery order
                        obj.put("journalEntryNo", jeNumber);  //journal entry no
                        obj.put("mergedCategoryData", "Payment Voucher");  //type of data
                        obj.put("personname", "");
                        obj.put("paymentwindowtype", payment.getPaymentWindowType());
                        obj.put("journalentryid", jeIds);
                        Date paymentCreationDate = null;
                        double externalCurrencyRate = 0d;
                        paymentCreationDate = payment.getCreationDate();
                        if (payment.isIsOpeningBalencePayment()) {
                            externalCurrencyRate = payment.getExchangeRateForOpeningTransaction();
                        } else {
                            externalCurrencyRate = payment.getJournalEntry().getExternalCurrencyRate();
                        }
                        if (payment.getExternalCurrencyRate() == 0) {
                            KwlReturnObject bAmt = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, 1.0d, payment.getCurrency().getCurrencyID(), paymentCreationDate, externalCurrencyRate);
                            obj.put("externalcurrencyrate", 1 / (Double) bAmt.getEntityList().get(0));
                        } else {
                            obj.put("externalcurrencyrate", payment.getExternalCurrencyRate());
                        }
                        obj.put("type", 6);//Purchase invoice linked with Advance Payment i.e PI->Advance Payment
                        jArr.put(obj);
                    }
                }
                
                
                jobj.put("count", jArr.length());
                jobj.put("data", jArr);

            }
        } catch (JSONException je) {
            throw ServiceException.FAILURE(je.getMessage(), je);
        }
        return jobj;
    }
    
    public ModelAndView getGRLinkedInTransaction(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        String msg = "";
        boolean issuccess = false;
        try {
            jobj = getGRLinkedInTransaction(request);
            issuccess = true;
        } catch (SessionExpiredException ex) {
            msg = ex.getMessage();
            Logger.getLogger(accGoodsReceiptControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ServiceException ex) {
            msg = "accGoodsReceiptControllerCMN.getGRLinkedInTransaction:" + ex.getMessage();
            Logger.getLogger(accGoodsReceiptControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            msg = "accGoodsReceiptControllerCMN.getGRLinkedInTransaction:" + ex.getMessage();
            Logger.getLogger(accGoodsReceiptControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                jobj.put("success", issuccess);
                jobj.put("msg", msg);
            } catch (JSONException ex) {
                Logger.getLogger(accGoodsReceiptControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return new ModelAndView("jsonView", "model", jobj.toString());
    }

    public JSONObject getGRLinkedInTransaction(HttpServletRequest request) throws SessionExpiredException, ServiceException {
        JSONObject jobj = new JSONObject();
        JSONArray jArr = new JSONArray();
        try {
            String billid = request.getParameter("billid");
            String companyid = sessionHandlerImpl.getCompanyid(request);
            DateFormat df = authHandler.getDateOnlyFormat();
            KwlReturnObject curresult = accountingHandlerDAOobj.getObject(KWLCurrency.class.getName(), sessionHandlerImpl.getCurrencyID(request));
            KWLCurrency currency = (KWLCurrency) curresult.getEntityList().get(0);
            if (!StringUtil.isNullOrEmpty(billid)) {
                KwlReturnObject cnresult = accGoodsReceiptobj.getPurchaseInvoiceLinkedWithGR(billid, companyid);//used for both  backward and forward linking
                List listc = cnresult.getEntityList();
                if (listc != null && listc.size() > 0) { 
                    Iterator itr1 = listc.iterator();
                    while (itr1.hasNext()) {
                        //String noteId = (String) itr1.next();
                        Object[] oj = (Object[]) itr1.next();
                        GoodsReceipt goodsreceipt = (GoodsReceipt) oj[0];
                        /*  
                         * 
                         * Type=0 GR -> PI &  Type=1 PI ->GR
                         */
                        int type = (int) oj[1];
                        JSONObject obj = new JSONObject();

                        Vendor vendor = goodsreceipt.getVendor();
                        obj.put("billid", goodsreceipt.getID());
                        obj.put(Constants.IsRoundingAdjustmentApplied, goodsreceipt.isIsRoundingAdjustmentApplied());
                        obj.put("companyid", goodsreceipt.getCompany().getCompanyID());
                        obj.put("companyname", goodsreceipt.getCompany().getCompanyName());
                        obj.put("withoutinventory", "");
                        obj.put("transactionNo", goodsreceipt.getGoodsReceiptNumber());   //delivery order no
                        obj.put("journalEntryId", goodsreceipt.getJournalEntry().getID());
                        obj.put("date", df.format(goodsreceipt.getCreationDate()));
                        obj.put("gtaapplicable", goodsreceipt.isGtaapplicable());
                        obj.put("journalEntryNo", goodsreceipt.getJournalEntry().getEntryNumber());  //journal entry no
                        if (goodsreceipt.isIsconsignment()) {
                            obj.put("mergedCategoryData", "Consignment Vendor Invoice");  //type of data
                        } else if (goodsreceipt.isFixedAssetInvoice()) {
                            obj.put("mergedCategoryData", "Fixed Asset Acquired Invoice");  //type of data
                        } else {
                            obj.put("mergedCategoryData", "Vendor Invoice");  //type of data
                        }
                        obj.put("personname", vendor.getName());
                        obj.put("personid", vendor.getID());
                        double invoiceOriginalAmt = 0d;
                        JournalEntry je = null;
                        JournalEntryDetail d = null;
                        if (goodsreceipt.isNormalInvoice()) {
                            je = goodsreceipt.getJournalEntry();
                            d = goodsreceipt.getVendorEntry();
                        }
                        double externalCurrencyRate = 0d;
                        Date creationDate = null;
                        String currencyid = goodsreceipt.getCurrency().getCurrencyID();
                        Account account = null;
                        creationDate = goodsreceipt.getCreationDate();
                        if (goodsreceipt.isIsOpeningBalenceInvoice() && !goodsreceipt.isNormalInvoice()) {
                            KwlReturnObject accObjItr = accountingHandlerDAOobj.getObject(Account.class.getName(), goodsreceipt.getVendor().getAccount().getID());
                            account = (Account) accObjItr.getEntityList().get(0);
                            externalCurrencyRate = goodsreceipt.getExchangeRateForOpeningTransaction();
                            invoiceOriginalAmt = goodsreceipt.getOriginalOpeningBalanceAmount();
                        } else {
                            account = d.getAccount();
                            externalCurrencyRate = je.getExternalCurrencyRate();
//                            creationDate = je.getEntryDate();
                            invoiceOriginalAmt = d.getAmount();
                        }
                        obj.put("isOpeningBalanceTransaction", goodsreceipt.isIsOpeningBalenceInvoice());
                        obj.put("isNormalTransaction", goodsreceipt.isNormalInvoice());
                        obj.put("parentinvoiceid", goodsreceipt.getParentInvoice() != null ? goodsreceipt.getParentInvoice().getID() : "");
                        obj.put("companyid", goodsreceipt.getCompany().getCompanyID());
                        obj.put("companyname", goodsreceipt.getCompany().getCompanyName());
                        obj.put(GoodsReceiptCMNConstants.PERSONID, vendor == null ? account.getID() : vendor.getID());
                        obj.put(GoodsReceiptCMNConstants.ALIASNAME, vendor == null ? "" : vendor.getAliasname());
                        obj.put(GoodsReceiptCMNConstants.PERSONEMAIL, vendor == null ? "" : vendor.getEmail());
                        obj.put(GoodsReceiptCMNConstants.BILLNO, goodsreceipt.getGoodsReceiptNumber());
                        obj.put(GoodsReceiptCMNConstants.CURRENCYID, currencyid);
                        obj.put(GoodsReceiptCMNConstants.CURRENCYSYMBOL, (goodsreceipt.getCurrency() == null ? currency.getSymbol() : goodsreceipt.getCurrency().getSymbol()));
                        obj.put("currencyCode", (goodsreceipt.getCurrency() == null ? currency.getCurrencyCode() : goodsreceipt.getCurrency().getCurrencyCode()));
                        obj.put("currencycode", (goodsreceipt.getCurrency() == null ? currency.getCurrencyCode() : goodsreceipt.getCurrency().getCurrencyCode()));
                        obj.put(GoodsReceiptCMNConstants.CURRENCYNAME, (goodsreceipt.getCurrency() == null ? currency.getName() : goodsreceipt.getCurrency().getName()));
                        obj.put(GoodsReceiptCMNConstants.COMPANYADDRESS, goodsreceipt.getCompany().getAddress());
                        obj.put(GoodsReceiptCMNConstants.COMPANYNAME, goodsreceipt.getCompany().getCompanyName());
                        obj.put(GoodsReceiptCMNConstants.BILLTO, goodsreceipt.getBillFrom());
                        obj.put(GoodsReceiptCMNConstants.ISEXPENSEINV, goodsreceipt.isIsExpenseType());
                        obj.put(GoodsReceiptCMNConstants.SHIPTO, goodsreceipt.getShipFrom());
                        obj.put(GoodsReceiptCMNConstants.JOURNALENTRYID, je != null ? je.getID() : "");
                        obj.put(GoodsReceiptCMNConstants.EXTERNALCURRENCYRATE, externalCurrencyRate);
                        obj.put(GoodsReceiptCMNConstants.ENTRYNO, je != null ? je.getEntryNumber() : "");
                        obj.put(GoodsReceiptCMNConstants.DATE, df.format(creationDate));
                        obj.put(GoodsReceiptCMNConstants.SHIPDATE, goodsreceipt.getShipDate() == null ? "" : df.format(goodsreceipt.getShipDate()));
                        obj.put(GoodsReceiptCMNConstants.DUEDATE, df.format(goodsreceipt.getDueDate()));
                        obj.put(GoodsReceiptCMNConstants.PERSONNAME, vendor == null ? account.getName() : vendor.getName());
                        obj.put(GoodsReceiptCMNConstants.PERSONINFO, vendor == null ? account.getName() : vendor.getName()+"("+vendor.getAcccode()+")");
                        obj.put("personcode", vendor == null ? (account.getAcccode() == null ? "" : account.getAcccode()) : (vendor.getAcccode() == null ? "" : vendor.getAcccode()));
                        obj.put("agent", goodsreceipt.getMasterAgent() == null ? "" : goodsreceipt.getMasterAgent().getID());
                        obj.put(GoodsReceiptCMNConstants.MEMO, goodsreceipt.getMemo());
                        obj.put("posttext", goodsreceipt.getPostText());
                        obj.put("shiplengthval", goodsreceipt.getShiplength());
                        obj.put("invoicetype", goodsreceipt.getInvoicetype());
                        obj.put(GoodsReceiptCMNConstants.TERMNAME, vendor == null ? "" : ((vendor.getDebitTerm() == null) ? "" : vendor.getDebitTerm().getTermname()));
                        obj.put(GoodsReceiptCMNConstants.DELETED, goodsreceipt.isDeleted());
                        obj.put(GoodsReceiptCMNConstants.TAXINCLUDED, goodsreceipt.getTax() == null ? false : true);
                        obj.put(GoodsReceiptCMNConstants.TAXID, goodsreceipt.getTax() == null ? "" : goodsreceipt.getTax().getID());
                        obj.put(GoodsReceiptCMNConstants.TAXNAME, goodsreceipt.getTax() == null ? "" : goodsreceipt.getTax().getName());
                        obj.put(GoodsReceiptCMNConstants.ExchangeRate, "1 " + currency.getCurrencyCode() + " = " + externalCurrencyRate + " " + (goodsreceipt.getCurrency() == null ? "" : goodsreceipt.getCurrency().getCurrencyCode()));
                        obj.put(GoodsReceiptCMNConstants.DISCOUNT, goodsreceipt.getDiscount() == null ? 0 : goodsreceipt.getDiscount().getDiscountValue());
                        obj.put(GoodsReceiptCMNConstants.ISPERCENTDISCOUNT, goodsreceipt.getDiscount() == null ? false : goodsreceipt.getDiscount().isInPercent());
                        obj.put(GoodsReceiptCMNConstants.DISCOUNTVAL, goodsreceipt.getDiscount() == null ? 0 : goodsreceipt.getDiscount().getDiscount());
                        obj.put(CCConstants.JSON_costcenterid, je != null ? (je.getCostcenter() == null ? "" : je.getCostcenter().getID()) : "");
                        obj.put(CCConstants.JSON_costcenterName, je != null ? (je.getCostcenter() == null ? "" : je.getCostcenter().getName()) : "");
                        obj.put("isfavourite", goodsreceipt.isFavourite());
                        obj.put("isprinted", goodsreceipt.isPrinted());
                        obj.put("cashtransaction", goodsreceipt.isCashtransaction());
                        obj.put("archieve", 0);
                        obj.put("shipvia", goodsreceipt.getShipvia() == null ? "" : goodsreceipt.getShipvia());
                        obj.put("fob", goodsreceipt.getFob() == null ? "" : goodsreceipt.getFob());
                        if (goodsreceipt.getTermsincludegst() != null) {
                            obj.put(Constants.termsincludegst, goodsreceipt.getTermsincludegst());
                        }
                        obj = AccountingAddressManager.getTransactionAddressJSON(obj, goodsreceipt.getBillingShippingAddresses(), true);
                        obj.put("termdays", goodsreceipt.getTermid() == null ? 0 : goodsreceipt.getTermid().getTermdays());
                        obj.put("termid", goodsreceipt.getTermid() == null ? "" : goodsreceipt.getTermid().getID());
                        //Landed Invoice  ERP-20637
                        if (goodsreceipt.getLandedInvoice() != null) {
                            Set<GoodsReceipt> landInvoiceSet = goodsreceipt.getLandedInvoice();
                            String landedInvoiceId = "", landedInvoiceNumber = "";
                            for (GoodsReceipt grObj : landInvoiceSet) {
                                if (!(StringUtil.isNullOrEmpty(landedInvoiceId) && StringUtil.isNullOrEmpty(landedInvoiceId))) {
                                    landedInvoiceId += ",";
                                    landedInvoiceNumber += ",";
                                }
                                landedInvoiceId += grObj.getID();
                                landedInvoiceNumber += grObj.getGoodsReceiptNumber();
                            }
                            obj.put("landedInvoiceID", landedInvoiceId);
                            obj.put("landedInvoiceNumber", landedInvoiceNumber);
                        }
                        obj.put("billto", goodsreceipt.getBillTo() == null ? "" : goodsreceipt.getBillTo());
                        obj.put("shipto", goodsreceipt.getShipTo() == null ? "" : goodsreceipt.getShipTo());
                        obj.put("isCapitalGoodsAcquired", goodsreceipt.isCapitalGoodsAcquired());
                        obj.put("isRetailPurchase", goodsreceipt.isRetailPurchase());
                        obj.put("importService", goodsreceipt.isImportService());
                        if (goodsreceipt.getModifiedby() != null) {
                            obj.put("lasteditedby", StringUtil.getFullName(goodsreceipt.getModifiedby()));
                        }
                        obj.put("type", type);
                        jArr.put(obj);
                    }
                }
               /*  purchase Return linked with GR type=3*/
                KwlReturnObject prresult = accGoodsReceiptobj.getPurchaseReturnLinkedWithGR(billid, companyid);
                List listpr = prresult.getEntityList();
                Iterator itr4 = listpr.iterator();
                while (itr4.hasNext()) {
                    String orderid = (String) itr4.next();
                    JSONObject obj = new JSONObject();
                    KwlReturnObject objItr = accountingHandlerDAOobj.getObject(PurchaseReturn.class.getName(), orderid);
                    PurchaseReturn purchaseReturn = (PurchaseReturn) objItr.getEntityList().get(0);

                    Vendor vendor = purchaseReturn.getVendor();
                    obj.put("billid", purchaseReturn.getID());
                    obj.put("companyid", purchaseReturn.getCompany().getCompanyID());
                    obj.put("withoutinventory", "");
                    obj.put("transactionNo", purchaseReturn.getPurchaseReturnNumber());   //delivery order no
                    obj.put("date", df.format(purchaseReturn.getOrderDate()));  //date of delivery order
                    obj.put("journalEntryNo", "");  //journal entry no
                    if (purchaseReturn.isIsconsignment()) {
                        obj.put("mergedCategoryData", "Consignment Purchase Return");  //type of data
                    } else if(purchaseReturn.isFixedAsset()){
                        obj.put("mergedCategoryData", "Fixed Asset Purchase Return");  //type of data
                    } else {
                        obj.put("mergedCategoryData", "Purchase Return");  //type of data
                    }
                    obj.put("personname", vendor.getName());
                    DebitNote debitNote = null;
                    if (purchaseReturn.isIsNoteAlso()) {
                        KwlReturnObject idresult = accDebitNoteobj.getDebitNoteIdFromPRId(purchaseReturn.getID(), companyid);
                        if (!(idresult.getEntityList().isEmpty())) {
                            debitNote = (DebitNote) idresult.getEntityList().get(0);
                        }
                    }
                    obj.put("billid", purchaseReturn.getID());
                    obj.put("companyid", purchaseReturn.getCompany().getCompanyID());
                    obj.put("companyname", purchaseReturn.getCompany().getCompanyName());
                    obj.put("withoutinventory", false);
                    obj.put("personid", vendor.getID());
                    obj.put("billno", purchaseReturn.getPurchaseReturnNumber());
                    obj.put("date", authHandler.getDateOnlyFormat().format(purchaseReturn.getOrderDate()));

                    obj.put("posttext", purchaseReturn.getPostText() == null ? "" : purchaseReturn.getPostText());
                    obj.put("personname", vendor.getName());
                    obj.put("aliasname", vendor.getAliasname());
                    obj.put("personemail", vendor.getEmail());
                    obj.put("memo", purchaseReturn.getMemo());
                    obj.put("externalcurrencyrate", purchaseReturn.getExternalCurrencyRate());
                    obj.put("costcenterid", purchaseReturn.getCostcenter() == null ? "" : purchaseReturn.getCostcenter().getID());
                    obj.put("costcenterName", purchaseReturn.getCostcenter() == null ? "" : purchaseReturn.getCostcenter().getName());
                    obj.put("taxid", purchaseReturn.getTax() != null ? purchaseReturn.getTax().getID() : "");
                    obj.put("shipdate", purchaseReturn.getShipdate() == null ? "" : authHandler.getDateOnlyFormat().format(purchaseReturn.getShipdate()));
                    obj.put("shipvia", purchaseReturn.getShipvia() == null ? "" : purchaseReturn.getShipvia());
                    obj.put("fob", purchaseReturn.getFob() == null ? "" : purchaseReturn.getFob());
                    obj.put("isfavourite", purchaseReturn.isFavourite());
                    obj.put("deleted", purchaseReturn.isDeleted());
                    obj.put("currencyid", (purchaseReturn.getCurrency() == null ? "" : purchaseReturn.getCurrency().getCurrencyID()));
                    obj.put("currencysymbol", (purchaseReturn.getCurrency() == null ? "" : purchaseReturn.getCurrency().getSymbol()));
                    obj.put("currencycode", (purchaseReturn.getCurrency() == null ? "" : purchaseReturn.getCurrency().getCurrencyCode()));
                    obj.put("sequenceformatid", purchaseReturn.getSeqformat() != null ? purchaseReturn.getSeqformat().getID() : "");
                    obj.put("isConsignment", purchaseReturn.isIsconsignment());
                    obj.put("isNoteAlso", purchaseReturn.isIsNoteAlso());
                    obj.put("cndnsequenceformatid", debitNote != null ? (debitNote.getSeqformat() != null ? debitNote.getSeqformat().getID() : "") : "");
                    obj.put("cndnnumber", debitNote != null ? debitNote.getDebitNoteNumber() : "");
                    if (purchaseReturn.getModifiedby() != null) {
                        obj.put("lasteditedby", StringUtil.getFullName(purchaseReturn.getModifiedby()));
                    }
                    obj.put("type", 3);//GR->PR
                    jArr.put(obj);
                }
                /* Purchase Order Linked with GR Type=2*/
                KwlReturnObject soresult = accGoodsReceiptobj.getPurchaseOrderLinkedWithGR(billid, companyid);
                List salesorders = soresult.getEntityList();
                if (salesorders != null && salesorders.size() > 0) {
                    jArr=accSalesOrderServiceDAOobj.getPurchaseOrderJsonForLinking(jArr, salesorders, currency,df);
                }                
                jobj.put("count", jArr.length());
                jobj.put("data", jArr);

            }
        } catch (JSONException je) {
            throw ServiceException.FAILURE(je.getMessage(), je);
        }
        return jobj;
    }
    
    public void exportSatsVendorTaxInvoiceJasper(HttpServletRequest request, HttpServletResponse response) {
        try {
            List jasperPrint = accExportReportsServiceDAOobj.exportSatsVendorTaxInvoiceJasper(request, response);
            JRPdfExporter exp = new JRPdfExporter();
            exp.setParameter(JRExporterParameter.JASPER_PRINT_LIST, jasperPrint);
            exp.setParameter(JRPdfExporterParameter.OUTPUT_STREAM, response.getOutputStream());

            exp.exportReport();
        } catch (Exception e) {
            Logger.getLogger(accGoodsReceiptController.class.getName()).log(Level.SEVERE, null, e);
        }

    }

    public void exportSATSDebitNoteJasperReport(HttpServletRequest request, HttpServletResponse response) {
        try {
            List jasperPrint = accExportReportsServiceDAOobj.exportSATSDebitNoteJasperReport(request, response);
            JRPdfExporter exp = new JRPdfExporter();
            exp.setParameter(JRExporterParameter.JASPER_PRINT_LIST, jasperPrint);
            exp.setParameter(JRPdfExporterParameter.OUTPUT_STREAM, response.getOutputStream());

            exp.exportReport();
        } catch (Exception e) {
            Logger.getLogger(accGoodsReceiptController.class.getName()).log(Level.SEVERE, null, e);
        }

    }
    public ModelAndView GoodsReceiptApprovalFromFile(HttpServletRequest request, HttpServletResponse response) throws ServiceException {
        JSONObject jobj = new JSONObject();
        String msg = "";
        boolean issuccess = false;
        try {
            validateGROListHeaders();
            approveGRORecords(request);
            issuccess = true;
            msg = messageSource.getMessage("acc.gr.fileReadSuccessMsg", null, RequestContextUtils.getLocale(request)); // "File Read Successfully";
        } catch (Exception ex) {
            issuccess = false;
            msg = "" + ex.getMessage();
            Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
        } finally {
            try {
                jobj.put("success", issuccess);
                jobj.put("msg", msg);
            } catch (JSONException e) {
                Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, e.getMessage(), e);
            }
        }
        return new ModelAndView("jsonView_ex", "model", jobj.toString());
    }

    public void validateGROListHeaders() throws AccountingException, ServiceException {
        try {
            List<String> list = new ArrayList<String>();
            list.add("Product ID");
            list.add("Serial No");
            List<String> fileHeaderList = new ArrayList<String>();

            String GROApprovalListFilePath = storageHandlerImpl.GetGROApprovalListStorePath();
            FileInputStream fileInputStream = new FileInputStream(GROApprovalListFilePath);
            BufferedReader br = new BufferedReader(new InputStreamReader(fileInputStream));
            String record;
            int cnt = 0;

            while ((record = br.readLine()) != null) {
                if (cnt == 0) {
                    String[] recarr = record.split(",");

                    String productID = recarr[0].trim();
                    if (!StringUtil.isNullOrEmpty(productID)) {
                        productID = productID.replaceAll("\"", "");
                    }

                    String productSerialNumber = recarr[1].trim();
                    if (!StringUtil.isNullOrEmpty(productSerialNumber)) {
                        productSerialNumber = productSerialNumber.replaceAll("\"", "");
                    }

                    fileHeaderList.add(productID);
                    fileHeaderList.add(productSerialNumber);
                }
                cnt++;
            }

            // iterating for manadatory columns
            for (String manadatoryField : list) {
                if (!fileHeaderList.contains(manadatoryField)) {
                    throw new AccountingException(manadatoryField + " column is not available in file");
                }
            }
        } catch (Exception ex) {
            Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
            throw ServiceException.FAILURE(ex.getMessage(), ex);
        }
    }

    public void approveGRORecords(HttpServletRequest request) throws AccountingException, IOException, SessionExpiredException, JSONException {
        DefaultTransactionDefinition def = new DefaultTransactionDefinition();
        def.setName("import_Tx");
        def.setPropagationBehavior(TransactionDefinition.PROPAGATION_REQUIRED);
        TransactionStatus status = txnManager.getTransaction(def);
        boolean commitedEx = false;
        String companyid = sessionHandlerImpl.getCompanyid(request);
        List<String> pendingGROids = new ArrayList<String>();
        List<String> approvedGROids = new ArrayList<String>();

        try {
            HashMap<String, ArrayList<String>> fileData = new HashMap<String, ArrayList<String>>();
            String GROApprovalListFilePath = storageHandlerImpl.GetGROApprovalListStorePath();
            FileInputStream fileInputStream = new FileInputStream(GROApprovalListFilePath);
            BufferedReader br = new BufferedReader(new InputStreamReader(fileInputStream));
            String record;
            int cnt = 0;

            while ((record = br.readLine()) != null) {
                if (cnt != 0) {
                    String[] recarr = record.split(",");
                    String productID = recarr[0].trim();
                    if (!StringUtil.isNullOrEmpty(productID)) {
                        productID = productID.replaceAll("\"", "");
                    }

                    String productSerialNumber = recarr[1].trim();
                    if (!StringUtil.isNullOrEmpty(productSerialNumber)) {
                        productSerialNumber = productSerialNumber.replaceAll("\"", "");
                    }
                    
                    ArrayList<String> SrNoListTemp2 = new ArrayList<String>();
                    if(fileData.containsKey(productID)) {
                        SrNoListTemp2 = fileData.get(productID);
                    }
                    SrNoListTemp2.add(productSerialNumber);
                    fileData.put(productID, SrNoListTemp2);
                }
                cnt++;
            }

            boolean isApprove = false;
            String pendingGROid;
            String approvedid = "";
            List<Object[]> pendingGROList, pendingGROProductIDandSRnoList;
            Iterator pendingGROProductIDandSRnoitr;
            KwlReturnObject pendingGROResult, pendingGROProductIDandSRnoResult;
            
            HashMap<String, Object> requestParams = getGoodsReceiptOrdersMap(request);
            String gcurrencyid = sessionHandlerImpl.getCurrencyID(request);
            request.setAttribute("companyid", companyid);
            request.setAttribute("gcurrencyid", gcurrencyid);
            requestParams.put("companyid", companyid);
            requestParams.put("gcurrencyid", gcurrencyid);
            requestParams.put("userid", sessionHandlerImpl.getUserid(request));
            
            pendingGROResult = accGoodsReceiptobj.getPendingGRO(requestParams);
            pendingGROList = pendingGROResult.getEntityList();

            for(Object[] pendingGRORow : pendingGROList) {
                pendingGROid = (String) pendingGRORow[0];
                pendingGROProductIDandSRnoResult = accGoodsReceiptobj.getpendingGROProductIDandSRResult(pendingGROid, companyid);
                pendingGROProductIDandSRnoList = pendingGROProductIDandSRnoResult.getEntityList();
                pendingGROProductIDandSRnoitr = pendingGROProductIDandSRnoList.iterator();
                loop1: while (pendingGROProductIDandSRnoitr.hasNext()) {
                    Object[] pendingGROProductIDandSRnoRow = (Object[]) pendingGROProductIDandSRnoitr.next();
                    
                    if(fileData.containsKey((String) pendingGROProductIDandSRnoRow[1])) {
                        ArrayList<String> SrNoList = fileData.get((String) pendingGROProductIDandSRnoRow[1]);
                        if(SrNoList.contains((String) pendingGROProductIDandSRnoRow[0])) {
                            isApprove = true;
                            if (!approvedid.equalsIgnoreCase(pendingGROid)) {
                                approvedid = pendingGROid;
                                approvedGROids.add(approvedid);
                            }
                        } else {
                            if(approvedGROids.contains(pendingGROid)) {
                                approvedGROids.remove(pendingGROid);
                            }
                            isApprove = false;
                            pendingGROids.add(pendingGROid);
                            break loop1;
                        }
                    } else {
                        if (approvedGROids.contains(pendingGROid)) {
                            approvedGROids.remove(pendingGROid);
                        }
                        isApprove = false;
                        pendingGROids.add(pendingGROid);
                        break loop1;
                    }
                }

                if (isApprove) {
                    accGoodsReceiptobj.ApproveGROForProductIDandSRno(pendingGROid, companyid);
                }
            }
            
            if(pendingGROids.size() > 0) {
                sendMissingGROrderNotificationMail(requestParams,pendingGROids);
            }
            
            if(approvedGROids.size() > 0) {
                sendApprovedGROrderNotificationMail(requestParams,approvedGROids);
            }
            
                txnManager.commit(status);
                commitedEx = true;
        } catch (Exception ex) {
            if (!commitedEx) { // if exception occurs during commit then dont call rollback
                txnManager.rollback(status);
            }
            Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
            throw new AccountingException("Error While Reading Records.");
        }
    }
    
    public void sendMissingGROrderNotificationMail(HashMap<String, Object> pendingGROrequestParams, List<String> pendingGROids) throws FileNotFoundException, IOException, DocumentException, ServiceException, JSONException {
        try {
            String companyId = (String) pendingGROrequestParams.get("companyid");
            String[]  userMailid;
            int level = 0;
            List<String> userEmailList = new ArrayList<String>();
            String groNumber, vendorName, prodID, batchName;
            HashMap<String, Object> requestParams = new HashMap<String, Object>();
            GoodsReceiptOrder goodsReceiptOrder = null;
            Date todayDate = new Date();
            DateFormat formatter;
            formatter = new SimpleDateFormat("dd-MM-yyyy");
            String today = formatter.format(todayDate);

            List headerItems = new ArrayList();;
            List finalData = new ArrayList();
            ArrayList<CustomDesignLineItemProp> headerlist = new ArrayList();
            requestParams.put("gcurrencyid", pendingGROrequestParams.get("gcurrencyid"));
            requestParams.put("companyid", companyId);
            headerItems.add("S.No.");
            headerItems.add("GR Order Number");
            headerItems.add("Vendor Name");
            headerItems.add("Order Date");
            headerItems.add("Product Name");
            headerItems.add("Serial Number(s)");
            
            HashMap<String, Object> qdDataMap = new HashMap<String, Object>();
            qdDataMap.put("companyid", companyId);
            qdDataMap.put("level", level + 1);
            qdDataMap.put("moduleid", Constants.Acc_Goods_Receipt_ModuleId);
            KwlReturnObject flowresult = accMultiLevelApprovalDAOObj.getMultiApprovalRuleData(qdDataMap);
            Iterator flowresultItr = flowresult.getEntityList().iterator();
            while (flowresultItr.hasNext()) {
                Object[] flowresultRow = (Object[]) flowresultItr.next();
                qdDataMap.put("ruleid", flowresultRow[0].toString());
                KwlReturnObject userResult = accMultiLevelApprovalDAOObj.getApprovalRuleTargetUsers(qdDataMap);
                Iterator useritr = userResult.getEntityList().iterator();
                while (useritr.hasNext()) {
                    Object[] userrow = (Object[]) useritr.next();
                    userEmailList.add(userrow[3].toString());
                }
            }
            userMailid = userEmailList.toArray(new String[userEmailList.size()]);
            
            if (userMailid.length > 0) {
                boolean isGoodsReceiptOrder = false;
                int sno = 1;
                String subject = "Pending Goods Receipt: Approval Notification";
                String plainMsg = "";
                String htmlText = "<html><style type='text/css'>"
                        + "a:link, a:visited, a:active {\n"
                        + " 	color: #03C;"
                        + "}\n"
                        + "body {\n"
                        + "	font-family: Arial, Helvetica, sans-serif;"
                        + "	color: #000;"
                        + "	font-size: 13px;"
                        + "}\n"
                        + "</style><body>"
                        + "<p>Hi All,</p>"
                        + "<p></p>"
                        + "<p>Few products with below mentioned serial number are not available.</p>"
                        + "<p>Thanks <br>"
                        + "This is an auto generated email. Do not reply</p>";
                //String from = Constants.ADMIN_EMAILID;
                KwlReturnObject returnObject = accountingHandlerDAOobj.getObject(Company.class.getName(), companyId);
                Company company = (Company) returnObject.getEntityList().get(0);
                String from = (!company.isEmailFromCompanyCreator())?Constants.ADMIN_EMAILID:authHandlerDAOObj.getSysEmailIdByCompanyID(company.getCompanyID());              
                Iterator iterator = pendingGROids.iterator();

                while (iterator.hasNext()) {
                    ArrayList filter_names = new ArrayList(), filter_params = new ArrayList();
                    HashMap<String, Object> groRequestParams = new HashMap<String, Object>();
                    String pendingGROid = (String) iterator.next();
                    KwlReturnObject GROObj = accountingHandlerDAOobj.getObject(GoodsReceiptOrder.class.getName(), pendingGROid);
                    goodsReceiptOrder = (GoodsReceiptOrder) GROObj.getEntityList().get(0);
                    
                    if (goodsReceiptOrder != null) {
                        isGoodsReceiptOrder = true;
                        filter_names.add("grOrder.ID");
                        filter_params.add(goodsReceiptOrder.getID());
                        groRequestParams.put("filter_names", filter_names);
                        groRequestParams.put("filter_params", filter_params);
                                                
                        KwlReturnObject grodresult = accGoodsReceiptobj.getGoodsReceiptOrderDetails(groRequestParams);
                        Iterator itr = grodresult.getEntityList().iterator();
                        while (itr.hasNext()) {
                            groNumber = goodsReceiptOrder.getGoodsReceiptOrderNumber();
                            Date orderDate = (Date) goodsReceiptOrder.getOrderDate();
                            vendorName = goodsReceiptOrder.getVendor().getName();
                            
                            List data = new ArrayList();
                            data.add(sno);
                            data.add(groNumber);
                            data.add(vendorName);
                            data.add(formatter.format(orderDate));
                            
                            GoodsReceiptOrderDetails goodsReceiptOrderDetailsObj = (GoodsReceiptOrderDetails) itr.next();
                            prodID = goodsReceiptOrderDetailsObj.getProduct().getName();
                            data.add(prodID);

                            ProductBatch prodBatch = null;
                            String batchId;
                            prodBatch = goodsReceiptOrderDetailsObj.getBatch();
                            KwlReturnObject srNoObj = null;
                            boolean serialCheck=false;
                            if (prodBatch != null) {
                                HashMap<String, Object> requestParams1 = new HashMap<String, Object>();
                                batchId = prodBatch.getId();
                                requestParams1.put("batch", batchId);
                                requestParams1.put("companyid", companyId);
                                srNoObj = accMasterItemsDAOobj.getSerials(requestParams1);
                                if (srNoObj != null && srNoObj.getEntityList().size()>0) {
                                    List list1 = srNoObj.getEntityList();
                                    Iterator itr1 = list1.iterator();
                                    while (itr1.hasNext()) {
                                        Object[] oj = (Object[]) itr1.next();
                                        String batchid = oj[0].toString();
                                        KwlReturnObject batchs = accountingHandlerDAOobj.getObject(BatchSerial.class.getName(), batchid);
                                        List<BatchSerial> prd = batchs.getEntityList();
                                        data.add(prd.get(0).getName());
                                        finalData.add(data);
                                        
                                        data = new ArrayList();
                                        sno++;
                                        data.add(sno);
                                        data.add(groNumber);
                                        data.add(vendorName);
                                        data.add(formatter.format(orderDate));
                                        data.add(prodID);
                                        serialCheck=true;
                                    }
                                } else {
                                    data.add("");
                                    finalData.add(data);
                                }
                            } else {
                                data.add("");
                                finalData.add(data);
                            }
                            if(!serialCheck){
                                sno++;
                            }
                        }
                    }
                }
                if (isGoodsReceiptOrder) {
                    for (Object header : headerItems) {
                        CustomDesignLineItemProp headerprop = new CustomDesignLineItemProp();
                        String a = header.toString();
                        headerprop.setAlign("left");
                        headerprop.setData(a);
                        headerprop.setWidth("50px");
                        headerlist.add(headerprop);
                    }
                    List finalProductList = new ArrayList();
                    for (Object headerdata : finalData) {
                        ArrayList<CustomDesignLineItemProp> prodlist = new ArrayList();
                        List datalist = (List) headerdata;
                        for (Object hdata : datalist) {
                            CustomDesignLineItemProp prop = new CustomDesignLineItemProp();
                            prop.setAlign("left");
                            prop.setData(hdata.toString());
                            prodlist.add(prop);
                        }
                        finalProductList.add(prodlist);
                    }
                    String top = "10px", left = "10px", tablewidth = CustomDesignHandler.pageWidth;
                    StringWriter writer = new StringWriter();
                    VelocityEngine ve = new VelocityEngine();
                    ve.init();
                    VelocityContext context = new VelocityContext();
                    context.put("tableHeader", headerlist);
                    context.put("prodList", finalProductList);
                    context.put("top", top);
                    context.put("left", left);
                    context.put("width", tablewidth);
                    velocityEngine.mergeTemplate("duemailitems.vm", "UTF-8", context, writer);
                    String tablehtml = writer.toString();
                    htmlText = htmlText.concat(tablehtml);
                    Map<String, Object> smtpConfigMap = authHandler.getSMTPConfigMap(company);
                    SendMailHandler.postMail(userMailid, subject, htmlText, plainMsg, from, smtpConfigMap);
                }
            }
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }
    
    public void sendApprovedGROrderNotificationMail(HashMap<String, Object> approvedGROrequestParams, List<String> approvedGROids) throws FileNotFoundException, IOException, DocumentException, ServiceException, JSONException {
        try {
            String companyId = (String) approvedGROrequestParams.get("companyid");
            String[]  userMailid;
            int level = 0;
            List<String> userEmailList = new ArrayList<String>();
            String groNumber, vendorName, prodID, batchName;
            HashMap<String, Object> requestParams = new HashMap<String, Object>();
            GoodsReceiptOrder goodsReceiptOrder = null;
            Date todayDate = new Date();
            DateFormat formatter;
            formatter = new SimpleDateFormat("dd-MM-yyyy");
            String today = formatter.format(todayDate);

            List headerItems = new ArrayList();;
            List finalData = new ArrayList();
            ArrayList<CustomDesignLineItemProp> headerlist = new ArrayList();
            requestParams.put("gcurrencyid", approvedGROrequestParams.get("gcurrencyid"));
            requestParams.put("companyid", companyId);
            headerItems.add("S.No.");
            headerItems.add("GR Order Number");
            headerItems.add("Vendor Name");
            headerItems.add("Order Date");
            headerItems.add("Product Name");
            headerItems.add("Serial Number(s)");
            
            HashMap<String, Object> qdDataMap = new HashMap<String, Object>();
            qdDataMap.put("companyid", companyId);
            qdDataMap.put("level", level + 1);
            qdDataMap.put("moduleid", Constants.Acc_Goods_Receipt_ModuleId);
            KwlReturnObject flowresult = accMultiLevelApprovalDAOObj.getMultiApprovalRuleData(qdDataMap);
            Iterator flowresultItr = flowresult.getEntityList().iterator();
            while (flowresultItr.hasNext()) {
                Object[] flowresultRow = (Object[]) flowresultItr.next();
                qdDataMap.put("ruleid", flowresultRow[0].toString());
                KwlReturnObject userResult = accMultiLevelApprovalDAOObj.getApprovalRuleTargetUsers(qdDataMap);
                Iterator useritr = userResult.getEntityList().iterator();
                while (useritr.hasNext()) {
                    Object[] userrow = (Object[]) useritr.next();
                    userEmailList.add(userrow[3].toString());
                }
            }
            userMailid = userEmailList.toArray(new String[userEmailList.size()]);
            
            if (userMailid.length > 0) {
                boolean isGoodsReceiptOrder = false;
                int sno = 1;
                String subject = "Goods Receipt: Approval Notification";
                String plainMsg = "";
                String htmlText = "<html><style type='text/css'>"
                        + "a:link, a:visited, a:active {\n"
                        + " 	color: #03C;"
                        + "}\n"
                        + "body {\n"
                        + "	font-family: Arial, Helvetica, sans-serif;"
                        + "	color: #000;"
                        + "	font-size: 13px;"
                        + "}\n"
                        + "</style><body>"
                        + "<p>Hi All,</p>"
                        + "<p></p>"
                        + "<p>Below mensioned Goods Receipts Approved as products and serial number of those Goods are available.</p>"
                        + "<p>Thanks <br>"
                        + "This is an auto generated email. Do not reply</p>";
                //String from = Constants.ADMIN_EMAILID;
                KwlReturnObject returnObject = accountingHandlerDAOobj.getObject(Company.class.getName(), companyId);
                Company company = (Company) returnObject.getEntityList().get(0);
                String from = (!company.isEmailFromCompanyCreator())?Constants.ADMIN_EMAILID:authHandlerDAOObj.getSysEmailIdByCompanyID(company.getCompanyID());              
                Iterator iterator = approvedGROids.iterator();

                while (iterator.hasNext()) {
                    ArrayList filter_names = new ArrayList(), filter_params = new ArrayList();
                    HashMap<String, Object> groRequestParams = new HashMap<String, Object>();
                    String pendingGROid = (String) iterator.next();
                    KwlReturnObject GROObj = accountingHandlerDAOobj.getObject(GoodsReceiptOrder.class.getName(), pendingGROid);
                    goodsReceiptOrder = (GoodsReceiptOrder) GROObj.getEntityList().get(0);
                    
                    if (goodsReceiptOrder != null) {
                        
                        // For Update Inventory Product Quantity after Approve
                        Set<GoodsReceiptOrderDetails> groDetails = goodsReceiptOrder.getRows();
                        for (GoodsReceiptOrderDetails groDetail : groDetails) {
                            Inventory inventory = groDetail.getInventory();
                            if (inventory.isInvrecord()) {
                                inventory.setBaseuomquantity(inventory.getActquantity());
                                inventory.setActquantity(0.0);
                            }
                        }
                        
                        isGoodsReceiptOrder = true;
                        filter_names.add("grOrder.ID");
                        filter_params.add(goodsReceiptOrder.getID());
                        groRequestParams.put("filter_names", filter_names);
                        groRequestParams.put("filter_params", filter_params);
                                                
                        KwlReturnObject grodresult = accGoodsReceiptobj.getGoodsReceiptOrderDetails(groRequestParams);
                        Iterator itr = grodresult.getEntityList().iterator();
                        while (itr.hasNext()) {
                            groNumber = goodsReceiptOrder.getGoodsReceiptOrderNumber();
                            Date orderDate = (Date) goodsReceiptOrder.getOrderDate();
                            vendorName = goodsReceiptOrder.getVendor().getName();
                            
                            List data = new ArrayList();
                            data.add(sno);
                            data.add(groNumber);
                            data.add(vendorName);
                            data.add(formatter.format(orderDate));
                            
                            GoodsReceiptOrderDetails goodsReceiptOrderDetailsObj = (GoodsReceiptOrderDetails) itr.next();
                            prodID = goodsReceiptOrderDetailsObj.getProduct().getName();
                            data.add(prodID);

                            ProductBatch prodBatch = null;
                            String batchId;
                            prodBatch = goodsReceiptOrderDetailsObj.getBatch();
                            KwlReturnObject srNoObj = null;
                            boolean serialCheck=false;
                            if (prodBatch != null) {
                                HashMap<String, Object> requestParams1 = new HashMap<String, Object>();
                                batchId = prodBatch.getId();
                                requestParams1.put("batch", batchId);
                                requestParams1.put("companyid", companyId);
                                srNoObj = accMasterItemsDAOobj.getSerials(requestParams1);
                                if (srNoObj != null && srNoObj.getEntityList().size()>0) {
                                    List list1 = srNoObj.getEntityList();
                                    Iterator itr1 = list1.iterator();
                                    while (itr1.hasNext()) {
                                        Object[] oj = (Object[]) itr1.next();
                                        String batchid = oj[0].toString();
                                        KwlReturnObject batchs = accountingHandlerDAOobj.getObject(BatchSerial.class.getName(), batchid);
                                        List<BatchSerial> prd = batchs.getEntityList();
                                        data.add(prd.get(0).getName());
                                        finalData.add(data);
                                        data = new ArrayList();
                                        
                                        sno++;
                                        data.add(sno);
                                        data.add(groNumber);
                                        data.add(vendorName);
                                        data.add(formatter.format(orderDate));
                                        data.add(prodID);
                                        serialCheck=true;
                                    }
                                } else {
                                    data.add("");
                                    finalData.add(data);
                                }
                            } else {
                                data.add("");
                                finalData.add(data);
                            }
                            if(!serialCheck){
                                sno++;
                            }
                        }
                    }
                }
                if (isGoodsReceiptOrder) {
                    for (Object header : headerItems) {
                        CustomDesignLineItemProp headerprop = new CustomDesignLineItemProp();
                        String a = header.toString();
                        headerprop.setAlign("left");
                        headerprop.setData(a);
                        headerprop.setWidth("50px");
                        headerlist.add(headerprop);
                    }
                    List finalProductList = new ArrayList();
                    for (Object headerdata : finalData) {
                        ArrayList<CustomDesignLineItemProp> prodlist = new ArrayList();
                        List datalist = (List) headerdata;
                        for (Object hdata : datalist) {
                            CustomDesignLineItemProp prop = new CustomDesignLineItemProp();
                            prop.setAlign("left");
                            prop.setData(hdata.toString());
                            prodlist.add(prop);
                        }
                        finalProductList.add(prodlist);
                    }
                    String top = "10px", left = "10px", tablewidth = CustomDesignHandler.pageWidth;
                    StringWriter writer = new StringWriter();
                    VelocityEngine ve = new VelocityEngine();
                    ve.init();
                    VelocityContext context = new VelocityContext();
                    context.put("tableHeader", headerlist);
                    context.put("prodList", finalProductList);
                    context.put("top", top);
                    context.put("left", left);
                    context.put("width", tablewidth);
                    velocityEngine.mergeTemplate("duemailitems.vm", "UTF-8", context, writer);
                    String tablehtml = writer.toString();
                    htmlText = htmlText.concat(tablehtml);
                    Map<String, Object> smtpConfigMap = authHandler.getSMTPConfigMap(company);
                    SendMailHandler.postMail(userMailid, subject, htmlText, plainMsg, from, smtpConfigMap);
                }
            }
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }
    public ModelAndView getVendorInvoiceDueEvents(HttpServletRequest request, HttpServletResponse response) {
        JSONArray jArr = new JSONArray();
        try {
            HashMap<String, Object> requestParams = getGoodsReceiptMap(request);
            boolean CashAndInvoice = Boolean.FALSE.parseBoolean(String.valueOf(request.getParameter("CashAndInvoice")));
            String companyid = sessionHandlerImpl.getCompanyid(request);
            requestParams.put("CashAndInvoice", CashAndInvoice);
            if (request.getParameter("minimumAmountDue") != null) {
                requestParams.put("minimumAmountDue", Double.parseDouble(request.getParameter("minimumAmountDue").toString()));
            }
            requestParams.put("calendar", true);
            requestParams.put("calstartdt", request.getParameter("start"));
            requestParams.put("calenddt", request.getParameter("end"));

            requestParams.put("nondeleted", "true");
            requestParams.put("deleted", "false");

            KwlReturnObject result = accGoodsReceiptobj.getGoodsReceipts(requestParams);
            List<GoodsReceipt> list = result.getEntityList();
            //
            String basecurrencyid = (String) requestParams.get(GCURRENCYID);
            KwlReturnObject curresult = accountingHandlerDAOobj.getObject(KWLCurrency.class.getName(), basecurrencyid);
            KWLCurrency currency = (KWLCurrency) curresult.getEntityList().get(0);
            List ll = null;
            List<String> idsList = new ArrayList<String>();

            for (GoodsReceipt gReceipt : list) {
                idsList.add(gReceipt.getID());
            }
            Map<String, GoodsReceiptInfo> invoiceObjectMap = accGoodsReceiptobj.getGoodsReceiptInfoList(idsList);
            Map<String, JournalEntry> GoodsReceiptJEMap = accGoodsReceiptobj.getGRInvoiceJEList(idsList);
            Map<String, List<ReceiptTermsMap>> GoodsReceiptTermMapList = accGoodsReceiptobj.getInvoiceTermMapGRList(idsList);
            Map<String, List<ReceiptDetail>> receiptDetailsMap = accReceiptDAOobj.getContraPayReceiptFromGReceiptList(idsList);
            Map<String, List<PaymentDetail>> paymentDetailsMap = accVendorPaymentobj.getPaymentsInfoFromGReceiptList(idsList);
            Map<String, List<DebitNoteDetail>> dnDetailsMap = accDebitNoteobj.getDNRowsFromVendorInvoiceList(idsList);
            SimpleDateFormat sdf=new SimpleDateFormat("yyyy-MM-dd");
             DecimalFormat df = new DecimalFormat("#.00");
             
            for (GoodsReceipt gReceipt : list) {

                GoodsReceiptInfo grInfo = invoiceObjectMap.get(gReceipt.getID());
                JournalEntryDetail d = gReceipt.getVendorEntry();
                String currencyid = (gReceipt.getCurrency() == null ? currency.getCurrencyID() : gReceipt.getCurrency().getCurrencyID());
                
                Account account = d.getAccount();
                double amountdue = 0,  amountDueOriginal = 0;
                if (gReceipt.isIsExpenseType()) {
                    ll = accGoodsReceiptCommon.getExpGRAmountDue(requestParams, gReceipt);
                    amountdue = (Double) ll.get(1);

                    amountDueOriginal = (Double) ll.get(4);
                } else {
                    if (Constants.InvoiceAmountDueFlag) {
                        ll = accGoodsReceiptCommon.getInvoiceDiscountAmountInfo(requestParams, gReceipt);
                        amountdue = (Double) ll.get(1);
                        amountDueOriginal = (Double) ll.get(5);
                    } else {
                        ll = accGoodsReceiptCommon.getGRAmountDue(requestParams, gReceipt, currencyid, basecurrencyid, GoodsReceiptJEMap.get(gReceipt.getID()),
                                GoodsReceiptTermMapList.get(gReceipt.getID()), receiptDetailsMap.get(gReceipt.getID()), paymentDetailsMap.get(gReceipt.getID()), dnDetailsMap.get(gReceipt.getID()));
                        amountdue = (Double) ll.get(1);

                        amountDueOriginal = (Double) ll.get(5);
                    }
                }
                if (authHandler.round(amountdue, companyid) <= 0) {//remove //belongsTo1099&&gReceipt.isIsExpenseType()\\ in case of viewing all accounts. [PS]
                    continue;
                }
                
               
                
                JSONObject obj = new JSONObject();
                String vendornm = grInfo.getVendor() == null ? account.getName() : grInfo.getVendor().getName();
                
                 String docno=gReceipt.getGoodsReceiptNumber();
                String dueAmt=df.format(amountDueOriginal);
                String amt=df.format(d.getAmount());
                String currencysyb=(gReceipt.getCurrency()==null?currency.getCurrencyCode(): gReceipt.getCurrency().getCurrencyCode());
                
                String title = vendornm + "\n" +"Document No.: "+docno + "\n" + "Document Amount: "+currencysyb +" "+amt+"\n" +"Due Amount: "+currencysyb+" "+dueAmt;
                
                obj.put("title", title);
                obj.put("start",sdf.format(gReceipt.getDueDate()) );
                jArr.put(obj);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return new ModelAndView("jsonView_ex", "model", jArr.toString());
    }
    
    public ModelAndView getGoodsReceiptsForLifoFifo(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        JSONArray invoiceArray = new JSONArray();
        JSONArray advanceArray = new JSONArray();
        JSONObject returnObject = new JSONObject();
        boolean issuccess = false;
        String msg = "";
        try {
            boolean isEdit = request.getParameter("isEdit") == null ? false : Boolean.parseBoolean(request.getParameter("isEdit"));
            boolean isCopy = request.getParameter("isCopy") == null ? false : Boolean.parseBoolean(request.getParameter("isCopy"));
            String currencyfilterfortrans = request.getParameter("currencyfilterfortrans");
            HashSet invoicesList = new HashSet();
            double amountToPay = Double.parseDouble(request.getParameter("amount"));
            HashMap<String, Object> requestParams = getGoodsReceiptMap(request);
            String companyid = sessionHandlerImpl.getCompanyid(request);
            DateFormat df = authHandler.getDateOnlyFormat();
            /*
             *  onlyclaimedamountdue is used for loading the invoices having amount due  = 0 but claimed amount due not equal to 0 
             */
            requestParams.put("onlyclaimedamountdue", true);
             /**
             * Getting record based on JE date rather than document creation date
             * ERM-655.
             */
            requestParams.put("getRecordBasedOnJEDate", true);
            KwlReturnObject result = accGoodsReceiptobj.getGoodsReceipts(requestParams);
            List<GoodsReceipt> list = result.getEntityList();
            KwlReturnObject openingInvoicesResult = accGoodsReceiptobj.getOpeningBalanceInvoices(requestParams);
            List<GoodsReceipt> openingInvoicesList = openingInvoicesResult.getEntityList();
            Iterator itr = openingInvoicesList.iterator();
            while (itr.hasNext()) {                                               // Here, objects of openinginvoices are get from their Id's and added into the normal invoices list.
                KwlReturnObject grResult = accountingHandlerDAOobj.getObject(GoodsReceipt.class.getName(), itr.next().toString());
                GoodsReceipt gr = (GoodsReceipt) grResult.getEntityList().get(0);
                list.add(gr);
            }
            String basecurrencyid = (String) requestParams.get(GCURRENCYID);
            KwlReturnObject curresult = accountingHandlerDAOobj.getObject(KWLCurrency.class.getName(), basecurrencyid);
            KWLCurrency currency = (KWLCurrency) curresult.getEntityList().get(0);
            List ll = null;
            List<String> idsList = new ArrayList<String>();
            for (GoodsReceipt gReceipt : list) {
                idsList.add(gReceipt.getID());
            }
            Map<String, GoodsReceiptInfo> invoiceObjectMap = accGoodsReceiptobj.getGoodsReceiptInfoList(idsList);
            Map<String, JournalEntry> GoodsReceiptJEMap = accGoodsReceiptobj.getGRInvoiceJEList(idsList);
            Map<String, List<ReceiptTermsMap>> GoodsReceiptTermMapList = accGoodsReceiptobj.getInvoiceTermMapGRList(idsList);
            Map<String, List<ReceiptDetail>> receiptDetailsMap = accReceiptDAOobj.getContraPayReceiptFromGReceiptList(idsList);
            Map<String, List<PaymentDetail>> paymentDetailsMap = accVendorPaymentobj.getPaymentsInfoFromGReceiptList(idsList);
            Map<String, List<DebitNoteDetail>> dnDetailsMap = accDebitNoteobj.getDNRowsFromVendorInvoiceList(idsList);
            if ((isEdit && !isCopy) && !StringUtil.isNullOrEmpty(request.getParameter("billId").toString())) {
                KwlReturnObject paymentResult = accountingHandlerDAOobj.getObject(Payment.class.getName(), request.getParameter("billId").toString());
                Payment payment = (Payment) paymentResult.getEntityList().get(0);
                Set<PaymentDetail> paymentDetails = payment.getRows();
                for (PaymentDetail paymentDetail : paymentDetails) {
                    invoicesList.add(paymentDetail.getGoodsReceipt().getID());
                }
            }
            if (!StringUtil.isNullOrEmpty(request.getParameter("direction")) && request.getParameter("direction").toString().equals("ASC")) {
                Collections.sort(list, Collections.reverseOrder(new InvoiceComparator()));                          // List is reveresed if FIFO methos is used.
            } else {
                Collections.sort(list, new InvoiceComparator());
            }
            boolean isInvoiceIsClaimed = false;
            for (GoodsReceipt GR : list) {
                if ((!isEdit || (isEdit) && !(invoicesList.contains(GR.getID()))) && amountToPay != 0) {
                    GoodsReceiptInfo grInfo = invoiceObjectMap.get(GR.getID());
                    JournalEntry je = GoodsReceiptJEMap.get(GR.getID());
                    JSONObject obj = new JSONObject();
                    String currencyid = (GR.getCurrency() == null ? currency.getCurrencyID() : GR.getCurrency().getCurrencyID());
                    double amountdue = 0, amountDueOriginal = 0;
                    double amountDueDummy = 0.0; // Used for calculation purpose only. ;
                    double externalCurrencyRate = 0.0;
                    Date creationDate = null;
                    isInvoiceIsClaimed = GR.getBadDebtType() == Constants.Invoice_Claimed || GR.getBadDebtType() == Constants.Invoice_Recovered;
                    if (isInvoiceIsClaimed) {
                        amountdue = GR.getClaimAmountDue();
                        amountDueOriginal = amountdue;
                        if (!StringUtil.isNullOrEmpty(currencyfilterfortrans) && !StringUtil.isNullOrEmpty(currencyid) && !currencyfilterfortrans.equals(currencyid)) {
                            KwlReturnObject bAmt = accCurrencyDAOobj.getOneCurrencyToOtherModified(requestParams, amountdue, currencyid, currencyfilterfortrans, GR.getCreationDate(), GR.getExternalCurrencyRate());
                            amountdue = (Double) bAmt.getEntityList().get(0);
                        }
                    } else {
                        if (GR.isIsExpenseType()) {                           // Expense Invoice
                            ll = accGoodsReceiptCommon.getExpGRAmountDue(requestParams, GR);
                            amountdue = (Double) ll.get(1);
                            amountDueOriginal = (Double) ll.get(4);
                        } else {                                             // Normal and Opening Invoice

                            if (GR.isIsOpeningBalenceInvoice() && !GR.isNormalInvoice()) {   // Opening Invoice
                                amountdue = GR.getOpeningBalanceAmountDue();       // this amount is converted in Payment Currency Below
                                amountDueOriginal = GR.getOpeningBalanceAmountDue();//this amount is in Invoice currency
                                externalCurrencyRate = GR.getExchangeRateForOpeningTransaction();
                                creationDate = GR.getCreationDate();
                            } else {                                                        // Normal invoice
                                if (Constants.InvoiceAmountDueFlag) {
                                    ll = accGoodsReceiptCommon.getInvoiceDiscountAmountInfo(requestParams, GR);
                                } else {
                                    ll = accGoodsReceiptCommon.getGRAmountDue(requestParams, GR, currencyid, basecurrencyid, GoodsReceiptJEMap.get(GR.getID()),
                                            GoodsReceiptTermMapList.get(GR.getID()), receiptDetailsMap.get(GR.getID()), paymentDetailsMap.get(GR.getID()), dnDetailsMap.get(GR.getID()));
                                }
                                amountdue = (Double) ll.get(1);         // this amount is in payment currency
                                amountDueOriginal = (Double) ll.get(5); //this amount is in Invoice currency
                                externalCurrencyRate = GR.getJournalEntry().getExternalCurrencyRate();
                                creationDate = GR.getCreationDate();
                            }
                        }
                        if (GR.isIsOpeningBalenceInvoice() && !currencyfilterfortrans.equals(currencyid)) {
                            KwlReturnObject bAmt1 = null;
                            if (GR.isConversionRateFromCurrencyToBase()) {// if invoice is opening balance invoice and Conversion rate is taken from user is Currency to base then following method will be called.
                                bAmt1 = accCurrencyDAOobj.getOneCurrencyToOtherModifiedAccordingToCurrencyToBaseExchangeRate(requestParams, amountdue, currencyid, currencyfilterfortrans, creationDate, externalCurrencyRate);
                            } else {
                                bAmt1 = accCurrencyDAOobj.getOneCurrencyToOtherModified(requestParams, amountdue, currencyid, currencyfilterfortrans, creationDate, externalCurrencyRate);
                            }
                            amountdue = (Double) bAmt1.getEntityList().get(0);       // this amount is in payment currency
                        }
                    }
                    amountDueDummy = amountdue;
                    if (amountdue == 0 || amountdue < 0) {
                        continue;
                    } else if (amountdue > amountToPay) {
                        amountDueDummy = amountToPay;
                        amountToPay = 0;
                    } else {
                        amountToPay = amountToPay - amountdue;
                    }
                    obj.put("type", 2);
                    obj.put("enteramount", authHandler.round(amountDueDummy, companyid));
                    obj.put("documentid", GR.getID());
                    obj.put("documentno", GR.getGoodsReceiptNumber());
                    obj.put("amountdue", authHandler.round(amountdue, companyid));
                    obj.put("amountDueOriginal", (amountDueOriginal <= 0) ? 0 : authHandler.round(amountDueOriginal, companyid));
                    obj.put("amountDueOriginalSaved", (amountDueOriginal <= 0) ? 0 : authHandler.round(amountDueOriginal, companyid));
                    obj.put("exchangeratefortransaction", (amountDueOriginal <= 0 && amountdue <= 0) ? 0 : (amountdue / amountDueOriginal));
                    obj.put("currencyidtransaction", currencyid);
                    obj.put("currencysymboltransaction", (GR.getCurrency() == null ? currency.getSymbol() : GR.getCurrency().getSymbol()));
                    try {
                        obj.put("date", df.format(GR.getCreationDate()));
                        obj.put("jeDate", df.format(GR.getJournalEntry() != null ? GR.getJournalEntry().getEntryDate() : GR.getCreationDate()));
                    } catch (Exception pe) {
                        obj.put("date", "");
                    }
                    obj.put(CURRENCYID, currencyid);
                    
                    /*
                     * Get Goods Receipt Custom Data For Payment
                     */
                    accGoodsReceiptServiceDAO.getGoodsReceiptCustomDataForPayment(requestParams, obj, GR, je);
                    invoiceArray.put(obj);
                }
            }
            returnObject.put("Invoices", invoiceArray);
            if (invoiceArray.length() != 0 && amountToPay != 0) { // This is the condition where sum of all the invoices selected is less than amount entered by user. This extra amount will be paid as 'Advance Amount'
                JSONObject obj = new JSONObject();
                obj.put("type", 1);
                obj.put("enteramount", authHandler.round(amountToPay, companyid));
                obj.put("documentno", "");
                obj.put("amountdue", authHandler.round(amountToPay, companyid));
                obj.put("amountDueOriginal", 0);
                obj.put("amountDueOriginalSaved", 0);
                obj.put("exchangeratefortransaction", 1);
                advanceArray.put(obj);
            }
            returnObject.put("AdvancePayment", advanceArray);
            jobj.put(DATA, returnObject);
            jobj.put("count", invoiceArray.length());
            issuccess = true;
        } catch (SessionExpiredException | ServiceException ex) {
            msg = ex.getMessage();
            Logger.getLogger(accGoodsReceiptController.class.getName()).log(Level.SEVERE, null, ex);
        }catch (Exception ex) {
            msg = "accGoodsReceiptController.getGoodsReceipts : " + ex.getMessage();
        } finally {
            try {
                jobj.put(SUCCESS, issuccess);
                jobj.put(MSG, msg);
            } catch (JSONException ex) {
                Logger.getLogger(accGoodsReceiptController.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return new ModelAndView(JSONVIEW, MODEL, jobj.toString());
    }
    
    public ModelAndView getGoodsReceiptsForPayment(HttpServletRequest request, HttpServletResponse response) {

        JSONObject jobj = new JSONObject();
        boolean issuccess = false;
        String msg = "";
        try {
            HashMap<String, Object> requestParams = getGoodsReceiptMap(request);
            /*
             *  onlyclaimedamountdue is used for loading the invoices having amount due  = 0 but claimed amount due not equal to 0 
             */
            requestParams.put("onlyclaimedamountdue", true);
            requestParams.put("getRecordBasedOnJEDate", true);
            KwlReturnObject result = accGoodsReceiptobj.getGoodsReceipts(requestParams);
            List list = result.getEntityList();
            boolean isEdit = request.getParameter("isEdit") == null ? false : Boolean.parseBoolean(request.getParameter("isEdit"));
            requestParams.put("isEdit", isEdit);
            HashSet invoicesList = new HashSet();
            if (isEdit && !StringUtil.isNullOrEmpty(request.getParameter("billId").toString())) {
                KwlReturnObject paymentResult = accountingHandlerDAOobj.getObject(Payment.class.getName(), request.getParameter("billId").toString());
                Payment payment = (Payment) paymentResult.getEntityList().get(0);
                Set<PaymentDetail> paymentDetails = payment.getRows();
                for (PaymentDetail paymentDetail : paymentDetails) {
                    invoicesList.add(paymentDetail.getGoodsReceipt().getID());
                }
            }            
            if (!StringUtil.isNullOrEmpty(request.getParameter("creationDate"))) {
                requestParams.put("creationDate", request.getParameter("creationDate"));
            }
            JSONArray DataJArr = getGoodsReceiptsJsonForPayment(requestParams, list,invoicesList);
            getOpeningBalanceInvoicesJsonArray(request, DataJArr,invoicesList);     //ERP-41122
            int count = DataJArr.length();
            JSONArray pagedJson = DataJArr;
            String start = request.getParameter(START);
            String limit = request.getParameter(LIMIT);
            if (!StringUtil.isNullOrEmpty(start) && !StringUtil.isNullOrEmpty(limit)) {
                pagedJson = StringUtil.getPagedJSON(pagedJson, Integer.parseInt(start), Integer.parseInt(limit));
            }

            jobj.put(DATA, pagedJson);
            jobj.put(COUNT, count);
            issuccess = true;
        } catch (SessionExpiredException | ServiceException ex) {
            msg = ex.getMessage();
            Logger.getLogger(accGoodsReceiptController.class.getName()).log(Level.SEVERE, null, ex);
        }  catch (Exception ex) {
            msg = "accGoodsReceiptController.getGoodsReceipts : " + ex.getMessage();
        } finally {
            try {
                jobj.put(SUCCESS, issuccess);
                jobj.put(MSG, msg);
            } catch (JSONException ex) {
                Logger.getLogger(accGoodsReceiptController.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return new ModelAndView(JSONVIEW, MODEL, jobj.toString());
    }

    public JSONArray getGoodsReceiptsJsonForPayment(HashMap<String, Object> request, List<GoodsReceipt> list, HashSet invoicesList) throws ServiceException {
        JSONArray jArr = new JSONArray();
        try {
            String companyid = (String) request.get(COMPANYID);
            String basecurrencyid = (String) request.get(GCURRENCYID);
            DateFormat df = (DateFormat) request.get(DATEFORMAT);
            String currencyfilterfortrans = (String) request.get("currencyfilterfortrans");
            KwlReturnObject extraprefresult = accountingHandlerDAOobj.getObject(ExtraCompanyPreferences.class.getName(), companyid);
            ExtraCompanyPreferences extraCompanyPreferences = extraprefresult != null ? (ExtraCompanyPreferences) extraprefresult.getEntityList().get(0) : null;
            List ll = null;
            KwlReturnObject curresult = accountingHandlerDAOobj.getObject(KWLCurrency.class.getName(), basecurrencyid);
            KWLCurrency currency = (KWLCurrency) curresult.getEntityList().get(0);
            KwlReturnObject capresult = accountingHandlerDAOobj.getObject(CompanyAccountPreferences.class.getName(), companyid);
            CompanyAccountPreferences preferences = (CompanyAccountPreferences) capresult.getEntityList().get(0);
            String cashAccount = preferences.getCashAccount().getID();
            boolean forMonthWiseInvoice = request.get("forMonthWiseInvoices") != null ? Boolean.parseBoolean(request.get("forMonthWiseInvoices").toString()) : false;
            boolean getOnlyAmountDueInJson = request.get("getOnlyAmountDueInJson") != null ? Boolean.parseBoolean(request.get("getOnlyAmountDueInJson").toString()) : false;
            String months = request.containsKey("months") ? request.get("months").toString() : "";
            KwlReturnObject company = accountingHandlerDAOobj.getObject(Company.class.getName(), companyid);
            Company companyObj = null;
            if(company.getEntityList()!=null){
                companyObj = (Company) company.getEntityList().get(0);
            }
            Set<Integer> monthsSet = new HashSet<Integer>();
            if (forMonthWiseInvoice && !(StringUtil.isNullOrEmpty(months))) {
                String[] monthsArray = months.split(",");
                for (int i = 0; i < monthsArray.length; i++) {
                    monthsSet.add(Integer.parseInt(monthsArray[i]));
                }
            }
            
            List<String> idsList = new ArrayList<String>();
            for (GoodsReceipt gReceipt : list) {
                idsList.add(gReceipt.getID());
            }
            Map<String, JournalEntry> GoodsReceiptJEMap = accGoodsReceiptobj.getGRInvoiceJEList(idsList);
            Map<String, List<ReceiptTermsMap>> GoodsReceiptTermMapList = accGoodsReceiptobj.getInvoiceTermMapGRList(idsList);
            Map<String, List<ReceiptDetail>> receiptDetailsMap = accReceiptDAOobj.getContraPayReceiptFromGReceiptList(idsList);
            Map<String, List<PaymentDetail>> paymentDetailsMap = accVendorPaymentobj.getPaymentsInfoFromGReceiptList(idsList);
            Map<String, List<DebitNoteDetail>> dnDetailsMap = accDebitNoteobj.getDNRowsFromVendorInvoiceList(idsList);

            HashSet invoiceHashSet = invoicesList;
            boolean isInvoiceIsClaimed = false;
            if (list != null && !list.isEmpty()) {
                for (GoodsReceipt gReceipt : list) {
                    if (!Boolean.parseBoolean(request.get("isEdit").toString()) || Boolean.parseBoolean(request.get("isEdit").toString()) && !(invoiceHashSet.contains(gReceipt.getID()))) {
                        JournalEntry je = GoodsReceiptJEMap.get(gReceipt.getID());
                        JournalEntryDetail d = gReceipt.getVendorEntry();
                        Date grDate = gReceipt.getCreationDate();
                        Calendar cal = Calendar.getInstance();
                        cal.setTime(grDate);
                        int grMonth = cal.get(Calendar.MONTH);
                        Date grDueDate = gReceipt.getDueDate();
                        if (forMonthWiseInvoice && !monthsSet.contains(grMonth)) {
                            continue;
                        }
                        String currencyid = (gReceipt.getCurrency() == null ? currency.getCurrencyID() : gReceipt.getCurrency().getCurrencyID());
                        Account account = d.getAccount();
                        double amountdue = 0, amountDueOriginal = 0, amountDueInBase = 0;
                        double currencyToBaseRate = accCurrencyDAOobj.getCurrencyToBaseRate(request, currencyid, gReceipt.getCreationDate());
                        isInvoiceIsClaimed = gReceipt.getBadDebtType() == Constants.Invoice_Claimed || gReceipt.getBadDebtType() == Constants.Invoice_Recovered;
                        if (isInvoiceIsClaimed) {
                            amountdue = gReceipt.getClaimAmountDue();
                            amountDueOriginal = amountdue;
                            // Converting the amount due into payment currency
                            if (!StringUtil.isNullOrEmpty(currencyfilterfortrans) && !StringUtil.isNullOrEmpty(currencyid) && !currencyfilterfortrans.equals(currencyid)) {
                                KwlReturnObject bAmt = accCurrencyDAOobj.getOneCurrencyToOtherModified(request, amountdue, currencyid, currencyfilterfortrans, gReceipt.getCreationDate(), gReceipt.getExternalCurrencyRate());
                                amountdue = (Double) bAmt.getEntityList().get(0);
                            }
                        } else {
                            if (gReceipt.isIsExpenseType()) {
                                ll = accGoodsReceiptCommon.getExpGRAmountDue(request, gReceipt);
                                amountdue = (Double) ll.get(1);
                                amountDueOriginal = (Double) ll.get(4);
                            } else {
                                if (Constants.InvoiceAmountDueFlag) {
                                    ll = accGoodsReceiptCommon.getInvoiceDiscountAmountInfo(request, gReceipt);
                                    amountdue = (Double) ll.get(1);
                                    amountDueOriginal = (Double) ll.get(5);
                                } else {
                                    ll = accGoodsReceiptCommon.getGRAmountDue(request, gReceipt, currencyid, basecurrencyid, GoodsReceiptJEMap.get(gReceipt.getID()),
                                            GoodsReceiptTermMapList.get(gReceipt.getID()), receiptDetailsMap.get(gReceipt.getID()), paymentDetailsMap.get(gReceipt.getID()), dnDetailsMap.get(gReceipt.getID()));
                                    amountdue = (Double) ll.get(1);
                                    amountDueOriginal = (Double) ll.get(5);
                                }
                            }
                        }
                        JSONObject obj = new JSONObject();
                        //For getting amountdue [PS]
                        amountdue = authHandler.round(amountdue, companyid);
                        amountDueInBase = amountdue;
                        if (je.getExternalCurrencyRate() != 0) {
                            amountDueInBase = amountDueOriginal / je.getExternalCurrencyRate();
                        } else if (currencyToBaseRate != 0) {
                            amountDueInBase = amountDueOriginal / currencyToBaseRate;
                        }

                        amountDueInBase = authHandler.round(amountDueInBase, companyid);
                        if (account.getID().equals(cashAccount)) {
                            obj.put(AMOUNTDUE, 0); //
                            obj.put("amountDueOriginal", 0);
                            obj.put("amountDueOriginalSaved", 0);
                        } else {
                            obj.put(AMOUNTDUE, amountdue); //
                            obj.put("amountDueOriginal", (amountDueOriginal <= 0) ? 0 : authHandler.round(amountDueOriginal, companyid));
                            obj.put("amountDueOriginalSaved", (amountDueOriginal <= 0) ? 0 : authHandler.round(amountDueOriginal, companyid));
                            obj.put("exchangeratefortransaction", (amountDueOriginal <= 0 && amountdue <= 0) ? 0 : (amountdue / amountDueOriginal));//
                        }
                        obj.put(AMOUNTDUEINBASE, amountDueInBase);
                        obj.put(DATE, df.format(grDate));
                        /**
                         * Passing JE date in response for validating date on JS
                         * Side ERM-655.
                         */
                        obj.put("jeDate", je != null ? df.format(je.getEntryDate()) : df.format(gReceipt.getCreationDate()));
                        JSONObject jObj = null;
                        double discount = 0.0;
                        double discountValue = 0.0;
                        int applicableDays = -1;
                        boolean discountType = false;
                        if (!StringUtil.isNullOrEmpty(extraCompanyPreferences.getColumnPref())) {
                            jObj = new JSONObject((String) extraCompanyPreferences.getColumnPref());
                            if (jObj.has(Constants.DISCOUNT_ON_PAYMENT_TERMS) && jObj.get(Constants.DISCOUNT_ON_PAYMENT_TERMS) != null && jObj.optBoolean(Constants.DISCOUNT_ON_PAYMENT_TERMS, false)) {
                                Term term = gReceipt.getTermid();
                                if (term != null && term.getDiscountName() != null) {
                                    DiscountMaster discountMaster = term.getDiscountName();
                                    discountValue = discountMaster.getValue();
                                    discountType = discountMaster.isDiscounttype();
                                    applicableDays = term.getApplicableDays();
                                }
                            }
                        }
                        if (!getOnlyAmountDueInJson) {
                            obj.put(BILLID, gReceipt.getID());
                            obj.put(BILLNO, gReceipt.getGoodsReceiptNumber());
                            obj.put(CURRENCYID, currencyid);
                            obj.put("currencyidtransaction", currencyid);
                            obj.put("currencysymboltransaction", (gReceipt.getCurrency() == null ? currency.getSymbol() : gReceipt.getCurrency().getSymbol()));
                            obj.put("accountid", gReceipt.getAccount() == null ? "" : gReceipt.getAccount().getID());
                            obj.put("claimedDate", gReceipt.getDebtClaimedDate() == null ? "" : df.format(gReceipt.getDebtClaimedDate()));
                            obj.put("isClaimedInvoice", (gReceipt.getBadDebtType() == 1 || gReceipt.getBadDebtType() == 2));// for Malasian Company
                            obj.put(Constants.SUPPLIERINVOICENO, gReceipt.getSupplierInvoiceNo() != null ? gReceipt.getSupplierInvoiceNo() : "");
                            //for getting total invoice amount [PS]
                            if (gReceipt.isIsExpenseType()) {
                                obj.put(AMOUNT, (Double) ll.get(0));//for expense invoice                        
                            } else {
                                obj.put(AMOUNT, d.getAmount()); //actual invoice amount   /*/
                            }
                            obj.put(ACCOUNTNAMES, (gReceipt.getAccount() == null) ? "" : gReceipt.getAccount().getName());
                            if(companyObj!=null && Integer.toString(Constants.indian_country_id).equals(companyObj.getCountry().getID())){ // only for indian company
                                obj.put("invType", (gReceipt.getExpenserows().size()>0)?"0" :"1"); // 0 = expence Type & 1 = inventory Type
                            }else{
                                obj.put("invType","0"); // 0 = inventory Type
                            }
                            obj.put("discountvalue", discountValue);
                            obj.put("discounttype", discountType ? Integer.parseInt(Constants.DISCOUNT_MASTER_TYPE_PERCENTAGE) : Integer.parseInt(Constants.DISCOUNT_MASTER_TYPE_FLAT));
                            obj.put("applicabledays", applicableDays);
                            obj.put("grcreationdate", grDate);
                            obj.put("grduedate", grDueDate);
                        }
                        if (gReceipt.isImportService()) {
                            obj.put(Constants.RCMApplicable, gReceipt.isImportService());
                        }
                        /*
                         * Get Goods Receipt Custom Data For Payment
                         */
                        accGoodsReceiptServiceDAO.getGoodsReceiptCustomDataForPayment(request, obj, gReceipt, je);
                        jArr.put(obj);
                    }
                }
            }

        } catch (Exception ex) {
            throw ServiceException.FAILURE("accGoodsReceiptController.getGoodsReceiptsJson : " + ex.getMessage(), ex);
        }
        return jArr;
    }
    
     public void exportGoodsReceiptOrderJasperReport(HttpServletRequest request, HttpServletResponse response) {//buildmate company
        try {
            List jasperPrint = accExportOtherReportsServiceDAOobj.exportGoodsReceiptOrderJasperReport(request, response);
            JRPdfExporter exp = new JRPdfExporter();
            exp.setParameter(JRExporterParameter.JASPER_PRINT_LIST, jasperPrint);
            exp.setParameter(JRPdfExporterParameter.OUTPUT_STREAM, response.getOutputStream());
            exp.exportReport();
        } catch (Exception e) {
            Logger.getLogger(accGoodsReceiptController.class.getName()).log(Level.SEVERE, null, e);
        }
    }
     public void exportDiamondAviationGoodsReceiptOrderJasperReport(HttpServletRequest request, HttpServletResponse response) {//buildmate company
        try {
            List jasperPrint = null;
            if("0".equals(request.getParameter("type"))) {
                jasperPrint = accExportOtherReportsServiceDAOobj.exportDiamondAviationPartsReceiptNote(request, response);
            }else if("1".equals(request.getParameter("type"))) {
                jasperPrint = accExportOtherReportsServiceDAOobj.exportDiamondAviationGoodsReceiptScrapReportJasper(request, response);
            } else {
                jasperPrint = accExportOtherReportsServiceDAOobj.exportDiamondAviationGoodsReceiptOrderJasperReport(request, response);
            }
            JRPdfExporter exp = new JRPdfExporter();
            exp.setParameter(JRExporterParameter.JASPER_PRINT_LIST, jasperPrint);
            exp.setParameter(JRPdfExporterParameter.OUTPUT_STREAM, response.getOutputStream());
            exp.exportReport();
        } catch (Exception e) {
            Logger.getLogger(accGoodsReceiptController.class.getName()).log(Level.SEVERE, null, e);
        }
    }
     
     public void exportVendorInvoiceRegisterReport(HttpServletRequest request, HttpServletResponse response) {//buildmate company
        List jasperPrint = null;
        boolean isDetailPDF = false;
         try {
            isDetailPDF = request.getParameter("isLandscape")!=null?Boolean.parseBoolean(request.getParameter("isLandscape")):false;
            if(isDetailPDF){
                jasperPrint = accExportOtherReportsServiceDAOobj.exportVendorInvoiceRegisterReport(request, response,new JSONArray());
            } else {
                jasperPrint = accExportOtherReportsServiceDAOobj.exportVendorInvoiceRegisterSummaryReport(request, response);
            }
            JRPdfExporter exp = new JRPdfExporter();
            exp.setParameter(JRExporterParameter.JASPER_PRINT_LIST, jasperPrint);
            exp.setParameter(JRPdfExporterParameter.OUTPUT_STREAM, response.getOutputStream());
            exp.exportReport();
        } catch (Exception e) {
            Logger.getLogger(accGoodsReceiptController.class.getName()).log(Level.SEVERE, null, e);
        }
    }
    public void exportVendorInvoiceRegisterXlsReport(HttpServletRequest request, HttpServletResponse response) {//buildmate company
        try {
            String companyid = sessionHandlerImpl.getCompanyid(request);
            JSONArray temArray = new JSONArray();
            List jasperPrint = accExportOtherReportsServiceDAOobj.exportVendorInvoiceRegisterReport(request, response, temArray);
            accExportOtherReportsServiceDAOobj.exportXlsReport(response, "Purchase Invoice", "Purchase Invoice", temArray, companyid);
        } catch (Exception e) {
            Logger.getLogger(accGoodsReceiptController.class.getName()).log(Level.SEVERE, null, e);
        }
    }
    private class InvoiceComparator implements Comparator {

        @Override
        public int compare(Object o1, Object o2) {

            int result = 0;
            Calendar calendar= Calendar.getInstance();
            GoodsReceipt entry1 = (GoodsReceipt) o1;
            GoodsReceipt entry2 = (GoodsReceipt) o2;
            long invoice1_date=0;
            long invoice2_date=0;
            if(entry1.isIsOpeningBalenceInvoice() && ! entry1.isNormalInvoice()){   // For opening invoices, date is saved as 'Creation date'
                calendar.setTime(entry1.getCreationDate());
                invoice1_date= calendar.getTimeInMillis();
            } else {                                                                // For Normal invoices, date is taken from its journal entry.
                calendar.setTime(entry1.getCreationDate());
                invoice1_date=calendar.getTimeInMillis();
            }
            if(entry2.isIsOpeningBalenceInvoice() && ! entry2.isNormalInvoice()){   // For opening invoices, date is saved as 'Creation date'
                calendar.setTime(entry2.getCreationDate());
                invoice2_date= calendar.getTimeInMillis();
            } else {                                                                // For Normal invoices, date is taken from its journal entry.
                calendar.setTime(entry2.getCreationDate());
                invoice2_date=calendar.getTimeInMillis();
            }
            if (invoice1_date < invoice2_date) {                                 // Here if sign '>' is changed to '<' or vice versa , order of soring will be reverted.
                result = 1;
            } else if (invoice1_date > invoice2_date) {
                result = -1;
            } else {
                result = 0;
            }

            return result;
        }
    }
       public ModelAndView getAllUninvoicedConsignmentDetails(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        boolean issuccess = false;
        String msg = "";
        try {
            jobj = getAllUninvoicedConsignmentDetails(request);
            issuccess = true;
        } catch (Exception ex) {
            msg = "" + ex.getMessage();
            Logger.getLogger(accGoodsReceiptController.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                jobj.put("success", issuccess);
                jobj.put("msg", msg);
            } catch (JSONException ex) {
                Logger.getLogger(accGoodsReceiptController.class.getName()).log(Level.SEVERE, null, ex);
}
        }
        return new ModelAndView("jsonView", "model", jobj.toString());
    }

    public JSONObject getAllUninvoicedConsignmentDetails(HttpServletRequest request) throws SessionExpiredException, ServiceException, ParseException {  //, HashMap<String, Integer> fieldMap
        JSONObject jobj = new JSONObject();
        try {
            JSONArray jArr = new JSONArray();
           DateFormat df = (DateFormat)authHandler.getDateOnlyFormat();
           String companyId=sessionHandlerImpl.getCompanyid(request);
            HashMap requestParams =getGoodsReceiptMap(request);
            requestParams.put("companyid",companyId);
                KwlReturnObject result = accGoodsReceiptobj.getAllUninvoicedConsignmentDetails(requestParams);
                Iterator itr = result.getEntityList().iterator();
                int i = 0;
                while (itr.hasNext()) {
                    
                Object[] row = (Object[]) itr.next();

                String productid = (String) row[0];
                String productDesc = (row[5]!=null)?(String) row[5]:"";
                double actualquantity = (Double) row[1];
                double baseuomquantity = (Double) row[3];
                double baseuomdeliveredquantity = (Double) row[4];
                double invQuantity=0;
                double returnQuantity=0;
                  Product product=null;
                    if (!StringUtil.isNullOrEmpty(productid)){
                        KwlReturnObject proresult = accountingHandlerDAOobj.getObject(Product.class.getName(), productid);
                       product = (Product) proresult.getEntityList().get(0);
                    }
                    JSONObject obj = new JSONObject();

                    obj.put("productid", product.getID());
                    obj.put("productname", product.getName());
                    obj.put("invstore", "");
                    obj.put("invlocation", "");
                    obj.put("isAsset", "");
                    Calendar cal = Calendar.getInstance();
                    obj.put("unitname", product.getUnitOfMeasure() == null ? "" : product.getUnitOfMeasure().getNameEmptyforNA());
                    obj.put("desc", StringUtil.isNullOrEmpty(productDesc)? (!StringUtil.isNullOrEmpty(product.getDescription()) ? product.getDescription() : ""):productDesc);
                    obj.put("type", product.getProducttype() == null ? "" : product.getProducttype().getName());
                    obj.put("pid", product.getProductid());

                    HashMap<String, Object> prodParams = new HashMap<String, Object>();
                    prodParams.put("productid", productid);
                    prodParams.put("vendorid", request.getParameter("vendorid"));
                    prodParams.put("companyid", companyId);
                    
                    if (!StringUtil.isNullOrEmpty(productid)) {
                        returnQuantity = accGoodsReceiptobj.getReturnQuantity(prodParams);
                        invQuantity = accGoodsReceiptobj.getGRQuantityWhoseInvoiceCreated(prodParams);
                    }
                    obj.put("quantity", (baseuomdeliveredquantity - (returnQuantity+invQuantity)));
                    obj.put("dquantity", (baseuomdeliveredquantity - (returnQuantity+invQuantity)));
                    obj.put("uomid", product.getUnitOfMeasure() != null ? product.getUnitOfMeasure().getID() : "");
                    obj.put("baseuomquantity", (baseuomquantity - (returnQuantity+invQuantity)));
                    obj.put("description", !StringUtil.isNullOrEmpty(product.getDescription()) ? product.getDescription() : "");
                    obj.put("discountispercent", 1);
                    obj.put("prdiscount", 0);
                    obj.put("isLocationForProduct", product.isIslocationforproduct());
                    obj.put("isWarehouseForProduct", product.isIswarehouseforproduct());
                    obj.put("isRowForProduct", product.isIsrowforproduct());
                    obj.put("isRackForProduct", product.isIsrackforproduct());
                    obj.put("isBinForProduct", product.isIsbinforproduct());
                    obj.put("isBatchForProduct", product.isIsBatchForProduct());
                    obj.put("isSerialForProduct", product.isIsSerialForProduct());
                    obj.put("isRecyclable", product.isRecyclable());
                    //Set rate to default product price when invoice is created using DO.
                    String curdatestr = df.format(cal.getTime());
                    Date curDate = df.parse(curdatestr);
                    KwlReturnObject rateResult = accProductObj.getProductPrice(product.getID(), true, curDate, "", "");
                    Object temp = rateResult.getEntityList().get(0);
                    if (temp != null) {
                        obj.put("rate", temp.toString());
                    } else {
                        obj.put("rate", 0);
                    }
                    obj.put("baseuomrate", 1);


                    if ((actualquantity - (returnQuantity+invQuantity)) > 0) {
                        jArr.put(obj);
                    }
                    }
                jobj.put("data", jArr);
        } catch (JSONException je) {
            throw ServiceException.FAILURE(je.getMessage(), je);
        }
        return jobj;
    }
      public ModelAndView getMonthlyVendorAgedPayable(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        boolean issuccess = false;
        String msg = "";
        try{
            JSONArray invJArr = new JSONArray();
            invJArr = accGoodsReceiptServiceDAO.getMonthlyVendorAgedPayableMerged(request);
            String start = request.getParameter("start");
            String limit = request.getParameter("limit");
            JSONArray jArr = new JSONArray(), temp = invJArr;
            JSONObject month=invJArr.getJSONObject(invJArr.length()-1);
            if (!StringUtil.isNullOrEmpty(start) && !StringUtil.isNullOrEmpty(limit)) {
                int st = Integer.parseInt(start);
                int ed = Math.min(temp.length(), st + Integer.parseInt(limit));
                for (int i = st; i < ed; i++) {
                    jArr.put(temp.getJSONObject(i));
                }
            }
            if(Integer.parseInt(limit) <=jArr.length()){
                jArr.put(month);
            }
            jobj.put("data", jArr);
            jobj.put("count", invJArr.length()-1);
            issuccess = true;
        } catch (SessionExpiredException ex) {
            Logger.getLogger(accGoodsReceiptControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
            issuccess = false;
            msg = ex.getMessage();
        } catch (Exception ex) {
            issuccess = false;
            msg = "accGoodsReceiptController.MonthlyCustomerAgedReceivable : "+ex.getMessage();
        } finally {
            try {
                jobj.put("success", issuccess);
                jobj.put("msg", msg);
            } catch (JSONException ex) {
                Logger.getLogger(accGoodsReceiptController.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return new ModelAndView("jsonView", "model", jobj.toString());
    }
    private JSONArray Calculatesubtotalandtotal(HttpServletRequest request, JSONArray invJArr) {
        String fileType = request.getParameter("filetype");
        boolean isSummary = request.getParameter("isSummary") != null ? Boolean.parseBoolean(request.getParameter("isSummary")) : false;
        try {
            if ((StringUtil.equal(fileType, "csv") || StringUtil.equal(fileType, "xls") || StringUtil.equal(fileType, "print"))) {
                if (isSummary) {
                    double total = 0;
                    for (int i = 0; i < invJArr.length(); i++) {
                        total = total + (Double) invJArr.getJSONObject(i).get("totalinbase");
                    }
                    JSONObject obj1 = new JSONObject();
                    obj1.put("totalinbase", total);
                    obj1.put("total", "Total");
                    invJArr.put(obj1);
                } else {
                    String sortKey = "type";
                    invJArr = AccountingManager.sortJsonArrayOnStringValues(invJArr,sortKey, true);
                    sortKey = "personname";
                    invJArr = AccountingManager.sortJsonArrayOnStringValues(invJArr,sortKey, true);
                    double customertotal = 0;
                    double total = 0;
                    String temp = "";
                    JSONArray array = new JSONArray();
                    for (int i = 0; i < invJArr.length(); i++) {
                        JSONObject jSONObject = invJArr.getJSONObject(i);
                        String id = jSONObject.getString("personid");
                        if (!StringUtil.isNullOrEmpty(temp)) {      // not first record
                            if (id.equalsIgnoreCase(temp)) {        // same vendor/customer 
                                customertotal = customertotal + jSONObject.getDouble("total");
                                array.put(jSONObject);
                            } else {        // customer sequence break
                                JSONObject jSONObject1 = new JSONObject();
                                jSONObject1.put("termname", "Subtotal");
                                jSONObject1.put("amountdueinbase", customertotal);
                                array.put(jSONObject1);             // put subtotal row 
                                customertotal = jSONObject.getDouble("total");
                                temp = jSONObject.getString("personid");
                                array.put(jSONObject);
                            }
                        } else {            // first object frm array
                            temp = jSONObject.getString("personid");
                            customertotal = customertotal + jSONObject.getDouble("total");
                            array.put(jSONObject);
                        }
                        if (i == invJArr.length() - 1) {       // put last record with its total
                            JSONObject jSONObject1 = new JSONObject();
                            jSONObject1.put("termname", "Subtotal");
                            jSONObject1.put("amountdueinbase", customertotal);
                            array.put(jSONObject1);             // put subtotal row 
                        }
                        total = total + jSONObject.getDouble("total");
                    }
                    JSONObject jSONObject2 = new JSONObject();
                    jSONObject2.put("termname", "Total");
                    jSONObject2.put("amountdueinbase", total);          // put final total
                    array.put(jSONObject2);
                    invJArr = array;
                }
            }
        } catch (Exception ex) {
            Logger.getLogger(accGoodsReceiptControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
        }
        return invJArr;
    }
        public ModelAndView exportMonthlyVendorAgedPayable(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        String view = "jsonView_ex";
        try {
            JSONArray invJArr = new JSONArray();
            invJArr = accGoodsReceiptServiceDAO.getMonthlyVendorAgedPayableMerged(request);
            invJArr=Calculatesubtotalandtotal(request,invJArr);  //Catculate total and subtotal for export csv/print/xls
            jobj.put("data", invJArr);
            
            String fileType = request.getParameter("filetype");
            if (StringUtil.equal(fileType, "csv") || StringUtil.equal(fileType, "xls")) {
                exportDaoObj.processRequest(request, response, jobj);
            } else if (StringUtil.equal(fileType, "print")) {
                String GenerateDate = authHandler.getDateFormatter(request).format(new Date());
                jobj.put("GenerateDate", GenerateDate);
                view = "jsonView-empty";
                exportDaoObj.processRequest(request, response, jobj);
            } else {
                jobj.put("months",invJArr.getJSONObject(invJArr.length()-1).getJSONArray("months"));
                boolean isSummary=request.getParameter("isSummary")!=null?Boolean.parseBoolean(request.getParameter("isSummary")):false;
                if(isSummary){
                    accGoodsReceiptServiceDAO.exportMonthlyAgedPayableSummarized(request,response,jobj);
                }else{
                    accGoodsReceiptServiceDAO.exportMonthlyAgedPayableDetails(request,response,jobj);
                }
            }
        } catch (SessionExpiredException ex) {
            Logger.getLogger(accGoodsReceiptControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            Logger.getLogger(accGoodsReceiptControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
        }
        return new ModelAndView(view, "model", jobj.toString());
    }
        
    public ModelAndView unlinkPurchaseInvoiceDocuments(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        String msg = "";
        boolean isPItoMP = false;
        boolean issuccess = false;
        String linkedTransaction="";
        boolean deleteRoundingJE = false;//by unlinking of transactions if Amount due get affected then this variable bocomes true.
        try {
            String billid = (!StringUtil.isNullOrEmpty(request.getParameter("billid"))) ? (String) request.getParameter("billid") : "";
            String pigoodsReceiptNo = "", purchaseOrderNo = "", vendorQuotationNo = "", purchaseReturnNo = "", debitNoteNo = "", advanceMP = "", paymentNo = "", goodsReceiptNo = "";
            JSONArray documentArr = new JSONArray(request.getParameter("data"));
            String companyid = sessionHandlerImpl.getCompanyid(request);
             boolean cnAgainstInv=false;

            if (!StringUtil.isNullOrEmpty(billid) && documentArr != null && documentArr.length() > 0) {
                HashMap<String, Object> linkingrequestParams = new HashMap<String, Object>();
                KwlReturnObject result = accountingHandlerDAOobj.getObject(GoodsReceipt.class.getName(), billid);
                GoodsReceipt goodsReceipt = (GoodsReceipt) result.getEntityList().get(0);
                String invNo = goodsReceipt.getGoodsReceiptNumber();

                HashMap<String, Object> requestParams = new HashMap<String, Object>();
                ArrayList filter_names = new ArrayList(), filter_params = new ArrayList();
                filter_names.add("goodsReceipt.ID");
                filter_params.add(goodsReceipt.getID());
                requestParams.put("filter_names", filter_names);
                requestParams.put("filter_params", filter_params);
                for (int i = 0; i < documentArr.length(); i++) {

                    JSONObject document = documentArr.getJSONObject(i);
                    int type = document.optInt("type", -1);
                    int cntype = document.optInt("cntype", -1);
                    String linkedDocumentID = document.optString("billid", "");

                    if (!StringUtil.isNullOrEmpty(billid) && type != -1) {
                        if (cntype == 5) {
                            cnAgainstInv = true;
                            filter_names.clear();
                            filter_params.clear();
                            filter_names.add("creditNote.ID");
                            filter_params.add(linkedDocumentID);
                            filter_names.add("videtails.ID");
                            filter_params.add(billid);
                            requestParams.put("filter_names", filter_names);
                            requestParams.put("filter_params", filter_params);

                            KwlReturnObject invDetailsResult = accCreditNoteDAOobj.getCreditNoteDetailsGst(requestParams);
                            List<CreditNoteAgainstVendorGst> dndetails = invDetailsResult.getEntityList();
                            KwlReturnObject result1 = accountingHandlerDAOobj.getObject(CreditNote.class.getName(), linkedDocumentID);
                            CreditNote creditNote = (CreditNote) result1.getEntityList().get(0);
                            /*
                             * Credit Note against Purchase Invoice cannot be
                             * unliked
                             */
                            if (creditNote != null && creditNote.getCntype() == 5) {
                                linkedTransaction += "<b>" + creditNote.getCreditNoteNumber() + "</b> ,";
                                continue;
                            }
                        }else if (type == 0) {//Type=0 PI->GR
                            KwlReturnObject doDetailsResult = accGoodsReceiptobj.getGRDetailsFromPI(linkedDocumentID, billid, companyid);
                            List<GoodsReceiptOrderDetails> grOrderdetails = doDetailsResult.getEntityList();
                            if (grOrderdetails != null) {
                                for (GoodsReceiptOrderDetails groDetails : grOrderdetails) {
                                    if (groDetails.getVidetails() != null) {
                                        GoodsReceiptDetail goodsreceipDetail = groDetails.getVidetails();
                                       
                                        /*Updating isLineItemClosed & isPOClosed to false if PI(linked with PO) is unlinked from GR i.e PO->PI->GR*/
                                        if (goodsreceipDetail.getPurchaseorderdetail() != null) {
                                            goodsreceipDetail.getPurchaseorderdetail().setIsLineItemClosed(false);
                                            goodsreceipDetail.getPurchaseorderdetail().getPurchaseOrder().setIsPOClosed(false);
                                            /*Updating balance quantity of PO, if PI is linked with PO */
                                            HashMap poMap = new HashMap();
                                            poMap.put("podetails", goodsreceipDetail.getPurchaseorderdetail().getID());
                                            poMap.put("companyid", companyid);
                                            poMap.put("balanceqty", groDetails.getDeliveredQuantity());
                                            poMap.put("add", true);
                                            accCommonTablesDAO.updatePurchaseOrderStatus(poMap);
                                        }
                                        groDetails.setVidetails(null);
                                        goodsreceipDetail.getGoodsReceipt().setIsOpenInGR(true);
                                        if (pigoodsReceiptNo.indexOf(groDetails.getGrOrder().getGoodsReceiptOrderNumber()) == -1) {
                                            pigoodsReceiptNo += groDetails.getGrOrder().getGoodsReceiptOrderNumber() + ",";
                                        }
                                    }
                                }
                                linkingrequestParams.clear();
                                linkingrequestParams.put("billid", billid);
                                linkingrequestParams.put("linkedTransactionID", linkedDocumentID);
                                linkingrequestParams.put("type", type);
                                linkingrequestParams.put("unlinkflag", true);
                                accGoodsReceiptobj.deleteLinkingInformationOfPI(linkingrequestParams);//Deleting linking information 
                            }
                        } else if (type == 1) {//Type=1 GR->PI
                             KwlReturnObject doDetailsResult = accGoodsReceiptobj.getInvoiceDetailsFromGR(linkedDocumentID, billid, companyid);
                            List<GoodsReceiptDetail> invoicedetails = doDetailsResult.getEntityList();
                            if (invoicedetails != null) {
                                for (GoodsReceiptDetail invoiceDetail : invoicedetails) {
                                    if (invoiceDetail.getGoodsReceiptOrderDetails() != null) {
                                        GoodsReceiptOrderDetails goodsreceiptOrderDetail = invoiceDetail.getGoodsReceiptOrderDetails();
                                        invoiceDetail.setGoodsReceiptOrderDetails(null);
                                        goodsreceiptOrderDetail.getGrOrder().setIsOpenInPI(true);
                                        if (goodsReceiptNo.indexOf(goodsreceiptOrderDetail.getGrOrder().getGoodsReceiptOrderNumber()) == -1) {
                                            goodsReceiptNo += goodsreceiptOrderDetail.getGrOrder().getGoodsReceiptOrderNumber() + ",";
                                        }
                                    }
                                }
                                linkingrequestParams.clear();
                                linkingrequestParams.put("billid", billid);
                                linkingrequestParams.put("linkedTransactionID", linkedDocumentID);
                                linkingrequestParams.put("type", type);
                                linkingrequestParams.put("unlinkflag", true);
                                accGoodsReceiptobj.deleteLinkingInformationOfPI(linkingrequestParams);//Deleting linking information

                            }
                        } else if (type == 2) { //PO->PI
                            if (goodsReceipt.isIsExpenseType()) {
                                ExpensePODetail expensePODetails = null;
                                KwlReturnObject expensePIResult = accGoodsReceiptobj.getExpensePIDetailsFromPO(billid, linkedDocumentID, companyid);
                                List<ExpenseGRDetail> expenseGRDetails = expensePIResult.getEntityList();
                                if (expenseGRDetails != null && !expenseGRDetails.isEmpty()) {
                                    for (ExpenseGRDetail gRDetail : expenseGRDetails) {
                                        if (gRDetail.getExpensePODetail() != null) {
                                            expensePODetails = gRDetail.getExpensePODetail() ;
                                            gRDetail.setExpensePODetail(null);
                                            expensePODetails.getPurchaseOrder().setIsOpen(true);
                                            /**
                                             * when unlink Expense Purchase
                                             * Invoice From 'Expense PO' need to
                                             * update Balance Amount.
                                             */
                                            expensePODetails.setBalAmount(expensePODetails.getBalAmount() + gRDetail.getAmount());
                                            if (purchaseOrderNo.indexOf(expensePODetails.getPurchaseOrder().getPurchaseOrderNumber()) == -1) {
                                                purchaseOrderNo += expensePODetails.getPurchaseOrder().getPurchaseOrderNumber() + ",";
                                            }
                                        }
                                    }
                                    
                                    KwlReturnObject resultso = accGoodsReceiptobj.checkPOLinkedWithAnotherPI(expensePODetails.getPurchaseOrder().getID());

                                    Long count = (Long) resultso.getEntityList().get(0);
                                    if (count == 1) {
                                        expensePODetails.getPurchaseOrder().setLinkflag(0);
                                    }
                                    linkingrequestParams.clear();
                                    linkingrequestParams.put("billid", billid);
                                    linkingrequestParams.put("linkedTransactionID", linkedDocumentID);
                                    linkingrequestParams.put("type", type);
                                    linkingrequestParams.put("unlinkflag", true);
                                    accGoodsReceiptobj.deleteLinkingInformationOfPI(linkingrequestParams);//Deleting linking information  
                                }
                            } else {
                                PurchaseOrderDetail purchaseOrderDetails = null;
                                KwlReturnObject doDetailsResult = accGoodsReceiptobj.getPIDetailsFromPO(billid, linkedDocumentID, companyid);
                                List<GoodsReceiptDetail> goodsReceiptDetails = doDetailsResult.getEntityList();
                                if (goodsReceiptDetails != null) {
                                    for (GoodsReceiptDetail grDetails : goodsReceiptDetails) {
                                        if (grDetails.getPurchaseorderdetail() != null) {
                                            purchaseOrderDetails = grDetails.getPurchaseorderdetail();

                                       /*Updating isLineItemClosed & isPOClosed flag to false if PI linked with PO is linked with GR is unlinked from PO */
                                            KwlReturnObject doresult = accPurchaseOrderobj.checkWhetherPOIsUsedInGROrNot(purchaseOrderDetails.getID(), companyid);
                                            List list1 = doresult.getEntityList();
                                            if (list1.size() > 0) {
                                                purchaseOrderDetails.getPurchaseOrder().setIsPOClosed(false);
                                                purchaseOrderDetails.setIsLineItemClosed(false);

                                            /*Updating balance quantity of PO, if PI is linked with PO and PI is linked with GR */
                                                String grOrderDetailId = (String) doresult.getEntityList().get(0);
                                                result = accountingHandlerDAOobj.getObject(GoodsReceiptOrderDetails.class.getName(), grOrderDetailId);
                                                GoodsReceiptOrderDetails groDetails = (GoodsReceiptOrderDetails) result.getEntityList().get(0);

                                                HashMap poMap = new HashMap();
                                                poMap.put("podetails", purchaseOrderDetails.getID());
                                                poMap.put("companyid", companyid);
                                                poMap.put("balanceqty", groDetails.getDeliveredQuantity());
                                                poMap.put("add", true);
                                                accCommonTablesDAO.updatePurchaseOrderStatus(poMap);
                                            }
                                            grDetails.setPurchaseorderdetail(null);
                                            purchaseOrderDetails.getPurchaseOrder().setIsOpen(true);
                                            if (purchaseOrderNo.indexOf(purchaseOrderDetails.getPurchaseOrder().getPurchaseOrderNumber()) == -1) {
                                                purchaseOrderNo += purchaseOrderDetails.getPurchaseOrder().getPurchaseOrderNumber() + ",";
                                            }
                                        }
                                    }
                                    KwlReturnObject resultso = accGoodsReceiptobj.checkPOLinkedWithAnotherPI(purchaseOrderDetails.getPurchaseOrder().getID());

                                    Long count = (Long) resultso.getEntityList().get(0);
                                    if (count == 1) {
                                        purchaseOrderDetails.getPurchaseOrder().setLinkflag(0);
                                    }
                                    linkingrequestParams.clear();
                                    linkingrequestParams.put("billid", billid);
                                    linkingrequestParams.put("linkedTransactionID", linkedDocumentID);
                                    linkingrequestParams.put("type", type);
                                    linkingrequestParams.put("unlinkflag", true);
                                    accGoodsReceiptobj.deleteLinkingInformationOfPI(linkingrequestParams);//Deleting linking information  
                                }
                            }

                        } else if (type == 5) {//VQ->PI
                            VendorQuotationDetail vendorQuotationDetails = null;
                            KwlReturnObject doDetailsResult = accGoodsReceiptobj.getPIDetailsFromVQ(billid, linkedDocumentID, companyid);
                            List<GoodsReceiptDetail> goodsReceiptDetails = doDetailsResult.getEntityList();
                            if (goodsReceiptDetails != null) {
                                for (GoodsReceiptDetail grDetails : goodsReceiptDetails) {
                                    if (grDetails.getVendorQuotationDetail() != null) {
                                        vendorQuotationDetails = grDetails.getVendorQuotationDetail();
                                        grDetails.setVendorQuotationDetail(null);
                                        vendorQuotationDetails.getVendorquotation().setIsOpen(true);
                                        if (vendorQuotationNo.indexOf(vendorQuotationDetails.getVendorquotation().getQuotationNumber()) == -1) {
                                            vendorQuotationNo += vendorQuotationDetails.getVendorquotation().getQuotationNumber() + ",";
                                        }
                                    }
                                }
                                KwlReturnObject resultso = accGoodsReceiptobj.checkVQLinkedWithAnotherPI(vendorQuotationDetails.getVendorquotation().getID());

                                Long count = (Long) resultso.getEntityList().get(0);
                                if (count == 1) {
                                    vendorQuotationDetails.getVendorquotation().setLinkflag(0);
                                }
                                linkingrequestParams.clear();
                                linkingrequestParams.put("billid", billid);
                                linkingrequestParams.put("linkedTransactionID", linkedDocumentID);
                                linkingrequestParams.put("type", type);
                                linkingrequestParams.put("unlinkflag", true);
                                accGoodsReceiptobj.deleteLinkingInformationOfPI(linkingrequestParams);//Deleting linking information 
                            }

                        } else if (type == 4) {//PI->DN
                            filter_names.clear();
                            filter_params.clear();
                            filter_names.add("debitNote.ID");
                            filter_params.add(linkedDocumentID);
                            filter_names.add("goodsReceipt.ID");
                            filter_params.add(billid);
                            requestParams.put("filter_names", filter_names);
                            requestParams.put("filter_params", filter_params);

                            KwlReturnObject invDetailsResult = accDebitNoteobj.getDebitNoteDetails(requestParams);
                            List<DebitNoteDetail> dndetails = invDetailsResult.getEntityList();
                            KwlReturnObject result1 = accountingHandlerDAOobj.getObject(DebitNote.class.getName(), linkedDocumentID);
                            DebitNote debitNote = (DebitNote) result1.getEntityList().get(0);
                             /* Debit Note against Invoice(Type=1) 
                                 *cannot be unliked
                             */
                            if (debitNote!=null && (debitNote.getDntype() == 1 || debitNote.getDntype() == Constants.DebitNoteForOvercharge)) {
                                linkedTransaction += "<b>"+ debitNote.getDebitNoteNumber() + "</b> ,";
                                continue;
                            }
                            // check if Forex/Gain Loss JE generated. If yes then need to delete JE too
                            for (DebitNoteDetail debitNoteDetail : dndetails) {
                                if (debitNoteDetail.getLinkedGainLossJE() != null && !debitNoteDetail.getLinkedGainLossJE().isEmpty()) {
                                    accDebitNoteService.deleteJEArray(debitNoteDetail.getLinkedGainLossJE(), companyid);
                                }
                            }
                      
                            if (dndetails != null && dndetails.size() > 0) {
                                List cnnumbers = accGoodsReceiptServiceDAO.unlinkDeditNoteFromPurchaseInvoice(request, dndetails, linkedDocumentID);
                                for (Object object : cnnumbers) {
                                    debitNoteNo += object.toString() + ",";
                                }
                                deleteRoundingJE = true;
                            }
                        } else if (type == 6) {//PI->Advance Payment
                                                 filter_names.clear();
                            filter_params.clear();
                            filter_names.add("payment.ID");
                            filter_params.add(linkedDocumentID);
                            filter_names.add("goodsReceipt.ID");
                            filter_params.add(billid);
                            requestParams.put("filter_names", filter_names);
                            requestParams.put("filter_params", filter_params);
                            
                            KwlReturnObject invDetailsResult = accGoodsReceiptobj.getLinkedPaymentDetail(requestParams);
                            List<LinkDetailPayment> mpdetails = invDetailsResult.getEntityList();
                            if (mpdetails != null && mpdetails.size() > 0) {
                                List lst = accGoodsReceiptServiceDAO.unlinkPaymentFromInvoice(request, mpdetails, linkedDocumentID);
                                for (Object object : lst) {
                                    advanceMP += advanceMP.concat(object.toString()).concat(",");
                                }
                                deleteRoundingJE = true;
                            }
                            linkingrequestParams.clear();
                            linkingrequestParams.put("linkedTransactionID", linkedDocumentID);
                            linkingrequestParams.put("billid", billid);
                            linkingrequestParams.put("type", type);
                            linkingrequestParams.put("unlinkflag", true);
                            accGoodsReceiptobj.deleteLinkingInformationOfPI(linkingrequestParams);
                        } else if (type == 7) {//PI->MP
                            result = accountingHandlerDAOobj.getObject(Payment.class.getName(), linkedDocumentID);
                            Payment receipt = (Payment) result.getEntityList().get(0);
                            if (receipt != null) {
                                paymentNo += receipt.getPaymentNumber() + ",";
                            }
                        } else if (type == 3) {//PI->PR

                            filter_names.clear();
                            filter_params.clear();
                            filter_names.add("purchaseReturn.ID");
                            filter_params.add(linkedDocumentID);
                            filter_names.add("videtails.goodsReceipt.ID");
                            filter_params.add(billid);
                            requestParams.put("filter_names", filter_names);
                            requestParams.put("filter_params", filter_params);

                            KwlReturnObject invDetailsResult = accGoodsReceiptobj.getPurchaseReturnDetails(requestParams);
                            List<PurchaseReturnDetail> prDetailList = invDetailsResult.getEntityList();
                            for (PurchaseReturnDetail purchaseReturnDetail : prDetailList) {
                                if (purchaseReturnDetail.getVidetails() != null) {
                                    GoodsReceiptDetail invoiceDetail = purchaseReturnDetail.getVidetails();
                                    if (purchaseReturnNo.indexOf(purchaseReturnDetail.getPurchaseReturn().getPurchaseReturnNumber()) == -1) {
                                        purchaseReturnNo += purchaseReturnDetail.getPurchaseReturn().getPurchaseReturnNumber() + ",";
                                    }
                                    purchaseReturnDetail.setVidetails(null);
                                    invoiceDetail.getGoodsReceipt().setIsOpenInPR(true);
                                }
                            }
                            linkingrequestParams.clear();
                            linkingrequestParams.put("linkedTransactionID", linkedDocumentID);
                            linkingrequestParams.put("billid", billid);
                            linkingrequestParams.put("type", type);
                            linkingrequestParams.put("unlinkflag", true);
                            accGoodsReceiptobj.deleteLinkingInformationOfPI(linkingrequestParams);

                        }
                    }
                }
                String roundingJENo = "";
                String roundingIDs = "";
                if (deleteRoundingJE) {
                    KwlReturnObject jeResult = accJournalEntryobj.getRoundingJournalEntryByGRIds(billid, companyid);
                    List<JournalEntry> jeList = jeResult.getEntityList();
                    if (!jeList.isEmpty() && jeList.get(0) != null) {
                        JournalEntry roundingJE = jeList.get(0);
                        roundingJENo = roundingJE.getEntryNumber();
                        roundingIDs = roundingJE.getID();
                        KwlReturnObject jedResult = accJournalEntryobj.getJournalEntryDetail(roundingJE.getID(), companyid);
                        List<JournalEntryDetail> jedList = jedResult.getEntityList();
                        for (JournalEntryDetail jed : jedList) {
                            accJournalEntryobj.deleteJournalEntryDetailRow(jed.getID(), companyid);
                        }
                        accJournalEntryobj.permanentDeleteJournalEntry(roundingJE.getID(), companyid);
                    }
                }
                
                if (!StringUtil.isNullOrEmpty(invNo) && !StringUtil.isNullOrEmpty(purchaseOrderNo)) {
                    msg += messageSource.getMessage("acc.field.purchaseOrder(s)", null, RequestContextUtils.getLocale(request)) + " " + purchaseOrderNo.substring(0, purchaseOrderNo.length() - 1) + " " + messageSource.getMessage("acc.field.hasBeenUnlinkedFromSelected", null, RequestContextUtils.getLocale(request)) + " " + messageSource.getMessage("acc.pi.PurchaseInvoice", null, RequestContextUtils.getLocale(request)) + " " + invNo + ".";
                    issuccess = true;
                    msg += "<br>";
                    auditTrailObj.insertAuditLog(AuditAction.UNLINK_PO_FROM_PI, "User " + sessionHandlerImpl.getUserFullName(request) + " has unlinked " + "Purchase Invoice " + invNo + " from the Purchase Order(s) " + purchaseOrderNo.substring(0, purchaseOrderNo.length() - 1) + ".", request, invNo);
                }
                if (!StringUtil.isNullOrEmpty(invNo) && !StringUtil.isNullOrEmpty(pigoodsReceiptNo)) {
                    msg += messageSource.getMessage("acc.field.goodsReceipt(s)", null, RequestContextUtils.getLocale(request)) + " " + pigoodsReceiptNo.substring(0, pigoodsReceiptNo.length() - 1) + " " + messageSource.getMessage("acc.field.hasBeenUnlinkedFromSelected", null, RequestContextUtils.getLocale(request)) + " " + messageSource.getMessage("acc.pi.PurchaseInvoice", null, RequestContextUtils.getLocale(request)) + " " + invNo + ".";
                    issuccess = true;
                    msg += "<br>";
                    auditTrailObj.insertAuditLog(AuditAction.UNLINK_GR_FROM_PI, "User " + sessionHandlerImpl.getUserFullName(request) + " has unlinked " + "Purchase Invoice " + invNo + " from the Goods Receipt(s) " + pigoodsReceiptNo.substring(0, pigoodsReceiptNo.length() - 1) + ".", request, invNo);
                }
                if (!StringUtil.isNullOrEmpty(invNo) && !StringUtil.isNullOrEmpty(vendorQuotationNo)) {
                    msg += messageSource.getMessage("acc.field.vendorQuotation(s)", null, RequestContextUtils.getLocale(request)) + " " + vendorQuotationNo.substring(0, vendorQuotationNo.length() - 1) + " " + messageSource.getMessage("acc.field.hasBeenUnlinkedFromSelected", null, RequestContextUtils.getLocale(request)) + " " + messageSource.getMessage("acc.pi.PurchaseInvoice", null, RequestContextUtils.getLocale(request)) + " " + invNo + ".";
                    issuccess = true;
                    msg += "<br>";
                    auditTrailObj.insertAuditLog(AuditAction.UNLINK_VQ_FROM_PI, "User " + sessionHandlerImpl.getUserFullName(request) + " has unlinked " + "Purchase Invoice " + invNo + " from the Vendor Quotation(s) " + vendorQuotationNo.substring(0, vendorQuotationNo.length() - 1) + ".", request, invNo);
                }
                if (!StringUtil.isNullOrEmpty(invNo) && !StringUtil.isNullOrEmpty(goodsReceiptNo)) {
                    msg += messageSource.getMessage("acc.field.goodsReceipt(s)", null, RequestContextUtils.getLocale(request)) + " " + goodsReceiptNo.substring(0, goodsReceiptNo.length() - 1) + " " + messageSource.getMessage("acc.field.hasBeenUnlinkedFromSelected", null, RequestContextUtils.getLocale(request)) + " " + messageSource.getMessage("acc.pi.PurchaseInvoice", null, RequestContextUtils.getLocale(request)) + " " + invNo + ".";
                    issuccess = true;
                    msg += "<br>";
                    auditTrailObj.insertAuditLog(AuditAction.UNLINK_PI_FROM_GR, "User " + sessionHandlerImpl.getUserFullName(request) + " has unlinked " + "Purchase Invoice " + invNo + " from the Goods Receipt(s) " + goodsReceiptNo.substring(0, goodsReceiptNo.length() - 1) + ".", request, invNo);
                }
                if (!StringUtil.isNullOrEmpty(invNo) && !StringUtil.isNullOrEmpty(purchaseReturnNo)) {
                    msg += messageSource.getMessage("acc.field.purchaseReturn(s)", null, RequestContextUtils.getLocale(request)) + " " + purchaseReturnNo.substring(0, purchaseReturnNo.length() - 1) + " " + messageSource.getMessage("acc.field.hasBeenUnlinkedFromSelected", null, RequestContextUtils.getLocale(request)) + " " + messageSource.getMessage("acc.pi.PurchaseInvoice", null, RequestContextUtils.getLocale(request)) + " " + invNo + ".";
                    issuccess = true;
                    msg += "<br>";
                    auditTrailObj.insertAuditLog(AuditAction.UNLINK_PI_FROM_PR, "User " + sessionHandlerImpl.getUserFullName(request) + " has unlinked " + "Purchase Invoice " + invNo + " from the Purchase Return(s) " + purchaseReturnNo.substring(0, purchaseReturnNo.length() - 1) + ".", request, invNo);
                }
                if (!StringUtil.isNullOrEmpty(invNo) && !StringUtil.isNullOrEmpty(advanceMP)) {
                    msg += messageSource.getMessage("acc.writeOff.payments", null, RequestContextUtils.getLocale(request)) + " " + advanceMP.substring(0, advanceMP.length() - 1) + " " + messageSource.getMessage("acc.field.hasBeenUnlinkedFromSelected", null, RequestContextUtils.getLocale(request)) + " " + messageSource.getMessage("acc.pi.PurchaseInvoice", null, RequestContextUtils.getLocale(request)) + " " + invNo + ".";
                    issuccess = true;
                    msg += "<br>";
                    auditTrailObj.insertAuditLog(AuditAction.LINKEDPAYMENT, "User " + sessionHandlerImpl.getUserFullName(request) + " has unlinked " + "Purchase Invoice " + invNo + " from the Advance Payment(s) " + advanceMP.substring(0, advanceMP.length() - 1) + ".", request, invNo);
                }
                if (!StringUtil.isNullOrEmpty(invNo) && !StringUtil.isNullOrEmpty(paymentNo)) {
                    msg += "Please edit Payment(s) " + paymentNo.substring(0, paymentNo.length() - 1) + " and unlink purchase  invoice " + invNo + ".";
                    issuccess = true;
                    msg += "<br>";
                    isPItoMP = true;
                }
                if (cnAgainstInv) {
                    msg += messageSource.getMessage("acc.field.creditnote(s).Except", null, RequestContextUtils.getLocale(request)) + " " + linkedTransaction.substring(0, linkedTransaction.length() - 1) + " " + messageSource.getMessage("acc.field.hasBeenUnlinkedFromSelected", null, RequestContextUtils.getLocale(request)) + " " + messageSource.getMessage("acc.pi.PurchaseInvoice", null, RequestContextUtils.getLocale(request)) + " " + invNo + ".";
                    issuccess = true;
                    msg += "<br>";
                }else if (!StringUtil.isNullOrEmpty(invNo) && (!StringUtil.isNullOrEmpty(debitNoteNo) || !StringUtil.isNullOrEmpty(linkedTransaction))) {
                    if (StringUtil.isNullOrEmpty(linkedTransaction)) {
                        msg += messageSource.getMessage("acc.field.debitnote(s)", null, RequestContextUtils.getLocale(request)) + " " + debitNoteNo.substring(0, debitNoteNo.length() - 1) + " " + messageSource.getMessage("acc.field.hasBeenUnlinkedFromSelected", null, RequestContextUtils.getLocale(request)) + " " + messageSource.getMessage("acc.pi.PurchaseInvoice", null, RequestContextUtils.getLocale(request)) + " " + invNo + ".";
                        issuccess = true;
                        msg += "<br>";
                    } else {
                        msg += messageSource.getMessage("acc.field.debitnote(s).Except", null, RequestContextUtils.getLocale(request)) + " " + linkedTransaction.substring(0, linkedTransaction.length() - 1) + " " + messageSource.getMessage("acc.field.hasBeenUnlinkedFromSelected", null, RequestContextUtils.getLocale(request)) + " " + messageSource.getMessage("acc.pi.PurchaseInvoice", null, RequestContextUtils.getLocale(request)) + " " + invNo + ".";
                        issuccess = true;
                        msg += "<br>";
                    }
                    if (!StringUtil.isNullOrEmpty(debitNoteNo)) {
                        auditTrailObj.insertAuditLog(AuditAction.LINKEDPAYMENT, "User " + sessionHandlerImpl.getUserFullName(request) + " has unlinked " + "Purchase Invoice " + invNo + " from the Debit Note(s) " + debitNoteNo.substring(0, debitNoteNo.length() - 1) + ".", request, invNo);
                    }

                }
                if (!StringUtil.isNullOrEmpty(roundingJENo)) {
                    String unlinkingDocs = "";
                    if (!StringUtil.isNullOrEmpty(debitNoteNo) && !StringUtil.isNullOrEmpty(advanceMP)) {
                        unlinkingDocs = " "+messageSource.getMessage("acc.roundingje.fromdebitnotes", null, RequestContextUtils.getLocale(request)) + " "+debitNoteNo.substring(0, debitNoteNo.length() - 1) +" "+messageSource.getMessage("acc.roundingje.andpayments", null, RequestContextUtils.getLocale(request)) +" "+ advanceMP.substring(0, advanceMP.length() - 1);
                    } else if (!StringUtil.isNullOrEmpty(debitNoteNo)) {
                        unlinkingDocs = " "+messageSource.getMessage("acc.roundingje.fromdebitnotes", null, RequestContextUtils.getLocale(request))+" " + debitNoteNo.substring(0, debitNoteNo.length() - 1);
                    } else if (!StringUtil.isNullOrEmpty(advanceMP)) {
                        unlinkingDocs = " "+messageSource.getMessage("acc.roundingje.frompayments", null, RequestContextUtils.getLocale(request)) +" "+ advanceMP.substring(0, advanceMP.length() - 1);
                    }
                    auditTrailObj.insertAuditLog(AuditAction.ROUNDING_OFF_JE_DELETED, "User " + sessionHandlerImpl.getUserFullName(request) + messageSource.getMessage("acc.roundingje.hasunlinkedvi", null, RequestContextUtils.getLocale(request))+" "+ unlinkingDocs + "."+messageSource.getMessage("acc.roundingje.roundingje", null, RequestContextUtils.getLocale(request)) +" "+ roundingJENo + messageSource.getMessage("acc.roundingje.roundingjedelted", null, RequestContextUtils.getLocale(request)), request, roundingIDs);
                }
            }
        } catch (Exception ex) {
            msg = "accGoodsReceiptControllerCMN.unlinkPurchaseInvoiceDocuments:" + ex.getMessage();
            Logger.getLogger(accGoodsReceiptControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                jobj.put("success", issuccess);
                jobj.put("msg", msg);
                jobj.put("isPIlinktoMP", isPItoMP);
            } catch (JSONException ex) {
                Logger.getLogger(accGoodsReceiptControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return new ModelAndView("jsonView", "model", jobj.toString());
    }

    public ModelAndView unlinkGoodsReceiptDocuments(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        String msg = "";
        boolean issuccess = false;
        try {
            String billid = (!StringUtil.isNullOrEmpty(request.getParameter("billid"))) ? (String) request.getParameter("billid") : "";
            JSONArray documentArr = new JSONArray(request.getParameter("data"));
            String companyid = sessionHandlerImpl.getCompanyid(request);
            if (!StringUtil.isNullOrEmpty(billid) && documentArr != null && documentArr.length() > 0) {
                HashMap<String, Object> linkingrequestParams = new HashMap<String, Object>();

                KwlReturnObject result = accountingHandlerDAOobj.getObject(GoodsReceiptOrder.class.getName(), billid);
                GoodsReceiptOrder goodsReceiptOrder = (GoodsReceiptOrder) result.getEntityList().get(0);
                String grNo = goodsReceiptOrder.getGoodsReceiptOrderNumber();
                String invoiceNo = "", purchaseOrderNo = "", purchaseReturnNo = "", grInvoiceNo = "";

                HashMap<String, Object> requestParams = new HashMap<String, Object>();
                ArrayList filter_names = new ArrayList(), filter_params = new ArrayList();
                filter_names.add("grOrder.ID");
                filter_params.add(goodsReceiptOrder.getID());
                requestParams.put("filter_names", filter_names);
                requestParams.put("filter_params", filter_params);
                for (int i = 0; i < documentArr.length(); i++) {

                    JSONObject document = documentArr.getJSONObject(i);
                    int type = document.optInt("type", -1);
                    String linkedDocumentID = document.optString("billid", "");

                    if (!StringUtil.isNullOrEmpty(billid) && type != -1) {
                        if (type == 0) { //GR->PI

                            KwlReturnObject doDetailsResult = accGoodsReceiptobj.getInvoiceDetailsFromGR(billid, linkedDocumentID, companyid);
                            List<GoodsReceiptDetail> invoicedetails = doDetailsResult.getEntityList();
                            if (invoicedetails != null) {
                                for (GoodsReceiptDetail invoiceDetail : invoicedetails) {
                                    if (invoiceDetail.getGoodsReceiptOrderDetails() != null) {
                                        GoodsReceiptOrderDetails goodsreceiptOrderDetail = invoiceDetail.getGoodsReceiptOrderDetails();
                                        invoiceDetail.setGoodsReceiptOrderDetails(null);
                                        goodsreceiptOrderDetail.getGrOrder().setIsOpenInPI(true);
                                        if (invoiceNo.indexOf(invoiceDetail.getGoodsReceipt().getGoodsReceiptNumber()) == -1) {
                                            invoiceNo += invoiceDetail.getGoodsReceipt().getGoodsReceiptNumber() + ",";
                                        }
                                    }
                                }
                                linkingrequestParams.clear();
                                linkingrequestParams.put("doid", goodsReceiptOrder.getID());
                                linkingrequestParams.put("billid", linkedDocumentID);
                                linkingrequestParams.put("type", type);
                                linkingrequestParams.put("unlinkflag", true);
                                accGoodsReceiptobj.deleteLinkingInformationOfGR(linkingrequestParams);//Deleting linking informatio

                            }
                        } else if (type == 1) {//PI->GR
                            KwlReturnObject doDetailsResult = accGoodsReceiptobj.getGRDetailsFromPI(billid, linkedDocumentID, companyid);
                            List<GoodsReceiptOrderDetails> grOrderdetails = doDetailsResult.getEntityList();
                            if (grOrderdetails != null) {
                                for (GoodsReceiptOrderDetails groDetails : grOrderdetails) {
                                    if (groDetails.getVidetails() != null) {
                                        GoodsReceiptDetail goodsreceipDetail = groDetails.getVidetails();
                                      
                                        /* Updating isLineItemClosed & isPOClosed flag to false if PI(linked with PO) is unlinked from GR i.e PO->PI->GR*/
                                        if (goodsreceipDetail.getPurchaseorderdetail() != null) {
                                            goodsreceipDetail.getPurchaseorderdetail().setIsLineItemClosed(false);
                                            goodsreceipDetail.getPurchaseorderdetail().getPurchaseOrder().setIsPOClosed(false);
                                            
                                            /*Updating balance quantity of PO, if PI is linked with PO */
                                            HashMap poMap = new HashMap();
                                            poMap.put("podetails", goodsreceipDetail.getPurchaseorderdetail().getID());
                                            poMap.put("companyid", companyid);
                                            poMap.put("balanceqty", groDetails.getDeliveredQuantity());
                                            poMap.put("add",true);
                                            accCommonTablesDAO.updatePurchaseOrderStatus(poMap);
                                        }
                                        groDetails.setVidetails(null);
                                        goodsreceipDetail.getGoodsReceipt().setIsOpenInGR(true);
                                        if (grInvoiceNo.indexOf(goodsreceipDetail.getGoodsReceipt().getGoodsReceiptNumber()) == -1) {
                                            grInvoiceNo += goodsreceipDetail.getGoodsReceipt().getGoodsReceiptNumber() + ",";
                                        }
                                    }
                                }
                                linkingrequestParams.clear();
                                linkingrequestParams.put("doid", goodsReceiptOrder.getID());
                                linkingrequestParams.put("billid", linkedDocumentID);
                                linkingrequestParams.put("type", type);
                                linkingrequestParams.put("unlinkflag", true);
                                accGoodsReceiptobj.deleteLinkingInformationOfGR(linkingrequestParams);//Deleting linking information 
                            }
                        } else if (type == 2) {//PO->GR
                            PurchaseOrderDetail purchaseOrderDetails = null;
                            KwlReturnObject doDetailsResult = accGoodsReceiptobj.getGRDetailsFromPO(billid, linkedDocumentID, companyid);
                            /* Updating balance quantity of product in PurchaseOrderDetail table 
                                        * 
                                        * while unlinking PO linked with GR*/

                            accGoodsReceiptobj.updatePOBalanceQtyAfterGR(billid, linkedDocumentID, companyid);  //ERP-19803
                            
                            
                            KwlReturnObject rdresult = accountingHandlerDAOobj.getObject(PurchaseOrder.class.getName(), linkedDocumentID);
                            PurchaseOrder purchaseOrder = (PurchaseOrder) rdresult.getEntityList().get(0);
                           /* Updating isPOClosed to false if GR is unlinked from PO*/
                            purchaseOrder.setIsPOClosed(false);
                            
                            List<GoodsReceiptOrderDetails> grOrderdetails = doDetailsResult.getEntityList();
                            if (grOrderdetails != null) {
                                for (GoodsReceiptOrderDetails groDetails : grOrderdetails) {
                                    if (groDetails.getPodetails() != null) {
                                        purchaseOrderDetails = groDetails.getPodetails();
                                        /* Updating isLineItemClosed to false if GR is unlinked from PO*/
                                        purchaseOrderDetails.setIsLineItemClosed(false);
                                        groDetails.setPodetails(null);
                                        purchaseOrderDetails.getPurchaseOrder().setIsOpen(true);
                                        if (purchaseOrderNo.indexOf(purchaseOrderDetails.getPurchaseOrder().getPurchaseOrderNumber()) == -1) {
                                            purchaseOrderNo += purchaseOrderDetails.getPurchaseOrder().getPurchaseOrderNumber() + ",";
                                        }
                                    }
                                }
                                KwlReturnObject resultso = accGoodsReceiptobj.checkPOLinkedWithAnotherGR(purchaseOrderDetails.getPurchaseOrder().getID());

                                Long count = (Long) resultso.getEntityList().get(0);
                                if (count == 1) {
                                    purchaseOrderDetails.getPurchaseOrder().setLinkflag(0);
                                }
                                linkingrequestParams.clear();
                                linkingrequestParams.put("doid", goodsReceiptOrder.getID());
                                linkingrequestParams.put("billid", linkedDocumentID);
                                linkingrequestParams.put("type", type);
                                linkingrequestParams.put("unlinkflag", true);
                                accGoodsReceiptobj.deleteLinkingInformationOfGR(linkingrequestParams);//Deleting linking information 
                            }

                        } else if (type == 3) {//GR->PR

                            KwlReturnObject doDetailsResult = accGoodsReceiptobj.getPurchaseReturnDetailsFromGR(billid, linkedDocumentID, companyid);
                            List<PurchaseReturnDetail> purchaseReturnDetails = doDetailsResult.getEntityList();
                            if (purchaseReturnDetails != null) {
                                for (PurchaseReturnDetail purchaseReturnDetail : purchaseReturnDetails) {
                                    if (purchaseReturnDetail.getGrdetails() != null) {
                                        GoodsReceiptOrderDetails grOrderDetail = purchaseReturnDetail.getGrdetails();
                                        if (purchaseReturnNo.indexOf(purchaseReturnDetail.getPurchaseReturn().getPurchaseReturnNumber()) == -1) {
                                            purchaseReturnNo += purchaseReturnDetail.getPurchaseReturn().getPurchaseReturnNumber() + ",";
                                        }
                                        purchaseReturnDetail.setGrdetails(null);
                                        grOrderDetail.getGrOrder().setIsOpenInPR(true);
                                    }
                                }
                                linkingrequestParams.clear();
                                linkingrequestParams.put("doid", goodsReceiptOrder.getID());
                                linkingrequestParams.put("billid", linkedDocumentID);
                                linkingrequestParams.put("type", type);
                                linkingrequestParams.put("unlinkflag", true);
                                accGoodsReceiptobj.deleteLinkingInformationOfGR(linkingrequestParams);//Deleting linking information 
                            }
                        }
                    }
                }

                if (!StringUtil.isNullOrEmpty(grNo) && !StringUtil.isNullOrEmpty(purchaseOrderNo)) {
                    msg = messageSource.getMessage("acc.field.purchaseOrder(s)", null, RequestContextUtils.getLocale(request)) + " " + purchaseOrderNo.substring(0, purchaseOrderNo.length() - 1) + " " + messageSource.getMessage("acc.field.hasBeenUnlinkedFromSelected", null, RequestContextUtils.getLocale(request)) + " " + messageSource.getMessage("acc.wtfTrans.grdo", null, RequestContextUtils.getLocale(request)) + " " + grNo + ".";
                    issuccess = true;
                    auditTrailObj.insertAuditLog(AuditAction.UNLINK_PO_FROM_GR, "User " + sessionHandlerImpl.getUserFullName(request) + " has unlinked " + "Goods Receipt " + grNo + " from the Purchase Order(s) " + purchaseOrderNo.substring(0, purchaseOrderNo.length() - 1) + ".", request, grNo);
                } else if (!StringUtil.isNullOrEmpty(grNo) && !StringUtil.isNullOrEmpty(invoiceNo)) {
                    msg = messageSource.getMessage("acc.field.purchaseInvoice(s)", null, RequestContextUtils.getLocale(request)) + " " + invoiceNo.substring(0, invoiceNo.length() - 1) + " " + messageSource.getMessage("acc.field.hasBeenUnlinkedFromSelected", null, RequestContextUtils.getLocale(request)) + " " + messageSource.getMessage("acc.wtfTrans.grdo", null, RequestContextUtils.getLocale(request)) + " " + grNo + ".";
                    issuccess = true;
                    auditTrailObj.insertAuditLog(AuditAction.UNLINK_PI_FROM_GR, "User " + sessionHandlerImpl.getUserFullName(request) + " has unlinked " + "Goods Receipt " + grNo + " from the Purchase Invoice(s) " + invoiceNo.substring(0, invoiceNo.length() - 1) + ".", request, grNo);
                } else if (!StringUtil.isNullOrEmpty(grNo) && !StringUtil.isNullOrEmpty(grInvoiceNo)) {
                    msg = messageSource.getMessage("acc.field.purchaseInvoice(s)", null, RequestContextUtils.getLocale(request)) + " " + grInvoiceNo.substring(0, grInvoiceNo.length() - 1) + " " + messageSource.getMessage("acc.field.hasBeenUnlinkedFromSelected", null, RequestContextUtils.getLocale(request)) + " " + messageSource.getMessage("acc.wtfTrans.grdo", null, RequestContextUtils.getLocale(request)) + " " + grNo + ".";
                    issuccess = true;
                    auditTrailObj.insertAuditLog(AuditAction.UNLINK_GR_FROM_PI, "User " + sessionHandlerImpl.getUserFullName(request) + " has unlinked " + "Goods Receipt " + grNo + " from the Purchase Invoice(s) " + grInvoiceNo.substring(0, grInvoiceNo.length() - 1) + ".", request, grNo);
                } else if (!StringUtil.isNullOrEmpty(grNo) && !StringUtil.isNullOrEmpty(purchaseReturnNo)) {
                    msg = messageSource.getMessage("acc.field.purchaseReturn(s)", null, RequestContextUtils.getLocale(request)) + " " + purchaseReturnNo.substring(0, purchaseReturnNo.length() - 1) + " " + messageSource.getMessage("acc.field.hasBeenUnlinkedFromSelected", null, RequestContextUtils.getLocale(request)) + " " + messageSource.getMessage("acc.wtfTrans.grdo", null, RequestContextUtils.getLocale(request)) + " " + grNo + ".";
                    issuccess = true;
                    auditTrailObj.insertAuditLog(AuditAction.UNLINK_GR_FROM_PR, "User " + sessionHandlerImpl.getUserFullName(request) + " has unlinked " + "Goods Receipt " + grNo + " from the Purchase Return(s) " + purchaseReturnNo.substring(0, purchaseReturnNo.length() - 1) + ".", request, grNo);
                } else {
                    msg = messageSource.getMessage("acc.wtfTrans.grdo", null, RequestContextUtils.getLocale(request)) + " " + grNo + " " + messageSource.getMessage("acc.field.isNotLinkedWithAnyDocument", null, RequestContextUtils.getLocale(request));
                }
            }
        } catch (Exception ex) {
            msg = "accGoodsReceiptControllerCMN.unlinkGoodsReceiptDocuments:" + ex.getMessage();
            Logger.getLogger(accGoodsReceiptControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                jobj.put("success", issuccess);
                jobj.put("msg", msg);
            } catch (JSONException ex) {
                Logger.getLogger(accGoodsReceiptControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return new ModelAndView("jsonView", "model", jobj.toString());
    }

    public ModelAndView unlinkPurchaseReturnDocuments(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        StringBuffer msg = new StringBuffer();
        boolean issuccess = false;
        try {

            String billid = (!StringUtil.isNullOrEmpty(request.getParameter("billid"))) ? (String) request.getParameter("billid") : "";

            KwlReturnObject result = accountingHandlerDAOobj.getObject(PurchaseReturn.class.getName(), billid);
            PurchaseReturn purchaseReturn = (PurchaseReturn) result.getEntityList().get(0);
            String prNo = purchaseReturn.getPurchaseReturnNumber();

            HashMap<String, Object> requestParams = new HashMap<String, Object>();
            ArrayList filter_names = new ArrayList(), filter_params = new ArrayList();
            HashMap<String, Object> linkingrequestParams = new HashMap<String, Object>();

            JSONArray documentArr = new JSONArray(request.getParameter("data"));

            if (!StringUtil.isNullOrEmpty(billid) && documentArr != null && documentArr.length() > 0) {
                String invoiceNo = "", goodsReceiptNo = "";
                for (int i = 0; i < documentArr.length(); i++) {

                    JSONObject document = documentArr.getJSONObject(i);
                    int type = document.optInt("type", -1);
                    String linkedDocumentID = document.optString("billid", "");
                    if (!StringUtil.isNullOrEmpty(billid) && type != -1) {

                        if (type == 1 || type == 2) {//Type=1,PI->PR & Type=2,GR->PR

                            filter_names.add("purchaseReturn.ID");
                            filter_params.add(purchaseReturn.getID());
                            requestParams.put("filter_names", filter_names);
                            requestParams.put("filter_params", filter_params);

                            /* Fetching Purchase Return Details */
                            KwlReturnObject prDetailsResult = accGoodsReceiptobj.getPurchaseReturnDetails(requestParams);
                            List<PurchaseReturnDetail> prDetailList = prDetailsResult.getEntityList();
                            if (prDetailList != null && prDetailList.size() > 0) {
                                /* Purchase Invoice ->Purchase Return*/
                                if (type == 1) {
                                    KwlReturnObject invoiceObj = accountingHandlerDAOobj.getObject(GoodsReceipt.class.getName(), linkedDocumentID);
                                    GoodsReceipt invoice = (GoodsReceipt) invoiceObj.getEntityList().get(0);
                                    if (invoice != null) {
                                        Set<GoodsReceiptDetail> invoicedetails = invoice.getRows();
                                        if (invoicedetails != null && invoicedetails.size() > 0) {

                                            /* Iterating Purchase Return Details for selected Purchase Return*/
                                            for (PurchaseReturnDetail prDetails : prDetailList) {
                                                if (prDetails.getVidetails() != null) {

                                                    /* Iterating invoice Details for checking 
                                                    
                                                     whether it is used in Purchase Return ,
                                                    
                                                     if Yes then deleting invoice details id from Purchase Return Details*/
                                                    for (GoodsReceiptDetail invDetails : invoicedetails) {

                                                        /* Deleting  selected invoice Details from 
                                                         Purchase Return Details used in Purchase Return*/
                                                        if (invDetails != null && invDetails.getID().equals(prDetails.getVidetails().getID())) {
                                                            if (invDetails != null && invoiceNo.indexOf(invDetails.getGoodsReceipt().getGoodsReceiptNumber()) == -1) {
                                                                invoiceNo += invDetails.getGoodsReceipt().getGoodsReceiptNumber() + ",";
                                                            }
                                                            prDetails.setVidetails(null);
                                                            invDetails.getGoodsReceipt().setIsOpenInPR(true);
                                                            break;
                                                        }
                                                    }
                                                }
                                            }
                                            linkingrequestParams.clear();
                                            linkingrequestParams.put("linkedTransactionID", linkedDocumentID);
                                            linkingrequestParams.put("prid", billid);
                                            linkingrequestParams.put("type", type);
                                            linkingrequestParams.put("unlinkflag", true);

                                            /*Deleting linking information of PR & PI*/
                                            accGoodsReceiptobj.deleteLinkingInformationOfPR(linkingrequestParams);;

                                        }
                                    }
                                    /* Goods Receipt ->Purchase Return*/
                                } else if (type == 2) {
                                    KwlReturnObject goodsReceiptObj = accountingHandlerDAOobj.getObject(GoodsReceiptOrder.class.getName(), linkedDocumentID);
                                    GoodsReceiptOrder grOrder = (GoodsReceiptOrder) goodsReceiptObj.getEntityList().get(0);
                                    if (grOrder != null) {
                                        Set<GoodsReceiptOrderDetails> groDetailList = grOrder.getRows();
                                        if (groDetailList != null && groDetailList.size() > 0) {

                                            /* Iterating Purchase Return Details for selected Purchase Return*/
                                            for (PurchaseReturnDetail prDetails : prDetailList) {
                                                if (prDetails.getGrdetails() != null) {

                                                    /* Iterating Goods Receipt Details for checking 
                                                    
                                                     whether it is used in Purchase Return ,
                                                    
                                                     if Yes then deleting goods receipt Details id from Purchase Return Details*/
                                                    for (GoodsReceiptOrderDetails groDetails : groDetailList) {

                                                        /* Deleting  selected Goods Receipts Details from Purchase Return Details used in Purchase Return*/
                                                        if (groDetails != null && groDetails.getID().equals(prDetails.getGrdetails().getID())) {
                                                            if (groDetails != null && goodsReceiptNo.indexOf(groDetails.getGrOrder().getGoodsReceiptOrderNumber()) == -1) {
                                                                goodsReceiptNo += groDetails.getGrOrder().getGoodsReceiptOrderNumber() + ",";
                                                            }
                                                            prDetails.setGrdetails(null);
                                                            groDetails.getGrOrder().setIsOpenInPR(true);
                                                            break;
                                                        }
                                                    }
                                                }
                                            }

                                            linkingrequestParams.clear();
                                            linkingrequestParams.put("linkedTransactionID", linkedDocumentID);
                                            linkingrequestParams.put("prid", billid);
                                            linkingrequestParams.put("type", type);
                                            linkingrequestParams.put("unlinkflag", true);

                                            /*Deleting linking information of PR & GR*/
                                            accGoodsReceiptobj.deleteLinkingInformationOfPR(linkingrequestParams);

                                        }
                                    }
                                }
                            }
                        }

                    }
                }

                if (!StringUtil.isNullOrEmpty(prNo) && !StringUtil.isNullOrEmpty(goodsReceiptNo)) {
                    msg.append(messageSource.getMessage("acc.field.goodsReceipt(s)", null, RequestContextUtils.getLocale(request)) + " " + goodsReceiptNo.substring(0, goodsReceiptNo.length() - 1) + " " + messageSource.getMessage("acc.field.hasBeenUnlinkedFromSelected", null, RequestContextUtils.getLocale(request)) + " " + messageSource.getMessage("acc.pi.PurchaseReturn", null, RequestContextUtils.getLocale(request)) + " " + prNo + ".");
                    issuccess = true;
                 
                    auditTrailObj.insertAuditLog(AuditAction.UNLINK_GR_FROM_PR, "User " + sessionHandlerImpl.getUserFullName(request) + " has unlinked " + "Purchase Return " + prNo + " from  Goods Receipt(s) " + goodsReceiptNo.substring(0, goodsReceiptNo.length() - 1) + ".", request, prNo);
                } else if (!StringUtil.isNullOrEmpty(prNo) && !StringUtil.isNullOrEmpty(invoiceNo)) {
                    msg.append(messageSource.getMessage("acc.field.purchaseInvoice(s)", null, RequestContextUtils.getLocale(request)) + " " + invoiceNo.substring(0, invoiceNo.length() - 1) + " " + messageSource.getMessage("acc.field.hasBeenUnlinkedFromSelected", null, RequestContextUtils.getLocale(request)) + " " + messageSource.getMessage("acc.pi.PurchaseReturn", null, RequestContextUtils.getLocale(request)) + " " + prNo + ".");
                    issuccess = true;
               
                    auditTrailObj.insertAuditLog(AuditAction.UNLINK_PI_FROM_PR, "User " + sessionHandlerImpl.getUserFullName(request) + " has unlinked " + "Purchase Return " + prNo + " from  Purchase Invoice(s) " + invoiceNo.substring(0, invoiceNo.length() - 1) + ".", request, prNo);
                }
            }

        } catch (Exception ex) {
            msg.append("accGoodsReceiptControllerCMN.unlinkPurchaseReturnDocuments:" + ex.getMessage());
            Logger.getLogger(accGoodsReceiptControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                jobj.put("success", issuccess);
                jobj.put("msg", msg);
            } catch (JSONException ex) {
                Logger.getLogger(accGoodsReceiptControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return new ModelAndView("jsonView", "model", jobj.toString());
    }
    
    public ModelAndView getMonthWiseGoodsReceiptsDue(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        boolean issuccess = false;
        String msg = "";
        try {
            HashMap<String, Object> requestParams = getGoodsReceiptMap(request);
            KwlReturnObject result = accGoodsReceiptobj.getGoodsReceipts(requestParams);
            List list = result.getEntityList();
            boolean isEdit = request.getParameter("isEdit") == null ? false : Boolean.parseBoolean(request.getParameter("isEdit"));
            requestParams.put("isEdit", isEdit);
            String year = request.getParameter("year")!=null?request.getParameter("year").toString():""; 
            DateFormat df = (DateFormat) requestParams.get(DATEFORMAT);
            boolean forMonthWiseInvoices = request.getParameter("forMonthWiseInvoices") == null ? false : Boolean.parseBoolean(request.getParameter("forMonthWiseInvoices").toString());
            String months = request.getParameter("months") == null ? "" : request.getParameter("months").toString();
            HashSet invoicesList = new HashSet();
            String companyid = sessionHandlerImpl.getCompanyid(request);
            if (isEdit && !StringUtil.isNullOrEmpty(request.getParameter("billId").toString())) {
                KwlReturnObject paymentResult = accountingHandlerDAOobj.getObject(Payment.class.getName(), request.getParameter("billId").toString());
                Payment payment = (Payment) paymentResult.getEntityList().get(0);
                Set<PaymentDetail> paymentDetails = payment.getRows();
                for (PaymentDetail paymentDetail : paymentDetails) {
                    invoicesList.add(paymentDetail.getGoodsReceipt().getID());
                }
            }
            String currencyfilterfortrans = request.getParameter("currencyfilterfortrans")!=null?request.getParameter("currencyfilterfortrans"):"";
            JSONArray DataJArr = new JSONArray();
            requestParams.put("forMonthWiseInvoices", forMonthWiseInvoices);
            requestParams.put("getOnlyAmountDueInJson", true);
            requestParams.put("months", months);

            DataJArr = getGoodsReceiptsJsonForPayment(requestParams, list, invoicesList);

            request.setAttribute("getOnlyAmountDueInJson", true);
            getOpeningBalanceInvoicesJsonArray(request, DataJArr,invoicesList);     //ERP-41122

            DataJArr = getMonthWiseInvoicesAmountDueJson(DataJArr,year,currencyfilterfortrans,companyid);
            int count = DataJArr.length();

            jobj.put(DATA, DataJArr);
            jobj.put(COUNT, count);
            issuccess = true;
        } catch (SessionExpiredException | ServiceException ex) {
            msg = ex.getMessage();
            Logger.getLogger(accGoodsReceiptController.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            msg = "accGoodsReceiptController.getMonthWiseGoodsReceiptsDue : " + ex.getMessage();
        } finally {
            try {
                jobj.put(SUCCESS, issuccess);
                jobj.put(MSG, msg);
            } catch (JSONException ex) {
                Logger.getLogger(accGoodsReceiptController.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return new ModelAndView(JSONVIEW, MODEL, jobj.toString());
    }

    public JSONArray getMonthWiseInvoicesAmountDueJson(JSONArray jsonArr,String year,String currencyfilterfortrans, String companyid) throws ServiceException {
        JSONArray jArr = new JSONArray();
        try {

            String yearName = "";
            int Year = StringUtil.isNullOrEmpty(year)?0:Integer.parseInt(year);
            SimpleDateFormat formatter = new SimpleDateFormat("MMM dd, yyyy");
            KwlReturnObject currencyresult = accountingHandlerDAOobj.getObject(KWLCurrency.class.getName(), currencyfilterfortrans);
            List list = currencyresult.getEntityList();
            KWLCurrency paymentCurrency = (KWLCurrency)list.get(0);
            String paymentCurrencySymbol = paymentCurrency.getSymbol();
            Date today = new Date();
            Calendar calendar = Calendar.getInstance();
            calendar.setTime(today);
            yearName += " " + (calendar.get(Calendar.YEAR)-Year);
            double janDue = 0, febDue = 0, marchDue = 0, aprilDue = 0, mayDue = 0, juneDue = 0, julyDue = 0, augustDue = 0, septDue = 0, octDue = 0, novDue = 0, decDue = 0;
            double janDueBase = 0, febDueBase = 0, marchDueBase = 0, aprilDueBase = 0, mayDueBase = 0, juneDueBase = 0, julyDueBase = 0, augustDueBase = 0, septDueBase = 0, octDueBase = 0, novDueBase = 0, decDueBase = 0;
            for (int i = 0; i < jsonArr.length(); i++) {
                JSONObject obj = new JSONObject();
                obj = jsonArr.getJSONObject(i);
                Date grDate = formatter.parse(obj.getString(DATE));
                double amountdue = 0, amountdueinbase = 0;
                amountdue = obj.optDouble(AMOUNTDUE);
                amountdueinbase = obj.optDouble(AMOUNTDUEINBASE);
                amountdue = authHandler.round(amountdue, companyid);
                amountdueinbase = authHandler.round(amountdueinbase, companyid);
                Calendar cal = Calendar.getInstance();
                cal.setTime(grDate);

                if (cal.get(Calendar.MONTH) == Constants.Months_According_To_Indices.get(Constants.January)) {
                    janDue += amountdue;
                    janDueBase += amountdueinbase;
                } else if (cal.get(Calendar.MONTH) == Constants.Months_According_To_Indices.get(Constants.February)) {
                    febDue += amountdue;
                    febDueBase += amountdueinbase;
                } else if (cal.get(Calendar.MONTH) == Constants.Months_According_To_Indices.get(Constants.March)) {
                    marchDue += amountdue;
                    marchDueBase += amountdueinbase;
                } else if (cal.get(Calendar.MONTH) == Constants.Months_According_To_Indices.get(Constants.April)) {
                    aprilDue += amountdue;
                    aprilDueBase += amountdueinbase;
                } else if (cal.get(Calendar.MONTH) == Constants.Months_According_To_Indices.get(Constants.May)) {
                    mayDue += amountdue;
                    mayDueBase += amountdueinbase;
                } else if (cal.get(Calendar.MONTH) == Constants.Months_According_To_Indices.get(Constants.June)) {
                    juneDue += amountdue;
                    juneDueBase += amountdueinbase;
                } else if (cal.get(Calendar.MONTH) == Constants.Months_According_To_Indices.get(Constants.July)) {
                    julyDue += amountdue;
                    julyDueBase += amountdueinbase;
                } else if (cal.get(Calendar.MONTH) == Constants.Months_According_To_Indices.get(Constants.August)) {
                    augustDue += amountdue;
                    augustDueBase += amountdueinbase;
                } else if (cal.get(Calendar.MONTH) == Constants.Months_According_To_Indices.get(Constants.September)) {
                    septDue += amountdue;
                    septDueBase += amountdueinbase;
                } else if (cal.get(Calendar.MONTH) == Constants.Months_According_To_Indices.get(Constants.October)) {
                    octDue += amountdue;
                    octDueBase += amountdueinbase;
                } else if (cal.get(Calendar.MONTH) == Constants.Months_According_To_Indices.get(Constants.November)) {
                    novDue += amountdue;
                    novDueBase += amountdueinbase;
                } else if (cal.get(Calendar.MONTH) == Constants.Months_According_To_Indices.get(Constants.December)) {
                    decDue += amountdue;
                    decDueBase += amountdueinbase;
                }

            }

            JSONObject monthObject = new JSONObject();
            monthObject.put("monthid", Constants.Months_According_To_Indices.get(Constants.January));
            monthObject.put("month", "January, " + yearName);
            monthObject.put("balanceInPaymentCurrency", janDue);
            monthObject.put("amountdueinbase", janDueBase);
            monthObject.put("currencysymboltransaction", paymentCurrencySymbol);
            jArr.put(monthObject);
            monthObject = new JSONObject();
            monthObject.put("monthid", Constants.Months_According_To_Indices.get(Constants.February));
            monthObject.put("month", "February, " + yearName);
            monthObject.put("balanceInPaymentCurrency", febDue);
            monthObject.put("amountdueinbase", febDueBase);
            monthObject.put("currencysymboltransaction", paymentCurrencySymbol);
            jArr.put(monthObject);
            monthObject = new JSONObject();
            monthObject.put("monthid", Constants.Months_According_To_Indices.get(Constants.March));
            monthObject.put("month", "March, " + yearName);
            monthObject.put("balanceInPaymentCurrency", marchDue);
            monthObject.put("amountdueinbase", marchDueBase);
            monthObject.put("currencysymboltransaction", paymentCurrencySymbol);
            jArr.put(monthObject);
            monthObject = new JSONObject();
            monthObject.put("monthid", Constants.Months_According_To_Indices.get(Constants.April));
            monthObject.put("month", "April, " + yearName);
            monthObject.put("balanceInPaymentCurrency", aprilDue);
            monthObject.put("amountdueinbase", aprilDueBase);
            monthObject.put("currencysymboltransaction", paymentCurrencySymbol);
            jArr.put(monthObject);
            monthObject = new JSONObject();
            monthObject.put("monthid", Constants.Months_According_To_Indices.get(Constants.May));
            monthObject.put("month", "May, " + yearName);
            monthObject.put("balanceInPaymentCurrency", mayDue);
            monthObject.put("amountdueinbase", mayDueBase);
            monthObject.put("currencysymboltransaction", paymentCurrencySymbol);
            jArr.put(monthObject);
            monthObject = new JSONObject();
            monthObject.put("monthid", Constants.Months_According_To_Indices.get(Constants.June));
            monthObject.put("month", "June, " + yearName);
            monthObject.put("balanceInPaymentCurrency", juneDue);
            monthObject.put("amountdueinbase", juneDueBase);
            monthObject.put("currencysymboltransaction", paymentCurrencySymbol);
            jArr.put(monthObject);
            monthObject = new JSONObject();
            monthObject.put("monthid", Constants.Months_According_To_Indices.get(Constants.July));
            monthObject.put("month", "July, " + yearName);
            monthObject.put("balanceInPaymentCurrency", julyDue);
            monthObject.put("amountdueinbase", julyDueBase);
            monthObject.put("currencysymboltransaction", paymentCurrencySymbol);
            jArr.put(monthObject);
            monthObject = new JSONObject();
            monthObject.put("monthid", Constants.Months_According_To_Indices.get(Constants.August));
            monthObject.put("month", "August, " + yearName);
            monthObject.put("balanceInPaymentCurrency", augustDue);
            monthObject.put("amountdueinbase", augustDueBase);
            monthObject.put("currencysymboltransaction", paymentCurrencySymbol);
            jArr.put(monthObject);
            monthObject = new JSONObject();
            monthObject.put("monthid", Constants.Months_According_To_Indices.get(Constants.September));
            monthObject.put("month", "September, " + yearName);
            monthObject.put("balanceInPaymentCurrency", septDue);
            monthObject.put("amountdueinbase", septDueBase);
            monthObject.put("currencysymboltransaction", paymentCurrencySymbol);
            jArr.put(monthObject);
            monthObject = new JSONObject();
            monthObject.put("monthid", Constants.Months_According_To_Indices.get(Constants.October));
            monthObject.put("month", "October, " + yearName);
            monthObject.put("balanceInPaymentCurrency", octDue);
            monthObject.put("amountdueinbase", octDueBase);
            monthObject.put("currencysymboltransaction", paymentCurrencySymbol);
            jArr.put(monthObject);
            monthObject = new JSONObject();
            monthObject.put("monthid", Constants.Months_According_To_Indices.get(Constants.November));
            monthObject.put("month", "November, " + yearName);
            monthObject.put("balanceInPaymentCurrency", novDue);
            monthObject.put("amountdueinbase", novDueBase);
            monthObject.put("currencysymboltransaction", paymentCurrencySymbol);
            jArr.put(monthObject);
            monthObject = new JSONObject();
            monthObject.put("monthid", Constants.Months_According_To_Indices.get(Constants.December));
            monthObject.put("month", "December, " + yearName);
            monthObject.put("balanceInPaymentCurrency", decDue);
            monthObject.put("amountdueinbase", decDueBase);
            monthObject.put("currencysymboltransaction", paymentCurrencySymbol);
            jArr.put(monthObject);
        } catch (Exception ex) {
            throw ServiceException.FAILURE("accGoodsReceiptController.getMonthWiseInvoicesAmountDueJson : " + ex.getMessage(), ex);
        }
        return jArr;
    }

    public ModelAndView getMonthWiseGoodsReceipts(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        boolean issuccess = false;
        String msg = "";
        try {
            HashMap<String, Object> requestParams = getGoodsReceiptMap(request);
            KwlReturnObject result = accGoodsReceiptobj.getGoodsReceipts(requestParams);
            List list = result.getEntityList();
            boolean isEdit = request.getParameter("isEdit") == null ? false : Boolean.parseBoolean(request.getParameter("isEdit"));
            String months = request.getParameter("months") != null ? request.getParameter("months") : "";
            boolean forMonthWiseInvoices = !(StringUtil.isNullObject(request.getParameter("forMonthWiseInvoices").toString()));
            requestParams.put("isEdit", isEdit);
            DateFormat df = (DateFormat) requestParams.get(DATEFORMAT);
            HashSet invoicesList = new HashSet();
            if (isEdit && !StringUtil.isNullOrEmpty(request.getParameter("billId").toString())) {
                KwlReturnObject paymentResult = accountingHandlerDAOobj.getObject(Payment.class.getName(), request.getParameter("billId").toString());
                Payment payment = (Payment) paymentResult.getEntityList().get(0);
                Set<PaymentDetail> paymentDetails = payment.getRows();
                for (PaymentDetail paymentDetail : paymentDetails) {
                    invoicesList.add(paymentDetail.getGoodsReceipt().getID());
                }
            }
            JSONArray DataJArr = new JSONArray();
            requestParams.put("months", months);
            requestParams.put("forMonthWiseInvoices", forMonthWiseInvoices);
            requestParams.put("getOnlyAmountDueInJson", false);
            DataJArr = getGoodsReceiptsJsonForPayment(requestParams, list, invoicesList);
            getOpeningBalanceInvoicesJsonArray(request, DataJArr,invoicesList);     //ERP-41122
            int count = DataJArr.length();
            jobj.put(DATA, DataJArr);
            jobj.put(COUNT, count);
            issuccess = true;
        } catch (SessionExpiredException | ServiceException ex) {
            msg = ex.getMessage();
            Logger.getLogger(accGoodsReceiptController.class.getName()).log(Level.SEVERE, null, ex);
        }catch (Exception ex) {
            msg = "accGoodsReceiptController.getMonthWiseGoodsReceiptsDue : " + ex.getMessage();
        } finally {
            try {
                jobj.put(SUCCESS, issuccess);
                jobj.put(MSG, msg);
            } catch (JSONException ex) {
                Logger.getLogger(accGoodsReceiptController.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return new ModelAndView(JSONVIEW, MODEL, jobj.toString());
    }
    
    public static HashMap<String, Object> getPartyLedgerMap(HttpServletRequest request) throws SessionExpiredException {
        HashMap<String, Object> requestParams = new HashMap<String, Object>();
        requestParams.put(COMPANYID, sessionHandlerImpl.getCompanyid(request));
        requestParams.put(GCURRENCYID, sessionHandlerImpl.getCurrencyID(request));
        requestParams.put(DATEFORMAT, authHandler.getDateOnlyFormat());
        requestParams.put(START, request.getParameter(START));
        requestParams.put(LIMIT, request.getParameter(LIMIT));
        requestParams.put(SS, request.getParameter(SS));
        requestParams.put(ACCID, request.getParameter(ACCID));
        requestParams.put(CASHONLY, request.getParameter(CASHONLY));
        requestParams.put(CREDITONLY, request.getParameter(CREDITONLY));
        requestParams.put(IGNOREZERO, request.getParameter(IGNOREZERO));
        requestParams.put(CURDATE, request.getParameter(CURDATE));
        requestParams.put(PERSONGROUP, request.getParameter(PERSONGROUP));
        requestParams.put(ISAGEDGRAPH, request.getParameter(ISAGEDGRAPH));
        requestParams.put(VENDORID, request.getParameter(VENDORID));
        requestParams.put(NONDELETED, request.getParameter(NONDELETED));
        requestParams.put(DURATION, request.getParameter(DURATION));
        requestParams.put(WITHINVENTORY, request.getParameter(WITHINVENTORY));
        requestParams.put(Constants.df, authHandler.getDateOnlyFormat());
        requestParams.put(Constants.REQ_startdate, request.getParameter(Constants.REQ_startdate));
        requestParams.put(Constants.REQ_enddate, request.getParameter(Constants.REQ_enddate));
        requestParams.put("istemplate", (request.getParameter("istemplate") != null) ? Integer.parseInt(request.getParameter("istemplate")) : 0);
        requestParams.put("custVendorID", request.getParameter("custVendorID"));
        requestParams.put("isAged", request.getParameter("isAged"));
        return requestParams;
    }
    
    public ModelAndView getVendorPartyLedgerSummary(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        boolean issuccess = false;
        String msg = "";
        try {
            HashMap<String, Object> requestParams = new HashMap<String, Object>();
            requestParams = getPartyLedgerMap(request);
            JSONArray DataJArr = accGoodsReceiptServiceDAO.getVendorPartyLedgerSummary(request, requestParams);
            JSONArray pagedJArr = DataJArr;
            String start = request.getParameter(START);
            String limit = request.getParameter(LIMIT);
            if (!StringUtil.isNullOrEmpty(start) && !StringUtil.isNullOrEmpty(limit)) {
                pagedJArr = StringUtil.getPagedJSON(pagedJArr, Integer.parseInt(start), Integer.parseInt(limit));
            }
            jobj.put(DATA, pagedJArr);
            jobj.put(COUNT, DataJArr.length());
            issuccess = true;
        } catch (SessionExpiredException | ServiceException ex) {
            msg = ex.getMessage();
            Logger.getLogger(accGoodsReceiptControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
        }catch (Exception ex) {
            msg = "accGoodsReceiptControllerCMN.getVendorPartyLedgerSummary : " + ex.getMessage();
        } finally {
            try {
                jobj.put(SUCCESS, issuccess);
                jobj.put(MSG, msg);
            } catch (JSONException ex) {
                Logger.getLogger(accGoodsReceiptController.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return new ModelAndView(JSONVIEW, MODEL, jobj.toString());
    }

    public ModelAndView exportVendorPartyLedgerSummary(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        boolean issuccess = false;
        JSONObject mainJobj = new JSONObject();
        String view = "jsonView_ex";
        String msg = "";
        int totalCount = 0;
        try {
            HashMap<String, Object> requestParams = new HashMap<String, Object>();
            requestParams = getPartyLedgerMap(request);
            JSONArray invJArr = accGoodsReceiptServiceDAO.getVendorPartyLedgerSummary(request, requestParams);
            JSONArray jArr = invJArr;
            jobj.put("data", jArr);
            jobj.put("count", totalCount);
            String fileType = request.getParameter("filetype");
            if (StringUtil.equal(fileType, "print")) {
                String GenerateDate = authHandler.getDateFormatter(request).format(new Date());
                jobj.put("GenerateDate", GenerateDate);
                view = "jsonView-empty";
            }
            exportDaoObj.processRequest(request, response, jobj);
            issuccess = true;
        } catch (SessionExpiredException ex) {
            Logger.getLogger(accGoodsReceiptControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
            issuccess = false;
            msg = ex.getMessage();
        } catch (Exception ex) {
            issuccess = false;
            msg = "accGoodsReceiptControllerCMN.deleteBillingInvoices : " + ex.getMessage();
        } finally {
            try {
                jobj.put("success", issuccess);
                jobj.put("msg", msg);
            } catch (JSONException ex) {
                Logger.getLogger(accGoodsReceiptControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return new ModelAndView(view, "model", jobj.toString());
    }

    public ModelAndView getVendorPartyLedgerSummariesedJasper(HttpServletRequest request, HttpServletResponse response) throws ServiceException, SessionExpiredException {
        Map<String, Object> agedReceivableMap = new HashMap<String, Object>();
        String view = "";
        String filename = "";
        AgedReceivable agedReceivable = new AgedReceivable();
        ArrayList<AgedReceivable> agedReceivableList = new ArrayList<AgedReceivable>();
        try {
            int templateflag = Integer.parseInt(request.getParameter("templateflag"));
            view = "PartyLedgerSummarised";
            filename = "PartyLedgerSummarised";

            String companyid = sessionHandlerImpl.getCompanyid(request);
            KwlReturnObject cmpresult = accountingHandlerDAOobj.getObject(Company.class.getName(), companyid);
            Company company = (Company) cmpresult.getEntityList().get(0);

            agedReceivable.setName(company.getCompanyName());
            agedReceivable.setEmail(company.getEmailID() != null ? company.getEmailID() : "");
            agedReceivable.setFax(company.getFaxNumber() != null ? company.getFaxNumber() : "");
            agedReceivable.setPhone(company.getPhoneNumber() != null ? company.getPhoneNumber() : "");
            KWLCurrency currency = company.getCurrency();
            agedReceivable.setCurrencyinword(currency.getName().toString());
            SimpleDateFormat df = new SimpleDateFormat("dd/MM/yyyy");
            String endDate = df.format(authHandler.getGlobalDateFormat().parse(request.getParameter("enddate")));
            Calendar c = Calendar.getInstance();
            c.setTime(df.parse(endDate)); // number of days to substract
            endDate = df.format(c.getTime());
            String startDate = df.format(authHandler.getGlobalDateFormat().parse(request.getParameter("stdate")));
            String date = "From Date : " + startDate + ",To Date : " + endDate;
            agedReceivable.setDateRange(date);
            KwlReturnObject result = accountingHandlerDAOobj.getObject(CompanyAccountPreferences.class.getName(), sessionHandlerImpl.getCompanyid(request));
            CompanyAccountPreferences companyAccountPreferences = (CompanyAccountPreferences) result.getEntityList().get(0);
            String fiscalstart = df.format(companyAccountPreferences.getFinancialYearFrom());
            Calendar c1 = Calendar.getInstance();
            c1.setTime(df.parse(fiscalstart));
            c1.add(Calendar.YEAR, 1); // number of years to add
            c1.add(Calendar.DATE, -1);
            String fiscalend = df.format(c1.getTime());
            String period = fiscalstart + " - " + fiscalend;
            agedReceivable.setStartDate(period);

            ArrayList<PartyLedger> agedReceivableSubReportList = new ArrayList< PartyLedger>();
            JSONArray invJArr = new JSONArray();
            HashMap<String, Object> requestParams = new HashMap<String, Object>();
            requestParams = getPartyLedgerMap(request);
            invJArr = accGoodsReceiptServiceDAO.getVendorPartyLedgerSummary(request, requestParams);

            double open_debit = 0, open_credit = 0, debit = 0, credit = 0, closing = 0;

            PartyLedger pl = null;
            for (int i = 0; i < invJArr.length(); i++) {
                JSONObject jobj = invJArr.getJSONObject(i);
                pl = new PartyLedger();
                if (jobj.has("personname")) {
                    pl.setPerson(jobj.getString("personname"));
                }
                if (jobj.has("code")) {
                    pl.setCode(jobj.getString("code"));
                }
                if (jobj.has("d_open_amount_base")) {
                    pl.setOpen_debit(jobj.getDouble("d_open_amount_base"));
                    open_debit += jobj.getDouble("d_open_amount_base");
                }
                if (jobj.has("c_open_amount_base")) {
                    pl.setOpen_credit(jobj.getDouble("c_open_amount_base"));
                    open_credit += jobj.getDouble("c_open_amount_base");
                }
                if (jobj.has("d_amount_base")) {
                    pl.setDebit(jobj.getDouble("d_amount_base"));
                    debit += jobj.getDouble("d_amount_base");
                }
                if (jobj.has("c_amount_base")) {
                    pl.setCredit(jobj.getDouble("c_amount_base"));
                    credit += jobj.getDouble("c_amount_base");
                }
                if (jobj.has("balance_base")) {
                    pl.setClosing(jobj.getDouble("balance_base"));
                    closing += jobj.getDouble("balance_base");
                }
                agedReceivableSubReportList.add(pl);
            }

            agedReceivableMap.put("open_debit", open_debit);
            agedReceivableMap.put("open_credit", open_credit);
            agedReceivableMap.put("debit", debit);
            agedReceivableMap.put("credit", credit);
            agedReceivableMap.put("closing", closing);
            agedReceivableMap.put("AgedReceivableSubReportData", new JRBeanCollectionDataSource(agedReceivableSubReportList));
            agedReceivableList.add(agedReceivable);
            agedReceivableMap.put("format", "pdf");
            agedReceivableMap.put("person", "Vendor");
            String fileName1 = StorageHandler.GetDocStorePath() + companyid + "_template" + FileUploadHandler.getCompanyImageExt();
            String fileName2 = StorageHandler.GetDocStorePath() + companyid + "_onlyLogo" + FileUploadHandler.getCompanyImageExt();
            if (templateflag == Constants.sms_templateflag || templateflag == Constants.smsholding_templateflag) {
                agedReceivableMap.put("imagePath", fileName2);
            } else {
                agedReceivableMap.put("imagePath", fileName1);
            }
            agedReceivableMap.put("basecurr", currency.getName() != null ? currency.getName().toString() : currency.getSymbol());
            agedReceivableMap.put("datasource", new JRBeanCollectionDataSource(agedReceivableList));
            agedReceivableMap.put("companyaddress", AccountingAddressManager.getCompanyDefaultBillingAddress(companyid, accountingHandlerDAOobj));
            InputStream inputStream = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/" + filename + ".jrxml");
            InputStream inputStreamSubReport = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/" + filename + "SubReport" + ".jrxml");
            JasperDesign jasperDesign = JRXmlLoader.load(inputStream);
            JasperReport jasperReport = JasperCompileManager.compileReport(jasperDesign);
            JasperDesign jasperDesignSubReport = JRXmlLoader.load(inputStreamSubReport);
            JasperReport jasperReportSubReport = JasperCompileManager.compileReport(jasperDesignSubReport);
            agedReceivableMap.put("AgedReceivableSubReport", jasperReportSubReport);
            JRBeanCollectionDataSource beanColDataSource = new JRBeanCollectionDataSource(agedReceivableList);
            JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, agedReceivableMap, beanColDataSource);

            JRPdfExporter exp = new JRPdfExporter();
            exp.setParameter(JRPdfExporterParameter.JASPER_PRINT, jasperPrint);
            exp.setParameter(JRPdfExporterParameter.OUTPUT_STREAM, response.getOutputStream());
            response.setHeader("Content-Disposition", "attachment;filename=\"" + filename + "_v1.pdf\"");
            exp.exportReport();

        } catch (Exception ex) {
            Logger.getLogger(accGoodsReceiptControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
        }
        return new ModelAndView(view, agedReceivableMap);
    }

    public ModelAndView exportVendorPartyLedgerDetails(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        boolean issuccess = false;
        JSONObject mainJobj = new JSONObject();
        String view = "jsonView_ex";
        String msg = "";
        int totalCount = 0;
        try {
            ModelAndView result = getVendorPartyLedgerDetails(request, response);
            String model = (String) result.getModel().get("model");
            JSONObject objJSONObj = new JSONObject(model);
            JSONArray DataJArr = objJSONObj.getJSONArray("data");
            totalCount = DataJArr.length();
            JSONArray jArr = DataJArr;
            jobj.put("data", jArr);
            jobj.put("count", totalCount);
            String fileType = request.getParameter("filetype");
            if (StringUtil.equal(fileType, "print")) {
                String GenerateDate = authHandler.getDateFormatter(request).format(new Date());
                jobj.put("GenerateDate", GenerateDate);
                view = "jsonView-empty";
            }
            exportDaoObj.processRequest(request, response, jobj);
            issuccess = true;
        } catch (SessionExpiredException ex) {
            Logger.getLogger(accGoodsReceiptControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
            issuccess = false;
            msg = ex.getMessage();
        } catch (Exception ex) {
            issuccess = false;
            msg = "accGoodsReceiptControllerCMN.deleteBillingInvoices : " + ex.getMessage();
        } finally {
            try {
                jobj.put("success", issuccess);
                jobj.put("msg", msg);
            } catch (JSONException ex) {
                Logger.getLogger(accGoodsReceiptControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return new ModelAndView(view, "model", jobj.toString());
    }

    public ModelAndView getVendorPartyLedgerDetailsJasper(HttpServletRequest request, HttpServletResponse response) throws ServiceException, SessionExpiredException {
        Map<String, Object> agedReceivableMap = new HashMap<String, Object>();
        String view = "";
        String filename = "";
        AgedReceivable agedReceivable = new AgedReceivable();
        ArrayList<AgedReceivable> agedReceivableList = new ArrayList<AgedReceivable>();
        try {
            int templateflag = Integer.parseInt(request.getParameter("templateflag"));
            view = "PartyLedgerDetails";
            filename = "PartyLedgerDetails";

            String companyid = sessionHandlerImpl.getCompanyid(request);
            KwlReturnObject cmpresult = accountingHandlerDAOobj.getObject(Company.class.getName(), companyid);
            Company company = (Company) cmpresult.getEntityList().get(0);

            agedReceivable.setName(company.getCompanyName());
            agedReceivable.setEmail(company.getEmailID() != null ? company.getEmailID() : "");
            agedReceivable.setFax(company.getFaxNumber() != null ? company.getFaxNumber() : "");
            agedReceivable.setPhone(company.getPhoneNumber() != null ? company.getPhoneNumber() : "");
            KWLCurrency currency = company.getCurrency();
            agedReceivable.setCurrencyinword(currency.getName() != null ? currency.getName().toString() : currency.getSymbol());
            agedReceivable.setAmountDue1Header("Agent Name");
            SimpleDateFormat df = new SimpleDateFormat("dd/MM/yyyy");
            String endDate = df.format(authHandler.getGlobalDateFormat().parse(request.getParameter("enddate")));
            Calendar c = Calendar.getInstance();
            c.setTime(df.parse(endDate)); // number of days to substract
            endDate = df.format(c.getTime());
            String startDate = df.format(authHandler.getGlobalDateFormat().parse(request.getParameter("stdate")));
            String date = "From Date : " + startDate + ",To Date : " + endDate;
            agedReceivable.setDateRange(date);
            KwlReturnObject result = accountingHandlerDAOobj.getObject(CompanyAccountPreferences.class.getName(), sessionHandlerImpl.getCompanyid(request));
            CompanyAccountPreferences companyAccountPreferences = (CompanyAccountPreferences) result.getEntityList().get(0);
            String fiscalstart = df.format(companyAccountPreferences.getFinancialYearFrom());
            Calendar c1 = Calendar.getInstance();
            c1.setTime(df.parse(fiscalstart));
            c1.add(Calendar.YEAR, 1); // number of years to add
            c1.add(Calendar.DATE, -1);
            String fiscalend = df.format(c1.getTime());
            String period = fiscalstart + " - " + fiscalend;
            agedReceivable.setStartDate(period);

            ArrayList<PartyLedger> agedReceivableSubReportList = new ArrayList< PartyLedger>();
            JSONArray invJArr = new JSONArray();
            ModelAndView result1 = getVendorPartyLedgerDetails(request, response);
            String model = (String) result1.getModel().get("model");
            JSONObject objJSONObj = new JSONObject(model);
            invJArr = objJSONObj.getJSONArray("data");
            double debit = 0, credit = 0, closing = 0;

            PartyLedger pl = null;
            for (int i = 0; i < invJArr.length(); i++) {
                JSONObject jobj = invJArr.getJSONObject(i);
                pl = new PartyLedger();
                if (jobj.has("personname")) {
                    pl.setPerson(jobj.getString("personname"));
                }
                if (jobj.has("type")) {
                    pl.setEntryType(jobj.getString("type"));
                }
                if (jobj.has("currencyname")) {
                    pl.setCurrency(jobj.getString("currencyname"));
                }
                if (jobj.has("code")) {
                    pl.setCode(jobj.getString("code"));
                }
                if (jobj.has("d_amount_base")) {
                    pl.setDebit(jobj.getDouble("d_amount_base"));
                    debit += jobj.getDouble("d_amount_base");
                }
                if (jobj.has("c_amount_base")) {
                    pl.setCredit(jobj.getDouble("c_amount_base"));
                    credit += jobj.getDouble("c_amount_base");
                }
                if (jobj.has("balance_base")) {
                    pl.setClosing(jobj.getDouble("balance_base"));
                    closing += jobj.getDouble("balance_base");
                }
                pl.setBasecurr(currency.getSymbol() != null ? currency.getSymbol().toString() : currency.getName());
                pl.setSp_agent(jobj.optString("salesPersonName", ""));
                if (jobj.has("Custom_Property Address")) {
                    pl.setPropaddr("Property Address: " + jobj.getString("Custom_Property Address"));
                }
                pl.setDate(jobj.optString("date") != null ? df.format(Date.parse(jobj.getString("date"))) : "");
                pl.setEntryNumber(jobj.optString("billno") != null ? jobj.getString("billno") : "");
                agedReceivableSubReportList.add(pl);
            }

            agedReceivableMap.put("debit", debit);
            agedReceivableMap.put("credit", credit);
            agedReceivableMap.put("closing", debit - credit);
            agedReceivableMap.put("AgedReceivableSubReportData", new JRBeanCollectionDataSource(agedReceivableSubReportList));
            agedReceivableList.add(agedReceivable);
            agedReceivableMap.put("format", "pdf");
            agedReceivableMap.put("person", "Vendor");
            String fileName1 = StorageHandler.GetDocStorePath() + companyid + "_template" + FileUploadHandler.getCompanyImageExt();
            String fileName2 = StorageHandler.GetDocStorePath() + companyid + "_onlyLogo" + FileUploadHandler.getCompanyImageExt();
            if (templateflag == Constants.sms_templateflag || templateflag == Constants.smsholding_templateflag) {
                agedReceivableMap.put("imagePath", fileName2);
            } else {
                agedReceivableMap.put("imagePath", fileName1);
            }
            agedReceivableMap.put("basecurr", currency.getName() != null ? currency.getName().toString() : currency.getSymbol());
            agedReceivableMap.put("datasource", new JRBeanCollectionDataSource(agedReceivableList));
            agedReceivableMap.put("companyaddress", AccountingAddressManager.getCompanyDefaultBillingAddress(companyid, accountingHandlerDAOobj));
            InputStream inputStream = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/" + filename + ".jrxml");
            InputStream inputStreamSubReport = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/" + filename + "SubReport" + ".jrxml");
            JasperDesign jasperDesign = JRXmlLoader.load(inputStream);
            JasperReport jasperReport = JasperCompileManager.compileReport(jasperDesign);
            JasperDesign jasperDesignSubReport = JRXmlLoader.load(inputStreamSubReport);
            JasperReport jasperReportSubReport = JasperCompileManager.compileReport(jasperDesignSubReport);
            agedReceivableMap.put("AgedReceivableSubReport", jasperReportSubReport);
            JRBeanCollectionDataSource beanColDataSource = new JRBeanCollectionDataSource(agedReceivableList);
            JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, agedReceivableMap, beanColDataSource);

            JRPdfExporter exp = new JRPdfExporter();
            exp.setParameter(JRPdfExporterParameter.JASPER_PRINT, jasperPrint);
            exp.setParameter(JRPdfExporterParameter.OUTPUT_STREAM, response.getOutputStream());
            response.setHeader("Content-Disposition", "attachment;filename=\"" + filename + "_v1.pdf\"");
            exp.exportReport();

        } catch (Exception ex) {
            Logger.getLogger(accGoodsReceiptControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
        }
        return new ModelAndView(view, agedReceivableMap);
    }

    public ModelAndView getVendorPartyLedgerDetails(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        JSONArray DataJArr = new JSONArray();
        boolean issuccess = false;
        double balance_base = 0;
        JSONObject tempObj = new JSONObject();
        String msg = "";
        try {
            HashMap<String, Object> requestParams = getGoodsReceiptMap(request);
            boolean consolidateFlag = request.getParameter("consolidateFlag") != null ? Boolean.parseBoolean(request.getParameter("consolidateFlag")) : false;
            String[] companyids = (consolidateFlag && request.getParameter("companyids") != null) ? request.getParameter("companyids").split(",") : sessionHandlerImpl.getCompanyid(request).split(",");
            String gcurrencyid = (consolidateFlag && request.getParameter("gcurrencyid") != null) ? request.getParameter("gcurrencyid") : sessionHandlerImpl.getCurrencyID(request);
            boolean report = request.getParameter("report") != null ? Boolean.parseBoolean(request.getParameter("report")) : false;
            boolean isAged = request.getParameter("isAged") != null ? Boolean.parseBoolean(request.getParameter("isAged")) : false;
            requestParams.put("report", report);
            boolean consignmentNoForGr = Boolean.parseBoolean(request.getParameter("consignmentNoForGr"));
            boolean isInvoice = Boolean.parseBoolean(request.getParameter("isInvoice"));
            if (request.getParameter("getRepeateInvoice") != null) {
                requestParams.put("getRepeateInvoice", request.getParameter("getRepeateInvoice"));
            }

            if (request.getParameter("pagingFlag") != null) {
                requestParams.put("pagingFlag", StringUtil.getBoolean(request.getParameter("pagingFlag")));
            }

            if (request.getParameter("ccrAllRecords") != null) //All CC records flag
            {
                requestParams.put("ccrAllRecords", StringUtil.getBoolean(request.getParameter("ccrAllRecords")));
            }
            boolean isForTemplate = false;
            if (!StringUtil.isNullOrEmpty(request.getParameter("isForTemplate"))) {
                isForTemplate = Boolean.parseBoolean(request.getParameter("isForTemplate"));
            }
            String companyid = "";
            String dir = "";
            String sort = "";
            if (!StringUtil.isNullOrEmpty(request.getParameter("dir")) && !StringUtil.isNullOrEmpty(request.getParameter("sort"))) {
                dir = request.getParameter("dir");
                sort = request.getParameter("sort");
                requestParams.put("sort", sort);
                requestParams.put("dir", dir);
            }
            
            companyid = companyids[0];
            KwlReturnObject result1 = accVendorDAOobj.getVendorForAgedPayable(requestParams);
            List <Object> venidlist = result1.getEntityList();

            for (Object venid : venidlist) {
                balance_base = 0;
                request.setAttribute("companyid", companyid);
                request.setAttribute("gcurrencyid", gcurrencyid);
                requestParams.put("companyid", companyid);
                requestParams.put("gcurrencyid", gcurrencyid);
                requestParams.put("isForTemplate", isForTemplate);
                requestParams.put("custVendorID", venid);   // SDP-3351 - Passing vendor id in paeameters to get records of particular vendor
                requestParams.put(GoodsReceiptCMNConstants.VENDORID, venid);
                requestParams.put(GoodsReceiptCMNConstants.ACCID, venid);
                requestParams.put("cntype", null);
                requestParams.put("isAgedSummary", true);
                boolean isBadDebtInvoices = false;
                if (!StringUtil.isNullOrEmpty(request.getParameter("isBadDebtInvoices"))) {// Changes For Malasian Company
                    isBadDebtInvoices = Boolean.parseBoolean(request.getParameter("isBadDebtInvoices"));
                    if (isBadDebtInvoices) {
                        int baddebttype = Integer.parseInt(request.getParameter("baddebttype"));
                        requestParams.put("isBadDebtInvoices", isBadDebtInvoices);
                        requestParams.put("baddebttype", baddebttype);
                        requestParams.put("selectedCriteriaDate", request.getParameter("selectedCriteriaDate"));
                        requestParams.put("badDebtCriteria", request.getParameter("badDebtCriteria"));

                        if (baddebttype == 0) {
                            requestParams.put("badDebtCalculationDate", request.getParameter("badDebtCalculationDate"));
                            requestParams.put("badDebtCriteria", Integer.parseInt(request.getParameter("badDebtCriteria")));
                        } else {
                            requestParams.put("badDebtCalculationFromDate", request.getParameter("badDebtCalculationFromDate"));
                            requestParams.put("badDebtCalculationToDate", request.getParameter("badDebtCalculationToDate"));
                        }
                    }
                }

                //Opening First
                if (isAged) {
                    requestParams.put("agedReport", true);
                    if (requestParams.containsKey("start")) { // In case of Ageing Removing paging because it is applying on each vendor data (CN/DN etc). Due to this complete number of record not showing in AP Report.  
                        requestParams.remove("start");
                    }
                    if (requestParams.containsKey("limit")) {
                        requestParams.remove("limit");
                    }

                    JSONArray OBJArryInvoice = new JSONArray();
                    KwlReturnObject result = accGoodsReceiptobj.getOpeningBalanceInvoices(requestParams);
                    if (result != null && result.getEntityList() != null && !result.getEntityList().isEmpty()) {
                        OBJArryInvoice = AccGoodsReceiptServiceHandler.getAgedOpeningBalanceInvoiceJson(requestParams, result.getEntityList(), OBJArryInvoice, accCurrencyDAOobj, accountingHandlerDAOobj, accGoodsReceiptCommon, accAccountDAOobj, fieldDataManagercntrl);
                    }
                    for (int i = 0; i < OBJArryInvoice.length(); i++) {
                        tempObj = OBJArryInvoice.getJSONObject(i);
                        balance_base = balance_base - tempObj.getDouble("amountinbase");
                        tempObj.put("c_amount_base", tempObj.getDouble("amountinbase"));
                        tempObj.put("balance_base", balance_base);
                        tempObj.put("type", "Opening " + tempObj.getString("type"));
                        DataJArr.put(tempObj);
                    }

                    JSONArray OBJArryDebitNote = new JSONArray();
                    result = accDebitNoteobj.getOpeningBalanceDNs(requestParams);
                    if (result != null && result.getEntityList() != null && !result.getEntityList().isEmpty()) {
                        OBJArryDebitNote = AccGoodsReceiptServiceHandler.getAgedOpeningBalanceDebitNoteJson(requestParams, result.getEntityList(), OBJArryDebitNote, accCurrencyDAOobj, accountingHandlerDAOobj, accReceiptDAOobj,accDebitNoteobj,accAccountDAOobj, fieldDataManagercntrl);
                    }
                    for (int i = 0; i < OBJArryDebitNote.length(); i++) {
                        tempObj = OBJArryDebitNote.getJSONObject(i);
                        balance_base = balance_base + tempObj.getDouble("amountinbase");
                        tempObj.put("d_amount_base", tempObj.getDouble("amountinbase"));
                        tempObj.put("balance_base", balance_base);
                        tempObj.put("type", "Opening " + tempObj.getString("type"));
                        DataJArr.put(tempObj);
                    }

                    JSONArray OBJArryCreditNote = new JSONArray();
                    result = accCreditNoteDAOobj.getOpeningBalanceVendorCNs(requestParams);
                    if (result != null && result.getEntityList() != null && !result.getEntityList().isEmpty()) {
                        OBJArryCreditNote = AccGoodsReceiptServiceHandler.getAgedOpeningBalanceCreditNoteJson(requestParams, result.getEntityList(), OBJArryCreditNote, accCurrencyDAOobj, accountingHandlerDAOobj, accPaymentDAOobj,accVendorPaymentobj,accDebitNoteobj,accAccountDAOobj, fieldDataManagercntrl);
                    }
                    for (int i = 0; i < OBJArryCreditNote.length(); i++) {
                        tempObj = OBJArryCreditNote.getJSONObject(i);
                        balance_base = balance_base - tempObj.getDouble("amountinbase");
                        tempObj.put("c_amount_base", tempObj.getDouble("amountinbase"));
                        tempObj.put("balance_base", balance_base);
                        tempObj.put("type", "Opening "+tempObj.getString("type"));
                        DataJArr.put(tempObj);
                    }

                    JSONArray OBJArryPayment = new JSONArray();
                    result = accVendorPaymentobj.getOpeningBalancePayments(requestParams);
                    if (result != null && result.getEntityList() != null && !result.getEntityList().isEmpty()) {
                        OBJArryPayment = AccGoodsReceiptServiceHandler.getAgedOpeningBalancePaymentJson(requestParams, result.getEntityList(), OBJArryPayment, accCurrencyDAOobj, accountingHandlerDAOobj, accVendorPaymentobj,accAccountDAOobj, fieldDataManagercntrl);
                    }
                    for (int i = 0; i < OBJArryPayment.length(); i++) {
                        tempObj = OBJArryPayment.getJSONObject(i);
                        balance_base = balance_base + tempObj.getDouble("amountinbase");
                        tempObj.put("d_amount_base", tempObj.getDouble("amountinbase"));
                        tempObj.put("balance_base", balance_base);
                        tempObj.put("type", "Opening "+tempObj.getString("type"));
                        DataJArr.put(tempObj);
                    }

                }

                if (!StringUtil.isNullOrEmpty(request.getParameter("billid"))) {
                    KwlReturnObject result = accountingHandlerDAOobj.getObject(GoodsReceipt.class.getName(), request.getParameter("billid"));
                    GoodsReceipt gr = (GoodsReceipt) result.getEntityList().get(0);
                    requestParams.put("isFixedAsset", gr.isFixedAssetInvoice());
                }
                KwlReturnObject result = accGoodsReceiptobj.getGoodsReceiptsMerged(requestParams);
                List list = result.getEntityList();
                JSONArray OBJArryInvoice = new JSONArray();
                if (consignmentNoForGr || isInvoice) {
                    OBJArryInvoice = accGoodsReceiptServiceHandler.getGoodsReceiptsJsonMergedForConsignmentNo(requestParams, list, OBJArryInvoice, accountingHandlerDAOobj, accCurrencyDAOobj, accGoodsReceiptobj, accAccountDAOobj, accGoodsReceiptCommon, accTaxObj);
                } else {
                    OBJArryInvoice = accGoodsReceiptServiceHandler.getGoodsReceiptsJsonMerged(requestParams, list, OBJArryInvoice, accountingHandlerDAOobj, accCurrencyDAOobj, accGoodsReceiptobj, accAccountDAOobj, accGoodsReceiptCommon, accTaxObj);
                }
                for (int i = 0; i < OBJArryInvoice.length(); i++) {
                    tempObj = OBJArryInvoice.getJSONObject(i);
                    balance_base = balance_base - tempObj.getDouble("amountinbase");
                    tempObj.put("c_amount_base", tempObj.getDouble("amountinbase"));
                    tempObj.put("balance_base", balance_base);
                    DataJArr.put(tempObj);
                }
                if (isAged) {
                    JSONArray debitNotejArr = new JSONArray();
                    result = accDebitNoteobj.getDebitNoteMerged(requestParams);
                    if (result != null && result.getEntityList() != null && !result.getEntityList().isEmpty()) {
                        debitNotejArr = AccGoodsReceiptServiceHandler.getDebitNotesMergedJson(requestParams, result.getEntityList(), debitNotejArr, accCurrencyDAOobj, accountingHandlerDAOobj, accReceiptDAOobj, accDebitNoteobj,accAccountDAOobj, fieldDataManagercntrl, accJournalEntryobj);
                    }
                    for (int i = 0; i < debitNotejArr.length(); i++) {
                        tempObj = debitNotejArr.getJSONObject(i);
                        balance_base = balance_base + tempObj.getDouble("amountinbase");
                        tempObj.put("d_amount_base", tempObj.getDouble("amountinbase"));
                        tempObj.put("balance_base", balance_base);
                        DataJArr.put(tempObj);
                    }

                    requestParams.put("cntype", 4);//This is used for getting Credit note against vendor 
                    JSONArray CreditNotejArr = new JSONArray();
                    result = accCreditNoteDAOobj.getCreditNoteMerged(requestParams);
                    if (result != null && result.getEntityList() != null && !result.getEntityList().isEmpty()) {
                        CreditNotejArr = AccGoodsReceiptServiceHandler.getCreditNotesMergedJson(requestParams, result.getEntityList(), CreditNotejArr, accCurrencyDAOobj, accountingHandlerDAOobj, accPaymentDAOobj,accVendorPaymentobj,accDebitNoteobj,accAccountDAOobj, fieldDataManagercntrl, accJournalEntryobj);
                    }
                    for (int i = 0; i < CreditNotejArr.length(); i++) {
                        tempObj = CreditNotejArr.getJSONObject(i);
                        balance_base = balance_base - tempObj.getDouble("amountinbase");
                        tempObj.put("c_amount_base", tempObj.getDouble("amountinbase"));
                        tempObj.put("balance_base", balance_base );
                        DataJArr.put(tempObj);
                    }

                    JSONArray makePaymentJArr = new JSONArray();
                    requestParams.put("paymentWindowType", 1);//Payment to Vendor record
                    result = accVendorPaymentobj.getPayments(requestParams);
                    companyid = sessionHandlerImpl.getCompanyid(request);
                    requestParams.put("companyid", companyid);
                    if (result != null && result.getEntityList() != null && !result.getEntityList().isEmpty()) {
                        makePaymentJArr = AccGoodsReceiptServiceHandler.getPaymentsJson(requestParams, result.getEntityList(), makePaymentJArr, accCurrencyDAOobj, accountingHandlerDAOobj, accVendorPaymentobj);
                    }
                    for (int i = 0; i < makePaymentJArr.length(); i++) {
                        tempObj = makePaymentJArr.getJSONObject(i);
                        balance_base = balance_base + tempObj.getDouble("amountinbase");
                        tempObj.put("d_amount_base", tempObj.getDouble("amountinbase"));
                        tempObj.put("balance_base", balance_base);
                        DataJArr.put(tempObj);
                    }
                    
                    requestParams.put("allAdvPayment", true); // needs only refund type record so that putted true
                    requestParams.put("paymentWindowType", 2);//Receipt to Vendor record
                    JSONArray receivePaymentJArr = new JSONArray();
                    result = accReceiptDAOobj.getReceipts(requestParams);
                    receivePaymentJArr = AccInvoiceServiceHandler.getReceiptsJson(requestParams, result.getEntityList(), receivePaymentJArr, accountingHandlerDAOobj, authHandlerDAOObj, accCurrencyDAOobj, accReceiptDAOobj, request, accAccountDAOobj, fieldDataManagercntrl, accJournalEntryobj);
                    for (int i = 0; i < receivePaymentJArr.length(); i++) {
                        tempObj = receivePaymentJArr.getJSONObject(i);
                        balance_base = balance_base + tempObj.getDouble("amountinbase");
                        tempObj.put("d_amount_base", tempObj.getDouble("amountinbase"));
                        tempObj.put("balance_base", balance_base);
                        DataJArr.put(tempObj);
                    }
                    requestParams.remove("allAdvPayment");
                    requestParams.remove("paymentWindowType");
                }
            }
            int count = DataJArr.length();
            
            JSONArray pagedJson = DataJArr;
            String start = request.getParameter(START);
            String limit = request.getParameter(LIMIT);
            if (request.getParameter("filetype") == null) {
                if (!StringUtil.isNullOrEmpty(start) && !StringUtil.isNullOrEmpty(limit)) {
                    pagedJson = StringUtil.getPagedJSON(pagedJson, Integer.parseInt(start), Integer.parseInt(limit));
                }
            }
            jobj.put(DATA, pagedJson);
            jobj.put(COUNT, count);
            issuccess = true;
        } catch (SessionExpiredException | ServiceException ex) {
            msg = ex.getMessage();
            Logger.getLogger(accGoodsReceiptController.class.getName()).log(Level.SEVERE, null, ex);
        }  catch (Exception ex) {
            msg = "accGoodsReceiptController.getGoodsReceipts : " + ex.getMessage();
        } finally {
            try {
                jobj.put(SUCCESS, issuccess);
                jobj.put(MSG, msg);
            } catch (JSONException ex) {
                Logger.getLogger(accGoodsReceiptController.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return new ModelAndView(JSONVIEW, MODEL, jobj.toString());
    }
    

    /*
     * Set dimension values and custom fields for Global Section only
     */
    public String returnGlobalLevelCustomFieldDimensionValues(List lst, AccCustomData accCustomData, boolean iscustomfield, DateFormat df) {
        StringBuilder appendimensionString = new StringBuilder();
        try {
            HashMap<String, Object> CustomRequestParams = new HashMap<String, Object>();
            for( int cnt=0; cnt<lst.size();cnt++){
                String  data = "";
                FieldParams tmpcontyp = (FieldParams) lst.get(cnt);
                if (accCustomData != null) {
                    String coldata = accCustomData.getCol(tmpcontyp.getColnum());
                    DateFormat defaultDateFormat=new SimpleDateFormat(Constants.MMMMdyyyy);
                    Date dateFromDB=null;
                    if (!StringUtil.isNullOrEmpty(coldata)) {
                        int fieldType = tmpcontyp.getFieldtype();
                        switch (fieldType) {
                            case 3:
                                if (df != null) {
                                    try {
                                        dateFromDB = defaultDateFormat.parse(coldata);
                                        data = df.format(dateFromDB);
                                    } catch (ParseException p) {
                                        data = coldata;
                                    }
                                } else {
                                    data = coldata;
                                }
                                break;
                            case 4:
                                CustomRequestParams.clear();
                                CustomRequestParams.put(Constants.filter_names, Arrays.asList(FieldConstants.Crm_id, FieldConstants.Crm_deleteflag));
                                CustomRequestParams.put(Constants.filter_values, Arrays.asList(coldata, 0));
                                KwlReturnObject customresult = accAccountDAOobj.getCustomCombodata(CustomRequestParams);
                                if (customresult != null) {
                                    List customDataList = customresult.getEntityList();
                                    Iterator cite = customDataList.iterator();
                                    while (cite.hasNext()) {
                                        Object[] row = (Object[]) cite.next();
                                        FieldComboData combodata = (FieldComboData) row[0];
                                        data = combodata.getValue();
                                    }
                                }
                                break;
                            case 12:
                                HashMap<String, Object> checkListRequestParams = new HashMap<String, Object>();
                                String Colsplit[] = coldata.split(",");
                                for (int i = 0; i < Colsplit.length; i++) {
                                    coldata = Colsplit[i];
                                    checkListRequestParams.put(Constants.filter_names, Arrays.asList(FieldConstants.Crm_id, FieldConstants.Crm_deleteflag));
                                    checkListRequestParams.put(Constants.filter_values, Arrays.asList(coldata, 0));
                                    ArrayList order_by = new ArrayList();
                                    ArrayList order_type = new ArrayList();
                                    order_by.add("itemsequence");
                                    order_type.add("asc");
                                    checkListRequestParams.put("order_by", order_by);
                                    checkListRequestParams.put("order_type", order_type);
                                    KwlReturnObject checkListresult = accAccountDAOobj.getCustomCombodata(checkListRequestParams);
                                    List checklst = checkListresult.getEntityList();
                                    Iterator checkite = checklst.iterator();
                                    while (checkite.hasNext()) {
                                        Object[] row = (Object[]) checkite.next();
                                        FieldComboData checkfield = (FieldComboData) row[0];
                                        data += checkfield.getValue() + ",";
                                    }
                                }
                                data = data.substring(0, data.length() - 1);
                                break;
                            case 13:
                                data = coldata.replaceAll("(\r\n|\n\r|\r|\n)", "<br />");
                                break;
                            default:
                                data = coldata;
                                break;
                        }
                    } else {
                        data = "";
                    }
                }
                 if (!StringUtil.isNullOrEmpty(data)) {
                    if (iscustomfield) { //For global level customfields
                        String dimensionPlaceholder = CustomDesignerConstants.CustomFieldKeyValuePair;
                        dimensionPlaceholder = dimensionPlaceholder.replace(CustomDesignerConstants.CustomFieldLabel, tmpcontyp.getFieldlabel());
                        dimensionPlaceholder = dimensionPlaceholder.replace(CustomDesignerConstants.CustomFieldValue, data);
                        appendimensionString.append(dimensionPlaceholder);
                    } else {//for global level dimensions
                        String dimensionPlaceholder = CustomDesignerConstants.DimensionKeyValuePair;
                        dimensionPlaceholder = dimensionPlaceholder.replace(CustomDesignerConstants.DimensionLabel, tmpcontyp.getFieldlabel());
                        dimensionPlaceholder = dimensionPlaceholder.replace(CustomDesignerConstants.DimensionValue, data);
                        appendimensionString.append(dimensionPlaceholder);
                    }
                }
            }
        } catch (Exception ex) {
        }
        return appendimensionString.toString();
    }
    private String getNewBatchJson(Map<String, Object> requestParams, Product product, String documentid, HashMap<String, Integer> fieldMap, Map<String, List<Object[]>> baMap, HashMap<String, String> replaceFieldMap1, HashMap<String, String> customFieldMap, HashMap<String, String> customDateFieldMap) throws ServiceException, SessionExpiredException, JSONException {
        JSONArray jSONArray = new JSONArray();
        try {
            DateFormat df = (DateFormat) requestParams.get(Constants.df);
            KwlReturnObject kmsg = null;
            boolean linkingFlag = false;
            boolean isFixedAsset = false;
            if (requestParams.containsKey("linkingFlag")) {
                linkingFlag = Boolean.parseBoolean(requestParams.get("linkingFlag").toString());
            }
            if (requestParams.containsKey("isFixedAsset") && requestParams.get("isFixedAsset")!=null) {
                isFixedAsset = (boolean)requestParams.get("isFixedAsset");
            }
            boolean isEdit = false;
            if (requestParams.containsKey("isEdit")) {
                isEdit = Boolean.parseBoolean(requestParams.get("isEdit").toString());
            }
            String companyid = requestParams.get(Constants.companyKey).toString();
            String moduleID = "";
            if (requestParams.containsKey("moduleID")) {
                moduleID = requestParams.get("moduleID").toString();
            }
            boolean isBatch = false;
            List<Object[]> batchserialdetails = null;
            if (!product.isIsBatchForProduct() && !product.isIslocationforproduct() && !product.isIswarehouseforproduct() && !product.isIsrowforproduct() && !product.isIsrackforproduct() && !product.isIsbinforproduct() && product.isIsSerialForProduct()) {
                kmsg = accCommonTablesDAO.getOnlySerialDetails(documentid, linkingFlag, moduleID, false, isEdit);
                batchserialdetails = kmsg.getEntityList();
            } else {
                isBatch = true;
                if (!product.isIsSerialForProduct() && baMap.containsKey(documentid)) {
                    batchserialdetails = baMap.get(documentid);
                } else {
                    kmsg = accCommonTablesDAO.getBatchSerialDetails(documentid, !product.isIsSerialForProduct(), linkingFlag, moduleID, false, isEdit, "");
                    batchserialdetails = kmsg.getEntityList();
                }
                
             }
            double ActbatchQty = 1;
            double batchQty = 0;
            if (batchserialdetails != null) {
                for (Object[] objArr : batchserialdetails) {
                    JSONObject obj = new JSONObject();
                    obj.put("id", objArr[0] != null ? (String) objArr[0] : "");
                    obj.put("batch", objArr[1] != null ? (String) objArr[1] : "");
                    obj.put("batchname", objArr[1] != null ? (String) objArr[1] : "");
                    obj.put("location", objArr[2] != null ? (String) objArr[2] : "");
                    obj.put("warehouse", objArr[3] != null ? (String) objArr[3] : "");
                    if (isBatch) {
                        obj.put("row", objArr[15] != null ? (String) objArr[15] : "");
                        obj.put("rack", objArr[16] != null ? (String) objArr[16] : "");
                        obj.put("bin", objArr[17] != null ? (String) objArr[17] : "");
                    }
                    String locationid = "";
                    String warehouseid = "";
                    String batchid = (String) objArr[0];
                    if (objArr[2] != null) {
                        locationid = (String) objArr[2];
                    }
                    if (objArr[3] != null) {
                        warehouseid = (String) objArr[3];
                    }
                    double quantity = getNewBatchRemainingQuantity(locationid, warehouseid, companyid, product.getID(), batchid, moduleID, isEdit, documentid);
                    obj.put("avlquantity", quantity);
                    if ((product.isIsBatchForProduct() || product.isIslocationforproduct() || product.isIswarehouseforproduct() || product.isIsrowforproduct() || product.isIsrackforproduct() || product.isIsbinforproduct()) && product.isIsSerialForProduct()) {
                        ActbatchQty = accCommonTablesDAO.getBatchQuantity(documentid, (String) objArr[0]);
                        if (batchQty == 0) {
                            batchQty = ActbatchQty;
                        }
                        if (batchQty == ActbatchQty) {
                            obj.put("isreadyonly", false);
                            obj.put("quantity", ActbatchQty);
                        } else {
                            obj.put("isreadyonly", true);
                            obj.put("quantity", "");
                        }
                    } else {
                        obj.put("isreadyonly", false);
                        obj.put("quantity", ActbatchQty);
                    }
                    if (!product.isIsBatchForProduct() && !product.isIslocationforproduct() && !product.isIswarehouseforproduct() && !product.isIsrowforproduct() && !product.isIsrackforproduct() && !product.isIsbinforproduct() && product.isIsSerialForProduct()) {
                        obj.put("mfgdate", "");
                        obj.put("expdate", "");
                    } else {
                        obj.put("mfgdate", objArr[4] != null ? df.format(objArr[4]) : "");
                        obj.put("expdate", objArr[5] != null ? df.format(objArr[5]) : "");
                    }
                    if ((product.isIsBatchForProduct() || product.isIslocationforproduct() || product.isIswarehouseforproduct() || product.isIsrowforproduct() || product.isIsrackforproduct() || product.isIsbinforproduct()) && !product.isIsSerialForProduct()) {
                        obj.put("quantity", objArr[11] != null ? objArr[11] : "");
                    }
                    obj.put("balance", 0);
                    obj.put("asset", "");
                    obj.put("serialnoid", objArr[7] != null ? (String) objArr[7] : "");
                    obj.put("serialno", objArr[8] != null ? (String) objArr[8] : "");
                    obj.put("purchasebatchid", objArr[0] != null ? (String) objArr[0] : "");
                    obj.put("purchaseserialid", objArr[7] != null ? (String) objArr[7] : "");
                    obj.put("expstart", (objArr[9] != null && !objArr[9].toString().equalsIgnoreCase("")) ? df.format(objArr[9]) : "");
                    obj.put("expend", (objArr[10] != null && !objArr[10].toString().equalsIgnoreCase("")) ? df.format(objArr[10]) : "");
                    obj.put("skufield", objArr[13] != null ? objArr[13] : "");
                    obj.put("documentid", documentid != null ? documentid : "");
                    obj.put("productid", product != null ? product.getID() : "");
                    HashMap<String, Object> hashMap = new HashMap<String, Object>();
                    hashMap.put("invoiceID", objArr[0]);
                    hashMap.put(Constants.companyKey, companyid);
                    /**
                     * Get document count attached to batch  and attachment id's
                     */
                    obj.put("attachment", 0);
                    obj.put("attachmentids", "");
                    KwlReturnObject object = accMasterItemsDAOobj.getBatchDocuments(hashMap);
                    if (object.getEntityList() != null && object.getEntityList().size()>0) {
                        obj.put("attachment", object.getEntityList().size());
                        List<Object[]> attachmentDetails = object.getEntityList();
                        String docids="";
                        for (Object[] attachmentArray : attachmentDetails) {
                            docids = docids + attachmentArray[3] + ",";
                        }
                        if (!StringUtil.isNullOrEmpty(docids)) {
                            docids = docids.substring(0, docids.length() - 1);
                        }
                        obj.put("attachmentids", docids);
                    }
                    if (linkingFlag && !isEdit) { //For geting only unused Serial batch details in DO
                        if (product.isIsSerialForProduct() && objArr[7] != null) {
                            KwlReturnObject result1 = accountingHandlerDAOobj.getObject(NewBatchSerial.class.getName(), objArr[7].toString());
                            NewBatchSerial newBatchSerial = (NewBatchSerial) result1.getEntityList().get(0);
                            if (newBatchSerial != null && newBatchSerial.getQuantitydue() == 0) {
                                continue;
                            }else if (newBatchSerial!=null && newBatchSerial.getLockquantity()>0 && moduleID.equals("28")){
                                break;
                            }
                        } else if (product.isIsBatchForProduct() && !product.isIsSerialForProduct() && objArr[0] != null) {
                            KwlReturnObject result1 = accountingHandlerDAOobj.getObject(NewProductBatch.class.getName(), objArr[0].toString());
                            NewProductBatch newProductBatch = (NewProductBatch) result1.getEntityList().get(0);
                            if (newProductBatch != null && newProductBatch.getQuantitydue() == 0) {
                                continue;
                            }
                            if(moduleID.equals("28") && newProductBatch != null && newProductBatch.getQuantitydue()>0 && product.isIsBatchForProduct()){
//                                 obj.put("quantity", newProductBatch.getQuantitydue()-newProductBatch.getLockquantity());
                                double realQuty=newProductBatch.getQuantitydue()-newProductBatch.getLockquantity();
                                 obj.put("avlquantity", realQuty<quantity?realQuty:quantity);
                                 
                            }
                        }
                    } else if (!linkingFlag && isEdit && moduleID.equals("28") && objArr[7]!=null) {
                        KwlReturnObject result1 = accountingHandlerDAOobj.getObject(NewBatchSerial.class.getName(), objArr[7].toString());
                        NewBatchSerial newBatchSerial = (NewBatchSerial) result1.getEntityList().get(0);
                        if (newBatchSerial != null && newBatchSerial.getLockquantity() > 0 && moduleID.equals("28")) {
                            continue;
                        }

                    }
                    if (objArr[14] != null && !objArr[14].toString().equalsIgnoreCase("")) {    //Get SerialDocumentMappingId
                        KwlReturnObject result1 = accountingHandlerDAOobj.getObject(SerialDocumentMapping.class.getName(), objArr[14].toString());
                        SerialDocumentMapping sdm = (SerialDocumentMapping) result1.getEntityList().get(0);
                        Map<String, Object> variableMap = new HashMap<String, Object>();
                        SerialCustomData serialCustomData = (SerialCustomData) sdm.getSerialCustomData();
                        HashMap<String, String> replaceFieldMap = new HashMap<String, String>();
                        AccountingManager.setCustomColumnValues(serialCustomData, fieldMap, replaceFieldMap, variableMap);
                        DateFormat defaultDateFormat=new SimpleDateFormat(Constants.MMMMdyyyy);
                        Date dateFromDB=null;
                        for (Map.Entry<String, Object> varEntry : variableMap.entrySet()) {
                            String coldata = varEntry.getValue().toString();
                            String valueForReport = "";
                            if (customFieldMap.containsKey(varEntry.getKey()) && coldata != null) {
                                try {
                                    String[] valueData = coldata.split(",");
                                    for (String value : valueData) {
                                        FieldComboData fieldComboData = (FieldComboData) kwlCommonTablesDAOObj.getClassObject(FieldComboData.class.getName(), value);
                                        if (fieldComboData != null) {
                                            valueForReport += value + ",";
                                        }
                                    }
                                    if (valueForReport.length() > 1) {
                                        valueForReport = valueForReport.substring(0, valueForReport.length() - 1);
                                    }
                                    obj.put(varEntry.getKey(), valueForReport);//fieldComboData.getValue()!=null ?fieldComboData.getValue():"");
                                } catch (Exception ex) {
                                    obj.put(varEntry.getKey(), coldata);
                                }
                            } else if (customDateFieldMap.containsKey(varEntry.getKey())) {
                                DateFormat df2 = new SimpleDateFormat("yyyy-MM-dd");
                                try {
                                    dateFromDB = defaultDateFormat.parse(coldata);
                                    coldata = df2.format(dateFromDB);
                                    //This code change is made because date will not be long value now,it will be date in String form refer ERP-32324 
                                } catch (Exception e) {
                                }
                                obj.put(varEntry.getKey(), coldata);
                            } else {
                                if (!StringUtil.isNullOrEmpty(coldata)) {
                                    obj.put(varEntry.getKey(), coldata);
                                }
                            }
                        }
                    }
                    jSONArray.put(obj);
                    batchQty--;

                }
            }
            
            if(isFixedAsset && jSONArray.length()==0){
                return "";
            }
        } catch (Exception ex) {
            Logger.getLogger(accGoodsReceiptControllerCMN.class.getName()).log(Level.INFO, ex.getMessage());
        }
        return jSONArray.toString();
    }
    /**
     * 
     * @param request
     * @param response
     * @Desc : Get Sub Product details for Assembly item
     * @return 
     */
    public ModelAndView getJobWorkOutIngradientDetails(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        String msg = "";
        boolean issuccess = false;
        JSONArray jArray = new JSONArray();
        try {
            JSONObject nObject = StringUtil.convertRequestToJsonObject(request);
            nObject = accGoodsReceiptServiceDAO.getJobWorkOutIngradientDetails(nObject);
            jArray = nObject.optJSONArray("data");
            issuccess = true;
            msg = "Ingradients are fetched successfully";

        } catch (Exception ex) {
            msg = ex.getMessage();
        } finally {
            try {
                jobj.put("success", issuccess);
                jobj.put("msg", msg);
                jobj.put("data", jArray);
                jobj.put("count", jArray.length());

            } catch (JSONException ex) {
            }
        }
        return new ModelAndView(successView, "model", jobj.toString());

    }
    /**
     * Function to get Purchase invoices with ITC reversal type.
     *
     * @param request
     * @param response
     * @return
     */
    public ModelAndView isAllITCReversal(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        String msg = "";
        boolean issuccess = false;
        JSONArray jArray = new JSONArray();
        try {
            JSONObject nObject = StringUtil.convertRequestToJsonObject(request);
            jobj = accGoodsReceiptServiceDAO.isAllITCReversal(nObject);
            issuccess = true;

        } catch (Exception ex) {
            msg = ex.getMessage();
        } finally {
            try {
                jobj.put("success", issuccess);
                jobj.put("msg", msg);
            } catch (JSONException ex) {
            }
        }
        return new ModelAndView(successView, "model", jobj.toString());
    }
}
