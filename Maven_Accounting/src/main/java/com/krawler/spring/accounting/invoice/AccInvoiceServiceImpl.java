package com.krawler.spring.accounting.invoice;

import com.krawler.accounting.integration.common.IntegrationCommonService;
import com.krawler.accounting.integration.common.IntegrationConstants;
import com.krawler.common.admin.*;
import com.krawler.common.service.ServiceException;
import com.krawler.common.session.SessionExpiredException;
import com.krawler.common.util.*;
import com.krawler.hql.accounting.*;
import com.krawler.spring.accounting.account.accAccountDAO;
import com.krawler.spring.accounting.bankreconciliation.accBankReconciliationDAO;
import com.krawler.spring.accounting.costCenter.AccCostCenterDAO;
import com.krawler.spring.accounting.costCenter.CCConstants;
import com.krawler.spring.accounting.creditnote.accCreditNoteDAO;
import com.krawler.spring.accounting.creditnote.dm.CreditNoteInfo;
import com.krawler.spring.accounting.currency.accCurrencyDAO;
import static com.krawler.spring.accounting.customer.accCustomerController.getCustomerRequestMap;
import com.krawler.spring.accounting.customer.accCustomerDAO;
import com.krawler.spring.accounting.debitnote.accDebitNoteDAO;
import com.krawler.spring.accounting.discount.accDiscountDAO;
import com.krawler.spring.accounting.goodsreceipt.AccGoodsReceiptServiceHandler;
import com.krawler.spring.accounting.goodsreceipt.GoodsReceiptCMNConstants;
import static com.krawler.spring.accounting.goodsreceipt.GoodsReceiptCMNConstants.TAXPERCENT;
import com.krawler.spring.accounting.handler.*;
import com.krawler.spring.accounting.jasperreports.*;
import com.krawler.spring.accounting.product.accProductDAO;
import com.krawler.spring.accounting.salesorder.accSalesOrderDAO;
import com.krawler.spring.authHandler.authHandler;
import com.krawler.spring.common.KwlReturnObject;
import com.krawler.spring.sessionHandler.sessionHandlerImpl;
import com.krawler.utils.json.base.JSONArray;
import com.krawler.utils.json.base.JSONException;
import com.krawler.utils.json.base.JSONObject;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.*;
import java.util.logging.Level;
import org.hibernate.ObjectNotFoundException;
import java.util.logging.Logger;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import net.sf.jasperreports.engine.data.JRBeanCollectionDataSource;
import org.springframework.context.MessageSource;
import com.krawler.spring.accounting.invoice.dm.InvoiceInfo;
import com.krawler.spring.accounting.journalentry.accJournalEntryDAO;
import com.krawler.spring.accounting.masteritems.accMasterItemsDAO;
import com.krawler.spring.accounting.payment.accPaymentDAO;
import com.krawler.spring.accounting.receipt.accReceiptDAO;
import com.krawler.spring.accounting.reports.accOtherReportsController;
import com.krawler.spring.accounting.salesorder.AccSalesOrderServiceDAO;
import com.krawler.spring.accounting.multiLevelApprovalRule.AccMultiLevelApprovalDAO;
import com.krawler.spring.accounting.product.service.AccProductService;
import com.krawler.spring.permissionHandler.permissionHandlerDAO;

import com.krawler.spring.accounting.tax.accTaxDAO;
import com.krawler.spring.accounting.vendorpayment.accVendorPaymentDAO;
import com.krawler.spring.auditTrailModule.auditTrailDAO;
import com.krawler.spring.authHandler.authHandlerDAO;
import com.krawler.spring.common.*;
import com.lowagie.text.DocumentException;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import net.sf.jasperreports.engine.*;
import net.sf.jasperreports.engine.design.JasperDesign;
import net.sf.jasperreports.engine.export.JRPdfExporter;
import net.sf.jasperreports.engine.export.JRPdfExporterParameter;
import net.sf.jasperreports.engine.xml.JRXmlLoader;
import org.joda.time.DateTime;
import org.joda.time.LocalDate;
import org.joda.time.LocalTime;
import org.joda.time.Period;
import org.joda.time.format.DateTimeFormat;
import org.joda.time.format.DateTimeFormatter;
import org.springframework.orm.hibernate3.HibernateTransactionManager;
import com.krawler.spring.storageHandler.storageHandlerImpl;
import com.krawler.spring.writeOffInvoice.accWriteOffServiceDao;
import com.krawler.inventory.exception.InventoryException;
import com.krawler.inventory.model.approval.consignmentservice.ConsignmentService;
import com.krawler.inventory.model.ist.DODQCISTMapping;
import com.krawler.inventory.model.ist.DeliveryDetailInterStoreLocationMapping;
import com.krawler.inventory.model.ist.ISTDetail;
import com.krawler.inventory.model.ist.InterStoreTransferRequest;
import com.krawler.inventory.model.ist.InterStoreTransferStatus;
import com.krawler.inventory.model.stock.StockService;
import com.krawler.inventory.model.stockmovement.StockMovementService;
import com.krawler.inventory.model.stockout.ShippingDeliveryOrder;
import com.krawler.inventory.model.store.Store;
import com.krawler.spring.accounting.account.accCusVenMapDAO;
import com.krawler.spring.accounting.companypreferances.accCompanyPreferencesDAO;
import com.krawler.spring.accounting.creditnote.accCreditNoteService;
import com.krawler.spring.accounting.debitnote.accDebitNoteService;
import com.krawler.spring.accounting.customDesign.CustomDesignerConstants;
import com.krawler.spring.accounting.goodsreceipt.AccGoodsReceiptServiceDAO;
import com.krawler.spring.accounting.goodsreceipt.service.accGoodsReceiptModuleService;
import com.krawler.spring.accounting.groupcompany.AccGroupCompanyDAO;
import com.krawler.spring.accounting.receipt.AccReceiptServiceDAO;
import com.krawler.spring.accounting.reports.AccReportsService;
import com.krawler.spring.accounting.ws.service.WSUtilService;
import java.io.UnsupportedEncodingException;
import java.text.DecimalFormat;
import javax.script.ScriptEngine;
import javax.script.ScriptEngineManager;
import javax.script.ScriptException;
import javax.servlet.ServletContext;
import org.apache.commons.lang.time.DateUtils;
import org.springframework.context.NoSuchMessageException;
import org.springframework.transaction.TransactionDefinition;
import org.springframework.transaction.TransactionStatus;
import org.springframework.transaction.annotation.Propagation;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.transaction.support.DefaultTransactionDefinition;
import org.springframework.web.servlet.support.RequestContextUtils;
import com.krawler.spring.accounting.reports.AccTemplateReportService;
import com.krawler.spring.accounting.handler.AccDashboardServiceImpl;
import com.krawler.spring.accounting.vendorpayment.AccVendorPaymentServiceDAO;
import com.krawler.spring.exportFunctionality.exportMPXDAOImpl;

/**
 *
 * @author krawler
 */
public class AccInvoiceServiceImpl implements AccInvoiceServiceDAO {

    public class SortCreditNoteDetail implements Comparator<CreditNoteDetail> {

        @Override
        public int compare(CreditNoteDetail CND1, CreditNoteDetail CND2) {
            if (CND1.getSrno() > CND2.getSrno()) {
                return 1;
            } else {
                return -1;
            }
        }
    }
    
    
    private HibernateTransactionManager txnManager;
    private accInvoiceDAO accInvoiceDAOobj;
    private AccInvoiceServiceDAO accInvoiceServiceDAO;
    private accCreditNoteDAO accCreditNoteDAOobj;
    private accReceiptDAO accReceiptDAOobj;
    private accJournalEntryDAO accJournalEntryobj;
    private accProductDAO accProductObj;
    private accCurrencyDAO accCurrencyDAOobj;
    private accCustomerDAO accCustomerDAOobj;
    private accTaxDAO accTaxObj;
    private AccCostCenterDAO accCostCenterObj;
    private AccountingHandlerDAO accountingHandlerDAOobj;
    private String successView;
    private kwlCommonTablesDAO kwlCommonTablesDAOObj;
    private accInvoiceCMN accInvoiceCommon;
    private MessageSource messageSource;
    private accAccountDAO accAccountDAOobj;
    private authHandlerDAO authHandlerDAOObj;
    private CommonEnglishNumberToWords EnglishNumberToWordsOjb = new CommonEnglishNumberToWords();
    private auditTrailDAO auditTrailObj;
    private accDebitNoteDAO accDebitNoteobj;
    private accSalesOrderDAO accSalesOrderDAOobj;
    private AccCommonTablesDAO accCommonTablesDAO;
    private AccSalesOrderServiceDAO accSalesOrderServiceDAOobj;
    private accMasterItemsDAO accMasterItemsDAOobj;
    private accPaymentDAO accPaymentDAOobj;
    private permissionHandlerDAO permissionHandlerDAOObj;
    private AccMultiLevelApprovalDAO accMultiLevelApprovalDAOObj;
    private fieldDataManager fieldDataManagercntrl;
    private accWriteOffServiceDao accWriteOffServiceDao;
    private AccLinkDataDao accLinkDataDao;
    private accBankReconciliationDAO accBankReconciliationObj;
    private accVendorPaymentDAO accVendorPaymentobj;
    private AccVendorPaymentServiceDAO accVendorPaymentServiceDAO;
    private AccGoodsReceiptServiceHandler accGoodsReceiptServiceHandler;
    private AccProductService AccProductService;
    private accDiscountDAO accDiscountobj;
    private ConsignmentService consignmentService;
    private StockMovementService stockMovementService;
    private accCreditNoteService accCreditNoteService;
    private accDebitNoteService accDebitNoteService;
    private AccReceiptServiceDAO accReceiptService;
    private AccReportsService accReportsService;
    private AccGoodsReceiptServiceDAO accGoodsReceiptServiceDao;
    private StockService stockService;
     private accGoodsReceiptModuleService accGoodsReceiptModuleService;
    private AccGroupCompanyDAO accGroupCompanyDAO;
    private WSUtilService wsUtilService;
    private accCompanyPreferencesDAO accCompanyPreferencesObj;
    private AccTemplateReportService accTemplateReportService;
    private IntegrationCommonService integrationCommonService;
    private accCusVenMapDAO accCusVenMapDAOObj;
    private AccDashboardServiceImpl accDashboardServiceImpl;
    private exportMPXDAOImpl exportDaoObj;
    
    public void setAccCusVenMapDAOObj(accCusVenMapDAO accCusVenMapDAOObj) {
        this.accCusVenMapDAOObj = accCusVenMapDAOObj;
    }
    
    public void setIntegrationCommonService(IntegrationCommonService integrationCommonService) {
        this.integrationCommonService = integrationCommonService;
    }
    
    public void setAccGoodsReceiptModuleService(accGoodsReceiptModuleService accGoodsReceiptModuleService) {
        this.accGoodsReceiptModuleService = accGoodsReceiptModuleService;
    }
    
        public void setaccGroupCompanyDAO(AccGroupCompanyDAO accGroupCompanyDAO) {
        this.accGroupCompanyDAO = accGroupCompanyDAO;
    }
    
     public void setwsUtilService(WSUtilService wsUtilService) {
        this.wsUtilService = wsUtilService;
    }
    
     public void setaccCompanyPreferencesObj(accCompanyPreferencesDAO accCompanyPreferencesObj) {
        this.accCompanyPreferencesObj = accCompanyPreferencesObj;
    }
     

    public void setStockService(StockService stockService) {
        this.stockService = stockService;
    }
    public void setAccReportsService(AccReportsService accReportsService) {
        this.accReportsService = accReportsService;
    }
        
    public void setaccVendorPaymentDAO(accVendorPaymentDAO accVendorPaymentobj) {
        this.accVendorPaymentobj = accVendorPaymentobj;
    }
    
    public void setAccVendorPaymentServiceDAO(AccVendorPaymentServiceDAO accVendorPaymentServiceDAO) {
        this.accVendorPaymentServiceDAO = accVendorPaymentServiceDAO;
    }

    public void setAccGoodsReceiptServiceHandler(AccGoodsReceiptServiceHandler accGoodsReceiptServiceHandler) {
        this.accGoodsReceiptServiceHandler = accGoodsReceiptServiceHandler;
    }
    public void setAccLinkDataDao(AccLinkDataDao accLinkDataDao) {
        this.accLinkDataDao = accLinkDataDao;
    }
    
    public void setFieldDataManager(fieldDataManager fieldDataManagercntrl) {
        this.fieldDataManagercntrl = fieldDataManagercntrl;
    }
    
    public void setaccMultiLevelApprovalDAOObj(AccMultiLevelApprovalDAO accMultiLevelApprovalDAO) {
        this.accMultiLevelApprovalDAOObj = accMultiLevelApprovalDAO;
    }
    public void setpermissionHandlerDAO(permissionHandlerDAO permissionHandlerDAOObj1) {
        this.permissionHandlerDAOObj = permissionHandlerDAOObj1;
    }
    public void setaccPaymentDAO(accPaymentDAO accPaymentDAOobj) {
        this.accPaymentDAOobj = accPaymentDAOobj;
    }
    
    public void setaccSalesOrderServiceDAO(AccSalesOrderServiceDAO accSalesOrderServiceDAOobj) {
        this.accSalesOrderServiceDAOobj = accSalesOrderServiceDAOobj;
    }
    
    public void setaccMasterItemsDAO(accMasterItemsDAO accMasterItemsDAOobj) {
        this.accMasterItemsDAOobj = accMasterItemsDAOobj;
    }

    public void setaccSalesOrderDAO(accSalesOrderDAO accSalesOrderDAOobj) {
        this.accSalesOrderDAOobj = accSalesOrderDAOobj;
    }

    public void setaccInvoiceServiceDAO(AccInvoiceServiceDAO accInvoiceServiceDAO) {
        this.accInvoiceServiceDAO = accInvoiceServiceDAO;
    }

    public void setaccDebitNoteDAO(accDebitNoteDAO accDebitNoteobj) {
        this.accDebitNoteobj = accDebitNoteobj;
    }

    public void setauditTrailDAO(auditTrailDAO auditTrailDAOObj) {
        this.auditTrailObj = auditTrailDAOObj;
    }

    public void setaccAccountDAO(accAccountDAO accAccountDAOobj) {
        this.accAccountDAOobj = accAccountDAOobj;
    }

    @Override
    public void setMessageSource(MessageSource ms) {
        this.messageSource = ms;
    }

    public void setkwlCommonTablesDAO(kwlCommonTablesDAO kwlCommonTablesDAOObj1) {
        this.kwlCommonTablesDAOObj = kwlCommonTablesDAOObj1;
    }

    public void setTxnManager(HibernateTransactionManager txManager) {
        this.txnManager = txManager;
    }

    public void setaccInvoiceDAO(accInvoiceDAO accInvoiceDAOobj) {
        this.accInvoiceDAOobj = accInvoiceDAOobj;
    }

    public void setaccCreditNoteDAO(accCreditNoteDAO accCreditNoteDAOobj) {
        this.accCreditNoteDAOobj = accCreditNoteDAOobj;
    }

    public void setaccReceiptDAO(accReceiptDAO accReceiptDAOobj) {
        this.accReceiptDAOobj = accReceiptDAOobj;
    }

    public void setaccJournalEntryDAO(accJournalEntryDAO accJournalEntryobj) {
        this.accJournalEntryobj = accJournalEntryobj;
    }

    public void setaccProductDAO(accProductDAO accProductObj) {
        this.accProductObj = accProductObj;
    }

    public void setaccCurrencyDAO(accCurrencyDAO accCurrencyDAOobj) {
        this.accCurrencyDAOobj = accCurrencyDAOobj;
    }

    public void setaccCustomerDAO(accCustomerDAO accCustomerDAOobj) {
        this.accCustomerDAOobj = accCustomerDAOobj;
    }

    public void setaccTaxDAO(accTaxDAO accTaxObj) {
        this.accTaxObj = accTaxObj;
    }

    public void setaccountingHandlerDAO(AccountingHandlerDAO AccountingHandlerDAOobj) {
        this.accountingHandlerDAOobj = AccountingHandlerDAOobj;
    }

    public String getSuccessView() {
        return successView;
    }

    public void setSuccessView(String successView) {
        this.successView = successView;
    }

    public void setAccInvoiceCommon(accInvoiceCMN accInvoiceCommon) {
        this.accInvoiceCommon = accInvoiceCommon;
    }

    public void setaccCostCenterDAO(AccCostCenterDAO accCostCenterDAOObj) {
        this.accCostCenterObj = accCostCenterDAOObj;
    }

    public void setAuthHandlerDAOObj(authHandlerDAO authHandlerDAOObj) {
        this.authHandlerDAOObj = authHandlerDAOObj;
    }

    public void setaccCommonTablesDAO(AccCommonTablesDAO accCommonTablesDAO) {
        this.accCommonTablesDAO = accCommonTablesDAO;
    }

    public void setAccWriteOffServiceDao(accWriteOffServiceDao accWriteOffServiceDao) {
        this.accWriteOffServiceDao = accWriteOffServiceDao;
    }

    public void setaccBankReconciliationDAO(accBankReconciliationDAO accBankReconciliationObj) {
        this.accBankReconciliationObj = accBankReconciliationObj;
    }
    
    public void setAccProductService(AccProductService AccProductService) {
        this.AccProductService = AccProductService;
    }
    
    public void setaccDiscountDAO(accDiscountDAO accDiscountobj) {
        this.accDiscountobj = accDiscountobj;
    }
     
    public void setConsignmentService(ConsignmentService consignmentService) {
        this.consignmentService = consignmentService;
    }

    public void setStockMovementService(StockMovementService stockMovementService) {
        this.stockMovementService = stockMovementService;
    }

    public void setaccCreditNoteService(accCreditNoteService accCreditNoteService) {
        this.accCreditNoteService = accCreditNoteService;
    } 
    public void setaccDebitNoteService(accDebitNoteService accDebitNoteService) {
        this.accDebitNoteService = accDebitNoteService;
    } 
    public void setaccReceiptService(AccReceiptServiceDAO accReceiptService) {
        this.accReceiptService = accReceiptService;
    } 
    public void setAccGoodsReceiptServiceDAO(AccGoodsReceiptServiceDAO accGoodsReceiptServiceDao) {
        this.accGoodsReceiptServiceDao = accGoodsReceiptServiceDao;
    } 
    public void setAccTemplateReportService(AccTemplateReportService accTemplateReportService) {
        this.accTemplateReportService = accTemplateReportService;
    }
    public void setAccDashboardServiceImpl(AccDashboardServiceImpl accDashboardServiceImpl) {
        this.accDashboardServiceImpl = accDashboardServiceImpl;
    }
    
    public void setexportMPXDAOImpl(exportMPXDAOImpl exportDaoObj) {
        this.exportDaoObj = exportDaoObj;
    }
        
    public JSONArray getAgeingJson(Map<String, Object> invoiceRequestParams, JSONObject params) throws ServiceException, JSONException, SessionExpiredException {
        JSONArray allTransaction = new JSONArray();
        String companyid = (String) invoiceRequestParams.get(Constants.companyKey);
        try {
            boolean ignoreZero = Boolean.parseBoolean(invoiceRequestParams.get("ignorezero").toString());
            int datefilter = params.has("datefilter") ? params.optInt("datefilter", 0) : 0;
            DateFormat dateFormat = authHandler.getDateOnlyFormat();
            DateFormat sqlDF = new SimpleDateFormat("yyyy-MM-dd");
            Date startDate = null;
            if (invoiceRequestParams.containsKey(Constants.REQ_startdate) && invoiceRequestParams.get(Constants.REQ_startdate) != null) {
//                startDate = dateFormat.parse(invoiceRequestParams.get(Constants.REQ_startdate).toString());
                startDate = (invoiceRequestParams.get(Constants.REQ_startdate).toString()).equals("") ? dateFormat.parse(Constants.opening_Date) : dateFormat.parse(invoiceRequestParams.get(Constants.REQ_startdate).toString());
            }
            
            int noOfInterval = Constants.DefaultNoOfIntervals;
            if(invoiceRequestParams.containsKey("noOfInterval") && invoiceRequestParams.get("noOfInterval") != null) {
               noOfInterval = invoiceRequestParams.get("noOfInterval").toString().equals("") ? Constants.DefaultNoOfIntervals : Integer.parseInt(invoiceRequestParams.get("noOfInterval").toString());
            }
            
            Calendar oneDayBeforeCal1 = (Calendar) invoiceRequestParams.get("oneDayBeforeCal1");
            Calendar cal1 = (Calendar) invoiceRequestParams.get("cal1");
            Calendar cal2 = (Calendar) invoiceRequestParams.get("cal2");
            Calendar cal3 = (Calendar) invoiceRequestParams.get("cal3");
            Calendar cal4 = (Calendar) invoiceRequestParams.get("cal4");
            Calendar cal5 = (Calendar) invoiceRequestParams.get("cal5");
            Calendar cal6 = (Calendar) invoiceRequestParams.get("cal6");
            Calendar cal7 = (Calendar) invoiceRequestParams.get("cal7");
            Calendar cal8 = (Calendar) invoiceRequestParams.get("cal8");
            Calendar cal9 = (Calendar) invoiceRequestParams.get("cal9");
            Calendar cal10 = (Calendar) invoiceRequestParams.get("cal10");

            Date oneDayBeforeCal1Date = null;
            Date cal1Date = null;
            Date cal2Date = null;
            Date cal3Date = null;
            Date cal4Date = null;
            Date cal5Date = null;
            Date cal6Date = null;
            Date cal7Date = null;
            Date cal8Date = null;
            Date cal9Date = null;
            Date cal10Date = null;

            String oneDayBeforeCal1String = dateFormat.format(oneDayBeforeCal1.getTime());
            oneDayBeforeCal1Date = dateFormat.parse(oneDayBeforeCal1String);

            String cal1String = dateFormat.format(cal1.getTime());
            cal1Date = dateFormat.parse(cal1String);

            String cal2String = dateFormat.format(cal2.getTime());
            cal2Date = dateFormat.parse(cal2String);

            String cal3String = dateFormat.format(cal3.getTime());
            cal3Date = dateFormat.parse(cal3String);

            String cal4String = dateFormat.format(cal4.getTime());
            cal4Date = dateFormat.parse(cal4String);

            String cal5String = dateFormat.format(cal5.getTime());
            cal5Date = dateFormat.parse(cal5String);

            String cal6String = dateFormat.format(cal6.getTime());
            cal6Date = dateFormat.parse(cal6String);

            String cal7String = dateFormat.format(cal7.getTime());
            cal7Date = dateFormat.parse(cal7String);
            
            String cal8String = dateFormat.format(cal8.getTime());
            cal8Date = dateFormat.parse(cal8String);
            
            String cal9String = dateFormat.format(cal9.getTime());
            cal9Date = dateFormat.parse(cal9String);

            String cal10String = dateFormat.format(cal10.getTime());
            cal10Date = dateFormat.parse(cal10String);
            
            DateFormat df = (DateFormat) invoiceRequestParams.get("df");

            allTransaction =  getAllKnockOffJson(invoiceRequestParams);
            int count = allTransaction.length();
            while(count-- > 0){
                
//            }
//            for (int i = 0; i < allTransaction.length(); i++) {
                double amountdue1 = 0;
                double amountdue2 = 0;
                double amountdue3 = 0;
                double amountdue4 = 0;
                double amountdue5 = 0;
                double amountdue6 = 0;
                double amountdue7 = 0;
                double amountdue8 = 0;
                double amountdue9 = 0;
                double amountdue10 = 0;
                double amountdue11 = 0;
//                double accruedbalance = 0;
                JSONObject obj = allTransaction.getJSONObject(count);
                if(invoiceRequestParams.containsKey("dimensionvalue") && invoiceRequestParams.containsKey("dimensionname")){
                    obj.put("dimensionvalue", invoiceRequestParams.get("dimensionvalue"));
                    obj.put("dimensionname", invoiceRequestParams.get("dimensionname"));                
                }
                double amountdue = obj.getDouble("amountdue");
                double amountdueinbase = obj.getDouble("amountdueinbase");
                if ((ignoreZero && authHandler.round(amountdue, companyid) <= 0)) {
                    allTransaction.remove(count);
                    continue;
                }
                if(obj.getString("type").equals(Constants.CREDIT_NOTE) || obj.getString("type").equals(Constants.PAYMENT_RECEIVED)){
                    amountdue = - amountdue;
                    amountdueinbase = - amountdueinbase;
                }
                
                String invCreationDate = (!StringUtil.isNullOrEmpty(obj.optString("entrydate","").trim()) ? obj.getString("entrydate") : obj.getString("creationdate"));
                Date invDate = sqlDF.parse(invCreationDate);
                obj.put("date", dateFormat.format(invDate));
                obj.put("dateinuserformat", df.format(invDate));
                obj.put(Constants.shipdate, (!StringUtil.isNullOrEmpty(obj.optString(Constants.shipdate,"").trim()) ? df.format(sqlDF.parse(obj.getString(Constants.shipdate))) : ""));
                Date dueDate = sqlDF.parse(obj.getString(Constants.duedate));
                obj.put(Constants.duedate, dateFormat.format(dueDate));
                obj.put("duedateInUserDateFormat", df.format(dueDate));

                obj.put(InvoiceConstants.personinfo, obj.get("customername") + "(" + obj.getString("customercode") + ")");
                obj.put("salespersoninfo", obj.getString("salespersonname") + "(" + obj.getString("salespersoncode") + ")");
                if ((datefilter == Constants.agedInvoiceDateFilter || datefilter == Constants.agedInvoiceDate0to30Filter)) {
                    dueDate = sqlDF.parse(obj.getString("creationdate"));
                }                
                if (dueDate.after(oneDayBeforeCal1Date)) {
                    if (dueDate.equals(cal1Date) && (datefilter == Constants.agedDueDate0to30Filter || datefilter == Constants.agedInvoiceDate0to30Filter)) {
                        amountdue2 = authHandler.round(amountdue, companyid);  // 0-30 Days
                    } else {
                        amountdue1 = authHandler.round(amountdue, companyid); // Current
                    }
                } else if ((cal2Date.before(dueDate) || cal2Date.equals(dueDate)) && cal1Date.after(dueDate)) { // 1-30
                    amountdue2 = authHandler.round(amountdue, companyid);
                } else if ((cal3Date.before(dueDate) || cal3Date.equals(dueDate)) && cal2Date.after(dueDate)) { // 31-60
                    amountdue3 = authHandler.round(amountdue, companyid);
                } else if ((cal4Date.before(dueDate) || cal4Date.equals(dueDate)) && cal3Date.after(dueDate)) { // 61-90
                    amountdue4 = authHandler.round(amountdue, companyid);
                } else if ((cal5Date.before(dueDate) || cal5Date.equals(dueDate)) && cal4Date.after(dueDate)) { // 91-120
                    amountdue5 = authHandler.round(amountdue, companyid);
                } else if ((cal6Date.before(dueDate) || cal6Date.equals(dueDate)) && cal5Date.after(dueDate)) { // 121-150
                    amountdue6 = authHandler.round(amountdue, companyid);
                } else if ((cal7Date.before(dueDate) || cal7Date.equals(dueDate)) && cal6Date.after(dueDate)) { // 151-180
                    amountdue7 = authHandler.round(amountdue, companyid);
                } else if ((cal8Date.before(dueDate) || cal8Date.equals(dueDate)) && cal7Date.after(dueDate)) { // 181-210
                    amountdue8 = authHandler.round(amountdue, companyid);
                } else if ((cal9Date.before(dueDate) || cal9Date.equals(dueDate)) && cal8Date.after(dueDate)) { // 211-240
                    amountdue9 = authHandler.round(amountdue, companyid);
                } else if ((cal10Date.before(dueDate) || cal10Date.equals(dueDate)) && cal9Date.after(dueDate)) { // 241-270
                    amountdue10 = authHandler.round(amountdue, companyid);
                } else {                                                                                          // > 270           
                    amountdue11 = authHandler.round(amountdue, companyid);
                } 
                
                switch (noOfInterval) {
                    case 2:
                        amountdue3 += amountdue4 + amountdue5 + amountdue6 + amountdue7 + amountdue8 + amountdue9 + amountdue10 + amountdue11;
                        amountdue4 = amountdue5 = amountdue6 = amountdue7 = amountdue8 = amountdue9 = amountdue10 = amountdue11 = 0;
                        break;
                    case 3:
                        amountdue4 += amountdue5 + amountdue6 + amountdue7 + amountdue8 + amountdue9 + amountdue10 + amountdue11;
                        amountdue5 = amountdue6 = amountdue7 = amountdue8 = amountdue9 = amountdue10 = amountdue11 = 0;
                        break;
                    case 4:
                        amountdue5 += amountdue6 + amountdue7 + amountdue8 + amountdue9 + amountdue10 + amountdue11;
                        amountdue6 = amountdue7 = amountdue8 = amountdue9 = amountdue10 = amountdue11 = 0;
                        break;
                    case 5:
                        amountdue6 += amountdue7 + amountdue8 + amountdue9 + amountdue10 + amountdue11;
                        amountdue7 = amountdue8 = amountdue9 = amountdue10 = amountdue11 = 0;
                        break;
                    case 6:
                        amountdue7 += amountdue8 + amountdue9 + amountdue10 + amountdue11;
                        amountdue8 = amountdue9 = amountdue10 = amountdue11 = 0;
                        break;
                    case 7:
                        amountdue8 += amountdue9 + amountdue10 + amountdue11;
                        amountdue9 = amountdue10 = amountdue11 = 0;
                        break;
                    case 8:
                        amountdue9 += amountdue10 + amountdue11;
                        amountdue10 = amountdue11 = 0;
                        break;
                    case 9:
                        amountdue10 += amountdue11;
                        amountdue11 = 0;
                        break;
                }
                
                obj.put("amountduenonnegative", (amountdue <= 0) ? 0 : authHandler.round(amountdue, companyid));//XX
                obj.put("amountdue1", amountdue1);
                obj.put("amountdue2", amountdue2);
                obj.put("amountdue3", amountdue3);
                obj.put("amountdue4", amountdue4);
                obj.put("amountdue5", amountdue5);
                obj.put("amountdue6", amountdue6);
                obj.put("amountdue7", amountdue7);
                obj.put("amountdue8", amountdue8);
                obj.put("amountdue", amountdue);
                obj.put("amountdueinbase", amountdueinbase);
                obj.put("amountdue9", amountdue9);
                obj.put("amountdue10", amountdue10);
                obj.put("amountdue11", amountdue11);
            }
            
        } catch (ParseException ex) {
            Logger.getLogger(AccInvoiceServiceImpl.class.getName()).log(Level.SEVERE, null, ex);
        }
        return allTransaction;
    }
    
     public JSONArray getAgeingInvoiceJson(Map<String, Object> invoiceRequestParams, JSONObject params) throws ServiceException, JSONException, SessionExpiredException {
        JSONArray allTransaction = new JSONArray();
        String companyid = (String) invoiceRequestParams.get(Constants.companyKey);
        try {
            boolean ignoreZero = Boolean.parseBoolean(invoiceRequestParams.get("ignorezero").toString());
            int datefilter = params.has("datefilter") ? params.optInt("datefilter", 0) : 0;
            DateFormat dateFormat = authHandler.getDateOnlyFormat();
            Date startDate = null;
            if (invoiceRequestParams.containsKey(Constants.REQ_startdate) && invoiceRequestParams.get(Constants.REQ_startdate) != null) {
//                startDate = dateFormat.parse(invoiceRequestParams.get(Constants.REQ_startdate).toString());
                startDate = (invoiceRequestParams.get(Constants.REQ_startdate).toString()).equals("") ? dateFormat.parse(Constants.opening_Date) : dateFormat.parse(invoiceRequestParams.get(Constants.REQ_startdate).toString());
            }
            
            int noOfInterval = Constants.DefaultNoOfIntervals;
            if(invoiceRequestParams.containsKey("noOfInterval") && invoiceRequestParams.get("noOfInterval") != null) {
               noOfInterval = invoiceRequestParams.get("noOfInterval").toString().equals("") ? Constants.DefaultNoOfIntervals : Integer.parseInt(invoiceRequestParams.get("noOfInterval").toString());
            }
            
            Calendar oneDayBeforeCal1 = (Calendar) invoiceRequestParams.get("oneDayBeforeCal1");
            Calendar cal1 = (Calendar) invoiceRequestParams.get("cal1");
            Calendar cal2 = (Calendar) invoiceRequestParams.get("cal2");
            Calendar cal3 = (Calendar) invoiceRequestParams.get("cal3");
            Calendar cal4 = (Calendar) invoiceRequestParams.get("cal4");
            Calendar cal5 = (Calendar) invoiceRequestParams.get("cal5");
            Calendar cal6 = (Calendar) invoiceRequestParams.get("cal6");
            Calendar cal7 = (Calendar) invoiceRequestParams.get("cal7");
            Calendar cal8 = (Calendar) invoiceRequestParams.get("cal8");
            Calendar cal9 = (Calendar) invoiceRequestParams.get("cal9");
            Calendar cal10 = (Calendar) invoiceRequestParams.get("cal10");

            Date oneDayBeforeCal1Date = null;
            Date cal1Date = null;
            Date cal2Date = null;
            Date cal3Date = null;
            Date cal4Date = null;
            Date cal5Date = null;
            Date cal6Date = null;
            Date cal7Date = null;
            Date cal8Date = null;
            Date cal9Date = null;
            Date cal10Date = null;

            String oneDayBeforeCal1String = dateFormat.format(oneDayBeforeCal1.getTime());
            oneDayBeforeCal1Date = dateFormat.parse(oneDayBeforeCal1String);

            String cal1String = dateFormat.format(cal1.getTime());
            cal1Date = dateFormat.parse(cal1String);

            String cal2String = dateFormat.format(cal2.getTime());
            cal2Date = dateFormat.parse(cal2String);

            String cal3String = dateFormat.format(cal3.getTime());
            cal3Date = dateFormat.parse(cal3String);

            String cal4String = dateFormat.format(cal4.getTime());
            cal4Date = dateFormat.parse(cal4String);

            String cal5String = dateFormat.format(cal5.getTime());
            cal5Date = dateFormat.parse(cal5String);

            String cal6String = dateFormat.format(cal6.getTime());
            cal6Date = dateFormat.parse(cal6String);

            String cal7String = dateFormat.format(cal7.getTime());
            cal7Date = dateFormat.parse(cal7String);
            
            String cal8String = dateFormat.format(cal8.getTime());
            cal8Date = dateFormat.parse(cal8String);
            
            String cal9String = dateFormat.format(cal9.getTime());
            cal9Date = dateFormat.parse(cal9String);

            String cal10String = dateFormat.format(cal10.getTime());
            cal10Date = dateFormat.parse(cal10String);
            
            List list = accInvoiceDAOobj.getInvoiceKnockOffTransactions(invoiceRequestParams);
            DateFormat df = (DateFormat) invoiceRequestParams.get("df");
            Boolean isAgedDetailsReport = invoiceRequestParams.containsKey("isAgedDetailsReport") ? (boolean) (invoiceRequestParams.get("isAgedDetailsReport")):false;
            HashMap<String, String> replaceFieldMap = null;
            HashMap<String, String> customFieldMap = null;
            HashMap<String, String> customDateFieldMap = null;
            HashMap<String, Integer> fieldMap = null;
            HashMap<String, Object> fieldrequestParams = null;
            HashMap<String, Object> fieldrequestParamsRows = null;
            HashMap<String, String> replaceFieldMapRows = null;
            HashMap<String, String> customFieldMapRows = null;
            HashMap<String, String> customDateFieldMapRows = null;
            HashMap<String, Integer> fieldMapRows = null;
            if (isAgedDetailsReport) {
                boolean isFixedAsset = params.optString(Constants.isFixedAsset, null) != null ? Boolean.parseBoolean(params.get(Constants.isFixedAsset).toString()) : false;
                boolean isConsignment = (StringUtil.isNullOrEmpty(params.optString("isConsignment", null))) ? false : Boolean.parseBoolean(params.get("isConsignment").toString());
                boolean isLeaseFixedAsset = (!StringUtil.isNullOrEmpty(params.optString(Constants.isLeaseFixedAsset, null))) ? Boolean.parseBoolean(params.get(Constants.isLeaseFixedAsset).toString()) : false;
            
                //Custom field details Maps for Global data
                replaceFieldMap = new HashMap();
                customFieldMap = new HashMap();
                customDateFieldMap = new HashMap();
                fieldMap = null;
                fieldrequestParams = new HashMap();
                int moduleid = isFixedAsset ? Constants.Acc_FixedAssets_DisposalInvoice_ModuleId : isConsignment ? Constants.Acc_ConsignmentInvoice_ModuleId : isLeaseFixedAsset ? Constants.LEASE_INVOICE_MODULEID : Constants.Acc_Invoice_ModuleId;
                fieldrequestParams.put(Constants.filter_names, Arrays.asList(Constants.companyid, Constants.moduleid));
                fieldrequestParams.put(Constants.filter_values, Arrays.asList(companyid, moduleid));
                fieldMap = accAccountDAOobj.getFieldParamsCustomMap(fieldrequestParams, replaceFieldMap, customFieldMap, customDateFieldMap);

                //Custom field details Maps for Line Level data
                fieldrequestParamsRows = new HashMap();
                replaceFieldMapRows = new HashMap();
                customFieldMapRows = new HashMap();
                customDateFieldMapRows = new HashMap();
                fieldrequestParamsRows.put(Constants.filter_names, Arrays.asList(Constants.companyid, Constants.moduleid, Constants.customcolumn));
                fieldrequestParamsRows.put(Constants.filter_values, Arrays.asList(companyid, moduleid, 1));
                fieldMapRows = accAccountDAOobj.getFieldParamsCustomMap(fieldrequestParamsRows, replaceFieldMapRows, customFieldMapRows, customDateFieldMapRows);
            }
            for (int i = 0; i < list.size(); i++) {
                double amountdue1 = 0;
                double amountdue2 = 0;
                double amountdue3 = 0;
                double amountdue4 = 0;
                double amountdue5 = 0;
                double amountdue6 = 0;
                double amountdue7 = 0;
                double amountdue8 = 0;
                double amountdue9 = 0;
                double amountdue10 = 0;
                double amountdue11 = 0;
//                double accruedbalance = 0;
                Object[] details = (Object[]) list.get(i);
                JSONObject obj = new JSONObject();
                double amountdueinbase = (Double) details[2] - (Double) details[7];
                amountdueinbase = authHandler.round(amountdueinbase, companyid);
                double amountdue = (Double) details[1] - (Double) details[6];
                amountdue = authHandler.round(amountdue, companyid);
                if ((ignoreZero && authHandler.round(amountdue, companyid) <= 0)) {
                    continue;
                }
                obj.put(Constants.billid, details[0]);
                obj.put("isOpeningBalanceTransaction", details[8]);
                obj.put(Constants.companyKey, details[9]);
                obj.put("companyname", details[10]);
                obj.put(InvoiceConstants.personid, details[11]);
                obj.put("customername", details[12]);
                obj.put("customercode", details[24]);
                obj.put("code", details[24]);
                obj.put(InvoiceConstants.CustomerCreditTerm, details[13]);
                obj.put(InvoiceConstants.aliasname, details[14]);
                obj.put("type", Constants.CUSTOMER_INVOICE);
                obj.put(InvoiceConstants.billno, details[15]);
                obj.put(Constants.currencyKey, details[16]);
                obj.put(InvoiceConstants.currencysymbol, details[17]);
                obj.put(InvoiceConstants.currencyname, details[18]);
                obj.put("externalcurrencyrate", details[19]);
                obj.put("exchangerate", details[20]);
                String invCreationDate = details[21] == null ? df.format(details[5]) : df.format(details[21]);
                obj.put("date", invCreationDate);
                obj.put("dateinuserformat", invCreationDate);
                obj.put(Constants.shipdate, details[22] == null ? "" : df.format(details[22]));//XX
                obj.put(Constants.duedate, df.format(details[23]));
                obj.put("duedateInUserDateFormat", df.format(details[23]));
                obj.put(InvoiceConstants.personname, details[12]);
                obj.put(InvoiceConstants.personinfo, details[12] + "(" + details[24] + ")");
                obj.put("customercurrencyid", details[25]);
                obj.put("entryno", details[26]);
                obj.put("salespersonname", details[27]);
                obj.put("memo", details[28]);
                obj.put("salespersoncode", details[29]);
                obj.put("salespersoninfo", details[27]+"("+details[29]+")");
                obj.put("salespersonid", details[30]);
                obj.put(InvoiceConstants.termname, details[31] == null ? "" : details[31]);
                double customerCreditLimit = 0;
                double customerCreditLimitInbase = 0;
                String currencyId = "";
                if (details.length > 31) {
                    customerCreditLimit = (Double) details[32];
                    Date createdOn = (Date) details[33];
                    currencyId = (String) details[16]; 
                    KwlReturnObject bAmount = accCurrencyDAOobj.getCurrencyToBaseAmount(invoiceRequestParams, customerCreditLimit, currencyId, createdOn, 0);
                    customerCreditLimitInbase = authHandler.round((Double) bAmount.getEntityList().get(0), companyid);
                }
                if (isAgedDetailsReport && (details.length > 33)) {
                    obj.put("journalentryid", details[34]);
                }
                obj.put("creditlimit", customerCreditLimit);
                obj.put("creditlimitinbase", customerCreditLimitInbase);
                obj.put(InvoiceConstants.amountdueinbase, amountdueinbase);
                obj.put("amountdue", authHandler.round(amountdue, companyid));
                Date dueDate = null;

                if (datefilter == 0 || datefilter == Constants.agedDueDate0to30Filter) {
                    dueDate = df.parse(df.format(details[23]));
                } else {
                    dueDate = df.parse(df.format(details[5]));
                }
                
                if (dueDate.after(oneDayBeforeCal1Date)) {
                    if (dueDate.equals(cal1Date) && (datefilter == Constants.agedDueDate0to30Filter || datefilter == Constants.agedInvoiceDate0to30Filter)) {
                        amountdue2 = authHandler.round(amountdue, companyid);  // 0-30 Days
                    } else {
                        amountdue1 = authHandler.round(amountdue, companyid); // Current
                    }
                } else if ((cal2Date.before(dueDate) || cal2Date.equals(dueDate)) && cal1Date.after(dueDate)) { // 1-30
                    amountdue2 = authHandler.round(amountdue, companyid);
                } else if ((cal3Date.before(dueDate) || cal3Date.equals(dueDate)) && cal2Date.after(dueDate)) { // 31-60
                    amountdue3 = authHandler.round(amountdue, companyid);
                } else if ((cal4Date.before(dueDate) || cal4Date.equals(dueDate)) && cal3Date.after(dueDate)) { // 61-90
                    amountdue4 = authHandler.round(amountdue, companyid);
                } else if ((cal5Date.before(dueDate) || cal5Date.equals(dueDate)) && cal4Date.after(dueDate)) { // 91-120
                    amountdue5 = authHandler.round(amountdue, companyid);
                } else if ((cal6Date.before(dueDate) || cal6Date.equals(dueDate)) && cal5Date.after(dueDate)) { // 121-150
                    amountdue6 = authHandler.round(amountdue, companyid);
                } else if ((cal7Date.before(dueDate) || cal7Date.equals(dueDate)) && cal6Date.after(dueDate)) { // 151-180
                    amountdue7 = authHandler.round(amountdue, companyid);
                } else if ((cal8Date.before(dueDate) || cal8Date.equals(dueDate)) && cal7Date.after(dueDate)) { // 181-210
                    amountdue8 = authHandler.round(amountdue, companyid);
                } else if ((cal9Date.before(dueDate) || cal9Date.equals(dueDate)) && cal8Date.after(dueDate)) { // 211-240
                    amountdue9 = authHandler.round(amountdue, companyid);
                } else if ((cal10Date.before(dueDate) || cal10Date.equals(dueDate)) && cal9Date.after(dueDate)) { // 241-270
                    amountdue10 = authHandler.round(amountdue, companyid);
                } else {                                                                                          // > 270           
                    amountdue11 = authHandler.round(amountdue, companyid);
                } 
                
                switch (noOfInterval) {
                    case 2:
                        amountdue3 += amountdue4 + amountdue5 + amountdue6 + amountdue7 + amountdue8 + amountdue9 + amountdue10 + amountdue11;
                        amountdue4 = amountdue5 = amountdue6 = amountdue7 = amountdue8 = amountdue9 = amountdue10 = amountdue11 = 0;
                        break;
                    case 3:
                        amountdue4 += amountdue5 + amountdue6 + amountdue7 + amountdue8 + amountdue9 + amountdue10 + amountdue11;
                        amountdue5 = amountdue6 = amountdue7 = amountdue8 = amountdue9 = amountdue10 = amountdue11 = 0;
                        break;
                    case 4:
                        amountdue5 += amountdue6 + amountdue7 + amountdue8 + amountdue9 + amountdue10 + amountdue11;
                        amountdue6 = amountdue7 = amountdue8 = amountdue9 = amountdue10 = amountdue11 = 0;
                        break;
                    case 5:
                        amountdue6 += amountdue7 + amountdue8 + amountdue9 + amountdue10 + amountdue11;
                        amountdue7 = amountdue8 = amountdue9 = amountdue10 = amountdue11 = 0;
                        break;
                    case 6:
                        amountdue7 += amountdue8 + amountdue9 + amountdue10 + amountdue11;
                        amountdue8 = amountdue9 = amountdue10 = amountdue11 = 0;
                        break;
                    case 7:
                        amountdue8 += amountdue9 + amountdue10 + amountdue11;
                        amountdue9 = amountdue10 = amountdue11 = 0;
                        break;
                    case 8:
                        amountdue9 += amountdue10 + amountdue11;
                        amountdue10 = amountdue11 = 0;
                        break;
                    case 9:
                        amountdue10 += amountdue11;
                        amountdue11 = 0;
                        break;
                }
                
                obj.put("amountduenonnegative", (amountdue <= 0) ? 0 : authHandler.round(amountdue, companyid));//XX
                obj.put("amount", authHandler.round((Double) details[1], companyid));   //actual invoice amount
                obj.put("amountdue1", amountdue1);
                obj.put("amountdue2", amountdue2);
                obj.put("amountdue3", amountdue3);
                obj.put("amountdue4", amountdue4);
                obj.put("amountdue5", amountdue5);
                obj.put("amountdue6", amountdue6);
                obj.put("amountdue7", amountdue7);
                obj.put("amountdue8", amountdue8);
                obj.put("amountdue9", amountdue9);
                obj.put("amountdue10", amountdue10);
                obj.put("amountdue11", amountdue11);
//                obj.put(InvoiceConstants.ACCRUEDBALANCE, accruedbalance);
                obj.put("type", "Sales Invoice");
                if (!(ignoreZero && authHandler.round(amountdue, companyid) <= 0)) {
                    allTransaction.put(obj);
                }
//                if (isAgedDetailsReport && !companyid.equals("24822d7e-c609-4682-968e-a7dea5164023")) { // In case of Dhupar brothers do not call custom field
//                    String invId = details[0].toString();
//                    getCustomFeild(obj, invId, params, replaceFieldMap, customFieldMap, customDateFieldMap, fieldMap, replaceFieldMapRows, customFieldMapRows, customDateFieldMapRows, fieldMapRows);
//            }
            }
        } catch (ParseException ex) {
            Logger.getLogger(AccInvoiceServiceImpl.class.getName()).log(Level.SEVERE, null, ex);
        }
        return allTransaction;
    }
    
    public JSONArray getAllKnockOffJson(Map<String, Object> invoiceRequestParams) throws ServiceException, JSONException{
        JSONArray allTransaction = new JSONArray();
        allTransaction = getAllInvoiceKnockOffJSON(invoiceRequestParams);

        JSONArray arr1 = accCreditNoteService.getAllCNKnockOffJSON(invoiceRequestParams);
        for (int i = 0; i < arr1.length(); i++) {
            allTransaction.put(arr1.get(i));
        }
        arr1 = accDebitNoteService.getAllDNKnockOffJSON(invoiceRequestParams);
        for (int i = 0; i < arr1.length(); i++) {
            allTransaction.put(arr1.get(i));
        }
        arr1 = accReceiptService.getAllSalesReceiptKnockOffJSON(invoiceRequestParams);
        for (int i = 0; i < arr1.length(); i++) {
            allTransaction.put(arr1.get(i));
        }
        arr1 = accVendorPaymentServiceDAO.getSalesPaymentKnockOffJSON(invoiceRequestParams);
        for (int i = 0; i < arr1.length(); i++) {
            allTransaction.put(arr1.get(i));
        }
        return allTransaction;
    }
    
    public JSONArray getAllInvoiceKnockOffJSON(Map<String, Object> invoiceRequestParams) throws ServiceException, JSONException{
        JSONArray allTransaction = null;
        allTransaction = getInvoiceKnockOffJSON(invoiceRequestParams);
        JSONArray arr1 = getOpeningInvoiceKnockOffJSON(invoiceRequestParams);
        if (arr1 != null && arr1.length() > 0) {
            for (int i = 0; i < arr1.length(); i++) {
                allTransaction.put(arr1.getJSONObject(i));
            }
        }
        return allTransaction;
    }

    
    public JSONArray getInvoiceKnockOffJSON(Map<String, Object> invoiceRequestParams) throws ServiceException, JSONException{
        JSONArray allTransaction = new JSONArray();
        String currencyId = "";
        boolean onlyAmountDue = invoiceRequestParams.containsKey("onlyAmountDue") ? (Boolean) invoiceRequestParams.get("onlyAmountDue") : false;
        String companyid = (String) invoiceRequestParams.get(Constants.companyKey);
        List list = accInvoiceDAOobj.getInvoiceKnockOffTransactions(invoiceRequestParams);
        for (int i = 0; i < list.size(); i++) {
            Object[] details = (Object[]) list.get(i);
            JSONObject obj = new JSONObject();
            if(details[2]!=null && (Double)details[2] == 0){
                continue;
            }
            double amountdueinbase = (Double) details[2] - (Double) details[7];
            amountdueinbase = authHandler.round(amountdueinbase, companyid);
            double amountdue = (Double) details[1] - (Double) details[6];
            amountdue = authHandler.round(amountdue, companyid);
            obj.put(InvoiceConstants.amountdueinbase, amountdueinbase);
            obj.put("amountdue", authHandler.round(amountdue, companyid));
            obj.put(Constants.billid, details[0]);
            obj.put("creationdate", details[5]);
            obj.put("isOpeningBalanceTransaction", true);
            obj.put(InvoiceConstants.personid, details[11]);
            obj.put("type", Constants.CUSTOMER_INVOICE);
            if (!onlyAmountDue) {
                obj.put(Constants.companyKey, details[9]);
                obj.put("companyname", details[10]);
                obj.put("customername", details[12]);
                obj.put("customercode", details[24]);
                obj.put(InvoiceConstants.CustomerCreditTerm, details[13]);
                obj.put(InvoiceConstants.aliasname, details[14]);
                obj.put("type", Constants.CUSTOMER_INVOICE);
                obj.put(InvoiceConstants.billno, details[15]);
                obj.put(Constants.currencyKey, details[16]);
                obj.put(InvoiceConstants.currencysymbol, details[17]);
                obj.put(InvoiceConstants.currencyname, details[18]);
//                obj.put("externalcurrencyrate", details[19]);
                double externalCurrencyRate =  details[19] == null ? 1 : Double.parseDouble( details[19].toString());
                obj.put("externalcurrencyrate", externalCurrencyRate);
                String baseCurrencySymbol = (String)details[31];
                String exchangeRate = "1 "+baseCurrencySymbol+" = "+externalCurrencyRate+" "+obj.getString(InvoiceConstants.currencysymbol);
                obj.put("exchangerate", exchangeRate);
                obj.put("exchangerate", details[20]);
                obj.put("entrydate", details[21]);
                obj.put(Constants.shipdate, details[22]);
                obj.put(Constants.duedate, details[23]);
                obj.put(InvoiceConstants.personname, details[12]);
                obj.put("entryno", details[26]);
                obj.put("salespersonname", details[27]);
                obj.put("memo", details[28]);
                obj.put("salespersoncode", details[29]);
                obj.put("salespersonid", details[30]);
                obj.put("amountduenonnegative", (amountdue <= 0) ? 0 : authHandler.round(amountdue, companyid));//XX
                obj.put("amount", authHandler.round((Double) details[1], companyid));   //actual invoice amount
                obj.put(InvoiceConstants.termname, details[31] == null ? "" : details[31]);
                
                Double customerCreditLimit= 0.0;
                Double customerCreditLimitInbase= 0.0;
                if (details.length > 31) {
                    customerCreditLimit = (Double) details[32];
                    Date createdOn = (Date) details[5];
                    currencyId = (String) details[16]; 
                    KwlReturnObject bAmount = accCurrencyDAOobj.getCurrencyToBaseAmount(invoiceRequestParams, customerCreditLimit, currencyId, createdOn, 0);
                    customerCreditLimitInbase = authHandler.round((Double) bAmount.getEntityList().get(0), companyid);
                }                
                obj.put("creditlimitinbase", customerCreditLimitInbase);
            }
            allTransaction.put(obj);
        }
        return allTransaction;
    }
    
    public JSONArray getOpeningInvoiceKnockOffJSON(Map<String, Object> invoiceRequestParams) throws ServiceException, JSONException{
        JSONArray allTransaction = new JSONArray();
        String currencyId = "" ;
        boolean onlyAmountDue = invoiceRequestParams.containsKey("onlyAmountDue") ? (Boolean) invoiceRequestParams.get("onlyAmountDue") : false;
        String companyid = (String) invoiceRequestParams.get(Constants.companyKey);
        List list = accInvoiceDAOobj.getOpeningInvoiceKnockOffTransactions(invoiceRequestParams);
        for (int i = 0; i < list.size(); i++) {
            Object[] details = (Object[]) list.get(i);
            if(details[3]!=null && (Double)details[3] == 0){
                continue;
            }
            JSONObject obj = new JSONObject();
            double amountdueinbase = (Double) details[3] - (Double) details[5];
            amountdueinbase = authHandler.round(amountdueinbase, companyid);
            double amountdue = (Double) details[2] - (Double) details[4];
            amountdue = authHandler.round(amountdue, companyid);
            obj.put(InvoiceConstants.amountdueinbase, amountdueinbase);
            obj.put("amountdue", authHandler.round(amountdue, companyid));
            obj.put(Constants.billid, details[0]);
            obj.put("isOpeningBalanceTransaction", true);
            obj.put("creationdate", details[8]);
            obj.put(InvoiceConstants.personid, details[16]);
            obj.put("type", Constants.CUSTOMER_INVOICE);
            if(!onlyAmountDue){
                obj.put(Constants.companyKey, companyid);
                obj.put("companyname", details[29]);
                obj.put("customername", details[17]);
                obj.put("customercode", details[19]);
                obj.put(InvoiceConstants.CustomerCreditTerm, details[20]);
                obj.put(InvoiceConstants.aliasname, details[18]);
                obj.put(InvoiceConstants.billno, details[1]);
                obj.put(Constants.currencyKey, details[25]);
                obj.put(InvoiceConstants.currencysymbol, details[27]);
                obj.put(InvoiceConstants.currencyname, details[26]);
                double externalCurrencyRate =  details[24] == null ? 1 : Double.parseDouble( details[24].toString());
                obj.put("externalcurrencyrate",externalCurrencyRate);
                String baseCurrencySymbol = (String)details[31];
                String exchangeRate = "1 "+baseCurrencySymbol+" = "+externalCurrencyRate+" "+obj.getString(InvoiceConstants.currencysymbol);
                obj.put("exchangerate", exchangeRate);
                obj.put("entrydate", details[14]);
                obj.put(Constants.shipdate, details[30]);
                obj.put(Constants.duedate, details[9]);
                obj.put(InvoiceConstants.personname, details[17]);
                obj.put("entryno", details[13]);
                obj.put("salespersonname", details[10]);
                obj.put("memo", details[23]);
                obj.put("salespersoncode", details[11]);
                obj.put("salespersonid", details[12]);
                obj.put("amountduenonnegative", (amountdue <= 0) ? 0 : authHandler.round(amountdue, companyid));//XX
                obj.put("amount", authHandler.round((Double) details[2], companyid));   //actual invoice amount
                obj.put(InvoiceConstants.termname, details[7] == null ? "" : details[7]);
//                obj.put("creditlimitinbase", details[22]);
                       
                Double customerCreditLimit= 0.0;
                Double customerCreditLimitInbase= 0.0;
                if (details.length > 31) {
                    customerCreditLimit = (Double) details[22];
                    Date createdOn = (Date) details[8];
                    currencyId = (String) details[25]; 
                    KwlReturnObject bAmount = accCurrencyDAOobj.getCurrencyToBaseAmount(invoiceRequestParams, customerCreditLimit, currencyId, createdOn, 0);
                    customerCreditLimitInbase = authHandler.round((Double) bAmount.getEntityList().get(0), companyid);
                }                
                obj.put("creditlimitinbase", customerCreditLimitInbase);
            }
            allTransaction.put(obj);
        }
        return allTransaction;
    }
    
    
    
    public JSONObject getCustomFeild(JSONObject obj, Invoice invoice, JSONObject paramJobj, HashMap replaceFieldMap, HashMap customFieldMap, HashMap customDateFieldMap, HashMap FieldMap, HashMap replaceFieldMapRows, HashMap customFieldMapRows, HashMap customDateFieldMapRows, HashMap fieldMapRows) throws ServiceException, JSONException, SessionExpiredException {

//  code for Custom Field 
        
        String companyid = paramJobj.getString(Constants.companyKey);
        boolean isFixedAsset = paramJobj.optString(Constants.isFixedAsset, null) != null ? Boolean.parseBoolean(paramJobj.get(Constants.isFixedAsset).toString()) : false;
        boolean isConsignment = (StringUtil.isNullOrEmpty(paramJobj.optString("isConsignment", null))) ? false : Boolean.parseBoolean(paramJobj.get("isConsignment").toString());
        boolean isLeaseFixedAsset = (!StringUtil.isNullOrEmpty(paramJobj.optString(Constants.isLeaseFixedAsset, null))) ? Boolean.parseBoolean(paramJobj.get(Constants.isLeaseFixedAsset).toString()) : false;
        DateFormat userdf = authHandler.getUserDateFormatterWithoutTimeZone(paramJobj);
        DateFormat df = authHandler.getDateOnlyFormat();
        Set<InvoiceDetail> invoiceDetails = invoice.getRows();
        boolean getlineItemDetailsflag = (paramJobj.optString(Constants.getlineItemDetailsflag, null) != null) ? Boolean.FALSE.parseBoolean((String) paramJobj.get(Constants.getlineItemDetailsflag)) : false;

        if (invoice.isNormalInvoice()) {
            Map<String, Object> variableMap = new HashMap<String, Object>();
            HashMap<String, Object> invDetailRequestParams = new HashMap<String, Object>();
            ArrayList Detailfilter_names = new ArrayList(), Detailfilter_params = new ArrayList();
            Detailfilter_names.add(Constants.companyKey);
            Detailfilter_params.add(invoice.getCompany().getCompanyID());
            Detailfilter_names.add("journalentryId");
            Detailfilter_params.add(invoice.getJournalEntry().getID());
            Detailfilter_names.add("moduleId");
            int moduleId = isFixedAsset ? Constants.Acc_FixedAssets_DisposalInvoice_ModuleId : isConsignment ? Constants.Acc_ConsignmentInvoice_ModuleId : isLeaseFixedAsset ? Constants.LEASE_INVOICE_MODULEID : Constants.Acc_Invoice_ModuleId;
            Detailfilter_params.add(moduleId + "");
            invDetailRequestParams.put(Constants.filterNamesKey, Detailfilter_names);
            invDetailRequestParams.put(Constants.filterParamsKey, Detailfilter_params);
            KwlReturnObject idcustresult = accJournalEntryobj.getJournalEntryCustomDataNew(invDetailRequestParams);
            if (idcustresult.getEntityList().size() > 0) {
                String journalentryId = idcustresult.getEntityList().get(0).toString();
                KwlReturnObject jeCustomResult = accountingHandlerDAOobj.getObject(AccJECustomData.class.getName(), journalentryId);
                AccJECustomData jeCustom = (AccJECustomData) jeCustomResult.getEntityList().get(0);
                AccountingManager.setCustomColumnValues(jeCustom, FieldMap, replaceFieldMap, variableMap);
                boolean isExport = StringUtil.isNullOrEmpty(paramJobj.optString(Constants.isExport)) ? false : Boolean.parseBoolean(paramJobj.get(Constants.isExport).toString());
                if (!isExport) {
                    isExport = StringUtil.isNullOrEmpty(paramJobj.optString("isAged")) ? false : Boolean.parseBoolean(paramJobj.get("isAged").toString());
                }
                JSONObject params = new JSONObject();
                params.put(Constants.companyKey, companyid);
                params.put(Constants.isExport, isExport);
                params.put("userdf", userdf);
                params.put(Constants.isdefaultHeaderMap, paramJobj.optBoolean(Constants.isdefaultHeaderMap, false));

                if (paramJobj.has(Constants.browsertz) && !StringUtil.isNullOrEmpty(paramJobj.getString(Constants.browsertz))) {
                    params.put(Constants.browsertz, paramJobj.getString(Constants.browsertz));
                }
                fieldDataManagercntrl.addCustomData(variableMap, customFieldMap, customDateFieldMap, obj, params);
            }

            if (invoiceDetails != null && !invoiceDetails.isEmpty()) {// In aged Report we are showing line level item dimension at global level by comma seperated. below code is for that
                Map<String, List<Object>> linelabelDataMap = new LinkedHashMap();
                for (InvoiceDetail row : invoiceDetails) {
                    JSONObject customObject = new JSONObject();
                    Map<String, Object> variableMapRows = new HashMap<String, Object>();
                    HashMap<String, Object> invDetailsRequestParams = new HashMap<String, Object>();
                    Detailfilter_names = new ArrayList();
                    Detailfilter_params = new ArrayList();
                    Detailfilter_names.add(Constants.Acc_JEDetail_recdetailId);
                    Detailfilter_params.add(row.getID());
                    invDetailsRequestParams.put(Constants.filterNamesKey, Detailfilter_names);
                    invDetailsRequestParams.put(Constants.filterParamsKey, Detailfilter_params);
                    KwlReturnObject idcustdetailresult = accInvoiceDAOobj.getInvoiceDetailsCustomData(invDetailsRequestParams);
                    if (idcustdetailresult.getEntityList().size() > 0) {
                        AccJEDetailCustomData jeDetailCustom = (AccJEDetailCustomData) idcustdetailresult.getEntityList().get(0);
                        AccountingManager.setCustomColumnValues(jeDetailCustom, fieldMapRows, replaceFieldMapRows, variableMapRows);
                        if (jeDetailCustom != null) {
                            JSONObject params = new JSONObject();
                            params.put(Constants.isExport, false);
                            params.put(Constants.isForReport, true);
                            params.put(Constants.isdefaultHeaderMap, paramJobj.optBoolean(Constants.isdefaultHeaderMap, false));
                            if (!getlineItemDetailsflag) {
                                fieldDataManagercntrl.getLineLevelCustomData(variableMapRows, customFieldMapRows, customDateFieldMapRows, customObject, params);
                            } else {
                                fieldDataManagercntrl.getLineLevelCustomDataWithKey(variableMapRows, customFieldMapRows, customDateFieldMapRows, customObject, params);
                            }
                            if (customObject.length() > 0) {
                                Iterator<String> keys = customObject.keys();
                                while (keys.hasNext()) {
                                    String key = (String) keys.next();
                                    if (!key.equals("allCustomFieldKeyValuePairString")) {// no need to go for key allCustomFieldKeyValuePairString
                                        if (linelabelDataMap.containsKey(key)) {
                                            if (!linelabelDataMap.get(key).contains(customObject.get(key))) {
                                                linelabelDataMap.get(key).add(customObject.get(key));
                                            }
                                        } else {
                                            List<Object> dataList = new ArrayList<>();
                                            dataList.add(customObject.get(key));
                                            linelabelDataMap.put(key, dataList);
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                for (Map.Entry<String, List<Object>> entry : linelabelDataMap.entrySet()) {
                    String commaSeperatedValue = "";
                    String key = entry.getKey();
                    List<Object> data = entry.getValue();
                    for (Object dataObj : data) {
                        if (dataObj != null) {
                            if (StringUtil.isNullOrEmpty(commaSeperatedValue)) {
                                commaSeperatedValue = dataObj.toString();
                            } else {
                                commaSeperatedValue += "," + dataObj.toString();
                            }
                        }
                    }
                    obj.put(key, commaSeperatedValue);
                }
            }
        }
        return obj;
    }

    public HashMap getCustomerAgedReceivableMap(HttpServletRequest request, boolean isAgedReceivables) throws SessionExpiredException,  UnsupportedEncodingException, ServiceException{
        String companyid = sessionHandlerImpl.getCompanyid(request);
//        String companyid = request.getAttribute(Constants.companyKey).toString();
        HashMap invoiceRequestParams = AccInvoiceServiceHandler.getInvoiceRequestMap(request);
        try {
            invoiceRequestParams.put("companyid", companyid);
            boolean isCallFromDD = false;
            if (request.getAttribute("isCallFromDD") != null) {
                isCallFromDD = Boolean.parseBoolean(request.getAttribute("isCallFromDD").toString());
            }
            String transactionId = request.getAttribute("transactionId") == null ? "" : request.getAttribute("transactionId").toString();
            if (isCallFromDD) {
                invoiceRequestParams.put("custVendorID", transactionId);
            }
            boolean isAged = (!StringUtil.isNullOrEmpty(request.getParameter("isAged"))) ? Boolean.parseBoolean(request.getParameter("isAged")) : false;
            if (!StringUtil.isNullOrEmpty(request.getParameter(Constants.moduleid))) {
                /*
                 remove searchjson while export Statement of account
                 */
                int module = Integer.parseInt(request.getParameter(Constants.moduleid));
                if (module == Constants.Acc_Customer_ModuleId) {
                    invoiceRequestParams.remove(Constants.Acc_Search_Json);
                }
            }
            boolean isAdvanceSearch = false;
            String Searchjson = "";
            String invoiceSearchJson = "";
            String receiptSearchJson = "";
            String cnSearchJson = "";
            String dnSearchJson = "";
            String makePaymentSearchJson = "";
            String filterConjuctionCriteria = com.krawler.common.util.Constants.and;
            if (invoiceRequestParams.containsKey(Constants.Filter_Criteria) && invoiceRequestParams.get(Constants.Filter_Criteria) != null) {
                if (invoiceRequestParams.get(Constants.Filter_Criteria).toString().equalsIgnoreCase("OR")) {
                    filterConjuctionCriteria = com.krawler.common.util.Constants.or;
                }
            }
            if (isAged && invoiceRequestParams.containsKey(Constants.Acc_Search_Json) && invoiceRequestParams.get(Constants.Acc_Search_Json) != null) {
                Searchjson = invoiceRequestParams.get(Constants.Acc_Search_Json).toString();
                if (!StringUtil.isNullOrEmpty(Searchjson)) {
                    isAdvanceSearch = true;
                    invoiceRequestParams.put(Constants.Filter_Criteria, request.getParameter(Constants.Filter_Criteria));
                    HashMap<String, Object> reqPar1 = new HashMap<>();
                    reqPar1.put(Constants.companyKey, invoiceRequestParams.get(Constants.companyKey));
                    reqPar1.put(Constants.Acc_Search_Json, Searchjson);
                    reqPar1.put(Constants.Filter_Criteria, filterConjuctionCriteria);
                    reqPar1.put(Constants.moduleid, Constants.Acc_Invoice_ModuleId);
                    invoiceSearchJson = fieldDataManagercntrl.getSearchJsonByModuleID(reqPar1);
                    reqPar1.remove(Constants.moduleid);
                    reqPar1.put(Constants.moduleid, Constants.Acc_Receive_Payment_ModuleId);
                    receiptSearchJson = fieldDataManagercntrl.getSearchJsonByModuleID(reqPar1);
                    reqPar1.put(Constants.moduleid, Constants.Acc_Debit_Note_ModuleId);
                    dnSearchJson = fieldDataManagercntrl.getSearchJsonByModuleID(reqPar1);
                    reqPar1.put(Constants.moduleid, Constants.Acc_Credit_Note_ModuleId);
                    cnSearchJson = fieldDataManagercntrl.getSearchJsonByModuleID(reqPar1);
                    reqPar1.put(Constants.moduleid, Constants.Acc_Make_Payment_ModuleId);
                    makePaymentSearchJson = fieldDataManagercntrl.getSearchJsonByModuleID(reqPar1);
                }
            }
            invoiceRequestParams.put("invoiceSearchJson", invoiceSearchJson);
            invoiceRequestParams.put("receiptSearchJson", receiptSearchJson);
            invoiceRequestParams.put("cnSearchJson", cnSearchJson);
            invoiceRequestParams.put("dnSearchJson", dnSearchJson);
            invoiceRequestParams.put("makePaymentSearchJson", makePaymentSearchJson);
            invoiceRequestParams.put("isAdvanceSearch", isAdvanceSearch);

            if (invoiceRequestParams.containsKey(Constants.start)) { //Removing paging here because it is applying on each vendor data (CN/DN etc). Due to this complete amount due not showing in AP Summary.  
                invoiceRequestParams.remove(Constants.start);
            }
            if (invoiceRequestParams.containsKey(Constants.limit)) {
                invoiceRequestParams.remove(Constants.limit);
            }
            Calendar oneDayBeforeCal1 = Calendar.getInstance();
            Calendar cal1 = Calendar.getInstance();
            Calendar cal2 = Calendar.getInstance();
            Calendar cal3 = Calendar.getInstance();
            Calendar cal4 = Calendar.getInstance();
            Calendar cal5 = Calendar.getInstance();
            Calendar cal6 = Calendar.getInstance();
            Calendar cal7 = Calendar.getInstance();
            Calendar cal8 = Calendar.getInstance();
            Calendar cal9 = Calendar.getInstance();
            Calendar cal10 = Calendar.getInstance();

//            String curDateString = (!StringUtil.isNullOrEmpty(request.getParameter("curdate"))) ? request.getParameter("curdate") : ((!StringUtil.isNullOrEmpty(request.getParameter("stdate"))) ? request.getParameter("stdate") : request.getParameter(Constants.REQ_startdate));
            String curDateString = !(StringUtil.isNullOrEmpty(request.getParameter(Constants.asOfDate))) ? request.getParameter(Constants.asOfDate) : request.getParameter(Constants.curdate);
            DateFormat df = authHandler.getDateOnlyFormat();
            Date curDate = df.parse(curDateString);
            invoiceRequestParams.put("df", df);
            int duration = request.getParameter("duration") == null ? 0 : Integer.parseInt(request.getParameter("duration"));
            int noOfInterval = request.getParameter("noOfInterval") == null ? 0 : Integer.parseInt(request.getParameter("noOfInterval"));
            oneDayBeforeCal1.setTime(curDate);
            cal1.setTime(curDate);
            cal2.setTime(curDate);
            cal3.setTime(curDate);
            cal4.setTime(curDate);
            cal5.setTime(curDate);
            cal6.setTime(curDate);
            cal7.setTime(curDate);
            cal8.setTime(curDate);
            cal9.setTime(curDate);
            cal10.setTime(curDate);
            oneDayBeforeCal1.add(Calendar.DAY_OF_YEAR, -1);
            cal2.add(Calendar.DAY_OF_YEAR, -duration);
            cal3.add(Calendar.DAY_OF_YEAR, -(duration * 2));
            cal4.add(Calendar.DAY_OF_YEAR, -(duration * 3));
            cal5.add(Calendar.DAY_OF_YEAR, -(duration * 4));
            cal6.add(Calendar.DAY_OF_YEAR, -(duration * 5));
            cal7.add(Calendar.DAY_OF_YEAR, -(duration * 6));
            cal8.add(Calendar.DAY_OF_YEAR, -(duration * 7));
            cal9.add(Calendar.DAY_OF_YEAR, -(duration * 8));
            cal10.add(Calendar.DAY_OF_YEAR, -(duration * 9));

            Date oneDayBeforeCal1Date = null;
            Date cal1Date = null;
            Date cal2Date = null;
            Date cal3Date = null;
            Date cal4Date = null;
            Date cal5Date = null;
            Date cal6Date = null;
            Date cal7Date = null;
            Date cal8Date = null;
            Date cal9Date = null;
            Date cal10Date = null;

            String oneDayBeforeCal1String = df.format(oneDayBeforeCal1.getTime());
            oneDayBeforeCal1Date = df.parse(oneDayBeforeCal1String);

            String cal1String = df.format(cal1.getTime());
            cal1Date = df.parse(cal1String);

            String cal2String = df.format(cal2.getTime());
            cal2Date = df.parse(cal2String);

            String cal3String = df.format(cal3.getTime());
            cal3Date = df.parse(cal3String);

            String cal4String = df.format(cal4.getTime());
            cal4Date = df.parse(cal4String);

            String cal5String = df.format(cal5.getTime());
            cal5Date = df.parse(cal5String);

            String cal6String = df.format(cal6.getTime());
            cal6Date = df.parse(cal6String);

            String cal7String = df.format(cal7.getTime());
            cal7Date = df.parse(cal7String);
            
            String cal8String = df.format(cal8.getTime());
            cal8Date = df.parse(cal8String);
            
            String cal9String = df.format(cal9.getTime());
            cal9Date = df.parse(cal9String);
            
            String cal10String = df.format(cal10.getTime());
            cal10Date = df.parse(cal10String);
            
            invoiceRequestParams.put("cntype", null);
            invoiceRequestParams.put("isAgedSummary", true);
            if (isAgedReceivables) {
                invoiceRequestParams.put("isAgedReceivables", true);
            }

            if (isAdvanceSearch) {
                invoiceRequestParams.put(Constants.Filter_Criteria, request.getParameter(Constants.Filter_Criteria));
                invoiceRequestParams.put(Constants.Acc_Search_Json, invoiceSearchJson);
                invoiceRequestParams.put(Constants.moduleid, Constants.Acc_Invoice_ModuleId);
            }
            invoiceRequestParams.put("isBadDebtInvoices", !StringUtil.isNullOrEmpty(request.getParameter("isBadDebtInvoices")) ? Boolean.parseBoolean(request.getParameter("isBadDebtInvoices")) : false);
            invoiceRequestParams.put("ignorezero", !StringUtil.isNullOrEmpty(request.getParameter("ignorezero")) ? Boolean.parseBoolean(request.getParameter("ignorezero")) : false);
            invoiceRequestParams.put("report", !StringUtil.isNullOrEmpty(request.getParameter("report")) ? Boolean.parseBoolean(request.getParameter("report")) : false);
            invoiceRequestParams.put("isSOA", request.getAttribute("isSOA") != null ? (Boolean) request.getAttribute("isSOA") : false);
            invoiceRequestParams.put("oneDayBeforeCal1", oneDayBeforeCal1);
            invoiceRequestParams.put("cal1", cal1);
            invoiceRequestParams.put("cal2", cal2);
            invoiceRequestParams.put("cal3", cal3);
            invoiceRequestParams.put("cal4", cal4);
            invoiceRequestParams.put("cal5", cal5);
            invoiceRequestParams.put("cal6", cal6);
            invoiceRequestParams.put("cal7", cal7);
            invoiceRequestParams.put("cal8", cal8);
            invoiceRequestParams.put("cal9", cal9);
            invoiceRequestParams.put("cal10", cal10);
            invoiceRequestParams.put("cal1Date", cal1Date);
            invoiceRequestParams.put("cal2Date", cal2Date);
            invoiceRequestParams.put("cal3Date", cal3Date);
            invoiceRequestParams.put("cal4Date", cal4Date);
            invoiceRequestParams.put("cal5Date", cal5Date);
            invoiceRequestParams.put("cal6Date", cal6Date);
            invoiceRequestParams.put("cal7Date", cal7Date);
            invoiceRequestParams.put("cal8Date", cal8Date);
            invoiceRequestParams.put("cal9Date", cal9Date);
            invoiceRequestParams.put("cal10Date", cal10Date);
            invoiceRequestParams.put("oneDayBeforeCal1Date", oneDayBeforeCal1Date);
            invoiceRequestParams.put("noOfInterval", noOfInterval);
            invoiceRequestParams.put("onlyamountdue", !StringUtil.isNullOrEmpty(request.getParameter("onlyamountdue")) ? Boolean.parseBoolean(request.getParameter("onlyamountdue")) : false);
            invoiceRequestParams.put("globalCurrencyID", AccountingManager.getGlobalCurrencyidFromRequest(request));
            invoiceRequestParams.put("requestCompanyID", AccountingManager.getCompanyidFromRequest(request));
        } catch (ParseException ex) {
            Logger.getLogger(AccInvoiceServiceImpl.class.getName()).log(Level.SEVERE, null, ex);
        }

        return invoiceRequestParams;
    }
    
 @Override
  public JSONObject getCustomerAgedReceivableMerged(HttpServletRequest request, boolean exportCustomerAged,boolean isAgedReceivables) throws ServiceException, JSONException, SessionExpiredException, ParseException {

        JSONObject jObj = new JSONObject();
        JSONObject mainJobj = new JSONObject();
        JSONArray jArr = new JSONArray();
        try {
            String companyid = sessionHandlerImpl.getCompanyid(request);
            String baseCurrencyId = sessionHandlerImpl.getCurrencyID(request);
            JSONObject paramObj;

            // code for DocumentDesigner start
            String templatesubtype = StringUtil.isNullOrEmpty(request.getParameter("templatesubtype"))? Constants.TEMPLATE_SUBTYPE_SOA : request.getParameter("templatesubtype");
            
            //report id flag
            boolean isAged = (!StringUtil.isNullOrEmpty(request.getParameter("isAged"))) ? Boolean.parseBoolean(request.getParameter("isAged")) : false;
            boolean isExportReport = (!StringUtil.isNullOrEmpty(request.getParameter("isExportReport"))) ? Boolean.parseBoolean(request.getParameter("isExportReport")) : false;
            boolean isCallFromDD = (request.getAttribute("isCallFromDD") != null) ? (Boolean) request.getAttribute("isCallFromDD") : false;
            //flag for chart
            String chartType = "";
            if(!StringUtil.isNullOrEmpty(request.getParameter(Constants.CHART_TYPE))) {
                chartType = request.getParameter(Constants.CHART_TYPE);
            }
            
            
            /*
             When check(Drop Down) to include child accounts is disabled then includeExcludeChildCombobox flag will be set as TRUE to include child accounts
             
              includeExcludeChildCombobox, if All = Include all child accounts while fetching parent account data
              includeExcludeChildCombobox, if TRUE = Include all child accounts while fetching parent account data
              includeExcludeChildCombobox, if FALSE = Exclude child acounts while fetching parent account data
             
             */
            
            /*  
             
             * NULL pointer exception Caused due to 
               request.getParameter("includeExcludeChildCmb").toString().equals("All")
             
             * To handle null pointer Exception (request.getParameter("includeExcludeChildCmb") != null)
             
             */
            
            boolean includeExcludeChildCmb;
            if (request.getParameter("includeExcludeChildCmb") != null && request.getParameter("includeExcludeChildCmb").toString().equals("All")) {
                includeExcludeChildCmb = true;
            } else {
                includeExcludeChildCmb = request.getParameter("includeExcludeChildCmb") != null ? Boolean.parseBoolean(request.getParameter("includeExcludeChildCmb")) : false;
            }
           
           // code for DocumentDesigner end
            
            double totalinbase=0.0;
//            String curDateString = (!StringUtil.isNullOrEmpty(request.getParameter("curdate"))) ? request.getParameter("curdate") : ((!StringUtil.isNullOrEmpty(request.getParameter("stdate"))) ? request.getParameter("stdate") : request.getParameter(Constants.REQ_startdate));
            String curDateString = !(StringUtil.isNullOrEmpty(request.getParameter(Constants.asOfDate))) ? request.getParameter(Constants.asOfDate) : request.getParameter(Constants.curdate);
            DateFormat df = authHandler.getDateOnlyFormat();
            Date curDate = df.parse(curDateString);
            int duration = request.getParameter("duration") == null ? 0 : Integer.parseInt(request.getParameter("duration"));
            int noOfInterval = request.getParameter("noOfInterval") == null ? 7 : Integer.parseInt(request.getParameter("noOfInterval"));
            boolean showCustVendorWithZeroAmounts = StringUtil.isNullOrEmpty(request.getParameter("showCustVendorWithZeroAmounts"))?false:StringUtil.getBoolean(request.getParameter("showCustVendorWithZeroAmounts"));
            boolean isdistibutive = StringUtil.getBoolean(request.getParameter("isdistributive"));
            boolean checkForEx=false;
            if (StringUtil.getBoolean(request.getParameter("checkforex"))) {
                checkForEx = StringUtil.getBoolean(request.getParameter("checkforex"));
            }
           
            boolean isdetailedXls=false;
            boolean isDetailedPDF=false;
            if (request.getAttribute("detailedXls") !=null) {
                isdetailedXls = (Boolean)request.getAttribute("detailedXls");
            }
            String linedetails=isdetailedXls ?"_line":"";
            int datefilter = StringUtil.getInteger(request.getParameter("datefilter"));// 0 = Invoice Due date OR 1 = Invoice date
            boolean isCurrencyDetails = request.getParameter("isCurrencyDetails") != null ? Boolean.parseBoolean(request.getParameter("isCurrencyDetails")) : false;
            if (request.getAttribute("isCurrencyDetails") != null) {
                isCurrencyDetails = (Boolean) request.getAttribute("isCurrencyDetails");
            }
            
            HashMap invoiceRequestParams = getCustomerAgedReceivableMap(request, isAgedReceivables);
            Date startDate = null;
            if (invoiceRequestParams.containsKey(Constants.REQ_startdate) && invoiceRequestParams.get(Constants.REQ_startdate) != null) {
                startDate = invoiceRequestParams.get(Constants.REQ_startdate).toString().equals("") ? df.parse(Constants.opening_Date) :df.parse(invoiceRequestParams.get(Constants.REQ_startdate).toString());
            }
            if (request.getAttribute("detailedPDF") != null) {
                isDetailedPDF = (Boolean) request.getAttribute("detailedPDF");
            }
            invoiceRequestParams.put("includeExcludeChildCmb",includeExcludeChildCmb);
            
            double amountdue1 = 0;
            double amountdue2 = 0;
            double amountdue3 = 0;
            double amountdue4 = 0;
            double amountdue5 = 0;
            double amountdue6 = 0;
            double amountdue7 = 0;
            double amountdue8 = 0;
            double amountdue9 = 0;
            double amountdue10 = 0;
            double amountdue11 = 0;

            double amountdueinbase1 = 0;
            double amountdueinbase2 = 0;
            double amountdueinbase3 = 0;
            double amountdueinbase4 = 0;
            double amountdueinbase5 = 0;
            double amountdueinbase6 = 0;
            double amountdueinbase7 = 0;
            double amountdueinbase8 = 0;
            double amountdueinbase9 = 0;
            double amountdueinbase10 = 0;
            double amountdueinbase11 = 0;
            
            Calendar customizeSumryFrom1 = Calendar.getInstance();
            Calendar customizeSumryTo1 = Calendar.getInstance();
            Calendar customizeSumryFrom2 = Calendar.getInstance();
            Calendar customizeSumryTo2 = Calendar.getInstance();
            Calendar customizeSumryFrom3 = Calendar.getInstance();
            Calendar customizeSumryTo3 = Calendar.getInstance();
            Calendar customizeSumryFrom4 = Calendar.getInstance();
            Calendar customizeSumryTo4 = Calendar.getInstance();
            Calendar customizeSumryFrom5 = Calendar.getInstance();
            Calendar customizeSumryTo5 = Calendar.getInstance();
            Calendar customizeSumryFrom6 = Calendar.getInstance();
            Calendar customizeSumryTo6 = Calendar.getInstance();
            Calendar customizeSumryFrom7 = Calendar.getInstance();
            Calendar customizeSumryTo7 = Calendar.getInstance();
            boolean customizedSumryReportFlag = false;
            Date oneDayBeforeCal1Date = (Date)invoiceRequestParams.get("oneDayBeforeCal1Date");
            Date cal1Date = (Date)invoiceRequestParams.get("cal1Date");
            Date cal2Date = (Date)invoiceRequestParams.get("cal2Date");
            Date cal3Date = (Date)invoiceRequestParams.get("cal3Date");
            Date cal4Date = (Date)invoiceRequestParams.get("cal4Date");
            Date cal5Date = (Date)invoiceRequestParams.get("cal5Date");
            Date cal6Date = (Date)invoiceRequestParams.get("cal6Date");
            Date cal7Date = (Date)invoiceRequestParams.get("cal7Date");
            Date cal8Date = (Date)invoiceRequestParams.get("cal8Date");
            Date cal9Date = (Date)invoiceRequestParams.get("cal9Date");
            Date cal10Date = (Date)invoiceRequestParams.get("cal10Date");
                     
            Map<String, String> amountDueMap = new HashMap<String, String>();

            String customizedSumryReportFlagStr = request.getParameter("customizedSummaryReportFlag");
            if (!StringUtil.isNullOrEmpty(customizedSumryReportFlagStr)) {
                customizedSumryReportFlag = Boolean.parseBoolean(customizedSumryReportFlagStr);
                String fromDuration = null;
                String toDuration = null;
                List<String> fromDurationArr = new ArrayList<String>();// request.getParameter("fromDuration").split(",");
                List<String> toDurationArr = new ArrayList<String>();


                JSONArray fromDurationjson = new JSONArray(request.getParameter("fromDuration"));
                JSONArray toDurationjson = new JSONArray(request.getParameter("toDuration"));
                for (int i = 0; i < fromDurationjson.length(); i++) {
                    JSONObject object1 = new JSONObject(fromDurationjson.getString(i));
                    fromDurationArr.add(object1.getString("id"));
                    amountDueMap.put(object1.getString("amountdueindex"), object1.getString("amountdue"));
                    JSONObject object2 = new JSONObject(toDurationjson.getString(i));
                    toDurationArr.add(object2.getString("id"));


                }
                for (int i = 0; i < fromDurationArr.size(); i++) {
                    fromDuration = fromDurationArr.get(i);
                    toDuration = toDurationArr.get(i);
                    switch (i + 1) {
                        case 1:
                            if (!StringUtil.isNullOrEmpty(fromDuration) && !StringUtil.isNullOrEmpty(toDuration)) {
                                int fromDur = Integer.parseInt(fromDuration);
                                int toDur = Integer.parseInt(toDuration);
                                customizeSumryFrom1.setTime(curDate);
                                customizeSumryTo1.setTime(curDate);
                                customizeSumryFrom1.add(Calendar.DAY_OF_YEAR, -fromDur);
                                customizeSumryTo1.add(Calendar.DAY_OF_YEAR, -toDur);
                            }
                            break;
                        case 2:
                            if (!StringUtil.isNullOrEmpty(fromDuration) && !StringUtil.isNullOrEmpty(toDuration)) {
                                int fromDur = Integer.parseInt(fromDuration);
                                int toDur = Integer.parseInt(toDuration);
                                customizeSumryFrom2.setTime(curDate);
                                customizeSumryTo2.setTime(curDate);
                                customizeSumryFrom2.add(Calendar.DAY_OF_YEAR, -fromDur);
                                customizeSumryTo2.add(Calendar.DAY_OF_YEAR, -toDur);
                            }
                            break;
                        case 3:
                            if (!StringUtil.isNullOrEmpty(fromDuration) && !StringUtil.isNullOrEmpty(toDuration)) {
                                int fromDur = Integer.parseInt(fromDuration);
                                int toDur = Integer.parseInt(toDuration);
                                customizeSumryFrom3.setTime(curDate);
                                customizeSumryTo3.setTime(curDate);
                                customizeSumryFrom3.add(Calendar.DAY_OF_YEAR, -fromDur);
                                customizeSumryTo3.add(Calendar.DAY_OF_YEAR, -toDur);
                            }
                            break;
                        case 4:
                            if (!StringUtil.isNullOrEmpty(fromDuration) && !StringUtil.isNullOrEmpty(toDuration)) {
                                int fromDur = Integer.parseInt(fromDuration);
                                int toDur = Integer.parseInt(toDuration);
                                customizeSumryFrom4.setTime(curDate);
                                customizeSumryTo4.setTime(curDate);
                                customizeSumryFrom4.add(Calendar.DAY_OF_YEAR, -fromDur);
                                customizeSumryTo4.add(Calendar.DAY_OF_YEAR, -toDur);
                            }
                            break;
                        case 5:
                            if (!StringUtil.isNullOrEmpty(fromDuration) && !StringUtil.isNullOrEmpty(toDuration)) {
                                int fromDur = Integer.parseInt(fromDuration);
                                int toDur = Integer.parseInt(toDuration);
                                customizeSumryFrom5.setTime(curDate);
                                customizeSumryTo5.setTime(curDate);
                                customizeSumryFrom5.add(Calendar.DAY_OF_YEAR, -fromDur);
                                customizeSumryTo5.add(Calendar.DAY_OF_YEAR, -toDur);
                            }
                            break;
                        case 6:
                            if (!StringUtil.isNullOrEmpty(fromDuration) && !StringUtil.isNullOrEmpty(toDuration)) {
                                int fromDur = Integer.parseInt(fromDuration);
                                int toDur = Integer.parseInt(toDuration);
                                customizeSumryFrom6.setTime(curDate);
                                customizeSumryTo6.setTime(curDate);
                                customizeSumryFrom6.add(Calendar.DAY_OF_YEAR, -fromDur);
                                customizeSumryTo6.add(Calendar.DAY_OF_YEAR, -toDur);
                            }
                            break;
                        case 7:
                            if (!StringUtil.isNullOrEmpty(fromDuration) && !StringUtil.isNullOrEmpty(toDuration)) {
                                int fromDur = Integer.parseInt(fromDuration);
                                int toDur = Integer.parseInt(toDuration);
                                customizeSumryFrom7.setTime(curDate);
                                customizeSumryTo7.setTime(curDate);
                                customizeSumryFrom7.add(Calendar.DAY_OF_YEAR, -fromDur);
                                customizeSumryTo7.add(Calendar.DAY_OF_YEAR, -toDur);
                            }
                            break;


                    }
                }

            }
            
            Date customizeSumryFrom1Date = null;
            Date customizeSumryTo1Date = null;
            Date customizeSumryFrom2Date = null;
            Date customizeSumryTo2Date = null;
            Date customizeSumryFrom3Date = null;
            Date customizeSumryTo3Date = null;
            Date customizeSumryFrom4Date = null;
            Date customizeSumryTo4Date = null;
            Date customizeSumryFrom5Date = null;
            Date customizeSumryTo5Date = null;
            Date customizeSumryFrom6Date = null;
            Date customizeSumryTo6Date = null;
            Date customizeSumryFrom7Date = null;
            Date customizeSumryTo7Date = null;

            String customizeSumryFrom1String = df.format(customizeSumryFrom1.getTime());
            customizeSumryFrom1Date = df.parse(customizeSumryFrom1String);
            String customizeSumryTo1String = df.format(customizeSumryTo1.getTime());
            customizeSumryTo1Date = df.parse(customizeSumryTo1String);

            String customizeSumryFrom2String = df.format(customizeSumryFrom2.getTime());
            customizeSumryFrom2Date = df.parse(customizeSumryFrom2String);
            String customizeSumryTo2String = df.format(customizeSumryTo2.getTime());
            customizeSumryTo2Date = df.parse(customizeSumryTo2String);

            String customizeSumryFrom3String = df.format(customizeSumryFrom3.getTime());
            customizeSumryFrom3Date = df.parse(customizeSumryFrom3String);
            String customizeSumryTo3String = df.format(customizeSumryTo3.getTime());
            customizeSumryTo3Date = df.parse(customizeSumryTo3String);

            String customizeSumryFrom4String = df.format(customizeSumryFrom4.getTime());
            customizeSumryFrom4Date = df.parse(customizeSumryFrom4String);
            String customizeSumryTo4String = df.format(customizeSumryTo4.getTime());
            customizeSumryTo4Date = df.parse(customizeSumryTo4String);

            String customizeSumryFrom5String = df.format(customizeSumryFrom5.getTime());
            customizeSumryFrom5Date = df.parse(customizeSumryFrom5String);
            String customizeSumryTo5String = df.format(customizeSumryTo5.getTime());
            customizeSumryTo5Date = df.parse(customizeSumryTo5String);

            String customizeSumryFrom6String = df.format(customizeSumryFrom6.getTime());
            customizeSumryFrom6Date = df.parse(customizeSumryFrom6String);
            String customizeSumryTo6String = df.format(customizeSumryTo6.getTime());
            customizeSumryTo6Date = df.parse(customizeSumryTo6String);

            String customizeSumryFrom7String = df.format(customizeSumryFrom7.getTime());
            customizeSumryFrom7Date = df.parse(customizeSumryFrom7String);
            String customizeSumryTo7String = df.format(customizeSumryTo7.getTime());
            customizeSumryTo7Date = df.parse(customizeSumryTo7String);      

            //Advance Search releated common code  
            boolean isAdvanceSearch = (boolean)invoiceRequestParams.get("isAdvanceSearch");
            String receiptSearchJson = (String)invoiceRequestParams.get("receiptSearchJson");
            String cnSearchJson = (String)invoiceRequestParams.get("cnSearchJson");
            String dnSearchJson = (String)invoiceRequestParams.get("dnSearchJson");
            String makePaymentSearchJson = (String)invoiceRequestParams.get("makePaymentSearchJson");

            
            String start = "";
            int previousStart=0;
            int limit =0;
            String firstCustomerId="";
            String lastCustomerId="";
            int skipRecords=1;
            if (!checkForEx) {
//                if (!StringUtil.isNullOrEmpty(request.getParameter(Constants.start))) {
//                 start = request.getParameter(Constants.start);
//                }
//                if (!StringUtil.isNullOrEmpty(request.getParameter(Constants.limit))) {
//                 limit = Integer.parseInt(request.getParameter(Constants.limit));
//                }
                if (!StringUtil.isNullOrEmpty(request.getParameter("lastcustomerid"))) {
                    lastCustomerId = request.getParameter("lastcustomerid");
                }

                if (!StringUtil.isNullOrEmpty(request.getParameter("fCustomerId"))) {
                    if (Integer.parseInt(start) == 0) {
                        firstCustomerId = "";
                    } else {
                        firstCustomerId = request.getParameter("fCustomerId");
                    }
                }
                if (!StringUtil.isNullOrEmpty(request.getParameter("previousStart"))) {
                    previousStart = Integer.parseInt(request.getParameter("previousStart"));
                }
            }
            int count=0;
            
            double totalAmountDueInBase1 = 0.0;
            double totalAmountDueInBase2 = 0.0;
            double totalAmountDueInBase3 = 0.0;
            double totalAmountDueInBase4 = 0.0;
            double totalAmountDueInBase5 = 0.0;
            double totalAmountDueInBase6 = 0.0;
            double totalAmountDueInBase7 = 0.0;
            double totalAmountDueInBase8 = 0.0;
            double totalAmountDueInBase9 = 0.0;
            double totalAmountDueInBase10 = 0.0;
            double totalAmountDueInBase11 = 0.0;

            JSONArray allTransaction = new JSONArray();
            JSONObject sampleparam = new JSONObject();

           //null value was passed previously to this function which caused exceptions hence passing a empty JSON object (sampleparam) temporarily ERP-34831
            if (!Constants.isOptimized) {
                allTransaction = getAgeingJson(invoiceRequestParams, sampleparam);
            } else {
                allTransaction = getAgeingInvoiceJson(invoiceRequestParams,sampleparam);
            }   
                
//            KwlReturnObject result = accInvoiceDAOobj.getInvoicesMerged(invoiceRequestParams);
//            List list = result.getEntityList();
//
//            if (!list.isEmpty() || request.getParameter("filename") != null) {
//                allTransaction = getInvoiceJsonForAgedReceivables(request, list, allTransaction, invoiceRequestParams);
//            }
            if (isAdvanceSearch) {
                invoiceRequestParams.put(Constants.Filter_Criteria, request.getParameter(Constants.Filter_Criteria));
            }
             

                JSONArray OBJArryInvoice = new JSONArray();
                KwlReturnObject result = accInvoiceDAOobj.getOpeningBalanceInvoices(invoiceRequestParams);
                if (result.getRecordTotalCount() > 0) {
                    OBJArryInvoice = AccInvoiceServiceHandler.getAgedOpeningBalanceInvoiceJson(invoiceRequestParams, result.getEntityList(), OBJArryInvoice, accCurrencyDAOobj, accInvoiceCommon, request, accountingHandlerDAOobj,accAccountDAOobj,fieldDataManagercntrl,accJournalEntryobj);
                    for (int i = 0; i < OBJArryInvoice.length(); i++) {
                        allTransaction.put(OBJArryInvoice.get(i));
                    }
                }
//            allTransaction = accTemplateReportService.getCustomerAgedReceivable(request, true, false);
//KwlReturnObject result = null;
                if (!templatesubtype.equals(Constants.TEMPLATE_SUBTYPE_SOI)) {
                    if (isAdvanceSearch) {
                        invoiceRequestParams.put(Constants.Acc_Search_Json, dnSearchJson);
                        invoiceRequestParams.put(Constants.moduleid, Constants.Acc_Debit_Note_ModuleId);
                        invoiceRequestParams.put(Constants.Filter_Criteria, request.getParameter(Constants.Filter_Criteria));
                    }
                    JSONArray OBJArryDebitNote = new JSONArray();
                    result = accDebitNoteobj.getOpeningBalanceCustomerDNs(invoiceRequestParams);
                    if (result.getRecordTotalCount() > 0) {
                    OBJArryDebitNote = AccInvoiceServiceHandler.getAgedOpeningBalanceDebitNoteJson(invoiceRequestParams, result.getEntityList(), OBJArryDebitNote, accCurrencyDAOobj, accReceiptDAOobj, request, accountingHandlerDAOobj,accAccountDAOobj,fieldDataManagercntrl,accJournalEntryobj,accCreditNoteDAOobj);
                        for (int i = 0; i < OBJArryDebitNote.length(); i++) {
                            allTransaction.put(OBJArryDebitNote.get(i));
                        }
                    }
                }
                invoiceRequestParams.put("includeExcludeChildCmb", includeExcludeChildCmb);

                if (!templatesubtype.equals(Constants.TEMPLATE_SUBTYPE_SOI)) {
                    if (!templatesubtype.equals(Constants.TEMPLATE_SUBTYPE_SOI)) {
                        if (isAdvanceSearch) {
                            invoiceRequestParams.put(Constants.Acc_Search_Json, cnSearchJson);
                            invoiceRequestParams.put(Constants.moduleid, Constants.Acc_Credit_Note_ModuleId);
                            invoiceRequestParams.put(Constants.Filter_Criteria, request.getParameter(Constants.Filter_Criteria));
                        }
                    JSONArray OBJArryCreditNote = new JSONArray();
                    result = accCreditNoteDAOobj.getOpeningBalanceCNs(invoiceRequestParams);
                    if (result.getRecordTotalCount() > 0) {
                    OBJArryCreditNote = AccInvoiceServiceHandler.getAgedOpeningBalanceCreditNoteJson(invoiceRequestParams, result.getEntityList(), OBJArryCreditNote, accCurrencyDAOobj, accPaymentDAOobj, request, accountingHandlerDAOobj, accCreditNoteDAOobj,accAccountDAOobj,fieldDataManagercntrl,accJournalEntryobj);
                        for (int i = 0; i < OBJArryCreditNote.length(); i++) {
                            allTransaction.put(OBJArryCreditNote.get(i));
                        }
                    }
                }
                }
                if (!templatesubtype.equals(Constants.TEMPLATE_SUBTYPE_SOI)) {
                    if (isAdvanceSearch) {
                        invoiceRequestParams.put(Constants.Acc_Search_Json, receiptSearchJson);
                        invoiceRequestParams.put(Constants.moduleid, Constants.Acc_Receive_Payment_ModuleId);
                        invoiceRequestParams.put(Constants.Filter_Criteria, request.getParameter(Constants.Filter_Criteria));
                    }
                    JSONArray OBJArryPayment = new JSONArray();
                    result = accReceiptDAOobj.getOpeningBalanceReceipts(invoiceRequestParams);
                    if (result.getRecordTotalCount() > 0) {
                        OBJArryPayment = AccInvoiceServiceHandler.getAgedOpeningBalanceReceiptJson(invoiceRequestParams, result.getEntityList(), OBJArryPayment, accCurrencyDAOobj, accReceiptDAOobj, request, accountingHandlerDAOobj, accAccountDAOobj, fieldDataManagercntrl, accJournalEntryobj);
                        for (int i = 0; i < OBJArryPayment.length(); i++) {
                            allTransaction.put(OBJArryPayment.get(i));
                        }
                    }
                }

                if (!templatesubtype.equals(Constants.TEMPLATE_SUBTYPE_SOI)) {
                    if (isAdvanceSearch) {
                        invoiceRequestParams.put(Constants.Acc_Search_Json, cnSearchJson);
                        invoiceRequestParams.put(Constants.Filter_Criteria, request.getParameter(Constants.Filter_Criteria));
                    }
                    JSONArray CreditNotejArr = new JSONArray();
                    result = accCreditNoteDAOobj.getCreditNoteMerged(invoiceRequestParams);
                    if (result.getRecordTotalCount() > 0) {
                        CreditNotejArr = AccInvoiceServiceHandler.getCreditNotesMergedJson(invoiceRequestParams, result.getEntityList(), CreditNotejArr, accountingHandlerDAOobj, authHandlerDAOObj, accCurrencyDAOobj, accPaymentDAOobj, request, accCreditNoteDAOobj, accAccountDAOobj, fieldDataManagercntrl, accJournalEntryobj);
                        for (int i = 0; i < CreditNotejArr.length(); i++) {
                            allTransaction.put(CreditNotejArr.get(i));
                        }
                    }
                }

                if (!templatesubtype.equals(Constants.TEMPLATE_SUBTYPE_SOI)) {
                    if (isAdvanceSearch) {
                        invoiceRequestParams.put(Constants.Acc_Search_Json, dnSearchJson);
                        invoiceRequestParams.put(Constants.Filter_Criteria, request.getParameter(Constants.Filter_Criteria));
                    }
                   invoiceRequestParams.put("cntype", 4);
                    JSONArray DebitNotejArr = new JSONArray();//This is used for getting DN gainst vendor and otherwise 
                    result = accDebitNoteobj.getDebitNoteMerged(invoiceRequestParams);
                   if (result.getRecordTotalCount() > 0) {
                        DebitNotejArr = AccInvoiceServiceHandler.getDebitNotesMergedJson(invoiceRequestParams, result.getEntityList(), DebitNotejArr, accountingHandlerDAOobj, authHandlerDAOObj, accCurrencyDAOobj, accReceiptDAOobj, request, accAccountDAOobj, fieldDataManagercntrl, accJournalEntryobj, accCreditNoteDAOobj);
                        for (int i = 0; i < DebitNotejArr.length(); i++) {
                           allTransaction.put(DebitNotejArr.get(i));
                        }
                    }
                    invoiceRequestParams.remove("cntype");
                }

                if (!templatesubtype.equals(Constants.TEMPLATE_SUBTYPE_SOI)) {
                    if (isAdvanceSearch) {
                        invoiceRequestParams.put(Constants.Acc_Search_Json, receiptSearchJson);
                        invoiceRequestParams.put(Constants.Filter_Criteria, request.getParameter(Constants.Filter_Criteria));
                   }
                    JSONArray receivePaymentJArr = new JSONArray();
                    invoiceRequestParams.put("allAdvPayment", true); // needs only advance type record so that putted true
                    invoiceRequestParams.put("paymentWindowType", 1);//Receipt to Customer record
                    result = accReceiptDAOobj.getReceipts(invoiceRequestParams);
                    if (result.getRecordTotalCount() > 0) {
                        receivePaymentJArr = AccInvoiceServiceHandler.getReceiptsJson(invoiceRequestParams, result.getEntityList(), receivePaymentJArr, accountingHandlerDAOobj, authHandlerDAOObj, accCurrencyDAOobj, accReceiptDAOobj, request,accAccountDAOobj,fieldDataManagercntrl,accJournalEntryobj);
                        for (int i = 0; i < receivePaymentJArr.length(); i++) {
                            allTransaction.put(receivePaymentJArr.get(i));
                        }
                    }
                }
                if (!templatesubtype.equals(Constants.TEMPLATE_SUBTYPE_SOI)) {

                    if (isAdvanceSearch) {
                        invoiceRequestParams.put(Constants.Acc_Search_Json, makePaymentSearchJson);
                        invoiceRequestParams.put(Constants.Filter_Criteria, request.getParameter(Constants.Filter_Criteria));
                    }
                    if (!isAgedReceivables && isCurrencyDetails) { //need to put isAgedReceivables for this condition
                        invoiceRequestParams.put("isAgedReceivables", true);
                    }

                    invoiceRequestParams.put("allAdvPayment", true); // needs only advance  type record so that putted true
                    invoiceRequestParams.put("paymentWindowType", 2);//Receipt to Vendor record
                    JSONArray makePaymentJArr = new JSONArray();
                    result = accVendorPaymentobj.getPayments(invoiceRequestParams);
                    if (result != null && result.getEntityList() != null && !result.getEntityList().isEmpty()) {
                        makePaymentJArr = accGoodsReceiptServiceHandler.getPaymentsJson(invoiceRequestParams, result.getEntityList(), makePaymentJArr, accCurrencyDAOobj, accountingHandlerDAOobj, accVendorPaymentobj);
                        for (int i = 0; i < makePaymentJArr.length(); i++) {
                            allTransaction.put(makePaymentJArr.get(i));
                        }
                    }
                    invoiceRequestParams.remove("allAdvPayment");
                    invoiceRequestParams.remove("paymentWindowType");
                    if (!isAgedReceivables && isCurrencyDetails) { //need to remove isAgedReceivables for this condition as we have putted above
                        invoiceRequestParams.remove("isAgedReceivables");
                    }
                }

                boolean addFlag=true;
                if(allTransaction.length()<1){ 
                    addFlag=false;
                }
                if(addFlag){
                    
                String personInfo="";    
                    String personID = null;
                    String personName = null;
                    String personCode = null;
                    String aliasname = "";
                    String customercreditterm = "";
                    String amountdueInBase = null;
                    String currencySymbol = null;
                    String currencyid = null;
                    String currencyName = null;
                    double customerCurrencyExchangeRate = 1;
                    boolean isCN = false;
                    boolean isRP = false;
                    String currencyidCust = null;
                    String currencySymbolCust = null;
                    String currencyNameCust = null;
                    String dir="";
                    String sort="";
                    Map<String, JSONArray> jArrMap;
                    if (!StringUtil.isNullOrEmpty(request.getParameter("dir")) && !StringUtil.isNullOrEmpty(request.getParameter("sort"))) {
                        dir = request.getParameter("dir");
                        sort = request.getParameter("sort");
                    } 
                    if (sort.equals("code") && !(sort.equals(""))) {
                        jArrMap = AccountingManager.getSortedArrayMapBasedOnJSONAttribute(allTransaction, InvoiceConstants.code, dir);
                    } else {
                        jArrMap = AccountingManager.getSortedArrayMapBasedOnJSONAttribute(allTransaction, InvoiceConstants.personinfo, dir);
                    }
                    for (String key : jArrMap.keySet()) {
                        Customer customer=null;
                        JSONArray invjarr = jArrMap.get(key);
                        if (invjarr != null && invjarr.length() > 0) {
                            amountdue1 = amountdue2 = amountdue3 = amountdue4 = amountdue5 = amountdue6 = amountdue7 = amountdue8 = amountdue9 = amountdue10 = amountdue11 = 0;
                            amountdueinbase1 = amountdueinbase2 = amountdueinbase3 = amountdueinbase4 = amountdueinbase5 = amountdueinbase6 = amountdueinbase7 = amountdueinbase8 = amountdueinbase9 = amountdueinbase10 = amountdueinbase11 = 0;
                            personID = invjarr.getJSONObject(0).getString(GoodsReceiptCMNConstants.PERSONID);
                            personInfo=invjarr.getJSONObject(0).getString(GoodsReceiptCMNConstants.PERSONINFO);
                            String code = invjarr.getJSONObject(0).optString(GoodsReceiptCMNConstants.CODE,"");
                            if (customer == null) {
                                KwlReturnObject kwlObj = kwlCommonTablesDAOObj.getObject(Customer.class.getName(), personID);
                                customer = (Customer) kwlObj.getEntityList().get(0);
                                currencyidCust = customer.getAccount().getCurrency().getCurrencyID();
                                currencySymbolCust = customer.getAccount().getCurrency().getSymbol();
                                currencyNameCust = customer.getAccount().getCurrency().getName();
                            }
                            String custid = customer.getID();
                            String gCurrencyID = (String) invoiceRequestParams.get(Constants.globalCurrencyKey);
                            String customerCurrencyID = customer.getCurrency().getCurrencyID();
                            String customerSalesPersonName[] = accCustomerDAOobj.getMultiSalesPerson(customer.getID());
                            if (gCurrencyID.equals(customerCurrencyID)) {
                                customerCurrencyExchangeRate = 1;
                            } else {
                                HashMap<String, Object> currencyParams = new HashMap<>();
                                currencyParams.put("fromcurrencyid", gCurrencyID);
                                currencyParams.put("tocurrencyid", customerCurrencyID);
                                currencyParams.put(Constants.companyid, companyid);
                                currencyParams.put("transactiondate", new Date());
                                KwlReturnObject exchResult = accCurrencyDAOobj.getCurrencyExchange(currencyParams);
                                ExchangeRate er = (ExchangeRate) exchResult.getEntityList().get(0);
                                KwlReturnObject erdresult = accCurrencyDAOobj.getExcDetailID(currencyParams, customerCurrencyID, customer.getCreatedOn(), er.getID());
                                if (erdresult.getEntityList() != null && !erdresult.getEntityList().isEmpty() && erdresult.getEntityList().size() > 1) {
                                    ExchangeRateDetails erd = (ExchangeRateDetails) erdresult.getEntityList().get(0);
                                    if (erd != null) {
                                        customerCurrencyExchangeRate = erd.getExchangeRate();
                                    }
                                }
                            }
                            if (!isCurrencyDetails) {
                                for (int i = 0; i < invjarr.length(); i++) {
                                    JSONObject invobj = invjarr.getJSONObject(i);
                                    personID = (invobj.has(InvoiceConstants.personid)) ? invobj.getString(InvoiceConstants.personid) : "";
                                    personName = (invobj.has(InvoiceConstants.personname)) ? invobj.getString(InvoiceConstants.personname) : "";
                                    personCode =invobj.optString(InvoiceConstants.code,"");                                  
                                    aliasname = (invobj.has(InvoiceConstants.aliasname)) ? invobj.getString(InvoiceConstants.aliasname) : "";
                                    customercreditterm = invobj.optString(InvoiceConstants.CustomerCreditTerm, "");
                                    amountdueInBase = invobj.getString(InvoiceConstants.amountdueinbase);
                                    currencySymbol = (invobj.has(InvoiceConstants.currencysymbol)) ? invobj.getString(InvoiceConstants.currencysymbol) : "";
                                    currencyid = (invobj.has(Constants.currencyKey)) ? invobj.getString(Constants.currencyKey) : "";
                                    currencyName = (invobj.has(InvoiceConstants.currencyname)) ? invobj.getString(InvoiceConstants.currencyname) : "";
                                    isCN = invobj.has("isCN") ? invobj.getBoolean("isCN") : false;
                                    isRP = invobj.has("isRP") ? invobj.getBoolean("isRP") : false;
                                    Date dueDate = new Date();
                                    if (datefilter == 0 || datefilter == Constants.agedDueDate0to30Filter) {
                                        dueDate = authHandler.getDateOnlyFormat().parse(invobj.getString(Constants.duedate));
                                    } else {
                                        dueDate = authHandler.getDateOnlyFormat().parse(invobj.getString("date"));
                                    }
                                    double amountdue = invobj.getDouble("amountdue");
                                    double amountdueinbase = invobj.getDouble(InvoiceConstants.amountdueinbase);

                                    boolean isopeningBalanceTransaction = invobj.optBoolean("isOpeningBalanceTransaction", false);
                                    boolean isConversionRateFromCurrencyToBase = invobj.optBoolean("isConversionRateFromCurrencyToBase", false);

                                    KwlReturnObject bAmt = null;
                                    Date date = null;
                                    if (!invobj.getString("date").equals("")) {
                                        date = df.parse(invobj.getString("date"));
                                    }
                                    if (!baseCurrencyId.equals(currencyidCust)) {
                                        if (isopeningBalanceTransaction && isConversionRateFromCurrencyToBase) {// if Transaction is opening balance Transaction and Conversion rate is taken from user is Currency to base then following method will be called.
                                            bAmt = accCurrencyDAOobj.getOneCurrencyToOtherModifiedAccordingToCurrencyToBaseExchangeRate(invoiceRequestParams, amountdue, currencyid, currencyidCust, date, invobj.getDouble("externalcurrencyrate"));
                                        } else {
                                            bAmt = accCurrencyDAOobj.getOneCurrencyToOtherModified(invoiceRequestParams, amountdue, currencyid, currencyidCust, date, invobj.getDouble("externalcurrencyrate"));
                                        }
                                        amountdue = authHandler.round((Double) bAmt.getEntityList().get(0), companyid);
                                    } else {
                                        amountdue = amountdueinbase;
                                    }
                                    if (isCN || isRP) {
                                        if (!isopeningBalanceTransaction) {
                                            amountdueinbase = -amountdueinbase;
                                            amountdue = -amountdue;
                                        }
                                    }

                                    if (customizedSumryReportFlag) {
                                        if ((dueDate.after(customizeSumryTo1Date) || dueDate.equals(customizeSumryTo1Date)) && (dueDate.before(customizeSumryFrom1Date) || dueDate.equals(customizeSumryFrom1Date))) {
                                            amountdue1 += amountdue;
                                            amountdueinbase1 += amountdueinbase;
                                        } else if ((dueDate.after(customizeSumryTo2Date) || dueDate.equals(customizeSumryTo2Date)) && (dueDate.before(customizeSumryFrom2Date) || dueDate.equals(customizeSumryFrom2Date))) {
                                            amountdue2 += amountdue;
                                            amountdueinbase2 += amountdueinbase;
                                        } else if ((dueDate.after(customizeSumryTo3Date) || dueDate.equals(customizeSumryTo3Date)) && (dueDate.before(customizeSumryFrom3Date) || dueDate.equals(customizeSumryFrom3Date))) {
                                            amountdue3 += amountdue;
                                            amountdueinbase3 += amountdueinbase;
                                        } else if ((dueDate.after(customizeSumryTo4Date) || dueDate.equals(customizeSumryTo4Date)) && (dueDate.before(customizeSumryFrom4Date) || dueDate.equals(customizeSumryFrom4Date))) {
                                            amountdue4 += amountdue;
                                            amountdueinbase4 += amountdueinbase;
                                        } else if ((dueDate.after(customizeSumryTo5Date) || dueDate.equals(customizeSumryTo5Date)) && (dueDate.before(customizeSumryFrom5Date) || dueDate.equals(customizeSumryFrom5Date))) {
                                            amountdue5 += amountdue;
                                            amountdueinbase5 += amountdueinbase;
                                        } else if ((dueDate.after(customizeSumryTo6Date) || dueDate.equals(customizeSumryTo6Date)) && (dueDate.before(customizeSumryFrom6Date) || dueDate.equals(customizeSumryFrom6Date))) {
                                            amountdue6 += amountdue;
                                            amountdueinbase6 += amountdueinbase;
                                        } else if ((dueDate.after(customizeSumryTo7Date) || dueDate.equals(customizeSumryTo7Date)) && (dueDate.before(customizeSumryFrom7Date) || dueDate.equals(customizeSumryFrom7Date))) {
                                            amountdue7 += amountdue;
                                            amountdueinbase7 += amountdueinbase;
                                        }

                                    } else {
                                        if (isdistibutive) {
//                                            if (startDate != null && dueDate.before(startDate)) {
//                                                accruedbalanceinbase += amountdueinbase;
//                                                accruedbalance += amountdue;
//                                            } else
                                            if (dueDate.after(oneDayBeforeCal1Date)) {
                                                if (dueDate.equals(cal1Date) && (datefilter == Constants.agedDueDate0to30Filter || datefilter == Constants.agedInvoiceDate0to30Filter)){
                                                    amountdueinbase2 += amountdueinbase;
                                                    amountdue2 += amountdue;
                                                } else {
                                                    amountdueinbase1 += amountdueinbase;
                                                    amountdue1 += amountdue;
                                                }
                                            } else if ((cal2Date.before(dueDate) || cal2Date.equals(dueDate)) && cal1Date.after(dueDate)) {
                                                amountdueinbase2 += amountdueinbase;
                                                amountdue2 += amountdue;
                                            } else if ((cal3Date.before(dueDate) || cal3Date.equals(dueDate)) && cal2Date.after(dueDate)) {
                                                amountdueinbase3 += amountdueinbase;
                                                amountdue3 += amountdue;
                                            } else if ((cal4Date.before(dueDate) || cal4Date.equals(dueDate)) && cal3Date.after(dueDate)) {
                                                amountdueinbase4 += amountdueinbase;
                                                amountdue4 += amountdue;
                                            } else if ((cal5Date.before(dueDate) || cal5Date.equals(dueDate)) && cal4Date.after(dueDate)) {
                                                amountdueinbase5 += amountdueinbase;
                                                amountdue5 += amountdue;
                                            } else if ((cal6Date.before(dueDate) || cal6Date.equals(dueDate)) && cal5Date.after(dueDate)) {
                                                amountdueinbase6 += amountdueinbase;
                                                amountdue6 += amountdue;
                                            } else if ((cal7Date.before(dueDate) || cal7Date.equals(dueDate)) && cal6Date.after(dueDate)) {
                                                amountdueinbase7 += amountdueinbase;
                                                amountdue7 += amountdue;
                                            } else if ((cal8Date.before(dueDate) || cal8Date.equals(dueDate)) && cal7Date.after(dueDate)) {
                                                amountdueinbase8 += amountdueinbase;
                                                amountdue8 += amountdue;
                                            } else if ((cal9Date.before(dueDate) || cal9Date.equals(dueDate)) && cal8Date.after(dueDate)) {
                                                amountdueinbase9 += amountdueinbase;
                                                amountdue9 += amountdue;
                                            } else if ((cal10Date.before(dueDate) || cal10Date.equals(dueDate)) && cal9Date.after(dueDate)) {
                                                amountdueinbase10 += amountdueinbase;
                                                amountdue10 += amountdue;
                                            } else {
                                                amountdueinbase11 += amountdueinbase;
                                                amountdue11 += amountdue;
                                            }
                                        
                                            
                                            switch(noOfInterval){
                                                case 2:
                                                    amountdue3 += amountdue4 + amountdue5 + amountdue6 + amountdue7 + amountdue8 + amountdue9 + amountdue10 + amountdue11;
                                                    amountdue4 = amountdue5 = amountdue6 = amountdue7 = amountdue8 = amountdue9 = amountdue10 = amountdue11 = 0;
                                                    amountdueinbase3 += amountdueinbase4 + amountdueinbase5 + amountdueinbase6 + amountdueinbase7 + amountdueinbase8 + amountdueinbase9 + amountdueinbase10 + amountdueinbase11;
                                                    amountdueinbase4 = amountdueinbase5 = amountdueinbase6 = amountdueinbase7 = amountdueinbase8 = amountdueinbase9 = amountdueinbase10 = amountdueinbase11 = 0;
                                                    break;
                                                case 3:
                                                    amountdue4 += amountdue5 + amountdue6 + amountdue7 + amountdue8 + amountdue9 + amountdue10 + amountdue11;
                                                    amountdue5 = amountdue6 = amountdue7 = amountdue8 = amountdue9 = amountdue10 = amountdue11 = 0;
                                                    amountdueinbase4 += amountdueinbase5 + amountdueinbase6 + amountdueinbase7 + amountdueinbase8 + amountdueinbase9 + amountdueinbase10 + amountdueinbase11;
                                                    amountdueinbase5 = amountdueinbase6 = amountdueinbase7 = amountdueinbase8 = amountdueinbase9 = amountdueinbase10 = amountdueinbase11 = 0;
                                                    break;
                                                case 4:
                                                    amountdue5 += amountdue6 + amountdue7 + amountdue8 + amountdue9 + amountdue10 + amountdue11;
                                                    amountdue6 = amountdue7 = amountdue8 = amountdue9 = amountdue10 = amountdue11 = 0;
                                                    amountdueinbase5 += amountdueinbase6 + amountdueinbase7 + amountdueinbase8 + amountdueinbase9 + amountdueinbase10 + amountdueinbase11;
                                                    amountdueinbase6 = amountdueinbase7 = amountdueinbase8 = amountdueinbase9 = amountdueinbase10 = amountdueinbase11 = 0;
                                                    break;
                                                case 5:
                                                    amountdue6 += amountdue7 + amountdue8 + amountdue9 + amountdue10 + amountdue11;
                                                    amountdue7 = amountdue8 = amountdue9 = amountdue10 = amountdue11 = 0;
                                                    amountdueinbase6 += amountdueinbase7 + amountdueinbase8 + amountdueinbase9 + amountdueinbase10 + amountdueinbase11;
                                                    amountdueinbase7 = amountdueinbase8 = amountdueinbase9 = amountdueinbase10 = amountdueinbase11 = 0;
                                                    break;
                                                case 6:
                                                    amountdue7 += amountdue8 + amountdue9 + amountdue10 + amountdue11;
                                                    amountdue8 = amountdue9 = amountdue10 = amountdue11 = 0;
                                                    amountdueinbase7 += amountdueinbase8 + amountdueinbase9 + amountdueinbase10 + amountdueinbase11;
                                                    amountdueinbase8 = amountdueinbase9 = amountdueinbase10 = amountdueinbase11 = 0;
                                                    break;
                                                case 7:
                                                    amountdue8 += amountdue9 + amountdue10 + amountdue11;
                                                    amountdue9 = amountdue10 = amountdue11 = 0;
                                                    amountdueinbase8 += amountdueinbase9 + amountdueinbase10 + amountdueinbase11;
                                                    amountdueinbase9 = amountdueinbase10 = amountdueinbase11 = 0;
                                                    break;
                                                case 8:
                                                    amountdue9 += amountdue10 + amountdue11;
                                                    amountdue10 = amountdue11 = 0;
                                                    amountdueinbase9 += amountdueinbase10 + amountdueinbase11;
                                                    amountdueinbase10 = amountdueinbase11 = 0;
                                                    break;
                                                case 9:
                                                    amountdue10 += amountdue11;
                                                    amountdue11 = 0;
                                                    amountdueinbase10 += amountdueinbase11;
                                                    amountdueinbase11 = 0;
                                                    break;
                                            }
                                            
                                        } else {
//                                            if (startDate != null && dueDate.before(startDate)) {
//                                                accruedbalanceinbase += amountdueinbase;
//                                                accruedbalance += amountdue;
//                                            } else
                                            if (dueDate.after(oneDayBeforeCal1Date) && (dueDate.before(cal1Date) || dueDate.equals(cal1Date))) {
                                                amountdueinbase1 += amountdueinbase;
                                                amountdue1 += amountdue;
                                            } else if (dueDate.after(cal2Date) || dueDate.equals(cal2Date)) {
                                                amountdueinbase2 += amountdueinbase;
                                                amountdue2 += amountdue;
                                            } else if (dueDate.after(cal3Date) || dueDate.equals(cal3Date)) {
                                                amountdueinbase3 += amountdueinbase;
                                                amountdue3 += amountdue;
                                            } else {
                                                amountdueinbase4 += amountdueinbase;
                                                amountdue4 += amountdue;
                                            }
                                        }
                                    }
                                }
                                if (invjarr.length() > 0) {
                                    jObj = new JSONObject();
                                    jObj.put(InvoiceConstants.personid, personID);
                                    jObj.put(InvoiceConstants.amountdueinbase, amountdueInBase);
                                    jObj.put(InvoiceConstants.personname, personName);
                                    jObj.put(InvoiceConstants.code, personCode);
                                    jObj.put(InvoiceConstants.aliasname, aliasname);
                                    jObj.put(InvoiceConstants.CustomerCreditTerm, customercreditterm);
                                    jObj.put(InvoiceConstants.ExchangeRate, customerCurrencyExchangeRate);
                                    jObj.put(InvoiceConstants.personinfo, personInfo);
                                    if (!customizedSumryReportFlag) {
                                        jObj.put("amountdue1", Double.valueOf(authHandler.formattedAmount(amountdue1, companyid)));
                                        jObj.put("amountdue2", Double.valueOf(authHandler.formattedAmount(amountdue2, companyid)));
                                        jObj.put("amountdue3", Double.valueOf(authHandler.formattedAmount(amountdue3, companyid)));
                                        jObj.put("amountdue4", Double.valueOf(authHandler.formattedAmount(amountdue4, companyid)));
                                        jObj.put("amountdue5", Double.valueOf(authHandler.formattedAmount(amountdue5, companyid)));
                                        jObj.put("amountdue6", Double.valueOf(authHandler.formattedAmount(amountdue6, companyid)));
                                        jObj.put("amountdue7", Double.valueOf(authHandler.formattedAmount(amountdue7, companyid)));
                                        jObj.put("amountdue8", Double.valueOf(authHandler.formattedAmount(amountdue8, companyid)));
                                        jObj.put("amountdue9", Double.valueOf(authHandler.formattedAmount(amountdue9, companyid)));
                                        jObj.put("amountdue10", Double.valueOf(authHandler.formattedAmount(amountdue10, companyid)));
                                        jObj.put("amountdue11", Double.valueOf(authHandler.formattedAmount(amountdue11, companyid)));

                                  
                                    } else {
                                        if (amountDueMap.containsKey("amountdue1")) {
                                            jObj.put(amountDueMap.get("amountdue1"), Double.valueOf(authHandler.formattedAmount(amountdue1, companyid)));
                                        }
                                        if (amountDueMap.containsKey("amountdue2")) {
                                            jObj.put(amountDueMap.get("amountdue2"), Double.valueOf(authHandler.formattedAmount(amountdue2, companyid)));
                                        }
                                        if (amountDueMap.containsKey("amountdue3")) {
                                            jObj.put(amountDueMap.get("amountdue3"), Double.valueOf(authHandler.formattedAmount(amountdue3, companyid)));
                                        }
                                        if (amountDueMap.containsKey("amountdue4")) {
                                            jObj.put(amountDueMap.get("amountdue4"), Double.valueOf(authHandler.formattedAmount(amountdue4, companyid)));
                                        }
                                        if (amountDueMap.containsKey("amountdue5")) {
                                            jObj.put(amountDueMap.get("amountdue5"), Double.valueOf(authHandler.formattedAmount(amountdue5, companyid)));
                                        }
                                        if (amountDueMap.containsKey("amountdue6")) {
                                            jObj.put(amountDueMap.get("amountdue6"), Double.valueOf(authHandler.formattedAmount(amountdue6, companyid)));
                                        }
                                        if (amountDueMap.containsKey("amountdue7")) {
                                            jObj.put(amountDueMap.get("amountdue7"), Double.valueOf(authHandler.formattedAmount(amountdue7, companyid)));
                                        }
                                        if (amountDueMap.containsKey("amountdue8")) {
                                            jObj.put(amountDueMap.get("amountdue8"), Double.valueOf(authHandler.formattedAmount(amountdue8, companyid)));
                                        }
                                    }
                                    jObj.put("amountdueinbase1", Double.valueOf(authHandler.formattedAmount(amountdueinbase1, companyid)));
                                    jObj.put("amountdueinbase2", Double.valueOf(authHandler.formattedAmount(amountdueinbase2, companyid)));
                                    jObj.put("amountdueinbase3", Double.valueOf(authHandler.formattedAmount(amountdueinbase3, companyid)));
                                    jObj.put("amountdueinbase4", Double.valueOf(authHandler.formattedAmount(amountdueinbase4, companyid)));
                                    jObj.put("amountdueinbase5", Double.valueOf(authHandler.formattedAmount(amountdueinbase5, companyid)));
                                    jObj.put("amountdueinbase6", Double.valueOf(authHandler.formattedAmount(amountdueinbase6, companyid)));
                                    jObj.put("amountdueinbase7", Double.valueOf(authHandler.formattedAmount(amountdueinbase7, companyid)));
                                    jObj.put("amountdueinbase8", Double.valueOf(authHandler.formattedAmount(amountdueinbase8, companyid)));
                                    jObj.put("amountdueinbase9", Double.valueOf(authHandler.formattedAmount(amountdueinbase9, companyid)));
                                    jObj.put("amountdueinbase10", Double.valueOf(authHandler.formattedAmount(amountdueinbase10, companyid)));
                                    jObj.put("amountdueinbase11", Double.valueOf(authHandler.formattedAmount(amountdueinbase11, companyid)));
//                                    jObj.put("accruedbalanceinbase", Double.valueOf(authHandler.formattedAmount(accruedbalanceinbase, companyid)));
                                    jObj.put(InvoiceConstants.currencysymbol, currencySymbolCust);
                                    jObj.put(Constants.currencyKey, currencyidCust);
                                    jObj.put(InvoiceConstants.currencyname, currencyNameCust);
                                    jObj.put("salespersonname", customerSalesPersonName[1]);
                                   
                                    double amountdue = 0.0;
                                    double amountdueinbase = 0.0;
                                    
                                    // For Calculating Total and Total In Base.
                                    amountdue = Double.valueOf(authHandler.formattedAmount((amountdue1 + amountdue2 + amountdue3 + amountdue4 + amountdue5 + amountdue6 + amountdue7 + amountdue8 + amountdue9 + amountdue10 + amountdue11), companyid));
                                    amountdueinbase = Double.valueOf(authHandler.formattedAmount((amountdueinbase1 + amountdueinbase2 + amountdueinbase3 + amountdueinbase4 + amountdueinbase5 + amountdueinbase6 + amountdueinbase7 + amountdueinbase8 + amountdueinbase9 + amountdueinbase10 + amountdueinbase11), companyid));

                                    
                                    jObj.put("total", amountdue);
                                    jObj.put("totalinbase", amountdueinbase);
                                    totalinbase += amountdueinbase;
//                        totalamt+=amountdueinbase; //please uncomment the code order to calculate the amoundue for single customer
                                    if (StringUtil.equalIgnoreCase(chartType, Constants.BAR_CHART) && isAged) {
                                        totalAmountDueInBase1 += amountdueinbase1;
                                        totalAmountDueInBase2 += amountdueinbase2;
                                        totalAmountDueInBase3 += amountdueinbase3;
                                        totalAmountDueInBase4 += amountdueinbase4;
                                        totalAmountDueInBase5 += amountdueinbase5;
                                        totalAmountDueInBase6 += amountdueinbase6;
                                        totalAmountDueInBase7 += amountdueinbase7;
                                        totalAmountDueInBase8 += amountdueinbase8;
                                        totalAmountDueInBase9 += amountdueinbase9;
                                        totalAmountDueInBase10 += amountdueinbase10;
                                        totalAmountDueInBase11 += amountdueinbase11;
                                    }
                                    if (!checkForEx && !StringUtil.isNullOrEmpty(start)) {
                                        if ((previousStart > Integer.parseInt(start))) {
                                            if (skipRecords < Integer.parseInt(start)) {
                                                skipRecords++;
                                                continue;
                                            }
                                            if (firstCustomerId.equals(custid)) {
                                                break;
                                            }
                                        } else if ((previousStart < (Integer.parseInt(start)) + 1)) {
                                            if (skipRecords < (Integer.parseInt(start)) + 1) {
                                                skipRecords++;
                                                continue;
                                            }
                                        }
                                        if (customizedSumryReportFlag && !showCustVendorWithZeroAmounts && amountdue == 0) {
                                            continue;
                                        }
                                        count++;
                                        if (count != limit) {
                                            jArr.put(jObj);
                                        }
                                        if (count == 1) {
                                            firstCustomerId = custid.toString();
                                            jObj.put("fCustomerId", firstCustomerId);
                                        }
                                        if (count == limit) {
                                            lastCustomerId = custid.toString();
                                            jObj.put("customerId", lastCustomerId);
                                            jObj.put(Constants.start, start);
                                            jArr.put(jObj);
                                            break;
                                        }
                                    } else {
                                        if (customizedSumryReportFlag && !showCustVendorWithZeroAmounts && amountdue == 0) {
                                            continue;
                                        } else if (StringUtil.equalIgnoreCase(chartType, Constants.BAR_CHART) && isAged) {
                                            continue;
                                        }
                                        jArr.put(jObj);
                                    }
                                }
                            }
                            if (isCurrencyDetails || isdetailedXls || isDetailedPDF) {
                                JSONObject currencyObj = new JSONObject();
                                for (int i = 0; i < invjarr.length(); i++) {

                                    amountdue1 = amountdue2 = amountdue3 = amountdue4 = amountdue5 = amountdue6 = amountdue7 = amountdue8 = amountdue9 = amountdue10 = amountdue11 = 0;
                                    amountdueinbase1 = amountdueinbase2 = amountdueinbase3 = amountdueinbase4 = amountdueinbase5 = amountdueinbase6 = amountdueinbase7 = amountdueinbase8 = amountdueinbase9 = amountdueinbase10 = amountdueinbase11 = 0;
                                    
                                    JSONObject invobj = invjarr.getJSONObject(i);
                                    JSONObject putObj = new JSONObject();
                                    if (i == 0) {
                                        personID = (invobj.has(InvoiceConstants.personid)) ? invobj.getString(InvoiceConstants.personid) : "";
                                        personName = (invobj.has(InvoiceConstants.personname)) ? invobj.getString(InvoiceConstants.personname) : "";
                                        aliasname = (invobj.has(InvoiceConstants.aliasname)) ? invobj.getString(InvoiceConstants.aliasname) : "";
                                        amountdueInBase = invobj.getString(InvoiceConstants.amountdueinbase);
                                        currencySymbol = (invobj.has(InvoiceConstants.currencysymbol)) ? invobj.getString(InvoiceConstants.currencysymbol) : "";
                                        currencyid = (invobj.has(Constants.currencyKey)) ? invobj.getString(Constants.currencyKey) : "";
                                        currencyName = (invobj.has(InvoiceConstants.currencyname)) ? invobj.getString(InvoiceConstants.currencyname) : "";
                                        isCN = invobj.has("isCN") ? invobj.getBoolean("isCN") : false;
                                        isRP = invobj.has("isRP") ? invobj.getBoolean("isRP") : false;
                                        Date dueDate = new Date();
                                        if (datefilter == 0 || datefilter == Constants.agedDueDate0to30Filter) {
                                            dueDate = authHandler.getDateOnlyFormat().parse(invobj.getString(Constants.duedate));
                                        } else {
                                            dueDate = authHandler.getDateOnlyFormat().parse(invobj.getString("date"));
                                        }
                                        double amountdue = invobj.getDouble("amountdue");
                                        double amountdueinbase = invobj.getDouble(InvoiceConstants.amountdueinbase);
                                        boolean isopeningBalanceTransaction = invobj.optBoolean("isOpeningBalanceTransaction", false);
                                        if (isCN || isRP) {
                                            if (!isopeningBalanceTransaction) {
                                                amountdueinbase = -amountdueinbase;
                                                amountdue = -amountdue;
                                            }
                                        }

                                        if (customizedSumryReportFlag) {
                                            if ((dueDate.after(customizeSumryTo1Date) || dueDate.equals(customizeSumryTo1Date)) && (dueDate.before(customizeSumryFrom1Date) || dueDate.equals(customizeSumryFrom1Date))) {
                                                amountdue1 += amountdue;
                                                amountdueinbase1 += amountdueinbase;
                                            } else if ((dueDate.after(customizeSumryTo2Date) || dueDate.equals(customizeSumryTo2Date)) && (dueDate.before(customizeSumryFrom2Date) || dueDate.equals(customizeSumryFrom2Date))) {
                                                amountdue2 += amountdue;
                                                amountdueinbase2 += amountdueinbase;
                                            } else if ((dueDate.after(customizeSumryTo3Date) || dueDate.equals(customizeSumryTo3Date)) && (dueDate.before(customizeSumryFrom3Date) || dueDate.equals(customizeSumryFrom3Date))) {
                                                amountdue3 += amountdue;
                                                amountdueinbase3 += amountdueinbase;
                                            } else if ((dueDate.after(customizeSumryTo4Date) || dueDate.equals(customizeSumryTo4Date)) && (dueDate.before(customizeSumryFrom4Date) || dueDate.equals(customizeSumryFrom4Date))) {
                                                amountdue4 += amountdue;
                                                amountdueinbase4 += amountdueinbase;
                                            } else if ((dueDate.after(customizeSumryTo5Date) || dueDate.equals(customizeSumryTo5Date)) && (dueDate.before(customizeSumryFrom5Date) || dueDate.equals(customizeSumryFrom5Date))) {
                                                amountdue5 += amountdue;
                                                amountdueinbase5 += amountdueinbase;
                                            } else if ((dueDate.after(customizeSumryTo6Date) || dueDate.equals(customizeSumryTo6Date)) && (dueDate.before(customizeSumryFrom6Date) || dueDate.equals(customizeSumryFrom6Date))) {
                                                amountdue6 += amountdue;
                                                amountdueinbase6 += amountdueinbase;
                                            } else if ((dueDate.after(customizeSumryTo7Date) || dueDate.equals(customizeSumryTo7Date)) && (dueDate.before(customizeSumryFrom7Date) || dueDate.equals(customizeSumryFrom7Date))) {
                                                amountdue7 += amountdue;
                                                amountdueinbase7 += amountdueinbase;
                                            }

                                        } else {

                                            if (isdistibutive) {
                                                if (dueDate.after(oneDayBeforeCal1Date)) {
                                                    if (dueDate.equals(cal1Date) && (datefilter == Constants.agedDueDate0to30Filter || datefilter == Constants.agedInvoiceDate0to30Filter)) {
                                                        amountdueinbase2 += amountdueinbase;
                                                        amountdue2 += amountdue;
                                                    } else {
                                                        amountdueinbase1 += amountdueinbase;
                                                        amountdue1 += amountdue;
                                                    }
                                                } else if ((cal2Date.before(dueDate) || cal2Date.equals(dueDate)) && cal1Date.after(dueDate)) {
                                                    amountdueinbase2 += amountdueinbase;
                                                    amountdue2 += amountdue;
                                                } else if ((cal3Date.before(dueDate) || cal3Date.equals(dueDate)) && cal2Date.after(dueDate)) {
                                                    amountdueinbase3 += amountdueinbase;
                                                    amountdue3 += amountdue;
                                                } else if ((cal4Date.before(dueDate) || cal4Date.equals(dueDate)) && cal3Date.after(dueDate)) {
                                                    amountdueinbase4 += amountdueinbase;
                                                    amountdue4 += amountdue;
                                                } else if ((cal5Date.before(dueDate) || cal5Date.equals(dueDate)) && cal4Date.after(dueDate)) {
                                                    amountdueinbase5 += amountdueinbase;
                                                    amountdue5 += amountdue;
                                                } else if ((cal6Date.before(dueDate) || cal6Date.equals(dueDate)) && cal5Date.after(dueDate)) {
                                                    amountdueinbase6 += amountdueinbase;
                                                    amountdue6 += amountdue;
                                                } else if ((cal7Date.before(dueDate) || cal7Date.equals(dueDate)) && cal6Date.after(dueDate)) {
                                                    amountdueinbase7 += amountdueinbase;
                                                    amountdue7 += amountdue;
                                                } else if ((cal8Date.before(dueDate) || cal8Date.equals(dueDate)) && cal7Date.after(dueDate)) {
                                                    amountdueinbase8 += amountdueinbase;
                                                    amountdue8 += amountdue;
                                                } else if ((cal9Date.before(dueDate) || cal9Date.equals(dueDate)) && cal8Date.after(dueDate)) {
                                                    amountdueinbase9 += amountdueinbase;
                                                    amountdue9 += amountdue;
                                                } else if ((cal10Date.before(dueDate) || cal10Date.equals(dueDate)) && cal9Date.after(dueDate)) {
                                                    amountdueinbase10 += amountdueinbase;
                                                    amountdue10 += amountdue;
                                                } else {
                                                    amountdueinbase11 += amountdueinbase;
                                                    amountdue11 += amountdue;
                                                }

                                                switch(noOfInterval){
                                                    case 2:
                                                        amountdue3 += amountdue4 + amountdue5 + amountdue6 + amountdue7 + amountdue8 + amountdue9 + amountdue10 + amountdue11;
                                                        amountdue4 = amountdue5 = amountdue6 = amountdue7 = amountdue8 = amountdue9 = amountdue10 = amountdue11 = 0;
                                                        amountdueinbase3 += amountdueinbase4 + amountdueinbase5 + amountdueinbase6 + amountdueinbase7 + amountdueinbase8 + amountdueinbase9 + amountdueinbase10 + amountdueinbase11;
                                                        amountdueinbase4 = amountdueinbase5 = amountdueinbase6 = amountdueinbase7 = amountdueinbase8 = amountdueinbase9 = amountdueinbase10 = amountdueinbase11 = 0;
                                                        break;
                                                    case 3:
                                                        amountdue4 += amountdue5 + amountdue6 + amountdue7 + amountdue8 + amountdue9 + amountdue10 + amountdue11;
                                                        amountdue5 = amountdue6 = amountdue7 = amountdue8 = amountdue9 = amountdue10 = amountdue11 = 0;
                                                        amountdueinbase4 += amountdueinbase5 + amountdueinbase6 + amountdueinbase7 + amountdueinbase8 + amountdueinbase9 + amountdueinbase10 + amountdueinbase11;
                                                        amountdueinbase5 = amountdueinbase6 = amountdueinbase7 = amountdueinbase8 = amountdueinbase9 = amountdueinbase10 = amountdueinbase11 = 0;
                                                        break;
                                                    case 4:
                                                        amountdue5 += amountdue6 + amountdue7 + amountdue8 + amountdue9 + amountdue10 + amountdue11;
                                                        amountdue6 = amountdue7 = amountdue8 = amountdue9 = amountdue10 = amountdue11 = 0;
                                                        amountdueinbase5 += amountdueinbase6 + amountdueinbase7 + amountdueinbase8 + amountdueinbase9 + amountdueinbase10 + amountdueinbase11;
                                                        amountdueinbase6 = amountdueinbase7 = amountdueinbase8 = amountdueinbase9 = amountdueinbase10 = amountdueinbase11 = 0;
                                                        break;
                                                    case 5:
                                                        amountdue6 += amountdue7 + amountdue8 + amountdue9 + amountdue10 + amountdue11;
                                                        amountdue7 = amountdue8 = amountdue9 = amountdue10 = amountdue11 = 0;
                                                        amountdueinbase6 += amountdueinbase7 + amountdueinbase8 + amountdueinbase9 + amountdueinbase10 + amountdueinbase11;
                                                        amountdueinbase7 = amountdueinbase8 = amountdueinbase9 = amountdueinbase10 = amountdueinbase11 = 0;
                                                        break;
                                                    case 6:
                                                        amountdue7 += amountdue8 + amountdue9 + amountdue10 + amountdue11;
                                                        amountdue8 = amountdue9 = amountdue10 = amountdue11 = 0;
                                                        amountdueinbase7 += amountdueinbase8 + amountdueinbase9 + amountdueinbase10 + amountdueinbase11;
                                                        amountdueinbase8 = amountdueinbase9 = amountdueinbase10 = amountdueinbase11 = 0;
                                                        break;
                                                    case 7:
                                                        amountdue8 += amountdue9 + amountdue10 + amountdue11;
                                                        amountdue9 = amountdue10 = amountdue11 = 0;
                                                        amountdueinbase8 += amountdueinbase9 + amountdueinbase10 + amountdueinbase11;
                                                        amountdueinbase9 = amountdueinbase10 = amountdueinbase11 = 0;
                                                        break;
                                                    case 8:
                                                        amountdue9 += amountdue10 + amountdue11;
                                                        amountdue10 = amountdue11 = 0;
                                                        amountdueinbase9 += amountdueinbase10 + amountdueinbase11;
                                                        amountdueinbase10 = amountdueinbase11 = 0;
                                                        break;
                                                    case 9:
                                                        amountdue10 += amountdue11;
                                                        amountdue11 = 0;
                                                        amountdueinbase10 += amountdueinbase11;
                                                        amountdueinbase11 = 0;
                                                        break;
                                                }

                                            } else {
//                                                if (startDate != null && dueDate.before(startDate)) {
//                                                    accruedbalanceinbase += amountdueinbase;
//                                                    accruedbalance += amountdue;
//                                                } else
                                                if (dueDate.after(oneDayBeforeCal1Date) && (dueDate.before(cal1Date) || dueDate.equals(cal1Date))) {
                                                    amountdueinbase1 += amountdueinbase;
                                                    amountdue1 += amountdue;
                                                } else if (dueDate.after(cal2Date) || dueDate.equals(cal2Date)) {
                                                    amountdueinbase2 += amountdueinbase;
                                                    amountdue2 += amountdue;
                                                } else if (dueDate.after(cal3Date) || dueDate.equals(cal3Date)) {
                                                    amountdueinbase3 += amountdueinbase;
                                                    amountdue3 += amountdue;
                                                } else {
                                                    amountdueinbase4 += amountdueinbase;
                                                    amountdue4 += amountdue;
                                                }
                                            }
                                        }
                                        putObj.put(InvoiceConstants.personid, personID);
                                        putObj.put(InvoiceConstants.personname, personName);
                                        putObj.put(InvoiceConstants.aliasname, aliasname);
                                        putObj.put(InvoiceConstants.currencysymbol, currencySymbol);
                                        putObj.put(Constants.currencyKey, currencyid);
                                        putObj.put(InvoiceConstants.currencyname, currencyName);
                                        putObj.put("salespersonname", customerSalesPersonName[1]);
                                        putObj.put("amountdue1", amountdue1);
                                        putObj.put("amountdue2", amountdue2);
                                        putObj.put("amountdue3", amountdue3);
                                        putObj.put("amountdue4", amountdue4);
                                        putObj.put("amountdue5", amountdue5);
                                        putObj.put("amountdue6", amountdue6);
                                        putObj.put("amountdue7", amountdue7);
                                        putObj.put("amountdue8", amountdue8);
                                        putObj.put("amountdue9", amountdue9);
                                        putObj.put("amountdue10", amountdue10);
                                        putObj.put("amountdue11", amountdue11);

                                        putObj.put("amountdueinbase1", amountdueinbase1);
                                        putObj.put("amountdueinbase2", amountdueinbase2);
                                        putObj.put("amountdueinbase3", amountdueinbase3);
                                        putObj.put("amountdueinbase4", amountdueinbase4);
                                        putObj.put("amountdueinbase5", amountdueinbase5);
                                        putObj.put("amountdueinbase6", amountdueinbase6);
                                        putObj.put("amountdueinbase7", amountdueinbase7);
                                        putObj.put("amountdueinbase8", amountdueinbase8);
                                        putObj.put("amountdueinbase9", amountdueinbase9);
                                        putObj.put("amountdueinbase10", amountdueinbase10);
                                        putObj.put("amountdueinbase11", amountdueinbase11);

                                        currencyObj.put(currencyid, putObj);
                                    } else {
                                        personID = (invobj.has(InvoiceConstants.personid)) ? invobj.getString(InvoiceConstants.personid) : "";
                                        personName = (invobj.has(InvoiceConstants.personname)) ? invobj.getString(InvoiceConstants.personname) : "";
                                        aliasname = (invobj.has(InvoiceConstants.aliasname)) ? invobj.getString(InvoiceConstants.aliasname) : "";
                                        amountdueInBase = invobj.getString(InvoiceConstants.amountdueinbase);
                                        currencySymbol = (invobj.has(InvoiceConstants.currencysymbol)) ? invobj.getString(InvoiceConstants.currencysymbol) : "";
                                        currencyid = (invobj.has(Constants.currencyKey)) ? invobj.getString(Constants.currencyKey) : "";
                                        currencyName = (invobj.has(InvoiceConstants.currencyname)) ? invobj.getString(InvoiceConstants.currencyname) : "";
                                        isCN = invobj.has("isCN") ? invobj.getBoolean("isCN") : false;
                                        isRP = invobj.has("isRP") ? invobj.getBoolean("isRP") : false;
                                        if (currencyObj.has(currencyid)) {
                                            JSONObject addObj = currencyObj.getJSONObject(currencyid);
                                            if (isdistibutive) {
                                                amountdue1 = addObj.getDouble("amountdue1");
                                                amountdue2 = addObj.getDouble("amountdue2");
                                                amountdue3 = addObj.getDouble("amountdue3");
                                                amountdue4 = addObj.getDouble("amountdue4");
                                                amountdue5 = addObj.getDouble("amountdue5");
                                                amountdue6 = addObj.getDouble("amountdue6");
                                                amountdue7 = addObj.getDouble("amountdue7");
                                                amountdue8 = addObj.getDouble("amountdue8");
                                                amountdue9 = addObj.getDouble("amountdue9");
                                                amountdue10 = addObj.getDouble("amountdue10");
                                                amountdue11 = addObj.getDouble("amountdue11");

                                                amountdueinbase1 = addObj.getDouble("amountdueinbase1");
                                                amountdueinbase2 = addObj.getDouble("amountdueinbase2");
                                                amountdueinbase3 = addObj.getDouble("amountdueinbase3");
                                                amountdueinbase4 = addObj.getDouble("amountdueinbase4");
                                                amountdueinbase5 = addObj.getDouble("amountdueinbase5");
                                                amountdueinbase6 = addObj.getDouble("amountdueinbase6");
                                                amountdueinbase7 = addObj.getDouble("amountdueinbase7");
                                                amountdueinbase8 = addObj.getDouble("amountdueinbase8");
                                                amountdueinbase9 = addObj.getDouble("amountdueinbase9");
                                                amountdueinbase10 = addObj.getDouble("amountdueinbase10");
                                                amountdueinbase11 = addObj.getDouble("amountdueinbase11");

                                                
//                                                accruedbalance = addObj.getDouble("accruedbalance");
//                                                accruedbalanceinbase = addObj.getDouble("accruedbalanceinbase");
                                            } else {
                                                amountdue1 = addObj.getDouble("amountdue1");
                                                amountdue2 = addObj.getDouble("amountdue2");
                                                amountdue3 = addObj.getDouble("amountdue3");
//                                                accruedbalance = addObj.getDouble("accruedbalance");
                                                amountdueinbase1 = addObj.getDouble("amountdueinbase1");
                                                amountdueinbase2 = addObj.getDouble("amountdueinbase2");
                                                amountdueinbase3 = addObj.getDouble("amountdueinbase3");
//                                                accruedbalanceinbase = addObj.getDouble("accruedbalanceinbase");
                                            }
                                        }
                                        Date dueDate = new Date();
                                        if (datefilter == 0 || datefilter == Constants.agedDueDate0to30Filter) {
                                            dueDate = authHandler.getDateOnlyFormat().parse(invobj.getString(Constants.duedate));
                                        } else {
                                            dueDate = authHandler.getDateOnlyFormat().parse(invobj.getString("date"));
                                        }
                                        double amountdue = invobj.getDouble("amountdue");
                                        double amountdueinbase = invobj.getDouble(InvoiceConstants.amountdueinbase);
                                        boolean isopeningBalanceTransaction = invobj.optBoolean("isOpeningBalanceTransaction", false);
                                        if (isCN || isRP) {
                                            if (!isopeningBalanceTransaction) {
                                                amountdueinbase = -amountdueinbase;
                                                amountdue = -amountdue;
                                            }
                                        }

                                        if (customizedSumryReportFlag) {
                                            if ((dueDate.after(customizeSumryTo1Date) || dueDate.equals(customizeSumryTo1Date)) && (dueDate.before(customizeSumryFrom1Date) || dueDate.equals(customizeSumryFrom1Date))) {
                                                amountdue1 += amountdue;
                                                amountdueinbase1 += amountdueinbase;
                                            } else if ((dueDate.after(customizeSumryTo2Date) || dueDate.equals(customizeSumryTo2Date)) && (dueDate.before(customizeSumryFrom2Date) || dueDate.equals(customizeSumryFrom2Date))) {
                                                amountdue2 += amountdue;
                                                amountdueinbase2 += amountdueinbase;
                                            } else if ((dueDate.after(customizeSumryTo3Date) || dueDate.equals(customizeSumryTo3Date)) && (dueDate.before(customizeSumryFrom3Date) || dueDate.equals(customizeSumryFrom3Date))) {
                                                amountdue3 += amountdue;
                                                amountdueinbase3 += amountdueinbase;
                                            } else if ((dueDate.after(customizeSumryTo4Date) || dueDate.equals(customizeSumryTo4Date)) && (dueDate.before(customizeSumryFrom4Date) || dueDate.equals(customizeSumryFrom4Date))) {
                                                amountdue4 += amountdue;
                                                amountdueinbase4 += amountdueinbase;
                                            } else if ((dueDate.after(customizeSumryTo5Date) || dueDate.equals(customizeSumryTo5Date)) && (dueDate.before(customizeSumryFrom5Date) || dueDate.equals(customizeSumryFrom5Date))) {
                                                amountdue5 += amountdue;
                                                amountdueinbase5 += amountdueinbase;
                                            } else if ((dueDate.after(customizeSumryTo6Date) || dueDate.equals(customizeSumryTo6Date)) && (dueDate.before(customizeSumryFrom6Date) || dueDate.equals(customizeSumryFrom6Date))) {
                                                amountdue6 += amountdue;
                                                amountdueinbase6 += amountdueinbase;
                                            } else if ((dueDate.after(customizeSumryTo7Date) || dueDate.equals(customizeSumryTo7Date)) && (dueDate.before(customizeSumryFrom7Date) || dueDate.equals(customizeSumryFrom7Date))) {
                                                amountdue7 += amountdue;
                                                amountdueinbase7 += amountdueinbase;
                                            }

                                        } else {

                                            if (isdistibutive) {
//                                                if (startDate != null && dueDate.before(startDate)) {
//                                                    accruedbalanceinbase += amountdueinbase;
//                                                    accruedbalance += amountdue;
//                                                } else
                                                if (dueDate.after(oneDayBeforeCal1Date)) {
                                                    if (dueDate.equals(cal1Date) && (datefilter == Constants.agedDueDate0to30Filter || datefilter == Constants.agedInvoiceDate0to30Filter)) {
                                                        amountdueinbase2 += amountdueinbase;
                                                        amountdue2 += amountdue;
                                                    } else {
                                                        amountdueinbase1 += amountdueinbase;
                                                        amountdue1 += amountdue;
                                                    }
                                                } else if ((cal2Date.before(dueDate) || cal2Date.equals(dueDate)) && cal1Date.after(dueDate)) {
                                                    amountdueinbase2 += amountdueinbase;
                                                    amountdue2 += amountdue;
                                                } else if ((cal3Date.before(dueDate) || cal3Date.equals(dueDate)) && cal2Date.after(dueDate)) {
                                                    amountdueinbase3 += amountdueinbase;
                                                    amountdue3 += amountdue;
                                                } else if ((cal4Date.before(dueDate) || cal4Date.equals(dueDate)) && cal3Date.after(dueDate)) {
                                                    amountdueinbase4 += amountdueinbase;
                                                    amountdue4 += amountdue;
                                                } else if ((cal5Date.before(dueDate) || cal5Date.equals(dueDate)) && cal4Date.after(dueDate)) {
                                                    amountdueinbase5 += amountdueinbase;
                                                    amountdue5 += amountdue;
                                                } else if ((cal6Date.before(dueDate) || cal6Date.equals(dueDate)) && cal5Date.after(dueDate)) {
                                                    amountdueinbase6 += amountdueinbase;
                                                    amountdue6 += amountdue;
                                                } else if ((cal7Date.before(dueDate) || cal7Date.equals(dueDate)) && cal6Date.after(dueDate)) {
                                                    amountdueinbase7 += amountdueinbase;
                                                    amountdue7 += amountdue;
                                                } else if ((cal8Date.before(dueDate) || cal8Date.equals(dueDate)) && cal7Date.after(dueDate)) {
                                                    amountdueinbase8 += amountdueinbase;
                                                    amountdue8 += amountdue;
                                                } else if ((cal9Date.before(dueDate) || cal9Date.equals(dueDate)) && cal8Date.after(dueDate)) {
                                                    amountdueinbase9 += amountdueinbase;
                                                    amountdue9 += amountdue;
                                                } else if ((cal10Date.before(dueDate) || cal10Date.equals(dueDate)) && cal9Date.after(dueDate)) {
                                                    amountdueinbase10 += amountdueinbase;
                                                    amountdue10 += amountdue;
                                                } else {
                                                    amountdueinbase11 += amountdueinbase;
                                                    amountdue11 += amountdue;
                                                }

                                                switch(noOfInterval){
                                                    case 2:
                                                        amountdue3 += amountdue4 + amountdue5 + amountdue6 + amountdue7 + amountdue8 + amountdue9 + amountdue10 + amountdue11;
                                                        amountdue4 = amountdue5 = amountdue6 = amountdue7 = amountdue8 = amountdue9 = amountdue10 = amountdue11 = 0;
                                                        amountdueinbase3 += amountdueinbase4 + amountdueinbase5 + amountdueinbase6 + amountdueinbase7 + amountdueinbase8 + amountdueinbase9 + amountdueinbase10 + amountdueinbase11;
                                                        amountdueinbase4 = amountdueinbase5 = amountdueinbase6 = amountdueinbase7 = amountdueinbase8 = amountdueinbase9 = amountdueinbase10 = amountdueinbase11 = 0;
                                                        break;
                                                    case 3:
                                                        amountdue4 += amountdue5 + amountdue6 + amountdue7 + amountdue8 + amountdue9 + amountdue10 + amountdue11;
                                                        amountdue5 = amountdue6 = amountdue7 = amountdue8 = amountdue9 = amountdue10 = amountdue11 = 0;
                                                        amountdueinbase4 += amountdueinbase5 + amountdueinbase6 + amountdueinbase7 + amountdueinbase8 + amountdueinbase9 + amountdueinbase10 + amountdueinbase11;
                                                        amountdueinbase5 = amountdueinbase6 = amountdueinbase7 = amountdueinbase8 = amountdueinbase9 = amountdueinbase10 = amountdueinbase11 = 0;
                                                        break;
                                                    case 4:
                                                        amountdue5 += amountdue6 + amountdue7 + amountdue8 + amountdue9 + amountdue10 + amountdue11;
                                                        amountdue6 = amountdue7 = amountdue8 = amountdue9 = amountdue10 = amountdue11 = 0;
                                                        amountdueinbase5 += amountdueinbase6 + amountdueinbase7 + amountdueinbase8 + amountdueinbase9 + amountdueinbase10 + amountdueinbase11;
                                                        amountdueinbase6 = amountdueinbase7 = amountdueinbase8 = amountdueinbase9 = amountdueinbase10 = amountdueinbase11 = 0;
                                                        break;
                                                    case 5:
                                                        amountdue6 += amountdue7 + amountdue8 + amountdue9 + amountdue10 + amountdue11;
                                                        amountdue7 = amountdue8 = amountdue9 = amountdue10 = amountdue11 = 0;
                                                        amountdueinbase6 += amountdueinbase7 + amountdueinbase8 + amountdueinbase9 + amountdueinbase10 + amountdueinbase11;
                                                        amountdueinbase7 = amountdueinbase8 = amountdueinbase9 = amountdueinbase10 = amountdueinbase11 = 0;
                                                        break;
                                                    case 6:
                                                        amountdue7 += amountdue8 + amountdue9 + amountdue10 + amountdue11;
                                                        amountdue8 = amountdue9 = amountdue10 = amountdue11 = 0;
                                                        amountdueinbase7 += amountdueinbase8 + amountdueinbase9 + amountdueinbase10 + amountdueinbase11;
                                                        amountdueinbase8 = amountdueinbase9 = amountdueinbase10 = amountdueinbase11 = 0;
                                                        break;
                                                    case 7:
                                                        amountdue8 += amountdue9 + amountdue10 + amountdue11;
                                                        amountdue9 = amountdue10 = amountdue11 = 0;
                                                        amountdueinbase8 += amountdueinbase9 + amountdueinbase10 + amountdueinbase11;
                                                        amountdueinbase9 = amountdueinbase10 = amountdueinbase11 = 0;
                                                        break;
                                                    case 8:
                                                        amountdue9 += amountdue10 + amountdue11;
                                                        amountdue10 = amountdue11 = 0;
                                                        amountdueinbase9 += amountdueinbase10 + amountdueinbase11;
                                                        amountdueinbase10 = amountdueinbase11 = 0;
                                                        break;
                                                    case 9:
                                                        amountdue10 += amountdue11;
                                                        amountdue11 = 0;
                                                        amountdueinbase10 += amountdueinbase11;
                                                        amountdueinbase11 = 0;
                                                        break;
                                                }

                                            } else {
//                                                if (startDate != null && dueDate.before(startDate)) {
//                                                    accruedbalanceinbase += amountdueinbase;
//                                                    accruedbalance += amountdue;
//                                                } else
                                                if (dueDate.after(oneDayBeforeCal1Date) && (dueDate.before(cal1Date) || dueDate.equals(cal1Date))) {
                                                    amountdueinbase1 += amountdueinbase;
                                                    amountdue1 += amountdue;
                                                } else if (dueDate.after(cal2Date) || dueDate.equals(cal2Date)) {
                                                    amountdueinbase2 += amountdueinbase;
                                                    amountdue2 += amountdue;
                                                } else if (dueDate.after(cal3Date) || dueDate.equals(cal3Date)) {
                                                    amountdueinbase3 += amountdueinbase;
                                                    amountdue3 += amountdue;
                                                } else {
                                                    amountdueinbase4 += amountdueinbase;
                                                    amountdue4 += amountdue;
                                                }
                                            }
                                        }
                                        putObj.put(InvoiceConstants.personid, personID);
                                        putObj.put(InvoiceConstants.personname, personName);
                                        putObj.put(InvoiceConstants.aliasname, aliasname);
                                        putObj.put(InvoiceConstants.currencysymbol, currencySymbol);
                                        putObj.put(Constants.currencyKey, currencyid);
                                        putObj.put(InvoiceConstants.currencyname, currencyName);
                                        putObj.put("salespersonname", customerSalesPersonName[1]);
                                        putObj.put("amountdue1", amountdue1);
                                        putObj.put("amountdue2", amountdue2);
                                        putObj.put("amountdue3", amountdue3);
                                        putObj.put("amountdue4", amountdue4);
                                        putObj.put("amountdue5", amountdue5);
                                        putObj.put("amountdue6", amountdue6);
                                        putObj.put("amountdue7", amountdue7);
                                        putObj.put("amountdue8", amountdue8);
                                        putObj.put("amountdue9", amountdue9);
                                        putObj.put("amountdue10", amountdue10);
                                        putObj.put("amountdue11", amountdue11);
                                        
                                        putObj.put("amountdueinbase1", amountdueinbase1);
                                        putObj.put("amountdueinbase2", amountdueinbase2);
                                        putObj.put("amountdueinbase3", amountdueinbase3);
                                        putObj.put("amountdueinbase4", amountdueinbase4);
                                        putObj.put("amountdueinbase5", amountdueinbase5);
                                        putObj.put("amountdueinbase6", amountdueinbase6);
                                        putObj.put("amountdueinbase7", amountdueinbase7);
                                        putObj.put("amountdueinbase8", amountdueinbase8);
                                        putObj.put("amountdueinbase9", amountdueinbase9);
                                        putObj.put("amountdueinbase10", amountdueinbase10);
                                        putObj.put("amountdueinbase11", amountdueinbase11);
                                        
                                        
//                                        putObj.put("accruedbalance", accruedbalance);
//                                       
//                                        putObj.put("accruedbalanceinbase", accruedbalanceinbase);
                                        currencyObj.put(currencyid, putObj);
                                    }
                                }
                                Iterator itr = currencyObj.keys();
                                while (itr.hasNext()) {
                                    JSONObject getObj = currencyObj.getJSONObject(itr.next().toString());
                                    jObj = new JSONObject();
                                    if (getObj.has(InvoiceConstants.personid)) {
                                        jObj.put(InvoiceConstants.personid, getObj.getString(InvoiceConstants.personid));
                                    }
                                    if (getObj.has(InvoiceConstants.personname)) {
                                        jObj.put(InvoiceConstants.personname + linedetails, getObj.getString(InvoiceConstants.personname));
                                    }
                                   
                                    jObj.put("amountdue1" + linedetails, Double.valueOf(authHandler.formattedAmount(getObj.getDouble("amountdue1"), companyid)));
                                    jObj.put("amountdue2" + linedetails, Double.valueOf(authHandler.formattedAmount(getObj.getDouble("amountdue2"), companyid)));
                                    jObj.put("amountdue3" + linedetails, Double.valueOf(authHandler.formattedAmount(getObj.getDouble("amountdue3"), companyid)));
                                    jObj.put("amountdue4" + linedetails, Double.valueOf(authHandler.formattedAmount(getObj.getDouble("amountdue4"), companyid)));
                                    jObj.put("amountdue5" + linedetails, Double.valueOf(authHandler.formattedAmount(getObj.getDouble("amountdue5"), companyid)));
                                    jObj.put("amountdue6" + linedetails, Double.valueOf(authHandler.formattedAmount(getObj.getDouble("amountdue6"), companyid)));
                                    jObj.put("amountdue7" + linedetails, Double.valueOf(authHandler.formattedAmount(getObj.getDouble("amountdue7"), companyid)));
                                    jObj.put("amountdue8" + linedetails, Double.valueOf(authHandler.formattedAmount(getObj.getDouble("amountdue8"), companyid)));
                                    jObj.put("amountdue9" + linedetails, Double.valueOf(authHandler.formattedAmount(getObj.getDouble("amountdue9"), companyid)));
                                    jObj.put("amountdue10" + linedetails, Double.valueOf(authHandler.formattedAmount(getObj.getDouble("amountdue10"), companyid)));
                                    jObj.put("amountdue11" + linedetails, Double.valueOf(authHandler.formattedAmount(getObj.getDouble("amountdue11"), companyid)));

//                                    jObj.put("accruedbalance" + linedetails, Double.valueOf(authHandler.formattedAmount(getObj.getDouble("accruedbalance"), companyid)));
                                    jObj.put(InvoiceConstants.currencysymbol + linedetails, getObj.getString(InvoiceConstants.currencysymbol));
                                    jObj.put(Constants.currencyKey + linedetails, getObj.getString(Constants.currencyKey));
                                    KwlReturnObject objItr = accountingHandlerDAOobj.getObject(KWLCurrency.class.getName(), getObj.getString(Constants.currencyKey));
                                    KWLCurrency currency = (KWLCurrency) objItr.getEntityList().get(0);
                                    jObj.put(InvoiceConstants.currencyname + linedetails, getObj.getString(InvoiceConstants.currencyname));
                                    jObj.put(InvoiceConstants.personinfo , personInfo);
                                    jObj.put("currencyCode" + linedetails, currency.getCurrencyCode());
                                    jObj.put("salespersonname", customerSalesPersonName[1]);
                                    jObj.put("code", code);
                                    double amountdue =0.0;
                                    amountdue = Double.valueOf(authHandler.formattedAmount((getObj.getDouble("amountdue1") + getObj.getDouble("amountdue2") + getObj.getDouble("amountdue3") + getObj.getDouble("amountdue4") + getObj.getDouble("amountdue5") + getObj.getDouble("amountdue6") + getObj.getDouble("amountdue7") + getObj.getDouble("amountdue8") + getObj.getDouble("amountdue9") + getObj.getDouble("amountdue10") + getObj.getDouble("amountdue11")), companyid));
                                  
                                    /**
                                     * Hidded Total column from AP and AR when we expand record SDP-13193.
                                     */
                                    if (isExportReport || isCallFromDD) {
                                        jObj.put("total" + linedetails, amountdue);
                                    }
                                    double amountdueinbase = 0.0;

                                    amountdueinbase = Double.valueOf(authHandler.formattedAmount((getObj.getDouble("amountdueinbase1") + getObj.getDouble("amountdueinbase2") + getObj.getDouble("amountdueinbase3") + getObj.getDouble("amountdueinbase4") + getObj.getDouble("amountdueinbase5") + getObj.getDouble("amountdueinbase6") + getObj.getDouble("amountdueinbase7") + getObj.getDouble("amountdueinbase8") + getObj.getDouble("amountdueinbase9") + getObj.getDouble("amountdueinbase10") + getObj.getDouble("amountdueinbase11")), companyid));

                                    jObj.put("totalinbase" + linedetails, amountdueinbase);
                                    if (!isdetailedXls) {
                                        totalinbase += amountdueinbase;
                                    }
                                    if (customizedSumryReportFlag && !showCustVendorWithZeroAmounts && amountdue == 0) {
                                        continue;
                                    }
                                    jArr.put(jObj);
                                }
                            }
                        }
                    }
            }
            if(exportCustomerAged){ //  Used for export CSV
                JSONObject jtotal = new JSONObject();
                if (customizedSumryReportFlag) {
                    jtotal.put(InvoiceConstants.personname, "Total");
                    jtotal.put("total", totalinbase);
                } else {
                    jtotal.put("total", "Total");
                    jtotal.put("totalinbase", totalinbase);
                }
                jArr.put(jtotal);
            }
            if (StringUtil.equalIgnoreCase(chartType, Constants.BAR_CHART) && isAged) {
                double[] totalAmountDueInBase = {totalAmountDueInBase1, totalAmountDueInBase2, totalAmountDueInBase3, totalAmountDueInBase4, totalAmountDueInBase5, totalAmountDueInBase6, totalAmountDueInBase7, totalAmountDueInBase8};
                jArr = accGoodsReceiptServiceDao.getAgedPayableReceivableBarChartJson(request, companyid, totalAmountDueInBase);
            } else if (StringUtil.equalIgnoreCase(chartType, Constants.PIE_CHART) && isAged) {
                jArr = accGoodsReceiptServiceDao.getAgedPayableReceivablePieChartJson(companyid, jArr);
            }
            if (isAged) {
                paramObj = StringUtil.convertRequestToJsonObject(request);
                boolean statementOfAccountsFlag = false;

                if (!StringUtil.isNullOrEmpty(request.getParameter(Constants.statementOfAccountsFlag))) {
                    statementOfAccountsFlag = Boolean.parseBoolean(request.getParameter(Constants.statementOfAccountsFlag).toString());
                }

                if (!statementOfAccountsFlag) {
                    paramObj.put(Constants.agedReceivableDateFilter, datefilter);
                    paramObj.put(Constants.agedReceivableInterval, duration);
                    paramObj.put(Constants.agedReceivableNoOfInterval, noOfInterval);
                }
                accDashboardServiceImpl.saveUserPreferencesOptions(paramObj);
            }
            mainJobj.put("data",jArr);
            mainJobj.put("totalcount",jArr.length());
        } catch (SessionExpiredException | NumberFormatException | ParseException | JSONException | UnsupportedEncodingException | ServiceException ex ) {
            Logger.getLogger(AccInvoiceServiceImpl.class.getName()).log(Level.SEVERE, null, ex);
            throw ServiceException.FAILURE("getCustomerAgedReceivableMerged : " + ex.getMessage(), ex);
        }
        return mainJobj;
}
           
           
 @Override
  public JSONObject getCustomerAgedReceivableMerged(JSONObject request, boolean exportCustomerAged,boolean isAgedReceivables) throws ServiceException, JSONException, SessionExpiredException, ParseException {
        JSONObject jObj = new JSONObject();
        JSONObject mainJobj = new JSONObject();
        JSONArray jArr = new JSONArray();
        try {
            HashMap invoiceRequestParams = AccInvoiceServiceHandler.getInvoiceRequestMapJson(request); 
            String companyid = request.optString("companyid");
            String gCurrencyId = request.optString(Constants.globalCurrencyKey);
            String templatesubtype = StringUtil.isNullOrEmpty(request.optString("templatesubtype",""))? Constants.TEMPLATE_SUBTYPE_SOA : request.optString("templatesubtype");
            if (!StringUtil.isNullOrEmpty(request.optString(Constants.moduleid))) {
                /*
                remove searchjson while export Statement of account
                */
                int module = Integer.parseInt(request.optString(Constants.moduleid));
                if (module == Constants.Acc_Customer_ModuleId) {
                    invoiceRequestParams.remove(Constants.Acc_Search_Json);
                }
            }
            double totalinbase=0.0;
//            String curDateString = (!StringUtil.isNullOrEmpty(request.optString("curdate"))) ? request.optString("curdate") : ((!StringUtil.isNullOrEmpty(request.optString("stdate"))) ? request.optString("stdate") : request.optString(Constants.REQ_startdate));
            String curDateString = !(StringUtil.isNullOrEmpty(request.optString(Constants.asOfDate,""))) ? request.optString(Constants.asOfDate) : request.optString(Constants.curdate);
            DateFormat df = authHandler.getDateOnlyFormat( );
            Date curDate = df.parse(curDateString);
            int duration = request.optString("duration") == null ? 0 : Integer.parseInt(request.optString("duration"));
            int noOfInterval = request.has("noOfInterval") ? request.optInt("noOfInterval",7) : 7;

            boolean showCustVendorWithZeroAmounts = StringUtil.isNullOrEmpty(request.optString("showCustVendorWithZeroAmounts"))?false:StringUtil.getBoolean(request.optString("showCustVendorWithZeroAmounts"));
            boolean consolidationAgedReceivable = StringUtil.isNullOrEmpty(request.optString("consolidationAgedReceivable"))?false:StringUtil.getBoolean(request.optString("consolidationAgedReceivable"));
            boolean isdistibutive = StringUtil.getBoolean(request.optString("isdistributive"));
            boolean checkForEx=false;
            if (StringUtil.getBoolean(request.optString("checkforex"))) {
                checkForEx = StringUtil.getBoolean(request.optString("checkforex"));
            }
           
            boolean isdetailedXls=false;
            if (request.optString("detailedXls") !=null) {
                isdetailedXls = request.optBoolean("detailedXls");
            }
            String linedetails=isdetailedXls ?"_line":"";
            int datefilter = StringUtil.getInteger(request.optString("datefilter"));// 0 = Invoice Due date OR 1 = Invoice date
            boolean isCurrencyDetails = request.optString("isCurrencyDetails") != null ? Boolean.parseBoolean(request.optString("isCurrencyDetails")) : false;
            if (request.optString("isCurrencyDetails") != null) {
                isCurrencyDetails =   request.optBoolean("isCurrencyDetails");
            }
            Date startDate = null;
            if (invoiceRequestParams.containsKey(Constants.REQ_startdate) && invoiceRequestParams.get(Constants.REQ_startdate) != null) {
                if(StringUtil.isValidDateOnlyFormat(invoiceRequestParams.get(Constants.REQ_startdate).toString())){ //Handle Date Parse exception. ERP-33531
                    startDate = (invoiceRequestParams.get(Constants.REQ_startdate).toString()).equals("") ? df.parse(Constants.opening_Date) : df.parse(invoiceRequestParams.get(Constants.REQ_startdate).toString());
                } else {
                    startDate = (invoiceRequestParams.get(Constants.REQ_startdate).toString()).equals("") ? new Date(Constants.opening_Date) : new Date(Long.parseLong(invoiceRequestParams.get(Constants.REQ_startdate).toString()));
                }                
            }
            boolean isCustomerCurrExport=false;
            isCustomerCurrExport = request.optBoolean("isCustomerCurrExport",false);
            
            double amountdue1 = 0;
            double amountdue2 = 0;
            double amountdue3 = 0;
            double amountdue4 = 0;
            double amountdue5 = 0;
            double amountdue6 = 0;
            double amountdue7 = 0;
            double amountdue8 = 0;
            double amountdue9 = 0;
            double amountdue10 = 0;
            double amountdue11 = 0;
//            double accruedbalance = 0;
            double amountdueinbase1 = 0;
            double amountdueinbase2 = 0;
            double amountdueinbase3 = 0;
            double amountdueinbase4 = 0;
            double amountdueinbase5 = 0;
            double amountdueinbase6 = 0;
            double amountdueinbase7 = 0;
            double amountdueinbase8 = 0;
            double amountdueinbase9 = 0;
            double amountdueinbase10 = 0;
            double amountdueinbase11 = 0;
//            double accruedbalanceinbase = 0;

            Calendar oneDayBeforeCal1 = Calendar.getInstance();
            Calendar cal1 = Calendar.getInstance();
            Calendar cal2 = Calendar.getInstance();
            Calendar cal3 = Calendar.getInstance();
            Calendar cal4 = Calendar.getInstance();
            Calendar cal5 = Calendar.getInstance();
            Calendar cal6 = Calendar.getInstance();
            Calendar cal7 = Calendar.getInstance();
            Calendar cal8 = Calendar.getInstance();
            Calendar cal9 = Calendar.getInstance();
            Calendar cal10 = Calendar.getInstance();


            Calendar customizeSumryFrom1 = Calendar.getInstance();
            Calendar customizeSumryTo1 = Calendar.getInstance();
            Calendar customizeSumryFrom2 = Calendar.getInstance();
            Calendar customizeSumryTo2 = Calendar.getInstance();
            Calendar customizeSumryFrom3 = Calendar.getInstance();
            Calendar customizeSumryTo3 = Calendar.getInstance();
            Calendar customizeSumryFrom4 = Calendar.getInstance();
            Calendar customizeSumryTo4 = Calendar.getInstance();
            Calendar customizeSumryFrom5 = Calendar.getInstance();
            Calendar customizeSumryTo5 = Calendar.getInstance();
            Calendar customizeSumryFrom6 = Calendar.getInstance();
            Calendar customizeSumryTo6 = Calendar.getInstance();
            Calendar customizeSumryFrom7 = Calendar.getInstance();
            Calendar customizeSumryTo7 = Calendar.getInstance();
            boolean customizedSumryReportFlag = false;

            oneDayBeforeCal1.setTime(curDate);
            cal1.setTime(curDate);
            cal2.setTime(curDate);
            cal3.setTime(curDate);
            cal4.setTime(curDate);
            cal5.setTime(curDate);
            cal6.setTime(curDate);
            cal7.setTime(curDate);
            cal8.setTime(curDate);
            cal9.setTime(curDate);
            cal10.setTime(curDate);
            oneDayBeforeCal1.add(Calendar.DAY_OF_YEAR, -1);
            cal2.add(Calendar.DAY_OF_YEAR, -duration);
            cal3.add(Calendar.DAY_OF_YEAR, -(duration * 2));
            cal4.add(Calendar.DAY_OF_YEAR, -(duration * 3));
            cal5.add(Calendar.DAY_OF_YEAR, -(duration * 4));
            cal6.add(Calendar.DAY_OF_YEAR, -(duration * 5));
            cal7.add(Calendar.DAY_OF_YEAR, -(duration * 6));
            cal8.add(Calendar.DAY_OF_YEAR, -(duration * 7));
            cal9.add(Calendar.DAY_OF_YEAR, -(duration * 8));
            cal10.add(Calendar.DAY_OF_YEAR, -(duration * 9));
            
            Date oneDayBeforeCal1Date = null;
            Date cal1Date = null;
            Date cal2Date = null;
            Date cal3Date = null;
            Date cal4Date = null;
            Date cal5Date = null;
            Date cal6Date = null;
            Date cal7Date = null;
            Date cal8Date = null;
            Date cal9Date = null;
            Date cal10Date = null;

            String oneDayBeforeCal1String = df.format(oneDayBeforeCal1.getTime());
            oneDayBeforeCal1Date = df.parse(oneDayBeforeCal1String);

            String cal1String = df.format(cal1.getTime());
            cal1Date = df.parse(cal1String);

            String cal2String = df.format(cal2.getTime());
            cal2Date = df.parse(cal2String);

            String cal3String = df.format(cal3.getTime());
            cal3Date = df.parse(cal3String);

            String cal4String = df.format(cal4.getTime());
            cal4Date = df.parse(cal4String);

            String cal5String = df.format(cal5.getTime());
            cal5Date = df.parse(cal5String);

            String cal6String = df.format(cal6.getTime());
            cal6Date = df.parse(cal6String);

            String cal7String = df.format(cal7.getTime());
            cal7Date = df.parse(cal7String);

            String cal8String = df.format(cal8.getTime());
            cal8Date = df.parse(cal8String);

            String cal9String = df.format(cal9.getTime());
            cal9Date = df.parse(cal9String);

            String cal10String = df.format(cal10.getTime());
            cal10Date = df.parse(cal10String);
                     
            Map<String, String> amountDueMap = new HashMap<String, String>();

            String customizedSumryReportFlagStr = request.optString("customizedSummaryReportFlag");
            if (!StringUtil.isNullOrEmpty(customizedSumryReportFlagStr)) {
                customizedSumryReportFlag = Boolean.parseBoolean(customizedSumryReportFlagStr);
                String fromDuration = null;
                String toDuration = null;
                List<String> fromDurationArr = new ArrayList<String>();// request.getParameter("fromDuration").split(",");
                List<String> toDurationArr = new ArrayList<String>();


                JSONArray fromDurationjson = new JSONArray(request.optString("fromDuration"));
                JSONArray toDurationjson = new JSONArray(request.optString("toDuration"));
                for (int i = 0; i < fromDurationjson.length(); i++) {
                    JSONObject object1 = new JSONObject(fromDurationjson.getString(i));
                    fromDurationArr.add(object1.getString("id"));
                    amountDueMap.put(object1.getString("amountdueindex"), object1.getString("amountdue"));
                    JSONObject object2 = new JSONObject(toDurationjson.getString(i));
                    toDurationArr.add(object2.getString("id"));


                }
                for (int i = 0; i < fromDurationArr.size(); i++) {
                    fromDuration = fromDurationArr.get(i);
                    toDuration = toDurationArr.get(i);
                    switch (i + 1) {
                        case 1:
                            if (!StringUtil.isNullOrEmpty(fromDuration) && !StringUtil.isNullOrEmpty(toDuration)) {
                                int fromDur = Integer.parseInt(fromDuration);
                                int toDur = Integer.parseInt(toDuration);
                                customizeSumryFrom1.setTime(curDate);
                                customizeSumryTo1.setTime(curDate);
                                customizeSumryFrom1.add(Calendar.DAY_OF_YEAR, -fromDur);
                                customizeSumryTo1.add(Calendar.DAY_OF_YEAR, -toDur);
                            }
                            break;
                        case 2:
                            if (!StringUtil.isNullOrEmpty(fromDuration) && !StringUtil.isNullOrEmpty(toDuration)) {
                                int fromDur = Integer.parseInt(fromDuration);
                                int toDur = Integer.parseInt(toDuration);
                                customizeSumryFrom2.setTime(curDate);
                                customizeSumryTo2.setTime(curDate);
                                customizeSumryFrom2.add(Calendar.DAY_OF_YEAR, -fromDur);
                                customizeSumryTo2.add(Calendar.DAY_OF_YEAR, -toDur);
                            }
                            break;
                        case 3:
                            if (!StringUtil.isNullOrEmpty(fromDuration) && !StringUtil.isNullOrEmpty(toDuration)) {
                                int fromDur = Integer.parseInt(fromDuration);
                                int toDur = Integer.parseInt(toDuration);
                                customizeSumryFrom3.setTime(curDate);
                                customizeSumryTo3.setTime(curDate);
                                customizeSumryFrom3.add(Calendar.DAY_OF_YEAR, -fromDur);
                                customizeSumryTo3.add(Calendar.DAY_OF_YEAR, -toDur);
                            }
                            break;
                        case 4:
                            if (!StringUtil.isNullOrEmpty(fromDuration) && !StringUtil.isNullOrEmpty(toDuration)) {
                                int fromDur = Integer.parseInt(fromDuration);
                                int toDur = Integer.parseInt(toDuration);
                                customizeSumryFrom4.setTime(curDate);
                                customizeSumryTo4.setTime(curDate);
                                customizeSumryFrom4.add(Calendar.DAY_OF_YEAR, -fromDur);
                                customizeSumryTo4.add(Calendar.DAY_OF_YEAR, -toDur);
                            }
                            break;
                        case 5:
                            if (!StringUtil.isNullOrEmpty(fromDuration) && !StringUtil.isNullOrEmpty(toDuration)) {
                                int fromDur = Integer.parseInt(fromDuration);
                                int toDur = Integer.parseInt(toDuration);
                                customizeSumryFrom5.setTime(curDate);
                                customizeSumryTo5.setTime(curDate);
                                customizeSumryFrom5.add(Calendar.DAY_OF_YEAR, -fromDur);
                                customizeSumryTo5.add(Calendar.DAY_OF_YEAR, -toDur);
                            }
                            break;
                        case 6:
                            if (!StringUtil.isNullOrEmpty(fromDuration) && !StringUtil.isNullOrEmpty(toDuration)) {
                                int fromDur = Integer.parseInt(fromDuration);
                                int toDur = Integer.parseInt(toDuration);
                                customizeSumryFrom6.setTime(curDate);
                                customizeSumryTo6.setTime(curDate);
                                customizeSumryFrom6.add(Calendar.DAY_OF_YEAR, -fromDur);
                                customizeSumryTo6.add(Calendar.DAY_OF_YEAR, -toDur);
                            }
                            break;
                        case 7:
                            if (!StringUtil.isNullOrEmpty(fromDuration) && !StringUtil.isNullOrEmpty(toDuration)) {
                                int fromDur = Integer.parseInt(fromDuration);
                                int toDur = Integer.parseInt(toDuration);
                                customizeSumryFrom7.setTime(curDate);
                                customizeSumryTo7.setTime(curDate);
                                customizeSumryFrom7.add(Calendar.DAY_OF_YEAR, -fromDur);
                                customizeSumryTo7.add(Calendar.DAY_OF_YEAR, -toDur);
                            }
                            break;


                    }
                }

            }
            
            Date customizeSumryFrom1Date = null;
            Date customizeSumryTo1Date = null;
            Date customizeSumryFrom2Date = null;
            Date customizeSumryTo2Date = null;
            Date customizeSumryFrom3Date = null;
            Date customizeSumryTo3Date = null;
            Date customizeSumryFrom4Date = null;
            Date customizeSumryTo4Date = null;
            Date customizeSumryFrom5Date = null;
            Date customizeSumryTo5Date = null;
            Date customizeSumryFrom6Date = null;
            Date customizeSumryTo6Date = null;
            Date customizeSumryFrom7Date = null;
            Date customizeSumryTo7Date = null;

            String customizeSumryFrom1String = df.format(customizeSumryFrom1.getTime());
            customizeSumryFrom1Date = df.parse(customizeSumryFrom1String);
            String customizeSumryTo1String = df.format(customizeSumryTo1.getTime());
            customizeSumryTo1Date = df.parse(customizeSumryTo1String);

            String customizeSumryFrom2String = df.format(customizeSumryFrom2.getTime());
            customizeSumryFrom2Date = df.parse(customizeSumryFrom2String);
            String customizeSumryTo2String = df.format(customizeSumryTo2.getTime());
            customizeSumryTo2Date = df.parse(customizeSumryTo2String);

            String customizeSumryFrom3String = df.format(customizeSumryFrom3.getTime());
            customizeSumryFrom3Date = df.parse(customizeSumryFrom3String);
            String customizeSumryTo3String = df.format(customizeSumryTo3.getTime());
            customizeSumryTo3Date = df.parse(customizeSumryTo3String);

            String customizeSumryFrom4String = df.format(customizeSumryFrom4.getTime());
            customizeSumryFrom4Date = df.parse(customizeSumryFrom4String);
            String customizeSumryTo4String = df.format(customizeSumryTo4.getTime());
            customizeSumryTo4Date = df.parse(customizeSumryTo4String);

            String customizeSumryFrom5String = df.format(customizeSumryFrom5.getTime());
            customizeSumryFrom5Date = df.parse(customizeSumryFrom5String);
            String customizeSumryTo5String = df.format(customizeSumryTo5.getTime());
            customizeSumryTo5Date = df.parse(customizeSumryTo5String);

            String customizeSumryFrom6String = df.format(customizeSumryFrom6.getTime());
            customizeSumryFrom6Date = df.parse(customizeSumryFrom6String);
            String customizeSumryTo6String = df.format(customizeSumryTo6.getTime());
            customizeSumryTo6Date = df.parse(customizeSumryTo6String);

            String customizeSumryFrom7String = df.format(customizeSumryFrom7.getTime());
            customizeSumryFrom7Date = df.parse(customizeSumryFrom7String);
            String customizeSumryTo7String = df.format(customizeSumryTo7.getTime());
            customizeSumryTo7Date = df.parse(customizeSumryTo7String);      

            KwlReturnObject custresult = accCustomerDAOobj.getCustomerWithCurrencyForAgedReceivables(invoiceRequestParams);
            List<Object[]> customerList=custresult.getEntityList();
            if (invoiceRequestParams.containsKey(Constants.start)) { //Removing paging here because it is applying on each vendor data (CN/DN etc). Due to this complete amount due not showing in AP Summary.  
                invoiceRequestParams.remove(Constants.start);
            }
            if (invoiceRequestParams.containsKey(Constants.limit)) {
                invoiceRequestParams.remove(Constants.limit);
            } 
            String start = "";
            int previousStart=0;
            int limit =0;
            String firstCustomerId="";
            String lastCustomerId="";
            int skipRecords=1;
            if (!checkForEx) {
                if (!StringUtil.isNullOrEmpty(request.optString("lastcustomerid"))) {
                    lastCustomerId = request.optString("lastcustomerid");
                }

                if (!StringUtil.isNullOrEmpty(request.optString("fCustomerId"))) {
                    if (Integer.parseInt(start) == 0) {
                        firstCustomerId = "";
                    } else {
                        firstCustomerId = request.optString("fCustomerId");
                    }
                }
                if (!StringUtil.isNullOrEmpty(request.optString("previousStart"))) {
                    previousStart = Integer.parseInt(request.optString("previousStart"));
                }
            }
            int count=0;
            invoiceRequestParams.put("isBadDebtInvoices",!StringUtil.isNullOrEmpty(request.optString("isBadDebtInvoices"))?Boolean.parseBoolean(request.optString("isBadDebtInvoices")):false);
            invoiceRequestParams.put("ignorezero",!StringUtil.isNullOrEmpty(request.optString("ignorezero"))? Boolean.parseBoolean(request.optString("ignorezero")) : false);
            invoiceRequestParams.put("report",!StringUtil.isNullOrEmpty(request.optString("report"))? Boolean.parseBoolean(request.optString("report")) : false);
            invoiceRequestParams.put("isSOA",!StringUtil.isNullOrEmpty(request.optString("isSOA"))? (Boolean) request.optBoolean("isSOA") : false);
            invoiceRequestParams.put("oneDayBeforeCal1",oneDayBeforeCal1);
            invoiceRequestParams.put("cal1",cal1);
            invoiceRequestParams.put("cal2",cal2);
            invoiceRequestParams.put("cal3",cal3);
            invoiceRequestParams.put("cal4",cal4);
            invoiceRequestParams.put("cal5",cal5);
            invoiceRequestParams.put("cal6",cal6);
            invoiceRequestParams.put("cal7",cal7);
            invoiceRequestParams.put("cal8",cal8);
            invoiceRequestParams.put("cal9",cal9);
            invoiceRequestParams.put("cal10",cal10);
            invoiceRequestParams.put("onlyamountdue",!StringUtil.isNullOrEmpty(request.optString("onlyamountdue")) ? Boolean.parseBoolean(request.optString("onlyamountdue")) : false);
            invoiceRequestParams.put("globalCurrencyID", AccountingManager.getGlobalCurrencyid(request));
            invoiceRequestParams.put("requestCompanyID",AccountingManager.getCompanyid(request));
            for (Object[] oj : customerList) {
                String custid = oj[0].toString();
                
                invoiceRequestParams.put(Constants.customerid, custid);
                invoiceRequestParams.put("accid", custid);
                invoiceRequestParams.put("cntype", null);
                invoiceRequestParams.put("isAgedSummary", true);
                if(isAgedReceivables){
                    invoiceRequestParams.put("isAgedReceivables", true);
                }
                
                JSONArray invjarr = new JSONArray();
                KwlReturnObject result = accInvoiceDAOobj.getInvoicesMerged(invoiceRequestParams);
                List list = result.getEntityList();

                if (!list.isEmpty() || request.optString("filename") != null) {
                    invjarr = getInvoiceJsonForAgedReceivables(request, list, invjarr,invoiceRequestParams);
                }
                JSONArray OBJArryInvoice = new JSONArray();
                result = accInvoiceDAOobj.getOpeningBalanceInvoices(invoiceRequestParams);
                if (result.getRecordTotalCount() > 0) {
                    OBJArryInvoice = AccInvoiceServiceHandler.getAgedOpeningBalanceInvoiceJson(invoiceRequestParams, result.getEntityList(), OBJArryInvoice, accCurrencyDAOobj, accInvoiceCommon, request, accountingHandlerDAOobj,accAccountDAOobj,fieldDataManagercntrl,accJournalEntryobj);
                    for (int i = 0; i < OBJArryInvoice.length(); i++) {
                        invjarr.put(OBJArryInvoice.get(i));
                    }
                }

                if (!templatesubtype.equals(Constants.TEMPLATE_SUBTYPE_SOI)) {
                    JSONArray OBJArryDebitNote = new JSONArray();
                    result = accDebitNoteobj.getOpeningBalanceCustomerDNs(invoiceRequestParams);
                    if (result.getRecordTotalCount() > 0) {
                    OBJArryDebitNote = AccInvoiceServiceHandler.getAgedOpeningBalanceDebitNoteJson(invoiceRequestParams, result.getEntityList(), OBJArryDebitNote, accCurrencyDAOobj, accReceiptDAOobj, request, accountingHandlerDAOobj,accAccountDAOobj,fieldDataManagercntrl,accJournalEntryobj,accCreditNoteDAOobj);
                        for (int i = 0; i < OBJArryDebitNote.length(); i++) {
                            invjarr.put(OBJArryDebitNote.get(i));
                        }
                    }
                }

                if (!templatesubtype.equals(Constants.TEMPLATE_SUBTYPE_SOI)) {
                    JSONArray OBJArryCreditNote = new JSONArray();
                    result = accCreditNoteDAOobj.getOpeningBalanceCNs(invoiceRequestParams);
                    if (result.getRecordTotalCount() > 0) {
                    OBJArryCreditNote = AccInvoiceServiceHandler.getAgedOpeningBalanceCreditNoteJson(invoiceRequestParams, result.getEntityList(), OBJArryCreditNote, accCurrencyDAOobj, accPaymentDAOobj, request, accountingHandlerDAOobj, accCreditNoteDAOobj,accAccountDAOobj,fieldDataManagercntrl,accJournalEntryobj);
                        for (int i = 0; i < OBJArryCreditNote.length(); i++) {
                            invjarr.put(OBJArryCreditNote.get(i));
                        }
                    }
                }

                if (!templatesubtype.equals(Constants.TEMPLATE_SUBTYPE_SOI)) {
                    JSONArray OBJArryPayment = new JSONArray();
                    result = accReceiptDAOobj.getOpeningBalanceReceipts(invoiceRequestParams);
                    if (result.getRecordTotalCount() > 0) {
                        OBJArryPayment = AccInvoiceServiceHandler.getAgedOpeningBalanceReceiptJson(invoiceRequestParams, result.getEntityList(), OBJArryPayment, accCurrencyDAOobj, accReceiptDAOobj, request, accountingHandlerDAOobj, accAccountDAOobj, fieldDataManagercntrl, accJournalEntryobj);
                        for (int i = 0; i < OBJArryPayment.length(); i++) {
                            invjarr.put(OBJArryPayment.get(i));
                        }
                    }
                }

                if (!templatesubtype.equals(Constants.TEMPLATE_SUBTYPE_SOI)) {
                    JSONArray CreditNotejArr = new JSONArray();
                    result = accCreditNoteDAOobj.getCreditNoteMerged(invoiceRequestParams);
                    if (result.getRecordTotalCount() > 0) {
                        CreditNotejArr = AccInvoiceServiceHandler.getCreditNotesMergedJson(invoiceRequestParams, result.getEntityList(), CreditNotejArr, accountingHandlerDAOobj, authHandlerDAOObj, accCurrencyDAOobj, accPaymentDAOobj, request, accCreditNoteDAOobj, accAccountDAOobj, fieldDataManagercntrl, accJournalEntryobj);
                        for (int i = 0; i < CreditNotejArr.length(); i++) {
                            invjarr.put(CreditNotejArr.get(i));
                        }
                    }
                }

                if (!templatesubtype.equals(Constants.TEMPLATE_SUBTYPE_SOI)) {
                    invoiceRequestParams.put("cntype", 4);
                    JSONArray DebitNotejArr = new JSONArray();//This is used for getting DN gainst vendor and otherwise 
                    result = accDebitNoteobj.getDebitNoteMerged(invoiceRequestParams);
                    if (result.getRecordTotalCount() > 0) {
                        DebitNotejArr = AccInvoiceServiceHandler.getDebitNotesMergedJson(invoiceRequestParams, result.getEntityList(), DebitNotejArr, accountingHandlerDAOobj, authHandlerDAOObj, accCurrencyDAOobj, accReceiptDAOobj, request, accAccountDAOobj, fieldDataManagercntrl, accJournalEntryobj, accCreditNoteDAOobj);
                        for (int i = 0; i < DebitNotejArr.length(); i++) {
                            invjarr.put(DebitNotejArr.get(i));
                        }
                    }
                    invoiceRequestParams.remove("cntype");
                }

                if (!templatesubtype.equals(Constants.TEMPLATE_SUBTYPE_SOI)) {
                    JSONArray receivePaymentJArr = new JSONArray();
                    invoiceRequestParams.put("allAdvPayment", true); // needs only advance type record so that putted true
                    invoiceRequestParams.put("paymentWindowType", 1);//Receipt to Customer record
                    result = accReceiptDAOobj.getReceipts(invoiceRequestParams);
                    if (result.getRecordTotalCount() > 0) {
                        receivePaymentJArr = AccInvoiceServiceHandler.getReceiptsJson(invoiceRequestParams, result.getEntityList(), receivePaymentJArr, accountingHandlerDAOobj, authHandlerDAOObj, accCurrencyDAOobj, accReceiptDAOobj, request,accAccountDAOobj,fieldDataManagercntrl,accJournalEntryobj);
                        for (int i = 0; i < receivePaymentJArr.length(); i++) {
                            invjarr.put(receivePaymentJArr.get(i));
                        }
                    }
                }
                if (!templatesubtype.equals(Constants.TEMPLATE_SUBTYPE_SOI)) {

                    if (!isAgedReceivables && isCurrencyDetails) { //need to put isAgedReceivables for this condition
                        invoiceRequestParams.put("isAgedReceivables", true);
                    }

                    invoiceRequestParams.put("allAdvPayment", true); // needs only advance  type record so that putted true
                    invoiceRequestParams.put("paymentWindowType", 2);//Receipt to Vendor record
                    JSONArray makePaymentJArr = new JSONArray();
                    result = accVendorPaymentobj.getPayments(invoiceRequestParams);
                    if (result != null && result.getEntityList() != null && !result.getEntityList().isEmpty()) {
                        makePaymentJArr = accGoodsReceiptServiceHandler.getPaymentsJson(invoiceRequestParams, result.getEntityList(), makePaymentJArr, accCurrencyDAOobj, accountingHandlerDAOobj, accVendorPaymentobj);
                        for (int i = 0; i < makePaymentJArr.length(); i++) {
                            invjarr.put(makePaymentJArr.get(i));
                        }
                    }
                    invoiceRequestParams.remove("allAdvPayment");
                    invoiceRequestParams.remove("paymentWindowType");
                    if (!isAgedReceivables && isCurrencyDetails) { //need to remove isAgedReceivables for this condition as we have putted above
                        invoiceRequestParams.remove("isAgedReceivables");
                    }
                }
                boolean addFlag=true;
                if(invjarr.length()<1){ 
                    addFlag=false;
                }
                if(addFlag){
                amountdue1 = amountdue2 = amountdue3 = amountdue4 = amountdue5 = amountdue6 = amountdue7 = amountdue8 = amountdue9 = amountdue10 = amountdue11 = 0;
                amountdueinbase1 = amountdueinbase2 = amountdueinbase3 = amountdueinbase4 = amountdueinbase5 = amountdueinbase6 = amountdueinbase7 = amountdueinbase8 = amountdueinbase9 = amountdueinbase10 = amountdueinbase11 = 0;
                String personID = null;
                String personName = null;
                String aliasname = "";
                String amountdueInBase = null;
                String currencySymbol = null;
                String currencyid = null;
                String currencyName = null;
                boolean isCN = false;
                boolean isRP = false;
                String currencyidCust = oj[1].toString();  // Vendor Account Currency ID
                String currencySymbolCust = oj[3].toString(); // Vendor Account Currency Name
                String currencyNameCust = oj[2].toString(); // Vendor Account Currency Symbol
                String custCurrId = oj[4].toString();  // Vendor Currency ID
                
                if (!isCurrencyDetails) {
                    for (int i = 0; i < invjarr.length(); i++) {
                        JSONObject invobj = invjarr.getJSONObject(i);
                        personID = (invobj.has(InvoiceConstants.personid)) ? invobj.getString(InvoiceConstants.personid) : "";
                        personName = (invobj.has(InvoiceConstants.personname)) ? invobj.getString(InvoiceConstants.personname) : "";
                        aliasname = (invobj.has(InvoiceConstants.aliasname)) ? invobj.getString(InvoiceConstants.aliasname) : "";
                        amountdueInBase = invobj.getString(InvoiceConstants.amountdueinbase);
                        currencySymbol = (invobj.has(InvoiceConstants.currencysymbol)) ? invobj.getString(InvoiceConstants.currencysymbol) : "";
                        currencyid = (invobj.has(Constants.currencyKey)) ? invobj.getString(Constants.currencyKey) : "";
                        currencyName = (invobj.has(InvoiceConstants.currencyname)) ? invobj.getString(InvoiceConstants.currencyname) : "";
                        isCN = invobj.has("isCN") ? invobj.getBoolean("isCN") : false;
                        isRP = invobj.has("isRP") ? invobj.getBoolean("isRP") : false;
                        Date dueDate = new Date();
                        if (datefilter == 0 ||  datefilter == Constants.agedDueDate0to30Filter) {
                            dueDate = authHandler.getDateOnlyFormat( ).parse(invobj.getString(Constants.duedate));
                        } else {
                            dueDate = authHandler.getDateOnlyFormat( ).parse(invobj.getString("date"));
                        }
                        double amountdue = invobj.getDouble("amountdue");
                        double amountdueinbase = invobj.getDouble(InvoiceConstants.amountdueinbase);

                        boolean isopeningBalanceTransaction = invobj.optBoolean("isOpeningBalanceTransaction", false);
                        boolean isConversionRateFromCurrencyToBase = invobj.optBoolean("isConversionRateFromCurrencyToBase", false);

                        double externalcurrencyrate = invobj.getDouble("externalcurrencyrate"); 
                        
                        KwlReturnObject bAmt = null;
                        Date date=null;
                        if(!invobj.getString("date").equals("")){
                            date=df.parse(invobj.getString("date"));
                        }
                        if (isCustomerCurrExport) {

                            double custCurrToBaseExchRate = 1 / accCurrencyDAOobj.getCurrencyToBaseRate(invoiceRequestParams, custCurrId, dueDate);
                            if (accCurrencyDAOobj.getCurrencyToBaseRate(invoiceRequestParams, custCurrId, dueDate) == 0.0) {
                                custCurrToBaseExchRate = externalcurrencyrate;
                            }
                            if (gCurrencyId.equals(custCurrId)) {
                                custCurrToBaseExchRate = 1;
                            } else if (currencyid.equals(custCurrId)) {
                                custCurrToBaseExchRate = 1 / externalcurrencyrate;
                            }
                            if (isopeningBalanceTransaction && isConversionRateFromCurrencyToBase) {
                                custCurrToBaseExchRate = 1 / custCurrToBaseExchRate;
                            }

                            KwlReturnObject CustCurrencyTotalAmount = accCurrencyDAOobj.getBaseToCurrencyAmountAccordingToCurrencyToBaseExchangeRate(invoiceRequestParams, amountdueinbase, custCurrId, dueDate, custCurrToBaseExchRate);
                            amountdueinbase = (Double) CustCurrencyTotalAmount.getEntityList().get(0);  //Amount In Vendor Currency.

                        } else {

                            if (isopeningBalanceTransaction && isConversionRateFromCurrencyToBase) {// if Transaction is opening balance Transaction and Conversion rate is taken from user is Currency to base then following method will be called.
                                bAmt = accCurrencyDAOobj.getOneCurrencyToOtherModifiedAccordingToCurrencyToBaseExchangeRate(invoiceRequestParams, amountdue, currencyid, currencyidCust, date, invobj.getDouble("externalcurrencyrate"));
                            } else {
                                bAmt = accCurrencyDAOobj.getOneCurrencyToOtherModified(invoiceRequestParams, amountdue, currencyid, currencyidCust, date, invobj.getDouble("externalcurrencyrate"));
                            }
                            amountdue = authHandler.round((Double) bAmt.getEntityList().get(0), companyid);
                        }
                        if (isCN || isRP) {
                            if (!isopeningBalanceTransaction) {
                                amountdueinbase = -amountdueinbase;
                                amountdue = -amountdue;
                            }
                        }

                        if (customizedSumryReportFlag) {
                            if ((dueDate.after(customizeSumryTo1Date) || dueDate.equals(customizeSumryTo1Date)) && (dueDate.before(customizeSumryFrom1Date) || dueDate.equals(customizeSumryFrom1Date))) {
                                amountdue1 += amountdue;
                                amountdueinbase1 += amountdueinbase;
                            } else if ((dueDate.after(customizeSumryTo2Date) || dueDate.equals(customizeSumryTo2Date)) && (dueDate.before(customizeSumryFrom2Date) || dueDate.equals(customizeSumryFrom2Date))) {
                                amountdue2 += amountdue;
                                amountdueinbase2 += amountdueinbase;
                            } else if ((dueDate.after(customizeSumryTo3Date) || dueDate.equals(customizeSumryTo3Date)) && (dueDate.before(customizeSumryFrom3Date) || dueDate.equals(customizeSumryFrom3Date))) {
                                amountdue3 += amountdue;
                                amountdueinbase3 += amountdueinbase;
                            } else if ((dueDate.after(customizeSumryTo4Date) || dueDate.equals(customizeSumryTo4Date)) && (dueDate.before(customizeSumryFrom4Date) || dueDate.equals(customizeSumryFrom4Date))) {
                                amountdue4 += amountdue;
                                amountdueinbase4 += amountdueinbase;
                            } else if ((dueDate.after(customizeSumryTo5Date) || dueDate.equals(customizeSumryTo5Date)) && (dueDate.before(customizeSumryFrom5Date) || dueDate.equals(customizeSumryFrom5Date))) {
                                amountdue5 += amountdue;
                                amountdueinbase5 += amountdueinbase;
                            } else if ((dueDate.after(customizeSumryTo6Date) || dueDate.equals(customizeSumryTo6Date)) && (dueDate.before(customizeSumryFrom6Date) || dueDate.equals(customizeSumryFrom6Date))) {
                                amountdue6 += amountdue;
                                amountdueinbase6 += amountdueinbase;
                            } else if ((dueDate.after(customizeSumryTo7Date) || dueDate.equals(customizeSumryTo7Date)) && (dueDate.before(customizeSumryFrom7Date) || dueDate.equals(customizeSumryFrom7Date))) {
                                amountdue7 += amountdue;
                                amountdueinbase7 += amountdueinbase;
                            }

                        } else {
                            if (isdistibutive) {
//                                if (startDate != null && dueDate.before(startDate)) {
//                                    accruedbalanceinbase += amountdueinbase;
//                                    accruedbalance += amountdue;
//                                } else
                                if (dueDate.after(oneDayBeforeCal1Date)) {
                                    if (dueDate.equals(cal1Date) && (datefilter == Constants.agedDueDate0to30Filter || datefilter == Constants.agedInvoiceDate0to30Filter)) {
                                        amountdueinbase2 += amountdueinbase;
                                        amountdue2 += amountdue;
                                    } else {
                                        amountdueinbase1 += amountdueinbase;
                                        amountdue1 += amountdue;
                                    }
                                } else if ((cal2Date.before(dueDate) || cal2Date.equals(dueDate)) && cal1Date.after(dueDate)) {
                                    amountdueinbase2 += amountdueinbase;
                                    amountdue2 += amountdue;
                                } else if ((cal3Date.before(dueDate) || cal3Date.equals(dueDate)) && cal2Date.after(dueDate)) {
                                    amountdueinbase3 += amountdueinbase;
                                    amountdue3 += amountdue;
                                } else if ((cal4Date.before(dueDate) || cal4Date.equals(dueDate)) && cal3Date.after(dueDate)) {
                                    amountdueinbase4 += amountdueinbase;
                                    amountdue4 += amountdue;
                                } else if ((cal5Date.before(dueDate) || cal5Date.equals(dueDate)) && cal4Date.after(dueDate)) {
                                    amountdueinbase5 += amountdueinbase;
                                    amountdue5 += amountdue;
                                } else if ((cal6Date.before(dueDate) || cal6Date.equals(dueDate)) && cal5Date.after(dueDate)) {
                                    amountdueinbase6 += amountdueinbase;
                                    amountdue6 += amountdue;
                                } else if ((cal7Date.before(dueDate) || cal7Date.equals(dueDate)) && cal6Date.after(dueDate)) {
                                    amountdueinbase7 += amountdueinbase;
                                    amountdue7 += amountdue;
                                } else if ((cal8Date.before(dueDate) || cal8Date.equals(dueDate)) && cal7Date.after(dueDate)) {
                                    amountdueinbase8 += amountdueinbase;
                                    amountdue8 += amountdue;
                                } else if ((cal9Date.before(dueDate) || cal9Date.equals(dueDate)) && cal8Date.after(dueDate)) {
                                    amountdueinbase9 += amountdueinbase;
                                    amountdue9 += amountdue;
                                } else if ((cal10Date.before(dueDate) || cal10Date.equals(dueDate)) && cal9Date.after(dueDate)) {
                                    amountdueinbase10 += amountdueinbase;
                                    amountdue10 += amountdue;
                                } else {
                                    amountdueinbase11 += amountdueinbase;
                                    amountdue11 += amountdue;
                                }
                                
                                switch(noOfInterval){
                                    case 2:
                                        amountdue3 += amountdue4 + amountdue5 + amountdue6 + amountdue7 + amountdue8 + amountdue9 + amountdue10 + amountdue11;
                                        amountdue4 = amountdue5 = amountdue6 = amountdue7 = amountdue8 = amountdue9 = amountdue10 = amountdue11 = 0;
                                        amountdueinbase3 += amountdueinbase4 + amountdueinbase5 + amountdueinbase6 + amountdueinbase7 + amountdueinbase8 + amountdueinbase9 + amountdueinbase10 + amountdueinbase11;
                                        amountdueinbase4 = amountdueinbase5 = amountdueinbase6 = amountdueinbase7 = amountdueinbase8 = amountdueinbase9 = amountdueinbase10 = amountdueinbase11 = 0;
                                        break;
                                    case 3:
                                        amountdue4 += amountdue5 + amountdue6 + amountdue7 + amountdue8 + amountdue9 + amountdue10 + amountdue11;
                                        amountdue5 = amountdue6 = amountdue7 = amountdue8 = amountdue9 = amountdue10 = amountdue11 = 0;
                                        amountdueinbase4 += amountdueinbase5 + amountdueinbase6 + amountdueinbase7 + amountdueinbase8 + amountdueinbase9 + amountdueinbase10 + amountdueinbase11;
                                        amountdueinbase5 = amountdueinbase6 = amountdueinbase7 = amountdueinbase8 = amountdueinbase9 = amountdueinbase10 = amountdueinbase11 = 0;
                                        break;
                                    case 4:
                                        amountdue5 += amountdue6 + amountdue7 + amountdue8 + amountdue9 + amountdue10 + amountdue11;
                                        amountdue6 = amountdue7 = amountdue8 = amountdue9 = amountdue10 = amountdue11 = 0;
                                        amountdueinbase5 += amountdueinbase6 + amountdueinbase7 + amountdueinbase8 + amountdueinbase9 + amountdueinbase10 + amountdueinbase11;
                                        amountdueinbase6 = amountdueinbase7 = amountdueinbase8 = amountdueinbase9 = amountdueinbase10 = amountdueinbase11 = 0;
                                        break;
                                    case 5:
                                        amountdue6 += amountdue7 + amountdue8 + amountdue9 + amountdue10 + amountdue11;
                                        amountdue7 = amountdue8 = amountdue9 = amountdue10 = amountdue11 = 0;
                                        amountdueinbase6 += amountdueinbase7 + amountdueinbase8 + amountdueinbase9 + amountdueinbase10 + amountdueinbase11;
                                        amountdueinbase7 = amountdueinbase8 = amountdueinbase9 = amountdueinbase10 = amountdueinbase11 = 0;
                                        break;
                                    case 6:
                                        amountdue7 += amountdue8 + amountdue9 + amountdue10 + amountdue11;
                                        amountdue8 = amountdue9 = amountdue10 = amountdue11 = 0;
                                        amountdueinbase7 += amountdueinbase8 + amountdueinbase9 + amountdueinbase10 + amountdueinbase11;
                                        amountdueinbase8 = amountdueinbase9 = amountdueinbase10 = amountdueinbase11 = 0;
                                        break;
                                    case 7:
                                        amountdue8 += amountdue9 + amountdue10 + amountdue11;
                                        amountdue9 = amountdue10 = amountdue11 = 0;
                                        amountdueinbase8 += amountdueinbase9 + amountdueinbase10 + amountdueinbase11;
                                        amountdueinbase9 = amountdueinbase10 = amountdueinbase11 = 0;
                                        break;
                                    case 8:
                                        amountdue9 += amountdue10 + amountdue11;
                                        amountdue10 = amountdue11 = 0;
                                        amountdueinbase9 += amountdueinbase10 + amountdueinbase11;
                                        amountdueinbase10 = amountdueinbase11 = 0;
                                        break;
                                    case 9:
                                        amountdue10 += amountdue11;
                                        amountdue11 = 0;
                                        amountdueinbase10 += amountdueinbase11;
                                        amountdueinbase11 = 0;
                                        break;
                                }
                                
                            } else {
//                                if (startDate != null && dueDate.before(startDate)) {
//                                    accruedbalanceinbase += amountdueinbase;
//                                    accruedbalance += amountdue;
//                                } else 
                                if (dueDate.after(oneDayBeforeCal1Date) && (dueDate.before(cal1Date) || dueDate.equals(cal1Date))) {
                                    amountdueinbase1 += amountdueinbase;
                                    amountdue1 += amountdue;
                                } else if (dueDate.after(cal2Date) || dueDate.equals(cal2Date)) {
                                    amountdueinbase2 += amountdueinbase;
                                    amountdue2 += amountdue;
                                } else if (dueDate.after(cal3Date) || dueDate.equals(cal3Date)) {
                                    amountdueinbase3 += amountdueinbase;
                                    amountdue3 += amountdue;
                                } else {
                                    amountdueinbase4 += amountdueinbase;
                                    amountdue4 += amountdue;
                                }
                            }
                        }
                    }
                    if (invjarr.length() > 0) {
                        jObj = new JSONObject();
                        jObj.put(InvoiceConstants.personid, personID);
                        jObj.put(InvoiceConstants.amountdueinbase, amountdueInBase);
                        jObj.put(InvoiceConstants.personname, personName);
                        jObj.put(InvoiceConstants.aliasname, aliasname);
                        if (!customizedSumryReportFlag) {
                            jObj.put("amountdue1", Double.valueOf(authHandler.formattedAmount(amountdue1, companyid)));
                            jObj.put("amountdue2", Double.valueOf(authHandler.formattedAmount(amountdue2, companyid)));
                            jObj.put("amountdue3", Double.valueOf(authHandler.formattedAmount(amountdue3, companyid)));
                            jObj.put("amountdue4", Double.valueOf(authHandler.formattedAmount(amountdue4, companyid)));
                            jObj.put("amountdue5", Double.valueOf(authHandler.formattedAmount(amountdue5, companyid)));
                            jObj.put("amountdue6", Double.valueOf(authHandler.formattedAmount(amountdue6, companyid)));
                            jObj.put("amountdue7", Double.valueOf(authHandler.formattedAmount(amountdue7, companyid)));
                            jObj.put("amountdue8", Double.valueOf(authHandler.formattedAmount(amountdue8, companyid)));
                            jObj.put("amountdue9", Double.valueOf(authHandler.formattedAmount(amountdue9, companyid)));
                            jObj.put("amountdue10", Double.valueOf(authHandler.formattedAmount(amountdue10, companyid)));
                            jObj.put("amountdue11", Double.valueOf(authHandler.formattedAmount(amountdue11, companyid)));
//                            jObj.put(InvoiceConstants.ACCRUEDBALANCE, Double.valueOf(authHandler.formattedAmount(accruedbalance, companyid)));

                        } else {
                            if (amountDueMap.containsKey("amountdue1")) {
                                jObj.put(amountDueMap.get("amountdue1"), Double.valueOf(authHandler.formattedAmount(amountdue1, companyid)));
                            }
                            if (amountDueMap.containsKey("amountdue2")) {
                                jObj.put(amountDueMap.get("amountdue2"), Double.valueOf(authHandler.formattedAmount(amountdue2, companyid)));
                            }
                            if (amountDueMap.containsKey("amountdue3")) {
                                jObj.put(amountDueMap.get("amountdue3"), Double.valueOf(authHandler.formattedAmount(amountdue3, companyid)));
                            }
                            if (amountDueMap.containsKey("amountdue4")) {
                                jObj.put(amountDueMap.get("amountdue4"), Double.valueOf(authHandler.formattedAmount(amountdue4, companyid)));
                            }
                            if (amountDueMap.containsKey("amountdue5")) {
                                jObj.put(amountDueMap.get("amountdue5"), Double.valueOf(authHandler.formattedAmount(amountdue5, companyid)));
                            }
                            if (amountDueMap.containsKey("amountdue6")) {
                                jObj.put(amountDueMap.get("amountdue6"), Double.valueOf(authHandler.formattedAmount(amountdue6, companyid)));
                            }
                            if (amountDueMap.containsKey("amountdue7")) {
                                jObj.put(amountDueMap.get("amountdue7"), Double.valueOf(authHandler.formattedAmount(amountdue7, companyid)));
                            }
                            if (amountDueMap.containsKey("amountdue8")) {
                                jObj.put(amountDueMap.get("amountdue8"), Double.valueOf(authHandler.formattedAmount(amountdue8, companyid)));
                            }
                        }
                        jObj.put("amountdueinbase1", Double.valueOf(authHandler.formattedAmount(amountdueinbase1, companyid)));
                        jObj.put("amountdueinbase2", Double.valueOf(authHandler.formattedAmount(amountdueinbase2, companyid)));
                        jObj.put("amountdueinbase3", Double.valueOf(authHandler.formattedAmount(amountdueinbase3, companyid)));
                        jObj.put("amountdueinbase4", Double.valueOf(authHandler.formattedAmount(amountdueinbase4, companyid)));
                        jObj.put("amountdueinbase5", Double.valueOf(authHandler.formattedAmount(amountdueinbase5, companyid)));
                        jObj.put("amountdueinbase6", Double.valueOf(authHandler.formattedAmount(amountdueinbase6, companyid)));
                        jObj.put("amountdueinbase7", Double.valueOf(authHandler.formattedAmount(amountdueinbase7, companyid)));
                        jObj.put("amountdueinbase8", Double.valueOf(authHandler.formattedAmount(amountdueinbase8, companyid)));
                        jObj.put("amountdueinbase9", Double.valueOf(authHandler.formattedAmount(amountdueinbase9, companyid)));
                        jObj.put("amountdueinbase10", Double.valueOf(authHandler.formattedAmount(amountdueinbase10, companyid)));
                        jObj.put("amountdueinbase11", Double.valueOf(authHandler.formattedAmount(amountdueinbase11, companyid)));
//                        jObj.put("accruedbalanceinbase", Double.valueOf(authHandler.formattedAmount(accruedbalanceinbase, companyid)));
                        jObj.put(InvoiceConstants.currencysymbol, currencySymbolCust);
                        jObj.put(Constants.currencyKey, currencyidCust);
                        jObj.put(InvoiceConstants.currencyname, currencyNameCust);
                        double amountdue = Double.valueOf(authHandler.formattedAmount((amountdue1 + amountdue2 + amountdue3 + amountdue4 + amountdue5 + amountdue6 + amountdue7 + amountdue8 + amountdue9 + amountdue10 + amountdue11), companyid));
                        jObj.put("total", amountdue);
                        double amountdueinbase = Double.valueOf(authHandler.formattedAmount((amountdueinbase1 + amountdueinbase2 + amountdueinbase3 + amountdueinbase4 + amountdueinbase5 + amountdueinbase6 + amountdueinbase7 + amountdueinbase8 + amountdueinbase9 + amountdueinbase10 + amountdueinbase11), companyid));
                        jObj.put("totalinbase", amountdueinbase);
                        totalinbase+=amountdueinbase;
                        if(!checkForEx && !StringUtil.isNullOrEmpty(start)){
                        if ((previousStart > Integer.parseInt(start))) {
                            if (skipRecords < Integer.parseInt(start)) {
                                skipRecords++;
                                continue;
                            }
                            if (firstCustomerId.equals(custid)) {
                                break;
                            }
                        } else if ((previousStart < (Integer.parseInt(start))+1)) {
                            if (skipRecords < (Integer.parseInt(start))+1) {
                                skipRecords++;
                                continue;
                            }
                        }
                        if(customizedSumryReportFlag && !showCustVendorWithZeroAmounts && amountdue==0){
                            continue;
                        }
                        count++;
                        if (count != limit) {
                            jArr.put(jObj);
                        }
                        if (count == 1) {
                            firstCustomerId = custid.toString();
                            jObj.put("fCustomerId", firstCustomerId);
                        }
                        if (count == limit) {
                            lastCustomerId = custid.toString();
                            jObj.put("customerId", lastCustomerId);
                            jObj.put(Constants.start, start);
                            jArr.put(jObj);
                            break;
                        }
                    }else{
                            if(customizedSumryReportFlag && !showCustVendorWithZeroAmounts && amountdue==0){
                                continue;
                            }
                              jArr.put(jObj);
                        }
                  }
                } 
                if(isCurrencyDetails || isdetailedXls){
                    JSONObject currencyObj = new JSONObject();
                    for (int i = 0; i < invjarr.length(); i++) {
                        amountdue1 = amountdue2 = amountdue3 = amountdue4 = amountdue5 = amountdue6 = amountdue7 = amountdue8 = amountdue9 = amountdue10 = amountdue11 = 0;
                        amountdueinbase1 = amountdueinbase2 = amountdueinbase3 = amountdueinbase4 = amountdueinbase5 = amountdueinbase6 = amountdueinbase7 = amountdueinbase8 = amountdueinbase9 = amountdueinbase10 = amountdueinbase11 = 0;
                        JSONObject invobj = invjarr.getJSONObject(i);
                        JSONObject putObj = new JSONObject();
                        if (i == 0) {
                            personID = (invobj.has(InvoiceConstants.personid)) ? invobj.getString(InvoiceConstants.personid) : "";
                            personName = (invobj.has(InvoiceConstants.personname)) ? invobj.getString(InvoiceConstants.personname) : "";
                            aliasname = (invobj.has(InvoiceConstants.aliasname)) ? invobj.getString(InvoiceConstants.aliasname) : "";
                            amountdueInBase = invobj.getString(InvoiceConstants.amountdueinbase);
                            currencySymbol = (invobj.has(InvoiceConstants.currencysymbol)) ? invobj.getString(InvoiceConstants.currencysymbol) : "";
                            currencyid = (invobj.has(Constants.currencyKey)) ? invobj.getString(Constants.currencyKey) : "";
                            currencyName = (invobj.has(InvoiceConstants.currencyname)) ? invobj.getString(InvoiceConstants.currencyname) : "";
                            isCN = invobj.has("isCN") ? invobj.getBoolean("isCN") : false;
                            isRP = invobj.has("isRP") ? invobj.getBoolean("isRP") : false;
                            Date dueDate = new Date();
                            if (datefilter == 0 || datefilter == Constants.agedDueDate0to30Filter) {
                                dueDate = authHandler.getDateOnlyFormat( ).parse(invobj.getString(Constants.duedate));
                            } else {
                                dueDate = authHandler.getDateOnlyFormat( ).parse(invobj.getString("date"));
                            }
                            double amountdue = invobj.getDouble("amountdue");
                            double amountdueinbase = invobj.getDouble(InvoiceConstants.amountdueinbase);
                            boolean isopeningBalanceTransaction = invobj.optBoolean("isOpeningBalanceTransaction", false);
                            if (isCN || isRP) {
                                if (!isopeningBalanceTransaction) {
                                    amountdueinbase = -amountdueinbase;
                                    amountdue = -amountdue;
                                }
                            }

                            if (customizedSumryReportFlag) {
                                if ((dueDate.after(customizeSumryTo1Date) || dueDate.equals(customizeSumryTo1Date)) && (dueDate.before(customizeSumryFrom1Date) || dueDate.equals(customizeSumryFrom1Date))) {
                                    amountdue1 += amountdue;
                                    amountdueinbase1 += amountdueinbase;
                                } else if ((dueDate.after(customizeSumryTo2Date) || dueDate.equals(customizeSumryTo2Date)) && (dueDate.before(customizeSumryFrom2Date) || dueDate.equals(customizeSumryFrom2Date))) {
                                    amountdue2 += amountdue;
                                    amountdueinbase2 += amountdueinbase;
                                } else if ((dueDate.after(customizeSumryTo3Date) || dueDate.equals(customizeSumryTo3Date)) && (dueDate.before(customizeSumryFrom3Date) || dueDate.equals(customizeSumryFrom3Date))) {
                                    amountdue3 += amountdue;
                                    amountdueinbase3 += amountdueinbase;
                                } else if ((dueDate.after(customizeSumryTo4Date) || dueDate.equals(customizeSumryTo4Date)) && (dueDate.before(customizeSumryFrom4Date) || dueDate.equals(customizeSumryFrom4Date))) {
                                    amountdue4 += amountdue;
                                    amountdueinbase4 += amountdueinbase;
                                } else if ((dueDate.after(customizeSumryTo5Date) || dueDate.equals(customizeSumryTo5Date)) && (dueDate.before(customizeSumryFrom5Date) || dueDate.equals(customizeSumryFrom5Date))) {
                                    amountdue5 += amountdue;
                                    amountdueinbase5 += amountdueinbase;
                                } else if ((dueDate.after(customizeSumryTo6Date) || dueDate.equals(customizeSumryTo6Date)) && (dueDate.before(customizeSumryFrom6Date) || dueDate.equals(customizeSumryFrom6Date))) {
                                    amountdue6 += amountdue;
                                    amountdueinbase6 += amountdueinbase;
                                } else if ((dueDate.after(customizeSumryTo7Date) || dueDate.equals(customizeSumryTo7Date)) && (dueDate.before(customizeSumryFrom7Date) || dueDate.equals(customizeSumryFrom7Date))) {
                                    amountdue7 += amountdue;
                                    amountdueinbase7 += amountdueinbase;
                                }

                            } else {
                         
                                if (isdistibutive) {
//                                    if (startDate != null && dueDate.before(startDate)) {
//                                        accruedbalanceinbase += amountdueinbase;
//                                        accruedbalance += amountdue;
//                                    } else
                                    if (dueDate.after(oneDayBeforeCal1Date)) {
                                        if (dueDate.equals(cal1Date) && (datefilter == Constants.agedDueDate0to30Filter || datefilter == Constants.agedInvoiceDate0to30Filter)) {
                                            amountdueinbase2 += amountdueinbase;
                                            amountdue2 += amountdue;
                                        } else {
                                            amountdueinbase1 += amountdueinbase;
                                            amountdue1 += amountdue;
                                        }
                                    } else if ((cal2Date.before(dueDate) || cal2Date.equals(dueDate)) && cal1Date.after(dueDate)) {
                                        amountdueinbase2 += amountdueinbase;
                                        amountdue2 += amountdue;
                                    } else if ((cal3Date.before(dueDate) || cal3Date.equals(dueDate)) && cal2Date.after(dueDate)) {
                                        amountdueinbase3 += amountdueinbase;
                                        amountdue3 += amountdue;
                                    } else if ((cal4Date.before(dueDate) || cal4Date.equals(dueDate)) && cal3Date.after(dueDate)) {
                                        amountdueinbase4 += amountdueinbase;
                                        amountdue4 += amountdue;
                                    } else if ((cal5Date.before(dueDate) || cal5Date.equals(dueDate)) && cal4Date.after(dueDate)) {
                                        amountdueinbase5 += amountdueinbase;
                                        amountdue5 += amountdue;
                                    } else if ((cal6Date.before(dueDate) || cal6Date.equals(dueDate)) && cal5Date.after(dueDate)) {
                                        amountdueinbase6 += amountdueinbase;
                                        amountdue6 += amountdue;
                                    } else if ((cal7Date.before(dueDate) || cal7Date.equals(dueDate)) && cal6Date.after(dueDate)) {
                                        amountdueinbase7 += amountdueinbase;
                                        amountdue7 += amountdue;
                                    } else if ((cal8Date.before(dueDate) || cal8Date.equals(dueDate)) && cal7Date.after(dueDate)) {
                                        amountdueinbase8 += amountdueinbase;
                                        amountdue8 += amountdue;
                                    } else if ((cal9Date.before(dueDate) || cal9Date.equals(dueDate)) && cal8Date.after(dueDate)) {
                                        amountdueinbase9 += amountdueinbase;
                                        amountdue9 += amountdue;
                                    } else if ((cal10Date.before(dueDate) || cal10Date.equals(dueDate)) && cal9Date.after(dueDate)) {
                                        amountdueinbase10 += amountdueinbase;
                                        amountdue10 += amountdue;
                                    } else {
                                        amountdueinbase11 += amountdueinbase;
                                        amountdue11 += amountdue;
                                    }
                                    
                                    switch(noOfInterval){
                                        case 2:
                                            amountdue3 += amountdue4 + amountdue5 + amountdue6 + amountdue7 + amountdue8 + amountdue9 + amountdue10 + amountdue11;
                                            amountdue4 = amountdue5 = amountdue6 = amountdue7 = amountdue8 = amountdue9 = amountdue10 = amountdue11 = 0;
                                            amountdueinbase3 += amountdueinbase4 + amountdueinbase5 + amountdueinbase6 + amountdueinbase7 + amountdueinbase8 + amountdueinbase9 + amountdueinbase10 + amountdueinbase11;
                                            amountdueinbase4 = amountdueinbase5 = amountdueinbase6 = amountdueinbase7 = amountdueinbase8 = amountdueinbase9 = amountdueinbase10 = amountdueinbase11 = 0;
                                            break;
                                        case 3:
                                            amountdue4 += amountdue5 + amountdue6 + amountdue7 + amountdue8 + amountdue9 + amountdue10 + amountdue11;
                                            amountdue5 = amountdue6 = amountdue7 = amountdue8 = amountdue9 = amountdue10 = amountdue11 = 0;
                                            amountdueinbase4 += amountdueinbase5 + amountdueinbase6 + amountdueinbase7 + amountdueinbase8 + amountdueinbase9 + amountdueinbase10 + amountdueinbase11;
                                            amountdueinbase5 = amountdueinbase6 = amountdueinbase7 = amountdueinbase8 = amountdueinbase9 = amountdueinbase10 = amountdueinbase11 = 0;
                                            break;
                                        case 4:
                                            amountdue5 += amountdue6 + amountdue7 + amountdue8 + amountdue9 + amountdue10 + amountdue11;
                                            amountdue6 = amountdue7 = amountdue8 = amountdue9 = amountdue10 = amountdue11 = 0;
                                            amountdueinbase5 += amountdueinbase6 + amountdueinbase7 + amountdueinbase8 + amountdueinbase9 + amountdueinbase10 + amountdueinbase11;
                                            amountdueinbase6 = amountdueinbase7 = amountdueinbase8 = amountdueinbase9 = amountdueinbase10 = amountdueinbase11 = 0;
                                            break;
                                        case 5:
                                            amountdue6 += amountdue7 + amountdue8 + amountdue9 + amountdue10 + amountdue11;
                                            amountdue7 = amountdue8 = amountdue9 = amountdue10 = amountdue11 = 0;
                                            amountdueinbase6 += amountdueinbase7 + amountdueinbase8 + amountdueinbase9 + amountdueinbase10 + amountdueinbase11;
                                            amountdueinbase7 = amountdueinbase8 = amountdueinbase9 = amountdueinbase10 = amountdueinbase11 = 0;
                                            break;
                                        case 6:
                                            amountdue7 += amountdue8 + amountdue9 + amountdue10 + amountdue11;
                                            amountdue8 = amountdue9 = amountdue10 = amountdue11 = 0;
                                            amountdueinbase7 += amountdueinbase8 + amountdueinbase9 + amountdueinbase10 + amountdueinbase11;
                                            amountdueinbase8 = amountdueinbase9 = amountdueinbase10 = amountdueinbase11 = 0;
                                            break;
                                        case 7:
                                            amountdue8 += amountdue9 + amountdue10 + amountdue11;
                                            amountdue9 = amountdue10 = amountdue11 = 0;
                                            amountdueinbase8 += amountdueinbase9 + amountdueinbase10 + amountdueinbase11;
                                            amountdueinbase9 = amountdueinbase10 = amountdueinbase11 = 0;
                                            break;
                                        case 8:
                                            amountdue9 += amountdue10 + amountdue11;
                                            amountdue10 = amountdue11 = 0;
                                            amountdueinbase9 += amountdueinbase10 + amountdueinbase11;
                                            amountdueinbase10 = amountdueinbase11 = 0;
                                            break;
                                        case 9:
                                            amountdue10 += amountdue11;
                                            amountdue11 = 0;
                                            amountdueinbase10 += amountdueinbase11;
                                            amountdueinbase11 = 0;
                                            break;
                                    }
                                    
                                } else {
//                                    if (startDate != null && dueDate.before(startDate)) {
//                                        accruedbalanceinbase += amountdueinbase;
//                                        accruedbalance += amountdue;
//                                    } else
                                    if (dueDate.after(oneDayBeforeCal1Date) && (dueDate.before(cal1Date) || dueDate.equals(cal1Date))) {
                                        amountdueinbase1 += amountdueinbase;
                                        amountdue1 += amountdue;
                                    } else if (dueDate.after(cal2Date) || dueDate.equals(cal2Date)) {
                                        amountdueinbase2 += amountdueinbase;
                                        amountdue2 += amountdue;
                                    } else if (dueDate.after(cal3Date) || dueDate.equals(cal3Date)) {
                                        amountdueinbase3 += amountdueinbase;
                                        amountdue3 += amountdue;
                                    } else {
                                        amountdueinbase4 += amountdueinbase;
                                        amountdue4 += amountdue;
                                    }
                                }
                            }
                            putObj.put(InvoiceConstants.personid, personID);
                            putObj.put(InvoiceConstants.personname, personName);
                            putObj.put(InvoiceConstants.aliasname, aliasname);
                            putObj.put(InvoiceConstants.currencysymbol, currencySymbol);
                            putObj.put(Constants.currencyKey, currencyid);
                            putObj.put(InvoiceConstants.currencyname, currencyName);
                            putObj.put("amountdue1", amountdue1);
                            putObj.put("amountdue2", amountdue2);
                            putObj.put("amountdue3", amountdue3);
                            putObj.put("amountdue4", amountdue4);
                            putObj.put("amountdue5", amountdue5);
                            putObj.put("amountdue6", amountdue6);
                            putObj.put("amountdue7", amountdue7);
                            putObj.put("amountdue8", amountdue8);
                            putObj.put("amountdue9", amountdue9);
                            putObj.put("amountdue10", amountdue10);
                            putObj.put("amountdue11", amountdue11);
//                            putObj.put(InvoiceConstants.ACCRUEDBALANCE, accruedbalance);
                            putObj.put("amountdueinbase1", amountdueinbase1);
                            putObj.put("amountdueinbase2", amountdueinbase2);
                            putObj.put("amountdueinbase3", amountdueinbase3);
                            putObj.put("amountdueinbase4", amountdueinbase4);
                            putObj.put("amountdueinbase5", amountdueinbase5);
                            putObj.put("amountdueinbase6", amountdueinbase6);
                            putObj.put("amountdueinbase7", amountdueinbase7);
                            putObj.put("amountdueinbase8", amountdueinbase8);
                            putObj.put("amountdueinbase9", amountdueinbase9);
                            putObj.put("amountdueinbase10", amountdueinbase10);
                            putObj.put("amountdueinbase11", amountdueinbase11);
//                            putObj.put("accruedbalanceinbase", accruedbalanceinbase);
                            currencyObj.put(currencyid, putObj);
                        } else {
                            personID = (invobj.has(InvoiceConstants.personid)) ? invobj.getString(InvoiceConstants.personid) : "";
                            personName = (invobj.has(InvoiceConstants.personname)) ? invobj.getString(InvoiceConstants.personname) : "";
                            aliasname = (invobj.has(InvoiceConstants.aliasname)) ? invobj.getString(InvoiceConstants.aliasname) : "";
                            amountdueInBase = invobj.getString(InvoiceConstants.amountdueinbase);
                            currencySymbol = (invobj.has(InvoiceConstants.currencysymbol)) ? invobj.getString(InvoiceConstants.currencysymbol) : "";
                            currencyid = (invobj.has(Constants.currencyKey)) ? invobj.getString(Constants.currencyKey) : "";
                            currencyName = (invobj.has(InvoiceConstants.currencyname)) ? invobj.getString(InvoiceConstants.currencyname) : "";
                            isCN = invobj.has("isCN") ? invobj.getBoolean("isCN") : false;
                            isRP = invobj.has("isRP") ? invobj.getBoolean("isRP") : false;
                            if (currencyObj.has(currencyid)) {
                                JSONObject addObj = currencyObj.getJSONObject(currencyid);
                                if (isdistibutive) {
                                    amountdue1 = addObj.getDouble("amountdue1");
                                    amountdue2 = addObj.getDouble("amountdue2");
                                    amountdue3 = addObj.getDouble("amountdue3");
                                    amountdue4 = addObj.getDouble("amountdue4");
                                    amountdue5 = addObj.getDouble("amountdue5");
                                    amountdue6 = addObj.getDouble("amountdue6");
                                    amountdue7 = addObj.getDouble("amountdue7");
                                    amountdue8 = addObj.getDouble("amountdue8");
                                    amountdue9 = addObj.getDouble("amountdue9");
                                    amountdue10 = addObj.getDouble("amountdue10");
                                    amountdue11 = addObj.getDouble("amountdue11");
//                                    accruedbalance = addObj.getDouble("accruedbalance");
                                    amountdueinbase1 = addObj.getDouble("amountdueinbase1");
                                    amountdueinbase2 = addObj.getDouble("amountdueinbase2");
                                    amountdueinbase3 = addObj.getDouble("amountdueinbase3");
                                    amountdueinbase4 = addObj.getDouble("amountdueinbase4");
                                    amountdueinbase5 = addObj.getDouble("amountdueinbase5");
                                    amountdueinbase6 = addObj.getDouble("amountdueinbase6");
                                    amountdueinbase7 = addObj.getDouble("amountdueinbase7");
                                    amountdueinbase8 = addObj.getDouble("amountdueinbase8");
                                    amountdueinbase9 = addObj.getDouble("amountdueinbase9");
                                    amountdueinbase10 = addObj.getDouble("amountdueinbase10");
                                    amountdueinbase11 = addObj.getDouble("amountdueinbase11");
//                                    accruedbalanceinbase = addObj.getDouble("accruedbalanceinbase");
                                } else {
                                    amountdue1 = addObj.getDouble("amountdue1");
                                    amountdue2 = addObj.getDouble("amountdue2");
                                    amountdue3 = addObj.getDouble("amountdue3");
//                                    accruedbalance = addObj.getDouble("accruedbalance");
                                    amountdueinbase1 = addObj.getDouble("amountdueinbase1");
                                    amountdueinbase2 = addObj.getDouble("amountdueinbase2");
                                    amountdueinbase3 = addObj.getDouble("amountdueinbase3");
//                                    accruedbalanceinbase = addObj.getDouble("accruedbalanceinbase");
                                }
                            }
                            Date dueDate = new Date();
                            if (datefilter == 0 || datefilter == Constants.agedDueDate0to30Filter) {
                                dueDate = authHandler.getDateOnlyFormat( ).parse(invobj.getString(Constants.duedate));
                            } else {
                                dueDate = authHandler.getDateOnlyFormat( ).parse(invobj.getString("date"));
                            }
                            double amountdue = invobj.getDouble("amountdue");
                            double amountdueinbase = invobj.getDouble(InvoiceConstants.amountdueinbase);
                            boolean isopeningBalanceTransaction = invobj.optBoolean("isOpeningBalanceTransaction", false);
                            if (isCN || isRP) {
                                if (!isopeningBalanceTransaction) {
                                    amountdueinbase = -amountdueinbase;
                                    amountdue = -amountdue;
                                }
                            }

                            if (customizedSumryReportFlag) {
                                if ((dueDate.after(customizeSumryTo1Date) || dueDate.equals(customizeSumryTo1Date)) && (dueDate.before(customizeSumryFrom1Date) || dueDate.equals(customizeSumryFrom1Date))) {
                                    amountdue1 += amountdue;
                                    amountdueinbase1 += amountdueinbase;
                                } else if ((dueDate.after(customizeSumryTo2Date) || dueDate.equals(customizeSumryTo2Date)) && (dueDate.before(customizeSumryFrom2Date) || dueDate.equals(customizeSumryFrom2Date))) {
                                    amountdue2 += amountdue;
                                    amountdueinbase2 += amountdueinbase;
                                } else if ((dueDate.after(customizeSumryTo3Date) || dueDate.equals(customizeSumryTo3Date)) && (dueDate.before(customizeSumryFrom3Date) || dueDate.equals(customizeSumryFrom3Date))) {
                                    amountdue3 += amountdue;
                                    amountdueinbase3 += amountdueinbase;
                                } else if ((dueDate.after(customizeSumryTo4Date) || dueDate.equals(customizeSumryTo4Date)) && (dueDate.before(customizeSumryFrom4Date) || dueDate.equals(customizeSumryFrom4Date))) {
                                    amountdue4 += amountdue;
                                    amountdueinbase4 += amountdueinbase;
                                } else if ((dueDate.after(customizeSumryTo5Date) || dueDate.equals(customizeSumryTo5Date)) && (dueDate.before(customizeSumryFrom5Date) || dueDate.equals(customizeSumryFrom5Date))) {
                                    amountdue5 += amountdue;
                                    amountdueinbase5 += amountdueinbase;
                                } else if ((dueDate.after(customizeSumryTo6Date) || dueDate.equals(customizeSumryTo6Date)) && (dueDate.before(customizeSumryFrom6Date) || dueDate.equals(customizeSumryFrom6Date))) {
                                    amountdue6 += amountdue;
                                    amountdueinbase6 += amountdueinbase;
                                } else if ((dueDate.after(customizeSumryTo7Date) || dueDate.equals(customizeSumryTo7Date)) && (dueDate.before(customizeSumryFrom7Date) || dueDate.equals(customizeSumryFrom7Date))) {
                                    amountdue7 += amountdue;
                                    amountdueinbase7 += amountdueinbase;
                                }

                            } else {
                 
                                if (isdistibutive) {
//                                    if (startDate != null && dueDate.before(startDate)) {
//                                        accruedbalanceinbase += amountdueinbase;
//                                        accruedbalance += amountdue;
//                                    } else
                                    if (dueDate.after(oneDayBeforeCal1Date)) {
                                        if (dueDate.equals(cal1Date) && (datefilter == Constants.agedDueDate0to30Filter || datefilter == Constants.agedInvoiceDate0to30Filter)) {
                                            amountdueinbase2 += amountdueinbase;
                                            amountdue2 += amountdue;
                                        } else {
                                            amountdueinbase1 += amountdueinbase;
                                            amountdue1 += amountdue;
                                        }
                                    } else if ((cal2Date.before(dueDate) || cal2Date.equals(dueDate)) && cal1Date.after(dueDate)) {
                                        amountdueinbase2 += amountdueinbase;
                                        amountdue2 += amountdue;
                                    } else if ((cal3Date.before(dueDate) || cal3Date.equals(dueDate)) && cal2Date.after(dueDate)) {
                                        amountdueinbase3 += amountdueinbase;
                                        amountdue3 += amountdue;
                                    } else if ((cal4Date.before(dueDate) || cal4Date.equals(dueDate)) && cal3Date.after(dueDate)) {
                                        amountdueinbase4 += amountdueinbase;
                                        amountdue4 += amountdue;
                                    } else if ((cal5Date.before(dueDate) || cal5Date.equals(dueDate)) && cal4Date.after(dueDate)) {
                                        amountdueinbase5 += amountdueinbase;
                                        amountdue5 += amountdue;
                                    } else if ((cal6Date.before(dueDate) || cal6Date.equals(dueDate)) && cal5Date.after(dueDate)) {
                                        amountdueinbase6 += amountdueinbase;
                                        amountdue6 += amountdue;
                                    } else if ((cal7Date.before(dueDate) || cal7Date.equals(dueDate)) && cal6Date.after(dueDate)) {
                                        amountdueinbase7 += amountdueinbase;
                                        amountdue7 += amountdue;
                                    } else if ((cal8Date.before(dueDate) || cal8Date.equals(dueDate)) && cal7Date.after(dueDate)) {
                                        amountdueinbase8 += amountdueinbase;
                                        amountdue8 += amountdue;
                                    } else if ((cal9Date.before(dueDate) || cal9Date.equals(dueDate)) && cal8Date.after(dueDate)) {
                                        amountdueinbase9 += amountdueinbase;
                                        amountdue9 += amountdue;
                                    } else if ((cal10Date.before(dueDate) || cal10Date.equals(dueDate)) && cal9Date.after(dueDate)) {
                                        amountdueinbase10 += amountdueinbase;
                                        amountdue10 += amountdue;
                                    } else {
                                        amountdueinbase11 += amountdueinbase;
                                        amountdue11 += amountdue;
                                    }
                                    
                                    switch (noOfInterval) {
                                        case 2:
                                            amountdue3 += amountdue4 + amountdue5 + amountdue6 + amountdue7 + amountdue8 + amountdue9 + amountdue10 + amountdue11;
                                            amountdue4 = amountdue5 = amountdue6 = amountdue7 = amountdue8 = amountdue9 = amountdue10 = amountdue11 = 0;
                                            amountdueinbase3 += amountdueinbase4 + amountdueinbase5 + amountdueinbase6 + amountdueinbase7 + amountdueinbase8 + amountdueinbase9 + amountdueinbase10 + amountdueinbase11;
                                            amountdueinbase4 = amountdueinbase5 = amountdueinbase6 = amountdueinbase7 = amountdueinbase8 = amountdueinbase9 = amountdueinbase10 = amountdueinbase11 = 0;
                                            break;
                                        case 3:
                                            amountdue4 += amountdue5 + amountdue6 + amountdue7 + amountdue8 + amountdue9 + amountdue10 + amountdue11;
                                            amountdue5 = amountdue6 = amountdue7 = amountdue8 = amountdue9 = amountdue10 = amountdue11 = 0;
                                            amountdueinbase4 += amountdueinbase5 + amountdueinbase6 + amountdueinbase7 + amountdueinbase8 + amountdueinbase9 + amountdueinbase10 + amountdueinbase11;
                                            amountdueinbase5 = amountdueinbase6 = amountdueinbase7 = amountdueinbase8 = amountdueinbase9 = amountdueinbase10 = amountdueinbase11 = 0;
                                            break;
                                        case 4:
                                            amountdue5 += amountdue6 + amountdue7 + amountdue8 + amountdue9 + amountdue10 + amountdue11;
                                            amountdue6 = amountdue7 = amountdue8 = amountdue9 = amountdue10 = amountdue11 = 0;
                                            amountdueinbase5 += amountdueinbase6 + amountdueinbase7 + amountdueinbase8 + amountdueinbase9 + amountdueinbase10 + amountdueinbase11;
                                            amountdueinbase6 = amountdueinbase7 = amountdueinbase8 = amountdueinbase9 = amountdueinbase10 = amountdueinbase11 = 0;
                                            break;
                                        case 5:
                                            amountdue6 += amountdue7 + amountdue8 + amountdue9 + amountdue10 + amountdue11;
                                            amountdue7 = amountdue8 = amountdue9 = amountdue10 = amountdue11 = 0;
                                            amountdueinbase6 += amountdueinbase7 + amountdueinbase8 + amountdueinbase9 + amountdueinbase10 + amountdueinbase11;
                                            amountdueinbase7 = amountdueinbase8 = amountdueinbase9 = amountdueinbase10 = amountdueinbase11 = 0;
                                            break;
                                        case 6:
                                            amountdue7 += amountdue8 + amountdue9 + amountdue10 + amountdue11;
                                            amountdue8 = amountdue9 = amountdue10 = amountdue11 = 0;
                                            amountdueinbase7 += amountdueinbase8 + amountdueinbase9 + amountdueinbase10 + amountdueinbase11;
                                            amountdueinbase8 = amountdueinbase9 = amountdueinbase10 = amountdueinbase11 = 0;
                                            break;
                                        case 7:
                                            amountdue8 += amountdue9 + amountdue10 + amountdue11;
                                            amountdue9 = amountdue10 = amountdue11 = 0;
                                            amountdueinbase8 += amountdueinbase9 + amountdueinbase10 + amountdueinbase11;
                                            amountdueinbase9 = amountdueinbase10 = amountdueinbase11 = 0;
                                            break;
                                        case 8:
                                            amountdue9 += amountdue10 + amountdue11;
                                            amountdue10 = amountdue11 = 0;
                                            amountdueinbase9 += amountdueinbase10 + amountdueinbase11;
                                            amountdueinbase10 = amountdueinbase11 = 0;
                                            break;
                                        case 9:
                                            amountdue10 += amountdue11;
                                            amountdue11 = 0;
                                            amountdueinbase10 += amountdueinbase11;
                                            amountdueinbase11 = 0;
                                            break;
                                    }
                                    
                                } else {
//                                    if (startDate != null && dueDate.before(startDate)) {
//                                        accruedbalanceinbase += amountdueinbase;
//                                        accruedbalance += amountdue;
//                                    } else 
                                    if (dueDate.after(oneDayBeforeCal1Date) && (dueDate.before(cal1Date) || dueDate.equals(cal1Date))) {
                                        amountdueinbase1 += amountdueinbase;
                                        amountdue1 += amountdue;
                                    } else if (dueDate.after(cal2Date) || dueDate.equals(cal2Date)) {
                                        amountdueinbase2 += amountdueinbase;
                                        amountdue2 += amountdue;
                                    } else if (dueDate.after(cal3Date) || dueDate.equals(cal3Date)) {
                                        amountdueinbase3 += amountdueinbase;
                                        amountdue3 += amountdue;
                                    } else {
                                        amountdueinbase4 += amountdueinbase;
                                        amountdue4 += amountdue;
                                    }
                                }
                            }
                            putObj.put(InvoiceConstants.personid, personID);
                            putObj.put(InvoiceConstants.personname, personName);
                            putObj.put(InvoiceConstants.aliasname, aliasname);
                            putObj.put(InvoiceConstants.currencysymbol, currencySymbol);
                            putObj.put(Constants.currencyKey, currencyid);
                            putObj.put(InvoiceConstants.currencyname, currencyName);
                            putObj.put("amountdue1", amountdue1);
                            putObj.put("amountdue2", amountdue2);
                            putObj.put("amountdue3", amountdue3);
                            putObj.put("amountdue4", amountdue4);
                            putObj.put("amountdue5", amountdue5);
                            putObj.put("amountdue6", amountdue6);
                            putObj.put("amountdue7", amountdue7);
                            putObj.put("amountdue8", amountdue8);
                            putObj.put("amountdue9", amountdue9);
                            putObj.put("amountdue10", amountdue10);
                            putObj.put("amountdue11", amountdue11);
//                            putObj.put(InvoiceConstants.ACCRUEDBALANCE, accruedbalance);
                            putObj.put("amountdueinbase1", amountdueinbase1);
                            putObj.put("amountdueinbase2", amountdueinbase2);
                            putObj.put("amountdueinbase3", amountdueinbase3);
                            putObj.put("amountdueinbase4", amountdueinbase4);
                            putObj.put("amountdueinbase5", amountdueinbase5);
                            putObj.put("amountdueinbase6", amountdueinbase6);
                            putObj.put("amountdueinbase7", amountdueinbase7);
                            putObj.put("amountdueinbase8", amountdueinbase8);
                            putObj.put("amountdueinbase9", amountdueinbase9);
                            putObj.put("amountdueinbase10", amountdueinbase10);
                            putObj.put("amountdueinbase11", amountdueinbase11);
//                            putObj.put("accruedbalanceinbase", accruedbalanceinbase);
                            currencyObj.put(currencyid, putObj);
                        }
                    }
                    Iterator itr = currencyObj.keys();
                        while (itr.hasNext()) {
                            JSONObject getObj = currencyObj.getJSONObject(itr.next().toString());
                            jObj = new JSONObject();
                            if (getObj.has(InvoiceConstants.personid)) {
                                jObj.put(InvoiceConstants.personid, getObj.getString(InvoiceConstants.personid));
                            }
                            if (getObj.has(InvoiceConstants.personname)) {
                                jObj.put(InvoiceConstants.personname+linedetails, getObj.getString(InvoiceConstants.personname));
                            }
                            jObj.put("amountdue1"+linedetails, Double.valueOf(authHandler.formattedAmount(getObj.getDouble("amountdue1"), companyid)));
                            jObj.put("amountdue2"+linedetails, Double.valueOf(authHandler.formattedAmount(getObj.getDouble("amountdue2"), companyid)));
                            jObj.put("amountdue3"+linedetails, Double.valueOf(authHandler.formattedAmount(getObj.getDouble("amountdue3"), companyid)));
                            jObj.put("amountdue4"+linedetails, Double.valueOf(authHandler.formattedAmount(getObj.getDouble("amountdue4"), companyid)));
                            jObj.put("amountdue5"+linedetails, Double.valueOf(authHandler.formattedAmount(getObj.getDouble("amountdue5"), companyid)));
                            jObj.put("amountdue6"+linedetails, Double.valueOf(authHandler.formattedAmount(getObj.getDouble("amountdue6"), companyid)));
                            jObj.put("amountdue7"+linedetails, Double.valueOf(authHandler.formattedAmount(getObj.getDouble("amountdue7"), companyid)));
                            jObj.put("amountdue8"+linedetails, Double.valueOf(authHandler.formattedAmount(getObj.getDouble("amountdue8"), companyid)));
                            jObj.put("amountdue9"+linedetails, Double.valueOf(authHandler.formattedAmount(getObj.getDouble("amountdue9"), companyid)));
                            jObj.put("amountdue10"+linedetails, Double.valueOf(authHandler.formattedAmount(getObj.getDouble("amountdue10"), companyid)));
                            jObj.put("amountdue11"+linedetails, Double.valueOf(authHandler.formattedAmount(getObj.getDouble("amountdue11"), companyid)));
//                            jObj.put("accruedbalance"+linedetails, Double.valueOf(authHandler.formattedAmount((getObj.getDouble("accruedbalance")), companyid)));
                            jObj.put(InvoiceConstants.currencysymbol+linedetails, getObj.getString(InvoiceConstants.currencysymbol));
                            jObj.put(Constants.currencyKey+linedetails, getObj.getString(Constants.currencyKey));
                            KwlReturnObject objItr = accountingHandlerDAOobj.getObject(KWLCurrency.class.getName(), getObj.getString(Constants.currencyKey));
                            KWLCurrency currency = (KWLCurrency) objItr.getEntityList().get(0);
                            jObj.put(InvoiceConstants.currencyname+linedetails, getObj.getString(InvoiceConstants.currencyname));
                            jObj.put("currencyCode"+linedetails, currency.getCurrencyCode());
                            double amountdue = Double.valueOf(authHandler.formattedAmount((getObj.getDouble("amountdue1") + getObj.getDouble("amountdue2") + getObj.getDouble("amountdue3") + getObj.getDouble("amountdue4") + getObj.getDouble("amountdue5") + getObj.getDouble("amountdue6") + getObj.getDouble("amountdue7") + getObj.getDouble("amountdue8") + getObj.getDouble("amountdue9") + getObj.getDouble("amountdue10") + getObj.getDouble("amountdue11")), companyid));
                            jObj.put("total"+linedetails, amountdue);
                            double amountdueinbase = Double.valueOf(authHandler.formattedAmount((getObj.getDouble("amountdueinbase1") + getObj.getDouble("amountdueinbase2") + getObj.getDouble("amountdueinbase3") + getObj.getDouble("amountdueinbase4") + getObj.getDouble("amountdueinbase5") + getObj.getDouble("amountdueinbase6") + getObj.getDouble("amountdueinbase7") + getObj.getDouble("amountdueinbase8") + getObj.getDouble("amountdueinbase9") + getObj.getDouble("amountdueinbase10") + getObj.getDouble("amountdueinbase11")), companyid));
                            jObj.put("totalinbase"+linedetails, amountdueinbase);
                        if(!isdetailedXls)
                            totalinbase += amountdueinbase;
                            if (customizedSumryReportFlag && !showCustVendorWithZeroAmounts && amountdue == 0) {
                                continue;
                            }
                            jArr.put(jObj);
                        }
                    }
                }
            }
            boolean isWidgetRequest = !StringUtil.isNullOrEmpty(request.optString("isWidgetRequest"))   ? Boolean.parseBoolean(request.optString("isWidgetRequest")) : false;
            if(exportCustomerAged){ //  Used for export CSV
                JSONObject jtotal = new JSONObject();
                if (customizedSumryReportFlag) {
                    jtotal.put(InvoiceConstants.personname, "Total");
                    jtotal.put("total", totalinbase);
                } else {
                    jtotal.put("total", "Total");
                    jtotal.put("totalinbase", totalinbase);
                }
                jArr.put(jtotal);
            } else if (isAgedReceivables && !isWidgetRequest && !consolidationAgedReceivable) {
                JSONObject jtotal = new JSONObject();
                jtotal.put("grandTotalInBase", totalinbase); // ADD GRNAD TOTAL AS LAST RECORD IN PAGED JSON
                jtotal.put("pagedTotalInBase", totalinbase); // ADD GRNAD TOTAL AS LAST RECORD IN PAGED JSON
                jArr.put(jtotal);
            }
            mainJobj.put("data",jArr);
            mainJobj.put("totalcount",jArr.length());
        } catch (ServiceException ex) {
            Logger.getLogger(AccInvoiceServiceImpl.class.getName()).log(Level.SEVERE, null, ex);
            throw ex;
        }
        return mainJobj;
    }  
    
 
    @Override
    public JSONObject getConsolidationAgedReceivable(JSONObject paramsJobj)throws ServiceException, JSONException, SessionExpiredException, ParseException {
        JSONObject jobj= new JSONObject();
        JSONArray finalArray = new JSONArray();
        JSONArray array = new JSONArray();
        try {
            paramsJobj.put("isdistributive", true);
            paramsJobj.put("ignorezero", true);
            paramsJobj.put("duration", 30);
            paramsJobj.put("datefilter", 0);
            paramsJobj.put("consolidationAgedReceivable", true);
            int start = paramsJobj.optInt("start", 0);
            int limit = paramsJobj.optInt("limit", 25);
            if(start!=0){
                limit +=start;
            }
            
            /****************** get column Model for CAR Report*********************************************/
            JSONArray columnModelData=getConsolidationAgedReceivableColumnModel(paramsJobj);
            jobj.put("columns", columnModelData);
            
            /******************Code for getting consolidated company details like stake/exchange rate/subdomain name etc*************************/
            Map<String, JSONObject> conslidationCompanyMap = getConsolidatedCompanyDetails(paramsJobj);

            /*******************Purring required values in paramsJobj before calling  getCustomerAgedReceivableMerged*************************/
            for (Map.Entry<String, JSONObject> entry : conslidationCompanyMap.entrySet()) {
                JSONObject companyOBJ = entry.getValue();
                double exchangeRate = companyOBJ.optDouble("exchangerate", 0);
                double stakeInPercentage = companyOBJ.optDouble("stakeinpercentage",100);
                if(stakeInPercentage!=0){
                    stakeInPercentage = stakeInPercentage/100;
                } else{
                   stakeInPercentage=1;
                }
                String companyid = companyOBJ.getString("subdomainid");
                String companyname = companyOBJ.getString("companyname");
                paramsJobj.put(Constants.companyKey, companyid);
                JSONObject returnObj = getCustomerAgedReceivableMerged(paramsJobj, false, true);
                if (returnObj.has("data")) {
                    JSONArray dataArray = returnObj.getJSONArray("data");
                    int datacount = dataArray.length();
                    for (int count = 0; count < datacount; count++) {
                        JSONObject obj=dataArray.getJSONObject(count);
                        double amountdueinbase1=obj.optDouble("amountdueinbase1", 0);
                        double amountdueinbase2=obj.optDouble("amountdueinbase2", 0);
                        double amountdueinbase3=obj.optDouble("amountdueinbase3", 0);
                        double amountdueinbase4=obj.optDouble("amountdueinbase4", 0);
                        double amountdueinbase5=obj.optDouble("amountdueinbase5", 0);
                        double amountdueinbase6=obj.optDouble("amountdueinbase6", 0);
                        double amountdueinbase7=obj.optDouble("amountdueinbase7", 0);
                        double amountdueinbase8=obj.optDouble("amountdueinbase8", 0);
                        
                        amountdueinbase1=authHandler.round((amountdueinbase1*exchangeRate*stakeInPercentage), companyid);
                        amountdueinbase2=authHandler.round((amountdueinbase2*exchangeRate*stakeInPercentage), companyid);
                        amountdueinbase3=authHandler.round((amountdueinbase3*exchangeRate*stakeInPercentage), companyid);
                        amountdueinbase4=authHandler.round((amountdueinbase4*exchangeRate*stakeInPercentage), companyid);
                        amountdueinbase5=authHandler.round((amountdueinbase5*exchangeRate*stakeInPercentage), companyid);
                        amountdueinbase6=authHandler.round((amountdueinbase6*exchangeRate*stakeInPercentage), companyid);
                        amountdueinbase7=authHandler.round((amountdueinbase7*exchangeRate*stakeInPercentage), companyid);
                        amountdueinbase8=authHandler.round((amountdueinbase8*exchangeRate*stakeInPercentage), companyid);
                        double totalinbase=amountdueinbase1+amountdueinbase2+amountdueinbase3+amountdueinbase4+amountdueinbase5+amountdueinbase6+amountdueinbase7+amountdueinbase8;
                        totalinbase=authHandler.round(totalinbase, companyid);
                        
                        obj.put("amountdueinbase1", amountdueinbase1);
                        obj.put("amountdueinbase2", amountdueinbase2);
                        obj.put("amountdueinbase3", amountdueinbase3);
                        obj.put("amountdueinbase4", amountdueinbase4);
                        obj.put("amountdueinbase5", amountdueinbase5);
                        obj.put("amountdueinbase6", amountdueinbase6);
                        obj.put("amountdueinbase7", amountdueinbase7);
                        obj.put("amountdueinbase8", amountdueinbase8);
                        obj.put("totalinbase", totalinbase);
                        
                        obj.put(Constants.companyname, companyname);
                        obj.put(Constants.companyKey, companyid);
                        array.put(obj);
                    }
                }
            }
            
            //Handling Paging
            int recordCount=0;
            for (int i = 0; i < array.length(); i++) {
                if (recordCount < start) {//when user select next/previous page
                    recordCount++;
                    continue;
                }
                finalArray.put(array.getJSONObject(i));
                recordCount++;
                if (recordCount == limit) {//once company record reached to its limit we need to break
                    break;
                }
            }
            
            jobj.put(Constants.data, finalArray);
            jobj.put("count", array.length());
        } catch (ServiceException ex) {
            Logger.getLogger(AccInvoiceServiceImpl.class.getName()).log(Level.SEVERE, null, ex);
            throw ex;
        }
        return jobj;
    }

 public JSONArray getConsolidationAgedReceivableColumnModel(JSONObject paramsJobj) throws JSONException, ServiceException {
        
        Locale locale = Locale.forLanguageTag(paramsJobj.getString(Constants.language));
        
        String gcurrencyid = paramsJobj.getString("gcurrencyid");
        KwlReturnObject curresult = kwlCommonTablesDAOObj.getObject(KWLCurrency.class.getName(), gcurrencyid);
        KWLCurrency currency = (KWLCurrency) curresult.getEntityList().get(0);
        String currencyName = currency.getName();
        
        JSONArray jarrColumns = new JSONArray();
        JSONObject jobjTemp = new JSONObject();

        jobjTemp = new JSONObject();//row number
        jobjTemp.put("xtype", "rownumberer");
        jobjTemp.put("autoLock", false);
        jarrColumns.put(jobjTemp);
        
        jobjTemp = new JSONObject();//Company
        jobjTemp.put("header", messageSource.getMessage("acc.companypref.company", null, locale));
        jobjTemp.put("dataIndex", Constants.companyname);
        jobjTemp.put("isgrouping", true);
        jobjTemp.put("width", 150);
        jobjTemp.put("pdfwidth", 150);
        jarrColumns.put(jobjTemp);

        jobjTemp = new JSONObject();//Cuatomer Name
        jobjTemp.put("header", messageSource.getMessage("acc.cust.name", null, locale));
        jobjTemp.put("dataIndex", InvoiceConstants.personname);
        jobjTemp.put("width", 150);
        jobjTemp.put("pdfwidth", 150);
        jarrColumns.put(jobjTemp);

        jobjTemp = new JSONObject();//Current
        jobjTemp.put("header", messageSource.getMessage("acc.agedPay.gridCurrent", null, locale));
        jobjTemp.put("dataIndex", "amountdueinbase1");
        jobjTemp.put("summaryType", "sum");
        jobjTemp.put("align", "right");
        jobjTemp.put("renderer", "ExtGlobal.baseCurrencyRenderer");
        jobjTemp.put("summaryRenderer", "ExtGlobal.baseCurrencyRenderer");
        jobjTemp.put("width", 150);
        jobjTemp.put("pdfwidth", 150);
        jarrColumns.put(jobjTemp);

        jobjTemp = new JSONObject();//1-30 Days
        jobjTemp.put("header", "1-30 " + messageSource.getMessage("acc.agedPay.days", null, locale));
        jobjTemp.put("dataIndex", "amountdueinbase2");
        jobjTemp.put("summaryType", "sum");
        jobjTemp.put("align", "right");
        jobjTemp.put("renderer", "ExtGlobal.baseCurrencyRenderer");
        jobjTemp.put("summaryRenderer", "ExtGlobal.baseCurrencyRenderer");
        jobjTemp.put("width", 150);
        jobjTemp.put("pdfwidth", 150);
        jarrColumns.put(jobjTemp);

        jobjTemp = new JSONObject();//31-60 Days
        jobjTemp.put("header", "31-60 " + messageSource.getMessage("acc.agedPay.days", null, locale));
        jobjTemp.put("dataIndex", "amountdueinbase3");
        jobjTemp.put("renderer", "ExtGlobal.baseCurrencyRenderer");
        jobjTemp.put("summaryRenderer", "ExtGlobal.baseCurrencyRenderer");
        jobjTemp.put("width", 150);
        jobjTemp.put("align", "right");
        jobjTemp.put("summaryType", "sum");
        jobjTemp.put("pdfwidth", 150);
        jarrColumns.put(jobjTemp);

        jobjTemp = new JSONObject();//61-90 Days
        jobjTemp.put("header", "61-90 " + messageSource.getMessage("acc.agedPay.days", null, locale));
        jobjTemp.put("dataIndex", "amountdueinbase4");
        jobjTemp.put("renderer", "ExtGlobal.baseCurrencyRenderer");
        jobjTemp.put("summaryRenderer", "ExtGlobal.baseCurrencyRenderer");
        jobjTemp.put("width", 150);
        jobjTemp.put("align", "right");
        jobjTemp.put("summaryType", "sum");
        jobjTemp.put("pdfwidth", 150);
        jarrColumns.put(jobjTemp);

        jobjTemp = new JSONObject();//91-120 Days
        jobjTemp.put("header", "91-120 " + messageSource.getMessage("acc.agedPay.days", null, locale));
        jobjTemp.put("dataIndex", "amountdueinbase5");
        jobjTemp.put("renderer", "ExtGlobal.baseCurrencyRenderer");
        jobjTemp.put("summaryRenderer", "ExtGlobal.baseCurrencyRenderer");
        jobjTemp.put("width", 150);
        jobjTemp.put("align", "right");
        jobjTemp.put("summaryType", "sum");
        jobjTemp.put("pdfwidth", 150);
        jarrColumns.put(jobjTemp);

        jobjTemp = new JSONObject();//121-150 Days
        jobjTemp.put("header", "121-150 " + messageSource.getMessage("acc.agedPay.days", null, locale));
        jobjTemp.put("dataIndex", "amountdueinbase6");
        jobjTemp.put("renderer", "ExtGlobal.baseCurrencyRenderer");
        jobjTemp.put("summaryRenderer", "ExtGlobal.baseCurrencyRenderer");
        jobjTemp.put("width", 150);
        jobjTemp.put("align", "right");
        jobjTemp.put("summaryType", "sum");
        jobjTemp.put("pdfwidth", 150);
        jarrColumns.put(jobjTemp);

        jobjTemp = new JSONObject();//151-180 Days
        jobjTemp.put("header", "151-180 " + messageSource.getMessage("acc.agedPay.days", null, locale));
        jobjTemp.put("dataIndex", "amountdueinbase7");
        jobjTemp.put("renderer", "ExtGlobal.baseCurrencyRenderer");
        jobjTemp.put("summaryRenderer", "ExtGlobal.baseCurrencyRenderer");
        jobjTemp.put("width", 150);
        jobjTemp.put("align", "right");
        jobjTemp.put("summaryType", "sum");
        jobjTemp.put("pdfwidth", 150);
        jarrColumns.put(jobjTemp);

        jobjTemp = new JSONObject();//>180 Days
        jobjTemp.put("header", ">180 "+messageSource.getMessage("acc.agedPay.days", null, locale));
        jobjTemp.put("dataIndex", "amountdueinbase8");
        jobjTemp.put("renderer", "ExtGlobal.baseCurrencyRenderer");
        jobjTemp.put("summaryRenderer", "ExtGlobal.baseCurrencyRenderer");
        jobjTemp.put("width", 150);
        jobjTemp.put("align", "right");
        jobjTemp.put("summaryType", "sum");
        jobjTemp.put("pdfwidth", 150);
        jarrColumns.put(jobjTemp);

        jobjTemp = new JSONObject();//Total In Base Currency
        jobjTemp.put("header", messageSource.getMessage("acc.common.total", null, locale)+" "+messageSource.getMessage("acc.fixedAssetList.grid.homCur", null, locale)+"("+currencyName+")");
        jobjTemp.put("dataIndex", "totalinbase");
        jobjTemp.put("renderer", "ExtGlobal.baseCurrencyRenderer");
        jobjTemp.put("summaryRenderer", "ExtGlobal.baseCurrencyRenderer");
        jobjTemp.put("width", 150);
        jobjTemp.put("align", "right");
        jobjTemp.put("summaryType", "sum");
        jobjTemp.put("pdfwidth", 150);
        jarrColumns.put(jobjTemp);
        
        return jarrColumns;
    }

    public Map<String, JSONObject> getConsolidatedCompanyDetails(JSONObject paramsJobj) throws JSONException, ServiceException {
        String companyid = paramsJobj.getString(Constants.companyKey);
        String gcurrencyid = paramsJobj.getString("gcurrencyid");
        JSONObject obj = new JSONObject();
        Map<String, JSONObject> conslidationCompanyMap = new HashMap();// This Map is used to hold consolidation companies data like companyid,current exchange rate, stake in percentage etc 
        Map requestMap = new HashMap();
        requestMap.put(Constants.companyKey, companyid);
        KwlReturnObject result = accCurrencyDAOobj.getConsolidation(requestMap);

        if (result != null && !result.getEntityList().isEmpty()) {
            List<ConsolidationData> consolidationDatas = result.getEntityList();
            for (ConsolidationData data : consolidationDatas) {
                JSONObject object = new JSONObject();
                if (data.getChildCompany() != null) {
                    Map filterMap = new HashMap();
                    filterMap.put("consolidationid", data.getID());
                    KwlReturnObject result1 = accCurrencyDAOobj.getConsolidationExchangeRate(filterMap);

                    if (result1 == null || result1.getEntityList().isEmpty()) {
                        String childCompanyCurrencyID = data.getChildCompany().getCurrency() != null ? data.getChildCompany().getCurrency().getCurrencyID() : "";
                        if (gcurrencyid.equalsIgnoreCase(childCompanyCurrencyID)) {// if exchange rate not vailable and currency same then given exchange rate as 1
                            object.put("exchangerate", 1);
                        } else {
                            // If echange rate is not set for any consolidation company then we will not consider that company for consolidation report
                            continue;
                        }
                    } else {
                        ConsolidationExchangeRateDetails cerd = (ConsolidationExchangeRateDetails) result1.getEntityList().get(0);
                        object.put("exchangerate", cerd.getExchangeRate());
                    }
                    object.put("id", data.getID());
                    object.put("stakeinpercentage", data.getStakeInPercentage());
                    object.put("subdomainid", data.getChildCompany().getCompanyID());
                    object.put("subdomainname", data.getChildCompany().getSubDomain());
                    object.put("companyname", data.getChildCompany().getCompanyName());
                    conslidationCompanyMap.put(data.getChildCompany().getCompanyID(), object);
                }
            }
        }
        return conslidationCompanyMap;
    }

    @Override
    public JSONArray getSalesPersonAgedDetail(HttpServletRequest request, JSONObject requestOBJ) throws ServiceException, JSONException, SessionExpiredException, ParseException, UnsupportedEncodingException {
        JSONArray jArr = new JSONArray();
        try {
            boolean isExport = requestOBJ.optBoolean(Constants.isExport, false);
            HashMap invoiceRequestParams = getCustomerAgedReceivableMap(request, false);
            invoiceRequestParams.put("isSalesPersonAgedReport", true);
            invoiceRequestParams.put("isAgedDetailsReport", true);
            double grandTotalAmt = 0;

            JSONArray allTransaction = new JSONArray();
            if(!Constants.isOptimized){
                allTransaction = getAgeingJson(invoiceRequestParams, requestOBJ);
            } else {
                allTransaction = getAgeingInvoiceJson(invoiceRequestParams, requestOBJ);
            }
            
            JSONArray openingInvoiceArray = new JSONArray();
            KwlReturnObject result = accInvoiceDAOobj.getOpeningBalanceInvoices(invoiceRequestParams);
            if (result.getRecordTotalCount() > 0) {
                openingInvoiceArray = AccInvoiceServiceHandler.getAgedOpeningBalanceInvoiceJson(invoiceRequestParams, result.getEntityList(), openingInvoiceArray, accCurrencyDAOobj, accInvoiceCommon, request, accountingHandlerDAOobj, accAccountDAOobj, fieldDataManagercntrl, accJournalEntryobj);
                for (int i = 0; i < openingInvoiceArray.length(); i++) {
                    allTransaction.put(openingInvoiceArray.get(i));
                }
            }

            if (allTransaction.length() > 0) {
                Map<String, JSONArray> jArrMap = AccountingManager.getSortedArrayMapBasedOnJSONAttribute(allTransaction, "salespersoninfo");
                for (String salesPerson : jArrMap.keySet()) {
                    JSONArray invjarr = jArrMap.get(salesPerson);
                    if (invjarr != null && invjarr.length() > 0) {
                        String sortKey = "date";
                        invjarr = AccountingManager.sortJsonArrayOnDateValues(invjarr, authHandler.getDateOnlyFormat(), sortKey, true);
                        double subtotalAmt = 0;
                        for (int i = 0; i < invjarr.length(); i++) {
                            JSONObject obj = invjarr.getJSONObject(i);
                            jArr.put(obj);
                            subtotalAmt += obj.optDouble("amountdueinbase", 0);
                        }
                        if (isExport && subtotalAmt != 0) {//In case of export, we need to uppend subtotal for each sales person
                            grandTotalAmt += subtotalAmt;
                            JSONObject subTotalOBJ = new JSONObject();
                            subTotalOBJ.put("salespersonname", "Total");
                            subTotalOBJ.put("amountdueinbase", subtotalAmt);
                            jArr.put(subTotalOBJ);
                        }
                    }
                }
            }
            if (isExport && grandTotalAmt != 0) {//In case of export, we need to uppend Grand Total
                JSONObject grandTotalOBJ = new JSONObject();
                grandTotalOBJ.put("salespersonname", "Grand Total");
                grandTotalOBJ.put("amountdueinbase", grandTotalAmt);
                jArr.put(grandTotalOBJ);
            }
        } catch (ServiceException ex) {
            Logger.getLogger(AccInvoiceServiceImpl.class.getName()).log(Level.SEVERE, null, ex);
            throw ex;
        }
        return jArr;
    }

    @Override
    public JSONArray getSalesPersonAgedSummary(HttpServletRequest request) throws ServiceException, JSONException, SessionExpiredException, ParseException, UnsupportedEncodingException {
        JSONArray jArr = new JSONArray();
        try {
            String companyid = sessionHandlerImpl.getCompanyid(request);
            HashMap invoiceRequestParams = getCustomerAgedReceivableMap(request, false);
            invoiceRequestParams.put("isSalesPersonAgedReport", true);
//            String curDateString = (!StringUtil.isNullOrEmpty(request.getParameter("curdate"))) ? request.getParameter("curdate") : ((!StringUtil.isNullOrEmpty(request.getParameter("stdate"))) ? request.getParameter("stdate") : request.getParameter(Constants.REQ_startdate));
            String curDateString = !(StringUtil.isNullOrEmpty(request.getParameter(Constants.asOfDate))) ? request.getParameter(Constants.asOfDate) : request.getParameter(Constants.curdate);
            DateFormat df = authHandler.getDateOnlyFormat();
            Date curDate = df.parse(curDateString);

            DateFormat dateFormat = authHandler.getDateOnlyFormat();
            Date startDate = null;
            if (invoiceRequestParams.containsKey(Constants.REQ_startdate) && invoiceRequestParams.get(Constants.REQ_startdate) != null) {
                startDate = (invoiceRequestParams.get(Constants.REQ_startdate).toString()).equals("") ? dateFormat.parse(Constants.opening_Date) : dateFormat.parse(invoiceRequestParams.get(Constants.REQ_startdate).toString());
            }
            int noOfInterval = StringUtil.isNullOrEmpty(request.getParameter("noOfInterval"))? 7 : Integer.parseInt(request.getParameter("noOfInterval"));
            int duration = request.getParameter("duration") == null ? 0 : Integer.parseInt(request.getParameter("duration"));
            invoiceRequestParams.put(InvoiceConstants.duration, duration);
            boolean isdistibutive = StringUtil.getBoolean(request.getParameter("isdistributive"));
            int datefilter = StringUtil.getInteger(request.getParameter("datefilter")); // 0 = Invoice Due date OR 1 = Invoice date

            KwlReturnObject objItr = accountingHandlerDAOobj.getObject(KWLCurrency.class.getName(), sessionHandlerImpl.getCurrencyID(request));
            KWLCurrency currency = (KWLCurrency) objItr.getEntityList().get(0);
            double amountdueinbase1 = 0, amountdueinbase2 = 0, amountdueinbase3 = 0, amountdueinbase4 = 0, amountdueinbase5 = 0, amountdueinbase6 = 0, amountdueinbase7 = 0, amountdueinbase8 = 0, amountdueinbase9 = 0, amountdueinbase10 = 0, amountdueinbase11 = 0;

            Calendar oneDayBeforeCal1 = Calendar.getInstance();
            Calendar cal1 = Calendar.getInstance();
            Calendar cal2 = Calendar.getInstance();
            Calendar cal3 = Calendar.getInstance();
            Calendar cal4 = Calendar.getInstance();
            Calendar cal5 = Calendar.getInstance();
            Calendar cal6 = Calendar.getInstance();
            Calendar cal7 = Calendar.getInstance();
            Calendar cal8 = Calendar.getInstance();
            Calendar cal9 = Calendar.getInstance();
            Calendar cal10 = Calendar.getInstance();

            oneDayBeforeCal1.setTime(curDate);
            cal1.setTime(curDate);
            cal2.setTime(curDate);
            cal3.setTime(curDate);
            cal4.setTime(curDate);
            cal5.setTime(curDate);
            cal6.setTime(curDate);
            cal7.setTime(curDate);
            cal8.setTime(curDate);
            cal9.setTime(curDate);
            cal10.setTime(curDate);
            oneDayBeforeCal1.add(Calendar.DAY_OF_YEAR, -1);
            cal2.add(Calendar.DAY_OF_YEAR, -duration);
            cal3.add(Calendar.DAY_OF_YEAR, -(duration * 2));
            cal4.add(Calendar.DAY_OF_YEAR, -(duration * 3));
            cal5.add(Calendar.DAY_OF_YEAR, -(duration * 4));
            cal6.add(Calendar.DAY_OF_YEAR, -(duration * 5));
            cal7.add(Calendar.DAY_OF_YEAR, -(duration * 6));
            cal8.add(Calendar.DAY_OF_YEAR, -(duration * 7));
            cal9.add(Calendar.DAY_OF_YEAR, -(duration * 8));
            cal10.add(Calendar.DAY_OF_YEAR, -(duration * 9));

            Date oneDayBeforeCal1Date = null;
            Date cal1Date = null;
            Date cal2Date = null;
            Date cal3Date = null;
            Date cal4Date = null;
            Date cal5Date = null;
            Date cal6Date = null;
            Date cal7Date = null;
            Date cal8Date = null;
            Date cal9Date = null;
            Date cal10Date = null;

            String oneDayBeforeCal1String = dateFormat.format(oneDayBeforeCal1.getTime());
            oneDayBeforeCal1Date = dateFormat.parse(oneDayBeforeCal1String);

            String cal1String = dateFormat.format(cal1.getTime());
            cal1Date = dateFormat.parse(cal1String);

            String cal2String = dateFormat.format(cal2.getTime());
            cal2Date = dateFormat.parse(cal2String);

            String cal3String = dateFormat.format(cal3.getTime());
            cal3Date = dateFormat.parse(cal3String);

            String cal4String = dateFormat.format(cal4.getTime());
            cal4Date = dateFormat.parse(cal4String);

            String cal5String = dateFormat.format(cal5.getTime());
            cal5Date = dateFormat.parse(cal5String);

            String cal6String = dateFormat.format(cal6.getTime());
            cal6Date = dateFormat.parse(cal6String);

            String cal7String = dateFormat.format(cal7.getTime());
            cal7Date = dateFormat.parse(cal7String);

            String cal8String = dateFormat.format(cal8.getTime());
            cal8Date = dateFormat.parse(cal8String);

            String cal9String = dateFormat.format(cal9.getTime());
            cal9Date = dateFormat.parse(cal9String);

            String cal10String = dateFormat.format(cal10.getTime());
            cal10Date = dateFormat.parse(cal10String);

            JSONArray allTransaction = new JSONArray();
            JSONObject sampleparam = new JSONObject();
            if(!Constants.isOptimized){
                allTransaction = getAgeingJson(invoiceRequestParams, sampleparam);
            } else {
                allTransaction = getAgeingInvoiceJson(invoiceRequestParams, sampleparam);
            }

            JSONArray OBJArryInvoice = new JSONArray();
            KwlReturnObject result = accInvoiceDAOobj.getOpeningBalanceInvoices(invoiceRequestParams);
            if (result.getRecordTotalCount() > 0) {
                OBJArryInvoice = AccInvoiceServiceHandler.getAgedOpeningBalanceInvoiceJson(invoiceRequestParams, result.getEntityList(), OBJArryInvoice, accCurrencyDAOobj, accInvoiceCommon, request, accountingHandlerDAOobj, accAccountDAOobj, fieldDataManagercntrl, accJournalEntryobj);
                for (int i = 0; i < OBJArryInvoice.length(); i++) {
                    allTransaction.put(OBJArryInvoice.get(i));
                }
            }
            if (allTransaction.length() > 0) {
                Map<String, JSONArray> jArrMap = AccountingManager.getSortedArrayMapBasedOnJSONAttribute(allTransaction, "salespersoninfo");
                for (String salesPerson : jArrMap.keySet()) {
                    JSONArray invjarr = jArrMap.get(salesPerson);
                    if (invjarr != null && invjarr.length() > 0) {
                        String salesPersonID = invjarr.getJSONObject(0).optString("salespersonid");
                        String salesPersonName = invjarr.getJSONObject(0).optString("salespersonname");
                        amountdueinbase1 = amountdueinbase2 = amountdueinbase3 = amountdueinbase4 = amountdueinbase5 = amountdueinbase6 = amountdueinbase7 = amountdueinbase8 = amountdueinbase9 = amountdueinbase10 = amountdueinbase11 = 0;
                        for (int i = 0; i < invjarr.length(); i++) {
                            JSONObject invobj = invjarr.getJSONObject(i);
                            Date dueDate = new Date();
                            if (datefilter == 0 || datefilter == Constants.agedDueDate0to30Filter) {
                                dueDate = authHandler.getDateOnlyFormat().parse(invobj.getString(Constants.duedate));
                            } else {
                                dueDate = authHandler.getDateOnlyFormat().parse(invobj.getString("date"));
                            }
                            double amountdueinbase = invobj.getDouble(InvoiceConstants.amountdueinbase);
                            if (isdistibutive) {
//                                if (startDate != null && dueDate.before(startDate)) {//In Aged Report amountdue goes in Accruade Balance for those transaction whose creation/due date is previous to Start date will goes into the accrued balance, likes opening balance 
//                                    accruedbalanceinbase += amountdueinbase;
//                                } else
                                if (dueDate.after(oneDayBeforeCal1Date)) {
                                    if (dueDate.equals(cal1Date) && (datefilter == Constants.agedDueDate0to30Filter || datefilter == Constants.agedInvoiceDate0to30Filter)) {
                                        amountdueinbase2 = authHandler.round(amountdueinbase, companyid);  // 0-30 Days
                                    } else {
                                        amountdueinbase1 = authHandler.round(amountdueinbase, companyid); // Current
                                    }
                                } else if ((cal2Date.before(dueDate) || cal2Date.equals(dueDate)) && cal1Date.after(dueDate)) { // 1-30
                                    amountdueinbase2 = authHandler.round(amountdueinbase, companyid);
                                } else if ((cal3Date.before(dueDate) || cal3Date.equals(dueDate)) && cal2Date.after(dueDate)) { // 31-60
                                    amountdueinbase3 = authHandler.round(amountdueinbase, companyid);
                                } else if ((cal4Date.before(dueDate) || cal4Date.equals(dueDate)) && cal3Date.after(dueDate)) { // 61-90
                                    amountdueinbase4 = authHandler.round(amountdueinbase, companyid);
                                } else if ((cal5Date.before(dueDate) || cal5Date.equals(dueDate)) && cal4Date.after(dueDate)) { // 91-120
                                    amountdueinbase5 = authHandler.round(amountdueinbase, companyid);
                                } else if ((cal6Date.before(dueDate) || cal6Date.equals(dueDate)) && cal5Date.after(dueDate)) { // 121-150
                                    amountdueinbase6 = authHandler.round(amountdueinbase, companyid);
                                } else if ((cal7Date.before(dueDate) || cal7Date.equals(dueDate)) && cal6Date.after(dueDate)) { // 151-180
                                    amountdueinbase7 = authHandler.round(amountdueinbase, companyid);
                                } else if ((cal8Date.before(dueDate) || cal8Date.equals(dueDate)) && cal7Date.after(dueDate)) { // 181-210
                                    amountdueinbase8 = authHandler.round(amountdueinbase, companyid);
                                } else if ((cal9Date.before(dueDate) || cal9Date.equals(dueDate)) && cal8Date.after(dueDate)) { // 211-240
                                    amountdueinbase9 = authHandler.round(amountdueinbase, companyid);
                                } else if ((cal10Date.before(dueDate) || cal10Date.equals(dueDate)) && cal9Date.after(dueDate)) { // 241-270
                                    amountdueinbase10 = authHandler.round(amountdueinbase, companyid);
                                } else {                                                                                          // > 270           
                                    amountdueinbase11 = authHandler.round(amountdueinbase, companyid);
                                } 
                                
                                switch(noOfInterval){
                                    case 2:
                                        amountdueinbase3 += amountdueinbase4 + amountdueinbase5 + amountdueinbase6 + amountdueinbase7 + amountdueinbase8 + amountdueinbase9 + amountdueinbase10 + amountdueinbase11;
                                        amountdueinbase4 = amountdueinbase5 = amountdueinbase6 = amountdueinbase7 = amountdueinbase8 = amountdueinbase9 = amountdueinbase10 = amountdueinbase11 = 0;
                                        break;
                                    case 3:
                                        amountdueinbase4 += amountdueinbase5 + amountdueinbase6 + amountdueinbase7 + amountdueinbase8 + amountdueinbase9 + amountdueinbase10 + amountdueinbase11;
                                        amountdueinbase5 = amountdueinbase6 = amountdueinbase7 = amountdueinbase8 = amountdueinbase9 = amountdueinbase10 = amountdueinbase11 = 0;
                                        break;
                                    case 4:
                                        amountdueinbase5 += amountdueinbase6 + amountdueinbase7 + amountdueinbase8 + amountdueinbase9 + amountdueinbase10 + amountdueinbase11;
                                        amountdueinbase6 = amountdueinbase7 = amountdueinbase8 = amountdueinbase9 = amountdueinbase10 = amountdueinbase11 = 0;
                                        break;
                                    case 5:
                                        amountdueinbase6 += amountdueinbase7 + amountdueinbase8 + amountdueinbase9 + amountdueinbase10 + amountdueinbase11;
                                        amountdueinbase7 = amountdueinbase8 = amountdueinbase9 = amountdueinbase10 = amountdueinbase11 = 0;
                                        break;
                                    case 6:
                                        amountdueinbase7 += amountdueinbase8 + amountdueinbase9 + amountdueinbase10 + amountdueinbase11;
                                        amountdueinbase8 = amountdueinbase9 = amountdueinbase10 = amountdueinbase11 = 0;
                                        break;
                                    case 7:
                                        amountdueinbase8 += amountdueinbase9 + amountdueinbase10 + amountdueinbase11;
                                        amountdueinbase9 = amountdueinbase10 = amountdueinbase11 = 0;
                                        break;
                                    case 8:
                                        amountdueinbase9 += amountdueinbase10 + amountdueinbase11;
                                        amountdueinbase10 = amountdueinbase11 = 0;
                                        break;
                                    case 9:
                                        amountdueinbase10 += amountdueinbase11;
                                        amountdueinbase11 = 0;
                                        break;
                                }

                            } else {
//                                if (startDate != null && dueDate.before(startDate)) {//In Aged Report amountdue goes in Accruade Balance for those transaction whose creation/due date is previous to Start date will goes into the accrued balance, likes opening balance 
//                                    accruedbalanceinbase += amountdueinbase;
//                                } else 
                                if (dueDate.after(oneDayBeforeCal1Date) && (dueDate.before(cal1Date) || dueDate.equals(cal1Date))) {
                                    amountdueinbase1 += amountdueinbase;
                                } else if (dueDate.after(cal2Date) || dueDate.equals(cal2Date)) {
                                    amountdueinbase2 += amountdueinbase;
                                } else if (dueDate.after(cal3Date) || dueDate.equals(cal3Date)) {
                                    amountdueinbase3 += amountdueinbase;
                                } else {
                                    amountdueinbase4 += amountdueinbase;
                                }
                            }
                        }
                        if (invjarr.length() > 0) {
                            JSONObject jObj = new JSONObject();
                            jObj.put(InvoiceConstants.personid, "");
                            jObj.put(InvoiceConstants.personname, "");
                            jObj.put("salespersonid", salesPersonID);
                            jObj.put("salespersonname", salesPersonName);
                            jObj.put("amountdue1", Double.valueOf(authHandler.formattedAmount(amountdueinbase1, companyid)));
                            jObj.put("amountdue2", Double.valueOf(authHandler.formattedAmount(amountdueinbase2, companyid)));
                            jObj.put("amountdue3", Double.valueOf(authHandler.formattedAmount(amountdueinbase3, companyid)));
                            jObj.put("amountdue4", Double.valueOf(authHandler.formattedAmount(amountdueinbase4, companyid)));
                            jObj.put("amountdue5", Double.valueOf(authHandler.formattedAmount(amountdueinbase5, companyid)));
                            jObj.put("amountdue6", Double.valueOf(authHandler.formattedAmount(amountdueinbase6, companyid)));
                            jObj.put("amountdue7", Double.valueOf(authHandler.formattedAmount(amountdueinbase7, companyid)));
                            jObj.put("amountdue8", Double.valueOf(authHandler.formattedAmount(amountdueinbase8, companyid)));
                            jObj.put("amountdue9", Double.valueOf(authHandler.formattedAmount(amountdueinbase9, companyid)));
                            jObj.put("amountdue10", Double.valueOf(authHandler.formattedAmount(amountdueinbase10, companyid)));
                            jObj.put("amountdue11", Double.valueOf(authHandler.formattedAmount(amountdueinbase11, companyid)));
//                            jObj.put("accruedbalance", Double.valueOf(authHandler.formattedAmount(accruedbalanceinbase, companyid)));
                            jObj.put(InvoiceConstants.currencysymbol, currency.getSymbol());
                            jObj.put(Constants.currencyKey, currency.getCurrencyID());
                            jObj.put(InvoiceConstants.currencyname, currency.getName());
                            double amountdueinbase = Double.valueOf(authHandler.formattedAmount((amountdueinbase1 + amountdueinbase2 + amountdueinbase3 + amountdueinbase4 + amountdueinbase5 + amountdueinbase6 + amountdueinbase7 + amountdueinbase8 + amountdueinbase9+ amountdueinbase10 + amountdueinbase11), companyid));
                            jObj.put("totalinbase", amountdueinbase);
                            jObj.put("total", amountdueinbase);
                            jArr.put(jObj);
                        }
                    }
                }
            }
        } catch (ServiceException ex) {
            Logger.getLogger(AccInvoiceServiceImpl.class.getName()).log(Level.SEVERE, null, ex);
            throw ex;
        }
        return jArr;
    }
    
    
    @Override
    public JSONObject getAgedReportSummaryBasedOnCustomer(HttpServletRequest request) throws ServiceException {
        JSONArray jArr = new JSONArray();
        JSONObject jobj = new JSONObject();
        try {
            String companyid =sessionHandlerImpl.getCompanyid(request);
            JSONObject commData = new JSONObject();
            JSONObject jMeta = new JSONObject();
            JSONArray jarrColumns = new JSONArray();
            JSONArray jarrRecords = new JSONArray();
            JSONObject jobjTemp = new JSONObject();
            
            KwlReturnObject cmpresult = accountingHandlerDAOobj.getObject(Company.class.getName(), sessionHandlerImpl.getCompanyid(request));
            Company company = (Company) cmpresult.getEntityList().get(0);
            String baseCurrencyName="";
            if (company != null && company.getCurrency() != null) {
                baseCurrencyName = company.getCurrency().getName();
            }
            int reportId=808;
            
            HashMap hashMap=new HashMap();
            hashMap.put("companyId", company.getCompanyID());
            hashMap.put("reportId", reportId);
            KwlReturnObject customizeReportResult = accountingHandlerDAOobj.getCustomizeReportViewMappingField(hashMap);
            List<CustomizeReportMapping> customizeReportList = customizeReportResult.getEntityList();
            
//            String curDateString = (!StringUtil.isNullOrEmpty(request.getParameter("curdate"))) ? request.getParameter("curdate") : ((!StringUtil.isNullOrEmpty(request.getParameter("stdate"))) ? request.getParameter("stdate") : request.getParameter(Constants.REQ_startdate));
            String curDateString = !(StringUtil.isNullOrEmpty(request.getParameter(Constants.asOfDate))) ? request.getParameter(Constants.asOfDate) : request.getParameter(Constants.curdate);
            DateFormat df = authHandler.getDateOnlyFormat();
            Date curDate = df.parse(curDateString);
            int duration = request.getParameter("duration") == null ? 0 : Integer.parseInt(request.getParameter("duration"));
            boolean isdistibutive = StringUtil.getBoolean(request.getParameter("isdistributive"));
            int datefilter = StringUtil.getInteger(request.getParameter("datefilter")); // 0 = Invoice Due date OR 1 = Invoice date
            
            int noOfInterval = StringUtil.isNullOrEmpty(request.getParameter("noOfInterval"))? 7 : Integer.parseInt(request.getParameter("noOfInterval"));

            double amountdue1 = 0;
            double amountdue2 = 0;
            double amountdue3 = 0;
            double amountdue4 = 0;
            double amountdue5 = 0;
            double amountdue6 = 0;
            double amountdue7 = 0;
            double amountdue8 = 0;
            double amountdue9 = 0;
            double amountdue10 = 0;
            double amountdue11 = 0;
            double amountdueinbase1 = 0;
            double amountdueinbase2 = 0;
            double amountdueinbase3 = 0;
            double amountdueinbase4 = 0;
            double amountdueinbase5 = 0;
            double amountdueinbase6 = 0;
            double amountdueinbase7 = 0;
            double amountdueinbase8 = 0;
            double amountdueinbase9 = 0;
            double amountdueinbase10 = 0;
            double amountdueinbase11 = 0;
            Calendar oneDayBeforeCal1 = Calendar.getInstance();
            Calendar cal1 = Calendar.getInstance();
            Calendar cal2 = Calendar.getInstance();
            Calendar cal3 = Calendar.getInstance();
            Calendar cal4 = Calendar.getInstance();
            Calendar cal5 = Calendar.getInstance();
            Calendar cal6 = Calendar.getInstance();
            Calendar cal7 = Calendar.getInstance();
            Calendar cal8 = Calendar.getInstance();
            Calendar cal9 = Calendar.getInstance();
            Calendar cal10 = Calendar.getInstance();

            oneDayBeforeCal1.setTime(curDate);
            cal1.setTime(curDate);
            cal2.setTime(curDate);
            cal3.setTime(curDate);
            cal4.setTime(curDate);
            cal5.setTime(curDate);
            cal6.setTime(curDate);
            cal7.setTime(curDate);
            cal8.setTime(curDate);
            cal9.setTime(curDate);
            cal10.setTime(curDate);
            oneDayBeforeCal1.add(Calendar.DAY_OF_YEAR, -1);
            cal2.add(Calendar.DAY_OF_YEAR, -duration);
            cal3.add(Calendar.DAY_OF_YEAR, -(duration * 2));
            cal4.add(Calendar.DAY_OF_YEAR, -(duration * 3));
            cal5.add(Calendar.DAY_OF_YEAR, -(duration * 4));
            cal6.add(Calendar.DAY_OF_YEAR, -(duration * 5));
            cal7.add(Calendar.DAY_OF_YEAR, -(duration * 6));
            cal8.add(Calendar.DAY_OF_YEAR, -(duration * 7));
            cal9.add(Calendar.DAY_OF_YEAR, -(duration * 8));
            cal10.add(Calendar.DAY_OF_YEAR, -(duration * 9));
            
            
            Date oneDayBeforeCal1Date = null;
            Date cal1Date = null;
            Date cal2Date = null;
            Date cal3Date = null;
            Date cal4Date = null;
            Date cal5Date = null;
            Date cal6Date = null;
            Date cal7Date = null;
            Date cal8Date = null;
            Date cal9Date = null;
            Date cal10Date = null;

            String oneDayBeforeCal1String = authHandler.getDateOnlyFormat().format(oneDayBeforeCal1.getTime());
            oneDayBeforeCal1Date = authHandler.getDateOnlyFormat().parse(oneDayBeforeCal1String);

            String cal1String = authHandler.getDateOnlyFormat().format(cal1.getTime());
            cal1Date = authHandler.getDateOnlyFormat().parse(cal1String);

            String cal2String = authHandler.getDateOnlyFormat().format(cal2.getTime());
            cal2Date = authHandler.getDateOnlyFormat().parse(cal2String);

            String cal3String = authHandler.getDateOnlyFormat().format(cal3.getTime());
            cal3Date = authHandler.getDateOnlyFormat().parse(cal3String);

            String cal4String = authHandler.getDateOnlyFormat().format(cal4.getTime());
            cal4Date = authHandler.getDateOnlyFormat().parse(cal4String);

            String cal5String = authHandler.getDateOnlyFormat().format(cal5.getTime());
            cal5Date = authHandler.getDateOnlyFormat().parse(cal5String);

            String cal6String = authHandler.getDateOnlyFormat().format(cal6.getTime());
            cal6Date = authHandler.getDateOnlyFormat().parse(cal6String);

            String cal7String = authHandler.getDateOnlyFormat().format(cal7.getTime());
            cal7Date = authHandler.getDateOnlyFormat().parse(cal7String);

            String cal8String = authHandler.getDateOnlyFormat().format(cal8.getTime());
            cal8Date = authHandler.getDateOnlyFormat().parse(cal8String);

            String cal9String = authHandler.getDateOnlyFormat().format(cal9.getTime());
            cal9Date = authHandler.getDateOnlyFormat().parse(cal9String);

            String cal10String = authHandler.getDateOnlyFormat().format(cal10.getTime());
            cal10Date = authHandler.getDateOnlyFormat().parse(cal10String);

           HashMap invoiceRequestParams = AccInvoiceServiceHandler.getInvoiceRequestMap(request); 
            invoiceRequestParams.put(Constants.moduleid, Constants.Acc_Invoice_ModuleId);
            invoiceRequestParams.put("isBadDebtInvoices", !StringUtil.isNullOrEmpty(request.getParameter("isBadDebtInvoices")) ? Boolean.parseBoolean(request.getParameter("isBadDebtInvoices")) : false);
            invoiceRequestParams.put("ignorezero", !StringUtil.isNullOrEmpty(request.getParameter("ignorezero")) ? Boolean.parseBoolean(request.getParameter("ignorezero")) : false);
            invoiceRequestParams.put("report", !StringUtil.isNullOrEmpty(request.getParameter("report")) ? Boolean.parseBoolean(request.getParameter("report")) : false);
            invoiceRequestParams.put("isSOA", request.getAttribute("isSOA") != null ? (Boolean) request.getAttribute("isSOA") : false);
            invoiceRequestParams.put("oneDayBeforeCal1", oneDayBeforeCal1);
            invoiceRequestParams.put("cal1", cal1);
            invoiceRequestParams.put("cal2", cal2);
            invoiceRequestParams.put("cal3", cal3);
            invoiceRequestParams.put("cal4", cal4);
            invoiceRequestParams.put("cal5", cal5);
            invoiceRequestParams.put("cal6", cal6);
            invoiceRequestParams.put("cal7", cal7);
            invoiceRequestParams.put("cal8", cal8);
            invoiceRequestParams.put("cal9", cal9);
            invoiceRequestParams.put("cal10", cal10);
            invoiceRequestParams.put("onlyamountdue", !StringUtil.isNullOrEmpty(request.getParameter("onlyamountdue")) ? Boolean.parseBoolean(request.getParameter("onlyamountdue")) : false);
            invoiceRequestParams.put("globalCurrencyID", AccountingManager.getGlobalCurrencyidFromRequest(request));
            invoiceRequestParams.put("requestCompanyID", AccountingManager.getCompanyidFromRequest(request));
            invoiceRequestParams.put("isAgedSummary", true);
            invoiceRequestParams.put("isAgedReceivables", true);
            invoiceRequestParams.put("isAged", true);

            HashMap<String, String> customFieldMap = new HashMap<String, String>();
            HashMap<String, String> customDateFieldMap = new HashMap<String, String>();
            HashMap<String, Object> fieldrequestParams = new HashMap();
            fieldrequestParams.put(Constants.filter_names, Arrays.asList(Constants.companyid, Constants.moduleid));
            fieldrequestParams.put(Constants.filter_values, Arrays.asList(sessionHandlerImpl.getCompanyid(request), Constants.Acc_Customer_ModuleId));
            HashMap<String, String> replaceFieldMap = new HashMap<String, String>();
            HashMap<String, Integer> FieldMap = accAccountDAOobj.getFieldParamsCustomMap(fieldrequestParams, replaceFieldMap, customFieldMap, customDateFieldMap);
            
            
            //********************pging******************
             String start = "";
            int previousStart=0;
            int limit =0;
            String firstCustomerId="";
            String lastCustomerId="";
            boolean flag=true;
            int skipRecords=1;
            boolean checkForEx=false;
            int count=0;
            if (StringUtil.getBoolean(request.getParameter("checkforex"))) {
                checkForEx = StringUtil.getBoolean(request.getParameter("checkforex"));
            }
            if (!checkForEx) {
                if (!StringUtil.isNullOrEmpty(request.getParameter(Constants.start))) {
                 start = request.getParameter(Constants.start);
                }
                if (!StringUtil.isNullOrEmpty(request.getParameter(Constants.limit))) {
                 limit = Integer.parseInt(request.getParameter(Constants.limit));
                }
                if (!StringUtil.isNullOrEmpty(request.getParameter("lastcustomerid"))) {
                    lastCustomerId = request.getParameter("lastcustomerid");
                }

                if (!StringUtil.isNullOrEmpty(request.getParameter("fCustomerId"))) {
                    if (Integer.parseInt(start) == 0) {
                        firstCustomerId = "";
                    } else {
                        firstCustomerId = request.getParameter("fCustomerId");
                    }
                }
                if (!StringUtil.isNullOrEmpty(request.getParameter("previousStart"))) {
                    previousStart = Integer.parseInt(request.getParameter("previousStart"));
                }
            }
           //********************pging******************
            
            

            HashMap<String, Object> requestParams = getCustomerRequestMap(request);
            requestParams.put("custVendorID", request.getParameter("custVendorID") != null ? request.getParameter("custVendorID") : "");
            KwlReturnObject customerResult = accCustomerDAOobj.getCustomerWithCurrencyForAgedReceivables(requestParams);
            List<Object[]> customerList = customerResult.getEntityList();
            int j = 0;
            List customFieldList = new ArrayList();
            for (Object[] oj : customerList) {
                JSONArray invjarr = new JSONArray();
                JSONObject custJobj = new JSONObject();
                String custid = oj[0].toString();
                String currencyidCust = oj[1].toString();
                String currencySymbolCust = oj[3].toString();
                String currencyNameCust = oj[2].toString();
                invoiceRequestParams.put(Constants.customerid, custid);
                invoiceRequestParams.put("accid", custid);
                if (invoiceRequestParams.containsKey(Constants.start)) { 
                    invoiceRequestParams.remove(Constants.start);
                }
                if (invoiceRequestParams.containsKey(Constants.limit)) {
                    invoiceRequestParams.remove(Constants.limit);
                }
                getInvoiceJsonForagedReprtbasedOnDimension(invjarr, invoiceRequestParams, request);

                if (invjarr.length() > 0) {
                    amountdue1 = amountdue2 = amountdue3 = amountdue4 = amountdueinbase1 = amountdueinbase2 = amountdueinbase3 = amountdueinbase4 = 0;
                    amountdue5 = amountdue6 = amountdue7 = amountdue8 = amountdueinbase5 = amountdueinbase6 = amountdueinbase7 = amountdueinbase8 = 0;
                    String personID = null;
                    String personName = null;
                    String aliasname = "";
                    String amountdueInBase = null;
                    String currencyid = null;

                    for (int i = 0; i < invjarr.length(); i++) {
                        JSONObject invobj = invjarr.getJSONObject(i);
                        personID = (invobj.has(InvoiceConstants.personid)) ? invobj.getString(InvoiceConstants.personid) : "";
                        personName = (invobj.has(InvoiceConstants.personname)) ? invobj.getString(InvoiceConstants.personname) : "";
                        aliasname = (invobj.has(InvoiceConstants.aliasname)) ? invobj.getString(InvoiceConstants.aliasname) : "";
                        amountdueInBase = invobj.getString(InvoiceConstants.amountdueinbase);
                        currencyid = (invobj.has(Constants.currencyKey)) ? invobj.getString(Constants.currencyKey) : "";
                        Date dueDate = new Date();
                        if (datefilter == 0 || datefilter == Constants.agedDueDate0to30Filter) {
                            dueDate = authHandler.getDateOnlyFormat().parse(invobj.getString(Constants.duedate));
                        } else {
                            dueDate = authHandler.getDateOnlyFormat().parse(invobj.getString("date"));
                        }
                        double amountdue = invobj.getDouble("amountdue");
                        double amountdueinbase = invobj.getDouble(InvoiceConstants.amountdueinbase);

                        boolean isopeningBalanceTransaction = invobj.optBoolean("isOpeningBalanceTransaction", false);
                        boolean isConversionRateFromCurrencyToBase = invobj.optBoolean("isConversionRateFromCurrencyToBase", false);

                        KwlReturnObject bAmt = null;
                        Date date = null;
                        if (!invobj.getString("date").equals("")) {
                            date = df.parse(invobj.getString("date"));
                        }
                        if (isopeningBalanceTransaction && isConversionRateFromCurrencyToBase) {// if Transaction is opening balance Transaction and Conversion rate is taken from user is Currency to base then following method will be called.
                            bAmt = accCurrencyDAOobj.getOneCurrencyToOtherModifiedAccordingToCurrencyToBaseExchangeRate(invoiceRequestParams, amountdue, currencyid, currencyidCust, date, invobj.getDouble("externalcurrencyrate"));
                        } else {
                            bAmt = accCurrencyDAOobj.getOneCurrencyToOtherModified(invoiceRequestParams, amountdue, currencyid, currencyidCust, date, invobj.getDouble("externalcurrencyrate"));
                        }
                        amountdue = authHandler.round((Double) bAmt.getEntityList().get(0), companyid);
                        if (isdistibutive) {
                            if (dueDate.after(oneDayBeforeCal1Date)) {
                                if (dueDate.equals(cal1Date) && (datefilter == Constants.agedDueDate0to30Filter || datefilter == Constants.agedInvoiceDate0to30Filter)) {
                                    amountdueinbase2 += amountdueinbase;
                                    amountdue2 += amountdue;
                                } else {
                                    amountdueinbase1 += amountdueinbase;
                                    amountdue1 += amountdue;
                                }
                            } else if ((cal2Date.before(dueDate) || cal2Date.equals(dueDate)) && cal1Date.after(dueDate)) {
                                amountdueinbase2 += amountdueinbase;
                                amountdue2 += amountdue;
                            } else if ((cal3Date.before(dueDate) || cal3Date.equals(dueDate)) && cal2Date.after(dueDate)) {
                                amountdueinbase3 += amountdueinbase;
                                amountdue3 += amountdue;
                            } else if ((cal4Date.before(dueDate) || cal4Date.equals(dueDate)) && cal3Date.after(dueDate)) {
                                amountdueinbase4 += amountdueinbase;
                                amountdue4 += amountdue;
                            } else if ((cal5Date.before(dueDate) || cal5Date.equals(dueDate)) && cal4Date.after(dueDate)) {
                                amountdueinbase5 += amountdueinbase;
                                amountdue5 += amountdue;
                            } else if ((cal6Date.before(dueDate) || cal6Date.equals(dueDate)) && cal5Date.after(dueDate)) {
                                amountdueinbase6 += amountdueinbase;
                                amountdue6 += amountdue;
                            } else if ((cal7Date.before(dueDate) || cal7Date.equals(dueDate)) && cal6Date.after(dueDate)) {
                                amountdueinbase7 += amountdueinbase;
                                amountdue7 += amountdue;
                            } else if ((cal8Date.before(dueDate) || cal8Date.equals(dueDate)) && cal7Date.after(dueDate)) {
                                amountdueinbase8 += amountdueinbase;
                                amountdue8 += amountdue;
                            } else if ((cal9Date.before(dueDate) || cal9Date.equals(dueDate)) && cal8Date.after(dueDate)) {
                                amountdueinbase9 += amountdueinbase;
                                amountdue9 += amountdue;
                            } else if ((cal10Date.before(dueDate) || cal10Date.equals(dueDate)) && cal9Date.after(dueDate)) {
                                amountdueinbase10 += amountdueinbase;
                                amountdue10 += amountdue;
                            } else {
                                amountdueinbase11 += amountdueinbase;
                                amountdue11 += amountdue;
                            }

                            switch (noOfInterval) {
                                case 2:
                                    amountdue3 += amountdue4 + amountdue5 + amountdue6 + amountdue7 + amountdue8 + amountdue9 + amountdue10 + amountdue11;
                                    amountdue4 = amountdue5 = amountdue6 = amountdue7 = amountdue8 = amountdue9 = amountdue10 = amountdue11 = 0;
                                    amountdueinbase3 += amountdueinbase4 + amountdueinbase5 + amountdueinbase6 + amountdueinbase7 + amountdueinbase8 + amountdueinbase9 + amountdueinbase10 + amountdueinbase11;
                                    amountdueinbase4 = amountdueinbase5 = amountdueinbase6 = amountdueinbase7 = amountdueinbase8 = amountdueinbase9 = amountdueinbase10 = amountdueinbase11 = 0;
                                    break;
                                case 3:
                                    amountdue4 += amountdue5 + amountdue6 + amountdue7 + amountdue8 + amountdue9 + amountdue10 + amountdue11;
                                    amountdue5 = amountdue6 = amountdue7 = amountdue8 = amountdue9 = amountdue10 = amountdue11 = 0;
                                    amountdueinbase4 += amountdueinbase5 + amountdueinbase6 + amountdueinbase7 + amountdueinbase8 + amountdueinbase9 + amountdueinbase10 + amountdueinbase11;
                                    amountdueinbase5 = amountdueinbase6 = amountdueinbase7 = amountdueinbase8 = amountdueinbase9 = amountdueinbase10 = amountdueinbase11 = 0;
                                    break;
                                case 4:
                                    amountdue5 += amountdue6 + amountdue7 + amountdue8 + amountdue9 + amountdue10 + amountdue11;
                                    amountdue6 = amountdue7 = amountdue8 = amountdue9 = amountdue10 = amountdue11 = 0;
                                    amountdueinbase5 += amountdueinbase6 + amountdueinbase7 + amountdueinbase8 + amountdueinbase9 + amountdueinbase10 + amountdueinbase11;
                                    amountdueinbase6 = amountdueinbase7 = amountdueinbase8 = amountdueinbase9 = amountdueinbase10 = amountdueinbase11 = 0;
                                    break;
                                case 5:
                                    amountdue6 += amountdue7 + amountdue8 + amountdue9 + amountdue10 + amountdue11;
                                    amountdue7 = amountdue8 = amountdue9 = amountdue10 = amountdue11 = 0;
                                    amountdueinbase6 += amountdueinbase7 + amountdueinbase8 + amountdueinbase9 + amountdueinbase10 + amountdueinbase11;
                                    amountdueinbase7 = amountdueinbase8 = amountdueinbase9 = amountdueinbase10 = amountdueinbase11 = 0;
                                    break;
                                case 6:
                                    amountdue7 += amountdue8 + amountdue9 + amountdue10 + amountdue11;
                                    amountdue8 = amountdue9 = amountdue10 = amountdue11 = 0;
                                    amountdueinbase7 += amountdueinbase8 + amountdueinbase9 + amountdueinbase10 + amountdueinbase11;
                                    amountdueinbase8 = amountdueinbase9 = amountdueinbase10 = amountdueinbase11 = 0;
                                    break;
                                case 7:
                                    amountdue8 += amountdue9 + amountdue10 + amountdue11;
                                    amountdue9 = amountdue10 = amountdue11 = 0;
                                    amountdueinbase8 += amountdueinbase9 + amountdueinbase10 + amountdueinbase11;
                                    amountdueinbase9 = amountdueinbase10 = amountdueinbase11 = 0;
                                    break;
                                case 8:
                                    amountdue9 += amountdue10 + amountdue11;
                                    amountdue10 = amountdue11 = 0;
                                    amountdueinbase9 += amountdueinbase10 + amountdueinbase11;
                                    amountdueinbase10 = amountdueinbase11 = 0;
                                    break;
                                case 9:
                                    amountdue10 += amountdue11;
                                    amountdue11 = 0;
                                    amountdueinbase10 += amountdueinbase11;
                                    amountdueinbase11 = 0;
                                    break;
                            }

                        } else {
                            if (dueDate.after(oneDayBeforeCal1Date) && (dueDate.before(cal1Date) || dueDate.equals(cal1Date))) {
                                amountdueinbase1 += amountdueinbase;
                                amountdue1 += amountdue;
                            } else if (dueDate.after(cal2Date) || dueDate.equals(cal2Date)) {
                                amountdueinbase2 += amountdueinbase;
                                amountdue2 += amountdue;
                            } else if (dueDate.after(cal3Date) || dueDate.equals(cal3Date)) {
                                amountdueinbase3 += amountdueinbase;
                                amountdue3 += amountdue;
                            } else {
                                amountdueinbase4 += amountdueinbase;
                                amountdue4 += amountdue;
                            }
                        }
                    }
                    if (invjarr.length() > 0) {
                        JSONObject jObj = new JSONObject();
                        jObj.put(InvoiceConstants.personid, personID);
                        jObj.put(InvoiceConstants.amountdueinbase, amountdueInBase);
                        jObj.put(InvoiceConstants.personname, personName);
                        jObj.put(InvoiceConstants.aliasname, aliasname);
                        jObj.put("amountdue1", Double.valueOf(authHandler.formattedAmount(amountdue1, companyid)));
                        jObj.put("amountdue2", Double.valueOf(authHandler.formattedAmount(amountdue2, companyid)));
                        jObj.put("amountdue3", Double.valueOf(authHandler.formattedAmount(amountdue3, companyid)));
                        jObj.put("amountdue4", Double.valueOf(authHandler.formattedAmount(amountdue4, companyid)));
                        jObj.put("amountdue5", Double.valueOf(authHandler.formattedAmount(amountdue5, companyid)));
                        jObj.put("amountdue6", Double.valueOf(authHandler.formattedAmount(amountdue6, companyid)));
                        jObj.put("amountdue7", Double.valueOf(authHandler.formattedAmount(amountdue7, companyid)));
                        jObj.put("amountdue8", Double.valueOf(authHandler.formattedAmount(amountdue8, companyid)));
                        jObj.put("amountdue9", Double.valueOf(authHandler.formattedAmount(amountdue9, companyid)));
                        jObj.put("amountdue10", Double.valueOf(authHandler.formattedAmount(amountdue10, companyid)));
                        jObj.put("amountdue11", Double.valueOf(authHandler.formattedAmount(amountdue11, companyid)));
                        
                        jObj.put("amountdueinbase1", Double.valueOf(authHandler.formattedAmount(amountdueinbase1, companyid)));
                        jObj.put("amountdueinbase2", Double.valueOf(authHandler.formattedAmount(amountdueinbase2, companyid)));
                        jObj.put("amountdueinbase3", Double.valueOf(authHandler.formattedAmount(amountdueinbase3, companyid)));
                        jObj.put("amountdueinbase4", Double.valueOf(authHandler.formattedAmount(amountdueinbase4, companyid)));
                        jObj.put("amountdueinbase5", Double.valueOf(authHandler.formattedAmount(amountdueinbase5, companyid)));
                        jObj.put("amountdueinbase6", Double.valueOf(authHandler.formattedAmount(amountdueinbase6, companyid)));
                        jObj.put("amountdueinbase7", Double.valueOf(authHandler.formattedAmount(amountdueinbase7, companyid)));
                        jObj.put("amountdueinbase8", Double.valueOf(authHandler.formattedAmount(amountdueinbase8, companyid)));
                        jObj.put("amountdueinbase9", Double.valueOf(authHandler.formattedAmount(amountdueinbase9, companyid)));
                        jObj.put("amountdueinbase10", Double.valueOf(authHandler.formattedAmount(amountdueinbase10, companyid)));
                        jObj.put("amountdueinbase11", Double.valueOf(authHandler.formattedAmount(amountdueinbase11, companyid)));
                        jObj.put(InvoiceConstants.currencysymbol, currencySymbolCust);
                        jObj.put(Constants.currencyKey, currencyidCust);
                        jObj.put(InvoiceConstants.currencyname, currencyNameCust);
                        double amountdue = Double.valueOf(authHandler.formattedAmount((amountdue1 + amountdue2 + amountdue3 + amountdue4 + amountdue5 + amountdue6 + amountdue7 + amountdue8), companyid));
                        jObj.put("total", amountdue);
                        double amountdueinbase = Double.valueOf(authHandler.formattedAmount((amountdueinbase1 + amountdueinbase2 + amountdueinbase3 + amountdueinbase4 + amountdueinbase5 + amountdueinbase6 + amountdueinbase7 + amountdueinbase8), companyid));
                        jObj.put("totalinbase", amountdueinbase);
                        
                        String customFieldMapValues = "";
                        Map<String, Object> variableMap = new HashMap<String, Object>();
                        KwlReturnObject custumObjresult = accountingHandlerDAOobj.getObject(CustomerCustomData.class.getName(), personID);
                        replaceFieldMap = new HashMap<String, String>();
                        if (custumObjresult != null && custumObjresult.getEntityList().size() > 0) {
                            CustomerCustomData jeDetailCustom = (CustomerCustomData) custumObjresult.getEntityList().get(0);
                            if (jeDetailCustom != null) {
                                AccountingManager.setCustomColumnValues(jeDetailCustom, FieldMap, replaceFieldMap, variableMap);
                                JSONObject params = new JSONObject();
                                params.put(Constants.isExport, true);
                                fieldDataManagercntrl.addCustomData(variableMap, customFieldMap, customDateFieldMap, custJobj, params);
                            }
                        }
                        
                       for (CustomizeReportMapping customizeReportMapping : customizeReportList) {
                            String column="Custom_"+customizeReportMapping.getDataIndex();
                             
                            if (custJobj.has(column)) {
                                customFieldMapValues = custJobj.getString(column);
                                if (!customFieldList.contains(customizeReportMapping.getDataIndex())) {
                                    jobjTemp = new JSONObject();
                                    jobjTemp.put("name", customizeReportMapping.getDataIndex());
                                    jarrRecords.put(jobjTemp);

                                    jobjTemp = new JSONObject();
                                    jobjTemp.put("header", customizeReportMapping.getDataHeader());
                                    jobjTemp.put("dataIndex", customizeReportMapping.getDataIndex());
                                    jobjTemp.put("width", 150);
                                    jobjTemp.put("pdfwidth", 150);
                                    jobjTemp.put("custom", "true");
                                    jarrColumns.put(jobjTemp);

                                    customFieldList.add(customizeReportMapping.getDataIndex());
                                }
                                    jObj.put(customizeReportMapping.getDataIndex(), customFieldMapValues);
                            }else {
                                    if (!customFieldList.contains(customizeReportMapping.getDataIndex())) {
                                        jobjTemp = new JSONObject();
                                        jobjTemp.put("name", customizeReportMapping.getDataIndex());
                                        jarrRecords.put(jobjTemp);

                                        jobjTemp = new JSONObject();
                                        jobjTemp.put("header", customizeReportMapping.getDataHeader());
                                        jobjTemp.put("dataIndex", customizeReportMapping.getDataIndex());
                                        jobjTemp.put("width", 150);
                                        jobjTemp.put("pdfwidth", 150);
                                        jobjTemp.put("custom", "true");
                                        jarrColumns.put(jobjTemp);
                                        customFieldList.add(customizeReportMapping.getDataIndex());
                                    }

                                }
                            
                        }
                        //**********************paging***************************
                         if(!checkForEx && !StringUtil.isNullOrEmpty(start)){
                        if ((previousStart > Integer.parseInt(start))) {
                            if (skipRecords < Integer.parseInt(start)) {
                                skipRecords++;
                                continue;
                            }
                            if (firstCustomerId.equals(custid)) {
                                break;
                            }
                        } else if ((previousStart < (Integer.parseInt(start))+1)) {
                            if (skipRecords < (Integer.parseInt(start))+1) {
                                skipRecords++;
                                continue;
                            }
                        }
                        count++;
                        if (count != limit) {
                            jArr.put(jObj);
                        }
                        if (count == 1) {
                            firstCustomerId = custid.toString();
                            jObj.put("fCustomerId", firstCustomerId);
                        }
                        if (count == limit) {
                            lastCustomerId = custid.toString();
                            jObj.put("customerId", lastCustomerId);
                            jObj.put(Constants.start, start);
                            jArr.put(jObj);
                            break;
                        }
                    }else{
                              jArr.put(jObj);
                        }
                    //**********************paging***************************
                    }
                }
            }
           
           //***********ColumnModel and rec******************************* 
            jobjTemp = new JSONObject();
            jobjTemp.put("name", "currencysymbol");
            jarrRecords.put(jobjTemp);
            jobjTemp = new JSONObject();
            jobjTemp.put("name", "currencyid");
            jarrRecords.put(jobjTemp);
            jobjTemp = new JSONObject();
            jobjTemp.put("name", "currencyname");
            jarrRecords.put(jobjTemp);
            jobjTemp = new JSONObject();
            jobjTemp.put("name", "personname");
            jarrRecords.put(jobjTemp);

            jobjTemp = new JSONObject();
            jobjTemp.put("header", "Customer Name");
            jobjTemp.put("dataIndex", "personname");
            jobjTemp.put("width", 150);
            jobjTemp.put("pdfwidth", 150);
            jobjTemp.put("sortable", true);
            jobjTemp.put("align", "left");
            jarrColumns.put(jobjTemp);

            jobjTemp = new JSONObject();
            jobjTemp.put("name", "currencyname");
            jarrRecords.put(jobjTemp);

            jobjTemp = new JSONObject();
            jobjTemp.put("header", "Currency");
            jobjTemp.put("dataIndex", "currencyname");
            jobjTemp.put("width", 150);
            jobjTemp.put("pdfwidth", 150);
            jobjTemp.put("sortable", true);
            jobjTemp.put("align", "right");
            jarrColumns.put(jobjTemp);
            
            jobjTemp = new JSONObject();
            jobjTemp.put("name", "amountdue1");
            jarrRecords.put(jobjTemp);

            jobjTemp = new JSONObject();
            jobjTemp.put("header", "Current");
            jobjTemp.put("dataIndex", "amountdue1");
            jobjTemp.put("width", 150);
            jobjTemp.put("pdfwidth", 150);
            jobjTemp.put("sortable", true);
            jobjTemp.put("align", "right");
            jarrColumns.put(jobjTemp);

            jobjTemp = new JSONObject();
            jobjTemp.put("name", "amountdue2");
            jarrRecords.put(jobjTemp);

            jobjTemp = new JSONObject();
            jobjTemp.put("header", 1 + "-" + duration + " days");
            jobjTemp.put("dataIndex", "amountdue2");
            jobjTemp.put("width", 150);
            jobjTemp.put("pdfwidth", 150);
            jobjTemp.put("sortable", true);
            jobjTemp.put("align", "right");
            jarrColumns.put(jobjTemp);

            jobjTemp = new JSONObject();
            jobjTemp.put("name", "amountdue3");
            jarrRecords.put(jobjTemp);

            jobjTemp = new JSONObject();
            jobjTemp.put("header", duration + 1 + "-" + duration * 2 + " days");
            jobjTemp.put("dataIndex", "amountdue3");
            jobjTemp.put("width", 150);
            jobjTemp.put("pdfwidth", 150);
            jobjTemp.put("sortable", true);
            jobjTemp.put("align", "right");
            jarrColumns.put(jobjTemp);


            
            

            if (isdistibutive) {
                jobjTemp = new JSONObject();
                jobjTemp.put("name", "amountdue4");
                jarrRecords.put(jobjTemp);

                jobjTemp = new JSONObject();
                jobjTemp.put("header", duration * 2 + 1 + "-" + duration * 3 + " days");
                jobjTemp.put("dataIndex", "amountdue4");
                jobjTemp.put("width", 150);
                jobjTemp.put("pdfwidth", 150);
                jobjTemp.put("sortable", true);
                jobjTemp.put("align", "right");
                jarrColumns.put(jobjTemp);

                jobjTemp = new JSONObject();
                jobjTemp.put("name", "amountdue5");
                jarrRecords.put(jobjTemp);

                jobjTemp = new JSONObject();
                jobjTemp.put("header", duration * 3 + 1 + "-" + duration * 4 + " days");
                jobjTemp.put("dataIndex", "amountdue5");
                jobjTemp.put("width", 150);
                jobjTemp.put("pdfwidth", 150);
                jobjTemp.put("sortable", true);
                jobjTemp.put("align", "right");
                jarrColumns.put(jobjTemp);

                jobjTemp = new JSONObject();
                jobjTemp.put("name", "amountdue6");
                jarrRecords.put(jobjTemp);

                jobjTemp = new JSONObject();
                jobjTemp.put("header", duration * 4 + 1 + "-" + duration * 5 + " days");
                jobjTemp.put("dataIndex", "amountdue6");
                jobjTemp.put("width", 150);
                jobjTemp.put("pdfwidth", 150);
                jobjTemp.put("sortable", true);
                jobjTemp.put("align", "right");
                jarrColumns.put(jobjTemp);

                jobjTemp = new JSONObject();
                jobjTemp.put("name", "amountdue7");
                jarrRecords.put(jobjTemp);

                jobjTemp = new JSONObject();
                jobjTemp.put("header", duration * 5 + 1 + "-" + duration * 6 + " days");
                jobjTemp.put("dataIndex", "amountdue7");
                jobjTemp.put("width", 150);
                jobjTemp.put("pdfwidth", 150);
                jobjTemp.put("sortable", true);
                jobjTemp.put("align", "right");
                jarrColumns.put(jobjTemp);

                jobjTemp = new JSONObject();
                jobjTemp.put("name", "amountdue8");
                jarrRecords.put(jobjTemp);

                jobjTemp = new JSONObject();
                jobjTemp.put("header", ">" + duration * 6 + " days");
                jobjTemp.put("dataIndex", "amountdue8");
                jobjTemp.put("width", 150);
                jobjTemp.put("pdfwidth", 150);
                jobjTemp.put("sortable", true);
                jobjTemp.put("align", "right");
                jarrColumns.put(jobjTemp);
            } else {
                jobjTemp = new JSONObject();
                jobjTemp.put("name", "amountdue4");
                jarrRecords.put(jobjTemp);

                jobjTemp = new JSONObject();
                jobjTemp.put("header", ">" + duration * 3 + " days");
                jobjTemp.put("dataIndex", "amountdue4");
                jobjTemp.put("width", 150);
                jobjTemp.put("pdfwidth", 150);
                jobjTemp.put("sortable", true);
                jobjTemp.put("align", "right");
                jarrColumns.put(jobjTemp);
            }
            
            jobjTemp = new JSONObject();
            jobjTemp.put("name", "total");
            jarrRecords.put(jobjTemp);

            jobjTemp = new JSONObject();
            jobjTemp.put("header", "Total");
            jobjTemp.put("dataIndex", "total");
            jobjTemp.put("width", 150);
            jobjTemp.put("pdfwidth", 150);
            jobjTemp.put("sortable", true);
            jobjTemp.put("align", "right");
            jarrColumns.put(jobjTemp);
            
             jobjTemp = new JSONObject();
            jobjTemp.put("name", "totalinbase");
            jarrRecords.put(jobjTemp);

            jobjTemp = new JSONObject();
            jobjTemp.put("header", "Total in Base Currency("+baseCurrencyName+")");
            jobjTemp.put("dataIndex", "totalinbase");
            jobjTemp.put("width", 150);
            jobjTemp.put("pdfwidth", 150);
            jobjTemp.put("sortable", true);
            jobjTemp.put("align", "right");
            jarrColumns.put(jobjTemp);

           //***********ColumnModel and rec******************************* 
            
            
            //***********final jobj***************************************
            commData.put("success", true);
            commData.put("coldata", jArr);
            commData.put("columns", jarrColumns);
            jMeta.put("totalProperty", "totalCount");
            jMeta.put("root", "coldata");
            commData.put(Constants.RES_TOTALCOUNT, jArr.length());
            jMeta.put("fields", jarrRecords);
            commData.put("metaData", jMeta);
            JSONArray jcom = new JSONArray();
            jcom.put(commData);
            jobj.put("valid", true);
            
            if (checkForEx) {
                jobj.put("data", jArr);
            } else {
                jobj.put("data", commData);
            }
            //***********final jobj***************************************
            return jobj;
        } catch (Exception ex) {
            throw ServiceException.FAILURE("AccInvoiceServiceImpl.getAgedReportSummaryBasedOnCustomer : " + ex.getMessage(), ex);
        }
    }

    @Override
    public JSONObject getAgedReportSummaryBasedOnDimension(HttpServletRequest request) throws ServiceException {
        JSONArray jArr = new JSONArray();
        JSONObject jobj = new JSONObject();
        try {
            String companyid = sessionHandlerImpl.getCompanyid(request);
            JSONObject commData = new JSONObject();
            JSONObject jMeta = new JSONObject();
            JSONArray jarrColumns = new JSONArray();
            JSONArray jarrRecords = new JSONArray();
            JSONObject jobjTemp = new JSONObject();
            
            KwlReturnObject cmpresult = accountingHandlerDAOobj.getObject(Company.class.getName(), sessionHandlerImpl.getCompanyid(request));
            Company company = (Company) cmpresult.getEntityList().get(0);
            String baseCurrencyName="";
            if (company != null && company.getCurrency() != null) {
                baseCurrencyName = company.getCurrency().getName();
            }
            int reportId=808;
            
            HashMap hashMap=new HashMap();
            hashMap.put("companyId", company.getCompanyID());
            hashMap.put("reportId", reportId);
            KwlReturnObject customizeReportResult = accountingHandlerDAOobj.getCustomizeReportViewMappingField(hashMap);
            List<CustomizeReportMapping> customizeReportList = customizeReportResult.getEntityList();
            
//            String curDateString = (!StringUtil.isNullOrEmpty(request.getParameter("curdate"))) ? request.getParameter("curdate") : ((!StringUtil.isNullOrEmpty(request.getParameter("stdate"))) ? request.getParameter("stdate") : request.getParameter(Constants.REQ_startdate));
            String curDateString = !(StringUtil.isNullOrEmpty(request.getParameter(Constants.asOfDate))) ? request.getParameter(Constants.asOfDate) : request.getParameter(Constants.curdate);
            DateFormat df = authHandler.getDateOnlyFormat();
            Date curDate = df.parse(curDateString);
            int duration = request.getParameter("duration") == null ? 0 : Integer.parseInt(request.getParameter("duration"));
            boolean isdistibutive = StringUtil.getBoolean(request.getParameter("isdistributive"));
            int datefilter = StringUtil.getInteger(request.getParameter("datefilter")); // 0 = Invoice Due date OR 1 = Invoice date
            int noOfInterval = StringUtil.isNullOrEmpty(request.getParameter("noOfInterval"))? 7 : Integer.parseInt(request.getParameter("noOfInterval"));
            
            String fieldid = "";
            KwlReturnObject kwlObj = null;
            List fieldcombodataList=new ArrayList();
            FieldParams fparams=null;
            JSONObject searchJobj=new JSONObject();
            JSONArray searchArray=new JSONArray();
            
            JSONObject finalSearchObj= new JSONObject();
            if (!StringUtil.isNullOrEmpty(request.getParameter(Constants.Acc_fieldid))) {
                fieldid = !StringUtil.isNullOrEmpty(request.getParameter(Constants.Acc_fieldid)) ? request.getParameter(Constants.Acc_fieldid) : "";
                KwlReturnObject fieldparamsObj = accountingHandlerDAOobj.getObject(FieldParams.class.getName(), fieldid);
                fparams = (FieldParams) fieldparamsObj.getEntityList().get(0);
                searchJobj.put("column", fparams.getId());
                searchJobj.put("refdbname", "Col" + fparams.getColnum());
                searchJobj.put("xfield", "Col" + fparams.getColnum());
                searchJobj.put(Constants.iscustomcolumn, true);
                searchJobj.put("iscustomcolumndata", false);
                searchJobj.put("isfrmpmproduct", false);
                searchJobj.put("fieldtype", fparams.getFieldtype());
                searchJobj.put("searchText", "");

                searchJobj.put("columnheader", fparams.getFieldlabel());
                searchJobj.put("search", "");

                searchJobj.put(Constants.xtype, "select");
                searchJobj.put("combosearch", "");
                searchJobj.put("isinterval", false);
                searchJobj.put("interval", "");
                searchJobj.put("isbefore", "");
                searchJobj.put("isdefaultfield", false);
                searchJobj.put(Constants.moduleid, 25);
                searchJobj.put("isForProductMasterOnly", "");
                
                kwlObj = accAccountDAOobj.getFieldComboDatabyFieldID(fieldid, company.getCompanyID());
                if (kwlObj != null) {
                    fieldcombodataList = kwlObj.getEntityList();
                }
            }
            
            
            double amountdue1 = 0;
            double amountdue2 = 0;
            double amountdue3 = 0;
            double amountdue4 = 0;
            double amountdue5 = 0;
            double amountdue6 = 0;
            double amountdue7 = 0;
            double amountdue8 = 0;
            double amountdue9 = 0;
            double amountdue10 = 0;
            double amountdue11 = 0;
            double amountdueinbase1 = 0;
            double amountdueinbase2 = 0;
            double amountdueinbase3 = 0;
            double amountdueinbase4 = 0;
            double amountdueinbase5 = 0;
            double amountdueinbase6 = 0;
            double amountdueinbase7 = 0;
            double amountdueinbase8 = 0;
            double amountdueinbase9 = 0;
            double amountdueinbase10 = 0;
            double amountdueinbase11 = 0;
            Calendar oneDayBeforeCal1 = Calendar.getInstance();
            Calendar cal1 = Calendar.getInstance();
            Calendar cal2 = Calendar.getInstance();
            Calendar cal3 = Calendar.getInstance();
            Calendar cal4 = Calendar.getInstance();
            Calendar cal5 = Calendar.getInstance();
            Calendar cal6 = Calendar.getInstance();
            Calendar cal7 = Calendar.getInstance();
            Calendar cal8 = Calendar.getInstance();
            Calendar cal9 = Calendar.getInstance();
            Calendar cal10 = Calendar.getInstance();

            oneDayBeforeCal1.setTime(curDate);
            cal1.setTime(curDate);
            cal2.setTime(curDate);
            cal3.setTime(curDate);
            cal4.setTime(curDate);
            cal5.setTime(curDate);
            cal6.setTime(curDate);
            cal7.setTime(curDate);
            cal8.setTime(curDate);
            cal9.setTime(curDate);
            cal10.setTime(curDate);
            oneDayBeforeCal1.add(Calendar.DAY_OF_YEAR, -1);
            cal2.add(Calendar.DAY_OF_YEAR, -duration);
            cal3.add(Calendar.DAY_OF_YEAR, -(duration * 2));
            cal4.add(Calendar.DAY_OF_YEAR, -(duration * 3));
            cal5.add(Calendar.DAY_OF_YEAR, -(duration * 4));
            cal6.add(Calendar.DAY_OF_YEAR, -(duration * 5));
            cal7.add(Calendar.DAY_OF_YEAR, -(duration * 6));
            cal8.add(Calendar.DAY_OF_YEAR, -(duration * 7));
            cal9.add(Calendar.DAY_OF_YEAR, -(duration * 8));
            cal10.add(Calendar.DAY_OF_YEAR, -(duration * 9));
            
            Date oneDayBeforeCal1Date = null;
            Date cal1Date = null;
            Date cal2Date = null;
            Date cal3Date = null;
            Date cal4Date = null;
            Date cal5Date = null;
            Date cal6Date = null;
            Date cal7Date = null;
            Date cal8Date = null;
            Date cal9Date = null;
            Date cal10Date = null;

            String oneDayBeforeCal1String = authHandler.getDateOnlyFormat().format(oneDayBeforeCal1.getTime());
            oneDayBeforeCal1Date = authHandler.getDateOnlyFormat().parse(oneDayBeforeCal1String);

            String cal1String = authHandler.getDateOnlyFormat().format(cal1.getTime());
            cal1Date = authHandler.getDateOnlyFormat().parse(cal1String);

            String cal2String = authHandler.getDateOnlyFormat().format(cal2.getTime());
            cal2Date = authHandler.getDateOnlyFormat().parse(cal2String);

            String cal3String = authHandler.getDateOnlyFormat().format(cal3.getTime());
            cal3Date = authHandler.getDateOnlyFormat().parse(cal3String);

            String cal4String = authHandler.getDateOnlyFormat().format(cal4.getTime());
            cal4Date = authHandler.getDateOnlyFormat().parse(cal4String);

            String cal5String = authHandler.getDateOnlyFormat().format(cal5.getTime());
            cal5Date = authHandler.getDateOnlyFormat().parse(cal5String);

            String cal6String = authHandler.getDateOnlyFormat().format(cal6.getTime());
            cal6Date = authHandler.getDateOnlyFormat().parse(cal6String);

            String cal7String = authHandler.getDateOnlyFormat().format(cal7.getTime());
            cal7Date = authHandler.getDateOnlyFormat().parse(cal7String);

            String cal8String = authHandler.getDateOnlyFormat().format(cal8.getTime());
            cal8Date = authHandler.getDateOnlyFormat().parse(cal8String);

            String cal9String = authHandler.getDateOnlyFormat().format(cal9.getTime());
            cal9Date = authHandler.getDateOnlyFormat().parse(cal9String);

            String cal10String = authHandler.getDateOnlyFormat().format(cal10.getTime());
            cal10Date = authHandler.getDateOnlyFormat().parse(cal10String);

           HashMap invoiceRequestParams = AccInvoiceServiceHandler.getInvoiceRequestMap(request); 
            invoiceRequestParams.put(Constants.moduleid, Constants.Acc_Invoice_ModuleId);
            invoiceRequestParams.put("isBadDebtInvoices", !StringUtil.isNullOrEmpty(request.getParameter("isBadDebtInvoices")) ? Boolean.parseBoolean(request.getParameter("isBadDebtInvoices")) : false);
            invoiceRequestParams.put("ignorezero", !StringUtil.isNullOrEmpty(request.getParameter("ignorezero")) ? Boolean.parseBoolean(request.getParameter("ignorezero")) : false);
            invoiceRequestParams.put("report", !StringUtil.isNullOrEmpty(request.getParameter("report")) ? Boolean.parseBoolean(request.getParameter("report")) : false);
            invoiceRequestParams.put("isSOA", request.getAttribute("isSOA") != null ? (Boolean) request.getAttribute("isSOA") : false);
            invoiceRequestParams.put("oneDayBeforeCal1", oneDayBeforeCal1);
            invoiceRequestParams.put("cal1", cal1);
            invoiceRequestParams.put("cal2", cal2);
            invoiceRequestParams.put("cal3", cal3);
            invoiceRequestParams.put("cal4", cal4);
            invoiceRequestParams.put("cal5", cal5);
            invoiceRequestParams.put("cal6", cal6);
            invoiceRequestParams.put("cal7", cal7);
            invoiceRequestParams.put("cal8", cal8);
            invoiceRequestParams.put("cal9", cal9);
            invoiceRequestParams.put("cal10", cal10);
            invoiceRequestParams.put("onlyamountdue", !StringUtil.isNullOrEmpty(request.getParameter("onlyamountdue")) ? Boolean.parseBoolean(request.getParameter("onlyamountdue")) : false);
            invoiceRequestParams.put("globalCurrencyID", AccountingManager.getGlobalCurrencyidFromRequest(request));
            invoiceRequestParams.put("requestCompanyID", AccountingManager.getCompanyidFromRequest(request));
            invoiceRequestParams.put("isAgedSummary", true);
            invoiceRequestParams.put("isAgedReceivables", true);
            invoiceRequestParams.put("isAged", true);

            HashMap<String, String> customFieldMap = new HashMap<String, String>();
            HashMap<String, String> customDateFieldMap = new HashMap<String, String>();
            HashMap<String, Object> fieldrequestParams = new HashMap();
            fieldrequestParams.put(Constants.filter_names, Arrays.asList(Constants.companyid, Constants.moduleid));
            fieldrequestParams.put(Constants.filter_values, Arrays.asList(sessionHandlerImpl.getCompanyid(request), Constants.Acc_Customer_ModuleId));
            HashMap<String, String> replaceFieldMap = new HashMap<String, String>();
            HashMap<String, Integer> FieldMap = accAccountDAOobj.getFieldParamsCustomMap(fieldrequestParams, replaceFieldMap, customFieldMap, customDateFieldMap);
            
            
            double amountdue1ColumnTotal =0;
            double amountdue2ColumnTotal =0;
            double amountdue3ColumnTotal =0;
            double amountdue4ColumnTotal =0;
            double amountdue5ColumnTotal =0;
            double amountdue6ColumnTotal =0;
            double amountdue7ColumnTotal =0;
            double amountdue8ColumnTotal=0;
            double amountdue9ColumnTotal=0;
            double amountdue10ColumnTotal=0;
            double amountdue11ColumnTotal=0;
            double totalcolumnSum=0;
            double totalInBasecolumnSum=0;
            
             String start = "";
            boolean checkForEx=false;
            if (StringUtil.getBoolean(request.getParameter("checkforex"))) {
                checkForEx = StringUtil.getBoolean(request.getParameter("checkforex"));
            }
            
            HashMap<String, Object> requestParams = getCustomerRequestMap(request);
            requestParams.put("custVendorID", request.getParameter("custVendorID") != null ? request.getParameter("custVendorID") : "");
            requestParams.put(Constants.moduleid, Constants.Acc_Customer_ModuleId);
            requestParams.put("isdimensionbasedgrouping", true);
            for(Object obj: fieldcombodataList){
            int invoiceCount=0;
                
                FieldComboData fcomboObj = (FieldComboData) obj;
                searchJobj.put("searchText", fcomboObj.getId());
                searchJobj.put("search", fcomboObj.getId());
                searchJobj.put("combosearch", fcomboObj.getValue());

                searchArray.put(searchJobj);
                finalSearchObj.put("root", searchArray);
                requestParams.put(Constants.Acc_Search_Json, finalSearchObj);
                requestParams.put(Constants.Filter_Criteria, Constants.Filter_Criteria);
        
            KwlReturnObject customerResult = accCustomerDAOobj.getCustomerWithCurrencyForAgedReceivables(requestParams);
            
              amountdue1 = amountdue2 = amountdue3 = amountdue4 = amountdueinbase1 = amountdueinbase2 = amountdueinbase3 = amountdueinbase4 = 0;
                amountdue5 = amountdue6 = amountdue7 = amountdue8 = amountdueinbase5 = amountdueinbase6 = amountdueinbase7 = amountdueinbase8 = 0;
            List<Object[]> customerList = customerResult.getEntityList();
            for (Object[] oj : customerList) {
                JSONArray invjarr = new JSONArray();
                String custid = oj[0].toString();
                String currencyidCust = oj[1].toString();
                invoiceRequestParams.put(Constants.customerid, custid);
                invoiceRequestParams.put("accid", custid);
                if (invoiceRequestParams.containsKey(Constants.start)) { 
                    invoiceRequestParams.remove(Constants.start);
                }
                if (invoiceRequestParams.containsKey(Constants.limit)) {
                    invoiceRequestParams.remove(Constants.limit);
                }
                getInvoiceJsonForagedReprtbasedOnDimension(invjarr, invoiceRequestParams, request);
                invoiceCount+=invjarr.length();
                if (invjarr.length() > 0) {
                   
                    String currencyid = null;

                    for (int i = 0; i < invjarr.length(); i++) {
                        JSONObject invobj = invjarr.getJSONObject(i);
                        currencyid = (invobj.has(Constants.currencyKey)) ? invobj.getString(Constants.currencyKey) : "";
                        Date dueDate = new Date();
                        if (datefilter == 0 || datefilter == Constants.agedDueDate0to30Filter) {
                            dueDate = authHandler.getDateOnlyFormat().parse(invobj.getString(Constants.duedate));
                        } else {
                            dueDate = authHandler.getDateOnlyFormat().parse(invobj.getString("date"));
                        }
                        double amountdue = invobj.getDouble("amountdue");
                        double amountdueinbase = invobj.getDouble(InvoiceConstants.amountdueinbase);

                        boolean isopeningBalanceTransaction = invobj.optBoolean("isOpeningBalanceTransaction", false);
                        boolean isConversionRateFromCurrencyToBase = invobj.optBoolean("isConversionRateFromCurrencyToBase", false);

                        KwlReturnObject bAmt = null;
                        Date date = null;
                        if (!invobj.getString("date").equals("")) {
                            date = df.parse(invobj.getString("date"));
                        }
                        if (isopeningBalanceTransaction && isConversionRateFromCurrencyToBase) {// if Transaction is opening balance Transaction and Conversion rate is taken from user is Currency to base then following method will be called.
                            bAmt = accCurrencyDAOobj.getOneCurrencyToOtherModifiedAccordingToCurrencyToBaseExchangeRate(invoiceRequestParams, amountdue, currencyid, currencyidCust, date, invobj.getDouble("externalcurrencyrate"));
                        } else {
                            bAmt = accCurrencyDAOobj.getOneCurrencyToOtherModified(invoiceRequestParams, amountdue, currencyid, currencyidCust, date, invobj.getDouble("externalcurrencyrate"));
                        }
                        amountdue = authHandler.round((Double) bAmt.getEntityList().get(0), companyid);
                        if (isdistibutive) {
                            
                          
                            if (dueDate.after(oneDayBeforeCal1Date)) {
                                if (dueDate.equals(cal1Date) && (datefilter == Constants.agedDueDate0to30Filter || datefilter == Constants.agedInvoiceDate0to30Filter)) {
                                    amountdueinbase2 += amountdueinbase;
                                    amountdue2 += amountdue;
                                    amountdue2ColumnTotal += amountdue;
                                } else {
                                    amountdueinbase1 += amountdueinbase;
                                    amountdue1 += amountdue;
                                    amountdue1ColumnTotal += amountdue;
                                }
                            } else if ((cal2Date.before(dueDate) || cal2Date.equals(dueDate)) && cal1Date.after(dueDate)) {
                                amountdueinbase2 += amountdueinbase;
                                amountdue2 += amountdue;
                                amountdue2ColumnTotal += amountdue;
                            } else if ((cal3Date.before(dueDate) || cal3Date.equals(dueDate)) && cal2Date.after(dueDate)) {
                                amountdueinbase3 += amountdueinbase;
                                amountdue3 += amountdue;
                                amountdue3ColumnTotal += amountdue;
                            } else if ((cal4Date.before(dueDate) || cal4Date.equals(dueDate)) && cal3Date.after(dueDate)) {
                                amountdueinbase4 += amountdueinbase;
                                amountdue4 += amountdue;
                                amountdue4ColumnTotal += amountdue;
                            } else if ((cal5Date.before(dueDate) || cal5Date.equals(dueDate)) && cal4Date.after(dueDate)) {
                                amountdueinbase5 += amountdueinbase;
                                amountdue5 += amountdue;
                                amountdue5ColumnTotal += amountdue;
                            } else if ((cal6Date.before(dueDate) || cal6Date.equals(dueDate)) && cal5Date.after(dueDate)) {
                                amountdueinbase6 += amountdueinbase;
                                amountdue6 += amountdue;
                                amountdue6ColumnTotal += amountdue;
                            } else if ((cal7Date.before(dueDate) || cal7Date.equals(dueDate)) && cal6Date.after(dueDate)) {
                                amountdueinbase7 += amountdueinbase;
                                amountdue7 += amountdue;
                                amountdue7ColumnTotal += amountdue;
                            } else if ((cal8Date.before(dueDate) || cal8Date.equals(dueDate)) && cal7Date.after(dueDate)) {
                                amountdueinbase8 += amountdueinbase;
                                amountdue8 += amountdue;
                                amountdue8ColumnTotal += amountdue;
                            } else if ((cal9Date.before(dueDate) || cal9Date.equals(dueDate)) && cal8Date.after(dueDate)) {
                                amountdueinbase9 += amountdueinbase;
                                amountdue9 += amountdue;
                                amountdue9ColumnTotal += amountdue;
                            } else if ((cal10Date.before(dueDate) || cal10Date.equals(dueDate)) && cal9Date.after(dueDate)) {
                                amountdueinbase10 += amountdueinbase;
                                amountdue10 += amountdue;
                                amountdue10ColumnTotal += amountdue;
                            } else {
                                amountdueinbase11 += amountdueinbase;
                                amountdue11 += amountdue;
                                amountdue11ColumnTotal += amountdue;
                            }
                            
                            switch(noOfInterval){
                                case 2:
                                    amountdue3 += amountdue4 + amountdue5 + amountdue6 + amountdue7 + amountdue8 + amountdue9 + amountdue10 + amountdue11;
                                    amountdue4 = amountdue5 = amountdue6 = amountdue7 = amountdue8 = amountdue9 = amountdue10 = amountdue11 = 0;
                                    amountdueinbase3 += amountdueinbase4 + amountdueinbase5 + amountdueinbase6 + amountdueinbase7 + amountdueinbase8 + amountdueinbase9 + amountdueinbase10 + amountdueinbase11;
                                    amountdueinbase4 = amountdueinbase5 = amountdueinbase6 = amountdueinbase7 = amountdueinbase8 = amountdueinbase9 = amountdueinbase10 = amountdueinbase11 = 0;
                                    amountdue3ColumnTotal += amountdue4ColumnTotal + amountdue5ColumnTotal + amountdue6ColumnTotal + amountdue7ColumnTotal + amountdue8ColumnTotal + amountdue9ColumnTotal + amountdue10ColumnTotal + amountdue11ColumnTotal;
                                    amountdue4ColumnTotal = amountdue5ColumnTotal = amountdue6ColumnTotal = amountdue7ColumnTotal = amountdue8ColumnTotal = amountdue9ColumnTotal = amountdue10ColumnTotal = amountdue11ColumnTotal = 0;
                                    break;
                                case 3:
                                    amountdue4 += amountdue5 + amountdue6 + amountdue7 + amountdue8 + amountdue9 + amountdue10 + amountdue11;
                                    amountdue5 = amountdue6 = amountdue7 = amountdue8 = amountdue9 = amountdue10 = amountdue11 = 0;
                                    amountdueinbase4 += amountdueinbase5 + amountdueinbase6 + amountdueinbase7 + amountdueinbase8 + amountdueinbase9 + amountdueinbase10 + amountdueinbase11;
                                    amountdueinbase5 = amountdueinbase6 = amountdueinbase7 = amountdueinbase8 = amountdueinbase9 = amountdueinbase10 = amountdueinbase11 = 0;
                                    amountdue4ColumnTotal += amountdue5ColumnTotal + amountdue6ColumnTotal + amountdue7ColumnTotal + amountdue8ColumnTotal + amountdue9ColumnTotal + amountdue10ColumnTotal + amountdue11ColumnTotal;
                                    amountdue5ColumnTotal = amountdue6ColumnTotal = amountdue7ColumnTotal = amountdue8ColumnTotal = amountdue9ColumnTotal = amountdue10ColumnTotal = amountdue11ColumnTotal = 0;
                                    break;
                                case 4:
                                    amountdue5 += amountdue6 + amountdue7 + amountdue8 + amountdue9 + amountdue10 + amountdue11;
                                    amountdue6 = amountdue7 = amountdue8 = amountdue9 = amountdue10 = amountdue11 = 0;
                                    amountdueinbase5 += amountdueinbase6 + amountdueinbase7 + amountdueinbase8 + amountdueinbase9 + amountdueinbase10 + amountdueinbase11;
                                    amountdueinbase6 = amountdueinbase7 = amountdueinbase8 = amountdueinbase9 = amountdueinbase10 = amountdueinbase11 = 0;
                                    amountdue5ColumnTotal += amountdue6ColumnTotal + amountdue7ColumnTotal + amountdue8ColumnTotal + amountdue9ColumnTotal + amountdue10ColumnTotal + amountdue11ColumnTotal;
                                    amountdue6ColumnTotal = amountdue7ColumnTotal = amountdue8ColumnTotal = amountdue9ColumnTotal = amountdue10ColumnTotal = amountdue11ColumnTotal = 0;
                                    break;
                                case 5:
                                    amountdue6 += amountdue7 + amountdue8 + amountdue9 + amountdue10 + amountdue11;
                                    amountdue7 = amountdue8 = amountdue9 = amountdue10 = amountdue11 = 0;
                                    amountdueinbase6 += amountdueinbase7 + amountdueinbase8 + amountdueinbase9 + amountdueinbase10 + amountdueinbase11;
                                    amountdueinbase7 = amountdueinbase8 = amountdueinbase9 = amountdueinbase10 = amountdueinbase11 = 0;
                                    amountdue6ColumnTotal += amountdue7ColumnTotal + amountdue8ColumnTotal + amountdue9ColumnTotal + amountdue10ColumnTotal + amountdue11ColumnTotal;
                                    amountdue7ColumnTotal = amountdue8ColumnTotal = amountdue9ColumnTotal = amountdue10ColumnTotal = amountdue11ColumnTotal = 0;
                                    break;
                                case 6:
                                    amountdue7 += amountdue8 + amountdue9 + amountdue10 + amountdue11;
                                    amountdue8 = amountdue9 = amountdue10 = amountdue11 = 0;
                                    amountdueinbase7 += amountdueinbase8 + amountdueinbase9 + amountdueinbase10 + amountdueinbase11;
                                    amountdueinbase8 = amountdueinbase9 = amountdueinbase10 = amountdueinbase11 = 0;
                                    amountdue7ColumnTotal += amountdue8ColumnTotal + amountdue9ColumnTotal + amountdue10ColumnTotal + amountdue11ColumnTotal;
                                    amountdue8ColumnTotal = amountdue9ColumnTotal = amountdue10ColumnTotal = amountdue11ColumnTotal = 0;
                                    break;
                                case 7:
                                    amountdue8 += amountdue9 + amountdue10 + amountdue11;
                                    amountdue9 = amountdue10 = amountdue11 = 0;
                                    amountdueinbase8 += amountdueinbase9 + amountdueinbase10 + amountdueinbase11;
                                    amountdueinbase9 = amountdueinbase10 = amountdueinbase11 = 0;
                                    amountdue8ColumnTotal += amountdue9ColumnTotal + amountdue10ColumnTotal + amountdue11ColumnTotal;
                                    amountdue9ColumnTotal = amountdue10ColumnTotal = amountdue11ColumnTotal = 0;
                                    break;
                                case 8:
                                    amountdue9 += amountdue10 + amountdue11;
                                    amountdue10 = amountdue11 = 0;
                                    amountdueinbase9 += amountdueinbase10 + amountdueinbase11;
                                    amountdueinbase10 = amountdueinbase11 = 0;
                                    amountdue9ColumnTotal += amountdue10ColumnTotal + amountdue11ColumnTotal;
                                    amountdue10ColumnTotal = amountdue11ColumnTotal = 0;
                                    break;
                                case 9:
                                    amountdue10 += amountdue11;
                                    amountdue11 = 0;
                                    amountdueinbase10 += amountdueinbase11;
                                    amountdueinbase11 = 0;
                                    amountdue10ColumnTotal += amountdue11ColumnTotal;
                                    amountdue11ColumnTotal = 0;
                                    break;
                            }

                        } else {
                                if (dueDate.after(oneDayBeforeCal1.getTime()) && (dueDate.before(cal1Date) || dueDate.equals(cal1Date))) {
                                amountdueinbase1 += amountdueinbase;
                                amountdue1 += amountdue;
                                    amountdue1ColumnTotal+=amountdue;
                                } else if (dueDate.after(cal2Date) || dueDate.equals(cal2Date)) {
                                amountdueinbase2 += amountdueinbase;
                                amountdue2 += amountdue;
                                      amountdue2ColumnTotal+=amountdue;
                                } else if (dueDate.after(cal3Date) || dueDate.equals(cal3Date)) {
                                amountdueinbase3 += amountdueinbase;
                                amountdue3 += amountdue;
                                     amountdue3ColumnTotal+=amountdue;
                            } else {
                                amountdueinbase4 += amountdueinbase;
                                amountdue4 += amountdue;
                                    amountdue4ColumnTotal+=amountdue;
                            }
                        }
                    }
                }
            }
                if (customerList.size() > 0 && invoiceCount > 0) {
                    JSONObject jObj = new JSONObject();
                    jObj.put(fparams.getFieldlabel(), fcomboObj.getValue());
                    jObj.put("amountdue1", Double.valueOf(authHandler.formattedAmount(amountdue1, companyid)));
                    jObj.put("amountdue2", Double.valueOf(authHandler.formattedAmount(amountdue2, companyid)));
                    jObj.put("amountdue3", Double.valueOf(authHandler.formattedAmount(amountdue3, companyid)));
                    jObj.put("amountdue4", Double.valueOf(authHandler.formattedAmount(amountdue4, companyid)));
                    jObj.put("amountdue5", Double.valueOf(authHandler.formattedAmount(amountdue5, companyid)));
                    jObj.put("amountdue6", Double.valueOf(authHandler.formattedAmount(amountdue6, companyid)));
                    jObj.put("amountdue7", Double.valueOf(authHandler.formattedAmount(amountdue7, companyid)));
                    jObj.put("amountdue8", Double.valueOf(authHandler.formattedAmount(amountdue8, companyid)));
                    jObj.put("amountdue9", Double.valueOf(authHandler.formattedAmount(amountdue9, companyid)));
                    jObj.put("amountdue10", Double.valueOf(authHandler.formattedAmount(amountdue10, companyid)));
                    jObj.put("amountdue11", Double.valueOf(authHandler.formattedAmount(amountdue11, companyid)));

                    jObj.put("amountdueinbase1", Double.valueOf(authHandler.formattedAmount(amountdueinbase1, companyid)));
                    jObj.put("amountdueinbase2", Double.valueOf(authHandler.formattedAmount(amountdueinbase2, companyid)));
                    jObj.put("amountdueinbase3", Double.valueOf(authHandler.formattedAmount(amountdueinbase3, companyid)));
                    jObj.put("amountdueinbase4", Double.valueOf(authHandler.formattedAmount(amountdueinbase4, companyid)));
                    jObj.put("amountdueinbase5", Double.valueOf(authHandler.formattedAmount(amountdueinbase5, companyid)));
                    jObj.put("amountdueinbase6", Double.valueOf(authHandler.formattedAmount(amountdueinbase6, companyid)));
                    jObj.put("amountdueinbase7", Double.valueOf(authHandler.formattedAmount(amountdueinbase7, companyid)));
                    jObj.put("amountdueinbase8", Double.valueOf(authHandler.formattedAmount(amountdueinbase8, companyid)));
                    jObj.put("amountdueinbase9", Double.valueOf(authHandler.formattedAmount(amountdueinbase9, companyid)));
                    jObj.put("amountdueinbase10", Double.valueOf(authHandler.formattedAmount(amountdueinbase10, companyid)));
                    jObj.put("amountdueinbase11", Double.valueOf(authHandler.formattedAmount(amountdueinbase11, companyid)));
                    jObj.put(InvoiceConstants.currencysymbol, company.getCurrency().getSymbol());
                    jObj.put(Constants.currencyKey, company.getCurrency().getCurrencyID());
                    jObj.put(InvoiceConstants.currencyname, company.getCurrency().getName());
                    double amountdue = Double.valueOf(authHandler.formattedAmount((amountdue1 + amountdue2 + amountdue3 + amountdue4 + amountdue5 + amountdue6 + amountdue7 + amountdue8), companyid));
                    jObj.put("total", amountdue);
                    double amountdueinbase = Double.valueOf(authHandler.formattedAmount((amountdueinbase1 + amountdueinbase2 + amountdueinbase3 + amountdueinbase4 + amountdueinbase5 + amountdueinbase6 + amountdueinbase7 + amountdueinbase8), companyid));
                    jObj.put("totalinbase", amountdueinbase);
                    totalcolumnSum+=amountdue;
                    totalInBasecolumnSum+=amountdueinbase;
                    jArr.put(jObj);
                }
        }
            
            JSONObject jObj = new JSONObject();
            jObj.put(fparams.getFieldlabel(), "Grand Total");
            jObj.put("amountdue1", Double.valueOf(authHandler.formattedAmount(amountdue1ColumnTotal, companyid)));
            jObj.put("amountdue2", Double.valueOf(authHandler.formattedAmount(amountdue2ColumnTotal, companyid)));
            jObj.put("amountdue3", Double.valueOf(authHandler.formattedAmount(amountdue3ColumnTotal, companyid)));
            jObj.put("amountdue4", Double.valueOf(authHandler.formattedAmount(amountdue4ColumnTotal, companyid)));
            jObj.put("amountdue5", Double.valueOf(authHandler.formattedAmount(amountdue5ColumnTotal, companyid)));
            jObj.put("amountdue6", Double.valueOf(authHandler.formattedAmount(amountdue6ColumnTotal, companyid)));
            jObj.put("amountdue7", Double.valueOf(authHandler.formattedAmount(amountdue7ColumnTotal, companyid)));
            jObj.put("amountdue8", Double.valueOf(authHandler.formattedAmount(amountdue8ColumnTotal, companyid)));
            jObj.put("amountdue9", Double.valueOf(authHandler.formattedAmount(amountdue9ColumnTotal, companyid)));
            jObj.put("amountdue10", Double.valueOf(authHandler.formattedAmount(amountdue10ColumnTotal, companyid)));
            jObj.put("amountdue11", Double.valueOf(authHandler.formattedAmount(amountdue11ColumnTotal, companyid)));
            jObj.put(InvoiceConstants.currencyname, company.getCurrency().getName());
            jObj.put("total", totalcolumnSum);
            jObj.put("totalinbase", totalInBasecolumnSum);
            jArr.put(jObj);
            
           //***********ColumnModel and rec******************************* 

//
            jobjTemp = new JSONObject();
            jobjTemp.put("name", fparams.getFieldlabel());
            jarrRecords.put(jobjTemp);

            jobjTemp = new JSONObject();
            jobjTemp.put("header", fparams.getFieldlabel());
            jobjTemp.put("dataIndex", fparams.getFieldlabel());
            jobjTemp.put("width", 150);
            jobjTemp.put("pdfwidth", 150);
            jobjTemp.put("custom", "true");
            jarrColumns.put(jobjTemp);

            
            
            jobjTemp = new JSONObject();
            jobjTemp.put("name", "currencysymbol");
            jarrRecords.put(jobjTemp);
            jobjTemp = new JSONObject();
            jobjTemp.put("name", "currencyid");
            jarrRecords.put(jobjTemp);
            jobjTemp = new JSONObject();
            jobjTemp.put("name", "currencyname");
            jarrRecords.put(jobjTemp);

            jobjTemp = new JSONObject();
            jobjTemp.put("name", "currencyname");
            jarrRecords.put(jobjTemp);

            jobjTemp = new JSONObject();
            jobjTemp.put("header", "Currency");
            jobjTemp.put("dataIndex", "currencyname");
            jobjTemp.put("width", 150);
            jobjTemp.put("pdfwidth", 150);
            jobjTemp.put("sortable", true);
            jobjTemp.put("align", "right");
            jarrColumns.put(jobjTemp);
            
            jobjTemp = new JSONObject();
            jobjTemp.put("name", "amountdue1");
            jarrRecords.put(jobjTemp);

            jobjTemp = new JSONObject();
            jobjTemp.put("header", "Current");
            jobjTemp.put("dataIndex", "amountdue1");
            jobjTemp.put("width", 150);
            jobjTemp.put("pdfwidth", 150);
            jobjTemp.put("sortable", true);
            jobjTemp.put("align", "right");
            jarrColumns.put(jobjTemp);

            jobjTemp = new JSONObject();
            jobjTemp.put("name", "amountdue2");
            jarrRecords.put(jobjTemp);

            jobjTemp = new JSONObject();
            jobjTemp.put("header", 1 + "-" + duration + " days");
            jobjTemp.put("dataIndex", "amountdue2");
            jobjTemp.put("width", 150);
            jobjTemp.put("pdfwidth", 150);
            jobjTemp.put("sortable", true);
            jobjTemp.put("align", "right");
            jarrColumns.put(jobjTemp);

            jobjTemp = new JSONObject();
            jobjTemp.put("name", "amountdue3");
            jarrRecords.put(jobjTemp);

            jobjTemp = new JSONObject();
            jobjTemp.put("header", duration + 1 + "-" + duration * 2 + " days");
            jobjTemp.put("dataIndex", "amountdue3");
            jobjTemp.put("width", 150);
            jobjTemp.put("pdfwidth", 150);
            jobjTemp.put("sortable", true);
            jobjTemp.put("align", "right");
            jarrColumns.put(jobjTemp);


            
            

            if (isdistibutive) {
                jobjTemp = new JSONObject();
                jobjTemp.put("name", "amountdue4");
                jarrRecords.put(jobjTemp);

                jobjTemp = new JSONObject();
                jobjTemp.put("header", duration * 2 + 1 + "-" + duration * 3 + " days");
                jobjTemp.put("dataIndex", "amountdue4");
                jobjTemp.put("width", 150);
                jobjTemp.put("pdfwidth", 150);
                jobjTemp.put("sortable", true);
                jobjTemp.put("align", "right");
                jarrColumns.put(jobjTemp);

                jobjTemp = new JSONObject();
                jobjTemp.put("name", "amountdue5");
                jarrRecords.put(jobjTemp);

                jobjTemp = new JSONObject();
                jobjTemp.put("header", duration * 3 + 1 + "-" + duration * 4 + " days");
                jobjTemp.put("dataIndex", "amountdue5");
                jobjTemp.put("width", 150);
                jobjTemp.put("pdfwidth", 150);
                jobjTemp.put("sortable", true);
                jobjTemp.put("align", "right");
                jarrColumns.put(jobjTemp);

                jobjTemp = new JSONObject();
                jobjTemp.put("name", "amountdue6");
                jarrRecords.put(jobjTemp);

                jobjTemp = new JSONObject();
                jobjTemp.put("header", duration * 4 + 1 + "-" + duration * 5 + " days");
                jobjTemp.put("dataIndex", "amountdue6");
                jobjTemp.put("width", 150);
                jobjTemp.put("pdfwidth", 150);
                jobjTemp.put("sortable", true);
                jobjTemp.put("align", "right");
                jarrColumns.put(jobjTemp);

                jobjTemp = new JSONObject();
                jobjTemp.put("name", "amountdue7");
                jarrRecords.put(jobjTemp);

                jobjTemp = new JSONObject();
                jobjTemp.put("header", duration * 5 + 1 + "-" + duration * 6 + " days");
                jobjTemp.put("dataIndex", "amountdue7");
                jobjTemp.put("width", 150);
                jobjTemp.put("pdfwidth", 150);
                jobjTemp.put("sortable", true);
                jobjTemp.put("align", "right");
                jarrColumns.put(jobjTemp);

                jobjTemp = new JSONObject();
                jobjTemp.put("name", "amountdue8");
                jarrRecords.put(jobjTemp);

                jobjTemp = new JSONObject();
                jobjTemp.put("header", ">" + duration * 6 + " days");
                jobjTemp.put("dataIndex", "amountdue8");
                jobjTemp.put("width", 150);
                jobjTemp.put("pdfwidth", 150);
                jobjTemp.put("sortable", true);
                jobjTemp.put("align", "right");
                jarrColumns.put(jobjTemp);
            } else {
                jobjTemp = new JSONObject();
                jobjTemp.put("name", "amountdue4");
                jarrRecords.put(jobjTemp);

                jobjTemp = new JSONObject();
                jobjTemp.put("header", ">" + duration * 3 + " days");
                jobjTemp.put("dataIndex", "amountdue4");
                jobjTemp.put("width", 150);
                jobjTemp.put("pdfwidth", 150);
                jobjTemp.put("sortable", true);
                jobjTemp.put("align", "right");
                jarrColumns.put(jobjTemp);
            }
            
            jobjTemp = new JSONObject();
            jobjTemp.put("name", "total");
            jarrRecords.put(jobjTemp);

            jobjTemp = new JSONObject();
            jobjTemp.put("header", "Total");
            jobjTemp.put("dataIndex", "total");
            jobjTemp.put("width", 150);
            jobjTemp.put("pdfwidth", 150);
            jobjTemp.put("sortable", true);
            jobjTemp.put("align", "right");
            jarrColumns.put(jobjTemp);
            
             jobjTemp = new JSONObject();
            jobjTemp.put("name", "totalinbase");
            jarrRecords.put(jobjTemp);

            jobjTemp = new JSONObject();
            jobjTemp.put("header", "Total in Base Currency("+baseCurrencyName+")");
            jobjTemp.put("dataIndex", "totalinbase");
            jobjTemp.put("width", 150);
            jobjTemp.put("pdfwidth", 150);
            jobjTemp.put("sortable", true);
            jobjTemp.put("align", "right");
            jarrColumns.put(jobjTemp);

           //***********ColumnModel and rec******************************* 
            
            
            //***********final jobj***************************************
            commData.put("success", true);
            commData.put("coldata", jArr);
            commData.put("columns", jarrColumns);
            jMeta.put("totalProperty", "totalCount");
            jMeta.put("root", "coldata");
            commData.put(Constants.RES_TOTALCOUNT, jArr.length());
            jMeta.put("fields", jarrRecords);
            commData.put("metaData", jMeta);
            JSONArray jcom = new JSONArray();
            jcom.put(commData);
            jobj.put("valid", true);
            
            if (checkForEx) {
                jobj.put("data", jArr);
            } else {
                jobj.put("data", commData);
            }
            //***********final jobj***************************************
            return jobj;
        } catch (Exception ex) {
            throw ServiceException.FAILURE("AccInvoiceServiceImpl.getAgedReportSummaryBasedOnDimension : " + ex.getMessage(), ex);
        }
    }

    @Override
    public JSONObject getAgedReportSummaryGoupingOnInvoiceDimension(HttpServletRequest request) throws ServiceException {
        JSONArray jArr = new JSONArray();
        JSONObject jobj = new JSONObject();
        try {
            String companyid = sessionHandlerImpl.getCompanyid(request);
            JSONObject commData = new JSONObject();
            JSONObject jMeta = new JSONObject();
            JSONArray jarrColumns = new JSONArray();
            JSONArray jarrRecords = new JSONArray();
            JSONObject jobjTemp = new JSONObject();
    
            KwlReturnObject cmpresult = accountingHandlerDAOobj.getObject(Company.class.getName(), sessionHandlerImpl.getCompanyid(request));
            Company company = (Company) cmpresult.getEntityList().get(0);
            String baseCurrencyName="";
            if (company != null && company.getCurrency() != null) {
                baseCurrencyName = company.getCurrency().getName();
            }
//            String curDateString = (!StringUtil.isNullOrEmpty(request.getParameter("curdate"))) ? request.getParameter("curdate") : ((!StringUtil.isNullOrEmpty(request.getParameter("stdate"))) ? request.getParameter("stdate") : request.getParameter(Constants.REQ_startdate));
            String curDateString = !(StringUtil.isNullOrEmpty(request.getParameter(Constants.asOfDate))) ? request.getParameter(Constants.asOfDate) : request.getParameter(Constants.curdate);
            DateFormat df = authHandler.getDateOnlyFormat();
            Date curDate = df.parse(curDateString);
            int duration = request.getParameter("duration") == null ? 0 : Integer.parseInt(request.getParameter("duration"));
            boolean isdistibutive = StringUtil.getBoolean(request.getParameter("isdistributive"));
            int datefilter = StringUtil.getInteger(request.getParameter("datefilter")); // 0 = Invoice Due date OR 1 = Invoice date
            int noOfInterval = StringUtil.isNullOrEmpty(request.getParameter("noOfInterval"))? 7 : Integer.parseInt(request.getParameter("noOfInterval"));

            String fieldid = "";
            KwlReturnObject kwlObj = null;
            List fieldcombodataList=new ArrayList();
            FieldParams fparams=null;
            JSONObject searchJobj=new JSONObject();
            JSONArray searchArray=new JSONArray();
            
            JSONObject finalSearchObj= new JSONObject();
            if (!StringUtil.isNullOrEmpty(request.getParameter(Constants.Acc_fieldid))) {
                fieldid = !StringUtil.isNullOrEmpty(request.getParameter(Constants.Acc_fieldid)) ? request.getParameter(Constants.Acc_fieldid) : "";
                KwlReturnObject fieldparamsObj = accountingHandlerDAOobj.getObject(FieldParams.class.getName(), fieldid);
                fparams = (FieldParams) fieldparamsObj.getEntityList().get(0);
                searchJobj.put("column", fparams.getId());
                searchJobj.put("refdbname", "Col" + fparams.getColnum());
                searchJobj.put("xfield", "Col" + fparams.getColnum());
                searchJobj.put(Constants.iscustomcolumn, true);
                searchJobj.put("iscustomcolumndata", false);
                searchJobj.put("isfrmpmproduct", false);
                searchJobj.put("fieldtype", fparams.getFieldtype());
                searchJobj.put("searchText", "");

                searchJobj.put("columnheader", fparams.getFieldlabel());
                searchJobj.put("search", "");

                searchJobj.put(Constants.xtype, "select");
                searchJobj.put("combosearch", "");
                searchJobj.put("isinterval", false);
                searchJobj.put("interval", "");
                searchJobj.put("isbefore", "");
                searchJobj.put("isdefaultfield", false);
                searchJobj.put(Constants.moduleid, fparams.getModuleid());
                searchJobj.put("isForProductMasterOnly", "");
                
                kwlObj = accAccountDAOobj.getFieldComboDatabyFieldID(fieldid, company.getCompanyID());
                if (kwlObj != null) {
                    fieldcombodataList = kwlObj.getEntityList();
                }
            }
            
            double amountdue1 = 0;
            double amountdue2 = 0;
            double amountdue3 = 0;
            double amountdue4 = 0;
            double amountdue5 = 0;
            double amountdue6 = 0;
            double amountdue7 = 0;
            double amountdue8 = 0;
            double amountdue9 = 0;
            double amountdue10 = 0;
            double amountdue11 = 0;
            double amountdueinbase1 = 0;
            double amountdueinbase2 = 0;
            double amountdueinbase3 = 0;
            double amountdueinbase4 = 0;
            double amountdueinbase5 = 0;
            double amountdueinbase6 = 0;
            double amountdueinbase7 = 0;
            double amountdueinbase8 = 0;
            double amountdueinbase9 = 0;
            double amountdueinbase10 = 0;
            double amountdueinbase11 = 0;
            Calendar oneDayBeforeCal1 = Calendar.getInstance();
            Calendar cal1 = Calendar.getInstance();
            Calendar cal2 = Calendar.getInstance();
            Calendar cal3 = Calendar.getInstance();
            Calendar cal4 = Calendar.getInstance();
            Calendar cal5 = Calendar.getInstance();
            Calendar cal6 = Calendar.getInstance();
            Calendar cal7 = Calendar.getInstance();
            Calendar cal8 = Calendar.getInstance();
            Calendar cal9 = Calendar.getInstance();
            Calendar cal10 = Calendar.getInstance();

            oneDayBeforeCal1.setTime(curDate);
            cal1.setTime(curDate);
            cal2.setTime(curDate);
            cal3.setTime(curDate);
            cal4.setTime(curDate);
            cal5.setTime(curDate);
            cal6.setTime(curDate);
            cal7.setTime(curDate);
            cal8.setTime(curDate);
            cal9.setTime(curDate);
            cal10.setTime(curDate);
            oneDayBeforeCal1.add(Calendar.DAY_OF_YEAR, -1);
            cal2.add(Calendar.DAY_OF_YEAR, -duration);
            cal3.add(Calendar.DAY_OF_YEAR, -(duration * 2));
            cal4.add(Calendar.DAY_OF_YEAR, -(duration * 3));
            cal5.add(Calendar.DAY_OF_YEAR, -(duration * 4));
            cal6.add(Calendar.DAY_OF_YEAR, -(duration * 5));
            cal7.add(Calendar.DAY_OF_YEAR, -(duration * 6));
            cal8.add(Calendar.DAY_OF_YEAR, -(duration * 7));
            cal9.add(Calendar.DAY_OF_YEAR, -(duration * 8));
            cal10.add(Calendar.DAY_OF_YEAR, -(duration * 9));
            
            
             Date oneDayBeforeCal1Date = null;
            Date cal1Date = null;
            Date cal2Date = null;
            Date cal3Date = null;
            Date cal4Date = null;
            Date cal5Date = null;
            Date cal6Date = null;
            Date cal7Date = null;
            Date cal8Date = null;
            Date cal9Date = null;
            Date cal10Date = null;

            String oneDayBeforeCal1String = authHandler.getDateOnlyFormat().format(oneDayBeforeCal1.getTime());
            oneDayBeforeCal1Date = authHandler.getDateOnlyFormat().parse(oneDayBeforeCal1String);

            String cal1String = authHandler.getDateOnlyFormat().format(cal1.getTime());
            cal1Date = authHandler.getDateOnlyFormat().parse(cal1String);

            String cal2String = authHandler.getDateOnlyFormat().format(cal2.getTime());
            cal2Date = authHandler.getDateOnlyFormat().parse(cal2String);

            String cal3String = authHandler.getDateOnlyFormat().format(cal3.getTime());
            cal3Date = authHandler.getDateOnlyFormat().parse(cal3String);

            String cal4String = authHandler.getDateOnlyFormat().format(cal4.getTime());
            cal4Date = authHandler.getDateOnlyFormat().parse(cal4String);

            String cal5String = authHandler.getDateOnlyFormat().format(cal5.getTime());
            cal5Date = authHandler.getDateOnlyFormat().parse(cal5String);

            String cal6String = authHandler.getDateOnlyFormat().format(cal6.getTime());
            cal6Date = authHandler.getDateOnlyFormat().parse(cal6String);

            String cal7String = authHandler.getDateOnlyFormat().format(cal7.getTime());
            cal7Date = authHandler.getDateOnlyFormat().parse(cal7String);

            String cal8String = authHandler.getDateOnlyFormat().format(cal8.getTime());
            cal8Date = authHandler.getDateOnlyFormat().parse(cal8String);

            String cal9String = authHandler.getDateOnlyFormat().format(cal9.getTime());
            cal9Date = authHandler.getDateOnlyFormat().parse(cal9String);

            String cal10String = authHandler.getDateOnlyFormat().format(cal10.getTime());
            cal10Date = authHandler.getDateOnlyFormat().parse(cal10String);

           HashMap invoiceRequestParams = AccInvoiceServiceHandler.getInvoiceRequestMap(request); 
            invoiceRequestParams.put(Constants.moduleid, Constants.Acc_Invoice_ModuleId);
            invoiceRequestParams.put("isBadDebtInvoices", !StringUtil.isNullOrEmpty(request.getParameter("isBadDebtInvoices")) ? Boolean.parseBoolean(request.getParameter("isBadDebtInvoices")) : false);
            invoiceRequestParams.put("ignorezero", !StringUtil.isNullOrEmpty(request.getParameter("ignorezero")) ? Boolean.parseBoolean(request.getParameter("ignorezero")) : false);
            invoiceRequestParams.put("report", !StringUtil.isNullOrEmpty(request.getParameter("report")) ? Boolean.parseBoolean(request.getParameter("report")) : false);
            invoiceRequestParams.put("isSOA", request.getAttribute("isSOA") != null ? (Boolean) request.getAttribute("isSOA") : false);
            invoiceRequestParams.put("oneDayBeforeCal1", oneDayBeforeCal1);
            invoiceRequestParams.put("cal1", cal1);
            invoiceRequestParams.put("cal2", cal2);
            invoiceRequestParams.put("cal3", cal3);
            invoiceRequestParams.put("cal4", cal4);
            invoiceRequestParams.put("cal5", cal5);
            invoiceRequestParams.put("cal6", cal6);
            invoiceRequestParams.put("cal7", cal7);
            invoiceRequestParams.put("cal8", cal8);
            invoiceRequestParams.put("cal9", cal9);
            invoiceRequestParams.put("cal10", cal10);
            invoiceRequestParams.put("onlyamountdue", !StringUtil.isNullOrEmpty(request.getParameter("onlyamountdue")) ? Boolean.parseBoolean(request.getParameter("onlyamountdue")) : false);
            invoiceRequestParams.put("globalCurrencyID", AccountingManager.getGlobalCurrencyidFromRequest(request));
            invoiceRequestParams.put("requestCompanyID", AccountingManager.getCompanyidFromRequest(request));
            invoiceRequestParams.put("isAgedSummary", true);
            invoiceRequestParams.put("isAgedReceivables", true);
            invoiceRequestParams.put("isAged", true);

            HashMap<String, String> customFieldMap = new HashMap<String, String>();
            HashMap<String, String> customDateFieldMap = new HashMap<String, String>();
            HashMap<String, Object> fieldrequestParams = new HashMap();
            fieldrequestParams.put(Constants.filter_names, Arrays.asList(Constants.companyid, Constants.moduleid));
            fieldrequestParams.put(Constants.filter_values, Arrays.asList(sessionHandlerImpl.getCompanyid(request), Constants.Acc_Customer_ModuleId));
            HashMap<String, String> replaceFieldMap = new HashMap<String, String>();
            HashMap<String, Integer> FieldMap = accAccountDAOobj.getFieldParamsCustomMap(fieldrequestParams, replaceFieldMap, customFieldMap, customDateFieldMap);
            
            
            double amountdue1ColumnTotal =0;
            double amountdue2ColumnTotal =0;
            double amountdue3ColumnTotal =0;
            double amountdue4ColumnTotal =0;
            double amountdue5ColumnTotal =0;
            double amountdue6ColumnTotal =0;
            double amountdue7ColumnTotal =0;
            double amountdue8ColumnTotal=0;
            double amountdue9ColumnTotal=0;
            double amountdue10ColumnTotal=0;
            double amountdue11ColumnTotal=0;
            double totalcolumnSum=0;
            double totalInBasecolumnSum=0;
            
             String start = "";
            boolean checkForEx=false;
            if (StringUtil.getBoolean(request.getParameter("checkforex"))) {
                checkForEx = StringUtil.getBoolean(request.getParameter("checkforex"));
            }
            if(!StringUtil.isNullOrEmpty(request.getParameter(Constants.Acc_Search_Json))) {
                JSONObject jObj = new JSONObject(request.getParameter(Constants.Acc_Search_Json));
                JSONArray jArray = jObj.getJSONArray("root");
                for (int cnt = 0; cnt < jArray.length(); cnt++) {
                    JSONObject jObject = jArray.getJSONObject(cnt);
                    searchArray.put(jObject);
                }
            }
            for(Object obj: fieldcombodataList){
                int invoiceCount=0;
                FieldComboData fcomboObj = (FieldComboData) obj;
                searchJobj.put("searchText", fcomboObj.getId());
                searchJobj.put("search", fcomboObj.getId());
                searchJobj.put("combosearch", fcomboObj.getValue());
                searchArray.put(searchJobj);
                finalSearchObj.put("root", searchArray);
                invoiceRequestParams.put(Constants.Acc_Search_Json, finalSearchObj);
                if(StringUtil.isNullOrEmpty(request.getParameter(InvoiceConstants.Filter_Criteria))) {
                    invoiceRequestParams.put(Constants.Filter_Criteria, Constants.Filter_Criteria);
                }
                amountdue1 = amountdue2 = amountdue3 = amountdue4 = amountdue5 = amountdue6 = amountdue7 = amountdue8 =  amountdue9 =  amountdue10 =  amountdue11 = 0;
                amountdueinbase1 = amountdueinbase2 = amountdueinbase3 = amountdueinbase4 = amountdueinbase5 = amountdueinbase6 = amountdueinbase7 = amountdueinbase8 =  amountdueinbase9 =  amountdueinbase10 =  amountdueinbase11 = 0;
                
                JSONArray invjarr = new JSONArray();
                
                if (invoiceRequestParams.containsKey(Constants.start)) { 
                    invoiceRequestParams.remove(Constants.start);
                }
                if (invoiceRequestParams.containsKey(Constants.limit)) {
                    invoiceRequestParams.remove(Constants.limit);
                }
                getInvoiceJsonForagedReprtbasedOnDimension(invjarr, invoiceRequestParams, request);
                
                invoiceCount+=invjarr.length();
                if (invjarr.length() > 0) {
                    String currencyid = null;
                    String currencyidCust= null;

                    for (int i = 0; i < invjarr.length(); i++) {
                        JSONObject invobj = invjarr.getJSONObject(i);
                        currencyid = (invobj.has(Constants.currencyKey)) ? invobj.getString(Constants.currencyKey) : "";
                        currencyidCust= (invobj.has("customercurrencyid")) ? invobj.getString("customercurrencyid") : "";
                        Date dueDate = new Date();
                        if (datefilter == 0 || datefilter == Constants.agedDueDate0to30Filter) {
                            dueDate = authHandler.getDateOnlyFormat().parse(invobj.getString(Constants.duedate));
                        } else {
                            dueDate = authHandler.getDateOnlyFormat().parse(invobj.getString("date"));
                        }
                        double amountdue = invobj.getDouble("amountdue");
                        double amountdueinbase = invobj.getDouble(InvoiceConstants.amountdueinbase);

                        boolean isopeningBalanceTransaction = invobj.optBoolean("isOpeningBalanceTransaction", false);
                        boolean isConversionRateFromCurrencyToBase = invobj.optBoolean("isConversionRateFromCurrencyToBase", false);

                        KwlReturnObject bAmt = null;
                        Date date = null;
                        if (!invobj.getString("date").equals("")) {
                            date = df.parse(invobj.getString("date"));
                        }
                        if (isopeningBalanceTransaction && isConversionRateFromCurrencyToBase) {// if Transaction is opening balance Transaction and Conversion rate is taken from user is Currency to base then following method will be called.
                            bAmt = accCurrencyDAOobj.getOneCurrencyToOtherModifiedAccordingToCurrencyToBaseExchangeRate(invoiceRequestParams, amountdue, currencyid, currencyidCust, date, invobj.getDouble("externalcurrencyrate"));
                        } else {
                            bAmt = accCurrencyDAOobj.getOneCurrencyToOtherModified(invoiceRequestParams, amountdue, currencyid, currencyidCust, date, invobj.getDouble("externalcurrencyrate"));
                        }
                        amountdue = authHandler.round((Double) bAmt.getEntityList().get(0), companyid);
       
                        if (isdistibutive) {
                            if (dueDate.after(oneDayBeforeCal1.getTime())) {
                                if (dueDate.equals(cal1.getTime()) && (datefilter == Constants.agedDueDate0to30Filter || datefilter == Constants.agedInvoiceDate0to30Filter)) {
                                    amountdueinbase2 += amountdueinbase;
                                    amountdue2 += amountdue;
                                    amountdue2ColumnTotal += amountdue;
                                } else {
                                    amountdueinbase1 += amountdueinbase;
                                    amountdue1 += amountdue;
                                    amountdue1ColumnTotal += amountdue;
                                }
                            } else if ((cal2Date.before(dueDate) || cal2Date.equals(dueDate)) && cal2Date.after(dueDate)) {
                                amountdueinbase2 += amountdueinbase;
                                amountdue2 += amountdue;
                                amountdue2ColumnTotal += amountdue;

                            } else if ((cal3Date.before(dueDate) || cal3Date.equals(dueDate)) && cal2Date.after(dueDate)) {
                                amountdueinbase3 += amountdueinbase;
                                amountdue3 += amountdue;
                                amountdue3ColumnTotal += amountdue;
                            } else if ((cal4Date.before(dueDate) || cal4Date.equals(dueDate)) && cal3Date.after(dueDate)) {
                                amountdueinbase4 += amountdueinbase;
                                amountdue4 += amountdue;
                                amountdue4ColumnTotal += amountdue;
                            } else if ((cal5Date.before(dueDate) || cal5Date.equals(dueDate)) && cal4Date.after(dueDate)) {
                                amountdueinbase5 += amountdueinbase;
                                amountdue5 += amountdue;
                                amountdue5ColumnTotal += amountdue;
                            } else if ((cal6Date.before(dueDate) || cal6Date.equals(dueDate)) && cal5Date.after(dueDate)) {
                                amountdueinbase6 += amountdueinbase;
                                amountdue6 += amountdue;
                                amountdue6ColumnTotal += amountdue;
                            } else if ((cal7Date.before(dueDate) || cal7Date.equals(dueDate)) && cal6Date.after(dueDate)) {
                                amountdueinbase7 += amountdueinbase;
                                amountdue7 += amountdue;
                                amountdue7ColumnTotal += amountdue;
                            } else if ((cal8Date.before(dueDate) || cal8Date.equals(dueDate)) && cal7Date.after(dueDate)) {
                                amountdueinbase8 += amountdueinbase;
                                amountdue8 += amountdue;
                                amountdue8ColumnTotal += amountdue;
                            } else if ((cal9Date.before(dueDate) || cal9Date.equals(dueDate)) && cal8Date.after(dueDate)) {
                                amountdueinbase9 += amountdueinbase;
                                amountdue9 += amountdue;
                                amountdue9ColumnTotal += amountdue;
                            } else if ((cal10Date.before(dueDate) || cal10Date.equals(dueDate)) && cal9Date.after(dueDate)) {
                                amountdueinbase10 += amountdueinbase;
                                amountdue10 += amountdue;
                                amountdue10ColumnTotal += amountdue;
                            } else {
                                amountdueinbase11 += amountdueinbase;
                                amountdue11 += amountdue;
                                amountdue11ColumnTotal += amountdue;
                            }
                            
                            switch(noOfInterval){
                                case 2:
                                    amountdue3 += amountdue4 + amountdue5 + amountdue6 + amountdue7 + amountdue8 + amountdue9 + amountdue10 + amountdue11;
                                    amountdue4 = amountdue5 = amountdue6 = amountdue7 = amountdue8 = amountdue9 = amountdue10 = amountdue11 = 0;
                                    amountdueinbase3 += amountdueinbase4 + amountdueinbase5 + amountdueinbase6 + amountdueinbase7 + amountdueinbase8 + amountdueinbase9 + amountdueinbase10 + amountdueinbase11;
                                    amountdueinbase4 = amountdueinbase5 = amountdueinbase6 = amountdueinbase7 = amountdueinbase8 = amountdueinbase9 = amountdueinbase10 = amountdueinbase11 = 0;
                                    amountdue3ColumnTotal += amountdue4ColumnTotal + amountdue5ColumnTotal + amountdue6ColumnTotal + amountdue7ColumnTotal + amountdue8ColumnTotal + amountdue9ColumnTotal + amountdue10ColumnTotal + amountdue11ColumnTotal;
                                    amountdue4ColumnTotal = amountdue5ColumnTotal = amountdue6ColumnTotal = amountdue7ColumnTotal = amountdue8ColumnTotal = amountdue9ColumnTotal = amountdue10ColumnTotal = amountdue11ColumnTotal = 0;
                                    break;
                                case 3:
                                    amountdue4 += amountdue5 + amountdue6 + amountdue7 + amountdue8 + amountdue9 + amountdue10 + amountdue11;
                                    amountdue5 = amountdue6 = amountdue7 = amountdue8 = amountdue9 = amountdue10 = amountdue11 = 0;
                                    amountdueinbase4 += amountdueinbase5 + amountdueinbase6 + amountdueinbase7 + amountdueinbase8 + amountdueinbase9 + amountdueinbase10 + amountdueinbase11;
                                    amountdueinbase5 = amountdueinbase6 = amountdueinbase7 = amountdueinbase8 = amountdueinbase9 = amountdueinbase10 = amountdueinbase11 = 0;
                                    amountdue4ColumnTotal += amountdue5ColumnTotal + amountdue6ColumnTotal + amountdue7ColumnTotal + amountdue8ColumnTotal + amountdue9ColumnTotal + amountdue10ColumnTotal + amountdue11ColumnTotal;
                                    amountdue5ColumnTotal = amountdue6ColumnTotal = amountdue7ColumnTotal = amountdue8ColumnTotal = amountdue9ColumnTotal = amountdue10ColumnTotal = amountdue11ColumnTotal = 0;
                                    break;
                                case 4:
                                    amountdue5 += amountdue6 + amountdue7 + amountdue8 + amountdue9 + amountdue10 + amountdue11;
                                    amountdue6 = amountdue7 = amountdue8 = amountdue9 = amountdue10 = amountdue11 = 0;
                                    amountdueinbase5 += amountdueinbase6 + amountdueinbase7 + amountdueinbase8 + amountdueinbase9 + amountdueinbase10 + amountdueinbase11;
                                    amountdueinbase6 = amountdueinbase7 = amountdueinbase8 = amountdueinbase9 = amountdueinbase10 = amountdueinbase11 = 0;
                                    amountdue5ColumnTotal += amountdue6ColumnTotal + amountdue7ColumnTotal + amountdue8ColumnTotal + amountdue9ColumnTotal + amountdue10ColumnTotal + amountdue11ColumnTotal;
                                    amountdue6ColumnTotal = amountdue7ColumnTotal = amountdue8ColumnTotal = amountdue9ColumnTotal = amountdue10ColumnTotal = amountdue11ColumnTotal = 0;
                                    break;
                                case 5:
                                    amountdue6 += amountdue7 + amountdue8 + amountdue9 + amountdue10 + amountdue11;
                                    amountdue7 = amountdue8 = amountdue9 = amountdue10 = amountdue11 = 0;
                                    amountdueinbase6 += amountdueinbase7 + amountdueinbase8 + amountdueinbase9 + amountdueinbase10 + amountdueinbase11;
                                    amountdueinbase7 = amountdueinbase8 = amountdueinbase9 = amountdueinbase10 = amountdueinbase11 = 0;
                                    amountdue6ColumnTotal += amountdue7ColumnTotal + amountdue8ColumnTotal + amountdue9ColumnTotal + amountdue10ColumnTotal + amountdue11ColumnTotal;
                                    amountdue7ColumnTotal = amountdue8ColumnTotal = amountdue9ColumnTotal = amountdue10ColumnTotal = amountdue11ColumnTotal = 0;
                                    break;
                                case 6:
                                    amountdue7 += amountdue8 + amountdue9 + amountdue10 + amountdue11;
                                    amountdue8 = amountdue9 = amountdue10 = amountdue11 = 0;
                                    amountdueinbase7 += amountdueinbase8 + amountdueinbase9 + amountdueinbase10 + amountdueinbase11;
                                    amountdueinbase8 = amountdueinbase9 = amountdueinbase10 = amountdueinbase11 = 0;
                                    amountdue7ColumnTotal += amountdue8ColumnTotal + amountdue9ColumnTotal + amountdue10ColumnTotal + amountdue11ColumnTotal;
                                    amountdue8ColumnTotal = amountdue9ColumnTotal = amountdue10ColumnTotal = amountdue11ColumnTotal = 0;
                                    break;
                                case 7:
                                    amountdue8 += amountdue9 + amountdue10 + amountdue11;
                                    amountdue9 = amountdue10 = amountdue11 = 0;
                                    amountdueinbase8 += amountdueinbase9 + amountdueinbase10 + amountdueinbase11;
                                    amountdueinbase9 = amountdueinbase10 = amountdueinbase11 = 0;
                                    amountdue8ColumnTotal += amountdue9ColumnTotal + amountdue10ColumnTotal + amountdue11ColumnTotal;
                                    amountdue9ColumnTotal = amountdue10ColumnTotal = amountdue11ColumnTotal = 0;
                                    break;
                                case 8:
                                    amountdue9 += amountdue10 + amountdue11;
                                    amountdue10 = amountdue11 = 0;
                                    amountdueinbase9 += amountdueinbase10 + amountdueinbase11;
                                    amountdueinbase10 = amountdueinbase11 = 0;
                                    amountdue9ColumnTotal += amountdue10ColumnTotal + amountdue11ColumnTotal;
                                    amountdue10ColumnTotal = amountdue11ColumnTotal = 0;
                                    break;
                                case 9:
                                    amountdue10 += amountdue11;
                                    amountdue11 = 0;
                                    amountdueinbase10 += amountdueinbase11;
                                    amountdueinbase11 = 0;
                                    amountdue10ColumnTotal += amountdue11ColumnTotal;
                                    amountdue11ColumnTotal = 0;
                                    break;
                            }
                            
                            
                        } else {
                            if (dueDate.after(oneDayBeforeCal1Date) && (dueDate.before(cal1Date) || dueDate.equals(cal1Date))) {
                                amountdueinbase1 += amountdueinbase;
                                amountdue1 += amountdue;
                                amountdue1ColumnTotal += amountdue;
                            } else if (dueDate.after(cal2Date) || dueDate.equals(cal2Date)) {
                                amountdueinbase2 += amountdueinbase;
                                amountdue2 += amountdue;
                                amountdue2ColumnTotal += amountdue;
                            } else if (dueDate.after(cal3Date) || dueDate.equals(cal3Date)) {
                                amountdueinbase3 += amountdueinbase;
                                amountdue3 += amountdue;
                                amountdue3ColumnTotal += amountdue;
                            } else {
                                amountdueinbase4 += amountdueinbase;
                                amountdue4 += amountdue;
                                amountdue4ColumnTotal += amountdue;
                            }
                        }

                    }
                }
                if ( invoiceCount > 0) {
                    JSONObject jObj = new JSONObject();
                    jObj.put(fparams.getFieldlabel(), fcomboObj.getValue());
                    jObj.put("amountdue1", Double.valueOf(authHandler.formattedAmount(amountdue1, companyid)));
                    jObj.put("amountdue2", Double.valueOf(authHandler.formattedAmount(amountdue2, companyid)));
                    jObj.put("amountdue3", Double.valueOf(authHandler.formattedAmount(amountdue3, companyid)));
                    jObj.put("amountdue4", Double.valueOf(authHandler.formattedAmount(amountdue4, companyid)));
                    jObj.put("amountdue5", Double.valueOf(authHandler.formattedAmount(amountdue5, companyid)));
                    jObj.put("amountdue6", Double.valueOf(authHandler.formattedAmount(amountdue6, companyid)));
                    jObj.put("amountdue7", Double.valueOf(authHandler.formattedAmount(amountdue7, companyid)));
                    jObj.put("amountdue8", Double.valueOf(authHandler.formattedAmount(amountdue8, companyid)));

                    jObj.put("amountdueinbase1", Double.valueOf(authHandler.formattedAmount(amountdueinbase1, companyid)));
                    jObj.put("amountdueinbase2", Double.valueOf(authHandler.formattedAmount(amountdueinbase2, companyid)));
                    jObj.put("amountdueinbase3", Double.valueOf(authHandler.formattedAmount(amountdueinbase3, companyid)));
                    jObj.put("amountdueinbase4", Double.valueOf(authHandler.formattedAmount(amountdueinbase4, companyid)));
                    jObj.put("amountdueinbase5", Double.valueOf(authHandler.formattedAmount(amountdueinbase5, companyid)));
                    jObj.put("amountdueinbase6", Double.valueOf(authHandler.formattedAmount(amountdueinbase6, companyid)));
                    jObj.put("amountdueinbase7", Double.valueOf(authHandler.formattedAmount(amountdueinbase7, companyid)));
                    jObj.put("amountdueinbase8", Double.valueOf(authHandler.formattedAmount(amountdueinbase8, companyid)));
                    jObj.put(InvoiceConstants.currencysymbol, company.getCurrency().getSymbol());
                    jObj.put(Constants.currencyKey, company.getCurrency().getCurrencyID());
                    jObj.put(InvoiceConstants.currencyname, company.getCurrency().getName());
                    double amountdue = Double.valueOf(authHandler.formattedAmount((amountdue1 + amountdue2 + amountdue3 + amountdue4 + amountdue5 + amountdue6 + amountdue7 + amountdue8), companyid));
                    jObj.put("total", amountdue);
                    double amountdueinbase = Double.valueOf(authHandler.formattedAmount((amountdueinbase1 + amountdueinbase2 + amountdueinbase3 + amountdueinbase4 + amountdueinbase5 + amountdueinbase6 + amountdueinbase7 + amountdueinbase8), companyid));
                    jObj.put("totalinbase", amountdueinbase);
                    totalcolumnSum+=amountdue;
                    totalInBasecolumnSum+=amountdueinbase;
                    jArr.put(jObj);
                }
            }
            
            JSONObject jObj = new JSONObject();
            jObj.put(fparams.getFieldlabel(), "Grand Total");
            jObj.put("amountdue1", Double.valueOf(authHandler.formattedAmount(amountdue1ColumnTotal, companyid)));
            jObj.put("amountdue2", Double.valueOf(authHandler.formattedAmount(amountdue2ColumnTotal, companyid)));
            jObj.put("amountdue3", Double.valueOf(authHandler.formattedAmount(amountdue3ColumnTotal, companyid)));
            jObj.put("amountdue4", Double.valueOf(authHandler.formattedAmount(amountdue4ColumnTotal, companyid)));
            jObj.put("amountdue5", Double.valueOf(authHandler.formattedAmount(amountdue5ColumnTotal, companyid)));
            jObj.put("amountdue6", Double.valueOf(authHandler.formattedAmount(amountdue6ColumnTotal, companyid)));
            jObj.put("amountdue7", Double.valueOf(authHandler.formattedAmount(amountdue7ColumnTotal, companyid)));
            jObj.put("amountdue8", Double.valueOf(authHandler.formattedAmount(amountdue8ColumnTotal, companyid)));
            jObj.put(InvoiceConstants.currencyname, company.getCurrency().getName());
            jObj.put("total", totalcolumnSum);
            jObj.put("totalinbase", totalInBasecolumnSum);
            jArr.put(jObj);
            
           //***********ColumnModel and rec******************************* 

//
            jobjTemp = new JSONObject();
            jobjTemp.put("name", fparams.getFieldlabel());
            jarrRecords.put(jobjTemp);

            jobjTemp = new JSONObject();
            jobjTemp.put("header", fparams.getFieldlabel());
            jobjTemp.put("dataIndex", fparams.getFieldlabel());
            jobjTemp.put("width", 150);
            jobjTemp.put("pdfwidth", 150);
            jobjTemp.put("custom", "true");
            jarrColumns.put(jobjTemp);

            
            
            jobjTemp = new JSONObject();
            jobjTemp.put("name", "currencysymbol");
            jarrRecords.put(jobjTemp);
            jobjTemp = new JSONObject();
            jobjTemp.put("name", "currencyid");
            jarrRecords.put(jobjTemp);
            jobjTemp = new JSONObject();
            jobjTemp.put("name", "currencyname");
            jarrRecords.put(jobjTemp);

            jobjTemp = new JSONObject();
            jobjTemp.put("name", "currencyname");
            jarrRecords.put(jobjTemp);

            jobjTemp = new JSONObject();
            jobjTemp.put("header", "Currency");
            jobjTemp.put("dataIndex", "currencyname");
            jobjTemp.put("width", 150);
            jobjTemp.put("pdfwidth", 150);
            jobjTemp.put("sortable", true);
            jobjTemp.put("align", "right");
            jarrColumns.put(jobjTemp);
            
            jobjTemp = new JSONObject();
            jobjTemp.put("name", "amountdue1");
            jarrRecords.put(jobjTemp);

            jobjTemp = new JSONObject();
            jobjTemp.put("header", "Current");
            jobjTemp.put("dataIndex", "amountdue1");
            jobjTemp.put("width", 150);
            jobjTemp.put("pdfwidth", 150);
            jobjTemp.put("sortable", true);
            jobjTemp.put("align", "right");
            jarrColumns.put(jobjTemp);

            jobjTemp = new JSONObject();
            jobjTemp.put("name", "amountdue2");
            jarrRecords.put(jobjTemp);

            jobjTemp = new JSONObject();
            jobjTemp.put("header", 1 + "-" + duration + " days");
            jobjTemp.put("dataIndex", "amountdue2");
            jobjTemp.put("width", 150);
            jobjTemp.put("pdfwidth", 150);
            jobjTemp.put("sortable", true);
            jobjTemp.put("align", "right");
            jarrColumns.put(jobjTemp);

            jobjTemp = new JSONObject();
            jobjTemp.put("name", "amountdue3");
            jarrRecords.put(jobjTemp);

            jobjTemp = new JSONObject();
            jobjTemp.put("header", duration + 1 + "-" + duration * 2 + " days");
            jobjTemp.put("dataIndex", "amountdue3");
            jobjTemp.put("width", 150);
            jobjTemp.put("pdfwidth", 150);
            jobjTemp.put("sortable", true);
            jobjTemp.put("align", "right");
            jarrColumns.put(jobjTemp);

            if (isdistibutive) {
                jobjTemp = new JSONObject();
                jobjTemp.put("name", "amountdue4");
                jarrRecords.put(jobjTemp);

                jobjTemp = new JSONObject();
                jobjTemp.put("header", duration * 2 + 1 + "-" + duration * 3 + " days");
                jobjTemp.put("dataIndex", "amountdue4");
                jobjTemp.put("width", 150);
                jobjTemp.put("pdfwidth", 150);
                jobjTemp.put("sortable", true);
                jobjTemp.put("align", "right");
                jarrColumns.put(jobjTemp);

                jobjTemp = new JSONObject();
                jobjTemp.put("name", "amountdue5");
                jarrRecords.put(jobjTemp);

                jobjTemp = new JSONObject();
                jobjTemp.put("header", duration * 3 + 1 + "-" + duration * 4 + " days");
                jobjTemp.put("dataIndex", "amountdue5");
                jobjTemp.put("width", 150);
                jobjTemp.put("pdfwidth", 150);
                jobjTemp.put("sortable", true);
                jobjTemp.put("align", "right");
                jarrColumns.put(jobjTemp);

                jobjTemp = new JSONObject();
                jobjTemp.put("name", "amountdue6");
                jarrRecords.put(jobjTemp);

                jobjTemp = new JSONObject();
                jobjTemp.put("header", duration * 4 + 1 + "-" + duration * 5 + " days");
                jobjTemp.put("dataIndex", "amountdue6");
                jobjTemp.put("width", 150);
                jobjTemp.put("pdfwidth", 150);
                jobjTemp.put("sortable", true);
                jobjTemp.put("align", "right");
                jarrColumns.put(jobjTemp);

                jobjTemp = new JSONObject();
                jobjTemp.put("name", "amountdue7");
                jarrRecords.put(jobjTemp);

                jobjTemp = new JSONObject();
                jobjTemp.put("header", duration * 5 + 1 + "-" + duration * 6 + " days");
                jobjTemp.put("dataIndex", "amountdue7");
                jobjTemp.put("width", 150);
                jobjTemp.put("pdfwidth", 150);
                jobjTemp.put("sortable", true);
                jobjTemp.put("align", "right");
                jarrColumns.put(jobjTemp);

                jobjTemp = new JSONObject();
                jobjTemp.put("name", "amountdue8");
                jarrRecords.put(jobjTemp);

                jobjTemp = new JSONObject();
                jobjTemp.put("header", ">" + duration * 6 + " days");
                jobjTemp.put("dataIndex", "amountdue8");
                jobjTemp.put("width", 150);
                jobjTemp.put("pdfwidth", 150);
                jobjTemp.put("sortable", true);
                jobjTemp.put("align", "right");
                jarrColumns.put(jobjTemp);
            } else {
                jobjTemp = new JSONObject();
                jobjTemp.put("name", "amountdue4");
                jarrRecords.put(jobjTemp);

                jobjTemp = new JSONObject();
                jobjTemp.put("header", ">" + duration * 3 + " days");
                jobjTemp.put("dataIndex", "amountdue4");
                jobjTemp.put("width", 150);
                jobjTemp.put("pdfwidth", 150);
                jobjTemp.put("sortable", true);
                jobjTemp.put("align", "right");
                jarrColumns.put(jobjTemp);
            }
            
            jobjTemp = new JSONObject();
            jobjTemp.put("name", "total");
            jarrRecords.put(jobjTemp);

            jobjTemp = new JSONObject();
            jobjTemp.put("header", "Total");
            jobjTemp.put("dataIndex", "total");
            jobjTemp.put("width", 150);
            jobjTemp.put("pdfwidth", 150);
            jobjTemp.put("sortable", true);
            jobjTemp.put("align", "right");
            jarrColumns.put(jobjTemp);
            
             jobjTemp = new JSONObject();
            jobjTemp.put("name", "totalinbase");
            jarrRecords.put(jobjTemp);

            jobjTemp = new JSONObject();
            jobjTemp.put("header", "Total in Base Currency("+baseCurrencyName+")");
            jobjTemp.put("dataIndex", "totalinbase");
            jobjTemp.put("width", 150);
            jobjTemp.put("pdfwidth", 150);
            jobjTemp.put("sortable", true);
            jobjTemp.put("align", "right");
            jarrColumns.put(jobjTemp);

           //***********ColumnModel and rec******************************* 
            
            
            //***********final jobj***************************************
            commData.put("success", true);
            commData.put("coldata", jArr);
            commData.put("columns", jarrColumns);
            jMeta.put("totalProperty", "totalCount");
            jMeta.put("root", "coldata");
            commData.put(Constants.RES_TOTALCOUNT, jArr.length());
            jMeta.put("fields", jarrRecords);
            commData.put("metaData", jMeta);
            JSONArray jcom = new JSONArray();
            jcom.put(commData);
            jobj.put("valid", true);
            
            if (checkForEx) {
                jobj.put("data", jArr);
            } else {
                jobj.put("data", commData);
            }
            //***********final jobj***************************************
            return jobj;
        } catch (Exception ex) {
            throw ServiceException.FAILURE("AccInvoiceServiceImpl.getAgedReportSummaryGoupingOnInvoiceDimension : " + ex.getMessage(), ex);
        }
    }
    
    @Override
    public JSONObject getAgedReceivableDetailBasedOnDimension(HttpServletRequest request) throws ServiceException {
        JSONArray jArr = new JSONArray();
        JSONObject jobj = new JSONObject();
        try {
            String companyid = "";
            JSONObject commData = new JSONObject();
            JSONObject jMeta = new JSONObject();
            JSONArray jarrColumns = new JSONArray();
            JSONArray jarrRecords = new JSONArray();
            JSONObject jobjTemp = new JSONObject();

            KwlReturnObject cmpresult = accountingHandlerDAOobj.getObject(Company.class.getName(), sessionHandlerImpl.getCompanyid(request));
            Company company = (Company) cmpresult.getEntityList().get(0);
            String baseCurrencyName = "";
            if (company != null && company.getCurrency() != null) {
                baseCurrencyName = company.getCurrency().getName();
            }
            int reportId = 809;

            HashMap hashMap=new HashMap();
            hashMap.put("companyId", company.getCompanyID());
            hashMap.put("reportId", reportId);
            KwlReturnObject customizeReportResult = accountingHandlerDAOobj.getCustomizeReportViewMappingField(hashMap);
            List<CustomizeReportMapping> customizeReportList = customizeReportResult.getEntityList();

//            String curDateString = (!StringUtil.isNullOrEmpty(request.getParameter("curdate"))) ? request.getParameter("curdate") : ((!StringUtil.isNullOrEmpty(request.getParameter("stdate"))) ? request.getParameter("stdate") : request.getParameter(Constants.REQ_startdate));
            String curDateString = !(StringUtil.isNullOrEmpty(request.getParameter(Constants.asOfDate))) ? request.getParameter(Constants.asOfDate) : request.getParameter(Constants.curdate);
            DateFormat df = authHandler.getDateOnlyFormat();
            Date curDate = df.parse(curDateString);
            int duration = 30;
            int datefilter = StringUtil.getInteger(request.getParameter("datefilter")); // 0 = Invoice Due date OR 1 = Invoice date
            boolean checkForEx = false;
            if (StringUtil.getBoolean(request.getParameter("checkforex"))) {
                checkForEx = StringUtil.getBoolean(request.getParameter("checkforex"));
            }
            int noOfInterval = StringUtil.isNullOrEmpty(request.getParameter("noOfInterval"))? 7 : Integer.parseInt(request.getParameter("noOfInterval"));

            double amountdue1 = 0;
            double amountdue2 = 0;
            double amountdue3 = 0;
            double amountdue4 = 0;
            double amountdue5 = 0;
            double amountdue6 = 0;
            double amountdue7 = 0;
            double amountdue8 = 0;
            double amountdue9 = 0;
            double amountdue10 = 0;
            double amountdue11 = 0;

            double totalamountdueinbase1 = 0;
            double totalamountdueinbase2 = 0;
            double totalamountdueinbase3 = 0;
            double totalamountdueinbase4 = 0;
            double totalamountdueinbase5 = 0;
            double totalamountdueinbase6 = 0;
            double totalamountdueinbase7 = 0;
            double totalamountdueinbase8 = 0;
            double totalamountdueinbase9 = 0;
            double totalamountdueinbase10 = 0;
            double totalamountdueinbase11 = 0;
            double amountdueinbaseTotal = 0;
            Calendar oneDayBeforeCal1 = Calendar.getInstance();
            Calendar cal1 = Calendar.getInstance();
            Calendar cal2 = Calendar.getInstance();
            Calendar cal3 = Calendar.getInstance();
            Calendar cal4 = Calendar.getInstance();
            Calendar cal5 = Calendar.getInstance();
            Calendar cal6 = Calendar.getInstance();
            Calendar cal7 = Calendar.getInstance();
            Calendar cal8 = Calendar.getInstance();
            Calendar cal9 = Calendar.getInstance();
            Calendar cal10 = Calendar.getInstance();

            oneDayBeforeCal1.setTime(curDate);
            cal1.setTime(curDate);
            cal2.setTime(curDate);
            cal3.setTime(curDate);
            cal4.setTime(curDate);
            cal5.setTime(curDate);
            cal6.setTime(curDate);
            cal7.setTime(curDate);
            cal8.setTime(curDate);
            cal9.setTime(curDate);
            cal10.setTime(curDate);
            oneDayBeforeCal1.add(Calendar.DAY_OF_YEAR, -1);
            cal2.add(Calendar.DAY_OF_YEAR, -duration);
            cal3.add(Calendar.DAY_OF_YEAR, -(duration * 2));
            cal4.add(Calendar.DAY_OF_YEAR, -(duration * 3));
            cal5.add(Calendar.DAY_OF_YEAR, -(duration * 4));
            cal6.add(Calendar.DAY_OF_YEAR, -(duration * 5));
            cal7.add(Calendar.DAY_OF_YEAR, -(duration * 6));
            cal8.add(Calendar.DAY_OF_YEAR, -(duration * 7));
            cal9.add(Calendar.DAY_OF_YEAR, -(duration * 8));
            cal10.add(Calendar.DAY_OF_YEAR, -(duration * 9));
            
            Date oneDayBeforeCal1Date = null;
            Date cal1Date = null;
            Date cal2Date = null;
            Date cal3Date = null;
            Date cal4Date = null;
            Date cal5Date = null;
            Date cal6Date = null;
            Date cal7Date = null;
            Date cal8Date = null;
            Date cal9Date = null;
            Date cal10Date = null;

            String oneDayBeforeCal1String = authHandler.getDateOnlyFormat().format(oneDayBeforeCal1.getTime());
            oneDayBeforeCal1Date = authHandler.getDateOnlyFormat().parse(oneDayBeforeCal1String);

            String cal1String = authHandler.getDateOnlyFormat().format(cal1.getTime());
            cal1Date = authHandler.getDateOnlyFormat().parse(cal1String);

            String cal2String = authHandler.getDateOnlyFormat().format(cal2.getTime());
            cal2Date = authHandler.getDateOnlyFormat().parse(cal2String);

            String cal3String = authHandler.getDateOnlyFormat().format(cal3.getTime());
            cal3Date = authHandler.getDateOnlyFormat().parse(cal3String);

            String cal4String = authHandler.getDateOnlyFormat().format(cal4.getTime());
            cal4Date = authHandler.getDateOnlyFormat().parse(cal4String);

            String cal5String = authHandler.getDateOnlyFormat().format(cal5.getTime());
            cal5Date = authHandler.getDateOnlyFormat().parse(cal5String);

            String cal6String = authHandler.getDateOnlyFormat().format(cal6.getTime());
            cal6Date = authHandler.getDateOnlyFormat().parse(cal6String);

            String cal7String = authHandler.getDateOnlyFormat().format(cal7.getTime());
            cal7Date = authHandler.getDateOnlyFormat().parse(cal7String);

            String cal8String = authHandler.getDateOnlyFormat().format(cal8.getTime());
            cal8Date = authHandler.getDateOnlyFormat().parse(cal8String);

            String cal9String = authHandler.getDateOnlyFormat().format(cal9.getTime());
            cal9Date = authHandler.getDateOnlyFormat().parse(cal9String);

            String cal10String = authHandler.getDateOnlyFormat().format(cal10.getTime());
            cal10Date = authHandler.getDateOnlyFormat().parse(cal10String);

            HashMap invoiceRequestParams = AccInvoiceServiceHandler.getInvoiceRequestMap(request);
            invoiceRequestParams.put(Constants.moduleid, Constants.Acc_Invoice_ModuleId);
            invoiceRequestParams.put("isBadDebtInvoices", !StringUtil.isNullOrEmpty(request.getParameter("isBadDebtInvoices")) ? Boolean.parseBoolean(request.getParameter("isBadDebtInvoices")) : false);
            invoiceRequestParams.put("ignorezero", !StringUtil.isNullOrEmpty(request.getParameter("ignorezero")) ? Boolean.parseBoolean(request.getParameter("ignorezero")) : false);
            invoiceRequestParams.put("report", !StringUtil.isNullOrEmpty(request.getParameter("report")) ? Boolean.parseBoolean(request.getParameter("report")) : false);
            invoiceRequestParams.put("isSOA", request.getAttribute("isSOA") != null ? (Boolean) request.getAttribute("isSOA") : false);
            invoiceRequestParams.put("oneDayBeforeCal1", oneDayBeforeCal1);
            invoiceRequestParams.put("cal1", cal1);
            invoiceRequestParams.put("cal2", cal2);
            invoiceRequestParams.put("cal3", cal3);
            invoiceRequestParams.put("cal4", cal4);
            invoiceRequestParams.put("cal5", cal5);
            invoiceRequestParams.put("cal6", cal6);
            invoiceRequestParams.put("cal7", cal7);
            invoiceRequestParams.put("cal8", cal8);
            invoiceRequestParams.put("cal9", cal9);
            invoiceRequestParams.put("cal10", cal10);
            invoiceRequestParams.put("onlyamountdue", !StringUtil.isNullOrEmpty(request.getParameter("onlyamountdue")) ? Boolean.parseBoolean(request.getParameter("onlyamountdue")) : false);
            invoiceRequestParams.put("globalCurrencyID", AccountingManager.getGlobalCurrencyidFromRequest(request));
            invoiceRequestParams.put("requestCompanyID", AccountingManager.getCompanyidFromRequest(request));
            invoiceRequestParams.put("isAgedSummary", true);
            invoiceRequestParams.put("isAgedReceivables", true);
            invoiceRequestParams.put("isAged", true);

            HashMap<String, String> customFieldMap = new HashMap<String, String>();
            HashMap<String, String> customDateFieldMap = new HashMap<String, String>();
            HashMap<String, Object> fieldrequestParams = new HashMap();
            fieldrequestParams.put(Constants.filter_names, Arrays.asList(Constants.companyid, Constants.moduleid));
            fieldrequestParams.put(Constants.filter_values, Arrays.asList(sessionHandlerImpl.getCompanyid(request), Constants.Acc_Invoice_ModuleId));
            HashMap<String, String> replaceFieldMap = new HashMap<String, String>();
            HashMap<String, Integer> FieldMap = accAccountDAOobj.getFieldParamsCustomMap(fieldrequestParams, replaceFieldMap, customFieldMap, customDateFieldMap);

            jobjTemp = new JSONObject();
            jobjTemp.put("name", "billNo");
            jarrRecords.put(jobjTemp);

            jobjTemp = new JSONObject();
            jobjTemp.put("header", "Invoice No");
            jobjTemp.put("dataIndex", "billNo");
            jobjTemp.put("width", 150);
            jobjTemp.put("pdfwidth", 150);
            jobjTemp.put("sortable", true);
            jobjTemp.put("align", "center");
            jarrColumns.put(jobjTemp);
            List customFieldList = new ArrayList();
            JSONArray invjarr = new JSONArray();
            if (checkForEx) {
                if (invoiceRequestParams.containsKey(Constants.start)) {
                    invoiceRequestParams.remove(Constants.start);
                }
                if (invoiceRequestParams.containsKey(Constants.limit)) {
                    invoiceRequestParams.remove(Constants.limit);
                }
            }
            getInvoiceJsonForagedReprtbasedOnDimension(invjarr, invoiceRequestParams, request);

            if (invjarr.length() > 0) {

                for (int i = 0; i < invjarr.length(); i++) {
                    amountdue1 = amountdue2 = amountdue3 = amountdue4 = amountdue5 = amountdue6 = amountdue7 = amountdue8 = amountdue9 = amountdue10 = amountdue11 = 0;
                    JSONObject custJobj = new JSONObject();
                    JSONObject invobj = invjarr.getJSONObject(i);

                    
                    KwlReturnObject custumObjresult1 = accountingHandlerDAOobj.getObject(Invoice.class.getName(), (invobj.has(Constants.billid)) ? invobj.getString(Constants.billid) : "");
                    Invoice inv = (Invoice) custumObjresult1.getEntityList().get(0);
                    String journalentryid = inv.getJournalEntry() != null ? inv.getJournalEntry().getID() : "";
                    companyid = inv.getCompany() != null ? inv.getCompany().getCompanyID() : "";
                    Date invoiceDate = authHandler.getDateOnlyFormat().parse(invobj.getString("date"));

                    Date dueDate = new Date();
                    if (datefilter == Constants.agedDueDate1to30Filter || datefilter == Constants.agedDueDate0to30Filter) {
                        dueDate = authHandler.getDateOnlyFormat().parse(invobj.getString(Constants.duedate));
                    } else {
                        dueDate = authHandler.getDateOnlyFormat().parse(invobj.getString("date"));
                    }
                    double amountdue = invobj.getDouble("amountdue");
                    double amountdueinbase = invobj.getDouble(InvoiceConstants.amountdueinbase);
                    Date date = null;
                    if (!invobj.getString("date").equals("")) {
                        date = df.parse(invobj.getString("date"));
                    }
                    if (dueDate.after(oneDayBeforeCal1Date) && (dueDate.before(cal1Date) || dueDate.equals(cal1Date))) {
                        amountdue1 = amountdue;
                        totalamountdueinbase1 += amountdueinbase;

                    } else if ((cal2Date.before(dueDate) || cal2Date.equals(dueDate)) && cal1Date.after(dueDate)) {
                        amountdue2 = amountdue;
                        totalamountdueinbase2 += amountdueinbase;

                    } else if ((cal3Date.before(dueDate) || cal3Date.equals(dueDate)) && cal2Date.after(dueDate)) {
                        amountdue3 = amountdue;
                        totalamountdueinbase3 += amountdueinbase;

                    } else if ((cal4Date.before(dueDate) || cal4Date.equals(dueDate)) && cal3Date.after(dueDate)) {
                        amountdue4 = amountdue;
                        totalamountdueinbase4 += amountdueinbase;

                    } else if ((cal5Date.before(dueDate) || cal5Date.equals(dueDate)) && cal4Date.after(dueDate)) {
                        amountdue5 = amountdue;
                        totalamountdueinbase5 += amountdueinbase;

                    } else if ((cal6Date.before(dueDate) || cal6Date.equals(dueDate)) && cal5Date.after(dueDate)) {
                        amountdue6 = amountdue;
                        totalamountdueinbase6 += amountdueinbase;

                    } else if ((cal7Date.before(dueDate) || cal7Date.equals(dueDate)) && cal6Date.after(dueDate)) {
                        amountdue7 = amountdue;
                        totalamountdueinbase7 += amountdueinbase;
                    } else if ((cal8Date.before(dueDate) || cal8Date.equals(dueDate)) && cal7Date.after(dueDate)) {
                        amountdue8 = amountdue;
                        totalamountdueinbase8 += amountdueinbase;
                    } else if ((cal9Date.before(dueDate) || cal9Date.equals(dueDate)) && cal8Date.after(dueDate)) {
                        amountdue9 = amountdue;
                        totalamountdueinbase9 += amountdueinbase;
                    } else if ((cal10Date.before(dueDate) || cal10Date.equals(dueDate)) && cal10Date.after(dueDate)) {
                        amountdue10 = amountdue;
                        totalamountdueinbase10 += amountdueinbase;
                    } else {
                        amountdue11 = amountdue;
                        totalamountdueinbase11 += amountdueinbase;
                    }
                    
                    
                    switch(noOfInterval){
                        case 2:
                            amountdue3 += amountdue4 + amountdue5 + amountdue6 + amountdue7 + amountdue8 + amountdue9 + amountdue10 + amountdue11;
                            amountdue4 = amountdue5 = amountdue6 = amountdue7 = amountdue8 = amountdue9 = amountdue10 = amountdue11 = 0;
                            totalamountdueinbase3 += totalamountdueinbase4 + totalamountdueinbase5 + totalamountdueinbase6 + totalamountdueinbase7 + totalamountdueinbase8 + totalamountdueinbase9 + totalamountdueinbase10 + totalamountdueinbase11;
                            totalamountdueinbase4 = totalamountdueinbase5 = totalamountdueinbase6 = totalamountdueinbase7 = totalamountdueinbase8 = totalamountdueinbase9 = totalamountdueinbase10 = totalamountdueinbase11 = 0;
                            break;
                        case 3:
                            amountdue4 += amountdue5 + amountdue6 + amountdue7 + amountdue8 + amountdue9 + amountdue10 + amountdue11;
                            amountdue5 = amountdue6 = amountdue7 = amountdue8 = amountdue9 = amountdue10 = amountdue11 = 0;
                            totalamountdueinbase4 += totalamountdueinbase5 + totalamountdueinbase6 + totalamountdueinbase7 + totalamountdueinbase8 + totalamountdueinbase9 + totalamountdueinbase10 + totalamountdueinbase11;
                            totalamountdueinbase5 = totalamountdueinbase6 = totalamountdueinbase7 = totalamountdueinbase8 = totalamountdueinbase9 = totalamountdueinbase10 = totalamountdueinbase11 = 0;
                            break;
                        case 4:
                            amountdue5 += amountdue6 + amountdue7 + amountdue8 + amountdue9 + amountdue10 + amountdue11;
                            amountdue6 = amountdue7 = amountdue8 = amountdue9 = amountdue10 = amountdue11 = 0;
                            totalamountdueinbase5 += totalamountdueinbase6 + totalamountdueinbase7 + totalamountdueinbase8 + totalamountdueinbase9 + totalamountdueinbase10 + totalamountdueinbase11;
                            totalamountdueinbase6 = totalamountdueinbase7 = totalamountdueinbase8 = totalamountdueinbase9 = totalamountdueinbase10 = totalamountdueinbase11 = 0;
                            break;
                        case 5:
                            amountdue6 += amountdue7 + amountdue8 + amountdue9 + amountdue10 + amountdue11;
                            amountdue7 = amountdue8 = amountdue9 = amountdue10 = amountdue11 = 0;
                            totalamountdueinbase6 += totalamountdueinbase7 + totalamountdueinbase8 + totalamountdueinbase9 + totalamountdueinbase10 + totalamountdueinbase11;
                            totalamountdueinbase7 = totalamountdueinbase8 = totalamountdueinbase9 = totalamountdueinbase10 = totalamountdueinbase11 = 0;
                            break;
                        case 6:
                            amountdue7 += amountdue8 + amountdue9 + amountdue10 + amountdue11;
                            amountdue8 = amountdue9 = amountdue10 = amountdue11 = 0;
                            totalamountdueinbase7 += totalamountdueinbase8 + totalamountdueinbase9 + totalamountdueinbase10 + totalamountdueinbase11;
                            totalamountdueinbase8 = totalamountdueinbase9 = totalamountdueinbase10 = totalamountdueinbase11 = 0;
                            break;
                        case 7:
                            amountdue8 += amountdue9 + amountdue10 + amountdue11;
                            amountdue9 = amountdue10 = amountdue11 = 0;
                            totalamountdueinbase8 += totalamountdueinbase9 + totalamountdueinbase10 + totalamountdueinbase11;
                            totalamountdueinbase9 = totalamountdueinbase10 = totalamountdueinbase11 = 0;
                            break;
                        case 8:
                            amountdue9 += amountdue10 + amountdue11;
                            amountdue10 = amountdue11 = 0;
                            totalamountdueinbase9 += totalamountdueinbase10 + totalamountdueinbase11;
                            totalamountdueinbase10 = totalamountdueinbase11 = 0;
                            break;
                        case 9:
                            amountdue10 += amountdue11;
                            amountdue11 = 0;
                            totalamountdueinbase10 += totalamountdueinbase11;
                            totalamountdueinbase11 = 0;
                            break;
                    }
                    
                    amountdueinbaseTotal+=amountdueinbase;
                    
                    JSONObject jObj = new JSONObject();
                    jObj.put(InvoiceConstants.amountdueinbase, Double.valueOf(authHandler.formattedAmount(amountdueinbase, companyid)));
                    jObj.put("amountdue", Double.valueOf(authHandler.formattedAmount(amountdue, companyid)));
                    jObj.put("amountdue1", Double.valueOf(authHandler.formattedAmount(amountdue1, companyid)));
                    jObj.put("amountdue2", Double.valueOf(authHandler.formattedAmount(amountdue2, companyid)));
                    jObj.put("amountdue3", Double.valueOf(authHandler.formattedAmount(amountdue3, companyid)));
                    jObj.put("amountdue4", Double.valueOf(authHandler.formattedAmount(amountdue4, companyid)));
                    jObj.put("amountdue5", Double.valueOf(authHandler.formattedAmount(amountdue5, companyid)));
                    jObj.put("amountdue6", Double.valueOf(authHandler.formattedAmount(amountdue6, companyid)));
                    jObj.put("amountdue7", Double.valueOf(authHandler.formattedAmount(amountdue7, companyid)));
                    jObj.put("amountdue8", Double.valueOf(authHandler.formattedAmount(amountdue8, companyid)));
                    jObj.put("amountdue9", Double.valueOf(authHandler.formattedAmount(amountdue9, companyid)));
                    jObj.put("amountdue10", Double.valueOf(authHandler.formattedAmount(amountdue10, companyid)));
                    jObj.put("amountdue11", Double.valueOf(authHandler.formattedAmount(amountdue11, companyid)));
                    jObj.put(InvoiceConstants.currencysymbol, (invobj.has(InvoiceConstants.currencysymbol)) ? invobj.getString(InvoiceConstants.currencysymbol) : "");
                    jObj.put(Constants.currencyKey, (invobj.has(Constants.currencyKey)) ? invobj.getString(Constants.currencyKey) : "");
                    jObj.put(InvoiceConstants.currencyname, (invobj.has(InvoiceConstants.currencyname)) ? invobj.getString(InvoiceConstants.currencyname) : "");

                    jObj.put("billNo", (invobj.has(InvoiceConstants.billno)) ? invobj.getString(InvoiceConstants.billno) : "");
                    jObj.put(InvoiceConstants.personname, (invobj.has(InvoiceConstants.personname)) ? invobj.getString(InvoiceConstants.personname) : "");
                    jObj.put("billDate", authHandler.getUserDateFormatterWithoutTimeZone(request).format(invoiceDate));
                    jObj.put(Constants.memo, (invobj.has(Constants.memo)) ? invobj.getString(Constants.memo) : "");

                    String customFieldMapValues = "";
                    Map<String, Object> variableMap = new HashMap<String, Object>();
                    HashMap<String, Object> invDetailRequestParams = new HashMap<String, Object>();
                    ArrayList Detailfilter_names = new ArrayList(), Detailfilter_params = new ArrayList();
                    Detailfilter_names.add(Constants.companyKey);
                    Detailfilter_params.add(companyid);
                    Detailfilter_names.add("journalentryId");
                    Detailfilter_params.add(journalentryid);
                    Detailfilter_names.add("moduleId");
                    Detailfilter_params.add(Constants.Acc_Invoice_ModuleId + "");
                    invDetailRequestParams.put(Constants.filterNamesKey, Detailfilter_names);
                    invDetailRequestParams.put(Constants.filterParamsKey, Detailfilter_params);
                    KwlReturnObject idcustresult = accJournalEntryobj.getJournalEntryCustomData(invDetailRequestParams);
                    if (idcustresult.getEntityList().size() > 0) {
                        AccJECustomData jeCustom = (AccJECustomData) idcustresult.getEntityList().get(0);
                        AccountingManager.setCustomColumnValues(jeCustom, FieldMap, replaceFieldMap, variableMap);
                        JSONObject params = new JSONObject();
                        params.put(Constants.companyKey, companyid);
                        params.put(Constants.isExport, true);
                        fieldDataManagercntrl.addCustomData(variableMap, customFieldMap, customDateFieldMap, custJobj, params);
                    }

                    for (CustomizeReportMapping customizeReportMapping : customizeReportList) {
                        String column = "Custom_" + customizeReportMapping.getDataIndex();

                        if (custJobj.has(column)) {
                            customFieldMapValues = custJobj.getString(column);
                            if (!customFieldList.contains(customizeReportMapping.getDataIndex())) {
//
                                jobjTemp = new JSONObject();
                                jobjTemp.put("name", customizeReportMapping.getDataIndex());
                                jarrRecords.put(jobjTemp);

                                jobjTemp = new JSONObject();
                                jobjTemp.put("header", customizeReportMapping.getDataHeader());
                                jobjTemp.put("dataIndex", customizeReportMapping.getDataIndex());
                                jobjTemp.put("width", 150);
                                jobjTemp.put("pdfwidth", 150);
                                jobjTemp.put("custom", "true");
                                jarrColumns.put(jobjTemp);

                                customFieldList.add(customizeReportMapping.getDataIndex());

                            }
                            jObj.put(customizeReportMapping.getDataIndex(), customFieldMapValues);
                        } else {

                            if (!customFieldList.contains(customizeReportMapping.getDataIndex())) {
                                jobjTemp = new JSONObject();
                                jobjTemp.put("name", customizeReportMapping.getDataIndex());
                                jarrRecords.put(jobjTemp);

                                jobjTemp = new JSONObject();
                                jobjTemp.put("header", customizeReportMapping.getDataHeader());
                                jobjTemp.put("dataIndex", customizeReportMapping.getDataIndex());
                                jobjTemp.put("width", 150);
                                jobjTemp.put("pdfwidth", 150);
                                jobjTemp.put("custom", "true");
                                jarrColumns.put(jobjTemp);
                                customFieldList.add(customizeReportMapping.getDataIndex());
                            }

                        }

                    }
                    jArr.put(jObj);
                }
            }

            JSONArray pagedJson = jArr;
            if (!checkForEx) {
                String start = request.getParameter(Constants.start);
                String limit = request.getParameter(Constants.limit);
                if (!StringUtil.isNullOrEmpty(start) && !StringUtil.isNullOrEmpty(limit)) {
                    pagedJson = StringUtil.getPagedJSON(pagedJson, Integer.parseInt(start), Integer.parseInt(limit));
                }
            }
             JSONObject jObj = new JSONObject();
             companyid = sessionHandlerImpl.getCompanyid(request);
            jObj.put(InvoiceConstants.amountdueinbase, Double.valueOf(authHandler.formattedAmount(amountdueinbaseTotal, companyid)));
            jObj.put("amountdue", Double.valueOf(authHandler.formattedAmount(amountdueinbaseTotal, companyid)));
            jObj.put("amountdue1", Double.valueOf(authHandler.formattedAmount(totalamountdueinbase1, companyid)));
            jObj.put("amountdue2", Double.valueOf(authHandler.formattedAmount(totalamountdueinbase2, companyid)));
            jObj.put("amountdue3", Double.valueOf(authHandler.formattedAmount(totalamountdueinbase3, companyid)));
            jObj.put("amountdue4", Double.valueOf(authHandler.formattedAmount(totalamountdueinbase4, companyid)));
            jObj.put("amountdue5", Double.valueOf(authHandler.formattedAmount(totalamountdueinbase5, companyid)));
            jObj.put("amountdue6", Double.valueOf(authHandler.formattedAmount(totalamountdueinbase6, companyid)));
            jObj.put("amountdue7", Double.valueOf(authHandler.formattedAmount(totalamountdueinbase7, companyid)));
            jObj.put("amountdue8", Double.valueOf(authHandler.formattedAmount(totalamountdueinbase8, companyid)));
            jObj.put("amountdue9", Double.valueOf(authHandler.formattedAmount(totalamountdueinbase9, companyid)));
            jObj.put("amountdue10", Double.valueOf(authHandler.formattedAmount(totalamountdueinbase10, companyid)));
            jObj.put("amountdue11", Double.valueOf(authHandler.formattedAmount(totalamountdueinbase11, companyid)));
            jObj.put(InvoiceConstants.currencysymbol, company.getCurrency().getSymbol());
            jObj.put(Constants.currencyKey, company.getCurrency().getCurrencyID());
            jObj.put(InvoiceConstants.currencyname, company.getCurrency().getName());

            jObj.put("billNo","Grand Total");
            jObj.put(InvoiceConstants.personname, "");
            jObj.put("billDate","");
            jObj.put(Constants.memo, "");
            
            pagedJson.put(jObj);
//            ***********ColumnModel and rec******************************* 

            jobjTemp = new JSONObject();
            jobjTemp.put("name", "currencysymbol");
            jarrRecords.put(jobjTemp);
            jobjTemp = new JSONObject();
            jobjTemp.put("name", "currencyid");
            jarrRecords.put(jobjTemp);
            jobjTemp = new JSONObject();
            jobjTemp.put("name", "currencyname");
            jarrRecords.put(jobjTemp);


            jobjTemp = new JSONObject();
            jobjTemp.put("name", "billDate");
            jarrRecords.put(jobjTemp);

            jobjTemp = new JSONObject();
            jobjTemp.put("header", "Invoice Date");
            jobjTemp.put("dataIndex", "billDate");
            jobjTemp.put("width", 150);
            jobjTemp.put("pdfwidth", 150);
            jobjTemp.put("sortable", true);
            jobjTemp.put("align", "center");
            jarrColumns.put(jobjTemp);

            jobjTemp = new JSONObject();
            jobjTemp.put("name", "personname");
            jarrRecords.put(jobjTemp);

            jobjTemp = new JSONObject();
            jobjTemp.put("header", "Customer Name");
            jobjTemp.put("dataIndex", "personname");
            jobjTemp.put("width", 150);
            jobjTemp.put("pdfwidth", 150);
            jobjTemp.put("sortable", true);
            jobjTemp.put("align", "left");
            jarrColumns.put(jobjTemp);

            jobjTemp = new JSONObject();
            jobjTemp.put("name", "memo");
            jarrRecords.put(jobjTemp);

            jobjTemp = new JSONObject();
            jobjTemp.put("header", "Remark");
            jobjTemp.put("dataIndex", "memo");
            jobjTemp.put("width", 150);
            jobjTemp.put("pdfwidth", 150);
            jobjTemp.put("sortable", true);
            jobjTemp.put("align", "left");
            jarrColumns.put(jobjTemp);
            
            jobjTemp = new JSONObject();
            jobjTemp.put("name", "currencyname");
            jarrRecords.put(jobjTemp);

            jobjTemp = new JSONObject();
            jobjTemp.put("header", "Currency");
            jobjTemp.put("dataIndex", "currencyname");
            jobjTemp.put("width", 150);
            jobjTemp.put("pdfwidth", 150);
            jobjTemp.put("sortable", true);
            jobjTemp.put("align", "right");
            jarrColumns.put(jobjTemp);

            jobjTemp = new JSONObject();
            jobjTemp.put("name", "amountdue");
            jarrRecords.put(jobjTemp);

            jobjTemp = new JSONObject();
            jobjTemp.put("header", "Amount Due");
            jobjTemp.put("dataIndex", "amountdue");
            jobjTemp.put("width", 150);
            jobjTemp.put("pdfwidth", 150);
            jobjTemp.put("sortable", true);
            jobjTemp.put("align", "right");
            jarrColumns.put(jobjTemp);

            jobjTemp = new JSONObject();
            jobjTemp.put("name", "amountdue2");
            jarrRecords.put(jobjTemp);

            jobjTemp = new JSONObject();
            jobjTemp.put("header", 1 + "-" + duration + " days");
            jobjTemp.put("dataIndex", "amountdue2");
            jobjTemp.put("width", 150);
            jobjTemp.put("pdfwidth", 150);
            jobjTemp.put("sortable", true);
            jobjTemp.put("align", "right");
            jarrColumns.put(jobjTemp);

            jobjTemp = new JSONObject();
            jobjTemp.put("name", "amountdue3");
            jarrRecords.put(jobjTemp);

            jobjTemp = new JSONObject();
            jobjTemp.put("header", duration + 1 + "-" + duration * 2 + " days");
            jobjTemp.put("dataIndex", "amountdue3");
            jobjTemp.put("width", 150);
            jobjTemp.put("pdfwidth", 150);
            jobjTemp.put("sortable", true);
            jobjTemp.put("align", "right");
            jarrColumns.put(jobjTemp);

            jobjTemp = new JSONObject();
            jobjTemp.put("name", "amountdue4");
            jarrRecords.put(jobjTemp);

            jobjTemp = new JSONObject();
            jobjTemp.put("header", duration * 2 + 1 + "-" + duration * 3 + " days");
            jobjTemp.put("dataIndex", "amountdue4");
            jobjTemp.put("width", 150);
            jobjTemp.put("pdfwidth", 150);
            jobjTemp.put("sortable", true);
            jobjTemp.put("align", "right");
            jarrColumns.put(jobjTemp);

            jobjTemp = new JSONObject();
            jobjTemp.put("name", "amountdue5");
            jarrRecords.put(jobjTemp);

            jobjTemp = new JSONObject();
            jobjTemp.put("header", duration * 3 + 1 + "-" + duration * 4 + " days");
            jobjTemp.put("dataIndex", "amountdue5");
            jobjTemp.put("width", 150);
            jobjTemp.put("pdfwidth", 150);
            jobjTemp.put("sortable", true);
            jobjTemp.put("align", "right");
            jarrColumns.put(jobjTemp);

            jobjTemp = new JSONObject();
            jobjTemp.put("name", "amountdue6");
            jarrRecords.put(jobjTemp);

            jobjTemp = new JSONObject();
            jobjTemp.put("header", duration * 4 + 1 + "-" + duration * 5 + " days");
            jobjTemp.put("dataIndex", "amountdue6");
            jobjTemp.put("width", 150);
            jobjTemp.put("pdfwidth", 150);
            jobjTemp.put("sortable", true);
            jobjTemp.put("align", "right");
            jarrColumns.put(jobjTemp);

            jobjTemp = new JSONObject();
            jobjTemp.put("name", "amountdue7");
            jarrRecords.put(jobjTemp);

            jobjTemp = new JSONObject();
            jobjTemp.put("header", duration * 5 + 1 + "-" + duration * 6 + " days");
            jobjTemp.put("dataIndex", "amountdue7");
            jobjTemp.put("width", 150);
            jobjTemp.put("pdfwidth", 150);
            jobjTemp.put("sortable", true);
            jobjTemp.put("align", "right");
            jarrColumns.put(jobjTemp);

            jobjTemp = new JSONObject();
            jobjTemp.put("name", "amountdue8");
            jarrRecords.put(jobjTemp);

            jobjTemp = new JSONObject();
            jobjTemp.put("header", ">" + duration * 6 + " days");
            jobjTemp.put("dataIndex", "amountdue8");
            jobjTemp.put("width", 150);
            jobjTemp.put("pdfwidth", 150);
            jobjTemp.put("sortable", true);
            jobjTemp.put("align", "right");
            jarrColumns.put(jobjTemp);

            jobjTemp = new JSONObject();
            jobjTemp.put("name", "amountdueinbase");
            jarrRecords.put(jobjTemp);

            jobjTemp = new JSONObject();
            jobjTemp.put("header", "Total in Base Currency(" + baseCurrencyName + ")");
            jobjTemp.put("dataIndex", "amountdueinbase");
            jobjTemp.put("width", 150);
            jobjTemp.put("pdfwidth", 150);
            jobjTemp.put("sortable", true);
            jobjTemp.put("align", "right");
            jarrColumns.put(jobjTemp);

            //***********ColumnModel and rec******************************* 
            //***********final jobj***************************************
            commData.put("success", true);
            commData.put("coldata", pagedJson);
            commData.put("columns", jarrColumns);
            jMeta.put("totalProperty", "totalCount");
            jMeta.put("root", "coldata");
            commData.put(Constants.RES_TOTALCOUNT, jArr.length());
            jMeta.put("fields", jarrRecords);
            commData.put("metaData", jMeta);
            JSONArray jcom = new JSONArray();
            jcom.put(commData);
            jobj.put("valid", true);

            if (checkForEx) {
                jobj.put("data", pagedJson);
            } else {
                jobj.put("data", commData);
            }
            //***********final jobj***************************************
            return jobj;
        } catch (Exception ex) {
            throw ServiceException.FAILURE("AccInvoiceServiceImpl.getAgedReceivableDetailBasedOnDimension : " + ex.getMessage(), ex);
        }
    }
    
    public void getInvoiceJsonForagedReprtbasedOnDimension(JSONArray invjarr, HashMap invoiceRequestParams, HttpServletRequest request) throws ServiceException {
        try {
            KwlReturnObject result = accInvoiceDAOobj.getInvoicesMerged(invoiceRequestParams);
            List list = result.getEntityList();
            if (!list.isEmpty()) {
                invjarr = getInvoiceJsonForAgedReceivables(request, list, invjarr, invoiceRequestParams);
            }
            JSONArray OBJArryInvoice = new JSONArray();
            invoiceRequestParams.put("isOpeningBalance", true);// Add isOpeningBalance from params to filter opening records
            result = accInvoiceDAOobj.getOpeningBalanceInvoices(invoiceRequestParams);
            if (result.getRecordTotalCount() > 0) {
                OBJArryInvoice = AccInvoiceServiceHandler.getAgedOpeningBalanceInvoiceJson(invoiceRequestParams, result.getEntityList(), OBJArryInvoice, accCurrencyDAOobj, accInvoiceCommon, request, accountingHandlerDAOobj,accAccountDAOobj,fieldDataManagercntrl,accJournalEntryobj);
                for (int i = 0; i < OBJArryInvoice.length(); i++) {
                    invjarr.put(OBJArryInvoice.get(i));
                }
            }
            invoiceRequestParams.remove("isOpeningBalance");// Remove/reset isOpeningBalance from params
        } catch (Exception ex) {
            throw ServiceException.FAILURE("AccInvoiceServiceImpl.getInvoiceJsonForagedReprtbasedOnDimension : " + ex.getMessage(), ex);
        }
    }
    
    public JSONArray getMonthlyCustomerAgedReceivableMerged(HttpServletRequest request) throws ServiceException, JSONException, SessionExpiredException, ParseException {
        JSONObject jObj = new JSONObject();
        JSONArray jArr = new JSONArray();
        try {
            HashMap invoiceRequestParams = getCustomerAgedReceivableMap(request, true);
            invoiceRequestParams.put("isAgedReceivables", true);
            invoiceRequestParams.put("cntype", null);
            invoiceRequestParams.put("isAgedSummary", true);
            
            String companyid = sessionHandlerImpl.getCompanyid(request);
            String userdateformat = sessionHandlerImpl.getUserDateFormat(request);
            DateFormat userdf = new SimpleDateFormat(userdateformat);
            invoiceRequestParams.put("companyid", companyid);
            DateFormat df = authHandler.getDateOnlyFormat();
            int datefilter = StringUtil.getInteger(request.getParameter("datefilter"));// 0 = Invoice Due date OR 1 = Invoice date
            boolean isSummary = false;
            boolean isCallFromDD = false;
            if ( request.getParameter("isSummary") != null ) {
                isSummary =  Boolean.parseBoolean(request.getParameter("isSummary"));
            } else if ( request.getAttribute("isSummary") != null ) {
                isSummary =  Boolean.parseBoolean(request.getAttribute("isSummary").toString());
            }
            if ( request.getAttribute("isCallFromDD") != null ) {
                isCallFromDD =  Boolean.parseBoolean(request.getAttribute("isCallFromDD").toString());
            }
            String transactionId = request.getAttribute("transactionId")==null? "" : request.getAttribute("transactionId").toString();
            if(isCallFromDD){
                invoiceRequestParams.put("custVendorID", transactionId);
            }
            /**
              * For SOA Calculation On Invoice Date 1 = = Invoice Date
              */
            if(isCallFromDD){
                datefilter = 1;
            }
            String fileType = request.getParameter("filetype");
            final DateTimeFormatter dtf = DateTimeFormat.forPattern("MMMM, yyyy");
            LocalDate localStartDate = null;
            LocalDate templocalStartDate = null;
            try {
                localStartDate = dtf.parseLocalDate(request.getParameter(Constants.REQ_startdate));
                templocalStartDate = dtf.parseLocalDate(request.getParameter(Constants.REQ_startdate));
            } catch(Exception ex) {
                localStartDate  = dtf.parseLocalDate(request.getAttribute(Constants.REQ_startdate).toString());
                templocalStartDate  = dtf.parseLocalDate(request.getAttribute(Constants.REQ_startdate).toString());
            }
            LocalDate localEndDate = null;
            LocalDate TemplocalEndDate = null;
            try {
                localEndDate = dtf.parseLocalDate(request.getParameter(Constants.REQ_enddate));
                TemplocalEndDate = dtf.parseLocalDate(request.getParameter(Constants.REQ_enddate));
            } catch(Exception ex) {
                localEndDate = dtf.parseLocalDate(request.getAttribute(Constants.REQ_enddate).toString());
                TemplocalEndDate = dtf.parseLocalDate(request.getAttribute(Constants.REQ_enddate).toString());
            }
            Date startDate = localStartDate.toDate();
            Date endDate = localEndDate.toDate();
            Date asofDate = df.parse(request.getParameter("asofdate"));
            Calendar cal = Calendar.getInstance();
            cal.setTime(startDate);
            int startMonth = cal.get(Calendar.MONTH);
            int startYear = cal.get(Calendar.YEAR);
            cal.setTime(endDate);
            int endMonth = cal.get(Calendar.MONTH);
            int endYear = cal.get(Calendar.YEAR);
            boolean isOneMonth = false;
            int monthCount = 0;
            SimpleDateFormat df1 = new SimpleDateFormat();

            DateTime date1 = localEndDate.toDateTime(LocalTime.MIDNIGHT);
            // DateTime date = localEndDate.toDateTimeAtCurrentTime();
            // including whole day 24*60*60-1
            date1 = date1.plusSeconds(86399);
            endDate = date1.dayOfMonth().withMaximumValue().toDate();
            Calendar startcal = Calendar.getInstance();
            DateTime lastDateOfMonth1 = date1.dayOfMonth().withMaximumValue();
//            startcal.setTime(new Date(df1.format(startDate)));
            startcal.setTime(startDate);
//            invoiceRequestParams.put(Constants.REQ_startdate, "" + (startcal.getTimeInMillis()));
            
//            invoiceRequestParams.put(Constants.REQ_startdate, "" + (new Date(1970)).getTime());
            Date startcalDate = null;
            String startcalString = authHandler.getDateOnlyFormat().format(startcal.getTime());
            invoiceRequestParams.put("startdate", startcalString);
            startcalDate = authHandler.getDateOnlyFormat().parse(startcalString);
//            invoiceRequestParams.put("MonthlyAgeingStartDate", startcalDate);
//            startcal.setTime(new Date(df1.format(endDate)));
            startcal.setTime(endDate);
            startcalString = authHandler.getDateOnlyFormat().format(startcal.getTime());
            invoiceRequestParams.put("enddate", startcalString);
            invoiceRequestParams.put("curdate", startcalString);
            startcalDate = authHandler.getDateOnlyFormat().parse(startcalString);
//            invoiceRequestParams.put(Constants.REQ_enddate, "" + (startcal.getTimeInMillis()));
//            invoiceRequestParams.put(InvoiceConstants.curdate, "" + (startcal.getTimeInMillis()));
//            invoiceRequestParams.put("MonthlyAgeingEndDate",startcalDate);
//            invoiceRequestParams.put("isMonthlyAgeingReport", true);
//            invoiceRequestParams.put("MonthlyAgeingCurrDate", startcalDate);
            request.setAttribute(InvoiceConstants.curdate, startcalDate);
            request.setAttribute("MonthlyAgeingCurrDate", startcalDate);
            TemplocalEndDate = new LocalDate(startcalDate);
            // if user selects same month & year for both start & end fields, we get the last date of the month to populate into the endDate
            if (startMonth == endMonth && startYear == endYear) {
                isOneMonth = true;
                localEndDate = new LocalDate(endDate);
                monthCount = 1;
            }

            if (!isOneMonth) // just a trick to include the last month as well
            {
                localEndDate = localEndDate.plus(Period.months(1));
            }

            while (localStartDate.isBefore(localEndDate)) {
                localStartDate = localStartDate.plus(Period.months(1));
                monthCount++;
            }
            try {
                localStartDate = dtf.parseLocalDate(request.getParameter(Constants.REQ_startdate));
                localEndDate = dtf.parseLocalDate(request.getParameter(Constants.REQ_enddate));
            } catch (Exception ex) {
                localStartDate = dtf.parseLocalDate(request.getAttribute(Constants.REQ_startdate).toString());
                localEndDate = dtf.parseLocalDate(request.getAttribute(Constants.REQ_enddate).toString());
            }
            if (!isOneMonth) // just a trick to include the last month as well
            {
                localEndDate = localEndDate.plus(Period.months(1));
            } else {
                localEndDate = new LocalDate(endDate);
            }

            KwlReturnObject custresult = accCustomerDAOobj.getCustomerForAgedReceivable(invoiceRequestParams);
            Iterator itrcust = custresult.getEntityList().iterator();
//            if (invoiceRequestParams.containsKey(Constants.start)) { //Removing paging here because it is applying on each vendor data (CN/DN etc). Due to this complete amount due not showing in AP Summary.  
//                invoiceRequestParams.remove(Constants.start);
//            }
//            if (invoiceRequestParams.containsKey(Constants.limit)) {
//                invoiceRequestParams.remove(Constants.limit);
//            }
            

            while (itrcust.hasNext()) {
                JSONObject summaryObj = new JSONObject();
                JSONArray invjarr = new JSONArray();
                String personID = null;
                String personName = null;
                String amountdueInBase = null;
                String currencyid = null;
                boolean isCN = false;
                boolean isRP = false;
                Object custid = itrcust.next();
                invoiceRequestParams.put(Constants.customerid, custid);
                invoiceRequestParams.put("accid", custid);
                KwlReturnObject objItr = accountingHandlerDAOobj.getObject(Customer.class.getName(), custid.toString());
                Customer customer = (Customer) objItr.getEntityList().get(0);
                String currencyidCust = customer.getAccount().getCurrency().getCurrencyID();
                String currencySymbolCust = customer.getAccount().getCurrency().getSymbol();
                String currencyNameCust = customer.getAccount().getCurrency().getName();

                
                Map<String, Object> requestParams1 = new HashMap<String, Object>();
                requestParams1.put(Constants.companyKey, companyid);
                requestParams1.put("isAgedDetailsReport", true);
                requestParams1.put("datefilter", "1");
                requestParams1.put("custVendorID", custid);
                DateFormat origdf = authHandler.getDateOnlyFormat();
                requestParams1.put("enddate", origdf.format(endDate));
                requestParams1.put("asofdate", origdf.format(asofDate));
                if (!Constants.isOptimized) {
                    invjarr = getAllInvoiceKnockOffJSON(requestParams1);
                }
                List list = accInvoiceDAOobj.getInvoiceKnockOffTransactions(requestParams1);
                for (int i = 0; i < list.size(); i++) {
                    Object[] details = (Object[]) list.get(i);
                    JSONObject obj = new JSONObject();
                    double amountdueinbase = (Double) details[2] - (Double) details[7];
                    amountdueinbase = authHandler.round(amountdueinbase, companyid);
                    double amountdue = (Double) details[1] - (Double) details[6];
                    amountdue = authHandler.round(amountdue, companyid);
                    if (authHandler.round(amountdue, companyid) <= 0) {
                        continue;
                    }
                    obj.put(Constants.billid, details[0]);
                    obj.put("isOpeningBalanceTransaction", details[8]);
                    obj.put(Constants.companyKey, details[9]);
                    obj.put("companyname", details[10]);
                    obj.put(InvoiceConstants.personid, details[11]);
                    obj.put("customername", details[12]);
                    obj.put("customercode", details[24]);
                    obj.put(InvoiceConstants.CustomerCreditTerm, details[13]);
                    obj.put(InvoiceConstants.aliasname, details[14]);
                    obj.put("type", Constants.CUSTOMER_INVOICE);
                    obj.put(InvoiceConstants.billno, details[15]);
                    obj.put(Constants.currencyKey, details[16]);
                    obj.put(InvoiceConstants.currencysymbol, details[17]);
                    obj.put(InvoiceConstants.currencyname, details[18]);
                    obj.put("externalcurrencyrate", details[19]);
                    obj.put("exchangerate", details[20]);
                    String invCreationDate = details[21] == null ? df.format(details[5]) : df.format(details[21]);
                    obj.put("date", invCreationDate);
                    obj.put("dateinuserformat", invCreationDate);
                    obj.put(Constants.shipdate, details[22] == null ? "" : df.format(details[22]));//XX
                    obj.put(Constants.duedate, df.format(details[23]));
                    obj.put("duedateInUserDateFormat", df.format(details[23]));
                    obj.put(InvoiceConstants.personname, details[12]);
                    obj.put(InvoiceConstants.personinfo, details[12] + "(" + details[24] + ")");
                    obj.put("customercurrencyid", details[25]);
                    obj.put("entryno", details[26]);
                    obj.put("salespersonname", details[27]);
                    obj.put("memo", details[28]);
                    obj.put("salespersoncode", details[29]);
                    obj.put("salespersoninfo", details[27] + "(" + details[29] + ")");
                    obj.put("salespersonid", details[30]);
                    obj.put("termname", details[31]);

                    obj.put(InvoiceConstants.amountdueinbase, amountdueinbase);
                    obj.put("amountdue", authHandler.round(amountdue, companyid));
                    Date dueDate = null;

                    if (datefilter == Constants.agedDueDate1to30Filter || datefilter == Constants.agedDueDate0to30Filter) {
                        dueDate = df.parse(df.format(details[23]));
                    } else {
                        dueDate = df.parse(df.format(details[5]));
                    }

//                if (startDate != null && dueDate.before(startDate)) {//In Aged Report amountdue goes in Accruade Balance for those transaction whose creation/due date is previous to Start date will goes into the accrued balance, likes opening balance 
//                    accruedbalance = authHandler.round(amountdue, companyid);
//                } else
                    obj.put("amountduenonnegative", (amountdue <= 0) ? 0 : authHandler.round(amountdue, companyid));//XX
                    obj.put("amount", authHandler.round((Double) details[1], companyid));   //actual invoice amount
                    obj.put("type", "Sales Invoice");
                    if((requestParams1.containsKey("isAgedDetailsReport") && ((Boolean)requestParams1.get("isAgedDetailsReport")==true)) && (details.length > 33)){
                        obj.put("journalentryid", details[34]);
                    }
                    invjarr.put(obj);
                }
                
                
                JSONArray OBJArryInvoice = new JSONArray();
                KwlReturnObject result = accInvoiceDAOobj.getOpeningBalanceInvoices(invoiceRequestParams);
                if (result.getRecordTotalCount() > 0) {
                    OBJArryInvoice = AccInvoiceServiceHandler.getAgedOpeningBalanceInvoiceJson(invoiceRequestParams, result.getEntityList(), OBJArryInvoice, accCurrencyDAOobj, accInvoiceCommon, request, accountingHandlerDAOobj,accAccountDAOobj,fieldDataManagercntrl,accJournalEntryobj);
                    for (int i = 0; i < OBJArryInvoice.length(); i++) {
                        invjarr.put(OBJArryInvoice.get(i));
                    }
                }

                    JSONArray OBJArryDebitNote = new JSONArray();
                    result = accDebitNoteobj.getOpeningBalanceCustomerDNs(invoiceRequestParams);
                    if (result.getRecordTotalCount() > 0) {
                    OBJArryDebitNote = AccInvoiceServiceHandler.getAgedOpeningBalanceDebitNoteJson(invoiceRequestParams, result.getEntityList(), OBJArryDebitNote, accCurrencyDAOobj, accReceiptDAOobj, request, accountingHandlerDAOobj,accAccountDAOobj,fieldDataManagercntrl,accJournalEntryobj,accCreditNoteDAOobj);
                        for (int i = 0; i < OBJArryDebitNote.length(); i++) {
                            invjarr.put(OBJArryDebitNote.get(i));
                        }
                    }
                
                    JSONArray OBJArryCreditNote = new JSONArray();
                    result = accCreditNoteDAOobj.getOpeningBalanceCNs(invoiceRequestParams);
                    if (result.getRecordTotalCount() > 0) {
                    OBJArryCreditNote = AccInvoiceServiceHandler.getAgedOpeningBalanceCreditNoteJson(invoiceRequestParams, result.getEntityList(), OBJArryCreditNote, accCurrencyDAOobj, accPaymentDAOobj, request, accountingHandlerDAOobj, accCreditNoteDAOobj,accAccountDAOobj,fieldDataManagercntrl,accJournalEntryobj);
                        for (int i = 0; i < OBJArryCreditNote.length(); i++) {
                            invjarr.put(OBJArryCreditNote.get(i));
                        }
                    }
                
                
                    JSONArray OBJArryPayment = new JSONArray();
                    result = accReceiptDAOobj.getOpeningBalanceReceipts(invoiceRequestParams);
                    if (result.getRecordTotalCount() > 0) {
                        OBJArryPayment = AccInvoiceServiceHandler.getAgedOpeningBalanceReceiptJson(invoiceRequestParams, result.getEntityList(), OBJArryPayment, accCurrencyDAOobj, accReceiptDAOobj, request, accountingHandlerDAOobj, accAccountDAOobj, fieldDataManagercntrl, accJournalEntryobj);
                        for (int i = 0; i < OBJArryPayment.length(); i++) {
                            invjarr.put(OBJArryPayment.get(i));
                        }
                    }
                

                    JSONArray CreditNotejArr = new JSONArray();
                    result = accCreditNoteDAOobj.getCreditNoteMerged(invoiceRequestParams);
                    if (result.getRecordTotalCount() > 0) {
                        CreditNotejArr = AccInvoiceServiceHandler.getCreditNotesMergedJson(invoiceRequestParams, result.getEntityList(), CreditNotejArr, accountingHandlerDAOobj, authHandlerDAOObj, accCurrencyDAOobj, accPaymentDAOobj, request, accCreditNoteDAOobj, accAccountDAOobj, fieldDataManagercntrl, accJournalEntryobj);
                        for (int i = 0; i < CreditNotejArr.length(); i++) {
                            invjarr.put(CreditNotejArr.get(i));
                        }
                    }
                

                   invoiceRequestParams.put("cntype", 4);
                    JSONArray DebitNotejArr = new JSONArray();//This is used for getting DN gainst vendor and otherwise 
                    result = accDebitNoteobj.getDebitNoteMerged(invoiceRequestParams);
                   if (result.getRecordTotalCount() > 0) {
                        DebitNotejArr = AccInvoiceServiceHandler.getDebitNotesMergedJson(invoiceRequestParams, result.getEntityList(), DebitNotejArr, accountingHandlerDAOobj, authHandlerDAOObj, accCurrencyDAOobj, accReceiptDAOobj, request, accAccountDAOobj, fieldDataManagercntrl, accJournalEntryobj, accCreditNoteDAOobj);
                        for (int i = 0; i < DebitNotejArr.length(); i++) {
                           invjarr.put(DebitNotejArr.get(i));
                        }
                    }
                    invoiceRequestParams.remove("cntype");
                

                    JSONArray receivePaymentJArr = new JSONArray();
                    invoiceRequestParams.put("allAdvPayment", true); // needs only advance type record so that putted true
                    invoiceRequestParams.put("paymentWindowType", 1);//Receipt to Customer record
                    result = accReceiptDAOobj.getReceipts(invoiceRequestParams);
                    if (result.getRecordTotalCount() > 0) {
                        receivePaymentJArr = AccInvoiceServiceHandler.getReceiptsJson(invoiceRequestParams, result.getEntityList(), receivePaymentJArr, accountingHandlerDAOobj, authHandlerDAOObj, accCurrencyDAOobj, accReceiptDAOobj, request,accAccountDAOobj,fieldDataManagercntrl,accJournalEntryobj);
                        for (int i = 0; i < receivePaymentJArr.length(); i++) {
                            invjarr.put(receivePaymentJArr.get(i));
                        }
                    }
                
                
                    invoiceRequestParams.put("allAdvPayment", true); // needs only advance  type record so that putted true
                    invoiceRequestParams.put("paymentWindowType", 2);//Receipt to Vendor record
                    JSONArray makePaymentJArr = new JSONArray();
                    result = accVendorPaymentobj.getPayments(invoiceRequestParams);
                    if (result != null && result.getEntityList() != null && !result.getEntityList().isEmpty()) {
                        makePaymentJArr = accGoodsReceiptServiceHandler.getPaymentsJson(invoiceRequestParams, result.getEntityList(), makePaymentJArr, accCurrencyDAOobj, accountingHandlerDAOobj, accVendorPaymentobj);
                        for (int i = 0; i < makePaymentJArr.length(); i++) {
                            invjarr.put(makePaymentJArr.get(i));
                        }
                    }
                    invoiceRequestParams.remove("allAdvPayment");
                    invoiceRequestParams.remove("paymentWindowType");
                
                    for (int i = 0; i < invjarr.length(); i++) {
                    JSONObject invobj = invjarr.getJSONObject(i);
                    personID = (invobj.has(InvoiceConstants.personid)) ? invobj.getString(InvoiceConstants.personid) : "";
                    personName = (invobj.has(InvoiceConstants.personname)) ? invobj.getString(InvoiceConstants.personname) : "";
                    amountdueInBase = invobj.getString(InvoiceConstants.amountdueinbase);
                    currencyid = (invobj.has(Constants.currencyKey)) ? invobj.getString(Constants.currencyKey) : "";
                    isCN = invobj.has("isCN") ? invobj.getBoolean("isCN") : false;
                    isRP = invobj.has("isRP") ? invobj.getBoolean("isRP") : false;
                    jObj.put(InvoiceConstants.personid, personID);
                    jObj.put(InvoiceConstants.amountdueinbase, amountdueInBase);
                    jObj.put(InvoiceConstants.personname, personName);
                    Date dueDate = new Date();
                    if (datefilter == Constants.agedDueDate1to30Filter || datefilter == Constants.agedDueDate0to30Filter) {
                        dueDate = authHandler.getDateOnlyFormat().parse(invobj.getString(Constants.duedate));
                    } else {
                        dueDate = authHandler.getDateOnlyFormat().parse(invobj.getString("date"));
                    }
                    double amountdue = invobj.getDouble("amountdue");
                    double amountdueinbase = invobj.getDouble(InvoiceConstants.amountdueinbase);

                    boolean isopeningBalanceTransaction = invobj.optBoolean("isOpeningBalanceTransaction", false);
                    boolean isConversionRateFromCurrencyToBase = invobj.optBoolean("isConversionRateFromCurrencyToBase", false);

                    KwlReturnObject bAmt = null;
                    if (isopeningBalanceTransaction && isConversionRateFromCurrencyToBase) {// if Transaction is opening balance Transaction and Conversion rate is taken from user is Currency to base then following method will be called.
                        bAmt = accCurrencyDAOobj.getOneCurrencyToOtherModifiedAccordingToCurrencyToBaseExchangeRate(invoiceRequestParams, amountdue, currencyid, currencyidCust, df.parse(invobj.getString("date")), invobj.getDouble("externalcurrencyrate"));
                    } else {
                        bAmt = accCurrencyDAOobj.getOneCurrencyToOtherModified(invoiceRequestParams, amountdue, currencyid, currencyidCust, df.parse(invobj.getString("date")), invobj.getDouble("externalcurrencyrate"));
                    }
                    if(isSummary){//------------------------In Case Of Summary Amount Due is in Vendor Currency
                        amountdue = authHandler.round((Double) bAmt.getEntityList().get(0), companyid);
                    }
                    if (isCN || isRP) {
                        amountdueinbase = -amountdueinbase;
                        amountdue = -amountdue;
                    }
                    double totalinbase = 0;
                    invobj.put("amountdueinbase", amountdueinbase);

                    DateTime date = templocalStartDate.toDateTime(LocalTime.MIDNIGHT);
                    DateTime lastDateOfMonth = date.dayOfMonth().withMaximumValue();
                    Date tempDate = new Date();
                    Date startDate1 = templocalStartDate.toDate();
                    Calendar cal1 = Calendar.getInstance();
                    Date d = new Date();
                    df1 = new SimpleDateFormat();
                    df1.applyPattern("MMM dd yyyy");
                    cal1.setTime(new Date(df1.format(startDate1)));
                    Date cal1Date = null;
                    String cal1String = authHandler.getDateOnlyFormat().format(cal1.getTime());
                    cal1Date = authHandler.getDateOnlyFormat().parse(cal1String);
                    tempDate = cal1Date;
                    localStartDate = new LocalDate(tempDate);
                    Date endDate1 = lastDateOfMonth.toDate();
                    Calendar endcal = Calendar.getInstance();
                    d = new Date();
                    endcal.setTime(new Date(df1.format(endDate1)));
                    Date endcalDate = null;
                    String endcalString = authHandler.getDateOnlyFormat().format(endcal.getTime());
                    endcalDate = authHandler.getDateOnlyFormat().parse(endcalString);
                    localEndDate = new LocalDate(endcalDate);
                    int cntamountduecount = 0;
                    LocalDate dueDate1 = new LocalDate(dueDate);
                    boolean isOpening = invobj.has(InvoiceConstants.isopeningBalanceTransaction) ? invobj.optBoolean(InvoiceConstants.isopeningBalanceTransaction) : false;
                    if (startDate != null && dueDate.before(startDate)) {
                        isOpening = true;
                    }
                    if (isOpening) {
                        double tempamount = 0;
                        double tempamount1 = 0;
                        double tempamountinbase = 0;
                        tempamount += amountdue;
                        tempamount1 += amountdue;
                        tempamountinbase += amountdueinbase;
                        if (invobj.has("opening")) {
                            tempamount += invobj.optDouble("opening");
                        }
                        invobj.put("opening", tempamount);
                        if (summaryObj.has("opening")) {
                            tempamount1 += summaryObj.optDouble("opening");
                        }
                        summaryObj.put("opening", tempamount1);
                        if (summaryObj.has("openinginbase")) {
                            tempamountinbase += summaryObj.optDouble("openinginbase");
                        }
                        summaryObj.put("openinginbase", tempamountinbase);
                        
                        if (!isSummary){
//                            double open = 0;
//                            if (invobj.has("opening")) {
//                                open = invobj.optDouble("opening");
//                            }
                            invobj.put("total", amountdueinbase);
                            jArr.put(invobj);
                        }
                        
                    } else {
                        while (localStartDate.isBefore(localEndDate) && localStartDate.isBefore(TemplocalEndDate)) {
                            double tempamount = 0;
                            double tempamount1 = 0;
                            double tempamountinbase = 0;
                            double reportView_amountDueInBase = 0;
                            if ((dueDate1.isAfter(localStartDate) || dueDate1.equals(localStartDate)) && (dueDate1.isBefore(localEndDate) || dueDate1.equals(localEndDate))) {
                                tempamount += amountdue;
                                tempamount1 += amountdue;
                                tempamountinbase += amountdueinbase;
                                reportView_amountDueInBase += amountdueinbase;
                            }
                            if (invobj.has("amountdue_" + cntamountduecount)) {
                                tempamount += invobj.optDouble("amountdue_" + cntamountduecount);
                            }
                            if (invobj.has("amountdueinbase_" + cntamountduecount)) {
                                reportView_amountDueInBase += invobj.optDouble("amountdueinbase_" + cntamountduecount);
                            }
                            invobj.put("amountdueinbase_" + cntamountduecount, reportView_amountDueInBase);
                            invobj.put("amountdue_" + cntamountduecount, tempamount);
                            if (summaryObj.has("amountdue_" + cntamountduecount)) {
                                tempamount1 += summaryObj.optDouble("amountdue_" + cntamountduecount);
                            }
                            summaryObj.put("amountdue_" + cntamountduecount, tempamount1);
                            if (summaryObj.has("amountdueinbase_" + cntamountduecount)) {
                                tempamountinbase += summaryObj.optDouble("amountdueinbase_" + cntamountduecount);
                            }
                            summaryObj.put("amountdueinbase_" + cntamountduecount, tempamountinbase);
                            
                            if (!isSummary) {
//                                invobj.put("total", 0);
                                if ((dueDate1.isAfter(localStartDate) || dueDate1.equals(localStartDate)) && (dueDate1.isBefore(localEndDate) || dueDate1.equals(localEndDate))) {
                                    if (invobj.has("amountdueinbase_" + cntamountduecount)) {
                                        totalinbase += invobj.optDouble("amountdueinbase_" + cntamountduecount);
                                    }
                                    invobj.put("total", totalinbase);
                                    jArr.put(invobj);
                                }
                            }

                             date = localStartDate.toDateTime(LocalTime.MIDNIGHT);
                            date = date.plusMonths(1);
                            DateTime firstDateOfMonth = date.dayOfMonth().withMinimumValue();
                            lastDateOfMonth = date.dayOfMonth().withMaximumValue();
                            tempDate = new Date();
                            startDate1 = firstDateOfMonth.toDate();
                            cal1 = Calendar.getInstance();
                            d = new Date();
                            cal1.setTime(new Date(df1.format(startDate1)));
                            cal1String = authHandler.getDateOnlyFormat().format(cal1.getTime());
                            cal1Date = authHandler.getDateOnlyFormat().parse(cal1String);
                            tempDate = cal1Date;
                            localStartDate = new LocalDate(tempDate);
                            endDate1 = lastDateOfMonth.toDate();
                            endcal = Calendar.getInstance();
                            d = new Date();
                            endcal.setTime(new Date(df1.format(endDate1)));
                            endcalString = authHandler.getDateOnlyFormat().format(endcal.getTime());
                            endcalDate = authHandler.getDateOnlyFormat().parse(endcalString);
                            localEndDate = new LocalDate(endcalDate);
                            cntamountduecount++;
                        }
                    }

//                    if (!isSummary) {
//                        double totalinbase = 0;
//                        double open = 0;
//                        if (invobj.has("opening")) {
//                            open = invobj.optDouble("opening");
//                        }
//                        invobj.put("total", 0);
//                        for (int cnt = 0; cnt < monthCount; cnt++) {
//                            if (invobj.has("amountdue_" + cnt)) {
//                                totalinbase += invobj.optDouble("amountdue_" + cnt);
//                            }
//                        }
//                        invobj.put("total", totalinbase + open);
//                        jArr.put(invobj);
//                    }
                        }
                if (invjarr.length() > 0 && isSummary) {
                    summaryObj.put(InvoiceConstants.personid, personID);
                    summaryObj.put(InvoiceConstants.personname, personName);
                    summaryObj.put(InvoiceConstants.currencysymbol, currencySymbolCust);
                    summaryObj.put(Constants.currencyKey, currencyidCust);
                    summaryObj.put(InvoiceConstants.currencyname, currencyNameCust);
                    double total = 0;
                    double opening =0;
                    if(summaryObj.has("opening")){
                        opening= summaryObj.optDouble("opening");
                    }
                    double openinginbase=0;
                    if(summaryObj.has("openinginbase")){
                        openinginbase= summaryObj.optDouble("openinginbase");
                    }
                    summaryObj.put("total", 0);
                    StringBuilder sb = null;
                    if(isCallFromDD ) {
                        for (int cnt = (monthCount-1); cnt >= 0 ; cnt--) {
                            sb = new StringBuilder();
                            sb.append("amountdue_");
                            sb.append(cnt);
                            if (summaryObj.has(sb.toString())) {
                                total += summaryObj.optDouble(sb.toString());
                                summaryObj.put(sb.toString(), summaryObj.optDouble(sb.toString()));
                            } else {
                                summaryObj.put(sb.toString(), 0.0);
                            }
                        }
                    } else {
                        for (int cnt = 0; cnt < monthCount; cnt++) {
                        if (summaryObj.has("amountdue_" + cnt)) {
                            total += summaryObj.optDouble("amountdue_" + cnt);
                            summaryObj.put("amountdue_" + cnt, summaryObj.optDouble("amountdue_" + cnt));
                            }
                        }
                    }
                    summaryObj.put("total", total + opening);
                    double totalinbase = 0;
                    summaryObj.put("totalinbase", 0);
                    if (isCallFromDD) {
                        for (int cnt = (monthCount - 1); cnt >= 0; cnt--) {
                            sb = new StringBuilder();
                            sb.append("amountdueinbase_");
                            sb.append(cnt);
                            if (summaryObj.has(sb.toString())) {
                                totalinbase += summaryObj.optDouble(sb.toString());
                            } else {
                                summaryObj.put(sb.toString(), 0.0);
                            }
                        }
                    } else {
                        for (int cnt = 0; cnt < monthCount; cnt++) {
                            if (summaryObj.has("amountdueinbase_" + cnt)) {
                                totalinbase += summaryObj.optDouble("amountdueinbase_" + cnt);
                            }
                        }
                    }
                    summaryObj.put("totalinbase", totalinbase + openinginbase);
                    jArr.put(summaryObj);
                }
            }
                    
            JSONObject monthArrayObject = new JSONObject();
            // the last object would be the months array
            localStartDate = new LocalDate(startDate);
            localEndDate = new LocalDate(endDate);
            JSONArray monthArray = new JSONArray();
            JSONObject monthObj;
            ArrayList monthList = new ArrayList();
            while (localStartDate.isBefore(localEndDate)) {
                String monthName = localStartDate.toString("MMM yyyy");
                localStartDate = localStartDate.plus(Period.months(1));
                monthList.add(monthName);
            }
            for (int i = 0; i < monthList.size(); i++) {
                monthObj = new JSONObject();
                monthObj.put("monthname", monthList.get(i));
                monthArray.put(monthObj);
            }
            if (!StringUtil.equal(fileType, "csv") &&!StringUtil.equal(fileType, "xls") &&!StringUtil.equal(fileType, "print")) {
                monthArrayObject.put("months", monthArray);
                jArr.put(monthArrayObject);
            }  
        } catch (Exception ex) {
            Logger.getLogger(AccInvoiceServiceImpl.class.getName()).log(Level.SEVERE, null, ex);
        }
        return jArr;
    }
    
  @Override  
    public JSONArray getMonthlyCustomerAgedReceivableMerged(JSONObject paramJobj) throws ServiceException, JSONException, SessionExpiredException, ParseException {
        JSONObject jObj = new JSONObject();
        JSONArray jArr = new JSONArray();
        try {
            HashMap invoiceRequestParams = AccInvoiceServiceHandler.getInvoiceRequestMapJson(paramJobj);
            String companyid = paramJobj.optString("companyid");
            invoiceRequestParams.put("companyid", companyid);
            DateFormat df = authHandler.getDateOnlyFormat();
            int datefilter = StringUtil.getInteger(paramJobj.getString("datefilter"));// 0 = Invoice Due date OR 1 = Invoice date
            boolean isSummary = false;
            boolean isCallFromDD = false;
            if (paramJobj.optString("isSummary", null) != null) {
                isSummary = Boolean.parseBoolean(paramJobj.optString("isSummary"));
            } else if (paramJobj.optString("isSummary", null) != null) {
                isSummary = Boolean.parseBoolean(paramJobj.optString("isSummary"));
            }
            if (paramJobj.optString("isCallFromDD", null) != null) {
                isCallFromDD = Boolean.parseBoolean(paramJobj.optString("isCallFromDD"));
            }
            if (isCallFromDD) {// Document designer 0 = Invoice Due date 
                datefilter = 0;
            }
            String fileType = paramJobj.optString("filetype", null);
            final DateTimeFormatter dtf = DateTimeFormat.forPattern("MMMM, yyyy");
            LocalDate localStartDate = null;
            LocalDate templocalStartDate = null;
            try {
                localStartDate = dtf.parseLocalDate(paramJobj.getString(Constants.REQ_startdate));
                templocalStartDate = dtf.parseLocalDate(paramJobj.getString(Constants.REQ_startdate));
            } catch (Exception ex) {
                localStartDate = dtf.parseLocalDate(paramJobj.getString(Constants.REQ_startdate));
                templocalStartDate = dtf.parseLocalDate(paramJobj.getString(Constants.REQ_startdate));
            }
            LocalDate localEndDate = null;
            LocalDate TemplocalEndDate = null;
            try {
                localEndDate = dtf.parseLocalDate(paramJobj.optString(Constants.REQ_enddate));
                TemplocalEndDate = dtf.parseLocalDate(paramJobj.optString(Constants.REQ_enddate));
            } catch (Exception ex) {
                localEndDate = dtf.parseLocalDate(paramJobj.getString(Constants.REQ_enddate));
                TemplocalEndDate = dtf.parseLocalDate(paramJobj.getString(Constants.REQ_enddate));
            }
            Date startDate = localStartDate.toDate();
            Date endDate = localEndDate.toDate();
            Calendar cal = Calendar.getInstance();
            cal.setTime(startDate);
            int startMonth = cal.get(Calendar.MONTH);
            int startYear = cal.get(Calendar.YEAR);
            cal.setTime(endDate);
            int endMonth = cal.get(Calendar.MONTH);
            int endYear = cal.get(Calendar.YEAR);
            boolean isOneMonth = false;
            int monthCount = 0;
            SimpleDateFormat df1 = new SimpleDateFormat();

            DateTime date1 = localEndDate.toDateTime(LocalTime.MIDNIGHT);
            // DateTime date = localEndDate.toDateTimeAtCurrentTime();
            // including whole day 24*60*60-1
            date1 = date1.plusSeconds(86399);
            endDate = date1.dayOfMonth().withMaximumValue().toDate();
            Calendar startcal = Calendar.getInstance();
            DateTime lastDateOfMonth1 = date1.dayOfMonth().withMaximumValue();
            startcal.setTime(new Date(df1.format(startDate)));
            invoiceRequestParams.put(Constants.REQ_startdate, "" + (startcal.getTimeInMillis()));
            Date startcalDate = null;
            String startcalString = authHandler.getDateOnlyFormat().format(startcal.getTime());
            startcalDate = authHandler.getDateOnlyFormat().parse(startcalString);
            invoiceRequestParams.put("MonthlyAgeingStartDate", startcalDate);
            startcal.setTime(new Date(df1.format(endDate)));
            startcalString = authHandler.getDateOnlyFormat().format(startcal.getTime());
            startcalDate = authHandler.getDateOnlyFormat().parse(startcalString);
            invoiceRequestParams.put(Constants.REQ_enddate, "" + (startcal.getTimeInMillis()));
            invoiceRequestParams.put(InvoiceConstants.curdate, "" + (startcal.getTimeInMillis()));
            invoiceRequestParams.put("MonthlyAgeingEndDate", startcalDate);
            invoiceRequestParams.put("isMonthlyAgeingReport", true);
            invoiceRequestParams.put("MonthlyAgeingCurrDate", startcalDate);
            paramJobj.put(InvoiceConstants.curdate, startcalDate);
            paramJobj.put("MonthlyAgeingCurrDate", startcalDate);
            TemplocalEndDate = new LocalDate(startcalDate);
            // if user selects same month & year for both start & end fields, we get the last date of the month to populate into the endDate
            if (startMonth == endMonth && startYear == endYear) {
                isOneMonth = true;
                localEndDate = new LocalDate(endDate);
                monthCount = 1;
            }

            if (!isOneMonth) // just a trick to include the last month as well
            {
                localEndDate = localEndDate.plus(Period.months(1));
            }

            while (localStartDate.isBefore(localEndDate)) {
                localStartDate = localStartDate.plus(Period.months(1));
                monthCount++;
            }
            try {
                localStartDate = dtf.parseLocalDate(paramJobj.getString(Constants.REQ_startdate));
                localEndDate = dtf.parseLocalDate(paramJobj.getString(Constants.REQ_enddate));
            } catch (Exception ex) {
                localStartDate = dtf.parseLocalDate(paramJobj.getString(Constants.REQ_startdate));
                localEndDate = dtf.parseLocalDate(paramJobj.getString(Constants.REQ_enddate));
            }
            if (!isOneMonth) // just a trick to include the last month as well
            {
                localEndDate = localEndDate.plus(Period.months(1));
            } else {
                localEndDate = new LocalDate(endDate);
            }

            KwlReturnObject custresult = accCustomerDAOobj.getCustomerForAgedReceivable(invoiceRequestParams);
            Iterator itrcust = custresult.getEntityList().iterator();
            if (invoiceRequestParams.containsKey(Constants.start)) { //Removing paging here because it is applying on each vendor data (CN/DN etc). Due to this complete amount due not showing in AP Summary.  
                invoiceRequestParams.remove(Constants.start);
            }
            if (invoiceRequestParams.containsKey(Constants.limit)) {
                invoiceRequestParams.remove(Constants.limit);
            }
            while (itrcust.hasNext()) {
                JSONObject summaryObj = new JSONObject();
                JSONArray invjarr = new JSONArray();
                String personID = null;
                String personName = null;
                String amountdueInBase = null;
                String currencyid = null;
                boolean isCN = false;
                boolean isRP = false;
                Object custid = itrcust.next();
                invoiceRequestParams.put(Constants.customerid, custid);
                invoiceRequestParams.put("accid", custid);
                invoiceRequestParams.put("cntype", null);
                invoiceRequestParams.put("isAgedSummary", true);
                KwlReturnObject objItr = accountingHandlerDAOobj.getObject(Customer.class.getName(), custid.toString());
                Customer customer = (Customer) objItr.getEntityList().get(0);
                String currencyidCust = customer.getAccount().getCurrency().getCurrencyID();
                String currencySymbolCust = customer.getAccount().getCurrency().getSymbol();
                String currencyNameCust = customer.getAccount().getCurrency().getName();

                KwlReturnObject result = accInvoiceDAOobj.getInvoicesMerged(invoiceRequestParams);
                int totalCount = result != null ? result.getRecordTotalCount() : 0;
                List list = result.getEntityList();
                invjarr = getInvoiceJsonMergedJson(paramJobj, list, invjarr);
                JSONArray OBJArryInvoice = new JSONArray();

                result = accInvoiceDAOobj.getOpeningBalanceInvoices(invoiceRequestParams);
                OBJArryInvoice = AccInvoiceServiceHandler.getAgedOpeningBalanceInvoiceJson(invoiceRequestParams, result.getEntityList(), OBJArryInvoice, accCurrencyDAOobj, accInvoiceCommon, paramJobj, accountingHandlerDAOobj, accAccountDAOobj, fieldDataManagercntrl, accJournalEntryobj);
                for (int i = 0; i < OBJArryInvoice.length(); i++) {
                    invjarr.put(OBJArryInvoice.get(i));
                }

                JSONArray OBJArryDebitNote = new JSONArray();
                result = accDebitNoteobj.getOpeningBalanceCustomerDNs(invoiceRequestParams);
                OBJArryDebitNote = AccInvoiceServiceHandler.getAgedOpeningBalanceDebitNoteJson(invoiceRequestParams, result.getEntityList(), OBJArryDebitNote, accCurrencyDAOobj, accReceiptDAOobj, paramJobj, accountingHandlerDAOobj, accAccountDAOobj, fieldDataManagercntrl, accJournalEntryobj, accCreditNoteDAOobj);
                for (int i = 0; i < OBJArryDebitNote.length(); i++) {
                    invjarr.put(OBJArryDebitNote.get(i));
                }

                JSONArray OBJArryCreditNote = new JSONArray();
                result = accCreditNoteDAOobj.getOpeningBalanceCNs(invoiceRequestParams);
                OBJArryCreditNote = AccInvoiceServiceHandler.getAgedOpeningBalanceCreditNoteJson(invoiceRequestParams, result.getEntityList(), OBJArryCreditNote, accCurrencyDAOobj, accPaymentDAOobj, paramJobj, accountingHandlerDAOobj, accCreditNoteDAOobj, accAccountDAOobj, fieldDataManagercntrl, accJournalEntryobj);
                for (int i = 0; i < OBJArryCreditNote.length(); i++) {
                    invjarr.put(OBJArryCreditNote.get(i));
                }

                JSONArray OBJArryPayment = new JSONArray();
                result = accReceiptDAOobj.getOpeningBalanceReceipts(invoiceRequestParams);
                OBJArryPayment = AccInvoiceServiceHandler.getAgedOpeningBalanceReceiptJson(invoiceRequestParams, result.getEntityList(), OBJArryPayment, accCurrencyDAOobj, accReceiptDAOobj, paramJobj, accountingHandlerDAOobj, accAccountDAOobj, fieldDataManagercntrl, accJournalEntryobj);
                for (int i = 0; i < OBJArryPayment.length(); i++) {
                    invjarr.put(OBJArryPayment.get(i));
                }

                JSONArray CreditNotejArr = new JSONArray();
                result = accCreditNoteDAOobj.getCreditNoteMerged(invoiceRequestParams);
                CreditNotejArr = AccInvoiceServiceHandler.getCreditNotesMergedJson(invoiceRequestParams, result.getEntityList(), CreditNotejArr, accountingHandlerDAOobj, authHandlerDAOObj, accCurrencyDAOobj, accPaymentDAOobj, paramJobj, accCreditNoteDAOobj, accAccountDAOobj, fieldDataManagercntrl, accJournalEntryobj);
                for (int i = 0; i < CreditNotejArr.length(); i++) {
                    invjarr.put(CreditNotejArr.get(i));
                }

                invoiceRequestParams.put("cntype", 4);
                JSONArray DebitNotejArr = new JSONArray();//This is used for getting DN gainst vendor and otherwise 
                result = accDebitNoteobj.getDebitNoteMerged(invoiceRequestParams);
                DebitNotejArr = AccInvoiceServiceHandler.getDebitNotesMergedJson(invoiceRequestParams, result.getEntityList(), DebitNotejArr, accountingHandlerDAOobj, authHandlerDAOObj, accCurrencyDAOobj, accReceiptDAOobj, paramJobj, accAccountDAOobj, fieldDataManagercntrl, accJournalEntryobj, accCreditNoteDAOobj);
                for (int i = 0; i < DebitNotejArr.length(); i++) {
                    invjarr.put(DebitNotejArr.get(i));
                }
                invoiceRequestParams.remove("cntype");

                JSONArray receivePaymentJArr = new JSONArray();
                invoiceRequestParams.put("allAdvPayment", true); // needs only advance type record so that putted true
                invoiceRequestParams.put("paymentWindowType", 1);//Receipt to Customer record
                result = accReceiptDAOobj.getReceipts(invoiceRequestParams);
                receivePaymentJArr = AccInvoiceServiceHandler.getReceiptsJson(invoiceRequestParams, result.getEntityList(), receivePaymentJArr, accountingHandlerDAOobj, authHandlerDAOObj, accCurrencyDAOobj, accReceiptDAOobj, paramJobj, accAccountDAOobj, fieldDataManagercntrl, accJournalEntryobj);
                for (int i = 0; i < receivePaymentJArr.length(); i++) {
                    invjarr.put(receivePaymentJArr.get(i));
                }

                JSONArray makePaymentJArr = new JSONArray();
                invoiceRequestParams.put("allAdvPayment", true); // needs only refund type record so that putted true
                invoiceRequestParams.put("paymentWindowType", 2);//Payment to Customer record
                result = accVendorPaymentobj.getPayments(invoiceRequestParams);
                if (result != null && result.getEntityList() != null && !result.getEntityList().isEmpty()) {
                    makePaymentJArr = accGoodsReceiptServiceHandler.getPaymentsJson(invoiceRequestParams, result.getEntityList(), makePaymentJArr, accCurrencyDAOobj, accountingHandlerDAOobj, accVendorPaymentobj);
                    for (int i = 0; i < makePaymentJArr.length(); i++) {
                        invjarr.put(makePaymentJArr.get(i));
                    }
                }
                invoiceRequestParams.remove("allAdvPayment");
                invoiceRequestParams.remove("paymentWindowType");
                
               

                for (int i = 0; i < invjarr.length(); i++) {
                    JSONObject invobj = invjarr.getJSONObject(i);
                    personID = (invobj.has(InvoiceConstants.personid)) ? invobj.getString(InvoiceConstants.personid) : "";
                    personName = (invobj.has(InvoiceConstants.personname)) ? invobj.getString(InvoiceConstants.personname) : "";
                    amountdueInBase = invobj.getString(InvoiceConstants.amountdueinbase);
                    currencyid = (invobj.has(Constants.currencyKey)) ? invobj.getString(Constants.currencyKey) : "";
                    isCN = invobj.has("isCN") ? invobj.getBoolean("isCN") : false;
                    isRP = invobj.has("isRP") ? invobj.getBoolean("isRP") : false;
                    jObj.put(InvoiceConstants.personid, personID);
                    jObj.put(InvoiceConstants.amountdueinbase, amountdueInBase);
                    jObj.put(InvoiceConstants.personname, personName);
                    Date dueDate = new Date();
                    if (datefilter == Constants.agedDueDate1to30Filter || datefilter == Constants.agedDueDate0to30Filter) {
                        dueDate = authHandler.getDateOnlyFormat().parse(invobj.getString(Constants.duedate));
                    } else {
                        dueDate = authHandler.getDateOnlyFormat().parse(invobj.getString("date"));
                    }
                    double amountdue = invobj.getDouble("amountdue");
                    double amountdueinbase = invobj.getDouble(InvoiceConstants.amountdueinbase);

                    boolean isopeningBalanceTransaction = invobj.optBoolean("isOpeningBalanceTransaction", false);
                    boolean isConversionRateFromCurrencyToBase = invobj.optBoolean("isConversionRateFromCurrencyToBase", false);

                    KwlReturnObject bAmt = null;
                    if (isopeningBalanceTransaction && isConversionRateFromCurrencyToBase) {// if Transaction is opening balance Transaction and Conversion rate is taken from user is Currency to base then following method will be called.
                        bAmt = accCurrencyDAOobj.getOneCurrencyToOtherModifiedAccordingToCurrencyToBaseExchangeRate(invoiceRequestParams, amountdue, currencyid, currencyidCust, df.parse(invobj.getString("date")), invobj.getDouble("externalcurrencyrate"));
                    } else {
                        bAmt = accCurrencyDAOobj.getOneCurrencyToOtherModified(invoiceRequestParams, amountdue, currencyid, currencyidCust, df.parse(invobj.getString("date")), invobj.getDouble("externalcurrencyrate"));
                    }
                    amountdue = authHandler.round((Double) bAmt.getEntityList().get(0), companyid);
                    if (isCN || isRP) {
                        amountdueinbase = -amountdueinbase;
                        amountdue = -amountdue;
                    }

                    double totalinbase = 0;
                    DateTime date = templocalStartDate.toDateTime(LocalTime.MIDNIGHT);
                    DateTime lastDateOfMonth = date.dayOfMonth().withMaximumValue();
                    Date tempDate = new Date();
                    Date startDate1 = templocalStartDate.toDate();
                    Calendar cal1 = Calendar.getInstance();
                    Date d = new Date();
                    df1 = new SimpleDateFormat();
                    df1.applyPattern("MMM dd yyyy");
                    cal1.setTime(new Date(df1.format(startDate1)));
                    Date cal1Date = null;
                    String cal1String = authHandler.getDateOnlyFormat().format(cal1.getTime());
                    cal1Date = authHandler.getDateOnlyFormat().parse(cal1String);
                    tempDate = cal1Date;
                    localStartDate = new LocalDate(tempDate);
                    Date endDate1 = lastDateOfMonth.toDate();
                    Calendar endcal = Calendar.getInstance();
                    d = new Date();
                    endcal.setTime(new Date(df1.format(endDate1)));
                    Date endcalDate = null;
                    String endcalString = authHandler.getDateOnlyFormat().format(endcal.getTime());
                    endcalDate = authHandler.getDateOnlyFormat().parse(endcalString);
                    localEndDate = new LocalDate(endcalDate);
                    int cntamountduecount = 0;
                    LocalDate dueDate1 = new LocalDate(dueDate);
                    boolean isOpening = invobj.has(InvoiceConstants.isopeningBalanceTransaction) ? invobj.optBoolean(InvoiceConstants.isopeningBalanceTransaction) : false;
                    if (isOpening) {
                        double tempamount = 0;
                        double tempamount1 = 0;
                        double tempamountinbase = 0;
                        tempamount += amountdue;
                        tempamount1 += amountdue;
                        tempamountinbase += amountdueinbase;
                        if (invobj.has("opening")) {
                            tempamount += invobj.optDouble("opening");
                        }
                        invobj.put("opening", tempamount);
                        if (summaryObj.has("opening")) {
                            tempamount1 += summaryObj.optDouble("opening");
                        }
                        summaryObj.put("opening", tempamount1);
                        if (summaryObj.has("openinginbase")) {
                            tempamountinbase += summaryObj.optDouble("openinginbase");
                        }
                        summaryObj.put("openinginbase", tempamountinbase);

                        if (!isSummary) {
                            double open = 0;
                            if (invobj.has("opening")) {
                                open = invobj.optDouble("opening");
                            }
                            invobj.put("total", open);
                            jArr.put(invobj);
                        }
                        
                    } else {
                        while (localStartDate.isBefore(localEndDate) && localStartDate.isBefore(TemplocalEndDate)) {
                            double tempamount = 0;
                            double tempamount1 = 0;
                            double tempamountinbase = 0;
                            if ((dueDate1.isAfter(localStartDate) || dueDate1.equals(localStartDate)) && (dueDate1.isBefore(localEndDate) || dueDate1.equals(localEndDate))) {
                                tempamount += amountdue;
                                tempamount1 += amountdue;
                                tempamountinbase += amountdueinbase;
                            }
                            if (invobj.has("amountdue_" + cntamountduecount)) {
                                tempamount += invobj.optDouble("amountdue_" + cntamountduecount);
                            }
                            invobj.put("amountdue_" + cntamountduecount, tempamount);
                            if (summaryObj.has("amountdue_" + cntamountduecount)) {
                                tempamount1 += summaryObj.optDouble("amountdue_" + cntamountduecount);
                            }
                            summaryObj.put("amountdue_" + cntamountduecount, tempamount1);
                            if (summaryObj.has("amountdueinbase_" + cntamountduecount)) {
                                tempamountinbase += summaryObj.optDouble("amountdueinbase_" + cntamountduecount);
                            }
                            summaryObj.put("amountdueinbase_" + cntamountduecount, tempamountinbase);
                            
                            if (!isSummary) {
                                if ((dueDate1.isAfter(localStartDate) || dueDate1.equals(localStartDate)) && (dueDate1.isBefore(localEndDate) || dueDate1.equals(localEndDate))) {
                                    if (invobj.has("amountdueinbase_" + cntamountduecount)) {
                                        totalinbase += invobj.optDouble("amountdueinbase_" + cntamountduecount);
                                    }
                                    invobj.put("total", totalinbase);
                                    jArr.put(invobj);
                                }
                            }
                            
                            date = localStartDate.toDateTime(LocalTime.MIDNIGHT);
                            date = date.plusMonths(1);
                            DateTime firstDateOfMonth = date.dayOfMonth().withMinimumValue();
                            lastDateOfMonth = date.dayOfMonth().withMaximumValue();
                            tempDate = new Date();
                            startDate1 = firstDateOfMonth.toDate();
                            cal1 = Calendar.getInstance();
                            d = new Date();
                            cal1.setTime(new Date(df1.format(startDate1)));
                            cal1String = authHandler.getDateOnlyFormat().format(cal1.getTime());
                            cal1Date = authHandler.getDateOnlyFormat().parse(cal1String);
                            tempDate = cal1Date;
                            localStartDate = new LocalDate(tempDate);
                            endDate1 = lastDateOfMonth.toDate();
                            endcal = Calendar.getInstance();
                            d = new Date();
                            endcal.setTime(new Date(df1.format(endDate1)));
                            endcalString = authHandler.getDateOnlyFormat().format(endcal.getTime());
                            endcalDate = authHandler.getDateOnlyFormat().parse(endcalString);
                            localEndDate = new LocalDate(endcalDate);
                            cntamountduecount++;
                        }
                    }

//                    if (!isSummary) {
//                        double totalinbase = 0;
//                        double open = 0;
//                        if (invobj.has("opening")) {
//                            open = invobj.optDouble("opening");
//                        }
//                        invobj.put("total", 0);
//                        for (int cnt = 0; cnt < monthCount; cnt++) {
//                            if (invobj.has("amountdue_" + cnt)) {
//                                totalinbase += invobj.optDouble("amountdue_" + cnt);
//                            }
//                        }
//                        invobj.put("total", totalinbase + open);
//                        jArr.put(invobj);
//                    }
                }
                if (invjarr.length() > 0 && isSummary) {
                    summaryObj.put(InvoiceConstants.personid, personID);
                    summaryObj.put(InvoiceConstants.personname, personName);
                    summaryObj.put(InvoiceConstants.currencysymbol, currencySymbolCust);
                    summaryObj.put(Constants.currencyKey, currencyidCust);
                    summaryObj.put(InvoiceConstants.currencyname, currencyNameCust);
                    double total = 0;
                    double opening = 0;
                    if (summaryObj.has("opening")) {
                        opening = summaryObj.optDouble("opening");
                    }
                    double openinginbase = 0;
                    if (summaryObj.has("openinginbase")) {
                        openinginbase = summaryObj.optDouble("openinginbase");
                    }
                    summaryObj.put("total", 0);
                    StringBuilder sb = null;
                    if (isCallFromDD) {
                        for (int cnt = (monthCount - 1); cnt >= 0; cnt--) {
                            sb = new StringBuilder();
                            sb.append("amountdue_");
                            sb.append(cnt);
                            if (summaryObj.has(sb.toString())) {
                                total += summaryObj.optDouble(sb.toString());
                                summaryObj.put(sb.toString(), summaryObj.optDouble(sb.toString()));
                            } else {
                                summaryObj.put(sb.toString(), 0.0);
                            }
                        }
                    } else {
                        for (int cnt = 0; cnt < monthCount; cnt++) {
                            if (summaryObj.has("amountdue_" + cnt)) {
                                total += summaryObj.optDouble("amountdue_" + cnt);
                                summaryObj.put("amountdue_" + cnt, summaryObj.optDouble("amountdue_" + cnt));
                            }
                        }
                    }
                    summaryObj.put("total", total + opening);
                    double totalinbase = 0;
                    summaryObj.put("totalinbase", 0);
                    if (isCallFromDD) {
                        for (int cnt = (monthCount - 1); cnt >= 0; cnt--) {
                            sb = new StringBuilder();
                            sb.append("amountdueinbase_");
                            sb.append(cnt);
                            if (summaryObj.has(sb.toString())) {
                                totalinbase += summaryObj.optDouble(sb.toString());
                            } else {
                                summaryObj.put(sb.toString(), 0.0);
                            }
                        }
                    } else {
                        for (int cnt = 0; cnt < monthCount; cnt++) {
                            if (summaryObj.has("amountdueinbase_" + cnt)) {
                                totalinbase += summaryObj.optDouble("amountdueinbase_" + cnt);
                            }
                        }
                    }
                    summaryObj.put("totalinbase", totalinbase + openinginbase);
                    jArr.put(summaryObj);
                }
            }

            JSONObject monthArrayObject = new JSONObject();
            // the last object would be the months array
            localStartDate = new LocalDate(startDate);
            localEndDate = new LocalDate(endDate);
            JSONArray monthArray = new JSONArray();
            JSONObject monthObj;
            ArrayList monthList = new ArrayList();
            while (localStartDate.isBefore(localEndDate)) {
                String monthName = localStartDate.toString("MMM yyyy");
                localStartDate = localStartDate.plus(Period.months(1));
                monthList.add(monthName);
            }
            for (int i = 0; i < monthList.size(); i++) {
                monthObj = new JSONObject();
                monthObj.put("monthname", monthList.get(i));
                monthArray.put(monthObj);
            }
            if (!StringUtil.equal(fileType, "csv") && !StringUtil.equal(fileType, "xls") && !StringUtil.equal(fileType, "print")) {
                monthArrayObject.put("months", monthArray);
                jArr.put(monthArrayObject);
            }
        } catch (Exception ex) {
            Logger.getLogger(AccInvoiceServiceImpl.class.getName()).log(Level.SEVERE, null, ex);
        }
        return jArr;
    }

 @Override
    public void exportMonthlyAgedReceivableSummarized(HttpServletRequest request, HttpServletResponse response, JSONObject jobj) throws DocumentException, ServiceException, IOException {
        Map<String, Object> financeDetailsMap = new HashMap<String, Object>();
        String view = "MonthlyAgedReceivable";
        FinanceDetails financeDetails = new FinanceDetails();
        ArrayList<FinanceDetails> financeDetailsList = new ArrayList<FinanceDetails>();
        try {
            String companyid = sessionHandlerImpl.getCompanyid(request);
            KwlReturnObject cmpresult = accountingHandlerDAOobj.getObject(Company.class.getName(), companyid);
            Company company = (Company) cmpresult.getEntityList().get(0);
            financeDetails.setName(company.getCompanyName());
            financeDetails.setEmail(company.getEmailID() != null ? company.getEmailID() : "");
            financeDetails.setFax(company.getFaxNumber() != null ? company.getFaxNumber() : "");
            financeDetails.setPhone(company.getPhoneNumber() != null ? company.getPhoneNumber() : "");
            financeDetails.setCurrencyinword(company.getCurrency() != null ? company.getCurrency().getName() : "");
            SimpleDateFormat df = new SimpleDateFormat(Constants.ddMMyyyy);
            String endDate1 = request.getParameter(Constants.REQ_enddate);
            String startDate1 = request.getParameter(Constants.REQ_startdate);
            String date = "From " + startDate1 + " To " + endDate1;
            financeDetails.setReportname("Monthly Ageing Analysis -Customer-Summarised");
            financeDetails.setCustven("Customer Name");
            financeDetails.setDateRange(date);
            if (!StringUtil.isNullOrEmpty(request.getParameter("asofdate")) && !request.getParameter("asofdate").equals("undefined")) {
                String asOfDate = df.format(authHandler.getGlobalDateFormat().parse(request.getParameter("asofdate")));
                financeDetails.setAsOfDate(asOfDate);
            }
            if (!StringUtil.isNullOrEmpty(request.getParameter("datefilter")) && !request.getParameter("datefilter").equals("undefined")) {
                String agedOn = "";
                if (Integer.parseInt(request.getParameter("datefilter")) == Constants.agedDueDate1to30Filter) {
                    agedOn += Constants.agedDueDate1to30Days;
                } else if (Integer.parseInt(request.getParameter("datefilter")) == Constants.agedInvoiceDateFilter) {
                    agedOn += Constants.agedInvoiceDate;
                } else if (Integer.parseInt(request.getParameter("datefilter")) == Constants.agedInvoiceDate0to30Filter) {
                    agedOn += Constants.agedInvoiceDate0to30;
                } else {
                    agedOn += Constants.agedDueDate0to30Days;
                }
                financeDetails.setAged_On(agedOn);
            }
            JSONArray jmonth = jobj.getJSONArray("months");
            for (int i = 0; i < jmonth.length(); i++) {
                JSONObject getmon = jmonth.getJSONObject(i);
                switch (i) {
                    case 0:
                        financeDetails.setMonth_0(getmon.getString("monthname"));
                        break;
                    case 1:
                        financeDetails.setMonth_1(getmon.getString("monthname"));
                        break;
                    case 2:
                        financeDetails.setMonth_2(getmon.getString("monthname"));
                        break;
                    case 3:
                        financeDetails.setMonth_3(getmon.getString("monthname"));
                        break;
                    case 4:
                        financeDetails.setMonth_4(getmon.getString("monthname"));
                        break;
                    case 5:
                        financeDetails.setMonth_5(getmon.getString("monthname"));
                        break;
                    case 6:
                        financeDetails.setMonth_6(getmon.getString("monthname"));
                        break;
                    case 7:
                        financeDetails.setMonth_7(getmon.getString("monthname"));
                        break;
                    case 8:
                        financeDetails.setMonth_8(getmon.getString("monthname"));
                        break;
                    case 9:
                        financeDetails.setMonth_9(getmon.getString("monthname"));
                        break;
                    case 10:
                        financeDetails.setMonth_10(getmon.getString("monthname"));
                        break;
                    case 11:
                        financeDetails.setMonth_11(getmon.getString("monthname"));
                        break;
                }
            }
            financeDetails.setTotal("Total");
            financeDetails.setTotalinbase("Total In Base Currency");
            boolean isSummaryView = true;
            financeDetailsMap = getMonthlyAgedReceivableSummarizedSubReport(request, jobj, isSummaryView);
            financeDetailsList.add(financeDetails);
            financeDetailsMap.put("datasource", new JRBeanCollectionDataSource(financeDetailsList));
            financeDetailsMap.put("basecurr", company.getCurrency() != null ? company.getCurrency().getName() : "");
            InputStream inputStreamSubReport = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/MonthlyAgeingSummarizedSubReport.jrxml");
            JasperDesign jasperDesignSubReport = JRXmlLoader.load(inputStreamSubReport);
            JasperReport jasperReportSubReport = JasperCompileManager.compileReport(jasperDesignSubReport);
            financeDetailsMap.put("MonthlyAgeingSummarizedSubReport", jasperReportSubReport);

            InputStream inputStream = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/MonthlyAgeingSummarized.jrxml");
            JasperDesign jasperDesign = JRXmlLoader.load(inputStream);
            JasperReport jasperReport = JasperCompileManager.compileReport(jasperDesign);

            JRBeanCollectionDataSource beanColDataSource = new JRBeanCollectionDataSource(financeDetailsList);
            JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, financeDetailsMap, beanColDataSource);
            response.setHeader("Content-Disposition", "attachment;filename=" + "MonthlyAgedReceivable_v1.pdf");
            JRPdfExporter exp = new JRPdfExporter();
            exp.setParameter(JRExporterParameter.JASPER_PRINT, jasperPrint);
            exp.setParameter(JRPdfExporterParameter.OUTPUT_STREAM, response.getOutputStream());
            exp.exportReport();
        } catch (Exception ex) {
            Logger.getLogger(accOtherReportsController.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public Map<String, Object> getMonthlyAgedReceivableSummarizedSubReport(HttpServletRequest request, JSONObject jobj,boolean  isSummary) throws ServiceException, SessionExpiredException {
        ArrayList<MonthlyTradingProfitLoss> monthlyTradingProfitLossList = new ArrayList<MonthlyTradingProfitLoss>();
        Map<String, Object> monthlyprolossMap = new HashMap<String, Object>();
        double finaltotal = 0;
        double finaltotalinBase = 0;
        String companyid = sessionHandlerImpl.getCompanyid(request);
        SimpleDateFormat df = new SimpleDateFormat("dd/MM/yy");
        try {
            JSONArray jArr = jobj.getJSONArray("data");
            for (int count = 0; count < jArr.length() - 1; count++) {
                 double totalInTransactionCurr=0;
                JSONObject tempobj = jArr.getJSONObject(count);
                String personName = tempobj.getString(InvoiceConstants.personname);
                 MonthlyTradingProfitLoss monthlyTradingProfitLoss = new MonthlyTradingProfitLoss();
                 monthlyTradingProfitLoss.setAccName2(personName);
                if (tempobj.has(InvoiceConstants.billno)) {
                    String documentNumber = tempobj.getString(InvoiceConstants.billno);
                    monthlyTradingProfitLoss.setDocnumber(documentNumber);
                }
                if (tempobj.has("date")) {
                    String billDate = df.format(Date.parse(tempobj.getString("date")));
                    monthlyTradingProfitLoss.setBilldate(billDate);
                }
                if (tempobj.has(Constants.duedate)) {
                    String dueDate = df.format(Date.parse(tempobj.getString(Constants.duedate)));
                    monthlyTradingProfitLoss.setDuedate(dueDate);
                }
                if(tempobj.has("type")){
                   String type = tempobj.getString("type"); 
                   monthlyTradingProfitLoss.setType(type);
                }
              
                if (tempobj.has(InvoiceConstants.currencyname)) {
                    monthlyTradingProfitLoss.setCurrency(tempobj.optString(InvoiceConstants.currencyname));
                }
                if (tempobj.has("opening")) {
                    monthlyTradingProfitLoss.setAmount_0(authHandler.formattedCommaSeparatedAmount(tempobj.optDouble("opening"),companyid));
                    totalInTransactionCurr += tempobj.optDouble("opening",0);
                }
                if (tempobj.has("amountdue_0")) {
                    monthlyTradingProfitLoss.setAmount_1(authHandler.formattedCommaSeparatedAmount(tempobj.optDouble("amountdue_0"),companyid));
                    totalInTransactionCurr += tempobj.optDouble("amountdue_0",0);
                }
                if (tempobj.has("amountdue_1")) {
                    monthlyTradingProfitLoss.setAmount_2(authHandler.formattedCommaSeparatedAmount(tempobj.optDouble("amountdue_1"),companyid));
                    totalInTransactionCurr += tempobj.optDouble("amountdue_1",0);
                }
                if (tempobj.has("amountdue_2")) {
                    monthlyTradingProfitLoss.setAmount_3(authHandler.formattedCommaSeparatedAmount(tempobj.optDouble("amountdue_2"),companyid));
                    totalInTransactionCurr +=tempobj.optDouble("amountdue_2",0);
                }
                if (tempobj.has("amountdue_3")) {
                    monthlyTradingProfitLoss.setAmount_4(authHandler.formattedCommaSeparatedAmount(tempobj.optDouble("amountdue_3"),companyid));
                    totalInTransactionCurr += tempobj.optDouble("amountdue_3",0);
                }
                if (tempobj.has("amountdue_4")) {
                    monthlyTradingProfitLoss.setAmount_5(authHandler.formattedCommaSeparatedAmount(tempobj.optDouble("amountdue_4"),companyid));
                    totalInTransactionCurr += tempobj.optDouble("amountdue_4",0);
                }
                if (tempobj.has("amountdue_5")) {
                    monthlyTradingProfitLoss.setAmount_6(authHandler.formattedCommaSeparatedAmount(tempobj.optDouble("amountdue_5"),companyid));
                    totalInTransactionCurr += tempobj.optDouble("amountdue_5",0);
                }
                if (tempobj.has("amountdue_6")) {
                    monthlyTradingProfitLoss.setAmount_7(authHandler.formattedCommaSeparatedAmount(tempobj.optDouble("amountdue_6"),companyid));
                    totalInTransactionCurr += tempobj.optDouble("amountdue_6",0);
                }
                if (tempobj.has("amountdue_7")) {
                    monthlyTradingProfitLoss.setAmount_8(authHandler.formattedCommaSeparatedAmount(tempobj.optDouble("amountdue_7"),companyid));
                    totalInTransactionCurr += tempobj.optDouble("amountdue_7",0);
                }
                if (tempobj.has("amountdue_8")) {
                    monthlyTradingProfitLoss.setAmount_9(authHandler.formattedCommaSeparatedAmount(tempobj.optDouble("amountdue_8"),companyid));
                    totalInTransactionCurr += tempobj.optDouble("amountdue_8",0);
                }
                if (tempobj.has("amountdue_9")) {
                    monthlyTradingProfitLoss.setAmount_10(authHandler.formattedCommaSeparatedAmount(tempobj.optDouble("amountdue_9"),companyid));
                    totalInTransactionCurr += tempobj.optDouble("amountdue_9",0);
                }
                if (tempobj.has("amountdue_10")) {
                    monthlyTradingProfitLoss.setAmount_11(authHandler.formattedCommaSeparatedAmount(tempobj.optDouble("amountdue_10"),companyid));
                    totalInTransactionCurr += tempobj.optDouble("amountdue_10",0);
                }
                if (tempobj.has("amountdue_11")) {
                    monthlyTradingProfitLoss.setAmount_12(authHandler.formattedCommaSeparatedAmount(tempobj.optDouble("amountdue_11"),companyid));
                    totalInTransactionCurr += tempobj.optDouble("amountdue_11",0);
                }            
                if (!isSummary) {   // for Total Column in Report View
                    monthlyTradingProfitLoss.setAmount_13(authHandler.formattedCommaSeparatedAmount(totalInTransactionCurr,companyid));
                }
                if (tempobj.has("total")&& isSummary) {  // for Total Column in Summary View
                    monthlyTradingProfitLoss.setAmount_13(authHandler.formattedCommaSeparatedAmount(tempobj.optDouble("total"),companyid));
                    finaltotalinBase += tempobj.optDouble("total");
                }
                if (tempobj.has("total") && !isSummary) { // for TotalInBaseCurrency Column In Report View
                     monthlyTradingProfitLoss.setAmount_14_double(tempobj.optDouble("total"));
                     finaltotalinBase += tempobj.optDouble("total");
                }
                if (tempobj.has("totalinbase")) {  //for TotalInBaseCurrency Column In Summary View
                    monthlyTradingProfitLoss.setAmount_14(authHandler.formattedCommaSeparatedAmount(tempobj.optDouble("totalinbase"),companyid));
                    finaltotal += tempobj.optDouble("totalinbase");
                }
//                if (tempobj.has(InvoiceConstants.amountdueinbase)) {
//                    monthlyTradingProfitLoss.setAmount_14(authHandler.formattedCommaSeparatedAmount(tempobj.optDouble(InvoiceConstants.amountdueinbase),companyid));
//                    finaltotal += tempobj.optDouble(InvoiceConstants.amountdueinbase);
//                }
                monthlyTradingProfitLossList.add(monthlyTradingProfitLoss);
            }
              monthlyprolossMap.put("finaltotal", isSummary?authHandler.formattedCommaSeparatedAmount(finaltotal,companyid):authHandler.formattedCommaSeparatedAmount(finaltotalinBase,companyid));
              monthlyprolossMap.put("MonthlyAgeingSummarizedSubReportData", new JRBeanCollectionDataSource(monthlyTradingProfitLossList));
        } catch (Exception ex) {
            Logger.getLogger(accOtherReportsController.class.getName()).log(Level.SEVERE, null, ex);
            throw ServiceException.FAILURE("getMonthlyBalanceSheetJasper : " + ex.getMessage(), ex);
        }
        return monthlyprolossMap;
    }

    public void exportMonthlyAgedReceivableDetails(HttpServletRequest request, HttpServletResponse response, JSONObject jobj) throws DocumentException, ServiceException, IOException {
        Map<String, Object> financeDetailsMap = new HashMap<String, Object>();
        String view = "MonthlyAgedReceivable";
        FinanceDetails financeDetails = new FinanceDetails();
        ArrayList<FinanceDetails> financeDetailsList = new ArrayList<FinanceDetails>();
        try {
            String companyid = sessionHandlerImpl.getCompanyid(request);
            KwlReturnObject cmpresult = accountingHandlerDAOobj.getObject(Company.class.getName(), companyid);
            Company company = (Company) cmpresult.getEntityList().get(0);
            financeDetails.setName(company.getCompanyName());
            financeDetails.setEmail(company.getEmailID() != null ? company.getEmailID() : "");
            financeDetails.setFax(company.getFaxNumber() != null ? company.getFaxNumber() : "");
            financeDetails.setPhone(company.getPhoneNumber() != null ? company.getPhoneNumber() : "");
            financeDetails.setCurrencyinword(company.getCurrency() != null ? company.getCurrency().getName() : "");
            SimpleDateFormat df = new SimpleDateFormat(Constants.ddMMyyyy);
            String endDate1 = request.getParameter(Constants.REQ_enddate);
            String startDate1 = request.getParameter(Constants.REQ_startdate);
            String date = "From " + startDate1 + " To " + endDate1;
            financeDetails.setReportname("Monthly Ageing Analysis -Customer-Details");
            financeDetails.setCustven("Customer Name");
            financeDetails.setDateRange(date);
            if (!StringUtil.isNullOrEmpty(request.getParameter("asofdate")) && !request.getParameter("asofdate").equals("undefined")) {
                String asOfDate = df.format(authHandler.getGlobalDateFormat().parse(request.getParameter("asofdate")));
                financeDetails.setAsOfDate(asOfDate);
            }
            if (!StringUtil.isNullOrEmpty(request.getParameter("datefilter")) && !request.getParameter("datefilter").equals("undefined")) {
                String agedOn = "";
                if (Integer.parseInt(request.getParameter("datefilter")) == Constants.agedDueDate1to30Filter) {
                    agedOn += Constants.agedDueDate1to30Days;
                } else if (Integer.parseInt(request.getParameter("datefilter")) == Constants.agedInvoiceDateFilter) {
                    agedOn += Constants.agedInvoiceDate;
                } else if (Integer.parseInt(request.getParameter("datefilter")) == Constants.agedInvoiceDate0to30Filter) {
                    agedOn += Constants.agedInvoiceDate0to30;
                } else {
                    agedOn += Constants.agedDueDate0to30Days;
                }
                financeDetails.setAged_On(agedOn);
            }
            JSONArray jmonth = jobj.getJSONArray("months");
            for (int i = 0; i < jmonth.length(); i++) {
                JSONObject getmon = jmonth.getJSONObject(i);
                switch (i) {
                    case 0:
                        financeDetails.setMonth_0(getmon.getString("monthname"));
                        break;
                    case 1:
                        financeDetails.setMonth_1(getmon.getString("monthname"));
                        break;
                    case 2:
                        financeDetails.setMonth_2(getmon.getString("monthname"));
                        break;
                    case 3:
                        financeDetails.setMonth_3(getmon.getString("monthname"));
                        break;
                    case 4:
                        financeDetails.setMonth_4(getmon.getString("monthname"));
                        break;
                    case 5:
                        financeDetails.setMonth_5(getmon.getString("monthname"));
                        break;
                    case 6:
                        financeDetails.setMonth_6(getmon.getString("monthname"));
                        break;
                    case 7:
                        financeDetails.setMonth_7(getmon.getString("monthname"));
                        break;
                    case 8:
                        financeDetails.setMonth_8(getmon.getString("monthname"));
                        break;
                    case 9:
                        financeDetails.setMonth_9(getmon.getString("monthname"));
                        break;
                    case 10:
                        financeDetails.setMonth_10(getmon.getString("monthname"));
                        break;
                    case 11:
                        financeDetails.setMonth_11(getmon.getString("monthname"));
                        break;
                }
            }
            financeDetails.setTotal("Total");
            financeDetails.setTotalinbase("Total In Base Currency");
            boolean isSummaryView = false;
            financeDetailsMap = getMonthlyAgedReceivableSummarizedSubReport(request, jobj, isSummaryView);
            financeDetailsList.add(financeDetails);
            financeDetailsMap.put("datasource", new JRBeanCollectionDataSource(financeDetailsList));
            financeDetailsMap.put("basecurr", company.getCurrency() != null ? company.getCurrency().getName() : "");
            InputStream inputStreamSubReport = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/MonthlyAgeingReportSubReport.jrxml");
            JasperDesign jasperDesignSubReport = JRXmlLoader.load(inputStreamSubReport);
            JasperReport jasperReportSubReport = JasperCompileManager.compileReport(jasperDesignSubReport);
            financeDetailsMap.put("MonthlyAgeingSummarizedSubReport", jasperReportSubReport);

            InputStream inputStream = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/MonthlyAgeingReport.jrxml");
            JasperDesign jasperDesign = JRXmlLoader.load(inputStream);
            JasperReport jasperReport = JasperCompileManager.compileReport(jasperDesign);

            JRBeanCollectionDataSource beanColDataSource = new JRBeanCollectionDataSource(financeDetailsList);
            JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, financeDetailsMap, beanColDataSource);
            response.setHeader("Content-Disposition", "attachment;filename=" + "MonthlyAgedReceivable_v1.pdf");
            JRPdfExporter exp = new JRPdfExporter();
            exp.setParameter(JRExporterParameter.JASPER_PRINT, jasperPrint);
            exp.setParameter(JRPdfExporterParameter.OUTPUT_STREAM, response.getOutputStream());
            exp.exportReport();
        } catch (Exception ex) {
            Logger.getLogger(accOtherReportsController.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
        
    @Override
    public double getInvDisountOnAmt(String id, double withoutTAmt, boolean isWithoutInventory) throws ServiceException {
        Discount discountObj = null;

        KwlReturnObject objItr = accountingHandlerDAOobj.getObject(Invoice.class.getName(), id);
        Invoice invoice = (Invoice) objItr.getEntityList().get(0);
        if (invoice.getDiscount() == null) {
            return 0;
        }
        discountObj = invoice.getDiscount();
        double disc = 0;
        if (discountObj != null) {
            if (discountObj.isInPercent() && discountObj.getDiscount() > 0 && discountObj.getDiscount() <= 100.0) {
                disc = withoutTAmt * discountObj.getDiscount() / 100;
            } else {
                disc = discountObj.getDiscount();
            }
        } else {
            return 0;
        }
        return disc;
    }

    @Override
    public JSONArray getTermDetails(String invoiceid) {
        JSONArray jArr = new JSONArray();
        try {
            HashMap<String, Object> requestParam = new HashMap();
            requestParam.put("invoiceid", invoiceid);
            KwlReturnObject curresult = accInvoiceDAOobj.getInvoiceTermMap(requestParam);
            List<InvoiceTermsMap> termMap = curresult.getEntityList();
            for (InvoiceTermsMap invoiceTerMap : termMap) {
                InvoiceTermsSales mt = invoiceTerMap.getTerm();
                JSONObject jsonobj = new JSONObject();
                jsonobj.put("id", mt.getId());
                jsonobj.put("term", mt.getTerm());
                jsonobj.put("glaccount", mt.getAccount().getID());
                jsonobj.put("sign", mt.getSign());
                jsonobj.put("formula", mt.getFormula());
                jsonobj.put("termpercentage", invoiceTerMap.getPercentage());
                jsonobj.put("termamount", invoiceTerMap.getTermamount());
                jArr.put(jsonobj);
            }
        } catch (ServiceException ex) {
            Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
        } catch (JSONException ex) {
            Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
        }
        return jArr;
    }
    
    public JSONArray getDOTermDetails(String id) {
        JSONArray jArr = new JSONArray();
        try {
            HashMap<String, Object> requestParam = new HashMap();
            requestParam.put("deliveryOrderID", id);
            KwlReturnObject curresult = accInvoiceDAOobj.getDOTermMap(requestParam);
            List<DeliveryOrderTermMap> termMap = curresult.getEntityList();
            for (DeliveryOrderTermMap deliveryOrderTermMap : termMap) {
                InvoiceTermsSales mt = deliveryOrderTermMap.getTerm();
                JSONObject jsonobj = new JSONObject();
                jsonobj.put("id", mt.getId());
                jsonobj.put("term", mt.getTerm());
                jsonobj.put("glaccount", mt.getAccount().getID());
                jsonobj.put("sign", mt.getSign());
                jsonobj.put("formula", mt.getFormula());
                jsonobj.put("termpercentage", deliveryOrderTermMap.getPercentage());
                jsonobj.put("termamount", deliveryOrderTermMap.getTermamount());
                jsonobj.put("termamountinbase", deliveryOrderTermMap.getTermamountinbase());
                jsonobj.put("termtaxamount", deliveryOrderTermMap.getTermtaxamount());
                jsonobj.put("termtaxamountinbase", deliveryOrderTermMap.getTermtaxamountinbase());
                jsonobj.put("termAmountExcludingTax", deliveryOrderTermMap.getTermAmountExcludingTax());
                jsonobj.put("termAmountExcludingTaxInBase", deliveryOrderTermMap.getTermAmountExcludingTaxInBase());
                jsonobj.put("termtax", deliveryOrderTermMap.getTermtax()!=null ? deliveryOrderTermMap.getTermtax().getID():"");
                jsonobj.put("linkedtaxname", deliveryOrderTermMap.getTermtax()!=null ? deliveryOrderTermMap.getTermtax().getName():"");
                jsonobj.put("isActivated", deliveryOrderTermMap.getTermtax()!=null ? deliveryOrderTermMap.getTermtax().isActivated():false);
                if (deliveryOrderTermMap.getTermtax() != null) {
                    jsonobj.put("linkedtaxpercentage", accInvoiceDAOobj.getPercentageFromTaxid(deliveryOrderTermMap.getTermtax().getID(), mt.getCompany().getCompanyID()));
                } else {
                    jsonobj.put("linkedtaxpercentage", 0);
                }
                jArr.put(jsonobj);
            }
        } catch (ServiceException ex) {
            Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
        } catch (JSONException ex) {
            Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
        }
        return jArr;
    }

    @Override
    public Map<String, JSONArray> getInvoiceTermMapDetailList(String invoiceId, List<InvoiceTermsMap> InvoiceTermsList) {
        Map<String, JSONArray> invoiceTermMapDetailList = new HashMap<String, JSONArray>();
        try {
            if (InvoiceTermsList != null && InvoiceTermsList.size() > 0) {
                JSONArray jArr = new JSONArray();
                for (InvoiceTermsMap invoiceTerMap : InvoiceTermsList) {
                    InvoiceTermsSales mt = invoiceTerMap.getTerm();
                    JSONObject jsonobj = new JSONObject();
                    jsonobj.put("id", mt.getId());
                    jsonobj.put("term", mt.getTerm());
                    jsonobj.put("glaccount", mt.getAccount().getID());
                    jsonobj.put("sign", mt.getSign());
                    jsonobj.put("formula", mt.getFormula());
                    jsonobj.put("termpercentage", invoiceTerMap.getPercentage());
                    jsonobj.put("termamount", invoiceTerMap.getTermamount());
                    jsonobj.put("termamountinbase", invoiceTerMap.getTermamountinbase());
                    jsonobj.put("termtaxamount", invoiceTerMap.getTermtaxamount());
                    jsonobj.put("termtaxamountinbase", invoiceTerMap.getTermtaxamountinbase());
                    jsonobj.put("termAmountExcludingTax", invoiceTerMap.getTermAmountExcludingTax());
                    jsonobj.put("termAmountExcludingTaxInBase", invoiceTerMap.getTermAmountExcludingTaxInBase());
                    jsonobj.put("termtax", invoiceTerMap.getTermtax()!=null ? invoiceTerMap.getTermtax().getID():"");
                    jsonobj.put("linkedtaxname", invoiceTerMap.getTermtax()!=null ? invoiceTerMap.getTermtax().getName():"");
                    jsonobj.put("isActivated", invoiceTerMap.getTermtax()!=null ? invoiceTerMap.getTermtax().isActivated():false);
                    if (invoiceTerMap.getTermtax() != null) {
                        jsonobj.put("linkedtaxpercentage", accInvoiceDAOobj.getPercentageFromTaxid(invoiceTerMap.getTermtax().getID(), mt.getCompany().getCompanyID()));
                    } else {
                        jsonobj.put("linkedtaxpercentage", 0);
                    }
                    jArr.put(jsonobj);
                }
                invoiceTermMapDetailList.put(invoiceId, jArr);
            } else {
                invoiceTermMapDetailList.put(invoiceId, new JSONArray());
            }
        } catch (ServiceException |JSONException ex) {
            Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
        }
        return invoiceTermMapDetailList;
    }

    @Override
    public JSONArray getBadDebtClaimedInvoicesJson(HttpServletRequest request) throws SessionExpiredException, ServiceException {
        JSONArray jArr = new JSONArray();
        try {
            String companyid = sessionHandlerImpl.getCompanyid(request);
            DateFormat df = authHandler.getDateOnlyFormat();
            HashMap<String, Object> badMaps = new HashMap<String, Object>();
            badMaps.put(Constants.companyKey, companyid);
            badMaps.put("badDebtType", 0);
            badMaps.put("DateFormat", df);
            badMaps.put(Constants.ss, request.getParameter(Constants.ss));

            if (!StringUtil.isNullOrEmpty(request.getParameter(Constants.REQ_startdate)) && !StringUtil.isNullOrEmpty(request.getParameter(Constants.REQ_enddate))) {
                Date startDate = df.parse(request.getParameter(Constants.REQ_startdate));
                Date endDate = df.parse(request.getParameter(Constants.REQ_enddate));

                badMaps.put("claimedFromDate", startDate);
                badMaps.put("claimedToDate", endDate);
            }


            if (!StringUtil.isNullOrEmpty(request.getParameter(Constants.start)) && !StringUtil.isNullOrEmpty(request.getParameter(Constants.limit))) {
                badMaps.put(Constants.start, request.getParameter(Constants.start));
                badMaps.put(Constants.limit, request.getParameter(Constants.limit));
            }
            
            String searchJson = request.getParameter(Constants.Acc_Search_Json);
            String filterConjuctionCriteria = request.getParameter(Constants.Filter_Criteria);
            if (!StringUtil.isNullOrEmpty(searchJson) && !StringUtil.isNullOrEmpty(filterConjuctionCriteria)) {
                badMaps.put(Constants.Acc_Search_Json, searchJson);
                badMaps.put(Constants.moduleid, Constants.Acc_Invoice_ModuleId);
                badMaps.put(Constants.Filter_Criteria, filterConjuctionCriteria);
                badMaps.put(Constants.Acc_Search_Json, accReportsService.getSearchJsonByModule(badMaps));
            }

            jArr = getBadDebtInvoices(badMaps);

        } catch (SessionExpiredException | ParseException | UnsupportedEncodingException | ServiceException | JSONException ex) {
            Logger.getLogger(AccInvoiceServiceImpl.class.getName()).log(Level.SEVERE, null, ex);
            throw ServiceException.FAILURE("getBadDebtClaimedInvoicesJson : " + ex.getMessage(), ex);
        }
        return jArr;
    }
    
    public JSONArray getSalesReturnTermDetails(String id) {
        JSONArray jArr = new JSONArray();
        try {
            HashMap<String, Object> requestParam = new HashMap();
            requestParam.put("salesreturn", id);
            KwlReturnObject curresult = accInvoiceDAOobj.getSRTermMap(requestParam);
            List<SalesReturnTermsMap> termMap = curresult.getEntityList();
            for (SalesReturnTermsMap salesReturnTermMap : termMap) {
                InvoiceTermsSales mt = salesReturnTermMap.getTerm();
                JSONObject jsonobj = new JSONObject();
                jsonobj.put("id", mt.getId());
                jsonobj.put("term", mt.getTerm());
                jsonobj.put("glaccount", mt.getAccount().getID());
                jsonobj.put("sign", mt.getSign());
                jsonobj.put("formula", mt.getFormula());
                jsonobj.put("termpercentage", salesReturnTermMap.getPercentage());
                jsonobj.put("termamount", salesReturnTermMap.getTermamount());
                jsonobj.put("termamountinbase", salesReturnTermMap.getTermamountinbase());
                jsonobj.put("termtaxamount", salesReturnTermMap.getTermtaxamount());
                jsonobj.put("termtaxamountinbase", salesReturnTermMap.getTermtaxamountinbase());
                jsonobj.put("termAmountExcludingTax", salesReturnTermMap.getTermAmountExcludingTax());
                jsonobj.put("termAmountExcludingTaxInBase", salesReturnTermMap.getTermAmountExcludingTaxInBase());
                jsonobj.put("termtax", salesReturnTermMap.getTermtax()!=null ? salesReturnTermMap.getTermtax().getID():"");
                jsonobj.put("linkedtaxname", salesReturnTermMap.getTermtax()!=null ? salesReturnTermMap.getTermtax().getName():"");
                if (salesReturnTermMap.getTermtax() != null) {
                    jsonobj.put("linkedtaxpercentage", accInvoiceDAOobj.getPercentageFromTaxid(salesReturnTermMap.getTermtax().getID(), mt.getCompany().getCompanyID()));
                } else {
                    jsonobj.put("linkedtaxpercentage", 0);
                }
                jArr.put(jsonobj);
            }
        } catch (ServiceException ex) {
            Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
        } catch (JSONException ex) {
            Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
        }
        return jArr;
    }
    
    @Override
    public JSONArray getBadDebtInvoices(HashMap<String, Object> badMaps) throws SessionExpiredException, ServiceException, JSONException {
        JSONArray jArr = new JSONArray();

        DateFormat df = (DateFormat) badMaps.get("DateFormat");
        int badDebtType = (Integer) badMaps.get("badDebtType");

        KwlReturnObject result = accInvoiceDAOobj.getBadDebtInvoiceMappingForInvoice(badMaps);

        List list = result.getEntityList();
        if (!list.isEmpty()) {
            Iterator it = list.iterator();
            boolean isOpeningBalanceInvoice=false;
            while (it.hasNext()) {
                BadDebtInvoiceMapping invoiceMapping = (BadDebtInvoiceMapping) it.next();
                JSONObject obj = new JSONObject();
                obj.put("invoiceNumber", (invoiceMapping.getInvoice() != null) ? invoiceMapping.getInvoice().getInvoiceNumber() : "");
                obj.put("invoiceid", (invoiceMapping.getInvoice() != null) ? invoiceMapping.getInvoice().getID() : "");
                obj.put(Constants.billid, (invoiceMapping.getInvoice() != null) ? invoiceMapping.getInvoice().getID() : "");
                obj.put("type", Constants.CUSTOMER_INVOICE);
                obj.put("transactionid", invoiceMapping.getBadDebtSeqNumber());//ERP-28376
                obj.put("journalentryid", (invoiceMapping.getJournalEntry() != null) ? invoiceMapping.getJournalEntry().getID() : "");
                obj.put("entryno", (invoiceMapping.getJournalEntry() != null) ? invoiceMapping.getJournalEntry().getEntryNumber() : "");
                if(invoiceMapping.getInvoice()!=null){
                     isOpeningBalanceInvoice = invoiceMapping.getInvoice().isIsOpeningBalenceInvoice();
                     obj.put(InvoiceConstants.currencysymbol, isOpeningBalanceInvoice ?invoiceMapping.getInvoice().getCurrency().getSymbol() :invoiceMapping.getInvoice().getJournalEntry().getCurrency().getSymbol());
                     obj.put(Constants.currencyKey, (invoiceMapping.getInvoice() != null) ? invoiceMapping.getInvoice().getCurrency().getCurrencyID():invoiceMapping.getInvoice().getJournalEntry().getCurrency().getCurrencyID());
                     obj.put("currencycode", (invoiceMapping.getInvoice() != null) ?invoiceMapping.getInvoice().getCurrency().getCurrencyCode() :invoiceMapping.getInvoice().getCurrency().getCurrencyCode());
                }
                if (badDebtType == 0) {// Claim
                    obj.put("date", (invoiceMapping.getBadDebtClaimedDate() != null) ? df.format(invoiceMapping.getBadDebtClaimedDate()) : "");
                    obj.put("amount", invoiceMapping.getBadDebtAmtClaimed());
                    obj.put("taxAmount", invoiceMapping.getBadDebtGSTAmtClaimed());
                    // Identifying the invoices which are paid partially/fully after claiming
                    if(invoiceMapping.getBadDebtAmtClaimed() != invoiceMapping.getInvoice().getClaimAmountDue()){
                        obj.put("isPartiallyRecovered", true);
                    }
                } else {
                    obj.put("date", (invoiceMapping.getBadDebtRecoveredDate() != null) ? df.format(invoiceMapping.getBadDebtRecoveredDate()) : "");
                    obj.put("amount", invoiceMapping.getBadDebtAmtRecovered());
                    obj.put("taxAmount", invoiceMapping.getBadAmtDebtGSTAmtRecovered());
                }
                if(!StringUtil.isNullOrEmpty(invoiceMapping.getReceiptId())){
                    KwlReturnObject objresult = accountingHandlerDAOobj.getObject(Receipt.class.getName(), invoiceMapping.getReceiptId());
                    Receipt receipt = (Receipt) objresult.getEntityList().get(0);
                    obj.put("paymentno", receipt.getReceiptNumber());
                    obj.put("paymentid", receipt.getID());
                }
                jArr.put(obj);
            }
        }
        return jArr;
    }

    @Override
    public JSONArray getRecoveredBadDebtInvoices(HttpServletRequest request) throws SessionExpiredException, ServiceException {
        JSONArray jArr = new JSONArray();
        try {
            String companyid = sessionHandlerImpl.getCompanyid(request);
            DateFormat df = authHandler.getDateOnlyFormat();
            HashMap<String, Object> badMaps = new HashMap<String, Object>();
            badMaps.put(Constants.companyKey, companyid);
            badMaps.put("badDebtType", 1);
            badMaps.put("DateFormat", df);
            badMaps.put(Constants.ss, request.getParameter(Constants.ss));

            if (!StringUtil.isNullOrEmpty(request.getParameter(Constants.REQ_startdate)) && !StringUtil.isNullOrEmpty(request.getParameter(Constants.REQ_enddate))) {
                Date startDate = df.parse(request.getParameter(Constants.REQ_startdate));
                Date endDate = df.parse(request.getParameter(Constants.REQ_enddate));

                badMaps.put("recoveredFromDate", startDate);
                badMaps.put("recoveredToDate", endDate);
            }


            if (!StringUtil.isNullOrEmpty(request.getParameter(Constants.start)) && !StringUtil.isNullOrEmpty(request.getParameter(Constants.limit))) {
                badMaps.put(Constants.start, request.getParameter(Constants.start));
                badMaps.put(Constants.limit, request.getParameter(Constants.limit));
            }
            
            String searchJson = request.getParameter(Constants.Acc_Search_Json);
            String filterConjuctionCriteria = request.getParameter(Constants.Filter_Criteria);
            
            if (!StringUtil.isNullOrEmpty(searchJson) && !StringUtil.isNullOrEmpty(filterConjuctionCriteria)) {
                badMaps.put(Constants.Acc_Search_Json, searchJson);
                badMaps.put(Constants.moduleid, Constants.Acc_Invoice_ModuleId);
                badMaps.put(Constants.Filter_Criteria, filterConjuctionCriteria);
                badMaps.put(Constants.Acc_Search_Json, accReportsService.getSearchJsonByModule(badMaps));
            }

            jArr = getBadDebtInvoices(badMaps);

        } catch (SessionExpiredException | ParseException | UnsupportedEncodingException | ServiceException | JSONException ex) {
            Logger.getLogger(AccInvoiceServiceImpl.class.getName()).log(Level.SEVERE, null, ex);
            throw ServiceException.FAILURE("getBadDebtClaimedInvoicesJson : " + ex.getMessage(), ex);
        }
        return jArr;
    }

    
    @Override
    public JSONArray getInvoiceJsonMerged(HttpServletRequest request, List<Object[]> list, JSONArray jArr) throws SessionExpiredException, ServiceException, JSONException {
        JSONObject paramJobj = new JSONObject();                
        String companyid = AccountingManager.getCompanyidFromRequest(request);
        paramJobj.put(Constants.companyKey, companyid);
        String userdateformat = sessionHandlerImpl.getUserDateFormat(request);
        paramJobj.put("userdateformat", userdateformat);
        String globalCurrency = AccountingManager.getGlobalCurrencyidFromRequest(request);
        paramJobj.put(Constants.globalCurrencyKey, globalCurrency);
        String currencyid = sessionHandlerImpl.getCurrencyID(request);
        paramJobj.put(Constants.currencyKey, currencyid);
        
        try{Enumeration<String> attributes = request.getAttributeNames();        
        while(attributes.hasMoreElements()){
            String attribute = attributes.nextElement();
            paramJobj.put(attribute, request.getAttribute(attribute));            
        }
//        System.out.println("attributes ended");
        Enumeration<String> parameters = request.getParameterNames(); 
        while(parameters.hasMoreElements()){
            String parameter = parameters.nextElement();
            paramJobj.put(parameter, request.getParameter(parameter));                        
        }
        }
        catch(JSONException e){
            e.printStackTrace();
        }
        boolean isRemoteRequest=false;
        if(request.getAttribute("isRemoteRequest")!=null){
            isRemoteRequest=Boolean.parseBoolean(request.getAttribute("isRemoteRequest").toString());
        }
        if(!isRemoteRequest && !StringUtil.isNullOrEmpty(sessionHandlerImpl.getBrowserTZ(request))){
           paramJobj.put(Constants.browsertz, sessionHandlerImpl.getBrowserTZ(request));
        }
        
        jArr = getInvoiceJsonMergedJson(paramJobj, list, jArr);
        
        return jArr;
    }
    
  @Override
    public JSONArray getInvoiceJsonMergedJson(JSONObject paramJobj, List<Object[]> list, JSONArray jArr) throws SessionExpiredException, ServiceException {
        List ExcludedIDlist = Collections.EMPTY_LIST;
        try {
            boolean isBadDebtInvoices = false;
            boolean isproductCategory=false;
            boolean isproductType = false;
            boolean isInvoiceOptimizeExport = paramJobj.optBoolean("isInvoiceOptimizeExport",false);
            if (!StringUtil.isNullOrEmpty(paramJobj.optString("isBadDebtInvoices",null))) {
                isBadDebtInvoices = Boolean.parseBoolean(paramJobj.get("isBadDebtInvoices").toString());
            }
            if (!StringUtil.isNullOrEmpty(paramJobj.optString("productCategoryid",null))) {
                isproductCategory = true;
            }
            if (!StringUtil.isNullOrEmpty(paramJobj.optString(InvoiceConstants.productid,null))) {
                isproductType = true;
            }
            int noOfInterval = paramJobj.has("noOfInterval") && !StringUtil.isNullOrEmpty(paramJobj.getString("noOfInterval"))? paramJobj.getInt("noOfInterval") : 7;
            boolean getlineItemDetailsflag = (paramJobj.optString(Constants.getlineItemDetailsflag, null) != null) ? Boolean.FALSE.parseBoolean((String) paramJobj.get(Constants.getlineItemDetailsflag)) : false;            
            boolean isConsignment=(StringUtil.isNullOrEmpty(paramJobj.optString("isConsignment",null)))?false:Boolean.parseBoolean(paramJobj.get("isConsignment").toString());
            HashMap requestParams = AccInvoiceServiceHandler.getInvoiceRequestMapJson(paramJobj);
            DateFormat df = authHandler.getDateOnlyFormat();
            DateFormat userdf = authHandler.getUserDateFormatterWithoutTimeZone(paramJobj);
            String companyid = paramJobj.getString(Constants.companyKey);
            boolean ignoreZero = paramJobj.optString("ignorezero", null) != null ? Boolean.parseBoolean(paramJobj.get("ignorezero").toString()) : false;
            boolean onlyAmountDue = !StringUtil.isNullOrEmpty(paramJobj.optString("onlyamountdue", null)) ? Boolean.parseBoolean(paramJobj.get("onlyamountdue").toString()) : false;
            boolean invoiceReport = false;
            boolean isFixedAsset = paramJobj.optString(Constants.isFixedAsset, null) != null ? Boolean.parseBoolean(paramJobj.get(Constants.isFixedAsset).toString()) : false;
            boolean isLeaseFixedAsset = (!StringUtil.isNullOrEmpty(paramJobj.optString(Constants.isLeaseFixedAsset, null))) ? Boolean.parseBoolean(paramJobj.get(Constants.isLeaseFixedAsset).toString()) : false;
            if (!StringUtil.isNullOrEmpty(paramJobj.optString("report", null))) {
                invoiceReport = Boolean.parseBoolean(paramJobj.get("report").toString());
            }
            boolean isSOA = paramJobj.optString("isSOA", null) != null ? (Boolean) paramJobj.get("isSOA") : false;
            int datefilter = StringUtil.getInteger(paramJobj.optString("datefilter", null));// 0 = Invoice Due date OR 1 = Invoice date
            boolean isSalesCommissionStmt = (requestParams.containsKey(InvoiceConstants.isSalesCommissionStmt)) ? Boolean.parseBoolean((String) requestParams.get(InvoiceConstants.isSalesCommissionStmt)) : false;
            boolean isProduct = (requestParams.containsKey(InvoiceConstants.productid) && !StringUtil.isNullOrEmpty((String) requestParams.get(InvoiceConstants.productid))) ? true : false;
           /* ----Flag has value non zero if linking with DO filter will get applied from Invoice module---- */
            int invoiceLinkedWithDOStatus = paramJobj.optString("invoiceLinkedWithDOStatus", null) != null ? Integer.parseInt(paramJobj.get("invoiceLinkedWithDOStatus").toString()) : 0;
            KwlReturnObject curresult = accountingHandlerDAOobj.getObject(KWLCurrency.class.getName(), paramJobj.getString(Constants.globalCurrencyKey));
            KWLCurrency currency = (KWLCurrency) curresult.getEntityList().get(0);
            int duration = 30;
            if (!StringUtil.isNullOrEmpty(paramJobj.optString("InvoicesOnDate",null))) {
                Date InvoicesOnDate = (Date) df.parse(paramJobj.getString("InvoicesOnDate"));
                HashMap<String, Object> ExcParams = new HashMap();
                ExcParams.put("InvoicesOnDate", InvoicesOnDate);
                KwlReturnObject excludedInvoicesObj = accInvoiceDAOobj.getExcludedInvoices(ExcParams);
                ExcludedIDlist = excludedInvoicesObj.getEntityList();
            }
            double commission = 0;
            Date startDate = null;
            if (requestParams.containsKey(Constants.REQ_startdate) && requestParams.get(Constants.REQ_startdate) != null) {
                try{
                    startDate = df.parse(requestParams.get(Constants.REQ_startdate).toString());
                }catch(Exception ex){
                    startDate = null;
                }
            }
            
            //Custom field details Maps for Global data
            HashMap<String, String> replaceFieldMap = new HashMap<String, String>();
            HashMap<String, String> customFieldMap = new HashMap<String, String>();
            HashMap<String, String> customDateFieldMap = new HashMap<String, String>();
            HashMap<String, Integer> FieldMap = null;
            HashMap<String, Object> fieldrequestParams = new HashMap();
            int moduleid=isFixedAsset ? Constants.Acc_FixedAssets_DisposalInvoice_ModuleId : isConsignment?Constants.Acc_ConsignmentInvoice_ModuleId:isLeaseFixedAsset?Constants.LEASE_INVOICE_MODULEID:Constants.Acc_Invoice_ModuleId;
            fieldrequestParams.put(Constants.filter_names, Arrays.asList(Constants.companyid, Constants.moduleid));
            fieldrequestParams.put(Constants.filter_values, Arrays.asList(companyid, moduleid));
            FieldMap = accAccountDAOobj.getFieldParamsCustomMap(fieldrequestParams, replaceFieldMap, customFieldMap, customDateFieldMap);
            
            //Custom field details Maps for Line Level data
            HashMap<String, Object> fieldrequestParamsRows = new HashMap();
            HashMap<String, String> replaceFieldMapRows = new HashMap();
            HashMap<String, String> customFieldMapRows = new HashMap();
            HashMap<String, String> customDateFieldMapRows = new HashMap();
            fieldrequestParamsRows.put(Constants.filter_names, Arrays.asList(Constants.companyid, Constants.moduleid, Constants.customcolumn));
            fieldrequestParamsRows.put(Constants.filter_values, Arrays.asList(companyid, moduleid, 1));
            HashMap<String, Integer> fieldMapRows = null;
            fieldMapRows = accAccountDAOobj.getFieldParamsCustomMap(fieldrequestParamsRows, replaceFieldMapRows, customFieldMapRows, customDateFieldMapRows);            
            

            if (isSalesCommissionStmt) {

                ArrayList filter_names = new ArrayList(), filter_params = new ArrayList();
                filter_names.add("company.companyID");
                filter_params.add(requestParams.get(Constants.companyKey));
                requestParams.put(Constants.filterNamesKey, filter_names);
                requestParams.put(Constants.filterParamsKey, filter_params);

                KwlReturnObject result = accCostCenterObj.getSalesCommission(requestParams);
                List<SalesCommission> salesCommissions = result.getEntityList();
                if (salesCommissions != null && !salesCommissions.isEmpty()) {
                    commission = salesCommissions.get(0).getCommission();
                }

            }
            String curDateString = "";
            Date curDate = null;
            boolean booleanAged = false;//Added for aged payable/receivable

            Calendar oneDayBeforeCal1 = Calendar.getInstance();
            Calendar cal1 = Calendar.getInstance();
            Calendar cal2 = Calendar.getInstance();
            Calendar cal3 = Calendar.getInstance();
            Calendar cal4 = Calendar.getInstance();
            Calendar cal5 = Calendar.getInstance();
            Calendar cal6 = Calendar.getInstance();
            Calendar cal7 = Calendar.getInstance();
            Calendar cal8 = Calendar.getInstance();
            Calendar cal9 = Calendar.getInstance();
            Calendar cal10 = Calendar.getInstance();

            if (requestParams.get(Constants.asOfDate) != null) {//Added for aged payable/receivable
                curDateString = (String) requestParams.get(Constants.asOfDate);
                if (paramJobj.optString("MonthlyAgeingCurrDate",null) != null) {
                    curDate = (Date)(paramJobj.get("MonthlyAgeingCurrDate"));
                } else if (paramJobj.optString(Constants.asOfDate,null) != null) {
                    curDate = new Date(Date.parse((paramJobj.get(Constants.asOfDate).toString())));
                } else {
                    curDate = df.parse(curDateString);
                }
                booleanAged = true;
                oneDayBeforeCal1.setTime(curDate);
                cal1.setTime(curDate);
                cal2.setTime(curDate);
                cal3.setTime(curDate);
                cal4.setTime(curDate);
                cal5.setTime(curDate);
                cal6.setTime(curDate);
                cal7.setTime(curDate);
                cal8.setTime(curDate);
                cal9.setTime(curDate);
                cal10.setTime(curDate);
                oneDayBeforeCal1.add(Calendar.DAY_OF_YEAR, -1);
                cal2.add(Calendar.DAY_OF_YEAR, -duration);
                cal3.add(Calendar.DAY_OF_YEAR, -(duration * 2));
                cal4.add(Calendar.DAY_OF_YEAR, -(duration * 3));
                cal5.add(Calendar.DAY_OF_YEAR, -(duration * 4));
                cal6.add(Calendar.DAY_OF_YEAR, -(duration * 5));
                cal7.add(Calendar.DAY_OF_YEAR, -(duration * 6));
                cal8.add(Calendar.DAY_OF_YEAR, -(duration * 7));
                cal9.add(Calendar.DAY_OF_YEAR, -(duration * 8));
                cal10.add(Calendar.DAY_OF_YEAR, -(duration * 9));
            }

            Date oneDayBeforeCal1Date = null;
            Date cal1Date = null;
            Date cal2Date = null;
            Date cal3Date = null;
            Date cal4Date = null;
            Date cal5Date = null;
            Date cal6Date = null;
            Date cal7Date = null;
            Date cal8Date = null;
            Date cal9Date = null;
            Date cal10Date = null;

            String oneDayBeforeCal1String = df.format(oneDayBeforeCal1.getTime());
            oneDayBeforeCal1Date = df.parse(oneDayBeforeCal1String);

            String cal1String = df.format(cal1.getTime());
            cal1Date = df.parse(cal1String);

            String cal2String = df.format(cal2.getTime());
            cal2Date = df.parse(cal2String);

            String cal3String = df.format(cal3.getTime());
            cal3Date = df.parse(cal3String);

            String cal4String = df.format(cal4.getTime());
            cal4Date = df.parse(cal4String);

            String cal5String = df.format(cal5.getTime());
            cal5Date = df.parse(cal5String);

            String cal6String = df.format(cal6.getTime());
            cal6Date = df.parse(cal6String);

            String cal7String = df.format(cal7.getTime());
            cal7Date = df.parse(cal7String);

            String cal8String = df.format(cal8.getTime());
            cal8Date = df.parse(cal8String);

            String cal9String = df.format(cal9.getTime());
            cal9Date = df.parse(cal9String);

            String cal10String = df.format(cal10.getTime());
            cal10Date = df.parse(cal10String);


            double amountdue1 = 0;
            double amountdue2 = 0;
            double amountdue3 = 0;
            double amountdue4 = 0;
            double amountdue5 = 0;
            double amountdue6 = 0;
            double amountdue7 = 0;
            double amountdue8 = 0;
            double amountdue9 = 0;
            double amountdue10 = 0;
            double amountdue11 = 0;
//            double accruedbalance = 0;
            double amountWD = 0;
            // Load Invoices in map 
            List<String> idsList = new ArrayList<String>();

            for (Object[] oj : list) {
                idsList.add(oj[0].toString());
            }

            Map<String, InvoiceInfo> invoiceObjectMap = accInvoiceDAOobj.getInvoiceList(idsList);
            Map<String, JournalEntry> invoiceJEMap = accInvoiceDAOobj.getInvoiceJEList(idsList);
            Map<String, Tax> invoiceTaxMap = accInvoiceDAOobj.getInvoiceTaxList(idsList);
            Map<String, Term> invoiceTermMap = accInvoiceDAOobj.getInvoiceTermList(idsList);
            Map<String, Projreport_Template> invoiceTemplateMap = accInvoiceDAOobj.getInvoiceTemplateList(idsList);
            Map<String, JournalEntryDetail> invoiceCustomerEntryMap = accInvoiceDAOobj.getInvoiceCustomerEntryList(idsList);
            List InvoiceList=new  ArrayList();
            /* Above code has been commented for optimization as seperate queries were fired for pulling out the data from same table.*/
//            Map<String, InvoiceInfo> invoiceObjectMap = new HashMap<String,InvoiceInfo>();
//            Map<String, JournalEntry> invoiceJEMap = new HashMap<String,JournalEntry>();
//            Map<String, Tax> invoiceTaxMap = new HashMap<String,Tax>();
//            Map<String, Term> invoiceTermMap = new HashMap<String,Term>();
//            Map<String, Projreport_Template> invoiceTemplateMap = new HashMap<String, Projreport_Template>();
//            Map<String, JournalEntryDetail> invoiceCustomerEntryMap = new HashMap<String,JournalEntryDetail>();
            Map<String, List<CreditNoteInfo>> creditInvoiceMap = accCreditNoteDAOobj.getCNRowsInfoFromInvoice(idsList);
            Map<String, List<InvoiceTermsMap>> invoiceTermsmap = accInvoiceDAOobj.getInvoiceTermMapList(idsList);
//            System.out.println("Start Date : " + System.currentTimeMillis());
//            List<Object[]> results = accInvoiceDAOobj.getInvoiceAllList(idsList);
            /*if (results != null) {
                for (Object[] result : results) {
                    String invID = (String) result[0];
                    invoiceJEMap.put(invID, (JournalEntry) result[1]);
                    invoiceTaxMap.put(invID, (Tax) result[2]);
                    invoiceTermMap.put(invID, (Term) result[3]);
                    invoiceTemplateMap.put(invID, (Projreport_Template) result[4]);
                    invoiceCustomerEntryMap.put(invID, (JournalEntryDetail) result[5]);
                    InvoiceInfo info = new InvoiceInfo();
                    info.setInvoiceID(invID);
                    info.setInvoice((Invoice) result[6]);
                    info.setCompany((Company) result[7]);
                    info.setCustomer((Customer) result[8]);
                    info.setCurrency((KWLCurrency) result[9]);
                    invoiceObjectMap.put(invID, info);
            }
            }*/

            int countryLanguageId = Constants.OtherCountryLanguageId; // 0
            KwlReturnObject extraprefresult = accountingHandlerDAOobj.getObject(ExtraCompanyPreferences.class.getName(), companyid);
            ExtraCompanyPreferences extraCompanyPreferences = extraprefresult != null ? (ExtraCompanyPreferences) extraprefresult.getEntityList().get(0) : null;
            boolean isLineLevelTermFlag = false;//To Check Whether LinelevelTerms are applicable or not.
            if(extraCompanyPreferences != null && extraCompanyPreferences.getLineLevelTermFlag()==1){
                isLineLevelTermFlag = true;//If LineLevelTerms are applicable, then update the flag.
            }
            if (extraCompanyPreferences.isAmountInIndianWord()) {
                countryLanguageId = Constants.CountryIndiaLanguageId; //for india id is 1;
            }
            boolean isMalaysian = extraCompanyPreferences != null ? extraCompanyPreferences.getCompany().getCountry().getID().equalsIgnoreCase("137") : false;
            String compids[] = Constants.Companyids_Chkl_And_Marubishi.split(",");
            boolean isFromChklorMarubishi = false;
            for (int cnt = 0; cnt < compids.length; cnt++) {
                String compid = compids[cnt];
                if (compid.equalsIgnoreCase(companyid)) {
                    isFromChklorMarubishi = true;
                }
            }

            for (Object[] oj : list) {
                String invid = oj[0].toString();
                //Withoutinventory 0 for normal, 1 for billing
                boolean withoutinventory = Boolean.parseBoolean(oj[1].toString());
                {   
                amountdue1 = amountdue2 = amountdue3 = amountdue4 = amountdue5 = amountdue6 = amountdue7 = amountdue8 = amountdue9 = amountdue10 = amountdue11 = amountWD = 0;
                double taxPercent = 0;
                if (!invoiceObjectMap.containsKey(invid)) {
                    continue;
                }
                

                InvoiceInfo invoiceinfo = invoiceObjectMap.get(invid);
                Invoice invoice = invoiceinfo.getInvoice();
                  
                    /*----------- Code for Loading Data in Invoice Grid as per Applied filter of SI linking with DO---------------- */
                    if (invoiceLinkedWithDOStatus != 0) {
                           boolean invoiceLinkedWithDOStatusFilter = false;
         
                 
                        if (invoiceLinkedWithDOStatus == Constants.Filter_Invoice_WithFullDO) {//When SI is fully delivered
                            invoiceLinkedWithDOStatusFilter = isInvoiceFullyLinkedWithDo(invoice);
                        } else if (invoiceLinkedWithDOStatus == Constants.Filter_Invoice_WithNoDO) {//When SI not linked with any DO
                            invoiceLinkedWithDOStatusFilter = isInvoiceNotLinkedWithAnyDo(invoice);
                        } else if (invoiceLinkedWithDOStatus == Constants.Filter_Invoice_WithPartialDO) {//When SI partially delivered
                            invoiceLinkedWithDOStatusFilter = isInvoicePartiallyLinkedWithDo(invoice);
                        }
                                        
                         /*-------Only relevant Data will load as per applied filter----------- */   
                        if (!invoiceLinkedWithDOStatusFilter) {
                            continue;
                        }

                    }
              
                
                //Below If Block code is used to remove duplicate invoice id's when filter on the basis of Product category or Product name
                if (isproductCategory || isproductType) {
                    if (InvoiceList.contains(invoice.getID())) {
                        continue;
                    } else {
                        InvoiceList.add(invoice.getID());
                    }
                }

                
                Date invoiceCreationDate = invoice.getCreationDate();
                Double externalCurrencyRate = 0d;
                boolean isopeningBalanceInvoice = invoice.isIsOpeningBalenceInvoice();
                Double invoiceOriginalAmount = 0d;
                if (invoice.isIsOpeningBalenceInvoice() && !invoice.isNormalInvoice()) {
                    ExchangeRateDetails erd = invoice.getExchangeRateDetail();
                    externalCurrencyRate = invoice.getExchangeRateForOpeningTransaction();
                    invoiceOriginalAmount = invoice.getOriginalOpeningBalanceAmount();
                }

                JournalEntry je = null;
                if (invoice.isNormalInvoice() && invoiceJEMap.containsKey(invid)) {
                    je = invoiceJEMap.get(invid);
                    externalCurrencyRate = je.getExternalCurrencyRate();
                    JSONObject jObj = extraCompanyPreferences.getColumnPref() != null ? new JSONObject(extraCompanyPreferences.getColumnPref())  : new JSONObject();
                    boolean isPostingDateCheck = false;
                    if (!StringUtil.isNullObject(jObj) && jObj.has(Constants.IS_POSTING_DATE_CHECK) && jObj.get(Constants.IS_POSTING_DATE_CHECK) != null && jObj.optBoolean(Constants.IS_POSTING_DATE_CHECK, false)) {
                        isPostingDateCheck = true;
                    }
                    if (!isPostingDateCheck) {
                        invoiceCreationDate = je.getEntryDate();
                    }
                }
                
                JournalEntryDetail d = null;
                if (invoice.isNormalInvoice() && invoiceCustomerEntryMap.containsKey(invid)) {
                    d = invoiceCustomerEntryMap.get(invid);
                    invoiceOriginalAmount = d.getAmount();
                }
                double amountdue = 0, amountdueinbase = 0,discountDeduct = 0,amountDueOriginal = 0.0;
                String currencyid = (invoiceinfo.getCurrency() == null ? currency.getCurrencyID() : invoiceinfo.getCurrency().getCurrencyID());
                List ll = null;
                if (booleanAged) {//in aged Report Amount due need to calculate on run time i.e based on As on date. So using runtime function
                    ll = accInvoiceCommon.getAmountDue_Discount(requestParams, invoice);
                    amountdueinbase = (Double) ll.get(4);
                } else if (invoice.isIsOpeningBalenceInvoice() && !invoice.isNormalInvoice()) {
                    ll = new ArrayList();
                    ll.add(invoice.getOpeningBalanceAmountDue());
                    ll.add(0.0);
                    ll.add(0.0);
                    ll.add(invoice.getOpeningBalanceAmountDue());
                } else {
                    if (Constants.InvoiceAmountDueFlag) {
                        ll = accInvoiceCommon.getInvoiceDiscountAmountInfo(requestParams, invoice);
                    } else {
                        ll = accInvoiceCommon.getAmountDue_Discount(requestParams, currency, invoice,
                                currencyid, je, creditInvoiceMap, invoiceTermsmap.get(invoiceinfo.getInvoiceID()));
                    }
                }

                amountdue = (Double) ll.get(0);
                discountDeduct = (Double) ll.get(1);
                amountWD = (Double) ll.get(2);
                amountDueOriginal = (Double) ll.get(3);
                if (onlyAmountDue && authHandler.round(amountdue, companyid) == 0) {
                    continue;
                }
                if ((ignoreZero && authHandler.round(amountdue, companyid) <= 0)) {
                    continue;
                }
                Customer customer = invoiceinfo.getCustomer();
                Account account = null;
                if (invoice.isIsOpeningBalenceInvoice() && !invoice.isNormalInvoice()) {
                    account = customer.getAccount();
                } else {
                    account = d.getAccount();
                }
                amountWD = amountWD - accInvoiceServiceDAO.getInvDisountOnAmt(invoice.getID().toString(), amountWD, withoutinventory);
                int isReval = 0;
                int attachemntcount = 0;
                String dONumber = "";
                String deliveryOrderid="";
                if (!isInvoiceOptimizeExport) {
                    if (invoiceReport && !invoice.isIsOpeningBalenceInvoice()) {
                        KwlReturnObject brdAmt = accInvoiceDAOobj.getRevalFlag(invoice.getID());
                        List reval = brdAmt.getEntityList();
                        if (!reval.isEmpty() && (Long) reval.get(0) > 0) {
                            isReval = 1;
                        }
                    }
                    HashMap<String, Object> hashMap = new HashMap<String, Object>();
                    hashMap.put("invoiceID", invoice.getID());
                    hashMap.put(Constants.companyKey, companyid);
                    KwlReturnObject object = accInvoiceDAOobj.getinvoiceDocuments(hashMap);
                    attachemntcount = object.getRecordTotalCount();
                    
                    KwlReturnObject InvoiceDo = accInvoiceDAOobj.getDOFromInvoices(invoice.getID(), companyid, true);
                    List InvoiceDoList = InvoiceDo.getEntityList();
                    Iterator itr1 = InvoiceDoList.iterator();
                    while (itr1.hasNext()) {
                        Object[] obj = (Object[]) itr1.next();
                        dONumber = obj[0] != null ? obj[0].toString() : "";
                        deliveryOrderid = obj[1] != null ? obj[1].toString() : "";
                    }
                }
                KwlReturnObject bAmt = null;
                double currencyToBaseRate = accCurrencyDAOobj.getCurrencyToBaseRate(requestParams, currencyid, invoiceCreationDate);
                
                
                JSONObject obj = new JSONObject();
                double customerCreditLimit = 0;
                double customerCreditLimitInbase = 0;
                String currencyId = "";
                if (!isInvoiceOptimizeExport) {
                    Map<String, JSONArray> invoiceTermMapDetails = accInvoiceServiceDAO.getInvoiceTermMapDetailList(invoiceinfo.getInvoiceID(), invoiceTermsmap.get(invoiceinfo.getInvoiceID()));
                    obj.put("termdetails", invoiceTermMapDetails.containsKey(invid) ? invoiceTermMapDetails.get(invid) : "");
                     if (invoiceinfo != null && customer != null && customer.getCurrency() != null) {
                        currencyId = customer.getCurrency().getCurrencyID();
                    } else {
                        currencyId = "";
                    }
                    if(customer != null && !StringUtil.isNullObject(customer.getCurrency())){
                        customerCreditLimit=customer.getCreditlimit();
                        KwlReturnObject bAmount = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, customerCreditLimit, currencyId, customer.getCreatedOn(), 0);
                        customerCreditLimitInbase=authHandler.round((Double) bAmount.getEntityList().get(0), companyid);
                    }
                    obj.put("creditlimit", customerCreditLimit);
                    obj.put("creditlimitinbase", customerCreditLimitInbase);
                    obj.put(InvoiceConstants.deleted, invoice.isDeleted());
                    obj.put("taxincluded", invoiceTaxMap.containsKey(invid));
                    /**
                     * If the Invoice has an Auto generated pick pack ship DO
                     * then do not allow editing of that invoice hence passing this flag.
                     */
                 
                    if (!(StringUtil.isNullOrEmpty(invid) && StringUtil.isNullOrEmpty(companyid))) {
                        KwlReturnObject kwlautodo = accInvoiceDAOobj.getAutoDOFromInvoice(invid, companyid);
                        List autodors = kwlautodo.getEntityList();
                        if (!autodors.isEmpty()) {
                            String  doid = (String) autodors.get(0); 
                            if (!StringUtil.isNullOrEmpty(doid)) {
                                boolean ispickpackdo = accInvoiceDAOobj.isPickPackShipDO(doid); //check if auto DO is a pick pack DO
                                if (ispickpackdo)
                                {
                                    obj.put("hasautogenpickpackdo", true);
                                } else {
                                    obj.put("hasautogenpickpackdo", false);
                                }
                            } 
                        }
                    }
                    KwlReturnObject result = accLinkDataDao.checkEntryForTransactionInLinkingTableForForwardReference("Invoice",invoice.getID());
                    list = result.getEntityList();
                    KwlReturnObject linkedDebitNoteResult = accInvoiceDAOobj.getDebitNoteLinkedWithInvoice(invoice.getID(), companyid);
                    List listDn = linkedDebitNoteResult.getEntityList();

                    KwlReturnObject linkedOverchargeCNResult = accInvoiceDAOobj.getCreditNoteForOverchargeLinkedWithInvoice(invoice.getID(), companyid);
                    List overchargeCNList = linkedOverchargeCNResult.getEntityList();

                    if ((list != null && !list.isEmpty()) || (!invoice.isCashtransaction() && (authHandler.round(invoiceOriginalAmount, companyid) != authHandler.round(amountdue, companyid))) || (listDn != null && !listDn.isEmpty()) || (overchargeCNList != null && !overchargeCNList.isEmpty())) {
                        obj.put(Constants.IS_LINKED_TRANSACTION, true);
                    } else {
                        obj.put(Constants.IS_LINKED_TRANSACTION, false);
                    }
                    
                    if (invoice.getTax() != null) {
                    //                    taxPercent = CompanyHandler.getTaxPercent(session, request, je.getEntryDate(), invoice.getTax().getID());
//                    KwlReturnObject perresult = accTaxObj.getTaxPercent(companyid, je.getEntryDate(), invoice.getTax().getID());
                    KwlReturnObject perresult = accTaxObj.getTaxPercent(companyid, invoice.getCreationDate(), invoice.getTax().getID());
                    taxPercent = (Double) perresult.getEntityList().get(0);
                    }
                    obj.put("taxpercent", taxPercent);  //tax in percent applyind on invoice
                    //obj.put("amountbeforegst", authHandler.round(amountinbase - taxAmt, amountdigitafterdecimal));        
                    if (invoice.getTax() != null) {
                        //                    taxPercent = CompanyHandler.getTaxPercent(session, request, je.getEntryDate(), invoice.getTax().getID());
    //                    KwlReturnObject perresult = accTaxObj.getTaxPercent(companyid, je.getEntryDate(), invoice.getTax().getID());
                        KwlReturnObject perresult = accTaxObj.getTaxPercent(companyid, invoice.getCreationDate(), invoice.getTax().getID());
                        taxPercent = (Double) perresult.getEntityList().get(0);
                    }
                    obj.put("taxpercent", taxPercent);
                    //Invoice can be written off and recovered multiple times. Below logic is to check whether invoice is written off and recovered or not
                    HashMap<String, Object> writeOffMap = new HashMap<String, Object>();
                    boolean isWrittenOff = false;
                    int writeOffListSize = 0;
                    int recoveredTime = 0;
                    writeOffMap.put("invoiceid", invoice.getID());
                    writeOffMap.put(Constants.companyKey, invoice.getCompany().getCompanyID());
                    KwlReturnObject writeOffResult = accWriteOffServiceDao.getInvoiceWriteOffEntries(writeOffMap);
                    List<InvoiceWriteOff> WriteOffList = writeOffResult.getEntityList();
                    if (!WriteOffList.isEmpty()) {
                        isWrittenOff = true;
                        writeOffListSize = WriteOffList.size();
                        for (InvoiceWriteOff IWO : WriteOffList) {
                            if (IWO.isIsRecovered()) {
                                recoveredTime++;
                            }
                        }
                        obj.put("isWrittenOff", isWrittenOff);
                        obj.put("isRecovered", writeOffListSize == recoveredTime);
                    }
                    
                        try {// check if credit/cash sales is allowed to edit
                        // isAllowToEdit= if credit/cash sales created using auto generate DO option and credit/cash sales/DO hasn't been forward linked in any document
                        result  = accInvoiceDAOobj.getAutoDOFromInvoice(invoice.getID(), companyid);
                        list = result.getEntityList();
                        if (list != null && !list.isEmpty()) { // SI/CS created with auto generate DO option
                            boolean isDOLinkedInSR = false;
                            String doID = "";
                            Object doid = list.get(0);
                            doID = (String) doid;
                            KwlReturnObject resultSR = accInvoiceDAOobj.getDOFromSR(doID, companyid);
                            List listSR = resultSR.getEntityList();
                            if (!listSR.isEmpty()) { // is DO forward linked in any SR
                                isDOLinkedInSR = true;
                            }
                            if (!isDOLinkedInSR && obj.optDouble(InvoiceConstants.amountdueinbase, 0.0) == obj.optDouble("amountinbase", 0.0) && !invoice.isCashtransaction()) {
                                obj.put(Constants.IS_INVOICE_ALLOW_TO_EDIT, true);
                            } else if (invoice.isCashtransaction() && !isDOLinkedInSR) {
                                obj.put(Constants.IS_INVOICE_ALLOW_TO_EDIT, true);
                            } else {
                                obj.put(Constants.IS_INVOICE_ALLOW_TO_EDIT, false);
                            }
                        } else {
                            obj.put(Constants.IS_INVOICE_ALLOW_TO_EDIT, false);
                        }
                    } catch (Exception ex) {
                        Logger.getLogger(AccInvoiceServiceImpl.class.getName()).log(Level.WARNING, ex.getMessage());
                        obj.put(Constants.IS_INVOICE_ALLOW_TO_EDIT, false);
                    }
                        
                        HashMap<String, Object> ModuleTempParams = new HashMap<>();
                        ModuleTempParams.put("modulerecordid", invid);
                        ModuleTempParams.put("companyid", companyid);
                        /**
                         * Get Module template from invoice id . In module
                         * template invoice id add as modulerecordid
                         */
                        KwlReturnObject ModuleTempObj = accountingHandlerDAOobj.getModuleTemplates(ModuleTempParams);
                        if (ModuleTempObj != null && ModuleTempObj.getEntityList().size() > 0) {
                            ModuleTemplate moduleTemp = (ModuleTemplate) ModuleTempObj.getEntityList().get(0);
                            obj.put("companyunitid", moduleTemp.getCompanyUnitid());
                            obj.put("populateproducttemplate", moduleTemp.isPopulateproductintemp());
                            obj.put("populatecustomertemplate", moduleTemp.isPopulatecustomerintemp());
                            obj.put("populateautodointemp", moduleTemp.isPopulateautodointemp());
                        }
                }
                //get LineItem Details for Rest Service in one call
                if (getlineItemDetailsflag) {
                    paramJobj.put("bills",invoice.getID());
                    HashMap<String, Object> extraAttributesMap = new HashMap<String, Object>();
                    JSONArray DataJArr = getInvoiceRows(paramJobj, null,extraAttributesMap);
                    obj.put(Constants.lineItemDetails, DataJArr);
                }
                   
                    
                    boolean upsIntegrationFlag = false;
                    if (extraCompanyPreferences != null) {
                         upsIntegrationFlag = extraCompanyPreferences.isUpsIntegration();
                    }
                    Set<String> deliveryOrdeDetailIDs = new TreeSet<String>();
                    //Logic to get UPS Shipment Tracking Number(s) when UPS REST Integration is enabled
                    if (upsIntegrationFlag) {
                        KwlReturnObject linkedDOobj = accInvoiceDAOobj.getDOFromOrToInvoices(invoice.getID(),companyid);
                        List linkedDOList = linkedDOobj.getEntityList();
                        Iterator itr3 = linkedDOList.iterator();
                        while(itr3.hasNext()) {
                            Object[] objArr = (Object[]) itr3.next();
                            DeliveryOrder dorder = (DeliveryOrder) objArr[0];
                            Set<DeliveryOrderDetail> doRows = dorder.getRows();
                            if (doRows != null && !doRows.isEmpty()) {
                                for (DeliveryOrderDetail temp : doRows) {
                                    String deliveryOrdeDetailID = temp.getID();
                                    if (!StringUtil.isNullOrEmpty(deliveryOrdeDetailID)) {
                                        deliveryOrdeDetailIDs.add(deliveryOrdeDetailID);
                                    }

                                }
                            }
                        }
                        StringBuilder upsTrackingNumbers = new StringBuilder("");
                        Set<String> upsTrackingNumbersSet = new TreeSet<String>();
                        upsTrackingNumbersSet = getUPSTrackingNumberFromDoDetails(deliveryOrdeDetailIDs);
                        if (!upsTrackingNumbersSet.isEmpty()) {
                            String upsTrackingNumbersStr = upsTrackingNumbersSet.toString();
                            upsTrackingNumbers.append(upsTrackingNumbersStr.substring(1, (upsTrackingNumbersStr.length() - 1)));
                        }
                        obj.put("upsTrackingNumbers", upsTrackingNumbers.toString());
                    }
                    
                if (extraCompanyPreferences != null && extraCompanyPreferences.isAvalaraIntegration()) {
                    obj.put("isTaxCommittedOnAvalara", invoice.isIsTaxCommittedOnAvalara());
                }
                
                obj.put(Constants.billid, invoice.getID());
//                    MasterItem gstRegistrationType = customer != null ? customer.getGSTRegistrationType() : null;
//                    if (gstRegistrationType != null && gstRegistrationType.getDefaultMasterItem() != null) {
//                        obj.put("GSTINRegTypeDefaultMstrID", gstRegistrationType.getDefaultMasterItem().getID());
//                    }
                /**
                * Get Merchant Exporter Check 
                */
                
                    //Used in Rest Services
                    if (paramJobj.optBoolean(Constants.isdefaultHeaderMap, false) == true) {
                        obj.put("invoiceNumber", invoice.getInvoiceNumber());
                        obj.put("poRefNumber", invoice.getPoRefNumber() == null ? "" : invoice.getPoRefNumber());
                        obj.put("CustomerName", customer == null ? account.getID() : customer.getID());
                        obj.put("CustomerNameValue", customer == null ? account.getName() : customer.getName());
                        obj.put(Constants.currencyName, currencyid);
                        obj.put(Constants.currencyNameValue, (invoiceinfo.getCurrency() == null ? currency.getName() : invoiceinfo.getCurrency().getName()));
                        obj.put(Constants.salesperson, invoice.getMasterSalesPerson() == null ? "" : invoice.getMasterSalesPerson().getID());
                        obj.put(Constants.salespersonValue, invoice.getMasterSalesPerson() == null ? "" : invoice.getMasterSalesPerson().getValue());
                        obj.put("terms", invoice.getTermid() == null ? "" : invoice.getTermid().getTermname());
                        obj.put("termsValue", invoice.getTermid() == null ? "" : invoice.getTermid().getTermname());
                        obj.put(Constants.sequenceformat, invoice.getSeqformat() == null ? "NA" : invoice.getSeqformat().getID());

                        SequenceFormat seqFormat=null;
                        KwlReturnObject seqObj=null;
                        if (invoice.getSeqformat() != null) {
                            seqObj = accountingHandlerDAOobj.getObject(SequenceFormat.class.getName(), invoice.getSeqformat().getID());
                            seqFormat = (SequenceFormat) seqObj.getEntityList().get(0);
                            if (seqFormat != null) {
                                String formatName = seqFormat.getName();
                                if (seqFormat.isDateBeforePrefix() && seqFormat.isShowDateFormatAfterSuffix()) {
                                    formatName = seqFormat.getDateformatinprefix() + seqFormat.getName() + seqFormat.getDateFormatAfterSuffix();
                                } else if (seqFormat.isDateBeforePrefix()) {
                                    formatName = seqFormat.getDateformatinprefix() + seqFormat.getName();
                                } else if (seqFormat.isShowDateFormatAfterSuffix()) {
                                    formatName = seqFormat.getName() + seqFormat.getDateFormatAfterSuffix();
                                }
                                obj.put(Constants.sequenceformatValue, invoice.getSeqformat() == null ? "NA" : formatName);
                            } else {
                                obj.put(Constants.sequenceformatValue, invoice.getSeqformat() == null ? "NA" : invoice.getSeqformat().getName());
                            }

                        } else {
                            obj.put(Constants.sequenceformatValue, "NA");
                        }

                        obj.put("dueDate", df.format(invoice.getDueDate()));
                        obj.put("costcenter", (je != null ? je.getCostcenter() == null ? "" : je.getCostcenter().getID() : ""));
                        obj.put("costcenterValue", (je != null ? je.getCostcenter() == null ? "" : je.getCostcenter().getName() : ""));
                        obj.put("taxid", invoiceTaxMap.containsKey(invid) ? invoiceTaxMap.get(invid).getID() : "");
                        obj.put("taxidValue", invoiceTaxMap.containsKey(invid) ? invoiceTaxMap.get(invid).getName() : "");
                        boolean requestfromdimensionbasedreport = (paramJobj.optString("requestfromdimensionbasedreport", null) == null) ? false : true;
                        if (requestfromdimensionbasedreport) {
                            obj.put(Constants.BillDate, authHandler.getUserDateFormatterWithoutTimeZone(paramJobj).format(invoiceCreationDate));
                        } else {
                            obj.put(Constants.BillDate, df.format(invoiceCreationDate));
                        }
                        if (!StringUtil.isNullOrEmpty(invoiceinfo.getCompany().getCompanyID())) {
                            KwlReturnObject result = accountingHandlerDAOobj.getObject(CompanyAccountPreferences.class.getName(), invoiceinfo.getCompany().getCompanyID());
                            CompanyAccountPreferences companyAccountPreferences = (CompanyAccountPreferences) result.getEntityList().get(0);
                            String gstnumber = companyAccountPreferences.getGstNumber() != null ? companyAccountPreferences.getGstNumber() : "";
                            String uennumber = companyAccountPreferences.getCompanyUEN() != null ? companyAccountPreferences.getCompanyUEN() : "";
                            obj.put("gstnumber", gstnumber);
                            obj.put("uennumber", uennumber);
                        }
                        obj.put("deliveryOrderNo", dONumber);
                        obj.put("doid", deliveryOrderid);
                         obj.put("generateDeliveryOrder",!StringUtil.isNullOrEmpty(dONumber) ? true : false);
                        if (!StringUtil.isNullOrEmpty(deliveryOrderid) && !StringUtil.isNullOrEmpty(dONumber)) {
                            KwlReturnObject result = accountingHandlerDAOobj.getObject(DeliveryOrder.class.getName(), deliveryOrderid);
                            DeliveryOrder dorder = (DeliveryOrder) result.getEntityList().get(0);
                            obj.put("sequenceformatDo", dorder.getSeqformat() != null ? dorder.getSeqformat().getID() : "NA");

                            if (dorder !=null && dorder.getSeqformat()!= null) {
                                //Sequence Format DO
                                seqObj = accountingHandlerDAOobj.getObject(SequenceFormat.class.getName(), dorder.getSeqformat().getID());
                                seqFormat = (SequenceFormat) seqObj.getEntityList().get(0);
                                if (seqFormat != null) {
                                    String formatName = seqFormat.getName();
                                    if (seqFormat.isDateBeforePrefix() && seqFormat.isShowDateFormatAfterSuffix()) {
                                        formatName = seqFormat.getDateformatinprefix() + seqFormat.getName() + seqFormat.getDateFormatAfterSuffix();
                                    } else if (seqFormat.isDateBeforePrefix()) {
                                        formatName = seqFormat.getDateformatinprefix() + seqFormat.getName();
                                    } else if (seqFormat.isShowDateFormatAfterSuffix()) {
                                        formatName = seqFormat.getName() + seqFormat.getDateFormatAfterSuffix();
                                    }
                                    obj.put("sequenceformatDoValue", dorder.getSeqformat() == null ? "NA" : formatName);
                                } else {
                                    obj.put("sequenceformatDoValue", dorder.getSeqformat() != null ? dorder.getSeqformat().getName() : "");
                                }
                            } else {
                                obj.put("sequenceformatDoValue", "NA");
                            }

                        } else {
                            obj.put("sequenceformatDo", "");
                            obj.put("sequenceformatDoValue", "");
                        }

                    } else {
                        obj.put("porefno", invoice.getPoRefNumber() == null ? "" : invoice.getPoRefNumber());
                        obj.put(InvoiceConstants.billno, invoice.getInvoiceNumber());
                        obj.put(Constants.currencyKey, currencyid);
                        obj.put(InvoiceConstants.currencyname, (invoiceinfo.getCurrency() == null ? currency.getName() : invoiceinfo.getCurrency().getName()));
                        obj.put(InvoiceConstants.personid, customer == null ? account.getID() : customer.getID());
                        obj.put(InvoiceConstants.personname, customer == null ? account.getName() : customer.getName());
                        obj.put(InvoiceConstants.personinfo, customer == null ? account.getName() : customer.getName()+"("+customer.getAcccode()+")");
                        obj.put("customername", customer == null ? "" : customer.getName());
                        obj.put("salesPerson", invoice.getMasterSalesPerson() == null ? "" : invoice.getMasterSalesPerson().getID());
                        obj.put("salesPersonName", invoice.getMasterSalesPerson() == null ? "" : invoice.getMasterSalesPerson().getValue());
                        obj.put("salespersonname", invoice.getMasterSalesPerson() == null ? "" : invoice.getMasterSalesPerson().getValue());
                        obj.put("termname", invoice.getTermid() == null ? "" : invoice.getTermid().getTermname());
                        obj.put(Constants.SEQUENCEFORMATID, invoice.getSeqformat() == null ? "" : invoice.getSeqformat().getID());
                        obj.put(Constants.duedate, df.format(invoice.getDueDate()));
                        obj.put("costcenterid", (je != null ? je.getCostcenter() == null ? "" : je.getCostcenter().getID() : ""));
                        obj.put("costcenterName", (je != null ? je.getCostcenter() == null ? "" : je.getCostcenter().getName() : ""));
                        obj.put("taxid", invoiceTaxMap.containsKey(invid) ? invoiceTaxMap.get(invid).getID() : "");
//                        obj.put("taxname", invoiceTaxMap.containsKey(invid) ? invoiceTaxMap.get(invid).getName() : "");
                        boolean requestfromdimensionbasedreport = (paramJobj.optString("requestfromdimensionbasedreport", null) == null) ? false : true;
                        if (requestfromdimensionbasedreport) {
                            obj.put(InvoiceConstants.date, authHandler.getUserDateFormatterWithoutTimeZone(paramJobj).format(invoiceCreationDate));
                        } else {
                            obj.put(InvoiceConstants.date, df.format(invoiceCreationDate));
                        }
                        obj.put("dONumber", dONumber);
                        obj.put(Constants.importExportDeclarationNo, invoice.getExportDeclarationNo() != null ? invoice.getExportDeclarationNo() : "");
                    }
                    
                    upsIntegrationFlag = false;
                    if (extraCompanyPreferences != null) {
                         upsIntegrationFlag = extraCompanyPreferences.isUpsIntegration();
                    }
                    deliveryOrdeDetailIDs = new TreeSet<String>();
                    //Logic to get UPS Shipment Tracking Number(s) when UPS REST Integration is enabled
                    if (upsIntegrationFlag) {
                        KwlReturnObject linkedDOobj = accInvoiceDAOobj.getDOFromOrToInvoices(invoice.getID(),companyid);
                        List linkedDOList = linkedDOobj.getEntityList();
                        Iterator itr3 = linkedDOList.iterator();
                        while(itr3.hasNext()) {
                            Object[] objArr = (Object[]) itr3.next();
                            DeliveryOrder dorder = (DeliveryOrder) objArr[0];
                            Set<DeliveryOrderDetail> doRows = dorder.getRows();
                            if (doRows != null && !doRows.isEmpty()) {
                                for (DeliveryOrderDetail temp : doRows) {
                                    String deliveryOrdeDetailID = temp.getID();
                                    if (!StringUtil.isNullOrEmpty(deliveryOrdeDetailID)) {
                                        deliveryOrdeDetailIDs.add(deliveryOrdeDetailID);
                                    }

                                }
                            }
                        }
                        StringBuilder upsTrackingNumbers = new StringBuilder("");
                        Set<String> upsTrackingNumbersSet = new TreeSet<String>();
                        upsTrackingNumbersSet = getUPSTrackingNumberFromDoDetails(deliveryOrdeDetailIDs);
                        if (!upsTrackingNumbersSet.isEmpty()) {
                            String upsTrackingNumbersStr = upsTrackingNumbersSet.toString();
                            upsTrackingNumbers.append(upsTrackingNumbersStr.substring(1, (upsTrackingNumbersStr.length() - 1)));
                        }
                        obj.put("upsTrackingNumbers", upsTrackingNumbers.toString());
                    }
                    
                if (extraCompanyPreferences != null && extraCompanyPreferences.isAvalaraIntegration()) {
                    obj.put("isTaxCommittedOnAvalara", invoice.isIsTaxCommittedOnAvalara());
                }
                
                obj.put(Constants.billid, invoice.getID());
//                    MasterItem gstRegistrationType = customer != null ? customer.getGSTRegistrationType() : null;
//                    if (gstRegistrationType != null && gstRegistrationType.getDefaultMasterItem() != null) {
//                        obj.put("GSTINRegTypeDefaultMstrID", gstRegistrationType.getDefaultMasterItem().getID());
//                    }
                /**
                * Get Merchant Exporter Check 
                */
                obj.put(Constants.isMerchantExporter, invoice.isIsMerchantExporter());
                obj.put(Constants.additionalMemo, invoice.getAdditionalmemo() != null ? invoice.getAdditionalmemo().getId() : "");
                obj.put(Constants.additionalMemoName, invoice.getAdditionalmemo() != null ? invoice.getAdditionalmemo().getName() : "");
                
                obj.put(Constants.generatedSource, invoice.getGeneratedSource());
                obj.put("isOpeningBalanceTransaction", invoice.isIsOpeningBalenceInvoice());
                obj.put("isLeaseFixedAsset", invoice.isFixedAssetLeaseInvoice());
                obj.put("isNormalTransaction", invoice.isNormalInvoice());
                obj.put("parentinvoiceid", invoice.getParentInvoice() == null ? "" : invoice.getParentInvoice().getID());
                obj.put(Constants.companyKey, invoiceinfo.getCompany().getCompanyID());
                obj.put("companyname", invoiceinfo.getCompany().getCompanyName());
                obj.put("withoutinventory", withoutinventory);
                obj.put("partialinv", invoice.isPartialinv());
                obj.put("gstapplicable", invoice.isIsIndGSTApplied());
                obj.put("isFromPOS", invoice.isPOSInvoice());
                obj.put(Constants.HAS_ACCESS, customer.isActivate());
                HashMap<String, Object> addressParams = new HashMap<String, Object>();
                addressParams.put(Constants.companyKey, companyid);
                addressParams.put("isDefaultAddress", true);    //always true to get defaultaddress
                addressParams.put("isBillingAddress", true);    //true to get billing address
                addressParams.put(Constants.customerid, customer != null ? customer.getID() : "");
                CustomerAddressDetails customerAddressDetails = accountingHandlerDAOobj.getCustomerAddressobj(addressParams);
                obj.put("personemail", customerAddressDetails != null ? customerAddressDetails.getEmailID() : "");
                obj.put("personAddress", customerAddressDetails != null ? customerAddressDetails.getAddress(): "");
                obj.put(InvoiceConstants.aliasname, customer == null ? "" : customer.getAliasname());
                obj.put("customercode", customer == null ? "" : customer.getAcccode() == null ? "" : customer.getAcccode());
                obj.put(Constants.PERSONCODE, customer == null ? "" : customer.getAcccode() == null ? "" : customer.getAcccode());
                obj.put("billtoaddress", invoice.getBillingShippingAddresses() == null ? "" : CommonFunctions.getBillingShippingAddress(invoice.getBillingShippingAddresses(), true));
                obj.put("shiptoaddress", invoice.getBillingShippingAddresses() == null ? "" : CommonFunctions.getBillingShippingAddress(invoice.getBillingShippingAddresses(), false));
                obj.put("createdby", invoice.getCreatedby() == null ? "" : StringUtil.getFullName(invoice.getCreatedby()));
                obj.put("dateinuserformat", userdf.format(invoiceCreationDate));
                obj.put("salespersoncode", invoice.getMasterSalesPerson() == null ? "" : (invoice.getMasterSalesPerson().getCode() == null ? "" : invoice.getMasterSalesPerson().getCode()));
                obj.put("accid", account.getID());
                obj.put("type", Constants.CUSTOMER_INVOICE);
                obj.put(InvoiceConstants.currencysymbol, (invoiceinfo.getCurrency() == null ? currency.getSymbol() : invoiceinfo.getCurrency().getSymbol()));
                obj.put("currencycode", (invoiceinfo.getCurrency() == null ? currency.getCurrencyCode() : invoiceinfo.getCurrency().getCurrencyCode()));
                obj.put("currencyidval", authHandlerDAOObj.getCurrency(currencyid));
                obj.put("companyaddress", invoiceinfo.getCompany().getAddress());
                obj.put("isfavourite", invoice.isFavourite());
                obj.put("isprinted", invoice.isPrinted());
                obj.put("isEmailSent", invoice.isIsEmailSent());
                obj.put("isjobWorkWitoutGrn", invoice.isIsjobWorkInvoice());
                obj.put("oldcurrencyrate", currencyToBaseRate * 1.0);
                obj.put("billto", invoice.getBillTo());
                obj.put("shipto", invoice.getShipTo());
                obj.put("journalentryid", (je != null ? je.getID() : ""));
                obj.put("externalcurrencyrate", (je != null ? je.getExternalCurrencyRate() : externalCurrencyRate));
                obj.put("exchangerate", "1 " + currency.getCurrencyCode() + " = " + ((je != null) ? je.getExternalCurrencyRate() : externalCurrencyRate) + " " + (invoice.getCurrency() == null ? "" : invoice.getCurrency().getCurrencyCode()));
                obj.put("entryno", (je != null ? je.getEntryNumber() : ""));
                obj.put(Constants.shipdate, invoice.getShipDate() == null ? "" : df.format(invoice.getShipDate()));
               
                obj.put("duedateInUserDateFormat", authHandler.getUserDateFormatterWithoutTimeZone(paramJobj).format(invoice.getDueDate()));
                obj.put("code", customer != null ? customer.getAcccode() : "");
                obj.put("salesPersonCode", invoice.getMasterSalesPerson() == null ? "" : invoice.getMasterSalesPerson().getCode());    
                obj.put("salespersondesignation", invoice.getMasterSalesPerson() == null ? "" : invoice.getMasterSalesPerson().getDesignation() == null ? "" : invoice.getMasterSalesPerson().getDesignation());
                obj.put(Constants.memo, invoice.getMemo());
                //get Cash Received value
                obj.put(Constants.CASH_RECEIVED, authHandler.round(invoice.getCashReceived(), companyid));
                obj.put("status", invoice.isIsOpenDO() ? "Open" : "Closed");
                obj.put("amountDueStatus", invoice.isIsOpenReceipt()? "Open" : "Closed");
                obj.put("customerbankaccounttype", (invoice.getCustomerBankAccountType()!=null)?invoice.getCustomerBankAccountType().getID():"");
                obj.put("customerbankaccounttypevalue", (invoice.getCustomerBankAccountType()!=null)?invoice.getCustomerBankAccountType().getValue():"");
                obj.put("isGIROFileGeneratedForUOBBank", invoice.isIsGIROFileGeneratedForUOBBank()?"Yes":"No");
                obj.put("isGIROFileGeneratedForUOBBankForReport", invoice.isIsGIROFileGeneratedForUOBBank());
                obj.put("paymentMethodUsedForUOB", (invoice.getPaymentMethodUsedForUOB()!=null)?invoice.getPaymentMethodUsedForUOB().getMethodName():"");
                obj.put(Constants.IsRoundingAdjustmentApplied, invoice.isIsRoundingAdjustmentApplied());
                obj.put("isdropshipchecked", invoice.isIsDropshipDocument());
                obj.put("discount", invoice.getDiscount() == null ? 0 : invoice.getDiscount().getDiscountValue());
                obj.put("discountinbase",  invoice.getDiscountAmountInBase());
                obj.put("movementtype", invoice.getMovementType() != null ? invoice.getMovementType().getID() : "");
                    /**
                     * Put GST document history.
                     */
                    if (invoice.getCompany().getCountry().getID().equalsIgnoreCase("" + Constants.indian_country_id)) {
                        obj.put("refdocid", invoice.getID());
                        fieldDataManagercntrl.getGSTDocumentHistory(obj);

                    }
                double taxAmt = 0d;
                if (isopeningBalanceInvoice) {
                    taxAmt = invoice.getTaxamount();
                } else {
                    if (invoice.getTaxEntry() != null) {// if Invoice Level Tax is available
                        taxAmt = invoice.getTaxEntry() == null ? 0 : invoice.getTaxEntry().getAmount();
//                        obj.put("taxamount", invoice.getTaxEntry() == null ? 0 : invoice.getTaxEntry().getAmount());
                    }
                }
                
                /**
                 * Finding Term Mapped to Invoice and Discount Mapped to
                 * Term and passing discount value, Type, applicable days,
                 * Sales invoice date and amount due of invoice because
                 * these are used on JS side for calculation of discount
                 * while making bulk payment of selected invoice. ERM-981.
                 */
                JSONObject columnPrefJObj = null;
                    if (!StringUtil.isNullOrEmpty(extraCompanyPreferences.getColumnPref())) {
                        columnPrefJObj = new JSONObject((String) extraCompanyPreferences.getColumnPref());
                        if (columnPrefJObj.has(Constants.DISCOUNT_ON_PAYMENT_TERMS) && columnPrefJObj.get(Constants.DISCOUNT_ON_PAYMENT_TERMS) != null && columnPrefJObj.optBoolean(Constants.DISCOUNT_ON_PAYMENT_TERMS, false)) {
                            obj.put("invoicecreationdate", je != null ? df.format(je.getEntryDate()) : df.format(invoiceCreationDate));
                        }
                }
                obj.put("amountDueOriginal", (amountDueOriginal <= 0) ? 0 : authHandler.round(amountDueOriginal, companyid));
                obj.put("gtaapplicable", invoice.isRcmapplicable()); // Get RCM applicable Check - Used for INDIA only - ERP-34970(ERM-534)
                obj.put("discount", invoice.getDiscount() == null ? 0 : invoice.getDiscount().getDiscountValue());
                obj.put("discountamount", invoice.getDiscount() == null ? 0 : invoice.getDiscount().getDiscountValue());
                obj.put("discountinbase",  invoice.getDiscountAmountInBase());
                obj.put("ispercentdiscount", invoice.getDiscount() == null ? false : invoice.getDiscount().isInPercent());
                obj.put("discountval", invoice.getDiscount() == null ? 0 : invoice.getDiscount().getDiscount());
                obj.put(Constants.shipvia, invoice.getShipvia() == null ? "" : invoice.getShipvia());
                obj.put(Constants.posttext, invoice.getPostText() == null ? "" : invoice.getPostText());
                obj.put("shiplengthval", invoice.getShiplength());
                obj.put("invoicetype", invoice.getInvoicetype());
                obj.put("isInterstateParty", (invoice.getCustomer() !=null ? invoice.getCustomer().isInterstateparty() : false));
                obj.put(Constants.fob, invoice.getFob() == null ? "" : invoice.getFob());
                //obj.put("termdetails", invoiceTermMapDetails.containsKey(invid) ? invoiceTermMapDetails.get(invid) : "");
                if (invoice.getTermsincludegst() != null) {
                    obj.put(Constants.termsincludegst, invoice.getTermsincludegst());
                }
                    obj.put("termdays", invoiceTermMap.containsKey(invid) ? invoiceTermMap.get(invid).getTermdays() : 0);
                    obj.put("termid", invoiceTermMap.containsKey(invid) ? invoiceTermMap.get(invid).getID() : "");
//                    double termAmount = invoiceTermMapDetails.containsKey(invid) ? CommonFunctions.getTotalTermsAmount(invoiceTermMapDetails.get(invid)) : 0;
//                    obj.put("termamount", termAmount);
                    String fromcurrencyid = invoice.getCurrency().getCurrencyID();
//                    KwlReturnObject termbAmtTax = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, termAmount, fromcurrencyid, invoiceCreationDate, externalCurrencyRate);
//                    double termamountinBase = authHandler.round((Double) termbAmtTax.getEntityList().get(0), companyid);
//                    obj.put("termamountinBase", termamountinBase);
                    obj.put("gstIncluded", invoice.isGstIncluded());
                    obj.put(Constants.isConsignment, invoice.isIsconsignment());
                    obj.put("custWarehouse", invoice.getCustWarehouse());
                    obj.put("movementtype", invoice.getMovementType() != null ? invoice.getMovementType().getID() : "");
                    obj.put("attachment", attachemntcount);
                    obj.put("isExciseInvoice", invoice.isIsExciseInvoice());
                    obj.put("defaultnatureofpurchase", invoice.getDefaultnatureOfPurchase());
                    obj.put("issupplementary", invoice.getIsSupplementary());
                    obj.put("originalInvoice", invoice.getParentInvoice()!=null?invoice.getParentInvoice().getInvoiceNumber():"");
                    obj.put("originalInvoiceId",invoice.getParentInvoice()!=null?invoice.getParentInvoice().getID():"");
                    obj.put("formseriesno", invoice.getFormseriesno() == null ? "" : invoice.getFormseriesno());
                    obj.put("formno", invoice.getFormno() == null ? "" : invoice.getFormno());
                    obj.put("formdate", invoice.getFormdate() == null ? "" : df.format(invoice.getFormdate()));
                    obj.put("formamount", invoice.getFormamount());
                    obj.put("isLeaseFixedAsset", invoice.isFixedAssetLeaseInvoice());
                    boolean isApplyTaxToTerms=invoice.isApplyTaxToTerms();
                    obj.put("isapplytaxtoterms", isApplyTaxToTerms);

                KwlReturnObject cmp = accountingHandlerDAOobj.getObject(Company.class.getName(), companyid);
                boolean isForTemplate = (paramJobj.has("isForTemplate") && Boolean.parseBoolean(paramJobj.get("isForTemplate").toString())) ? true : false;
                Company company = (Company) cmp.getEntityList().get(0);
                int countryid = company.getCountry() != null ? Integer.parseInt(company.getCountry().getID()) : 0;
                if (Constants.indian_country_id == countryid) {
                        ExtraCompanyPreferences ECPref=null;    
                    List<SalesInvoiceExciseDetailsMap> ed = null;
                    KwlReturnObject extraresult = accountingHandlerDAOobj.getObject(ExtraCompanyPreferences.class.getName(), companyid);
                    ECPref = extraresult != null ? (ExtraCompanyPreferences) extraresult.getEntityList().get(0) : null;
                    if (ECPref.isExciseApplicable()) {
                        KwlReturnObject exciseDetails = accountingHandlerDAOobj.getExciseDetails(invoice.getID());
                        ed = exciseDetails.getEntityList();
                    }
                    if (ed != null && ed.size() > 0) {
                        obj.put("vattin", ed.get(0).getInvoice().getCustomer().getVATTINnumber());
                        obj.put("csttin", ed.get(0).getInvoice().getCustomer().getCSTTINnumber());
                        obj.put("servicetaxregno", ed.get(0).getInvoice().getCustomer().getSERVICEnumber());
                    }
                    if (extraCompanyPreferences.isExciseApplicable() && ed.size() > 0) {
                        obj.put("registrationType", ed.get(0).getRegistrationType());
                        obj.put("UnitName", ed.get(0).getUnitname());
                        obj.put("ECCNo", ed.get(0).getECCNo());
                            obj.put("isExciseInvoiceWithTemplate",(!ed.get(0).getRegistrationType().equals("")||!ed.get(0).getUnitname().equals("")||!ed.get(0).getECCNo().equals(""))?true:false);
                    }
                     /**
                     * Get Module template and its mapped Unit details for company if Line level term flag ON 
                     */
                    if(isLineLevelTermFlag && isForTemplate){
                        HashMap<String, Object> ModuleTempParams = new HashMap<>();
                        ModuleTempParams.put("modulerecordid", invid);
                        ModuleTempParams.put("companyid", companyid);
                        /** Get Module template  from invoice id . In module template purchase id add as modulerecordid */
                        KwlReturnObject ModuleTempObj = accountingHandlerDAOobj.getModuleTemplates(ModuleTempParams);    
                        if(ModuleTempObj!=null && ModuleTempObj.getEntityList().size() > 0){
                            ModuleTemplate moduleTemp = (ModuleTemplate) ModuleTempObj.getEntityList().get(0);
                            obj.put("companyunitid", moduleTemp.getCompanyUnitid());

                            HashMap tmpHashMap = new HashMap();
                            tmpHashMap.put("companyunitid", moduleTemp.getCompanyUnitid());
                            tmpHashMap.put(Constants.companyKey, companyid);
                            /* Get Company Unit details from companyunitid mapped with module template */
                            KwlReturnObject exciseTemp = accountingHandlerDAOobj.getExciseTemplatesMap(tmpHashMap);
                            if (exciseTemp != null && exciseTemp.getEntityList()!=null && exciseTemp.getEntityList().size() > 0) {
                                ExciseDetailsTemplateMap ExcisemoduleTemp = (ExciseDetailsTemplateMap) exciseTemp.getEntityList().get(0);
                                if (ExcisemoduleTemp != null) {
                                    obj.put("registrationType", ExcisemoduleTemp.getRegistrationType());
                                    obj.put("UnitName", ExcisemoduleTemp.getUnitname());
                                    obj.put("ECCNo", ExcisemoduleTemp.getECCNo());
                                }
                            }
                        }
                    }
                    obj.put("formtypeid", invoice.getFormtype() != null ? invoice.getFormtype() : 0);
                    obj.put("isInterstateParty", invoice.getCustomer().isInterstateparty());
                    if (!StringUtil.isNullOrEmpty(invoice.getFormstatus())) {
                        if (invoice.getFormstatus().equals("1")) {
                            obj.put("formstatus", "NA");
                        } else if (invoice.getFormstatus().equals("2")) {
                            obj.put("formstatus", "Pending");
                            } else if(invoice.getFormstatus().equals("3")){
                            obj.put("formstatus", "Submitted");
                        }
                        }
                         obj.put("excisetypeid", invoice.getExcisetype() != null ? invoice.getExcisetype() : 0);
                         
                        // Check for Tax Payment linked to the invoice.
                        KwlReturnObject result = accInvoiceDAOobj.getTaxPaymentFromInvoice(invid, companyid);
                        list = result.getEntityList();
                        if(list != null && !list.isEmpty()){
                            obj.put(Constants.IS_TAXPAID_TRANSACTION, true);
                        } else {
                            obj.put(Constants.IS_TAXPAID_TRANSACTION, false);
                        }
                    }
                /*
                 * Check if invoice is claimed as bad debt
                 */
                if(invoice.getClaimAmountDue()!= 0){
                    obj.put("isClaimedTransaction", true);
                }    
                // Calculating total invoice amount in base currency
                double amountinbase = invoiceOriginalAmount;
                if (isopeningBalanceInvoice && invoice.isConversionRateFromCurrencyToBase()) {// if invoice is opening balance invoice and Conversion rate is taken from user is Currency to base then following method will be called.
                    bAmt = accCurrencyDAOobj.getCurrencyToBaseAmountAccordingToCurrencyToBaseExchangeRate(requestParams, invoiceOriginalAmount, currencyid, invoiceCreationDate, externalCurrencyRate);
                    amountinbase = (Double) bAmt.getEntityList().get(0);
                } else if (invoiceOriginalAmount != 0) {
                    if (externalCurrencyRate != 0) {
                        amountinbase = invoiceOriginalAmount / externalCurrencyRate;
                    } else if (currencyToBaseRate != 0) {
                        amountinbase = invoiceOriginalAmount / currencyToBaseRate;
                    }
                }
                double totalDiscount=0.0;
                Set<InvoiceDetail> invoiceDetails = invoice.getRows();
                    double subtotal = 0d;
                    double productTotalAmount = 0d;
                    for (InvoiceDetail invoiceDetail : invoiceDetails) {
                        double ramount = 0d;
                        double invquantity = invoiceDetail.getInventory().getQuantity();
                        if (invoiceDetail.getInvoice().isGstIncluded()) {
                            ramount = invoiceDetail.getRateincludegst() * invquantity;
                        } else {
                            ramount = invoiceDetail.getRate() * invquantity;
                        }
                        if (invoiceDetail.getInvoice().isPartialinv() && invoiceDetail.getPartamount() != 0 ) {
                            ramount = ramount * (invoiceDetail.getPartamount() / 100);
                        }
                        /**
                         * Getting the Discount Value(Amount) and subtracting
                         * from subtotal.
                         */
                        Discount disc = invoiceDetail.getDiscount();
                        if (disc != null) {
                            if(invoiceDetail.getInvoice().isPartialinv() && invoiceDetail.getPartamount() != 0 ){
                                totalDiscount += authHandler.round(invoiceDetail.getPartialDiscount(),companyid);
                            }else{
                                totalDiscount += disc.getDiscountValue();
                            }
                        }
                        productTotalAmount += authHandler.round(ramount, companyid);
                    }
                    obj.put("productTotalAmount", productTotalAmount);
                    if (isBadDebtInvoices) {// in case of Malasian Company
                        int baddebttype = Integer.parseInt(paramJobj.getString("baddebttype"));
                        double totalTaxAmt = 0d;
                        double totalTaxAmtInBase = 0d;
                        String taxId = "";
                        if (isopeningBalanceInvoice) {
                            totalTaxAmt = invoice.getTaxamount();
                        } else {
                            double invoiceLevelTaxAmt = invoice.getTaxEntry() == null ? 0 : invoice.getTaxEntry().getAmount();
                            taxId = invoice.getTaxEntry() == null ? "" : invoice.getTax().getID();
                            double rowTaxAmt = 0d;
                            for (InvoiceDetail invoiceDetail : invoiceDetails) {
                                rowTaxAmt += invoiceDetail.getRowTaxAmount();
                                rowTaxAmt += invoiceDetail.getRowTermTaxAmount();
                                taxId = (invoiceDetail.getTax() != null) ? invoiceDetail.getTax().getID() : taxId;
                            }
                            totalTaxAmt = invoiceLevelTaxAmt + rowTaxAmt;
                        }

                        if (totalTaxAmt == 0) {// no need to put invoice in bad debt section if it has tax 0
                            continue;
                        }

                        // get Paid amount of invoice
                        Date badDebtCalculationToDate = null;
                        if (paramJobj.optString("badDebtCalculationToDate", null) != null) {
                            badDebtCalculationToDate = df.parse((String) paramJobj.getString("badDebtCalculationToDate"));
                        }
                        KwlReturnObject invoicePaidAmtObj = accReceiptDAOobj.getReceiptFromBadDebtClaimedInvoice(invoice.getID(), true, badDebtCalculationToDate);
                        double paidAmt = 0;

                        List paidList = invoicePaidAmtObj.getEntityList();
                        if (paidList != null && !paidList.isEmpty()) {
                            Iterator pmtIt = paidList.iterator();
                            while (pmtIt.hasNext()) {
                                ReceiptDetail rd = (ReceiptDetail) pmtIt.next();

                                double paidAmtInPaymentCurrency = rd.getAmount();

//                                KwlReturnObject bAmt1 = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, paidAmtInPaymentCurrency, rd.getReceipt().getCurrency().getCurrencyID(), rd.getReceipt().getJournalEntry().getEntryDate(), rd.getReceipt().getJournalEntry().getExternalCurrencyRate());
                                KwlReturnObject bAmt1 = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, paidAmtInPaymentCurrency, rd.getReceipt().getCurrency().getCurrencyID(), rd.getReceipt().getCreationDate(), rd.getReceipt().getJournalEntry().getExternalCurrencyRate());
                                double paidAmtInBase = authHandler.round((Double) bAmt1.getEntityList().get(0), companyid);

                                paidAmt += paidAmtInBase;

                            }
                        }

                        // paidAmt should be converted into base currency
//                        KwlReturnObject taxObj = accTaxObj.getTaxPercent(companyid, isopeningBalanceInvoice ? invoice.getCreationDate() : invoice.getJournalEntry().getEntryDate(), taxId);
                        KwlReturnObject taxObj = accTaxObj.getTaxPercent(companyid, isopeningBalanceInvoice ? invoice.getCreationDate() : invoice.getCreationDate(), taxId);
                        double taxPer = (Double) taxObj.getEntityList().get(0);

                        // Gst claimable amount
                        double invAmountDue = isopeningBalanceInvoice ? invoice.getOpeningBalanceAmountDue() : invoice.getInvoiceamountdue();

                        // Converting invAmountDue to base currency
                        KwlReturnObject bAmt1 = null;
                        if (isopeningBalanceInvoice) {
                            invAmountDue = invoice.getOpeningBalanceBaseAmountDue();
                        } else {
//                            bAmt1 = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, invAmountDue, fromcurrencyid, invoice.getJournalEntry().getEntryDate(), invoice.getJournalEntry().getExternalCurrencyRate());
                            bAmt1 = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, invAmountDue, fromcurrencyid, invoice.getCreationDate(), invoice.getJournalEntry().getExternalCurrencyRate());
                            invAmountDue = authHandler.round((Double) bAmt1.getEntityList().get(0), companyid);
                        }
                        double gstclaimableamount = 0.0;
                        if (isopeningBalanceInvoice) {
                            totalTaxAmtInBase = invoice.getTaxamountinbase();
                        } else {
//                            bAmt1 = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, totalTaxAmt, fromcurrencyid, invoice.getJournalEntry().getEntryDate(), invoice.getJournalEntry().getExternalCurrencyRate());
                            bAmt1 = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, totalTaxAmt, fromcurrencyid, invoice.getCreationDate(), invoice.getJournalEntry().getExternalCurrencyRate());
                            totalTaxAmtInBase = authHandler.round((Double) bAmt1.getEntityList().get(0), companyid);
                        }

                        gstclaimableamount = (totalTaxAmtInBase * invAmountDue) / amountinbase;
                        gstclaimableamount = authHandler.round(gstclaimableamount, companyid);

                    // Calculation of claimed GST
                        // Step-1 get paied amount before claimed date
                        // Step-2 get credit note before claimed date
                        // Step-3 get debit note amount before claimed date
                    //Calculate Bad Debt Recoverable Amount
                        // Get Recovered Amount of invoice
                        HashMap<String, Object> badMaps = new HashMap<String, Object>();
                        badMaps.put(Constants.companyKey, companyid);
                        badMaps.put("invoiceid", invid);

                        KwlReturnObject badDebtMappingResult = accInvoiceDAOobj.getBadDebtInvoiceMappingForInvoice(badMaps);

                        Date badDebtClaimedDate = null;
                        double totalRecoveredAmt = 0;
                        List badDebtMapping = badDebtMappingResult.getEntityList();
                        if (!badDebtMapping.isEmpty()) {
                            Iterator badIt = badDebtMapping.iterator();
                            while (badIt.hasNext()) {
                                BadDebtInvoiceMapping debtInvoiceMapping = (BadDebtInvoiceMapping) badIt.next();
                                totalRecoveredAmt += debtInvoiceMapping.getBadDebtAmtRecovered();
                                if (debtInvoiceMapping.getBadDebtClaimedDate() != null) {
                                    badDebtClaimedDate = debtInvoiceMapping.getBadDebtClaimedDate();
                                }
                            }
                        }

                        // Calculate Recover Amount in base
                        if (isopeningBalanceInvoice) {
                            if (invoice.isConversionRateFromCurrencyToBase()) {
                                totalRecoveredAmt = totalRecoveredAmt / invoice.getExchangeRateForOpeningTransaction();
                            } else {
                                totalRecoveredAmt = totalRecoveredAmt * invoice.getExchangeRateForOpeningTransaction();
                            }
                        } else {
//                            bAmt1 = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, totalRecoveredAmt, fromcurrencyid, invoice.getJournalEntry().getEntryDate(), invoice.getJournalEntry().getExternalCurrencyRate());
                            bAmt1 = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, totalRecoveredAmt, fromcurrencyid, invoice.getCreationDate(), invoice.getJournalEntry().getExternalCurrencyRate());
                            totalRecoveredAmt = authHandler.round((Double) bAmt1.getEntityList().get(0), companyid);
                        }

                        if (baddebttype == 1) {
                            double claimedGST = 0;
                            if (!badDebtMapping.isEmpty()) {
                                Iterator badIt = badDebtMapping.iterator();
                                while (badIt.hasNext()) {
                                    BadDebtInvoiceMapping debtInvoiceMapping = (BadDebtInvoiceMapping) badIt.next();
                                    if (debtInvoiceMapping.getBadDebtType() == 0) {
                                        claimedGST += debtInvoiceMapping.getBadDebtGSTAmtClaimed();
                                    }
                                }
                            }

                            // converting claimed GST in Base Currency
//                            bAmt1 = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, claimedGST, fromcurrencyid, invoice.getJournalEntry().getEntryDate(), invoice.getJournalEntry().getExternalCurrencyRate());
                            bAmt1 = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, claimedGST, fromcurrencyid, invoice.getCreationDate(), invoice.getJournalEntry().getExternalCurrencyRate());
                            claimedGST = authHandler.round((Double) bAmt1.getEntityList().get(0), companyid);

                            obj.put("gstclaimableamount", claimedGST);
                        } else {
                            obj.put("gstclaimableamount", gstclaimableamount);

                            Date selectedCriteriaDate = df.parse(paramJobj.getString("selectedCriteriaDate"));
                            int badDebtCriteria = Integer.parseInt(paramJobj.getString("badDebtCriteria"));

                            long diff = 0;
                            if (badDebtCriteria == 0 && invoice.getDueDate() != null) {// on Invoice Due Date
                                diff = selectedCriteriaDate.getTime() - invoice.getDueDate().getTime();
                            } else if (badDebtCriteria == 1) {// on Invoice Creation Date
                                diff = selectedCriteriaDate.getTime() - invoiceCreationDate.getTime();
                            }
                            long diffInDays = diff / (24 * 60 * 60 * 1000);

                            obj.put("agingDays", diffInDays);

                        }

                        // Calculating Paid Amt in base currency
                        double gstToRecover = (paidAmt - totalRecoveredAmt) * taxPer / (100 + taxPer);
                        double paidAfterClaimed = paidAmt - totalRecoveredAmt;

                        obj.put("paidAfterClaimed", paidAfterClaimed);
                        obj.put("gstToRecover", gstToRecover);
                        obj.put("claimedPeriod", invoice.getClaimedPeriod());
                        obj.put("badDebtClaimedDate", (badDebtClaimedDate != null) ? df.format(badDebtClaimedDate) : null);

                        if (authHandler.round(amountdue, companyid) == 0 && authHandler.round(paidAfterClaimed, companyid) == 0) {// don't put invoices which has amount due zero and whole gst has been recovered
                            continue;
                        }
                    }

                    obj.put("fixedAssetInvoice", invoice.isFixedAssetInvoice());
                    obj.put("isDraft", invoice.isDraft());
                    obj.put("fixedAssetLeaseInvoice", invoice.isFixedAssetLeaseInvoice());
                    if (invoice.getCustWarehouse() != null) {
                        obj.put("custWarehouse", invoice.getCustWarehouse().getId());
                        obj.put("custWarehousename", invoice.getCustWarehouse().getName());
                    }
                    obj.put("deliveryTime", invoice.getDeliveryTime() == null ? "" : invoice.getDeliveryTime());
                    obj.put("getFullShippingAddress", invoice.getBillingShippingAddresses() == null ? "" : invoice.getBillingShippingAddresses().getFullShippingAddress());

                    if (!StringUtil.isNullObject(invoice.getBillingShippingAddresses())) {
                        obj.put("billingAddContactPerson", invoice.getBillingShippingAddresses().getBillingContactPerson() != null ? invoice.getBillingShippingAddresses().getBillingContactPerson() : "");
                        obj.put("shippingAddContactPerson", invoice.getBillingShippingAddresses().getShippingContactPerson() != null ? invoice.getBillingShippingAddresses().getShippingContactPerson() : "");
                        obj.put("billingAddContactNo", invoice.getBillingShippingAddresses().getBillingContactPersonNumber() != null ? invoice.getBillingShippingAddresses().getBillingContactPersonNumber() : "");
                        obj.put("shippingAddContactNo", invoice.getBillingShippingAddresses().getShippingContactPersonNumber() != null ? invoice.getBillingShippingAddresses().getShippingContactPersonNumber() : "");
                        obj.put("BillingAddEmail", invoice.getBillingShippingAddresses().getBillingEmail() != null ? invoice.getBillingShippingAddresses().getBillingEmail() : "");
                        obj.put("shippingAddEmail", invoice.getBillingShippingAddresses().getShippingEmail() != null ? invoice.getBillingShippingAddresses().getShippingEmail() : "");
                    } else {
                        obj.put("billingAddContactPerson", "");
                        obj.put("shippingAddContactPerson", "");
                        obj.put("billingAddContactNo", "");
                        obj.put("shippingAddContactNo", "");
                        obj.put("BillingAddEmail", "");
                        obj.put("shippingAddEmail", "");
                    }
                    boolean excluded = false;
                    String action = "";
                    Iterator Excludeditr = ExcludedIDlist.iterator();
                    while (Excludeditr.hasNext()) {
                        ExcludedOutstandingOrders ExcludedObj = (ExcludedOutstandingOrders) Excludeditr.next();
                        if (ExcludedObj.getInvoice().getID().equals(invoice.getID())) {
                            excluded = true;
                            if (ExcludedObj.getExcludeOrGenerate() == 1) {
                                action = "<b>Manualy Generated</b>";
                            }
                            if (ExcludedObj.getExcludeOrGenerate() == 0) {
                                action = "<b>Excluded</b>";
                            }
                        }
                        }
                obj.put("excluded", excluded);
                obj.put("action", action);
                BillingShippingAddresses addresses = invoice.getBillingShippingAddresses();
                AccountingAddressManager.getTransactionAddressJSON(obj, addresses, false);
                
                if (invoice.isCashtransaction()) {
                    obj.put(Constants.IS_PYMENT_STATUS_CLEARED, false);
                    PayDetail payDetail = invoice.getPayDetail();
                    if (payDetail != null) {  //for older cash record payment detail will be null                     
                        PaymentMethod paymentMethod = invoice.getPayDetail().getPaymentMethod();
                        if (paramJobj.optBoolean(Constants.isdefaultHeaderMap, false) == true) {
                            obj.put("paymentmethodid", paymentMethod.getID());
                            obj.put("paymentmethodidValue", paymentMethod.getMethodName());
                            obj.put("paymentaccount", paymentMethod.getAccount()!=null?paymentMethod.getAccount().getAccountName():"");
                            
                        } else {
                            obj.put("paymentname", paymentMethod.getMethodName());
                            obj.put("methodid", paymentMethod.getID());
                        }
                        
                        obj.put("detailtype", paymentMethod.getDetailType());
                            if (paymentMethod.getDetailType() == PaymentMethod.TYPE_CARD) {
                                Card card = payDetail.getCard();
                                obj.put("cardno", card != null ? card.getCardNo() : "");
                                obj.put("nameoncard", card != null ? card.getCardHolder() : "");
                                obj.put("cardexpirydate", card != null ? df.format(card.getExpiryDate()) : "");
                                obj.put("cardtype", card != null ? card.getCardType() : "");
                                obj.put("cardrefno", card != null ? card.getRefNo() : "");

                            } else if (paymentMethod.getDetailType() == PaymentMethod.TYPE_BANK) {
                                Cheque cheque = payDetail.getCheque();
                                obj.put("chequeno", cheque != null ? cheque.getChequeNo() : "");
                                obj.put("chequedescription", cheque != null ? cheque.getDescription() : "");
                                obj.put("refname", (cheque == null ? "" : (cheque.getBankMasterItem() == null ? cheque.getBankName() : cheque.getBankMasterItem().getID())) );
                                obj.put("bankname", (cheque == null ? "" : (cheque.getBankMasterItem() == null ? cheque.getBankName() : cheque.getBankMasterItem().getValue())));

                                obj.put("chequedate", cheque != null ? df.format(cheque.getDueDate()) : "");
                                obj.put("clearanceDate", "");
                                obj.put("paymentStatus", "Uncleared");
                                if (invoice.getPayDetail() != null) {
                                    KwlReturnObject clearanceDate = accBankReconciliationObj.getBRfromJE(invoice.getJournalEntry().getID(), invoice.getCompany().getCompanyID(), false);
                                    if (clearanceDate != null && clearanceDate.getEntityList() != null && clearanceDate.getEntityList().size() > 0) {
                                        BankReconciliationDetail brd = (BankReconciliationDetail) clearanceDate.getEntityList().get(0);
                                        if (brd.getBankReconciliation().getClearanceDate() != null) {
                                            obj.put("clearanceDate", df.format(brd.getBankReconciliation().getClearanceDate()));
                                            obj.put("paymentStatus", "Cleared");
                                            obj.put(Constants.IS_PYMENT_STATUS_CLEARED, true);// To Disable Feilds in Edit Case for  Cleard  Cash Payment
                                        }
                                    }
                                }
                            }
                        } else {
                            obj.put("paymentname", "");
                            obj.put("methodid", "");
                        }
                    } else {
                        Map<String, Object> params = new HashMap<>();
                        String methodid = StringUtil.isNullOrEmpty(invoice.getdefaultPaymentmethod()) ? "" : invoice.getdefaultPaymentmethod();             //ERM-735 Associate default payment method to customer
                        params.put("ID", methodid);
                        Object mtdresult = kwlCommonTablesDAOObj.getRequestedObjectFields(PaymentMethod.class, new String[]{"methodName"}, params);
                        String paymentname = StringUtil.isNullOrEmpty((String) mtdresult) ? "" : mtdresult.toString();
                        obj.put("paymentname", (!StringUtil.isNullOrEmpty(paymentname)) ? paymentname : "NA");
                        obj.put("methodid", (!StringUtil.isNullOrEmpty(methodid)) ? methodid : "");
                    }

                if (invoiceReport) {
                    obj.put("isreval", isReval);
                }
                 
                obj.put("approvalstatus", invoice.getApprovestatuslevel());
                    String approvalStatus="";
                    ScriptEngineManager mgr = new ScriptEngineManager();
                    ScriptEngine engine = mgr.getEngineByName("JavaScript");
                    String multipleRuleids="";
                    if(invoice.getApprovestatuslevel() < 0){
                    approvalStatus = "Rejected";
                } else if (invoice.getApprovestatuslevel() < 11) { 
                    String ruleid = "", userRoleName = "";
                    HashMap<String, Object> qdDataMap = new HashMap<String, Object>();
                    qdDataMap.put(Constants.companyKey, companyid);
                    qdDataMap.put("level", invoice.getApprovestatuslevel());
                    qdDataMap.put(Constants.moduleid, Constants.Acc_Invoice_ModuleId);
                    KwlReturnObject flowresult = accMultiLevelApprovalDAOObj.getMultiApprovalRuleData(qdDataMap);
                    Iterator ruleitr = flowresult.getEntityList().iterator();
                    while (ruleitr.hasNext()) {
                        Object[] rulerow = (Object[]) ruleitr.next();
                        ruleid = rulerow[0].toString();
                        boolean sendForApproval = false;
                        int appliedUpon = Integer.parseInt(rulerow[5].toString());
                        String discountRule = "";
                        String rule = "";
                        if (rulerow[2] != null) {
                                rule = rulerow[2].toString();
                        }
                        if (rulerow[7] != null) {
                            discountRule = rulerow[7].toString();
                        }
                        if (appliedUpon == Constants.Total_Amount) {
                            /*
                             Added to get condition of approval rule i.e set when creating approval rule 
                             */
                            rule = rule.replaceAll("[$$]+", String.valueOf(amountinbase));
                        } else if (appliedUpon == Constants.Specific_Products || appliedUpon == Constants.Specific_Products_Discount || appliedUpon == Constants.Specific_Products_Category) {
                            /*
                             Handled for Product,product discount And product category
                             */
                            HashMap<String, Object> GlobalParams = AccountingManager.getGlobalParams(paramJobj);
                            JSONArray productDiscountJArr = new JSONArray();
//                            Set<InvoiceDetail> invoiceDetails = invoice.getRows();
                            for (InvoiceDetail invDetail : invoiceDetails) {
                                if (invDetail.getInventory() != null) {
                                    String productId = invDetail.getInventory().getProduct().getID();
                                    Discount invDiscount = invDetail.getDiscount();
                                    double discAmountinBase = 0;
                                    if (invDiscount != null) {
                                        double discountVal = invDiscount.getDiscountValue();
                                        KwlReturnObject dAmount = accCurrencyDAOobj.getCurrencyToBaseAmount(GlobalParams, discountVal, currencyid, invoice.getCreationDate(), invoice.getExternalCurrencyRate());
                                        discAmountinBase = (Double) dAmount.getEntityList().get(0);
                                    }
                                    discAmountinBase = authHandler.round(discAmountinBase, companyid);
                                    JSONObject productDiscountObj = new JSONObject();
                                    productDiscountObj.put("productId", productId);
                                    productDiscountObj.put("discountAmount", discAmountinBase);
                                    productDiscountJArr.put(productDiscountObj);
                                }
                            }
                            if (appliedUpon == Constants.Specific_Products || appliedUpon == Constants.Specific_Products_Discount) {
                                /*
                                 * Check If Rule is apply on specefic product
                                 *  and Specific product discount from multiapproverule window
                                 */
                                if (productDiscountJArr != null) {
                                    sendForApproval = AccountingManager.checkForProductAndProductDiscountRule(productDiscountJArr, appliedUpon, rule, discountRule);
                                }
                            } else if (appliedUpon == Constants.Specific_Products_Category) {
                                /*
                                 * Check If Rule is apply on product
                                 * category from multiapproverule window
                                 */
                                sendForApproval = accountingHandlerDAOobj.checkForProductCategoryForProduct(productDiscountJArr, appliedUpon, rule);
                            }
                        }
                        /*
                         Added to check if record falls in total amount approval rule 
                         */
                        if (StringUtil.isNullOrEmpty(rule) || sendForApproval || (!StringUtil.isNullOrEmpty(rule) && appliedUpon == Constants.Total_Amount && Boolean.parseBoolean(engine.eval(rule).toString()))) {
                            multipleRuleids += ruleid + ",";
                        }
                    }
                    /*
                        Added to get multiple ruleid if record falls in multiple approval rule 
                        */
                        String[] multipleRuleidsArray = multipleRuleids.split(",");
                        for (int multiRule = 0; multiRule < multipleRuleidsArray.length; multiRule++) {
                            ruleid = multipleRuleidsArray[multiRule];
                    if (!StringUtil.isNullOrEmpty(ruleid)) {
                        qdDataMap.put("ruleid", ruleid);
                        KwlReturnObject userResult = accMultiLevelApprovalDAOObj.getApprovalRuleTargetUsers(qdDataMap);
                        Iterator useritr = userResult.getEntityList().iterator();
                        while (useritr.hasNext()) {
                            Object[] userrow = (Object[]) useritr.next();
                            String userId = userrow[0].toString();
                            String userName = userrow[1].toString();
                            /*
                             Addded so duplicate approve's can be eleminated 
                             */
                            if (userRoleName.contains(userName)) {
                                continue;
                            }
                            KwlReturnObject kmsg = null;
                            String roleName = "Company User";
                            kmsg = permissionHandlerDAOObj.getRoleofUser(userId);
                            Iterator ite2 = kmsg.getEntityList().iterator();
                            while (ite2.hasNext()) {
                                Object[] row = (Object[]) ite2.next();
                                roleName = row[1].toString();
                            }
                            userRoleName += roleName + " " + userName + ",";
                        }
                    }
                    }
                    if (!StringUtil.isNullOrEmpty(userRoleName)) {
                        userRoleName = userRoleName.substring(0, userRoleName.length() - 1);
                    }
                    approvalStatus = "Pending Approval" + (StringUtil.isNullOrEmpty(userRoleName) ? "" : " by " + userRoleName) + " at Level - " + invoice.getApprovestatuslevel();
                } else {
                    approvalStatus = "Approved";
                }
                    obj.put("approvalstatusinfo",approvalStatus);
                    
                    if (paramJobj.optBoolean("pendingapproval",false)) {
                        int nextApprovalLevel = 11;
//                        ScriptEngineManager mgr = new ScriptEngineManager();
//                        ScriptEngine engine = mgr.getEngineByName("JavaScript");
                        HashMap<String, Object> qdDataMap = new HashMap<String, Object>();
                        qdDataMap.put("companyid", companyid);
                        qdDataMap.put("level", invoice.getApprovestatuslevel() + 1);
                        qdDataMap.put("moduleid", Constants.Acc_Invoice_ModuleId);
                        KwlReturnObject flowresult = accMultiLevelApprovalDAOObj.getMultiApprovalRuleData(qdDataMap);
                        List<Object[]> approvalRuleItr = flowresult.getEntityList();
                        if (approvalRuleItr != null && approvalRuleItr.size() > 0) {
                            for (Object[] rowObj : approvalRuleItr) {
                                String rule = "";
                                if (rowObj[2] != null) {
                                    rule = rowObj[2].toString();
                                }
                                int appliedUpon = Integer.parseInt(rowObj[5].toString());
                                rule = rule.replaceAll("[$$]+", String.valueOf(invoice.getInvoiceamountinbase()));
                                if (StringUtil.isNullOrEmpty(rule) || (!StringUtil.isNullOrEmpty(rule) && ( appliedUpon != Constants.Specific_Products && appliedUpon != Constants.Specific_Products_Discount && appliedUpon != Constants.Specific_Products_Category) && Boolean.parseBoolean(engine.eval(rule).toString()))) {
                                    nextApprovalLevel = invoice.getApprovestatuslevel() + 1;
                              }
                            }
                        }
                        obj.put("isFinalLevelApproval", nextApprovalLevel == Constants.APPROVED_STATUS_LEVEL ? true : false);
                    }
                 
                if (!invoiceTemplateMap.containsKey(invid)) {
                    obj.put("templateid", "");
                    obj.put("templatename", "");
                } else {
                    obj.put("templateid", invoiceTemplateMap.get(invid).getTempid());
                    obj.put("templatename", invoiceTemplateMap.get(invid).getTempname());
                }
               
                obj.put("archieve", 0);
                obj.put("cashtransaction", invoice.isCashtransaction());
                boolean includeprotax = false;
                String taxname="";
                List<String> productTaxList = new ArrayList<>();
                double linelevelTermTaxAmount = 0;
                double rowTaxAmt = 0d, rowDiscountAmt = 0d, rowOtherTermNonTaxableAmount = 0d;
                for (InvoiceDetail invoiceDetail : invoiceDetails) {
                    if (isLineLevelTermFlag) {
                        // Append OtherTermNonTaxableAmount for rach row.
                        rowOtherTermNonTaxableAmount += invoiceDetail.getOtherTermNonTaxableAmount();
                        rowTaxAmt += invoiceDetail.getRowTermAmount();
                        linelevelTermTaxAmount+= invoiceDetail.getRowTermTaxAmount();
                    } else if (invoiceDetail.getTax() != null) {
                        includeprotax = true;
                        rowTaxAmt += invoiceDetail.getRowTaxAmount();
                        linelevelTermTaxAmount+= invoiceDetail.getRowTermTaxAmount();
                        productTaxList.add(invoiceDetail.getTax().getID());
                        taxname += invoiceDetail.getTax().getName() + ", ";
                    }

                    if (invoiceDetail.getDiscount() != null) {
                        if (invoiceDetail.getInvoice().isPartialinv()) {
                            rowDiscountAmt += authHandler.round(invoiceDetail.getPartialDiscount(), companyid);
                        } else {
                            rowDiscountAmt += invoiceDetail.getDiscount().getDiscountValue();
                        }
                    }
                }

                obj.put("discount", rowDiscountAmt);

                double termAmount = 0d;
                double termamountinBase =0d;
                double termTaxAmount = 0d;
                if (invoiceTermsmap.containsKey(invid)) {
                    List invoiceTermMapList = kwlCommonTablesDAOObj.getSummationOfTermAmtAndTermTaxAmt(Constants.invoicetermsmap, invid);
                    if(invoiceTermMapList != null && !invoiceTermMapList.isEmpty()){
                        Iterator termItr = invoiceTermMapList.iterator();
                        while (termItr.hasNext()) {
                            Object[] termObj = (Object[]) termItr.next();
                            /* 
                            * [0] : Sum of termamount  
                            * [1] : Sum of termamountinbase 
                            * [2] : Sum of termTaxamount 
                            * [3] : Sum of termTaxamountinbase 
                            * [4] : Sum of termAmountExcludingTax 
                            * [5] : Sum of termAmountExcludingTaxInBase
                            */ 
                            if (invoice.isGstIncluded()) {
                                if(termObj[4] != null && termObj[5] != null){
                                    termAmount += authHandler.round((Double) termObj[4],companyid);
                                    termamountinBase += authHandler.round((Double) termObj[5],companyid);
                                }
                            } else {
                                if(termObj[0] != null && termObj[1] != null){
                                    termAmount += authHandler.round((Double) termObj[0],companyid);
                                    termamountinBase += authHandler.round((Double) termObj[1],companyid);
                                }
                            }
                            if(termObj[2] != null){
                                termTaxAmount += authHandler.round((Double) termObj[2],companyid);
                            }
                        }
                    }
                }

                if(invoice.isPartialinv() && rowDiscountAmt != 0){
                    double rowDiscountAmtInBase=0.0d; 
                    KwlReturnObject baseAmt = accCurrencyDAOobj.getCurrencyToBaseAmountAccordingToCurrencyToBaseExchangeRate(requestParams, rowDiscountAmt, currencyid, invoiceCreationDate, externalCurrencyRate);
                    rowDiscountAmtInBase = (Double) baseAmt.getEntityList().get(0);
                    obj.put("discountinbase",  rowDiscountAmtInBase);
                }
                
                taxAmt += rowTaxAmt + termTaxAmount;    
                obj.put("termamount", termAmount);
                obj.put("termamountinBase", termamountinBase);    
                obj.put("taxamount", taxAmt);
                if(includeprotax){
                 obj.put("taxname", taxname.substring(0, taxname.length() > 1 ? taxname.length() - 2 : taxname.length()));   
                }else{
                 obj.put("taxname", invoiceTaxMap.containsKey(invid) ? invoiceTaxMap.get(invid).getName() : "");   
                }
                if(invoice.isGstIncluded()){
                    subtotal = productTotalAmount - totalDiscount-rowTaxAmt;                    
                }else{
                    subtotal = productTotalAmount - totalDiscount;
                }
                obj.put("amountBeforeTax", (authHandler.formattingDecimalForAmount((subtotal + termAmount), companyid)));    //For Sales Invoice report
                obj.put("subtotal", subtotal);
//                obj.put("taxamount", (invoice.getTaxamount() + rowTaxAmt));
                
                if(isLineLevelTermFlag){
                    // If LineLevelTerm is applicable then add the value in JSON Object.
                    obj.put(Constants.OtherTermNonTaxableAmount, rowOtherTermNonTaxableAmount);
                }
                
                
//                if (invoice.isIsOpeningBalenceInvoice()) { //For opening Invoices Journal Entry do not creat So invoice creation date is passed as aparameter instead of Journal Entry Entry Date.
//                    obj.put("taxamountinbase", accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, taxAmt, invoice.getCurrency().getCurrencyID(), invoice.getCreationDate(), invoice.getExternalCurrencyRate()).getEntityList().get(0));
//                } else {
//                    obj.put("taxamountinbase", accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, taxAmt, invoice.getCurrency().getCurrencyID(), invoice.getJournalEntry().getEntryDate(), invoice.getExternalCurrencyRate()).getEntityList().get(0));
//                }
                KwlReturnObject taxAmtBase = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, taxAmt, fromcurrencyid, invoiceCreationDate, externalCurrencyRate);
                double taxamountinBase = authHandler.round((Double) taxAmtBase.getEntityList().get(0), companyid);
                obj.put("taxamountinbase", taxamountinBase);
                
                if (paramJobj.optBoolean(Constants.isdefaultHeaderMap, false) == true) {
                        obj.put("includeprotax", includeprotax==true?"true":"false");
                        obj.put("includeprotaxValue", includeprotax == true ? "Yes" : "No");
                    } else {
                        obj.put("includeprotax", includeprotax);
                    }
                if (invoice.getModifiedby() != null) {
                    obj.put("lasteditedby", invoice.getModifiedby().getFirstName() + " " + invoice.getModifiedby().getLastName());
                }

                /*
                 * For Product search, add Products details from Invoice details
                 */
                if (isProduct && invoice.isNormalInvoice()) {
                    String idvString = isProduct ? oj[4].toString() : ""; //as in list invoiedetail id comes 4th
                    KwlReturnObject objItrID = accountingHandlerDAOobj.getObject(InvoiceDetail.class.getName(), idvString);
                    InvoiceDetail idvObj = (InvoiceDetail) objItrID.getEntityList().get(0);

                    if (idvObj != null) {
                        obj.put("rowproductname", idvObj.getInventory().getProduct().getName());
                        obj.put("rowquantity", idvObj.getInventory().getQuantity());
                        obj.put("rowrate", idvObj.getRate());

                        Discount disc = idvObj.getDiscount();
                        if (disc != null && disc.isInPercent()) {
                            obj.put("rowprdiscount", disc.getDiscount()); //product discount in percent
                        } else {
                            obj.put("rowprdiscount", 0);
                        }
                        double rowTaxPercent = 0;
                        if (idvObj.getTax() != null) {
//                            KwlReturnObject perresult = accTaxObj.getTaxPercent(companyid, invoice.getJournalEntry().getEntryDate(), idvObj.getTax().getID());
                            KwlReturnObject perresult = accTaxObj.getTaxPercent(companyid, invoice.getCreationDate(), idvObj.getTax().getID());
                            rowTaxPercent = (Double) perresult.getEntityList().get(0);
                        }
                        obj.put("rowprtaxpercent", rowTaxPercent);

                    }
                }

                if (invoice.isCashtransaction()) {
                    obj.put("amountdue", 0);
                    obj.put(InvoiceConstants.amountdueinbase, 0);
                    obj.put("incash", true);
                } else {
                    //                    obj.put("amountdueinbase", CompanyHandler.getCurrencyToBaseAmount(session,request,amount - ramount,currencyid,je.getEntryDate()));  //amount left after apllying receipt and CN
                    if (!booleanAged){//in aged case amountdue in base already is coming so no need to convert seperately
                        if (isopeningBalanceInvoice && invoice.isConversionRateFromCurrencyToBase()) {// if invoice is opening balance invoice and Conversion rate is taken from user is Currency to base then following method will be called.
                            bAmt = accCurrencyDAOobj.getCurrencyToBaseAmountAccordingToCurrencyToBaseExchangeRate(requestParams, amountdue, currencyid, invoiceCreationDate, externalCurrencyRate);
                            amountdueinbase = (Double) bAmt.getEntityList().get(0);
                        } else if (amountdue != 0) {
                            if (externalCurrencyRate != 0) {
                                amountdueinbase = amountdue / externalCurrencyRate;
                            } else if (currencyToBaseRate != 0) {
                                amountdueinbase = amountdue / currencyToBaseRate;
                            }
                        }
                    }
                  
                    obj.put(InvoiceConstants.amountdueinbase, authHandler.round(amountdueinbase, companyid));
                    obj.put("amountdue", authHandler.round(amountdue, companyid));
                    /*
                     * To calulate exchange rate
                     */
                    obj.put("exchangeratefortransaction", (amountdueinbase <= 0 && amountdue <= 0) ? 0 : (amountdueinbase / amountdue));
                    if (booleanAged) {
                        Date dueDate = null;
                        if (!StringUtil.isNullOrEmpty(df.format(invoice.getDueDate()))) {
                            dueDate = df.parse(df.format(invoice.getDueDate()));
                        }
                        if (isSOA && bAmt != null) {
                            amountdue = authHandler.round((Double) bAmt.getEntityList().get(0), companyid);
                        }
                        if (datefilter == 0 || datefilter == Constants.agedDueDate0to30Filter) {
                            dueDate = df.parse(df.format(invoice.getDueDate()));
                        } else {
                            dueDate = df.parse(df.format(invoiceCreationDate));
                        }

                        if (dueDate.after(oneDayBeforeCal1Date)) {
                            if (dueDate.equals(cal1Date) && (datefilter == Constants.agedDueDate0to30Filter || datefilter == Constants.agedInvoiceDate0to30Filter)) {
                                amountdue2 = authHandler.round(amountdue, companyid);  // 0-30 Days
                            } else {
                                amountdue1 = authHandler.round(amountdue, companyid); // Current
                            }
                        } else if ((cal2Date.before(dueDate) || cal2Date.equals(dueDate)) && cal1Date.after(dueDate)) { // 1-30
                            amountdue2 = authHandler.round(amountdue, companyid);
                        } else if ((cal3Date.before(dueDate) || cal3Date.equals(dueDate)) && cal2Date.after(dueDate)) { // 31-60
                            amountdue3 = authHandler.round(amountdue, companyid);
                        } else if ((cal4Date.before(dueDate) || cal4Date.equals(dueDate)) && cal3Date.after(dueDate)) { // 61-90
                            amountdue4 = authHandler.round(amountdue, companyid);
                        } else if ((cal5Date.before(dueDate) || cal5Date.equals(dueDate)) && cal4Date.after(dueDate)) { // 91-120
                            amountdue5 = authHandler.round(amountdue, companyid);
                        } else if ((cal6Date.before(dueDate) || cal6Date.equals(dueDate)) && cal5Date.after(dueDate)) { // 121-150
                            amountdue6 = authHandler.round(amountdue, companyid);
                        } else if ((cal7Date.before(dueDate) || cal7Date.equals(dueDate)) && cal6Date.after(dueDate)) { // 151-180
                            amountdue7 = authHandler.round(amountdue, companyid);
                        } else if ((cal8Date.before(dueDate) || cal8Date.equals(dueDate)) && cal7Date.after(dueDate)) { // 181-210
                            amountdue8 = authHandler.round(amountdue, companyid);
                        } else if ((cal9Date.before(dueDate) || cal9Date.equals(dueDate)) && cal8Date.after(dueDate)) { // 211-240
                            amountdue9 = authHandler.round(amountdue, companyid);
                        } else if ((cal10Date.before(dueDate) || cal10Date.equals(dueDate)) && cal9Date.after(dueDate)) { // 241-270
                            amountdue10 = authHandler.round(amountdue, companyid);
                        } else {                                                                                          // > 270           
                            amountdue11 = authHandler.round(amountdue, companyid);
                        }
                        
                        switch(noOfInterval){
                            case 2:
                                amountdue3 += amountdue4 + amountdue5 + amountdue6 + amountdue7 + amountdue8 + amountdue9 + amountdue10 + amountdue11;
                                amountdue4 = amountdue5 = amountdue6 = amountdue7 = amountdue8 = amountdue9 = amountdue10 = amountdue11 = 0;
                                break;
                            case 3:
                                amountdue4 += amountdue5 + amountdue6 + amountdue7 + amountdue8 + amountdue9 + amountdue10 + amountdue11;
                                amountdue5 = amountdue6 = amountdue7 = amountdue8 = amountdue9 = amountdue10 = amountdue11 = 0;
                                break;
                            case 4:
                                amountdue5 += amountdue6 + amountdue7 + amountdue8 + amountdue9 + amountdue10 + amountdue11;
                                amountdue6 = amountdue7 = amountdue8 = amountdue9 = amountdue10 = amountdue11 = 0;
                                break;
                            case 5:
                                amountdue6 += amountdue7 + amountdue8 + amountdue9 + amountdue10 + amountdue11;
                                amountdue7 = amountdue8 = amountdue9 = amountdue10 = amountdue11 = 0;
                                break;
                            case 6:
                                amountdue7 += amountdue8 + amountdue9 + amountdue10 + amountdue11;
                                amountdue8 = amountdue9 = amountdue10 = amountdue11 = 0;
                                break;
                            case 7:
                                amountdue8 += amountdue9 + amountdue10 + amountdue11;
                                amountdue9 = amountdue10 = amountdue11 = 0;
                                break;
                            case 8:
                                amountdue9 += amountdue10 + amountdue11;
                                amountdue10 = amountdue11 = 0;
                                break;
                            case 9:
                                amountdue10 += amountdue11;
                                amountdue11 = 0;
                                break;
                        }
                        
                    }

                    // obj.put("amountdue", amountdue);
                }
                    obj.put("deductDiscount", discountDeduct);
                    obj.put("amountduenonnegative", (amountdue <= 0) ? 0 : authHandler.round(amountdue, companyid));
                    obj.put("amount", authHandler.round(invoiceOriginalAmount, companyid));   //actual invoice amount
//                    obj.put("amountbeforegst", authHandler.round(invoiceOriginalAmount - taxAmt - termAmount, 2));   // Amount before both kind of tax row level or transaction level
//                    obj.put("amountbeforegst", authHandler.round(invoiceOriginalAmount - taxAmt - termAmount, 2));   
                    obj.put("amountbeforegst", invoice.getExcludingGstAmount());
//                obj.put("amountbeforegstinbase", invoice.getExcludingGstAmountInBase());
                                        obj.put("amountinWords",invoiceinfo.getCurrency().getName() + " " + EnglishNumberToWordsOjb.convert(invoiceOriginalAmount, invoiceinfo.getCurrency(),countryLanguageId) + " Only.");
                if (!invoiceReport) {
                    obj.put("amountdue1", amountdue1);
                    obj.put("amountdue2", amountdue2);
                    obj.put("amountdue3", amountdue3);
                    obj.put("amountdue4", amountdue4);
                    obj.put("amountdue5", amountdue5);
                    obj.put("amountdue6", amountdue6);
                    obj.put("amountdue7", amountdue7);
                    obj.put("amountdue8", amountdue8);
                    obj.put("amountdue9", amountdue9);
                    obj.put("amountdue10", amountdue10);
                    obj.put("amountdue11", amountdue11);
                    obj.put("type", Constants.CUSTOMER_INVOICE);
                }

                obj.put("amountinbase", authHandler.round(amountinbase, companyid));
                
                    if (paramJobj.optBoolean(Constants.isdefaultHeaderMap) && paramJobj.has("displayUnitPriceAndAmountInSalesDocument") && !paramJobj.optBoolean("displayUnitPriceAndAmountInSalesDocument")) {
                        obj.put("amountinbase", CustomDesignerConstants.UNIT_PRICE_AND_AMOUNT_AS_STARS);// Total Amount 
                        obj.put("subtotal", CustomDesignerConstants.UNIT_PRICE_AND_AMOUNT_AS_STARS);
                        obj.put("amountBeforeTax", CustomDesignerConstants.UNIT_PRICE_AND_AMOUNT_AS_STARS);
                    }
                    
                try {
                    obj.put("creditDays", invoice.getTermid().getTermdays());
                } catch (Exception ex) {
                    obj.put("creditDays", 0);
                }
                RepeatedInvoices repeatedInvoice = invoice.getRepeateInvoice();
                obj.put("isRepeated", repeatedInvoice == null ? false : true);
                obj.put("isExpander", false);
                if (repeatedInvoice != null) {
                    obj.put("repeateid", repeatedInvoice.getId());
                    obj.put("interval", repeatedInvoice.getIntervalUnit());
                    obj.put("intervalType", repeatedInvoice.getIntervalType());
                    SimpleDateFormat sdf = new SimpleDateFormat("MMMM d, yyyy hh:mm:ss aa");
                    //                    sdf.setTimeZone(TimeZone.getTimeZone("GMT"+sessionHandlerImpl.getTimeZoneDifference(request)));
                    obj.put("NoOfpost", repeatedInvoice.getNoOfInvoicespost());
                    obj.put("NoOfRemainpost", repeatedInvoice.getNoOfRemainInvoicespost());
                    obj.put("startDate", sdf.format(repeatedInvoice.getStartDate()));
                    obj.put("nextDate", sdf.format(repeatedInvoice.getNextDate()));
                    obj.put("isactivate", repeatedInvoice.isIsActivate());
                    obj.put("ispendingapproval", repeatedInvoice.isIspendingapproval());
                    obj.put("approver", repeatedInvoice.getApprover());
                    obj.put("expireDate", repeatedInvoice.getExpireDate() == null ? "" : sdf.format(repeatedInvoice.getExpireDate()));
                    obj.put("advancedays", repeatedInvoice.getAdvanceNoofdays() == 0 ? 0 : repeatedInvoice.getAdvanceNoofdays());
                    obj.put("advanceDate", repeatedInvoice.getInvoiceAdvanceCreationDate() == null ? "" : repeatedInvoice.getInvoiceAdvanceCreationDate());
                    requestParams.put("parentInvoiceId", invoice.getID());

                    obj.put("isFromSalesInvoiceRecurringTab", true);//isFromSalesInvoiceRecurringTab - used at the time of editing rule to identify uniquely that this is recurring invoice tab and add "allow editng of recurred documetns fieldset" on edit form
                    obj.put("allowEditingRecurredDocuments", repeatedInvoice.isAllowToEditRecurredDocument());
                    obj.put("editedRecurredDocumentsApprover", !StringUtil.isNullObject(repeatedInvoice.getApproverOfEditedrecurredInvoice()) ? repeatedInvoice.getApproverOfEditedrecurredInvoice().getUserID() : "");

                    KwlReturnObject details = accInvoiceDAOobj.getRepeateInvoicesDetails(requestParams);
                    List detailsList = details.getEntityList();
                    obj.put("childCount", detailsList.size());
                } else {
                    //this else block is used to send following flag to identify recurred document for edit and approval.
                    Invoice parentInvObj = invoice.getParentInvoice();
                    if (parentInvObj != null) {
                        RepeatedInvoices parentRepeatedInvoice = parentInvObj.getRepeateInvoice();
                        if (parentRepeatedInvoice != null) {
                            obj.put("allowEditingRecurredDocuments", parentRepeatedInvoice.isAllowToEditRecurredDocument());
                            obj.put("editedRecurredDocumentsApprover", !StringUtil.isNullObject(parentRepeatedInvoice.getApproverOfEditedrecurredInvoice()) ? parentRepeatedInvoice.getApproverOfEditedrecurredInvoice().getUserID() : "");
                        }
                    }
                }

                
                if (!invoice.isIsOpeningBalenceInvoice()) {
                    Map<String, Object> variableMap = new HashMap<String, Object>();
                    HashMap<String, Object> invDetailRequestParams = new HashMap<String, Object>();
                    ArrayList Detailfilter_names = new ArrayList(), Detailfilter_params = new ArrayList();
                    Detailfilter_names.add(Constants.companyKey);
                    Detailfilter_params.add(invoice.getCompany().getCompanyID());
                    Detailfilter_names.add("journalentryId");
                    Detailfilter_params.add(invoice.getJournalEntry().getID());
                    Detailfilter_names.add("moduleId");
                    int moduleId = isFixedAsset ? Constants.Acc_FixedAssets_DisposalInvoice_ModuleId : isConsignment ? Constants.Acc_ConsignmentInvoice_ModuleId : isLeaseFixedAsset ? Constants.LEASE_INVOICE_MODULEID : Constants.Acc_Invoice_ModuleId;
                    Detailfilter_params.add(moduleId + "");
                    invDetailRequestParams.put(Constants.filterNamesKey, Detailfilter_names);
                    invDetailRequestParams.put(Constants.filterParamsKey, Detailfilter_params);
                    KwlReturnObject idcustresult = accJournalEntryobj.getJournalEntryCustomDataNew(invDetailRequestParams);
                    if (idcustresult.getEntityList().size() > 0) {
                        String journalentryId = idcustresult.getEntityList().get(0).toString();
                        KwlReturnObject jeCustomResult = accountingHandlerDAOobj.getObject(AccJECustomData.class.getName(), journalentryId);
                        AccJECustomData jeCustom = (AccJECustomData) jeCustomResult.getEntityList().get(0);
                        AccountingManager.setCustomColumnValues(jeCustom, FieldMap, replaceFieldMap, variableMap);
                        boolean isExport = StringUtil.isNullOrEmpty(paramJobj.optString(Constants.isExport)) ? false : Boolean.parseBoolean(paramJobj.get(Constants.isExport).toString());
                        if (!isExport) {
                            isExport = StringUtil.isNullOrEmpty(paramJobj.optString("isAged")) ? false : Boolean.parseBoolean(paramJobj.get("isAged").toString());
                        }
                        JSONObject params = new JSONObject();
                        params.put(Constants.companyKey, companyid);
                        params.put(Constants.isExport, isExport);
                        params.put("userdf", userdf);
                        params.put(Constants.isdefaultHeaderMap,paramJobj.optBoolean(Constants.isdefaultHeaderMap, false));
                        
                        if (paramJobj.has(Constants.browsertz) && !StringUtil.isNullOrEmpty(paramJobj.getString(Constants.browsertz))) {
                            params.put(Constants.browsertz, paramJobj.getString(Constants.browsertz));
                        }

                        fieldDataManagercntrl.addCustomData(variableMap, customFieldMap, customDateFieldMap, obj, params);
                    }
                    
                    if (booleanAged && invoiceDetails != null && !invoiceDetails.isEmpty()) {// In aged Report we are showing line level item dimension at global level by comma seperated. below code is for that
                        Map<String, List<Object>> linelabelDataMap = new LinkedHashMap();
                        for (InvoiceDetail row : invoiceDetails) {
                            JSONObject customObject = new JSONObject();
                            Map<String, Object> variableMapRows = new HashMap<String, Object>();
                            HashMap<String, Object> invDetailsRequestParams = new HashMap<String, Object>();
                            Detailfilter_names = new ArrayList();
                            Detailfilter_params = new ArrayList();
                            Detailfilter_names.add(Constants.Acc_JEDetail_recdetailId);
                            Detailfilter_params.add(row.getID());
                            invDetailsRequestParams.put(Constants.filterNamesKey, Detailfilter_names);
                            invDetailsRequestParams.put(Constants.filterParamsKey, Detailfilter_params);
                            KwlReturnObject idcustdetailresult = accInvoiceDAOobj.getInvoiceDetailsCustomData(invDetailsRequestParams);
                            if (idcustdetailresult.getEntityList().size() > 0) {
                                AccJEDetailCustomData jeDetailCustom = (AccJEDetailCustomData) idcustdetailresult.getEntityList().get(0);
                                AccountingManager.setCustomColumnValues(jeDetailCustom, fieldMapRows, replaceFieldMapRows, variableMapRows);
                                if (jeDetailCustom != null) {
                                    JSONObject params = new JSONObject();
                                    params.put(Constants.isExport, false);
                                    params.put(Constants.isForReport, true);
                                    params.put(Constants.isdefaultHeaderMap, paramJobj.optBoolean(Constants.isdefaultHeaderMap, false));
                                    if (!getlineItemDetailsflag) {
                                        fieldDataManagercntrl.getLineLevelCustomData(variableMapRows, customFieldMapRows, customDateFieldMapRows, customObject, params);
                                    } else {
                                        fieldDataManagercntrl.getLineLevelCustomDataWithKey(variableMapRows, customFieldMapRows, customDateFieldMapRows, customObject, params);
                                    }
                                    if (customObject.length() > 0) {
                                        Iterator<String> keys = customObject.keys();
                                        while (keys.hasNext()) {
                                            String key = (String) keys.next();
                                            if (!key.equals("allCustomFieldKeyValuePairString")) {// no need to go for key allCustomFieldKeyValuePairString
                                                if (linelabelDataMap.containsKey(key)) {
                                                    if (!linelabelDataMap.get(key).contains(customObject.get(key))) {
                                                        linelabelDataMap.get(key).add(customObject.get(key));
                                                    }
                                                } else {
                                                    List<Object> dataList = new ArrayList<>();
                                                    dataList.add(customObject.get(key));
                                                    linelabelDataMap.put(key, dataList);
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        for (Map.Entry<String, List<Object>> entry : linelabelDataMap.entrySet()) {
                            String commaSeperatedValue = "";
                            String key = entry.getKey();
                            List<Object> data = entry.getValue();
                           for (Object dataObj : data) {
                               if (dataObj != null) {
                                   if (StringUtil.isNullOrEmpty(commaSeperatedValue)) {
                                       commaSeperatedValue = dataObj.toString();
                                    } else {
                                        commaSeperatedValue += "," + dataObj.toString();
                                   }
                               }
                           }
                           obj.put(key, commaSeperatedValue);
                       } 
                    }
                }

                if (invoice.isIsOpeningBalenceInvoice()) {
                    Map<String, Object> variableMap = new HashMap<String, Object>();
                    HashMap<String, Object> invDetailRequestParams = new HashMap<String, Object>();
                    ArrayList Detailfilter_names = new ArrayList(), Detailfilter_params = new ArrayList();
                    Detailfilter_names.add(Constants.companyKey);
                    Detailfilter_params.add(invoice.getCompany().getCompanyID());
                    Detailfilter_names.add("OpeningBalanceInvoiceId");
                    Detailfilter_params.add(invoice.getID());
                    Detailfilter_names.add("moduleId");
                    Detailfilter_params.add(Constants.Acc_Invoice_ModuleId + "");
                    invDetailRequestParams.put(Constants.filterNamesKey, Detailfilter_names);
                    invDetailRequestParams.put(Constants.filterParamsKey, Detailfilter_params);
                    KwlReturnObject idcustresult = accJournalEntryobj.getOpeningBalanceInvoiceCustomData(invDetailRequestParams);
                    if (idcustresult.getEntityList().size() > 0) {
                        OpeningBalanceInvoiceCustomData openingBalanceInvoiceCustomData = (OpeningBalanceInvoiceCustomData) idcustresult.getEntityList().get(0);
                        AccountingManager.setCustomColumnValues(openingBalanceInvoiceCustomData, FieldMap, replaceFieldMap, variableMap);
                        for (Map.Entry<String, Object> varEntry : variableMap.entrySet()) {
                            String coldata = varEntry.getValue().toString();
                            if (customFieldMap.containsKey(varEntry.getKey())) {
                                FieldComboData fieldComboData = (FieldComboData) kwlCommonTablesDAOObj.getClassObject(FieldComboData.class.getName(), coldata);
                                if (fieldComboData != null) {
                                    obj.put(varEntry.getKey(), fieldComboData.getValue() != null ? fieldComboData.getValue() : "");
                                }
                            } else if (customDateFieldMap.containsKey(varEntry.getKey())) {
                                DateFormat sdf = new SimpleDateFormat(Constants.yyyyMMdd);
                                obj.put(varEntry.getKey(), coldata != null ? coldata : "");
                            } else {
                                if (!StringUtil.isNullOrEmpty(coldata)) {
                                    String[] coldataArray = coldata.split(",");
                                    String Coldata = "";
                                    for (int countArray = 0; countArray < coldataArray.length; countArray++) {
                                        Coldata += "'" + coldataArray[countArray] + "',";
                                    }
                                    Coldata = Coldata.substring(0, Coldata.length() - 1);
                                    String ColValue = accAccountDAOobj.getfieldcombodatabyids(Coldata);
                                    obj.put(varEntry.getKey(), coldata);
                                    obj.put(varEntry.getKey() + "_Values", ColValue);
                                }
                            }
                        }
                    }
                }
                if (isSalesCommissionStmt && !invoice.isIsOpeningBalenceInvoice()) {
                    double remainingAmount = obj.getDouble("amountdue");
                    double invoiceAmount = obj.getDouble("amount");
                    double paidAmount = invoiceAmount - remainingAmount;
                    double difference = amountWD - paidAmount;
                    if (paidAmount == 0) {
                        obj.put("amountDueStatus", "UnPaid");
                        obj.put("amountwithouttax", difference);
                        double commissionamount = difference * commission / 100;
                        obj.put("commission", commissionamount);

//                        bAmt = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, difference, currencyid, je.getEntryDate(), je.getExternalCurrencyRate());
                        bAmt = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, difference, currencyid, invoiceCreationDate, je.getExternalCurrencyRate());
                        double differenceinbase = (Double) bAmt.getEntityList().get(0);
                        obj.put("amountwithouttaxinbase", authHandler.round(differenceinbase, companyid));

//                        bAmt = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, commissionamount, currencyid, je.getEntryDate(), je.getExternalCurrencyRate());
                        bAmt = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, commissionamount, currencyid, invoiceCreationDate, je.getExternalCurrencyRate());
                        commissionamount = (Double) bAmt.getEntityList().get(0);
                        obj.put("commissioninbase", commissionamount);

                    } else if (difference > 0) {
                        JSONObject ab1 = new JSONObject(obj.toString());
                        ab1.put("amountDueStatus", "UnPaid");
                        ab1.put("amountwithouttax", difference);
                        double commissionamount = difference * commission / 100;
                        ab1.put("commission", commissionamount);

//                        bAmt = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, difference, currencyid, je.getEntryDate(), je.getExternalCurrencyRate());
                        bAmt = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, difference, currencyid, invoiceCreationDate, je.getExternalCurrencyRate());
                        double differenceinbase = (Double) bAmt.getEntityList().get(0);
                        ab1.put("amountwithouttaxinbase", authHandler.round(differenceinbase, companyid));

//                        bAmt = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, commissionamount, currencyid, je.getEntryDate(), je.getExternalCurrencyRate());
                        bAmt = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, commissionamount, currencyid, invoiceCreationDate, je.getExternalCurrencyRate());
                        commissionamount = (Double) bAmt.getEntityList().get(0);
                        ab1.put("commissioninbase", commissionamount);
                        jArr.put(ab1);
                        obj.put("amountDueStatus", "Paid");
                        obj.put("amountwithouttax", paidAmount);
                        obj.put("commission", (paidAmount * commission / 100));
                    } else {
                        obj.put("amountDueStatus", "Paid");
                        obj.put("amountwithouttax", amountWD);
                        double commissionamount = amountWD * commission / 100;
                        obj.put("commission", commissionamount);

//                        bAmt = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, amountWD, currencyid, je.getEntryDate(), je.getExternalCurrencyRate());
                        bAmt = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, amountWD, currencyid, invoiceCreationDate, je.getExternalCurrencyRate());
                        double amountWDinbase = (Double) bAmt.getEntityList().get(0);
                        obj.put("amountwithouttaxinbase", authHandler.round(amountWDinbase, companyid));

//                        bAmt = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, commissionamount, currencyid, je.getEntryDate(), je.getExternalCurrencyRate());
                        bAmt = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, commissionamount, currencyid, invoiceCreationDate, je.getExternalCurrencyRate());
                        commissionamount = (Double) bAmt.getEntityList().get(0);
                        obj.put("commissioninbase", commissionamount);
                    }
                }                
                //boolean isForTemplate = (paramJobj.has("isForTemplate") && Boolean.parseBoolean(paramJobj.get("isForTemplate").toString())) ? true : false;
                if (Constants.indian_country_id == countryid) {
                    List<SalesInvoiceExciseDetailsMap> ed = null;
                    extraCompanyPreferences = extraprefresult != null ? (ExtraCompanyPreferences) extraprefresult.getEntityList().get(0) : null;
                    if (!isForTemplate) {
                        if (extraCompanyPreferences.isExciseApplicable()) {
                            KwlReturnObject exciseDetails = accInvoiceDAOobj.getExciseDetails(invoice.getID());
//                                if (!exciseDetails.getEntityList().isEmpty()){
                            ed = exciseDetails.getEntityList();
//                                }
                        }
                        if (extraCompanyPreferences.isExciseApplicable() && ed.size() > 0) {
                            if (isFixedAsset) {
                                obj.put("assetExciseid", ed.get(0).getId());
                            } else {
                                obj.put("exciseDetailid", ed.get(0).getId());
                            }
                            obj.put("suppliers", ed.get(0).getSupplier());
                            obj.put("supplierTINSalesTAXNo", ed.get(0).getSupplierTINSalesTaxNo());
                            obj.put("supplierExciseRegnNo", ed.get(0).getSupplierExciseRegnNo());
                            obj.put("cstnumber", ed.get(0).getCstnumber());
                            obj.put("supplierRange", ed.get(0).getSupplierRange());
                            obj.put("supplierCommissionerate", ed.get(0).getSupplierCommissioneRate());
                            obj.put("supplierAddress", ed.get(0).getSupplierAddress());
                            obj.put("supplierImporterExporterCode", ed.get(0).getSupplierImporterExporterCode());
                            obj.put("supplierDivision", ed.get(0).getSupplierDivision());
                            obj.put("manufacturername", ed.get(0).getManufacturerName());
                            obj.put("manufacturerExciseRegnNo", ed.get(0).getManufacturerExciseregnNo());
                            obj.put("manufacturerRange", ed.get(0).getManufacturerRange());
                            obj.put("manufacturerCommissionerate", ed.get(0).getManufacturerCommissionerate());
                            obj.put("manufacturerDivision", ed.get(0).getManufacturerDivision());
                            obj.put("manufacturerAddress", ed.get(0).getManufacturerAddress());
                            obj.put("manufacturerImporterExporterCode", ed.get(0).getManufacturerImporterexporterCode());
                            obj.put("InvoicenoManuFacture", ed.get(0).getInvoicenoManufacture());
                            obj.put("InvoiceDateManuFacture", ed.get(0).getInvoiceDateManufacture());
                            obj.put("supplierState", ed.get(0).getSupplierstate());
                            obj.put("registrationType", ed.get(0).getRegistrationType());
                            obj.put("UnitName", ed.get(0).getUnitname());
                            obj.put("ECCNo", ed.get(0).getECCNo());
                            obj.put("isExciseInvoiceWithTemplate", (!ed.get(0).getRegistrationType().equals("") || !ed.get(0).getUnitname().equals("") || !ed.get(0).getECCNo().equals("")) ? true : false);
                        }
                    } else {
                        if (company.getCountry() != null && Integer.parseInt(company.getCountry().getID()) == Constants.indian_country_id && extraCompanyPreferences.isExciseApplicable()) {
                            obj.put("suppliers", customer.getName());
                            obj.put("supplierCommissionerate", customer.getCommissionerate() != null ? customer.getCommissionerate() : "");
                            obj.put("supplierDivision", customer.getDivision() != null ? customer.getDivision() : "");
                            obj.put("supplierRange", customer.getRangecode() != null ? customer.getRangecode() : "");
                            obj.put("supplierImporterExporterCode", customer.getIECNo() != null ? customer.getIECNo() : "");
                            obj.put("cstnumber", customer.getCSTTINnumber() != null ? customer.getCSTTINnumber() : "");
                            obj.put("supplierTINSalesTAXNo", customer.getVATTINnumber() != null ? customer.getVATTINnumber() : "");
                            obj.put("supplierExciseRegnNo", customer.getECCnumber() != null ? customer.getECCnumber() : "");

                            HashMap<String, Object> addrRequestParams = new HashMap<String, Object>();
                            addrRequestParams.put(Constants.customerid, customer.getID());
                            addrRequestParams.put(Constants.companyKey, companyid);
                            addrRequestParams.put("isBillingAddress", true);//only billing address   
                            KwlReturnObject addressResult = accountingHandlerDAOobj.getCustomerAddressDetails(addrRequestParams);
                            if (!addressResult.getEntityList().isEmpty()) {
                                List<CustomerAddressDetails> casList = addressResult.getEntityList();
                                if (casList.size() > 0) {
                                    CustomerAddressDetails vas = (CustomerAddressDetails) casList.get(0);
                                    String fullAddress = "";
                                    if (!StringUtil.isNullOrEmpty(vas.getAddress())) {
                                        fullAddress += vas.getAddress() + ", ";
                                    }
                                    if (!StringUtil.isNullOrEmpty(vas.getCity())) {
                                        fullAddress += vas.getCity() + ", ";
                                    }
                                    if (!StringUtil.isNullOrEmpty(vas.getState())) {
                                        fullAddress += vas.getState() + ", ";
                                    }
                                    if (!StringUtil.isNullOrEmpty(vas.getCountry())) {
                                        fullAddress += vas.getCountry() + ", ";
                                    }
                                    if (!StringUtil.isNullOrEmpty(fullAddress)) {
                                        fullAddress = fullAddress.substring(0, fullAddress.length() - 2);
                                    }
                                    obj.put("supplierAddress", fullAddress);
                                    obj.put("supplierState", vas.getState() != null ? vas.getState() : "");
                                }
                            }
                        }
                    }

                }
                    if (!(ignoreZero && authHandler.round(amountdue, companyid) <= 0)) {
                        jArr.put(obj);
                    }
                }

        }
            if (paramJobj.optString("filename", null) != null) {
                if (paramJobj.getString("filename").equals("Aged Receivable")) {
                    if (paramJobj.optString("filetype", null) != null) {
                        if (paramJobj.getString("filetype").equals("print")) {
                            if (!paramJobj.getString("mode").equals("18")) {
                                double total = 0;
                                for (int i = 0; i < jArr.length(); i++) {
                                    total = total + (Double) jArr.getJSONObject(i).get("amountdueinbase");
                                }
                                JSONObject obj1 = new JSONObject();
                                obj1.put("amountdueinbase", total);
                                obj1.put("billno", "Total Amount Due");
                                jArr.put(obj1);
                            }
                        }
                    }
                }
            }
//            jobj.put("data", jArr);
        } catch (ParseException ex) {
            throw ServiceException.FAILURE("getInvoiceJson : " + ex.getMessage(), ex);
        } catch (JSONException ex) {
            throw ServiceException.FAILURE("getInvoiceJson : " + ex.getMessage(), ex);
        } catch (ScriptException ex) {
            throw ServiceException.FAILURE("getInvoiceJson : " + ex.getMessage(), ex);
        }
        return jArr;
    }

/* Function to get Invoice JSON for Aged Receivables*/
    public JSONArray getInvoiceJsonForAgedReceivables(HttpServletRequest request, List<Object[]> list, JSONArray jArr, HashMap requestParams) throws SessionExpiredException, ServiceException {
        try {
            boolean isBadDebtInvoices = Boolean.parseBoolean(requestParams.get("isBadDebtInvoices").toString());
            DateFormat df = authHandler.getDateOnlyFormat();
            String companyid = requestParams.get("requestCompanyID").toString();
            
            DateFormat dateFormat = authHandler.getDateOnlyFormat();
            Date startDate = null;
            if (requestParams.containsKey(Constants.REQ_startdate) && requestParams.get(Constants.REQ_startdate) != null) {
                startDate = (requestParams.get(Constants.REQ_startdate).toString()).equals("") ? dateFormat.parse(Constants.opening_Date) : dateFormat.parse(requestParams.get(Constants.REQ_startdate).toString());
            }
            int countryLanguageId = Constants.OtherCountryLanguageId; // 0
            KwlReturnObject extraprefresult = accountingHandlerDAOobj.getObject(ExtraCompanyPreferences.class.getName(), companyid);
            ExtraCompanyPreferences extraCompanyPreferences = extraprefresult != null ? (ExtraCompanyPreferences) extraprefresult.getEntityList().get(0) : null;
            if (extraCompanyPreferences.isAmountInIndianWord()) {
                countryLanguageId = Constants.CountryIndiaLanguageId; //for india id is 1;
            }

            boolean ignoreZero = Boolean.parseBoolean(requestParams.get("ignorezero").toString());
            boolean onlyAmountDue = Boolean.parseBoolean(requestParams.get("onlyamountdue").toString());
            int noOfInterval = StringUtil.isNullOrEmpty(request.getParameter("noOfInterval"))? 7 : Integer.parseInt(request.getParameter("noOfInterval"));
            boolean invoiceReport = Boolean.parseBoolean(requestParams.get("report").toString());
            boolean isSOA = Boolean.parseBoolean(requestParams.get("isSOA").toString());
            int datefilter = StringUtil.getInteger(request.getParameter("datefilter"));// 0 = Invoice Due date OR 1 = Invoice date
            KwlReturnObject curresult = accountingHandlerDAOobj.getObject(KWLCurrency.class.getName(), (String) requestParams.get("globalCurrencyID"));
            KWLCurrency currency = (KWLCurrency) curresult.getEntityList().get(0);
            boolean booleanAged = true;//Added for aged payable/receivable
            Calendar oneDayBeforeCal1 = (Calendar) requestParams.get("oneDayBeforeCal1");
            Calendar cal1 = (Calendar) requestParams.get("cal1");
            Calendar cal2 = (Calendar) requestParams.get("cal2");
            Calendar cal3 = (Calendar) requestParams.get("cal3");
            Calendar cal4 = (Calendar) requestParams.get("cal4");
            Calendar cal5 = (Calendar) requestParams.get("cal5");
            Calendar cal6 = (Calendar) requestParams.get("cal6");
            Calendar cal7 = (Calendar) requestParams.get("cal7");
            Calendar cal8 = (Calendar) requestParams.get("cal8");
            Calendar cal9 = (Calendar) requestParams.get("cal9");
            Calendar cal10 = (Calendar) requestParams.get("cal10");
            
            Date oneDayBeforeCal1Date = null;
            Date cal1Date = null;
            Date cal2Date = null;
            Date cal3Date = null;
            Date cal4Date = null;
            Date cal5Date = null;
            Date cal6Date = null;
            Date cal7Date = null;
            Date cal8Date = null;
            Date cal9Date = null;
            Date cal10Date = null;

            String oneDayBeforeCal1String = dateFormat.format(oneDayBeforeCal1.getTime());
            oneDayBeforeCal1Date = dateFormat.parse(oneDayBeforeCal1String);

            String cal1String = dateFormat.format(cal1.getTime());
            cal1Date = dateFormat.parse(cal1String);

            String cal2String = dateFormat.format(cal2.getTime());
            cal2Date = dateFormat.parse(cal2String);

            String cal3String = dateFormat.format(cal3.getTime());
            cal3Date = dateFormat.parse(cal3String);

            String cal4String = dateFormat.format(cal4.getTime());
            cal4Date = dateFormat.parse(cal4String);

            String cal5String = dateFormat.format(cal5.getTime());
            cal5Date = dateFormat.parse(cal5String);

            String cal6String = dateFormat.format(cal6.getTime());
            cal6Date = dateFormat.parse(cal6String);

            String cal7String = dateFormat.format(cal7.getTime());
            cal7Date = dateFormat.parse(cal7String);

            String cal8String = dateFormat.format(cal8.getTime());
            cal8Date = dateFormat.parse(cal8String);

            String cal9String = dateFormat.format(cal9.getTime());
            cal9Date = dateFormat.parse(cal9String);

            String cal10String = dateFormat.format(cal10.getTime());
            cal10Date = dateFormat.parse(cal10String);

           
            double amountdue1 = 0;
            double amountdue2 = 0;
            double amountdue3 = 0;
            double amountdue4 = 0;
            double amountdue5 = 0;
            double amountdue6 = 0;
            double amountdue7 = 0;
            double amountdue8 = 0;
            double amountdue9 = 0;
            double amountdue10 = 0;
            double amountdue11 = 0;
//            double accruedbalance = 0;
            double amountWD = 0;
            Date asOfDate=null,today=new Date();
            if (requestParams.containsKey("asofdate") && requestParams.get("asofdate") != null) {
                String asOfDateString = (String) requestParams.get("asofdate");
                asOfDate = df.parse(asOfDateString);
            }
            requestParams.put("asOfDateEqualsToday", asOfDate != null? DateUtils.isSameDay(today, asOfDate):false);
            // Load Invoices in map 
            for (Object[] oj : list) {
                String invid = oj[0].toString();
                //Withoutinventory 0 for normal, 1 for billing
                KwlReturnObject objItr = accountingHandlerDAOobj.getObject(Invoice.class.getName(), invid);
                Invoice invoice = (Invoice) objItr.getEntityList().get(0);
                amountdue1 = amountdue2 = amountdue3 = amountdue4 = amountdue5 = amountdue6 = amountdue7 = amountdue8 = amountWD = 0;
                Date invoiceCreationDate = invoice.getCreationDate();
                Double externalCurrencyRate = 0d;
                boolean isopeningBalanceInvoice = invoice.isIsOpeningBalenceInvoice();
                Double invoiceOriginalAmount = 0d;
                if (isopeningBalanceInvoice && !invoice.isNormalInvoice()) {
                    externalCurrencyRate = invoice.getExchangeRateForOpeningTransaction();
                    invoiceOriginalAmount = invoice.getOriginalOpeningBalanceAmount();
                }
                JournalEntry je = null;
                if (invoice.isNormalInvoice()) {
                    je = invoice.getJournalEntry();
//                    invoiceCreationDate = je.getEntryDate();
                    externalCurrencyRate = je.getExternalCurrencyRate();
                }
                JournalEntryDetail d = null;
                if (invoice.isNormalInvoice() && invoice.getCustomerEntry() != null) {
                    d = invoice.getCustomerEntry();
                    invoiceOriginalAmount = d.getAmount();
                }
                double amountdue = 0,amountdueinbase = 0;//, discountDeduct = 0;
                String currencyid = (invoice.getCurrency() == null ? currency.getCurrencyID() : invoice.getCurrency().getCurrencyID());
                List ll = null;
                double invoiceAmountDue=(invoice.isIsOpeningBalenceInvoice() ? invoice.getOpeningBalanceAmountDue() : 0);
                double orignalOpeningBalanceAmountDue=invoice.getOriginalOpeningBalanceAmount();
                if(booleanAged){//in aged Report Amount due need to calculate on run time i.e based on As on date. So using runtime function
                    ll = accInvoiceCommon.getAmountDue_Discount(requestParams, invoice);
                    amountdue = (Double) ll.get(0);
                    amountdueinbase = (Double) ll.get(4);
                } else if (invoice.isIsOpeningBalenceInvoice() && invoiceAmountDue == orignalOpeningBalanceAmountDue) {
                    amountdue = invoiceAmountDue;
                } else if(!invoice.isIsOpeningBalenceInvoice() && invoice.isNormalInvoice() && invoice.getInvoiceamount()==invoice.getInvoiceamountdue()){
                    amountdue=invoice.getInvoiceamountdue();
                }
                if (onlyAmountDue && authHandler.round(amountdue, companyid) == 0) {
                    continue;
                }
                if ((ignoreZero && authHandler.round(amountdue, companyid) <= 0)) {
                    continue;
                }
                Customer customer = invoice.getCustomer();
                Account account = null;
                if (isopeningBalanceInvoice && !invoice.isNormalInvoice()) {
                    account = customer.getAccount();
                } else {
                    account = d.getAccount();
                }
                HashMap<String, Object> hashMap = new HashMap<String, Object>();
                hashMap.put("invoiceID", invoice.getID());
                hashMap.put(Constants.companyKey, companyid);
                KwlReturnObject bAmt = null;
                JSONObject obj = new JSONObject();
                obj.put(Constants.billid, invoice.getID());
                obj.put("isOpeningBalanceTransaction", isopeningBalanceInvoice);
                obj.put(Constants.companyKey, invoice.getCompany().getCompanyID());
                obj.put("companyname", invoice.getCompany().getCompanyName());
                obj.put(InvoiceConstants.personid, customer == null ? account.getID() : customer.getID());
                obj.put("customername", customer == null ? "" : customer.getName());
                obj.put(InvoiceConstants.CustomerCreditTerm, customer == null ? "" : customer.getCreditTerm()==null ?"" :customer.getCreditTerm().getTermname());
                obj.put(InvoiceConstants.aliasname, customer == null ? "" : customer.getAliasname());
                obj.put("accid", account.getID());
                obj.put("type", Constants.CUSTOMER_INVOICE);
                obj.put(InvoiceConstants.billno, invoice.getInvoiceNumber());
                obj.put(Constants.currencyKey, currencyid);
                obj.put(InvoiceConstants.currencysymbol, (invoice.getCurrency() == null ? currency.getSymbol() : invoice.getCurrency().getSymbol()));
                obj.put(InvoiceConstants.currencyname, (invoice.getCurrency() == null ? currency.getName() : invoice.getCurrency().getName()));
                obj.put("externalcurrencyrate", (je != null ? je.getExternalCurrencyRate() : externalCurrencyRate));
                obj.put("exchangerate", "1 " + currency.getCurrencyCode() + " = " + ((je != null) ? je.getExternalCurrencyRate() : externalCurrencyRate) + " " + (invoice.getCurrency() == null ? "" : invoice.getCurrency().getCurrencyCode()));
                obj.put("date", df.format(invoiceCreationDate));
                obj.put(Constants.shipdate, invoice.getShipDate() == null ? "" : df.format(invoice.getShipDate()));
                obj.put(Constants.duedate, df.format(invoice.getDueDate()));
                obj.put(InvoiceConstants.personname, customer == null ? account.getName() : customer.getName());
                obj.put(InvoiceConstants.personinfo, customer == null ? account.getName() : customer.getName()+"("+customer.getAcccode()+")");
                obj.put("customercurrencyid", customer == null ? "" : customer.getCurrency().getCurrencyID());
                if (isBadDebtInvoices) {// in case of Malasian Company
                    double totalTaxAmt = 0d;
                    double invoiceLevelTaxAmt = invoice.getTaxEntry() == null ? 0 : invoice.getTaxEntry().getAmount();
                    double rowTaxAmt = 0d;
                    Set<InvoiceDetail> invoiceDetails = invoice.getRows();
                    for (InvoiceDetail invoiceDetail : invoiceDetails) {
                        rowTaxAmt += invoiceDetail.getRowTaxAmount();
                        rowTaxAmt += invoiceDetail.getRowTermTaxAmount();
                    }
                    totalTaxAmt = invoiceLevelTaxAmt + rowTaxAmt;
                    if (totalTaxAmt == 0) {// no need to put invoice in bad debt section if it has tax 0
                        continue;
                    }
                    // get Paid amount of invoice
                    Date badDebtCalculationToDate = null;
                    if (request.getParameter("badDebtCalculationToDate") != null) {
                        badDebtCalculationToDate = df.parse((String) request.getParameter("badDebtCalculationToDate"));
                    }
                    KwlReturnObject invoicePaidAmtObj = accReceiptDAOobj.getReceiptFromBadDebtClaimedInvoice(invoice.getID(), true, badDebtCalculationToDate);
                    double paidAmt = 0;
                    List paidList = invoicePaidAmtObj.getEntityList();
                    if (paidList != null && !paidList.isEmpty()) {
                        Iterator pmtIt = paidList.iterator();
                        while (pmtIt.hasNext()) {
                            ReceiptDetail rd = (ReceiptDetail) pmtIt.next();
                            double paidAmtInPaymentCurrency = rd.getAmount();
                            KwlReturnObject bAmt1 = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, paidAmtInPaymentCurrency, rd.getReceipt().getCurrency().getCurrencyID(), rd.getReceipt().getCreationDate(), rd.getReceipt().getJournalEntry().getExternalCurrencyRate());
                            double paidAmtInBase = authHandler.round((Double) bAmt1.getEntityList().get(0), companyid);
                            paidAmt += paidAmtInBase;
                        }
                    }
//
                     // Converting invAmountDue to base currency
                    String fromcurrencyid = invoice.getCurrency().getCurrencyID();
                    KwlReturnObject bAmt1 = null;
                    // Calculation of claimed GST
                    // Step-1 get paied amount before claimed date
                    // Step-2 get credit note before claimed date
                    // Step-3 get debit note amount before claimed date
                    //Calculate Bad Debt Recoverable Amount
                    // Get Recovered Amount of invoice
                    HashMap<String, Object> badMaps = new HashMap<String, Object>();
                    badMaps.put(Constants.companyKey, companyid);
                    badMaps.put("invoiceid", invid);
                    KwlReturnObject badDebtMappingResult = accInvoiceDAOobj.getBadDebtInvoiceMappingForInvoice(badMaps);
                    double totalRecoveredAmt = 0;
                    List badDebtMapping = badDebtMappingResult.getEntityList();
                    if (!badDebtMapping.isEmpty()) {
                        Iterator badIt = badDebtMapping.iterator();
                        while (badIt.hasNext()) {
                            BadDebtInvoiceMapping debtInvoiceMapping = (BadDebtInvoiceMapping) badIt.next();
                            totalRecoveredAmt += debtInvoiceMapping.getBadDebtAmtRecovered();
                        }
                    }
                    // Calculate Recover Amount in base
                    bAmt1 = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, totalRecoveredAmt, fromcurrencyid, invoice.getCreationDate(), invoice.getJournalEntry().getExternalCurrencyRate());
                    totalRecoveredAmt = authHandler.round((Double) bAmt1.getEntityList().get(0), companyid);
                    // Calculating Paid Amt in base currency
                    double paidAfterClaimed = paidAmt - totalRecoveredAmt;
                    if (authHandler.round(amountdue, companyid) == 0 && authHandler.round(paidAfterClaimed, companyid) == 0) {// don't put invoices which has amount due zero and whole gst has been recovered
                        continue;
                    }
                }
                if (invoice.isCashtransaction()) {
                    obj.put("amountdue", 0);
                    obj.put(InvoiceConstants.amountdueinbase, 0);
                    obj.put("incash", true);
                } else {
                    if (!booleanAged) {//Since in for aged report amountdue in base already coming so no need to calculate separately already 
                        //                    obj.put("amountdueinbase", CompanyHandler.getCurrencyToBaseAmount(session,request,amount - ramount,currencyid,je.getEntryDate()));  //amount left after apllying receipt and CN
                        if (isopeningBalanceInvoice && invoice.isConversionRateFromCurrencyToBase()) {// if invoice is opening balance invoice and Conversion rate is taken from user is Currency to base then following method will be called.
                            bAmt = accCurrencyDAOobj.getCurrencyToBaseAmountAccordingToCurrencyToBaseExchangeRate(requestParams, amountdue, currencyid, invoiceCreationDate, externalCurrencyRate);
                            amountdueinbase = (Double) bAmt.getEntityList().get(0);
                        } else if (amountdue != 0) {
                            double currencyToBaseRate = accCurrencyDAOobj.getCurrencyToBaseRate(requestParams, currencyid, invoiceCreationDate);
                            if (externalCurrencyRate != 0) {
                                amountdueinbase = amountdue / externalCurrencyRate;
                            } else if (currencyToBaseRate != 0) {
                                amountdueinbase = amountdue / currencyToBaseRate;
                            }
                        }
                    }
                    obj.put(InvoiceConstants.amountdueinbase, authHandler.round(amountdueinbase, companyid));
                    obj.put("amountdue", authHandler.round(amountdue, companyid));
                    if (booleanAged) {
                        Date dueDate = null;
                        if (!StringUtil.isNullOrEmpty(df.format(invoice.getDueDate()))) {
                            dueDate = df.parse(df.format(invoice.getDueDate()));
                        }
                        if (isSOA && bAmt != null) {
                            amountdue = authHandler.round((Double) bAmt.getEntityList().get(0), companyid);
                        }
                        if (datefilter == 0 || datefilter == Constants.agedDueDate0to30Filter) {
                            dueDate = df.parse(df.format(invoice.getDueDate()));
                        } else {
                            dueDate = df.parse(df.format(invoiceCreationDate));
                        }
//                        if (startDate != null && dueDate.before(startDate)) {//In Aged Report amountdue goes in Accruade Balance for those transaction whose creation/due date is previous to Start date will goes into the accrued balance, likes opening balance 
//                            accruedbalance = authHandler.round(amountdue, companyid);
//                        } else 
                        if (dueDate.after(oneDayBeforeCal1Date)) {
                            if (dueDate.equals(cal1Date) && (datefilter == Constants.agedDueDate0to30Filter || datefilter == Constants.agedInvoiceDate0to30Filter)) {
                                amountdue2 = authHandler.round(amountdue, companyid);  // 0-30 Days
                            } else {
                                amountdue1 = authHandler.round(amountdue, companyid); // Current
                            }
                        } else if ((cal2Date.before(dueDate) || cal2Date.equals(dueDate)) && cal1Date.after(dueDate)) { // 1-30
                            amountdue2 = authHandler.round(amountdue, companyid);
                        } else if ((cal3Date.before(dueDate) || cal3Date.equals(dueDate)) && cal2Date.after(dueDate)) { // 31-60
                            amountdue3 = authHandler.round(amountdue, companyid);
                        } else if ((cal4Date.before(dueDate) || cal4Date.equals(dueDate)) && cal3Date.after(dueDate)) { // 61-90
                            amountdue4 = authHandler.round(amountdue, companyid);
                        } else if ((cal5Date.before(dueDate) || cal5Date.equals(dueDate)) && cal4Date.after(dueDate)) { // 91-120
                            amountdue5 = authHandler.round(amountdue, companyid);
                        } else if ((cal6Date.before(dueDate) || cal6Date.equals(dueDate)) && cal5Date.after(dueDate)) { // 121-150
                            amountdue6 = authHandler.round(amountdue, companyid);
                        } else if ((cal7Date.before(dueDate) || cal7Date.equals(dueDate)) && cal6Date.after(dueDate)) { // 151-180
                            amountdue7 = authHandler.round(amountdue, companyid);
                        } else if ((cal8Date.before(dueDate) || cal8Date.equals(dueDate)) && cal7Date.after(dueDate)) { // 181-210
                            amountdue8 = authHandler.round(amountdue, companyid);
                        } else if ((cal9Date.before(dueDate) || cal9Date.equals(dueDate)) && cal8Date.after(dueDate)) { // 211-240
                            amountdue9 = authHandler.round(amountdue, companyid);
                        } else if ((cal10Date.before(dueDate) || cal10Date.equals(dueDate)) && cal9Date.after(dueDate)) { // 241-270
                            amountdue10 = authHandler.round(amountdue, companyid);
                        } else {                                                                                          // > 270           
                            amountdue11 = authHandler.round(amountdue, companyid);
                        } 
                        
                        switch(noOfInterval){
                            case 2:
                                amountdue3 += amountdue4 + amountdue5 + amountdue6 + amountdue7 + amountdue8 + amountdue9 + amountdue10 + amountdue11;
                                amountdue4 = amountdue5 = amountdue6 = amountdue7 = amountdue8 = amountdue9 = amountdue10 = amountdue11 = 0;
                                break;
                            case 3:
                                amountdue4 += amountdue5 + amountdue6 + amountdue7 + amountdue8 + amountdue9 + amountdue10 + amountdue11;
                                amountdue5 = amountdue6 = amountdue7 = amountdue8 = amountdue9 = amountdue10 = amountdue11 = 0;
                                break;
                            case 4:
                                amountdue5 += amountdue6 + amountdue7 + amountdue8 + amountdue9 + amountdue10 + amountdue11;
                                amountdue6 = amountdue7 = amountdue8 = amountdue9 = amountdue10 = amountdue11 = 0;
                                break;
                            case 5:
                                amountdue6 += amountdue7 + amountdue8 + amountdue9 + amountdue10 + amountdue11;
                                amountdue7 = amountdue8 = amountdue9 = amountdue10 = amountdue11 = 0;
                                break;
                            case 6:
                                amountdue7 += amountdue8 + amountdue9 + amountdue10 + amountdue11;
                                amountdue8 = amountdue9 = amountdue10 = amountdue11 = 0;
                                break;
                            case 7:
                                amountdue8 += amountdue9 + amountdue10 + amountdue11;
                                amountdue9 = amountdue10 = amountdue11 = 0;
                                break;
                            case 8:
                                amountdue9 += amountdue10 + amountdue11;
                                amountdue10 = amountdue11 = 0;
                                break;
                            case 9:
                                amountdue10 += amountdue11;
                                amountdue11 = 0;
                                break;
                        }
                    }
                }
                obj.put("amountduenonnegative", (amountdue <= 0) ? 0 : authHandler.round(amountdue, companyid));
                obj.put("amount", authHandler.round(invoiceOriginalAmount, companyid));   //actual invoice amount
                obj.put("amountinWords", invoice.getCurrency().getName() + " " + EnglishNumberToWordsOjb.convert(invoiceOriginalAmount, invoice.getCurrency(),countryLanguageId) + " only.");
                if (!invoiceReport) {
                    obj.put("amountdue1", amountdue1);
                    obj.put("amountdue2", amountdue2);
                    obj.put("amountdue3", amountdue3);
                    obj.put("amountdue4", amountdue4);
                    obj.put("amountdue6", amountdue6);
                    obj.put("amountdue7", amountdue7);
                    obj.put("amountdue8", amountdue8);
                    obj.put("amountdue9", amountdue9);
                    obj.put("amountdue10", amountdue10);
                    obj.put("amountdue11", amountdue11);
//                    obj.put(InvoiceConstants.ACCRUEDBALANCE, accruedbalance);
                    obj.put("type", "Sales Invoice");
                }
                if (!(ignoreZero && authHandler.round(amountdue, companyid) <= 0)) {
                    jArr.put(obj);
                }
            }
        } catch (ParseException ex) {
            throw ServiceException.FAILURE("getInvoiceJsonForAgedReceivables : " + ex.getMessage(), ex);
        } catch (Exception ex) {
            throw ServiceException.FAILURE("getInvoiceJsonForAgedReceivables : " + ex.getMessage(), ex);
        }
         return jArr;
    }
/* Function to get Invoice JSON for Aged Receivables*/
    public JSONArray getInvoiceJsonForAgedReceivables(JSONObject request, List<Object[]> list, JSONArray jArr, HashMap requestParams) throws SessionExpiredException, ServiceException {
        try {
            boolean isBadDebtInvoices = Boolean.parseBoolean(requestParams.get("isBadDebtInvoices").toString());
            DateFormat df = authHandler.getDateOnlyFormat();
            String companyid = requestParams.get("requestCompanyID").toString();
            
            DateFormat dateFormat = authHandler.getDateOnlyFormat();
            Date startDate = null;
            if (requestParams.containsKey(Constants.REQ_startdate) && requestParams.get(Constants.REQ_startdate) != null) {
                startDate = (requestParams.get(Constants.REQ_startdate).toString()).equals("") ? dateFormat.parse(Constants.opening_Date) : dateFormat.parse(requestParams.get(Constants.REQ_startdate).toString());
            }
            
            int noOfInterval = request.has("noOfInterval") ? request.optInt("noOfInterval",7) : 7;
            
            int countryLanguageId = Constants.OtherCountryLanguageId; // 0
            KwlReturnObject extraprefresult = accountingHandlerDAOobj.getObject(ExtraCompanyPreferences.class.getName(), companyid);
            ExtraCompanyPreferences extraCompanyPreferences = extraprefresult != null ? (ExtraCompanyPreferences) extraprefresult.getEntityList().get(0) : null;
            if (extraCompanyPreferences.isAmountInIndianWord()) {
                countryLanguageId = Constants.CountryIndiaLanguageId; //for india id is 1;
            }

            boolean ignoreZero = Boolean.parseBoolean(requestParams.get("ignorezero").toString());
            boolean onlyAmountDue = Boolean.parseBoolean(requestParams.get("onlyamountdue").toString());
            boolean invoiceReport = Boolean.parseBoolean(requestParams.get("report").toString());
            boolean isSOA = Boolean.parseBoolean(requestParams.get("isSOA").toString());
            int datefilter = StringUtil.getInteger(request.optString("datefilter"));// 0 = Invoice Due date OR 1 = Invoice date
            KwlReturnObject curresult = accountingHandlerDAOobj.getObject(KWLCurrency.class.getName(), (String) requestParams.get("globalCurrencyID"));
            KWLCurrency currency = (KWLCurrency) curresult.getEntityList().get(0);
            boolean booleanAged = true;//Added for aged payable/receivable
            Calendar oneDayBeforeCal1 = (Calendar) requestParams.get("oneDayBeforeCal1");
            Calendar cal1 = (Calendar) requestParams.get("cal1");
            Calendar cal2 = (Calendar) requestParams.get("cal2");
            Calendar cal3 = (Calendar) requestParams.get("cal3");
            Calendar cal4 = (Calendar) requestParams.get("cal4");
            Calendar cal5 = (Calendar) requestParams.get("cal5");
            Calendar cal6 = (Calendar) requestParams.get("cal6");
            Calendar cal7 = (Calendar) requestParams.get("cal7");
            Calendar cal8 = (Calendar) requestParams.get("cal8");
            Calendar cal9 = (Calendar) requestParams.get("cal9");
            Calendar cal10 = (Calendar) requestParams.get("cal10");
            
            Date oneDayBeforeCal1Date = null;
            Date cal1Date = null;
            Date cal2Date = null;
            Date cal3Date = null;
            Date cal4Date = null;
            Date cal5Date = null;
            Date cal6Date = null;
            Date cal7Date = null;
            Date cal8Date = null;
            Date cal9Date = null;
            Date cal10Date = null;

            String oneDayBeforeCal1String = dateFormat.format(oneDayBeforeCal1.getTime());
            oneDayBeforeCal1Date = dateFormat.parse(oneDayBeforeCal1String);

            String cal1String = dateFormat.format(cal1.getTime());
            cal1Date = dateFormat.parse(cal1String);

            String cal2String = dateFormat.format(cal2.getTime());
            cal2Date = dateFormat.parse(cal2String);

            String cal3String = dateFormat.format(cal3.getTime());
            cal3Date = dateFormat.parse(cal3String);

            String cal4String = dateFormat.format(cal4.getTime());
            cal4Date = dateFormat.parse(cal4String);

            String cal5String = dateFormat.format(cal5.getTime());
            cal5Date = dateFormat.parse(cal5String);

            String cal6String = dateFormat.format(cal6.getTime());
            cal6Date = dateFormat.parse(cal6String);

            String cal7String = dateFormat.format(cal7.getTime());
            cal7Date = dateFormat.parse(cal7String);

            String cal8String = dateFormat.format(cal8.getTime());
            cal8Date = dateFormat.parse(cal8String);

            String cal9String = dateFormat.format(cal9.getTime());
            cal9Date = dateFormat.parse(cal9String);

            String cal10String = dateFormat.format(cal10.getTime());
            cal10Date = dateFormat.parse(cal10String);

           
            double amountdue1 = 0;
            double amountdue2 = 0;
            double amountdue3 = 0;
            double amountdue4 = 0;
            double amountdue5 = 0;
            double amountdue6 = 0;
            double amountdue7 = 0;
            double amountdue8 = 0;
            double amountdue9 = 0;
            double amountdue10 = 0;
            double amountdue11 = 0;
//            double accruedbalance = 0;
            double amountWD = 0;
            Date asOfDate=null,today=new Date();
            if (requestParams.containsKey("asofdate") && requestParams.get("asofdate") != null) {
                String asOfDateString = (String) requestParams.get("asofdate");
                asOfDate = df.parse(asOfDateString);
            }
            requestParams.put("asOfDateEqualsToday", asOfDate != null? DateUtils.isSameDay(today, asOfDate):false);
            // Load Invoices in map 
            for (Object[] oj : list) {
                String invid = oj[0].toString();
                //Withoutinventory 0 for normal, 1 for billing
                KwlReturnObject objItr = accountingHandlerDAOobj.getObject(Invoice.class.getName(), invid);
                Invoice invoice = (Invoice) objItr.getEntityList().get(0);
                amountdue1 = amountdue2 = amountdue3 = amountdue4 = amountdue5 = amountdue6 = amountdue7 = amountdue8 = amountdue9 = amountdue10 = amountdue11= amountWD = 0;
                Date invoiceCreationDate = invoice.getCreationDate();
                Double externalCurrencyRate = 0d;
                boolean isopeningBalanceInvoice = invoice.isIsOpeningBalenceInvoice();
                Double invoiceOriginalAmount = 0d;
                if (isopeningBalanceInvoice && !invoice.isNormalInvoice()) {
                    externalCurrencyRate = invoice.getExchangeRateForOpeningTransaction();
                    invoiceOriginalAmount = invoice.getOriginalOpeningBalanceAmount();
                }
                JournalEntry je = null;
                if (invoice.isNormalInvoice()) {
                    je = invoice.getJournalEntry();
                    externalCurrencyRate = je.getExternalCurrencyRate();
                }
                JournalEntryDetail d = null;
                if (invoice.isNormalInvoice() && invoice.getCustomerEntry() != null) {
                    d = invoice.getCustomerEntry();
                    invoiceOriginalAmount = d.getAmount();
                }
                double amountdue = 0,amountdueinbase = 0;//, discountDeduct = 0;
                String currencyid = (invoice.getCurrency() == null ? currency.getCurrencyID() : invoice.getCurrency().getCurrencyID());
                List ll = null;
                double invoiceAmountDue=(invoice.isIsOpeningBalenceInvoice() ? invoice.getOpeningBalanceAmountDue() : 0);
                double orignalOpeningBalanceAmountDue=invoice.getOriginalOpeningBalanceAmount();
                if(booleanAged){//in aged Report Amount due need to calculate on run time i.e based on As on date. So using runtime function
                    ll = accInvoiceCommon.getAmountDue_Discount(requestParams, invoice);
                    amountdue = (Double) ll.get(0);
                    amountdueinbase = (Double) ll.get(4);
                } else if (invoice.isIsOpeningBalenceInvoice() && invoiceAmountDue == orignalOpeningBalanceAmountDue) {
                    amountdue = invoiceAmountDue;
                } else if(!invoice.isIsOpeningBalenceInvoice() && invoice.isNormalInvoice() && invoice.getInvoiceamount()==invoice.getInvoiceamountdue()){
                    amountdue=invoice.getInvoiceamountdue();
                }
                if (onlyAmountDue && authHandler.round(amountdue, companyid) == 0) {
                    continue;
                }
                if ((ignoreZero && authHandler.round(amountdue, companyid) <= 0)) {
                    continue;
                }
                Customer customer = invoice.getCustomer();
                Account account = null;
                if (isopeningBalanceInvoice && !invoice.isNormalInvoice()) {
                    account = customer.getAccount();
                } else {
                    account = d.getAccount();
                }
                HashMap<String, Object> hashMap = new HashMap<String, Object>();
                hashMap.put("invoiceID", invoice.getID());
                hashMap.put(Constants.companyKey, companyid);
                KwlReturnObject bAmt = null;
                JSONObject obj = new JSONObject();
                obj.put(Constants.billid, invoice.getID());
                obj.put("isOpeningBalanceTransaction", isopeningBalanceInvoice);
                obj.put(Constants.companyKey, invoice.getCompany().getCompanyID());
                obj.put("companyname", invoice.getCompany().getCompanyName());
                obj.put(InvoiceConstants.personid, customer == null ? account.getID() : customer.getID());
                obj.put("customername", customer == null ? "" : customer.getName());
                obj.put(InvoiceConstants.aliasname, customer == null ? "" : customer.getAliasname());
                obj.put("accid", account.getID());
                obj.put("type", Constants.CUSTOMER_INVOICE);
                obj.put(InvoiceConstants.billno, invoice.getInvoiceNumber());
                obj.put(Constants.currencyKey, currencyid);
                obj.put(InvoiceConstants.currencysymbol, (invoice.getCurrency() == null ? currency.getSymbol() : invoice.getCurrency().getSymbol()));
                obj.put(InvoiceConstants.currencyname, (invoice.getCurrency() == null ? currency.getName() : invoice.getCurrency().getName()));
                obj.put("externalcurrencyrate", (je != null ? je.getExternalCurrencyRate() : externalCurrencyRate));
                obj.put("exchangerate", "1 " + currency.getCurrencyCode() + " = " + ((je != null) ? je.getExternalCurrencyRate() : externalCurrencyRate) + " " + (invoice.getCurrency() == null ? "" : invoice.getCurrency().getCurrencyCode()));
                obj.put("date", df.format(invoiceCreationDate));
                obj.put(Constants.shipdate, invoice.getShipDate() == null ? "" : df.format(invoice.getShipDate()));
                obj.put(Constants.duedate, df.format(invoice.getDueDate()));
                obj.put(InvoiceConstants.personname, customer == null ? account.getName() : customer.getName());
                obj.put(InvoiceConstants.personinfo, customer == null ? account.getName() : customer.getName()+"("+customer.getAcccode()+")");
                obj.put("customercurrencyid", customer == null ? "" : customer.getCurrency().getCurrencyID());
                if (isBadDebtInvoices) {// in case of Malasian Company
                    double totalTaxAmt = 0d;
                    double invoiceLevelTaxAmt = invoice.getTaxEntry() == null ? 0 : invoice.getTaxEntry().getAmount();
                    double rowTaxAmt = 0d;
                    Set<InvoiceDetail> invoiceDetails = invoice.getRows();
                    for (InvoiceDetail invoiceDetail : invoiceDetails) {
                        rowTaxAmt += invoiceDetail.getRowTaxAmount() + invoiceDetail.getRowTermTaxAmount();
                    }
                    totalTaxAmt = invoiceLevelTaxAmt + rowTaxAmt;
                    if (totalTaxAmt == 0) {// no need to put invoice in bad debt section if it has tax 0
                        continue;
                    }
                    // get Paid amount of invoice
                    Date badDebtCalculationToDate = null;
                    if (!StringUtil.isNullOrEmpty(request.optString("badDebtCalculationToDate")) ) {
                        badDebtCalculationToDate = df.parse((String) request.optString("badDebtCalculationToDate"));
                    }
                    KwlReturnObject invoicePaidAmtObj = accReceiptDAOobj.getReceiptFromBadDebtClaimedInvoice(invoice.getID(), true, badDebtCalculationToDate);
                    double paidAmt = 0;
                    List paidList = invoicePaidAmtObj.getEntityList();
                    if (paidList != null && !paidList.isEmpty()) {
                        Iterator pmtIt = paidList.iterator();
                        while (pmtIt.hasNext()) {
                            ReceiptDetail rd = (ReceiptDetail) pmtIt.next();
                            double paidAmtInPaymentCurrency = rd.getAmount();
                            KwlReturnObject bAmt1 = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, paidAmtInPaymentCurrency, rd.getReceipt().getCurrency().getCurrencyID(), rd.getReceipt().getCreationDate(), rd.getReceipt().getJournalEntry().getExternalCurrencyRate());
                            double paidAmtInBase = authHandler.round((Double) bAmt1.getEntityList().get(0), companyid);
                            paidAmt += paidAmtInBase;
                        }
                    }
                     // Converting invAmountDue to base currency
                    String fromcurrencyid = invoice.getCurrency().getCurrencyID();
                    KwlReturnObject bAmt1 = null;
                    // Calculation of claimed GST
                    // Step-1 get paied amount before claimed date
                    // Step-2 get credit note before claimed date
                    // Step-3 get debit note amount before claimed date
                    //Calculate Bad Debt Recoverable Amount
                    // Get Recovered Amount of invoice
                    HashMap<String, Object> badMaps = new HashMap<String, Object>();
                    badMaps.put(Constants.companyKey, companyid);
                    badMaps.put("invoiceid", invid);
                    KwlReturnObject badDebtMappingResult = accInvoiceDAOobj.getBadDebtInvoiceMappingForInvoice(badMaps);
                    double totalRecoveredAmt = 0;
                    List badDebtMapping = badDebtMappingResult.getEntityList();
                    if (!badDebtMapping.isEmpty()) {
                        Iterator badIt = badDebtMapping.iterator();
                        while (badIt.hasNext()) {
                            BadDebtInvoiceMapping debtInvoiceMapping = (BadDebtInvoiceMapping) badIt.next();
                            totalRecoveredAmt += debtInvoiceMapping.getBadDebtAmtRecovered();
                        }
                    }
                    // Calculate Recover Amount in base
                    bAmt1 = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, totalRecoveredAmt, fromcurrencyid, invoice.getCreationDate(), invoice.getJournalEntry().getExternalCurrencyRate());
                    totalRecoveredAmt = authHandler.round((Double) bAmt1.getEntityList().get(0), companyid);
                    // Calculating Paid Amt in base currency
                    double paidAfterClaimed = paidAmt - totalRecoveredAmt;
                    if (authHandler.round(amountdue, companyid) == 0 && authHandler.round(paidAfterClaimed, companyid) == 0) {// don't put invoices which has amount due zero and whole gst has been recovered
                        continue;
                    }
                }
                if (invoice.isCashtransaction()) {
                    obj.put("amountdue", 0);
                    obj.put(InvoiceConstants.amountdueinbase, 0);
                    obj.put("incash", true);
                } else {
                    if (!booleanAged) {//Since in for aged report amountdue in base already coming so no need to calculate separately already 
                        //                    obj.put("amountdueinbase", CompanyHandler.getCurrencyToBaseAmount(session,request,amount - ramount,currencyid,je.getEntryDate()));  //amount left after apllying receipt and CN
                        if (isopeningBalanceInvoice && invoice.isConversionRateFromCurrencyToBase()) {// if invoice is opening balance invoice and Conversion rate is taken from user is Currency to base then following method will be called.
                            bAmt = accCurrencyDAOobj.getCurrencyToBaseAmountAccordingToCurrencyToBaseExchangeRate(requestParams, amountdue, currencyid, invoiceCreationDate, externalCurrencyRate);
                            amountdueinbase = (Double) bAmt.getEntityList().get(0);
                        } else if (amountdue != 0) {
                            double currencyToBaseRate = accCurrencyDAOobj.getCurrencyToBaseRate(requestParams, currencyid, invoiceCreationDate);
                            if (externalCurrencyRate != 0) {
                                amountdueinbase = amountdue / externalCurrencyRate;
                            } else if (currencyToBaseRate != 0) {
                                amountdueinbase = amountdue / currencyToBaseRate;
                            }
                        }
                    }
                    obj.put(InvoiceConstants.amountdueinbase, authHandler.round(amountdueinbase, companyid));
                    obj.put("amountdue", authHandler.round(amountdue, companyid));
                    if (booleanAged) {
                        Date dueDate = null;
                        if (!StringUtil.isNullOrEmpty(df.format(invoice.getDueDate()))) {
                            dueDate = df.parse(df.format(invoice.getDueDate()));
                        }
                        if (isSOA && bAmt != null) {
                            amountdue = authHandler.round((Double) bAmt.getEntityList().get(0), companyid);
                        }
                        if (datefilter == 0 || datefilter == Constants.agedDueDate0to30Filter) {
                            dueDate = df.parse(df.format(invoice.getDueDate()));
                        } else {
                            dueDate = df.parse(df.format(invoiceCreationDate));
                        }
//                        if (startDate != null && dueDate.before(startDate)) {//In Aged Report amountdue goes in Accruade Balance for those transaction whose creation/due date is previous to Start date will goes into the accrued balance, likes opening balance 
//                            accruedbalance = authHandler.round(amountdue, companyid);
//                        } else
                        if (dueDate.after(oneDayBeforeCal1Date)) {
                            if (dueDate.equals(cal1Date) && (datefilter == Constants.agedDueDate0to30Filter || datefilter == Constants.agedInvoiceDate0to30Filter)) {
                                amountdue2 = authHandler.round(amountdue, companyid);  // 0-30 Days
                            } else {
                                amountdue1 = authHandler.round(amountdue, companyid); // Current
                            }
                        } else if ((cal2Date.before(dueDate) || cal2Date.equals(dueDate)) && cal1Date.after(dueDate)) { // 1-30
                            amountdue2 = authHandler.round(amountdue, companyid);
                        } else if ((cal3Date.before(dueDate) || cal3Date.equals(dueDate)) && cal2Date.after(dueDate)) { // 31-60
                            amountdue3 = authHandler.round(amountdue, companyid);
                        } else if ((cal4Date.before(dueDate) || cal4Date.equals(dueDate)) && cal3Date.after(dueDate)) { // 61-90
                            amountdue4 = authHandler.round(amountdue, companyid);
                        } else if ((cal5Date.before(dueDate) || cal5Date.equals(dueDate)) && cal4Date.after(dueDate)) { // 91-120
                            amountdue5 = authHandler.round(amountdue, companyid);
                        } else if ((cal6Date.before(dueDate) || cal6Date.equals(dueDate)) && cal5Date.after(dueDate)) { // 121-150
                            amountdue6 = authHandler.round(amountdue, companyid);
                        } else if ((cal7Date.before(dueDate) || cal7Date.equals(dueDate)) && cal6Date.after(dueDate)) { // 151-180
                            amountdue7 = authHandler.round(amountdue, companyid);
                        } else if ((cal8Date.before(dueDate) || cal8Date.equals(dueDate)) && cal7Date.after(dueDate)) { // 181-210
                            amountdue8 = authHandler.round(amountdue, companyid);
                        } else if ((cal9Date.before(dueDate) || cal9Date.equals(dueDate)) && cal8Date.after(dueDate)) { // 211-240
                            amountdue9 = authHandler.round(amountdue, companyid);
                        } else if ((cal10Date.before(dueDate) || cal10Date.equals(dueDate)) && cal9Date.after(dueDate)) { // 241-270
                            amountdue10 = authHandler.round(amountdue, companyid);
                        } else {                                                                                          // > 270           
                            amountdue11 = authHandler.round(amountdue, companyid);
                        }
                        
                        switch(noOfInterval){
                            case 2:
                                amountdue3 += amountdue4 + amountdue5 + amountdue6 + amountdue7 + amountdue8 + amountdue9 + amountdue10 + amountdue11;
                                amountdue4 = amountdue5 = amountdue6 = amountdue7 = amountdue8 = amountdue9 = amountdue10 = amountdue11 = 0;
                                break;
                            case 3:
                                amountdue4 += amountdue5 + amountdue6 + amountdue7 + amountdue8 + amountdue9 + amountdue10 + amountdue11;
                                amountdue5 = amountdue6 = amountdue7 = amountdue8 = amountdue9 = amountdue10 = amountdue11 = 0;
                                break;
                            case 4:
                                amountdue5 += amountdue6 + amountdue7 + amountdue8 + amountdue9 + amountdue10 + amountdue11;
                                amountdue6 = amountdue7 = amountdue8 = amountdue9 = amountdue10 = amountdue11 = 0;
                                break;
                            case 5:
                                amountdue6 += amountdue7 + amountdue8 + amountdue9 + amountdue10 + amountdue11;
                                amountdue7 = amountdue8 = amountdue9 = amountdue10 = amountdue11 = 0;
                                break;
                            case 6:
                                amountdue7 += amountdue8 + amountdue9 + amountdue10 + amountdue11;
                                amountdue8 = amountdue9 = amountdue10 = amountdue11 = 0;
                                break;
                            case 7:
                                amountdue8 += amountdue9 + amountdue10 + amountdue11;
                                amountdue9 = amountdue10 = amountdue11 = 0;
                                break;
                            case 8:
                                amountdue9 += amountdue10 + amountdue11;
                                amountdue10 = amountdue11 = 0;
                                break;
                            case 9:
                                amountdue10 += amountdue11;
                                amountdue11 = 0;
                                break;
                        }
                    }
                }
                obj.put("amountduenonnegative", (amountdue <= 0) ? 0 : authHandler.round(amountdue, companyid));
                obj.put("amount", authHandler.round(invoiceOriginalAmount, companyid));   //actual invoice amount
                obj.put("amountinWords", invoice.getCurrency().getName() + " " + EnglishNumberToWordsOjb.convert(invoiceOriginalAmount, invoice.getCurrency(),countryLanguageId) + " only.");
                if (!invoiceReport) {
                    obj.put("amountdue1", amountdue1);
                    obj.put("amountdue2", amountdue2);
                    obj.put("amountdue3", amountdue3);
                    obj.put("amountdue4", amountdue4);
                    obj.put("amountdue5", amountdue5);
                    obj.put("amountdue6", amountdue6);
                    obj.put("amountdue7", amountdue7);
                    obj.put("amountdue8", amountdue8);
                    obj.put("amountdue9", amountdue9);
                    obj.put("amountdue10", amountdue10);
                    obj.put("amountdue11", amountdue11);
//                    obj.put(InvoiceConstants.ACCRUEDBALANCE, accruedbalance);
                    obj.put("type", "Sales Invoice");
                }
                if (!(ignoreZero && authHandler.round(amountdue, companyid) <= 0)) {
                    jArr.put(obj);
                }
            }
        } catch (ParseException ex) {
            throw ServiceException.FAILURE("getInvoiceJsonForAgedReceivables : " + ex.getMessage(), ex);
        } catch (Exception ex) {
            throw ServiceException.FAILURE("getInvoiceJsonForAgedReceivables : " + ex.getMessage(), ex);
        }
         return jArr;
    }
    
    @Override
    public HashMap getDODetailsCustomFieldMap(Map requestParams) {
        String companyid = (requestParams.get("companyid") != null) ? requestParams.get("companyid").toString() : "";
        boolean isFixedAsset = (Boolean) requestParams.get("isFixedAsset");
        boolean isLeaseFixedAsset = (Boolean) requestParams.get("isLeaseFixedAsset");
        boolean isConsignment = (Boolean) requestParams.get("isConsignment");
        HashMap<String, Integer> fieldMap = new HashMap<>();
        HashMap<String, HashMap> CustomFieldMap = new HashMap<>();
        Integer moduleid = null;
        moduleid = isFixedAsset ? Constants.Acc_FixedAssets_DeliveryOrder_ModuleId : isLeaseFixedAsset ? Constants.Acc_Lease_DO : Constants.Acc_Delivery_Order_ModuleId;
        if (isConsignment) {
            moduleid = Constants.Acc_ConsignmentDeliveryOrder_ModuleId;
        }
        if (moduleid != null) {
            HashMap<String, Object> fieldrequestParams = new HashMap();
            fieldrequestParams.put(Constants.filter_names, Arrays.asList(Constants.companyid, Constants.moduleid, Constants.customcolumn));
            fieldrequestParams.put(Constants.filter_values, Arrays.asList(companyid, moduleid, 1));
            HashMap<String, String> replaceFieldMap1 = new HashMap<String, String>();
            HashMap<String, String> customFieldMap = new HashMap<String, String>();
            HashMap<String, String> customDateFieldMap = new HashMap<String, String>();
            fieldMap = accAccountDAOobj.getFieldParamsCustomMapForRows(fieldrequestParams, replaceFieldMap1, customFieldMap, customDateFieldMap);
            CustomFieldMap.put("fieldMap", fieldMap);
            CustomFieldMap.put("customFieldMap", customFieldMap);
            CustomFieldMap.put("customDateFieldMap", customDateFieldMap);

            HashMap<String, Object> serialModuleParams = new HashMap();
            serialModuleParams.put(Constants.filter_names, Arrays.asList(Constants.companyid, Constants.moduleid, Constants.customcolumn));
            serialModuleParams.put(Constants.filter_values, Arrays.asList(companyid, Constants.SerialWindow_ModuleId, 1));
            HashMap<String, String> replaceFieldMap2 = new HashMap<String, String>();
            HashMap<String, String> customFieldMap2 = new HashMap<String, String>();
            HashMap<String, String> customDateFieldMap2 = new HashMap<String, String>();
            HashMap<String, Integer> serialModulefieldMap = accAccountDAOobj.getFieldParamsCustomMapForRows(serialModuleParams, replaceFieldMap2, customFieldMap2, customDateFieldMap2);
            CustomFieldMap.put("replaceFieldMap2", replaceFieldMap2);
            CustomFieldMap.put("customFieldMap2", customFieldMap2);
            CustomFieldMap.put("customDateFieldMap2", customDateFieldMap2);
            CustomFieldMap.put("serialModulefieldMap", serialModulefieldMap);

            HashMap<String, Object> fieldrequestParamsProduct = new HashMap();
            fieldrequestParamsProduct.put(Constants.filter_names, Arrays.asList(Constants.companyid, Constants.moduleid, Constants.customcolumn));
            fieldrequestParamsProduct.put(Constants.filter_values, Arrays.asList(companyid, Constants.Acc_Product_Master_ModuleId, 0));
            HashMap<String, String> replaceFieldMapProduct = new HashMap<String, String>();
            HashMap<String, Integer> FieldMapProduct = accAccountDAOobj.getFieldParamsMap(fieldrequestParamsProduct, replaceFieldMapProduct);
            CustomFieldMap.put("FieldMapProduct", FieldMapProduct);
            CustomFieldMap.put("replaceFieldMapProduct", replaceFieldMapProduct);
        }

        return CustomFieldMap;
    }
    
  @Override
    public JSONObject getDeliveryOrderRows(HttpServletRequest request, HashMap CustomFieldMap) throws SessionExpiredException, ServiceException, ParseException {  //, HashMap<String, Integer> fieldMap
        JSONObject jobj = new JSONObject();
        try {
            HashMap<String, Object> requestParams = new HashMap<String, Object>();
            String companyid = sessionHandlerImpl.getCompanyid(request);
            requestParams.put(Constants.companyKey, companyid);
            String gcurrencyid = sessionHandlerImpl.getCurrencyID(request);
            DateFormat df = authHandler.getDateOnlyFormat();
            String userId = sessionHandlerImpl.getUserid(request);
            boolean isEdit = (StringUtil.isNullOrEmpty(request.getParameter("isEdit"))) ? false : Boolean.parseBoolean(request.getParameter("isEdit"));
            boolean readOnly = (StringUtil.isNullOrEmpty(request.getParameter("readOnly"))) ? false : Boolean.parseBoolean(request.getParameter("readOnly"));
            requestParams.put(Constants.globalCurrencyKey, sessionHandlerImpl.getCurrencyID(request));
            boolean isLeaseFixedAsset = (!StringUtil.isNullOrEmpty(request.getParameter(Constants.isLeaseFixedAsset))) ? Boolean.parseBoolean(request.getParameter(Constants.isLeaseFixedAsset)) : false;
            boolean linkDisposalINV = (!StringUtil.isNullOrEmpty(request.getParameter("linkDisposalINV"))) ? Boolean.parseBoolean(request.getParameter("linkDisposalINV")) : false;
            boolean FA_DOGRlinkFlag = (request.getParameter("FA_DOGRlinkFlag") != null) ? Boolean.parseBoolean(request.getParameter("FA_DOGRlinkFlag")) : false;
            boolean closeflag = request.getParameter("closeflag") != null ? true : false;
            boolean isForLinking = request.getParameter("isForLinking") != null ? true : false; // While DO linking  in SI
            boolean srflag = request.getParameter("srflag") != null ? true : false;
            boolean isOptimizedExport = request.getAttribute("isOptimizedExport") != null ? true : false;
            boolean linkingFlag = (StringUtil.isNullOrEmpty(request.getParameter("linkingFlag"))) ? false : Boolean.parseBoolean(request.getParameter("linkingFlag"));
            boolean isCopy = StringUtil.isNullOrEmpty(request.getParameter("copyInv")) ? false : Boolean.parseBoolean(request.getParameter("copyInv"));
            boolean isForReport = false;            
            DateFormat userDateFormat= (DateFormat) request.getAttribute(Constants.userdf);
            requestParams.put(Constants.userdf,userDateFormat);            
            String dtype = request.getParameter("dtype");
            if (!StringUtil.isNullOrEmpty(dtype) && dtype.equals("report")) {
                isForReport = true;
            }
            boolean isExport = false;
            if (request.getAttribute(Constants.isExport) != null) {
                isExport = (boolean) request.getAttribute(Constants.isExport);
            }
            boolean isLocationForProduct = false;
            boolean isWarehouseForProduct = false;
            boolean isBatchForProduct = false;
            boolean isSerialForProduct = false;
            boolean isSKUForProduct = false;
            boolean isRowForProduct = false;
            boolean isRackForProduct = false;
            boolean isBinForProduct = false;
            String description = "";
            String productsDefaultLocation = "", productsDefaultWarehouse = "";
            boolean isFixedAsset = Boolean.FALSE.parseBoolean(request.getParameter(Constants.isFixedAsset));
            boolean isForInvoice = Boolean.FALSE.parseBoolean(request.getParameter("isForInvoice"));
            boolean isConsignment = Boolean.FALSE.parseBoolean(request.getParameter(Constants.isConsignment));
            boolean isfromconsignreturn = Boolean.FALSE.parseBoolean(request.getParameter("isfromconsignreturn"));
            int moduleid = isFixedAsset ? Constants.Acc_FixedAssets_DeliveryOrder_ModuleId : isLeaseFixedAsset ? Constants.Acc_Lease_DO : Constants.Acc_Delivery_Order_ModuleId;
            if (isConsignment) {
                moduleid = Constants.Acc_ConsignmentDeliveryOrder_ModuleId;
            }
            KwlReturnObject cap = accountingHandlerDAOobj.loadObject(CompanyAccountPreferences.class.getName(), companyid);
            CompanyAccountPreferences preferences = (CompanyAccountPreferences) cap.getEntityList().get(0);
            cap = accountingHandlerDAOobj.loadObject(ExtraCompanyPreferences.class.getName(), companyid);
            ExtraCompanyPreferences extraCompanyPreferences = (ExtraCompanyPreferences) cap.getEntityList().get(0);

            KwlReturnObject curresult = accountingHandlerDAOobj.getObject(KWLCurrency.class.getName(), gcurrencyid);
            KWLCurrency currency = (KWLCurrency) curresult.getEntityList().get(0);

            String[] sos = null;
            if (request.getAttribute(Constants.billid) != null) {
                String temp = request.getAttribute(Constants.billid).toString();
                sos = (String[]) temp.split(",");
            } else {
                sos = (String[]) request.getParameter("bills").split(",");
            }
            int countryid = 0;
            if(extraCompanyPreferences != null && extraCompanyPreferences.getCompany().getCountry() != null){
                countryid = Integer.parseInt(extraCompanyPreferences.getCompany().getCountry().getID());
            }
            int i = 0;
            JSONArray jArr = new JSONArray();

            HashMap<String, String> customFieldMap = (HashMap) CustomFieldMap.get("customFieldMap");
            HashMap<String, String> customDateFieldMap = (HashMap) CustomFieldMap.get("customDateFieldMap");
            HashMap<String, Integer> fieldMap = (HashMap) CustomFieldMap.get("fieldMap");

            HashMap<String, Object> doRequestParams = new HashMap<String, Object>();
            ArrayList filter_names = new ArrayList(), filter_params = new ArrayList(), order_by = new ArrayList(), order_type = new ArrayList();
            filter_names.add("deliveryOrder.ID");
            order_by.add("srno");
            order_type.add("asc");
            doRequestParams.put(Constants.filterNamesKey, filter_names);
            doRequestParams.put(Constants.filterParamsKey, filter_params);
            doRequestParams.put("order_by", order_by);
            doRequestParams.put("order_type", order_type);

            HashMap<String, Object> serialModuleParams = new HashMap();
            HashMap<String, String> replaceFieldMap2 =  (HashMap) CustomFieldMap.get("replaceFieldMap2");
            HashMap<String, String> customFieldMap2 =  (HashMap) CustomFieldMap.get("customFieldMap2");
            HashMap<String, String> customDateFieldMap2 =  (HashMap) CustomFieldMap.get("customDateFieldMap2");
            HashMap<String, Integer> serialModulefieldMap =  (HashMap) CustomFieldMap.get("serialModulefieldMap");

            while (sos != null && i < sos.length) {
                KwlReturnObject result = accountingHandlerDAOobj.getObject(DeliveryOrder.class.getName(), sos[i]);
                DeliveryOrder dorder = (DeliveryOrder) result.getEntityList().get(0);
                filter_params.clear();
                if(dorder != null){
                    filter_params.add(dorder.getID());

                    // Contract of DO
                    Contract contract = null;
                    if (linkingFlag && isForInvoice) {// if you are creating Sales Invoice by linking with DO then you need to check that, is that do is created from Contract. if it is created then unit price per invoice will be taken instead of rate defined in that contract
                        Set<DOContractMapping> doContractMapping = dorder.getdOContractMappings();
                        if (doContractMapping != null && !doContractMapping.isEmpty()) {
                            for (DOContractMapping docomContractMapping : doContractMapping) {
                                if (docomContractMapping.getProductReplacement() == null) {
                                    contract = docomContractMapping.getContract();
                                }
                            }
                        }
                    }
                    KwlReturnObject podresult = accInvoiceDAOobj.getDeliveryOrderDetails(doRequestParams);
                    List<DeliveryOrderDetail> resultList = podresult.getEntityList();
                    StringBuilder documentIDs = new StringBuilder();
                    StringBuilder documentIDsforWithotWLBSP=new StringBuilder();
                    if(!isOptimizedExport){
                    for (DeliveryOrderDetail deliveryOrderDetail : resultList) {
                        Product product = deliveryOrderDetail.getProduct();
                        if (product != null && !StringUtil.isNullOrEmpty(product.getID())) {
                            if ((preferences.isIsBatchCompulsory() || preferences.isIsSerialCompulsory() || preferences.isIslocationcompulsory() || preferences.isIswarehousecompulsory() || preferences.isIsrowcompulsory() || preferences.isIsrackcompulsory() || preferences.isIsbincompulsory()) && !isCopy && !isfromconsignreturn) {  //check if company level option is on then only we will check productt level
                                if (product.isIsBatchForProduct() || product.isIslocationforproduct() || product.isIswarehouseforproduct() || product.isIsrowforproduct() || product.isIsrackforproduct() || product.isIsbinforproduct() || product.isIsSerialForProduct()) {
                                    documentIDs.append("'" + deliveryOrderDetail.getID() + "'").append(",");
                                }else{
                                    documentIDsforWithotWLBSP.append("'" + deliveryOrderDetail.getID() + "'").append(",");
                                }
                            }
                        }
                    }
                    }
                    Map<String, Object> batchSerialReqMap = new HashMap<>();
                     Map<String, List<Object[]>> baMap = new HashMap<>();
                    if(!isOptimizedExport){
                    batchSerialReqMap.put(Constants.companyKey, companyid);
                    batchSerialReqMap.put(Constants.df, df);
                    batchSerialReqMap.put("linkingFlag", linkingFlag);
                    batchSerialReqMap.put("isEdit", isEdit);
                        batchSerialReqMap.put("readOnly", readOnly);
                    batchSerialReqMap.put(Constants.isConsignment, isConsignment);
                    batchSerialReqMap.put("srflag", srflag);
                    batchSerialReqMap.put("moduleID", moduleid);
                    if (documentIDs.length() > 0) {
                        batchSerialReqMap.put("documentIds", documentIDs.substring(0, documentIDs.length() - 1));
                        baMap = getBatchDetailsMap(batchSerialReqMap);
                    }
                    }
                    for (DeliveryOrderDetail row : resultList) {
                        Product rowProduct = row.getProduct();
                        double baseuomrate = row.getInventory().getBaseuomrate();
                        double invoiceRowProductQty = authHandler.calculateBaseUOMQuatity(row.getDeliveredQuantity(), baseuomrate, companyid);
                        double remainedQty = invoiceRowProductQty;// which has not been linked yet
                        JSONObject obj = new JSONObject();
                        obj.put(Constants.billid, dorder.getID());
                        obj.put(InvoiceConstants.billno, dorder.getDeliveryOrderNumber());
                        obj.put(GoodsReceiptCMNConstants.EXTERNALCURRENCYRATE, dorder.getExternalCurrencyRate());
                        obj.put("srno", row.getSrno());
                        obj.put("productname", rowProduct.getName());
                        if(!isOptimizedExport){
                        obj.put("rowid", row.getID());
                        obj.put("dorowid", row.getID());
                        obj.put(InvoiceConstants.currencysymbol, (dorder.getCurrency() == null ? currency.getSymbol() : dorder.getCurrency().getSymbol()));
                        obj.put("originalTransactionRowid", row.getID());
                        obj.put("productid", rowProduct.getID());
                        obj.put("purchasetaxId", rowProduct.getPurchasetaxid());
                        obj.put("salestaxId", rowProduct.getSalestaxid());
                        obj.put("barcodetype", rowProduct.getBarcodefield());  //ERM-304
                        obj.put("hasAccess", rowProduct.isIsActive());
                        obj.put("isAutoAssembly", rowProduct.isAutoAssembly());
                        obj.put("invstore", (StringUtil.isNullOrEmpty(row.getInvstoreid())) ? "" : row.getInvstoreid());
                        obj.put("invlocation", (StringUtil.isNullOrEmpty(row.getInvlocid())) ? "" : row.getInvlocid());
                        obj.put("isAsset", rowProduct.isAsset());
                        obj.put("isWastageApplicable", rowProduct.isWastageApplicable());
                        obj.put("unitname", row.getInventory().getUom() != null ? row.getInventory().getUom().getNameEmptyforNA() : rowProduct.getUnitOfMeasure() == null ? "" : rowProduct.getUnitOfMeasure().getNameEmptyforNA());
                        obj.put("multiuom", rowProduct.isMultiuom());
                        obj.put("uomname", (row.getUom() != null) ? row.getUom().getNameEmptyforNA() : "");
                            obj.put("documentids", documentIDsforWithotWLBSP.length() > 0 ? (documentIDsforWithotWLBSP.substring(0, documentIDsforWithotWLBSP.length() - 1)) : "");
                            obj.put("recTermAmount", row.getRowTermAmount());
                        }
                        obj.put("baseuomname", rowProduct.getUnitOfMeasure() == null ? "" : rowProduct.getUnitOfMeasure().getNameEmptyforNA());
                        JSONObject jObj = null;
                        if (!StringUtil.isNullOrEmpty(extraCompanyPreferences.getColumnPref())) {
                            jObj = new JSONObject((String) extraCompanyPreferences.getColumnPref());
                            if (jObj.has(Constants.isDisplayUOM) && jObj.get(Constants.isDisplayUOM) != null && (Boolean) jObj.get(Constants.isDisplayUOM) != false) {
                                obj = accProductObj.getProductDisplayUOM(rowProduct, row.getDeliveredQuantity(), baseuomrate, false, obj);
                            }
                        }
                        if(countryid == Constants.indian_country_id && !isOptimizedExport){
                            obj.put("formtypeid", dorder.getFormtype());
                            obj.put("isInterstateParty", (dorder.getCustomer() !=null ? dorder.getCustomer().isInterstateparty() : false));
                        }
                        if (extraCompanyPreferences.getLineLevelTermFlag()==1 && !isOptimizedExport) {
                            JSONArray TermdetailsjArr = new JSONArray();
                            if (extraCompanyPreferences.isAvalaraIntegration()) {//In case of Avalara Integration, fetch Tax details from Avalara tax mapping table
                                JSONObject paramsForTaxJobj = new JSONObject();
                                paramsForTaxJobj.put(IntegrationConstants.parentRecordID, row.getID());
                                TermdetailsjArr = integrationCommonService.getTransactionDetailTaxMapping(paramsForTaxJobj);
                            } else {
                                TermdetailsjArr = accInvoiceDAOobj.getDODetailsTermMap(row.getID());
                            }
                            obj.put("LineTermdetails", TermdetailsjArr.length() > 0 ? TermdetailsjArr.toString() : "");
                        }
                        
                        if (!StringUtil.isNullOrEmpty(row.getDescription())) {
                            description = row.getDescription();
                        } else {
                            description = "";
                        }
                      
                        /**
                         * Put GST Tax Class History.
                         */
                        if (row.getCompany().getCountry().getID().equalsIgnoreCase("" + Constants.indian_country_id) && !isOptimizedExport) {
                            obj.put("refdocid", row.getID());
                            fieldDataManagercntrl.getGSTTaxClassHistory(obj);
                        }

                        String linedesc = "";//Description is encoded for Web-application & Mobile Apps
                        try {
                            linedesc = StringUtil.DecodeText(description);
                        } catch (Exception ex) {
                            linedesc = description;
                        }

                        obj.put("desc", linedesc);
                        obj.put("description",linedesc);
                        if (rowProduct.isAsset()) {     //For Fixed Asset Group, type will be "Asset"
                            obj.put("type", "Asset");
                        } else {
                            obj.put("type", rowProduct.getProducttype() == null ? "" : rowProduct.getProducttype().getName());
                            obj.put("prodtype",rowProduct.getProducttype() == null ? "" :rowProduct.getProducttype().getID());// Put producttype for GST calculation in lease
                        }
                        obj.put("pid", rowProduct.getProductid());
                        if(!isOptimizedExport){
                            obj.put("bomid", row.getBomcode() != null ? row.getBomcode().getID() : "");
                            obj.put("bomCode", row.getBomcode() != null ? row.getBomcode().getBomCode() : "");    //Get The Assembly Product BOM Code in DO Report.
                            String buildno = row.getProductbuild() != null ? row.getProductbuild().getRefno() : "";
                            if (isCopy) {
                            obj.put("autobuildnumber", ""); //Do not show Build Assembly no. in copy case at Grid level
                        } else {
                            obj.put("autobuildnumber", buildno);    //Get The Assembly Product Auto Generated Build Assembly No.    //SDP-4211
                        }
                        obj.put(Constants.memo, row.getRemark());
                        if (storageHandlerImpl.GetSATSCompanyId().contains(companyid)) {
                            obj.put("showquantity", row.getDeliveredQuantity());
                        }
                        obj.put("blockLooseSell", rowProduct.isblockLooseSell());
                        }
                        obj.put("quantity", row.getActualQuantity());

                        String productsBaseUomId = (rowProduct.getUnitOfMeasure() == null) ? "" : rowProduct.getUnitOfMeasure().getID();
                        String selectedUomId = (row.getUom() != null) ? row.getUom().getID() : "";

                        if (rowProduct.isblockLooseSell() && !productsBaseUomId.equals(selectedUomId) && !isOptimizedExport) {
                            // Get Available Quantity of Product For Selected UOM
                            KwlReturnObject qtyResult = accProductObj.getAvailableQuantityInSelectedUOM(rowProduct.getID(), selectedUomId);
                            double availableQuantity = qtyResult.getEntityList().get(0) == null ? 0 : (Double) qtyResult.getEntityList().get(0);
                            obj.put("availableQtyInSelectedUOM", availableQuantity);
                            obj.put("isAnotherUOMSelected", true);

                            // Getting Open PO/SO count
                            HashMap<String, Object> orderParams = new HashMap<String, Object>();
                            orderParams.put(Constants.companyKey, companyid);
                            orderParams.put(Constants.globalCurrencyKey, gcurrencyid);
                            orderParams.put(Constants.df, authHandler.getDateOnlyFormat());
                            orderParams.put("pendingapproval", false);
                            orderParams.put(Constants.REQ_startdate, authHandler.getDates(preferences.getFinancialYearFrom(), true));
                            orderParams.put(Constants.REQ_enddate, authHandler.getDates(preferences.getFinancialYearFrom(), false));
                            orderParams.put("currentuomid", selectedUomId);
                            orderParams.put("productId", rowProduct.getID());
                            orderParams.put("isAutoAssembly", rowProduct.isAutoAssembly());

                            double pocountinselecteduom = accSalesOrderServiceDAOobj.getPOCount(orderParams);
                            double socountinselecteduom = accSalesOrderServiceDAOobj.getSOCount(orderParams);
                            obj.put("pocountinselecteduom", pocountinselecteduom);
                            obj.put("socountinselecteduom", socountinselecteduom);
                        }

                        if (rowProduct != null && !StringUtil.isNullOrEmpty(rowProduct.getID()) && !isOptimizedExport) {
                            Product product = rowProduct;//(Product) prodresult.getEntityList().get(0);
                            isLocationForProduct = product.isIslocationforproduct();
                            isWarehouseForProduct = product.isIswarehouseforproduct();
                            isBatchForProduct = product.isIsBatchForProduct();
                            isSerialForProduct = product.isIsSerialForProduct();
                            isSKUForProduct = product.isIsSKUForProduct();
                            isRowForProduct = product.isIsrowforproduct();
                            isRackForProduct = product.isIsrackforproduct();
                            isBinForProduct = product.isIsbinforproduct();
                            productsDefaultLocation=(product.getLocation()!=null && product.getLocation().getId()!=null)?product.getLocation().getId():"";
                            productsDefaultWarehouse=(product.getWarehouse()!=null && product.getWarehouse().getId()!=null)?product.getWarehouse().getId():"";
                            if(extraCompanyPreferences!=null && extraCompanyPreferences.getUomSchemaType()==Constants.PackagingUOM){
                                obj.put("caseuom", (product.getPackaging()!=null && product.getPackaging().getCasingUoM()!=null)?product.getPackaging().getCasingUoM().getID():"");
                                obj.put("caseuomvalue", (product.getPackaging()!=null && product.getPackaging().getCasingUoM()!=null)?product.getPackaging().getCasingUomValue():1);
                                obj.put("inneruom", (product.getPackaging()!=null && product.getPackaging().getInnerUoM()!=null)?product.getPackaging().getInnerUoM().getID():"");
                                obj.put("inneruomvalue", (product.getPackaging()!=null && product.getPackaging().getInnerUoM()!=null)?product.getPackaging().getInnerUomValue():1);
                                obj.put("stockuom", (product.getUnitOfMeasure()!=null)?product.getUnitOfMeasure().getID():"");
                            }
                        }
                        if(!isOptimizedExport){
                    obj.put("isLocationForProduct", isLocationForProduct);
                    obj.put("isWarehouseForProduct", isWarehouseForProduct);
                    obj.put("isBatchForProduct", isBatchForProduct);
                    obj.put("isSerialForProduct", isSerialForProduct);
                    obj.put("isSKUForProduct", isSKUForProduct);
                    obj.put("isRowForProduct", isRowForProduct);
                    obj.put("isRackForProduct", isRackForProduct);
                    obj.put("isWarehouseLocationsetCopyCase", false);
                    obj.put("isBinForProduct", isBinForProduct);
                    obj.put("location", productsDefaultLocation);
                    obj.put("warehouse", productsDefaultWarehouse);
                    obj.put("isQAEnable", row.getProduct().isQaenable());
                        }
                        if(!isOptimizedExport){
                            if ((preferences.isIsBatchCompulsory() || preferences.isIsSerialCompulsory() || preferences.isIslocationcompulsory() || preferences.isIswarehousecompulsory() || preferences.isIsrowcompulsory() || preferences.isIsrackcompulsory() || preferences.isIsbincompulsory()) && !isCopy) {  //check if company level option is on then only we will check productt level -&& !isfromconsignreturn
                        if (isBatchForProduct || isSerialForProduct || isSerialForProduct || isLocationForProduct || isWarehouseForProduct || isRowForProduct || isRackForProduct || isBinForProduct) {  //product level batch and serial no on or not
                                    if (extraCompanyPreferences.isAutoFillBatchDetails() && !isConsignment && !isFixedAsset && !isLeaseFixedAsset) {
                                obj.put("batchdetails", getNewBatchDetailJson(batchSerialReqMap, rowProduct, row.getID(), serialModulefieldMap, baMap, replaceFieldMap2, customFieldMap2, customDateFieldMap2));
                            } else if (extraCompanyPreferences.isPickpackship()) {
                                /**
                                         * If Pick Pack Ship Enable then get
                                         * Batch details from IST
                                 */
                                batchSerialReqMap.put("dodid", row.getID());
                                obj.put("batchdetails", getBatchJsonUsingIST(batchSerialReqMap));
                                    } else {
                                    obj.put("batchdetails", getNewBatchJson(batchSerialReqMap, rowProduct, row.getID(), serialModulefieldMap, baMap, replaceFieldMap2, customFieldMap2, customDateFieldMap2));
                                }
                            } else if (!(isLocationForProduct || isWarehouseForProduct || isRowForProduct || isRackForProduct || isBinForProduct || isBatchForProduct || isSerialForProduct) && !(isFixedAsset)) {// As discussed with Ajit G. I have added Fixed asset check.
                                obj.put("batchdetails", getNewBatchJsonForWithoutWLBSProduct(batchSerialReqMap, rowProduct, row.getID()));
                            }
                            } else if ((preferences.isIsBatchCompulsory() || preferences.isIsSerialCompulsory() || preferences.isIslocationcompulsory() || preferences.isIswarehousecompulsory() || preferences.isIsrowcompulsory() || preferences.isIsrackcompulsory() || preferences.isIsbincompulsory()) && isCopy && !isfromconsignreturn) {  //check if company level option is on then only we will check productt level
                            if ((isLocationForProduct || isWarehouseForProduct || isRowForProduct || isRackForProduct || isBinForProduct) && !(isBatchForProduct || isSerialForProduct)) {  //product level batch and serial no on or not
                                obj.put("batchdetails", getNewBatchJson(batchSerialReqMap, rowProduct, row.getID(), serialModulefieldMap, baMap, replaceFieldMap2, customFieldMap2, customDateFieldMap2));
                            }
                        }
                        obj.put("warrantyperiod", row.getProduct().getWarrantyperiod());
                        obj.put("warrantyperiodsal", row.getProduct().getWarrantyperiodsal());

                        KwlReturnObject resultavaiqty = accProductObj.getQuantity(rowProduct.getID());
                        obj.put("availablequantity", (resultavaiqty.getEntityList().get(0) == null ? 0 : resultavaiqty.getEntityList().get(0)));

                        KwlReturnObject result2 = accProductObj.getAssemblyLockQuantity(rowProduct.getID()); //get the lock quantity locked in assembly type of product in SO
                        Double assmblyLockQuantity = (Double) (result2.getEntityList().get(0) == null ? 0.0 : result2.getEntityList().get(0));

                        KwlReturnObject result1 = accProductObj.getLockQuantity(rowProduct.getID());//get the lock quantity locked in inventory type of product in  all SO
                        Double SoLockQuantity = (Double) (result1.getEntityList().get(0) == null ? 0.0 : result1.getEntityList().get(0));
                            obj.put("lockquantity", assmblyLockQuantity + SoLockQuantity);  //total lock quantity of product locked in SO
                            obj.put("baseuomrate", baseuomrate);
                            obj.put("productweightperstockuom", row.getInventory().getProductWeightPerStockUom());
                            obj.put("productweightincludingpakagingperstockuom", row.getInventory().getProductWeightIncludingPakagingPerStockUom());
                            obj.put("productvolumeperstockuom", row.getInventory().getProductVolumePerStockUom());
                            obj.put("productvolumeincludingpakagingperstockuom", row.getInventory().getProductVolumeIncludingPakagingPerStockUom());
                            obj.put("copyquantity", row.getDeliveredQuantity());
                            obj.put("partno", (row.getPartno() != null) ? row.getPartno() : "");
                            obj.put("discountispercent", row.getDiscountispercent());
                            obj.put("prdiscount", row.getDiscount());
                            obj.put("discountjson", row.getDiscountJson() != null ? row.getDiscountJson() : "");         //getting json of multiple discount applied on product ERM-68
                            obj.put("rateIncludingGst", authHandler.roundUnitPrice(row.getRateincludegst(), companyid));
                            obj.put(Constants.isConsignment, dorder.isIsconsignment());
                            obj.put("isFromVendorConsign", row.isIsFromVendorConsign());
                            obj.put("isreusable", row.getProduct().getItemReusability() != null ? row.getProduct().getItemReusability().ordinal() : 1);
                        }

                        KwlReturnObject result3 = accProductObj.getInvoiceQuantity(rowProduct.getID(),companyid);//get the Invoice quantity locked in inventory type of product in  all SO
                        Double invoiceQuantity = (Double) (result3.getEntityList().get(0) == null ? 0.0 : result3.getEntityList().get(0));

                        KwlReturnObject result4 = accProductObj.getDOtoReturnQtyByProductBatch(row.getID(),rowProduct.getID(),companyid);//get the Customer quantity locked in inventory type of product in  all SO
                        Double doQuantity = (Double) (result4.getEntityList().get(0) == null ? 0.0 : result4.getEntityList().get(0));


                        obj.put("dquantity", row.getDeliveredQuantity());
                        if(!isOptimizedExport){
                        if (row.getInventory().getUom() != null) {
                            obj.put("baseuomid", row.getInventory().getProduct().getUnitOfMeasure() != null ? row.getInventory().getProduct().getUnitOfMeasure().getID() : "");
                            obj.put("uomid", row.getInventory().getUom().getID());
                        } else {
                            obj.put("baseuomid", row.getInventory().getProduct().getUnitOfMeasure() != null ? row.getInventory().getProduct().getUnitOfMeasure().getID() : "");
                            obj.put("uomid", row.getInventory().getProduct().getUnitOfMeasure() != null ? row.getInventory().getProduct().getUnitOfMeasure().getID() : "");
                        }
                        }
                        obj.put("baseuomquantity", authHandler.calculateBaseUOMQuatity(row.getDeliveredQuantity(), baseuomrate, companyid));
                        obj.put("remark", row.getRemark());
                        if (dorder.isIsconsignment() && !isOptimizedExport) {
                            if (dorder.getCustWarehouse() != null) {
                                obj.put("custWarehouse", dorder.getCustWarehouse().getId()); //for getting customer warehouse
                            }
                            if (row.getSodetails() != null && row.getSodetails().getSalesOrder() != null) {
                                obj.put("requestWarehouse", row.getSodetails().getSalesOrder().getRequestWarehouse() != null ? row.getSodetails().getSalesOrder().getRequestWarehouse().getId() : "");
                                obj.put("requestLocation", row.getSodetails().getSalesOrder().getRequestLocation() != null ? row.getSodetails().getSalesOrder().getRequestLocation().getId() : "");
                            }
                            obj.put("lineLevelstatus", row.isIsLineItemClosed());
                            if (!closeflag) {
                                obj.put("itemqtyLinkedinSR", getDeliveryOrderDetailStatusFORSR(row)); // Return Quantity remaning to Link
                            }

                        }
                        if(!isOptimizedExport){

                        // get Contract from delivery order
                        if (linkingFlag && isForInvoice && contract != null) {
                            double unitPricePerInvoice = row.getRate();
                            int numberOfPeriods = contract.getNumberOfPeriods();
                            if (numberOfPeriods > 0) {
                                unitPricePerInvoice = row.getRate() / numberOfPeriods;
                            }
                            obj.put("rate", unitPricePerInvoice);
                        } else {
                            obj.put("rate", row.getRate());
                        }

                            if (row.getPricingBandMasterid() != null) {
                                KwlReturnObject PricebandResult = accountingHandlerDAOobj.getObject(PricingBandMaster.class.getName(), row.getPricingBandMasterid());
                                PricingBandMaster pricingBandMaster = PricebandResult != null ? (PricingBandMaster) PricebandResult.getEntityList().get(0) : null;
                                obj.put("pricingbandmasterid", pricingBandMaster != null ? pricingBandMaster.getID() : "");
                                obj.put("pricingbandmastername", pricingBandMaster != null ? pricingBandMaster.getName() : "");
                            }
                            /**
                             * below code will execute when amend price
                             * fuctionality is activated.
                             */
                            String uomidForamendprice = (row.getUom() != null) ? row.getUom().getID() : rowProduct.getUnitOfMeasure() != null ? rowProduct.getUnitOfMeasure().getID() : "";
                            accProductObj.getamendingPurchaseprice(rowProduct.getID(),userId,row.getDeliveryOrder().getOrderDate(),currency.getCurrencyID(), uomidForamendprice,obj);    
                        obj.put("priceSource", row.getPriceSource() != null ? row.getPriceSource() : "");
                        }

                        HashMap<String, Object> fieldrequestParamsProduct = new HashMap();
                        Map<String, Object> variableMapProduct = new HashMap<String, Object>();
                        HashMap<String, String> replaceFieldMapProduct = (HashMap) CustomFieldMap.get("replaceFieldMapProduct");
                        HashMap<String, Integer> FieldMapProduct = (HashMap) CustomFieldMap.get("FieldMapProduct");
                        KwlReturnObject resultProduct = accountingHandlerDAOobj.getObject(DeliveryOrderDetailProductCustomData.class.getName(), row.getID());
                        DeliveryOrderDetailProductCustomData objProduct = (DeliveryOrderDetailProductCustomData) resultProduct.getEntityList().get(0);

                        if (objProduct != null) {
                            JSONObject params = new JSONObject();
                            params.put(Constants.userdf, userDateFormat);
                            params.put(Constants.isExport, isExport);
                            params.put(Constants.isForReport, isForReport);
                            setCustomColumnValuesForProduct(objProduct, FieldMapProduct, replaceFieldMapProduct, variableMapProduct, params);
                            for (Map.Entry<String, Object> varEntry : variableMapProduct.entrySet()) {
                                String coldata = varEntry.getValue().toString();
                                if (!StringUtil.isNullOrEmpty(coldata)) {
                                    obj.put(varEntry.getKey(), coldata);
                                    obj.put("key", varEntry.getKey());
                                }
                            }
                        }
                        double partamount=0;
                        if (!linkingFlag && !isOptimizedExport) {
                            if (row.getCidetails() != null) {
                                obj.put("linkid", row.getCidetails().getInvoice().getID());
                                /*
                                 ERM-1037
                                 Field used for comparing dates to restrict linking of future doument date in Delivery order document editing
                                 */
                                obj.put("linkDate", row.getCidetails().getInvoice().getCreationDate());
                                obj.put("rowid", row.getCidetails().getID());
                                obj.put("savedrowid", row.getCidetails().getID());
                                obj.put("docrowid", row.getID());
                                obj.put("linktype", 1);
                                /* If DO have been linked with Partial Invoice 
                                 then Partamount is calculating for identifying purpose at JS side
                                 */
                                if (row.getCidetails().getInvoice().isPartialinv()) {
                                    partamount = row.getCidetails().getPartamount();
                                    obj.put("partamount", partamount);
                                }
                            } else if (row.getSodetails() != null) {
                                obj.put("linkid", row.getSodetails().getSalesOrder().getID());
                                /*
                                 ERM-1037
                                 Field used for comparing dates to restrict linking of future doument date in Delivery order document editing
                                 */
                                obj.put("linkDate", row.getSodetails().getSalesOrder().getOrderDate());
                                obj.put("rowid", row.getSodetails().getID());
                                obj.put("savedrowid", row.getSodetails().getID());
                                obj.put("docrowid", row.getID()); 
                                /* linktype value  is for showing linkTo as following values in DO in editcase and view case ERP-40939
                                 linktype 0= saleorder 1=salesinvoide 2=jobworkorder*/
                                if (row.getSodetails().getSalesOrder().isIsJobWorkOrder()) {
                                    obj.put("linktype", 2);
                                } else {
                                    obj.put("linktype", 0);
                                    }
                                obj.put("islockQuantityflag", row.getSodetails().getSalesOrder().isLockquantityflag());
                            } else {
                                obj.put("linkid", "");
                                obj.put("linktype", -1);
                            }
                        }
                        if (!linkingFlag) {
                            if (row.getCidetails() != null) {
                                obj.put("linkto", row.getCidetails().getInvoice().getInvoiceNumber());
                            } else if (row.getSodetails() != null) {
                                obj.put("linkto", row.getSodetails().getSalesOrder().getSalesOrderNumber());
                            } else {
                                obj.put("linkto", "");
                            }
                        }
                        if (dorder.isFixedAssetDO() || dorder.isLeaseDO()) {
                            getASsetDetailsJson(row, companyid, obj, df, preferences, request, contract);
                        }
                        if(!isOptimizedExport){
                        // For getting wastage details
                        getWastageDetailsJson(row, obj, companyid);
                        }

                        Map<String, Object> variableMap = new HashMap<String, Object>();
                        DeliveryOrderDetailCustomData deliveryOrderDetailCustomData = (DeliveryOrderDetailCustomData) row.getDeliveryOrderDetailCustomData();
                        HashMap<String, String> replaceFieldMap = new HashMap<String, String>();
                        AccountingManager.setCustomColumnValues(deliveryOrderDetailCustomData, fieldMap, replaceFieldMap, variableMap);
                        if (deliveryOrderDetailCustomData != null) {
                            JSONObject params = new JSONObject();
                            params.put(Constants.isExport, isExport);
                            params.put(Constants.isForReport, isForReport);
                            params.put(Constants.userdf, userDateFormat);

                            /*--- generateInvoiceFromTransactionForms ->Flag is true if invoice is generated from DO form------*/
                            boolean generateInvoiceFromTransactionForms = (StringUtil.isNullOrEmpty(request.getParameter("generateInvoiceFromTransactionForms"))) ? false : Boolean.parseBoolean(request.getParameter("generateInvoiceFromTransactionForms"));
                            if (linkingFlag || srflag || linkDisposalINV || FA_DOGRlinkFlag || generateInvoiceFromTransactionForms) {
                                int moduleId = isFixedAsset ? Constants.Acc_FixedAssets_PurchaseInvoice_ModuleId : srflag ? Constants.Acc_Sales_Return_ModuleId : Constants.Acc_Invoice_ModuleId;
                                if (isLeaseFixedAsset) {
                                    moduleId = srflag ? Constants.Acc_Lease_Return : Constants.LEASE_INVOICE_MODULEID;
                                } else if (isConsignment) {
                                    moduleId = Constants.Acc_ConsignmentSalesReturn_ModuleId;
                                } else if (linkDisposalINV) {
                                    moduleId = Constants.Acc_FixedAssets_DisposalInvoice_ModuleId;
                                } else if (FA_DOGRlinkFlag) {
                                    moduleId = Constants.Acc_FixedAssets_Sales_Return_ModuleId;
                                }
                                params.put("linkModuleId", moduleId);
                                params.put("isLink", true);
                                params.put(Constants.companyKey, companyid);
                            }
                            fieldDataManagercntrl.getLineLevelCustomData(variableMap, customFieldMap, customDateFieldMap, obj, params);
                        }

                        if (closeflag) {
                            double quantity = 0;
                            if (srflag) {
                                quantity = getDeliveryOrderDetailStatusFORSR(row);
                                if (invoiceQuantity > 0 && doQuantity > 0 && isConsignment && doQuantity < quantity) {
                                    quantity = doQuantity;
                                }
                                if(isConsignment && row.isIsLineItemClosed()){
                                    quantity = 0;
                                }
                                if (linkingFlag) {
                                    String dodid = row.getID();
                                    double returnQty = 0;
                                    returnQty = accInvoiceDAOobj.getReturnQuantityofDOorSI(dodid, companyid, true);
                                    if (returnQty !=0 && (quantity-returnQty != 0)) {
                                        quantity = quantity - returnQty;
                                    }
                                }
                            } else {
                                // As in invoice we dont need to show those quantity whose return is already done  ERP-13460 Sales Return is done but Delivery Order is not updated when Invoice
                                quantity = getDeliveryOrderDetailStatus(row);
                            }

                            obj.put("quantity", quantity);
                            obj.put("dquantity", quantity);
                            obj.put("baseuomquantity", authHandler.calculateBaseUOMQuatity(quantity, baseuomrate, companyid));
                            obj.put("baseuomrate", baseuomrate);

                            remainedQty = authHandler.calculateBaseUOMQuatity(quantity, baseuomrate, companyid);

                        } else {
                            obj.put("quantity", row.getActualQuantity());
                            obj.put("baseuomquantity", authHandler.calculateBaseUOMQuatity(row.getDeliveredQuantity(), baseuomrate, companyid));
                            obj.put("baseuomrate", baseuomrate);
                        }
                        if(!isOptimizedExport){
                        obj.put("prtaxid", (row.getTax() != null) ? row.getTax().getID() : "None");
//                        obj.put("prtaxid", row.getTax() != null ? (isCopy || linkingFlag ? (row.getTax().isActivated() ? row.getTax().getID() : "") : row.getTax().getID()) : "None");//ERP-38656
                        obj.put("taxamount", row.getRowTaxAmount());
                        obj.put("rowTaxAmount", row.getRowTaxAmount());
                        obj.put(Constants.isUserModifiedTaxAmount, row.isIsUserModifiedTaxAmount());

                        double rowTaxPercent = 0;
                        if (row.getTax() != null && invoiceRowProductQty > 0) {

                            KwlReturnObject perresult = accTaxObj.getTaxPercent((String) requestParams.get(Constants.companyKey), row.getDeliveryOrder().getOrderDate(), row.getTax().getID());
                            rowTaxPercent = (Double) perresult.getEntityList().get(0);
                            double rowTaxAmount = row.getRowTaxAmount();
                            double taxAmt = (rowTaxAmount / invoiceRowProductQty) * remainedQty;
                            obj.put("taxamount", taxAmt);
                            obj.put("rowTaxAmount", taxAmt);

                            if (linkingFlag && isForInvoice && contract != null) {
                                int numberOfPeriods = contract.getNumberOfPeriods();
                                if (numberOfPeriods > 0) {
                                    taxAmt = taxAmt / numberOfPeriods;
                                }

                                obj.put("taxamount", taxAmt);
                                obj.put("rowTaxAmount", taxAmt);
                            }
                        }
                        obj.put("rowTaxPercent", rowTaxPercent);
                        }
                        if (closeflag && (srflag || isLeaseFixedAsset || isForLinking)) {  //in sales return do not show the row which is already used
                            if (remainedQty > 0) {
                                jArr.put(obj);
                            }
                        } else {
                            jArr.put(obj);
                        }
                    }
                }
                i++;
                jobj.put("data", jArr);
            }
        } catch (JSONException je) {
            throw ServiceException.FAILURE(je.getMessage(), je);
        } 
        return jobj;
    }

   @Override 
    public double getNewBatchRemainingQuantity(String locationid, String warehouseid, String companyId, String productid, String purchasebatchid, String transType, boolean isEdit, String documentid) throws ServiceException {
        return getNewBatchRemainingQuantity(locationid, warehouseid, companyId, productid, purchasebatchid, transType, isEdit, documentid,null, false);
    }
    
   public double getNewBatchRemainingQuantity(String locationid, String warehouseid, String companyId, String productid, String purchasebatchid, String transType,boolean isEdit,String documentid,String stockType, boolean readOnly) throws ServiceException {
   double quantity = 0.0;
        double srquantity = 0.0;
        try {
            int stktype=1;
            HashMap<String, Object> filterRequestParams = new HashMap<String, Object>();
            HashMap<String, Object> filterRequestParamsforEdit = new HashMap<String, Object>();
            ExtraCompanyPreferences extraCompanyPreferences = null;
            KwlReturnObject extraprefresult = accountingHandlerDAOobj.getObject(ExtraCompanyPreferences.class.getName(), companyId);
            extraCompanyPreferences = extraprefresult != null ? (ExtraCompanyPreferences) extraprefresult.getEntityList().get(0) : null;
            ArrayList filter_names = new ArrayList(), filter_params = new ArrayList(), order_by = new ArrayList(), order_type = new ArrayList();
            ArrayList filter_namesforEdit = new ArrayList(), filter_paramsforEdit = new ArrayList();
            filter_names.add("company.companyID");
            filter_params.add(companyId);
            if (!StringUtil.isNullOrEmpty(stockType)&&"0".equals(stockType)) {
                stktype=Integer.parseInt(stockType);
                filter_names.add(">(consignquantity)");
                filter_params.add(0.0);
            }
            if (!StringUtil.isNullOrEmpty(warehouseid)) {
                filter_names.add("warehouse.id");
                filter_params.add(warehouseid);
            }
            if (!StringUtil.isNullOrEmpty(locationid)) {
                filter_names.add("location.id");
                filter_params.add(locationid);
            }
            if (!StringUtil.isNullOrEmpty(purchasebatchid)) {
                filter_names.add("id");
                filter_params.add(purchasebatchid);
            }

            filter_names.add("product");
            filter_params.add(productid);

            filterRequestParams.put(Constants.filterNamesKey, filter_names);
            filterRequestParams.put(Constants.filterParamsKey, filter_params);
            filterRequestParams.put("order_by", order_by);
            filterRequestParams.put("order_type", order_type);
            KwlReturnObject result = accMasterItemsDAOobj.getNewBatches(filterRequestParams, false, false);
            int inttransType = 0;
            if (!StringUtil.isNullOrEmpty(transType)) {
                inttransType = Integer.parseInt(transType);
            }
            List<NewProductBatch> listResult = result.getEntityList();
            for (NewProductBatch newProductBatch : listResult) {
                HashMap<String, Object> filterParamsForPRBatch = new HashMap<String, Object>();
                ArrayList PRfilter_names = new ArrayList(), PRfilter_params = new ArrayList();
                if (inttransType == Constants.Acc_Sales_Return_ModuleId) {
                    PRfilter_names.add("ispurchasereturn");
                    PRfilter_params.add(false);
                    PRfilter_names.add("transactiontype");
                    PRfilter_params.add(27);
                    PRfilter_names.add("batchmapid.id");
                    PRfilter_params.add(newProductBatch.getId());
                    filterParamsForPRBatch.put(Constants.filterNamesKey, PRfilter_names);
                    filterParamsForPRBatch.put(Constants.filterParamsKey, PRfilter_params);
                    KwlReturnObject PRresult = accMasterItemsDAOobj.getPRBatchQuantity(filterParamsForPRBatch);
                    List<LocationBatchDocumentMapping> locationResult = PRresult.getEntityList();
                    for (LocationBatchDocumentMapping locationBatchDocumentMapping : locationResult) {
                        quantity = quantity + locationBatchDocumentMapping.getQuantity();
                    }
                    //for Sales return we are showing those quantity whose DO has been made
                    HashMap<String, Object> filterParamsForSRBatch = new HashMap<String, Object>();
                    ArrayList SRfilter_names = new ArrayList(), SRfilter_params = new ArrayList();
                    SRfilter_names.add("ispurchasereturn");
                    SRfilter_params.add(false);
                    SRfilter_names.add("transactiontype");
                    SRfilter_params.add(29);
                    SRfilter_names.add("batchmapid.id");
                    SRfilter_params.add(newProductBatch.getId());
                    filterParamsForSRBatch.put(Constants.filterNamesKey, SRfilter_names);
                    filterParamsForSRBatch.put(Constants.filterParamsKey, SRfilter_params);
                    KwlReturnObject SRresult = accMasterItemsDAOobj.getPRBatchQuantity(filterParamsForSRBatch);
                    List<LocationBatchDocumentMapping> SRLocResult = SRresult.getEntityList();
                    for (LocationBatchDocumentMapping locationBatchDocumentMapping : SRLocResult) {
                        srquantity = srquantity + locationBatchDocumentMapping.getQuantity();
                    }
                    quantity = quantity - srquantity;
                } else {


                    double dueQty = stktype==1?newProductBatch.getQuantitydue():newProductBatch.getConsignquantity();
                    if (dueQty > 0) {
                        quantity = quantity + dueQty;
                    } else if (dueQty < 0) {
                        quantity = quantity + dueQty;
                    }
                }
            }
            if (isEdit && !StringUtil.isNullOrEmpty(documentid) && !extraCompanyPreferences.isPickpackship() && !readOnly) {

                if (!StringUtil.isNullOrEmpty(warehouseid)) {
                    filter_namesforEdit.add("batchmapid.warehouse.id");
                    filter_paramsforEdit.add(warehouseid);
                }
                if (!StringUtil.isNullOrEmpty(locationid)) {
                    filter_namesforEdit.add("batchmapid.location.id");
                    filter_paramsforEdit.add(locationid);
                }
                if (!StringUtil.isNullOrEmpty(purchasebatchid)) {
                    filter_namesforEdit.add("batchmapid.id");
                    filter_paramsforEdit.add(purchasebatchid);
                }
                if (!StringUtil.isNullOrEmpty(documentid)) {
                    filter_namesforEdit.add("documentid");
                    filter_paramsforEdit.add(documentid);
                }
                if (!StringUtil.isNullOrEmpty(stockType)) {
                    filter_namesforEdit.add("stocktype");
                    filter_paramsforEdit.add(stktype);
                }

                filter_namesforEdit.add("ispurchasereturn");
                filter_paramsforEdit.add(false);
                filter_namesforEdit.add("transactiontype");
                filter_paramsforEdit.add(inttransType);

                filterRequestParamsforEdit.put(Constants.filterNamesKey, filter_namesforEdit);
                filterRequestParamsforEdit.put(Constants.filterParamsKey, filter_paramsforEdit);
                KwlReturnObject PRresult = accMasterItemsDAOobj.getPRBatchQuantity(filterRequestParamsforEdit);
                List<LocationBatchDocumentMapping> locationResult = PRresult.getEntityList();
                for (LocationBatchDocumentMapping locationBatchDocumentMapping : locationResult) {
                    quantity = quantity + locationBatchDocumentMapping.getQuantity();
                }
            } else if (extraCompanyPreferences.isPickpackship()) {
                /**
                 * Get Available Qty from InterStore
                 */
                Map reqParam = new HashMap();
                reqParam.put("dodid", documentid);
                reqParam.put("locationid", locationid);
                reqParam.put("warehouseid", warehouseid);
                KwlReturnObject result1 = accMasterItemsDAOobj.getBatchRemainingQtyFromIST(reqParam);
                List l = result1.getEntityList();
                for (Iterator it = l.iterator(); it.hasNext();) {
                    quantity = quantity + (double) it.next();

                }
            }

        } catch (Exception ex) {
            Logger.getLogger(AccInvoiceServiceImpl.class.getName()).log(Level.SEVERE, null, ex);
            throw ServiceException.FAILURE("accInvoiceController.getBatchRemainingQuantity() -: " + ex.getMessage(), ex);
        }
        return authHandler.roundQuantity(quantity,companyId);
    }
    public double getNewBatchRemainingQuantityForWithoutLWBSProduct(String productid, String transType, boolean isEdit, String documentid, boolean stockType) throws ServiceException {
        double quantity = 0.0;
        double srquantity = 0.0;
        try {
            
            int moduleId=Integer.parseInt(transType);
            if (moduleId == Constants.Acc_Delivery_Order_ModuleId) {
                quantity = accCommonTablesDAO.getInvQuantity(documentid, productid, stockType);
            }
            if (isEdit && !StringUtil.isNullOrEmpty(documentid)) {

                quantity = accCommonTablesDAO.getInvQuantity(documentid, productid, stockType);

            }

        } catch (Exception ex) {
            Logger.getLogger(AccInvoiceServiceImpl.class.getName()).log(Level.SEVERE, null, ex);
            throw ServiceException.FAILURE("accInvoiceController.getBatchRemainingQuantity() -: " + ex.getMessage(), ex);
        }
        return quantity;
    }
    
@Override
    public double getDeliveryOrderDetailStatus(DeliveryOrderDetail sod) throws ServiceException {
        double result = sod.getDeliveredQuantity();

        KwlReturnObject idresult = accInvoiceDAOobj.getIDFromDOD(sod.getID());
        List list = idresult.getEntityList();
        Iterator ite1 = list.iterator();
        double qua = 0.0;
        boolean fullInv = false;
        double quantPartTtInv = 0.0;
        while (ite1.hasNext()) {
            InvoiceDetail ge = (InvoiceDetail) ite1.next();
            if (ge.getInvoice().isPartialinv()) {
                double quantity = ge.getInventory().getQuantity();
                quantPartTtInv += quantity * ge.getPartamount();
            } else {
                fullInv = true;
                qua += ge.getInventory().getQuantity();
            }
        }
        
        KwlReturnObject idresultsr = accInvoiceDAOobj.getIDFromDODFORSR(sod.getID());
        List listsr = idresultsr.getEntityList();
        Iterator ite2 = listsr.iterator();
        double returnqua = 0;
        while (ite2.hasNext()) {
            SalesReturnDetail ge = (SalesReturnDetail) ite2.next();
            returnqua += ge.getInventory().getQuantity();
        }
        
        if (fullInv) {
            result = sod.getDeliveredQuantity() - (qua+returnqua);
        } else {
            if (sod.getDeliveredQuantity() * 100 > quantPartTtInv) {
                result = sod.getDeliveredQuantity() - (qua+returnqua);
            } else {
                result = 0;
            }
        }
        return result;
    }

@Override
    public double getDeliveryOrderDetailStatusFORSR(DeliveryOrderDetail sod) throws ServiceException {
        double result = sod.getDeliveredQuantity();

        KwlReturnObject idresult = accInvoiceDAOobj.getIDFromDODFORSR(sod.getID());
        List list = idresult.getEntityList();
        Iterator ite1 = list.iterator();
        double qua = 0;
        while (ite1.hasNext()) {
            SalesReturnDetail ge = (SalesReturnDetail) ite1.next();
            qua += ge.getInventory().getQuantity();
        }
        result = result - qua;
        return result;
    }

@Override
    public void getASsetDetailsJson(DeliveryOrderDetail row, String companyid, JSONObject obj, DateFormat df, CompanyAccountPreferences preferences, HttpServletRequest request, Contract contract) throws JSONException, ServiceException, SessionExpiredException {
        JSONObject requestObj = StringUtil.convertRequestToJsonObject(request);
        boolean isBatchForProduct = false;
        boolean isSerialForProduct = false;
        boolean isLocationForProduct = false;
        boolean isWarehouseForProduct = false;
        boolean isRowForProduct = false;
        boolean isRackForProduct = false;
        boolean isBinForProduct = false;
        double tempProfitandLossAmt=0;

        boolean linkingFlag = (StringUtil.isNullOrEmpty(request.getParameter("linkingFlag"))) ? false : Boolean.parseBoolean(request.getParameter("linkingFlag"));
        boolean isForInvoice = Boolean.FALSE.parseBoolean(request.getParameter("isForInvoice"));
        boolean isEdit = (StringUtil.isNullOrEmpty(request.getParameter("isEdit"))) ? false : Boolean.parseBoolean(request.getParameter("isEdit"));
        boolean isFixedAsset=Boolean.FALSE.parseBoolean(request.getParameter("isFixedAsset"));

        JSONArray assetDetailsJArr = new JSONArray();
        HashMap<String, Object> assetDetailsParams = new HashMap<String, Object>();
        assetDetailsParams.put(Constants.companyKey, companyid);
        assetDetailsParams.put("invoiceDetailId", row.getID());
        assetDetailsParams.put("moduleId", Constants.Acc_Delivery_Order_ModuleId);

        KwlReturnObject assetInvMapObj = accProductObj.getAssetInvoiceDetailMapping(assetDetailsParams);
        List<AssetInvoiceDetailMapping> assetInvMapList = assetInvMapObj.getEntityList();
        for (AssetInvoiceDetailMapping invoiceDetailMapping:assetInvMapList) {
            AssetDetails assetDetails = invoiceDetailMapping.getAssetDetails();
            if (row != null && !row.getDeliveryOrder().isIsOpenInSR() && !(isEdit && isFixedAsset)) {
                continue;
            }
            JSONObject assetDetailsJOBJ = new JSONObject();

            assetDetailsJOBJ.put("assetdetailId", assetDetails.getId());
            assetDetailsJOBJ.put("assetId", assetDetails.getId());
            assetDetailsJOBJ.put("assetName", assetDetails.getAssetId());
            assetDetailsJOBJ.put("location", (assetDetails.getLocation() != null) ? assetDetails.getLocation().getId() : "");
            assetDetailsJOBJ.put("department", (assetDetails.getDepartment() != null) ? assetDetails.getDepartment().getId() : "");
            assetDetailsJOBJ.put("assetdescription", (assetDetails.getAssetDescription() != null) ? assetDetails.getAssetDescription() : "");
            assetDetailsJOBJ.put("assetUser", (assetDetails.getAssetUser() != null) ? assetDetails.getAssetUser().getUserID() : "");
            
            
             // calculate asset depreciation cost
            double assetDepreciatedCost = 0d;
            HashMap<String, Object> assetParams = new HashMap<String, Object>();
            assetParams.put("assetDetailsId", assetDetails.getId());
            assetParams.put("companyid", companyid);
            assetParams.put("assetDetails", true);
            KwlReturnObject assResult = accProductObj.getAssetDepreciationDetail(assetParams);
            List<AssetDepreciationDetail> assList = assResult.getEntityList();
            for (AssetDepreciationDetail depreciationDetail : assList) {
                assetDepreciatedCost += depreciationDetail.getPeriodAmount();
            }
            
            /*Assest cost = Actual assest cost - Depreciation cost*/
            assetDetailsJOBJ.put("cost", assetDetails.getCost()-assetDepreciatedCost);

            if (linkingFlag && isForInvoice && contract != null) {
                double sellAmountPerInvoice = assetDetails.getSellAmount();
                int numberOfPeriods = contract.getNumberOfPeriods();
                if (numberOfPeriods > 0) {
                    sellAmountPerInvoice = sellAmountPerInvoice / numberOfPeriods;
                }
                assetDetailsJOBJ.put("sellAmount", sellAmountPerInvoice);
            } else {
                assetDetailsJOBJ.put("sellAmount", assetDetails.getSellAmount());

            }
            assetDetailsJOBJ.put("salvageRate", assetDetails.getSalvageRate());
            assetDetailsJOBJ.put("salvageValue", assetDetails.getSalvageValue());
            assetDetailsJOBJ.put("accumulatedDepreciation", assetDetails.getAccumulatedDepreciation());
            assetDetailsJOBJ.put("assetLife", assetDetails.getAssetLife());
            assetDetailsJOBJ.put("elapsedLife", assetDetails.getElapsedLife());
            assetDetailsJOBJ.put("nominalValue", assetDetails.getElapsedLife());
            assetDetailsJOBJ.put("installationDate", df.format(assetDetails.getInstallationDate()));
            assetDetailsJOBJ.put("purchaseDate", df.format(assetDetails.getPurchaseDate()));
            tempProfitandLossAmt=tempProfitandLossAmt+(assetDetails.getSellAmount()-(assetDetails.getCost() - assetDepreciatedCost));
            HashMap<String, Object> fieldrequestParams1 = new HashMap();
            fieldrequestParams1.put(Constants.filter_names, Arrays.asList(Constants.companyid, Constants.moduleid, Constants.customcolumn));
            fieldrequestParams1.put(Constants.filter_values, Arrays.asList(sessionHandlerImpl.getCompanyid(request), Constants.Acc_FixedAssets_Details_ModuleId, 1));
            HashMap<String, String> customFieldMap1 = new HashMap<String, String>();
            HashMap<String, String> customDateFieldMap1 = new HashMap<String, String>();
            HashMap<String, String> replaceFieldMap11 = new HashMap<String, String>();
            HashMap<String, Integer> fieldMap1 = accAccountDAOobj.getFieldParamsCustomMapForRows(fieldrequestParams1, replaceFieldMap11, customFieldMap1, customDateFieldMap1);
            Map<String, Object> variableMap = new HashMap<String, Object>();
            AssetDetailsCustomData jeDetailCustom = (AssetDetailsCustomData) assetDetails.getAssetDetailsCustomData();
            replaceFieldMap11 = new HashMap<String, String>();
            if (jeDetailCustom != null) {
                AccountingManager.setCustomColumnValues(jeDetailCustom, fieldMap1, replaceFieldMap11, variableMap);
                JSONObject params = new JSONObject();
                params.put(Constants.companyKey, companyid);
                params.put("getCustomFieldArray", true);
                fieldDataManagercntrl.getLineLevelCustomData(variableMap, customFieldMap1, customDateFieldMap1, assetDetailsJOBJ, params);
            }

            if (!StringUtil.isNullOrEmpty(row.getProduct().getID())) {
                KwlReturnObject prodresult = accProductObj.getObject(Product.class.getName(), row.getProduct().getID());
                Product product = (Product) prodresult.getEntityList().get(0);
                isBatchForProduct = product.isIsBatchForProduct();
                isSerialForProduct = product.isIsSerialForProduct();
                isLocationForProduct = product.isIslocationforproduct();
                isWarehouseForProduct = product.isIswarehouseforproduct();
                isRowForProduct = product.isIsrowforproduct();
                isRackForProduct = product.isIsrackforproduct();
                isBinForProduct = product.isIsbinforproduct();
            }
            if (preferences.isIsBatchCompulsory() || preferences.isIsSerialCompulsory() || preferences.isIslocationcompulsory() || preferences.isIswarehousecompulsory() || preferences.isIsrowcompulsory() || preferences.isIsrackcompulsory() || preferences.isIsbincompulsory()) {  //check if company level option is on then only we will check productt level
                if (isBatchForProduct || isSerialForProduct || isSerialForProduct || isLocationForProduct || isWarehouseForProduct || isRowForProduct || isRackForProduct || isBinForProduct) {  //product level batch and serial no on or not
                    assetDetailsJOBJ.put("batchdetails", getNewBatchJson(row.getProduct(), requestObj, assetDetails.getId()));
                }
            }
            assetDetailsJArr.put(assetDetailsJOBJ);
        }
        obj.put("assetDetails", assetDetailsJArr.toString());
        obj.put("profitLossAmt", tempProfitandLossAmt);
    }

@Override
    public HashMap<String, Object> getDeliveryOrdersMap(HttpServletRequest request) throws SessionExpiredException {
        HashMap<String, Object> requestParams = AccountingManager.getGlobalParams(request);
        requestParams.put(Constants.ss, request.getParameter(Constants.ss));
        //checking filetype to print all records for csv,print & pdf
        if (StringUtil.isNullOrEmpty(request.getParameter("filetype"))) {
            requestParams.put(Constants.start, request.getParameter(Constants.start));
            requestParams.put(Constants.limit, request.getParameter(Constants.limit));
        }
        requestParams.put(CCConstants.REQ_costCenterId, request.getParameter(CCConstants.REQ_costCenterId));
        requestParams.put(CCConstants.REQ_customerId, request.getParameter(CCConstants.REQ_customerId));
        requestParams.put(Constants.REQ_startdate, request.getParameter(Constants.REQ_startdate));
        requestParams.put(Constants.REQ_enddate, request.getParameter(Constants.REQ_enddate));
        requestParams.put(Constants.Acc_Search_Json, request.getParameter(Constants.Acc_Search_Json));
        requestParams.put(Constants.moduleid, request.getParameter(Constants.moduleid));
        requestParams.put(Constants.Filter_Criteria, request.getParameter(InvoiceConstants.Filter_Criteria));
        requestParams.put(Constants.MARKED_FAVOURITE, request.getParameter(Constants.MARKED_FAVOURITE));
        requestParams.put(InvoiceConstants.billid, request.getParameter(InvoiceConstants.billid));
        requestParams.put(InvoiceConstants.deleted, request.getParameter(InvoiceConstants.deleted));
        requestParams.put("currencyfilterfortrans", (request.getParameter("currencyfilterfortrans") == null) ? "" : request.getParameter("currencyfilterfortrans"));
        requestParams.put(Constants.isFixedAsset, (request.getParameter(Constants.isFixedAsset) != null) ? Boolean.parseBoolean(request.getParameter(Constants.isFixedAsset)) : false);
        // Fetching Flag for View Filter in delivery Order
        requestParams.put("isJobWorkOutReciever", (request.getParameter("isJobWorkOutReciever") != null) ? Boolean.parseBoolean(request.getParameter("isJobWorkOutReciever")) : false);
        requestParams.put(Constants.isLeaseFixedAsset, (request.getParameter(Constants.isLeaseFixedAsset) != null) ? Boolean.parseBoolean(request.getParameter(Constants.isLeaseFixedAsset)) : false);
        requestParams.put(Constants.isConsignment, (request.getParameter(Constants.isConsignment) != null) ? Boolean.parseBoolean(request.getParameter(Constants.isConsignment)) : false);
        requestParams.put("custWarehouse", (request.getParameter("custWarehouse") == null) ? "" : request.getParameter("custWarehouse"));
        requestParams.put(Constants.productid, (request.getParameter(Constants.productid) == null) ? "" : request.getParameter(Constants.productid));
        requestParams.put(Constants.productCategoryid, (request.getParameter(Constants.productCategoryid) == null) ? "" : request.getParameter(Constants.productCategoryid));
        requestParams.put(InvoiceConstants.customerCategoryid, request.getParameter(InvoiceConstants.customerCategoryid));
        return requestParams;
    }


@Override
    public JSONArray getDeliveryOrdersJsonMerged(JSONObject paramJobj, List list) throws ServiceException {
        JSONArray jArr = new JSONArray();
        try {
            HashMap<String, Object> requestParams = AccountingManager.getGlobalParams(paramJobj);
            double quantity = 0;
            double amount = 0;
        boolean isFixedAsset = Boolean.FALSE.parseBoolean(paramJobj.optString(Constants.isFixedAsset));
        boolean isConsignment = Boolean.FALSE.parseBoolean(paramJobj.optString(Constants.isConsignment));
        boolean isLeaseFixedAsset = Boolean.FALSE.parseBoolean(paramJobj.optString(Constants.isLeaseFixedAsset));
        boolean pendingapproval = paramJobj.optBoolean("pendingapproval", false);
        boolean isOptimizedExport = paramJobj.optBoolean("isOptimizedExport", false);
        int moduleid = isFixedAsset ? Constants.Acc_FixedAssets_DeliveryOrder_ModuleId : isLeaseFixedAsset ? Constants.Acc_Lease_DO : Constants.Acc_Delivery_Order_ModuleId;
            if (isConsignment) {
                moduleid = Constants.Acc_ConsignmentDeliveryOrder_ModuleId;
            }
            String companyid = paramJobj.getString(Constants.companyKey);  //ERP-26741
            ExtraCompanyPreferences extraCompanyPreferences = null;
            if (isOptimizedExport && paramJobj.has("ExtraCompanyPreferencesObject")) {
                extraCompanyPreferences = (ExtraCompanyPreferences) paramJobj.opt("ExtraCompanyPreferencesObject");
            } else {
                KwlReturnObject capresult = accountingHandlerDAOobj.loadObject(ExtraCompanyPreferences.class.getName(), companyid);
                extraCompanyPreferences = (ExtraCompanyPreferences) capresult.getEntityList().get(0);
            }
            KwlReturnObject companyPrefResult = accountingHandlerDAOobj.getObject(CompanyAccountPreferences.class.getName(), companyid);        
            CompanyAccountPreferences pref = (CompanyAccountPreferences) companyPrefResult.getEntityList().get(0);
            boolean isLineLevelTermFlag = false;//To Check Whether LinelevelTerms are applicable or not.
            if(extraCompanyPreferences != null && extraCompanyPreferences.getLineLevelTermFlag() == 1){
                isLineLevelTermFlag = true;//If LineLevelTerms are applicable, then update the flag.
            }
            int countryid = 0;
            if(extraCompanyPreferences != null && extraCompanyPreferences.getCompany().getCountry() != null){
                countryid = Integer.parseInt(extraCompanyPreferences.getCompany().getCountry().getID());
            }
            String compids[] = Constants.Companyids_Chkl_And_Marubishi.split(",");
            boolean isFromChklorMarubishi = false;
            for (int cnt = 0; cnt < compids.length; cnt++) {
                String compid = compids[cnt];
                if (compid.equalsIgnoreCase(companyid)) {
                    isFromChklorMarubishi = true;
                }
            }
        boolean closeflag = paramJobj.optString("closeflag", null) != null ? true : false;
        boolean FA_DOGRlinkFlag = (paramJobj.optString("FA_DOGRlinkFlag", null) != null) ? Boolean.parseBoolean(paramJobj.optString("FA_DOGRlinkFlag")) : false;
        boolean avoidRecursiveLink = paramJobj.optString("avoidRecursiveLink", null) != null ? true : false;
        boolean srflag = paramJobj.optString("srflag", null) != null ? true : false;
            HashMap<String, Object> fieldrequestParams = new HashMap();
            fieldrequestParams.put(Constants.filter_names, Arrays.asList(Constants.companyid, Constants.moduleid));
            fieldrequestParams.put(Constants.filter_values, Arrays.asList(paramJobj.getString(Constants.companyKey), moduleid));
            HashMap<String, String> replaceFieldMap1 = new HashMap<String, String>();
            HashMap<String, String> customFieldMap = new HashMap<String, String>();
            HashMap<String, String> customDateFieldMap = new HashMap<String, String>();
            HashMap<String, Integer> fieldMap = accAccountDAOobj.getFieldParamsCustomMap(fieldrequestParams, replaceFieldMap1, customFieldMap, customDateFieldMap);
            Set<String> partialpacked = new HashSet<>();
            HashSet<String> shipped_do = new HashSet<>();
            /*
             * ERP-9782
             * System will not allow edit/delete non-latest DO of Free Gift.
             */
            Set<DeliveryOrder> setOfDos = new HashSet<>();
            KwlReturnObject latestFreeGiftResult = null;
            
            Iterator itr = list.iterator();
            
            /**
             * Checking if a Pick Pack Ship DO has at least a single quantity packed or shipped
             * In that case do not allow editing of that DO and to save repeated DB hits getting all such DO's in a single call.
             */
            if (extraCompanyPreferences.isPickpackship() && !isConsignment && !isLeaseFixedAsset && !isFixedAsset) {
                HashMap<String, String> qtymap = new HashMap<>();
                JSONArray doarray = new JSONArray();
                JSONObject doobject = new JSONObject();
                qtymap.put("companyid", companyid);
                shipped_do = accInvoiceDAOobj.getDOShippedArray(qtymap);
                qtymap.put("checkpartialpacked", "true");
                doarray = accInvoiceDAOobj.getDOPackedShippedQty(qtymap);                
                for (int jsonindex = 0; jsonindex < doarray.length(); jsonindex++) {
                    doobject = doarray.getJSONObject(jsonindex);
                    if (doobject != null) { //storing all partially packed doids in a set to compare below
                        String dono = doobject.optString("doid");
                        partialpacked.add(dono);
                    }
                }
                    }
            while (itr.hasNext()) {
                int contractstatus = 0;
                String contractId = "";
                Object[] oj = (Object[]) itr.next();
                String orderid = oj[0].toString();
                //Withoutinventory 0 for normal, 1 for billing
                boolean withoutinventory = Boolean.parseBoolean(oj[1].toString());

                KwlReturnObject objItr = accountingHandlerDAOobj.getObject(DeliveryOrder.class.getName(), orderid);
                DeliveryOrder deliveryOrder = (DeliveryOrder) objItr.getEntityList().get(0);
            boolean isApplyTaxToTerms = deliveryOrder.isApplyTaxToTerms();
                boolean addflag = true;
                String status = "Open";
                Set<DeliveryOrderDetail> doRows = deliveryOrder.getRows();
                double doqty = 0.0;
                if (!srflag) {
//                    Iterator itr2 = doRows.iterator();
                for (DeliveryOrderDetail dod : doRows) {
                    doqty = getDeliveryOrderDetailStatus(dod);
                        if (doqty > 0) {
                            status = "Open";
                            break;
                        } else {
                            status = "Closed";
                        }                      
                    }
                }
                if(closeflag && isConsignment){
                    if(deliveryOrder.isIsDOClosed()){
                        status = "Closed";
                    }else{
                        for(DeliveryOrderDetail detail:doRows){
                            if(detail != null && !detail.isIsLineItemClosed()){
                                status = "Open";
                                break;
                            }else {
                                status = "Closed";
                            }
                        }
                    }
                    
                }
                if (closeflag && deliveryOrder.isDeleted()) {
                    addflag = false;
                    continue;
                } else if (closeflag && (status.equalsIgnoreCase("Closed"))) {
                    addflag = false;
                    continue;
                }
                boolean includeprotax = false;
                amount = 0;
                double discountPrice = 0, rowOtherTermNonTaxableAmount = 0d;
                double totalDiscount=0;
                Set<String> invoiceno = new HashSet<String>();
                DeliveryOrderDetail tempdodobj = null;
                JSONObject obj = new JSONObject();
                double subtotal = 0d;
                double productTotalAmount = 0d;
                boolean upsIntegrationFlag = false; //Flag to indicate whether or not UPS REST integration is enabled ERP-31339
                if (extraCompanyPreferences != null) {
                     upsIntegrationFlag = extraCompanyPreferences.isUpsIntegration();
                }
                Set<String> deliveryOrdeDetailIDs = new TreeSet<String>();
                double ordertaxamount=0d;
                double totalTaxGST=0.0;
                Set<String> uniqueProductTaxList = new HashSet<String>();
                if (doRows != null && !doRows.isEmpty()) {
                    for (DeliveryOrderDetail temp : doRows) {
                        if(upsIntegrationFlag) {
                            String deliveryOrdeDetailID = temp.getID();
                            if (!StringUtil.isNullOrEmpty(deliveryOrdeDetailID)) {
                                deliveryOrdeDetailIDs.add(deliveryOrdeDetailID);
                            }
                        }
                        /**
                         * the below check is to get the deliveredQty in cas Pick pack ship DO is enabled in company preferences else it will get inventory quantity incase of normal DO.
                         */
                        if (extraCompanyPreferences!=null && extraCompanyPreferences.isPickpackship()) {        
                            quantity = temp.getDeliveredQuantity();
                        } else {
                            quantity = temp.getInventory().getQuantity();
                        }
                       /* CHECK FOR RATE INCLUDING GST IN DO REPORT FOR DISCOUNT AND TOTAL AMOUNT CALCULATIONS*/
                        double dorate = 0.0d;
                        if (deliveryOrder.isGstIncluded()) {
                            dorate = authHandler.roundUnitPrice(temp.getRateincludegst(), companyid);
                        } else {
                            dorate = authHandler.roundUnitPrice(temp.getRate(), companyid);
                        }
                        double doPrice = authHandler.round(quantity * dorate, companyid);
                        productTotalAmount += doPrice;
                        double discountDOD = authHandler.round(temp.getDiscount(), companyid);
                       
                        /* If DO is linking with Partial Invoice 
                         then Amount is calculated as per partial formula 
                         */
                        Invoice invoice = temp.getCidetails() != null ? temp.getCidetails().getInvoice() : null;
                        if (invoice != null && invoice.isPartialinv()) {
                            double partamount = temp.getCidetails().getPartamount();
                            doPrice = authHandler.round(doPrice * (partamount / 100),companyid);
                                                          
                        }
                        if (temp.getDiscountispercent() == 1) {
                            totalDiscount+=authHandler.round((doPrice * discountDOD / 100), companyid);
                            discountPrice = (doPrice) - authHandler.round((doPrice * discountDOD / 100), companyid);;
                        } else {
                            totalDiscount+=discountDOD;
                            discountPrice = doPrice - discountDOD;
                        }
                        amount += discountPrice;
                        
                        tempdodobj = temp;
                        if (avoidRecursiveLink && temp.getCidetails() != null) {
                            addflag = false;
                            continue;
                        }
                        // getting tax also
                        if (temp.getTax() != null) {
                            includeprotax = true;
                            uniqueProductTaxList.add(temp.getTax().getID());
                        }
                        double taxAmt = 0.0d ;
                        if (!deliveryOrder.isGstIncluded()) { // NO NEED TO ADD TAX AMOUNT IF RATE INCLUDING GST
                            taxAmt = temp.getRowTaxAmount();
                            amount += taxAmt;
                        }else{
                            totalTaxGST+=temp.getRowTaxAmount();
                        }
                        if (isLineLevelTermFlag) { //ERP-26741
                            taxAmt += authHandler.round(temp.getRowTermAmount(), companyid);
                            amount += authHandler.round(temp.getOtherTermNonTaxableAmount(), companyid);
                            // Append OtherTermNonTaxableAmount for rach row.
                            rowOtherTermNonTaxableAmount += temp.getOtherTermNonTaxableAmount();
                                ordertaxamount += taxAmt;
                            }
                        
                        if (tempdodobj != null && tempdodobj.getCidetails() != null) {
                            if (tempdodobj.getCidetails().getInvoice() != null) {
                                invoiceno.add(tempdodobj.getCidetails().getInvoice().getInvoiceNumber());
                            }
                        }
                    }
                }

                /**                  
                 * Checking now if the current do is partially packed then passing key as true.
                 */
            if (!isOptimizedExport) {
                if (extraCompanyPreferences.isPickpackship() && !isLeaseFixedAsset && !isFixedAsset && !isConsignment) {
                    if (partialpacked.contains(orderid)) {
                        obj.put("ispartialpackedshippeddo", true);
                    } else {
                        if (!shipped_do.isEmpty() && shipped_do!=null && shipped_do.contains(orderid)) {
                            obj.put("ispartialpackedshippeddo", true);
                        } else {
                            obj.put("ispartialpackedshippeddo", false);
                        }
                    }
                }
                //Logic to get UPS Shipment Tracking Number(s) when UPS REST Integration is enabled
                if (upsIntegrationFlag) {
                    StringBuilder upsTrackingNumbers = new StringBuilder("");
                    Set<String> upsTrackingNumbersSet = new TreeSet<String>();
                    upsTrackingNumbersSet = getUPSTrackingNumberFromDoDetails(deliveryOrdeDetailIDs);
                    if (!upsTrackingNumbersSet.isEmpty()) {
                        String upsTrackingNumbersStr = upsTrackingNumbersSet.toString();
                        upsTrackingNumbers.append(upsTrackingNumbersStr.substring(1, (upsTrackingNumbersStr.length() - 1)));
                    }
                    obj.put("upsTrackingNumbers", upsTrackingNumbers.toString());
                }
            }
                
                Customer customer = deliveryOrder.getCustomer();
            obj.put(Constants.billid, deliveryOrder.getID());
            obj.put(Constants.companyKey, deliveryOrder.getCompany().getCompanyID());
            obj.put(InvoiceConstants.billno, deliveryOrder.getDeliveryOrderNumber());
            obj.put("date", authHandler.getDateOnlyFormat().format(deliveryOrder.getOrderDate()));
            obj.put("companyname", deliveryOrder.getCompany().getCompanyName());
            if (!isOptimizedExport) {
                KwlReturnObject linkRresult = accLinkDataDao.checkEntryForTransactionInLinkingTableForForwardReference(Constants.Acc_DeliveryOrder_modulename, deliveryOrder.getID());
                list = linkRresult.getEntityList();
                if (list != null && !list.isEmpty()) {
                    obj.put(Constants.IS_LINKED_TRANSACTION, true);
                } else {
                    obj.put(Constants.IS_LINKED_TRANSACTION, false);
                }
                HashMap<String, Object> hashMap = new HashMap<String, Object>();
                hashMap.put("invoiceID", deliveryOrder.getID());
                hashMap.put(Constants.companyKey, deliveryOrder.getCompany().getCompanyID());
                KwlReturnObject object = accInvoiceDAOobj.getinvoiceDocuments(hashMap);
                int attachemntcount = object.getRecordTotalCount();
                obj.put("attachment", attachemntcount);
                obj.put("externalcurrencyrate", deliveryOrder.getExternalCurrencyRate());
                obj.put("withoutinventory", withoutinventory);
                obj.put(InvoiceConstants.personid, customer.getID());
                obj.put("isFromPOS", deliveryOrder.isPOSDO());
                Set<DeliveryOrderDetail> rows = deliveryOrder.getRows();
//                MasterItem gstRegistrationType = customer != null ? customer.getGSTRegistrationType() : null;
//                if (gstRegistrationType != null && gstRegistrationType.getDefaultMasterItem() != null) {
//                    obj.put("GSTINRegTypeDefaultMstrID", gstRegistrationType.getDefaultMasterItem().getID());
//                }
                /**
                 * Put GST document history.
                 */
                if (deliveryOrder.getCompany().getCountry().getID().equalsIgnoreCase("" + Constants.indian_country_id)) {
                    obj.put("refdocid", deliveryOrder.getID());
                    fieldDataManagercntrl.getGSTDocumentHistory(obj);

                }
                for(DeliveryOrderDetail dd:rows){    
                            String dodid = dd.getID();
                        if (!StringUtil.isNullOrEmpty(dodid)) {
                            Map<String, Object> map = new HashMap();
                            map.put("dodid", dodid);
                            double packedqty = 0d;
                            KwlReturnObject kwlReturnObject = accInvoiceDAOobj.getShippingQty(map);
                            double shipqty = 0d;
                            List<DeliveryDetailInterStoreLocationMapping> deliveryDetailInterStoreLocationMappings = kwlReturnObject.getEntityList();
                            for (DeliveryDetailInterStoreLocationMapping deliveryDetailInterStoreLocationMapping : deliveryDetailInterStoreLocationMappings) {
                                shipqty = shipqty + deliveryDetailInterStoreLocationMapping.getShippedQty();
                            }

                            shipqty = Math.abs(shipqty);
                            /*
                             If user directly ships some quantity first without packing then do not allow him to pack any quantity and directly ship the remaining
                             */
                            double dopackedqty=0;
                            dopackedqty = accInvoiceDAOobj.getDOPackedQuantity(dodid);
                            if (shipqty > dopackedqty && shipqty != 0 && dopackedqty == 0) {

                                obj.put("isdirectshipped", true);
                                break;
                            } else {
                                obj.put("isdirectshipped", false);
                            }

                        }
                }
                if (deliveryOrder.getModifiedby() != null) {
                    obj.put("lasteditedby", StringUtil.getFullName(deliveryOrder.getModifiedby()));
                }
            }

                obj.put(InvoiceConstants.personname, customer.getName());
            obj.put("customername", customer.getName());
            obj.put(InvoiceConstants.aliasname, customer.getAliasname());
            obj.put(Constants.PERSONCODE, customer.getAcccode() == null ? "" : customer.getAcccode()); // For costomercode one name is user i.e.  Constants.PERSONCODE avoid use of customercode
            obj.put("customerporefno", (deliveryOrder.getCustomerPORefNo() == null) ? "" : deliveryOrder.getCustomerPORefNo());
            obj.put("createdby", deliveryOrder.getCreatedby() == null ? "" : StringUtil.getFullName(deliveryOrder.getCreatedby()));
            obj.put("salesPerson", deliveryOrder.getSalesperson() == null ? "" : deliveryOrder.getSalesperson().getID());
            obj.put("createdby", deliveryOrder.getCreatedby() == null ? "" : deliveryOrder.getCreatedby().getFullName());
            obj.put(Constants.memo, deliveryOrder.getMemo());
            obj.put("status", deliveryOrder.getStatus() == null ? "" : deliveryOrder.getStatus().getValue());
            obj.put("customercode", customer.getAcccode() == null ? "" : customer.getAcccode());
            obj.put("mapSalesPersonName", deliveryOrder.getSalesperson() == null ? "" : deliveryOrder.getSalesperson().getValue());
            if (!isOptimizedExport) {
                HashMap<String, Object> addressParams = new HashMap<String, Object>();
                addressParams.put(Constants.companyKey, deliveryOrder.getCompany().getCompanyID());
                addressParams.put("isDefaultAddress", true);    //always true to get defaultaddress
                addressParams.put("isBillingAddress", true);    //true to get billing address
                addressParams.put(Constants.customerid, customer.getID());
                CustomerAddressDetails customerAddressDetails = accountingHandlerDAOobj.getCustomerAddressobj(addressParams);
                obj.put(Constants.posttext, deliveryOrder.getPostText() == null ? "" : deliveryOrder.getPostText());
                obj.put("statusID", deliveryOrder.getStatus() == null ? "" : deliveryOrder.getStatus().getID());
                obj.put("personemail", customerAddressDetails != null ? customerAddressDetails.getEmailID() : "");
                obj.put(Constants.HAS_ACCESS, customer.isActivate());
                obj.put("billtoaddress", deliveryOrder.getBillingShippingAddresses() != null ? CommonFunctions.getBillingShippingAddress(deliveryOrder.getBillingShippingAddresses(), true) : "");
                obj.put("shiptoaddress", deliveryOrder.getBillingShippingAddresses() != null ? CommonFunctions.getBillingShippingAddress(deliveryOrder.getBillingShippingAddresses(), false) : "");
                obj.put("dateinuserformat", authHandler.getUserDateFormatterWithoutTimeZone(paramJobj).format(deliveryOrder.getOrderDate()));
                obj.put("termdays", customer.getCreditTerm() == null ? 0 : customer.getCreditTerm().getTermdays());
                obj.put("salesPersonCode", deliveryOrder.getSalesperson() == null ? "" : deliveryOrder.getSalesperson().getCode());
                obj.put("termname", customer.getCreditTerm() == null ? 0 : customer.getCreditTerm().getTermname());
                obj.put("isapplytaxtoterms", isApplyTaxToTerms);
                obj.put("ordernoreferedformemoaddress", deliveryOrder.getOrderNoReferedForMemoAddress());
                obj.put("costcenterid", deliveryOrder.getCostcenter() == null ? "" : deliveryOrder.getCostcenter().getID());
                obj.put("costcenterName", deliveryOrder.getCostcenter() == null ? "" : deliveryOrder.getCostcenter().getName());
                obj.put("gstIncluded", deliveryOrder.isGstIncluded());
                obj.put("gstapplicable", deliveryOrder.isIsIndGSTApplied());
                obj.put("gtaapplicable", deliveryOrder.isRcmapplicable()); // Get RCM applicable Check - Used for INDIA only
                obj.put("ewayapplicable", deliveryOrder.isEwayapplicable()); // Get EWAY applicable Check - Used for INDIA only ERM-1108
                /**
                 * Get Merchant Exporter Check
                 */
                obj.put(Constants.isMerchantExporter, deliveryOrder.isIsMerchantExporter()); 
                if (countryid == Constants.indian_country_id) {
                    obj.put("formtypeid", deliveryOrder.getFormtype());
                    obj.put("isInterstateParty", (deliveryOrder.getCustomer() != null ? deliveryOrder.getCustomer().isInterstateparty() : false));
                }
            }
            if (deliveryOrder.isIsDOClosed()) {
                    obj.put("status", Constants.closedStatus);
                if (!isOptimizedExport) {
                    obj.put("dostatus", Constants.closedStatus);
                }
                } else {
                    obj.put("dostatus", status);
                }
                if (!pendingapproval) {
                JournalEntry inventoryJE = deliveryOrder.getInventoryJE();
                obj.put("inventoryjeid", (inventoryJE != null ? inventoryJE.getID() : ""));
                obj.put("inventoryentryno", (inventoryJE != null ? inventoryJE.getEntryNumber() : ""));
                }
            obj.put("discount", authHandler.formattedAmount(totalDiscount, companyid));
            if (isLineLevelTermFlag) {
                // If LineLevelTerm is applicable then add the value in JSON Object.
                obj.put("OtherTermNonTaxableAmount", authHandler.formattedAmount(rowOtherTermNonTaxableAmount, companyid));
            }
            obj.put("currencyCode", (deliveryOrder.getCurrency() == null ? "" : deliveryOrder.getCurrency().getCurrencyCode()));
//            if (!isOptimizedExport) {
                double taxPercent = 0;
                double totalTermAmount = 0;
                double totalTermTaxAmount=0;
                double taxableamount = 0;
                
                List doTermMapList = kwlCommonTablesDAOObj.getSummationOfTermAmtAndTermTaxAmt(Constants.deliveryordertermmap, deliveryOrder.getID());
                if(doTermMapList != null && !doTermMapList.isEmpty()){
                    Iterator termItr = doTermMapList.iterator();
                    while (termItr.hasNext()) {
                        Object[] termObj = (Object[]) termItr.next();
                        /* 
                        * [0] : Sum of termamount  
                        * [1] : Sum of termamountinbase 
                        * [2] : Sum of termTaxamount 
                        * [3] : Sum of termTaxamountinbase 
                        * [4] : Sum of termAmountExcludingTax 
                        * [5] : Sum of termAmountExcludingTaxInBase
                        */ 
                        if (deliveryOrder.isGstIncluded()) {
                            if(termObj[4] != null){
                                totalTermAmount += authHandler.round((Double) termObj[4],companyid);
                            }
                        } else {
                            if(termObj[0] != null){
                                totalTermAmount += authHandler.round((Double) termObj[0],companyid);
                            }
                        }
                        if(termObj[2] != null){
                            totalTermTaxAmount += authHandler.round((Double) termObj[2],companyid);
                        }
                    }
                }
                String taxname = "";
                totalTermAmount = authHandler.round(totalTermAmount, companyid);
                totalTermTaxAmount = authHandler.round(totalTermTaxAmount, companyid);
                
                if (deliveryOrder.getTax() != null) {
                    KwlReturnObject taxresult = accTaxObj.getTaxPercent(paramJobj.getString(Constants.companyKey), deliveryOrder.getOrderDate(), deliveryOrder.getTax().getID());
                    taxPercent = (Double) taxresult.getEntityList().get(0);
                    taxname = deliveryOrder.getTax().getName();
                    ordertaxamount=(taxPercent==0?0:authHandler.round(((amount + taxableamount)*taxPercent/100), companyid));

                }
            if (!isOptimizedExport) {
                obj.put("taxid", deliveryOrder.getTax() != null ? deliveryOrder.getTax().getID() : "");
                obj.put(TAXPERCENT, taxPercent);
                obj.put("taxpercent", taxPercent);
                obj.put(Constants.IsRoundingAdjustmentApplied, deliveryOrder.isIsRoundingAdjustmentApplied());
            }
                if (deliveryOrder.isGstIncluded()) {
                    amount = amount + totalTermAmount  + totalTermTaxAmount;
                } else {
                     amount = amount + totalTermAmount + ordertaxamount + totalTermTaxAmount;
                }
                   
                    if (deliveryOrder.isIsRoundingAdjustmentApplied()) {//for rounding the exact amount is considered
                        amount = deliveryOrder.getTotalamount();
                }
                
                Set<DeliveryOrderDetail> deliveryOrderDetails = deliveryOrder.getRows();
                double rowTaxAmt = 0;
                boolean isTaxRowLvlAndFromTaxGlobalLvl = false;
                boolean isTransactionSendForQA = false;
                boolean isDOFromAutoCashSales = false;
                for (DeliveryOrderDetail deliveryOrderDetail : deliveryOrderDetails) {
                    if (deliveryOrderDetail.getTax() != null) {
                        if (deliveryOrderDetail.getSodetails() != null && deliveryOrderDetail.getSodetails().getSalesOrder() != null) {
                            if (deliveryOrderDetail.getSodetails().getSalesOrder().getTax() != null) {
                                isTaxRowLvlAndFromTaxGlobalLvl = true;
                            }
                        }
                    if (deliveryOrderDetail.getCidetails() != null && deliveryOrderDetail.getCidetails().getInvoice() != null) {
                            if (deliveryOrderDetail.getCidetails().getInvoice().getTax() != null) {
                                isTaxRowLvlAndFromTaxGlobalLvl = true;
                            }
                        }
                        includeprotax = true;
                        rowTaxAmt += deliveryOrderDetail.getRowTaxAmount();
                    }
                    /*
                    IF DO is created from  Cash Sales invoice with auto DO option 'true' then we require this flag for JS side
                    */
                    if (deliveryOrder.isIsAutoGeneratedDO() && deliveryOrderDetail.getCidetails()!=null && deliveryOrderDetail.getCidetails().getInvoice() != null) {
                        isDOFromAutoCashSales = deliveryOrderDetail.getCidetails().getInvoice().isCashtransaction();
                    }
                if (!isOptimizedExport) {
                    if (deliveryOrderDetail.getSodetails() != null && deliveryOrderDetail.getSodetails().getSalesOrder().isFreeze()) {
                        obj.put(Constants.IS_LINKED_TRANSACTION, true);
                    }

                    if (pref.isQaApprovalFlowInDO() && !isTransactionSendForQA) {
                        JSONObject json = new JSONObject();
                        json.put("dodetailid", deliveryOrderDetail.getID());
                        KwlReturnObject kwlReturnObject = stockService.getDODetailISTMapping(json);
                        List<DODQCISTMapping> dodISTMappings = kwlReturnObject.getEntityList();
                        for (DODQCISTMapping dodqcistm : dodISTMappings) {
                            if (dodqcistm.getApprovedStockOuts() != null && !dodqcistm.getApprovedStockOuts().isEmpty()) {
                                isTransactionSendForQA = true;
                            }
                            if (dodqcistm.getRejectedDODQCISTMappings() != null && !dodqcistm.getRejectedDODQCISTMappings().isEmpty()) {
                                isTransactionSendForQA = true;
                            }
                            if (dodqcistm.getPickedMapping() != null && !dodqcistm.getPickedMapping().isEmpty()) {
                                isTransactionSendForQA = true;
                            }
                            if (dodqcistm.getQcInterStoreTransferRequest() != null) {
                                if (dodqcistm.getQcInterStoreTransferRequest().getStatus() != InterStoreTransferStatus.INTRANSIT) {
                                    isTransactionSendForQA = true;  
                                } 
                            }
                        }
                    }
                }
                }
            obj.put("taxamount", authHandler.formattedAmount(ordertaxamount + rowTaxAmt + totalTermTaxAmount, companyid));
            
                if (deliveryOrder.isGstIncluded()) {// If you are changing sub total calculation , please notify the report builder team to change the logic at their end too
                    subtotal = productTotalAmount - totalDiscount - totalTaxGST;
                } else {
                    subtotal = productTotalAmount - totalDiscount;
                }
                if (deliveryOrder.isGstIncluded() && isLineLevelTermFlag) {// If you are changing sub total calculation , please notify the report builder team to change the logic at their end too
                    subtotal -= ordertaxamount;
                }
//            double termAmount = CommonFunctions.getTotalTermsAmount(getDOTermDetails(deliveryOrder.getID()));
            obj.put("productTotalAmount", authHandler.formattedAmount(productTotalAmount, companyid));
            obj.put("amountBeforeTax", authHandler.formattedAmount((subtotal + totalTermAmount), companyid));
            obj.put("subtotal", authHandler.formattedAmount(subtotal, companyid));
            
            obj.put("rowTaxAmt", authHandler.formattedAmount(rowTaxAmt, companyid));
            obj.put("taxname", taxname);
            obj.put("ordertaxamount", authHandler.formattedAmount(ordertaxamount, companyid));
            if (!isOptimizedExport) {
                obj.put("isTransactionSendForQA", isTransactionSendForQA);
                obj.put("isTaxRowLvlAndFromTaxGlobalLvl", isTaxRowLvlAndFromTaxGlobalLvl);
                obj.put("isdofromautocashsales", isDOFromAutoCashSales);
                obj.put(Constants.shipdate, deliveryOrder.getShipdate() == null ? "" : authHandler.getDateOnlyFormat().format(deliveryOrder.getShipdate()));
                obj.put(InvoiceConstants.termid, deliveryOrder.getTerm() == null ? "" : deliveryOrder.getTerm().getID());
                obj.put(Constants.shipvia, deliveryOrder.getShipvia() == null ? "" : deliveryOrder.getShipvia());
                obj.put(Constants.fob, deliveryOrder.getFob() == null ? "" : deliveryOrder.getFob());
                obj.put("isfavourite", deliveryOrder.isFavourite());
                obj.put("isprinted", deliveryOrder.isPrinted());
                obj.put("isAppliedForTax", deliveryOrder.isAppliedForTax());
                obj.put("isautogenerateddo", deliveryOrder.isIsAutoGeneratedDO());
                obj.put(InvoiceConstants.deleted, deliveryOrder.isDeleted());
                obj.put(Constants.currencyKey, (deliveryOrder.getCurrency() == null ? "" : deliveryOrder.getCurrency().getCurrencyID()));
                obj.put(InvoiceConstants.currencysymbol, (deliveryOrder.getCurrency() == null ? "" : deliveryOrder.getCurrency().getSymbol()));
                obj.put(Constants.SEQUENCEFORMATID, deliveryOrder.getSeqformat() != null ? deliveryOrder.getSeqformat().getID() : "");
                obj.put(Constants.isConsignment, deliveryOrder.isIsconsignment());
                obj.put(Constants.isLeaseFixedAsset, deliveryOrder.isLeaseDO());
                obj.put(Constants.isFixedAsset, deliveryOrder.isFixedAssetDO());
                if (deliveryOrder.getCustWarehouse() != null) {
                    obj.put("custWarehouse", deliveryOrder.getCustWarehouse().getId());
                }
                obj.put("driver", deliveryOrder.getDriver() != null ? deliveryOrder.getDriver().getID() : "");
                if (deliveryOrder.isIsconsignment()) {
                    obj.put("movementtype", deliveryOrder.getMovementType() != null ? deliveryOrder.getMovementType().getID() : "");
                    obj.put("movementtypename", deliveryOrder.getMovementType() != null ? deliveryOrder.getMovementType().getValue() : "");
                }
                obj.put("getFullShippingAddress", deliveryOrder.getBillingShippingAddresses() == null ? "" : deliveryOrder.getBillingShippingAddresses().getFullShippingAddress());
                BillingShippingAddresses addresses = deliveryOrder.getBillingShippingAddresses();
                AccountingAddressManager.getTransactionAddressJSON(obj, addresses, false);
                obj.put("includeprotax", includeprotax);
                obj.put("termdetails",  getDOTermDetails(deliveryOrder.getID()));
                if(deliveryOrder.getTermsincludegst()!=null) {
                    obj.put(Constants.termsincludegst, deliveryOrder.getTermsincludegst());
                }
                obj.put("termamount", totalTermAmount);  
                Set<DOContractMapping> doContractMapping = deliveryOrder.getdOContractMappings();
                if (doContractMapping != null && !doContractMapping.isEmpty()) {
                    for (DOContractMapping docomContractMapping : doContractMapping) {
                        if (docomContractMapping.getContract() != null && docomContractMapping.getContract().getCstatus() == 2) {
                            contractstatus = docomContractMapping.getContract().getCstatus();
                        }
                        contractId = docomContractMapping.getContract().getID();
                    }
                }

                obj.put("contractstatus", contractstatus);
                obj.put("contract", contractId);
            }

                obj.put("amount", authHandler.formattedAmount(amount, companyid));
                if (deliveryOrder != null && deliveryOrder.getCurrency() != null && !deliveryOrder.getCurrency().getCurrencyID().equals(deliveryOrder.getCompany().getCurrency().getCurrencyID())) {
                    KwlReturnObject bAmt = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, amount, deliveryOrder.getCurrency().getCurrencyID(), deliveryOrder.getOrderDate(), deliveryOrder.getExternalCurrencyRate());
                    obj.put("amountinbase", authHandler.formattedAmount((Double) bAmt.getEntityList().get(0), companyid));
                } else {
                    obj.put("amountinbase", authHandler.formattedAmount(amount, companyid));
                }
//            }
                String invoiceNumbers = org.springframework.util.StringUtils.collectionToCommaDelimitedString(invoiceno);
                KwlReturnObject invoiceResult = accInvoiceDAOobj.getInvoiceNumbersOfDO(deliveryOrder.getID(), deliveryOrder.getCompany().getCompanyID());
            List<Invoice> invoiceList = invoiceResult.getEntityList();
//                Iterator invoiceItr = invoiceList.iterator();
            for (Invoice invoice : invoiceList) {
                    if (invoiceNumbers.length() > 1) {
                        invoiceNumbers += "," + invoice.getInvoiceNumber();
                    } else {
                        invoiceNumbers = invoice.getInvoiceNumber();
                    }
                }                
                obj.put("invoicenumber", invoiceNumbers);
                obj.put("invoiceno", invoiceNumbers);
                String approvalStatus = "";
                if (deliveryOrder.getApprovestatuslevel() < 0) {
                    approvalStatus = "Rejected";
                } else if (deliveryOrder.getApprovestatuslevel() < 11) {
                    String ruleid = "", userRoleName = "";
                    HashMap<String, Object> qdDataMap = new HashMap<String, Object>();
                    qdDataMap.put(Constants.companyKey, paramJobj.getString(Constants.companyKey));
                    qdDataMap.put("level", deliveryOrder.getApprovestatuslevel());
                    qdDataMap.put(Constants.moduleid, Constants.Acc_Delivery_Order_ModuleId);
                    KwlReturnObject flowresult = accMultiLevelApprovalDAOObj.getMultiApprovalRuleData(qdDataMap);
                List<Object[]> flowResultList = flowresult.getEntityList();
                for (Object rulerow[] : flowResultList) {
                        ruleid = rulerow[0].toString();
                    }
                    if (!StringUtil.isNullOrEmpty(ruleid)) {
                        qdDataMap.put("ruleid", ruleid);
                        KwlReturnObject userResult = accMultiLevelApprovalDAOObj.getApprovalRuleTargetUsers(qdDataMap);
                    List<Object[]> userResultList = userResult.getEntityList();
                    for (Object userrow[] : userResultList) {
                            String userId = userrow[0].toString();
                            String userName = userrow[1].toString();
                            KwlReturnObject kmsg = null;
                            String roleName = "Company User";
                            kmsg = permissionHandlerDAOObj.getRoleofUser(userId);
                        List<Object[]> kmsgList = kmsg.getEntityList();
                        for (Object row[] : kmsgList) {
                                roleName = row[1].toString();
                            }
                            userRoleName += roleName + " " + userName + ",";
                        }
                    }
                    if (!StringUtil.isNullOrEmpty(userRoleName)) {
                        userRoleName = userRoleName.substring(0, userRoleName.length() - 1);
                    }
                    approvalStatus = "Pending Approval" + (StringUtil.isNullOrEmpty(userRoleName) ? "" : " by " + userRoleName) + " at Level - " + deliveryOrder.getApprovestatuslevel();
                } else {
                    approvalStatus = "Approved";
                }
                obj.put("approvalstatusinfo", approvalStatus);
            if (!isOptimizedExport) {
                obj.put("approvalstatus", deliveryOrder.getApprovestatuslevel());
            }
            if (pendingapproval && !isOptimizedExport) {
                    int nextApprovalLevel = 11;
                    ScriptEngineManager mgr = new ScriptEngineManager();
                    ScriptEngine engine = mgr.getEngineByName("JavaScript");
                    HashMap<String, Object> qdDataMap = new HashMap<String, Object>();
                    qdDataMap.put("companyid", companyid);
                    qdDataMap.put("level", deliveryOrder.getApprovestatuslevel() + 1);
                    qdDataMap.put("moduleid", Constants.Acc_Delivery_Order_ModuleId);
                    KwlReturnObject flowresult = accMultiLevelApprovalDAOObj.getMultiApprovalRuleData(qdDataMap);
                List<Object[]> flowresultList = flowresult.getEntityList();
                for (Object rowObj[] : flowresultList) {
                        String rule = "";
                        if (rowObj[2] != null) {
                            rule = rowObj[2].toString();
                        }
                        int appliedUpon = Integer.parseInt(rowObj[5].toString());
                        rule = rule.replaceAll("[$$]+", String.valueOf(deliveryOrder.getTotalamountinbase()));
                        if (StringUtil.isNullOrEmpty(rule) || (!StringUtil.isNullOrEmpty(rule) && (appliedUpon != Constants.Specific_Products && appliedUpon != Constants.Specific_Products_Discount && appliedUpon != Constants.Specific_Products_Category) && Boolean.parseBoolean(engine.eval(rule).toString()))) {
                            nextApprovalLevel = deliveryOrder.getApprovestatuslevel() + 1;
                        }
                    }
                    obj.put("isFinalLevelApproval", nextApprovalLevel == 11 ? true : false);
                }
                /*
                 * ERP-9782
                 * System will not allow edit/delete non-latest DO of Free Gift.
                 */
            if (Integer.parseInt(extraCompanyPreferences.getCompany().getCountry().getID()) == (Constants.malaysian_country_id) && !isOptimizedExport) {
                    obj.put("isFreeGift", deliveryOrder.isIsFreeGift());
                    if (deliveryOrder.isIsFreeGift()) {
                        
                        /*
                         * Below logic is to find the lates free gift type transaction customer wise and financial year wise.
                         * All such latest records are added into set and each transaction is compared against it
                         */ 
                        Date firstFinancialDate = pref.getFinancialYearFrom();
                        Date DoDate = deliveryOrder.getOrderDate();
                        Calendar cal = Calendar.getInstance();
                        Calendar cal1 = Calendar.getInstance();
                        cal1.setTime(firstFinancialDate);
                        cal.setTime(DoDate);
                        cal.set(Calendar.DATE, cal1.get(Calendar.DATE));
                        cal.set(Calendar.MONTH, cal1.get(Calendar.MONTH));
                        // Get first day of financial year
                        requestParams.put("lowerLimitDate", cal.getTime());
                        // Get last day of financial year
                        cal.add(Calendar.YEAR, 1);
                        cal.add(Calendar.DATE, -1);
                        requestParams.put("upperLimitDate", cal.getTime());
                        requestParams.put("customerId", deliveryOrder.getCustomer().getID());
                        latestFreeGiftResult = accInvoiceDAOobj.checkForLatestFreeGiftJEs(requestParams);
                        if (latestFreeGiftResult.getEntityList() != null && !latestFreeGiftResult.getEntityList().isEmpty() && latestFreeGiftResult.getEntityList().get(0) != null) {
                            setOfDos.add((DeliveryOrder) latestFreeGiftResult.getEntityList().get(0));
                        }
                        if (setOfDos != null) {
                            if (!deliveryOrder.isDeleted() && !setOfDos.contains(deliveryOrder)) {
                                obj.put("isNonLatestFreeGiftDO", true);
                            }
                        }
                    }
                }
                Map<String, Object> variableMap = new HashMap<String, Object>();
                DeliveryOrderCustomData deliveryOrderCustomData = (DeliveryOrderCustomData) deliveryOrder.getDeliveryOrderCustomData();
                HashMap<String, String> replaceFieldMap = new HashMap<String, String>();
                AccountingManager.setCustomColumnValues(deliveryOrderCustomData, fieldMap, replaceFieldMap, variableMap);
                
                if (deliveryOrderCustomData != null) {
                    boolean isExport = (paramJobj.optString(Constants.isExport,null) == null) ? false : true;
                    boolean linkFlag = StringUtil.isNullOrEmpty( paramJobj.optString("linkFlag",null)) ? false : Boolean.parseBoolean( paramJobj.optString("linkFlag"));
                    boolean isDisposalINV = StringUtil.isNullOrEmpty( paramJobj.optString("isDisposalINV",null)) ? false : Boolean.parseBoolean( paramJobj.optString("isDisposalINV"));
                    JSONObject params = new JSONObject();
                    params.put(Constants.isExport, isExport);
                    if (linkFlag || srflag || isDisposalINV || FA_DOGRlinkFlag) {
                        int moduleId = isFixedAsset ? Constants.Acc_FixedAssets_PurchaseInvoice_ModuleId : srflag?Constants.Acc_Sales_Return_ModuleId : Constants.Acc_Vendor_Invoice_ModuleId;
                        if (isLeaseFixedAsset) {
                            moduleId = srflag ? Constants.Acc_Lease_Return : Constants.LEASE_INVOICE_MODULEID;
                        } else if (isConsignment) {
                            moduleId = Constants.Acc_ConsignmentSalesReturn_ModuleId;
                        } else if(isDisposalINV){
                            moduleId = Constants.Acc_FixedAssets_DisposalInvoice_ModuleId;
                        } else if(FA_DOGRlinkFlag){
                            moduleId = Constants.Acc_FixedAssets_Sales_Return_ModuleId;
                        }
                        params.put("linkModuleId", moduleId);
                        params.put("isLink", true);
                        params.put(Constants.companyKey, paramJobj.getString(Constants.companyKey));
                        params.put("customcolumn", 0);
                    }
                    if (!StringUtil.isNullOrEmpty(paramJobj.optString(Constants.browsertz,null))) {
                        params.put(Constants.browsertz, paramJobj.optString(Constants.browsertz));
                    }
                    fieldDataManagercntrl.addCustomData(variableMap, customFieldMap, customDateFieldMap, obj, params);
                }
                if (addflag) {
                    jArr.put(obj);
                }
                
            }
        } catch (Exception ex) {
            throw ServiceException.FAILURE("getDeliveryOrdersJsonMerged : " + ex.getMessage(), ex);
        }
        return jArr;
    }
    
    public String getDeliverySalesOrderStatus(Set<DeliveryOrderDetail> orderDetail) throws ServiceException {
        Iterator ite = orderDetail.iterator();

        String result = "Closed";
        double resultValue = 0;
        while (ite.hasNext()) {
            DeliveryOrderDetail soDetail = (DeliveryOrderDetail) ite.next();
            KwlReturnObject idresult = accInvoiceDAOobj.getIDFromDOD(soDetail.getID());
            List list = idresult.getEntityList();
            Iterator ite1 = list.iterator();
            double qua = 0.0;
            boolean fullInv = false;
            double quantPartTtInv = 0.0;
            while (ite1.hasNext()) {
                InvoiceDetail ge = (InvoiceDetail) ite1.next();
                if (ge.getInvoice().isPartialinv()) {
                    double quantity = ge.getInventory().getQuantity();
                    quantPartTtInv += quantity * ge.getPartamount();
                } else {
                    fullInv = true;
                    qua += ge.getInventory().getQuantity();
                }
            }

            if (fullInv) {
                resultValue = soDetail.getActualQuantity() - qua;
            } else {
                if (soDetail.getActualQuantity() * 100 > quantPartTtInv) {
                    resultValue = soDetail.getActualQuantity() - qua;
                } else {
                    resultValue = 0;
                }
            }
            if (resultValue > 0) {
                result = "Open";
                break;
            }
        }
        return result;
    }
    
 @Override   
    public JSONArray getDeliveryOrdersJson(JSONObject paramJobj, List list) throws ServiceException {
        JSONArray jArr = new JSONArray();
        try {
            HashMap<String, Object> requestParams = AccountingManager.getGlobalParams(paramJobj);
            double quantity = 0;
            double amount = 0,doqty=0;
            boolean isFixedAsset = Boolean.FALSE.parseBoolean(paramJobj.optString(Constants.isFixedAsset));
            boolean isConsignment = Boolean.FALSE.parseBoolean(paramJobj.optString(Constants.isConsignment));
            boolean isLeaseFixedAsset = Boolean.FALSE.parseBoolean(paramJobj.optString(Constants.isLeaseFixedAsset));
            boolean linkFlag = StringUtil.isNullOrEmpty(paramJobj.optString("linkFlag",null)) ? false : Boolean.parseBoolean(paramJobj.optString("linkFlag"));
            int moduleid = isFixedAsset ? Constants.Acc_FixedAssets_DeliveryOrder_ModuleId : isLeaseFixedAsset ? Constants.Acc_Lease_DO : Constants.Acc_Delivery_Order_ModuleId;
            if (isConsignment) {
                moduleid = Constants.Acc_ConsignmentDeliveryOrder_ModuleId;
            }
            String companyid = requestParams.get("companyid") !=null ? requestParams.get("companyid").toString() : "";
            ExtraCompanyPreferences extraCompanyPreferences = null;
            try{
                KwlReturnObject capresult = accountingHandlerDAOobj.getObject(ExtraCompanyPreferences.class.getName(), companyid);
                extraCompanyPreferences = (ExtraCompanyPreferences) capresult.getEntityList().get(0);
            }catch(Exception ex){
                Logger.getLogger(AccInvoiceServiceImpl.class.getName()).log(Level.SEVERE, null, ex);
                throw ServiceException.FAILURE("getDeliveryOrdersJson : " + ex.getMessage(), ex);
            }
            boolean closeflag = paramJobj.optString("closeflag",null) != null ? true : false;
            boolean avoidRecursiveLink = paramJobj.optString("avoidRecursiveLink",null) != null ? true : false;
            boolean srflag = paramJobj.optString("srflag",null) != null ? true : false;
            HashMap<String, Object> fieldrequestParams = new HashMap();
            fieldrequestParams.put(Constants.filter_names, Arrays.asList(Constants.companyid, Constants.moduleid));
            fieldrequestParams.put(Constants.filter_values, Arrays.asList(paramJobj.getString(Constants.companyKey), moduleid));
            HashMap<String, String> replaceFieldMap1 = new HashMap<String, String>();
            HashMap<String, String> customFieldMap = new HashMap<String, String>();
            HashMap<String, String> customDateFieldMap = new HashMap<String, String>();
            HashMap<String, Integer> fieldMap = accAccountDAOobj.getFieldParamsCustomMap(fieldrequestParams, replaceFieldMap1, customFieldMap, customDateFieldMap);
            Iterator itr = list.iterator();
            while (itr.hasNext()) {
                int contractstatus = 0;
                String contractId = "";
                Object[] oj = (Object[]) itr.next();
                String orderid = oj[0].toString();
                //Withoutinventory 0 for normal, 1 for billing
                boolean withoutinventory = Boolean.parseBoolean(oj[1].toString());
                KwlReturnObject objItr = accountingHandlerDAOobj.getObject(DeliveryOrder.class.getName(), orderid);
                DeliveryOrder deliveryOrder = (DeliveryOrder) objItr.getEntityList().get(0);
                boolean addflag = true;
                String status = "Open";
                Set<DeliveryOrderDetail> doRows = deliveryOrder.getRows();
                Iterator itr1 = doRows.iterator();
                boolean isLinkInSI = false;
                boolean ispartialreturned = false;
                double remainQty = 0;
                if (linkFlag) {
                    while (itr1.hasNext()) {
                        DeliveryOrderDetail dodetails = (DeliveryOrderDetail) itr1.next();
                        boolean isreqfromDO=true;
                        double returnedQty = 0;
                        String linkid = dodetails.getID();
                        returnedQty = accInvoiceDAOobj.getReturnQuantityofDOorSI(linkid, companyid, isreqfromDO);
                        if (returnedQty !=0){
                            double dodQuantity = dodetails.getActualQuantity();
                            if(dodQuantity-returnedQty == 0){
                                addflag = false;
                            } else {
                                remainQty = dodQuantity-returnedQty;
                                ispartialreturned = true;
                            }
                        }
                        if (dodetails.getCidetails() != null) {
                            isLinkInSI = true;
                            break;
                        }
                    }
                }
                if (srflag) {
                    status = getDeliveryReturnStatus(doRows,"",isConsignment,extraCompanyPreferences.isSalesorderreopen());
                } else {
                    Iterator itr2 = doRows.iterator();
                    while (itr2.hasNext()) {
                        DeliveryOrderDetail tempdodetails = (DeliveryOrderDetail) itr2.next();
                        doqty = getDeliveryOrderDetailStatus(tempdodetails);
                        if (doqty > 0) {
                            status = "Open";
                            break;
                        }else {
                            status = "Closed";
                        }
                    }
                }
                /*
                 * ERP-9782 - Exclude free gift DO from linking
                 */
                if(deliveryOrder.isIsFreeGift()){
                    continue;
                }
                if ((closeflag && deliveryOrder.isDeleted())) {
                    addflag = false;
                    continue;
                } 
                /* If SI->DO then again DO->SI is not allowed for linking
                 i.e reverse linking is not allowed
                
                 srflag->true if DO is fetched to link in SR
                 */
                else if (isLinkInSI && !srflag) {
                    addflag = false;
                    continue;
                } 
                else if (closeflag && (status.equalsIgnoreCase("Closed"))) {
                    addflag = false;
                    continue;
                }
                boolean includeprotax = false;
                amount = 0;
                if (doRows != null && !doRows.isEmpty()) {
                    for (DeliveryOrderDetail temp : doRows) {
                        quantity = temp.getInventory().getQuantity();
                        amount += temp.getRate() * quantity;
                        if (avoidRecursiveLink && temp.getCidetails() != null) {
                            addflag = false;
                            continue;
                        }
                        // getting tax also
                        if (temp.getTax() != null) {
                            includeprotax = true;
                        }
                        double taxAmt = temp.getRowTaxAmount();
                        amount += taxAmt;
                    }
                }
                Customer customer = deliveryOrder.getCustomer();
                JSONObject obj = new JSONObject();
                obj.put(Constants.billid, deliveryOrder.getID());
                obj.put(Constants.companyKey, deliveryOrder.getCompany().getCompanyID());
                obj.put("companyname", deliveryOrder.getCompany().getCompanyName());
                obj.put("externalcurrencyrate", deliveryOrder.getExternalCurrencyRate());
                obj.put("withoutinventory", withoutinventory);
                obj.put(InvoiceConstants.personid, customer.getID());
                obj.put(InvoiceConstants.billno, deliveryOrder.getDeliveryOrderNumber());
                obj.put("isFromPOS", deliveryOrder.isPOSDO());
                obj.put("isapplytaxtoterms",deliveryOrder.isApplyTaxToTerms());
                obj.put("date", authHandler.getDateOnlyFormat().format(deliveryOrder.getOrderDate()));
                if (deliveryOrder.getModifiedby() != null) {
                    obj.put("lasteditedby", StringUtil.getFullName(deliveryOrder.getModifiedby()));
                }
                obj.put(InvoiceConstants.personname, customer.getName());
                HashMap<String, Object> addressParams = new HashMap<String, Object>();
                addressParams.put(Constants.companyKey, deliveryOrder.getCompany().getCompanyID());
                addressParams.put("isDefaultAddress", true);    //always true to get defaultaddress
                addressParams.put("isBillingAddress", true);    //true to get billing address
                addressParams.put(Constants.customerid, customer.getID());
                CustomerAddressDetails customerAddressDetails = accountingHandlerDAOobj.getCustomerAddressobj(addressParams);
                obj.put("personemail", customerAddressDetails != null ? customerAddressDetails.getEmailID() : "");
                obj.put("customername", customer.getName());
                obj.put(InvoiceConstants.aliasname, customer.getAliasname());
                obj.put("customercode", customer.getAcccode() == null ? "" : customer.getAcccode());
                obj.put("billtoaddress", deliveryOrder.getBillingShippingAddresses() != null ? CommonFunctions.getBillingShippingAddress(deliveryOrder.getBillingShippingAddresses(), true) : "");
                obj.put("shiptoaddress", deliveryOrder.getBillingShippingAddresses() != null ? CommonFunctions.getBillingShippingAddress(deliveryOrder.getBillingShippingAddresses(), false) : "");
                obj.put("dateinuserformat", authHandler.getUserDateFormatterWithoutTimeZone(paramJobj).format(deliveryOrder.getOrderDate()));
                obj.put("createdby", deliveryOrder.getCreatedby() == null ? "" : StringUtil.getFullName(deliveryOrder.getCreatedby()));
                obj.put("termdays", customer.getCreditTerm() == null ? 0 : customer.getCreditTerm().getTermdays());
                obj.put("salesPerson", deliveryOrder.getSalesperson() == null ? "" : deliveryOrder.getSalesperson().getID());
                //ERP-41011: Used for remote Store of Sales Person
                obj.put("salespersonname", deliveryOrder.getSalesperson() == null ? "" : deliveryOrder.getSalesperson().getValue());
                obj.put("salesPersonCode", deliveryOrder.getSalesperson() == null ? "" : deliveryOrder.getSalesperson().getCode());
                obj.put("createdby", deliveryOrder.getCreatedby() == null ? "" : deliveryOrder.getCreatedby().getFullName());
                obj.put("mapSalesPersonName", deliveryOrder.getSalesperson() == null ? "" : deliveryOrder.getSalesperson().getValue());
                obj.put("termname", customer.getCreditTerm() == null ? 0 : customer.getCreditTerm().getTermname());
                obj.put(Constants.memo, deliveryOrder.getMemo());
                obj.put(Constants.posttext, deliveryOrder.getPostText() == null ? "" : deliveryOrder.getPostText());
                obj.put("costcenterid", deliveryOrder.getCostcenter() == null ? "" : deliveryOrder.getCostcenter().getID());
                obj.put("costcenterName", deliveryOrder.getCostcenter() == null ? "" : deliveryOrder.getCostcenter().getName());
                obj.put("customerporefno", (deliveryOrder.getCustomerPORefNo()== null) ? "":deliveryOrder.getCustomerPORefNo());
                obj.put("statusID", deliveryOrder.getStatus() == null ? "" : deliveryOrder.getStatus().getID());
                obj.put("status", deliveryOrder.getStatus() == null ? "" : deliveryOrder.getStatus().getValue());
                obj.put("gtaapplicable", deliveryOrder.isRcmapplicable()); // Get RCM applicable Check - Used for INDIA only
                /**
                 * Put Merchant Exporter Check
                 */
                obj.put(Constants.isMerchantExporter, deliveryOrder.isIsMerchantExporter()); 
                /**
                 * Put GST document history.
                 */
                if (deliveryOrder.getCompany().getCountry().getID().equalsIgnoreCase("" + Constants.indian_country_id)) {
                    obj.put("refdocid", deliveryOrder.getID());
                    fieldDataManagercntrl.getGSTDocumentHistory(obj);

                }
                if (deliveryOrder.isIsDOClosed()) {
                    obj.put("status", Constants.closedStatus);
                }
                double taxPercent = 0;
                if (deliveryOrder.getTax() != null) {
                    KwlReturnObject taxresult = accTaxObj.getTaxPercent(paramJobj.getString(Constants.companyKey), deliveryOrder.getOrderDate(), deliveryOrder.getTax().getID());
                    taxPercent = (Double) taxresult.getEntityList().get(0);

                }
                obj.put("taxid", deliveryOrder.getTax() != null ? deliveryOrder.getTax().getID() : "");
                obj.put(TAXPERCENT, taxPercent);
                Set<DeliveryOrderDetail> deliveryOrderDetails = deliveryOrder.getRows();
                double rowTaxAmt = 0;
                boolean isTaxRowLvlAndFromTaxGlobalLvl = false;
                for (DeliveryOrderDetail deliveryOrderDetail : deliveryOrderDetails) {
                    
                    if (deliveryOrderDetail.getTax() != null) {
                        if (deliveryOrderDetail.getSodetails() != null && deliveryOrderDetail.getSodetails().getSalesOrder() != null) {
                            if (deliveryOrderDetail.getSodetails().getSalesOrder().getTax() != null) {
                                isTaxRowLvlAndFromTaxGlobalLvl = true;
                            }
                        }
                        if (deliveryOrderDetail.getCidetails()!= null && deliveryOrderDetail.getCidetails().getInvoice() != null) {
                            if (deliveryOrderDetail.getCidetails().getInvoice().getTax() != null) {
                                isTaxRowLvlAndFromTaxGlobalLvl = true;
                            }
                        }
                        includeprotax = true;
                        rowTaxAmt += deliveryOrderDetail.getRowTaxAmount();
                    }
                }
                
                obj.put("isTaxRowLvlAndFromTaxGlobalLvl", isTaxRowLvlAndFromTaxGlobalLvl);
                obj.put("rowTaxAmt", rowTaxAmt);
                obj.put(Constants.shipdate, deliveryOrder.getShipdate() == null ? "" : authHandler.getDateOnlyFormat().format(deliveryOrder.getShipdate()));
                obj.put(InvoiceConstants.termid, deliveryOrder.getTerm() == null ? "" : deliveryOrder.getTerm().getID());
                obj.put(Constants.shipvia, deliveryOrder.getShipvia() == null ? "" : deliveryOrder.getShipvia());
                obj.put(Constants.fob, deliveryOrder.getFob() == null ? "" : deliveryOrder.getFob());
                obj.put("isfavourite", deliveryOrder.isFavourite());
                obj.put("gstIncluded", deliveryOrder.isGstIncluded());
                obj.put("isprinted", deliveryOrder.isPrinted());
                obj.put("isAppliedForTax", deliveryOrder.isAppliedForTax());
                obj.put("isautogenerateddo", deliveryOrder.isIsAutoGeneratedDO());
                obj.put(InvoiceConstants.deleted, deliveryOrder.isDeleted());
                obj.put(Constants.currencyKey, (deliveryOrder.getCurrency() == null ? "" : deliveryOrder.getCurrency().getCurrencyID()));
                obj.put(InvoiceConstants.currencysymbol, (deliveryOrder.getCurrency() == null ? "" : deliveryOrder.getCurrency().getSymbol()));
                obj.put("currencyCode", (deliveryOrder.getCurrency() == null ? "" : deliveryOrder.getCurrency().getCurrencyCode()));
                obj.put(Constants.SEQUENCEFORMATID, deliveryOrder.getSeqformat() != null ? deliveryOrder.getSeqformat().getID() : "");
                obj.put(Constants.isConsignment, deliveryOrder.isIsconsignment());
                obj.put(Constants.isLeaseFixedAsset, deliveryOrder.isLeaseDO());
                obj.put(Constants.isFixedAsset, deliveryOrder.isFixedAssetDO());
                if (deliveryOrder.getCustWarehouse() != null) {
                    obj.put("custWarehouse", deliveryOrder.getCustWarehouse().getId());
                }
                obj.put("driver", deliveryOrder.getDriver() != null ? deliveryOrder.getDriver().getID() : "");
                if (deliveryOrder.isIsconsignment()) {
                    obj.put("movementtype", deliveryOrder.getMovementType() != null ? deliveryOrder.getMovementType().getID() : "");
                    obj.put("movementtypename", deliveryOrder.getMovementType() != null ? deliveryOrder.getMovementType().getValue() : "");
                }
                BillingShippingAddresses addresses = deliveryOrder.getBillingShippingAddresses();
                AccountingAddressManager.getTransactionAddressJSON(obj, addresses, false);
                obj.put("includeprotax", includeprotax);
                obj.put("termdetails",  getDOTermDetails(deliveryOrder.getID()));
                if(deliveryOrder.getTermsincludegst()!=null) {
                    obj.put(Constants.termsincludegst, deliveryOrder.getTermsincludegst());
                }
                obj.put("termamount", CommonFunctions.getTotalTermsAmount(getDOTermDetails(deliveryOrder.getID())));  
                Set<DOContractMapping> doContractMapping = deliveryOrder.getdOContractMappings();
                if (doContractMapping != null && !doContractMapping.isEmpty()) {
                    for (DOContractMapping docomContractMapping : doContractMapping) {
                        if (docomContractMapping.getContract() != null && docomContractMapping.getContract().getCstatus() == 2) {
                            contractstatus = docomContractMapping.getContract().getCstatus();
                        }
                        contractId = docomContractMapping.getContract().getID();
                    }
                }
                obj.put("contractstatus", contractstatus);
                obj.put("contract", contractId);
                obj.put(Constants.IsRoundingAdjustmentApplied, deliveryOrder.isIsRoundingAdjustmentApplied());
                if (deliveryOrder.isIsRoundingAdjustmentApplied()) {//for rounding the exact amount is considered
                    amount = deliveryOrder.getTotalamount();
                }
                obj.put("amount", authHandler.round(amount, companyid));
                if (deliveryOrder.getCurrency() != null) {
                    KwlReturnObject bAmt = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, amount, deliveryOrder.getCurrency().getCurrencyID(), deliveryOrder.getOrderDate(), deliveryOrder.getExternalCurrencyRate());
                    obj.put("amountinbase", authHandler.round((Double) bAmt.getEntityList().get(0), companyid));
                }
                Map<String, Object> variableMap = new HashMap<String, Object>();
                DeliveryOrderCustomData deliveryOrderCustomData = (DeliveryOrderCustomData) deliveryOrder.getDeliveryOrderCustomData();
                HashMap<String, String> replaceFieldMap = new HashMap<String, String>();
                AccountingManager.setCustomColumnValues(deliveryOrderCustomData, fieldMap, replaceFieldMap, variableMap);
                if (deliveryOrderCustomData != null) {
                    boolean isExport = (paramJobj.optString(Constants.isExport,null) == null) ? false : true;
                    JSONObject params = new JSONObject();
                    params.put(Constants.isExport, isExport);
                    if (linkFlag) {
                        int moduleId = srflag?Constants.Acc_Sales_Return_ModuleId:isFixedAsset ? Constants.Acc_FixedAssets_PurchaseInvoice_ModuleId : Constants.Acc_Invoice_ModuleId;
                        params.put("linkModuleId", moduleId);
                        params.put("isLink", true);
                        params.put(Constants.companyKey, paramJobj.getString(Constants.companyKey));
                        params.put("customcolumn", 0);
                    }
                    fieldDataManagercntrl.addCustomData(variableMap, customFieldMap, customDateFieldMap, obj, params);
                }
                if (addflag) {
                    jArr.put(obj);
                }
            }
        } catch (Exception ex) {
            throw ServiceException.FAILURE("getDeliveryOrdersJson : " + ex.getMessage(), ex);
        }
        return jArr;
    }
    
    @Override
    public String getDeliveryReturnStatus(Set<DeliveryOrderDetail> orderDetail,String salesrturnid,boolean isconsignment,boolean  soReopen) throws ServiceException {
        Iterator ite = orderDetail.iterator();
            
        String result = "Closed";
        while(ite.hasNext()){
            DeliveryOrderDetail soDetail = (DeliveryOrderDetail)ite.next();
            //we will bring only those quantity of currnetsalesreturn
            KwlReturnObject idresult = accInvoiceDAOobj.getDODIDFromSRD(soDetail.getID(),salesrturnid);
            List list = idresult.getEntityList();
            Iterator ite1 = list.iterator();
            double qua = 0;
            int poupdatedcount=0;
            while(ite1.hasNext()){
                SalesReturnDetail ge = (SalesReturnDetail) ite1.next();
                qua += ge.getInventory().getQuantity();
            }
            
            /*
             * calculating quantity of returned DO
             */
            double returnedDoQuantity = 0;

            idresult = accInvoiceDAOobj.getDODIDFromSRD(soDetail.getID(), "");
            List<SalesReturnDetail> sodetaillist = idresult.getEntityList();

            for (SalesReturnDetail ge : sodetaillist) {
                returnedDoQuantity += ge.getInventory().getQuantity();
            }
            
            if (soDetail != null) {
                if (soDetail.getSodetails() != null && !StringUtil.isNullOrEmpty(soDetail.getSodetails().getID())) {
                    HashMap hMap = new HashMap();
                    hMap.put("sodetails", soDetail.getSodetails().getID());
                    hMap.put(Constants.companyKey, soDetail.getCompany().getCompanyID());
                    hMap.put("balanceqty",qua);
                    hMap.put("add", true);
                    if (!isconsignment && soReopen) {
                        accCommonTablesDAO.updateSalesorderOrderStatus(hMap);
                        /*
                         * Updating isLineitemClosed & isSOClosed flag to false
                         * if DO(linked with SO) is returned
                         */
                        soDetail.getSodetails().setIsLineItemClosed(false);
                        soDetail.getSodetails().getSalesOrder().setIsSOClosed(false);
                        poupdatedcount++;
                        if (poupdatedcount > 0) {
                            HashMap poMap = new HashMap();
                            if (soDetail.getSodetails().getSalesOrder() != null && !StringUtil.isNullOrEmpty(soDetail.getSodetails().getSalesOrder().getID())) {
                                hMap.put("salesOrder", soDetail.getSodetails().getSalesOrder());
                                hMap.put("value", "2");
                                hMap.put("isSOOpen", true);
                                accInvoiceDAOobj.updateSOLinkflag(hMap);

                            }
                        }
                    }
                }
            }
            if(returnedDoQuantity < soDetail.getDeliveredQuantity()){
                result = "Open";
                break;
            }
        }
        return result;
    }  
    
    @Override
    public KwlReturnObject getNewBatchSerialForConsignmentLoan(Product product, HttpServletRequest request, String documentid) throws ServiceException, SessionExpiredException, JSONException {
        List returnList = new ArrayList();
        try {
            String batchName = "";
            String serialName = "";
            String assetName="";
            List<String> batchList = new ArrayList();
            List<String> serialList = new ArrayList();
            List<String> assetList = new ArrayList();
            KwlReturnObject kmsg = null;
            if (!product.isIsBatchForProduct() && !product.isIslocationforproduct() && !product.isIswarehouseforproduct() && !product.isIsrowforproduct() && !product.isIsrackforproduct() && !product.isIsbinforproduct() && product.isIsSerialForProduct()) {
                kmsg = accCommonTablesDAO.getOnlySerialDetailsForConsignmentLoan(documentid);
            } else {
                kmsg = accCommonTablesDAO.getBatchSerialDetailsForConsignmentLoan(documentid, !product.isIsSerialForProduct());
            }
            
            List<Object[]> kmsgList = kmsg.getEntityList();
            for (Object[] row : kmsgList) {
                if (row[0] != null && !batchList.contains((String) row[0])) {
                    batchList.add((String) row[0]);
                }
                
                if (row[1] != null && !serialList.contains((String) row[1])) {
                    serialList.add((String) row[1]);
                }
                if (row[2] != null && !assetList.contains((String) row[2])) {
                    assetList.add((String) row[2]);
            }
            }
            
            for (String batchStr : batchList) {
                batchName += batchStr + ", ";
            }
            
            for (String serialStr : serialList) {
                serialName += serialStr + ", ";
            }
            for (String assetNameStr : assetList) {
                assetName += assetNameStr + ", ";
            }
            
            if (!StringUtil.isNullOrEmpty(batchName)) {
                batchName = batchName.substring(0, batchName.length() - 2);
            }
            
            if (!StringUtil.isNullOrEmpty(serialName)) {
                serialName = serialName.substring(0, serialName.length() - 2);
            }
            if (!StringUtil.isNullOrEmpty(assetName)) {
                assetName = assetName.substring(0, assetName.length() - 2);
            }
            
            returnList.add(batchName);
            returnList.add(serialName);
            returnList.add(assetName);
            
        } catch (Exception ex) {
            Logger.getLogger(AccInvoiceServiceImpl.class.getName()).log(Level.SEVERE, null, ex);
            throw ServiceException.FAILURE("getNewBatchSerialForConsignmentLoan: " + ex.getMessage(), ex);
        }
        return new KwlReturnObject(true, "", null, returnList, returnList.size());
    }
    public Map<String, Object[]> getBatchSerialForConsignmentLoan(List<Object[]> list,String companyId) throws ServiceException, SessionExpiredException, JSONException {
        Map<String, Object[]> batchSerialMap = new HashMap<String, Object[]>();
        try {
            String documentIds = "";
            for (Object[] row : list) {
                String dodid = (row[0] != null) ? (String) row[0] : "";
                if (!StringUtil.isNullOrEmpty(dodid)) {
                    documentIds += "'" + dodid + "',";
                }
            }
            if (!StringUtil.isNullOrEmpty(documentIds)) {
                documentIds = documentIds.substring(0, documentIds.length() - 1);
            }
            KwlReturnObject kmsg = null;
            kmsg = accCommonTablesDAO.getBatchSerialDetailsForLoanReport(documentIds, false, companyId);
    
            List<Object[]> kmsgList = kmsg.getEntityList();
            for (Object[] row : kmsgList) {
                String batchName = "";
                String serialName = "";
                String assetName = "";
                String key = row[3] != null ? (String) row[3] : "";

                if (row[0] != null) {
                    batchName = ((String) row[0]);
                }

                if (row[1] != null) {
                    serialName = ((String) row[1]);
                }
                if (row[2] != null) {
                    assetName = ((String) row[2]);
                }
                if (batchSerialMap.containsKey(key)) {
                    Object ob[] = batchSerialMap.get(key);
                    String batch = (String) ob[0]!=null?(String) ob[0]:batchName;
                    if (!StringUtil.isNullOrEmpty((String) ob[0])) {
                        String vatchArr[] = ob[0].toString().split(",");
                        ArrayList<String> citylist = new ArrayList<String>(Arrays.asList(vatchArr));
                        if (!citylist.contains(batchName)) {
                            batch = !StringUtil.isNullOrEmpty((String) ob[0]) ? ((String) ob[0] + "," + batchName) : "";
                        }
                    }

                    String ser = !StringUtil.isNullOrEmpty((String) ob[1]) ? ((String) ob[1] + "," + serialName) : "";
                    String asset =!StringUtil.isNullOrEmpty((String) ob[2]) ? ((String) ob[2] + "," + assetName) : "";
                    Object[] obj = new Object[]{batch, ser, asset};
                    batchSerialMap.put(key, obj);
                } else {
                    Object[] obj = new Object[]{batchName, serialName, assetName};
                    batchSerialMap.put(key, obj);
                }

            }

        } catch (Exception ex) {
            Logger.getLogger(AccInvoiceServiceImpl.class.getName()).log(Level.SEVERE, null, ex);
            throw ServiceException.FAILURE("getNewBatchSerialForConsignmentLoan: " + ex.getMessage(), ex);
        }
        return batchSerialMap;
    }
    public Map<String, Object[]> getBatchSerialDetailsForReturnReport(List<Object[]> list,String companyId) throws ServiceException, SessionExpiredException, JSONException {
        Map<String, Object[]> batchSerialMap = new HashMap<String, Object[]>();
        try {
            String documentIds = "";
            for (Object[] row : list) {
                String dodid = (row[0] != null) ? (String) row[0] : "";
                if (!StringUtil.isNullOrEmpty(dodid)) {
                    documentIds += "'" + dodid + "',";
                }
            }
            if (!StringUtil.isNullOrEmpty(documentIds)) {
                documentIds = documentIds.substring(0, documentIds.length() - 1);
            }
            KwlReturnObject kmsg = null;
            kmsg = accCommonTablesDAO.getBatchSerialDetailsForReturnReport(documentIds, false, companyId);
    
            List<Object[]> kmsgList = kmsg.getEntityList();
            for (Object[] row : kmsgList) {
                String batchName = "";
                String serialName = "";
                String assetName = "";
                String key = row[3] != null ? (String) row[3] : "";

                if (row[0] != null) {
                    batchName = ((String) row[0]);
                }

                if (row[1] != null) {
                    serialName = ((String) row[1]);
                }
                if (row[2] != null) {
                    assetName = ((String) row[2]);
                }
                if (batchSerialMap.containsKey(key)) {
                    Object ob[] = batchSerialMap.get(key);
                    String batch = (String) ob[0]!=null?(String) ob[0]:batchName;
                    if (!StringUtil.isNullOrEmpty((String) ob[0])) {
                        String vatchArr[] = ob[0].toString().split(",");
                        ArrayList<String> citylist = new ArrayList<String>(Arrays.asList(vatchArr));
                        if (!citylist.contains(batchName)) {
                            batch = !StringUtil.isNullOrEmpty((String) ob[0]) ? ((String) ob[0] + "," + batchName) : "";
                        }
                    }

                    String ser = !StringUtil.isNullOrEmpty((String) ob[1]) ? ((String) ob[1] + "," + serialName) : "";
                    String asset =!StringUtil.isNullOrEmpty((String) ob[2]) ? ((String) ob[2] + "," + assetName) : "";
                    Object[] obj = new Object[]{batch, ser, asset};
                    batchSerialMap.put(key, obj);
                } else {
                    Object[] obj = new Object[]{batchName, serialName, assetName};
                    batchSerialMap.put(key, obj);
                }

            }

        } catch (Exception ex) {
            Logger.getLogger(AccInvoiceServiceImpl.class.getName()).log(Level.SEVERE, null, ex);
            throw ServiceException.FAILURE("getNewBatchSerialForConsignmentLoan: " + ex.getMessage(), ex);
        }
        return batchSerialMap;
    }
    private void setCustomColumnValuesForProduct(AccountCustomData doDetailsProductCustomData, HashMap<String, Integer> fieldMap, Map<String, String> replaceFieldMap,
        Map<String, Object> variableMap, JSONObject params) throws JSONException {
        DateFormat userDateFormat=null;
        if(params.has(Constants.userdf)){
           userDateFormat=(DateFormat)params.get(Constants.userdf);      
        }                    
        for (Map.Entry<String, Integer> field : fieldMap.entrySet()) {
            boolean isForReport = params.optBoolean(Constants.isForReport, false);
            boolean isExport = params.optBoolean(Constants.isExport, false);
            Integer colnumber = field.getValue();
            if (colnumber > 0) { // colnumber will be 0 if key is part of reference map
                Integer isref = fieldMap.get(field.getKey() + "#" + colnumber);// added '#' while creating map collection for custom fields.
                // Without this change, it creates problem if two custom columns having name like XYZ and XYZ1
                String coldata = null;
                if (isref != null) {
                    try {
                        if (doDetailsProductCustomData != null) {
                            coldata = doDetailsProductCustomData.getCol(colnumber);
                        }
                        if (!StringUtil.isNullOrEmpty(coldata)) {
                            if (coldata.length() > 1) {
                                if (isref == 1) {
                                } else if (isref == 0 || isref == 7) {
                                    if (isForReport) {
                                        String valueForReport = "";
                                        String[] valueData = coldata.split(",");
                                        for (String value : valueData) {
                                            KwlReturnObject rdresult = accountingHandlerDAOobj.getObject(FieldComboData.class.getName(), value);
                                            FieldComboData fieldComboData = (FieldComboData) rdresult.getEntityList().get(0);
                                            if (fieldComboData != null) {
                                                valueForReport += fieldComboData.getValue() + ",";
                                            }
                                        }
                                        if (valueForReport.length() > 1) {
                                            coldata = valueForReport.substring(0, valueForReport.length() - 1);
                                        }
                                    } else{
                                        coldata=coldata;
                                    }
                                } else if (isref == 3 && isExport) {
                                    //This code change is made because date will not be long value now,it will be date in String form refer ERP-32324 
                                    DateFormat defaultDateFormat = new SimpleDateFormat(Constants.MMMMdyyyy);
                                    Date dateFromDB = null;
                                    DateFormat df2 = userDateFormat != null ? userDateFormat : new SimpleDateFormat(Constants.yyyyMMdd);
                                    try {
                                        dateFromDB = defaultDateFormat.parse(coldata);
                                        coldata = df2.format(dateFromDB);

                                    } catch (Exception e) {
                                    }
                                }
                            }
                            variableMap.put(field.getKey(), coldata);
                        }
                    } catch (IllegalArgumentException ex) {
                        ex.printStackTrace();
                    } catch (Exception ex) {
                        ex.printStackTrace();
                    }
                }
            }
        }
    }
    
    @Override
    public String deleteRecurringInvoiceRule(HashMap<String, Object> requestParams) throws ServiceException, SessionExpiredException {
        String msg="";
        DefaultTransactionDefinition def = new DefaultTransactionDefinition();       
        def.setName("Delete_RIR_Tx");
        def.setPropagationBehavior(TransactionDefinition.PROPAGATION_REQUIRED);
        TransactionStatus status =null;
        Locale locale =null;
        if(requestParams.containsKey("locale")){
            locale = (Locale) requestParams.get("locale");
        }
        try{
            String nonDeletedRepeatedInvoices="";
            JSONArray dataArray=new JSONArray();
            String userFullName =(String) requestParams.get("userFullName"); 
            dataArray=new JSONArray((String)requestParams.get("data"));
            for(int i=0;i<dataArray.length();i++){
                JSONObject obj=dataArray.getJSONObject(i);
                String invoicenumber=obj.optString("invoicenumber","");
                String repeateid=obj.getString("repeatedid");
                try{
                   status =txnManager.getTransaction(def);
                   deleteRecurringInvoiceRule(requestParams,obj);
                   auditTrailObj.insertAuditLog(AuditAction.REPEATED_INVOICE_DELETE, "User " + userFullName + " has deleted a recurring invoice " + invoicenumber, requestParams, repeateid);                                    
                   txnManager.commit(status);
                }catch(Exception ex){
                    nonDeletedRepeatedInvoices+=nonDeletedRepeatedInvoices.equals("")?invoicenumber:","+invoicenumber;
                    txnManager.rollback(status);
                    Logger.getLogger(AccInvoiceServiceImpl.class.getName()).log(Level.SEVERE, null, ex);
            }
            }
            if(!StringUtil.isNullOrEmpty(nonDeletedRepeatedInvoices)){
               msg="Except Rerord(s) "+nonDeletedRepeatedInvoices+" all selected records have been deleted successfully."; 
                    } else {
               msg=messageSource.getMessage("acc.commo.Allselectedrecord(s)havebeendeletedsuccessfully",null,locale);
                    }

        }catch(Exception ex){
            Logger.getLogger(AccInvoiceServiceImpl.class.getName()).log(Level.SEVERE, null, ex);
            throw ServiceException.FAILURE("deleteRecurringInvoiceRule: " + ex.getMessage(), ex);  
                }
        return msg;
                    }

    public void deleteRecurringInvoiceRule(HashMap<String, Object> requestParams, JSONObject obj) throws JSONException, ServiceException {
        String invoiceTable="";
        String repeateid=obj.getString("repeatedid");
        String invoiceid=obj.getString("invoiceid");

        boolean isSalesInvoice=Boolean.parseBoolean((String)requestParams.get("isSalesInvoice"));
        if(isSalesInvoice){
            invoiceTable="invoice";
        }else {
            invoiceTable="goodsreceipt";
                    }
        //repeateInvoice is foreign key in GoodsReceipt/Invoice so setting it null for removing dependency before deleting RepeatedInvoices 
        accInvoiceDAOobj.updateToNullRepeatedInvoiceOfInvoice(invoiceTable,repeateid,invoiceid);

        //Deleting entry from RepeateJEMemo as it is redundant after deleting RepeatedInvoices 
        accJournalEntryobj.DelRepeateJEMemo(repeateid, "RepeatedInvoiceID");

        //Finally Deleting RepeatedInvoices 
        accInvoiceDAOobj.deleteRepeatedInvoice(repeateid);
                    }

    @Override
    public JSONObject getCustomerPartyLedgerSummary(HttpServletRequest request) throws ServiceException, JSONException, SessionExpiredException, ParseException {
        JSONObject jObj = new JSONObject();
        JSONObject mainJobj = new JSONObject();
        JSONArray jArr = new JSONArray();
        try {
            HashMap invoiceRequestParams = AccInvoiceServiceHandler.getInvoiceRequestMap(request);
            String companyid = sessionHandlerImpl.getCompanyid(request);
            invoiceRequestParams.put("companyid", companyid);
            boolean checkForEx = false;
            if (StringUtil.getBoolean(request.getParameter("checkforex"))) {
                checkForEx = StringUtil.getBoolean(request.getParameter("checkforex"));
            }
            double d_open_amount_base = 0;
            double c_open_amount_base = 0;
            double c_amount_base = 0;
            double d_amount_base = 0;
            double balance_base = 0;

            KwlReturnObject custresult = accCustomerDAOobj.getCustomerForAgedReceivable(invoiceRequestParams);
            Iterator itrcust = custresult.getEntityList().iterator();
            if (invoiceRequestParams.containsKey(Constants.start)) { //Removing paging here because it is applying on each vendor data (CN/DN etc). Due to this complete amount due not showing in AP Summary.  
                invoiceRequestParams.remove(Constants.start);
            }
            if (invoiceRequestParams.containsKey(Constants.limit)) {
                invoiceRequestParams.remove(Constants.limit);
            }
            String start = "";
            if (!checkForEx) {
                if (!StringUtil.isNullOrEmpty(request.getParameter(Constants.start))) {
                    start = request.getParameter(Constants.start);
                }
            }

            while (itrcust.hasNext()) {
                Object custid = itrcust.next();
                d_open_amount_base = c_open_amount_base = 0;
                d_amount_base = c_amount_base = 0;
                balance_base = 0;
                JSONArray invjarr = new JSONArray();
                String personID = null;
                String personName = null;
                String code = "";
                String aliasname = "";
                double amountinbase = 0;
                boolean isCN = false;
                boolean isRP = false;
                invoiceRequestParams.put(Constants.customerid, custid);
                invoiceRequestParams.put("accid", custid);
                invoiceRequestParams.put("cntype", null);
                KwlReturnObject objItr = accountingHandlerDAOobj.getObject(Customer.class.getName(), custid.toString());
                Customer customer = (Customer) objItr.getEntityList().get(0);
                String currencyidCust = customer.getAccount().getCurrency().getCurrencyID();
                String currencySymbolCust = customer.getAccount().getCurrency().getSymbol();
                String currencyNameCust = customer.getAccount().getCurrency().getName();

                KwlReturnObject result = accInvoiceDAOobj.getInvoicesMerged(invoiceRequestParams);
                List list = result.getEntityList();
                if (!list.isEmpty() || request.getParameter("filename") != null) {
                    invjarr = accInvoiceServiceDAO.getInvoiceJsonMerged(request, list, invjarr);
                }
                JSONArray OBJArryInvoice = new JSONArray();
                result = accInvoiceDAOobj.getOpeningBalanceInvoices(invoiceRequestParams);
                if (result.getRecordTotalCount() > 0) {
                    OBJArryInvoice = AccInvoiceServiceHandler.getAgedOpeningBalanceInvoiceJson(invoiceRequestParams, result.getEntityList(), OBJArryInvoice, accCurrencyDAOobj, accInvoiceCommon, request, accountingHandlerDAOobj,accAccountDAOobj,fieldDataManagercntrl,accJournalEntryobj);
                    for (int i = 0; i < OBJArryInvoice.length(); i++) {
                        invjarr.put(OBJArryInvoice.get(i));
                    }
                }

                JSONArray OBJArryDebitNote = new JSONArray();
                result = accDebitNoteobj.getOpeningBalanceCustomerDNs(invoiceRequestParams);
                if (result.getRecordTotalCount() > 0) {
                    OBJArryDebitNote = AccInvoiceServiceHandler.getAgedOpeningBalanceDebitNoteJson(invoiceRequestParams, result.getEntityList(), OBJArryDebitNote, accCurrencyDAOobj, accReceiptDAOobj, request, accountingHandlerDAOobj,accAccountDAOobj,fieldDataManagercntrl,accJournalEntryobj,accCreditNoteDAOobj);
                    for (int i = 0; i < OBJArryDebitNote.length(); i++) {
                        invjarr.put(OBJArryDebitNote.get(i));
                    }
                }

                JSONArray OBJArryCreditNote = new JSONArray();
                result = accCreditNoteDAOobj.getOpeningBalanceCNs(invoiceRequestParams);
                if (result.getRecordTotalCount() > 0) {
                    OBJArryCreditNote = AccInvoiceServiceHandler.getAgedOpeningBalanceCreditNoteJson(invoiceRequestParams, result.getEntityList(), OBJArryCreditNote, accCurrencyDAOobj, accPaymentDAOobj, request, accountingHandlerDAOobj,accCreditNoteDAOobj,accAccountDAOobj,fieldDataManagercntrl,accJournalEntryobj);
                    for (int i = 0; i < OBJArryCreditNote.length(); i++) {
                        invjarr.put(OBJArryCreditNote.get(i));
                    }
                }

                JSONArray OBJArryPayment = new JSONArray();
                result = accReceiptDAOobj.getOpeningBalanceReceipts(invoiceRequestParams);
                if (result.getRecordTotalCount() > 0) {
                    OBJArryPayment = AccInvoiceServiceHandler.getAgedOpeningBalanceReceiptJson(invoiceRequestParams, result.getEntityList(), OBJArryPayment, accCurrencyDAOobj, accReceiptDAOobj, request, accountingHandlerDAOobj,accAccountDAOobj,fieldDataManagercntrl,accJournalEntryobj);
                    for (int i = 0; i < OBJArryPayment.length(); i++) {
                        invjarr.put(OBJArryPayment.get(i));
                    }
                }

                JSONArray CreditNotejArr = new JSONArray();
                result = accCreditNoteDAOobj.getCreditNoteMerged(invoiceRequestParams);
                if (result.getRecordTotalCount() > 0) {
                    CreditNotejArr = AccInvoiceServiceHandler.getCreditNotesMergedJson(invoiceRequestParams, result.getEntityList(), CreditNotejArr, accountingHandlerDAOobj, authHandlerDAOObj, accCurrencyDAOobj, accPaymentDAOobj, request,accCreditNoteDAOobj,accAccountDAOobj,fieldDataManagercntrl,accJournalEntryobj);
                    for (int i = 0; i < CreditNotejArr.length(); i++) {
                        invjarr.put(CreditNotejArr.get(i));
                    }
                }

                invoiceRequestParams.put("cntype", 4);
                JSONArray DebitNotejArr = new JSONArray();//This is used for getting DN gainst vendor and otherwise 
                result = accDebitNoteobj.getDebitNoteMerged(invoiceRequestParams);
                if (result.getRecordTotalCount() > 0) {
                    DebitNotejArr = AccInvoiceServiceHandler.getDebitNotesMergedJson(invoiceRequestParams, result.getEntityList(), DebitNotejArr, accountingHandlerDAOobj, authHandlerDAOObj, accCurrencyDAOobj, accReceiptDAOobj, request,accAccountDAOobj,fieldDataManagercntrl,accJournalEntryobj,accCreditNoteDAOobj);
                    for (int i = 0; i < DebitNotejArr.length(); i++) {
                        invjarr.put(DebitNotejArr.get(i));
                    }
                }
                invoiceRequestParams.remove("cntype");
                
                JSONArray receivePaymentJArr = new JSONArray();
                invoiceRequestParams.put("paymentWindowType", 1);//Receipt to Customer record
                result = accReceiptDAOobj.getReceipts(invoiceRequestParams);
                if (result.getRecordTotalCount() > 0) {
                    receivePaymentJArr = AccInvoiceServiceHandler.getReceiptsJson(invoiceRequestParams, result.getEntityList(), receivePaymentJArr, accountingHandlerDAOobj, authHandlerDAOObj, accCurrencyDAOobj, accReceiptDAOobj, request,accAccountDAOobj,fieldDataManagercntrl,accJournalEntryobj);
                    for (int i = 0; i < receivePaymentJArr.length(); i++) {
                        invjarr.put(receivePaymentJArr.get(i));
                    }
                }

                JSONArray makePaymentJArr = new JSONArray();
                invoiceRequestParams.put("allAdvPayment", true); // needs only refund type record so that putted true
                invoiceRequestParams.put("paymentWindowType", 2);//Payment to Customer record
                result = accVendorPaymentobj.getPayments(invoiceRequestParams);
                if (result != null && result.getEntityList() != null && !result.getEntityList().isEmpty()) {
                    makePaymentJArr = accGoodsReceiptServiceHandler.getPaymentsJson(invoiceRequestParams, result.getEntityList(), makePaymentJArr, accCurrencyDAOobj, accountingHandlerDAOobj, accVendorPaymentobj);
                    for (int i = 0; i < makePaymentJArr.length(); i++) {
                        invjarr.put(makePaymentJArr.get(i));
                    }
                }
                invoiceRequestParams.remove("allAdvPayment");
                invoiceRequestParams.remove("paymentWindowType");
              
                for (int i = 0; i < invjarr.length(); i++) {
                    JSONObject invobj = invjarr.getJSONObject(i);
                    personID = (invobj.has(InvoiceConstants.personid)) ? invobj.getString(InvoiceConstants.personid) : "";
                    personName = (invobj.has(InvoiceConstants.personname)) ? invobj.getString(InvoiceConstants.personname) : "";
                    aliasname = (invobj.has(InvoiceConstants.aliasname)) ? invobj.getString(InvoiceConstants.aliasname) : "";
                    code = (invobj.has("code")) ? invobj.getString("code") : "";
                    amountinbase = invobj.getDouble("amountinbase");
                    isCN = invobj.has("isCN") ? invobj.getBoolean("isCN") : false;
                    isRP = invobj.has("isRP") ? invobj.getBoolean("isRP") : false;
                    boolean isopeningBalanceTransaction = invobj.optBoolean("isOpeningBalanceTransaction", false);
                    if (isCN || isRP) {
                        if (isopeningBalanceTransaction) {
                            c_open_amount_base += amountinbase;
                        } else {
                            c_amount_base += amountinbase;
                        }
                    } else {
                        if (isopeningBalanceTransaction) {
                            d_open_amount_base += amountinbase;
                        } else {
                            d_amount_base += amountinbase;
                        }
                    }
                }
                if (invjarr.length() > 0) {
                    jObj = new JSONObject();
                    jObj.put(InvoiceConstants.personid, personID);
                    jObj.put(InvoiceConstants.personname, personName);
                    jObj.put(InvoiceConstants.aliasname, aliasname);
                    jObj.put(InvoiceConstants.personinfo,personName+"("+code+")");
                    jObj.put("code", code);
                    jObj.put("d_open_amount_base", Double.valueOf(authHandler.formattedAmount(d_open_amount_base, companyid)));
                    jObj.put("c_open_amount_base", Double.valueOf(authHandler.formattedAmount(c_open_amount_base, companyid)));
                    jObj.put("d_amount_base", Double.valueOf(authHandler.formattedAmount(d_amount_base, companyid)));
                    jObj.put("c_amount_base", Double.valueOf(authHandler.formattedAmount(c_amount_base, companyid)));
                    jObj.put(InvoiceConstants.currencysymbol, currencySymbolCust);
                    jObj.put(Constants.currencyKey, currencyidCust);
                    jObj.put(InvoiceConstants.currencyname, currencyNameCust);
                    double total = (d_open_amount_base + d_amount_base) - (c_open_amount_base + c_amount_base);
                    balance_base = Double.valueOf(authHandler.formattedAmount(total, companyid));
                    jObj.put("balance_base", balance_base);
                    jArr.put(jObj);
                }
            }
            mainJobj.put("data", jArr);
            mainJobj.put("totalcount", jArr.length());
        } catch (ServiceException ex) {
            Logger.getLogger(AccInvoiceServiceImpl.class.getName()).log(Level.SEVERE, null, ex);
            throw ex;
        }
        return mainJobj;
    }
    
    @Override
    public JSONObject getSalesPersonCommissionDimensionReport(HttpServletRequest request, boolean isExport) {
        JSONObject jobj = new JSONObject();
        JSONArray dataJArr = new JSONArray();
        try {
            String companyid = sessionHandlerImpl.getCompanyid(request);
            HashMap invoiceRequestParams = AccountingManager.getGlobalParams(request);
            invoiceRequestParams.put(InvoiceConstants.nondeleted, true);
            invoiceRequestParams.put(Constants.REQ_startdate, request.getParameter(Constants.REQ_startdate));
            invoiceRequestParams.put(Constants.REQ_enddate, request.getParameter(Constants.REQ_enddate));
            invoiceRequestParams.put("isSalesPersonAgedSummary", true);
            invoiceRequestParams.put("pendingapproval", false);

            HashMap cnRequestParams = AccountingManager.getGlobalParams(request);
            cnRequestParams.put(InvoiceConstants.nondeleted, "true");
            cnRequestParams.put(Constants.REQ_startdate, request.getParameter(Constants.REQ_startdate));
            cnRequestParams.put(Constants.REQ_enddate, request.getParameter(Constants.REQ_enddate));

            String companyID = sessionHandlerImpl.getCompanyid(request);
            KwlReturnObject currencyRsult = accountingHandlerDAOobj.getObject(KWLCurrency.class.getName(), sessionHandlerImpl.getCurrencyID(request));
            KWLCurrency currency = (KWLCurrency) currencyRsult.getEntityList().get(0);
            String currencyName = currency.getName();

            // For getting Search Json
            String column = "", refdbname = "", xfield = "", iscustomcolumn = "", iscustomcolumndata = "", isfrmpmproduct = "", fieldtype = "", searchText = "", columnheader = "", search = "", xtype = "", combosearch = "", isinterval = "", interval = "", isbefore = "", isdefaultfield = "", moduleid = "";
            String Searchjson = null;
            if (!StringUtil.isNullOrEmpty(request.getParameter(Constants.Acc_Search_Json))) {
                Searchjson = request.getParameter(Constants.Acc_Search_Json).toString();
                JSONObject SearchJsonObj = new JSONObject(Searchjson);
                JSONArray SearchJsonArray = SearchJsonObj.getJSONArray("root");
                JSONObject compareObj = SearchJsonArray.optJSONObject(0);

                column = compareObj.optString("column");
                refdbname = compareObj.optString("refdbname");
                xfield = compareObj.optString("xfield");
                iscustomcolumn = compareObj.optString(Constants.iscustomcolumn);
                iscustomcolumndata = compareObj.optString("iscustomcolumndata");
                isfrmpmproduct = compareObj.optString("isfrmpmproduct");
                fieldtype = compareObj.optString("fieldtype");
                searchText = compareObj.optString("searchText");
                columnheader = compareObj.optString("columnheader");
                search = compareObj.optString("search");
                xtype = compareObj.optString(Constants.xtype);
                combosearch = StringUtil.DecodeText(compareObj.optString("combosearch"));
                isinterval = compareObj.optString("isinterval");
                interval = compareObj.optString("interval");
                isbefore = compareObj.optString("isbefore");
                isdefaultfield = compareObj.optString("isdefaultfield");
                moduleid = compareObj.optString(Constants.moduleid);
            }

            List<String> searchTextItems = new ArrayList<>();
            if (!StringUtil.isNullOrEmpty(searchText)) {
                searchTextItems = Arrays.asList(searchText.split("\\s*,\\s*"));
            }
            List<String> searchItems = new ArrayList<>();
            if (!StringUtil.isNullOrEmpty(searchText)) {
                searchItems = Arrays.asList(search.split("\\s*,\\s*"));
            }
            List<String> combosearchItems = new ArrayList<>();
            if (!StringUtil.isNullOrEmpty(searchText)) {
                combosearchItems = Arrays.asList(combosearch.split("\\s*,\\s*"));
            }

            JSONArray invcomparedata = new JSONArray();
            JSONArray cncomparedata = new JSONArray();
            for (int i = 0; i < searchTextItems.size() && !searchTextItems.isEmpty(); i++) {
                // for creating invoice search json
                HashMap<String, Object> requestParamsForFieldParams = new HashMap<String, Object>();
                requestParamsForFieldParams.put(Constants.filter_names, Arrays.asList(Constants.companyid, Constants.moduleid, Constants.fieldlabel));
                requestParamsForFieldParams.put(Constants.filter_values, Arrays.asList(companyID, Constants.Acc_Invoice_ModuleId, columnheader));
                KwlReturnObject resultFieldParams = accAccountDAOobj.getFieldParams(requestParamsForFieldParams);
                if (!resultFieldParams.getEntityList().isEmpty() && resultFieldParams.getEntityList().get(0) != null) {
                    FieldParams fieldParams = (FieldParams) resultFieldParams.getEntityList().get(0);

                    HashMap<String, Object> comborequestParams = new HashMap<String, Object>();
                    comborequestParams.put("Fieldid", fieldParams.getId());
                    comborequestParams.put("Value", combosearchItems.get(i));
                    KwlReturnObject comboData = accAccountDAOobj.getfieldcombodata(comborequestParams);
                    FieldComboData fieldComboData = null;
                    // check default value is same as current combo value if yes add Id it to default value
                    if (comboData != null && comboData.getRecordTotalCount() > 0) {
                        fieldComboData = (FieldComboData) comboData.getEntityList().get(0);
                    }

                    JSONObject cntObj = new JSONObject();
                    cntObj.put("searchText", (fieldComboData != null) ? fieldComboData.getId() : searchTextItems.get(i));
                    cntObj.put("search", (fieldComboData != null) ? fieldComboData.getId() : searchItems.get(i));
                    cntObj.put("combosearch", combosearchItems.get(i));
                    cntObj.put("column", fieldParams.getId());
                    cntObj.put("refdbname", "Col" + fieldParams.getColnum());
                    cntObj.put("xfield", "Col" + fieldParams.getColnum());
                    cntObj.put(Constants.iscustomcolumn, iscustomcolumn);
                    cntObj.put("iscustomcolumndata", iscustomcolumndata);
                    cntObj.put("isfrmpmproduct", isfrmpmproduct);
                    cntObj.put("fieldtype", fieldtype);
                    cntObj.put("columnheader", columnheader);
                    cntObj.put(Constants.xtype, xtype);
                    cntObj.put("isinterval", isinterval);
                    cntObj.put("interval", interval);
                    cntObj.put("isbefore", isbefore);
                    cntObj.put("isdefaultfield", isdefaultfield);
                    cntObj.put(Constants.moduleid, Constants.Acc_Invoice_ModuleId);
                    invcomparedata.put(cntObj);
                } else {
                    JSONObject cntObj = new JSONObject();
                    cntObj.put("searchText", searchTextItems.get(i));
                    cntObj.put("search", searchItems.get(i));
                    cntObj.put("combosearch", combosearchItems.get(i));
                    cntObj.put("column", column);
                    cntObj.put("refdbname", refdbname);
                    cntObj.put("xfield", xfield);
                    cntObj.put(Constants.iscustomcolumn, iscustomcolumn);
                    cntObj.put("iscustomcolumndata", iscustomcolumndata);
                    cntObj.put("isfrmpmproduct", isfrmpmproduct);
                    cntObj.put("fieldtype", fieldtype);
                    cntObj.put("columnheader", columnheader);
                    cntObj.put(Constants.xtype, xtype);
                    cntObj.put("isinterval", isinterval);
                    cntObj.put("interval", interval);
                    cntObj.put("isbefore", isbefore);
                    cntObj.put("isdefaultfield", isdefaultfield);
                    cntObj.put(Constants.moduleid, moduleid);
                    invcomparedata.put(cntObj);
                }

                // for creating credit note search json
                requestParamsForFieldParams = new HashMap<String, Object>();
                requestParamsForFieldParams.put(Constants.filter_names, Arrays.asList(Constants.companyid, Constants.moduleid, Constants.fieldlabel));
                requestParamsForFieldParams.put(Constants.filter_values, Arrays.asList(companyID, Constants.Acc_Credit_Note_ModuleId, columnheader));
                resultFieldParams = accAccountDAOobj.getFieldParams(requestParamsForFieldParams);
                if (!resultFieldParams.getEntityList().isEmpty() && resultFieldParams.getEntityList().get(0) != null) {
                    FieldParams fieldParams = (FieldParams) resultFieldParams.getEntityList().get(0);

                    HashMap<String, Object> comborequestParams = new HashMap<String, Object>();
                    comborequestParams.put("Fieldid", fieldParams.getId());
                    comborequestParams.put("Value", combosearchItems.get(i));
                    KwlReturnObject comboData = accAccountDAOobj.getfieldcombodata(comborequestParams);
                    FieldComboData fieldComboData = null;
                    // check default value is same as current combo value if yes add Id it to default value
                    if (comboData != null && comboData.getRecordTotalCount() > 0) {
                        fieldComboData = (FieldComboData) comboData.getEntityList().get(0);
                    }

                    JSONObject cntObj = new JSONObject();
                    cntObj.put("searchText", (fieldComboData != null) ? fieldComboData.getId() : searchTextItems.get(i));
                    cntObj.put("search", (fieldComboData != null) ? fieldComboData.getId() : searchItems.get(i));
                    cntObj.put("combosearch", combosearchItems.get(i));
                    cntObj.put("column", fieldParams.getId());
                    cntObj.put("refdbname", "Col" + fieldParams.getColnum());
                    cntObj.put("xfield", "Col" + fieldParams.getColnum());
                    cntObj.put(Constants.iscustomcolumn, iscustomcolumn);
                    cntObj.put("iscustomcolumndata", iscustomcolumndata);
                    cntObj.put("isfrmpmproduct", isfrmpmproduct);
                    cntObj.put("fieldtype", fieldtype);
                    cntObj.put("columnheader", columnheader);
                    cntObj.put(Constants.xtype, xtype);
                    cntObj.put("isinterval", isinterval);
                    cntObj.put("interval", interval);
                    cntObj.put("isbefore", isbefore);
                    cntObj.put("isdefaultfield", isdefaultfield);
                    cntObj.put(Constants.moduleid, Constants.Acc_Credit_Note_ModuleId);
                    cncomparedata.put(cntObj);
                } else {
                    JSONObject cntObj = new JSONObject();
                    cntObj.put("searchText", searchTextItems.get(i));
                    cntObj.put("search", searchItems.get(i));
                    cntObj.put("combosearch", combosearchItems.get(i));
                    cntObj.put("column", column);
                    cntObj.put("refdbname", refdbname);
                    cntObj.put("xfield", xfield);
                    cntObj.put(Constants.iscustomcolumn, iscustomcolumn);
                    cntObj.put("iscustomcolumndata", iscustomcolumndata);
                    cntObj.put("isfrmpmproduct", isfrmpmproduct);
                    cntObj.put("fieldtype", fieldtype);
                    cntObj.put("columnheader", columnheader);
                    cntObj.put(Constants.xtype, xtype);
                    cntObj.put("isinterval", isinterval);
                    cntObj.put("interval", interval);
                    cntObj.put("isbefore", isbefore);
                    cntObj.put("isdefaultfield", isdefaultfield);
                    cntObj.put(Constants.moduleid, moduleid);
                    cncomparedata.put(cntObj);
                }
            }

            String start = "0";
            String limit = "30";
            if (!StringUtil.isNullOrEmpty(request.getParameter(Constants.start)) && !StringUtil.isNullOrEmpty(request.getParameter(Constants.limit))) {
                start = request.getParameter(Constants.start);
                limit = request.getParameter(Constants.limit);
            }

            // For getting Sales Person
            String salesPersonID = request.getParameter("salesPersonID") != null ? request.getParameter("salesPersonID") : "";
            HashMap<String, Object> filterRequestParams = new HashMap<String, Object>();
            ArrayList filter_names = new ArrayList(), filter_params = new ArrayList();
            if (!StringUtil.isNullOrEmpty(salesPersonID) && !salesPersonID.equalsIgnoreCase("All")) {
                String salesPersonIds = "";
                String[] salesPersonIdArray = salesPersonID.split(",");
                for (int i = 0; i < salesPersonIdArray.length; i++) {
                    salesPersonIds += "'" + salesPersonIdArray[i] + "',";
                }
                salesPersonIds = salesPersonIds.substring(0, Math.max(0, salesPersonIds.length() - 1));
                filter_names.add("INID");
                filter_params.add(salesPersonIds);
            }
            filter_names.add("company.companyID");
            filter_params.add(companyID);
            filter_names.add("masterGroup.ID");
            filter_params.add("15"); // For Geting All Sales Person
            filterRequestParams.put(Constants.filterNamesKey, filter_names);
            filterRequestParams.put(Constants.filterParamsKey, filter_params);
            if (!isExport) {
                filterRequestParams.put(Constants.start, start);
                filterRequestParams.put(Constants.limit, limit);
            }

            KwlReturnObject salesPersonResult = accMasterItemsDAOobj.getMasterItems(filterRequestParams);
            List<MasterItem> salesPersonList = salesPersonResult.getEntityList();
            int count = salesPersonResult.getRecordTotalCount();

            for (MasterItem salesPerson : salesPersonList) {
                JSONObject obj = new JSONObject();
                obj.put("salesPersonName", salesPerson.getValue());
                obj.put("currencyName", currencyName);

                for (int j = 0; j < invcomparedata.length(); j++) {
                    JSONArray dimSearchJsonArr = new JSONArray();
                    JSONObject dimJson = invcomparedata.getJSONObject(j);
                    dimSearchJsonArr.put(dimJson);
                    JSONObject putSearchJson = new JSONObject();
                    putSearchJson.put("root", dimSearchJsonArr);

                    // For getting invoice amount
                    double invoiceAmountInBase = 0;
                    invoiceRequestParams.put(Constants.Acc_Search_Json, putSearchJson);
                    invoiceRequestParams.put(InvoiceConstants.salesPersonid, salesPerson.getID());
                    invoiceRequestParams.put(Constants.moduleid, Constants.Acc_Invoice_ModuleId);
                    KwlReturnObject result = accInvoiceDAOobj.getInvoiceDetailForSalesPersonCommissionDimensionReport(invoiceRequestParams);
                    List<String> list = result.getEntityList();
                    for (String invoiceDetailID : list) {
                        KwlReturnObject invoiceDetailObj = accountingHandlerDAOobj.getObject(InvoiceDetail.class.getName(), invoiceDetailID);
                        InvoiceDetail invoiceDetail = (InvoiceDetail) invoiceDetailObj.getEntityList().get(0);
                        double quantity = invoiceDetail.getInventory().getQuantity();
                        double rate = invoiceDetail.getRate();
                        double discount = 0;

                        if (invoiceDetail.getDiscount() != null) {
                            discount = invoiceDetail.getDiscount().getDiscountValue();
                        }

                        double amount = (rate * quantity) - discount;
                        HashMap<String, Object> requestParams = AccountingManager.getGlobalParams(request);
                        KwlReturnObject baseAmountResult = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, amount, invoiceDetail.getInvoice().getCurrency().getCurrencyID(), invoiceDetail.getInvoice().getCreationDate(), invoiceDetail.getInvoice().getJournalEntry().getExternalCurrencyRate());
                        amount = (Double) baseAmountResult.getEntityList().get(0);

                        invoiceAmountInBase += amount;
                    }
                    obj.put("inv_amount_" + dimJson.getString("combosearch"), authHandler.round(invoiceAmountInBase, companyid));

                    // For getting credit note amount
                    dimSearchJsonArr = new JSONArray();
                    dimJson = cncomparedata.getJSONObject(j);
                    dimSearchJsonArr.put(dimJson);
                    putSearchJson = new JSONObject();
                    putSearchJson.put("root", dimSearchJsonArr);
                    double creditNoteAmountInBase = 0;
                    cnRequestParams.put(Constants.Acc_Search_Json, putSearchJson);
                    cnRequestParams.put(InvoiceConstants.salesPersonid, salesPerson.getID());
                    cnRequestParams.put(Constants.moduleid, Constants.Acc_Credit_Note_ModuleId);
                    KwlReturnObject creditNoteTaxEntryResult = accCreditNoteDAOobj.getCreditNoteTaxEntryForSalesPersonCommissionDimensionReport(cnRequestParams);
                    List<String> creditNoteTaxEntryDetailList = creditNoteTaxEntryResult.getEntityList();
                    for (String creditNoteDetailID : creditNoteTaxEntryDetailList) {
                        KwlReturnObject creditNoteDetailObj = accountingHandlerDAOobj.getObject(CreditNoteTaxEntry.class.getName(), (String) creditNoteDetailID);
                        CreditNoteTaxEntry creditNoteTaxEntry = (CreditNoteTaxEntry) creditNoteDetailObj.getEntityList().get(0);

                        double amount = creditNoteTaxEntry.getAmount();
                        HashMap<String, Object> requestParams = AccountingManager.getGlobalParams(request);
                        KwlReturnObject baseAmountResult = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, amount, creditNoteTaxEntry.getCreditNote().getCurrency().getCurrencyID(), creditNoteTaxEntry.getCreditNote().getCreationDate(), creditNoteTaxEntry.getCreditNote().getJournalEntry().getExternalCurrencyRate());
                        amount = (Double) baseAmountResult.getEntityList().get(0);
                        
                        creditNoteAmountInBase += amount;
                    }
                    obj.put("credit_amount_" + dimJson.getString("combosearch"), authHandler.round(creditNoteAmountInBase, companyid));
                }

                dataJArr.put(obj);
            }

            // For creating Column Model
            JSONObject commData = new JSONObject();
            JSONObject jMeta = new JSONObject();
            JSONArray jarrColumns = new JSONArray();
            JSONArray jarrRecords = new JSONArray();
            JSONObject jobjTemp = new JSONObject();
            jobjTemp.put("name", "salesPersonName");
            jarrRecords.put(jobjTemp);

            jobjTemp = new JSONObject();
            jobjTemp.put("header", messageSource.getMessage("acc.invoiceList.salesPerson", null, RequestContextUtils.getLocale(request)));
            jobjTemp.put("dataIndex", "salesPersonName");
            jobjTemp.put("width", 150);
            jobjTemp.put("pdfwidth", 150);
            jobjTemp.put("sortable", true);
            jarrColumns.put(jobjTemp);
            
            jobjTemp = new JSONObject();
            jobjTemp.put("name", "currencyName");
            jarrRecords.put(jobjTemp);

            jobjTemp = new JSONObject();
            jobjTemp.put("header", messageSource.getMessage("acc.fxexposure.currency", null, RequestContextUtils.getLocale(request)));
            jobjTemp.put("dataIndex", "currencyName");
            jobjTemp.put("hidden", "true");
            jobjTemp.put("width", 150);
            jobjTemp.put("pdfwidth", 150);
            jarrColumns.put(jobjTemp);

            for (int k = 0; k < combosearchItems.size() && !combosearchItems.isEmpty(); k++) {
                jobjTemp = new JSONObject();
                jobjTemp.put("name", "inv_amount_" + combosearchItems.get(k));
                jarrRecords.put(jobjTemp);

                jobjTemp = new JSONObject();
                jobjTemp.put("header", "Sales Invoice Amount (" + combosearchItems.get(k) + ")");
                jobjTemp.put("tip", combosearchItems.get(k) + currencyName);
                jobjTemp.put("dataIndex", "inv_amount_" + combosearchItems.get(k));
                jobjTemp.put("width", 200);
                jobjTemp.put("pdfwidth", 200);
                jobjTemp.put("align", "right");
                jarrColumns.put(jobjTemp);

                jobjTemp = new JSONObject();
                jobjTemp.put("name", "credit_amount_" + combosearchItems.get(k));
                jarrRecords.put(jobjTemp);

                jobjTemp = new JSONObject();
                jobjTemp.put("header", "Credit Note Amount (" + combosearchItems.get(k) + ")");
                jobjTemp.put("tip", combosearchItems.get(k) + currencyName);
                jobjTemp.put("dataIndex", "credit_amount_" + combosearchItems.get(k));
                jobjTemp.put("width", 200);
                jobjTemp.put("pdfwidth", 200);
                jobjTemp.put("align", "right");
                jarrColumns.put(jobjTemp);
            }

            commData.put("success", true);
            commData.put("coldata", dataJArr);
            commData.put("columns", jarrColumns);
            jMeta.put("totalProperty", "totalCount");
            jMeta.put("root", "coldata");
            commData.put(Constants.RES_TOTALCOUNT, count);
            jMeta.put("fields", jarrRecords);
            commData.put("metaData", jMeta);
            JSONArray jcom = new JSONArray();
            jcom.put(commData);

            jobj.put("valid", true);
            if (isExport) {
                jobj.put("data", dataJArr);
            } else {
                jobj.put("data", commData);
            }
        } catch (Exception ex) {
            Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
        }
        return jobj;
    }
    
@Override 
    public List unlinkCreditNoteFromInvoice(HttpServletRequest request, List<CreditNoteDetail> details, String cnid) throws ServiceException, SessionExpiredException {
        List result = new ArrayList();
        try {
            String companyid = sessionHandlerImpl.getCompanyid(request);
            KwlReturnObject cnKWLObj = accountingHandlerDAOobj.getObject(CreditNote.class.getName(), cnid);
            CreditNote cn = (CreditNote) cnKWLObj.getEntityList().get(0);
            String cnnumber = cn.getCreditNoteNumber();
            boolean allInvoicesUnlinked = false;
            Set<CreditNoteDetail> cnd = cn.getRows();
            if (cnd != null && cnd.size() == details.size()) {
                allInvoicesUnlinked = true;
            }
            double cnExternalCurrencyRate = 1d;
            boolean isopeningBalanceCN = cn.isIsOpeningBalenceCN();
            Date cnCreationDate = null;
            cnCreationDate = cn.getCreationDate();
            if (isopeningBalanceCN) {
                cnExternalCurrencyRate = cn.getExchangeRateForOpeningTransaction();
            } else {
                cnExternalCurrencyRate = cn.getJournalEntry().getExternalCurrencyRate();
            }
            Double totalAmountUsedByInvoices = 0.0;
            String unlinkedDetailIDs = "";
            //update invocie amount due after unlinking
            for (CreditNoteDetail creditNoteDetail : details) {
                if (creditNoteDetail.getInvoice() != null && !creditNoteDetail.getInvoice().isNormalInvoice() && creditNoteDetail.getInvoice().isIsOpeningBalenceInvoice()) {
                    double amountPaid = creditNoteDetail.getDiscount().getAmountinInvCurrency();
                    totalAmountUsedByInvoices += creditNoteDetail.getDiscount().getDiscount();
                    Invoice invObj = creditNoteDetail.getInvoice();
                    HashMap<String, Object> requestParams = new HashMap();
                    requestParams.put(Constants.companyid, companyid);
                    requestParams.put(Constants.globalCurrencyKey, invObj.getCompany().getCurrency().getCurrencyID());
                    double externalCurrencyRate = 0d;
                    externalCurrencyRate = invObj.getExchangeRateForOpeningTransaction();
                    String fromcurrencyid = invObj.getCurrency().getCurrencyID();
                    KwlReturnObject bAmt = null;
                    if (invObj.isConversionRateFromCurrencyToBase()) {
                        bAmt = accCurrencyDAOobj.getCurrencyToBaseAmountAccordingToCurrencyToBaseExchangeRate(requestParams, amountPaid, fromcurrencyid, invObj.getCreationDate(), externalCurrencyRate);
                    } else {
                        bAmt = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, amountPaid, fromcurrencyid, invObj.getCreationDate(), externalCurrencyRate);
                    }
                    double totalBaseAmountDue = (Double) bAmt.getEntityList().get(0);
                    double invoiceAmountDue = invObj.getOpeningBalanceAmountDue();
                    invoiceAmountDue += amountPaid;
                    JSONObject invjson = new JSONObject();
                    invjson.put("invoiceid", invObj.getID());
                    invjson.put(Constants.companyKey, companyid);
                    invjson.put("openingBalanceAmountDue", invoiceAmountDue);
                    invjson.put(Constants.openingBalanceBaseAmountDue, invObj.getOpeningBalanceBaseAmountDue() + totalBaseAmountDue);
                    if (invoiceAmountDue != 0) {
                        invjson.put("amountduedate", "");
                    }
                    accInvoiceDAOobj.updateInvoice(invjson, null);
                    unlinkedDetailIDs = unlinkedDetailIDs.concat("'").concat(creditNoteDetail.getID()).concat("',");
                } else if (creditNoteDetail.getInvoice() != null && creditNoteDetail.getInvoice().isNormalInvoice() && !creditNoteDetail.getInvoice().isIsOpeningBalenceInvoice()) {
                    double amountPaid = creditNoteDetail.getDiscount().getAmountinInvCurrency();
                    totalAmountUsedByInvoices += creditNoteDetail.getDiscount().getDiscount();
                    Invoice invoice = creditNoteDetail.getInvoice();
                    double invoiceAmountDue = invoice.getInvoiceamountdue();
                    invoiceAmountDue += amountPaid;
                    KwlReturnObject bAmt = null;
                    HashMap<String, Object> requestParams = new HashMap();
                    requestParams.put(Constants.companyid, companyid);
                    requestParams.put(Constants.globalCurrencyKey, invoice.getCompany().getCurrency().getCurrencyID());
                    double externalCurrencyRate = 0d;
                    externalCurrencyRate = invoice.getJournalEntry() != null ? invoice.getJournalEntry().getExternalCurrencyRate() : 1;
                    String fromcurrencyid = invoice.getCurrency().getCurrencyID();
                    bAmt = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, amountPaid, fromcurrencyid, invoice.getCreationDate(), externalCurrencyRate);
                    double totalBaseAmountDue = authHandler.round((Double) bAmt.getEntityList().get(0),companyid);
                    double invoiceAmountDueInBase = invoice.getInvoiceAmountDueInBase();
                    invoiceAmountDueInBase += totalBaseAmountDue;
                    JSONObject invjson = new JSONObject();
                    invjson.put("invoiceid", invoice.getID());
                    invjson.put(Constants.companyKey, companyid);
                    invjson.put(Constants.invoiceamountdue, invoiceAmountDue);
                    invjson.put(Constants.invoiceamountdueinbase, invoiceAmountDueInBase);
                    if (invoiceAmountDue != 0) {
                        invjson.put("amountduedate", "");
                    }
                    accInvoiceDAOobj.updateInvoice(invjson, null);
                    unlinkedDetailIDs = unlinkedDetailIDs.concat("'").concat(creditNoteDetail.getID()).concat("',");
                }
            }

            // Update credit note details
            HashMap<String, Object> credithm = new HashMap();
            Double cnAmountDue = cn.getOpeningBalanceAmountDue();
            cnAmountDue = cnAmountDue + totalAmountUsedByInvoices;
            HashMap<String, Object> requestParams = AccountingManager.getGlobalParams(request);
            requestParams.put(Constants.companyid, sessionHandlerImpl.getCompanyid(request));
            requestParams.put(Constants.globalCurrencyKey, sessionHandlerImpl.getCurrencyID(request));
            String fromcurrencyid = cn.getCurrency().getCurrencyID();
            KwlReturnObject bAmt = null;
            if (isopeningBalanceCN && cn.isConversionRateFromCurrencyToBase()) {
                bAmt = accCurrencyDAOobj.getCurrencyToBaseAmountAccordingToCurrencyToBaseExchangeRate(requestParams, cnAmountDue, fromcurrencyid, cnCreationDate, cnExternalCurrencyRate);
            } else {
                bAmt = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, cnAmountDue, fromcurrencyid, cnCreationDate, cnExternalCurrencyRate);
            }
            double totalBaseAmountDue = (Double) bAmt.getEntityList().get(0);

            credithm.put("cnid", cn.getID());
            credithm.put("cnamountdue", cnAmountDue);
            credithm.put("openingBalanceAmountDue", cnAmountDue);
            credithm.put(Constants.openingBalanceBaseAmountDue, totalBaseAmountDue);
            credithm.put("openflag", (cnAmountDue) <= 0 ? false : true);
            if (!StringUtil.isNullOrEmpty(unlinkedDetailIDs)) {
                accCreditNoteDAOobj.deleteSelectedLinkedInvoices(cn.getID(), "", companyid, unlinkedDetailIDs.substring(0, unlinkedDetailIDs.length() - 1));
            }
            // If all invoices linked to CN are un-linked, created one entry for cn details 
            HashSet<CreditNoteDetail> cndetails = new HashSet<CreditNoteDetail>();
            if (allInvoicesUnlinked) {
                getCNDetails(cndetails, companyid);
                for (CreditNoteDetail cndetail : cndetails) {
                    cndetail.setCreditNote(cn);
                }
                credithm.put("cnid", cn.getID());
                credithm.put("cndetails", cndetails);
            }
            
            /*
             * Deleting Linking information of CN while unlinking transaction
             */
            accCreditNoteDAOobj.deleteLinkingInformationOfCN(credithm);
            accCreditNoteDAOobj.updateCreditNote(credithm);
            result.add(cnnumber);
        } catch (SessionExpiredException ex) {
            throw ServiceException.FAILURE(ex.getMessage(), ex);
        } catch (Exception ex) {
            Logger.getLogger(AccInvoiceServiceImpl.class.getName()).log(Level.SEVERE, null, ex);
        }
        return result;
    }

    private void getCNDetails(HashSet<CreditNoteDetail> cndetails, String companyId) throws ServiceException {
        KwlReturnObject result = accountingHandlerDAOobj.getObject(Company.class.getName(), companyId);
        Company company = (Company) result.getEntityList().get(0);
        CreditNoteDetail row = new CreditNoteDetail();
        String CreditNoteDetailID = StringUtil.generateUUID();
        row.setID(CreditNoteDetailID);
        row.setSrno(1);
        row.setTotalDiscount(0.00);
        row.setCompany(company);
        row.setMemo("");
        cndetails.add(row);
    }

@Override
    public List unlinkReceiptFromInvoice(HttpServletRequest request, List<LinkDetailReceipt> details, String paymentid) throws ServiceException, SessionExpiredException {
        List result = new ArrayList();
        try {
            String companyid = sessionHandlerImpl.getCompanyid(request);
            KwlReturnObject cmpresult = accountingHandlerDAOobj.getObject(Company.class.getName(), companyid);
            Company company = (Company) cmpresult.getEntityList().get(0);
            KwlReturnObject receiptKWLObj = accountingHandlerDAOobj.getObject(Receipt.class.getName(), paymentid);
            Receipt receipt = (Receipt) receiptKWLObj.getEntityList().get(0);
            String paymentno = receipt.getReceiptNumber();
            double receiptexternalCurrencyRate = 1d;
            boolean isopeningBalanceRCP = receipt.isIsOpeningBalenceReceipt();
            Date rcpCreationDate = null;
            rcpCreationDate = receipt.getCreationDate();
            if (isopeningBalanceRCP) {
                receiptexternalCurrencyRate = receipt.getExchangeRateForOpeningTransaction();
            } else {
//                rcpCreationDate = receipt.getJournalEntry().getEntryDate();
                receiptexternalCurrencyRate = receipt.getJournalEntry().getExternalCurrencyRate();
            }
            String fromcurrencyid = receipt.getCurrency().getCurrencyID();
            String unlinkedDetailIDs = "";
            double sumOfTotalAmount = 0;
            List<Invoice> invoiceList = new ArrayList<Invoice>();
            for (LinkDetailReceipt receiptDetail : details) {
                Invoice invoice = receiptDetail.getInvoice();
                boolean isOpeningInvoice = invoice.isIsOpeningBalenceInvoice();
                double amountdueInBase = invoice.getInvoiceAmountDueInBase();
                if (invoice.isNormalInvoice()) {
                    double amountdue = invoice.getInvoiceamountdue();
                    /*
                     set status flag for amount due 
                     */
                    double amountdueforstatus = amountdue + receiptDetail.getAmountInInvoiceCurrency();
                    if (authHandler.round(amountdueforstatus, companyid) <= 0) {
                        invoice.setIsOpenReceipt(false);
                    } else {
                        invoice.setIsOpenReceipt(true);
                    }
                    invoice.setInvoiceamountdue(amountdue + receiptDetail.getAmountInInvoiceCurrency());
                    if ((amountdue + receiptDetail.getAmountInInvoiceCurrency()) != 0) {
                        invoice.setAmountDueDate(null);
                    }
                } else if (isOpeningInvoice) {
                    double amountdue = invoice.getOpeningBalanceAmountDue();
                    /*
                     * set status flag for opening invoices
                     */
                    double amountdueforstatus = amountdue + receiptDetail.getAmountInInvoiceCurrency();
                    if (authHandler.round(amountdueforstatus, companyid) <= 0) {
                        invoice.setIsOpenReceipt(false);
                    } else {
                        invoice.setIsOpenReceipt(true);
                    }
                }
                double externalCurrencyRateForLinking = 1d;
                externalCurrencyRateForLinking = receiptDetail.getExchangeRateForTransaction();
                sumOfTotalAmount += receiptDetail.getAmount();
                
                 //Converting amount in invoice currency
                double ammountInInoviceCurrency;
                if (externalCurrencyRateForLinking != 0) {
                    ammountInInoviceCurrency = authHandler.round(receiptDetail.getAmount() / externalCurrencyRateForLinking, companyid);
                } else {
                    ammountInInoviceCurrency = receiptDetail.getAmountInInvoiceCurrency();
                }
                
                 //Converting Invoice amount in Base currency accrding to invoice exchange rate
                Date invoiceCreationdate = invoice.getCreationDate();
                double externalCurrencyRate = isOpeningInvoice ? invoice.getExchangeRateForOpeningTransaction() : invoice.getJournalEntry().getExternalCurrencyRate();
                
                HashMap<String, Object> requestParams = new HashMap();
                requestParams.put(Constants.companyid, companyid);
                requestParams.put(Constants.globalCurrencyKey, company.getCurrency().getCurrencyID());
                
                KwlReturnObject bAmt = null;
                if (isOpeningInvoice && invoice.isConversionRateFromCurrencyToBase()) {
                    bAmt = accCurrencyDAOobj.getCurrencyToBaseAmountAccordingToCurrencyToBaseExchangeRate(requestParams, ammountInInoviceCurrency, invoice.getCurrency().getCurrencyID(), invoiceCreationdate, externalCurrencyRate);
                } else {
                    bAmt = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, ammountInInoviceCurrency, invoice.getCurrency().getCurrencyID(), invoiceCreationdate, externalCurrencyRate);
                }
                double amountReceivedConvertedInInvoiceBaseCurrency = authHandler.round((Double) bAmt.getEntityList().get(0),companyid);
                
                invoice.setInvoiceAmountDueInBase(authHandler.round(amountdueInBase + amountReceivedConvertedInInvoiceBaseCurrency, companyid));
                invoice.setOpeningBalanceAmountDue(invoice.getOpeningBalanceAmountDue() + receiptDetail.getAmountInInvoiceCurrency());
                invoice.setOpeningBalanceBaseAmountDue(invoice.getOpeningBalanceBaseAmountDue() + amountReceivedConvertedInInvoiceBaseCurrency);
                invoiceList.add(invoice);
                // check if Forex/Gain Loss JE generated. If yes then need to delete JE too
                if (receiptDetail.getLinkedGainLossJE() != null && !receiptDetail.getLinkedGainLossJE().isEmpty()) {
                    deleteJEArray(receiptDetail.getLinkedGainLossJE(), companyid);
                }
                /**
                 * Delete JE posted for GST Linking
                 */
                if (receiptDetail.getLinkedGSTJE() != null && !receiptDetail.getLinkedGSTJE().isEmpty()) {
                    deleteJEArray(receiptDetail.getLinkedGSTJE(), companyid);
                }
                /**
                 * Deleting Realised Gain/Loss JE posted when linking Invoice
                 * with Receipt. ERP - 39601
                 */
                if (receiptDetail != null && !StringUtil.isNullOrEmpty(receiptDetail.getRevalJeId())) {
                    accJournalEntryobj.deleteJEDtails(receiptDetail.getRevalJeId(), companyid);
                    accJournalEntryobj.deleteJE(receiptDetail.getRevalJeId(), companyid);
                }
                if (receiptDetail != null && !StringUtil.isNullOrEmpty(receiptDetail.getRevalJeIdReceipt())) {
                    accJournalEntryobj.deleteJEDtails(receiptDetail.getRevalJeIdReceipt(), companyid);
                    accJournalEntryobj.deleteJE(receiptDetail.getRevalJeIdReceipt(), companyid);
                }
                unlinkedDetailIDs = unlinkedDetailIDs.concat("'").concat(receiptDetail.getID()).concat("',");
            }
            if (sumOfTotalAmount != 0 && receipt.getReceiptAdvanceDetails() != null && !receipt.getReceiptAdvanceDetails().isEmpty()) {
                for (ReceiptAdvanceDetail advanceDetail : receipt.getReceiptAdvanceDetails()) {
                    double linkedAmountDue = advanceDetail.getAmountDue();
                    advanceDetail.setAmountDue(linkedAmountDue + sumOfTotalAmount);
                    List<Object> objectList = new ArrayList<Object>();
                    objectList.add((Object) advanceDetail);
                    accAccountDAOobj.saveOrUpdateAll(objectList);
                }
            } else if (sumOfTotalAmount != 0 && isopeningBalanceRCP) {
                HashMap<String, Object> requestParams = new HashMap();
                requestParams.put(Constants.companyid, companyid);
                requestParams.put(Constants.globalCurrencyKey, company.getCurrency().getCurrencyID());
                KwlReturnObject bAmt = null;
                if (isopeningBalanceRCP && receipt.isConversionRateFromCurrencyToBase()) {// if Receipt is opening balance Receipt and Conversion rate is taken from user is Currency to base then following method will be called.
                    bAmt = accCurrencyDAOobj.getCurrencyToBaseAmountAccordingToCurrencyToBaseExchangeRate(requestParams, sumOfTotalAmount, fromcurrencyid, rcpCreationDate, receiptexternalCurrencyRate);
                } else {
                    bAmt = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, sumOfTotalAmount, fromcurrencyid, rcpCreationDate, receiptexternalCurrencyRate);
                }
                double amountPaymentConvertedInBaseCurrency = (Double) bAmt.getEntityList().get(0);
                receipt.setOpeningBalanceAmountDue(sumOfTotalAmount + receipt.getOpeningBalanceAmountDue());
                receipt.setOpeningBalanceBaseAmountDue(amountPaymentConvertedInBaseCurrency + receipt.getOpeningBalanceBaseAmountDue());
                List<Object> objectList = new ArrayList<Object>();
                objectList.add((Object) receipt);
                accAccountDAOobj.saveOrUpdateAll(objectList);
            }
            if (!invoiceList.isEmpty()) {
                List<Object> objectList = new ArrayList<Object>(invoiceList);
                accAccountDAOobj.saveOrUpdateAll(objectList);
            }
            accReceiptDAOobj.deleteSelectedLinkedReceiptInvoices(receipt.getID(), "", companyid, unlinkedDetailIDs.substring(0, unlinkedDetailIDs.length()-1));
            result.add(paymentno);
        } catch (SessionExpiredException ex) {
            throw ServiceException.FAILURE(ex.getMessage(), ex);
        } catch (Exception ex) {
            Logger.getLogger(AccInvoiceServiceImpl.class.getName()).log(Level.SEVERE, null, ex);
        }
        return result;
    }

    public void deleteJEArray(String oldjeid, String companyid) throws ServiceException, AccountingException, SessionExpiredException {
        try {      //delete old invoice
            JournalEntryDetail jed = null;
            if (!StringUtil.isNullOrEmpty(oldjeid)) {
                KwlReturnObject result = accJournalEntryobj.getJournalEntryDetail(oldjeid, companyid);
                List list = result.getEntityList();
                Iterator itr = list.iterator();
                while (itr.hasNext()) {
                    jed = (JournalEntryDetail) itr.next();
                    //Sagar - No need to revert entry from optimized table as entries are already reverted from calling main function in edit case.
                    result = accJournalEntryobj.deleteJournalEntryDetailRow(jed.getID(), companyid);
                }
                result = accJournalEntryobj.permanentDeleteJournalEntry(oldjeid, companyid);
                KwlReturnObject jedresult1 = accJournalEntryobj.deleteJECustomData(oldjeid);
            }
        } catch (Exception ex) {
            throw ServiceException.FAILURE(ex.getMessage(), ex);
        }
    }
    
    public void getWastageDetailsJson(DeliveryOrderDetail row, JSONObject obj, String companyID) throws ServiceException {
        try {
            JSONArray wastageDetailsJArr = new JSONArray();
            HashMap<String, Object> requestParams = new HashMap<>();
            requestParams.put("companyID", companyID);
            requestParams.put("deliveryOrderDetailID", row.getID());

            KwlReturnObject assetInvMapObj = accInvoiceDAOobj.getWastageDetails(requestParams);
            List<WastageDetails> wastageDetailList = assetInvMapObj.getEntityList();
            for (WastageDetails wastageDetail : wastageDetailList) {
                JSONObject wastageDetailsObj = new JSONObject();

                wastageDetailsObj.put("id", wastageDetail.getID());
                wastageDetailsObj.put("productid", (wastageDetail.getProduct() != null) ? wastageDetail.getProduct().getID() : "");
                wastageDetailsObj.put("productname", (wastageDetail.getProduct() != null) ? wastageDetail.getProduct().getName() : "");
                wastageDetailsObj.put("desc", (wastageDetail.getProduct() != null) ? wastageDetail.getProduct().getDescription() : "");
                wastageDetailsObj.put("type", (wastageDetail.getProduct() != null) ? wastageDetail.getProduct().getProducttype().getName() : "");
                wastageDetailsObj.put("quantity", wastageDetail.getQuantity());
                wastageDetailsObj.put("percentage", wastageDetail.getPercentage());
                wastageDetailsObj.put("actualquantity", wastageDetail.getActualQuantity());
                wastageDetailsObj.put("wastageQuantityType", wastageDetail.getWastageQuantityType());
                wastageDetailsObj.put("wastageQuantity", wastageDetail.getWastageQuantity());
                wastageDetailsObj.put("isWastageApplicable", (wastageDetail.getProduct() != null) ? wastageDetail.getProduct().isWastageApplicable() : false);
                
                wastageDetailsJArr.put(wastageDetailsObj);
            }
            obj.put("wastageDetails", wastageDetailsJArr.toString());
        } catch (JSONException ex) {
            throw ServiceException.FAILURE(ex.getMessage(), ex);
        }
    }
    
    @Override
    public JSONArray getPaymentTermSalesCommissionDetailReportJson(HttpServletRequest request, List<Invoice> invList) throws SessionExpiredException, ServiceException {
        JSONArray jArr = new JSONArray();
        try {
            KwlReturnObject curresult = accountingHandlerDAOobj.getObject(KWLCurrency.class.getName(), AccountingManager.getGlobalCurrencyidFromRequest(request));
            KWLCurrency currency = (KWLCurrency) curresult.getEntityList().get(0);
            DateFormat df = authHandler.getDateFormatter(request);
            String companyid = sessionHandlerImpl.getCompanyid(request);
            HashMap requestParams = AccountingManager.getGlobalParams(request);
            
            for (Invoice invoice : invList) {
                JSONObject obj = new JSONObject();
                obj.put("invoiceNo", invoice.getInvoiceNumber());
                obj.put("jeNo", (invoice.getJournalEntry() != null) ? invoice.getJournalEntry().getEntryNumber() : "");
                obj.put("invoiceDate", (invoice.getCreationDate() != null) ? df.format(invoice.getCreationDate()) : "");
                obj.put("customer", (invoice.getCustomer() != null) ? invoice.getCustomer().getName() : "");
                obj.put("salesPerson", (invoice.getMasterSalesPerson() != null) ? invoice.getMasterSalesPerson().getValue() : "");
                obj.put("currencysymboltransaction", invoice.getCurrency() != null ? invoice.getCurrency().getSymbol() : "");
                obj.put(Constants.currencyKey, currency != null ? currency.getCurrencyID() : "");
                obj.put(InvoiceConstants.currencysymbol, currency != null ? currency.getSymbol() : "");

                double termAmount = 0, TaxAmount = 0, rowTaxAmount = 0, commissionedAmount = 0, collectedAmount = 0, collectedAmountInDoc = 0, commissionedAmountInDoc = 0;
                String paymentNo = "";
                Date invoiceCreationDate = invoice.getCreationDate();
                Double externalCurrencyRate = 0d;
                Double invoiceOriginalAmount = 0d;
                if (invoice.isIsOpeningBalenceInvoice() && !invoice.isNormalInvoice()) {
                    externalCurrencyRate = invoice.getExchangeRateForOpeningTransaction();
                    invoiceOriginalAmount = invoice.getOriginalOpeningBalanceAmount();
                }

                Set<InvoiceDetail> invoiceDetails = invoice.getRows();
                for (InvoiceDetail invoiceDetail : invoiceDetails) {
                    rowTaxAmount += invoiceDetail.getRowTaxAmount() + invoiceDetail.getRowTermTaxAmount();
                }

                if (invoice.isNormalInvoice()) {
                    JournalEntry je = invoice.getJournalEntry();
                    externalCurrencyRate = je.getExternalCurrencyRate();
                }

                if (invoice.isNormalInvoice()) {
                    JournalEntryDetail d = invoice.getCustomerEntry();
                    invoiceOriginalAmount = d.getAmount();
                }

                if (invoice.getTaxEntry() != null) {
                    TaxAmount += invoice.getTaxEntry().getAmount();
                }

                HashMap<String, Object> requestParam = new HashMap();
                requestParam.put("invoiceid", invoice.getID());
                curresult = accInvoiceDAOobj.getInvoiceTermMap(requestParam);
                List<InvoiceTermsMap> termMap = curresult.getEntityList();
                for (InvoiceTermsMap invoiceTerMap : termMap) {
                    termAmount += invoiceTerMap.getTermamount();
                }

                String currencyid = (invoice.getCurrency() == null ? currency.getCurrencyID() : invoice.getCurrency().getCurrencyID());
                double invoiceAmount = invoiceOriginalAmount - rowTaxAmount - termAmount - TaxAmount;
                KwlReturnObject bAmt = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, invoiceAmount, currencyid, invoiceCreationDate, externalCurrencyRate);
                double amountinbase = (Double) bAmt.getEntityList().get(0);

                // Getting Received Amount Per Invoice for each rule
                if (invoice.getMasterSalesPerson() != null) {
                    HashMap<String, Object> filterRequestParams = new HashMap<>();
                    ArrayList filter_names = new ArrayList(), filter_params = new ArrayList(), order_by = new ArrayList(), order_type = new ArrayList();
                    filter_names.add("company.companyID");
                    filter_params.add(companyid);
                    filter_names.add("schemaItem");
                    filter_params.add(invoice.getMasterSalesPerson().getID());
                    filter_names.add("commissiontype");
                    filter_params.add(3);
                    order_by.add("lowerlimit");
                    order_by.add("upperlimit");
                    order_type.add("asc");
                    order_type.add("asc");
                    filterRequestParams.put(Constants.filterNamesKey, filter_names);
                    filterRequestParams.put(Constants.filterParamsKey, filter_params);
                    filterRequestParams.put("order_by", order_by);
                    filterRequestParams.put("order_type", order_type);
                    KwlReturnObject salesCommissionSchemaResult = accMasterItemsDAOobj.getsalesComissionScehma(filterRequestParams);
                    List<SalesComissionScehma> listSales = salesCommissionSchemaResult.getEntityList();

                    for (SalesComissionScehma salesComissionScehma : listSales) {
                        int lowervalue = (int) salesComissionScehma.getLowerlimit();
                        int uppervalue = (int) salesComissionScehma.getUpperlimit();

                        // Get Paid Amount
                        Date creationDate = invoice.getCreationDate();

                        Calendar scal = Calendar.getInstance();
                        scal.setTime(creationDate);
                        scal.add(Calendar.DATE, lowervalue);

                        String scalString = authHandler.getDateOnlyFormat().format(scal.getTime());
                        Date fromDate = authHandler.getDateOnlyFormat().parse(scalString);

                        Calendar ecal = Calendar.getInstance();
                        ecal.setTime(creationDate);
                        ecal.add(Calendar.DATE, uppervalue);
                        String ecalString = authHandler.getDateOnlyFormat().format(ecal.getTime());
                        Date toDate = authHandler.getDateOnlyFormat().parse(ecalString);
                        
                        HashMap<String, Object> receiptMap = new HashMap<>();
                        receiptMap.put("invoiceid", invoice.getID());
                        receiptMap.put(Constants.companyKey, companyid);
                        receiptMap.put("startDate", fromDate);
                        receiptMap.put("endDate", toDate);

                        KwlReturnObject receiptResult = accReceiptDAOobj.getReceiptFromInvoice(receiptMap);
                        List<ReceiptDetail> receiptList = receiptResult.getEntityList();
                        double receivedAmtInBase = 0d;
                        double receivedAmtinDoc = 0d;

                        for (ReceiptDetail rd : receiptList) {
                            double receivedAmt = rd.getAmount();
                            if (!paymentNo.contains(rd.getReceipt().getReceiptNumber())) {
                                paymentNo += rd.getReceipt().getReceiptNumber() + ",";
                            }
                            receivedAmtinDoc += rd.getAmountInInvoiceCurrency();
                            KwlReturnObject bAmt1 = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, receivedAmt, rd.getReceipt().getCurrency().getCurrencyID(), rd.getReceipt().getCreationDate(), rd.getReceipt().getJournalEntry().getExternalCurrencyRate());
                            double paidAmtInBase = authHandler.round((Double) bAmt1.getEntityList().get(0), companyid);
                            receivedAmtInBase += paidAmtInBase;
                        }

                        double percent = salesComissionScehma.getAmount();
                        commissionedAmount += (receivedAmtInBase * percent / 100);
                        commissionedAmountInDoc += (receivedAmtinDoc * percent / 100);
                        collectedAmount += receivedAmtInBase;
                        collectedAmountInDoc += receivedAmtinDoc;
                    }
                    obj.put("actualInvoiceamount", amountinbase);
                    obj.put("actualInvoiceamountInDoc", invoiceAmount);
                    obj.put("receivedAmount", collectedAmount);
                    obj.put("receivedAmountInDoc", collectedAmountInDoc);
                    obj.put("commissionamount", commissionedAmount);
                    obj.put("commissionamountInDoc", commissionedAmountInDoc);
                    if (!StringUtil.isNullOrEmpty(paymentNo)) {
                        obj.put("paymentNo", paymentNo.substring(0, (paymentNo.length() - 1)));
                    }
                }
                jArr.put(obj);
            }
        } catch (Exception ex) {
            Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
        }
        return jArr;
    }
    
    @Override
    public JSONObject getCustomerAgedReceivableBasedOnCustomerDimensdion(HttpServletRequest request, boolean exportCustomerAged, boolean isAgedReceivables) throws ServiceException, JSONException, SessionExpiredException, ParseException {
        JSONObject jObj = new JSONObject();
        JSONObject mainJobj = new JSONObject();
        JSONArray jArr = new JSONArray();
        try {

            KwlReturnObject cmpresult = accountingHandlerDAOobj.getObject(Company.class.getName(), sessionHandlerImpl.getCompanyid(request));
            Company company = (Company) cmpresult.getEntityList().get(0);
            HashMap invoiceRequestParams = AccInvoiceServiceHandler.getInvoiceRequestMap(request);
            String companyid = sessionHandlerImpl.getCompanyid(request);
            invoiceRequestParams.put("companyid", companyid);
            double totalinbase = 0.0;
            int invoiceCount = 0, jsoninvoiceCount = 0;
//            String curDateString = (!StringUtil.isNullOrEmpty(request.getParameter("curdate"))) ? request.getParameter("curdate") : ((!StringUtil.isNullOrEmpty(request.getParameter("stdate"))) ? request.getParameter("stdate") : request.getParameter(Constants.REQ_startdate));
            String curDateString = !(StringUtil.isNullOrEmpty(request.getParameter(Constants.asOfDate))) ? request.getParameter(Constants.asOfDate) : request.getParameter(Constants.curdate);
            DateFormat df = authHandler.getDateOnlyFormat();
            DateFormat dateFormat = authHandler.getDateOnlyFormat();
            Date startDate = null;
            if (invoiceRequestParams.containsKey(Constants.REQ_startdate) && invoiceRequestParams.get(Constants.REQ_startdate) != null) {
                startDate = (invoiceRequestParams.get(Constants.REQ_startdate).toString()).equals("") ? dateFormat.parse(Constants.opening_Date) : dateFormat.parse(invoiceRequestParams.get(Constants.REQ_startdate).toString());
            }
            Date curDate = df.parse(curDateString);
            int noOfInterval = StringUtil.isNullOrEmpty(request.getParameter("noOfInterval"))? 7 : Integer.parseInt(request.getParameter("noOfInterval"));
            int duration = request.getParameter("duration") == null ? 0 : Integer.parseInt(request.getParameter("duration"));
            boolean isdistibutive = StringUtil.getBoolean(request.getParameter("isdistributive"));
            int datefilter = StringUtil.getInteger(request.getParameter("datefilter"));// 0 = Invoice Due date OR 1 = Invoice date

            double amountdue1 = 0;
            double amountdue2 = 0;
            double amountdue3 = 0;
            double amountdue4 = 0;
            double amountdue5 = 0;
            double amountdue6 = 0;
            double amountdue7 = 0;
            double amountdue8 = 0;
            double amountdue9 = 0;
            double amountdue10 = 0;
            double amountdue11 = 0;
//            double accruedbalance = 0;
            double amountdueinbase1 = 0;
            double amountdueinbase2 = 0;
            double amountdueinbase3 = 0;
            double amountdueinbase4 = 0;
            double amountdueinbase5 = 0;
            double amountdueinbase6 = 0;
            double amountdueinbase7 = 0;
            double amountdueinbase8 = 0;
            double amountdueinbase9 = 0;
            double amountdueinbase10 = 0;
            double amountdueinbase11 = 0;
//            double accruedbalanceinbase = 0;

            double amountdue1ColumnTotal = 0;
            double amountdue2ColumnTotal = 0;
            double amountdue3ColumnTotal = 0;
            double amountdue4ColumnTotal = 0;
            double amountdue5ColumnTotal = 0;
            double amountdue6ColumnTotal = 0;
            double amountdue7ColumnTotal = 0;
            double amountdue8ColumnTotal = 0;
            double amountdue9ColumnTotal = 0;
            double amountdue10ColumnTotal = 0;
            double amountdue11ColumnTotal = 0;
//            double accruedbalanceColumnTotal = 0;
            double totalcolumnSum = 0;
            double totalInBasecolumnSum = 0;

            Calendar oneDayBeforeCal1 = Calendar.getInstance();
            Calendar cal1 = Calendar.getInstance();
            Calendar cal2 = Calendar.getInstance();
            Calendar cal3 = Calendar.getInstance();
            Calendar cal4 = Calendar.getInstance();
            Calendar cal5 = Calendar.getInstance();
            Calendar cal6 = Calendar.getInstance();
            Calendar cal7 = Calendar.getInstance();
            Calendar cal8 = Calendar.getInstance();
            Calendar cal9 = Calendar.getInstance();
            Calendar cal10 = Calendar.getInstance();

            oneDayBeforeCal1.setTime(curDate);
            cal1.setTime(curDate);
            cal2.setTime(curDate);
            cal3.setTime(curDate);
            cal4.setTime(curDate);
            cal5.setTime(curDate);
            cal6.setTime(curDate);
            cal7.setTime(curDate);
            cal8.setTime(curDate);
            cal9.setTime(curDate);
            cal10.setTime(curDate);
            oneDayBeforeCal1.add(Calendar.DAY_OF_YEAR, -1);
            cal2.add(Calendar.DAY_OF_YEAR, -duration);
            cal3.add(Calendar.DAY_OF_YEAR, -(duration * 2));
            cal4.add(Calendar.DAY_OF_YEAR, -(duration * 3));
            cal5.add(Calendar.DAY_OF_YEAR, -(duration * 4));
            cal6.add(Calendar.DAY_OF_YEAR, -(duration * 5));
            cal7.add(Calendar.DAY_OF_YEAR, -(duration * 6));
            cal8.add(Calendar.DAY_OF_YEAR, -(duration * 7));
            cal9.add(Calendar.DAY_OF_YEAR, -(duration * 8));
            cal10.add(Calendar.DAY_OF_YEAR, -(duration * 9));

            if (invoiceRequestParams.containsKey(Constants.start)) { //Removing paging here because it is applying on each vendor data (CN/DN etc). Due to this complete amount due not showing in AP Summary.  
                invoiceRequestParams.remove(Constants.start);
            }
            if (invoiceRequestParams.containsKey(Constants.limit)) {
                invoiceRequestParams.remove(Constants.limit);
            }

            invoiceRequestParams.put("isBadDebtInvoices", !StringUtil.isNullOrEmpty(request.getParameter("isBadDebtInvoices")) ? Boolean.parseBoolean(request.getParameter("isBadDebtInvoices")) : false);
            invoiceRequestParams.put("ignorezero", !StringUtil.isNullOrEmpty(request.getParameter("ignorezero")) ? Boolean.parseBoolean(request.getParameter("ignorezero")) : false);
            invoiceRequestParams.put("report", !StringUtil.isNullOrEmpty(request.getParameter("report")) ? Boolean.parseBoolean(request.getParameter("report")) : false);
            invoiceRequestParams.put("isSOA", request.getAttribute("isSOA") != null ? (Boolean) request.getAttribute("isSOA") : false);
            invoiceRequestParams.put("oneDayBeforeCal1", oneDayBeforeCal1);
            invoiceRequestParams.put("cal1", cal1);
            invoiceRequestParams.put("cal2", cal2);
            invoiceRequestParams.put("cal3", cal3);
            invoiceRequestParams.put("cal4", cal4);
            invoiceRequestParams.put("cal5", cal5);
            invoiceRequestParams.put("cal6", cal6);
            invoiceRequestParams.put("cal7", cal7);
            invoiceRequestParams.put("cal8", cal8);
            invoiceRequestParams.put("cal9", cal9);
            invoiceRequestParams.put("cal10", cal10);
            invoiceRequestParams.put("onlyamountdue", !StringUtil.isNullOrEmpty(request.getParameter("onlyamountdue")) ? Boolean.parseBoolean(request.getParameter("onlyamountdue")) : false);
            invoiceRequestParams.put("globalCurrencyID", AccountingManager.getGlobalCurrencyidFromRequest(request));
            invoiceRequestParams.put("requestCompanyID", AccountingManager.getCompanyidFromRequest(request));

            HashMap<String, Object> requestParams = getCustomerRequestMap(request);
            requestParams.put("custVendorID", request.getParameter("custVendorID") != null ? request.getParameter("custVendorID") : "");
            requestParams.put(Constants.moduleid, Constants.Acc_Customer_ModuleId);
            requestParams.put("isdimensionbasedgrouping", true);//isdimensionbasedgrouping - this flag is required t oapply searchjson in customer fetch query while performing grouping on customers.
            int invoiceCounOfDimensiont = 0;

            String fieldid = "";
            KwlReturnObject kwlObj = null;
            List fieldcombodataList = new ArrayList();
            FieldParams fparams = null;
            JSONObject searchJobj = new JSONObject();
            JSONObject finalSearchObj = new JSONObject();
            if (!StringUtil.isNullOrEmpty(request.getParameter(Constants.Acc_fieldid))) {
                fieldid = !StringUtil.isNullOrEmpty(request.getParameter(Constants.Acc_fieldid)) ? request.getParameter(Constants.Acc_fieldid) : "";
                KwlReturnObject fieldparamsObj = accountingHandlerDAOobj.getObject(FieldParams.class.getName(), fieldid);
                fparams = (FieldParams) fieldparamsObj.getEntityList().get(0);
                searchJobj.put("column", fparams.getId());
                searchJobj.put("refdbname", "Col" + fparams.getColnum());
                searchJobj.put("xfield", "Col" + fparams.getColnum());
                searchJobj.put(Constants.iscustomcolumn, true);
                searchJobj.put("iscustomcolumndata", false);
                searchJobj.put("isfrmpmproduct", false);
                searchJobj.put("fieldtype", fparams.getFieldtype());
                searchJobj.put("searchText", "");

                searchJobj.put("columnheader", fparams.getFieldlabel());
                searchJobj.put("search", "");

                searchJobj.put(Constants.xtype, "select");
                searchJobj.put("combosearch", "");
                searchJobj.put("isinterval", false);
                searchJobj.put("interval", "");
                searchJobj.put("isbefore", "");
                searchJobj.put("isdefaultfield", false);
                searchJobj.put(Constants.moduleid, 25);
                searchJobj.put("isForProductMasterOnly", "");

                kwlObj = accAccountDAOobj.getFieldComboDatabyFieldID(fieldid, company.getCompanyID());
                if (kwlObj != null) {
                    fieldcombodataList = kwlObj.getEntityList();
                }
            }
            for (Object obj : fieldcombodataList) {
                invoiceCounOfDimensiont = 0;
                JSONArray searchArray = new JSONArray();
                
                FieldComboData fcomboObj = (FieldComboData) obj;
                searchJobj.put("searchText", fcomboObj.getId());
                searchJobj.put("search", fcomboObj.getId());
                searchJobj.put("combosearch", fcomboObj.getValue());

                searchArray.put(searchJobj);
                finalSearchObj.put("root", searchArray);
                requestParams.put(Constants.Acc_Search_Json, finalSearchObj);
                requestParams.put(Constants.Filter_Criteria, Constants.Filter_Criteria);

                KwlReturnObject custresult = accCustomerDAOobj.getCustomerWithCurrencyForAgedReceivables(requestParams);
                amountdue1 = amountdue2 = amountdue3 = amountdue4 = amountdue5 = amountdue6 = amountdue7 = amountdue8 = amountdue9 = amountdue10 = amountdue11 = 0;
                amountdueinbase1 = amountdueinbase2 = amountdueinbase3 = amountdueinbase4 = amountdue5 = amountdue6 = amountdue7 = amountdue8 = amountdueinbase5 = amountdueinbase6 = amountdueinbase7 = amountdueinbase8 = amountdueinbase9 = amountdueinbase10 = amountdueinbase11 = 0;
                
                List<Object[]> customerList = custresult.getEntityList();

                for (Object[] oj : customerList) {
                    String custid = oj[0].toString();

                    invoiceRequestParams.put(Constants.customerid, custid);
                    invoiceRequestParams.put("accid", custid);
                    invoiceRequestParams.put("cntype", null);
                    invoiceRequestParams.put("isAgedSummary", true);
                    if (isAgedReceivables) {
                        invoiceRequestParams.put("isAgedReceivables", true);
                    }
                    JSONArray invjarr = new JSONArray();

                    KwlReturnObject result = accInvoiceDAOobj.getInvoicesMerged(invoiceRequestParams);
                    List list = result.getEntityList();
                    invoiceCount += list.size();

                    if (!list.isEmpty() || request.getParameter("filename") != null) {
                        invjarr = getInvoiceJsonForAgedReceivables(request, list, invjarr, invoiceRequestParams);
                        jsoninvoiceCount += invjarr.length();
                    }
                    JSONArray OBJArryInvoice = new JSONArray();
                    result = accInvoiceDAOobj.getOpeningBalanceInvoices(invoiceRequestParams);
                    if (result.getRecordTotalCount() > 0) {
                        OBJArryInvoice = AccInvoiceServiceHandler.getAgedOpeningBalanceInvoiceJson(invoiceRequestParams, result.getEntityList(), OBJArryInvoice, accCurrencyDAOobj, accInvoiceCommon, request, accountingHandlerDAOobj,accAccountDAOobj,fieldDataManagercntrl,accJournalEntryobj);
                        for (int i = 0; i < OBJArryInvoice.length(); i++) {
                            invjarr.put(OBJArryInvoice.get(i));
                        }
                    }

                    JSONArray OBJArryDebitNote = new JSONArray();
                    result = accDebitNoteobj.getOpeningBalanceCustomerDNs(invoiceRequestParams);
                    if (result.getRecordTotalCount() > 0) {
                        OBJArryDebitNote = AccInvoiceServiceHandler.getAgedOpeningBalanceDebitNoteJson(invoiceRequestParams, result.getEntityList(), OBJArryDebitNote, accCurrencyDAOobj, accReceiptDAOobj, request, accountingHandlerDAOobj,accAccountDAOobj,fieldDataManagercntrl,accJournalEntryobj,accCreditNoteDAOobj);
                        for (int i = 0; i < OBJArryDebitNote.length(); i++) {
                            invjarr.put(OBJArryDebitNote.get(i));
                        }
                    }

                    JSONArray OBJArryCreditNote = new JSONArray();
                    result = accCreditNoteDAOobj.getOpeningBalanceCNs(invoiceRequestParams);
                    if (result.getRecordTotalCount() > 0) {
                        OBJArryCreditNote = AccInvoiceServiceHandler.getAgedOpeningBalanceCreditNoteJson(invoiceRequestParams, result.getEntityList(), OBJArryCreditNote, accCurrencyDAOobj, accPaymentDAOobj, request, accountingHandlerDAOobj, accCreditNoteDAOobj,accAccountDAOobj,fieldDataManagercntrl,accJournalEntryobj);
                        for (int i = 0; i < OBJArryCreditNote.length(); i++) {
                            invjarr.put(OBJArryCreditNote.get(i));
                        }
                    }

                    JSONArray OBJArryPayment = new JSONArray();
                    result = accReceiptDAOobj.getOpeningBalanceReceipts(invoiceRequestParams);
                    if (result.getRecordTotalCount() > 0) {
                        OBJArryPayment = AccInvoiceServiceHandler.getAgedOpeningBalanceReceiptJson(invoiceRequestParams, result.getEntityList(), OBJArryPayment, accCurrencyDAOobj, accReceiptDAOobj, request, accountingHandlerDAOobj,accAccountDAOobj,fieldDataManagercntrl,accJournalEntryobj);
                        for (int i = 0; i < OBJArryPayment.length(); i++) {
                            invjarr.put(OBJArryPayment.get(i));
                        }
                    }

                    JSONArray CreditNotejArr = new JSONArray();
                    result = accCreditNoteDAOobj.getCreditNoteMerged(invoiceRequestParams);
                    if (result.getRecordTotalCount() > 0) {
                        CreditNotejArr = AccInvoiceServiceHandler.getCreditNotesMergedJson(invoiceRequestParams, result.getEntityList(), CreditNotejArr, accountingHandlerDAOobj, authHandlerDAOObj, accCurrencyDAOobj, accPaymentDAOobj, request, accCreditNoteDAOobj,accAccountDAOobj,fieldDataManagercntrl,accJournalEntryobj);
                        for (int i = 0; i < CreditNotejArr.length(); i++) {
                            invjarr.put(CreditNotejArr.get(i));
                        }
                    }

                    invoiceRequestParams.put("cntype", 4);
                    JSONArray DebitNotejArr = new JSONArray();//This is used for getting DN gainst vendor and otherwise 
                    result = accDebitNoteobj.getDebitNoteMerged(invoiceRequestParams);
                    if (result.getRecordTotalCount() > 0) {
                        DebitNotejArr = AccInvoiceServiceHandler.getDebitNotesMergedJson(invoiceRequestParams, result.getEntityList(), DebitNotejArr, accountingHandlerDAOobj, authHandlerDAOObj, accCurrencyDAOobj, accReceiptDAOobj, request,accAccountDAOobj,fieldDataManagercntrl,accJournalEntryobj,accCreditNoteDAOobj);
                        for (int i = 0; i < DebitNotejArr.length(); i++) {
                            invjarr.put(DebitNotejArr.get(i));
                        }
                    }
                    invoiceRequestParams.remove("cntype");

                    JSONArray receivePaymentJArr = new JSONArray();
                    invoiceRequestParams.put("allAdvPayment", true); // needs only advance type record so that putted true
                    invoiceRequestParams.put("paymentWindowType", 1);//Receipt to Customer record
                    result = accReceiptDAOobj.getReceipts(invoiceRequestParams);
                    if (result.getRecordTotalCount() > 0) {
                        receivePaymentJArr = AccInvoiceServiceHandler.getReceiptsJson(invoiceRequestParams, result.getEntityList(), receivePaymentJArr, accountingHandlerDAOobj, authHandlerDAOObj, accCurrencyDAOobj, accReceiptDAOobj, request,accAccountDAOobj,fieldDataManagercntrl,accJournalEntryobj);
                        for (int i = 0; i < receivePaymentJArr.length(); i++) {
                            invjarr.put(receivePaymentJArr.get(i));
                        }
                    }
                    
                    JSONArray makePaymentJArr = new JSONArray();
                    invoiceRequestParams.put("allAdvPayment", true); // needs only refund type record so that putted true
                    invoiceRequestParams.put("paymentWindowType", 2);//Payment to Customer record
                    result = accVendorPaymentobj.getPayments(invoiceRequestParams);
                    if (result != null && result.getEntityList() != null && !result.getEntityList().isEmpty()) {
                        makePaymentJArr = accGoodsReceiptServiceHandler.getPaymentsJson(invoiceRequestParams, result.getEntityList(), makePaymentJArr, accCurrencyDAOobj, accountingHandlerDAOobj, accVendorPaymentobj);
                        for (int i = 0; i < makePaymentJArr.length(); i++) {
                            invjarr.put(makePaymentJArr.get(i));
                        }
                    }
                    invoiceRequestParams.remove("allAdvPayment");
                    invoiceRequestParams.remove("paymentWindowType");
                    
                    invoiceCounOfDimensiont += invjarr.length();
                    String currencyid = null;
                    boolean isCN = false;
                    boolean isRP = false;

                    String currencyidCust = oj[1].toString();

                    for (int i = 0; i < invjarr.length(); i++) {
                        JSONObject invobj = invjarr.getJSONObject(i);
                        currencyid = (invobj.has(Constants.currencyKey)) ? invobj.getString(Constants.currencyKey) : "";
                        isCN = invobj.has("isCN") ? invobj.getBoolean("isCN") : false;
                        isRP = invobj.has("isRP") ? invobj.getBoolean("isRP") : false;
                        Date dueDate = new Date();
                        if (datefilter == 0 || datefilter == Constants.agedDueDate0to30Filter) {
                            dueDate = authHandler.getDateOnlyFormat().parse(invobj.getString(Constants.duedate));
                        } else {
                            dueDate = authHandler.getDateOnlyFormat().parse(invobj.getString("date"));
                        }
                        double amountdue = invobj.getDouble("amountdue");
                        double amountdueinbase = invobj.getDouble(InvoiceConstants.amountdueinbase);

                        boolean isopeningBalanceTransaction = invobj.optBoolean("isOpeningBalanceTransaction", false);
                        boolean isConversionRateFromCurrencyToBase = invobj.optBoolean("isConversionRateFromCurrencyToBase", false);

                        KwlReturnObject bAmt = null;
                        Date date = null;
                        if (!invobj.getString("date").equals("")) {
                            date = df.parse(invobj.getString("date"));
                        }
                        if (isopeningBalanceTransaction && isConversionRateFromCurrencyToBase) {// if Transaction is opening balance Transaction and Conversion rate is taken from user is Currency to base then following method will be called.
                            bAmt = accCurrencyDAOobj.getOneCurrencyToOtherModifiedAccordingToCurrencyToBaseExchangeRate(invoiceRequestParams, amountdue, currencyid, currencyidCust, date, invobj.getDouble("externalcurrencyrate"));
                        } else {
                            bAmt = accCurrencyDAOobj.getOneCurrencyToOtherModified(invoiceRequestParams, amountdue, currencyid, currencyidCust, date, invobj.getDouble("externalcurrencyrate"));
                        }
                        amountdue = authHandler.round((Double) bAmt.getEntityList().get(0), companyid);
                        if (isCN || isRP) {
                            if (!isopeningBalanceTransaction) {
                                amountdueinbase = -amountdueinbase;
                                amountdue = -amountdue;
                            }
                        }

                        if (isdistibutive) {
//                            if (startDate != null && dueDate.before(startDate)) {//In Aged Report amountdue goes in Accruade Balance for those transaction whose creation/due date is previous to Start date will goes into the accrued balance, likes opening balance 
//                                accruedbalanceinbase += amountdueinbase;
//                                accruedbalance += amountdue;
//                                accruedbalanceColumnTotal += amountdue;
//                            } else 
                            if (dueDate.after(oneDayBeforeCal1.getTime())) {
                                if (dueDate.equals(cal1.getTime()) && (datefilter == Constants.agedDueDate0to30Filter || datefilter == Constants.agedInvoiceDate0to30Filter)) {
                                    amountdueinbase2 += amountdueinbase;
                                    amountdue2 += amountdue;
                                    amountdue2ColumnTotal += amountdue;
                                } else {
                                    amountdueinbase1 += amountdueinbase;
                                    amountdue1 += amountdue;
                                    amountdue1ColumnTotal += amountdue;
                                }
                            } else if ((cal2.getTime().before(dueDate) || cal2.getTime().equals(dueDate)) && cal1.getTime().after(dueDate)) {
                                amountdueinbase2 += amountdueinbase;
                                amountdue2 += amountdue;
                                amountdue2ColumnTotal += amountdue;
                            } else if ((cal3.getTime().before(dueDate) || cal3.getTime().equals(dueDate)) && cal2.getTime().after(dueDate)) {
                                amountdueinbase3 += amountdueinbase;
                                amountdue3 += amountdue;
                                amountdue3ColumnTotal += amountdue;
                            } else if ((cal4.getTime().before(dueDate) || cal4.getTime().equals(dueDate)) && cal3.getTime().after(dueDate)) {
                                amountdueinbase4 += amountdueinbase;
                                amountdue4 += amountdue;
                                amountdue4ColumnTotal += amountdue;
                            } else if ((cal5.getTime().before(dueDate) || cal5.getTime().equals(dueDate)) && cal4.getTime().after(dueDate)) {
                                amountdueinbase5 += amountdueinbase;
                                amountdue5 += amountdue;
                                amountdue5ColumnTotal += amountdue;
                            } else if ((cal6.getTime().before(dueDate) || cal6.getTime().equals(dueDate)) && cal5.getTime().after(dueDate)) {
                                amountdueinbase6 += amountdueinbase;
                                amountdue6 += amountdue;
                                amountdue6ColumnTotal += amountdue;
                            } else if ((cal7.getTime().before(dueDate) || cal7.getTime().equals(dueDate)) && cal6.getTime().after(dueDate)) {
                                amountdueinbase7 += amountdueinbase;
                                amountdue7 += amountdue;
                                amountdue7ColumnTotal += amountdue;
                            } else if ((cal8.getTime().before(dueDate) || cal8.getTime().equals(dueDate)) && cal7.getTime().after(dueDate)) {
                                amountdueinbase8 += amountdueinbase;
                                amountdue8 += amountdue;
                                amountdue8ColumnTotal += amountdue;
                            } else if ((cal9.getTime().before(dueDate) || cal9.getTime().equals(dueDate)) && cal8.getTime().after(dueDate)) {
                                amountdueinbase9 += amountdueinbase;
                                amountdue9 += amountdue;
                                amountdue9ColumnTotal += amountdue;
                            } else if ((cal10.getTime().before(dueDate) || cal10.getTime().equals(dueDate)) && cal9.getTime().after(dueDate)) {
                                amountdueinbase10 += amountdueinbase;
                                amountdue10 += amountdue;
                                amountdue10ColumnTotal += amountdue;
                            } else {
                                amountdueinbase11 += amountdueinbase;
                                amountdue11 += amountdue;
                                amountdue11ColumnTotal += amountdue;
                            }
                            
                            switch(noOfInterval){
                                case 2:
                                    amountdue3 += amountdue4 + amountdue5 + amountdue6 + amountdue7 + amountdue8 + amountdue9 + amountdue10 + amountdue11;
                                    amountdue4 = amountdue5 = amountdue6 = amountdue7 = amountdue8 = amountdue9 = amountdue10 = amountdue11 = 0;
                                    amountdueinbase3 += amountdueinbase4 + amountdueinbase5 + amountdueinbase6 + amountdueinbase7 + amountdueinbase8 + amountdueinbase9 + amountdueinbase10 + amountdueinbase11;
                                    amountdueinbase4 = amountdueinbase5 = amountdueinbase6 = amountdueinbase7 = amountdueinbase8 = amountdueinbase9 = amountdueinbase10 = amountdueinbase11 = 0;
                                    amountdue3ColumnTotal += amountdue4ColumnTotal + amountdue5ColumnTotal + amountdue6ColumnTotal + amountdue7ColumnTotal + amountdue8ColumnTotal + amountdue9ColumnTotal + amountdue10ColumnTotal + amountdue11ColumnTotal;
                                    amountdue4ColumnTotal = amountdue5ColumnTotal = amountdue6ColumnTotal = amountdue7ColumnTotal = amountdue8ColumnTotal = amountdue9ColumnTotal = amountdue10ColumnTotal = amountdue11ColumnTotal = 0;
                                    break;
                                case 3:
                                    amountdue4 += amountdue5 + amountdue6 + amountdue7 + amountdue8 + amountdue9 + amountdue10 + amountdue11;
                                    amountdue5 = amountdue6 = amountdue7 = amountdue8 = amountdue9 = amountdue10 = amountdue11 = 0;
                                    amountdueinbase4 += amountdueinbase5 + amountdueinbase6 + amountdueinbase7 + amountdueinbase8 + amountdueinbase9 + amountdueinbase10 + amountdueinbase11;
                                    amountdueinbase5 = amountdueinbase6 = amountdueinbase7 = amountdueinbase8 = amountdueinbase9 = amountdueinbase10 = amountdueinbase11 = 0;
                                    amountdue4ColumnTotal += amountdue5ColumnTotal + amountdue6ColumnTotal + amountdue7ColumnTotal + amountdue8ColumnTotal + amountdue9ColumnTotal + amountdue10ColumnTotal + amountdue11ColumnTotal;
                                    amountdue5ColumnTotal = amountdue6ColumnTotal = amountdue7ColumnTotal = amountdue8ColumnTotal = amountdue9ColumnTotal = amountdue10ColumnTotal = amountdue11ColumnTotal = 0;
                                    break;
                                case 4:
                                    amountdue5 += amountdue6 + amountdue7 + amountdue8 + amountdue9 + amountdue10 + amountdue11;
                                    amountdue6 = amountdue7 = amountdue8 = amountdue9 = amountdue10 = amountdue11 = 0;
                                    amountdueinbase5 += amountdueinbase6 + amountdueinbase7 + amountdueinbase8 + amountdueinbase9 + amountdueinbase10 + amountdueinbase11;
                                    amountdueinbase6 = amountdueinbase7 = amountdueinbase8 = amountdueinbase9 = amountdueinbase10 = amountdueinbase11 = 0;
                                    amountdue5ColumnTotal += amountdue6ColumnTotal + amountdue7ColumnTotal + amountdue8ColumnTotal + amountdue9ColumnTotal + amountdue10ColumnTotal + amountdue11ColumnTotal;
                                    amountdue6ColumnTotal = amountdue7ColumnTotal = amountdue8ColumnTotal = amountdue9ColumnTotal = amountdue10ColumnTotal = amountdue11ColumnTotal = 0;
                                    break;
                                case 5:
                                    amountdue6 += amountdue7 + amountdue8 + amountdue9 + amountdue10 + amountdue11;
                                    amountdue7 = amountdue8 = amountdue9 = amountdue10 = amountdue11 = 0;
                                    amountdueinbase6 += amountdueinbase7 + amountdueinbase8 + amountdueinbase9 + amountdueinbase10 + amountdueinbase11;
                                    amountdueinbase7 = amountdueinbase8 = amountdueinbase9 = amountdueinbase10 = amountdueinbase11 = 0;
                                    amountdue6ColumnTotal += amountdue7ColumnTotal + amountdue8ColumnTotal + amountdue9ColumnTotal + amountdue10ColumnTotal + amountdue11ColumnTotal;
                                    amountdue7ColumnTotal = amountdue8ColumnTotal = amountdue9ColumnTotal = amountdue10ColumnTotal = amountdue11ColumnTotal = 0;
                                    break;
                                case 6:
                                    amountdue7 += amountdue8 + amountdue9 + amountdue10 + amountdue11;
                                    amountdue8 = amountdue9 = amountdue10 = amountdue11 = 0;
                                    amountdueinbase7 += amountdueinbase8 + amountdueinbase9 + amountdueinbase10 + amountdueinbase11;
                                    amountdueinbase8 = amountdueinbase9 = amountdueinbase10 = amountdueinbase11 = 0;
                                    amountdue7ColumnTotal += amountdue8ColumnTotal + amountdue9ColumnTotal + amountdue10ColumnTotal + amountdue11ColumnTotal;
                                    amountdue8ColumnTotal = amountdue9ColumnTotal = amountdue10ColumnTotal = amountdue11ColumnTotal = 0;
                                    break;
                                case 7:
                                    amountdue8 += amountdue9 + amountdue10 + amountdue11;
                                    amountdue9 = amountdue10 = amountdue11 = 0;
                                    amountdueinbase8 += amountdueinbase9 + amountdueinbase10 + amountdueinbase11;
                                    amountdueinbase9 = amountdueinbase10 = amountdueinbase11 = 0;
                                    amountdue8ColumnTotal += amountdue9ColumnTotal + amountdue10ColumnTotal + amountdue11ColumnTotal;
                                    amountdue9ColumnTotal = amountdue10ColumnTotal = amountdue11ColumnTotal = 0;
                                    break;
                                case 8:
                                    amountdue9 += amountdue10 + amountdue11;
                                    amountdue10 = amountdue11 = 0;
                                    amountdueinbase9 += amountdueinbase10 + amountdueinbase11;
                                    amountdueinbase10 = amountdueinbase11 = 0;
                                    amountdue9ColumnTotal += amountdue10ColumnTotal + amountdue11ColumnTotal;
                                    amountdue10ColumnTotal = amountdue11ColumnTotal = 0;
                                    break;
                                case 9:
                                    amountdue10 += amountdue11;
                                    amountdue11 = 0;
                                    amountdueinbase10 += amountdueinbase11;
                                    amountdueinbase11 = 0;
                                    amountdue10ColumnTotal += amountdue11ColumnTotal;
                                    amountdue11ColumnTotal = 0;
                                    break;
                            }
                            
                        } else {
//                            if (startDate != null && dueDate.before(startDate)) {//In Aged Report amountdue goes in Accruade Balance for those transaction whose creation/due date is previous to Start date will goes into the accrued balance, likes opening balance 
//                                accruedbalanceinbase += amountdueinbase;
//                                accruedbalance += amountdue;
//                                accruedbalanceColumnTotal += amountdue;
//                            } else 
                            if (dueDate.after(oneDayBeforeCal1.getTime()) && (dueDate.before(cal1.getTime()) || dueDate.equals(cal1.getTime()))) {
                                amountdueinbase1 += amountdueinbase;
                                amountdue1 += amountdue;
                                amountdue1ColumnTotal += amountdue;
                            } else if (dueDate.after(cal2.getTime()) || dueDate.equals(cal2.getTime())) {
                                amountdueinbase2 += amountdueinbase;
                                amountdue2 += amountdue;
                                amountdue2ColumnTotal += amountdue;
                            } else if (dueDate.after(cal3.getTime()) || dueDate.equals(cal3.getTime())) {
                                amountdueinbase3 += amountdueinbase;
                                amountdue3 += amountdue;
                                amountdue3ColumnTotal += amountdue;
                            } else {
                                amountdueinbase4 += amountdueinbase;
                                amountdue4ColumnTotal += amountdue;
                            }
                        }
                    }
                    //                       
                }//for loop of customers end here 

                if (customerList.size() > 0 && invoiceCounOfDimensiont > 0) {
                    jObj = new JSONObject();
                    jObj.put("dimensionvalue", fcomboObj.getValue());
                    jObj.put("dimensionname", fcomboObj.getField().getFieldlabel());
                    jObj.put("amountdue1", Double.valueOf(authHandler.formattedAmount(amountdue1, companyid)));
                    jObj.put("amountdue2", Double.valueOf(authHandler.formattedAmount(amountdue2, companyid)));
                    jObj.put("amountdue3", Double.valueOf(authHandler.formattedAmount(amountdue3, companyid)));
                    jObj.put("amountdue4", Double.valueOf(authHandler.formattedAmount(amountdue4, companyid)));
                    jObj.put("amountdue5", Double.valueOf(authHandler.formattedAmount(amountdue5, companyid)));
                    jObj.put("amountdue6", Double.valueOf(authHandler.formattedAmount(amountdue6, companyid)));
                    jObj.put("amountdue7", Double.valueOf(authHandler.formattedAmount(amountdue7, companyid)));
                    jObj.put("amountdue8", Double.valueOf(authHandler.formattedAmount(amountdue8, companyid)));
                    jObj.put("amountdue9", Double.valueOf(authHandler.formattedAmount(amountdue9, companyid)));
                    jObj.put("amountdue10", Double.valueOf(authHandler.formattedAmount(amountdue10, companyid)));
                    jObj.put("amountdue11", Double.valueOf(authHandler.formattedAmount(amountdue11, companyid)));
//                    jObj.put(InvoiceConstants.ACCRUEDBALANCE, Double.valueOf(authHandler.formattedAmount(accruedbalance, companyid)));

                    jObj.put("amountdueinbase1", Double.valueOf(authHandler.formattedAmount(amountdueinbase1, companyid)));
                    jObj.put("amountdueinbase2", Double.valueOf(authHandler.formattedAmount(amountdueinbase2, companyid)));
                    jObj.put("amountdueinbase3", Double.valueOf(authHandler.formattedAmount(amountdueinbase3, companyid)));
                    jObj.put("amountdueinbase4", Double.valueOf(authHandler.formattedAmount(amountdueinbase4, companyid)));
                    jObj.put("amountdueinbase5", Double.valueOf(authHandler.formattedAmount(amountdueinbase5, companyid)));
                    jObj.put("amountdueinbase6", Double.valueOf(authHandler.formattedAmount(amountdueinbase6, companyid)));
                    jObj.put("amountdueinbase7", Double.valueOf(authHandler.formattedAmount(amountdueinbase7, companyid)));
                    jObj.put("amountdueinbase8", Double.valueOf(authHandler.formattedAmount(amountdueinbase8, companyid)));
                    jObj.put("amountdueinbase9", Double.valueOf(authHandler.formattedAmount(amountdueinbase9, companyid)));
                    jObj.put("amountdueinbase10", Double.valueOf(authHandler.formattedAmount(amountdueinbase10, companyid)));
                    jObj.put("amountdueinbase11", Double.valueOf(authHandler.formattedAmount(amountdueinbase11, companyid)));
//                    jObj.put("accruedbalanceinbase", Double.valueOf(authHandler.formattedAmount(accruedbalanceinbase, companyid)));
                    jObj.put(InvoiceConstants.currencysymbol, company.getCurrency().getSymbol());
                    jObj.put(Constants.currencyKey, company.getCurrency().getCurrencyID());
                    jObj.put(InvoiceConstants.currencyname, company.getCurrency().getName());
                    double amountdue = Double.valueOf(authHandler.formattedAmount((amountdue1 + amountdue2 + amountdue3 + amountdue4 + amountdue5 + amountdue6 + amountdue7 + amountdue8 + amountdue9 + amountdue10 + amountdue11), companyid));
                    jObj.put("total", amountdue);
                    double amountdueinbase = Double.valueOf(authHandler.formattedAmount((amountdueinbase1 + amountdueinbase2 + amountdueinbase3 + amountdueinbase4 + amountdueinbase5 + amountdueinbase6 + amountdueinbase7 + amountdueinbase8 + amountdueinbase9 + amountdueinbase10 + amountdueinbase11), companyid));
                    jObj.put("totalinbase", amountdueinbase);
                    totalinbase += amountdueinbase;
                    totalcolumnSum += amountdue;
                    totalInBasecolumnSum += amountdueinbase;
                    jArr.put(jObj);
                }

            }// for loop of dimensions end here 

            JSONObject totalRowjObj = new JSONObject();
            totalRowjObj.put("dimensionvalue", "Grand Total");
            totalRowjObj.put("amountdue1", Double.valueOf(authHandler.formattedAmount(amountdue1ColumnTotal, companyid)));
            totalRowjObj.put("amountdue2", Double.valueOf(authHandler.formattedAmount(amountdue2ColumnTotal, companyid)));
            totalRowjObj.put("amountdue3", Double.valueOf(authHandler.formattedAmount(amountdue3ColumnTotal, companyid)));
            totalRowjObj.put("amountdue4", Double.valueOf(authHandler.formattedAmount(amountdue4ColumnTotal, companyid)));
            totalRowjObj.put("amountdue5", Double.valueOf(authHandler.formattedAmount(amountdue5ColumnTotal, companyid)));
            totalRowjObj.put("amountdue6", Double.valueOf(authHandler.formattedAmount(amountdue6ColumnTotal, companyid)));
            totalRowjObj.put("amountdue7", Double.valueOf(authHandler.formattedAmount(amountdue7ColumnTotal, companyid)));
            totalRowjObj.put("amountdue8", Double.valueOf(authHandler.formattedAmount(amountdue8ColumnTotal, companyid)));
            totalRowjObj.put("amountdue9", Double.valueOf(authHandler.formattedAmount(amountdue9ColumnTotal, companyid)));
            totalRowjObj.put("amountdue10", Double.valueOf(authHandler.formattedAmount(amountdue10ColumnTotal, companyid)));
            totalRowjObj.put("amountdue11", Double.valueOf(authHandler.formattedAmount(amountdue11ColumnTotal, companyid)));
//            totalRowjObj.put(InvoiceConstants.ACCRUEDBALANCE, Double.valueOf(authHandler.formattedAmount(accruedbalanceColumnTotal, companyid)));
            totalRowjObj.put(InvoiceConstants.currencyname, company.getCurrency().getName());
            totalRowjObj.put("total", totalcolumnSum);
            totalRowjObj.put("totalinbase", totalInBasecolumnSum);
            jArr.put(totalRowjObj);

            if (exportCustomerAged) { //  Used for export CSV
                JSONObject jtotal = new JSONObject();

                jtotal.put("total", "Total");
                jtotal.put("totalinbase", totalinbase);
                jArr.put(jtotal);
            }
            mainJobj.put("data", jArr);
            System.out.println("Invoice Count= " + invoiceCount);
            System.out.println("json invoice Count = " + jsoninvoiceCount);
            mainJobj.put("totalcount", jArr.length());
        } catch (ServiceException ex) {
            Logger.getLogger(AccInvoiceServiceImpl.class.getName()).log(Level.SEVERE, null, ex);
            throw ex;
        }
        return mainJobj;

    }
    //Here I ahve to do changes.
    @Override
    public JSONObject getCustomerAgedReceivableBasedOnDocumentsDimension(HttpServletRequest request, boolean exportCustomerAged, boolean isAgedReceivables) throws ServiceException, JSONException, SessionExpiredException, ParseException {
        JSONObject jObj = new JSONObject();
        JSONObject mainJobj = new JSONObject();
        JSONArray jArr = new JSONArray();
        try {

            KwlReturnObject cmpresult = accountingHandlerDAOobj.getObject(Company.class.getName(), sessionHandlerImpl.getCompanyid(request));
            Company company = (Company) cmpresult.getEntityList().get(0);

            HashMap invoiceRequestParams = AccInvoiceServiceHandler.getInvoiceRequestMap(request);
            String companyid = sessionHandlerImpl.getCompanyid(request);
            invoiceRequestParams.put("companyid", companyid);
            double totalinbase = 0.0;
            int invoiceCount = 0, jsoninvoiceCount = 0;
//            String curDateString = (!StringUtil.isNullOrEmpty(request.getParameter("curdate"))) ? request.getParameter("curdate") : ((!StringUtil.isNullOrEmpty(request.getParameter("stdate"))) ? request.getParameter("stdate") : request.getParameter(Constants.REQ_startdate));
            String curDateString = !(StringUtil.isNullOrEmpty(request.getParameter(Constants.asOfDate))) ? request.getParameter(Constants.asOfDate) : request.getParameter(Constants.curdate);
            DateFormat df = authHandler.getDateOnlyFormat();
            Date curDate = df.parse(curDateString);
            int duration = request.getParameter("duration") == null ? 0 : Integer.parseInt(request.getParameter("duration"));
            int noOfInterval = StringUtil.isNullOrEmpty(request.getParameter("noOfInterval"))? 7 : Integer.parseInt(request.getParameter("noOfInterval"));
            boolean isdistibutive = StringUtil.getBoolean(request.getParameter("isdistributive"));
            DateFormat dateFormat = authHandler.getDateOnlyFormat();
            Date startDate = null;
            if (invoiceRequestParams.containsKey(Constants.REQ_startdate) && invoiceRequestParams.get(Constants.REQ_startdate) != null) {
                startDate = (invoiceRequestParams.get(Constants.REQ_startdate).toString()).equals("") ? dateFormat.parse(Constants.opening_Date) : dateFormat.parse(invoiceRequestParams.get(Constants.REQ_startdate).toString());
            }
            
            Object detailedviewgroupingondimensions = request.getAttribute("detailedviewgroupingondimensions");
            boolean isGroupingOnDimensionInDetailedView = detailedviewgroupingondimensions != null ? Boolean.parseBoolean(detailedviewgroupingondimensions.toString()) : false;
            if (isGroupingOnDimensionInDetailedView) {
                isdistibutive = true;
            }
            int datefilter = StringUtil.getInteger(request.getParameter("datefilter"));// 0 = Invoice Due date OR 1 = Invoice date

            double amountdue1 = 0;
            double amountdue2 = 0;
            double amountdue3 = 0;
            double amountdue4 = 0;
            double amountdue5 = 0;
            double amountdue6 = 0;
            double amountdue7 = 0;
            double amountdue8 = 0;
            double amountdue9 = 0;
            double amountdue10 = 0;
            double amountdue11 = 0;
//            double accruedbalance = 0;
            double amountdueinbase1 = 0;
            double amountdueinbase2 = 0;
            double amountdueinbase3 = 0;
            double amountdueinbase4 = 0;
            double amountdueinbase5 = 0;
            double amountdueinbase6 = 0;
            double amountdueinbase7 = 0;
            double amountdueinbase8 = 0;
            double amountdueinbase9 = 0;
            double amountdueinbase10 = 0;
            double amountdueinbase11 = 0;
//            double accruedbalanceinbase = 0;

            double amountdue1ColumnTotal = 0;
            double amountdue2ColumnTotal = 0;
            double amountdue3ColumnTotal = 0;
            double amountdue4ColumnTotal = 0;
            double amountdue5ColumnTotal = 0;
            double amountdue6ColumnTotal = 0;
            double amountdue7ColumnTotal = 0;
            double amountdue8ColumnTotal = 0;
            double amountdue9ColumnTotal = 0;
            double amountdue10ColumnTotal = 0;
            double amountdue11ColumnTotal = 0;
//            double accruedbalanceColumnTotal = 0;
            double totalcolumnSum = 0;
            double totalInBasecolumnSum = 0;

            Calendar oneDayBeforeCal1 = Calendar.getInstance();
            Calendar cal1 = Calendar.getInstance();
            Calendar cal2 = Calendar.getInstance();
            Calendar cal3 = Calendar.getInstance();
            Calendar cal4 = Calendar.getInstance();
            Calendar cal5 = Calendar.getInstance();
            Calendar cal6 = Calendar.getInstance();
            Calendar cal7 = Calendar.getInstance();
            Calendar cal8 = Calendar.getInstance();
            Calendar cal9 = Calendar.getInstance();
            Calendar cal10 = Calendar.getInstance();

            oneDayBeforeCal1.setTime(curDate);
            cal1.setTime(curDate);
            cal2.setTime(curDate);
            cal3.setTime(curDate);
            cal4.setTime(curDate);
            cal5.setTime(curDate);
            cal6.setTime(curDate);
            cal7.setTime(curDate);
            cal8.setTime(curDate);
            cal9.setTime(curDate);
            cal10.setTime(curDate);
            oneDayBeforeCal1.add(Calendar.DAY_OF_YEAR, -1);
            cal2.add(Calendar.DAY_OF_YEAR, -duration);
            cal3.add(Calendar.DAY_OF_YEAR, -(duration * 2));
            cal4.add(Calendar.DAY_OF_YEAR, -(duration * 3));
            cal5.add(Calendar.DAY_OF_YEAR, -(duration * 4));
            cal6.add(Calendar.DAY_OF_YEAR, -(duration * 5));
            cal7.add(Calendar.DAY_OF_YEAR, -(duration * 6));
            cal8.add(Calendar.DAY_OF_YEAR, -(duration * 7));
            cal9.add(Calendar.DAY_OF_YEAR, -(duration * 8));
            cal10.add(Calendar.DAY_OF_YEAR, -(duration * 9));

            if (invoiceRequestParams.containsKey(Constants.start)) { //Removing paging here because it is applying on each vendor data (CN/DN etc). Due to this complete amount due not showing in AP Summary.  
                invoiceRequestParams.remove(Constants.start);
            }
            if (invoiceRequestParams.containsKey(Constants.limit)) {
                invoiceRequestParams.remove(Constants.limit);
            }

            invoiceRequestParams.put("isBadDebtInvoices", !StringUtil.isNullOrEmpty(request.getParameter("isBadDebtInvoices")) ? Boolean.parseBoolean(request.getParameter("isBadDebtInvoices")) : false);
            invoiceRequestParams.put("ignorezero", !StringUtil.isNullOrEmpty(request.getParameter("ignorezero")) ? Boolean.parseBoolean(request.getParameter("ignorezero")) : false);
            invoiceRequestParams.put("report", !StringUtil.isNullOrEmpty(request.getParameter("report")) ? Boolean.parseBoolean(request.getParameter("report")) : false);
            invoiceRequestParams.put("isSOA", request.getAttribute("isSOA") != null ? (Boolean) request.getAttribute("isSOA") : false);
            invoiceRequestParams.put("oneDayBeforeCal1", oneDayBeforeCal1);
            invoiceRequestParams.put("cal1", cal1);
            invoiceRequestParams.put("cal2", cal2);
            invoiceRequestParams.put("cal3", cal3);
            invoiceRequestParams.put("cal4", cal4);
            invoiceRequestParams.put("cal5", cal5);
            invoiceRequestParams.put("cal6", cal6);
            invoiceRequestParams.put("cal7", cal7);
            invoiceRequestParams.put("cal8", cal8);
            invoiceRequestParams.put("cal9", cal9);
            invoiceRequestParams.put("cal10", cal10);
            invoiceRequestParams.put("onlyamountdue", !StringUtil.isNullOrEmpty(request.getParameter("onlyamountdue")) ? Boolean.parseBoolean(request.getParameter("onlyamountdue")) : false);
            invoiceRequestParams.put("globalCurrencyID", AccountingManager.getGlobalCurrencyidFromRequest(request));
            invoiceRequestParams.put("requestCompanyID", AccountingManager.getCompanyidFromRequest(request));

            invoiceRequestParams.put("custVendorID", request.getParameter("custVendorID") != null ? request.getParameter("custVendorID") : "");
            invoiceRequestParams.put(Constants.moduleid, Constants.Acc_Customer_ModuleId);
            invoiceRequestParams.put("isdimensionbasedgrouping", true);//isdimensionbasedgrouping - this flag is required t oapply searchjson in customer fetch query while performing grouping on customers.
            int invoiceCounOfDimensiont = 0;

            KwlReturnObject kwlObj = null;
            List fieldcombodataList = new ArrayList();
            FieldParams fparams = null;

            Map<Integer, Object> moduleWiseSarchMap = new HashMap();//to put searchjobj in map modulewise
            Map<Integer, List> fieldCombodataMapmoduleWise = new HashMap();////to put fieldcombodata in map modulewise

            String fieldIDsArrString = !StringUtil.isNullOrEmpty(request.getParameter("fieldIDsListForFetchingGroupingData")) ? request.getParameter("fieldIDsListForFetchingGroupingData") : "";
            String fieldIDsArr[] = fieldIDsArrString.split(",");

            for (int i = 0; i < fieldIDsArr.length; i++) {

                KwlReturnObject fieldparamsObj = accountingHandlerDAOobj.getObject(FieldParams.class.getName(), fieldIDsArr[i].trim());
                fparams = (FieldParams) fieldparamsObj.getEntityList().get(0);

                JSONObject searchJobj = new JSONObject();

                Integer mod = fparams.getModuleid();
                searchJobj.put("column", fparams.getId());
                searchJobj.put("refdbname", "Col" + fparams.getColnum());
                searchJobj.put("xfield", "Col" + fparams.getColnum());
                searchJobj.put(Constants.iscustomcolumn, true);
                searchJobj.put("iscustomcolumndata", false);
                searchJobj.put("isfrmpmproduct", false);
                searchJobj.put("fieldtype", fparams.getFieldtype());
                searchJobj.put("searchText", "");

                searchJobj.put("columnheader", fparams.getFieldlabel());
                searchJobj.put("search", "");

                searchJobj.put(Constants.xtype, "select");
                searchJobj.put("combosearch", "");
                searchJobj.put("isinterval", false);
                searchJobj.put("interval", "");
                searchJobj.put("isbefore", "");
                searchJobj.put("isdefaultfield", false);
                searchJobj.put(Constants.moduleid, mod);
                searchJobj.put("isForProductMasterOnly", "");

                moduleWiseSarchMap.put(mod, searchJobj);

                kwlObj = accAccountDAOobj.getFieldComboDatabyFieldID(fparams.getId(), company.getCompanyID());
                if (kwlObj != null) {
                    fieldcombodataList = kwlObj.getEntityList();
                    fieldCombodataMapmoduleWise.put(mod, fieldcombodataList);
                }
            }
            JSONArray DataJarr = new JSONArray();

            Set<Integer> moduleSet = moduleWiseSarchMap.keySet();

            for (Object obj : fieldcombodataList) {
                invoiceCounOfDimensiont = 0;
                FieldComboData fcomboObj = (FieldComboData) obj;

                String fieldComboValueName = fcomboObj.getValue();//name of combo value like manager1,manager2 etc
                String fieldComboLabelName = fcomboObj.getField().getFieldlabel();

                amountdue1 = amountdue2 = amountdue3 = amountdue4 = amountdue5 = amountdue6 = amountdue7 = amountdue8 = amountdue9 = amountdue10 = amountdue11 = 0;
                amountdueinbase1 = amountdueinbase2 = amountdueinbase3 = amountdueinbase4 = amountdueinbase5 = amountdueinbase6 = amountdueinbase7 = amountdueinbase8 = amountdueinbase9 = amountdueinbase10 = amountdueinbase11 = 0;

                invoiceRequestParams.put("cntype", null);
                invoiceRequestParams.put("isAgedSummary", true);
                if (isAgedReceivables) {
                    invoiceRequestParams.put("isAgedReceivables", true);
                }
                int isgroupcomboDate = request.getParameter("groupcombo")!=null?Integer.parseInt(request.getParameter("groupcombo")):0;
                if ((isgroupcomboDate == Constants.AgedPayableBaseCurrency || isgroupcomboDate == Constants.AgedPayableOtherthanBaseCurrency) && isAgedReceivables) {//2==BaseCurrency,3=Other than base currency 
                    invoiceRequestParams.put("groupcombo", isgroupcomboDate);
                    invoiceRequestParams.put(Constants.globalCurrencyKey, sessionHandlerImpl.getCurrencyID(request));
                }
                JSONArray invjarr = new JSONArray();
                if (!Constants.isOptimized) {
                    invoiceRequestParams.put(Constants.Acc_Search_Json, getSearchJsonByModuleIDForGroupBy(moduleWiseSarchMap, fieldCombodataMapmoduleWise, fieldComboValueName, Constants.Acc_Invoice_ModuleId));
                    invoiceRequestParams.put(Constants.Filter_Criteria, Constants.Filter_Criteria);
                    invoiceRequestParams.put("dimensionvalue", fieldComboValueName);
                    invoiceRequestParams.put("dimensionname", fieldComboLabelName);
                    invjarr = getAgeingJson(invoiceRequestParams, StringUtil.convertRequestToJsonObject(request));
                }
                
                KwlReturnObject result = null;
                if (moduleSet.contains(Constants.Acc_Invoice_ModuleId)) {

                    invoiceRequestParams.put(Constants.Acc_Search_Json, getSearchJsonByModuleIDForGroupBy(moduleWiseSarchMap, fieldCombodataMapmoduleWise, fieldComboValueName, Constants.Acc_Invoice_ModuleId));
//                    invoiceRequestParams.put(Constants.Acc_Search_Json_Invoice, getSearchJsonByModuleIDForGroupBy(moduleWiseSarchMap, fieldCombodataMapmoduleWise, fieldComboValueName, Constants.Acc_Invoice_ModuleId));
                    invoiceRequestParams.put(Constants.Filter_Criteria, Constants.Filter_Criteria);

                    invoiceRequestParams.put(Constants.moduleid, Constants.Acc_Invoice_ModuleId);
                    result = accInvoiceDAOobj.getInvoicesMerged(invoiceRequestParams);
                    List list = result.getEntityList();
                    invoiceCount += list.size();
                    if (!list.isEmpty() || request.getParameter("filename") != null) {
                        invjarr = getInvoiceJsonForAgedReceivables(request, list, invjarr, invoiceRequestParams);
                        jsoninvoiceCount += invjarr.length();
                    }

                    JSONArray OBJArryInvoice = new JSONArray();
                    result = accInvoiceDAOobj.getOpeningBalanceInvoices(invoiceRequestParams);
                    if (result.getRecordTotalCount() > 0) {
                        OBJArryInvoice = AccInvoiceServiceHandler.getAgedOpeningBalanceInvoiceJson(invoiceRequestParams, result.getEntityList(), OBJArryInvoice, accCurrencyDAOobj, accInvoiceCommon, request, accountingHandlerDAOobj, accAccountDAOobj, fieldDataManagercntrl, accJournalEntryobj);
                        for (int i = 0; i < OBJArryInvoice.length(); i++) {
                            invjarr.put(OBJArryInvoice.get(i));
                        }
                    }
                }

                if (moduleSet.contains(Constants.Acc_Credit_Note_ModuleId)) {
                    invoiceRequestParams.put(Constants.Acc_Search_Json, getSearchJsonByModuleIDForGroupBy(moduleWiseSarchMap, fieldCombodataMapmoduleWise, fieldComboValueName, Constants.Acc_Credit_Note_ModuleId));
//                    invoiceRequestParams.put(Constants.Acc_Search_Json_Credit_Note, getSearchJsonByModuleIDForGroupBy(moduleWiseSarchMap, fieldCombodataMapmoduleWise, fieldComboValueName, Constants.Acc_Credit_Note_ModuleId));
//                    invoiceRequestParams.put(Constants.moduleid, Constants.Acc_Credit_Note_ModuleId);
                    invoiceRequestParams.put(Constants.Filter_Criteria, Constants.Filter_Criteria);

                    invoiceRequestParams.put(Constants.moduleid, Constants.Acc_Credit_Note_ModuleId);
                    JSONArray CreditNotejArr = new JSONArray();
                    result = accCreditNoteDAOobj.getCreditNoteMerged(invoiceRequestParams);
                    if (result.getRecordTotalCount() > 0) {
                        CreditNotejArr = AccInvoiceServiceHandler.getCreditNotesMergedJson(invoiceRequestParams, result.getEntityList(), CreditNotejArr, accountingHandlerDAOobj, authHandlerDAOObj, accCurrencyDAOobj, accPaymentDAOobj, request, accCreditNoteDAOobj, accAccountDAOobj, fieldDataManagercntrl, accJournalEntryobj);
                        for (int i = 0; i < CreditNotejArr.length(); i++) {
                            invjarr.put(CreditNotejArr.get(i));
                        }
                    }

                    JSONArray OBJArryCreditNote = new JSONArray();
                    result = accCreditNoteDAOobj.getOpeningBalanceCNs(invoiceRequestParams);
                    if (result.getRecordTotalCount() > 0) {
                        OBJArryCreditNote = AccInvoiceServiceHandler.getAgedOpeningBalanceCreditNoteJson(invoiceRequestParams, result.getEntityList(), OBJArryCreditNote, accCurrencyDAOobj, accPaymentDAOobj, request, accountingHandlerDAOobj, accCreditNoteDAOobj, accAccountDAOobj, fieldDataManagercntrl, accJournalEntryobj);
                        for (int i = 0; i < OBJArryCreditNote.length(); i++) {
                            invjarr.put(OBJArryCreditNote.get(i));
                        }
                    }

                }

                if (moduleSet.contains(Constants.Acc_Debit_Note_ModuleId)) {
                    invoiceRequestParams.put(Constants.Acc_Search_Json, getSearchJsonByModuleIDForGroupBy(moduleWiseSarchMap, fieldCombodataMapmoduleWise, fieldComboValueName, Constants.Acc_Debit_Note_ModuleId));
//                    invoiceRequestParams.put(Constants.Acc_Search_Json_Debit_Note, getSearchJsonByModuleIDForGroupBy(moduleWiseSarchMap, fieldCombodataMapmoduleWise, fieldComboValueName, Constants.Acc_Debit_Note_ModuleId));
                    invoiceRequestParams.put(Constants.Filter_Criteria, Constants.Filter_Criteria);

                    invoiceRequestParams.put(Constants.moduleid, Constants.Acc_Debit_Note_ModuleId);
                    invoiceRequestParams.put("cntype", 4);
                    JSONArray DebitNotejArr = new JSONArray();//This is used for getting DN gainst vendor and otherwise 
                    result = accDebitNoteobj.getDebitNoteMerged(invoiceRequestParams);
                    if (result.getRecordTotalCount() > 0) {
                        DebitNotejArr = AccInvoiceServiceHandler.getDebitNotesMergedJson(invoiceRequestParams, result.getEntityList(), DebitNotejArr, accountingHandlerDAOobj, authHandlerDAOObj, accCurrencyDAOobj, accReceiptDAOobj, request, accAccountDAOobj, fieldDataManagercntrl, accJournalEntryobj,accCreditNoteDAOobj);
                        for (int i = 0; i < DebitNotejArr.length(); i++) {
                            invjarr.put(DebitNotejArr.get(i));
                        }
                    }

                    JSONArray OBJArryDebitNote = new JSONArray();
                    result = accDebitNoteobj.getOpeningBalanceCustomerDNs(invoiceRequestParams);
                    if (result.getRecordTotalCount() > 0) {
                        OBJArryDebitNote = AccInvoiceServiceHandler.getAgedOpeningBalanceDebitNoteJson(invoiceRequestParams, result.getEntityList(), OBJArryDebitNote, accCurrencyDAOobj, accReceiptDAOobj, request, accountingHandlerDAOobj, accAccountDAOobj, fieldDataManagercntrl, accJournalEntryobj,accCreditNoteDAOobj);
                        for (int i = 0; i < OBJArryDebitNote.length(); i++) {
                            invjarr.put(OBJArryDebitNote.get(i));
                        }
                    }
                }
                
                if (moduleSet.contains(Constants.Acc_Receive_Payment_ModuleId)) {
                    invoiceRequestParams.put(Constants.Acc_Search_Json, getSearchJsonByModuleIDForGroupBy(moduleWiseSarchMap, fieldCombodataMapmoduleWise, fieldComboValueName, Constants.Acc_Receive_Payment_ModuleId));
//                    invoiceRequestParams.put(Constants.Acc_Search_Json_Receive_Payment, getSearchJsonByModuleIDForGroupBy(moduleWiseSarchMap, fieldCombodataMapmoduleWise, fieldComboValueName, Constants.Acc_Receive_Payment_ModuleId));
                    invoiceRequestParams.put(Constants.Filter_Criteria, Constants.Filter_Criteria);
                    invoiceRequestParams.put(Constants.moduleid, Constants.Acc_Receive_Payment_ModuleId);

                    JSONArray receivePaymentJArr = new JSONArray();
                    invoiceRequestParams.put("allAdvPayment", true); // needs only advance type record so that putted true
                    invoiceRequestParams.put("paymentWindowType", 1);//Receipt to Customer record
                    result = accReceiptDAOobj.getReceipts(invoiceRequestParams);
                    if (result.getRecordTotalCount() > 0) {
                        receivePaymentJArr = AccInvoiceServiceHandler.getReceiptsJson(invoiceRequestParams, result.getEntityList(), receivePaymentJArr, accountingHandlerDAOobj, authHandlerDAOObj, accCurrencyDAOobj, accReceiptDAOobj, request, accAccountDAOobj, fieldDataManagercntrl, accJournalEntryobj);
                        for (int i = 0; i < receivePaymentJArr.length(); i++) {
                            invjarr.put(receivePaymentJArr.get(i));
                        }
                    }
                    invoiceRequestParams.remove("allAdvPayment");
                    invoiceRequestParams.remove("paymentWindowType");

                    JSONArray OBJArryPayment = new JSONArray();
                    result = accReceiptDAOobj.getOpeningBalanceReceipts(invoiceRequestParams);
                    if (result.getRecordTotalCount() > 0) {
                        OBJArryPayment = AccInvoiceServiceHandler.getAgedOpeningBalanceReceiptJson(invoiceRequestParams, result.getEntityList(), OBJArryPayment, accCurrencyDAOobj, accReceiptDAOobj, request, accountingHandlerDAOobj, accAccountDAOobj, fieldDataManagercntrl, accJournalEntryobj);
                        for (int i = 0; i < OBJArryPayment.length(); i++) {
                            invjarr.put(OBJArryPayment.get(i));
                        }
                    }
                }
                if (moduleSet.contains(Constants.Acc_Make_Payment_ModuleId)) {
                    invoiceRequestParams.put(Constants.Acc_Search_Json, getSearchJsonByModuleIDForGroupBy(moduleWiseSarchMap, fieldCombodataMapmoduleWise, fieldComboValueName, Constants.Acc_Make_Payment_ModuleId));
//                    invoiceRequestParams.put(Constants.Acc_Search_Json_Make_Payment, getSearchJsonByModuleIDForGroupBy(moduleWiseSarchMap, fieldCombodataMapmoduleWise, fieldComboValueName, Constants.Acc_Make_Payment_ModuleId));
                    invoiceRequestParams.put(Constants.Filter_Criteria, Constants.Filter_Criteria);
                    invoiceRequestParams.put(Constants.moduleid, Constants.Acc_Make_Payment_ModuleId);
                    
                    JSONArray makePaymentJArr = new JSONArray();
                    invoiceRequestParams.put("allAdvPayment", true); // needs only refund type record so that putted true
                    invoiceRequestParams.put("paymentWindowType", 2);//Payment to Customer record
                    result = accVendorPaymentobj.getPayments(invoiceRequestParams);
                    if (result != null && result.getEntityList() != null && !result.getEntityList().isEmpty()) {
                        makePaymentJArr = accGoodsReceiptServiceHandler.getPaymentsJson(invoiceRequestParams, result.getEntityList(), makePaymentJArr, accCurrencyDAOobj, accountingHandlerDAOobj, accVendorPaymentobj);
                        for (int i = 0; i < makePaymentJArr.length(); i++) {
                            invjarr.put(makePaymentJArr.get(i));
                        }
                    }
                    invoiceRequestParams.remove("allAdvPayment");
                    invoiceRequestParams.remove("paymentWindowType");
                }
                if(!Constants.isOptimized){
                    invjarr = getAgeingJson(invoiceRequestParams,StringUtil.convertRequestToJsonObject(request));
                }
                invoiceCounOfDimensiont += invjarr.length();
                boolean isCN = false;
                boolean isRP = false;
                
                for (int i = 0; i < invjarr.length(); i++) {
                    JSONObject invobj = invjarr.getJSONObject(i);
                    invobj.put("dimensionvalue", fieldComboValueName);
                    invobj.put("dimensionname", fieldComboLabelName);

                    isCN = invobj.has("isCN") ? invobj.getBoolean("isCN") : false;
                    isRP = invobj.has("isRP") ? invobj.getBoolean("isRP") : false;
                    Date dueDate = new Date();
                    if (datefilter == 0 || datefilter == Constants.agedDueDate0to30Filter) {
                        dueDate = authHandler.getDateOnlyFormat().parse(invobj.getString(Constants.duedate));
                    } else {
                        dueDate = authHandler.getDateOnlyFormat().parse(invobj.getString("date"));
                    }
//                    double amountdue = invobj.getDouble("amountdue");
                    /**
                     * SDP-13193:- Hiding Total column from AP anf AR report,
                     * only Showing the Total In Base.
                     */
                    double amountdue = invobj.getDouble(InvoiceConstants.amountdueinbase);
                    double amountdueinbase = invobj.getDouble(InvoiceConstants.amountdueinbase);

                    boolean isopeningBalanceTransaction = invobj.optBoolean("isOpeningBalanceTransaction", false);

                    KwlReturnObject bAmt = null;
                    Date date = null;
                    if (!invobj.getString("date").equals("")) {
                        date = df.parse(invobj.getString("date"));
                    }
                    if (isCN || isRP) {
                        if (!isopeningBalanceTransaction) {
                            amountdueinbase = -amountdueinbase;
                            amountdue = -amountdue;
                            if (isGroupingOnDimensionInDetailedView && invoiceCounOfDimensiont > 0) {

                                invobj.put("amountdue", amountdue);//credit note and payment amount was not showing minus when search is performed on dimensions-so that i have added this code
                                invobj.put(InvoiceConstants.amountdueinbase, amountdueinbase);
                            }
                        }
                    }

                    if (isdistibutive) {
//                        if (startDate != null && dueDate.before(startDate)) {//In Aged Report amountdue goes in Accruade Balance for those transaction whose creation/due date is previous to Start date will goes into the accrued balance, likes opening balance 
//                            accruedbalanceinbase += amountdueinbase;
//                            accruedbalance += amountdue;
//                            accruedbalanceColumnTotal += amountdue;
//                            invobj.put(InvoiceConstants.ACCRUEDBALANCE, accruedbalance);
//                        } else 
                        if (dueDate.after(oneDayBeforeCal1.getTime())) {
                            if (dueDate.equals(cal1.getTime()) && (datefilter == Constants.agedDueDate0to30Filter || datefilter == Constants.agedInvoiceDate0to30Filter)) {
                                amountdueinbase2 += amountdueinbase;
                                amountdue2 += amountdue;
                                amountdue2ColumnTotal += amountdue;
                                invobj.put("amountdue2", amountdue2);
                            } else {
                                amountdueinbase1 += amountdueinbase;
                                amountdue1 += amountdue;
                                amountdue1ColumnTotal += amountdue;
                                invobj.put("amountdue1", amountdue1);//credit note and payment amount was not showing minus when search is performed on dimensions-so that i have added this code
                            }
                        } else if ((cal2.getTime().before(dueDate) || cal2.getTime().equals(dueDate)) && cal1.getTime().after(dueDate)) {
                            amountdueinbase2 += amountdueinbase;
                            amountdue2 += amountdue;
                            amountdue2ColumnTotal += amountdue;
                                invobj.put("amountdue2",amountdue2 );
                        } else if ((cal3.getTime().before(dueDate) || cal3.getTime().equals(dueDate)) && cal2.getTime().after(dueDate)) {
                            amountdueinbase3 += amountdueinbase;
                            amountdue3 += amountdue;
                            amountdue3ColumnTotal += amountdue;
                                invobj.put("amountdue3",amountdue3 );
                        } else if ((cal4.getTime().before(dueDate) || cal4.getTime().equals(dueDate)) && cal3.getTime().after(dueDate)) {
                            amountdueinbase4 += amountdueinbase;
                            amountdue4 += amountdue;
                            amountdue4ColumnTotal += amountdue;
                                invobj.put("amountdue4",amountdue4 );
                        } else if ((cal5.getTime().before(dueDate) || cal5.getTime().equals(dueDate)) && cal4.getTime().after(dueDate)) {
                            amountdueinbase5 += amountdueinbase;
                            amountdue5 += amountdue;
                            amountdue5ColumnTotal += amountdue;
                                invobj.put("amountdue5", amountdue5);
                        } else if ((cal6.getTime().before(dueDate) || cal6.getTime().equals(dueDate)) && cal5.getTime().after(dueDate)) {
                            amountdueinbase6 += amountdueinbase;
                            amountdue6 += amountdue;
                            amountdue6ColumnTotal += amountdue;
                                invobj.put("amountdue6",amountdue6 );
                        } else if ((cal7.getTime().before(dueDate) || cal7.getTime().equals(dueDate)) && cal6.getTime().after(dueDate)) {
                            amountdueinbase7 += amountdueinbase;
                            amountdue7 += amountdue;
                            amountdue7ColumnTotal += amountdue;
                                invobj.put("amountdue7", amountdue7);
                        } else if ((cal8.getTime().before(dueDate) || cal8.getTime().equals(dueDate)) && cal7.getTime().after(dueDate)) {
                            amountdueinbase8 += amountdueinbase;
                            amountdue8 += amountdue;
                            amountdue8ColumnTotal += amountdue;
                                invobj.put("amountdue8", amountdue8);
                        } else if ((cal9.getTime().before(dueDate) || cal9.getTime().equals(dueDate)) && cal8.getTime().after(dueDate)) {
                            amountdueinbase9 += amountdueinbase;
                            amountdue9 += amountdue;
                            amountdue9ColumnTotal += amountdue;
                                invobj.put("amountdue9", amountdue9);
                        } else if ((cal10.getTime().before(dueDate) || cal10.getTime().equals(dueDate)) && cal10.getTime().after(dueDate)) {
                            amountdueinbase10 += amountdueinbase;
                            amountdue10 += amountdue;
                            amountdue10ColumnTotal += amountdue;
                                invobj.put("amountdue10", amountdue10);
                        } else {
                            amountdueinbase11 += amountdueinbase;
                            amountdue11 += amountdue;
                            amountdue11ColumnTotal += amountdue;
                                invobj.put("amountdue11",amountdue11);
                        }
                        
                        
                        switch(noOfInterval){
                            case 2:
                                amountdue3 += amountdue4 + amountdue5 + amountdue6 + amountdue7 + amountdue8 + amountdue9 + amountdue10 + amountdue11;
                                amountdue4 = amountdue5 = amountdue6 = amountdue7 = amountdue8 = amountdue9 = amountdue10 = amountdue11 = 0;
                                amountdueinbase3 += amountdueinbase4 + amountdueinbase5 + amountdueinbase6 + amountdueinbase7 + amountdueinbase8 + amountdueinbase9 + amountdueinbase10 + amountdueinbase11;
                                amountdueinbase4 = amountdueinbase5 = amountdueinbase6 = amountdueinbase7 = amountdueinbase8 = amountdueinbase9 = amountdueinbase10 = amountdueinbase11 = 0;
                                amountdue3ColumnTotal += amountdue4ColumnTotal + amountdue5ColumnTotal + amountdue6ColumnTotal + amountdue7ColumnTotal + amountdue8ColumnTotal + amountdue9ColumnTotal + amountdue10ColumnTotal + amountdue11ColumnTotal;
                                amountdue4ColumnTotal = amountdue5ColumnTotal = amountdue6ColumnTotal = amountdue7ColumnTotal = amountdue8ColumnTotal = amountdue9ColumnTotal = amountdue10ColumnTotal = amountdue11ColumnTotal = 0;
                                break;
                            case 3:
                                amountdue4 += amountdue5 + amountdue6 + amountdue7 + amountdue8 + amountdue9 + amountdue10 + amountdue11;
                                amountdue5 = amountdue6 = amountdue7 = amountdue8 = amountdue9 = amountdue10 = amountdue11 = 0;
                                amountdueinbase4 += amountdueinbase5 + amountdueinbase6 + amountdueinbase7 + amountdueinbase8 + amountdueinbase9 + amountdueinbase10 + amountdueinbase11;
                                amountdueinbase5 = amountdueinbase6 = amountdueinbase7 = amountdueinbase8 = amountdueinbase9 = amountdueinbase10 = amountdueinbase11 = 0;
                                amountdue4ColumnTotal += amountdue5ColumnTotal + amountdue6ColumnTotal + amountdue7ColumnTotal + amountdue8ColumnTotal + amountdue9ColumnTotal + amountdue10ColumnTotal + amountdue11ColumnTotal;
                                amountdue5ColumnTotal = amountdue6ColumnTotal = amountdue7ColumnTotal = amountdue8ColumnTotal = amountdue9ColumnTotal = amountdue10ColumnTotal = amountdue11ColumnTotal = 0;
                                break;
                            case 4:
                                amountdue5 += amountdue6 + amountdue7 + amountdue8 + amountdue9 + amountdue10 + amountdue11;
                                amountdue6 = amountdue7 = amountdue8 = amountdue9 = amountdue10 = amountdue11 = 0;
                                amountdueinbase5 += amountdueinbase6 + amountdueinbase7 + amountdueinbase8 + amountdueinbase9 + amountdueinbase10 + amountdueinbase11;
                                amountdueinbase6 = amountdueinbase7 = amountdueinbase8 = amountdueinbase9 = amountdueinbase10 = amountdueinbase11 = 0;
                                amountdue5ColumnTotal += amountdue6ColumnTotal + amountdue7ColumnTotal + amountdue8ColumnTotal + amountdue9ColumnTotal + amountdue10ColumnTotal + amountdue11ColumnTotal;
                                amountdue6ColumnTotal = amountdue7ColumnTotal = amountdue8ColumnTotal = amountdue9ColumnTotal = amountdue10ColumnTotal = amountdue11ColumnTotal = 0;
                                break;
                            case 5:
                                amountdue6 += amountdue7 + amountdue8 + amountdue9 + amountdue10 + amountdue11;
                                amountdue7 = amountdue8 = amountdue9 = amountdue10 = amountdue11 = 0;
                                amountdueinbase6 += amountdueinbase7 + amountdueinbase8 + amountdueinbase9 + amountdueinbase10 + amountdueinbase11;
                                amountdueinbase7 = amountdueinbase8 = amountdueinbase9 = amountdueinbase10 = amountdueinbase11 = 0;
                                amountdue6ColumnTotal += amountdue7ColumnTotal + amountdue8ColumnTotal + amountdue9ColumnTotal + amountdue10ColumnTotal + amountdue11ColumnTotal;
                                amountdue7ColumnTotal = amountdue8ColumnTotal = amountdue9ColumnTotal = amountdue10ColumnTotal = amountdue11ColumnTotal = 0;
                                break;
                            case 6:
                                amountdue7 += amountdue8 + amountdue9 + amountdue10 + amountdue11;
                                amountdue8 = amountdue9 = amountdue10 = amountdue11 = 0;
                                amountdueinbase7 += amountdueinbase8 + amountdueinbase9 + amountdueinbase10 + amountdueinbase11;
                                amountdueinbase8 = amountdueinbase9 = amountdueinbase10 = amountdueinbase11 = 0;
                                amountdue7ColumnTotal += amountdue8ColumnTotal + amountdue9ColumnTotal + amountdue10ColumnTotal + amountdue11ColumnTotal;
                                amountdue8ColumnTotal = amountdue9ColumnTotal = amountdue10ColumnTotal = amountdue11ColumnTotal = 0;
                                break;
                            case 7:
                                amountdue8 += amountdue9 + amountdue10 + amountdue11;
                                amountdue9 = amountdue10 = amountdue11 = 0;
                                amountdueinbase8 += amountdueinbase9 + amountdueinbase10 + amountdueinbase11;
                                amountdueinbase9 = amountdueinbase10 = amountdueinbase11 = 0;
                                amountdue8ColumnTotal += amountdue9ColumnTotal + amountdue10ColumnTotal + amountdue11ColumnTotal;
                                amountdue9ColumnTotal = amountdue10ColumnTotal = amountdue11ColumnTotal = 0;
                                break;
                            case 8:
                                amountdue9 += amountdue10 + amountdue11;
                                amountdue10 = amountdue11 = 0;
                                amountdueinbase9 += amountdueinbase10 + amountdueinbase11;
                                amountdueinbase10 = amountdueinbase11 = 0;
                                amountdue9ColumnTotal += amountdue10ColumnTotal + amountdue11ColumnTotal;
                                amountdue10ColumnTotal = amountdue11ColumnTotal = 0;
                                break;
                            case 9:
                                amountdue10 += amountdue11;
                                amountdue11 = 0;
                                amountdueinbase10 += amountdueinbase11;
                                amountdueinbase11 = 0;
                                amountdue10ColumnTotal += amountdue11ColumnTotal;
                                amountdue11ColumnTotal = 0;
                                break;
                        }
                    } else {
//                        if (startDate != null && dueDate.before(startDate)) {//In Aged Report amountdue goes in Accruade Balance for those transaction whose creation/due date is previous to Start date will goes into the accrued balance, likes opening balance 
//                            accruedbalanceinbase += amountdueinbase;
//                            accruedbalance += amountdue;
//                            accruedbalanceColumnTotal += amountdue;
//                        } else 
                        if (dueDate.after(oneDayBeforeCal1.getTime()) && (dueDate.before(cal1.getTime()) || dueDate.equals(cal1.getTime()))) {
                            amountdueinbase1 += amountdueinbase;
                            amountdue1 += amountdue;
                            amountdue1ColumnTotal += amountdue;
                        } else if (dueDate.after(cal2.getTime()) || dueDate.equals(cal2.getTime())) {
                            amountdueinbase2 += amountdueinbase;
                            amountdue2 += amountdue;
                            amountdue2ColumnTotal += amountdue;
                        } else if (dueDate.after(cal3.getTime()) || dueDate.equals(cal3.getTime())) {
                            amountdueinbase3 += amountdueinbase;
                            amountdue3 += amountdue;
                            amountdue3ColumnTotal += amountdue;
                        } else {
                            amountdueinbase4 += amountdueinbase;
                            amountdue4 += amountdue;
                            amountdue4ColumnTotal += amountdue;
                        }
                    }
                    
                    DataJarr.put(invobj);//this dataArraj is used for detailview
                }
                if (isGroupingOnDimensionInDetailedView && invoiceCounOfDimensiont > 0) {
                    //if grouping is performed on dimesion in detail view then calculate total and totalinbase to show as a last record in the grid
                    totalcolumnSum += Double.valueOf(authHandler.formattedAmount((amountdue1 + amountdue2 + amountdue3 + amountdue4 + amountdue5 + amountdue6 + amountdue7 + amountdue8), companyid));
                    totalInBasecolumnSum += Double.valueOf(authHandler.formattedAmount((amountdueinbase1 + amountdueinbase2 + amountdueinbase3 + amountdueinbase4 + amountdueinbase5 + amountdueinbase6 + amountdueinbase7 + amountdueinbase8), companyid));
                }

                if (!isGroupingOnDimensionInDetailedView && invoiceCounOfDimensiont > 0) {
                    jObj = new JSONObject();
//                        //if grouping is performed on dimesion in detail view then there is no need to execute this block 
                    jObj.put("dimensionvalue", fieldComboValueName);
                    jObj.put("dimensionname", fieldComboLabelName);
                    jObj.put("amountdue1", Double.valueOf(authHandler.formattedAmount(amountdue1, companyid)));
                    jObj.put("amountdue2", Double.valueOf(authHandler.formattedAmount(amountdue2, companyid)));
                    jObj.put("amountdue3", Double.valueOf(authHandler.formattedAmount(amountdue3, companyid)));
                    jObj.put("amountdue4", Double.valueOf(authHandler.formattedAmount(amountdue4, companyid)));
                    jObj.put("amountdue5", Double.valueOf(authHandler.formattedAmount(amountdue5, companyid)));
                    jObj.put("amountdue6", Double.valueOf(authHandler.formattedAmount(amountdue6, companyid)));
                    jObj.put("amountdue7", Double.valueOf(authHandler.formattedAmount(amountdue7, companyid)));
                    jObj.put("amountdue8", Double.valueOf(authHandler.formattedAmount(amountdue8, companyid)));
                    jObj.put("amountdue9", Double.valueOf(authHandler.formattedAmount(amountdue9, companyid)));
                    jObj.put("amountdue10", Double.valueOf(authHandler.formattedAmount(amountdue10, companyid)));
                    jObj.put("amountdue11", Double.valueOf(authHandler.formattedAmount(amountdue11, companyid)));
//                    jObj.put(InvoiceConstants.ACCRUEDBALANCE, Double.valueOf(authHandler.formattedAmount(accruedbalance, companyid)));

                    jObj.put("amountdueinbase1", Double.valueOf(authHandler.formattedAmount(amountdueinbase1, companyid)));
                    jObj.put("amountdueinbase2", Double.valueOf(authHandler.formattedAmount(amountdueinbase2, companyid)));
                    jObj.put("amountdueinbase3", Double.valueOf(authHandler.formattedAmount(amountdueinbase3, companyid)));
                    jObj.put("amountdueinbase4", Double.valueOf(authHandler.formattedAmount(amountdueinbase4, companyid)));
                    jObj.put("amountdueinbase5", Double.valueOf(authHandler.formattedAmount(amountdueinbase5, companyid)));
                    jObj.put("amountdueinbase6", Double.valueOf(authHandler.formattedAmount(amountdueinbase6, companyid)));
                    jObj.put("amountdueinbase7", Double.valueOf(authHandler.formattedAmount(amountdueinbase7, companyid)));
                    jObj.put("amountdueinbase8", Double.valueOf(authHandler.formattedAmount(amountdueinbase8, companyid)));
                    jObj.put("amountdueinbase9", Double.valueOf(authHandler.formattedAmount(amountdueinbase9, companyid)));
                    jObj.put("amountdueinbase10", Double.valueOf(authHandler.formattedAmount(amountdueinbase10, companyid)));
                    jObj.put("amountdueinbase11", Double.valueOf(authHandler.formattedAmount(amountdueinbase11, companyid)));
//                    jObj.put("amountdueinbase8", Double.valueOf(authHandler.formattedAmount(accruedbalanceinbase, companyid)));
                    jObj.put(InvoiceConstants.currencysymbol, company.getCurrency().getSymbol());
                    jObj.put(Constants.currencyKey, company.getCurrency().getCurrencyID());
                    jObj.put(InvoiceConstants.currencyname, company.getCurrency().getName());
                    double amountdue = Double.valueOf(authHandler.formattedAmount((amountdue1 + amountdue2 + amountdue3 + amountdue4 + amountdue5 + amountdue6 + amountdue7 + amountdue8), companyid));
                    jObj.put("total", amountdue);
                    double amountdueinbase = Double.valueOf(authHandler.formattedAmount((amountdueinbase1 + amountdueinbase2 + amountdueinbase3 + amountdueinbase4 + amountdueinbase5 + amountdueinbase6 + amountdueinbase7 + amountdueinbase8), companyid));
                    jObj.put("totalinbase", amountdueinbase);
                    totalinbase += amountdueinbase;
                    totalcolumnSum += amountdue;
                    totalInBasecolumnSum += amountdueinbase;
                    jArr.put(jObj);
                }

            }// for loop of dimensions end here 

            JSONObject totalRowjObj = new JSONObject();
            totalRowjObj.put("dimensionvalue", "Grand Total");
            if (isGroupingOnDimensionInDetailedView) {
                totalRowjObj.put(InvoiceConstants.personid, "Grand Total");
                totalRowjObj.put("type", "Grand Total");
            }
            totalRowjObj.put("amountdue1", Double.valueOf(authHandler.formattedAmount(amountdue1ColumnTotal, companyid)));
            totalRowjObj.put("amountdue2", Double.valueOf(authHandler.formattedAmount(amountdue2ColumnTotal, companyid)));
            totalRowjObj.put("amountdue3", Double.valueOf(authHandler.formattedAmount(amountdue3ColumnTotal, companyid)));
            totalRowjObj.put("amountdue4", Double.valueOf(authHandler.formattedAmount(amountdue4ColumnTotal, companyid)));
            totalRowjObj.put("amountdue5", Double.valueOf(authHandler.formattedAmount(amountdue5ColumnTotal, companyid)));
            totalRowjObj.put("amountdue6", Double.valueOf(authHandler.formattedAmount(amountdue6ColumnTotal, companyid)));
            totalRowjObj.put("amountdue7", Double.valueOf(authHandler.formattedAmount(amountdue7ColumnTotal, companyid)));
            totalRowjObj.put("amountdue8", Double.valueOf(authHandler.formattedAmount(amountdue8ColumnTotal, companyid)));
            totalRowjObj.put("amountdue9", Double.valueOf(authHandler.formattedAmount(amountdue9ColumnTotal, companyid)));
            totalRowjObj.put("amountdue10", Double.valueOf(authHandler.formattedAmount(amountdue10ColumnTotal, companyid)));
            totalRowjObj.put("amountdue11", Double.valueOf(authHandler.formattedAmount(amountdue11ColumnTotal, companyid)));
//            totalRowjObj.put(InvoiceConstants.ACCRUEDBALANCE, Double.valueOf(authHandler.formattedAmount(accruedbalanceColumnTotal, companyid)));
            totalRowjObj.put(InvoiceConstants.currencyname, company.getCurrency().getName());
            totalRowjObj.put("total", totalcolumnSum);

            if (isGroupingOnDimensionInDetailedView) {
                totalRowjObj.put(InvoiceConstants.amountdueinbase, totalInBasecolumnSum);
            } else {
                totalRowjObj.put("totalinbase", totalInBasecolumnSum);
            }
            if (!isGroupingOnDimensionInDetailedView) {
                jArr.put(totalRowjObj);
            } else {
                DataJarr.put(totalRowjObj);
            }
            mainJobj.put("DataJobj", DataJarr);

            if (exportCustomerAged) { //  Used for export CSV
                JSONObject jtotal = new JSONObject();

                jtotal.put("total", "Total");
                jtotal.put("totalinbase", totalinbase);
                jArr.put(jtotal);
            }
            mainJobj.put("data", jArr);
            System.out.println("Invoice Count= " + invoiceCount);
            System.out.println("json invoice Count = " + jsoninvoiceCount);
            mainJobj.put("totalcount", jArr.length());
        } catch (ServiceException ex) {
            Logger.getLogger(AccInvoiceServiceImpl.class.getName()).log(Level.SEVERE, null, ex);
            throw ex;
        }
        return mainJobj;

    }
   
    public JSONObject getSearchJsonByModuleIDForGroupBy(Map<Integer, Object> moduleWiseSarchMap, Map<Integer, List> fieldCombodataMapmoduleWise, String fieldComboValueName, Integer moduleid) throws ServiceException {
        /*
         This method is written to preapare searchjson modulewise
         */

        JSONArray SearchArray = new JSONArray();
        JSONObject SearchJobj = new JSONObject();
        JSONObject FinalSearchJobj = new JSONObject();
        List fieldcombodataList = new ArrayList();
        try {

            SearchJobj = (JSONObject) moduleWiseSarchMap.get(moduleid);
            fieldcombodataList = (List) fieldCombodataMapmoduleWise.get(moduleid);

            for (Object combodata : fieldcombodataList) {

                FieldComboData ComboObj = (FieldComboData) combodata;
                if (fieldComboValueName.equals(ComboObj.getValue())) {

                    SearchJobj.put("searchText", ComboObj.getId());
                    SearchJobj.put("search", ComboObj.getId());
                    SearchJobj.put("combosearch", ComboObj.getValue());
                    break;
                }
            }

            SearchArray.put(SearchJobj);
            FinalSearchJobj.put("root", SearchArray);
        } catch (Exception ex) {
            throw ServiceException.FAILURE(successView, ex);
        }
        return FinalSearchJobj;
    }
    
    public Map<String, List<Object[]>> getBatchDetailsMap(Map<String,Object> requestParams) {
        Map<String, List<Object[]>> baMap = new HashMap<>();
        try {
            boolean linkingFlag=false;
            if(requestParams.containsKey("linkingFlag")){
                linkingFlag=Boolean.parseBoolean(requestParams.get("linkingFlag").toString());
            }
            boolean isEdit=false;
            if(requestParams.containsKey("isEdit")){
                isEdit=Boolean.parseBoolean(requestParams.get("isEdit").toString());
            }
            boolean isConsignment=false;
            if(requestParams.containsKey(Constants.isConsignment)){
                isConsignment=Boolean.parseBoolean(requestParams.get(Constants.isConsignment).toString());
            }
            String moduleID="";
            if(requestParams.containsKey("moduleID")){
                moduleID=requestParams.get("moduleID").toString();
            }
            String documentIds="";
            if (requestParams.containsKey("documentIds")) {
                documentIds = requestParams.get("documentIds").toString();
            }    
            KwlReturnObject kmsg = null;
            if(isConsignment && linkingFlag){
                kmsg= accCommonTablesDAO.getConsignmentBatchSerialDetails("", true, linkingFlag, moduleID, false, isEdit, documentIds);
            }else{
                kmsg= accCommonTablesDAO.getBatchSerialDetails("", true, linkingFlag, moduleID, false, isEdit, documentIds);
            }
                    
            List<Object[]> batchserialdetails = kmsg.getEntityList();
            for (Object[] objects : batchserialdetails) {
                if (objects.length >= 20 && objects[20] != null) {
                    if(baMap.containsKey(objects[20].toString())){
                        List<Object[]> details =baMap.get(objects[20].toString());
                        details.add(objects);
                        baMap.put(objects[20].toString(), details);
                    }else{
                        List<Object[]> details = new ArrayList<>();
                        details.add(objects);
                        baMap.put(objects[20].toString(), details);
                    }
                    
                }
            }
        } catch (Exception ex) {
            Logger.getLogger(AccInvoiceServiceImpl.class.getName()).log(Level.INFO, ex.getMessage());
        }
        return baMap;
    }
    private String getNewBatchJson(Map<String, Object> requestParams, Product product, String documentid, HashMap<String, Integer> fieldMap, Map<String, List<Object[]>> baMap, HashMap<String, String> replaceFieldMap1, HashMap<String, String> customFieldMap, HashMap<String, String> customDateFieldMap) throws ServiceException, SessionExpiredException, JSONException {
        JSONArray jSONArray = new JSONArray();
        try {
            DateFormat df = (DateFormat) requestParams.get(Constants.df);
            KwlReturnObject kmsg = null;
            boolean linkingFlag = false;
            boolean isDONotLinkedtoSI = true;
            if (requestParams.containsKey("isDONotLinkedtoSI") && !StringUtil.isNullObject(requestParams.get("isDONotLinkedtoSI"))) {
                isDONotLinkedtoSI = Boolean.parseBoolean(requestParams.get("isDONotLinkedtoSI").toString());
            }
            if (requestParams.containsKey("linkingFlag")) {
                linkingFlag = Boolean.parseBoolean(requestParams.get("linkingFlag").toString());
            }
            boolean isEdit = false;
            if (requestParams.containsKey("isEdit")) {
                isEdit = Boolean.parseBoolean(requestParams.get("isEdit").toString());
            }
                        boolean readOnly = false;
            if (requestParams.containsKey("readOnly")) {
                readOnly = Boolean.parseBoolean(requestParams.get("readOnly").toString());
            }
            boolean isConsignment = false;
            if (requestParams.containsKey(Constants.isConsignment)) {
                isConsignment = Boolean.parseBoolean(requestParams.get(Constants.isConsignment).toString());
            }
            boolean srflag = false;
            if (requestParams.containsKey("srflag")) {
                srflag = Boolean.parseBoolean(requestParams.get("srflag").toString());
            }
            String moduleID = "";
            if (requestParams.containsKey("moduleID")) {
                moduleID = requestParams.get("moduleID").toString();
            }
            String companyid = requestParams.get(Constants.companyKey).toString();
            boolean isBatch = false;
            List<Object[]> batchserialdetails = null;
            if (!product.isIsBatchForProduct() && !product.isIslocationforproduct() && !product.isIswarehouseforproduct() && !product.isIsrowforproduct() && !product.isIsrackforproduct() && !product.isIsbinforproduct() && product.isIsSerialForProduct()) {
                kmsg = accCommonTablesDAO.getOnlySerialDetails(documentid, linkingFlag, moduleID, isConsignment, isEdit);
                batchserialdetails = kmsg.getEntityList();
            } else {
                isBatch = true;
                if (!product.isIsSerialForProduct() && baMap.containsKey(documentid)) {
                    batchserialdetails = baMap.get(documentid);
                } else {
                     if(isConsignment && linkingFlag){
                         kmsg = accCommonTablesDAO.getConsignmentBatchSerialDetails(documentid, !product.isIsSerialForProduct(), linkingFlag, moduleID, isConsignment, isEdit, "");
                     }else{
                         kmsg = accCommonTablesDAO.getBatchSerialDetails(documentid, !product.isIsSerialForProduct(), linkingFlag, moduleID, isConsignment, isEdit, "");
                     }
                    batchserialdetails = kmsg.getEntityList();
                }
            }
            double ActbatchQty = 1;
            double batchQty = 0;
            double avlquantity = 0;
            if (batchserialdetails != null) {
                for (Object[] objArr : batchserialdetails) {
                    JSONObject obj = new JSONObject();
                    obj.put("id", objArr[0] != null ? (String) objArr[0] : "");
                    obj.put("batch", objArr[1] != null ? (String) objArr[1] : "");
                    obj.put("batchname", objArr[1] != null ? (String) objArr[1] : "");
                    obj.put("location", objArr[2] != null ? (String) objArr[2] : "");
                    obj.put("warehouse", objArr[3] != null ? (String) objArr[3] : "");
                    if (isBatch) {
                        obj.put("row", objArr[15] != null ? (String) objArr[15] : "");
                        obj.put("rack", objArr[16] != null ? (String) objArr[16] : "");
                        obj.put("bin", objArr[17] != null ? (String) objArr[17] : "");
                    }
                    obj.put("wastageQuantityType", objArr[18] != null ? objArr[18] : "");
                    obj.put("wastageQuantity", objArr[19] != null ? objArr[19] : "");
                   
                    obj.put("stocktype", product.isIsSerialForProduct() ? (objArr[22] != null ? objArr[22] : "") : (objArr[21] != null ? objArr[21] : ""));
                    String stocktype = "" + (product.isIsSerialForProduct()?(objArr[22] != null ? objArr[22] : ""):(objArr[21] != null ? objArr[21] : ""));
                    
                    if ((product.isIsBatchForProduct() || product.isIslocationforproduct() || product.isIswarehouseforproduct() || product.isIsrowforproduct() || product.isIsrackforproduct() || product.isIsbinforproduct()) && product.isIsSerialForProduct()) {
                        int stkType=1;
                        if(!StringUtil.isNullOrEmpty(stocktype)){
                            stkType=Integer.parseInt(stocktype);
                            ActbatchQty = accCommonTablesDAO.getBatchQuantity(documentid, (String) objArr[0],stkType);
                        }else{
                            ActbatchQty = accCommonTablesDAO.getBatchQuantity(documentid, (String) objArr[0]);
                        }
                        
                        if (batchQty == 0) {
                            batchQty = ActbatchQty;
                        }
                        if (batchQty == ActbatchQty) {
                            obj.put("isreadyonly", false);
                            obj.put("quantity", ActbatchQty);
                        } else {
                            obj.put("isreadyonly", true);
                            obj.put("quantity", "");
                        }
                    } else {
                        obj.put("isreadyonly", false);
                        obj.put("quantity", ActbatchQty);
                    }
                    if (!product.isIsBatchForProduct() && !product.isIslocationforproduct() && !product.isIswarehouseforproduct() && !product.isIsrowforproduct() && !product.isIsrackforproduct() && !product.isIsbinforproduct() && product.isIsSerialForProduct()) {
                        obj.put("mfgdate", "");
                        obj.put("expdate", "");
                    } else {
                        obj.put("mfgdate", objArr[4] != null ? df.format(objArr[4]) : "");
                        obj.put("expdate",product.isIsSerialForProduct()? objArr[10] != null ? df.format(objArr[10]) : "":objArr[5] != null ? df.format(objArr[5]) : "");
                    }
                    if ((product.isIsBatchForProduct() || product.isIslocationforproduct() || product.isIswarehouseforproduct() || product.isIsrowforproduct() || product.isIsrackforproduct() || product.isIsbinforproduct()) && !product.isIsSerialForProduct()) {
                        obj.put("quantity", objArr[11] != null ? objArr[11] : "");
                    }
                    obj.put("balance", 0);
                    obj.put("asset", "");
                    obj.put("serialnoid", objArr[7] != null ? (String) objArr[7] : "");
                    obj.put("serialno", objArr[8] != null ? (String) objArr[8] : "");
                    obj.put("purchasebatchid", objArr[0] != null ? (String) objArr[0] : "");
                    obj.put("purchaseserialid", objArr[7] != null ? (String) objArr[7] : "");
                    obj.put("expstart", (objArr[9] != null && !objArr[9].toString().equalsIgnoreCase("")) ? df.format(objArr[9]) : "");
                    obj.put("expend", (objArr[10] != null && !objArr[10].toString().equalsIgnoreCase("")) ? df.format(objArr[10]) : "");
                    obj.put("skufield", objArr[13] != null ? objArr[13] : "");
                    obj.put("documentid", documentid != null ? documentid : "");
                    obj.put("productid", product != null ? product.getID() : "");
                    String locationid = objArr[2] != null ? (String) objArr[2] : "";
                    String warehouseid = objArr[3] != null ? (String) objArr[3] : "";
                    String purchasebatchid = objArr[0] != null ? (String) objArr[0] : "";
                    String productid = product != null ? product.getID() : "";
                    String tempModuleId=moduleID;
                    if(!isConsignment && srflag){
                        tempModuleId=String.valueOf(Constants.Acc_Sales_Return_ModuleId);
                    }
                    avlquantity = getNewBatchRemainingQuantity(locationid, warehouseid, companyid, productid, purchasebatchid, tempModuleId, isEdit, documentid,stocktype, readOnly);
                    obj.put("avlquantity", avlquantity);
                    HashMap<String,Object> hashMap=new HashMap<String, Object>();
                    hashMap.put("invoiceID", objArr[0]);
                    hashMap.put(Constants.companyKey,product.getCompany().getCompanyID());
                    /**
                     * Get document count attached to batch  and attachment id's
                     */
                    obj.put("attachment", 0);
                    obj.put("attachmentids", "");
                    KwlReturnObject object = accMasterItemsDAOobj.getBatchDocuments(hashMap);
                    if (object.getEntityList() != null && object.getEntityList().size()>0) {
                        obj.put("attachment", object.getEntityList().size());
                        List<Object[]> attachmentDetails = object.getEntityList();
                        String docids="";
                        for (Object[] attachmentArray : attachmentDetails) {
                            docids = docids + attachmentArray[3] + ",";
                        }
                        if (!StringUtil.isNullOrEmpty(docids)) {
                            docids = docids.substring(0, docids.length() - 1);
                        }
                        obj.put("attachmentids", docids);
                    }
                  if (linkingFlag && !isEdit) { //For geting only unused Serial batch details in DO 
                        if (product.isIsSerialForProduct() && objArr[7] != null ) {
                            KwlReturnObject result1 = accountingHandlerDAOobj.getObject(NewBatchSerial.class.getName(), objArr[7].toString());
                            NewBatchSerial newBatchSerial = (NewBatchSerial) result1.getEntityList().get(0);
                            if (newBatchSerial != null && newBatchSerial.getQuantitydue() == 1  && !isConsignment &&  newBatchSerial.getConsignquantity() == 0  && isDONotLinkedtoSI) { //changing 1 after discussing with Deepak
                                //                    batchQty--;
                                continue;
                            }else if(newBatchSerial != null && newBatchSerial.getQuantitydue() == 0  && isConsignment){
                                 continue;
                            }
                        } else if (product.isIsBatchForProduct() && !product.isIsSerialForProduct() && objArr[0] != null) {
                            KwlReturnObject result1 = accountingHandlerDAOobj.getObject(NewProductBatch.class.getName(), objArr[0].toString());
                            NewProductBatch newProductBatch = (NewProductBatch) result1.getEntityList().get(0);
                            if (isConsignment) {
                                if (newProductBatch != null && newProductBatch.getQuantitydue() == 0 && !isConsignment && newProductBatch.getConsignquantity() == 0) {
                                    continue;
                                } else if (newProductBatch != null && newProductBatch.getQuantitydue() == 0 && isConsignment) {
                                    continue;
                                }
                            }
                        }
                    }
                    if (objArr[14] != null && !objArr[14].toString().equalsIgnoreCase("")) {
                        KwlReturnObject result1 = accountingHandlerDAOobj.getObject(SerialDocumentMapping.class.getName(), objArr[14].toString());
                        SerialDocumentMapping sdm = (SerialDocumentMapping) result1.getEntityList().get(0);
                        Map<String, Object> variableMap = new HashMap<String, Object>();
                        SerialCustomData serialCustomData = (SerialCustomData) sdm.getSerialCustomData();
                        HashMap<String, String> replaceFieldMap = new HashMap<String, String>();
                        AccountingManager.setCustomColumnValues(serialCustomData, fieldMap, replaceFieldMap, variableMap);
                        DateFormat defaultDateFormat=new SimpleDateFormat(Constants.MMMMdyyyy);
                        Date dateFromDB=null;
                        for (Map.Entry<String, Object> varEntry : variableMap.entrySet()) {
                            String coldata = varEntry.getValue().toString();
                            String valueForReport = "";
                            if (customFieldMap.containsKey(varEntry.getKey()) && coldata != null) {
                                try {
                                    String[] valueData = coldata.split(",");
                                    for (String value : valueData) {
                                        FieldComboData fieldComboData = (FieldComboData) kwlCommonTablesDAOObj.getClassObject(FieldComboData.class.getName(), value);
                                        if (fieldComboData != null) {
                                            valueForReport += value + ",";
                                        }
                                    }
                                    if (valueForReport.length() > 1) {
                                        valueForReport = valueForReport.substring(0, valueForReport.length() - 1);
                                    }
                                    obj.put(varEntry.getKey(), valueForReport);//fieldComboData.getValue()!=null ?fieldComboData.getValue():"");
                                } catch (Exception ex) {
                                    obj.put(varEntry.getKey(), coldata);
                                }
                            } else if (customDateFieldMap.containsKey(varEntry.getKey())) {
                                DateFormat df2 = new SimpleDateFormat(Constants.yyyyMMdd);
                                //This code change is made because date will not be long value now,it will be date in String form refer ERP-32324 
                                try {
                                    dateFromDB = defaultDateFormat.parse(coldata);
                                    coldata = df2.format(dateFromDB);

                                } catch (Exception e) {
                                }
                                obj.put(varEntry.getKey(), coldata);
                            } else {
                                if (!StringUtil.isNullOrEmpty(coldata)) {
                                    obj.put(varEntry.getKey(), coldata);
                                }
                            }
                        }
                    }
                    jSONArray.put(obj);
                    batchQty--;
                }
            }
        } catch (Exception ex) {
            Logger.getLogger(AccInvoiceServiceImpl.class.getName()).log(Level.INFO, ex.getMessage());
        }
        return jSONArray.toString();
    }
    
    /**
     * Function to return batch Json of Pick DO using Stock Transfer data
     */
    private String getBatchJsonUsingIST(Map<String, Object> requestParams) throws ServiceException, JSONException {
        String dodId = ""; int size = 0;
        JSONArray jSONArray = new JSONArray();
        if (requestParams.containsKey("dodid") && requestParams.get("dodid") != null) {
            dodId = (String) requestParams.get("dodid");
        }

        
        boolean isforShipping = false;
        if (requestParams.containsKey("isforShipping") && requestParams.get("isforShipping") != null) {
            isforShipping = (boolean) requestParams.get("isforShipping");
        }
        boolean isEdit = false;
        if (requestParams.containsKey("isEdit") && requestParams.get("isEdit") != null) {
            isEdit = (boolean) requestParams.get("isEdit");
        }
        String companyid = "";
        if (requestParams.containsKey("companyid") && requestParams.get("companyid") != null) {
            companyid = (String) requestParams.get("companyid");
        }

        KwlReturnObject capresult = accountingHandlerDAOobj.getObject(ExtraCompanyPreferences.class.getName(), companyid);
        ExtraCompanyPreferences   extraCompanyPreferences = (ExtraCompanyPreferences) capresult.getEntityList().get(0);

        String packingstore = extraCompanyPreferences.getPackingstore()==null?"":extraCompanyPreferences.getPackingstore();
        String packingloc = extraCompanyPreferences.getPackinglocation()==null?"":extraCompanyPreferences.getPackinglocation();

        if (StringUtil.isNullOrEmpty(packingloc)) {
            KwlReturnObject packingresult = kwlCommonTablesDAOObj.getObject(Store.class.getName(), packingstore);
            Store storeobj = (Store) packingresult.getEntityList().get(0);
            packingloc = !StringUtil.isNullObject(storeobj) ? (!StringUtil.isNullObject(storeobj.getDefaultLocation()) ? storeobj.getDefaultLocation().getId() :"" ) : "";
        }

//        Stock packingstock = stockService.getStock(product.getID(), packingstore, packingloc, null, null, null, packingloc);
        /**
         * Get Inter Store data using DOD and Inter Store Mapping
         */
        KwlReturnObject kwlReturnObject = accInvoiceDAOobj.getDODInterStoreMapping(requestParams);
        List<DeliveryDetailInterStoreLocationMapping> detailInterStoreLocationMapping = kwlReturnObject.getEntityList();
        for (DeliveryDetailInterStoreLocationMapping deliveryDetailInterStoreLocationMapping : detailInterStoreLocationMapping) {
            /**
             * get Inter Store Object
             */
            InterStoreTransferRequest interStoreTransferRequest = deliveryDetailInterStoreLocationMapping.getInterStoreTransferRequest();
            Set<ISTDetail> iSTDetails = null;
            String batchid = "";
            double productqty = 0d;
            Product product = interStoreTransferRequest!=null?interStoreTransferRequest.getProduct():null;
            String[] serialarray = null;String purchasebatchid="";String purchaseserialid="";
            if (interStoreTransferRequest != null) {
                /**
                 * Get IST Details
                 */
                iSTDetails = interStoreTransferRequest.getIstDetails();
                for (ISTDetail iSTDetail : iSTDetails) {
                    JSONObject jSONObject = new JSONObject();
                    /**
                     * Getting the total quantity for a product in the packing
                     * warehouse under all Batch names.
                     */
                    if (!StringUtil.isNullOrEmpty(packingstore)) {
                        KwlReturnObject packingwarehouse = kwlCommonTablesDAOObj.getObject(Store.class.getName(), packingstore);
                        Store storeobj = (Store) packingwarehouse.getEntityList().get(0);
                        JSONObject requestJSON = new JSONObject();
                        requestJSON.put("productid",product.getID());
                        if (product.isIsBatchForProduct()) {
                            requestJSON.put("batchname", iSTDetail.getBatchName());
                        }
                        if (isEdit) {
                            requestJSON.put("warehouse",packingstore);
                            requestJSON.put("excludepackingstore", true); //get quantity excluding packing store and add current DO quantity
                        }
                        JSONObject batchdetails = getProductBatchQuantity(requestJSON);
                        productqty = batchdetails.optDouble("totalProductBatchQty");
                        batchid = batchdetails.optString("batchid");
                    }

                    /**
                     * Get Serial names for Pick Pack DO Edit case and prepare separate JSON
                     * objects for these serials.   
                     */
                    if (isEdit) {
                        String serialnames = iSTDetail.getDeliveredSerialNames();
                        if (!StringUtil.isNullOrEmpty(serialnames)) {
                            serialarray = serialnames.split(",");
                        }
                    }
                    if ((serialarray != null && serialarray.length != 0)) {
                        size = serialarray.length;  //if serials exist in the DO prepare loop based on those serials
                    } else {
                        size = iSTDetails.size();  //if no serials then based on normal ISTdetail records
                    }
                    for (int index = 0; index < size; index++) {
                        product = interStoreTransferRequest.getProduct();
                        jSONObject = new JSONObject();
                        if (serialarray != null) {
                            NewBatchSerial nbs = stockService.getSerialDataBySerialName(product, serialarray[index]);
                            purchasebatchid=nbs.getBatch().getId();
                            purchaseserialid=nbs.getId();
                        }
                        if (isforShipping) {
                            jSONObject.put("location", iSTDetail.getDeliveredLocation() != null ? iSTDetail.getDeliveredLocation().getId() : "");
                            jSONObject.put("locationName", iSTDetail.getDeliveredLocation() != null ? iSTDetail.getDeliveredLocation().getName() : "");
                        } else {
                            jSONObject.put("location", iSTDetail.getIssuedLocation().getId());
                        }

                        jSONObject.put("wastageQuantityType", 0);
                        jSONObject.put("batchName", iSTDetail.getBatchName());
                        jSONObject.put("batchname", iSTDetail.getBatchName());
                        jSONObject.put("expend", "");
                        jSONObject.put("expdate", "");
                        if (isEdit) {
                            double avlqty = productqty + iSTDetail.getDeliveredQuantity();
                            jSONObject.put("avlquantity", avlqty);
                            productqty=0;
                        } else {
                            jSONObject.put("avlquantity", "");
                        }
                        jSONObject.put("rack", iSTDetail.getIssuedRack() != null ? iSTDetail.getIssuedRack().getId() : "");
                        jSONObject.put("rackName", iSTDetail.getIssuedRack() != null ? iSTDetail.getIssuedRack().getName() : "");
                        if (isforShipping) {
                            jSONObject.put("warehouse", interStoreTransferRequest.getToStore().getId());
                            jSONObject.put("storeName", interStoreTransferRequest.getToStore().getFullName());
                            /**
                             * Available shipping qty
                             */
                                    JSONObject qtyObj = getDeliveryOrderRowsForShippingDoDetails(requestParams);
                            double shipqty = qtyObj.getJSONArray("data").optJSONObject(0).optDouble("duequantity");
                            jSONObject.put("avialblequantity", authHandler.roundQuantity(shipqty, interStoreTransferRequest.getCompany().getCompanyID()));
                            } else {
                            jSONObject.put("warehouse", interStoreTransferRequest.getFromStore().getId());
                        }
                        jSONObject.put("id", "");
                        jSONObject.put("skufield", "");
                        jSONObject.put("wastageQuantity", 0);
                        jSONObject.put("balance", 0);
                        if (isEdit && serialarray != null) {
                            jSONObject.put("serialno", serialarray[index]);
                            jSONObject.put("quantity", iSTDetail.getDeliveredQuantity());
                        }
                        else if (isEdit && product.isIsBatchForProduct() && !product.isIsSerialForProduct()) {
                            jSONObject.put("quantity", iSTDetail.getDeliveredQuantity());
                        }else {
                            jSONObject.put("serialno", "");
                            if (isforShipping) {
                                jSONObject.put("quantity", iSTDetail.getDeliveredQuantity());
                            } else {
                                jSONObject.put("quantity", authHandler.roundQuantity(interStoreTransferRequest.getOrderedQty(), interStoreTransferRequest.getCompany().getCompanyID()));
                            }
                        }
                        jSONObject.put("productid", interStoreTransferRequest.getProduct().getID());
                        jSONObject.put("stocktype", 1);
                        jSONObject.put("purchasebatchid", batchid);
                        jSONObject.put("expstart", "");
                        jSONObject.put("serialnoid", "");
                        jSONObject.put("isreadyonly", false);
                        jSONObject.put("purchaseserialid", purchaseserialid);  //can be empty or filled depending on product having serials
                        jSONObject.put("mfgdate", "");
                        jSONObject.put("asset", "");
                        jSONObject.put("row", iSTDetail.getDeliveredRow() != null ? iSTDetail.getDeliveredRow().getId() : "");
                        jSONObject.put("rowName", iSTDetail.getDeliveredRow() != null ? iSTDetail.getDeliveredRow().getName() : "");
                        jSONObject.put("batch", iSTDetail.getBatchName());
                        jSONObject.put("batchname", iSTDetail.getBatchName());
                        jSONObject.put("documentid", dodId);
                        jSONObject.put("bin", iSTDetail.getDeliveredBin() != null ? iSTDetail.getDeliveredBin().getId() : "");
                        jSONObject.put("binName", iSTDetail.getDeliveredBin() != null ? iSTDetail.getDeliveredBin().getName() : "");
                        if (index > 0 && product.isIsSerialForProduct()) {
                            jSONObject.put("isreadyonly", true);
                        }
                        HashMap<String, Object> hashMap = new HashMap<String, Object>();
                        hashMap.put("invoiceID", batchid);
                        hashMap.put(Constants.companyKey, companyid);
                        /**
                         * Get document count attached to batch  and attachment id's
                         */
                        jSONObject.put("attachment", 0);
                        jSONObject.put("attachmentids", "");
                        KwlReturnObject object = accMasterItemsDAOobj.getBatchDocuments(hashMap);
                        if (object.getEntityList() != null && object.getEntityList().size() > 0) {
                            jSONObject.put("attachment", object.getEntityList().size());
                            List<Object[]> attachmentDetails = object.getEntityList();
                            String docids = "";
                            for (Object[] attachmentArray : attachmentDetails) {
                                docids = docids + attachmentArray[3] + ",";
                            }
                            if (!StringUtil.isNullOrEmpty(docids)) {
                                docids = docids.substring(0, docids.length() - 1);
                            }
                            jSONObject.put("attachmentids", docids);
                        }
                        /**
                         * If the product does not have serials then next line
                         * should not be readonly hence break the loop after 1
                         * iteration.
                         */
                        if (index > 0 && product.isIsBatchForProduct() && !product.isIsSerialForProduct()) {
                            break;
                        }
                        if (serialarray != null && serialarray.length != 0) {
                            jSONObject.put("serialNames", serialarray[index]);
                        } else {
                            jSONObject.put("serialNames", iSTDetail.getDeliveredSerialNames());
                        }
                                        jSONArray.put(jSONObject);
                                    }

                                    }
                                }
                            }

        return jSONArray.toString();
    }
     private String getNewBatchDetailJson(Map<String, Object> requestParams, Product product, String documentid, HashMap<String, Integer> fieldMap, Map<String, List<Object[]>> baMap, HashMap<String, String> replaceFieldMap1, HashMap<String, String> customFieldMap, HashMap<String, String> customDateFieldMap) throws ServiceException, SessionExpiredException, JSONException {
        JSONArray jSONArray = new JSONArray();
        try {
            DateFormat df = (DateFormat) requestParams.get(Constants.df);
            KwlReturnObject kmsg = null;
            boolean linkingFlag = false;
            if (requestParams.containsKey("linkingFlag")) {
                linkingFlag = Boolean.parseBoolean(requestParams.get("linkingFlag").toString());
            }
            boolean isEdit = false;
            if (requestParams.containsKey("isEdit")) {
                isEdit = Boolean.parseBoolean(requestParams.get("isEdit").toString());
            }
            boolean readOnly = false;
            if (requestParams.containsKey("readOnly")) {
                readOnly = Boolean.parseBoolean(requestParams.get("readOnly").toString());
            }
            boolean isConsignment = false;
            if (requestParams.containsKey(Constants.isConsignment)) {
                isConsignment = Boolean.parseBoolean(requestParams.get(Constants.isConsignment).toString());
            }
            boolean srflag = false;
            if (requestParams.containsKey("srflag")) {
                srflag = Boolean.parseBoolean(requestParams.get("srflag").toString());
            }
            String moduleID = "";
            if (requestParams.containsKey("moduleID")) {
                moduleID = requestParams.get("moduleID").toString();
            }
            String companyid = requestParams.get(Constants.companyKey).toString();
            boolean isBatch = false;
            List<Object[]> batchserialdetails = null;
            if (!product.isIsBatchForProduct() && !product.isIslocationforproduct() && !product.isIswarehouseforproduct() && !product.isIsrowforproduct() && !product.isIsrackforproduct() && !product.isIsbinforproduct() && product.isIsSerialForProduct()) {
                kmsg = accCommonTablesDAO.getOnlySerialDetails(documentid, linkingFlag, moduleID, isConsignment, isEdit);
                batchserialdetails = kmsg.getEntityList();
            } else {
                isBatch = true;
                kmsg = accCommonTablesDAO.getBatchDetails(documentid, linkingFlag, moduleID, isConsignment, isEdit, "");
                batchserialdetails = kmsg.getEntityList();
            }
            double ActbatchQty = 1;
            double avlquantity = 0;
            if (batchserialdetails != null) {
                for (Object[] objArr : batchserialdetails) {
                    JSONObject obj = new JSONObject();
                    obj.put("id", objArr[0] != null ? (String) objArr[0] : "");
                    obj.put("batch", objArr[1] != null ? (String) objArr[1] : "");
                    obj.put("batchname", objArr[1] != null ? (String) objArr[1] : "");
                    obj.put("location", objArr[2] != null ? (String) objArr[2] : "");
                    obj.put("warehouse", objArr[3] != null ? (String) objArr[3] : "");
                    if (isBatch) {
                        obj.put("row", objArr[15] != null ? (String) objArr[15] : "");
                        obj.put("rack", objArr[16] != null ? (String) objArr[16] : "");
                        obj.put("bin", objArr[17] != null ? (String) objArr[17] : "");
                    }
                    KwlReturnObject objresult = accountingHandlerDAOobj.getObject(NewProductBatch.class.getName(), objArr[0].toString());
                    NewProductBatch batch = (NewProductBatch) objresult.getEntityList().get(0);
                    
                    if(batch != null){
                         obj.put("isBatchForProduct", product.isIsBatchForProduct());
                        obj.put("isSerialForProduct", product.isIsSerialForProduct());
                        obj.put("isRowForProduct", product.isIsrowforproduct());
                        obj.put("isRackForProduct", product.isIsrackforproduct());
                        obj.put("isBinForProduct", product.isIsbinforproduct());
                        obj.put("storeName", batch.getWarehouse() != null ? batch.getWarehouse().getName():"");
                        obj.put("locationName", batch.getLocation() != null ? batch.getLocation().getName():"");
                        obj.put("rowName", batch.getRow() != null ? batch.getRow().getName() : "");
                        obj.put("rackName", batch.getRack() != null ? batch.getRack().getName() : "");
                        obj.put("binName", batch.getBin() != null ? batch.getBin().getName() : "");
                        obj.put("row", batch.getRow() != null ? batch.getRow().getId() : "");
                        obj.put("rack", batch.getRack() != null ? batch.getRack().getId() : "");
                        obj.put("bin", batch.getBin() != null ? batch.getBin().getId() : "");
                        obj.put("quantity", "");
                        obj.put("batchName", batch.getBatchname());
                    }
                    
                    obj.put("wastageQuantityType", objArr[18] != null ? objArr[18] : "");
                    obj.put("wastageQuantity", objArr[19] != null ? objArr[19] : "");
                   
                    obj.put("stocktype", product.isIsBatchForProduct()?(objArr[21] != null ? objArr[21] : ""):(objArr[22] != null ? objArr[22] : ""));
                    String stocktype = "" + (product.isIsBatchForProduct() ? (objArr[21] != null ? objArr[21] : "") : (objArr[22] != null ? objArr[22] : ""));

                    
                    
                    if ((product.isIsBatchForProduct() || product.isIslocationforproduct() || product.isIswarehouseforproduct() || product.isIsrowforproduct() || product.isIsrackforproduct() || product.isIsbinforproduct()) && product.isIsSerialForProduct()) {
                        int stkType=1;
                        if(!StringUtil.isNullOrEmpty(stocktype)){
                            stkType=Integer.parseInt(stocktype);
                            ActbatchQty = accCommonTablesDAO.getBatchQuantity(documentid, (String) objArr[0],stkType);
                        }else{
                            ActbatchQty = accCommonTablesDAO.getBatchQuantity(documentid, (String) objArr[0]);
                        }
                        obj.put("avialblequantity", ActbatchQty);
                        obj.put("quantity", ActbatchQty);

                    } else {
                        obj.put("isreadyonly", false);
                        obj.put("quantity", ActbatchQty);
                    }
                    if (!product.isIsBatchForProduct() && !product.isIslocationforproduct() && !product.isIswarehouseforproduct() && !product.isIsrowforproduct() && !product.isIsrackforproduct() && !product.isIsbinforproduct() && product.isIsSerialForProduct()) {
                        obj.put("mfgdate", "");
                        obj.put("expdate", "");
                    } else {
                        obj.put("mfgdate", objArr[4] != null ? df.format(objArr[4]) : "");
                        obj.put("expdate", objArr[5] != null ? df.format(objArr[5]) : ""); //product.isIsSerialForProduct()? objArr[10] != null ? df.format(objArr[10]) : "":
                    }
                    if ((product.isIsBatchForProduct() || product.isIslocationforproduct() || product.isIswarehouseforproduct() || product.isIsrowforproduct() || product.isIsrackforproduct() || product.isIsbinforproduct()) && !product.isIsSerialForProduct()) {
                        obj.put("quantity", objArr[11] != null ? objArr[11] : "");
                    }
                    obj.put("balance", 0);
                    if ((product.isIslocationforproduct() || product.isIswarehouseforproduct()) && linkingFlag && isConsignment && srflag && objArr[0] != null) {
                        String dobatchId = objArr[0] != null ? (String) objArr[0] : "";
                        String purchaseBatchId = "";
                        if (!StringUtil.isNullOrEmpty(dobatchId)) {
                            purchaseBatchId = accCommonTablesDAO.getpurchaseBatchIdForDo(dobatchId, documentid);
                        }
                        obj.put("purchasebatchid", purchaseBatchId);
                    } else {
                        obj.put("purchasebatchid", objArr[0] != null ? (String) objArr[0] : "");
                    }
                    obj.put("documentid", documentid != null ? documentid : "");
                    obj.put("productid", product != null ? product.getID() : "");
                    String locationid = objArr[2] != null ? (String) objArr[2] : "";
                    String warehouseid = objArr[3] != null ? (String) objArr[3] : "";
                    String purchasebatchid = objArr[0] != null ? (String) objArr[0] : "";
                    String productid = product != null ? product.getID() : "";
                    String tempModuleId=moduleID;
                    if(!isConsignment && srflag){
                        tempModuleId=String.valueOf(Constants.Acc_Sales_Return_ModuleId);
                    }
                    avlquantity = getNewBatchRemainingQuantity(locationid, warehouseid, companyid, productid, purchasebatchid, tempModuleId, isEdit, documentid,stocktype, readOnly);
                    obj.put("avlquantity", avlquantity);
                    
                    if (product.isIsSerialForProduct() && batch != null) {
                        String serialno = "";
                        JSONArray serialDetails = new JSONArray();
                        KwlReturnObject resultEdit = accMasterItemsDAOobj.getNewSerialDocumentMapping(documentid, batch.getId(), Integer.parseInt(moduleID));
                        List<SerialDocumentMapping> listEdit = resultEdit.getEntityList();
                        for (SerialDocumentMapping serialDocumentMapping : listEdit) {
                            NewBatchSerial batchSerial = serialDocumentMapping.getSerialid();

                            if (!StringUtil.isNullOrEmpty(serialno)) {
                                serialno = serialno + "," + batchSerial.getSerialname();
                            } else {
                                serialno = batchSerial.getSerialname();
                            }
                            JSONObject jObject = new JSONObject();
                            jObject.put("id", batchSerial.getId());
                            jObject.put("serialno", batchSerial.getSerialname());
                            jObject.put("serialnoid", batchSerial.getId());
                            jObject.put("expstart", batchSerial.getExpfromdate() != null ? df.format(batchSerial.getExpfromdate()) : "");
                            jObject.put("expend", batchSerial.getExptodate() != null ? df.format(batchSerial.getExptodate()) : "");
                            jObject.put("purchaseserialid", batchSerial.getId());
                            obj.put("purchaseserialid",batchSerial.getId());//ERP-38629
                            jObject.put("purchasebatchid", (batchSerial.getBatch() != null) ? batchSerial.getBatch().getId() : "");
                            jObject.put("skufield", batchSerial.getSkufield());
                            
                            obj.put("stocktype", serialDocumentMapping.getStockType());
                    

                            int transType1 = Constants.Acc_Delivery_Order_ModuleId;
                            String docId = "";
                            KwlReturnObject reusablecountobj = accCommonTablesDAO.getSerialsReusableCount(productid, batchSerial.getSerialname(), companyid, transType1, false, docId, batchSerial.getBatch() != null ? batchSerial.getBatch().getId() : null);
                            if (reusablecountobj.getEntityList() != null && !reusablecountobj.getEntityList().isEmpty()) {
                                if (reusablecountobj.getEntityList().get(0) != null) {
                                    double sumCount = Double.parseDouble(reusablecountobj.getEntityList().get(0).toString());
                                    jObject.put("reusablecount", sumCount);
                                } else {
                                    jObject.put("reusablecount", 0);
                                }
                            } else {
                                jObject.put("reusablecount", 0);
                            }
                            serialDetails.put(jObject);
                        }
                        obj.put("serialno", serialno);
                        obj.put("serialDetails", serialDetails.toString());
                    }
                    jSONArray.put(obj);
                }
            }
        } catch (Exception ex) {
            Logger.getLogger(AccInvoiceServiceImpl.class.getName()).log(Level.INFO, ex.getMessage());
        }
        return jSONArray.toString();
    }
    private String getNewBatchJsonForWithoutWLBSProduct(Map<String, Object> requestParams, Product product, String documentid) throws ServiceException, SessionExpiredException, JSONException {
        JSONArray jSONArray = new JSONArray();
        try {
            DateFormat df = (DateFormat) requestParams.get(Constants.df);
            KwlReturnObject kmsg = null;
            boolean linkingFlag = false;
            if (requestParams.containsKey("linkingFlag")) {
                linkingFlag = Boolean.parseBoolean(requestParams.get("linkingFlag").toString());
            }
            boolean isEdit = false;
            if (requestParams.containsKey("isEdit")) {
                isEdit = Boolean.parseBoolean(requestParams.get("isEdit").toString());
            }
            String moduleID = "";
            if (requestParams.containsKey("moduleID")) {
                moduleID = requestParams.get("moduleID").toString();
            }
            List<Object[]> batchserialdetails = null;

            kmsg = accCommonTablesDAO.getOnlyInventoryDetails(documentid, moduleID, isEdit);
            batchserialdetails = kmsg.getEntityList();

            double ActbatchQty = 1;
            double batchQty = 0;
            double avlquantity = 0;
            if (batchserialdetails != null) {
                for (Object[] objArr : batchserialdetails) {
                    if (objArr[1] != null && (double) objArr[1] > 0) {
                        JSONObject obj = new JSONObject();

                        obj.put("quantity", objArr[1] != null ? (double) objArr[1] : "");

                        obj.put("stocktype", 1);
                        obj.put("id", objArr[0] != null ? (String) objArr[0] : "");
                        ActbatchQty = accCommonTablesDAO.getInvQuantity(documentid, product.getID(), false);
                        if (batchQty == 0) {
                            batchQty = ActbatchQty;
                        }
                        if (batchQty == ActbatchQty) {
                            obj.put("isreadyonly", false);
                            obj.put("quantity", ActbatchQty);
                        } else {
                            obj.put("isreadyonly", true);
                            obj.put("quantity", "");
                        }
                        obj.put("documentid", documentid != null ? documentid : "");

                        obj.put("productid", product != null ? product.getID() : "");
                        avlquantity = getNewBatchRemainingQuantityForWithoutLWBSProduct(product.getID(), moduleID, isEdit, documentid, false);
                        obj.put("avlquantity", avlquantity);

                        jSONArray.put(obj);

                    }
                    if (objArr[2] != null && -((double) objArr[2]) > 0) {
                        JSONObject obj = new JSONObject();
                        obj.put("quantity", objArr[2] != null ? -((double) objArr[2]) : "");

                        obj.put("stocktype", 0);
                        obj.put("id", objArr[0] != null ? (String) objArr[0] : "");
                        ActbatchQty = -(accCommonTablesDAO.getInvQuantity(documentid, product.getID(), true));
                        if (batchQty == 0) {
                            batchQty = ActbatchQty;
                        }
                        if (batchQty == ActbatchQty) {
                            obj.put("isreadyonly", false);
                            obj.put("quantity", ActbatchQty);
                        } else {
                            obj.put("isreadyonly", true);
                            obj.put("quantity", "");
                        }
                        obj.put("documentid", documentid != null ? documentid : "");

                        obj.put("productid", product != null ? product.getID() : "");
                        avlquantity = getNewBatchRemainingQuantityForWithoutLWBSProduct(product.getID(), moduleID, isEdit, documentid, false);
                        obj.put("avlquantity", avlquantity);

                        jSONArray.put(obj);
                        batchQty--;
                    }
                }
            }
        } catch (Exception ex) {
            Logger.getLogger(AccInvoiceServiceImpl.class.getName()).log(Level.INFO, ex.getMessage());
        }
        return jSONArray.toString();
    }
   
@Override
    public JSONArray getInvoiceDetailsForMonthlySalesReport(HttpServletRequest request, List<Object[]> list, JSONArray jArr) throws SessionExpiredException, ServiceException {
        try {
            boolean isproductCategory = false;
            boolean isproductType = false;
            boolean isFromMonthySalesReport = false;
            boolean withGSTData=true; //used to fetch the data according to the with GST or without GST
            String companyid = sessionHandlerImpl.getCompanyid(request);
            if (!StringUtil.isNullOrEmpty(request.getParameter("productCategoryid"))) {
                isproductCategory = true;
            }
            if (!StringUtil.isNullOrEmpty(request.getParameter(InvoiceConstants.productid))) {
                isproductType = true;
            }
            if (!StringUtil.isNullOrEmpty(request.getParameter("gstfilterflag")) && !StringUtil.isNullOrEmpty(request.getParameter("isFromMonthySalesReport")) && request.getParameter("gstfilterflag").equalsIgnoreCase("1")) {
                withGSTData = false;
            }
            if (!StringUtil.isNullOrEmpty(request.getParameter("isFromMonthySalesReport"))) {
                isFromMonthySalesReport = Boolean.parseBoolean(request.getParameter("isFromMonthySalesReport"));
            }
            HashMap requestParams = AccInvoiceServiceHandler.getInvoiceRequestMap(request);
            DateFormat df = authHandler.getDateOnlyFormat();
            boolean ignoreZero = request.getParameter("ignorezero") != null ? Boolean.parseBoolean(request.getParameter("ignorezero")) : false;
            boolean onlyAmountDue = !StringUtil.isNullOrEmpty(request.getParameter("onlyamountdue")) ? Boolean.parseBoolean(request.getParameter("onlyamountdue")) : false;
            KwlReturnObject curresult = accountingHandlerDAOobj.getObject(KWLCurrency.class.getName(), AccountingManager.getGlobalCurrencyidFromRequest(request));
            KWLCurrency currency = (KWLCurrency) curresult.getEntityList().get(0);
            boolean booleanAged = false;//Added for aged payable/receivable
            // Load Invoices in map 
            List<String> idsList = new ArrayList();
            for (Object[] oj : list) {
                idsList.add(oj[0].toString());
            }
            Map<String, InvoiceInfo> invoiceObjectMap = accInvoiceDAOobj.getInvoiceList(idsList);
            Map<String, JournalEntry> invoiceJEMap = accInvoiceDAOobj.getInvoiceJEList(idsList);
            Map<String, JournalEntryDetail> invoiceCustomerEntryMap = accInvoiceDAOobj.getInvoiceCustomerEntryList(idsList);
            List InvoiceList = new ArrayList();
            Map<String, List<CreditNoteInfo>> creditInvoiceMap = accCreditNoteDAOobj.getCNRowsInfoFromInvoice(idsList);
            Map<String, List<InvoiceTermsMap>> invoiceTermsmap = accInvoiceDAOobj.getInvoiceTermMapList(idsList);
            for (Object[] oj : list) {
                String invid = oj[0].toString();
                if (!invoiceObjectMap.containsKey(invid)) {
                    continue;
                }
                InvoiceInfo invoiceinfo = invoiceObjectMap.get(invid);
                Invoice invoice = invoiceinfo.getInvoice();
                //Below If Block code is used to remove duplicate invoice id's when filter on the basis of Product category or Product name
                if (isproductCategory || isproductType) {
                    if (InvoiceList.contains(invoice.getID())) {
                        continue;
                    } else {
                        InvoiceList.add(invoice.getID());
                    }
                }
                Date invoiceCreationDate = invoice.getCreationDate();
                Double externalCurrencyRate = 0d;
                boolean isopeningBalanceInvoice = invoice.isIsOpeningBalenceInvoice();
                Double invoiceOriginalAmount = 0d;
                Double invoiceExcludingGSTAmount = 0d;
                Double invoiceExcludingGSTAmountInBase = 0d;
                if (invoice.isIsOpeningBalenceInvoice() && !invoice.isNormalInvoice()) {
                    ExchangeRateDetails erd = invoice.getExchangeRateDetail();
                    externalCurrencyRate = invoice.getExchangeRateForOpeningTransaction();
                    invoiceOriginalAmount = invoice.getOriginalOpeningBalanceAmount();
                    /*
                     If without GST flag == true then below code block is used.
                    */
                    if (!withGSTData && isFromMonthySalesReport) {
                        invoiceExcludingGSTAmount = invoice.getExcludingGstAmount();
                        invoiceExcludingGSTAmountInBase = invoice.getExcludingGstAmountInBase();
                    }
                }
                JournalEntry je = null;
                if (invoice.isNormalInvoice() && invoiceJEMap.containsKey(invid)) {
                    je = invoiceJEMap.get(invid);
//                    invoiceCreationDate = je.getEntryDate();
                    externalCurrencyRate = je.getExternalCurrencyRate();
                }
                JournalEntryDetail d = null;
                if (invoice.isNormalInvoice() && invoiceCustomerEntryMap.containsKey(invid)) {
                    d = invoiceCustomerEntryMap.get(invid);
                    invoiceOriginalAmount = d.getAmount();
                    /*
                     If without GST flag == true then below code block is used.
                    */
                    if (!withGSTData && isFromMonthySalesReport) {
                        invoiceExcludingGSTAmount = invoice.getExcludingGstAmount();
                        invoiceExcludingGSTAmountInBase = invoice.getExcludingGstAmountInBase();
                    }
                }
                double amountdue = 0;
                String currencyid = (invoiceinfo.getCurrency() == null ? currency.getCurrencyID() : invoiceinfo.getCurrency().getCurrencyID());
                List ll = null;
                if (booleanAged) {//in aged Report Amount due need to calculate on run time i.e based on As on date. So using runtime function
                    ll = accInvoiceCommon.getAmountDue_Discount(requestParams, invoice);
                } else if (invoice.isIsOpeningBalenceInvoice() && !invoice.isNormalInvoice()) {
                    ll = new ArrayList();
                    ll.add(invoice.getOpeningBalanceAmountDue());
                    ll.add(0.0);
                    ll.add(0.0);
                } else {
                    if (Constants.InvoiceAmountDueFlag) {
                        ll = accInvoiceCommon.getInvoiceDiscountAmountInfo(requestParams, invoice);
                    } else {
                        ll = accInvoiceCommon.getAmountDue_Discount(requestParams, currency, invoice,
                                currencyid, je, creditInvoiceMap, invoiceTermsmap.get(invoiceinfo.getInvoiceID()));
                    }
                }
                amountdue = (Double) ll.get(0);
                if (onlyAmountDue && authHandler.round(amountdue, companyid) == 0) {
                    continue;
                }
                if ((ignoreZero && authHandler.round(amountdue, companyid) <= 0)) {
                    continue;
                }
                Customer customer = invoiceinfo.getCustomer();
                Account account = null;
                if (invoice.isIsOpeningBalenceInvoice() && !invoice.isNormalInvoice()) {
                    account = customer.getAccount();
                } else {
                    account = d.getAccount();
                }
                KwlReturnObject bAmt = null;
                JSONObject obj = new JSONObject();
                obj.put(Constants.billid, invoice.getID());
                obj.put(InvoiceConstants.personid, customer == null ? account.getID() : customer.getID());
                obj.put("date", df.format(invoiceCreationDate));
                obj.put(Constants.duedate, df.format(invoice.getDueDate()));
                obj.put("duedateInUserDateFormat", authHandler.getUserDateFormatterWithoutTimeZone(request).format(invoice.getDueDate()));
                obj.put(InvoiceConstants.personname, customer == null ? account.getName() : customer.getName());
                obj.put(InvoiceConstants.personinfo, customer == null ? account.getName() : customer.getName()+"("+customer.getAcccode()+")");
                double currencyToBaseRate = accCurrencyDAOobj.getCurrencyToBaseRate(requestParams, currencyid, invoiceCreationDate);
                double amountinbase = invoiceOriginalAmount;
                if (isopeningBalanceInvoice && invoice.isConversionRateFromCurrencyToBase()) {// if invoice is opening balance invoice and Conversion rate is taken from user is Currency to base then following method will be called.
                    bAmt = accCurrencyDAOobj.getCurrencyToBaseAmountAccordingToCurrencyToBaseExchangeRate(requestParams, invoiceOriginalAmount, currencyid, invoiceCreationDate, externalCurrencyRate);
                    amountinbase = (Double) bAmt.getEntityList().get(0);
                } else if (invoiceOriginalAmount != 0) {
                    if (externalCurrencyRate != 0) {
                        amountinbase = invoiceOriginalAmount / externalCurrencyRate;
                    } else if (currencyToBaseRate != 0) {
                        amountinbase = invoiceOriginalAmount / currencyToBaseRate;
                    }
                }
                double amountdueinbase = amountdue;
                if (invoice.isCashtransaction()) {
                    obj.put("amountdue", 0);
                    obj.put(InvoiceConstants.amountdueinbase, 0);
                    obj.put("incash", true);
                } else {
                    if (isopeningBalanceInvoice && invoice.isConversionRateFromCurrencyToBase()) {// if invoice is opening balance invoice and Conversion rate is taken from user is Currency to base then following method will be called.
                        bAmt = accCurrencyDAOobj.getCurrencyToBaseAmountAccordingToCurrencyToBaseExchangeRate(requestParams, amountdue, currencyid, invoiceCreationDate, externalCurrencyRate);
                        amountdueinbase = (Double) bAmt.getEntityList().get(0);
                    } else if (amountdue != 0) {
                        if (externalCurrencyRate != 0) {
                            amountdueinbase = amountdue / externalCurrencyRate;
                        } else if (currencyToBaseRate != 0) {
                            amountdueinbase = amountdue / currencyToBaseRate;
                        }
                    }
                    obj.put(InvoiceConstants.amountdueinbase, authHandler.round(amountdueinbase, companyid));
                    obj.put("amountdue", authHandler.round(amountdue, companyid));
                }
                if (withGSTData) {  //this flag is used to get actula invoice amount with GST by default it is true
                    obj.put("amount", authHandler.round(invoiceOriginalAmount, companyid));   //actual invoice amount
                    obj.put("amountinbase", authHandler.round(amountinbase, companyid));
                } else {
                    obj.put("amount", invoiceExcludingGSTAmount);   //actual invoice amount
                    obj.put("amountinbase", invoiceExcludingGSTAmountInBase);
                }
                if (!(ignoreZero && authHandler.round(amountdue, companyid) <= 0)) {
                    jArr.put(obj);
                }

            }
        } catch (JSONException ex) {
            throw ServiceException.FAILURE("getInvoiceDetailsForMonthlySalesReport : " + ex.getMessage(), ex);
        }
        return jArr;
    }

    @Override
    public JSONObject getColumnModelForWorkCentreReport(boolean isExport) {
        JSONObject jobj = new JSONObject();
        JSONArray dataJArr = new JSONArray();
        try {   // For creating Column Model

            JSONObject commData = new JSONObject();
            JSONObject jMeta = new JSONObject();
            JSONArray jarrColumns = new JSONArray();
            JSONArray jarrRecords = new JSONArray();
            JSONObject jobjTemp = new JSONObject();

            JSONObject tmp = new JSONObject();
            JSONObject tmprecords = new JSONObject();
            tmprecords.put("workcentrename", "Sharad");

            tmp = new JSONObject();
            tmp.put("name", "workcentrename");
            jarrRecords.put(tmp);
            jobjTemp = new JSONObject();
            jobjTemp.put("header", "Workcentre Name");
            jobjTemp.put("dataIndex", "workcentrename");
            jobjTemp.put("width", 150);
            jobjTemp.put("pdfwidth", 150);
            jobjTemp.put("sortable", true);
            jarrColumns.put(jobjTemp);

            tmp = new JSONObject();
            tmprecords.put("workcentreid", "123");

            tmp = new JSONObject();
            tmp.put("name", "workcentreid");
            jarrRecords.put(tmp);

            jobjTemp = new JSONObject();
            jobjTemp.put("header", "Workcentre ID");
            jobjTemp.put("dataIndex", "workcentreid");
//            jobjTemp.put("hidden", "true");
            jobjTemp.put("width", 150);
            jobjTemp.put("pdfwidth", 150);
            jobjTemp.put("sortable", true);
            jarrColumns.put(jobjTemp);

            tmp = new JSONObject();
            tmprecords.put("machineid", "View Details");

            tmp = new JSONObject();
            tmp.put("name", "machineid");
            jarrRecords.put(tmp);

            jobjTemp = new JSONObject();
            jobjTemp.put("header", "Machine ID");
            jobjTemp.put("dataIndex", "machineid");
//            jobjTemp.put("hidden", "true");
            jobjTemp.put("width", 150);
            jobjTemp.put("pdfwidth", 150);
            jobjTemp.put("sortable", true);
            jarrColumns.put(jobjTemp);

            tmp = new JSONObject();
            tmprecords.put("labourid", "123");

            tmp = new JSONObject();
            tmp.put("name", "labourid");
            jarrRecords.put(tmp);

            jobjTemp = new JSONObject();
            jobjTemp.put("header", "Labour ID");
            jobjTemp.put("dataIndex", "labourid");
            //jobjTemp.put("hidden", "true");
            jobjTemp.put("width", 150);
            jobjTemp.put("pdfwidth", 150);
            jobjTemp.put("sortable", true);
            jarrColumns.put(jobjTemp);

            tmp = new JSONObject();
            tmprecords.put("materialid", "View Details");

            tmp = new JSONObject();
            tmp.put("name", "materialid");
            jarrRecords.put(tmp);

            jobjTemp = new JSONObject();
            jobjTemp.put("header", "Material ID");
            jobjTemp.put("dataIndex", "materialid");
            //jobjTemp.put("hidden", "true");
            jobjTemp.put("width", 150);
            jobjTemp.put("pdfwidth", 150);
            jobjTemp.put("sortable", true);
            jarrColumns.put(jobjTemp);

            tmp = new JSONObject();
            tmprecords.put("productid", "View Details");

            tmp = new JSONObject();
            tmp.put("name", "productid");
            jarrRecords.put(tmp);

            jobjTemp = new JSONObject();
            jobjTemp.put("header", "Product ID");
            jobjTemp.put("dataIndex", "productid");
            //jobjTemp.put("hidden", "true");
            jobjTemp.put("width", 150);
            jobjTemp.put("pdfwidth", 150);
            jobjTemp.put("sortable", true);
            jarrColumns.put(jobjTemp);

            tmp = new JSONObject();
            tmprecords.put("warehouseid", "123");

            tmp = new JSONObject();
            tmp.put("name", "warehouseid");
            jarrRecords.put(tmp);

            jobjTemp = new JSONObject();
            jobjTemp.put("header", "Warehouse ID");
            jobjTemp.put("dataIndex", "warehouseid");
            //jobjTemp.put("hidden", "true");
            jobjTemp.put("width", 150);
            jobjTemp.put("pdfwidth", 150);
            jobjTemp.put("sortable", true);
            jarrColumns.put(jobjTemp);

            tmp = new JSONObject();
            tmprecords.put("warehouselocation", "123");

            tmp = new JSONObject();
            tmp.put("name", "warehouselocation");
            jarrRecords.put(tmp);

            jobjTemp = new JSONObject();
            jobjTemp.put("header", "Warehouse Location");
            jobjTemp.put("dataIndex", "warehouselocation");
            // jobjTemp.put("hidden", "true");
            jobjTemp.put("width", 150);
            jobjTemp.put("pdfwidth", 150);
            jobjTemp.put("sortable", true);
            jarrColumns.put(jobjTemp);

            tmp = new JSONObject();
            tmprecords.put("worktype", "View Details");

            tmp = new JSONObject();
            tmp.put("name", "worktype");
            jarrRecords.put(tmp);

            jobjTemp = new JSONObject();
            jobjTemp.put("header", "Work Type");
            jobjTemp.put("dataIndex", "worktype");
            //jobjTemp.put("hidden", "true");
            jobjTemp.put("width", 150);
            jobjTemp.put("pdfwidth", 150);
            jobjTemp.put("sortable", true);
            jarrColumns.put(jobjTemp);

            tmp = new JSONObject();
            tmprecords.put("costcentre", "123");

            tmp = new JSONObject();
            tmp.put("name", "costcentre");
            jarrRecords.put(tmp);

            jobjTemp = new JSONObject();
            jobjTemp.put("header", "Cost Centre");
            jobjTemp.put("dataIndex", "costcentre");
            // jobjTemp.put("hidden", "true");
            jobjTemp.put("width", 150);
            jobjTemp.put("pdfwidth", 150);
            jobjTemp.put("sortable", true);
            jarrColumns.put(jobjTemp);

            tmp = new JSONObject();
            tmprecords.put("operatingcapacity", "123");

            tmp = new JSONObject();
            tmp.put("name", "operatingcapacity");
            jarrRecords.put(tmp);

            jobjTemp = new JSONObject();
            jobjTemp.put("header", "Operating Capacity");
            jobjTemp.put("dataIndex", "operatingcapacity");
            //jobjTemp.put("hidden", "true");
            jobjTemp.put("width", 150);
            jobjTemp.put("pdfwidth", 150);
            jobjTemp.put("sortable", true);
            jarrColumns.put(jobjTemp);

            tmp = new JSONObject();
            tmprecords.put("routingcode", "123");

            tmp = new JSONObject();
            tmp.put("name", "routingcode");
            jarrRecords.put(tmp);

            jobjTemp = new JSONObject();
            jobjTemp.put("header", "Routing Code");
            jobjTemp.put("dataIndex", "routingcode");
            // jobjTemp.put("hidden", "true");
            jobjTemp.put("width", 150);
            jobjTemp.put("pdfwidth", 150);
            jobjTemp.put("sortable", true);
            jarrColumns.put(jobjTemp);

            tmp = new JSONObject();
            tmprecords.put("workcentremanager", "123");

            tmp = new JSONObject();
            tmp.put("name", "workcentremanager");
            jarrRecords.put(tmp);

            jobjTemp = new JSONObject();
            jobjTemp.put("header", "Workcentre Manager");
            jobjTemp.put("dataIndex", "workcentremanager");
            //jobjTemp.put("hidden", "true");
            jobjTemp.put("width", 150);
            jobjTemp.put("pdfwidth", 150);
            jobjTemp.put("sortable", true);
            jarrColumns.put(jobjTemp);

            dataJArr.put(tmprecords);

            commData.put("success", true);
            commData.put("coldata", dataJArr);
            commData.put("columns", jarrColumns);
            jMeta.put("totalProperty", "totalCount");
            jMeta.put("root", "coldata");
            jMeta.put("fields", jarrRecords);
            commData.put("metaData", jMeta);
            JSONArray jcom = new JSONArray();
            jcom.put(commData);

            jobj.put("valid", true);
            if (isExport) {
                jobj.put("data", dataJArr);
            } else {
                jobj.put("data", commData);
            }
        } catch (Exception ex) {
            Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
        }
        return jobj;
    }
    
    
    @Override
    public JSONObject getColumnModelForJobOrderReport(boolean isExport) {
        JSONObject jobj = new JSONObject();
        JSONArray dataJArr = new JSONArray();
        try {   // For creating Column Model

            JSONObject commData = new JSONObject();
            JSONObject jMeta = new JSONObject();
            JSONArray jarrColumns = new JSONArray();
            JSONArray jarrRecords = new JSONArray();
            JSONObject jobjTemp = new JSONObject();

            JSONObject tmp = new JSONObject();
            JSONObject tmprecords = new JSONObject();
            tmprecords.put("workordername", "Sharad");

            tmp = new JSONObject();
            tmp.put("name", "workordername");
            jarrRecords.put(tmp);
            jobjTemp = new JSONObject();
            jobjTemp.put("header", "Work Order Name");
            jobjTemp.put("dataIndex", "workordername");
            jobjTemp.put("width", 150);
            jobjTemp.put("pdfwidth", 150);
            jobjTemp.put("sortable", true);
            jarrColumns.put(jobjTemp);

            tmp = new JSONObject();
            tmprecords.put("workorderid", "123");

            tmp = new JSONObject();
            tmp.put("name", "workorderid");
            jarrRecords.put(tmp);

            jobjTemp = new JSONObject();
            jobjTemp.put("header", "Work Order ID");
            jobjTemp.put("dataIndex", "workorderid");
//            jobjTemp.put("hidden", "true");
            jobjTemp.put("width", 150);
            jobjTemp.put("pdfwidth", 150);
            jobjTemp.put("sortable", true);
            jarrColumns.put(jobjTemp);

            tmp = new JSONObject();
            tmprecords.put("workcentrename", "View Details");

            tmp = new JSONObject();
            tmp.put("name", "workcentrename");
            jarrRecords.put(tmp);

            jobjTemp = new JSONObject();
            jobjTemp.put("header", "Work Centre Name");
            jobjTemp.put("dataIndex", "workcentrename");
//            jobjTemp.put("hidden", "true");
            jobjTemp.put("width", 150);
            jobjTemp.put("pdfwidth", 150);
            jobjTemp.put("sortable", true);
            jarrColumns.put(jobjTemp);

            tmp = new JSONObject();
            tmprecords.put("workcentreid", "123");

            tmp = new JSONObject();
            tmp.put("name", "workcentreid");
            jarrRecords.put(tmp);

            jobjTemp = new JSONObject();
            jobjTemp.put("header", "Work Centre ID");
            jobjTemp.put("dataIndex", "workcentreid");
            //jobjTemp.put("hidden", "true");
            jobjTemp.put("width", 150);
            jobjTemp.put("pdfwidth", 150);
            jobjTemp.put("sortable", true);
            jarrColumns.put(jobjTemp);

            tmp = new JSONObject();
            tmprecords.put("workcentretype", "Labour,Material");

            tmp = new JSONObject();
            tmp.put("name", "workcentretype");
            jarrRecords.put(tmp);

            jobjTemp = new JSONObject();
            jobjTemp.put("header", "Work Centre Type");
            jobjTemp.put("dataIndex", "workcentretype");
            //jobjTemp.put("hidden", "true");
            jobjTemp.put("width", 150);
            jobjTemp.put("pdfwidth", 150);
            jobjTemp.put("sortable", true);
            jarrColumns.put(jobjTemp);

            tmp = new JSONObject();
            tmprecords.put("machineid", "M001");

            tmp = new JSONObject();
            tmp.put("name", "machineid");
            jarrRecords.put(tmp);

            jobjTemp = new JSONObject();
            jobjTemp.put("header", "Machine ID");
            jobjTemp.put("dataIndex", "machineid");
            jobjTemp.put("width", 150);
            jobjTemp.put("pdfwidth", 150);
            jobjTemp.put("sortable", true);
            jarrColumns.put(jobjTemp);

            tmp = new JSONObject();
            tmprecords.put("labourid", "L001");

            tmp = new JSONObject();
            tmp.put("name", "labourid");
            jarrRecords.put(tmp);

            jobjTemp = new JSONObject();
            jobjTemp.put("header", "Labour ID");
            jobjTemp.put("dataIndex", "labourid");
            jobjTemp.put("width", 150);
            jobjTemp.put("pdfwidth", 150);
            jobjTemp.put("sortable", true);
            jarrColumns.put(jobjTemp);

            tmp = new JSONObject();
            tmprecords.put("materialid", "BOM001");

            tmp = new JSONObject();
            tmp.put("name", "materialid");
            jarrRecords.put(tmp);

            jobjTemp = new JSONObject();
            jobjTemp.put("header", "Material ID");
            jobjTemp.put("dataIndex", "materialid");
            // jobjTemp.put("hidden", "true");
            jobjTemp.put("width", 150);
            jobjTemp.put("pdfwidth", 150);
            jobjTemp.put("sortable", true);
            jarrColumns.put(jobjTemp);

            tmp = new JSONObject();
            tmprecords.put("productid", "PID001");

            tmp = new JSONObject();
            tmp.put("name", "productid");
            jarrRecords.put(tmp);

            jobjTemp = new JSONObject();
            jobjTemp.put("header", "Product ID");
            jobjTemp.put("dataIndex", "productid");
            //jobjTemp.put("hidden", "true");
            jobjTemp.put("width", 150);
            jobjTemp.put("pdfwidth", 150);
            jobjTemp.put("sortable", true);
            jarrColumns.put(jobjTemp);

            tmp = new JSONObject();
            tmprecords.put("jobworkname", "123");

            tmp = new JSONObject();
            tmp.put("name", "jobworkname");
            jarrRecords.put(tmp);

            jobjTemp = new JSONObject();
            jobjTemp.put("header", "Job Work Name");
            jobjTemp.put("dataIndex", "jobworkname");
            // jobjTemp.put("hidden", "true");
            jobjTemp.put("width", 150);
            jobjTemp.put("pdfwidth", 150);
            jobjTemp.put("sortable", true);
            jarrColumns.put(jobjTemp);

            tmp = new JSONObject();
            tmprecords.put("joborderno", "123");

            tmp = new JSONObject();
            tmp.put("name", "joborderno");
            jarrRecords.put(tmp);

            jobjTemp = new JSONObject();
            jobjTemp.put("header", "Job Work Order Number");
            jobjTemp.put("dataIndex", "joborderno");
            //jobjTemp.put("hidden", "true");
            jobjTemp.put("width", 150);
            jobjTemp.put("pdfwidth", 150);
            jobjTemp.put("sortable", true);
            jarrColumns.put(jobjTemp);

            tmp = new JSONObject();
            tmprecords.put("vendorid", "123");

            tmp = new JSONObject();
            tmp.put("name", "vendorid");
            jarrRecords.put(tmp);

            jobjTemp = new JSONObject();
            jobjTemp.put("header", "Vendor ID");
            jobjTemp.put("dataIndex", "vendorid");
            // jobjTemp.put("hidden", "true");
            jobjTemp.put("width", 150);
            jobjTemp.put("pdfwidth", 150);
            jobjTemp.put("sortable", true);
            jarrColumns.put(jobjTemp);

            tmp = new JSONObject();
            tmprecords.put("productquantity", "12");

            tmp = new JSONObject();
            tmp.put("name", "productquantity");
            jarrRecords.put(tmp);

            jobjTemp = new JSONObject();
            jobjTemp.put("header", "Product Quantity");
            jobjTemp.put("dataIndex", "productquantity");
            jobjTemp.put("width", 150);
            jobjTemp.put("pdfwidth", 150);
            jobjTemp.put("sortable", true);
            jarrColumns.put(jobjTemp);

            dataJArr.put(tmprecords);

            commData.put("success", true);
            commData.put("coldata", dataJArr);
            commData.put("columns", jarrColumns);
            jMeta.put("totalProperty", "totalCount");
            jMeta.put("root", "coldata");
            jMeta.put("fields", jarrRecords);
            commData.put("metaData", jMeta);
            JSONArray jcom = new JSONArray();
            jcom.put(commData);

            jobj.put("valid", true);
            if (isExport) {
                jobj.put("data", dataJArr);
            } else {
                jobj.put("data", commData);
            }
        } catch (Exception ex) {
            Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
        }
        return jobj;
    }
    
     @Override
    public JSONObject getColumnModelForWorkCentreList(boolean isExport) {
        JSONObject jobj = new JSONObject();
        JSONArray dataJArr = new JSONArray();
        try {   // For creating Column Model

            JSONObject commData = new JSONObject();
            JSONObject jMeta = new JSONObject();
            JSONArray jarrColumns = new JSONArray();
            JSONArray jarrRecords = new JSONArray();
            JSONObject jobjTemp = new JSONObject();

            JSONObject tmp = new JSONObject();
            JSONObject tmprecords = new JSONObject();
            tmprecords.put("workordername", "Sharad");

            tmp = new JSONObject();
            tmp.put("name", "workordername");
            jarrRecords.put(tmp);
            jobjTemp = new JSONObject();
            jobjTemp.put("header", "Work Order Name");
            jobjTemp.put("dataIndex", "workordername");
            jobjTemp.put("width", 150);
            jobjTemp.put("pdfwidth", 150);
            jobjTemp.put("sortable", true);
            jarrColumns.put(jobjTemp);

            tmp = new JSONObject();
            tmprecords.put("workorderid", "123");

            tmp = new JSONObject();
            tmp.put("name", "workorderid");
            jarrRecords.put(tmp);

            jobjTemp = new JSONObject();
            jobjTemp.put("header", "Work Order ID");
            jobjTemp.put("dataIndex", "workorderid");
//            jobjTemp.put("hidden", "true");
            jobjTemp.put("width", 150);
            jobjTemp.put("pdfwidth", 150);
            jobjTemp.put("sortable", true);
            jarrColumns.put(jobjTemp);

            tmp = new JSONObject();
            tmprecords.put("workcentrename", "View Details");

            tmp = new JSONObject();
            tmp.put("name", "workcentrename");
            jarrRecords.put(tmp);

            jobjTemp = new JSONObject();
            jobjTemp.put("header", "Work Centre Name");
            jobjTemp.put("dataIndex", "workcentrename");
//            jobjTemp.put("hidden", "true");
            jobjTemp.put("width", 150);
            jobjTemp.put("pdfwidth", 150);
            jobjTemp.put("sortable", true);
            jarrColumns.put(jobjTemp);

            tmp = new JSONObject();
            tmprecords.put("workcentreid", "123");

            tmp = new JSONObject();
            tmp.put("name", "workcentreid");
            jarrRecords.put(tmp);

            jobjTemp = new JSONObject();
            jobjTemp.put("header", "Work Centre ID");
            jobjTemp.put("dataIndex", "workcentreid");
            //jobjTemp.put("hidden", "true");
            jobjTemp.put("width", 150);
            jobjTemp.put("pdfwidth", 150);
            jobjTemp.put("sortable", true);
            jarrColumns.put(jobjTemp);

            tmp = new JSONObject();
            tmprecords.put("workcentretype", "Labour,Material");

            tmp = new JSONObject();
            tmp.put("name", "workcentretype");
            jarrRecords.put(tmp);

            jobjTemp = new JSONObject();
            jobjTemp.put("header", "Work Centre Type");
            jobjTemp.put("dataIndex", "workcentretype");
            //jobjTemp.put("hidden", "true");
            jobjTemp.put("width", 150);
            jobjTemp.put("pdfwidth", 150);
            jobjTemp.put("sortable", true);
            jarrColumns.put(jobjTemp);

            tmp = new JSONObject();
            tmprecords.put("machineid", "M001");

            tmp = new JSONObject();
            tmp.put("name", "machineid");
            jarrRecords.put(tmp);

            jobjTemp = new JSONObject();
            jobjTemp.put("header", "Machine ID");
            jobjTemp.put("dataIndex", "machineid");
            //jobjTemp.put("hidden", "true");
            jobjTemp.put("width", 150);
            jobjTemp.put("pdfwidth", 150);
            jobjTemp.put("sortable", true);
            jarrColumns.put(jobjTemp);

            tmp = new JSONObject();
            tmprecords.put("labourid", "L001");

            tmp = new JSONObject();
            tmp.put("name", "labourid");
            jarrRecords.put(tmp);

            jobjTemp = new JSONObject();
            jobjTemp.put("header", "Labour ID");
            jobjTemp.put("dataIndex", "labourid");
            //jobjTemp.put("hidden", "true");
            jobjTemp.put("width", 150);
            jobjTemp.put("pdfwidth", 150);
            jobjTemp.put("sortable", true);
            jarrColumns.put(jobjTemp);

            tmp = new JSONObject();
            tmprecords.put("materialid", "BOM001");

            tmp = new JSONObject();
            tmp.put("name", "materialid");
            jarrRecords.put(tmp);

            jobjTemp = new JSONObject();
            jobjTemp.put("header", "Material ID");
            jobjTemp.put("dataIndex", "materialid");
            // jobjTemp.put("hidden", "true");
            jobjTemp.put("width", 150);
            jobjTemp.put("pdfwidth", 150);
            jobjTemp.put("sortable", true);
            jarrColumns.put(jobjTemp);

            tmp = new JSONObject();
            tmprecords.put("productid", "PID001");

            tmp = new JSONObject();
            tmp.put("name", "productid");
            jarrRecords.put(tmp);

            jobjTemp = new JSONObject();
            jobjTemp.put("header", "Product ID");
            jobjTemp.put("dataIndex", "productid");
            //jobjTemp.put("hidden", "true");
            jobjTemp.put("width", 150);
            jobjTemp.put("pdfwidth", 150);
            jobjTemp.put("sortable", true);
            jarrColumns.put(jobjTemp);


            dataJArr.put(tmprecords);

            commData.put("success", true);
            commData.put("coldata", dataJArr);
            commData.put("columns", jarrColumns);
            jMeta.put("totalProperty", "totalCount");
            jMeta.put("root", "coldata");
            //commData.put("totalCount", 13);
            jMeta.put("fields", jarrRecords);
            commData.put("metaData", jMeta);
            JSONArray jcom = new JSONArray();
            jcom.put(commData);

            jobj.put("valid", true);
            if (isExport) {
                jobj.put("data", dataJArr);
            } else {
                jobj.put("data", commData);
            }
        } catch (Exception ex) {
            Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
        }
        return jobj;
    }
    
    /**
     * Description : This method is used to build the Json data of Daily Sales
     * Report
     *
     * @param requestParams
     * @return JSONObject
     * @throws ServiceException
     */
    @Override
    public JSONObject getDailySalesReportDetails(HttpServletRequest request, Map<String, Object> requestParams) throws ServiceException {
        JSONObject jobj = new JSONObject();
        JSONArray dataJArr = new JSONArray();
        Locale requestcontextutilsobj = null;
        try {

            int count = 0;//result.getRecordTotalCount();

            if (requestParams.containsKey("requestcontextutilsobj")) {
                requestcontextutilsobj = (Locale) requestParams.get("requestcontextutilsobj");
            }
//            flag for chart type
            String chartType = "";
            if (!StringUtil.isNullOrEmpty(request.getParameter(Constants.CHART_TYPE))) {
                chartType = request.getParameter(Constants.CHART_TYPE);
            }
            JSONArray DataJArr = new JSONArray();

            boolean isForExport = false;
            if (requestParams.containsKey("isForExport") && !StringUtil.isNullOrEmpty(requestParams.get("isForExport").toString())) {
                isForExport = Boolean.parseBoolean(requestParams.get("isForExport").toString());
            }
            boolean consolidateFlag = request.getParameter("consolidateFlag") != null ? Boolean.parseBoolean(request.getParameter("consolidateFlag")) : false;
            String[] companyids = (consolidateFlag && request.getParameter("companyids") != null) ? request.getParameter("companyids").split(",") : sessionHandlerImpl.getCompanyid(request).split(",");
            String gcurrencyid = (consolidateFlag && request.getParameter(Constants.globalCurrencyKey) != null) ? request.getParameter(Constants.globalCurrencyKey) : sessionHandlerImpl.getCurrencyID(request);
            HashMap invRequestParams = AccInvoiceServiceHandler.getInvoiceRequestMap(request);
            
            DateFormat df = authHandler.getDateOnlyFormat();
            Date startDate = df.parse(request.getParameter("stdate"));
            Date endDate = df.parse(request.getParameter(Constants.REQ_enddate));
            
            /*
             *Calculation of Date Ranges for the Month.
             */
            LocalDate localStartDate = new LocalDate(startDate);
            LocalDate localEndDate = new LocalDate(endDate);
            
            startDate = localStartDate.toDateTimeAtCurrentTime().dayOfMonth().withMinimumValue().toDate();
            endDate = localEndDate.toDateTimeAtCurrentTime().dayOfMonth().withMaximumValue().toDate();
            
            startDate.setHours(00);
            startDate.setMinutes(00);
            startDate.setSeconds(00);

            endDate.setHours(23);
            endDate.setMinutes(59);
            endDate.setSeconds(59);

            int startDayOfMonth = startDate.getDate();
            int endDayOfMonth = endDate.getDate();
            String monthName = localStartDate.toString("MMM");
            int selectedYear = 1900 + startDate.getYear();

            invRequestParams.put(Constants.REQ_startdate, df.format(startDate));
            invRequestParams.put(Constants.REQ_enddate, df.format(endDate));
            String companyid = "";
            for (int cnt = 0; cnt < companyids.length; cnt++) {
                companyid = companyids[cnt];
                request.setAttribute(Constants.companyKey, companyid);
                request.setAttribute(Constants.globalCurrencyKey, gcurrencyid);
                invRequestParams.put(Constants.companyKey, companyid);
                invRequestParams.put(Constants.globalCurrencyKey, gcurrencyid);

                KwlReturnObject result = accInvoiceDAOobj.getInvoicesMerged(invRequestParams);
                List list = result.getEntityList();
                DataJArr = accInvoiceServiceDAO.getInvoiceDetailsForMonthlySalesReport(request, list, DataJArr);
            }
            companyid = sessionHandlerImpl.getCompanyid(request);

            KwlReturnObject currencyResult = accountingHandlerDAOobj.getObject(KWLCurrency.class.getName(), gcurrencyid);
            KWLCurrency currency = (KWLCurrency) currencyResult.getEntityList().get(0);

            // Data Structures required for Column Model
            JSONObject commData = new JSONObject();
            JSONObject jMeta = new JSONObject();
            JSONArray jarrColumns = new JSONArray();
            JSONArray jarrRecords = new JSONArray();
            JSONObject jobjTemp = new JSONObject();

            /*
             * Created Record to print the daily sales report.
             */
            String StoreRec = "customerid,customername,";

            /*
             * Created Headers with Respect to Month.
             */
            jobjTemp = new JSONObject();
            jobjTemp.put("header", "");
            jobjTemp.put("dataIndex", "customerid");    //"Customer ID"
            jobjTemp.put("hidden", true);
            jobjTemp.put("hideable", false);
            jarrColumns.put(jobjTemp);

            jobjTemp = new JSONObject();
            jobjTemp.put("header", "<b>" + messageSource.getMessage("acc.dailySalesReport.customername", null, requestcontextutilsobj) + "<b>"); //"Customer Name"
            jobjTemp.put("dataIndex", "customername");
            jobjTemp.put("width", 150);
            jobjTemp.put("pdfwidth", 150);
            jarrColumns.put(jobjTemp);

            DecimalFormat decimalFormat = new DecimalFormat("00");
            List dayList = new ArrayList<>();

            for (int i = startDayOfMonth; i <= endDayOfMonth; i++) {
                /*
                 *Added dataindex in record
                 */
                StoreRec += "amount_" + i + ",";

                String dateStr = decimalFormat.format(i) + " " + monthName + " " + selectedYear;
                /*
                 * Added dataindex in Header
                 */
                jobjTemp = new JSONObject();
                jobjTemp.put("header", "<b>" + dateStr + "<b>");
                jobjTemp.put("dataIndex", "amount_" + i);
                jobjTemp.put("renderer", "WtfGlobal.currencyRenderer");
                jobjTemp.put("align", "right");
                jobjTemp.put("width", 100);
                jobjTemp.put("pdfwidth", 100);
                jarrColumns.put(jobjTemp);

                dayList.add(dateStr);
            }

            StoreRec += "total";
            dayList.add("Total");

            /*
             * Adding dataindex into the record.
             */
            String[] recArr = StoreRec.split(",");
            for (String rec : recArr) {
                jobjTemp = new JSONObject();
                jobjTemp.put("name", rec);
                jarrRecords.put(jobjTemp);
            }

            jobjTemp = new JSONObject();
            jobjTemp.put("header", "<b>" + messageSource.getMessage("acc.dailySalesReport.total", null, requestcontextutilsobj) + "<b>"); //"Total"
            jobjTemp.put("dataIndex", "total");
            jobjTemp.put("renderer", "WtfGlobal.currencyRenderer");
            jobjTemp.put("align", "right");
            jobjTemp.put("width", 120);
            jobjTemp.put("pdfwidth", 120);
            jarrColumns.put(jobjTemp);


            Map customerMap = new HashMap();
            JSONObject jSONObjectTotal = new JSONObject();
            for (int invIndex = 0; invIndex < DataJArr.length(); invIndex++) {
                JSONObject invoice = DataJArr.getJSONObject(invIndex);
                String customerid = invoice.getString(InvoiceConstants.personid);
                Double invoiceAmount = invoice.getDouble("amountinbase");
                LocalDate invoiceDate = new LocalDate(new Date(invoice.getString("date")));
                String invoiceDay = invoiceDate.toString("dd MMM YYYY");
                /*
                 * Checking whether the Customer of Invoice is already present
                 * in the Map or Not, If yes then put the Invoice Amount with
                 * the Date in Key in the Respective Date of Map.
                 */
                if (customerMap.containsKey(customerid)) {
                    Map dailySalesMap = (HashMap) customerMap.get(customerid);
                    if (dailySalesMap == null) {
                        dailySalesMap = new HashMap();
                        dailySalesMap.put(invoiceDay, invoiceAmount);
                    } else {
                        Double monthlySalesAmount = (Double) dailySalesMap.get(invoiceDay);
                        if (monthlySalesAmount == null) {
                            dailySalesMap.put(invoiceDay, invoiceAmount);
                        } else {
                            double amount = monthlySalesAmount.doubleValue();
                            amount += invoiceAmount.doubleValue();
                            dailySalesMap.put(invoiceDay, new Double(amount));
                        }
                    }
                    /*
                     * Adding total column for Export case
                     */
                    if (isForExport) {
                        Map monthlySalesTotalMap = new HashMap();
                        if (customerMap.containsKey("Total")) {
                            monthlySalesTotalMap = (HashMap) customerMap.get("Total");
                            if (monthlySalesTotalMap.containsKey(invoiceDay)) {
                                double totalAmount = (Double) monthlySalesTotalMap.get(invoiceDay);
                                totalAmount += invoiceAmount;
                                monthlySalesTotalMap.put(invoiceDay, totalAmount);
                            } else {
                                monthlySalesTotalMap.put(invoiceDay, invoiceAmount);
                            }
                            customerMap.put("Total", monthlySalesTotalMap);
                        } else {
                            monthlySalesTotalMap = new HashMap();
                            monthlySalesTotalMap.put(invoiceDay, invoiceAmount);
                            customerMap.put("Total", monthlySalesTotalMap);
                        }
                    }
                } else {
                    /*
                     * If Customer is Not Present in the Existing Map then Add
                     * NEW record in the Map for Respective Customer.
                     */
                    Map dailySalesMap = new HashMap();
                    dailySalesMap.put(invoiceDay, invoiceAmount);
                    customerMap.put(customerid, dailySalesMap);

                    /*
                     * Adding total column for Export case
                     */
                    if (isForExport) {
                        Map monthlySalesTotalMap = new HashMap();
                        if (customerMap.containsKey("Total")) {
                            monthlySalesTotalMap = (HashMap) customerMap.get("Total");
                            if (monthlySalesTotalMap.containsKey(invoiceDay)) {
                                double totalAmount = (Double) monthlySalesTotalMap.get(invoiceDay);
                                totalAmount += invoiceAmount;
                                monthlySalesTotalMap.put(invoiceDay, totalAmount);
                            } else {
                                monthlySalesTotalMap.put(invoiceDay, invoiceAmount);
                            }
                            customerMap.put("Total", monthlySalesTotalMap);
                        } else {
                            monthlySalesTotalMap = new HashMap();
                            monthlySalesTotalMap.put(invoiceDay, invoiceAmount);
                            customerMap.put("Total", monthlySalesTotalMap);
                        }
                    }
                }
            }

            Set customerSet = customerMap.keySet();
            int size = dayList.size();
            double[] monthlyTotal = new double[size];
            double grandTotal = 0.0;
            for (Object object : customerSet) {
                String customerid = object.toString();
                Map dailySalesMap = (HashMap) customerMap.get(customerid);
                JSONObject obj = new JSONObject();
                KwlReturnObject objItr = accountingHandlerDAOobj.getObject(Customer.class.getName(), customerid);
                Customer customer = (Customer) objItr.getEntityList().get(0);
                obj.put(Constants.customerid, customerid);
                obj.put("customername", customer != null ? customer.getName() : "");
                double totalSalesAmount = 0.00;

                for (int i = startDayOfMonth; i <= endDayOfMonth; i++) {
                    String invoiceDay = (String) dayList.get(i - 1);
                    if (dailySalesMap.containsKey(invoiceDay)) {
                        double monthlySalesAmount = ((Double) dailySalesMap.get(invoiceDay)).doubleValue();
                        totalSalesAmount += authHandler.round(monthlySalesAmount, companyid);
                        if (isForExport) {
                            obj.put("amount_" + i, authHandler.formattedAmount(monthlySalesAmount, companyid));
                        } else {
                            obj.put("amount_" + i, authHandler.round(monthlySalesAmount, companyid));
                        }
                        monthlyTotal[i] = 0.0 + monthlyTotal[i] + monthlySalesAmount;    //add month total for all customer
                    } else {
                        if (isForExport) {
                            obj.put("amount_" + i, authHandler.formattedAmount(0, companyid));
                        } else {
                            obj.put("amount_" + i, authHandler.formattedAmount(0, companyid));
                        }
                    }
                }
                /*
                 * Calculating the Sub Totals and Grand Total and Putting
                 * JSONObj into dataJArr.
                 */
                grandTotal = grandTotal + totalSalesAmount;                                       //grand total for all customer   
                if (isForExport) {
                    obj.put("total", authHandler.formattedAmount(totalSalesAmount, companyid));
                } else {
                    obj.put("total", authHandler.round(totalSalesAmount, companyid));
                }
                if (obj.optString(Constants.customerid, "").equals("Total")) {
                    obj.put("customername", "Total" + " (" + currency.getCurrencyCode() + ")");
                    jSONObjectTotal = obj;
                } else {
                    dataJArr.put(obj);
                    count++;
                }
            }
            /*
             * Skipping the Sub Total of each column as we are calculating in
             * the next functions.
             */
            dataJArr = AccountingManager.sortJsonArrayOnStringValues(dataJArr, "customername", true);
            if (!isForExport) {
                JSONObject obj1 = new JSONObject();
                obj1.put("customername", "Total" + " (" + currency.getCurrencyCode() + ")");
                for (int j = startDayOfMonth; j <= endDayOfMonth; j++) {
                    obj1.put("amount_" + j, authHandler.round(monthlyTotal[j], companyid));
                }
                obj1.put("total", authHandler.round(grandTotal, companyid));
                dataJArr.put(obj1);
                count++;
            }

            if (isForExport) {
                dataJArr.put(jSONObjectTotal);
            }

            commData.put("success", true);
            commData.put("coldata", dataJArr);
            commData.put("columns", jarrColumns);
            jMeta.put("totalProperty", "totalCount");
            jMeta.put("root", "coldata");
            commData.put("totalCount", count);
            jMeta.put("fields", jarrRecords);
            commData.put("metaData", jMeta);
            JSONArray jcom = new JSONArray();
            jcom.put(commData);

            jobj.put("valid", true);
            if (isForExport) {
                jobj.put("data", dataJArr);
            } else if(StringUtil.equalIgnoreCase(chartType, Constants.LINE_CHART)) {
                JSONArray chartDataArr = new JSONArray();
                JSONObject jtemp = dataJArr.getJSONObject(dataJArr.length() - 1);
                for(int i = 1; i <= endDayOfMonth; i++) {
                    JSONObject temp = new JSONObject();
                    temp.put("day", i);
                    temp.put("amountinbase", jtemp.getString("amount_" + i));
                    chartDataArr.put(temp);
                }
                jobj.put("data", chartDataArr);
            } else if(StringUtil.equalIgnoreCase(chartType, Constants.PIE_CHART)) {
                /*
                 * Remove Total from JSON array
                 */
                if (dataJArr.length() > 0) {
                    dataJArr.remove(dataJArr.length() - 1);
                }
                 /*
                 * Sort customers on amount 
                 */
                dataJArr = AccountingManager.sortJsonArrayOnIntegerValues(dataJArr, "total", "desc");
                
                /*
                 * If there are more than 10 records calculate sum of other recs
                 * and add as Others
                 */
                
                if(dataJArr.length() > Constants.MAX_LIMIT_FOR_PIE) {
                    double otherAmount = 0.0;
                    JSONObject otherData = new JSONObject();
                    otherData.put("customername", "Others");
                    for (int i = 9; i < dataJArr.length(); i++) {
                        otherAmount += authHandler.round(dataJArr.optJSONObject(i).optDouble("total", 0.0), companyid);
                        dataJArr.remove(i);
                        i--;
                    }
                    otherData.put("total", authHandler.round(otherAmount, companyid));
                    dataJArr.put(otherData);
                }
                jobj.put(Constants.data, dataJArr);
                
            } else {
                jobj.put("data", commData);
            }
        } catch (ParseException ex) {
            Logger.getLogger(AccInvoiceServiceImpl.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SessionExpiredException ex) {
            Logger.getLogger(AccInvoiceServiceImpl.class.getName()).log(Level.SEVERE, null, ex);
        } catch (JSONException | NoSuchMessageException ex) {
            Logger.getLogger(AccInvoiceServiceImpl.class.getName()).log(Level.SEVERE, null, ex);
        }
        return jobj;
    }
    
//    Creating Column Model For Monthly sales report and monthly sales report by product
    @Override
    public JSONObject getColumnModelForMonthlySalesReport( HashMap<String,Object> requestParams, JSONArray jArr) {
        JSONObject jobj = new JSONObject();
        JSONObject headerObj = new JSONObject();
        JSONArray jarrColumns = new JSONArray();
        JSONArray jarrRecords = new JSONArray();
        Locale locale=null;
        boolean isBasedOnProduct = false,hidden=false,consolidateFlag=false;
        String monthName = "",gcurrencyid="",currencyName="",stdate="",enddate="";
        try {
            if (requestParams.containsKey("consolidateFlag")) {
                consolidateFlag = (boolean) requestParams.get("consolidateFlag");
            }
            if (requestParams.containsKey("gcurrencyid")) {
                gcurrencyid = (String) requestParams.get("gcurrencyid");
            KwlReturnObject curresult = kwlCommonTablesDAOObj.getObject(KWLCurrency.class.getName(), gcurrencyid);
            KWLCurrency currency = (KWLCurrency) curresult.getEntityList().get(0);
            currencyName = currency.getName();
            }
            if (requestParams.containsKey("isBasedOnProduct")) {
                isBasedOnProduct = (boolean) requestParams.get("isBasedOnProduct");
            }
            if(requestParams.containsKey("locale")){
                locale = (Locale) requestParams.get("locale");
            }
            if(requestParams.containsKey("stdate")){
               stdate = (String) requestParams.get("stdate");
            }
            if(requestParams.containsKey("enddate")){
               enddate = (String) requestParams.get("enddate");
            }
            
            headerObj = new JSONObject();
            headerObj.put("header", " ");
            headerObj.put("hidden", true);
            jarrColumns.put(headerObj);

            JSONObject recObj = new JSONObject();
            recObj.put("name", isBasedOnProduct ? "productid" : "customerid");
            jarrRecords.put(recObj);

            {
                headerObj = new JSONObject();
                headerObj.put("header", messageSource.getMessage("acc.cust.name", null,locale));
                headerObj.put("dataIndex", isBasedOnProduct ? "productid" : "customerid");
                headerObj.put("width", 120);
                headerObj.put("pdfwidth", 110);
                headerObj.put("align", "left");
                headerObj.put("hidden", true);
                jarrColumns.put(headerObj);

                recObj = new JSONObject();
                recObj.put("name", isBasedOnProduct ? "productname" : "customername");
                jarrRecords.put(recObj);

                headerObj = new JSONObject();
                headerObj.put("header", isBasedOnProduct ? messageSource.getMessage("acc.invoiceList.expand.pName", null,locale) : messageSource.getMessage("acc.cust.name", null,locale));
                headerObj.put("dataIndex", isBasedOnProduct ? "productname" : "customername");
                headerObj.put("width", 120);
                headerObj.put("pdfwidth", 100);
                headerObj.put("align", "left");
                headerObj.put("sortable", "this.RemoteSort");
                jarrColumns.put(headerObj);
               if (isBasedOnProduct) {
                    recObj = new JSONObject();
                    recObj.put("name", "pid");
                    jarrRecords.put(recObj);

                    headerObj = new JSONObject();
                    headerObj.put("header", messageSource.getMessage("acc.productList.gridProductID", null, locale));
                    headerObj.put("dataIndex", "pid");
                    headerObj.put("width", 120);
                    headerObj.put("pdfwidth", 100);
                    headerObj.put("align", "left");
                    jarrColumns.put(headerObj);

                    recObj = new JSONObject();
                    recObj.put("name", "salesAccountName");
                    jarrRecords.put(recObj);

                    headerObj = new JSONObject();
                    headerObj.put("header", messageSource.getMessage("acc.product.salesAccount", null, locale));
                    headerObj.put("dataIndex", "salesAccountName");
                    headerObj.put("width", 120);
                    headerObj.put("pdfwidth", 100);
                    headerObj.put("align", "left");
                    jarrColumns.put(headerObj);
                }

                for (int i = 0; i < 22; i++) {
                    List monthList = getMonthList(stdate, enddate, "MMMM, yyyy");
                    if (i < 12) {
                        monthName = (String) monthList.get(i);
                    }else{
                        monthName="";
                        hidden =true;
                    }
                    recObj = new JSONObject();
                    recObj.put("name", "amount_" + i);
                    jarrRecords.put(recObj);
                    headerObj = new JSONObject();
                    headerObj.put("header", monthName);
                    headerObj.put("dataIndex", "amount_" + i);
                    headerObj.put("width", 100);
                    headerObj.put("pdfwidth", 120);
                    headerObj.put("renderer", "this.formatMoney");
                    headerObj.put("align", "right");
                    headerObj.put("hidden", hidden);
                    jarrColumns.put(headerObj);

                }
                recObj = new JSONObject();
                recObj.put("name", "amountinbase");
                jarrRecords.put(recObj);

                headerObj = new JSONObject();
                headerObj.put("header", "<div><b>"+messageSource.getMessage("acc.common.total", null, locale)+""+ "(" + currencyName + ")<b><div>");
                headerObj.put("dataIndex", "amountinbase");
                headerObj.put("width", 120);
                headerObj.put("pdfwidth", 110);
                headerObj.put("renderer", "WtfGlobal.currencyRenderer");
                headerObj.put("align", "left");
                headerObj.put("sortable", true);
                jarrColumns.put(headerObj);

                jobj.put("jarrColumns", jarrColumns);
                jobj.put("jarrRecords", jarrRecords);
            }
        } catch (Exception ex) {
            Logger.getLogger(AccInvoiceServiceImpl.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
        }
        return jobj;
    }
    
    public JSONObject getColumnModelForCustomerMonthlySalesReport( HashMap<String,Object> requestParams, JSONArray jArr) {
        JSONObject jobj = new JSONObject();
        JSONObject headerObj = new JSONObject();
        JSONArray jarrColumns = new JSONArray();
        JSONArray jarrRecords = new JSONArray();
        Locale locale=null;
        boolean hidden=false;
        String monthName = "",gcurrencyid="",currencyName="",stdate="",enddate="";
        try {
            if (requestParams.containsKey("gcurrencyid")) {
                gcurrencyid = (String) requestParams.get("gcurrencyid");
                KwlReturnObject curresult = kwlCommonTablesDAOObj.getObject(KWLCurrency.class.getName(), gcurrencyid);
                KWLCurrency currency = (KWLCurrency) curresult.getEntityList().get(0);
                currencyName = currency.getName();
            }
            if(requestParams.containsKey("stdate")){
               stdate = (String) requestParams.get("stdate");
            }
            if(requestParams.containsKey("enddate")){
               enddate = (String) requestParams.get("enddate");
            }
            JSONObject recObj = new JSONObject();
            recObj.put("name", "customerid");
            jarrRecords.put(recObj);
            {
                headerObj = new JSONObject();
                headerObj.put("header", messageSource.getMessage("acc.cust.name", null,locale));
                headerObj.put("dataIndex", "customername");
                headerObj.put("width", 120);
                headerObj.put("pdfwidth", 110);
                headerObj.put("align", "left");
                headerObj.put("hidden", true);
                jarrColumns.put(headerObj);

                recObj = new JSONObject();
                recObj.put("name", "customername");
                jarrRecords.put(recObj);
                
                recObj = new JSONObject();
                recObj.put("name", "productid");
                jarrRecords.put(recObj);
                
                headerObj = new JSONObject();
                headerObj.put("header", "<div><b>" + messageSource.getMessage("acc.invoiceList.expand.pName", null,locale) + "<b><div>");
                headerObj.put("dataIndex", "productname");
                headerObj.put("width", 120);
                headerObj.put("pdfwidth", 110);
                headerObj.put("align", "left");
                jarrColumns.put(headerObj);
                
                recObj = new JSONObject();
                recObj.put("name", "productname");
                jarrRecords.put(recObj);

                HashMap<String,Integer> monthmap=new HashMap<>();
                monthmap.put("Jan",1);
                monthmap.put("Feb",2);
                monthmap.put("Mar",3);
                monthmap.put("Apr",4);
                monthmap.put("May",5);
                monthmap.put("Jun",6);
                monthmap.put("Jul",7);
                monthmap.put("Aug",8);
                monthmap.put("Sep",9);
                monthmap.put("Oct",10);
                monthmap.put("Nov",11);
                monthmap.put("Dec",12);
                List monthList = getMonthList(stdate, enddate, "MMMM, yyyy");
                for (int i = 0; i < monthList.size(); i++) {
                    monthName = (String) monthList.get(i);
                    String[] monthNamearr=monthName.split(" ");
                    recObj = new JSONObject();
                    recObj.put("name", "amount_" + monthNamearr[1] +"_"+ monthmap.get(monthNamearr[0]).intValue());
                    jarrRecords.put(recObj);
                    headerObj = new JSONObject();
                    headerObj.put("header", "<div><b>" + monthName + "<b><div>");
                    headerObj.put("dataIndex", "amount_" + monthNamearr[1] +"_"+ monthmap.get(monthNamearr[0]).intValue());
                    headerObj.put("width", 100);
                    headerObj.put("pdfwidth", 120);
                    headerObj.put("renderer", "WtfGlobal.currencyDeletedRenderer");
                    headerObj.put("align", "right");
                    headerObj.put("hidden", hidden);
                    jarrColumns.put(headerObj);

                }
                recObj = new JSONObject();
                recObj.put("name", "amountinbase");
                jarrRecords.put(recObj);

                headerObj = new JSONObject();
                headerObj.put("header", "<div><b>"+messageSource.getMessage("acc.common.total", null, locale)+"<b><div>");
                headerObj.put("dataIndex", "amountinbase");
                headerObj.put("width", 120);
                headerObj.put("pdfwidth", 110);
                headerObj.put("renderer", "totalRender");
                headerObj.put("align", "right");
                jarrColumns.put(headerObj);

                jobj.put("jarrColumns", jarrColumns);
                jobj.put("jarrRecords", jarrRecords);
            }
        } catch (Exception ex) {
            Logger.getLogger(AccInvoiceServiceImpl.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
        }
        return jobj;
    }
    
//    Moving method from accInvoiceControllerCMN.java to Service layer
    @Override
    public List getMonthList(String startDateStr, String endDateStr, String datePattern) {
        List<String> monthList = new ArrayList();

        final DateTimeFormatter dtf = DateTimeFormat.forPattern(datePattern);
        Date startDate = dtf.parseLocalDate(startDateStr).toDate();
        Date endDate = dtf.parseLocalDate(endDateStr).toDate();

        // we need to include the month of the end date as well
        LocalDate localStartDate = new LocalDate(startDate);
        LocalDate localEndDate = new LocalDate(endDate);

        Calendar cal = Calendar.getInstance();
        cal.setTime(localStartDate.toDate());
        int startMonth = cal.get(Calendar.MONTH);
        int startYear = cal.get(Calendar.YEAR);

        cal.setTime(localEndDate.toDate());
        int endMonth = cal.get(Calendar.MONTH);
        int endYear = cal.get(Calendar.YEAR);

        // if user selects same month & year for both start & end fields, we get the last date of the month to populate into the endDate
        if (startMonth == endMonth && startYear == endYear) {
            monthList.add(localStartDate.toString("MMM yyyy"));
        } else {
            // just a trick to include the last month as well
            localEndDate = localEndDate.plus(Period.months(1));

            while (localStartDate.isBefore(localEndDate)) {
                monthList.add(localStartDate.toString("MMM yyyy"));
                localStartDate = localStartDate.plus(Period.months(1));
            }
            localStartDate = new LocalDate(startDate);
        }
        return monthList;
    }
    
    @Override
    public JSONArray getExciseComputationReportDetails(Map<String, Object> requestParams, JSONArray jArr) throws ServiceException {
        try {
            /**
             * *************************************** Excise Sales ****************************************
             */
            Map<String, Object> ExciseParams = new HashMap<>();
            if (requestParams.containsKey(Constants.companyKey)) {
                ExciseParams.put(Constants.companyKey, (String) requestParams.get(Constants.companyKey));
            }
            if (requestParams.containsKey(Constants.df)) {
                ExciseParams.put(Constants.df, requestParams.get(Constants.df));
            }
            if (requestParams.containsKey(Constants.REQ_startdate)) {
                ExciseParams.put(Constants.REQ_startdate, requestParams.get(Constants.REQ_startdate));
            }
            if (requestParams.containsKey(Constants.REQ_enddate)) {
                ExciseParams.put(Constants.REQ_enddate, (String) requestParams.get(Constants.REQ_enddate));
            }
            ExciseParams.put("isexcisepaid", 0);//0- Non paid, 1- Paid.

            KwlReturnObject Exciseresult = accInvoiceDAOobj.getExciseComputationReportDetails(ExciseParams);
            List<Object[]> Exciselist = Exciseresult.getEntityList();
            for (Object[] Exciseobj : Exciselist) {
                JSONObject jObj = new JSONObject();
                String particulars = Exciseobj[0]!=null?(String)Exciseobj[0]:"";
                if (particulars.equals("1")) {
                    jObj.put("particulars", "Regular Rate");
                } else if (particulars.equals("2")) {
                    jObj.put("particulars", "Exempt Excise Sales");
                } else if (particulars.equals("3")) {
                    jObj.put("particulars", "Exports");
                } else if (particulars.equals("4")) {
                    jObj.put("particulars", "Export-Duty Chargeable");
                } else if (particulars.equals("5")) {
                    jObj.put("particulars", "Captive Consumption");
                } else if (particulars.equals("6")) {
                    jObj.put("particulars", "Removal As Such");
                } else if (particulars.equals("7")) {
                    jObj.put("particulars", "Special Rate");
                }else{
                    jObj.put("particulars", "Others");
                }
                jObj.put("taxtype", "A. Excise Sales");
                jObj.put("dutyamount", (double) Exciseobj[1]);//dutyamount
                jObj.put("accessablevalue", (double) Exciseobj[2]);//accessablevalue
                jArr.put(jObj);
            }
            if(Exciselist.isEmpty()){
                JSONObject jObjtemp = new JSONObject();
                jObjtemp.put("taxtype", "A. Excise Sales");
                jObjtemp.put("particulars", "Regular Rate");
                jObjtemp.put("dutyamount", 0);
                jObjtemp.put("accessablevalue", 0);
                jArr.put(jObjtemp);
            }

            /**
             * *************************************** Payable ****************************************
             */
            Map<String, Object> PayableParams = new HashMap<>();
            if (requestParams.containsKey(Constants.companyKey)) {
                PayableParams.put(Constants.companyKey, (String) requestParams.get(Constants.companyKey));
            }
            if (requestParams.containsKey(Constants.df)) {
                PayableParams.put(Constants.df, requestParams.get(Constants.df));
            }
            if (requestParams.containsKey("FinancialYearFrom")) {
                PayableParams.put(Constants.REQ_startdate, (String)requestParams.get("FinancialYearFrom"));
            }
            if (requestParams.containsKey(Constants.REQ_startdate)) {
                PayableParams.put(Constants.REQ_enddate, (String) requestParams.get(Constants.REQ_startdate));
            }
            PayableParams.put("isexcisepaid", 0);//0- Non paid, 1- Paid.
            double PayableDutyAmount = 0;
            JSONObject PayablejObj = new JSONObject();
            KwlReturnObject Payableresult = accInvoiceDAOobj.getExciseComputationReportDetails(PayableParams);
            List<Object[]> Payablelist = Payableresult.getEntityList();
            for (Object[] Payableobj : Payablelist) {
                PayableDutyAmount += (double) Payableobj[1];
            }
            PayablejObj.put("taxtype", "B. Payable From Previous Period");
            PayablejObj.put("particulars", "Payable");
            PayablejObj.put("dutyamount", PayableDutyAmount);
            PayablejObj.put("accessablevalue", "");
            jArr.put(PayablejObj);

            /**
             * *************************************** GAR7 ****************************************
             */
            Map<String, Object> GAR7Params = new HashMap<>();
            if (requestParams.containsKey(Constants.companyKey)) {
                GAR7Params.put(Constants.companyKey, (String) requestParams.get(Constants.companyKey));
            }
            if (requestParams.containsKey(Constants.df)) {
                GAR7Params.put(Constants.df, requestParams.get(Constants.df));
            }
            if (requestParams.containsKey("FinancialYearFrom")) {
                GAR7Params.put(Constants.REQ_startdate, requestParams.get("FinancialYearFrom"));
            }
            if (requestParams.containsKey(Constants.REQ_enddate)) {
                GAR7Params.put(Constants.REQ_enddate, (String) requestParams.get(Constants.REQ_enddate));
            }
            GAR7Params.put("isexcisepaid", 1);//0- Non paid, 1- Paid.
            double GAR7DutyAmount = 0;
            JSONObject GAR7jObj = new JSONObject();
            KwlReturnObject GAR7result = accInvoiceDAOobj.getExciseComputationReportDetails(GAR7Params);
            List<Object[]> GAR7list = GAR7result.getEntityList();
            for (Object[] GAR7obj : GAR7list) {
                GAR7DutyAmount += (double) GAR7obj[1];
            }
            GAR7jObj.put("taxtype", "C. Excise Duty Payments/ Credit Adjustments");
            GAR7jObj.put("particulars", "GAR 7 Payments");
            GAR7jObj.put("dutyamount", GAR7DutyAmount);
            GAR7jObj.put("accessablevalue", "");
            jArr.put(GAR7jObj);

        } catch (Exception ex) {
            Logger.getLogger(AccInvoiceServiceImpl.class.getName()).log(Level.SEVERE, null, ex);
        }
        return jArr;
    }
    @Override
    public JSONArray getServiceTaxComputationReportDetails(Map<String, Object> requestParams, JSONArray jArr) throws ServiceException {
        try {
            // term type is uesd in indian TAX 1.VAT ,2.Excise Duty,3.CST,4.Service Tax,5.Swachh Bharat Cess,6.Krishi Kalyan Cess
            JSONObject jObj = new JSONObject();
            double CurrentBalanceSBC=0, PreviousBalanceSBC =0;
            /**
             * *************************************** A. Input Credit *****************************************
             */
            
            /* ##### Input Credit Tax Amount Calculation For Selected(From - To) Period ##### */
            Map<String, Object> InputCreditParams = new HashMap<>();
            if (requestParams.containsKey("companyid")) {
                InputCreditParams.put("companyid", (String) requestParams.get("companyid"));
            }
            if (requestParams.containsKey(Constants.df)) {
                InputCreditParams.put(Constants.df, requestParams.get(Constants.df));
            }
            if (requestParams.containsKey(Constants.REQ_startdate)) {
                InputCreditParams.put(Constants.REQ_startdate, requestParams.get(Constants.REQ_startdate));
            }
            if (requestParams.containsKey(Constants.REQ_enddate)) {
                InputCreditParams.put(Constants.REQ_enddate, (String) requestParams.get(Constants.REQ_enddate));
            }
            //Adding Term Type To fetch data.
            InputCreditParams.put("SERVICE TAX", IndiaComplianceConstants.LINELEVELTERMTYPE_SERVICE_TAX);
            InputCreditParams.put("KKC", IndiaComplianceConstants.LINELEVELTERMTYPE_KKC);
            InputCreditParams.put("SBC", IndiaComplianceConstants.LINELEVELTERMTYPE_SBC);
            InputCreditParams.put("ISSalesORPurchase", Constants.VENDOR_INVOICE);
            double InputCreditTaxAmt = 0, InputCreditAccessableAmt = 0, ICServiceTaxAmount = 0 , ICKKCAmount = 0, ICSBCAmount =0;
            KwlReturnObject InputCreditTaxresult = accInvoiceDAOobj.getServiceTaxComputationReportDetails(InputCreditParams);
            List<Object[]> InputCreditTaxlist = InputCreditTaxresult.getEntityList();
            for (Object[] STobj : InputCreditTaxlist) {
                if(STobj[2] != null && STobj[0] != null){
                    if((Integer)STobj[2] == IndiaComplianceConstants.LINELEVELTERMTYPE_SERVICE_TAX){
                        ICServiceTaxAmount += (double) STobj[0];
                    }else if((Integer)STobj[2] == IndiaComplianceConstants.LINELEVELTERMTYPE_KKC){
                        ICKKCAmount += (double) STobj[0];
                    }else if((Integer)STobj[2] == IndiaComplianceConstants.LINELEVELTERMTYPE_SBC){
                        ICSBCAmount += (double) STobj[0];
                    }
                }
                InputCreditAccessableAmt = STobj[1] != null ? (double) STobj[1] : 0;
            }
            InputCreditTaxAmt = ICServiceTaxAmount + ICKKCAmount ;
            jObj.put("taxtype", "A. Input Credit");
            jObj.put("particulars", "Current Period");
            jObj.put("servicetaxamount", ICServiceTaxAmount);//serivcetaxamount
            jObj.put("kkcamount", ICKKCAmount);//KKCamount
            jObj.put("sbcamount", 0 );//SBCamount
            jObj.put("dutyamount", InputCreditTaxAmt);//dutyamount
            jObj.put("accessablevalue", InputCreditAccessableAmt);//accessablevalue
            jObj.put("totalamount", InputCreditTaxAmt + InputCreditAccessableAmt);//dutyamount
            jArr.put(jObj);

            /* ##### Input Credit Tax Amount Calculation For Previous Period ##### */
            jObj = new JSONObject();
            Map<String, Object> InputCreditPreviousParams = new HashMap<>();
            if (requestParams.containsKey("companyid")) {
                InputCreditPreviousParams.put("companyid", (String) requestParams.get("companyid"));
            }
            if (requestParams.containsKey(Constants.df)) {
                InputCreditPreviousParams.put(Constants.df, requestParams.get(Constants.df));
            }
            // For Previous Period, START date will be financial Year From Date.
            if (requestParams.containsKey("FinancialYearFrom")) {
                InputCreditPreviousParams.put(Constants.REQ_startdate, requestParams.get("FinancialYearFrom"));
            }
            // For Previous Period, END date will be From Date(Start date).
            if (requestParams.containsKey(Constants.REQ_startdate)) {
                InputCreditPreviousParams.put(Constants.REQ_enddate, requestParams.get(Constants.REQ_startdate));
            }
            //Adding Term Type To fetch data.
            InputCreditPreviousParams.put("SERVICE TAX", IndiaComplianceConstants.LINELEVELTERMTYPE_SERVICE_TAX);
            InputCreditPreviousParams.put("KKC", IndiaComplianceConstants.LINELEVELTERMTYPE_KKC);
            InputCreditPreviousParams.put("SBC", IndiaComplianceConstants.LINELEVELTERMTYPE_SBC);
            InputCreditPreviousParams.put("ISSalesORPurchase", Constants.VENDOR_INVOICE);
            double InputCreditPreviousAmt = 0, InputCreditAccessablePreviousAmt = 0,ICPrevServiceTaxAmount = 0 , ICPrevKKCAmount = 0, ICPrevSBCAmount =0;
            KwlReturnObject InputCreditPreviousresult = accInvoiceDAOobj.getServiceTaxComputationReportDetails(InputCreditPreviousParams);
            List<Object[]> InputCreditPreviouslist = InputCreditPreviousresult.getEntityList();
            for (Object[] InputCreditPrevobj : InputCreditPreviouslist) {
                if(InputCreditPrevobj[2] != null && InputCreditPrevobj[0] != null){
                    if((Integer)InputCreditPrevobj[2] == IndiaComplianceConstants.LINELEVELTERMTYPE_SERVICE_TAX){
                        ICPrevServiceTaxAmount += (double) InputCreditPrevobj[0];
                    }else if((Integer)InputCreditPrevobj[2] == IndiaComplianceConstants.LINELEVELTERMTYPE_KKC){
                        ICPrevKKCAmount += (double) InputCreditPrevobj[0];
                    }else if((Integer)InputCreditPrevobj[2] == IndiaComplianceConstants.LINELEVELTERMTYPE_SBC){
                        ICPrevSBCAmount += (double) InputCreditPrevobj[0];
                    }
                }
                InputCreditAccessablePreviousAmt = InputCreditPrevobj[1] != null ? (double) InputCreditPrevobj[1] : 0;
            }
            InputCreditPreviousAmt = ICPrevServiceTaxAmount + ICPrevKKCAmount;
            jObj.put("taxtype", "A. Input Credit");
            jObj.put("particulars", "Previous Period");
            jObj.put("servicetaxamount", ICPrevServiceTaxAmount);//serivcetaxamount
            jObj.put("kkcamount", ICPrevKKCAmount);//KKCamount
            jObj.put("sbcamount", 0);//SBCamount
            jObj.put("dutyamount", InputCreditPreviousAmt);//dutyamount
            jObj.put("accessablevalue", InputCreditAccessablePreviousAmt);//accessablevalue
            jObj.put("totalamount", InputCreditPreviousAmt + InputCreditAccessablePreviousAmt);//dutyamount
            jArr.put(jObj);
            
            
            /**
             * *************************************** B. Service TAX Payable *****************************************
             */
            
            /* ##### Service Tax Payable Amount Calculation For Selected(From - To) Period ##### */
            jObj = new JSONObject();
            Map<String, Object> ServiceTaxParams = new HashMap<>();
            if (requestParams.containsKey("companyid")) {
                ServiceTaxParams.put("companyid", (String) requestParams.get("companyid"));
            }
            if (requestParams.containsKey(Constants.df)) {
                ServiceTaxParams.put(Constants.df, requestParams.get(Constants.df));
            }
            if (requestParams.containsKey(Constants.REQ_startdate)) {
                ServiceTaxParams.put(Constants.REQ_startdate, requestParams.get(Constants.REQ_startdate));
            }
            if (requestParams.containsKey(Constants.REQ_enddate)) {
                ServiceTaxParams.put(Constants.REQ_enddate, (String) requestParams.get(Constants.REQ_enddate));
            }
            //Adding Term Type To fetch data.
            ServiceTaxParams.put("SERVICE TAX", IndiaComplianceConstants.LINELEVELTERMTYPE_SERVICE_TAX);
            ServiceTaxParams.put("KKC", IndiaComplianceConstants.LINELEVELTERMTYPE_KKC);
            ServiceTaxParams.put("SBC", IndiaComplianceConstants.LINELEVELTERMTYPE_SBC);
            ServiceTaxParams.put("ISSalesORPurchase", Constants.CUSTOMER_INVOICE);
            double serviceTaxAmt = 0, AccessableAmt = 0 ,PaybleServiceTaxAmount = 0 , PaybleKKCAmount = 0, PaybleSBCAmount =0;
            KwlReturnObject ServiceTaxresult = accInvoiceDAOobj.getServiceTaxComputationReportDetails(ServiceTaxParams);
            List<Object[]> ServiceTaxlist = ServiceTaxresult.getEntityList();
            for (Object[] STobj : ServiceTaxlist) {
                if(STobj[2] != null && STobj[0] != null){
                    if((Integer)STobj[2] == IndiaComplianceConstants.LINELEVELTERMTYPE_SERVICE_TAX){
                        PaybleServiceTaxAmount += (double) STobj[0];
                    }else if((Integer)STobj[2] == IndiaComplianceConstants.LINELEVELTERMTYPE_KKC){
                        PaybleKKCAmount += (double) STobj[0];
                    }else if((Integer)STobj[2] == IndiaComplianceConstants.LINELEVELTERMTYPE_SBC){
                        PaybleSBCAmount += (double) STobj[0];
                    }
                }
                AccessableAmt = STobj[1] != null ? (double) STobj[1] : 0;
            }
            CurrentBalanceSBC = PaybleSBCAmount;
            serviceTaxAmt = PaybleServiceTaxAmount + PaybleKKCAmount;
            jObj.put("taxtype", "B. Service Tax Payable");
            jObj.put("particulars", "Current Period");
            jObj.put("servicetaxamount", PaybleServiceTaxAmount);//serivcetaxamount
            jObj.put("kkcamount", PaybleKKCAmount);//KKCamount
            jObj.put("sbcamount", PaybleSBCAmount);//SBCamount
            jObj.put("dutyamount", serviceTaxAmt);//dutyamount
            jObj.put("accessablevalue", AccessableAmt);//accessablevalue
            jObj.put("totalamount", serviceTaxAmt + AccessableAmt);//dutyamount
            jArr.put(jObj);

            
            /* ##### Service Tax Payable Amount Calcualtion For Previous Period ##### */
            jObj = new JSONObject();
            Map<String, Object> STPreviousParams = new HashMap<>();
            if (requestParams.containsKey("companyid")) {
                STPreviousParams.put("companyid", (String) requestParams.get("companyid"));
            }
            if (requestParams.containsKey(Constants.df)) {
                STPreviousParams.put(Constants.df, requestParams.get(Constants.df));
            }
                        // For Previous Period, START date will be financial Year From Date.
            if (requestParams.containsKey("FinancialYearFrom")) {
                STPreviousParams.put(Constants.REQ_startdate, requestParams.get("FinancialYearFrom"));
            }
            // For Previous Period, END date will be From Date(Start date).
            if (requestParams.containsKey(Constants.REQ_startdate)) {
                STPreviousParams.put(Constants.REQ_enddate, requestParams.get(Constants.REQ_startdate));
            }
            //Adding Term Type To fetch data.
            STPreviousParams.put("SERVICE TAX", IndiaComplianceConstants.LINELEVELTERMTYPE_SERVICE_TAX);
            STPreviousParams.put("KKC", IndiaComplianceConstants.LINELEVELTERMTYPE_KKC);
            STPreviousParams.put("SBC", IndiaComplianceConstants.LINELEVELTERMTYPE_SBC);
            STPreviousParams.put("ISSalesORPurchase", Constants.CUSTOMER_INVOICE);
            double STPreviousAmt = 0, AccessablePreviousAmt = 0,PrevPaybleServiceTaxAmount = 0 , PrevPaybleKKCAmount = 0, PrevPaybleSBCAmount =0;
            KwlReturnObject STPreviousresult = accInvoiceDAOobj.getServiceTaxComputationReportDetails(STPreviousParams);
            List<Object[]> STPreviouslist = STPreviousresult.getEntityList();
            for (Object[] STPrevobj : STPreviouslist) {
                if(STPrevobj[2] != null && STPrevobj[0] != null){
                    if((Integer)STPrevobj[2] == IndiaComplianceConstants.LINELEVELTERMTYPE_SERVICE_TAX){
                        PrevPaybleServiceTaxAmount += (double) STPrevobj[0];
                    }else if((Integer)STPrevobj[2] == IndiaComplianceConstants.LINELEVELTERMTYPE_KKC){
                        PrevPaybleKKCAmount += (double) STPrevobj[0];
                    }else if((Integer)STPrevobj[2] == IndiaComplianceConstants.LINELEVELTERMTYPE_SBC){
                        PrevPaybleSBCAmount += (double) STPrevobj[0];
                    }
                }
                AccessablePreviousAmt = STPrevobj[1] != null ? (double) STPrevobj[1] : 0;
            }
            PreviousBalanceSBC = PrevPaybleSBCAmount;
            STPreviousAmt = PrevPaybleServiceTaxAmount + PrevPaybleKKCAmount;
            jObj.put("taxtype", "B. Service Tax Payable");
            jObj.put("particulars", "Previous Period");
            jObj.put("servicetaxamount", PrevPaybleServiceTaxAmount);//serivcetaxamount
            jObj.put("kkcamount", PrevPaybleKKCAmount);//KKCamount
            jObj.put("sbcamount", PrevPaybleSBCAmount);//SBCamount
            jObj.put("dutyamount", STPreviousAmt);//dutyamount
            jObj.put("accessablevalue", AccessablePreviousAmt);//accessablevalue
            jObj.put("totalamount", STPreviousAmt + AccessablePreviousAmt);//dutyamount
            jArr.put(jObj);
            
            /**
             * *************************************** C. Service Tax Payments / Credit Adjustments ****************************************
             */
            jObj = new JSONObject();
            jObj.put("taxtype", "C. Service Tax Payments / Credit Adjustments");
            jObj.put("particulars", "G.A. R. 7 Payments");
            jObj.put("totalamount", (double) 0);//dutyamount
            jObj.put("dutyamount", (double) 0);//dutyamount
            jObj.put("accessablevalue", (double) 0);//accessablevalue
            jArr.put(jObj);
            jObj = new JSONObject();
            jObj.put("taxtype", "C. Service Tax Payments / Credit Adjustments");
            jObj.put("particulars", "CENVAT Credit Adjustment");
            jObj.put("totalamount", (double) 0);//dutyamount
            jObj.put("dutyamount", (double) 0);//dutyamount
            jObj.put("accessablevalue", (double) 0);//accessablevalue
            jArr.put(jObj);
            
            jObj = new JSONObject();
            Map<String, Object> STCreditAdjustParams = new HashMap<>();
            if (requestParams.containsKey("companyid")) {
                STCreditAdjustParams.put("companyid", (String) requestParams.get("companyid"));
            }
            if (requestParams.containsKey(Constants.df)) {
                STCreditAdjustParams.put(Constants.df, requestParams.get(Constants.df));
            }
            if (requestParams.containsKey(Constants.REQ_startdate)) {
                STCreditAdjustParams.put(Constants.REQ_startdate, requestParams.get(Constants.REQ_startdate));
            }
            if (requestParams.containsKey(Constants.REQ_enddate)) {
                STCreditAdjustParams.put(Constants.REQ_enddate, (String) requestParams.get(Constants.REQ_enddate));
            }
            STCreditAdjustParams.put("creditavailedflagservicetax", 1 );
            //Adding Term Type To fetch data.
            STCreditAdjustParams.put("SERVICE TAX", IndiaComplianceConstants.LINELEVELTERMTYPE_SERVICE_TAX);
            STCreditAdjustParams.put("KKC", IndiaComplianceConstants.LINELEVELTERMTYPE_KKC);
            STCreditAdjustParams.put("ISSalesORPurchase", Constants.VENDOR_INVOICE);
            double STCreditAdjustAmt = 0;
            KwlReturnObject STCreditAdjustresult = accInvoiceDAOobj.getServiceTaxComputationReportDetails(STCreditAdjustParams);
            List<Object[]> STCreditAdjustlist = STCreditAdjustresult.getEntityList();
            for (Object[] STCreditAdjustobj : STCreditAdjustlist) {
                STCreditAdjustAmt += STCreditAdjustobj[0] != null ? (double) STCreditAdjustobj[0] : 0;
            }
            jObj.put("taxtype", "C. Service Tax Payments / Credit Adjustments");
            jObj.put("particulars", "Service Tax Credit Adjustment");
            jObj.put("dutyamount", STCreditAdjustAmt);//dutyamount
            jObj.put("accessablevalue", (double) 0);//accessablevalue
            jObj.put("totalamount", (double) 0);//Total Amount
            jArr.put(jObj);
            jObj = new JSONObject();
            jObj.put("taxtype", "C. Service Tax Payments / Credit Adjustments");
            jObj.put("particulars", "Adjustment towards Advance Tax paid");
            jObj.put("totalamount", (double) 0);//dutyamount
            jObj.put("dutyamount", (double) 0);//dutyamount
            jObj.put("accessablevalue", (double) 0);//accessablevalue
            jArr.put(jObj);
            jObj = new JSONObject();
            jObj.put("taxtype", "C. Service Tax Payments / Credit Adjustments");
            jObj.put("particulars", "Other Adjustments");
            jObj.put("totalamount", (double) 0);//dutyamount
            jObj.put("dutyamount", (double) 0);//dutyamount
            jObj.put("accessablevalue", (double) 0);//accessablevalue
            jArr.put(jObj);
            /**
             * *************************************** D. Balance Service Tax Payable (B-C) ****************************************
             */
            jObj = new JSONObject();
            jObj.put("taxtype", "D. Balance Service Tax Payable (B-C)");
            jObj.put("particulars", "Balance Service Tax Payable (B-C)");
            jObj.put("totalamount", (double) 0);//dutyamount
            jObj.put("dutyamount", (double) 0);//dutyamount
            jObj.put("accessablevalue", (double) 0);//accessablevalue
            jArr.put(jObj);
            jObj = new JSONObject();
            jObj.put("taxtype", "D. Balance Service Tax Payable (B-C)");
            jObj.put("particulars", "SBC Payable");
            jObj.put("totalamount", (double) 0);//dutyamount
            jObj.put("dutyamount", PreviousBalanceSBC + CurrentBalanceSBC);//dutyamount
            jObj.put("accessablevalue", (double) 0);//accessablevalue
            jArr.put(jObj);
            /**
             * *************************************** E. Refund Of Service Tax Input Credit ****************************************
             */
            jObj = new JSONObject();
            jObj.put("taxtype", "E. Refund Of Service Tax Input Credit");
            jObj.put("particulars", "Refund Of Service Tax Input Credit");
            jObj.put("totalamount", (double) 0);//dutyamount
            jObj.put("dutyamount", (double) 0);//dutyamount
            jObj.put("accessablevalue", (double) 0);//accessablevalue
            jArr.put(jObj);
            /**
             * *************************************** F. Balance Available Credit ****************************************
             */
            jObj = new JSONObject();
            jObj.put("taxtype", "F. Balance Available Credit");
            jObj.put("particulars", "Advance Tax Paid");
            jObj.put("totalamount", (double) 0);//dutyamount
            jObj.put("dutyamount", (double) 0);//dutyamount
            jObj.put("accessablevalue", (double) 0);//accessablevalue
            jArr.put(jObj);
            jObj = new JSONObject();
            jObj.put("taxtype", "F. Balance Available Credit");
            jObj.put("particulars", "Service Tax Credit");
            jObj.put("totalamount", (double) 0);//dutyamount
            jObj.put("dutyamount", (double) 0);//dutyamount
            jObj.put("accessablevalue", (double) 0);//accessablevalue
            jArr.put(jObj);
            jObj = new JSONObject();
            jObj.put("taxtype", "F. Balance Available Credit");
            jObj.put("particulars", "Input Credit Availed");
            jObj.put("totalamount", (double) 0);//dutyamount
            jObj.put("dutyamount", (double) 0);//dutyamount
            jObj.put("accessablevalue", (double) 0);//accessablevalue
            jArr.put(jObj);
            /**
             * *************************************** G.Service Tax Adjusted Towards Excise Payable ****************************************
             */
            jObj = new JSONObject();
            jObj.put("taxtype", "G.Service Tax Adjusted Towards Excise Payable");
            jObj.put("particulars", "Service Tax Adjusted Towards Excise Payable");
            jObj.put("totalamount", (double) 0);//dutyamount
            jObj.put("dutyamount", (double) 0);//dutyamount
            jObj.put("accessablevalue", (double) 0);//accessablevalue
            jArr.put(jObj);
//            if(Exciselist.isEmpty()){
//                JSONObject jObjtemp = new JSONObject();
//                jObjtemp.put("taxtype", "A. Excise Sales");
//                jObjtemp.put("particulars", "Regular Rate");
//                jObjtemp.put("dutyamount", 0);
//                jObjtemp.put("accessablevalue", 0);
//                jArr.put(jObjtemp);
//            }
        } catch (Exception ex) {
            Logger.getLogger(AccInvoiceServiceImpl.class.getName()).log(Level.SEVERE, null, ex);
        }
        return jArr;
    }
    
    @Override
    public Map<String, JSONArray> getColumnModuleForAPAR(Map<String, Object> requestParams) throws ServiceException {
        Map<String, JSONArray> returnMap = new HashMap<>();
        Locale requestcontextutilsobj = null;

        try {

            if (requestParams.containsKey("requestcontextutilsobj")) {
                requestcontextutilsobj = (Locale) requestParams.get("requestcontextutilsobj");
            }

            // Column Model
            JSONArray jarrColumns = new JSONArray();
            JSONArray jarrRecords = new JSONArray();

            String StoreRec = "billid,journalentryid,entryno,billno,noteid,noteno,date,duedate,personname,aliasname,personemail,personid,salespersonname,salespersonid,"
                    + "currencysymbol,currencyname,currencyid,amountdueinbase,amountdue,amountdue1,amountdue2,amountdue3,amountdue4,amountdue5,amountdue6,amountdue7,"
                    + "amountdue8,total,amountdueinbase1,amountdueinbase2,amountdueinbase3,amountdueinbase4,total,memo,totalinbase,currencysymbol,termname,creditlimit,"
                    + "creditlimitinbase,withoutinventory,type,isOpeningBalanceTransaction,sequenceformatid,includingGST,salesPersonID,costcenterid,fixedAssetInvoice,"
                    + "fixedAssetLeaseInvoice,customerId,start,fCustomerId,exchangerate,dimensionvalue";

            String[] recArr = StoreRec.split(",");
            JSONObject jobjTemp = new JSONObject();
            for (String rec : recArr) {
                jobjTemp = new JSONObject();
                jobjTemp.put("name", rec);
                jarrRecords.put(jobjTemp);
            }

            boolean isSummary = true;
            boolean isAgedForSalesPerson = false;
            boolean isReceivable = true;
            boolean reportWithoutAging = false;
            boolean isTypeEditor = true;
            int interval = 30;

            jobjTemp = new JSONObject();
            jobjTemp.put("header", "<b>" + messageSource.getMessage("acc.field.DocumentNumber", null, requestcontextutilsobj) +"<b>");
            jobjTemp.put("hidden", isSummary);
            jobjTemp.put("dataIndex", "billno");
            jobjTemp.put("width", 150);
            jobjTemp.put("pdfwidth", 100);
            jobjTemp.put("renderer", "WtfGlobal.linkDeletedRenderer");
            jarrColumns.put(jobjTemp);

            jobjTemp = new JSONObject();
            jobjTemp.put("header", "<b>" + messageSource.getMessage("acc.inv.fieldset.title", null, requestcontextutilsobj)); //Dimensions - this column is used when grouping is performed on dimensions
            jobjTemp.put("hidden", true);
            jobjTemp.put("dataIndex", "dimensionvalue");
            jobjTemp.put("width", 150);
            jobjTemp.put("pdfwidth", 100);
            jarrColumns.put(jobjTemp);

            jobjTemp = new JSONObject();
            jobjTemp.put("header", "<b>" + messageSource.getMessage("acc.agedPay.gridJEno", null, requestcontextutilsobj));  //"Journal Entry Number",
            jobjTemp.put("hidden", isSummary || isAgedForSalesPerson);
            jobjTemp.put("dataIndex", "entryno");
            jobjTemp.put("width", 150);
            jobjTemp.put("pdfwidth", 100);
            jobjTemp.put("sortable", true);
//            jobjTemp.put("groupable", true);
//            jobjTemp.put("groupRenderer", "function(v){return v}");
            jobjTemp.put("renderer", "WtfGlobal.linkRenderer");
            jarrColumns.put(jobjTemp);

            jobjTemp = new JSONObject();
            jobjTemp.put("header", "<b>" + messageSource.getMessage("acc.agedPay.gridDate", null, requestcontextutilsobj));//"Bill Date",
            jobjTemp.put("hidden", isSummary || isAgedForSalesPerson);
            jobjTemp.put("dataIndex", "date");
            jobjTemp.put("width", 150);
            jobjTemp.put("pdfwidth", 100);
            jobjTemp.put("align", "center");
//            jobjTemp.put("groupRenderer", "this.groupDateRender.createDelegate(this)");
//            jobjTemp.put("renderer", "WtfGlobal.onlyDateRenderer");
            jarrColumns.put(jobjTemp);

            jobjTemp = new JSONObject();
            jobjTemp.put("header", "<b>" + messageSource.getMessage("acc.agedPay.gridDueDate", null, requestcontextutilsobj));//"Due Date",
            jobjTemp.put("hidden", isSummary || isAgedForSalesPerson);
            jobjTemp.put("dataIndex", "duedate");
            jobjTemp.put("width", 150);
            jobjTemp.put("pdfwidth", 100);
            jobjTemp.put("sortable", true);
//            jobjTemp.put("groupable", true);
            jobjTemp.put("align", "center");
//            jobjTemp.put("groupRenderer", "this.groupDateRender.createDelegate(this)");
//            jobjTemp.put("renderer", "WtfGlobal.onlyDateRenderer");
            jarrColumns.put(jobjTemp);

            jobjTemp = new JSONObject();
            jobjTemp.put("header", "<b>" + messageSource.getMessage("acc.invoiceList.salesPersonName", null, requestcontextutilsobj));
            jobjTemp.put("hidden", !isAgedForSalesPerson);
            jobjTemp.put("dataIndex", "salespersonname");
            jobjTemp.put("width", 150);
            jobjTemp.put("pdfwidth", 100);
            jobjTemp.put("sortable", true);
//            jobjTemp.put("groupable", true);
//            jobjTemp.put("summaryRenderer", "function(){return '<div class='grid-summary-common'>'+WtfGlobal.getLocaleText('acc.common.total')+'</div>'}");
            jarrColumns.put(jobjTemp);

            jobjTemp = new JSONObject();
            jobjTemp.put("header", "<b>" + (isAgedForSalesPerson ? messageSource.getMessage("acc.cust.name", null, requestcontextutilsobj) : (isReceivable ? messageSource.getMessage("acc.agedPay.cus", null, requestcontextutilsobj) : messageSource.getMessage("acc.agedPay.ven", null, requestcontextutilsobj)) + "/" + messageSource.getMessage("acc.agedPay.accName", null, requestcontextutilsobj)) + "<br>");
            jobjTemp.put("hidden", isAgedForSalesPerson && isSummary);
            jobjTemp.put("dataIndex", "personname");
            jobjTemp.put("width", 150);
            jobjTemp.put("pdfwidth", 100);
            jobjTemp.put("sortable", true);
//            jobjTemp.put("groupable", true);
//            jobjTemp.put("summaryRenderer", "function(){return '<div class='grid-summary-common'>'+WtfGlobal.getLocaleText('acc.common.total')+'</div>'}");
            jarrColumns.put(jobjTemp);

            jobjTemp = new JSONObject();
            jobjTemp.put("header", "<b>" + (isReceivable ? messageSource.getMessage("acc.cust.aliasname", null, requestcontextutilsobj) : messageSource.getMessage("acc.ven.aliasname", null, requestcontextutilsobj))+ "<br>");
            jobjTemp.put("hidden", isSummary || isAgedForSalesPerson);
            jobjTemp.put("dataIndex", "aliasname");
            jobjTemp.put("width", 150);
            jobjTemp.put("pdfwidth", 100);
            jobjTemp.put("sortable", true);
            jarrColumns.put(jobjTemp);

            jobjTemp = new JSONObject();
            jobjTemp.put("header", "<b>" + messageSource.getMessage("acc.agedPay.customerTerm", null, requestcontextutilsobj));
            jobjTemp.put("hidden", !(isAgedForSalesPerson && !isSummary));
            jobjTemp.put("dataIndex", "termname");
            jobjTemp.put("width", 150);
            jobjTemp.put("pdfwidth", 100);
            jobjTemp.put("sortable", true);
//            jobjTemp.put("groupable", true);
            jobjTemp.put("align", "center");
            jarrColumns.put(jobjTemp);

            jobjTemp = new JSONObject();
            jobjTemp.put("header", "<b>" + messageSource.getMessage("acc.agedPay.customerCreditLimit", null, requestcontextutilsobj));
            jobjTemp.put("hidden", !(isAgedForSalesPerson && !isSummary));
            jobjTemp.put("dataIndex", "creditlimitinbase");
            jobjTemp.put("align", "center");
            jobjTemp.put("width", 150);
            jobjTemp.put("pdfwidth", 100);
            jobjTemp.put("sortable", true);
//            jobjTemp.put("groupable", true);
            jobjTemp.put("renderer", "WtfGlobal.currencyRenderer");
            jarrColumns.put(jobjTemp);

            jobjTemp = new JSONObject();
            jobjTemp.put("header", "<b>" + messageSource.getMessage("acc.agedPay.gridCurrency", null, requestcontextutilsobj)); //"Currency Symbol",
            jobjTemp.put("dataIndex", "currencyname");
            jobjTemp.put("align", "center");
            jobjTemp.put("width", 150);
            jobjTemp.put("pdfwidth", 100);
            jarrColumns.put(jobjTemp);

            jobjTemp = new JSONObject();
            jobjTemp.put("header", "<b>" + messageSource.getMessage("acc.setupWizard.curEx", null, requestcontextutilsobj)); //"Exchange Rate",
            jobjTemp.put("hidden", (isSummary || isAgedForSalesPerson));
            jobjTemp.put("dataIndex", "exchangerate");
            jobjTemp.put("align", "center");
            jobjTemp.put("width", 150);
            jobjTemp.put("pdfwidth", 100);
            jarrColumns.put(jobjTemp);

            jobjTemp = new JSONObject();
            jobjTemp.put("header", "<b>" + messageSource.getMessage("acc.field.TransactionType", null, requestcontextutilsobj));
            jobjTemp.put("hidden", true);
            jobjTemp.put("dataIndex", "type");
            jobjTemp.put("align", "center");
            jobjTemp.put("width", 150);
            jobjTemp.put("pdfwidth", 100);
            jobjTemp.put("renderer", isSummary ? "function(v,m,rec){var val=WtfGlobal.withoutRateCurrencySymbol(v,m,rec); return val}" : "");
//            jobjTemp.put("groupable", true);
            jarrColumns.put(jobjTemp);

            jobjTemp = new JSONObject();
            jobjTemp.put("header", "<b>" + (isSummary ? messageSource.getMessage("acc.agedPay.gridCurrent", null, requestcontextutilsobj) : messageSource.getMessage("acc.agedPay.gridAmtDue", null, requestcontextutilsobj))+ "<br>"); //"Current":"Amount Due",
            jobjTemp.put("hidden", reportWithoutAging);
            jobjTemp.put("dataIndex", isSummary ? "amountdue1" : "amountdue");
            jobjTemp.put("align", "right");
            jobjTemp.put("width", 150);
            jobjTemp.put("pdfwidth", 100);
            jobjTemp.put("renderer", isSummary ? "function(v,m,rec){var val=WtfGlobal.withoutRateCurrencySymbol(v,m,rec); return val}" : "");
//            jobjTemp.put("renderer", "WtfGlobal.withoutRateCurrencySymbol");
            jarrColumns.put(jobjTemp);

            jobjTemp = new JSONObject();
            jobjTemp.put("header", "<b>" + messageSource.getMessage("acc.agedPay.gridCurrent", null, requestcontextutilsobj)); //"Current"
            jobjTemp.put("hidden", isSummary);
            jobjTemp.put("dataIndex", "amountdue1");
            jobjTemp.put("align", "right");
            jobjTemp.put("width", 150);
            jobjTemp.put("pdfwidth", 100);
            jobjTemp.put("renderer", isSummary ? "function(v,m,rec){var val=WtfGlobal.withoutRateCurrencySymbol(v,m,rec); return val}" : "");
//            jobjTemp.put("renderer", "WtfGlobal.withoutRateCurrencySymbol");
            jarrColumns.put(jobjTemp);

            jobjTemp = new JSONObject();
            jobjTemp.put("header", "<b>" + (!isTypeEditor ? "" : "1-") + interval + " " + messageSource.getMessage("acc.agedPay.days", null, requestcontextutilsobj) + (!isTypeEditor ? " " + messageSource.getMessage("acc.agedPay.before", null, requestcontextutilsobj) + " " : ""));
            jobjTemp.put("hidden", reportWithoutAging);
            jobjTemp.put("dataIndex", "amountdue2");
            jobjTemp.put("align", "right");
            jobjTemp.put("width", 150);
            jobjTemp.put("pdfwidth", 100);
            jobjTemp.put("renderer", isSummary ? "function(v,m,rec){var val=WtfGlobal.withoutRateCurrencySymbol(v,m,rec); return val}" : "");
//            jobjTemp.put("renderer", "WtfGlobal.withoutRateCurrencySymbol");
            jarrColumns.put(jobjTemp);

            jobjTemp = new JSONObject();
            jobjTemp.put("header", "<b>" + ((!isTypeEditor ? "" : (interval * 1 + 1) + "-") + (interval * 2)) + " " + messageSource.getMessage("acc.agedPay.days", null, requestcontextutilsobj) + (!isTypeEditor ? " " + messageSource.getMessage("acc.agedPay.before", null, requestcontextutilsobj) + " " : ""));
            jobjTemp.put("hidden", reportWithoutAging);
            jobjTemp.put("dataIndex", "amountdue3");
            jobjTemp.put("align", "right");
            jobjTemp.put("width", 150);
            jobjTemp.put("pdfwidth", 100);
            jobjTemp.put("renderer", isSummary ? "function(v,m,rec){var val=WtfGlobal.withoutRateCurrencySymbol(v,m,rec); return val}" : "");
//            jobjTemp.put("renderer", "WtfGlobal.withoutRateCurrencySymbol");
            jarrColumns.put(jobjTemp);

            jobjTemp = new JSONObject();
            jobjTemp.put("header", "<b>" + ((isTypeEditor ? ((interval * 2 + 1) + "-" + (interval * 3)) : (">" + (interval * 2))) + " " + (messageSource.getMessage("acc.agedPay.days", null, requestcontextutilsobj))));
            jobjTemp.put("hidden", !isTypeEditor || reportWithoutAging);
            jobjTemp.put("dataIndex", "amountdue4");
            jobjTemp.put("align", "right");
            jobjTemp.put("width", 150);
            jobjTemp.put("pdfwidth", 100);
            jobjTemp.put("renderer", isSummary ? "function(v,m,rec){var val=WtfGlobal.withoutRateCurrencySymbol(v,m,rec); return val}" : "");
//            jobjTemp.put("renderer", !isTypeEditor ? "function(v,m,rec){var val=WtfGlobal.withoutRateCurrencySymbol(v,m,rec); return val}" : "WtfGlobal.withoutRateCurrencySymbol)");
            jarrColumns.put(jobjTemp);

            jobjTemp = new JSONObject();
            jobjTemp.put("header", "<b>" + (isTypeEditor ? ((interval * 3 + 1) + "-" + (interval * 4)) : "") + " " + messageSource.getMessage("acc.agedPay.days", null, requestcontextutilsobj));
            jobjTemp.put("hidden", !isTypeEditor || reportWithoutAging);
            jobjTemp.put("dataIndex", "amountdue5");
            jobjTemp.put("align", "right");
            jobjTemp.put("width", 150);
            jobjTemp.put("pdfwidth", 100);
            jobjTemp.put("renderer", isSummary ? "function(v,m,rec){var val=WtfGlobal.withoutRateCurrencySymbol(v,m,rec); return val}" : "");
//            jobjTemp.put("renderer", !isTypeEditor ? "function(v,m,rec){var val=WtfGlobal.withoutRateCurrencySymbol(v,m,rec); return val}" : "WtfGlobal.withoutRateCurrencySymbol)");
            jarrColumns.put(jobjTemp);

            jobjTemp = new JSONObject();
            jobjTemp.put("header", "<b>" + (isTypeEditor ? ((interval * 4 + 1) + "-" + (interval * 5)) : "") + " " + (messageSource.getMessage("acc.agedPay.days", null, requestcontextutilsobj)));
            jobjTemp.put("hidden", !isTypeEditor || reportWithoutAging);
            jobjTemp.put("dataIndex", "amountdue6");
            jobjTemp.put("align", "right");
            jobjTemp.put("width", 150);
            jobjTemp.put("pdfwidth", 100);
            jobjTemp.put("renderer", isSummary ? "function(v,m,rec){var val=WtfGlobal.withoutRateCurrencySymbol(v,m,rec); return val}" : "");
//            jobjTemp.put("renderer", !isTypeEditor ? "function(v,m,rec){var val=WtfGlobal.withoutRateCurrencySymbol(v,m,rec); return val}" : "WtfGlobal.withoutRateCurrencySymbol)");
            jarrColumns.put(jobjTemp);

            jobjTemp = new JSONObject();
            jobjTemp.put("header", "<b>" + (isTypeEditor ? ((interval * 5 + 1) + "-" + (interval * 6)) : "") + " " + (messageSource.getMessage("acc.agedPay.days", null, requestcontextutilsobj)));
            jobjTemp.put("hidden", !isTypeEditor || reportWithoutAging);
            jobjTemp.put("dataIndex", "amountdue7");
            jobjTemp.put("align", "right");
            jobjTemp.put("width", 150);
            jobjTemp.put("pdfwidth", 100);
            jobjTemp.put("renderer", isSummary ? "function(v,m,rec){var val=WtfGlobal.withoutRateCurrencySymbol(v,m,rec); return val}" : "");
//            jobjTemp.put("renderer", !isTypeEditor ? "function(v,m,rec){var val=WtfGlobal.withoutRateCurrencySymbol(v,m,rec); return val}" : "WtfGlobal.withoutRateCurrencySymbol)");
            jarrColumns.put(jobjTemp);

            jobjTemp = new JSONObject();
            jobjTemp.put("header", "<b>" + (isTypeEditor ? (">" + (interval * 6)) : "") + " " + (messageSource.getMessage("acc.agedPay.days", null, requestcontextutilsobj)));
            jobjTemp.put("hidden", !isTypeEditor || reportWithoutAging);
            jobjTemp.put("dataIndex", "amountdue8");
            jobjTemp.put("align", "right");
            jobjTemp.put("width", 150);
            jobjTemp.put("pdfwidth", 100);
            jobjTemp.put("renderer", isSummary ? "function(v,m,rec){var val=WtfGlobal.withoutRateCurrencySymbol(v,m,rec); return val}" : "");
//            jobjTemp.put("renderer", !isTypeEditor ? "function(v,m,rec){var val=WtfGlobal.withoutRateCurrencySymbol(v,m,rec); return val}" : "WtfGlobal.withoutRateCurrencySymbol)");
            jarrColumns.put(jobjTemp);


            jobjTemp = new JSONObject();
            jobjTemp.put("header", "<b>" + (isSummary ? (messageSource.getMessage("acc.common.total", null, requestcontextutilsobj)) : "Memo")+ "<br>"); //"Memo",
            jobjTemp.put("hidden", isAgedForSalesPerson);
            jobjTemp.put("dataIndex", isSummary ? "total" : "memo");
            jobjTemp.put("align", "right");
            jobjTemp.put("width", 150);
            jobjTemp.put("pdfwidth", 100);
            jobjTemp.put("pdfrenderer", "rowcurrency");
            jobjTemp.put("renderer", isSummary ? "function(v,m,rec){var val=WtfGlobal.withoutRateCurrencySymbol(v,m,rec); return val}" : "");
            jarrColumns.put(jobjTemp);

            jobjTemp = new JSONObject();
            jobjTemp.put("header", "<b>" + messageSource.getMessage("acc.field.Term", null, requestcontextutilsobj));
            jobjTemp.put("hidden", isSummary || isAgedForSalesPerson);
            jobjTemp.put("dataIndex", "termname");
            jobjTemp.put("align", "center");
            jobjTemp.put("width", 150);
            jobjTemp.put("pdfwidth", 100);
            jobjTemp.put("sortable", true);
//            jobjTemp.put("groupable", true);
            jarrColumns.put(jobjTemp);

            jobjTemp = new JSONObject();
            jobjTemp.put("header", "<b>" + messageSource.getMessage("acc.common.total", null, requestcontextutilsobj) + " " + messageSource.getMessage("acc.fixedAssetList.grid.homCur", null, requestcontextutilsobj));
            jobjTemp.put("hidden", !isSummary);
            jobjTemp.put("dataIndex", "totalinbase");
            jobjTemp.put("align", "right");
            jobjTemp.put("pdfrenderer", "rowcurrency");
            jobjTemp.put("width", 150);
            jobjTemp.put("pdfwidth", 100);
//            jobjTemp.put("summaryType", "sum");
            jobjTemp.put("hidecurrency", true);
//            jobjTemp.put("summaryRenderer", "function(value,m,rec){var retVal = WtfGlobal.withoutRateCurrencySymbol(value);return '<b>'+retVal+'</b>';}");
            jobjTemp.put("renderer", "WtfGlobal.currencyRenderer");
            jarrColumns.put(jobjTemp);

            jobjTemp = new JSONObject();
            jobjTemp.put("header", "<b>" + messageSource.getMessage("acc.agedPay.gridAmtDueHomeCurrency", null, requestcontextutilsobj));
            jobjTemp.put("hidden", isSummary);
            jobjTemp.put("dataIndex", "amountdueinbase");
            jobjTemp.put("align", "right");
            jobjTemp.put("pdfrenderer", "rowcurrency");
            jobjTemp.put("width", 150);
            jobjTemp.put("pdfwidth", 100);
//            jobjTemp.put("summaryType", "sum");
            jobjTemp.put("hidecurrency", true);
//            jobjTemp.put("summaryRenderer", "function(value,m,rec){var retVal = WtfGlobal.withoutRateCurrencySymbol(value);return '<b>'+retVal+'</b>';}");
            jobjTemp.put("renderer", "WtfGlobal.currencyRenderer");
            jarrColumns.put(jobjTemp);
            
            
            returnMap.put("record", jarrRecords);
            returnMap.put("columns", jarrColumns);

        } catch (Exception ex) {
            Logger.getLogger(AccInvoiceServiceImpl.class.getName()).log(Level.SEVERE, null, ex);
        }
        return returnMap;
    }
    
 @Override   
    public Map<String, JSONArray> getColumnModuleForMonthlyTradingAndProfitLossReport(Map<String, Object> requestParams) throws ServiceException {
        Map<String, JSONArray> returnMap = new HashMap<>();
        Locale requestcontextutilsobj = null;
        JSONArray headers = null;

        try {

            if (requestParams.containsKey("requestcontextutilsobj")) {
                requestcontextutilsobj = (Locale) requestParams.get("requestcontextutilsobj");
            }
            
            if (requestParams.containsKey("headers")) {
                headers = (JSONArray) requestParams.get("headers");
            }

            // Column Model
            JSONArray jarrColumns = new JSONArray();
            JSONArray jarrRecords = new JSONArray();

            String StoreRec = "accountname,accountid,amount_0,amount_1,amount_2,amount_3,amount_4,amount_5,amount_6,amount_7,amount_8,amount_9,amount_10,"
                    + "amount_11,amount_12,amount_13,amount_14,amount_15,amount_16,amount_17,amount_18,accountflag,isdebit,level,fmt,leaf";

            String[] recArr = StoreRec.split(",");
            JSONObject jobjTemp = new JSONObject();
            for (String rec : recArr) {
                jobjTemp = new JSONObject();
                jobjTemp.put("name", rec);
                jarrRecords.put(jobjTemp);
            }

            jobjTemp = new JSONObject();
            jobjTemp.put("header", "<b>" + messageSource.getMessage("acc.balanceSheet.particulars", null, requestcontextutilsobj));//"Bill Date",
            jobjTemp.put("dataIndex", "accountname");
            jobjTemp.put("width", 150);
            jobjTemp.put("pdfwidth", 100);
            jobjTemp.put("align", "center");
            jobjTemp.put("summaryRenderer", "function(){return WtfGlobal.summaryRenderer(WtfGlobal.getLocaleText('acc.common.total'));}.createDelegate(this)");
            jobjTemp.put("renderer", "this.formatAccountName");
            jarrColumns.put(jobjTemp);


            for (int i = 0; i < headers.length(); i++) {
                jobjTemp = new JSONObject();
                jobjTemp.put("header", "<b>" + headers.get(i));
                jobjTemp.put("dataIndex", "amount_" + i);
                jobjTemp.put("width", 110);
                jobjTemp.put("pdfwidth", 100);
                jobjTemp.put("align", "right");
                jobjTemp.put("style", "text-align:right");
                jobjTemp.put("renderer", "this.formatData");
                jarrColumns.put(jobjTemp);

            };

            returnMap.put("record", jarrRecords);
            returnMap.put("columns", jarrColumns);

        } catch (Exception ex) {
            Logger.getLogger(AccInvoiceServiceImpl.class.getName()).log(Level.SEVERE, null, ex);
        }
        return returnMap;
    }
    
    @Override
    public Map<String, JSONArray> getColumnModuleForDeliveryOrder(Map<String, Object> requestParams) throws ServiceException {
        Map<String, JSONArray> returnMap = new HashMap<>();
        Locale requestcontextutilsobj = null;

        try {

            if (requestParams.containsKey("requestcontextutilsobj")) {
                requestcontextutilsobj = (Locale) requestParams.get("requestcontextutilsobj");
            }

            // Column Model
            JSONArray jarrColumns = new JSONArray();
            JSONArray jarrRecords = new JSONArray();

            String StoreRec = "billid,companyid,companyname,journalentryid,entryno,billto,orderamount,shipto,mode,billno,date,shipdate,termid,termdetails,"
                    + "termamount,personname,aliasname,customerporefno,personemail,personid,shipping,deleted,memo,costcenterid,costcenterName,statusID,shipvia,"
                    + "fob,isLinkedTransaction,permitNumber,externalcurrencyrate,status,isautogenerateddo,invoiceno,approvalstatusinfo,approvalstatus,"
                    + "withoutinventory,isfavourite,isprinted,currencysymbol,currencyid,amount,amountinbase,invoicenumber,sequenceformatid,lasteditedby,"
                    + "isConsignment,isLeaseFixedAsset,isFixedAsset,custWarehouse,movementtype,movementtypename,driver,billingAddressType,billingAddress,"
                    + "billingCountry,billingState,billingPostal,billingEmail,billingFax,billingMobile,billingPhone,billingContactPerson,billingRecipientName,"
                    + "billingContactPersonNumber,billingContactPersonDesignation,billingWebsite,billingCity,shippingAddressType,shippingAddress,shippingCountry,"
                    + "shippingState,shippingCity,shippingEmail,shippingFax,shippingMobile,shippingPhone,shippingPostal,shippingContactPersonNumber,"
                    + "shippingContactPersonDesignation,shippingWebsite,shippingRecipientName,shippingContactPerson,shippingRoute,vendcustShippingAddress,"
                    + "vendcustShippingCountry,vendcustShippingState,vendcustShippingCity,vendcustShippingEmail,vendcustShippingFax,vendcustShippingMobile,"
                    + "vendcustShippingPhone,vendcustShippingPostal,vendcustShippingContactPersonNumber,vendcustShippingContactPersonDesignation,"
                    + "vendcustShippingWebsite,vendcustShippingContactPerson,vendcustShippingRecipientName,vendcustShippingAddressType,mapSalesPersonName,"
                    + "salesPerson,agent,agentname,isTaxRowLvlAndFromTaxGlobalLvl,taxid,includeprotax,isFromPOS,attachdoc,attachment,islinkedtransaction,"
                    + "hasAccess,currencyCode,discount,getFullShippingAddress";

            String[] recArr = StoreRec.split(",");
            JSONObject jobjTemp = new JSONObject();
            for (String rec : recArr) {
                jobjTemp = new JSONObject();
                jobjTemp.put("name", rec);
                if(rec.equals("date")||rec.equals("shipdate")){
                    jobjTemp.put("type", "date");
                }
                jarrRecords.put(jobjTemp);
            }
            
            boolean isCustomer = true;

            jobjTemp = new JSONObject();
            jobjTemp.put("hidden", true);
            jobjTemp.put("dataIndex", "billid");
            jarrColumns.put(jobjTemp);

            jobjTemp = new JSONObject();
            jobjTemp.put("hidden", true);
            jobjTemp.put("dataIndex", "companyname");
            jarrColumns.put(jobjTemp);         

            jobjTemp = new JSONObject();
            jobjTemp.put("header", "<b>" + "Delivery Order " +messageSource.getMessage("acc.cn.9", null, requestcontextutilsobj)); //bill number
            jobjTemp.put("dataIndex", "billno");
            jobjTemp.put("width", 150);
            jobjTemp.put("pdfwidth", 75);
            jobjTemp.put("sortable", true);
            jarrColumns.put(jobjTemp);

            jobjTemp = new JSONObject();
            jobjTemp.put("header", "<b>" + messageSource.getMessage("acc.agedPay.gridJEno", null, requestcontextutilsobj));  //"Journal Entry Number",
            jobjTemp.put("hidden", true);
            jobjTemp.put("dataIndex", "entryno");
            jobjTemp.put("width", 150);
            jobjTemp.put("pdfwidth", 100);
            jobjTemp.put("sortable", true);
            jarrColumns.put(jobjTemp);

            jobjTemp = new JSONObject();
            jobjTemp.put("header", "<b>" + "Delivery Order " + messageSource.getMessage("acc.inventoryList.date", null, requestcontextutilsobj));//"Bill Date",
            jobjTemp.put("dataIndex", "date");
            jobjTemp.put("width", 150);
            jobjTemp.put("pdfwidth", 100);
            jobjTemp.put("align", "center");
            jobjTemp.put("renderer", "WtfGlobal.onlyDateDeletedRenderer");
            jarrColumns.put(jobjTemp);
            
            jobjTemp = new JSONObject();
            jobjTemp.put("header", "<b>" + messageSource.getMessage("acc.invoiceList.shipdate", null, requestcontextutilsobj));//"Ship Date",
            jobjTemp.put("hidden", true);
            jobjTemp.put("dataIndex", "shipdate");
            jobjTemp.put("renderer", "WtfGlobal.onlyDateDeletedRenderer");
            jarrColumns.put(jobjTemp);

            jobjTemp = new JSONObject();
            jobjTemp.put("header", "<b>" + (isCustomer? messageSource.getMessage("acc.invoiceList.cust", null, requestcontextutilsobj):messageSource.getMessage("acc.invoiceList.ven", null, requestcontextutilsobj)));//"business person",
            jobjTemp.put("dataIndex", "personname");
            jobjTemp.put("width", 150);
            jobjTemp.put("pdfwidth", 100);
            jobjTemp.put("sortable", true);
            jarrColumns.put(jobjTemp);

            jobjTemp = new JSONObject();
            jobjTemp.put("header", "<b>" + (isCustomer? messageSource.getMessage("acc.cust.aliasname", null, requestcontextutilsobj):messageSource.getMessage("acc.ven.aliasname", null, requestcontextutilsobj)));
            jobjTemp.put("hidden", true);
            jobjTemp.put("dataIndex", "aliasname");
            jobjTemp.put("width", 150);
            jobjTemp.put("pdfwidth", 100);
            jobjTemp.put("sortable", true);
            jarrColumns.put(jobjTemp);
            
            jobjTemp = new JSONObject();
            jobjTemp.put("header", "<b>" + messageSource.getMessage("acc.common.currencyFilterLable", null, requestcontextutilsobj));//"Currency Code",
            jobjTemp.put("hidden", true);
            jobjTemp.put("dataIndex", "currencyCode");
            jarrColumns.put(jobjTemp);
            
            jobjTemp = new JSONObject();
            jobjTemp.put("header", "<b>" + messageSource.getMessage("acc.invoice.CustomerPOrefNo", null, requestcontextutilsobj));//"Customer PO Ref. No.",
            jobjTemp.put("hidden", true);
            jobjTemp.put("dataIndex", "customerporefno");
            jarrColumns.put(jobjTemp);

            jobjTemp = new JSONObject();
            jobjTemp.put("header", "<b>" + messageSource.getMessage("acc.invoiceList.discount", null, requestcontextutilsobj));//"Discount",
            jobjTemp.put("dataIndex", "discount");
            jobjTemp.put("width", 150);
            jobjTemp.put("pdfwidth", 100);
            jobjTemp.put("align", "right");
            jobjTemp.put("renderer", "WtfGlobal.withoutRateCurrencyDeletedSymbol");
            jarrColumns.put(jobjTemp);

            jobjTemp = new JSONObject();
            jobjTemp.put("header", "<b>" + messageSource.getMessage("acc.invoiceList.totAmt", null, requestcontextutilsobj));//"Total Amount",
            jobjTemp.put("align", "right");
            jobjTemp.put("hidden", true);
            jobjTemp.put("dataIndex", "amount");
            jobjTemp.put("width", 150);
            jobjTemp.put("pdfwidth", 100);
            jobjTemp.put("renderer", "WtfGlobal.withoutRateCurrencyDeletedSymbol");
            jarrColumns.put(jobjTemp);

            jobjTemp = new JSONObject();
            jobjTemp.put("header", "<b>" + messageSource.getMessage("acc.invoiceList.totAmtHome", null, requestcontextutilsobj)); //"Total Amount in Base",
            jobjTemp.put("align", "right");
            jobjTemp.put("hidden", true);
            jobjTemp.put("dataIndex", "amountinbase");
            jobjTemp.put("width", 150);
            jobjTemp.put("pdfwidth", 100);
            jobjTemp.put("renderer", "WtfGlobal.withoutRateCurrencyDeletedSymbol");
            jarrColumns.put(jobjTemp);

            jobjTemp = new JSONObject();
            jobjTemp.put("header", "<b>" + messageSource.getMessage("acc.common.memo", null, requestcontextutilsobj));//"memo",
            jobjTemp.put("dataIndex", "memo");
            jobjTemp.put("width", 150);
            jobjTemp.put("pdfwidth", 100);
            jobjTemp.put("renderer", "function(value){var res = \"<span class='gridRow' style='width:200px;'  wtf:qtip='\"+value+\"'>\"+Wtf.util.Format.ellipsis(value,20)+\"</span>\";return res;}");
            jarrColumns.put(jobjTemp);

            jobjTemp = new JSONObject();
            jobjTemp.put("header", "<b>" + (isCustomer? messageSource.getMessage("acc.invoiceList.salesPerson", null, requestcontextutilsobj):messageSource.getMessage("acc.field.AgentSalesman", null, requestcontextutilsobj))); //"Sales Person"
            jobjTemp.put("dataIndex", isCustomer? "mapSalesPersonName":"agentname");
            jobjTemp.put("width", 150);
            jobjTemp.put("pdfwidth", 100);
            jobjTemp.put("sortable", true);
            jobjTemp.put("renderer", "WtfGlobal.deletedRenderer");
            jarrColumns.put(jobjTemp);
            
            jobjTemp = new JSONObject();
            jobjTemp.put("header", "<b>" + messageSource.getMessage("acc.invoiceList.status", null, requestcontextutilsobj)); //"Status"
            jobjTemp.put("dataIndex", "status");
            jobjTemp.put("width", 150);
            jobjTemp.put("pdfwidth", 100);
            jobjTemp.put("renderer", "WtfGlobal.deletedRenderer");
            jarrColumns.put(jobjTemp);
            
            jobjTemp = new JSONObject();
            jobjTemp.put("header", "<b>" + messageSource.getMessage("acc.field.Approval", null, requestcontextutilsobj) + messageSource.getMessage("acc.invoiceList.status", null, requestcontextutilsobj)); //"Status"
            jobjTemp.put("dataIndex", "approvalstatusinfo");
            jobjTemp.put("width", 150);
            jobjTemp.put("pdfwidth", 100);
            jobjTemp.put("renderer", "WtfGlobal.deletedRenderer");
            jarrColumns.put(jobjTemp);

            returnMap.put("record", jarrRecords);
            returnMap.put("columns", jarrColumns);

        } catch (Exception ex) {
            Logger.getLogger(AccInvoiceServiceImpl.class.getName()).log(Level.SEVERE, null, ex);
        }
        return returnMap;
    }
    
     @Override
    //get Invoice Rows-Product Information
    public JSONArray getInvoiceRows(JSONObject paramJobj, String[] invoices,Map<String, Object> extraAttributesMap) throws ServiceException, SessionExpiredException {
        JSONArray jArr = new JSONArray();
        KwlReturnObject companyObj = null,capresult = null;
        String companyid = null;
        Company company = null;
        CompanyAccountPreferences preferences = null;
        ExtraCompanyPreferences extraCompanyPreferences = null;
        KWLCurrency currency = null;
        List masterFieldsResultList = null;
        HashMap<String, Integer> FieldMap = null,serialModulefieldMap= null,ProdFieldMap=null;
        boolean isInvoiceOptimizeExport = paramJobj.optBoolean("isInvoiceOptimizeExport",false);
        try {
            companyid = paramJobj.getString(Constants.companyKey);
            
            if(extraAttributesMap!=null && !extraAttributesMap.containsKey("companyObj")){ 
                companyObj = accountingHandlerDAOobj.getObject(Company.class.getName(), companyid);
                company = (Company) companyObj.getEntityList().get(0);
                extraAttributesMap.put("companyObj", company);
            } else {           
                company = (Company)extraAttributesMap.get("companyObj");
            }
//            company = (Company) companyObj.getEntityList().get(0);
            int countryid = company.getCountry() != null ? Integer.parseInt(company.getCountry().getID()) : 0;
            String gcurrencyid = paramJobj.getString(Constants.globalCurrencyKey);
            DateFormat df = authHandler.getDateOnlyFormat();
            HashMap<String, Object> requestParams = AccountingManager.getGlobalParamsJson(paramJobj);
            requestParams.put("companyid", companyid);
            if(extraAttributesMap!=null && !extraAttributesMap.containsKey("preferencesObj")){ 
                capresult = accountingHandlerDAOobj.getObject(CompanyAccountPreferences.class.getName(), companyid);
                preferences = (CompanyAccountPreferences) capresult.getEntityList().get(0);
                extraAttributesMap.put("preferencesObj", preferences);
            } else {
                preferences = (CompanyAccountPreferences)extraAttributesMap.get("preferencesObj");
            }
            
            if(extraAttributesMap!=null && !extraAttributesMap.containsKey("extraCompanyPreferencesObj")){ 
                capresult = accountingHandlerDAOobj.getObject(ExtraCompanyPreferences.class.getName(), companyid);
                extraCompanyPreferences = (ExtraCompanyPreferences) capresult.getEntityList().get(0);
                extraAttributesMap.put("extraCompanyPreferencesObj", extraCompanyPreferences);
            } else {
                extraCompanyPreferences = extraCompanyPreferences = (ExtraCompanyPreferences)extraAttributesMap.get("extraCompanyPreferencesObj");
            }
            boolean isConsignment = (StringUtil.isNullOrEmpty(paramJobj.optString(Constants.isConsignment, null))) ? false : Boolean.parseBoolean(paramJobj.getString(Constants.isConsignment));
            boolean isLeaseFixedAsset = (StringUtil.isNullOrEmpty(paramJobj.optString(Constants.isLeaseFixedAsset,null))) ? false : Boolean.parseBoolean(paramJobj.getString(Constants.isLeaseFixedAsset));
            if(extraAttributesMap!=null && !extraAttributesMap.containsKey("currencyObj")){ 
                KwlReturnObject curresult = kwlCommonTablesDAOObj.getObject(KWLCurrency.class.getName(), gcurrencyid);
                currency = (KWLCurrency) curresult.getEntityList().get(0);
                extraAttributesMap.put("currencyObj", currency);
            } else {
                currency = (KWLCurrency)extraAttributesMap.get("currencyObj");
            }
            
            boolean doflag = paramJobj.optString("doflag",null) != null ? true : false;
            boolean srflag = paramJobj.optString("srflag",null) != null ? true : false;
            int module = (!StringUtil.isNullOrEmpty(paramJobj.optString(Constants.moduleid))) ? Integer.parseInt(paramJobj.getString(Constants.moduleid)) : 0;
            boolean isEdit = (StringUtil.isNullOrEmpty(paramJobj.optString("isEdit",null))) ? false : Boolean.parseBoolean(paramJobj.getString("isEdit"));
            boolean islinkSItoDN = (StringUtil.isNullOrEmpty(paramJobj.optString("islinkPItoCN",null))) ? false : Boolean.parseBoolean(paramJobj.getString("islinkPItoCN"));
            boolean salesPurchaseReturnflag = false;
            boolean isCopyInvoice = false;
            boolean isBatchForProduct = false;
            boolean isSerialForProduct = false;
            boolean isWarehouseForProduct = false;
            boolean isLocationForProduct = false;
            boolean isRowForProduct = false;
            boolean isRackForProduct = false;
            boolean isBinForProduct = false;
            String description = "";
            String dtype = paramJobj.optString("dtype",null);
            boolean isForm = !StringUtil.isNullOrEmpty(paramJobj.optString("isForm",null)) ? Boolean.parseBoolean(paramJobj.getString("isForm")) : false;
            boolean isView = !StringUtil.isNullOrEmpty(paramJobj.optString("isView",null)) ? Boolean.parseBoolean(paramJobj.getString("isView")) : false;
            Map<String, Object> ProductFieldsRequestParams = new HashMap();
            ProductFieldsRequestParams.put(Constants.companyKey, companyid);
            ProductFieldsRequestParams.put(Constants.moduleid, Constants.Acc_Invoice_ModuleId);
            String stDate = authHandler.getDates(preferences.getFinancialYearFrom(), true);
            String endDate = authHandler.getDates(preferences.getFinancialYearFrom(), false);
            if(extraAttributesMap!=null && !extraAttributesMap.containsKey("masterFieldsResultListObj")){ 
                masterFieldsResultList = CommonFunctions.getproductmastersFieldsToShowLineLevel(ProductFieldsRequestParams, accountingHandlerDAOobj);
                extraAttributesMap.put("masterFieldsResultListObj", masterFieldsResultList);
            } else {           
                masterFieldsResultList =(List)extraAttributesMap.get("masterFieldsResultListObj");
            }
            
            String productsDefaultLocation = "", productsDefaultWarehouse = "";
            boolean isForReport = false;        
            int countForCheckPartialInvoiceLinking=0;
            boolean isPartialInvoice=false;
            DateFormat userDateFormat=null;
            if(paramJobj.has(Constants.userdateformat)){
                    userDateFormat=new SimpleDateFormat(String.valueOf(paramJobj.get("userdateformat")));
            }

            if (!StringUtil.isNullOrEmpty(dtype) && dtype.equals("report")) {
                isForReport = true;
            }
            boolean isExport = false;
            if (paramJobj.optString(Constants.isExport, null) != null) {
                isExport = Boolean.parseBoolean(paramJobj.getString(Constants.isExport));
            }

            if (!StringUtil.isNullOrEmpty(paramJobj.optString("salesPurchaseReturnflag",null))) {
                salesPurchaseReturnflag = Boolean.parseBoolean(paramJobj.getString("salesPurchaseReturnflag"));
            }

            requestParams.put("isCopyInvoice", paramJobj.optString("isCopyInvoice",null));
            if (requestParams.containsKey("isCopyInvoice") && requestParams.get("isCopyInvoice") != null) {
                isCopyInvoice = Boolean.valueOf((String) requestParams.get("isCopyInvoice"));
            }
            boolean linkingFlag = (StringUtil.isNullOrEmpty(paramJobj.optString("linkingFlag"))) ? false : Boolean.parseBoolean(paramJobj.getString("linkingFlag"));
            boolean isForDOGROLinking = (StringUtil.isNullOrEmpty(paramJobj.optString("isForDOGROLinking"))) ? false : Boolean.parseBoolean(paramJobj.getString("isForDOGROLinking"));
            invoices = (invoices == null) ? paramJobj.getString("bills").split(",") : invoices;
            int moduleid = Constants.Acc_Invoice_ModuleId;
            if (invoices != null && invoices.length > 0) {
                KwlReturnObject result1 = kwlCommonTablesDAOObj.getObject(Invoice.class.getName(), invoices[0]);
                Invoice invoiceobj = (Invoice) result1.getEntityList().get(0);
                moduleid = invoiceobj.isFixedAssetInvoice() ? Constants.Acc_FixedAssets_DisposalInvoice_ModuleId : isConsignment ? Constants.Acc_ConsignmentInvoice_ModuleId : Constants.Acc_Invoice_ModuleId;
                if (isLeaseFixedAsset) {
                    moduleid = Constants.LEASE_INVOICE_MODULEID;
                }
            }
            int i = 0;
            HashMap<String, Object> fieldrequestParams = new HashMap();
            HashMap<String, String> customFieldMap = new HashMap<String, String>();
            HashMap<String, String> customDateFieldMap = new HashMap<String, String>();
            fieldrequestParams.put(Constants.filter_names, Arrays.asList(Constants.companyid, Constants.moduleid, Constants.customcolumn));
            fieldrequestParams.put(Constants.filter_values, Arrays.asList(companyid, moduleid, 1));
            HashMap<String, String> replaceFieldMap = new HashMap<String, String>();
            if (extraAttributesMap != null && !extraAttributesMap.containsKey("FieldMapObj")) {
                FieldMap = accAccountDAOobj.getFieldParamsCustomMapForRows(fieldrequestParams, replaceFieldMap, customFieldMap, customDateFieldMap);
                extraAttributesMap.put("FieldMapObj", FieldMap);
                extraAttributesMap.put("replaceFieldMapObj", replaceFieldMap);
                extraAttributesMap.put("customFieldMapObj", customFieldMap);
                extraAttributesMap.put("customDateFieldMapObj", customDateFieldMap);
            } else {
                FieldMap = (HashMap<String, Integer>)extraAttributesMap.get("FieldMapObj");
                replaceFieldMap = (HashMap<String, String>)extraAttributesMap.get("replaceFieldMapObj");
                customFieldMap = (HashMap<String, String>)extraAttributesMap.get("customFieldMapObj");
                customDateFieldMap = (HashMap<String, String>)extraAttributesMap.get("customDateFieldMapObj");
            }
            boolean isLinkedDoInSI = false; // flag to check if DO is linked in SI.
            JSONObject linkedDoIds = new JSONObject(); //IDs of dodetails that are linked in SI
            HashMap<String, Object> invRequestParams = new HashMap<String, Object>();
            ArrayList filter_names = new ArrayList(), filter_params = new ArrayList(), order_by = new ArrayList(), order_type = new ArrayList();
            filter_names.add("invoice.ID");
            order_by.add("srno");
            order_type.add("asc");
            invRequestParams.put(Constants.filterNamesKey, filter_names);
            invRequestParams.put(Constants.filterParamsKey, filter_params);
            invRequestParams.put("order_by", order_by);
            invRequestParams.put("order_type", order_type);
            HashMap<String, Object> serialModuleParams = new HashMap();
            serialModuleParams.put(Constants.filter_names, Arrays.asList(Constants.companyid, Constants.moduleid, Constants.customcolumn));
            serialModuleParams.put(Constants.filter_values, Arrays.asList(companyid, Constants.SerialWindow_ModuleId, 1));
            HashMap<String, String> replaceFieldMap2 = new HashMap<String, String>();
            HashMap<String, String> customFieldMap2 = new HashMap<String, String>();
            HashMap<String, String> customDateFieldMap2 = new HashMap<String, String>();
            if (extraAttributesMap != null && !extraAttributesMap.containsKey("serialModulefieldMapObj")) {
                serialModulefieldMap = accAccountDAOobj.getFieldParamsCustomMapForRows(serialModuleParams, replaceFieldMap2, customFieldMap2, customDateFieldMap2);
                extraAttributesMap.put("serialModulefieldMapObj", serialModulefieldMap);
                extraAttributesMap.put("replaceFieldMapObj2", replaceFieldMap2);
                extraAttributesMap.put("customFieldMapObj2", customFieldMap2);
                extraAttributesMap.put("customDateFieldMapObj2", customDateFieldMap2);
            } else {
                serialModulefieldMap = (HashMap<String, Integer>)extraAttributesMap.get("serialModulefieldMapObj");
                replaceFieldMap2 = (HashMap<String, String>)extraAttributesMap.get("replaceFieldMapObj2");
                customFieldMap2 = (HashMap<String, String>)extraAttributesMap.get("customFieldMapObj2");
                customDateFieldMap2 = (HashMap<String, String>)extraAttributesMap.get("customDateFieldMapObj2");
            }
            while (invoices != null && i < invoices.length) {
               countForCheckPartialInvoiceLinking=0;
               isPartialInvoice=false;
                KwlReturnObject result = kwlCommonTablesDAOObj.getObject(Invoice.class.getName(), invoices[i]);
                Invoice invoice = (Invoice) result.getEntityList().get(0);
                filter_params.clear();
                filter_params.add(invoice.getID());
                KwlReturnObject idresult = accInvoiceDAOobj.getInvoiceDetails(invRequestParams);
                List<InvoiceDetail> invoiceDetails = idresult.getEntityList();
                JournalEntry je = invoice.getJournalEntry();
                HashMap hm = applyCreditNotes(requestParams, invoice);
                Map<InvoiceDetail, DeliveryOrderDetail> invoiceDOMap = new HashMap<>();
                StringBuilder documentIDs = new StringBuilder();
                for (InvoiceDetail invoiceDetail : invoiceDetails) {
                    DeliveryOrderDetail deliveryoderdetailrow = new DeliveryOrderDetail();
                    ArrayList new_filter_names = new ArrayList();
                    new_filter_names.add("cidetails.ID");
                    HashMap<String, Object> doRequestParams = new HashMap<String, Object>();
                    ArrayList new_filter_params = new ArrayList();
                    new_filter_params.add(invoiceDetail.getID());
                    doRequestParams.put(Constants.filterNamesKey, new_filter_names);
                    doRequestParams.put(Constants.filterParamsKey, new_filter_params);
                    doRequestParams.put("order_by", order_by);
                    doRequestParams.put("order_type", order_type);
                    if (!isCopyInvoice) {
                        KwlReturnObject podresult = accInvoiceDAOobj.getDeliveryOrderDetails(doRequestParams);
                        List doDetailsList = podresult.getEntityList();
                        if (islinkSItoDN && (StringUtil.isNullObject(doDetailsList) || doDetailsList.isEmpty())) {
                            Map<String, Object> paramMap = new HashMap<>();
                            paramMap.put("id", invoiceDetail.getID());
                            Object doDetailsObj = accInvoiceDAOobj.executeQueryWithProjection(InvoiceDetail.class, new String[]{"deliveryOrderDetail"}, paramMap);
                            if (doDetailsObj != null) {
                                DeliveryOrderDetail doDetails = (DeliveryOrderDetail)doDetailsObj;
                                doDetailsList.add(doDetails);
                                isLinkedDoInSI = true;
                                linkedDoIds.put(invoiceDetail.getID(), doDetails.getID());
                            }
                        }
                        if (doDetailsList != null && doDetailsList.size() > 0) {
                            Iterator deliveryoderdetailitr = doDetailsList.iterator();
                            deliveryoderdetailrow = (DeliveryOrderDetail) deliveryoderdetailitr.next();
                            if (!invoice.isIsconsignment()) {
                                if (preferences.isIsBatchCompulsory() || preferences.isIsSerialCompulsory() || preferences.isIslocationcompulsory() || preferences.isIswarehousecompulsory() || preferences.isIsrowcompulsory() || preferences.isIsrackcompulsory() || preferences.isIsbincompulsory()) {  //check if company level option is on then only we will check productt level
                                    Inventory inv = invoiceDetail.getInventory();
                                    Product product = inv.getProduct();
                                    if (product != null) {
                                        if (product.isIsBatchForProduct() || product.isIslocationforproduct() || product.isIswarehouseforproduct() || product.isIsrowforproduct() || product.isIsrackforproduct() || product.isIsbinforproduct()) {
                                            documentIDs.append("'" + deliveryoderdetailrow.getID() + "'").append(",");
                                        }
                                    }
                                }
                            }
                            invoiceDOMap.put(invoiceDetail, deliveryoderdetailrow);
                        }
                    }
                }
                    Map<String, List<Object[]>> baMap = new HashMap<>();
                    Map<String, Object> batchSerialReqMap = new HashMap<>();
                    batchSerialReqMap.put(Constants.companyKey, companyid);
                    batchSerialReqMap.put(Constants.df, df);
                    batchSerialReqMap.put("linkingFlag", linkingFlag);
                    batchSerialReqMap.put("isEdit", isEdit);
                    batchSerialReqMap.put(Constants.isConsignment, isConsignment);
                    batchSerialReqMap.put("moduleID", moduleid);
                    if (!isInvoiceOptimizeExport) {
                        if (documentIDs.length() > 0) {
                            batchSerialReqMap.put("moduleID", Constants.Acc_Delivery_Order_ModuleId); // Send DO moduleid if autoDO with Invoice 
                            batchSerialReqMap.put("documentIds", documentIDs.substring(0, documentIDs.length() - 1));
                            baMap = accInvoiceServiceDAO.getBatchDetailsMap(batchSerialReqMap);
                        }
                    }
                if (invoiceDetails != null && !invoiceDetails.isEmpty()) {
                    for (InvoiceDetail row : invoiceDetails) {
                        JSONObject obj = new JSONObject();
                        if (!isInvoiceOptimizeExport) {
                            obj.put("isLinkedDoInSI",isLinkedDoInSI);
                            obj.put("linkedDoIds",linkedDoIds);
                        }
                        DeliveryOrderDetail deliveryoderdetailrow = new DeliveryOrderDetail();
                        HashMap<String, Object> doRequestParams = new HashMap<String, Object>();

                        ArrayList new_filter_names = new ArrayList();
                        new_filter_names.add("cidetails.ID");

                        ArrayList new_filter_params = new ArrayList();
                        new_filter_params.add(row.getID());

                        doRequestParams.put(Constants.filterNamesKey, new_filter_names);
                        doRequestParams.put(Constants.filterParamsKey, new_filter_params);
                        doRequestParams.put("order_by", order_by);
                        doRequestParams.put("order_type", order_type);

                        if (!isCopyInvoice) {
                            if (invoiceDOMap.containsKey(row)) {
                                deliveryoderdetailrow = invoiceDOMap.get(row);
                            }
                        }
                        if (!isInvoiceOptimizeExport) {
                            obj.put("bomid", deliveryoderdetailrow.getBomcode() != null ? deliveryoderdetailrow.getBomcode().getID() : "");
                            obj.put("bomcode", deliveryoderdetailrow.getBomcode() != null ? deliveryoderdetailrow.getBomcode().getBomCode() : "");
                        }
                        // ## Get Custom Field Data 
                        Map<String, Object> variableMap = new HashMap<String, Object>();
                        HashMap<String, Object> invDetailRequestParams = new HashMap<String, Object>();
                        ArrayList Detailfilter_names = new ArrayList(), Detailfilter_params = new ArrayList();
                        Detailfilter_names.add(Constants.Acc_JEDetail_recdetailId);
                        Detailfilter_params.add(row.getID());
                        invDetailRequestParams.put(Constants.filterNamesKey, Detailfilter_names);
                        invDetailRequestParams.put(Constants.filterParamsKey, Detailfilter_params);
                        KwlReturnObject idcustresult = accInvoiceDAOobj.getInvoiceDetailsCustomData(invDetailRequestParams);
                        if (idcustresult.getEntityList().size() > 0) {
                            AccJEDetailCustomData jeDetailCustom = (AccJEDetailCustomData) idcustresult.getEntityList().get(0);
                            AccountingManager.setCustomColumnValues(jeDetailCustom, FieldMap, replaceFieldMap, variableMap);
                            if (jeDetailCustom != null) {
                                JSONObject params = new JSONObject();
                                params.put(Constants.userdf,userDateFormat);
                                params.put(Constants.isExport, isExport);
                                params.put(Constants.isForReport, isForReport);
                                params.put(Constants.isdefaultHeaderMap,paramJobj.optBoolean(Constants.isdefaultHeaderMap, false));
                                boolean getlineItemDetailsflag = (paramJobj.optString("getlineItemDetailsflag", null) != null) ? Boolean.FALSE.parseBoolean((String) paramJobj.get("getlineItemDetailsflag")) : false;
                                if (linkingFlag && (isForDOGROLinking || salesPurchaseReturnflag || islinkSItoDN) && !isForReport) {
                                    int moduleId = invoice.isFixedAssetInvoice() ? Constants.Acc_FixedAssets_DeliveryOrder_ModuleId : Constants.Acc_Delivery_Order_ModuleId;
                                    if (salesPurchaseReturnflag) {
                                        moduleId = Constants.Acc_Sales_Return_ModuleId;
                                    }
                                    if(islinkSItoDN){
                                        moduleId = Constants.Acc_Debit_Note_ModuleId;
                                    }
                                    params.put("linkModuleId", moduleId);
                                    params.put("isLink", true);
                                    params.put(Constants.companyKey, companyid);
                                }
                                if (!getlineItemDetailsflag) {
                                    fieldDataManagercntrl.getLineLevelCustomData(variableMap, customFieldMap, customDateFieldMap, obj, params);
                                } else {
                                    fieldDataManagercntrl.getLineLevelCustomDataWithKey(variableMap, customFieldMap, customDateFieldMap, obj, params);
                                }
                            }
                        }
                        fieldrequestParams = new HashMap();
                        variableMap = new HashMap<String, Object>();
                        fieldrequestParams.put(Constants.filter_names, Arrays.asList(Constants.companyid, Constants.moduleid, Constants.customcolumn));
                        fieldrequestParams.put(Constants.filter_values, Arrays.asList(companyid, Constants.Acc_Product_Master_ModuleId, 0));
                        replaceFieldMap = new HashMap<String, String>();
                        if (extraAttributesMap != null && !extraAttributesMap.containsKey("ProdFieldMapMapObj")) {
                            ProdFieldMap = accAccountDAOobj.getFieldParamsMap(fieldrequestParams, replaceFieldMap);
                            extraAttributesMap.put("ProdFieldMapMapObj", ProdFieldMap);
                            extraAttributesMap.put("ProdReplaceFieldMapMapObj", replaceFieldMap);
                        } else {
                            ProdFieldMap = (HashMap<String, Integer>) extraAttributesMap.get("ProdFieldMapMapObj");
                            replaceFieldMap = (HashMap<String, String>) extraAttributesMap.get("ProdReplaceFieldMapMapObj");
                        }
                        
                        invDetailRequestParams.clear();
                        Detailfilter_names.add("productId");
                        Detailfilter_params.add(row.getInventory().getProduct().getID());
                        invDetailRequestParams.put(Constants.filterNamesKey, Detailfilter_names);
                        invDetailRequestParams.put(Constants.filterParamsKey, Detailfilter_params);
                        KwlReturnObject idcustresultForProduct = accInvoiceDAOobj.getInvoiceDetailsCustomDataForProductNew(invDetailRequestParams);
                        AccJEDetailsProductCustomData accJEDetailsProductCustomData = null;
                        if (idcustresultForProduct.getEntityList().size() > 0) {
                            String customDataID = idcustresultForProduct.getEntityList().get(0).toString();
                            accJEDetailsProductCustomData = (AccJEDetailsProductCustomData) kwlCommonTablesDAOObj.getClassObject("com.krawler.hql.accounting.AccJEDetailsProductCustomData", customDataID);
                        }

                        if (accJEDetailsProductCustomData != null) {
                            JSONObject params = new JSONObject();
                            params.put(Constants.isExport, isExport);
                            params.put(Constants.userdf,userDateFormat);
                            
                            if (paramJobj.optBoolean(Constants.isdefaultHeaderMap, false) == true) {
                                params.put(Constants.isForReport, true);
                            } else {
                                params.put(Constants.isForReport, isForReport);
                            }
                            
                            setCustomColumnValuesForProduct(accJEDetailsProductCustomData, ProdFieldMap, replaceFieldMap, variableMap, params);
                            for (Map.Entry<String, Object> varEntry : variableMap.entrySet()) {
                                String coldata = varEntry.getValue().toString();
                                if (!StringUtil.isNullOrEmpty(coldata)) {
                                    obj.put(varEntry.getKey(), coldata);
                                     if (paramJobj.optBoolean(Constants.isdefaultHeaderMap, false) == true) {
                                        obj.put(varEntry.getKey() + "Value", coldata);
                                    }
                                }
                            }
                        }
                        // ## End Custom Field Data
                        obj.put(Constants.billid, invoice.getID());
                        String currencyid = (invoice.getCurrency() == null ? currency.getCurrencyID() : invoice.getCurrency().getCurrencyID());
                        obj.put(InvoiceConstants.currencysymbol, (invoice.getCurrency() == null ? currency.getSymbol() : invoice.getCurrency().getSymbol()));
                        obj.put("currencyCode", (invoice.getCurrency() == null ? currency.getCurrencyCode() : invoice.getCurrency().getCurrencyCode()));
                        obj.put(Constants.billno, invoice.getInvoiceNumber());
//                        KwlReturnObject bAmt = accCurrencyDAOobj.getBaseToCurrencyAmount(requestParams, 1.0, currencyid, je.getEntryDate(), je.getExternalCurrencyRate());
                        if (!isInvoiceOptimizeExport) {
                            KwlReturnObject bAmt = accCurrencyDAOobj.getBaseToCurrencyAmount(requestParams, 1.0, currencyid, invoice.getCreationDate(), je.getExternalCurrencyRate());
                            obj.put("oldcurrencyrate", (Double) bAmt.getEntityList().get(0));
                        }
                        Inventory inv = row.getInventory();
                        Product prod = inv.getProduct();
                        CommonFunctions.getterMethodForProductsData(prod, masterFieldsResultList, obj);
                        obj.put("srno", row.getSrno());
                        obj.put("rowid", row.getID());
                            obj.put(Constants.productid, prod.getID());
                        
                        if (isCopyInvoice) {
                            obj.put("partamount", 0);
                        } else {
                            obj.put("partamount", row.getPartamount());
                        }
                        if (paramJobj.optBoolean(Constants.isdefaultHeaderMap, false) == true) {
                            obj.put("productidValue", prod.getName());
                        } else {
                            obj.put("productname", prod.getName());
                        }
                        if (!isInvoiceOptimizeExport) {
                        obj.put("joborderitem", row.isJobOrderItem());
                        obj.put("originalTransactionRowid", row.getID());
                        obj.put("purchasetaxId", prod.getPurchasetaxid());
                        obj.put("salestaxId", prod.getSalestaxid());
                        obj.put("barcodetype", prod.getBarcodefield());  //ERM-304
                        obj.put("hasAccess", prod.isIsActive());
                        obj.put("isAsset", prod.isAsset());
                        obj.put("productType", prod.getProducttype() == null ? "" : prod.getProducttype().getName());
                        obj.put("gstCurrencyRate", row.getGstCurrencyRate());
                        obj.put("invstore", (StringUtil.isNullOrEmpty(row.getInvstoreid())) ? "" : row.getInvstoreid());
                        obj.put("invlocation", (StringUtil.isNullOrEmpty(row.getInvlocid())) ? "" : row.getInvlocid());
                        obj.put("unitname", inv.getUom() != null ? inv.getUom().getNameEmptyforNA() : prod.getUnitOfMeasure() == null ? "" : prod.getUnitOfMeasure().getNameEmptyforNA());
                        obj.put("uomname", inv.getUom() != null ? inv.getUom().getNameEmptyforNA() : prod.getUnitOfMeasure() == null ? "" : prod.getUnitOfMeasure().getNameEmptyforNA());
                        obj.put("baseuomname", prod.getUnitOfMeasure() == null ? "" : prod.getUnitOfMeasure().getNameEmptyforNA());
                        obj.put("multiuom", prod.isMultiuom());
                        obj.put("isAutoAssembly", prod.isAutoAssembly());
                        
                            String productsBaseUomId = (prod.getUnitOfMeasure() == null) ? "" : prod.getUnitOfMeasure().getID();
                            String selectedUomId = (inv.getUom() != null) ? inv.getUom().getID() : "";
                            KwlReturnObject resultavaiqty = accProductObj.getQuantity(prod.getID());
                            obj.put("availablequantity", (resultavaiqty.getEntityList().get(0) == null ? 0 : resultavaiqty.getEntityList().get(0)));
                            if (prod.isblockLooseSell() && !productsBaseUomId.equals(selectedUomId)) {
                                // Get Available Quantity of Product For Selected UOM

                                KwlReturnObject qtyResult = accProductObj.getAvailableQuantityInSelectedUOM(prod.getID(), selectedUomId);
                                double availableQuantity = qtyResult.getEntityList().get(0) == null ? 0 : (Double) qtyResult.getEntityList().get(0);
                                obj.put("availableQtyInSelectedUOM", availableQuantity);
                                obj.put("isAnotherUOMSelected", true);

                                // Getting Open PO/SO count
                                HashMap<String, Object> orderParams = new HashMap<String, Object>();
                                orderParams.put(Constants.companyKey, companyid);
                                orderParams.put(Constants.globalCurrencyKey, gcurrencyid);
                                orderParams.put(Constants.df, df);
                                orderParams.put("pendingapproval", false);
                                orderParams.put(Constants.REQ_startdate, stDate);
                                orderParams.put(Constants.REQ_enddate, endDate);
                                orderParams.put("currentuomid", selectedUomId);
                                orderParams.put("productId", prod.getID());

                                double pocountinselecteduom = accSalesOrderServiceDAOobj.getPOCount(orderParams);
                                double socountinselecteduom = accSalesOrderServiceDAOobj.getSOCount(orderParams);

                                obj.put("pocountinselecteduom", pocountinselecteduom);
                                obj.put("socountinselecteduom", socountinselecteduom);
                            } else {
                                /**
                                 * If isblockLooseSell check from company preference
                                 * is false then get the actual quantity of product.
                                 */
                                obj.put("availableQtyInSelectedUOM", (resultavaiqty.getEntityList().get(0) == null ? 0 : resultavaiqty.getEntityList().get(0)));
                            }
                            obj.put("productaccountid", (row.getSalesJED() != null && !StringUtil.isNullOrEmpty(row.getSalesJED().getID())) ? (row.getSalesJED().getAccount() != null ? row.getSalesJED().getAccount().getID() : "") : "");
                            obj.put("salesAccountId", prod.getSalesReturnAccount() != null ? prod.getSalesReturnAccount().getID() : "");
                            obj.put("discountAccountId", preferences.getDiscountGiven() != null ? preferences.getDiscountGiven().getID() : "");
                            obj.put("accountId", preferences.getDiscountGiven() != null ? preferences.getDiscountGiven().getID() : "");
                            if (!row.getInvoice().isCashtransaction()) {
                                obj.put("termname", row.getInvoice().getTermid() != null && row.getInvoice().getTermid().getTermname() != null ? row.getInvoice().getTermid().getTermname() : "");
                            } else {
                                obj.put("termname", "");
                            }
                            obj.put(Constants.isConsignment, invoice.isIsconsignment());
                            if (invoice.isIsconsignment()) {
                                obj.put("custWarehouse", invoice.getCustWarehouse().getId()); //for getting customer warehouse
                            }
                        }
                        if ((preferences.getNegativeStockSICS() == 1 || preferences.getNegativeStockSICS() == 2) && isForm && !isView) {
                            HashMap<String, Object> requestMap = new HashMap<String, Object>();
                            requestMap.put(Constants.companyKey, companyid);
                            requestMap.put(Constants.globalCurrencyKey, gcurrencyid);
                            requestMap.put(Constants.df, authHandler.getDateFormatter(paramJobj));
                            requestMap.put("pendingapproval", false);
                            requestMap.put("productId", prod.getID());
                            double invoiceProductCount = AccProductService.getOutstandingSICount(requestMap, accInvoiceDAOobj);
                            obj.put("sicount", invoiceProductCount);
                        }
                        if (preferences.isDependentField()) {  //This is sats specific code 		   
                            obj.put("invoicetype", invoice.getInvoicetype());
                            obj.put("dependentType", row.getDependentType());
                            
                                if (row.getShowquantity() != null) {
                                    obj.put("showquantity", StringUtil.DecodeText(row.getShowquantity()));
                                }
                            
                            obj.put("inouttime", StringUtil.isNullOrEmpty(row.getInouttime()) ? "" : row.getInouttime().replaceAll("%20", " "));
                            if (!StringUtil.isNullOrEmpty(row.getInouttime())) {
                                try {
                                    String interVal = getTimeIntervalForProduct(row.getInouttime());
                                    obj.put("timeinterval", interVal);
                                } catch (ParseException ex) {
                                    Logger.getLogger(accInvoiceCMN.class.getName()).log(Level.SEVERE, null, ex);
                                }

                            }
                            try {
                                String numberVal = row.getDependentType();
                                obj.put("dependentTypeNo", Integer.parseInt(numberVal));
                            } catch (Exception e) {
                            }
                            obj.put("parentid", ((prod.getParent() != null) ? prod.getParent().getID() : ""));
                            obj.put("parentname", ((prod.getParent() != null) ? prod.getParent().getName() : ""));
                            if (prod.getParent() != null) {
                                obj.put("issubproduct", true);
                            }
                            if (prod.getChildren().size() > 0) {
                                obj.put("isparentproduct", true);
                            } else {
                                obj.put("isparentproduct", false);
                            }
                            obj.put("istimeinterval", row.isIstimeinterval());
                            obj.put("hourtimeinterval", row.getInventory().getProduct().getTimeinterval());
                            obj.put("addshiplentheithqty", row.getInventory().getProduct().isAddshiplentheithqty());
                        }
//                        obj.put("rateinbase", accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, (row.getRate()), row.getInvoice().getCurrency().getCurrencyID(), row.getInvoice().getJournalEntry().getEntryDate(), row.getInvoice().getExternalCurrencyRate()).getEntityList().get(0));
                        obj.put("rateinbase", accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, (row.getRate()), row.getInvoice().getCurrency().getCurrencyID(), row.getInvoice().getCreationDate(), row.getInvoice().getExternalCurrencyRate()).getEntityList().get(0));
                        
                        if (paramJobj.optBoolean(Constants.isdefaultHeaderMap, false) == true) {
                            obj.put("productID", prod.getProductid());
                        } else {
                            obj.put("pid", prod.getProductid());
                        }
                        
                        if (prod.isAsset()) {     //For Fixed Asset Group, type will be "Asset"
                             if (paramJobj.optBoolean(Constants.isdefaultHeaderMap, false) == true) {
                                obj.put("productType", "Asset");
                            } else {
                                obj.put("type", "Asset");
                            }
                        } else {
                            if (paramJobj.optBoolean(Constants.isdefaultHeaderMap, false) == true) {
                                obj.put("productType", prod.getProducttype() == null ? "" : prod.getProducttype().getName());
                            } else {
                                obj.put("type", prod.getProducttype() == null ? "" : prod.getProducttype().getName());
                            }
                            obj.put("producttype",prod.getProducttype() == null ? "" :prod.getProducttype().getID());// Put producttype for GST calculation in lease
                        }                        
                        Discount disc = row.getDiscount();
                        if (disc != null) {
                            if (paramJobj.optBoolean(Constants.isdefaultHeaderMap, false) == true) {
                                boolean discountType = disc.isInPercent();
                                obj.put("discountType", discountType == true ? 1 : 0);
                                obj.put("discountTypeValue", discountType == true ? "Percentage" : "Flat");
                                obj.put("discount", disc.getDiscount());
                            } else {
                                obj.put("prdiscount", disc.getDiscount());
                                obj.put("discountispercent", disc.isInPercent() ? 1 : 0);
                                if (row.getInvoice().isPartialinv() && row.getDiscount() != null) {
                                    double partialDicountVal = authHandler.round(row.getPartialDiscount(), companyid);
                                    obj.put("discountvalue", partialDicountVal);
                                    obj.put("discountvalueinbase", accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, partialDicountVal, row.getInvoice().getCurrency().getCurrencyID(), row.getInvoice().getCreationDate(), row.getInvoice().getExternalCurrencyRate()).getEntityList().get(0));
                                } else {
                                    obj.put("discountvalue", disc.getDiscountValue());
//                                obj.put("discountvalueinbase", accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, (disc.getDiscountValue()), row.getInvoice().getCurrency().getCurrencyID(), row.getInvoice().getJournalEntry().getEntryDate(), row.getInvoice().getExternalCurrencyRate()).getEntityList().get(0));
                                    obj.put("discountvalueinbase", accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, (disc.getDiscountValue()), row.getInvoice().getCurrency().getCurrencyID(), row.getInvoice().getCreationDate(), row.getInvoice().getExternalCurrencyRate()).getEntityList().get(0));
                                }
                            }
                                obj.put("discountjson", row.getDiscountJson()!=null?row.getDiscountJson():"");         //getting json of multiple discount applied on product ERM-68
                        } else {
                            if (paramJobj.optBoolean(Constants.isdefaultHeaderMap, false) == true) {
                                obj.put("discountType", 1);
                                obj.put("discount", 0);
                                obj.put("discountTypeValue", "Percentage");
                            } else {
                                obj.put("prdiscount", 0);
                                obj.put("discountispercent", 1);
                            }
                        }
                        
                        if(isEdit && (moduleid==Constants.Acc_Invoice_ModuleId || moduleid==Constants.Acc_Cash_Sales_ModuleId) && !StringUtil.isNullObject(deliveryoderdetailrow)){
                            obj.put("docrowid", deliveryoderdetailrow.getID());     
                        }                       
                        if (!linkingFlag) {
                            if (row.getDeliveryOrderDetail() != null) {
                                obj.put("linkto", row.getDeliveryOrderDetail().getDeliveryOrder().getDeliveryOrderNumber());
                                obj.put("linkid", row.getDeliveryOrderDetail().getDeliveryOrder().getID());
                                /*
                                     ERM-1037
                                     Field used for comparing dates to restrict linking of future doument date in Invoice document editing
                                 */
                                obj.put("linkDate", row.getDeliveryOrderDetail().getDeliveryOrder().getOrderDate()); //Delivery Order Date for date comparison
                                obj.put("rowid", row.getDeliveryOrderDetail().getID());
                                obj.put("savedrowid", row.getDeliveryOrderDetail().getID());
                                obj.put("docrowid", row.getID());
                                obj.put("doDate", row.getDeliveryOrderDetail().getDeliveryOrder().getOrderDate().getTime()); //Delivery Order Date
                                obj.put("linktype", 1);
                            } else if (row.getSalesorderdetail() != null) {
                                obj.put("linkto", row.getSalesorderdetail().getSalesOrder().getSalesOrderNumber());
                                obj.put("linkid", row.getSalesorderdetail().getSalesOrder().getID());
                                /**
                                 * islockQuantityflag is used to identify
                                 * whether the QTy is locked in linked SO or
                                 * not, on the basis of this flag we decide
                                 * whether to allow user to edit Qty in Batch
                                 * Serial window if Qty is locked then we do not
                                 * allow user to edit Qty in batch serial window
                                 * at the time of linking SO to DO or SI with
                                 * auto DO check enabled. ERM-319
                                 */
                                obj.put("islockQuantityflag", row.getSalesorderdetail().getSalesOrder() != null ? row.getSalesorderdetail().getSalesOrder().isLockquantityflag() : false);
                                /*
                                     ERM-1037
                                     Field used for comparing dates to restrict linking of future doument date in Invoice document editing
                                 */
                                obj.put("linkDate", row.getSalesorderdetail().getSalesOrder().getOrderDate());    //Sales Order Date for date comparison
                                obj.put("rowid", row.getSalesorderdetail().getID());
                                if(isEdit && !row.getSalesorderdetail().getSalesOrder().isLockquantityflag()){
                                    obj.put("rowid", deliveryoderdetailrow.getID());
                                }
                                obj.put("savedrowid", row.getSalesorderdetail().getID());
                                obj.put("docrowid", row.getID());
                                obj.put("soDate", row.getSalesorderdetail().getSalesOrder().getOrderDate().getTime());    //Sales Order Date
                                if (row.getSalesorderdetail().getSalesOrder().isIsJobWorkOrder()) {
                                    obj.put("linktype", 14);
                                } else {
                                    obj.put("linktype", 0);
                                }
                            } else if (row.getQuotationDetail() != null) {
                                obj.put("linkto", row.getQuotationDetail().getQuotation().getquotationNumber());
                                obj.put("linkid", row.getQuotationDetail().getQuotation().getID());
                                /*
                                     ERM-1037
                                     Field used for comparing dates to restrict linking of future doument date in Invoice document editing
                                 */
                                obj.put("linkDate", row.getQuotationDetail().getQuotation().getQuotationDate());  //Quotation Date for date comparison
                                obj.put("rowid", row.getQuotationDetail().getID());
                                obj.put("savedrowid", row.getQuotationDetail().getID());
                                obj.put("docrowid", row.getID());
                                obj.put("qdDate", row.getQuotationDetail().getQuotation().getQuotationDate().getTime());  //Quotation Date
                                obj.put("linktype", 2);
                            } else {
                                obj.put("linkto", "");
                                obj.put("linkid", "");
                                obj.put("linktype", -1);
                            }
                        }
                                                             
                        SalesOrder salesOrder = null;
                        if (countForCheckPartialInvoiceLinking == 0 && row.getInvoice().isPartialinv() && row.getSalesorderdetail() != null) {
                            salesOrder = row.getSalesorderdetail().getSalesOrder();
                            countForCheckPartialInvoiceLinking++;

                            HashMap<String, Object> filterParamsForLinking = new HashMap<>();

                            filterParamsForLinking.put("invoiceId", row.getInvoice().getID());
                            filterParamsForLinking.put("salesOrderID", salesOrder.getID());

                            /* If Invoice has made partially with SO  then 
                             We do check that is it first partial invoice if yes then 
                             We can make DO or SR linking with this invoice other wise 
                             We restrict linking */
                            JSONObject jobj = checkForPartialInvoiceLinkingFeasibilityInDOorSR(filterParamsForLinking);

                            obj.put("notAllowInvoiceToLink", jobj.get("notAllowInvoiceToLink"));
                            obj.put("firstInvoiceNumber", jobj.get("firstInvoiceNumber"));
                            isPartialInvoice=true;                            

                        }
                        obj.put("partialInvoice", isPartialInvoice);
                        
                        if (invoice.isFixedAssetInvoice() || invoice.isFixedAssetLeaseInvoice()) {
                            getAssetDetailsJSON(row, obj, df, companyid, paramJobj);
                        }
                        if (prod != null && !StringUtil.isNullOrEmpty(prod.getID())) {
                            Product product = prod;//(Product) prodresult.getEntityList().get(0);
                            isBatchForProduct = product.isIsBatchForProduct();
                            isLocationForProduct = product.isIslocationforproduct();
                            isWarehouseForProduct = product.isIswarehouseforproduct();
                            isSerialForProduct = product.isIsSerialForProduct();
                            isRowForProduct = product.isIsrowforproduct();
                            isRackForProduct = product.isIsrackforproduct();
                            isBinForProduct = product.isIsbinforproduct();
                        }
//                    }
                        if (invoice.isIsconsignment()) {
                            if (prod != null && !StringUtil.isNullOrEmpty(prod.getID())) {
                                Product product = prod;
                                productsDefaultLocation = (product.getLocation() != null && product.getLocation().getId() != null) ? product.getLocation().getId() : "";
                                productsDefaultWarehouse = (product.getWarehouse() != null && product.getWarehouse().getId() != null) ? product.getWarehouse().getId() : "";
                                if (extraCompanyPreferences != null && extraCompanyPreferences.getUomSchemaType() == Constants.PackagingUOM) {
                                    obj.put("caseuom", (product.getPackaging() != null && product.getPackaging().getCasingUoM() != null) ? product.getPackaging().getCasingUoM().getID() : "");
                                    obj.put("caseuomvalue", (product.getPackaging() != null && product.getPackaging().getCasingUoM() != null) ? product.getPackaging().getCasingUomValue() : 1);
                                    obj.put("inneruom", (product.getPackaging() != null && product.getPackaging().getInnerUoM() != null) ? product.getPackaging().getInnerUoM().getID() : "");
                                    obj.put("inneruomvalue", (product.getPackaging() != null && product.getPackaging().getInnerUoM() != null) ? product.getPackaging().getInnerUomValue() : 1);
                                    obj.put("stockuomvalue", (product.getPackaging() != null && product.getPackaging().getStockUoM()!= null) ? product.getPackaging().getStockUomValue(): 1);
                                }
                                if (paramJobj.optBoolean(Constants.isdefaultHeaderMap, false) == true) {
                                    if (product.getPackaging() != null) {
                                        String packagingString = (product.getPackaging() != null && product.getPackaging().toString() != null) ? product.getPackaging().toString() : "";
                                        obj.put(Constants.packaging, packagingString);
                                    } else {
                                        obj.put(Constants.packaging, "");
                                    }
                                }
                            }
                                
                        } else {
                            if (prod != null && !StringUtil.isNullOrEmpty(prod.getID())) {
                                Product product = prod;
                                productsDefaultLocation = (prod.getLocation() != null && prod.getLocation().getId() != null) ? prod.getLocation().getId() : "";
                                productsDefaultWarehouse = (prod.getWarehouse() != null && prod.getWarehouse().getId() != null) ? prod.getWarehouse().getId() : "";
                                if (extraCompanyPreferences != null && extraCompanyPreferences.getUomSchemaType() == Constants.PackagingUOM) {
                                    obj.put("caseuom", (product.getPackaging() != null && product.getPackaging().getCasingUoM() != null) ? product.getPackaging().getCasingUoM().getID() : "");
                                    obj.put("caseuomvalue", (product.getPackaging() != null && product.getPackaging().getCasingUoM() != null) ? product.getPackaging().getCasingUomValue() : 1);
                                    obj.put("inneruom", (product.getPackaging() != null && product.getPackaging().getInnerUoM() != null) ? product.getPackaging().getInnerUoM().getID() : "");
                                    obj.put("inneruomvalue", (product.getPackaging() != null && product.getPackaging().getInnerUoM() != null) ? product.getPackaging().getInnerUomValue() : 1);
                                    obj.put("stockuomvalue", (product.getPackaging() != null && product.getPackaging().getStockUoM() != null) ? product.getPackaging().getStockUomValue() : 1);
                                    obj.put("stockuom", (product.getUnitOfMeasure() != null) ? product.getUnitOfMeasure().getID() : "");
                                }
                                if (paramJobj.optBoolean(Constants.isdefaultHeaderMap, false) == true) {
                                    if (product.getPackaging() != null) {
                                        String packagingString = (product.getPackaging() != null && product.getPackaging().toString() != null) ? product.getPackaging().toString() : "";
                                        obj.put(Constants.packaging, packagingString);
                                    } else {
                                        obj.put(Constants.packaging, "");
                                    }
                                }
                            }
                        }
                        if (!isInvoiceOptimizeExport) {
                        if ((isForDOGROLinking || salesPurchaseReturnflag) && ((isLocationForProduct && prod.getLocation() != null && !StringUtil.isNullOrEmpty(prod.getLocation().getId())) || (isWarehouseForProduct && prod.getWarehouse() != null && !StringUtil.isNullOrEmpty(prod.getWarehouse().getId()))) && !isBatchForProduct && !isSerialForProduct) {
                            obj.put("batchdetails", getdefaultBatchJson(prod, paramJobj, row.getID(), inv.getQuantity()));
                        }

                        if ((deliveryoderdetailrow != null && deliveryoderdetailrow.getProduct() != null) || invoice.isIsconsignment()) {  //only if auto generate GRN option is on
                            if (preferences.isIsBatchCompulsory() || preferences.isIsSerialCompulsory() || preferences.isIslocationcompulsory() || preferences.isIswarehousecompulsory() || preferences.isIsrowcompulsory() || preferences.isIsrackcompulsory() || preferences.isIsbincompulsory()) {  //check if company level option is on then only we will check productt level
                                if (isBatchForProduct || isSerialForProduct || isSerialForProduct || isLocationForProduct || isWarehouseForProduct || isRowForProduct || isRackForProduct || isBinForProduct) {  //product level batch and serial no on or not
                                    if (invoice.isIsconsignment()) {
                                        obj.put("batchdetails", getNewBatchJson(inv.getProduct(), paramJobj, row.getID()));
                                    } else if (extraCompanyPreferences.isAutoFillBatchDetails() && !isConsignment&& !isLeaseFixedAsset) {
                                        obj.put("batchdetails", getNewBatchDetailJson(batchSerialReqMap, deliveryoderdetailrow.getProduct(), deliveryoderdetailrow.getID(), serialModulefieldMap, baMap, replaceFieldMap2, customFieldMap2, customDateFieldMap2));
                                    } else {
                                        obj.put("batchdetails", getNewBatchJson(batchSerialReqMap, deliveryoderdetailrow.getProduct(), deliveryoderdetailrow.getID(), serialModulefieldMap, baMap, replaceFieldMap2, customFieldMap2, customDateFieldMap2));
                                    }
                                }
                            }
                        }
                        else if(row.getSalesorderdetail()!=null && ((isEdit && !isView && module==Constants.Acc_Invoice_ModuleId)||module==Constants.Acc_Delivery_Order_ModuleId)){
                            if (preferences.isIsBatchCompulsory() || preferences.isIsSerialCompulsory() || preferences.isIslocationcompulsory() || preferences.isIswarehousecompulsory() || preferences.isIsrowcompulsory() || preferences.isIsrackcompulsory() || preferences.isIsbincompulsory()) {  //check if company level option is on then only we will check productt level
                                if (isBatchForProduct || isSerialForProduct || isSerialForProduct || isLocationForProduct || isWarehouseForProduct || isRowForProduct || isRackForProduct || isBinForProduct) {
                                    batchSerialReqMap.put("isDONotLinkedtoSI", false);
                                    if (extraCompanyPreferences.isAutoFillBatchDetails() && !isConsignment) {
                                        obj.put("batchdetails", getNewBatchDetailJson(batchSerialReqMap, prod, row.getSalesorderdetail().getID(), serialModulefieldMap, baMap, replaceFieldMap2, customFieldMap2, customDateFieldMap2));
                                    } else {
                                        obj.put("batchdetails", getNewBatchJson(batchSerialReqMap, prod, row.getSalesorderdetail().getID(), serialModulefieldMap, baMap, replaceFieldMap2, customFieldMap2, customDateFieldMap2));
                                    }
                                    obj.put("islockQuantityflag", row.getSalesorderdetail().getSalesOrder().isLockquantityflag());
                                    obj.put("sorowid", row.getSalesorderdetail().getID());
                                }
                            }
                        }
                        if(StringUtil.isNullOrEmpty(obj.optString("batchdetails")) || obj.optString("batchdetails").equals("[]") && isForDOGROLinking && isLocationForProduct && isWarehouseForProduct && !isCopyInvoice && !isBatchForProduct && !isSerialForProduct && !extraCompanyPreferences.isAutoFillBatchDetails()){   
                            obj.put("batchdetails", getdefaultBatchJson(prod, paramJobj, row.getID(), inv.getQuantity()));
                        }
                        obj.put("isLocationForProduct", isLocationForProduct);
                        obj.put("isWarehouseForProduct", isWarehouseForProduct);
                        obj.put("isBatchForProduct", isBatchForProduct);
                        obj.put("isSerialForProduct", isSerialForProduct);
                        obj.put("isRowForProduct", isRowForProduct);
                        obj.put("isRackForProduct", isRackForProduct);
                        obj.put("isBinForProduct", isBinForProduct);
                        obj.put("location", productsDefaultLocation);
                        obj.put("warehouse", productsDefaultWarehouse);
                        }
                        if (!StringUtil.isNullOrEmpty(row.getDescription())) {
                            description = row.getDescription();
                        } else if (!StringUtil.isNullOrEmpty(prod.getDescription())) {
                            description = prod.getDescription();
                        } else {
                            description = "";
                        }

                        String linedesc = "";//Description is encoded for Web-application & Mobile Apps
                        try {
                            linedesc = StringUtil.DecodeText(description);
                        } catch (Exception ex) {
                            linedesc = description;
                        }
                        if (!isInvoiceOptimizeExport) {
                        /**
                         * get the volume discount discount for the given
                         * product according its quantity.
                         */
                        HashMap<String, Object> pricingDiscountRequestParams = new HashMap<String, Object>();
                        pricingDiscountRequestParams.put("isPricePolicyUseDiscount", true);
                        pricingDiscountRequestParams.put("productID", (row.getInventory()!=null&&row.getInventory().getProduct()!=null)?row.getInventory().getProduct().getID():"");
                        pricingDiscountRequestParams.put("isPurchase", row.getInventory()!=null?row.getInventory().isCarryIn():false);
                        pricingDiscountRequestParams.put("companyID", companyid);
                        pricingDiscountRequestParams.put("currencyID", gcurrencyid);
                        Double qty = Double.valueOf(row.getInventory().getQuantity());
                        pricingDiscountRequestParams.put("quantity", Integer.valueOf(qty.intValue()));
                        /**
                         * check Volume discount matches with qty
                         */
                        KwlReturnObject volDiscresult = accProductObj.getProductPriceFromPriceListVolumeDiscount(pricingDiscountRequestParams);
                        if (volDiscresult!=null && volDiscresult.getEntityList() != null && !volDiscresult.getEntityList().isEmpty()) {
                            Object[] rowObj = (Object[]) volDiscresult.getEntityList().get(0);
                            KwlReturnObject detailResult = accountingHandlerDAOobj.getObject(PricingBandMasterDetail.class.getName(), (String) rowObj[5]);
                            PricingBandMasterDetail pricingBandMasterDetail = detailResult != null ? (PricingBandMasterDetail) detailResult.getEntityList().get(0) : null;
                            if (pricingBandMasterDetail != null) {
                                obj.put("volumdiscountid", pricingBandMasterDetail.getPricingBandMaster().getID());
                            }
                        }
                        if (row.getPricingBandMasterid() != null) {
                            KwlReturnObject PricebandResult = accountingHandlerDAOobj.getObject(PricingBandMaster.class.getName(), row.getPricingBandMasterid());
                            PricingBandMaster pricingBandMaster = PricebandResult != null ? (PricingBandMaster) PricebandResult.getEntityList().get(0) : null;
                            obj.put("pricingbandmasterid", pricingBandMaster != null ? pricingBandMaster.getID() : "");
                            obj.put("pricingbandmastername", pricingBandMaster != null ? pricingBandMaster.getName() : "");
                        }
                        /**
                         * below code will execute when amend price fuctionality
                         * is activated.
                         */
                        String uomidForamendprice = (inv.getUom() != null) ? inv.getUom().getID() : (prod.getUnitOfMeasure() != null) ?  prod.getUnitOfMeasure().getID():"";
                        accProductObj.getamendingPurchaseprice(prod.getID(),paramJobj.optString("userid"),row.getInvoice().getCreationDate(),currencyid, uomidForamendprice,obj);
                        }
                        obj.put("desc", linedesc);
                        obj.put("description",linedesc);
                        obj.put("rate", row.getRate());  //rate of the product
                        obj.put("priceSource", row.getPriceSource() != null ? row.getPriceSource() : "");
                        double quantity = inv.getQuantity();
                        obj.put("quantity", quantity);
                        obj.put("dquantity", quantity);
                        double baseuomrate = inv.getBaseuomrate();
                        double invoiceRowProductQty = quantity * baseuomrate;
                        double remainedQty = invoiceRowProductQty;// which has not been linked yet
                         
                        if (inv.getUom() != null) {
                            if (paramJobj.optBoolean(Constants.isdefaultHeaderMap, false) == true) {
                                obj.put("uomname", inv.getUom().getID());
                                obj.put("uomnameValue", inv.getUom().getNameEmptyforNA());
                            } else {
                                obj.put("uomid", inv.getUom().getID());
                            }

                        } else {
                            if (paramJobj.optBoolean(Constants.isdefaultHeaderMap, false) == true) {
                                obj.put("uomname", prod.getUnitOfMeasure() != null ? prod.getUnitOfMeasure().getID() : "");
                                obj.put("uomnameValue", prod.getUnitOfMeasure() != null ? prod.getUnitOfMeasure().getNameEmptyforNA() : "");
                            } else {
                                obj.put("uomid", prod.getUnitOfMeasure() != null ? prod.getUnitOfMeasure().getID() : "");
                            }
                        }
                        /**
                         * Send uomschematypeid for Android
                         */
                        if (prod.getUomSchemaType() != null) {
                            obj.put("uomschematypeid", prod.getUomSchemaType().getID());
                        }
                        obj.put("baseuomquantity", authHandler.calculateBaseUOMQuatity(quantity, baseuomrate, companyid));
                        obj.put("baseuomrate", baseuomrate);
                        obj.put("productweightperstockuom", inv.getProductWeightPerStockUom());
                        obj.put("productweightincludingpakagingperstockuom", inv.getProductWeightIncludingPakagingPerStockUom());
                        obj.put("productvolumeperstockuom",  inv.getProductVolumePerStockUom());
                        obj.put("productvolumeincludingpakagingperstockuom", inv.getProductVolumeIncludingPakagingPerStockUom());
                        double remainingquantity = 0;
                        
                        JSONObject jObj = new JSONObject();
                        if (!StringUtil.isNullOrEmpty(extraCompanyPreferences.getColumnPref())) {
                            jObj = new JSONObject((String) extraCompanyPreferences.getColumnPref());
                        }
                        if (jObj.has("isDisplayUOM") && jObj.get("isDisplayUOM") != null && (Boolean) jObj.get("isDisplayUOM") != false) {
                            obj = accProductObj.getProductDisplayUOM(prod, quantity, baseuomrate, false, obj);
                        }
                        double amount = 0;
                        if (hm.containsKey(row)) {
                            Object[] val = (Object[]) hm.get(row);
                            amount = (Double) val[0];
                            remainingquantity = (Double) val[1];
                            if (!isInvoiceOptimizeExport) {
                                obj.put("remainingquantity", remainingquantity);
                                obj.put("remquantity", 0);
                            }
                        }
                        if (srflag && Constants.Acc_Sales_Return_ModuleId == module) {
                            KwlReturnObject retObj = accSalesOrderDAOobj.getLinkedSalesReturnQuantityWithInvoice(companyid, row.getID());
                            if (retObj != null && retObj.getEntityList() != null && retObj.getEntityList().size() > 0) {
                                List<SalesReturnDetail> SRDetails = retObj.getEntityList();
                                double tempQuantity = quantity;
                                for (SalesReturnDetail srDtl : SRDetails) {
                                    if (srDtl != null && authHandler.calculateBaseUOMQuatity(quantity, baseuomrate, companyid) == srDtl.getReturnQuantity()) {
                                        continue;
                                    } else {
                                        tempQuantity -= srDtl.getReturnQuantity();
                                        obj.put("baseuomquantity", (authHandler.calculateBaseUOMQuatity(quantity, baseuomrate, companyid) - srDtl.getReturnQuantity()));
                                        obj.put("quantity", tempQuantity);
                                        obj.put("dquantity", tempQuantity);
                                    }
                                }
                            }
                            String invdid = inv.getID();
                            double returnQty = 0;
                            returnQty = accInvoiceDAOobj.getReturnQuantityofDOorSI(invdid, companyid, false);
                            if (returnQty != 0 && (quantity - returnQty != 0)) {
                                obj.put("baseuomquantity", (authHandler.calculateBaseUOMQuatity(quantity, baseuomrate, companyid) - returnQty));
                                obj.put("quantity", quantity - returnQty); 
                                obj.put("dquantity", quantity - returnQty);
                            }
                        }
                        double rowTaxAmount = 0;
                        HashMap amthm = getInvoiceProductAmount(invoice);
                        Object[] val = (Object[]) amthm.get(row);
               
                        /* If invoice is partial then sending partial amount to js side 
                         *for the purpose of calculating line level amount
                         */
                        if (row.getInvoice().isPartialinv()) {

                          obj.put("partamount", row.getPartamount());
                        }
                        obj.put("partialDiscount", row.getPartialDiscount());
                        if(val != null) {
                        rowTaxAmount = (Double) val[2];
                        }
                        obj.put("orignalamount", amount);
                        obj.put("amount", amount);
//                        obj.put("amountinbase", accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, amount, row.getInvoice().getCurrency().getCurrencyID(), row.getInvoice().getJournalEntry().getEntryDate(), row.getInvoice().getExternalCurrencyRate()).getEntityList().get(0));
                        obj.put("amountinbase", accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, amount, row.getInvoice().getCurrency().getCurrencyID(), row.getInvoice().getCreationDate(), row.getInvoice().getExternalCurrencyRate()).getEntityList().get(0));
                        double taxPercent = 0;
                        double rowTaxPercent = 0;
                        if (row.getTax() != null) {
//                            KwlReturnObject perresult = accTaxObj.getTaxPercent(companyid, je.getEntryDate(), row.getTax().getID());
                            KwlReturnObject perresult = accTaxObj.getTaxPercent(companyid, invoice.getCreationDate(), row.getTax().getID());
                            rowTaxPercent = (Double) perresult.getEntityList().get(0);
                        }
                        obj.put("prtaxpercent", rowTaxPercent);
                        if (extraCompanyPreferences.getLineLevelTermFlag()==1) {
                            obj.put("taxamount", row.getRowTermAmount());
                            obj.put("taxamountforlinking", row.getRowTermAmount());
                            obj.put("rowTaxAmount", row.getRowTermAmount());
                        } else {
                            obj.put("rowTaxAmount", rowTaxAmount);
                            obj.put("taxamount", rowTaxAmount);
                            obj.put("taxamountforlinking", rowTaxAmount);
                        }
//                        obj.put("taxamountinbase", accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, rowTaxAmount, row.getInvoice().getCurrency().getCurrencyID(), row.getInvoice().getJournalEntry().getEntryDate(), row.getInvoice().getExternalCurrencyRate()).getEntityList().get(0));
                        if (!isInvoiceOptimizeExport) {
                        obj.put("taxamountinbase", accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, rowTaxAmount, row.getInvoice().getCurrency().getCurrencyID(), row.getInvoice().getCreationDate(), row.getInvoice().getExternalCurrencyRate()).getEntityList().get(0));
                        obj.put("lineleveltaxtermamount", row.getRowTermTaxAmount());
                        obj.put("rowTaxPercent", rowTaxPercent);
                        obj.put("rateIncludingGst", authHandler.roundUnitPrice(row.getRateincludegst(), companyid));
                        obj.put("israteIncludingGst", invoice.isGstIncluded());
                        obj.put("isapplytaxtoterms",invoice.isApplyTaxToTerms());
                        obj.put("prtaxid", row.getTax() == null ? "None" : row.getTax().getID());
//                        obj.put("prtaxid", row.getTax() != null ? (isCopyInvoice || linkingFlag ? (row.getTax().isActivated() ? row.getTax().getID() : "") : row.getTax().getID()) : "None");//ERP-38656
                        obj.put("includeprotax", row.getTax()!=null?true:false);
                        }
                        if (paramJobj.optBoolean(Constants.isdefaultHeaderMap, false) == true) {
                            obj.put(Constants.prtaxidValue, row.getTax() == null ? "" : row.getTax().getName());
                        } else {
                            obj.put("taxNameForExport", row.getTax() == null ? "" : row.getTax().getName());
                        }
                        obj.put(Constants.isUserModifiedTaxAmount, row.isIsUserModifiedTaxAmount());
                        
                        double discountValueForExcel = 0, amountForExcelFile = 0;
                        double rowamountwithgst = 0;
                        if (row.getInvoice().isGstIncluded()) {//if gstincluded is the case
                            rowamountwithgst = authHandler.round(row.getRateincludegst() * quantity, companyid);
                            discountValueForExcel = obj.optDouble("discountvalue", 0.0);
                            amountForExcelFile = rowamountwithgst - discountValueForExcel;
                            obj.put(Constants.amountForExcelFile, authHandler.formattedAmount(amountForExcelFile, companyid));
                        } else {
                            rowamountwithgst = authHandler.round(row.getRate() * quantity, companyid);
                            discountValueForExcel = obj.optDouble("discountvalue", 0.0);
                            if(row.getPartamount() != 0 && row.getInvoice().isPartialinv()){
                                rowamountwithgst = authHandler.round(rowamountwithgst * (row.getPartamount() / 100),companyid);
                            }
                            amountForExcelFile = rowamountwithgst - discountValueForExcel + rowTaxAmount;
                            obj.put(Constants.amountForExcelFile, authHandler.formattedAmount(amountForExcelFile, companyid));
                        }
                        
                        obj.put("recTermAmount", row.getRowTermAmount());
                        obj.put("OtherTermNonTaxableAmount", row.getOtherTermNonTaxableAmount());
                        JSONArray TermdetailsjArr = new JSONArray();
                        if (extraCompanyPreferences.getLineLevelTermFlag()==1) { // For India Country 
                            if (extraCompanyPreferences.isAvalaraIntegration()) {//In case of Avalara Integration, fetch tax details from Avalara tax mapping table
                                JSONObject paramsForTaxJobj = new JSONObject();
                                paramsForTaxJobj.put(IntegrationConstants.parentRecordID, row.getID());
                                TermdetailsjArr = integrationCommonService.getTransactionDetailTaxMapping(paramsForTaxJobj);
                            } else {
                                HashMap<String, Object> InvoiceDetailParams = new HashMap<String, Object>();
                                InvoiceDetailParams.put("InvoiceDetailid", row.getID());
                                KwlReturnObject grdTermMapresult = accInvoiceDAOobj.getInvoicedetailTermMap(InvoiceDetailParams);
                                List<InvoiceDetailTermsMap> InvoiceDetailTermsMapList = grdTermMapresult.getEntityList();
                                for (InvoiceDetailTermsMap invoicedetailTermMap : InvoiceDetailTermsMapList) {
                                    LineLevelTerms mt = invoicedetailTermMap.getTerm();
                                    JSONObject jsonobj = new JSONObject();
                                    jsonobj.put("id", mt.getId());
                                    /**
                                     * ERP-32829 
                                     */
                                    jsonobj.put("productentitytermid", invoicedetailTermMap.getEntitybasedLineLevelTermRate()!=null?invoicedetailTermMap.getEntitybasedLineLevelTermRate().getId():"");
                                    jsonobj.put("isDefault", invoicedetailTermMap.isIsGSTApplied());
                                    jsonobj.put(InvoiceConstants.termid, mt.getId());
                                    jsonobj.put("term", mt.getTerm());
                                    jsonobj.put("glaccount", mt.getAccount().getID());
                                    jsonobj.put("accountid", mt.getAccount().getID());
                                    jsonobj.put("IsOtherTermTaxable", mt.isOtherTermTaxable());
                                    jsonobj.put("glaccountname", mt.getAccount().getAccountName());
                                    jsonobj.put("acccode", mt.getAccount().getAccountCode());
                                    jsonobj.put("sign", mt.getSign());
                                    jsonobj.put("formula", mt.getFormula());
                                    jsonobj.put("formulaids", mt.getFormula());
                                    jsonobj.put("termpercentage", invoicedetailTermMap.getPercentage());
                                    jsonobj.put("originalTermPercentage", mt.getPercentage());
                                    jsonobj.put("termamount", invoicedetailTermMap.getTermamount());
                                    jsonobj.put("assessablevalue", invoicedetailTermMap.getAssessablevalue());
                                    jsonobj.put("purchasevalueorsalevalue", invoicedetailTermMap.getPurchaseValueOrSaleValue());
                                    jsonobj.put("deductionorabatementpercent", invoicedetailTermMap.getDeductionOrAbatementPercent());
                                    jsonobj.put("taxtype", invoicedetailTermMap.getTaxType());
                                    jsonobj.put("taxvalue", invoicedetailTermMap.getTaxType() == IndiaComplianceConstants.Term_TaxType_Flat ? invoicedetailTermMap.getTermamount() : invoicedetailTermMap.getPercentage());
                                    jsonobj.put("termtype", invoicedetailTermMap.getTerm().getTermType());
                                    jsonobj.put("termsequence", invoicedetailTermMap.getTerm().getTermSequence());
                                    jsonobj.put("payableaccountid", mt.getPayableAccount() != null ? mt.getPayableAccount().getID() : "");
                                    jsonobj.put(IndiaComplianceConstants.GST_CESS_TYPE, invoicedetailTermMap.getEntitybasedLineLevelTermRate()!=null && invoicedetailTermMap.getEntitybasedLineLevelTermRate().getCessType()!=null ? invoicedetailTermMap.getEntitybasedLineLevelTermRate().getCessType().getId() : "");
                                    jsonobj.put(IndiaComplianceConstants.GST_CESS_VALUATION_AMOUNT, invoicedetailTermMap.getEntitybasedLineLevelTermRate()!=null ? invoicedetailTermMap.getEntitybasedLineLevelTermRate().getValuationAmount() : 0.0);
                                    jsonobj.put(IndiaComplianceConstants.DEFAULT_TERMID, mt!=null && mt.getDefaultTerms()!=null ? mt.getDefaultTerms().getId() : "");
                                    TermdetailsjArr.put(jsonobj);
                                }
                            }
                            obj.put("LineTermdetails", TermdetailsjArr.toString());
                            if (row.getCompany().getCountry().getID().equalsIgnoreCase("" + Constants.indian_country_id)) {
                                /**
                                 * Put GST Tax Class History.
                                 */
                                obj.put("refdocid", row.getID());
                                fieldDataManagercntrl.getGSTTaxClassHistory(obj);
                            }

                        }
                                                          
                        if (company.getCountry() != null && Integer.parseInt(company.getCountry().getID())==Constants.indian_country_id && extraCompanyPreferences.isExciseApplicable() && !isCopyInvoice) {
                            JSONArray supplierExciseArr = new JSONArray();
                            HashMap<String, Object> InvoiceDetailParams = new HashMap<String, Object>();
                            InvoiceDetailParams.put("InvoiceDetailid", row.getID());
                            InvoiceDetailParams.put("companyid", companyid);
                            KwlReturnObject supplierMapresult = accInvoiceDAOobj.getSupplierDetailsMap(InvoiceDetailParams);
                            List<SupplierExciseDetails> supplierDetailMapList = supplierMapresult.getEntityList();
                            for (SupplierExciseDetails supdetailMap : supplierDetailMapList) {
                                JSONObject jsonobj = new JSONObject();
                                jsonobj.put("id", supdetailMap.getId());
                                KwlReturnObject grdObj = accountingHandlerDAOobj.getObject(GoodsReceiptDetail.class.getName(), supdetailMap.getGoodsReceiptDetailsId());
                                GoodsReceiptDetail grd = (GoodsReceiptDetail) grdObj.getEntityList().get(0);
                                if (grd != null) {
                                    jsonobj.put("goodsreceiptid", grd.getID());
                                    jsonobj.put("invoiceName", grd.getGoodsReceipt().getGoodsReceiptNumber());
                                    jsonobj.put("invoiceNameAndDate", grd.getGoodsReceipt().getGoodsReceiptNumber() + "/" + (grd.getGoodsReceipt() != null ? df.format(grd.getGoodsReceipt().getCreatedon()) : ""));
                                    jsonobj.put("invoiceDate", (grd.getGoodsReceipt() != null ? df.format(grd.getGoodsReceipt().getCreatedon()) : ""));
                                    jsonobj.put("vendorid", supdetailMap.getVendor().getID());
                                    jsonobj.put("vendorName", supdetailMap.getVendor().getName());
                                    jsonobj.put("natureofpurchaseName", supdetailMap.getNatureOfPurchase() != null ? supdetailMap.getNatureOfPurchase().getValue() : "");
                                    jsonobj.put("natureofpurchaseId", supdetailMap.getNatureOfPurchase() != null ? supdetailMap.getNatureOfPurchase().getID() : "");
                                    jsonobj.put("availableQuantity", supdetailMap.getUtilizedQuantity());
                                    jsonobj.put("actualQuantity", supdetailMap.getActualQuantity());
                                    jsonobj.put("vendorNameAndnop", supdetailMap.getVendor().getName() + "/" + (supdetailMap.getNatureOfPurchase() != null ? supdetailMap.getNatureOfPurchase().getValue() : ""));
                                    supplierExciseArr.put(jsonobj);
                                }
                            }
                            obj.put("supplierExciseDetails", supplierExciseArr.toString());
                        }
                        
                        if (countryid == Constants.indian_country_id) { // For India Country 
                            boolean carryin = false;
                            String uomid = prod.getUnitOfMeasure() == null ? "" : prod.getUnitOfMeasure().getID();
                            // Excise AND VAT special type TAX ------ START-------
                            if (extraCompanyPreferences.isExciseApplicable() && extraCompanyPreferences.isExciseTariffdetails()) {
                                String reortingUOM = (row.getReportingUOMExcise() != null) ? row.getReportingUOMExcise().getID() : "";
                                String valuationType = !StringUtil.isNullOrEmpty(row.getExciseValuationType()) ? row.getExciseValuationType() : "";
                                obj.put("valuationType", valuationType);
                                if ((Constants.QUENTITY).equals(valuationType)) {
                                    obj.put("compairwithUOM", 1);
                                    obj.put("reortingUOMExcise", reortingUOM);

                                    if (row.getReportingSchemaTypeExcise() != null && !reortingUOM.equals(uomid)) {
                                        String reportinguomschema = row.getReportingSchemaTypeExcise().getID();
                                        obj.put("reortingUOMSchemaExcise", reportinguomschema);
                                        HashMap<String, Object> hsMap = new HashMap<String, Object>();
                                        hsMap.put("uomschematypeid", reportinguomschema);
                                        hsMap.put("currentuomid", uomid);
                                        hsMap.put("carryin", carryin);
                                        hsMap.put(Constants.companyKey, companyid);
                                        KwlReturnObject convertor = accProductObj.getProductBaseUOMRate(hsMap);
                                        List<UOMSchema> list = convertor.getEntityList();
                                        for (UOMSchema rowUOMExcise:list) {
                                            if (rowUOMExcise != null) {
                                                obj.put("compairwithUOM", rowUOMExcise.getBaseuomrate());
                                            }
                                        }
                                    }

                                } else if ((Constants.MRP).equals(valuationType)) {
                                    obj.put("productMRP", row.getMrpIndia());
                                }
                            }
                            if (extraCompanyPreferences.isEnableVatCst()) {
                                String reortingUOMVAT = (row.getReportingUOMVAT() != null) ? prod.getReportinguomVAT() : "";
                                String valuationTypeVAT = !StringUtil.isNullOrEmpty(row.getVatValuationType()) ? row.getVatValuationType() : "";
                                obj.put("valuationTypeVAT", valuationTypeVAT);
                                if ((Constants.QUENTITY).equals(valuationTypeVAT)) {
                                    obj.put("reportingUOMVAT", reortingUOMVAT);
                                    obj.put("compairwithUOMVAT", 1);

                                    if (row.getReportingSchemaVAT() != null && !reortingUOMVAT.equals(uomid)) {
                                        String reportinguomschema = row.getReportingSchemaVAT().getID();
                                        obj.put("reportingUOMSchemaVAT", reportinguomschema);
                                        HashMap<String, Object> hsMap = new HashMap<String, Object>();
                                        hsMap.put("uomschematypeid", reportinguomschema);
                                        hsMap.put("currentuomid", uomid);
                                        hsMap.put("carryin", carryin);
                                        hsMap.put(Constants.companyKey, companyid);
                                        KwlReturnObject convertor = accProductObj.getProductBaseUOMRate(hsMap);
                                        List<UOMSchema> list = convertor.getEntityList();
                                         for (UOMSchema rowUOMVAT:list) {
                                            if (rowUOMVAT != null) {
                                                obj.put("compairwithUOMVAT", rowUOMVAT.getBaseuomrate());
                                            }
                                        }
                                    }

                                } else if ((Constants.MRP).equals(valuationTypeVAT)) {
                                    obj.put("productMRP", row.getMrpIndia());
                                }
                            }
                        }

                        if (invoice.getTax() != null) {
//                            KwlReturnObject perresult = accTaxObj.getTaxPercent(companyid, je.getEntryDate(), invoice.getTax().getID());
                            KwlReturnObject perresult = accTaxObj.getTaxPercent(companyid, invoice.getCreationDate(), invoice.getTax().getID());
                            taxPercent = (Double) perresult.getEntityList().get(0);
                        }
                        obj.put("taxpercent", taxPercent);
                        
                        HashMap<String, Object> unitPriceParams = new HashMap<>();
                        unitPriceParams.put("invDetailID", row.getID());
                        if (row.getSalesorderdetail() != null && !StringUtil.isNullOrEmpty(row.getSalesorderdetail().getPurchaseorderdetailid())) {
                            unitPriceParams.put("isPOLinked", true);
                        }
                        if (row.getQuotationDetail() != null && !StringUtil.isNullOrEmpty(row.getQuotationDetail().getVendorquotationdetails())) {
                            unitPriceParams.put("isCQLinked", true);
                        }
                        if (!isInvoiceOptimizeExport) {
                        KwlReturnObject unitPriceResult = accSalesOrderDAOobj.getMarginCostForCrossLinkedTransactions(unitPriceParams);
                        if (!unitPriceResult.getEntityList().isEmpty() && unitPriceResult.getEntityList().get(0) != null) {
                            Object[] objArr = (Object[]) unitPriceResult.getEntityList().get(0);
                            obj.put("marginCost", objArr[0]);
                            obj.put("marginExchangeRate", objArr[1]);
                        }
                        }
                        if (doflag && !salesPurchaseReturnflag) {
                            double doQuantity = getInvoiceQuantityForDO(row);
                            if (doQuantity > 0) {
                                obj.put("quantity", doQuantity);
                                if (preferences.isDependentField()) {  //This is sats specific code 		      
                                    
                                        if (row.getShowquantity() != null) {
                                            obj.put("showquantity", StringUtil.DecodeText(row.getShowquantity()));
                                        }
                                    
                                }

                                obj.put("dquantity", doQuantity);
                                obj.put("baseuomquantity", authHandler.calculateBaseUOMQuatity(doQuantity, baseuomrate, companyid));
                                remainedQty = authHandler.calculateBaseUOMQuatity(doQuantity, baseuomrate, companyid);
                                if (salesPurchaseReturnflag || isForDOGROLinking) {// in case of linking in normal transactions not lease consignment etc.
                                    if (row.getTax() != null && invoiceRowProductQty > 0) {
                                        double taxAmt = (rowTaxAmount / invoiceRowProductQty) * remainedQty;
                                        obj.put("rowTaxAmount", taxAmt);
                                        obj.put("taxamount", taxAmt);
                                        obj.put("taxamountforlinking", taxAmt);
//                                        obj.put("taxamountinbase", accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, taxAmt, row.getInvoice().getCurrency().getCurrencyID(), row.getInvoice().getJournalEntry().getEntryDate(), row.getInvoice().getExternalCurrencyRate()).getEntityList().get(0));
                                        obj.put("taxamountinbase", accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, taxAmt, row.getInvoice().getCurrency().getCurrencyID(), row.getInvoice().getCreationDate(), row.getInvoice().getExternalCurrencyRate()).getEntityList().get(0));
                                    }
                                }
                                jArr.put(obj);
                            }
                        } else {
                            if (salesPurchaseReturnflag || isForDOGROLinking) {// in case of linking in normal transactions not lease consignment etc.
                                if (row.getTax() != null && invoiceRowProductQty > 0) {
                                    double taxAmt = (rowTaxAmount / invoiceRowProductQty) * remainedQty;
                                    obj.put("rowTaxAmount", taxAmt);
                                    obj.put("taxamount", taxAmt);
                                    obj.put("taxamountforlinking", taxAmt);
//                                    obj.put("taxamountinbase", accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, taxAmt, row.getInvoice().getCurrency().getCurrencyID(), row.getInvoice().getJournalEntry().getEntryDate(), row.getInvoice().getExternalCurrencyRate()).getEntityList().get(0));
                                    obj.put("taxamountinbase", accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, taxAmt, row.getInvoice().getCurrency().getCurrencyID(), row.getInvoice().getCreationDate(), row.getInvoice().getExternalCurrencyRate()).getEntityList().get(0));
                                }
                            }
                            
                            if (paramJobj.optBoolean(Constants.isdefaultHeaderMap) && paramJobj.has("displayUnitPriceAndAmountInSalesDocument") && !paramJobj.optBoolean("displayUnitPriceAndAmountInSalesDocument")) {
                                obj.put("amount", CustomDesignerConstants.UNIT_PRICE_AND_AMOUNT_AS_STARS);
                                obj.put("amountinbase", CustomDesignerConstants.UNIT_PRICE_AND_AMOUNT_AS_STARS);
                                obj.put("rate", CustomDesignerConstants.UNIT_PRICE_AND_AMOUNT_AS_STARS);
                                obj.put("rateIncludingGst", CustomDesignerConstants.UNIT_PRICE_AND_AMOUNT_AS_STARS);
                            }
                            
                            jArr.put(obj);
                        }
                    }
                }
                i++;
            }
        } catch (ParseException ex) {
            Logger.getLogger(accInvoiceCMN.class.getName()).log(Level.SEVERE, null, ex);
            throw ServiceException.FAILURE("accInvoiceController.getInvoiceRows", ex);
        } catch (JSONException e) {
            throw ServiceException.FAILURE("accInvoiceController.getInvoiceRows", e);
        } 
        return jArr;
    }
    
    
    public JSONArray getDetailExcelJsonInvoice(JSONObject paramJobj, Map<String, Object> requestParams, JSONArray DataJArr)  throws JSONException, SessionExpiredException, ServiceException,ParseException {
        
        Map<String, Object> extraAttributesMap = new HashMap<String, Object>();
        JSONArray tempArray = new JSONArray();
        String companyid = paramJobj.getString("companyid");
        String gcurrencyid = paramJobj.getString("gcurrencyid");
        KwlReturnObject companyObj = accountingHandlerDAOobj.getObject(Company.class.getName(), companyid);
        Company company = (Company) companyObj.getEntityList().get(0);
        extraAttributesMap.put("companyObj", company);
        requestParams = AccountingManager.getGlobalParamsJson(paramJobj);
        requestParams.put("companyid", companyid);
        KwlReturnObject capresult = accountingHandlerDAOobj.getObject(CompanyAccountPreferences.class.getName(), companyid);
        CompanyAccountPreferences preferences = (CompanyAccountPreferences) capresult.getEntityList().get(0);
        extraAttributesMap.put("preferencesObj", preferences);
        requestParams.put("companyid", companyid);
        capresult = accountingHandlerDAOobj.getObject(ExtraCompanyPreferences.class.getName(), companyid);
        ExtraCompanyPreferences extraCompanyPreferences = (ExtraCompanyPreferences) capresult.getEntityList().get(0);
        extraAttributesMap.put("extraCompanyPreferencesObj", extraCompanyPreferences);
        KwlReturnObject curresult = kwlCommonTablesDAOObj.getObject(KWLCurrency.class.getName(), gcurrencyid);
        KWLCurrency currency = (KWLCurrency) curresult.getEntityList().get(0);
        extraAttributesMap.put("currencyObj", currency);
        Map<String, Object> ProductFieldsRequestParams = new HashMap();
        ProductFieldsRequestParams.put(Constants.companyKey, companyid);
        ProductFieldsRequestParams.put(Constants.moduleid, Constants.Acc_Invoice_ModuleId);
        String stDate = authHandler.getDates(preferences.getFinancialYearFrom(), true);
        String endDate = authHandler.getDates(preferences.getFinancialYearFrom(), false);
        List masterFieldsResultList = CommonFunctions.getproductmastersFieldsToShowLineLevel(ProductFieldsRequestParams, accountingHandlerDAOobj);
        extraAttributesMap.put("masterFieldsResultListObj", masterFieldsResultList);
        
        HashMap<String, Object> fieldrequestParams = new HashMap();
        HashMap<String, String> customFieldMap = new HashMap<String, String>();
        HashMap<String, String> customDateFieldMap = new HashMap<String, String>();
        fieldrequestParams.put(Constants.filter_names, Arrays.asList(Constants.companyid, Constants.moduleid, Constants.customcolumn));
        fieldrequestParams.put(Constants.filter_values, Arrays.asList(companyid, Constants.Acc_Invoice_ModuleId, 1));
        HashMap<String, String> replaceFieldMap = new HashMap<String, String>();
        HashMap<String, Integer> FieldMap = accAccountDAOobj.getFieldParamsCustomMapForRows(fieldrequestParams, replaceFieldMap, customFieldMap, customDateFieldMap);
        extraAttributesMap.put("FieldMapObj", FieldMap);
        extraAttributesMap.put("replaceFieldMapObj", replaceFieldMap);
        extraAttributesMap.put("customFieldMapObj", customFieldMap);
        extraAttributesMap.put("customDateFieldMapObj", customDateFieldMap);
        HashMap<String, Object> serialModuleParams = new HashMap();
        serialModuleParams.put(Constants.filter_names, Arrays.asList(Constants.companyid, Constants.moduleid, Constants.customcolumn));
        serialModuleParams.put(Constants.filter_values, Arrays.asList(companyid, Constants.SerialWindow_ModuleId, 1));
        HashMap<String, String> replaceFieldMap2 = new HashMap<String, String>();
        HashMap<String, String> customFieldMap2 = new HashMap<String, String>();
        HashMap<String, String> customDateFieldMap2 = new HashMap<String, String>();
        HashMap<String, Integer> serialModulefieldMap = accAccountDAOobj.getFieldParamsCustomMapForRows(serialModuleParams, replaceFieldMap2, customFieldMap2, customDateFieldMap2);    
        extraAttributesMap.put("serialModulefieldMapObj", serialModulefieldMap);
        extraAttributesMap.put("replaceFieldMapObj2", replaceFieldMap2);
        extraAttributesMap.put("customFieldMapObj2", customFieldMap2);
        extraAttributesMap.put("customDateFieldMapObj2", customDateFieldMap2);
        fieldrequestParams = new HashMap();
//        Map<String, Object>  variableMap = new HashMap<String, Object>();
        fieldrequestParams.put(Constants.filter_names, Arrays.asList(Constants.companyid, Constants.moduleid, Constants.customcolumn));
        fieldrequestParams.put(Constants.filter_values, Arrays.asList(companyid, Constants.Acc_Product_Master_ModuleId, 0));
        replaceFieldMap = new HashMap<String, String>();
        HashMap<String, Integer> ProdFieldMap = accAccountDAOobj.getFieldParamsMap(fieldrequestParams, replaceFieldMap);
        extraAttributesMap.put("ProdFieldMapMapObj", ProdFieldMap);
        extraAttributesMap.put("ProdReplaceFieldMapMapObj", replaceFieldMap);
        for (int i = 0; i < DataJArr.length(); i++) {
             JSONObject rowjobj = new JSONObject();
             rowjobj = DataJArr.getJSONObject(i);
             String billid = rowjobj.optString(Constants.billid, "");   //Invoice ID 
//             request.setAttribute(Constants.companyKey, companyid);
//             request.setAttribute(Constants.globalCurrencyKey, gcurrencyid);
//             request.setAttribute(Constants.billid, billid);
             JSONArray DataRowsArr = null;
             DataRowsArr = accInvoiceServiceDAO.getInvoiceRows(paramJobj,billid.split(","),extraAttributesMap);
             
             tempArray.put(rowjobj);
             rowjobj.put("type","");
             for (int j = 0; j < DataRowsArr.length(); j++) {
                 JSONObject tempjobj = new JSONObject();
                 tempjobj = DataRowsArr.getJSONObject(j);
                 exportDaoObj.editJsonKeyForExcelFile(tempjobj, Constants.Acc_Invoice_ModuleId);
                 tempArray.put(tempjobj);
             }
         }
        return tempArray;
    }
    
    
    /*This function is used to check feasibility of partial invoice created from SO can be linked with DO or SR
    
     1.If Selected invoice in DO/SR combo is first invoice creation date wise then we allow this invoice to link in DO or SR
    
     2.If Selected invoice in DO/SR combo is not the first invoice creation date wise then we do not allow this invoice to link in DO or SR
    
    
     */
    public JSONObject checkForPartialInvoiceLinkingFeasibilityInDOorSR(HashMap<String, Object> filterParamsForLinking) throws ServiceException {

        boolean notAllowInvoiceToLink = false;
        JSONObject jobj = new JSONObject();
        try {

            String salesOrderId = (String) filterParamsForLinking.get("salesOrderID");
            String invoiceId = (String) filterParamsForLinking.get("invoiceId");

            String invoiceIds = "";
            /* Get all invoices linked with this particular SO*/

            KwlReturnObject idresult1 = accInvoiceDAOobj.getInvoicesLinkedInSO(salesOrderId);

            /* All the Invoices linked with SO partially*/
            if (idresult1 != null && idresult1.getEntityList() != null && idresult1.getEntityList().size() > 0) {
                for (int i = 0; i < idresult1.getEntityList().size(); i++) {
                    if (invoiceIds.indexOf(idresult1.getEntityList().get(i).toString()) == -1) {
                        invoiceIds += " '" + idresult1.getEntityList().get(i) + " '" + ",";
                    }
                }

            }

            if (invoiceIds.length() > 0) {
                invoiceIds = invoiceIds.substring(0, invoiceIds.length() - 1);
            }

            /* Code for fetch first partial Invoice(Creation Date wise) which is created from SO*/
            KwlReturnObject firstInvoice = accInvoiceDAOobj.getfirstPartialInvoiceOfSO(invoiceIds);
            Object[] obj = (Object[]) firstInvoice.getEntityList().get(0);

            String firstInvoiceID = obj[0].toString();
            String firstInvoiceNumber = obj[1].toString();
            
            /* If selected Invoice is the first Invoice creation date wise 
             then allow to link i.e notAllowInvoiceToLink=false*/
            if (firstInvoiceID.equalsIgnoreCase(invoiceId)) {
                notAllowInvoiceToLink = false;
            } else {
                notAllowInvoiceToLink = true;
            }

            jobj.put("notAllowInvoiceToLink", notAllowInvoiceToLink);
            jobj.put("firstInvoiceNumber", firstInvoiceNumber);

        } catch (Exception ex) {
            throw ServiceException.FAILURE("accInvoiceController.checkForPartialInvoiceLinkingFeasibilityInDOorSR", ex);
        }

        return jobj;

    }
  
    public String getdefaultBatchJson(Product product, JSONObject paramJobj, String documentid, double quantity) throws JSONException {
        JSONArray jarr = new JSONArray();
        JSONObject jobj = new JSONObject();
        if (product.getLocation() != null && !StringUtil.isNullOrEmpty(product.getLocation().getId())) {
            jobj.put("location", product.getLocation().getId());
        }
        if (product.getWarehouse() != null && !StringUtil.isNullOrEmpty(product.getWarehouse().getId())) {
            jobj.put("warehouse", product.getWarehouse().getId());
        }
        jobj.put("documentid", "");
        if (!StringUtil.isNullOrEmpty(product.getID())) {
            jobj.put("productid", product.getID());
            jobj.put("barcodetype", product.getBarcodefield());
        }
        jobj.put("quantity", quantity);
        jobj.put("purchasebatchid", "");
        jarr.put(jobj);
        return jarr.toString();
    }
    
    private String getTimeIntervalForProduct(String inouttime) throws ParseException, java.text.ParseException {
        if (!StringUtil.isNullOrEmpty(inouttime)) {
            inouttime = inouttime.replaceAll("%20", " ");
            inouttime = inouttime.replaceAll("%25", " ");
        }
        String inoutTime = inouttime;
        String inoutTimeArray[] = inoutTime.split(",");
        String inTimeArray[] = inoutTimeArray[0].split(" ");
        String outTimeArray[] = inoutTimeArray[1].split(" ");
        int inHour = 0;
        String inDateValue = "";
        String outDateValue = "";
        int inMinutes = 0;
        int outHour = 0;
        int outMinutes = 0;
        if (inoutTimeArray.length > 1) {
            inDateValue = inTimeArray[0];
            outDateValue = outTimeArray[0];
            inHour = Integer.parseInt(inTimeArray[1].split(":")[0]);
            inMinutes = Integer.parseInt(inTimeArray[1].split(":")[1]);
            outHour = Integer.parseInt(outTimeArray[1].split(":")[0]);
            outMinutes = Integer.parseInt(outTimeArray[1].split(":")[1]);
        }
        DateFormat df = new SimpleDateFormat("yyyy-mm-dd");
        Date inDate = df.parse(inDateValue);
        Date outDate = df.parse(outDateValue);
        inDate.setHours(inHour);
        inDate.setMinutes(inMinutes);
        inDate.setSeconds(00);

        outDate.setHours(outHour);
        outDate.setMinutes(outMinutes);
        outDate.setSeconds(00);
        double timeDiff = ((double) (outDate.getTime() - inDate.getTime())) / 3600000;
        DecimalFormat df1 = new DecimalFormat("#.##");
        timeDiff = Double.valueOf(df1.format(timeDiff));
        return timeDiff + " Hrs";

    }
    
    public void getAssetDetailsJSON(InvoiceDetail row, JSONObject obj, DateFormat df, String companyid, JSONObject paramJobj) throws JSONException, ServiceException, SessionExpiredException {
        JSONArray assetDetailsJArr = new JSONArray();
        boolean isBatchForProduct = false;
        boolean isSerialForProduct = false;
        boolean isLocationForProduct = false;
        boolean isWarehouseForProduct = false;
        boolean isRowForProduct = false;
        boolean isRackForProduct = false;
        boolean isBinForProduct = false;
        double tempProfitandLossAmt=0;

        HashMap<String, Object> assetDetailsParams = new HashMap<String, Object>();
        assetDetailsParams.put(Constants.companyKey, companyid);
        assetDetailsParams.put("invoiceDetailId", row.getID());
        assetDetailsParams.put("moduleId", Constants.Acc_Invoice_ModuleId);

        KwlReturnObject cpresult = accountingHandlerDAOobj.getObject(CompanyAccountPreferences.class.getName(), companyid);
        CompanyAccountPreferences pref = (CompanyAccountPreferences) cpresult.getEntityList().get(0);

        KwlReturnObject assetInvMapObj = accProductObj.getAssetInvoiceDetailMapping(assetDetailsParams);
        List assetInvMapList = assetInvMapObj.getEntityList();
        Iterator assetInvMapListIt = assetInvMapList.iterator();
        while (assetInvMapListIt.hasNext()) {
            AssetInvoiceDetailMapping invoiceDetailMapping = (AssetInvoiceDetailMapping) assetInvMapListIt.next();
            AssetDetails assetDetails = invoiceDetailMapping.getAssetDetails();
            JSONObject assetDetailsJOBJ = new JSONObject();

            assetDetailsJOBJ.put("assetdetailId", assetDetails.getId());
            assetDetailsJOBJ.put("assetId", assetDetails.getId());
            assetDetailsJOBJ.put("assetName", assetDetails.getAssetId());
            assetDetailsJOBJ.put("location", (assetDetails.getLocation() != null) ? assetDetails.getLocation().getId() : "");
            assetDetailsJOBJ.put("department", (assetDetails.getDepartment() != null) ? assetDetails.getDepartment().getId() : "");
            assetDetailsJOBJ.put("assetdescription", (assetDetails.getAssetDescription() != null) ? assetDetails.getAssetDescription() : "");
            assetDetailsJOBJ.put("assetUser", (assetDetails.getAssetUser() != null) ? assetDetails.getAssetUser().getUserID() : "");
           
            // calculate asset depreciation cost
            double assetDepreciatedCost = 0d;

            HashMap<String, Object> assetParams = new HashMap<String, Object>();
            assetParams.put("assetDetailsId", assetDetails.getId());
            assetParams.put("companyid", companyid);
            assetParams.put("assetDetails", true);

            KwlReturnObject assResult = accProductObj.getAssetDepreciationDetail(assetParams);
            List<AssetDepreciationDetail> assList = assResult.getEntityList();

            for (AssetDepreciationDetail depreciationDetail : assList) {
                assetDepreciatedCost += depreciationDetail.getPeriodAmount();
            }

            assetDetailsJOBJ.put("cost", (assetDetails.getCost() - assetDepreciatedCost));        

            assetDetailsJOBJ.put("salvageRate", assetDetails.getSalvageRate());
            assetDetailsJOBJ.put("salvageValue", assetDetails.getSalvageValue());
            assetDetailsJOBJ.put("accumulatedDepreciation", assetDetails.getAccumulatedDepreciation());
            assetDetailsJOBJ.put("assetLife", assetDetails.getAssetLife());
            assetDetailsJOBJ.put("elapsedLife", assetDetails.getElapsedLife());
            assetDetailsJOBJ.put("nominalValue", assetDetails.getElapsedLife());
            assetDetailsJOBJ.put("installationDate", df.format(assetDetails.getInstallationDate()));
            assetDetailsJOBJ.put("purchaseDate", df.format(assetDetails.getPurchaseDate()));
            assetDetailsJOBJ.put("sellAmount", assetDetails.getSellAmount());
            tempProfitandLossAmt=tempProfitandLossAmt+(assetDetails.getSellAmount()-(assetDetails.getCost() - assetDepreciatedCost));
            HashMap<String, Object> fieldrequestParams1 = new HashMap();
            fieldrequestParams1.put(Constants.filter_names, Arrays.asList(Constants.companyid, Constants.moduleid, Constants.customcolumn));
            fieldrequestParams1.put(Constants.filter_values, Arrays.asList(paramJobj.getString(Constants.companyKey), Constants.Acc_FixedAssets_Details_ModuleId, 1));
            HashMap<String, String> customFieldMap1 = new HashMap<String, String>();
            HashMap<String, String> customDateFieldMap1 = new HashMap<String, String>();
            HashMap<String, String> replaceFieldMap11 = new HashMap<String, String>();
            HashMap<String, Integer> fieldMap1 = accAccountDAOobj.getFieldParamsCustomMapForRows(fieldrequestParams1, replaceFieldMap11, customFieldMap1, customDateFieldMap1);
            Map<String, Object> variableMap = new HashMap<String, Object>();
            AssetDetailsCustomData jeDetailCustom = (AssetDetailsCustomData) assetDetails.getAssetDetailsCustomData();
            replaceFieldMap11 = new HashMap<String, String>();
            if (jeDetailCustom != null) {
                AccountingManager.setCustomColumnValues(jeDetailCustom, fieldMap1, replaceFieldMap11, variableMap);
                JSONObject params = new JSONObject();
                params.put(Constants.companyKey, companyid);
                params.put("getCustomFieldArray", true);
                fieldDataManagercntrl.getLineLevelCustomData(variableMap, customFieldMap1, customDateFieldMap1, assetDetailsJOBJ, params);
            }
            if (assetDetails.getProduct() != null) {
                if (!StringUtil.isNullOrEmpty(assetDetails.getProduct().getID())) {
                    KwlReturnObject prodresult = accProductObj.getObject(Product.class.getName(), assetDetails.getProduct().getID());
                    Product product = (Product) prodresult.getEntityList().get(0);
                    isBatchForProduct = product.isIsBatchForProduct();
                    isSerialForProduct = product.isIsSerialForProduct();
                    isLocationForProduct = product.isIslocationforproduct();
                    isWarehouseForProduct = product.isIswarehouseforproduct();
                    isRowForProduct = product.isIsrowforproduct();
                    isRackForProduct = product.isIsrackforproduct();
                    isBinForProduct = product.isIsbinforproduct();
                }
            }
            if (pref.isIsBatchCompulsory() || pref.isIsSerialCompulsory() || pref.isIslocationcompulsory() || pref.isIswarehousecompulsory() || pref.isIsrowcompulsory() || pref.isIsrackcompulsory() || pref.isIsbincompulsory()) {  //check if company level option is on then only we will check productt level
                if (isBatchForProduct || isSerialForProduct || isLocationForProduct || isWarehouseForProduct || isRowForProduct || isRackForProduct || isBinForProduct) {  //product level batch and serial no on or not
                    assetDetailsJOBJ.put("batchdetails", getNewBatchJson(assetDetails.getProduct(), paramJobj, assetDetails.getId()));
                }
            }
            assetDetailsJArr.put(assetDetailsJOBJ);
        }
        obj.put("assetDetails", assetDetailsJArr.toString());
        obj.put("profitLossAmt", tempProfitandLossAmt);
    }
    
    public HashMap getInvoiceProductAmount(Invoice invoice) throws ServiceException {
        HashMap hm = new HashMap();
        Set invRows = invoice.getRows();
        Iterator itr = invRows.iterator();
        double amount;
        double quantity;
        while (itr.hasNext()) {
            InvoiceDetail temp = (InvoiceDetail) itr.next();
            double quantityTemp = temp.getInventory().getQuantity();
            quantity = quantityTemp;
            amount = temp.getRate() * quantity;
            if (invoice.getInvoicetype() != null && invoice.getInvoicetype().equals(Constants.Acc_Retail_Invoice_Variable)) {
                amount = temp.getRate() * (quantity / 100);
            }
            if (temp.getPartamount() != 0) {
                amount = amount * (temp.getPartamount() / 100);
            }
            double rdisc = (temp.getDiscount() == null ? 0 : temp.getDiscount().getDiscountValue());
            double rowTaxPercent = 0;
            double rowTaxAmount = 0;
            boolean isRowTaxApplicable = false;
            if (temp.getTax() != null) {
//                KwlReturnObject perresult = accTaxObj.getTaxPercent(invoice.getCompany().getCompanyID(), invoice.getJournalEntry().getEntryDate(), temp.getTax().getID());
                KwlReturnObject perresult = accTaxObj.getTaxPercent(invoice.getCompany().getCompanyID(), invoice.getCreationDate(), temp.getTax().getID());
                rowTaxPercent = (Double) perresult.getEntityList().get(0);
                isRowTaxApplicable = (Boolean) perresult.getEntityList().get(1);
            }
            if (temp.isWasRowTaxFieldEditable()) {
                if (isRowTaxApplicable) {
                    rowTaxAmount = temp.getRowTaxAmount();
                }
            } else {
                rowTaxAmount = (amount - rdisc) * rowTaxPercent / 100;
            }
            double ramount = amount - rdisc;
            double amountWithoutTax = amount - rdisc;
            ramount += rowTaxAmount;

            hm.put(temp, new Object[]{ramount, quantity, rowTaxAmount, amountWithoutTax});
            if (invoice == null) {
                invoice = temp.getInvoice();
            }
        }
        return hm;
    }
    
    /*
     * Function will be called only for delivery order flow to fetch product
     * quantity remained for invoice in DO
     */
    @Override
    public double getInvoiceQuantityForDO(InvoiceDetail ivDetail) throws ServiceException {
        double result = ivDetail.getInventory().getQuantity();
        KwlReturnObject idresult = accInvoiceDAOobj.getDOIDFromInvoiceDetails(ivDetail.getID());
        List list = idresult.getEntityList();
        Iterator ite1 = list.iterator();
        double qua = 0;
        while (ite1.hasNext()) {
            DeliveryOrderDetail ge = (DeliveryOrderDetail) ite1.next();
            qua += ge.getInventory().getQuantity();
        }
        result = result - qua;
        return result;
    }
    
    /**
     * Method to fetch list of available quantities of a product-batch in inventory
     * @param requestJobj
     * @return
     * @throws ServiceException 
     */
    @Override
    public List getProductBatchQuantityList(JSONObject requestJobj) throws ServiceException {
        return accInvoiceDAOobj.getProductBatchQuantity(requestJobj);
    }
    
    /**
     * Method to fetch available quantity of a product-batch in inventory
     * @param requestJobj
     * @return
     * @throws ServiceException
     * @throws JSONException 
     */
    @Override
    public JSONObject getProductBatchQuantity(JSONObject requestJobj) throws ServiceException, JSONException {
        JSONObject returnJobj = new JSONObject();
        double totalBatchQty = 0;
        String batchid = "";
        List<Object> batchdetails = getProductBatchQuantityList(requestJobj);
        Iterator batchrs = batchdetails.iterator();
        while (batchrs.hasNext()) {
            Object[] obj = (Object[]) batchrs.next();
            totalBatchQty = totalBatchQty + (obj[3] != null ? Double.parseDouble(obj[3].toString()) : 0);
            batchid = (String) obj[0] == null ? "" : obj[0].toString();
        }
        returnJobj.put("totalProductBatchQty", totalBatchQty);
        returnJobj.put("batchid", batchid);
        return returnJobj;
    }
    
    private void setCustomColumnValuesForProduct(AccCustomData accJEDetailsProductCustomData, HashMap<String, Integer> fieldMap, Map<String, String> replaceFieldMap,
            Map<String, Object> variableMap, JSONObject params) {
        for (Map.Entry<String, Integer> field : fieldMap.entrySet()) {
            Integer colnumber = field.getValue();
            if (colnumber > 0) { // colnumber will be 0 if key is part of reference map
                Integer isref = fieldMap.get(field.getKey() + "#" + colnumber);// added '#' while creating map collection for custom fields.
                // Without this change, it creates problem if two custom columns having name like XYZ and XYZ1
                String coldata = null;
                boolean isForReport = params.optBoolean(Constants.isForReport, false);
                boolean isExport = params.optBoolean(Constants.isExport, false);
                if (isref != null) {
                    try {
                        if (accJEDetailsProductCustomData != null) {
                            coldata = accJEDetailsProductCustomData.getCol(colnumber);
                        }
                        if (!StringUtil.isNullOrEmpty(coldata)) {
                            if (coldata.length() > 1) {
                                if (isref == 1) {
//                                        coldataVal = fieldDataManagercntrl.getMultiSelectColData(coldata);
//                                        if(isExport) {
//                                            coldata = coldataVal;
//                                        }
//                                        variablesMapForCustomData.put(field.getKey(), coldataVal);
                                } else if (isref == 0 || isref == 7) {
                                    if (isForReport) {
                                        String valueForReport = "";
                                        String[] valueData = coldata.split(",");
                                        for (String value : valueData) {
                                            KwlReturnObject rdresult = accountingHandlerDAOobj.getObject(FieldComboData.class.getName(), value);
                                            FieldComboData fieldComboData = (FieldComboData) rdresult.getEntityList().get(0);
                                            if (fieldComboData != null) {
                                                valueForReport += fieldComboData.getValue() + ",";
                                            }
                                        }
                                        if (valueForReport.length() > 1) {
                                            coldata = valueForReport.substring(0, valueForReport.length() - 1);
                                        }
                                    } else {
                                        coldata = coldata;
                                    }
                                } else if (isref == 3 && isExport) {
                                    //This code change is made because date will not be long value now,it will be date in String form refer ERP-32324 
                                    DateFormat defaultDateFormat = new SimpleDateFormat(Constants.MMMMdyyyy);
                                    DateFormat userDateFormat = params.has(Constants.userdf) ? (DateFormat) params.get(Constants.userdf) : null;
                                    Date dateFromDB = null;
                                    DateFormat df2 = new SimpleDateFormat(Constants.yyyyMMdd);
                                    try {
                                        dateFromDB = defaultDateFormat.parse(coldata);
                                        coldata = userDateFormat != null ? userDateFormat.format(dateFromDB) : df2.format(dateFromDB);

                                    } catch (Exception e) {
                                    }
                                }
                            }
                            variableMap.put(field.getKey(), coldata);
                        }
                    } catch (IllegalArgumentException ex) {
                        ex.printStackTrace();
                    } 
                    catch (ObjectNotFoundException ex) {
                        ex.printStackTrace();
                    } 
                    catch (Exception ex) {
                        ex.printStackTrace();
                    }
                }
            }
        }
    } 
    
@Override
    public HashMap applyCreditNotes(HashMap requestParams, Invoice invoice) throws ServiceException {

        HashMap hm = new HashMap();
        Set<InvoiceDetail> invRows = invoice.getRows();
        KwlReturnObject curresult = kwlCommonTablesDAOObj.getObject(KWLCurrency.class.getName(), (String) requestParams.get(Constants.globalCurrencyKey));
        KWLCurrency currency = (KWLCurrency) curresult.getEntityList().get(0);
        double amount;
        double quantity;
        double withoutDTAmt = 0;
        double globalTaxAmount = 0;
        double termAmount = 0;
        boolean withGSTData = true; //fetch the data according to the with GST or without GST
        boolean isFromMonthySalesReport = false; 
        String companyid = (String) requestParams.get("companyid");
        if (requestParams.containsKey("withgst")) {
          withGSTData = (Boolean) requestParams.get("withgst");
        }
        if (requestParams.containsKey("isFromMonthySalesReport")) {
          isFromMonthySalesReport = (Boolean) requestParams.get("isFromMonthySalesReport");
        }
        
       if (isFromMonthySalesReport && withGSTData) {
         if (invoice.getTaxEntry() != null) {
            globalTaxAmount = invoice.getTaxamount();
               }
         termAmount=CommonFunctions.getTotalTermsAmount(getTermDetails(invoice.getID()));
       }
        for (InvoiceDetail temp : invRows) {//reqiured for invoice discount row wise division[PS]
            double quantityTemp = temp.getInventory().getQuantity();
            quantity = quantityTemp;
            amount = temp.getRate() * quantity;
            double rowAmount = temp.getRate() * quantityTemp;
            if (invoice.getInvoicetype() != null && invoice.getInvoicetype().equals(Constants.Acc_Retail_Invoice_Variable)) {
                rowAmount = temp.getRate() * quantityTemp;
            }
            if (temp.getPartamount() != 0.0) {
                rowAmount = rowAmount * (temp.getPartamount() / 100);
                amount = amount * (temp.getPartamount() / 100);
            }
            withoutDTAmt += rowAmount;
            double rdisc = (temp.getDiscount() == null ? 0 : temp.getDiscount().getDiscountValue());
            if (temp.getPartamount() != 0.0 && temp.getInvoice().isPartialinv() && temp.getDiscount() != null) {
                rdisc = authHandler.round(temp.getPartialDiscount(), companyid);
            }
            double rowTaxPercent = 0;
            double rowTaxAmount = 0;
            boolean isRowTaxApplicable = false;
            double rowWithDTAmt = 0;
            if (temp.getTax() != null) {
//                KwlReturnObject perresult = accTaxObj.getTaxPercent((String) requestParams.get(Constants.companyKey), invoice.getJournalEntry().getEntryDate(), temp.getTax().getID());
                KwlReturnObject perresult = accTaxObj.getTaxPercent((String) requestParams.get(Constants.companyKey), invoice.getCreationDate(), temp.getTax().getID());
                rowTaxPercent = (Double) perresult.getEntityList().get(0);
                isRowTaxApplicable = (Boolean) perresult.getEntityList().get(1);
                if (isRowTaxApplicable) {
                    rowTaxAmount = temp.getRowTaxAmount() + temp.getRowTermTaxAmount();
                }
            } else if(invoice.getTax() != null && isFromMonthySalesReport && withGSTData) {
//                KwlReturnObject taxPercent = accTaxObj.getTaxPercent((String) requestParams.get(Constants.companyKey), invoice.getJournalEntry().getEntryDate(), invoice.getTax().getID());
                KwlReturnObject taxPercent = accTaxObj.getTaxPercent((String) requestParams.get(Constants.companyKey), invoice.getCreationDate(), invoice.getTax().getID());
                double percentVal = (Double) taxPercent.getEntityList().get(0);
                /**
                 * if filter "with GST" in 'Monthly Sales By Product Report '  and Invoice(Global) tax applied in invoice then discount should minus from line total amount. 
                 */
                globalTaxAmount = percentVal / 100 * (amount-rdisc); 
            }
            double rowWithDAmt=0;
            if (invoice.isGstIncluded() && isFromMonthySalesReport) {
                rowWithDAmt = amount; //if include GST true then don't minus discount it's already minus 
            } else {
                rowWithDAmt = amount - rdisc;
            }
            if (temp.isWasRowTaxFieldEditable()) { //After made row tax field editable tax calculation will be take place according to row tax amount. - DATE - 28 -Jan-2014
                rowWithDTAmt = rowWithDAmt + rowTaxAmount;
            } else {// for earlier invoices it will be done according to row tax percent as selected in Tax combo column.
                rowWithDTAmt = rowWithDAmt + (rowWithDAmt * rowTaxPercent) / 100;
            }

            rowWithDTAmt = authHandler.round(rowWithDTAmt, companyid);
            double invoiceDisc = temp.getInvoice().getDiscount() == null ? 0 : applyInvDisount(temp, withoutDTAmt);
            rowWithDTAmt -= invoiceDisc;
            if (withGSTData && isFromMonthySalesReport) {
                rowWithDTAmt += globalTaxAmount+termAmount;
            }
            hm.put(temp, new Object[]{rowWithDTAmt, quantity, 0.0, rowWithDAmt - invoiceDisc, 0.0, rowWithDAmt});
            if (invoice == null) {
                invoice = temp.getInvoice();
            }
        }
        // Below code is commmented as following code has been handled in above iteration
        /*
         * itr=invRows.iterator(); while(itr.hasNext()){ InvoiceDetail
         * temp=(InvoiceDetail)itr.next(); //For the case of update inventory
         * from DO // double quantityTemp = (invoice.getPendingapproval() == 1)?
         * temp.getInventory().getActquantity() :
         * (temp.getInventory().isInvrecord() ?
         * temp.getInventory().getQuantity() :
         * temp.getInventory().getActquantity()); double quantityTemp =
         * temp.getInventory().getQuantity(); quantity=quantityTemp;
         * amount=temp.getRate()*quantity; if(temp.getPartamount() != 0.0) {
         * amount = amount * (temp.getPartamount()/100); } double
         * rdisc=(temp.getDiscount()==null?0:temp.getDiscount().getDiscountValue());
         * double rowTaxPercent = 0; double rowTaxAmount=0; boolean
         * isRowTaxApplicable=false; double rowWithDTAmt=0; if (temp.getTax() !=
         * null) { KwlReturnObject perresult = accTaxObj.getTaxPercent((String)
         * requestParams.get(Constants.companyKey),
         * invoice.getJournalEntry().getEntryDate(), temp.getTax().getID());
         * rowTaxPercent = (Double) perresult.getEntityList().get(0);
         * isRowTaxApplicable = (Boolean) perresult.getEntityList().get(1); if
         * (isRowTaxApplicable) { rowTaxAmount = temp.getRowTaxAmount(); } }
         * double rowWithDAmt=amount-rdisc; if(temp.isWasRowTaxFieldEditable()){
         * //After made row tax field editable tax calculation will be take
         * place according to row tax amount. - DATE - 28 -Jan-2014
         * rowWithDTAmt=rowWithDAmt+ rowTaxAmount; }else{// for earlier invoices
         * it will be done according to row tax percent as selected in Tax combo
         * column. rowWithDTAmt=rowWithDAmt+ (rowWithDAmt*rowTaxPercent)/100; }
         *
         * rowWithDTAmt=authHandler.round(rowWithDTAmt, 2); double
         * invoiceDisc=temp.getInvoice().getDiscount()==null?0:applyInvDisount(temp,withoutDTAmt);
         * rowWithDTAmt-=invoiceDisc; hm.put(temp, new Object[]{rowWithDTAmt,
         * quantity, 0.0,rowWithDAmt-invoiceDisc,0.0,rowWithDAmt});
         * if(invoice==null)invoice=temp.getInvoice();
         }
         */
//        KwlReturnObject result = accCreditNoteobj.getCNRowsDiscountFromInvoice(invoice.getID());
        KwlReturnObject result = accCreditNoteDAOobj.getCNRowsDiscountFromInvoice(invoice.getID());
        List list = result.getEntityList();
        Iterator cnitr = list.iterator();
        double cnTaxAmount = 0, discountAmount = 0, deductDiscount = 0;
        while (cnitr.hasNext()) {
            cnTaxAmount = 0;
            discountAmount = 0;
            deductDiscount = 0;
            Object[] cnrow = (Object[]) cnitr.next();
            CreditNoteDetail cnr = (CreditNoteDetail) cnrow[1];
            InvoiceDetail temp = cnr.getInvoiceRow();
            if (!hm.containsKey(temp)) {//Discard CN rows which are for Otherwise CN and paid invoice detail and invoice rows for which no credit note has been applied.
                continue;
            }
            Object[] val = (Object[]) hm.get(temp);
            String fromcurrencyid = (cnr.getCreditNote().getCurrency() == null ? currency.getCurrencyID() : cnr.getCreditNote().getCurrency().getCurrencyID());
            String tocurrencyid = (invoice.getCurrency() == null ? currency.getCurrencyID() : invoice.getCurrency().getCurrencyID());
            double baseDisount = 0;//Credit note amount
            if (cnr.getPaidinvflag() != 1) {//Ignore cn detail rows amount which are inserted in table for paid invoice row 
                if (cnr.getDiscount() != null) {
//                    KwlReturnObject bAmt = accCurrencyDAOobj.getOneCurrencyToOther(requestParams, cnr.getDiscount().getDiscountValue(), fromcurrencyid, tocurrencyid, invoice.getJournalEntry().getEntryDate(), invoice.getJournalEntry().getExternalCurrencyRate());
                    KwlReturnObject bAmt = accCurrencyDAOobj.getOneCurrencyToOther(requestParams, cnr.getDiscount().getDiscountValue(), fromcurrencyid, tocurrencyid, invoice.getCreationDate(), invoice.getJournalEntry().getExternalCurrencyRate());
                    baseDisount = (Double) bAmt.getEntityList().get(0);
                }
            }
            double v = (Double) val[0] - (cnr.getDiscount() == null ? 0 : baseDisount);//Amount = Total Invoice Amount(Including tax and dicount) - Credit note amount
            if (cnr.getTaxAmount() != null) {
                cnTaxAmount = cnr.getTaxAmount() + (Double) val[2];//Credit note tax. val[2] = 0;
            }
            double q = (Double) val[1]; //Product quantity from invoice
            if (temp.getInventory() != null) {
                q -= cnr.getQuantity(); //New product quantity after subtracting credit note quantity.
            }
            if (cnr.getTotalDiscount() != null) {
                discountAmount = cnr.getTotalDiscount();//Credit note discount amount
                deductDiscount = (Double) val[4] + cnr.getTotalDiscount();//val[4] = 0;  Same Credit note discount amount
            }
            hm.put(temp, new Object[]{v, q, cnTaxAmount - discountAmount, val[3], deductDiscount, val[5]});//formula for val[3]:(rate*quantity)-rowdiscount-invdiscount-cnamount[PS]
        }
        return hm;
    } 
    
 public HashMap applyCreditNotes_Modified(HashMap requestParams, InvoiceDetail invoicedetail) throws ServiceException {

        HashMap hm = new HashMap();
        double amount;
        double quantity;
        String companyid = (String) requestParams.get("companyid");
        Invoice invoice=invoicedetail.getInvoice();
//        for (InvoiceDetail invoicedetail : invRows) {//reqiured for invoice discount row wise division[PS]
            double quantityTemp = invoicedetail.getInventory().getQuantity();
            quantity = quantityTemp;
            amount = invoicedetail.getRate() * quantity;
            double rowAmount = invoicedetail.getRate() * quantityTemp;
            if (invoice.getInvoicetype() != null && invoice.getInvoicetype().equals(Constants.Acc_Retail_Invoice_Variable)) {
                rowAmount = invoicedetail.getRate() * quantityTemp;
            }
            if (invoicedetail.getPartamount() != 0.0) {
                rowAmount = rowAmount * (invoicedetail.getPartamount() / 100);
                amount = amount * (invoicedetail.getPartamount() / 100);
            }
//            withoutDTAmt += rowAmount;
            double rdisc = (invoicedetail.getDiscount() == null ? 0 : invoicedetail.getDiscount().getDiscountValue());
            double rowTaxPercent = 0;
            double rowTaxAmount = 0;
            boolean isRowTaxApplicable = false;
            double rowWithDTAmt = 0;
            if (invoicedetail.getTax() != null) {
//                KwlReturnObject perresult = accTaxObj.getTaxPercent((String) requestParams.get(Constants.companyKey), invoice.getJournalEntry().getEntryDate(), invoicedetail.getTax().getID());
                KwlReturnObject perresult = accTaxObj.getTaxPercent((String) requestParams.get(Constants.companyKey), invoice.getCreationDate(), invoicedetail.getTax().getID());
                rowTaxPercent = (Double) perresult.getEntityList().get(0);
                isRowTaxApplicable = (Boolean) perresult.getEntityList().get(1);
                if (isRowTaxApplicable) {
                    rowTaxAmount = invoicedetail.getRowTaxAmount() + invoicedetail.getRowTermTaxAmount();
                }
            }
            double rowWithDAmt = amount - rdisc;
            if (invoicedetail.isWasRowTaxFieldEditable()) { //After made row tax field editable tax calculation will be take place according to row tax amount. - DATE - 28 -Jan-2014
                rowWithDTAmt = rowWithDAmt + rowTaxAmount;
            } else {// for earlier invoices it will be done according to row tax percent as selected in Tax combo column.
                rowWithDTAmt = rowWithDAmt + (rowWithDAmt * rowTaxPercent) / 100;
            }

            rowWithDTAmt = authHandler.round(rowWithDTAmt, companyid);
//            double invoiceDisc = invoicedetail.getInvoice().getDiscount() == null ? 0 : applyInvDisount(invoicedetail, withoutDTAmt);
//            rowWithDTAmt -= invoiceDisc; //Commenting as no discount at global level
            hm.put(invoicedetail, new Object[]{rowWithDTAmt, quantity, 0.0, rowWithDAmt, 0.0, rowWithDAmt}); //- invoiceDisc
//            if (invoice == null) {
//                invoice = invoicedetail.getInvoice();
//            }
//        }
        
        return hm;
    } 
 @Override
    public double applyInvDisount(InvoiceDetail invdetail, double withoutDTAmt) throws ServiceException {
        double disc = (invdetail.getInvoice().getDiscount() == null ? 0 : invdetail.getInvoice().getDiscount().getDiscountValue());
        if (disc == 0) {
            return 0;
        }
        double quantity = invdetail.getInventory().getQuantity();
        double amount = (quantity == 0 ? 0 : ((invdetail.getPartamount() != 0) ? ((invdetail.getRate() * quantity) * (invdetail.getPartamount() / 100)) : (invdetail.getRate() * quantity)));
        double rowDiscountRatio = (withoutDTAmt == 0 ? 0 : amount / withoutDTAmt);
        double rowDiscount = disc * rowDiscountRatio;
        return rowDiscount;
    }
  
 /*Request dependency Removed*/
 @Override
    public String getNewBatchJson(Product product, JSONObject paramJobj, String documentid) throws ServiceException, SessionExpiredException, JSONException {
        JSONArray jSONArray = new JSONArray();
        DateFormat df = authHandler.getDateOnlyFormat();
        KwlReturnObject kmsg = null;
        boolean isConsignment = (StringUtil.isNullOrEmpty(paramJobj.optString(Constants.isConsignment, null))) ? false : Boolean.parseBoolean(paramJobj.getString(Constants.isConsignment));
        boolean linkingFlag = (StringUtil.isNullOrEmpty(paramJobj.optString("linkingFlag", null))) ? false : Boolean.parseBoolean(paramJobj.getString("linkingFlag"));
        boolean isEdit = (StringUtil.isNullOrEmpty(paramJobj.optString("isEdit", null))) ? false : Boolean.parseBoolean(paramJobj.getString("isEdit"));
        boolean srflag = (StringUtil.isNullOrEmpty(paramJobj.optString("srflag",null))) ? false : Boolean.parseBoolean(paramJobj.getString("srflag"));
        String moduleID = paramJobj.optString(Constants.moduleid, null);
        String companyid = paramJobj.getString(Constants.companyKey);
        boolean isBatch = false;
        if (!product.isIsBatchForProduct() && !product.isIslocationforproduct() && !product.isIswarehouseforproduct() && !product.isIsrowforproduct() && !product.isIsrackforproduct() && !product.isIsbinforproduct() && product.isIsSerialForProduct()) {
            kmsg = accCommonTablesDAO.getOnlySerialDetails(documentid, linkingFlag, moduleID, isConsignment, isEdit);
        } else {
            isBatch = true;
            kmsg = accCommonTablesDAO.getBatchSerialDetails(documentid, !product.isIsSerialForProduct(), linkingFlag, moduleID, isConsignment, isEdit, "");
        }
        HashMap<String, Object> fieldrequestParams = new HashMap();
        fieldrequestParams.put(Constants.filter_names, Arrays.asList(Constants.companyid, Constants.moduleid, Constants.customcolumn));
        fieldrequestParams.put(Constants.filter_values, Arrays.asList(paramJobj.getString(Constants.companyKey), Constants.SerialWindow_ModuleId, 1));
        HashMap<String, String> customFieldMap = new HashMap<String, String>();
        HashMap<String, String> customDateFieldMap = new HashMap<String, String>();
        HashMap<String, String> replaceFieldMap1 = new HashMap<String, String>();
        HashMap<String, Integer> fieldMap = accAccountDAOobj.getFieldParamsCustomMapForRows(fieldrequestParams, replaceFieldMap1, customFieldMap, customDateFieldMap);
        double ActbatchQty = 1;
        double batchQty = 0;
        double avlquantity = 0;
        List batchserialdetails = kmsg.getEntityList();
        Iterator iter = batchserialdetails.iterator();
        while (iter.hasNext()) {
            Object[] objArr = (Object[]) iter.next();
            JSONObject obj = new JSONObject();
            obj.put("id", objArr[0] != null ? (String) objArr[0] : "");
            obj.put("batch", objArr[1] != null ? (String) objArr[1] : "");
            obj.put("batchname", objArr[1] != null ? (String) objArr[1] : "");
            obj.put("purchasebatchidValue", objArr[1] != null ? (String) objArr[1] : "");
            obj.put("location", objArr[2] != null ? (String) objArr[2] : "");
            obj.put("warehouse", objArr[3] != null ? (String) objArr[3] : "");
            if (isBatch) {
                obj.put("row", objArr[15] != null ? (String) objArr[15] : "");
                obj.put("rack", objArr[16] != null ? (String) objArr[16] : "");
                obj.put("bin", objArr[17] != null ? (String) objArr[17] : "");
            }
            obj.put("wastageQuantityType", objArr[18] != null ? objArr[18] : "");
            obj.put("wastageQuantity", objArr[19] != null ? objArr[19] : "");
            obj.put("stocktype", (product.isIsBatchForProduct() && !product.isIsSerialForProduct()) ? (objArr[21] != null ? objArr[21] : "") : (objArr[22] != null ? objArr[22] : ""));

            if ((product.isIsBatchForProduct() || product.isIslocationforproduct() || product.isIswarehouseforproduct() || product.isIsrowforproduct() || product.isIsrackforproduct() || product.isIsbinforproduct()) && product.isIsSerialForProduct()) {

                ActbatchQty = accCommonTablesDAO.getBatchQuantity(documentid, (String) objArr[0]);

                if (batchQty == 0) {
                    batchQty = ActbatchQty;
                }
                if (batchQty == ActbatchQty) {
                    obj.put("isreadyonly", false);
                    obj.put("quantity", ActbatchQty);
                } else {
                    obj.put("isreadyonly", true);
                    obj.put("quantity", "");
                }

            } else {
                obj.put("isreadyonly", false);
                obj.put("quantity", ActbatchQty);
            }
            if (!product.isIsBatchForProduct() && !product.isIslocationforproduct() && !product.isIswarehouseforproduct() && !product.isIsrowforproduct() && !product.isIsrackforproduct() && !product.isIsbinforproduct() && product.isIsSerialForProduct()) {
                obj.put("mfgdate", "");
                obj.put("expdate", "");
            } else {
                obj.put("mfgdate", objArr[4] != null ? df.format(objArr[4]) : "");
                obj.put("expdate", objArr[5] != null ? df.format(objArr[5]) : "");
            }

            if ((product.isIsBatchForProduct() || product.isIslocationforproduct() || product.isIswarehouseforproduct() || product.isIsrowforproduct() || product.isIsrackforproduct() || product.isIsbinforproduct()) && !product.isIsSerialForProduct()) {
                obj.put("quantity", objArr[11] != null ? objArr[11] : "");
            }

            obj.put("balance", 0);
            obj.put("asset", "");
            obj.put("serialnoid", objArr[7] != null ? (String) objArr[7] : "");
            obj.put("serialno", objArr[8] != null ? (String) objArr[8] : "");
            obj.put("purchaseserialidValue", objArr[8] != null ? (String) objArr[8] : "");

            if ((product.isIslocationforproduct() || product.isIswarehouseforproduct()) && linkingFlag && isConsignment && srflag && objArr[0] != null) {
                String dobatchId = objArr[0] != null ? (String) objArr[0] : "";
                String purchaseBatchId = "";
                if (!StringUtil.isNullOrEmpty(dobatchId)) {
                    purchaseBatchId = accCommonTablesDAO.getpurchaseBatchIdForDo(dobatchId, documentid);
                }
                obj.put("purchasebatchid", purchaseBatchId);
            } else {
                obj.put("purchasebatchid", objArr[0] != null ? (String) objArr[0] : "");
            }
            
            obj.put("purchaseserialid", objArr[7] != null ? (String) objArr[7] : "");
            obj.put("expstart", (objArr[9] != null && !objArr[9].toString().equalsIgnoreCase("")) ? df.format(objArr[9]) : "");
            obj.put("expend", (objArr[10] != null && !objArr[10].toString().equalsIgnoreCase(""))  ? df.format(objArr[10]) : "");
            obj.put("skufield", objArr[13] != null ? objArr[13] : "");
            obj.put("documentid", documentid != null ? documentid : "");
            obj.put("productid", product != null ? product.getID() : "");
            String locationid = objArr[2] != null ? (String) objArr[2] : "";
            String warehouseid = objArr[3] != null ? (String) objArr[3] : "";
            String purchasebatchid = objArr[0] != null ? (String) objArr[0] : "";
            String productid = product != null ? product.getID() : "";
            avlquantity = accInvoiceServiceDAO.getNewBatchRemainingQuantity(locationid, warehouseid, companyid, productid, purchasebatchid, moduleID, isEdit, documentid);
            obj.put("avlquantity", avlquantity);

            if (linkingFlag && !isConsignment && !isEdit) { //For geting only unused Serial batch details in DO
                if (product.isIsSerialForProduct() && objArr[7] != null) {
                    KwlReturnObject result1 = accountingHandlerDAOobj.getObject(NewBatchSerial.class.getName(), objArr[7].toString());
                    NewBatchSerial newBatchSerial = (NewBatchSerial) result1.getEntityList().get(0);
                    if (newBatchSerial != null && newBatchSerial.getQuantitydue() == 1) {
                        continue;
                    }
                } else if (product.isIsBatchForProduct() && !product.isIsSerialForProduct() && objArr[0] != null) {
                    KwlReturnObject result1 = accountingHandlerDAOobj.getObject(NewProductBatch.class.getName(), objArr[0].toString());
                    NewProductBatch newProductBatch = (NewProductBatch) result1.getEntityList().get(0);
                    if (newProductBatch != null && newProductBatch.getQuantitydue() > 0) {
                        continue;
                    }
                }
            }


            if (objArr[14] != null && !objArr[14].toString().equalsIgnoreCase("")) {   //Get SerialDocumentMappingId
                KwlReturnObject result1 = accountingHandlerDAOobj.getObject(SerialDocumentMapping.class.getName(), objArr[14].toString());
                SerialDocumentMapping sdm = (SerialDocumentMapping) result1.getEntityList().get(0);
                Map<String, Object> variableMap = new HashMap<String, Object>();
                SerialCustomData serialCustomData = (SerialCustomData) sdm.getSerialCustomData();
                HashMap<String, String> replaceFieldMap = new HashMap<String, String>();
                AccountingManager.setCustomColumnValues(serialCustomData, fieldMap, replaceFieldMap, variableMap);
                DateFormat defaultDateFormat=new SimpleDateFormat(Constants.MMMMdyyyy);
                Date dateFromDB=null;
                for (Map.Entry<String, Object> varEntry : variableMap.entrySet()) {
                    String coldata = varEntry.getValue().toString();
                    String valueForReport = "";
                    if (customFieldMap.containsKey(varEntry.getKey()) && coldata != null) {
                        try {
                            String[] valueData = coldata.split(",");
                            for (String value : valueData) {
                                FieldComboData fieldComboData = (FieldComboData) kwlCommonTablesDAOObj.getClassObject(FieldComboData.class.getName(), value);
                                if (fieldComboData != null) {
                                    valueForReport += value + ",";
                                }
                            }
                            if (valueForReport.length() > 1) {
                                valueForReport = valueForReport.substring(0, valueForReport.length() - 1);
                            }
                            obj.put(varEntry.getKey(), valueForReport);
                        } catch (Exception ex) {
                            obj.put(varEntry.getKey(), coldata);
                        }
                    } else if (customDateFieldMap.containsKey(varEntry.getKey())) {
                        DateFormat df2 = new SimpleDateFormat(Constants.yyyyMMdd);
                        //This code change is made because date will not be long value now,it will be date in String form refer ERP-32324 
                        try {
                            dateFromDB = defaultDateFormat.parse(coldata);
                            coldata = df2.format(dateFromDB);

                        } catch (Exception e) {
                        }
                        obj.put(varEntry.getKey(), coldata);
                    } else {
                        if (!StringUtil.isNullOrEmpty(coldata)) {
                            obj.put(varEntry.getKey(), coldata);
                        }
                    }
                }
            }
            jSONArray.put(obj);
            batchQty--;

        }
        return jSONArray.toString();
    } 
    
 
  @Override  
   @Transactional(propagation = Propagation.REQUIRED, rollbackFor = {ServiceException.class, SessionExpiredException.class, JSONException.class, AccountingException.class}) 
    public JSONObject deleteInvoiceJson(JSONObject paramJObj) throws JSONException, ServiceException {
        JSONObject jobj = new JSONObject();
        JSONObject response = new JSONObject();
        try {
            if (paramJObj.has(Constants.deletepermanentflag) && paramJObj.optBoolean(Constants.deletepermanentflag, false) == true) {
                response = deleteInvoicePermanent(paramJObj);
            } else {
                response = deleteInvoicesTemporary(paramJObj);
            }
            jobj.put(Constants.RES_msg, response.getString(Constants.RES_msg));
            jobj.put(Constants.RES_success, response.getBoolean(Constants.RES_success));
            jobj.put(Constants.linkedTransaction, response.getString(Constants.linkedTransaction));
        } catch (SessionExpiredException |JSONException ex) {
            Logger.getLogger(AccInvoiceServiceImpl.class.getName()).log(Level.SEVERE, null, ex);
            throw ServiceException.FAILURE(ex.getMessage(), ex);
        } catch (Exception ex) {
            throw ServiceException.FAILURE(ex.getMessage(), ex);
        }
        return jobj;
    }

  //Delete temporary Invoices
    public JSONObject deleteInvoicesTemporary(JSONObject paramJobj) throws ServiceException, AccountingException, SessionExpiredException {
        String linkedTransaction = "";
        String msg = "";
        boolean issuccess = false;
        JSONObject response = new JSONObject();
        try {
            JSONArray jArr = paramJobj.getJSONArray(Constants.RES_data);
            String companyid = paramJobj.getString(Constants.companyKey);

            KwlReturnObject capresult = accountingHandlerDAOobj.getObject(CompanyAccountPreferences.class.getName(), companyid);
            CompanyAccountPreferences preferences = (CompanyAccountPreferences) capresult.getEntityList().get(0);

            boolean isFixedAsset = false;
            boolean isConsignment = false;
            boolean isLeaseFixedAsset = false;

            if (!StringUtil.isNullOrEmpty(paramJobj.optString(Constants.isFixedAsset, null))) {
                isFixedAsset = Boolean.parseBoolean(paramJobj.getString(Constants.isFixedAsset));
            }
            if (!StringUtil.isNullOrEmpty(paramJobj.optString(Constants.isLeaseFixedAsset, null))) {
                isLeaseFixedAsset = Boolean.parseBoolean(paramJobj.getString(Constants.isLeaseFixedAsset));
            }
            if (!StringUtil.isNullOrEmpty(paramJobj.optString(Constants.isConsignment, null))) {
                isConsignment = Boolean.parseBoolean(paramJobj.getString(Constants.isConsignment));
            }

            String invoiceid, jeid, invoiceno;
            KwlReturnObject result;
            for (int i = 0; i < jArr.length(); i++) {
                JSONObject jobj = jArr.getJSONObject(i);
                invoiceid = jobj.getString(Constants.billid);

                KwlReturnObject res = accountingHandlerDAOobj.getObject(Invoice.class.getName(), invoiceid);
                Invoice invoice = (Invoice) res.getEntityList().get(0);

                invoiceno = invoice.getInvoiceNumber();
                String entryno = invoice.getJournalEntry() != null ? invoice.getJournalEntry().getEntryNumber() : "";
                if (isFixedAsset || isLeaseFixedAsset) {
                    HashMap<String, Object> requestParams = new HashMap<String, Object>();
                    requestParams.put("invoiceid", invoiceid);
                    requestParams.put(Constants.companyKey, companyid);
                    accInvoiceDAOobj.deleteAssetDetailsLinkedWithInvoice(requestParams);
                    if (isLeaseFixedAsset) {
                        accInvoiceDAOobj.deleteInvoiceContractMappings(requestParams);
                    }
                }

                result = accCreditNoteDAOobj.getCNFromInvoice(invoiceid, companyid);
                List list = result.getEntityList();
                if (!list.isEmpty()) {
                    linkedTransaction += invoiceno + ", ";
                    continue;
                }

                boolean includeTempDeleted = true;
                result = accCreditNoteDAOobj.getCNFromInvoiceOtherwise(invoiceid, companyid,includeTempDeleted);
                list = result.getEntityList();
                if (!list.isEmpty()) {                        //while deleting invoice check wether it is used in credit note
                    linkedTransaction += invoiceno + ", ";
                    continue;
                }
                result = accInvoiceDAOobj.getDOFromInvoice(invoiceid, companyid);
                list = result.getEntityList();
                if (!list.isEmpty()) {
                    linkedTransaction += invoiceno + ", ";
                    continue;
                }

                HashMap<String, Object> receiptMap = new HashMap<String, Object>();
                receiptMap.put("invoiceid", invoiceid);
                receiptMap.put(Constants.companyKey, companyid);
                result = accReceiptDAOobj.getReceiptFromInvoice(receiptMap);
                list = result.getEntityList();
                if (!list.isEmpty()) {
                    linkedTransaction += invoiceno + ", ";
                    continue;
                }
                result = accReceiptDAOobj.getLinkDetailReceipt(receiptMap);
                list = result.getEntityList();
                if (!list.isEmpty()) {
                    linkedTransaction += invoiceno + ", ";
                    continue;
                }
                result = accInvoiceDAOobj.getSRFromInvoice(invoiceid, companyid);
                list = result.getEntityList();
                if (!list.isEmpty()) {
                    linkedTransaction += invoiceno + ", ";
                    continue;
                }

                // Check if invoice has been claimed or recovered then it should not be delete
                // for Malasian Company
                HashMap<String, Object> badMaps = new HashMap<String, Object>();
                badMaps.put(Constants.companyKey, companyid);
                badMaps.put("invoiceid", invoiceid);

                result = accInvoiceDAOobj.getBadDebtInvoiceMappingForInvoice(badMaps);
                list = result.getEntityList();
                if (!list.isEmpty()) {
                    linkedTransaction += invoiceno + ", ";
                    continue;
                }

                // check the pushed invoices in delivery Planner
                result = accInvoiceDAOobj.getInvoiceFromDeliveryPlanner(invoiceid, companyid);
                list = result.getEntityList();
                if (!list.isEmpty()) {
                    linkedTransaction += invoiceno + ", ";
                    continue;
                }
                StringBuffer journalEntryMsg = new StringBuffer();
                if (!StringUtil.isNullOrEmpty(entryno)) {
                    journalEntryMsg.append(" along with the JE No. " + entryno);
                }
                boolean iscash = StringUtil.isNullOrEmpty(paramJobj.optString("incash", null)) ? false : Boolean.parseBoolean(paramJobj.getString("incash"));
                boolean isReject = StringUtil.isNullOrEmpty(paramJobj.optString("isReject", null)) ? false : Boolean.parseBoolean(paramJobj.getString("isReject"));
                String actionMsg = "deleted";
                if (isReject == true) {
                    actionMsg = "Rejected";
                }
                String audtmsg = "";
                if (isFixedAsset) {
                    audtmsg = " Asset Disposal Invoice ";
                } else if (isConsignment) {
                    audtmsg = " Consignment Sales Invoice ";
                } else if (isLeaseFixedAsset) {
                    audtmsg = " Lease Sales Invoice ";
                } else {
                    audtmsg = " Sales Invoice ";
                }

                Map<String, Object> insertLogParams = new HashMap<String, Object>();
                insertLogParams.put(Constants.reqHeader, (paramJobj.has(Constants.reqHeader) && paramJobj.get(Constants.reqHeader) != null) ? paramJobj.getString(Constants.reqHeader) : paramJobj.getString(Constants.remoteIPAddress));
                insertLogParams.put(Constants.remoteIPAddress, paramJobj.getString(Constants.remoteIPAddress));
                insertLogParams.put(Constants.useridKey, paramJobj.getString(Constants.useridKey));
                if (!iscash) {
                    auditTrailObj.insertAuditLog(AuditAction.INVOICE_DELETED, "User " + paramJobj.getString(Constants.userfullname) + " has " + actionMsg + audtmsg + invoiceno + journalEntryMsg.toString(), insertLogParams, invoiceid);
                } else {
                    auditTrailObj.insertAuditLog(AuditAction.CASH_SALES_DELETED, "User " + paramJobj.getString(Constants.userfullname) + " has " + actionMsg + " Cash Sales  " + invoiceno + journalEntryMsg.toString(), insertLogParams, invoiceid);
                }
                result = accInvoiceDAOobj.deleteInvoiceEntry(invoiceid, companyid);
                result = accInvoiceDAOobj.getJEFromInvoice(invoiceid);
                list = result.getEntityList();
                Iterator itr = list.iterator();
                while (itr.hasNext()) {
                    jeid = (String) itr.next();
                    result = accJournalEntryobj.deleteJournalEntry(jeid, companyid);
                    //Delete entry from optimized table
                    accJournalEntryobj.deleteAccountJEs_optimized(jeid);
                }

                HashMap<String, Object> writeOffMap = new HashMap<String, Object>();
                writeOffMap.put("invoiceid", invoiceid);
                writeOffMap.put(Constants.companyKey, companyid);
                result = accWriteOffServiceDao.getWriteOffJEs(writeOffMap);
                List<InvoiceWriteOff> writeOffList = result.getEntityList();
                for (InvoiceWriteOff IWO : writeOffList) {
                    jeid = IWO.getJournalEntry().getID();
                    result = accJournalEntryobj.deleteJournalEntry(jeid, companyid);
                }

                result = accWriteOffServiceDao.getReverseWriteOffJEs(writeOffMap);
                writeOffList = result.getEntityList();
                for (InvoiceWriteOff IWO : writeOffList) {
                    jeid = IWO.getReversejournalEntry().getID();
                    result = accJournalEntryobj.deleteJournalEntry(jeid, companyid);
                }

                result = accInvoiceDAOobj.getInvoiceDiscount(invoiceid);
                list = result.getEntityList();
                itr = list.iterator();
                while (itr.hasNext()) {
                    String discountid = (String) itr.next();
                    result = accDiscountobj.deleteDiscountEntry(discountid, companyid);
                }
                result = accInvoiceDAOobj.getInvoiceDetailsDiscount(invoiceid);
                list = result.getEntityList();
                itr = list.iterator();
                while (itr.hasNext()) {
                    String discountid = (String) itr.next();
                    result = accDiscountobj.deleteDiscountEntry(discountid, companyid);
                }

                result = accInvoiceDAOobj.getInvoiceInventory(invoiceid);
                list = result.getEntityList();
                itr = list.iterator();
                while (itr.hasNext()) {
                    String inventoryid = (String) itr.next();
                    result = accProductObj.deleteInventoryEntry(inventoryid, companyid);
                }
                result = accJournalEntryobj.deleteJournalEntryReval(invoiceid, companyid);
                if (preferences.isInventoryAccountingIntegration() && !preferences.isWithInvUpdate()) {

                    String action = "17";
                    boolean isDirectUpdateInvFlag = false;
                    if (preferences.isUpdateInvLevel()) {
                        isDirectUpdateInvFlag = true;
                        action = "19";//Direct Inventory Update action
                    }

                    JSONArray productArray = new JSONArray();
                    Set<InvoiceDetail> invoiceDetails = invoice.getRows();
                    for (InvoiceDetail invoiceDetail : invoiceDetails) {
                        JSONObject productObject = new JSONObject();
                        productObject.put("itemUomId", invoiceDetail.getInventory().getUom().getID());
                        productObject.put("itemBaseUomRate", invoiceDetail.getInventory().getBaseuomrate());
                        productObject.put("itemQuantity", invoiceDetail.getInventory().getBaseuomquantity());
                        productObject.put("quantity", invoiceDetail.getInventory().getQuantity());
                        productObject.put("itemCode", invoiceDetail.getInventory().getProduct().getProductid());
                        if (isDirectUpdateInvFlag) {
                            productObject.put("storeid", invoiceDetail.getInvstoreid());
                            productObject.put("locationid", invoiceDetail.getInvlocid());
                        }
                        productArray.put(productObject);
                    }
                    if (productArray.length() > 0) {

                        String sendDateFormat = Constants.yyyyMMdd;
                        DateFormat dateformat = new SimpleDateFormat(sendDateFormat);
//                        Date date = invoice.getJournalEntry().getEntryDate();
                        Date date = invoice.getCreationDate();
                        String stringDate = dateformat.format(date);

                        JSONObject jSONObject = new JSONObject();
                        jSONObject.put("deliveryDate", stringDate);
                        jSONObject.put("dateFormat", sendDateFormat);
                        jSONObject.put("details", productArray);
                        jSONObject.put("orderNumber", invoice.getInvoiceNumber());
                        jSONObject.put("companyId", companyid);
                        jSONObject.put("selling", true);

                        String url = paramJobj.optString(Constants.inventoryURL, "");
                        CommonFnController cfc = new CommonFnController();
                        cfc.updateInventoryLevel(paramJobj, jSONObject, url, action);
                    }
                }
            }

            if (StringUtil.isNullOrEmpty(linkedTransaction)) {
                issuccess = true;
                if (isConsignment) {
                    msg = messageSource.getMessage("acc.consignment.inv.del", null, Locale.forLanguageTag(paramJobj.getString(Constants.language))); //"Invoice(s) has been deleted successfully";
                } else if (isFixedAsset) {
                    msg = messageSource.getMessage("acc.in.asset.del", null, Locale.forLanguageTag(paramJobj.getString(Constants.language))); //"Asset Disposal Invoice(s) has been deleted successfully";                    
                } else {
                    msg = messageSource.getMessage("acc.rem.179", null, Locale.forLanguageTag(paramJobj.getString(Constants.language))); //"Invoice(s) has been deleted successfully";                    
                }
            } else {
                if (isConsignment) {
                    msg = messageSource.getMessage("acc.consignment.Invoicesexcept", null, Locale.forLanguageTag(paramJobj.getString(Constants.language))) + " " + linkedTransaction.substring(0, linkedTransaction.length() - 2) + " " + messageSource.getMessage("acc.field.hasbeendeletedsuccessfully", null, Locale.forLanguageTag(paramJobj.getString(Constants.language)));
                } else {
                    msg = messageSource.getMessage("acc.field.Invoicesexcept", null, Locale.forLanguageTag(paramJobj.getString(Constants.language))) + " " + linkedTransaction.substring(0, linkedTransaction.length() - 2) + " " + messageSource.getMessage("acc.field.hasbeendeletedsuccessfully", null, Locale.forLanguageTag(paramJobj.getString(Constants.language)));
                }
            }
        } catch (JSONException ex) {
            throw new AccountingException("Cannot extract data from client");
        } finally {
            try {
                response.put(Constants.RES_success, issuccess);
                response.put(Constants.RES_msg, msg);
                response.put(Constants.linkedTransaction, linkedTransaction);
            } catch (JSONException ex) {
                Logger.getLogger(AccInvoiceServiceImpl.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return response;
    }
  
  //DeleteInvoicePermanently  
    public JSONObject deleteInvoicePermanent(JSONObject paramJobj) throws ServiceException, AccountingException, SessionExpiredException, ParseException {
        String linkedTransaction = "";
        String msg = "";
        boolean issuccess = false;
        JSONObject response = new JSONObject();
        try {
            JSONArray jArr = paramJobj.getJSONArray(Constants.RES_data);
            String companyid = paramJobj.getString(Constants.companyKey);
            String invoiceid = "", journalentryid = "", entryno = "", invoiceno = "";
            KwlReturnObject capresult = accountingHandlerDAOobj.getObject(CompanyAccountPreferences.class.getName(), companyid);
            CompanyAccountPreferences preferences = (CompanyAccountPreferences) capresult.getEntityList().get(0);

            boolean isFixedAsset = false;
            boolean isLeaseFixedAsset = false;
            boolean isConsignment = false;
            boolean auditcheck = true;
            if (!StringUtil.isNullOrEmpty(paramJobj.optString(Constants.isFixedAsset, null))) {
                isFixedAsset = Boolean.parseBoolean(paramJobj.getString(Constants.isFixedAsset));
            }
            if (!StringUtil.isNullOrEmpty(paramJobj.optString(Constants.isLeaseFixedAsset, null))) {
                isLeaseFixedAsset = Boolean.parseBoolean(paramJobj.getString(Constants.isLeaseFixedAsset));
            }
            if (!StringUtil.isNullOrEmpty(paramJobj.optString(Constants.isConsignment, null))) {
                isConsignment = Boolean.parseBoolean(paramJobj.getString(Constants.isConsignment));
            }
            if (!StringUtil.isNullOrEmpty(paramJobj.optString("auditcheck", null))) {
                auditcheck = Boolean.parseBoolean(paramJobj.getString("auditcheck"));
            }
            for (int i = 0; i < jArr.length(); i++) {
                String deletedWrittenOffJe = "";
                String msgForDeletedWriteOffJe = "";
                String deletedWrittenOffRecoveredJe = "";
                String msgForDeletedRecoveredWriteOffJe = "";
                JSONObject jobj = jArr.getJSONObject(i);
                invoiceid = jobj.getString(Constants.billid);
                KwlReturnObject res = accountingHandlerDAOobj.getObject(Invoice.class.getName(), invoiceid);
                Invoice invoice = (Invoice) res.getEntityList().get(0);
                entryno = invoice.getJournalEntry().getEntryNumber();
                invoiceno = invoice.getInvoiceNumber();
                journalentryid = invoice.getJournalEntry().getID();
                DateFormat dateFormatForLock = authHandler.getDateOnlyFormat();
                Date entryDateForLock = null;
                entryDateForLock = invoice.getJournalEntry().getEntryDate();

                HashMap<String, Object> requestParams = new HashMap<String, Object>();
                requestParams.put("invoiceid", invoiceid);
                requestParams.put(Constants.companyKey, companyid);
                requestParams.put("entryno", entryno);
                requestParams.put("journalentryid", journalentryid);
                requestParams.put(Constants.isFixedAsset, isFixedAsset);
                requestParams.put(Constants.isLeaseFixedAsset, isLeaseFixedAsset);
                requestParams.put(Constants.isConsignment, isConsignment);
                if (entryDateForLock != null) {
                    requestParams.put("entrydate", entryDateForLock);
                    requestParams.put("df", dateFormatForLock);
                }
                KwlReturnObject result;
                if (!StringUtil.isNullOrEmpty(invoiceid)) {
                    result = accCreditNoteDAOobj.getCNFromInvoice(invoiceid, companyid);
                    List list = result.getEntityList();
                    if (!list.isEmpty()) {
                        linkedTransaction += "<a onclick='linkinfo(\"" + invoice.getID() + "\",\"false\",\"Customer\",\"" + invoiceno + "\",\"true\",\"" + isFixedAsset + "\")'href='#'>" + invoiceno + "</a> ,";
                        continue;
                    }

                    boolean includeTempDeleted = true;
                    result = accCreditNoteDAOobj.getCNFromInvoiceOtherwise(invoiceid, companyid,includeTempDeleted);
                    list = result.getEntityList(); //while deleting invoice check wether it is used in credit note
                    if (!list.isEmpty()) {
                        linkedTransaction += "<a onclick='linkinfo(\"" + invoice.getID() + "\",\"false\",\"Customer\",\"" + invoiceno + "\",\"true\",\"" + isFixedAsset + "\")'href='#'>" + invoiceno + "</a> ,";
                        continue;
                    }

                    result = accInvoiceDAOobj.getDOFromInvoice(invoiceid, companyid);
                    list = result.getEntityList();
                    if (!list.isEmpty()) {
                        linkedTransaction += "<a onclick='linkinfo(\"" + invoice.getID() + "\",\"false\",\"Customer\",\"" + invoiceno + "\",\"true\",\"" + isFixedAsset + "\")'href='#'>" + invoiceno + "</a> ,";
                        continue;
                    }

                    HashMap<String, Object> receiptMap = new HashMap<String, Object>();

                    receiptMap.put("invoiceid", invoiceid);
                    receiptMap.put(Constants.companyKey, companyid);

                    result = accReceiptDAOobj.getReceiptFromInvoice(receiptMap);
                    list = result.getEntityList();
                    if (!list.isEmpty()) {
                        linkedTransaction += "<a onclick='linkinfo(\"" + invoice.getID() + "\",\"false\",\"Customer\",\"" + invoiceno + "\",\"true\",\"" + isFixedAsset + "\")'href='#'>" + invoiceno + "</a> ,";
                        continue;
                    }
                    result = accInvoiceDAOobj.getSRFromInvoice(invoiceid, companyid);
                    list = result.getEntityList();
                    if (!list.isEmpty()) {
                        linkedTransaction += "<a onclick='linkinfo(\"" + invoice.getID() + "\",\"false\",\"Customer\",\"" + invoiceno + "\",\"true\",\"" + isFixedAsset + "\")'href='#'>" + invoiceno + "</a> ,";
                        continue;
                    }

                    // Check if invoice has been claimed or recovered then it should not be delete
                    // for Malasian Company
                    HashMap<String, Object> badMaps = new HashMap<String, Object>();
                    badMaps.put("companyid", companyid);
                    badMaps.put("invoiceid", invoiceid);

                    result = accInvoiceDAOobj.getBadDebtInvoiceMappingForInvoice(badMaps);
                    list = result.getEntityList();
                    if (!list.isEmpty()) {
                        linkedTransaction += "<a onclick='linkinfo(\"" + invoice.getID() + "\",\"false\",\"Customer\",\"" + invoiceno + "\",\"true\",\"" + isFixedAsset + "\")'href='#'>" + invoiceno + "</a> ,";
                        continue;
                    }

                    // Check if invoice has been used in Delivery Planner
                    result = accInvoiceDAOobj.getInvoiceFromDeliveryPlanner(invoiceid, companyid);
                    list = result.getEntityList();
                    if (!list.isEmpty()) {
                        linkedTransaction += "<a onclick='linkinfo(\"" + invoice.getID() + "\",\"false\",\"Customer\",\"" + invoiceno + "\",\"true\",\"" + isFixedAsset + "\")'href='#'>" + invoiceno + "</a> ,";
                        continue;
                    }

                    HashMap<String, Object> doRequestParams = new HashMap<String, Object>();
                    ArrayList filter_names = new ArrayList(), filter_params = new ArrayList();
                    filter_names.add("invoice.ID");
                    filter_params.add(invoice.getID());
                    doRequestParams.put("filter_names", filter_names);
                    doRequestParams.put("filter_params", filter_params);
                    String linkid = "";
                    KwlReturnObject idresult = accInvoiceDAOobj.getInvoiceDetails(doRequestParams);
                    Iterator itr = idresult.getEntityList().iterator();
                    while (itr.hasNext()) {
                        InvoiceDetail row = (InvoiceDetail) itr.next();
                        if (row.getSalesorderdetail() != null) {
                            linkid = row.getSalesorderdetail().getSalesOrder().getID();
                            if (!StringUtil.isNullOrEmpty(linkid)) {
                                KwlReturnObject rdresult = accountingHandlerDAOobj.getObject(SalesOrder.class.getName(), linkid);
                                SalesOrder salesOrder = (SalesOrder) rdresult.getEntityList().get(0);
                                HashMap hMap = new HashMap();
                                hMap.put("salesOrder", salesOrder);
                                hMap.put("value", "0");
                                hMap.put("isSOOpen", true);
                                accInvoiceDAOobj.updateSOLinkflag(hMap);
                            }
                        } else if (row.getDeliveryOrderDetail() != null) {
                            linkid = row.getDeliveryOrderDetail().getDeliveryOrder().getID();
                            if (!StringUtil.isNullOrEmpty(linkid)) {
                                KwlReturnObject rdresult = accountingHandlerDAOobj.getObject(DeliveryOrder.class.getName(), linkid);
                                DeliveryOrder deliveryOrder = (DeliveryOrder) rdresult.getEntityList().get(0);
                                HashMap hMap = new HashMap();
                                hMap.put("deliveryOrder", deliveryOrder);
                                hMap.put("isOpen", true);
                                accInvoiceDAOobj.updateDeliveryOrderStatus(hMap);
                            }
                        }
                    }

                    if (preferences.isInventoryAccountingIntegration() && !preferences.isWithInvUpdate()) {
                        String action = "17";
                        boolean isDirectUpdateInvFlag = false;
                        if (preferences.isUpdateInvLevel()) {
                            isDirectUpdateInvFlag = true;
                            action = "19";//Direct Inventory Update action
                        }

                        JSONArray productArray = new JSONArray();
                        Set<InvoiceDetail> invoiceDetails = invoice.getRows();
                        for (InvoiceDetail invoiceDetail : invoiceDetails) {
                            JSONObject productObject = new JSONObject();
                            productObject.put("itemUomId", invoiceDetail.getInventory().getUom().getID());
                            productObject.put("itemBaseUomRate", invoiceDetail.getInventory().getBaseuomrate());
                            productObject.put("itemQuantity", invoiceDetail.getInventory().getBaseuomquantity());
                            productObject.put("quantity", invoiceDetail.getInventory().getQuantity());
                            productObject.put("itemCode", invoiceDetail.getInventory().getProduct().getProductid());
                            if (isDirectUpdateInvFlag) {
                                productObject.put("storeid", invoiceDetail.getInvstoreid());
                                productObject.put("locationid", invoiceDetail.getInvlocid());
                            }
                            productArray.put(productObject);
                        }
                        if (productArray.length() > 0) {

                            String sendDateFormat = Constants.yyyyMMdd;
                            DateFormat dateformat = new SimpleDateFormat(sendDateFormat);
//                            Date date = invoice.getJournalEntry().getEntryDate();
                            Date date = invoice.getCreationDate();
                            String stringDate = dateformat.format(date);

                            JSONObject jSONObject = new JSONObject();
                            jSONObject.put("deliveryDate", stringDate);
                            jSONObject.put("dateFormat", sendDateFormat);
                            jSONObject.put("details", productArray);
                            jSONObject.put("orderNumber", invoice.getInvoiceNumber());
                            jSONObject.put("companyId", companyid);
                            jSONObject.put("selling", true);

                            String url = paramJobj.optString(Constants.inventoryURL, "");
                            CommonFnController cfc = new CommonFnController();
                            cfc.updateInventoryLevel(paramJobj, jSONObject, url, action);
                        }
                    }
                    if (isConsignment) {
                        accInvoiceDAOobj.deleteInvoicesBatchSerialDetails(requestParams);
                    }
                    result = accJournalEntryobj.permanentDeleteJournalEntryDetailReval(invoiceid, companyid);
                    result = accJournalEntryobj.permanentDeleteJournalEntryReval(invoiceid, companyid);


                    String reconsilationID = "";
                    String unReconsilationID = "";

                    //Deleting  BankReconciliationDetail
                    KwlReturnObject reconsiledDetails = accBankReconciliationObj.getBRfromJE(journalentryid, companyid, true);
                    if (reconsiledDetails.getRecordTotalCount() > 0) {
                        List<BankReconciliationDetail> brd = reconsiledDetails.getEntityList();
                        for (BankReconciliationDetail reconciliation : brd) {
                            accBankReconciliationObj.permenantDeleteBankReconciliationDetail(reconciliation.getID(), companyid);
                            reconsilationID = reconciliation.getBankReconciliation().getID();
                        }
                    }

                    //Deleting  BankUnreconciliationDetail
                    KwlReturnObject unReconsiledDetails = accBankReconciliationObj.getBankUnReconsiledfromJE(journalentryid, companyid, true);
                    if (unReconsiledDetails.getRecordTotalCount() > 0) {
                        List<BankUnreconciliationDetail> brd = unReconsiledDetails.getEntityList();
                        for (BankUnreconciliationDetail reconciliation : brd) {
                            accBankReconciliationObj.permenantDeleteBankUnReconciliationDetail(reconciliation.getID(), companyid);
                            unReconsilationID = reconciliation.getBankReconciliation().getID();
                        }
                    }
                    if (!StringUtil.isNullOrEmpty(reconsilationID)) {
                        accBankReconciliationObj.deleteBankReconciliation(reconsilationID, companyid);
                    }
                    if (!StringUtil.isNullOrEmpty(unReconsilationID)) {
                        accBankReconciliationObj.deleteBankReconciliation(unReconsilationID, companyid);
                    }


                    boolean iscash = StringUtil.isNullOrEmpty(paramJobj.optString("incash", null)) ? false : Boolean.parseBoolean(paramJobj.getString("incash"));
                    HashMap<String, Object> writeOffMap = new HashMap<String, Object>();
                    writeOffMap.put("invoiceid", invoiceid);
                    writeOffMap.put(Constants.companyKey, companyid);
                    KwlReturnObject writeOffJeResult = accWriteOffServiceDao.getWriteOffJEs(writeOffMap);
                    List<InvoiceWriteOff> IWO = writeOffJeResult.getEntityList();
                    for (InvoiceWriteOff iwo : IWO) {
                        deletedWrittenOffJe += iwo.getJournalEntry().getEntryNumber() + ",";
                    }
                    if (!deletedWrittenOffJe.equals("")) {
                        deletedWrittenOffJe = deletedWrittenOffJe.substring(0, deletedWrittenOffJe.length() - 1);
                        msgForDeletedWriteOffJe = messageSource.getMessage("acc.invoiceDelete.DeletedWriteOffJE", null, Locale.forLanguageTag(paramJobj.getString(Constants.language))) + " " + deletedWrittenOffJe;
                    }

                    writeOffJeResult = accWriteOffServiceDao.getWriteOffJEs(writeOffMap);
                    IWO = writeOffJeResult.getEntityList();
                    for (InvoiceWriteOff iwo : IWO) {
                        deletedWrittenOffRecoveredJe += iwo.getReversejournalEntry().getEntryNumber() + ",";
                    }

                    if (!deletedWrittenOffRecoveredJe.equals("")) {
                        deletedWrittenOffRecoveredJe = deletedWrittenOffRecoveredJe.substring(0, deletedWrittenOffRecoveredJe.length() - 1);
                        msgForDeletedRecoveredWriteOffJe = messageSource.getMessage("acc.invoiceDelete.DeletedWriteOffRecoveredJE", null, Locale.forLanguageTag(paramJobj.getString(Constants.language))) + " " + deletedWrittenOffRecoveredJe;
                    }
                    StringBuffer journalEntryMsg = new StringBuffer();
                    if (!StringUtil.isNullOrEmpty(entryno)) {
                        journalEntryMsg.append(" along with the JE No. " + entryno);
                    }
                    accInvoiceDAOobj.deleteLinkingInformationOfSI(requestParams);
                    accInvoiceDAOobj.deleteInvoicePermanent(requestParams);
                    String audtmsg = "";
                    if (isFixedAsset) {
                        audtmsg = " has deleted Asset Disposal Invoice Permanently ";
                    } else if (isLeaseFixedAsset) {
                        audtmsg = " has deleted Lease Sales Invoice Permanently ";
                    } else if (isConsignment) {
                        audtmsg = " has deleted Consignment Sales Invoice Permanently ";
                    } else {
                        audtmsg = " has deleted Sales Invoice Permanently ";
                    }

                    if (auditcheck) {
                        Map<String, Object> insertLogParams = new HashMap<String, Object>();
                        insertLogParams.put(Constants.reqHeader, (paramJobj.has(Constants.reqHeader) && paramJobj.get(Constants.reqHeader) != null) ? paramJobj.getString(Constants.reqHeader) : paramJobj.getString(Constants.remoteIPAddress));
                        insertLogParams.put(Constants.remoteIPAddress, paramJobj.getString(Constants.remoteIPAddress));
                        insertLogParams.put(Constants.useridKey, paramJobj.getString(Constants.useridKey));
                        if (!iscash) {
                            auditTrailObj.insertAuditLog(AuditAction.INVOICE_DELETED, "User " + paramJobj.getString(Constants.userfullname) + audtmsg + invoiceno + journalEntryMsg.toString() + ". " + msgForDeletedWriteOffJe + " " + msgForDeletedRecoveredWriteOffJe, insertLogParams, invoiceid);
                        } else {
                            auditTrailObj.insertAuditLog(AuditAction.CASH_SALES_DELETED, "User " + paramJobj.getString(Constants.userfullname) + " has deleted Cash Sales Permanently. " + invoiceno + journalEntryMsg.toString(), insertLogParams, invoiceid);
                        }
                    }
                }
            }

            if (StringUtil.isNullOrEmpty(linkedTransaction)) {
                issuccess = true;
                if (isConsignment) {
                    msg = messageSource.getMessage("acc.consignment.inv.del", null, Locale.forLanguageTag(paramJobj.getString(Constants.language))); //"Invoice(s) has been deleted successfully";
                } else if (isFixedAsset) {
                    msg = messageSource.getMessage("acc.in.asset.delp", null, Locale.forLanguageTag(paramJobj.getString(Constants.language))); //"Asset Disposel Invoice(s) has been deleted successfully";                    
                } else {
                    msg = messageSource.getMessage("acc.rem.179", null, Locale.forLanguageTag(paramJobj.getString(Constants.language))); //"Invoice(s) has been deleted successfully";                    
                }
            } else {
                if (isConsignment) {
                    msg = messageSource.getMessage("acc.consignment.Invoicesexcept", null, Locale.forLanguageTag(paramJobj.getString(Constants.language))) + " " + linkedTransaction.substring(0, linkedTransaction.length() - 2) + " " + messageSource.getMessage("acc.field.hasbeendeletedsuccessfully", null, Locale.forLanguageTag(paramJobj.getString(Constants.language)));
                } else {
                    msg = messageSource.getMessage("acc.field.Invoicesexcept", null, Locale.forLanguageTag(paramJobj.getString(Constants.language))) + " " + linkedTransaction.substring(0, linkedTransaction.length() - 2) + " " + messageSource.getMessage("acc.field.hasbeendeletedsuccessfully", null, Locale.forLanguageTag(paramJobj.getString(Constants.language)));
                }
            }
        } catch (JSONException ex) {
            Logger.getLogger(AccInvoiceServiceImpl.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
            throw new AccountingException("Cannot extract data from client");
        } finally {
            try {
                response.put(Constants.RES_success, issuccess);
                response.put(Constants.RES_msg, msg);
                response.put(Constants.linkedTransaction, linkedTransaction);
            } catch (JSONException ex) {
                Logger.getLogger(AccInvoiceServiceImpl.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return response;
    }
   
 @Override
    public HashMap<String, Object> getDeliveryOrdersMapJSON(JSONObject paramJobj) throws JSONException, ServiceException, SessionExpiredException {
        HashMap<String, Object> requestParams = AccountingManager.getGlobalParamsJson(paramJobj);
        requestParams.put(Constants.ss, paramJobj.optString(Constants.ss));
        //checking filetype to print all records for csv,print & pdf
        if (StringUtil.isNullOrEmpty(paramJobj.optString("filetype"))) {
            requestParams.put(Constants.start, paramJobj.optString(Constants.start, null));
            requestParams.put(Constants.limit, paramJobj.optString(Constants.limit, null));
        }
        requestParams.put(CCConstants.REQ_costCenterId, paramJobj.optString(CCConstants.REQ_costCenterId, null));
        requestParams.put(CCConstants.REQ_customerId, paramJobj.optString(CCConstants.REQ_customerId, null));
        requestParams.put(Constants.REQ_startdate, paramJobj.optString(Constants.REQ_startdate, null));
        requestParams.put(Constants.REQ_enddate, paramJobj.optString(Constants.REQ_enddate, null));
        requestParams.put(Constants.Acc_Search_Json, paramJobj.optString(Constants.Acc_Search_Json, null));
        requestParams.put(Constants.newcustomerid, paramJobj.optString(Constants.newcustomerid,null));
        requestParams.put(Constants.moduleid, paramJobj.optString(Constants.moduleid, null));
        requestParams.put(Constants.Filter_Criteria, paramJobj.optString(InvoiceConstants.Filter_Criteria, null));
        requestParams.put(Constants.MARKED_FAVOURITE, paramJobj.optString(Constants.MARKED_FAVOURITE, null));
        requestParams.put(InvoiceConstants.billid, paramJobj.optString(InvoiceConstants.billid, null));
        requestParams.put(InvoiceConstants.deleted, paramJobj.optString(InvoiceConstants.deleted, null));
        requestParams.put("currencyfilterfortrans", (paramJobj.optString("currencyfilterfortrans", null) == null) ? "" : paramJobj.getString("currencyfilterfortrans"));
        requestParams.put(Constants.isFixedAsset, (paramJobj.optString(Constants.isFixedAsset, null) != null) ? Boolean.parseBoolean(paramJobj.getString(Constants.isFixedAsset)) : false);
        requestParams.put(Constants.isLeaseFixedAsset, (paramJobj.optString(Constants.isLeaseFixedAsset, null) != null) ? Boolean.parseBoolean(paramJobj.getString(Constants.isLeaseFixedAsset)) : false);
        requestParams.put(Constants.isConsignment, (paramJobj.optString(Constants.isConsignment, null) != null) ? Boolean.parseBoolean(paramJobj.getString(Constants.isConsignment)) : false);
        requestParams.put("custWarehouse", (paramJobj.optString("custWarehouse", null) == null) ? "" : paramJobj.getString("custWarehouse"));
        requestParams.put(Constants.productid, (paramJobj.optString(Constants.productid, null) == null) ? "" : paramJobj.getString(Constants.productid));
        requestParams.put(Constants.productCategoryid, (paramJobj.optString(Constants.productCategoryid, null) == null) ? "" : paramJobj.getString(Constants.productCategoryid));
        requestParams.put(InvoiceConstants.customerCategoryid, paramJobj.optString(InvoiceConstants.customerCategoryid, null));
        requestParams.put(Constants.CHART_TYPE, paramJobj.optString(Constants.CHART_TYPE, ""));   //chart type added to request param map
        requestParams.put("isUnprintedDeliveryOrder", paramJobj.optString("isUnprintedDeliveryOrder", null));   //reporrt id added to request param map
        requestParams.put(Constants.generatedSource, (!StringUtil.isNullOrEmpty(paramJobj.optString(Constants.generatedSource,null))) ? Integer.parseInt(paramJobj.optString(Constants.generatedSource,Constants.RECORD_WEB_Application)) :null);        
        return requestParams;
    }  
 
    @Override
    public JSONArray getSalesReturnDetailsJson(JSONObject paramJobj, List<Object[]> list,DateFormat df) throws ServiceException {
        
        JSONArray jarr=new JSONArray();
        try {
            
            KwlReturnObject cap = accountingHandlerDAOobj.getObject(CompanyAccountPreferences.class.getName(), paramJobj.getString(Constants.companyKey));
            CompanyAccountPreferences preferences = (CompanyAccountPreferences) cap.getEntityList().get(0);

            String companyid = paramJobj.getString(Constants.companyKey);
            KwlReturnObject extraprefresult = accountingHandlerDAOobj.getObject(ExtraCompanyPreferences.class.getName(), companyid);
            ExtraCompanyPreferences extraCompanyPreferences = extraprefresult != null ? (ExtraCompanyPreferences) extraprefresult.getEntityList().get(0) : null;
            SimpleDateFormat df1 = new SimpleDateFormat("yyyy-mm-dd");
            HashMap<String, Object> fieldrequestParams = new HashMap();
            fieldrequestParams.put(Constants.filter_names, Arrays.asList(Constants.companyid, Constants.moduleid));
            fieldrequestParams.put(Constants.filter_values, Arrays.asList(companyid, Constants.Acc_ConsignmentRequest_ModuleId));
            HashMap<String, String> replaceFieldMap1 = new HashMap<String, String>();
            HashMap<String, String> customFieldMap = new HashMap<String, String>();
            HashMap<String, String> customDateFieldMap = new HashMap<String, String>();
            
            Map<String, Object[]> batchSerMap = accInvoiceServiceDAO.getBatchSerialDetailsForReturnReport(list, companyid);
            
            for (Object[] oj : list) {

                JSONObject datObj = new JSONObject();
                String orderid = oj[0].toString();

                  KwlReturnObject objItr = accInvoiceDAOobj.getSalesReturnDetails(orderid);
//                KwlReturnObject objItr = accountingHandlerDAOobj.getObject(SalesReturn.class.getName(), orderid);
                List<SalesReturnDetail> salesReturnList =  objItr.getEntityList();
                if (salesReturnList != null) {
                    
                    String purposeOfLoan = "";
                    for (SalesReturnDetail srd : salesReturnList) {
                        SalesReturn salesReturn=srd.getSalesReturn();
                        Product product = srd.getProduct();
                        boolean isBatchForProduct = product.isIsBatchForProduct();
                        boolean isSerialForProduct = product.isIsSerialForProduct();
                        boolean isLocationForProduct = product.isIslocationforproduct();
                        boolean isWarehouseForProduct = product.isIswarehouseforproduct();
                        boolean isRowForProduct = product.isIsrowforproduct();
                        boolean isRackForProduct = product.isIsrackforproduct();
                        boolean isBinForProduct = product.isIsbinforproduct();
                         Object[] batchSerObj=null;
                         
                        JSONObject obj = new JSONObject();
                        
                        obj.put("documentReferenceNo", salesReturn.getSalesReturnNumber());
                        obj.put("dateOfReturn", df.format(salesReturn.getOrderDate()));
                        obj.put("consigneeName", salesReturn.getCustomer() != null ? salesReturn.getCustomer().getName() : "");
                        obj.put("productID", srd.getProduct() != null ? srd.getProduct().getProductid() : "");
                        obj.put("productName", srd.getProduct() != null ? srd.getProduct().getName() : "");
                        obj.put("description", srd.getProduct() != null ? srd.getProduct().getDescription() : "");
                        obj.put("quantity", srd.getBaseuomquantity());
                        
                        ItemReusability itemReusability = product.getItemReusability();
                        
                        obj.put("stockType", itemReusability != null ? itemReusability.toString() : "");
                        obj.put("reusable", itemReusability == ItemReusability.REUSABLE ? "R" : (itemReusability == ItemReusability.DISPOSABLE ? "C" : "C"));
                        
//                        obj.put("reusable", product.getItemReusability());
                        
                        KwlReturnObject batchSerialObj = null;
                        if (preferences.isIsBatchCompulsory() || preferences.isIsSerialCompulsory() || preferences.isIslocationcompulsory() || preferences.isIswarehousecompulsory() || preferences.isIsrowcompulsory() || preferences.isIsrackcompulsory() || preferences.isIsbincompulsory()) { // check if company level option is on then only we will check productt level
                            if (isBatchForProduct || isSerialForProduct || isSerialForProduct || isLocationForProduct || isWarehouseForProduct || isRowForProduct || isRackForProduct || isBinForProduct) {  // product level batch and serial no on or not
//                            batchSerialObj = accInvoiceServiceDAO.getNewBatchSerialForConsignmentLoan(doDetail.getProduct(), request, doDetail.getID());
                                batchSerObj = batchSerMap.get(srd.getID());
                            }
                        }
                        if (batchSerObj != null && batchSerObj.length > 0) {
                            obj.put("batch", batchSerObj[0] != null ? batchSerObj[0] : "-");
                            obj.put("serialNo", batchSerObj[1] != null ? batchSerObj[1] : "-");
                            obj.put("itemasset", batchSerObj[2] != null ? batchSerObj[2] : "-");
                        }
                        
                        if (srd.getDodetails() != null) {
                            DeliveryOrderDetail doDtl = srd.getDodetails();
                            SalesOrderDetail soDtl = doDtl.getSodetails();
                            DeliveryOrder dor=doDtl.getDeliveryOrder();
                            
                            String salesperson = soDtl.getSalesOrder() != null ? (soDtl.getSalesOrder().getSalesperson() != null ? soDtl.getSalesOrder().getSalesperson().getValue() : "") : "";

                             obj.put("dndate",  df.format(doDtl.getDeliveryOrder().getOrderDate()));
                           
//                            obj.put("contactperson", soDtl!=null?soDtl.getSalesOrder().getContract():"");
                            obj.put("dnremarkormemo",dor!=null?dor.getMemo():"");
                            obj.put("remarkormemo",salesReturn.getMemo());
                            obj.put("remark",srd.getRemark());
                            obj.put("dnremark",doDtl.getRemark());
                            obj.put("sequence","Line " +doDtl.getSrno());
                            obj.put("dnnumber",dor!=null?dor.getDeliveryOrderNumber():"");
                            obj.put("returnqty",doDtl!=null?doDtl.getBaseuomquantity():"");
                            obj.put("salesperson",salesperson);
                            obj.put("costcenter",salesReturn.getCostcenter() == null ? "" : salesReturn.getCostcenter().getName());
                          
                            obj.put("contactperson", (dor.getBillingShippingAddresses() != null ? dor.getBillingShippingAddresses().getShippingContactPerson() : ""));
                            HashMap<String, Object> addressParams = new HashMap<String, Object>();
                            addressParams.put(Constants.companyKey, companyid);
                            addressParams.put("isDefaultAddress", true);    //always true to get defaultaddress
                            addressParams.put("isBillingAddress", true);    //true to get billing address
                            addressParams.put(Constants.customerid, dor.getCustomer().getID());
                            CustomerAddressDetails customerAddressDetails = accountingHandlerDAOobj.getCustomerAddressobj(addressParams);
                            obj.put("country", customerAddressDetails!=null?customerAddressDetails.getCountry():"");
                            
                            if (soDtl != null) {
                                obj.put("srcwarehouse", soDtl != null ? soDtl.getSalesOrder().getRequestWarehouse().getName() : "");
                                obj.put("srclocation", soDtl != null ? soDtl.getSalesOrder().getRequestLocation().getName() : "");
                                obj.put("loanfrmdate", (soDtl != null && soDtl.getSalesOrder().getFromdate() != null) ? df.format(soDtl.getSalesOrder().getFromdate()) : "");
                                obj.put("loanDueDate", (soDtl != null && soDtl.getSalesOrder().getTodate() != null) ? df.format(soDtl.getSalesOrder().getTodate()) : "");
                                
                                HashMap<String, Integer> fieldMap = accAccountDAOobj.getFieldParamsCustomMap(fieldrequestParams, replaceFieldMap1, customFieldMap, customDateFieldMap);
                                Map<String, Object> variableMap = new HashMap<String, Object>();
                                SalesOrderCustomData soCustomData = (SalesOrderCustomData) soDtl.getSalesOrder().getSoCustomData();
                            HashMap<String, String> replaceFieldMap = new HashMap<String, String>();
                            AccountingManager.setCustomColumnValues(soCustomData, fieldMap, replaceFieldMap, variableMap);
                            for (Map.Entry<String, Object> varEntry : variableMap.entrySet()) {
                                String coldata = varEntry.getValue().toString();
                                if (customFieldMap.containsKey(varEntry.getKey())) {
                                    if (varEntry.getKey().equalsIgnoreCase("Custom_Purpose of Request")) {
                                        String Ids[] = coldata.split(",");
                                        for (int i = 0; i < Ids.length; i++) {
                                            KwlReturnObject rdresult = accountingHandlerDAOobj.getObject(FieldComboData.class.getName(), Ids[i]);
                                            FieldComboData fieldComboData = (FieldComboData) rdresult.getEntityList().get(0);
                                            if (fieldComboData != null) {
                                                purposeOfLoan = fieldComboData.getValue() != null ? fieldComboData.getValue() + "," : ",";
                                                break;
                                            }
                                        }
                                        if (!StringUtil.isNullOrEmpty(purposeOfLoan)) {
                                            purposeOfLoan = purposeOfLoan.substring(0, purposeOfLoan.length() - 1);
                                        }
                                    }
                                }

                            }
                            }
                        }
                        obj.put("purposeOfLoan", purposeOfLoan);
                        
                        jarr.put(obj);
                    }
                }

            }
        } catch (Exception ex) {
              throw ServiceException.FAILURE("getDeliveryOrdersJsonMerged : " + ex.getMessage(), ex);
        }finally{
            return jarr;
        }
        
    }
   @Override
    public JSONArray getSalesReturnJson(JSONObject paramJobj, List<Object[]> list) throws ServiceException {
        JSONArray jArr = new JSONArray();
        try {
            HashMap<String, Object> requestParams = AccountingManager.getGlobalParamsJson(paramJobj);
            double quantity = 0;
            double amount = 0, amountwithouttax = 0;
            String companyid = paramJobj.getString(Constants.companyKey);
            boolean isConsignment = (!StringUtil.isNullOrEmpty(paramJobj.optString(Constants.isConsignment,null))) ? Boolean.parseBoolean(paramJobj.optString(Constants.isConsignment)) : false;
            boolean isFixedAsset = (!StringUtil.isNullOrEmpty(paramJobj.optString(Constants.isFixedAsset))) ? Boolean.parseBoolean(paramJobj.optString(Constants.isFixedAsset)) : false;
            boolean isLeaseFixedAsset = (!StringUtil.isNullOrEmpty(paramJobj.optString(Constants.isLeaseFixedAsset))) ? Boolean.parseBoolean(paramJobj.optString(Constants.isLeaseFixedAsset)) : false;
            boolean getlineItemDetailsflag= (paramJobj.optString(Constants.getlineItemDetailsflag,null)!=null)?Boolean.FALSE.parseBoolean((String)paramJobj.get(Constants.getlineItemDetailsflag)):false;
            KwlReturnObject extraprefresult = accountingHandlerDAOobj.getObject(ExtraCompanyPreferences.class.getName(), companyid);
            ExtraCompanyPreferences extraCompanyPreferences = extraprefresult != null ? (ExtraCompanyPreferences) extraprefresult.getEntityList().get(0) : null;
            boolean isLineLevelTermFlag = false;//To Check Whether LinelevelTerms are applicable or not.
            if(extraCompanyPreferences != null && extraCompanyPreferences.getLineLevelTermFlag() == 1){
                isLineLevelTermFlag = true;//If LineLevelTerms are applicable, then update the flag.
            }
            int countryid = 0;
            if(extraCompanyPreferences != null && extraCompanyPreferences.getCompany().getCountry() != null){
                countryid = Integer.parseInt(extraCompanyPreferences.getCompany().getCountry().getID());
            }
            HashMap<String, String> replaceFieldMap = new HashMap<String, String>();
            HashMap<String, String> customFieldMap = new HashMap<String, String>();
            HashMap<String, String> customDateFieldMap = new HashMap<String, String>();
            HashMap<String, Integer> FieldMap = null;
            HashMap<String, Object> fieldrequestParams = new HashMap();
            DateFormat userDateFormat=null;
            if(paramJobj.has(Constants.userdateformat) && paramJobj.get(Constants.userdateformat)!= null){
                userDateFormat=new SimpleDateFormat((String)paramJobj.get(Constants.userdateformat));
            }
            fieldrequestParams.put(Constants.filter_names, Arrays.asList(Constants.companyid, Constants.moduleid));
            fieldrequestParams.put(Constants.filter_values, Arrays.asList(companyid, isConsignment ? Constants.Acc_ConsignmentSalesReturn_ModuleId : isFixedAsset ? Constants.Acc_FixedAssets_Sales_Return_ModuleId : isLeaseFixedAsset ? Constants.Acc_Lease_Return : Constants.Acc_Sales_Return_ModuleId));
            FieldMap = accAccountDAOobj.getFieldParamsCustomMap(fieldrequestParams, replaceFieldMap, customFieldMap, customDateFieldMap);
            //params to send to get billing address
            HashMap<String, Object> addressParams = new HashMap<String, Object>();
            addressParams.put(Constants.companyKey, companyid);
            addressParams.put("isDefaultAddress", true); //always true to get defaultaddress
            addressParams.put("isBillingAddress", true); //true to get billing address
             for(Object[] oj:list){
                String orderid = oj[0].toString();

                KwlReturnObject objItr = accountingHandlerDAOobj.getObject(SalesReturn.class.getName(), orderid);
                SalesReturn salesReturn = (SalesReturn) objItr.getEntityList().get(0);
                CreditNote creditNote = null;
                if (salesReturn.isIsNoteAlso()) {
                    KwlReturnObject creditnoteresult = accCreditNoteDAOobj.getCreditNoteIdFromSRId(salesReturn.getID(), companyid);
                    if (!creditnoteresult.getEntityList().isEmpty()) {
                        creditNote = (CreditNote) creditnoteresult.getEntityList().get(0);
                    }
                }
                /*
                 * getting payment Object
                 */ 
                Payment payment = null;
                if (salesReturn.isIsPayment()) {
                    KwlReturnObject paymentResult = accVendorPaymentobj.getPaymentIdFromSRId(salesReturn.getID(), companyid);
                    if (!paymentResult.getEntityList().isEmpty()) {
                        payment = (Payment) paymentResult.getEntityList().get(0);
                    }
                }
                Customer customer = salesReturn.getCustomer();
                JSONObject obj = new JSONObject();
                //*** Attachments Documents SJ[ERP-16331] 
                HashMap<String, Object> hashMap = new HashMap<String, Object>();
                hashMap.put("invoiceID", salesReturn.getID());
                hashMap.put(Constants.companyKey, salesReturn.getCompany().getCompanyID());
                KwlReturnObject object = accInvoiceDAOobj.getinvoiceDocuments(hashMap);
                int attachemntcount = object.getRecordTotalCount();
                obj.put("attachment", attachemntcount);
                
                 //get LineItem Details for Rest Service
                 if (getlineItemDetailsflag) {
                     JSONArray DataRowsArr = new JSONArray();
                     JSONObject jobj = new JSONObject();
                     paramJobj.put(Constants.billid,  salesReturn.getID());
                     jobj = getSalesReturnRows(paramJobj);
                     DataRowsArr = jobj.getJSONArray(Constants.RES_data);
                     obj.put(Constants.lineItemDetails, DataRowsArr);
                 }
                 /**
                  * Put GST document history.
                  */
                 if (salesReturn.getCompany().getCountry().getID().equalsIgnoreCase("" + Constants.indian_country_id)) {
                     obj.put("refdocid", salesReturn.getID());
                     fieldDataManagercntrl.getGSTDocumentHistory(obj);

                 }

                //*** Attachments Documents SJ[ERP-16331] 
                obj.put(Constants.billid, salesReturn.getID());
                obj.put(Constants.companyKey, salesReturn.getCompany().getCompanyID());
                obj.put("companyname", salesReturn.getCompany().getCompanyName());
                obj.put("withoutinventory", false);
                obj.put("externalcurrencyrate", salesReturn.getExternalCurrencyRate());
                obj.put(Constants.HAS_ACCESS, customer.isActivate());
                obj.put("aliasname", customer.getAliasname());
                obj.put("personemail", customer.getEmail());
                addressParams.put("customerid", customer.getID());
                CustomerAddressDetails customerAddressDetails = accountingHandlerDAOobj.getCustomerAddressobj(addressParams);
                String customerEmailId = customerAddressDetails != null ? customerAddressDetails.getEmailID() : "";
                obj.put("billingEmail", customerEmailId);
//                 MasterItem gstRegistrationType = customer != null ? customer.getGSTRegistrationType() : null;
//                 if (gstRegistrationType != null && gstRegistrationType.getDefaultMasterItem() != null) {
//                     obj.put("GSTINRegTypeDefaultMstrID", gstRegistrationType.getDefaultMasterItem().getID());
//                 }
                obj.put(Constants.memo, salesReturn.getMemo());
                obj.put(Constants.posttext, salesReturn.getPostText() == null ? "" : salesReturn.getPostText());
                obj.put("deleted", salesReturn.isDeleted());
                obj.put("isdeletable", salesReturn.isIsdeletable());
                obj.put(Constants.shipdate, salesReturn.getShipdate() == null ? "" : authHandler.getDateOnlyFormat().format(salesReturn.getShipdate()));
                obj.put(Constants.shipvia, salesReturn.getShipvia() == null ? "" : salesReturn.getShipvia());
                obj.put(Constants.fob, salesReturn.getFob() == null ? "" : salesReturn.getFob());
                obj.put("isfavourite", salesReturn.isFavourite());
                obj.put("isprinted", salesReturn.isPrinted());
                obj.put("currencysymbol", (salesReturn.getCurrency() == null ? "" : salesReturn.getCurrency().getSymbol()));
                obj.put("currencycode", (salesReturn.getCurrency() == null ? "" : salesReturn.getCurrency().getCurrencyCode()));
                obj.put(Constants.isConsignment, salesReturn.isIsconsignment());
                obj.put("isNoteAlso", salesReturn.isIsNoteAlso());
                obj.put("isapplytaxtoterms", salesReturn.isApplyTaxToTerms());
                obj.put("gstIncluded", salesReturn.isGstIncluded());
                obj.put(Constants.currencyKey, (salesReturn.getCurrency() == null ? "" : salesReturn.getCurrency().getCurrencyID()));
                obj.put("taxid", salesReturn.getTax() != null ? salesReturn.getTax().getID() : "");
                obj.put("salesPerson", salesReturn.getSalesperson() == null ? "" : salesReturn.getSalesperson().getID());
                obj.put("salespersonname", salesReturn.getSalesperson() == null ? "" : salesReturn.getSalesperson().getValue());
                obj.put("gtaapplicable", salesReturn.isRcmapplicable()); // Get RCM applicable Check - Used for INDIA only - ERP-34970(ERM-534)                                
                obj.put("ewayapplicable", salesReturn.isEwayapplicable()); // Get EWAY applicable Check - Used for INDIA only
                obj.put(Constants.generatedSource, salesReturn.getGeneratedSource());
                if (extraCompanyPreferences != null && extraCompanyPreferences.isAvalaraIntegration()) {
                    obj.put("isTaxCommittedOnAvalara", salesReturn.isIsTaxCommittedOnAvalara());
                }
                 if (paramJobj.optBoolean(Constants.isdefaultHeaderMap, false) == true) {
                     obj.put("costcenter", salesReturn.getCostcenter() == null ? "" : salesReturn.getCostcenter().getID());
                     obj.put("costcenterValue", salesReturn.getCostcenter() == null ? "" : salesReturn.getCostcenter().getName());
                     obj.put("number", salesReturn.getSalesReturnNumber());
                     obj.put(Constants.taxidValue, salesReturn.getTax() != null ? salesReturn.getTax().getName() : "");
                     obj.put(Constants.sequenceformat, salesReturn.getSeqformat() != null ? salesReturn.getSeqformat().getID() : "NA");
                     
                     KwlReturnObject seqObj = null;
                     SequenceFormat seqFormat = null;
                     if (salesReturn.getSeqformat() != null) {
                         seqObj = accountingHandlerDAOobj.getObject(SequenceFormat.class.getName(), salesReturn.getSeqformat().getID());
                         seqFormat = (SequenceFormat) seqObj.getEntityList().get(0);
                         if (seqFormat != null) {
                             String formatName = seqFormat.getName();
                             if (seqFormat.isDateBeforePrefix() && seqFormat.isShowDateFormatAfterSuffix()) {
                                 formatName = seqFormat.getDateformatinprefix() + seqFormat.getName() + seqFormat.getDateFormatAfterSuffix();
                             } else if (seqFormat.isDateBeforePrefix()) {
                                 formatName = seqFormat.getDateformatinprefix() + seqFormat.getName();
                             } else if (seqFormat.isShowDateFormatAfterSuffix()) {
                                 formatName = seqFormat.getName() + seqFormat.getDateFormatAfterSuffix();
                             }
                             obj.put(Constants.sequenceformatValue, salesReturn.getSeqformat() == null ? "NA" : formatName);
                         } else {
                             obj.put(Constants.sequenceformatValue, salesReturn.getSeqformat() != null ? salesReturn.getSeqformat().getName() : "NA");
                         }
                     } else {
                         obj.put(Constants.sequenceformatValue, "NA");
                     }
                     
                     obj.put(Constants.currencyKey+"Value", (salesReturn.getCurrency() == null ? "" : salesReturn.getCurrency().getName()));
                     obj.put("customer", customer.getID());
                     obj.put("customerValue", customer.getName());
                     obj.put("billdate", authHandler.getDateOnlyFormat().format(salesReturn.getOrderDate()));
                     obj.put("AssignSRNumberntocn", salesReturn.isIsAssignSRNumberntocn());
                     obj.put("cndnsequenceformat", creditNote != null ? (creditNote.getSeqformat() != null ? creditNote.getSeqformat().getID() : "NA") : "NA");
                     
                     if (creditNote!=null && creditNote.getSeqformat() != null) {
                         //Credit Note Sequence Format Value
                         seqObj = accountingHandlerDAOobj.getObject(SequenceFormat.class.getName(), creditNote.getSeqformat().getID());
                         seqFormat = (SequenceFormat) seqObj.getEntityList().get(0);
                         if (seqFormat != null) {
                             String formatName = seqFormat.getName();
                             if (seqFormat.isDateBeforePrefix() && seqFormat.isShowDateFormatAfterSuffix()) {
                                 formatName = seqFormat.getDateformatinprefix() + seqFormat.getName() + seqFormat.getDateFormatAfterSuffix();
                             } else if (seqFormat.isDateBeforePrefix()) {
                                 formatName = seqFormat.getDateformatinprefix() + seqFormat.getName();
                             } else if (seqFormat.isShowDateFormatAfterSuffix()) {
                                 formatName = seqFormat.getName() + seqFormat.getDateFormatAfterSuffix();
                             }
                             obj.put("cndnsequenceformatValue", creditNote != null ? (creditNote.getSeqformat() != null ? formatName : "NA") : "NA");
                         } else {
                             obj.put("cndnsequenceformatValue", creditNote != null ? (creditNote.getSeqformat() != null ? creditNote.getSeqformat().getName() : "NA") : "NA");
                         }
                     } else {
                         obj.put("cndnsequenceformatValue", "NA");
                     }
                     
                     obj.put("cndnnumber", creditNote != null ? creditNote.getCreditNoteNumber() : "");
                     obj.put("salesPersonValue", salesReturn.getSalesperson() == null ? "" : salesReturn.getSalesperson().getValue());
                     /*
                      * 
                      * isPayment is true while payment is creating from sales return
                      */ 
                     obj.put("paymentNumber", payment != null ? payment.getPaymentNumber() : "");
                     obj.put("isSaleReturnWithPay", salesReturn.isIsPayment());
                     obj.put("paymentmethod", payment != null ?(payment.getPayDetail() == null ? "" : payment.getPayDetail().getPaymentMethod().getMethodName()):"");
                     obj.put("paymentaccount", payment != null ?(payment.getPayDetail() == null ? "" : payment.getPayDetail().getPaymentMethod().getAccount().getName()):"");
                     obj.put("methodid", payment != null ?(payment.getPayDetail() == null ? "" : payment.getPayDetail().getPaymentMethod().getID()):"");
                     obj.put("paymentSequenceformatId", payment != null ? (payment.getSeqformat() != null ? payment.getSeqformat().getID() : "") : "");
                 } else {
                     obj.put("costcenterid", salesReturn.getCostcenter() == null ? "" : salesReturn.getCostcenter().getID());
                     obj.put("costcenterName", salesReturn.getCostcenter() == null ? "" : salesReturn.getCostcenter().getName());
                     obj.put("billno", salesReturn.getSalesReturnNumber());
                     obj.put("personid", customer.getID());
                     obj.put("personname", customer.getName());
                     obj.put("sequenceformatid", salesReturn.getSeqformat() != null ? salesReturn.getSeqformat().getID() : "");
                     obj.put("date", authHandler.getDateOnlyFormat().format(salesReturn.getOrderDate()));
                     obj.put("isAssignSRNumberntocn", salesReturn.isIsAssignSRNumberntocn());
                     obj.put("cndnsequenceformatid", creditNote != null ? (creditNote.getSeqformat() != null ? creditNote.getSeqformat().getID() : "") : "");
                     obj.put("cndnnumber", creditNote != null ? creditNote.getCreditNoteNumber() : "");
                     /*
                      * isPayment is true while payment is creating from sales return
                      */
                     obj.put("paymentNumber", payment != null ? payment.getPaymentNumber() : "");
                     obj.put("paymentmethod", payment != null ?(payment.getPayDetail() == null ? "" : payment.getPayDetail().getPaymentMethod().getMethodName()):"");
                     obj.put("paymentaccount", payment != null ?(payment.getPayDetail() == null ? "" : payment.getPayDetail().getPaymentMethod().getAccount().getName()):"");
                     obj.put("methodid", payment != null ?(payment.getPayDetail() == null ? "" : payment.getPayDetail().getPaymentMethod().getID()):"");
                     obj.put("isSaleReturnWithPay", salesReturn.isIsPayment());
                     obj.put("paymentSequenceformatId", payment != null ? (payment.getSeqformat() != null ? payment.getSeqformat().getID() : "") : "");
                     obj.put("salesPersonCode", salesReturn.getSalesperson() == null ? "" : salesReturn.getSalesperson().getCode());
                     obj.put("mapSalesPersonName", salesReturn.getSalesperson() == null ? "" : salesReturn.getSalesperson().getValue());
                 }
                 if(countryid == Constants.indian_country_id){
                    obj.put("formtypeid", salesReturn.getFormtype());
                    obj.put("isInterstateParty", salesReturn.getCustomer()!= null ? salesReturn.getCustomer().isInterstateparty():false);
                    obj.put(Constants.MVATTRANSACTIONNO,salesReturn.getMvatTransactionNo()!=null?salesReturn.getMvatTransactionNo():"");
                 }
                obj.put("discountamountinbase", salesReturn.getDiscountinbase());
                obj.put("entryno", (creditNote != null && creditNote.getJournalEntry() != null) ? creditNote.getJournalEntry().getEntryNumber() : "");
                /*
                 * isPayment is true while payment is creating from sales return
                 */
                 if (salesReturn.isIsPayment()) {
                     obj.put("entryno", (payment != null && payment.getJournalEntry() != null) ? payment.getJournalEntry().getEntryNumber() : "");
                 }
                obj.put("journalentryid", (creditNote != null && creditNote.getJournalEntry() != null) ? creditNote.getJournalEntry().getID() : "");
                if (salesReturn.getCustWarehouse() != null) {
                    obj.put("custWarehouse", salesReturn.getCustWarehouse().getId());
                }
                if (salesReturn.getModifiedby() != null) {
                    obj.put("lasteditedby", StringUtil.getFullName(salesReturn.getModifiedby()));
                }
                if (salesReturn.isIsconsignment()) {
                    obj.put("movementtype", salesReturn.getMovementType() != null ? salesReturn.getMovementType().getID() : "");
                    obj.put("movementtypename", salesReturn.getMovementType() != null ? salesReturn.getMovementType().getValue() : "");
                    for (SalesReturnDetail srd:salesReturn.getRows()){
                        if (!StringUtil.isNullOrEmpty(srd.getDodetails() != null ? srd.getDodetails().getSodetails() != null ? srd.getDodetails().getSodetails().getSalesOrder().getSalesperson() !=null?srd.getDodetails().getSodetails().getSalesOrder().getSalesperson().getValue():"" : "" : "")) {
                             obj.put("mapSalesPersonName",srd.getDodetails().getSodetails().getSalesOrder().getSalesperson().getValue());
                             break;
                        }
                    }
                }
                double totalTermAmount = 0;
                double totalTermTaxAmount = 0;
                List salesReturnTermMapList = kwlCommonTablesDAOObj.getSummationOfTermAmtAndTermTaxAmt(Constants.salesreturntermsmap, salesReturn.getID());
                if(salesReturnTermMapList != null && !salesReturnTermMapList.isEmpty()){
                    Iterator termItr = salesReturnTermMapList.iterator();
                    while (termItr.hasNext()) {
                        Object[] termObj = (Object[]) termItr.next();
                        /* 
                        * [0] : Sum of termamount  
                        * [1] : Sum of termamountinbase 
                        * [2] : Sum of termTaxamount 
                        * [3] : Sum of termTaxamountinbase 
                        * [4] : Sum of termAmountExcludingTax 
                        * [5] : Sum of termAmountExcludingTaxInBase
                        */ 
                        if (salesReturn.isGstIncluded()) {
                            if (termObj[4] != null) {
                                totalTermAmount += authHandler.round((Double) termObj[4], companyid);
                            }
                        } else {
                            if (termObj[0] != null) {
                                totalTermAmount += authHandler.round((Double) termObj[0], companyid);
                            }
                        }
                        if (termObj[2] != null) {
                            totalTermTaxAmount += authHandler.round((Double) termObj[2], companyid);
                        }
                    }
                }
                totalTermAmount = authHandler.round(totalTermAmount, companyid);
                totalTermTaxAmount = authHandler.round(totalTermTaxAmount, companyid);
                
                 JournalEntry inventoryJE = salesReturn.getInventoryJE();
                 obj.put("inventoryjeid", (inventoryJE != null ? inventoryJE.getID() : ""));
                 obj.put("inventoryentryno", (inventoryJE != null ? inventoryJE.getEntryNumber() : ""));
                Set<SalesReturnDetail> doRows = salesReturn.getRows();
                amount = 0;
                amountwithouttax = 0;
                double ordertaxamount = 0, rowOtherTermNonTaxableAmount = 0d;
                boolean includeprotax = false;
                double subtotal = 0d;
                double productTotalAmount = 0d;
                double totalDiscount = 0d;
                if (doRows != null && !doRows.isEmpty()) {
                    for (SalesReturnDetail temp : doRows) {
                        quantity = temp.getInventory().getQuantity();
                        double rowAmt = 0;
                        if(salesReturn.isGstIncluded()){
                            rowAmt = temp.getRateincludegst() * quantity;
                        }else{
                            rowAmt = temp.getRate() * quantity;
                        }
                        productTotalAmount += authHandler.round(rowAmt, companyid); 
                 
                        /* If SR is linking with Partial Invoice 
                         then Amount is calculated as per partial formula
                         */
                        Invoice invoice = temp.getCidetails() != null ? temp.getCidetails().getInvoice() : null;
                        if (invoice != null && invoice.isPartialinv()) {
                            double partamount = temp.getCidetails().getPartamount();
                            rowAmt = rowAmt * (partamount / 100);
                        }
       
                        double disc = 0;

                        if (temp.getDiscountispercent() == 1) {
                            disc = authHandler.round(rowAmt * temp.getDiscount() / 100,companyid);
                        } else {
                            disc = temp.getDiscount();
                        }
                        totalDiscount+=disc;
                        rowAmt = authHandler.round((rowAmt - disc), companyid);
                        if(salesReturn.isGstIncluded()){
                            amountwithouttax+= temp.getRate() * quantity;
                        }else{
                            amountwithouttax+=rowAmt;
                        }
                        // getting tax also
                        double taxAmt = temp.getRowTaxAmount();
                        if(isLineLevelTermFlag){
                            taxAmt = temp.getRowtermamount();
                            // Append OtherTermNonTaxableAmount for rach row.
                            rowOtherTermNonTaxableAmount += temp.getOtherTermNonTaxableAmount();
                        }
                        ordertaxamount += taxAmt; // line level tax
                        if(!salesReturn.isGstIncluded()){
                            rowAmt+=taxAmt;
                            amount+=rowAmt;
                        }else{
                            amount+=rowAmt;
                        }
                        if (temp.getTax() != null) {
                            includeprotax = true;
                        }
                    }
                }
                if(salesReturn.isGstIncluded()){
                    subtotal= authHandler.round(productTotalAmount-totalDiscount-ordertaxamount, companyid);
                }else{
                    subtotal= authHandler.round(productTotalAmount-totalDiscount, companyid);
                }
                obj.put("productTotalAmount", productTotalAmount);
                obj.put("termdetails", getSalesReturnTermDetails(salesReturn.getID()));
                obj.put("termamount", totalTermAmount);
                obj.put("amountBeforeTax", subtotal + totalTermAmount);                 //Sales Return
                obj.put("subtotal", subtotal);
                if (salesReturn.getTax() != null) {
                    double taxPercent = 0;
                    KwlReturnObject taxresult = accTaxObj.getTaxPercent(companyid, salesReturn.getOrderDate(), salesReturn.getTax().getID());
                    taxPercent = (Double) taxresult.getEntityList().get(0);
                    ordertaxamount = (taxPercent == 0 ? 0 : authHandler.round((amount * taxPercent / 100), companyid));
                    amount += ordertaxamount;
                }
                 if (paramJobj.optBoolean(Constants.isdefaultHeaderMap, false) == true) {
                     obj.put("taxamount", ordertaxamount + totalTermTaxAmount);
                 } else {
                     obj.put("totaltaxamount", ordertaxamount + totalTermTaxAmount);
                 }
                 if(isLineLevelTermFlag){
                     // If LineLevelTerm is applicable then add the value in JSON Object.
                     obj.put("OtherTermNonTaxableAmount", rowOtherTermNonTaxableAmount);
                 }
                 if (paramJobj.optBoolean(Constants.isdefaultHeaderMap, false) == true) {
                     obj.put("includeprotax", includeprotax == true ? "true" : "false");
                     obj.put("includeprotaxValue", includeprotax == true ? "Yes" : "No");
                 } else {
                     obj.put("includeprotax", includeprotax);
                 }
                obj.put("amountwithouttax", authHandler.round(amountwithouttax, companyid));
                obj.put("amount", authHandler.round(amount + totalTermAmount + totalTermTaxAmount, companyid));
                
                if (salesReturn.getCurrency() != null) {
                    KwlReturnObject bAmt = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, amount + totalTermAmount + totalTermTaxAmount , salesReturn.getCurrency().getCurrencyID(), salesReturn.getOrderDate(), salesReturn.getExternalCurrencyRate());
                    obj.put("amountinbase", authHandler.round((Double) bAmt.getEntityList().get(0), companyid));
                }
                 //ERP-41214:Show asterisk to unit price and amount 
                 //Handled for mobile Apps  
                 if (paramJobj.optBoolean(Constants.isdefaultHeaderMap) && paramJobj.has("displayUnitPriceAndAmountInSalesDocument") && !paramJobj.optBoolean("displayUnitPriceAndAmountInSalesDocument")) {
                     obj.put("amountinbase", CustomDesignerConstants.UNIT_PRICE_AND_AMOUNT_AS_STARS);
                     obj.put("amount", CustomDesignerConstants.UNIT_PRICE_AND_AMOUNT_AS_STARS);
                     obj.put("amountwithouttax", CustomDesignerConstants.UNIT_PRICE_AND_AMOUNT_AS_STARS);
                     obj.put("amountBeforeTax", CustomDesignerConstants.UNIT_PRICE_AND_AMOUNT_AS_STARS);                 //Sales Return
                     obj.put("subtotal", CustomDesignerConstants.UNIT_PRICE_AND_AMOUNT_AS_STARS);
                 }
                 
                Map<String, Object> variableMap = new HashMap<String, Object>();
                SalesReturnCustomData salesReturnCustomData = (SalesReturnCustomData) salesReturn.getSalesReturnCustomData();
                AccountingManager.setCustomColumnValues(salesReturnCustomData, FieldMap, replaceFieldMap, variableMap);

                if (salesReturnCustomData != null) {
                    boolean isExport = (paramJobj.optString(Constants.isExport,null) == null) ? false : true;
                    JSONObject params = new JSONObject();
                    params.put(Constants.isExport, isExport);
                    params.put(Constants.userdf,userDateFormat);
                    params.put(Constants.isdefaultHeaderMap,paramJobj.optBoolean(Constants.isdefaultHeaderMap, false));
                    if (!StringUtil.isNullOrEmpty(paramJobj.optString(Constants.browsertz,null))) {
                        params.put(Constants.browsertz, paramJobj.getString(Constants.browsertz));
                    }
                    fieldDataManagercntrl.addCustomData(variableMap, customFieldMap, customDateFieldMap, obj, params);
                }
                jArr.put(obj);
            }
        } catch (Exception ex) {
            throw ServiceException.FAILURE("getDeliveryOrdersJsonMerged : " + ex.getMessage(), ex);
        }
        return jArr;
    }
 
  @Override
    public JSONObject getSalesReturnRows(JSONObject paramJobj) throws SessionExpiredException, ServiceException, UnsupportedEncodingException {
        JSONObject jobj = new JSONObject();
        try {
            HashMap<String, Object> requestParams = new HashMap<String, Object>();
            requestParams.put(Constants.companyKey, paramJobj.getString(Constants.companyKey));
            requestParams.put(Constants.globalCurrencyKey, paramJobj.optString(Constants.globalCurrencyKey, null));
            boolean isLocationForProduct = false;
            boolean isWarehouseForProduct = false;
            boolean isBatchForProduct = false;
            boolean isSerialForProduct = false;
            boolean isRowForProduct = false;
            boolean isRackForProduct = false;
            boolean isBinForProduct = false;
            DateFormat userDateFormat=null;
            if(paramJobj.has(Constants.userdateformat)){            
                userDateFormat=new SimpleDateFormat(String.valueOf(paramJobj.get(Constants.userdateformat)));
            }
            String[] sos = paramJobj.optString("bills", null) == null ? null : (String[]) paramJobj.getString("bills").split(",");
            if (paramJobj.optString(Constants.billid,null) != null) {
                sos = (String[]) (paramJobj.optString(Constants.billid).toString()).split(",");
            }

            boolean isExport = (!StringUtil.isNullOrEmpty(paramJobj.optString(Constants.isExport, null))) ? Boolean.parseBoolean(paramJobj.getString(Constants.isExport)) : false;
            int i = 0;
            JSONArray jArr = new JSONArray();
            boolean isForReport = false;
            String dtype = paramJobj.optString("dtype");
            if (!StringUtil.isNullOrEmpty(dtype) && dtype.equals("report")) {
                isForReport = true;
            }
            String companyid = (String) requestParams.get(Constants.companyKey);
            String globalcurrencyid = paramJobj.optString(Constants.globalCurrencyKey, null);
            boolean isFixedAsset = (!StringUtil.isNullOrEmpty(paramJobj.optString(Constants.isFixedAsset))) ? Boolean.parseBoolean(paramJobj.getString(Constants.isFixedAsset)) : false;
            boolean isConsignment = (!StringUtil.isNullOrEmpty(paramJobj.optString(Constants.isConsignment))) ? Boolean.parseBoolean(paramJobj.getString(Constants.isConsignment)) : false;
            boolean isLeaseFixedAsset = (!StringUtil.isNullOrEmpty(paramJobj.optString(Constants.isLeaseFixedAsset))) ? Boolean.parseBoolean(paramJobj.getString(Constants.isLeaseFixedAsset)) : false;
            boolean isCopy = (!StringUtil.isNullOrEmpty(paramJobj.optString("copyInv"))) ? Boolean.parseBoolean(paramJobj.getString("copyInv")) : false;

            HashMap<String, Object> fieldrequestParams = new HashMap();
            HashMap<String, String> customFieldMap = new HashMap<String, String>();
            HashMap<String, String> customDateFieldMap = new HashMap<String, String>();
            fieldrequestParams.put(Constants.filter_names, Arrays.asList(Constants.companyid, Constants.moduleid, Constants.customcolumn));
            fieldrequestParams.put(Constants.filter_values, Arrays.asList(companyid, isConsignment ? Constants.Acc_ConsignmentSalesReturn_ModuleId : isFixedAsset ? Constants.Acc_FixedAssets_Sales_Return_ModuleId : isLeaseFixedAsset ? Constants.Acc_Lease_Return : Constants.Acc_Sales_Return_ModuleId, 1));
            HashMap<String, String> replaceFieldMap = new HashMap<String, String>();
            HashMap<String, Integer> FieldMap = accAccountDAOobj.getFieldParamsCustomMapForRows(fieldrequestParams, replaceFieldMap, customFieldMap, customDateFieldMap);

            HashMap<String, Object> doRequestParams = new HashMap<String, Object>();
            ArrayList filter_names = new ArrayList(), filter_params = new ArrayList(), order_by = new ArrayList(), order_type = new ArrayList();
            filter_names.add("salesReturn.ID");
            order_by.add("srno");
            order_type.add("asc");
            doRequestParams.put("filter_names", filter_names);
            doRequestParams.put("filter_params", filter_params);
            doRequestParams.put("order_by", order_by);
            doRequestParams.put("order_type", order_type);
            KwlReturnObject extracap = accountingHandlerDAOobj.getObject(ExtraCompanyPreferences.class.getName(), companyid);
            ExtraCompanyPreferences extraCompanyPreferences = (ExtraCompanyPreferences) extracap.getEntityList().get(0);

            KwlReturnObject curresult = accountingHandlerDAOobj.getObject(KWLCurrency.class.getName(), globalcurrencyid);
            KWLCurrency currency = (KWLCurrency) curresult.getEntityList().get(0);
            KwlReturnObject companyObj = accountingHandlerDAOobj.getObject(Company.class.getName(), companyid);
            Company company = (Company) companyObj.getEntityList().get(0);
            int countryid = company.getCountry() != null ? Integer.parseInt(company.getCountry().getID()) : 0;

            KwlReturnObject resultavaibaleQty = null;
            String description = "";
            while (sos != null && i < sos.length) {
                KwlReturnObject result = accountingHandlerDAOobj.getObject(SalesReturn.class.getName(), sos[i]);
                SalesReturn salesReturn = (SalesReturn) result.getEntityList().get(0);
                filter_params.clear();
                filter_params.add(salesReturn.getID());
                KwlReturnObject podresult = accInvoiceDAOobj.getSalesReturnDetails(doRequestParams);
                List<SalesReturnDetail> list=podresult.getEntityList();
                for (SalesReturnDetail row :list) {
                    JSONObject obj = new JSONObject();
                    obj.put(Constants.billid, salesReturn.getID());
                    obj.put("billno", salesReturn.getSalesReturnNumber());
                    obj.put("externalcurrencyrate", salesReturn.getExternalCurrencyRate());
                    obj.put("srno", row.getSrno());
                    obj.put("rowid", row.getID());
                    obj.put("purchasetaxId", row.getProduct().getPurchasetaxid());
                    obj.put("salestaxId", row.getProduct().getSalestaxid());
                    obj.put("currencysymbol", (salesReturn.getCurrency() == null ? currency.getSymbol() : salesReturn.getCurrency().getSymbol()));
                    obj.put("originalTransactionRowid", row.getID());
                    obj.put(Constants.productid, row.getProduct().getID());
                    obj.put("invstore", (StringUtil.isNullOrEmpty(row.getInvstoreid())) ? "" : row.getInvstoreid());
                    obj.put("invlocation", (StringUtil.isNullOrEmpty(row.getInvlocid())) ? "" : row.getInvlocid());
                    obj.put("prtaxid", (row.getTax() != null) ? row.getTax().getID() : "None");
//                    obj.put("prtaxid", row.getTax() != null ? (isCopy ? (row.getTax().isActivated() ? row.getTax().getID() : "") : row.getTax().getID()) : "None");//ERP-38656
                    obj.put("reason", (row.getReason() != null) ? row.getReason().getID() : "");
                    obj.put(Constants.isUserModifiedTaxAmount, row.isIsUserModifiedTaxAmount());
                    if (paramJobj.optBoolean(Constants.isdefaultHeaderMap, false) == true) {
                        obj.put("productidValue", row.getProduct().getName());
                        obj.put("productID", row.getProduct().getProductid());
                        if (row.getInventory().getUom() != null) {
                            obj.put("uomname", row.getInventory().getUom().getID());
                        } else {
                            obj.put("uomname", row.getInventory().getProduct().getUnitOfMeasure() != null ? row.getInventory().getProduct().getUnitOfMeasure().getID() : "");
                        }
                        obj.put("uomnameValue", row.getInventory().getUom() != null ? row.getInventory().getUom().getNameEmptyforNA() : row.getProduct().getUnitOfMeasure() == null ? "" : row.getProduct().getUnitOfMeasure().getNameEmptyforNA());
                        obj.put(Constants.prtaxidValue, row.getTax() == null ? "" : row.getTax().getName());
                        obj.put("reasonValue", (row.getReason() != null) ? row.getReason().getValue() : "");
                        
                        double rowTaxPercent = 0;
                        if (row.getTax() != null) {
                            KwlReturnObject perresult = accTaxObj.getTaxPercent(companyid, salesReturn.getOrderDate(), row.getTax().getID());
                            rowTaxPercent = (Double) perresult.getEntityList().get(0);
                        }
                        obj.put("prtaxpercent", rowTaxPercent);
                        obj.put("rowTaxPercent", rowTaxPercent);
                    } else {
                        obj.put("pid", row.getProduct().getProductid());
                        if (row.getInventory().getUom() != null) {
                            obj.put("uomid", row.getInventory().getUom().getID());
                        } else {
                            obj.put("uomid", row.getInventory().getProduct().getUnitOfMeasure() != null ? row.getInventory().getProduct().getUnitOfMeasure().getID() : "");
                        }
                        obj.put("productname", row.getProduct().getName());
                        obj.put("unitname", row.getInventory().getUom() != null ? row.getInventory().getUom().getNameEmptyforNA() : row.getProduct().getUnitOfMeasure() == null ? "" : row.getProduct().getUnitOfMeasure().getNameEmptyforNA());
                       
                    }
                    /**
                     * Send uomschematypeid for Android
                     */
                    if (row.getProduct().getUomSchemaType() != null) {
                        obj.put("uomschematypeid", row.getProduct().getUomSchemaType().getID());
                    }
                    obj.put("baseuomname", row.getProduct().getUnitOfMeasure() == null ? "" : row.getProduct().getUnitOfMeasure().getNameEmptyforNA());
                    obj.put("multiuom", row.getProduct().isMultiuom());
                    obj.put("productweightperstockuom", row.getInventory().getProductWeightPerStockUom());
                    obj.put("productweightincludingpakagingperstockuom", row.getInventory().getProductWeightIncludingPakagingPerStockUom());
                    obj.put("productvolumeperstockuom", row.getInventory().getProductVolumePerStockUom());
                    obj.put("productvolumeincludingpakagingperstockuom", row.getInventory().getProductVolumeIncludingPakagingPerStockUom());

                    if (!StringUtil.isNullOrEmpty(row.getDescription())) {
                        description = row.getDescription();
                    } else if (!StringUtil.isNullOrEmpty(row.getProduct().getDescription())) {
                        description = row.getProduct().getDescription();
                    } else {
                        description = "";
                    }
                   
                    if (row.getProduct().isAsset()) {     //For Fixed Asset Group, type will be "Asset"
                        obj.put("type", "Asset");
                    } else {
                        obj.put("type", row.getProduct().getProducttype() == null ? "" : row.getProduct().getProducttype().getName());
                    }
    
                    obj.put("taxamount", row.getRowTaxAmount());
                    obj.put("taxamountforlinking", row.getRowTaxAmount());
                    if (paramJobj.optBoolean(Constants.isdefaultHeaderMap, false) == true) {
                        obj.put("discountType", row.getDiscountispercent());
                    } else {
                        obj.put("discountispercent", row.getDiscountispercent());
                    }
                    obj.put("discountjson", row.getDiscountJson()!=null?row.getDiscountJson():"");         //getting json of multiple discount applied on product ERM-68
                    obj.put("prdiscount", row.getDiscount());
                    obj.put("quantity", row.getActualQuantity());
                    obj.put("dquantity", row.getReturnQuantity());
                    obj.put("isreusable", row.getProduct().getItemReusability() != null ? row.getProduct().getItemReusability().ordinal() : 1);
                    obj.put("totalissuecount", row.getPreviousIssueCount());
 
                    double baseuomrate = row.getInventory().getBaseuomrate();
                    obj.put("baseuomquantity", authHandler.calculateBaseUOMQuatity(row.getReturnQuantity(), baseuomrate, companyid));
                    obj.put("baseuomrate", baseuomrate);
                    JSONObject jObj = null;
                    if (!StringUtil.isNullOrEmpty(extraCompanyPreferences.getColumnPref())) {
                        jObj = new JSONObject((String) extraCompanyPreferences.getColumnPref());
                        if (jObj.has(Constants.isDisplayUOM) && jObj.get(Constants.isDisplayUOM) != null && (Boolean) jObj.get(Constants.isDisplayUOM) != false) {
                            obj = accProductObj.getProductDisplayUOM(row.getProduct(), row.getReturnQuantity(), baseuomrate, false, obj);
                        }
                    }
                    obj.put(Constants.isConsignment, salesReturn.isIsconsignment());
                    obj.put("isNoteAlso", salesReturn.isIsNoteAlso());
                    if(countryid == Constants.indian_country_id){
                        obj.put("formtypeid", salesReturn.getFormtype());
                        obj.put("isInterstateParty", salesReturn.getCustomer()!= null ? salesReturn.getCustomer().isInterstateparty():false);
                    }
                    if (salesReturn.isIsconsignment()) {
                        if (salesReturn.getCustWarehouse() != null) {
                            obj.put("custWarehouse", salesReturn.getCustWarehouse().getId()); //for getting customer warehouse
                        }
                    }
                    KwlReturnObject cap = accountingHandlerDAOobj.getObject(CompanyAccountPreferences.class.getName(), paramJobj.getString(Constants.companyKey));
                    CompanyAccountPreferences preferences = (CompanyAccountPreferences) cap.getEntityList().get(0);

                    if (!StringUtil.isNullOrEmpty(row.getProduct().getID())) {
                        KwlReturnObject prodresult = accProductObj.getObject(Product.class.getName(), row.getProduct().getID());
                        Product product = (Product) prodresult.getEntityList().get(0);
                        isBatchForProduct = product.isIsBatchForProduct();
                        isSerialForProduct = product.isIsSerialForProduct();
                        isLocationForProduct = product.isIslocationforproduct();
                        isWarehouseForProduct = product.isIswarehouseforproduct();
                        isRowForProduct = product.isIsrowforproduct();
                        isRackForProduct = product.isIsrackforproduct();
                        isBinForProduct = product.isIsbinforproduct();
                        if (extraCompanyPreferences != null && extraCompanyPreferences.getUomSchemaType() == Constants.PackagingUOM) {
                            obj.put("caseuom", (product.getPackaging() != null && product.getPackaging().getCasingUoM() != null) ? product.getPackaging().getCasingUoM().getID() : "");
                            obj.put("caseuomvalue", (product.getPackaging() != null && product.getPackaging().getCasingUoM() != null) ? product.getPackaging().getCasingUomValue() : 1);
                            obj.put("inneruom", (product.getPackaging() != null && product.getPackaging().getInnerUoM() != null) ? product.getPackaging().getInnerUoM().getID() : "");
                            obj.put("inneruomvalue", (product.getPackaging() != null && product.getPackaging().getInnerUoM() != null) ? product.getPackaging().getInnerUomValue() : 1);
                            obj.put("stockuom", (product.getUnitOfMeasure() != null) ? product.getUnitOfMeasure().getID() : "");
                            obj.put("stockuomvalue", (product.getPackaging() != null && product.getPackaging().getStockUoM()!= null) ? product.getPackaging().getStockUomValue(): 1);
                        }
                        if (paramJobj.optBoolean(Constants.isdefaultHeaderMap, false) == true) {
                            if (product.getPackaging() != null) {
                                String packagingString = (product.getPackaging() != null && product.getPackaging().toString() != null) ? product.getPackaging().toString() : "";
                                obj.put(Constants.packaging, packagingString);
                            } else {
                                obj.put(Constants.packaging, "");
                            }
                        }
                    }
                    if (preferences.isIsBatchCompulsory() || preferences.isIsSerialCompulsory() || preferences.isIslocationcompulsory() || preferences.isIswarehousecompulsory() || preferences.isIsrowcompulsory() || preferences.isIsrackcompulsory() || preferences.isIsbincompulsory()) {  //check if company level option is on then only we will check productt level
                        if (isBatchForProduct || isSerialForProduct || isSerialForProduct || isLocationForProduct || isWarehouseForProduct || isRowForProduct || isRackForProduct || isBinForProduct) {  //product level batch and serial no on or not
                            obj.put("batchdetails", getNewBatchJson(row.getProduct(), paramJobj, row.getID()));
                        }
                    }

                    obj.put("copyquantity", row.getReturnQuantity());
                    String linedesc="";//Description is encoded for Web-application & Mobile Apps
                    try {
                        linedesc = StringUtil.DecodeText(description);
                    } catch (Exception ex) {
                        linedesc = description;
                    }
                    obj.put("desc", linedesc);
                    obj.put("description",linedesc);
                        
                    obj.put("partno", (row.getPartno() != null) ? row.getPartno() : "");
                    obj.put("memo", row.getRemark());
                    obj.put("remark", row.getRemark());
                    obj.put("rate", row.getRate());
                    obj.put("rateIncludingGst", row.getRateincludegst());
                    obj.put("priceSource", row.getPriceSource() != null ? row.getPriceSource() : "");
                    if (row.getPricingBandMasterid() != null) {
                        KwlReturnObject PricebandResult = accountingHandlerDAOobj.getObject(PricingBandMaster.class.getName(), row.getPricingBandMasterid());
                        PricingBandMaster pricingBandMaster = PricebandResult != null ? (PricingBandMaster) PricebandResult.getEntityList().get(0) : null;
                        obj.put("pricingbandmasterid", pricingBandMaster != null ? pricingBandMaster.getID() : "");
                        obj.put("pricingbandmastername", pricingBandMaster != null ? pricingBandMaster.getName() : "");
                    }
                    obj.put("isAsset", row.getProduct().isAsset());
                    obj.put("isLocationForProduct", isLocationForProduct);
                    obj.put("isWarehouseForProduct", isWarehouseForProduct);
                    obj.put("isBatchForProduct", isBatchForProduct);
                    obj.put("isSerialForProduct", isSerialForProduct);
                    if (row.getSalesReturn().isLeaseSalesReturn() || isFixedAsset) {// if it is a lease SR or Fixed Asset SR
                        getAssetDetailJsonObject(paramJobj, row, obj);
                    }
                    if (paramJobj.optBoolean(Constants.isdefaultHeaderMap, false) == true) {
                        double amount = row.getRate() * row.getReturnQuantity();
                        double rdisc = row.getDiscount();
                        double discountvalue = 0;
                        if (row.getDiscountispercent() == 1&& rdisc!=0) {//rdisc!=0 because it gives Nan Value
                            discountvalue = (rdisc / amount) * 100;
                        } else {
                            discountvalue = rdisc;
                        }
                        double rowtaxamount = row.getRowTaxAmount();
                        double amountWithTax = amount - discountvalue + rowtaxamount;
                        obj.put("amount", amountWithTax);
                    }
                    
                    double partamount=0;
                    //ERP-41214:Show asterisk to unit price and amount 
                    //Handled for mobile Apps                
                    if (paramJobj.optBoolean(Constants.isdefaultHeaderMap) && paramJobj.has("displayUnitPriceAndAmountInSalesDocument") && !paramJobj.optBoolean("displayUnitPriceAndAmountInSalesDocument")) {
                        obj.put("rate", CustomDesignerConstants.UNIT_PRICE_AND_AMOUNT_AS_STARS);
                        obj.put("rateIncludingGst", CustomDesignerConstants.UNIT_PRICE_AND_AMOUNT_AS_STARS);
                        obj.put("amount", CustomDesignerConstants.UNIT_PRICE_AND_AMOUNT_AS_STARS);
                    }
                    
                    if ((row.getDodetails() != null) && (!(row.getDodetails().equals("undefined")))) {
                        DeliveryOrderDetail dodetails = row.getDodetails();
                        obj.put("linkto", dodetails.getDeliveryOrder().getDeliveryOrderNumber());
                        obj.put("linkid", dodetails.getDeliveryOrder().getID());
                        obj.put("gstIncluded", dodetails.getDeliveryOrder().isGstIncluded());
                        /*
                                     ERM-1037
                                     Field used for comparing dates to restrict linking of future doument date in Sales Return document editing
                                 */
                        obj.put("invcreationdate", dodetails.getDeliveryOrder().getOrderDate());
                        obj.put("rowid", dodetails.getID());
                        obj.put("savedrowid", dodetails.getDeliveryOrder().getID());
                        obj.put("linktype", 0);
                    } else if (row.getCidetails() != null) {
                        InvoiceDetail cidetails = row.getCidetails();
                        Invoice invoice = cidetails.getInvoice();
                        if (cidetails.getDeliveryOrderDetail() != null) {
                            obj.put("isLinkedDoInSI", true);
                            obj.put("linkedDoId", cidetails.getDeliveryOrderDetail().getID());
                        }
                        obj.put("linkto", invoice.getInvoiceNumber());
                        obj.put("linkid", invoice.getID());
                        obj.put("gstIncluded", invoice.isGstIncluded());
                        /*
                             ERM-1037
                             Field used for comparing dates to restrict linking of future doument date in Sales Return document editing
                         */
                        obj.put("invcreationdate", invoice.getCreationDate());
                        obj.put("rowid", cidetails.getID());
                        obj.put("savedrowid", cidetails.getInvoice().getID());
                            obj.put("linktype", 1);
                        obj.put("linktransactionamountdue", invoice.getInvoiceamountdue());
                        //getting linked invoice details in edit case for SR->CN
                        obj.put("invbillid", invoice.getID());
                        obj.put("invjournalentryid", invoice.getJournalEntry()!=null ? invoice.getJournalEntry().getID():"");
                        obj.put("invjeentryno", invoice.getJournalEntry()!=null?invoice.getJournalEntry().getEntryNumber():"");
                        obj.put("invamountinbase", invoice.getInvoiceamountinbase());
                        obj.put("invdiscount", invoice.getDiscount());
                        obj.put("invamount", invoice.getInvoiceamount());
                        obj.put("invamountdue", invoice.getInvoiceamountdue());
                        /* If SR have been linked with Partial Invoice 
                         then Partamount is calculating for identifying purpose at JS side
                         */
                        if(row.getCidetails().getInvoice().isPartialinv()){
                           partamount= row.getCidetails().getPartamount();
                           obj.put("partamount",partamount);
                        }
                    } else {
                        obj.put("linkto", "");
                        obj.put("linkid", "");
                        obj.put("linktype", -1);
                    }
                    if (extraCompanyPreferences.getProductOptimizedFlag() != Constants.Show_all_Products) {
                        resultavaibaleQty = accProductObj.getQuantity(row.getProduct().getID());
                        obj.put("availablequantity", (resultavaibaleQty.getEntityList().get(0) == null ? 0 : resultavaibaleQty.getEntityList().get(0)));

                        KwlReturnObject result2 = accProductObj.getAssemblyLockQuantity(row.getProduct().getID());//get the lock quantity of assembly type of product locked in SO
                        Double assmblyLockQuantity = (Double) (result2.getEntityList().get(0) == null ? 0.0 : result2.getEntityList().get(0));

                        KwlReturnObject result1 = accProductObj.getLockQuantity(row.getProduct().getID());
                        Double SoLockQuantity = (Double) (result1.getEntityList().get(0) == null ? 0.0 : result1.getEntityList().get(0));

                        obj.put("lockquantity", assmblyLockQuantity + SoLockQuantity);
                    }
                    obj.put("recTermAmount", row.getRowtermamount());
                    obj.put("OtherTermNonTaxableAmount", row.getOtherTermNonTaxableAmount());

                    JSONArray TermdetailsjArr = new JSONArray();
                    if (extraCompanyPreferences.isAvalaraIntegration() && extraCompanyPreferences.getLineLevelTermFlag()==1) {
                        JSONObject paramsForTaxJobj = new JSONObject();
                        paramsForTaxJobj.put(IntegrationConstants.parentRecordID, row.getID());
                        TermdetailsjArr = integrationCommonService.getTransactionDetailTaxMapping(paramsForTaxJobj);
                    } else {
                        if (extraCompanyPreferences.getLineLevelTermFlag()==1) { // For India Country 
                            HashMap<String, Object> SalesReturnDetailParams = new HashMap<String, Object>();
                            SalesReturnDetailParams.put("salesReturnDetailid", row.getID());
                            KwlReturnObject srdTermMapresult = accInvoiceDAOobj.getSalesReturnDetailTermMap(SalesReturnDetailParams);
                            List<SalesReturnDetailsTermMap> SalesReturnDetailTermsMapList = srdTermMapresult.getEntityList();
                            for (SalesReturnDetailsTermMap salesReturnDetailTermMap : SalesReturnDetailTermsMapList) {
                                LineLevelTerms mt = salesReturnDetailTermMap.getTerm();
                                com.krawler.utils.json.base.JSONObject jsonObj = new com.krawler.utils.json.base.JSONObject();
                                jsonObj.put("id", mt.getId());
                                jsonObj.put("termid", salesReturnDetailTermMap.getTerm().getId());
                                /**
                                 * ERP-32829 
                                 */
                                jsonObj.put("productentitytermid", salesReturnDetailTermMap.getEntitybasedLineLevelTermRate()!=null?salesReturnDetailTermMap.getEntitybasedLineLevelTermRate().getId():"");
                                jsonObj.put("isDefault", salesReturnDetailTermMap.isIsGSTApplied());
                                jsonObj.put("term", mt.getTerm());
                                jsonObj.put("formulaids", mt.getFormula());
                                jsonObj.put("termamount", salesReturnDetailTermMap.getTermamount());
                                jsonObj.put("termpercentage", salesReturnDetailTermMap.getPercentage());
                                jsonObj.put("originalTermPercentage", mt.getPercentage()); //
                                jsonObj.put("glaccountname", mt.getAccount().getName());
                                jsonObj.put("accountid", mt.getAccount().getID());
                                jsonObj.put("glaccount", mt.getAccount().getID());
                                jsonObj.put("IsOtherTermTaxable", mt.isOtherTermTaxable());
                                jsonObj.put("assessablevalue", salesReturnDetailTermMap.getAssessablevalue());
                                jsonObj.put("purchasevalueorsalevalue", salesReturnDetailTermMap.getPurchaseValueOrSaleValue());
                                jsonObj.put("deductionorabatementpercent", salesReturnDetailTermMap.getDeductionOrAbatementPercent());
                                jsonObj.put("taxtype", salesReturnDetailTermMap.getTaxType());
                                jsonObj.put("taxvalue", salesReturnDetailTermMap.getTaxType() == 0 ? salesReturnDetailTermMap.getTermamount() : salesReturnDetailTermMap.getPercentage());
                                jsonObj.put("termtype", salesReturnDetailTermMap.getTerm().getTermType());
                                jsonObj.put("sign", salesReturnDetailTermMap.getTerm().getSign());
                                jsonObj.put("termsequence", salesReturnDetailTermMap.getTerm().getTermSequence());
                                jsonObj.put("payableaccountid", mt.getPayableAccount() != null ? mt.getPayableAccount().getID() : "");
                                jsonObj.put(IndiaComplianceConstants.GST_CESS_TYPE, salesReturnDetailTermMap.getEntitybasedLineLevelTermRate()!=null && salesReturnDetailTermMap.getEntitybasedLineLevelTermRate().getCessType()!=null ? salesReturnDetailTermMap.getEntitybasedLineLevelTermRate().getCessType().getId() : "");
                                jsonObj.put(IndiaComplianceConstants.GST_CESS_VALUATION_AMOUNT, salesReturnDetailTermMap.getEntitybasedLineLevelTermRate()!=null ? salesReturnDetailTermMap.getEntitybasedLineLevelTermRate().getValuationAmount() : 0.0);
                                jsonObj.put(IndiaComplianceConstants.DEFAULT_TERMID, mt!=null && mt.getDefaultTerms()!=null ? mt.getDefaultTerms().getId() : "");
                                TermdetailsjArr.put(jsonObj);
                            }
                        }
                        if (row.getCompany().getCountry().getID().equalsIgnoreCase("" + Constants.indian_country_id)) {

                            /**
                             * Put GST Tax Class History.
                             */
                            obj.put("refdocid", row.getID());
                            fieldDataManagercntrl.getGSTTaxClassHistory(obj);
                        }
                    }
                    obj.put("LineTermdetails", TermdetailsjArr);

                    boolean getlineItemDetailsflag = (paramJobj.optString("getlineItemDetailsflag", null) != null) ? Boolean.FALSE.parseBoolean((String) paramJobj.get("getlineItemDetailsflag")) : false;
                    Map<String, Object> variableMap = new HashMap<String, Object>();
                    SalesReturnDetailCustomData salesReturnDetailCustomData = (SalesReturnDetailCustomData) row.getSalesReturnDetailCustomData();
                    AccountingManager.setCustomColumnValues(salesReturnDetailCustomData, FieldMap, replaceFieldMap, variableMap);
                    if (salesReturnDetailCustomData != null) {
                        JSONObject params = new JSONObject();
                        params.put(Constants.isExport, isExport);
                        params.put(Constants.userdf,userDateFormat);
                        
                        if (paramJobj.optBoolean(Constants.isdefaultHeaderMap, false) == true) {
                            params.put(Constants.isForReport, true);
                        } else {
                            params.put(Constants.isForReport, isForReport);
                        }
                        
                        params.put(Constants.isdefaultHeaderMap, paramJobj.optBoolean(Constants.isdefaultHeaderMap, false));
                        if (!getlineItemDetailsflag) {
                            fieldDataManagercntrl.getLineLevelCustomData(variableMap, customFieldMap, customDateFieldMap, obj, params);
                        } else {
                            fieldDataManagercntrl.getLineLevelCustomDataWithKey(variableMap, customFieldMap, customDateFieldMap, obj, params);
                        }
                    }
                    // Get Product level Custom field data
                    HashMap<String, Object> fieldrequestParamsProduct = new HashMap();
                    HashMap<String, String> customProductFieldMap = new HashMap<String, String>();
                    HashMap<String, String> customProductDateFieldMap = new HashMap<String, String>();
                    Map<String, Object> variableMapProduct = new HashMap<String, Object>();
                    fieldrequestParamsProduct.put(Constants.filter_names, Arrays.asList(Constants.companyid, Constants.moduleid, Constants.customcolumn));
                    fieldrequestParamsProduct.put(Constants.filter_values, Arrays.asList(paramJobj.getString(Constants.companyKey), Constants.Acc_Product_Master_ModuleId, 0));
                    HashMap<String, String> replaceFieldMapProduct = new HashMap<String, String>();
                    HashMap<String, Integer> FieldMapProduct = accAccountDAOobj.getFieldParamsCustomMapForRows(fieldrequestParamsProduct, replaceFieldMapProduct, customProductFieldMap, customProductDateFieldMap);
                    SalesReturnDetailProductCustomData SRDetailProductCustomData = (SalesReturnDetailProductCustomData) row.getSalesReturnDetailProductCustomData();
                    AccountingManager.setCustomColumnValues(SRDetailProductCustomData, FieldMapProduct, replaceFieldMapProduct, variableMapProduct);

                    if (SRDetailProductCustomData != null) {
                        JSONObject params = new JSONObject();
                        params.put(Constants.isExport, isExport);
                        params.put(Constants.isForReport, isForReport);
                        params.put(Constants.isdefaultHeaderMap, paramJobj.optBoolean(Constants.isdefaultHeaderMap, false));
                        params.put(Constants.userdf,userDateFormat);
                        if (!getlineItemDetailsflag) {
                            fieldDataManagercntrl.getLineLevelCustomData(variableMapProduct, customProductFieldMap, customProductDateFieldMap, obj, params);
                        } else {
                            fieldDataManagercntrl.getLineLevelCustomDataWithKey(variableMapProduct, customProductFieldMap, customProductDateFieldMap, obj, params);

                        }
                    }
                    jArr.put(obj);
                }
                i++;
                jobj.put(Constants.data, jArr);
            }
        } catch (JSONException je) {
            throw ServiceException.FAILURE(je.getMessage(), je);
        }
        return jobj;
    }
    
    private void getAssetDetailJsonObject(JSONObject paramJobj, SalesReturnDetail row, JSONObject obj) throws ServiceException, JSONException, SessionExpiredException, UnsupportedEncodingException {
        boolean isFixedAsset = (!StringUtil.isNullOrEmpty(paramJobj.optString(Constants.isFixedAsset))) ? Boolean.parseBoolean(paramJobj.getString(Constants.isFixedAsset)) : false;
        String companyid = paramJobj.getString(Constants.companyKey);
        DateFormat df = authHandler.getDateFormatter(paramJobj);
        boolean isBatchForProduct = false;
        boolean isSerialForProduct = false;
        boolean isLocationForProduct = false;
        boolean isWarehouseForProduct = false;
        boolean isRowForProduct = false;
        boolean isRackForProduct = false;
        boolean isBinForProduct = false;
        JSONArray assetDetailsJArr = new JSONArray();
        HashMap<String, Object> assetDetailsParams = new HashMap<String, Object>();
        assetDetailsParams.put(Constants.companyKey, companyid);
        assetDetailsParams.put("invoiceDetailId", row.getID());
        assetDetailsParams.put("moduleId", isFixedAsset? Constants.Acc_FixedAssets_Sales_Return_ModuleId : Constants.Acc_Sales_Return_ModuleId);

        KwlReturnObject cpresult = accountingHandlerDAOobj.getObject(CompanyAccountPreferences.class.getName(), companyid);
        CompanyAccountPreferences preferences = (CompanyAccountPreferences) cpresult.getEntityList().get(0);
        KwlReturnObject assetInvMapObj = accProductObj.getAssetInvoiceDetailMapping(assetDetailsParams);
        List assetInvMapList = assetInvMapObj.getEntityList();
        Iterator assetInvMapListIt = assetInvMapList.iterator();

        while (assetInvMapListIt.hasNext()) {
            AssetInvoiceDetailMapping invoiceDetailMapping = (AssetInvoiceDetailMapping) assetInvMapListIt.next();
            AssetDetails assetDetails = invoiceDetailMapping.getAssetDetails();
            JSONObject assetDetailsJOBJ = new JSONObject();

            assetDetailsJOBJ.put("assetId", assetDetails.getId());

            assetDetailsJOBJ.put("assetdetailId", assetDetails.getId());
            assetDetailsJOBJ.put("sellAmount", assetDetails.getSellAmount());
            assetDetailsJOBJ.put("assetName", assetDetails.getAssetId());
            assetDetailsJOBJ.put("location", (assetDetails.getLocation() != null) ? assetDetails.getLocation().getId() : "");
            assetDetailsJOBJ.put("department", (assetDetails.getDepartment() != null) ? assetDetails.getDepartment().getId() : "");
            assetDetailsJOBJ.put("assetdescription", (assetDetails.getAssetDescription() != null) ? assetDetails.getAssetDescription() : "");
            assetDetailsJOBJ.put("assetUser", (assetDetails.getAssetUser() != null) ? assetDetails.getAssetUser().getUserID() : "");
            assetDetailsJOBJ.put("cost", assetDetails.getCost());
            assetDetailsJOBJ.put("salvageRate", assetDetails.getSalvageRate());
            assetDetailsJOBJ.put("salvageValue", assetDetails.getSalvageValue());
            assetDetailsJOBJ.put("accumulatedDepreciation", assetDetails.getAccumulatedDepreciation());
            assetDetailsJOBJ.put("assetLife", assetDetails.getAssetLife());
            assetDetailsJOBJ.put("elapsedLife", assetDetails.getElapsedLife());
            assetDetailsJOBJ.put("nominalValue", assetDetails.getElapsedLife());
            assetDetailsJOBJ.put("installationDate", df.format(assetDetails.getInstallationDate()));
            assetDetailsJOBJ.put("purchaseDate", df.format(assetDetails.getPurchaseDate()));
            HashMap<String, Object> fieldrequestParams1 = new HashMap();
            fieldrequestParams1.put(Constants.filter_names, Arrays.asList(Constants.companyid, Constants.moduleid, Constants.customcolumn));
            fieldrequestParams1.put(Constants.filter_values, Arrays.asList(companyid, Constants.Acc_FixedAssets_Details_ModuleId, 1));
            HashMap<String, String> customFieldMap1 = new HashMap<String, String>();
            HashMap<String, String> customDateFieldMap1 = new HashMap<String, String>();
            HashMap<String, String> replaceFieldMap11 = new HashMap<String, String>();
            HashMap<String, Integer> fieldMap1 = accAccountDAOobj.getFieldParamsCustomMapForRows(fieldrequestParams1, replaceFieldMap11, customFieldMap1, customDateFieldMap1);
            Map<String, Object> variableMap = new HashMap<String, Object>();
            AssetDetailsCustomData jeDetailCustom = (AssetDetailsCustomData) assetDetails.getAssetDetailsCustomData();
            replaceFieldMap11 = new HashMap<String, String>();
            if (jeDetailCustom != null) {
                AccountingManager.setCustomColumnValues(jeDetailCustom, fieldMap1, replaceFieldMap11, variableMap);
                JSONObject params = new JSONObject();
                params.put("companyid", companyid);
                params.put("getCustomFieldArray", true);
                fieldDataManagercntrl.getLineLevelCustomData(variableMap, customFieldMap1, customDateFieldMap1, assetDetailsJOBJ, params);
            }
            if (!StringUtil.isNullOrEmpty(row.getProduct().getID())) {
                KwlReturnObject prodresult = accProductObj.getObject(Product.class.getName(), row.getProduct().getID());
                Product product = (Product) prodresult.getEntityList().get(0);
                isBatchForProduct = product.isIsBatchForProduct();
                isSerialForProduct = product.isIsSerialForProduct();
                isLocationForProduct = product.isIslocationforproduct();
                isWarehouseForProduct = product.isIswarehouseforproduct();
                isRowForProduct = product.isIsrowforproduct();
                isRackForProduct = product.isIsrackforproduct();
                isBinForProduct = product.isIsbinforproduct();
            }
            if (preferences.isIsBatchCompulsory() || preferences.isIsSerialCompulsory() || preferences.isIslocationcompulsory() || preferences.isIswarehousecompulsory()  || preferences.isIsrowcompulsory() || preferences.isIsrackcompulsory() || preferences.isIsbincompulsory()) {  //check if company level option is on then only we will check productt level
                if (isBatchForProduct || isSerialForProduct || isSerialForProduct || isLocationForProduct || isWarehouseForProduct || isRowForProduct || isRackForProduct  || isBinForProduct) {  //product level batch and serial no on or not
                    assetDetailsJOBJ.put("batchdetails", getNewBatchJson(row.getProduct(), paramJobj, assetDetails.getId()));
                }
            }
            assetDetailsJArr.put(assetDetailsJOBJ);
        }
        obj.put("assetDetails", assetDetailsJArr.toString());
    }  
    
    /*
     * Delete Sales Return Temporary and Delete Permanent call
     */
 @Override
    public JSONObject deleteSalesReturnJson(JSONObject paramJObj) throws JSONException, ServiceException {
        JSONObject jobj = new JSONObject();
        String msg = "";
        DefaultTransactionDefinition def = new DefaultTransactionDefinition();
        def.setName("R_Tx");
        def.setPropagationBehavior(TransactionDefinition.PROPAGATION_REQUIRED);
        JSONObject response = new JSONObject();
        TransactionStatus status = txnManager.getTransaction(def);
        try {
            if (paramJObj.has(Constants.deletepermanentflag) && paramJObj.optBoolean(Constants.deletepermanentflag, false) == true) {
                jobj = deleteSalesReturnPermanent(paramJObj);
            } else {
                jobj = deleteSalesReturn(paramJObj);
            }
            txnManager.commit(status);
            jobj.put(Constants.RES_msg, jobj.getString(Constants.RES_msg));
            jobj.put(Constants.RES_success, jobj.getBoolean(Constants.RES_success));
            jobj.put(Constants.linkedTransaction, jobj.getString(Constants.linkedTransaction));
        } catch (SessionExpiredException ex) {
            txnManager.rollback(status);
            Logger.getLogger(AccInvoiceServiceImpl.class.getName()).log(Level.SEVERE, null, ex);
            throw ServiceException.FAILURE(ex.getMessage(), ex);
        } catch (JSONException ex) {
            txnManager.rollback(status);
            Logger.getLogger(AccInvoiceServiceImpl.class.getName()).log(Level.SEVERE, null, ex);
            throw new JSONException(ex.getMessage());
        } catch (Exception ex) {
            txnManager.rollback(status);
            msg = "" + (ex.getMessage() != null ? ex.getMessage() : ex.getCause().getMessage());
            throw ServiceException.FAILURE(ex.getMessage(), ex);
        }
        return jobj;
    }

 
    @Transactional(propagation = Propagation.REQUIRED, rollbackFor = {ServiceException.class, SessionExpiredException.class, JSONException.class, AccountingException.class})
    public JSONObject deleteSalesReturnTemporaryJson(JSONObject paramJobj) throws SessionExpiredException {
        JSONObject jobj = new JSONObject();
        JSONObject jresponse = new JSONObject();
        String msg = "";
        boolean issuccess = false;
        StringBuffer productIds = new StringBuffer();
        try {
            jresponse = deleteSalesReturn(paramJobj);
            if (jresponse.has(Constants.RES_msg)) {
                msg = jresponse.getString(Constants.RES_msg);
            }
            if (jresponse.has(Constants.RES_success)) {
                issuccess = jresponse.getBoolean(Constants.RES_success);
            }
            if (jresponse.has("productIds") && !StringUtil.isNullOrEmpty(jresponse.optString("productIds", null))) {
                productIds = (StringBuffer) jresponse.get("productIds");
            }
        } catch (SessionExpiredException ex) {
            msg = ex.getMessage();
            Logger.getLogger(accInvoiceController.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            msg = "" + ex.getMessage();
            Logger.getLogger(accInvoiceController.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                jobj.put(Constants.RES_success, issuccess);
                jobj.put(Constants.RES_msg, msg);
                jobj.put("productIds", productIds);
            } catch (JSONException ex) {
                Logger.getLogger(AccInvoiceServiceImpl.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return jobj;
    }
 
    /*
     * Delete temporary
     */
    @Override
    public JSONObject deleteSalesReturn(JSONObject paramJobj) throws SessionExpiredException, AccountingException, ServiceException, JSONException {
        JSONObject response = new JSONObject();
        String msg = "", msgtext = "", linkedTransaction = "";
        boolean issuccess = false;
         StringBuffer productIds = new StringBuffer();
        try {
            boolean isLeaseFixedAsset = false;
            boolean isConsignment = false;
            if (!StringUtil.isNullOrEmpty(paramJobj.optString(Constants.isLeaseFixedAsset,null))) {
                isLeaseFixedAsset = Boolean.parseBoolean(paramJobj.getString(Constants.isLeaseFixedAsset));
            }
            boolean isFixedAsset = paramJobj.optString(Constants.isFixedAsset,null) != null ? Boolean.parseBoolean(paramJobj.getString(Constants.isFixedAsset)) : false;
            if (!StringUtil.isNullOrEmpty(paramJobj.optString(Constants.isConsignment,null))) {
                isConsignment = Boolean.parseBoolean(paramJobj.getString(Constants.isConsignment));
            }
            JSONArray jArr = new JSONArray(paramJobj.optString(Constants.data, "[]"));
            String companyid = paramJobj.getString(Constants.companyKey);
            KwlReturnObject capresult = accountingHandlerDAOobj.getObject(CompanyAccountPreferences.class.getName(), companyid);
            CompanyAccountPreferences preferences = (CompanyAccountPreferences) capresult.getEntityList().get(0);
            KwlReturnObject extraresult = accountingHandlerDAOobj.getObject(ExtraCompanyPreferences.class.getName(), companyid);
            ExtraCompanyPreferences extraCompanyPreferences = (ExtraCompanyPreferences) extraresult.getEntityList().get(0);
            boolean isnegativestockforlocwar = extraCompanyPreferences != null ? extraCompanyPreferences.isIsnegativestockforlocwar() :false;
            for (int i = 0; i < jArr.length(); i++) {
                JSONObject jobj = jArr.getJSONObject(i);
                if (!StringUtil.isNullOrEmpty(jobj.getString(Constants.billid))) {
                    String srid = StringUtil.DecodeText(jobj.optString(Constants.billid));
                    String srno = jobj.optString("billno","");
                    if (isConsignment && consignmentService.isPendingForApproval(srid)) {
                        throw new AccountingException("Some stock is under QA or Repair. So you can not delete request.");
                    }
                    HashMap<String, Object> requestParams = new HashMap<String, Object>();
                    requestParams.put("srid", srid);
                    requestParams.put(Constants.companyKey, companyid);
                    if (isLeaseFixedAsset) {
                        accInvoiceDAOobj.deleteAssetDetailsLinkedWithSalesReturn(requestParams);
                    }
                    KwlReturnObject sdresult = accountingHandlerDAOobj.getObject(SalesReturn.class.getName(), srid);
                    SalesReturn purchaseReturn = (SalesReturn) sdresult.getEntityList().get(0);
                    if (!purchaseReturn.isIsdeletable()) {
                        linkedTransaction += srno + ", ";
                        continue;
                    }

                    // check the pushed sales return in delivery Planner
                    KwlReturnObject result = accInvoiceDAOobj.getSalesReturnFromDeliveryPlanner(srid, companyid);
                    List list = result.getEntityList();
                    if (!list.isEmpty()) {
                        linkedTransaction += srno + ", ";
                        continue;
                    }
                    //check Credit note is made from this Sales return
                    KwlReturnObject idresult = accCreditNoteDAOobj.getCreditNoteIdFromSRId(srid, companyid);
                    if (!(idresult.getEntityList().isEmpty())) {
                      //Check whether linked CN is paid partially/fully  
                        CreditNote creditnote = (CreditNote) idresult.getEntityList().get(0);
                        boolean isNoteLinkedWithPayment = accCreditNoteService.isNoteLinkedWithPayment(creditnote.getID());
                        boolean isNoteLinkedWithAdvancePayment = accCreditNoteService.isNoteLinkedWithAdvancePayment(creditnote.getID());
                        if (isNoteLinkedWithPayment || isNoteLinkedWithAdvancePayment) {
                            linkedTransaction += srno + ", ";
                            continue;
                        }
                    }
                    
                    KwlReturnObject rdresult = accountingHandlerDAOobj.getObject(SalesReturn.class.getName(), srid);
                    SalesReturn salesReturn = (SalesReturn) rdresult.getEntityList().get(0);
                    if (extraCompanyPreferences.isAvalaraIntegration() && salesReturn.isIsTaxCommittedOnAvalara()) {
                        //void tax committed to AvaTax in case Avalara Integration is enabled and tax has been committed for SR
                        if (!cancelTaxOnAvalaraForSR(salesReturn, companyid)) {
                            //If 'cancelTaxOnAvalaraForSR' method returns false, then SR is not to be deleted
                            linkedTransaction += srno + ", ";
                            continue;
                        }
                    }
                    if (extraCompanyPreferences != null && (extraCompanyPreferences.isActivateMRPModule() || preferences.getInventoryValuationType() == Constants.PERPETUAL_VALUATION_METHOD)) { // delete JE temporary
                        KwlReturnObject productsUsed = accInvoiceDAOobj.getProductsFromSalesReturn(srid, companyid);
                        if (productsUsed != null && productsUsed.getEntityList() != null && !productsUsed.getEntityList().isEmpty()) {
                            List productList = productsUsed.getEntityList();
                            if (productList != null && !productList.isEmpty()) {
                                for (Object object : productList) {
                                    String productid = (String) object;
                                    if (productIds.indexOf(productid) == -1) {
                                        productIds.append(productid).append(",");
                                    }
                                }
                            }
                        }
                    }
                    if (isFixedAsset) {
                        requestParams.put("srid", srid);
                        requestParams.put(Constants.companyKey, companyid);
                        accInvoiceDAOobj.deleteAssetDetailsLinkedWithAssetSalesReturn(requestParams);
                    }
                    //ERP-38641 :Add proper check while delete Sales return transaction for stock
                    //Delete Temporary
                    if(!isnegativestockforlocwar){
                        JSONObject obj = accInvoiceDAOobj.getQuantityDueToDeleteSalesReturn(salesReturn.getCompany(),srid);
                        boolean isQuantityAvailable = obj.getBoolean("isQuantityAvailable");
                        if(!isQuantityAvailable && !isnegativestockforlocwar){
                            String[] lessQtyProductIds = obj.getString("productIds").split(",");
                            String ProductNames = "";
                            for(String product: lessQtyProductIds){
                                KwlReturnObject prodresult = accProductObj.getObject(Product.class.getName(), product);
                                Product prod = (Product) prodresult.getEntityList().get(0);
                                ProductNames = ProductNames +" "+ prod.getName() +",";
                            }
                             String exceptionMsg = "Stock is not available for "+ProductNames.substring(0, ProductNames.length()-1)+" to Delete Sales Return";
                            throw new AccountingException(exceptionMsg);
                        }
                        JSONObject jobject = accInvoiceDAOobj.getTransactionsToDeleteSalesReturn(salesReturn.getCompany(),srid);
                        boolean isqty = jobject.getBoolean("isStockNegative");
                        if(isqty){
                            String[] lessQtyProductIds = jobject.getString("productIds").split(",");
                            String Product = "";
                            for(String product: lessQtyProductIds){
                                KwlReturnObject prodresult = accProductObj.getObject(Product.class.getName(), product);
                                Product prod = (Product) prodresult.getEntityList().get(0);
                                Product = Product +" "+ prod.getName() +",";
                            }
                            Product = Product.substring(0, Product.length()-1);
                            throw new AccountingException("Stock is already used in another transaction for "+Product);
                        }
                    }
                    
                    if (extraCompanyPreferences != null && extraCompanyPreferences.isActivateInventoryTab()) {
                        stockMovementService.removeStockMovementByReferenceId(salesReturn.getCompany(), salesReturn.getID());
                    }
                    Set<SalesReturnDetail> srDetails = salesReturn.getRows();
                    for (SalesReturnDetail srdObj : srDetails) {
                        String productId = srdObj.getProduct().getID().toString();
                        String srID = srdObj.getID();
                        double previousCount = (srdObj.getPreviousIssueCount());
                        double totalIssueCount = (srdObj.getProduct().getTotalIssueCount());
                        double updatedIssueCount = totalIssueCount - previousCount;
                        boolean updateflag = true;
                        double precnt = 0;
                        accProductObj.updateTotalIssueCount(updatedIssueCount, productId, companyid, updateflag, false);
                        accInvoiceDAOobj.updatePreviousIssue(precnt, srID, companyid);
                        accProductObj.deleteInventoryEntry(srdObj.getID(), companyid);
                    }
                    if (!isConsignment && extraCompanyPreferences.isSalesorderreopen()) {
                        accInvoiceDAOobj.updateSOBalanceQtyAfterSR(srid, companyid);
                    }
                    if (extraCompanyPreferences != null && (extraCompanyPreferences.isActivateMRPModule() || preferences.getInventoryValuationType() == Constants.PERPETUAL_VALUATION_METHOD)) { // delete JE temporary
                        if (salesReturn != null && salesReturn.getInventoryJE() != null) {
                            accJournalEntryobj.deleteJournalEntry(salesReturn.getInventoryJE().getID(), companyid);
                        }
                    }
                    
                    requestParams.put("srid", requestParams.get("srid"));
                    requestParams.put("companyid", requestParams.get("companyid"));
                    requestParams.put("isLeaseFixedAsset", isLeaseFixedAsset);
                    requestParams.put("isConsignment", isConsignment);
                    requestParams.put("isConsignment", isConsignment);
                    requestParams.put("isnegativestockforlocwar", isnegativestockforlocwar);
                    accInvoiceDAOobj.deleteSalesReturnsBatchSerialDetails(requestParams);
                    accInvoiceDAOobj.deleteSalesReturn(srid, companyid);

                    Set<String> invoiceIDSet = new HashSet<>();
                    //check Credit note is made from this Sales return
                    if (!(idresult.getEntityList().isEmpty())) {
                        CreditNote creditnote = (CreditNote) idresult.getEntityList().get(0);

                        /*
                         * Before deleting DebitNoteDetail Keeping id of
                         * Goodsrceipt utlized in Payment
                         */
                        if (creditnote.getApprovestatuslevel() == 11) {//for approved CN
                            for (CreditNoteDetail cnd : creditnote.getRows()) {
                                if (cnd.getInvoice() != null) {
                                    invoiceIDSet.add(cnd.getInvoice().getID());
                                }
                            }
                        }
                        
                        HashMap<String, Object> dataMap = new HashMap<String, Object>();
                        dataMap.put("cnid", creditnote.getID());
                        dataMap.put(Constants.companyKey, companyid);
                        accCreditNoteService.deleteCreditNotePartialy(dataMap);
                    }
                  
                    //Delete Rouding JEs if created against SI
                    String roundingJENo = "";
                    String roundingIDs = "";
                    if (!invoiceIDSet.isEmpty()) {
                        String invIDs = "";
                        for (String invID : invoiceIDSet) {
                            invIDs = invID + ",";
                        }
                        if (!StringUtil.isNullOrEmpty(invIDs)) {
                            invIDs = invIDs.substring(0, invIDs.length() - 1);
                        }
                        KwlReturnObject jeResult = accJournalEntryobj.getRoundingJournalEntryByGRIds(invIDs, companyid);
                        List<JournalEntry> jeList = jeResult.getEntityList();
                        for (JournalEntry roundingJE : jeList) {
                            roundingJENo = roundingJE.getEntryNumber() + ",";
                            roundingIDs = roundingJE.getID() + ",";
                            deleteJEArray(roundingJE.getID(), companyid);
                        }

                        if (!StringUtil.isNullOrEmpty(roundingJENo)) {
                            roundingJENo = roundingJENo.substring(0, roundingJENo.length() - 1);
                        }
                        if (!StringUtil.isNullOrEmpty(roundingIDs)) {
                            roundingIDs = roundingIDs.substring(0, roundingIDs.length() - 1);
                        }
                    }
                    
                    Map<String, Object> insertLogParams = new HashMap<String, Object>();
                    insertLogParams.put(Constants.reqHeader, (paramJobj.has(Constants.reqHeader) && paramJobj.get(Constants.reqHeader) != null) ? paramJobj.getString(Constants.reqHeader) : paramJobj.getString(Constants.remoteIPAddress));
                    insertLogParams.put(Constants.remoteIPAddress, paramJobj.getString(Constants.remoteIPAddress));
                    insertLogParams.put(Constants.useridKey, paramJobj.getString(Constants.useridKey));
                    auditTrailObj.insertAuditLog(AuditAction.SALES_RETURN, "User " + paramJobj.optString(Constants.userfullname,"") + " has deleted " + (isLeaseFixedAsset ? "Lease " : "") + (isFixedAsset ? "Asset " : "") + "Sales Return " + srno, insertLogParams, srid);
                   
                    if (!StringUtil.isNullOrEmpty(roundingJENo)) {
                        auditTrailObj.insertAuditLog(AuditAction.ROUNDING_OFF_JE_DELETED, "User " + paramJobj.getString(Constants.userfullname) + " has deleted Sales Return " + srno + ". So Rounding JE No. " + roundingJENo + " deleted.", insertLogParams, roundingIDs);
                    }
                }
            }
            issuccess = true;
            msgtext = (isFixedAsset) ? "acc.field.assetSalesReturnHasBeenDeletedSuccessfully" : (isConsignment ? "acc.Consignment.SalesReturnhasbeendeletedsuccessfully" : "acc.field.SalesReturnhasbeendeletedsuccessfully");
            if (StringUtil.isNullOrEmpty(linkedTransaction)) {
                msg = messageSource.getMessage(msgtext, null, Locale.forLanguageTag(paramJobj.getString(Constants.language)));
            } else {
                msgtext = "acc.field.SalesreturnReturnexcept";
                msg = messageSource.getMessage(msgtext, null, Locale.forLanguageTag(paramJobj.getString(Constants.language))) + " " + linkedTransaction.substring(0, linkedTransaction.length() - 2) + " " + messageSource.getMessage("acc.field.hasbeendeletedsuccessfully", null, Locale.forLanguageTag(paramJobj.getString(Constants.language)));
                if (extraCompanyPreferences.isAvalaraIntegration()) {
                    msg += "<br><br><b>NOTE:</b> " + messageSource.getMessage("acc.integration.lockedOnAvataxMsg", null, Locale.forLanguageTag(paramJobj.getString(Constants.language)));
                }
            }

            issuccess = true;
            if (isConsignment) {
                msg = messageSource.getMessage("acc.Consignment.SalesReturnhasbeendeletedsuccessfully", null, Locale.forLanguageTag(paramJobj.getString(Constants.language)));
            } else if (isFixedAsset) {
                msg = messageSource.getMessage("acc.field.assetSalesReturnHasBeenDeletedSuccessfully", null, Locale.forLanguageTag(paramJobj.getString(Constants.language)));
            } else {
                if (StringUtil.isNullOrEmpty(linkedTransaction)) {
                    msg = messageSource.getMessage("acc.field.SalesReturnhasbeendeletedsuccessfully", null, Locale.forLanguageTag(paramJobj.getString(Constants.language)));
                } else {
                    msg = messageSource.getMessage("acc.field.SalesreturnReturnexcept", null, Locale.forLanguageTag(paramJobj.getString(Constants.language))) + " " + linkedTransaction.substring(0, linkedTransaction.length() - 2) + " " + messageSource.getMessage("acc.field.hasbeendeletedsuccessfully", null, Locale.forLanguageTag(paramJobj.getString(Constants.language)));
                    if (extraCompanyPreferences.isAvalaraIntegration()) {
                        msg += "<br><br><b>NOTE:</b> " + messageSource.getMessage("acc.integration.lockedOnAvataxMsg", null, Locale.forLanguageTag(paramJobj.getString(Constants.language)));
                    }
                }
            }
        } /*catch (UnsupportedEncodingException ex) {
            throw ServiceException.FAILURE(messageSource.getMessage("acc.common.excp", null, Locale.forLanguageTag(paramJobj.getString(Constants.language))), ex);
        } */catch (InventoryException ex) {
            throw ServiceException.FAILURE(messageSource.getMessage("acc.common.excp", null, Locale.forLanguageTag(paramJobj.getString(Constants.language))), ex);
        } catch (AccountingException ex) {
            throw new AccountingException(ex.getMessage());
        } catch (JSONException ex) {
            throw ServiceException.FAILURE(messageSource.getMessage("acc.common.excp", null, Locale.forLanguageTag(paramJobj.getString(Constants.language))), ex);
        } finally {
            try {
                response.put(Constants.RES_success, issuccess);
                response.put(Constants.RES_msg, msg);
                response.put(Constants.linkedTransaction, linkedTransaction);
                response.put("productIds", productIds);
            } catch (JSONException ex) {
                Logger.getLogger(AccInvoiceServiceImpl.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return response;
    }
    
    /**
     * Method to void tax committed to AvaTax in case Avalara Integration is enabled
     * @param srid
     * @return 
     */
    private boolean cancelTaxOnAvalaraForSR(SalesReturn salesReturn, String companyid) throws JSONException, AccountingException {
        String srno = salesReturn.getSalesReturnNumber();
        JSONObject tempReqJobj = new JSONObject();
        tempReqJobj.put("CancelCode", "DocDeleted");
        tempReqJobj.put("DocType", "ReturnInvoice");
        tempReqJobj.put("DocCode", srno);
        tempReqJobj.put("moduleid", String.valueOf(Constants.Acc_Sales_Return_ModuleId));
        tempReqJobj.put(IntegrationConstants.integrationPartyIdKey, IntegrationConstants.integrationPartyId_AVALARA);
        tempReqJobj.put(Constants.companyKey, companyid);
        try {
            tempReqJobj.put(IntegrationConstants.integrationOperationIdKey, IntegrationConstants.avalara_getTransaction);
            JSONObject avalaraTransactionJobj = integrationCommonService.processIntegrationRequest(tempReqJobj);
            if (avalaraTransactionJobj != null && avalaraTransactionJobj.optBoolean("isLocked", false)) {
                return false;//If transaction is locked on AvaTax side, then we don't delete SR. Therefore return false
            } else {
                tempReqJobj.put(IntegrationConstants.integrationOperationIdKey, IntegrationConstants.avalara_cancelTax);
                JSONObject cancelAvalaraTaxResponse = integrationCommonService.processIntegrationRequest(tempReqJobj);//Method call to void committed taxes on AvaTax side
                if (cancelAvalaraTaxResponse.optBoolean(Constants.RES_success, false)) {
                    HashMap tempMap = new HashMap<String, Object>();
                    tempMap.put("isTaxCommittedOnAvalara", false);
                    tempMap.put("id", salesReturn.getID());
                    try {
                        accInvoiceDAOobj.saveSalesReturn(tempMap);//Method call to update 'isTaxCommittedOnAvalara' flag in database
                    } catch (Exception ex) {
                        throw new AccountingException("<br><br><b>NOTE:</b> Sales Return with number " + "<b>" + srno + "</b>" + " could not be deleted because tax committed to AvaTax was voided but 'isTaxCommittedOnAvalara' flag could not be updated for Sales Return.");
                    }
                } else {
                    throw new AccountingException();
                }
            }
        } catch (Exception ex) {
            throw new AccountingException("<br><br><b>NOTE:</b> " + (StringUtil.isNullOrEmpty(ex.getMessage()) ? "Sales Return with number " + "<b>" + srno + "</b>" + " could not be deleted because tax committed to AvaTax could not be voided." : ex.getMessage()));
        }
        return true;
    }

    /*
     * Permanent Delete
     */
    @Override
    public JSONObject deleteSalesReturnPermanent(JSONObject paramJobj) throws SessionExpiredException, AccountingException, ServiceException, JSONException {
        JSONObject response = new JSONObject();
        String msg = "", msgtext = "", linkedTransaction = "";
        boolean issuccess = false;
        StringBuffer productIds = new StringBuffer();
        try {
            JSONArray jArr = new JSONArray(paramJobj.optString(Constants.data, "[]"));
            String companyid = paramJobj.getString(Constants.companyKey);
            KwlReturnObject capresult = accountingHandlerDAOobj.getObject(CompanyAccountPreferences.class.getName(), companyid);
            CompanyAccountPreferences preferences = (CompanyAccountPreferences) capresult.getEntityList().get(0);

            boolean isLeaseFixedAsset = false;
            boolean isConsignment = false;
            boolean isnegativestockforlocwar = false;
            ExtraCompanyPreferences extraCompanyPreferences = null;
            KwlReturnObject extraprefresult = accountingHandlerDAOobj.getObject(ExtraCompanyPreferences.class.getName(), companyid);
            extraCompanyPreferences = extraprefresult != null ? (ExtraCompanyPreferences) extraprefresult.getEntityList().get(0) : null;
            isnegativestockforlocwar = extraCompanyPreferences.isIsnegativestockforlocwar();
            if (!StringUtil.isNullOrEmpty(paramJobj.optString(Constants.isLeaseFixedAsset,null))) {
                isLeaseFixedAsset = Boolean.parseBoolean(paramJobj.getString(Constants.isLeaseFixedAsset));
            }
            if (!StringUtil.isNullOrEmpty(paramJobj.optString(Constants.isConsignment,null))) {
                isConsignment = Boolean.parseBoolean(paramJobj.getString(Constants.isConsignment));
            }
            boolean isFixedAsset = paramJobj.optString(Constants.isFixedAsset,null) != null ? Boolean.parseBoolean(paramJobj.getString(Constants.isFixedAsset)) : false;
            String srid = "", srno = "";
            for (int i = 0; i < jArr.length(); i++) {
                JSONObject jobj = jArr.getJSONObject(i);
                srid = StringUtil.DecodeText(jobj.optString(Constants.billid));
                srno = jobj.optString("billno","");
                if (isConsignment && consignmentService.isPendingForApproval(srid)) {
                    throw new AccountingException("Some stock is under QA or Repair. So you can not delete request.");
                }
                if (isFixedAsset) {
                    HashMap<String, Object> requestParams = new HashMap<String, Object>();
                    requestParams.put("srid", srid);
                    requestParams.put(Constants.companyKey, companyid);
                    accInvoiceDAOobj.deleteAssetDetailsLinkedWithAssetSalesReturn(requestParams);
                }
                KwlReturnObject sdresult = accountingHandlerDAOobj.getObject(SalesReturn.class.getName(), srid);
                SalesReturn purchaseReturn = (SalesReturn) sdresult.getEntityList().get(0);
                if (!purchaseReturn.isIsdeletable()) {
                    linkedTransaction += srno + ", ";
                    continue;
                }

                // check the pushed sales return in delivery Planner
                KwlReturnObject result = accInvoiceDAOobj.getSalesReturnFromDeliveryPlanner(srid, companyid);
                List list = result.getEntityList();
                if (!list.isEmpty()) {
                    linkedTransaction += srno + ", ";
                    continue;
                }
                HashMap<String, Object> requestParams = new HashMap<String, Object>();
                requestParams.put("srid", srid);
                requestParams.put("companyid", companyid);
                requestParams.put("srno", srno);
                requestParams.put(Constants.isLeaseFixedAsset, isLeaseFixedAsset);
                requestParams.put(Constants.isConsignment, isConsignment);
                requestParams.put("isnegativestockforlocwar", isnegativestockforlocwar);
                if (!StringUtil.isNullOrEmpty(srid)) {  //check if its sales return edit case 
                    //check credit node is made from this sales return
                    String creditNoteId = accInvoiceDAOobj.getCreditNoteIdFromSRId(srid, companyid);
                    if (!StringUtil.isNullOrEmpty(creditNoteId)) {
                        requestParams.put("cnid", creditNoteId);
                    }
                    /*
                     * Deleting paymentotherwise details while editing same record
                     */ 
                    KwlReturnObject paymentResult = accVendorPaymentobj.getPaymentIdFromSRId(srid, companyid);
                    Payment payment = null;
                    if (paymentResult != null && !paymentResult.getEntityList().isEmpty()) {
                        payment = (Payment) paymentResult.getEntityList().get(0);
                        requestParams.put("paymentid", payment.getID());
                        requestParams.put("approvalStatusLevel", payment.getApprovestatuslevel());           //adding payment approvalStatusLevel to requestParams to check in method deletePaymentPermanent
                        requestParams.put("journalentryids", payment.getJournalEntry().getID());
                        requestParams.put("paymentno", payment.getPaymentNumber());
                        requestParams.put("companyid", companyid);
                        accVendorPaymentobj.deleteLinkingInformationOfMP(requestParams);
                        Set<JournalEntryDetail> details = null;
                        Set<PaymentDetailOtherwise> paymentDetailOtherwises = payment.getPaymentDetailOtherwises();

                        /*
                         *deleting paymentotherwise details 
                         */
                        if (payment.getPaymentDetailOtherwises() != null && !paymentDetailOtherwises.isEmpty()) {
                            JSONObject reqPrams = new JSONObject();
                            String ids = "";
                            for (PaymentDetailOtherwise paymentDetailOtherwise : paymentDetailOtherwises) {
                                ids += "'" + paymentDetailOtherwise.getID() + "',";
                            }
                            reqPrams.put("paymentdetailotherwiseid", ids.substring(0, ids.length() - 1));
                            accVendorPaymentobj.deleteAdvanceDetailsTerm(reqPrams);
                        }
                        accVendorPaymentobj.deletePaymentPermanent(requestParams);
                    }
                }
                if (requestParams.containsKey("cnid") && requestParams.get("cnid") != null) {
                    //Check whether linked CN is paid partially/fully
                    boolean isNoteLinkedWithPayment = accCreditNoteService.isNoteLinkedWithPayment((String) requestParams.get("cnid"));
                    boolean isNoteLinkedWithAdvancePayment = accCreditNoteService.isNoteLinkedWithAdvancePayment((String) requestParams.get("cnid"));
                    if (isNoteLinkedWithPayment || isNoteLinkedWithAdvancePayment) {
                        linkedTransaction += srno + ", ";
                        continue;
                    }
                }    
                KwlReturnObject res = accountingHandlerDAOobj.getObject(SalesReturn.class.getName(), srid);
                SalesReturn salesReturn = (SalesReturn) res.getEntityList().get(0);
                
                if (extraCompanyPreferences.isAvalaraIntegration() && salesReturn.isIsTaxCommittedOnAvalara()) {
                    //void tax committed to AvaTax in case Avalara Integration is enabled and tax has been committed for SR
                    if (!cancelTaxOnAvalaraForSR(salesReturn, companyid)) {
                        //If 'cancelTaxOnAvalaraForSR' method returns false, then SR is not to be deleted
                        linkedTransaction += srno + ", ";
                        continue;
                    }
                }
                
                //ERP-38641 :Add proper check while delete Sales return transaction for stock
                //Delete Permanent Case
                boolean isDeleted = Boolean.parseBoolean(jobj.optString("deleted",""));
                if(!isDeleted)
                {
                    if(!isnegativestockforlocwar){
                        JSONObject obj = accInvoiceDAOobj.getQuantityDueToDeleteSalesReturn(salesReturn.getCompany(),srid);
                        boolean isQuantityAvailable = obj.getBoolean("isQuantityAvailable");
                        if(!isQuantityAvailable && !isnegativestockforlocwar){
                            String[] lessQtyProductIds = obj.getString("productIds").split(",");
                            String ProductNames = "";
                            for(String product: lessQtyProductIds){
                                KwlReturnObject prodresult = accProductObj.getObject(Product.class.getName(), product);
                                Product prod = (Product) prodresult.getEntityList().get(0);
                                ProductNames = ProductNames +" "+ prod.getName() +",";
                            }
                             String exceptionMsg = "Stock is not available for "+ProductNames.substring(0, ProductNames.length()-1)+" to Delete Sales Return";
                            throw new AccountingException(exceptionMsg);
                        }
                        JSONObject jobject = accInvoiceDAOobj.getTransactionsToDeleteSalesReturn(salesReturn.getCompany(),srid);
                        boolean isqty = jobject.getBoolean("isStockNegative");
                        if(isqty){
                            String[] lessQtyProductIds = jobject.getString("productIds").split(",");
                            String Product = "";
                            for(String product: lessQtyProductIds){
                                KwlReturnObject prodresult = accProductObj.getObject(Product.class.getName(), product);
                                Product prod = (Product) prodresult.getEntityList().get(0);
                                Product = Product +" "+ prod.getName() +",";
                            }
                            Product = Product.substring(0, Product.length()-1);
                            throw new AccountingException("Stock is already used in another transaction for "+Product);
                        }
                    }
                }
                
                if (extraCompanyPreferences != null && (extraCompanyPreferences.isActivateMRPModule() || preferences.getInventoryValuationType() == Constants.PERPETUAL_VALUATION_METHOD)) { // delete JE temporary
                    KwlReturnObject productsUsed = accInvoiceDAOobj.getProductsFromSalesReturn(srid, companyid);
                    if (productsUsed != null && productsUsed.getEntityList() != null && !productsUsed.getEntityList().isEmpty()) {
                        List productList = productsUsed.getEntityList();
                        if (productList != null && !productList.isEmpty()) {
                            for (Object object : productList) {
                                String productid = (String) object;
                                if (productIds.indexOf(productid) == -1) {
                                    productIds.append(productid).append(",");
                                }
                            }
                        }
                    }
                }
                HashMap<String, Object> doRequestParams = new HashMap<String, Object>();
                ArrayList filter_names = new ArrayList(), filter_params = new ArrayList();
                filter_names.add("salesReturn.ID");
                filter_params.add(salesReturn.getID());
                doRequestParams.put("filter_names", filter_names);
                doRequestParams.put("filter_params", filter_params);

                KwlReturnObject idresult = accInvoiceDAOobj.getSalesReturnDetails(doRequestParams);
                Iterator itr = idresult.getEntityList().iterator();
                List<SalesReturnDetail> srlist = idresult.getEntityList();
                String linkid = "";
                for (SalesReturnDetail row : srlist) {
                    if (row.getDodetails() != null) {
                        linkid = row.getDodetails().getDeliveryOrder().getID();
                        if (!StringUtil.isNullOrEmpty(linkid)) {
                            KwlReturnObject rdresult = accountingHandlerDAOobj.getObject(DeliveryOrder.class.getName(), linkid);
                            DeliveryOrder deliveryOrder = (DeliveryOrder) rdresult.getEntityList().get(0);
                            HashMap hMap = new HashMap();
                            hMap.put("deliveryOrder", deliveryOrder);
                            hMap.put("isOpen", true);
                            hMap.put("isFromSalesReturn", true);
                            accInvoiceDAOobj.updateDeliveryOrderStatus(hMap);
                        }
                    } else if (row.getCidetails() != null) {
                        linkid = row.getCidetails().getInvoice().getID();
                        if (!StringUtil.isNullOrEmpty(linkid)) {
                            KwlReturnObject invresult = accountingHandlerDAOobj.getObject(Invoice.class.getName(), linkid);
                            Invoice invoice = (Invoice) invresult.getEntityList().get(0);
                            HashMap invhMap = new HashMap();
                            invhMap.put("invoice", invoice);
                            invhMap.put("isOpen", true);
                            accInvoiceDAOobj.updateSalesInvoiceStatus(invhMap);
                        }
                    }
                }
                
                if (extraCompanyPreferences.isAvalaraIntegration()) {//In case of deletion, if Avalara Integration is enabled, delete tax mapping from table 'TransactionDetailAvalaraTaxMapping'
                    deleteAvalaraTaxMappingForSR(new HashSet<SalesReturnDetail>(srlist));
                }

                stockMovementService.removeStockMovementByReferenceId(salesReturn.getCompany(), salesReturn.getID());
                if (!isConsignment && extraCompanyPreferences.isSalesorderreopen()) {
                   accInvoiceDAOobj.updateSOBalanceQtyAfterSR(srid, companyid);
                }
                Set<String> invoiceIDSet = new HashSet<>();
                if (requestParams.containsKey("cnid") && requestParams.get("cnid") != null) {
                    String creditNoteID = (String) requestParams.get("cnid");
                    KwlReturnObject dnObj = accountingHandlerDAOobj.getObject(CreditNote.class.getName(), creditNoteID);
                    CreditNote creditNote = (CreditNote) dnObj.getEntityList().get(0);     
                    /*
                     * Before deleting DebitNoteDetail Keeping id of Goodsrceipt
                     * utlized in Payment
                     */
                    if (creditNote.getApprovestatuslevel() == 11 && !creditNote.isDeleted()) {
                        for (CreditNoteDetail cnd : creditNote.getRows()) {
                            if (cnd.getInvoice() != null) {
                                invoiceIDSet.add(cnd.getInvoice().getID());
                            }
                        }
                    }
                    
                    accCreditNoteService.updateOpeningInvoiceAmountDue(creditNoteID, companyid);
                    accCreditNoteDAOobj.deleteLinkingInformationOfCN(requestParams);
                    accInvoiceDAOobj.deleteCreditNotesPermanent(requestParams);
                }
                accInvoiceDAOobj.deleteLinkingInformationOfSR(requestParams);
                
                //Delete Rouding JEs if created against SI
                String roundingJENo = "";
                String roundingIDs = "";
                if (!invoiceIDSet.isEmpty()) {
                    String invIDs = "";
                    for (String invID : invoiceIDSet) {
                        invIDs = invID + ",";
                    }
                    if (!StringUtil.isNullOrEmpty(invIDs)) {
                        invIDs = invIDs.substring(0, invIDs.length() - 1);
                    }
                    KwlReturnObject jeResult = accJournalEntryobj.getRoundingJournalEntryByGRIds(invIDs, companyid);
                    List<JournalEntry> jeList = jeResult.getEntityList();
                    for (JournalEntry roundingJE : jeList) {
                        roundingJENo = roundingJE.getEntryNumber() + ",";
                        roundingIDs = roundingJE.getID() + ",";
                        deleteJEArray(roundingJE.getID(), companyid);
                    }

                    if (!StringUtil.isNullOrEmpty(roundingJENo)) {
                        roundingJENo = roundingJENo.substring(0, roundingJENo.length() - 1);
                    }
                    if (!StringUtil.isNullOrEmpty(roundingIDs)) {
                        roundingIDs = roundingIDs.substring(0, roundingIDs.length() - 1);
                    }
                }
                // delete sales return
                requestParams.put("isMRPModuleActivated", extraCompanyPreferences.isActivateMRPModule());
                requestParams.put("isPerpetualValuationActivated", (preferences.getInventoryValuationType() == Constants.PERPETUAL_VALUATION_METHOD));
                if (extraCompanyPreferences != null && (extraCompanyPreferences.isActivateMRPModule() || preferences.getInventoryValuationType() == Constants.PERPETUAL_VALUATION_METHOD)) {
                    if (salesReturn.getInventoryJE() != null) { // delete inventory JE
                        JournalEntry inventoryJE = salesReturn.getInventoryJE();
                        requestParams.put("inventoryjeid", inventoryJE.getID());
                    }
                }
                accInvoiceDAOobj.deleteSalesReturnPermanent(requestParams);
                msgtext = (isFixedAsset) ? "acc.field.assetSalesReturnHasBeenDeletedSuccessfully" : (isConsignment ? "acc.Consignment.SalesReturnhasbeendeletedsuccessfully" : "acc.field.SalesReturnhasbeendeletedsuccessfully");
                Map<String, Object> insertLogParams = new HashMap<String, Object>();
                insertLogParams.put(Constants.reqHeader, (paramJobj.has(Constants.reqHeader) && paramJobj.get(Constants.reqHeader) != null) ? paramJobj.getString(Constants.reqHeader) : paramJobj.getString(Constants.remoteIPAddress));
                insertLogParams.put(Constants.remoteIPAddress, paramJobj.getString(Constants.remoteIPAddress));
                insertLogParams.put(Constants.useridKey, paramJobj.getString(Constants.useridKey));
                auditTrailObj.insertAuditLog(AuditAction.SALES_RETURN, "User " + paramJobj.getString(Constants.userfullname) + " has deleted " + (isLeaseFixedAsset ? "Lease " : "") + (isFixedAsset ? "Asset " : "") + "Sales Return Permanently " + srno, insertLogParams, srid);
                if (!StringUtil.isNullOrEmpty(roundingJENo)) {
                    auditTrailObj.insertAuditLog(AuditAction.ROUNDING_OFF_JE_DELETED, "User " + paramJobj.getString(Constants.userfullname) + " has deleted Sales Return " + srno + " Permanently. So Rounding JE No. " + roundingJENo + " deleted.", insertLogParams, roundingIDs);
                }
            }
            /*
            Messages removed outside of loop because success remain false for single record delete of linked transaction
            */
            issuccess = true;
            if (StringUtil.isNullOrEmpty(linkedTransaction)) {
                msg = messageSource.getMessage(msgtext, null, Locale.forLanguageTag(paramJobj.getString(Constants.language)));
            } else {
                msgtext = "acc.field.SalesreturnReturnexcept";
                msg = messageSource.getMessage(msgtext, null, Locale.forLanguageTag(paramJobj.getString(Constants.language))) + " " + linkedTransaction.substring(0, linkedTransaction.length() - 2) + " " + messageSource.getMessage("acc.field.hasbeendeletedsuccessfully", null, Locale.forLanguageTag(paramJobj.getString(Constants.language)));
                if (extraCompanyPreferences.isAvalaraIntegration()) {
                    msg += "<br><br><b>NOTE:</b> " + messageSource.getMessage("acc.integration.lockedOnAvataxMsg", null, Locale.forLanguageTag(paramJobj.getString(Constants.language)));
                }
            }
        } /*catch (UnsupportedEncodingException ex) {
            throw ServiceException.FAILURE(messageSource.getMessage("acc.common.excp", null, Locale.forLanguageTag(paramJobj.getString(Constants.language))), ex);
        }*/ catch (InventoryException ex) {
            throw ServiceException.FAILURE(messageSource.getMessage("acc.common.excp", null, Locale.forLanguageTag(paramJobj.getString(Constants.language))), ex);
        } catch (JSONException ex) {
            throw new AccountingException(messageSource.getMessage("acc.common.excp1", null, Locale.forLanguageTag(paramJobj.getString(Constants.language))));
        } finally {
            try {
                response.put(Constants.RES_success, issuccess);
                response.put(Constants.RES_msg, msg);
                response.put(Constants.linkedTransaction, linkedTransaction);
                response.put("productIds", productIds);
            } catch (JSONException ex) {
                Logger.getLogger(AccInvoiceServiceImpl.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return response;
    }
    
    private void deleteAvalaraTaxMappingForSR(Set<SalesReturnDetail> salesReturnDetailSet) throws JSONException, ServiceException {
        List srDetailIDsList = new ArrayList<String>();
        for (SalesReturnDetail srd : salesReturnDetailSet) {
            srDetailIDsList.add(srd.getID());
        }
        //to create a comma separated string of SalesOrderDetail IDs for 'IN' subquery
        String srDetailIDsStr = org.springframework.util.StringUtils.collectionToDelimitedString(srDetailIDsList, ",", "'", "'");
        JSONObject avalaraTaxDeleteJobj = new JSONObject();
        avalaraTaxDeleteJobj.put(IntegrationConstants.parentRecordID, srDetailIDsStr);
        integrationCommonService.deleteTransactionDetailTaxMapping(avalaraTaxDeleteJobj);
    }
 
 //Function which generates data for top customers
    @Override
    public JSONObject getSalesAnalysis_TopCustomers_Report(JSONObject paramJobj)throws SessionExpiredException, ServiceException {
        JSONObject jobj = new JSONObject();
        JSONArray newJSONArray = new JSONArray();
        try {
            boolean isExport = paramJobj.optBoolean("isExport",false);
            boolean isForChart = paramJobj.optBoolean("isForChart",false);
            int countNumber = paramJobj.optInt("countNumber");
            DecimalFormat quantitydecimal =null;
            DecimalFormat amountdecimal =null;
            HashMap requestParams = AccInvoiceServiceHandler.getInvoiceRequestMapJson(paramJobj);
            String companyid = paramJobj.optString(Constants.companyKey);
            String userid = paramJobj.optString(Constants.useridKey);
            requestParams.put("userid", userid);
            DecimalFormat df = new DecimalFormat("###0.00");
            ExtraCompanyPreferences extraPref = (ExtraCompanyPreferences) kwlCommonTablesDAOObj.getClassObject("com.krawler.common.admin.ExtraCompanyPreferences", companyid);
            if (extraPref != null && extraPref.isEnablesalespersonAgentFlow()) {
                int permCode = paramJobj.optInt(Constants.PermCode_Customer);
                if (!((permCode & Constants.CUSTOMER_VIEWALL_PERMCODE) == Constants.CUSTOMER_VIEWALL_PERMCODE)) {
                    /*
                     * when (permCode & Constants.CUSTOMER_VIEWALL_PERMCODE) ==
                     * Constants.CUSTOMER_VIEWALL_PERMCODE is true then user has
                     * permission to view all customers documents,so at that
                     * time there is need to filter record according to
                     * user&salesperson.
                     */
                    String userId = userid;
                    requestParams.put(Constants.useridKey, userId);
                    requestParams.put("enablesalespersonagentflow", extraPref.isEnablesalespersonAgentFlow());
                }
            }
//            requestParams.put(Constants.isdefaultHeaderMap,paramJobj.optBoolean(Constants.isdefaultHeaderMap));
//            if(paramJobj.optBoolean(Constants.isdefaultHeaderMap)){
//                KwlReturnObject accResult = accAccountDAOobj.quotationindecimalforcompany(companyid);
//                if (accResult.getEntityList().get(0) != null) {
//                    Object[] decimalcontact = (Object[]) accResult.getEntityList().get(0);
//                    if (decimalcontact[2] != null) {//getting amount in decimal value from companyaccpreferences
//                        amountdigitafterdecimal = (Integer) decimalcontact[2];
//                        requestParams.put("amountdigitafterdecimal", amountdigitafterdecimal);
//                    }
//                }
//            }
           
            KwlReturnObject result = accInvoiceDAOobj.getSaleOfCustomer(requestParams);
            List customerlist = result.getEntityList();
            result = accInvoiceDAOobj.getSaleQuantityOfCustomer(requestParams);
            List customerQuantitylist = result.getEntityList();
            result = accInvoiceDAOobj.getSaleOfCompany(requestParams);
            List totallist = result.getEntityList();
            Object[] ob = (Object[]) totallist.get(0);
            String tamt = ob[1]!=null ? ob[1].toString() : "0.0";
            double totalAmount = Double.parseDouble(tamt);

            HashMap<String, Object> requestParams1 = new HashMap();
            requestParams1.put(Constants.companyKey, companyid);
            KwlReturnObject custResult = accCustomerDAOobj.getCustomerIds(requestParams1);
            List<String> custList = custResult.getEntityList();
            double totalCust = custList.size();

            int count = 0;
            int totalActivecount = customerlist.size();
            double totalReportedSale = 0;
            double totalReportedQty = 0;
            double totalReportedPer = 0;
            Iterator amountitr = customerlist.iterator();
            Iterator quantityitr = customerQuantitylist.iterator();
            ArrayList<JSONObject> sortedpercent = new ArrayList<JSONObject>(); 
            if(paramJobj.has(Constants.isdefaultHeaderMap) && paramJobj.optBoolean(Constants.isdefaultHeaderMap)){
                 quantitydecimal = new DecimalFormat(authHandler.getCompleteDFStringForQuantity("###0.",companyid));
                 amountdecimal = new DecimalFormat(authHandler.getCompleteDFStringForAmount("###0.",companyid));
            } 
            while (amountitr.hasNext() && quantityitr.hasNext()) {
                Object[] amountobj = (Object[]) amountitr.next();
                Object[] quantityobj = (Object[]) quantityitr.next();
                JSONObject getObj = new JSONObject();
                getObj.put("customerId", amountobj[0].toString());
                getObj.put("acccode", amountobj[1].toString());
                getObj.put("accname", amountobj[2].toString());   
                 if (paramJobj.has(Constants.isdefaultHeaderMap) && paramJobj.optBoolean(Constants.isdefaultHeaderMap)) {
                    getObj.put("value", StringUtil.isNullObject(amountobj[3])? 0.0 : amountdecimal.format(Double.parseDouble(amountobj[3].toString())));
                    getObj.put("quantity", StringUtil.isNullObject(quantityobj[1])? 0.0 : quantitydecimal.format(Double.parseDouble(quantityobj[1].toString())));
                 }else{
                    getObj.put("value", amountobj[3].toString());
                    getObj.put("quantity", quantityobj[1].toString());
                 }    
                double peroftotal = 0;
                double value = Double.parseDouble(amountobj[3].toString());
                totalReportedSale += value;
                totalReportedQty += Double.parseDouble(quantityobj[1].toString());
                peroftotal = (value / totalAmount) * 100;
                totalReportedPer += peroftotal;
                getObj.put("peroftotal", df.format(peroftotal));
                //ERP-41214:Show asterisk to unit price and amount 
                //Handled for mobile Apps         
                if (paramJobj.optBoolean(Constants.isdefaultHeaderMap) && paramJobj.has("displayUnitPriceAndAmountInSalesDocument") && !paramJobj.optBoolean("displayUnitPriceAndAmountInSalesDocument")) {
                    getObj.put("value", CustomDesignerConstants.UNIT_PRICE_AND_AMOUNT_AS_STARS);// Total Amount 
                    getObj.put("peroftotal", CustomDesignerConstants.UNIT_PRICE_AND_AMOUNT_AS_STARS);
                }
                
                if (!StringUtil.isNullOrEmpty(paramJobj.optString(Constants.globalCurrencyKey, null))) {
                    KwlReturnObject curresult = accountingHandlerDAOobj.getObject(KWLCurrency.class.getName(), paramJobj.optString(Constants.globalCurrencyKey));
                    KWLCurrency currency = (KWLCurrency) curresult.getEntityList().get(0);
                    getObj.put("currencysymbol", !StringUtil.isNullOrEmpty(currency.getSymbol()) ? currency.getSymbol() : "");
                    getObj.put("currencycode", !StringUtil.isNullOrEmpty(currency.getCurrencyCode()) ? currency.getCurrencyCode() : "");
                    getObj.put(Constants.currencyKey, !StringUtil.isNullOrEmpty(currency.getCurrencyID()) ? currency.getCurrencyID() : "");
                    getObj.put("currencyname", !StringUtil.isNullOrEmpty(currency.getName()) ? currency.getName() : "");
                }
                
                sortedpercent.add(getObj);getObj.toString();
                count++;
            }
            Collections.sort(sortedpercent, new Comparator<JSONObject>() {

                public int compare(JSONObject J1, JSONObject J2) {
                    Double val1 = J1.optDouble("peroftotal");
                    Double val2 = J2.optDouble("peroftotal");
                    return val2.compareTo(val1);
                }
            });
            ArrayList<JSONObject> sorted = new ArrayList<JSONObject>();
            if (countNumber!=0 && countNumber < count) {
                totalReportedSale = 0;
                totalReportedQty = 0;
                totalReportedPer = 0;
                List SortedList = sortedpercent.subList(0, countNumber);
                Iterator it = SortedList.iterator();
                while (it.hasNext()) {
                    JSONObject perobj = (JSONObject) it.next();
                    double peroftotal = 0;
                    double value = perobj.optDouble("value");
                    totalReportedSale += value;
                    totalReportedQty += perobj.optDouble("quantity");
                    peroftotal = (value / totalAmount) * 100;
                    totalReportedPer += peroftotal;
                    perobj.put("peroftotal", df.format(peroftotal));
                    sorted.add(perobj);
                }
                count = countNumber;
                newJSONArray = (JSONArray) new JSONArray(sorted);
            } else {
                newJSONArray = (JSONArray) new JSONArray(sortedpercent);
            }
 
            // Column Model
            JSONObject commData = new JSONObject();
            if (!isForChart) {
                JSONObject getObj = new JSONObject();
                if (isExport) {
                    getObj.put("acccode", "Total of Reported Sales");
                } else {
                    getObj.put("acccode", "<b>Total of Reported Sales<b>");
                }
                getObj.put("quantity", totalReportedQty);
                getObj.put("peroftotal", df.format(totalReportedPer));
                getObj.put("value", totalReportedSale);
                newJSONArray.put(getObj);

                getObj = new JSONObject();
                if (isExport) {
                    getObj.put("acccode", "Total of Un-Reported Sales");
                } else {
                    getObj.put("acccode", "<b>Total of Un-Reported Sales<b>");
                }
                getObj.put("peroftotal", df.format((100 - totalReportedPer)));
                getObj.put("value", totalAmount - totalReportedSale);
                newJSONArray.put(getObj);

                getObj = new JSONObject();
                if (isExport) {
                    getObj.put("acccode", "Gross Sales For the Period");
                } else {
                    getObj.put("acccode", "<b>Gross Sales For the Period<b>");
                }
                getObj.put("peroftotal", df.format(100));
                getObj.put("value", totalAmount);
                newJSONArray.put(getObj);

                getObj = new JSONObject();
                if (isExport) {
                    getObj.put("acccode", "Total Customers Reported");
                } else {
                    getObj.put("acccode", "<b>Total Customers Reported<b>");
                }
                getObj.put("peroftotal", df.format((count / totalCust) * 100));
                getObj.put("value", count);
                newJSONArray.put(getObj);

                getObj = new JSONObject();
                if (isExport) {
                    getObj.put("acccode", "Active Customers Not Reported");
                } else {
                    getObj.put("acccode", "<b>Active Customers Not Reported<b>");
                }
                getObj.put("peroftotal", df.format(((totalActivecount - count) / totalCust) * 100));
                getObj.put("value", (totalActivecount - count));
                newJSONArray.put(getObj);

                getObj = new JSONObject();
                if (isExport) {
                    getObj.put("acccode", "Zero Transaction Customers");
                } else {
                    getObj.put("acccode", "<b>Zero Transaction Customers<b>");
                }
                getObj.put("peroftotal", df.format(((totalCust - totalActivecount) / totalCust) * 100));
                getObj.put("value", (totalCust - totalActivecount));
                newJSONArray.put(getObj);

                getObj = new JSONObject();
                if (isExport) {
                    getObj.put("acccode", "Total Customers");
                } else {
                    getObj.put("acccode", "<b>Total Customers<b>");
                }
                getObj.put("peroftotal", df.format(100));
                getObj.put("value", totalCust);
                newJSONArray.put(getObj);
                JSONObject jMeta = new JSONObject();
                JSONArray jarrColumns = new JSONArray();
                JSONArray jarrRecords = new JSONArray();
                HashMap<String, Object> params = new HashMap<>();
                params.put("companyid", companyid);
                params.put("locale", requestParams.get("locale"));
                createColumnModelForSalesAnalysisReport(jarrColumns, jarrRecords, params);


                // Column Model
                commData.put("success", true);
                commData.put("coldata", newJSONArray);
                commData.put("columns", jarrColumns);
                jMeta.put("totalProperty", "totalCount");
                jMeta.put("root", "coldata");
                commData.put("totalCount", newJSONArray.length());
                jMeta.put("fields", jarrRecords);
                commData.put("metaData", jMeta);
            }

            jobj.put("valid", true);
            if (isExport || isForChart) {
                jobj.put("data", newJSONArray);
            } else {
                jobj.put("data", commData);
            }
        } catch (Exception ex) {
            Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
        }
        return jobj;
    }
    
    // Function to generate the Data for top products
    @Override
    public JSONObject getSalesAnalysis_TopProducts_Report(JSONObject paramJobj) throws SessionExpiredException, ServiceException {
        JSONObject jobj = new JSONObject();
        JSONArray newJSONArray = new JSONArray();
        try {
            boolean isExport = paramJobj.optBoolean("isExport",false);
            boolean isForChart = paramJobj.optBoolean("isForChart",false);
            int countNumber = paramJobj.optInt("countNumber",10);
            HashMap requestParams = AccInvoiceServiceHandler.getInvoiceRequestMapJson(paramJobj);
            String companyid = paramJobj.optString(Constants.companyKey);
            String userid = paramJobj.optString(Constants.useridKey);
            requestParams.put(Constants.useridKey, userid);
            DecimalFormat df = new DecimalFormat("###0.00");
            ExtraCompanyPreferences extraPref = (ExtraCompanyPreferences) kwlCommonTablesDAOObj.getClassObject("com.krawler.common.admin.ExtraCompanyPreferences", companyid);
            if (extraPref != null && extraPref.isEnablesalespersonAgentFlow()) {
                int permCode = paramJobj.optInt(Constants.PermCode_Customer);
                if (!((permCode & Constants.CUSTOMER_VIEWALL_PERMCODE) == Constants.CUSTOMER_VIEWALL_PERMCODE)) {
                    /*
                     * when (permCode & Constants.CUSTOMER_VIEWALL_PERMCODE) ==
                     * Constants.CUSTOMER_VIEWALL_PERMCODE is true then user has
                     * permission to view all customers documents,so at that
                     * time there is need to filter record according to
                     * user&salesperson.
                     */
                    String userId = userid;
                    requestParams.put(Constants.useridKey, userId);
                    requestParams.put("enablesalespersonagentflow", extraPref.isEnablesalespersonAgentFlow());
                }
            }
            KwlReturnObject result = accInvoiceDAOobj.getSalesByCustomer(requestParams);
            List list = result.getEntityList();
            JSONObject jObj = getSalesByCustomerJson(paramJobj, list, true);
            JSONArray DataJArr = jObj.getJSONArray("data");
            JSONObject totalObj = DataJArr.getJSONObject(DataJArr.length() - 1);
            double totalAmount = totalObj.optDouble("amountinbase");

            JSONObject custArrayObj = new JSONObject();
            for (int cnt = 0; cnt < DataJArr.length() - 1; cnt++) {
                JSONObject custObj = DataJArr.getJSONObject(cnt);
                String productId = custObj.getString("productid");
                if (custArrayObj.has(productId)) {
                    JSONObject dataObj = custArrayObj.getJSONObject(productId);
                    dataObj.put("quantity", dataObj.optDouble("quantity") + custObj.optDouble("rowbaseuomquantity"));
                    dataObj.put("value", dataObj.optDouble("value") + custObj.optDouble("amountinbase"));
                } else {
                    JSONObject dataObj = new JSONObject();
                    dataObj.put("productId", productId);
                    dataObj.put("acccode", custObj.optString("rowproductid"));
                    dataObj.put("accname", custObj.optString("rowproductname"));
                    dataObj.put("quantity", custObj.optDouble("rowbaseuomquantity"));
                    dataObj.put("value", custObj.optDouble("amountinbase"));
                    custArrayObj.put(productId, dataObj);
                }
            }

            HashMap<String, Object> requestParams1 = new HashMap();
            requestParams1.put("companyid", companyid);
            KwlReturnObject custResult = accProductObj.getProductsIds(requestParams1);
            List<String> prodList = custResult.getEntityList();
            double totalProd = prodList.size();

            int count = 0;
            int totalActivecount = custArrayObj.length();
            double totalReportedSale = 0;
            double totalReportedQty = 0;
            double totalReportedPer = 0;
            Iterator itr = custArrayObj.keys();
            ArrayList<JSONObject> sortedpercent = new ArrayList<JSONObject>();
            while (itr.hasNext()) {
                JSONObject getObj = custArrayObj.getJSONObject(itr.next().toString());
                double peroftotal = 0;
                double value = getObj.optDouble("value");
                totalReportedSale += value;
                totalReportedQty += getObj.optDouble("quantity");
                peroftotal = (value / totalAmount) * 100;
                totalReportedPer += peroftotal;
                getObj.put("peroftotal", df.format(peroftotal));
                sortedpercent.add(getObj);
                count++;
                prodList.remove(getObj.optString("productId"));
            }
            Collections.sort(sortedpercent, new Comparator<JSONObject>() {

                public int compare(JSONObject J1, JSONObject J2) {
                    try {
                        if (J1.getDouble("peroftotal") < J2.getDouble("peroftotal")) {
                            return 1;
                        } else {
                            return -1;
                        }
                    } catch (JSONException ex) {
                        Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    return 0;
                }
            });

            ArrayList<JSONObject> sorted = new ArrayList<JSONObject>();
            if (countNumber < count) {
                totalReportedSale = 0;
                totalReportedQty = 0;
                totalReportedPer = 0;
                List SortedList = sortedpercent.subList(0, countNumber);
                Iterator it = SortedList.iterator();
                while (it.hasNext()) {
                    JSONObject perobj = (JSONObject) it.next();
                    double peroftotal = 0;
                    double value = perobj.optDouble("value");
                    totalReportedSale += value;
                    totalReportedQty += perobj.optDouble("quantity");
                    peroftotal = (value / totalAmount) * 100;
                    totalReportedPer += peroftotal;
                    perobj.put("peroftotal", df.format(peroftotal));
                    sorted.add(perobj);
                }
                count = countNumber;
                newJSONArray = (JSONArray) new JSONArray(sorted);
            } else {
                newJSONArray = (JSONArray) new JSONArray(sortedpercent);
            }
            
            // Column Model
            JSONObject commData = new JSONObject();
            if (!isForChart) {
                JSONObject getObj = new JSONObject();
                if (isExport) {
                    getObj.put("acccode", "Total of Reported Sales");
                } else {
                    getObj.put("acccode", "<b>Total of Reported Sales<b>");
                }
                getObj.put("quantity", totalReportedQty);
                getObj.put("peroftotal", df.format(totalReportedPer));
                getObj.put("value", totalReportedSale);
                newJSONArray.put(getObj);

                getObj = new JSONObject();
                if (isExport) {
                    getObj.put("acccode", "Total of Un-Reported Sales");
                } else {
                    getObj.put("acccode", "<b>Total of Un-Reported Sales<b>");
                }
                getObj.put("peroftotal", df.format(100 - totalReportedPer));
                getObj.put("value", totalAmount - totalReportedSale);
                newJSONArray.put(getObj);

                getObj = new JSONObject();
                if (isExport) {
                    getObj.put("acccode", "Gross Sales For the Period");
                } else {
                    getObj.put("acccode", "<b>Gross Sales For the Period<b>");
                }
                getObj.put("peroftotal", df.format(100));
                getObj.put("value", totalAmount);
                newJSONArray.put(getObj);

                getObj = new JSONObject();
                if (isExport) {
                    getObj.put("acccode", "Total Products Reported");
                } else {
                    getObj.put("acccode", "<b>Total Products Reported<b>");
                }
                getObj.put("peroftotal", df.format((count / totalProd) * 100));
                getObj.put("value", count);
                newJSONArray.put(getObj);

                getObj = new JSONObject();
                if (isExport) {
                    getObj.put("acccode", "Active Products Not Reported");
                } else {
                    getObj.put("acccode", "<b>Active Products Not Reported<b>");
                }
                getObj.put("peroftotal", df.format(((totalActivecount - count) / totalProd) * 100));
                getObj.put("value", (totalActivecount - count));
                newJSONArray.put(getObj);

                getObj = new JSONObject();
                if (isExport) {
                    getObj.put("acccode", "Zero-Moved Products");
                } else {
                    getObj.put("acccode", "<b>Zero-Moved Products<b>");
                }
                getObj.put("peroftotal", df.format(((totalProd - totalActivecount) / totalProd) * 100));
                getObj.put("value", (totalProd - totalActivecount));
                newJSONArray.put(getObj);

                getObj = new JSONObject();
                if (isExport) {
                    getObj.put("acccode", "Total Products");
                } else {
                    getObj.put("acccode", "<b>Total Products<b>");
                }
                getObj.put("peroftotal", df.format(100));
                getObj.put("value", totalProd);
                newJSONArray.put(getObj);

                JSONObject jMeta = new JSONObject();
                JSONArray jarrColumns = new JSONArray();
                JSONArray jarrRecords = new JSONArray();
                HashMap<String, Object> params = new HashMap<>();
                params.put("companyid", companyid);
                params.put("locale", requestParams.get("locale"));
                createColumnModelForSalesAnalysisReport(jarrColumns, jarrRecords, params);


                // Column Model
                commData.put("success", true);
                commData.put("coldata", newJSONArray);
                commData.put("columns", jarrColumns);
                jMeta.put("totalProperty", "totalCount");
                jMeta.put("root", "coldata");
                commData.put("totalCount", newJSONArray.length());
                jMeta.put("fields", jarrRecords);
                commData.put("metaData", jMeta);
            }

            jobj.put("valid", true);
            if (isExport || isForChart) {
                jobj.put("data", newJSONArray);
            } else {
                jobj.put("data", commData);
            }
        } catch (Exception ex) {
            Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
        }
        return jobj;
    }
    
    @Override
    public JSONObject getSalesAnalysis_TopAgents_Report(JSONObject paramJobj) throws SessionExpiredException, ServiceException{
    JSONObject jobj = new JSONObject();
        JSONArray newJSONArray = new JSONArray();
        try {
            int countNumber = paramJobj.optInt("countNumber",10);
            boolean isExport = paramJobj.optBoolean("isExport",false);
            boolean isForChart = paramJobj.optBoolean("isForChart",false);
            HashMap requestParams = AccInvoiceServiceHandler.getInvoiceRequestMapJson(paramJobj);
            String companyid = paramJobj.optString(Constants.companyKey);
            String userid = paramJobj.optString(Constants.useridKey);
            requestParams.put("userid",userid);
            ExtraCompanyPreferences extraPref = (ExtraCompanyPreferences) kwlCommonTablesDAOObj.getClassObject("com.krawler.common.admin.ExtraCompanyPreferences", companyid);
            DecimalFormat df = new DecimalFormat("###0.00");
            if (extraPref != null && extraPref.isEnablesalespersonAgentFlow()) {
                int permCode = paramJobj.optInt(Constants.PermCode_Customer);
                if (!((permCode & Constants.CUSTOMER_VIEWALL_PERMCODE) == Constants.CUSTOMER_VIEWALL_PERMCODE)) {
                    /*
                     * when (permCode & Constants.CUSTOMER_VIEWALL_PERMCODE) == Constants.CUSTOMER_VIEWALL_PERMCODE is true then user has permission to view all customers documents,so at that time there is need to filter record according to user&salesperson. 
                     */
                    String userId = userid;
                    requestParams.put(Constants.useridKey, userId);
                    requestParams.put("enablesalespersonagentflow", extraPref.isEnablesalespersonAgentFlow());
                }
                Map<String, Object> salesPersonParams = new HashMap<>();
     
                salesPersonParams.put(Constants.useridKey, userid);
                salesPersonParams.put(Constants.companyKey, companyid);
                salesPersonParams.put("grID", "15");
                KwlReturnObject masterItemByUserList = accountingHandlerDAOobj.getMasterItemByUserID(salesPersonParams);
                List<MasterItem> masterItems = masterItemByUserList.getEntityList();
                String salesPersons = "";
                StringBuffer salesPersonids = new StringBuffer();
                for (Object obj : masterItems) {
                    if (obj != null) {
                        salesPersonids.append(obj.toString() + ",");
                    }
                }
                if (salesPersonids.length() > 0) {
                    salesPersons = salesPersonids.substring(0, (salesPersonids.length() - 1));
                    requestParams.put("salesPersonid", salesPersons);
                }
            }
            KwlReturnObject result = accInvoiceDAOobj.getSalesByCustomer(requestParams);
            List list = result.getEntityList();
            JSONObject jObj = getSalesByCustomerJson(paramJobj, list, true);
            JSONArray DataJArr  = jObj.getJSONArray("data");
            JSONObject totalObj = DataJArr.getJSONObject(DataJArr.length()-1);
            double totalAmount = totalObj.optDouble("amountinbase");

            JSONObject custArrayObj = new JSONObject();
            for (int cnt = 0; cnt < DataJArr.length() - 1; cnt++) {
                JSONObject custObj = DataJArr.getJSONObject(cnt);
                String agentId = custObj.getString("salesPerson");
                if (custArrayObj.has(agentId)) {
                    JSONObject dataObj = custArrayObj.getJSONObject(agentId);
                    dataObj.put("quantity", dataObj.optDouble("quantity") + custObj.optDouble("rowbaseuomquantity"));
                    dataObj.put("value", dataObj.optDouble("value") + custObj.optDouble("amountinbase"));
                } else if(!StringUtil.isNullOrEmpty(agentId)) {
                    JSONObject dataObj = new JSONObject();
                    dataObj.put("productId",agentId);
                    dataObj.put("acccode", custObj.optString("agentcode"));
                    dataObj.put("accname", custObj.optString("salespersonname"));
                    dataObj.put("quantity", custObj.optDouble("rowbaseuomquantity"));
                    dataObj.put("value", custObj.optDouble("amountinbase"));
                    custArrayObj.put(agentId, dataObj);
                }
            }
            
            Map<String, Object> salesPersonParams = new HashMap<>();
//            salesPersonParams.put(Constants.useridKey, userid);
            salesPersonParams.put(Constants.companyKey, companyid);
            salesPersonParams.put("grID", "15");
            KwlReturnObject masterItemByUserList = accountingHandlerDAOobj.getMasterItemByUserID(salesPersonParams);
            List<String> salesPersonList = masterItemByUserList.getEntityList();

            double totalSP = salesPersonList.size();
            
            int count = 0;
            int totalActivecount=custArrayObj.length();
            double totalReportedSale = 0;
            double totalReportedQty = 0;
            double totalReportedPer = 0;
            Iterator itr = custArrayObj.keys();
            ArrayList<JSONObject> sortedpercent=new ArrayList<JSONObject>();
            while (itr.hasNext()) {
                JSONObject getObj = custArrayObj.getJSONObject(itr.next().toString());
                double peroftotal = 0;
                double value = getObj.optDouble("value");
                totalReportedSale += value;
                totalReportedQty += getObj.optDouble("quantity");
                peroftotal = (value / totalAmount) * 100;
                totalReportedPer += peroftotal;
                getObj.put("peroftotal",df.format(peroftotal));
                sortedpercent.add(getObj);
                count++;
                salesPersonList.remove(getObj.optString("agentId"));
            }
            Collections.sort(sortedpercent, new Comparator<JSONObject>() {
                public int compare(JSONObject J1, JSONObject J2) {
                    try {
                        if(J1.getDouble("peroftotal") < J2.getDouble("peroftotal")){
                            return 1;
                        }else{
                            return -1;
                        }
                    } catch (JSONException ex) {
                        Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
                    }
                        return 0;
                }
            });
            ArrayList<JSONObject> sorted=new ArrayList<JSONObject>();
            if(countNumber < count){
                totalReportedSale = 0;
                totalReportedQty = 0;
                totalReportedPer = 0;
                List SortedList=sortedpercent.subList(0, countNumber);
                Iterator it = SortedList.iterator(); 
                while (it.hasNext()) {
                    JSONObject perobj = (JSONObject) it.next();
                    double peroftotal = 0;
                    double value = perobj.optDouble("value");
                    totalReportedSale += value;
                    totalReportedQty += perobj.optDouble("quantity");
                    peroftotal = (value / totalAmount) * 100;
                    totalReportedPer += peroftotal;
                    perobj.put("peroftotal", df.format(peroftotal));
                    sorted.add(perobj);
                }
                count = countNumber;
                newJSONArray=(JSONArray) new JSONArray(sorted);
            }else{
                newJSONArray=(JSONArray) new JSONArray(sortedpercent);
            }
            
            JSONObject commData = new JSONObject();
            if (!isForChart) {
                JSONObject getObj = new JSONObject();
                if (isExport) {
                    getObj.put("acccode", "Total of Reported Sales");
                } else {
                    getObj.put("acccode", "<b>Total of Reported Sales<b>");
                }
                getObj.put("quantity", totalReportedQty);
                getObj.put("peroftotal", df.format(totalReportedPer));
                getObj.put("value", totalReportedSale);
                newJSONArray.put(getObj);

                getObj = new JSONObject();
                if (isExport) {
                    getObj.put("acccode", "Total of Un-Reported Sales");
                } else {
                    getObj.put("acccode", "<b>Total of Un-Reported Sales<b>");
                }
                getObj.put("peroftotal", df.format(100 - totalReportedPer));
                getObj.put("value", totalAmount - totalReportedSale);
                newJSONArray.put(getObj);

                getObj = new JSONObject();
                if (isExport) {
                    getObj.put("acccode", "Gross Sales For the Period");
                } else {
                    getObj.put("acccode", "<b>Gross Sales For the Period<b>");
                }
                getObj.put("peroftotal", df.format(100));
                getObj.put("value", totalAmount);
                newJSONArray.put(getObj);

                getObj = new JSONObject();
                if (isExport) {
                    getObj.put("acccode", "Total Sales Persons Reported");
                } else {
                    getObj.put("acccode", "<b>Total Sales Persons Reported<b>");
                }
                if (totalSP != 0) {
                    getObj.put("peroftotal", df.format((count / totalSP) * 100));
                } else {
                    getObj.put("peroftotal", 0);
                }
                getObj.put("value", count);
                newJSONArray.put(getObj);

                getObj = new JSONObject();
                if (isExport) {
                    getObj.put("acccode", "Active Sales Persons Not Reported");
                } else {
                    getObj.put("acccode", "<b>Active Sales Persons Not Reported<b>");
                }
                if (totalSP != 0) {
                    getObj.put("peroftotal", df.format(((totalActivecount - count) / totalSP) * 100));
                } else {
                    getObj.put("peroftotal", 0);
                }
                getObj.put("value", (totalActivecount - count));
                newJSONArray.put(getObj);

                getObj = new JSONObject();
                if (isExport) {
                    getObj.put("acccode", "Zero Transaction Sales Persons");
                } else {
                    getObj.put("acccode", "<b>Zero Transaction Sales Persons<b>");
                }
                if (totalSP != 0) {
                    getObj.put("peroftotal", df.format(((totalSP - totalActivecount) / totalSP) * 100));
                } else {
                    getObj.put("peroftotal", 0);
                }
                getObj.put("value", (totalSP - totalActivecount));
                newJSONArray.put(getObj);

                getObj = new JSONObject();
                if (isExport) {
                    getObj.put("acccode", "Total Sales Persons");
                } else {
                    getObj.put("acccode", "<b>Total Sales Persons<b>");
                }
                getObj.put("peroftotal", df.format(100));
                getObj.put("value", totalSP);
                newJSONArray.put(getObj);

                // Column Model
                JSONObject jMeta = new JSONObject();
                JSONArray jarrColumns = new JSONArray();
                JSONArray jarrRecords = new JSONArray();
                HashMap<String, Object> params = new HashMap<>();
                params.put(Constants.companyKey, companyid);
                params.put("locale", requestParams.get("locale"));
                createColumnModelForSalesAnalysisReport(jarrColumns, jarrRecords, params);

                // Column Model
                commData.put("success", true);
                commData.put("coldata", newJSONArray);
                commData.put("columns", jarrColumns);
                jMeta.put("totalProperty", "totalCount");
                jMeta.put("root", "coldata");
                commData.put("totalCount", newJSONArray.length());
                jMeta.put("fields", jarrRecords);
                commData.put("metaData", jMeta);
            }

            jobj.put("valid", true);
            if (isExport) {
                jobj.put("data", newJSONArray);
            } else {
                jobj.put("data", commData);
            }
        } catch (Exception ex) {
            Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
        }
        return jobj;
    }
    
    public void createColumnModelForSalesAnalysisReport(JSONArray jarrColumns, JSONArray jarrRecords, HashMap<String, Object> params) throws JSONException, ServiceException {
        //put the Records
        JSONObject jobjTemp = new JSONObject();
        jobjTemp.put("name", "acccode");
        jarrRecords.put(jobjTemp);

        jobjTemp = new JSONObject();
        jobjTemp.put("name", "accname");
        jarrRecords.put(jobjTemp);

        jobjTemp = new JSONObject();
        jobjTemp.put("name", "acccode");
        jarrRecords.put(jobjTemp);

        jobjTemp = new JSONObject();
        jobjTemp.put("name", "quantity");
        jarrRecords.put(jobjTemp);

        jobjTemp = new JSONObject();
        jobjTemp.put("name", "value");
        jarrRecords.put(jobjTemp);

        jobjTemp = new JSONObject();
        jobjTemp.put("name", "peroftotal");
        jarrRecords.put(jobjTemp);
    }
    
    @Override
    public JSONObject getSalesByCustomerJson(JSONObject paramJobj, List list, boolean isSalesAnalysis) throws SessionExpiredException, ServiceException {
        JSONObject jobj = new JSONObject();
        JSONArray jArr = new JSONArray();
        try {
            HashMap requestParams = AccInvoiceServiceHandler.getInvoiceRequestMapJson(paramJobj);
            DateFormat df = authHandler.getDateOnlyFormat();
            String companyid = paramJobj.optString(Constants.companyKey);
            boolean isFixedAsset = Boolean.FALSE.parseBoolean(paramJobj.optString(Constants.isFixedAsset));
            boolean isConsignment=(StringUtil.isNullOrEmpty(paramJobj.optString(Constants.isConsignment)))?false:Boolean.parseBoolean(paramJobj.optString(Constants.isConsignment));
            boolean isExport = paramJobj.optBoolean(Constants.isExport);
            double totalAmountWithTax = 0;
            double totalAmountWithoutTax = 0;
            String transactionSelection = StringUtil.isNullOrEmpty(paramJobj.optString("transactionSelection"))?InvoiceConstants.InvoicesOnly:paramJobj.optString("transactionSelection");
            int totalCount=list.size();
            KwlReturnObject cap = accountingHandlerDAOobj.getObject(CompanyAccountPreferences.class.getName(), companyid);
            KwlReturnObject curresult = accountingHandlerDAOobj.getObject(KWLCurrency.class.getName(), paramJobj.optString(Constants.currencyKey));
            KWLCurrency currency = (KWLCurrency) curresult.getEntityList().get(0);
            CompanyAccountPreferences pref = (CompanyAccountPreferences) cap.getEntityList().get(0);
            String cashAccount = pref.getCashAccount().getID();
            Iterator itr = list.iterator();
            while (itr.hasNext()) {
                Object[] oj = (Object[]) itr.next();
                String invid = oj[0].toString();

                KwlReturnObject objItr = accountingHandlerDAOobj.getObject(Invoice.class.getName(), invid);
                Invoice invoice = (Invoice) objItr.getEntityList().get(0);

                JournalEntry je = invoice.getJournalEntry();
                String currencyid = (invoice.getCurrency() == null ? currency.getCurrencyID() : invoice.getCurrency().getCurrencyID());

                JSONObject obj = new JSONObject();
                obj.put(Constants.billid, invoice.getID());                
                obj.put("customercode", invoice.getCustomer() == null ? "" : invoice.getCustomer().getAcccode());
                obj.put("customername", invoice.getCustomer() == null ? "" : invoice.getCustomer().getName());
                obj.put(Constants.customerid, invoice.getCustomer() == null ? "" : invoice.getCustomer().getID());
                obj.put("personname", invoice.getCustomer() == null ? "" : invoice.getCustomer().getName());
                obj.put("personid", invoice.getCustomer() == null ? "" : invoice.getCustomer().getID());
                obj.put(Constants.SEQUENCEFORMATID, invoice.getSeqformat() == null ? "" : invoice.getSeqformat().getID());
                obj.put("porefno", invoice.getPoRefNumber() == null ? "" : invoice.getPoRefNumber());
                obj.put("journalentryid", (je != null ? je.getID() : ""));
                obj.put("costcenterid", (je != null ? je.getCostcenter() == null ? "" : je.getCostcenter().getID() : ""));
                obj.put("costcenterName", (je != null ? je.getCostcenter() == null ? "" : je.getCostcenter().getName() : ""));
                obj.put("lasteditedby", invoice.getModifiedby() == null ? "" : (invoice.getModifiedby().getFirstName() + " " + invoice.getModifiedby().getLastName()));
                obj.put("deliveryTime", invoice.getDeliveryTime() == null ? "" : invoice.getDeliveryTime());
                obj.put("shipdate", invoice.getShipDate() == null ? "" : df.format(invoice.getShipDate()));
                obj.put("termid", invoice.getTermid() == null ? "" : invoice.getTermid().getID());
                obj.put("duedate", invoice.getDueDate() == null ? "" : df.format(invoice.getDueDate()));
                obj.put("memo", invoice.getMemo() == null ? "" : invoice.getMemo());
                obj.put("shipvia", invoice.getShipvia() == null ? "" : invoice.getShipvia());
                obj.put("fob", invoice.getFob() == null ? "" : invoice.getFob());
                obj.put("externalcurrencyrate", (je != null ? je.getExternalCurrencyRate() : 0));
                boolean includeprotax = false;
                double rowTaxAmt = 0d;
                double taxAmt = 0d;
                if (invoice.getTaxEntry() != null) {// if Invoice Level Tax is available
                    taxAmt = invoice.getTaxEntry() == null ? 0 : invoice.getTaxEntry().getAmount();
                }
                Set<InvoiceDetail> invoiceDetails = invoice.getRows();
                for (InvoiceDetail invoiceDetail : invoiceDetails) {
                    if (invoiceDetail.getTax() != null) {
                        includeprotax = true;
                        rowTaxAmt += invoiceDetail.getRowTaxAmount()+invoiceDetail.getRowTermTaxAmount();
                    }
                }
                taxAmt += rowTaxAmt;// either row level tax will be avvailable or invoice level
                obj.put("taxamount", taxAmt);
                obj.put("includeprotax", includeprotax);
                obj.put("taxincluded", invoice.getTax() != null);
                obj.put("taxid", invoice.getTax() == null ? "" : invoice.getTax().getID());
                obj.put("taxname", invoice.getTax() == null ? "" : invoice.getTax().getName());
                obj.put("partialinv", invoice.isPartialinv());
                obj.put("salesPerson", invoice.getMasterSalesPerson() == null ? "" : invoice.getMasterSalesPerson().getID());
                obj.put("agentcode", invoice.getMasterSalesPerson() == null ? "" : invoice.getMasterSalesPerson().getCode());
                obj.put("salespersonname", invoice.getMasterSalesPerson() == null ? "" : invoice.getMasterSalesPerson().getValue());
                obj.put("billno", invoice.getInvoiceNumber());
                obj.put(Constants.currencyKey, currencyid);
                obj.put("billtoaddress", invoice.getBillingShippingAddresses() == null ? "" : CommonFunctions.getBillingShippingAddress(invoice.getBillingShippingAddresses(), true));
                obj.put("shiptoaddress", invoice.getBillingShippingAddresses() == null ? "" : CommonFunctions.getBillingShippingAddress(invoice.getBillingShippingAddresses(), false));
                obj.put("currencysymbol", (invoice.getCurrency() == null ? currency.getSymbol() : invoice.getCurrency().getSymbol()));
                obj.put("currencycode", (invoice.getCurrency() == null ? currency.getCurrencyCode() : invoice.getCurrency().getCurrencyCode()));
//                KwlReturnObject bAmt = accCurrencyDAOobj.getBaseToCurrencyAmount(requestParams, 1.0, currencyid, je.getEntryDate(), 0);
                KwlReturnObject bAmt = accCurrencyDAOobj.getBaseToCurrencyAmount(requestParams, 1.0, currencyid, invoice.getCreationDate(), 0);
                obj.put("oldcurrencyrate", (Double) bAmt.getEntityList().get(0));
//                obj.put("date", df.format(je.getEntryDate()));
                obj.put("date", df.format(invoice.getCreationDate()));
                JournalEntryDetail d = invoice.getCustomerEntry();
                Account account = d.getAccount();
                if (account.getID().equals(cashAccount)) {
                    obj.put("incash", true);
                } else {
                    obj.put("incash", false);
                }
                BillingShippingAddresses addresses = invoice.getBillingShippingAddresses();
                AccountingAddressManager.getTransactionAddressJSON(obj, addresses, false);
                JournalEntryDetail invoiceTaxEntry=invoice.getTaxEntry();          
                /*
                 * For Product search, add Products details from Invoice details
                 */

                    String idvString = !StringUtil.isNullOrEmpty(oj[3].toString()) ?oj[3].toString(): ""; //as in list invoiedetail id comes 4th
                    KwlReturnObject objItrID = accountingHandlerDAOobj.getObject(InvoiceDetail.class.getName(), idvString);
                    InvoiceDetail idvObj = (InvoiceDetail) objItrID.getEntityList().get(0);
                    JSONObject obj1 = new JSONObject();
                    if (idvObj != null) {
                        obj.put("rowproductname", idvObj.getInventory().getProduct().getName());
                        obj.put("rowproductid", idvObj.getInventory().getProduct().getProductid());
                        obj.put("productid", idvObj.getInventory().getProduct().getID());
                        obj.put("rowproductdescription", StringUtil.isNullOrEmpty(idvObj.getDescription()) ? "" : StringUtil.DecodeText(idvObj.getDescription()));
    //                        double quantity = idvObj.getInventory().isInvrecord() ? idvObj.getInventory().getQuantity() : idvObj.getInventory().getActquantity();
                        double quantity = idvObj.getInventory().getQuantity();
                        double baseumrate = 1;
                        baseumrate = idvObj.getInventory().getBaseuomrate();
                        obj.put("rowquantity", authHandler.formattedQuantity(quantity, companyid)); //To show quantity with four decimal point in PDF & Print
                        obj.put("rowbaseuomquantity", authHandler.calculateBaseUOMQuatity(quantity, baseumrate, companyid));
                        obj.put("rowrate", idvObj.getRate());
                        HashMap amthm = accInvoiceCommon.getInvoiceProductAmount(idvObj.getInvoice());
                        Object[] val = (Object[]) amthm.get(idvObj);
                        double amount = authHandler.round((Double) val[0], companyid); // authHandler.round(quantity * idvObj.getRate(), Constants.AMOUNT_DIGIT_AFTER_DECIMAL); 
                        obj.put("amount", amount);
                        double amountWithoutTax = authHandler.round((Double) val[3], companyid);
//                        double amountInBase = (Double) accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, amountWithoutTax, currencyid, idvObj.getInvoice().getJournalEntry().getEntryDate(), idvObj.getInvoice().getExternalCurrencyRate()).getEntityList().get(0);
                        double amountInBase = (Double) accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, amountWithoutTax, currencyid, idvObj.getInvoice().getCreationDate(), idvObj.getInvoice().getExternalCurrencyRate()).getEntityList().get(0);
                        obj.put("amountinbase", amountInBase);

                        
                        double rowTaxPercent = 0;
                        double rowTaxAmount = 0;
                        boolean isRowTaxApplicable = false;
                        if (idvObj.getTax() != null) {
//                            KwlReturnObject perresult = accTaxObj.getTaxPercent(companyid, invoice.getJournalEntry().getEntryDate(), idvObj.getTax().getID());
                            KwlReturnObject perresult = accTaxObj.getTaxPercent(companyid, invoice.getCreationDate(), idvObj.getTax().getID());
                            rowTaxPercent = (Double) perresult.getEntityList().get(0);
                            isRowTaxApplicable = (Boolean) perresult.getEntityList().get(1);
                        }
                        obj.put("rowprtaxpercent", rowTaxPercent);
                        if (idvObj.isWasRowTaxFieldEditable()) { //After made row tax field editable tax calculation will be take place according to row tax amount. -From DATE - 28 -Jan-2014
                            if (isRowTaxApplicable) {
//                                rowTaxAmount = (Double) accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, (idvObj.getRowTaxAmount()+idvObj.getRowTermTaxAmount()), currencyid, idvObj.getInvoice().getJournalEntry().getEntryDate(), idvObj.getInvoice().getExternalCurrencyRate()).getEntityList().get(0);;
                                rowTaxAmount = (Double) accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, (idvObj.getRowTaxAmount()+idvObj.getRowTermTaxAmount()), currencyid, idvObj.getInvoice().getCreationDate(), idvObj.getInvoice().getExternalCurrencyRate()).getEntityList().get(0);;

                            }
                        } else {// for earlier invoices it will be done according to row tax percent as selected in Tax combo column.
                            rowTaxAmount = amountInBase * rowTaxPercent / 100;
                        }

                        if (rowTaxPercent > 0) {
                            obj.put("amountinbasewithtax", amountInBase + (rowTaxAmount));//obj.put("amountinbasewithtax", amountInBase + (amountInBase * rowTaxPercent/100));
                        } else {
                            obj.put("amountinbasewithtax", amountInBase);
                        }
                        
                        double rowTermAmountInBase = (Double) accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, idvObj.getRowTermAmount(), currencyid, idvObj.getInvoice().getJournalEntry().getEntryDate(), idvObj.getInvoice().getExternalCurrencyRate()).getEntityList().get(0);
                        if (rowTermAmountInBase > 0) {
                            obj.put("amountinbasewithtax", amountInBase + rowTermAmountInBase);  //SDP-12296
                        }
                        
                        // For Calculating margin
                        double purchaseCost = 0;
                        // Calculating purchase cost in Product currency
                        KwlReturnObject rateResult = accProductObj.getProductPrice(idvObj.getInventory().getProduct().getID(), true, new Date(), "", idvObj.getInventory().getProduct().getCurrency().getCurrencyID());
                        Object rateObj = rateResult.getEntityList().get(0); 
                        if (rateObj != null) {
                            purchaseCost = quantity * (Double) rateObj;
                        }
                        // Calculating Product purchase price in base currency
                        double purchaseCostInBase = (Double) accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, purchaseCost, idvObj.getInventory().getProduct().getCurrency().getCurrencyID(), new Date(), 0).getEntityList().get(0);
                        purchaseCostInBase = authHandler.round(purchaseCostInBase, companyid);
                        double salesAmount = quantity * idvObj.getRate();
                        // Calculating Product Sales price in base currency
                        double salesAmountInBase = (quantity * idvObj.getRate()) / idvObj.getInvoice().getJournalEntry().getExternalCurrencyRate();
                        salesAmountInBase = authHandler.round(salesAmountInBase, companyid);
                        double margin = salesAmountInBase - purchaseCostInBase;
                        // calculating margin in percentages.
                        double marginPercentage = (purchaseCostInBase == 0) ? (margin != 0 ? 100 : 0) : ((margin / salesAmountInBase) * 100);
                        if (!StringUtil.isNullOrEmpty(paramJobj.optString("userMarginPercentage"))) {
                            double userMarginPercentage = (StringUtil.isNullOrEmpty(paramJobj.optString("userMarginPercentage"))) ? 0 : Double.parseDouble(paramJobj.optString("userMarginPercentage"));
                            if (marginPercentage <= userMarginPercentage) {
                                obj.put("isLessMargin", true);
                            } else {
                                obj.put("isLessMargin", false);
                            }
                        }
                        obj.put("profitmargin", authHandler.formattedAmount(margin, companyid));
                        obj.put("percentmargin", authHandler.formattedAmount(marginPercentage, companyid));
                        obj.put("isReturnTransaction", false);
                        // Invoices with Sales Return with auto Credit Note : Start
                        if (transactionSelection.equalsIgnoreCase(InvoiceConstants.InvoicesWithSRandCN)) {
                            HashMap<String, Object> reqParams = new HashMap();
                            reqParams.put(Constants.companyKey, companyid);
                            reqParams.put("isNoteAlso", true);
                            reqParams.put("invoicedetailid", idvObj.getID());
                            KwlReturnObject idresult = accInvoiceDAOobj.getSalesReturnDetailsByInvoiceDetails(reqParams);
                            List<SalesReturnDetail> list1= idresult.getEntityList();
                            SalesReturnDetail srDet = (list1!=null && !list1.isEmpty() && list1.size()>0)?list1.get(0):null;
                            if(srDet!=null){
                            double qua = 0;
//                            for (SalesReturnDetail srDet : list1) {
                                SalesReturn salesReturn=srDet.getSalesReturn();
                                CreditNote creditNote=null;
                                if(salesReturn.isIsNoteAlso()){
                                    KwlReturnObject creditnoteresult = accCreditNoteDAOobj.getCreditNoteIdFromSRId(salesReturn.getID(), companyid);
                                    if (!creditnoteresult.getEntityList().isEmpty()) {
                                        creditNote = (CreditNote) creditnoteresult.getEntityList().get(0);
                                    }
                                }
                                JournalEntry jeObj = creditNote.getJournalEntry();
                                String transCurrencyId =  salesReturn.getCurrency().getCurrencyID();
                                obj1.put(Constants.billid, salesReturn.getID());
                                obj1.put("customername", salesReturn.getCustomer() == null ? "" : salesReturn.getCustomer().getName());
                                obj1.put(Constants.customerid, salesReturn.getCustomer() == null ? "" : salesReturn.getCustomer().getID());
                                obj1.put("personname", salesReturn.getCustomer() == null ? "" : salesReturn.getCustomer().getName());
                                obj1.put("personid", salesReturn.getCustomer() == null ? "" : salesReturn.getCustomer().getID());
                                obj1.put(Constants.SEQUENCEFORMATID, salesReturn.getSeqformat() == null ? "" : salesReturn.getSeqformat().getID());
                    
                                boolean includeprotaxSR = false;
                                double srrowTaxAmt = 0d;
                                double srtaxAmt = 0d;
                                if (invoice.getTaxEntry() != null) {// if Invoice Level Tax is available
                                    srtaxAmt = invoice.getTaxEntry() == null ? 0 : invoice.getTaxEntry().getAmount();
                                }
                                if (srDet.getTax() != null) {
                                    includeprotax = true;
                                    srrowTaxAmt += srDet.getRowTaxAmount();
                                }
                                srtaxAmt += srrowTaxAmt;// either row level tax will be avvailable or invoice level
                                obj1.put("taxamount", srtaxAmt);
                                obj1.put("includeprotax", includeprotaxSR);
                                obj1.put("taxincluded", salesReturn.getTax() != null);
                                obj1.put("taxid", salesReturn.getTax() == null ? "" : salesReturn.getTax().getID());
                                obj1.put("taxname", salesReturn.getTax() == null ? "" : salesReturn.getTax().getName());
                                obj1.put("salesPerson", salesReturn.getSalesperson() == null ? "" : salesReturn.getSalesperson().getID());
                                obj1.put("salespersonname", salesReturn.getSalesperson() == null ? "" : salesReturn.getSalesperson().getValue());
                                obj1.put("billno", salesReturn.getSalesReturnNumber());
                                obj1.put(Constants.currencyKey, transCurrencyId);
                                obj1.put("currencysymbol", (salesReturn.getCurrency() == null ? currency.getSymbol() : salesReturn.getCurrency().getSymbol()));
                                obj1.put("currencycode", (salesReturn.getCurrency() == null ? currency.getCurrencyCode() : salesReturn.getCurrency().getCurrencyCode()));
//                                KwlReturnObject bAmtCN = accCurrencyDAOobj.getBaseToCurrencyAmount(requestParams, 1.0, transCurrencyId, jeObj.getEntryDate(), 0);
                                KwlReturnObject bAmtCN = accCurrencyDAOobj.getBaseToCurrencyAmount(requestParams, 1.0, transCurrencyId, creditNote.getCreationDate(), 0);
                                obj1.put("oldcurrencyrate", (Double) bAmtCN.getEntityList().get(0));
                                obj1.put("date", df.format(salesReturn.getOrderDate()));
                                JournalEntryDetail cnJED = creditNote.getCustomerEntry();
                                Account cnAccount = cnJED.getAccount();
                                if (cnAccount.getID().equals(cashAccount)) {
                                    obj1.put("incash", true);
                                } else {
                                    obj1.put("incash", false);
                                }
                                
                                qua += srDet.getInventory().getQuantity();
                                
                                obj1.put("rowproductname", srDet.getProduct().getName());
                                obj1.put("rowproductid", srDet.getProduct().getProductid());
                                obj1.put("rowproductdescription", StringUtil.isNullOrEmpty(srDet.getDescription()) ? "" : srDet.getDescription());
    //                        double quantity = idvObj.getInventory().isInvrecord() ? idvObj.getInventory().getQuantity() : idvObj.getInventory().getActquantity();
                                double retQuantity = srDet.getReturnQuantity();
                                double retbaseumrate = 1;
                                retbaseumrate = srDet.getInventory().getBaseuomrate();
                                double prRate=srDet.getRate();
                                
                                obj1.put("rowquantity", authHandler.formattedQuantity(retQuantity, companyid)); //To show quantity with four decimal point in PDF & Print
                                obj.put("rowbaseuomquantity", authHandler.calculateBaseUOMQuatity(retQuantity, retbaseumrate, companyid));
                                obj1.put("rowrate", prRate);
                                double sramountWithoutTax=(retQuantity*prRate);
                                double disc=srDet.getDiscountispercent()==1?(sramountWithoutTax*(srDet.getDiscount()/100)):srDet.getDiscount();
                                double srdamount = authHandler.round((sramountWithoutTax-disc)+srrowTaxAmt, companyid); // authHandler.round(quantity * idvObj.getRate(), Constants.AMOUNT_DIGIT_AFTER_DECIMAL); 
                                obj1.put("amount", srdamount);
                                sramountWithoutTax = authHandler.round((sramountWithoutTax-disc), companyid);
                                double sramountInBase = (Double) accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, sramountWithoutTax, transCurrencyId, salesReturn.getOrderDate(), salesReturn.getExternalCurrencyRate()).getEntityList().get(0);
                                obj1.put("amountinbase", -sramountInBase);


                                double srrowTaxPercent = 0;
                                double srrowTaxAmount = 0;
                                if (srDet.getTax() != null) { // For product level tax
                                    KwlReturnObject perresult = accTaxObj.getTaxPercent(companyid, salesReturn.getOrderDate(), srDet.getTax().getID());
                                    srrowTaxPercent = (Double) perresult.getEntityList().get(0);
                                    obj1.put("rowprtaxpercent", srrowTaxPercent);
                                }else if(salesReturn.getTax()!=null){ // For Global Tax 
                                    KwlReturnObject perresult = accTaxObj.getTaxPercent(companyid, salesReturn.getOrderDate(), salesReturn.getTax().getID());
                                    srrowTaxPercent = (Double) perresult.getEntityList().get(0);
                                    obj1.put("rowprtaxpercent", 0);
                                }
                                
                                srrowTaxAmount = sramountInBase * srrowTaxPercent / 100;

                                if (srrowTaxPercent > 0) {
                                    obj1.put("amountinbasewithtax", -(sramountInBase + srrowTaxAmount));//obj.put("amountinbasewithtax", amountInBase + (amountInBase * rowTaxPercent/100));
                                } else {
                                    obj1.put("amountinbasewithtax", -sramountInBase);
                                }
                                obj1.put("isLessMargin", false);
                                obj1.put("profitmargin", 0);
                                obj1.put("percentmargin", 0);
                                obj1.put("isReturnTransaction", true);
                                if (isExport) {
                                    totalAmountWithTax += obj1.optDouble("amountinbase", 0);
                                    totalAmountWithoutTax += obj1.optDouble("amountinbasewithtax", 0);
                                }
                                jArr.put(obj1);
                            }
                        }
                        // Invoices with Sales Return with auto Credit Note : End
                    }
                requestParams.put("taxtype", 2);
                double percent=0.0;
                KwlReturnObject result = accTaxObj.getTax(requestParams);
                List<Object[]> listTax = result.getEntityList();
                
                if(listTax!=null && ! listTax.isEmpty()){
                 for(Object[] row :listTax){                
                    if(row[2]==null)continue;
                    Tax tax = (Tax) row[0];
                    if(invoice.getTax()!=null?tax.getID().equals(invoice.getTax().getID()):false){
                     percent=(Double)row[1];
                    };
                }
            }
                    
                    
                  if(invoiceTaxEntry!=null){
                      double amountInBaseWithInLineTax=obj.getDouble("amountinbasewithtax");
                      double amount=obj.getDouble("amountinbasewithtax");
//                      double taxAmount=invoiceTaxEntry.getAmount();
//                      double taxAmountInBase = (Double)accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams,taxAmount,currencyid,invoice.getJournalEntry().getEntryDate(),invoice.getExternalCurrencyRate()).getEntityList().get(0);
                      double taxAmount=amount*percent/100;
//                      double taxAmountInBase = (Double)accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams,taxAmount,currencyid,invoice.getJournalEntry().getEntryDate(),invoice.getExternalCurrencyRate()).getEntityList().get(0);
                      double taxAmountInBase = (Double)accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams,taxAmount,currencyid,invoice.getCreationDate(),invoice.getExternalCurrencyRate()).getEntityList().get(0);
                      if(taxAmount > 0) {
                            obj.put("amountinbasewithtax", amountInBaseWithInLineTax + (taxAmount));//obj.put("amountinbasewithtax", amountInBase + (amountInBase * rowTaxPercent/100));
                        } else {
                            obj.put("amountinbasewithtax", amountInBaseWithInLineTax);
                        }
                  }
                  
                HashMap<String, String> replaceFieldMap = new HashMap<String, String>();
                HashMap<String, String> customFieldMap = new HashMap<String, String>();
                HashMap<String, String> customDateFieldMap = new HashMap<String, String>();
                HashMap<String, Integer> FieldMap = null;
                HashMap<String, Object> fieldrequestParams = new HashMap();
                fieldrequestParams.put(Constants.filter_names, Arrays.asList(Constants.companyid, Constants.moduleid));
                fieldrequestParams.put(Constants.filter_values, Arrays.asList(companyid, isFixedAsset ? Constants.Acc_FixedAssets_DisposalInvoice_ModuleId : isConsignment?Constants.Acc_ConsignmentInvoice_ModuleId:Constants.Acc_Invoice_ModuleId));
                FieldMap = accAccountDAOobj.getFieldParamsCustomMap(fieldrequestParams, replaceFieldMap, customFieldMap, customDateFieldMap);
                  
                if (!invoice.isIsOpeningBalenceInvoice()) {
                    Map<String, Object> variableMap = new HashMap<String, Object>();
                    HashMap<String, Object> invDetailRequestParams = new HashMap<String, Object>();
                    ArrayList Detailfilter_names = new ArrayList(), Detailfilter_params = new ArrayList();
                    Detailfilter_names.add(Constants.companyKey);
                    Detailfilter_params.add(invoice.getCompany().getCompanyID());
                    Detailfilter_names.add("journalentryId");
                    Detailfilter_params.add(invoice.getJournalEntry().getID());
                    Detailfilter_names.add("moduleId");
                    int moduleId = isFixedAsset ? Constants.Acc_FixedAssets_DisposalInvoice_ModuleId : isConsignment?Constants.Acc_ConsignmentInvoice_ModuleId:Constants.Acc_Invoice_ModuleId;
                    Detailfilter_params.add(moduleId + "");
                    invDetailRequestParams.put("filter_names", Detailfilter_names);
                    invDetailRequestParams.put("filter_params", Detailfilter_params);
                    KwlReturnObject idcustresult = accJournalEntryobj.getJournalEntryCustomData(invDetailRequestParams);
                    if (idcustresult.getEntityList().size() > 0) {
                        AccJECustomData jeCustom = (AccJECustomData) idcustresult.getEntityList().get(0);
                        AccountingManager.setCustomColumnValues(jeCustom, FieldMap, replaceFieldMap, variableMap);
                        DateFormat defaultDateFormat = new SimpleDateFormat(Constants.MMMMdyyyy);
                        Date dateFromDB=null;
                        for (Map.Entry<String, Object> varEntry : variableMap.entrySet()) {
                            String coldata = varEntry.getValue().toString();
                            if (customFieldMap.containsKey(varEntry.getKey())) {
                                String value = "";
                                String Ids[] = coldata.split(",");
                                for (int i = 0; i < Ids.length; i++) {
                                    KwlReturnObject rdresult = accountingHandlerDAOobj.getObject(FieldComboData.class.getName(), Ids[i]);
                                    FieldComboData fieldComboData = (FieldComboData) rdresult.getEntityList().get(0);
                                    if (fieldComboData != null) {
                                        if ((fieldComboData.getField().getFieldtype() == 12 || fieldComboData.getField().getFieldtype() == 7) && !isExport) {
                                            value += Ids[i] != null ? Ids[i] + "," : ",";
                                        } else {
                                            value += fieldComboData.getValue() != null ? fieldComboData.getValue() + "," : ",";
                                        }

                                    }
                                }
                                if (!StringUtil.isNullOrEmpty(value)) {
                                    value = value.substring(0, value.length() - 1);
                                }
                                obj.put(varEntry.getKey(), value);
                            } else if (customDateFieldMap.containsKey(varEntry.getKey())) {
                                DateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
                                try {
                                    dateFromDB = defaultDateFormat.parse(coldata);
                                    obj.put(varEntry.getKey(), sdf.format(dateFromDB));
                                } catch (ParseException p) {
                                    obj.put(varEntry.getKey(), coldata);
                                }
                            } else {
                                if (!StringUtil.isNullOrEmpty(coldata)) {
                                    String[] coldataArray = coldata.split(",");
                                    String Coldata = "";
                                    for (int countArray = 0; countArray < coldataArray.length; countArray++) {
                                        Coldata += "'" + coldataArray[countArray] + "',";
                                    }
                                    Coldata = Coldata.substring(0, Coldata.length() - 1);
                                    String ColValue = accAccountDAOobj.getfieldcombodatabyids(Coldata);
                                    obj.put(varEntry.getKey(), coldata);
                                    obj.put(varEntry.getKey() + "_Values", ColValue);
                                }
                            }
                        }
                    }
                }

                if (invoice.isIsOpeningBalenceInvoice()) {
                    Map<String, Object> variableMap = new HashMap<String, Object>();
                    HashMap<String, Object> invDetailRequestParams = new HashMap<String, Object>();
                    ArrayList Detailfilter_names = new ArrayList(), Detailfilter_params = new ArrayList();
                    Detailfilter_names.add(Constants.companyKey);
                    Detailfilter_params.add(invoice.getCompany().getCompanyID());
                    Detailfilter_names.add("OpeningBalanceInvoiceId");
                    Detailfilter_params.add(invoice.getID());
                    Detailfilter_names.add("moduleId");
                    Detailfilter_params.add(Constants.Acc_Invoice_ModuleId + "");
                    invDetailRequestParams.put("filter_names", Detailfilter_names);
                    invDetailRequestParams.put("filter_params", Detailfilter_params);
                    KwlReturnObject idcustresult = accJournalEntryobj.getOpeningBalanceInvoiceCustomData(invDetailRequestParams);
                    if (idcustresult.getEntityList().size() > 0) {
                        OpeningBalanceInvoiceCustomData openingBalanceInvoiceCustomData = (OpeningBalanceInvoiceCustomData) idcustresult.getEntityList().get(0);
                        AccountingManager.setCustomColumnValues(openingBalanceInvoiceCustomData, FieldMap, replaceFieldMap, variableMap);
                        DateFormat defaultDateFormat = new SimpleDateFormat(Constants.MMMMdyyyy);
                        Date dateFromDB=null;
                        for (Map.Entry<String, Object> varEntry : variableMap.entrySet()) {
                            String coldata = varEntry.getValue().toString();
                            if (customFieldMap.containsKey(varEntry.getKey())) {
                                FieldComboData fieldComboData = (FieldComboData) kwlCommonTablesDAOObj.getClassObject(FieldComboData.class.getName(), coldata);
                                if (fieldComboData != null) {
                                    obj.put(varEntry.getKey(), fieldComboData.getValue() != null ? fieldComboData.getValue() : "");
                                }
                            } else if (customDateFieldMap.containsKey(varEntry.getKey())) {
                                DateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
                                try {
                                    dateFromDB = defaultDateFormat.parse(coldata);
                                    obj.put(varEntry.getKey(), sdf.format(dateFromDB));
                                } catch (ParseException p) {
                                    obj.put(varEntry.getKey(), coldata);
                                }
                            } else {
                                if (!StringUtil.isNullOrEmpty(coldata)) {
                                    String[] coldataArray = coldata.split(",");
                                    String Coldata = "";
                                    for (int countArray = 0; countArray < coldataArray.length; countArray++) {
                                        Coldata += "'" + coldataArray[countArray] + "',";
                                    }
                                    Coldata = Coldata.substring(0, Coldata.length() - 1);
                                    String ColValue = accAccountDAOobj.getfieldcombodatabyids(Coldata);
                                    obj.put(varEntry.getKey(), coldata);
                                    obj.put(varEntry.getKey() + "_Values", ColValue);
                                }
                            }
                        }
                    }
                }
                if (isExport || isSalesAnalysis) {
                    totalAmountWithTax += obj.optDouble("amountinbase", 0);
                    totalAmountWithoutTax += obj.optDouble("amountinbasewithtax", 0);
                }
                jArr.put(obj);
            }
            // Insert Total Amount If Export
            if (!paramJobj.optString("filetype").equalsIgnoreCase("pdf") && isExport || isSalesAnalysis) {
                JSONObject obj = new JSONObject();
                obj.put("customername", "Total");
                obj.put("amountinbase", totalAmountWithTax);
                obj.put("amountinbasewithtax", totalAmountWithoutTax);
                jArr.put(obj);
            }
            jobj.put(Constants.data, jArr);
        } catch (JSONException ex) {
            throw ServiceException.FAILURE("getInvoiceJson : " + ex.getMessage(), ex);
        }
        return jobj;
    }

    @Override
    public JSONObject getPaymentDetailsForInvoice(JSONObject paramJobj) throws SessionExpiredException, ServiceException {
        JSONObject returnObj = new JSONObject();
        try {
            JSONArray array = new JSONArray();
            JSONArray pagedJsonArray = new JSONArray();
            String companyid = paramJobj.getString(Constants.companyKey);
            Date startDate = (Date) paramJobj.get("startdate");
            Date endDate = (Date) paramJobj.get("enddate");
            
            HashMap<String, Object> payMap = new HashMap<>();
            payMap.put(Constants.companyKey, companyid);
            payMap.put("startDate", startDate);
            payMap.put("endDate", endDate);
            
            String moduleid = "";
            if (paramJobj.has(Constants.moduleid) && paramJobj.get(Constants.moduleid) != null) {
                moduleid = paramJobj.get(Constants.moduleid).toString();
            }
            payMap.put(Constants.moduleid, moduleid);
            
            String filterConjuctionCriteria = com.krawler.common.util.Constants.and;
            if (paramJobj.has("filterConjuctionCriteria") && paramJobj.get("filterConjuctionCriteria") != null) {
                if (paramJobj.get("filterConjuctionCriteria").toString().trim().equalsIgnoreCase("OR")) {
                    filterConjuctionCriteria = com.krawler.common.util.Constants.or;
                }
            }
             payMap.put("filterConjuctionCriteria", filterConjuctionCriteria);
            if (paramJobj.has(Constants.Acc_Search_Json) && paramJobj.get(Constants.Acc_Search_Json) != null) {
               payMap.put(Constants.Acc_Search_Json,  paramJobj.get(Constants.Acc_Search_Json).toString());   
            }
            
            
            KwlReturnObject invoicePaidAmtObj = accReceiptDAOobj.getReceiptDetailsLinkedWithInvoices(payMap);
            List<ReceiptDetail> receiptDetails = invoicePaidAmtObj.getEntityList();
            
            array = getPaymentDetailsForInvoiceJson(receiptDetails,paramJobj);
            pagedJsonArray = array;
            String start = paramJobj.getString("start");
            String limit = paramJobj.getString("limit");
            if (!StringUtil.isNullOrEmpty(start) && !StringUtil.isNullOrEmpty(limit)) {
                pagedJsonArray = StringUtil.getPagedJSON(pagedJsonArray, Integer.parseInt(start), Integer.parseInt(limit));
            }
                
            returnObj.put("data", pagedJsonArray);
            returnObj.put("count", array.length());
        } catch (JSONException ex) {
            throw ServiceException.FAILURE("getPaymentDetailsForInvoice : " + ex.getMessage(), ex);
        }
        return returnObj;
    }
    
    public JSONArray getPaymentDetailsForInvoiceJson(List<ReceiptDetail> list,JSONObject paramJobj) throws SessionExpiredException, ServiceException {
        JSONArray array = new JSONArray();
        DateFormat df = authHandler.getDateOnlyFormat();
        
        try {
            String companyid = paramJobj.getString(Constants.companyKey);
            boolean isExport = true;//paramJobj.optBoolean("isExport",false);
            if (!list.isEmpty()) {
                HashMap<String, Object> fieldrequestParams = new HashMap();
                HashMap<String, String> customFieldMap = new HashMap<>();
                HashMap<String, String> customDateFieldMap = new HashMap<>();
                fieldrequestParams.put(Constants.filter_names, Arrays.asList(Constants.companyid, Constants.moduleid));
                fieldrequestParams.put(Constants.filter_values, Arrays.asList(companyid, Constants.Acc_Invoice_ModuleId));
                HashMap<String, String> replaceFieldMap = new HashMap<>();
                HashMap<String, Integer> FieldMap = accAccountDAOobj.getFieldParamsCustomMapForRows(fieldrequestParams, replaceFieldMap, customFieldMap, customDateFieldMap);
                
                JSONObject obj = null;
                Receipt receipt = null;
                JournalEntry receiptJE = null;
                for (ReceiptDetail detail : list) {
                    obj = new JSONObject();
                    receipt = detail.getReceipt();
                    receiptJE = receipt.getJournalEntry();
                    obj.put("customerName", receipt.getCustomer().getName());
                    obj.put("invoiceNumber", detail.getInvoice().getInvoiceNumber());
                    obj.put("invoiceId", detail.getInvoice().getID());
//                    obj.put("invoiceDate", detail.getInvoice().isIsOpeningBalenceInvoice()?df.format(detail.getInvoice().getCreationDate()):df.format(detail.getInvoice().getJournalEntry().getEntryDate()));
                    obj.put("invoiceDate", df.format(detail.getInvoice().getCreationDate()));
                    obj.put("receiptNumber", receipt.getReceiptNumber());
                    obj.put("billid", receipt.getID());
                    obj.put("receiptJENumber", receiptJE!=null?receiptJE.getEntryNumber():"");
//                    obj.put("receiptDate", detail.getReceipt().isIsOpeningBalenceReceipt()?df.format(receipt.getCreationDate()):df.format(receiptJE.getEntryDate()));
                    obj.put("receiptDate", df.format(receipt.getCreationDate()));
                    obj.put("jedate", detail.getReceipt().isIsOpeningBalenceReceipt()?"":df.format(receiptJE.getEntryDate()));
                    obj.put("amountReceived", detail.getAmountInInvoiceCurrency());
                    obj.put("description", receipt.getMemo());
                    obj.put("resourceName", detail.getInvoice().getMasterSalesPerson()!=null?detail.getInvoice().getMasterSalesPerson().getValue():"");
                    obj.put("jeid", receiptJE != null ? receiptJE.getID():"");
                    obj.put("currencysymboltransaction", detail.getInvoice().getCurrency().getSymbol());
                    obj.put("currencycode", detail.getInvoice().getCurrency().getCurrencyCode());
                    obj.put("discountinrp", detail.getDiscountAmount());
                    
                    HashMap<String, List<Object>> invoiceCustomDataMap = new HashMap();
                    if(detail.getInvoice().isIsOpeningBalenceInvoice()){
                        JSONObject jobj = new JSONObject();
                    // ## Get Custom Field Data 
                        Map<String, Object> variableMap = new HashMap();
                        HashMap<String, Object> invDetailRequestParams = new HashMap();
                ArrayList Detailfilter_names = new ArrayList(), Detailfilter_params = new ArrayList();
                        Detailfilter_names.add("OpeningBalanceInvoice.ID");
                        Detailfilter_params.add(detail.getInvoice().getID());
                        invDetailRequestParams.put("filter_names", Detailfilter_names);
                        invDetailRequestParams.put("filter_params", Detailfilter_params);
                        KwlReturnObject idcustresult = accInvoiceDAOobj.getOpeningInvoiceDetailsCustomData(invDetailRequestParams);
                        if (idcustresult.getEntityList().size() > 0) {
                            OpeningBalanceInvoiceCustomData openingBalanceInvoiceCustomData = (OpeningBalanceInvoiceCustomData) idcustresult.getEntityList().get(0);
                            AccountingManager.setCustomColumnValues(openingBalanceInvoiceCustomData, FieldMap, replaceFieldMap, variableMap);

                            if (openingBalanceInvoiceCustomData != null) {
                                JSONObject params = new JSONObject();
                                params.put(Constants.isExport, isExport);
                                params.put(Constants.isForReport, isExport);
                                fieldDataManagercntrl.getLineLevelCustomData(variableMap, customFieldMap, customDateFieldMap, jobj, params);
                                //System.out.println(jobj.getString("Custom_Cost Center"));
                                if(jobj.length()>0){
                                     Iterator<String> keys = jobj.keys();
                                     while (keys.hasNext()) {
                                        String key = (String) keys.next();
                                        if (invoiceCustomDataMap.containsKey(key)) {
                                            if (!invoiceCustomDataMap.get(key).contains(jobj.get(key))) {
                                                invoiceCustomDataMap.get(key).add(jobj.get(key));
                                            }
                                        } else {
                                            List<Object> dataList = new ArrayList<>();
                                            dataList.add(jobj.get(key));
                                            invoiceCustomDataMap.put(key, dataList);
                                        }
                                    }
                                }
                            }
                        }
                    }else{
                        Set<InvoiceDetail> inv_detail = detail.getInvoice().getRows();
    //                    JSONArray dimensionArr=new JSONArray();
                        for(InvoiceDetail invdetails : inv_detail){
                            JSONObject jobj = new JSONObject();
                            // ## Get Custom Field Data 
                            Map<String, Object> variableMap = new HashMap();
                            HashMap<String, Object> invDetailRequestParams = new HashMap();
                            ArrayList Detailfilter_names = new ArrayList(), Detailfilter_params = new ArrayList();
                Detailfilter_names.add(Constants.Acc_JEDetail_recdetailId);
                            Detailfilter_params.add(invdetails.getID());
                invDetailRequestParams.put("filter_names", Detailfilter_names);
                invDetailRequestParams.put("filter_params", Detailfilter_params);
                            KwlReturnObject idcustresult = accInvoiceDAOobj.getInvoiceDetailsCustomData(invDetailRequestParams);
                if (idcustresult.getEntityList().size() > 0) {
                    AccJEDetailCustomData jeDetailCustom = (AccJEDetailCustomData) idcustresult.getEntityList().get(0);
                    AccountingManager.setCustomColumnValues(jeDetailCustom, FieldMap, replaceFieldMap, variableMap);

                    if (jeDetailCustom != null) {
                        JSONObject params = new JSONObject();
                        params.put(Constants.isExport, isExport);
                        params.put(Constants.isForReport, isExport);
                                    fieldDataManagercntrl.getLineLevelCustomData(variableMap, customFieldMap, customDateFieldMap, jobj, params);
//                                    System.out.println(jobj.getString("Custom_Cost Center"));
                                    if(jobj.length()>0){
                                        Iterator<String> keys = jobj.keys();
                                        while (keys.hasNext()) {
                                            String key = (String) keys.next();
                                            if (invoiceCustomDataMap.containsKey(key)) {
                                                if (!invoiceCustomDataMap.get(key).contains(jobj.get(key))) {
                                                    invoiceCustomDataMap.get(key).add(jobj.get(key));
                    }
                                            } else {
                                                List<Object> dataList = new ArrayList<>();
                                                dataList.add(jobj.get(key));
                                                invoiceCustomDataMap.put(key, dataList);
                }
                                        }
                                    }
                                }
                            }
                        }
                    }
                    for(Map.Entry<String,List<Object>> entry:invoiceCustomDataMap.entrySet()){
                        String commaSeperatedValue="";
                        String key=entry.getKey();
                        if(!key.equals("allCustomFieldKeyValuePairString")){
                            List<Object> data=entry.getValue();
                            for (Object dataObj : data) {
                                if (dataObj != null) {
                                    if (StringUtil.isNullOrEmpty(commaSeperatedValue)) {
                                        commaSeperatedValue = dataObj.toString();
                                    } else{
                                        commaSeperatedValue += ","+dataObj.toString();
                                    }
                                }
                            }
                            obj.put(key, commaSeperatedValue);
                        }
                    } 
//                    obj.put("dimensionArr", dimensionArr);
                    array.put(obj);
                }
            }
        } catch (JSONException ex) {
            throw ServiceException.FAILURE("getPaymentDetailsForInvoice : " + ex.getMessage(), ex);
        }
        return array;
    }
    
 @Override   
     public JSONObject getDeliveryOrdersMerged(JSONObject paramJobj) {
        JSONObject jobj=new JSONObject();
        String msg = "";
        String view = "jsonView";
        boolean issuccess = false;
        try {
            HashMap<String, Object> requestParams = getDeliveryOrdersMapJSON(paramJobj);
            boolean pendingapproval = (paramJobj.optString("pendingapproval",null) != null)? Boolean.parseBoolean( paramJobj.optString("pendingapproval")): false;
            boolean consolidateFlag =  paramJobj.optString("consolidateFlag",null)!=null?Boolean.parseBoolean( paramJobj.optString("consolidateFlag")):false;            
            String companyid = (consolidateFlag &&  paramJobj.optString(Constants.companyids,null)!=null)? paramJobj.optString(Constants.companyids):paramJobj.getString(Constants.companyKey);
            String gcurrencyid = (consolidateFlag &&  paramJobj.optString(Constants.globalCurrencyKey,null)!=null)? paramJobj.optString(Constants.globalCurrencyKey):paramJobj.getString(Constants.globalCurrencyKey);                        
            boolean salesPersonFilterFlag =  paramJobj.optString("salesPersonFilterFlag",null)!=null?Boolean.parseBoolean( paramJobj.optString("salesPersonFilterFlag")):false;
            String newcustomerid= paramJobj.optString("newcustomerid",null);
            paramJobj.put(Constants.companyKey, companyid);
            paramJobj.put(Constants.globalCurrencyKey, gcurrencyid);
            requestParams.put(Constants.companyKey, companyid);
            requestParams.put(Constants.globalCurrencyKey, gcurrencyid);
            requestParams.put("newcustomerid",newcustomerid);
             boolean bulkInv =  paramJobj.optString("bulkInv",null)!=null?Boolean.parseBoolean(paramJobj.optString("bulkInv")):false; 
             if(bulkInv){
                requestParams.put("bulkInv", bulkInv);
            }
             ExtraCompanyPreferences extraPref = (ExtraCompanyPreferences) kwlCommonTablesDAOObj.getClassObject("com.krawler.common.admin.ExtraCompanyPreferences",paramJobj.getString(Constants.companyKey));
            if (extraPref != null && extraPref.isEnablesalespersonAgentFlow()) {
                 int permCode=paramJobj.optInt(Constants.permCode);
                if (!((permCode & Constants.CUSTOMER_VIEWALL_PERMCODE) == Constants.CUSTOMER_VIEWALL_PERMCODE)) {
                    /*
                     * when (permCode & Constants.CUSTOMER_VIEWALL_PERMCODE) == Constants.CUSTOMER_VIEWALL_PERMCODE is true then user has permission to view all customers documents,so at that time there is need to filter record according to user&salesperson. 
                     */
                    String userId = paramJobj.optString(Constants.useridKey);
                    requestParams.put(Constants.useridKey , userId);
                    requestParams.put("enablesalespersonagentflow", extraPref.isEnablesalespersonAgentFlow());
                }
                Map<String, Object> salesPersonParams = new HashMap<>();

                salesPersonParams.put(Constants.useridKey , paramJobj.optString(Constants.useridKey));
                salesPersonParams.put(Constants.companyKey,paramJobj.getString(Constants.companyKey));
                salesPersonParams.put("grID", "15");
                KwlReturnObject masterItemByUserList = accountingHandlerDAOobj.getMasterItemByUserID(salesPersonParams);
                List<MasterItem> masterItems = masterItemByUserList.getEntityList();
                String salesPersons = "";
                StringBuffer salesPersonids = new StringBuffer();
                for (Object obj : masterItems) {
                    if (obj != null) {
                        salesPersonids.append(obj.toString() + ",");
                    }
                }
                if (salesPersonids.length() > 0) {
                    salesPersons = salesPersonids.substring(0, (salesPersonids.length() - 1));
                    requestParams.put("salesPersonid", salesPersons);
               }
                
            }
            boolean isForTaxApplication = false;
    
            KwlReturnObject extracapresult = accountingHandlerDAOobj.getObject(ExtraCompanyPreferences.class.getName(),paramJobj.getString(Constants.companyKey));
            ExtraCompanyPreferences extraCompanyPreferences = (ExtraCompanyPreferences) extracapresult.getEntityList().get(0);
            boolean upsIntegrationFlag = false; //Flag to indicate whether or not UPS REST integration is enabled ERP-31339
            if (extraCompanyPreferences != null) {
                upsIntegrationFlag = extraCompanyPreferences.isUpsIntegration();
            }
            requestParams.put("upsIntegrationFlag", upsIntegrationFlag);
            if ( paramJobj.optString("requestModuleid",null) != null && !StringUtil.isNullOrEmpty( paramJobj.optString("requestModuleid"))) {
                int requestModuleID=Integer.parseInt( paramJobj.optString("requestModuleid"));
                if(extraCompanyPreferences.isEnableLinkToSelWin()){
                    requestParams.put("requestModuleid", requestModuleID);    
                }
                if(extraCompanyPreferences.isEnableLinkToSelWin() && !Boolean.parseBoolean( paramJobj.optString("isGrid")) && (requestModuleID == Constants.Acc_Invoice_ModuleId || requestModuleID == Constants.Acc_Sales_Return_ModuleId || requestModuleID==Constants.Acc_ConsignmentSalesReturn_ModuleId || requestModuleID==Constants.LEASE_INVOICE_MODULEID || requestModuleID==Constants.Acc_Lease_Return || requestModuleID==Constants.Acc_FixedAssets_DisposalInvoice_ModuleId || requestModuleID==Constants.Acc_FixedAssets_Sales_Return_ModuleId)){
                     requestParams.put("start","0");
                     requestParams.put("limit", "10");
                }
            }
            if(!StringUtil.isNullOrEmpty( paramJobj.optString("isForTaxApplication",null))){
                isForTaxApplication = Boolean.parseBoolean( paramJobj.optString("isForTaxApplication"));
            }
            boolean closedStatusflag = false;
            if(!StringUtil.isNullOrEmpty( paramJobj.optString("closedStatusflag",null))){
                closedStatusflag = Boolean.parseBoolean( paramJobj.optString("closedStatusflag"));
            }
             requestParams.put("closedStatusflag", closedStatusflag);
            if(isForTaxApplication){
                requestParams.put("isForTaxApplication", isForTaxApplication);
                String taxApplicableCalculationDateStr =  paramJobj.optString("taxApplicableCalculationDate");
                Date taxApplicableCalculationDate = authHandler.getDateOnlyFormat().parse(taxApplicableCalculationDateStr);
                requestParams.put("taxApplicableCalculationDate", taxApplicableCalculationDate);
                boolean isTaxAppliedDOs = Boolean.parseBoolean( paramJobj.optString("isTaxAppliedDOs"));
                requestParams.put("isTaxAppliedDOs", isTaxAppliedDOs);
            }
        
    
            if (!StringUtil.isNullOrEmpty( paramJobj.optString(Constants.Acc_Search_Json,null))) {
                requestParams.put(Constants.Acc_Search_Json,  paramJobj.optString(Constants.Acc_Search_Json));
                requestParams.put(Constants.moduleid,  paramJobj.optString("moduleid"));
                requestParams.put("filterConjuctionCriteria",  paramJobj.optString("filterConjuctionCriteria"));
            }
    
            if (!StringUtil.isNullOrEmpty( paramJobj.optString("srflag",null))) {
                requestParams.put("srflag",  paramJobj.optString("srflag"));
            }
             if (!StringUtil.isNullOrEmpty( paramJobj.optString("linkFlag",null))) {
                requestParams.put("linkFlag",  paramJobj.optString("linkFlag"));
            }
            
            String dir = "";
            String sort = "";
            if (!StringUtil.isNullOrEmpty(paramJobj.optString("dir", null)) && !StringUtil.isNullOrEmpty(paramJobj.optString("sort", null))) {
                dir = paramJobj.optString("dir");
                sort = paramJobj.optString("sort");
                requestParams.put("sort", sort);
                requestParams.put("dir", dir);
            } 
            boolean isUnInvoiced =  paramJobj.optString("isUnInvoiced",null)!=null?Boolean.parseBoolean( paramJobj.optString("isUnInvoiced")):false;
            boolean isPOSRecords =  paramJobj.optString("isPOSRecords",null)!=null?Boolean.parseBoolean( paramJobj.optString("isPOSRecords")):false;
            requestParams.put("isPOSRecords", isPOSRecords);
            
            /**
             * flag for unInvoiced Records.
             */
            requestParams.put("isUnInvoiced", isUnInvoiced);
            
            KwlReturnObject userResult = accountingHandlerDAOobj.getObject(User.class.getName(),  paramJobj.optString(Constants.useridKey));
            User user = (User) userResult.getEntityList().get(0);
            if (!StringUtil.isNullOrEmpty(user.getDepartment())) {
                requestParams.put("userDepartment", user.getDepartment());
            }
            if(!StringUtil.isNullOrEmpty( paramJobj.optString("linknumber",null))){
                requestParams.put("linknumber",  paramJobj.optString("linknumber"));
            }
            
            if (salesPersonFilterFlag) {
                requestParams.put("salesPersonFilterFlag", salesPersonFilterFlag);
            }
            
            requestParams.put(Constants.useridKey ,  paramJobj.optString(Constants.useridKey));
            
            KwlReturnObject result = null;          
            if (!isUnInvoiced) {
                if(pendingapproval) {
                    requestParams.put(Constants.useridKey ,  paramJobj.optString(Constants.useridKey));
                    result = accInvoiceDAOobj.getPendingDO(requestParams);
                } else {
                    result = accInvoiceDAOobj.getDeliveryOrdersMerged(requestParams);
                }
            } else {
            	result = accInvoiceDAOobj.getUnInvoicedDeliveryOrders(requestParams);
            }       
            
            boolean dropDownData=false;
            if (!StringUtil.isNullOrEmpty( paramJobj.optString("dropDownData",null))) {
                dropDownData = Boolean.parseBoolean( paramJobj.optString("dropDownData"));
            }

            boolean isWidgetRequest =  paramJobj.optString("isWidgetRequest",null) != null ? Boolean.parseBoolean( paramJobj.optString("isWidgetRequest")) : false;
            if (isWidgetRequest) {
                JSONArray jArr = getDeliveryOrdersJsonMerged(paramJobj, result.getEntityList());
                view = "jsonView_ex";
                JSONObject commData = new JSONObject();
                JSONObject jMeta = new JSONObject();
                Map<String, Object> requestParamsForCM = new HashMap<>();
                Map<String, JSONArray> returnMap = accInvoiceServiceDAO.getColumnModuleForDeliveryOrder(requestParamsForCM);
                JSONArray jarrRecords = returnMap.get("record");
                JSONArray jarrColumns = returnMap.get("columns");
                commData.put("success", true);
                jMeta.put("totalProperty", "totalCount");
                jMeta.put("root", "coldata");
                jMeta.put("fields", jarrRecords); //Record Array
                commData.put("coldata", jArr);  //Actual data
                commData.put("columns", jarrColumns); //Column Module Array
                commData.put("totalCount", result.getRecordTotalCount());
                commData.put("metaData", jMeta);

                jobj.put("valid", true);
                jobj.put(Constants.data, commData);
            } else {
                if (dropDownData) {  // get only required data for form
                    JSONArray jarr = getDeliveryOrdersJson(paramJobj, result.getEntityList());
                    jobj.put(Constants.data, jarr);
                    jobj.put("count", result.getRecordTotalCount());
                    issuccess = true;
                } else { //data for reoprt
                    JSONArray jarr =getDeliveryOrdersJsonMerged(paramJobj, result.getEntityList());
                    jobj.put(Constants.data, jarr);
                    jobj.put("count", result.getRecordTotalCount());
                    issuccess = true;
                }
            }
        } catch (Exception ex) {
            msg = "" + ex.getMessage();
            Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                jobj.put("success", issuccess);
                jobj.put("msg", msg);
                jobj.put("jsonview", view);
            } catch (JSONException ex) {
                Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return jobj;
    }
     
     @Override   
     public JSONObject getUnprintedDeliveryOrdersChartJSON(JSONObject paramJobj) {
         JSONObject jobj = new JSONObject();
         try {
             HashMap<String, Object> requestParams = getDeliveryOrdersMapJSON(paramJobj);
             KwlReturnObject result = accInvoiceDAOobj.getUnInvoicedDeliveryOrders(requestParams);
             List<Object[]> list = result.getEntityList();
             JSONArray jArr = new JSONArray();
             int totalRecs = list.size();
             int doCount = 0;
             for(int customerCount = 0; customerCount < totalRecs; customerCount++ ) {
                 Object[] oj = list.get(customerCount);
                 if (customerCount < Constants.MAX_LIMIT_FOR_PIE) {
                     JSONObject temp = new JSONObject();
                     temp.put("docount", oj[0].toString());
                     temp.put("customername", oj[1].toString());
                     jArr.put(temp);
                 } else {
                     doCount += Integer.parseInt(oj[0].toString());
                 }
             }
             if (doCount > 0) {
                 JSONObject temp = new JSONObject();
                 temp.put("docount", doCount);
                 temp.put("customername", "Others");
                 jArr.put(temp);
             }
             jobj.put(Constants.data, jArr);
         } catch (JSONException ex) {
             Logger.getLogger(AccInvoiceServiceImpl.class.getName()).log(Level.SEVERE, null, ex);
         } catch (Exception ex) {
             Logger.getLogger(AccInvoiceServiceImpl.class.getName()).log(Level.SEVERE, null, ex);
         }
         return jobj;
     }
         /**
     * Desc : Function to load data in Shipping Grid
     *
     * @param request
     * @return
     * @throws SessionExpiredException
     * @throws ServiceException
     */

    public JSONObject getDeliveryOrderRowsForShippingDoList(JSONObject reqParams) throws SessionExpiredException, ServiceException {  //, HashMap<String, Integer> fieldMap
        JSONObject jobj = new JSONObject();
        try {
            HashMap<String, Object> requestParams = new HashMap<String, Object>();
            requestParams.put(Constants.companyKey, reqParams.optString("companyid"));
            String companyid = reqParams.optString("companyid");
            boolean isForReport = false;
            boolean isFixedAssetDO = false;
            boolean isBatchSerial = false;
            boolean isBatch = false;
            boolean isSerial = false;
            boolean isBatchForProduct = false;
            boolean isSerialForProduct = false;
            String[] sos = (String[]) reqParams.optString("bills").split(",");
            int i = 0;
            JSONArray jArr = new JSONArray();
            int addobj = 1;

            HashMap<String, Object> doRequestParams = new HashMap<String, Object>();
            ArrayList filter_names = new ArrayList(), filter_params = new ArrayList(), order_by = new ArrayList(), order_type = new ArrayList();
            filter_names.add("deliveryOrder.ID");
            order_by.add("srno");
            order_type.add("asc");
            doRequestParams.put("filter_names", filter_names);
            doRequestParams.put("filter_params", filter_params);
            doRequestParams.put("order_by", order_by);
            doRequestParams.put("order_type", order_type);
            JSONObject productObj = new JSONObject();
            Map<String, JSONObject> productObjMap = new HashMap<>();
            while (sos != null && i < sos.length) {
                KwlReturnObject result = accountingHandlerDAOobj.getObject(DeliveryOrder.class.getName(), sos[i]);
                DeliveryOrder dorder = (DeliveryOrder) result.getEntityList().get(0);
                filter_params.clear();
                filter_params.add(dorder.getID());
                KwlReturnObject podresult = accInvoiceDAOobj.getDeliveryOrderDetails(doRequestParams);
                List<DeliveryOrderDetail> resultList = podresult.getEntityList();
                for (DeliveryOrderDetail row : resultList) {
                    if (row.getProduct() != null && (row.getProduct().getProducttype().getID().equals(Constants.SERVICE)||row.getProduct().getProducttype().getID().equals(Constants.NON_INVENTORY_PART))) {
                        continue;
                    }
                    String dodid = row.getID();
                    double packedqty = 0d;
                    double actualqty = 0d;
                    double dobaseuomrate = row!=null?row.getBaseuomrate():1;
                    /**
                     * Product may contain UOM schema in that case multiply with DO BaseUomrate for eg 1 DO bundle = 1000 product metres.
                     */
                    if (dobaseuomrate != 1) {
                        actualqty = row.getActualQuantity() * dobaseuomrate;
                    } else {
                        actualqty = row.getActualQuantity();
                    }
                    packedqty = accInvoiceDAOobj.getDOPackedQuantity(dodid);
                    Map<String, Object> map = new HashMap();
                    map.put("dodid", dodid);
                    KwlReturnObject kwlReturnObject = accInvoiceDAOobj.getShippingQty(map);
                    double shipqty = 0d;
                    List<DeliveryDetailInterStoreLocationMapping> deliveryDetailInterStoreLocationMappings = kwlReturnObject.getEntityList();
                    for (DeliveryDetailInterStoreLocationMapping deliveryDetailInterStoreLocationMapping : deliveryDetailInterStoreLocationMappings) {
                        shipqty = shipqty + deliveryDetailInterStoreLocationMapping.getShippedQty();                        
                    }
                    /**
                     * Do not display completely Shipped Products during DO shipping again
                     * 
                     */
                    if(actualqty!=Math.abs(shipqty))
                    {
                    JSONObject obj = new JSONObject();
                    if (productObjMap.containsKey(row.getProduct().getID()) && productObjMap.get(row.getProduct().getID()) != null) {
                        obj = productObjMap.get(row.getProduct().getID());
                        double quantity = row.getDeliveredQuantity();

                        obj.put("dquantity", obj.getDouble("dquantity") + quantity);
                    } else {
                        obj.put(Constants.billid, dorder.getID());
                        obj.put("billno", dorder.getDeliveryOrderNumber());
                        obj.put("srno", row.getSrno());
                        obj.put("dodid", row.getID());
                        obj.put("rowid", row.getID());
                        obj.put("originalTransactionRowid", row.getID());
                        obj.put("productid", row.getProduct().getID());
                        obj.put("productname", row.getProduct().getName());
                        obj.put("productweight", row.getProduct().getProductweight());
                        obj.put("invstore", (StringUtil.isNullOrEmpty(row.getInvstoreid())) ? "" : row.getInvstoreid());
                        obj.put("invlocation", (StringUtil.isNullOrEmpty(row.getInvlocid())) ? "" : row.getInvlocid());
                        obj.put("isAsset", row.getProduct().isAsset());
                        obj.put("unitname", row.getInventory().getUom() != null ? row.getInventory().getUom().getNameEmptyforNA() : row.getProduct().getUnitOfMeasure() == null ? "" : row.getProduct().getUnitOfMeasure().getNameEmptyforNA());
                        obj.put("productunitname",row.getProduct().getUnitOfMeasure() == null ? "" : row.getProduct().getUnitOfMeasure().getNameEmptyforNA());
                        obj.put("desc", StringUtil.isNullOrEmpty(row.getDescription()) ? row.getProduct().getDescription() : row.getDescription());
                        obj.put("type", row.getProduct().getProducttype() == null ? "" : row.getProduct().getProducttype().getName());
                        obj.put("pid", row.getProduct().getProductid());
                        obj.put("memo", row.getRemark());
                        obj.put("quantity", row.getActualQuantity());
                        if(packedqty !=0){
                        obj.put("shipquantity", packedqty+shipqty);
                        }else {
                         obj.put("shipquantity", row.getDeliveredQuantity()+shipqty);   
                        }
                        KwlReturnObject cap = accountingHandlerDAOobj.getObject(CompanyAccountPreferences.class.getName(), companyid);
                        CompanyAccountPreferences preferences = (CompanyAccountPreferences) cap.getEntityList().get(0);
                        if (!StringUtil.isNullOrEmpty(row.getProduct().getID())) {
                            KwlReturnObject prodresult = accProductObj.getObject(Product.class.getName(), row.getProduct().getID());
                            Product product = (Product) prodresult.getEntityList().get(0);
                            isBatchForProduct = product.isIsBatchForProduct();
                            isSerialForProduct = product.isIsSerialForProduct();
                        }
                        if (row.getProduct().isIslocationforproduct() || row.getProduct().isIsSerialForProduct()) {  //check if company level option is on then only we will check productt level
//                            if (isBatchForProduct || isSerialForProduct) {
                            requestParams.put("dodid", row.getID());
                            requestParams.put("isforShipping", true);
                                    obj.put("batchdetails", getBatchJsonUsingIST(requestParams));
//                            }
                        }

                        /**
                         * If QC approval Flow for Delivery Order is activated
                         * then get the quantity from IST present in
                         * DeliveryDetailInterStoreLocationMapping.
                         */
                        if (preferences.isQaApprovalFlowInDO()) {
                            JSONObject params = new JSONObject();
                            params.put("dodetailid", row.getID());
                            params.put("transactionUsingQC", true);
                            List<DeliveryDetailInterStoreLocationMapping> list = accInvoiceDAOobj.getDeliveryDetailInterStoreLocationMappingList(params);
                            if (!list.isEmpty()) {
                                double dQuantity = 0;
                                for (DeliveryDetailInterStoreLocationMapping deliveryDetailInterStoreLocationMapping : list) {
                                    dQuantity += deliveryDetailInterStoreLocationMapping.getInterStoreTransferRequest().getAcceptedQty();
                                }
                                obj.put("dquantity", dQuantity);
                            } else {
                                obj.put("dquantity", row.getDeliveredQuantity());
                            }
                        } else {
                            obj.put("dquantity", row.getDeliveredQuantity());
                        }
                        obj.put("avialblequantity", row.getDeliveredQuantity());
                        
                            
                        if (!StringUtil.isNullOrEmpty(dodid)) {

                            /**
                             * if the user packs a large quantity and ships in short spells then return the difference
                             * that will be the remaining packed quantity which can be shipped
                             * else return the default packed quantity which will be 0 or less than shipped quantity
                             */
                            if (packedqty > shipqty && packedqty != 0) {
                                obj.put("packedqty", packedqty + shipqty);
                                obj.put("isdirectshipped", false);
                            }
                            if (packedqty == 0 && shipqty != 0) {
                                shipqty = Math.abs(shipqty);
                                obj.put("packedqty", shipqty);
                                obj.put("isdirectshipped", true);
                            }

                            if (packedqty == 0 && shipqty == 0) {
                                obj.put("packedqty", shipqty);
                                obj.put("isdirectshipped", true);
                            }
                            if (packedqty != 0 && shipqty != 0) {
                                obj.put("ispackedandshipped", true);
                            } else {
                                obj.put("ispackedandshipped", false);
                            }

                            if (packedqty != 0) {
                                obj.put("ispartialpacked", true);
                            } else {
                                obj.put("ispartialpacked", false);
                            }
                        }
                        double baseuomrate = row.getInventory().getBaseuomrate();
                        if (row.getInventory().getUom() != null) {
                            obj.put("uomid", row.getInventory().getUom().getID());
                        } else {
                            obj.put("uomid", row.getInventory().getProduct().getUnitOfMeasure() != null ? row.getInventory().getProduct().getUnitOfMeasure().getID() : "");
                        }
                        obj.put("baseuomquantity", authHandler.calculateBaseUOMQuatity(row.getDeliveredQuantity(), baseuomrate, companyid));
                        obj.put("baseuomrate", baseuomrate);
                        
                        obj.put("copyquantity", row.getDeliveredQuantity());
                        obj.put("description", StringUtil.isNullOrEmpty(row.getDescription()) ? row.getProduct().getDescription() : row.getDescription());
                        obj.put("partno", (row.getPartno() != null) ? row.getPartno() : "");
                        obj.put("remark", row.getRemark());
                        obj.put("discountispercent", 1);
                        obj.put("prdiscount", 0);
                        obj.put("rate", row.getRate());

                        obj.put("quantity", row.getActualQuantity());
                        obj.put("baseuomquantity", authHandler.calculateBaseUOMQuatity(row.getActualQuantity(), baseuomrate, companyid));
                        obj.put("baseuomrate", baseuomrate);
                        obj.put("isLocationForProduct", row.getProduct().isIslocationforproduct());
                        obj.put("isWarehouseForProduct", row.getProduct().isIswarehouseforproduct());
                        obj.put("isRowForProduct", row.getProduct().isIsrowforproduct());
                        obj.put("isRackForProduct", row.getProduct().isIsrackforproduct());
                        obj.put("isBinForProduct", row.getProduct().isIsbinforproduct());
                        obj.put("isBatchForProduct", row.getProduct().isIsBatchForProduct());
                        obj.put("isSKUForProduct", row.getProduct().isIsSKUForProduct());
                        obj.put("isSerialForProduct", row.getProduct().isIsSerialForProduct());
                        obj.put("isQAEnable", row.getProduct().isQaenable());
                        obj.put("warehouse", baseuomrate);
                        obj.put("location", baseuomrate);
                        productObjMap.put(row.getProduct().getID(), obj);
                    }
                }
                }    i++;
            }
            for (Map.Entry<String, JSONObject> entry : productObjMap.entrySet()) {
                Object jsonObject = entry.getValue() != null ? entry.getValue() : "";
                jArr.put(jsonObject);
            }
            jobj.put(Constants.data, jArr);
        } catch (JSONException je) {
            throw ServiceException.FAILURE(je.getMessage(), je);
        }
        return jobj;
    }

    /**
     * Get Shipping Quantity for DOD
     *
     * @param requestParams
     * @return
     * @throws ServiceException
     */
    public JSONObject getDeliveryOrderRowsForShippingDoDetails(Map<String, Object> requestParams) throws ServiceException {  //, HashMap<String, Integer> fieldMap
        JSONObject jobj = new JSONObject();
        try {
            String dodid = "";
            DeliveryOrderDetail deliveryOrderDetail = null;
            JSONArray jArr = new JSONArray();
            if (requestParams.containsKey("dodid")) {
                dodid = (String) requestParams.get("dodid");
                KwlReturnObject object = accountingHandlerDAOobj.getObject(DeliveryOrderDetail.class.getName(), dodid);
                deliveryOrderDetail = (DeliveryOrderDetail) object.getEntityList().get(0);
            }
            if (!StringUtil.isNullOrEmpty(dodid)) {
                Map<String, Object> map = new HashMap();
                map.put("dodid", dodid);
                JSONObject obj = new JSONObject();
                double packedqty=0d;
                packedqty= accInvoiceDAOobj.getDOPackedQuantity(dodid);
                KwlReturnObject kwlReturnObject = accInvoiceDAOobj.getShippingQty(map);
                double shipqty = 0d;
                double pickqty = 0d;
                double baseuomrate = 0d;
                List<DeliveryDetailInterStoreLocationMapping> deliveryDetailInterStoreLocationMappings = kwlReturnObject.getEntityList();
                for (DeliveryDetailInterStoreLocationMapping deliveryDetailInterStoreLocationMapping : deliveryDetailInterStoreLocationMappings) {
                    shipqty = shipqty + deliveryDetailInterStoreLocationMapping.getShippedQty();
                    pickqty = pickqty + deliveryDetailInterStoreLocationMapping.getPickedQty();
                                        }
                obj.put("dono", deliveryOrderDetail.getDeliveryOrder().getDeliveryOrderNumber());
                obj.put("quantity", deliveryOrderDetail.getActualQuantity());
                obj.put("baseuomrate", deliveryOrderDetail.getBaseuomrate());
                obj.put("quantityindo", (Double) deliveryOrderDetail.getDeliveredQuantity());
                baseuomrate = deliveryOrderDetail.getBaseuomrate();
                if (baseuomrate != 1) {
                    packedqty = packedqty * baseuomrate;
                    shipqty = shipqty * baseuomrate;
                }
                if (packedqty != 0) {
                    obj.put("duequantity", packedqty + shipqty);
                } else {
                    obj.put("duequantity", pickqty + shipqty);
                    }
                if (requestParams.containsKey("shipquantity") && requestParams.get("shipquantity") != null) {
                    obj.put("shipquantity", Double.parseDouble((String) requestParams.get("shipquantity")));
                }

                jArr.put(obj);

            }

            jobj.put(Constants.data, jArr);
        } catch (JSONException je) {
            throw ServiceException.FAILURE(je.getMessage(), je);
        }
        return jobj;
    }
    /**
     * @Desc : Get Data for Shipping DO Report
     * @param params
     * @param requestMap
     * @return
     * @throws ServiceException
     * @throws JSONException 
     */
    public JSONObject getShippingDeliveryOrder(JSONObject params, Map<String, Object> requestMap) throws ServiceException, JSONException {
        JSONObject jMeta = new JSONObject();
        String start = params.optString("start");
        String limit = params.optString("limit");
        String ss = params.optString("ss");
        requestMap.put("ss", ss);
        KwlReturnObject extracapresult = accountingHandlerDAOobj.getObject(ExtraCompanyPreferences.class.getName(),(String) requestMap.get(Constants.companyKey));
        ExtraCompanyPreferences extraCompanyPreferences = (ExtraCompanyPreferences) extracapresult.getEntityList().get(0);
        boolean upsIntegrationFlag = false; //Flag to indicate whether or not UPS REST integration is enabled ERP-31339
        if (extraCompanyPreferences != null) {
            upsIntegrationFlag = extraCompanyPreferences.isUpsIntegration();
        }
        requestMap.put("upsIntegrationFlag", upsIntegrationFlag);
        /**
         * Create column model for shipping report
         */

        JSONObject jSONObject = createColumnModelForShipping(requestMap);
        JSONArray jarrRecords = jSONObject.optJSONArray("jarrRecords");
        JSONArray jarrColumns = jSONObject.optJSONArray("jarrColumns");
        JSONObject dataobj = new JSONObject();
        requestMap.put("companyid", params.optString("companyid"));
        if(!StringUtil.isNullOrEmpty(params.optString("customerid"))){
            requestMap.put("customerid", params.optString("customerid"));
        }
        if(!StringUtil.isNullOrEmpty(params.optString("productid"))){
            requestMap.put("productid", params.optString("productid"));
        }
        requestMap.put(Constants.REQ_startdate, params.optString(Constants.REQ_startdate));
        requestMap.put(Constants.REQ_enddate, params.optString(Constants.REQ_enddate));
        KwlReturnObject kwlReturnObject = accInvoiceDAOobj.getShippingDO(requestMap);
        List<String> shippingDeliveryOrderIDList = kwlReturnObject.getEntityList();
        JSONArray array = new JSONArray();
      DateFormat df = new SimpleDateFormat("yyyy-MM-dd");
        if(shippingDeliveryOrderIDList != null && !shippingDeliveryOrderIDList.isEmpty()) {
            for (String shippingDeliveryOrderID : shippingDeliveryOrderIDList) {
                KwlReturnObject shippingDeliveryOrderKwlObj = accountingHandlerDAOobj.getObject(ShippingDeliveryOrder.class.getName(),shippingDeliveryOrderID);
                ShippingDeliveryOrder shippingDeliveryOrder1 = (ShippingDeliveryOrder) shippingDeliveryOrderKwlObj.getEntityList().get(0);
                JSONObject object = new JSONObject();
                object.put("shippingno", shippingDeliveryOrder1.getShipNumber());
                object.put("shippingdate", shippingDeliveryOrder1.getShippingDate());
                object.put("memo", shippingDeliveryOrder1.getMemo());
                object.put("customer", shippingDeliveryOrder1.getCustomer().getName());
                object.put("status", shippingDeliveryOrder1.getStatus().getValue());
                object.put("PortOfLoading", shippingDeliveryOrder1.getPortOfLoading());
                object.put("PortOfDischarge", shippingDeliveryOrder1.getPortOfDischarge());
                object.put("Vessel", shippingDeliveryOrder1.getVessel());
                object.put("INCOTERMS", shippingDeliveryOrder1.getIncoterms());
                Date dateoflc=null;
                String date=null;
                date = shippingDeliveryOrder1.getDateOfLc() + "";
                if (!StringUtil.isNullOrEmpty(date)) {
                    try {
                        dateoflc = df.parse(date);
                        object.put("DateOfLC", df.format(dateoflc));
                    } catch (ParseException ex) {
                    }
                } else {
                    object.put("DateOfLC", df.format(dateoflc));
                }
                object.put("LetterOfCreditNote", shippingDeliveryOrder1.getLetterOfCn());
                object.put("PartialShipment", shippingDeliveryOrder1.getPartialShipment());
                object.put("Transhipment", shippingDeliveryOrder1.getTranshipment());
                /**
                 * Get Shipping details
                 */
                requestMap.put("shippingid", shippingDeliveryOrder1.getID());
                KwlReturnObject returnObject = accInvoiceDAOobj.getShippingDODetails(requestMap);
                List<ShippingDeliveryDetail> deliveryDetails = returnObject.getEntityList();
                JSONArray detailarr = new JSONArray();
                
                /**
                 * Displaying the DO number related to each Shipping Record hence acquiring DO number and breaking the loop here.
                 */
                for (ShippingDeliveryDetail shipdd : deliveryDetails) {
                    object.put("dono", shipdd.getDeliveryOrderDetail().getDeliveryOrder().getDeliveryOrderNumber());
                    break;
                }
                for (ShippingDeliveryDetail shippingDeliveryDetail : deliveryDetails) {
                    JSONObject detailobj = new JSONObject();
                    detailobj.put("productname", shippingDeliveryDetail.getProduct().getProductName());
                    detailobj.put("productid", shippingDeliveryDetail.getProduct().getProductid());
                    detailobj.put("shipquantity", shippingDeliveryDetail.getShipQuantity());
                    detailobj.put("actualquantity", shippingDeliveryDetail.getActualQuantity());
                    detailobj.put("unitname", shippingDeliveryDetail.getDeliveryOrderDetail().getUom()!=null?shippingDeliveryDetail.getDeliveryOrderDetail().getUom().getNameEmptyforNA():shippingDeliveryDetail.getProduct().getUnitOfMeasure().getNameEmptyforNA());
                    detailobj.put("stockadjustment", shippingDeliveryDetail.getStockAdjustment().getTransactionNo());
                    detailarr.put(detailobj);
                }
                //Logic to get UPS Shipment Tracking Number(s) when UPS REST Integration is enabled
                if (upsIntegrationFlag) {
                    Set<String> deliveryOrdeDetailIDs = new TreeSet<String>();
                    for (ShippingDeliveryDetail shippingDeliveryDetail : deliveryDetails) {
                        DeliveryOrderDetail dodetails = shippingDeliveryDetail.getDeliveryOrderDetail();
                        if (dodetails != null) {
                            String deliveryOrdeDetailID = dodetails.getID();
                            if (!StringUtil.isNullOrEmpty(deliveryOrdeDetailID)) {
                                deliveryOrdeDetailIDs.add(deliveryOrdeDetailID);
                            }
                        }
                    }
                    StringBuilder upsTrackingNumbers = new StringBuilder("");
                    Set<String> upsTrackingNumbersSet = new TreeSet<String>();
                    upsTrackingNumbersSet = getUPSTrackingNumberFromDoDetails(deliveryOrdeDetailIDs);
                    if (!upsTrackingNumbersSet.isEmpty()) {
                        String upsTrackingNumbersStr = upsTrackingNumbersSet.toString();
                        upsTrackingNumbers.append(upsTrackingNumbersStr.substring(1, (upsTrackingNumbersStr.length() - 1)));
                    }
                    object.put("upsTrackingNumbers", upsTrackingNumbers.toString());
                }
                object.put("shippingdetails", detailarr);
                array.put(object);

            }
        }
        JSONArray pagedJson = new JSONArray();
        pagedJson = array;
        if (!StringUtil.isNullOrEmpty(start) && !StringUtil.isNullOrEmpty(limit)) {
            pagedJson = StringUtil.getPagedJSON(pagedJson, Integer.parseInt(start), Integer.parseInt(limit));
        }
        dataobj.put("totalCount", array.length());
        dataobj.put("columns", jarrColumns);
        dataobj.put("coldata", pagedJson);
        jMeta.put("totalProperty", "totalCount");
        jMeta.put("root", "coldata");
        jMeta.put("fields", jarrRecords);
        dataobj.put("metaData", jMeta);
        if (params.optBoolean("isExport", false)) {
            dataobj.put("data", array);
        }
        return dataobj;

    }
/**
 * @Desc : Get Column model for Shipping Report
 * @param requestParams
 * @return
 * @throws JSONException 
 */
    public JSONObject createColumnModelForShipping(Map<String, Object> requestParams) throws JSONException {
        JSONArray jarrRecords = new JSONArray();
        JSONArray jarrColumns = new JSONArray();
        JSONObject jobjTemp = new JSONObject();
        JSONArray dataJArr = new JSONArray();
        String storeRec = "";
        DateFormat df = (DateFormat) requestParams.get(Constants.df);
        Locale requestcontextutilsobj = null;
        if (requestParams.containsKey("requestcontextutilsobj")) {
            requestcontextutilsobj = (Locale) requestParams.get("requestcontextutilsobj");
        }
        boolean upsIntegrationFlag = false; //Flag to indicate whether or not UPS REST integration is enabled ERP-31339
        if (requestParams.containsKey("upsIntegrationFlag")) {
            upsIntegrationFlag = (boolean) requestParams.get("upsIntegrationFlag");
        }
        storeRec = "shippingno,dono,date,memo,customer,status,shippingdetails,shippingdate,PortOfLoading,PortOfDischarge,Vessel,INCOTERMS,DateOfLC,LetterOfCreditNote,PartialShipment,Transhipment";
        if(upsIntegrationFlag) {    //Addition of column 'Shipment Tracking Number(s)' when UPS REST Integration is enabled
            storeRec += ",upsTrackingNumbers";
        }
        String[] recArr = storeRec.split(",");
        // Get those fields in record for whome, no special properties present like type, defVal, mapping etc.
        for (String rec : recArr) {
            jobjTemp = new JSONObject();
            jobjTemp.put("name", rec);
            jarrRecords.put(jobjTemp);
        }

            // Gel column model - 
             jobjTemp = new JSONObject();
        jobjTemp.put("header", messageSource.getMessage("acc.field.shipping.number", null, requestcontextutilsobj));
        jobjTemp.put("dataIndex", "shippingno");
        jobjTemp.put("width", 150);
        jobjTemp.put("align", "center");
        jobjTemp.put("pdfwidth", 150);
        jarrColumns.put(jobjTemp);
         
            jobjTemp = new JSONObject();
        jobjTemp.put("header", messageSource.getMessage("erp.DONumber", null, requestcontextutilsobj));
        jobjTemp.put("dataIndex", "dono");
        jobjTemp.put("width", 150);
        jobjTemp.put("align", "center");
        jobjTemp.put("pdfwidth", 150);
        jarrColumns.put(jobjTemp);

            jobjTemp = new JSONObject();
        jobjTemp.put("header", messageSource.getMessage("acc.up.3", null, requestcontextutilsobj));
        jobjTemp.put("dataIndex", "customer");
        jobjTemp.put("width", 150);
        jobjTemp.put("align", "center");
        jobjTemp.put("pdfwidth", 150);
        jarrColumns.put(jobjTemp);

        jobjTemp = new JSONObject();
        jobjTemp.put("header", messageSource.getMessage("acc.challanreport.date", null, requestcontextutilsobj));
        jobjTemp.put("dataIndex", "shippingdate");
        jobjTemp.put("align", "center");
        jobjTemp.put("width", 150);
        jobjTemp.put("pdfwidth", 150);
        jarrColumns.put(jobjTemp);

        jobjTemp = new JSONObject();
        jobjTemp.put("header", messageSource.getMessage("acc.common.memo", null, requestcontextutilsobj));
        jobjTemp.put("dataIndex", "memo");
        jobjTemp.put("width", 150);
        jobjTemp.put("align", "center");
        jobjTemp.put("pdfwidth", 150);
        jarrColumns.put(jobjTemp);

        jobjTemp = new JSONObject();
        jobjTemp.put("header", messageSource.getMessage("acc.invoiceList.status", null, requestcontextutilsobj));
        jobjTemp.put("dataIndex", "status");
        jobjTemp.put("align", "center");
        jobjTemp.put("width", 150);
        jobjTemp.put("pdfwidth", 150);
        jarrColumns.put(jobjTemp);
        
        jobjTemp = new JSONObject();
        jobjTemp.put("header", messageSource.getMessage("acc.field.Vessel", null, requestcontextutilsobj));
        jobjTemp.put("dataIndex", "Vessel");
        jobjTemp.put("align", "center");
        jobjTemp.put("width", 150);
        jobjTemp.put("pdfwidth", 150);
        jarrColumns.put(jobjTemp);
        
        jobjTemp = new JSONObject();
        jobjTemp.put("header", messageSource.getMessage("acc.field.INCOTERMS", null, requestcontextutilsobj));
        jobjTemp.put("dataIndex", "INCOTERMS");
        jobjTemp.put("align", "center");
        jobjTemp.put("width", 150);
        jobjTemp.put("pdfwidth", 150);
        jarrColumns.put(jobjTemp);
        
                jobjTemp = new JSONObject();
        jobjTemp.put("header", messageSource.getMessage("acc.field.PortOfDischarge", null, requestcontextutilsobj));
        jobjTemp.put("dataIndex", "PortOfDischarge");
        jobjTemp.put("align", "center");
        jobjTemp.put("width", 150);
        jobjTemp.put("pdfwidth", 150);
        jarrColumns.put(jobjTemp);
        
        jobjTemp = new JSONObject();
        jobjTemp.put("header", messageSource.getMessage("acc.filed.PortOfLoading", null, requestcontextutilsobj));
        jobjTemp.put("dataIndex", "PortOfLoading");
        jobjTemp.put("align", "center");
        jobjTemp.put("width", 150);
        jobjTemp.put("pdfwidth", 150);
        jarrColumns.put(jobjTemp);
        
        jobjTemp = new JSONObject();
        jobjTemp.put("header", messageSource.getMessage("acc.field.Transhipment", null, requestcontextutilsobj));
        jobjTemp.put("dataIndex", "Transhipment");
        jobjTemp.put("align", "center");
        jobjTemp.put("width", 150);
        jobjTemp.put("pdfwidth", 150);
        jarrColumns.put(jobjTemp);
        
        jobjTemp = new JSONObject();
        jobjTemp.put("header", messageSource.getMessage("acc.field.PartialShipment", null, requestcontextutilsobj));
        jobjTemp.put("dataIndex", "PartialShipment");
        jobjTemp.put("align", "center");
        jobjTemp.put("width", 150);
        jobjTemp.put("pdfwidth", 150);
        jarrColumns.put(jobjTemp);
        
        jobjTemp = new JSONObject();
        jobjTemp.put("header", messageSource.getMessage("acc.field.LetterOfCreditNote", null, requestcontextutilsobj));
        jobjTemp.put("dataIndex", "LetterOfCreditNote");
        jobjTemp.put("align", "center");
        jobjTemp.put("width", 150);
        jobjTemp.put("pdfwidth", 150);
        jarrColumns.put(jobjTemp);
        
        jobjTemp = new JSONObject();
        jobjTemp.put("header", messageSource.getMessage("acc.field.DateOfLC", null, requestcontextutilsobj));
        jobjTemp.put("dataIndex", "DateOfLC");
        jobjTemp.put("align", "center");
        jobjTemp.put("width", 150);
        jobjTemp.put("pdfwidth", 150);
        jarrColumns.put(jobjTemp);
        
        if(upsIntegrationFlag) {    //Addition of column 'Shipment Tracking Number(s)' when UPS REST Integration is enabled
            jobjTemp = new JSONObject();
            jobjTemp.put("header", messageSource.getMessage("acc.invoiceList.upsTrackingNumbers", null, requestcontextutilsobj));
            jobjTemp.put("dataIndex", "upsTrackingNumbers");
            jobjTemp.put("align", "left");
            jobjTemp.put("width", 200);
            jobjTemp.put("pdfwidth", 150);
            jarrColumns.put(jobjTemp);
        }

        JSONObject returnobj = new JSONObject();
        returnobj.put("jarrColumns", jarrColumns);
        returnobj.put("jarrRecords", jarrRecords);
        return returnobj;
    }
    
    /*----------- Return true If Invoice will partially linked with DO---------*/
    boolean isInvoiceFullyLinkedWithDo(Invoice invoice) throws ServiceException {
        boolean isfull = false;

        List invoiceList = accInvoiceDAOobj.isInvoiceNotLinkedWithAnyDo(invoice);
        boolean isAnyDOIsInPendingState = (boolean) invoiceList.get(2);//Flag to identify whether any of GRN created from PI are in pending state?
        if (!invoice.isIsOpenDO() && !isAnyDOIsInPendingState) {
            isfull = true;
        } else {

            /*----------- Check If DO->SI then in this case SI will be always fully linked with DO--------*/
            if (accInvoiceDAOobj.isLinkingOfDOInSI(invoice)) {//i.e DO->SI linking is available? 
                isfull = checkDOtoInvoiceLinkingIsFullOrPartial(invoice, true);
            }
        }
        return isfull;
    }
    
    boolean isInvoicePartiallyLinkedWithDo(Invoice invoice) throws ServiceException {
        boolean isNotLinkedWithAnyDO = false;
        boolean isPartiallyLinkedWithDO = false;

        List invoiceList = accInvoiceDAOobj.isInvoiceNotLinkedWithAnyDo(invoice);
        isNotLinkedWithAnyDO = (boolean) invoiceList.get(0);
        isPartiallyLinkedWithDO = (boolean) invoiceList.get(1);
        /*--------------- Check  SI->DO linked Partially----------*/
        if (!isNotLinkedWithAnyDO && invoice.isIsOpenDO()) {
            isPartiallyLinkedWithDO = true;

        } 
        /**
         * Commenting below code because of no need check DO-->SI flow in
         * partially case.
         */
//        else {
//            /*---------- Check If DO->SI then in this case SI will be always fully linked with DO----------*/
//            if (accInvoiceDAOobj.isLinkingOfDOInSI(invoice)) {//i.e DO->SI linking is available?
//                isPartiallyLinkedWithDO = checkDOtoInvoiceLinkingIsFullOrPartial(invoice, false);
//            }
//        }
        return isPartiallyLinkedWithDO;
    }

     /*------- Return true If Invoice will not linked with any DO------*/
    boolean isInvoiceNotLinkedWithAnyDo(Invoice invoice) throws ServiceException{
        boolean isNotLinkedWithAnyDO = true;
        try {

         List invoiceList = accInvoiceDAOobj.isInvoiceNotLinkedWithAnyDo(invoice);//SI->DO
         isNotLinkedWithAnyDO = (boolean) invoiceList.get(0);
            if (isNotLinkedWithAnyDO) {
                if (accInvoiceDAOobj.isLinkingOfDOInSI(invoice)) {//i.e DO->SI linking is available?
                    isNotLinkedWithAnyDO = false;
                }
            }
         
        } catch (Exception ex) {

        }
        return isNotLinkedWithAnyDO;
    }
    
    
    /*--------- Return true/false for Partial/complete linking of DO->Invoice----------*/
    boolean checkDOtoInvoiceLinkingIsFullOrPartial(Invoice invoice,boolean isCalledForFullDO) throws ServiceException {
        boolean statusLinking = false;
        Set<InvoiceDetail> invRows = invoice.getRows();
        double invoiceQuantity = 0;
        double deliveryOrderQuantity = 0;
        DeliveryOrder deliveryOder = null;
        /* ----Calculating product quantity used in Invoice------*/
        for (InvoiceDetail invdetails : invRows) {
            if (invdetails.getDeliveryOrderDetail() != null) {
                if (deliveryOder == null) {
                    deliveryOder = invdetails.getDeliveryOrderDetail().getDeliveryOrder();
                }
                invoiceQuantity += invdetails.getInventory().getQuantity();
            }
        }

        if (deliveryOder != null) {
            Set<DeliveryOrderDetail> grorderrows = deliveryOder.getRows();

               /* ----Calculating product quantity used in delivery Order------*/
            for (DeliveryOrderDetail grodetails : grorderrows) {
                deliveryOrderQuantity += grodetails.getDeliveredQuantity();
            }
            if (isCalledForFullDO) {
                /*--------- If DO is completely used in single invoice-------*/
                if (deliveryOrderQuantity >= invoiceQuantity) {
                    statusLinking = true;
                } else {
                    statusLinking = false;
                }
            } else {
                /*--------- If DO is partially used in single invoice-------*/
                if (deliveryOrderQuantity > invoiceQuantity) {
                    statusLinking = true;
                } else {
                    statusLinking = false;
                }
            }
        }

        return statusLinking;
    }
    
    /*
    For SO Check List logic is based on sodetail id, for single SO there can be multiple DOs. Each DO has SOdetail id (which is same for DOs having common SOs)
    So, from the query we have brought the data ordered by sodetailid so that the business logic can be applied on data with minimum iteraions and maximum efficiency
    */
    @Override
    public Map<String, Object> getCheckListSOAgainstDO(Map requestParams) {
        
        HashMap<String, Object> reqParams = new HashMap<String, Object>();
        reqParams.put(Constants.filter_names, Arrays.asList(Constants.companyid, Constants.moduleid, Constants.fieldlabel));
        reqParams.put(Constants.filter_values, Arrays.asList(requestParams.get("companyId"), Constants.Acc_Sales_Order_ModuleId, "Serial"));
        reqParams.put("order_by", Arrays.asList("sequence"));
        reqParams.put("order_type", Arrays.asList("asc"));
        reqParams.put("isActivated", 1);
        String colNum = "";
        KwlReturnObject resultColNum = accAccountDAOobj.getFieldParams(reqParams);
        List lst = resultColNum.getEntityList();
        Boolean isSerialPresent=false;
        if (!lst.isEmpty() && lst.size() > 0) {
            isSerialPresent=true;
            FieldParams fieldParams = (FieldParams) lst.get(0);
            colNum = Constants.Custom_column_Prefix + String.valueOf(fieldParams.getColnum());
            requestParams.put(Constants.Colnum, colNum);
        }
        requestParams.put("isSerialPresent", isSerialPresent);
        KwlReturnObject result = accInvoiceDAOobj.getCheckListSOSQL(requestParams);
        List<Object[]> resultList = result.getEntityList();
        List<Map<String, Object>> rows = new ArrayList<>();
        Map<String, Object> jasperMap = new HashMap<>();
        String a[][] = isSerialPresent? new String[resultList.size()][18]:new String[resultList.size()][17];
        DateFormat udf = (SimpleDateFormat) (DateFormat) requestParams.get("userDateFormat");
       int i = 0;
        ArrayList soDetailCheck = new ArrayList();
        for (Object[] rowOBJ : resultList) {
            String soDetailID = (rowOBJ[2] == null) ? "" : rowOBJ[2].toString();
            soDetailCheck.add(soDetailID);
            for (int j = 0; j < rowOBJ.length; j++) {
                a[i][j] = (rowOBJ[j] == null) ? "" : rowOBJ[j].toString();
}
            i++;
        }
        Date startDate = (Date) requestParams.get("startdate");
        Date endDate = (Date) requestParams.get("enddate");
        SimpleDateFormat df = new SimpleDateFormat("dd/MM/yyyy");
        String DateRange = "From " + df.format(startDate) + " To " + df.format(endDate);
        jasperMap.put("DateRange", DateRange);
        jasperMap.put("Date", df.format(new Date()));
        int start = 0;
        int end = 0;
        if (!StringUtil.isNullOrEmpty((String) requestParams.get("newcustomerid"))) {
            jasperMap.put("customer", a[start][15]);
            jasperMap.put("customerCode", a[start][16]);
        } else {
            jasperMap.put("customer", "All");
        }
        /*
         SODetail check takes out all the SODetails IDs and used for determining start and 
         end indices of the DOs having common SO as the SOdetailID will be same for those DOs.
         the start and end indices are for each group of SOs are sent to "prepareChecListSO" function 
         to process the data and provide it to UI in required format        
         */
        if (soDetailCheck.size() > 0) {
            while (end < soDetailCheck.size()) {

                String tempID = (String) soDetailCheck.get(start);
                while ((end < soDetailCheck.size()) && tempID.equals(soDetailCheck.get(end).toString())) {
                    end = end + 1;
                }
                Map<String, Object> row = prepareChecListSO(start, end, a, requestParams);
                rows.add(row);
                start = end;
            }
        }

        /*
         We have made the generic code for sorting the List of maps and same are used here to sort the data
         */
        rows = AccountingManager.sortListOfMapsOnStringValues(rows, "productId", true);
        rows = AccountingManager.sortListOfMapsOnDateValues(rows, "soOrderDate", true);
        /*
         Finally Serial no: of each rocrd is added to the records
         */
        for (int j = 0; j < rows.size(); j++) {
            rows.get(j).put("srno", String.valueOf(j + 1));
        }
        jasperMap.put("subreportExpression", new JRBeanCollectionDataSource(rows));
        return jasperMap;
    }

    public Map<String, Object> prepareChecListSO(int start, int end, String a[][], Map requestParams) {
        Map<String, Object> row = Collections.EMPTY_MAP;
        DateFormat udf = (SimpleDateFormat) (DateFormat) requestParams.get("userDateFormat");
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
        Date date = new Date();
        row = new HashMap<>();

        row.put("poNumber", a[start][0]);
        row.put("soNumber", a[start][1]);
        row.put("soDetailID", a[start][2]);
        row.put("invoiceNumber", a[start][3]);
        row.put("productName", a[start][5]);
        row.put("productId", a[start][6]);
        Double soQuantity = Double.parseDouble(a[start][7] == null ? "0" : a[start][7]);
        row.put("soQuantity", soQuantity == 0 ? "" : authHandler.formattedQuantity(soQuantity, requestParams.get("companyId").toString()));
        row.put("unitPrice", a[start][9]);
        row.put("soShipDate", a[start][10]);
        if (!StringUtil.isNullOrEmpty(a[start][12])) {
            try {
                date = sdf.parse(a[start][12]);
                row.put("soOrderDate", udf.format(date));
                date = null;
            } catch (Exception e) {
                Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, e);
            }
        } else {
            row.put("soOrderDate", a[start][12]);
        }
        Double poQuantity = Double.parseDouble(a[start][8] == null ? "" : a[start][13]);
        row.put("poQuantity", authHandler.formattedQuantity(poQuantity, requestParams.get("companyId").toString()));
        row.put("soMemo", a[start][14]);
        if(Boolean.parseBoolean(requestParams.get("isSerialPresent").toString())){
            
        row.put("serial",a[start][17]);
        }
//        row.put("srno", String.valueOf(srno));
        Map<String, Object> doDetails = new HashMap<>();
        List<Map<String, Object>> doRecords = new ArrayList<>();

//        Date doDate = new Date();
        int cnt = 0;
        cnt = 0;
        int DORecordsCountperRow = 1;
        while (start < end) {
            /*
             Logic for printing only 5 DOs in one row is written here 
             */
            if (DORecordsCountperRow % 6 != 0) {
                doDetails.put("doNumber" + cnt, a[start][4]);
                Double doQuant;
                String doQuantity = "";
                if (!StringUtil.isNullOrEmpty(a[start][8])) {
                    doQuant = Double.parseDouble(a[start][8]);
                    doQuantity = authHandler.formattedQuantity(doQuant, requestParams.get("companyId").toString());
                }
                doDetails.put("doQuantity" + cnt, doQuantity);
                try {
                    if (!StringUtil.isNullOrEmpty(a[start][11])) {
                        Date date1 = sdf.parse(a[start][11]);
                        doDetails.put("doDate" + cnt, udf.format(date1));
                    } else {
                        doDetails.put("doDate" + cnt, a[start][11]);
                    }
                } catch (Exception e) {
                    Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, e);
                }
                start++;
                cnt++;
                DORecordsCountperRow++;
            } else {
                doRecords.add(doDetails);
                doDetails = new HashMap();
                cnt = 0;
                DORecordsCountperRow = 1;
            }
            if (start == end) {
                doRecords.add(doDetails);
            }
        }
        row.put("TableData", new JRBeanCollectionDataSource(doRecords));

        return row;
    }
    @Override
    public Map<String, Double> getClosedQtyForLoan(String companyID) throws ServiceException {
        Map<String, Double> qtyMp = new HashMap<>();
        KwlReturnObject idcustresult = accInvoiceDAOobj.getClosedQtyForLoan(companyID);
        if (idcustresult != null && idcustresult.getEntityList().size() > 0) {
            List list = idcustresult.getEntityList();
            if (list.size() > 0) {
                Iterator itr = list.iterator();
                while (itr.hasNext()) {
                    Object[] objs = (Object[]) itr.next();
                    String dodId = objs[0].toString();
                    double qty = objs[1] != null ? (Double) objs[5] : 0;
                    qtyMp.put(dodId, qty);
                }
            }
        }
        return qtyMp;
    }
    
    //Method to get set of UPS Shipment Tracking Number(s) from list of DeliveryOrderDetails IDs
    @Override
    public Set getUPSTrackingNumberFromDoDetails(Set<String> deliveryOrdeDetailIDs) throws ServiceException {
        Set upsTrackingNumbersSet = new TreeSet<String>();
        try {
            if (!deliveryOrdeDetailIDs.isEmpty()) {
                Map dataMap = new HashMap<String, Object>();
                dataMap.put("deliveryOrdeDetailIDs", deliveryOrdeDetailIDs);
                KwlReturnObject tempKwlObj = accInvoiceDAOobj.getUPSTrackingNumberFromDoDetails(dataMap);
                List trackingNumbersList = tempKwlObj.getEntityList();
                if (trackingNumbersList != null) {
                    upsTrackingNumbersSet = new TreeSet(trackingNumbersList);
                }
            }
        } catch (Exception ex) {
            Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
        }
        return upsTrackingNumbersSet;
    }
    
    @Transactional(propagation = Propagation.REQUIRED, rollbackFor = {ServiceException.class, SessionExpiredException.class, JSONException.class, AccountingException.class})
    public String deleteInvoice(String linkedTransaction, JSONObject requestJobj, JSONObject jobj, CompanyAccountPreferences preferences, boolean isFixedAsset, boolean isLeaseFixedAsset, boolean isConsignment, String companyid) throws ServiceException, AccountingException, SessionExpiredException, JSONException {
        KwlReturnObject result;
        HashMap<String, Object> requestParams = new HashMap<String, Object>();
        String invoiceid = jobj.getString(Constants.billid);
        String journalentryid = jobj.optString("journalentryid");

        KwlReturnObject res = accountingHandlerDAOobj.getObject(Invoice.class.getName(), invoiceid);
        Invoice invoice = (Invoice) res.getEntityList().get(0);

        String invoiceno = invoice.getInvoiceNumber();//jobj.getString("billno");
        String entryno = invoice.getJournalEntry() != null ? invoice.getJournalEntry().getEntryNumber() : "";
        if (isFixedAsset || isLeaseFixedAsset) {
            requestParams.put("invoiceid", invoiceid);
            requestParams.put(Constants.companyKey, companyid);
            accInvoiceDAOobj.deleteAssetDetailsLinkedWithInvoice(requestParams);
            if (isLeaseFixedAsset) {
                accInvoiceDAOobj.deleteInvoiceContractMappings(requestParams);
            }
        }

        result = accCreditNoteDAOobj.getCNFromInvoice(invoiceid, companyid);
        List list = result.getEntityList();
        if (!list.isEmpty()) {
            linkedTransaction += invoiceno + ", ";
            return linkedTransaction;
            //throw new AccountingException(messageSource.getMessage("acc.nee.60", null, RequestContextUtils.getLocale(request)));
        }

        boolean includeTempDeleted = true;
        result = accCreditNoteDAOobj.getCNFromInvoiceOtherwise(invoiceid, companyid,includeTempDeleted);
        list = result.getEntityList();
        if (!list.isEmpty()) {                        //while deleting invoice check wether it is used in credit note
            linkedTransaction += invoiceno + ", ";
            return linkedTransaction;
            //throw new AccountingException(messageSource.getMessage("acc.nee.60", null, RequestContextUtils.getLocale(request)));
        }
        result = accInvoiceDAOobj.getDOFromInvoice(invoiceid, companyid);
        list = result.getEntityList();
        if (!list.isEmpty()) {
            linkedTransaction += invoiceno + ", ";
            return linkedTransaction;
            //throw new AccountingException(messageSource.getMessage("acc.nee.67", null, RequestContextUtils.getLocale(request)));
        }

//        Company company = (Company) kwlCommonTablesDAOObj.getClassObject(Company.class.getName(), companyid);
//        boolean isMalaysian = company != null ? company.getCountry().getID().equalsIgnoreCase("137") : false;
//        if (isMalaysian) {
            result = accInvoiceDAOobj.getDebitNoteLinkedWithInvoice(invoiceid, companyid);
            list = result.getEntityList();
            if (!list.isEmpty()) {                        //while deleting invoice check wether it is used in Debit note
                linkedTransaction += invoiceno + ", ";
                return linkedTransaction;
            }
//        }
        result = accInvoiceDAOobj.getCreditNoteForOverchargeLinkedWithInvoice(invoiceid, companyid);
        list = result.getEntityList();
        if (list != null && !list.isEmpty()) {
            linkedTransaction += invoiceno + ", ";
            return linkedTransaction;
        }
            
//            query = "from ReceiptDetail rd  where rd.invoice.ID in ( " + qMarks + ")  and rd.receipt.deleted=false and rd.company.companyID=?";
//            list = HibernateUtil.executeQuery(session, query, params.toArray());
        HashMap<String, Object> receiptMap = new HashMap<String, Object>();

        receiptMap.put("invoiceid", invoiceid);
        receiptMap.put(Constants.companyKey, companyid);
        result = accReceiptDAOobj.getReceiptFromInvoice(receiptMap);
        list = result.getEntityList();
        if (!list.isEmpty()) {
            linkedTransaction += invoiceno + ", ";
            return linkedTransaction;
            //throw new AccountingException(messageSource.getMessage("acc.nee.61", null, RequestContextUtils.getLocale(request)));
        }
        result = accReceiptDAOobj.getLinkDetailReceipt(receiptMap);
        list = result.getEntityList();
        if (!list.isEmpty()) {
            linkedTransaction += invoiceno + ", ";
            return linkedTransaction;
        }
        result = accInvoiceDAOobj.getSRFromInvoice(invoiceid, companyid);
        list = result.getEntityList();
        if (!list.isEmpty()) {
            linkedTransaction += invoiceno + ", ";
            return linkedTransaction;
            //throw new AccountingException(messageSource.getMessage("acc.nee.71", null, RequestContextUtils.getLocale(request)));
        }

        // Check if invoice has been claimed or recovered then it should not be delete
        // for Malasian Company
        HashMap<String, Object> badMaps = new HashMap<String, Object>();
        badMaps.put(Constants.companyKey, companyid);
        badMaps.put("invoiceid", invoiceid);

        result = accInvoiceDAOobj.getBadDebtInvoiceMappingForInvoice(badMaps);
        list = result.getEntityList();
        if (!list.isEmpty()) {
            linkedTransaction += invoiceno + ", ";
            return linkedTransaction;
        }

        // check the pushed invoices in delivery Planner
        result = accInvoiceDAOobj.getInvoiceFromDeliveryPlanner(invoiceid, companyid);
        list = result.getEntityList();
        if (!list.isEmpty()) {
            linkedTransaction += invoiceno + ", ";
            return linkedTransaction;
        }
        
        boolean isAvalaraIntegration = false;
        result = accountingHandlerDAOobj.getObject(ExtraCompanyPreferences.class.getName(), companyid);
        if (result != null && result.getEntityList() != null && !result.getEntityList().isEmpty() && result.getEntityList().get(0) != null) {
            ExtraCompanyPreferences extraPref = (ExtraCompanyPreferences) result.getEntityList().get(0);
            isAvalaraIntegration = extraPref.isAvalaraIntegration();
        }
        /*
         * Void tax committed to AvaTax in case Avalara Integration is enabled
         */
        if (isAvalaraIntegration && invoice.isIsTaxCommittedOnAvalara()) {
            //void tax committed to AvaTax in case Avalara Integration is enabled and tax has been committed for Invoice
            if(!cancelTaxOnAvalaraForInvoice(invoice, companyid)) {
                //If 'cancelTaxOnAvalaraForInvoice' method returns false, then Invoice is not to be deleted
                linkedTransaction += invoiceno + ", ";
                return linkedTransaction;
            }
        }
        
        StringBuffer journalEntryMsg = new StringBuffer();
        if (!StringUtil.isNullOrEmpty(entryno)) {
            journalEntryMsg.append(" along with the JE No. " + entryno);
        }
        /**
         * Method to check the payment is Reconciled or not according to its JE
         * id
         */
        requestParams.put("jeid", journalentryid);
        requestParams.put(Constants.companyKey, companyid);
        boolean isReconciledFlag = accBankReconciliationObj.isRecordReconciled(requestParams);
        if (isReconciledFlag) {
            throw new AccountingException(messageSource.getMessage("acc.reconcilation.Cannotdeletepayment", null, Locale.forLanguageTag(requestJobj.optString(Constants.language))) + " " + "<b>" + invoiceno + "</b>" + " " + messageSource.getMessage("acc.reconcilation.asitisreconciled", null, Locale.forLanguageTag(requestJobj.optString(Constants.language))));
        }

//            query = "update Invoice inv set inv.deleted=true where inv.ID in( " + qMarks + ") and inv.company.companyID=?";
//            HibernateUtil.executeUpdate(session, query, params.toArray());
        boolean iscash = StringUtil.isNullOrEmpty(requestJobj.optString("incash")) ? false : Boolean.parseBoolean(requestJobj.optString("incash"));
        boolean isReject = StringUtil.isNullOrEmpty(requestJobj.optString("isReject")) ? false : Boolean.parseBoolean(requestJobj.optString("isReject"));
        String actionMsg = Constants.deleted;
        if (isReject == true) {
            actionMsg = "Rejected";
        }
        
        try {
            result = accInvoiceDAOobj.deleteInvoiceEntry(invoiceid, companyid);
        } catch (AccountingException ex) {                // throw accounting exception if transaction date falls under locked accounring period and return transaction number.
            return linkedTransaction += invoiceno + ", ";
        }
        result = accInvoiceDAOobj.getJEFromInvoice(invoiceid);
        list = result.getEntityList();
        Iterator itr = list.iterator();
        String jeid;
        while (itr.hasNext()) {
            jeid = (String) itr.next();
                result = accJournalEntryobj.deleteJournalEntry(jeid, companyid);
            //Delete entry from optimized table
            accJournalEntryobj.deleteAccountJEs_optimized(jeid);
        }

        HashMap<String, Object> writeOffMap = new HashMap<String, Object>();
        writeOffMap.put("invoiceid", invoiceid);
        writeOffMap.put(Constants.companyKey, companyid);
        result = accWriteOffServiceDao.getWriteOffJEs(writeOffMap);
        List<InvoiceWriteOff> writeOffList = result.getEntityList();
        for (InvoiceWriteOff IWO : writeOffList) {
            jeid = IWO.getJournalEntry().getID();
            result = accJournalEntryobj.deleteJournalEntry(jeid, companyid);
        }

        result = accWriteOffServiceDao.getReverseWriteOffJEs(writeOffMap);
        writeOffList = result.getEntityList();
        for (InvoiceWriteOff IWO : writeOffList) {
            jeid = IWO.getReversejournalEntry().getID();
            result = accJournalEntryobj.deleteJournalEntry(jeid, companyid);
        }

//            query = "update Discount di set di.deleted=true  where di.ID in(select inv.discount.ID from Invoice inv where inv.ID in( " + qMarks + ") and inv.company.companyID=di.company.companyID) and di.company.companyID=?";
//            HibernateUtil.executeUpdate(session, query, params.toArray());
        result = accInvoiceDAOobj.getInvoiceDiscount(invoiceid);
        list = result.getEntityList();
        itr = list.iterator();
        while (itr.hasNext()) {
            String discountid = (String) itr.next();
            result = accDiscountobj.deleteDiscountEntry(discountid, companyid);
        }
//            query = "update Discount di set di.deleted=true  where di.ID in(select invd.discount.ID from InvoiceDetail invd where invd.invoice.ID in( " + qMarks + ") and invd.company.companyID=di.company.companyID) and di.company.companyID=?";
//            HibernateUtil.executeUpdate(session, query, params.toArray());
        result = accInvoiceDAOobj.getInvoiceDetailsDiscount(invoiceid);
        list = result.getEntityList();
        itr = list.iterator();
        while (itr.hasNext()) {
            String discountid = (String) itr.next();
            result = accDiscountobj.deleteDiscountEntry(discountid, companyid);
        }

//            query = "update Inventory inv set inv.deleted=true  where inv.ID in(select invd.inventory.ID from InvoiceDetail invd where invd.invoice.ID in( " + qMarks + ") and invd.company.companyID=inv.company.companyID) and inv.company.companyID=?";
//            HibernateUtil.executeUpdate(session, query, params.toArray());
        result = accInvoiceDAOobj.getInvoiceInventory(invoiceid);
        list = result.getEntityList();
        itr = list.iterator();
        while (itr.hasNext()) {
            String inventoryid = (String) itr.next();
            result = accProductObj.deleteInventoryEntry(inventoryid, companyid);
        }
        JSONObject repeatInvoiceParams=new JSONObject();

        repeatInvoiceParams.put("invoiceId",invoiceid);
        accInvoiceDAOobj.updateRepeatInvoice(repeatInvoiceParams);
        
        result = accJournalEntryobj.deleteJournalEntryReval(invoiceid, companyid);
        if (preferences.isInventoryAccountingIntegration() && !preferences.isWithInvUpdate()) {

            String action = "17";
            boolean isDirectUpdateInvFlag = false;
            if (preferences.isUpdateInvLevel()) {
                isDirectUpdateInvFlag = true;
                action = "19";//Direct Inventory Update action
            }

            JSONArray productArray = new JSONArray();

            Set<InvoiceDetail> invoiceDetails = invoice.getRows();
            for (InvoiceDetail invoiceDetail : invoiceDetails) {
                JSONObject productObject = new JSONObject();
                productObject.put("itemUomId", invoiceDetail.getInventory().getUom().getID());
                productObject.put("itemBaseUomRate", invoiceDetail.getInventory().getBaseuomrate());
                productObject.put("itemQuantity", invoiceDetail.getInventory().getBaseuomquantity());
                productObject.put(Constants.quantity, invoiceDetail.getInventory().getQuantity());
                //productObject.put("itemQuantity", invoiceDetail.getInventory().getQuantity());
                productObject.put("itemCode", invoiceDetail.getInventory().getProduct().getProductid());
                if (isDirectUpdateInvFlag) {
                    productObject.put("storeid", invoiceDetail.getInvstoreid());
                    productObject.put("locationid", invoiceDetail.getInvlocid());
                }
                productArray.put(productObject);
                }
            if (productArray.length() > 0) {

                String sendDateFormat = Constants.yyyyMMdd;
                DateFormat dateformat = new SimpleDateFormat(sendDateFormat);
//                Date date = invoice.getJournalEntry().getEntryDate();
                Date date = invoice.getCreationDate();
                String stringDate = dateformat.format(date);

                JSONObject jSONObject = new JSONObject();
                jSONObject.put("deliveryDate", stringDate);
                jSONObject.put("dateFormat", sendDateFormat);
                jSONObject.put("details", productArray);
                jSONObject.put("orderNumber", invoice.getInvoiceNumber());
                jSONObject.put("companyId", companyid);
                jSONObject.put("selling", true);

                ServletContext servletContext = (ServletContext) requestJobj.get("servletContext");
                String url = servletContext.getInitParameter("inventoryURL");
                CommonFnController cfc = new CommonFnController();
                cfc.updateInventoryLevel(requestJobj, jSONObject, url, action);
            }
        }
        
        /*
         *Set Flag intersotretrasfer is false if invoice is deleteing which is created from Aged order work report.
         */
        Set<InvoiceDetail> invoiceDetails = invoice.getRows();
        for (InvoiceDetail invoiceDetail : invoiceDetails) {
            if (invoiceDetail.getInterstoretransferId() != null) {
                accInvoiceDAOobj.updateIsJobWorkClose(invoiceDetail.getInterstoretransferId(), companyid);
            }
        }
        
        String audtmsg = "";
        if (isFixedAsset) {
            audtmsg = " " + messageSource.getMessage("erp.navigate.AssetDisposalInvoice", null, Locale.forLanguageTag(requestJobj.optString(Constants.language))) + " ";
        } else if (isConsignment) {
            audtmsg = " " + messageSource.getMessage("acc.field.ConsignmentSalesInvoice", null, Locale.forLanguageTag(requestJobj.optString(Constants.language))) + " ";
        } else if (isLeaseFixedAsset) {
            audtmsg = " " + messageSource.getMessage("acc.field.LeaseSalesInvoice", null, Locale.forLanguageTag(requestJobj.optString(Constants.language))) + " ";
        } else {
            audtmsg = " " + messageSource.getMessage("acc.field.SalesInvoice", null, Locale.forLanguageTag(requestJobj.optString(Constants.language))) + " ";
        }
        Map<String, Object> auditParamsMap = new HashMap();
        auditParamsMap.put(Constants.companyKey, requestJobj.optString(Constants.companyKey));
        auditParamsMap.put(Constants.useridKey, requestJobj.optString(Constants.useridKey));
        auditParamsMap.put(Constants.remoteIPAddress, requestJobj.optString(Constants.remoteIPAddress));
        auditParamsMap.put(Constants.reqHeader, requestJobj.optString(Constants.reqHeader));
        if (!iscash) {
            auditTrailObj.insertAuditLog(AuditAction.INVOICE_DELETED, "User " + requestJobj.optString(Constants.userfullname) + " has " + actionMsg + audtmsg + invoiceno + journalEntryMsg.toString(), auditParamsMap, invoiceid);
        } else {
            auditTrailObj.insertAuditLog(AuditAction.CASH_SALES_DELETED, "User " + requestJobj.optString(Constants.userfullname) + " has " + actionMsg + " Cash Sales  " + invoiceno + journalEntryMsg.toString(), auditParamsMap, invoiceid);
        }

        return linkedTransaction;
    }
    
    /**
     * Method to void tax committed to AvaTax in case Avalara Integration is enabled
     * @param invoice
     * @param companyid
     * @return
     * @throws AccountingException 
     */
    private boolean cancelTaxOnAvalaraForInvoice (Invoice invoice, String companyid) throws AccountingException, JSONException {
        String invoiceno = invoice.getInvoiceNumber();
        JSONObject tempReqJobj = new JSONObject();
        tempReqJobj.put("CancelCode", "DocDeleted");
        tempReqJobj.put("DocType", "SalesInvoice");
        tempReqJobj.put("DocCode", invoiceno);
        tempReqJobj.put("moduleid", String.valueOf(Constants.Acc_Invoice_ModuleId));
        tempReqJobj.put(IntegrationConstants.integrationPartyIdKey, IntegrationConstants.integrationPartyId_AVALARA);
        tempReqJobj.put(Constants.companyKey, companyid);
        try {
            tempReqJobj.put(IntegrationConstants.integrationOperationIdKey, IntegrationConstants.avalara_getTransaction);
            JSONObject avalaraTransactionJobj = integrationCommonService.processIntegrationRequest(tempReqJobj);
            if (avalaraTransactionJobj != null && avalaraTransactionJobj.optBoolean("isLocked", false)) {
                return false;
            } else {
                tempReqJobj.put(IntegrationConstants.integrationOperationIdKey, IntegrationConstants.avalara_cancelTax);
                JSONObject cancelAvalaraTaxResponse = integrationCommonService.processIntegrationRequest(tempReqJobj);
                if (cancelAvalaraTaxResponse.optBoolean(Constants.RES_success, false)) {
                    JSONObject tempJobj = new JSONObject();
                    tempJobj.put("isTaxCommittedOnAvalara", false);
                    tempJobj.put("invoiceid", invoice.getID());
                    try {
                        accInvoiceDAOobj.updateInvoice(tempJobj, null);
                    } catch (Exception ex) {
                        throw new AccountingException("<br><br><b>NOTE:</b> Invoice with invoice number " + "<b>" + invoiceno + "</b>" + " could not be deleted because tax committed to AvaTax was voided but isTaxCommittedOnAvalara flag could not be updated for invoice.");
                    }
                } else {
                    throw new AccountingException();
                }
            }
        } catch (Exception ex) {
            throw new AccountingException("<br><br><b>NOTE:</b> " + (StringUtil.isNullOrEmpty(ex.getMessage()) ? "Invoice with invoice number " + "<b>" + invoiceno + "</b>" + " could not be deleted because tax committed to AvaTax could not be voided." : ex.getMessage()));
        }
        return true;
    }

    @Transactional(propagation = Propagation.REQUIRED, rollbackFor = {ServiceException.class, SessionExpiredException.class, JSONException.class, AccountingException.class, ParseException.class})
    public String deleteInvoicePermanent(String linkedTransaction, JSONObject jobj, JSONObject requestJobj, String companyid, boolean isFixedAsset, boolean isLeaseFixedAsset, boolean isConsignment, boolean auditcheck, int countryid, CompanyAccountPreferences preferences) throws ServiceException, AccountingException, SessionExpiredException, ParseException, JSONException {
        String invoiceid = "", journalentryid = "", entryno = "", invoiceno = "";
        String deletedWrittenOffJe = "";
        String msgForDeletedWriteOffJe = "";
        String deletedWrittenOffRecoveredJe = "";
        String msgForDeletedRecoveredWriteOffJe = "";
        String lockPeriodStr = "";
        invoiceid = jobj.getString(Constants.billid);
        KwlReturnObject res = accountingHandlerDAOobj.getObject(Invoice.class.getName(), invoiceid);
        Invoice invoice = (Invoice) res.getEntityList().get(0);
        entryno = invoice.getJournalEntry().getEntryNumber();
        invoiceno = invoice.getInvoiceNumber();
        journalentryid = invoice.getJournalEntry().getID();
        DateFormat dateFormatForLock = authHandler.getDateOnlyFormat();
        Date entryDateForLock = null;
        entryDateForLock = invoice.getJournalEntry().getEntryDate();
	PayDetail paydetail = invoice.getPayDetail();
        HashMap<String, Object> requestParams = new HashMap<String, Object>();
        requestParams.put("invoiceid", invoiceid);
        requestParams.put(Constants.companyKey, companyid);
        requestParams.put("entryno", entryno);
        requestParams.put("journalentryid", journalentryid);
        requestParams.put(Constants.isFixedAsset, isFixedAsset);
        requestParams.put(Constants.isLeaseFixedAsset, isLeaseFixedAsset);
        requestParams.put(Constants.isConsignment, isConsignment);
        requestParams.put("trasactionNo", invoiceno);
        if (entryDateForLock != null) {
            requestParams.put("entrydate", entryDateForLock);
            requestParams.put("df", dateFormatForLock);
        }
        /**
         * Method to check the payment is Reconciled or not according to its JE
         * id
         */
        requestParams.put("jeid", journalentryid);
        boolean isPaymentReconciledFlag = accBankReconciliationObj.isRecordReconciled(requestParams);
        if (isPaymentReconciledFlag) {
            throw new AccountingException(messageSource.getMessage("acc.reconcilation.Cannotdeletepayment", null, Locale.forLanguageTag(requestJobj.optString(Constants.language))) + " " + "<b>" + invoiceno + "</b>" + " " + messageSource.getMessage("acc.reconcilation.asitisreconciled", null, Locale.forLanguageTag(requestJobj.optString(Constants.language))));
        }
        accBankReconciliationObj.deleteUnReconciliationRecords(requestParams);
        KwlReturnObject result;
        if (!StringUtil.isNullOrEmpty(invoiceid)) {
            result = accCreditNoteDAOobj.getCNFromInvoice(invoiceid, companyid);
            List list = result.getEntityList();
            if (!list.isEmpty()) {
                linkedTransaction += "<a onclick='linkinfo(\"" + invoice.getID() + "\",\"false\",\"Customer\",\"" + invoiceno + "\",\"true\",\"" + isFixedAsset + "\",\"2\")'href='#'>" + invoiceno + "</a> ,";
                return linkedTransaction;
                //throw new AccountingException(messageSource.getMessage("acc.nee.60", null, RequestContextUtils.getLocale(request)));
            }

            boolean includeTempDeleted = true;
            result = accCreditNoteDAOobj.getCNFromInvoiceOtherwise(invoiceid, companyid,includeTempDeleted);
            list = result.getEntityList();                 //while deleting invoice check wether it is used in credit note
            if (!list.isEmpty()) {
                linkedTransaction += "<a onclick='linkinfo(\"" + invoice.getID() + "\",\"false\",\"Customer\",\"" + invoiceno + "\",\"true\",\"" + isFixedAsset + "\",\"2\")'href='#'>" + invoiceno + "</a> ,";
                return linkedTransaction;
                //throw new AccountingException(messageSource.getMessage("acc.nee.60", null, RequestContextUtils.getLocale(request)));
            }

            result = accInvoiceDAOobj.getDOFromInvoice(invoiceid, companyid);
            list = result.getEntityList();
            if (!list.isEmpty()) {
                linkedTransaction += "<a onclick='linkinfo(\"" + invoice.getID() + "\",\"false\",\"Customer\",\"" + invoiceno + "\",\"true\",\"" + isFixedAsset + "\",\"2\")'href='#'>" + invoiceno + "</a> ,";
                return linkedTransaction;
                //throw new AccountingException(messageSource.getMessage("acc.nee.67", null, RequestContextUtils.getLocale(request)));
            }
            
//            Company company = (Company) kwlCommonTablesDAOObj.getClassObject(Company.class.getName(), companyid);
//            boolean isMalaysian = company != null ? company.getCountry().getID().equalsIgnoreCase("137") : false;
//            if (isMalaysian) {
                KwlReturnObject linkedDebitNoteResult = accInvoiceDAOobj.getDebitNoteLinkedWithInvoice(invoiceid, companyid);
                list = linkedDebitNoteResult.getEntityList();
                if (!list.isEmpty()) {                        //while deleting invoice check wether it is used in Debit note
                    linkedTransaction += "<a onclick='linkinfo(\"" + invoice.getID() + "\",\"false\",\"Customer\",\"" + invoiceno + "\",\"true\",\"" + isFixedAsset + "\",\"2\")'href='#'>" + invoiceno + "</a> ,";
                    return linkedTransaction;
                }
//            }
            result = accInvoiceDAOobj.getCreditNoteForOverchargeLinkedWithInvoice(invoiceid, companyid);
            list = result.getEntityList();
            if (list != null && !list.isEmpty()) {
                linkedTransaction += "<a onclick='linkinfo(\"" + invoice.getID() + "\",\"false\",\"Customer\",\"" + invoiceno + "\",\"true\",\"" + isFixedAsset + "\",\"2\")'href='#'>" + invoiceno + "</a> ,";
                return linkedTransaction;
            }
        

            HashMap<String, Object> receiptMap = new HashMap<String, Object>();

            receiptMap.put("invoiceid", invoiceid);
            receiptMap.put(Constants.companyKey, companyid);

            result = accReceiptDAOobj.getReceiptFromInvoice(receiptMap);
            list = result.getEntityList();
            if (!list.isEmpty()) {
                linkedTransaction += "<a onclick='linkinfo(\"" + invoice.getID() + "\",\"false\",\"Customer\",\"" + invoiceno + "\",\"true\",\"" + isFixedAsset + "\",\"2\")'href='#'>" + invoiceno + "</a> ,";
                return linkedTransaction;
                //throw new AccountingException(messageSource.getMessage("acc.nee.61", null, RequestContextUtils.getLocale(request)));
            }
            result = accInvoiceDAOobj.getSRFromInvoice(invoiceid, companyid);
            list = result.getEntityList();
            if (!list.isEmpty()) {
                linkedTransaction += "<a onclick='linkinfo(\"" + invoice.getID() + "\",\"false\",\"Customer\",\"" + invoiceno + "\",\"true\",\"" + isFixedAsset + "\",\"2\")'href='#'>" + invoiceno + "</a> ,";
                return linkedTransaction;
                //throw new AccountingException(messageSource.getMessage("acc.nee.71", null, RequestContextUtils.getLocale(request)));
            }

            // Check if invoice has been claimed or recovered then it should not be delete
            // for Malasian Company
            HashMap<String, Object> badMaps = new HashMap<String, Object>();
            badMaps.put(Constants.companyKey, companyid);
            badMaps.put("invoiceid", invoiceid);

            result = accInvoiceDAOobj.getBadDebtInvoiceMappingForInvoice(badMaps);
            list = result.getEntityList();
            if (!list.isEmpty()) {
                linkedTransaction += "<a onclick='linkinfo(\"" + invoice.getID() + "\",\"false\",\"Customer\",\"" + invoiceno + "\",\"true\",\"" + isFixedAsset + "\",\"2\")'href='#'>" + invoiceno + "</a> ,";
                return linkedTransaction;
            }

            // Check if invoice has been used in Delivery Planner
            result = accInvoiceDAOobj.getInvoiceFromDeliveryPlanner(invoiceid, companyid);
            list = result.getEntityList();
            if (!list.isEmpty()) {
                linkedTransaction += "<a onclick='linkinfo(\"" + invoice.getID() + "\",\"false\",\"Customer\",\"" + invoiceno + "\",\"true\",\"" + isFixedAsset + "\",\"2\")'href='#'>" + invoiceno + "</a> ,";
                return linkedTransaction;
            }

            boolean isAvalaraIntegration = false;
            result = accountingHandlerDAOobj.getObject(ExtraCompanyPreferences.class.getName(), companyid);
            if (result != null && result.getEntityList() != null && !result.getEntityList().isEmpty() && result.getEntityList().get(0) != null) {
                ExtraCompanyPreferences extraPref = (ExtraCompanyPreferences) result.getEntityList().get(0);
                isAvalaraIntegration = extraPref.isAvalaraIntegration();
            }
            /*
             * Void tax committed to AvaTax in case Avalara Integration is enabled
             */
            if (isAvalaraIntegration && invoice.isIsTaxCommittedOnAvalara()) {
                //void tax committed to AvaTax in case Avalara Integration is enabled and tax has been committed for Invoice
                if (!cancelTaxOnAvalaraForInvoice(invoice, companyid)) {
                    //If 'cancelTaxOnAvalaraForInvoice' method returns false, then Invoice is not to be deleted
                    linkedTransaction += "<a onclick='linkinfo(\"" + invoice.getID() + "\",\"false\",\"Customer\",\"" + invoiceno + "\",\"true\",\"" + isFixedAsset + "\",\"2\")'href='#'>" + invoiceno + "</a> ,";
                    return linkedTransaction;
                }
            }

            HashMap<String, Object> doRequestParams = new HashMap<String, Object>();
            ArrayList filter_names = new ArrayList(), filter_params = new ArrayList();
            filter_names.add("invoice.ID");
            filter_params.add(invoice.getID());
            doRequestParams.put("filter_names", filter_names);
            doRequestParams.put("filter_params", filter_params);
            String linkid = "";
            KwlReturnObject idresult = accInvoiceDAOobj.getInvoiceDetails(doRequestParams);
            Iterator itr = idresult.getEntityList().iterator();
            while (itr.hasNext()) {
                InvoiceDetail row = (InvoiceDetail) itr.next();
                if (row.getSalesorderdetail() != null) {
                    linkid = row.getSalesorderdetail().getSalesOrder().getID();
                    if (!StringUtil.isNullOrEmpty(linkid)) {
                        KwlReturnObject rdresult = accountingHandlerDAOobj.getObject(SalesOrder.class.getName(), linkid);
                        SalesOrder salesOrder = (SalesOrder) rdresult.getEntityList().get(0);
                        HashMap hMap = new HashMap();
                        hMap.put("salesOrder", salesOrder);
                        hMap.put("value", "0");
                        hMap.put("isSOOpen", true);
                        accInvoiceDAOobj.updateSOLinkflag(hMap);

                        /*--If dropship SI is deleted then SO linked with same SI should not be manually closed now---- */
                        if (row.getSalesorderdetail().getSalesOrder().isIsDropshipDocument()) {
                            row.getSalesorderdetail().getSalesOrder().setIsSOClosed(false);
                        }
                    }
                } else if (row.getDeliveryOrderDetail() != null) {
                    linkid = row.getDeliveryOrderDetail().getDeliveryOrder().getID();
                    if (!StringUtil.isNullOrEmpty(linkid)) {
                        KwlReturnObject rdresult = accountingHandlerDAOobj.getObject(DeliveryOrder.class.getName(), linkid);
                        DeliveryOrder deliveryOrder = (DeliveryOrder) rdresult.getEntityList().get(0);
                        HashMap hMap = new HashMap();
                        hMap.put("deliveryOrder", deliveryOrder);
                        hMap.put("isOpen", true);
                        accInvoiceDAOobj.updateDeliveryOrderStatus(hMap);
                    }
                }
                /*
                 *Set Flag intersotretrasfer is false if invoice is deleteing which is created from Aged order work report.
                 */
                if (row.getInterstoretransferId() != null) {
                    accInvoiceDAOobj.updateIsJobWorkClose(row.getInterstoretransferId(), companyid);
                }
            }

            /**
             * Delete InvoiceDetails-Avalara Tax Mapping
             */
            if (isAvalaraIntegration && !list.isEmpty()) {
                deleteAvalaraTaxMappingForInvoice(new HashSet<InvoiceDetail>(idresult.getEntityList()));
            }
            
            if (preferences.isInventoryAccountingIntegration() && !preferences.isWithInvUpdate()) {

                String action = "17";
                boolean isDirectUpdateInvFlag = false;
                if (preferences.isUpdateInvLevel()) {
                    isDirectUpdateInvFlag = true;
                    action = "19";//Direct Inventory Update action
                }

                JSONArray productArray = new JSONArray();

                Set<InvoiceDetail> invoiceDetails = invoice.getRows();
                for (InvoiceDetail invoiceDetail : invoiceDetails) {
                    JSONObject productObject = new JSONObject();
                    productObject.put("itemUomId", invoiceDetail.getInventory().getUom().getID());
                    productObject.put("itemBaseUomRate", invoiceDetail.getInventory().getBaseuomrate());
                    productObject.put("itemQuantity", invoiceDetail.getInventory().getBaseuomquantity());
                    productObject.put(Constants.quantity, invoiceDetail.getInventory().getQuantity());
                    //productObject.put("itemQuantity", invoiceDetail.getInventory().getQuantity());
                    productObject.put("itemCode", invoiceDetail.getInventory().getProduct().getProductid());
                    if (isDirectUpdateInvFlag) {
                        productObject.put("storeid", invoiceDetail.getInvstoreid());
                        productObject.put("locationid", invoiceDetail.getInvlocid());
                    }
                    productArray.put(productObject);
                }
                if (productArray.length() > 0) {

                    String sendDateFormat = Constants.yyyyMMdd;
                    DateFormat dateformat = new SimpleDateFormat(sendDateFormat);
//                    Date date = invoice.getJournalEntry().getEntryDate();
                    Date date = invoice.getCreationDate();
                    String stringDate = dateformat.format(date);

                    JSONObject jSONObject = new JSONObject();
                    jSONObject.put("deliveryDate", stringDate);
                    jSONObject.put("dateFormat", sendDateFormat);
                    jSONObject.put("details", productArray);
                    jSONObject.put("orderNumber", invoice.getInvoiceNumber());
                    jSONObject.put("companyId", companyid);
                    jSONObject.put("selling", true);

                    ServletContext servletContext = (ServletContext) requestJobj.get("servletContext");
                    String url = servletContext.getInitParameter("inventoryURL");
                    CommonFnController cfc = new CommonFnController();
                    cfc.updateInventoryLevel(requestJobj, jSONObject, url, action);
                }
            }

            // Check if invoice has been used in TAX Payment For India Company 
            if (countryid == Constants.indian_country_id) {
                result = accInvoiceDAOobj.getTaxPaymentFromInvoice(invoiceid, companyid);
                list = result.getEntityList();
                if (!list.isEmpty()) {
                    linkedTransaction += invoiceno + " ,";
                    return linkedTransaction;
                }
            }

            if (isConsignment) {
                accInvoiceDAOobj.deleteInvoicesBatchSerialDetails(requestParams);
            }
            result = accJournalEntryobj.permanentDeleteJournalEntryDetailReval(invoiceid, companyid);
            result = accJournalEntryobj.permanentDeleteJournalEntryReval(invoiceid, companyid);

            String reconsilationID = "";
            String unReconsilationID = "";

            //Deleting  BankReconciliationDetail
            KwlReturnObject reconsiledDetails = accBankReconciliationObj.getBRfromJE(journalentryid, companyid, true);
            if (reconsiledDetails.getRecordTotalCount() > 0) {
                List<BankReconciliationDetail> brd = reconsiledDetails.getEntityList();
                for (BankReconciliationDetail reconciliation : brd) {
                    accBankReconciliationObj.permenantDeleteBankReconciliationDetail(reconciliation.getID(), companyid);
                    reconsilationID = reconciliation.getBankReconciliation().getID();
                }
            }

            //Deleting  BankUnreconciliationDetail
            KwlReturnObject unReconsiledDetails = accBankReconciliationObj.getBankUnReconsiledfromJE(journalentryid, companyid, true);
            if (unReconsiledDetails.getRecordTotalCount() > 0) {
                List<BankUnreconciliationDetail> brd = unReconsiledDetails.getEntityList();
                for (BankUnreconciliationDetail reconciliation : brd) {
                    accBankReconciliationObj.permenantDeleteBankUnReconciliationDetail(reconciliation.getID(), companyid);
                    unReconsilationID = reconciliation.getBankReconciliation().getID();
                }
            }
            if (!StringUtil.isNullOrEmpty(reconsilationID)) {
                accBankReconciliationObj.deleteBankReconciliation(reconsilationID, companyid);
            }
            if (!StringUtil.isNullOrEmpty(unReconsilationID)) {
                accBankReconciliationObj.deleteBankReconciliation(unReconsilationID, companyid);
            }

            boolean iscash = StringUtil.isNullOrEmpty(requestJobj.optString("incash")) ? false : Boolean.parseBoolean(requestJobj.optString("incash"));
            HashMap<String, Object> writeOffMap = new HashMap<String, Object>();
            writeOffMap.put("invoiceid", invoiceid);
            writeOffMap.put(Constants.companyKey, companyid);
            KwlReturnObject writeOffJeResult = accWriteOffServiceDao.getWriteOffJEs(writeOffMap);
            List<InvoiceWriteOff> IWO = writeOffJeResult.getEntityList();
            for (InvoiceWriteOff iwo : IWO) {
                deletedWrittenOffJe += iwo.getJournalEntry().getEntryNumber() + ",";
            }
            if (!deletedWrittenOffJe.equals("")) {
                deletedWrittenOffJe = deletedWrittenOffJe.substring(0, deletedWrittenOffJe.length() - 1);
                msgForDeletedWriteOffJe = messageSource.getMessage("acc.invoiceDelete.DeletedWriteOffJE", null, Locale.forLanguageTag(requestJobj.optString(Constants.language))) + " " + deletedWrittenOffJe;
            }

            writeOffJeResult = accWriteOffServiceDao.getWriteOffJEs(writeOffMap);
            IWO = writeOffJeResult.getEntityList();
            for (InvoiceWriteOff iwo : IWO) {
                deletedWrittenOffRecoveredJe += iwo.getReversejournalEntry().getEntryNumber() + ",";
            }

            if (!deletedWrittenOffRecoveredJe.equals("")) {
                deletedWrittenOffRecoveredJe = deletedWrittenOffRecoveredJe.substring(0, deletedWrittenOffRecoveredJe.length() - 1);
                msgForDeletedRecoveredWriteOffJe = messageSource.getMessage("acc.invoiceDelete.DeletedWriteOffRecoveredJE", null, Locale.forLanguageTag(requestJobj.optString(Constants.language))) + " " + deletedWrittenOffRecoveredJe;
            }
            StringBuffer journalEntryMsg = new StringBuffer();
            if (!StringUtil.isNullOrEmpty(entryno)) {
                journalEntryMsg.append(" along with the JE No. " + entryno);
            }
            accInvoiceDAOobj.deleteLinkingInformationOfSI(requestParams);
            
            /**
             * Check if transaction date falls under Accounting Locking Period. return linkedTransaction with transaction Id.
             */
            lockPeriodStr = beforeDeleteInvoicePermanent(requestParams);   // ERP-38423
//            accInvoiceDAOobj.deleteInvoicePermanent(requestParams);
            if (!StringUtil.isNullOrEmpty(lockPeriodStr)) {
                linkedTransaction += lockPeriodStr;
                return linkedTransaction;
            }
            //Delete the Payment Details associated with Cash Sales only        
            if (paydetail != null) {
                HashMap<String, Object> paydetailMap = new HashMap<>();
                paydetailMap.put("companyid", companyid);
                paydetailMap.put("chequeid", paydetail.getCheque() != null ? paydetail.getCheque().getID() : "");
                paydetailMap.put("cardid", paydetail.getCard() != null ? paydetail.getCard().getID() : "");
                paydetailMap.put("paydetailid", paydetail.getID());
                accBankReconciliationObj.deleteCashPayDetails(paydetailMap);
            }

            String audtmsg = "";
            if (isFixedAsset) {
                audtmsg = " has deleted Asset Disposal Invoice Permanently ";
            } else if (isLeaseFixedAsset) {
                audtmsg = " has deleted Lease Sales Invoice Permanently ";
            } else if (isConsignment) {
                audtmsg = " has deleted Consignment Sales Invoice Permanently ";
            } else {
                audtmsg = " has deleted Sales Invoice Permanently ";
            }
            if (auditcheck) {
                Map<String, Object> auditParamsMap = new HashMap();
                auditParamsMap.put(Constants.companyKey, requestJobj.optString(Constants.companyKey));
                auditParamsMap.put(Constants.useridKey, requestJobj.optString(Constants.useridKey));
                auditParamsMap.put(Constants.remoteIPAddress, requestJobj.optString(Constants.remoteIPAddress));
                auditParamsMap.put(Constants.reqHeader, requestJobj.optString(Constants.reqHeader));
                if (!iscash) {
                    auditTrailObj.insertAuditLog(AuditAction.INVOICE_DELETED, "User " + requestJobj.optString(Constants.userfullname) + audtmsg + invoiceno + journalEntryMsg.toString() + ". " + msgForDeletedWriteOffJe + " " + msgForDeletedRecoveredWriteOffJe, auditParamsMap, invoiceid);
                } else {
                    auditTrailObj.insertAuditLog(AuditAction.CASH_SALES_DELETED, "User " + requestJobj.optString(Constants.userfullname) + " has deleted Cash Sales Permanently. " + invoiceno + journalEntryMsg.toString(), auditParamsMap, invoiceid);
                }
            }
        }

        return linkedTransaction;
    }
    /**
     * @Info Check Accounting Locking period before deleting record.
     * @param requestParams
     * @return
     * @throws ServiceException
     * @throws AccountingException
     */
    public String beforeDeleteInvoicePermanent(HashMap<String, Object> requestParams) throws ServiceException, AccountingException {
        String linkedTransaction = "";
        String transactionNo = requestParams.get("trasactionNo") != null ? (String) requestParams.get("trasactionNo") : "";
        String transactionId = requestParams.get("invoiceid") != null ? (String) requestParams.get("invoiceid") : "";
        try {
            accInvoiceDAOobj.deleteInvoicePermanent(requestParams);
        } catch (AccountingException ex) {
            if (!StringUtil.isNullOrEmpty(transactionNo)) {
                linkedTransaction += "<a onclick='linkinfo(\"" + transactionId + "\",\"false\",\"Vendor\",\"" + transactionNo + "\",\"true\",\"6\")'href='#'>" + transactionNo + "</a> ,";
            }
        }
        return linkedTransaction;
    }
    
    private void deleteAvalaraTaxMappingForInvoice(Set<InvoiceDetail> invoiceDetailSet) throws ServiceException, JSONException {
        List invoiceDetailIDsList = new ArrayList<String>();
        for (InvoiceDetail invoiceDetail : invoiceDetailSet) {
            invoiceDetailIDsList.add(invoiceDetail.getID());
        }
        //to create a comma separated string of InvoiceDetail IDs for 'IN' subquery
        String invoiceDetailIDsStr = org.springframework.util.StringUtils.collectionToDelimitedString(invoiceDetailIDsList, ",", "'", "'");
        JSONObject avalaraTaxDeleteJobj = new JSONObject();
        avalaraTaxDeleteJobj.put(IntegrationConstants.parentRecordID, invoiceDetailIDsStr);
        integrationCommonService.deleteTransactionDetailTaxMapping(avalaraTaxDeleteJobj);
    }
    
    @Override /* if pick pack is on for delivery order*/
    public String getDOBatchJsonUsingIST(Map<String, Object> requestParams) throws ServiceException,JSONException{
        String batchdetails = "";
        batchdetails = getBatchJsonUsingIST(requestParams);
        return batchdetails;
    }
    
    public void getInvoiceCustomDataForPayment(HashMap<String, Object> request, JSONObject obj, Invoice invoice, JournalEntry je) throws ServiceException {
        try {
            String companyid = (String) request.get(Constants.companyKey);
            HashMap<String, Object> fieldrequestParams = new HashMap();
            HashMap<String, String> customFieldMap = new HashMap<>();
            HashMap<String, String> customDateFieldMap = new HashMap<>();
            HashMap<String, String> replaceFieldMap = new HashMap<>();
            KwlReturnObject custumObjresult = null;
            fieldrequestParams.put(Constants.filter_names, Arrays.asList(Constants.companyid, Constants.moduleid, Constants.customcolumn));
            fieldrequestParams.put(Constants.filter_values, Arrays.asList(companyid, Constants.Acc_Invoice_ModuleId, 0));
            HashMap<String, Integer> FieldMap = accAccountDAOobj.getFieldParamsCustomMap(fieldrequestParams, replaceFieldMap, customFieldMap, customDateFieldMap);
            if (invoice.isNormalInvoice()) {
                Map<String, Object> variableMap = new HashMap<>();
                custumObjresult = accountingHandlerDAOobj.getObject(AccJECustomData.class.getName(), je.getID());
                replaceFieldMap = new HashMap<>();
                if (custumObjresult != null && custumObjresult.getEntityList().size() > 0) {
                    AccJECustomData jeDetailCustom = (AccJECustomData) custumObjresult.getEntityList().get(0);
                    if (jeDetailCustom != null) {
                        AccountingManager.setCustomColumnValues(jeDetailCustom, FieldMap, replaceFieldMap, variableMap);
                        JSONObject params = new JSONObject();
                        params.put(Constants.companyKey, companyid);
                        params.put(Constants.isLink, true);
                        if (request.containsKey(Constants.requestModuleId) && request.get(Constants.requestModuleId) != null) {
                            params.put(Constants.linkModuleId, request.get(Constants.requestModuleId));
                        }
                        fieldDataManagercntrl.addCustomData(variableMap, customFieldMap, customDateFieldMap, obj, params);
                    }
                }
            }
        } catch (Exception ex) {
            throw ServiceException.FAILURE("AccInvoiceServiceImpl.getInvoiceCustomDataForPayment : " + ex.getMessage(), ex);
        }
    }

    @Override
    public double getExchangeRateForSpecificCurrency(JSONObject requestJobj) throws JSONException, ServiceException, ParseException {
        Date billDate = null;
        double exchangeRateForTransaction = 1;
        SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd");
        if(!StringUtil.isNullOrEmpty(requestJobj.optString("transactionDate")))
        {
            billDate = formatter.parse(requestJobj.optString("transactionDate"));
        }
        String currencyID = requestJobj.optString("currId");
        Map<String, Object> currMap = new HashMap<>();
        currMap.put("applydate", billDate);
        currMap.put("gcurrencyid", requestJobj.getString(Constants.globalCurrencyKey));
        currMap.put("companyid", requestJobj.getString(Constants.companyKey));
        KwlReturnObject retObj = accCurrencyDAOobj.getExcDetailID(currMap, currencyID, billDate, null);
        if (retObj != null && !retObj.getEntityList().isEmpty()) {
            List<ExchangeRateDetails> li = retObj.getEntityList();
            for(ExchangeRateDetails erd : li) {
                if (erd != null) {
                exchangeRateForTransaction = erd.getExchangeRate();
            }
                break;
        }
        }
        return exchangeRateForTransaction;
    }
    
   @Override
    @Transactional(propagation = Propagation.REQUIRED, rollbackFor = {ServiceException.class, JSONException.class, AccountingException.class, ServiceException.class})
    public JSONObject generateGRNFromMultipleDO(JSONObject paramJObj) throws ServiceException, SessionExpiredException, JSONException {
        JSONObject returnObj = new JSONObject();
        JSONArray billidjArray = new JSONArray();
        DateFormat df = authHandler.getDateOnlyFormat();
        StringBuilder billidString = new StringBuilder();
        String successMsg = null;
        String failureMsg = null;
        boolean isSuccess = false;
        try {
            String companyid = paramJObj.getString(Constants.companyKey);
            String userid = paramJObj.getString(Constants.useridKey);
            String companyCurrency = paramJObj.getString(Constants.globalCurrencyKey);

            JSONObject sequenceFormatJSON = wsUtilService.getSequenceFormatId(paramJObj, String.valueOf(Constants.Acc_Goods_Receipt_ModuleId));
            if (StringUtil.isNullOrEmpty(sequenceFormatJSON.optString(Constants.sequenceformat, null))) {
                throw ServiceException.FAILURE(messageSource.getMessage("acc.common.setSeqNoGRNOrder", null, Locale.forLanguageTag(paramJObj.getString(Constants.language))), "", false);
            }

            boolean islinkedflag=false;
            HashSet<String> billidGROSet=new HashSet();
            StringBuilder billnoString = new StringBuilder();
            String records = paramJObj.optString("recs", null);
            if (!StringUtil.isNullOrEmpty(records)) {
                billidjArray = new JSONArray(records);
                for (int i = 0; i < billidjArray.length(); i++) {
                    JSONObject jobj = billidjArray.getJSONObject(i);
                    if (jobj.has(Constants.billid) && jobj.get(Constants.billid) != null) {
                        billidString.append(jobj.get(Constants.billid) + ",");
                    }
                }
                String selectedBillIds = null;
                if (billidString.length() > 0) {
                    selectedBillIds = billidString.toString();
                    selectedBillIds = selectedBillIds.substring(0, selectedBillIds.length() - 1);
                }

                if (!StringUtil.isNullOrEmpty(selectedBillIds)) {
                    Map<String, Object> returnHashMap = accGroupCompanyDAO.checkEntryForDeliveryOrderinGRO(selectedBillIds,companyid);
                    if (returnHashMap.containsKey("sourceGROBillidSet") && returnHashMap.get("sourceGROBillidSet") != null) {
                        billidGROSet = (HashSet) returnHashMap.get("sourceGROBillidSet");
                        if (billidGROSet.size() > 0) {
                            islinkedflag = true;
                        }
                    }
                    
                    if (islinkedflag) {//If it is already linked then showing the message GRN is already autogenerated with selected SalesOrder
                        for (String grid : billidGROSet) {
                            KwlReturnObject groObjReturn = accountingHandlerDAOobj.getObject(GoodsReceiptOrder.class.getName(), grid);
                            GoodsReceiptOrder grnObj = (GoodsReceiptOrder) groObjReturn.getEntityList().get(0);
                            if (billnoString.length() > 0) {
                                billnoString.append(",");
                            }
                            billnoString.append(grnObj.getGoodsReceiptOrderNumber());
                        }
                        String msgBillno = billnoString.toString().substring(0, billnoString.toString().length());
                        String modifiedString = "GoodsReceipt Order <b>" + msgBillno + "</b> has already been autogenerated with selected Delivery Order. Please select another record.";
                        throw ServiceException.FAILURE(modifiedString, "", false);
                    }
                    
                    if (!islinkedflag) {
                        Map<String, Object> detailParams = new HashMap<String, Object>();
                        paramJObj.put(GroupCompanyProcessMapping.DESTINATION_MODULE, Constants.Acc_Goods_Receipt_ModuleId);
                        paramJObj.put(GroupCompanyProcessMapping.SOURCE_MODULE, Constants.Acc_Delivery_Order_ModuleId);
                        detailParams.put("selectedBillIds", selectedBillIds);
                        Map<String, Object> detailsMap = accGroupCompanyDAO.getDetailsProductsid(paramJObj, detailParams);

                        JSONArray detailsArray = new JSONArray();
                        if (detailsMap.containsKey(Constants.detail) && detailsMap.get(Constants.detail) != null) {
                            String detailsid = (String) detailsMap.get(Constants.detail);
                            detailsArray = new JSONArray(detailsid);
                        }
                        Set<String> vendorIdSet = new HashSet<String>();
                        if (detailsMap.containsKey("vendorIdList") && detailsMap.get("vendorIdList") != null) {
                            List vendorIdList = (List) detailsMap.get("vendorIdList");
                            vendorIdSet = new HashSet(vendorIdList);// Convert list into set
                        }

                        if (detailsArray.length() > 0 && vendorIdSet.size() > 0) {
                            StringBuilder msgStringBuilder = new StringBuilder();// used for msgbuilder
                            Object[] venObj = vendorIdSet.toArray();
                            for (Object vendid : venObj) {

                                JSONArray modifiedDetailJsonArray = new JSONArray();//preparing lineitemdetail for saving purchase order
                                JSONObject requestJson = new JSONObject();
                                boolean globalLevelFieldsFlag = false; // flag to check whether global fields detials have been saved successfully or not
                                boolean isGstIncluded = false;//gst included case
                                boolean includeProTax = false;//include product Tax flag
                                boolean globalLevelTax = false;//global level Tax flag
                                HashSet<String> linkedBillidsSet = new HashSet<String>();
                                HashSet<String> billidsSet = new HashSet<String>();

                                String vendTaxId = null;//Vendor Tax Id
                                double subTotal = 0.0;
                                double lineLevelTax = 0.0;
                                for (int i = 0; i < detailsArray.length(); i++) {
                                    JSONObject detailsjobj = detailsArray.getJSONObject(i);
                                    if (detailsjobj.has(Constants.vendorid) && detailsjobj.get(Constants.vendorid) != null && detailsjobj.getString(Constants.vendorid).equalsIgnoreCase((String) vendid)) {
                                        JSONObject modifiedDetailJson = new JSONObject();

                                        if (!globalLevelFieldsFlag) {
                                            requestJson.put(Constants.companyKey, companyid);
                                            requestJson = wsUtilService.getSequenceFormatId(requestJson, String.valueOf(Constants.Acc_Goods_Receipt_ModuleId));
                                            Map<String, Object> seqNumberMap = new HashMap<String, Object>();
                                            seqNumberMap = accCompanyPreferencesObj.getNextAutoNumber_Modified(requestJson.optString(Constants.companyKey), StaticValues.AUTONUM_GOODSRECEIPTORDER, requestJson.optString(Constants.sequenceformat), false, new Date());
                                            if (!seqNumberMap.isEmpty()) {
                                                requestJson.put("number", (String) seqNumberMap.get(Constants.AUTO_ENTRYNUMBER));
                                            } else {
                                                requestJson.put("number", "");
                                            }

                                            requestJson.put("isEdit", "false");
                                            requestJson.put("vendor", (String) vendid);
                                            requestJson.put(Constants.useridKey, userid);
                                            requestJson.put(Constants.globalCurrencyKey, companyCurrency);
                                            requestJson.put(Constants.userfullname, paramJObj.getString(Constants.userfullname));
                                            requestJson.put(Constants.COMPANY_SUBDOMAIN, paramJObj.getString(Constants.COMPANY_SUBDOMAIN));
                                            requestJson.put(Constants.language, paramJObj.getString(Constants.language));
                                            requestJson.put(Constants.remoteIPAddress, paramJObj.getString(Constants.remoteIPAddress));
                                            requestJson.put(Constants.reqHeader, paramJObj.getString(Constants.reqHeader));

                                            KwlReturnObject vendorReturnObj = accountingHandlerDAOobj.getObject(Vendor.class.getName(), (String) vendid);
                                            Vendor vendorObj = (Vendor) vendorReturnObj.getEntityList().get(0);
                                            String vendCurr = vendorObj.getCurrency().getCurrencyID();
                                            vendTaxId = vendorObj.getTaxid();
                                            if (vendorObj.getDebitTerm() != null && !StringUtil.isNullOrEmpty(vendorObj.getDebitTerm().getID())) {
                                                requestJson.put("term", vendorObj.getDebitTerm().getID());
                                            }
                                            if (!StringUtil.isNullOrEmpty(vendCurr)) {
                                                requestJson.put(Constants.currencyKey, vendCurr);
                                            } else {
                                                requestJson.put(Constants.currencyKey, companyCurrency);
                                            }


                                            if (vendCurr.equalsIgnoreCase(companyCurrency)) {
                                                requestJson.put(Constants.externalcurrencyrate, "1.0");
                                            } else {
                                                JSONObject exchangeRateJson = new JSONObject();
                                                exchangeRateJson.put("transactionDate", vendorObj.getCreatedOn());
                                                exchangeRateJson.put("currId", vendCurr);
                                                exchangeRateJson.put(Constants.globalCurrencyKey, companyCurrency);
                                                exchangeRateJson.put(Constants.companyKey, companyid);
                                                double exchangeRateForSpecificFields = getExchangeRateForSpecificCurrency(exchangeRateJson);
                                                requestJson.put(Constants.externalcurrencyrate, String.valueOf(exchangeRateForSpecificFields));
                                            }
                                            globalLevelFieldsFlag = true;
                                        }//end of globalLevelFieldsFlag

                                        DeliveryOrder doObj = null;
                                        if (detailsjobj.has(Constants.billid) && detailsjobj.get(Constants.billid) != null) {
                                            KwlReturnObject doObjResult = accountingHandlerDAOobj.getObject(DeliveryOrder.class.getName(), (String) detailsjobj.get(Constants.billid));
                                            doObj = (DeliveryOrder) doObjResult.getEntityList().get(0);
                                            if (!isGstIncluded && doObj!=null) {
                                                isGstIncluded = doObj.isGstIncluded();
                                                if (isGstIncluded) {
                                                    includeProTax = true;
                                                }
                                            }

                                            if (doObj!=null&& doObj.getTax() != null && !StringUtil.isNullOrEmpty(doObj.getTax().getID()) && !globalLevelTax) {
                                                globalLevelTax = true;
                                                if (!StringUtil.isNullOrEmpty(vendTaxId)) {
                                                    requestJson.put(Constants.TAXID, vendTaxId);
                                                }
                                            }

                                            if (includeProTax || isGstIncluded) {
                                                globalLevelTax = false;
                                                requestJson.put(Constants.TAXID, "");
                                            }
                                        }

                                        if (detailsjobj.has("sourcepoid") && detailsjobj.get("sourcepoid") != null) {
                                            linkedBillidsSet.add(detailsjobj.getString("sourcepoid")); //purchase order link id
                                        }

                                        if(doObj!=null){
                                           billidsSet.add(doObj.getID()); //purchase order link id
                                        }
                                        
                                        if (billidsSet.size()!=1) {
                                            requestJson.put(Constants.memo, "");
                                            requestJson.put(Constants.fob, "");
                                            requestJson.put(Constants.shipdate, "");
                                            requestJson.put(Constants.posttext, "");
                                            requestJson.put(Constants.BillDate, df.format(new Date()));
                                            requestJson.put(Constants.duedate, df.format(new Date()));
                                            requestJson.put(Constants.shipvia,"");

                                        } else if (billidsSet.size()==1) {//for one product
                                            if (doObj != null) {
                                                requestJson.put(Constants.memo, doObj.getMemo());
                                                requestJson.put(Constants.fob, doObj.getFob());
                                                requestJson.put(Constants.shipvia,!StringUtil.isNullOrEmpty(doObj.getShipvia())?doObj.getShipvia():"");
                                                
                                                if (doObj.getShipdate() != null) {
                                                    requestJson.put(Constants.shipdate, df.format(doObj.getShipdate()));
                                                } else {
                                                    requestJson.put(Constants.shipdate, "");
                                                }
                                                
                                                if (doObj.getOrderDate() != null) {
                                                    requestJson.put(Constants.BillDate, df.format(doObj.getOrderDate()));
                                                } else {
                                                    requestJson.put(Constants.BillDate, "");
                                                }
//                                                requestJson.put(Constants.shipdate, df.format(doObj.getShipdate()));
                                                requestJson.put(Constants.posttext, doObj.getPostText());
//                                                requestJson.put(Constants.BillDate, df.format(doObj.getOrderDate()));
                                                requestJson.put("costcenter", doObj.getCostcenter() != null ? doObj.getCostcenter().getID() : "");
                                            }
                                        }
                                        if (detailsjobj.has(Constants.productid) && detailsjobj.get(Constants.productid) != null) {
                                            modifiedDetailJson.put(Constants.productid, (String) detailsjobj.get(Constants.productid));
                                        }

                                        if (detailsjobj.has("detailid") && detailsjobj.get("detailid") != null) {

                                            PurchaseOrder proObj = null;
                                            if (detailsjobj.has("sourcepodetailid") && detailsjobj.get("sourcepodetailid") != null) {
                                                modifiedDetailJson.put("savedrowid", (String) detailsjobj.get("sourcepodetailid"));
                                                modifiedDetailJson.put("rowid", (String) detailsjobj.get("sourcepodetailid"));//linkdetailid
                                                KwlReturnObject poreturnObj = accountingHandlerDAOobj.getObject(PurchaseOrder.class.getName(), (String) detailsjobj.get("sourcepodetailid"));
                                                proObj = (PurchaseOrder) poreturnObj.getEntityList().get(0);
                                            }
//                                            else {
//                                                throw ServiceException.FAILURE(messageSource.getMessage("acc.common.purchaseOrderNotPresent", null, Locale.forLanguageTag(paramJObj.getString(Constants.language))), "", false);
//                                            }
                                            KwlReturnObject rdresult = accountingHandlerDAOobj.getObject(DeliveryOrderDetail.class.getName(), (String) detailsjobj.get("detailid"));
                                            DeliveryOrderDetail dodetails = (DeliveryOrderDetail) rdresult.getEntityList().get(0);
                                            if (dodetails != null) {
                                                modifiedDetailJson.put(Constants.externalcurrencyrate, requestJson.optString(Constants.externalcurrencyrate));

                                                if (proObj != null) {
                                                    modifiedDetailJson.put("linkto", proObj.getPurchaseOrderNumber());
                                                }
                                                modifiedDetailJson.put("sourcedeliveryorderdetailsid", (String) detailsjobj.get("detailid"));//linkdetailid
                                                modifiedDetailJson.put("rate", dodetails.getRate());
                                                modifiedDetailJson.put("rateIncludingGst", dodetails.getRateincludegst());
                                                modifiedDetailJson.put("quantity", dodetails.getActualQuantity());
                                                modifiedDetailJson.put("dquantity", dodetails.getDeliveredQuantity());
                                                modifiedDetailJson.put("baseuomquantity", dodetails.getBaseuomquantity());
                                                modifiedDetailJson.put("baseuomdeliveredquantity", dodetails.getBaseuomdeliveredquantity());
                                                modifiedDetailJson.put("baseuomrate", dodetails.getBaseuomrate());
                                                modifiedDetailJson.put("uomid", dodetails.getUom().getID());
                                                modifiedDetailJson.put("remark", dodetails.getRemark());
                                                modifiedDetailJson.put("desc", dodetails.getDescription());
                                                modifiedDetailJson.put("description", dodetails.getDescription());
                                                modifiedDetailJson.put("remark", dodetails.getRemark());
//                                            modifiedDetailJson.put("reason", dodetails.get);
                                                modifiedDetailJson.put("prdiscount", dodetails.getDiscount());
                                                modifiedDetailJson.put("discountispercent", dodetails.getDiscountispercent());

                                                int discountType = dodetails.getDiscountispercent();
                                                double prdiscount = dodetails.getDiscount();
                                                double baseuomquantity = dodetails.getBaseuomquantity();
                                                double rate = dodetails.getRate();
                                                modifiedDetailJson.put("rate", dodetails.getRate());
                                                if (isGstIncluded) {
                                                    rate = dodetails.getRateincludegst() != 0.0 ? dodetails.getRateincludegst() : rate;
                                                }
                                                modifiedDetailJson.put("rateIncludingGst", rate);
                                                double rowamount = (rate * baseuomquantity);
                                                double rowdiscountvalue = (discountType == 1) ? rowamount * prdiscount / 100 : prdiscount;
                                                rowamount = rowamount - rowdiscountvalue;
                                                subTotal += rowamount; //calculating subtotal


                                                String producttaxid = dodetails.getTax() != null ? dodetails.getTax().getID() : "";
                                                if (!StringUtil.isNullOrEmpty(producttaxid)) {
                                                    includeProTax = true;
                                                }

                                                if (includeProTax && !StringUtil.isNullOrEmpty(vendTaxId) && !StringUtil.isNullOrEmpty(producttaxid)) {
                                                    modifiedDetailJson.put("prtaxid", vendTaxId); //putting vendor tax id at linelevel
                                                    Map<String, Object> taxParams = new HashMap<String, Object>();
                                                    taxParams.put(Constants.companyKey, companyid);
                                                    taxParams.put("taxid", vendTaxId);//sodetails tax

                                                    //To get tax percent of mapped tax
                                                    KwlReturnObject taxPresult = accTaxObj.getTax(taxParams);
                                                    List<Object[]> list = taxPresult.getEntityList();
                                                    double taxpercent = 0.0;
                                                    if (list != null && !list.isEmpty()) {
                                                        for (Object[] row : list) {
                                                            taxpercent = (Double) row[1];
                                                        }
                                                    }
                                                    double taxamount = 0.0;

                                                    if (isGstIncluded) {
                                                        if (taxpercent != 0) {
                                                            rate = (rate * 100) / (100 + taxpercent);
                                                            taxamount = (taxpercent * rate) / 100;
                                                            modifiedDetailJson.put("taxamount", taxamount);
                                                        } else {
                                                            modifiedDetailJson.put("taxamount", 0);
                                                        }
                                                    } else {
                                                        if (taxpercent != 0) {
                                                            taxamount = (taxpercent * rowamount) / 100;
                                                            modifiedDetailJson.put("taxamount", taxamount);
                                                        } else {
                                                            modifiedDetailJson.put("taxamount", 0);
                                                        }
                                                    }
                                                    lineLevelTax += taxamount;
                                                } else {
                                                    modifiedDetailJson.put("prtaxid", ""); //putting vendor tax id at linelevel
                                                    modifiedDetailJson.put("taxamount", 0.0);
                                                }//end of include pro tax
                                                modifiedDetailJsonArray.put(modifiedDetailJson);
                                            }
                                        }
                                    }
                                }
                                if (requestJson.length() > 0 && modifiedDetailJsonArray.length() > 0) {//also checking lineitem details
                                    if (globalLevelTax && !StringUtil.isNullOrEmpty(vendTaxId)) {//global level tax
                                        requestJson.put("taxid", vendTaxId); //putting vendor tax id at global level 
                                        Map<String, Object> taxParams = new HashMap<String, Object>(); //calculating global level tax id
                                        taxParams.put(Constants.companyKey, companyid);
                                        taxParams.put("taxid", vendTaxId);//sodetails tax
                                        //To get tax percent of mapped tax
                                        KwlReturnObject taxPresult = accTaxObj.getTax(taxParams);
                                        List<Object[]> list = taxPresult.getEntityList();
                                        double taxpercent = 0.0;
                                        double taxamount = 0;
                                        if (list != null && !list.isEmpty()) {
                                            for (Object[] row : list) {
                                                taxpercent = (Double) row[1];
                                            }
                                        }
                                        if (taxpercent != 0) {
                                            taxamount = (taxpercent * subTotal) / 100;
                                            requestJson.put("taxamount", taxamount);
                                        } else {
                                            requestJson.put("taxamount", 0);
                                        }
                                    } else {
                                        requestJson.put("taxamount", 0);
                                    } //end of include protax
                                    requestJson.put("detail", modifiedDetailJsonArray.toString());
                                    requestJson.put("subTotal", subTotal);
                                    requestJson.put("includeprotax", String.valueOf(includeProTax));
                                    requestJson.put(Constants.PAGE_URL, paramJObj.optString(Constants.PAGE_URL));

                                    if (linkedBillidsSet.size() > 0) {
                                        //if linkedmoduleid is not null and linked document has some value
                                        StringBuilder linkNumberBuilderString = new StringBuilder();//to track linked documentsid
                                        for (String linkid : linkedBillidsSet) {
                                            if (linkNumberBuilderString.length() > 0) {
                                                linkNumberBuilderString.append("," + linkid);
                                            } else {
                                                linkNumberBuilderString.append(linkid);
                                            }
                                        }
                                        requestJson.put(GroupCompanyProcessMapping.linkedTransactionBillid, linkNumberBuilderString.toString());
                                        requestJson.put(GroupCompanyProcessMapping.LinkModule_Combo, Constants.ACC_PURCHASE_ORDER);
                                    }
                                    returnObj = accGoodsReceiptModuleService.saveGoodsReceiptOrder(requestJson);
                                    if (returnObj.has("billno") && !StringUtil.isNullOrEmpty(returnObj.optString("billno", null)) && returnObj.has(Constants.billid) && !StringUtil.isNullOrEmpty(returnObj.optString(Constants.billid, null))) {
                                        KwlReturnObject groreturnObj = accountingHandlerDAOobj.getObject(GoodsReceiptOrder.class.getName(), returnObj.optString(Constants.billid));
                                        GoodsReceiptOrder groObj = (GoodsReceiptOrder) groreturnObj.getEntityList().get(0);
                                        if (groObj != null && groObj.getVendor() != null) {
                                            KwlReturnObject vendorReturnObj = accountingHandlerDAOobj.getObject(Vendor.class.getName(), groObj.getVendor().getID());
                                            Vendor vendorObj = (Vendor) vendorReturnObj.getEntityList().get(0);
                                            if (vendorObj != null) {
                                                if (msgStringBuilder.length() > 0) {
                                                    msgStringBuilder.append(" and "); //showing message for multiple vendors along with name 
                                                }
                                                msgStringBuilder.append("Goods Receipt Order " + returnObj.optString("billno") + " with Vendor " + vendorObj.getName());
                                                isSuccess = true;
                                            } else {
                                                throw ServiceException.FAILURE(messageSource.getMessage("acc.groupCompany.consolidate.error", null, Locale.forLanguageTag(paramJObj.getString(Constants.language))), "", false);
                                            }//end of vendor obj null
                                        }//end of poObj != null && poObj.getVendor() != null
                                    }//end of billid & billno if block check
                                }//end of requestJson.length() > 0 && modifiedDetailJsonArray.length() > 0
                            } //end of for (Object vendid : venObj)
                            if (isSuccess) {
                                successMsg = messageSource.getMessage("acc.po.save1", null, Locale.forLanguageTag(paramJObj.getString(Constants.language))) + "<br/>" + messageSource.getMessage("acc.field.DocumentNo", null, Locale.forLanguageTag(paramJObj.getString(Constants.language))) + ": <b>" + msgStringBuilder.toString() + "</b>";
                            }

                        }// end of if (detailsArray.length() > 0 && vendorIdSet.size() > 0
                        else{
                         throw ServiceException.FAILURE("Products are not mapped to any Vendor.", "", false);
                        }
                    }//end of linked flag
                }//end of if (!StringUtil.isNullOrEmpty(selectedBillIds)
            } else {
                throw ServiceException.FAILURE(messageSource.getMessage("acc.groupCompany.consolidate.error", null, Locale.forLanguageTag(paramJObj.getString(Constants.language))), "", false);
            }
        } catch (ServiceException ex) {
            failureMsg=ex.getMessage();
        } catch (Exception ex) {
            failureMsg=ex.getMessage();
            Logger.getLogger(AccInvoiceServiceImpl.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            returnObj.put(Constants.RES_msg,!StringUtil.isNullOrEmpty(successMsg)?successMsg:(!StringUtil.isNullOrEmpty(failureMsg)?failureMsg:""));
            returnObj.put(Constants.RES_success, isSuccess);
        }
        return returnObj;
    }
   
   @Override
   //Moved from controllercmn actual get Invoices fucntion for link Combo FIeld
    public JSONObject getInvoices(JSONObject paramJobj) {
        JSONObject jobj = new JSONObject();
        boolean issuccess = false;
        String msg = "", start = null, limit = null;
        try {
            HashMap requestParams = AccInvoiceServiceHandler.getInvoiceRequestMapJson(paramJobj);
            KwlReturnObject extracapresult = accountingHandlerDAOobj.getObject(ExtraCompanyPreferences.class.getName(), paramJobj.optString(Constants.companyKey));
            ExtraCompanyPreferences extraCompanyPreferences = (ExtraCompanyPreferences) extracapresult.getEntityList().get(0);
            if (paramJobj.optString("requestModuleid",null) != null && !StringUtil.isNullOrEmpty(paramJobj.optString("requestModuleid"))) {
                int requestModuleID = Integer.parseInt(paramJobj.optString("requestModuleid"));
                if (extraCompanyPreferences.isEnableLinkToSelWin()) {
                    requestParams.put("requestModuleid", requestModuleID);
                }
                if (extraCompanyPreferences.isEnableLinkToSelWin() && !Boolean.parseBoolean(paramJobj.optString("isGrid")) && (requestModuleID == Constants.Acc_Delivery_Order_ModuleId || requestModuleID == Constants.Acc_Sales_Return_ModuleId || requestModuleID == Constants.Acc_FixedAssets_DeliveryOrder_ModuleId)) {
                    requestParams.put("start", "0");
                    requestParams.put("limit", "10");
                    start = "0";
                    limit = "10";
                } else if (extraCompanyPreferences.isEnableLinkToSelWin() && Boolean.parseBoolean(paramJobj.optString("isGrid"))) {
                    requestParams.put("start", (String)paramJobj.optString("start"));
                    requestParams.put("limit", (String)paramJobj.optString("limit"));
                }
            }
            boolean contraentryflag = paramJobj.optString("contraentryflag") != null;
            String accid = paramJobj.optString(InvoiceConstants.accid);
            boolean CashAndInvoice = paramJobj.optString("CashAndInvoice") != null ? Boolean.FALSE.parseBoolean(paramJobj.optString("CashAndInvoice")) : false;
            String invoicesForNoteEditMode = paramJobj.optString("invoicesForNoteEditMode",null);
            String noteId = paramJobj.optString("noteId",null);
            /*
             * ERP-3689 Parameter invoicesForNoteEditMode is used to skip the
             * invoices which are allready linked in CN Because such invoices
             * are included at the last of this function
             */
            if (!StringUtil.isNullOrEmpty(noteId) && !StringUtil.isNullOrEmpty(invoicesForNoteEditMode)) {
                JSONObject CNInvoicesJsonObj = getCreditNoteInvoices(paramJobj);
                JSONArray CNInvoicesArray = CNInvoicesJsonObj.optJSONArray(Constants.data);
                String InvoiceIdsUsedInCn = "";
                for (int i = 0; i < CNInvoicesArray.length(); i++) {
                    JSONObject obj = CNInvoicesArray.optJSONObject(i);
                    InvoiceIdsUsedInCn += "'" + obj.optString(Constants.billid) + "'" + ",";
                }
                InvoiceIdsUsedInCn = InvoiceIdsUsedInCn.length() > 0 ? InvoiceIdsUsedInCn.substring(0, InvoiceIdsUsedInCn.length() - 1) : InvoiceIdsUsedInCn;
                requestParams.put("invoiceIdToSkip", InvoiceIdsUsedInCn);
            }
            if (contraentryflag && !StringUtil.isNullOrEmpty(accid)) {//Replace mapped customerid for selected vendor.
                HashMap<String, Object> requestParams1 = new HashMap<String, Object>();
                requestParams1.put("vendoraccountid", accid);
                KwlReturnObject result = accCusVenMapDAOObj.getCustomerVendorMapping(requestParams1);
                Iterator itr = result.getEntityList().iterator();
                String newAccid = accid;
                while (itr.hasNext()) {
                    CustomerVendorMapping cvMapping = (CustomerVendorMapping) itr.next();
                    newAccid = cvMapping.getCustomeraccountid().getID();
                }
                requestParams.put(InvoiceConstants.accid, newAccid);
            }
            requestParams.put("CashAndInvoice", CashAndInvoice);
            if (paramJobj.optString("minimumAmountDue",null) != null) {
                requestParams.put("minimumAmountDue", Double.parseDouble(paramJobj.optString("minimumAmountDue").toString()));
            }
            if (paramJobj.optString("cashonly",null) != null) {
                requestParams.put("cashonly", paramJobj.optString("cashonly").toString());
            }
            boolean doflag = false, salesPurchaseReturnflag = false; //now we are handling open close logic from Link information table
            if (!StringUtil.isNullOrEmpty(paramJobj.optString("doflag",null))) {
                doflag = true;
                requestParams.put("doflag", doflag);
            }
            if (!StringUtil.isNullOrEmpty(paramJobj.optString("salesPurchaseReturnflag",null))) {
                salesPurchaseReturnflag = true;
                requestParams.put("salesPurchaseReturnflag", salesPurchaseReturnflag);
            }
            if (extraCompanyPreferences.getCompany().getCountry().getID().equals(String.valueOf(Constants.indian_country_id)) && !StringUtil.isNullOrEmpty(paramJobj.optString("isForm402"))) {
                boolean isForm402 = Boolean.parseBoolean(paramJobj.optString("isForm402").toString());
                requestParams.put("isForm402", isForm402);
            }
            if (!StringUtil.isNullOrEmpty(paramJobj.optString("getRecordBasedOnJEDate",null))) {
                requestParams.put("getRecordBasedOnJEDate", paramJobj.optString("getRecordBasedOnJEDate"));
            }
            
            //Done for POS-ERP-39363
            if (!StringUtil.isNullOrEmpty(paramJobj.optString(Constants.storeid,null))) {
                requestParams.put(Constants.storeid, paramJobj.optString(Constants.storeid));
            }

            KwlReturnObject result = accInvoiceDAOobj.getInvoices(requestParams);
            List list = result.getEntityList();
            JSONArray DataJArr = new JSONArray();
//            DataJArr = getInvoiceJson(request, list).getJSONArray(Constants.data);
            DataJArr = getInvoiceJson(paramJobj, list).getJSONArray(Constants.data);
            String cntype = !StringUtil.isNullOrEmpty(paramJobj.optString("cntype",null)) ? paramJobj.optString("cntype") : "";      //do not display opening invoice while linking it with for debit note against customer only for malaysian country ERP-27284 / ERP-28249
            JSONArray openingBalanceInvoicesJsonArray = new JSONArray();
            if (!cntype.equals("5")) {
//                openingBalanceInvoicesJsonArray = getOpeningBalanceInvoicesJsonArray(request, DataJArr);
                openingBalanceInvoicesJsonArray = getOpeningBalanceInvoicesJsonArray(paramJobj, DataJArr);
            }

            boolean fullPaidFlag = StringUtil.getBoolean(paramJobj.optString("fullPaidFlag"));
            if (fullPaidFlag) {
                JSONArray temp = new JSONArray();
                for (int i = 0; i < DataJArr.length(); i++) {
                    if (DataJArr.getJSONObject(i).getDouble("amountdue") == 0) {
                        temp.put(DataJArr.getJSONObject(i));
                    }
                }
                DataJArr = temp;
            } else if (paramJobj.optString("minimumAmountDue",null) != null) {
                JSONArray temp = new JSONArray();
                double minimumAmountDue = Double.parseDouble(paramJobj.optString("minimumAmountDue").toString());
                for (int i = 0; i < DataJArr.length(); i++) {
                    if (DataJArr.getJSONObject(i).getDouble("amountdue") >= minimumAmountDue) {
                        temp.put(DataJArr.getJSONObject(i));
                    }
                }
                DataJArr = temp;
            }
            /*
             * ERP-3689 Below code is written to add those invoices which are
             * linked to some CN This is done because, system is fetching those
             * invoices having amount due =0 There fore above code fetches
             * invoices with amount due>0 and below code fetches the invoice
             * used in CN even thay have amount due =0 This is for EDIT case od
             * CN
             */
            if (!StringUtil.isNullOrEmpty(noteId) && !StringUtil.isNullOrEmpty(invoicesForNoteEditMode)) {
//                JSONObject CNInvoicesJsonObj = getCreditNoteInvoices(request);
                JSONObject CNInvoicesJsonObj = getCreditNoteInvoices(paramJobj);
                JSONArray CNInvoicesArray = CNInvoicesJsonObj.optJSONArray(Constants.data);
                for (int i = 0; i < CNInvoicesArray.length(); i++) {
                    JSONObject obj = CNInvoicesArray.optJSONObject(i);
                    DataJArr.put(obj);
                }
            }
            int count = result.getRecordTotalCount();
            JSONArray pagedJson = DataJArr;
            if (doflag == false && salesPurchaseReturnflag == false) { //extraCompanyPreferences.isEnableLinkToSelWin() &&
                count = DataJArr.length();
                start = (start == null ? paramJobj.optString("start") : start);
                limit = (limit == null ? paramJobj.optString("limit") : limit);
                if (!StringUtil.isNullOrEmpty(start) && !StringUtil.isNullOrEmpty(limit)) {
                    pagedJson = StringUtil.getPagedJSON(pagedJson, Integer.parseInt(start), Integer.parseInt(limit));
                }
            }

            jobj.put(Constants.data, pagedJson);
            jobj.put("count", count);
            issuccess = true;
        } catch (Exception ex) {
            msg = "" + ex.getMessage();
            Logger.getLogger(accInvoiceController.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                jobj.put("success", issuccess);
                jobj.put("msg", msg);
            } catch (JSONException ex) {
                Logger.getLogger(accInvoiceController.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return jobj;
    } 
    
     public JSONObject getCreditNoteInvoices(JSONObject paramJobj) throws ServiceException, SessionExpiredException,JSONException {
        JSONObject jobj = new JSONObject();
        JSONArray jArray = new JSONArray();
        DateFormat df = authHandler.getOnlyDateFormat();
        HashMap<String, Object> requestParams = AccountingManager.getGlobalParamsJson(paramJobj);
        try {
            String crNoteId = paramJobj.optString("noteId",null);
            KwlReturnObject result = accountingHandlerDAOobj.getObject(CreditNote.class.getName(), crNoteId);
            CreditNote cn = (CreditNote) result.getEntityList().get(0);
            String companyid = paramJobj.optString(Constants.companyKey);

            if (cn != null) {
                Set<CreditNoteDetail> rows = cn.getRows();
                Set<CreditNoteDetail> Creditnotedetails = new TreeSet<CreditNoteDetail>(new SortCreditNoteDetail());
                Creditnotedetails.addAll(rows);
                
                HashMap<String, String> customFieldMap = new HashMap<>();
                HashMap<String, String> customDateFieldMap = new HashMap<>();

                HashMap<String, Object> fieldrequestParams = new HashMap();
                fieldrequestParams.put(Constants.filter_names, Arrays.asList(Constants.companyid, Constants.moduleid));
                fieldrequestParams.put(Constants.filter_values, Arrays.asList(companyid, Constants.Acc_Invoice_ModuleId));
                HashMap<String, String> replaceFieldMap = new HashMap<>();
                HashMap<String, Integer> FieldMap = accAccountDAOobj.getFieldParamsCustomMap(fieldrequestParams, replaceFieldMap, customFieldMap, customDateFieldMap);

                for (CreditNoteDetail detail : Creditnotedetails) {
                    JSONObject obj = new JSONObject();
                    if (detail.getInvoice() != null) {
                        obj.put("linkdetailid", detail.getID());

                        /*
                         * Checked Null for Invoice linked with Credit Note at
                         * the time of edit Credit Note which was created
                         * without selection any Invoice
                         */

                        obj.put(Constants.billid, detail.getInvoice() != null ? detail.getInvoice().getID() : "");
                        obj.put("billno", detail.getInvoice() != null ? detail.getInvoice().getInvoiceNumber() : "");
                        if (detail.getInvoice() != null) {
                            obj.put("taxamount", detail.getInvoice().getTaxEntry() == null ? 0 : detail.getInvoice().getTaxEntry().getAmount());
                        }


                        Discount disc = detail.getDiscount();
                        double exchangeratefortransaction = detail.getExchangeRateForTransaction();
                        double invoiceReturnedAmt = 0d;
                        if (disc != null) {
                            obj.put("invamount", authHandler.round(disc.getDiscountValue(), companyid));
                            invoiceReturnedAmt = disc.getAmountinInvCurrency();
                        } else {
                            obj.put("invamount", 0);
                        }

                        List ll = null;
                        double amountDueOriginal = 0;
                        if (detail.getInvoice() != null && detail.getInvoice().isIsOpeningBalenceInvoice() && !detail.getInvoice().isNormalInvoice()) {
                            ll = new ArrayList();
                            ll.add(detail.getInvoice() != null ? detail.getInvoice().getOpeningBalanceAmountDue() : 0);
                            ll.add(0.0);
                            ll.add(0.0);
                            ll.add(detail.getInvoice() != null ? detail.getInvoice().getOpeningBalanceAmountDue() : 0);
                            amountDueOriginal = detail.getInvoice() != null ? detail.getInvoice().getOriginalOpeningBalanceAmount() : 0;
                            obj.put("amount", detail.getInvoice() != null ? detail.getInvoice().getOriginalOpeningBalanceAmount() : 0);
                        } else {
                            if (Constants.InvoiceAmountDueFlag && detail.getInvoice() != null) {
                                ll = accInvoiceCommon.getInvoiceDiscountAmountInfo(requestParams, detail.getInvoice());
                            } else {
                                if (detail.getInvoice() != null) {
                                    ll = accInvoiceCommon.getAmountDue_Discount(requestParams, detail.getInvoice());
                            }
                            }
                            amountDueOriginal = detail.getInvoice() != null ? detail.getInvoice().getCustomerEntry().getAmount() : 0;
                            obj.put("amount", detail.getInvoice() != null ? detail.getInvoice().getCustomerEntry().getAmount() : 0);
                        }

                        double amountdue = 0;
                        if (cn.getApprovestatuslevel() != 11) {//pending approval CN : invoices used in such cn has amount due not knocked of so no need to add invoiceReturnedAmt
                            amountdue = detail.getInvoice() != null ? (Double) ll.get(3) : 0;
                        } else {
                            amountdue = detail.getInvoice() != null ? (Double) ll.get(3) + invoiceReturnedAmt : 0;// added invoiceReturnedAmt to show original value which was at time of creation. 
                        }
                        amountdue = amountdue * exchangeratefortransaction;
                        obj.put("amountdue", authHandler.round(amountdue, companyid));
                        obj.put("amountDueOriginal", authHandler.round(amountDueOriginal, companyid));
                        obj.put("exchangeratefortransaction", exchangeratefortransaction);
                        obj.put("currencysymbol", detail.getInvoice() != null ? detail.getInvoice().getCurrency().getSymbol() : "");
                        obj.put("currencysymbolpayment", cn.getCurrency().getSymbol());
                        obj.put("linkingdate",detail.getInvoiceLinkDate()!=null? df.format(detail.getInvoiceLinkDate()):"");
                        if (detail.getInvoice() != null) {
                            obj.put("invoicedate", df.format(detail.getInvoice().getCreationDate()));
                            //Credit Note Rec Name is date .
                            obj.put("date", df.format(detail.getInvoice().getCreationDate()));
                            /**
                             * Passing JE date in response for validating date
                             * on JS Side ERM-655.
                             */
                            obj.put("jeDate", detail.getInvoice().isIsOpeningBalenceInvoice() ? df.format(detail.getInvoice().getCreationDate()) : df.format(detail.getInvoice().getJournalEntry().getEntryDate()));
                        }
                        if (detail.getDiscount() != null) {
                            obj.put("typeFigure", detail.getDiscount().getTypeFigure());   // Figure calculated resctive to invoice amount due
                            obj.put("typeOfFigure", detail.getDiscount().getTypeOfFigure());  // Criteria of calculation for amount - Flat or Percentage
                        }
                        
                        //Get Normal Invoice Custom Data only
                        KwlReturnObject custumObjresult = null;
                        if (detail.getInvoice().isNormalInvoice()) {
                            Map<String, Object> variableMap = new HashMap<>();
                            custumObjresult = accountingHandlerDAOobj.getObject(AccJECustomData.class.getName(), detail.getInvoice().getJournalEntry().getID());
                            replaceFieldMap = new HashMap<>();
                            if (custumObjresult != null && custumObjresult.getEntityList().size() > 0) {
                                AccJECustomData jeDetailCustom = (AccJECustomData) custumObjresult.getEntityList().get(0);
                                if (jeDetailCustom != null) {
                                    AccountingManager.setCustomColumnValues(jeDetailCustom, FieldMap, replaceFieldMap, variableMap);
                                    JSONObject params = new JSONObject();
                                    fieldDataManagercntrl.addCustomData(variableMap, customFieldMap, customDateFieldMap, obj, params);
                                }
                            }
                        }
                        
                        jArray.put(obj);
                    }
                }
            }
            jobj.put(Constants.data, jArray);
        } catch (JSONException ex) {
            Logger.getLogger(accInvoiceController.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
        }
        return jobj;
    }
    
     public JSONArray getOpeningBalanceInvoicesJsonArray(JSONObject paramJobj, JSONArray DataJArr) {
        try {
            HashMap requestParams = AccInvoiceServiceHandler.getInvoiceRequestMapJson(paramJobj);
            DateFormat df = authHandler.getDateOnlyFormat();
            String companyid = paramJobj.optString(Constants.companyKey);
            KwlReturnObject extraprefresult = accountingHandlerDAOobj.getObject(ExtraCompanyPreferences.class.getName(), companyid);
            ExtraCompanyPreferences extraCompanyPreferences = extraprefresult != null ? (ExtraCompanyPreferences) extraprefresult.getEntityList().get(0) : null;
            String accountId = paramJobj.optString("accid",null);
            if (!StringUtil.isNullOrEmpty(accountId)) {
                requestParams.put(Constants.customerid, accountId);
            }
       
            boolean ignoreZero = requestParams.get("ignorezero") != null ? Boolean.parseBoolean(requestParams.get("ignorezero").toString()) : paramJobj.optString("ignorezero") != null;
            boolean onlyAmountDue = requestParams.get("onlyamountdue") != null;
            boolean doflag = paramJobj.optString("doflag",null) != null ? true : false;
            boolean forMonthWiseInvoice = paramJobj.optString("forMonthWiseInvoices",null) == null ?false:Boolean.parseBoolean(paramJobj.optString("forMonthWiseInvoices").toString());
            String months = paramJobj.optString("months",null)==null?"":paramJobj.optString("months").toString();
            
            Set<Integer> monthsSet = new HashSet<Integer>();
            if (forMonthWiseInvoice && !(StringUtil.isNullOrEmpty(months))) {
                String[] monthsArray = months.split(",");
                for (int i = 0; i < monthsArray.length; i++) {
                    monthsSet.add(Integer.parseInt(monthsArray[i]));
                }
            }
            boolean notlinkCNFromInvoiceFlag = false;
            if (!StringUtil.isNullOrEmpty(paramJobj.optString("notlinkCNFromInvoiceFlag",null))) {
                notlinkCNFromInvoiceFlag = Boolean.parseBoolean(paramJobj.optString("notlinkCNFromInvoiceFlag"));
            }
            boolean salesPurchaseReturnflag = false;
            if (!StringUtil.isNullOrEmpty(paramJobj.optString("salesPurchaseReturnflag",null))) {
                salesPurchaseReturnflag = Boolean.parseBoolean(paramJobj.optString("salesPurchaseReturnflag"));
            }

            KwlReturnObject curresult = accountingHandlerDAOobj.getObject(KWLCurrency.class.getName(), paramJobj.optString(Constants.globalCurrencyKey));
            KWLCurrency currency = (KWLCurrency) curresult.getEntityList().get(0);

            requestParams.put("df", df);
            if(paramJobj.optString("forMonthWiseInvoices",null) != null){
                requestParams.put("forMonthWiseInvoices",paramJobj.optString("forMonthWiseInvoices"));
            }
            /*
             * onlyclaimedamountdue is used for loading the invoices having amount due  = 0 but claimed amount due not equal to 0 
             */
            requestParams.put("onlyclaimedamountdue", true);
            KwlReturnObject result = accInvoiceDAOobj.getOpeningBalanceInvoicesExcludingNormalInvoices(requestParams);
            List<Invoice> list = result.getEntityList();
            boolean isInvoiceIsClaimed=false;
            double amountdue = 0.0d;
            for (Invoice invoice : list) {

                if (invoice.isNormalInvoice()) {//exclude normal invoices include only opening balance invoices
                    continue;
                }
                
                 isInvoiceIsClaimed = invoice.getBadDebtType() == Constants.Invoice_Claimed || invoice.getBadDebtType() == Constants.Invoice_Recovered;
                if (isInvoiceIsClaimed) {
                    amountdue = invoice.getClaimAmountDue();
                } else {
                    amountdue = invoice.getOpeningBalanceAmountDue();
                }
                Date invoiceCreationDate = null;
                invoiceCreationDate = invoice.getCreationDate();
                if (onlyAmountDue && authHandler.round(amountdue, companyid) == 0) {
                    continue;
                }
                Calendar cal = Calendar.getInstance();
                cal.setTime(invoiceCreationDate);
                int invoiceMonth = cal.get(Calendar.MONTH);
                if (forMonthWiseInvoice && !monthsSet.contains(invoiceMonth)) {
                    continue;
                }
                Double amountdueOverseas = 0.0;

                Account account = invoice.getCustomer().getAccount();
                String currencyid = (invoice.getCurrency() == null ? currency.getCurrencyID() : invoice.getCurrency().getCurrencyID());
                JSONObject obj = new JSONObject();

                double externalCurrencyRate = invoice.getExchangeRateForOpeningTransaction();
                boolean isopeningBalanceInvoice = invoice.isIsOpeningBalenceInvoice();

                obj.put(Constants.billid, invoice.getID());
                obj.put("isOpeningBalanceTransaction", invoice.isIsOpeningBalenceInvoice());
                obj.put("personid", invoice.getCustomer() == null ? account.getID() : invoice.getCustomer().getID());
                obj.put("personemail", invoice.getCustomer() == null ? "" : invoice.getCustomer().getEmail());
                obj.put("accid", account.getID());
                obj.put("accountid", invoice.getAccount() == null ? "" : invoice.getAccount().getID());
                obj.put("accountnames", invoice.getAccount() == null ? "" : invoice.getAccount().getName());
                obj.put("billno", invoice.getInvoiceNumber());
                obj.put("transectionno", invoice.getInvoiceNumber());
                obj.put(Constants.currencyKey, (invoice.getCurrency() == null ? "" : invoice.getCurrency().getCurrencyID()));
                obj.put("currencysymbol", (invoice.getCurrency() == null ? "" : invoice.getCurrency().getSymbol()));
                obj.put("currencyidtransaction",currencyid);
                obj.put("currencysymboltransaction", (invoice.getCurrency() == null ? currency.getSymbol() : invoice.getCurrency().getSymbol()));
                obj.put("companyaddress", invoice.getCompany().getAddress());
                obj.put("companyname", invoice.getCompany().getCompanyName());
                obj.put("linkingdate",df.format(new Date()));
                if (requestParams.containsKey("currencyfilterfortrans")&&requestParams.containsKey("isReceipt")) {
                    String currencyFilterForTrans = requestParams.get("currencyfilterfortrans") != null ? (String) requestParams.get("currencyfilterfortrans") : "";
                    KwlReturnObject currencyFilterResult = accountingHandlerDAOobj.getObject(KWLCurrency.class.getName(), currencyFilterForTrans);
                    KWLCurrency currencyFilter = (KWLCurrency) currencyFilterResult.getEntityList().get(0);
                    obj.put("currencyidpayment",currencyFilterForTrans);
                    obj.put("currencysymbolpayment", (currencyFilter == null ? currency.getSymbol() : currencyFilter.getSymbol()));
                }
                KwlReturnObject bAmt = null;
                //changd ship date to creation date as vendor side contains creation date
                if (isopeningBalanceInvoice && invoice.isConversionRateFromCurrencyToBase()) {// if invoice is opening balance invoice and Conversion rate is taken from user is Currency to base then following method will be called.
                    bAmt = accCurrencyDAOobj.getBaseToCurrencyAmountAccordingToCurrencyToBaseExchangeRate(requestParams, 1.0, currencyid, invoice.getCreationDate(), externalCurrencyRate);
                }else{
                    bAmt = accCurrencyDAOobj.getBaseToCurrencyAmount(requestParams, 1.0, currencyid, invoice.getCreationDate(), externalCurrencyRate);
                }
                
                obj.put("oldcurrencyrate", (Double) bAmt.getEntityList().get(0));
                obj.put("billto", "");
                obj.put("shipto", "");
                obj.put("journalentryid", "");
                obj.put("porefno", invoice.getPoRefNumber());
                obj.put("externalcurrencyrate", 0);
                obj.put("entryno", "");
                obj.put("date", df.format(invoice.getCreationDate()));
                obj.put("invoicedate", df.format(invoice.getCreationDate()));
                obj.put("creationdate", df.format(invoice.getCreationDate()));
                obj.put("shipdate", invoice.getShipDate() == null ? "" : df.format(invoice.getShipDate()));
                obj.put("duedate", df.format(invoice.getDueDate()));
                obj.put("personname", invoice.getCustomer() == null ? account.getName() : invoice.getCustomer().getName());
                obj.put("memo", "");
                obj.put("termname", invoice.getCustomer() == null ? "" : ((invoice.getCustomer().getCreditTerm()) == null) ? "" : invoice.getCustomer().getCreditTerm().getTermname());
                obj.put("deleted", invoice.isDeleted());
                obj.put("taxincluded", invoice.getTax() == null ? false : true);
                obj.put("taxid", invoice.getTax() == null ? "" : invoice.getTax().getID());
                obj.put("taxname", invoice.getTax() == null ? "" : invoice.getTax().getName());
                obj.put("taxamount", invoice.getTaxEntry() == null ? 0 : invoice.getTaxEntry().getAmount());
                obj.put("discount", invoice.getDiscount() == null ? 0 : invoice.getDiscount().getDiscountValue());
                obj.put("ispercentdiscount", invoice.getDiscount() == null ? false : invoice.getDiscount().isInPercent());
                obj.put("discountval", invoice.getDiscount() == null ? 0 : invoice.getDiscount().getDiscount());
                obj.put("costcenterid", "");
                obj.put("costcenterName", "");
                obj.put("shipvia", invoice.getShipvia() == null ? "" : invoice.getShipvia());
                obj.put("fob", invoice.getFob() == null ? "" : invoice.getFob());
                obj.put("amount", invoice.getOriginalOpeningBalanceAmount());
                if(invoice.getModifiedby()!=null){
                        obj.put("lasteditedby",StringUtil.getFullName(invoice.getModifiedby()));
                    }
                double amountinbase = 0;
                if (Constants.OpeningBalanceBaseAmountFlag) {
                    amountinbase = invoice.getOriginalOpeningBalanceBaseAmount();
                } else {
                    if (isopeningBalanceInvoice && invoice.isConversionRateFromCurrencyToBase()) {// if invoice is opening balance invoice and Conversion rate is taken from user is Currency to base then following method will be called.
                        bAmt = accCurrencyDAOobj.getCurrencyToBaseAmountAccordingToCurrencyToBaseExchangeRate(requestParams, invoice.getOriginalOpeningBalanceAmount(), currencyid, invoice.getCreationDate(), externalCurrencyRate);
                    } else {
                        bAmt = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, invoice.getOriginalOpeningBalanceAmount(), currencyid, invoice.getCreationDate(), externalCurrencyRate);
                    }
                    amountinbase = (Double) bAmt.getEntityList().get(0);
                }
                
                obj.put("amountinbase", authHandler.round(amountinbase, companyid));
                obj.put("taxpercent", 0);
                obj.put("creditDays", invoice.getCustomer() == null ? "" : ((invoice.getCustomer().getCreditTerm()) == null) ? "" : invoice.getCustomer().getCreditTerm().getTermdays());
                obj.put("isRepeated", false);
                
                double amountdueinbase = 0;
                if (Constants.OpeningBalanceBaseAmountFlag) {
                    amountdueinbase = invoice.getOpeningBalanceBaseAmountDue();
                } else {
                    if (isopeningBalanceInvoice && invoice.isConversionRateFromCurrencyToBase()) {// if invoice is opening balance invoice and Conversion rate is taken from user is Currency to base then following method will be called.
                        bAmt = accCurrencyDAOobj.getCurrencyToBaseAmountAccordingToCurrencyToBaseExchangeRate(requestParams, amountdue, currencyid, invoice.getCreationDate(), externalCurrencyRate);
                    } else {
                        bAmt = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, amountdue, currencyid, invoice.getCreationDate(), externalCurrencyRate);
                    }
                    amountdueinbase  = (Double) bAmt.getEntityList().get(0);
                }
                obj.put("amountdueinbase",  authHandler.round(amountdueinbase, companyid));
                String currencyFilterForTrans = "";
                if (requestParams.containsKey("currencyfilterfortrans")) {
                    currencyFilterForTrans = requestParams.get("currencyfilterfortrans") != null ? (String) requestParams.get("currencyfilterfortrans") : "";
                }

                double amountDueOriginal = amountdue;
                if (!StringUtil.isNullOrEmpty(currencyFilterForTrans) && !StringUtil.isNullOrEmpty(currencyid) && !currencyFilterForTrans.equals(currencyid)) {
                    KwlReturnObject bAmtCurrencyFilter=null;
                    if (isopeningBalanceInvoice && invoice.isConversionRateFromCurrencyToBase()) {// if invoice is opening balance invoice and Conversion rate is taken from user is Currency to base then following method will be called.
                        bAmtCurrencyFilter = accCurrencyDAOobj.getOneCurrencyToOtherModifiedAccordingToCurrencyToBaseExchangeRate(requestParams, amountdue, currencyid, currencyFilterForTrans, invoiceCreationDate, externalCurrencyRate);
                    } else {
                        bAmtCurrencyFilter = accCurrencyDAOobj.getOneCurrencyToOtherModified(requestParams, amountdue, currencyid, currencyFilterForTrans, invoice.getCreationDate(), externalCurrencyRate);
                }
                    amountdue = (Double) bAmtCurrencyFilter.getEntityList().get(0);
                }
                obj.put("amountdue", authHandler.round(amountdue, companyid));
                obj.put("amountDueOriginal", (amountDueOriginal <= 0) ? 0 : authHandler.round(amountDueOriginal, companyid));
                obj.put("amountDueOriginalSaved", (amountDueOriginal <= 0) ? 0 : authHandler.round(amountDueOriginal, companyid));
                obj.put("exchangeratefortransaction", (amountDueOriginal <= 0&&amountdue<=0) ? 0 : (amountdue/amountDueOriginal));
                obj.put("deductDiscount", 0);
                obj.put("amountduenonnegative", (amountdue <= 0) ? 0 : authHandler.round(amountdue, companyid));
                obj.put("invType","0");
                
                JSONObject jObj = null;
                double discountValue = 0.0;
                int applicableDays = -1;
                boolean discountType = false;
                if (!StringUtil.isNullOrEmpty(extraCompanyPreferences.getColumnPref())) {
                    jObj = new JSONObject((String) extraCompanyPreferences.getColumnPref());
                    if (jObj.has(Constants.DISCOUNT_ON_PAYMENT_TERMS) && jObj.get(Constants.DISCOUNT_ON_PAYMENT_TERMS) != null && jObj.optBoolean(Constants.DISCOUNT_ON_PAYMENT_TERMS, false)) {
                        Term term = invoice.getTermid();
                        if (term != null && term.getDiscountName() != null) {
                            DiscountMaster discountMaster = term.getDiscountName();
                            discountValue = discountMaster.getValue();
                            discountType = discountMaster.isDiscounttype();
                            applicableDays = term.getApplicableDays();
                        }
                    }
                }
                obj.put("discountvalue", discountValue);
                obj.put("discounttype", discountType ? Integer.parseInt(Constants.DISCOUNT_MASTER_TYPE_PERCENTAGE) : Integer.parseInt(Constants.DISCOUNT_MASTER_TYPE_FLAT));
                obj.put("applicabledays", applicableDays);
                obj.put("invoicecreationdate", df.format(invoice.getCreationDate()));
                obj.put("invoiceduedate", df.format(invoice.getDueDate()));
                 //ERP-41011: Used for remote Store of Sales Person
                obj.put("salespersonname", invoice.getMasterSalesPerson() == null ? "" : invoice.getMasterSalesPerson().getValue());
                obj.put("salesPerson", invoice.getMasterSalesPerson() == null ? "" : invoice.getMasterSalesPerson().getID());
                amountdueOverseas = authHandler.round(amountdue, companyid);

                if (!(ignoreZero && authHandler.round(amountdue, companyid) <= 0)) {
                    /*
                     * While creating delivery order, Sales Return checked if
                     * DOs with all quantities of invoice are created
                     */
                    boolean addFlag = true;
                    if (doflag && invoice.isDeleted()) {
                        addFlag = false;
                    } else if (doflag && invoice.getCustomer().isOverseas() && amountdueOverseas > 0) {
                        addFlag = false;
                    } else if (salesPurchaseReturnflag) {
                        addFlag = false;
                    } else if (notlinkCNFromInvoiceFlag) {
                        addFlag = false;
                    }
                    if (addFlag && !doflag) {
                        DataJArr.put(obj);
                    }

                }
            }
        } catch (JSONException ex) {
            Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
        } catch (ServiceException ex) {
            Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
        } catch (SessionExpiredException ex) {
            Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
        }

        return DataJArr;
    } 
     
    public JSONObject getInvoiceJson(JSONObject paramJobj, List<Invoice> list) throws SessionExpiredException, ServiceException {
        JSONObject jobj = new JSONObject();
        JSONArray jArr = new JSONArray();
        try {
            HashMap requestParams = AccInvoiceServiceHandler.getInvoiceRequestMapJson(paramJobj);
            DateFormat df = authHandler.getDateOnlyFormat();
            String companyid = paramJobj.optString(Constants.companyKey);
            boolean ignoreZero = requestParams.get("ignorezero") != null ? Boolean.parseBoolean(requestParams.get("ignorezero").toString()) : paramJobj.optString("ignorezero",null) != null;
            boolean onlyAmountDue = requestParams.get("onlyamountdue") != null;
            boolean doflag = paramJobj.optString("doflag",null) != null ? true : false;
            boolean salesPurchaseReturnflag = false;
            boolean isFixedAsset = Boolean.FALSE.parseBoolean(paramJobj.optString(Constants.isFixedAsset,"false"));
            int moduleid = isFixedAsset ? Constants.Acc_FixedAssets_DisposalInvoice_ModuleId : Constants.Acc_Invoice_ModuleId;
            boolean CashAndInvoice = Boolean.FALSE.parseBoolean(String.valueOf(paramJobj.optString("CashAndInvoice")));
            boolean isPayment = Boolean.FALSE.parseBoolean(String.valueOf(paramJobj.optString("isPayment")));
            if (!StringUtil.isNullOrEmpty(paramJobj.optString("salesPurchaseReturnflag",null))) {
                salesPurchaseReturnflag = Boolean.parseBoolean(paramJobj.optString("salesPurchaseReturnflag"));
            }
            boolean islinkSItoDN = false;
            if (!StringUtil.isNullOrEmpty(paramJobj.optString("islinkPItoCN",null))) {
                islinkSItoDN = Boolean.parseBoolean(paramJobj.optString("islinkPItoCN"));
            }
            //report id flag
            boolean isAged = (!StringUtil.isNullOrEmpty(paramJobj.optString("isAged",null))) ? Boolean.parseBoolean(paramJobj.optString("isAged")) : false;
            //flag for chart
            String chartType = "";
            if (requestParams.get(Constants.CHART_TYPE) != null) {
                chartType = (String) requestParams.get(Constants.CHART_TYPE);
            }

            HashMap<String, String> replaceFieldMap = new HashMap<String, String>();
            HashMap<String, String> customFieldMap = new HashMap<String, String>();
            HashMap<String, String> customDateFieldMap = new HashMap<String, String>();
            HashMap<String, Integer> FieldMap = null;
            HashMap<String, Object> fieldrequestParams = new HashMap();
            fieldrequestParams.put(Constants.filter_names, Arrays.asList(Constants.companyid, Constants.moduleid));
            fieldrequestParams.put(Constants.filter_values, Arrays.asList(companyid, moduleid));
            FieldMap = accAccountDAOobj.getFieldParamsCustomMap(fieldrequestParams, replaceFieldMap, customFieldMap, customDateFieldMap);

            KwlReturnObject cap = accountingHandlerDAOobj.loadObject(CompanyAccountPreferences.class.getName(), companyid);
            CompanyAccountPreferences pref = (CompanyAccountPreferences) cap.getEntityList().get(0);
            String cashAccount = pref.getCashAccount().getID();
            /**
             * Get Linking flag for CN/DN overcharge/ Undercharge case and
             * Request Moduleid to get Custom Dimension data(CN/DN)
             */
            boolean isLinkOverUnderCharge = false;
            if (!StringUtil.isNullOrEmpty(paramJobj.optString("isLinkOverUnderCharge",null))) {
                isLinkOverUnderCharge = Boolean.parseBoolean(paramJobj.optString("isLinkOverUnderCharge"));
            }
            int requestModuleid = requestParams.containsKey("requestModuleid") && requestParams.get("requestModuleid") != null ? (Integer) requestParams.get("requestModuleid") : -1;

            KwlReturnObject curresult = accountingHandlerDAOobj.getObject(KWLCurrency.class.getName(), paramJobj.optString(Constants.globalCurrencyKey));
            KWLCurrency currency = (KWLCurrency) curresult.getEntityList().get(0);
            int duration = 30;

            String curDateString = "";
            Date curDate = null;
            boolean booleanAged = false;//Added for aged payable/receivable

            Calendar cal1 = Calendar.getInstance();
            Calendar cal2 = Calendar.getInstance();
            Calendar cal3 = Calendar.getInstance();

            if (requestParams.get(Constants.asOfDate) != null) {//Added for aged payable/receivable
                curDateString = (String) requestParams.get(Constants.asOfDate);
                curDate = df.parse(curDateString);
                booleanAged = true;
                cal1.setTime(curDate);
                cal2.setTime(curDate);
                cal3.setTime(curDate);
                cal2.add(Calendar.DAY_OF_YEAR, -duration);
                cal3.add(Calendar.DAY_OF_YEAR, -(duration * 2));
            }

            String cal1String = authHandler.getDateOnlyFormat().format(cal1.getTime());
            Date cal1Date = authHandler.getDateOnlyFormat().parse(cal1String);

            String cal2String = authHandler.getDateOnlyFormat().format(cal2.getTime());
            Date cal2Date = authHandler.getDateOnlyFormat().parse(cal2String);

            String cal3String = authHandler.getDateOnlyFormat().format(cal3.getTime());
            Date cal3Date = authHandler.getDateOnlyFormat().parse(cal3String);

            double amountdue1 = 0;
            double amountdue2 = 0;
            double amountdue3 = 0;
            double amountdue4 = 0;
            List<String> idsList = new ArrayList<String>();

            for (Invoice invoice : list) {
                idsList.add(invoice.getID());
            }
            Map<String, List<InvoiceTermsMap>> invoiceTermsmap = accInvoiceDAOobj.getInvoiceTermMapList(idsList);
            for (Invoice invoice : list) {
                amountdue1 = amountdue2 = amountdue3 = amountdue4 = 0;
                double taxPercent = 0;
                String invid = invoice.getID();
                JournalEntry je = invoice.getJournalEntry();
                JournalEntryDetail d = invoice.getCustomerEntry();
                Account account = d.getAccount();
                if (account.getID().equals(cashAccount) && !CashAndInvoice && !isPayment) {
                    continue;
                }
                Date invoiceCreationDate = invoice.getCreationDate();
                String currencyid = (invoice.getCurrency() == null ? currency.getCurrencyID() : invoice.getCurrency().getCurrencyID());
                List ll = new ArrayList();
                if (Constants.InvoiceAmountDueFlag) {
                    ll = accInvoiceCommon.getInvoiceDiscountAmountInfo(requestParams, invoice);
                } else {
                    ll = accInvoiceCommon.getAmountDue_Discount(requestParams, invoice);
                }
                double amountdue = (Double) ll.get(0);
                double discountDeduct = (Double) ll.get(1);
                double amountDueOriginal = (Double) ll.get(3);

                if (onlyAmountDue && authHandler.round(amountdue, companyid) == 0) {
                    continue;
                }
                Set<InvoiceDetail> invRows = invoice.getRows();
                boolean isLinkInDO = false;
                if (doflag) {
                    for (InvoiceDetail invdetails : invRows) {
                        if (invdetails.getDeliveryOrderDetail() != null) {
                            isLinkInDO = true;
                            break;
                        }
                    }
                }

                boolean addFlag = true;
                Customer customer = invoice.getCustomer();
                Double amountdueOverseas = 0.0;
                if (!account.getID().equals(cashAccount)) {
                    amountdueOverseas = authHandler.round(amountdue, companyid);
                }
                if (!(ignoreZero && authHandler.round(amountdue, companyid) <= 0)) {
                    /*
                     * While creating delivery order, Sales Return checked if
                     * DOs with all quantities of invoice are created
                     */

                    if ((doflag && invoice.isDeleted()) || isLinkInDO) {
                        addFlag = false;
                        continue;
                    } else if (doflag && customer.isOverseas() && amountdueOverseas > 0) {
                        addFlag = false;
                        continue;
                    }   //we have handled open close logic from open close flag in query
                }
                if (doflag || salesPurchaseReturnflag) {
                    boolean isInvoiceRecovered = true;
                    JSONObject obj = IsInvoiceRecovered(invoice.getID(), companyid);
                    isInvoiceRecovered = obj.optBoolean("isRecovered");
                    if (!isInvoiceRecovered) {
                        addFlag = false;
                    } else if (isInvoiceRecovered) {
                        boolean isreturned = false;
                        double invdQuantity = 0;
                        for (InvoiceDetail invdetails : invRows) {
                            double returnedQty = 0;
                            String linkid = invdetails.getID();
                            returnedQty = accInvoiceDAOobj.getReturnQuantityofDOorSI(linkid, companyid, false);
                            if (returnedQty != 0) {
                                if (invdetails.getDeliveryOrderDetail() != null) {
                                    invdQuantity = invdetails.getDeliveryOrderDetail().getActualQuantity();
                                    if (invdQuantity - returnedQty == 0) {
                                        addFlag = false;
                                    }
                                }
                            }
                            if (invdetails.getDeliveryOrderDetail() != null) {
                                isLinkInDO = true;
                                isreturned = invdetails.getDeliveryOrderDetail().getDeliveryOrder().isIsOpenInSR();
                                if (!isreturned) {
                                    addFlag = false;
                                }
                            }
                        }
                    }
                }

                JSONObject obj = new JSONObject();
                String currencyFilterForTrans = "";
                if (requestParams.containsKey("currencyfilterfortrans") && requestParams.containsKey("isReceipt")) {
                    currencyFilterForTrans = requestParams.get("currencyfilterfortrans") != null ? (String) requestParams.get("currencyfilterfortrans") : "";
                    KwlReturnObject currencyFilterResult = accountingHandlerDAOobj.getObject(KWLCurrency.class.getName(), currencyFilterForTrans);
                    KWLCurrency currencyFilter = (KWLCurrency) currencyFilterResult.getEntityList().get(0);
                    obj.put("currencyidpayment", currencyFilterForTrans);
                    obj.put("currencysymbolpayment", (currencyFilter == null ? currency.getSymbol() : currencyFilter.getSymbol()));
                }
                double currencyToBaseRate = accCurrencyDAOobj.getCurrencyToBaseRate(requestParams, currencyid, invoiceCreationDate);
                obj.put(Constants.billid, invoice.getID());
                obj.put("isOpeningBalanceInvoice", invoice.isIsOpeningBalenceInvoice());
                obj.put("personid", customer == null ? account.getID() : customer.getID());
                obj.put("personemail", customer == null ? "" : customer.getEmail());
                obj.put("aliasname", customer == null ? "" : customer.getAliasname());
                obj.put("accid", account.getID());
                obj.put("accountid", invoice.getAccount() == null ? "" : invoice.getAccount().getID());
                obj.put("billno", invoice.getInvoiceNumber());
                obj.put("transectionno", invoice.getInvoiceNumber());
                obj.put(Constants.IsRoundingAdjustmentApplied, invoice.isIsRoundingAdjustmentApplied());
                obj.put(Constants.currencyKey, currencyid);
                obj.put("currencysymbol", (invoice.getCurrency() == null ? currency.getSymbol() : invoice.getCurrency().getSymbol()));
                obj.put("currencyidtransaction", currencyid);
                obj.put("currencysymboltransaction", (invoice.getCurrency() == null ? currency.getSymbol() : invoice.getCurrency().getSymbol()));
                obj.put("companyaddress", invoice.getCompany().getAddress());
                obj.put("companyname", invoice.getCompany().getCompanyName());
                obj.put("oldcurrencyrate", currencyToBaseRate * 1.0);
                obj.put("billto", invoice.getBillTo());
                obj.put("shipto", invoice.getShipTo());
                obj.put("journalentryid", je.getID());
                obj.put("porefno", invoice.getPoRefNumber());
                obj.put("externalcurrencyrate", je.getExternalCurrencyRate());
                obj.put("entryno", je.getEntryNumber());
                obj.put("date", df.format(invoice.getCreationDate()));
                /**
                 * Passing JE date in response for validating date on JS Side
                 * ERM-655.
                 */
                obj.put("jeDate", invoice.isIsOpeningBalenceInvoice() ? (invoice.getCreationDate() == null ? "" : df.format(invoice.getCreationDate())) : df.format(je.getEntryDate()));
                obj.put("creationdate", df.format(invoice.getCreationDate()));
                obj.put("invoicedate", df.format(invoice.getCreationDate()));
                obj.put("shipdate", invoice.getShipDate() == null ? "" : df.format(invoice.getShipDate()));
                obj.put("linkingdate", df.format(new Date()));
                obj.put("duedate", df.format(invoice.getDueDate()));
                obj.put("personname", customer == null ? account.getName() : customer.getName());
                /*
                 * Same as when invoice is fetching in invoice report
                 */
                obj.put("salesPerson", invoice.getMasterSalesPerson() == null ? "" : invoice.getMasterSalesPerson().getID());
                obj.put("salesPersonName", invoice.getMasterSalesPerson() == null ? "" : invoice.getMasterSalesPerson().getValue());
                //ERP-41011: Used for remote Store of Sales Person
                obj.put("salespersonname", invoice.getMasterSalesPerson() == null ? "" : invoice.getMasterSalesPerson().getValue());
                obj.put("memo", invoice.getMemo());
                obj.put("termname", customer == null ? "" : customer.getCreditTerm().getTermname());
                obj.put("termid", customer == null ? "" : customer.getCreditTerm().getID());//ERP-16831
                obj.put("deleted", invoice.isDeleted());
                obj.put("taxincluded", invoice.getTax() == null ? false : true);
                obj.put("taxid", invoice.getTax() == null ? "" : invoice.getTax().getID());
                obj.put("taxname", invoice.getTax() == null ? "" : invoice.getTax().getName());
                obj.put("taxamount", invoice.getTaxEntry() == null ? 0 : invoice.getTaxEntry().getAmount());
                obj.put("discount", invoice.getDiscount() == null ? 0 : invoice.getDiscount().getDiscountValue());
                obj.put("ispercentdiscount", invoice.getDiscount() == null ? false : invoice.getDiscount().isInPercent());
                obj.put("discountval", invoice.getDiscount() == null ? 0 : invoice.getDiscount().getDiscount());
                obj.put("costcenterid", je.getCostcenter() == null ? "" : je.getCostcenter().getID());
                obj.put("costcenterName", je.getCostcenter() == null ? "" : je.getCostcenter().getName());
                obj.put("shipvia", invoice.getShipvia() == null ? "" : invoice.getShipvia());
                obj.put("fob", invoice.getFob() == null ? "" : invoice.getFob());
                obj.put("isClaimedInvoice", (invoice.getBadDebtType() == 1 || invoice.getBadDebtType() == 2));// for Malasian Company
                obj.put("invoicedate", (invoice.getCreationDate() == null ? "" : df.format(invoice.getCreationDate())));
                Map<String, JSONArray> invoiceTermMapDetails = accInvoiceServiceDAO.getInvoiceTermMapDetailList(invoice.getID(), invoiceTermsmap.get(invoice.getID()));
                obj.put("isapplytaxtoterms", invoice.isApplyTaxToTerms());
                obj.put("gtaapplicable", invoice.isRcmapplicable());
                /**
                 * Put Merchant Exporter Check
                 */
                obj.put(Constants.isMerchantExporter, invoice.isIsMerchantExporter());
                obj.put(Constants.additionalMemo, invoice.getAdditionalmemo() != null ? invoice.getAdditionalmemo().getId() : "");
                obj.put(Constants.additionalMemoName, invoice.getAdditionalmemo() != null ? invoice.getAdditionalmemo().getName() : "");
                
                obj.put("termdetails", invoiceTermMapDetails.containsKey(invid) ? invoiceTermMapDetails.get(invid) : "");
                /**
                 * Put GST document history.
                 */
                if (invoice.getCompany().getCountry().getID().equalsIgnoreCase("" + Constants.indian_country_id)) {
                    obj.put("refdocid", invoice.getID());
                    fieldDataManagercntrl.getGSTDocumentHistory(obj);
                }
                BillingShippingAddresses addresses = invoice.getBillingShippingAddresses();
                AccountingAddressManager.getTransactionAddressJSON(obj, addresses, false);
                if (invoice.getModifiedby() != null) {
                    obj.put("lasteditedby", StringUtil.getFullName(invoice.getModifiedby()));
                }
                Set<InvoiceContractMapping> invoiceContractMappings = invoice.getContractMappings();
                int contractstatus = 0;
                String contractId = "";
//                    amount = 0;
                if (invoiceContractMappings != null && !invoiceContractMappings.isEmpty()) {
                    for (InvoiceContractMapping invoiceContractMapping : invoiceContractMappings) {
                        if (invoiceContractMapping.getContract() != null && invoiceContractMapping.getContract().getCstatus() == 2) {
                            contractstatus = invoiceContractMapping.getContract().getCstatus();
                        }
                        contractId = invoiceContractMapping.getContract().getID();
                    }
                }

                boolean includeprotax = false;
                Set<InvoiceDetail> invoiceDetails = invoice.getRows();
                for (InvoiceDetail invoiceDetail : invoiceDetails) {
                    if (invoiceDetail.getTax() != null) {
                        includeprotax = true;
                        break;
                    }
                }
                obj.put("includeprotax", includeprotax);
                obj.put("contractstatus", contractstatus);
                obj.put("contract", contractId);
                obj.put("gstIncluded", invoice.isGstIncluded()); // ERP-28308

                if (account.getID().equals(cashAccount)) {
                    obj.put("amountdue", 0);
                    obj.put("amountdueinbase", 0);
                    obj.put("incash", true);
                } else {
                    double amountdueinbase = amountdue;
                    if (currencyToBaseRate != 0) {
                        amountdueinbase = amountdue / currencyToBaseRate;
                    }
                    obj.put("amountdueinbase", amountdueinbase);
                    obj.put("amountdue", authHandler.round(amountdue, companyid));
                    if (booleanAged) {
                        Date dueDate = null;
                        if (!StringUtil.isNullOrEmpty(df.format(invoice.getDueDate()))) {
                            dueDate = df.parse(df.format(invoice.getDueDate()));
                        }
                        if (dueDate.after(cal1Date) || dueDate.equals(cal1Date)) {
                            amountdue1 = authHandler.round(amountdue, companyid);
                        } else if ((cal2Date.before(dueDate) || cal2Date.equals(dueDate)) && cal1Date.after(dueDate)) {
                            amountdue2 = authHandler.round(amountdue, companyid);
                        } else if ((cal3Date.before(dueDate) || cal3Date.equals(dueDate)) && cal2Date.after(dueDate)) {
                            amountdue3 = authHandler.round(amountdue, companyid);
                        } else {
                            amountdue4 = authHandler.round(amountdue, companyid);
                        }
                    }
                }
                Map<String, Object> variableMap = new HashMap<String, Object>();
                HashMap<String, Object> invDetailRequestParams = new HashMap<String, Object>();
                ArrayList Detailfilter_names = new ArrayList(), Detailfilter_params = new ArrayList();
                Detailfilter_names.add(Constants.companyKey);
                Detailfilter_params.add(invoice.getCompany().getCompanyID());
                Detailfilter_names.add("journalentryId");
                Detailfilter_params.add(je.getID());
                Detailfilter_names.add("moduleId");
                Detailfilter_params.add(moduleid + "");
                invDetailRequestParams.put("filter_names", Detailfilter_names);
                invDetailRequestParams.put("filter_params", Detailfilter_params);
                KwlReturnObject idcustresult = accJournalEntryobj.getJournalEntryCustomData(invDetailRequestParams);
                if (idcustresult.getEntityList().size() > 0) {
                    AccJECustomData jeCustom = (AccJECustomData) idcustresult.getEntityList().get(0);
                    AccountingManager.setCustomColumnValues(jeCustom, FieldMap, replaceFieldMap, variableMap);
                    JSONObject params = new JSONObject();
                    if (doflag || salesPurchaseReturnflag || islinkSItoDN) {
                        int moduleId = isFixedAsset ? Constants.Acc_FixedAssets_DeliveryOrder_ModuleId : salesPurchaseReturnflag ? Constants.Acc_Sales_Return_ModuleId : Constants.Acc_Delivery_Order_ModuleId;
                        if (islinkSItoDN) {
                            moduleId = Constants.Acc_Debit_Note_ModuleId;
                        }
                        /**
                         * get custom dimension data for Overcharge and
                         * Undercharge in Debit Note and Credit note module ID
                         *
                         */
                        if (isLinkOverUnderCharge && requestModuleid != -1) {
                            moduleId = requestModuleid;
                        }
                        params.put("linkModuleId", moduleId);
                        params.put("isLink", true);
                        params.put(Constants.companyKey, companyid);
                        params.put("customcolumn", 0);
                    }
                    fieldDataManagercntrl.addCustomData(variableMap, customFieldMap, customDateFieldMap, obj, params);
                }

                obj.put("deductDiscount", discountDeduct);
                obj.put("amountduenonnegative", (amountdue <= 0) ? 0 : authHandler.round(amountdue, companyid));
                obj.put("amountDueOriginal", (amountDueOriginal <= 0) ? 0 : authHandler.round(amountDueOriginal, companyid));
                obj.put("amountDueOriginalSaved", (amountDueOriginal <= 0) ? 0 : authHandler.round(amountDueOriginal, companyid));
                obj.put("exchangeratefortransaction", (amountDueOriginal <= 0 && amountdue <= 0) ? 0 : (amountdue / amountDueOriginal));
                obj.put("amount", d.getAmount());   //actual invoice amount
                obj.put("amountdue1", amountdue1);
                obj.put("amountdue2", amountdue2);
                obj.put("amountdue3", amountdue3);
                obj.put("amountdue4", amountdue4);
                double amountinbase = d.getAmount();
                if (currencyToBaseRate != 0) {
                    amountinbase = amountinbase / currencyToBaseRate;
                }
                obj.put("amountinbase", authHandler.round(amountinbase, companyid));

                if (invoice.getTax() != null) {
                    KwlReturnObject perresult = accTaxObj.getTaxPercent(companyid, invoice.getCreationDate(), invoice.getTax().getID());
                    taxPercent = (Double) perresult.getEntityList().get(0);
                }
                obj.put("taxpercent", taxPercent);  //tax in percent applyind on invoice
                try {
                    obj.put("creditDays", customer.getCreditTerm().getTermdays());
                } catch (Exception ex) {
                    obj.put("creditDays", 0);
                }
                RepeatedInvoices repeatedInvoice = invoice.getRepeateInvoice();
                obj.put("isRepeated", repeatedInvoice == null ? false : true);
                if (repeatedInvoice != null) {
                    obj.put("repeateid", repeatedInvoice.getId());
                    obj.put("interval", repeatedInvoice.getIntervalUnit());
                    obj.put("intervalType", repeatedInvoice.getIntervalType());
                    SimpleDateFormat sdf = new SimpleDateFormat("MMMM d, yyyy hh:mm:ss aa");
//                    sdf.setTimeZone(TimeZone.getTimeZone("GMT"+sessionHandlerImpl.getTimeZoneDifference(request)));
                    obj.put("startDate", sdf.format(repeatedInvoice.getStartDate()));
                    obj.put("nextDate", sdf.format(repeatedInvoice.getNextDate()));
                    obj.put("expireDate", repeatedInvoice.getExpireDate() == null ? "" : sdf.format(repeatedInvoice.getExpireDate()));
                    obj.put("advancedays", repeatedInvoice.getAdvanceNoofdays() == 0 ? 0 : repeatedInvoice.getAdvanceNoofdays());
                    obj.put("advanceDate", repeatedInvoice.getInvoiceAdvanceCreationDate() == null ? "" : sdf.format(repeatedInvoice.getInvoiceAdvanceCreationDate()));
                    requestParams.put("parentInvoiceId", invoice.getID());
                    KwlReturnObject details = accInvoiceDAOobj.getRepeateInvoicesDetails(requestParams);
                    List detailsList = details.getEntityList();
                    obj.put("childCount", detailsList.size());
                }

                //for charts data in object obj is required
                if (StringUtil.equalIgnoreCase(chartType, Constants.BAR_CHART) && isAged) {
                    jArr.put(obj);
                    continue;
                }

                if (!(ignoreZero && authHandler.round(amountdue, companyid) <= 0)) {
                    if (addFlag) {
                        jArr.put(obj);
                    }
                }
            }
            if (paramJobj.optString("filename",null) != null) {
                if (paramJobj.optString("filename").equals("Aged Receivable")) {
                    if (paramJobj.optString("filetype",null) != null) {
                        if (paramJobj.optString("filetype").equals("print")) {
                            if (!paramJobj.optString("mode").equals("18")) {
                                double total = 0;
                                for (int i = 0; i < jArr.length(); i++) {
                                    total = total + (Double) jArr.getJSONObject(i).get("amountdueinbase");
                                }
                                JSONObject obj1 = new JSONObject();
                                obj1.put("amountdueinbase", total);
                                obj1.put("billno", "Total Amount Due");
                                jArr.put(obj1);
                            }
                        }
                    }
                }
            }
            jobj.put(Constants.data, jArr);
        } catch (ParseException ex) {
            throw ServiceException.FAILURE("getInvoiceJson : " + ex.getMessage(), ex);
        } catch (JSONException ex) {
            throw ServiceException.FAILURE("getInvoiceJson : " + ex.getMessage(), ex);
        }
        return jobj;
    } 
    
    public JSONObject IsInvoiceRecovered(String invoiceId, String companyId) throws ServiceException {
        JSONObject jObj = new JSONObject();
        boolean recovered = true;
        HashMap<String, Object> writeOffMap = new HashMap<String, Object>();
        boolean isWrittenOff = false;
        int recoveredTime = 0;
        writeOffMap.put("invoiceid", invoiceId);
        writeOffMap.put(Constants.companyKey, companyId);
        KwlReturnObject writeOffResult = accWriteOffServiceDao.getInvoiceWriteOffEntries(writeOffMap);
        List<InvoiceWriteOff> WriteOffList = writeOffResult.getEntityList();
        if (!WriteOffList.isEmpty()) {
            isWrittenOff = true;
            for (InvoiceWriteOff IWO : WriteOffList) {
                if (IWO.isIsRecovered()) {
                    recoveredTime++;
                }
            }
            if (!(WriteOffList.size() == recoveredTime)) {
                recovered = false;
            }
        }
        try {
            jObj.put("isWrittenOff", isWrittenOff);
            jObj.put("isRecovered", recovered);
        } catch (JSONException ex) {
            Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
        }

        return jObj;
    }
        }
        
