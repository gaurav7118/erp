/*
 * Copyright (C) 2012  Krawler Information Systems Pvt Ltd
 * All rights reserved.
 * 
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 */
package com.krawler.spring.accounting.invoice;

import com.krawler.hql.accounting.InvoiceDocuments;
import com.krawler.hql.accounting.SalesReturnDetailsTermMap;
import com.itextpdf.text.DocumentException;
import com.krawler.accounting.integration.common.IntegrationCommonService;
import com.krawler.accounting.integration.common.IntegrationConstants;
import com.krawler.common.admin.*;
import com.krawler.hql.accounting.CustomizeAgedDuration;
import com.krawler.common.service.ServiceException;
import com.krawler.common.session.SessionExpiredException;
import com.krawler.common.util.Constants;
import com.krawler.spring.common.KwlReturnObject;
import com.krawler.common.util.StringUtil;
import com.krawler.hql.accounting.*;
import com.krawler.spring.authHandler.authHandler;
import com.krawler.spring.accounting.costCenter.CCConstants;
import com.krawler.spring.accounting.creditnote.accCreditNoteDAO;
import com.krawler.spring.accounting.currency.accCurrencyDAO;
import com.krawler.spring.accounting.customer.accCustomerDAO;
import com.krawler.spring.accounting.discount.accDiscountDAO;
import com.krawler.spring.accounting.handler.AccountingHandlerDAO;
import com.krawler.spring.accounting.handler.AccountingManager;
import com.krawler.spring.accounting.handler.CommonFunctions;
import com.krawler.spring.accounting.journalentry.accJournalEntryDAO;
import com.krawler.spring.accounting.product.accProductDAO;
import com.krawler.spring.accounting.receipt.accReceiptDAO;
import com.krawler.hql.accounting.InvoiceDetail;
import com.krawler.spring.accounting.tax.accTaxDAO;
import com.krawler.spring.exportFunctionality.exportMPXDAOImpl;
import com.krawler.spring.common.kwlCommonTablesDAO;
import com.krawler.spring.sessionHandler.sessionHandlerImpl;
import com.krawler.utils.json.base.JSONArray;
import com.krawler.utils.json.base.JSONException;
import com.krawler.utils.json.base.JSONObject;
import java.io.UnsupportedEncodingException;
import java.text.DateFormat;
import java.text.DecimalFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Set;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.commons.fileupload.FileItem;
import com.krawler.esp.handlers.StorageHandler;
import java.util.UUID;
import org.apache.commons.fileupload.DiskFileUpload;
import org.apache.commons.fileupload.FileUploadException;
import java.io.File;
import com.krawler.common.util.FieldConstants;
//import com.krawler.customFieldMaster.fieldDataManager;
import com.krawler.esp.handlers.FileUploadHandler;
import com.krawler.esp.handlers.SendMailHandler;
import com.krawler.esp.servlets.ProfileImageServlet;
import com.krawler.inventory.exception.InventoryException;
import com.krawler.inventory.model.stockmovement.StockMovementService;
import com.krawler.spring.accounting.account.accAccountDAO;
import com.krawler.spring.accounting.account.accCusVenMapDAO;
import com.krawler.spring.accounting.companypreferances.CompanyPreferencesConstants;
import com.krawler.spring.accounting.companypreferances.accCompanyPreferencesDAO;
import com.krawler.spring.accounting.costCenter.AccCostCenterDAO;
import com.krawler.spring.accounting.creditnote.accCreditNoteService;
import com.krawler.spring.accounting.customDesign.*;
import com.krawler.spring.accounting.debitnote.accDebitNoteDAO;
import com.krawler.spring.accounting.goodsreceipt.accGoodsReceiptController;
import com.krawler.spring.accounting.goodsreceipt.accGoodsReceiptControllerCMN;
import com.krawler.spring.accounting.goodsreceipt.accGoodsReceiptDAO;
import com.krawler.spring.accounting.handler.AopAdvisor;
import com.krawler.spring.accounting.handler.CommonEnglishNumberToWords;
import com.krawler.spring.accounting.invoice.dm.InvoiceInfo;
import com.krawler.spring.accounting.jasperreports.*;
import com.krawler.spring.accounting.masteritems.accMasterItemsDAO;
import com.krawler.spring.accounting.product.productHandler;
import com.krawler.spring.accounting.salesorder.accSalesOrderControllerCMN;
import com.krawler.spring.accounting.salesorder.accSalesOrderDAO;
import com.krawler.spring.accounting.vendor.accVendorDAO;
import com.krawler.spring.auditTrailModule.auditTrailDAO;
import com.krawler.spring.authHandler.authHandlerDAO;
import com.krawler.spring.common.AccCommonTablesDAO;
import com.krawler.spring.common.CommonFnController;
import com.krawler.spring.exportFuctionality.AccExportReportsServiceDAO;
import com.krawler.spring.exportFuctionality.ExportSOA;
import com.krawler.spring.exportFuctionality.ExportRecordHandler;
import com.krawler.spring.importFunctionality.ImportDAO;
import com.krawler.spring.importFunctionality.ImportHandler;
import com.krawler.spring.storageHandler.storageHandlerImpl;
import java.io.*;
import java.util.*;
import java.util.Map.Entry;
import javax.mail.MessagingException;
import net.sf.jasperreports.engine.*;
import net.sf.jasperreports.engine.data.JRBeanCollectionDataSource;
import net.sf.jasperreports.engine.design.JasperDesign;
import net.sf.jasperreports.engine.export.JRPdfExporter;
import net.sf.jasperreports.engine.export.JRPdfExporterParameter;
import net.sf.jasperreports.engine.xml.JRXmlLoader;
import org.apache.velocity.app.VelocityEngine;
import org.joda.time.LocalDate;
import org.joda.time.Period;
import org.joda.time.format.DateTimeFormat;
import org.joda.time.format.DateTimeFormatter;
import org.springframework.context.MessageSource;
import org.springframework.context.MessageSourceAware;
import org.springframework.orm.hibernate3.HibernateTransactionManager;
import org.springframework.transaction.TransactionDefinition;
import org.springframework.transaction.TransactionStatus;
import org.springframework.transaction.support.DefaultTransactionDefinition;
import org.springframework.web.servlet.ModelAndView;
import org.springframework.web.servlet.mvc.multiaction.MultiActionController;
import org.springframework.web.servlet.support.RequestContextUtils;
import com.krawler.spring.accounting.masteritems.accMasterItemsController;
import com.krawler.spring.accounting.salesorder.AccSalesOrderServiceDAO;
import com.krawler.spring.accounting.payment.accPaymentDAO;
import com.krawler.common.admin.CustomerAddressDetails;
import com.krawler.common.util.CommonIndonesianNumberToWords;
import com.krawler.common.util.CsvReader;
import com.krawler.common.util.IndiaComplianceConstants;
import com.krawler.common.util.URLUtil;
import com.krawler.esp.handlers.ServerEventManager;
import static com.krawler.esp.web.resource.Links.loginpageFull;
import com.krawler.inventory.model.approval.consignmentservice.ConsignmentService;
import com.krawler.spring.accounting.goodsreceipt.AccGoodsReceiptServiceDAO;
import com.krawler.spring.accounting.goodsreceipt.AccGoodsReceiptServiceHandler;
import com.krawler.spring.common.fieldDataManager;
import com.krawler.spring.exportFuctionality.ExportRecord;//
import com.krawler.spring.writeOffInvoice.accWriteOffServiceDao;
import org.joda.time.DateTime;
import org.joda.time.LocalTime;
import com.krawler.spring.accounting.reports.AccReportsService;
import com.krawler.spring.accounting.vendorpayment.accVendorPaymentDAO;
import com.krawler.hql.accounting.SalesReturnDetail;
import com.krawler.hql.accounting.invoice.service.AccInvoiceModuleService;
import com.krawler.inventory.model.ist.DeliveryDetailInterStoreLocationMapping;
import com.krawler.inventory.model.stock.StockService;
import com.krawler.spring.accounting.companypreferances.CompanyPreferencesCMN;
import static com.krawler.spring.accounting.goodsreceipt.GoodsReceiptCMNConstants.ACCID;
import static com.krawler.spring.accounting.goodsreceipt.GoodsReceiptCMNConstants.CASHONLY;
import static com.krawler.spring.accounting.goodsreceipt.GoodsReceiptCMNConstants.COMPANYID;
import static com.krawler.spring.accounting.goodsreceipt.GoodsReceiptCMNConstants.CREDITONLY;
import static com.krawler.spring.accounting.goodsreceipt.GoodsReceiptCMNConstants.CURDATE;
import static com.krawler.spring.accounting.goodsreceipt.GoodsReceiptCMNConstants.DATEFORMAT;
import static com.krawler.spring.accounting.goodsreceipt.GoodsReceiptCMNConstants.DURATION;
import static com.krawler.spring.accounting.goodsreceipt.GoodsReceiptCMNConstants.GCURRENCYID;
import static com.krawler.spring.accounting.goodsreceipt.GoodsReceiptCMNConstants.IGNOREZERO;
import static com.krawler.spring.accounting.goodsreceipt.GoodsReceiptCMNConstants.ISAGEDGRAPH;
import static com.krawler.spring.accounting.goodsreceipt.GoodsReceiptCMNConstants.ISDISTRIBUTIVE;
import static com.krawler.spring.accounting.goodsreceipt.GoodsReceiptCMNConstants.JSONVIEW;
import static com.krawler.spring.accounting.goodsreceipt.GoodsReceiptCMNConstants.LIMIT;
import static com.krawler.spring.accounting.goodsreceipt.GoodsReceiptCMNConstants.MODEL;
import static com.krawler.spring.accounting.goodsreceipt.GoodsReceiptCMNConstants.NONDELETED;
import static com.krawler.spring.accounting.goodsreceipt.GoodsReceiptCMNConstants.PERSONGROUP;
import static com.krawler.spring.accounting.goodsreceipt.GoodsReceiptCMNConstants.SS;
import static com.krawler.spring.accounting.goodsreceipt.GoodsReceiptCMNConstants.START;
import static com.krawler.spring.accounting.goodsreceipt.GoodsReceiptCMNConstants.VENDORID;
import static com.krawler.spring.accounting.goodsreceipt.GoodsReceiptCMNConstants.WITHINVENTORY;
import com.krawler.spring.accounting.handler.AccDashboardServiceImpl;
import com.krawler.spring.accounting.journalentry.JournalEntryConstants;
import com.krawler.spring.accounting.loan.accLoanDAO;
import com.krawler.spring.accounting.product.PriceValuationStack;
import com.krawler.spring.accounting.product.service.AccProductService;
import com.krawler.spring.accounting.receivepayment.service.AccReceivePaymentModuleService;
import com.krawler.spring.accounting.reports.AccTemplateReportService;
import com.krawler.spring.accounting.salesorder.accSalesOrderService;
import com.krawler.spring.accounting.ws.service.TransactionService;
import java.math.BigDecimal;
import javax.servlet.ServletContext;
import org.apache.commons.codec.binary.Base64;
/**
 *
 * @author krawler
 */
public class accInvoiceControllerCMN extends MultiActionController implements MessageSourceAware{
    
    public class SortCreditNoteDetail implements Comparator<CreditNoteDetail> {
        @Override
        public int compare(CreditNoteDetail CND1, CreditNoteDetail CND2) {
            if (CND1.getSrno() > CND2.getSrno()) {
                return 1;
            } else {
                return -1;
            }
        }
    }
    
    private HibernateTransactionManager txnManager;
    private accInvoiceDAO accInvoiceDAOobj;
    private AccExportReportsServiceDAO accExportReportsServiceDAOobj;
    private AccExportReportsServiceDAO accExportOtherReportsServiceDAOobj;
    private AccInvoiceServiceDAO accInvoiceServiceDAO;
    private accCreditNoteDAO accCreditNoteDAOobj;
    public ImportHandler importHandler;
    private ImportDAO importDao;
    private fieldDataManager fieldDataManagercntrl;
    private accVendorDAO accVendorDAOObj;
    private accReceiptDAO accReceiptDAOobj;
    private accJournalEntryDAO accJournalEntryobj;
    private accProductDAO accProductObj;
    private accDiscountDAO accDiscountobj;
    private accCurrencyDAO accCurrencyDAOobj;
    private accCustomerDAO accCustomerDAOobj;
    private accTaxDAO accTaxObj;
    private AccCostCenterDAO accCostCenterObj;
    private AccountingHandlerDAO accountingHandlerDAOobj;
    private exportMPXDAOImpl exportDaoObj;
    private String successView;
    private kwlCommonTablesDAO kwlCommonTablesDAOObj;
    private accInvoiceCMN accInvoiceCommon;
    private MessageSource messageSource;
    private accAccountDAO accAccountDAOobj;
    private authHandlerDAO authHandlerDAOObj;
    private CustomDesignDAO customDesignDAOObj;
    private VelocityEngine velocityEngine;
    private CommonEnglishNumberToWords EnglishNumberToWordsOjb = new CommonEnglishNumberToWords();
    private CommonIndonesianNumberToWords IndonesianNumberToWordsOjb = new CommonIndonesianNumberToWords();
    private accCompanyPreferencesDAO accCompanyPreferencesObj;
    private auditTrailDAO auditTrailObj;
    private accDebitNoteDAO accDebitNoteobj;
    private accCusVenMapDAO accCusVenMapDAOObj;
    private accSalesOrderDAO accSalesOrderDAOobj;
    private AccCommonTablesDAO accCommonTablesDAO;
    private accMasterItemsDAO accMasterItemsDAOobj;
    private StockMovementService stockMovementService;
    private accCreditNoteService accCreditNoteService;
    private AccSalesOrderServiceDAO accSalesOrderServiceDAOobj;
    private accGoodsReceiptDAO accGoodsReceiptobj;
    private accPaymentDAO accPaymentDAOobj;
    private accWriteOffServiceDao accWriteOffServiceDao;
    public ImportInvoice importinvoiceobj;
    private ConsignmentService consignmentService;
    private AccGoodsReceiptServiceDAO accGoodsReceiptServiceDAOObj; 
    private accVendorPaymentDAO accVendorPaymentobj;
    private AccGoodsReceiptServiceHandler accGoodsReceiptServiceHandler;
    private ExportRecord ExportrecordObj;//SDP-170
    AccReportsService accReportsService;
    private AccInvoiceModuleService accInvoiceModuleService;
    private accSalesOrderService accSalesOrderServiceobj;
    private ExportSOA exportSOA;
    private StockService stockService;
    private IntegrationCommonService integrationCommonService;
    private accLoanDAO accLoanDAOobj;
    private AccTemplateReportService accTemplateReportService;
    private TransactionService transactionService;
    private AccReceivePaymentModuleService accReceivePaymentModuleServiceObj;
    private AccDashboardServiceImpl accDashboardServiceImpl;
    private AccProductService AccProductService;

    public void setTransactionService(TransactionService transactionService) {
        this.transactionService = transactionService;
    }

    public void setAccReceivePaymentModuleServiceObj(AccReceivePaymentModuleService accReceivePaymentModuleServiceObj) {
        this.accReceivePaymentModuleServiceObj = accReceivePaymentModuleServiceObj;
    }
    
    public void setaccLoanDAO(accLoanDAO accLoanDAOobj) {
        this.accLoanDAOobj = accLoanDAOobj;
    }
    
    public void setIntegrationCommonService(IntegrationCommonService integrationCommonService) {
        this.integrationCommonService = integrationCommonService;
    }
    
    public void setExportSOA(ExportSOA exportSOA) {
        this.exportSOA = exportSOA;
    }
    
    public void setaccVendorPaymentDAO(accVendorPaymentDAO accVendorPaymentobj) {
        this.accVendorPaymentobj = accVendorPaymentobj;
    }
    public void setAccGoodsReceiptServiceHandler(AccGoodsReceiptServiceHandler accGoodsReceiptServiceHandler) {
        this.accGoodsReceiptServiceHandler = accGoodsReceiptServiceHandler;
    }
    public void setAccGoodsReceiptServiceDAOObj(AccGoodsReceiptServiceDAO accGoodsReceiptServiceDAOObj) {
        this.accGoodsReceiptServiceDAOObj = accGoodsReceiptServiceDAOObj;
    }

    
    public void setExportRecord(ExportRecord ExportrecordObj) {//SDP-170
        this.ExportrecordObj = ExportrecordObj;
    }
    public void setImportinvoiceobj(ImportInvoice importinvoiceobj) {
        this.importinvoiceobj = importinvoiceobj;
    }

    public void setaccPaymentDAO(accPaymentDAO accPaymentDAOobj) {
        this.accPaymentDAOobj = accPaymentDAOobj;
    }
     
    public void setaccExportOtherReportsServiceDAO(AccExportReportsServiceDAO accExportReportsServiceDAOobj) {
        this.accExportOtherReportsServiceDAOobj = accExportReportsServiceDAOobj;
    }
    
    public void setaccGoodsReceiptDAO(accGoodsReceiptDAO accGoodsReceiptobj) {
        this.accGoodsReceiptobj = accGoodsReceiptobj;
    }

    public void setaccSalesOrderDAO(accSalesOrderDAO accSalesOrderDAOobj) {
        this.accSalesOrderDAOobj = accSalesOrderDAOobj;
    }

    public void setaccExportReportsServiceDAO(AccExportReportsServiceDAO accExportReportsServiceDAOobj) {
        this.accExportReportsServiceDAOobj = accExportReportsServiceDAOobj;
    }

    public void setaccInvoiceServiceDAO(AccInvoiceServiceDAO accInvoiceServiceDAO) {
        this.accInvoiceServiceDAO = accInvoiceServiceDAO;
    }

    public void setimportHandler(ImportHandler importHandler) {
        this.importHandler = importHandler;
    }
    
    public void setimportDAO(ImportDAO importDao) {
        this.importDao = importDao;
    }
    
    public void setfieldDataManager(fieldDataManager fieldDataManagercntrl) {
        this.fieldDataManagercntrl = fieldDataManagercntrl;
    }
    
    public void setaccSalesOrderServiceDAO(AccSalesOrderServiceDAO accSalesOrderServiceDAOobj) {
        this.accSalesOrderServiceDAOobj = accSalesOrderServiceDAOobj;
    }
    
    public void setAccVendorDAO(accVendorDAO accVendorDAOObj) {
        this.accVendorDAOObj = accVendorDAOObj;
    }
    
    public void setAccCusVenMapDAOObj(accCusVenMapDAO accCusVenMapDAOObj) {
        this.accCusVenMapDAOObj = accCusVenMapDAOObj;
    }
    
    public void setaccDebitNoteDAO(accDebitNoteDAO accDebitNoteobj) {
        this.accDebitNoteobj = accDebitNoteobj;
    }
    
   public void setauditTrailDAO(auditTrailDAO auditTrailDAOObj){
        this.auditTrailObj = auditTrailDAOObj;
    }
   public void setaccAccountDAO(accAccountDAO accAccountDAOobj) {
        this.accAccountDAOobj = accAccountDAOobj;
    }
    public void setcustomDesignDAO(CustomDesignDAO customDesignDAOObj) {
        this.customDesignDAOObj = customDesignDAOObj;
    }
    public void setvelocityEngine(VelocityEngine velocityEngine) {
        this.velocityEngine = velocityEngine;
    }
    @Override
    public void setMessageSource(MessageSource ms) {
            this.messageSource=ms;
    }
    
    public void setStockMovementService(StockMovementService stockMovementService) {
        this.stockMovementService = stockMovementService;
    }
    public void setkwlCommonTablesDAO(kwlCommonTablesDAO kwlCommonTablesDAOObj1) {
        this.kwlCommonTablesDAOObj = kwlCommonTablesDAOObj1;
    }

    public void setTxnManager(HibernateTransactionManager txManager) {
        this.txnManager = txManager;
    }
    public void setaccInvoiceDAO(accInvoiceDAO accInvoiceDAOobj) {
        this.accInvoiceDAOobj = accInvoiceDAOobj;
    }
    public void setaccCreditNoteDAO(accCreditNoteDAO accCreditNoteDAOobj) {
        this.accCreditNoteDAOobj = accCreditNoteDAOobj;
    }
    public void setaccReceiptDAO(accReceiptDAO accReceiptDAOobj) {
        this.accReceiptDAOobj = accReceiptDAOobj;
    }
    public void setaccJournalEntryDAO(accJournalEntryDAO accJournalEntryobj) {
        this.accJournalEntryobj = accJournalEntryobj;
    }
    public void setaccProductDAO(accProductDAO accProductObj) {
        this.accProductObj = accProductObj;
    }
    public void setaccDiscountDAO(accDiscountDAO accDiscountobj) {
        this.accDiscountobj = accDiscountobj;
    }
    public void setaccCurrencyDAO(accCurrencyDAO accCurrencyDAOobj) {
        this.accCurrencyDAOobj = accCurrencyDAOobj;
    }
    public void setaccCustomerDAO(accCustomerDAO accCustomerDAOobj) {
        this.accCustomerDAOobj = accCustomerDAOobj;
    }
    public void setaccTaxDAO(accTaxDAO accTaxObj) {
        this.accTaxObj = accTaxObj;
    }
    public void setaccountingHandlerDAO(AccountingHandlerDAO AccountingHandlerDAOobj) {
        this.accountingHandlerDAOobj = AccountingHandlerDAOobj;
    }
    public void setexportMPXDAOImpl(exportMPXDAOImpl exportDaoObj) {
        this.exportDaoObj = exportDaoObj;
    }
    public String getSuccessView() {
        return successView;
    }
    public void setSuccessView(String successView) {
        this.successView = successView;
    }

    public void setAccInvoiceCommon(accInvoiceCMN accInvoiceCommon) {
        this.accInvoiceCommon = accInvoiceCommon;
    }
    
    public void setaccCostCenterDAO (AccCostCenterDAO accCostCenterDAOObj) {
        this.accCostCenterObj = accCostCenterDAOObj;
    }

    public void setAuthHandlerDAOObj(authHandlerDAO authHandlerDAOObj) {
        this.authHandlerDAOObj = authHandlerDAOObj;
    }
    
    public void setaccCompanyPreferencesDAO(accCompanyPreferencesDAO accCompanyPreferencesObj) {
        this.accCompanyPreferencesObj = accCompanyPreferencesObj;
    }
    public void setaccCommonTablesDAO(AccCommonTablesDAO accCommonTablesDAO) {
        this.accCommonTablesDAO = accCommonTablesDAO;
    }
    
    public void setaccCreditNoteService(accCreditNoteService accCreditNoteService) {
        this.accCreditNoteService = accCreditNoteService;
    }
    
    public void setaccMasterItemsDAO(accMasterItemsDAO accMasterItemsDAOobj) {
        this.accMasterItemsDAOobj = accMasterItemsDAOobj;
    }

    public void setAccWriteOffServiceDao(accWriteOffServiceDao accWriteOffServiceDao) {
        this.accWriteOffServiceDao = accWriteOffServiceDao;
    }

    public void setConsignmentService(ConsignmentService consignmentService) {
        this.consignmentService = consignmentService;
    }
    public void setAccReportsService(AccReportsService accReportsService) {
        this.accReportsService = accReportsService;
    }
    
    public void setAccInvoiceModuleService(AccInvoiceModuleService accInvoiceModuleService) {
        this.accInvoiceModuleService = accInvoiceModuleService;
    }
    
    public void setAccSalesOrderServiceobj(accSalesOrderService accSalesOrderServiceobj) {
        this.accSalesOrderServiceobj = accSalesOrderServiceobj;
    }

    public void setStockService(StockService stockService) {
        this.stockService = stockService;
    }
    
    public void setAccTemplateReportService(AccTemplateReportService accTemplateReportService) {
        this.accTemplateReportService = accTemplateReportService;
    }

    public void setAccProductService(AccProductService AccProductService) {
        this.AccProductService = AccProductService;
    }
    
    public void setAccDashboardServiceImpl(AccDashboardServiceImpl accDashboardServiceImpl) {
        this.accDashboardServiceImpl = accDashboardServiceImpl;
    }
    
    public ModelAndView getInvoices(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        boolean issuccess = false;
        String msg = "";
        try{
            JSONObject paramJobj = StringUtil.convertRequestToJsonObject(request);
            jobj= accInvoiceServiceDAO.getInvoices(paramJobj);

        } catch (Exception ex){
            msg = ""+ex.getMessage();
            Logger.getLogger(accInvoiceController.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                jobj.put("success", issuccess);
                jobj.put("msg", msg);
            } catch (JSONException ex) {
                Logger.getLogger(accInvoiceController.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return new ModelAndView(Constants.jsonView, "model", jobj.toString());
    }
    public ModelAndView updateInvoiceTransactionDetailsInJE(HttpServletRequest request, HttpServletResponse response) throws SessionExpiredException, ServiceException {
        DefaultTransactionDefinition def = new DefaultTransactionDefinition();
        def.setName("Invoice_Tx");
        def.setPropagationBehavior(TransactionDefinition.PROPAGATION_REQUIRED);
        TransactionStatus status = txnManager.getTransaction(def);
        JSONObject jobj = new JSONObject();
        int jeupdatedcount = 0;
        boolean issuccess = false;
        try {
            HashMap<String, Object> tempParams = new HashMap<String, Object>();
            String subdomain = "";
            String[] subdomainArray = null;
            if (!StringUtil.isNullOrEmpty(request.getParameter("subdomain"))) {
                subdomain = (String) request.getParameter("subdomain");
                subdomainArray = subdomain.split(",");
            }
            KwlReturnObject company = accCompanyPreferencesObj.getCompanyList(subdomainArray);
            Iterator ctr = company.getEntityList().iterator();
            while (ctr.hasNext()) {
                String companyid = ctr.next().toString();
                HashMap<String, Object> requestParams = new HashMap<String, Object>();
                requestParams.put(Constants.companyKey, companyid);
                KwlReturnObject result = accInvoiceDAOobj.getInvoicesForJE(requestParams);
                Iterator itr = result.getEntityList().iterator();
                while (itr.hasNext()) {
                    Invoice invoice = (Invoice) itr.next();
                    tempParams = new HashMap<String, Object>();
                    int moduleid = 0;
                    if (invoice.isFixedAssetInvoice()) {
                        moduleid = Constants.Acc_FixedAssets_DisposalInvoice_ModuleId;
                    } else if (invoice.isCashtransaction()) {
                        moduleid = Constants.Acc_Cash_Sales_ModuleId;
                    } else if (invoice.isFixedAssetLeaseInvoice()) {
                        moduleid = Constants.LEASE_INVOICE_MODULEID;
                    } else if (invoice.isIsconsignment()) {
                        moduleid = Constants.Acc_ConsignmentInvoice_ModuleId;
                    } else {
                        moduleid = Constants.Acc_Invoice_ModuleId;
                    }
                    tempParams.put("transactionID", invoice.getID());
                    tempParams.put("moduleID", moduleid);
                    tempParams.put("journalEntry", invoice.getJournalEntry());
                    boolean isUpdated = accJournalEntryobj.updateJEDetails(tempParams);
                    if (isUpdated) {
                        jeupdatedcount++;
                    }
                }
            }
            txnManager.commit(status);
            issuccess = true;
        } catch (Exception ex) {
            Logger.getLogger(accGoodsReceiptController.class.getName()).log(Level.SEVERE, null, ex);
            txnManager.rollback(status);
        } finally {
            try {
                jobj.put("success", issuccess);
                jobj.put("Updated JE Records ", jeupdatedcount);
            } catch (JSONException ex) {
                Logger.getLogger(accGoodsReceiptController.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return new ModelAndView(Constants.jsonView, "model", jobj.toString());
    }
    public ModelAndView updateInvoiceAmountInBase(HttpServletRequest request, HttpServletResponse response) throws SessionExpiredException, ServiceException {
        DefaultTransactionDefinition def = new DefaultTransactionDefinition();
        def.setName("Invoice_Tx");
        def.setPropagationBehavior(TransactionDefinition.PROPAGATION_REQUIRED);
        TransactionStatus status = txnManager.getTransaction(def);
        JSONObject jobj = new JSONObject();
        int invoiceUpdated = 0;
        boolean issuccess = false;
        try {
            String subdomain = "";
            String[] subdomainArray = null;
            if (!StringUtil.isNullOrEmpty(request.getParameter("subdomain"))) {
                subdomain = (String) request.getParameter("subdomain");
                subdomainArray = subdomain.split(",");
            }
            KwlReturnObject company = accCompanyPreferencesObj.getCompanyList(subdomainArray);
            Iterator ctr = company.getEntityList().iterator();
            while (ctr.hasNext()) {
                String companyid = ctr.next().toString();
                HashMap<String, Object> requestParams = new HashMap<String, Object>();
                requestParams.put(Constants.companyKey, companyid);
                KwlReturnObject result = accInvoiceDAOobj.getInvoicesHavingInvoiceAmount(requestParams);
                List<Invoice> invList = result.getEntityList();
                for (Invoice invoice : invList) {
                    double externalCurrencyRate = 0d;
                    JournalEntry je = null;
                    Date invoiceCreationDate = invoice.getCreationDate();
                    if (invoice.isNormalInvoice() && invoice.getJournalEntry() != null) {
                        je = invoice.getJournalEntry();
                        externalCurrencyRate = je.getExternalCurrencyRate();
                    }
                    if(je!=null){
                        double invoiceOriginalAmount = invoice.getInvoiceamount();
                        double amountinbase = invoiceOriginalAmount;
                        String fromcurrencyid = invoice.getCurrency().getCurrencyID();
                        requestParams.put(Constants.globalCurrencyKey, invoice.getCompany().getCurrency().getCurrencyID());
                        double currencyToBaseRate = accCurrencyDAOobj.getCurrencyToBaseRate(requestParams, fromcurrencyid, invoiceCreationDate);
                        if (invoiceOriginalAmount != 0) {
                            if (externalCurrencyRate != 0) {
                                amountinbase = invoiceOriginalAmount / externalCurrencyRate;
                            } else if (currencyToBaseRate != 0) {
                                amountinbase = invoiceOriginalAmount / currencyToBaseRate;
                            }
                        }
                        JSONObject tempParams = new JSONObject();
                        tempParams.put("invoiceid", invoice.getID());
                        tempParams.put(Constants.invoiceamountinbase, amountinbase);
                        boolean success = accInvoiceDAOobj.updateInvoiceAmountInBase(invoice, tempParams);
                        if (success) {
                            invoiceUpdated++;
                        }
                    }
                }
            }
            txnManager.commit(status);
            issuccess = true;
        } catch (Exception ex) {
            Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
            txnManager.rollback(status);
        } finally {
            try {
                jobj.put("success", issuccess);
                jobj.put("totalInvoicesUpdated", invoiceUpdated);
            } catch (JSONException ex) {
                Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return new ModelAndView(Constants.jsonView, "model", jobj.toString());
    }
     public ModelAndView SalesCommissionReport(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        JSONArray DataJArr=new JSONArray();
        boolean issuccess = false;
        String msg = "";
        try{
            DataJArr=getSalesCommissioReportDetails(request);
            int count = DataJArr.length();
            jobj.put(Constants.data, DataJArr);
            jobj.put("count", count);
            issuccess = true;
        } catch (Exception ex){
            msg = ""+ex.getMessage();
            Logger.getLogger(accInvoiceController.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                jobj.put("success", issuccess);
                jobj.put("msg", msg);
            } catch (JSONException ex) {
                Logger.getLogger(accInvoiceController.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return new ModelAndView(Constants.jsonView, "model", jobj.toString());
    }
    public ModelAndView getPaymentTermSalesCommissionReport(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        JSONArray DataJArr = new JSONArray();
        boolean issuccess = false;
        String msg = "";
        try {
            DataJArr = getPaymentTermSalesCommissionReport(request);
            int count = DataJArr.length();
            jobj.put(Constants.data, DataJArr);
            jobj.put("count", count);
            issuccess = true;
        } catch (Exception ex) {
            msg = "" + ex.getMessage();
            Logger.getLogger(accInvoiceController.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                jobj.put("success", issuccess);
                jobj.put("msg", msg);
            } catch (JSONException ex) {
                Logger.getLogger(accInvoiceController.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return new ModelAndView(Constants.jsonView, "model", jobj.toString());
    }
     public JSONArray getSalesCommissioReportDetails(HttpServletRequest request) throws SessionExpiredException, ServiceException {
      JSONArray DataJArr=new JSONArray();
         try{
            HashMap requestParams = AccInvoiceServiceHandler.getInvoiceRequestMap(request);
            String itemids=request.getParameter("itemid");
            if(StringUtil.isNullOrEmpty(itemids) || (StringUtil.isNullOrEmpty(itemids)==false && itemids.equalsIgnoreCase("All"))){
                HashMap<String, Object> filterRequestParams = new HashMap<String, Object>();
                ArrayList filter_names = new ArrayList(),filter_params = new ArrayList(), order_by = new ArrayList(), order_type = new ArrayList();
                filter_names.add("company.companyID");
                filter_params.add(sessionHandlerImpl.getCompanyid(request));
                filter_names.add("masterGroup.ID");
                filter_params.add("15");//For Geting All Sales Person
                filterRequestParams.put("filter_names", filter_names);
                filterRequestParams.put("filter_params", filter_params);
                
                KwlReturnObject personResult = accMasterItemsDAOobj.getMasterItems(filterRequestParams);    
                List persons = personResult.getEntityList();
                Iterator itr = persons.iterator();
                while (itr.hasNext()) {
                    MasterItem masterItem = (MasterItem) itr.next();
                    requestParams.put("itemid",masterItem.getID());
                    KwlReturnObject result = accInvoiceDAOobj.getInvoicesForSalesCommission(requestParams);
                    List list = result.getEntityList();
                    
                    JSONObject JObj = getSalesCommissionJsonMerged(request, list);    
                    if(JObj.length()>0){
                        DataJArr.put(JObj.get("obj"));
                    }
                }

            }else{//if multiple records selected
                String items[]=itemids.split(",");
                for(int i=0;i<items.length;i++){
                    requestParams.put("itemid",items[i]);
                    KwlReturnObject result = accInvoiceDAOobj.getInvoicesForSalesCommission(requestParams);
                    List list = result.getEntityList();
                    JSONObject JObj = getSalesCommissionJsonMerged(request, list);
                    if(JObj.length()>0){
                    DataJArr.put(JObj.get("obj"));
                    
                    }
                }
                
            }
          
        } catch (Exception ex){
          
            Logger.getLogger(accInvoiceController.class.getName()).log(Level.SEVERE, null, ex);
        } 
     return DataJArr;
     
    }
    public JSONArray getPaymentTermSalesCommissionReport(HttpServletRequest request) throws SessionExpiredException, ServiceException {
        JSONArray DataJArr = new JSONArray();
        try {
            HashMap requestParams = AccInvoiceServiceHandler.getInvoiceRequestMap(request);
            String itemids = request.getParameter("itemid");
            if (StringUtil.isNullOrEmpty(itemids) || (StringUtil.isNullOrEmpty(itemids) == false && itemids.equalsIgnoreCase("All"))) {
                HashMap<String, Object> filterRequestParams = new HashMap<String, Object>();
                ArrayList filter_names = new ArrayList(), filter_params = new ArrayList(), order_by = new ArrayList(), order_type = new ArrayList();
                filter_names.add("company.companyID");
                filter_params.add(sessionHandlerImpl.getCompanyid(request));
                filter_names.add("masterGroup.ID");
                filter_params.add("15");//For Geting All Sales Person
                filterRequestParams.put("filter_names", filter_names);
                filterRequestParams.put("filter_params", filter_params);

                KwlReturnObject personResult = accMasterItemsDAOobj.getMasterItems(filterRequestParams);
                List persons = personResult.getEntityList();
                Iterator itr = persons.iterator();
                while (itr.hasNext()) {
                    MasterItem masterItem = (MasterItem) itr.next();
                    requestParams.put("itemid", masterItem.getID());
                    KwlReturnObject result = accInvoiceDAOobj.getInvoicesForSalesCommission(requestParams);
                    List list = result.getEntityList();

                    JSONObject JObj = getPaymentTermSalesCommissionReport(request, list, masterItem.getID());
                    if (JObj.length() > 0) {
                        DataJArr.put(JObj.get("obj"));
                    }
                }

            } else {//if multiple records selected
                String items[] = itemids.split(",");
                for (int i = 0; i < items.length; i++) {
                    requestParams.put("itemid", items[i]);
                    KwlReturnObject result = accInvoiceDAOobj.getInvoicesForSalesCommission(requestParams);
                    List list = result.getEntityList();
                    JSONObject JObj = getPaymentTermSalesCommissionReport(request, list, items[i]);
                    if (JObj.length() > 0) {
                        DataJArr.put(JObj.get("obj"));

                    }
                }

            }

        } catch (Exception ex) {

            Logger.getLogger(accInvoiceController.class.getName()).log(Level.SEVERE, null, ex);
        }
        return DataJArr;

    }
    
    public JSONObject getSalesCommissionJsonMerged(HttpServletRequest request, List list) throws SessionExpiredException, ServiceException {
        JSONObject jObj = new JSONObject();

        try {
            HashMap requestParams = AccInvoiceServiceHandler.getInvoiceRequestMap(request);
            DateFormat df = authHandler.getDateOnlyFormat();
            JSONObject obj = new JSONObject();
            
            KwlReturnObject extracapresult = accountingHandlerDAOobj.getObject(ExtraCompanyPreferences.class.getName(), sessionHandlerImpl.getCompanyid(request));
            ExtraCompanyPreferences extraCompanyPreferences = (ExtraCompanyPreferences) extracapresult.getEntityList().get(0);

            KwlReturnObject curresult = accountingHandlerDAOobj.getObject(KWLCurrency.class.getName(), AccountingManager.getGlobalCurrencyidFromRequest(request));
            KWLCurrency currency = (KWLCurrency) curresult.getEntityList().get(0);

            double totalamountinbase = 0;
            double commissionAmount = 0.0;
            Iterator itr = list.iterator();
            boolean validFlag = false;
            String itemid = null;
            while (itr.hasNext()) {

                Invoice invoice = (Invoice) itr.next();
                double termAmount = 0.0;
                double TaxAmount = 0.0, rowTaxAmount = 0.0, rowDisocuntAmount = 0.0;

                Date invoiceCreationDate = invoice.getCreationDate();
                Double externalCurrencyRate = 0d;
                Double invoiceOriginalAmount = 0d;
                if (invoice.isIsOpeningBalenceInvoice() && !invoice.isNormalInvoice()) {
                    externalCurrencyRate = invoice.getExchangeRateForOpeningTransaction();
                    invoiceOriginalAmount = invoice.getOriginalOpeningBalanceAmount();
                }


                Set<InvoiceDetail> invoiceDetails = invoice.getRows();
                for (InvoiceDetail invoiceDetail : invoiceDetails) {
                    /**
                     *  SDP-12911 RowTermAmount includes linelevel tax summation for every Product as multiple taxes can be applied on single line level
                     * for Indian Country
                     */
                    rowTaxAmount += invoiceDetail.getRowTaxAmount() + invoiceDetail.getRowTermTaxAmount() + invoiceDetail.getRowTermAmount();
                    if (invoiceDetail.getDiscount() != null) {
                        rowDisocuntAmount += invoiceDetail.getDiscount().getDiscountValue();
                    }
                }
                   
                JournalEntry je = null;
                if (invoice.isNormalInvoice()) {
                    je = invoice.getJournalEntry();
                    externalCurrencyRate = je.getExternalCurrencyRate();
                }

                JournalEntryDetail d = null;
                if (invoice.isNormalInvoice()) {
                    d = invoice.getCustomerEntry();
                    invoiceOriginalAmount = d.getAmount();
                }

                JournalEntryDetail tempd = invoice.getTaxEntry();
                tempd = invoice.getTaxEntry();
                if (tempd != null) {
                    TaxAmount += tempd.getAmount();
                }

                HashMap<String, Object> requestParam = new HashMap();
                requestParam.put("invoiceid", invoice.getID());
                curresult = accInvoiceDAOobj.getInvoiceTermMap(requestParam);
                List<InvoiceTermsMap> termMap = curresult.getEntityList();
                for (InvoiceTermsMap invoiceTerMap : termMap) {
                    InvoiceTermsSales mt = invoiceTerMap.getTerm();
                   
                    if (invoice.isGstIncluded()) {
                        termAmount += invoiceTerMap.getTermAmountExcludingTax();
                        rowTaxAmount+=invoiceTerMap.getTermtaxamount();
                    }else{
                      termAmount += invoiceTerMap.getTermamount();
                    }
                }

                obj.put("name", invoice.getMasterSalesPerson().getValue());
                obj.put("salesPersonID", invoice.getMasterSalesPerson().getID());
                
                String currencyid = (invoice.getCurrency() == null ? currency.getCurrencyID() : invoice.getCurrency().getCurrencyID());
                double invoiceAmount = 0;
                if (extraCompanyPreferences != null && extraCompanyPreferences.getSalesCommissionReportMode() == Constants.SalesCommission_InvoiceNetAmountExcludingTaxMode) {
                    invoiceAmount = invoiceOriginalAmount + rowDisocuntAmount - termAmount - rowTaxAmount - TaxAmount; // Line Item Price Amount + Tax amount // Invoice Net Amount Excluding Tax
                } else if (extraCompanyPreferences != null && extraCompanyPreferences.getSalesCommissionReportMode() == 1) {
                    invoiceAmount = (invoiceOriginalAmount - termAmount); // (Line Item Price Amount - Discount Amount) + Tax Amount // Invoice Net Amount
                } else {
                    invoiceAmount = invoiceOriginalAmount + rowDisocuntAmount - rowTaxAmount - TaxAmount; // Invoice Gross Amount (default rule)
                }
                KwlReturnObject bAmt = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, invoiceAmount, currencyid, invoiceCreationDate, externalCurrencyRate);
                double amountinbase = (Double) bAmt.getEntityList().get(0);

                if (invoice.getMasterSalesPerson() != null) {
                    validFlag = true;
                    itemid = invoice.getMasterSalesPerson().getID();

                    HashMap<String, Object> filterRequestParams = new HashMap<String, Object>();
                    ArrayList filter_names = new ArrayList(), filter_params = new ArrayList(), order_by = new ArrayList(), order_type = new ArrayList();
                    filter_names.add("company.companyID");
                    filter_params.add(sessionHandlerImpl.getCompanyid(request));
                    filter_names.add("schemaItem");
                    filter_params.add(itemid);
                    filter_names.add("commissiontype");
                    filter_params.add(1);
                    order_by.add("lowerlimit");
                    order_by.add("upperlimit");
                    order_type.add("asc");
                    order_type.add("asc");
                    filterRequestParams.put("filter_names", filter_names);
                    filterRequestParams.put("filter_params", filter_params);
                    filterRequestParams.put("order_by", order_by);
                    filterRequestParams.put("order_type", order_type);
                    KwlReturnObject result = accMasterItemsDAOobj.getsalesComissionScehma(filterRequestParams);
                    List listSales = result.getEntityList();


                    double tempOriginalAmount = amountinbase;
                    Iterator itrSales = listSales.iterator();
                    while (itrSales.hasNext()) {
                        SalesComissionScehma salesComissionScehma = (SalesComissionScehma) itrSales.next();
                        double lowervalue = salesComissionScehma.getLowerlimit();
                        double uppervalue = salesComissionScehma.getUpperlimit();
                        double percentageType = salesComissionScehma.getPercentageType();
                        double amount = salesComissionScehma.getAmount();
                        if (percentageType == 1) {
                            if (tempOriginalAmount >= lowervalue && tempOriginalAmount >= uppervalue) {
                                //ERP-1948,ERP-16107.
                                if (lowervalue == 0) {//In this case, we already get diff "including lowervalue & including uppervalue".
                                    commissionAmount = commissionAmount + ((uppervalue - lowervalue) * amount) / 100.00;
                                } else {// Adding +1 in diff because we are considering both values as "including lowervalue & including uppervalue".
                                    commissionAmount = commissionAmount + (((uppervalue - lowervalue)+1) * amount) / 100.00;
                                }
                            } else if (tempOriginalAmount >= lowervalue && tempOriginalAmount < uppervalue) {
                                if (lowervalue == 0) {//In this case, we already get diff "including lowervalue & including uppervalue".
                                    commissionAmount = commissionAmount + ((tempOriginalAmount - lowervalue) * amount) / 100.00;
                                } else {// Adding +1 in diff because we are considering both values as "including lowervalue & including uppervalue".
                                commissionAmount = commissionAmount + (((tempOriginalAmount - lowervalue)) * amount) / 100.00;
                            }
                            }
                        } else {
                            if (tempOriginalAmount > lowervalue && tempOriginalAmount >= uppervalue) {
                                commissionAmount = commissionAmount + amount;
                            } else if (tempOriginalAmount > lowervalue && tempOriginalAmount < uppervalue) {
                                commissionAmount = commissionAmount + amount;
                            }
                        }
                    }
                }

                totalamountinbase = totalamountinbase + amountinbase;
            }

            obj.put(Constants.currencyKey, currency != null ? currency.getCurrencyID() : "");
            obj.put("currencysymbol", currency != null ? currency.getSymbol() : "");

            if (validFlag) {
                obj.put("actualInvoiceamount", totalamountinbase);
                obj.put("commissionamount", commissionAmount);
                jObj.put("obj", obj);
            }

        } catch (Exception ex) {
            throw ServiceException.FAILURE("getInvoiceJson : " + ex.getMessage(), ex);
        }
        return jObj;
    }
    
    public JSONObject getPaymentTermSalesCommissionReport(HttpServletRequest request, List list, String itemid) throws SessionExpiredException, ServiceException {
        JSONObject jObj = new JSONObject();

        try {
            HashMap requestParams = AccInvoiceServiceHandler.getInvoiceRequestMap(request);
            DateFormat df = authHandler.getDateOnlyFormat();
            JSONObject obj = new JSONObject();

            KwlReturnObject curresult = accountingHandlerDAOobj.getObject(KWLCurrency.class.getName(), AccountingManager.getGlobalCurrencyidFromRequest(request));
            KWLCurrency currency = (KWLCurrency) curresult.getEntityList().get(0);

            String companyid = sessionHandlerImpl.getCompanyid(request);

            // Getting List of Sales Commission Rules

            HashMap<String, Object> filterRequestParams = new HashMap<String, Object>();
            ArrayList filter_names = new ArrayList(), filter_params = new ArrayList(), order_by = new ArrayList(), order_type = new ArrayList();
            filter_names.add("company.companyID");
            filter_params.add(sessionHandlerImpl.getCompanyid(request));
            filter_names.add("schemaItem");
            filter_params.add(itemid);
            filter_names.add("commissiontype");
            filter_params.add(3);
            order_by.add("lowerlimit");
            order_by.add("upperlimit");
            order_type.add("asc");
            order_type.add("asc");
            filterRequestParams.put("filter_names", filter_names);
            filterRequestParams.put("filter_params", filter_params);
            filterRequestParams.put("order_by", order_by);
            filterRequestParams.put("order_type", order_type);
            KwlReturnObject result = accMasterItemsDAOobj.getsalesComissionScehma(filterRequestParams);
            List listSales = result.getEntityList();


            double totalamountinbase = 0, termAmount = 0, TaxAmount = 0, rowTaxAmount = 0, totalCollectedAmount = 0, totalCommissionedAmount = 0;
            Iterator itr = list.iterator();
            boolean validFlag = false;
            while (itr.hasNext()) {
                termAmount = 0; 
                TaxAmount = 0; 
                rowTaxAmount = 0;

                Invoice invoice = (Invoice) itr.next();

                Date invoiceCreationDate = invoice.getCreationDate();
                Double externalCurrencyRate = 0d;
                Double invoiceOriginalAmount = 0d;
                if (invoice.isIsOpeningBalenceInvoice() && !invoice.isNormalInvoice()) {
                    ExchangeRateDetails erd = invoice.getExchangeRateDetail();
                    externalCurrencyRate = invoice.getExchangeRateForOpeningTransaction();
                    invoiceOriginalAmount = invoice.getOriginalOpeningBalanceAmount();
                }


                Set<InvoiceDetail> invoiceDetails = invoice.getRows();
                for (InvoiceDetail invoiceDetail : invoiceDetails) {
                    /**
                     *  SDP-12911 RowTermAmount includes linelevel tax summation for every Product as multiple taxes can be applied on single line level
                     * for Indian Country
                     */
                    rowTaxAmount += invoiceDetail.getRowTaxAmount() + invoiceDetail.getRowTermTaxAmount() + invoiceDetail.getRowTermAmount();
                }

                JournalEntry je = null;
                if (invoice.isNormalInvoice()) {
                    je = invoice.getJournalEntry();
                    externalCurrencyRate = je.getExternalCurrencyRate();
                }

                JournalEntryDetail d = null;
                if (invoice.isNormalInvoice()) {
                    d = invoice.getCustomerEntry();
                    invoiceOriginalAmount = d.getAmount();
                }

                JournalEntryDetail tempd = invoice.getTaxEntry();
                tempd = invoice.getTaxEntry();
                if (tempd != null) {
                    TaxAmount += tempd.getAmount();
                }

                HashMap<String, Object> requestParam = new HashMap();
                requestParam.put("invoiceid", invoice.getID());
                curresult = accInvoiceDAOobj.getInvoiceTermMap(requestParam);
                List<InvoiceTermsMap> termMap = curresult.getEntityList();
                for (InvoiceTermsMap invoiceTerMap : termMap) {
                    InvoiceTermsSales mt = invoiceTerMap.getTerm();
                    termAmount += invoiceTerMap.getTermamount();
                }

                obj.put("salespersoncode", (invoice.getMasterSalesPerson() != null)?invoice.getMasterSalesPerson().getCode():"");
                obj.put("salesPersonContactNumber", (invoice.getMasterSalesPerson() != null)?invoice.getMasterSalesPerson().getContactNumber():"");
                obj.put("salesPersonAddress", (invoice.getMasterSalesPerson() != null)?invoice.getMasterSalesPerson().getAddress():"");
                obj.put("name", invoice.getMasterSalesPerson().getValue());

                if (invoice.getMasterSalesPerson() != null) {
                    validFlag = true;
                    itemid = invoice.getMasterSalesPerson().getID();
                }

                String currencyid = (invoice.getCurrency() == null ? currency.getCurrencyID() : invoice.getCurrency().getCurrencyID());
                double invoiceAmount = invoiceOriginalAmount - rowTaxAmount - termAmount - TaxAmount;
                KwlReturnObject bAmt = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, invoiceAmount, currencyid, invoiceCreationDate, externalCurrencyRate);
                double amountinbase = (Double) bAmt.getEntityList().get(0);


                totalamountinbase = totalamountinbase + amountinbase;

                // Getting Received Amount Per Invoice for each rule

                if (validFlag) {
                    Iterator itrSales = listSales.iterator();
                    while (itrSales.hasNext()) {
                        SalesComissionScehma salesComissionScehma = (SalesComissionScehma) itrSales.next();
                        int lowervalue = (int) salesComissionScehma.getLowerlimit();
                        int uppervalue = (int) salesComissionScehma.getUpperlimit();
                        Date creationDate = invoice.getCreationDate();

                        Calendar scal = Calendar.getInstance();
                        scal.setTime(creationDate);
                        scal.add(Calendar.DATE, lowervalue);
                        Date scalDate = null;
                        String scalString = authHandler.getDateOnlyFormat().format(scal.getTime());
                        try {
                            scalDate = authHandler.getDateOnlyFormat().parse(scalString);
                        } catch (ParseException ex) {
                            scalDate = scal.getTime();
                            Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
                        }

                        Date fromDate = scalDate;

                        Calendar ecal = Calendar.getInstance();
                        ecal.setTime(creationDate);
                        ecal.add(Calendar.DATE, uppervalue);

                        Date ecalDate = null;
                        String ecalString = authHandler.getDateOnlyFormat().format(ecal.getTime());
                        try {
                            ecalDate = authHandler.getDateOnlyFormat().parse(ecalString);
                        } catch (ParseException ex) {
                            ecalDate = ecal.getTime();
                            Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
                        }

                        Date toDate = ecalDate;

                        HashMap<String, Object> receiptMap = new HashMap<String, Object>();

                        receiptMap.put("invoiceid", invoice.getID());
                        receiptMap.put(Constants.companyKey, companyid);
                        receiptMap.put("startDate", fromDate);
                        receiptMap.put("endDate", toDate);

                        KwlReturnObject receiptResult = accReceiptDAOobj.getReceiptFromInvoice(receiptMap);

                        double receivedAmtInBase = 0d;

                        List l = receiptResult.getEntityList();
                        Iterator recitr = l.iterator();
                        while (recitr.hasNext()) {
                            ReceiptDetail rd = (ReceiptDetail) recitr.next();
                            double receivedAmt = rd.getAmount();

                            KwlReturnObject bAmt1 = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, receivedAmt, rd.getReceipt().getCurrency().getCurrencyID(), rd.getReceipt().getCreationDate(), rd.getReceipt().getJournalEntry().getExternalCurrencyRate());
                            double paidAmtInBase = authHandler.round((Double) bAmt1.getEntityList().get(0), companyid);
                            receivedAmtInBase += paidAmtInBase;
                        }

                        double percent = salesComissionScehma.getAmount();

                        totalCommissionedAmount += (receivedAmtInBase * percent / 100);

                        totalCollectedAmount += receivedAmtInBase;


                    }
                    obj.put("actualInvoiceamount", totalamountinbase);
                    jObj.put("obj", obj);
                }

            }

            obj.put(Constants.currencyKey, currency != null ? currency.getCurrencyID() : "");
            obj.put("currencysymbol", currency != null ? currency.getSymbol() : "");
            if (validFlag) {
                obj.put("actualInvoiceamount", totalamountinbase);
                obj.put("commissionamount", totalCommissionedAmount);
                obj.put("receivedAmount", totalCollectedAmount);
                jObj.put("obj", obj);
            }



        } catch (Exception ex) {
            throw ServiceException.FAILURE("getInvoiceJson : " + ex.getMessage(), ex);
        }
        return jObj;
    }
      
    public ModelAndView exportPaymentTermSalesCommissionReport(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        JSONArray jArr = new JSONArray();
        String view = "jsonView_ex";
        try {
            jArr = getPaymentTermSalesCommissionReport(request);
            jobj.put(Constants.data, jArr);
            String fileType = request.getParameter("filetype");
            if (StringUtil.equal(fileType, "print")) {
                String GenerateDate = authHandler.getDateFormatter(request).format(new Date());
                jobj.put("GenerateDate", GenerateDate);
                view = "jsonView-empty";
            }
            exportDaoObj.processRequest(request, response, jobj);
        } catch (SessionExpiredException ex) {
            Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
        }
        return new ModelAndView(view, "model", jobj.toString());
    }
   
     public ModelAndView exportSalesCommissioReport(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        JSONArray jArr=new JSONArray();
        String view = "jsonView_ex";
        try{         
            jArr=getSalesCommissioReportDetails(request);
            jobj.put(Constants.data, jArr);
            String fileType = request.getParameter("filetype");
            if (StringUtil.equal(fileType, "print")) {
                String  GenerateDate = authHandler.getDateFormatter(request).format(new Date());
                jobj.put("GenerateDate", GenerateDate);
                view = "jsonView-empty";
            }
            exportDaoObj.processRequest(request, response, jobj);
        } catch (SessionExpiredException ex) {
            Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
        } catch(Exception ex) {
            Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
        }
        return new ModelAndView(view, "model", jobj.toString());
    }  
     public ModelAndView BrandCommissionReport(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        JSONArray DataJArr=new JSONArray();
        boolean issuccess = false;
        String msg = "";
        try{
            DataJArr=getBrandCommissioReportDetails(request);
            int count = DataJArr.length();
            jobj.put(Constants.data, DataJArr);
            jobj.put("count", count);
            issuccess = true;
        } catch (Exception ex){
            msg = ""+ex.getMessage(); 
            Logger.getLogger(accInvoiceController.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                jobj.put("success", issuccess);
                jobj.put("msg", msg);
            } catch (JSONException ex) {
                Logger.getLogger(accInvoiceController.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return new ModelAndView(Constants.jsonView, "model", jobj.toString());
    }
     public JSONArray getBrandCommissioReportDetails(HttpServletRequest request) throws SessionExpiredException, ServiceException {
      JSONArray DataJArr=new JSONArray();
         try{
            HashMap requestParams = AccInvoiceServiceHandler.getInvoiceRequestMap(request);
            String categoryid=request.getParameter("categoryid");       
                HashMap<String, Object> filterRequestParams = new HashMap<String, Object>();
                ArrayList filter_names = new ArrayList(),filter_params = new ArrayList(), order_by = new ArrayList(), order_type = new ArrayList();
                filter_names.add("company.companyID");
                filter_params.add(sessionHandlerImpl.getCompanyid(request));
                filter_names.add("masterGroup.ID");
                filter_params.add("15");//For Geting All Sales Person
                filterRequestParams.put("filter_names", filter_names);
                filterRequestParams.put("filter_params", filter_params);
                
                KwlReturnObject personResult = accMasterItemsDAOobj.getMasterItems(filterRequestParams);    
                List persons = personResult.getEntityList();
                Iterator itr = persons.iterator();
                while (itr.hasNext()) {
                    MasterItem masterItem = (MasterItem) itr.next();
                    requestParams.put("itemid",masterItem.getID());
                    requestParams.put("salesperson",masterItem.getValue());
                    if(StringUtil.isNullOrEmpty(categoryid) || (StringUtil.isNullOrEmpty(categoryid)==false && categoryid.equalsIgnoreCase("All"))){
                        filter_names.clear();//For Featching All Category Records
                        filter_params.clear();
                        filter_names.add("company.companyID");
                        filter_params.add(sessionHandlerImpl.getCompanyid(request));
                        filter_names.add("masterGroup.ID");
                        filter_params.add("19");//For Geting All Product Category
                        filterRequestParams.put("filter_names", filter_names);
                        filterRequestParams.put("filter_params", filter_params);

                        KwlReturnObject categoryResult = accMasterItemsDAOobj.getMasterItems(filterRequestParams);    
                        List category = categoryResult.getEntityList();
                        Iterator itrcateogry = category.iterator();
                        while(itrcateogry.hasNext()){
                            MasterItem catItem = (MasterItem) itrcateogry.next();
                            requestParams.put("categoryid",catItem.getID());
                            KwlReturnObject result = accInvoiceDAOobj.getInvoicesForBrandCommission(requestParams);
                            List list = result.getEntityList();

                            JSONObject JObj = getBrandCommissionJsonMerged(request, list,requestParams);    
                            if(JObj.length()>0){
                                DataJArr.put(JObj.get("obj"));
                            }
                        }
                    }else{// For Selected Category Records
                         String categoryids[]=categoryid.split(",");
                        for(int i=0;i<categoryids.length;i++){
                            requestParams.put("categoryid",categoryids[i]);
                            KwlReturnObject result = accInvoiceDAOobj.getInvoicesForBrandCommission(requestParams);
                            List list = result.getEntityList();

                            JSONObject JObj = getBrandCommissionJsonMerged(request, list,requestParams);    
                            if(JObj.length()>0){
                                DataJArr.put(JObj.get("obj"));
                            }
                        }
                    }
                }       
        } catch (Exception ex){
          
            Logger.getLogger(accInvoiceController.class.getName()).log(Level.SEVERE, null, ex);
        } 
     return DataJArr;
     
    }
      public JSONObject getBrandCommissionJsonMerged(HttpServletRequest request, List list,HashMap requestMap) throws SessionExpiredException, ServiceException {      
        JSONObject jObj=new JSONObject();
       
        try{
            HashMap requestParams = AccInvoiceServiceHandler.getInvoiceRequestMap(request);
            JSONObject obj = new JSONObject();
            String companyid = sessionHandlerImpl.getCompanyid(request);
            KwlReturnObject curresult = accountingHandlerDAOobj.getObject(KWLCurrency.class.getName(), AccountingManager.getGlobalCurrencyidFromRequest(request));
            KWLCurrency currency = (KWLCurrency) curresult.getEntityList().get(0);
            
            double totalamountinbase = 0,totalSalesReturnAmount=0;
            Iterator itr = list.iterator();
            boolean validFlag=false;
            while (itr.hasNext()) {
                 double salesReturnAmount=0;
                InvoiceDetail invoiceDetail = (InvoiceDetail) itr.next();

                    Date invoiceCreationDate = invoiceDetail.getInvoice().getCreationDate();
                    Double externalCurrencyRate = 0d;
   
                    JournalEntry je = null;
                    if(invoiceDetail.getInvoice().isNormalInvoice()){
                        je = invoiceDetail.getInvoice().getJournalEntry();
                        externalCurrencyRate = je.getExternalCurrencyRate();
                    }
                    double newBaseAmount = 0.0;
                    if(Constants.InvoiceAmountDueFlag) {
                        List ll = accInvoiceCommon.getInvoiceDiscountAmountInfo(requestParams, invoiceDetail.getInvoice());
                        newBaseAmount = (Double) ll.get(0);
                    } else {
                        List ll = accInvoiceCommon.getAmountDue_Discount(requestParams, invoiceDetail.getInvoice());
                        newBaseAmount = (Double) ll.get(0);
                    }
                    double amountForCommission=0.0;
                    double invoiceQuantity=invoiceDetail.getInventory().getQuantity();
                    if(newBaseAmount==0){
                         validFlag=true;
                        amountForCommission=authHandler.round(invoiceDetail.getRate()*invoiceQuantity, companyid);
                        KwlReturnObject idresult = accInvoiceDAOobj.getSalesReturnIDFromInvoiceDetails(invoiceDetail.getID());
                        List returnList = idresult.getEntityList();
                        Iterator ite1 = returnList.iterator();
                        double qua = 0;
                        while (ite1.hasNext()) {
                            SalesReturnDetail se = (SalesReturnDetail) ite1.next();
                            qua += se.getInventory().getQuantity();
                        }
                        if (qua >0) {
                            salesReturnAmount+=authHandler.round(invoiceDetail.getRate()*qua, companyid);
                        }
                        KwlReturnObject dodetails = accInvoiceDAOobj.getDOIDFromInvoiceDetails(invoiceDetail.getID());
                         returnList = dodetails.getEntityList();
                         ite1 = returnList.iterator();
                        while (ite1.hasNext()) {
                            DeliveryOrderDetail deliveryOrderDetail = (DeliveryOrderDetail) ite1.next();
                             idresult = accInvoiceDAOobj.getSalesReturnIDFromDODetails(deliveryOrderDetail.getID());
                             List returdodetailList = idresult.getEntityList();
                             Iterator dodite = returdodetailList.iterator();
                             qua = 0;
                            while (dodite.hasNext()) {
                                SalesReturnDetail se = (SalesReturnDetail) dodite.next();
                                qua += se.getInventory().getQuantity();
                            }
                            if (qua >0) {
                                salesReturnAmount+=invoiceDetail.getRate()*qua;
                            }
                        }
                       
                    }

                    String currencyid=(invoiceDetail.getInvoice().getCurrency()==null?currency.getCurrencyID(): invoiceDetail.getInvoice().getCurrency().getCurrencyID());              
                    KwlReturnObject bAmt = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, amountForCommission, currencyid, invoiceCreationDate,externalCurrencyRate);
                    double amountinbase=(Double)bAmt.getEntityList().get(0);
                    bAmt = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, salesReturnAmount, currencyid, invoiceCreationDate,externalCurrencyRate);
                    salesReturnAmount=(Double)bAmt.getEntityList().get(0);
                    
                    
                    totalamountinbase=totalamountinbase+amountinbase;   
                    totalSalesReturnAmount=totalSalesReturnAmount+salesReturnAmount;   
                }
            
             
            if(validFlag){
                HashMap<String, Object> filterRequestParams = new HashMap<String, Object>();
                ArrayList filter_names = new ArrayList(),filter_params = new ArrayList(), order_by = new ArrayList(), order_type = new ArrayList();
                filter_names.add("company.companyID");
                filter_params.add(sessionHandlerImpl.getCompanyid(request));
                filter_names.add("schemaItem");
                filter_params.add((String)requestMap.get("itemid"));
                filter_names.add("categoryid");
                filter_params.add((String)requestMap.get("categoryid"));
                order_by.add("categoryid");
                order_type.add("asc");
                filterRequestParams.put("filter_names", filter_names);
                filterRequestParams.put("filter_params", filter_params);
                filterRequestParams.put("order_by", order_by);
                filterRequestParams.put("order_type", order_type);
                KwlReturnObject result = accMasterItemsDAOobj.getsalesComissionScehma(filterRequestParams);    
                List listSales = result.getEntityList();

               
                double tempOriginalAmount=totalamountinbase-totalSalesReturnAmount;
                Iterator itrSales = listSales.iterator();
                while(itrSales.hasNext()){
                    SalesComissionScehma salesComissionScehma=(SalesComissionScehma) itrSales.next();
                    double amount=salesComissionScehma.getAmount();
                    double percentageAmount=(tempOriginalAmount*amount)/100.00;
                    String category=salesComissionScehma.getCategoryid();
                    obj.put(Constants.currencyKey,currency!=null?currency.getCurrencyID():"");
                    obj.put("currencysymbol",currency!=null?currency.getSymbol():""); 
                    obj.put("currencycode",currency!=null?currency.getCurrencyCode():""); 
                    obj.put("salescompleted",totalamountinbase );
                    obj.put("salesperson",(String)requestMap.get("salesperson"));
                    obj.put("salespersonid",(String)requestMap.get("itemid"));
                    obj.put("categoryid",category );
                    obj.put("percentage",amount );
                    obj.put("salesreturn",totalSalesReturnAmount );
                    obj.put("netsales",tempOriginalAmount );
                    
                    obj.put("netcommision",percentageAmount );
                    KwlReturnObject itemresult = accountingHandlerDAOobj.getObject(MasterItem.class.getName(), category);
                    MasterItem masterItem = (MasterItem) itemresult.getEntityList().get(0);
                    
                    if(masterItem!=null){
                        obj.put("categoryname",masterItem.getValue());
                    }
                    jObj.put("obj",obj);            
                }            
                
            }
        } catch (Exception ex) {
            throw ServiceException.FAILURE("getInvoiceJson : "+ex.getMessage(), ex);
        }
        return jObj;
    }
      
     public ModelAndView exportBrandCommissioReport(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        JSONArray jArr=new JSONArray();
        String view = "jsonView_ex";
        try{         
            jArr=getBrandCommissioReportDetails(request);
            jobj.put(Constants.data, jArr);
            String fileType = request.getParameter("filetype");
            if (StringUtil.equal(fileType, "print")) {
                String  GenerateDate = authHandler.getDateFormatter(request).format(new Date());
                jobj.put("GenerateDate", GenerateDate);
                view = "jsonView-empty";
            }
            exportDaoObj.processRequest(request, response, jobj);
        } catch (SessionExpiredException ex) {
            Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
        } catch(Exception ex) {
            Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
        }
        return new ModelAndView(view, "model", jobj.toString());
    }  
    public ModelAndView getCreditNoteInvoices(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        String msg = "";
        boolean issuccess = false;
        try {
            jobj = getCreditNoteInvoices(request);
            issuccess = true;
        } catch (ServiceException ex) {
            msg = ex.getMessage();
            Logger.getLogger(accInvoiceController.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
        } catch (Exception ex) {
            msg = "accInvoiceController.getCreditNoteInvoiceRows:" + ex.getMessage();
            Logger.getLogger(accInvoiceController.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
        } finally {
            try {
                jobj.put("success", issuccess);
                jobj.put("msg", msg);
            } catch (JSONException ex) {
                Logger.getLogger(accInvoiceController.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
            }
        }
        return new ModelAndView(Constants.jsonView, "model", jobj.toString());
    }
     
    public JSONObject getCreditNoteInvoices(HttpServletRequest request) throws ServiceException, SessionExpiredException {
        JSONObject jobj = new JSONObject();
        JSONArray jArray = new JSONArray();
        DateFormat df = authHandler.getOnlyDateFormat(request);
        HashMap<String, Object> requestParams = AccountingManager.getGlobalParams(request);
        try {
            String crNoteId = request.getParameter("noteId");
            KwlReturnObject result = accountingHandlerDAOobj.getObject(CreditNote.class.getName(), crNoteId);
            CreditNote cn = (CreditNote) result.getEntityList().get(0);
            String companyid = sessionHandlerImpl.getCompanyid(request);

            if (cn != null) {
                Set<CreditNoteDetail> rows = cn.getRows();
                Set<CreditNoteDetail> Creditnotedetails = new TreeSet<CreditNoteDetail>(new SortCreditNoteDetail());
                Creditnotedetails.addAll(rows);
                
                HashMap<String, String> customFieldMap = new HashMap<>();
                HashMap<String, String> customDateFieldMap = new HashMap<>();

                HashMap<String, Object> fieldrequestParams = new HashMap();
                fieldrequestParams.put(Constants.filter_names, Arrays.asList(Constants.companyid, Constants.moduleid));
                fieldrequestParams.put(Constants.filter_values, Arrays.asList(companyid, Constants.Acc_Invoice_ModuleId));
                HashMap<String, String> replaceFieldMap = new HashMap<>();
                HashMap<String, Integer> FieldMap = accAccountDAOobj.getFieldParamsCustomMap(fieldrequestParams, replaceFieldMap, customFieldMap, customDateFieldMap);

                for (CreditNoteDetail detail : Creditnotedetails) {
                    JSONObject obj = new JSONObject();
                    if (detail.getInvoice() != null) {
                        obj.put("linkdetailid", detail.getID());

                        /*
                         * Checked Null for Invoice linked with Credit Note at
                         * the time of edit Credit Note which was created
                         * without selection any Invoice
                         */

                        obj.put(Constants.billid, detail.getInvoice() != null ? detail.getInvoice().getID() : "");
                        obj.put("billno", detail.getInvoice() != null ? detail.getInvoice().getInvoiceNumber() : "");
                        if (detail.getInvoice() != null) {
                            obj.put("taxamount", detail.getInvoice().getTaxEntry() == null ? 0 : detail.getInvoice().getTaxEntry().getAmount());
                        }


                        Discount disc = detail.getDiscount();
                        double exchangeratefortransaction = detail.getExchangeRateForTransaction();
                        double invoiceReturnedAmt = 0d;
                        if (disc != null) {
                            obj.put("invamount", authHandler.round(disc.getDiscountValue(), companyid));
                            invoiceReturnedAmt = disc.getAmountinInvCurrency();
                        } else {
                            obj.put("invamount", 0);
                        }

                        List ll = null;
                        double amountDueOriginal = 0;
                        if (detail.getInvoice() != null && detail.getInvoice().isIsOpeningBalenceInvoice() && !detail.getInvoice().isNormalInvoice()) {
                            ll = new ArrayList();
                            ll.add(detail.getInvoice() != null ? detail.getInvoice().getOpeningBalanceAmountDue() : 0);
                            ll.add(0.0);
                            ll.add(0.0);
                            ll.add(detail.getInvoice() != null ? detail.getInvoice().getOpeningBalanceAmountDue() : 0);
                            amountDueOriginal = detail.getInvoice() != null ? detail.getInvoice().getOriginalOpeningBalanceAmount() : 0;
                            obj.put("amount", detail.getInvoice() != null ? detail.getInvoice().getOriginalOpeningBalanceAmount() : 0);
                        } else {
                            if (Constants.InvoiceAmountDueFlag && detail.getInvoice() != null) {
                                ll = accInvoiceCommon.getInvoiceDiscountAmountInfo(requestParams, detail.getInvoice());
                            } else {
                                if (detail.getInvoice() != null) {
                                    ll = accInvoiceCommon.getAmountDue_Discount(requestParams, detail.getInvoice());
                            }
                            }
                            amountDueOriginal = detail.getInvoice() != null ? detail.getInvoice().getCustomerEntry().getAmount() : 0;
                            obj.put("amount", detail.getInvoice() != null ? detail.getInvoice().getCustomerEntry().getAmount() : 0);
                        }

                        double amountdue = 0;
                        if (cn.getApprovestatuslevel() != 11) {//pending approval CN : invoices used in such cn has amount due not knocked of so no need to add invoiceReturnedAmt
                            amountdue = detail.getInvoice() != null ? (Double) ll.get(3) : 0;
                        } else {
                            amountdue = detail.getInvoice() != null ? (Double) ll.get(3) + invoiceReturnedAmt : 0;// added invoiceReturnedAmt to show original value which was at time of creation. 
                        }
                        amountdue = amountdue * exchangeratefortransaction;
                        obj.put("amountdue", authHandler.round(amountdue, companyid));
                        obj.put("amountDueOriginal", authHandler.round(amountDueOriginal, companyid));
                        obj.put("exchangeratefortransaction", exchangeratefortransaction);
                        obj.put("currencysymbol", detail.getInvoice() != null ? detail.getInvoice().getCurrency().getSymbol() : "");
                        obj.put("currencysymbolpayment", cn.getCurrency().getSymbol());
                        obj.put("linkingdate",detail.getInvoiceLinkDate()!=null? df.format(detail.getInvoiceLinkDate()):"");
                        if (detail.getInvoice() != null) {
                            obj.put("invoicedate", df.format(detail.getInvoice().getCreationDate()));
                            //Credit Note Rec Name is date .
                            obj.put("date", df.format(detail.getInvoice().getCreationDate()));
                            /**
                             * Passing JE date in response for validating date
                             * on JS Side ERM-655.
                             */
                            obj.put("jeDate", detail.getInvoice().isIsOpeningBalenceInvoice() ? df.format(detail.getInvoice().getCreationDate()) : df.format(detail.getInvoice().getJournalEntry().getEntryDate()));
                        }
                        if (detail.getDiscount() != null) {
                            obj.put("typeFigure", detail.getDiscount().getTypeFigure());   // Figure calculated resctive to invoice amount due
                            obj.put("typeOfFigure", detail.getDiscount().getTypeOfFigure());  // Criteria of calculation for amount - Flat or Percentage
                        }
                        
                        //Get Normal Invoice Custom Data only
                        KwlReturnObject custumObjresult = null;
                        if (detail.getInvoice().isNormalInvoice()) {
                            Map<String, Object> variableMap = new HashMap<>();
                            custumObjresult = accountingHandlerDAOobj.getObject(AccJECustomData.class.getName(), detail.getInvoice().getJournalEntry().getID());
                            replaceFieldMap = new HashMap<>();
                            if (custumObjresult != null && custumObjresult.getEntityList().size() > 0) {
                                AccJECustomData jeDetailCustom = (AccJECustomData) custumObjresult.getEntityList().get(0);
                                if (jeDetailCustom != null) {
                                    AccountingManager.setCustomColumnValues(jeDetailCustom, FieldMap, replaceFieldMap, variableMap);
                                    JSONObject params = new JSONObject();
                                    fieldDataManagercntrl.addCustomData(variableMap, customFieldMap, customDateFieldMap, obj, params);
                                }
                            }
                        }
                        
                        jArray.put(obj);
                    }
                }
            }
            jobj.put(Constants.data, jArray);
        } catch (JSONException ex) {
            Logger.getLogger(accInvoiceController.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
        }
        return jobj;
    }
    
    /*
     Function to fetch Invoice status for Delivery order. Checked if delivery order of all invoice quantities is prepared.
     */
    public String getInvoiceStatusForDO(Invoice iv) throws ServiceException {
        Set<InvoiceDetail> ivDetail = iv.getRows();
        Iterator ite = ivDetail.iterator();
        String result = "Closed";
            while (ite.hasNext()) {
                InvoiceDetail iDetail = (InvoiceDetail) ite.next();
                KwlReturnObject idresult = accInvoiceDAOobj.getDOIDFromInvoiceDetails(iDetail.getID());
                List list = idresult.getEntityList();
                Iterator ite1 = list.iterator();
                double qua = 0;
                while (ite1.hasNext()) {
                    DeliveryOrderDetail ge = (DeliveryOrderDetail) ite1.next();
                    qua += ge.getInventory().getQuantity();
                }
                if (qua < iDetail.getInventory().getQuantity()) {
                    result = "Open";
                    break;
                }
            }
        return result;
    }
    
    /*
     Function to fetch Invoice status for Sales return. Checked if Sales return of all invoice quantities is returned.
     */
    public String getInvoiceStatusForSalesReturn(Invoice iv) throws ServiceException {
        Set<InvoiceDetail> ivDetail = iv.getRows();
        Iterator ite = ivDetail.iterator();
        String result = "Completely Returned";
            while (ite.hasNext()) {
                InvoiceDetail iDetail = (InvoiceDetail) ite.next();
                KwlReturnObject idresult = accInvoiceDAOobj.getSalesReturnIDFromInvoiceDetails(iDetail.getID());
                List list = idresult.getEntityList();
                Iterator ite1 = list.iterator();
                double qua = 0;
                while (ite1.hasNext()) {
                    SalesReturnDetail se = (SalesReturnDetail) ite1.next();
                    qua += se.getInventory().getQuantity();
                }
                if (qua < iDetail.getInventory().getQuantity()) {
                    result = "Completely Not Returned";
                    break;
                }
            }
        return result;
    }
  public ModelAndView getDOFromInvoice(HttpServletRequest request, HttpServletResponse response) throws JSONException, ServiceException {
     
      JSONObject jobj = new JSONObject();
      JSONArray JsonArr = new JSONArray();
      boolean issuccess = false;
      int count = 0;
      String msg = "";
      String DeliveryOrderSequeceFormat="";
      try {

          String InvoiceId = request.getParameter("invoiceId");
          Boolean CallFromCI= Boolean.TRUE.parseBoolean(request.getParameter("CallFromCI"));
          String companyid = sessionHandlerImpl.getCompanyid(request);
          KwlReturnObject capresult = accountingHandlerDAOobj.getObject(CompanyAccountPreferences.class.getName(), companyid);
          CompanyAccountPreferences preferences = (CompanyAccountPreferences) capresult.getEntityList().get(0);
          KwlReturnObject extraprefresult = accountingHandlerDAOobj.getObject(ExtraCompanyPreferences.class.getName(), companyid);
          ExtraCompanyPreferences extraCompanyPreferences = (ExtraCompanyPreferences) extraprefresult.getEntityList().get(0);
          KwlReturnObject InvoiceDo = accInvoiceDAOobj.getDOFromInvoices(InvoiceId, companyid,CallFromCI);
          count = InvoiceDo.getRecordTotalCount();
          List InvoiceDoList = InvoiceDo.getEntityList();
          Iterator itr = InvoiceDoList.iterator();
          while (itr.hasNext()) {
              Object[] oj = (Object[]) itr.next();
              String SequenceNumDO = oj[0] != null ? oj[0].toString() : "0";
              String DeliveryOrderID = oj[1] != null ? oj[1].toString() : "0";
              boolean AutoGen=Boolean.parseBoolean(oj[3].toString());
              if(AutoGen)
              {
                  DeliveryOrderSequeceFormat = oj[2] != null ? oj[2].toString() :"DO000000";
              }
              else{
                   DeliveryOrderSequeceFormat = oj[2] != null ? oj[2].toString() :"NA";
              }
              JSONObject obj = new JSONObject();
              obj.put("SequenceNumDO", SequenceNumDO);
              obj.put("DeliveryOrderID", DeliveryOrderID);
              obj.put("sequenceformatDo", DeliveryOrderSequeceFormat);
              if (extraCompanyPreferences != null && preferences != null && (extraCompanyPreferences.isActivateMRPModule() || preferences.getInventoryValuationType() == Constants.PERPETUAL_VALUATION_METHOD)) {
                  JournalEntry inventoryJE = null;
                  if (CallFromCI) {
                      KwlReturnObject result = accountingHandlerDAOobj.getObject(DeliveryOrder.class.getName(), DeliveryOrderID);
                      DeliveryOrder order = (DeliveryOrder) result.getEntityList().get(0);
                      if (order != null && order.getInventoryJE() != null) {
                          inventoryJE = order.getInventoryJE();
                      }
                  } else {
                      KwlReturnObject result = accountingHandlerDAOobj.getObject(GoodsReceiptOrder.class.getName(), DeliveryOrderID);
                      GoodsReceiptOrder order = (GoodsReceiptOrder) result.getEntityList().get(0);
                      if (order != null && order.getInventoryJE() != null) {
                          inventoryJE = order.getInventoryJE();
                      }
                  }
                  if (inventoryJE != null) {
                      obj.put(Constants.INVENTORYJE_SEQ_FORMAT_ID, inventoryJE.getSeqformat() == null ? "" : inventoryJE.getSeqformat().getID());
                      obj.put(Constants.INVENTORYJE_SEQ_NUMBER, inventoryJE.getSeqnumber());
                      obj.put(Constants.INVENTORYJE_IS_AUTO_GENERATED, inventoryJE.isAutoGenerated());
                      obj.put(Constants.INVENTORYJE_ENTRYNO, inventoryJE.getEntryNumber());
                      obj.put(Constants.INVENTORYJE_DATE_PREFIX_VALUE, inventoryJE.getDatePreffixValue());
                      obj.put(Constants.INVENTORYJE_DATE_SUFFIX_VALUE, inventoryJE.getDateSuffixValue());
                      obj.put(Constants.INVENTORYJE_ID, inventoryJE.getID());
                  }
              }
              JsonArr.put(obj);
          }
          jobj.put(Constants.data, JsonArr);
          jobj.put("count", count);
          issuccess = true;
      } catch (Exception ex) {
          msg = "" + ex.getMessage();
          Logger.getLogger(accInvoiceController.class.getName()).log(Level.SEVERE, null, ex);
      } finally {
          try {
              jobj.put("success", issuccess);
              jobj.put("msg", msg);
          } catch (JSONException ex) {
              Logger.getLogger(accInvoiceController.class.getName()).log(Level.SEVERE, null, ex);
          }
      }
      return new ModelAndView(Constants.jsonView, "model", jobj.toString());
    }
   public boolean selectInvoice(Invoice iv ,Date sd) throws ServiceException {
       Date initialDate = iv.getRepeateInvoice().getStartDate();
       Calendar cal = Calendar.getInstance();
       cal.setTime(initialDate);

       Date calDate = null;
       try {
           String calString;
           try {
               calString = authHandler.getDateOnlyFormat().format(cal.getTime());
               calDate = authHandler.getDateOnlyFormat().parse(calString);
           } catch (SessionExpiredException ex) {
                calDate = cal.getTime();
               Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
           }

       } catch (ParseException ex) {
           calDate = cal.getTime();
           Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
       }
       
       while(calDate.compareTo(sd) <= 0){
             if( iv.getRepeateInvoice().getIntervalType().equalsIgnoreCase("day")){
                   if(calDate.compareTo(sd)==0){
                        return true;
                    }
                    cal.add(Calendar.DATE, iv.getRepeateInvoice().getIntervalUnit());
                } else if (iv.getRepeateInvoice().getIntervalType().equalsIgnoreCase("week")) {
                    if(calDate.compareTo(sd)==0){
                        return true;
                    }
                    cal.add(Calendar.DATE, iv.getRepeateInvoice().getIntervalUnit() * 7);
                } else if (iv.getRepeateInvoice().getIntervalType().equalsIgnoreCase("month")) {
                    if(calDate.compareTo(sd)==0){
                        return true;
                    }
                    cal.add(Calendar.MONTH, iv.getRepeateInvoice().getIntervalUnit());
                }
           }
        return false;
    }
  
   public ModelAndView getRecurringInvoices(HttpServletRequest request, HttpServletResponse response) {
      JSONObject jobj = new JSONObject();
      JSONArray JsonArr = new JSONArray();
      List<Object[]> invoiceId = new ArrayList<Object[]>();
      boolean issuccess = false;
      int count = 0;
      String msg = "";
      try {
          String companyid = sessionHandlerImpl.getCompanyid(request);
          HashMap<String, Object> requestParams = new HashMap<String, Object>();
          DateFormat df = (DateFormat)authHandler.getDateFormatter(request);
          Date startDate=(Date)df.parse(request.getParameter("InvoicesOnDate"));
          startDate.setMinutes(0);
          startDate.setHours(0);
          startDate.setSeconds(0);
          requestParams.put("startdate",request.getParameter("InvoicesOnDate"));
          requestParams.put(Constants.companyKey,companyid);
          requestParams.put("df", authHandler.getDateFormatter(request));  
          KwlReturnObject InvoiceDo = accInvoiceDAOobj.getRecurringInvoices(requestParams);
          List InvoiceDoList = InvoiceDo.getEntityList();
          Iterator itr = InvoiceDoList.iterator();
          while (itr.hasNext()) {
              Invoice Inv = (Invoice) itr.next();
              if(selectInvoice(Inv,startDate)){
                  Object[] objects=new Object[2];
                  objects[0]=Inv.getID();
                  objects[1]=false;
                  invoiceId.add(objects);
                  count++;
     
              }
          }
          JsonArr = accInvoiceServiceDAO.getInvoiceJsonMerged(request, invoiceId, JsonArr);
          jobj.put(Constants.data, JsonArr);
          jobj.put("count", count);
          issuccess = true;
      } catch (Exception ex) {
          msg = "" + ex.getMessage();
          Logger.getLogger(accInvoiceController.class.getName()).log(Level.SEVERE, null, ex);
      } finally {
          try {
              jobj.put("success", issuccess);
              jobj.put("msg", msg);
          } catch (JSONException ex) {
              Logger.getLogger(accInvoiceController.class.getName()).log(Level.SEVERE, null, ex);
          }
      }
      return new ModelAndView(Constants.jsonView, "model", jobj.toString());
   }
   public ModelAndView excludeInvoice(HttpServletRequest request, HttpServletResponse response) {
      JSONObject jobj = new JSONObject();
      JSONArray JsonArr = new JSONArray();
      boolean issuccess = false;
      int count = 0;
      String msg = "";
       DefaultTransactionDefinition def = new DefaultTransactionDefinition();
       def.setName("RIC_Tx");
       def.setPropagationBehavior(TransactionDefinition.PROPAGATION_REQUIRED);
       TransactionStatus status = txnManager.getTransaction(def);
      try {
          String companyid = sessionHandlerImpl.getCompanyid(request);
          DateFormat df = (DateFormat)authHandler.getDateFormatter(request);
          Date generatedDate=(Date)df.parse(request.getParameter("generatedDate"));
          String InvoiceNo=request.getParameter("invoiceno");
          String InvoiceID=request.getParameter("invoice");
          HashMap<String, Object> requestParams = new HashMap<String, Object>();
          requestParams.put("invoice",request.getParameter("invoice"));
          requestParams.put("excludeOrGenerate",Integer.parseInt(request.getParameter("excludeOrGenerate")));
          requestParams.put("generatedDate",generatedDate); 
          requestParams.put(Constants.companyKey,companyid);
          KwlReturnObject Excludeinv = accInvoiceDAOobj.saveExcludedRecords(requestParams);
          auditTrailObj.insertAuditLog(AuditAction.INVOICE_EXCLUDE, "User " + sessionHandlerImpl.getUserFullName(request) + " has Excluded Invoice " +InvoiceNo + " of Date "+generatedDate, request, InvoiceID);       
         
          msg ="Outstanding Order Excluded Successfuly";  
          issuccess = true;
          txnManager.commit(status);
        } catch (Exception ex){
            txnManager.rollback(status);
            msg = "" + ex.getMessage();
            Logger.getLogger(accInvoiceController.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                jobj.put("success", issuccess);
                jobj.put("msg", msg);
            } catch (JSONException ex) {
                Logger.getLogger(accInvoiceController.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return new ModelAndView(Constants.jsonView, "model", jobj.toString());
   }
   
    public ModelAndView getClaimedBadDebtInvoices(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        boolean issuccess = false;
        String msg = "";
        try {
            JSONArray DataJArr = accInvoiceServiceDAO.getBadDebtClaimedInvoicesJson(request);
            jobj.put(Constants.data, DataJArr);
            jobj.put("count", DataJArr.length());
        } catch (Exception ex) {
            msg = "" + ex.getMessage();
            Logger.getLogger(accInvoiceController.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                jobj.put("success", issuccess);
                jobj.put("msg", msg);
            } catch (JSONException ex) {
                Logger.getLogger(accInvoiceController.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return new ModelAndView(Constants.jsonView, "model", jobj.toString());
    }
    
    public ModelAndView exportClaimedBadDebtInvoice(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        String view = "jsonView_ex";
        try {

            boolean isForExport = true;
            JSONArray DataJArr = accInvoiceServiceDAO.getBadDebtClaimedInvoicesJson(request);

            jobj.put(Constants.data, DataJArr);
            jobj.put("totalCount", DataJArr.length());

            String fileType = request.getParameter("filetype");
            if (StringUtil.equal(fileType, "print")) {
                String GenerateDate = authHandler.getDateFormatter(request).format(new Date());
                jobj.put("GenerateDate", GenerateDate);
                view = "jsonView-empty";
            }
            exportDaoObj.processRequest(request, response, jobj);
        } catch (SessionExpiredException ex) {
            Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
        } catch (Exception ex) {
            Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
        }
        return new ModelAndView(view, "model", jobj.toString());
    }
    
    public ModelAndView getRecoveredBadDebtInvoices(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        boolean issuccess = false;
        String msg = "";
        try {
            JSONArray DataJArr = accInvoiceServiceDAO.getRecoveredBadDebtInvoices(request);
            jobj.put(Constants.data, DataJArr);
            jobj.put("count", DataJArr.length());
        } catch (Exception ex) {
            msg = "" + ex.getMessage();
            Logger.getLogger(accInvoiceController.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                jobj.put("success", issuccess);
                jobj.put("msg", msg);
            } catch (JSONException ex) {
                Logger.getLogger(accInvoiceController.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return new ModelAndView(Constants.jsonView, "model", jobj.toString());
    }
    
    public ModelAndView exportRecoveredBadDebtInvoices(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        String view = "jsonView_ex";
        try {

            boolean isForExport = true;
            JSONArray DataJArr = accInvoiceServiceDAO.getRecoveredBadDebtInvoices(request);

            jobj.put(Constants.data, DataJArr);
            jobj.put("totalCount", DataJArr.length());

            String fileType = request.getParameter("filetype");
            if (StringUtil.equal(fileType, "print")) {
                String GenerateDate = authHandler.getDateFormatter(request).format(new Date());
                jobj.put("GenerateDate", GenerateDate);
                view = "jsonView-empty";
            }
            exportDaoObj.processRequest(request, response, jobj);
        } catch (SessionExpiredException ex) {
            Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
        } catch (Exception ex) {
            Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
        }
        return new ModelAndView(view, "model", jobj.toString());
    }
    public ModelAndView getColoumnerSalesRegisterDetails(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        boolean issuccess = false;
        String msg = "";
        try {
            boolean export = false;
            jobj = getColoumnerSalesRegister(request, export);
            issuccess = true;
        } catch (Exception e) {
            msg = "" + e.getMessage();
            Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, e);
        } finally {
            try {
                jobj.put("success", issuccess);
                jobj.put("msg", msg);
            } catch (JSONException ex) {
                Logger.getLogger(accGoodsReceiptController.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return new ModelAndView("jsonView_ex", Constants.model, jobj.toString());
    }
    
    public ModelAndView exportColumnarSalesRegister(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        String view = "jsonView_ex";
        try{
            boolean export=true;
            jobj=getColoumnerSalesRegister(request,export);
            String fileType = request.getParameter("filetype");
            if (StringUtil.equal(fileType, "print")) {
                String GenerateDate = authHandler.getDateFormatter(request).format(new Date());
                jobj.put("GenerateDate", GenerateDate);
                view = "jsonView-empty";
            }
            exportDaoObj.processRequest(request, response, jobj);
        } catch (SessionExpiredException ex) {
            Logger.getLogger(accGoodsReceiptController.class.getName()).log(Level.SEVERE, null, ex);
        } catch(Exception ex) {
            Logger.getLogger(accGoodsReceiptController.class.getName()).log(Level.SEVERE, null, ex);
        }
        return new ModelAndView(view, "model", jobj.toString());
    }
    
    public JSONObject getColoumnerSalesRegister(HttpServletRequest request, boolean export) {
        JSONObject jobj = new JSONObject();
        String curr = "";
        try {
            JSONObject commData = new JSONObject();
            JSONArray jarrColumns = new JSONArray();
            JSONObject jMeta = new JSONObject();
            JSONObject jobjTemp = new JSONObject();
            JSONArray jarrRecords = new JSONArray();
            String fileType = request.getParameter("filetype");
            JSONObject jobjGroupTotal = new JSONObject();
            JSONObject jobjTotal = new JSONObject();
            JSONArray jArrRows = new JSONArray();

            jobjTemp.put("name", "date");
            jarrRecords.put(jobjTemp);
            jobjTemp = new JSONObject();
            jobjTemp.put("name", "invoiceno");
            jarrRecords.put(jobjTemp);
            jobjTemp = new JSONObject();
            jobjTemp.put("name", "documenttye");
            jarrRecords.put(jobjTemp);
            jobjTemp = new JSONObject();
            jobjTemp.put("name", "customer");
            jarrRecords.put(jobjTemp);
            jobjTemp = new JSONObject();
            jobjTemp.put("name", "vattin");
            jarrRecords.put(jobjTemp);
            jobjTemp = new JSONObject();
            jobjTemp.put("name", "csttin");
            jarrRecords.put(jobjTemp);
            jobjTemp = new JSONObject();
            jobjTemp.put("name", "ecc");
            jarrRecords.put(jobjTemp);
            jobjTemp = new JSONObject();
            jobjTemp.put("name", "servicetaxregno");
            jarrRecords.put(jobjTemp);
            jobjTemp = new JSONObject();
            jobjTemp.put("name", "productname");
            jarrRecords.put(jobjTemp);
            jobjTemp = new JSONObject();
            jobjTemp.put("name", "quantitywithuom");
            jarrRecords.put(jobjTemp);
            jobjTemp = new JSONObject();
            jobjTemp.put("name", "rate");
            jarrRecords.put(jobjTemp);
            jobjTemp = new JSONObject();
            jobjTemp.put("name", "valueofitem");
            jarrRecords.put(jobjTemp);
            jobjTemp = new JSONObject();
            jobjTemp.put("name", "discount");
            jarrRecords.put(jobjTemp);
            jobjTemp = new JSONObject();
            jobjTemp.put("name", "amount");
            jarrRecords.put(jobjTemp);

            jobjTemp = new JSONObject();
            jobjTemp.put("header", "<span wtf:qtip='Date'>Date</span>");
            jobjTemp.put("dataIndex", "date");
            jobjTemp.put("pdfwidth", 150);
            jarrColumns.put(jobjTemp);

            jobjTemp = new JSONObject();
            jobjTemp.put("header", "<span wtf:qtip='Invoice No'>Invoice No</span>");
            jobjTemp.put("dataIndex", "invoiceno");
            jobjTemp.put("pdfwidth", 150);
            jarrColumns.put(jobjTemp);

            jobjTemp = new JSONObject();
            jobjTemp.put("header", "<span wtf:qtip='Document Type'>Document Type</span>");
            jobjTemp.put("dataIndex", "documenttye");
            jobjTemp.put("pdfwidth", 150);
            jarrColumns.put(jobjTemp);

            jobjTemp = new JSONObject();
            jobjTemp.put("header", "<span wtf:qtip='Customer'>Customer</span>");
            jobjTemp.put("dataIndex", "customer");
            jobjTemp.put("pdfwidth", 150);
            jarrColumns.put(jobjTemp);

            jobjTemp = new JSONObject();
            jobjTemp.put("header", "<span wtf:qtip='VAT TIN'>VAT TIN</span>");
            jobjTemp.put("dataIndex", "vattin");
            jobjTemp.put("pdfwidth", 150);
            jarrColumns.put(jobjTemp);

            jobjTemp = new JSONObject();
            jobjTemp.put("header", "<span wtf:qtip='CST TIN'>CST TIN</span>");
            jobjTemp.put("dataIndex", "csttin");
            jobjTemp.put("pdfwidth", 150);
            jarrColumns.put(jobjTemp);

            jobjTemp = new JSONObject();
            jobjTemp.put("header", "<span wtf:qtip='ECC'>ECC</span>");
            jobjTemp.put("dataIndex", "ecc");
            jobjTemp.put("pdfwidth", 150);
            jarrColumns.put(jobjTemp);

            jobjTemp = new JSONObject();
            jobjTemp.put("header", "<span wtf:qtip='Service Tax Reg No'>Service Tax Reg No</span>");
            jobjTemp.put("dataIndex", "servicetaxregno");
            jobjTemp.put("pdfwidth", 150);
            jarrColumns.put(jobjTemp);

            jobjTemp = new JSONObject();
            jobjTemp.put("header", "<span wtf:qtip='Product Name'>Product Name</span>");
            jobjTemp.put("dataIndex", "productname");
            jobjTemp.put("pdfwidth", 150);
            jarrColumns.put(jobjTemp);

            jobjTemp = new JSONObject();
            jobjTemp.put("header", "<span wtf:qtip='Quantity with UOM'>Quantity with UOM</span>");
            jobjTemp.put("dataIndex", "quantitywithuom");
            jobjTemp.put("pdfwidth", 150);
            jarrColumns.put(jobjTemp);

            jobjTemp = new JSONObject();
            jobjTemp.put("header", "<span wtf:qtip='Per Unit Rate (Rs)'>Per Unit Rate (Rs)</span>");
            jobjTemp.put("dataIndex", "rate");
            jobjTemp.put("pdfwidth", 150);
            jarrColumns.put(jobjTemp);

            jobjTemp = new JSONObject();
            jobjTemp.put("header", "<span wtf:qtip='Value of Items (Rs)'>Value of Items (Rs)</span>");
            jobjTemp.put("dataIndex", "valueofitem");
            jobjTemp.put("pdfwidth", 150);
            jarrColumns.put(jobjTemp);

            String companyid = request.getParameter("companyid");
            HashMap requestParams = AccInvoiceServiceHandler.getInvoiceRequestMap(request);
            requestParams.put("companyid", companyid);
            requestParams.put(Constants.REQ_startdate, !StringUtil.isNullOrEmpty(request.getParameter("fromdate"))? request.getParameter("fromdate") : request.getParameter("startDate"));
            requestParams.put(Constants.REQ_enddate, !StringUtil.isNullOrEmpty(request.getParameter("todate"))? request.getParameter("todate") : request.getParameter("endDate"));
            String start = request.getParameter("start");
            String limit = request.getParameter("limit");

            if (requestParams.containsKey("start")) {
                requestParams.remove("start");
            }
            if (requestParams.containsKey("limit")) {
                requestParams.remove("limit");
            }
            requestParams.put("includeAllRec", true);
            requestParams.put("CashAndInvoice", true);
            KwlReturnObject result = accInvoiceDAOobj.getInvoicesMerged(requestParams);
            JSONArray DataJArr = new JSONArray();
            List list = result.getEntityList();
            double totalInvoiceAmt = 0;
            DataJArr = accInvoiceServiceDAO.getInvoiceJsonMerged(request, list, DataJArr);
            int totalCount = DataJArr.length();
            KwlReturnObject curresult = accountingHandlerDAOobj.getObject(KWLCurrency.class.getName(), sessionHandlerImpl.getCurrencyID(request));
            KWLCurrency currency = (KWLCurrency) curresult.getEntityList().get(0);

            int countryid = 0;
            KwlReturnObject cmpObj = accountingHandlerDAOobj.getObject("com.krawler.common.admin.Company", companyid);
            if (cmpObj != null) {
                Company cmp = (Company) cmpObj.getEntityList().get(0);
                if (cmp != null && cmp.getCountry() != null && !StringUtil.isNullOrEmpty(cmp.getCountry().getID())) {
                    countryid = Integer.parseInt(cmp.getCountry().getID());
                }
            }
            curr = currency.getSymbol() != null ? currency.getSymbol() : "";
            for (int i = 0; i < DataJArr.length(); i++) {
                jobjGroupTotal = new JSONObject();
                JSONObject finalAmountJson = new JSONObject();
                Double invoiceAmt = 0d;
                JSONObject temp = DataJArr.getJSONObject(i);

                String billid = jobj.optString("billid", temp.getString("billid"));
                String[] invoices = {};
                JSONArray invTerm = new JSONArray(temp.getString("termdetails"));
                for (int invtermcnt = 0; invtermcnt < invTerm.length(); invtermcnt++) {
                    JSONObject invTermJson = invTerm.getJSONObject(invtermcnt);
                    String GlobalTermName = invTermJson.getString("term");
                    GlobalTermName = GlobalTermName.replaceAll("%", " Per");
                    GlobalTermName = GlobalTermName.replaceAll("\\.", "DOT");
                    boolean recordAlreadyexist = false;
                    for (int m = 0; m < jarrRecords.length(); m++) {
                        String testString = jarrRecords.getJSONObject(m).getString("name");
                        if (testString.replace(".", "").equalsIgnoreCase("invTerm" + invTermJson.getString("term").replace(".", ""))) {
                            recordAlreadyexist = true;
                            break;
                        }
                    }
                    if (!recordAlreadyexist) {
                        JSONObject jColumn = new JSONObject();
                        jColumn.put("header", "<span wtf:qtip='" + GlobalTermName.replaceAll("DOT", ".") + "'>" + GlobalTermName.replaceAll("DOT", ".") + "</span>");
                        jColumn.put("dataIndex", "invTerm" + GlobalTermName);
                        jColumn.put("pdfwidth", 150);
                        jarrColumns.put(jColumn);

                        JSONObject jRec = new JSONObject();
                        jRec.put("name", "invTerm" + GlobalTermName);
                        jarrRecords.put(jRec);
                    }
                    invoiceAmt += Double.parseDouble(invTermJson.getString("termamount"));
                    finalAmountJson.put("invTerm" + GlobalTermName, Double.parseDouble(invTermJson.getString("termamount")));
                    jobjGroupTotal.put("invTerm" + GlobalTermName, Double.parseDouble(invTermJson.getString("termamount")));
                    jobjTotal.put("invTerm" + GlobalTermName, (jobjTotal.opt("invTerm" + GlobalTermName) != null ? (Double) jobjTotal.opt("invTerm" + GlobalTermName) : 0) + Double.parseDouble(invTermJson.getString("termamount")));
                    SimpleDateFormat df = new SimpleDateFormat("dd/MM/yyyy");
                    String date = df.format(authHandler.getGlobalDateFormat().parse(temp.getString("date")));
                    finalAmountJson.put("date", date);
                    finalAmountJson.put("invoiceno", temp.getString("billno"));
                    finalAmountJson.put("documenttye", "Sales");
                    finalAmountJson.put("customer", temp.getString("personname"));
                    finalAmountJson.put("vattin", temp.has("vattin") ? temp.getString("vattin") : "");
                    finalAmountJson.put("csttin", temp.has("csttin") ? temp.getString("csttin") : "");
                    finalAmountJson.put("ecc", temp.has("ECCNo") ? temp.getString("ECCNo") : "");
                    finalAmountJson.put("servicetaxregno", temp.has("servicetaxregno") ? temp.getString("servicetaxregno") : "");
                }
                invoices = billid.split(",");
                JSONObject paramJobj = StringUtil.convertRequestToJsonObject(request);
                Map<String, Object> extraAttributesMap = new HashMap<String, Object>();
                JSONArray DataRowsArr = accInvoiceServiceDAO.getInvoiceRows(paramJobj, invoices,extraAttributesMap);
                for (int k = 0; k < DataRowsArr.length(); k++) {
                    jobjTemp = new JSONObject();
                    jobjTemp.put("date", temp.getString("dateinuserformat"));
                    jobjTemp.put("invoiceno", temp.getString("billno"));
                    jobjTemp.put("documenttye", "Sales");
                    jobjTemp.put("customer", temp.getString("personname"));
                    jobjTemp.put("vattin", temp.has("vattin") ? temp.getString("vattin") : "");
                    jobjTemp.put("csttin", temp.has("csttin") ? temp.getString("csttin") : "");
                    jobjTemp.put("ecc", temp.has("ECCNo") ? temp.getString("ECCNo") : "");
                    jobjTemp.put("servicetaxregno", temp.has("servicetaxregno") ? temp.getString("servicetaxregno") : "");

                    JSONObject jobRow = new JSONObject();
                    jobRow = DataRowsArr.getJSONObject(k);
                    if (!jobRow.has("productname") || !jobRow.has("quantity")) {
                        break;
                    }
                    invoiceAmt += Double.parseDouble(jobRow.getString("amount")) + Double.parseDouble(jobRow.getString("taxamount")) + Double.parseDouble(jobRow.getString("OtherTermNonTaxableAmount"));
                    jobjTemp.put("productname", jobRow.getString("productname"));
                    jobjTemp.put("quantitywithuom", jobRow.getString("quantity") + " " + jobRow.getString("uomname"));
                    jobjTemp.put("rate", jobRow.getString("rate"));
                    double discount = 0d;
                    discount = Double.parseDouble(jobRow.getString("rate")) / 100 * Double.parseDouble(jobRow.getString("prdiscount")) * Double.parseDouble(jobRow.getString("quantity"));
                    jobjTemp.put("discount", String.valueOf(CustomDesignHandler.getAmountinCommaDecimal(discount, 2, countryid)));
//                    jobjTemp.put("amount", jobRow.getString("amount"));
                    jobjTemp.put("valueofitem", Double.parseDouble(jobRow.getString("rate")) * Double.parseDouble(jobRow.getString("quantity")));
                    JSONArray lineTermArray = new JSONArray(jobRow.getString("LineTermdetails"));
                    for (int count = 0; count < lineTermArray.length(); count++) {
                        JSONObject jtemp = lineTermArray.getJSONObject(count);
                        String LineLevelTermName = jtemp.getString("term");
                        LineLevelTermName = LineLevelTermName.replaceAll("%", " Per");
                        LineLevelTermName = LineLevelTermName.replaceAll("\\.", "DOT");
                        boolean recordAlreadyexist = false;
                        for (int m = 0; m < jarrRecords.length(); m++) {
                            String testString = jarrRecords.getJSONObject(m).getString("name");
                            if (testString.replace(".", "").equalsIgnoreCase(LineLevelTermName.replace(".", ""))) {
                                recordAlreadyexist = true;
                                break;
                            }
                        }
                        if (!recordAlreadyexist) {
                            JSONObject jColumn = new JSONObject();
                            jColumn.put("header", "<span wtf:qtip='" + LineLevelTermName.replaceAll("DOT", ".") + "'>" + LineLevelTermName.replaceAll("DOT", ".") + "</span>");
                            jColumn.put("dataIndex", LineLevelTermName);
                            jColumn.put("pdfwidth", 150);
                            jarrColumns.put(jColumn);

                            JSONObject jRec = new JSONObject();
                            jRec.put("name", LineLevelTermName);
                            jarrRecords.put(jRec);
                        }
                        if (export && StringUtil.equal(fileType, "xls")) {
                            Double LineLevelTermValue = 0.0;
                            if (jobjGroupTotal.opt("LineLevelTermName") != null) {
                                LineLevelTermValue = (Double) jobjGroupTotal.get(LineLevelTermName);
                                LineLevelTermValue += (!StringUtil.isNullOrEmpty(jtemp.getString("termamount"))) ? Double.parseDouble(jtemp.getString("termamount")) : Double.parseDouble("0");
                            } else {
                                LineLevelTermValue = (!StringUtil.isNullOrEmpty(jtemp.getString("termamount"))) ? Double.parseDouble(jtemp.getString("termamount")) : Double.parseDouble("0");
                            }
                            jobjGroupTotal.put(LineLevelTermName, LineLevelTermValue);
                            jobjTotal.put(LineLevelTermName, (jobjTotal.opt(LineLevelTermName) != null ? (Double) jobjTotal.opt(LineLevelTermName) : 0) + LineLevelTermValue);
                        }
                        jobjTemp.put(LineLevelTermName, (!StringUtil.isNullOrEmpty(jtemp.getString("termamount"))) ? Double.parseDouble(jtemp.getString("termamount")) : Double.parseDouble("0"));
                    }
                    if (export && StringUtil.equal(fileType, "xls")) {
                        jobjGroupTotal.put("discount", (jobjGroupTotal.opt("discount") != null ? (Double) jobjGroupTotal.opt("discount") : 0) + discount);
                        jobjGroupTotal.put("valueofitem", (jobjGroupTotal.opt("valueofitem") != null ? (Double) jobjGroupTotal.opt("valueofitem") : 0) + Double.parseDouble(jobRow.getString("rate")) * Double.parseDouble(jobRow.getString("quantity")));
                        jobjGroupTotal.put("amount", (jobjGroupTotal.opt("amount") != null ? (Double) jobjGroupTotal.opt("amount") : 0) + invoiceAmt);
                        jobjTotal.put("discount", (jobjTotal.opt("discount") != null ? (Double) jobjTotal.opt("discount") : 0) + discount);
                        jobjTotal.put("valueofitem", (jobjTotal.opt("valueofitem") != null ? (Double) jobjTotal.opt("valueofitem") : 0) + Double.parseDouble(jobRow.getString("rate")) * Double.parseDouble(jobRow.getString("quantity")));
                        jobjTotal.put("amount", (jobjTotal.opt("amount") != null ? (Double) jobjTotal.opt("amount") : 0) + invoiceAmt);
                    }
                    jobjTemp.put("amount", invoiceAmt);
                    jArrRows.put(jobjTemp);
                }
                totalInvoiceAmt += invoiceAmt;
                if (finalAmountJson.length() != 0) {
                    jArrRows.put(finalAmountJson);
                }
                if (export && StringUtil.equal(fileType, "xls")) {
                    jobjGroupTotal.put("rate", "Total");
                    jArrRows.put(jobjGroupTotal);
                }
            }
            if (export && StringUtil.equal(fileType, "xls")) {
                jobjTotal.put("rate", "Total");
                jArrRows.put(jobjTotal);
            }

            jobjTemp = new JSONObject();
            jobjTemp.put("header", "<span wtf:qtip='Discount Received (Rs)'>Discount Received (Rs)</span>");
            jobjTemp.put("dataIndex", "discount");
            jobjTemp.put("pdfwidth", 150);
            jarrColumns.put(jobjTemp);

            jobjTemp = new JSONObject();
            jobjTemp.put("header", "<span wtf:qtip='Gross Total (Invoice Amount ) (Rs)'>Gross Total (Invoice Amount ) (Rs)</span>");
            jobjTemp.put("dataIndex", "amount");
            jobjTemp.put("pdfwidth", 150);
            jarrColumns.put(jobjTemp);

            if (!export) { // ERP-29426
                totalCount = jArrRows.length();
                if (!StringUtil.isNullOrEmpty(start) && !StringUtil.isNullOrEmpty(limit)) {
                    jArrRows = StringUtil.getPagedJSON(jArrRows, Integer.parseInt(start), Integer.parseInt(limit));
                }
            }

            commData.put("success", true);
            commData.put("totalInvoiceAmt", totalInvoiceAmt);
            commData.put("currSymb", curr + ". ");
            commData.put("coldata", jArrRows);
            commData.put("columns", jarrColumns);
            jMeta.put("totalProperty", "totalCount");
            jMeta.put("root", "coldata");
            commData.put("totalCount", totalCount);
            jMeta.put("fields", jarrRecords);
            commData.put("metaData", jMeta);
            jobj.put("valid", true);

            if (export) {
                jobj.put("data", jArrRows);
            } else {
                jobj.put("data", commData);
            }
        } catch (Exception e) {
            Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, e);
        }
        return jobj;
    }
    public ModelAndView getInvoicesMerged(HttpServletRequest request, HttpServletResponse response) {
        String view = Constants.jsonView;
        JSONObject jobj = new JSONObject();
        JSONArray DataJArr = new JSONArray();
        boolean issuccess = false;
        JSONObject totalAmountJSON = new JSONObject();
        String msg = "";
        try{
            JSONObject paramObj = StringUtil.convertRequestToJsonObject(request);
            boolean isWidgetRequest = request.getParameter("isWidgetRequest")!=null?Boolean.parseBoolean(request.getParameter("isWidgetRequest")):false;
            boolean ispendingAproval = request.getParameter("ispendingapproval")!=null?Boolean.parseBoolean(request.getParameter("ispendingapproval")):false;
            boolean consolidateFlag = request.getParameter("consolidateFlag")!=null?Boolean.parseBoolean(request.getParameter("consolidateFlag")):false;            
            String[] companyids = (consolidateFlag && request.getParameter(Constants.companyids)!=null)?request.getParameter(Constants.companyids).split(","):sessionHandlerImpl.getCompanyid(request).split(",");
            String gcurrencyid = (consolidateFlag && request.getParameter(Constants.globalCurrencyKey)!=null)?request.getParameter(Constants.globalCurrencyKey):sessionHandlerImpl.getCurrencyID(request);            
            boolean isAged = request.getParameter("isAged")!=null?Boolean.parseBoolean(request.getParameter("isAged")):false;
            int isgroupcomboDate = request.getParameter("groupcombo")!=null?Integer.parseInt(request.getParameter("groupcombo")):0;
            boolean custInvFlagForSalesPerson = request.getParameter("salesPersonFilterFlag")!=null?Boolean.parseBoolean(request.getParameter("salesPersonFilterFlag")):false;
            boolean isForTemplate = false;  
            
            /*
             When check(Drop Down) to include child accounts is disabled then includeExcludeChildCombobox flag will be set as TRUE to include child accounts
             
              includeExcludeChildCombobox, if All = Include all child accounts while fetching parent account data
              includeExcludeChildCombobox, if TRUE = Include all child accounts while fetching parent account data
              includeExcludeChildCombobox, if FALSE = Exclude child acounts while fetching parent account data
             
             */
            boolean includeExcludeChildCmb;
            if (request.getParameter("includeExcludeChildCmb") != null&&request.getParameter("includeExcludeChildCmb").toString().equals("All")) {
                includeExcludeChildCmb = true;
            } else {
                includeExcludeChildCmb = request.getParameter("includeExcludeChildCmb") != null ? Boolean.parseBoolean(request.getParameter("includeExcludeChildCmb")) : false;
            }
            
            boolean onlyOutstanding =false;
            boolean report=false;
            int totalCount = 0;
            String Searchjson = "";
            String invoiceSearchJson = "";
            String receiptSearchJson = "";
            String cnSearchJson = "";
            String dnSearchJson = "";
            String makePaymentSearchJson = "";
            boolean isAdvanceSearch = false;
            String filterConjuctionCriteria = com.krawler.common.util.Constants.and;
            boolean ispendingpayment = request.getParameter("ispendingpayment")!=null?Boolean.parseBoolean(request.getParameter("ispendingpayment")):false;
            if(!StringUtil.isNullOrEmpty(request.getParameter("isForTemplate"))){
                isForTemplate = Boolean.parseBoolean(request.getParameter("isForTemplate"));
            }
            boolean onlyAmountDue = StringUtil.isNullOrEmpty(request.getParameter("onlyamountdue"))?false:Boolean.parseBoolean(request.getParameter("onlyamountdue"));        
            if(!StringUtil.isNullOrEmpty(request.getParameter("onlyOutsatnding"))){
                onlyOutstanding = Boolean.parseBoolean(request.getParameter("onlyOutsatnding"));
            }  
            boolean isUnpaidInvoiceReport = StringUtil.isNullOrEmpty(request.getParameter("isUnpaidInvoiceReport"))?false:Boolean.parseBoolean(request.getParameter("onlyamountdue"));        
            if(!StringUtil.isNullOrEmpty(request.getParameter("isUnpaidInvoiceReport"))){
                isUnpaidInvoiceReport = Boolean.parseBoolean(request.getParameter("isUnpaidInvoiceReport"));
            }  
            if(!StringUtil.isNullOrEmpty(request.getParameter("report"))){
                report = Boolean.parseBoolean(request.getParameter("report"));
            }           
            HashMap requestParams = AccInvoiceServiceHandler.getInvoiceRequestMap(request);
            if(!StringUtil.isNullOrEmpty(request.getParameter("pmtmethod"))){
                requestParams.put("pmtmethod", request.getParameter("pmtmethod"));             //ERM-735 Associate default payment method to customer
            }
            boolean includeAllRec = request.getParameter("includeAllRec") != null ? Boolean.parseBoolean(request.getParameter("includeAllRec")) : false;
            requestParams.put("includeAllRec", includeAllRec);
            requestParams.put("customerBankAccountType", request.getParameter("customerBankAccountType"));
            requestParams.put("includeExcludeChildCmb", includeExcludeChildCmb);
            
            ExtraCompanyPreferences extraPref = (ExtraCompanyPreferences) kwlCommonTablesDAOObj.getClassObject("com.krawler.common.admin.ExtraCompanyPreferences", sessionHandlerImpl.getCompanyid(request));
            boolean upsIntegrationFlag = false; //Flag to indicate whether or not UPS REST integration is enabled ERP-31339
            if(extraPref != null) {
                upsIntegrationFlag = extraPref.isUpsIntegration();
            }
            requestParams.put("upsIntegrationFlag", upsIntegrationFlag);
            if (extraPref != null && extraPref.isEnablesalespersonAgentFlow()) {
                int permCode = sessionHandlerImpl.getPerms(request, Constants.CUSTOMER_PERMCODE);
                if (!((permCode & Constants.CUSTOMER_VIEWALL_PERMCODE) == Constants.CUSTOMER_VIEWALL_PERMCODE)) {
                    /*
                     * when (permCode & Constants.CUSTOMER_VIEWALL_PERMCODE) == Constants.CUSTOMER_VIEWALL_PERMCODE is true then user has permission to view all customers documents,so at that time there is need to filter record according to user&salesperson. 
                     */
                    String userId = sessionHandlerImpl.getUserid(request);
                    requestParams.put(Constants.useridKey , userId);
                    requestParams.put("enablesalespersonagentflow", extraPref.isEnablesalespersonAgentFlow());

                    //this bloick is escecuted when owners restriction feature is on and to filter invoice report according to salesperson 
                    Map<String, Object> salesPersonParams = new HashMap<>();
                    salesPersonParams.put(Constants.useridKey , sessionHandlerImpl.getUserid(request));
                    salesPersonParams.put(Constants.companyKey, sessionHandlerImpl.getCompanyid(request));
                    salesPersonParams.put("grID", "15");
                    KwlReturnObject masterItemByUserList = accountingHandlerDAOobj.getMasterItemByUserID(salesPersonParams);
                    List<MasterItem> masterItems = masterItemByUserList.getEntityList();
                    String salesPersons = "";
                    StringBuffer salesPersonids = new StringBuffer();
                    for (Object obj : masterItems) {
                        if (obj != null) {
                            salesPersonids.append(obj.toString() + ",");
                        }
                    }
                    if (salesPersonids.length() > 0) {
                        salesPersons = salesPersonids.substring(0, (salesPersonids.length() - 1));
                        requestParams.put(InvoiceConstants.salesPersonid, salesPersons);
                    }
                }
            }
            
            if (extraPref != null && extraPref.getCompany().getCountry()!= null && extraPref.getCompany().getCountry().getID().equals(String.valueOf(Constants.indian_country_id))) {
                requestParams.put("formtypeid", request.getParameter("formtypeid")!=null?request.getParameter("formtypeid"):null);
                requestParams.put("vatcommodityid", request.getParameter("vatcommodityid")!=null?request.getParameter("vatcommodityid"):null);
                requestParams.put("checkformstatus", request.getParameter("checkformstatus")!=null?request.getParameter("checkformstatus"):null);
            }
//          onlyRecurredInvoices- flag is used to fetch only those invoices which are recurred in sales invoice report 
            boolean onlyRecurredInvoices = request.getParameter("onlyRecurredInvoices")!=null?Boolean.parseBoolean(request.getParameter("onlyRecurredInvoices")):false;
            requestParams.put("onlyRecurredInvoices", onlyRecurredInvoices);
            //onlyNormalPendingInvoices- is used to fetch only normal pending invoices in pending approval tab
            boolean onlyNormalPendingInvoices = request.getParameter("onlyNormalPendingInvoices")!=null?Boolean.parseBoolean(request.getParameter("onlyNormalPendingInvoices")):false;
            requestParams.put("onlyNormalPendingInvoices", onlyNormalPendingInvoices);
            requestParams.put("ispendingAproval", ispendingAproval);
            String dir = "";
            String sort = "";
            if(!StringUtil.isNullOrEmpty(request.getParameter("dir")) && !StringUtil.isNullOrEmpty(request.getParameter("sort"))){
                dir = request.getParameter("dir");
                 sort = request.getParameter("sort");
                   requestParams.put("sort", sort);
                requestParams.put("dir", dir);
            }
            if(!StringUtil.isNullOrEmpty(request.getParameter("linknumber"))){
                requestParams.put("linknumber", request.getParameter("linknumber")); 
            }
            KwlReturnObject userResult = accountingHandlerDAOobj.getObject(User.class.getName(), sessionHandlerImpl.getUserid(request));
            User user = (User) userResult.getEntityList().get(0);
            if (!StringUtil.isNullOrEmpty(user.getDepartment())) {
                requestParams.put("userDepartment", user.getDepartment());
            }
            int datefilter = (requestParams.containsKey("datefilter") && requestParams.get("datefilter") != null) ? Integer.parseInt(requestParams.get("datefilter").toString()) : 0;
            
            int noOfInterval = Constants.DefaultNoOfIntervals;
            if(requestParams.containsKey("noOfInterval") && requestParams.get("noOfInterval") != null) {
               noOfInterval = requestParams.get("noOfInterval").toString().equals("") ? Constants.DefaultNoOfIntervals : Integer.parseInt(requestParams.get("noOfInterval").toString());
            }
            
            String companyid = "";
            for(int cnt=0; cnt<companyids.length; cnt++) {
                companyid = companyids[cnt];                
                request.setAttribute(Constants.companyKey, companyid);
                request.setAttribute(Constants.globalCurrencyKey, gcurrencyid);
                request.setAttribute("onlyOutstanding", onlyOutstanding);
                request.setAttribute("onlyamountdue", onlyAmountDue );
                requestParams.put(Constants.companyKey, companyid);
                requestParams.put(Constants.globalCurrencyKey, gcurrencyid);
                requestParams.put("consolidateFlag", consolidateFlag);
                requestParams.put("isForTemplate", isForTemplate);
                requestParams.put("datefilter", request.getParameter("datefilter"));
                requestParams.put("custVendorID", request.getParameter("custVendorID"));
                requestParams.put("onlyOutsatnding", onlyOutstanding);
                requestParams.put("ispendingpayment", ispendingpayment);
                requestParams.put("isUnpaidInvoiceReport", isUnpaidInvoiceReport);
                boolean isBadDebtInvoices = false;
                if (!StringUtil.isNullOrEmpty(request.getParameter("isBadDebtInvoices"))) {// for Malasian Company
                    isBadDebtInvoices = Boolean.parseBoolean(request.getParameter("isBadDebtInvoices"));
                    if (isBadDebtInvoices) {
                            int baddebttype = Integer.parseInt(request.getParameter("baddebttype"));
                            requestParams.put("isBadDebtInvoices", isBadDebtInvoices);
                            requestParams.put("baddebttype", baddebttype);
                            if (baddebttype == 0) {
                                requestParams.put("badDebtCalculationDate", request.getParameter("badDebtCalculationDate"));
                                requestParams.put("badDebtCriteria", Integer.parseInt(request.getParameter("badDebtCriteria")));
                            } else {
                                requestParams.put("badDebtCalculationFromDate", request.getParameter("badDebtCalculationFromDate"));
                                requestParams.put("badDebtCalculationToDate", request.getParameter("badDebtCalculationToDate"));
                            }
                    }
                }
                if(!isAged){
                    requestParams.put("start", request.getParameter("start"));
                    requestParams.put("limit", request.getParameter("limit"));   
                }
                boolean isAgedDetailReport = false;
                if(isAged){
                    isAgedDetailReport = true;
                    requestParams.put("isAgedReceivables",true);
                    request.setAttribute("isAged", true);
                }
                if(custInvFlagForSalesPerson){
                    requestParams.put("custInvFlagForSalesPerson", custInvFlagForSalesPerson);   
                }
                if (!StringUtil.isNullOrEmpty(request.getParameter(Constants.billid))) {
                    KwlReturnObject result = accountingHandlerDAOobj.getObject(Invoice.class.getName(), request.getParameter(Constants.billid));
                    Invoice inv = (Invoice) result.getEntityList().get(0);
                        requestParams.put(Constants.isFixedAsset, inv.isFixedAssetInvoice());
                        requestParams.put(Constants.isDraft, inv.isDraft());
                    }

                if (requestParams.containsKey("filterConjuctionCriteria") && requestParams.get("filterConjuctionCriteria") != null) {
                    if (requestParams.get("filterConjuctionCriteria").toString().equalsIgnoreCase("OR")) {
                        filterConjuctionCriteria = com.krawler.common.util.Constants.or;
                    }
                }
                if (isAged && requestParams.containsKey("searchJson") && requestParams.get("searchJson") != null) {
                    Searchjson = requestParams.get("searchJson").toString();
                    if (!StringUtil.isNullOrEmpty(Searchjson)) {
                        isAdvanceSearch=true;
                        HashMap<String, Object> reqPar1 = new HashMap<String, Object>();
                        reqPar1.put(Constants.companyKey, requestParams.get(Constants.companyKey));
                        reqPar1.put(Constants.Acc_Search_Json, Searchjson);
                        reqPar1.put(Constants.Filter_Criteria, filterConjuctionCriteria);
                        reqPar1.put(Constants.moduleid, Constants.Acc_Invoice_ModuleId);
                        invoiceSearchJson = accReportsService.getSearchJsonByModule(reqPar1);
                        reqPar1.remove(Constants.moduleid);
                        reqPar1.put(Constants.moduleid, Constants.Acc_Receive_Payment_ModuleId);
                        receiptSearchJson = accReportsService.getSearchJsonByModule(reqPar1);
                        reqPar1.put(Constants.moduleid, Constants.Acc_Debit_Note_ModuleId);
                        dnSearchJson = accReportsService.getSearchJsonByModule(reqPar1);
                        reqPar1.put(Constants.moduleid, Constants.Acc_Credit_Note_ModuleId);
                        cnSearchJson = accReportsService.getSearchJsonByModule(reqPar1);
                        reqPar1.put(Constants.moduleid, Constants.Acc_Make_Payment_ModuleId);
                        makePaymentSearchJson = accReportsService.getSearchJsonByModule(reqPar1);
                    }
                }
                if(isAdvanceSearch){
                  requestParams.put(Constants.Acc_Search_Json, invoiceSearchJson);  
                  requestParams.put(Constants.Filter_Criteria, request.getParameter(Constants.Filter_Criteria));
                }
                if ((isgroupcomboDate == Constants.AgedPayableBaseCurrency || isgroupcomboDate == Constants.AgedPayableOtherthanBaseCurrency) && isAged) {//2==BaseCurrency,3=Other than base currency 
                    requestParams.put("groupcombo", isgroupcomboDate);
                    requestParams.put(Constants.globalCurrencyKey, sessionHandlerImpl.getCurrencyID(request));
                }
                
                
                if (isAgedDetailReport) {
//                if(!Constants.isOptimized){
                    HashMap invoiceRequestParams = accInvoiceServiceDAO.getCustomerAgedReceivableMap(request, true);
                    invoiceRequestParams.put("isAgedDetailsReport", true);
                    invoiceRequestParams.put("includeExcludeChildCmb", includeExcludeChildCmb);
                    if (requestParams.containsKey("groupcombo") && requestParams.get("groupcombo") != null)
                    {
                            invoiceRequestParams.put("groupcombo",requestParams.get("groupcombo"));
                    }
                    if (!Constants.isOptimized) {
                        DataJArr = accInvoiceServiceDAO.getAgeingJson(invoiceRequestParams, paramObj);
                    } else {
                        DataJArr = accInvoiceServiceDAO.getAgeingInvoiceJson(invoiceRequestParams,paramObj);
                    }
                } else {
                    KwlReturnObject result = accInvoiceDAOobj.getInvoicesMerged(requestParams);
                    totalCount = result != null ? result.getRecordTotalCount() : 0;
                    List list = result.getEntityList();
                    DataJArr = accInvoiceServiceDAO.getInvoiceJsonMerged(request, list, DataJArr);
                }
                if(isBadDebtInvoices){
                    requestParams.put("isOpeningBalanceInvoices","true");
                    KwlReturnObject result = accInvoiceDAOobj.getInvoicesMerged(requestParams);
                    requestParams.put("isOpeningBalanceInvoices","false");
                    totalCount += result!=null?result.getRecordTotalCount():0;
                    List list = result.getEntityList();
                    DataJArr =  accInvoiceServiceDAO.getInvoiceJsonMerged(request, list, DataJArr);
                }
            }
            companyid = sessionHandlerImpl.getCompanyid(request);
            requestParams.put("companyid", companyid);
               
            if (isAged) {
                requestParams.put("agedReport", true);
                requestParams.put("isAgedReceivables", true);
                JSONObject finalDataJObj = new JSONObject();

                int moduleIDForFetchingGroupingData = !StringUtil.isNullOrEmpty(request.getParameter("moduleIDForFetchingGroupingData")) ? Integer.parseInt(request.getParameter("moduleIDForFetchingGroupingData")) : 0;
                if (Constants.moduleSetForAgedReceivable.contains(moduleIDForFetchingGroupingData)) {
                    request.setAttribute("detailedviewgroupingondimensions", true);
                    finalDataJObj = accInvoiceServiceDAO.getCustomerAgedReceivableBasedOnDocumentsDimension(request, false, false);
                    DataJArr = finalDataJObj.getJSONArray("DataJobj");
                } else {
                    
//                    DataJArr = accTemplateReportService.getCustomerAgedReceivable(request, true, true);

                    JSONArray CreditNotejArr = new JSONArray();

                    JSONArray OBJArryInvoice = new JSONArray();
                    KwlReturnObject result = null;
                    if (isAdvanceSearch) {
                        requestParams.put(Constants.Acc_Search_Json, invoiceSearchJson);
                        requestParams.put(Constants.Filter_Criteria, request.getParameter(Constants.Filter_Criteria));
                        requestParams.put(Constants.moduleid, Constants.Acc_Invoice_ModuleId);
                    }
//                    DataJArr = accTemplateReportService.getCustomerAgedReceivable(request, true, true);
 
                    result = accInvoiceDAOobj.getOpeningBalanceInvoices(requestParams);
                    if (result != null && result.getEntityList() != null && result.getEntityList().size() > 0) {
                        OBJArryInvoice = AccInvoiceServiceHandler.getAgedOpeningBalanceInvoiceJson(requestParams, result.getEntityList(), OBJArryInvoice, accCurrencyDAOobj, accInvoiceCommon, request, accountingHandlerDAOobj, accAccountDAOobj, fieldDataManagercntrl, accJournalEntryobj);
                        for (int i = 0; i < OBJArryInvoice.length(); i++) {
                            DataJArr.put(OBJArryInvoice.get(i));
                        }
                    }
                    JSONArray OBJArryDebitNote = new JSONArray();
                    if (isAdvanceSearch) {
                        requestParams.put(Constants.Acc_Search_Json, dnSearchJson);
                        requestParams.put(Constants.Filter_Criteria, request.getParameter(Constants.Filter_Criteria));
                        requestParams.put(Constants.moduleid, Constants.Acc_Debit_Note_ModuleId);
                    }
                    result = accDebitNoteobj.getOpeningBalanceCustomerDNs(requestParams);
                    if (result != null && result.getEntityList() != null && result.getEntityList().size() > 0) {
                        OBJArryDebitNote = AccInvoiceServiceHandler.getAgedOpeningBalanceDebitNoteJson(requestParams, result.getEntityList(), OBJArryDebitNote, accCurrencyDAOobj, accReceiptDAOobj, request, accountingHandlerDAOobj, accAccountDAOobj, fieldDataManagercntrl, accJournalEntryobj,accCreditNoteDAOobj);
                        for (int i = 0; i < OBJArryDebitNote.length(); i++) {
                            DataJArr.put(OBJArryDebitNote.get(i));
                       }
                    }
                    JSONArray OBJArryCreditNote = new JSONArray();
                    if (isAdvanceSearch) {
                        requestParams.put(Constants.Acc_Search_Json, cnSearchJson);
                        requestParams.put(Constants.Filter_Criteria, request.getParameter(Constants.Filter_Criteria));
                        requestParams.put(Constants.moduleid, Constants.Acc_Credit_Note_ModuleId);
                    }
                    result = accCreditNoteDAOobj.getOpeningBalanceCNs(requestParams);
                    OBJArryCreditNote = AccInvoiceServiceHandler.getAgedOpeningBalanceCreditNoteJson(requestParams, result.getEntityList(), OBJArryCreditNote, accCurrencyDAOobj, accPaymentDAOobj, request, accountingHandlerDAOobj, accCreditNoteDAOobj, accAccountDAOobj, fieldDataManagercntrl, accJournalEntryobj);
                    if (result != null && result.getEntityList() != null && result.getEntityList().size() > 0) {
                        for (int i = 0; i < OBJArryCreditNote.length(); i++) {
                            DataJArr.put(OBJArryCreditNote.get(i));
                        }
                    }
                    JSONArray OBJArryPayment = new JSONArray();
                    if (isAdvanceSearch) {
                        requestParams.put(Constants.Acc_Search_Json, receiptSearchJson);
                        requestParams.put(Constants.Filter_Criteria, request.getParameter(Constants.Filter_Criteria));
                        requestParams.put(Constants.moduleid, Constants.Acc_Receive_Payment_ModuleId);
                    }
                    result = accReceiptDAOobj.getOpeningBalanceReceipts(requestParams);
                    if (result != null && result.getEntityList() != null && result.getEntityList().size() > 0) {
                        OBJArryPayment = AccInvoiceServiceHandler.getAgedOpeningBalanceReceiptJson(requestParams, result.getEntityList(), OBJArryPayment, accCurrencyDAOobj, accReceiptDAOobj, request, accountingHandlerDAOobj, accAccountDAOobj, fieldDataManagercntrl, accJournalEntryobj);
                        for (int i = 0; i < OBJArryPayment.length(); i++) {
                            DataJArr.put(OBJArryPayment.get(i));
                        }
                    }
                    if (isAdvanceSearch) {
                        requestParams.put(Constants.Acc_Search_Json, cnSearchJson);
                        requestParams.put(Constants.Filter_Criteria, request.getParameter(Constants.Filter_Criteria));
                    }
                   result = accCreditNoteDAOobj.getCreditNoteMerged(requestParams);
                    if (result != null && result.getEntityList() != null && result.getEntityList().size() > 0) {
                        CreditNotejArr = AccInvoiceServiceHandler.getCreditNotesMergedJson(requestParams, result.getEntityList(), CreditNotejArr, accountingHandlerDAOobj, authHandlerDAOObj, accCurrencyDAOobj, accPaymentDAOobj, request, accCreditNoteDAOobj, accAccountDAOobj, fieldDataManagercntrl, accJournalEntryobj);
                        for (int i = 0; i < CreditNotejArr.length(); i++) {
                            DataJArr.put(CreditNotejArr.get(i));
                        }
                    }
                    requestParams.put("cntype", 4);
                    JSONArray DebitNotejArr = new JSONArray();//This is used for getting DN gainst customer 
                    if (isAdvanceSearch) {
                        requestParams.put(Constants.Acc_Search_Json, dnSearchJson);
                        requestParams.put(Constants.Filter_Criteria, request.getParameter(Constants.Filter_Criteria));
                    }
                    result = accDebitNoteobj.getDebitNoteMerged(requestParams);
                    if (result != null && result.getEntityList() != null && result.getEntityList().size() > 0) {
                        DebitNotejArr = AccInvoiceServiceHandler.getDebitNotesMergedJson(requestParams, result.getEntityList(), DebitNotejArr, accountingHandlerDAOobj, authHandlerDAOObj, accCurrencyDAOobj, accReceiptDAOobj, request, accAccountDAOobj, fieldDataManagercntrl, accJournalEntryobj,accCreditNoteDAOobj);
                        for (int i = 0; i < DebitNotejArr.length(); i++) {
                            DataJArr.put(DebitNotejArr.get(i));
                        }
                    }
                    requestParams.remove("cntype");
                    JSONArray receivePaymentJArr = new JSONArray();
                    if (isAdvanceSearch) {
                        requestParams.put(Constants.Acc_Search_Json, receiptSearchJson);
                        requestParams.put(Constants.Filter_Criteria, request.getParameter(Constants.Filter_Criteria));
                    }
                    
                    requestParams.put("allAdvPayment", true); // needs only advance type record so that putted true
                    requestParams.put("paymentWindowType", 1);//Receipt to Customer record
                    result = accReceiptDAOobj.getReceipts(requestParams);
                    receivePaymentJArr = AccInvoiceServiceHandler.getReceiptsJson(requestParams, result.getEntityList(), receivePaymentJArr, accountingHandlerDAOobj, authHandlerDAOObj, accCurrencyDAOobj, accReceiptDAOobj, request, accAccountDAOobj, fieldDataManagercntrl, accJournalEntryobj);
                    for (int i = 0; i < receivePaymentJArr.length(); i++) {
                        DataJArr.put(receivePaymentJArr.get(i));
                    }
                    
                    if (isAdvanceSearch) {
                        requestParams.put(Constants.Acc_Search_Json, makePaymentSearchJson);
                        requestParams.put(Constants.Filter_Criteria, request.getParameter(Constants.Filter_Criteria));
                    }
                    JSONArray makePaymentJArr = new JSONArray();
                    requestParams.put("allAdvPayment", true); // needs only refund type record so that putted true
                    requestParams.put("paymentWindowType", 2);//Payment to Customer record
                    result = accVendorPaymentobj.getPayments(requestParams);
                    if (result != null && result.getEntityList() != null && !result.getEntityList().isEmpty()) {
                        makePaymentJArr = accGoodsReceiptServiceHandler.getPaymentsJson(requestParams, result.getEntityList(), makePaymentJArr, accCurrencyDAOobj, accountingHandlerDAOobj, accVendorPaymentobj);
                    }
                    for (int i = 0; i < makePaymentJArr.length(); i++) {
                        DataJArr.put(makePaymentJArr.get(i));
                    }
                    requestParams.put("allAdvPayment", true); // needs only refund type record so that putted true
                    requestParams.put("paymentWindowType", 2);//Payment to Customer record

                    String sortKey="";
                    if (isgroupcomboDate == 1) {//IF Sort By date
                        sortKey="date";
                        DataJArr = AccountingManager.sortJsonArrayOnDateValues(DataJArr, (DateFormat) requestParams.get(Constants.df),sortKey, true);
                    } else {
                        sortKey = "type";
                        DataJArr = AccountingManager.sortJsonArrayOnStringValues(DataJArr, sortKey, true);
                    }
                    if (sort.equals("code")&&!(sort.equals(""))) {     //Sort record by Customer code
                        sortKey = "code";
                    } else {
                        sortKey = "personinfo";  //Sort record by Customer Name
                    }
                    if (dir.equals("DESC")) {
                        DataJArr = AccountingManager.sortJsonArrayOnStringValuesByIgnoringCase(DataJArr, sortKey, false);
                    } else {
                        DataJArr = AccountingManager.sortJsonArrayOnStringValuesByIgnoringCase(DataJArr, sortKey, true);    //show multigrouping JSONArray required to sort
                    }
                }

            }

            if(request.getParameter("minimumAmountDue")!=null){
               JSONArray temp = new JSONArray();
               double minimumAmountDue = Double.parseDouble(request.getParameter("minimumAmountDue").toString());
               for(int i = 0; i < DataJArr.length(); i++) {
                   if(DataJArr.getJSONObject(i).getDouble("amountdue") >= minimumAmountDue)
                       temp.put(DataJArr.getJSONObject(i));
               }
               DataJArr = temp;
            }
            int count = DataJArr.length();
            JSONArray pagedJson = DataJArr;
            boolean isAgeingExport = request.getAttribute("isAgeingExport") == null ? false : (Boolean)request.getAttribute("isAgeingExport");            
            int invoiceLinkedWithDOStatus = request.getParameter("invoiceLinkedWithDOStatus") != null ? Integer.parseInt(request.getParameter("invoiceLinkedWithDOStatus").toString()) : 0;
            /**
             * for 'SI With Full DO', 'SI With No DO' and 'SI With Partial DO filter'
             * handling paging issue.
             */
            
            if((!isAgeingExport && (consolidateFlag || isAged))  || 
                    (invoiceLinkedWithDOStatus == Constants.Filter_Invoice_WithFullDO || invoiceLinkedWithDOStatus == Constants.Filter_Invoice_WithNoDO || invoiceLinkedWithDOStatus == Constants.Filter_Invoice_WithPartialDO)){
                String start = request.getParameter("start");
                String limit = request.getParameter("limit");
                if (!StringUtil.isNullOrEmpty(start) && !StringUtil.isNullOrEmpty(limit)) {
                    if (isAged) { // ADD GRNAD TOTAL AS LAST RECORD IN PAGED JSON
                        pagedJson = StringUtil.getPagedJSONForAgedWIthTotal(pagedJson, Integer.parseInt(start), Integer.parseInt(limit));
                        totalAmountJSON = pagedJson.getJSONObject(pagedJson.length()-1);
                        pagedJson.remove(pagedJson.length()-1);
                        jobj.put(Constants.AGEDAMOUNTSUMMARY, totalAmountJSON);
                    } else {
                        pagedJson = StringUtil.getPagedJSON(pagedJson, Integer.parseInt(start), Integer.parseInt(limit));
                    }
                }
            }
            if(isAged){
                addCustomFields(request, pagedJson, companyid, paramObj);
                paramObj.put(Constants.agedReceivableDateFilter,datefilter);
                paramObj.put(Constants.agedReceivableInterval, (request.getParameter(InvoiceConstants.duration) != null) ? Integer.parseInt(request.getParameter(InvoiceConstants.duration)) : 30);
                paramObj.put(Constants.agedReceivableNoOfInterval, noOfInterval);

                accDashboardServiceImpl.saveUserPreferencesOptions(paramObj);
            }
            if (isWidgetRequest) {
                view = "jsonView_ex";
                JSONObject commData = new JSONObject();
                JSONObject jMeta = new JSONObject();
                Map<String, Object> requestParamsForCM = new HashMap<>();
                Map<String, JSONArray> returnMap = accInvoiceServiceDAO.getColumnModuleForAPAR(requestParamsForCM);
                JSONArray jarrRecords = returnMap.get("record");
                JSONArray jarrColumns = returnMap.get("columns");
                commData.put("success", true);
                jMeta.put("totalProperty", "totalCount");
                jMeta.put("root", "coldata");
                jMeta.put("fields", jarrRecords); //Record Array
                commData.put("coldata", pagedJson);  //Actual data
                commData.put("columns", jarrColumns); //Column Module Array
                commData.put("totalCount", count);
                commData.put("metaData", jMeta);
                jobj.put("valid", true);
                jobj.put(Constants.data, commData);
            } else {
                jobj.put(Constants.data, pagedJson);
            }
            boolean isRecurringInvoice = !StringUtil.isNullOrEmpty(request.getParameter("getRepeateInvoice")) ? Boolean.parseBoolean(request.getParameter("getRepeateInvoice")) : false;
            if ((report || isRecurringInvoice) && !(invoiceLinkedWithDOStatus == Constants.Filter_Invoice_WithFullDO || invoiceLinkedWithDOStatus == Constants.Filter_Invoice_WithNoDO || invoiceLinkedWithDOStatus == Constants.Filter_Invoice_WithPartialDO)) {
                jobj.put("count", totalCount);
            } else {
                jobj.put("count", count);
            }
            issuccess = true;
        } catch (Exception ex){
            msg = ""+ex.getMessage();
            Logger.getLogger(accInvoiceController.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                jobj.put("success", issuccess);
                jobj.put("msg", msg);
            } catch (JSONException ex) {
                Logger.getLogger(accInvoiceController.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return new ModelAndView(view, "model", jobj.toString());
    }
    
    public ModelAndView getAgedReceivable(HttpServletRequest request, HttpServletResponse response) {
        String view = Constants.jsonView;
        JSONObject jobj = new JSONObject();
        JSONArray DataJArr = new JSONArray();
        boolean issuccess = false;
        JSONObject totalAmountJSON = new JSONObject();
        String msg = "";
        try{
            HashMap invoiceRequestParams = new HashMap();
            JSONObject paramObj = StringUtil.convertRequestToJsonObject(request);
            boolean isWidgetRequest = request.getParameter("isWidgetRequest")!=null?Boolean.parseBoolean(request.getParameter("isWidgetRequest")):false;
            boolean consolidateFlag = request.getParameter("consolidateFlag")!=null?Boolean.parseBoolean(request.getParameter("consolidateFlag")):false;            
            String[] companyids = (consolidateFlag && request.getParameter(Constants.companyids)!=null)?request.getParameter(Constants.companyids).split(","):sessionHandlerImpl.getCompanyid(request).split(",");
            String gcurrencyid = (consolidateFlag && request.getParameter(Constants.globalCurrencyKey)!=null)?request.getParameter(Constants.globalCurrencyKey):sessionHandlerImpl.getCurrencyID(request);            
            boolean isAged = request.getParameter("isAged")!=null?Boolean.parseBoolean(request.getParameter("isAged")):false;
            int isgroupcomboDate = request.getParameter("groupcombo")!=null?Integer.parseInt(request.getParameter("groupcombo")):0;
            boolean includeExcludeChildCmb;
            if (request.getParameter("includeExcludeChildCmb") != null&&request.getParameter("includeExcludeChildCmb").toString().equals("All")) {
                includeExcludeChildCmb = true;
            } else {
                includeExcludeChildCmb = request.getParameter("includeExcludeChildCmb") != null ? Boolean.parseBoolean(request.getParameter("includeExcludeChildCmb")) : false;
            }
            
            boolean onlyOutstanding =false;
            boolean report=false;
            int totalCount = 0;
            boolean onlyAmountDue = StringUtil.isNullOrEmpty(request.getParameter("onlyamountdue"))?false:Boolean.parseBoolean(request.getParameter("onlyamountdue"));        
            if(!StringUtil.isNullOrEmpty(request.getParameter("onlyOutsatnding"))){
                onlyOutstanding = Boolean.parseBoolean(request.getParameter("onlyOutsatnding"));
            }  
            
            String companyid = "";
            for(int cnt=0; cnt<companyids.length; cnt++) {
                companyid = companyids[cnt];                
                request.setAttribute(Constants.companyKey, companyid);
                request.setAttribute(Constants.globalCurrencyKey, gcurrencyid);
                request.setAttribute("onlyOutstanding", onlyOutstanding);
                request.setAttribute("onlyamountdue", onlyAmountDue );
                invoiceRequestParams = accInvoiceServiceDAO.getCustomerAgedReceivableMap(request, true);
                if ((isgroupcomboDate == Constants.AgedPayableBaseCurrency || isgroupcomboDate == Constants.AgedPayableOtherthanBaseCurrency) && isAged) {//2==BaseCurrency,3=Other than base currency 
                    invoiceRequestParams.put("groupcombo", isgroupcomboDate);
                    invoiceRequestParams.put(Constants.globalCurrencyKey, sessionHandlerImpl.getCurrencyID(request));
                }
                    
                                
            }
            companyid = sessionHandlerImpl.getCompanyid(request);
                JSONObject finalDataJObj = new JSONObject();

                int moduleIDForFetchingGroupingData = !StringUtil.isNullOrEmpty(request.getParameter("moduleIDForFetchingGroupingData")) ? Integer.parseInt(request.getParameter("moduleIDForFetchingGroupingData")) : 0;
                if (Constants.moduleSetForAgedReceivable.contains(moduleIDForFetchingGroupingData)) {
                    request.setAttribute("detailedviewgroupingondimensions", true);
                    finalDataJObj = accInvoiceServiceDAO.getCustomerAgedReceivableBasedOnDocumentsDimension(request, false, false);
                    DataJArr = finalDataJObj.getJSONArray("DataJobj");
                } else {
                    invoiceRequestParams.put("isAgedDetailsReport", true);
                    invoiceRequestParams.put("includeExcludeChildCmb", includeExcludeChildCmb);
                    DataJArr = accInvoiceServiceDAO.getAgeingJson(invoiceRequestParams,paramObj);
                    
//                    DataJArr = accTemplateReportService.getCustomerAgedReceivable(request, true, true);

                    
                    
                    
//                    JSONArray CreditNotejArr = new JSONArray();
//
                    JSONArray OBJArryInvoice = new JSONArray();
                    KwlReturnObject result = null;
//                    if (isAdvanceSearch) {
//                        requestParams.put(Constants.Acc_Search_Json, invoiceSearchJson);
//                        requestParams.put(Constants.Filter_Criteria, request.getParameter(Constants.Filter_Criteria));
//                        requestParams.put(Constants.moduleid, Constants.Acc_Invoice_ModuleId);
//                    }
//                    DataJArr = accTemplateReportService.getCustomerAgedReceivable(request, true, true);
 
//                    result = accInvoiceDAOobj.getOpeningBalanceInvoices(invoiceRequestParams);
//                    if (result != null && result.getEntityList() != null && result.getEntityList().size() > 0) {
//                        OBJArryInvoice = AccInvoiceServiceHandler.getAgedOpeningBalanceInvoiceJson(invoiceRequestParams, result.getEntityList(), OBJArryInvoice, accCurrencyDAOobj, accInvoiceCommon, request, accountingHandlerDAOobj, accAccountDAOobj, fieldDataManagercntrl, accJournalEntryobj);
//                        for (int i = 0; i < OBJArryInvoice.length(); i++) {
//                            DataJArr.put(OBJArryInvoice.get(i));
//                        }
//                    }
//                    JSONArray OBJArryDebitNote = new JSONArray();
//                    if (isAdvanceSearch) {
//                        requestParams.put(Constants.Acc_Search_Json, dnSearchJson);
//                        requestParams.put(Constants.Filter_Criteria, request.getParameter(Constants.Filter_Criteria));
//                        requestParams.put(Constants.moduleid, Constants.Acc_Debit_Note_ModuleId);
//                    }
//                    result = accDebitNoteobj.getOpeningBalanceCustomerDNs(requestParams);
//                    if (result != null && result.getEntityList() != null && result.getEntityList().size() > 0) {
//                        OBJArryDebitNote = AccInvoiceServiceHandler.getAgedOpeningBalanceDebitNoteJson(requestParams, result.getEntityList(), OBJArryDebitNote, accCurrencyDAOobj, accReceiptDAOobj, request, accountingHandlerDAOobj, accAccountDAOobj, fieldDataManagercntrl, accJournalEntryobj,accCreditNoteDAOobj);
//                        for (int i = 0; i < OBJArryDebitNote.length(); i++) {
//                            DataJArr.put(OBJArryDebitNote.get(i));
//                       }
//                    }
//                    JSONArray OBJArryCreditNote = new JSONArray();
//                    if (isAdvanceSearch) {
//                        requestParams.put(Constants.Acc_Search_Json, cnSearchJson);
//                        requestParams.put(Constants.Filter_Criteria, request.getParameter(Constants.Filter_Criteria));
//                        requestParams.put(Constants.moduleid, Constants.Acc_Credit_Note_ModuleId);
//                    }
//                    result = accCreditNoteDAOobj.getOpeningBalanceCNs(invoiceRequestParams);
//                    OBJArryCreditNote = AccInvoiceServiceHandler.getAgedOpeningBalanceCreditNoteJson(invoiceRequestParams, result.getEntityList(), OBJArryCreditNote, accCurrencyDAOobj, accPaymentDAOobj, request, accountingHandlerDAOobj, accCreditNoteDAOobj, accAccountDAOobj, fieldDataManagercntrl, accJournalEntryobj);
//                    if (result != null && result.getEntityList() != null && result.getEntityList().size() > 0) {
//                        for (int i = 0; i < OBJArryCreditNote.length(); i++) {
//                            DataJArr.put(OBJArryCreditNote.get(i));
//                        }
//                    }
//                    JSONArray OBJArryPayment = new JSONArray();
//                    if (isAdvanceSearch) {
//                        requestParams.put(Constants.Acc_Search_Json, receiptSearchJson);
//                        requestParams.put(Constants.Filter_Criteria, request.getParameter(Constants.Filter_Criteria));
//                        requestParams.put(Constants.moduleid, Constants.Acc_Receive_Payment_ModuleId);
//                    }
//                    result = accReceiptDAOobj.getOpeningBalanceReceipts(requestParams);
//                    if (result != null && result.getEntityList() != null && result.getEntityList().size() > 0) {
//                        OBJArryPayment = AccInvoiceServiceHandler.getAgedOpeningBalanceReceiptJson(requestParams, result.getEntityList(), OBJArryPayment, accCurrencyDAOobj, accReceiptDAOobj, request, accountingHandlerDAOobj, accAccountDAOobj, fieldDataManagercntrl, accJournalEntryobj);
//                        for (int i = 0; i < OBJArryPayment.length(); i++) {
//                            DataJArr.put(OBJArryPayment.get(i));
//                        }
//                    }
//                    if (isAdvanceSearch) {
//                        requestParams.put(Constants.Acc_Search_Json, cnSearchJson);
//                        requestParams.put(Constants.Filter_Criteria, request.getParameter(Constants.Filter_Criteria));
//                    }
//                   result = accCreditNoteDAOobj.getCreditNoteMerged(invoiceRequestParams);
//                    if (result != null && result.getEntityList() != null && result.getEntityList().size() > 0) {
//                        CreditNotejArr = AccInvoiceServiceHandler.getCreditNotesMergedJson(invoiceRequestParams, result.getEntityList(), CreditNotejArr, accountingHandlerDAOobj, authHandlerDAOObj, accCurrencyDAOobj, accPaymentDAOobj, request, accCreditNoteDAOobj, accAccountDAOobj, fieldDataManagercntrl, accJournalEntryobj);
//                        for (int i = 0; i < CreditNotejArr.length(); i++) {
//                            DataJArr.put(CreditNotejArr.get(i));
//                        }
//                    }
//                    invoiceRequestParams.put("cntype", 4);
//                    JSONArray DebitNotejArr = new JSONArray();//This is used for getting DN gainst customer 
//                    if (isAdvanceSearch) {
//                        requestParams.put(Constants.Acc_Search_Json, dnSearchJson);
//                        requestParams.put(Constants.Filter_Criteria, request.getParameter(Constants.Filter_Criteria));
//                    }
//                    result = accDebitNoteobj.getDebitNoteMerged(requestParams);
//                    if (result != null && result.getEntityList() != null && result.getEntityList().size() > 0) {
//                        DebitNotejArr = AccInvoiceServiceHandler.getDebitNotesMergedJson(requestParams, result.getEntityList(), DebitNotejArr, accountingHandlerDAOobj, authHandlerDAOObj, accCurrencyDAOobj, accReceiptDAOobj, request, accAccountDAOobj, fieldDataManagercntrl, accJournalEntryobj,accCreditNoteDAOobj);
//                        for (int i = 0; i < DebitNotejArr.length(); i++) {
//                            DataJArr.put(DebitNotejArr.get(i));
//                        }
//                    }
//                    requestParams.remove("cntype");
//                    JSONArray receivePaymentJArr = new JSONArray();
//                    if (isAdvanceSearch) {
//                        requestParams.put(Constants.Acc_Search_Json, receiptSearchJson);
//                        requestParams.put(Constants.Filter_Criteria, request.getParameter(Constants.Filter_Criteria));
//                    }
//                    
//                    requestParams.put("allAdvPayment", true); // needs only advance type record so that putted true
//                    requestParams.put("paymentWindowType", 1);//Receipt to Customer record
//                    result = accReceiptDAOobj.getReceipts(requestParams);
//                    receivePaymentJArr = AccInvoiceServiceHandler.getReceiptsJson(requestParams, result.getEntityList(), receivePaymentJArr, accountingHandlerDAOobj, authHandlerDAOObj, accCurrencyDAOobj, accReceiptDAOobj, request, accAccountDAOobj, fieldDataManagercntrl, accJournalEntryobj);
//                    for (int i = 0; i < receivePaymentJArr.length(); i++) {
//                        DataJArr.put(receivePaymentJArr.get(i));
//                    }
//////                    
//                    if (isAdvanceSearch) {
//                        requestParams.put(Constants.Acc_Search_Json, makePaymentSearchJson);
//                        requestParams.put(Constants.Filter_Criteria, request.getParameter(Constants.Filter_Criteria));
////                    }
//                    JSONArray makePaymentJArr = new JSONArray();
//                    invoiceRequestParams.put("allAdvPayment", true); // needs only refund type record so that putted true
//                    invoiceRequestParams.put("paymentWindowType", 2);//Payment to Customer record
//                    result = accVendorPaymentobj.getPayments(invoiceRequestParams);
//                    if (result != null && result.getEntityList() != null && !result.getEntityList().isEmpty()) {
//                        makePaymentJArr = accGoodsReceiptServiceHandler.getPaymentsJson(invoiceRequestParams, result.getEntityList(), makePaymentJArr, accCurrencyDAOobj, accountingHandlerDAOobj, accVendorPaymentobj);
//                    }
//                    for (int i = 0; i < makePaymentJArr.length(); i++) {
//                        DataJArr.put(makePaymentJArr.get(i));
//                    }
//                    requestParams.put("allAdvPayment", true); // needs only refund type record so that putted true
//                    requestParams.put("paymentWindowType", 2);//Payment to Customer record

                    String sortKey="";
                    if (isgroupcomboDate == 1) {//IF Sort By date
                        sortKey="date";
                        DataJArr = AccountingManager.sortJsonArrayOnDateValues(DataJArr, (DateFormat) invoiceRequestParams.get(Constants.df),sortKey, true);
                    } else {
                        sortKey = "type";
                        DataJArr = AccountingManager.sortJsonArrayOnStringValues(DataJArr, sortKey, true);
                    }
                    sortKey="personinfo";
                    DataJArr = AccountingManager.sortJsonArrayOnStringValues(DataJArr,sortKey, true);    //show multigrouping JSONArray required to sort
                }

            

            if(request.getParameter("minimumAmountDue")!=null){
               JSONArray temp = new JSONArray();
               double minimumAmountDue = Double.parseDouble(request.getParameter("minimumAmountDue").toString());
               for(int i = 0; i < DataJArr.length(); i++) {
                   if(DataJArr.getJSONObject(i).getDouble("amountdue") >= minimumAmountDue)
                       temp.put(DataJArr.getJSONObject(i));
               }
               DataJArr = temp;
            }
            int count = DataJArr.length();
            JSONArray pagedJson = DataJArr;
            boolean isAgeingExport = request.getAttribute("isAgeingExport") == null ? false : (Boolean)request.getAttribute("isAgeingExport");            
            if(!isAgeingExport && (consolidateFlag || isAged)){
                String start = request.getParameter("start");
                String limit = request.getParameter("limit");
                if (!StringUtil.isNullOrEmpty(start) && !StringUtil.isNullOrEmpty(limit)) {
                    if (isAged) { // ADD GRNAD TOTAL AS LAST RECORD IN PAGED JSON
                        pagedJson = StringUtil.getPagedJSONForAgedWIthTotal(pagedJson, Integer.parseInt(start), Integer.parseInt(limit));
                        totalAmountJSON = pagedJson.getJSONObject(pagedJson.length()-1);
                        pagedJson.remove(pagedJson.length()-1);
                        jobj.put(Constants.AGEDAMOUNTSUMMARY, totalAmountJSON);
                    } else {
                        pagedJson = StringUtil.getPagedJSON(pagedJson, Integer.parseInt(start), Integer.parseInt(limit));
                    }
                }
            }
                addCustomFields(request, pagedJson, companyid, paramObj);
            
            if (isWidgetRequest) {
                view = "jsonView_ex";
                JSONObject commData = new JSONObject();
                JSONObject jMeta = new JSONObject();
                Map<String, Object> requestParamsForCM = new HashMap<>();
                Map<String, JSONArray> returnMap = accInvoiceServiceDAO.getColumnModuleForAPAR(requestParamsForCM);
                JSONArray jarrRecords = returnMap.get("record");
                JSONArray jarrColumns = returnMap.get("columns");
                commData.put("success", true);
                jMeta.put("totalProperty", "totalCount");
                jMeta.put("root", "coldata");
                jMeta.put("fields", jarrRecords); //Record Array
                commData.put("coldata", pagedJson);  //Actual data
                commData.put("columns", jarrColumns); //Column Module Array
                commData.put("totalCount", count);
                commData.put("metaData", jMeta);
                jobj.put("valid", true);
                jobj.put(Constants.data, commData);
            } else {
                jobj.put(Constants.data, pagedJson);
            }
            boolean isRecurringInvoice = !StringUtil.isNullOrEmpty(request.getParameter("getRepeateInvoice")) ? Boolean.parseBoolean(request.getParameter("getRepeateInvoice")) : false;
            if (report || isRecurringInvoice) {
                jobj.put("count", totalCount);
            } else {
                jobj.put("count", count);
            }
            issuccess = true;
        } catch (Exception ex){
            msg = ""+ex.getMessage();
            Logger.getLogger(accInvoiceController.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                jobj.put("success", issuccess);
                jobj.put("msg", msg);
            } catch (JSONException ex) {
                Logger.getLogger(accInvoiceController.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return new ModelAndView(view, "model", jobj.toString());
    }
    
    public void addCustomFields(HttpServletRequest request, JSONArray pagedJson, String companyid, JSONObject paramObj) throws JSONException, ServiceException, SessionExpiredException{
        //Invoice custom data 
        HashMap<String, String> invreplaceFieldMap = new HashMap();
        HashMap<String, String> invcustomFieldMap = new HashMap();
        HashMap<String, String> invcustomDateFieldMap = new HashMap();
        HashMap<String, Object> invfieldrequestParams = new HashMap();
        HashMap<String, Object> invfieldrequestParamsRows = new HashMap();
        HashMap<String, String> invreplaceFieldMapRows = new HashMap();
        HashMap<String, String> invcustomFieldMapRows = new HashMap();
        HashMap<String, String> invcustomDateFieldMapRows = new HashMap();
        HashMap<String, Integer> invfieldMap = null;
        HashMap<String, Integer> invfieldMapRows = null;

        //Custom field details Maps for Global data
        invreplaceFieldMap = new HashMap();
        invcustomFieldMap = new HashMap();
        invcustomDateFieldMap = new HashMap();
        invfieldrequestParams = new HashMap();
        int moduleid = Constants.Acc_Invoice_ModuleId;
        invfieldrequestParams.put(Constants.filter_names, Arrays.asList(Constants.companyid, Constants.moduleid));
        invfieldrequestParams.put(Constants.filter_values, Arrays.asList(companyid, moduleid));
        invfieldMap = accAccountDAOobj.getFieldParamsCustomMap(invfieldrequestParams, invreplaceFieldMap, invcustomFieldMap, invcustomDateFieldMap);

        //Custom field details Maps for Line Level data
        invfieldrequestParamsRows.put(Constants.filter_names, Arrays.asList(Constants.companyid, Constants.moduleid, Constants.customcolumn));
        invfieldrequestParamsRows.put(Constants.filter_values, Arrays.asList(companyid, moduleid, 1));
        invfieldMapRows = accAccountDAOobj.getFieldParamsCustomMap(invfieldrequestParamsRows, invreplaceFieldMapRows, invcustomFieldMapRows, invcustomDateFieldMapRows);

        //CreditNote custom data
        HashMap<String, String> cnreplaceFieldMap = new HashMap<String, String>();
        HashMap<String, String> cncustomFieldMap = new HashMap<String, String>();
        HashMap<String, String> cncustomDateFieldMap = new HashMap<String, String>();
        HashMap<String, Integer> cnFieldMap = null;
        HashMap<String, Object> cnfieldrequestParams = new HashMap();
        cnfieldrequestParams.put(Constants.filter_names, Arrays.asList(Constants.companyid, Constants.moduleid));
        cnfieldrequestParams.put(Constants.filter_values, Arrays.asList(companyid, Constants.Acc_Credit_Note_ModuleId));
        cnFieldMap = accAccountDAOobj.getFieldParamsCustomMap(cnfieldrequestParams, cnreplaceFieldMap, cncustomFieldMap, cncustomDateFieldMap);

        //Custom field details Maps for Line Level data
        HashMap<String, Object> cnfieldrequestParamsRows = new HashMap();
        HashMap<String, String> cnreplaceFieldMapRows = new HashMap();
        HashMap<String, String> cncustomFieldMapRows = new HashMap();
        HashMap<String, String> cncustomDateFieldMapRows = new HashMap();
        cnfieldrequestParamsRows.put(Constants.filter_names, Arrays.asList(Constants.companyid, Constants.moduleid));
        cnfieldrequestParamsRows.put(Constants.filter_values, Arrays.asList(companyid, Constants.Acc_Credit_Note_ModuleId));
        HashMap<String, Integer> cnfieldMapRows = null;
        cnfieldMapRows = accAccountDAOobj.getFieldParamsCustomMapForRows(cnfieldrequestParamsRows, cnreplaceFieldMapRows, cncustomFieldMapRows, cncustomDateFieldMapRows);

        //Debit Note custom data
        HashMap<String, String> dnreplaceFieldMap = new HashMap<String, String>();
        HashMap<String, String> dncustomFieldMap = new HashMap<String, String>();
        HashMap<String, String> dncustomDateFieldMap = new HashMap<String, String>();
        HashMap<String, Integer> dnFieldMap = null;
        HashMap<String, Object> dnfieldrequestParams = new HashMap();
        dnfieldrequestParams.put(Constants.filter_names, Arrays.asList(Constants.companyid, Constants.moduleid));
        dnfieldrequestParams.put(Constants.filter_values, Arrays.asList(companyid, Constants.Acc_Debit_Note_ModuleId));
        if (accAccountDAOobj != null) {
            dnFieldMap = accAccountDAOobj.getFieldParamsCustomMap(dnfieldrequestParams, dnreplaceFieldMap, dncustomFieldMap, dncustomDateFieldMap);
        }

        //Custom field details Maps for Line Level data
        HashMap<String, Object> dnfieldrequestParamsRows = new HashMap();
        HashMap<String, String> dnreplaceFieldMapRows = new HashMap();
        HashMap<String, String> dncustomFieldMapRows = new HashMap();
        HashMap<String, String> dncustomDateFieldMapRows = new HashMap();
        dnfieldrequestParamsRows.put(Constants.filter_names, Arrays.asList(Constants.companyid, Constants.moduleid));
        dnfieldrequestParamsRows.put(Constants.filter_values, Arrays.asList(companyid, Constants.Acc_Debit_Note_ModuleId));
        HashMap<String, Integer> dnfieldMapRows = null;
        dnfieldMapRows = accAccountDAOobj.getFieldParamsCustomMapForRows(dnfieldrequestParamsRows, dnreplaceFieldMapRows, dncustomFieldMapRows, dncustomDateFieldMapRows);

        //Receipt custom data
        HashMap<String, Object> rtfieldrequestParamsGlobalLevel = new HashMap();
        HashMap<String, String> rtcustomFieldMapGlobalLevel = new HashMap<String, String>();
        HashMap<String, String> rtcustomDateFieldMapGlobalLevel = new HashMap<String, String>();
        HashMap<String, Integer> rtFieldMapGlobalLevel = null;
        rtfieldrequestParamsGlobalLevel.put(Constants.filter_names, Arrays.asList(Constants.companyid, Constants.moduleid));
        rtfieldrequestParamsGlobalLevel.put(Constants.filter_values, Arrays.asList(companyid, Constants.Acc_Receive_Payment_ModuleId));
        HashMap<String, String> rtreplaceFieldMapGlobalLevel = new HashMap<String, String>();
        if (accAccountDAOobj != null) {
            rtFieldMapGlobalLevel = accAccountDAOobj.getFieldParamsCustomMap(rtfieldrequestParamsGlobalLevel, rtreplaceFieldMapGlobalLevel, rtcustomFieldMapGlobalLevel, rtcustomDateFieldMapGlobalLevel);
        }

        //Custom field details Maps for Line Level data
        HashMap<String, Object> rtfieldrequestParamsRows = new HashMap();
        HashMap<String, String> rtreplaceFieldMapRows = new HashMap();
        HashMap<String, String> rtcustomFieldMapRows = new HashMap();
        HashMap<String, String> rtcustomDateFieldMapRows = new HashMap();
        rtfieldrequestParamsRows.put(Constants.filter_names, Arrays.asList(Constants.companyid, Constants.moduleid));
        rtfieldrequestParamsRows.put(Constants.filter_values, Arrays.asList(companyid, Constants.Acc_Receive_Payment_ModuleId));
        HashMap<String, Integer> rtfieldMapRows = null;
        if (accAccountDAOobj != null) {
            rtfieldMapRows = accAccountDAOobj.getFieldParamsCustomMapForRows(rtfieldrequestParamsRows, rtreplaceFieldMapRows, rtcustomFieldMapRows, rtcustomDateFieldMapRows);
        }

        //Custom Field for opening receipts
        HashMap<String, String> openingRTreplaceFieldMap = new HashMap<String, String>();
        HashMap<String, String> openingRTcustomFieldMap = new HashMap<String, String>();
        HashMap<String, String> openingRTcustomDateFieldMap = new HashMap<String, String>();
        HashMap<String, Integer> openingRTFieldMap = null;
        HashMap<String, Object> openingRTfieldrequestParams = new HashMap();
        openingRTfieldrequestParams.put(Constants.filter_names, Arrays.asList(Constants.companyid, Constants.moduleid));
        openingRTfieldrequestParams.put(Constants.filter_values, Arrays.asList(sessionHandlerImpl.getCompanyid(request), Constants.Acc_Receive_Payment_ModuleId));
        if (accAccountDAOobj != null) {
            openingRTFieldMap = accAccountDAOobj.getFieldParamsCustomMap(openingRTfieldrequestParams, openingRTreplaceFieldMap, openingRTcustomFieldMap, openingRTcustomDateFieldMap);
        }
        
        
        //Custom Field for opening invoices
        HashMap<String, String> openingInvreplaceFieldMap = new HashMap<String, String>();
        HashMap<String, String> openingInvcustomFieldMap = new HashMap<String, String>();
        HashMap<String, String> openingInvcustomDateFieldMap = new HashMap<String, String>();
        HashMap<String, Integer> openingInvFieldMap = null;
        HashMap<String, Object> openingInvfieldrequestParams = new HashMap();
        openingInvfieldrequestParams.put(Constants.filter_names, Arrays.asList(Constants.companyid, Constants.moduleid));
        openingInvfieldrequestParams.put(Constants.filter_values, Arrays.asList(sessionHandlerImpl.getCompanyid(request), Constants.Acc_Invoice_ModuleId));
        if (accAccountDAOobj != null) {
            openingInvFieldMap = accAccountDAOobj.getFieldParamsCustomMap(openingInvfieldrequestParams, openingInvreplaceFieldMap, openingInvcustomFieldMap, openingInvcustomDateFieldMap);
        }
        
        //Custom Field for opening CN
        HashMap<String, String> openingCNreplaceFieldMap = new HashMap<String, String>();
        HashMap<String, String> openingCNcustomFieldMap = new HashMap<String, String>();
        HashMap<String, String> openingCNcustomDateFieldMap = new HashMap<String, String>();
        HashMap<String, Integer> openingCNFieldMap = null;
        HashMap<String, Object> openingCNfieldrequestParams = new HashMap();
        openingCNfieldrequestParams.put(Constants.filter_names, Arrays.asList(Constants.companyid, Constants.moduleid));
        openingCNfieldrequestParams.put(Constants.filter_values, Arrays.asList(sessionHandlerImpl.getCompanyid(request), Constants.Acc_Credit_Note_ModuleId));
        if (accAccountDAOobj != null) {
            openingCNFieldMap = accAccountDAOobj.getFieldParamsCustomMap(openingCNfieldrequestParams, openingCNreplaceFieldMap, openingCNcustomFieldMap, openingCNcustomDateFieldMap);
        }
        
        //Custom Field for opening DN
        HashMap<String, String> openingDNreplaceFieldMap = new HashMap<String, String>();
        HashMap<String, String> openingDNcustomFieldMap = new HashMap<String, String>();
        HashMap<String, String> openingDNcustomDateFieldMap = new HashMap<String, String>();
        HashMap<String, Integer> openingDNFieldMap = null;
        HashMap<String, Object> openingDNfieldrequestParams = new HashMap();
        openingDNfieldrequestParams.put(Constants.filter_names, Arrays.asList(Constants.companyid, Constants.moduleid));
        openingDNfieldrequestParams.put(Constants.filter_values, Arrays.asList(sessionHandlerImpl.getCompanyid(request), Constants.Acc_Debit_Note_ModuleId));
        if (accAccountDAOobj != null) {
            openingDNFieldMap = accAccountDAOobj.getFieldParamsCustomMap(openingDNfieldrequestParams, openingDNreplaceFieldMap, openingDNcustomFieldMap, openingDNcustomDateFieldMap);
        }
            
            
        for (int i = 0; i < pagedJson.length(); i++) {
            JSONObject obj = pagedJson.getJSONObject(i);
            if(obj.optString("type","").equals("Sales Invoice")){
                String invId = obj.getString("billid");
                KwlReturnObject inv = accountingHandlerDAOobj.getObject(Invoice.class.getName(), invId);
                Invoice invoice = (Invoice) inv.getEntityList().get(0); 
                if(invoice.isNormalInvoice()){
                    accInvoiceServiceDAO.getCustomFeild(obj, invoice, paramObj, invreplaceFieldMap, invcustomFieldMap, invcustomDateFieldMap, invfieldMap, invreplaceFieldMapRows, invcustomFieldMapRows, invcustomDateFieldMapRows, invfieldMapRows);
                }else{
                    AccInvoiceServiceHandler.getOpeningInvoiceCustomField(companyid, fieldDataManagercntrl, accJournalEntryobj, accountingHandlerDAOobj, request, invoice, openingInvreplaceFieldMap, openingInvcustomFieldMap, openingInvcustomDateFieldMap, openingInvFieldMap, obj);
                }
            }
            if(obj.optString("type","").equals("Credit Note")){
                String id = obj.getString("billid");
                CreditNote creditNote = (CreditNote)kwlCommonTablesDAOObj.getObject(CreditNote.class.getName(), id).getEntityList().get(0);
                if(creditNote.isNormalCN()){
                    AccInvoiceServiceHandler.getCreditNoteCustomField(companyid, fieldDataManagercntrl, accJournalEntryobj, accountingHandlerDAOobj, accCreditNoteDAOobj, request, creditNote, cnreplaceFieldMapRows, cncustomFieldMapRows, cncustomDateFieldMapRows, cnfieldMapRows, cnreplaceFieldMap, cncustomFieldMap, cncustomDateFieldMap, cnFieldMap, obj);
                }
                else{
                    AccInvoiceServiceHandler.getOpeningCreditNoteCustomField(companyid, fieldDataManagercntrl, accJournalEntryobj, request, creditNote, openingCNreplaceFieldMap, openingCNcustomFieldMap, openingCNcustomDateFieldMap, openingCNFieldMap, obj);
                }
            }
            if(obj.optString("type","").equals("Debit Note")){
                String id = obj.getString("billid");
                DebitNote debitNote = (DebitNote)kwlCommonTablesDAOObj.getObject(DebitNote.class.getName(), id).getEntityList().get(0);
                if(debitNote.isNormalDN()){
                    AccInvoiceServiceHandler.getDebitNoteCustomField(companyid, fieldDataManagercntrl, accJournalEntryobj, accountingHandlerDAOobj, accCreditNoteDAOobj, request, debitNote, dnreplaceFieldMapRows, dncustomFieldMapRows, dncustomDateFieldMapRows, dnfieldMapRows, dnreplaceFieldMap, dncustomFieldMap, dncustomDateFieldMap, dnFieldMap, obj);
                }
                else{
                    AccInvoiceServiceHandler.getOpeningDebitNoteCustomField(companyid, fieldDataManagercntrl, accJournalEntryobj, request, debitNote, openingDNreplaceFieldMap, openingDNcustomFieldMap, openingDNcustomDateFieldMap, openingDNFieldMap, obj);
                }
            }
            if(obj.optString("type","").equals("Payment Received")){
                String id = obj.getString("billid");
                Receipt receipt = (Receipt)kwlCommonTablesDAOObj.getObject(Receipt.class.getName(), id).getEntityList().get(0);
                if(receipt.isNormalReceipt()){
                    AccInvoiceServiceHandler.getReceiptCustomField(companyid, fieldDataManagercntrl, accJournalEntryobj, accountingHandlerDAOobj, accReceiptDAOobj, request, receipt, rtcustomFieldMapGlobalLevel, rtcustomDateFieldMapGlobalLevel, rtFieldMapGlobalLevel, rtreplaceFieldMapGlobalLevel, rtreplaceFieldMapRows, rtcustomFieldMapRows, rtcustomDateFieldMapRows, rtfieldMapRows, obj);
                }
                else{
                    AccInvoiceServiceHandler.getOpeningReceiptCustomField(companyid, fieldDataManagercntrl, accJournalEntryobj, request, receipt, openingRTreplaceFieldMap, openingRTcustomFieldMap, openingRTcustomDateFieldMap, openingRTFieldMap, obj);
                }
            }
        }
    }
    
    public ModelAndView getAllUninvoicedConsignmentDetails(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        JSONArray jArray = new JSONArray();
        boolean issuccess = false;
        String exportFileName = request.getParameter("filename"); // for Export
        boolean isExport = false;
        String view =Constants.jsonView;
        if (!StringUtil.isNullOrEmpty(exportFileName)) {
            isExport = true;
            String fileType = request.getParameter("filetype");
            if (StringUtil.equal(fileType, "print")) {
                try {
                    String  GenerateDate = authHandler.getDateFormatter(request).format(new Date());
                    jobj.put("GenerateDate", GenerateDate);
                    view = "jsonView-empty";
                } catch (JSONException ex) {
                    Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
                } catch (SessionExpiredException ex) {
                    Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
        String msg = "";
        try {
            jobj = getAllUninvoicedConsignmentDetails(request);
            
            jArray =jobj.getJSONArray(Constants.data);
            if (isExport) {
                jobj.put(Constants.data, jArray);
                jobj.put("totalCount", jArray.length());
                exportDaoObj.processRequest(request, response,jobj);
            }
            issuccess = true;
        } catch (Exception ex) {
            msg = "" + ex.getMessage();
            Logger.getLogger(accInvoiceController.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                jobj.put("success", issuccess);
                jobj.put("msg", msg);
            } catch (JSONException ex) {
                Logger.getLogger(accInvoiceController.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return new ModelAndView(view, "model", jobj.toString());
    }
   
    public JSONObject getAllUninvoicedConsignmentDetails(HttpServletRequest request) throws SessionExpiredException, ServiceException, ParseException {  //, HashMap<String, Integer> fieldMap
        JSONObject jobj = new JSONObject();
        try {
            JSONArray jArr = new JSONArray();
            DateFormat df = (DateFormat) authHandler.getDateFormatter(request);
            String companyId = sessionHandlerImpl.getCompanyid(request);
            String searchString = request.getParameter("ss");
            String productsFilter = request.getParameter("ids");
            String excludeproductsFilter = request.getParameter("excludeProductIds");
            boolean isExport= StringUtil.isNullOrEmpty(request.getParameter("filetype"))?false:true;
            HashMap requestParams = AccInvoiceServiceHandler.getInvoiceRequestMap(request);
            String customFieldQuery = "select customcolumninfo from showcustomcolumninreport where moduleid = ? and companyid = ?";
            List<String> customFieldinfoList = null;
            customFieldinfoList = accCommonTablesDAO.executeSQLQuery(customFieldQuery, new Object[]{Constants.Acc_Product_Master_ModuleId, companyId});
            HashMap<String, HashMap> productCustomData = new HashMap<String, HashMap>();
            HashMap<String, String> replaceFieldMap = new HashMap<String, String>();
            HashMap<String, String> customFieldMap = new HashMap<String, String>();
            HashMap<String, String> customDateFieldMap = new HashMap<String, String>();
            HashMap<String, Integer> FieldMap = null;

            if (customFieldinfoList.size() > 0) {
                String jsonString = customFieldinfoList.get(0);
                JSONArray productCustomFields = new JSONArray(jsonString);
                String fieldIds = "";
                for (int jCnt = 0; jCnt < productCustomFields.length(); jCnt++) {
                    fieldIds = fieldIds.concat("'").concat(productCustomFields.getJSONObject(jCnt).getString("fieldid")).concat("',");
                }
                if (!StringUtil.isNullOrEmpty(fieldIds)) {
                    fieldIds = fieldIds.substring(0, fieldIds.length() - 1);
                }
                HashMap<String, Object> fieldrequestParams = new HashMap();
                fieldrequestParams.put(Constants.filter_names, Arrays.asList(Constants.companyid, Constants.moduleid, "INid"));
                fieldrequestParams.put(Constants.filter_values, Arrays.asList(companyId, Constants.Acc_Product_Master_ModuleId, fieldIds));
                FieldMap = accAccountDAOobj.getFieldParamsCustomMap(fieldrequestParams, replaceFieldMap, customFieldMap, customDateFieldMap);
            }
            requestParams.put(Constants.companyKey, companyId);
            requestParams.put("searchString", searchString);
            requestParams.put("productsFilter", productsFilter);
            requestParams.put("excludeproductsFilter", excludeproductsFilter);
                KwlReturnObject result = accInvoiceDAOobj.getAllUninvoicedConsignmentDetails(requestParams);
                Iterator itr = result.getEntityList().iterator();
                int i = 0;
                while (itr.hasNext()) {
                    
                Object[] row = (Object[]) itr.next();

                String productid = (String) row[0];
                String productDesc = (row[5]!=null)?(String) row[5]:"";
                double actualquantity = (Double) row[1];
                double deliveredquantity = (Double) row[2];
                double baseuomquantity = (Double) row[3];
                double baseuomdeliveredquantity = (Double) row[4];
                double invQuantity=0;
                double returnQuantity=0;
                String customerId =(row[6]!=null)?(String) row[6]:"";
                String customerName =(row[7]!=null)?(String) row[7]:"";
                String customerWarehouseId =(row[8]!=null)?(String) row[8]:"";
                String customerWarehouseName =(row[9]!=null)?(String) row[9]:"";
                
                  Product product=null;
                    if (!StringUtil.isNullOrEmpty(productid)){
                        KwlReturnObject proresult = accountingHandlerDAOobj.getObject(Product.class.getName(), productid);
                       product = (Product) proresult.getEntityList().get(0);
                    }
                    JSONObject obj = new JSONObject();

                    obj.put("productid", product.getID());
                    obj.put("productname", product.getName());
                    obj.put("invstore", "");
                    obj.put("invlocation", "");
                    obj.put("isAsset", "");
                    Calendar cal = Calendar.getInstance();
                    obj.put("unitname", product.getUnitOfMeasure() == null ? "" : product.getUnitOfMeasure().getNameEmptyforNA());
                    obj.put("desc", StringUtil.isNullOrEmpty(productDesc)?(!StringUtil.isNullOrEmpty(product.getDescription()) ? product.getDescription() :""):productDesc);
                    obj.put("type", product.getProducttype() == null ? "" : product.getProducttype().getName());
                    obj.put("pid", product.getProductid());

                    HashMap<String, Object> prodParams = new HashMap<String, Object>();
                    prodParams.put("productid", productid);
                    prodParams.put(Constants.customerid, request.getParameter(Constants.customerid));
                    prodParams.put("custWarehouse", request.getParameter("custWarehouse"));
                    prodParams.put(Constants.companyKey, companyId);
                    
                    if (!StringUtil.isNullOrEmpty(productid)) {
                        invQuantity = accInvoiceDAOobj.getDoQuantityWhoseInvoiceCreated(prodParams);
                    }
                    if (!StringUtil.isNullOrEmpty(productid)) {
                        returnQuantity = accInvoiceDAOobj.getReturnQuantity(prodParams);
                    }
                    obj.put("quantity", (baseuomdeliveredquantity - invQuantity) - returnQuantity);
                    obj.put("dquantity", (baseuomdeliveredquantity - invQuantity) - returnQuantity);
                    obj.put("uomid", product.getUnitOfMeasure() != null ? product.getUnitOfMeasure().getID() : "");
                    obj.put("uom", product.getUnitOfMeasure() == null ? "" : product.getUnitOfMeasure().getNameEmptyforNA());
                    obj.put("baseuomquantity", (baseuomquantity - invQuantity) - returnQuantity);
                    obj.put("description", !StringUtil.isNullOrEmpty(product.getDescription()) ? product.getDescription() : "");
                    obj.put("discountispercent", 1);
                    obj.put("prdiscount", 0);
                    obj.put("customerid", customerId );
                    obj.put("customername", customerName);
                    obj.put("customerwarehouseid", customerWarehouseId);
                    obj.put("customerwarehousename", customerWarehouseName);

                    obj.put("reusabilitycount",product.getReusabilityCount());
                    if(product.getItemReusability()!=null){
                    obj.put("isreusable",product.getItemReusability().ordinal());
                    }

                    obj.put("isLocationForProduct", product.isIslocationforproduct());
                    obj.put("isWarehouseForProduct", product.isIswarehouseforproduct());
                    obj.put("isRowForProduct", product.isIsrowforproduct());
                    obj.put("isRackForProduct", product.isIsrackforproduct());
                    obj.put("isBinForProduct", product.isIsbinforproduct());
                    obj.put("isBatchForProduct", product.isIsBatchForProduct());
                    obj.put("isSerialForProduct", product.isIsSerialForProduct());
                    obj.put("isRecyclable", product.isRecyclable());
                    KwlReturnObject res = accProductObj.getVendorConsignedQuantity(product.getID());
                    obj.put("venconsignuomquantity", (res.getEntityList().get(0) == null ? 0 : res.getEntityList().get(0)));
                    //Set rate to default product price when invoice is created using DO.
                    String curdatestr = df.format(cal.getTime());
                    Date curDate = df.parse(curdatestr);
                    KwlReturnObject rateResult = accProductObj.getProductPrice(product.getID(), false, curDate, "", "");
                    Object temp = rateResult.getEntityList().get(0);
                    if (temp != null) {
                        obj.put("rate", temp.toString());
                    } else {
                        obj.put("rate", 0);
                    }
                    obj.put("baseuomrate", 1);
                     if (FieldMap != null) {
                        if (productCustomData.containsKey(productid)) {
                            HashMap<String, String> prodDataArray = productCustomData.get(productid);
                            for (Map.Entry<String, String> varEntry : prodDataArray.entrySet()) {
                                obj.put(varEntry.getKey(), varEntry.getValue());
                            }
                        } else {
                            AccProductCustomData obj1 = (AccProductCustomData) kwlCommonTablesDAOObj.getClassObject(AccProductCustomData.class.getName(), productid);
                            if (obj1 != null) {
                                HashMap<String, String> prodDataArray = new HashMap<String, String>();
                                HashMap<String, Object> variableMap = new HashMap<String, Object>();
                                AccountingManager.setCustomColumnValues(obj1, FieldMap, replaceFieldMap, variableMap);
                                DateFormat defaulDateFormat= new SimpleDateFormat(Constants.MMMMdyyyy);
                                for (Map.Entry<String, Object> varEntry : variableMap.entrySet()) {
                                    String coldata = varEntry.getValue().toString();
                                    if (customFieldMap.containsKey(varEntry.getKey())) {
                                        boolean isCustomExport = true;
                                        String value = "";
                                        String Ids[] = coldata.split(",");
                                        for (int count = 0; count < Ids.length; count++) {
                                            FieldComboData fieldComboData = (FieldComboData) kwlCommonTablesDAOObj.getClassObject(FieldComboData.class.getName(), Ids[count]);
                                            if (fieldComboData != null) {
                                                if (fieldComboData.getField().getFieldtype() == 12 && !isCustomExport) {
                                                    value += Ids[count] != null ? Ids[count] + "," : ",";
                                                } else {
                                                    value += fieldComboData.getValue() != null ? fieldComboData.getValue() + "," : ",";
                                                }
                                            }
                                        }
                                        if (!StringUtil.isNullOrEmpty(value)) {
                                            value = value.substring(0, value.length() - 1);
                                        }
                                        prodDataArray.put(varEntry.getKey(), value);
                                        obj.put(varEntry.getKey(), value);
                                    } else if (customDateFieldMap.containsKey(varEntry.getKey())) {
                                        if (df != null) {
                                            try {
                                                coldata = defaulDateFormat.format(curDate);

                                            } catch (Exception e) {
                                            }
                                        }
                                        obj.put(varEntry.getKey(), coldata);
                                        prodDataArray.put(varEntry.getKey(), coldata);
                                    } else {
                                        if (!StringUtil.isNullOrEmpty(coldata)) {
                                            obj.put(varEntry.getKey(), coldata);
                                            prodDataArray.put(varEntry.getKey(), coldata);
                                        }
                                    }
                                }
                                productCustomData.put(productid, prodDataArray);
                            }
                        }
                    }


                    if (((baseuomdeliveredquantity - invQuantity) - returnQuantity) > 0) {
                        jArr.put(obj);
                    }
                    }
                int count=jArr.length();
                String start = request.getParameter("start");
                String limit = request.getParameter("limit");
                if (!StringUtil.isNullOrEmpty(start) && !StringUtil.isNullOrEmpty(limit)&&!isExport) {
                    jArr = StringUtil.getPagedJSON(jArr, Integer.parseInt(start), Integer.parseInt(limit));
                }
                jobj.put(Constants.data, jArr);
                jobj.put("count", count);
        } catch (JSONException je) {
            throw ServiceException.FAILURE(je.getMessage(), je);
        }
        return jobj;
    }

    public ModelAndView getWeeklyCashFlowUnPaidInvoices(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        JSONArray DataJArr = new JSONArray();
        boolean issuccess = false;
        String msg = "";
        try{
            boolean consolidateFlag = request.getParameter("consolidateFlag")!=null?Boolean.parseBoolean(request.getParameter("consolidateFlag")):false;            
            String[] companyids = (consolidateFlag && request.getParameter(Constants.companyids)!=null)?request.getParameter(Constants.companyids).split(","):sessionHandlerImpl.getCompanyid(request).split(",");
            String gcurrencyid = (consolidateFlag && request.getParameter(Constants.globalCurrencyKey)!=null)?request.getParameter(Constants.globalCurrencyKey):sessionHandlerImpl.getCurrencyID(request);            
            boolean isAged = request.getParameter("isAged")!=null?Boolean.parseBoolean(request.getParameter("isAged")):false;
            boolean isForTemplate = false;  
            boolean onlyOutstanding =false;
            boolean report=false;
            int totalCount = 0;
            if(!StringUtil.isNullOrEmpty(request.getParameter("isForTemplate"))){
                isForTemplate = Boolean.parseBoolean(request.getParameter("isForTemplate"));
            }

            if(!StringUtil.isNullOrEmpty(request.getParameter("onlyOutsatnding"))){
                onlyOutstanding = Boolean.parseBoolean(request.getParameter("onlyOutsatnding"));
            }           
            if(!StringUtil.isNullOrEmpty(request.getParameter("report"))){
                report = Boolean.parseBoolean(request.getParameter("report"));
            }           
            HashMap requestParams = AccInvoiceServiceHandler.getInvoiceRequestMap(request);
            String dir = "";
            String sort = "";
            if(!StringUtil.isNullOrEmpty(request.getParameter("dir")) && !StringUtil.isNullOrEmpty(request.getParameter("sort"))){
                dir = request.getParameter("dir");
                 sort = request.getParameter("sort");
                   requestParams.put("sort", sort);
                requestParams.put("dir", dir);
            }
            String companyid = "";
            for(int cnt=0; cnt<companyids.length; cnt++) {
                companyid = companyids[cnt];                
                request.setAttribute(Constants.companyKey, companyid);
                request.setAttribute(Constants.globalCurrencyKey, gcurrencyid);
                request.setAttribute("onlyOutstanding", onlyOutstanding);
                requestParams.put(Constants.companyKey, companyid);
                requestParams.put(Constants.globalCurrencyKey, gcurrencyid);
                requestParams.put("consolidateFlag", consolidateFlag);
                requestParams.put("isForTemplate", isForTemplate);
                requestParams.put("datefilter", request.getParameter("datefilter"));
                requestParams.put("duration", request.getParameter("duration"));
                requestParams.put("custVendorID", request.getParameter("custVendorID")); 
                requestParams.put("start", request.getParameter("start"));
                requestParams.put("limit", request.getParameter("limit"));
                requestParams.put("isweeklycashflow", true);
                KwlReturnObject result = null;
                result = accInvoiceDAOobj.WeeklyCashFlowUnPaidInvoices(requestParams);
                totalCount=result!=null?result.getRecordTotalCount():0;
                List list = result.getEntityList();
                DataJArr = getWeeklyCashFlowUnPaidInvoicesMerged(request, list, DataJArr, false);
            }
               
            if(request.getParameter("minimumAmountDue")!=null){
               JSONArray temp = new JSONArray();
               double minimumAmountDue = Double.parseDouble(request.getParameter("minimumAmountDue").toString());
               for(int i = 0; i < DataJArr.length(); i++) {
                   if(DataJArr.getJSONObject(i).getDouble("amountdue") >= minimumAmountDue)
                       temp.put(DataJArr.getJSONObject(i));
               }
               DataJArr = temp;
            }
            if(onlyOutstanding){
                JSONArray temp = new JSONArray();
               for(int i = 0; i < DataJArr.length(); i++) {
                   if(DataJArr.getJSONObject(i).getDouble("amountdue") >= 1)
                       temp.put(DataJArr.getJSONObject(i));
               }
               DataJArr = temp;
            }    
            int count = DataJArr.length();
            JSONArray arrayOfColumn = new JSONArray();
            for (int i = 0; i < DataJArr.length(); i++) {
                if (DataJArr.getJSONObject(i).has("columns")) {   
                    arrayOfColumn.put(DataJArr.getJSONObject(i));
                }
            }
            JSONArray arrayOfInvoiceData= new JSONArray();
            for (int i = 0; i < DataJArr.length(); i++) {
                if (DataJArr.getJSONObject(i).has("persondata")) {   
                    arrayOfInvoiceData.put(DataJArr.getJSONObject(i));
                }
            }
            JSONArray pagedJson = arrayOfInvoiceData;
            if(consolidateFlag){
                String start = request.getParameter("start");
                String limit = request.getParameter("limit");
                if (!StringUtil.isNullOrEmpty(start) && !StringUtil.isNullOrEmpty(limit)) {
                    pagedJson = StringUtil.getPagedJSON(arrayOfInvoiceData, Integer.parseInt(start), Integer.parseInt(limit));
                }
            }   
            
            if(isAged){
                //show multigrouping JSONArray required to sort    
               String sortKey = "type";
               JSONArray array = AccountingManager.sortJsonArrayOnStringValues(pagedJson, sortKey,true);
               sortKey = "personname";
               array = AccountingManager.sortJsonArrayOnStringValues(array, sortKey, true);
               JSONArray arrayWithColumns=new JSONArray();
               arrayWithColumns.put(array);
               arrayWithColumns.put(arrayOfColumn);
               jobj.put(Constants.data, arrayWithColumns);  
            } else{
               jobj.put(Constants.data, pagedJson); 
            }  
            if(report){
                jobj.put("count", totalCount);
            }else{
                jobj.put("count", count);
            }
            issuccess = true;
        } catch (Exception ex){
            msg = ""+ex.getMessage();
            Logger.getLogger(accInvoiceController.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                jobj.put("success", issuccess);
                jobj.put("msg", msg);
            } catch (JSONException ex) {
                Logger.getLogger(accInvoiceController.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return new ModelAndView(Constants.jsonView, "model", jobj.toString());
    }
    
    public ModelAndView exportWeeklyCashFlowUnPaidInvoices(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        JSONArray DataJArr = new JSONArray();
        String view = "jsonView_ex";
        try{
            boolean consolidateFlag = request.getParameter("consolidateFlag")!=null?Boolean.parseBoolean(request.getParameter("consolidateFlag")):false;            
            String[] companyids = (consolidateFlag && request.getParameter(Constants.companyids)!=null)?request.getParameter(Constants.companyids).split(","):sessionHandlerImpl.getCompanyid(request).split(",");
            String gcurrencyid = (consolidateFlag && request.getParameter(Constants.globalCurrencyKey)!=null)?request.getParameter(Constants.globalCurrencyKey):sessionHandlerImpl.getCurrencyID(request);            
            boolean isForTemplate = false;  
            boolean onlyOutstanding =false;
            if(!StringUtil.isNullOrEmpty(request.getParameter("isForTemplate"))){
                isForTemplate = Boolean.parseBoolean(request.getParameter("isForTemplate"));
            }

            if(!StringUtil.isNullOrEmpty(request.getParameter("onlyOutsatnding"))){
                onlyOutstanding = Boolean.parseBoolean(request.getParameter("onlyOutsatnding"));
            }           

            HashMap requestParams = AccInvoiceServiceHandler.getInvoiceRequestMap(request);
            String dir = "";
            String sort = "";
            if(!StringUtil.isNullOrEmpty(request.getParameter("dir")) && !StringUtil.isNullOrEmpty(request.getParameter("sort"))){
                dir = request.getParameter("dir");
                 sort = request.getParameter("sort");
                   requestParams.put("sort", sort);
                requestParams.put("dir", dir);
            }
            String companyid = "";
            for(int cnt=0; cnt<companyids.length; cnt++) {
                companyid = companyids[cnt];                
                request.setAttribute(Constants.companyKey, companyid);
                request.setAttribute(Constants.globalCurrencyKey, gcurrencyid);
                request.setAttribute("onlyOutstanding", onlyOutstanding);
                requestParams.put(Constants.companyKey, companyid);
                requestParams.put(Constants.globalCurrencyKey, gcurrencyid);
                requestParams.put("consolidateFlag", consolidateFlag);
                requestParams.put("isForTemplate", isForTemplate);
                requestParams.put("datefilter", request.getParameter("datefilter"));
                requestParams.put("duration", request.getParameter("duration"));
                requestParams.put("custVendorID", request.getParameter("custVendorID")); 
                requestParams.put("export", true);
                requestParams.put("isweeklycashflow", true);
                KwlReturnObject result = null;
                result = accInvoiceDAOobj.WeeklyCashFlowUnPaidInvoices(requestParams);
                List list = result.getEntityList();
                DataJArr = getWeeklyCashFlowUnPaidInvoicesMerged(request, list, DataJArr, true);
            }
               
            if(request.getParameter("minimumAmountDue")!=null){
               JSONArray temp = new JSONArray();
               double minimumAmountDue = Double.parseDouble(request.getParameter("minimumAmountDue").toString());
               for(int i = 0; i < DataJArr.length(); i++) {
                   if(DataJArr.getJSONObject(i).getDouble("amountdue") >= minimumAmountDue)
                       temp.put(DataJArr.getJSONObject(i));
               }
               DataJArr = temp;
            }
            if(onlyOutstanding){
                JSONArray temp = new JSONArray();
               for(int i = 0; i < DataJArr.length(); i++) {
                   if(DataJArr.getJSONObject(i).getDouble("amountdue") >= 1)
                       temp.put(DataJArr.getJSONObject(i));
               }
               DataJArr = temp;
            }    
            jobj.put(Constants.data, DataJArr);
            String fileType = request.getParameter("filetype");
            if (StringUtil.equal(fileType, "print")) {
                String  GenerateDate = authHandler.getDateFormatter(request).format(new Date());
                jobj.put("GenerateDate", GenerateDate);
                view = "jsonView-empty";
            }
            exportDaoObj.processRequest(request, response, jobj);
        } catch (SessionExpiredException ex) {
            Logger.getLogger(accInvoiceController.class.getName()).log(Level.SEVERE, null, ex);
        } catch(Exception ex) {
            Logger.getLogger(accInvoiceController.class.getName()).log(Level.SEVERE, null, ex);
        }
        return new ModelAndView(view, "model", jobj.toString());
    }
    
    public JSONArray getWeeklyCashFlowUnPaidInvoicesMerged(HttpServletRequest request, List list, JSONArray jArr, boolean isExport) throws SessionExpiredException, ServiceException {
          JSONArray tempArray= new JSONArray();
        try{
            HashMap requestParams = AccInvoiceServiceHandler.getInvoiceRequestMap(request);
            DateFormat df = authHandler.getDateOnlyFormat();
            String companyid = AccountingManager.getCompanyidFromRequest(request);
            int intervals = request.getParameter("duration") != null ? Integer.parseInt(request.getParameter("duration")) : 4;
            boolean ignoreZero = request.getParameter("ignorezero") != null ? Boolean.parseBoolean(request.getParameter("ignorezero")) : false;
            boolean onlyAmountDue = requestParams.get("onlyamountdue") != null? Boolean.parseBoolean(request.getParameter("onlyamountdue")) : false;
            boolean onlyOutstanding=request.getAttribute("onlyOutstanding")!=null ? Boolean.parseBoolean(request.getParameter("onlyOutstanding")) : false;
            boolean invoiceReport=false; 
             if(!StringUtil.isNullOrEmpty(request.getParameter("report"))){
                invoiceReport = Boolean.parseBoolean(request.getParameter("report"));
            }
            boolean isSOA=request.getAttribute("isSOA")!=null ?(Boolean)request.getAttribute("isSOA") : false;
            int datefilter = StringUtil.getInteger(request.getParameter("datefilter"));// 0 = Invoice Due date OR 1 = Invoice date
            boolean isSalesCommissionStmt=(requestParams.containsKey(InvoiceConstants.isSalesCommissionStmt))?Boolean.parseBoolean((String) requestParams.get(InvoiceConstants.isSalesCommissionStmt)):false;
            boolean isProduct = (requestParams.containsKey(InvoiceConstants.productid) && !StringUtil.isNullOrEmpty((String)requestParams.get(InvoiceConstants.productid)))? true : false;
            KwlReturnObject curresult = accountingHandlerDAOobj.getObject(KWLCurrency.class.getName(), AccountingManager.getGlobalCurrencyidFromRequest(request));
            KWLCurrency currency = (KWLCurrency) curresult.getEntityList().get(0);
            int duration = 7;
            double commission=0;
            HashMap<String, String> replaceFieldMap = new HashMap<String, String>();
            HashMap<String, String> customFieldMap = new HashMap<String, String>();
            HashMap<String, String> customDateFieldMap = new HashMap<String, String>();
            HashMap<String, Integer> FieldMap=null;
            if(onlyOutstanding){
                    HashMap<String, Object> fieldrequestParams = new HashMap();
                    fieldrequestParams.put(Constants.filter_names, Arrays.asList(Constants.companyid, Constants.moduleid,Constants.customcolumn,"customfield"));
                    fieldrequestParams.put(Constants.filter_values, Arrays.asList(companyid, Constants.Acc_Invoice_ModuleId,0,1));                 
                     FieldMap = accAccountDAOobj.getFieldParamsCustomMap(fieldrequestParams, replaceFieldMap, customFieldMap, customDateFieldMap);
            }
            if(isSalesCommissionStmt){                

                ArrayList filter_names = new ArrayList(), filter_params = new ArrayList();
                filter_names.add("company.companyID");
                filter_params.add(requestParams.get(Constants.companyKey));
                requestParams.put(Constants.filterNamesKey, filter_names);
                requestParams.put(Constants.filterParamsKey, filter_params);

                KwlReturnObject result = accCostCenterObj.getSalesCommission(requestParams);
                List<SalesCommission> salesCommissions = result.getEntityList();
                commission=salesCommissions.get(0).getCommission();               
                
            }
            String curDateString = "";
            Date curDate = null;
            boolean booleanAged = false;//Added for aged payable/receivable
            
            Calendar cal1 = Calendar.getInstance();
            Calendar cal2 = Calendar.getInstance();
            Calendar cal3 = Calendar.getInstance();
            Calendar cal4 = Calendar.getInstance();
            Calendar cal5 = Calendar.getInstance();
            Calendar cal6 = Calendar.getInstance();
            Calendar cal7 = Calendar.getInstance();
            
            if(requestParams.get("startdate") != null){//Added for aged payable/receivable
                curDateString = (String) requestParams.get("startdate");
                curDate = df.parse(curDateString);
                booleanAged = true;
                cal1.setTime(curDate);
                cal2.setTime(curDate);
                cal3.setTime(curDate);
                cal4.setTime(curDate);
                cal5.setTime(curDate);
                cal6.setTime(curDate);
                cal7.setTime(curDate);
                cal2.add(Calendar.DAY_OF_YEAR, -duration);
                cal3.add(Calendar.DAY_OF_YEAR, -(duration * 2));
                cal4.add(Calendar.DAY_OF_YEAR, -(duration * 3));
                cal5.add(Calendar.DAY_OF_YEAR, -(duration * 4));
                cal6.add(Calendar.DAY_OF_YEAR, -(duration * 5));
                cal7.add(Calendar.DAY_OF_YEAR, -(duration * 6));
            }
           
            double amountdue1 = 0;
            double amountWD = 0;
            Iterator itr = list.iterator();
            while (itr.hasNext()) {
                
                //Invoice invoice = (Invoice) itr.next();

                Object[] oj = (Object[])itr.next();                
                String invid = oj[0].toString();
                //Withoutinventory 0 for normal, 1 for billing
                boolean withoutinventory = Boolean.parseBoolean(oj[1].toString());
                {
                    amountdue1 = amountWD=0;
                    double taxPercent = 0;
                    KwlReturnObject objItr = accountingHandlerDAOobj.getObject(Invoice.class.getName(), invid);
                    Invoice invoice = (Invoice) objItr.getEntityList().get(0);
                    
                    Date invoiceCreationDate = invoice.getCreationDate();
                    Double externalCurrencyRate = 0d;
                    boolean isopeningBalanceInvoice = invoice.isIsOpeningBalenceInvoice();
                    Double invoiceOriginalAmount = 0d;
                    if(invoice.isIsOpeningBalenceInvoice() && !invoice.isNormalInvoice()){
                        ExchangeRateDetails erd = invoice.getExchangeRateDetail();
                        externalCurrencyRate = invoice.getExchangeRateForOpeningTransaction();
                        invoiceOriginalAmount = invoice.getOriginalOpeningBalanceAmount();
                    }
                    
                    JournalEntry je = null;
                    if(invoice.isNormalInvoice()){
                        je = invoice.getJournalEntry();
                        externalCurrencyRate = je.getExternalCurrencyRate();
                    }
                    
                    JournalEntryDetail d = null;
                    if(invoice.isNormalInvoice()){
                        d = invoice.getCustomerEntry();
                        invoiceOriginalAmount = d.getAmount();
                    }
                    
                    Account account = null;
                    if(invoice.isIsOpeningBalenceInvoice() && !invoice.isNormalInvoice()){
                        account = invoice.getCustomer().getAccount();
                    }else{
                        account = d.getAccount();
                    }
                    
                    String currencyid=(invoice.getCurrency()==null?currency.getCurrencyID(): invoice.getCurrency().getCurrencyID());
                    List ll = null;
                    if(invoice.isIsOpeningBalenceInvoice() && !invoice.isNormalInvoice()){
                        ll = new ArrayList();
                        ll.add(invoice.getOpeningBalanceAmountDue());
                        ll.add(0.0);
                        ll.add(0.0);
                    }else{
                        if(Constants.InvoiceAmountDueFlag) {
                            ll = accInvoiceCommon.getInvoiceDiscountAmountInfo(requestParams,invoice);
                        } else {
                            ll = accInvoiceCommon.getAmountDue_Discount(requestParams,invoice);
                    }
                    }
                    
                    double amountdue= (Double) ll.get(0);
                    double discountDeduct= (Double) ll.get(1);
                    amountWD= (Double) ll.get(2);
                    amountWD= amountWD - accInvoiceServiceDAO.getInvDisountOnAmt(invoice.getID().toString(), amountWD,withoutinventory);
                    if(onlyAmountDue&&authHandler.round(amountdue,companyid)==0)
                        continue;
                   int isReval=0; 
                    if(invoiceReport && !invoice.isIsOpeningBalenceInvoice()){
                        KwlReturnObject brdAmt = accInvoiceDAOobj.getRevalFlag(invoice.getID());
                        List reval = brdAmt.getEntityList();
                        if(!reval.isEmpty() && (Long)reval.get(0) >0){
                            isReval=1;
                        }
                    }
                    JSONObject obj = new JSONObject();
                    obj.put(Constants.billid, invoice.getID());
                    obj.put("isOpeningBalanceTransaction", invoice.isIsOpeningBalenceInvoice());
                    obj.put("isNormalTransaction", invoice.isNormalInvoice());
                    obj.put(Constants.companyKey, invoice.getCompany().getCompanyID());
                    obj.put("companyname", invoice.getCompany().getCompanyName());
                    obj.put("withoutinventory", withoutinventory);
                    obj.put("partialinv", invoice.isPartialinv());
                    obj.put("personid", invoice.getCustomer() == null ? account.getID() : invoice.getCustomer().getID());
                    obj.put("personemail", invoice.getCustomer() == null ? "" : invoice.getCustomer().getEmail());
                    obj.put("customername", invoice.getCustomer() == null ? "" : invoice.getCustomer().getName());
                    obj.put("accid", account.getID());
                    obj.put("billno", invoice.getInvoiceNumber()); 
                    obj.put(Constants.currencyKey,currencyid);
                    obj.put("currencyidval",authHandlerDAOObj.getCurrency(sessionHandlerImpl.getCurrencyID(request)));
                    obj.put("currencysymbol",(invoice.getCurrency()==null?currency.getSymbol(): invoice.getCurrency().getSymbol()));
                    obj.put("currencycode",(invoice.getCurrency()==null?currency.getCurrencyCode(): invoice.getCurrency().getCurrencyCode()));
                    obj.put("currencyname",(invoice.getCurrency()==null?currency.getName(): invoice.getCurrency().getName()));
                    obj.put("companyaddress", invoice.getCompany().getAddress());
                    obj.put("companyname", invoice.getCompany().getCompanyName());
                    obj.put("isfavourite", invoice.isFavourite());
                    obj.put("isprinted", invoice.isPrinted());
                    KwlReturnObject bAmt = accCurrencyDAOobj.getBaseToCurrencyAmount(requestParams, 1.0, currencyid, invoiceCreationDate, 0);
                    obj.put("oldcurrencyrate", (Double) bAmt.getEntityList().get(0));
                    obj.put("billto", invoice.getBillTo());
                    obj.put("shipto", invoice.getShipTo());
                    obj.put("journalentryid", (je != null?je.getID():""));
                    obj.put("porefno", invoice.getPoRefNumber());
                    obj.put("externalcurrencyrate", (je != null?je.getExternalCurrencyRate():externalCurrencyRate));
                    obj.put("entryno", (je != null?je.getEntryNumber():""));
                    obj.put("date", df.format(invoiceCreationDate));
                    obj.put("shipdate", invoice.getShipDate()==null? "" : df.format(invoice.getShipDate()));
                    obj.put("duedate", df.format(invoice.getDueDate()));
                    obj.put("personname", invoice.getCustomer()==null?account.getName():invoice.getCustomer().getName());
                    obj.put("salesPerson", invoice.getMasterSalesPerson()==null?"":invoice.getMasterSalesPerson().getID());
                    obj.put("memo", invoice.getMemo());
                    obj.put("termname",invoice.getCustomer()==null?"":((invoice.getCustomer().getCreditTerm()== null)?"":invoice.getCustomer().getCreditTerm().getTermname()));
                    obj.put("deleted", invoice.isDeleted());
                    obj.put("taxincluded", invoice.getTax() == null ? false : true);
                    obj.put("taxid", invoice.getTax() == null ? "" : invoice.getTax().getID());
                    obj.put("taxname", invoice.getTax() == null ? "" : invoice.getTax().getName());
                    obj.put("taxamount", invoice.getTaxEntry() == null ? 0 : invoice.getTaxEntry().getAmount());
                    obj.put("discount", invoice.getDiscount() == null ? 0 : invoice.getDiscount().getDiscountValue());
                    obj.put("ispercentdiscount", invoice.getDiscount()==null?false:invoice.getDiscount().isInPercent());
                    obj.put("discountval", invoice.getDiscount()==null?0:invoice.getDiscount().getDiscount());  
                    obj.put("shipvia", invoice.getShipvia()== null? "" : invoice.getShipvia());
                    obj.put("posttext", invoice.getPostText()== null? "" : invoice.getPostText());
                    obj.put("fob", invoice.getFob() == null?"":invoice.getFob());
                    obj.put("termdetails", accInvoiceServiceDAO.getTermDetails(invoice.getID()));
                    
                    BillingShippingAddresses addresses=invoice.getBillingShippingAddresses();
                    obj.put(Constants.BILLING_ADDRESS,addresses==null?(invoice.getBillTo()==null?"":invoice.getBillTo()):addresses.getBillingAddress());
                    obj.put(Constants.BILLING_CITY,addresses==null?"":addresses.getBillingCity());
                    obj.put(Constants.BILLING_CONTACT_PERSON,addresses==null?"":addresses.getBillingContactPerson());
                    obj.put(Constants.BILLING_CONTACT_PERSON_NUMBER,addresses==null?"":addresses.getBillingContactPersonNumber());
                    obj.put(Constants.BILLING_CONTACT_PERSON_DESIGNATION,addresses==null?"":addresses.getBillingContactPersonDesignation());
                    obj.put(Constants.BILLING_COUNTRY,addresses==null?"":addresses.getBillingCountry());
                    obj.put(Constants.BILLING_EMAIL,addresses==null?"":addresses.getBillingEmail());
                    obj.put(Constants.BILLING_FAX,addresses==null?"":addresses.getBillingFax());
                    obj.put(Constants.BILLING_MOBILE,addresses==null?"":addresses.getBillingMobile());
                    obj.put(Constants.BILLING_PHONE,addresses==null?"":addresses.getBillingPhone());
                    obj.put(Constants.BILLING_POSTAL,addresses==null?"":addresses.getBillingPostal());
                    obj.put(Constants.BILLING_STATE,addresses==null?"":addresses.getBillingState());
                    obj.put(Constants.BILLING_ADDRESS_TYPE,addresses==null?"":addresses.getBillingAddressType());
                    obj.put(Constants.SHIPPING_ADDRESS,addresses==null?(invoice.getShipTo()==null?"":invoice.getShipTo()):addresses.getShippingAddress());
                    obj.put(Constants.SHIPPING_CITY,addresses==null?"":addresses.getShippingCity());
                    obj.put(Constants.SHIPPING_CONTACT_PERSON,addresses==null?"":addresses.getShippingContactPerson());
                    obj.put(Constants.SHIPPING_CONTACT_PERSON_NUMBER,addresses==null?"":addresses.getShippingContactPersonNumber());
                    obj.put(Constants.SHIPPING_CONTACT_PERSON_DESIGNATION,addresses==null?"":addresses.getShippingContactPersonDesignation());
                    obj.put(Constants.SHIPPING_COUNTRY,addresses==null?"":addresses.getShippingCountry());
                    obj.put(Constants.SHIPPING_EMAIL,addresses==null?"":addresses.getShippingEmail());
                    obj.put(Constants.SHIPPING_FAX,addresses==null?"":addresses.getShippingFax());
                    obj.put(Constants.SHIPPING_MOBILE,addresses==null?"":addresses.getShippingMobile());
                    obj.put(Constants.SHIPPING_PHONE,addresses==null?"":addresses.getShippingPhone());
                    obj.put(Constants.SHIPPING_POSTAL,addresses==null?"":addresses.getShippingPostal());
                    obj.put(Constants.SHIPPING_STATE,addresses==null?"":addresses.getShippingState());
                    obj.put(Constants.SHIPPING_ADDRESS_TYPE,addresses==null?"":addresses.getShippingAddressType());
                        
                    if(invoiceReport){ obj.put("isreval", isReval);}
                    int pendingApprovalInt = invoice.getPendingapproval();
                    obj.put("approvalstatusint", pendingApprovalInt);
                    if (pendingApprovalInt == Constants.LEVEL_ONE) {
                        obj.put("approvalstatus", "Pending level 1 approval");
                    } else if (pendingApprovalInt == Constants.LEVEL_TWO) {
                        obj.put("approvalstatus", "Pending level 2 approval");
                    } else {
                        obj.put("approvalstatus", "");
                    }
                    
                    if (invoice.getTemplateid() == null) {
                          obj.put("templateid", "");
                          obj.put("templatename", "");
                      } else {
                          obj.put("templateid", invoice.getTemplateid().getTempid());
                          obj.put("templatename", invoice.getTemplateid().getTempname());
                    }
                    obj.put("costcenterid", (je != null?je.getCostcenter()==null?"":je.getCostcenter().getID():""));
                    obj.put("costcenterName", (je != null?je.getCostcenter()==null?"":je.getCostcenter().getName():""));
                    obj.put("archieve", 0);
                    obj.put("cashtransaction", invoice.isCashtransaction());
                     boolean includeprotax = false;
                    Set<InvoiceDetail> invoiceDetails = invoice.getRows();
                    for (InvoiceDetail invoiceDetail : invoiceDetails) {
                         if (invoiceDetail.getTax() != null) {
                              includeprotax = true;
                              break;
                          }
                    }
                    obj.put("includeprotax", includeprotax);
                    if(invoice.getModifiedby()!=null){
                        obj.put("lasteditedby",StringUtil.getFullName(invoice.getModifiedby()));
                    }
                    /*For Product search, add Products details from Invoice details*/

                    if(isProduct && invoice.isNormalInvoice()) {
                       String idvString = isProduct ? oj[4].toString() : ""; //as in list invoiedetail id comes 4th
                        KwlReturnObject objItrID = accountingHandlerDAOobj.getObject(InvoiceDetail.class.getName(), idvString);
                        InvoiceDetail idvObj = (InvoiceDetail) objItrID.getEntityList().get(0);

                        if(idvObj != null) {
                            obj.put("rowproductname", idvObj.getInventory().getProduct().getName());
                            obj.put("rowquantity", idvObj.getInventory().getQuantity());
                            obj.put("rowrate", idvObj.getRate()); 

                            Discount disc = idvObj.getDiscount();
                            if (disc != null && disc.isInPercent()) {
                                obj.put("rowprdiscount", disc.getDiscount()); //product discount in percent
                            } else {
                                obj.put("rowprdiscount", 0);
                            }
                            double rowTaxPercent = 0;
                            if (idvObj.getTax() != null) {
                                KwlReturnObject perresult = accTaxObj.getTaxPercent(companyid, invoice.getCreationDate(), idvObj.getTax().getID());
                                rowTaxPercent = (Double) perresult.getEntityList().get(0);
                            }
                            obj.put("rowprtaxpercent", rowTaxPercent);


                        }
                    }

                    if (invoice.isCashtransaction()) {
                        obj.put("amountdue", 0);
                        obj.put("amountdueinbase",0);
                        obj.put("incash", true);
                    } else {
                        if (isopeningBalanceInvoice && invoice.isConversionRateFromCurrencyToBase()) {// if invoice is opening balance invoice and Conversion rate is taken from user is Currency to base then following method will be called.
                            bAmt = accCurrencyDAOobj.getCurrencyToBaseAmountAccordingToCurrencyToBaseExchangeRate(requestParams, amountdue, currencyid, invoiceCreationDate, externalCurrencyRate);
                        } else {
                            bAmt = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, amountdue, currencyid, invoiceCreationDate, externalCurrencyRate);
                        }
                         obj.put("amountdueinbase", authHandler.round((Double) bAmt.getEntityList().get(0),companyid));
                         obj.put("amountdue", authHandler.round(amountdue,companyid));
                        if(booleanAged){
                            Date dueDate = null;
                                if (!StringUtil.isNullOrEmpty(df.format(invoice.getDueDate()))) {
                                    dueDate = df.parse(df.format(invoice.getDueDate()));
                                }
                            if(isSOA){
                                amountdue=authHandler.round((Double) bAmt.getEntityList().get(0),companyid);
                            }
                            if(datefilter==0)
                                 dueDate = df.parse(df.format(invoice.getDueDate()));
                            else 
                                 dueDate = df.parse(df.format(invoiceCreationDate)); 

                            for(int interVal =0; interVal < intervals; interVal++) {
                                cal1.setTime(curDate);
                                cal1.add(Calendar.DAY_OF_YEAR, duration*interVal);
                                
                                cal2.setTime(curDate);
                                cal2.add(Calendar.DAY_OF_YEAR, duration*(interVal+1));
                                
                                String cal1String = authHandler.getDateOnlyFormat().format(cal1.getTime());
                                Date cal1Date = authHandler.getDateOnlyFormat().parse(cal1String);

                                String cal2String = authHandler.getDateOnlyFormat().format(cal2.getTime());
                                Date cal2Date = authHandler.getDateOnlyFormat().parse(cal2String);
                                
                                if ((dueDate.after(cal1Date) && dueDate.before(cal2Date)) || dueDate.equals(cal1Date)) {
                                    amountdue1 = authHandler.round(amountdue, companyid);
                                    obj.put("amountdue"+interVal, amountdue1);
                                }
                            }
                            obj.put("type", "Sales Invoice");
                        }

                       // obj.put("amountdue", amountdue);
                    }
                    obj.put("deductDiscount", discountDeduct);
                    obj.put("amountduenonnegative", (amountdue <= 0) ? 0 : authHandler.round(amountdue,companyid));
                    obj.put("amount", invoiceOriginalAmount);   //actual invoice amount
                    if (isopeningBalanceInvoice && invoice.isConversionRateFromCurrencyToBase()) {// if invoice is opening balance invoice and Conversion rate is taken from user is Currency to base then following method will be called.
                        bAmt = accCurrencyDAOobj.getCurrencyToBaseAmountAccordingToCurrencyToBaseExchangeRate(requestParams, invoiceOriginalAmount, currencyid, invoiceCreationDate,externalCurrencyRate);
                    } else {
                        bAmt = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, invoiceOriginalAmount, currencyid, invoiceCreationDate,externalCurrencyRate);
                    }
                    double amountinbase=(Double)bAmt.getEntityList().get(0);
                    obj.put("amountinbase",authHandler.round(amountinbase,companyid) );

                    if (invoice.getTax() != null) {
                        KwlReturnObject perresult = accTaxObj.getTaxPercent(companyid, invoice.getCreationDate(), invoice.getTax().getID());
                        taxPercent = (Double) perresult.getEntityList().get(0);
                    }
                    obj.put("taxpercent", taxPercent);  //tax in percent applyind on invoice
                    try {
                        obj.put("creditDays", invoice.getTermid().getTermdays());
                    } catch(Exception ex) {
                        obj.put("creditDays", 0);
                    }
                    RepeatedInvoices repeatedInvoice = invoice.getRepeateInvoice();
                    obj.put("isRepeated", repeatedInvoice==null?false:true);
                    if(repeatedInvoice!=null){
                        obj.put("repeateid",repeatedInvoice.getId());
                        obj.put("interval",repeatedInvoice.getIntervalUnit());
                        obj.put("intervalType",repeatedInvoice.getIntervalType());
                        SimpleDateFormat sdf=new SimpleDateFormat("MMMM d, yyyy hh:mm:ss aa");
                        obj.put("startDate",sdf.format(repeatedInvoice.getStartDate()));
                        obj.put("nextDate",sdf.format(repeatedInvoice.getNextDate()));
                        obj.put("expireDate",repeatedInvoice.getExpireDate()==null?"":sdf.format(repeatedInvoice.getExpireDate()));
                        obj.put("advancedays", repeatedInvoice.getAdvanceNoofdays() == 0 ? 0 : repeatedInvoice.getAdvanceNoofdays());
                        obj.put("advanceDate", repeatedInvoice.getInvoiceAdvanceCreationDate() == null ? "" : sdf.format(repeatedInvoice.getInvoiceAdvanceCreationDate()));
                        requestParams.put("parentInvoiceId", invoice.getID());
                        KwlReturnObject details = accInvoiceDAOobj.getRepeateInvoicesDetails(requestParams);
                        List detailsList = details.getEntityList();
                        obj.put("childCount", detailsList.size());
                    }
                    if(onlyOutstanding && invoice.isNormalInvoice()){
                         Map<String, Object> variableMap = new HashMap<String, Object>();
                  HashMap<String, Object> invDetailRequestParams = new HashMap<String, Object>();
                    ArrayList Detailfilter_names = new ArrayList(),Detailfilter_params = new ArrayList();
                    Detailfilter_names.add(Constants.companyKey);
                    Detailfilter_params.add(invoice.getCompany().getCompanyID());
                    Detailfilter_names.add("journalentryId");
                    Detailfilter_params.add(invoice.getJournalEntry().getID());
                    Detailfilter_names.add("moduleId");
                    Detailfilter_params.add(Constants.Acc_Invoice_ModuleId+"");
                    invDetailRequestParams.put("filter_names", Detailfilter_names);
                    invDetailRequestParams.put("filter_params", Detailfilter_params);
                    KwlReturnObject idcustresult = accJournalEntryobj.getJournalEntryCustomData(invDetailRequestParams);
                    if(idcustresult.getEntityList().size()>0) {
                        AccJECustomData jeCustom = (AccJECustomData) idcustresult.getEntityList().get(0);
                        AccountingManager.setCustomColumnValues(jeCustom, FieldMap, replaceFieldMap,variableMap);
                        DateFormat defaulDateFormat=new SimpleDateFormat(Constants.MMMMdyyyy);
                        Date dateFromDB=null;
                        for (Entry<String, Object> varEntry : variableMap.entrySet()) {
                                 String coldata = varEntry.getValue().toString();
                                 if(customFieldMap.containsKey(varEntry.getKey())){
                                    FieldComboData fieldComboData = (FieldComboData) kwlCommonTablesDAOObj.getClassObject(FieldComboData.class.getName(), coldata);
                                   if(fieldComboData != null){
                                       obj.put(varEntry.getKey(), fieldComboData.getValue()!=null ?fieldComboData.getValue():"");
                                   }
                              }else if(customDateFieldMap.containsKey(varEntry.getKey())){
                                  DateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
                                  dateFromDB=defaulDateFormat.parse(coldata);
                                  coldata=sdf.format(dateFromDB);
                                  obj.put(varEntry.getKey(), coldata);
                              }else{
                                       if (!StringUtil.isNullOrEmpty(coldata)) {
                                        obj.put(varEntry.getKey(), coldata);
                                        }
                                   }
                            }
                    }
                    }
                if(isSalesCommissionStmt && !invoice.isIsOpeningBalenceInvoice()){
                        double remainingAmount=obj.getDouble("amountdue");
                        double invoiceAmount=obj.getDouble("amount");
                        double paidAmount=invoiceAmount-remainingAmount;
                        double difference=amountWD-paidAmount;
                        if(paidAmount==0){
                            obj.put("amountDueStatus","UnPaid");
                            obj.put("amountwithouttax",difference);
                            double commissionamount = difference*commission/100;
                            obj.put("commission",commissionamount);
                            
                            bAmt = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, difference, currencyid, invoiceCreationDate,je.getExternalCurrencyRate());
                            double differenceinbase=(Double)bAmt.getEntityList().get(0);
                            obj.put("amountwithouttaxinbase", authHandler.round(differenceinbase ,companyid));
                            
                            bAmt = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, commissionamount, currencyid, invoiceCreationDate,je.getExternalCurrencyRate());
                            commissionamount=(Double)bAmt.getEntityList().get(0);
                            obj.put("commissioninbase",commissionamount);
                            
                        }else if(difference>0){                            
                            JSONObject ab1 = new JSONObject(obj.toString());
                            ab1.put("amountDueStatus","UnPaid");                            
                            ab1.put("amountwithouttax",difference);                            
                            double commissionamount = difference*commission/100;
                            ab1.put("commission",commissionamount);
                            
                            bAmt = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, difference, currencyid, invoiceCreationDate,je.getExternalCurrencyRate());
                            double differenceinbase=(Double)bAmt.getEntityList().get(0);
                            ab1.put("amountwithouttaxinbase", authHandler.round(differenceinbase ,companyid));
                            
                            bAmt = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, commissionamount, currencyid, invoiceCreationDate,je.getExternalCurrencyRate());
                            commissionamount=(Double)bAmt.getEntityList().get(0);
                            ab1.put("commissioninbase",commissionamount);
                            jArr.put(ab1);                                                        
                            obj.put("amountDueStatus","Paid");                            
                            obj.put("amountwithouttax",paidAmount);                            
                            obj.put("commission",(paidAmount*commission/100));
                        }else{
                            obj.put("amountDueStatus","Paid");
                            obj.put("amountwithouttax",amountWD);
                            double commissionamount = amountWD*commission/100;
                            obj.put("commission",commissionamount);
                            
                            bAmt = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, amountWD, currencyid, invoiceCreationDate,je.getExternalCurrencyRate());
                            double amountWDinbase=(Double)bAmt.getEntityList().get(0);
                            obj.put("amountwithouttaxinbase", authHandler.round(amountWDinbase ,companyid));
                            
                            bAmt = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, commissionamount, currencyid, invoiceCreationDate,je.getExternalCurrencyRate());
                            commissionamount=(Double)bAmt.getEntityList().get(0);
                            obj.put("commissioninbase",commissionamount);
                        }                                                                                            
                    }  
                    if (!(ignoreZero && authHandler.round(amountdue,companyid) <= 0)) {
                        jArr.put(obj);
                    }
                }
                
                
            }
            tempArray.put(new JSONObject().put("persondata", jArr));
            if(!isExport) {
                SimpleDateFormat sdf = new SimpleDateFormat("dd-MM-yyyy");
                sdf.setTimeZone(TimeZone.getTimeZone("GMT"+sessionHandlerImpl.getTimeZoneDifference(request)));
                JSONArray columnNames = new JSONArray();
                for(int interVal =0; interVal < intervals;interVal++) {
                    cal1.setTime(curDate);
                    cal1.add(Calendar.DAY_OF_YEAR, duration*interVal);
            
                    cal2.setTime(curDate);
                    cal2.add(Calendar.DAY_OF_YEAR, duration*(interVal+1)-1);
                    JSONObject columnName = new JSONObject();
                    columnName.put("name","Week ("+sdf.format(cal1.getTime())+" - "+sdf.format(cal2.getTime())+")");
                    columnName.put("dataindex","amountdue"+interVal);
                    columnNames.put(columnName);
                }

                tempArray.put(new JSONObject().put("columns", columnNames));
            }
            if(request.getParameter("filename") != null){
            	if(request.getParameter("filename").equals("Aged Receivable")){
		            if(request.getParameter("filetype") != null){
			            if(request.getParameter("filetype").equals("print")){
			            	if(!request.getParameter("mode").equals("18")){
				            	double total = 0;
				            	for(int i = 0; i < jArr.length(); i++)
				            		total = total + (Double)jArr.getJSONObject(i).get("amountdueinbase");
				            	JSONObject obj1 = new JSONObject();
				            	obj1.put("amountdueinbase", total);
				            	obj1.put("billno", "Total Amount Due");
				            	tempArray.put(obj1);
			            	}
			            }
		            }
            	}
            }
        } catch (ParseException ex) {
            throw ServiceException.FAILURE("getInvoiceJson : "+ex.getMessage(), ex);
        } catch (JSONException ex) {
            throw ServiceException.FAILURE("getInvoiceJson : "+ex.getMessage(), ex);
        }
        return tempArray;
    }
    
    
    public ModelAndView isMaintenanceScheduleHasWorkerOrderLinkedWithIt(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        boolean issuccess = false;
        String msg = "";
        try {
            boolean isMaintenanceScheduleHasWorkerOrderLinkedWithIt  = isMaintenanceScheduleHasWorkerOrderLinkedWithIt(request);

            jobj.put("isMaintenanceScheduleHasWorkerOrderLinkedWithIt", isMaintenanceScheduleHasWorkerOrderLinkedWithIt);
            issuccess = true;

        } catch (Exception ex) {
            msg = "" + ex.getMessage();
            Logger.getLogger(accInvoiceController.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
        } finally {
            try {
                jobj.put("success", issuccess);
                jobj.put("msg", msg);
            } catch (JSONException ex) {
                Logger.getLogger(accInvoiceController.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
            }
        }
        return new ModelAndView(Constants.jsonView, "model", jobj.toString());

    }
    
    public boolean isMaintenanceScheduleHasWorkerOrderLinkedWithIt(HttpServletRequest request) throws SessionExpiredException, ServiceException {
        boolean isMaintenanceScheduleHasWorkerOrderLinkedWithIt = false;
        try {

            String companyId = sessionHandlerImpl.getCompanyid(request);

            String schedulerObjectId = request.getParameter("schedulerObjectId");


            KwlReturnObject scObj = accountingHandlerDAOobj.getObject(AssetMaintenanceSchedulerObject.class.getName(), schedulerObjectId);
            AssetMaintenanceSchedulerObject schedulerObject = (AssetMaintenanceSchedulerObject) scObj.getEntityList().get(0);

            if (!schedulerObject.getAssetMaintenanceSchedulers().isEmpty()) {
                Set<AssetMaintenanceScheduler> maintenanceSchedulers = schedulerObject.getAssetMaintenanceSchedulers();
                for (AssetMaintenanceScheduler maintenanceScheduler : maintenanceSchedulers) {
                    HashMap<String, Object> woMap = new HashMap<String, Object>();

                    woMap.put("scheduleId", maintenanceScheduler.getId());

                    woMap.put("companyId", companyId);

                    KwlReturnObject woResult = accProductObj.getAssetMaintenanceWorkOrders(woMap);

                    if (woResult != null && !woResult.getEntityList().isEmpty()) {
                        isMaintenanceScheduleHasWorkerOrderLinkedWithIt = true;
                    }
                }
            }

        } catch (ServiceException ex) {
            Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
            throw ServiceException.FAILURE("isMaintenanceScheduleHasWorkerOrderLinkedWithIt : " + ex.getMessage(), ex);
        }
        return isMaintenanceScheduleHasWorkerOrderLinkedWithIt;
    }
    
    
    public ModelAndView exportAssetMaintenanceWorkOrders(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        String view = "jsonView_ex";
        try {

            boolean isForExport = true;
            JSONArray DataJArr = getAssetMaintenanceWorkOrders(request);

            jobj.put(Constants.data, DataJArr);
            jobj.put("totalCount", DataJArr.length());

            String fileType = request.getParameter("filetype");
            if (StringUtil.equal(fileType, "print")) {
                String  GenerateDate = authHandler.getDateFormatter(request).format(new Date());
                jobj.put("GenerateDate", GenerateDate);
                view = "jsonView-empty";
            }
            exportDaoObj.processRequest(request, response, jobj);
        } catch (SessionExpiredException ex) {
            Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
        } catch (Exception ex) {
            Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
        }
        return new ModelAndView(view, "model", jobj.toString());
    }
    
    
    public ModelAndView getAssetMaintenanceWorkOrders(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        JSONArray DataJArr = new JSONArray();
        boolean issuccess = false;
        int count = 0;
        String msg = "";
        try {
            DataJArr = getAssetMaintenanceWorkOrders(request);

            jobj.put(Constants.data, DataJArr);
            jobj.put("count", DataJArr.length());
            issuccess = true;

        } catch (Exception ex) {
            msg = "" + ex.getMessage();
            Logger.getLogger(accInvoiceController.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
        } finally {
            try {
                jobj.put("success", issuccess);
                jobj.put("msg", msg);
            } catch (JSONException ex) {
                Logger.getLogger(accInvoiceController.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
            }
        }
        return new ModelAndView(Constants.jsonView, "model", jobj.toString());

    }
    
    public JSONArray getAssetMaintenanceWorkOrders(HttpServletRequest request) throws SessionExpiredException, ServiceException, ParseException {
        JSONArray returnArray = new JSONArray();
        try {

            DateFormat df = authHandler.getDateFormatter(request);

            String companyId = sessionHandlerImpl.getCompanyid(request);
            
            Date fromDate = null;
            Date toDate = null;
            
            HashMap<String, Object> dataMap = new HashMap<String, Object>();

            dataMap.put("companyId", companyId);
            dataMap.put(Constants.ss, request.getParameter(Constants.ss));
            
            if(!StringUtil.isNullOrEmpty(request.getParameter("fromDate")) && !StringUtil.isNullOrEmpty(request.getParameter("toDate"))){
                fromDate  = df.parse(request.getParameter("fromDate"));
                toDate  = df.parse(request.getParameter("toDate"));
                
                dataMap.put("fromDate", fromDate);
                dataMap.put("toDate", toDate);
            }

            String start = "0";
            String limit = "30";

            if (!StringUtil.isNullOrEmpty(request.getParameter(Constants.start)) && !StringUtil.isNullOrEmpty(request.getParameter(Constants.limit))) {
                start = request.getParameter(Constants.start);
                limit = request.getParameter(Constants.limit);
            }
            dataMap.put(Constants.start, start);
            dataMap.put(Constants.limit, limit);

            KwlReturnObject result = accProductObj.getAssetMaintenanceWorkOrders(dataMap);


            if (result != null && !result.getEntityList().isEmpty()) {
                List<AssetMaintenanceWorkOrder> workOrders = result.getEntityList();

                for (AssetMaintenanceWorkOrder workOrder : workOrders) {

                    JSONObject obj = new JSONObject();

                    obj.put("id", workOrder.getId());
                    obj.put("scheduleEventId", (workOrder.getAssetMaintenanceScheduler() != null) ? workOrder.getAssetMaintenanceScheduler().getId() : "");
                    obj.put("assetName", (workOrder.getAssetMaintenanceScheduler() != null) ? workOrder.getAssetMaintenanceScheduler().getAssetDetails().getAssetId() : "");
                    obj.put("assetGroupName", (workOrder.getAssetMaintenanceScheduler() != null) ? workOrder.getAssetMaintenanceScheduler().getAssetDetails().getProduct().getName() : "");
                    obj.put("startDate", (workOrder.getStartDate()!=null)?df.format(workOrder.getStartDate()):"");
                    obj.put("endDate", (workOrder.getEndDate()!=null)?df.format(workOrder.getEndDate()):"");
                    obj.put("billdate", df.format(workOrder.getWorkOrderDate()));
                    obj.put("workOrderNumber", workOrder.getWorkOrderNumber());
                    obj.put("assignedTo", (workOrder.getAssignedTo() != null) ? workOrder.getAssignedTo().getValue() : "");
                    obj.put("assignedToId", (workOrder.getAssignedTo() != null) ? workOrder.getAssignedTo().getID() : "");
                    obj.put(Constants.currencyKey, workOrder.getCurrency().getCurrencyID());
                    obj.put("currencysymbol", workOrder.getCurrency().getSymbol());
                    obj.put("remark", workOrder.getRemark());
                    //*** Attachments Documents SJ[ERP-16428] 
                    obj.put(Constants.billid, workOrder.getId());
                    HashMap<String, Object> hashMap = new HashMap<String, Object>();
                    hashMap.put("invoiceID", workOrder.getId());
                    hashMap.put(Constants.companyKey, workOrder.getCompany().getCompanyID());
                    KwlReturnObject object = accInvoiceDAOobj.getinvoiceDocuments(hashMap);
                    int attachemntcount = object.getRecordTotalCount();
                    obj.put("attachment", attachemntcount);
                    //*** Attachments Documents SJ[ERP-16428]
                    // calculating total amount

                    double totalAmount = 0d;

                    Set<AssetMaintenanceWorkOrderDetail> maintenanceWorkOrderDetails = workOrder.getMaintenanceWorkOrderDetails();

                    for (AssetMaintenanceWorkOrderDetail orderDetail : maintenanceWorkOrderDetails) {
                        double rate = authHandler.round(orderDetail.getRate(), companyId);
                        double quantity = authHandler.roundQuantity(orderDetail.getDeliveredQuantity(), companyId);

                        double price = authHandler.round(quantity * rate, companyId);

                        totalAmount += price;
                    }
                    obj.put("totalAmount", totalAmount);


                    returnArray.put(obj);
                }
            }
        } catch (JSONException ex) {
            Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
            throw ServiceException.FAILURE("getAssetMaintenanceWorkOrders : " + ex.getMessage(), ex);
        } catch (ServiceException ex) {
            Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
            throw ServiceException.FAILURE("getAssetMaintenanceWorkOrders : " + ex.getMessage(), ex);
        }

        return returnArray;
    }
    
    
    
    public ModelAndView getMaintenanceSchedule(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        JSONArray DataJArr = new JSONArray();
        boolean issuccess = false;
        int count = 0;
        String msg = "";
        try {
            DataJArr = getMaintenanceSchedule(request);

            jobj.put(Constants.data, DataJArr);
            jobj.put("count", DataJArr.length());
            issuccess = true;

        } catch (Exception ex) {
            msg = "" + ex.getMessage();
            Logger.getLogger(accInvoiceController.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
        } finally {
            try {
                jobj.put("success", issuccess);
                jobj.put("msg", msg);
            } catch (JSONException ex) {
                Logger.getLogger(accInvoiceController.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
            }
        }
        return new ModelAndView(Constants.jsonView, "model", jobj.toString());

    }

    public JSONArray getMaintenanceSchedule(HttpServletRequest request) throws SessionExpiredException, ServiceException {
        JSONArray returnArray = new JSONArray();
        try {

            DateFormat df = authHandler.getDateFormatter(request);

            String companyId = sessionHandlerImpl.getCompanyid(request);

            String assetId = request.getParameter("assetId");

            HashMap<String, Object> dataMap = new HashMap<String, Object>();

            dataMap.put("companyId", companyId);
            dataMap.put("assetId", assetId);
            
            dataMap.put(Constants.ss, request.getParameter(Constants.ss));

            String start = "0";
            String limit = "30";

            if (!StringUtil.isNullOrEmpty(request.getParameter(Constants.start)) && !StringUtil.isNullOrEmpty(request.getParameter(Constants.limit))) {
                start = request.getParameter(Constants.start);
                limit = request.getParameter(Constants.limit);
            }
            dataMap.put(Constants.start, start);
            dataMap.put(Constants.limit, limit);

            KwlReturnObject result = accInvoiceDAOobj.getMaintenanceSchedules(dataMap);

            if (!result.getEntityList().isEmpty()) {
                List<AssetMaintenanceSchedulerObject> schedulers = result.getEntityList();

                for (AssetMaintenanceSchedulerObject scheduler : schedulers) {

                    JSONObject obj = new JSONObject();

                    obj.put("scheduleId", scheduler.getId());
                    obj.put("scheduleNumber", scheduler.getScheduleName());
                    obj.put("assetDetailsId", scheduler.getAssetDetails().getId());
                    obj.put("scheduleStartDate", df.format(scheduler.getStartDate()));
                    obj.put("scheduleEndDate", (scheduler.getEndDate() != null)?df.format(scheduler.getEndDate()):"");
                    obj.put("totalEvents", scheduler.getTotalEvents());
                    obj.put("eventDuration", scheduler.getScheduleDuration());
                    obj.put("frequency", scheduler.getFrequency());
                    obj.put("frequencyType", scheduler.getFrequencyType());
                    obj.put("isAdhoc", scheduler.isAdHoc());
                    obj.put("scheduleStopCondition", scheduler.getScheduleStopCondition());
                    obj.put("type", scheduler.getMaintenanceType());
                    obj.put("maintenancetype", scheduler.getMaintenanceType()==1?"Regular":"Breakdown");
                    obj.put("isAdhoc", scheduler.isAdHoc());
                    
                    
                    if (scheduler.isAdHoc() && scheduler.getAssetMaintenanceSchedulers() != null) {
                        JSONArray adhocArray = new JSONArray();
                        Set<AssetMaintenanceScheduler> scheduleDetails = scheduler.getAssetMaintenanceSchedulers();
                        for (AssetMaintenanceScheduler details : scheduleDetails) {
                            JSONObject jobj = new JSONObject();
                            jobj.put("eventStartDate", (details.getStartDate() != null) ? df.format(details.getStartDate()) : "");
                            jobj.put("eventEndDate", (details.getEndDate() != null) ? df.format(details.getEndDate()) : "");

                            adhocArray.put(jobj);
                        }
                        obj.put("adHocEventDetails", adhocArray.toString());
                    }
//                    
//                    if(scheduler.getAdhocScheduleDetails() != null){
//                        JSONArray adhocArray = new JSONArray();
//                        Set<AssetMaintenanceAdhocScheduleDetails> scheduleDetails = scheduler.getAdhocScheduleDetails();
//                        for(AssetMaintenanceAdhocScheduleDetails details:scheduleDetails){
//                            JSONObject jobj = new JSONObject();
//                            jobj.put("eventStartDate", (details.getEventStartDate() != null)?df.format(details.getEventStartDate()):"");
//                            jobj.put("eventEndDate", (details.getEventEndDate() != null)?df.format(details.getEventEndDate()):"");
//                            
//                            adhocArray.put(jobj);
//                        }
//                        obj.put("adHocEventDetails", adhocArray.toString());
//                    }
                    

                    returnArray.put(obj);
                }
            }
        } catch (JSONException ex) {
            Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
            throw ServiceException.FAILURE("getMaintenanceSchedule : " + ex.getMessage(), ex);
        } catch (ServiceException ex) {
            Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
            throw ServiceException.FAILURE("getMaintenanceSchedule : " + ex.getMessage(), ex);
        }

        return returnArray;
    }
    
    
    public ModelAndView getAssetMaintenanceScheduleReport(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        JSONArray DataJArr = new JSONArray();
        boolean issuccess = false;
        int count = 0;
        String msg = "";
        try {
            jobj = getAssetMaintenanceScheduleReport(request);
   
//            jobj.put(Constants.data, DataJArr);
//            jobj.put("count", DataJArr.length());
            issuccess = true;
    
        } catch (Exception ex) {
            msg = "" + ex.getMessage();
            Logger.getLogger(accInvoiceController.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
        } finally {
            try {
                jobj.put("success", issuccess);
                jobj.put("msg", msg);
            } catch (JSONException ex) {
                Logger.getLogger(accInvoiceController.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
            }
        }
        return new ModelAndView(Constants.jsonView, "model", jobj.toString());
    
    }
        
    public ModelAndView exportAssetMaintenanceScheduleReport(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        JSONArray DataJArr = new JSONArray();
        String view = "jsonView_ex";
        try {
            jobj = getAssetMaintenanceScheduleReport(request);

            String fileType = request.getParameter("filetype");
            if (StringUtil.equal(fileType, "print")) {
                String GenerateDate = authHandler.getDateFormatter(request).format(new Date());
                jobj.put("GenerateDate", GenerateDate);
                view = "jsonView-empty";
            }
            exportDaoObj.processRequest(request, response, jobj);
        } catch (SessionExpiredException ex) {
            Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
        }
        return new ModelAndView(view, "model", jobj.toString());
    }
        
    public JSONObject getAssetMaintenanceScheduleReport(HttpServletRequest request) throws SessionExpiredException, ServiceException, ParseException {
        JSONArray returnArray = new JSONArray();
        JSONObject jobj=new JSONObject();
        try {

            DateFormat df = authHandler.getDateFormatter(request);
            /**
             * Above df gives the dateformat with timezone of company. As per
             * changes in ERP-31366 we don't want to adjust date according to
             * timezone. So we are using globaldf which will set only date
             * format, no timezone is added in dateformat.
             */
            DateFormat globaldf = authHandler.getGlobalDateFormat();

            String companyId = sessionHandlerImpl.getCompanyid(request);

            String assetId = request.getParameter("assetId");
            
            String scheduleId = request.getParameter("scheduleId");
            
            boolean isForSchedulerCreation = false;
            
            boolean isContract = false;
            
            if (!StringUtil.isNullOrEmpty(request.getParameter("isContract"))) {
                isContract = Boolean.parseBoolean(request.getParameter("isContract"));
            }
            
            if (assetId.equals("") && scheduleId.equals("") && isContract){
                return jobj.put(Constants.data, returnArray);
            }
            if (!StringUtil.isNullOrEmpty(request.getParameter("isFromCreateButton"))) {
                isForSchedulerCreation = Boolean.parseBoolean(request.getParameter("isFromCreateButton"));
            }

            HashMap<String, Object> dataMap = new HashMap<String, Object>();

            dataMap.put("companyId", companyId);
            
            if (!StringUtil.isNullOrEmpty(assetId)) {
                dataMap.put("assetId", assetId);
            }
            
            if(!StringUtil.isNullOrEmpty(scheduleId)){
                dataMap.put("scheduleId", scheduleId);
            }
            
            dataMap.put("isContract", isContract);
            
            Date fromDate = null;
            Date toDate = null;
            
            if(!StringUtil.isNullOrEmpty(request.getParameter("fromDate")) && !StringUtil.isNullOrEmpty(request.getParameter("toDate"))){
                fromDate  = df.parse(request.getParameter("fromDate"));
                toDate  = df.parse(request.getParameter("toDate"));
                
                dataMap.put("fromDate", fromDate);
                dataMap.put("toDate", toDate);
            }

            String start = "0";
            String limit = "30";

            if (!StringUtil.isNullOrEmpty(request.getParameter(Constants.start)) && !StringUtil.isNullOrEmpty(request.getParameter(Constants.limit))) {
                start = request.getParameter(Constants.start);
                limit = request.getParameter(Constants.limit);
            }
            dataMap.put(Constants.start, start);
            dataMap.put(Constants.limit, limit);
            
            dataMap.put(Constants.ss, request.getParameter(Constants.ss));

            KwlReturnObject result = null;
            
            if (!isForSchedulerCreation) {
                result = accInvoiceDAOobj.getAssetMaintenanceScheduleReport(dataMap);
            }
            int count=0;
            if (result!= null && !result.getEntityList().isEmpty()) {
                count=result.getRecordTotalCount();
                List<AssetMaintenanceScheduler> schedulers = result.getEntityList();

                for (AssetMaintenanceScheduler scheduler : schedulers) {

                    JSONObject obj = new JSONObject();
                    
                    obj.put("scheduleId", scheduler.getId());
                    obj.put("scheduleName", (scheduler.getAssetMaintenanceSchedulerObject()!=null)?scheduler.getAssetMaintenanceSchedulerObject().getScheduleName():"");
                    obj.put("assetDetailsId", (scheduler.getAssetDetails() != null)?scheduler.getAssetDetails().getId():"");
                    obj.put("assetName", (scheduler.getAssetDetails()!= null)?scheduler.getAssetDetails().getAssetId():"");
                    obj.put("assetGroupName", (scheduler.getAssetDetails() != null)?scheduler.getAssetDetails().getProduct().getName():"");
                    /**
                     * ERP-31366 
                     * Date get adjusted according to timezone of
                     * company due to which date gets changed. Code changes have been
                     * done such that date won't get adjusted according to timezone.
                     */
                    obj.put("startDate", globaldf.format(scheduler.getStartDate()));
                    obj.put("endDate", globaldf.format(scheduler.getEndDate()));
                    obj.put("actualStartDate",(scheduler.getActualStartDate() != null)? globaldf.format(scheduler.getActualStartDate()):"");
                    obj.put("actualEndDate", (scheduler.getActualEndDate() != null)? globaldf.format(scheduler.getActualEndDate()):"");
                    obj.put("workJobId", "");
                    obj.put("assignedTo", (scheduler.getAssignedTo()!=null)?scheduler.getAssignedTo().getID():"");
                    obj.put("assignedToName", (scheduler.getAssignedTo()!=null)?scheduler.getAssignedTo().getValue():"");
                    obj.put("status", (scheduler.getStatus()!=null)?scheduler.getStatus().getID():"");
                    obj.put("statusinfo", (scheduler.getStatus()!=null)?scheduler.getStatus().getValue():"");
                    obj.put("action", "action");
                    //*** Attachments Documents SJ[ERP-16428] 
                    obj.put(Constants.billid, scheduler.getId());
                    HashMap<String, Object> hashMap = new HashMap<String, Object>();
                    hashMap.put("invoiceID", scheduler.getId());
                    hashMap.put(Constants.companyKey, scheduler.getCompany().getCompanyID());
                    KwlReturnObject object = accInvoiceDAOobj.getinvoiceDocuments(hashMap);
                    int attachemntcount = object.getRecordTotalCount();
                    obj.put("attachment", attachemntcount);
                    //*** Attachments Documents SJ[ERP-16428]
                    // getting work order of schedule
                    
                    HashMap<String, Object> requestMap = new HashMap<String, Object>();
                    requestMap.put("companyId", companyId);
                    requestMap.put("scheduleId", scheduler.getId());
                    
                    KwlReturnObject woresult = accProductObj.getAssetMaintenanceWorkOrders(requestMap);
                    
                    if(woresult!=null && !woresult.getEntityList().isEmpty()){
                        AssetMaintenanceWorkOrder workOrder = (AssetMaintenanceWorkOrder) woresult.getEntityList().get(0);
                        obj.put("workOrderId", workOrder.getId());
                        obj.put("workJobId", workOrder.getWorkOrderNumber());
                        obj.put("assignedToId", (workOrder.getAssignedTo() != null)?workOrder.getAssignedTo().getID():"");
                        obj.put(Constants.currencyKey, (workOrder.getCurrency() !=null)?workOrder.getCurrency().getCurrencyID():"");
                        obj.put("billdate", (workOrder.getWorkOrderDate() != null)?df.format(workOrder.getWorkOrderDate()):"");
                        obj.put("remark", workOrder.getRemark());
                    }
                    
                    returnArray.put(obj);
                }
            }
            jobj.put(Constants.data, returnArray);
            jobj.put("totalCount", count);
        } catch (JSONException ex) {
            Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
            throw ServiceException.FAILURE("getAssetMaintenanceScheduleReport : " + ex.getMessage(), ex);
        } catch (ServiceException ex) {
            Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
            throw ServiceException.FAILURE("getAssetMaintenanceScheduleReport : " + ex.getMessage(), ex);
        }

        return jobj;
    }

    
    public ModelAndView getOpeningBalenceInvoices(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        JSONArray DataJArr = new JSONArray();
        boolean issuccess = false;
        int count=0;
        String msg = "";
        try {
            String[] companyids = sessionHandlerImpl.getCompanyid(request).split(",");
            String gcurrencyid = sessionHandlerImpl.getCurrencyID(request);
            HashMap requestParams = AccInvoiceServiceHandler.getInvoiceRequestMap(request);
            String dir = "";
            String sort = "";
            if (!StringUtil.isNullOrEmpty(request.getParameter("dir")) && !StringUtil.isNullOrEmpty(request.getParameter("sort"))) {
                dir = request.getParameter("dir");
                sort = request.getParameter("sort");
                requestParams.put("sort", sort);
                requestParams.put("dir", dir);
            }
            String customerId = request.getParameter("custVenId");
            String companyid = "";
            for (int cnt = 0; cnt < companyids.length; cnt++) {
                companyid = companyids[cnt];
                request.setAttribute(Constants.companyKey, companyid);
                request.setAttribute(Constants.globalCurrencyKey, gcurrencyid);
                requestParams.put(Constants.companyKey, companyid);
                requestParams.put(Constants.globalCurrencyKey, gcurrencyid);
                requestParams.put(Constants.customerid, customerId);
                requestParams.put("start", request.getParameter("start"));
                requestParams.put("limit", request.getParameter("limit"));
                KwlReturnObject result = accInvoiceDAOobj.getOpeningBalanceInvoices(requestParams);
                List<Invoice> list = result.getEntityList();
                count = result.getRecordTotalCount();
                DataJArr = getOpeningBalanceInvoiceJson(request, list, DataJArr);
            }
   
            JSONArray pagedJson = DataJArr;
            String start = request.getParameter("start");
            String limit = request.getParameter("limit");
            if (!StringUtil.isNullOrEmpty(start) && !StringUtil.isNullOrEmpty(limit)) {
                pagedJson = StringUtil.getPagedJSON(pagedJson, Integer.parseInt(start), Integer.parseInt(limit));
            }
    
            jobj.put(Constants.data, pagedJson);
            jobj.put("count", count);
            issuccess = true;
        } catch (Exception ex) {
            msg = "" + ex.getMessage();
            Logger.getLogger(accInvoiceController.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
        } finally {
            try {
                jobj.put("success", issuccess);
                jobj.put("msg", msg);
            } catch (JSONException ex) {
                Logger.getLogger(accInvoiceController.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
            }
        }
        return new ModelAndView(Constants.jsonView, "model", jobj.toString());
    }
    
    public JSONArray getOpeningBalanceInvoiceJson(HttpServletRequest request, List<Invoice> list, JSONArray dataArray) {
        try {
            String companyid = sessionHandlerImpl.getCompanyid(request);
            DateFormat df = authHandler.getDateOnlyFormat();
//            DecimalFormat decimalFormat = new DecimalFormat("#0.00");
            SimpleDateFormat sdf = (SimpleDateFormat) authHandler.getGlobalDateFormat();
            HashMap requestParams = AccInvoiceServiceHandler.getInvoiceRequestMap(request);
            boolean isForOpeningTransactionTab = request.getParameter("isForOpeningTransactionTab")!=null?Boolean.parseBoolean(request.getParameter("isForOpeningTransactionTab").toString()):false;
            for (Invoice invoice : list) {
                JSONObject invoiceJson = new JSONObject();
   
                double amountdue = 0;
                double invoiceOriginalAmount = 0;
                double exchangeRateForOtherCurrency = 0d;
                boolean isopeningBalanceInvoice = invoice.isIsOpeningBalenceInvoice();
                Date invoiceCreationDate = null;
                if(invoice.isNormalInvoice()){
//                    invoiceCreationDate = invoice.getJournalEntry().getEntryDate();
                    if(Constants.InvoiceAmountDueFlag) {
                        List ll = accInvoiceCommon.getInvoiceDiscountAmountInfo(requestParams,invoice);
                        amountdue= (Double) ll.get(0);
                    } else {
                        List ll = accInvoiceCommon.getAmountDue_Discount(requestParams,invoice);
                        amountdue= (Double) ll.get(0);
                    }
                    exchangeRateForOtherCurrency = invoice.getJournalEntry().getExternalCurrencyRate();
                    invoiceOriginalAmount = invoice.getCustomerEntry().getAmount();
                }else{
                    amountdue = invoice.getOpeningBalanceAmountDue();
                    invoiceOriginalAmount = invoice.getOriginalOpeningBalanceAmount();
                    exchangeRateForOtherCurrency = invoice.getExchangeRateForOpeningTransaction();
                }
                invoiceCreationDate = invoice.getCreationDate();
    
                String termId = "";
                if (invoice.getTermid() != null) {
                    termId = ((invoice.getTermid().getID()) == null) ? "" : invoice.getTermid().getID();
                } else {
                    termId = (invoice.getCustomer().getCreditTerm()) == null ? "" : invoice.getCustomer().getCreditTerm().getID();
                }
                
                int isReval=0; 
                KwlReturnObject brdAmt = accInvoiceDAOobj.getRevalFlag(invoice.getID());
                List reval = brdAmt.getEntityList();
                if(!reval.isEmpty() && (Long)reval.get(0) >0){
                    isReval=1;
                }
                invoiceJson.put("isreval", isReval);
                invoiceJson.put("transactionId", invoice.getID());
                invoiceJson.put("exchangeRateForOtherCurrency", exchangeRateForOtherCurrency);
                invoiceJson.put("isCurrencyToBaseExchangeRate", invoice.isConversionRateFromCurrencyToBase());
                invoiceJson.put("isNormalTransaction", invoice.isNormalInvoice());
                invoiceJson.put("transactionNo", invoice.getInvoiceNumber());
                invoiceJson.put("excludingGstAmount", authHandler.formattedAmount(invoice.getExcludingGstAmount(), companyid));
                invoiceJson.put("taxAmount",invoice.getTaxamount());
                invoiceJson.put("transactionAmount", authHandler.formattedAmount(invoiceOriginalAmount, companyid));
                invoiceJson.put("transactionDate", df.format(invoiceCreationDate));
                invoiceJson.put("currencysymbol",(invoice.getCurrency()==null?"": invoice.getCurrency().getSymbol()));
                invoiceJson.put(Constants.currencyKey,(invoice.getCurrency()==null?"": invoice.getCurrency().getCurrencyID()));
                invoiceJson.put("porefno",invoice.getPoRefNumber());
                invoiceJson.put("termdays",invoice.getCustomer()==null?"":((invoice.getCustomer().getCreditTerm())==null)?"":invoice.getCustomer().getCreditTerm().getTermdays());
                invoiceJson.put("termid",termId);
                invoiceJson.put("salesPerson",invoice.getMasterSalesPerson()==null?"":invoice.getMasterSalesPerson().getID());
                invoiceJson.put("dueDate",df.format(invoice.getDueDate()));
                invoiceJson.put("poRefDate",invoice.getPoRefDate()!=null?df.format(invoice.getPoRefDate()):null);
                invoiceJson.put("memo",!StringUtil.isNullOrEmpty(invoice.getMemo())?invoice.getMemo():"");
               
                invoiceJson.put("transactionAmountDue", authHandler.formattedAmount(amountdue, companyid));
                
                if (isForOpeningTransactionTab) {
                    //Invoice can be written off and recovered multiple times. Below logic is to check whether invoice is written off and recovered or not
                    HashMap<String, Object> writeOffMap = new HashMap<String, Object>();
                    boolean isWrittenOff = false;
                    boolean isRecovered = false;
                    JSONObject obj = IsInvoiceRecovered(invoice.getID(), invoice.getCompany().getCompanyID());
                    isWrittenOff = obj.optBoolean("isWrittenOff");
                    isRecovered = obj.optBoolean("isRecovered");
                    invoiceJson.put("isWrittenOff", isWrittenOff);
                    invoiceJson.put("isRecovered", isRecovered);
                }
                KwlReturnObject bAmt = null;
                double transactionAmountInBase=0d;
                if (Constants.OpeningBalanceBaseAmountFlag) {
                    transactionAmountInBase = invoice.getOriginalOpeningBalanceBaseAmount();
                } else {
                if (isopeningBalanceInvoice && invoice.isConversionRateFromCurrencyToBase()) {// if invoice is opening balance invoice and Conversion rate is taken from user is Currency to base then following method will be called.
                    bAmt = accCurrencyDAOobj.getCurrencyToBaseAmountAccordingToCurrencyToBaseExchangeRate(requestParams, invoiceOriginalAmount, invoice.getCurrency().getCurrencyID(), invoiceCreationDate, exchangeRateForOtherCurrency);
                } else {
                    bAmt = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, invoiceOriginalAmount, invoice.getCurrency().getCurrencyID(), invoiceCreationDate, exchangeRateForOtherCurrency);
                }
                    transactionAmountInBase = (Double) bAmt.getEntityList().get(0);
                }
                invoiceJson.put("transactionAmountInBase", authHandler.formattedAmount(transactionAmountInBase, companyid));
                /*
                 * Check if invoice is claimed as bad debt
                 */
                if(invoice.getClaimAmountDue() != 0){
                    invoiceJson.put("isClaimedTransaction", true);
                } 
                dataArray.put(invoiceJson);
            }
        } catch (ServiceException ex) {
            Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
        } catch (SessionExpiredException ex) {
            Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
        } catch (JSONException ex) {
            Logger.getLogger(accInvoiceController.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
        }
        return dataArray;
    }
    
    public ModelAndView getSalesByCustomer(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        boolean issuccess = false;
        String msg = "";
        try{
            JSONObject paramJobj = StringUtil.convertRequestToJsonObject(request);
            
            HashMap requestParams = AccInvoiceServiceHandler.getInvoiceRequestMap(request);
            String companyid=sessionHandlerImpl.getCompanyid(request);
            String userid=sessionHandlerImpl.getUserid(request);
            String salesPersonid = request.getParameter("salesPersonid");
            boolean isSalesByProductReport= StringUtil.isNullOrEmpty(request.getParameter("isSalesByProductReport"))?false:Boolean.parseBoolean(request.getParameter("isSalesByProductReport"));
            boolean isSalesBysalesPerosnReport= StringUtil.isNullOrEmpty(request.getParameter("isSalesBysalesPerosnReport"))?false:Boolean.parseBoolean(request.getParameter("isSalesBysalesPerosnReport"));
            int srCount=0;
            String start = request.getParameter("start");
            String limit = request.getParameter("limit");
            requestParams.put("start", start);
            requestParams.put("limit", limit);
            requestParams.put("isSalesByProductReport", isSalesByProductReport);
            requestParams.put("isSalesBysalesPerosnReport", isSalesBysalesPerosnReport);
            requestParams.put("userid",userid);
            ExtraCompanyPreferences extraPref = (ExtraCompanyPreferences) kwlCommonTablesDAOObj.getClassObject("com.krawler.common.admin.ExtraCompanyPreferences", companyid);
            if (extraPref != null && extraPref.isEnablesalespersonAgentFlow()) {
                int permCode = sessionHandlerImpl.getPerms(request, Constants.CUSTOMER_PERMCODE);
                if (!((permCode & Constants.CUSTOMER_VIEWALL_PERMCODE) == Constants.CUSTOMER_VIEWALL_PERMCODE)) {
                    /*
                     * when (permCode & Constants.CUSTOMER_VIEWALL_PERMCODE) == Constants.CUSTOMER_VIEWALL_PERMCODE is true then user has permission to view all customers documents,so at that time there is need to filter record according to user&salesperson. 
                     */
                    String userId = userid;
                    requestParams.put(Constants.useridKey, userId);
                    requestParams.put("enablesalespersonagentflow", extraPref.isEnablesalespersonAgentFlow());
                }
                Map<String, Object> salesPersonParams = new HashMap<>();
                if (!StringUtil.isNullOrEmpty(salesPersonid)) {
                    requestParams.put("salesPersonid", salesPersonid);
                } else {
                    salesPersonParams.put(Constants.useridKey, userid);
                    salesPersonParams.put(Constants.companyKey, companyid);
                    salesPersonParams.put("grID", "15");
                    KwlReturnObject masterItemByUserList = accountingHandlerDAOobj.getMasterItemByUserID(salesPersonParams);
                    List<MasterItem> masterItems = masterItemByUserList.getEntityList();
                    String salesPersons = "";
                    StringBuffer salesPersonids = new StringBuffer();
                    for (Object obj : masterItems) {
                        if (obj != null) {
                            salesPersonids.append(obj.toString() + ",");
                        }
                    }
                    if (salesPersonids.length() > 0) {
                        salesPersons = salesPersonids.substring(0, (salesPersonids.length() - 1));
                        requestParams.put("salesPersonid", salesPersons);
                    }
                }
            }
            KwlReturnObject result = accInvoiceDAOobj.getSalesByCustomer(requestParams);
            List list = result.getEntityList();
            int count = result.getRecordTotalCount();
//            JSONArray DataJArr = new JSONArray();
            JSONObject jObj = accInvoiceServiceDAO.getSalesByCustomerJson(paramJobj, list,false);
            JSONArray DataJArr  = jObj.getJSONArray("data");
    
//            int count = DataJArr.length();
//            JSONArray pagedJson = DataJArr;
//            if (!StringUtil.isNullOrEmpty(start) && !StringUtil.isNullOrEmpty(limit) && isSalesByProductReport) {
//                srCount = accInvoiceDAOobj.getTotalSalesReturnDetailsCountByInvoiceDetails(companyid);
//                pagedJson = StringUtil.getPagedJSON(pagedJson, Integer.parseInt(start), Integer.parseInt(limit));
//            }
//            if(isSalesByProductReport){
//                jobj.put("data", pagedJson);
//            }else{
//               
//            }
                jobj.put("data", DataJArr);
            jobj.put("count", count);
            issuccess = true;
        } catch (Exception ex){
            msg = ""+ex.getMessage();
            Logger.getLogger(accInvoiceController.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                jobj.put("success", issuccess);
                jobj.put("msg", msg);
            } catch (JSONException ex) {
                Logger.getLogger(accInvoiceController.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return new ModelAndView(Constants.jsonView, "model", jobj.toString());
    }

    public ModelAndView exportGetSalesByCustomer(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        String view = "jsonView_ex";
        try{
            JSONObject paramJobj = StringUtil.convertRequestToJsonObject(request);
            HashMap requestParams = AccInvoiceServiceHandler.getInvoiceRequestMap(request);
            String companyid=sessionHandlerImpl.getCompanyid(request);
            String userid=sessionHandlerImpl.getUserid(request);
            String salesPersonid = request.getParameter("salesPersonid");
            boolean isSalesByProductReport= StringUtil.isNullOrEmpty(request.getParameter("isSalesByProductReport"))?false:Boolean.parseBoolean(request.getParameter("isSalesByProductReport"));
            boolean isSalesBysalesPerosnReport= StringUtil.isNullOrEmpty(request.getParameter("isSalesBysalesPerosnReport"))?false:Boolean.parseBoolean(request.getParameter("isSalesBysalesPerosnReport"));
            requestParams.put("isSalesByProductReport", isSalesByProductReport);
            requestParams.put("isSalesBysalesPerosnReport", isSalesBysalesPerosnReport);
            requestParams.put("userid",userid);
            ExtraCompanyPreferences extraPref = (ExtraCompanyPreferences) kwlCommonTablesDAOObj.getClassObject("com.krawler.common.admin.ExtraCompanyPreferences", companyid);
            if (extraPref != null && extraPref.isEnablesalespersonAgentFlow()) {
                int permCode = sessionHandlerImpl.getPerms(request, Constants.CUSTOMER_PERMCODE);
                if (!((permCode & Constants.CUSTOMER_VIEWALL_PERMCODE) == Constants.CUSTOMER_VIEWALL_PERMCODE)) {
                    /*
                     * when (permCode & Constants.CUSTOMER_VIEWALL_PERMCODE) == Constants.CUSTOMER_VIEWALL_PERMCODE is true then user has permission to view all customers documents,so at that time there is need to filter record according to user&salesperson. 
                     */
                    String userId = userid;
                    requestParams.put(Constants.useridKey, userId);
                    requestParams.put("enablesalespersonagentflow", extraPref.isEnablesalespersonAgentFlow());
                }
                Map<String, Object> salesPersonParams = new HashMap<>();
                if (!StringUtil.isNullOrEmpty(salesPersonid)) {
                    requestParams.put("salesPersonid", salesPersonid);
                } else {
                    salesPersonParams.put(Constants.useridKey, userid);
                    salesPersonParams.put(Constants.companyKey, companyid);
                    salesPersonParams.put("grID", "15");
                    KwlReturnObject masterItemByUserList = accountingHandlerDAOobj.getMasterItemByUserID(salesPersonParams);
                    List<MasterItem> masterItems = masterItemByUserList.getEntityList();
                    String salesPersons = "";
                    StringBuffer salesPersonids = new StringBuffer();
                    for (Object obj : masterItems) {
                        if (obj != null) {
                            salesPersonids.append(obj.toString() + ",");
                        }
                    }
                    if (salesPersonids.length() > 0) {
                        salesPersons = salesPersonids.substring(0, (salesPersonids.length() - 1));
                        requestParams.put("salesPersonid", salesPersons);
                    }
                }
            }
            KwlReturnObject result = accInvoiceDAOobj.getSalesByCustomer(requestParams);
            
            paramJobj.put(Constants.isExport, true);
            
            jobj = accInvoiceServiceDAO.getSalesByCustomerJson(paramJobj, result.getEntityList(),false);
            String fileType = request.getParameter("filetype");
            if (StringUtil.equal(fileType, "print")) {
                String  GenerateDate = authHandler.getDateFormatter(request).format(new Date());
                jobj.put("GenerateDate", GenerateDate);
                view = "jsonView-empty";
            }
            exportDaoObj.processRequest(request, response, jobj);
        } catch (SessionExpiredException ex) {
            Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
        } catch(Exception ex) {
            Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
        }
        return new ModelAndView(view, "model", jobj.toString());
    }
    
    public ModelAndView exportCustomerRevenue(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        String view = "jsonView_ex";
        try{
            HashMap requestParams = AccInvoiceServiceHandler.getInvoiceRequestMap(request);
            KwlReturnObject result = accInvoiceDAOobj.getCustomerRevenue(requestParams);
            request.setAttribute(Constants.isExport,true);
            jobj = getCustomerRevenueJson(request, result.getEntityList());
            String fileType = request.getParameter("filetype");
            if (StringUtil.equal(fileType, "print")) {
                String  GenerateDate = authHandler.getDateFormatter(request).format(new Date());
                jobj.put("GenerateDate", GenerateDate);
                view = "jsonView-empty";
            }
            exportDaoObj.processRequest(request, response, jobj);
        } catch (SessionExpiredException ex) {
            Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
        } catch(Exception ex) {
            Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
        }
        return new ModelAndView(view, "model", jobj.toString());
    }
   
 public ModelAndView getCustomerRevenue(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        boolean issuccess = false;
        String msg = "";
        try{
            HashMap requestParams = AccInvoiceServiceHandler.getInvoiceRequestMap(request);
            if(!StringUtil.isNullOrEmpty(request.getParameter(Constants.Acc_Search_Json))){
                requestParams.put("isfixedassetinvoice", 0);
                requestParams.put("isconsignment", false);
                requestParams.put("isfixedassetleaseinvoice", 0);
                requestParams.put(Constants.moduleid, !StringUtil.isNullOrEmpty(request.getParameter(Constants.moduleid)) ? Integer.parseInt(request.getParameter(Constants.moduleid)) : null);
                String Searchjson = request.getParameter(Constants.Acc_Search_Json);
                JSONObject jobject = new JSONObject(Searchjson);
                JSONArray customFieldArray=jobject.getJSONArray(Constants.root);
                customFieldArray=StringUtil.getCustomFieldSearchArray(customFieldArray);
                int cnt = customFieldArray.length();
                for (int i = 0; i < cnt; i++) {
                    JSONObject jobj1 = customFieldArray.getJSONObject(i);
                    if(!StringUtil.isNullOrEmpty(jobj1.getString(Constants.moduleid))){
                        if(Constants.Acc_FixedAssets_DisposalInvoice_ModuleId==Integer.parseInt(jobj1.getString(Constants.moduleid))){
                            requestParams.remove("isfixedassetinvoice");
                            requestParams.put("isfixedassetinvoice", 1);
                            break;
                        }
                        if(Constants.Acc_ConsignmentInvoice_ModuleId==Integer.parseInt(jobj1.getString(Constants.moduleid))){
                            requestParams.remove("isconsignment");
                            requestParams.put("isconsignment", true);
                            break;
                        }
                        if(Constants.LEASE_INVOICE_MODULEID==Integer.parseInt(jobj1.getString(Constants.moduleid))){
                            requestParams.remove("isfixedassetleaseinvoice");
                            requestParams.put("isfixedassetleaseinvoice", 1);
                            break;
                        }
                    }
                }
            }
                
            KwlReturnObject result = accInvoiceDAOobj.getCustomerRevenue(requestParams);
            List list = result.getEntityList();
            JSONArray DataJArr = new JSONArray();
            DataJArr = getCustomerRevenueJson(request, list).getJSONArray(Constants.data);
    
            int count = DataJArr.length();
            JSONArray pagedJson = DataJArr;
            String start = request.getParameter("start");
            String limit = request.getParameter("limit");
            if (!StringUtil.isNullOrEmpty(start) && !StringUtil.isNullOrEmpty(limit)) {
                pagedJson = StringUtil.getPagedJSON(pagedJson, Integer.parseInt(start), Integer.parseInt(limit));
            }
 
            jobj.put(Constants.data, pagedJson);
            jobj.put("count", count);
            issuccess = true;
        } catch (Exception ex){
            msg = ""+ex.getMessage();
            Logger.getLogger(accInvoiceController.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                jobj.put("success", issuccess);
                jobj.put("msg", msg);
            } catch (JSONException ex) {
                Logger.getLogger(accInvoiceController.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return new ModelAndView(Constants.jsonView, "model", jobj.toString());
    }
    
    
        public JSONObject getCustomerRevenueJson(HttpServletRequest request, List list) throws SessionExpiredException, ServiceException {
        JSONObject jobj = new JSONObject();
        JSONArray jArr = new JSONArray();
        try {
            HashMap requestParams = AccInvoiceServiceHandler.getInvoiceRequestMap(request);
            DateFormat df = authHandler.getDateOnlyFormat();
            String companyid = sessionHandlerImpl.getCompanyid(request);
            boolean isExport = request.getAttribute(Constants.isExport)==null?false:true;
            double invtaxamount = 0;
            String preCustomerId = "";
            KwlReturnObject cap = accountingHandlerDAOobj.getObject(CompanyAccountPreferences.class.getName(), companyid);
            KwlReturnObject curresult = accountingHandlerDAOobj.getObject(KWLCurrency.class.getName(), sessionHandlerImpl.getCurrencyID(request));
            KWLCurrency currency = (KWLCurrency) curresult.getEntityList().get(0);
            CompanyAccountPreferences pref = (CompanyAccountPreferences) cap.getEntityList().get(0);
            String cashAccount = pref.getCashAccount().getID();
            JSONObject totalCustAmtJson = new JSONObject(); /// Used For Export Customer Total
            Iterator itr = list.iterator();
             KwlReturnObject resultCustColumn=null;
            while (itr.hasNext()) {
                Object[] oj = (Object[]) itr.next();
                String invid = oj[0].toString();

                KwlReturnObject objItr = accountingHandlerDAOobj.getObject(Invoice.class.getName(), invid);
                Invoice invoice = (Invoice) objItr.getEntityList().get(0);
                HashMap<String, Object> requestParamsForCustColumn = new HashMap<String, Object>();
                  requestParamsForCustColumn.put(Constants.filter_names, Arrays.asList(Constants.companyid, Constants.moduleid,Constants.customcolumn));
                 requestParamsForCustColumn.put(Constants.filter_values, Arrays.asList(invoice.getCompany().getCompanyID(), Constants.Acc_Invoice_ModuleId,0));
                 resultCustColumn = accAccountDAOobj.getFieldParams(requestParamsForCustColumn);
                 List lst = resultCustColumn.getEntityList();
                JournalEntry je = invoice.getJournalEntry();
                String currencyid = (invoice.getCurrency() == null ? currency.getCurrencyID() : invoice.getCurrency().getCurrencyID());
                String customerID = (invoice.getCustomer().getID() == null ?"":invoice.getCustomer().getID());

                JSONObject obj = new JSONObject();
                
                obj.put(Constants.billid, invoice.getID());
                obj.put("mergedCategoryData", invoice.getCustomer() == null ? "" : invoice.getCustomer().getName());
                obj.put("categoryName", "Grand");
                obj.put("customername", invoice.getCustomer() == null ? "" : invoice.getCustomer().getName());
                obj.put("personid", invoice.getCustomer().getID() == null ? "" : invoice.getCustomer().getName());
                obj.put("personname", invoice.getCustomer() == null ? "" : invoice.getCustomer().getName());
                obj.put("duedate", df.format(invoice.getDueDate()));
                obj.put("termname", invoice.getCustomer() == null ? "" : ((invoice.getCustomer().getCreditTerm()) == null) ? "" : invoice.getCustomer().getCreditTerm().getTermname());
                obj.put(Constants.customerid, invoice.getCustomer() == null ? "" : invoice.getCustomer().getID());
                obj.put("billno", invoice.getInvoiceNumber());
                obj.put("fixedAssetLeaseInvoice", invoice.isFixedAssetLeaseInvoice());
                obj.put(Constants.currencyKey, currencyid);
                obj.put("currencysymbol", (invoice.getCurrency() == null ? currency.getSymbol() : invoice.getCurrency().getSymbol()));
                obj.put("currencycode", (invoice.getCurrency() == null ? currency.getCurrencyCode() : invoice.getCurrency().getCurrencyCode()));
//                KwlReturnObject bAmt = accCurrencyDAOobj.getBaseToCurrencyAmount(requestParams, 1.0, currencyid, je.getEntryDate(), 0);
                KwlReturnObject bAmt = accCurrencyDAOobj.getBaseToCurrencyAmount(requestParams, 1.0, currencyid, invoice.getCreationDate(), 0);
                obj.put("oldcurrencyrate", (Double) bAmt.getEntityList().get(0));
//                obj.put("date", df.format(je.getEntryDate()));
                obj.put("date", df.format(invoice.getCreationDate()));
                JournalEntryDetail d = invoice.getCustomerEntry();
                Account account = d.getAccount();
                if (account.getID().equals(cashAccount)) {
                    obj.put("incash", true);
                } else {
                    obj.put("incash", false);
                }
               
                        double amount =invoice.getCustomerEntry().getAmount(); 
                        obj.put("amount", new BigDecimal(amount).toString());  // Converted Exponential amount value into Decimal. This change done for PTC Indonesia
                        invtaxamount=invtaxamount+amount;
                        obj.put("invamt",  new BigDecimal(amount).toString());
                        obj.put("totalinvamt", 1);
//                        double amountInBase = (Double)accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams,amount,currencyid,invoice.getJournalEntry().getEntryDate(),invoice.getExternalCurrencyRate()).getEntityList().get(0);
                        double amountInBase = (Double)accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams,amount,currencyid,invoice.getCreationDate(),invoice.getExternalCurrencyRate()).getEntityList().get(0);
                            obj.put("amountinbase", new BigDecimal(amountInBase).toString());
                            obj.put("invtaxamount", new BigDecimal(amountInBase).toString());
               
                if (isExport) {
                    double tempAmt = 0;
                    tempAmt = totalCustAmtJson.optDouble(customerID, 0) + amountInBase;
                    totalCustAmtJson.put(customerID, tempAmt);
                    if (!preCustomerId.equals(customerID) && !preCustomerId.isEmpty()) { // Insert Toatl Object For Previous customer
                        JSONObject jobjtemp = new JSONObject();
                        jobjtemp.put("date", "Total");
                        jobjtemp.put("amountinbase", totalCustAmtJson.optDouble(preCustomerId, 0));
                        jArr.put(jobjtemp);
                    }
                }
                jArr.put(obj);
                  preCustomerId = customerID;
            }
            
            if (isExport) { // Insert The Total For Last Customer
                JSONObject jobjtemp = new JSONObject();
                jobjtemp.put("date", "Total");
                jobjtemp.put("amountinbase", totalCustAmtJson.optDouble(preCustomerId, 0));
                jArr.put(jobjtemp);
            }
             
            String jsonArray = jArr.toString();
            jsonArray = jsonArray.replace("\"invtaxamount\":1", "\"invtaxamount\":" + new BigDecimal(invtaxamount).toString() + "");
            jsonArray = jsonArray.replace("\"totalinvamt\":1", "\"totalinvamt\":" + new BigDecimal(invtaxamount).toString() + "");
            jobj.put(Constants.data, new JSONArray(jsonArray));
        } catch (JSONException ex) {
            throw ServiceException.FAILURE("getInvoiceJson : " + ex.getMessage(), ex);
        }
        return jobj;
    }
        
    public ModelAndView getDeliveryOrdersMerged(HttpServletRequest request, HttpServletResponse response) throws SessionExpiredException, JSONException {
        JSONObject jobj = new JSONObject();
        String view = Constants.jsonView;
        JSONObject paramJobj = StringUtil.convertRequestToJsonObject(request);
        int permCode = sessionHandlerImpl.getPerms(request, Constants.CUSTOMER_PERMCODE);
        paramJobj.put("permCode", permCode);
        if(StringUtil.equalIgnoreCase(paramJobj.optString(Constants.CHART_TYPE, ""), Constants.PIE_CHART) && paramJobj.optBoolean("isUnInvoiced", false)) {
            jobj=accInvoiceServiceDAO.getUnprintedDeliveryOrdersChartJSON(paramJobj);
        } else {
            jobj=accInvoiceServiceDAO.getDeliveryOrdersMerged(paramJobj);
        }
        return new ModelAndView(view, "model", jobj.toString());
    }
    
    public ModelAndView getSalesReturn(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj=new JSONObject();
        String msg = "";
        boolean issuccess = false;
        try {
            JSONObject paramJobj=StringUtil.convertRequestToJsonObject(request);
            HashMap<String, Object> requestParams = accInvoiceServiceDAO.getDeliveryOrdersMapJSON(paramJobj);
            boolean consolidateFlag = paramJobj.optString("consolidateFlag",null)!=null?Boolean.parseBoolean(paramJobj.getString("consolidateFlag")):false;            
            String companyid = (consolidateFlag && paramJobj.optString(Constants.companyids,null)!=null)?paramJobj.getString(Constants.companyids):paramJobj.getString(Constants.companyKey);
            String gcurrencyid = (consolidateFlag && paramJobj.optString(Constants.globalCurrencyKey,null)!=null)?paramJobj.getString(Constants.globalCurrencyKey):paramJobj.getString(Constants.globalCurrencyKey);                        
            String moduleid = StringUtil.isNullOrEmpty(paramJobj.optString(Constants.moduleid,null)) ? "" : paramJobj.getString(Constants.moduleid); 
            requestParams.put(Constants.moduleid, moduleid);
            requestParams.put(Constants.companyKey, companyid);
            requestParams.put(Constants.globalCurrencyKey, gcurrencyid);
            ExtraCompanyPreferences extraPref = (ExtraCompanyPreferences) kwlCommonTablesDAOObj.getClassObject("com.krawler.common.admin.ExtraCompanyPreferences", sessionHandlerImpl.getCompanyid(request));
            if (extraPref != null && extraPref.isEnablesalespersonAgentFlow()) {
                int permCode = sessionHandlerImpl.getPerms(request, Constants.CUSTOMER_PERMCODE);
                if (!((permCode & Constants.CUSTOMER_VIEWALL_PERMCODE) == Constants.CUSTOMER_VIEWALL_PERMCODE)) {
                    /*
                     * when (permCode & Constants.CUSTOMER_VIEWALL_PERMCODE) == Constants.CUSTOMER_VIEWALL_PERMCODE is true then user has permission to view all customers documents,so at that time there is need to filter record according to user&salesperson. 
                     */
                    String userId = sessionHandlerImpl.getUserid(request);
                    requestParams.put(Constants.useridKey , userId);
                    requestParams.put("enablesalespersonagentflow", extraPref.isEnablesalespersonAgentFlow());
                }
                 Map<String, Object> salesPersonParams = new HashMap<>();

                salesPersonParams.put(Constants.useridKey , paramJobj.getString(Constants.useridKey));
                salesPersonParams.put(Constants.companyKey, paramJobj.getString(Constants.companyKey));
                salesPersonParams.put("grID", "15");
                KwlReturnObject masterItemByUserList = accountingHandlerDAOobj.getMasterItemByUserID(salesPersonParams);
                List<MasterItem> masterItems = masterItemByUserList.getEntityList();
                String salesPersons = "";
                StringBuffer salesPersonids = new StringBuffer();
                for (Object obj : masterItems) {
                    if (obj != null) {
                        salesPersonids.append(obj.toString() + ",");
                    }
                }
                if (salesPersonids.length() > 0) {
                    salesPersons = salesPersonids.substring(0, (salesPersonids.length() - 1));
                    requestParams.put("salesPersonid", salesPersons);
               }
            }
            boolean isSalesReturnCreditNote = false;
            
            if(!StringUtil.isNullOrEmpty(paramJobj.optString("isNoteReturns",null))) {
                isSalesReturnCreditNote = Boolean.parseBoolean(paramJobj.getString("isNoteReturns"));
            }
            
            requestParams.put("isSalesReturnCreditNote", isSalesReturnCreditNote);
            
            if(!StringUtil.isNullOrEmpty(paramJobj.optString("searchJson",null)))
            {
                requestParams.put("searchJson", paramJobj.optString("searchJson",null));
                requestParams.put(Constants.moduleid, paramJobj.optString(Constants.moduleid));
                requestParams.put("filterConjuctionCriteria", paramJobj.optString("filterConjuctionCriteria"));
            }
            if(!StringUtil.isNullOrEmpty(paramJobj.optString("linknumber",null))){
                requestParams.put("linknumber", paramJobj.getString("linknumber"));
            }
             String dir = "";
            String sort = "";
             if(!StringUtil.isNullOrEmpty(paramJobj.optString("dir",null)) && !StringUtil.isNullOrEmpty(paramJobj.optString("sort",null))){
                dir = paramJobj.getString("dir");
                 sort = paramJobj.getString("sort");
                   requestParams.put("sort", sort);
                requestParams.put("dir", dir);
            }
                
            KwlReturnObject result = accInvoiceDAOobj.getSalesReturn(requestParams);
            JSONArray jarr = accInvoiceServiceDAO.getSalesReturnJson(paramJobj, result.getEntityList());            
            jobj.put(Constants.data, jarr);
            jobj.put("count", result.getRecordTotalCount());
            issuccess = true;
        } catch (Exception ex) {
            msg = "" + ex.getMessage();
            Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                jobj.put("success", issuccess);
                jobj.put("msg", msg);
            } catch (JSONException ex) {
                Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return new ModelAndView(Constants.jsonView, "model", jobj.toString());
    }
    
    public ModelAndView getAssetMaintenanceWorkOrderRows(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        String msg = "";
        boolean issuccess = false;
        try {

            jobj = getAssetMaintenanceWorkOrderRows(request);
            issuccess = true;
        } catch (SessionExpiredException ex) {
            msg = ex.getMessage();
            Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ServiceException ex) {
            msg = "accInvoiceControllerCMN.getAssetMaintenanceWorkOrderRows:" + ex.getMessage();
            Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            msg = "accInvoiceControllerCMN.getAssetMaintenanceWorkOrderRows:" + ex.getMessage();
            Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                jobj.put("success", issuccess);
                jobj.put("msg", msg);
            } catch (JSONException ex) {
                Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return new ModelAndView(Constants.jsonView, "model", jobj.toString());
    }
        
    public ModelAndView getWorkOrderRows(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        String msg = "";
        boolean issuccess = false;
        try {
            HashMap fieldMap = new HashMap();
            String companyid = "";
            companyid = sessionHandlerImpl.getCompanyid(request);
            boolean isFixedAsset = Boolean.FALSE.parseBoolean(request.getParameter(Constants.isFixedAsset));
            boolean isConsignment = Boolean.FALSE.parseBoolean(request.getParameter(Constants.isConsignment));
            boolean isLeaseFixedAsset = (!StringUtil.isNullOrEmpty(request.getParameter(Constants.isLeaseFixedAsset))) ? Boolean.parseBoolean(request.getParameter(Constants.isLeaseFixedAsset)) : false;
            Map reqParam = new HashMap();
            reqParam.put("companyid", companyid);
            reqParam.put("isFixedAsset", isFixedAsset);
            reqParam.put("isConsignment", isConsignment);
            reqParam.put("isLeaseFixedAsset", isLeaseFixedAsset);
            fieldMap = accInvoiceServiceDAO.getDODetailsCustomFieldMap(reqParam);
            jobj = accInvoiceServiceDAO.getDeliveryOrderRows(request, fieldMap);
            issuccess = true;
        } catch (SessionExpiredException ex) {
            msg = ex.getMessage();
            Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ServiceException ex) {
            msg = "accSalesOrderController.getSalesOrderRows:" + ex.getMessage();
            Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            msg = "accSalesOrderController.getSalesOrderRows:" + ex.getMessage();
            Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                jobj.put("success", issuccess);
                jobj.put("msg", msg);
            } catch (JSONException ex) {
                Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return new ModelAndView(Constants.jsonView, "model", jobj.toString());
    }
        
        public ModelAndView getDeliveryOrderRows(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj=new JSONObject();
        String msg = "";
        boolean issuccess = false;
        HashMap fieldMap = new HashMap();
        String companyid= "";
        try {
             companyid = sessionHandlerImpl.getCompanyid(request);
            boolean isFixedAsset = Boolean.FALSE.parseBoolean(request.getParameter(Constants.isFixedAsset));
            boolean isConsignment = Boolean.FALSE.parseBoolean(request.getParameter(Constants.isConsignment));
            boolean isLeaseFixedAsset = (!StringUtil.isNullOrEmpty(request.getParameter(Constants.isLeaseFixedAsset))) ? Boolean.parseBoolean(request.getParameter(Constants.isLeaseFixedAsset)) : false;
            Map reqParam = new HashMap();
            reqParam.put("companyid", companyid);
            reqParam.put("isFixedAsset", isFixedAsset);
            reqParam.put("isConsignment", isConsignment);
            reqParam.put("isLeaseFixedAsset", isLeaseFixedAsset);
            fieldMap = accInvoiceServiceDAO.getDODetailsCustomFieldMap(reqParam);
            boolean packingDOList=request.getParameter("packingDOList")!=null?(Boolean.parseBoolean(request.getParameter("packingDOList"))):false;
            boolean shippingDOList = request.getParameter("shippingDOList") != null ? (Boolean.parseBoolean(request.getParameter("shippingDOList"))) : false;
            /**
             * If request for Shipping DO
             */
            if (shippingDOList) {
                JSONObject reqParams = new JSONObject();
                reqParams = StringUtil.convertRequestToJsonObject(request);
                jobj = accInvoiceServiceDAO.getDeliveryOrderRowsForShippingDoList(reqParams);
            /**
             * If request for Packing DO
             */    
            } else if (packingDOList) {
                jobj = getDeliveryOrderRowsForPackingDoList(request);
            } else {
                jobj = accInvoiceServiceDAO.getDeliveryOrderRows(request, fieldMap);
            }
            issuccess = true;
        } catch (SessionExpiredException | ParseException ex) {
            msg = ex.getMessage();
            Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ServiceException ex) {
            msg = "accSalesOrderController.getSalesOrderRows:" + ex.getMessage();
            Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            msg = "accSalesOrderController.getSalesOrderRows:" + ex.getMessage();
            Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                jobj.put("success", issuccess);
                jobj.put("msg", msg);
            } catch (JSONException ex) {
                Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return new ModelAndView(Constants.jsonView, "model", jobj.toString());
    }
    public ModelAndView getNewSerialsForConsignmentReturn(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        boolean issuccess = false;
        String msg = "";
        try {
            DateFormat df = authHandler.getDateFormatter(request);
            JSONArray jArr = new JSONArray();
            String doId = request.getParameter(Constants.billid);
            String batchId = request.getParameter("batch");
            
            String productId = request.getParameter("productid");
            KwlReturnObject orderDtlResult = accMasterItemsDAOobj.getDeliveryOrderDetails(doId, productId);
            List<DeliveryOrderDetail> dodtlList = orderDtlResult.getEntityList();
            if (dodtlList.size() > 0) {
                for (DeliveryOrderDetail doDtlObj : dodtlList) {
                    KwlReturnObject serialResult = accMasterItemsDAOobj.getNewSerialsForConsignmentReturn(doDtlObj.getID(),batchId);
                    List<SerialDocumentMapping> doList = serialResult.getEntityList();
                    for (SerialDocumentMapping serialNo : doList) {
                        JSONObject obj = new JSONObject();
                        NewBatchSerial batchSerial = serialNo.getSerialid();
                        obj.put("id", batchSerial.getId());
                        obj.put("serialno", batchSerial.getSerialname());
                        obj.put("serialnoid", batchSerial.getId());
                        obj.put("expstart", batchSerial.getExpfromdate() != null ? df.format(batchSerial.getExpfromdate()) : "");
                        obj.put("expend", batchSerial.getExptodate() != null ? df.format(batchSerial.getExptodate()) : "");
                        obj.put("purchaseserialid", batchSerial.getId());
                        obj.put("purchasebatchid", (batchSerial.getBatch() != null) ? batchSerial.getBatch().getId() : "");
                        obj.put("skufield", batchSerial.getSkufield());
                        jArr.put(obj);
                    }
                    jobj.put(Constants.data, jArr);
                    issuccess = true;
                }
            }
        } catch (ServiceException ex) {
            msg = ex.getMessage();
            Logger.getLogger(accMasterItemsController.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            msg = "accMasterItemsController.getNewSerials : " + ex.getMessage();
            Logger.getLogger(accMasterItemsController.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                jobj.put("success", issuccess);
                jobj.put("msg", msg);
            } catch (JSONException ex) {
                Logger.getLogger(accMasterItemsController.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return new ModelAndView(Constants.jsonView, "model", jobj.toString());
    }

    public ModelAndView getNewBatchForConsignmentReturn(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        boolean issuccess = false;
        String msg = "";
        try {
            DateFormat df = authHandler.getDateFormatter(request);
            JSONArray jArr = new JSONArray();
            String doId = request.getParameter(Constants.billid);
            String productId = request.getParameter("productid");
            KwlReturnObject orderDtlResult = accMasterItemsDAOobj.getDeliveryOrderDetails(doId, productId);
            List<DeliveryOrderDetail> dodtlList = orderDtlResult.getEntityList();
            if (dodtlList.size() > 0) {
                for (DeliveryOrderDetail doDtlObj : dodtlList) {
                    KwlReturnObject serialResult = accMasterItemsDAOobj.getNewBatchForConsignmentReturn(doDtlObj.getID());
                    List<LocationBatchDocumentMapping> doList = serialResult.getEntityList();
                    for (LocationBatchDocumentMapping batchNo : doList) {
                        NewProductBatch productBatch = batchNo.getBatchmapid();
                        JSONObject obj = new JSONObject();
                        obj.put("id", productBatch.getId());
                        obj.put("batch", productBatch.getId());
                        obj.put("name", productBatch.getBatchname());
                        obj.put("batchname", productBatch.getBatchname());
                        obj.put("mfgdate", productBatch.getMfgdate() != null ? df.format(productBatch.getMfgdate()) : "");
                        obj.put("expdate", productBatch.getExpdate() != null ? df.format(productBatch.getExpdate()) : "");
                        obj.put("warehouse", productBatch.getWarehouse() != null ? productBatch.getWarehouse().getId() : "");
                        obj.put("location", productBatch.getLocation() != null ? productBatch.getLocation().getId() : "");
                        jArr.put(obj);
                    }
                    jobj.put(Constants.data, jArr);
                    issuccess = true;
                }
            }
        } catch (ServiceException ex) {
            msg = ex.getMessage();
            Logger.getLogger(accMasterItemsController.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            msg = "accMasterItemsController.getNewSerials : " + ex.getMessage();
            Logger.getLogger(accMasterItemsController.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                jobj.put("success", issuccess);
                jobj.put("msg", msg);
            } catch (JSONException ex) {
                Logger.getLogger(accMasterItemsController.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return new ModelAndView(Constants.jsonView, "model", jobj.toString());
    }

    public JSONObject getDeliveryOrderRowsForPackingDoList(HttpServletRequest request) throws SessionExpiredException, ServiceException {  //, HashMap<String, Integer> fieldMap
          JSONObject jobj=new JSONObject();
        try {
            HashMap<String,Object> requestParams = new HashMap<String, Object>();
            requestParams.put(Constants.companyKey, sessionHandlerImpl.getCompanyid(request));
            String companyid=sessionHandlerImpl.getCompanyid(request);
            DateFormat df = authHandler.getDateOnlyFormat();
            boolean isForReport = false;
            String dtype = request.getParameter("dtype");
            if(!StringUtil.isNullOrEmpty(dtype) && dtype.equals("report")){
                isForReport = true;
            }
            requestParams.put(Constants.globalCurrencyKey, sessionHandlerImpl.getCurrencyID(request));
            boolean closeflag = request.getParameter("closeflag")!=null?true:false;
            boolean srflag = request.getParameter("srflag")!=null?true:false;
            boolean linkingFlag = (StringUtil.isNullOrEmpty(request.getParameter("linkingFlag")))?false:Boolean.parseBoolean(request.getParameter("linkingFlag"));
            boolean isFixedAssetDO=false;  
            boolean isBatchSerial=false;  
            boolean isBatch=false;
            boolean isSerial=false;
            boolean isBatchForProduct=false;
            boolean isSerialForProduct=false;
            double dopackedqty=0;
            String[] sos=(String[])request.getParameter("bills").split(",");
            int i=0;
            JSONArray jArr=new JSONArray();
            int addobj = 1;
            
            HashMap<String, Object> fieldrequestParams = new HashMap();
            fieldrequestParams.put(Constants.filter_names, Arrays.asList(Constants.companyid, Constants.moduleid,Constants.customcolumn));
            fieldrequestParams.put(Constants.filter_values, Arrays.asList(sessionHandlerImpl.getCompanyid(request), Constants.Acc_Delivery_Order_ModuleId,1));
            HashMap<String, String> replaceFieldMap = new HashMap<String, String>();
            HashMap<String, String> customFieldMap = new HashMap<String, String>();
            HashMap<String, String> customDateFieldMap = new HashMap<String, String>();
            HashMap<String, Integer> fieldMap = accAccountDAOobj.getFieldParamsCustomMapForRows(fieldrequestParams, replaceFieldMap, customFieldMap, customDateFieldMap);
            KwlReturnObject cap = accountingHandlerDAOobj.getObject(CompanyAccountPreferences.class.getName(), companyid);
            CompanyAccountPreferences preferences = (CompanyAccountPreferences) cap.getEntityList().get(0);
            HashMap<String, Object> doRequestParams = new HashMap<String, Object>();
            ArrayList filter_names = new ArrayList(),filter_params = new ArrayList(), order_by = new ArrayList(), order_type = new ArrayList();
            filter_names.add("deliveryOrder.ID");
            order_by.add("srno");
            order_type.add("asc");
            doRequestParams.put("filter_names", filter_names);
            doRequestParams.put("filter_params", filter_params);
            doRequestParams.put("order_by", order_by);
            doRequestParams.put("order_type", order_type);
            JSONObject productObj=new JSONObject();
            Map<String, JSONObject> productObjMap = new HashMap<>();
            while (sos != null && i < sos.length) {
                KwlReturnObject result = accountingHandlerDAOobj.getObject(DeliveryOrder.class.getName(), sos[i]);
                DeliveryOrder dorder = (DeliveryOrder) result.getEntityList().get(0);
                filter_params.clear();
                filter_params.add(dorder.getID());
                KwlReturnObject podresult = accInvoiceDAOobj.getDeliveryOrderDetails(doRequestParams);
                List<DeliveryOrderDetail> resultList = podresult.getEntityList();
                for (DeliveryOrderDetail row : resultList) {
                    if (row.getProduct() != null && (row.getProduct().getProducttype().getID().equals(Constants.SERVICE)||row.getProduct().getProducttype().getID().equals(Constants.NON_INVENTORY_PART))) {
                        continue;
                    }
                    /*
                     Get the previously packed  quantity for DO to compare with the current packing quantity
                     */
                        dopackedqty = accInvoiceDAOobj.getDOPackedQuantity(row.getID());
                        double deliveredQuantity = row.getDeliveredQuantity();
                    if(deliveredQuantity !=dopackedqty)
                    {

                            JSONObject obj = new JSONObject();
                    if(productObjMap.containsKey(row.getProduct().getID()) && productObjMap.get(row.getProduct().getID())!=null){
                        obj=productObjMap.get(row.getProduct().getID());
                                double quantity = row.getDeliveredQuantity();
                        if(closeflag){  
                                    if (srflag) {
                                        quantity = accInvoiceServiceDAO.getDeliveryOrderDetailStatusFORSR(row);
                                    } else {
                                        quantity = accInvoiceServiceDAO.getDeliveryOrderDetailStatus(row);
                                    }
                                }
                         obj.put("dquantity",obj.getDouble("dquantity")+quantity);
                            } else {
                                obj.put(Constants.billid, dorder.getID());
                                obj.put("billno", dorder.getDeliveryOrderNumber());
                                obj.put("srno", row.getSrno());
                                obj.put("rowid", row.getID());
                                obj.put("originalTransactionRowid", row.getID());
                                obj.put("productid", row.getProduct().getID());
                                obj.put("productname", row.getProduct().getName());
                                obj.put("productweight", row.getProduct().getProductweight());
                                obj.put("invstore", (StringUtil.isNullOrEmpty(row.getInvstoreid())) ? "" : row.getInvstoreid());
                                obj.put("invlocation", (StringUtil.isNullOrEmpty(row.getInvlocid())) ? "" : row.getInvlocid());
                                obj.put("isAsset", row.getProduct().isAsset());
                                obj.put("unitname", row.getInventory().getUom() != null ? row.getInventory().getUom().getNameEmptyforNA() : row.getProduct().getUnitOfMeasure() == null ? "" : row.getProduct().getUnitOfMeasure().getNameEmptyforNA());
                                obj.put("desc", StringUtil.isNullOrEmpty(row.getDescription()) ? row.getProduct().getDescription() : row.getDescription());
                                obj.put("type", row.getProduct().getProducttype() == null ? "" : row.getProduct().getProducttype().getName());
                                obj.put("pid", row.getProduct().getProductid());
                                obj.put("memo", row.getRemark());
                                obj.put("quantity", row.getDeliveredQuantity());
                        obj.put("shipquantity", deliveredQuantity-dopackedqty);

                                if (!StringUtil.isNullOrEmpty(row.getProduct().getID())) {
                                    KwlReturnObject prodresult = accProductObj.getObject(Product.class.getName(), row.getProduct().getID());
                                    Product product = (Product) prodresult.getEntityList().get(0);
                                    isBatchForProduct = product.isIsBatchForProduct();
                                    isSerialForProduct = product.isIsSerialForProduct();
                                }
                                if (preferences.isIsBatchCompulsory() || preferences.isIsSerialCompulsory()) {  //check if company level option is on then only we will check productt level
                                    if (isBatchForProduct || isSerialForProduct) {
                                        obj.put("batchdetails", (row.getBatch() == null) ? "" : getBatchJson(row.getBatch(), isFixedAssetDO, preferences.isIsBatchCompulsory(), isBatchForProduct, preferences.isIsSerialCompulsory(), isSerialForProduct, request, -1));// ModuleID is sent -1 because in function getBatchJson , only sales return is having entries in different table(ReturnBatchMapping)
                                    }
                                }
                                /**
                         * If QC approval Flow for Delivery Order is activated
                         * then get the quantity from IST present in DeliveryDetailInterStoreLocationMapping.
                                 */
                                if (preferences.isQaApprovalFlowInDO()) {
                                    JSONObject params = new JSONObject();
                                    params.put("dodetailid", row.getID());
                                    params.put("transactionUsingQC", true);
                                    List<DeliveryDetailInterStoreLocationMapping> list = accInvoiceDAOobj.getDeliveryDetailInterStoreLocationMappingList(params);
                                    if (!list.isEmpty()) {
                                        double dQuantity = 0;
                                        for (DeliveryDetailInterStoreLocationMapping deliveryDetailInterStoreLocationMapping : list) {
                                            dQuantity += deliveryDetailInterStoreLocationMapping.getInterStoreTransferRequest().getAcceptedQty();
                                        }
                                        deliveredQuantity = dQuantity;
                                    }
                                }
                                obj.put("dquantity", deliveredQuantity);

                       
                                String dodid = row.getID();
                                if (!StringUtil.isNullOrEmpty(dodid)) {
                                    Map<String, Object> map = new HashMap();
                                    map.put("dodid", dodid);
                                    double packedqty = 0d;
                                    KwlReturnObject kwlReturnObject = accInvoiceDAOobj.getShippingQty(map);
                                    double shipqty = 0d;
                                    List<DeliveryDetailInterStoreLocationMapping> deliveryDetailInterStoreLocationMappings = kwlReturnObject.getEntityList();
                                    for (DeliveryDetailInterStoreLocationMapping deliveryDetailInterStoreLocationMapping : deliveryDetailInterStoreLocationMappings) {
                                        shipqty = shipqty + deliveryDetailInterStoreLocationMapping.getShippedQty();
                                    }

                                    shipqty = Math.abs(shipqty);
                                    /*
                                     If user directly ships some quantity first without packing then do not allow him to pack any quantity and directly ship the remaining
                                     */
                                    if (shipqty > dopackedqty && shipqty != 0 && packedqty == 0) {

                                        obj.put("isdirectshipped", true);
                                    } else {
                                        obj.put("isdirectshipped", false);
                                    }

                                }

                                obj.put("packedqty", dopackedqty);

                        
                                double baseuomrate = row.getInventory().getBaseuomrate();
                                if (row.getInventory().getUom() != null) {
                                    obj.put("uomid", row.getInventory().getUom().getID());
                                } else {
                                    obj.put("uomid", row.getInventory().getProduct().getUnitOfMeasure() != null ? row.getInventory().getProduct().getUnitOfMeasure().getID() : "");
                                }
                        obj.put("baseuomquantity", authHandler.calculateBaseUOMQuatity(deliveredQuantity,baseuomrate, companyid));
                                obj.put("baseuomrate", baseuomrate);

                                obj.put("copyquantity", deliveredQuantity);
                                obj.put("description", StringUtil.isNullOrEmpty(row.getDescription()) ? row.getProduct().getDescription() : row.getDescription());
                                obj.put("partno", (row.getPartno() != null) ? row.getPartno() : "");
                                obj.put("remark", row.getRemark());
                                obj.put("discountispercent", 1);
                                obj.put("prdiscount", 0);
                                obj.put("rate", row.getRate());
                                HashMap<String, Object> fieldrequestParamsProduct = new HashMap();
                                Map<String, Object> variableMapProduct = new HashMap<String, Object>();
                                fieldrequestParamsProduct.put(Constants.filter_names, Arrays.asList(Constants.companyid, Constants.moduleid, Constants.customcolumn));
                                fieldrequestParamsProduct.put(Constants.filter_values, Arrays.asList(sessionHandlerImpl.getCompanyid(request), Constants.Acc_Product_Master_ModuleId, 0));
                                HashMap<String, String> replaceFieldMapProduct = new HashMap<String, String>();
                                HashMap<String, Integer> FieldMapProduct = accAccountDAOobj.getFieldParamsMap(fieldrequestParamsProduct, replaceFieldMapProduct);
                                KwlReturnObject resultProduct = accountingHandlerDAOobj.getObject(AccProductCustomData.class.getName(), row.getProduct().getID());
                                AccProductCustomData objProduct = (AccProductCustomData) resultProduct.getEntityList().get(0);
                                if (objProduct != null) {
                                    productHandler.setCustomColumnValuesForProduct(objProduct, FieldMapProduct, replaceFieldMapProduct, variableMapProduct);
                                    for (Map.Entry<String, Object> varEntry : variableMapProduct.entrySet()) {
                                        String coldata = varEntry.getValue().toString();
                                        if (!StringUtil.isNullOrEmpty(coldata)) {
                                            obj.put(varEntry.getKey(), coldata);
                                            obj.put("key", varEntry.getKey());
                                        }
                                    }
                                }

                                if (dorder.isFixedAssetDO() || dorder.isLeaseDO()) {
                                    isBatchSerial = preferences.isShowprodserial();  //to get the optioof serial no and batch is on or not
                                    accInvoiceServiceDAO.getASsetDetailsJson(row, companyid, obj, df, preferences, request, null);
                                }

                                Map<String, Object> variableMap = new HashMap<String, Object>();
                                DeliveryOrderDetailCustomData deliveryOrderDetailCustomData = (DeliveryOrderDetailCustomData) row.getDeliveryOrderDetailCustomData();
                                AccountingManager.setCustomColumnValues(deliveryOrderDetailCustomData, fieldMap, replaceFieldMap, variableMap);
                        DateFormat defaultDateFormat=new SimpleDateFormat(Constants.MMMMdyyyy);
                        Date dateFromDB=null;
                                for (Map.Entry<String, Object> varEntry : variableMap.entrySet()) {
                                    String coldata = varEntry.getValue().toString();
                                    String valueForReport = "";
                                    if (customFieldMap.containsKey(varEntry.getKey()) && isForReport && coldata != null) {
                                        try {
                                            String[] valueData = coldata.split(",");
                                            for (String value : valueData) {
                                                FieldComboData fieldComboData = (FieldComboData) kwlCommonTablesDAOObj.getClassObject(FieldComboData.class.getName(), value);
                                                if (fieldComboData != null) {
                                                    valueForReport += fieldComboData.getValue() + ",";
                                                }
                                            }
                                            if (valueForReport.length() > 1) {
                                                valueForReport = valueForReport.substring(0, valueForReport.length() - 1);
                                            }
                                            obj.put(varEntry.getKey(), valueForReport);//fieldComboData.getValue()!=null ?fieldComboData.getValue():"");
                                        } catch (Exception ex) {
                                            obj.put(varEntry.getKey(), coldata);
                                        }
                                    } else if (customDateFieldMap.containsKey(varEntry.getKey())) {
                                        DateFormat df2 = new SimpleDateFormat("yyyy-MM-dd");
                                        try {
                                            dateFromDB = defaultDateFormat.parse(coldata);
                                            coldata = df2.format(dateFromDB);

                                        } catch (Exception e) {
                                        }
                                        obj.put(varEntry.getKey(), coldata);
                                    } else {
                                        if (!StringUtil.isNullOrEmpty(coldata)) {
                                            obj.put(varEntry.getKey(), coldata);
                                        }
                                    }
                                }

                                if (closeflag) {
                                    double quantity = 0;
                                    if (srflag) {
                                        quantity = accInvoiceServiceDAO.getDeliveryOrderDetailStatusFORSR(row);
                                    } else {
                                        quantity = accInvoiceServiceDAO.getDeliveryOrderDetailStatus(row);
                                    }

                                    obj.put("quantity", quantity);
                                    obj.put("dquantity", quantity);
                            obj.put("baseuomquantity", authHandler.calculateBaseUOMQuatity(quantity,baseuomrate, companyid));
                                    obj.put("baseuomrate", baseuomrate);
                                } else {
                                    obj.put("quantity", row.getActualQuantity());
                            obj.put("baseuomquantity", authHandler.calculateBaseUOMQuatity(row.getActualQuantity(),baseuomrate, companyid));
                                    obj.put("baseuomrate", baseuomrate);
                                }
                                productObjMap.put(row.getProduct().getID(), obj);
                            }
                        }
                        i++;
                }
            }
//            Iterator productItr=productObj.keys();
//            while(productItr.hasNext())
//            {
//                 jArr.put(productObj.getJSONObject(productItr.next().toString()));           
//            }
            for (Map.Entry<String, JSONObject> entry : productObjMap.entrySet()) {
                Object jsonObject=entry.getValue()!=null?entry.getValue():"";
                jArr.put(jsonObject);        
            }
            jobj.put(Constants.data, jArr);
        } catch (JSONException je) {
            throw ServiceException.FAILURE(je.getMessage(), je);
        }
        return jobj;
    }
     
        public ModelAndView getDeliveryOrderRowsForpackingDoDetails(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        String msg = "";
        boolean issuccess = false;
        try {
            String isshipping = request.getParameter("isShip");
            String shipquantity = request.getParameter("shipquantity");
            String dodid = request.getParameter("dodid");
            if (!StringUtil.isNullOrEmpty(isshipping)) {
                /**
                 * For Shipping DO
                 */
                Map<String, Object> requestParams = new HashMap();
                requestParams.put("dodid", dodid);
                if(!StringUtil.isNullOrEmpty(shipquantity)){
                    requestParams.put("shipquantity", shipquantity);
                }
                jobj = accInvoiceServiceDAO.getDeliveryOrderRowsForShippingDoDetails(requestParams);
            } else {
                jobj = getDeliveryOrderRowsForpackingDoDetails(request);
            }
            
            issuccess = true;
        } catch (SessionExpiredException ex) {
            msg = ex.getMessage();
            Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ServiceException ex) {
            msg = "getDeliveryOrderRowsForpackingDoDetails" + ex.getMessage();
            Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            msg = "getDeliveryOrderRowsForpackingDoDetails" + ex.getMessage();
            Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                jobj.put("success", issuccess);
                jobj.put("msg", msg);
            } catch (JSONException ex) {
                Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return new ModelAndView(Constants.jsonView, "model", jobj.toString());
    }

    public JSONObject getDeliveryOrderRowsForpackingDoDetails(HttpServletRequest request) throws SessionExpiredException, ServiceException {  //, HashMap<String, Integer> fieldMap
        JSONObject jobj = new JSONObject();
        try {
            HashMap<String, Object> requestParams = new HashMap<String, Object>();
            requestParams.put(Constants.companyKey, sessionHandlerImpl.getCompanyid(request));
            String companyid = sessionHandlerImpl.getCompanyid(request);
            DateFormat df = authHandler.getDateOnlyFormat();
            requestParams.put(Constants.globalCurrencyKey, sessionHandlerImpl.getCurrencyID(request));
            boolean closeflag = request.getParameter("closeflag") != null ? true : false;
            boolean srflag = request.getParameter("srflag") != null ? true : false;
            String[] billids = (String[]) request.getParameter("bills").split(",");
            int i = 0;
            JSONArray jArr = new JSONArray();
            String productid = request.getParameter("productid") != null ? request.getParameter("productid") : "";
            String shipquantity = request.getParameter("shipquantity");
            HashMap<String, Object> fieldrequestParams = new HashMap();
            fieldrequestParams.put(Constants.filter_names, Arrays.asList(Constants.companyid, Constants.moduleid, Constants.customcolumn));
            fieldrequestParams.put(Constants.filter_values, Arrays.asList(sessionHandlerImpl.getCompanyid(request), Constants.Acc_Delivery_Order_ModuleId, 1));
            HashMap<String, String> replaceFieldMap1 = new HashMap<String, String>();
            HashMap<String, String> customFieldMap = new HashMap<String, String>();
            HashMap<String, String> customDateFieldMap = new HashMap<String, String>();
            HashMap<String, Integer> fieldMap = accAccountDAOobj.getFieldParamsCustomMap(fieldrequestParams, replaceFieldMap1, customFieldMap, customDateFieldMap);
            HashMap<String, Object> doRequestParams = new HashMap<String, Object>();
            HashMap<String, Object> dodetailRequestParams = new HashMap<String, Object>();
            ArrayList filter_names = new ArrayList(), filter_params = new ArrayList(), order_by = new ArrayList(), order_type = new ArrayList();
            ArrayList dofilter_names = new ArrayList(),dofilter_params=new ArrayList();
            KwlReturnObject cap = accountingHandlerDAOobj.getObject(CompanyAccountPreferences.class.getName(), companyid);
            CompanyAccountPreferences preferences = (CompanyAccountPreferences) cap.getEntityList().get(0);
            filter_names.add("deliveryOrder.ID");
            order_by.add("srno");
            order_type.add("asc");
            doRequestParams.put("filter_names", filter_names);
            doRequestParams.put("filter_params", filter_params);
            doRequestParams.put("order_by", order_by);
            doRequestParams.put("order_type", order_type);
            JSONObject productObj = new JSONObject();

            while (billids != null && i < billids.length) {
                KwlReturnObject result = accountingHandlerDAOobj.getObject(DeliveryOrder.class.getName(), billids[i]);
                DeliveryOrder dorder = (DeliveryOrder) result.getEntityList().get(0);
                filter_params.clear();
                filter_params.add(dorder.getID());
                KwlReturnObject podresult = accInvoiceDAOobj.getDeliveryOrderDetails(doRequestParams);
                Iterator itr = podresult.getEntityList().iterator();

                while (itr.hasNext()) {
                    DeliveryOrderDetail row = (DeliveryOrderDetail) itr.next();
                    JSONObject obj = new JSONObject();
                    if (productid.equals(row.getProduct().getID())) {
                        obj.put(Constants.billid, dorder.getID());
                        obj.put("dono", dorder.getDeliveryOrderNumber());
                        obj.put("srno", row.getSrno());
                        obj.put("rowid", row.getID());
                        obj.put("originalTransactionRowid", row.getID());
                        obj.put("productid", row.getProduct().getID());
                        obj.put("productname", row.getProduct().getName());
                        obj.put("unitname", row.getInventory().getUom() != null ? row.getInventory().getUom().getNameEmptyforNA() : row.getProduct().getUnitOfMeasure() == null ? "" : row.getProduct().getUnitOfMeasure().getNameEmptyforNA());
                        obj.put("desc", StringUtil.isNullOrEmpty(row.getDescription()) ? row.getProduct().getDescription() : row.getDescription());
                        obj.put("type", row.getProduct().getProducttype() == null ? "" : row.getProduct().getProducttype().getName());
                        obj.put("pid", row.getProduct().getProductid());
                        obj.put("memo", row.getRemark());
                        obj.put("quantity", row.getActualQuantity());
                          
                        /**
                         * If QC approval Flow for Delivery Order is activated
                         * then get the quantity from IST present in DeliveryDetailInterStoreLocationMapping.
                         */
                        double deliveredQuantity = row.getDeliveredQuantity();
                        if (preferences.isQaApprovalFlowInDO()) {
                            JSONObject params = new JSONObject();
                            params.put("dodetailid", row.getID());
                            params.put("transactionUsingQC", true);
                            List<DeliveryDetailInterStoreLocationMapping> list = accInvoiceDAOobj.getDeliveryDetailInterStoreLocationMappingList(params);
                            if (!list.isEmpty()) {
                                double dQuantity = 0;
                                for (DeliveryDetailInterStoreLocationMapping deliveryDetailInterStoreLocationMapping : list) {
                                    dQuantity += deliveryDetailInterStoreLocationMapping.getInterStoreTransferRequest().getAcceptedQty();
                                }
                                deliveredQuantity = dQuantity;
                            }
                        }
                        obj.put("quantityindo", deliveredQuantity);
                        obj.put("copyquantity", deliveredQuantity);
                        obj.put("description", StringUtil.isNullOrEmpty(row.getDescription()) ? row.getProduct().getDescription() : row.getDescription());
                        obj.put("partno", (row.getPartno() != null) ? row.getPartno() : "");
                        obj.put("remark", row.getRemark());
                        obj.put("discountispercent", 1);
                        obj.put("prdiscount", 0);
                        obj.put("rate", row.getRate());
                        HashMap<String, Object> fieldrequestParamsProduct = new HashMap();
                        Map<String, Object> variableMapProduct = new HashMap<String, Object>();
                        fieldrequestParamsProduct.put(Constants.filter_names, Arrays.asList(Constants.companyid, Constants.moduleid, Constants.customcolumn));
                        fieldrequestParamsProduct.put(Constants.filter_values, Arrays.asList(sessionHandlerImpl.getCompanyid(request), Constants.Acc_Product_Master_ModuleId, 0));
                        HashMap<String, String> replaceFieldMapProduct = new HashMap<String, String>();
                        HashMap<String, Integer> FieldMapProduct = accAccountDAOobj.getFieldParamsMap(fieldrequestParamsProduct, replaceFieldMapProduct);
                        KwlReturnObject resultProduct = accountingHandlerDAOobj.getObject(AccProductCustomData.class.getName(), row.getProduct().getID());
                        AccProductCustomData objProduct = (AccProductCustomData) resultProduct.getEntityList().get(0);
                        if (objProduct != null) {
                            productHandler.setCustomColumnValuesForProduct(objProduct, FieldMapProduct, replaceFieldMapProduct, variableMapProduct);
                            for (Map.Entry<String, Object> varEntry : variableMapProduct.entrySet()) {
                                String coldata = varEntry.getValue().toString();
                                if (!StringUtil.isNullOrEmpty(coldata)) {
                                    obj.put(varEntry.getKey(), coldata);
                                    obj.put("key", varEntry.getKey());
                                }
                            }
                        }
                        if (closeflag) {
                         double quantity = 0;
                            if (srflag) {
                                quantity = accInvoiceServiceDAO.getDeliveryOrderDetailStatusFORSR(row);
                            } else {
                                quantity = accInvoiceServiceDAO.getDeliveryOrderDetailStatus(row);
                            }

                            obj.put("quantity", quantity);
                            obj.put("quantityindo", quantity);
                        } else {
                            obj.put("quantity", row.getActualQuantity());
                        }
                        KwlReturnObject packingdodetailslist= accInvoiceDAOobj.getDeliveryOrderRowForpackingDoDetails(productid,dorder.getID(), companyid);
                        Iterator dodetailsitr = packingdodetailslist.getEntityList().iterator();
                        double shipedquantity=0;
                        while (dodetailsitr.hasNext()) {
                            ShipingDoDetails dodetail = (ShipingDoDetails) dodetailsitr.next();
                            shipedquantity=shipedquantity+dodetail.getShipQuantity();
                        }
                        /*
                        For updating Due quantity if product is packed multiple times but still not shipped
                        */
                        dofilter_names.clear();
                        dofilter_params.clear();
                        dofilter_names.add("dodetailid.ID");
                        dofilter_params.add(row.getID());
                        dodetailRequestParams = new HashMap<String,Object>();
                        dodetailRequestParams.put("filter_names", dofilter_names);
                        dodetailRequestParams.put("filter_params", dofilter_params);
                        KwlReturnObject packingdetails = accInvoiceDAOobj.getPackingDetails(dodetailRequestParams);
                        Iterator packingdetailsitr = packingdetails.getEntityList().iterator();
                        
                        while (packingdetailsitr.hasNext()) {
                            PackingDetail pkd = (PackingDetail) packingdetailsitr.next();
                            shipedquantity += pkd.getPackingQuantity();
                        }
                        
                        
                        double duequantity = deliveredQuantity - shipedquantity;
                        obj.put("duequantity", duequantity);
                        if(!StringUtil.isNullOrEmpty(shipquantity)){
                            obj.put("shipquantity", Double.parseDouble(shipquantity));
                        }else{
                            obj.put("shipedquantity", shipedquantity);
                        }
                        jArr.put(obj);
                    }
                }
                i++;
            }
            jobj.put(Constants.data, jArr);
        } catch (JSONException je) {
            throw ServiceException.FAILURE(je.getMessage(), je);
        }
        return jobj;
    }
    
    public JSONObject getAssetMaintenanceWorkOrderRows(HttpServletRequest request) throws SessionExpiredException, ServiceException {  //, HashMap<String, Integer> fieldMap
        JSONObject jobj = new JSONObject();
        try {
            JSONObject requestObj = StringUtil.convertRequestToJsonObject(request);
            HashMap<String, Object> requestParams = new HashMap<String, Object>();
            requestParams.put(Constants.companyKey, sessionHandlerImpl.getCompanyid(request));
            String companyid = sessionHandlerImpl.getCompanyid(request);
            DateFormat df = authHandler.getDateFormatter(request);
            requestParams.put(Constants.globalCurrencyKey, sessionHandlerImpl.getCurrencyID(request));
            boolean isBatchSerial = false;
            boolean isBatch = false;
            boolean isSerial = false;
            boolean isBatchForProduct = false;
            boolean isSerialForProduct = false;
            boolean isLocationForProduct=false;
            boolean isWarehouseForProduct = false;
            boolean isRowForProduct = false;
            boolean isRackForProduct = false;
            boolean isBinForProduct = false;
            String[] sos = (String[]) request.getParameter("bills").split(",");
            int i = 0;
            JSONArray jArr = new JSONArray();
            int addobj = 1;

            HashMap<String, Object> doRequestParams = new HashMap<String, Object>();
            ArrayList filter_names = new ArrayList(), filter_params = new ArrayList(), order_by = new ArrayList(), order_type = new ArrayList();
            filter_names.add("assetMaintenanceWorkOrder.id");
            order_by.add("srno");
            order_type.add("asc");
            doRequestParams.put("filter_names", filter_names);
            doRequestParams.put("filter_params", filter_params);
            doRequestParams.put("order_by", order_by);
            doRequestParams.put("order_type", order_type);


            while (sos != null && i < sos.length) {
                KwlReturnObject result = accountingHandlerDAOobj.getObject(AssetMaintenanceWorkOrder.class.getName(), sos[i]);
                AssetMaintenanceWorkOrder worder = (AssetMaintenanceWorkOrder) result.getEntityList().get(0);
                filter_params.clear();
                filter_params.add(worder.getId());
                KwlReturnObject podresult = accInvoiceDAOobj.getWorkOrderDetails(doRequestParams);
                Iterator itr = podresult.getEntityList().iterator();

                while (itr.hasNext()) {
                    AssetMaintenanceWorkOrderDetail row = (AssetMaintenanceWorkOrderDetail) itr.next();
                    JSONObject obj = new JSONObject();
                    obj.put(Constants.billid, worder.getId());
                    obj.put("billno", worder.getWorkOrderNumber());
                    obj.put("srno", row.getSrno());
                    obj.put("rowid", row.getID());
                    obj.put("originalTransactionRowid", row.getID());
                    obj.put("productid", row.getProduct().getID());
                    obj.put("productname", row.getProduct().getName());
//                    obj.put("invstore",(StringUtil.isNullOrEmpty(row.getInvstoreid()))?"":row.getInvstoreid());                    
//                    obj.put("invlocation",(StringUtil.isNullOrEmpty(row.getInvlocid()))?"":row.getInvlocid());
                    obj.put("isAsset", row.getProduct().isAsset());

                    obj.put("unitname", row.getInventory().getUom() != null ? row.getInventory().getUom().getNameEmptyforNA() : row.getProduct().getUnitOfMeasure() == null ? "" : row.getProduct().getUnitOfMeasure().getNameEmptyforNA());
                    obj.put("baseuomname", row.getProduct().getUnitOfMeasure()==null?"":row.getProduct().getUnitOfMeasure().getNameEmptyforNA());
                    obj.put("desc", StringUtil.isNullOrEmpty(row.getDescription()) ? row.getProduct().getDescription() : row.getDescription());
                    obj.put("type", row.getProduct().getProducttype() == null ? "" : row.getProduct().getProducttype().getName());
                    obj.put("pid", row.getProduct().getProductid());
                    obj.put("memo", row.getRemark());
                    obj.put("quantity", row.getDeliveredQuantity());//row.getActualQuantity());    
//                    KwlReturnObject cap = accountingHandlerDAOobj.getObject(CompanyAccountPreferences.class.getName(), companyid);
//                    CompanyAccountPreferences preferences = (CompanyAccountPreferences) cap.getEntityList().get(0);
//                    if (!StringUtil.isNullOrEmpty(row.getProduct().getID())) {
//                        KwlReturnObject prodresult = accProductObj.getObject(Product.class.getName(), row.getProduct().getID());
//                        Product product = (Product) prodresult.getEntityList().get(0);
//                        isBatchForProduct = product.isIsBatchForProduct();
//                        isSerialForProduct = product.isIsSerialForProduct();
//                    }
//                    if (preferences.isIsBatchCompulsory() || preferences.isIsSerialCompulsory()) {  //check if company level option is on then only we will check productt level
//                        if (isBatchForProduct || isSerialForProduct) {
//                            obj.put("batchdetails", (row.getBatch() == null) ? "" : getBatchJson(row.getBatch(), false, preferences.isIsBatchCompulsory(), isBatchForProduct, preferences.isIsSerialCompulsory(), isSerialForProduct, request, -1));// ModuleID is sent -1 because in function getBatchJson , only sales return is having entries in different table(ReturnBatchMapping)
//                        }
//                    }
                    KwlReturnObject cap = accountingHandlerDAOobj.getObject(CompanyAccountPreferences.class.getName(), companyid);
                    CompanyAccountPreferences preferences = (CompanyAccountPreferences) cap.getEntityList().get(0);
                    if (!StringUtil.isNullOrEmpty(row.getProduct().getID())) {
                        KwlReturnObject prodresult = accProductObj.getObject(Product.class.getName(), row.getProduct().getID());
                        Product product = (Product) prodresult.getEntityList().get(0);
                        isLocationForProduct = product.isIslocationforproduct();
                        isWarehouseForProduct = product.isIswarehouseforproduct();
                        isBatchForProduct = product.isIsBatchForProduct();
                        isSerialForProduct = product.isIsSerialForProduct();
                        isRowForProduct = product.isIsrowforproduct();
                        isRackForProduct = product.isIsrackforproduct();
                        isBinForProduct = product.isIsbinforproduct();
                    }
                    if (preferences.isIsBatchCompulsory() || preferences.isIsSerialCompulsory() || preferences.isIslocationcompulsory() || preferences.isIswarehousecompulsory()  || preferences.isIsrowcompulsory() || preferences.isIsrackcompulsory() || preferences.isIsbincompulsory()) {  //check if company level option is on then only we will check productt level
                        if (isBatchForProduct || isSerialForProduct || isSerialForProduct || isLocationForProduct || isWarehouseForProduct || isRowForProduct || isRackForProduct  || isBinForProduct) {  //product level batch and serial no on or not
                            obj.put("batchdetails", accInvoiceServiceDAO.getNewBatchJson(row.getProduct(), requestObj, row.getID()));
                        }
                    }


                    obj.put("dquantity", row.getDeliveredQuantity());
                    double baseuomrate = row.getInventory().getBaseuomrate();
                    if (row.getInventory().getUom() != null) {
                        obj.put("uomid", row.getInventory().getUom().getID());
                    } else {
                        obj.put("uomid", row.getInventory().getProduct().getUnitOfMeasure() != null ? row.getInventory().getProduct().getUnitOfMeasure().getID() : "");
                    }
                    obj.put("baseuomquantity", authHandler.calculateBaseUOMQuatity(row.getDeliveredQuantity(),baseuomrate, companyid));//row.getActualQuantity()*baseuomrate);
                    obj.put("baseuomrate", baseuomrate);

                    obj.put("copyquantity", row.getDeliveredQuantity());
                    obj.put("description", StringUtil.isNullOrEmpty(row.getDescription()) ? row.getProduct().getDescription() : row.getDescription());
//                    obj.put("partno", (row.getPartno()!=null) ? row.getPartno() : "" );
                    obj.put("remark", row.getRemark());
                    obj.put("discountispercent", 1);
                    obj.put("prdiscount", 0);
                    //Set rate to default product price when invoice is created using DO.
//                    KwlReturnObject rateResult=accProductObj.getProductPrice(row.getInventory().getProduct().getID(), false, row.getDeliveryOrder().getOrderDate(),"");
//                    Object temp = rateResult.getEntityList().get(0);
//                    if (temp != null) {
//                        obj.put("rate", temp.toString());
//                    } else {
//                        obj.put("rate", 0);
//                    }
                    obj.put("rate", row.getRate());
//                    HashMap<String, Object> fieldrequestParamsProduct = new HashMap();
//                    Map<String, Object> variableMapProduct = new HashMap<String, Object>();
//                    fieldrequestParamsProduct.put(Constants.filter_names, Arrays.asList(Constants.companyid, Constants.moduleid, Constants.customcolumn));
//                    fieldrequestParamsProduct.put(Constants.filter_values, Arrays.asList(sessionHandlerImpl.getCompanyid(request), Constants.Acc_Product_Master_ModuleId, 0));
//                    HashMap<String, String> replaceFieldMapProduct = new HashMap<String, String>();
//                    HashMap<String, Integer> FieldMapProduct = accAccountDAOobj.getFieldParamsMap(fieldrequestParamsProduct, replaceFieldMapProduct);
//                    KwlReturnObject resultProduct = accountingHandlerDAOobj.getObject(AccProductCustomData.class.getName(), row.getProduct().getID());
//                    AccProductCustomData objProduct = (AccProductCustomData) resultProduct.getEntityList().get(0);
//                    if (objProduct != null) {
//                        productHandler.setCustomColumnValuesForProduct(objProduct, FieldMapProduct, replaceFieldMapProduct, variableMapProduct);
//                        for (Map.Entry<String, Object> varEntry : variableMapProduct.entrySet()) {
//                            String coldata = varEntry.getValue().toString();
//                            if (!StringUtil.isNullOrEmpty(coldata)) {
//                                        obj.put(varEntry.getKey(), coldata);
//                                        obj.put("key", varEntry.getKey());
////                                jobj.append("data", jsonObj);
//                                        }
//                                   }
//                            }

//                     if(!linkingFlag){
//                        if (row.getCidetails() != null) {
//                            obj.put("linkto", row.getCidetails().getInvoice().getInvoiceNumber());
//                            obj.put("linkid", row.getCidetails().getInvoice().getID());
//                            obj.put("rowid", row.getCidetails().getID());                            
//                            obj.put("savedrowid", row.getCidetails().getID());                            
//                            obj.put("linktype", 1);
//                        } else if (row.getSodetails() != null) {
//                            obj.put("linkto", row.getSodetails().getSalesOrder().getSalesOrderNumber());                            
//                            obj.put("linkid", row.getSodetails().getSalesOrder().getID());
//                            obj.put("rowid", row.getSodetails().getID());
//                            obj.put("savedrowid", row.getSodetails().getID());
//                            obj.put("linktype", 0);
//                        } else {
//                            obj.put("linkto", "");
//                            obj.put("linkid", "");
//                            obj.put("linktype", -1);
//                        }
//                    }


//                    if (dorder.isFixedAssetDO() || dorder.isLeaseDO()) {
//                        isBatchSerial = preferences.isShowprodserial();  //to get the optioof serial no and batch is on or not
//                    getASsetDetailsJson(row, companyid, obj, df,preferences, request);
//                    }

//                     Map<String, Object> variableMap = new HashMap<String, Object>();
//                    DeliveryOrderDetailCustomData deliveryOrderDetailCustomData = (DeliveryOrderDetailCustomData) row.getDeliveryOrderDetailCustomData();
//                    HashMap<String, String> replaceFieldMap = new HashMap<String, String>();
//                    AccountingManager.setCustomColumnValues(deliveryOrderDetailCustomData, fieldMap, replaceFieldMap,variableMap);
//                    for (Map.Entry<String, Object> varEntry : variableMap.entrySet()) {
//                        String coldata = varEntry.getValue().toString();
//                        if(customFieldMap.containsKey(varEntry.getKey())){
//                                   FieldComboData fieldComboData = (FieldComboData) kwlCommonTablesDAOObj.getClassObject(FieldComboData.class.getName(), coldata);
//                                   if(fieldComboData != null){
//                                       obj.put(varEntry.getKey(),coldata!=null?coldata:"");// fieldComboData.getValue()!=null ?fieldComboData.getValue():"");
//                                   
//                                   }
//                              }else if(customDateFieldMap.containsKey(varEntry.getKey())){
//                                  DateFormat df2 = new SimpleDateFormat("yyyy-MM-dd");
//                                        long milliSeconds= Long.parseLong(coldata);
//                                          coldata = df2.format(milliSeconds);
//                                       obj.put(varEntry.getKey(),coldata);
//                              } else{
//                                       if (!StringUtil.isNullOrEmpty(coldata)) {
//                                        obj.put(varEntry.getKey(), coldata);
//                                        }
//                               }
//                    }


//                    if (closeflag) {
//                        double quantity = 0;
//                        if(srflag) {
//                            quantity = getDeliveryOrderDetailStatusFORSR(row);
//                        } else {
//                            quantity = getDeliveryOrderDetailStatus(row);
//                        }
//                        
//                        obj.put("quantity", quantity);
//                        obj.put("dquantity", quantity);
//                        obj.put("baseuomquantity", quantity*baseuomrate);
//                        obj.put("baseuomrate", baseuomrate);
//                    } else {
                    obj.put("quantity", row.getDeliveredQuantity());// row.getActualQuantity());
                    obj.put("baseuomquantity", authHandler.calculateBaseUOMQuatity(row.getDeliveredQuantity(),baseuomrate, companyid));//row.getActualQuantity()*baseuomrate);
                    obj.put("baseuomrate", baseuomrate);
//                    }
//                    obj.put("rate", row.getProduct().);
                    jArr.put(obj);
                }
                i++;
                jobj.put(Constants.data, jArr);
            }
        } catch (JSONException je) {
            throw ServiceException.FAILURE(je.getMessage(), je);
        }
        return jobj;
    }

     
      public String getBatchJson(ProductBatch productBatch, boolean isFixedAssetDO,boolean isbatch,boolean isBatchForProduct,boolean isserial,boolean isSerialForProduct,HttpServletRequest request , int moduleId) throws ServiceException, SessionExpiredException, JSONException {
        JSONArray jSONArray = new JSONArray();
        String purchasebatchid = "";
        DateFormat df = authHandler.getDateFormatter(request);
        boolean linkingFlag = (StringUtil.isNullOrEmpty(request.getParameter("linkingFlag")))?false:Boolean.parseBoolean(request.getParameter("linkingFlag"));
        HashMap<String, Object> filterRequestParams = new HashMap<String, Object>();
          ArrayList filter_names = new ArrayList(),filter_params = new ArrayList();
        filter_names.add("batch.id");
        filter_params.add(productBatch.getId());

        filter_names.add("company.companyID");
        filter_params.add(sessionHandlerImpl.getCompanyid(request));

        filterRequestParams.put("filter_names", filter_names);
        filterRequestParams.put("filter_params", filter_params);
        KwlReturnObject kmsg = accCommonTablesDAO.getSerialForBatch(filterRequestParams);

        List list = kmsg.getEntityList();
        Iterator iter = list.iterator();
        int i = 1;
        while (iter.hasNext()) {
            BatchSerial batchSerial = (BatchSerial) iter.next();
            JSONObject obj = new JSONObject();
            if (i == 1) {
                obj.put("id", productBatch.getId());
                obj.put("batch", productBatch.getName());
                obj.put("batch", productBatch.getName());
                obj.put("batchname", productBatch.getName());
                obj.put("location", productBatch.getLocation().getId());
                obj.put("warehouse", productBatch.getWarehouse().getId());
                obj.put("mfgdate", productBatch.getMfgdate()!=null?authHandler.getDateFormatter(request).format(productBatch.getMfgdate()):"");
                obj.put("expdate",productBatch.getExpdate()!=null?authHandler.getDateFormatter(request).format(productBatch.getExpdate()):"");
                obj.put("quantity", productBatch.getQuantity());
                obj.put("balance", productBatch.getBalance());
                obj.put("balance", productBatch.getBalance());
                obj.put("asset", productBatch.getAsset());
                if (isFixedAssetDO) {
                    obj.put("purchasebatchid", productBatch.getId());
                } else {
                    obj.put("purchasebatchid", getPurchaseBatchid(productBatch.getId(),moduleId));
                }
                /**
                 * Get document count attached to batch  and attachment id's
                 */
                HashMap<String, Object> hashMap = new HashMap<String, Object>();
                hashMap.put("invoiceID", productBatch.getId());
                hashMap.put(Constants.companyKey, productBatch.getCompany().getCompanyID());
                obj.put("attachment", 0);
                obj.put("attachmentids", "");
                KwlReturnObject object = accMasterItemsDAOobj.getBatchDocuments(hashMap);
                if (object.getEntityList() != null && object.getEntityList().size() > 0) {
                    obj.put("attachment", object.getEntityList().size());
                    List<Object[]> attachmentDetails = object.getEntityList();
                    String docids = "";
                    for (Object[] attachmentArray : attachmentDetails) {
                        docids = docids + attachmentArray[3] + ",";
                    }
                    if (!StringUtil.isNullOrEmpty(docids)) {
                        docids = docids.substring(0, docids.length() - 1);
                    }
                    obj.put("attachmentids", docids);
                }
            } else {
                obj.put("id", "");
                obj.put("batch","");
                obj.put("batchname","");
                obj.put("location","");
                obj.put("warehouse","");
                obj.put("mfgdate", "");
                obj.put("expdate", "");
                obj.put("quantity", "");
                obj.put("balance","");
                obj.put("purchasebatchid","");
                obj.put("attachment","");
                obj.put("attachmentids","");
            }
            i++;
            obj.put("serialnoid", batchSerial.getId());
            obj.put("serialno", batchSerial.getName());
            obj.put("expstart", batchSerial.getExpfromdate() != null ? authHandler.getDateFormatter(request).format(batchSerial.getExpfromdate()) : "");
            obj.put("expend", batchSerial.getExptodate() != null ? authHandler.getDateFormatter(request).format(batchSerial.getExptodate()) : "");
            if (isFixedAssetDO) {
                obj.put("purchaseserialid", batchSerial.getId());
            } else {
                obj.put("purchaseserialid", getPurchaseSerialid(batchSerial.getId()));
            }
              jSONArray.put(obj);
          }
          if (isBatchForProduct && !isSerialForProduct) //only in batch case
          {
              JSONObject Jobj = new JSONObject();
              Jobj = getOnlyBatchDetail(productBatch, request);
               if (isFixedAssetDO || linkingFlag) {
                  purchasebatchid = productBatch.getId();
              } else {
                  purchasebatchid = getPurchaseBatchid(productBatch.getId(),moduleId);
              }
              if (!StringUtil.isNullOrEmpty(purchasebatchid)) {
                  Jobj.put("purchasebatchid", purchasebatchid);
              }
              jSONArray.put(Jobj);
          }

          return jSONArray.toString();
    }
         public JSONObject getOnlyBatchDetail(ProductBatch productBatch, HttpServletRequest request) throws JSONException, SessionExpiredException {

        JSONObject obj = new JSONObject();
        obj.put("id", productBatch.getId());
        obj.put("batch", productBatch.getName());
        obj.put("batchname", productBatch.getName());
        obj.put("location", productBatch.getLocation().getId());
        obj.put("warehouse", productBatch.getWarehouse().getId());
        obj.put("mfgdate", productBatch.getMfgdate() != null ? authHandler.getDateFormatter(request).format(productBatch.getMfgdate()) : "");
        obj.put("expdate", productBatch.getExpdate() != null ? authHandler.getDateFormatter(request).format(productBatch.getExpdate()) : "");
        obj.put("quantity", productBatch.getQuantity());
        obj.put("balance", productBatch.getBalance());
        obj.put("asset", productBatch.getAsset());
        obj.put("expstart", "");
        obj.put("expend","");

        return obj;
    }
     public ModelAndView getSalesReturnRows(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj=new JSONObject();
        String msg = "";
        boolean issuccess = false;
        try {
             JSONObject paramJobj=StringUtil.convertRequestToJsonObject(request);
            jobj = accInvoiceServiceDAO.getSalesReturnRows(paramJobj);
            issuccess = true;
        } catch (SessionExpiredException ex) {
            msg = ex.getMessage();
            Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ServiceException ex) {
            msg = "accSalesOrderController.getSalesReturnRows:" + ex.getMessage();
            Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            msg = "accSalesOrderController.getSalesReturnRows:" + ex.getMessage();
            Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                jobj.put("success", issuccess);
                jobj.put("msg", msg);
            } catch (JSONException ex) {
                Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return new ModelAndView(Constants.jsonView, "model", jobj.toString());
    }
     
     public JSONObject getSalesReturnRows(HttpServletRequest request) throws SessionExpiredException, ServiceException, UnsupportedEncodingException {
        JSONObject jobj=new JSONObject();
        try {
            JSONObject requestObj = StringUtil.convertRequestToJsonObject(request);
            HashMap<String,Object> requestParams = new HashMap<String, Object>();
            requestParams.put("companyid", sessionHandlerImpl.getCompanyid(request));
            requestParams.put("gcurrencyid", sessionHandlerImpl.getCurrencyID(request));
            boolean closeflag = request.getParameter("closeflag")!=null?true:false;
            boolean isFixedAssetDO=false;
            boolean isLocationForProduct=false;
            boolean isWarehouseForProduct=false;
            boolean isBatchForProduct=false;
            boolean isSerialForProduct=false;
            boolean isRowForProduct = false;
            boolean isRackForProduct = false;
            boolean isBinForProduct = false;
            String[] sos = request.getParameter("bills")==null?null: (String[]) request.getParameter("bills").split(",");
            if(request.getAttribute("billid")!=null){
                sos =(String[]) (request.getAttribute("billid").toString()).split(",");
            }
            boolean isExport = false;
            if (request.getAttribute("isExport") != null) {
                isExport = (boolean) request.getAttribute("isExport");
            }
            int i=0;
            JSONArray jArr=new JSONArray();
            int addobj = 1;
            boolean isForReport = false;
            String dtype = request.getParameter("dtype");
            if (!StringUtil.isNullOrEmpty(dtype) && dtype.equals("report")) {
                isForReport = true;
            }
            boolean isFixedAsset = (!StringUtil.isNullOrEmpty(request.getParameter(Constants.isFixedAsset))) ? Boolean.parseBoolean(request.getParameter(Constants.isFixedAsset)) : false;
            boolean isConsignment = (!StringUtil.isNullOrEmpty(request.getParameter(Constants.isConsignment))) ? Boolean.parseBoolean(request.getParameter(Constants.isConsignment)) : false;
            boolean isLeaseFixedAsset = (!StringUtil.isNullOrEmpty(request.getParameter(Constants.isLeaseFixedAsset))) ? Boolean.parseBoolean(request.getParameter(Constants.isLeaseFixedAsset)) : false;
            HashMap<String, Object> fieldrequestParams = new HashMap();
            HashMap<String, String> customFieldMap = new HashMap<String, String>();
            HashMap<String, String> customDateFieldMap = new HashMap<String, String>();
            fieldrequestParams.put(Constants.filter_names, Arrays.asList(Constants.companyid, Constants.moduleid,Constants.customcolumn));
            fieldrequestParams.put(Constants.filter_values, Arrays.asList(sessionHandlerImpl.getCompanyid(request),isConsignment?Constants.Acc_ConsignmentSalesReturn_ModuleId:isFixedAsset?Constants.Acc_FixedAssets_Sales_Return_ModuleId:isLeaseFixedAsset?Constants.Acc_Lease_Return:Constants.Acc_Sales_Return_ModuleId,1));
            HashMap<String, String> replaceFieldMap = new HashMap<String, String>();
            HashMap<String, Integer> FieldMap = accAccountDAOobj.getFieldParamsCustomMapForRows(fieldrequestParams, replaceFieldMap,customFieldMap,customDateFieldMap);
            
            HashMap<String, Object> doRequestParams = new HashMap<String, Object>();
            ArrayList filter_names = new ArrayList(),filter_params = new ArrayList(), order_by = new ArrayList(), order_type = new ArrayList();
            filter_names.add("salesReturn.ID");
            order_by.add("srno");
            order_type.add("asc");
            doRequestParams.put("filter_names", filter_names);
            doRequestParams.put("filter_params", filter_params);
            doRequestParams.put("order_by", order_by);
            doRequestParams.put("order_type", order_type);
            KwlReturnObject extracap = accountingHandlerDAOobj.getObject(ExtraCompanyPreferences.class.getName(), sessionHandlerImpl.getCompanyid(request));
            ExtraCompanyPreferences extraCompanyPreferences = (ExtraCompanyPreferences) extracap.getEntityList().get(0);
            
            KwlReturnObject curresult = accountingHandlerDAOobj.getObject(KWLCurrency.class.getName(), sessionHandlerImpl.getCurrencyID(request));
            KWLCurrency currency = (KWLCurrency) curresult.getEntityList().get(0);
            
            String companyid=(String) requestParams.get(COMPANYID);
            KwlReturnObject companyObj = accountingHandlerDAOobj.getObject(Company.class.getName(), companyid);
            Company company = (Company) companyObj.getEntityList().get(0);
            int countryid = company.getCountry() != null ? Integer.parseInt(company.getCountry().getID()) : 0;
            
            KwlReturnObject resultavaibaleQty =null;
            String description="";
            while(sos!=null&&i<sos.length){
//                SalesOrder so=(SalesOrder)session.get(SalesOrder.class, sos[i]);
                KwlReturnObject result = accountingHandlerDAOobj.getObject(SalesReturn.class.getName(), sos[i]);
                SalesReturn salesReturn = (SalesReturn) result.getEntityList().get(0);
                filter_params.clear();
                filter_params.add(salesReturn.getID());
                KwlReturnObject podresult = accInvoiceDAOobj.getSalesReturnDetails(doRequestParams);
                Iterator itr = podresult.getEntityList().iterator();
                
                while(itr.hasNext()) {
                    SalesReturnDetail row=(SalesReturnDetail)itr.next();
                    JSONObject obj = new JSONObject();
                    obj.put("billid", salesReturn.getID());
                    obj.put("billno", salesReturn.getSalesReturnNumber());
                    obj.put("externalcurrencyrate", salesReturn.getExternalCurrencyRate());
                    obj.put("srno", row.getSrno());
                    obj.put("rowid", row.getID());
                    obj.put("currencysymbol", (salesReturn.getCurrency() == null ? currency.getSymbol() : salesReturn.getCurrency().getSymbol()));
                    obj.put("originalTransactionRowid", row.getID());
                    obj.put("productid", row.getProduct().getID());
                    obj.put("productname",row.getProduct().getName());
                    obj.put("invstore",(StringUtil.isNullOrEmpty(row.getInvstoreid()))?"":row.getInvstoreid());                    
                    obj.put("invlocation",(StringUtil.isNullOrEmpty(row.getInvlocid()))?"":row.getInvlocid());
//                    obj.put("unitname", row.getProduct().getUnitOfMeasure()==null?"":row.getProduct().getUnitOfMeasure().getName());
                    obj.put("unitname", row.getInventory().getUom()!=null?row.getInventory().getUom().getNameEmptyforNA():row.getProduct().getUnitOfMeasure()==null?"":row.getProduct().getUnitOfMeasure().getNameEmptyforNA());
                    obj.put("baseuomname", row.getProduct().getUnitOfMeasure()==null?"":row.getProduct().getUnitOfMeasure().getNameEmptyforNA());
                    obj.put("productweightperstockuom",  row.getInventory().getProductWeightPerStockUom());
                    obj.put("productweightincludingpakagingperstockuom", row.getInventory().getProductWeightIncludingPakagingPerStockUom());
                    obj.put("productvolumeperstockuom",  row.getInventory().getProductVolumePerStockUom());
                    obj.put("productvolumeincludingpakagingperstockuom", row.getInventory().getProductVolumeIncludingPakagingPerStockUom());
                    
                    if (!StringUtil.isNullOrEmpty(row.getDescription())) {
                        description = row.getDescription();
                    } else if (!StringUtil.isNullOrEmpty(row.getProduct().getDescription())) {
                        description = row.getProduct().getDescription();
                    } else {
                        description = "";
                    }
                    
                    obj.put("desc", StringUtil.DecodeText(description));                    
                    if(row.getProduct().isAsset()){     //For Fixed Asset Group, type will be "Asset"
                        obj.put("type","Asset");
                    } else {
                        obj.put("type",row.getProduct().getProducttype()==null?"":row.getProduct().getProducttype().getName());
                    }
                    obj.put("pid",row.getProduct().getProductid());
                    obj.put("memo", row.getRemark());
                    obj.put("reason", (row.getReason() != null)?row.getReason().getID():"");
                    obj.put("prtaxid", (row.getTax() != null)?row.getTax().getID():"");
                    obj.put("taxamount", row.getRowTaxAmount());
                    obj.put("taxamountforlinking", row.getRowTaxAmount());
                    obj.put("discountispercent", row.getDiscountispercent());
                    obj.put("prdiscount", row.getDiscount());
                    obj.put("quantity", row.getActualQuantity());
                    obj.put("dquantity", row.getReturnQuantity());
                    obj.put("isreusable", row.getProduct().getItemReusability()!=null?row.getProduct().getItemReusability().ordinal():1);
                    obj.put("totalissuecount", row.getPreviousIssueCount());
                    
                    double baseuomrate = row.getInventory().getBaseuomrate();
                    if(row.getInventory().getUom()!=null) {
                        obj.put("uomid", row.getInventory().getUom().getID());                        
                    } else {
                        obj.put("uomid", row.getInventory().getProduct().getUnitOfMeasure()!=null?row.getInventory().getProduct().getUnitOfMeasure().getID():"");                        
                    }
                    obj.put("baseuomquantity", authHandler.calculateBaseUOMQuatity(row.getReturnQuantity(),baseuomrate, companyid));
                    obj.put("baseuomrate", baseuomrate);
                    JSONObject jObj = null;
                    if (!StringUtil.isNullOrEmpty(extraCompanyPreferences.getColumnPref())) {
                        jObj = new JSONObject((String) extraCompanyPreferences.getColumnPref());
                        if (jObj.has(Constants.isDisplayUOM) && jObj.get(Constants.isDisplayUOM) != null && (Boolean) jObj.get(Constants.isDisplayUOM) != false) {
                            obj = accProductObj.getProductDisplayUOM(row.getProduct(), row.getReturnQuantity(), row.getBaseuomrate(), false, obj);
                        }
                    }
                    obj.put(Constants.isConsignment, salesReturn.isIsconsignment());
                    obj.put("isNoteAlso", salesReturn.isIsNoteAlso());
                    if (salesReturn.isIsconsignment()) {
                        if (salesReturn.getCustWarehouse() != null) {
                            obj.put("custWarehouse", salesReturn.getCustWarehouse().getId()); //for getting customer warehouse
                        }
                    }
                     KwlReturnObject cap = accountingHandlerDAOobj.getObject(CompanyAccountPreferences.class.getName(), sessionHandlerImpl.getCompanyid(request));
                    CompanyAccountPreferences preferences = (CompanyAccountPreferences) cap.getEntityList().get(0);
                    
                      if (!StringUtil.isNullOrEmpty(row.getProduct().getID())) {
                        KwlReturnObject prodresult = accProductObj.getObject(Product.class.getName(), row.getProduct().getID());
                        Product product = (Product) prodresult.getEntityList().get(0);
                        isBatchForProduct = product.isIsBatchForProduct();
                        isSerialForProduct = product.isIsSerialForProduct();
                        isLocationForProduct =product.isIslocationforproduct();
                        isWarehouseForProduct=product.isIswarehouseforproduct();
                        isRowForProduct = product.isIsrowforproduct();
                        isRackForProduct = product.isIsrackforproduct();
                        isBinForProduct = product.isIsbinforproduct();
                        if(extraCompanyPreferences!=null && extraCompanyPreferences.getUomSchemaType()==Constants.PackagingUOM){
                            obj.put("caseuom", (product.getPackaging()!=null && product.getPackaging().getCasingUoM()!=null)?product.getPackaging().getCasingUoM().getID():"");
                            obj.put("caseuomvalue", (product.getPackaging()!=null && product.getPackaging().getCasingUoM()!=null)?product.getPackaging().getCasingUomValue():1);
                            obj.put("inneruom", (product.getPackaging()!=null && product.getPackaging().getInnerUoM()!=null)?product.getPackaging().getInnerUoM().getID():"");
                            obj.put("inneruomvalue", (product.getPackaging()!=null && product.getPackaging().getInnerUoM()!=null)?product.getPackaging().getInnerUomValue():1);
                            obj.put("stockuom", (product.getUnitOfMeasure()!=null)?product.getUnitOfMeasure().getID():"");
                       }
                    }
                     if (preferences.isIsBatchCompulsory() || preferences.isIsSerialCompulsory() || preferences.isIslocationcompulsory() || preferences.isIswarehousecompulsory()  || preferences.isIsrowcompulsory() || preferences.isIsrackcompulsory() || preferences.isIsbincompulsory()) {  //check if company level option is on then only we will check productt level
                        if (isBatchForProduct || isSerialForProduct || isSerialForProduct || isLocationForProduct || isWarehouseForProduct || isRowForProduct || isRackForProduct  || isBinForProduct) {  //product level batch and serial no on or not
                            obj.put("batchdetails", accInvoiceServiceDAO.getNewBatchJson(row.getProduct(), requestObj, row.getID()));
                        }
                    }
     
                    obj.put("copyquantity", row.getReturnQuantity());
                    obj.put("description", StringUtil.DecodeText(description));
                    obj.put("partno", (row.getPartno()!=null) ? row.getPartno() : "" );
                    obj.put("remark", row.getRemark());
                    obj.put("rate", row.getRate());
                    obj.put("priceSource", row.getPriceSource() != null? row.getPriceSource() : "");
                     if (row.getPricingBandMasterid() != null) {
                        KwlReturnObject PricebandResult = accountingHandlerDAOobj.getObject(PricingBandMaster.class.getName(), row.getPricingBandMasterid());
                        PricingBandMaster pricingBandMaster = PricebandResult != null ? (PricingBandMaster) PricebandResult.getEntityList().get(0) : null;
                        obj.put("pricingbandmasterid", pricingBandMaster != null ? pricingBandMaster.getID() : "");
                        obj.put("pricingbandmastername", pricingBandMaster != null ? pricingBandMaster.getName() : "");
                    }
                    obj.put("isAsset", row.getProduct().isAsset());
                    obj.put("isLocationForProduct", isLocationForProduct);
                    obj.put("isWarehouseForProduct", isWarehouseForProduct);
                    obj.put("isBatchForProduct", isBatchForProduct);
                    obj.put("isSerialForProduct", isSerialForProduct);
                    if (row.getSalesReturn().isLeaseSalesReturn() || isFixedAsset) {// if it is a lease SR or Fixed Asset SR
                        getAssetDetailJsonObject(request, row, obj);
                    }

                             
                     if ((row.getDodetails()!= null) &&(!(row.getDodetails().equals("undefined")))) {
                        DeliveryOrderDetail dodetails =row.getDodetails();
                        obj.put("linkto",dodetails.getDeliveryOrder().getDeliveryOrderNumber());
                        obj.put("linkid",dodetails.getDeliveryOrder().getID());
                        obj.put("rowid", dodetails.getID());
                        obj.put("savedrowid", dodetails.getDeliveryOrder().getID());
                        obj.put("linktype", 0);
                    } else if (row.getCidetails() != null) {
                        InvoiceDetail cidetails=row.getCidetails();
                        Invoice invoice=cidetails.getInvoice();
                        obj.put("linkto", invoice.getInvoiceNumber());
                        obj.put("linkid",invoice.getID());
                        obj.put("rowid", cidetails.getID());
                        obj.put("savedrowid", cidetails.getInvoice().getID());
                        obj.put("linktype", 1);
                        obj.put("linktransactionamountdue", invoice.getInvoiceamountdue());
                    } else {
                        obj.put("linkto", "");
                        obj.put("linkid", "");
                        obj.put("linktype", -1);
                    }
                    if (extraCompanyPreferences.getProductOptimizedFlag()!=Constants.Show_all_Products) {
                        resultavaibaleQty = accProductObj.getQuantity(row.getProduct().getID());
                    
                    obj.put("availablequantity", (resultavaibaleQty.getEntityList().get(0) == null ? 0 : resultavaibaleQty.getEntityList().get(0)));

                    KwlReturnObject result2 = accProductObj.getAssemblyLockQuantity(row.getProduct().getID());//get the lock quantity of assembly type of product locked in SO
                    Double assmblyLockQuantity = (Double) (result2.getEntityList().get(0) == null ? 0.0 : result2.getEntityList().get(0));

                    KwlReturnObject result1 = accProductObj.getLockQuantity(row.getProduct().getID());
                    Double SoLockQuantity = (Double) (result1.getEntityList().get(0) == null ? 0.0 : result1.getEntityList().get(0));

                    obj.put("lockquantity", assmblyLockQuantity + SoLockQuantity);
                }
                    obj.put("recTermAmount",row.getRowtermamount());
                    obj.put("OtherTermNonTaxableAmount",row.getOtherTermNonTaxableAmount());
                    
                    JSONArray TermdetailsjArr = new JSONArray();
                    if(extraCompanyPreferences.getLineLevelTermFlag()==1){ // For India Country 
                        HashMap<String, Object> SalesReturnDetailParams = new HashMap<String, Object>();
                        SalesReturnDetailParams.put("salesReturnDetailid", row.getID());
                        KwlReturnObject srdTermMapresult = accInvoiceDAOobj.getSalesReturnDetailTermMap(SalesReturnDetailParams);
                        List<SalesReturnDetailsTermMap> SalesReturnDetailTermsMapList = srdTermMapresult.getEntityList();
                        for (SalesReturnDetailsTermMap salesReturnDetailTermMap : SalesReturnDetailTermsMapList) {
                            LineLevelTerms mt = salesReturnDetailTermMap.getTerm();
                            com.krawler.utils.json.base.JSONObject jsonObj = new com.krawler.utils.json.base.JSONObject();
                            jsonObj.put("id", mt.getId());
                            jsonObj.put("termid", salesReturnDetailTermMap.getTerm().getId());
                            jsonObj.put("term", mt.getTerm());
                            jsonObj.put("formulaids", mt.getFormula());
                            jsonObj.put("termamount", salesReturnDetailTermMap.getTermamount());
                            jsonObj.put("termpercentage", salesReturnDetailTermMap.getPercentage());
                            /**
                             * ERP-32829 
                             */
                            jsonObj.put("isDefault", salesReturnDetailTermMap.isIsGSTApplied());
                            jsonObj.put("productentitytermid", salesReturnDetailTermMap.getEntitybasedLineLevelTermRate()!=null?salesReturnDetailTermMap.getEntitybasedLineLevelTermRate().getId():"");
                            jsonObj.put("glaccountname", mt.getAccount().getName());
                            jsonObj.put("accountid", mt.getAccount().getID());
                            jsonObj.put("glaccount", mt.getAccount().getID());
                            jsonObj.put("IsOtherTermTaxable", mt.isOtherTermTaxable());
                            jsonObj.put("assessablevalue", salesReturnDetailTermMap.getAssessablevalue());
                            jsonObj.put("purchasevalueorsalevalue", salesReturnDetailTermMap.getPurchaseValueOrSaleValue());
                            jsonObj.put("deductionorabatementpercent", salesReturnDetailTermMap.getDeductionOrAbatementPercent());
                            jsonObj.put("taxtype", salesReturnDetailTermMap.getTaxType());
                            jsonObj.put("taxvalue", salesReturnDetailTermMap.getTaxType()==0 ? salesReturnDetailTermMap.getTermamount() : salesReturnDetailTermMap.getPercentage());
                            jsonObj.put("termtype", salesReturnDetailTermMap.getTerm().getTermType());
                            jsonObj.put("termsequence", salesReturnDetailTermMap.getTerm().getTermSequence());
                            jsonObj.put("payableaccountid", mt.getPayableAccount() != null ? mt.getPayableAccount().getID() : "");
                            TermdetailsjArr.put(jsonObj);
                        }
                    }
                    obj.put("LineTermdetails",TermdetailsjArr);
            
                     
                     Map<String, Object> variableMap = new HashMap<String, Object>();
                    SalesReturnDetailCustomData salesReturnDetailCustomData = (SalesReturnDetailCustomData) row.getSalesReturnDetailCustomData();
                    AccountingManager.setCustomColumnValues(salesReturnDetailCustomData, FieldMap, replaceFieldMap,variableMap);
                    if (salesReturnDetailCustomData != null) {
//                        boolean isExport = (request.getAttribute("isExport") == null) ? false : true;
                        JSONObject params = new JSONObject();
//                        if (isForReport) {
//                            isExport = true;
//                        }
                        params.put("isExport", isExport);
                        params.put("isForReport", isForReport);
                        fieldDataManagercntrl.getLineLevelCustomData(variableMap, customFieldMap, customDateFieldMap, obj, params);
                    }
                    // Get Product level Custom field data
                    HashMap<String, Object> fieldrequestParamsProduct = new HashMap();
                    HashMap<String, String> customProductFieldMap = new HashMap<String, String>();
                    HashMap<String, String> customProductDateFieldMap = new HashMap<String, String>();
                    Map<String, Object> variableMapProduct = new HashMap<String, Object>();
                    fieldrequestParamsProduct.put(Constants.filter_names, Arrays.asList(Constants.companyid, Constants.moduleid, Constants.customcolumn));
                    fieldrequestParamsProduct.put(Constants.filter_values, Arrays.asList(sessionHandlerImpl.getCompanyid(request), Constants.Acc_Product_Master_ModuleId, 0));
                    HashMap<String, String> replaceFieldMapProduct = new HashMap<String, String>();
                    HashMap<String, Integer> FieldMapProduct = accAccountDAOobj.getFieldParamsCustomMapForRows(fieldrequestParamsProduct, replaceFieldMapProduct, customProductFieldMap, customProductDateFieldMap);
                    SalesReturnDetailProductCustomData SRDetailProductCustomData = (SalesReturnDetailProductCustomData) row.getSalesReturnDetailProductCustomData();
                    AccountingManager.setCustomColumnValues(SRDetailProductCustomData, FieldMapProduct, replaceFieldMapProduct, variableMapProduct);
                    
                     if (SRDetailProductCustomData != null) {
//                         boolean isExport = (request.getAttribute("isExport") == null) ? false : true;
                        JSONObject params = new JSONObject();
//                        if (isForReport) {
//                            isExport = true;
//                        }
                        params.put("isExport", isExport);
                        params.put("isForReport", isForReport);
                        fieldDataManagercntrl.getLineLevelCustomData(variableMapProduct, customProductFieldMap, customProductDateFieldMap, obj, params);
                    }
//                    
//                    for (Map.Entry<String, Object> varEntry : variableMap.entrySet()) {
//                        String coldata = varEntry.getValue().toString();
//                            String valueForReport="";
//                            if (customFieldMap.containsKey(varEntry.getKey()) && isForReport && coldata != null) {
//                                    try {
//                                            String[] valueData = coldata.split(",");
//                                            for (String value : valueData) {
//                                                FieldComboData fieldComboData = (FieldComboData) kwlCommonTablesDAOObj.getClassObject(FieldComboData.class.getName(), value);
//                                                if (fieldComboData != null) {
//                                                    valueForReport +=fieldComboData.getValue() + "," ;
//                                                }
//                                            }
//                                            if(valueForReport.length() > 1){
//                                                valueForReport=valueForReport.substring(0,valueForReport.length() -1);
//                                            }
//                                            obj.put(varEntry.getKey(), valueForReport);//fieldComboData.getValue()!=null ?fieldComboData.getValue():"");
//                                        } catch (Exception ex) {
//                                            obj.put(varEntry.getKey(), coldata);
//                                        }
//                            } else if (customDateFieldMap.containsKey(varEntry.getKey()) && isForReport) {
//                                DateFormat df2 = new SimpleDateFormat("yyyy-MM-dd");
//                                long milliSeconds = Long.parseLong(coldata);
//                                coldata = df2.format(milliSeconds);
//                                obj.put(varEntry.getKey(), coldata);
//                            } else {
//                        if (!StringUtil.isNullOrEmpty(coldata)) {
//                            obj.put(varEntry.getKey(), coldata);
//                        }
//                    }
//                    }
                    
                    jArr.put(obj);
                }
                i++;
                jobj.put(Constants.data, jArr);
            }
        } catch (JSONException je) {
            throw ServiceException.FAILURE(je.getMessage(), je);
        }
        return jobj;
    }
     
     
    private void getAssetDetailJsonObject(HttpServletRequest request, SalesReturnDetail row, JSONObject obj) throws ServiceException, JSONException, SessionExpiredException, UnsupportedEncodingException {
        JSONObject requestObj = StringUtil.convertRequestToJsonObject(request);
        boolean isFixedAsset = (!StringUtil.isNullOrEmpty(request.getParameter(Constants.isFixedAsset))) ? Boolean.parseBoolean(request.getParameter(Constants.isFixedAsset)) : false;
        String companyid = sessionHandlerImpl.getCompanyid(request);
        DateFormat df = authHandler.getDateFormatter(request);
        boolean isBatchForProduct = false;
        boolean isSerialForProduct = false;
        boolean isLocationForProduct = false;
        boolean isWarehouseForProduct = false;
        boolean isRowForProduct = false;
        boolean isRackForProduct = false;
        boolean isBinForProduct = false;
        JSONArray assetDetailsJArr = new JSONArray();
        HashMap<String, Object> assetDetailsParams = new HashMap<String, Object>();
        assetDetailsParams.put("companyid", companyid);
        assetDetailsParams.put("invoiceDetailId", row.getID());
        assetDetailsParams.put("moduleId", isFixedAsset? Constants.Acc_FixedAssets_Sales_Return_ModuleId : Constants.Acc_Sales_Return_ModuleId);

        KwlReturnObject cpresult = accountingHandlerDAOobj.getObject(CompanyAccountPreferences.class.getName(), companyid);
        CompanyAccountPreferences preferences = (CompanyAccountPreferences) cpresult.getEntityList().get(0);
        boolean isBatchSerial = preferences.isShowprodserial();
        boolean isFixedAssetDO = true;
        KwlReturnObject assetInvMapObj = accProductObj.getAssetInvoiceDetailMapping(assetDetailsParams);
        List assetInvMapList = assetInvMapObj.getEntityList();
        Iterator assetInvMapListIt = assetInvMapList.iterator();

        while (assetInvMapListIt.hasNext()) {
            AssetInvoiceDetailMapping invoiceDetailMapping = (AssetInvoiceDetailMapping) assetInvMapListIt.next();
            AssetDetails assetDetails = invoiceDetailMapping.getAssetDetails();
            JSONObject assetDetailsJOBJ = new JSONObject();

            assetDetailsJOBJ.put("assetId", assetDetails.getId());

            assetDetailsJOBJ.put("assetdetailId", assetDetails.getId());
            assetDetailsJOBJ.put("sellAmount", assetDetails.getSellAmount());
            assetDetailsJOBJ.put("assetName", assetDetails.getAssetId());
            assetDetailsJOBJ.put("location", (assetDetails.getLocation() != null) ? assetDetails.getLocation().getId() : "");
            assetDetailsJOBJ.put("department", (assetDetails.getDepartment() != null) ? assetDetails.getDepartment().getId() : "");
            assetDetailsJOBJ.put("assetdescription", (assetDetails.getAssetDescription() != null) ? assetDetails.getAssetDescription() : "");
            assetDetailsJOBJ.put("assetUser", (assetDetails.getAssetUser() != null) ? assetDetails.getAssetUser().getUserID() : "");
            assetDetailsJOBJ.put("cost", assetDetails.getCost());
            assetDetailsJOBJ.put("salvageRate", assetDetails.getSalvageRate());
            assetDetailsJOBJ.put("salvageValue", assetDetails.getSalvageValue());
            assetDetailsJOBJ.put("accumulatedDepreciation", assetDetails.getAccumulatedDepreciation());
//            assetDetailsJOBJ.put("wdv", assetDetails.getWdv
            
            assetDetailsJOBJ.put("assetLife", assetDetails.getAssetLife());
            assetDetailsJOBJ.put("elapsedLife", assetDetails.getElapsedLife());
            assetDetailsJOBJ.put("nominalValue", assetDetails.getElapsedLife());
            assetDetailsJOBJ.put("installationDate", df.format(assetDetails.getInstallationDate()));
            assetDetailsJOBJ.put("purchaseDate", df.format(assetDetails.getPurchaseDate()));
            HashMap<String, Object> fieldrequestParams1 = new HashMap();
            fieldrequestParams1.put(Constants.filter_names, Arrays.asList(Constants.companyid, Constants.moduleid, Constants.customcolumn));
            fieldrequestParams1.put(Constants.filter_values, Arrays.asList(sessionHandlerImpl.getCompanyid(request), Constants.Acc_FixedAssets_Details_ModuleId, 1));
            HashMap<String, String> customFieldMap1 = new HashMap<String, String>();
            HashMap<String, String> customDateFieldMap1 = new HashMap<String, String>();
            HashMap<String, String> replaceFieldMap11 = new HashMap<String, String>();
            HashMap<String, Integer> fieldMap1 = accAccountDAOobj.getFieldParamsCustomMapForRows(fieldrequestParams1, replaceFieldMap11, customFieldMap1, customDateFieldMap1);
            Map<String, Object> variableMap = new HashMap<String, Object>();
            AssetDetailsCustomData jeDetailCustom = (AssetDetailsCustomData) assetDetails.getAssetDetailsCustomData();
            replaceFieldMap11 = new HashMap<String, String>();
            if (jeDetailCustom != null) {
                AccountingManager.setCustomColumnValues(jeDetailCustom, fieldMap1, replaceFieldMap11, variableMap);
                JSONObject params = new JSONObject();
                params.put("companyid", companyid);
                params.put("getCustomFieldArray", true);
                fieldDataManagercntrl.getLineLevelCustomData(variableMap, customFieldMap1, customDateFieldMap1, assetDetailsJOBJ, params);
            }
//             if (!StringUtil.isNullOrEmpty(row.getProduct().getID())) {
//                KwlReturnObject prodresult = accProductObj.getObject(Product.class.getName(), row.getProduct().getID());
//                Product product = (Product) prodresult.getEntityList().get(0);
//                isBatchForProduct = product.isIsBatchForProduct();
//                isSerialForProduct = product.isIsSerialForProduct();
//            }
//            if (pref.isIsBatchCompulsory() || pref.isIsSerialCompulsory()) {  //check if company level option is on then only we will check productt level
//                if (isBatchForProduct || isSerialForProduct) {
//                    assetDetailsJOBJ.put("batchdetails", (assetDetails.getBatch() == null) ? "" : getBatchJson(assetDetails.getBatch(), isFixedAssetDO, pref.isIsBatchCompulsory(), isBatchForProduct, pref.isIsSerialCompulsory(), isSerialForProduct, request, -1));// ModuleID is sent -1 because in function getBatchJson , only sales return is having entries in different table(ReturnBatchMapping)
//                }
//            }
            if (!StringUtil.isNullOrEmpty(row.getProduct().getID())) {
                KwlReturnObject prodresult = accProductObj.getObject(Product.class.getName(), row.getProduct().getID());
                Product product = (Product) prodresult.getEntityList().get(0);
                isBatchForProduct = product.isIsBatchForProduct();
                isSerialForProduct = product.isIsSerialForProduct();
                isLocationForProduct = product.isIslocationforproduct();
                isWarehouseForProduct = product.isIswarehouseforproduct();
                isRowForProduct = product.isIsrowforproduct();
                isRackForProduct = product.isIsrackforproduct();
                isBinForProduct = product.isIsbinforproduct();
            }
            if (preferences.isIsBatchCompulsory() || preferences.isIsSerialCompulsory() || preferences.isIslocationcompulsory() || preferences.isIswarehousecompulsory()  || preferences.isIsrowcompulsory() || preferences.isIsrackcompulsory() || preferences.isIsbincompulsory()) {  //check if company level option is on then only we will check productt level
                if (isBatchForProduct || isSerialForProduct || isSerialForProduct || isLocationForProduct || isWarehouseForProduct || isRowForProduct || isRackForProduct  || isBinForProduct) {  //product level batch and serial no on or not
                    assetDetailsJOBJ.put("batchdetails", accInvoiceServiceDAO.getNewBatchJson(row.getProduct(), requestObj, assetDetails.getId()));
                }
            }
            assetDetailsJArr.put(assetDetailsJOBJ);
        }
        obj.put("assetDetails", assetDetailsJArr.toString());
    }
     
    public String getPurchaseBatchid(String salesid,int moduleId) throws ServiceException {
      String purchaseMapId="";
      //SalesPurchaseBatchMapping productBatch=null; 
       HashMap<String, Object> filterRequestParams = new HashMap<String, Object>();
            ArrayList filter_names = new ArrayList(),filter_params = new ArrayList(), order_by = new ArrayList(), order_type = new ArrayList();
            if(moduleId== Constants.Acc_Sales_Return_ModuleId){
                filter_names.add("batchmap.id");                   //For sales return , entries are in different table(ReturnBatchMapping) , so parameter is batchmap.id
            } else {
            filter_names.add("salesBatch.id");
            }
            filter_params.add(salesid);
            order_by.add("id");
            order_type.add("asc");
            filterRequestParams.put("filter_names", filter_names);
            filterRequestParams.put("filter_params", filter_params);
            filterRequestParams.put("order_by", order_by);
            filterRequestParams.put("order_type", order_type);
            filterRequestParams.put(Constants.moduleid,moduleId);
            KwlReturnObject result = accCommonTablesDAO.getBatchMappingDetails(filterRequestParams);
            
             List list = result.getEntityList();
        Iterator iter = list.iterator();
        int i = 1;
        while (iter.hasNext()) {
            if (moduleId == Constants.Acc_Sales_Return_ModuleId) {
                ReturnBatchMapping productBatch = (ReturnBatchMapping) iter.next();
                if (productBatch != null) {
                    purchaseMapId = productBatch.getBatchmap().getId();
                }
            } else {
                SalesPurchaseBatchMapping productBatch = (SalesPurchaseBatchMapping) iter.next();
                if (productBatch != null) {
                    purchaseMapId = productBatch.getPurchaseBatch().getId();
                }
            }
    }
    return purchaseMapId ;
}

    public String getPurchaseSerialid(String salesid) throws ServiceException {
      String purchaseMapId="";
      BatchSerialMapping batchSerialMapping=null;
       HashMap<String, Object> filterRequestParams = new HashMap<String, Object>();
            ArrayList filter_names = new ArrayList(),filter_params = new ArrayList(), order_by = new ArrayList(), order_type = new ArrayList();
            filter_names.add("salesSerial.id");
            filter_params.add(salesid);
            filterRequestParams.put("filter_names", filter_names);
            filterRequestParams.put("filter_params", filter_params);
            KwlReturnObject result = accCommonTablesDAO.getSerialMappingDetails(filterRequestParams);
            
             List list = result.getEntityList();
        Iterator iter = list.iterator();
        int i = 1;
        while (iter.hasNext()) {
            batchSerialMapping = (BatchSerialMapping) iter.next();
        }
      if(batchSerialMapping!=null){
          purchaseMapId=batchSerialMapping.getPurchaseSerial().getId();
      }
      return purchaseMapId;
        
    } 
    
     public ModelAndView exportDeliveryOrder(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        String view = "jsonView_ex";
        try{
            HashMap<String, Object> requestParams = accInvoiceServiceDAO.getDeliveryOrdersMap(request);
            boolean pendingapproval = request.getParameter("pendingapproval")!=null?Boolean.parseBoolean(request.getParameter("pendingapproval")):false;
            boolean consolidateFlag = request.getParameter("consolidateFlag")!=null?Boolean.parseBoolean(request.getParameter("consolidateFlag")):false;            
            String companyid = (consolidateFlag && request.getParameter(Constants.companyids)!=null)?request.getParameter(Constants.companyids):sessionHandlerImpl.getCompanyid(request);
            String gcurrencyid = (consolidateFlag && request.getParameter(Constants.globalCurrencyKey)!=null)?request.getParameter(Constants.globalCurrencyKey):sessionHandlerImpl.getCurrencyID(request);                        
            boolean salesPersonFilterFlag = request.getParameter("salesPersonFilterFlag")!=null?Boolean.parseBoolean(request.getParameter("salesPersonFilterFlag")):false;
            String newCustomerId = !StringUtil.isNullOrEmpty(request.getParameter("newcustomerid")) ? request.getParameter("newcustomerid") : "";
            boolean isOptimizedExport = true;
            request.setAttribute(Constants.companyKey, companyid);
            request.setAttribute(Constants.globalCurrencyKey, gcurrencyid);
            requestParams.put(Constants.companyKey, companyid);
            requestParams.put(Constants.globalCurrencyKey, gcurrencyid);
            requestParams.put("pendingapproval", pendingapproval);
            requestParams.put("newcustomerid", newCustomerId);
            request.setAttribute(Constants.isExport, true);
            ExtraCompanyPreferences extraPref = (ExtraCompanyPreferences) kwlCommonTablesDAOObj.getClassObject("com.krawler.common.admin.ExtraCompanyPreferences", sessionHandlerImpl.getCompanyid(request));
            if (extraPref != null && extraPref.isEnablesalespersonAgentFlow()) {
                int permCode = sessionHandlerImpl.getPerms(request, Constants.CUSTOMER_PERMCODE);
                if (!((permCode & Constants.CUSTOMER_VIEWALL_PERMCODE) == Constants.CUSTOMER_VIEWALL_PERMCODE)) {
                    /*
                     * when (permCode & Constants.CUSTOMER_VIEWALL_PERMCODE) == Constants.CUSTOMER_VIEWALL_PERMCODE is true then user has permission to view all customers documents,so at that time there is need to filter record according to user&salesperson. 
                     */
                    String userId = sessionHandlerImpl.getUserid(request);
                    requestParams.put(Constants.useridKey , userId);
                    requestParams.put("enablesalespersonagentflow", extraPref.isEnablesalespersonAgentFlow());
                }
            }
            boolean upsIntegrationFlag = false; //Flag to indicate whether or not UPS REST integration is enabled ERP-31339
            if (extraPref != null) {
                upsIntegrationFlag = extraPref.isUpsIntegration();
            }
            requestParams.put("upsIntegrationFlag", upsIntegrationFlag);
//            KwlReturnObject result = accInvoiceDAOobj.getDeliveryOrdersMerged(requestParams);
            boolean isUnInvoiced = request.getParameter("isUnInvoiced")!=null?Boolean.parseBoolean(request.getParameter("isUnInvoiced")):false;
//          System.out.println("exportDeliveryOrder -- isUnInvoiced:"+isUnInvoiced);                         
            KwlReturnObject result = null;          
            requestParams.put("userid", sessionHandlerImpl.getUserid(request));
            if (salesPersonFilterFlag) {
                requestParams.put("salesPersonFilterFlag", salesPersonFilterFlag);
            }
            if (!StringUtil.isNullOrEmpty(request.getParameter("dir")) && !StringUtil.isNullOrEmpty(request.getParameter("sort"))) {
            requestParams.put("dir", request.getParameter("dir"));
            requestParams.put("sort", request.getParameter("sort"));
            }
            if(isUnInvoiced)
            {
                requestParams.put("isUnInvoiced",isUnInvoiced );
            }
            if (!isUnInvoiced)
                result = accInvoiceDAOobj.getDeliveryOrdersMerged(requestParams);
            else
                result = accInvoiceDAOobj.getUnInvoicedDeliveryOrders(requestParams);
            
            JSONObject paramJobj = StringUtil.convertRequestToJsonObject(request);
            int permCode = sessionHandlerImpl.getPerms(request, Constants.CUSTOMER_PERMCODE);
            paramJobj.put(Constants.permCode, permCode);
            paramJobj.put("isOptimizedExport",isOptimizedExport);
            if(extraPref != null){
                paramJobj.put("ExtraCompanyPreferencesObject", extraPref);
            }
//            JSONArray jarr = accInvoiceServiceDAO.getDeliveryOrdersJsonMerged(request, result.getEntityList());
            JSONArray jarr = accInvoiceServiceDAO.getDeliveryOrdersJsonMerged(paramJobj, result.getEntityList());
            
             if (request.getParameter("type")!=null && request.getParameter("type").equals(Constants.detailedXls)) {
                request.setAttribute("isOptimizedExport", true);
                jarr = getDetailExcelJsonDeliveryOrder(request, response, requestParams, jarr);
            }
            String fileType = request.getParameter("filetype");
            if (StringUtil.equal(fileType, "print")) {
                jarr = exportDaoObj.addTotalsForPrint(jarr, companyid);
            }
            jobj.put(Constants.data, jarr);
            if (StringUtil.equal(fileType, "print")) {
                String  GenerateDate = authHandler.getDateFormatter(request).format(new Date());
                jobj.put("GenerateDate", GenerateDate);
                view = "jsonView-empty";
            }else if(fileType.equals(Constants.xls)){
             request.setAttribute("isSummaryXls", true);
            }
            exportDaoObj.processRequest(request, response, jobj);
        } catch (SessionExpiredException ex) {
            Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
        } catch(Exception ex) {
            Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
        }
        return new ModelAndView(view, "model", jobj.toString());
    }
    public JSONArray getDetailExcelJsonDeliveryOrder(HttpServletRequest request, HttpServletResponse response, HashMap<String, Object> requestParams, JSONArray DataJArr) throws SessionExpiredException, JSONException, ServiceException, SessionExpiredException {
        boolean consolidateFlag = request.getParameter("consolidateFlag") != null ? Boolean.parseBoolean(request.getParameter("consolidateFlag")) : false;
        String[] companyids = (consolidateFlag && request.getParameter(Constants.companyids) != null) ? request.getParameter(Constants.companyids).split(",") : sessionHandlerImpl.getCompanyid(request).split(",");
        String gcurrencyid = (consolidateFlag && request.getParameter(Constants.globalCurrencyKey) != null) ? request.getParameter(Constants.globalCurrencyKey) : sessionHandlerImpl.getCurrencyID(request);
        String companyid = companyids[0];
        JSONArray tempArray = new JSONArray();
        HashMap fieldMap = new HashMap();
        DateFormat userDateFormat = null;
        if (requestParams.containsKey(Constants.userdf) && requestParams.get(Constants.userdf) != null) {
            userDateFormat = (DateFormat) requestParams.get(Constants.userdf);
            request.setAttribute(Constants.userdf, userDateFormat);
        }
        boolean isFixedAsset = Boolean.FALSE.parseBoolean(request.getParameter(Constants.isFixedAsset));
        boolean isConsignment = Boolean.FALSE.parseBoolean(request.getParameter(Constants.isConsignment));
        boolean isLeaseFixedAsset = (!StringUtil.isNullOrEmpty(request.getParameter(Constants.isLeaseFixedAsset))) ? Boolean.parseBoolean(request.getParameter(Constants.isLeaseFixedAsset)) : false;
        Map reqParam = new HashMap();
        reqParam.put("companyid", companyid);
        reqParam.put("isFixedAsset", isFixedAsset);
        reqParam.put("isConsignment", isConsignment);
        reqParam.put("isLeaseFixedAsset", isLeaseFixedAsset);
        try {
            fieldMap = accInvoiceServiceDAO.getDODetailsCustomFieldMap(reqParam);

            for (int i = 0; i < DataJArr.length(); i++) {
                JSONObject rowjobj = new JSONObject();
                rowjobj = DataJArr.getJSONObject(i);
                String billid = rowjobj.optString(Constants.billid, "");
                request.setAttribute(Constants.companyKey, companyid);
                request.setAttribute(Constants.globalCurrencyKey, gcurrencyid);
                request.setAttribute(Constants.billid, billid);
                request.setAttribute("isForReport", true);
                JSONArray DataRowsArr = null;
                DataRowsArr = accInvoiceServiceDAO.getDeliveryOrderRows(request, fieldMap).getJSONArray(Constants.data);
                tempArray.put(rowjobj);
                for (int j = 0; j < DataRowsArr.length(); j++) {
                    JSONObject tempjobj = new JSONObject();
                    tempjobj = DataRowsArr.getJSONObject(j);
                    exportDaoObj.editJsonKeyForExcelFile(tempjobj, Constants.Acc_Delivery_Order_ModuleId);
                    tempArray.put(tempjobj);
                }
            }
        } catch (ParseException ex) {
            Logger.getLogger(accSalesOrderControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
        }
        return tempArray;
    } 
     public ModelAndView exportSalesReturn(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        String view = "jsonView_ex";
        try{
            HashMap<String, Object> requestParams = accInvoiceServiceDAO.getDeliveryOrdersMap(request);
            boolean consolidateFlag = request.getParameter("consolidateFlag")!=null?Boolean.parseBoolean(request.getParameter("consolidateFlag")):false;            
            String companyid = (consolidateFlag && request.getParameter(Constants.companyids)!=null)?request.getParameter(Constants.companyids):sessionHandlerImpl.getCompanyid(request);
            String gcurrencyid = (consolidateFlag && request.getParameter(Constants.globalCurrencyKey) != null) ? request.getParameter(Constants.globalCurrencyKey) : sessionHandlerImpl.getCurrencyID(request);
            request.setAttribute(Constants.companyKey, companyid);
            request.setAttribute(Constants.globalCurrencyKey, gcurrencyid);
            requestParams.put(Constants.companyKey, companyid);
            requestParams.put(Constants.globalCurrencyKey, gcurrencyid);
            request.setAttribute(Constants.isExport, true);
                
             ExtraCompanyPreferences extraPref = (ExtraCompanyPreferences) kwlCommonTablesDAOObj.getClassObject("com.krawler.common.admin.ExtraCompanyPreferences", sessionHandlerImpl.getCompanyid(request));
            if (extraPref != null && extraPref.isEnablesalespersonAgentFlow()) {
                int permCode = sessionHandlerImpl.getPerms(request, Constants.CUSTOMER_PERMCODE);
                if (!((permCode & Constants.CUSTOMER_VIEWALL_PERMCODE) == Constants.CUSTOMER_VIEWALL_PERMCODE)) {
                    /*
                     * when (permCode & Constants.CUSTOMER_VIEWALL_PERMCODE) == Constants.CUSTOMER_VIEWALL_PERMCODE is true then user has permission to view all customers documents,so at that time there is need to filter record according to user&salesperson. 
                     */
                    String userId = sessionHandlerImpl.getUserid(request);
                    requestParams.put(Constants.useridKey , userId);
                    requestParams.put("enablesalespersonagentflow", extraPref.isEnablesalespersonAgentFlow());
                }
            }
            boolean isSalesReturnCreditNote = false;
            if (!StringUtil.isNullOrEmpty(request.getParameter("isNoteReturns"))) {
                isSalesReturnCreditNote = Boolean.parseBoolean(request.getParameter("isNoteReturns"));
            }
            requestParams.put("isSalesReturnCreditNote", isSalesReturnCreditNote);
            KwlReturnObject result = accInvoiceDAOobj.getSalesReturn(requestParams);
            JSONObject paramJobj=StringUtil.convertRequestToJsonObject(request);
            JSONArray jarr = accInvoiceServiceDAO.getSalesReturnJson(paramJobj, result.getEntityList());
            if (request.getParameter("type") != null && request.getParameter("type").equals(Constants.detailedXls)) {
                jarr = getDetailExcelJsonSalesReturn(request, response, requestParams, jarr);
            }
            jobj.put(Constants.data, jarr);
            String fileType = request.getParameter("filetype");
            if (StringUtil.equal(fileType, "print")) {
                String  GenerateDate = authHandler.getDateFormatter(request).format(new Date());
                jobj.put("GenerateDate", GenerateDate);
                view = "jsonView-empty";
            }else if(fileType.equals(Constants.xls)){
             request.setAttribute("isSummaryXls", true);
            }
            exportDaoObj.processRequest(request, response, jobj);
        } catch (SessionExpiredException ex) {
            Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
        } catch(Exception ex) {
            Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
        }
        return new ModelAndView(view, "model", jobj.toString());
    }
      public JSONArray getDetailExcelJsonSalesReturn(HttpServletRequest request, HttpServletResponse response, HashMap<String, Object> requestParams, JSONArray DataJArr) throws JSONException, SessionExpiredException, ServiceException, SessionExpiredException, SessionExpiredException, SessionExpiredException, UnsupportedEncodingException {
        boolean consolidateFlag = request.getParameter("consolidateFlag") != null ? Boolean.parseBoolean(request.getParameter("consolidateFlag")) : false;
        String[] companyids = (consolidateFlag && request.getParameter(Constants.companyids) != null) ? request.getParameter(Constants.companyids).split(",") : sessionHandlerImpl.getCompanyid(request).split(",");
        String gcurrencyid = (consolidateFlag && request.getParameter(Constants.globalCurrencyKey) != null) ? request.getParameter(Constants.globalCurrencyKey) : sessionHandlerImpl.getCurrencyID(request);
        String companyid = companyids[0];
        JSONArray tempArray = new JSONArray();
         for (int i = 0; i < DataJArr.length(); i++) {
             JSONObject rowjobj = new JSONObject();
             rowjobj = DataJArr.getJSONObject(i);
             String billid = rowjobj.optString(Constants.billid, "");   //Invoice ID 
             request.setAttribute(Constants.companyKey, companyid);
             request.setAttribute(Constants.globalCurrencyKey, gcurrencyid);
             request.setAttribute(Constants.billid, billid);
             JSONArray DataRowsArr = null;
             JSONObject paramJobj=StringUtil.convertRequestToJsonObject(request);
             DataRowsArr = accInvoiceServiceDAO.getSalesReturnRows(paramJobj).getJSONArray(Constants.data);
             tempArray.put(rowjobj);
             rowjobj.put("type","");
             for (int j = 0; j < DataRowsArr.length(); j++) {
                 JSONObject tempjobj = new JSONObject();
                 tempjobj = DataRowsArr.getJSONObject(j);
                 exportDaoObj.editJsonKeyForExcelFile(tempjobj, Constants.Acc_Sales_Return_ModuleId);
                 tempArray.put(tempjobj);
             }
         }
        return tempArray;
    }
    public ModelAndView exportInvoices(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        JSONArray DataJArr = new JSONArray();
        String view = "jsonView_ex";
        boolean isAged = request.getParameter("isAged")!=null?Boolean.parseBoolean(request.getParameter("isAged")):false;
        int moduleIDForFetchingGroupingData=!StringUtil.isNullOrEmpty(request.getParameter("moduleIDForFetchingGroupingData")) ? Integer.parseInt(request.getParameter("moduleIDForFetchingGroupingData")) : 0;
        try{
            request.setAttribute("isAgeingExport", true);
            ModelAndView result = getInvoicesMerged(request, response);
            String model = (String) result.getModel().get("model");
            JSONObject objJSONObj = new JSONObject(model);
            DataJArr = objJSONObj.getJSONArray(Constants.data);
             if (isAged && !(Constants.moduleSetForAgedReceivable.contains(moduleIDForFetchingGroupingData))) {                //sort Json as per vendor and calculate total for CSV
                String sortKey = "type";
                DataJArr=AccountingManager.sortJsonArrayOnStringValues(DataJArr,sortKey, true);
                  /**
                 * Detail Export AR(CSV,XLS,PRINT)
                 */
                
                String dir = "";
                String sort = "";
                if (!StringUtil.isNullOrEmpty(request.getParameter("dir")) && !StringUtil.isNullOrEmpty(request.getParameter("sort"))) {
                    dir = request.getParameter("dir");
                    sort = request.getParameter("sort");
                }
                if (sort.equals("code") && !(sort.equals(""))) {     //Sort record by Customer code
                    sortKey = "code";
                } else {
                    sortKey = "personname";  //Sort record by Customer Name
                }
                if (dir.equals("DESC")) {
                    DataJArr = AccountingManager.sortJsonArrayOnStringValuesByIgnoringCase(DataJArr, sortKey, false);
                } else {
                    DataJArr = AccountingManager.sortJsonArrayOnStringValuesByIgnoringCase(DataJArr, sortKey, true);    //show multigrouping JSONArray required to sort    
                }
                DataJArr = AccInvoiceServiceHandler.calculateSubtotal(request,DataJArr);
            }
            jobj.put(Constants.data, DataJArr);
            String fileType = request.getParameter("filetype");
            if (StringUtil.equal(fileType, "print")) {
                 String startDate = request.getParameter("startdate");
                String endDate = request.getParameter("enddate");
                if (!StringUtil.isNullOrEmpty(startDate) && !StringUtil.isNullOrEmpty(endDate)) {
                    startDate = authHandler.getDateOnlyFormat().format(authHandler.getDateOnlyFormat().parse(startDate));
                    endDate = authHandler.getDateOnlyFormat().format(authHandler.getDateOnlyFormat().parse(endDate));
                    jobj.put("isFromToDateRequired", true);
                    jobj.put("stdate", startDate);
                    jobj.put("enddate", endDate);
                } else {
                    String GenerateDate = authHandler.getDateOnlyFormat().format(new Date());
                    jobj.put("GenerateDate", GenerateDate);
                }
                view = "jsonView-empty";
            }
            exportDaoObj.processRequest(request, response, jobj);
        } catch (SessionExpiredException ex) {
            Logger.getLogger(accInvoiceController.class.getName()).log(Level.SEVERE, null, ex);
        } catch(Exception ex) {
            Logger.getLogger(accInvoiceController.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        
        return new ModelAndView(view, "model", jobj.toString());
    }
    
    public JSONArray getOpeningBalanceInvoicesJsonArray(HttpServletRequest request, JSONArray DataJArr,HashSet invoicesList) {
        try {
            HashMap requestParams = AccInvoiceServiceHandler.getInvoiceRequestMap(request);
            DateFormat df = authHandler.getDateOnlyFormat();
            String companyid = sessionHandlerImpl.getCompanyid(request);
            KwlReturnObject extraprefresult = accountingHandlerDAOobj.getObject(ExtraCompanyPreferences.class.getName(), companyid);
            ExtraCompanyPreferences extraCompanyPreferences = extraprefresult != null ? (ExtraCompanyPreferences) extraprefresult.getEntityList().get(0) : null;
            String accountId = request.getParameter("accid");
            if (!StringUtil.isNullOrEmpty(accountId)) {
                requestParams.put(Constants.customerid, accountId);
            }
            if (requestParams.containsKey("currencyfilterfortrans")&&requestParams.containsKey("isReceipt")) {
                    String currencyFilterForTrans = requestParams.get("currencyfilterfortrans") != null ? (String) requestParams.get("currencyfilterfortrans") : "";
            }        
            boolean ignoreZero = requestParams.get("ignorezero") != null ? Boolean.parseBoolean(requestParams.get("ignorezero").toString()) : request.getParameter("ignorezero") != null;
            boolean onlyAmountDue = requestParams.get("onlyamountdue") != null;
            boolean doflag = request.getParameter("doflag") != null ? true : false;
            boolean forMonthWiseInvoice = request.getParameter("forMonthWiseInvoices") == null ?false:Boolean.parseBoolean(request.getParameter("forMonthWiseInvoices").toString());
            String months = request.getParameter("months")==null?"":request.getParameter("months").toString();
            boolean getOnlyAmountDueInJson = request.getAttribute("getOnlyAmountDueInJson") != null ? Boolean.parseBoolean(request.getAttribute("getOnlyAmountDueInJson").toString()) : false;
            
            Set<Integer> monthsSet = new HashSet<Integer>();
            if (forMonthWiseInvoice && !(StringUtil.isNullOrEmpty(months))) {
                String[] monthsArray = months.split(",");
                for (int i = 0; i < monthsArray.length; i++) {
                    monthsSet.add(Integer.parseInt(monthsArray[i]));
                }
            }
            boolean notlinkCNFromInvoiceFlag = false;
            if (!StringUtil.isNullOrEmpty(request.getParameter("notlinkCNFromInvoiceFlag"))) {
                notlinkCNFromInvoiceFlag = Boolean.parseBoolean(request.getParameter("notlinkCNFromInvoiceFlag"));
            }
            boolean salesPurchaseReturnflag = false;
            if (!StringUtil.isNullOrEmpty(request.getParameter("salesPurchaseReturnflag"))) {
                salesPurchaseReturnflag = Boolean.parseBoolean(request.getParameter("salesPurchaseReturnflag"));
            }

            KwlReturnObject curresult = accountingHandlerDAOobj.getObject(KWLCurrency.class.getName(), sessionHandlerImpl.getCurrencyID(request));
            KWLCurrency currency = (KWLCurrency) curresult.getEntityList().get(0);

            requestParams.put("df", df);
            if(request.getParameter("forMonthWiseInvoices") != null){
                requestParams.put("forMonthWiseInvoices",request.getParameter("forMonthWiseInvoices"));
            }
            boolean isEdit = request.getParameter("isEdit") == null ? false : Boolean.parseBoolean(request.getParameter("isEdit"));
            int moduleId = !StringUtil.isNullOrEmpty(request.getParameter("requestModuleid")) ? Integer.parseInt(request.getParameter("requestModuleid")) : 0;
            /*
             * onlyclaimedamountdue is used for loading the invoices having amount due  = 0 but claimed amount due not equal to 0 
             */
            requestParams.put("onlyclaimedamountdue", true);
            KwlReturnObject result = accInvoiceDAOobj.getOpeningBalanceInvoicesExcludingNormalInvoices(requestParams);
            List<Invoice> list = result.getEntityList();
            boolean isInvoiceIsClaimed=false;
            double amountdue = 0.0d;
            for (Invoice invoice : list) {

                if (invoice.isNormalInvoice()) {//exclude normal invoices include only opening balance invoices
                    continue;
                }
                
                /**
                 * In case of receipt edit the invoices which are already
                 * avaliable in receiptdetails i.e at line level should not be
                 * available again in invoice selection screen.Hence checking
                 * whether receipt is being edited and whether the this method
                 * is called from receipt and checking invoicesList
                 * contains sales invoice id if yes then continue i.e not
                 * inserting that particular PI in response JSON. ERP-41122 
                 * This method is called from below methods of this class itself.
                 * getInvoicesForPayment 
                 * getInvoicesForWriteOff
                 * getMonthWiseInvoicesDue 
                 * getMonthWiseInvoices
                 */
                String invoiceId = invoice.getID();
                if (moduleId == Constants.Acc_Receive_Payment_ModuleId && isEdit && (invoicesList.contains(invoiceId))) {
                    continue;
                }
//                List ll = accInvoiceCommon.getAmountDueOfOpeningBalanceInvoice(requestParams,invoice);
                
                 isInvoiceIsClaimed = invoice.getBadDebtType() == Constants.Invoice_Claimed || invoice.getBadDebtType() == Constants.Invoice_Recovered;
                if (isInvoiceIsClaimed) {
                    amountdue = invoice.getClaimAmountDue();
                } else {
                    amountdue = invoice.getOpeningBalanceAmountDue();
                }
                Date invoiceCreationDate = null;
                JournalEntry je = invoice.getJournalEntry();
//                if (invoice.isNormalInvoice()) {
//                        je = invoice.getJournalEntry();
//                        invoiceCreationDate = invoice.getJournalEntry().getEntryDate();
//                    } else {
//                        invoiceCreationDate = invoice.getCreationDate();
//                    }
                invoiceCreationDate = invoice.getCreationDate();
                if (onlyAmountDue && authHandler.round(amountdue, companyid) == 0) {
                    continue;
                }
                Calendar cal = Calendar.getInstance();
                cal.setTime(invoiceCreationDate);
                int invoiceMonth = cal.get(Calendar.MONTH);
                if (forMonthWiseInvoice && !monthsSet.contains(invoiceMonth)) {
                    continue;
                }
                Double amountdueOverseas = 0.0;

                Account account = invoice.getCustomer().getAccount();
                String currencyid = (invoice.getCurrency() == null ? currency.getCurrencyID() : invoice.getCurrency().getCurrencyID());
                JSONObject obj = new JSONObject();

                double externalCurrencyRate = invoice.getExchangeRateForOpeningTransaction();
                boolean isopeningBalanceInvoice = invoice.isIsOpeningBalenceInvoice();

                obj.put(Constants.billid, invoice.getID());
                obj.put("isOpeningBalanceTransaction", invoice.isIsOpeningBalenceInvoice());
                obj.put("personid", invoice.getCustomer() == null ? account.getID() : invoice.getCustomer().getID());
                obj.put("personemail", invoice.getCustomer() == null ? "" : invoice.getCustomer().getEmail());
                obj.put("accid", account.getID());
                obj.put("accountid", invoice.getAccount() == null ? "" : invoice.getAccount().getID());
                obj.put("accountnames", invoice.getAccount() == null ? "" : invoice.getAccount().getName());
                obj.put("billno", invoice.getInvoiceNumber());
                obj.put("transectionno", invoice.getInvoiceNumber());
                obj.put(Constants.currencyKey, (invoice.getCurrency() == null ? "" : invoice.getCurrency().getCurrencyID()));
                obj.put("currencysymbol", (invoice.getCurrency() == null ? "" : invoice.getCurrency().getSymbol()));
                obj.put("currencyidtransaction",currencyid);
                obj.put("currencysymboltransaction", (invoice.getCurrency() == null ? currency.getSymbol() : invoice.getCurrency().getSymbol()));
                obj.put("companyaddress", invoice.getCompany().getAddress());
                obj.put("companyname", invoice.getCompany().getCompanyName());
                obj.put("linkingdate",df.format(new Date()));
                if (requestParams.containsKey("currencyfilterfortrans")&&requestParams.containsKey("isReceipt")) {
                    String currencyFilterForTrans = requestParams.get("currencyfilterfortrans") != null ? (String) requestParams.get("currencyfilterfortrans") : "";
                    KwlReturnObject currencyFilterResult = accountingHandlerDAOobj.getObject(KWLCurrency.class.getName(), currencyFilterForTrans);
                    KWLCurrency currencyFilter = (KWLCurrency) currencyFilterResult.getEntityList().get(0);
                    obj.put("currencyidpayment",currencyFilterForTrans);
                    obj.put("currencysymbolpayment", (currencyFilter == null ? currency.getSymbol() : currencyFilter.getSymbol()));
                }
//                ExchangeRateDetails erd = new ExchangeRateDetails();
//                erd.g
                KwlReturnObject bAmt = null;
                //changd ship date to creation date as vendor side contains creation date
                if (isopeningBalanceInvoice && invoice.isConversionRateFromCurrencyToBase()) {// if invoice is opening balance invoice and Conversion rate is taken from user is Currency to base then following method will be called.
                    bAmt = accCurrencyDAOobj.getBaseToCurrencyAmountAccordingToCurrencyToBaseExchangeRate(requestParams, 1.0, currencyid, invoice.getCreationDate(), externalCurrencyRate);
                }else{
                    bAmt = accCurrencyDAOobj.getBaseToCurrencyAmount(requestParams, 1.0, currencyid, invoice.getCreationDate(), externalCurrencyRate);
                }
                
                obj.put("oldcurrencyrate", (Double) bAmt.getEntityList().get(0));
                obj.put("billto", "");
                obj.put("shipto", "");
                obj.put("journalentryid", "");
                obj.put("porefno", invoice.getPoRefNumber());
                obj.put("externalcurrencyrate", 0);
                obj.put("entryno", "");
                obj.put("date", df.format(invoice.getCreationDate()));
                obj.put("invoicedate", df.format(invoice.getCreationDate()));
                obj.put("creationdate", df.format(invoice.getCreationDate()));
                obj.put("shipdate", invoice.getShipDate() == null ? "" : df.format(invoice.getShipDate()));
                obj.put("duedate", df.format(invoice.getDueDate()));
                obj.put("personname", invoice.getCustomer() == null ? account.getName() : invoice.getCustomer().getName());
                obj.put("memo", "");
                obj.put("termname", invoice.getCustomer() == null ? "" : ((invoice.getCustomer().getCreditTerm()) == null) ? "" : invoice.getCustomer().getCreditTerm().getTermname());
                obj.put("deleted", invoice.isDeleted());
                obj.put("taxincluded", invoice.getTax() == null ? false : true);
                obj.put("taxid", invoice.getTax() == null ? "" : invoice.getTax().getID());
                obj.put("taxname", invoice.getTax() == null ? "" : invoice.getTax().getName());
                obj.put("taxamount", invoice.getTaxEntry() == null ? 0 : invoice.getTaxEntry().getAmount());
                obj.put("discount", invoice.getDiscount() == null ? 0 : invoice.getDiscount().getDiscountValue());
                obj.put("ispercentdiscount", invoice.getDiscount() == null ? false : invoice.getDiscount().isInPercent());
                obj.put("discountval", invoice.getDiscount() == null ? 0 : invoice.getDiscount().getDiscount());
                obj.put("costcenterid", "");
                obj.put("costcenterName", "");
                obj.put("shipvia", invoice.getShipvia() == null ? "" : invoice.getShipvia());
                obj.put("fob", invoice.getFob() == null ? "" : invoice.getFob());
                obj.put("amount", invoice.getOriginalOpeningBalanceAmount());
                if(invoice.getModifiedby()!=null){
                        obj.put("lasteditedby",StringUtil.getFullName(invoice.getModifiedby()));
                    }
                double amountinbase = 0;
                if (Constants.OpeningBalanceBaseAmountFlag) {
                    amountinbase = invoice.getOriginalOpeningBalanceBaseAmount();
                } else {
                    if (isopeningBalanceInvoice && invoice.isConversionRateFromCurrencyToBase()) {// if invoice is opening balance invoice and Conversion rate is taken from user is Currency to base then following method will be called.
                        bAmt = accCurrencyDAOobj.getCurrencyToBaseAmountAccordingToCurrencyToBaseExchangeRate(requestParams, invoice.getOriginalOpeningBalanceAmount(), currencyid, invoice.getCreationDate(), externalCurrencyRate);
                    } else {
                        bAmt = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, invoice.getOriginalOpeningBalanceAmount(), currencyid, invoice.getCreationDate(), externalCurrencyRate);
                    }
                    amountinbase = (Double) bAmt.getEntityList().get(0);
                }
                
                obj.put("amountinbase", authHandler.round(amountinbase, companyid));
                obj.put("taxpercent", 0);
                obj.put("creditDays", invoice.getCustomer() == null ? "" : ((invoice.getCustomer().getCreditTerm()) == null) ? "" : invoice.getCustomer().getCreditTerm().getTermdays());
                obj.put("isRepeated", false);
                
                double amountdueinbase = 0;
                if (Constants.OpeningBalanceBaseAmountFlag) {
                    amountdueinbase = invoice.getOpeningBalanceBaseAmountDue();
                } else {
                    if (isopeningBalanceInvoice && invoice.isConversionRateFromCurrencyToBase()) {// if invoice is opening balance invoice and Conversion rate is taken from user is Currency to base then following method will be called.
                        bAmt = accCurrencyDAOobj.getCurrencyToBaseAmountAccordingToCurrencyToBaseExchangeRate(requestParams, amountdue, currencyid, invoice.getCreationDate(), externalCurrencyRate);
                    } else {
                        bAmt = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, amountdue, currencyid, invoice.getCreationDate(), externalCurrencyRate);
                    }
                    amountdueinbase  = (Double) bAmt.getEntityList().get(0);
                }
                obj.put("amountdueinbase",  authHandler.round(amountdueinbase, companyid));
                String currencyFilterForTrans = "";
                if (requestParams.containsKey("currencyfilterfortrans")) {
                    currencyFilterForTrans = requestParams.get("currencyfilterfortrans") != null ? (String) requestParams.get("currencyfilterfortrans") : "";
                }

                double amountDueOriginal = amountdue;
                if (!StringUtil.isNullOrEmpty(currencyFilterForTrans) && !StringUtil.isNullOrEmpty(currencyid) && !currencyFilterForTrans.equals(currencyid)) {
//                    String fromcurrencyid = (row.getReceipt().getCurrency() == null ? currency.getCurrencyID() : row.getReceipt().getCurrency().getCurrencyID());
//                    String tocurrencyid = (row.getInvoice().getCurrency()==null?(row.getInvoice().getCurrency()==null?currency.getCurrencyID():row.getReceipt().getCurrency().getCurrencyID()):row.getInvoice().getCurrency().getCurrencyID());
                    KwlReturnObject bAmtCurrencyFilter=null;
                    if (isopeningBalanceInvoice && invoice.isConversionRateFromCurrencyToBase()) {// if invoice is opening balance invoice and Conversion rate is taken from user is Currency to base then following method will be called.
                        bAmtCurrencyFilter = accCurrencyDAOobj.getOneCurrencyToOtherModifiedAccordingToCurrencyToBaseExchangeRate(requestParams, amountdue, currencyid, currencyFilterForTrans, invoiceCreationDate, externalCurrencyRate);
                    } else {
                        bAmtCurrencyFilter = accCurrencyDAOobj.getOneCurrencyToOtherModified(requestParams, amountdue, currencyid, currencyFilterForTrans, invoice.getCreationDate(), externalCurrencyRate);
                }
                    amountdue = (Double) bAmtCurrencyFilter.getEntityList().get(0);
                }
                obj.put("amountdue", authHandler.round(amountdue, companyid));
                obj.put("amountDueOriginal", (amountDueOriginal <= 0) ? 0 : authHandler.round(amountDueOriginal, companyid));
                obj.put("amountDueOriginalSaved", (amountDueOriginal <= 0) ? 0 : authHandler.round(amountDueOriginal, companyid));
                obj.put("exchangeratefortransaction", (amountDueOriginal <= 0&&amountdue<=0) ? 0 : (amountdue/amountDueOriginal));
                obj.put("deductDiscount", 0);
                obj.put("amountduenonnegative", (amountdue <= 0) ? 0 : authHandler.round(amountdue, companyid));
                obj.put("invType","0");
                
                JSONObject jObj = null;
                double discountValue = 0.0;
                int applicableDays = -1;
                boolean discountType = false;
                if (!StringUtil.isNullOrEmpty(extraCompanyPreferences.getColumnPref())) {
                    jObj = new JSONObject((String) extraCompanyPreferences.getColumnPref());
                    if (jObj.has(Constants.DISCOUNT_ON_PAYMENT_TERMS) && jObj.get(Constants.DISCOUNT_ON_PAYMENT_TERMS) != null && jObj.optBoolean(Constants.DISCOUNT_ON_PAYMENT_TERMS, false)) {
                        Term term = invoice.getTermid();
                        if (term != null && term.getDiscountName() != null) {
                            DiscountMaster discountMaster = term.getDiscountName();
                            discountValue = discountMaster.getValue();
                            discountType = discountMaster.isDiscounttype();
                            applicableDays = term.getApplicableDays();
                        }
                    }
                }
                obj.put("discountvalue", discountValue);
                obj.put("discounttype", discountType ? Integer.parseInt(Constants.DISCOUNT_MASTER_TYPE_PERCENTAGE) : Integer.parseInt(Constants.DISCOUNT_MASTER_TYPE_FLAT));
                obj.put("applicabledays", applicableDays);
                obj.put("invoicecreationdate", df.format(invoice.getCreationDate()));
                obj.put("invoiceduedate", df.format(invoice.getDueDate()));
                amountdueOverseas = authHandler.round(amountdue, companyid);

                if (!(ignoreZero && authHandler.round(amountdue, companyid) <= 0)) {
                    /*
                     * While creating delivery order, Sales Return checked if
                     * DOs with all quantities of invoice are created
                     */
                    boolean addFlag = true;
                    if (doflag && invoice.isDeleted()) {
                        addFlag = false;
                    } else if (doflag && invoice.getCustomer().isOverseas() && amountdueOverseas > 0) {
                        addFlag = false;
                    } else if (salesPurchaseReturnflag) {
                        addFlag = false;
                    } else if (notlinkCNFromInvoiceFlag) {
                        addFlag = false;
                    }
                    if (addFlag && !doflag) {
                        DataJArr.put(obj);
                    }

                }
            }
        } catch (JSONException ex) {
            Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
        } catch (ServiceException ex) {
            Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
        } catch (SessionExpiredException ex) {
            Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
        }

        return DataJArr;
    }
    
    public JSONObject getInvoiceJson(HttpServletRequest request, List<Invoice> list) throws SessionExpiredException, ServiceException {
        JSONObject jobj=new JSONObject();
        JSONArray jArr=new JSONArray();
        try{
            HashMap requestParams = AccInvoiceServiceHandler.getInvoiceRequestMap(request);
            DateFormat df = authHandler.getDateOnlyFormat();
            String companyid = sessionHandlerImpl.getCompanyid(request);
            boolean ignoreZero = requestParams.get("ignorezero") != null?Boolean.parseBoolean(requestParams.get("ignorezero").toString()):request.getParameter("ignorezero") != null;
            boolean onlyAmountDue = requestParams.get("onlyamountdue") != null;
            boolean doflag = request.getParameter("doflag")!=null?true:false;
            boolean salesPurchaseReturnflag = false;
            boolean isFixedAsset = Boolean.FALSE.parseBoolean(request.getParameter(Constants.isFixedAsset));
            int moduleid=isFixedAsset ? Constants.Acc_FixedAssets_DisposalInvoice_ModuleId:Constants.Acc_Invoice_ModuleId;
            boolean CashAndInvoice=Boolean.FALSE.parseBoolean(String.valueOf(request.getParameter("CashAndInvoice")));
            boolean isPayment=Boolean.FALSE.parseBoolean(String.valueOf(request.getParameter("isPayment")));
            if(!StringUtil.isNullOrEmpty(request.getParameter("salesPurchaseReturnflag"))){
                salesPurchaseReturnflag = Boolean.parseBoolean(request.getParameter("salesPurchaseReturnflag"));
            }
            boolean islinkSItoDN = false;
            if(!StringUtil.isNullOrEmpty(request.getParameter("islinkPItoCN"))){
                islinkSItoDN = Boolean.parseBoolean(request.getParameter("islinkPItoCN"));
            }
            //report id flag
            boolean isAged = (!StringUtil.isNullOrEmpty(request.getParameter("isAged"))) ? Boolean.parseBoolean(request.getParameter("isAged")) : false;
            //flag for chart
            String chartType = "";
            if(requestParams.get(Constants.CHART_TYPE) != null) {
                chartType = (String) requestParams.get(Constants.CHART_TYPE);
            }
            
            HashMap<String, String> replaceFieldMap = new HashMap<String, String>();
            HashMap<String, String> customFieldMap = new HashMap<String, String>();
            HashMap<String, String> customDateFieldMap = new HashMap<String, String>();
            HashMap<String, Integer> FieldMap = null;
            HashMap<String, Object> fieldrequestParams = new HashMap();
            fieldrequestParams.put(Constants.filter_names, Arrays.asList(Constants.companyid, Constants.moduleid));
            fieldrequestParams.put(Constants.filter_values, Arrays.asList(companyid, moduleid));
            FieldMap = accAccountDAOobj.getFieldParamsCustomMap(fieldrequestParams, replaceFieldMap, customFieldMap, customDateFieldMap);
       
            KwlReturnObject cap = accountingHandlerDAOobj.loadObject(CompanyAccountPreferences.class.getName(), companyid);
            CompanyAccountPreferences pref = (CompanyAccountPreferences) cap.getEntityList().get(0);
            String cashAccount = pref.getCashAccount().getID();
            /**
             * Get Linking flag for CN/DN overcharge/ Undercharge case
             * and Request Moduleid to get Custom Dimension data(CN/DN)
             */
            boolean isLinkOverUnderCharge= false;
            if(!StringUtil.isNullOrEmpty(request.getParameter("isLinkOverUnderCharge"))){
                isLinkOverUnderCharge = Boolean.parseBoolean(request.getParameter("isLinkOverUnderCharge"));
            }
            int requestModuleid=requestParams.containsKey("requestModuleid") && requestParams.get("requestModuleid")!=null?  (Integer)requestParams.get("requestModuleid") : -1;
            
            KwlReturnObject curresult = accountingHandlerDAOobj.getObject(KWLCurrency.class.getName(), sessionHandlerImpl.getCurrencyID(request));
            KWLCurrency currency = (KWLCurrency) curresult.getEntityList().get(0);
            int duration = 30;

            String curDateString = "";
            Date curDate = null;
            boolean booleanAged = false;//Added for aged payable/receivable

            Calendar cal1 = Calendar.getInstance();
            Calendar cal2 = Calendar.getInstance();
            Calendar cal3 = Calendar.getInstance();

            if(requestParams.get(Constants.asOfDate) != null){//Added for aged payable/receivable
                curDateString = (String) requestParams.get(Constants.asOfDate);
                curDate = df.parse(curDateString);
                booleanAged = true;
                cal1.setTime(curDate);
                cal2.setTime(curDate);
                cal3.setTime(curDate);
                cal2.add(Calendar.DAY_OF_YEAR, -duration);
                cal3.add(Calendar.DAY_OF_YEAR, -(duration * 2));
            }
            
            String cal1String = authHandler.getDateOnlyFormat().format(cal1.getTime());
            Date cal1Date = authHandler.getDateOnlyFormat().parse(cal1String);

            String cal2String = authHandler.getDateOnlyFormat().format(cal2.getTime());
            Date cal2Date = authHandler.getDateOnlyFormat().parse(cal2String);

            String cal3String = authHandler.getDateOnlyFormat().format(cal3.getTime());
            Date cal3Date = authHandler.getDateOnlyFormat().parse(cal3String);

            double amountdue1 = 0;
            double amountdue2 = 0;
            double amountdue3 = 0;
            double amountdue4 = 0;
            List<String> idsList = new ArrayList<String>();
            
            for (Invoice invoice : list) {
                idsList.add(invoice.getID());
            }
            Map<String, List<InvoiceTermsMap>> invoiceTermsmap = accInvoiceDAOobj.getInvoiceTermMapList(idsList);
            for (Invoice invoice : list) {
                amountdue1 = amountdue2 = amountdue3 = amountdue4 = 0;
                double taxPercent = 0;
                String invid = invoice.getID();
                JournalEntry je = invoice.getJournalEntry();
                JournalEntryDetail d = invoice.getCustomerEntry();
                Account account = d.getAccount();
                if (account.getID().equals(cashAccount) && !CashAndInvoice&&!isPayment) {
                    continue;
                }
                Date invoiceCreationDate = invoice.getCreationDate();
                String currencyid=(invoice.getCurrency()==null?currency.getCurrencyID(): invoice.getCurrency().getCurrencyID());
                List ll = new ArrayList();
                if(Constants.InvoiceAmountDueFlag) {
                    ll = accInvoiceCommon.getInvoiceDiscountAmountInfo(requestParams, invoice);
                } else {
                    ll = accInvoiceCommon.getAmountDue_Discount(requestParams,invoice);
                }
                double amountdue= (Double) ll.get(0);
                double discountDeduct= (Double) ll.get(1);
                double amountDueOriginal= (Double) ll.get(3);
                
                if(onlyAmountDue&&authHandler.round(amountdue,companyid)==0){
                    continue;
                }
                Set<InvoiceDetail> invRows = invoice.getRows();
                boolean isLinkInDO = false;
                if (doflag) {
                    for (InvoiceDetail invdetails : invRows) {
                        if (invdetails.getDeliveryOrderDetail() != null) {
                            isLinkInDO = true;
                            break;
                        } 
                    }
                }
                
                boolean addFlag = true;
                Customer customer = invoice.getCustomer();
                Double amountdueOverseas = 0.0;
                if (!account.getID().equals(cashAccount)) {
                    amountdueOverseas = authHandler.round(amountdue, companyid);
                }
                if (!(ignoreZero && authHandler.round(amountdue, companyid) <= 0)) {
                    /*
                     * While creating delivery order, Sales Return checked if
                     * DOs with all quantities of invoice are created
                     */
                    
                    if ((doflag && invoice.isDeleted()) || isLinkInDO) {
                        addFlag = false;
                        continue;
                    } else if (doflag && customer.isOverseas() && amountdueOverseas > 0) {
                        addFlag = false;
                        continue;
                    }   //we have handled open close logic from open close flag in query
                }
                if (doflag || salesPurchaseReturnflag) {
                    boolean isInvoiceRecovered =true;
                    JSONObject obj = IsInvoiceRecovered(invoice.getID(),companyid);
                    isInvoiceRecovered = obj.optBoolean("isRecovered");
                    if (!isInvoiceRecovered) {
                            addFlag = false;
                    }else if(isInvoiceRecovered){
                        boolean isreturned=false;
                        double invdQuantity = 0;
                        for (InvoiceDetail invdetails : invRows) {
                            double returnedQty = 0;
                            String linkid = invdetails.getID();
                            returnedQty = accInvoiceDAOobj.getReturnQuantityofDOorSI(linkid, companyid, false);
                            if (returnedQty != 0) {
                                if (invdetails.getDeliveryOrderDetail() != null) {
                                    invdQuantity = invdetails.getDeliveryOrderDetail().getActualQuantity();
                                    if (invdQuantity - returnedQty == 0) {
                                        addFlag = false;
                                    }
                                }
                            }
                            if (invdetails.getDeliveryOrderDetail() != null) {
                                isLinkInDO = true;
                                isreturned = invdetails.getDeliveryOrderDetail().getDeliveryOrder().isIsOpenInSR();
                                if(!isreturned){
                                    addFlag = false;
                    }
                }
                        }
                    }
                }
                
                JSONObject obj = new JSONObject();
                String currencyFilterForTrans = "";
                    if (requestParams.containsKey("currencyfilterfortrans")&&requestParams.containsKey("isReceipt")) {
                        currencyFilterForTrans = requestParams.get("currencyfilterfortrans") != null ? (String) requestParams.get("currencyfilterfortrans") : "";
                        KwlReturnObject currencyFilterResult = accountingHandlerDAOobj.getObject(KWLCurrency.class.getName(), currencyFilterForTrans);
                        KWLCurrency currencyFilter = (KWLCurrency) currencyFilterResult.getEntityList().get(0);
                        obj.put("currencyidpayment",currencyFilterForTrans);
                        obj.put("currencysymbolpayment", (currencyFilter == null ? currency.getSymbol() : currencyFilter.getSymbol()));
                    }
                double currencyToBaseRate = accCurrencyDAOobj.getCurrencyToBaseRate(requestParams, currencyid, invoiceCreationDate);
                obj.put(Constants.billid, invoice.getID());
                obj.put("isOpeningBalanceInvoice", invoice.isIsOpeningBalenceInvoice());
                obj.put("personid", customer==null?account.getID():customer.getID());
                obj.put("personemail", customer==null?"":customer.getEmail());
                obj.put("aliasname", customer==null?"":customer.getAliasname());
                obj.put("accid", account.getID()); 
                obj.put("accountid",  invoice.getAccount()== null?"":invoice.getAccount().getID());
                obj.put("billno", invoice.getInvoiceNumber()); 
                obj.put("transectionno", invoice.getInvoiceNumber()); 
                obj.put(Constants.IsRoundingAdjustmentApplied, invoice.isIsRoundingAdjustmentApplied());
                obj.put(Constants.currencyKey,currencyid);
                obj.put("currencysymbol",(invoice.getCurrency()==null?currency.getSymbol(): invoice.getCurrency().getSymbol()));
                obj.put("currencyidtransaction",currencyid);
                obj.put("currencysymboltransaction", (invoice.getCurrency() == null ? currency.getSymbol() : invoice.getCurrency().getSymbol()));
                obj.put("companyaddress", invoice.getCompany().getAddress());
                obj.put("companyname", invoice.getCompany().getCompanyName());
                obj.put("oldcurrencyrate", currencyToBaseRate * 1.0);
                obj.put("billto", invoice.getBillTo());
                obj.put("shipto", invoice.getShipTo());
                obj.put("journalentryid", je.getID());
                obj.put("porefno", invoice.getPoRefNumber());
                obj.put("externalcurrencyrate", je.getExternalCurrencyRate());
                obj.put("entryno", je.getEntryNumber());
                obj.put("date", df.format(invoice.getCreationDate()));
                /**
		* Passing JE date in response for validating date on JS Side ERM-655.
		*/
                obj.put("jeDate", invoice.isIsOpeningBalenceInvoice() ? (invoice.getCreationDate() == null ? "" : df.format(invoice.getCreationDate())) : df.format(je.getEntryDate()));
                obj.put("creationdate", df.format(invoice.getCreationDate()));
                obj.put("invoicedate", df.format(invoice.getCreationDate()));
                obj.put("shipdate", invoice.getShipDate()==null? "" : df.format(invoice.getShipDate()));
                obj.put("linkingdate",df.format(new Date()));
                obj.put("duedate", df.format(invoice.getDueDate()));
                obj.put("personname", customer==null?account.getName():customer.getName());
                /* Same as when invoice is fetching in invoice report*/
                obj.put("salesPerson", invoice.getMasterSalesPerson() == null ? "" : invoice.getMasterSalesPerson().getID());
                obj.put("salesPersonName", invoice.getMasterSalesPerson() == null ? "" : invoice.getMasterSalesPerson().getValue());
                obj.put("memo", invoice.getMemo());
                obj.put("termname",customer==null?"":customer.getCreditTerm().getTermname());
                obj.put("termid",customer==null?"":customer.getCreditTerm().getID());//ERP-16831
                obj.put("deleted", invoice.isDeleted());
                obj.put("taxincluded", invoice.getTax() == null ? false : true);
                obj.put("taxid", invoice.getTax() == null ? "" : invoice.getTax().getID());
                obj.put("taxname", invoice.getTax() == null ? "" : invoice.getTax().getName());
                obj.put("taxamount", invoice.getTaxEntry() == null ? 0 : invoice.getTaxEntry().getAmount());
                obj.put("discount", invoice.getDiscount() == null ? 0 : invoice.getDiscount().getDiscountValue());
                obj.put("ispercentdiscount", invoice.getDiscount()==null?false:invoice.getDiscount().isInPercent());
                obj.put("discountval", invoice.getDiscount()==null?0:invoice.getDiscount().getDiscount());
                obj.put("costcenterid", je.getCostcenter()==null?"":je.getCostcenter().getID());
                obj.put("costcenterName", je.getCostcenter()==null?"":je.getCostcenter().getName());
                obj.put("shipvia", invoice.getShipvia()== null? "" : invoice.getShipvia());
                obj.put("fob", invoice.getFob() == null?"":invoice.getFob());
                obj.put("isClaimedInvoice", (invoice.getBadDebtType()==1 || invoice.getBadDebtType()==2));// for Malasian Company
                obj.put("invoicedate", (invoice.getCreationDate()==null ? "" : df.format(invoice.getCreationDate())));
                Map<String, JSONArray> invoiceTermMapDetails = accInvoiceServiceDAO.getInvoiceTermMapDetailList(invoice.getID(), invoiceTermsmap.get(invoice.getID()));
                obj.put("isapplytaxtoterms",invoice.isApplyTaxToTerms());
                obj.put("gtaapplicable",invoice.isRcmapplicable());
                obj.put("termdetails", invoiceTermMapDetails.containsKey(invid) ? invoiceTermMapDetails.get(invid) : "");
                   /**
                     * Put GST document history.
                     */
                    if (invoice.getCompany().getCountry().getID().equalsIgnoreCase("" + Constants.indian_country_id)) {
                        obj.put("refdocid", invoice.getID());
                        fieldDataManagercntrl.getGSTDocumentHistory(obj);
                    }
                BillingShippingAddresses addresses = invoice.getBillingShippingAddresses();
                AccountingAddressManager.getTransactionAddressJSON(obj, addresses, false);
                if(invoice.getModifiedby()!=null){
                        obj.put("lasteditedby",StringUtil.getFullName(invoice.getModifiedby()));
                 }
                Set<InvoiceContractMapping> invoiceContractMappings = invoice.getContractMappings();
                int contractstatus = 0;
                String contractId = "";
//                    amount = 0;
                if (invoiceContractMappings != null && !invoiceContractMappings.isEmpty()) {
                    for (InvoiceContractMapping invoiceContractMapping : invoiceContractMappings) {
                        if (invoiceContractMapping.getContract() != null && invoiceContractMapping.getContract().getCstatus() == 2) {
                            contractstatus = invoiceContractMapping.getContract().getCstatus();
                        }
                        contractId = invoiceContractMapping.getContract().getID();
                    }
                }

                boolean includeprotax = false;
                Set<InvoiceDetail> invoiceDetails = invoice.getRows();
                for (InvoiceDetail invoiceDetail : invoiceDetails) {
                    if (invoiceDetail.getTax() != null) {
                        includeprotax = true;
                        break;
                    }
                }
                obj.put("includeprotax", includeprotax);
                obj.put("contractstatus", contractstatus);
                obj.put("contract", contractId);
                obj.put("gstIncluded", invoice.isGstIncluded()); // ERP-28308
                
                if (account.getID().equals(cashAccount)) {
                    obj.put("amountdue", 0);
                    obj.put("amountdueinbase",0);
                    obj.put("incash", true);
                } else {
                    double amountdueinbase = amountdue;
                    if(currencyToBaseRate!=0) {
                        amountdueinbase = amountdue / currencyToBaseRate;
                    }
                     obj.put("amountdueinbase", amountdueinbase);
                      obj.put("amountdue", authHandler.round(amountdue,companyid));
                    if(booleanAged){
                        Date dueDate = null;
                        if (!StringUtil.isNullOrEmpty(df.format(invoice.getDueDate()))) {
                            dueDate = df.parse(df.format(invoice.getDueDate()));
                        }
                        if (dueDate.after(cal1Date) || dueDate.equals(cal1Date)) {
                            amountdue1 = authHandler.round(amountdue, companyid);
                        } else if ((cal2Date.before(dueDate) || cal2Date.equals(dueDate)) && cal1Date.after(dueDate)) {
                            amountdue2 = authHandler.round(amountdue, companyid);
                        } else if ((cal3Date.before(dueDate) || cal3Date.equals(dueDate)) && cal2Date.after(dueDate)) {
                            amountdue3 = authHandler.round(amountdue, companyid);
                        } else {
                            amountdue4 = authHandler.round(amountdue,companyid);
                        }
                    }
                }
                 Map<String, Object> variableMap = new HashMap<String, Object>();
                HashMap<String, Object> invDetailRequestParams = new HashMap<String, Object>();
                ArrayList Detailfilter_names = new ArrayList(), Detailfilter_params = new ArrayList();
                Detailfilter_names.add(Constants.companyKey);
                Detailfilter_params.add(invoice.getCompany().getCompanyID());
                Detailfilter_names.add("journalentryId");
                Detailfilter_params.add(je.getID());
                Detailfilter_names.add("moduleId");
                Detailfilter_params.add(moduleid + "");
                invDetailRequestParams.put("filter_names", Detailfilter_names);
                invDetailRequestParams.put("filter_params", Detailfilter_params);
                KwlReturnObject idcustresult = accJournalEntryobj.getJournalEntryCustomData(invDetailRequestParams);
                if (idcustresult.getEntityList().size() > 0) {
                    AccJECustomData jeCustom = (AccJECustomData) idcustresult.getEntityList().get(0);
                    AccountingManager.setCustomColumnValues(jeCustom, FieldMap, replaceFieldMap, variableMap);
                    JSONObject params = new JSONObject();
                    if (doflag || salesPurchaseReturnflag || islinkSItoDN) {
                        int moduleId = isFixedAsset ? Constants.Acc_FixedAssets_DeliveryOrder_ModuleId : salesPurchaseReturnflag?Constants.Acc_Sales_Return_ModuleId : Constants.Acc_Delivery_Order_ModuleId;
                        if(islinkSItoDN){
                            moduleId = Constants.Acc_Debit_Note_ModuleId;
                        }
                        /**
                        * get custom dimension data for Overcharge and Undercharge in Debit Note and Credit note module ID 
                        *
                        */
                        if (isLinkOverUnderCharge && requestModuleid!=-1) {
                            moduleId = requestModuleid; 
                        }
                        params.put("linkModuleId", moduleId);
                        params.put("isLink", true);
                        params.put(Constants.companyKey, companyid);
                        params.put("customcolumn", 0);
                    }
                    fieldDataManagercntrl.addCustomData(variableMap, customFieldMap, customDateFieldMap, obj, params);
                }

                obj.put("deductDiscount", discountDeduct);
                obj.put("amountduenonnegative", (amountdue <= 0) ? 0 : authHandler.round(amountdue,companyid));
                obj.put("amountDueOriginal", (amountDueOriginal <= 0) ? 0 : authHandler.round(amountDueOriginal,companyid));
                obj.put("amountDueOriginalSaved", (amountDueOriginal <= 0) ? 0 : authHandler.round(amountDueOriginal,companyid));
                obj.put("exchangeratefortransaction", (amountDueOriginal <= 0&&amountdue<=0) ? 0 : (amountdue/amountDueOriginal));
                obj.put("amount", d.getAmount());   //actual invoice amount
                obj.put("amountdue1", amountdue1);
                obj.put("amountdue2",amountdue2);
                obj.put("amountdue3", amountdue3);
                obj.put("amountdue4", amountdue4);
                double amountinbase = d.getAmount();
                if(currencyToBaseRate!=0) {
                    amountinbase = amountinbase / currencyToBaseRate;
                }
                obj.put("amountinbase",authHandler.round(amountinbase,companyid) );

                if (invoice.getTax() != null) {
                    KwlReturnObject perresult = accTaxObj.getTaxPercent(companyid, invoice.getCreationDate(), invoice.getTax().getID());
                    taxPercent = (Double) perresult.getEntityList().get(0);
                }
                obj.put("taxpercent", taxPercent);  //tax in percent applyind on invoice
                try {
                    obj.put("creditDays", customer.getCreditTerm().getTermdays());
                } catch(Exception ex) {
                    obj.put("creditDays", 0);
                }
                RepeatedInvoices repeatedInvoice = invoice.getRepeateInvoice();
                obj.put("isRepeated", repeatedInvoice==null?false:true);
                if(repeatedInvoice!=null){
                    obj.put("repeateid",repeatedInvoice.getId());
                    obj.put("interval",repeatedInvoice.getIntervalUnit());
                    obj.put("intervalType",repeatedInvoice.getIntervalType());
                    SimpleDateFormat sdf=new SimpleDateFormat("MMMM d, yyyy hh:mm:ss aa");
//                    sdf.setTimeZone(TimeZone.getTimeZone("GMT"+sessionHandlerImpl.getTimeZoneDifference(request)));
                    obj.put("startDate",sdf.format(repeatedInvoice.getStartDate()));
                    obj.put("nextDate",sdf.format(repeatedInvoice.getNextDate()));
                    obj.put("expireDate",repeatedInvoice.getExpireDate()==null?"":sdf.format(repeatedInvoice.getExpireDate()));
                    obj.put("advancedays", repeatedInvoice.getAdvanceNoofdays() == 0 ? 0 : repeatedInvoice.getAdvanceNoofdays());
                    obj.put("advanceDate", repeatedInvoice.getInvoiceAdvanceCreationDate() == null ? "" : sdf.format(repeatedInvoice.getInvoiceAdvanceCreationDate()));
                    requestParams.put("parentInvoiceId", invoice.getID());
                    KwlReturnObject details = accInvoiceDAOobj.getRepeateInvoicesDetails(requestParams);
                    List detailsList = details.getEntityList();
                    obj.put("childCount", detailsList.size());
                }
                
                //for charts data in object obj is required
                if(StringUtil.equalIgnoreCase(chartType, Constants.BAR_CHART) && isAged) {
                    jArr.put(obj);
                    continue;
                }
                
                if (!(ignoreZero && authHandler.round(amountdue, companyid) <= 0)) {
                    if (addFlag) {
                        jArr.put(obj);
                    }
                }
            }
            if(request.getParameter("filename") != null){
            	if(request.getParameter("filename").equals("Aged Receivable")){
		            if(request.getParameter("filetype") != null){
			            if(request.getParameter("filetype").equals("print")){
			            	if(!request.getParameter("mode").equals("18")){
				            	double total = 0;
				            	for(int i = 0; i < jArr.length(); i++)
				            		total = total + (Double)jArr.getJSONObject(i).get("amountdueinbase");
				            	JSONObject obj1 = new JSONObject();
				            	obj1.put("amountdueinbase", total);
				            	obj1.put("billno", "Total Amount Due");
				            	jArr.put(obj1);
			            	}
			            }
		            }
            	}
            }
            jobj.put(Constants.data, jArr);
        } catch (ParseException ex) {
            throw ServiceException.FAILURE("getInvoiceJson : "+ex.getMessage(), ex);
        } catch (JSONException ex) {
            throw ServiceException.FAILURE("getInvoiceJson : "+ex.getMessage(), ex);
        }
        return jobj;
    }   
    
        public JSONObject getSelectedInvoicesJson(HttpServletRequest request) {
        JSONObject jobj = new JSONObject();
        JSONArray DataJArr = new JSONArray();
        try {
            HashMap<String, Object> requestParams = AccInvoiceServiceHandler.getInvoiceRequestMap(request);
            boolean consolidateFlag = request.getParameter("consolidateFlag") != null ? Boolean.parseBoolean(request.getParameter("consolidateFlag")) : false;
            String[] companyids = (consolidateFlag && request.getParameter(Constants.companyids) != null) ? request.getParameter(Constants.companyids).split(",") : sessionHandlerImpl.getCompanyid(request).split(",");
            String gcurrencyid = (consolidateFlag && request.getParameter(Constants.globalCurrencyKey) != null) ? request.getParameter(Constants.globalCurrencyKey) : sessionHandlerImpl.getCurrencyID(request);
            String companyid = "";
            String invoiceIds = request.getParameter("invoiceIds");
            for (int cnt = 0; cnt < companyids.length; cnt++) {
                companyid = companyids[cnt];
                request.setAttribute(Constants.companyKey, companyid);
                request.setAttribute(Constants.globalCurrencyKey, gcurrencyid);
                requestParams.put(Constants.companyKey, companyid);
                requestParams.put(Constants.globalCurrencyKey, gcurrencyid);

                KwlReturnObject result = accInvoiceDAOobj.getSelectedInvoicesMerged(requestParams, invoiceIds);
                DataJArr =  accInvoiceServiceDAO.getInvoiceJsonMerged(request, result.getEntityList(), DataJArr);
            }
            jobj.put(Constants.data, DataJArr);
        } catch (JSONException ex) {
            Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ServiceException ex) {
            Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SessionExpiredException ex) {
            Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
        }
        return jobj;
    }
       
    public JSONArray getRepeateInvoiceJson(HttpServletRequest request, List list) throws SessionExpiredException, ServiceException {
        JSONArray jArr=new JSONArray();
        try{
            DateFormat df = authHandler.getDateFormatter(request);
            Iterator itr = list.iterator();
            while (itr.hasNext()) {
                Invoice invoice = (Invoice) itr.next();
                JournalEntryDetail d = invoice.getCustomerEntry();
                Account account = d.getAccount();
                JSONObject obj = new JSONObject();
                obj.put(Constants.billid, invoice.getID());
                obj.put("personid", invoice.getCustomer()==null?account.getID():invoice.getCustomer().getID());
                obj.put("billno", invoice.getInvoiceNumber());
                obj.put("personname", invoice.getCustomer()==null?account.getName():invoice.getCustomer().getName());

                obj.put("repeateid",invoice.getRepeateInvoice().getId());
                obj.put("interval",invoice.getRepeateInvoice().getIntervalUnit());
                obj.put("intervalType",invoice.getRepeateInvoice().getIntervalType());
                obj.put("startDate",df.format(invoice.getRepeateInvoice().getStartDate()));
                obj.put("nextDate",df.format(invoice.getRepeateInvoice().getNextDate()));
                obj.put("expireDate",invoice.getRepeateInvoice().getExpireDate()==null?"":df.format(invoice.getRepeateInvoice().getExpireDate()));
                obj.put("advancedays", invoice.getRepeateInvoice().getAdvanceNoofdays() == 0 ? 0 : invoice.getRepeateInvoice().getAdvanceNoofdays());
                obj.put("advanceDate", invoice.getRepeateInvoice().getInvoiceAdvanceCreationDate() == null ? "" : invoice.getRepeateInvoice().getInvoiceAdvanceCreationDate());
                jArr.put(obj);
            }
        } catch (JSONException ex) {
            throw ServiceException.FAILURE("getRepeateInvoiceJson : "+ex.getMessage(), ex);
        }
        return jArr;
    }

    public ModelAndView getInvoiceRows(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        boolean issuccess = false;
        String msg = "";
        try {
            JSONObject paramJobj = StringUtil.convertRequestToJsonObject(request);
            Map<String, Object> extraAttributesMap = new HashMap<String, Object>();
            JSONArray DataJArr = accInvoiceServiceDAO.getInvoiceRows(paramJobj, null,extraAttributesMap);
            jobj.put(Constants.data, DataJArr);
            issuccess = true;
        } catch (SessionExpiredException ex){
            msg = ex.getMessage();
        } catch (ServiceException ex) {
            msg = ex.getMessage();
            Logger.getLogger(accInvoiceController.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            msg = ex.getMessage();
            Logger.getLogger(accInvoiceController.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                jobj.put("success", issuccess);
                jobj.put("msg", msg);
            } catch (JSONException ex) {
                Logger.getLogger(accInvoiceController.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return new ModelAndView(Constants.jsonView, "model", jobj.toString());
    }

    public ModelAndView isInvoicehasDepreciatedAsset(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        String msg = "";
        boolean issuccess = false;

        DefaultTransactionDefinition def = new DefaultTransactionDefinition();
        def.setName("R_Tx");
        def.setPropagationBehavior(TransactionDefinition.PROPAGATION_REQUIRED);

        TransactionStatus status = txnManager.getTransaction(def);
        try {
            JSONObject jobject = isInvoicehasDepreciatedAsset(request);
            jobj.put(Constants.data, jobject);

            issuccess = true;
            txnManager.commit(status);
        } catch (SessionExpiredException ex) {
            txnManager.rollback(status);
            msg = ex.getMessage();
            Logger.getLogger(accInvoiceController.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
        } catch (Exception ex) {
            txnManager.rollback(status);
            msg = "" + ex.getMessage();
            Logger.getLogger(accInvoiceController.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
        } finally {
            try {
                jobj.put("success", issuccess);
                jobj.put("msg", msg);
            } catch (JSONException ex) {
                Logger.getLogger(accInvoiceController.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
            }
        }
        return new ModelAndView(Constants.jsonView, "model", jobj.toString());
    }
    
    private JSONObject isInvoicehasDepreciatedAsset(HttpServletRequest request) throws SessionExpiredException, ServiceException, JSONException {
        JSONObject jobj = new JSONObject();
        String companyId = sessionHandlerImpl.getCompanyid(request);
        String billid = request.getParameter(Constants.billid);

        HashMap<String, Object> requestParams = new HashMap<String, Object>();
        requestParams.put(Constants.companyKey, companyId);

        boolean isInvoicehasDepreciatedAsset = accInvoiceDAOobj.isInvoicehasDepreciatedAsset(billid, companyId);

        jobj.put("isInvoicehasDepreciatedAsset", isInvoicehasDepreciatedAsset);

        return jobj;
    }

    public ModelAndView isDOhasDepreciatedAsset(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        String msg = "";
        boolean issuccess = false;

        DefaultTransactionDefinition def = new DefaultTransactionDefinition();
        def.setName("R_Tx");
        def.setPropagationBehavior(TransactionDefinition.PROPAGATION_REQUIRED);

        TransactionStatus status = txnManager.getTransaction(def);
        try {
            JSONObject jobject = isDOhasDepreciatedAsset(request);
            jobj.put(Constants.data, jobject);

            issuccess = true;
         txnManager.commit(status);
        } catch (SessionExpiredException ex) {
            txnManager.rollback(status);
            msg = ex.getMessage();
            Logger.getLogger(accInvoiceController.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
        } catch (Exception ex) {
            txnManager.rollback(status);
            msg = "" + ex.getMessage();
            Logger.getLogger(accInvoiceController.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
        } finally {
            try {
                jobj.put("success", issuccess);
                jobj.put("msg", msg);
            } catch (JSONException ex) {
                Logger.getLogger(accInvoiceController.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
            }
        }
        return new ModelAndView(Constants.jsonView, "model", jobj.toString());
    }
    
    private JSONObject isDOhasDepreciatedAsset(HttpServletRequest request) throws SessionExpiredException, ServiceException, JSONException {
        JSONObject jobj = new JSONObject();
        String companyId = sessionHandlerImpl.getCompanyid(request);
        String billid = request.getParameter(Constants.billid);

        HashMap<String, Object> requestParams = new HashMap<String, Object>();
        requestParams.put(Constants.companyKey, companyId);

        boolean isDOhasDepreciatedAsset = accInvoiceDAOobj.isDOhasDepreciatedAsset(billid, companyId);

        jobj.put("isInvoicehasDepreciatedAsset", isDOhasDepreciatedAsset);

        return jobj;
    }
    
    public ModelAndView deleteSalesReturnPermanent(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        JSONObject jresponse = new JSONObject();
        String msg = "";
        boolean issuccess = false;

        DefaultTransactionDefinition def = new DefaultTransactionDefinition();
        def.setName("SO_Tx");
        def.setPropagationBehavior(TransactionDefinition.PROPAGATION_REQUIRED);
        TransactionStatus status = txnManager.getTransaction(def);
        StringBuffer productIds = new StringBuffer();
        try {
            JSONObject paramJobj = StringUtil.convertRequestToJsonObject(request);
            jresponse = accInvoiceServiceDAO.deleteSalesReturnPermanent(paramJobj);
            txnManager.commit(status);
            if (jresponse.has(Constants.RES_msg)) {
                msg = jresponse.getString(Constants.RES_msg);
            }
            if (jresponse.has(Constants.RES_success)) {
                issuccess = jresponse.getBoolean(Constants.RES_success);
            }
            if (jresponse.has("productIds") && !StringUtil.isNullOrEmpty(jresponse.optString("productIds", null))) {
                productIds = (StringBuffer) jresponse.get("productIds");
            }
        } catch (SessionExpiredException ex) {
            txnManager.rollback(status);
            msg = ex.getMessage();
            Logger.getLogger(accInvoiceController.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            txnManager.rollback(status);
            msg = "" + ex.getMessage();
            Logger.getLogger(accInvoiceController.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                jobj.put(Constants.RES_success, issuccess);
                jobj.put(Constants.RES_msg, msg);
                jobj.put("productIds", productIds);
            } catch (JSONException ex) {
                Logger.getLogger(accInvoiceController.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return new ModelAndView(Constants.jsonView, "model", jobj.toString());
    }
    
    public String deleteSalesReturnPermanent(HttpServletRequest request) throws SessionExpiredException, AccountingException, ServiceException {
          String linkedTransaction="";
        try {
            JSONArray jArr = new JSONArray(request.getParameter(Constants.data));
            String companyid = sessionHandlerImpl.getCompanyid(request);
            KwlReturnObject capresult = accountingHandlerDAOobj.getObject(CompanyAccountPreferences.class.getName(), companyid);
            CompanyAccountPreferences preferences = (CompanyAccountPreferences) capresult.getEntityList().get(0);

            boolean isLeaseFixedAsset = false;
            boolean isConsignment = false;
            boolean isnegativestockforlocwar = false;
            ExtraCompanyPreferences extraCompanyPreferences = null;
            KwlReturnObject extraprefresult = accountingHandlerDAOobj.getObject(ExtraCompanyPreferences.class.getName(), companyid);
            extraCompanyPreferences = extraprefresult != null ? (ExtraCompanyPreferences) extraprefresult.getEntityList().get(0) : null;
            isnegativestockforlocwar = extraCompanyPreferences.isIsnegativestockforlocwar();
            if (!StringUtil.isNullOrEmpty(request.getParameter(Constants.isLeaseFixedAsset))) {
                isLeaseFixedAsset = Boolean.parseBoolean(request.getParameter(Constants.isLeaseFixedAsset));
            }
            if (!StringUtil.isNullOrEmpty(request.getParameter(Constants.isConsignment))) {
                isConsignment = Boolean.parseBoolean(request.getParameter(Constants.isConsignment));
            }
            boolean isFixedAsset = request.getParameter(Constants.isFixedAsset) != null ? Boolean.parseBoolean(request.getParameter(Constants.isFixedAsset)) : false;
            String srid = "", srno = "";
            for (int i = 0; i < jArr.length(); i++) {
                JSONObject jobj = jArr.getJSONObject(i);
                srid = StringUtil.DecodeText(jobj.optString("billid"));
                srno = jobj.getString("billno");
                if(isConsignment && consignmentService.isPendingForApproval(srid)){
                    throw new AccountingException("Some stock is under QA or Repair. So you can not delete request.");
                }
                if (isFixedAsset) {
                    HashMap<String, Object> requestParams = new HashMap<String, Object>();
                    requestParams.put("srid", srid);
                    requestParams.put("companyid", companyid);
                    accInvoiceDAOobj.deleteAssetDetailsLinkedWithAssetSalesReturn(requestParams);
                }
                  KwlReturnObject sdresult = accountingHandlerDAOobj.getObject(SalesReturn.class.getName(), srid);
                    SalesReturn purchaseReturn = (SalesReturn) sdresult.getEntityList().get(0);
                    if (!purchaseReturn.isIsdeletable()) {
                        linkedTransaction += srno + ", ";
                        continue;
                    }
                    
                // check the pushed sales return in delivery Planner
                KwlReturnObject result = accInvoiceDAOobj.getSalesReturnFromDeliveryPlanner(srid, companyid);
                List list = result.getEntityList();
                if (!list.isEmpty()) {
                    linkedTransaction += srno + ", ";
                    continue;
                }
                HashMap<String, Object> requestParams = new HashMap<String, Object>();
                requestParams.put("srid", srid);
                requestParams.put("companyid", companyid);
                requestParams.put("srno", srno);
                requestParams.put(Constants.isLeaseFixedAsset, isLeaseFixedAsset);
                requestParams.put(Constants.isConsignment, isConsignment);
                requestParams.put("isnegativestockforlocwar", isnegativestockforlocwar);
                if (!StringUtil.isNullOrEmpty(srid)) {  //check if its sales return edit case 
                    //check credit node is made from this sales return
                    String creditNoteId = accInvoiceDAOobj.getCreditNoteIdFromSRId(srid, companyid);
                    if (!StringUtil.isNullOrEmpty(creditNoteId)) {
                        requestParams.put("cnid", creditNoteId);
                    }
                }
                if (requestParams.containsKey("cnid") && requestParams.get("cnid") != null) {
                    //Check whether linked CN is paid partially/fully
                    boolean isNoteLinkedWithPayment = accCreditNoteService.isNoteLinkedWithPayment((String) requestParams.get("cnid"));
                    boolean isNoteLinkedWithAdvancePayment = accCreditNoteService.isNoteLinkedWithAdvancePayment((String) requestParams.get("cnid"));
                    if (isNoteLinkedWithPayment || isNoteLinkedWithAdvancePayment) {
                        linkedTransaction += srno + ", ";
                        continue;
                    }
                }    
                
                KwlReturnObject res = accountingHandlerDAOobj.getObject(SalesReturn.class.getName(), srid);
                SalesReturn salesReturn = (SalesReturn) res.getEntityList().get(0);
                HashMap<String, Object> doRequestParams = new HashMap<String, Object>();
                ArrayList filter_names = new ArrayList(), filter_params = new ArrayList();
                filter_names.add("salesReturn.ID");
                filter_params.add(salesReturn.getID());
                doRequestParams.put("filter_names", filter_names);
                doRequestParams.put("filter_params", filter_params);

                KwlReturnObject idresult = accInvoiceDAOobj.getSalesReturnDetails(doRequestParams);
                Iterator itr = idresult.getEntityList().iterator();
                String linkid = "";
                while (itr.hasNext()) {
                    SalesReturnDetail row = (SalesReturnDetail) itr.next();
                    if (row.getDodetails() != null) {
                        linkid = row.getDodetails().getDeliveryOrder().getID();
                        if (!StringUtil.isNullOrEmpty(linkid)) {
                            KwlReturnObject rdresult = accountingHandlerDAOobj.getObject(DeliveryOrder.class.getName(), linkid);
                            DeliveryOrder deliveryOrder = (DeliveryOrder) rdresult.getEntityList().get(0);
                            HashMap hMap = new HashMap();
                            hMap.put("deliveryOrder", deliveryOrder);
                            hMap.put("isOpen", true);
                            hMap.put("isFromSalesReturn", true);
                            accInvoiceDAOobj.updateDeliveryOrderStatus(hMap);
                        }
                    }
                    else if (row.getCidetails() != null) {
                        linkid = row.getCidetails().getInvoice().getID();
                        if (!StringUtil.isNullOrEmpty(linkid)) {
                            KwlReturnObject invresult = accountingHandlerDAOobj.getObject(Invoice.class.getName(), linkid);
                            Invoice invoice = (Invoice) invresult.getEntityList().get(0);
                            HashMap invhMap = new HashMap();
                            invhMap.put("invoice", invoice);
                            invhMap.put("isOpen", true);
                            accInvoiceDAOobj.updateSalesInvoiceStatus(invhMap);
                        }
                    }

                }

                stockMovementService.removeStockMovementByReferenceId(salesReturn.getCompany(), salesReturn.getID());
                if (!isConsignment && extraCompanyPreferences.isSalesorderreopen()) {
                    accInvoiceDAOobj.updateSOBalanceQtyAfterSR(srid, companyid);
                }
                if (requestParams.containsKey("cnid") && requestParams.get("cnid") != null) {
                    accCreditNoteService.updateOpeningInvoiceAmountDue((String) requestParams.get("cnid"), companyid);
                    accCreditNoteDAOobj.deleteLinkingInformationOfCN(requestParams);
                    accInvoiceDAOobj.deleteCreditNotesPermanent(requestParams);
                }
                accInvoiceDAOobj.deleteLinkingInformationOfSR(requestParams);
                // delete sales return
                requestParams.put("isMRPModuleActivated", extraCompanyPreferences.isActivateMRPModule());
                requestParams.put("isPerpetualValuationActivated", (preferences.getInventoryValuationType() == Constants.PERPETUAL_VALUATION_METHOD));
                if (extraCompanyPreferences != null && (extraCompanyPreferences.isActivateMRPModule() || preferences.getInventoryValuationType() == Constants.PERPETUAL_VALUATION_METHOD)) {
                    if (salesReturn.getInventoryJE() != null) { // delete inventory JE
                        JournalEntry inventoryJE = salesReturn.getInventoryJE();
                        requestParams.put("inventoryjeid", inventoryJE.getID());
                    }
                }
                accInvoiceDAOobj.deleteSalesReturnPermanent(requestParams);
                auditTrailObj.insertAuditLog(AuditAction.SALES_RETURN, "User " + sessionHandlerImpl.getUserFullName(request) + " has deleted "+ (isLeaseFixedAsset? "Lease ":"") + (isFixedAsset? "Asset ":"") +"Sales Return Permanently " + srno, request, srid);
            }
        } catch (InventoryException ex) {
            throw ServiceException.FAILURE(messageSource.getMessage("acc.common.excp", null, RequestContextUtils.getLocale(request)), ex);
        } catch (JSONException ex) {
            throw new AccountingException(messageSource.getMessage("acc.common.excp1", null, RequestContextUtils.getLocale(request)));
        }
         return linkedTransaction;
    }
    
    public ModelAndView deleteSalesReturn(HttpServletRequest request, HttpServletResponse response) throws SessionExpiredException {
        JSONObject jobj = new JSONObject();

        try {
            JSONObject paramJobj = StringUtil.convertRequestToJsonObject(request);
            jobj = accInvoiceServiceDAO.deleteSalesReturnTemporaryJson(paramJobj);
        } catch (SessionExpiredException ex) {
            Logger.getLogger(accInvoiceController.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            Logger.getLogger(accInvoiceController.class.getName()).log(Level.SEVERE, null, ex);
        }
        return new ModelAndView(Constants.jsonView, "model", jobj.toString());
    }
    
    public String deleteSalesReturn(HttpServletRequest request) throws SessionExpiredException, AccountingException, ServiceException {
        String linkedTransaction="";
        try {

            boolean isLeaseFixedAsset = false;
            boolean isConsignment = false;

            if (!StringUtil.isNullOrEmpty(request.getParameter(Constants.isLeaseFixedAsset))) {
                isLeaseFixedAsset = Boolean.parseBoolean(request.getParameter(Constants.isLeaseFixedAsset));
            }
            boolean isFixedAsset = request.getParameter(Constants.isFixedAsset) != null ? Boolean.parseBoolean(request.getParameter(Constants.isFixedAsset)) : false;
            if (!StringUtil.isNullOrEmpty(request.getParameter(Constants.isConsignment))) {
                isConsignment = Boolean.parseBoolean(request.getParameter(Constants.isConsignment));
            }
            JSONArray jArr = new JSONArray(request.getParameter(Constants.data));
            String companyid = sessionHandlerImpl.getCompanyid(request);
            KwlReturnObject capresult = accountingHandlerDAOobj.getObject(CompanyAccountPreferences.class.getName(), companyid);
            CompanyAccountPreferences preferences = (CompanyAccountPreferences) capresult.getEntityList().get(0);
            KwlReturnObject extraresult = accountingHandlerDAOobj.getObject(ExtraCompanyPreferences.class.getName(), companyid);
            ExtraCompanyPreferences extraCompanyPreferences = (ExtraCompanyPreferences) extraresult.getEntityList().get(0);
            for (int i = 0; i < jArr.length(); i++) {
                JSONObject jobj = jArr.getJSONObject(i);
                if (!StringUtil.isNullOrEmpty(jobj.getString("billid"))) {
                    String srid = StringUtil.DecodeText(jobj.optString("billid"));
                    String srno = jobj.getString("billno");
                    if(isConsignment && consignmentService.isPendingForApproval(srid)){
                        throw new AccountingException("Some stock is under QA or Repair. So you can not delete request.");
                    }
                     HashMap<String, Object> requestParams = new HashMap<String, Object>();
                    if (isLeaseFixedAsset) {                       
                        requestParams.put("srid", srid);
                        requestParams.put("companyid", companyid);
                        accInvoiceDAOobj.deleteAssetDetailsLinkedWithSalesReturn(requestParams);
                    }
                        KwlReturnObject sdresult = accountingHandlerDAOobj.getObject(SalesReturn.class.getName(), srid);
                    SalesReturn purchaseReturn = (SalesReturn) sdresult.getEntityList().get(0);
                    if (!purchaseReturn.isIsdeletable()) {
                        linkedTransaction += srno + ", ";
                        continue;
                    }
                    
                    // check the pushed sales return in delivery Planner
                    KwlReturnObject result = accInvoiceDAOobj.getSalesReturnFromDeliveryPlanner(srid, companyid);
                    List list = result.getEntityList();
                    if (!list.isEmpty()) {
                        linkedTransaction += srno + ", ";
                        continue;
                    }
                    
                    //check Credit note is made from this Sales return
                    KwlReturnObject idresult = accCreditNoteDAOobj.getCreditNoteIdFromSRId(srid, companyid);
                    if (!(idresult.getEntityList().isEmpty())) {
                      //Check whether linked CN is paid partially/fully  
                        CreditNote creditnote = (CreditNote) idresult.getEntityList().get(0);
                        boolean isNoteLinkedWithPayment = accCreditNoteService.isNoteLinkedWithPayment(creditnote.getID());
                        boolean isNoteLinkedWithAdvancePayment = accCreditNoteService.isNoteLinkedWithAdvancePayment(creditnote.getID());
                        if (isNoteLinkedWithPayment || isNoteLinkedWithAdvancePayment) {
                            linkedTransaction += srno + ", ";
                            continue;
                        }
                    }    
                    if (isFixedAsset) {
                        requestParams.put("srid", srid);
                        requestParams.put("companyid", companyid);
                        accInvoiceDAOobj.deleteAssetDetailsLinkedWithAssetSalesReturn(requestParams);
                    }

                    KwlReturnObject rdresult = accountingHandlerDAOobj.getObject(SalesReturn.class.getName(), srid);
                    SalesReturn salesReturn = (SalesReturn) rdresult.getEntityList().get(0);
                    Set<SalesReturnDetail> srDetails = salesReturn.getRows();
                    Iterator it = srDetails.iterator();
                    while (it.hasNext()) {
                        SalesReturnDetail srdObj = (SalesReturnDetail) it.next();
                        String productId=srdObj.getProduct().getID().toString();
                        String srID=srdObj.getID();
                        double previousCount=(srdObj.getPreviousIssueCount());
                        double totalIssueCount=(srdObj.getProduct().getTotalIssueCount());
                        double updatedIssueCount=totalIssueCount-previousCount;
                        boolean updateflag=true;
                        double precnt=0;
                        accProductObj.updateTotalIssueCount(updatedIssueCount, productId, companyid, updateflag,false);
                        accInvoiceDAOobj.updatePreviousIssue(precnt, srID, companyid);
                        accProductObj.deleteInventoryEntry(srdObj.getID(), companyid);
                    }
                    if (!isConsignment && extraCompanyPreferences.isSalesorderreopen()) {
                        accInvoiceDAOobj.updateSOBalanceQtyAfterSR(srid, companyid);
                    }
                    if (extraCompanyPreferences != null && (extraCompanyPreferences.isActivateMRPModule() || preferences.getInventoryValuationType() == Constants.PERPETUAL_VALUATION_METHOD)) { // delete JE temporary
                        if (salesReturn != null && salesReturn.getInventoryJE() != null) {
                            accJournalEntryobj.deleteJournalEntry(salesReturn.getInventoryJE().getID(), companyid);
                        }
                    }
                    accInvoiceDAOobj.deleteSalesReturn(srid, companyid);
                    
                    if (!(idresult.getEntityList().isEmpty())) {
                        CreditNote creditnote = (CreditNote) idresult.getEntityList().get(0);
                        HashMap<String, Object> dataMap = new HashMap<String, Object>();
                        dataMap.put("cnid", creditnote.getID());
                        dataMap.put("companyid", companyid);
//                        accCreditNoteService.updateOpeningInvoiceAmountDue(creditnote.getID(), companyid);
                        accCreditNoteService.deleteCreditNotePartialy(dataMap);
                    }
                    KwlReturnObject res = accountingHandlerDAOobj.getObject(SalesReturn.class.getName(), srid);
                    salesReturn = (SalesReturn) res.getEntityList().get(0);
                    stockMovementService.removeStockMovementByReferenceId(salesReturn.getCompany(), salesReturn.getID());
                    auditTrailObj.insertAuditLog(AuditAction.SALES_RETURN, "User " + sessionHandlerImpl.getUserFullName(request) + " has deleted "+ (isLeaseFixedAsset? "Lease ":"")+(isFixedAsset? "Asset ":"") +"Sales Return " + srno, request, srid);
                    if (preferences.isInventoryAccountingIntegration() && preferences.isWithInvUpdate()) {

                          res = accountingHandlerDAOobj.getObject(SalesReturn.class.getName(), srid);
                         salesReturn = (SalesReturn) res.getEntityList().get(0);
                         stockMovementService.removeStockMovementByReferenceId(salesReturn.getCompany(), salesReturn.getID());
                    }
                }
            }
        }  catch (InventoryException ex) {
            throw ServiceException.FAILURE(messageSource.getMessage("acc.common.excp", null, RequestContextUtils.getLocale(request)), ex);
        } catch (JSONException ex) {
            throw new AccountingException(messageSource.getMessage("acc.common.excp1", null, RequestContextUtils.getLocale(request)));
        }
        return linkedTransaction;
    }

    public ModelAndView deleteInvoice(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        String msg = "";
        boolean issuccess = false;
        boolean isConsignment = false;
        boolean isFixedAsset = false;
        try {
            if (!StringUtil.isNullOrEmpty(request.getParameter(Constants.isConsignment))) {
                isConsignment = Boolean.parseBoolean(request.getParameter(Constants.isConsignment));
            }
            if (!StringUtil.isNullOrEmpty(request.getParameter(Constants.isFixedAsset))) {
                isFixedAsset = Boolean.parseBoolean(request.getParameter(Constants.isFixedAsset));
            }
            JSONObject requestJobj = StringUtil.convertRequestToJsonObject(request);
            requestJobj.put("servletContext", this.getServletContext());
            String linkedTransaction = deleteInvoices(requestJobj);
            issuccess = true;
            if (StringUtil.isNullOrEmpty(linkedTransaction)) {
                if (isConsignment) {
                    msg = messageSource.getMessage("acc.consignment.inv.del", null, RequestContextUtils.getLocale(request)); //"Invoice(s) has been deleted successfully";
                } else if (isFixedAsset) {
                    msg = messageSource.getMessage("acc.in.asset.del", null, RequestContextUtils.getLocale(request)); //"Asset Disposal Invoice(s) has been deleted successfully";                    
                } else {
                    msg = messageSource.getMessage("acc.rem.179", null, RequestContextUtils.getLocale(request)); //"Invoice(s) has been deleted successfully";                    
                }
            } else {
                if (isConsignment) {
                    msg = messageSource.getMessage("acc.consignment.Invoicesexcept", null, RequestContextUtils.getLocale(request)) + " " + linkedTransaction.substring(0, linkedTransaction.length() - 2) + " " + messageSource.getMessage("acc.field.hasbeendeletedsuccessfully", null, RequestContextUtils.getLocale(request));
                } else {
                    msg = messageSource.getMessage("acc.field.Invoicesexcept", null, RequestContextUtils.getLocale(request)) + " " + linkedTransaction.substring(0, linkedTransaction.length() - 2) + " " + messageSource.getMessage("acc.field.deletedsuccessfully", null, RequestContextUtils.getLocale(request)) + " " + messageSource.getMessage("acc.field.usedintransactionorlockingperiod", null, RequestContextUtils.getLocale(request));
                    /**
                     * When Avalara Integration is enabled, append message about transactions being locked on AvaTax side
                     * This is because transactions which are locked by AvaTax can not be deleted from our system
                     */
                    boolean isAvalaraIntegration = false;
                    KwlReturnObject capresult = accountingHandlerDAOobj.getObject(ExtraCompanyPreferences.class.getName(), requestJobj.optString(Constants.companyKey));
                    if (capresult != null && capresult.getEntityList() != null && !capresult.getEntityList().isEmpty() && capresult.getEntityList().get(0) != null) {
                        ExtraCompanyPreferences extraPref = (ExtraCompanyPreferences) capresult.getEntityList().get(0);
                        isAvalaraIntegration = extraPref.isAvalaraIntegration();
                    }
                    if (isAvalaraIntegration) {
                        msg += "<br><br><b>NOTE:</b> " + messageSource.getMessage("acc.integration.lockedOnAvataxMsg", null, RequestContextUtils.getLocale(request));
                    }
                }
            }
        } catch (SessionExpiredException ex) {
            msg = ex.getMessage();
            Logger.getLogger(accInvoiceController.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            msg = "" + ex.getMessage();
            Logger.getLogger(accInvoiceController.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                jobj.put(Constants.RES_success, issuccess);
                jobj.put(Constants.RES_msg, msg);
            } catch (JSONException ex) {
                Logger.getLogger(accInvoiceController.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return new ModelAndView(Constants.jsonView, "model", jobj.toString());
    }

    public String deleteInvoices(JSONObject requestJobj) throws ServiceException, AccountingException, SessionExpiredException {
        String linkedTransaction = "";
        try {
            JSONArray jArr = new JSONArray(requestJobj.optString(Constants.data));
            String companyid = requestJobj.optString(Constants.companyKey);

            KwlReturnObject capresult = accountingHandlerDAOobj.getObject(CompanyAccountPreferences.class.getName(), companyid);
            CompanyAccountPreferences preferences = (CompanyAccountPreferences) capresult.getEntityList().get(0);

            boolean isFixedAsset = false;
            boolean isConsignment = false;

            if (!StringUtil.isNullOrEmpty(requestJobj.optString(Constants.isFixedAsset))) {
                isFixedAsset = Boolean.parseBoolean(requestJobj.optString(Constants.isFixedAsset));
            }

            if (!StringUtil.isNullOrEmpty(requestJobj.optString(Constants.isConsignment))) {
                isConsignment = Boolean.parseBoolean(requestJobj.optString(Constants.isConsignment));
            }
            boolean isLeaseFixedAsset = false;

            if (!StringUtil.isNullOrEmpty(requestJobj.optString(Constants.isLeaseFixedAsset))) {
                isLeaseFixedAsset = Boolean.parseBoolean(requestJobj.optString(Constants.isLeaseFixedAsset));
            }

            for (int i = 0; i < jArr.length(); i++) {
                JSONObject jobj = jArr.getJSONObject(i);
                linkedTransaction = accInvoiceServiceDAO.deleteInvoice(linkedTransaction, requestJobj, jobj, preferences, isFixedAsset, isLeaseFixedAsset, isConsignment, companyid);
            }
        } catch (JSONException ex) {
            throw new AccountingException("Cannot extract data from client");
        }
        return linkedTransaction;
    }

    public ModelAndView deleteInvoicePermanent(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        String msg = "";
        boolean issuccess = false;
        boolean isConsignment = false;
        boolean isFixedAsset = false;
        try {
            JSONObject requestJobj = StringUtil.convertRequestToJsonObject(request);
            requestJobj.put("servletContext", this.getServletContext());
            String linkedTransaction = deleteInvoicesPermanent(requestJobj);
            if (!StringUtil.isNullOrEmpty(request.getParameter(Constants.isConsignment))) {
                isConsignment = Boolean.parseBoolean(request.getParameter(Constants.isConsignment));
            }
            if (!StringUtil.isNullOrEmpty(request.getParameter(Constants.isFixedAsset))) {
                isFixedAsset = Boolean.parseBoolean(request.getParameter(Constants.isFixedAsset));
            }
            issuccess = true;
            if (StringUtil.isNullOrEmpty(linkedTransaction)) {
                if (isConsignment) {
                    msg = messageSource.getMessage("acc.consignment.inv.del", null, RequestContextUtils.getLocale(request)); //"Invoice(s) has been deleted successfully";
                } else if (isFixedAsset) {
                    msg = messageSource.getMessage("acc.in.asset.delp", null, RequestContextUtils.getLocale(request)); //"Asset Disposel Invoice(s) has been deleted successfully";                    
                } else {
                    msg = messageSource.getMessage("acc.rem.179", null, RequestContextUtils.getLocale(request)); //"Invoice(s) has been deleted successfully";                    
                }
            } else {
                if (isConsignment) {
                    msg = messageSource.getMessage("acc.consignment.Invoicesexcept", null, RequestContextUtils.getLocale(request)) + " " + linkedTransaction.substring(0, linkedTransaction.length() - 2) + " " + messageSource.getMessage("acc.field.hasbeendeletedsuccessfully", null, RequestContextUtils.getLocale(request));
                } else {
                    msg = messageSource.getMessage("acc.field.Invoicesexcept", null, RequestContextUtils.getLocale(request)) + " " + linkedTransaction.substring(0, linkedTransaction.length() - 2) + " " + messageSource.getMessage("acc.field.deletedsuccessfully", null, RequestContextUtils.getLocale(request))+ " " + messageSource.getMessage("acc.field.usedintransactionorlockingperiod", null, RequestContextUtils.getLocale(request));
                    /**
                     * When Avalara Integration is enabled, append message about transactions being locked on AvaTax side
                     * This is because transactions which are locked by AvaTax can not be deleted from our system
                     */
                    boolean isAvalaraIntegration = false;
                    KwlReturnObject capresult = accountingHandlerDAOobj.getObject(ExtraCompanyPreferences.class.getName(), requestJobj.optString(Constants.companyKey));
                    if (capresult != null && capresult.getEntityList() != null && !capresult.getEntityList().isEmpty() && capresult.getEntityList().get(0) != null) {
                        ExtraCompanyPreferences extraPref = (ExtraCompanyPreferences) capresult.getEntityList().get(0);
                        isAvalaraIntegration = extraPref.isAvalaraIntegration();
                    }
                    if (isAvalaraIntegration) {
                        msg += "<br><br><b>NOTE:</b> " + messageSource.getMessage("acc.integration.lockedOnAvataxMsg", null, RequestContextUtils.getLocale(request));
                    }
                }
            }
        } catch (SessionExpiredException ex) {
            msg = ex.getMessage();
            Logger.getLogger(accInvoiceController.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            msg = "" + (ex.getMessage() != null ? ex.getMessage() : ex.getCause().getMessage());
            Logger.getLogger(accInvoiceController.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                jobj.put(Constants.RES_success, issuccess);
                jobj.put(Constants.RES_msg, msg);
            } catch (JSONException ex) {
                Logger.getLogger(accInvoiceController.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return new ModelAndView(Constants.jsonView, "model", jobj.toString());
    }

    public String deleteInvoicesPermanent(JSONObject requestJobj) throws ServiceException, AccountingException, SessionExpiredException, ParseException {
        String linkedTransaction = "";
        try {
            JSONArray jArr = new JSONArray(requestJobj.optString(Constants.data));
            String companyid = requestJobj.optString(Constants.companyKey);
            KwlReturnObject capresult = accountingHandlerDAOobj.getObject(CompanyAccountPreferences.class.getName(), companyid);
            CompanyAccountPreferences preferences = (CompanyAccountPreferences) capresult.getEntityList().get(0);
            int countryid = preferences.getCompany().getCountry() != null ? Integer.parseInt(preferences.getCompany().getCountry().getID()) : 0;

            boolean isFixedAsset = false;
            boolean isLeaseFixedAsset = false;
            boolean isConsignment = false;
            boolean auditcheck = true;
            if (!StringUtil.isNullOrEmpty(requestJobj.optString(Constants.isFixedAsset))) {
                isFixedAsset = Boolean.parseBoolean(requestJobj.optString(Constants.isFixedAsset));
            }
            if (!StringUtil.isNullOrEmpty(requestJobj.optString(Constants.isLeaseFixedAsset))) {
                isLeaseFixedAsset = Boolean.parseBoolean(requestJobj.optString(Constants.isLeaseFixedAsset));
            }
            if (!StringUtil.isNullOrEmpty(requestJobj.optString(Constants.isConsignment))) {
                isConsignment = Boolean.parseBoolean(requestJobj.optString(Constants.isConsignment));
            }
            if (!StringUtil.isNullOrEmpty(requestJobj.optString(Constants.auditcheck))) {
                auditcheck = Boolean.parseBoolean(requestJobj.optString(Constants.auditcheck));
            }
            for (int i = 0; i < jArr.length(); i++) {
                JSONObject jobj = jArr.getJSONObject(i);
                linkedTransaction = accInvoiceServiceDAO.deleteInvoicePermanent(linkedTransaction, jobj, requestJobj, companyid, isFixedAsset, isLeaseFixedAsset, isConsignment, auditcheck, countryid, preferences);
            }
        } catch (JSONException ex) {
            Logger.getLogger(accInvoiceController.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
            throw new AccountingException("Cannot extract data from client");
        }
        return linkedTransaction;
    } 
  
    public ModelAndView deleteOpeningInvoicePermanent(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        String msg = "";
        boolean issuccess = false;
        DefaultTransactionDefinition def = new DefaultTransactionDefinition();
        def.setName("R_Tx");
        def.setPropagationBehavior(TransactionDefinition.PROPAGATION_REQUIRED);

        TransactionStatus status = txnManager.getTransaction(def);
        try {
            String TransactionsInUse=deleteOpeningInvoicePermanent(request);
            txnManager.commit(status);
            issuccess = true;
            msg = (StringUtil.isNullOrEmpty(TransactionsInUse))?messageSource.getMessage("acc.rem.179", null, RequestContextUtils.getLocale(request)):messageSource.getMessage("acc.ob.InvoicesExcept", null, RequestContextUtils.getLocale(request))+" "+TransactionsInUse+" "+messageSource.getMessage("acc.ob.asInUseAreDeleted", null, RequestContextUtils.getLocale(request)); //"Invoice(s) has been deleted successfully";
        } catch (SessionExpiredException ex) {
            txnManager.rollback(status);
            msg = ex.getMessage();
            Logger.getLogger(accInvoiceController.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            txnManager.rollback(status);
            msg = "" + ex.getMessage();
            Logger.getLogger(accInvoiceController.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                jobj.put("success", issuccess);
                jobj.put("msg", msg);
            } catch (JSONException ex) {
                Logger.getLogger(accInvoiceController.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return new ModelAndView(Constants.jsonView, "model", jobj.toString());
    }
      
    public String deleteOpeningInvoicePermanent(HttpServletRequest request) throws ServiceException, AccountingException, SessionExpiredException {
        String UsedTransactions = "";
        String companyid = sessionHandlerImpl.getCompanyid(request);
        String invoiceid[] = request.getParameterValues("billidArray");
        String invoiceno[] = request.getParameterValues("invoicenoArray");
        String isExciseInvoice=request.getParameter("isExciseInvoice");
        boolean isexciseinvoice=false;
        if(!StringUtil.isNullOrEmpty(isExciseInvoice)){
            isexciseinvoice=Boolean.valueOf(isExciseInvoice);
        }
        
        KwlReturnObject result;
        for (int cnt = 0; cnt < invoiceid.length; cnt++) {
            String deletedWrittenOffJe = "";
            String msgForDeletedWriteOffJe = "";
            String deletedWrittenOffRecoveredJe = "";
            String msgForDeletedRecoveredWriteOffJe = "";
            String transactionNumber = invoiceno[cnt];
            if (!StringUtil.isNullOrEmpty(invoiceid[cnt])) {
                try {
                    result = accCreditNoteDAOobj.getCNDetailsFromOpeningBalanceInvoice(invoiceid[cnt], companyid);
                    List list = result.getEntityList();
                    if (!list.isEmpty()) {
                        UsedTransactions += transactionNumber + ", ";
                        throw new AccountingException(messageSource.getMessage("acc.nee.60", null, RequestContextUtils.getLocale(request)));
                    }

                    result = accInvoiceDAOobj.getDOFromInvoice(invoiceid[cnt], companyid);
                    list = result.getEntityList();
                    if (!list.isEmpty()) {
                        UsedTransactions += transactionNumber + ", ";
                        throw new AccountingException(messageSource.getMessage("acc.nee.67", null, RequestContextUtils.getLocale(request)));
                    }

                    HashMap<String, Object> receiptMap = new HashMap<String, Object>();

                    receiptMap.put("invoiceid", invoiceid[cnt]);
                    receiptMap.put(Constants.companyKey, companyid);

                    result = accReceiptDAOobj.getReceiptFromInvoice(receiptMap);
                    list = result.getEntityList();
                    if (!list.isEmpty()) {
                        UsedTransactions += transactionNumber + ", ";
                        throw new AccountingException(messageSource.getMessage("acc.nee.61", null, RequestContextUtils.getLocale(request)));
                    }
                    result = accReceiptDAOobj.getLinkDetailReceipt(receiptMap);
                    list = result.getEntityList();
                    if (!list.isEmpty()) {
                        UsedTransactions += transactionNumber + ", ";
                        throw new AccountingException(messageSource.getMessage("acc.openingInvoice.usedInPayment", null, RequestContextUtils.getLocale(request)));
                    }
                    result = accInvoiceDAOobj.getSRFromInvoice(invoiceid[cnt], companyid);
                    list = result.getEntityList();
                    if (!list.isEmpty()) {
                        UsedTransactions += transactionNumber + ", ";
                        throw new AccountingException(messageSource.getMessage("acc.nee.71", null, RequestContextUtils.getLocale(request)));
                    }
                    /*
                     * Check if invoice is claimed as bad debt
                     */
                    HashMap<String, Object> badMaps = new HashMap<String, Object>();
                    badMaps.put(Constants.companyKey, companyid);
                    badMaps.put("invoiceid", invoiceid[cnt]);

                    result = accInvoiceDAOobj.getBadDebtInvoiceMappingForInvoice(badMaps);
                    list = result.getEntityList();
                    if (!list.isEmpty()) {
                        UsedTransactions += transactionNumber + ", ";
                        throw new AccountingException(messageSource.getMessage("acc.nee.71", null, RequestContextUtils.getLocale(request)));
                    }
                    accJournalEntryobj.permanentDeleteJournalEntryDetailReval(invoiceid[cnt], companyid);
                    accJournalEntryobj.permanentDeleteJournalEntryReval(invoiceid[cnt], companyid);

                    HashMap<String, Object> writeOffMap = new HashMap<String, Object>();
                    writeOffMap.put("invoiceid", invoiceid[cnt]);
                    writeOffMap.put(Constants.companyKey, companyid);
                    KwlReturnObject writeOffJeResult = accWriteOffServiceDao.getWriteOffJEs(writeOffMap);
                    List<InvoiceWriteOff> IWO = writeOffJeResult.getEntityList();
                    for (InvoiceWriteOff iwo : IWO) {
                        deletedWrittenOffJe += iwo.getJournalEntry().getEntryNumber() + ",";
                    }
                    if (!deletedWrittenOffJe.equals("")) {
                        deletedWrittenOffJe = deletedWrittenOffJe.substring(0, deletedWrittenOffJe.length() - 1);
                        msgForDeletedWriteOffJe = messageSource.getMessage("acc.invoiceDelete.DeletedWriteOffJE", null, RequestContextUtils.getLocale(request)) + " " + deletedWrittenOffJe;
                    }

                    writeOffJeResult = accWriteOffServiceDao.getWriteOffJEs(writeOffMap);
                    IWO = writeOffJeResult.getEntityList();
                    for (InvoiceWriteOff iwo : IWO) {
                        deletedWrittenOffRecoveredJe += iwo.getReversejournalEntry().getEntryNumber() + ",";
                    }

                    if (!deletedWrittenOffRecoveredJe.equals("")) {
                        deletedWrittenOffRecoveredJe = deletedWrittenOffRecoveredJe.substring(0, deletedWrittenOffRecoveredJe.length() - 1);
                        msgForDeletedRecoveredWriteOffJe = messageSource.getMessage("acc.invoiceDelete.DeletedWriteOffRecoveredJE", null, RequestContextUtils.getLocale(request)) + " " + deletedWrittenOffRecoveredJe;
                    }
                    if (isexciseinvoice) {
                        accInvoiceDAOobj.deleteInvoiceDtails(invoiceid[cnt], companyid);
                    }
                    accInvoiceDAOobj.deleteInvoice(invoiceid[cnt], companyid);
                    auditTrailObj.insertAuditLog(AuditAction.OPENING_BALANCE_DELETED, "User " + sessionHandlerImpl.getUserFullName(request) + " has deleted an Opening Balance Sales Invoice Permanently " + invoiceno[cnt]+". "+msgForDeletedWriteOffJe+" "+msgForDeletedRecoveredWriteOffJe, request, invoiceid[cnt]);
                } catch (Exception ex) {
                    Logger.getLogger(accInvoiceController.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
                }
            }
        }
        return UsedTransactions;
    }

  
    public JSONArray getCustomerAgedReceivable(HttpServletRequest request) throws ServiceException, JSONException, SessionExpiredException, ParseException {
        JSONObject jObj = new JSONObject();
        JSONArray jArr = new JSONArray();
        try {
            String companyid = sessionHandlerImpl.getCompanyid(request);
            HashMap invoiceRequestParams = AccInvoiceServiceHandler.getInvoiceRequestMap(request);
//            String curDateString = request.getParameter("curdate")!=null?request.getParameter("curdate"):request.getParameter("stdate");
            String curDateString = !(StringUtil.isNullOrEmpty(request.getParameter(Constants.asOfDate))) ? request.getParameter(Constants.asOfDate) : request.getParameter(Constants.curdate);
            Date curDate = authHandler.getDateFormatter(request).parse(curDateString);
            int duration = request.getParameter("duration") == null ? 0 : Integer.parseInt(request.getParameter("duration"));
            boolean isdistibutive = StringUtil.getBoolean(request.getParameter("isdistributive"));
            boolean withinventory = StringUtil.getBoolean(request.getParameter("withinventory"));
//            String customerid = request.getParameter("accid");
            double amountdue1 = 0;
            double amountdue2 = 0;
            double amountdue3 = 0;
            double amountdue4 = 0;
             double amountdueinbase1 = 0;
            double amountdueinbase2 = 0;
            double amountdueinbase3 = 0;
            double amountdueinbase4 = 0;
            Calendar cal1 = Calendar.getInstance();
            Calendar cal2 = Calendar.getInstance();
            Calendar cal3 = Calendar.getInstance();
            cal1.setTime(curDate);
            cal2.setTime(curDate);
            cal3.setTime(curDate);
            cal2.add(Calendar.DAY_OF_YEAR, -duration);
            cal3.add(Calendar.DAY_OF_YEAR, -(duration * 2));
            
            String cal1String = authHandler.getDateOnlyFormat().format(cal1.getTime());
            Date cal1Date = authHandler.getDateOnlyFormat().parse(cal1String);

            String cal2String = authHandler.getDateOnlyFormat().format(cal2.getTime());
            Date cal2Date = authHandler.getDateOnlyFormat().parse(cal2String);

            String cal3String = authHandler.getDateOnlyFormat().format(cal3.getTime());
            Date cal3Date = authHandler.getDateOnlyFormat().parse(cal3String);
            KwlReturnObject custresult = accCustomerDAOobj.getCustomerForAgedReceivable(invoiceRequestParams);
            Iterator itrcust = custresult.getEntityList().iterator();
            while (itrcust.hasNext()) {
                amountdue1 = amountdue2 = amountdue3 = amountdue4 = amountdueinbase1 = amountdueinbase2 = amountdueinbase3 = amountdueinbase4 =0;
                JSONObject invJObj = new JSONObject();
                String personID = null;
                String personName = null;
                String aliasname = "";
                String amountdueInBase = null;
                String currencySymbol=null;
                String currencyid=null;
                Object custid = itrcust.next();
                invoiceRequestParams.put(Constants.customerid, custid);
                KwlReturnObject result = accInvoiceDAOobj.getInvoices(invoiceRequestParams);
                invJObj = getInvoiceJson(request, result.getEntityList());
                JSONArray invjarr = invJObj.getJSONArray(Constants.data);
                for (int i = 0; i < invjarr.length(); i++) {
                    JSONObject invobj = invjarr.getJSONObject(i);
                    personID = (invobj.has("personid"))?invobj.getString("personid"):"";
                    personName = (invobj.has("personname"))?invobj.getString("personname"):"";
                    aliasname = (invobj.has("aliasname"))?invobj.getString("aliasname"):"";
                    amountdueInBase = invobj.getString("amountdueinbase");
                    currencySymbol=(invobj.has("currencysymbol"))?invobj.getString("currencysymbol"):"";
                    currencyid=(invobj.has(Constants.currencyKey))?invobj.getString(Constants.currencyKey):"";
                    Date dueDate = authHandler.getDateFormatter(request).parse(invobj.getString("duedate"));

                    if (isdistibutive) {
                        if (dueDate.after(cal1Date) || dueDate.equals(cal1Date)) {
                            amountdueinbase1 += invobj.getDouble("amountdueinbase");
                            amountdue1 += invobj.getDouble("amountdue");
                        } else if ((cal2Date.before(dueDate) || cal2Date.equals(dueDate)) && cal1Date.after(dueDate)) {
                            amountdueinbase2 += invobj.getDouble("amountdueinbase");
                            amountdue2 += invobj.getDouble("amountdue");
                        } else if ((cal3Date.before(dueDate) || cal3Date.equals(dueDate)) && cal2Date.after(dueDate)) {
                            amountdueinbase3 += invobj.getDouble("amountdueinbase");
                            amountdue3 += invobj.getDouble("amountdue");
                        } else {
                            amountdueinbase4 += invobj.getDouble("amountdueinbase");
                            amountdue4 += invobj.getDouble("amountdue");
                        }
                    } else {
                        if (dueDate.after(cal1Date) || dueDate.equals(cal1Date)) {
                            amountdueinbase1 += invobj.getDouble("amountdueinbase");
                            amountdue1 += invobj.getDouble("amountdue");
                        }
                        if (dueDate.after(cal2Date) || dueDate.equals(cal2Date)) {
                            amountdueinbase2 += invobj.getDouble("amountdueinbase");
                            amountdue2 += invobj.getDouble("amountdue");
                        }
                        if (dueDate.after(cal3Date) || dueDate.equals(cal3Date)) {
                            amountdueinbase3 += invobj.getDouble("amountdueinbase");
                            amountdue3 += invobj.getDouble("amountdue");
                        }
                        amountdueinbase4 += invobj.getDouble("amountdueinbase");
                        amountdue4 += invobj.getDouble("amountdue");
                    }
                }
                if (invjarr.length() > 0) {
                    jObj = new JSONObject();
                    jObj.put("personid", personID);
                    jObj.put("amountdueinbase", amountdueInBase);
                    jObj.put("personname", personName);
                    jObj.put("aliasname", aliasname);
                    jObj.put("amountdue1", Double.valueOf(authHandler.formattedAmount(amountdue1, companyid)));
                    jObj.put("amountdue2",Double.valueOf(authHandler.formattedAmount(amountdue2, companyid)));
                    jObj.put("amountdue3", Double.valueOf(authHandler.formattedAmount(amountdue3, companyid)));
                    jObj.put("amountdue4", Double.valueOf(authHandler.formattedAmount(amountdue4, companyid)));
                    jObj.put("amountdueinbase1", Double.valueOf(authHandler.formattedAmount(amountdueinbase1, companyid)));
                    jObj.put("amountdueinbase2",Double.valueOf(authHandler.formattedAmount(amountdueinbase2, companyid)));
                    jObj.put("amountdueinbase3", Double.valueOf(authHandler.formattedAmount(amountdueinbase3, companyid)));
                    jObj.put("amountdueinbase4", Double.valueOf(authHandler.formattedAmount(amountdueinbase4, companyid)));
                    jObj.put("currencysymbol", currencySymbol);
                    jObj.put(Constants.currencyKey, currencyid);
                    double amountdue= Double.valueOf(authHandler.formattedAmount((amountdue1 + amountdue2 + amountdue3 + amountdue4), companyid));
                    jObj.put("total",amountdue );
                    double amountdueinbase= Double.valueOf(authHandler.formattedAmount((amountdueinbase1 + amountdueinbase2 + amountdueinbase3 + amountdueinbase4), companyid));
                    jObj.put("totalinbase", amountdueinbase);
                    jArr.put(jObj);
                }
            }
        } catch (ServiceException ex) {
            Logger.getLogger(accInvoiceController.class.getName()).log(Level.SEVERE, null, ex);
            throw ex;
        }
        return jArr;
    }
   
    
    public ModelAndView exportSATSCustomerLedgerJasperReport(HttpServletRequest request, HttpServletResponse response) {
       
        Map<String,Object> statementOfAccountsMap=new HashMap<String, Object>();
        String view = "";
        
        StatementOfAccounts statementOfAccounts=new StatementOfAccounts(); 
        ArrayList <StatementOfAccounts> statementOfAccountsList=new ArrayList<StatementOfAccounts>();
        try{
         String companyid = sessionHandlerImpl.getCompanyid(request);
         KwlReturnObject result = accountingHandlerDAOobj.getObject(CompanyAccountPreferences.class.getName(), sessionHandlerImpl.getCompanyid(request));
         CompanyAccountPreferences companyAccountPreferences = (CompanyAccountPreferences) result.getEntityList().get(0);
         
         KwlReturnObject cmpresult = accountingHandlerDAOobj.getObject(Company.class.getName(), companyid);
         Company company = (Company) cmpresult.getEntityList().get(0);
         statementOfAccounts.setName(company.getCompanyName()!=null?company.getCompanyName():"");
          
         Calendar cal1 = Calendar.getInstance();
         Date date=cal1.getTime();
         DateFormat df=new SimpleDateFormat("dd/MM/yyyy");
         statementOfAccounts.setDate(date!=null?df.format(date):"");
         statementOfAccounts.setEmail(company.getEmailID()!=null?company.getEmailID():"");
         statementOfAccounts.setFax(company.getFaxNumber()!=null?company.getFaxNumber():"");
         statementOfAccounts.setPhone(company.getPhoneNumber()!=null?company.getPhoneNumber():"");
         statementOfAccounts.setGstRegNo(companyAccountPreferences.getGstNumber()!=null?companyAccountPreferences.getGstNumber():"");
         statementOfAccounts.setUem(companyAccountPreferences.getCompanyUEN()!=null?companyAccountPreferences.getCompanyUEN():"");
         statementOfAccounts.setCurrency(company.getCurrency()!=null?company.getCurrency().getName():"");
         statementOfAccountsList.add(statementOfAccounts);
         
                    
            statementOfAccountsMap=getSATSCustomerLedgerJasper(request);
            statementOfAccountsMap.put("format", "pdf");
            String fileName1 = StorageHandler.GetDocStorePath()+ companyid + "_template" + FileUploadHandler.getCompanyImageExt();
            statementOfAccountsMap.put("imagePath", fileName1);
            statementOfAccountsMap.put("datasource", new JRBeanCollectionDataSource(statementOfAccountsList));
                InputStream inputStream = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/SATSStatementOfAccounts.jrxml");
                JasperDesign jasperDesign = JRXmlLoader.load(inputStream);
                JasperReport jasperReport = JasperCompileManager.compileReport(jasperDesign);

                InputStream inputStreamSubReport = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/SATSStatementOfAccountsSubReport.jrxml");
                JasperDesign jasperDesignSubReport = JRXmlLoader.load(inputStreamSubReport);
                JasperReport jasperReportSubReport = JasperCompileManager.compileReport(jasperDesignSubReport);

                statementOfAccountsMap.put("StatementOfAccountsSubReport", jasperReportSubReport);
                response.setHeader("Content-Disposition", "attachment;filename=" + "StatementOfAccounts.pdf");
                JRBeanCollectionDataSource beanColDataSource = new JRBeanCollectionDataSource(statementOfAccountsList);
                JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, statementOfAccountsMap, beanColDataSource);
                JRPdfExporter exporter = new JRPdfExporter();
                exporter.setParameter(JRExporterParameter.JASPER_PRINT, jasperPrint);
                exporter.setParameter(JRPdfExporterParameter.OUTPUT_STREAM, response.getOutputStream());
                exporter.exportReport();
        }
        catch(Exception ex) {
                Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
        }
        return new ModelAndView(view,statementOfAccountsMap);
    }

    public Map<String,Object> getSATSCustomerLedgerJasper(HttpServletRequest request) throws ServiceException, SessionExpiredException {
        ArrayList<StatementOfAccountsSubReport> statementOfReportsSubReportList = new ArrayList<StatementOfAccountsSubReport>();
        HashMap<String,StatementOfAccountsSubReport> stmSubReportListMap = new HashMap<String,StatementOfAccountsSubReport>();
        Map<String, Object> statementOfAccountsMap = new HashMap<String, Object>();
        HashMap<String, ArrayList> amountDueMap = new HashMap<String, ArrayList>();
        String companyid = sessionHandlerImpl.getCompanyid(request);
        try {
            boolean isPostDatedCheque = false;
            if (request.getParameter("isPostDatedCheque") != null) {
                isPostDatedCheque = Boolean.parseBoolean(request.getParameter("isPostDatedCheque"));
            }
            Date startDate = authHandler.getDateFormatter(request).parse(request.getParameter("stdate"));
            Date endDate = authHandler.getDateFormatter(request).parse(request.getParameter("enddate"));
            DecimalFormat satsAmountFormat = new DecimalFormat("##,###,##0.000");
            DateFormat satsSOAdateFormat1 = new SimpleDateFormat("dd.MM.yyyy");
            DateFormat satsSOAdateFormat2 = new SimpleDateFormat("MMMM dd, yyyy");
            String customerIds = request.getParameter("customerIds");
            String withoutinventory = request.getParameter("withoutinventory");
            HashMap<String, Object> requestParams = AccountingManager.getGlobalParams(request);
            requestParams.put("customerIds", customerIds);
            requestParams.put("withoutinventory", withoutinventory);
            requestParams.put("startDate", startDate);
            requestParams.put("endDate", endDate);
            requestParams.put("isPostDatedCheque", isPostDatedCheque);
            KwlReturnObject customerLedger = accInvoiceDAOobj.getCustomerLedgerReport(requestParams);
            List customerLedgerList = customerLedger.getEntityList();
            KwlReturnObject curresult = accountingHandlerDAOobj.getObject(KWLCurrency.class.getName(), sessionHandlerImpl.getCurrencyID(request));
            KWLCurrency baseCurrency = (KWLCurrency) curresult.getEntityList().get(0);
            double balanceAmtInBase = 0;
            double balanceAmount = 0;
            String prevCustomer = "";
            Date curDate = null;
            int duration = Integer.parseInt(request.getParameter("interval"));
            Calendar cal1 = Calendar.getInstance();
            Calendar cal2 = Calendar.getInstance();
            Calendar cal3 = Calendar.getInstance();
            Calendar cal4 = Calendar.getInstance();
            curDate = Calendar.getInstance().getTime();
            cal1.setTime(curDate);
            cal2.setTime(curDate);
            cal3.setTime(curDate);
            cal4.setTime(curDate);
            cal2.add(Calendar.DAY_OF_YEAR, -duration);
            cal3.add(Calendar.DAY_OF_YEAR, -(duration * 2));
            cal4.add(Calendar.DAY_OF_YEAR, -(duration * 3));
            
            HashMap<String,JSONObject> hashMapJSON=new HashMap<String, JSONObject>();
            JSONArray jSONArray=getCustomerAgedReceivableMerged(request);
            for(int i=0;i<jSONArray.length();i++){
            JSONObject jSONObject=jSONArray.getJSONObject(i);
                hashMapJSON.put(jSONObject.getString("personid"), jSONObject);
            }
          
            String defValue=authHandler.getCompleteDFStringForAmount("0.", companyid);
            
            ArrayList<Double> amountDueList = new ArrayList<Double>();
            double currencyTotalAmount=0.00;
            Map<String,HashMap> currencyHashMap=new HashMap<String,HashMap>();
            Map<String,String> currencyCodeHashMap=new HashMap<String, String>();
            
            //params to send to get billing address
            HashMap<String, Object> addressParams = new HashMap<String, Object>();
            addressParams.put(Constants.companyKey, sessionHandlerImpl.getCompanyid(request));
            addressParams.put("isDefaultAddress", true); //always true to get defaultaddress
            for (int i = 0; i < customerLedgerList.size(); i++) {
                Object[] tempCustomerLedger = (Object[]) customerLedgerList.get(i);
                String type = (String) tempCustomerLedger[0];
                String invoiceId = (String) tempCustomerLedger[1]; // if(type=='invoice') ==> invoice.id, if(type=='receipt') ==> receipt.id, if(type=='creditnote') ==> creditnote.id
                String invoiceNumber = (String) tempCustomerLedger[2]; // if(type=='invoice') ==> invoice.invoicenumber, if(type=='receipt') ==> receipt.receiptnumber, if(type=='creditnote') ==> creditnote.cnnumber
                String currencyid = StringUtil.isNullOrEmpty((String) tempCustomerLedger[5]) ? sessionHandlerImpl.getCurrencyID(request) : (String) tempCustomerLedger[5]; // if(type=='invoice') ==> invoice.currency, if(type=='receipt') ==> receipt.currency, if(type=='creditnote') ==> creditnote.currency
                double amount = (Double) tempCustomerLedger[6]; // if(type=='invoice') ==> jedetail.amount, if(type=='receipt') ==> receiptdetails.amount, if(type=='creditnote') ==> jedetail.amount
                String jeEntryNumber = (String) tempCustomerLedger[7];
                Date jeEntryDate = (Date) tempCustomerLedger[8];
                double jeEntryExternalCurrencyRate = (Double) tempCustomerLedger[9];
                String invoiceCustomerId = (String) tempCustomerLedger[10];
                KwlReturnObject custresult=accountingHandlerDAOobj.getObject(Customer.class.getName(), invoiceCustomerId);
                Customer cust=(Customer)custresult.getEntityList().get(0);
                String invoiceCustomerCode = cust.getAcccode();
                
                addressParams.put("isBillingAddress", true); //true to get billing address
                addressParams.put(Constants.customerid, cust.getID());
                String invoiceCustomerAdd = accountingHandlerDAOobj.getCustomerAddress(addressParams);
                
                String invoiceCustomerAcc = cust.getAccount()!=null?cust.getAccount().getAcccode():"";
                String invoiceCustomerTerms = cust.getCreditTerm()!=null?cust.getCreditTerm().getTermdays()+" Days":"";
                String invoiceCustomerName = (String) tempCustomerLedger[11];
                
                KWLCurrency currency = null;
                if (!StringUtil.isNullOrEmpty(currencyid)) {
                    KwlReturnObject curresult1 = accountingHandlerDAOobj.getObject(KWLCurrency.class.getName(), currencyid);
                    currency = (KWLCurrency) curresult1.getEntityList().get(0);
                }
                if (!prevCustomer.equals(invoiceCustomerId)) {
                    currencyHashMap.clear();
                    currencyCodeHashMap.clear();
                    prevCustomer = invoiceCustomerId;
                    balanceAmtInBase = 0; 
                    balanceAmount = 0;
                    HashMap<String,Double> currncyAmount=new HashMap<String, Double>();
                    currncyAmount.put(currency.getCurrencyID(), 0.00);
                    currencyHashMap.put(invoiceCustomerId, currncyAmount);
                    currencyTotalAmount=0.00;
                }
                
                if(!currencyCodeHashMap.containsKey(currency.getCurrencyID())){
                    currencyCodeHashMap.put(currency.getCurrencyID(), currency.getCurrencyCode());
                }
                StatementOfAccountsSubReport statementOfReportsSubReport = new StatementOfAccountsSubReport();
                statementOfReportsSubReport.setBalance(defValue);
                statementOfReportsSubReport.setAmountDue1(defValue);
                statementOfReportsSubReport.setAmountDue2(defValue);
                statementOfReportsSubReport.setAmountDue3(defValue);
                statementOfReportsSubReport.setAmountDue4(defValue);
                statementOfReportsSubReport.setAmountDue5(defValue);
                Object[] tempNextCustomerLedger = null;
                if (i != customerLedgerList.size() - 1) {
                    tempNextCustomerLedger = (Object[]) customerLedgerList.get(i + 1);
                }
                String nextInvoiceCustomerId = tempNextCustomerLedger != null ? (String) tempNextCustomerLedger[10] : "";
                statementOfReportsSubReport.setTransactionId(invoiceNumber);
                statementOfReportsSubReport.setJeId(jeEntryNumber);
                statementOfReportsSubReport.setDate(satsSOAdateFormat1.format(jeEntryDate));

                KwlReturnObject bAmt = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, amount, currencyid, jeEntryDate, jeEntryExternalCurrencyRate);
                double amountinbase = (Double) bAmt.getEntityList().get(0);
                amountinbase = authHandler.round(amountinbase, companyid);
                if (type.equalsIgnoreCase("Cash Sale")) {
                    statementOfReportsSubReport.setAmount((amount != 0) ? amount<0?satsAmountFormat.format(amount*-1):satsAmountFormat.format(amount) : "");
                    statementOfReportsSubReport.setBaseamount((amountinbase != 0) ? amountinbase<0?satsAmountFormat.format(amountinbase*-1):satsAmountFormat.format(amountinbase) : "");
                    statementOfReportsSubReport.setBalance((currencyTotalAmount != 0) ? currencyTotalAmount < 0 ? satsAmountFormat.format(currencyTotalAmount * -1) : satsAmountFormat.format(currencyTotalAmount) : satsAmountFormat.format(0));
                    statementOfReportsSubReport.setNegativesign1(amount >= 0 ? "" : "-");
                    statementOfReportsSubReport.setNegativesign2(amountinbase >= 0 ? "" : "-");
                    statementOfReportsSubReport.setNegativesign3(currencyTotalAmount >= 0 ? "" : "-");

                } else if (type.equalsIgnoreCase("Customer Invoice")||type.equalsIgnoreCase("Sales Invoice")) {
                    HashMap<String, Double> tempHashMap = currencyHashMap.containsKey(invoiceCustomerId) ? currencyHashMap.get(invoiceCustomerId) : new HashMap<String, Double>();
                    currencyTotalAmount = tempHashMap.containsKey(currency.getCurrencyID()) ? tempHashMap.get(currency.getCurrencyID()) : 0.00;
                    currencyTotalAmount = currencyTotalAmount + amount;
                    tempHashMap.put(currency.getCurrencyID(), currencyTotalAmount);
                    currencyHashMap.put(invoiceCustomerId, tempHashMap);
                    balanceAmtInBase = balanceAmtInBase + amountinbase;
                    balanceAmount = balanceAmount + amount;

                    statementOfReportsSubReport.setAmount((amount != 0) ? amount<0?satsAmountFormat.format(amount*-1):satsAmountFormat.format(amount) : "");
                    statementOfReportsSubReport.setBaseamount((amountinbase != 0) ? amountinbase<0?satsAmountFormat.format(amountinbase*-1):satsAmountFormat.format(amountinbase) : "");
                    statementOfReportsSubReport.setBalance((balanceAmtInBase != 0) ? balanceAmtInBase < 0 ? satsAmountFormat.format(balanceAmtInBase * -1) : satsAmountFormat.format(balanceAmtInBase) : satsAmountFormat.format(0));
                    statementOfReportsSubReport.setNegativesign1(amount >= 0 ? "" : "-");
                    statementOfReportsSubReport.setNegativesign2(amountinbase >= 0 ? "" : "-");
                    statementOfReportsSubReport.setNegativesign3(balanceAmtInBase >= 0 ? "" : "-");

                } else if (type.equalsIgnoreCase("Payment Made")) {//For make payment to customer
                    HashMap<String, Double> tempHashMap = currencyHashMap.containsKey(invoiceCustomerId) ? currencyHashMap.get(invoiceCustomerId) : new HashMap<String, Double>();
                    currencyTotalAmount = tempHashMap.containsKey(currency.getCurrencyID()) ? tempHashMap.get(currency.getCurrencyID()) : 0.00;
                    currencyTotalAmount = currencyTotalAmount + amount;
                    tempHashMap.put(currency.getCurrencyID(), currencyTotalAmount);
                    currencyHashMap.put(invoiceCustomerId, tempHashMap);
                    balanceAmtInBase = balanceAmtInBase + amountinbase;
                    balanceAmount = balanceAmount + amount;

                   statementOfReportsSubReport.setAmount((amount != 0) ? amount<0?satsAmountFormat.format(amount*-1):satsAmountFormat.format(amount) : "");
                    statementOfReportsSubReport.setBaseamount((amountinbase != 0) ? amountinbase<0?satsAmountFormat.format(amountinbase*-1):satsAmountFormat.format(amountinbase) : "");
                    statementOfReportsSubReport.setBalance((balanceAmtInBase != 0) ? balanceAmtInBase < 0 ? satsAmountFormat.format(balanceAmtInBase * -1) : satsAmountFormat.format(balanceAmtInBase) : satsAmountFormat.format(0));
                    statementOfReportsSubReport.setNegativesign1(amount >= 0 ? "" : "-");
                    statementOfReportsSubReport.setNegativesign2(amountinbase >= 0 ? "" : "-");
                    statementOfReportsSubReport.setNegativesign3(balanceAmtInBase >= 0 ? "" : "-");

                } else if (type.equalsIgnoreCase("Debit Note")) {//For Debit note of customer
                    HashMap<String, Double> tempHashMap = currencyHashMap.containsKey(invoiceCustomerId) ? currencyHashMap.get(invoiceCustomerId) : new HashMap<String, Double>();
                    currencyTotalAmount = tempHashMap.containsKey(currency.getCurrencyID()) ? tempHashMap.get(currency.getCurrencyID()) : 0.00;
                    currencyTotalAmount = currencyTotalAmount + amount;
                    tempHashMap.put(currency.getCurrencyID(), currencyTotalAmount);
                    currencyHashMap.put(invoiceCustomerId, tempHashMap);
                    balanceAmtInBase = balanceAmtInBase + amountinbase;
                    balanceAmount = balanceAmount + amount;

                    statementOfReportsSubReport.setAmount((amount != 0) ? amount<0?satsAmountFormat.format(amount*-1):satsAmountFormat.format(amount) : "");
                    statementOfReportsSubReport.setBaseamount((amountinbase != 0) ? amountinbase<0?satsAmountFormat.format(amountinbase*-1):satsAmountFormat.format(amountinbase) : "");
                    statementOfReportsSubReport.setBalance((balanceAmtInBase != 0) ? balanceAmtInBase < 0 ? satsAmountFormat.format(balanceAmtInBase * -1) : satsAmountFormat.format(balanceAmtInBase) : satsAmountFormat.format(0));
                    statementOfReportsSubReport.setNegativesign1(amount >= 0 ? "" : "-");
                    statementOfReportsSubReport.setNegativesign2(amountinbase >= 0 ? "" : "-");
                    statementOfReportsSubReport.setNegativesign3(balanceAmtInBase >= 0 ? "" : "-");

                } else {  //if((type.equalsIgnoreCase("Payment Received")) || (type.equalsIgnoreCase("Credit Note")))
                    HashMap<String, Double> tempHashMap = currencyHashMap.containsKey(invoiceCustomerId) ? currencyHashMap.get(invoiceCustomerId) : new HashMap<String, Double>();
                    currencyTotalAmount = tempHashMap.containsKey(currency.getCurrencyID()) ? tempHashMap.get(currency.getCurrencyID()) : 0.00;
                    currencyTotalAmount = currencyTotalAmount - amount;
                    tempHashMap.put(currency.getCurrencyID(), currencyTotalAmount);
                    currencyHashMap.put(invoiceCustomerId, tempHashMap);
                    balanceAmtInBase = balanceAmtInBase - amountinbase;
                    balanceAmount = balanceAmount - amount;

                    statementOfReportsSubReport.setAmount((amount != 0) ? amount<0?satsAmountFormat.format(amount*-1):satsAmountFormat.format(amount) : "");
                    statementOfReportsSubReport.setBaseamount((amountinbase != 0) ? amountinbase<0?satsAmountFormat.format(amountinbase*-1):satsAmountFormat.format(amountinbase) : "");
                    statementOfReportsSubReport.setBalance((balanceAmtInBase != 0) ? balanceAmtInBase < 0 ? satsAmountFormat.format(balanceAmtInBase * -1) : satsAmountFormat.format(balanceAmtInBase) : satsAmountFormat.format(0));
                    statementOfReportsSubReport.setNegativesign1("-");
                    statementOfReportsSubReport.setNegativesign2("-");
                    statementOfReportsSubReport.setNegativesign3(balanceAmtInBase >= 0 ? "" : "-");
                }
                statementOfReportsSubReport.setCustomer(invoiceCustomerName);
                statementOfReportsSubReport.setCustomercode(invoiceCustomerCode);
                statementOfReportsSubReport.setCustomerAddress(invoiceCustomerAdd.replaceAll("\n", "<br>"));
                statementOfReportsSubReport.setCustomeracccode(invoiceCustomerAcc);
                statementOfReportsSubReport.setTerms(invoiceCustomerTerms);
                statementOfReportsSubReport.setAttn("");

                if (hashMapJSON.containsKey(invoiceCustomerId)) {
                    JSONObject jSONObject = hashMapJSON.get(invoiceCustomerId);
                    statementOfReportsSubReport.setAmountDue1((jSONObject.getDouble("amountdueinbase2"))<0?((satsAmountFormat.format(jSONObject.getDouble("amountdueinbase2")*-1))+"-"):satsAmountFormat.format(jSONObject.getDouble("amountdueinbase2")) + "");
                    statementOfReportsSubReport.setAmountDue2((jSONObject.getDouble("amountdueinbase3"))<0?((satsAmountFormat.format(jSONObject.getDouble("amountdueinbase3")*-1))+"-"):satsAmountFormat.format(jSONObject.getDouble("amountdueinbase3")) + "");
                    statementOfReportsSubReport.setAmountDue3((jSONObject.getDouble("amountdueinbase4"))<0?((satsAmountFormat.format(jSONObject.getDouble("amountdueinbase4")*-1))+"-"):satsAmountFormat.format(jSONObject.getDouble("amountdueinbase4")) + "");
                    statementOfReportsSubReport.setAmountDue4((jSONObject.getDouble("amountdueinbase5"))<0?((satsAmountFormat.format(jSONObject.getDouble("amountdueinbase5")*-1))+"-"):satsAmountFormat.format(jSONObject.getDouble("amountdueinbase5")) + "");
                    statementOfReportsSubReport.setAmountDue5((jSONObject.getDouble("totalinbase"))<0?((satsAmountFormat.format(jSONObject.getDouble("totalinbase")*-1))+"-"):satsAmountFormat.format(jSONObject.getDouble("totalinbase")) + "");
                }
                amountDueMap.put(invoiceCustomerId, amountDueList);
                statementOfReportsSubReport.setAmount1Header("Current");
                statementOfReportsSubReport.setAmount2Header("1 month");
                statementOfReportsSubReport.setAmount3Header("2 months");
                statementOfReportsSubReport.setAmount4Header("3 months & over");
                statementOfReportsSubReport.setCurrency(currency.getCurrencyCode());
                statementOfReportsSubReport.setAgeingCurrency(baseCurrency.getCurrencyCode());
                statementOfReportsSubReport.setBaseCurrency(baseCurrency.getCurrencyCode());
                if (i == customerLedgerList.size() - 1) {
                    statementOfReportsSubReport.setPageBreak(false);
                }
                List<SOABalanceOutstandingPojo> outstandingPojos = new ArrayList<SOABalanceOutstandingPojo>();
                if (!nextInvoiceCustomerId.equals(invoiceCustomerId)) {
                    statementOfReportsSubReport.setOutstandingFlag(true);
                    for (Map.Entry<String, HashMap> entry : currencyHashMap.entrySet()) {
                        HashMap<String, Double> tempHashMap = entry.getValue();
                        for (Map.Entry<String, Double> entryInner : tempHashMap.entrySet()) {
                            SOABalanceOutstandingPojo sOABalanceOutstandingPojo = new SOABalanceOutstandingPojo();
                            sOABalanceOutstandingPojo.setBaseCurrency(currencyCodeHashMap.get(entryInner.getKey()));
                            sOABalanceOutstandingPojo.setBalance(authHandler.formattedAmount(entryInner.getValue(), companyid));
                            outstandingPojos.add(sOABalanceOutstandingPojo);
                        }
                    }
                }
                KwlReturnObject result = accountingHandlerDAOobj.getObject(CompanyAccountPreferences.class.getName(), sessionHandlerImpl.getCompanyid(request));
                CompanyAccountPreferences companyAccountPreferences = (CompanyAccountPreferences) result.getEntityList().get(0);

                KwlReturnObject cmpresult = accountingHandlerDAOobj.getObject(Company.class.getName(), companyid);
                Company company = (Company) cmpresult.getEntityList().get(0);
                Calendar cal0 = Calendar.getInstance();
                Date date = cal0.getTime();
                statementOfReportsSubReport.setHeaderdate(date != null ? satsSOAdateFormat2.format(date) : "");
                statementOfReportsSubReport.setGstRegNo(companyAccountPreferences.getGstNumber() != null ? companyAccountPreferences.getGstNumber() : "");
                statementOfReportsSubReport.setUem(companyAccountPreferences.getCompanyUEN() != null ? companyAccountPreferences.getCompanyUEN() : "");
                statementOfReportsSubReport.setBasecurrencysymbol(company.getCurrency() != null ? company.getCurrency().getName() : "");
                String fileName1 = StorageHandler.GetDocStorePath() + companyid + "_template" + FileUploadHandler.getCompanyImageExt();
                statementOfReportsSubReport.setImagepath(fileName1);
                statementOfReportsSubReport.setsOABalanceOutstandingPojos(outstandingPojos);
                if (statementOfReportsSubReport.getBalance().contains("0.00")) {
                    statementOfReportsSubReport.setBalance(satsAmountFormat.format(0));
                }
                statementOfReportsSubReport.setCreditordebit("Credit");
                statementOfReportsSubReport.setCustorven("Customer");
                statementOfReportsSubReportList.add(statementOfReportsSubReport);
                stmSubReportListMap.put(invoiceCustomerId, statementOfReportsSubReport);
            }
            statementOfAccountsMap.put("StatementOfAccountsSubReportData", new JRBeanCollectionDataSource(statementOfReportsSubReportList));

        } catch (ParseException |JSONException ex) {
            Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
            throw ServiceException.FAILURE("getCustomerLedgerJasper : " + ex.getMessage(), ex);
        } 
        return statementOfAccountsMap;
    }
    
    public JSONArray getCustomerAgedReceivableMerged(HttpServletRequest request) throws ServiceException, JSONException, SessionExpiredException, ParseException {
        JSONObject jObj = new JSONObject();
        JSONArray jArr = new JSONArray();
        try {          
            HashMap invoiceRequestParams = AccInvoiceServiceHandler.getInvoiceRequestMap(request);
            String companyid = sessionHandlerImpl.getCompanyid(request);
            invoiceRequestParams.put("companyid", companyid);
//            String curDateString = request.getParameter("curdate")!=null?request.getParameter("curdate"):request.getParameter("stdate");
            String curDateString = !(StringUtil.isNullOrEmpty(request.getParameter(Constants.asOfDate))) ? request.getParameter(Constants.asOfDate) : request.getParameter(Constants.curdate);
            DateFormat df = authHandler.getDateOnlyFormat();
            Date curDate = df.parse(curDateString);
            int duration = request.getParameter("duration") == null ? 0 : Integer.parseInt(request.getParameter("duration"));
            boolean isdistibutive = StringUtil.getBoolean(request.getParameter("isdistributive"));
            int datefilter = StringUtil.getInteger(request.getParameter("datefilter"));// 0 = Invoice Due date OR 1 = Invoice date
            double amountdue1 = 0;
            double amountdue2 = 0;
            double amountdue3 = 0;
            double amountdue4 = 0;
            double amountdue5 = 0;
            double amountdue6 = 0;
            double amountdue7 = 0;
            double amountdue8 = 0;
            double amountdueinbase1 = 0;
            double amountdueinbase2 = 0;
            double amountdueinbase3 = 0;
            double amountdueinbase4 = 0;
            double amountdueinbase5 = 0;
            double amountdueinbase6 = 0;
            double amountdueinbase7 = 0;
            double amountdueinbase8 = 0;
            
            Calendar cal1 = Calendar.getInstance();
            Calendar cal2 = Calendar.getInstance();
            Calendar cal3 = Calendar.getInstance();
            Calendar cal4 = Calendar.getInstance();
            Calendar cal5 = Calendar.getInstance();
            Calendar cal6 = Calendar.getInstance();
            Calendar cal7 = Calendar.getInstance();
            
          
            Calendar customizeSumryFrom1 = Calendar.getInstance();
            Calendar customizeSumryTo1 = Calendar.getInstance();
            Calendar customizeSumryFrom2 = Calendar.getInstance();
            Calendar customizeSumryTo2 = Calendar.getInstance();
            Calendar customizeSumryFrom3 = Calendar.getInstance();
            Calendar customizeSumryTo3 = Calendar.getInstance();
            Calendar customizeSumryFrom4 = Calendar.getInstance();
            Calendar customizeSumryTo4 = Calendar.getInstance();
            Calendar customizeSumryFrom5 = Calendar.getInstance();
            Calendar customizeSumryTo5 = Calendar.getInstance();
            Calendar customizeSumryFrom6 = Calendar.getInstance();
            Calendar customizeSumryTo6 = Calendar.getInstance();
            Calendar customizeSumryFrom7 = Calendar.getInstance();
            Calendar customizeSumryTo7 = Calendar.getInstance();
            boolean customizedSumryReportFlag = false;
            
            cal1.setTime(curDate);
            cal2.setTime(curDate);
            cal3.setTime(curDate);
            cal4.setTime(curDate);
            cal5.setTime(curDate);
            cal6.setTime(curDate);
            cal7.setTime(curDate);
            cal2.add(Calendar.DAY_OF_YEAR, -duration);
            cal3.add(Calendar.DAY_OF_YEAR, -(duration * 2));
            cal4.add(Calendar.DAY_OF_YEAR, -(duration * 3));
            cal5.add(Calendar.DAY_OF_YEAR, -(duration * 4));
            cal6.add(Calendar.DAY_OF_YEAR, -(duration * 5));
            cal7.add(Calendar.DAY_OF_YEAR, -(duration * 6));
                       
            Date cal1Date = null;
            Date cal2Date = null;
            Date cal3Date = null;
            Date cal4Date = null;
            Date cal5Date = null;
            Date cal6Date = null;
            Date cal7Date = null;

            String cal1String = authHandler.getDateOnlyFormat().format(cal1.getTime());
            cal1Date = authHandler.getDateOnlyFormat().parse(cal1String);

            String cal2String = authHandler.getDateOnlyFormat().format(cal2.getTime());
            cal2Date = authHandler.getDateOnlyFormat().parse(cal2String);

            String cal3String = authHandler.getDateOnlyFormat().format(cal3.getTime());
            cal3Date = authHandler.getDateOnlyFormat().parse(cal3String);

            String cal4String = authHandler.getDateOnlyFormat().format(cal4.getTime());
            cal4Date = authHandler.getDateOnlyFormat().parse(cal4String);

            String cal5String = authHandler.getDateOnlyFormat().format(cal5.getTime());
            cal5Date = authHandler.getDateOnlyFormat().parse(cal5String);

            String cal6String = authHandler.getDateOnlyFormat().format(cal6.getTime());
            cal6Date = authHandler.getDateOnlyFormat().parse(cal6String);

            String cal7String = authHandler.getDateOnlyFormat().format(cal7.getTime());
            cal7Date = authHandler.getDateOnlyFormat().parse(cal7String);

           
            Map<String,String> amountDueMap=new HashMap<String, String>();
            
            String customizedSumryReportFlagStr = request.getParameter("customizedSummaryReportFlag");
            if (!StringUtil.isNullOrEmpty(customizedSumryReportFlagStr)) {
                customizedSumryReportFlag = Boolean.parseBoolean(customizedSumryReportFlagStr);
                String fromDuration=null;
                String toDuration=null;
                List<String> fromDurationArr=new ArrayList<String>();// request.getParameter("fromDuration").split(",");
                List<String> toDurationArr=new ArrayList<String>();
                
          
                JSONArray fromDurationjson=new JSONArray(request.getParameter("fromDuration"));
                JSONArray toDurationjson=new JSONArray(request.getParameter("toDuration"));
                for(int i=0;i<fromDurationjson.length();i++)
                {
                    JSONObject object1=new JSONObject(fromDurationjson.getString(i));
                    fromDurationArr.add(object1.getString("id"));
                    amountDueMap.put(object1.getString("amountdueindex"),object1.getString("amountdue"));
                    JSONObject object2=new JSONObject(toDurationjson.getString(i));
                    toDurationArr.add(object2.getString("id"));
                    
                    
                }    
                for(int i=0;i<fromDurationArr.size();i++){
                    fromDuration=fromDurationArr.get(i);
                    toDuration=toDurationArr.get(i);
                    switch(i+1){
                       case 1:
                if (!StringUtil.isNullOrEmpty(fromDuration) && !StringUtil.isNullOrEmpty(toDuration)) {
                    int fromDur = Integer.parseInt(fromDuration);
                    int toDur = Integer.parseInt(toDuration);
                                customizeSumryFrom1.setTime(curDate);
                                customizeSumryTo1.setTime(curDate);
                                customizeSumryFrom1.add(Calendar.DAY_OF_YEAR, -fromDur);
                                customizeSumryTo1.add(Calendar.DAY_OF_YEAR, -toDur);
                }
                            break;
                        case 2:
                            if (!StringUtil.isNullOrEmpty(fromDuration) && !StringUtil.isNullOrEmpty(toDuration)) {
                                int fromDur = Integer.parseInt(fromDuration);
                                int toDur = Integer.parseInt(toDuration);
                                customizeSumryFrom2.setTime(curDate);
                                customizeSumryTo2.setTime(curDate);
                                customizeSumryFrom2.add(Calendar.DAY_OF_YEAR, -fromDur);
                                customizeSumryTo2.add(Calendar.DAY_OF_YEAR, -toDur);
            }
                            break;
                        case 3:
                            if (!StringUtil.isNullOrEmpty(fromDuration) && !StringUtil.isNullOrEmpty(toDuration)) {
                                int fromDur = Integer.parseInt(fromDuration);
                                int toDur = Integer.parseInt(toDuration);
                                customizeSumryFrom3.setTime(curDate);
                                customizeSumryTo3.setTime(curDate);
                                customizeSumryFrom3.add(Calendar.DAY_OF_YEAR, -fromDur);
                                customizeSumryTo3.add(Calendar.DAY_OF_YEAR, -toDur);
                            }
                            break;
                        case 4:
                            if (!StringUtil.isNullOrEmpty(fromDuration) && !StringUtil.isNullOrEmpty(toDuration)) {
                                int fromDur = Integer.parseInt(fromDuration);
                                int toDur = Integer.parseInt(toDuration);
                                customizeSumryFrom4.setTime(curDate);
                                customizeSumryTo4.setTime(curDate);
                                customizeSumryFrom4.add(Calendar.DAY_OF_YEAR, -fromDur);
                                customizeSumryTo4.add(Calendar.DAY_OF_YEAR, -toDur);
                            }
                            break;
                        case 5:
                            if (!StringUtil.isNullOrEmpty(fromDuration) && !StringUtil.isNullOrEmpty(toDuration)) {
                                int fromDur = Integer.parseInt(fromDuration);
                                int toDur = Integer.parseInt(toDuration);
                                customizeSumryFrom5.setTime(curDate);
                                customizeSumryTo5.setTime(curDate);
                                customizeSumryFrom5.add(Calendar.DAY_OF_YEAR, -fromDur);
                                customizeSumryTo5.add(Calendar.DAY_OF_YEAR, -toDur);
                            }
                            break;
                        case 6:
                            if (!StringUtil.isNullOrEmpty(fromDuration) && !StringUtil.isNullOrEmpty(toDuration)) {
                                int fromDur = Integer.parseInt(fromDuration);
                                int toDur = Integer.parseInt(toDuration);
                                customizeSumryFrom6.setTime(curDate);
                                customizeSumryTo6.setTime(curDate);
                                customizeSumryFrom6.add(Calendar.DAY_OF_YEAR, -fromDur);
                                customizeSumryTo6.add(Calendar.DAY_OF_YEAR, -toDur);
                            }
                            break;
                         case 7:
                            if (!StringUtil.isNullOrEmpty(fromDuration) && !StringUtil.isNullOrEmpty(toDuration)) {
                                int fromDur = Integer.parseInt(fromDuration);
                                int toDur = Integer.parseInt(toDuration);
                                customizeSumryFrom7.setTime(curDate);
                                customizeSumryTo7.setTime(curDate);
                                customizeSumryFrom7.add(Calendar.DAY_OF_YEAR, -fromDur);
                                customizeSumryTo7.add(Calendar.DAY_OF_YEAR, -toDur);
                            }
                            break;
                   }
                }
                
            }
            
            Date customizeSumryFrom1Date = null;
            Date customizeSumryTo1Date = null;
            Date customizeSumryFrom2Date = null;
            Date customizeSumryTo2Date = null;
            Date customizeSumryFrom3Date = null;
            Date customizeSumryTo3Date = null;
            Date customizeSumryFrom4Date = null;
            Date customizeSumryTo4Date = null;
            Date customizeSumryFrom5Date = null;
            Date customizeSumryTo5Date = null;
            Date customizeSumryFrom6Date = null;
            Date customizeSumryTo6Date = null;
            Date customizeSumryFrom7Date = null;
            Date customizeSumryTo7Date = null;

            String customizeSumryFrom1String = authHandler.getDateOnlyFormat().format(customizeSumryFrom1.getTime());
            customizeSumryFrom1Date = authHandler.getDateOnlyFormat().parse(customizeSumryFrom1String);
            String customizeSumryTo1String = authHandler.getDateOnlyFormat().format(customizeSumryTo1.getTime());
            customizeSumryTo1Date = authHandler.getDateOnlyFormat().parse(customizeSumryTo1String);

            String customizeSumryFrom2String = authHandler.getDateOnlyFormat().format(customizeSumryFrom2.getTime());
            customizeSumryFrom2Date = authHandler.getDateOnlyFormat().parse(customizeSumryFrom2String);
            String customizeSumryTo2String = authHandler.getDateOnlyFormat().format(customizeSumryTo2.getTime());
            customizeSumryTo2Date = authHandler.getDateOnlyFormat().parse(customizeSumryTo2String);

            String customizeSumryFrom3String = authHandler.getDateOnlyFormat().format(customizeSumryFrom3.getTime());
            customizeSumryFrom3Date = authHandler.getDateOnlyFormat().parse(customizeSumryFrom3String);
            String customizeSumryTo3String = authHandler.getDateOnlyFormat().format(customizeSumryTo3.getTime());
            customizeSumryTo3Date = authHandler.getDateOnlyFormat().parse(customizeSumryTo3String);

            String customizeSumryFrom4String = authHandler.getDateOnlyFormat().format(customizeSumryFrom4.getTime());
            customizeSumryFrom4Date = authHandler.getDateOnlyFormat().parse(customizeSumryFrom4String);
            String customizeSumryTo4String = authHandler.getDateOnlyFormat().format(customizeSumryTo4.getTime());
            customizeSumryTo4Date = authHandler.getDateOnlyFormat().parse(customizeSumryTo4String);

            String customizeSumryFrom5String = authHandler.getDateOnlyFormat().format(customizeSumryFrom5.getTime());
            customizeSumryFrom5Date = authHandler.getDateOnlyFormat().parse(customizeSumryFrom5String);
            String customizeSumryTo5String = authHandler.getDateOnlyFormat().format(customizeSumryTo5.getTime());
            customizeSumryTo5Date = authHandler.getDateOnlyFormat().parse(customizeSumryTo5String);

            String customizeSumryFrom6String = authHandler.getDateOnlyFormat().format(customizeSumryFrom6.getTime());
            customizeSumryFrom6Date = authHandler.getDateOnlyFormat().parse(customizeSumryFrom6String);
            String customizeSumryTo6String = authHandler.getDateOnlyFormat().format(customizeSumryTo6.getTime());
            customizeSumryTo6Date = authHandler.getDateOnlyFormat().parse(customizeSumryTo6String);

            String customizeSumryFrom7String = authHandler.getDateOnlyFormat().format(customizeSumryFrom7.getTime());
            customizeSumryFrom7Date = authHandler.getDateOnlyFormat().parse(customizeSumryFrom7String);
            String customizeSumryTo7String = authHandler.getDateOnlyFormat().format(customizeSumryTo7.getTime());
            customizeSumryTo7Date = authHandler.getDateOnlyFormat().parse(customizeSumryTo7String);

            KwlReturnObject custresult = accCustomerDAOobj.getCustomerForAgedReceivable(invoiceRequestParams);
            Iterator itrcust = custresult.getEntityList().iterator();
            while (itrcust.hasNext()) {
                amountdue1 = amountdue2 = amountdue3 = amountdue4 = amountdueinbase1 = amountdueinbase2 = amountdueinbase3 = amountdueinbase4 =0;
                amountdue5 = amountdue6 = amountdue7 = amountdue8 = amountdueinbase5 =  amountdueinbase6 =  amountdueinbase7 =  amountdueinbase8 =  0;
                JSONArray invjarr = new JSONArray();
                String personID = null;
                String personName = null;
                String amountdueInBase = null;
                String currencyid=null;
                boolean isCN=false;
                boolean isRP=false;
                Object custid = itrcust.next();              
                invoiceRequestParams.put(Constants.customerid, custid);
                invoiceRequestParams.put("accid", custid);
                invoiceRequestParams.put("cntype", null);
                invoiceRequestParams.put("isAgedSummary", true);
                KwlReturnObject objItr = accountingHandlerDAOobj.getObject(Customer.class.getName(), custid.toString());
                Customer customer = (Customer) objItr.getEntityList().get(0);
                String currencyidCust=customer.getAccount().getCurrency().getCurrencyID();
                String currencySymbolCust=customer.getAccount().getCurrency().getSymbol();
                String currencyNameCust=customer.getAccount().getCurrency().getName();
                
                KwlReturnObject result = accInvoiceDAOobj.getInvoicesMerged(invoiceRequestParams);
                invjarr =  accInvoiceServiceDAO.getInvoiceJsonMerged(request, result.getEntityList(), invjarr);
                
                JSONArray OBJArryInvoice = new JSONArray();
                result = accInvoiceDAOobj.getOpeningBalanceInvoices(invoiceRequestParams);
                OBJArryInvoice = AccInvoiceServiceHandler.getAgedOpeningBalanceInvoiceJson(invoiceRequestParams, result.getEntityList(), OBJArryInvoice,accCurrencyDAOobj,accInvoiceCommon,request,accountingHandlerDAOobj,accAccountDAOobj,fieldDataManagercntrl,accJournalEntryobj);
                for (int i = 0; i < OBJArryInvoice.length(); i++) {
                    invjarr.put(OBJArryInvoice.get(i));
                }

                JSONArray OBJArryDebitNote = new JSONArray();
                result  = accDebitNoteobj.getOpeningBalanceCustomerDNs(invoiceRequestParams);
                OBJArryDebitNote = AccInvoiceServiceHandler.getAgedOpeningBalanceDebitNoteJson(invoiceRequestParams, result.getEntityList(), OBJArryDebitNote,accCurrencyDAOobj,accReceiptDAOobj,request,accountingHandlerDAOobj,accAccountDAOobj,fieldDataManagercntrl,accJournalEntryobj,accCreditNoteDAOobj);
                for (int i = 0; i < OBJArryDebitNote.length(); i++) {
                    invjarr.put(OBJArryDebitNote.get(i));
                }
                
                JSONArray OBJArryCreditNote = new JSONArray();
                result =accCreditNoteDAOobj.getOpeningBalanceCNs(invoiceRequestParams);
                OBJArryCreditNote = AccInvoiceServiceHandler.getAgedOpeningBalanceCreditNoteJson(invoiceRequestParams, result.getEntityList(), OBJArryCreditNote,accCurrencyDAOobj,accPaymentDAOobj,request,accountingHandlerDAOobj, accCreditNoteDAOobj,accAccountDAOobj,fieldDataManagercntrl,accJournalEntryobj);
                for (int i = 0; i < OBJArryCreditNote.length(); i++) {
                    invjarr.put(OBJArryCreditNote.get(i));
                }
                
                JSONArray OBJArryPayment = new JSONArray();
                result =accReceiptDAOobj.getOpeningBalanceReceipts(invoiceRequestParams);
                OBJArryPayment = AccInvoiceServiceHandler.getAgedOpeningBalanceReceiptJson(invoiceRequestParams, result.getEntityList(), OBJArryPayment,accCurrencyDAOobj,accReceiptDAOobj,request,accountingHandlerDAOobj,accAccountDAOobj,fieldDataManagercntrl,accJournalEntryobj);
                for (int i = 0; i < OBJArryPayment.length(); i++) {
                    invjarr.put(OBJArryPayment.get(i));
                }
                
                JSONArray CreditNotejArr = new JSONArray();
                result = accCreditNoteDAOobj.getCreditNoteMerged(invoiceRequestParams);
                CreditNotejArr = AccInvoiceServiceHandler.getCreditNotesMergedJson(invoiceRequestParams, result.getEntityList(), CreditNotejArr,accountingHandlerDAOobj, authHandlerDAOObj, accCurrencyDAOobj, accPaymentDAOobj,request,accCreditNoteDAOobj,accAccountDAOobj,fieldDataManagercntrl,accJournalEntryobj); 
                for(int i=0; i<CreditNotejArr.length();i++){
                  invjarr.put(CreditNotejArr.get(i));    
                }
                
                invoiceRequestParams.put("cntype", 4);
                JSONArray DebitNotejArr = new JSONArray();//This is used for getting DN gainst vendor and otherwise 
                result = accDebitNoteobj.getDebitNoteMerged(invoiceRequestParams);
                DebitNotejArr = AccInvoiceServiceHandler.getDebitNotesMergedJson(invoiceRequestParams, result.getEntityList(), DebitNotejArr,accountingHandlerDAOobj, authHandlerDAOObj, accCurrencyDAOobj,accReceiptDAOobj,request,accAccountDAOobj,fieldDataManagercntrl,accJournalEntryobj,accCreditNoteDAOobj); 
                for(int i=0; i<DebitNotejArr.length();i++){
                  invjarr.put(DebitNotejArr.get(i));    
                }
                invoiceRequestParams.remove("cntype");
                
                JSONArray receivePaymentJArr = new JSONArray();
                invoiceRequestParams.put("allAdvPayment", true); // needs only advance type record so that putted true
                invoiceRequestParams.put("paymentWindowType", 1);//Receipt to Customer record
                result = accReceiptDAOobj.getReceipts(invoiceRequestParams);            
                receivePaymentJArr = AccInvoiceServiceHandler.getReceiptsJson(invoiceRequestParams, result.getEntityList(), receivePaymentJArr,accountingHandlerDAOobj, authHandlerDAOObj, accCurrencyDAOobj, accReceiptDAOobj,request,accAccountDAOobj,fieldDataManagercntrl,accJournalEntryobj);
                for (int i = 0; i < receivePaymentJArr.length(); i++) {
                    invjarr.put(receivePaymentJArr.get(i));
                }
                
                JSONArray makePaymentJArr = new JSONArray();
                invoiceRequestParams.put("allAdvPayment", true); // needs only refund type record so that putted true
                invoiceRequestParams.put("paymentWindowType", 2);//Payment to Customer record
                result = accVendorPaymentobj.getPayments(invoiceRequestParams);
                if (result != null && result.getEntityList() != null && !result.getEntityList().isEmpty()) {
                    makePaymentJArr = accGoodsReceiptServiceHandler.getPaymentsJson(invoiceRequestParams, result.getEntityList(), makePaymentJArr, accCurrencyDAOobj, accountingHandlerDAOobj, accVendorPaymentobj);
                    for (int i = 0; i < makePaymentJArr.length(); i++) {
                        invjarr.put(makePaymentJArr.get(i));
                    }
                }
                invoiceRequestParams.remove("allAdvPayment");
                invoiceRequestParams.remove("paymentWindowType");
                for (int i = 0; i < invjarr.length(); i++) {
                    
                    JSONObject invobj = invjarr.getJSONObject(i);
                    personID = (invobj.has("personid"))?invobj.getString("personid"):"";
                    personName = (invobj.has("personname"))?invobj.getString("personname"):"";
                    amountdueInBase = invobj.getString("amountdueinbase");
                    currencyid=(invobj.has(Constants.currencyKey))?invobj.getString(Constants.currencyKey):"";
                    isCN=invobj.has("isCN")?invobj.getBoolean("isCN"):false;
                    isRP=invobj.has("isRP")?invobj.getBoolean("isRP"):false;
                    Date dueDate = new Date();
                    if(datefilter==0)
                         dueDate = authHandler.getDateOnlyFormat().parse(invobj.getString("duedate"));
                    else 
                         dueDate = authHandler.getDateOnlyFormat().parse(invobj.getString("date")); 
                    double amountdue = invobj.getDouble("amountdue");
                    double amountdueinbase=invobj.getDouble("amountdueinbase");
                    
                    KwlReturnObject bAmt = accCurrencyDAOobj.getOneCurrencyToOtherModified(invoiceRequestParams, amountdue, currencyid, currencyidCust, df.parse(invobj.getString("date")),invobj.getDouble("externalcurrencyrate"));
                    amountdue = authHandler.round((Double) bAmt.getEntityList().get(0),companyid);
                    if (isCN || isRP) {
                        amountdueinbase=-amountdueinbase;
                        amountdue=-amountdue;
                    }
                    
                    if (customizedSumryReportFlag) {
                        if ((dueDate.after(customizeSumryTo1Date) || dueDate.equals(customizeSumryTo1Date)) && (dueDate.before(customizeSumryFrom1Date) || dueDate.equals(customizeSumryFrom1Date))) {
                            amountdue1 += amountdue;
                        } else if ((dueDate.after(customizeSumryTo2Date) || dueDate.equals(customizeSumryTo2Date)) && (dueDate.before(customizeSumryFrom2Date) || dueDate.equals(customizeSumryFrom2Date))) {
                            amountdue2 += amountdue;
                        } else if ((dueDate.after(customizeSumryTo3Date) || dueDate.equals(customizeSumryTo3Date)) && (dueDate.before(customizeSumryFrom3Date) || dueDate.equals(customizeSumryFrom3Date))) {
                            amountdue3 += amountdue;
                        } else if ((dueDate.after(customizeSumryTo4Date) || dueDate.equals(customizeSumryTo4Date)) && (dueDate.before(customizeSumryFrom4Date) || dueDate.equals(customizeSumryFrom4Date))) {
                            amountdue4 += amountdue;
                        } else if ((dueDate.after(customizeSumryTo5Date) || dueDate.equals(customizeSumryTo5Date)) && (dueDate.before(customizeSumryFrom5Date) || dueDate.equals(customizeSumryFrom5Date))) {
                            amountdue5 += amountdue;
                        } else if ((dueDate.after(customizeSumryTo6Date) || dueDate.equals(customizeSumryTo6Date)) && (dueDate.before(customizeSumryFrom6Date) || dueDate.equals(customizeSumryFrom6Date))) {
                            amountdue6 += amountdue;
                        } else if ((dueDate.after(customizeSumryTo7Date) || dueDate.equals(customizeSumryTo7Date)) && (dueDate.before(customizeSumryFrom7Date) || dueDate.equals(customizeSumryFrom7Date))) {
                            amountdue7 += amountdue;
                        }
                        
                    }else {
                        if (isdistibutive) {
                            if (dueDate.after(cal1Date) || dueDate.equals(cal1Date)) {
                                if (dueDate.equals(cal1Date) && (datefilter == Constants.agedDueDate0to30Filter || datefilter == Constants.agedInvoiceDate0to30Filter)) {
                                    amountdueinbase2 += amountdueinbase;
                                    amountdue2 += amountdue;
                                } else {
                                    amountdueinbase1 += amountdueinbase;
                                    amountdue1 += amountdue;
                                }
                            } else if ((cal2Date.before(dueDate) || cal2Date.equals(dueDate)) && cal1Date.after(dueDate)) {
                                amountdueinbase2 += amountdueinbase;
                                    amountdue2 += amountdue;
                            } else if ((cal3Date.before(dueDate) || cal3Date.equals(dueDate)) && cal2Date.after(dueDate)) {
                                    amountdueinbase3 += amountdueinbase;
                                    amountdue3 += amountdue;
                            } else if ((cal4Date.before(dueDate) || cal4Date.equals(dueDate)) && cal3Date.after(dueDate)) {
                                    amountdueinbase4 += amountdueinbase;
                                    amountdue4 += amountdue;
                            } else if ((cal5Date.before(dueDate) || cal5Date.equals(dueDate)) && cal4Date.after(dueDate)) {
                                    amountdueinbase5 += amountdueinbase;
                                    amountdue5 += amountdue;
                            } else if ((cal6Date.before(dueDate) || cal6Date.equals(dueDate)) && cal5Date.after(dueDate)) {
                                    amountdueinbase6 += amountdueinbase;
                                    amountdue6 += amountdue;
                            } else if ((cal7Date.before(dueDate) || cal7Date.equals(dueDate)) && cal6Date.after(dueDate)) {
                                    amountdueinbase7 += amountdueinbase;
                                    amountdue7 += amountdue;
                            } else {
                                    amountdueinbase8 += amountdueinbase;
                                    amountdue8 += amountdue;
                            }
                        } else {
                            if (dueDate.after(cal1Date) || dueDate.equals(cal1Date)) {
                                amountdueinbase1 += amountdueinbase;
                                amountdue1 += amountdue;
                            } else if (dueDate.after(cal2Date) || dueDate.equals(cal2Date)) {
                                amountdueinbase2 += amountdueinbase;
                                amountdue2 += amountdue;
                            } else if (dueDate.after(cal3Date) || dueDate.equals(cal3Date)) {
                                amountdueinbase2 += amountdueinbase;
                                amountdue2 += amountdue;
                            } else {
                                amountdueinbase3 += amountdueinbase;
                                amountdue3 += amountdue;
                            }
                        }
                    }
                }
                if (invjarr.length() > 0) {
                    jObj = new JSONObject();
                    jObj.put("personid", personID);
                    jObj.put("amountdueinbase", amountdueInBase);
                    jObj.put("personname", personName);
                     if (!customizedSumryReportFlag) {  
                    jObj.put("amountdue1", Double.valueOf(authHandler.formattedAmount(amountdue1, companyid)));
                    jObj.put("amountdue2",Double.valueOf(authHandler.formattedAmount(amountdue2, companyid)));
                    jObj.put("amountdue3", Double.valueOf(authHandler.formattedAmount(amountdue3, companyid)));
                    jObj.put("amountdue4", Double.valueOf(authHandler.formattedAmount(amountdue4, companyid)));
                    jObj.put("amountdue5", Double.valueOf(authHandler.formattedAmount(amountdue5, companyid)));
                    jObj.put("amountdue6", Double.valueOf(authHandler.formattedAmount(amountdue6, companyid)));
                    jObj.put("amountdue7", Double.valueOf(authHandler.formattedAmount(amountdue7, companyid)));
                    jObj.put("amountdue8", Double.valueOf(authHandler.formattedAmount(amountdue8, companyid)));
                     
                     }else{
                        if(amountDueMap.containsKey("amountdue1"))
                           jObj.put(amountDueMap.get("amountdue1"), Double.valueOf(authHandler.formattedAmount(amountdue1, companyid)));
                        if(amountDueMap.containsKey("amountdue2"))
                            jObj.put(amountDueMap.get("amountdue2"),Double.valueOf(authHandler.formattedAmount(amountdue2, companyid))); 
                        if(amountDueMap.containsKey("amountdue3"))
                            jObj.put(amountDueMap.get("amountdue3"), Double.valueOf(authHandler.formattedAmount(amountdue3, companyid)));
                        if(amountDueMap.containsKey("amountdue4"))
                            jObj.put(amountDueMap.get("amountdue4"), Double.valueOf(authHandler.formattedAmount(amountdue4, companyid)));
                        if(amountDueMap.containsKey("amountdue5"))
                            jObj.put(amountDueMap.get("amountdue5"), Double.valueOf(authHandler.formattedAmount(amountdue5, companyid)));
                        if(amountDueMap.containsKey("amountdue6"))
                            jObj.put(amountDueMap.get("amountdue6"), Double.valueOf(authHandler.formattedAmount(amountdue6, companyid)));
                        if(amountDueMap.containsKey("amountdue7"))
                            jObj.put(amountDueMap.get("amountdue7"), Double.valueOf(authHandler.formattedAmount(amountdue7, companyid)));
                        if(amountDueMap.containsKey("amountdue8"))
                            jObj.put(amountDueMap.get("amountdue8"), Double.valueOf(authHandler.formattedAmount(amountdue8, companyid)));
                     }
                    jObj.put("amountdueinbase1", Double.valueOf(authHandler.formattedAmount(amountdueinbase1, companyid)));
                    jObj.put("amountdueinbase2",Double.valueOf(authHandler.formattedAmount(amountdueinbase2, companyid)));
                    jObj.put("amountdueinbase3", Double.valueOf(authHandler.formattedAmount(amountdueinbase3, companyid)));
                    jObj.put("amountdueinbase4", Double.valueOf(authHandler.formattedAmount(amountdueinbase4, companyid)));
                    jObj.put("amountdueinbase5", Double.valueOf(authHandler.formattedAmount(amountdueinbase5, companyid)));
                    jObj.put("amountdueinbase6", Double.valueOf(authHandler.formattedAmount(amountdueinbase6, companyid)));
                    jObj.put("amountdueinbase7", Double.valueOf(authHandler.formattedAmount(amountdueinbase7, companyid)));
                    jObj.put("amountdueinbase8", Double.valueOf(authHandler.formattedAmount(amountdueinbase8,companyid)));
                    jObj.put("currencysymbol", currencySymbolCust);
                    jObj.put(Constants.currencyKey, currencyidCust);
                    jObj.put("currencyname", currencyNameCust);
                    double amountdue= Double.valueOf(authHandler.formattedAmount((amountdue1 + amountdue2 + amountdue3 + amountdue4 + amountdue5 + amountdue6 + amountdue7 + amountdue8), companyid));
                    jObj.put("total",amountdue );
                    double amountdueinbase= Double.valueOf(authHandler.formattedAmount((amountdueinbase1 + amountdueinbase2 + amountdueinbase3 + amountdueinbase4 + amountdueinbase5 + amountdueinbase6 + amountdueinbase7 + amountdueinbase8), companyid));
                    jObj.put("totalinbase", amountdueinbase);
                    jArr.put(jObj);
                }
            }
        } catch (ServiceException ex) {
             Logger.getLogger(accInvoiceController.class.getName()).log(Level.SEVERE, null, ex);
            throw ex;
        }
        return jArr;
    }
    
        public JSONArray getCreditNotesMergedJson(HashMap<String, Object> requestParams, List list, JSONArray JArr) throws ServiceException {
        try {
            String currencyid = (String) requestParams.get(Constants.globalCurrencyKey);
            KwlReturnObject curresult = accountingHandlerDAOobj.getObject(KWLCurrency.class.getName(), currencyid);
            KWLCurrency currency = (KWLCurrency) curresult.getEntityList().get(0);
            DateFormat df = (DateFormat) requestParams.get("df");
            String companyid = (String) requestParams.get("companyid");
            int duration = (requestParams.containsKey(InvoiceConstants.duration) && requestParams.containsKey(InvoiceConstants.duration)) ? Integer.parseInt(requestParams.get(InvoiceConstants.duration).toString()) : 30;
            int noOfInterval = Constants.DefaultNoOfIntervals;
            if(requestParams.containsKey("noOfInterval") && requestParams.get("noOfInterval") != null) {
               noOfInterval = requestParams.get("noOfInterval").toString().equals("") ? Constants.DefaultNoOfIntervals : Integer.parseInt(requestParams.get("noOfInterval").toString());
            }
            boolean agedReport=(requestParams.containsKey("agedReport") && requestParams.get("agedReport")!=null)?Boolean.parseBoolean(requestParams.get("agedReport").toString()):false;
            boolean isSOA=(requestParams.containsKey("isSOA") && requestParams.get("isSOA")!=null)?Boolean.parseBoolean(requestParams.get("isSOA").toString()):false;
            Calendar cal1 = Calendar.getInstance();
            Calendar cal2 = Calendar.getInstance();
            Calendar cal3 = Calendar.getInstance();
            Calendar cal4 = Calendar.getInstance();
            Calendar cal5 = Calendar.getInstance();
            Calendar cal6 = Calendar.getInstance();
            Calendar cal7 = Calendar.getInstance();
            Calendar cal8 = Calendar.getInstance();
            Calendar cal9 = Calendar.getInstance();
            Calendar cal10 = Calendar.getInstance();
            if (requestParams.get(Constants.asOfDate) != null) {
                String curDateString = (String) requestParams.get(Constants.asOfDate);
                Date curDate = df.parse(curDateString);
                cal1.setTime(curDate);
                cal2.setTime(curDate);
                cal3.setTime(curDate);
                cal4.setTime(curDate);
                cal5.setTime(curDate);
                cal6.setTime(curDate);
                cal7.setTime(curDate);
                cal2.add(Calendar.DAY_OF_YEAR, -duration);
                cal3.add(Calendar.DAY_OF_YEAR, -(duration * 2));
                cal4.add(Calendar.DAY_OF_YEAR, -(duration * 3));
                cal5.add(Calendar.DAY_OF_YEAR, -(duration * 4));
                cal6.add(Calendar.DAY_OF_YEAR, -(duration * 5));
                cal7.add(Calendar.DAY_OF_YEAR, -(duration * 6));
                cal8.add(Calendar.DAY_OF_YEAR, -(duration * 7));
                cal9.add(Calendar.DAY_OF_YEAR, -(duration * 8));
                cal10.add(Calendar.DAY_OF_YEAR, -(duration * 9));
            }
            
            
            Date cal1Date = null;
            Date cal2Date = null;
            Date cal3Date = null;
            Date cal4Date = null;
            Date cal5Date = null;
            Date cal6Date = null;
            Date cal7Date = null;
            Date cal8Date = null;
            Date cal9Date = null;
            Date cal10Date = null;

            String cal1String = authHandler.getDateOnlyFormat().format(cal1.getTime());
            cal1Date = authHandler.getDateOnlyFormat().parse(cal1String);

            String cal2String = authHandler.getDateOnlyFormat().format(cal2.getTime());
            cal2Date = authHandler.getDateOnlyFormat().parse(cal2String);

            String cal3String = authHandler.getDateOnlyFormat().format(cal3.getTime());
            cal3Date = authHandler.getDateOnlyFormat().parse(cal3String);

            String cal4String = authHandler.getDateOnlyFormat().format(cal4.getTime());
            cal4Date = authHandler.getDateOnlyFormat().parse(cal4String);

            String cal5String = authHandler.getDateOnlyFormat().format(cal5.getTime());
            cal5Date = authHandler.getDateOnlyFormat().parse(cal5String);

            String cal6String = authHandler.getDateOnlyFormat().format(cal6.getTime());
            cal6Date = authHandler.getDateOnlyFormat().parse(cal6String);

            String cal7String = authHandler.getDateOnlyFormat().format(cal7.getTime());
            cal7Date = authHandler.getDateOnlyFormat().parse(cal7String);

            String cal8String = authHandler.getDateOnlyFormat().format(cal8.getTime());
            cal8Date = authHandler.getDateOnlyFormat().parse(cal8String);

            String cal9String = authHandler.getDateOnlyFormat().format(cal9.getTime());
            cal9Date = authHandler.getDateOnlyFormat().parse(cal9String);

            String cal10String = authHandler.getDateOnlyFormat().format(cal10.getTime());
            cal10Date = authHandler.getDateOnlyFormat().parse(cal10String);
            
            Iterator itr = list.iterator();
            while (itr.hasNext()) {
                
                double amountdue1 = 0;
                double amountdue2 = 0;
                double amountdue3 = 0;
                double amountdue4 = 0;
                double amountdue5 = 0;
                double amountdue6 = 0;
                double amountdue7 = 0;
                double amountdue8 = 0;
                double amountdue9 = 0;
                double amountdue10 = 0;
                double amountdue11 = 0;

                Object[] row = (Object[]) itr.next();
                boolean withoutinventory = Boolean.parseBoolean((String) row[0]);
                String personid = "";
                String personname = "";
                String billto = "";
                String cncurrencyid="";
                KwlReturnObject resultObject = accountingHandlerDAOobj.getObject(Customer.class.getName(), (String) row[2]);
                Customer customer = (Customer) resultObject.getEntityList().get(0);
                personid = customer!=null?customer.getID():"";
                personname = customer!=null?customer.getName():"";
                billto=customer.getBillingAddress()==null?"":customer.getBillingAddress();

                resultObject = accountingHandlerDAOobj.getObject(JournalEntryDetail.class.getName(), (String) row[3]);
                JournalEntryDetail details = (JournalEntryDetail) resultObject.getEntityList().get(0);

                JSONObject obj = new JSONObject();
                if (!withoutinventory) {
                    resultObject = accountingHandlerDAOobj.getObject(CreditNote.class.getName(), (String) row[1]);
                    CreditNote creditNote = (CreditNote) resultObject.getEntityList().get(0);
                    if (creditNote.isOtherwise() && creditNote.getCnamountdue()>0) {
                        JournalEntry je = creditNote.getJournalEntry();
                        cncurrencyid=creditNote.getCurrency() == null ? currency.getCurrencyID() : creditNote.getCurrency().getCurrencyID();
                        obj.put(InvoiceConstants.billid, creditNote.getID());
                        obj.put(InvoiceConstants.noteid, creditNote.getID());
                        obj.put(InvoiceConstants.noteno, creditNote.getCreditNoteNumber());
                        obj.put(InvoiceConstants.companyid, creditNote.getCompany().getCompanyID());
                        obj.put(InvoiceConstants.companyname, creditNote.getCompany().getCompanyName());
                        obj.put(InvoiceConstants.billno, creditNote.getCreditNoteNumber());
                        obj.put(InvoiceConstants.journalentryid, je.getID());
                        obj.put(InvoiceConstants.withoutinventory, withoutinventory);
                        obj.put(InvoiceConstants.currencysymbol, (creditNote.getCurrency() == null ? currency.getSymbol() : creditNote.getCurrency().getSymbol()));
                        obj.put(InvoiceConstants.currencyid, (creditNote.getCurrency() == null ? currency.getCurrencyID() : creditNote.getCurrency().getCurrencyID()));
                        obj.put(InvoiceConstants.currencyname, (creditNote.getCurrency() == null ? currency.getName() : creditNote.getCurrency().getName()));
                        obj.put(InvoiceConstants.entryno, je.getEntryNumber());
                        obj.put(InvoiceConstants.personid, personid);
                        obj.put(InvoiceConstants.personname, personname);    
                        obj.put(InvoiceConstants.personinfo, creditNote.getCustomer() == null ? "" : creditNote.getCustomer().getName()+"("+creditNote.getCustomer().getAcccode()+")");
                        obj.put(InvoiceConstants.billto, billto);   
                        if (agedReport || isSOA) {
                            obj.put(InvoiceConstants.amount, creditNote.isOtherwise() ? -creditNote.getCnamount() : details.getAmount());
                            obj.put(InvoiceConstants.amountdue, creditNote.isOtherwise() ? -creditNote.getCnamountdue() : 0);
                            obj.put(InvoiceConstants.amountdueinbase, -authHandler.round((Double) accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, creditNote.getCnamountdue(), cncurrencyid, creditNote.getCreationDate(), je.getExternalCurrencyRate()).getEntityList().get(0), companyid));
                        } else {
                            obj.put(InvoiceConstants.amount, creditNote.isOtherwise() ? creditNote.getCnamount() : details.getAmount());
                            obj.put(InvoiceConstants.amountdue, creditNote.isOtherwise() ? creditNote.getCnamountdue() : 0);
                            obj.put(InvoiceConstants.amountdueinbase, authHandler.round((Double) accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, creditNote.getCnamountdue(), cncurrencyid, creditNote.getCreationDate(), je.getExternalCurrencyRate()).getEntityList().get(0), companyid));
                        }
                        obj.put("currencyidval",authHandlerDAOObj.getCurrency(currencyid));
                        obj.put(InvoiceConstants.duedate, df.format(creditNote.getCreationDate()));
                        obj.put(InvoiceConstants.date, df.format(creditNote.getCreationDate()));
                        obj.put(InvoiceConstants.memo, creditNote.getMemo());
                        obj.put(InvoiceConstants.deleted, creditNote.isDeleted());
                        obj.put(InvoiceConstants.externalcurrencyrate, creditNote.getExternalCurrencyRate());
                        obj.put("type","Credit Note");
                        obj.put("isCN",true);

                        Date dueDate = df.parse(df.format(creditNote.getCreationDate()));
                        Double amountdue = 0.0;
                        if (agedReport) {//aged report view case
                            amountdue = -creditNote.getCnamountdue();
                        } else if(isSOA){ //export SOA report case
                            amountdue=- authHandler.round((Double) accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, creditNote.getCnamountdue(), cncurrencyid, creditNote.getCreationDate(), je.getExternalCurrencyRate()).getEntityList().get(0), companyid);
                        } else {
                            amountdue = creditNote.getCnamountdue();
                        }
                        
                        if (dueDate.after(cal1Date) || dueDate.equals(cal1Date)) {
                            amountdue1 = authHandler.round(amountdue, companyid);
                        } else if ((cal2Date.before(dueDate) || cal2Date.equals(dueDate)) && cal1Date.after(dueDate)) {
                            amountdue2 = authHandler.round(amountdue, companyid);
                        } else if ((cal3Date.before(dueDate) || cal3Date.equals(dueDate)) && cal2Date.after(dueDate)) {
                            amountdue3 = authHandler.round(amountdue, companyid);
                        } else if ((cal4Date.before(dueDate) || cal4Date.equals(dueDate)) && cal3Date.after(dueDate)) {
                            amountdue4 = authHandler.round(amountdue, companyid);
                        } else if ((cal5Date.before(dueDate) || cal5Date.equals(dueDate)) && cal4Date.after(dueDate)) {
                            amountdue5 = authHandler.round(amountdue, companyid);
                        } else if ((cal6Date.before(dueDate) || cal6Date.equals(dueDate)) && cal5Date.after(dueDate)) {
                            amountdue6 = authHandler.round(amountdue, companyid);
                        } else if ((cal7Date.before(dueDate) || cal7Date.equals(dueDate)) && cal6Date.after(dueDate)) {
                            amountdue7 = authHandler.round(amountdue, companyid);
                        } else if ((cal8Date.before(dueDate) || cal8Date.equals(dueDate)) && cal7Date.after(dueDate)) {
                            amountdue8 = authHandler.round(amountdue, companyid);
                        } else if ((cal9Date.before(dueDate) || cal9Date.equals(dueDate)) && cal8Date.after(dueDate)) {
                            amountdue9 = authHandler.round(amountdue, companyid);
                        } else if ((cal10Date.before(dueDate) || cal10Date.equals(dueDate)) && cal9Date.after(dueDate)) {
                            amountdue10 = authHandler.round(amountdue, companyid);
                        } else {                                                                                         
                            amountdue11 = authHandler.round(amountdue, companyid);
                        }

                        switch(noOfInterval){
                            case 2:
                                amountdue3 += amountdue4 + amountdue5 + amountdue6 + amountdue7 + amountdue8 + amountdue9 + amountdue10 + amountdue11;
                                amountdue4 = amountdue5 = amountdue6 = amountdue7 = amountdue8 = amountdue9 = amountdue10 = amountdue11 = 0;
                                break;
                            case 3:
                                amountdue4 += amountdue5 + amountdue6 + amountdue7 + amountdue8 + amountdue9 + amountdue10 + amountdue11;
                                amountdue5 = amountdue6 = amountdue7 = amountdue8 = amountdue9 = amountdue10 = amountdue11 = 0;
                                break;
                            case 4:
                                amountdue5 += amountdue6 + amountdue7 + amountdue8 + amountdue9 + amountdue10 + amountdue11;
                                amountdue6 = amountdue7 = amountdue8 = amountdue9 = amountdue10 = amountdue11 = 0;
                                break;
                            case 5:
                                amountdue6 += amountdue7 + amountdue8 + amountdue9 + amountdue10 + amountdue11;
                                amountdue7 = amountdue8 = amountdue9 = amountdue10 = amountdue11 = 0;
                                break;
                            case 6:
                                amountdue7 += amountdue8 + amountdue9 + amountdue10 + amountdue11;
                                amountdue8 = amountdue9 = amountdue10 = amountdue11 = 0;
                                break;
                            case 7:
                                amountdue8 += amountdue9 + amountdue10 + amountdue11;
                                amountdue9 = amountdue10 = amountdue11 = 0;
                                break;
                            case 8:
                                amountdue9 += amountdue10 + amountdue11;
                                amountdue10 = amountdue11 = 0;
                                break;
                            case 9:
                                amountdue10 += amountdue11;
                                amountdue11 = 0;
                                break;
                        }
                        
                        
                        obj.put("amountdue1", amountdue1);
                        obj.put("amountdue2", amountdue2);
                        obj.put("amountdue3", amountdue3);
                        obj.put("amountdue4", amountdue4);
                        obj.put("amountdue5", amountdue5);
                        obj.put("amountdue6", amountdue6);
                        obj.put("amountdue7", amountdue7);
                        obj.put("amountdue8", amountdue8);
                        obj.put("amountdue9", amountdue9);
                        obj.put("amountdue10", amountdue10);
                        obj.put("amountdue11", amountdue11);
                        JArr.put(obj);
                    }
                }
            }
        } catch (Exception ex) {
            throw ServiceException.FAILURE("accDebitNoteController.getDebitNotesJson : " + ex.getMessage(), ex);
        }
        return JArr;
    }  
        
      public ModelAndView getInvoiceForSalesProductCategoryDetails(HttpServletRequest request, HttpServletResponse response) {

        JSONObject jobj = new JSONObject();
        DefaultTransactionDefinition def = new DefaultTransactionDefinition();
        def.setName("IC_Tx");
        def.setPropagationBehavior(TransactionDefinition.PROPAGATION_REQUIRED);
        TransactionStatus status = txnManager.getTransaction(def);
        try {
            jobj = getInvoiceForSalesProductCategoryDetailsJson(request, false);
            txnManager.commit(status);
        } catch (Exception ex) {
            if (status != null) {
                txnManager.rollback(status);
            }
            Logger.getLogger(accInvoiceController.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
        }
        return new ModelAndView("jsonView_ex", "model", jobj.toString());
    }  
       
     
    public JSONObject getInvoiceForSalesProductCategoryDetailsJson(HttpServletRequest request, boolean export) throws AccountingException, IOException, SessionExpiredException, JSONException {
        JSONObject jobj = new JSONObject();
        JSONArray jArr = new JSONArray();
        String msg = "";
        List ckeckList = new ArrayList();
        List checkTotal = new ArrayList();
        List checkGst = new ArrayList();
        List checkTotalWithoutCate = new ArrayList();
        HashMap<String, Object> requestParams = new HashMap<String, Object>();
        JSONObject jobj1 = new JSONObject();
        JSONArray jarrColumns = new JSONArray();
        JSONArray jarrRecords = new JSONArray();
        JSONObject jobjTemp = new JSONObject();
        JSONObject jMeta = new JSONObject();
        JSONObject commData = new JSONObject();
        HashMap<String, Double> mapProductCate = new HashMap<String, Double>();
        int count = 0;
        int cnt = 0;

        try {
            double amount = 0.0;
            double totalAmount = 0.0;
            double taxAmount = 0.0;
            double amountwitoutCate = 0.0;
            double totalAmountWithoutCate = 0.0;
            double termAmount = 0.0;
            double totalAmountinbase = 0.0;
            String companyId = sessionHandlerImpl.getCompanyid(request);
            int reportId=0;
            DateFormat df = authHandler.getDateFormatter(request);
            DateFormat userdf = authHandler.getUserDateFormatter(request);
            requestParams.put(Constants.df, df);
            requestParams.put(Constants.companyKey, companyId);
            String startDate = (String) request.getParameter("startDate");
            String endDate = (String) request.getParameter("enddate");
            String start = "";
            String limit = "";
            if (!StringUtil.isNullOrEmpty(request.getParameter(Constants.start)) && !StringUtil.isNullOrEmpty(request.getParameter(Constants.limit))) {
                start = request.getParameter(Constants.start);
                limit = request.getParameter(Constants.limit);
            }
            requestParams.put(Constants.start, start);
            requestParams.put(Constants.limit, limit);

            requestParams.put(Constants.REQ_startdate, startDate);
            requestParams.put(Constants.REQ_enddate, endDate);

            if (!StringUtil.isNullOrEmpty(request.getParameter("searchJson"))) {
                requestParams.put("searchJson", request.getParameter("searchJson"));
                requestParams.put(Constants.moduleid, request.getParameter(Constants.moduleid));
                requestParams.put("filterConjuctionCriteria", request.getParameter("filterConjuctionCriteria"));
            }
            
            if (!StringUtil.isNullOrEmpty(request.getParameter("reportId"))) {
                reportId=Integer.parseInt(request.getParameter("reportId"));
            }
            
            if (!StringUtil.isNullOrEmpty(request.getParameter("ss"))) {
                requestParams.put("ss", request.getParameter("ss"));
            }
            
            KwlReturnObject currencylist = accountingHandlerDAOobj.getObject(KWLCurrency.class.getName(), sessionHandlerImpl.getCurrencyID(request));
            KWLCurrency currency = (KWLCurrency) currencylist.getEntityList().get(0);
            KwlReturnObject result = accInvoiceDAOobj.getInvoiceForSalesProductCategoryDetails(requestParams);
            List list = result.getEntityList();
            count = result.getRecordTotalCount();
            Iterator it = list.iterator();

            // Column Model
            jobjTemp = new JSONObject();
            jobjTemp.put("name", "date");
            jarrRecords.put(jobjTemp);

            jobjTemp = new JSONObject();
            jobjTemp.put("name", Constants.billid);
            jarrRecords.put(jobjTemp);

            jobjTemp = new JSONObject();
            jobjTemp.put("name", "fileRef");
            jarrRecords.put(jobjTemp);

            jobjTemp = new JSONObject();
            jobjTemp.put("name", "clientName");
            jarrRecords.put(jobjTemp);

            jobjTemp = new JSONObject();
            jobjTemp.put("name", "currencysymbol");
            jarrRecords.put(jobjTemp);

            jobjTemp = new JSONObject();
            jobjTemp.put("header", messageSource.getMessage("acc.rem.34", null,RequestContextUtils.getLocale(request)));//Invoice Date
            jobjTemp.put("dataIndex", "date");
            jobjTemp.put("width", 150);
            jobjTemp.put("pdfwidth", 150);
            jarrColumns.put(jobjTemp);

            jobjTemp = new JSONObject();
            jobjTemp.put("header", messageSource.getMessage("acc.het.11", null, RequestContextUtils.getLocale(request)));//Invoice No
            jobjTemp.put("dataIndex", Constants.billid);
            jobjTemp.put("width", 150);
            jobjTemp.put("pdfwidth", 150);
            jobjTemp.put("sortable", true);
            jarrColumns.put(jobjTemp);

            jobjTemp = new JSONObject();
            jobjTemp.put("header", messageSource.getMessage("acc.field.fileRef", null, RequestContextUtils.getLocale(request)));//File Ref
            jobjTemp.put("dataIndex", "fileRef");
            jobjTemp.put("width", 150);
            jobjTemp.put("pdfwidth", 150);
            jarrColumns.put(jobjTemp);

            jobjTemp = new JSONObject();
            jobjTemp.put("header", messageSource.getMessage("acc.common.clientName", null, RequestContextUtils.getLocale(request)));//Client Name
            jobjTemp.put("dataIndex", "clientName");
            jobjTemp.put("width", 150);
            jobjTemp.put("pdfwidth", 150);
            jarrColumns.put(jobjTemp);

            jobjTemp = new JSONObject();
            jobjTemp.put("header", messageSource.getMessage("acc.cust.currency", null, RequestContextUtils.getLocale(request)));//currency
            jobjTemp.put("dataIndex", "currencysymbol");
            jobjTemp.put("hidden", true);
            jobjTemp.put("width", 150);
            jobjTemp.put("pdfwidth", 150);
            jarrColumns.put(jobjTemp);
            HashMap hashMap=new HashMap();
            hashMap.put("companyId", companyId);
            hashMap.put("reportId", reportId);
            KwlReturnObject customizeReportResult = accountingHandlerDAOobj.getCustomizeReportViewMappingField(hashMap);
            List<CustomizeReportMapping> customizeReportList = customizeReportResult.getEntityList();
            List arrayList=new ArrayList();
            while (it.hasNext()) {
                totalAmount = 0.0;
                taxAmount = 0.0;
                amount = 0.0;
                amountwitoutCate = 0.0;
                totalAmountWithoutCate = 0.0;
                termAmount = 0.0;
                totalAmountinbase = 0.0;

                Object oj = (Object) it.next();
                String invid = oj.toString();
                KwlReturnObject inv = accountingHandlerDAOobj.getObject(Invoice.class.getName(), invid);
                Invoice invoice = (Invoice) inv.getEntityList().get(0);
                JSONObject newJobj = new JSONObject();
                JSONObject custJobj = new JSONObject();
                String jeId = invoice.getJournalEntry().getID();
                
                List<String> idsList = new ArrayList<String>();
                idsList.add(invoice.getID());
                Map<String, List<InvoiceTermsMap>> invoiceTermsmap = accInvoiceDAOobj.getInvoiceTermMapList(idsList);
                Map<String, JSONArray> invoiceTermMapDetails = accInvoiceServiceDAO.getInvoiceTermMapDetailList(invoice.getID(), invoiceTermsmap.get(invoice.getID()));
                double termAmount1 = invoiceTermMapDetails.containsKey(invid) ? CommonFunctions.getTotalTermsAmount(invoiceTermMapDetails.get(invid)) : 0;
                termAmount += termAmount1;

                // Get Custom Column and their values
                HashMap<String, String> customFieldMap = new HashMap<String, String>();
                HashMap<String, String> customDateFieldMap = new HashMap<String, String>();

                HashMap<String, Object> fieldrequestParams = new HashMap();
                fieldrequestParams.put(Constants.filter_names, Arrays.asList(Constants.companyid, Constants.moduleid));
                fieldrequestParams.put(Constants.filter_values, Arrays.asList(companyId, Constants.Acc_Invoice_ModuleId));
                HashMap<String, String> replaceFieldMap = new HashMap<String, String>();
                HashMap<String, Integer> FieldMap = accAccountDAOobj.getFieldParamsCustomMap(fieldrequestParams, replaceFieldMap, customFieldMap, customDateFieldMap);
                String customFieldMapValues = "";
                KwlReturnObject custumObjresult = null;
                Map<String, Object> variableMap = new HashMap<String, Object>();
                custumObjresult = accountingHandlerDAOobj.getObject(AccJECustomData.class.getName(), jeId);
                replaceFieldMap = new HashMap<String, String>();
                if (custumObjresult != null && custumObjresult.getEntityList().size() > 0) {
                    AccJECustomData jeDetailCustom = (AccJECustomData) custumObjresult.getEntityList().get(0);
                    if (jeDetailCustom != null) {
                        AccountingManager.setCustomColumnValues(jeDetailCustom, FieldMap, replaceFieldMap, variableMap);
                        JSONObject params = new JSONObject();
                        params.put(Constants.companyKey, companyId);
                        params.put(Constants.isExport, true);
                        fieldDataManagercntrl.addCustomData(variableMap, customFieldMap, customDateFieldMap, custJobj, params);
                    }
                }
                double tax = 0d;
                if (invoice.getTaxEntry() != null) {// if Invoice Level Tax is available
                    tax = invoice.getTaxEntry() == null ? 0 : invoice.getTaxEntry().getAmount();
                }
                requestParams.clear();
                ArrayList filter_names = new ArrayList(), filter_params = new ArrayList();
                filter_names.add("invoice.ID");
                filter_params.add(invoice.getID());
                requestParams.put("filter_names", filter_names);
                requestParams.put("filter_params", filter_params);

                KwlReturnObject idresult = accInvoiceDAOobj.getInvoiceDetails(requestParams);
                Iterator itr = idresult.getEntityList().iterator();

                while (itr.hasNext()) {
                    InvoiceDetail row = (InvoiceDetail) itr.next();
                    amount = 0.0;

                    amountwitoutCate = 0.0;
                    double discount = 0;
                    double quantity = row.getInventory().getQuantity();
                    double rate = row.getRate();
                    if (row.getTax() != null) {
                        tax += row.getRowTaxAmount() + row.getRowTermTaxAmount();
                    }

                    if (row.getDiscount() != null) {
                        discount = row.getDiscount().getDiscountValue();
                    }

                        for (CustomizeReportMapping customizeReportMapping : customizeReportList) {
                            String column="Custom_"+customizeReportMapping.getDataIndex();
                             
                            if (custJobj.has(column)) {
                                customFieldMapValues = custJobj.getString(column);
                                if (!arrayList.contains(customizeReportMapping.getDataIndex())) {
                                    jobjTemp = new JSONObject();
                                    jobjTemp.put("name", customizeReportMapping.getDataIndex());
                                    jarrRecords.put(jobjTemp);

                                    jobjTemp = new JSONObject();
                                    jobjTemp.put("header", customizeReportMapping.getDataHeader());
                                    jobjTemp.put("dataIndex", customizeReportMapping.getDataIndex());
                                    jobjTemp.put("width", 150);
                                    jobjTemp.put("pdfwidth", 150);
                                    jobjTemp.put("custom", "true");
                                    jarrColumns.put(jobjTemp);

                                    arrayList.add(customizeReportMapping.getDataIndex());
                                }
                                newJobj.put(customizeReportMapping.getDataIndex(), customFieldMapValues);
                            }else {
                                    if (!arrayList.contains(customizeReportMapping.getDataIndex())) {
                                        jobjTemp = new JSONObject();
                                        jobjTemp.put("name", customizeReportMapping.getDataIndex());
                                        jarrRecords.put(jobjTemp);

                                        jobjTemp = new JSONObject();
                                        jobjTemp.put("header", customizeReportMapping.getDataHeader());
                                        jobjTemp.put("dataIndex", customizeReportMapping.getDataIndex());
                                        jobjTemp.put("width", 150);
                                        jobjTemp.put("pdfwidth", 150);
                                        jobjTemp.put("custom", "true");
                                        jarrColumns.put(jobjTemp);
                                        arrayList.add(customizeReportMapping.getDataIndex());
                                    }

                                }
                            
                        }
                    result = accInvoiceDAOobj.getProductCategoryForDetailsReport(row.getInventory().getProduct().getID());
                    if (result.getRecordTotalCount() != 0) {
                        ProductCategoryMapping productCategoryMapping = (ProductCategoryMapping) result.getEntityList().get(0);
                        //Product Categories Column
                        if (productCategoryMapping.getProductCategory() != null) {
                            if (!ckeckList.contains(productCategoryMapping.getProductCategory().getValue())) {
                                jobjTemp = new JSONObject();
                                jobjTemp.put("name", productCategoryMapping.getProductCategory().getValue());
                                jarrRecords.put(jobjTemp);

                                jobjTemp = new JSONObject();
                                jobjTemp.put("header", productCategoryMapping.getProductCategory().getValue());
                                jobjTemp.put("dataIndex", productCategoryMapping.getProductCategory().getValue());
                                jobjTemp.put("pdfwidth", 150);
                                jobjTemp.put("width", 150);
                                jarrColumns.put(jobjTemp);
                                ckeckList.add(productCategoryMapping.getProductCategory().getValue());
                            }
                            if (mapProductCate.containsKey(productCategoryMapping.getProductCategory().getValue())) {
                                double categoryAmount = mapProductCate.get(productCategoryMapping.getProductCategory().getValue());
                                //Total Amount With Product Categary
                                amount = rate * quantity - discount;
                                mapProductCate.put(productCategoryMapping.getProductCategory().getValue(), (categoryAmount + amount));
                            } else {
                                //Total Amount With Product Categary
                                amount = rate * quantity - discount;
                                mapProductCate.put(productCategoryMapping.getProductCategory().getValue(), amount);
                            }
                        } else {
                            //Total Amount Without Product Categary
                            amountwitoutCate = rate * quantity - discount;
                        }

                    } else {
                        //Total Amount Without Product Categary
                        amountwitoutCate = rate * quantity - discount;

                    }
                    totalAmount += amount;
                    totalAmountWithoutCate += amountwitoutCate;
                }
                totalAmountinbase = invoice.getInvoiceamountinbase();

                if (cnt == list.size() - 1) {
                    jobjTemp = new JSONObject();
                    jobjTemp.put("name", "totalAmountWithout");
                    jarrRecords.put(jobjTemp);

                    jobjTemp = new JSONObject();
                    jobjTemp.put("header", messageSource.getMessage("acc.common.none.category", null, RequestContextUtils.getLocale(request)));//None (Category)
                    jobjTemp.put("dataIndex", "totalAmountWithout");
                    jobjTemp.put("width", 150);
                    jobjTemp.put("pdfwidth", 150);
                    jarrColumns.put(jobjTemp);

                    jobjTemp = new JSONObject();
                    jobjTemp.put("name", "grossTotal");
                    jarrRecords.put(jobjTemp);

                    jobjTemp = new JSONObject();
                    jobjTemp.put("header", messageSource.getMessage("acc.common.grossamount", null, RequestContextUtils.getLocale(request)));//Gross Amount
                    jobjTemp.put("dataIndex", "grossTotal");
                    jobjTemp.put("width", 150);
                    jobjTemp.put("pdfwidth", 150);
                    jarrColumns.put(jobjTemp);
                    
                    jobjTemp = new JSONObject();
                    jobjTemp.put("name", "gst");
                    jarrRecords.put(jobjTemp);

                    jobjTemp = new JSONObject();
                    jobjTemp.put("header", "GST");
                    jobjTemp.put("dataIndex", "gst");
                    jobjTemp.put("width", 150);
                    jobjTemp.put("pdfwidth", 150);
                    jarrColumns.put(jobjTemp);
                    
                    jobjTemp = new JSONObject();
                    jobjTemp.put("name", "termAmount");
                    jarrRecords.put(jobjTemp);

                    jobjTemp = new JSONObject();
                    jobjTemp.put("header", messageSource.getMessage("acc.field.InvoiceTerms", null, RequestContextUtils.getLocale(request)));//Invoice Terms
                    jobjTemp.put("dataIndex", "termAmount");
                    jobjTemp.put("width", 150);
                    jobjTemp.put("pdfwidth", 150);
                    jarrColumns.put(jobjTemp);

                    jobjTemp = new JSONObject();
                    jobjTemp.put("name", "totalAmount");
                    jarrRecords.put(jobjTemp);

                    jobjTemp = new JSONObject();
                    jobjTemp.put("header", messageSource.getMessage("acc.invoiceList.totAmt", null, RequestContextUtils.getLocale(request)));//Total Amount
                    jobjTemp.put("dataIndex", "totalAmount");
                    jobjTemp.put("width", 150);
                    jobjTemp.put("pdfwidth", 150);
                    jarrColumns.put(jobjTemp);
                    
                    jobjTemp = new JSONObject();
                    jobjTemp.put("name", "amountinbase");
                    jarrRecords.put(jobjTemp);
                    
                    jobjTemp = new JSONObject();
                    jobjTemp.put("header", messageSource.getMessage("acc.invoiceList.totAmtHome", null, RequestContextUtils.getLocale(request)));//Total Amount (In Base Currency)
                    jobjTemp.put("dataIndex", "amountinbase");
                    jobjTemp.put("baseCurrencyRenderer", true);
                    jobjTemp.put("width", 150);
                    jobjTemp.put("pdfwidth", 150);
                    jarrColumns.put(jobjTemp);
                }
                checkTotalWithoutCate.add(totalAmountWithoutCate);
                checkTotal.add(totalAmount);
                checkGst.add(taxAmount);
                cnt++;
                newJobj.put(Constants.billid, invoice.getInvoiceNumber());
                newJobj.put("currencysymbol", invoice.getCurrency() != null ? invoice.getCurrency().getCurrencyCode() : currency.getSymbol());
                newJobj.put(Constants.currencyKey, invoice.getCurrency() != null ? invoice.getCurrency().getCurrencyID() : currency.getCurrencyID());
                if (invoice.getCreationDate() != null) {
                    newJobj.put("date", userdf.format(invoice.getCreationDate()));
                }
                if (invoice.getCustomer().getAcccode() != null) {
                    newJobj.put("fileRef", invoice.getCustomer().getAcccode());
                }
                if (invoice.getCustomer().getName() != null) {
                    newJobj.put("clientName", invoice.getCustomer().getName());
                }

                for (String key : mapProductCate.keySet()) {
                    Double value = (Double) mapProductCate.get(key);
                    newJobj.put(key, value);
                }

                newJobj.put("termAmount", authHandler.round(termAmount, companyId));
                newJobj.put("grossTotal", authHandler.round(totalAmountWithoutCate + totalAmount, companyId));

                for (int i = 0; i < checkTotal.size(); i++) {
                    newJobj.put("totalAmount", authHandler.round(totalAmount + termAmount + totalAmountWithoutCate + tax, companyId));
                }
                newJobj.put("gst", authHandler.round(tax, companyId));
                for (int i = 0; i < checkTotalWithoutCate.size(); i++) {
                    newJobj.put("totalAmountWithout", authHandler.round(totalAmountWithoutCate, companyId));
                }
                newJobj.put("amountinbase", authHandler.round(totalAmountinbase, companyId));

                jArr.put(newJobj);
                mapProductCate.clear();
            }

            commData.put("success", true);
            commData.put("coldata", jArr);
            commData.put("columns", jarrColumns);
            jMeta.put("totalProperty", "totalCount");
            jMeta.put("root", "coldata");
            commData.put("totalCount", count);
            jMeta.put("fields", jarrRecords);
            commData.put("metaData", jMeta);
            JSONArray jcom = new JSONArray();
            jcom.put(commData);

            jobj1.put("valid", true);
            if (export) {
                jobj1.put(Constants.data, jArr);
            } else {
                jobj1.put(Constants.data, commData);
            }

        } catch (Exception ex) {
            Logger.getLogger(accInvoiceController.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
        }
        return jobj1;
    }

    public ModelAndView exportInvoiceForSalesProductCategoryDetails(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        String view = "jsonView_ex";
        try {
            boolean export = true;
            jobj = getInvoiceForSalesProductCategoryDetailsJson(request, export);
            String fileType = request.getParameter("filetype");
            if (StringUtil.equal(fileType, "print")) {
                String startDate = request.getParameter("startDate");
                String endDate = request.getParameter("enddate");
                if (!StringUtil.isNullOrEmpty(startDate) && !StringUtil.isNullOrEmpty(startDate)) {
                    startDate = authHandler.getDateOnlyFormat().format(authHandler.getDateOnlyFormat().parse(startDate));
                    endDate = authHandler.getDateOnlyFormat().format(authHandler.getDateOnlyFormat().parse(endDate));
                    jobj.put("isFromToDateRequired", true);
                    jobj.put("stdate", startDate);
                    jobj.put("enddate", endDate);
                } else {
                    authHandler.getDateFormatter(request).format(new Date());
                    String GenerateDate = authHandler.getDateOnlyFormat().format(new Date());
                    jobj.put("GenerateDate", GenerateDate);
                }
                view = "jsonView-empty";
            }

            exportDaoObj.processRequest(request, response, jobj);
        } catch (SessionExpiredException ex) {
            Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
        }
        return new ModelAndView(view, "model", jobj.toString());
    }
    public JSONArray getDebitNotesMergedJson(HashMap<String, Object> requestParams, List list, JSONArray JArr) throws ServiceException {
        try {
            String currencyid = (String) requestParams.get(Constants.globalCurrencyKey);
            KwlReturnObject curresult = accountingHandlerDAOobj.getObject(KWLCurrency.class.getName(), currencyid);
            KWLCurrency currency = (KWLCurrency) curresult.getEntityList().get(0);
            DateFormat df = (DateFormat) requestParams.get("df");
            int duration = (requestParams.containsKey(InvoiceConstants.duration) && requestParams.containsKey(InvoiceConstants.duration)) ? Integer.parseInt(requestParams.get(InvoiceConstants.duration).toString()) : 30;
            boolean isSOA=(requestParams.containsKey("isSOA") && requestParams.get("isSOA")!=null)?Boolean.parseBoolean(requestParams.get("isSOA").toString()):false;
            Calendar cal1 = Calendar.getInstance();
            Calendar cal2 = Calendar.getInstance();
            Calendar cal3 = Calendar.getInstance();
            Calendar cal4 = Calendar.getInstance();
            Calendar cal5 = Calendar.getInstance();
            Calendar cal6 = Calendar.getInstance();
            Calendar cal7 = Calendar.getInstance();
            if (requestParams.get(Constants.asOfDate) != null) {
                String curDateString = (String) requestParams.get(Constants.asOfDate);
                Date curDate = df.parse(curDateString);
                cal1.setTime(curDate);
                cal2.setTime(curDate);
                cal3.setTime(curDate);
                cal4.setTime(curDate);
                cal5.setTime(curDate);
                cal6.setTime(curDate);
                cal7.setTime(curDate);
                cal2.add(Calendar.DAY_OF_YEAR, -duration);
                cal3.add(Calendar.DAY_OF_YEAR, -(duration * 2));
                cal4.add(Calendar.DAY_OF_YEAR, -(duration * 3));
                cal5.add(Calendar.DAY_OF_YEAR, -(duration * 4));
                cal6.add(Calendar.DAY_OF_YEAR, -(duration * 5));
                cal7.add(Calendar.DAY_OF_YEAR, -(duration * 6));
            }
            
           
            Date cal1Date = null;
            Date cal2Date = null;
            Date cal3Date = null;
            Date cal4Date = null;
            Date cal5Date = null;
            Date cal6Date = null;
            Date cal7Date = null;

            String cal1String = authHandler.getDateOnlyFormat().format(cal1.getTime());
            cal1Date = authHandler.getDateOnlyFormat().parse(cal1String);

            String cal2String = authHandler.getDateOnlyFormat().format(cal2.getTime());
            cal2Date = authHandler.getDateOnlyFormat().parse(cal2String);

            String cal3String = authHandler.getDateOnlyFormat().format(cal3.getTime());
            cal3Date = authHandler.getDateOnlyFormat().parse(cal3String);

            String cal4String = authHandler.getDateOnlyFormat().format(cal4.getTime());
            cal4Date = authHandler.getDateOnlyFormat().parse(cal4String);

            String cal5String = authHandler.getDateOnlyFormat().format(cal5.getTime());
            cal5Date = authHandler.getDateOnlyFormat().parse(cal5String);

            String cal6String = authHandler.getDateOnlyFormat().format(cal6.getTime());
            cal6Date = authHandler.getDateOnlyFormat().parse(cal6String);

            String cal7String = authHandler.getDateOnlyFormat().format(cal7.getTime());
            cal7Date = authHandler.getDateOnlyFormat().parse(cal7String);

            Iterator itr = list.iterator();
            while (itr.hasNext()) {
                
                double amountdue1 = 0;
                double amountdue2 = 0;
                double amountdue3 = 0;
                double amountdue4 = 0;
                double amountdue5 = 0;
                double amountdue6 = 0;
                double amountdue7 = 0;
                double amountdue8 = 0;

                Object[] row = (Object[]) itr.next();
                boolean withoutinventory = Boolean.parseBoolean((String) row[0]);
                String personid = "";
                String personname = "";
                String billto = "";
                String dncurrencyid="";

                KwlReturnObject resultObject = accountingHandlerDAOobj.getObject(Customer.class.getName(), (String) row[2]);
                Customer customer = (Customer) resultObject.getEntityList().get(0);
                personid = customer!=null?customer.getID():"";
                personname = customer!=null?customer.getName():"";
                billto=customer.getBillingAddress()==null?"":customer.getBillingAddress();

                resultObject = accountingHandlerDAOobj.getObject(JournalEntryDetail.class.getName(), (String) row[3]);
                JournalEntryDetail details = (JournalEntryDetail) resultObject.getEntityList().get(0);

                JSONObject obj = new JSONObject();
                if (!withoutinventory) {
                    resultObject = accountingHandlerDAOobj.getObject(DebitNote.class.getName(), (String) row[1]);
                    DebitNote debitNote = (DebitNote) resultObject.getEntityList().get(0);
                    if (debitNote.isOtherwise() && debitNote.getDnamountdue()>0) {
                        JournalEntry je = debitNote.getJournalEntry();
                        dncurrencyid=debitNote.getCurrency() == null ? currency.getCurrencyID() : debitNote.getCurrency().getCurrencyID();
                        obj.put(InvoiceConstants.billid, debitNote.getID());
                        obj.put(InvoiceConstants.noteid, debitNote.getID());
                        obj.put(InvoiceConstants.noteno, debitNote.getDebitNoteNumber());
                        obj.put(InvoiceConstants.companyid, debitNote.getCompany().getCompanyID());
                        obj.put(InvoiceConstants.companyname, debitNote.getCompany().getCompanyName());
                        obj.put(InvoiceConstants.billno, debitNote.getDebitNoteNumber());
                        obj.put(InvoiceConstants.journalentryid, je.getID());
                        obj.put(InvoiceConstants.withoutinventory, withoutinventory);
                        obj.put(InvoiceConstants.currencysymbol, (debitNote.getCurrency() == null ? currency.getSymbol() : debitNote.getCurrency().getSymbol()));
                        obj.put(InvoiceConstants.currencyid, (debitNote.getCurrency() == null ? currency.getCurrencyID() : debitNote.getCurrency().getCurrencyID()));
                        obj.put(InvoiceConstants.currencyname, (debitNote.getCurrency() == null ? currency.getName() : debitNote.getCurrency().getName()));
                        obj.put(InvoiceConstants.entryno, je.getEntryNumber());
                        obj.put(InvoiceConstants.personid, personid);
                        obj.put(InvoiceConstants.personname, personname); 
                        obj.put(InvoiceConstants.personinfo, debitNote.getCustomer() == null ? "" : debitNote.getCustomer().getName()+"("+debitNote.getCustomer().getAcccode()+")");
                        obj.put(InvoiceConstants.billto, billto);
                        obj.put(InvoiceConstants.amount, debitNote.isOtherwise() ? debitNote.getDnamount() : details.getAmount());
                        obj.put(InvoiceConstants.amountdue, debitNote.isOtherwise() ? debitNote.getDnamountdue() : 0);
                        obj.put(InvoiceConstants.amountduenonnegative, debitNote.isOtherwise() ? debitNote.getDnamountdue() : 0);
                        obj.put(InvoiceConstants.amountdueinbase, authHandler.round((Double) accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, debitNote.getDnamountdue(), dncurrencyid, debitNote.getCreationDate(), je.getExternalCurrencyRate()).getEntityList().get(0), debitNote.getCompany().getCompanyID()));
                        obj.put(InvoiceConstants.duedate, df.format(debitNote.getCreationDate()));
                        obj.put(InvoiceConstants.date, df.format(debitNote.getCreationDate()));
                        obj.put(InvoiceConstants.memo, debitNote.getMemo());
                        obj.put(InvoiceConstants.deleted, debitNote.isDeleted());
                        obj.put(InvoiceConstants.externalcurrencyrate, debitNote.getExternalCurrencyRate());
                        obj.put("type","Debit Note");
                        obj.put("isDN",true);
                        obj.put("currencyidval",authHandlerDAOObj.getCurrency(currencyid));
                        Date dueDate = df.parse(df.format(debitNote.getCreationDate()));
                        Double amountdue = 0.0;
                        if(isSOA){ //export SOA report case
                            amountdue= authHandler.round((Double) accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, debitNote.getDnamountdue(), dncurrencyid, debitNote.getCreationDate(), je.getExternalCurrencyRate()).getEntityList().get(0), debitNote.getCompany().getCompanyID());
                        }else{
                             amountdue = debitNote.getDnamountdue();
                        }
                        if (dueDate.after(cal1Date) || dueDate.equals(cal1Date)) {
                            amountdue1 = authHandler.round(amountdue, debitNote.getCompany().getCompanyID());
                        } else if ((cal2Date.before(dueDate) || cal2Date.equals(dueDate)) && cal1Date.after(dueDate)) {
                            amountdue2 = authHandler.round(amountdue, debitNote.getCompany().getCompanyID());
                        } else if ((cal3Date.before(dueDate) || cal3Date.equals(dueDate)) && cal2Date.after(dueDate)) {
                            amountdue3 = authHandler.round(amountdue, debitNote.getCompany().getCompanyID());
                        } else if ((cal4Date.before(dueDate) || cal4Date.equals(dueDate)) && cal3Date.after(dueDate)) {
                            amountdue4 = authHandler.round(amountdue, debitNote.getCompany().getCompanyID());
                        } else if ((cal5Date.before(dueDate) || cal5Date.equals(dueDate)) && cal4Date.after(dueDate)) {
                            amountdue5 = authHandler.round(amountdue, debitNote.getCompany().getCompanyID());
                        } else if ((cal6Date.before(dueDate) || cal6Date.equals(dueDate)) && cal5Date.after(dueDate)) {
                            amountdue6 = authHandler.round(amountdue, debitNote.getCompany().getCompanyID());
                        } else if ((cal7Date.before(dueDate) || cal7Date.equals(dueDate)) && cal6Date.after(dueDate)) {
                            amountdue7 = authHandler.round(amountdue, debitNote.getCompany().getCompanyID());
                        } else {                                                                                          
                            amountdue8 = authHandler.round(amountdue, debitNote.getCompany().getCompanyID());
                        }

                        obj.put("amountdue1", amountdue1);
                        obj.put("amountdue2", amountdue2);
                        obj.put("amountdue3", amountdue3);
                        obj.put("amountdue4", amountdue4);
                        obj.put("amountdue5", amountdue5);
                        obj.put("amountdue6", amountdue6);
                        obj.put("amountdue7", amountdue7);
                        obj.put("amountdue8", amountdue8);
                        JArr.put(obj);
                    }
                }
            }
        } catch (Exception ex) {
            throw ServiceException.FAILURE("accDebitNoteController.getDebitNotesJson : " + ex.getMessage(), ex);
        }
        return JArr;
    }   

    public ModelAndView getCustomerAgedReceivable(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        boolean issuccess = false;
        JSONObject mainJobj = new JSONObject();
        String msg = "";
        int totalCount=0;
        String view = Constants.jsonView;
        boolean customizedSumryReportFlag = false;
        JSONObject totalAmountJSON = new JSONObject();
        try{
            JSONArray invJArr = new JSONArray();
            /*
             getCustomerAgedReceivableMerged(HttpServletRequest request,boolean exportCustomerAged)
             exportCustomerAged- used to known call is for exportCustomerAgedReceivables
             */
            System.out.println("Start: "+new Date());
            Integer  moduleIDForFetchingGroupingData = !StringUtil.isNullOrEmpty(request.getParameter("moduleIDForFetchingGroupingData")) ?Integer.parseInt(request.getParameter("moduleIDForFetchingGroupingData")) : 0;
           
            if (moduleIDForFetchingGroupingData == Constants.Acc_Customer_ModuleId) {
                mainJobj = accInvoiceServiceDAO.getCustomerAgedReceivableBasedOnCustomerDimensdion(request, false, true);
            } else if (Constants.moduleSetForAgedReceivable.contains(moduleIDForFetchingGroupingData)) {
                mainJobj = accInvoiceServiceDAO.getCustomerAgedReceivableBasedOnDocumentsDimension(request, false, true);
            } else {
                    mainJobj = accInvoiceServiceDAO.getCustomerAgedReceivableMerged(request, false, true);
                }
            String customizedSumryReportFlagStr = request.getParameter("customizedSummaryReportFlag");
            if (!StringUtil.isNullOrEmpty(customizedSumryReportFlagStr)) {
                customizedSumryReportFlag = Boolean.parseBoolean(customizedSumryReportFlagStr);
            }
            if(customizedSumryReportFlag){
                totalCount=mainJobj.getInt("totalcount") - 1;
            } else{
                totalCount=mainJobj.getInt("totalcount");
            }
            invJArr=mainJobj.getJSONArray(Constants.data);
            
            JSONArray jArr = invJArr;
            issuccess = true;
            System.out.println("End: "+new Date());
            boolean isWidgetRequest = request.getParameter("isWidgetRequest") != null ? Boolean.parseBoolean(request.getParameter("isWidgetRequest")) : false;
            
            boolean checkForEx = false;
            if (StringUtil.getBoolean(request.getParameter("checkforex"))) {
                checkForEx = StringUtil.getBoolean(request.getParameter("checkforex"));
            }
            JSONArray pagedJson = jArr;
            /* checkForEx flag is "true" when clicked on "Fetch All Records" from AR -> summary view. 
             * If flag is true calculate granttotal for All the records
             */
            String start = checkForEx?String.valueOf(0) :request.getParameter("start");
            String limit = checkForEx?String.valueOf(pagedJson.length()) :request.getParameter("limit");
            if (!StringUtil.isNullOrEmpty(start) && !StringUtil.isNullOrEmpty(limit)) {
                if (!isWidgetRequest) { // ADD GRNAD TOTAL AS LAST RECORD IN PAGED JSON
                    pagedJson = StringUtil.getPagedJSONForAgedWIthTotal(pagedJson, Integer.parseInt(start), Integer.parseInt(limit));
                    totalAmountJSON = pagedJson.getJSONObject(pagedJson.length()-1);
                    pagedJson.remove(pagedJson.length()-1);
                    jobj.put(Constants.AGEDAMOUNTSUMMARY, totalAmountJSON);
                } else {
                    pagedJson = StringUtil.getPagedJSON(pagedJson, Integer.parseInt(start), Integer.parseInt(limit));
                }
            }
            
            if (isWidgetRequest) {
                view = "jsonView_ex";
                JSONObject commData = new JSONObject();
                JSONObject jMeta = new JSONObject();
                Map<String, Object> requestParamsForCM = new HashMap<>();
                Map<String, JSONArray> returnMap = accInvoiceServiceDAO.getColumnModuleForAPAR(requestParamsForCM);
                JSONArray jarrRecords = returnMap.get("record");
                JSONArray jarrColumns = returnMap.get("columns");
                commData.put("success", true);
                jMeta.put("totalProperty", "totalCount");
                jMeta.put("root", "coldata");
                jMeta.put("fields", jarrRecords); //Record Array
                commData.put("coldata", pagedJson);  //Actual data
                commData.put("columns", jarrColumns); //Column Module Array
                commData.put("totalCount", jArr.length());
                commData.put("metaData", jMeta);
                jobj.put("valid", true);
                jobj.put(Constants.data, commData);
            } else {
                jobj.put(Constants.data, pagedJson);
                jobj.put("count", totalCount);
            }

        } catch (SessionExpiredException ex) {
            Logger.getLogger(accInvoiceController.class.getName()).log(Level.SEVERE, null, ex);
            issuccess = false;
            msg = ex.getMessage();
        } catch (Exception ex) {
            issuccess = false;
            Logger.getLogger(accInvoiceController.class.getName()).log(Level.SEVERE, null, ex);
            msg = "accInvoiceController.getCustomerAgedReceivable : "+ex.getMessage();
        } finally {
            try {
                jobj.put("success", issuccess);
                jobj.put("msg", msg);
            } catch (JSONException ex) {
                Logger.getLogger(accInvoiceController.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return new ModelAndView(view, "model", jobj.toString());
    }
    
    public ModelAndView getSalesPersonAgedSummary(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        boolean issuccess = false;
        String msg = "";
        JSONObject totalAmountJSON = new JSONObject();
        try{
            JSONArray invJArr = new JSONArray();
            invJArr = accInvoiceServiceDAO.getSalesPersonAgedSummary(request);
            String start = request.getParameter("start");
            String limit = request.getParameter("limit");
            JSONArray jArr = invJArr;
            jArr = StringUtil.getPagedJSONForAgedWIthTotal(jArr, Integer.parseInt(start), Integer.parseInt(limit)); // ADD GRNAD TOTAL AS LAST RECORD IN PAGED JSON
            
            totalAmountJSON = jArr.getJSONObject(jArr.length()-1);
            jArr.remove(jArr.length()-1);
            
            jobj.put(Constants.data, jArr);
            jobj.put("count", invJArr.length());
            jobj.put(Constants.AGEDAMOUNTSUMMARY, totalAmountJSON);
            issuccess = true;
        } catch (SessionExpiredException ex) {
            Logger.getLogger(accInvoiceController.class.getName()).log(Level.SEVERE, null, ex);
            issuccess = false;
            msg = ex.getMessage();
        } catch (Exception ex) {
            issuccess = false;
            msg = "accInvoiceController.getSalesPersonAgedSummary : "+ex.getMessage();
        } finally {
            try {
                jobj.put("success", issuccess);
                jobj.put("msg", msg);
            } catch (JSONException ex) {
                Logger.getLogger(accInvoiceController.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return new ModelAndView(Constants.jsonView, "model", jobj.toString());
    }
    public ModelAndView getConsolidationAgedReceivable(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        boolean issuccess = false;
        String msg = "";
        try {
            JSONObject jsonParams = StringUtil.convertRequestToJsonObject(request);
            jobj = accInvoiceServiceDAO.getConsolidationAgedReceivable(jsonParams);
            issuccess = true;
        } catch (SessionExpiredException ex) {
            Logger.getLogger(accInvoiceController.class.getName()).log(Level.SEVERE, null, ex);
            issuccess = false;
            msg = ex.getMessage();
        } catch (Exception ex) {
            issuccess = false;
            msg = "accInvoiceController.getSalesPersonAgedSummary : " + ex.getMessage();
        } finally {
            try {
                jobj.put("success", issuccess);
                jobj.put("msg", msg);
            } catch (JSONException ex) {
                Logger.getLogger(accInvoiceController.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return new ModelAndView(Constants.jsonView, "model", jobj.toString());
    }

    public ModelAndView exportConsolidationAgedReceivable(HttpServletRequest request, HttpServletResponse response) throws JSONException {
        JSONObject jobj = new JSONObject();
        String msg = "";
        boolean issucess = false;
        String view = "jsonView_ex";
        try {
            JSONObject jsonParams = StringUtil.convertRequestToJsonObject(request);
	    jsonParams.put("isExportReport", true); //SDP-13431 : Check added here to exclude paging count while exporting the data.
            jobj = accInvoiceServiceDAO.getConsolidationAgedReceivable(jsonParams);
            issucess = true;
            String fileType = request.getParameter("filetype");
            if (StringUtil.equal(fileType, "print")) {
                String GenerateDate = authHandler.getDateFormatter(request).format(new Date());
                jobj.put("GenerateDate", GenerateDate);
                view = "jsonView-empty";
            }
            exportDaoObj.processRequest(request, response, jobj);
            issucess = true;
        } catch (SessionExpiredException ex) {
            Logger.getLogger(accInvoiceController.class.getName()).log(Level.SEVERE, null, ex);
            issucess = false;
            msg = ex.getMessage();
        } catch (Exception ex) {
            issucess = false;
            msg = "accInvoiceController.getSalesPersonAgedSummary : " + ex.getMessage();
        } finally {
            try {
                jobj.put("success", issucess);
                jobj.put("msg", msg);
            } catch (JSONException ex) {
                Logger.getLogger(accInvoiceController.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return new ModelAndView(view, "model", jobj.toString());
    }

     public ModelAndView getAgedReportBasedOnDimension(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        boolean issuccess = false;
        String msg = "";
        try{
            String type = request.getParameter("fieldid");
            boolean isGroupingOnInvoiceDimension = false;
            if(!StringUtil.isNullOrEmpty(request.getParameter("isGroupingOnInvoiceDimension"))){
                isGroupingOnInvoiceDimension = StringUtil.getBoolean(request.getParameter("isGroupingOnInvoiceDimension"));
            }
            if (isGroupingOnInvoiceDimension) {
                jobj = accInvoiceServiceDAO.getAgedReportSummaryGoupingOnInvoiceDimension(request);
            }else if (type != null && !type.equals(Constants.Acc_Customer_modulename)) {
                jobj = accInvoiceServiceDAO.getAgedReportSummaryBasedOnDimension(request);
            } else {
                jobj = accInvoiceServiceDAO.getAgedReportSummaryBasedOnCustomer(request);
            }
            issuccess = true;
        } catch (Exception ex) {
            Logger.getLogger(accInvoiceController.class.getName()).log(Level.SEVERE, null, ex);
            issuccess = false;
            msg = ex.getMessage();
        }finally {
            try {
                jobj.put("success", issuccess);
                jobj.put("msg", msg);
            } catch (JSONException ex) {
                Logger.getLogger(accInvoiceController.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return new ModelAndView("jsonView_ex", "model", jobj.toString());
    }
     
       public ModelAndView exportAgedReportBasedOnDimension(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        String view = "jsonView_ex";
        try {
            JSONArray invJArr = new JSONArray();
            String type = request.getParameter("fieldid");
            boolean isGroupingOnInvoiceDimension = false;
            if (!StringUtil.isNullOrEmpty(request.getParameter("isGroupingOnInvoiceDimension"))) {
                isGroupingOnInvoiceDimension = StringUtil.getBoolean(request.getParameter("isGroupingOnInvoiceDimension"));
            }
            if (isGroupingOnInvoiceDimension) {
                jobj = accInvoiceServiceDAO.getAgedReportSummaryGoupingOnInvoiceDimension(request);
            } else if (type != null && !type.equals(Constants.Acc_Customer_modulename)) {
                jobj = accInvoiceServiceDAO.getAgedReportSummaryBasedOnDimension(request);
            } else {
                jobj = accInvoiceServiceDAO.getAgedReportSummaryBasedOnCustomer(request);
            }
            String fileType = request.getParameter("filetype");
            if (StringUtil.equal(fileType, "print")) {
                String GenerateDate = authHandler.getDateFormatter(request).format(new Date());
                jobj.put("GenerateDate", GenerateDate);
                view = "jsonView-empty";
            }
            exportDaoObj.processRequest(request, response, jobj);
        } catch (SessionExpiredException ex) {
            Logger.getLogger(accInvoiceController.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            Logger.getLogger(accInvoiceController.class.getName()).log(Level.SEVERE, null, ex);
        }
        return new ModelAndView(view, "model", jobj.toString());
    } 
       
      public ModelAndView getInvoicesForDimensionBasedAgedReceivableReport(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        boolean issuccess = false;
        String msg = "";
        try{
            jobj = accInvoiceServiceDAO.getAgedReceivableDetailBasedOnDimension(request);
            issuccess = true;
        } catch (Exception ex) {
            Logger.getLogger(accInvoiceController.class.getName()).log(Level.SEVERE, null, ex);
            issuccess = false;
            msg = ex.getMessage();
        }finally {
            try {
                jobj.put("success", issuccess);
                jobj.put("msg", msg);
            } catch (JSONException ex) {
                Logger.getLogger(accInvoiceController.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return new ModelAndView("jsonView_ex", "model", jobj.toString());
    }   
    
       public ModelAndView exportAgedReceivableDetailedReportBasedOnDimension(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        String view = "jsonView_ex";
        try {
            jobj = accInvoiceServiceDAO.getAgedReceivableDetailBasedOnDimension(request);
            String fileType = request.getParameter("filetype");
            if (StringUtil.equal(fileType, "print")) {
                String GenerateDate = authHandler.getDateFormatter(request).format(new Date());
                jobj.put("GenerateDate", GenerateDate);
                view = "jsonView-empty";
            }
            exportDaoObj.processRequest(request, response, jobj);
        } catch (SessionExpiredException ex) {
            Logger.getLogger(accInvoiceController.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            Logger.getLogger(accInvoiceController.class.getName()).log(Level.SEVERE, null, ex);
        }
        return new ModelAndView(view, "model", jobj.toString());
    } 
    public void exportAgedReportBasedOnSalesPerson(HttpServletRequest request, HttpServletResponse response) {
        JasperPrint jasperPrint = null;
        try {
            if("false".equals(request.getParameter("isDetailPDF"))) {
                jasperPrint = agedReportBasedOnSalesPersonSummary(request, response);
            }else {
                jasperPrint = agedReportBasedOnSalesPersonDetail(request, response);
            }
            
            JRPdfExporter exp = new JRPdfExporter();
            exp.setParameter(JRExporterParameter.JASPER_PRINT, jasperPrint);
            exp.setParameter(JRPdfExporterParameter.OUTPUT_STREAM, response.getOutputStream());
            exp.exportReport();
        } catch (Exception ex) {
            Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    public JasperPrint agedReportBasedOnSalesPersonSummary(HttpServletRequest request, HttpServletResponse response) {
        JasperPrint jasperPrint = null;
        try {
            KwlReturnObject cmpresult = accountingHandlerDAOobj.getObject(Company.class.getName(), sessionHandlerImpl.getCompanyid(request));
            Company company = (Company) cmpresult.getEntityList().get(0);
            KWLCurrency currency = company.getCurrency();
            String companyid = sessionHandlerImpl.getCompanyid(request);
            double grandTotal = 0;
            HashMap agedReportMap = new HashMap();
            ArrayList dataList = new ArrayList();
            JSONArray invJArr = new JSONArray();
            invJArr = accInvoiceServiceDAO.getSalesPersonAgedSummary(request);
            for (int i = 0; i < invJArr.length(); i++) {
                JSONObject jobj = invJArr.getJSONObject(i);
                AgedReportBasedOnSalesPersonPojo obj = new AgedReportBasedOnSalesPersonPojo();
                obj.setSalesPersonName(jobj.optString("salespersonname", ""));
                obj.setCurrency(jobj.optString("currencyname", ""));
                obj.setCurrent(authHandler.formattedAmount(jobj.optDouble("amountdue1", 0.0), companyid));
                obj.setDays_1to30(authHandler.formattedAmount(jobj.optDouble("amountdue2", 0.0), companyid));
                obj.setDays_31to60(authHandler.formattedAmount(jobj.optDouble("amountdue3", 0.0), companyid));
                obj.setDays_61to90(authHandler.formattedAmount(jobj.optDouble("amountdue4", 0.0), companyid));
                obj.setDays_91to120(authHandler.formattedAmount(jobj.optDouble("amountdue5", 0.0), companyid));
                obj.setDays_121to150(authHandler.formattedAmount(jobj.optDouble("amountdue6", 0.0), companyid));
                obj.setDays_151to180(authHandler.formattedAmount(jobj.optDouble("amountdue7", 0.0), companyid));
                obj.setDays_Over180(authHandler.formattedAmount(jobj.optDouble("amountdue8", 0.0), companyid));
                obj.setTotalInBaseCurrency(authHandler.formattedAmount(jobj.optDouble("totalinbase", 0.0), companyid));
                obj.setBaseCurrency(currency.getName());
                dataList.add(obj);
                grandTotal += jobj.optDouble("totalinbase", 0.0);
            }

            agedReportMap.put("grandTotal", "" + authHandler.formattedAmount(grandTotal, companyid));
            agedReportMap.put("recordsCount", "" + invJArr.length());
            agedReportMap.put("companyname", company.getCompanyName());
            agedReportMap.put("companyaddress", AccountingAddressManager.getCompanyDefaultBillingAddress(company.getCompanyID(), accountingHandlerDAOobj));
            agedReportMap.put("tableDataSource", new JRBeanCollectionDataSource(dataList));
            ArrayList<OnlyDatePojo> DateOnlyPojoLOist = new ArrayList<OnlyDatePojo>();
            OnlyDatePojo dateOnlyPojo = new OnlyDatePojo();
            dateOnlyPojo.setDate(authHandler.getDateFormatter(request).format(new Date()));
            DateOnlyPojoLOist.add(dateOnlyPojo);

            response.setHeader("Content-Disposition", "attachment;filename=" + "AgedReportBasedOnSalesPerson_v1.pdf");
            InputStream inputStream = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/AgedReportBasedOnSalesPerson.jrxml");
            JasperDesign jasperDesign = JRXmlLoader.load(inputStream);
            JasperReport jasperReport = JasperCompileManager.compileReport(jasperDesign);
            JRBeanCollectionDataSource beanColDataSource = new JRBeanCollectionDataSource(DateOnlyPojoLOist);
            jasperPrint = JasperFillManager.fillReport(jasperReport, agedReportMap, beanColDataSource);
        } catch (Exception e) {
            Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, e);
        }
        return jasperPrint;
    }
    
    public JasperPrint agedReportBasedOnSalesPersonDetail(HttpServletRequest request, HttpServletResponse response) {
        JasperPrint jasperPrint = null;
        Map<String, Object> agedReceivableMap = new HashMap<String, Object>();
        AgedReceivable agedReceivable = new AgedReceivable();
        ArrayList<AgedReceivable> agedReceivableList = new ArrayList<AgedReceivable>();
        ArrayList<AgedReceivableSubReport> agedReceivableSubReportList = new ArrayList< AgedReceivableSubReport>();
        
        try {
            JSONObject requestOBJ = StringUtil.convertRequestToJsonObject(request);
            int duration = Integer.parseInt(request.getParameter("duration"));
            String curDateString = "";
            Date curDate = null;
            Calendar oneDayBeforeCal1 = Calendar.getInstance();
            Calendar cal1 = Calendar.getInstance();
            Calendar cal2 = Calendar.getInstance();
            Calendar cal3 = Calendar.getInstance();
            Calendar cal4 = Calendar.getInstance();
            Calendar cal5 = Calendar.getInstance();
            Calendar cal6 = Calendar.getInstance();
            Calendar cal7 = Calendar.getInstance();
            if (request.getParameter(Constants.asOfDate) != null) {//Added for aged payable/receivable
                curDateString = request.getParameter(Constants.asOfDate);
                curDate = authHandler.getDateFormatter(request).parse(curDateString);
                oneDayBeforeCal1.setTime(curDate);
                cal1.setTime(curDate);
                cal2.setTime(curDate);
                cal3.setTime(curDate);
                cal4.setTime(curDate);
                cal5.setTime(curDate);
                cal6.setTime(curDate);
                cal7.setTime(curDate);
                oneDayBeforeCal1.add(Calendar.DAY_OF_YEAR, -1);
                cal2.add(Calendar.DAY_OF_YEAR, -duration);
                cal3.add(Calendar.DAY_OF_YEAR, -(duration * 2));
                cal4.add(Calendar.DAY_OF_YEAR, -(duration * 3));
                cal5.add(Calendar.DAY_OF_YEAR, -(duration * 4));
                cal6.add(Calendar.DAY_OF_YEAR, -(duration * 5));
                cal7.add(Calendar.DAY_OF_YEAR, -(duration * 6));
            }
            
            String companyid=sessionHandlerImpl.getCompanyid(request);
            KwlReturnObject result = accountingHandlerDAOobj.getObject(CompanyAccountPreferences.class.getName(), companyid);
            CompanyAccountPreferences companyAccountPreferences = (CompanyAccountPreferences) result.getEntityList().get(0);
            KwlReturnObject cmpresult = accountingHandlerDAOobj.getObject(Company.class.getName(), companyid);
            Company company = (Company) cmpresult.getEntityList().get(0);
            KWLCurrency currency = company.getCurrency();
           
            agedReceivable.setName(company.getCompanyName());
            agedReceivable.setEmail(company.getEmailID() != null ? company.getEmailID() : "");
            agedReceivable.setFax(company.getFaxNumber() != null ? company.getFaxNumber() : "");
            agedReceivable.setPhone(company.getPhoneNumber() != null ? company.getPhoneNumber() : "");
            
            DateFormat df = authHandler.getUserDateFormatterWithoutTimeZone(request);  //ERP-20997   //new SimpleDateFormat("dd/MM/yyyy");
            String asondate = df.format(authHandler.getDateOnlyFormat().parse(request.getParameter("asofdate")));
            String endDate = df.format(authHandler.getDateOnlyFormat().parse(request.getParameter("enddate")));
            Calendar c = Calendar.getInstance();
            c.setTime(df.parse(endDate)); // number of days to substract
            endDate = df.format(c.getTime());
            String startDate = df.format(authHandler.getDateOnlyFormat().parse(Constants.opening_Date));
            String date = "From Date : " + startDate + ",To Date : " + endDate;
            agedReceivable.setDateRange(date);
            String fiscalstart = df.format(companyAccountPreferences.getFinancialYearFrom());
            Calendar c1 = Calendar.getInstance();
            c1.setTime(df.parse(fiscalstart));
            c1.add(Calendar.YEAR, 1); // number of years to add
            c1.add(Calendar.DATE, -1);
            String fiscalend = df.format(c1.getTime());
            String period = fiscalstart + " - " + fiscalend;
            agedReceivable.setStartDate(period);
            agedReceivable.setAmountDue1Header(duration + " & Below"+"<br>"+df.format(cal2.getTime()));
            agedReceivable.setAmountDue2Header(duration + 1 + "-" + (2 * duration)+"<br>"+df.format(cal3.getTime()));
            agedReceivable.setAmountDue3Header("Over " + (2 * duration)+"<br>"+df.format(cal4.getTime()));
            agedReceivable.setCurrencyinword(currency.getName() != null ? currency.getName().toString() : currency.getSymbol());
            
            JSONArray DataJArr = new JSONArray();
            HashMap<String,Double> currencyTotal = new HashMap<String,Double>();
            DataJArr = accInvoiceServiceDAO.getSalesPersonAgedDetail(request,requestOBJ);
            for (int i = 0; i < DataJArr.length(); i++) {
                AgedReceivableSubReport agedReceivableSubReport = new AgedReceivableSubReport();
                JSONObject jobj = DataJArr.getJSONObject(i);
                agedReceivableSubReport.setSalespersonid(jobj.optString("salesPerson", ""));
                agedReceivableSubReport.setSalespersoncode(jobj.optString("salesPersonCode", ""));
                agedReceivableSubReport.setSalespersonname(jobj.optString("salesPersonName", ""));
                agedReceivableSubReport.setCustomerName(jobj.optString("personname") != null ? jobj.getString("personname") : "");
                agedReceivableSubReport.setBasecurr(currency.getName() != null ? currency.getName().toString() : currency.getSymbol());
                if (jobj.optString("personid") != null && !StringUtil.isNullOrEmpty(jobj.optString("personid"))) {
                    KwlReturnObject cstresult = accountingHandlerDAOobj.getObject(Customer.class.getName(), jobj.getString("personid"));
                    Customer customer = (Customer) cstresult.getEntityList().get(0);
                    agedReceivableSubReport.setCustomerCode(customer.getAcccode() != null ? customer.getAcccode() : "");
                    agedReceivableSubReport.setCreditlimit(StringUtil.isNullOrEmpty(Double.toString(customer.getCreditlimit())) ? "" : authHandler.formattedAmount(customer.getCreditlimit(), companyid));
                    agedReceivableSubReport.setCreditdays(customer.getCreditTerm() != null ? Integer.toString(customer.getCreditTerm().getTermdays()) : "");
                }
                if (jobj.has("Custom_Property Address")) {
                    agedReceivableSubReport.setPropaddr("Property Address: "+jobj.getString("Custom_Property Address"));
                }
                agedReceivableSubReport.setDate(jobj.optString("date") != null ? df.format(Date.parse(jobj.getString("date"))) : "");
                KwlReturnObject currencyresult = accountingHandlerDAOobj.getObject(KWLCurrency.class.getName(), jobj.getString(Constants.currencyKey));
                KWLCurrency currency1 = (KWLCurrency) currencyresult.getEntityList().get(0);
                agedReceivableSubReport.setExchangerate(jobj.getString("exchangerate"));
                agedReceivableSubReport.setCurrency(currency1.getName());
                agedReceivableSubReport.setEntryNumber(jobj.optString("billno") != null ? jobj.getString("billno") : "");
                
                if (currencyTotal.containsKey(currency1.getName())) {
                    Double newValue = 0.0;
                    Double oldValue = 0.0;
                    oldValue = currencyTotal.get(currency1.getName());
                    newValue = jobj.optString("amountdue") != null ? Double.parseDouble(jobj.getString("amountdue")) : 0.0;
                    currencyTotal.put(currency1.getName(), oldValue + newValue);
                } else {
                    currencyTotal.put(currency1.getName(), jobj.optString("amountdue") != null ? Double.parseDouble(jobj.getString("amountdue")) : 0.0);
                }
                
                agedReceivableSubReport.setEntryType(jobj.optString("type") != null ? jobj.getString("type") : "");
                agedReceivableSubReport.setDocumentAmount(jobj.optString("amountdue") != null ? Double.parseDouble(jobj.getString("amountdue")) : 0.0);
                agedReceivableSubReport.setTotalinbase(jobj.optString("amountdueinbase") != null ? Double.parseDouble(jobj.getString("amountdueinbase")) : 0.0);
                agedReceivableSubReport.setAmountDue1(jobj.optString("amountdue2") != null ? Double.parseDouble(jobj.getString("amountdue2")) : 0.0);
                agedReceivableSubReport.setAmountDue2(jobj.optString("amountdue3") != null ? Double.parseDouble(jobj.getString("amountdue3")) : 0.0);
                double total = 0.0;
                if (jobj.optString("amountdue4") != null) {
                    total = total + Double.parseDouble(jobj.getString("amountdue4"));
                }
                if (jobj.optString("amountdue5") != null) {
                    total = total + Double.parseDouble(jobj.getString("amountdue5"));
                }
                if (jobj.optString("amountdue6") != null) {
                    total = total + Double.parseDouble(jobj.getString("amountdue6"));
                }
                if (jobj.optString("amountdue7") != null) {
                    total = total + Double.parseDouble(jobj.getString("amountdue7"));
                }
                if (jobj.optString("amountdue8") != null) {
                    total = total + Double.parseDouble(jobj.getString("amountdue8"));
                }

                agedReceivableSubReport.setBasecurr(currency.getName());
                agedReceivableSubReport.setAmountDue3(total);
                agedReceivableSubReportList.add(agedReceivableSubReport);

            }
            
            List<CurrencyWiseGrandTotals> ctList = new ArrayList<CurrencyWiseGrandTotals>();
            for (String key : currencyTotal.keySet()) {
                Double value = currencyTotal.get(key);
                CurrencyWiseGrandTotals ct = new CurrencyWiseGrandTotals();
                ct.setCurrency(key);
                ct.setTotal(value);
                ctList.add(ct);
            }
            
            AgedReceivableSubReport lastList =agedReceivableSubReportList.get(agedReceivableSubReportList.size()-1);
            lastList.setCtList(ctList);
            agedReceivableSubReportList.remove(agedReceivableSubReportList.size()-1);
            agedReceivableSubReportList.add(lastList);            
            agedReceivableMap.put("AgedReceivableSubReportData", new JRBeanCollectionDataSource(agedReceivableSubReportList));

            agedReceivableList.add(agedReceivable);
            agedReceivableMap.put("companyaddress", AccountingAddressManager.getCompanyDefaultBillingAddress(companyid, accountingHandlerDAOobj));
            agedReceivableMap.put("format", "pdf");
            agedReceivableMap.put("person", "Sales Person");
            String fileName1 = StorageHandler.GetDocStorePath() + company.getCompanyID() + "_template" + FileUploadHandler.getCompanyImageExt();
            agedReceivableMap.put("imagePath", fileName1);
            agedReceivableMap.put("asondate", "As On: "+asondate);
            agedReceivableMap.put("datasource", new JRBeanCollectionDataSource(agedReceivableList));
            
            response.setHeader("Content-Disposition", "attachment;filename=" + "AgedReportBasedOnSalesPerson_v1.pdf");
            InputStream inputStream = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/AgedReportBasedOnSalesPersonMainReport.jrxml");
            JasperDesign jasperDesign = JRXmlLoader.load(inputStream);
            JasperReport jasperReport = JasperCompileManager.compileReport(jasperDesign);

            InputStream inputStreamSubReport = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/AgedReportBasedOnSalesPersonSubReport.jrxml");
            JasperDesign jasperDesignSubReport = JRXmlLoader.load(inputStreamSubReport);
            JasperReport jasperReportSubReport = JasperCompileManager.compileReport(jasperDesignSubReport);

            agedReceivableMap.put("AgedReceivableSubReport", jasperReportSubReport);
            JRBeanCollectionDataSource beanColDataSource = new JRBeanCollectionDataSource(agedReceivableList);
            jasperPrint = JasperFillManager.fillReport(jasperReport, agedReceivableMap, beanColDataSource);

        } catch (Exception e) {
            Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, e);
        }
        return jasperPrint;
    }
    
    public ModelAndView exportSalesPersonAgedSummary(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        String view = "jsonView_ex";
        try {
            JSONArray invJArr = new JSONArray();
            invJArr = accInvoiceServiceDAO.getSalesPersonAgedSummary(request);
            jobj.put(Constants.data, invJArr);
            String fileType = request.getParameter("filetype");
            if (StringUtil.equal(fileType, "print")) {
                String GenerateDate = authHandler.getDateFormatter(request).format(new Date());
                jobj.put("GenerateDate", GenerateDate);
                view = "jsonView-empty";
            }
            exportDaoObj.processRequest(request, response, jobj);
        } catch (SessionExpiredException ex) {
            Logger.getLogger(accInvoiceController.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            Logger.getLogger(accInvoiceController.class.getName()).log(Level.SEVERE, null, ex);
        }
        return new ModelAndView(view, "model", jobj.toString());
    }             
            
    public ModelAndView getSalesPersonAgedDetail(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        boolean issuccess = false;
        String msg = "";
        JSONObject totalAmountJSON = new JSONObject();
        try {
            JSONArray invJArr = new JSONArray();
            JSONObject requestOBJ = StringUtil.convertRequestToJsonObject(request);
            invJArr = accInvoiceServiceDAO.getSalesPersonAgedDetail(request, requestOBJ);
            String start = request.getParameter("start");
            String limit = request.getParameter("limit");
            JSONArray jArr = invJArr;
            jArr = StringUtil.getPagedJSONForAgedWIthTotal(jArr, Integer.parseInt(start), Integer.parseInt(limit)); // ADD GRNAD TOTAL AS LAST RECORD IN PAGED JSON
            
            totalAmountJSON = jArr.getJSONObject(jArr.length()-1);
            jArr.remove(jArr.length()-1);
            
            jobj.put(Constants.data, jArr);
            jobj.put(Constants.AGEDAMOUNTSUMMARY,totalAmountJSON);
            jobj.put("count", invJArr.length());
            issuccess = true;
        } catch (SessionExpiredException ex) {
            Logger.getLogger(accInvoiceController.class.getName()).log(Level.SEVERE, null, ex);
            issuccess = false;
            msg = ex.getMessage();
        } catch (Exception ex) {
            issuccess = false;
            msg = "accInvoiceController.getSalesPersonAgedDetail : " + ex.getMessage();
        } finally {
            try {
                jobj.put("success", issuccess);
                jobj.put("msg", msg);
            } catch (JSONException ex) {
                Logger.getLogger(accInvoiceController.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return new ModelAndView(Constants.jsonView, "model", jobj.toString());
    }

    public ModelAndView exportSalesPersonAgedDetail(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        String view = "jsonView_ex";
        try {
            JSONArray invJArr = new JSONArray();
            JSONObject requestOBJ = StringUtil.convertRequestToJsonObject(request);
            requestOBJ.put(Constants.isExport,true);
            invJArr = accInvoiceServiceDAO.getSalesPersonAgedDetail(request,requestOBJ);
            jobj.put(Constants.data, invJArr);
            String fileType = request.getParameter("filetype");
            if (StringUtil.equal(fileType, "print")) {
                String GenerateDate = authHandler.getDateFormatter(request).format(new Date());
                jobj.put("GenerateDate", GenerateDate);
                view = "jsonView-empty";
            }
            exportDaoObj.processRequest(request, response, jobj);
        } catch (SessionExpiredException ex) {
            Logger.getLogger(accInvoiceController.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            Logger.getLogger(accInvoiceController.class.getName()).log(Level.SEVERE, null, ex);
        }
        return new ModelAndView(view, "model", jobj.toString());
    }         
   
    public ModelAndView getMonthlyCustomerAgedReceivable(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        boolean issuccess = false;
        String msg = "";
        try{
            JSONArray invJArr = new JSONArray();
            invJArr = accInvoiceServiceDAO.getMonthlyCustomerAgedReceivableMerged(request);
            String start = request.getParameter("start");
            String limit = request.getParameter("limit");
            JSONArray jArr = new JSONArray(), temp = invJArr;
            JSONObject month=invJArr.getJSONObject(invJArr.length()-1);
            if (!StringUtil.isNullOrEmpty(start) && !StringUtil.isNullOrEmpty(limit)) {
                int st = Integer.parseInt(start);
                int ed = Math.min(temp.length(), st + Integer.parseInt(limit));
                for (int i = st; i < ed; i++) {
                    jArr.put(temp.getJSONObject(i));
                }
            }
            if(Integer.parseInt(limit) <= jArr.length()){
                jArr.put(month);
            }
            jobj.put(Constants.data, jArr);
            jobj.put("count", invJArr.length()-1);//One record added of month so real count of record is less than 1
            issuccess = true;
        } catch (SessionExpiredException ex) {
            Logger.getLogger(accInvoiceController.class.getName()).log(Level.SEVERE, null, ex);
            issuccess = false;
            msg = ex.getMessage();
        } catch (Exception ex) {
            issuccess = false;
            msg = "accInvoiceController.getMonthlyCustomerAgedReceivable : "+ex.getMessage();
        } finally {
            try {
                jobj.put("success", issuccess);
                jobj.put("msg", msg);
            } catch (JSONException ex) {
                Logger.getLogger(accInvoiceController.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return new ModelAndView(Constants.jsonView, "model", jobj.toString());
    }
    
    public ModelAndView getCustomizedAgedDuration(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        boolean issuccess = false;
        boolean masterConfigFlag = false;
        try {
            JSONArray storeArray = new JSONArray();
            String forMasterConfig = request.getParameter("forMasterConfig");
            if(!StringUtil.isNullOrEmpty(forMasterConfig)){
                masterConfigFlag = Boolean.parseBoolean(forMasterConfig);
            }
            if (masterConfigFlag) {
                storeArray = getCustomizedAgedDurationJsonForMasterConfig(request);
            } else {
                storeArray = getCustomizedAgedDurationJsonForCombo(request);
            }
            jobj.put(Constants.data, storeArray);
            issuccess = true;
        } catch (ServiceException |JSONException ex) {
            Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
            issuccess = false;
        }  catch (Exception e) {
            e.printStackTrace();
            issuccess = false;
        } finally {
            try {
                jobj.put("success", issuccess);
            } catch (JSONException ex) {
                Logger.getLogger(accInvoiceController.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return new ModelAndView(Constants.jsonView, "model", jobj.toString());
    } 
          
     public JSONArray getCustomizedAgedDurationJsonForCombo(HttpServletRequest request) throws ServiceException, JSONException, SessionExpiredException {
        JSONArray returnArray = new JSONArray();
        KwlReturnObject resultObject = null;
        int i=1;
        String companyId = sessionHandlerImpl.getCompanyid(request);
         if (!StringUtil.isNullOrEmpty(companyId)) {
             resultObject = accCustomerDAOobj.getCustomizedAgedDuration(companyId);
         }
        Iterator listIterator = resultObject.getEntityList().iterator();
        while (listIterator.hasNext()) {
            JSONObject jObj = new JSONObject();
            CustomizeAgedDuration agedDuration = (CustomizeAgedDuration) listIterator.next();
            String durationStr = "";
            if(agedDuration.getToDuration() == 1){
                durationStr = "Between "+agedDuration.getFromDuration() + " - " + agedDuration.getToDuration()+" day";
            }else{
                durationStr = "Between "+agedDuration.getFromDuration() + " - " + agedDuration.getToDuration()+" days";
            }
            String valueStr = agedDuration.getFromDuration()+"-"+agedDuration.getToDuration();
            jObj.put("id", agedDuration.getId());
            jObj.put("duration", durationStr);
            jObj.put("val", valueStr);
            jObj.put("dataindex", "amountdue"+i);
            i++;
            returnArray.put(jObj);
        }
        return returnArray;
    }
     
     public JSONArray getCustomizedAgedDurationJsonForMasterConfig(HttpServletRequest request) throws ServiceException, JSONException, SessionExpiredException {
        JSONArray returnArray = new JSONArray();
        String companyId = sessionHandlerImpl.getCompanyid(request);
        KwlReturnObject resultObject = null;
         if (!StringUtil.isNullOrEmpty(companyId)) {
             resultObject = accCustomerDAOobj.getCustomizedAgedDuration(companyId);
         }
        Iterator listIterator = resultObject.getEntityList().iterator();
        while (listIterator.hasNext()) {
            JSONObject jObj = new JSONObject();
            CustomizeAgedDuration agedDuration = (CustomizeAgedDuration) listIterator.next();
            jObj.put("id", agedDuration.getId());
            jObj.put("fromDuration", agedDuration.getFromDuration());
            jObj.put("toDuration", agedDuration.getToDuration());
            returnArray.put(jObj);
        }
        return returnArray;
    }
      
     public ModelAndView customizedAgedDuration(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        String msg = "";
        boolean issuccess = false;
    
        try {
            deleteCustomizedAgedDurationInterval(request);
            saveCustomizedAgedDurationInterval(request);
            issuccess = true;
            msg = messageSource.getMessage("acc.duration.updated", null, RequestContextUtils.getLocale(request));   //"Term has been Updated successfully";
        } catch (SessionExpiredException ex) {
            msg = ex.getMessage();
            ex.printStackTrace();
        } catch (Exception ex) {
            msg = "" + ex.getMessage();
            ex.printStackTrace();
        } finally {
            try {
                jobj.put("success", issuccess);
                jobj.put("msg", msg);
            } catch (JSONException ex) {
                ex.printStackTrace();
            }
        }
        return new ModelAndView(Constants.jsonView, "model", jobj.toString());
    }
     
     public void deleteCustomizedAgedDurationInterval(HttpServletRequest request) throws JSONException, SessionExpiredException, AccountingException {
        int delCount = 0;
        JSONArray jDelArr = new JSONArray(request.getParameter("deleteddata"));
        String companyId = sessionHandlerImpl.getCompanyid(request);
        KwlReturnObject resultObject;
        for (int i = 0; i < jDelArr.length(); i++) {
            JSONObject jobj = jDelArr.getJSONObject(i);
            String id = jobj.getString("id");
            String fromDur = jobj.getString("fromDuration");
            String toDur = jobj.getString("toDuration");
            try {
                if (!StringUtil.isNullOrEmpty(companyId) && !StringUtil.isNullOrEmpty(id)) {
                    resultObject = accCustomerDAOobj.deleteCustomizedAgedDuration(companyId, id);
                    delCount += resultObject.getRecordTotalCount();
                    auditTrailObj.insertAuditLog(AuditAction.CUSTOMIZE_AGED_DELETED, "User " + sessionHandlerImpl.getUserFullName(request) + " has deleted Customize Aged Summary Interval from "+fromDur+" days to "+toDur+" days", request,"1");
                }
            } catch (ServiceException ex) {
                throw new AccountingException(messageSource.getMessage("Duration is not deleted", null, RequestContextUtils.getLocale(request)));
            }
        }
    }
   
     public void saveCustomizedAgedDurationInterval(HttpServletRequest request) throws SessionExpiredException, ServiceException, JSONException {
        int fromDuration = 0;
        int toDuration = 0;
        JSONArray jArr = new JSONArray(request.getParameter(Constants.data));
        for (int i = 0; i < jArr.length(); i++) {
            JSONObject jobj = jArr.getJSONObject(i);
            if (jobj.getBoolean("modified") == false) {
                continue;
            }
            String fromDur = jobj.getString("fromDuration");
            String toDur = jobj.getString("toDuration");
            String id = jobj.getString("id");
            String companyid = sessionHandlerImpl.getCompanyid(request);
            if (!StringUtil.isNullOrEmpty(fromDur) && !StringUtil.isNullOrEmpty(toDur)) {
                fromDuration = Integer.parseInt(fromDur);
                toDuration = Integer.parseInt(toDur);
                String action="added";
                String auditaction=AuditAction.CUSTOMIZE_AGED_ADDED;
                if (!StringUtil.isNullOrEmpty(companyid)) {
                    if (StringUtil.isNullOrEmpty(id)) {
                        accCustomerDAOobj.saveCustomizedAgedDuration(companyid, fromDuration, toDuration);
                    } else {
                        accCustomerDAOobj.updateCustomizedAgedDuration(companyid, id, fromDuration, toDuration);
                        action="updated";
                        auditaction=AuditAction.CUSTOMIZE_AGED_UPDATED;
                    }
                    auditTrailObj.insertAuditLog(auditaction, "User " + sessionHandlerImpl.getUserFullName(request) + " has "+action+" Customize Aged Summary Interval from "+fromDur+" days to "+toDur+" days", request,id);
                }
            }
        }
    }

     public ModelAndView exportCustomerAgedReceivable(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        String view = "jsonView_ex";
        JSONObject mainJobj = new JSONObject();
        try{
            JSONArray invJArr = new JSONArray();
            /*
             getCustomerAgedReceivableMerged(HttpServletRequest request,boolean exportCustomerAged)
             exportCustomerAged- used to known call is for exportCustomerAgedReceivables
             */          
             String fileType = request.getParameter("filetype");
            if (fileType.equals("detailedXls")) {
                request.setAttribute("detailedXls", true);
            }
            int moduleIDForFetchingGroupingData = !StringUtil.isNullOrEmpty(request.getParameter("moduleIDForFetchingGroupingData")) ? Integer.parseInt(request.getParameter("moduleIDForFetchingGroupingData")) : 0;

            if (moduleIDForFetchingGroupingData == Constants.Acc_Customer_ModuleId) {
                mainJobj = accInvoiceServiceDAO.getCustomerAgedReceivableBasedOnCustomerDimensdion(request, false, true);
            } else if (Constants.moduleSetForAgedReceivable.contains(moduleIDForFetchingGroupingData)){
                mainJobj = accInvoiceServiceDAO.getCustomerAgedReceivableBasedOnDocumentsDimension(request, false, true);
            } else {
                mainJobj = accInvoiceServiceDAO.getCustomerAgedReceivableMerged(request, true, true);
            }
            invJArr=mainJobj.getJSONArray(Constants.data);
            jobj.put(Constants.data,invJArr);
            if (StringUtil.equal(fileType, "print")) {
                String startDate = request.getParameter("startdate");
                String endDate = request.getParameter("enddate");
                if (!StringUtil.isNullOrEmpty(startDate) && !StringUtil.isNullOrEmpty(endDate)) {
                    startDate = authHandler.getDateOnlyFormat().format(authHandler.getDateOnlyFormat().parse(startDate));
                    endDate = authHandler.getDateOnlyFormat().format(authHandler.getDateOnlyFormat().parse(endDate));
                    jobj.put("isFromToDateRequired", true);
                    jobj.put("stdate", startDate);
                    jobj.put("enddate", endDate);
                } else {
                    String GenerateDate = authHandler.getDateOnlyFormat().format(new Date());
                    jobj.put("GenerateDate", GenerateDate);
                }
                view = "jsonView-empty";
            }
            exportDaoObj.processRequest(request, response, jobj);
        } catch (SessionExpiredException ex) {
            Logger.getLogger(accInvoiceController.class.getName()).log(Level.SEVERE, null, ex);
        } catch(Exception ex) {
            Logger.getLogger(accInvoiceController.class.getName()).log(Level.SEVERE, null, ex);
        }
        return new ModelAndView(view, "model", jobj.toString());
    }
    private JSONArray Calculatesubtotalandtotal(HttpServletRequest request, JSONArray invJArr) {
        String fileType = request.getParameter("filetype");
        boolean isSummary = request.getParameter("isSummary") != null ? Boolean.parseBoolean(request.getParameter("isSummary")) : false;
        try {
            if ((StringUtil.equal(fileType, "csv") || StringUtil.equal(fileType, Constants.xls) || StringUtil.equal(fileType, "print"))) {
                if (isSummary) {
                    double total = 0;
                    for (int i = 0; i < invJArr.length(); i++) {
                        total = total + (Double) invJArr.getJSONObject(i).get("totalinbase");
                    }
                    JSONObject obj1 = new JSONObject();
                    obj1.put("totalinbase", total);
                    obj1.put("total", "Total");
                    invJArr.put(obj1);
                } else {
                    String sortKey = "type";
                    invJArr = AccountingManager.sortJsonArrayOnStringValues(invJArr,sortKey, true);
                    sortKey = "personname";
                    invJArr = AccountingManager.sortJsonArrayOnStringValues(invJArr,sortKey, true);
                    double customertotal = 0;
                    double total = 0;
                    String temp = "";
                    JSONArray array = new JSONArray();
                    for (int i = 0; i < invJArr.length(); i++) {
                        JSONObject jSONObject = invJArr.getJSONObject(i);
                        String id = jSONObject.getString("personid");
                        if (!StringUtil.isNullOrEmpty(temp)) {      // not first record
                            if (id.equalsIgnoreCase(temp)) {        // same vendor/customer 
                                customertotal = customertotal + jSONObject.getDouble("total");
                                array.put(jSONObject);
                            } else {        // customer sequence break
                                JSONObject jSONObject1 = new JSONObject();
                                jSONObject1.put("termname", "Subtotal");
                                jSONObject1.put("amountdueinbase", customertotal);
                                array.put(jSONObject1);             // put subtotal row 
                                customertotal = jSONObject.getDouble("total");
                                temp = jSONObject.getString("personid");
                                array.put(jSONObject);
                            }
                        } else {            // first object frm array
                            temp = jSONObject.getString("personid");
                            customertotal = customertotal + jSONObject.getDouble("total");
                            array.put(jSONObject);
                        }
                        if (i == invJArr.length() - 1) {       // put last record with its total
                            JSONObject jSONObject1 = new JSONObject();
                            jSONObject1.put("termname", "Subtotal");
                            jSONObject1.put("amountdueinbase", customertotal);
                            array.put(jSONObject1);             // put subtotal row 
                        }
                        total = total + jSONObject.getDouble("total");
                    }
                    JSONObject jSONObject2 = new JSONObject();
                    jSONObject2.put("termname", "Total");
                    jSONObject2.put("amountdueinbase", total);          // put final total
                    array.put(jSONObject2);
                    invJArr = array;
                }
            }
        } catch (Exception ex) {
            Logger.getLogger(accInvoiceController.class.getName()).log(Level.SEVERE, null, ex);
        }
        return invJArr;
    }
    public ModelAndView exportMonthlyCustomerAgedReceivable(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        String view = "jsonView_ex";
        try {
            JSONArray invJArr = new JSONArray();
            invJArr = accInvoiceServiceDAO.getMonthlyCustomerAgedReceivableMerged(request);
            invJArr = Calculatesubtotalandtotal(request, invJArr);  //Catculate total and subtotal for export csv/print/xls
            jobj.put(Constants.data, invJArr);
            String fileType = request.getParameter("filetype");
            if (StringUtil.equal(fileType, "csv") || StringUtil.equal(fileType, Constants.xls)) {
                exportDaoObj.processRequest(request, response, jobj);
            } else if (StringUtil.equal(fileType, "print")) {
                String GenerateDate = authHandler.getDateFormatter(request).format(new Date());
                jobj.put("GenerateDate", GenerateDate);
                view = "jsonView-empty";
                exportDaoObj.processRequest(request, response, jobj);
            } else {
                boolean isSummary = request.getParameter("isSummary") != null ? Boolean.parseBoolean(request.getParameter("isSummary")) : false;
                jobj.put("months", invJArr.getJSONObject(invJArr.length() - 1).getJSONArray("months"));
                if(isSummary){
                    accInvoiceServiceDAO.exportMonthlyAgedReceivableSummarized(request,response,jobj);
                }else{
                    accInvoiceServiceDAO.exportMonthlyAgedReceivableDetails(request,response,jobj);
                }
            }
        } catch (SessionExpiredException ex) {
            Logger.getLogger(accInvoiceController.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            Logger.getLogger(accInvoiceController.class.getName()).log(Level.SEVERE, null, ex);
        }
        return new ModelAndView(view, "model", jobj.toString());
    }

     public ModelAndView exportCustomizedCustomerAgedReceivable(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        String view = "jsonView_ex";
        JSONObject mainJobj = new JSONObject();
        try{
            JSONArray invJArr = new JSONArray();
            /*
             getCustomerAgedReceivableMerged(HttpServletRequest request,boolean exportCustomerAged)
             exportCustomerAged- used to known call is for exportCustomerAgedReceivables
             */
            mainJobj = accInvoiceServiceDAO.getCustomerAgedReceivableMerged(request,true,false);
            invJArr=mainJobj.getJSONArray(Constants.data);
            jobj.put(Constants.data,invJArr);
            String fileType = request.getParameter("filetype");
            if (StringUtil.equal(fileType, "print")) {
                String  GenerateDate = authHandler.getDateFormatter(request).format(new Date());
                jobj.put("GenerateDate", GenerateDate);
                view = "jsonView-empty";
            }
            exportDaoObj.processRequest(request, response, jobj);
        } catch (SessionExpiredException ex) {
            Logger.getLogger(accInvoiceController.class.getName()).log(Level.SEVERE, null, ex);
        } catch(Exception ex) {
            Logger.getLogger(accInvoiceController.class.getName()).log(Level.SEVERE, null, ex);
        }
        return new ModelAndView(view, "model", jobj.toString());
    }

    public ModelAndView exportInvoice(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        JSONArray DataJArr = new JSONArray();
        String view = "jsonView_ex";
        String companyid = "";
        try {
            HashMap requestParams = AccInvoiceServiceHandler.getInvoiceRequestMap(request);
            boolean consolidateFlag = request.getParameter("consolidateFlag") != null ? Boolean.parseBoolean(request.getParameter("consolidateFlag")) : false;
            String[] companyids = (consolidateFlag && request.getParameter(Constants.companyids) != null) ? request.getParameter(Constants.companyids).split(",") : sessionHandlerImpl.getCompanyid(request).split(",");
            String gcurrencyid = (consolidateFlag && request.getParameter(Constants.globalCurrencyKey) != null) ? request.getParameter(Constants.globalCurrencyKey) : sessionHandlerImpl.getCurrencyID(request);
            boolean ispendingAproval = !StringUtil.isNullOrEmpty(request.getParameter("ispendingapproval"))?Boolean.parseBoolean(request.getParameter("ispendingapproval")):false;
            boolean isAged = !StringUtil.isNullOrEmpty(request.getParameter("isAged"))?Boolean.parseBoolean(request.getParameter("isAged")):false;
            boolean custInvFlagForSalesPerson = !StringUtil.isNullOrEmpty(request.getParameter("salesPersonFilterFlag"))?Boolean.parseBoolean(request.getParameter("salesPersonFilterFlag")):false;
            boolean onlyAmountDue = StringUtil.isNullOrEmpty(request.getParameter("onlyamountdue"))?false:Boolean.parseBoolean(request.getParameter("onlyamountdue"));        
            boolean eliminateflag = consolidateFlag;
            boolean onlyOutstanding = false;
            boolean ispendingpayment=false;
            boolean isForTemplate=false;
            /*
             When check(Drop Down) to include child accounts is disabled then includeExcludeChildCombobox flag will be set as TRUE to include child accounts
             
              includeExcludeChildCombobox, if All = Include all child accounts while fetching parent account data
              includeExcludeChildCombobox, if TRUE = Include all child accounts while fetching parent account data
              includeExcludeChildCombobox, if FALSE = Exclude child acounts while fetching parent account data
             
             */
            boolean includeExcludeChildCmb;
            boolean isInvoiceOptimizeExport = true;
            if (request.getParameter("includeExcludeChildCmb") != null&&request.getParameter("includeExcludeChildCmb").toString().equals("All")) {
                includeExcludeChildCmb = true;
            } else {
                includeExcludeChildCmb = request.getParameter("includeExcludeChildCmb") != null ? Boolean.parseBoolean(request.getParameter("includeExcludeChildCmb")) : false;
            }
            
            if(!StringUtil.isNullOrEmpty(request.getParameter("isForTemplate"))){
                isForTemplate = Boolean.parseBoolean(request.getParameter("isForTemplate"));
            }
            if (!StringUtil.isNullOrEmpty(request.getParameter("onlyOutsatnding"))) {
                onlyOutstanding = Boolean.parseBoolean(request.getParameter("onlyOutsatnding"));
            }
            if (!StringUtil.isNullOrEmpty(request.getParameter("ispendingpayment"))) {
                ispendingpayment = Boolean.parseBoolean(request.getParameter("ispendingpayment"));
            }
            if (requestParams.containsKey("ss") && !StringUtil.isNullOrEmpty((String)requestParams.get("ss"))) {
                requestParams.put("ss", StringUtil.DecodeText(requestParams.get("ss").toString()));
            }
            ExtraCompanyPreferences extraPref = (ExtraCompanyPreferences) kwlCommonTablesDAOObj.getClassObject("com.krawler.common.admin.ExtraCompanyPreferences", sessionHandlerImpl.getCompanyid(request));
            if (extraPref != null && extraPref.isEnablesalespersonAgentFlow()) {
                int permCode = sessionHandlerImpl.getPerms(request, Constants.CUSTOMER_PERMCODE);
                if (!((permCode & Constants.CUSTOMER_VIEWALL_PERMCODE) == Constants.CUSTOMER_VIEWALL_PERMCODE)) {
                    /*
                     * when (permCode & Constants.CUSTOMER_VIEWALL_PERMCODE) == Constants.CUSTOMER_VIEWALL_PERMCODE is true then user has permission to view all customers documents,so at that time there is need to filter record according to user&salesperson. 
                     */
                    String userId = sessionHandlerImpl.getUserid(request);
                    requestParams.put(Constants.useridKey , userId);
                    requestParams.put("enablesalespersonagentflow", extraPref.isEnablesalespersonAgentFlow());
            
                    Map<String, Object> salesPersonParams = new HashMap<>();
                    salesPersonParams.put(Constants.useridKey , sessionHandlerImpl.getUserid(request));
                    salesPersonParams.put(Constants.companyKey, sessionHandlerImpl.getCompanyid(request));
                    salesPersonParams.put("grID", "15");
                    KwlReturnObject masterItemByUserList = accountingHandlerDAOobj.getMasterItemByUserID(salesPersonParams);
                    List<MasterItem> masterItems = masterItemByUserList.getEntityList();
                    String salesPersons = "";
                    StringBuffer salesPersonids = new StringBuffer();
                    for (Object obj : masterItems) {
                        if (obj != null) {
                            salesPersonids.append(obj.toString() + ",");
                        }
                    }
                    if (salesPersonids.length() > 0) {
                        salesPersons = salesPersonids.substring(0, (salesPersonids.length() - 1));
                        requestParams.put(InvoiceConstants.salesPersonid, salesPersons);
                    }
                }
            }
            boolean upsIntegrationFlag = false; //Flag to indicate whether or not UPS REST integration is enabled ERP-31339
            if (extraPref != null) {
                upsIntegrationFlag = extraPref.isUpsIntegration();
            }
            requestParams.put("upsIntegrationFlag", upsIntegrationFlag);
            String dir = "";
            String sort = "";
            if (!StringUtil.isNullOrEmpty(request.getParameter("dir")) && !StringUtil.isNullOrEmpty(request.getParameter("sort"))) {
                dir = request.getParameter("dir");
                sort = request.getParameter("sort");
                requestParams.put("sort", sort);
                requestParams.put("dir", dir);
            }
            boolean includeAllRec = !StringUtil.isNullOrEmpty(request.getParameter("includeAllRec")) ? Boolean.parseBoolean(request.getParameter("includeAllRec")) : false;
            requestParams.put("includeAllRec", includeAllRec);
            boolean onlyRecurredInvoices = request.getParameter("onlyRecurredInvoices")!=null?Boolean.parseBoolean(request.getParameter("onlyRecurredInvoices")):false;
            requestParams.put("onlyRecurredInvoices", onlyRecurredInvoices);
            boolean onlyNormalPendingInvoices = request.getParameter("onlyNormalPendingInvoices")!=null?Boolean.parseBoolean(request.getParameter("onlyNormalPendingInvoices")):false;
            requestParams.put("onlyNormalPendingInvoices", onlyNormalPendingInvoices);
            requestParams.put("ispendingAproval", ispendingAproval);
            request.setAttribute("moduleId", StringUtil.isNullOrEmpty(request.getParameter("moduleId"))?"0000":request.getParameter("moduleId"));
            boolean isBasedOnProduct = false;
            if (!StringUtil.isNullOrEmpty("isBasedOnProduct")) {
                isBasedOnProduct = Boolean.parseBoolean(request.getParameter("isBasedOnProduct"));
            }
            requestParams.put("customerBankAccountType", request.getParameter("customerBankAccountType"));
            if (!isAged) {
                requestParams.put("start", request.getParameter("start"));
                requestParams.put("limit", request.getParameter("limit"));
            }
            if (isAged) {
                requestParams.put("isAgedReceivables", true);
                request.setAttribute("isAged", true);
            }
            if (custInvFlagForSalesPerson) {
                requestParams.put("custInvFlagForSalesPerson", custInvFlagForSalesPerson);
            }
            boolean isUnpaidInvoiceReport = StringUtil.isNullOrEmpty(request.getParameter("isUnpaidInvoiceReport"))?false:Boolean.parseBoolean(request.getParameter("onlyamountdue"));        
            if(!StringUtil.isNullOrEmpty(request.getParameter("isUnpaidInvoiceReport"))){
                isUnpaidInvoiceReport = Boolean.parseBoolean(request.getParameter("isUnpaidInvoiceReport"));
            }  
            if (isBasedOnProduct) {
                JSONObject tempJobj = getInvoicesByProduct(request, true);
                DataJArr = tempJobj.getJSONArray(Constants.data);
            } else {
                request.setAttribute(Constants.isExport, true);
                request.setAttribute("isInvoiceOptimizeExport",isInvoiceOptimizeExport);
                for (int cnt = 0; cnt < companyids.length; cnt++) {
                    companyid = companyids[cnt];
                    request.setAttribute(Constants.companyKey, companyid);
                    request.setAttribute(Constants.globalCurrencyKey, gcurrencyid);
                    request.setAttribute("onlyOutstanding", onlyOutstanding);
                    request.setAttribute("onlyamountdue", onlyAmountDue );
                    requestParams.put(Constants.companyKey, companyid);
                    requestParams.put(Constants.globalCurrencyKey, gcurrencyid);
                    requestParams.put("custInvFlagForSalesPerson", true);   //To export no of records as per userid
                    requestParams.put("consolidateFlag", consolidateFlag);
                    requestParams.put("isForTemplate", isForTemplate);
                    requestParams.put("datefilter", request.getParameter("datefilter"));
                    requestParams.put("custVendorID", request.getParameter("custVendorID"));
                    requestParams.put("onlyOutsatnding", onlyOutstanding);
                    requestParams.put("ispendingpayment", ispendingpayment);
                    requestParams.put("isUnpaidInvoiceReport", isUnpaidInvoiceReport);
                    requestParams.put("isExport",request.getAttribute(Constants.isExport));
                    requestParams.put("includeExcludeChildCmb",includeExcludeChildCmb);
                    requestParams.put("isInvoiceOptimizeExport",isInvoiceOptimizeExport);                    
                    KwlReturnObject result = accInvoiceDAOobj.getInvoicesMerged(requestParams);
                    DataJArr = accInvoiceServiceDAO.getInvoiceJsonMerged(request, result.getEntityList(), DataJArr);
                }
                if (onlyOutstanding||ispendingpayment) {
                    JSONArray temp = new JSONArray();
                    for (int i = 0; i < DataJArr.length(); i++) {
                        if (DataJArr.getJSONObject(i).getDouble("amountdue") >= 1) {
                            temp.put(DataJArr.getJSONObject(i));
                        }
                    }
                    DataJArr = temp;
                }
            }
            companyid = sessionHandlerImpl.getCompanyid(request);
            if (request.getParameter("type") != null && request.getParameter("type").equals(Constants.detailedXls)) {
                requestParams.put("isInvoiceOptimizeExport",isInvoiceOptimizeExport);                
                DataJArr = getDetailExcelJsonInvoice(request, response, requestParams, DataJArr);
            }
            String fileType = request.getParameter("filetype");
            if (StringUtil.equal(fileType, "print")) {
                DataJArr = exportDaoObj.addTotalsForPrint(DataJArr, companyid);
            }
            jobj.put(Constants.data, DataJArr);
            if (StringUtil.equal(fileType, "print")) {
                String GenerateDate = authHandler.getDateFormatter(request).format(new Date());
                jobj.put("GenerateDate", GenerateDate);
                view = "jsonView-empty";
            }else if(fileType.equals(Constants.xls)){
             request.setAttribute("isSummaryXls", true);
            }
            exportDaoObj.processRequest(request, response, jobj);
        } catch (SessionExpiredException ex) {
            Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
        }
        return new ModelAndView(view, "model", jobj.toString());
    }
     public JSONArray getDetailExcelJsonInvoice(HttpServletRequest request, HttpServletResponse response, HashMap<String, Object> requestParams, JSONArray DataJArr) throws JSONException, SessionExpiredException, ServiceException, SessionExpiredException, SessionExpiredException,ParseException {
        boolean consolidateFlag = request.getParameter("consolidateFlag") != null ? Boolean.parseBoolean(request.getParameter("consolidateFlag")) : false;
        String[] companyids = (consolidateFlag && request.getParameter(Constants.companyids) != null) ? request.getParameter(Constants.companyids).split(",") : sessionHandlerImpl.getCompanyid(request).split(",");
        String gcurrencyid = (consolidateFlag && request.getParameter(Constants.globalCurrencyKey) != null) ? request.getParameter(Constants.globalCurrencyKey) : sessionHandlerImpl.getCurrencyID(request);
        String companyid = companyids[0];
        JSONObject paramJobj = StringUtil.convertRequestToJsonObject(request);
        paramJobj.put("isInvoiceOptimizeExport",request.getParameter("isInvoiceOptimizeExport") != null ? Boolean.parseBoolean(request.getParameter("isInvoiceOptimizeExport")) : false);
        paramJobj.put("companyid",companyid);
        paramJobj.put("gcurrencyid",gcurrencyid);
        
        JSONArray tempArray = accInvoiceServiceDAO.getDetailExcelJsonInvoice(paramJobj,requestParams,DataJArr);         
        return tempArray;
    }
    private void writeDataToFile(String filename, ByteArrayOutputStream baos, HttpServletResponse response) throws IOException {
        response.setHeader("Content-Disposition", "attachment; filename=\"" + filename + "\"");
        response.setContentType("application/octet-stream");
        response.setContentLength(baos.size());
        response.getOutputStream().write(baos.toByteArray());
        response.getOutputStream().flush();
        response.getOutputStream().close();
            }
            
    public ModelAndView exportSOA(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        JSONArray DataJArr = new JSONArray();
        String view = "jsonView_ex";
        try{
            HashMap requestParams = AccInvoiceServiceHandler.getInvoiceRequestMap(request);
            KwlReturnObject cap = kwlCommonTablesDAOObj.getObject(Company.class.getName(), sessionHandlerImpl.getCompanyid(request));
            Company com = (Company) cap.getEntityList().get(0);

            CompanyAccountPreferences companyAccountPreferences = (CompanyAccountPreferences) kwlCommonTablesDAOObj.getClassObject(CompanyAccountPreferences.class.getName(), sessionHandlerImpl.getCompanyid(request));
            boolean consolidateFlag = request.getParameter("consolidateFlag")!=null?Boolean.parseBoolean(request.getParameter("consolidateFlag")):false;            
            String[] companyids = (consolidateFlag && request.getParameter(Constants.companyids)!=null)?request.getParameter(Constants.companyids).split(","):sessionHandlerImpl.getCompanyid(request).split(",");
            String gcurrencyid = (consolidateFlag && request.getParameter(Constants.globalCurrencyKey)!=null)?request.getParameter(Constants.globalCurrencyKey):sessionHandlerImpl.getCurrencyID(request);            
            boolean eliminateflag = consolidateFlag;
            request.setAttribute("isSOA", true);
            requestParams.put("isSOA", true);
            String companyid = "";
            List<ByteArrayOutputStream> baosList=new ArrayList<ByteArrayOutputStream>();//SDP-170
            String customerIds=request.getParameter(InvoiceConstants.accid);
            if (customerIds == "") {               
                KwlReturnObject custresult = accCustomerDAOobj.getCustomerForAgedReceivable(requestParams);
                Iterator itrcust = custresult.getEntityList().iterator();            
                while (itrcust.hasNext()) {
                    Object custid = itrcust.next();
                    customerIds += custid.toString() + ",";
                }
                customerIds = customerIds.substring(0, customerIds.length() - 1);
            }         
            List<String> myList = new ArrayList<String>(Arrays.asList(customerIds.split(",")));
            
            for (int custlist = 0; custlist < myList.size(); custlist++) {
            DataJArr = new JSONArray();    
            for (int cnt = 0; cnt < companyids.length; cnt++) {
                companyid = companyids[cnt];
                request.setAttribute(Constants.companyKey, companyid);
                request.setAttribute(Constants.globalCurrencyKey, gcurrencyid);
                requestParams.put(Constants.companyKey, companyid);
                requestParams.put(Constants.globalCurrencyKey, gcurrencyid);
                requestParams.put(Constants.customerid, myList.get(custlist));
                requestParams.put(InvoiceConstants.accid, myList.get(custlist));  // Some Function used accid as a customer id /vendor id Ex. getCreditNoteMerged.getDebitNoteMerged ERP-19170
                KwlReturnObject result = accInvoiceDAOobj.getInvoicesMerged(requestParams);
                DataJArr = accInvoiceServiceDAO.getInvoiceJsonMerged(request, result.getEntityList(), DataJArr);
            }                  
            
            JSONArray OBJArryInvoice = new JSONArray();
            KwlReturnObject result = accInvoiceDAOobj.getOpeningBalanceInvoices(requestParams);
                OBJArryInvoice = AccInvoiceServiceHandler.getAgedOpeningBalanceInvoiceJson(requestParams, result.getEntityList(), OBJArryInvoice, accCurrencyDAOobj, accInvoiceCommon, request, accountingHandlerDAOobj,accAccountDAOobj,fieldDataManagercntrl,accJournalEntryobj);
            for (int i = 0; i < OBJArryInvoice.length(); i++) {
                DataJArr.put(OBJArryInvoice.get(i));
            }

            JSONArray OBJArryDebitNote = new JSONArray();
            result = accDebitNoteobj.getOpeningBalanceCustomerDNs(requestParams);
                OBJArryDebitNote = AccInvoiceServiceHandler.getAgedOpeningBalanceDebitNoteJson(requestParams, result.getEntityList(), OBJArryDebitNote, accCurrencyDAOobj, accReceiptDAOobj, request, accountingHandlerDAOobj,accAccountDAOobj,fieldDataManagercntrl,accJournalEntryobj,accCreditNoteDAOobj);
            for (int i = 0; i < OBJArryDebitNote.length(); i++) {
                DataJArr.put(OBJArryDebitNote.get(i));
            }

            JSONArray OBJArryCreditNote = new JSONArray();
            result = accCreditNoteDAOobj.getOpeningBalanceCNs(requestParams);
                OBJArryCreditNote = AccInvoiceServiceHandler.getAgedOpeningBalanceCreditNoteJson(requestParams, result.getEntityList(), OBJArryCreditNote, accCurrencyDAOobj, accPaymentDAOobj, request, accountingHandlerDAOobj, accCreditNoteDAOobj,accAccountDAOobj,fieldDataManagercntrl,accJournalEntryobj);
            for (int i = 0; i < OBJArryCreditNote.length(); i++) {
                DataJArr.put(OBJArryCreditNote.get(i));
            }

            JSONArray OBJArryPayment = new JSONArray();
            result = accReceiptDAOobj.getOpeningBalanceReceipts(requestParams);
                OBJArryPayment = AccInvoiceServiceHandler.getAgedOpeningBalanceReceiptJson(requestParams, result.getEntityList(), OBJArryPayment, accCurrencyDAOobj, accReceiptDAOobj, request, accountingHandlerDAOobj,accAccountDAOobj,fieldDataManagercntrl,accJournalEntryobj);
            for (int i = 0; i < OBJArryPayment.length(); i++) {
                DataJArr.put(OBJArryPayment.get(i));
            }

            JSONArray CreditNotejArr = new JSONArray();
            result = accCreditNoteDAOobj.getCreditNoteMerged(requestParams);
                CreditNotejArr = AccInvoiceServiceHandler.getCreditNotesMergedJson(requestParams, result.getEntityList(), CreditNotejArr, accountingHandlerDAOobj, authHandlerDAOObj, accCurrencyDAOobj, accPaymentDAOobj, request, accCreditNoteDAOobj,accAccountDAOobj,fieldDataManagercntrl,accJournalEntryobj);
            for (int i = 0; i < CreditNotejArr.length(); i++) {
                DataJArr.put(CreditNotejArr.get(i));
            }

            requestParams.put("cntype", 4);
            JSONArray DebitNotejArr = new JSONArray();//This is used for getting DN gainst vendor and otherwise 
            result = accDebitNoteobj.getDebitNoteMerged(requestParams);
                DebitNotejArr = AccInvoiceServiceHandler.getDebitNotesMergedJson(requestParams, result.getEntityList(), DebitNotejArr, accountingHandlerDAOobj, authHandlerDAOObj, accCurrencyDAOobj, accReceiptDAOobj, request,accAccountDAOobj,fieldDataManagercntrl,accJournalEntryobj,accCreditNoteDAOobj);
            for (int i = 0; i < DebitNotejArr.length(); i++) {
                DataJArr.put(DebitNotejArr.get(i));
            }
            requestParams.remove("cntype");// Above Set the cntype value is used in debite note so remove.  ERP-19170
                
                //requestParams.put("isadvancepayment", true);//Only Advance payment type make payments required. so it is true 
                JSONArray receivePaymentJArr = new JSONArray();
                requestParams.put("allAdvPayment", true); // needs only advance type record so that putted true
                requestParams.put("paymentWindowType", 1);//Receipt to Customer record
                result = accReceiptDAOobj.getReceipts(requestParams);
                receivePaymentJArr = AccInvoiceServiceHandler.getReceiptsJson(requestParams, result.getEntityList(), receivePaymentJArr, accountingHandlerDAOobj, authHandlerDAOObj, accCurrencyDAOobj, accReceiptDAOobj, request, accAccountDAOobj, fieldDataManagercntrl, accJournalEntryobj);
                for (int i = 0; i < receivePaymentJArr.length(); i++) {
                    DataJArr.put(receivePaymentJArr.get(i));
                }
                JSONArray makePaymentJArr = new JSONArray();
                requestParams.put("allAdvPayment", true); // needs only refund type record so that putted true
                requestParams.put("paymentWindowType", 2);//Payment to Customer record
                result = accVendorPaymentobj.getPayments(requestParams);
                companyid = sessionHandlerImpl.getCompanyid(request);
                requestParams.put("companyid", companyid);
                if (result != null && result.getEntityList() != null && !result.getEntityList().isEmpty()) {
                    makePaymentJArr = accGoodsReceiptServiceHandler.getPaymentsJson(requestParams, result.getEntityList(), makePaymentJArr, accCurrencyDAOobj, accountingHandlerDAOobj, accVendorPaymentobj);
                    for (int i = 0; i < makePaymentJArr.length(); i++) {
                        DataJArr.put(makePaymentJArr.get(i));
                    }
                }
                requestParams.remove("allAdvPayment");
                requestParams.remove("paymentWindowType");
            //  Prepare JSON array to generate PDF in standard SOA format
            for (int cnt = 0; cnt < DataJArr.length(); cnt++) {
                JSONObject tempObj = DataJArr.getJSONObject(cnt);
                double amountdueinbase = tempObj.getDouble("amountdueinbase");
                double amountdueinbase1 = 0, amountdueinbase2 = 0, amountdueinbase3 = 0, amountdueinbase4 = 0,amountdueinbase5 = 0, amountdueinbase6 = 0, amountdueinbase7 = 0, amountdueinbase8 = 0, amountdueinbase9 = 0, amountdueinbase10 = 0, amountdueinbase11 = 0;

                if (tempObj.optDouble("amountdue1", 0) != 0) {//current 
                    amountdueinbase1 = amountdueinbase;
                } else if (tempObj.optDouble("amountdue2", 0) != 0) {//1-30 
                    amountdueinbase2 = amountdueinbase;
                } else if (tempObj.optDouble("amountdue3", 0) != 0) {//31-60
                    amountdueinbase3 = amountdueinbase;
                } else if (tempObj.optDouble("amountdue4", 0) != 0) {//61-90 
                    amountdueinbase4 = amountdueinbase;
                } else if (tempObj.optDouble("amountdue5", 0) != 0) {//91-120 
                    amountdueinbase5 = amountdueinbase;
                } else if (tempObj.optDouble("amountdue6", 0) != 0) {//121-150 
                    amountdueinbase6 = amountdueinbase;
                } else if (tempObj.optDouble("amountdue7", 0) != 0) {//151-180 
                    amountdueinbase7 = amountdueinbase;
                } else if (tempObj.optDouble("amountdue8", 0) != 0) {//181-210
                    amountdueinbase8 = amountdueinbase;
                }else if (tempObj.optDouble("amountdue9", 0) != 0) {//211-240
                    amountdueinbase9 = amountdueinbase;
                }else if (tempObj.optDouble("amountdue10", 0) != 0) {//241-270
                    amountdueinbase10 = amountdueinbase;
                }else if (tempObj.optDouble("amountdue11", 0) != 0) {//271
                    amountdueinbase11 = amountdueinbase;
                }
                DataJArr.getJSONObject(cnt).put("amountdueinbase1", amountdueinbase1);
                DataJArr.getJSONObject(cnt).put("amountdueinbase2", amountdueinbase2);
                DataJArr.getJSONObject(cnt).put("amountdueinbase3", amountdueinbase3);
                DataJArr.getJSONObject(cnt).put("amountdueinbase4", amountdueinbase4);
                DataJArr.getJSONObject(cnt).put("amountdueinbase5", amountdueinbase5);
                DataJArr.getJSONObject(cnt).put("amountdueinbase6", amountdueinbase6);
                DataJArr.getJSONObject(cnt).put("amountdueinbase7", amountdueinbase7);
                DataJArr.getJSONObject(cnt).put("amountdueinbase8", amountdueinbase8);
                DataJArr.getJSONObject(cnt).put("amountdueinbase9", amountdueinbase5 + amountdueinbase6 + amountdueinbase7 + amountdueinbase8 + amountdueinbase9 + amountdueinbase10 + amountdueinbase11);
            }
            
            jobj.put(Constants.data, DataJArr);
            String fileType = request.getParameter("filetype");
            if (StringUtil.equal(fileType, "print")) {
                    String GenerateDate = authHandler.getDateFormatter(request).format(new Date());
                jobj.put("GenerateDate", GenerateDate);
                view = "jsonView-empty";
            }
            Projreport_Template defaultTemplate = (Projreport_Template) kwlCommonTablesDAOObj.getClassObject(Projreport_Template.class.getName(), Constants.HEADER_IMAGE_TEMPLATE_ID);
            DateFormat formatter = authHandlerDAOObj.getUserDateFormatter(sessionHandlerImpl.getDateFormatID(request), sessionHandlerImpl.getTimeZoneDifference(request), true);
            String logoPath = ProfileImageServlet.getProfileImagePath(request, true, null);
            
            ExportInvoiceHandler exportInvHandler = new ExportInvoiceHandler();
                ByteArrayOutputStream baos = exportInvHandler.createPdf(request, DataJArr, com, formatter, logoPath, companyAccountPreferences, defaultTemplate);
                baosList.add(baos);
            }
            if(baosList.size()>1){//SDP-170
                ExportrecordObj.concatPDFs(baosList, "SOA.pdf", response);
            }else{
               writeDataToFile("SOA.pdf", baosList.get(0), response);
            }
            
        } catch(Exception ex) {
            Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
        }
        return new ModelAndView(view, "model", jobj.toString());
    }
    
    public ModelAndView getAgedReceivableBarChart(HttpServletRequest request, HttpServletResponse response) {
        JSONArray jarr = new JSONArray();
        JSONObject result = new JSONObject();
        try {
            JSONArray jArr = new JSONArray();
            String companyid = sessionHandlerImpl.getCompanyid(request);
            jarr = getMonthWiseReceivable(request);
            double amountreceived = 0;
            double amountdue = 0;
            for (int j = 0; j < jarr.length(); j++) {
                JSONObject temp = new JSONObject();
                amountreceived = Double.valueOf(authHandler.formattedAmount(jarr.optJSONObject(j).optDouble("amountreceived"), companyid));
                amountdue = Double.valueOf(authHandler.formattedAmount(jarr.optJSONObject(j).optDouble("amountdue"), companyid));
                
                temp.put("monthname", jarr.optJSONObject(j).get("monthname"));
                temp.put("amountreceived", amountreceived);
                temp.put("amountdue", amountdue);
                jArr.put(temp);
            }
            result.put(Constants.data, jArr);
        } catch (ServiceException ex) {
            Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SessionExpiredException ex) {
            Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
        } catch (JSONException ex) {
            Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
        }
        return new ModelAndView(JSONVIEW, MODEL, result.toString());
    }

    public JSONArray getMonthWiseReceivable(HttpServletRequest request) throws ServiceException, SessionExpiredException{
        JSONObject jobj;
        HashMap requestParams = AccInvoiceServiceHandler.getInvoiceRequestMap(request);
        KwlReturnObject result = accInvoiceDAOobj.getInvoices(requestParams);
        List list = result.getEntityList();
        jobj = getInvoiceJson(request, list);

        JSONArray finalJArr=new JSONArray();
        try {
            KwlReturnObject cap = kwlCommonTablesDAOObj.getObject(CompanyAccountPreferences.class.getName(), sessionHandlerImpl.getCompanyid(request));
             CompanyAccountPreferences pref = (CompanyAccountPreferences) cap.getEntityList().get(0);
            Calendar cal = Calendar.getInstance();
            cal.set(Calendar.DAY_OF_MONTH, 1);
            Calendar startFinYearCal = Calendar.getInstance();
            Calendar endFinYearCal = Calendar.getInstance();

            DateFormat sdf= new SimpleDateFormat("MMM");
            startFinYearCal.setTime(pref.getFinancialYearFrom());
            endFinYearCal.setTime(pref.getFinancialYearFrom());
            endFinYearCal.add(Calendar.YEAR,1);
            
            String endFinYearCalString = authHandler.getDateOnlyFormat().format(endFinYearCal.getTime());
            Date endFinYearCalDate = authHandler.getDateOnlyFormat().parse(endFinYearCalString);
            int checkMonth=0;
            JSONArray jArr = jobj.getJSONArray(Constants.data);


            for(int i=startFinYearCal.get(Calendar.MONTH);i<12;i++){
                JSONObject finalObj=new JSONObject();
                finalObj.put("month", i);
                cal.set(Calendar.MONTH, i);
                finalObj.put("monthname", sdf.format(cal.getTime()));
                finalObj.put("totalamount", 0);
                finalObj.put("amountreceived", 0);
                finalObj.put("amountdue", 0);
                finalJArr.put(finalObj);
            }
            for(int i=0;i<startFinYearCal.get(Calendar.MONTH);i++){
                JSONObject finalObj=new JSONObject();
                finalObj.put("month", i);
                cal.set(Calendar.MONTH, i);
                finalObj.put("monthname", sdf.format(cal.getTime()));
                finalObj.put("totalamount", 0);
                finalObj.put("amountreceived", 0);
                finalObj.put("amountdue", 0);
                finalJArr.put(finalObj);
            }
            for (int i = 0; i < jArr.length(); i++) {
                JSONObject obj = jArr.getJSONObject(i);
                Date dueDate=authHandler.getDateOnlyFormat().parse(obj.getString("duedate"));
                cal.setTime(dueDate);
                if (dueDate.after(pref.getBookBeginningFrom()) && dueDate.before(endFinYearCalDate)){
                    checkMonth = cal.get(Calendar.MONTH);
                    int month=(checkMonth-startFinYearCal.get(Calendar.MONTH))>0?checkMonth-startFinYearCal.get(Calendar.MONTH):startFinYearCal.get(Calendar.MONTH)-checkMonth;
                    JSONObject finalObj=finalJArr.optJSONObject(month);
                    double tamount=obj.getDouble("amountinbase");
                    double damount=obj.getDouble("amountdueinbase");
                    finalObj.put("totalamount", finalObj.getDouble("totalamount")+tamount);
                    finalObj.put("amountdue", finalObj.getDouble("amountdue")+damount);
                    finalObj.put("amountreceived", finalObj.getDouble("amountreceived")+tamount-damount);
                }
            }
            jobj.put(Constants.data, finalJArr);
        } catch (ParseException ex) {
            throw ServiceException.FAILURE("getMonthWiseReceivable : "+ex.getMessage(), ex);
        } catch (JSONException ex) {
            throw ServiceException.FAILURE("getMonthWiseReceivable : "+ex.getMessage(), ex);
        }
            return finalJArr;
    }
    
    public ModelAndView getAgedReceivablePieChart(HttpServletRequest request, HttpServletResponse response) throws ServiceException, SessionExpiredException {
        JSONObject result = new JSONObject();
        ArrayList arr = new ArrayList();
             boolean flag=true;
        try {
            JSONObject jObjX = null;
            HashMap<String,Double> map = new HashMap<String,Double>();
            HashMap<String,String> personnameMap = new HashMap<String,String>();
            String companyid = sessionHandlerImpl.getCompanyid(request);
            HashMap requestParams = AccInvoiceServiceHandler.getInvoiceRequestMap(request);
            KwlReturnObject resultObj = accInvoiceDAOobj.getInvoices(requestParams);
            jObjX = getInvoiceJson(request, resultObj.getEntityList());
            JSONArray jarr = jObjX.getJSONArray(Constants.data);
             String personname="";
             double amountdue=0;
             for (int j = 0; j < jarr.length(); j++) {
                flag=true;
                String personid = jarr.getJSONObject(j).getString("personid");
                for (int i=0;i<arr.size();i++) {
                    if(arr.get(i).equals(personid)){
                        flag=false;
                        break;
                    }
                }
                if(flag){
                    amountdue=0;
                    for(int k = 0;k < jarr.length();k++){
                         if(personid.equals(jarr.getJSONObject(k).getString("personid")))
                             amountdue+=jarr.getJSONObject(k).getDouble("amountdueinbase");
                    }
                    arr.add(personid);
                    amountdue= Double.valueOf(authHandler.formattedAmount(amountdue, companyid));
                    if (amountdue>0) {
                        personname= jarr.getJSONObject(j).getString("personname");
                        map.put(personid, amountdue);
                        personnameMap.put(personid, personname);
                    }
                }
             }
             
            HashMap sorted_map = StringUtil.sortHashMapByValuesD(map);
            int custCnt = 0;
            double othersAmtDue = 0;
            JSONArray jArr = new JSONArray();
            Iterator it = sorted_map.keySet().iterator();
            while(it.hasNext()) {
                Object key = it.next();
                if(custCnt < 10) {
                    JSONObject temp = new JSONObject();
                    temp.put("customername", personnameMap.get(key));
                    double totalinbase = Double.parseDouble(sorted_map.get(key).toString());
                    if(totalinbase <= 0){
                        break;
                    }
                    temp.put("total", totalinbase);
                    jArr.put(temp);
                } else {
                    othersAmtDue += Double.parseDouble(sorted_map.get(key).toString());
                }
                custCnt++;
            }
            if(othersAmtDue > 0) {
                JSONObject temp = new JSONObject();
                temp.put("customername", "Others");
                othersAmtDue = Double.valueOf(authHandler.formattedAmount(othersAmtDue, companyid));
                temp.put("total", othersAmtDue);
                jArr.put(temp);
            }
            result.put(Constants.data, jArr);
        } catch (Exception ex) {
            Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
        }
        return new ModelAndView(JSONVIEW, MODEL, result.toString());
    }
    
    public ModelAndView attachDocuments(HttpServletRequest request, HttpServletResponse response) {
        String msg = "";
        Boolean success = false;
        JSONObject jobj = new JSONObject();
        DefaultTransactionDefinition def = new DefaultTransactionDefinition();
        def.setName("CF_Tx");
        def.setPropagationBehavior(TransactionDefinition.PROPAGATION_REQUIRED);
        List<String> doclist=null;
        TransactionStatus status = txnManager.getTransaction(def);
        try {
            doclist= uploadDoc(request);
            success = true;
            msg = messageSource.getMessage("acc.invoiceList.bt.fileUploadedSuccess", null, RequestContextUtils.getLocale(request));
            txnManager.commit(status);
        } catch (ServiceException ex) {
            success = false;
            msg = ex.getMessage();
            txnManager.rollback(status);
            Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, "saveUsers", ex);
        } catch (Exception ex) {
            msg = "" + ex.getMessage();
            success = false;
            txnManager.rollback(status);
            Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, "saveUsers", ex);
        } finally {
            try {
                jobj.put("success", success);
                jobj.put("msg", msg);
                jobj.put("docid", doclist.get(0));
                jobj.put("name", doclist.get(1));
                jobj.put("documentid", doclist.get(2));
            } catch (com.krawler.utils.json.base.JSONException ex) {
                Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return new ModelAndView("jsonView_ex", "model", jobj.toString());
    }

    public List uploadDoc(HttpServletRequest request) throws ServiceException, AccountingException {
        List<String> docdetail=new ArrayList<String>();
        try {
            String result = "";
            Boolean fileflag = false;
            String fileName = "";
            boolean isUploaded;
            String Ext;
            final String sep = StorageHandler.GetFileSeparator();
            DiskFileUpload fu = new DiskFileUpload();
            java.util.List fileItems = null;
            FileItem fi = null;
            String companyid = sessionHandlerImpl.getCompanyid(request);
            String filename = "";
            InvoiceDocuments doc=null;
            try {
                fileItems = fu.parseRequest(request);
            } catch (FileUploadException e) {
                throw ServiceException.FAILURE("ProfileHandler.updateProfile", e);
            }
            java.util.HashMap arrParam = new java.util.HashMap();
            for (java.util.Iterator k = fileItems.iterator(); k.hasNext();) {
                fi = (FileItem) k.next();
                arrParam.put(fi.getFieldName(), fi.getString());
                if (!fi.isFormField()) {
                    if (fi.getSize() != 0) {
                        fileflag = true;
                        fileName = new String(fi.getName().getBytes());
                    } else {
                        throw new AccountingException("File not uploaded! File should not be empty.");    //When file is empty
                    }
                }
            }
              int moduleid =   !(StringUtil.isNullOrEmpty((String) arrParam.get("moduleid")))? Integer.parseInt((String)arrParam.get("moduleid")):0;

            if (fileflag) {
                try {
                    String storePath = "";
                    /* Contract Documnet is uploaded on shared path(For ERP & CRM)*/
                    if (moduleid == Constants.Acc_Lease_Contract) {
                        KwlReturnObject extracapresult = accountingHandlerDAOobj.getObject(ExtraCompanyPreferences.class.getName(), companyid);
                        ExtraCompanyPreferences extraCompanyPreferences = (ExtraCompanyPreferences) extracapresult.getEntityList().get(0);
                        if (extraCompanyPreferences.isActivateCRMIntegration()) {
                            storePath = StorageHandler.GetSharedDocStorePath();
                        } else {
                            storePath = StorageHandler.GetDocStorePath();
                        }

                    } else {
                        storePath = StorageHandler.GetDocStorePath();
                    }
                   
                    File destDir = new File(storePath);
                    if (!destDir.exists()) {
                        destDir.mkdirs();
                    }
                    int doccount = 0;
                    fu = new DiskFileUpload();
                    fu.setSizeMax(-1);
                    fu.setSizeThreshold(4096);
                    fu.setRepositoryPath(storePath);
                    String transactionid="";
                    for (Iterator i = fileItems.iterator(); i.hasNext();) {
                        fi = (FileItem) i.next();
                        if (!fi.isFormField() && fi.getSize() != 0 && doccount < 3) {
                            Ext = "";
                            doccount++;//ie 8 fourth file gets attached				
                            filename = UUID.randomUUID().toString();
                            try {
                                fileName = new String(fi.getName().getBytes(), "UTF8");
                                if (fileName.contains(".")) {
                                    Ext = fileName.substring(fileName.lastIndexOf("."));
                                }
                                if (fi.getSize() != 0) {
                                    isUploaded = true;
                                    File uploadFile = new File(storePath + sep
                                            + filename + Ext);
                                    fi.write(uploadFile);

                                    InvoiceDocuments document=new InvoiceDocuments();
                                    document.setDocID(filename);
                                    document.setDocName(fileName);
                                    document.setDocType("");
                                    
                                    InvoiceDocumentCompMap invoiceDocumentMap=new InvoiceDocumentCompMap();
                                    invoiceDocumentMap.setDocument(document);                                    
                                    KwlReturnObject cmp = accountingHandlerDAOobj.getObject(Company.class.getName(), companyid);
                                    Company company = (Company) cmp.getEntityList().get(0);
                                    invoiceDocumentMap.setCompany(company);
                                    
                                    if(!StringUtil.isNullOrEmpty(arrParam.get("invoiceid").toString())){
                                        invoiceDocumentMap.setInvoiceID(arrParam.get("invoiceid").toString());                                    
                                    }
                                    else{
                                           transactionid = UUID.randomUUID().toString();
                                           invoiceDocumentMap.setInvoiceID(transactionid);
                                    }
                                    HashMap<String,Object> hashMap=new HashMap<String, Object>();
                                    hashMap.put("InvoceDocument",document);
                                    hashMap.put("InvoiceDocumentMapping",invoiceDocumentMap);
                                    KwlReturnObject docresult = accInvoiceDAOobj.saveinvoiceDocuments(hashMap);
                                    doc = (InvoiceDocuments) docresult.getEntityList().get(0);
                                } else {
                                    isUploaded = false;
                                }
                            } catch (Exception e) {
                                Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, e);
                                throw ServiceException.FAILURE("accInvoiceControllerCMN.uploadDoc", e);
                            }
                        }
                    }          
                    docdetail.add(filename);
                    docdetail.add(fileName);
                    docdetail.add(doc.getID());
                } catch (Exception ex) {
                    Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
                    throw ServiceException.FAILURE("accInvoiceControllerCMN.uploadDoc", ex);
                }
            }           
        } catch(AccountingException ae){
            throw new AccountingException("File not uploaded! File should not be empty.");
        } catch (Exception ex) {
            Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
            throw ServiceException.FAILURE("accInvoiceControllerCMN.uploadDoc", ex);
        }
        return docdetail;
    } 
    
    public ModelAndView getAttachDocuments(HttpServletRequest request, HttpServletResponse response) {
        String msg = "";
        Boolean success = false;
        JSONObject jobj = new JSONObject();              
        JSONArray jSONArray=new JSONArray();
        JSONObject finalJSONObject=new JSONObject();
        int count=0;
        try {
            String companyid = sessionHandlerImpl.getCompanyid(request);
            String invoiceID=request.getParameter("id");
            String attachmentIds=request.getParameter("attachmentIds");
            String start=request.getParameter("start");
            String limit=request.getParameter("limit");
            HashMap<String,Object> hashMap=new HashMap<String, Object>();
            if (!StringUtil.isNullOrEmpty(invoiceID)) {
                hashMap.put("invoiceID", invoiceID);
            }
            /**
             * Document ids from JS side
             */
            if(!StringUtil.isNullOrEmpty(attachmentIds)){
                hashMap.put("docid",attachmentIds);
            }
            hashMap.put(Constants.companyKey,companyid);
            hashMap.put("start",start);
            hashMap.put("limit",limit);
            KwlReturnObject object=accInvoiceDAOobj.getinvoiceDocuments(hashMap);
            
            Iterator iterator=object.getEntityList().iterator();
            while (iterator.hasNext()) {
                Object[] obj=(Object[])iterator.next();
                JSONObject jSONObject=new JSONObject();                                
                jSONObject.put("docname", obj[0]);
                jSONObject.put("doctypeid", obj[1]);
                jSONObject.put("docid", obj[2]);
                jSONObject.put("crmdocumentid", obj[3]!=null ? obj[3] : "");   /*Crm Document id from JS side*/  
                jSONArray.put(jSONObject);                                                
                count++;
            }
            
            finalJSONObject.put("count", count);
            finalJSONObject.put(Constants.data,jSONArray);
            success = true;            
        } catch (ServiceException ex) {
            success = false;
            msg = ex.getMessage();            
            Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, "saveUsers", ex);
        } catch (Exception ex) {
            msg = "" + ex.getMessage();
            success = false;            
            Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, "saveUsers", ex);
        } finally {
            try {                
                jobj.put(Constants.data, finalJSONObject);
                jobj.put("valid", success);
            } catch (com.krawler.utils.json.base.JSONException ex) {
                Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return new ModelAndView("jsonView_ex", "model", jobj.toString());
    }
        public ModelAndView deleteDocument(HttpServletRequest request, HttpServletResponse response) {
        String msg = "";
        String docID="";
        Boolean success = false;
        JSONObject jobj = new JSONObject();
        DefaultTransactionDefinition def = new DefaultTransactionDefinition();
        def.setName("CF_Tx");
        def.setPropagationBehavior(TransactionDefinition.PROPAGATION_REQUIRED);

        TransactionStatus status = txnManager.getTransaction(def);
        try {
            docID=request.getParameter("docid");
            if(!StringUtil.isNullOrEmpty(docID)){
                KwlReturnObject object=accInvoiceDAOobj.deleteinvoiceDocument(docID);
                success = true;
                msg = object.getMsg();
                if(object.getEntityList()!=null && object.getEntityList().size()>0){
                    List<InvoiceDocuments> docList=object.getEntityList();
                    for(InvoiceDocuments obj: docList){
                        docID=obj.getID();
                    }
                    
                }
                txnManager.commit(status);
            }                        
        } catch (ServiceException ex) {
            success = false;
            msg = ex.getMessage();
            txnManager.rollback(status);
            Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, "saveUsers", ex);
        } catch (Exception ex) {
            msg = "" + ex.getMessage();
            success = false;
            txnManager.rollback(status);
            Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, "saveUsers", ex);
        } finally {
            try {
                
                JSONObject jobj1 = new JSONObject();
                jobj1.put("msg", msg);
                jobj1.put("docid", docID);
                jobj1.put("success", success);
                jobj.append(Constants.data, jobj1);
                jobj.put("valid", true);
            } catch (com.krawler.utils.json.base.JSONException ex) {
                Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return new ModelAndView("jsonView_ex", "model", jobj.toString());
    }
        /**
         *This method is to remove attached document from Upload Files Window.
         * ERM-211
         */
        public ModelAndView deleteAttachedDocument(HttpServletRequest request, HttpServletResponse response) {
        String msg = "";
        String docID ="";
        Boolean success = false;
        JSONObject jobj = new JSONObject();
        JSONObject jobj1 = new JSONObject();
        DefaultTransactionDefinition def = new DefaultTransactionDefinition();
        def.setName("CF_Tx");
        def.setPropagationBehavior(TransactionDefinition.PROPAGATION_REQUIRED);

        TransactionStatus status = txnManager.getTransaction(def);
        try {
            JSONObject requestParams = StringUtil.convertRequestToJsonObject(request);
            docID = requestParams.optString("docid", "");
            String docRefId = requestParams.optString("docRefId", "");
            if(!StringUtil.isNullOrEmpty(docID)){
                /**
                 *Deleting permanent or temporary documents by passing docid.
                 * docid is uuid of that document which we are deleting.
                 */
                KwlReturnObject object=accInvoiceDAOobj.deleteTemporaryAndPermanentInvoiceDocument(requestParams);
                if (object.getMsg().equalsIgnoreCase("Document has been deleted successfully.")) {
                    success = true;
                    msg = object.getMsg();
                    /**
                     *Passing docRefId in response after successful deletion.
                     */
                    jobj1.put("docRefId", docRefId);
                    txnManager.commit(status);
                }
            }                        
        } catch (ServiceException ex) {
            success = false;
            msg = ex.getMessage();
            txnManager.rollback(status);
            Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, "saveUsers", ex);
        } catch (Exception ex) {
            msg = "" + ex.getMessage();
            success = false;
            txnManager.rollback(status);
            Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, "saveUsers", ex);
        } finally {
            try {
                jobj1.put("msg", msg);
                jobj1.put("success", success);
                jobj1.put("docid", docID);
                jobj.append(Constants.data, jobj1);
                jobj.put("valid", true);
            } catch (com.krawler.utils.json.base.JSONException ex) {
                Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return new ModelAndView("jsonView_ex", "model", jobj.toString());
    }
        /**
         *This method is used to save already attached documents in new document.
         * Called From Invoice.js and DeliveryOrder.js 
         * ERM-211
         */
        public ModelAndView saveAttachedDocumentInCopyCase(HttpServletRequest request, HttpServletResponse response) {
        String msg = "";
        Boolean success = false;
        JSONObject responseJobj = new JSONObject();
        JSONObject jobj = new JSONObject();
        DefaultTransactionDefinition def = new DefaultTransactionDefinition();
        def.setName("CF_Tx");
        def.setPropagationBehavior(TransactionDefinition.PROPAGATION_REQUIRED);
        TransactionStatus status = txnManager.getTransaction(def);
        try {
            Map<String, Object> fileMap = new HashMap<>();
            String transactionID = request.getParameter("transactionID");
            String companyId = sessionHandlerImpl.getCompanyid(request);
            String savedFilesMappingId = "", fileids = "";
            if (!StringUtil.isNullOrEmpty(transactionID) && !StringUtil.isNullOrEmpty(companyId)) {
                /**
                 *Getting attached document details.
                 */
                KwlReturnObject object = accInvoiceDAOobj.getAttachedDocumentDetailsFromTransactionId(transactionID, companyId);
                Iterator itrDocList = object.getEntityList().iterator();
                while (itrDocList.hasNext()) {
                    String documentID = (String) itrDocList.next();
                    if (!StringUtil.isNullOrEmpty(documentID)) {
                        if (StringUtil.isNullOrEmpty(savedFilesMappingId)) {
                            savedFilesMappingId = UUID.randomUUID().toString();
                        }
                        fileMap.put("id", savedFilesMappingId);
                        fileMap.put("companyid", companyId);
                        fileMap.put("documentid", documentID);
                        fileids += documentID + ",";
                        accLoanDAOobj.saveFileMapping(fileMap);
                    }
                }
                jobj.put("savedFilesMappingId", savedFilesMappingId);
                jobj.put("fileids", fileids.length() > 0 ? fileids.substring(0, fileids.length() - 1) : "");
                success = true;
                msg = object.getMsg();
                txnManager.commit(status);
            }
        } catch (ServiceException ex) {
            success = false;
            msg = ex.getMessage();
            txnManager.rollback(status);
            Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, "saveUsers", ex);
        } catch (Exception ex) {
            msg = "" + ex.getMessage();
            success = false;
            txnManager.rollback(status);
            Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, "saveUsers", ex);
        } finally {
            try {
                jobj.put("msg", msg);
                jobj.put("success", success);
                responseJobj.append(Constants.data, jobj);
                responseJobj.put("valid", true);
            } catch (com.krawler.utils.json.base.JSONException ex) {
                Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return new ModelAndView("jsonView_ex", "model", responseJobj.toString());
    }
       
    public ByteArrayOutputStream getBaosoFjasperReport(HttpServletRequest request, HttpServletResponse response ) throws Exception {
        ByteArrayOutputStream baos = null;
        if (!StringUtil.isNullOrEmpty(request.getParameter(Constants.moduleid))) {
            JSONObject paramJobj = StringUtil.convertRequestToJsonObject(request);
             paramJobj.put(Constants.JRXML_REAL_PATH_KEY, request.getSession().getServletContext().getRealPath("jrxml"));
            int moduleid = Integer.parseInt(request.getParameter(Constants.moduleid));
            JasperPrint jasperPrint = null;
            if (moduleid == 60) {//for customer account statement
                jasperPrint = accExportReportsServiceDAOobj.exportCustomerLedgerJasperReport(paramJobj);
            } else if (moduleid == 61) {//for vendor account statement
                jasperPrint = accExportReportsServiceDAOobj.exportVendorLedgerJasperReport(paramJobj);
            }
            baos = new ByteArrayOutputStream();
            response.setHeader("Content-Disposition", "attachment;filename=" + "StatementOfAccounts.pdf");
            JRPdfExporter exporter = new JRPdfExporter();
            exporter.setParameter(JRExporterParameter.JASPER_PRINT, jasperPrint);
            exporter.setParameter(JRExporterParameter.OUTPUT_STREAM, baos);
            exporter.exportReport();
        }
        return baos;
    }
        
        public ModelAndView sendMail(HttpServletRequest request, HttpServletResponse response ) throws FileNotFoundException, IOException, DocumentException, ServiceException, JSONException {
       java.io.OutputStream os = null;
       JSONObject jobj = new JSONObject();
       List<String> list = new ArrayList<String>();
        {
            
            ByteArrayOutputStream baos = null;
            FileInputStream fis=null;
            FileOutputStream fos=null;
            boolean issuccess = false;
            try {
                File tempDir=null;
                String dateStr = "";
                DateFormat df=null;
                String[] emails=request.getParameter("emailid").split(";");
                String personid=request.getParameter("personid");
                String plainMsg =request.getParameter("message");
                boolean multiRecordMailFlag = Boolean.parseBoolean(request.getParameter("multiRecordMailFlag"));

                String subject = request.getParameter("subject");
                String fileName = request.getParameter("filename");
                boolean sendPdf = Boolean.parseBoolean((String)request.getParameter("sendpdf"));
                int mode=Integer.parseInt(request.getParameter("mode"));
                String billid=request.getParameter(Constants.billid);
                String attachmentSelection=request.getParameter("attachmentSelection");
                String[] attachmentSelectionArray=attachmentSelection.split(",");
                CompanyAccountPreferences preferences = (CompanyAccountPreferences) kwlCommonTablesDAOObj.getClassObject(CompanyAccountPreferences.class.getName(), sessionHandlerImpl.getCompanyid(request));
                Company company = preferences.getCompany();
                KWLCurrency currency = (KWLCurrency) kwlCommonTablesDAOObj.getClassObject(KWLCurrency.class.getName(), sessionHandlerImpl.getCurrencyID(request));
               // double amount = 0;
                Date invDate = new Date();
                String fromID = StringUtil.isNullOrEmpty(company.getEmailID())?authHandlerDAOObj.getSysEmailIdByCompanyID(company.getCompanyID()):company.getEmailID();
                File destDir=new File("");
                String[] path = new String[]{};
                JSONArray attachments=new JSONArray();
                if (!StringUtil.isNullOrEmpty(request.getParameter("attachments"))) {
                    attachments = new JSONArray(request.getParameter("attachments"));
                }
                String[] Names = new String[]{};
                if(sendPdf){
                    df = authHandler.getDateFormatter(request);
                    dateStr = df.format(invDate);
                    if (mode == 18) {//for customer/vendor account statement
                        baos=getBaosoFjasperReport(request,response);
                    }else{
                    double amount = 0.0;
                    if (!StringUtil.isNullOrEmpty(request.getParameter("amount"))) {
                        amount = Double.parseDouble((String) request.getParameter("amount"));
                    }               
                    DateFormat formatter = authHandlerDAOObj.getUserDateFormatter(sessionHandlerImpl.getDateFormatID(request), sessionHandlerImpl.getTimeZoneDifference(request), true);
                    String logoPath = ProfileImageServlet.getProfileImagePath(request, true, null);
                    String currencyid = request.getParameter(Constants.currencyKey)==null?currency.getCurrencyID():request.getParameter(Constants.currencyKey);
                    try {
                        df = authHandler.getDateFormatter(request);
                        dateStr = df.format(invDate);
                    } catch(Exception ex) {
                    }
                    if(multiRecordMailFlag){
                        String gridconfig = "{" +
                            "data:[{'header':'personname','title':'"+messageSource.getMessage("acc.agedPay.gridCustomer/AccName", null, RequestContextUtils.getLocale(request))+"','width':'200','align':''},{'header':'billno','title':'"+messageSource.getMessage("acc.agedPay.gridIno", null, RequestContextUtils.getLocale(request))+"','width':'200','align':''},{'header':'date','title':'"+messageSource.getMessage("acc.agedPay.gridDate", null, RequestContextUtils.getLocale(request))+"','width':'150','align':'date'},{'header':'duedate','title':'"+messageSource.getMessage("acc.agedPay.gridDueDate", null, RequestContextUtils.getLocale(request))+"','width':'150','align':'date'},{'header':'termname','title':'Term Name','width':'150','align':''},{'header':'amount','title':'Amount','width':'150','align':'currency'},{'header':'amountdue','title':'"+messageSource.getMessage("acc.agedPay.gridAmtDue", null, RequestContextUtils.getLocale(request))+"','width':'150','align':'currency'},{'header':'amountdueinbase','title':'Amount Due (In Home Currency)','width':'150','align':'currency'}]," +
                            "groupdata:{'groupBy':'personname','groupSummaryField':'amountdue','groupSummaryText':'"+messageSource.getMessage("acc.nee.2", null, RequestContextUtils.getLocale(request))+" ','reportSummaryField':'amountdueinbase','reportSummaryText':'Total Aged Receivable '}" +
                            "}";
                        JSONObject grid = new JSONObject(gridconfig);
                        JSONObject multiRecord = new JSONObject();
                        multiRecord = getSelectedInvoicesJson(request);
                        baos = exportDaoObj.getPdfData(grid, request, multiRecord);
                    }
                    }
//                    else{
//                        baos = ExportrecordObj.createPdf(request, currencyid, billid, formatter, mode, amount, logoPath, null, null, null,false);
//                    }
                    Names = new String[attachments.length()+1];
                    if (mode == 18) {
                        destDir = new File(storageHandlerImpl.GetProfileImgStorePath(), "StatementOfAccounts " + dateStr + ".pdf");
                        Names[0] = "StatementOfAccounts" + dateStr + ".pdf";

                    } else {
                        destDir = new File(storageHandlerImpl.GetProfileImgStorePath(), "AgedReceivableReport" + dateStr + ".pdf");
                        Names[0] = "AgedReceivableReport" + dateStr + ".pdf";
                    }
                    FileOutputStream oss = new FileOutputStream(destDir);
                    baos.writeTo(oss);                   
                    list.add(destDir.getAbsolutePath());
                    oss.close();
                    path = list.toArray(new String[attachments.length() + 1]);
                    for (int i = 0; i < attachments.length(); i++) {
                            path[i+1 ] = StorageHandler.GetDocStorePath() + attachments.getJSONObject(i).get("id").toString();
                            Names[i+1] = attachments.getJSONObject(i).get("name").toString();
                        }
                    
                }else { //when default pdf is not attached
                    path = list.toArray(new String[attachments.length()]);
                    Names = new String[attachments.length()];
                    for (int i = 0; i < attachments.length(); i++) {
                            path[i] = StorageHandler.GetDocStorePath() + attachments.getJSONObject(i).get("id").toString();
                            Names[i] = attachments.getJSONObject(i).get("name").toString();
                        }
                }              
                    
                    
                    
                try {
                    if (emails.length > 0) {
                        Map<String, Object> smtpConfigMap = authHandler.getSMTPConfigMap(company);
                        SendMailHandler.postMail(emails, subject, plainMsg, plainMsg, fromID, path,Names, smtpConfigMap);
                        issuccess=true;                        
                    }
                } catch (MessagingException e) {  
                    try{
                        throw new MessageSizeExceedingException(e.getMessage()); 
                    }catch(MessageSizeExceedingException exception){
                       if(StringUtil.isNullOrEmpty(exception.toString())){                    
                            Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, e);
                       }else{
                            issuccess=false;
                            jobj.put("success", issuccess);
                            jobj.put("isMsgSizeException",true);
                            jobj.put("msg",exception.toString());
                       }
                    }                                                    
                }
               
                } catch (SessionExpiredException ex) {
                    Logger.getLogger(CommonFnController.class.getName()).log(Level.SEVERE, null, ex);
                }   catch (Exception e) {
                      issuccess=false;
                 } finally {
                    try{
                    if(baos!=null)
                        baos.close();
                     if(os!=null)
                        os.close();
                     if(fis!=null)
                        fis.close();
                     if(fos!=null)
                        fos.close();
                         } catch (IOException ex) {
                    Logger.getLogger(AopAdvisor.class.getName()).log(Level.SEVERE, null, ex);
                }
                    if(jobj.length()==0){
                        jobj.put("success", issuccess);
                        jobj.put("msg", messageSource.getMessage("acc.rem.165", null, RequestContextUtils.getLocale(request)));
                    }                        
                }
        }
       return new ModelAndView(Constants.jsonView, "model", jobj.toString());
    }
    
     public JSONObject getForeignCurrencyExposureJsonObject(JSONObject dataObj, double minRate, double maxRate) throws JSONException {
        Double amount = dataObj.getDouble("amount");
        Double oldcurrencyrate = dataObj.getDouble("oldcurrencyrate");
        Double amountinbase = dataObj.getDouble("amountinbase");

        String companyid = dataObj.optString("companyid");
        Double externalcurrencyrate = dataObj.optDouble("externalcurrencyrate",0.0);
        if(externalcurrencyrate!=0){
            oldcurrencyrate=externalcurrencyrate;
        }
        
        JSONObject jObj = new JSONObject();
        jObj.put(Constants.companyKey, dataObj.getString(Constants.companyKey));
        jObj.put(Constants.billid, dataObj.getString(Constants.billid));
        jObj.put("companyname", dataObj.getString("companyname"));
        jObj.put(Constants.currencyKey, dataObj.getString(Constants.currencyKey));
        jObj.put("costcenterid", dataObj.getString("costcenterid"));
        jObj.put("costcenterName", dataObj.getString("costcenterName"));
        jObj.put("deleted", dataObj.getBoolean("deleted"));

        jObj.put("personname", dataObj.getString("personname"));
        jObj.put("invoiceno", dataObj.getString("billno"));
        jObj.put("billno", dataObj.getString("billno"));
        jObj.put("date", dataObj.getString("date"));
        jObj.put("currencycode", dataObj.getString("currencycode"));
        jObj.put("currencysymbol", dataObj.getString("currencysymbol"));
        jObj.put("amount", amount);
        jObj.put("oldcurrencyratetobase", oldcurrencyrate);
//           	jObj.put("oldcurrencyratetobase", 1/oldcurrencyrate);
        jObj.put("amountinbase", amountinbase);

        if (minRate != 0.00) {
//            double minRateInBaseCurrency = authHandler.round((minRate / oldcurrencyrate), 6);
//            double amountinbase1 = amountinbase * minRateInBaseCurrency;
//            jObj.put("amountinbase1", amountinbase1);
//            jObj.put("netgainloss1", (amountinbase1 - amountinbase));
//            jObj.put("netgainlosspercent1", authHandler.round((amountinbase1 - amountinbase) / amountinbase * 100, 2));
            
            double amountinbase1 = amount / minRate;
            jObj.put("amountinbase1", amountinbase1);
            jObj.put("netgainloss1", ( amountinbase1-amountinbase));
            jObj.put("netgainlosspercent1", authHandler.round((amountinbase1-amountinbase) / amountinbase * 100, companyid));
        }

        if (maxRate != 0.00) {
//            double maxRateInBaseCurrency = authHandler.round((maxRate / oldcurrencyrate), 6);
//            double amountinbase2 = amountinbase * maxRateInBaseCurrency;
//            jObj.put("amountinbase2", amountinbase2);
//            jObj.put("netgainloss2", (amountinbase2 - amountinbase));
//            jObj.put("netgainlosspercent2", authHandler.round((amountinbase2 - amountinbase) / amountinbase * 100, 2));
            double amountinbase2 = amount / maxRate;
            jObj.put("amountinbase2", amountinbase2);
            jObj.put("netgainloss2", (amountinbase2-amountinbase));
            jObj.put("netgainlosspercent2", authHandler.round((amountinbase2-amountinbase) / amountinbase * 100, companyid));
        }

        return jObj;
    }
    public ModelAndView exportForeignCurrencyExposureReport(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        String view = "jsonView_ex";
        try {
            JSONArray jArr = getForeignCurrencyExposureData(request);
            JSONObject dataObj = new JSONObject();
            dataObj.put(Constants.data, jArr);
            String fileType = request.getParameter("filetype");
            if (StringUtil.equal(fileType, "print")) {
                String GenerateDate = authHandler.getDateFormatter(request).format(new Date());
                dataObj.put("GenerateDate", GenerateDate);
                view = "jsonView-empty";
            }
            exportDaoObj.processRequest(request, response, dataObj);
        } catch (SessionExpiredException ex) {
            Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
        }
        return new ModelAndView(view, "model", jobj.toString());
    }

    public ModelAndView getForeignCurrencyExposure(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        String msg = "";
        boolean issuccess = false;
        try {
            JSONArray jArr = getForeignCurrencyExposureData(request);
            jobj.put("data", jArr);
            jobj.put("count", jArr.length());
            issuccess = true;

        } catch (Exception ex) {
            ex.printStackTrace();
            msg = "" + ex.getMessage();
            Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                jobj.put("success", issuccess);
                jobj.put("msg", msg);
            } catch (JSONException ex) {
                ex.printStackTrace();
                Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return new ModelAndView(Constants.jsonView, "model", jobj.toString());
    }

    public JSONArray getForeignCurrencyExposureData(HttpServletRequest request) {
        JSONObject jobj = new JSONObject();
        String msg = "";
        boolean issuccess = false;
        JSONArray DataJArr = new JSONArray();
        JSONArray jArr = new JSONArray();
        try {
            boolean consolidateFlag = request.getParameter("consolidateFlag") != null ? Boolean.parseBoolean(request.getParameter("consolidateFlag")) : false;
            String[] companyids = (consolidateFlag && request.getParameter(Constants.companyids) != null) ? request.getParameter(Constants.companyids).split(",") : sessionHandlerImpl.getCompanyid(request).split(",");
            String gcurrencyid = (consolidateFlag && request.getParameter(Constants.globalCurrencyKey) != null) ? request.getParameter(Constants.globalCurrencyKey) : sessionHandlerImpl.getCurrencyID(request);
            String currencyid = (request.getParameter(Constants.currencyKey) != null) ? request.getParameter(Constants.currencyKey) : "";
            double minRate = !StringUtil.isNullOrEmpty(request.getParameter("minrate")) ? Double.parseDouble(request.getParameter("minrate")) : 0.00;
            double maxRate = !StringUtil.isNullOrEmpty(request.getParameter("maxrate")) ? Double.parseDouble(request.getParameter("maxrate")) : 0.00;

            System.out.println("Invoice - currencyid:" + currencyid + "--minRate:" + minRate + "--maxRate:" + maxRate);

            boolean eliminateflag = consolidateFlag;

            HashMap requestParams = AccInvoiceServiceHandler.getInvoiceRequestMap(request);
            requestParams.put(Constants.currencyKey, currencyid);

            String companyid = "";
            String filteringCurrId = request.getParameter(Constants.currencyKey);
            boolean filterOnCurrencyFlag = false;
            if(!StringUtil.isNullOrEmpty(filteringCurrId)){
                filterOnCurrencyFlag = true;
            }

            for (int cnt = 0; cnt < companyids.length; cnt++) {
                companyid = companyids[cnt];
                request.setAttribute(Constants.companyKey, companyid);
                request.setAttribute(Constants.globalCurrencyKey, gcurrencyid);
                requestParams.put(Constants.companyKey, companyid);
                requestParams.put(Constants.globalCurrencyKey, gcurrencyid);

                KwlReturnObject result = accInvoiceDAOobj.getInvoicesMerged(requestParams);
                List list = result.getEntityList();
                DataJArr =  accInvoiceServiceDAO.getInvoiceJsonMerged(request, list, DataJArr);
            }

            if (request.getParameter("minimumAmountDue") != null) {
                JSONArray temp = new JSONArray();
                double minimumAmountDue = Double.parseDouble(request.getParameter("minimumAmountDue").toString());
                for (int i = 0; i < DataJArr.length(); i++) {
                    if (DataJArr.getJSONObject(i).getDouble("amountdue") >= minimumAmountDue) {
                        temp.put(DataJArr.getJSONObject(i));
                    }
                }
                DataJArr = temp;
            }
            int count = DataJArr.length();
            JSONArray pagedJson = DataJArr;
            String start = request.getParameter("start");
            String limit = request.getParameter("limit");
            if (!StringUtil.isNullOrEmpty(start) && !StringUtil.isNullOrEmpty(limit)) {
                pagedJson = StringUtil.getPagedJSON(pagedJson, Integer.parseInt(start), Integer.parseInt(limit));
            }

            for (int i = 0; i < DataJArr.length(); i++) {
                JSONObject dataObj = DataJArr.getJSONObject(i);

                JSONObject jObj = null;
                if (filterOnCurrencyFlag) {
                    if ((dataObj.getString(Constants.currencyKey).equalsIgnoreCase(filteringCurrId))) {
                        jObj = getForeignCurrencyExposureJsonObject(dataObj, minRate, maxRate);
                        jArr.put(jObj);
                    }
                } else {
                    if (!(dataObj.getString(Constants.currencyKey).equalsIgnoreCase(gcurrencyid))) {
                        jObj = getForeignCurrencyExposureJsonObject(dataObj, minRate, maxRate);
                        jArr.put(jObj);
                    }
                }
            }


        } catch (Exception ex) {
            ex.printStackTrace();
            msg = "" + ex.getMessage();
            Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
        } 
        return jArr;
    }

     class MessageSizeExceedingException extends Exception{

        String msg="";
        public MessageSizeExceedingException(String message) {
            this.msg=message.trim();
        }
    
        @Override
        public String toString(){
            String sizeExceedingMsg="552 4.3.1 Message size exceeds fixed maximum message size";
            
            if(sizeExceedingMsg.equalsIgnoreCase(this.msg)){
                 return ("Attached file(s) size is exceeding message size limit!");
            }else{
                return ("");
            }
                
        }                
    }
    public ModelAndView getExciseComputationReport(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        try {
            String companyId = sessionHandlerImpl.getCompanyid(request);
            String startDate = request.getParameter("stdate");
            String endDate = request.getParameter("enddate");

            HashMap paramsHM = new HashMap();
            paramsHM.put(Constants.companyKey, companyId);
            paramsHM.put("startdate", startDate);
            paramsHM.put("enddate", endDate);
            
            JSONArray jArr = getExciseComputationReport(request, false);
            KwlReturnObject cpresult = accountingHandlerDAOobj.getObject(Company.class.getName(), sessionHandlerImpl.getCompanyid(request));
            Company company = (Company) cpresult.getEntityList().get(0);
            jobj.put(Constants.data, jArr);
            jobj.put("count", jArr.length());
            jobj.put("success", true);
            jobj.put("msg", "");
        } catch (Exception ex) {
            Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
        }
        return new ModelAndView(Constants.jsonView, "model", jobj.toString());
    }

    private JSONArray getExciseComputationReport(HttpServletRequest request, boolean isForExport) throws JSONException, SessionExpiredException, ParseException, ServiceException {

        JSONArray jArr = new JSONArray();
        JSONObject jObj = new JSONObject();
        HashMap<String, Object> requestParams = new HashMap<>();
        try {
            String companyid = sessionHandlerImpl.getCompanyid(request);
            KwlReturnObject extracapresult = accountingHandlerDAOobj.getObject(ExtraCompanyPreferences.class.getName(), companyid);
            ExtraCompanyPreferences extraCompanyPreferences = (ExtraCompanyPreferences) extracapresult.getEntityList().get(0);
            KwlReturnObject cap = accountingHandlerDAOobj.getObject(CompanyAccountPreferences.class.getName(), companyid);
            CompanyAccountPreferences preferences = (CompanyAccountPreferences) cap.getEntityList().get(0);
            DateFormat df = authHandler.getDateOnlyFormat();
            requestParams.put(Constants.companyKey, companyid);
            requestParams.put(Constants.df, df);
            requestParams.put(Constants.REQ_startdate, request.getParameter(Constants.REQ_startdate));
            requestParams.put(Constants.REQ_enddate, request.getParameter(Constants.REQ_enddate));
            requestParams.put("FinancialYearFrom", df.format(preferences.getFinancialYearFrom()));
            //Part A. Excise Sales
            //Part B. Payable From Previous Period
            //Part C1. GAR 7 Payments 
           jArr = accInvoiceServiceDAO.getExciseComputationReportDetails(requestParams, jArr);
           double totalBalance=0.0; 
           requestParams.put("exciseDutyAdvancePaymentaccount", extraCompanyPreferences.getExcisePayableAcc());
           KwlReturnObject kwlAdvExcPay = accInvoiceDAOobj.getAdvanceMakepaymentOfExcisDuty(requestParams);
           List advExcisePayment = kwlAdvExcPay.getEntityList();
           Iterator itrMP = advExcisePayment.iterator();
            while(itrMP.hasNext()){
                PaymentDetailOtherwise pdow= (PaymentDetailOtherwise)itrMP.next();
                if(pdow.getPayment()!=null && pdow.isIsdebit()){
                    Payment paymentObj=pdow.getPayment();
                    totalBalance+=pdow.getAmount();
                }
            }
            
            // Reduce Credit Adjusted from GAR 7 Payments 
            for (int i = 0; i < jArr.length(); i++){
                if (jArr.getJSONObject(i).getString("particulars").equals("GAR 7 Payments")){
                    if(jArr.getJSONObject(i).getDouble("dutyamount") > 0.0){
                        // Get Credit Adjusted amount after excise payment is done
                        HashMap paramsHM = new HashMap();
                        paramsHM.put(Constants.companyKey, companyid);
                        paramsHM.put(Constants.df, df);
                        paramsHM.put(Constants.REQ_startdate, request.getParameter(Constants.REQ_startdate));
                        paramsHM.put(Constants.REQ_enddate, request.getParameter(Constants.REQ_enddate));
                        paramsHM.put("FinancialYearFrom", df.format(preferences.getFinancialYearFrom()));
                        paramsHM.put("termType", 2); //Excise term type = 2
                        paramsHM.put("capitalGoodsProductsFlag", false);
                        paramsHM.put("iscenvatadjust", "1");
                        paramsHM.put("excisepaidflag", 1);                       
                        jArr.getJSONObject(i).put("dutyamount", totalBalance);
                    }
                }
            }
            
            //Part C2. Excise Duty Payments/ Credit Adjustments
            jObj = new JSONObject();
            HashMap paramsHM = new HashMap();
            paramsHM.put(Constants.companyKey, companyid);
            paramsHM.put(Constants.df, df);
            paramsHM.put(Constants.REQ_startdate, request.getParameter(Constants.REQ_startdate));
            paramsHM.put(Constants.REQ_enddate, request.getParameter(Constants.REQ_enddate));
            paramsHM.put("FinancialYearFrom", df.format(preferences.getFinancialYearFrom()));
            paramsHM.put("termType", 2); //Excise term type = 2
            paramsHM.put("capitalGoodsProductsFlag", false);
            paramsHM.put("iscenvatadjust", "1");
           // paramsHM.put("excisepaidflag", 0);
            List grExciseDetailList = accGoodsReceiptobj.getGoodsRecieptIndiaTaxDetails(paramsHM);
            jObj = indiaTaxComputation(grExciseDetailList, jObj);
            jObj.put("taxtype", "C. Excise Duty Payments/ Credit Adjustments");
            jObj.put("particulars", "Credit Adjustments");
            jArr.put(jObj);
            
            //Part D. Balance Excise Duty Payable((A+B)-C)
            jObj = new JSONObject();
            jObj.put("taxtype", "D. Balance Excise Duty Payable((A+B)-C)");
            jObj.put("particulars", "Balance Excise Duty Payable");
            jObj.put("accessablevalue", "");
            jObj.put("dutyamount", "0");
            jArr.put(jObj);

            // Part E. Balance Input Credit
            paramsHM.put("iscenvatadjust", "0");
            jObj = new JSONObject();
            jObj.put("taxtype", "E. Balance Input Credit");
            jObj.put("particulars", "CENVAT Credit on Inputs");            
            grExciseDetailList = accGoodsReceiptobj.getGoodsRecieptIndiaTaxDetails(paramsHM);
            jObj = indiaTaxComputation(grExciseDetailList, jObj);
            jArr.put(jObj);
            
            jObj = new JSONObject();
            jObj.put("taxtype", "E. Balance Input Credit");
            jObj.put("particulars", "CENVAT Credit on Capital Goods");
            paramsHM.put("termType", 2); //Excise term type = 2
            paramsHM.put("capitalGoodsProductsFlag", true);
            List grExciseDetailListofCapitalGoods = accGoodsReceiptobj.getGoodsRecieptIndiaTaxDetails(paramsHM);
            jObj = indiaTaxComputation(grExciseDetailListofCapitalGoods, jObj);
            jArr.put(jObj);
            
            jObj = new JSONObject();
            jObj.put("taxtype", "E. Balance Input Credit");
            jObj.put("particulars", "Excise Duty Advance Paid"); 
            double advExciseAmount=0.0f;
            
            if (extraCompanyPreferences.getExciseDutyAdvancePaymentaccount() != null) {
                paramsHM.put("exciseDutyAdvancePaymentaccount", extraCompanyPreferences.getExciseDutyAdvancePaymentaccount());
                List grAdvExcisePaymentDetailList = accInvoiceDAOobj.getAdvanceJEAdjustmentOfExcisDuty(paramsHM).getEntityList();
                Iterator itr = grAdvExcisePaymentDetailList.iterator();
                while (itr.hasNext()) {
                    JournalEntryDetail jed = (JournalEntryDetail) itr.next();
                    if (jed.isDebit()) {
                        advExciseAmount += jed.getAmount();
                    } else {
                        advExciseAmount -= jed.getAmount();
                    }
                }
            }
            jObj.put("dutyamount", advExciseAmount);            
            jArr.put(jObj);
            jObj = new JSONObject();
            jObj.put("taxtype", "C. Excise Duty Payments/ Credit Adjustments");
            jObj.put("particulars", "Advance Excise Duty Adjustments"); 
            advExciseAmount=0.0f;
            extracapresult = accountingHandlerDAOobj.getObject(ExtraCompanyPreferences.class.getName(), companyid);
            extraCompanyPreferences = (ExtraCompanyPreferences) extracapresult.getEntityList().get(0);
            if (extraCompanyPreferences.getExciseDutyAdvancePaymentaccount() != null) {
                paramsHM.put("exciseDutyAdvancePaymentaccount", extraCompanyPreferences.getExciseDutyAdvancePaymentaccount());
                List grAdvExcisePaymentDetailList = accInvoiceDAOobj.getAdvanceJEAdjustmentOfExcisDuty(paramsHM).getEntityList();
                Iterator itr = grAdvExcisePaymentDetailList.iterator();
                while (itr.hasNext()) {
                    JournalEntryDetail jed = (JournalEntryDetail) itr.next();
                    if (!jed.isDebit()) {                       
                        advExciseAmount += jed.getAmount();
                    }
                }
            }
            jObj.put("dutyamount", advExciseAmount);            
            jArr.put(jObj);
            jObj = new JSONObject();
            jObj.put("taxtype", "E. Balance Input Credit");
            jObj.put("particulars", "Service Tax Input Credit");
            paramsHM.put("termType", 4); //Service tax term type = 4
            List grSerivceTaxDetailList = accGoodsReceiptobj.getGoodsRecieptIndiaTaxDetails(paramsHM);
            jObj = indiaTaxComputation(grSerivceTaxDetailList, jObj);
            jArr.put(jObj);
        } catch (Exception ex) {
            Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
        }
        return jArr;
    }
    
    public ModelAndView getServiceTaxComputationReport(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        try {
            String companyId = sessionHandlerImpl.getCompanyid(request);
            String startDate = request.getParameter("stdate");
            String endDate = request.getParameter("enddate");
            HashMap paramsHM = new HashMap();
            paramsHM.put("companyid", companyId);
            paramsHM.put("startdate", startDate);
            paramsHM.put("enddate", endDate);
            
            JSONArray jArr = getServiceTaxComputationReport(request, false);
            jobj.put("data", jArr);
            jobj.put("count", jArr.length());
            jobj.put("success", true);
            jobj.put("msg", "");
        } catch (Exception ex) {
            Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
        }
        return new ModelAndView(Constants.jsonView, "model", jobj.toString());
    }

    private JSONArray getServiceTaxComputationReport(HttpServletRequest request, boolean isForExport) throws JSONException, SessionExpiredException, ParseException, ServiceException {

        JSONArray jArr = new JSONArray();
        JSONObject jObj = new JSONObject();
        Map<String, Object> requestParams = new HashMap<>();
        try {
            String companyid = sessionHandlerImpl.getCompanyid(request);
            KwlReturnObject cap = accountingHandlerDAOobj.getObject(CompanyAccountPreferences.class.getName(), companyid);
            CompanyAccountPreferences preferences = (CompanyAccountPreferences) cap.getEntityList().get(0);
            DateFormat df = authHandler.getDateOnlyFormat();
            requestParams.put("companyid", companyid);
            requestParams.put(Constants.df, df);
            requestParams.put(Constants.REQ_startdate, request.getParameter(Constants.REQ_startdate));
            requestParams.put(Constants.REQ_enddate, request.getParameter(Constants.REQ_enddate));
            requestParams.put("FinancialYearFrom", df.format(preferences.getFinancialYearFrom()));
            //Part A. Excise Sales
            //Part B. Payable From Previous Period
            //Part C1. GAR 7 Payments 
            jArr = accInvoiceServiceDAO.getServiceTaxComputationReportDetails(requestParams, jArr);
//         
        } catch (Exception ex) {
            Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
        }
        return jArr;
    }
    
    public JSONObject indiaTaxComputation(List grExciseDetailList, JSONObject jObj) throws JSONException {
        double totalAssessableValue = 0.0;
        double totalTaxAmount = 0.0;
        String termAccount = null;
        Iterator itr = grExciseDetailList.iterator();
        HashMap<String, Double> grIDSet = new HashMap<String, Double>();
        while (itr.hasNext()) {
            Object[] oj = (Object[]) itr.next();

            String accName = oj[0].toString(); //Account Name
            String accId = oj[1].toString(); // Account uuid
            double percent = (Double) oj[2]; // Percentage
            double assessableValues = (Double) oj[3]; // Assessable Value
            double termamount = (Double) oj[4]; // Term Amount (Calculated Tax Amount)
            int termType = (Integer) oj[5]; // Term type (Tax Description)
            termAccount = oj[6].toString(); // Term Account
            totalAssessableValue += assessableValues;
            totalTaxAmount += termamount;
            if (!StringUtil.isNullObject(oj[7]) && !grIDSet.containsKey(oj[7])) {
                grIDSet.put(oj[7].toString(), termamount);
            }
        }
        jObj.put("accessablevalue", totalAssessableValue);
        jObj.put("dutyamount", totalTaxAmount);
        jObj.put("account", termAccount);
        jObj.put("grId", grIDSet);
        return jObj;
    }
    
     public ModelAndView getDailySalesReport(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        boolean issuccess = false;
        String msg = "";
        try {

            /*
             * Get Daily Sales Report Related Parameters
             */
            Map<String, Object> requestParams = getDailySalesReportCommonParameters(request);

            /*
             * Get Daily Sales Report Details
             */

            jobj = accInvoiceServiceDAO.getDailySalesReportDetails(request, requestParams);
            issuccess = true;
        } catch (Exception ex) {
            msg = "" + ex.getMessage();
            Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                jobj.put("success", issuccess);
                jobj.put("msg", msg);
            } catch (JSONException ex) {
                Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return new ModelAndView("jsonView_ex", Constants.model, jobj.toString());
    }

    public Map<String, Object> getDailySalesReportCommonParameters(HttpServletRequest request) {
        Map<String, Object> requestParams = new HashMap<>();
        try {
            String companyid = sessionHandlerImpl.getCompanyid(request);
            DateFormat df = authHandler.getDateOnlyFormat();
            requestParams.put(Constants.df, df);
            requestParams.put(Constants.ss, request.getParameter(Constants.ss));
            requestParams.put(Constants.REQ_startdate, request.getParameter(Constants.REQ_startdate));
            requestParams.put(Constants.REQ_enddate, request.getParameter(Constants.REQ_enddate));
            requestParams.put(Constants.billid, request.getParameter(Constants.billid));

            String start = request.getParameter("start");
            String limit = request.getParameter("limit");
            requestParams.put("start", start);
            requestParams.put("limit", limit);

            requestParams.put(Constants.companyKey, companyid);
            requestParams.put("requestcontextutilsobj", RequestContextUtils.getLocale(request));


        } catch (Exception ex) {
            Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
        }
        return requestParams;
    }
    
    public ModelAndView exportDailySalesReport(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        String view = "jsonView_ex";
        try {
            JSONArray jArr = new JSONArray();
            int count = 0;

            /*
             * Get Daily Sales Report Related Parameters
             */
            Map<String, Object> requestParams = getDailySalesReportCommonParameters(request);
            requestParams.put("isForExport", true);

            /*
             * Get Daily Sales Report Details
             */

            jobj = accInvoiceServiceDAO.getDailySalesReportDetails(request, requestParams);
            if (jobj.has(Constants.data) && jobj.get(Constants.data) != null) {
                jArr = jobj.getJSONArray(Constants.data);
            }
            
            jobj.put(Constants.data, jArr);

            String fileType = request.getParameter("filetype");
            if (StringUtil.equal(fileType, "print")) {
                String stDate = request.getParameter("stdate");
                String edDate = request.getParameter("enddate");
                if (!StringUtil.isNullOrEmpty(stDate) && !StringUtil.isNullOrEmpty(edDate)) {
                    DateFormat df = authHandler.getDateOnlyFormat();
                    Date startDate = df.parse(request.getParameter("stdate"));
                    Date endDate = df.parse(request.getParameter("enddate"));
                    /*
                     * Calculation of Date Ranges for the Month.
                     */
                    LocalDate localStartDate = new LocalDate(startDate);
                    LocalDate localEndDate = new LocalDate(endDate);

                    startDate = localStartDate.toDateTimeAtCurrentTime().dayOfMonth().withMinimumValue().toDate();
                    endDate = localEndDate.toDateTimeAtCurrentTime().dayOfMonth().withMaximumValue().toDate();
                    
                    startDate.setHours(00);
                    startDate.setMinutes(00);
                    startDate.setSeconds(00);

                    endDate.setHours(00);
                    endDate.setMinutes(00);
                    endDate.setSeconds(00);
                    
                    stDate = authHandler.getDateOnlyFormat().format(startDate);
                    edDate = authHandler.getDateOnlyFormat().format(endDate);
                    jobj.put("isFromToDateRequired", true);
                    jobj.put("stdate", stDate);
                    jobj.put("enddate", edDate);
                } else {
                    String GenerateDate = authHandler.getDateOnlyFormat().format(new Date());
                    jobj.put("GenerateDate", GenerateDate);
                }
                view = "jsonView-empty";
            }
            exportDaoObj.processRequest(request, response, jobj);
        } catch (SessionExpiredException ex) {
            Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
        }
        return new ModelAndView(view, "model", jobj.toString());
    }
     
       public ModelAndView getMonthlySalesReport(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        boolean issuccess = false,isBasedOnProduct=false;
        String msg = "",view=Constants.jsonView,stdate="",enddate="";
        int count=0;
        try {
            JSONArray jArr = new JSONArray();
            boolean isWidgetRequest = request.getParameter("isWidgetRequest") != null ? Boolean.parseBoolean(request.getParameter("isWidgetRequest")) : false;
            String gcurrencyid = (request.getParameter(Constants.globalCurrencyKey) != null) ? request.getParameter(Constants.globalCurrencyKey) : sessionHandlerImpl.getCurrencyID(request);
            isBasedOnProduct = request.getParameter("isBasedOnProduct")!=null ? Boolean.parseBoolean(request.getParameter("isBasedOnProduct")): false;
            stdate = request.getParameter("stdate")!= null ?request.getParameter("stdate"):"";
            enddate = request.getParameter("enddate")!= null?request.getParameter("enddate"):"";
            JSONObject json = getMonthlySales(request, false);
            String companyid = sessionHandlerImpl.getCompanyid(request);
            //flag for chart type
            String chartType = "";
            if(!StringUtil.isNullOrEmpty(request.getParameter(Constants.CHART_TYPE))) {
                chartType = request.getParameter(Constants.CHART_TYPE);
            }
            count = json.getInt("count");
            if (json.has(Constants.data) && json.get(Constants.data) != null) {
                jArr = json.getJSONArray(Constants.data);
            }
            JSONArray monthArray = new JSONArray();
            if (json.has("months") && json.get("months") != null) {
                monthArray = json.getJSONArray("months");
            } else {
                monthArray = getMonthsJSONArray(request);
            }
//            monthArray.put(new JSONObject().put("monthname", "Total"));

//            if (jArr.length() == 0) {
//                jArr.put(new JSONObject().put("months", monthArray));
//            } else {
//                JSONObject firstObject = jArr.getJSONObject(0);
//                firstObject.put("months", monthArray);
//            }
            
            /*method to get column model for widget view*/
            if (isWidgetRequest) {
                view = "jsonView_ex";
                JSONArray ColArr = new JSONArray();
                JSONArray jarrColumns = new JSONArray();
                JSONArray jarrRecords = new JSONArray();
                JSONObject commData = new JSONObject();
                JSONObject jMeta = new JSONObject();
                HashMap<String, Object> requestParams = new HashMap<>();
                requestParams.put("locale", RequestContextUtils.getLocale(request));
                requestParams.put("isBasedOnProduct", isBasedOnProduct);
                requestParams.put("gcurrencyid", gcurrencyid);
                requestParams.put("stdate", stdate);
                requestParams.put("enddate", enddate);
                
                JSONObject colModelObj = accInvoiceServiceDAO.getColumnModelForMonthlySalesReport(requestParams, ColArr);
                jarrColumns = colModelObj.getJSONArray("jarrColumns");
                jarrRecords = colModelObj.getJSONArray("jarrRecords");
                commData.put("coldata", jArr);
                commData.put("columns", jarrColumns);
                jMeta.put("totalProperty", "totalCount");
                jMeta.put("root", "coldata");
                jMeta.put("fields", jarrRecords);
                commData.put("totalCount", count);
                commData.put("metaData", jMeta);
                jobj.put(Constants.data, commData);
            } else if (StringUtil.equalIgnoreCase(chartType, Constants.BAR_CHART)) {
                JSONArray chartData = new JSONArray();
                for (int i = 0; i < monthArray.length(); i++) {
                    JSONObject temp = new JSONObject();
                    temp.put("monthname", monthArray.getJSONObject(i).getString("monthname"));
                    temp.put("amountinbase", jArr.getJSONObject(jArr.length() - 1).getString("amount_" + i));
                    chartData.put(temp);
                }
                jobj.put(Constants.data, chartData);
            } else if (StringUtil.equalIgnoreCase(chartType, Constants.PIE_CHART)) {
                //Remove Total from JSON array
                if (jArr.length() > 0) {
                    jArr.remove(jArr.length() - 1);
                }
                 //Sort customers on amount 
                jArr = AccountingManager.sortJsonArrayOnIntegerValues(jArr, "amountinbase", "desc");
                
                //If there are more than Constants.TOP_CUSTOMERS_PIE_CHART records calculate sum of other recs and add as Others
                if (jArr.length() > Constants.MAX_LIMIT_FOR_PIE) {
                    double otherAmount = 0.0;
                    JSONObject otherData = new JSONObject();
                    otherData.put("customername", "Others");
                    for (int i = 9; i < jArr.length(); i++) {
                        otherAmount += authHandler.round(jArr.optJSONObject(i).optDouble("amountinbase", 0.0),companyid);
                        jArr.remove(i);
                        i--;
                    }
                    otherData.put("amountinbase", authHandler.round(otherAmount,companyid));
                    jArr.put(otherData);
                }
                jobj.put(Constants.data, jArr);
                
            } else {
                jobj.put(Constants.data, jArr);
                if (monthArray != null) {
                    jobj.put("months", monthArray);
                }
                jobj.put("count", count);
            }

            issuccess = true;

        } catch (SessionExpiredException ex) {
            msg = ex.getMessage();
            Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, ex);

        } catch (ServiceException ex) {
            msg = ex.getMessage();
            Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, ex);

        } catch (Exception ex) {
            ex.printStackTrace();
            msg = "" + ex.getMessage();
            Logger.getLogger(accInvoiceController.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                jobj.put("success", issuccess);
                jobj.put("msg", msg);
            } catch (JSONException ex) {
                Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return new ModelAndView(view, "model", jobj.toString());
    }
   /**
     * description : This function is used for customer summary report which gives customer's product wise sale for each month
     * @param request
     * @param response
     */
   public ModelAndView getMonthlyCustomerSalesReport(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        boolean issuccess = false;
        String msg = "";
        try {
            JSONArray jArr = new JSONArray();
            
            /*
            Function to get actual JSON containing customer's productwise sale for each month
            */
            JSONObject json = getMonthlyCustomerSalesByProductReport(request, false);
            if (json.has(Constants.data) && json.get(Constants.data) != null) {
                jArr = json.getJSONArray(Constants.data);
            }
            HashMap<String, Object> requestParams = AccountingManager.getGlobalParams(request);
            requestParams.put("stdate", request.getParameter("stdate"));
            requestParams.put("enddate", request.getParameter("enddate"));
            JSONArray ColArr = new JSONArray();
            JSONArray jarrColumns = new JSONArray();
            JSONArray jarrRecords = new JSONArray();
            JSONObject commData = new JSONObject();
            JSONObject jMeta = new JSONObject();
            JSONObject colModelObj = accInvoiceServiceDAO.getColumnModelForCustomerMonthlySalesReport(requestParams, ColArr);
            jarrColumns = colModelObj.getJSONArray("jarrColumns");
            jarrRecords = colModelObj.getJSONArray("jarrRecords");
            commData.put("coldata", jArr);
            commData.put("columns", jarrColumns);
            commData.put("totalCount", json.getInt("count"));
            jMeta.put("totalProperty", "totalCount");
            jMeta.put("root", "coldata");
            jMeta.put("fields", jarrRecords);
            commData.put("metaData", jMeta);
            jobj.put(Constants.data, commData);
            jobj.put("valid", true);
            issuccess = true;
        } catch (SessionExpiredException ex) {
            msg = ex.getMessage();
            Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ServiceException ex) {
            msg = ex.getMessage();
            Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            ex.printStackTrace();
            msg = "" + ex.getMessage();
            Logger.getLogger(accInvoiceController.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                jobj.put("success", issuccess);
                jobj.put("msg", msg);
            } catch (JSONException ex) {
                Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return new ModelAndView("jsonView_ex", "model", jobj.toString());
    }
   /**
     * description : This function is used to export customer summary report which gives customer's product wise sale for each month
     * @param request 
     * @param response 
    */
   public ModelAndView exportCustomerMonthlySaleByProduct(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        String view = "jsonView_ex";
        try {
            JSONArray jArr = new JSONArray();
            int count = 0;
            JSONObject tempObj = getMonthlyCustomerSalesByProductReport(request, true);
            jArr = tempObj.getJSONArray(Constants.data);
            jobj.put(Constants.data, jArr);
            String fileType = request.getParameter("filetype");
            if (StringUtil.equal(fileType, "print")) {
                String stDate = request.getParameter("stdate");
                String edDate = request.getParameter("enddate");
                if (!StringUtil.isNullOrEmpty(stDate) && !StringUtil.isNullOrEmpty(edDate)) {
                    DateTimeFormatter dtf = DateTimeFormat.forPattern("MMMM, yyyy");
                    Date startDate = dtf.parseLocalDate(request.getParameter("stdate")).toDate();
                    Date endDate = dtf.parseLocalDate(request.getParameter("enddate")).toDate();

                    LocalDate localStartDate = new LocalDate(startDate);
                    LocalDate localEndDate = new LocalDate(endDate);

                    startDate = localStartDate.toDateTimeAtCurrentTime().dayOfMonth().withMinimumValue().toDate();
                    endDate = localEndDate.toDateTimeAtCurrentTime().dayOfMonth().withMaximumValue().toDate();
                    startDate.setHours(00);
                    startDate.setMinutes(00);
                    startDate.setSeconds(00);

                    endDate.setHours(00);
                    endDate.setMinutes(00);
                    endDate.setSeconds(00);
                    stDate = authHandler.getDateOnlyFormat().format(startDate);
                    edDate = authHandler.getDateOnlyFormat().format(endDate);
                    jobj.put("isFromToDateRequired", true);
                    jobj.put("stdate", stDate);
                    jobj.put("enddate", edDate);
                } else {
                    String GenerateDate = authHandler.getDateOnlyFormat().format(new Date());
                    jobj.put("GenerateDate", GenerateDate);
                }
                view = "jsonView-empty";
            }
            exportDaoObj.processRequest(request, response, jobj);
        } catch (SessionExpiredException ex) {
            Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
        }
        return new ModelAndView(view, "model", jobj.toString());
    }
   
    public ModelAndView getMonthlySalesReportGraphical(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        JSONArray jarr = new JSONArray();        
        boolean issuccess = false;
        String msg = "";

        try {
            
            DateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
            Random t = new Random();
            DateFormat sdf1 = new SimpleDateFormat("MM");
            Calendar c1 = Calendar.getInstance();
            Calendar cal = Calendar.getInstance();
            cal.set(Calendar.DAY_OF_MONTH, 1);
            String currMonthStr = sdf1.format(c1.getTime());
            int currMonth = Integer.parseInt(currMonthStr);
            for (int i = 0; i < currMonth; i++) {                                
                cal.set(Calendar.MONTH, i);
                JSONObject temp = new JSONObject();
                temp.put("date", sdf.format(cal.getTime()));
                temp.put("purchasevalue", 100000+ t.nextInt(25000));
                temp.put("salevalue", 100000+ t.nextInt(25000));
                jarr.put(temp);
            }
                    jobj.put("data", jarr);
                    jobj.put("count", jarr.length());
            
//            JSONArray dataJArr = new JSONArray();
//            JSONArray returnedJArr = new JSONArray();
//            JSONObject json = getMonthlySales(request, false);
//            if (json.has(Constants.data) && json.get(Constants.data) != null) {
//                List<String> monthList = getMonthList(request.getParameter("stdate"), request.getParameter("enddate"), "MMMM, yyyy");
//                dataJArr = json.getJSONArray(Constants.data);
//                JSONObject dataObj = null;
//                for (int i = dataJArr.length()-1; i >= 0; i--) {                    
//                    if(!dataJArr.getJSONObject(i).has("customerid")){
//                        dataObj = dataJArr.getJSONObject(i);
//                        break;
//                    }
//                }
//                if(dataObj!=null){
//                    int count = 0;
//                    DateFormat df = new SimpleDateFormat("MMM yyyy");
//                    DateFormat df1 = new SimpleDateFormat("yyyy-MM-dd");
//                    JSONObject returnObj=null;
//                    for (String monthName : monthList) {
//                        returnObj = new JSONObject();
//                        Date origDate = df.parse(monthName);                        
//                        returnObj.put("accname", df1.format(origDate));
//                        returnObj.put("value", dataObj.get("amount_"+count));
//                        returnedJArr.put(returnObj);
//                        count++;
//                    }
//                    jobj.put("data", returnedJArr);
//                    jobj.put("count", returnedJArr.length());
//                }
//            }
            

            issuccess = true;

//        } catch (SessionExpiredException ex) {
//            msg = ex.getMessage();
//            Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
//
//        } catch (ServiceException ex) {
//            msg = ex.getMessage();
//            Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, ex);

        } catch (Exception ex) {
            ex.printStackTrace();
            msg = "" + ex.getMessage();
            Logger.getLogger(accInvoiceController.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                jobj.put("success", issuccess);
                jobj.put("valid", true);
                jobj.put("msg", msg);
            } catch (JSONException ex) {
                Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
           System.out.println(jobj);
        return new ModelAndView("jsonView_ex", "model", jobj.toString());
    }
    public ModelAndView getSalesReportRepGraphical(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        JSONArray jarr = new JSONArray();        
        boolean issuccess = false;
        String msg = "";

        try {
            
            JSONObject temp = new JSONObject();
            temp.put("name", "Antonio");
            temp.put("value", 5000);
            jarr.put(temp);
            temp = new JSONObject();
            temp.put("name", "Owen");
            temp.put("value", 4500);
            jarr.put(temp);
            temp = new JSONObject();
            temp.put("name", "Vicky");
            temp.put("value", 3750);
            jarr.put(temp);
            temp = new JSONObject();
            temp.put("name", "Larry");
            temp.put("value", 3190);
            jarr.put(temp);
            temp = new JSONObject();
            temp.put("name", "Bill");
            temp.put("value", 2786);
            jarr.put(temp);
            
                    jobj.put("data", jarr);
                    jobj.put("count", jarr.length());
            

            issuccess = true;


        } catch (Exception ex) {
            ex.printStackTrace();
            msg = "" + ex.getMessage();
            Logger.getLogger(accInvoiceController.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                jobj.put("success", issuccess);
                jobj.put("valid", true);
                jobj.put("msg", msg);
            } catch (JSONException ex) {
                Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
           System.out.println(jobj);
        return new ModelAndView("jsonView_ex", "model", jobj.toString());
    }
    public ModelAndView getTopProductsGraphical(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        JSONArray jarr = new JSONArray();        
        boolean issuccess = false;
        String msg = "";

        try {
            
            JSONObject temp = new JSONObject();
            temp.put("name", "Mobile");
            temp.put("color", "#00B8A9");
            temp.put("value", 5000);
            jarr.put(temp);
            temp = new JSONObject();
            temp.put("name", "tablet");
            temp.put("color", "#F8F3D4");
            temp.put("value", 4500);
            jarr.put(temp);
            temp = new JSONObject();
            temp.put("name", "Computer");
            temp.put("color", "#F6416C");
            temp.put("value", 3750);
            jarr.put(temp);
            temp = new JSONObject();
            temp.put("name", "Phone");
            temp.put("color", "#FFDE7D");
            temp.put("value", 3190);
            jarr.put(temp);
            temp = new JSONObject();
            temp.put("name", "Router");
            temp.put("color", "#252A34");
            temp.put("value", 2786);
            jarr.put(temp);
            
                    jobj.put("data", jarr);
                    jobj.put("count", jarr.length());
            

            issuccess = true;


        } catch (Exception ex) {
            ex.printStackTrace();
            msg = "" + ex.getMessage();
            Logger.getLogger(accInvoiceController.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                jobj.put("success", issuccess);
                jobj.put("valid", true);
                jobj.put("msg", msg);
            } catch (JSONException ex) {
                Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
           System.out.println(jobj);
        return new ModelAndView("jsonView_ex", "model", jobj.toString());
    }
    public ModelAndView getTopCustomersGraphical(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        JSONArray jarr = new JSONArray();        
        boolean issuccess = false;
        String msg = "";

        try {
            
            JSONObject temp = new JSONObject();
            temp.put("name", "A1 Company");
            temp.put("color", "#F9ED69");
            temp.put("value", 5000);
            jarr.put(temp);
            temp = new JSONObject();
            temp.put("name", "Xion");
            temp.put("color", "#F08A5D");
            temp.put("value", 4500);
            jarr.put(temp);
            temp = new JSONObject();
            temp.put("name", "R Consulting");
            temp.put("color", "#B83B5E");
            temp.put("value", 3750);
            jarr.put(temp);
            temp = new JSONObject();
            temp.put("name", "ABS Bowling");
            temp.put("color", "#6A2C70");
            temp.put("value", 3190);
            jarr.put(temp);
            temp = new JSONObject();
            temp.put("name", "Deskera Inside");
            temp.put("color", "#00ADB5");
            temp.put("value", 2786);
            jarr.put(temp);
            
                    jobj.put("data", jarr);
                    jobj.put("count", jarr.length());
            

            issuccess = true;


        } catch (Exception ex) {
            ex.printStackTrace();
            msg = "" + ex.getMessage();
            Logger.getLogger(accInvoiceController.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                jobj.put("success", issuccess);
                jobj.put("valid", true);
                jobj.put("msg", msg);
            } catch (JSONException ex) {
                Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
           System.out.println(jobj);
        return new ModelAndView("jsonView_ex", "model", jobj.toString());
    }
    private JSONObject getMonthlySales(HttpServletRequest request, boolean isForExport) throws JSONException, SessionExpiredException, ServiceException, ParseException {
        JSONArray DataJArr = new JSONArray();
        JSONArray pagedJson = new JSONArray();
        JSONObject jsonObject = new JSONObject();
        JSONArray jArr = new JSONArray(); //final data
        JSONArray monthArr = new JSONArray(); //months data
        int count=0;
        String start = "0",limit = "30";
        try {
            String chartType = "";
            if(!StringUtil.isNullOrEmpty(request.getParameter(Constants.CHART_TYPE))) {
                chartType = request.getParameter(Constants.CHART_TYPE);
            }
            boolean consolidateFlag = request.getParameter("consolidateFlag") != null ? Boolean.parseBoolean(request.getParameter("consolidateFlag")) : false;
            String[] companyids = (consolidateFlag && request.getParameter(Constants.companyids) != null) ? request.getParameter(Constants.companyids).split(",") : sessionHandlerImpl.getCompanyid(request).split(",");
            String gcurrencyid = (consolidateFlag && request.getParameter(Constants.globalCurrencyKey) != null) ? request.getParameter(Constants.globalCurrencyKey) : sessionHandlerImpl.getCurrencyID(request);
            HashMap requestParams = AccInvoiceServiceHandler.getInvoiceRequestMap(request);
            DateFormat df = authHandler.getDateFormatter(request);
            final DateTimeFormatter dtf = DateTimeFormat.forPattern("MMMM, yyyy");
            Date startDate = dtf.parseLocalDate(request.getParameter("stdate")).toDate();
            Date endDate = dtf.parseLocalDate(request.getParameter("enddate")).toDate();
            LocalDate localStartDate = new LocalDate(startDate);
            LocalDate localEndDate = new LocalDate(endDate);
            startDate = localStartDate.toDateTimeAtCurrentTime().dayOfMonth().withMinimumValue().toDate();
            endDate = localEndDate.toDateTimeAtCurrentTime().dayOfMonth().withMaximumValue().toDate();
            startDate.setHours(00);
            startDate.setMinutes(00);
            startDate.setSeconds(00);

            endDate.setHours(00);
            endDate.setMinutes(00);
            endDate.setSeconds(00);
            requestParams.put(Constants.REQ_startdate, df.format(startDate));
            requestParams.put(Constants.REQ_enddate, df.format(endDate));
            String companyid = "";
            if (!StringUtil.isNullOrEmpty(request.getParameter(Constants.start)) && !StringUtil.isNullOrEmpty(request.getParameter(Constants.limit))) {
                start = request.getParameter(Constants.start);
                limit = request.getParameter(Constants.limit);
            }
            for (int cnt = 0; cnt < companyids.length; cnt++) {
                companyid = companyids[cnt];
                request.setAttribute(Constants.companyKey, companyid);
                request.setAttribute(Constants.globalCurrencyKey, gcurrencyid);
                requestParams.put(Constants.companyKey, companyid);
                requestParams.put(Constants.globalCurrencyKey, gcurrencyid);

                KwlReturnObject result = accInvoiceDAOobj.getInvoicesMerged(requestParams);
                count = result.getRecordTotalCount();
                List list = result.getEntityList();
                DataJArr = accInvoiceServiceDAO.getInvoiceDetailsForMonthlySalesReport(request, list, DataJArr);
            }
            if (request.getParameter("minimumAmountDue") != null) {
                JSONArray temp = new JSONArray();
                double minimumAmountDue = Double.parseDouble(request.getParameter("minimumAmountDue").toString());
                for (int i = 0; i < DataJArr.length(); i++) {
                    if (DataJArr.getJSONObject(i).getDouble("amountdue") >= minimumAmountDue) {
                        temp.put(DataJArr.getJSONObject(i));
                    }
                }
                DataJArr = temp;
            }
            List monthList = accInvoiceServiceDAO.getMonthList(request.getParameter("stdate"), request.getParameter("enddate"), "MMMM, yyyy");
            if (!isForExport) {
                for (int i = 0; i < monthList.size(); i++) {
                    JSONObject monthObj = new JSONObject();
                    monthObj.put("monthname", monthList.get(i));
                    monthArr.put(monthObj);
                }
            }
            monthList.add("Total");
            Map customerMap = new HashMap();
            for (int invIndex = 0; invIndex < DataJArr.length(); invIndex++) {
                JSONObject invoice = DataJArr.getJSONObject(invIndex);
                String customerid = invoice.getString("personid");
                Double invoiceAmount = invoice.getDouble("amountinbase");
                LocalDate invoiceDate = new LocalDate(new Date(invoice.getString("date")));
                String monthYear = invoiceDate.toString("MMM yyyy");
                if (customerMap.containsKey(customerid)) {
                    Map monthlySalesMap = (HashMap) customerMap.get(customerid);
                    if (monthlySalesMap == null) {
                        monthlySalesMap = new HashMap();
                        monthlySalesMap.put(monthYear, invoiceAmount);
                    } else {
                        Double monthlySalesAmount = (Double) monthlySalesMap.get(monthYear);
                        if (monthlySalesAmount == null) {
                            monthlySalesMap.put(monthYear, invoiceAmount);
                        } else {
                            double amount = monthlySalesAmount.doubleValue();
                            amount += invoiceAmount.doubleValue();
                            monthlySalesMap.put(monthYear, new Double(amount));
                        }
                    }
                    if (isForExport) {//total only in export case
                        Map monthlySalesTotalMap = new HashMap();
                        if (customerMap.containsKey("Total")) {
                            monthlySalesTotalMap = (HashMap) customerMap.get("Total");
                            if (monthlySalesTotalMap.containsKey(monthYear)) {
                                double totalAmount = (Double) monthlySalesTotalMap.get(monthYear);
                                totalAmount += invoiceAmount;
                                monthlySalesTotalMap.put(monthYear, totalAmount);
                            } else {
                                monthlySalesTotalMap.put(monthYear, invoiceAmount);
                            }
                            customerMap.put("Total", monthlySalesTotalMap);
                        } else {
                            monthlySalesTotalMap = new HashMap();
                            monthlySalesTotalMap.put(monthYear, invoiceAmount);
                            customerMap.put("Total", monthlySalesTotalMap);
                        }
                    }
                } else {
                    Map monthlySalesMap = new HashMap();
                    monthlySalesMap.put(monthYear, invoiceAmount);
                    customerMap.put(customerid, monthlySalesMap);

                    if (isForExport) {
                        Map monthlySalesTotalMap = new HashMap();
                        if (customerMap.containsKey("Total")) {
                            monthlySalesTotalMap = (HashMap) customerMap.get("Total");
                            if (monthlySalesTotalMap.containsKey(monthYear)) {
                                double totalAmount = (Double) monthlySalesTotalMap.get(monthYear);
                                totalAmount += invoiceAmount;
                                monthlySalesTotalMap.put(monthYear, totalAmount);
                            } else {
                                monthlySalesTotalMap.put(monthYear, invoiceAmount);
                            }
                            customerMap.put("Total", monthlySalesTotalMap);
                        } else {
                            monthlySalesTotalMap = new HashMap();
                            monthlySalesTotalMap.put(monthYear, invoiceAmount);
                            customerMap.put("Total", monthlySalesTotalMap);
                        }
                    }
                }
            }

            Set customerSet = customerMap.keySet();
            count = customerSet.size();
            JSONObject jSONObjectTotal = new JSONObject();
            int size = monthList.size();
            double[] monthlyTotal = new double[size];
            double grandTotal = 0.0;
            for (Object object : customerSet) {
                String customerid = object.toString();
                Map monthlySalesMap = (HashMap) customerMap.get(customerid);

                JSONObject obj = new JSONObject();
                KwlReturnObject objItr = accountingHandlerDAOobj.getObject(Customer.class.getName(), customerid);
                Customer customer = (Customer) objItr.getEntityList().get(0);
                obj.put(Constants.customerid, customerid);
                obj.put("customername", customer != null ? customer.getName() : "");
                obj.put("customercode", customer != null ? customer.getAcccode() : "");
                double totalSalesAmount = 0.00;

                for (int i = 0; i < monthList.size() - 1; i++) {
                    String monthYear = (String) monthList.get(i);

                    if (monthlySalesMap.containsKey(monthYear)) {

                        double monthlySalesAmount = ((Double) monthlySalesMap.get(monthYear)).doubleValue();
                        totalSalesAmount += authHandler.round(monthlySalesAmount, companyid);

                        if (isForExport) {
                            obj.put("amount_" + i, authHandler.formattedAmount(monthlySalesAmount, companyid));
                        } else {
                            obj.put("amount_" + i, authHandler.round(monthlySalesAmount, companyid));
                        }

                        monthlyTotal[i] = 0.0 + monthlyTotal[i] + monthlySalesAmount;    //add month total for all customer

                    } else {
                        if (isForExport) {
                            obj.put("amount_" + i, authHandler.formattedAmount(0, companyid));
                        } else {
                            obj.put("amount_" + i, authHandler.formattedAmount(0, companyid));
                        }
                    }
                }
                grandTotal = grandTotal + totalSalesAmount;                                       //grand total for all customer   
                if (isForExport) {
                    obj.put("amountinbase", authHandler.formattedAmount(totalSalesAmount, companyid));
                } else {
                    obj.put("amountinbase", authHandler.round(totalSalesAmount, companyid));
                }
                if (obj.optString(Constants.customerid, "").equals("Total")) {
                    obj.put("customername", "<b>Total</b>");                    //refer ERP-4629
                    jSONObjectTotal = obj;
                } else {
                    jArr.put(obj);
                }
            }
            String direction = request.getParameter("dir") != null ? request.getParameter("dir") : "DESC";
            boolean sortedby = false;
            if (direction.equalsIgnoreCase("ASC")) {
                sortedby = true;
            }
            jArr=sortJsonArrayOnCustomerName(jArr,sortedby);
            if (!isForExport) {      //month wise total
                JSONObject obj1 = new JSONObject();
                obj1.put("customername", "Total");
                for (int j = 0; j < monthList.size() - 1; j++) {
                    obj1.put("amount_" + j, authHandler.round(monthlyTotal[j], companyid));
                }
                obj1.put("amountinbase", authHandler.round(grandTotal, companyid));
                jArr.put(obj1);
            }
            if (isForExport) {
                jArr.put(jSONObjectTotal);
            }
            if (StringUtil.equalIgnoreCase(chartType, Constants.BAR_CHART) || StringUtil.equalIgnoreCase(chartType, Constants.PIE_CHART)) {
                pagedJson = jArr;
            } else {
                pagedJson = StringUtil.getPagedJSON(jArr, Integer.parseInt(start), Integer.parseInt(limit));
            }
        } catch (Exception ex) {
            Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            jsonObject.put(Constants.data, pagedJson);
            jsonObject.put("months", monthArr);
            jsonObject.put("count", count+1);//  + 1 is added for total column
            return jsonObject;
        }
    }
    public static JSONArray sortJsonArrayOnCustomerName(JSONArray array,final boolean sortedby) throws JSONException {
        List<JSONObject> jsons = new ArrayList<JSONObject>();
        try {
            for (int i = 0; i < array.length(); i++) {
                jsons.add(array.getJSONObject(i));
            }
            Collections.sort(jsons, new Comparator<JSONObject>() {
                @Override
                public int compare(JSONObject lhs, JSONObject rhs) {
                    String lid = "", rid = ""; 
                    try {
                        lid = lhs.getString("customername");
                        rid = rhs.getString("customername");
                    } catch (JSONException ex) {
                        Logger.getLogger(accGoodsReceiptControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    return sortedby?lid.compareToIgnoreCase(rid):rid.compareToIgnoreCase(lid);
                }
            });
        } catch (JSONException ex) {
            Logger.getLogger(accGoodsReceiptControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
        }

        return new JSONArray(jsons);
    }
    public ModelAndView getMonthlySalesByProductReport(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        boolean issuccess = false,isBasedOnProduct=false;
        String msg = "",view=Constants.jsonView,stdate="",enddate="";
        int count = 0;
        try {
            JSONArray jArr = new JSONArray();
            boolean isWidgetRequest = request.getParameter("isWidgetRequest") != null ? Boolean.parseBoolean(request.getParameter("isWidgetRequest")) : false;
            boolean consolidateFlag = request.getParameter("consolidateFlag") != null ? Boolean.parseBoolean(request.getParameter("consolidateFlag")) : false;
            String gcurrencyid = (consolidateFlag && request.getParameter(Constants.globalCurrencyKey) != null) ? request.getParameter(Constants.globalCurrencyKey) : sessionHandlerImpl.getCurrencyID(request);
            isBasedOnProduct = request.getParameter("isBasedOnProduct")!=null ? Boolean.parseBoolean(request.getParameter("isBasedOnProduct")): false;
            stdate = request.getParameter("stdate")!= null ?request.getParameter("stdate"):"";
            enddate = request.getParameter("enddate")!= null?request.getParameter("enddate"):"";
//            flag for chart type
            String chartType = "";
            if(!StringUtil.isNullOrEmpty(request.getParameter(Constants.CHART_TYPE))) {
                chartType = request.getParameter(Constants.CHART_TYPE);
            }
            JSONObject tempObj = getMonthlySalesByProductReport(request, false);
            jArr = tempObj.getJSONArray(Constants.data);
//            for chart data count is not required 
            if (!StringUtil.equalIgnoreCase(chartType, Constants.BAR_CHART) && !StringUtil.equalIgnoreCase(chartType, Constants.PIE_CHART)) {
                count = tempObj.getInt("count");
            }
            JSONArray monthArray = getMonthsJSONArray(request);
//            monthArray.put(new JSONObject().put("monthname", "Total"));
            if (jArr.length() == 0) {
                jArr.put(new JSONObject().put("months", monthArray));
            } else if (!StringUtil.equalIgnoreCase(chartType, Constants.BAR_CHART) && !StringUtil.equalIgnoreCase(chartType, Constants.PIE_CHART)) {
//                monthArray not required for chart data
                JSONObject firstObject = jArr.getJSONObject(0);
                firstObject.put("months", monthArray);
            }
            //method to get column model for widget view
            if (isWidgetRequest) {
                view = "jsonView_ex";
                JSONArray ColArr = new JSONArray();
                JSONArray jarrColumns = new JSONArray();
                JSONArray jarrRecords = new JSONArray();
                JSONObject commData = new JSONObject();
                JSONObject jMeta = new JSONObject();
                HashMap<String, Object> requestParams = new HashMap<>();
                requestParams.put("locale", RequestContextUtils.getLocale(request));
                requestParams.put("isBasedOnProduct", isBasedOnProduct);
                requestParams.put("gcurrencyid", gcurrencyid);
                requestParams.put("consolidateFlag", consolidateFlag);
                requestParams.put("stdate", stdate);
                requestParams.put("enddate", enddate);
                JSONObject colModelObj = accInvoiceServiceDAO.getColumnModelForMonthlySalesReport(requestParams, ColArr);
                jarrColumns = colModelObj.getJSONArray("jarrColumns");
                jarrRecords = colModelObj.getJSONArray("jarrRecords");
                commData.put("coldata", jArr);
                commData.put("columns", jarrColumns);
                jMeta.put("totalProperty", "totalCount");
                jMeta.put("root", "coldata");
                jMeta.put("fields", jarrRecords);
                commData.put("totalCount", count);
                commData.put("metaData", jMeta);
                jobj.put(Constants.data, commData);
            } else {
                jobj.put(Constants.data, jArr);
                jobj.put("count", count);
            }
            issuccess = true;
        } catch (SessionExpiredException ex) {
            msg = ex.getMessage();
            Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ServiceException ex) {
            msg = ex.getMessage();
            Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            ex.printStackTrace();
            msg = "" + ex.getMessage();
            Logger.getLogger(accInvoiceController.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                jobj.put("success", issuccess);
                jobj.put("msg", msg);
            } catch (JSONException ex) {
                Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return new ModelAndView(view, "model", jobj.toString());
    }

    private JSONObject getMonthlySalesByProductReport(HttpServletRequest request, boolean isForExport ) throws JSONException, SessionExpiredException, ServiceException, ParseException {
        JSONObject jobj = new JSONObject();
        JSONArray DataJArr = new JSONArray();
        DateFormat df = authHandler.getDateOnlyFormat();
        final DateTimeFormatter dtf = DateTimeFormat.forPattern("MMMM, yyyy");
        Date startDate = dtf.parseLocalDate(request.getParameter("stdate")).toDate();
        Date endDate = dtf.parseLocalDate(request.getParameter("enddate")).toDate();
        String start = "0",limit = "30";
        boolean withGSTData=false; //fetch the data according to the with GST or without GST
        boolean isFromMonthySalesReport=false;
        LocalDate localStartDate = new LocalDate(startDate);
        LocalDate localEndDate = new LocalDate(endDate);
//        flag for chart type
        String chartType = "";
        if (!StringUtil.isNullOrEmpty(request.getParameter(Constants.CHART_TYPE))) {
            chartType = request.getParameter(Constants.CHART_TYPE);
        }
        String companyid = sessionHandlerImpl.getCompanyid(request);
        startDate = localStartDate.toDateTimeAtCurrentTime().dayOfMonth().withMinimumValue().toDate();
        endDate = localEndDate.toDateTimeAtCurrentTime().dayOfMonth().withMaximumValue().toDate();
        startDate.setHours(00);
        startDate.setMinutes(00);
        startDate.setSeconds(00);

        endDate.setHours(00);
        endDate.setMinutes(00);
        endDate.setSeconds(00);
        Calendar cal = Calendar.getInstance();
        cal.setTime(startDate);

        cal.setTime(endDate);

        HashMap<String, Object> requestParams1 = AccountingManager.getGlobalParams(request);
        requestParams1.put("fromDate", df.format(startDate)); 
        requestParams1.put("toDate", df.format(startDate));
        requestParams1.put("ss", request.getParameter("ss"));
        requestParams1.put("df1", authHandler.getDateOnlyFormat());
        requestParams1.put(Constants.companyKey,AccountingManager.getCompanyidFromRequest(request));
        if(!StringUtil.isNullOrEmpty(request.getParameter("gstfilterflag")) && request.getParameter("gstfilterflag").equalsIgnoreCase("0") ){
           withGSTData=true; 
        }
        if(!StringUtil.isNullOrEmpty(request.getParameter("isFromMonthySalesReport"))){
           isFromMonthySalesReport=Boolean.parseBoolean(request.getParameter("isFromMonthySalesReport")); 
        }
        requestParams1.put("withgst",withGSTData);
        requestParams1.put("isFromMonthySalesReport",isFromMonthySalesReport);
        if(!StringUtil.isNullOrEmpty(request.getParameter("productTypeID"))){
            requestParams1.put("productTypeID", request.getParameter("productTypeID") != null ? request.getParameter("productTypeID") : "");
        }
        if (!isForExport) {
            if (!StringUtil.isNullOrEmpty(request.getParameter(Constants.start)) && !StringUtil.isNullOrEmpty(request.getParameter(Constants.limit))) {
                start = request.getParameter(Constants.start);
                limit = request.getParameter(Constants.limit);
            }
            requestParams1.put("start", start);
            requestParams1.put("limit", limit);
        }
        
        KwlReturnObject result = accProductObj.getProductList((Map) requestParams1);
        List<Product> list = result.getEntityList();
        int count = result.getRecordTotalCount();
        requestParams1.remove("fromDate");
        requestParams1.remove("toDate");
        LocalDate templocalStartDate = localStartDate;
        // just a trick to include the last month as well
        localEndDate = localEndDate.plus(Period.months(1));
        if (list != null) {
            for (Product proObj : list) {
                double totalProSales = 0;
                List ll = null;
                JSONObject obj = null;
                localStartDate = templocalStartDate;
                while (localStartDate.isBefore(localEndDate)) {
                    DateTime date = localStartDate.toDateTime(LocalTime.MIDNIGHT);
                    Date startDate1, endDate1;

                    DateTime firstDateOfMonth = date.dayOfMonth().withMinimumValue();
                    Date tempDate = firstDateOfMonth.toDate();
                    Calendar cal1 = Calendar.getInstance();
                    cal1.setTime(tempDate);
                    String cal1String = authHandler.getDateOnlyFormat().format(cal1.getTime());
                    Date cal1Date = authHandler.getDateOnlyFormat().parse(cal1String);
                    startDate1 = cal1Date;
                    startDate1.setHours(00);
                    startDate1.setMinutes(00);
                    startDate1.setSeconds(00);

                    DateTime lastDateOfMonth = date.dayOfMonth().withMaximumValue();
                    lastDateOfMonth.plusDays(1);
                    
                    Calendar endcal = Calendar.getInstance();
                    Date tempEndDate = lastDateOfMonth.toDate();
                    endcal.setTime(tempEndDate);
                    String endcalString = authHandler.getDateOnlyFormat().format(endcal.getTime());
                    Date endcalDate = authHandler.getDateOnlyFormat().parse(endcalString);
                    endDate1 = endcalDate;
                    endDate1.setHours(23);
                    endDate1.setMinutes(59);
                    endDate1.setSeconds(59);

                    LocalDate invoiceDate = new LocalDate(startDate1);
                    String monthYear = invoiceDate.toString("MMM yyyy");
                    
                    SimpleDateFormat sdf = new SimpleDateFormat();
                    sdf.applyPattern(Constants.DATEFORMATINGPATTERN);
                    requestParams1.put("fromDate", startDate1);
                    requestParams1.put("toDate", endDate1);
                    
                    ll = getTotalSalesCost(requestParams1, proObj.getID());
                    totalProSales = (Double) ll.get(0);

                    obj = new JSONObject();
                    obj.put("monthYear", monthYear);
                    obj.put("productid", proObj.getID());
                    obj.put("productname", proObj.getName());
                    obj.put("amount", totalProSales);
                    DataJArr.put(obj);

                    localStartDate = localStartDate.plus(Period.months(1));
                }// end looping thru the months
            }
        }
        
        List monthList = accInvoiceServiceDAO.getMonthList(request.getParameter("stdate"), request.getParameter("enddate"), "MMMM, yyyy");
        monthList.add("Total");

        Map productMap = new HashMap();
        for (int invIndex = 0; invIndex < DataJArr.length(); invIndex++) {
            JSONObject product = DataJArr.getJSONObject(invIndex);
            String productid = product.getString("productid");
            Double invoiceAmount = product.getDouble("amount");
            String monthYear = product.getString("monthYear");
            if (productMap.containsKey(productid)) {
                Map monthlySalesMap = (HashMap) productMap.get(productid);
                if (monthlySalesMap == null) {
                    monthlySalesMap = new HashMap();
                    monthlySalesMap.put(monthYear, invoiceAmount);
                } else {
                    Double monthlySalesAmount = (Double) monthlySalesMap.get(monthYear);
                    if (monthlySalesAmount == null) {
                        monthlySalesMap.put(monthYear, invoiceAmount);
                    } else {
                        double amount = monthlySalesAmount.doubleValue();
                        amount += invoiceAmount.doubleValue();
                        monthlySalesMap.put(monthYear, new Double(amount));
                    }
                }
                if (isForExport) {//total only in export case
                    Map monthlySalesTotalMap = new HashMap();
                    if (productMap.containsKey("Total")) {
                        monthlySalesTotalMap = (HashMap) productMap.get("Total");
                        if (monthlySalesTotalMap.containsKey(monthYear)) {
                            double totalAmount = (Double) monthlySalesTotalMap.get(monthYear);
                            totalAmount += invoiceAmount;
                            monthlySalesTotalMap.put(monthYear, totalAmount);
                        } else {
                            monthlySalesTotalMap.put(monthYear, invoiceAmount);
                        }
                        productMap.put("Total", monthlySalesTotalMap);
                    } else {
                        monthlySalesTotalMap = new HashMap();
                        monthlySalesTotalMap.put(monthYear, invoiceAmount);
                        productMap.put("Total", monthlySalesTotalMap);
                    }
                }
            } else {
                Map monthlySalesMap = new HashMap();
                monthlySalesMap.put(monthYear, invoiceAmount);
                productMap.put(productid, monthlySalesMap);

                if (isForExport) {
                    Map monthlySalesTotalMap = new HashMap();
                    if (productMap.containsKey("Total")) {
                        monthlySalesTotalMap = (HashMap) productMap.get("Total");
                        if (monthlySalesTotalMap.containsKey(monthYear)) {
                            double totalAmount = (Double) monthlySalesTotalMap.get(monthYear);
                            totalAmount += invoiceAmount;
                            monthlySalesTotalMap.put(monthYear, totalAmount);
                        } else {
                            monthlySalesTotalMap.put(monthYear, invoiceAmount);
                        }
                        productMap.put("Total", monthlySalesTotalMap);
                    } else {
                        monthlySalesTotalMap = new HashMap();
                        monthlySalesTotalMap.put(monthYear, invoiceAmount);
                        productMap.put("Total", monthlySalesTotalMap);
                    }
                }
            }
        }

        JSONArray jArr = new JSONArray(); //final data
        JSONObject jSONObjectTotal = new JSONObject();
        int size = monthList.size();
        double[] monthlyTotal = new double[size];
        double grandTotal = 0.0;
        for (Product proObj : list) {
            String productid = proObj.getID();
            if (productMap.containsKey(productid)) {
                Map monthlySalesMap = (HashMap) productMap.get(productid);
                JSONObject obj = new JSONObject();
                obj.put("productid", productid);
                obj.put("pid", proObj.getProductid());
                obj.put("productname", proObj.getName());
                obj.put("salesAccountName", (proObj.getSalesAccount() != null) ? proObj.getSalesAccount().getAccountName() : "");
                double totalSalesAmount = 0.00;

                for (int i = 0; i < monthList.size() - 1; i++) {
                    String monthYear = (String) monthList.get(i);

                    if (monthlySalesMap.containsKey(monthYear)) {

                        double monthlySalesAmount = ((Double) monthlySalesMap.get(monthYear)).doubleValue();
                        totalSalesAmount += authHandler.round(monthlySalesAmount, companyid);

                        if (isForExport) {
                            obj.put("amount_" + i, authHandler.formattedAmount(monthlySalesAmount, companyid));
                        } else {
                            obj.put("amount_" + i, authHandler.round(monthlySalesAmount, companyid));
                        }

                        monthlyTotal[i] = 0.0 + monthlyTotal[i] + monthlySalesAmount;    //add month total for all product
                    } else {
                        if (isForExport) {
                            obj.put("amount_" + i, authHandler.formattedAmount(0, companyid));
                        } else {
                            obj.put("amount_" + i, authHandler.formattedAmount(0, companyid));
                        }
                    }
                }
                grandTotal = grandTotal + totalSalesAmount;                                       //grand total for all product   
                if (isForExport) {
                    obj.put("amountinbase", authHandler.formattedAmount(totalSalesAmount, companyid));
                } else {
                    obj.put("amountinbase", authHandler.round(totalSalesAmount, companyid));
                }
                if (obj.optString("productid", "").equals("Total")) {
                    obj.put("productname", "Total");
                    jSONObjectTotal = obj;
                } else {
                    jArr.put(obj);
                }
            }
        }
//        if (!isForExport) {      //month wise total
//            JSONObject obj1 = new JSONObject();
//            obj1.put("productname", "Total");
//            for (int j = 0; j < monthList.size() - 1; j++) {
//                obj1.put("amount_" + j, authHandler.round(monthlyTotal[j], 2));
//            }
//            obj1.put("amount_" + (monthList.size() - 1), authHandler.round(grandTotal, 2));
//            jArr.put(obj1);
//        }
//        if (isForExport) {
//            jArr.put(jSONObjectTotal);
//        }
        if (StringUtil.equalIgnoreCase(chartType, Constants.BAR_CHART)) {
            monthList.remove("Total");
            JSONArray chartData = new JSONArray();
            for(int i = 0; i < monthList.size(); i++) {
                JSONObject temp = new JSONObject();
                temp.put("monthname", monthList.get(i));
                double amountinbase = 0.0;
//                accounting total of each month for a product
                for (int j = 0; j < jArr.length(); j++) {
                    amountinbase += jArr.optJSONObject(j).optDouble("amount_" + i);
                }
                temp.put("amountinbase", authHandler.round(amountinbase, companyid));
                chartData.put(temp);
            }
            jobj.put(Constants.data, chartData);
        } else if (StringUtil.equalIgnoreCase(chartType, Constants.PIE_CHART)) {
            //Sort customers on amount
            jArr = AccountingManager.sortJsonArrayOnIntegerValues(jArr, "amountinbase", "desc");

            //If there are more than 10 records calculate sum of other recs and add as Others
            if (jArr.length() > Constants.MAX_LIMIT_FOR_PIE) {
                double otherAmount = 0.0;
                JSONObject otherData = new JSONObject();
                otherData.put("productname", "Others");
                for (int i = 9; i < jArr.length(); i++) {
                    otherAmount += authHandler.round(jArr.optJSONObject(i).optDouble("amountinbase", 0.0), companyid);
                    jArr.remove(i);
                    i--;
                }
                otherData.put("amountinbase", authHandler.round(otherAmount, companyid));
                jArr.put(otherData);
            }
            jobj.put(Constants.data, jArr);
        } else {
            jobj.put(Constants.data, jArr);
            jobj.put("count", count);
        }
        return jobj;
    }
    /*
     *Function for building JSON Object for Customer summary report
     */
    private JSONObject getMonthlyCustomerSalesByProductReport(HttpServletRequest request, boolean isForExport ) throws JSONException, SessionExpiredException, ServiceException, ParseException {
        JSONObject returnjson = new JSONObject();
        JSONArray finaljson = new JSONArray(); //final data
        
        DateFormat df=authHandler.getDateOnlyFormat();
        final DateTimeFormatter dtf = DateTimeFormat.forPattern("MMMM, yyyy");
        
        Date startDate = dtf.parseLocalDate(request.getParameter("stdate")).toDate();
        Date endDate = dtf.parseLocalDate(request.getParameter("enddate")).toDate();
        
        LocalDate localStartDate = new LocalDate(startDate);
        LocalDate localEndDate = new LocalDate(endDate);
        String companyid = sessionHandlerImpl.getCompanyid(request);
        startDate = localStartDate.toDateTimeAtCurrentTime().dayOfMonth().withMinimumValue().toDate();
        endDate = localEndDate.toDateTimeAtCurrentTime().dayOfMonth().withMaximumValue().toDate();
        startDate.setHours(00);
        startDate.setMinutes(00);
        startDate.setSeconds(00);
        endDate.setHours(00);
        endDate.setMinutes(00);
        endDate.setSeconds(00);
        HashMap<String, Object> requestParams = AccountingManager.getGlobalParams(request);
        requestParams.put(Constants.companyKey,AccountingManager.getCompanyidFromRequest(request));
        requestParams.put(Constants.REQ_startdate, df.format(startDate));
        requestParams.put(Constants.REQ_enddate, df.format(endDate));
        requestParams.put(Constants.ss, request.getParameter(Constants.ss));
        KwlReturnObject CustomerSalesResult = accInvoiceDAOobj.getCustomerSalesbyProduct(requestParams);
        List customersaleslist=CustomerSalesResult.getEntityList();
        HashMap<String,HashSet<String>> customerhm=new HashMap<String,HashSet<String>>();
        JSONObject obj = new JSONObject();
        double total=0.0;
        for(Object customersales:customersaleslist){
            Object[] customersalesobj=(Object[])customersales;
            /*
             *Check if customer already exists in map and if exists then add it's products and product's sale 
             */
            if(customerhm.containsKey(customersalesobj[0].toString())){
                /*
                 *Check if product already exists in map and if exists then add it's sale in perticular month
                 */
                if(customerhm.get(customersalesobj[0].toString()).contains(customersalesobj[2].toString())){
                    obj.put("amount_" + customersalesobj[9].toString() + "_" + customersalesobj[8].toString(), authHandler.formattedAmount(Double.parseDouble(customersalesobj[6].toString()), companyid));
                    total+=(Double.parseDouble(customersalesobj[6].toString()));
                }else{//if product not exists already in map then add that product and it's sale in perticular month
                    obj.put("amountinbase", authHandler.round(total, companyid));
                    finaljson.put(obj);
                    total=0;
                    obj = new JSONObject();
                    customerhm.get(customersalesobj[0].toString()).add(customersalesobj[2].toString());
                    obj.put("customerid", customersalesobj[0]);
                    obj.put("customername", customersalesobj[1]);
                    obj.put("productid", customersalesobj[2]);
                    obj.put("pid", customersalesobj[2]);
                    obj.put("productname", customersalesobj[3]);
                    obj.put("amount_" + customersalesobj[9].toString() + "_" + customersalesobj[8].toString(), authHandler.formattedAmount(Double.parseDouble(customersalesobj[6].toString()), companyid));
                    total+=(Double.parseDouble(customersalesobj[6].toString()));
                }
            }else{//if customer not exists already in map then add that customer and it's corresponding product and that product's sale for perticular month 
                if(obj.length()>0){
                    obj.put("amountinbase", authHandler.round(total, companyid));
                    finaljson.put(obj);
                    total=0;
                    obj = new JSONObject();
                }
                HashSet<String> productshs=new HashSet<String>();
                productshs.add(customersalesobj[2].toString());
                customerhm.put(customersalesobj[0].toString(),productshs);
                obj.put("customerid", customersalesobj[0]);
                obj.put("customername", customersalesobj[1]);
                obj.put("productid", customersalesobj[2]);
                obj.put("pid", customersalesobj[2]);
                obj.put("productname", customersalesobj[3]);
                obj.put("amount_" + customersalesobj[9].toString() + "_" + customersalesobj[8].toString(), authHandler.formattedAmount(Double.parseDouble(customersalesobj[6].toString()), companyid));
                total+=(Double.parseDouble(customersalesobj[6].toString()));
            }
        }
        if (obj.length() > 0) {
            obj.put("amountinbase", authHandler.round(total, companyid));
            total=0;
            finaljson.put(obj);
        }
        JSONArray pagedJson = finaljson;
        if (!StringUtil.isNullOrEmpty(request.getParameter(Constants.start)) && !StringUtil.isNullOrEmpty(request.getParameter(Constants.limit))) {
            pagedJson = StringUtil.getPagedJSON(finaljson, Integer.parseInt(request.getParameter(Constants.start)), Integer.parseInt(request.getParameter(Constants.limit)));
        }
        if(!isForExport){
            returnjson.put(Constants.data, pagedJson);
        }else{
            returnjson.put(Constants.data, finaljson);
        }
        returnjson.put("count",finaljson.length());
        return returnjson;
    }
    
    public List getTotalSalesCost(HashMap<String, Object> requestParams, String productid) throws ServiceException, ParseException {
        List ll = new ArrayList();
        try {
            DateFormat sdf = authHandler.getDateOnlyFormat();
            DateFormat df1 = (DateFormat) requestParams.get("df1");
            Date fromDate = (Date) requestParams.get("fromDate");
            fromDate = df1.parse(sdf.format(fromDate));
            Date toDate = (Date) requestParams.get("toDate");
            toDate = df1.parse(sdf.format(toDate));
            boolean withGSTData=true; //fetch the data according to the with GST or without GST
            if(requestParams.containsKey("withgst")){
                withGSTData=(Boolean)requestParams.get("withgst");
            }
            HashMap<String, Object> requestParams1 = new HashMap();
            String companyid = (String)requestParams.get(Constants.companyKey);
            requestParams1.put(Constants.companyKey, companyid);
            KwlReturnObject invoiceDetailResult = accInvoiceDAOobj.getInvoiceProductDetails(productid, fromDate, toDate, requestParams1);
            List<InvoiceDetail> invDetailList = invoiceDetailResult.getEntityList();
            double totalQuantityOut = 0;
            double totalProSales = 0;
            if (invDetailList != null) {
                for (InvoiceDetail invDetail : invDetailList) {
                    double temqua = 0;
                    double invProSales = 0;
                    HashMap hm = accInvoiceServiceDAO.applyCreditNotes(requestParams, invDetail.getInvoice());
                    if (hm.containsKey(invDetail)) {
                        Object[] val = (Object[]) hm.get(invDetail);
                        if (withGSTData) {
                            invProSales = (Double) val[0];  //Get Amount with GST
                        } else {
                            invProSales = (Double) val[3];//formula:(rate*quantity)-rowdiscount-invdiscount-cnamount[PS] 
                        }
                        temqua = (Double) val[1];
//                        KwlReturnObject crresult = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, invProSales, invDetail.getInvoice().getCurrency().getCurrencyID(), invDetail.getInvoice().getJournalEntry().getEntryDate(), invDetail.getInvoice().getExternalCurrencyRate());
                        KwlReturnObject crresult = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, invProSales, invDetail.getInvoice().getCurrency().getCurrencyID(), invDetail.getInvoice().getCreationDate(), invDetail.getInvoice().getExternalCurrencyRate());
                        invProSales = (Double) crresult.getEntityList().get(0);
                        totalQuantityOut += temqua;
                        totalProSales += invProSales;
                    }
                }
            }
            ll.add(0, totalProSales);
            ll.add(1, totalQuantityOut);
        } catch (Exception ex) {
            throw ServiceException.FAILURE("getSalesByItem : " + ex.getMessage(), ex);
        }
        return ll;
    }
        
    public ModelAndView getInvoicesByProduct(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        boolean issuccess = false;
        String msg = "";
        try {
            jobj = getInvoicesByProduct(request, false);
            issuccess = true;
        }  catch (ServiceException ex) {
            msg = ex.getMessage();
            Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            ex.printStackTrace();
            msg = "" + ex.getMessage();
            Logger.getLogger(accInvoiceController.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                jobj.put("success", issuccess);
                jobj.put("msg", msg);
            } catch (JSONException ex) {
                Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return new ModelAndView(Constants.jsonView, "model", jobj.toString());
    }

    public JSONObject getInvoicesByProduct(HttpServletRequest request, boolean isExport) throws ServiceException, ParseException {
        JSONObject jobj = new JSONObject();
        int count = 0;
        try {
            HashMap<String, Object> requestParams = AccountingManager.getGlobalParams(request);
            String productid = request.getParameter("productid");
            requestParams.put("fromDate", request.getParameter("startdate"));
            requestParams.put("toDate", request.getParameter("enddate"));
            requestParams.put("ss", request.getParameter("ss"));
            KwlReturnObject cap = accountingHandlerDAOobj.getObject(CompanyAccountPreferences.class.getName(), (String) requestParams.get(Constants.companyKey));
            CompanyAccountPreferences pref = (CompanyAccountPreferences) cap.getEntityList().get(0);
            Date fromDate = new Date(request.getParameter("startdate"));
            Date toDate = new Date(request.getParameter("enddate"));
            requestParams.put("productid", request.getParameter("productid"));
            JSONArray jArr = new JSONArray();

            HashMap<String, Object> requestParams1 = new HashMap();
            String companyid = AccountingManager.getCompanyidFromRequest(request);
            String start = request.getParameter("start");
            String limit = request.getParameter("limit");
            requestParams1.put(Constants.companyKey, companyid);
            if (!isExport) {
                requestParams1.put("start", start);
                requestParams1.put("limit", limit);
            }
            KwlReturnObject invoiceDetaailResult = accInvoiceDAOobj.getInvoiceProductDetails(productid, fromDate, toDate,requestParams1);
            Iterator itr1 = invoiceDetaailResult.getEntityList().iterator();
            count = invoiceDetaailResult.getRecordTotalCount();
            while (itr1.hasNext()) {
                InvoiceDetail invDetail = (InvoiceDetail) itr1.next();
                HashMap hm = accInvoiceServiceDAO.applyCreditNotes(requestParams, invDetail.getInvoice());
                if (hm.containsKey(invDetail)) {
                    Object[] val = (Object[]) hm.get(invDetail);
                    double temqua = (Double) val[1];
                    double invProSales = 0;
                    double invProSalesinbase = 0;
                    double rateinbase = 0;
                    if (temqua > 0) {
                        double rowTaxPercent = 0;
                        double rowTaxAmount = 0;
                        boolean isRowTaxApplicable = false;
                        if (invDetail.getTax() != null) {
//                            KwlReturnObject perresult = accTaxObj.getTaxPercent((String) requestParams.get(Constants.companyKey), invDetail.getInvoice().getJournalEntry().getEntryDate(), invDetail.getTax().getID());
                            KwlReturnObject perresult = accTaxObj.getTaxPercent((String) requestParams.get(Constants.companyKey), invDetail.getInvoice().getCreationDate(), invDetail.getTax().getID());
                            rowTaxPercent = (Double) perresult.getEntityList().get(0);
                            isRowTaxApplicable = (Boolean) perresult.getEntityList().get(1);
                        }
                        invProSales = ((invDetail.getRate() * temqua) - (invDetail.getDiscount() == null ? 0 : invDetail.getDiscount().getDiscountValue()));
                        if (invDetail.isWasRowTaxFieldEditable()) { //After made row tax field editable tax calculation will be take place according to row tax amount. -From DATE - 28 -Jan-2014
                            if (isRowTaxApplicable) {
                                rowTaxAmount = invDetail.getRowTaxAmount() + invDetail.getRowTermTaxAmount();
                            }
                        } else {// for earlier invoices it will be done according to row tax percent as selected in Tax combo column.
                            rowTaxAmount = invProSales * rowTaxPercent / 100;
                        }
                        invProSales += rowTaxAmount;//invProSales += rowTaxPercent > 0 ?((rowTaxPercent * invProSales)/100) : 0;
                    }

//                    KwlReturnObject crresult = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, invProSales, invDetail.getInvoice().getCurrency().getCurrencyID(), invDetail.getInvoice().getJournalEntry().getEntryDate(), invDetail.getInvoice().getExternalCurrencyRate());
                    KwlReturnObject crresult = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, invProSales, invDetail.getInvoice().getCurrency().getCurrencyID(), invDetail.getInvoice().getCreationDate(), invDetail.getInvoice().getExternalCurrencyRate());
                    invProSalesinbase = (Double) crresult.getEntityList().get(0);
//                    rateinbase = (Double) accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, (invDetail.getRate()), invDetail.getInvoice().getCurrency().getCurrencyID(), invDetail.getInvoice().getJournalEntry().getEntryDate(), invDetail.getInvoice().getExternalCurrencyRate()).getEntityList().get(0);
                    rateinbase = (Double) accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, (invDetail.getRate()), invDetail.getInvoice().getCurrency().getCurrencyID(), invDetail.getInvoice().getCreationDate(), invDetail.getInvoice().getExternalCurrencyRate()).getEntityList().get(0);
                    JSONObject obj = new JSONObject();
                    obj.put("currencysymbol", invDetail.getInvoice().getCurrency().getSymbol());
                    obj.put("productname", invDetail.getInventory().getProduct().getName());
                    obj.put("productdescription", StringUtil.isNullOrEmpty(invDetail.getDescription()) ? "" : invDetail.getDescription());
                    obj.put("productid", invDetail.getInventory().getProduct().getID());
                    obj.put("billno", invDetail.getInvoice().getInvoiceNumber());
                    obj.put("invoiceid", invDetail.getInvoice().getID());
//                    obj.put("date", authHandler.getGlobalDateFormat().format(invDetail.getInvoice().getJournalEntry().getEntryDate()));
                    obj.put("date", authHandler.getGlobalDateFormat().format(invDetail.getInvoice().getCreationDate()));
                    obj.put("duedate", authHandler.getGlobalDateFormat().format(invDetail.getInvoice().getDueDate()));
                    obj.put("memo", invDetail.getInvoice().getMemo());
                    obj.put("rateinbase", rateinbase); // Sales Price 
                    obj.put("amount", invProSales); // Amount 
                    obj.put("amountinbase", invProSalesinbase); // Amount 
                    jArr.put(obj);
                }
            }
            
                jobj.put(Constants.data, jArr);
                jobj.put("count", jArr.length());

        } catch (SessionExpiredException ex) {
            throw ServiceException.FAILURE("getSalesByItem : " + ex.getMessage(), ex);
        } catch (JSONException ex) {
            throw ServiceException.FAILURE("getSalesByItem : " + ex.getMessage(), ex);
        }
        return jobj;
    }
    

    public ModelAndView exportMonthlySales(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        String view = "jsonView_ex";
        try {
            JSONArray jArr = new JSONArray();
            int count = 0;
            boolean isBasedOnProduct = request.getParameter("isBasedOnProduct") != null ? Boolean.parseBoolean(request.getParameter("isBasedOnProduct")) : false;
            if(isBasedOnProduct){
                JSONObject tempObj = getMonthlySalesByProductReport(request, true);
                jArr = tempObj.getJSONArray(Constants.data);
            }else{
                JSONObject json = getMonthlySales(request, true);
                if (json.has(Constants.data) && json.get(Constants.data) != null) {
                    jArr = json.getJSONArray(Constants.data);
                }
            }
            
            jobj.put(Constants.data, jArr);

            String fileType = request.getParameter("filetype");
            if (StringUtil.equal(fileType, "print")) {
                String stDate = request.getParameter("stdate");
                String edDate = request.getParameter("enddate");
                if (!StringUtil.isNullOrEmpty(stDate) && !StringUtil.isNullOrEmpty(edDate)) {
                    DateTimeFormatter dtf = DateTimeFormat.forPattern("MMMM, yyyy");
                    Date startDate = dtf.parseLocalDate(request.getParameter("stdate")).toDate();
                    Date endDate = dtf.parseLocalDate(request.getParameter("enddate")).toDate();

                    LocalDate localStartDate = new LocalDate(startDate);
                    LocalDate localEndDate = new LocalDate(endDate);

                    startDate = localStartDate.toDateTimeAtCurrentTime().dayOfMonth().withMinimumValue().toDate();
                    endDate = localEndDate.toDateTimeAtCurrentTime().dayOfMonth().withMaximumValue().toDate();
                    startDate.setHours(00);
                    startDate.setMinutes(00);
                    startDate.setSeconds(00);

                    endDate.setHours(00);
                    endDate.setMinutes(00);
                    endDate.setSeconds(00);
                    stDate = authHandler.getDateOnlyFormat().format(startDate);
                    edDate = authHandler.getDateOnlyFormat().format(endDate);
                    jobj.put("isFromToDateRequired", true);
                    jobj.put("stdate", stDate);
                    jobj.put("enddate", edDate);
                } else {
                    String GenerateDate = authHandler.getDateOnlyFormat().format(new Date());
                    jobj.put("GenerateDate", GenerateDate);
                }
                view = "jsonView-empty";
            }
            exportDaoObj.processRequest(request, response, jobj);
        } catch (SessionExpiredException ex) {
            Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
        }
        return new ModelAndView(view, "model", jobj.toString());
    }

    private JSONArray getMonthsJSONArray(HttpServletRequest request) throws JSONException {
        List monthList = accInvoiceServiceDAO.getMonthList(request.getParameter("stdate"), request.getParameter("enddate"), "MMMM, yyyy");
        JSONArray monthArray = new JSONArray();
        for (int i = 0; i < monthList.size(); i++) {
            JSONObject monthObj = new JSONObject();
            monthObj.put("monthname", monthList.get(i));
            monthArray.put(monthObj);
        }
        return monthArray;
    }
    
   public ModelAndView exportSingleInvoice(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        String view = "jsonView-empty";
        try {
            HashMap<String, Object>otherconfigrequestParams = new HashMap();
            String invoiceID = request.getParameter("bills");
            String companyid = AccountingManager.getCompanyidFromRequest(request);
            String recordids = "";
            boolean isConsignment = Boolean.parseBoolean(request.getParameter(Constants.isConsignment));
            boolean isLeaseFixedAsset = Boolean.parseBoolean(request.getParameter(Constants.isLeaseFixedAsset));
            int moduleid = Integer.parseInt(request.getParameter(Constants.moduleid));

            if(isLeaseFixedAsset){
                moduleid = Constants.LEASE_INVOICE_MODULEID;
            }
            /**
             * change module id for asset module
             */
            boolean isFixedAsset = false;
            if (!StringUtil.isNullOrEmpty(request.getParameter(Constants.isFixedAsset))) {
                isFixedAsset = Boolean.parseBoolean(request.getParameter(Constants.isFixedAsset));
            }
            if(isFixedAsset){
                moduleid = Constants.Acc_FixedAssets_DisposalInvoice_ModuleId;
            }
            if (!StringUtil.isNullOrEmpty(request.getParameter("recordids"))) {
                recordids = request.getParameter("recordids");
            }
            ArrayList<String> invoiceIDList = CustomDesignHandler.getSelectedBillIDs(recordids);
            KwlReturnObject objItr = accountingHandlerDAOobj.getObject(Invoice.class.getName(), invoiceID);
            Invoice invoice = (Invoice) objItr.getEntityList().get(0);
            AccCustomData  accCustomData = null;
            HashMap<String, Object> fieldrequestParams = new HashMap();
            fieldrequestParams.put(Constants.filter_names, Arrays.asList(Constants.companyid, Constants.moduleid,Constants.customcolumn));
            fieldrequestParams.put(Constants.filter_values, Arrays.asList(companyid, moduleid,1));
            HashMap<String, String> replaceFieldMap = new HashMap<String, String>();
            HashMap<String, Integer> FieldMap = accAccountDAOobj.getFieldParamsMap(fieldrequestParams, replaceFieldMap);
            replaceFieldMap = new HashMap<String, String>();
            /*
             * Dimensions----Customcolumn=1-lineitem;Customfield=0=Dimension
             */
            fieldrequestParams.clear();
            HashMap<String, String> dimensionFieldMap = new HashMap<String, String>();
            fieldrequestParams.put(Constants.filter_names, Arrays.asList(Constants.companyid, Constants.moduleid, Constants.customcolumn, Constants.customfield));
            fieldrequestParams.put(Constants.filter_values, Arrays.asList(companyid, moduleid, 1, 0));
            HashMap<String, Integer> DimensionFieldMap = accAccountDAOobj.getFieldParamsMap(fieldrequestParams, dimensionFieldMap);
            
            fieldrequestParams.clear();
            HashMap<String, String> customfieldFieldMap = new HashMap<String, String>();
            fieldrequestParams.put(Constants.filter_names, Arrays.asList(Constants.companyid, Constants.moduleid, Constants.customcolumn, Constants.customfield));
            fieldrequestParams.put(Constants.filter_values, Arrays.asList(companyid, moduleid, 1, 1));
            HashMap<String, Integer> LineLevelCustomFieldMap = accAccountDAOobj.getFieldParamsMap(fieldrequestParams, customfieldFieldMap);
            /**
             * reset module id
             */
            if(isFixedAsset){
                moduleid = Constants.Acc_Invoice_ModuleId;
            }
            //For product custom field
            fieldrequestParams.clear();
            HashMap<String, String> productCustomfieldFieldMap = new HashMap<String, String>();
            fieldrequestParams.put(Constants.filter_names, Arrays.asList(Constants.companyid, Constants.moduleid, Constants.customcolumn));
            fieldrequestParams.put(Constants.filter_values, Arrays.asList(companyid, Constants.Acc_Product_Master_ModuleId, 0));
            HashMap<String, Integer> ProductLevelCustomFieldMap = accAccountDAOobj.getFieldParamsMap(fieldrequestParams, productCustomfieldFieldMap);

            
            HashMap<String, JSONArray> itemDataAgainstInvoice = new HashMap<String, JSONArray>();
            boolean isJobOrderFlow = false;
            String templateSubType = request.getParameter("templatesubtype") != null ? request.getParameter("templatesubtype") : "0";
            
            HashMap<String, Object> paramMap = new HashMap();
            paramMap.put(Constants.fieldMap, FieldMap);
            paramMap.put(Constants.replaceFieldMap, replaceFieldMap);
            paramMap.put(Constants.dimensionFieldMap, DimensionFieldMap);
            paramMap.put(Constants.lineLevelCustomFieldMap, LineLevelCustomFieldMap);
            paramMap.put(Constants.productLevelCustomFieldMap, ProductLevelCustomFieldMap);
            JSONObject requestObj = StringUtil.convertRequestToJsonObject(request);
            
            if(templateSubType.equals(Constants.SUBTYPE_JOB_ORDER) || templateSubType.equals(Constants.SUBTYPE_JOB_ORDER_LABEL)){ // Job Order Flow
                isJobOrderFlow = true;
                for(int count=0 ; count < invoiceIDList.size() ; count++ ){
                    HashMap<String, JSONArray>  itemData = new HashMap<String, JSONArray>();
                    itemData =  accInvoiceCommon.getSIDetailsJobOrderFlowItemJSON(requestObj, invoiceIDList.get(count), paramMap);
                    if(!itemData.isEmpty()){
                        // get recordids
                        String tempRecordIds = itemData.get("recordids").toString();
                        tempRecordIds = tempRecordIds.substring(1, tempRecordIds.length()-1);
                        tempRecordIds = tempRecordIds.replaceAll("\"", "");
                        // append recordids to existing recordids
                        if(count == 0){// if first iteration no existing recordids
                            recordids = tempRecordIds;
                        } else{// If existing recordids
                            recordids = recordids + "," + tempRecordIds;
                        }
                        itemDataAgainstInvoice.putAll(itemData);

                        // Below Function called to update print flag for SO Report
                        accCommonTablesDAO.updatePrintFlag(moduleid, invoiceIDList.get(count), companyid);
                    }
                }
                itemDataAgainstInvoice.remove("recordids"); // Remove recordids field
                otherconfigrequestParams.put("recordids", recordids);// Put recordids
            } else{
                for (int count = 0; count < invoiceIDList.size(); count++) {
                    JSONArray lineItemsArr = accInvoiceCommon.getInvoiceDetailsItemJSON(requestObj, invoiceIDList.get(count), paramMap);
                    itemDataAgainstInvoice.put(invoiceIDList.get(count), lineItemsArr);
                    
                    // Below Function called to update print flag for SI Report
                    accCommonTablesDAO.updatePrintFlag(moduleid, invoiceIDList.get(count), companyid);
                }
            }
            String invoicePostText=invoice.getPostText()==null?"":invoice.getPostText();
            otherconfigrequestParams.put(Constants.moduleid, moduleid);
            otherconfigrequestParams.put(Constants.isConsignment,isConsignment);
            otherconfigrequestParams.put(Constants.isJobOrderFlow, isJobOrderFlow);
            if (!itemDataAgainstInvoice.isEmpty()) {
                ExportRecordHandler.exportSingleGeneric(request, response, itemDataAgainstInvoice, accCustomData, customDesignDAOObj, accCommonTablesDAO, accAccountDAOobj, accountingHandlerDAOobj,
                        velocityEngine, invoicePostText, otherconfigrequestParams, accInvoiceServiceDAO, accGoodsReceiptServiceDAOObj);
            } else {
                String errHTML = CustomDesignHandler.getErrorHtmlForDD(request);
                response.setContentType("text/html;charset=UTF-8");
                response.getOutputStream().write(errHTML.getBytes());
                response.getOutputStream().flush();
                response.getOutputStream().close();
            }

        } catch (SessionExpiredException ex) {
            Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
        } catch(Exception ex) {
            Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
        }
        return new ModelAndView(view, "model", jobj.toString());
    }


    /*Credit Note*/
    public void exportSingleCreditNote(HttpServletRequest request, HttpServletResponse response) throws ServiceException, SessionExpiredException {
        try {
            JSONObject requestObj = StringUtil.convertRequestToJsonObject(request);
            HashMap<String, Object>otherconfigrequestParams = new HashMap();
            String SOID = requestObj.optString("bills");
            String companyid = requestObj.optString(Constants.companyKey);

            int moduleid = requestObj.optInt(Constants.moduleid);
            otherconfigrequestParams.put(Constants.moduleid, moduleid);  

            KwlReturnObject objItr = accountingHandlerDAOobj.getObject(CreditNote.class.getName(), SOID);
            AccCustomData  accCustomData = null;
            String recordids = requestObj.optString("recordids");
            ArrayList<String> SOIDList = CustomDesignHandler.getSelectedBillIDs(recordids);         
            HashMap<String, Object> fieldrequestParams = new HashMap();
            fieldrequestParams.put(Constants.filter_names, Arrays.asList(Constants.companyid, Constants.moduleid,Constants.customcolumn));
            fieldrequestParams.put(Constants.filter_values, Arrays.asList(companyid, Constants.Acc_Credit_Note_ModuleId,1));
            HashMap<String, String> replaceFieldMap = new HashMap<String, String>();
            HashMap<String, Integer> FieldMap = accAccountDAOobj.getFieldParamsMap(fieldrequestParams, replaceFieldMap);
            replaceFieldMap = new HashMap<String, String>();        

            /*
             * Dimensions----Customcolumn=1-lineitem;Customfield=0=Dimension
             */
            fieldrequestParams.clear();
            HashMap<String, String> dimensionFieldMap = new HashMap<String, String>();
            fieldrequestParams.put(Constants.filter_names, Arrays.asList(Constants.companyid, Constants.moduleid, Constants.customcolumn, Constants.customfield));
            fieldrequestParams.put(Constants.filter_values, Arrays.asList(companyid, Constants.Acc_Credit_Note_ModuleId, 1, 0));
            HashMap<String, Integer> DimensionFieldMap = accAccountDAOobj.getFieldParamsMap(fieldrequestParams, dimensionFieldMap);

            fieldrequestParams.clear();
            HashMap<String, String> customfieldFieldMap = new HashMap<String, String>();
            fieldrequestParams.put(Constants.filter_names, Arrays.asList(Constants.companyid, Constants.moduleid, Constants.customcolumn, Constants.customfield));
            fieldrequestParams.put(Constants.filter_values, Arrays.asList(companyid, Constants.Acc_Credit_Note_ModuleId, 1, 1));
            HashMap<String, Integer> LineLevelCustomFieldMap = accAccountDAOobj.getFieldParamsMap(fieldrequestParams, customfieldFieldMap);

            HashMap<String, JSONArray> itemDataCreditNote = new HashMap<String, JSONArray>();
            
            HashMap<String, Object> paramMap = new HashMap();
            paramMap.put(Constants.fieldMap, FieldMap);
            paramMap.put(Constants.replaceFieldMap, replaceFieldMap);
            paramMap.put(Constants.dimensionFieldMap, DimensionFieldMap);
            paramMap.put(Constants.lineLevelCustomFieldMap, LineLevelCustomFieldMap);
            
            for (int count = 0; count < SOIDList.size(); count++) {
                JSONArray lineItemsArr = getCNDetailsItemJSON(requestObj, SOIDList.get(count), paramMap);
                itemDataCreditNote.put(SOIDList.get(count), lineItemsArr);

                // Below Function called to update print flag for GR Report
                accCommonTablesDAO.updatePrintFlag(moduleid, SOIDList.get(count), companyid);
            }

            String invoicePostText="";
            ExportRecordHandler.exportSingleGeneric(request, response,itemDataCreditNote,accCustomData,customDesignDAOObj,accCommonTablesDAO,accAccountDAOobj, accountingHandlerDAOobj,velocityEngine,invoicePostText,otherconfigrequestParams,accInvoiceServiceDAO,accGoodsReceiptServiceDAOObj);
        } catch (JSONException ex) {
            Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

   public JSONArray getCNDetailsItemJSON(JSONObject requestObj, String SOID, HashMap<String, Object> paramMap) {
        JSONArray jArr = new JSONArray();
        try {
            PdfTemplateConfig config=null;
            java.util.Date entryDate = null;
            JSONArray accJSONArr = new JSONArray();
            JSONArray invJSONArr = new JSONArray();
            double totalwithtax = 0, amountdue=0;
            List<Object> list = new ArrayList<Object>();
            JSONArray dbCustomJSONArr = new JSONArray();
            //variables to append all accounts and invoices fields 
            String invoiceNos = "";
            String invAmounts = "";
            String invTaxAmounts = "";
            String invAmountDues = "";
            String invEnterAmounts = "";
            String invoicedates="";
            double invoicesubtotal = 0;
            double invoicetotaltax = 0;
            double invoicetotalamount = 0;
            boolean isotherwisecase=false;
            String accCodes="";
            String accNames = "";
            String accTaxNames = "";
            String accAmounts = "";
            String accTaxAmounts = "", accAmountExcludeGST = "", gstin = "";
            String accAmountWithTaxes = "";
            String accDescriptions = "",accTaxPercent="",accReason = "";
            double accountsubtotal=0,accounttotaltax=0,accounttotalamount=0;
            double bascurrencyaccountsubtotal=0,bascurrencyaccounttotaltax=0,basecurrencyaccounttotalamount=0;
            double bascurrencyinvoicesubtotal = 0, bascurrencyinvoicetotaltax = 0, basecurrencyinvoicetotalamount = 0;
            String invoiceSalesPerson="",salespersonvalue="";
            boolean isIncludeGST = false;
            Set<String> salesperson = new HashSet<String>();
            String GSTExchangeRate = ""; //used for singapore GST where company has singapore country and base curreny other than SGD
            
            HashMap<String, Integer> FieldMap = (HashMap<String, Integer>) paramMap.get(Constants.fieldMap);
            HashMap<String, String> replaceFieldMap = (HashMap<String, String>) paramMap.get(Constants.replaceFieldMap);
            HashMap<String, Integer> DimensionFieldMap = (HashMap<String, Integer>) paramMap.get(Constants.dimensionFieldMap);
            HashMap<String, Integer> LineLevelCustomFieldMap = (HashMap<String, Integer>) paramMap.get(Constants.lineLevelCustomFieldMap);
            String companyid = requestObj.optString(Constants.companyKey);
            
            String creditterm="",memo = "",billAddre = "",shipAddr = "",billAddr = "",customerEmail = "",customerName = "",terms = "",globallevelcustomfields="",globalleveldimensions="";
            double subTotal = 0,totaltax=0;
            int quantitydigitafterdecimal = 2, amountdigitafterdecimal = 2, unitpricedigitafterdecimal = 2;
            String custAccountNo="",custaccountcodeno="",customervendorcode="", customerOrVendorTitle = "",VATTInnumber = "",CSTTInNumber = "",custOrVendorPanNumber="";
            String allLineLevelTax="", allLineLevelTaxAmount = "", allLineLevelTaxBasic = "", taxName = "", taxPercent = "", taxAmount = "";
            Set<String> lineLevelTaxesGST = new HashSet<String>();
            Map<String, Object> lineLevelTaxAmountGST = new HashMap<String, Object>();
            Map<String, Object> lineLevelTaxPercentGST = new HashMap<String, Object>();
            Map<String, Object> lineLevelTaxBasicGST = new HashMap<String, Object>();
            Map<String,Double> lineLevelTaxNames = new LinkedHashMap<String,Double>();
            int count=1;
//            Date invoicedates = new Date();
            DateFormat df = authHandler.getUserDateFormatterWithoutTimeZone(requestObj);
            JSONArray DataJArr = new JSONArray(); 
            HashMap<String, Object> requestParams = AccountingManager.getGlobalParams(requestObj);
            HashMap<String, Object> soRequestParams = new HashMap<String, Object>();
            ArrayList filter_names = new ArrayList(), filter_params = new ArrayList(), order_by = new ArrayList(), order_type = new ArrayList();
            String currencyid = "", netCreditTerm = "";

            KwlReturnObject resultcompany = accountingHandlerDAOobj.getObject(CompanyAccountPreferences.class.getName(), companyid);
            CompanyAccountPreferences companyAccountPreferences = (CompanyAccountPreferences) resultcompany.getEntityList().get(0);
            KwlReturnObject extraprefresult = accountingHandlerDAOobj.getObject(ExtraCompanyPreferences.class.getName(), companyid);
            ExtraCompanyPreferences extraCompanyPreferences = (ExtraCompanyPreferences) extraprefresult.getEntityList().get(0);
            
            int countryLanguageId = Constants.OtherCountryLanguageId; // 0
            if (extraCompanyPreferences.isAmountInIndianWord()) {
                countryLanguageId = Constants.CountryIndiaLanguageId; //for india id is 1;
            }
            int countryid = 0;
            if(extraCompanyPreferences.getCompany() != null && extraCompanyPreferences.getCompany().getCountry()!= null && !StringUtil.isNullOrEmpty(extraCompanyPreferences.getCompany().getCountry().getID())){
                countryid = Integer.parseInt(extraCompanyPreferences.getCompany().getCountry().getID());
            }
            Product product = null;
            
            KwlReturnObject accResult = accAccountDAOobj.quotationindecimalforcompany(companyid);
            if (accResult.getEntityList().get(0) != null) {
                Object[] decimalcontact = (Object[]) accResult.getEntityList().get(0);
                if (decimalcontact[1] != null) {
                    quantitydigitafterdecimal = (Integer) decimalcontact[1];
                }
                if (decimalcontact[2] != null) {//getting amount in decimal value from companyaccpreferences
                    amountdigitafterdecimal = (Integer) decimalcontact[2];
                }
                if (decimalcontact[3] != null) {
                    unitpricedigitafterdecimal = Integer.parseInt(decimalcontact[3].toString());
                }
            }
            String templateid = requestObj.optString("templateid");
            KwlReturnObject tempResult = customDesignDAOObj.getDesignTemplate(templateid);
            List Templist1 = tempResult.getEntityList();
            Object[] templateRow = (Object[]) Templist1.get(0);
            String templateSubtype = templateRow[8] != null ? templateRow[8].toString() : "";
            KwlReturnObject cap = kwlCommonTablesDAOObj.getObject(CreditNote.class.getName(), SOID);
            CreditNote creditNote = (CreditNote) cap.getEntityList().get(0);
            Set<JournalEntryDetail> entryset = creditNote.getJournalEntry().getDetails();
            Customer customerObj = new Customer();
            Iterator itr = entryset.iterator();
            Account cEntry = null;
            currencyid = (creditNote.getCurrency() == null) ? currencyid : creditNote.getCurrency().getCurrencyID();
            while (itr.hasNext()) {
                cEntry = ((JournalEntryDetail) itr.next()).getAccount();
                customerObj = (Customer) kwlCommonTablesDAOObj.getClassObject(Customer.class.getName(), cEntry.getID());
                if (customerObj != null) {
                    break;
                }
            }
            /**
             * get customer/vendor title (Mr./Mrs.)
             */
            if (creditNote.getCustomer() != null) {
                customerOrVendorTitle = creditNote.getCustomer().getTitle();
                VATTInnumber = creditNote.getCustomer().getVATTINnumber() != null ? creditNote.getCustomer().getVATTINnumber() : "";
                CSTTInNumber = creditNote.getCustomer().getCSTTINnumber() != null ? creditNote.getCustomer().getCSTTINnumber() : "";
                custOrVendorPanNumber = creditNote.getCustomer().getPANnumber()!= null ? creditNote.getCustomer().getPANnumber() : "";
                gstin = creditNote.getCustomer().getGSTIN() != null ? creditNote.getCustomer().getGSTIN() : "";
            } else if (creditNote.getVendor() != null) {
                customerOrVendorTitle = creditNote.getVendor().getTitle();
                VATTInnumber = creditNote.getVendor().getVATTINnumber() != null ? creditNote.getVendor().getVATTINnumber() : "";
                CSTTInNumber = creditNote.getVendor().getCSTTINnumber() != null ? creditNote.getVendor().getCSTTINnumber() : "";
                custOrVendorPanNumber = creditNote.getVendor().getPANnumber()!= null ? creditNote.getVendor().getPANnumber() : "";
                gstin = creditNote.getVendor().getGSTIN() != null ? creditNote.getVendor().getGSTIN() : "";
            }
            if(!StringUtil.isNullOrEmpty(customerOrVendorTitle)){
                KwlReturnObject masterItemResult = accountingHandlerDAOobj.getObject(MasterItem.class.getName(), customerOrVendorTitle);
                MasterItem masterItem = (MasterItem) masterItemResult.getEntityList().get(0);
                customerOrVendorTitle = masterItem.getValue();
            }
            //Calculating account grid and its values
            String crNoteId = SOID;
            KwlReturnObject result = accountingHandlerDAOobj.getObject(CreditNote.class.getName(), crNoteId);
            CreditNote cn = (CreditNote) result.getEntityList().get(0);
            creditterm=cn.getCustomer()==null?String.valueOf(cn.getVendor().getDebitTerm().getTermdays()):String.valueOf(cn.getCustomer().getCreditTerm().getTermdays());
            netCreditTerm=cn.getCustomer()==null?String.valueOf(cn.getVendor().getDebitTerm().getTermname()):String.valueOf(cn.getCustomer().getCreditTerm().getTermname());
            custaccountcodeno=cn.getCustomer()==null?(cn.getVendor().getAccount().getAcccode()!=null?cn.getVendor().getAccount().getAcccode():""):(cn.getCustomer().getAccount().getAcccode()!=null?cn.getCustomer().getAccount().getAcccode():"");
            custAccountNo=cn.getCustomer()==null?(cn.getVendor().getAccount().getAccountName()!=null?cn.getVendor().getAccount().getAccountName():""):(cn.getCustomer().getAccount().getAccountName()!=null?cn.getCustomer().getAccount().getAccountName():"");
            customervendorcode=cn.getCustomer()==null?(cn.getVendor().getAcccode()!=null?cn.getVendor().getAccount().getAcccode():""):(cn.getCustomer().getAcccode()!=null?cn.getCustomer().getAcccode():"");
            isIncludeGST = cn.isIncludingGST();
            /*
             * ExchangeRate values
             */
            double externalcurrency = cn.getExternalCurrencyRate();
            double revExchangeRate = 0.0;
            if (externalcurrency != 0) {
                revExchangeRate = 1 / externalcurrency;
            }
            
            if (cn != null) {
                /*
                 * Template Sub Type 
                 * 0 - Credit Note 
                 * 1 - Credit Note with Sales
                 * Return
                 * 7 - Undercharged CN
                 * 8 - Overcharged CN
                 */
                if (!templateSubtype.equals("1") && !templateSubtype.equals(CustomDesignerConstants.UNDERCHARGE_SUBTYPE) && !templateSubtype.equals(CustomDesignerConstants.OVERCHARGE_SUBTYPE)) {
                    Set<CreditNoteTaxEntry> cnTaxEntryDetails = cn.getCnTaxEntryDetails();
                    Set<CreditNoteTaxEntry> Creditnotedetails = new TreeSet<CreditNoteTaxEntry>(new Comparator<CreditNoteTaxEntry>() {

                        @Override
                        public int compare(CreditNoteTaxEntry CN1, CreditNoteTaxEntry CN2) {
                            if (CN1.getSrNoForRow() > CN2.getSrNoForRow()) {
                                return 1;
                            } else {
                                return -1;
                            }
                        }
                    });

                    Creditnotedetails.addAll(cnTaxEntryDetails);

                    if (cnTaxEntryDetails != null && !cnTaxEntryDetails.isEmpty()) {

                        HashMap<String, Object> fieldrequestParams = new HashMap();
                        HashMap<String, String> customFieldMap = new HashMap<String, String>();
                        HashMap<String, String> customDateFieldMap = new HashMap<String, String>();
                        fieldrequestParams.put(Constants.filter_names, Arrays.asList(Constants.companyid, Constants.moduleid));
                        fieldrequestParams.put(Constants.filter_values, Arrays.asList(cn.getCompany().getCompanyID(), Constants.Acc_Credit_Note_ModuleId));
                        HashMap<String, String> replaceFieldMap1 = new HashMap<String, String>();
                        HashMap<String, Integer> FieldMap1 = accAccountDAOobj.getFieldParamsCustomMap(fieldrequestParams, replaceFieldMap1, customFieldMap, customDateFieldMap);
                        
                        for (CreditNoteTaxEntry noteTaxEntry : Creditnotedetails) {
                            String lineLevelTax = "";
                            String lineLevelTaxPercent = "";
                            String lineLevelTaxAmount = "";
                            double lineLevelTaxAmountTotal = 0;
                            JSONObject obj = new JSONObject();
                            if(extraCompanyPreferences.isIsNewGST()){ // for New gst check 
                                JSONObject json = new JSONObject();
                                json.put("creditNoteTaxEntry", noteTaxEntry.getID());
                                KwlReturnObject cnTermResult = accCreditNoteDAOobj.getCreditNoteDetailTermMap(json);
                                if (cnTermResult.getEntityList() != null && cnTermResult.getEntityList().size() > 0 && cnTermResult.getEntityList().get(0) != null) {
                                    ArrayList<CreditNoteDetailTermMap> productTermDetail = (ArrayList<CreditNoteDetailTermMap>) cnTermResult.getEntityList();
                                    JSONArray productTermJsonArry = new JSONArray();
                                    double termAccount = 0.0;
                                    obj.put(CustomDesignerConstants.CGSTPERCENT, 0);
                                    obj.put(CustomDesignerConstants.CGSTAMOUNT, 0);
                                    obj.put(CustomDesignerConstants.IGSTPERCENT, 0);
                                    obj.put(CustomDesignerConstants.IGSTAMOUNT, 0);
                                    obj.put(CustomDesignerConstants.SGSTPERCENT, 0);
                                    obj.put(CustomDesignerConstants.SGSTAMOUNT, 0);
                                    obj.put(CustomDesignerConstants.UTGSTPERCENT, 0);
                                    obj.put(CustomDesignerConstants.UTGSTAMOUNT, 0);
                                    obj.put(CustomDesignerConstants.CESSPERCENT, 0);
                                    obj.put(CustomDesignerConstants.CESSAMOUNT, 0);
                                    for (CreditNoteDetailTermMap productTermsMapObj : productTermDetail) {
                                        LineLevelTerms mt = productTermsMapObj.getEntitybasedLineLevelTermRate().getLineLevelTerms();
                                        if (mt.getTerm().contains(CustomDesignerConstants.CGST)) {
                                            obj.put(CustomDesignerConstants.CGSTPERCENT, productTermsMapObj.getPercentage());
                                            obj.put(CustomDesignerConstants.CGSTAMOUNT, productTermsMapObj.getTermamount());
    //                                        gstTaxSummaryDetailsTableData.put(CustomDesignerConstants.CGSTPERCENT, productTermsMapObj.getPercentage());
    //                                        gstTaxSummaryDetailsTableData.put(CustomDesignerConstants.CGSTAMOUNT, productTermsMapObj.getTermamount());
                                        } else if (mt.getTerm().contains(CustomDesignerConstants.IGST)) {
                                            obj.put(CustomDesignerConstants.IGSTPERCENT, productTermsMapObj.getPercentage());
                                            obj.put(CustomDesignerConstants.IGSTAMOUNT, productTermsMapObj.getTermamount());
    //                                        gstTaxSummaryDetailsTableData.put(CustomDesignerConstants.IGSTPERCENT, productTermsMapObj.getPercentage());
    //                                        gstTaxSummaryDetailsTableData.put(CustomDesignerConstants.IGSTAMOUNT, productTermsMapObj.getTermamount());
                                        } else if (mt.getTerm().contains(CustomDesignerConstants.SGST)) {
                                            obj.put(CustomDesignerConstants.SGSTPERCENT, productTermsMapObj.getPercentage());
                                            obj.put(CustomDesignerConstants.SGSTAMOUNT, productTermsMapObj.getTermamount());
    //                                        gstTaxSummaryDetailsTableData.put(CustomDesignerConstants.SGSTPERCENT, productTermsMapObj.getPercentage());
    //                                        gstTaxSummaryDetailsTableData.put(CustomDesignerConstants.SGSTAMOUNT, productTermsMapObj.getTermamount());
                                        } else if (mt.getTerm().contains(CustomDesignerConstants.UTGST)) {
                                            obj.put(CustomDesignerConstants.UTGSTPERCENT, productTermsMapObj.getPercentage());
                                            obj.put(CustomDesignerConstants.UTGSTAMOUNT, productTermsMapObj.getTermamount());
    //                                        gstTaxSummaryDetailsTableData.put(CustomDesignerConstants.UTGSTPERCENT, productTermsMapObj.getPercentage());
    //                                        gstTaxSummaryDetailsTableData.put(CustomDesignerConstants.UTGSTAMOUNT, productTermsMapObj.getTermamount());
                                        } else if (mt.getTerm().contains(CustomDesignerConstants.CESS)) {
                                            obj.put(CustomDesignerConstants.CESSPERCENT, productTermsMapObj.getPercentage());
                                            obj.put(CustomDesignerConstants.CESSAMOUNT, productTermsMapObj.getTermamount());
    //                                        gstTaxSummaryDetailsTableData.put(CustomDesignerConstants.CESSPERCENT, productTermsMapObj.getPercentage());
    //                                        gstTaxSummaryDetailsTableData.put(CustomDesignerConstants.CESSAMOUNT, productTermsMapObj.getTermamount());
                                        } 

                                        lineLevelTax += mt.getTerm();
                                        lineLevelTax += "!##";

                                        lineLevelTaxPercent += authHandler.formattingDecimalForAmount(productTermsMapObj.getPercentage(), companyid);
                                        lineLevelTaxPercent += "!##";
                                        lineLevelTaxAmount += CustomDesignHandler.getAmountinCommaDecimal(productTermsMapObj.getTermamount(), amountdigitafterdecimal, countryid);
                                        /*
                                         * calculating total of line level taxes
                                         */
                                        lineLevelTaxAmountTotal += productTermsMapObj.getTermamount();
                                        lineLevelTaxAmount += "!##";
                                        if(lineLevelTaxNames.containsKey(mt.getTerm()) && lineLevelTaxNames.get(mt.getTerm())!=null){
                                            double value = lineLevelTaxNames.get(mt.getTerm());
                                            lineLevelTaxNames.put(mt.getTerm(),productTermsMapObj.getTermamount()+value );
                                        } else{
                                            lineLevelTaxNames.put(mt.getTerm(),productTermsMapObj.getTermamount());
                                        }
                                    }
                                }
                                if(noteTaxEntry.getProductid() != null){
                                    KwlReturnObject custresult = accountingHandlerDAOobj.getObject(Product.class.getName(), noteTaxEntry.getProductid());
                                    product = (Product) custresult.getEntityList().get(0);
                                }
                            }
                            
                            if(!StringUtil.isNullOrEmpty(lineLevelTax)){
                                lineLevelTax = lineLevelTax.substring(0, lineLevelTax.length()-3);
                            }
                            if(!StringUtil.isNullOrEmpty(lineLevelTaxPercent)){
                                lineLevelTaxPercent = lineLevelTaxPercent.substring(0, lineLevelTaxPercent.length()-3);
                            }
                            if(!StringUtil.isNullOrEmpty(lineLevelTaxAmount)){
                                lineLevelTaxAmount = lineLevelTaxAmount.substring(0, lineLevelTaxAmount.length()-3);
                            }
                            obj.put(CustomDesignerConstants.LineLevelTax, lineLevelTax);
                            obj.put(CustomDesignerConstants.LineLevelTaxAmount, lineLevelTaxAmount);
                            obj.put(CustomDesignerConstants.LineLevelTaxPercent, lineLevelTaxPercent);
                            
                            double bascurrencyaccountamount = 0, bascurrencyaccounttaxamount = 0, basecurrencyaccountamountwithtax = 0;
                            double accounttaxpercent = 0, accounttaxamount = 0, accounttotalamountwithtax = 0;
                            obj.put("accountid", noteTaxEntry.getAccount().getID());
                            obj.put(CustomDesignerConstants.CNDN_AccountCode_fieldTypeId, (noteTaxEntry.getAccount().getAcccode()) != null ? noteTaxEntry.getAccount().getAcccode() : "");                   // Account Code
                            obj.put(CustomDesignerConstants.CNDN_Account_fieldTypeId, (noteTaxEntry.getAccount()) != null ? noteTaxEntry.getAccount().getName() : "");                   // Account Name
                            obj.put(CustomDesignerConstants.CNDN_AccountTax_fieldTypeId, (noteTaxEntry.getTax() != null) ? noteTaxEntry.getTax().getName() : "");                       // Tax Name    
                            /*
                             * If in Credit note isDebitForMultiCNDN true then values will be Positive
                             * If in Credit note isDebitForMultiCNDN true then values will be Negative
                             */
                            int changevalue = -1;
                            if (noteTaxEntry.isDebitForMultiCNDN()) {
                                changevalue = 1;
                            }
                            obj.put(CustomDesignerConstants.CNDN_AccountAmount_fieldTypeId, authHandler.formattedAmount(changevalue * noteTaxEntry.getAmount(), companyid));                                                                     // Amount
                            if(extraCompanyPreferences.isIsNewGST()) {
                                obj.put(CustomDesignerConstants.CNDN_AccountTaxAmount_fieldTypeId, authHandler.formattedAmount(changevalue * noteTaxEntry.getTermAmount(), companyid));  // Tax Amount  
                            } else {
                                obj.put(CustomDesignerConstants.CNDN_AccountTaxAmount_fieldTypeId, authHandler.formattedAmount(changevalue * noteTaxEntry.getTaxamount(), companyid));  // Tax Amount  
                            }
                            if (isIncludeGST) {
                                obj.put(CustomDesignerConstants.CNDN_AccountAmountExcludeGST_fieldTypeId, authHandler.formattedAmount(changevalue * noteTaxEntry.getRateIncludingGst(), companyid));
                                obj.put(CustomDesignerConstants.CNDN_AccountTotalAmount_fieldTypeId, authHandler.formattedAmount(changevalue * noteTaxEntry.getAmount(), companyid));                                       // Amount with Tax 
                            } else {
                                obj.put(CustomDesignerConstants.CNDN_AccountAmountExcludeGST_fieldTypeId, authHandler.formattedAmount(changevalue * noteTaxEntry.getAmount(), companyid));
                                obj.put(CustomDesignerConstants.CNDN_AccountTotalAmount_fieldTypeId, authHandler.formattedAmount(changevalue * (noteTaxEntry.getAmount() + noteTaxEntry.getTaxamount()), companyid));                                       // Amount with Tax 
                            }
                            /*
                                The below code is added to replace <div> with <br><div> in case of HTML editor(SDP-16161)
                            */
                            if(extraCompanyPreferences.getProddiscripritchtextboxflag() == Constants.HTML_EDITOR) {
                                obj.put(CustomDesignerConstants.CNDN_AccountDescription_fieldTypeId, StringUtil.isNullOrEmpty(noteTaxEntry.getDescription()) ? "" : StringUtil.DecodeText(noteTaxEntry.getDescription().replaceAll("<div>", "<br><div>")));   // Description  
                            } else {
                                obj.put(CustomDesignerConstants.CNDN_AccountDescription_fieldTypeId, StringUtil.isNullOrEmpty(noteTaxEntry.getDescription()) ? "" : StringUtil.DecodeText(noteTaxEntry.getDescription()));   // Description  
                            }
                            obj.put(CustomDesignerConstants.CNDN_AccountReason_fieldTypeId, (noteTaxEntry.getReason() == null ? "" : (StringUtil.isNullOrEmpty(noteTaxEntry.getReason().getValue()) ? "" : noteTaxEntry.getReason().getValue())));   //Reason 
                            accounttaxamount = noteTaxEntry.getTaxamount();
                            accounttotalamountwithtax = noteTaxEntry.getAmount() + noteTaxEntry.getTaxamount();
                            accounttaxpercent = (accounttaxamount / (accounttotalamountwithtax)) * 100;
                            obj.put(CustomDesignerConstants.SummaryTaxPercent, String.valueOf(authHandler.round(accounttaxpercent, companyid)));   // Tax Percent

                            /*
                             * Fetching distinct taxes used at line level,
                             * feetched in the set Also, fetched the information
                             * related to tax in different maps
                             */
                            double rowTaxPercentGST = 0.0;
                            if (noteTaxEntry.getTax() != null) {
                                String taxCode = noteTaxEntry.getTax().getTaxCode();
                                if (!lineLevelTaxesGST.contains(taxCode)) {
                                    lineLevelTaxesGST.add(taxCode);
//                                    KwlReturnObject perresult = accTaxObj.getTaxPercent(companyid, cn.getJournalEntry().getEntryDate(), noteTaxEntry.getTax().getID());
                                    KwlReturnObject perresult = accTaxObj.getTaxPercent(companyid, cn.getCreationDate(), noteTaxEntry.getTax().getID());
                                    rowTaxPercentGST = (Double) perresult.getEntityList().get(0);
                                    lineLevelTaxPercentGST.put(taxCode, rowTaxPercentGST);
                                    lineLevelTaxAmountGST.put(taxCode, 0.0);
                                    lineLevelTaxBasicGST.put(taxCode, 0.0);
                                }
                                lineLevelTaxAmountGST.put(taxCode, (Double) lineLevelTaxAmountGST.get(taxCode) + noteTaxEntry.getTaxamount());
                                lineLevelTaxBasicGST.put(taxCode, (Double) lineLevelTaxBasicGST.get(taxCode) + obj.optDouble(CustomDesignerConstants.CNDN_AccountAmount_fieldTypeId, 0.0));
                            }

                            //Base Currency values   
                            if (externalcurrency != 0) {
                                bascurrencyaccountamount = (noteTaxEntry.getAmount() * revExchangeRate);  //Base currency account amount
                                obj.put(CustomDesignerConstants.BaseCurrencyAccountAmount, authHandler.formattedAmount(bascurrencyaccountamount, companyid));
                                bascurrencyaccounttaxamount = (noteTaxEntry.getTaxamount() * revExchangeRate);//Base currency account taxamount
                                obj.put(CustomDesignerConstants.BaseCurrencyAccountTaxAmount, authHandler.formattedAmount(bascurrencyaccounttaxamount, companyid));
                                basecurrencyaccountamountwithtax = (noteTaxEntry.getAmount() + noteTaxEntry.getTaxamount()) * revExchangeRate;//Base currency account amount with tax
                                obj.put(CustomDesignerConstants.BaseCurrencyAccountAmountwithTax, authHandler.formattedAmount(basecurrencyaccountamountwithtax, companyid));
                            } else {
                                bascurrencyaccountamount = (noteTaxEntry.getAmount());  //Base currency account amount
                                obj.put(CustomDesignerConstants.BaseCurrencyAccountAmount, authHandler.formattedAmount(bascurrencyaccountamount, companyid));
                                bascurrencyaccounttaxamount = (noteTaxEntry.getTaxamount());//Base currency account taxamount
                                obj.put(CustomDesignerConstants.BaseCurrencyAccountTaxAmount, authHandler.formattedAmount(bascurrencyaccounttaxamount, companyid));
                                basecurrencyaccountamountwithtax = (noteTaxEntry.getAmount() + noteTaxEntry.getTaxamount());//Base currency account amount with tax
                                obj.put(CustomDesignerConstants.BaseCurrencyAccountAmountwithTax, authHandler.formattedAmount(basecurrencyaccountamountwithtax, companyid));
                            }
                            obj.put(CustomDesignerConstants.CustomDesignExchangeRate_fieldTypeId, revExchangeRate);
                            
                            //GST Exchange Rate
                            if (countryid == Integer.parseInt(Constants.SINGAPOREID) && !companyAccountPreferences.getCompany().getCurrency().getCurrencyID().equalsIgnoreCase(Constants.SGDID)) {
                                obj.put(CustomDesignerConstants.CustomDesignGSTExchangeRate_fieldTypeId, authHandler.formattedAmount(noteTaxEntry.getGstCurrencyRate(), companyid));
                            }
                            
                            /*
                            * If  in Credit note isDebitForMultiCNDN true then values will be Added
                            * If in Credit note isDebitForMultiCNDN true then values will be substracted
                            */
                            if (noteTaxEntry.isDebitForMultiCNDN()) {
                                subTotal += noteTaxEntry.getAmount();
                                totaltax += noteTaxEntry.getTaxamount();
                                accountsubtotal += noteTaxEntry.getAmount();//Account Sub Total
                                accounttotaltax += noteTaxEntry.getTaxamount(); //Account Total Tax
                                if (isIncludeGST) {
                                    accounttotalamount += noteTaxEntry.getAmount(); //Account Total Amount
                                } else {
                                    accounttotalamount += noteTaxEntry.getAmount() + noteTaxEntry.getTaxamount(); //Account Total Amount
                                }
                            } else {
                                subTotal -= noteTaxEntry.getAmount();
                                totaltax -= noteTaxEntry.getTaxamount();
                                accountsubtotal -= noteTaxEntry.getAmount();//Account Sub Total
                                accounttotaltax -= noteTaxEntry.getTaxamount(); //Account Total Tax
                                if (isIncludeGST) {
                                    accounttotalamount -= noteTaxEntry.getAmount(); //Account Total Amount
                                } else {
                                    accounttotalamount -= noteTaxEntry.getAmount() + noteTaxEntry.getTaxamount(); //Account Total Amount
                                }
                            }
//                        accJSONArr.put(obj);

                            // ## Get Custom Field Data 
                            Map<String, Object> variableMap = new HashMap<String, Object>();
                            HashMap<String, Object> invDetailRequestParams = new HashMap<String, Object>();
                            ArrayList Detailfilter_names = new ArrayList(), Detailfilter_params = new ArrayList();
                            Detailfilter_names.add(Constants.Acc_JEDetail_recdetailId);
                            Detailfilter_params.add(noteTaxEntry.getID());
                            invDetailRequestParams.put("filter_names", Detailfilter_names);
                            invDetailRequestParams.put("filter_params", Detailfilter_params);
                            KwlReturnObject idcustresult = accCreditNoteDAOobj.geCreditNoteCustomData(invDetailRequestParams);
                            if (idcustresult.getEntityList().size() > 0) {
                                AccJEDetailCustomData jeDetailCustom = (AccJEDetailCustomData) idcustresult.getEntityList().get(0);
                                ExportRecordHandler.AssignLineItemCustomfieldsDimensionValues(requestObj, jeDetailCustom, FieldMap, obj, kwlCommonTablesDAOObj, variableMap);
                            }
                            obj.put(CustomDesignerConstants.SrNo, count);
                            /*
                             * Set Dimension Values
                             */
                            obj = CustomDesignHandler.setAllLinelevelDimensionCustomFieldValues(DimensionFieldMap, variableMap, obj, false);//for dimensions
                            obj = CustomDesignHandler.setAllLinelevelDimensionCustomFieldValues(LineLevelCustomFieldMap, variableMap, obj, true);//for customfields
                            accJSONArr.put(obj);
                            count++;

                        }
                    }
                    //Calculating invoices & its values 
                    Set<CreditNoteDetail> rows = cn.getRows();
                        count = 1;
                        boolean pushAccountData = true;  //For credit note created through Party Journal Entry 
                        for (CreditNoteDetail detail : rows) {

                            if (detail.getInvoice() != null) {
                                double invtax = 0, invamount = 0;
                                JSONObject obj = new JSONObject();
                                obj.put(Constants.billid, detail.getInvoice().getID());
                                obj.put(CustomDesignerConstants.CNDN_InvoiceNo_fieldTypeId, detail.getInvoice().getInvoiceNumber());
                                obj.put(CustomDesignerConstants.CNDN_InvoiceSalesPerson_fieldTypeId, detail.getInvoice().getMasterSalesPerson() == null ? "" : detail.getInvoice().getMasterSalesPerson().getValue());
                                obj.put(CustomDesignerConstants.CNDN_InvoiceTax_fieldTypeId, authHandler.formattedAmount((detail.getInvoice().getTaxEntry() == null ? 0 : detail.getInvoice().getTaxEntry().getAmount()), companyid));
                                invtax = detail.getInvoice().getTaxEntry() == null ? 0 : detail.getInvoice().getTaxEntry().getAmount();
                                String salespersonname = detail.getInvoice().getMasterSalesPerson() == null ? "" : detail.getInvoice().getMasterSalesPerson().getValue();
                                salesperson.add(salespersonname);

                                obj.put(CustomDesignerConstants.InvoiceTax, authHandler.formattedAmount(invtax, companyid));
                                Discount disc = detail.getDiscount();
                                double invoiceReturnedAmt = 0d;
                                if (disc != null) {
                                    obj.put(CustomDesignerConstants.CNDN_InvoiceEnterAmount_fieldTypeId, authHandler.formattedAmount(disc.getDiscountValue(), companyid));
                                    invoiceReturnedAmt = disc.getDiscountValue();
                                } else {
                                    obj.put(CustomDesignerConstants.CNDN_InvoiceEnterAmount_fieldTypeId, authHandler.formattedAmount(0, companyid));
                                }

                                List ll = null;
//                    if (detail.getInvoice() != null) {
                                if (detail.getInvoice().isIsOpeningBalenceInvoice() && !detail.getInvoice().isNormalInvoice()) {
                                    ll = new ArrayList();
                                    ll.add(detail.getInvoice().getOpeningBalanceAmountDue());
                                    ll.add(0.0);
                                    ll.add(0.0);
                                    obj.put(CustomDesignerConstants.CNDN_InvoiceAmount_fieldTypeId, authHandler.formattedAmount(detail.getInvoice().getOriginalOpeningBalanceAmount(), companyid));
                                    obj.put(CustomDesignerConstants.CNDN_INvoiceDates_fieldTypeId, detail.getInvoice() == null ? "" : df.format(detail.getInvoice().getCreationDate()));//document designer
                                    invamount = detail.getInvoice().getOriginalOpeningBalanceAmount();
                                } else {
                                    if (Constants.InvoiceAmountDueFlag) {
                                        ll = accInvoiceCommon.getInvoiceDiscountAmountInfo(requestParams, detail.getInvoice());
                                    } else {
                                        ll = accInvoiceCommon.getAmountDue_Discount(requestParams, detail.getInvoice());
                                        if (storageHandlerImpl.GetSATSCompanyId().contains(companyid)) {  //This is sats specific code 
                                            obj.put("amount", detail.getInvoice().getCustomerEntry().getAmount());
                                        }
                                    }
                                    obj.put(CustomDesignerConstants.CNDN_InvoiceAmount_fieldTypeId, authHandler.formattedAmount(detail.getInvoice().getCustomerEntry().getAmount(), companyid));
                                    obj.put(CustomDesignerConstants.CNDN_INvoiceDates_fieldTypeId, detail.getInvoice() == null ? "" : df.format(detail.getInvoice().getCustomerEntry() != null ? detail.getInvoice().getCustomerEntry().getJournalEntry().getEntryDate() : detail.getInvoice().getCreationDate()));//document designer
                                    invamount = detail.getInvoice().getCustomerEntry().getAmount();//Invoice Sub Total
                                }
//                    }
                                invoicesubtotal += invamount;//Invoice Sub Total
                                invoicetotaltax += invtax; //Invoice Total Tax
                                invoicetotalamount += invamount + invtax; //Invoice Total Amount
                                amountdue = (Double) ll.get(0) + invoiceReturnedAmt;// added invoiceReturnedAmt to show original value which was at time of creation.
                                obj.put(CustomDesignerConstants.CNDN_InvoiceAmountDue_fieldTypeId, authHandler.formattedAmount(authHandler.round(amountdue, companyid), companyid));

                                obj.put(CustomDesignerConstants.CNDN_InvoiceEnterAmount_fieldTypeId, authHandler.formattedAmount((detail.getInvoice() == null ? 0 : invoiceReturnedAmt), companyid));
                                obj.put(CustomDesignerConstants.SrNo, count);
                                obj.put(CustomDesignerConstants.AllDimensions, "");
                                obj.put(CustomDesignerConstants.AllLinelevelCustomFields, "");
                                obj.put(CustomDesignerConstants.BaseCurrencyAccountAmount, authHandler.formattedAmount(0, companyid));
                                obj.put(CustomDesignerConstants.BaseCurrencyAccountTaxAmount, authHandler.formattedAmount(0, companyid));
                                obj.put(CustomDesignerConstants.BaseCurrencyAccountAmountwithTax, authHandler.formattedAmount(0, companyid));
                                obj.put(CustomDesignerConstants.SummaryTaxPercent, "");   // Tax Percent
                                obj.put(CustomDesignerConstants.CustomDesignExchangeRate_fieldTypeId, revExchangeRate);
                                invJSONArr.put(obj);
                                count++;
                            }
                        if(detail.getCreditNote() != null && detail.getCreditNote().getCnTaxEntryDetails().isEmpty() && detail.getCreditNote().getCnTaxEntryDetails().size() == 0){
                                /*
                              * Print Credit note Created by party journal Entry  
                                 */
                                if (pushAccountData) {
                                    JSONObject obj = new JSONObject();
                                    obj.put(CustomDesignerConstants.CNDN_AccountCode_fieldTypeId, (detail.getCreditNote() != null && detail.getCreditNote().getAccount().getAcccode() != null) ? detail.getCreditNote().getAccount().getAcccode() : "");                   // Account Code
                                    obj.put(CustomDesignerConstants.CNDN_Account_fieldTypeId, (detail.getCreditNote() != null && detail.getCreditNote().getAccount() != null) ? detail.getCreditNote().getAccount().getName() : "");                   // Account Name
                                    obj.put(CustomDesignerConstants.CNDN_AccountDescription_fieldTypeId, (detail.getCreditNote() != null && detail.getCreditNote().getAccount() != null && !StringUtil.isNullOrEmpty(detail.getCreditNote().getAccount().getDescription())) ? detail.getCreditNote().getAccount().getDescription() : "");                   // Account Name
                                    obj.put(CustomDesignerConstants.CNDN_AccountAmount_fieldTypeId, (detail.getCreditNote() != null) ? authHandler.formattedAmount(detail.getCreditNote().getCnamount(), companyid) : "");  // Amount
                                    obj.put(CustomDesignerConstants.CNDN_AccountTotalAmount_fieldTypeId, (detail.getCreditNote() != null) ? authHandler.formattedAmount(detail.getCreditNote().getCnamount(), companyid) : "");  // Amount
                                    obj.put(CustomDesignerConstants.CNDN_AccountTaxAmount_fieldTypeId, "0.0");  // tax Amount
                                    obj.put(CustomDesignerConstants.SummaryTaxPercent, "");
                                    obj.put(CustomDesignerConstants.CNDN_AccountTax_fieldTypeId, "");
                                    obj.put(CustomDesignerConstants.CNDN_AccountAmountExcludeGST_fieldTypeId, (detail.getCreditNote() != null) ? authHandler.formattedAmount(detail.getCreditNote().getCnamount(), companyid) : "");
                                    obj.put(CustomDesignerConstants.CNDN_AccountReason_fieldTypeId, "");
                                    accounttotalamount = detail.getCreditNote().getCnamount();
                                    accJSONArr.put(obj);
                                    pushAccountData = false;
                                }
                            }
                        }
                    for (String str : salesperson) {
                        String sname = "";
                        sname = str;
                        salespersonvalue += sname.concat(",");
                    }

                    if (!StringUtil.isNullOrEmpty(salespersonvalue.toString())) {
                        salespersonvalue = salespersonvalue.substring(0, salespersonvalue.length() - 1);
                    }
                    // Append respective field values
                    for (int cnt = 0; cnt < accJSONArr.length(); cnt++) {
                        JSONObject jObj = (JSONObject) accJSONArr.get(cnt);
                        if (cnt == 0) {
                            accCodes = (StringUtil.isNullOrEmpty(jObj.getString(CustomDesignerConstants.CNDN_AccountCode_fieldTypeId)) ? "-" : jObj.getString(CustomDesignerConstants.CNDN_AccountCode_fieldTypeId));
                            accNames = (StringUtil.isNullOrEmpty(jObj.getString(CustomDesignerConstants.CNDN_Account_fieldTypeId)) ? "-" : jObj.getString(CustomDesignerConstants.CNDN_Account_fieldTypeId));
                            accTaxNames = (StringUtil.isNullOrEmpty(jObj.getString(CustomDesignerConstants.CNDN_AccountTax_fieldTypeId)) ? "-" : jObj.getString(CustomDesignerConstants.CNDN_AccountTax_fieldTypeId));
                            accAmounts = (StringUtil.isNullOrEmpty(Double.toString(jObj.getDouble(CustomDesignerConstants.CNDN_AccountAmount_fieldTypeId))) ? "-" : Double.toString(jObj.getDouble(CustomDesignerConstants.CNDN_AccountAmount_fieldTypeId)));
                            accTaxAmounts = (StringUtil.isNullOrEmpty(Double.toString(jObj.getDouble(CustomDesignerConstants.CNDN_AccountTaxAmount_fieldTypeId))) ? "-" : Double.toString(jObj.getDouble(CustomDesignerConstants.CNDN_AccountTaxAmount_fieldTypeId)));
                            accAmountWithTaxes = (StringUtil.isNullOrEmpty(Double.toString(jObj.getDouble(CustomDesignerConstants.CNDN_AccountTotalAmount_fieldTypeId))) ? "-" : Double.toString(jObj.getDouble(CustomDesignerConstants.CNDN_AccountTotalAmount_fieldTypeId)));
                            accDescriptions = (StringUtil.isNullOrEmpty(jObj.getString(CustomDesignerConstants.CNDN_AccountDescription_fieldTypeId)) ? "-" : jObj.getString(CustomDesignerConstants.CNDN_AccountDescription_fieldTypeId));
                            accTaxPercent = (StringUtil.isNullOrEmpty(jObj.getString(CustomDesignerConstants.SummaryTaxPercent)) ? "-" : jObj.getString(CustomDesignerConstants.SummaryTaxPercent));
                            accReason = (StringUtil.isNullOrEmpty(jObj.getString(CustomDesignerConstants.CNDN_AccountReason_fieldTypeId)) ? "-" : jObj.getString(CustomDesignerConstants.CNDN_AccountReason_fieldTypeId));
                            accAmountExcludeGST = (StringUtil.isNullOrEmpty(Double.toString(jObj.getDouble(CustomDesignerConstants.CNDN_AccountAmountExcludeGST_fieldTypeId))) ? "-" : Double.toString(jObj.getDouble(CustomDesignerConstants.CNDN_AccountAmountExcludeGST_fieldTypeId)));
                            GSTExchangeRate = jObj.optString(CustomDesignerConstants.CustomDesignGSTExchangeRate_fieldTypeId, "");
                            taxName = jObj.optString(CustomDesignerConstants.LineLevelTax, "-");
                            taxPercent = jObj.optString(CustomDesignerConstants.LineLevelTaxPercent, "");
                            taxAmount = jObj.optString(CustomDesignerConstants.LineLevelTaxAmount, "");
                        } else {
                            accCodes = accCodes + "," + (StringUtil.isNullOrEmpty(jObj.getString(CustomDesignerConstants.CNDN_AccountCode_fieldTypeId)) ? "-" : jObj.getString(CustomDesignerConstants.CNDN_AccountCode_fieldTypeId));
                            accNames = accNames + "," + (StringUtil.isNullOrEmpty(jObj.getString(CustomDesignerConstants.CNDN_Account_fieldTypeId)) ? "-" : jObj.getString(CustomDesignerConstants.CNDN_Account_fieldTypeId));
                            accTaxNames = accTaxNames + "," + (StringUtil.isNullOrEmpty(jObj.getString(CustomDesignerConstants.CNDN_AccountTax_fieldTypeId)) ? "-" : jObj.getString(CustomDesignerConstants.CNDN_AccountTax_fieldTypeId));
                            accAmounts = accAmounts + "," + (StringUtil.isNullOrEmpty(Double.toString(jObj.getDouble(CustomDesignerConstants.CNDN_AccountAmount_fieldTypeId))) ? "-" : Double.toString(jObj.getDouble(CustomDesignerConstants.CNDN_AccountAmount_fieldTypeId)));
                            accTaxAmounts = accTaxAmounts + "," + (StringUtil.isNullOrEmpty(Double.toString(jObj.getDouble(CustomDesignerConstants.CNDN_AccountTaxAmount_fieldTypeId))) ? "-" : Double.toString(jObj.getDouble(CustomDesignerConstants.CNDN_AccountTaxAmount_fieldTypeId)));
                            accAmountWithTaxes = accAmountWithTaxes + "," + (StringUtil.isNullOrEmpty(Double.toString(jObj.getDouble(CustomDesignerConstants.CNDN_AccountTotalAmount_fieldTypeId))) ? "-" : Double.toString(jObj.getDouble(CustomDesignerConstants.CNDN_AccountTotalAmount_fieldTypeId)));
                            accDescriptions = accDescriptions + "," + (StringUtil.isNullOrEmpty(jObj.getString(CustomDesignerConstants.CNDN_AccountDescription_fieldTypeId)) ? "-" : jObj.getString(CustomDesignerConstants.CNDN_AccountDescription_fieldTypeId));
                            accTaxPercent = accTaxPercent + "," + (StringUtil.isNullOrEmpty(jObj.getString(CustomDesignerConstants.SummaryTaxPercent)) ? "-" : jObj.getString(CustomDesignerConstants.SummaryTaxPercent));
                            accReason = accReason + "," + (StringUtil.isNullOrEmpty(jObj.getString(CustomDesignerConstants.CNDN_AccountReason_fieldTypeId)) ? "-" : jObj.getString(CustomDesignerConstants.CNDN_AccountReason_fieldTypeId));
                            accAmountExcludeGST = accAmountExcludeGST + "," + (StringUtil.isNullOrEmpty(Double.toString(jObj.getDouble(CustomDesignerConstants.CNDN_AccountAmountExcludeGST_fieldTypeId))) ? "-" : Double.toString(jObj.getDouble(CustomDesignerConstants.CNDN_AccountAmountExcludeGST_fieldTypeId)));
                            if (!StringUtil.isNullOrEmpty(GSTExchangeRate)) {
                                GSTExchangeRate = GSTExchangeRate + "," + jObj.optString(CustomDesignerConstants.CustomDesignGSTExchangeRate_fieldTypeId, "");
                            } else {
                                GSTExchangeRate = jObj.optString(CustomDesignerConstants.CustomDesignGSTExchangeRate_fieldTypeId, "");
                            }
                            taxName = taxName + "," + jObj.optString(CustomDesignerConstants.LineLevelTax, "-");
                            taxPercent = taxPercent + "," + jObj.optString(CustomDesignerConstants.LineLevelTaxPercent, "");
                            taxAmount = taxAmount + "," + jObj.optString(CustomDesignerConstants.LineLevelTaxAmount, "");
                        }
                    }
                    if (!isotherwisecase) {
                        for (int cnt = 0; cnt < invJSONArr.length(); cnt++) {
                            JSONObject jObj = (JSONObject) invJSONArr.get(cnt);
                            if (cnt == 0) {
                                invoiceNos = (StringUtil.isNullOrEmpty(jObj.getString(CustomDesignerConstants.CNDN_InvoiceNo_fieldTypeId)) ? "-" : jObj.getString(CustomDesignerConstants.CNDN_InvoiceNo_fieldTypeId));
                                invAmounts = (StringUtil.isNullOrEmpty(Double.toString(jObj.getDouble(CustomDesignerConstants.CNDN_InvoiceAmount_fieldTypeId))) ? "-" : Double.toString(jObj.getDouble(CustomDesignerConstants.CNDN_InvoiceAmount_fieldTypeId)));
                                invTaxAmounts = (StringUtil.isNullOrEmpty(Double.toString(jObj.getDouble(CustomDesignerConstants.CNDN_InvoiceTax_fieldTypeId))) ? "-" : Double.toString(jObj.getDouble(CustomDesignerConstants.CNDN_InvoiceTax_fieldTypeId)));
                                invAmountDues = (StringUtil.isNullOrEmpty(Double.toString(jObj.getDouble(CustomDesignerConstants.CNDN_InvoiceAmountDue_fieldTypeId))) ? "-" : Double.toString(jObj.getDouble(CustomDesignerConstants.CNDN_InvoiceAmountDue_fieldTypeId)));
                                invEnterAmounts = (StringUtil.isNullOrEmpty(Double.toString(jObj.getDouble(CustomDesignerConstants.CNDN_InvoiceEnterAmount_fieldTypeId))) ? "-" : Double.toString(jObj.getDouble(CustomDesignerConstants.CNDN_InvoiceEnterAmount_fieldTypeId)));
                                invoicedates = (StringUtil.isNullOrEmpty(jObj.getString(CustomDesignerConstants.CNDN_INvoiceDates_fieldTypeId)) ? "-" : jObj.getString(CustomDesignerConstants.CNDN_INvoiceDates_fieldTypeId));
                                invoiceSalesPerson = (StringUtil.isNullOrEmpty(jObj.getString(CustomDesignerConstants.CNDN_InvoiceSalesPerson_fieldTypeId)) ? "-" : jObj.getString(CustomDesignerConstants.CNDN_InvoiceSalesPerson_fieldTypeId));
                            } else {
                                invoiceNos = invoiceNos + "," + (StringUtil.isNullOrEmpty(jObj.getString(CustomDesignerConstants.CNDN_InvoiceNo_fieldTypeId)) ? "-" : jObj.getString(CustomDesignerConstants.CNDN_InvoiceNo_fieldTypeId));
                                invAmounts = invAmounts + "," + (StringUtil.isNullOrEmpty(Double.toString(jObj.getDouble(CustomDesignerConstants.CNDN_InvoiceAmount_fieldTypeId))) ? "-" : Double.toString(jObj.getDouble(CustomDesignerConstants.CNDN_InvoiceAmount_fieldTypeId)));
                                invTaxAmounts = invTaxAmounts + "," + (StringUtil.isNullOrEmpty(Double.toString(jObj.getDouble(CustomDesignerConstants.CNDN_InvoiceTax_fieldTypeId))) ? "-" : Double.toString(jObj.getDouble(CustomDesignerConstants.CNDN_InvoiceTax_fieldTypeId)));
                                invAmountDues = invAmountDues + "," + (StringUtil.isNullOrEmpty(Double.toString(jObj.getDouble(CustomDesignerConstants.CNDN_InvoiceAmountDue_fieldTypeId))) ? "-" : Double.toString(jObj.getDouble(CustomDesignerConstants.CNDN_InvoiceAmountDue_fieldTypeId)));
                                invEnterAmounts = invEnterAmounts + "," + (StringUtil.isNullOrEmpty(Double.toString(jObj.getDouble(CustomDesignerConstants.CNDN_InvoiceEnterAmount_fieldTypeId))) ? "-" : Double.toString(jObj.getDouble(CustomDesignerConstants.CNDN_InvoiceEnterAmount_fieldTypeId)));
                                invoicedates = invoicedates + "," + (StringUtil.isNullOrEmpty(jObj.getString(CustomDesignerConstants.CNDN_INvoiceDates_fieldTypeId)) ? "-" : jObj.getString(CustomDesignerConstants.CNDN_INvoiceDates_fieldTypeId));
                                invoiceSalesPerson = invoiceSalesPerson + "," + (StringUtil.isNullOrEmpty(CustomDesignerConstants.CNDN_InvoiceSalesPerson_fieldTypeId) ? "-" : jObj.getString(CustomDesignerConstants.CNDN_InvoiceSalesPerson_fieldTypeId));
                            }
                        }
                    } else {
                        invoiceNos = "";
                        invAmounts = "";
                        invTaxAmounts = "";
                        invAmountDues = "";
                        invEnterAmounts = "";
                        invEnterAmounts = "";
                        invoicedates = "";
                        invoiceSalesPerson = "";
                    }
                    Company com = creditNote.getCompany();
                    String invno = creditNote.getCreditNoteNumber();
                    double cndnTotalAmount = creditNote.getCnamount();
                    entryDate = creditNote.getJournalEntry().getEntryDate();
                    customerName = customerObj != null ? customerObj.getName() : "";
                    customerEmail = customerObj != null ? customerObj.getEmail() : "";
                    terms = customerObj != null ? customerObj.getCreditTerm().getTermname() : "";
                    filter_names.add("creditNote.ID");
                    filter_params.add(creditNote.getID());
                    soRequestParams.put("filter_names", filter_names);
                    soRequestParams.put("filter_params", filter_params);
                    KwlReturnObject idresult = null;
                    idresult = accCreditNoteDAOobj.getCreditNoteDetails(soRequestParams);
                    itr = idresult.getEntityList().iterator();
                    memo = creditNote.getMemo();
                    CreditNoteDetail row = null;
                    double quantity = 0;
                    Discount discount = null;
                    String uom = "";
                    double amount1 = 0;
                    String cndnName = "";
                    String prodName = "";
                    String prodDesc = "";
                    double cndnDiscount = 0;
                    double totalDiscount = 0;
                   // Product product = null;
                    String netinword = "";

                    KwlReturnObject templateConfig = accCommonTablesDAO.getPDFTemplateRow(companyid, requestObj.optInt(Constants.moduleid));
                    if (templateConfig.getEntityList().size() > 0) {
                        config = (PdfTemplateConfig) templateConfig.getEntityList().get(0);
                    }

                    totalwithtax = creditNote.getCnamount();
                    totaltax = totalwithtax - subTotal;
                    KWLCurrency currency = (KWLCurrency) kwlCommonTablesDAOObj.getClassObject(KWLCurrency.class.getName(), currencyid);
                    netinword = EnglishNumberToWordsOjb.convert(Double.parseDouble(String.valueOf(totalwithtax)), currency, countryLanguageId);
                    /*
                     * Get amount in indonesian words.
                     */
                    String indonesianAmountInWords = "";
                    if (countryid == Constants.INDONESIAN_COUNTRY_ID) {
                        KWLCurrency indoCurrency = (KWLCurrency) kwlCommonTablesDAOObj.getClassObject(KWLCurrency.class.getName(), Constants.CountryIndonesianCurrencyId);
                        indonesianAmountInWords = IndonesianNumberToWordsOjb.indonesiaConvert(Double.parseDouble(String.valueOf(totalwithtax)), indoCurrency);
                    }

                    String term = "";
                    double termValue = 0.0;
                    if (!StringUtil.isNullOrEmpty(creditNote.getID())) {
                        HashMap<String, Object> requestParam = new HashMap();
                        requestParam.put("creditNoteId", creditNote.getID());
                        KwlReturnObject curresult1 = null;
                        curresult1 = accCreditNoteDAOobj.getCreditNoteTermMap(requestParam);
                        List<CreditNoteTermsMap> termMap = curresult1.getEntityList();
                        for (CreditNoteTermsMap creditNoteTermsMap : termMap) {
                            InvoiceTermsSales mt = creditNoteTermsMap.getTerm();
                            double termAmnt = creditNoteTermsMap.getTermamount();
                            String termName = (mt.getTerm() + (termAmnt > 0 ? "(+)" : "(-)"));
                            double tempTermValue = (termAmnt > 0 ? termAmnt : (termAmnt * -1));
                            term += "<div> <table><tr><td>" + termName + " : </td><td>" + Double.toString(tempTermValue) + "</td></tr></table></div><br>";
                            termValue += tempTermValue;
                        }
                        if (!StringUtil.isNullOrEmpty(term) && term.indexOf("<br>") != -1) {
                            term = term.substring(0, term.lastIndexOf("<br>"));
                        }
                    }
                    jArr.put(accJSONArr);
                    jArr.put(invJSONArr);
                    
                    // Getting summary data for Normal Credit Note
                    Map<String,Object> summaryParams = new HashMap<>();
                    summaryParams.put("companyAccountPreferences", companyAccountPreferences);
                    summaryParams.put("extraCompanyPreferences", extraCompanyPreferences);
                    summaryParams.put("pdfConfig", config);
                    summaryParams.put("lineLevelTaxesGST", lineLevelTaxesGST);
                    summaryParams.put("lineLevelTaxAmountGST", lineLevelTaxAmountGST);
                    summaryParams.put("lineLevelTaxBasicGST", lineLevelTaxBasicGST);
                    summaryParams.put("creditNote", creditNote);
                    summaryParams.put("accountsubtotal", accountsubtotal);
                    summaryParams.put("accounttotaltax", accounttotaltax);
                    summaryParams.put("accounttotalamount", accounttotalamount);
                    summaryParams.put("invoicesubtotal", invoicesubtotal);
                    summaryParams.put("invoicetotaltax", invoicetotaltax);
                    summaryParams.put("invoicetotalamount", invoicetotalamount);
                    summaryParams.put("totalwithtax", totalwithtax);
                    summaryParams.put("GSTExchangeRate", GSTExchangeRate);
                    summaryParams.put("invoiceNos", invoiceNos);
                    summaryParams.put("invAmounts", invAmounts);
                    summaryParams.put("invTaxAmounts", invTaxAmounts);
                    summaryParams.put("invAmountDues", invAmountDues);
                    summaryParams.put("invEnterAmounts", invEnterAmounts);
                    summaryParams.put("invoicedates", invoicedates);
                    summaryParams.put("accCodes", accCodes);
                    summaryParams.put("accNames", accNames);
                    summaryParams.put("accAmounts", accAmounts);
                    summaryParams.put("accTaxNames", accTaxNames);
                    summaryParams.put("accTaxAmounts", accTaxAmounts);
                    summaryParams.put("accAmountWithTaxes", accAmountWithTaxes);
                    summaryParams.put("accDescriptions", accDescriptions);
                    summaryParams.put("accTaxPercent", accTaxPercent);
                    summaryParams.put("accReason", accReason);
                    summaryParams.put("accAmountExcludeGST", accAmountExcludeGST);
                    summaryParams.put("subTotal", subTotal);
                    summaryParams.put("totaltax", totaltax);
                    summaryParams.put("salespersonvalue", salespersonvalue);
                    summaryParams.put("lineLevelTaxNames", lineLevelTaxNames);
                    JSONObject summaryData = accInvoiceCommon.getCNSummaryData(requestObj,summaryParams);
                    if(extraCompanyPreferences.isIsNewGST() && product != null){
                        ExportRecordHandler.setHsnSacProductDimensionField(product, summaryData, companyid, accAccountDAOobj, kwlCommonTablesDAOObj);
                    }
                    summaryData.put(CustomDesignerConstants.LineLevelTax, taxName);
                    summaryData.put(CustomDesignerConstants.LineLevelTaxPercent, taxPercent);
                    summaryData.put(CustomDesignerConstants.LineLevelTaxAmount, taxAmount);
                    //Document Currency
                    summaryData.put(CustomDesignerConstants.DOCUMENT_CURRENCY_ID, currencyid);
                    jArr.put(summaryData);

                    result = customDesignDAOObj.getCustomLineFields(companyid, Constants.Acc_Credit_Note_ModuleId);
                    list = result.getEntityList();
                    for (int cnt = 0; cnt < list.size(); cnt++) {
                        JSONObject obj = new JSONObject();
                        HashMap<String, String> map = new HashMap<String, String>();
                        Object[] rowcustom = (Object[]) list.get(cnt);
                        map.put("Custom_" + rowcustom[2], "{label:'" + rowcustom[2] + "',xtype:'" + rowcustom[1].toString() + "'}");
                        dbCustomJSONArr.put(map);
                    }
                    jArr.put(dbCustomJSONArr);


                }
                /*
                 * Template Sub Type
                 * 0 - Credit Note 
                 * 1 - Credit Note with Sales
                 * Return
                 */
                if (!StringUtil.isNullObject(cn.getSalesReturn()) && templateSubtype.equals("1")) {//Credit Note Against Sales Return Case
                    int moduleid = Constants.Acc_Sales_Return_ModuleId;
                    JSONArray SalesReturnlineItemsArr = accInvoiceCommon.getSalesReturnDetailsItemJSON(requestObj, cn.getSalesReturn().getID(), moduleid);
                    for (int cnt = 0; cnt < SalesReturnlineItemsArr.length(); cnt++) {
                        JSONObject itemData = SalesReturnlineItemsArr.getJSONObject(cnt);
                        jArr.put(itemData);
                    }
                }
                
                /*
                 * Template Sub Type
                 * 7 - Undercharged CN
                 * 8 - Overcharged CN
                 */
                
                /*
                 * Getting line item data for undercharged and overcharged CN
                 */
                
                if(cn.getRowsGst() !=null) {
                    Map<String, Object> summaryParams = new HashMap<>();
                    summaryParams.put("templateSubtype", templateSubtype);
                    summaryParams.put("companyAccountPreferences", companyAccountPreferences);
                    summaryParams.put("extraCompanyPreferences", extraCompanyPreferences);
                    summaryParams.put("pdfConfig", config);
                    summaryParams.put("lineLevelTaxesGST", lineLevelTaxesGST);
                    summaryParams.put("lineLevelTaxAmountGST", lineLevelTaxAmountGST);
                    summaryParams.put("lineLevelTaxBasicGST", lineLevelTaxBasicGST);
                    summaryParams.put("creditNote", creditNote);
                    summaryParams.put("accountsubtotal", accountsubtotal);
                    summaryParams.put("accounttotaltax", accounttotaltax);
                    summaryParams.put("accounttotalamount", accounttotalamount);
                    summaryParams.put("invoicesubtotal", invoicesubtotal);
                    summaryParams.put("invoicetotaltax", invoicetotaltax);
                    summaryParams.put("invoicetotalamount", invoicetotalamount);
                    summaryParams.put("totalwithtax", totalwithtax);
                    summaryParams.put("GSTExchangeRate", GSTExchangeRate);
                    summaryParams.put("invoiceNos", invoiceNos);
                    summaryParams.put("invAmounts", invAmounts);
                    summaryParams.put("invTaxAmounts", invTaxAmounts);
                    summaryParams.put("invAmountDues", invAmountDues);
                    summaryParams.put("invEnterAmounts", invEnterAmounts);
                    summaryParams.put("invoicedates", invoicedates);
                    summaryParams.put("accCodes", accCodes);
                    summaryParams.put("accNames", accNames);
                    summaryParams.put("accAmounts", accAmounts);
                    summaryParams.put("accTaxNames", accTaxNames);
                    summaryParams.put("accTaxAmounts", accTaxAmounts);
                    summaryParams.put("accAmountWithTaxes", accAmountWithTaxes);
                    summaryParams.put("accDescriptions", accDescriptions);
                    summaryParams.put("accTaxPercent", accTaxPercent);
                    summaryParams.put("accReason", accReason);
                    summaryParams.put("accAmountExcludeGST", accAmountExcludeGST);
                    summaryParams.put("subTotal", subTotal);
                    summaryParams.put("totaltax", totaltax);
                    summaryParams.put("salespersonvalue", invoiceSalesPerson);

                    if (templateSubtype.equals(CustomDesignerConstants.OVERCHARGE_SUBTYPE)) {
                        jArr = accInvoiceCommon.getOverchargeCNDetailsItemJSON(requestObj, summaryParams);
                    } else if (templateSubtype.equals(CustomDesignerConstants.UNDERCHARGE_SUBTYPE)) {
                        jArr = accInvoiceCommon.getUnderchargeCNDetailsItemJSON(requestObj, summaryParams);
                    }
                }
            }
        } catch (Exception ex) {
            Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE,null,ex);
        }
        return jArr;
    }
   
//Neeraj Customer Quotation
public ModelAndView exportSingleCustomerQuotation(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        String view = "jsonView-empty";
        try {
            JSONObject requestObj = StringUtil.convertRequestToJsonObject(request);
            HashMap<String, Object>otherconfigrequestParams = new HashMap();
            String vqID = requestObj.optString("bills");
            String companyid = requestObj.optString(Constants.companyKey);
            boolean isLeaseFixedAsset = requestObj.optBoolean(Constants.isLeaseFixedAsset);
            int moduleid = requestObj.optInt(Constants.moduleid);

            if(isLeaseFixedAsset){
                moduleid = Constants.Acc_Lease_Quotation;
            }
            otherconfigrequestParams.put(Constants.moduleid, moduleid);
            /*
             * Below block to replace module custom global placeholders with
             * actual values
             */

            KwlReturnObject objItr = accountingHandlerDAOobj.getObject(Quotation.class.getName(), vqID);
            Quotation quotation = (Quotation) objItr.getEntityList().get(0);
            AccCustomData  accCustomData = null;
            String recordids = requestObj.optString("recordids");
            ArrayList<String> vqIDList = CustomDesignHandler.getSelectedBillIDs(recordids);
            /*
             * get Line Item Data
             */
            HashMap<String, Object> fieldrequestParams = new HashMap();
            fieldrequestParams.put(Constants.filter_names, Arrays.asList(Constants.companyid, Constants.moduleid, Constants.customcolumn));
            fieldrequestParams.put(Constants.filter_values, Arrays.asList(companyid, moduleid, 1));
            HashMap<String, String> replaceFieldMap = new HashMap<String, String>();
            HashMap<String, Integer> FieldMap = accAccountDAOobj.getFieldParamsMap(fieldrequestParams, replaceFieldMap);
            replaceFieldMap = new HashMap<String, String>();

            HashMap<String, JSONArray> itemDataCustomerQuotation = new HashMap<String, JSONArray>();

            /*
             * Dimensions----Customcolumn=1-lineitem;Customfield=0=Dimension
             */
            fieldrequestParams.clear();
            HashMap<String, String> dimensionFieldMap = new HashMap<String, String>();
            fieldrequestParams.put(Constants.filter_names, Arrays.asList(Constants.companyid, Constants.moduleid, Constants.customcolumn, Constants.customfield));
            fieldrequestParams.put(Constants.filter_values, Arrays.asList(companyid, moduleid, 1, 0));
            HashMap<String, Integer> DimensionFieldMap = accAccountDAOobj.getFieldParamsMap(fieldrequestParams, dimensionFieldMap);
            
            fieldrequestParams.clear();
            HashMap<String, String> customfieldFieldMap = new HashMap<String, String>();
            fieldrequestParams.put(Constants.filter_names, Arrays.asList(Constants.companyid, Constants.moduleid, Constants.customcolumn, Constants.customfield));
            fieldrequestParams.put(Constants.filter_values, Arrays.asList(companyid, moduleid, 1, 1));
            HashMap<String, Integer> LineLevelCustomFieldMap = accAccountDAOobj.getFieldParamsMap(fieldrequestParams, customfieldFieldMap);
            
            //For product custom field
            fieldrequestParams.clear();
            HashMap<String, String> productCustomfieldFieldMap = new HashMap<String, String>();
            fieldrequestParams.put(Constants.filter_names, Arrays.asList(Constants.companyid, Constants.moduleid, Constants.customcolumn));
            fieldrequestParams.put(Constants.filter_values, Arrays.asList(companyid, Constants.Acc_Product_Master_ModuleId, 0));
            HashMap<String, Integer> ProductLevelCustomFieldMap = accAccountDAOobj.getFieldParamsMap(fieldrequestParams, productCustomfieldFieldMap);
            
            HashMap<String, Object> paramMap = new HashMap();
            paramMap.put(Constants.fieldMap, FieldMap);
            paramMap.put(Constants.replaceFieldMap, replaceFieldMap);
            paramMap.put(Constants.dimensionFieldMap, DimensionFieldMap);
            paramMap.put(Constants.lineLevelCustomFieldMap, LineLevelCustomFieldMap);
            paramMap.put(Constants.productLevelCustomFieldMap, ProductLevelCustomFieldMap);
            
            for (int count = 0; count < vqIDList.size(); count++) {
                JSONArray lineItemsArr = accInvoiceCommon.getCustomerQuotationDetailsItemJSON(requestObj, vqIDList.get(count), paramMap);
                itemDataCustomerQuotation.put(vqIDList.get(count), lineItemsArr);

                // Below Function called to update print flag for CQ Report
                accCommonTablesDAO.updatePrintFlag(moduleid, vqIDList.get(count), companyid);
            }

            String vqPostText = quotation.getPostText() == null ? "" : quotation.getPostText();
         ExportRecordHandler.exportSingleGeneric(request, response,itemDataCustomerQuotation,accCustomData,customDesignDAOObj,accCommonTablesDAO,accAccountDAOobj, accountingHandlerDAOobj,velocityEngine,vqPostText,otherconfigrequestParams,accInvoiceServiceDAO,accGoodsReceiptServiceDAOObj);

        } catch (SessionExpiredException ex) {
            Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
        }
        return new ModelAndView(view, "model", jobj.toString());
    }

    /*Sales Return*/
 public ModelAndView exportSingleSalesReturn(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        String view = "jsonView-empty";
        try {
            
            JSONObject requestObj = StringUtil.convertRequestToJsonObject(request);
            HashMap<String, Object>otherconfigrequestParams = new HashMap();
            String vqID = requestObj.optString("bills");
            String companyid = requestObj.optString(Constants.companyKey);
            int moduleid = requestObj.optInt(Constants.moduleid);
 
            boolean isConsignment = requestObj.optBoolean(Constants.isConsignment, false);
            boolean isLease = requestObj.optBoolean(Constants.isLeaseFixedAsset, false);
            if (isConsignment) {
                moduleid = Constants.Acc_ConsignmentSalesReturn_ModuleId;
            }else if(isLease){
                moduleid = Constants.Acc_Lease_Return;
            }
            
            KwlReturnObject objItr = accountingHandlerDAOobj.getObject(SalesReturn.class.getName(), vqID);
            SalesReturn sr  = (SalesReturn) objItr.getEntityList().get(0);
             AccCustomData  accCustomData = null;
            if (sr.getSalesReturnCustomData() != null) {
                accCustomData = sr.getSalesReturnCustomData();
            }
            String recordids = requestObj.optString("recordids");
            ArrayList<String> vqIDList = CustomDesignHandler.getSelectedBillIDs(recordids);
    
            HashMap<String, JSONArray> itemDataSalesReturn = new HashMap<String, JSONArray>();
            for (int count = 0; count < vqIDList.size(); count++) {
                JSONArray lineItemsArr = accInvoiceCommon.getSalesReturnDetailsItemJSON(requestObj, vqIDList.get(count), moduleid);
                itemDataSalesReturn.put(vqIDList.get(count), lineItemsArr);

                // Below Function called to update print flag for SR Report
                accCommonTablesDAO.updatePrintFlag(moduleid, vqIDList.get(count), companyid);
            }
            otherconfigrequestParams.put(Constants.moduleid, moduleid);
            otherconfigrequestParams.put(Constants.isConsignment, isConsignment);
            String vqPostText = sr.getPostText() == null ? "" : sr.getPostText();
            ExportRecordHandler.exportSingleGeneric(request, response,itemDataSalesReturn,accCustomData,customDesignDAOObj,accCommonTablesDAO,accAccountDAOobj, accountingHandlerDAOobj,velocityEngine,vqPostText,otherconfigrequestParams,accInvoiceServiceDAO,accGoodsReceiptServiceDAOObj);
    
        } catch (SessionExpiredException ex) {
            Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
        }
        return new ModelAndView(view, "model", jobj.toString());
    }
    
    
    public void exportSingleDeliveryOrder(HttpServletRequest request, HttpServletResponse response) {
        try {
            String SOID = request.getParameter("bills");
            String companyid = AccountingManager.getCompanyidFromRequest(request);
            HashMap<String, Object>otherconfigrequestParams = new HashMap();
            boolean isConsignment=Boolean.parseBoolean(request.getParameter(Constants.isConsignment));
            boolean isLease=Boolean.parseBoolean(request.getParameter(Constants.isLeaseFixedAsset));
            int moduleid=Integer.parseInt(request.getParameter(Constants.moduleid));
            if (isConsignment) {
                moduleid = Constants.Acc_ConsignmentDeliveryOrder_ModuleId;
            }else if (isLease){//is this lease module
                moduleid = Constants.Acc_Lease_DO;
            }
            /**
             * change module id for asset module
             */
            boolean isFixedAsset = false;
            if (!StringUtil.isNullOrEmpty(request.getParameter(Constants.isFixedAsset))) {
                isFixedAsset = Boolean.parseBoolean(request.getParameter(Constants.isFixedAsset));
            }
            if(isFixedAsset){
                moduleid = Constants.Acc_FixedAssets_DeliveryOrder_ModuleId;
            }

            KwlReturnObject objItr = accountingHandlerDAOobj.getObject(DeliveryOrder.class.getName(), SOID);
            DeliveryOrder deliveryOrder = (DeliveryOrder) objItr.getEntityList().get(0);
            AccCustomData accCustomData = null;
            if (deliveryOrder.getDeliveryOrderCustomData() != null) {
                accCustomData = deliveryOrder.getDeliveryOrderCustomData();
            }
            String recordids = "";
            if (!StringUtil.isNullOrEmpty(request.getParameter("recordids"))) {
                recordids = request.getParameter("recordids");
            }
            ArrayList<String> SOIDList = CustomDesignHandler.getSelectedBillIDs(recordids);
            HashMap<String, Object> fieldrequestParams = new HashMap();
            fieldrequestParams.put(Constants.filter_names, Arrays.asList(Constants.companyid, Constants.moduleid,Constants.customcolumn));
            fieldrequestParams.put(Constants.filter_values, Arrays.asList(companyid, moduleid,1));
            HashMap<String, String> replaceFieldMap = new HashMap<String, String>();
            HashMap<String, Integer> FieldMap = accAccountDAOobj.getFieldParamsMap(fieldrequestParams, replaceFieldMap);
            replaceFieldMap = new HashMap<String, String>();

            HashMap<String, JSONArray> itemDataDeliveryOrder = new HashMap<String, JSONArray>();
            /*
             * Dimensions----Customcolumn=1-lineitem;Customfield=0=Dimension
             */
            fieldrequestParams.clear();
            HashMap<String, String> dimensionFieldMap = new HashMap<String, String>();
            fieldrequestParams.put(Constants.filter_names, Arrays.asList(Constants.companyid, Constants.moduleid, Constants.customcolumn, Constants.customfield));
            fieldrequestParams.put(Constants.filter_values, Arrays.asList(companyid, moduleid, 1, 0));
            HashMap<String, Integer> DimensionFieldMap = accAccountDAOobj.getFieldParamsMap(fieldrequestParams, dimensionFieldMap);

             fieldrequestParams.clear();
             HashMap<String, String> customfieldFieldMap = new HashMap<String, String>();
             fieldrequestParams.put(Constants.filter_names, Arrays.asList(Constants.companyid, Constants.moduleid, Constants.customcolumn, Constants.customfield));
             fieldrequestParams.put(Constants.filter_values, Arrays.asList(companyid, moduleid, 1, 1));
             HashMap<String, Integer> LineLevelCustomFieldMap = accAccountDAOobj.getFieldParamsMap(fieldrequestParams, customfieldFieldMap);
             /**
             * reset module id
             */
            if(isFixedAsset){
                moduleid = Constants.Acc_Delivery_Order_ModuleId;
            }
             //For product custom field
             fieldrequestParams.clear();
             HashMap<String, String> productCustomfieldFieldMap = new HashMap<String, String>();
             fieldrequestParams.put(Constants.filter_names, Arrays.asList(Constants.companyid, Constants.moduleid, Constants.customcolumn));
             fieldrequestParams.put(Constants.filter_values, Arrays.asList(companyid, Constants.Acc_Product_Master_ModuleId, 0));
             HashMap<String, Integer> ProductLevelCustomFieldMap = accAccountDAOobj.getFieldParamsMap(fieldrequestParams, productCustomfieldFieldMap);

            HashMap<String, Object> paramMap = new HashMap();
            paramMap.put(Constants.fieldMap, FieldMap);
            paramMap.put(Constants.replaceFieldMap, replaceFieldMap);
            paramMap.put(Constants.dimensionFieldMap, DimensionFieldMap);
            paramMap.put(Constants.lineLevelCustomFieldMap, LineLevelCustomFieldMap);
            paramMap.put(Constants.productLevelCustomFieldMap, ProductLevelCustomFieldMap);
            
            JSONObject requestObj = StringUtil.convertRequestToJsonObject(request);
            requestObj.put("moduleid", moduleid);
            
            for (int count = 0; count < SOIDList.size(); count++) {
                JSONArray lineItemsArr = accInvoiceCommon.getDODetailsItemJSON(requestObj, SOIDList.get(count), paramMap);
                itemDataDeliveryOrder.put(SOIDList.get(count), lineItemsArr);

                // Below Function called to update print flag for DO Report
                accCommonTablesDAO.updatePrintFlag(moduleid, SOIDList.get(count), companyid);
            }

            otherconfigrequestParams.put(Constants.moduleid,moduleid);
            otherconfigrequestParams.put(Constants.isConsignment,isConsignment);

            String invoicePostText=deliveryOrder.getPostText()==null?"":deliveryOrder.getPostText();
            ExportRecordHandler.exportSingleGeneric(request, response,itemDataDeliveryOrder,accCustomData,customDesignDAOObj,accCommonTablesDAO,accAccountDAOobj, accountingHandlerDAOobj,velocityEngine,invoicePostText,otherconfigrequestParams,accInvoiceServiceDAO,accGoodsReceiptServiceDAOObj);
        } catch (ServiceException | SessionExpiredException ex) {
           Logger.getLogger(accInvoiceController.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
        } catch (Exception ex) {
           Logger.getLogger(accInvoiceController.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
        }
    }


    public ModelAndView importCommodityTransactions(HttpServletRequest request, HttpServletResponse response) throws ServiceException {
        JSONObject jobj = new JSONObject();
        String msg = "";
        boolean issuccess = false;
        try {
            String doAction = request.getParameter("do");
            System.out.println("A(( " + doAction + " start : " + new Date());

            JSONObject datajobj = new JSONObject();

            if (doAction.compareToIgnoreCase("getMapCSV") == 0) {
                datajobj = importHandler.getMappingCSVHeader(request);
                JSONArray jSONArray = datajobj.getJSONArray("Header");
//                validateHeaders(jSONArray);

                jobj = importOeningTransactionsRecords(request, datajobj);
//                msg = "All records are imported successfully.";
                issuccess = true;
            }
        } catch (Exception ex) {
            issuccess = false;
            msg = "" + ex.getMessage();

            try {
                jobj.put("success", issuccess);
                jobj.put("msg", msg);
            } catch (JSONException e) {
                Logger.getLogger(accInvoiceController.class.getName()).log(Level.SEVERE, e.getMessage(), e);
            }

            Logger.getLogger(accInvoiceController.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
        }
        return new ModelAndView("jsonView_ex", "model", jobj.toString());
    }
    public ModelAndView importInvoiceTransactions(HttpServletRequest request, HttpServletResponse response) throws ServiceException {
        JSONObject jobj = new JSONObject();
        String msg = "";
        boolean issuccess = false;
        try {
            String doAction = request.getParameter("do");
            System.out.println("A(( " + doAction + " start : " + new Date());
    
            JSONObject datajobj = new JSONObject();

            if (doAction.compareToIgnoreCase("getMapCSV") == 0) {
                datajobj = importHandler.getMappingCSVHeader(request);
                JSONArray jSONArray = datajobj.getJSONArray("Header");
//                validateHeaders(jSONArray);

                jobj = importInvoiceTransactionsRecords(request, datajobj);
//                msg = "All records are imported successfully.";
                issuccess = true;
            }
        } catch (Exception ex) {
            issuccess = false;
            msg = "" + ex.getMessage();

            try {
                jobj.put("success", issuccess);
                jobj.put("msg", msg);
            } catch (JSONException e) {
                Logger.getLogger(accInvoiceController.class.getName()).log(Level.SEVERE, e.getMessage(), e);
            }

            Logger.getLogger(accInvoiceController.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
        }
        return new ModelAndView("jsonView_ex", "model", jobj.toString());
    }
    
    public String createCSVrecord(Object[] listArray) {
        String rec = "";
        for(int i=0; i<listArray.length; i++){    //Discard columns id at index 0 and isvalid,invalidColumns, validationlog at last 3 indexes.
//            String s = (listArray[i]==null)?"":listArray[i].toString();
            rec += "\""+(listArray[i]==null?"":listArray[i].toString().replaceAll("\"", ""))+"\",";
        }
        return rec;
    }
    
    private HashMap<String, FieldParams> getAvailableCustomField(int moduleId, String companyid) {
        HashMap<String, FieldParams> fieldParamMap = new HashMap<String, FieldParams>();

        // Put FieldParams Object for Vessel Name

        String customFieldName = "Vessel Name";
        getFieldParamsMap(fieldParamMap, moduleId, companyid, customFieldName);

        // Put FieldParams Object for Contract No

        customFieldName = "Contract No";
        getFieldParamsMap(fieldParamMap, moduleId, companyid, customFieldName);

        // Put FieldParams Object for Buyer Name

        customFieldName = "Buyer Name";
        getFieldParamsMap(fieldParamMap, moduleId, companyid, customFieldName);

        // Put FieldParams Object for Invoiced Quantity

        customFieldName = "Invoiced Quantity";
        getFieldParamsMap(fieldParamMap, moduleId, companyid, customFieldName);

        // Put FieldParams Object for Commission Rate

        customFieldName = "Commission Rate";
        getFieldParamsMap(fieldParamMap, moduleId, companyid, customFieldName);

        customFieldName = "Class";
        getFieldParamsMap(fieldParamMap, moduleId, companyid, customFieldName);
        
        customFieldName = "Class1";
        getFieldParamsMap(fieldParamMap, moduleId, companyid, customFieldName);
        
        customFieldName = "Payment Method";
        getFieldParamsMap(fieldParamMap, moduleId, companyid, customFieldName);
        
        customFieldName = "Remarks";
        getFieldParamsMap(fieldParamMap, moduleId, companyid, customFieldName);

        return fieldParamMap;
    }
    
    
    private void getFieldParamsMap(HashMap<String, FieldParams> fieldParamMap, int moduleId, String companyid, String customFieldName) {
        List filter_names = new ArrayList();
        List filter_values = new ArrayList();
        filter_names.add(Constants.moduleid);
        filter_names.add(Constants.companyKey);
        filter_names.add("fieldlabel");

        filter_values.add(moduleId);
        filter_values.add(companyid);
        filter_values.add(customFieldName);

        HashMap<String, Object> requestParams = new HashMap<String, Object>();
        requestParams.put("filter_names", filter_names);
        requestParams.put("filter_values", filter_values);

        FieldParams fieldParams = null;

        KwlReturnObject fieldParamResult = accCommonTablesDAO.getFieldParams(requestParams);
        if (!fieldParamResult.getEntityList().isEmpty()) {
            fieldParams = (FieldParams) fieldParamResult.getEntityList().get(0);
            if (fieldParams != null) {
                fieldParamMap.put(customFieldName, fieldParams);
            }
        }
    }
    
    public JSONObject importOeningTransactionsRecords(HttpServletRequest request, JSONObject jobj) throws AccountingException, IOException, SessionExpiredException, JSONException {
        
        DefaultTransactionDefinition def = new DefaultTransactionDefinition();
        def.setName("import_Tx");
        def.setPropagationBehavior(TransactionDefinition.PROPAGATION_REQUIRED);
        TransactionStatus status = txnManager.getTransaction(def);
        boolean commitedEx = false;
        boolean issuccess = true;
        String msg = "";
        FileInputStream fileInputStream = null;
        BufferedReader br = null;
        int total = 0, failed = 0;
        String companyid = sessionHandlerImpl.getCompanyid(request);
        String gcurrencyId = sessionHandlerImpl.getCurrencyID(request);
        String userId = sessionHandlerImpl.getUserid(request);
        String fileName = jobj.getString("name");
        
//        String importDateStr = request.getParameter("importDate");

        JSONObject returnObj = new JSONObject();
        
        try {
            
//            DateFormat df = new SimpleDateFormat("yyyy-MM-dd");;
            KwlReturnObject cap = accountingHandlerDAOobj.getObject(CompanyAccountPreferences.class.getName(), companyid);
            CompanyAccountPreferences preferences = (CompanyAccountPreferences) cap.getEntityList().get(0);
            KwlReturnObject extraPref = accountingHandlerDAOobj.getObject(ExtraCompanyPreferences.class.getName(), companyid);
            ExtraCompanyPreferences extrareferences = (ExtraCompanyPreferences) extraPref.getEntityList().get(0);
            Boolean isCurrencyCode=extrareferences.isCurrencyCode();
            fileInputStream = new FileInputStream(jobj.getString("FilePath"));
            br = new BufferedReader(new InputStreamReader(fileInputStream));
            String record = "";
            int cnt = 0;
            
            StringBuilder failedRecords = new StringBuilder();
            
            JSONArray jSONArray = jobj.getJSONArray("Header");
            List headArrayList = new ArrayList();
            for(int i=0;i<jSONArray.length();i++){
                JSONObject jSONObject = jSONArray.getJSONObject(i);
                headArrayList.add(jSONObject.get("header"));
            }
            
            HashMap<String, FieldParams> customerInvoiceFieldParamsMap = getAvailableCustomField(Constants.Acc_Invoice_ModuleId, companyid);;
            HashMap<String, FieldParams> vendorInvoiceFieldParamsMap = getAvailableCustomField(Constants.Acc_Vendor_Invoice_ModuleId, companyid);;
            HashMap<String, FieldParams> creditNoteFieldParamsMap = getAvailableCustomField(Constants.Acc_Credit_Note_ModuleId, companyid);;
            HashMap<String, FieldParams> debitNoteFieldParamsMap = getAvailableCustomField(Constants.Acc_Debit_Note_ModuleId, companyid);;
            
            
            
            failedRecords.append(createCSVrecord(headArrayList.toArray())+"\"Error Message\"");//failedRecords.append("\"Row No.\","+createCSVrecord(fileData)+"\"Error Message\"");
            
//            HashMap<String, Object> requestParams = AccountingManager.getGlobalParams(request);
            
            while ((record = br.readLine()) != null) {
                if (cnt != 0) {
                    String[] recarr = record.split(",");
                    
                    try {
                        
                        int transactionTypeIndex = headArrayList.indexOf("Document Type(I/C/D - Invoice/CN/DN)");
                        
                        String transactionType = recarr[transactionTypeIndex].trim();
                        
                        if(!StringUtil.isNullOrEmpty(transactionType)){
                            transactionType = transactionType.replaceAll("\"", "");
                        }else{
                            throw new AccountingException("Document Type(I/C/D - Invoice/CN/DN) value is not available");
                        }
                        
                        // Fetching Customer Or Vendor code
                        String customerCode="";
                        int customerCodeIndex = headArrayList.indexOf("BillToCode");
                        if (customerCodeIndex != -1) {
                            customerCode = recarr[customerCodeIndex].trim();
                            if (!StringUtil.isNullOrEmpty(customerCode)) {
                                customerCode = customerCode.replaceAll("\"", "");
                            } else {
                                throw new AccountingException("Bill To Code is not available");
                            }
                        } else {
                            throw new AccountingException("BillToCode column is not available");
                        }
                       
                         String productTax = "";
                        String gstAmountStr = "0";
                        int gstCode = headArrayList.indexOf("GSTCode");
                        if (gstCode > -1) {
                            String gstCodeStr = recarr[gstCode].trim();
                            if (!StringUtil.isNullOrEmpty(gstCodeStr)) {
                                gstCodeStr = gstCodeStr.replaceAll("\"", "");
                            } else {
                                throw new AccountingException("GST Code Not Available.");
                            }

                            int gstAmount = headArrayList.indexOf("GSTAmount");
                            if (gstAmount != -1) {
                                gstAmountStr = recarr[gstAmount].trim();
                                if (!StringUtil.isNullOrEmpty(gstAmountStr)) {
                                    gstAmountStr = gstAmountStr.replaceAll("\"", "");
                                } else {
                                    throw new AccountingException("GST Amount Not Available.");
                                }
                            }
                            if (!StringUtil.isNullOrEmpty(gstCodeStr)) {

                                Tax tx = getGSTByCode(gstCodeStr, companyid);
                                if (tx != null) {
                                    productTax = tx.getID();
                                } else {
                                    throw new AccountingException("GST Account is not found for GST Code " + gstCodeStr);
                                }

                            }
                        }
                        String customerId = "";
                        String vendorId = "";
                        String customer_accountid = "";
                        String vendor_accountid = "";
                       
                       
                        if (transactionType.equalsIgnoreCase("C") || transactionType.equalsIgnoreCase("I")) {
                            Customer customer = getCustomerByCode(customerCode, companyid);
                            if (customer != null) {
                                customerId = customer.getID();
                                customer_accountid = customer.getAccount().getID();
                            } else {
                                throw new AccountingException("Customer is not found for Customer Code " + customerCode);
                            }
                        } else if(transactionType.equalsIgnoreCase("D") || transactionType.equalsIgnoreCase("VI")) {
                            Vendor vendor = getVendorByCode(customerCode, companyid);
                            if (vendor != null) {
                                vendorId = vendor.getID();
                                vendor_accountid = vendor.getAccount().getID();
                            } else {
                                throw new AccountingException("Vendor is not found for Vendor Code " + customerCode);
                            }
                        }
                        
                        
                        
                        int documentNumberIndex = headArrayList.indexOf("Document Number");
                        
                        String documentNumber = recarr[documentNumberIndex].trim();
                        if(!StringUtil.isNullOrEmpty(documentNumber)){
                            documentNumber = documentNumber.replaceAll("\"", "");
                        }else{
                            throw new AccountingException("Document Number is not available");
                        }
                        
                        int documentDateIndex = headArrayList.indexOf("Document Date (YYYYMMDD)");
                        
                        Date transactionDate = null;
                        
                        String documentDateStr = recarr[documentDateIndex].trim();
                        if(!StringUtil.isNullOrEmpty(documentDateStr)){
                            documentDateStr = documentDateStr.replaceAll("\"", "");
                        }else{
                            throw new AccountingException("Document Date (YYYYMMDD) is not available");
                        }
                        
                        if (!StringUtil.isNullOrEmpty(documentDateStr)) {
                            char[] dateArray = documentDateStr.toCharArray();
                            String year  = dateArray[0]+""+dateArray[1]+""+dateArray[2]+""+dateArray[3];
                            String month = dateArray[4]+""+dateArray[5];
                            String day = dateArray[6]+""+dateArray[7];
                            
                            documentDateStr = year+"-"+month+"-"+day;
                            
//                            "Jan 04, 2015 12:00:00 AM"
                            
//                            transactionDate = df.parse(documentDateStr);
                            
                            String transactionDateForImport = getTransactionDateForImport(request, year, month, day);
                            transactionDate = authHandler.getDateOnlyFormat().parse(transactionDateForImport);
                        }
                        
                        // Contract Number
                        
                        int contractNoIdx = headArrayList.indexOf("Contract No"); 
                        
                        String contractNo = "";
                        
                        if (contractNoIdx > 0) {
                            String contractNoStr = recarr[contractNoIdx].trim();
                            if (!StringUtil.isNullOrEmpty(contractNoStr)) {
                                contractNo = contractNoStr.replaceAll("\"", "");
                            }
                        }
                        
                        // Buyer Name
                        
                        int buyerNameIdx = headArrayList.indexOf("Buyer Name"); 
                        
                        String buyerName = "";
                        
                        if (buyerNameIdx > 0) {
                            String buyerNameStr = recarr[buyerNameIdx].trim();
                            if (!StringUtil.isNullOrEmpty(buyerNameStr)) {
                                buyerName = buyerNameStr.replaceAll("\"", "");
                            }
                        }
                        
                        // Invoiced Quantity
                        
                        int invoicedQuantityIdx = headArrayList.indexOf("Invoiced Quantity"); 
                        
                        String invoicedQuantitys = "";
                        double invoicedQuantity = 0d;
                        
                        if (invoicedQuantityIdx > 0) {
                            String invoicedQuantityStr = recarr[invoicedQuantityIdx].trim();
                            if (!StringUtil.isNullOrEmpty(invoicedQuantityStr)) {
                                invoicedQuantitys = invoicedQuantityStr.replaceAll("\"", "");
                            }
                            if (!StringUtil.isNullOrEmpty(invoicedQuantitys)) {
                                invoicedQuantity = Double.parseDouble(invoicedQuantitys);
                            }
                        }
                        
                        // Commission Rate
                        
                        int commissionRateIdx = headArrayList.indexOf("Commission Rate"); 
                        
                        String commissionRatest = "";
                        double commissionRate = 0d;
                        
                        if (commissionRateIdx > 0) {
                            String commissionRateStr = recarr[commissionRateIdx].trim();
                            if (!StringUtil.isNullOrEmpty(commissionRateStr)) {
                                commissionRatest = commissionRateStr.replaceAll("\"", "");
                            }
                            if (!StringUtil.isNullOrEmpty(commissionRatest)) {
                                commissionRate = Double.parseDouble(commissionRatest);
                            }
                        }
                        
                        
                        // Document Remarks
                        
                        int documentRemarkIdx = headArrayList.indexOf("Document Remarks");

                        String documentRemark = "";

                        if (documentRemarkIdx > 0) {
                            String documentRemarkStr = recarr[documentRemarkIdx].trim();
                            if (!StringUtil.isNullOrEmpty(documentRemarkStr)) {
                                documentRemark = documentRemarkStr.replaceAll("\"", "");
                            }
                        }
                        
                        
                        // Vessel Name
                        
                        int vesselNameIdx = headArrayList.indexOf("Vessel Name"); 
                        
                        String vesselName = "";
                        
                        if (vesselNameIdx > 0) {
                            String vesselNameStr = recarr[vesselNameIdx].trim();
                            if (!StringUtil.isNullOrEmpty(vesselNameStr)) {
                                vesselName = vesselNameStr.replaceAll("\"", "");
                            }
                        }
                        
                        
                        
                        // Fetching Account code
                        
                        String accountId = "";
                        int accountCodeIndex = headArrayList.indexOf("GL Code");

                        if (transactionType.equalsIgnoreCase("C") || transactionType.equalsIgnoreCase("D")) {
                            String accountCode = recarr[accountCodeIndex].trim();
                            if (!StringUtil.isNullOrEmpty(accountCode)) {
                                accountCode = accountCode.replaceAll("\"", "");
                            } else {
                                throw new AccountingException("GL Code is not available");
                            }

                            Account account = getAccountByCode(accountCode, companyid);
                            if (account != null) {
                                accountId = account.getID();
                            } else {
                                throw new AccountingException("Account is not found for Account Code " + accountCode);
                            }
                        }
                        
                        
                        // Fetching Products
                        
                        String productId = "";
                        String productSellingAccountId = "";
                        int productCodeIndex = headArrayList.indexOf("Product Code");
                        
                        if (transactionType.equalsIgnoreCase("I") || transactionType.equalsIgnoreCase("VI")) {
                            String productCode = recarr[productCodeIndex].trim();
                            if (!StringUtil.isNullOrEmpty(productCode)) {
                                productCode = productCode.replaceAll("\"", "");
                            } else {
                                throw new AccountingException("Product Code is not available");
                            }

                            Product product = getProductByCode(productCode, companyid);
                            if (product != null) {
                                productId = product.getID();
                                productSellingAccountId = product.getSalesAccount().getID();
                            } else {
                                throw new AccountingException("Product is not found for Product Code " + productCode);
                            }
                        }
                        
                        
                        
                        // Transaction Amount
                        
                        int transactionAmountIndex = headArrayList.indexOf("Amount");
                        
                        String transactionAmountStr = recarr[transactionAmountIndex].trim();
                        if(!StringUtil.isNullOrEmpty(transactionAmountStr)){
                            transactionAmountStr = transactionAmountStr.replaceAll("\"", "");
                        }else{
                            throw new AccountingException("Amount is not available");
                        }
                        
                        double transactionAmount = 0d;
                        if (!StringUtil.isNullOrEmpty(transactionAmountStr)) {
                            transactionAmount = Double.parseDouble(transactionAmountStr);
                        }
                        
                        
                        // Currency
                        
                        HashMap currencyMap = getCurrencyMap(isCurrencyCode);
                        
                        String currencyId = "";
                        int currencyIndex = headArrayList.indexOf("Currency (Empty if USD)");
                        if (currencyIndex > 0) {
                            String currencyStr = recarr[currencyIndex].trim();
                            if (!StringUtil.isNullOrEmpty(currencyStr)) {
                                currencyStr = currencyStr.replaceAll("\"", "");
                            }
                            if (!StringUtil.isNullOrEmpty(currencyStr)) {
                                currencyId = getCurrencyId(currencyStr, currencyMap);
                                if (StringUtil.isNullOrEmpty(currencyId)) {
                                    if (isCurrencyCode) {
                                        throw new AccountingException("Currency Code is not correct. it should be like \"SGD\"");
                                    } else {
                                        throw new AccountingException("Currency Name is not correct. it should be like \"SG Dollar (SGD)\"");
                                    }
                                }
                            } else {
                                currencyId = "1";//if not given in file then take USD
                            }

                        } else {
                            throw new AccountingException("File do no contains header : Currency (Empty if USD), Please provide it. ");
                        }
                       
                        
                        // Exchange Rate
                        
                        int exchangeRateIndex = headArrayList.indexOf("Exchange Rate (Empty if USD)");

                        String exchangeRateForTransactionStr = "";
                        if (exchangeRateIndex > 0) {
                            exchangeRateForTransactionStr = recarr[exchangeRateIndex].trim();

                            if (!StringUtil.isNullOrEmpty(exchangeRateForTransactionStr)) {
                                exchangeRateForTransactionStr = exchangeRateForTransactionStr.replaceAll("\"", "");
                            }
                        }
                        
                        double exchangeRateForTransaction = 1;
                        
                        if (!StringUtil.isNullOrEmpty(exchangeRateForTransactionStr)) {
                            exchangeRateForTransaction = Double.parseDouble(exchangeRateForTransactionStr);
                        } else {
                            Map<String, Object> currMap = new HashMap<String, Object>();
//                            Date finYrStartDate = preferences.getFinancialYearFrom();
//                            Calendar cal = Calendar.getInstance();
//                            cal.setTime(finYrStartDate);
//                            cal.add(Calendar.DATE, -1);

                            Date applyDate = transactionDate;

                            currMap.put("applydate", applyDate);
                            currMap.put(Constants.globalCurrencyKey, gcurrencyId);
                            currMap.put(Constants.companyKey, companyid);
                            KwlReturnObject retObj = accCurrencyDAOobj.getExcDetailID(currMap, currencyId, applyDate, null);
                            if (retObj != null) {
                                List li = retObj.getEntityList();
                                if (!li.isEmpty()) {
                                    Iterator itr = li.iterator();
                                    ExchangeRateDetails erd = (ExchangeRateDetails) itr.next();
                                    if (erd != null) {
                                        exchangeRateForTransaction = erd.getExchangeRate();
                                    }
                                }
                            }
                        }
                        
                        HashMap<String, Object> noteMap = new HashMap<String, Object>();
                        noteMap.put("entryNumber", documentNumber);
                        noteMap.put("creationDate", transactionDate);
                        noteMap.put(Constants.currencyKey, currencyId);
                        noteMap.put("externalCurrencyRate", exchangeRateForTransaction);
                        noteMap.put("accountid", accountId);
                        noteMap.put("customer_accountid", customer_accountid);
                        noteMap.put("vendor_accountid", vendor_accountid);
                        noteMap.put("contractNo", contractNo);
                        noteMap.put("buyerName", buyerName);
                        noteMap.put("invoicedQuantity", invoicedQuantity);
                        noteMap.put("commissionRate", commissionRate);
                        noteMap.put("vesselName", vesselName);
                        noteMap.put("customerInvoiceFieldParamsMap", customerInvoiceFieldParamsMap);
                        noteMap.put("vendorInvoiceFieldParamsMap", vendorInvoiceFieldParamsMap);
                        noteMap.put("creditNoteFieldParamsMap", creditNoteFieldParamsMap);
                        noteMap.put("debitNoteFieldParamsMap", debitNoteFieldParamsMap);
                        noteMap.put(Constants.customerid, customerId);
                        noteMap.put("vendorid", vendorId);
                        noteMap.put("cnamount", transactionAmount);
                        noteMap.put("transactionAmount", transactionAmount);
                        noteMap.put("productId", productId);
                        noteMap.put("productSellingAccountId", productSellingAccountId);
                        noteMap.put("documentRemark", documentRemark);
                        noteMap.put("productTax", productTax);
                        noteMap.put("productTaxAmount", gstAmountStr);
                        
                        
                        if (transactionType.equalsIgnoreCase("C")){
                            saveCreditNote(request,noteMap);
                        } else if(transactionType.equalsIgnoreCase("D")){
                            saveDebitNote(request,noteMap);
                        } else if(transactionType.equalsIgnoreCase("I")){
                            saveInvoice(request,noteMap);
                        } else if(transactionType.equalsIgnoreCase("VI")){
                            saveVendorInvoice(request,noteMap);
                        }
                        
                        
                        
                    }catch (Exception ex) {
                        failed++;
                        String errorMsg = ex.getMessage(), invalidColumns = "";
                        try {
                            JSONObject errorLog = new JSONObject(errorMsg);
                            errorMsg = errorLog.getString("errorMsg");
                            invalidColumns = errorLog.getString("invalidColumns");
                        } catch (JSONException jex) {
                        }
                        failedRecords.append("\n" + createCSVrecord(recarr) + "\"" + errorMsg.replaceAll("\"", "") + "\"");
                    }
                    total++;
                }
                cnt++;
            }
            if (failed > 0) {
                createFailureFiles(fileName, failedRecords, ".csv");
            }

            int success = total - failed;
            if (total == 0) {
                msg = messageSource.getMessage("acc.field.Emptyfile", null, RequestContextUtils.getLocale(request));
            } else if (success == 0) {
//                issuccess = false;
                msg = messageSource.getMessage("acc.rem.169", null, RequestContextUtils.getLocale(request));
            } else if (success == total) {
                msg = messageSource.getMessage("acc.rem.168", null, RequestContextUtils.getLocale(request));
            } else {
                msg = messageSource.getMessage("acc.field.Imported", null, RequestContextUtils.getLocale(request)) + success + " " + messageSource.getMessage("acc.field.record", null, RequestContextUtils.getLocale(request)) + (success > 1 ? "s" : "") + " " + messageSource.getMessage("acc.field.successfully.", null, RequestContextUtils.getLocale(request));
                msg += (failed == 0 ? "." : messageSource.getMessage("acc.field.andfailedtoimport", null, RequestContextUtils.getLocale(request)) + failed + " " + messageSource.getMessage("acc.field.record", null, RequestContextUtils.getLocale(request))+ (failed > 1 ? "s" : "") + ".");
            }

            try {
                txnManager.commit(status);
            } catch (Exception ex) {
                commitedEx = true;
                throw ex;
            }
            
        } catch (Exception ex) {
            if (!commitedEx) { //if exception occurs during commit then dont call rollback
                txnManager.rollback(status);
            }
            issuccess = false;
            msg = "" + ex.getMessage();

            Logger.getLogger(accInvoiceController.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
            throw new AccountingException("Error While Importing Records.");
        } finally {
            fileInputStream.close();
            br.close();

            DefaultTransactionDefinition ldef = new DefaultTransactionDefinition();
            ldef.setName("import_Tx");
            ldef.setPropagationBehavior(TransactionDefinition.PROPAGATION_REQUIRED);
            TransactionStatus lstatus = txnManager.getTransaction(ldef);
            try {
                //Insert Integration log
                HashMap<String, Object> logDataMap = new HashMap<String, Object>();
                logDataMap.put("FileName", getActualFileName(fileName));
                logDataMap.put("StorageName", fileName);
                logDataMap.put("Log", msg);
                logDataMap.put("Type", "csv");
                logDataMap.put("FailureFileType", failed>0?"csv":"");
                logDataMap.put("TotalRecs", total);
                logDataMap.put("Rejected", failed);
                logDataMap.put("Module", "2");
                logDataMap.put("ImportDate", new Date());
                logDataMap.put("User", userId);
                logDataMap.put("Company", companyid);
                importDao.saveImportLog(logDataMap);
                txnManager.commit(lstatus);
            } catch (Exception ex) {
                txnManager.rollback(lstatus);
                Logger.getLogger(accInvoiceController.class.getName()).log(Level.SEVERE, null, ex);
            }
            
            try {
                returnObj.put("success", issuccess);
                returnObj.put("msg", msg);
                returnObj.put("totalrecords", total);
                returnObj.put("successrecords", total-failed);
                returnObj.put("failedrecords", failed);
                returnObj.put("filename", getActualFileName(fileName));
            } catch (JSONException ex) {
                Logger.getLogger(accInvoiceController.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        
        return returnObj;
    }
    
    public String getTransactionDateForImport(HttpServletRequest request, String year, String month, String day) {
        String importDate = request.getParameter("importDate");
        //"Jan 04, 2015 12:00:00 AM";

        String monthName = getMonthName(Integer.parseInt(month));
        String returnStr = monthName + " " + day+", " + year + " ";

        String lastPartOfDate = importDate.substring(13);

        returnStr += lastPartOfDate;

        return returnStr;
    }
    
    public String getMonthName(int month){
        String monthName = "";
        
        if(month==1){
            monthName = "Jan";
        }else if(month==2){
            monthName = "Feb";
        }else if(month==3){
            monthName = "Mar";
        } else if(month==4){
            monthName = "Apr";
        } else if(month==5){
            monthName = "May";
        } else if(month==6){
            monthName = "Jun";
        } else if(month==7){
            monthName = "Jul";
        } else if(month==8){
            monthName = "Aug";
        } else if(month==9){
            monthName = "Sep";
        } else if(month==10){
            monthName = "Oct";
        } else if(month==11){
            monthName = "Nov";
        } else if(month==12){
            monthName = "Dec";
        }
        
        return monthName;
        
    }
    
    public JSONObject importInvoiceTransactionsRecords(HttpServletRequest request, JSONObject jobj) throws AccountingException, IOException, SessionExpiredException, JSONException {
        boolean commitedEx = false;
        boolean issuccess = true;
        String msg = "";
        FileInputStream fileInputStream = null;
        BufferedReader br = null;
        int total = 0, failed = 0;
        String companyid = sessionHandlerImpl.getCompanyid(request);
        String gcurrencyId = sessionHandlerImpl.getCurrencyID(request);
        String userId = sessionHandlerImpl.getUserid(request);
        String fileName = jobj.getString("name");

        JSONObject returnObj = new JSONObject();

        try {

            DateFormat df = new SimpleDateFormat("yyyy-MM-dd");;
            KwlReturnObject cap = accountingHandlerDAOobj.getObject(CompanyAccountPreferences.class.getName(), companyid);
            CompanyAccountPreferences preferences = (CompanyAccountPreferences) cap.getEntityList().get(0);

            fileInputStream = new FileInputStream(jobj.getString("FilePath"));
            br = new BufferedReader(new InputStreamReader(fileInputStream));
            String record = "";
            int cnt = 0;
          
            StringBuilder failedRecords = new StringBuilder();

            JSONArray jSONArray = jobj.getJSONArray("Header");
            List headArrayList = new ArrayList();
            for (int i = 0; i < jSONArray.length(); i++) {
                JSONObject jSONObject = jSONArray.getJSONObject(i);
                headArrayList.add(jSONObject.get("header") != null ? jSONObject.get("header").toString().trim() : jSONObject.get("header"));
            }

            HashMap<String, FieldParams> customerInvoiceFieldParamsMap = getAvailableCustomField(Constants.Acc_Invoice_ModuleId, companyid);

            failedRecords.append(createCSVrecord(headArrayList.toArray()) + "\"Error Message\"");//failedRecords.append("\"Row No.\","+createCSVrecord(fileData)+"\"Error Message\"");

            HashMap<String, Object> requestParams = AccountingManager.getGlobalParams(request);

            String gstSRTaxID = "";
            String gstESTaxID = "";
            String gstCodeSR = "GST(SR)@7.00%";
            String gstCodeES = "GST(ES33)@0.00%";
            
            if (!StringUtil.isNullOrEmpty(gstCodeSR)) {
                Tax tx = getGSTByCode(gstCodeSR, companyid);
                if (tx != null) {
                    gstSRTaxID = tx.getID();
                } else {
                    throw new AccountingException("GST Account is not found for GST Code " + gstCodeSR);
                }
            }
            if (!StringUtil.isNullOrEmpty(gstCodeES)) {
                Tax tx = getGSTByCode(gstCodeES, companyid);
                if (tx != null) {
                    gstESTaxID = tx.getID();
                } else {
                    throw new AccountingException("GST Account is not found for GST Code " + gstESTaxID);
                }
            }
            
            // Fetching Products
            ArrayList<String> headerlist=new ArrayList<String>();//headerlist used because product want to be in order as they appear in csv file
            HashMap<String, Object> productHeaderAndNameMap = new HashMap<String, Object>();//This Map is used for Product header name in import file and Product name in system
            productHeaderAndNameMap.put("Tuition", "Tuition Fee");                          //Key= Product Header Name in import file, Value=Product Name In system     
            headerlist.add("Tuition");
            productHeaderAndNameMap.put("Boarding", "Boarding Fee");
            headerlist.add("Boarding");
            productHeaderAndNameMap.put("Misc", "Miscellaneous fee");
            headerlist.add("Misc");
            productHeaderAndNameMap.put("Administration Fee", "Admin Fee");
            headerlist.add("Administration Fee");
            productHeaderAndNameMap.put("Junior CAS", "Junior CAS");
            headerlist.add("Junior CAS");
            productHeaderAndNameMap.put("Enrichment", "Enrichment");
            headerlist.add("Enrichment");
            productHeaderAndNameMap.put("Student Handbook", "Student Handbook");
            headerlist.add("Student Handbook");
            productHeaderAndNameMap.put("Student Skills Workshop", "Student Skills Workshop");
            headerlist.add("Student Skills Workshop");
            productHeaderAndNameMap.put("E-Learning Maths", "E-Learning Maths");
            headerlist.add("E-Learning Maths");
            productHeaderAndNameMap.put("Australian Maths Competition", "Australian Math Competition");
            headerlist.add("Australian Maths Competition");
            productHeaderAndNameMap.put("Lower School Camp 2016", "Lower School Camp 2016");
            headerlist.add("Lower School Camp 2016");
            productHeaderAndNameMap.put("SAT", "SAT");
            headerlist.add("SAT");
            productHeaderAndNameMap.put("GHSI", "GHSI");
            headerlist.add("GHSI");
            productHeaderAndNameMap.put("CCA1", "CCA");
            headerlist.add("CCA1");
            productHeaderAndNameMap.put("CCA2", "CCA");
            headerlist.add("CCA2");
            productHeaderAndNameMap.put("Outdoor Education", "Outdoor Education");
            headerlist.add("Outdoor Education");
            productHeaderAndNameMap.put("SMMFC", "Singapore Mathematics Modeling Forum & Challenge");
            headerlist.add("SMMFC");
            productHeaderAndNameMap.put("Young Journalist", "Young Journalist Club");
            headerlist.add("Young Journalist");
            productHeaderAndNameMap.put("Sabbatical Week", "Sabbatical Week");
            headerlist.add("Sabbatical Week");
            productHeaderAndNameMap.put("IBDP", "IBDP Study Guide");
            headerlist.add("IBDP");
            productHeaderAndNameMap.put("GST Exempted Boarding", "Boarding Fee");
            headerlist.add("GST Exempted Boarding");
            productHeaderAndNameMap.put("Fee paid in advance", "Fee paid in advance");
            headerlist.add("Fee paid in advance");
            productHeaderAndNameMap.put("Insurance", "Student Insurance");
            headerlist.add("Insurance");
            productHeaderAndNameMap.put("Camp", "Camp Fee");
            headerlist.add("Camp");
            productHeaderAndNameMap.put("Visa", "Visa");
            headerlist.add("Visa");

            while ((record = br.readLine()) != null) {
                if (cnt != 0) {
                    String[] recarr = record.split(",");
                    DefaultTransactionDefinition def = new DefaultTransactionDefinition();
                    def.setName("import_Tx");
                    def.setPropagationBehavior(TransactionDefinition.PROPAGATION_REQUIRED);
                    TransactionStatus status = txnManager.getTransaction(def);
                    commitedEx = false;
                    issuccess = true;
                    try {

                        // Fetching Customer Or Vendor code

                        int customerNameIndex = headArrayList.indexOf("Name");

                        String customerName = recarr[customerNameIndex].trim();
                        if (!StringUtil.isNullOrEmpty(customerName)) {
                            customerName = customerName.replaceAll("\"", "");
                        } else {
                            throw new AccountingException("Customer Name is not available");
                        }
                        
                        int customerCodeIndex = headArrayList.indexOf("Customer Code");
                        String customerCode = recarr[customerCodeIndex].trim();
                        if (!StringUtil.isNullOrEmpty(customerCode)) {
                            customerCode = customerCode.replaceAll("\"", "");
                        } else {
                            throw new AccountingException("Customer Code is not available");
                        }


                        String customerId = "";
                        String vendorId = "";
                        String customer_accountid = "";
                        String vendor_accountid = "";


                        Customer customer = getCustomerByCodeOrName(customerCode, companyid);
                        if (customer != null) {
                            customerId = customer.getID();
                            customer_accountid = customer.getAccount().getID();
                        } else {
                            throw new AccountingException("Customer is not found for Customer Code " + customerCode);
                        }


                        int documentDateIndex = headArrayList.indexOf("Invoice Date");

                        Date transactionDate = null;

                        String documentDateStr = recarr[documentDateIndex].trim();
                        if (!StringUtil.isNullOrEmpty(documentDateStr)) {
                            documentDateStr = documentDateStr.replaceAll("\"", "");
                        } else {
                            throw new AccountingException("Invoice Date (YYYYMMDD) is not available");
                        }

                        if (!StringUtil.isNullOrEmpty(documentDateStr)) {
                            char[] dateArray = documentDateStr.toCharArray();
                            String year = dateArray[0] + "" + dateArray[1] + "" + dateArray[2] + "" + dateArray[3];
                            String month = dateArray[4] + "" + dateArray[5];
                            String day = dateArray[6] + "" + dateArray[7];

                            documentDateStr = year + "-" + month + "-" + day;

                            transactionDate = df.parse(documentDateStr);
                        }

                        int add1Index = headArrayList.indexOf("Add1");
                        String add1 = recarr[add1Index].trim();
                        if (!StringUtil.isNullOrEmpty(add1)) {
                            add1 = add1.replaceAll("\"", "");
                        }

                        int add2Index = headArrayList.indexOf("Add2");
                        String add2 = recarr[add2Index].trim();
                        if (!StringUtil.isNullOrEmpty(add2)) {
                            add2 = add2.replaceAll("\"", "");
                            }
                        
                        int postalIndex = headArrayList.indexOf("Postal");
                        String postalAddress = recarr[postalIndex].trim();
                        if (!StringUtil.isNullOrEmpty(postalAddress)) {
                            postalAddress = postalAddress.replaceAll("\"", "");
                        }
                        
                        String gstAmountStr = "0";
                        String taxid = "";
                        String productTax = "";
                        String productId = "";
                        String productDescriptions = "";
                        String productSellingAccountId = "";
                        String productSellingAmountStr = "";

                        Product product = null;
                        for (String productHeaderName : productHeaderAndNameMap.keySet()) {
                            String productCodeOrName = productHeaderAndNameMap.get(productHeaderName).toString();
                            int productCodeIndex = headArrayList.indexOf(productHeaderName);
                            if(productCodeIndex<0){//if product header not found in import file then continue with next product
                                continue;
                            }
                            String productAmountStr = recarr[productCodeIndex].trim();
                            
                            taxid=gstSRTaxID;
                            String desc="-";
                            
                            if(productHeaderName.equalsIgnoreCase("GST Exempted Boarding") || productHeaderName.equalsIgnoreCase("Fee paid in advance")){ // tax will not apply
                                taxid=gstESTaxID;
                            } 
                            int productDescIndex=-1;
                            if (productHeaderName.equalsIgnoreCase("CCA1")) {//for some products description is given in import file, but for other description is not give so I need to apply check here 
                                productDescIndex = headArrayList.indexOf("CCA1 Description");                               
                            } else if(productHeaderName.equalsIgnoreCase("CCA2")){
                                productDescIndex = headArrayList.indexOf("CCA2 Description");
                            } else if(productHeaderName.equalsIgnoreCase("Outdoor Education")){
                                productDescIndex = headArrayList.indexOf("Outdoor Description");
                            }
                            if (productDescIndex !=-1) {
                                desc = recarr[productDescIndex].trim();
                                if (!StringUtil.isNullOrEmpty(desc)) {
                                    desc = desc.replaceAll("\"", "");
                                }
                            }
                            product = getProductByName(productCodeOrName, companyid);

                            if (product != null) {                                
                                if (!productId.equals("")) {
                                    productId += "~" + product.getID();
                                    productSellingAccountId += "~" + product.getSalesAccount().getID();
                                    productDescriptions += "~" + desc;                                    
                                    if (!StringUtil.isNullOrEmpty(productAmountStr) && !StringUtil.isNullOrEmpty(productAmountStr.trim()) && !productAmountStr.replaceAll("\"", "").trim().equals("-") && Double.parseDouble(productAmountStr.replaceAll("\"", "")) != 0) {
                                        double productAmount = Double.parseDouble(productAmountStr.replaceAll("\"", ""));
                                        if (!StringUtil.isNullOrEmpty(taxid)) {
                                            double rowTaxPercent = 0;
                                            KwlReturnObject perresult = accTaxObj.getTaxPercent(companyid, transactionDate, taxid);
                                            rowTaxPercent = (Double) perresult.getEntityList().get(0);
                                            gstAmountStr += "~" + (productAmount * rowTaxPercent / 100);
                                            productTax += "~" + taxid;
                                        }
                                        productSellingAmountStr += "~" + productAmountStr.replaceAll("\"", "");
                                    } else {
                                        productSellingAmountStr += "~0.0";
                                        gstAmountStr += "~0.0";
                                        productTax += "~0.0";
                                    }
                                } else {
                                    productId = product.getID();
                                    productSellingAccountId = product.getSalesAccount().getID();
                                    productDescriptions = desc;
                                    if (!StringUtil.isNullOrEmpty(productAmountStr) && !StringUtil.isNullOrEmpty(productAmountStr.replaceAll("\"", "").trim()) && !productAmountStr.replaceAll("\"", "").trim().equals("-") && Double.parseDouble(productAmountStr.replaceAll("\"", "")) != 0) {
                                        double productAmount = Double.parseDouble(productAmountStr.replaceAll("\"", ""));
                                        if (!StringUtil.isNullOrEmpty(taxid)) {
                                            double rowTaxPercent = 0;
                                            KwlReturnObject perresult = accTaxObj.getTaxPercent(companyid, transactionDate, taxid);
                                            rowTaxPercent = (Double) perresult.getEntityList().get(0);
                                            gstAmountStr = (productAmount * rowTaxPercent / 100) + "";
                                            productTax = taxid;
                                        }
                                        productSellingAmountStr = productAmountStr.replaceAll("\"", "");
                                    } else {
                                        productSellingAmountStr = "0.0";
                                        gstAmountStr = "0.0";
                                        productTax = "0.0";
                                    }
                                }                               
                            }
                        }
                        
                        if (productId.equals("")) {
                            throw new AccountingException("Products are not found");
                        }
                        int dueDateIndex = headArrayList.indexOf("Due Date");

                        Date dueDate = null;

                        String dueDateStr = recarr[dueDateIndex].trim();
                        if (!StringUtil.isNullOrEmpty(dueDateStr)) {
                            dueDateStr = dueDateStr.replaceAll("\"", "");
                        } else {
                            throw new AccountingException("Due Date (YYYYMMDD) is not available");
                        }

                        if (!StringUtil.isNullOrEmpty(dueDateStr)) {
                            char[] dateArray = dueDateStr.toCharArray();
                            String year = dateArray[0] + "" + dateArray[1] + "" + dateArray[2] + "" + dateArray[3];
                            String month = dateArray[4] + "" + dateArray[5];
                            String day = dateArray[6] + "" + dateArray[7];

                            dueDateStr = year + "-" + month + "-" + day;

                            dueDate = df.parse(dueDateStr);
                        }

                        int memoIndex = headArrayList.indexOf("Memo");
                        String memoStr = recarr[memoIndex].trim();
                        if (!StringUtil.isNullOrEmpty(memoStr)) {
                            memoStr = memoStr.replaceAll("\"", "");
                        }



                        int days = (int) (dueDate.getTime() - transactionDate.getTime()) / (1000 * 60 * 60 * 24);
                        String termId = "";
                        Term term = getTermIdByDays(days, companyid);
                        if (term != null) {
                            termId = term.getID();
                        } else {
                            throw new AccountingException("Credit term not available " + customerCode);
                        }

                        
                        int classofInvoiceint = headArrayList.indexOf("Class");
                        String classofInvoiceStr = recarr[classofInvoiceint].trim();
                        if (!StringUtil.isNullOrEmpty(classofInvoiceStr)) {
                            classofInvoiceStr = classofInvoiceStr.replaceAll("\"", "");
                        }

//                        int class1ofInvoiceint = headArrayList.indexOf("Class1");
//                        String class1ofInvoiceStr = recarr[class1ofInvoiceint].trim();

                        int GIROcount = headArrayList.indexOf("Payment Method");
                        String giro = recarr[GIROcount].trim();
                        if (!StringUtil.isNullOrEmpty(giro)) {
                            giro = giro.replaceAll("\"", "");
                        }

                        int remarkscount = headArrayList.indexOf("Remarks");
                        String remarks = recarr[remarkscount].trim();
                        if (!StringUtil.isNullOrEmpty(remarks)) {
                            remarks = remarks.replaceAll("\"", "");
                        }
          
                        //getting invoice terms
                        HashMap hashMap = new HashMap();
                        hashMap.put(Constants.companyKey, companyid);                        
                        hashMap.put("salesOrPurchaseFlag", "true");
                        KwlReturnObject result = accAccountDAOobj.getInvoiceTerms(hashMap);
                        List<InvoiceTermsSales> list = result.getEntityList();

                        int lessScholarshipTermIndex=headArrayList.indexOf("Scholarship");
                        String lessScholarshipTermAmt = recarr[lessScholarshipTermIndex].trim();
                        lessScholarshipTermAmt = lessScholarshipTermAmt.replaceAll("\"", "");
                        
                        JSONArray invoiceTermArray=new JSONArray();
                        if (!StringUtil.isNullOrEmpty(lessScholarshipTermAmt)) {
                                for (InvoiceTermsSales mt : list) {
                                    if (mt.getTerm().trim().equalsIgnoreCase("Less Scholarship")) {
                                        JSONObject jsonobj = new JSONObject();
                                        jsonobj.put("id", mt.getId());
                                        jsonobj.put("glaccount", mt.getAccount().getID());
                                        jsonobj.put("termamount", Double.parseDouble(lessScholarshipTermAmt));
                                        invoiceTermArray.put(jsonobj);
                                    }
                                }                         
                        }
                        HashMap<String, Object> noteMap = new HashMap<String, Object>();
//                        noteMap.put("entryNumber", documentNumber);
                        noteMap.put("creationDate", transactionDate);
                        noteMap.put("dueDate", dueDate);
                        noteMap.put("documentRemark", memoStr);
                        noteMap.put("days", days);
                        noteMap.put("termid", termId);
                        noteMap.put(Constants.currencyKey, request.getParameter(Constants.globalCurrencyKey) != null ? request.getParameter(Constants.globalCurrencyKey) : sessionHandlerImpl.getCurrencyID(request));
//                        noteMap.put("externalCurrencyRate", exchangeRateForTransaction);
//                        noteMap.put("accountid", accountId);
                        noteMap.put("customer_accountid", customer_accountid);
                        noteMap.put("vendor_accountid", vendor_accountid);
//                        noteMap.put("contractNo", contractNo);
//                        noteMap.put("buyerName", buyerName);
                        noteMap.put("class", classofInvoiceStr);
//                        noteMap.put("class1", class1ofInvoiceStr);
                        noteMap.put("GIRO", giro);
                        noteMap.put("remarks", remarks);
                        noteMap.put("customerInvoiceFieldParamsMap", customerInvoiceFieldParamsMap);
                        noteMap.put(Constants.customerid, customerId);
                        noteMap.put("vendorid", vendorId);
                        noteMap.put("cnamount", 0.0);
                        noteMap.put("transactionAmount", 0.0);
                        noteMap.put("transactionAmount", 0.0);
//                        noteMap.put("taxamount", gstAmountStr);
//                        noteMap.put("taxid", taxid);
                        noteMap.put("productId", productId);
                        noteMap.put("productSellingAccountId", productSellingAccountId);
                        noteMap.put("productAmount", productSellingAmountStr);
//                        noteMap.put("documentRemark", documentRemark);
                        noteMap.put("productTax", productTax);
                        noteMap.put("productTaxAmount", gstAmountStr);
                        noteMap.put("productdesc", productDescriptions);
                        noteMap.put("invoiceTermsArray", invoiceTermArray.toString());
                        noteMap.put("address1", add1);
                        noteMap.put("address2", add2);
                        noteMap.put("postal", postalAddress);

                        saveCustomerInvoice(request, noteMap);
                        try {
                            txnManager.commit(status);
                        } catch (Exception ex) {
                            commitedEx = true;
                            throw ex;
                        }
                    } catch (Exception ex) {
                        if (!commitedEx) { //if exception occurs during commit then dont call rollback
                            txnManager.rollback(status);
                        }
                        failed++;
                        String errorMsg = ex.getMessage(), invalidColumns = "";
                        try {
                            JSONObject errorLog = new JSONObject(errorMsg);
                            errorMsg = errorLog.getString("errorMsg");
                            invalidColumns = errorLog.getString("invalidColumns");
                        } catch (JSONException jex) {
                        }
                        failedRecords.append("\n" + createCSVrecord(recarr) + "\"" + errorMsg.replaceAll("\"", "") + "\"");
                    }
                    total++;
                }
                cnt++;
            }
            if (failed > 0) {
                createFailureFiles(fileName, failedRecords, ".csv");
            }

            int success = total - failed;
            if (total == 0) {
                msg = messageSource.getMessage("acc.field.Emptyfile", null, RequestContextUtils.getLocale(request));
            } else if (success == 0) {
//                issuccess = false;
                msg = messageSource.getMessage("acc.rem.169", null, RequestContextUtils.getLocale(request));
            } else if (success == total) {
                msg = messageSource.getMessage("acc.rem.168", null, RequestContextUtils.getLocale(request));
            } else {
                msg = messageSource.getMessage("acc.field.Imported", null, RequestContextUtils.getLocale(request)) + success + messageSource.getMessage("acc.field.record", null, RequestContextUtils.getLocale(request)) + (success > 1 ? "s" : "") + messageSource.getMessage("acc.field.successfully.", null, RequestContextUtils.getLocale(request));
                msg += (failed == 0 ? "." : messageSource.getMessage("acc.field.andfailedtoimport", null, RequestContextUtils.getLocale(request)) + failed + messageSource.getMessage("acc.field.record", null, RequestContextUtils.getLocale(request)) + (failed > 1 ? "s" : "") + ".");
            }



        } catch (Exception ex) {

            issuccess = false;
            msg = "" + ex.getMessage();

            Logger.getLogger(accInvoiceController.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
            throw new AccountingException("Error While Importing Records.");
        } finally {
            fileInputStream.close();
            br.close();

            DefaultTransactionDefinition ldef = new DefaultTransactionDefinition();
            ldef.setName("import_Tx");
            ldef.setPropagationBehavior(TransactionDefinition.PROPAGATION_REQUIRED);
            TransactionStatus lstatus = txnManager.getTransaction(ldef);
            try {
                //Insert Integration log
                HashMap<String, Object> logDataMap = new HashMap<String, Object>();
                logDataMap.put("FileName", getActualFileName(fileName));
                logDataMap.put("StorageName", fileName);
                logDataMap.put("Log", msg);
                logDataMap.put("Type", "csv");
                logDataMap.put("FailureFileType", failed>0?"csv":"");
                logDataMap.put("TotalRecs", total);
                logDataMap.put("Rejected", failed);
                logDataMap.put("Module", "2");
                logDataMap.put("ImportDate", new Date());
                logDataMap.put("User", userId);
                logDataMap.put("Company", companyid);
                importDao.saveImportLog(logDataMap);
                txnManager.commit(lstatus);
            } catch (Exception ex) {
                txnManager.rollback(lstatus);
                Logger.getLogger(accInvoiceController.class.getName()).log(Level.SEVERE, null, ex);
            }

            try {
                returnObj.put("success", issuccess);
                returnObj.put("msg", msg);
                returnObj.put("totalrecords", total);
                returnObj.put("successrecords", total - failed);
                returnObj.put("failedrecords", failed);
                returnObj.put("filename", getActualFileName(fileName));
            } catch (JSONException ex) {
                Logger.getLogger(accInvoiceController.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

        return returnObj;
    }
    
    
    private void saveInvoice(HttpServletRequest request, HashMap<String,Object> noteMap) throws SessionExpiredException, ServiceException, AccountingException{
        try {
            String entryNumber = (String) noteMap.get("entryNumber");
            Date creationDate = (Date) noteMap.get("creationDate");
            String currencyid = (String) noteMap.get(Constants.currencyKey);
            double externalCurrencyRate = (Double) noteMap.get("externalCurrencyRate");
            String customer_accountid = (String) noteMap.get("customer_accountid");
            String customerid = (String) noteMap.get(Constants.customerid);
            String productSellingAccountId = (String) noteMap.get("productSellingAccountId");
            String productid = (String) noteMap.get("productId");
            String productTax = (String) noteMap.get("productTax");
            String productTaxAmount = (String) noteMap.get("productTaxAmount");

            String contractNo = (String) noteMap.get("contractNo");
            String buyerName = (String) noteMap.get("buyerName");
            double invoicedQuantity = (Double) noteMap.get("invoicedQuantity");
            double commissionRate = (Double) noteMap.get("commissionRate");
            HashMap<String, FieldParams> customerInvoiceFieldParamsMap = (HashMap<String, FieldParams>) noteMap.get("customerInvoiceFieldParamsMap");
            String vesselName = (String) noteMap.get("vesselName");
            String documentRemark = (String) noteMap.get("documentRemark");
            double transactionAmount = (Double) noteMap.get("transactionAmount");
            
            
            List ll = new ArrayList();
            String jeentryNumber= "";
            String jeSeqFormatId="";
            String jeIntegerPart="";
            String jeDatePrefix = "";
            String jeDateAfterPrefix = "";
            String jeDateSuffix = "";
            Invoice invoice = null;
            
            ArrayList discountArr=new ArrayList();
            String invoiceid=null;
            
            int istemplate = 0;
            
            KwlReturnObject result=null;
            String sequenceformat="NA";
            
            int nocount;
            HashMap<String, Object> requestParams = AccountingManager.getGlobalParams(request);
            
            String companyid = sessionHandlerImpl.getCompanyid(request);
            String termid =request.getParameter("termid");
            String jeid=null;
            
            boolean jeautogenflag = false;
            Customer customer=null;
            boolean isFixedAsset = false;
            
            String custId = customerid;
            String accountid = customer_accountid;
            
            String createdby= sessionHandlerImpl.getUserid(request);
            String modifiedby= sessionHandlerImpl.getUserid(request);            
            long createdon= System.currentTimeMillis();
            long updatedon = System.currentTimeMillis();
            
            String taxid = "";
            double taxamount = 0d;
            Discount discount = null;
            double discValue = 0.0;
            
            double shippingCharges = 0d;
            double otherCharges = 0d;
            boolean inCash = false;
            
            KwlReturnObject cap = accountingHandlerDAOobj.getObject(CompanyAccountPreferences.class.getName(), companyid);
            CompanyAccountPreferences preferences = (CompanyAccountPreferences) cap.getEntityList().get(0);

            KwlReturnObject cmp = accountingHandlerDAOobj.getObject(Company.class.getName(), companyid);
            Company company = (Company) cmp.getEntityList().get(0);
            
            KwlReturnObject curresult = accountingHandlerDAOobj.getObject(KWLCurrency.class.getName(), currencyid);
            KWLCurrency currency = (KWLCurrency) curresult.getEntityList().get(0);
            
            KwlReturnObject custresult = accountingHandlerDAOobj.getObject(Customer.class.getName(), customerid);
            customer = (Customer) custresult.getEntityList().get(0);
            
            JSONObject invjson = new JSONObject();
            invjson.put("invoiceid", invoiceid);
            invjson.put("accountid", accountid);
            invjson.put(Constants.customerid, customerid);
            
            SequenceFormat prevSeqFormat=null;
            String nextAutoNo = "";
            String nextAutoNoInt = "";
            
            result = accInvoiceDAOobj.getInvoiceCount(entryNumber, companyid);
            nocount = result.getRecordTotalCount();
            if (nocount > 0 && sequenceformat.equals("NA")) {
                if (inCash) {
                    throw new AccountingException("Sales receipt number '" + entryNumber + "' already exists.");
                } else {
                    throw new AccountingException("Invoice number '" + entryNumber + "' already exists.");
                }
            }
            
            invjson.put("entrynumber", entryNumber);
            invjson.put("autogenerated", nextAutoNo.equals(entryNumber));
            
            invjson.put(Constants.isFixedAsset, isFixedAsset);
            invjson.put("memo", documentRemark);
            invjson.put("billto", "");
            invjson.put("shipaddress", "");
            invjson.put("porefno", "");
            invjson.put("duedate", creationDate);
//            invjson.put("template", request.getParameter("template"));
            invjson.put(Constants.companyKey, companyid);
            invjson.put(Constants.currencyKey, currencyid);
            invjson.put("externalCurrencyRate", externalCurrencyRate);
//            invjson.put("salesPerson", request.getParameter("salesPerson"));
//            invjson.put("shipvia", request.getParameter("shipvia"));
//            invjson.put("fob", request.getParameter("fob"));
            invjson.put("createdby",createdby);
            invjson.put("modifiedby",modifiedby);
            invjson.put("createdon",createdon);
            invjson.put("updatedon",updatedon);
            invjson.put("partialinv",false);
            invjson.put("gstIncluded",false);
            
            synchronized (this) {
                HashMap<String, Object> JEFormatParams = new HashMap<String, Object>();
                JEFormatParams.put(Constants.moduleid, Constants.Acc_GENERAL_LEDGER_ModuleId);
                JEFormatParams.put("modulename", CompanyPreferencesConstants.AUTOJOURNALENTRY);
                JEFormatParams.put(Constants.companyKey, companyid);
                JEFormatParams.put("isdefaultFormat", true);

                KwlReturnObject kwlObj = accCompanyPreferencesObj.getSequenceFormat(JEFormatParams);
                SequenceFormat format = (SequenceFormat) kwlObj.getEntityList().get(0);
                Map<String, Object> seqNumberMap = new HashMap<String, Object>();
                seqNumberMap = accCompanyPreferencesObj.getNextAutoNumber_Modified(companyid, StaticValues.AUTONUM_JOURNALENTRY, format.getID(), false, creationDate);
                jeentryNumber = (String)seqNumberMap.get(Constants.AUTO_ENTRYNUMBER);  //next auto generated number
                jeIntegerPart = (String)seqNumberMap.get(Constants.SEQNUMBER);//integer Part
                jeDatePrefix = (String)seqNumberMap.get(Constants.DATEPREFIX);//Date Prefix Part
                jeDateAfterPrefix = (String)seqNumberMap.get(Constants.DATEAFTERPREFIX);//Date After Prefix Part
                jeDateSuffix = (String)seqNumberMap.get(Constants.DATESUFFIX);//Date Suffix Part
                jeSeqFormatId = format.getID();
                jeautogenflag = true;
            }
            
            Map<String,Object> jeDataMap = AccountingManager.getGlobalParams(request);
            jeDataMap.put("entrynumber", jeentryNumber);
            jeDataMap.put("autogenerated", jeautogenflag);
            jeDataMap.put(Constants.SEQFORMAT,jeSeqFormatId ); 
            jeDataMap.put(Constants.SEQNUMBER,jeIntegerPart );
            jeDataMap.put(Constants.DATEPREFIX, jeDatePrefix);
            jeDataMap.put(Constants.DATEAFTERPREFIX, jeDateAfterPrefix);
            jeDataMap.put(Constants.DATESUFFIX, jeDateSuffix);
            jeDataMap.put("entrydate", creationDate);
            jeDataMap.put(Constants.companyKey, companyid);
            jeDataMap.put("memo", documentRemark);
            jeDataMap.put(Constants.currencyKey, currencyid);
//            jeDataMap.put("costcenterid", costCenterId);
            
            HashSet jeDetails = new HashSet();
            KwlReturnObject jeresult = accJournalEntryobj.saveJournalEntry(jeDataMap);//Create Journal entry without JEdetails
            JournalEntry journalEntry = (JournalEntry) jeresult.getEntityList().get(0);
            jeid = journalEntry.getID();
            invjson.put("journalerentryid", jeid);
            jeDataMap.put("jeid", jeid);
            
            String invoiceDetails = getInvoiceDetails(productid, transactionAmount, currency.getSymbol(), externalCurrencyRate,productTax,productTaxAmount);
            
            List dll = saveInvoiceRows(request, invoiceDetails, jeid, company, jeDetails, currencyid, externalCurrencyRate, creationDate);
            double[] totals = (double[]) dll.get(0);
            HashSet<InvoiceDetail> invcdetails = (HashSet<InvoiceDetail>) dll.get(1);
            ArrayList<String> prodList = (ArrayList<String>) dll.get(2);
            double disc = 0d;
            
            if (disc > 0) {
//                discount=new Discount();
//                discount.setDiscount(disc);
//                discount.setInPercent(Boolean.parseBoolean(request.getParameter("perdiscount")));
//                discount.setOriginalAmount(totals[1]-totals[0]);
//                discount.setCompany(company);
                JSONObject discjson = new JSONObject();
                discjson.put("discount", disc);
                discjson.put("inpercent", true);
                discjson.put("originalamount", totals[1] - totals[0]+totals[2]);
                discjson.put(Constants.companyKey, companyid);
                KwlReturnObject dscresult = accDiscountobj.addDiscount(discjson);
                discount = (Discount) dscresult.getEntityList().get(0);
//                invoice.setDiscount(discount);
                invjson.put("discountid", discount.getID());
                discValue = discount.getDiscountValue();
            }
            
            discValue += totals[0];
            
            /*
             * If invoice terms applied then add mapping in against invoice
             */
            double termTotalAmount = 0;
            HashMap<String, Double> termAcc = new HashMap<String, Double>();
            String InvoiceTerms = request.getParameter("invoicetermsmap");
            if(!StringUtil.isNullOrEmpty(InvoiceTerms)) {
                JSONArray termsArr = new JSONArray(InvoiceTerms);
                for(int cnt=0; cnt<termsArr.length(); cnt++) {
                    double termamount = termsArr.getJSONObject(cnt).getDouble("termamount");
                    termTotalAmount += termamount;
                     if(termAcc.containsKey(termsArr.getJSONObject(cnt).getString("glaccount"))) {
                        double tempAmount=termAcc.get(termsArr.getJSONObject(cnt).getString("glaccount"));
                        termAcc.put(termsArr.getJSONObject(cnt).getString("glaccount"), termamount+tempAmount);
                    }
                    else{   
                        termAcc.put(termsArr.getJSONObject(cnt).getString("glaccount"), termamount);
                    }
                }
            }
            
            
            if (inCash) {
                accountid = preferences.getCashAccount().getID();
            }
            
            double totalInvAmount = totals[1] + shippingCharges + otherCharges - discValue + termTotalAmount + taxamount + totals[2];
            KwlReturnObject bAmt = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, totalInvAmount, currencyid, creationDate,externalCurrencyRate);
            double totalInvAmountinBase =(Double)bAmt.getEntityList().get(0);
            invjson.put(Constants.invoiceamountdue, totalInvAmount);
            invjson.put(Constants.invoiceamountdueinbase, totalInvAmountinBase);
            invjson.put(Constants.invoiceamount, totalInvAmount);
            invjson.put(Constants.invoiceamountinbase, totalInvAmountinBase);
            
            
            ArrayList amountApprove = (accountingHandlerDAOobj.getApprovalFlagForAmount(totalInvAmountinBase, Constants.CUSTOMER_INVOICE_APPROVAL, Constants.TRANS_AMOUNT,companyid));             
            boolean amountExceed = (Boolean)amountApprove.get(0);
            
            ArrayList prodApprove = (accountingHandlerDAOobj.getApprovalFlagForProducts(prodList, Constants.CUSTOMER_INVOICE_APPROVAL, Constants.TRANS_PRODUCT,companyid));
            boolean prodExists = (Boolean)prodApprove.get(0);
            boolean pendingApprovalFlagForDisc = false;
            int approvalLevelForDisc = 1;

            Iterator invitr = invcdetails.iterator();
            while (invitr.hasNext()) {
                InvoiceDetail ivd = (InvoiceDetail) invitr.next();
                Discount discount1 = ivd.getDiscount();
                String productId = ivd.getInventory().getProduct().getID();
                if (discount1 != null) {
                    double discountVal = discount1.getDiscountValue();
                    KwlReturnObject dAmount = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, discountVal, currencyid, creationDate, externalCurrencyRate);
                    double discAmountinBase = (Double) dAmount.getEntityList().get(0);
                    ArrayList prodApproveDisc = (accountingHandlerDAOobj.getApprovalFlagForProductsDiscount(discAmountinBase,productId, Constants.CUSTOMER_INVOICE_APPROVAL, Constants.TRANS_DISCOUNT, companyid, pendingApprovalFlagForDisc, approvalLevelForDisc));
                    pendingApprovalFlagForDisc = (Boolean) prodApproveDisc.get(0);
                    approvalLevelForDisc = (Integer) prodApproveDisc.get(1);
                }

            }
            
            int pendingApprovalFlag = 0;
            
            int approvalLevel = ((Integer) (amountApprove.get(1)) > (Integer) (prodApprove.get(1))) ? (Integer) (amountApprove.get(1)) : (Integer) (prodApprove.get(1));
            if (approvalLevelForDisc > approvalLevel) {
                approvalLevel = approvalLevelForDisc;
            }
            
            JSONObject jedjson = new JSONObject();
            jedjson.put("srno", jeDetails.size()+1);
            jedjson.put(Constants.companyKey, companyid);
            jedjson.put("amount", totalInvAmount);
            jedjson.put("accountid", customer_accountid);
            jedjson.put("debit", true);
            jedjson.put("jeid", jeid);
            
            KwlReturnObject jedresult = accJournalEntryobj.addJournalEntryDetails(jedjson);
            JournalEntryDetail jed = (JournalEntryDetail) jedresult.getEntityList().get(0);
            jeDetails.add(jed);
            
            invjson.put("customerentryid", jed.getID());
            if (discValue > 0) {
                jedjson = new JSONObject();
                jedjson.put("srno", jeDetails.size()+1);
                jedjson.put(Constants.companyKey, companyid);
                jedjson.put("amount", discValue);
                jedjson.put("accountid", preferences.getDiscountGiven().getID());
                jedjson.put("debit", true);
                jedjson.put("jeid", jeid);
                jedresult = accJournalEntryobj.addJournalEntryDetails(jedjson);
                jed = (JournalEntryDetail) jedresult.getEntityList().get(0);
                jeDetails.add(jed);
            }
            
            if (shippingCharges > 0) {
                jedjson = new JSONObject();
                jedjson.put("srno", jeDetails.size()+1);
                jedjson.put(Constants.companyKey, companyid);
                jedjson.put("amount", shippingCharges);
                jedjson.put("accountid", preferences.getShippingCharges().getID());
                jedjson.put("debit", false);
                jedjson.put("jeid", jeid);
                jedresult = accJournalEntryobj.addJournalEntryDetails(jedjson);
                jed = (JournalEntryDetail) jedresult.getEntityList().get(0);
                jeDetails.add(jed);
//                invoice.setShipEntry(jed);
                invjson.put("shipentryid", jed.getID());

            }
            
            if(termAcc.size()>0) {
                for (Map.Entry<String, Double> entry : termAcc.entrySet()) {
                    jedjson = new JSONObject();
                    jedjson.put("srno", jeDetails.size()+1);
                    jedjson.put(Constants.companyKey, companyid);
                    jedjson.put("amount", entry.getValue()>0 ? entry.getValue() : (entry.getValue()*(-1)));
                    jedjson.put("accountid", entry.getKey());
                    jedjson.put("debit", entry.getValue()>0 ? false : true);
                    jedjson.put("jeid", jeid);
                    jedresult = accJournalEntryobj.addJournalEntryDetails(jedjson);
                    jed = (JournalEntryDetail) jedresult.getEntityList().get(0);
                    jeDetails.add(jed);
                }
            }
            
//            if (otherCharges > 0) {
////                jed=new JournalEntryDetail();
////                jed.setCompany(company);
////                jed.setAmount(otherCharges);
////                jed.setAccount(preferences.getOtherCharges());
////                jed.setDebit(false);
//                jedjson = new JSONObject();
//                jedjson.put("srno", jeDetails.size()+1);
//                jedjson.put(Constants.companyKey, companyid);
//                jedjson.put("amount", otherCharges);
//                jedjson.put("accountid", preferences.getOtherCharges().getID());
//                jedjson.put("debit", false);
//                jedjson.put("jeid", jeid);
//                jedresult = accJournalEntryobj.addJournalEntryDetails(jedjson);
//                jed = (JournalEntryDetail) jedresult.getEntityList().get(0);
//                jeDetails.add(jed);
////                invoice.setOtherEntry(jed);
//                invjson.put("otherentryid", jed.getID());
//
//            }
            
            jeDataMap.put("jedetails", jeDetails);
            jeDataMap.put("pendingapproval", pendingApprovalFlag);
            jeDataMap.put("istemplate", istemplate);
            jeDataMap.put("externalCurrencyRate", externalCurrencyRate);
            jeresult = accJournalEntryobj.saveJournalEntry(jeDataMap);//Add Journal entry details
            journalEntry = (JournalEntry) jeresult.getEntityList().get(0);
            
            String customfield = getCustomFieldsForImport(customerInvoiceFieldParamsMap,contractNo, vesselName,buyerName, invoicedQuantity, commissionRate, Constants.Acc_Invoice_ModuleId, companyid);
            
            if (!StringUtil.isNullOrEmpty(customfield)) {
                JSONArray jcustomarray = new JSONArray(customfield);
                HashMap<String, Object> customrequestParams = new HashMap<String, Object>();
                customrequestParams.put("customarray", jcustomarray);
                customrequestParams.put("modulename", Constants.Acc_JE_modulename);
                customrequestParams.put("moduleprimarykey", Constants.Acc_JEid);
                customrequestParams.put("modulerecid", journalEntry.getID());
                customrequestParams.put(Constants.moduleid, Constants.Acc_Invoice_ModuleId);
                customrequestParams.put(Constants.companyKey, companyid);
                customrequestParams.put("customdataclasspath", Constants.Acc_BillInv_custom_data_classpath);
                KwlReturnObject customDataresult = fieldDataManagercntrl.setCustomData(customrequestParams);
                if (customDataresult != null && customDataresult.getEntityList().size() > 0) {
                    jeDataMap.put("accjecustomdataref", journalEntry.getID());
                    jeresult = accJournalEntryobj.saveJournalEntry(jeDataMap);
                }
            }
            
            KwlReturnObject ERresult = accCurrencyDAOobj.getExcDetailID(requestParams, currencyid, creationDate, null);
            ExchangeRateDetails erd = (ExchangeRateDetails) ERresult.getEntityList().get(0);
            String erdid = (erd == null) ? null : erd.getID();
            invjson.put("erdid", erdid);
            
            invjson.put("pendingapproval", pendingApprovalFlag);
            invjson.put("istemplate", istemplate);
            invjson.put("approvallevel", approvalLevel);
            invjson.put("incash", "false");
            
            Map<String, Object> addressParams=new HashMap<String,Object>();
            AccountingAddressManager.getDefaultCustomerAddressParams(customer.getID(), companyid, accountingHandlerDAOobj);// addressParams = getCustomerDefaultAddressParams(customer,companyid);
            KwlReturnObject addressresult= accountingHandlerDAOobj.saveAddressDetail(addressParams, companyid);
            BillingShippingAddresses bsa= (BillingShippingAddresses) addressresult.getEntityList().get(0);
            invjson.put("billshipAddressid", bsa.getID());
            invjson.put(Constants.Checklocktransactiondate, request.getParameter("billdate"));
            result = accInvoiceDAOobj.addInvoice(invjson, new HashSet());
            
            invoice = (Invoice) result.getEntityList().get(0);//Create Invoice without invoice-details.
            Iterator itr = invcdetails.iterator();
            while (itr.hasNext()) {
                InvoiceDetail ivd = (InvoiceDetail) itr.next();
                if((pendingApprovalFlag == 1 || istemplate == 2) && ivd.getInventory().isInvrecord()) {
                    Inventory invtry = ivd.getInventory();
                    invtry.setActquantity(invtry.getQuantity());
                    invtry.setQuantity(0);
                    }
                ivd.setInvoice(invoice);
            }
            
            invjson.put("invoiceid", invoice.getID());
            result = accInvoiceDAOobj.updateInvoice(invjson, invcdetails);
            invoice = (Invoice) result.getEntityList().get(0);//Add invoice details
            
            //Insert new entries again in optimized table.
            accJournalEntryobj.saveAccountJEs_optimized(jeid);
            
            boolean isEdit = false;
            boolean isCopy = false;
            String action="Imported new";
            
            
        } catch (UnsupportedEncodingException ex) {
            Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
            throw ServiceException.FAILURE("saveInvoice : " + ex.getMessage(), ex);
        } catch (JSONException ex) {
            Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
            throw ServiceException.FAILURE("saveInvoice : " + ex.getMessage(), ex);
        } catch (ServiceException ex) {
            Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
            throw ServiceException.FAILURE("saveInvoice : " + ex.getMessage(), ex);
        }
        
    }
    private void saveCustomerInvoice(HttpServletRequest request, HashMap<String,Object> noteMap) throws SessionExpiredException, ServiceException, AccountingException{
        try {
            String entryNumber = (String) noteMap.get("entryNumber");
            Date creationDate = (Date) noteMap.get("creationDate");
            String currencyid = (String) noteMap.get(Constants.currencyKey);
            double externalCurrencyRate = noteMap.get("externalCurrencyRate")!=null?(Double) noteMap.get("externalCurrencyRate"):0.0;
            String customer_accountid = (String) noteMap.get("customer_accountid");
            String customerid = (String) noteMap.get(Constants.customerid);
            String productSellingAccountId = (String) noteMap.get("productSellingAccountId");
            String productAmount = (String) noteMap.get("productAmount");
            String productid = (String) noteMap.get("productId");
            String productDesc = (String) noteMap.get("productdesc");
            String invoiceTermsArray = (String) noteMap.get("invoiceTermsArray");
            String productTax = (String) noteMap.get("productTax");
            String productTaxAmount = (String) noteMap.get("productTaxAmount");
    
            String contractNo = (String) noteMap.get("contractNo");
            String buyerName = (String) noteMap.get("buyerName");
            double invoicedQuantity = noteMap.get("invoicedQuantity")!=null?(Double) noteMap.get("invoicedQuantity"):0.0;
            double commissionRate = noteMap.get("commissionRate")!=null?(Double) noteMap.get("commissionRate"):0.0;
            HashMap<String, FieldParams> customerInvoiceFieldParamsMap = (HashMap<String, FieldParams>) noteMap.get("customerInvoiceFieldParamsMap");
            String vesselName = (String) noteMap.get("vesselName");
            String documentRemark = (String) noteMap.get("documentRemark");
            String classofInvoice = (String) noteMap.get("class");
            String class1ofInvoice = (String) noteMap.get("class1");
            String giro = (String) noteMap.get("GIRO");
            String remarks = (String) noteMap.get("remarks");
            double transactionAmount = noteMap.get("transactionAmount")!=null?(Double) noteMap.get("transactionAmount"):0.0;
            String taxid = (String) noteMap.get("taxid");
            double taxamount = noteMap.get("taxamount")!=null?Double.parseDouble((String)noteMap.get("taxamount")):0.0;
            String termid =(String) noteMap.get("termid");
            Date duedate =(Date) noteMap.get("dueDate");
            String address1 =(String) noteMap.get("address1");
            String address2 =(String) noteMap.get("address2");
            String postal =(String) noteMap.get("postal");

            
            List ll = new ArrayList();
            String jeentryNumber= "";
            String jeSeqFormatId="";
            String jeIntegerPart="";
            String jeDatePrefix = "";
            String jeDateSuffix = "";
            Invoice invoice = null;
            
            ArrayList discountArr=new ArrayList();
            String invoiceid=null;
            
            int istemplate = 0;
            
            KwlReturnObject result=null;
            String sequenceformat="NA";
            
            int nocount;
            HashMap<String, Object> requestParams = AccountingManager.getGlobalParams(request);
            
            String companyid = sessionHandlerImpl.getCompanyid(request);
//            String termid =request.getParameter("termid");
            String jeid=null;
            
            boolean jeautogenflag = false;
            Customer customer=null;
            boolean isFixedAsset = false;
            
            String custId = customerid;
            String accountid = customer_accountid;
            
            String createdby= sessionHandlerImpl.getUserid(request);
            String modifiedby= sessionHandlerImpl.getUserid(request);            
            long createdon= System.currentTimeMillis();
            long updatedon = System.currentTimeMillis();
            
            Discount discount = null;
            double discValue = 0.0;
            
            double shippingCharges = 0d;
            double otherCharges = 0d;
            boolean inCash = false;
            
            KwlReturnObject cap = accountingHandlerDAOobj.getObject(CompanyAccountPreferences.class.getName(), companyid);
            CompanyAccountPreferences preferences = (CompanyAccountPreferences) cap.getEntityList().get(0);

            KwlReturnObject cmp = accountingHandlerDAOobj.getObject(Company.class.getName(), companyid);
            Company company = (Company) cmp.getEntityList().get(0);
            
            KwlReturnObject curresult = accountingHandlerDAOobj.getObject(KWLCurrency.class.getName(), currencyid);
            KWLCurrency currency = (KWLCurrency) curresult.getEntityList().get(0);
            
            KwlReturnObject custresult = accountingHandlerDAOobj.getObject(Customer.class.getName(), customerid);
            customer = (Customer) custresult.getEntityList().get(0);
            
            JSONObject invjson = new JSONObject();
            invjson.put("invoiceid", invoiceid);
            invjson.put("accountid", accountid);
            invjson.put(Constants.customerid, customerid);
            
            SequenceFormat prevSeqFormat=null;
            String nextAutoNo = "";
            String nextAutoNoInt = "";
            String datePrefix = "";
            String dateAfterPrefix = "";
            String dateSuffix = "";
            
            result = accInvoiceDAOobj.getInvoiceCount(entryNumber, companyid);
            nocount = result.getRecordTotalCount();
            if (nocount > 0 && sequenceformat.equals("NA")) {
                if (inCash) {
                    throw new AccountingException("Sales receipt number '" + entryNumber + "' already exists.");
                } else {
                    throw new AccountingException("Invoice number '" + entryNumber + "' already exists.");
                }
            }
            
            if(prevSeqFormat==null) {
                HashMap<String, Object> invoiceFormatParams = new HashMap<String, Object>();
                invoiceFormatParams.put(Constants.moduleid, Constants.Acc_Invoice_ModuleId);
                invoiceFormatParams.put("modulename", CompanyPreferencesConstants.AUTOINVOICE);
                invoiceFormatParams.put(Constants.companyKey, companyid);
                invoiceFormatParams.put("isdefaultFormat", true);

                KwlReturnObject kwlObj = accCompanyPreferencesObj.getSequenceFormat(invoiceFormatParams);
                SequenceFormat format = (SequenceFormat) kwlObj.getEntityList().get(0);
                Map<String, Object> seqNumberMap = new HashMap<String, Object>();
                seqNumberMap = accCompanyPreferencesObj.getNextAutoNumber_Modified(companyid, StaticValues.AUTONUM_INVOICE, format.getID(), false, creationDate);
                nextAutoNo = (String)seqNumberMap.get(Constants.AUTO_ENTRYNUMBER);  //next auto generated number
                nextAutoNoInt = (String)seqNumberMap.get(Constants.SEQNUMBER);//integer Part
                datePrefix = (String)seqNumberMap.get(Constants.DATEPREFIX);//Date Prefix Part
                dateAfterPrefix = (String)seqNumberMap.get(Constants.DATEAFTERPREFIX);//Date After Prefix Part
                dateSuffix = (String)seqNumberMap.get(Constants.DATESUFFIX);//Date Suffix Part
                String invoiceSeqFormatId = format.getID();
                jeautogenflag = true;
                
                invjson.put( Constants.SEQFORMAT,invoiceSeqFormatId);
                invjson.put( Constants.SEQNUMBER,nextAutoNoInt);
                invjson.put(Constants.DATEPREFIX, datePrefix);
                invjson.put(Constants.DATEAFTERPREFIX, dateAfterPrefix);
                invjson.put(Constants.DATESUFFIX, dateSuffix);
                entryNumber=nextAutoNo; 
               }
            
            
            invjson.put("entrynumber", entryNumber);
            invjson.put("autogenerated", nextAutoNo.equals(entryNumber));
         
            invjson.put(Constants.isFixedAsset, isFixedAsset);
            invjson.put("memo", documentRemark);
            invjson.put("billto", "");
            invjson.put("shipaddress", "");
            invjson.put("porefno", "");
            invjson.put("duedate", duedate);
//            invjson.put("template", request.getParameter("template"));
            invjson.put(Constants.companyKey, companyid);
            invjson.put(Constants.currencyKey, currencyid);
            invjson.put("externalCurrencyRate", externalCurrencyRate);
//            invjson.put("salesPerson", request.getParameter("salesPerson"));
//            invjson.put("shipvia", request.getParameter("shipvia"));
//            invjson.put("fob", request.getParameter("fob"));
            invjson.put("createdby",createdby);
            invjson.put("modifiedby",modifiedby);
            invjson.put("createdon",createdon);
            invjson.put("updatedon",updatedon);
            invjson.put("partialinv",false);
            invjson.put("gstIncluded",false);
            if(!StringUtil.isNullOrEmpty(termid))
                invjson.put("termid", termid);
            
            synchronized (this) {
                HashMap<String, Object> JEFormatParams = new HashMap<String, Object>();
                JEFormatParams.put(Constants.moduleid, Constants.Acc_GENERAL_LEDGER_ModuleId);
                JEFormatParams.put("modulename", CompanyPreferencesConstants.AUTOJOURNALENTRY);
                JEFormatParams.put(Constants.companyKey, companyid);
                JEFormatParams.put("isdefaultFormat", true);

                KwlReturnObject kwlObj = accCompanyPreferencesObj.getSequenceFormat(JEFormatParams);
                SequenceFormat format = (SequenceFormat) kwlObj.getEntityList().get(0);
                Map<String, Object> seqNumberMap = new HashMap<String, Object>();
                seqNumberMap = accCompanyPreferencesObj.getNextAutoNumber_Modified(companyid, StaticValues.AUTONUM_JOURNALENTRY, format.getID(), false, creationDate);
                jeentryNumber = (String)seqNumberMap.get(Constants.AUTO_ENTRYNUMBER);  //next auto generated number
                jeIntegerPart = (String)seqNumberMap.get(Constants.SEQNUMBER);//integer Part
                jeDatePrefix = (String)seqNumberMap.get(Constants.DATEPREFIX);//Date Prefix Part
                dateAfterPrefix = (String)seqNumberMap.get(Constants.DATEAFTERPREFIX);//Date After Prefix Part
                jeDateSuffix = (String)seqNumberMap.get(Constants.DATESUFFIX);//Date Suffix Part
                
                jeSeqFormatId = format.getID();
                jeautogenflag = true;
            }
            
            Map<String,Object> jeDataMap = AccountingManager.getGlobalParams(request);
            jeDataMap.put("entrynumber", jeentryNumber);
            jeDataMap.put("autogenerated", jeautogenflag);
            jeDataMap.put(Constants.SEQFORMAT,jeSeqFormatId ); 
            jeDataMap.put(Constants.SEQNUMBER,jeIntegerPart );  
            jeDataMap.put(Constants.DATEPREFIX, jeDatePrefix);
            jeDataMap.put(Constants.DATEAFTERPREFIX, dateAfterPrefix);
            jeDataMap.put(Constants.DATESUFFIX, jeDateSuffix);

            jeDataMap.put("entrydate", creationDate);
            jeDataMap.put(Constants.companyKey, companyid);
            jeDataMap.put("memo", documentRemark);
            jeDataMap.put(Constants.currencyKey, currencyid);
//            jeDataMap.put("costcenterid", costCenterId);
            
            HashSet jeDetails = new HashSet();
            KwlReturnObject jeresult = accJournalEntryobj.saveJournalEntry(jeDataMap);//Create Journal entry without JEdetails
            JournalEntry journalEntry = (JournalEntry) jeresult.getEntityList().get(0);
            jeid = journalEntry.getID();
            invjson.put("journalerentryid", jeid);
            jeDataMap.put("jeid", jeid);
            
            String invoiceDetails = getInvoiceDetailsMultipleProducts(productid, transactionAmount, currency.getSymbol(), externalCurrencyRate,productTax,productTaxAmount,productAmount,productDesc);
            
            List dll = saveInvoiceRows(request, invoiceDetails, jeid, company, jeDetails, currencyid, externalCurrencyRate, creationDate);
            double[] totals = (double[]) dll.get(0);
            HashSet<InvoiceDetail> invcdetails = (HashSet<InvoiceDetail>) dll.get(1);
            ArrayList<String> prodList = (ArrayList<String>) dll.get(2);
            double disc = 0d;
            
            if (disc > 0) {
//                discount=new Discount();
//                discount.setDiscount(disc);
//                discount.setInPercent(Boolean.parseBoolean(request.getParameter("perdiscount")));
//                discount.setOriginalAmount(totals[1]-totals[0]);
//                discount.setCompany(company);
                JSONObject discjson = new JSONObject();
                discjson.put("discount", disc);
                discjson.put("inpercent", true);
                discjson.put("originalamount", totals[1] - totals[0]+totals[2]);
                discjson.put(Constants.companyKey, companyid);
                KwlReturnObject dscresult = accDiscountobj.addDiscount(discjson);
                discount = (Discount) dscresult.getEntityList().get(0);
//                invoice.setDiscount(discount);
                invjson.put("discountid", discount.getID());
                discValue = discount.getDiscountValue();
            }
            
            discValue += totals[0];
            
            /*
             * If invoice terms applied then add mapping in against invoice
             */
            double termTotalAmount = 0;
            HashMap<String, Double> termAcc = new HashMap<String, Double>();
//            String InvoiceTerms = request.getParameter("invoicetermsmap");
            if(!StringUtil.isNullOrEmpty(invoiceTermsArray)) {
                JSONArray termsArr = new JSONArray(invoiceTermsArray);   
                for(int cnt=0; cnt<termsArr.length(); cnt++) {
                    double termamount = termsArr.getJSONObject(cnt).getDouble("termamount");
                    termTotalAmount += termamount;                       
                    termAcc.put(termsArr.getJSONObject(cnt).getString("glaccount"), termamount);                   
                }
                if (termsArr.length() > 0) {
                    invjson.put(Constants.termsincludegst, false);
                }
            }
            
            
            if (inCash) {
                accountid = preferences.getCashAccount().getID();
            }
            
            double totalInvAmount = totals[1] + shippingCharges + otherCharges - discValue + termTotalAmount + taxamount + totals[2];
            KwlReturnObject bAmt = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, totalInvAmount, currencyid, creationDate,externalCurrencyRate);
            double totalInvAmountinBase =(Double)bAmt.getEntityList().get(0);
            invjson.put("invoiceamountdue", totalInvAmount);
            invjson.put(Constants.invoiceamount, totalInvAmount);
            invjson.put(Constants.invoiceamountinbase, totalInvAmountinBase);
            
            
            ArrayList amountApprove = (accountingHandlerDAOobj.getApprovalFlagForAmount(totalInvAmountinBase, Constants.CUSTOMER_INVOICE_APPROVAL, Constants.TRANS_AMOUNT,companyid));             
            boolean amountExceed = (Boolean)amountApprove.get(0);
            
            ArrayList prodApprove = (accountingHandlerDAOobj.getApprovalFlagForProducts(prodList, Constants.CUSTOMER_INVOICE_APPROVAL, Constants.TRANS_PRODUCT,companyid));
            boolean prodExists = (Boolean)prodApprove.get(0);
            boolean pendingApprovalFlagForDisc = false;
            int approvalLevelForDisc = 1;

            Iterator invitr = invcdetails.iterator();
            while (invitr.hasNext()) {
                InvoiceDetail ivd = (InvoiceDetail) invitr.next();
                Discount discount1 = ivd.getDiscount();
                String productId = ivd.getInventory().getProduct().getID();
                if (discount1 != null) {
                    double discountVal = discount1.getDiscountValue();
                    KwlReturnObject dAmount = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, discountVal, currencyid, creationDate, externalCurrencyRate);
                    double discAmountinBase = (Double) dAmount.getEntityList().get(0);
                    ArrayList prodApproveDisc = (accountingHandlerDAOobj.getApprovalFlagForProductsDiscount(discAmountinBase,productId, Constants.CUSTOMER_INVOICE_APPROVAL, Constants.TRANS_DISCOUNT, companyid, pendingApprovalFlagForDisc, approvalLevelForDisc));
                    pendingApprovalFlagForDisc = (Boolean) prodApproveDisc.get(0);
                    approvalLevelForDisc = (Integer) prodApproveDisc.get(1);
                }

            }
            
            int pendingApprovalFlag = 0;
            
            int approvalLevel = ((Integer) (amountApprove.get(1)) > (Integer) (prodApprove.get(1))) ? (Integer) (amountApprove.get(1)) : (Integer) (prodApprove.get(1));
            if (approvalLevelForDisc > approvalLevel) {
                approvalLevel = approvalLevelForDisc;
            }
            
            JSONObject jedjson = new JSONObject();
            jedjson.put("srno", jeDetails.size()+1);
            jedjson.put(Constants.companyKey, companyid);
            jedjson.put("amount", totalInvAmount);
            jedjson.put("accountid", customer_accountid);
            jedjson.put("debit", true);
            jedjson.put("jeid", jeid);
            
            KwlReturnObject jedresult = accJournalEntryobj.addJournalEntryDetails(jedjson);
            JournalEntryDetail jed = (JournalEntryDetail) jedresult.getEntityList().get(0);
            jeDetails.add(jed);
            
            invjson.put("customerentryid", jed.getID());
            if (discValue > 0) {
                jedjson = new JSONObject();
                jedjson.put("srno", jeDetails.size()+1);
                jedjson.put(Constants.companyKey, companyid);
                jedjson.put("amount", discValue);
                jedjson.put("accountid", preferences.getDiscountGiven().getID());
                jedjson.put("debit", true);
                jedjson.put("jeid", jeid);
                jedresult = accJournalEntryobj.addJournalEntryDetails(jedjson);
                jed = (JournalEntryDetail) jedresult.getEntityList().get(0);
                jeDetails.add(jed);
            }
            
            if (shippingCharges > 0) {
                jedjson = new JSONObject();
                jedjson.put("srno", jeDetails.size()+1);
                jedjson.put(Constants.companyKey, companyid);
                jedjson.put("amount", shippingCharges);
                jedjson.put("accountid", preferences.getShippingCharges().getID());
                jedjson.put("debit", false);
                jedjson.put("jeid", jeid);
                jedresult = accJournalEntryobj.addJournalEntryDetails(jedjson);
                jed = (JournalEntryDetail) jedresult.getEntityList().get(0);
                jeDetails.add(jed);
//                invoice.setShipEntry(jed);
                invjson.put("shipentryid", jed.getID());

            }
            
            if(termAcc.size()>0) {
                for (Map.Entry<String, Double> entry : termAcc.entrySet()) {
                    jedjson = new JSONObject();
                    jedjson.put("srno", jeDetails.size()+1);
                    jedjson.put(Constants.companyKey, companyid);
                    jedjson.put("amount", entry.getValue()>0 ? entry.getValue() : (entry.getValue()*(-1)));
                    jedjson.put("accountid", entry.getKey());
                    jedjson.put("debit", entry.getValue()>0 ? false : true);
                    jedjson.put("jeid", jeid);
                    jedresult = accJournalEntryobj.addJournalEntryDetails(jedjson);
                    jed = (JournalEntryDetail) jedresult.getEntityList().get(0);
                    jeDetails.add(jed);
                }
            }
            
//            if (otherCharges > 0) {
////                jed=new JournalEntryDetail();
////                jed.setCompany(company);
////                jed.setAmount(otherCharges);
////                jed.setAccount(preferences.getOtherCharges());
////                jed.setDebit(false);
//                jedjson = new JSONObject();
//                jedjson.put("srno", jeDetails.size()+1);
//                jedjson.put(Constants.companyKey, companyid);
//                jedjson.put("amount", otherCharges);
//                jedjson.put("accountid", preferences.getOtherCharges().getID());
//                jedjson.put("debit", false);
//                jedjson.put("jeid", jeid);
//                jedresult = accJournalEntryobj.addJournalEntryDetails(jedjson);
//                jed = (JournalEntryDetail) jedresult.getEntityList().get(0);
//                jeDetails.add(jed);
////                invoice.setOtherEntry(jed);
//                invjson.put("otherentryid", jed.getID());
//            
//            }
            
            
            if (!StringUtil.isNullOrEmpty(taxid)) {
                KwlReturnObject txresult = accountingHandlerDAOobj.getObject(Tax.class.getName(),taxid); // (Tax)session.get(Tax.class, taxid);
                Tax tax = (Tax) txresult.getEntityList().get(0);
                if (tax == null) {
                    throw new AccountingException(messageSource.getMessage("acc.so.taxcode", null, RequestContextUtils.getLocale(request)));
                }
                invjson.put("taxid", taxid);

                if (taxamount > 0) {

                    jedjson = new JSONObject();
                    jedjson.put("srno", jeDetails.size()+1);
                    jedjson.put(Constants.companyKey, companyid);
                    jedjson.put("amount", taxamount);
                    jedjson.put("accountid", tax.getAccount().getID());
                    jedjson.put("debit", false);
                    jedjson.put("jeid", jeid);
                    jedresult = accJournalEntryobj.addJournalEntryDetails(jedjson);
                    jed = (JournalEntryDetail) jedresult.getEntityList().get(0);
                    jeDetails.add(jed);
                    invjson.put("taxentryid", jed.getID());

                }

            }
            
            jeDataMap.put("jedetails", jeDetails);
            jeDataMap.put("pendingapproval", pendingApprovalFlag);
            jeDataMap.put("istemplate", istemplate);
            jeDataMap.put("externalCurrencyRate", externalCurrencyRate);
            jeresult = accJournalEntryobj.saveJournalEntry(jeDataMap);//Add Journal entry details
            journalEntry = (JournalEntry) jeresult.getEntityList().get(0);
            
            String customfield = getCustomFieldsForImport1(customerInvoiceFieldParamsMap,classofInvoice, class1ofInvoice,giro,remarks);
            
            if (!StringUtil.isNullOrEmpty(customfield)) {
                JSONArray jcustomarray = new JSONArray(customfield);
                HashMap<String, Object> customrequestParams = new HashMap<String, Object>();
                customrequestParams.put("customarray", jcustomarray);
                customrequestParams.put("modulename", Constants.Acc_JE_modulename);
                customrequestParams.put("moduleprimarykey", Constants.Acc_JEid);
                customrequestParams.put("modulerecid", journalEntry.getID());
                customrequestParams.put(Constants.moduleid, Constants.Acc_Invoice_ModuleId);
                customrequestParams.put(Constants.companyKey, companyid);
                customrequestParams.put("customdataclasspath", Constants.Acc_BillInv_custom_data_classpath);
                KwlReturnObject customDataresult = fieldDataManagercntrl.setCustomData(customrequestParams);
                if (customDataresult != null && customDataresult.getEntityList().size() > 0) {
                    jeDataMap.put("accjecustomdataref", journalEntry.getID());
                    jeresult = accJournalEntryobj.saveJournalEntry(jeDataMap);
                }
            }
            
            KwlReturnObject ERresult = accCurrencyDAOobj.getExcDetailID(requestParams, currencyid, creationDate, null);
            ExchangeRateDetails erd = (ExchangeRateDetails) ERresult.getEntityList().get(0);
            String erdid = (erd == null) ? null : erd.getID();
            invjson.put("erdid", erdid);
            
            invjson.put("pendingapproval", pendingApprovalFlag);
            invjson.put("istemplate", istemplate);
            invjson.put("approvallevel", approvalLevel);
            invjson.put("incash", "false");
            
            Map<String, Object> addressParams=new HashMap<String,Object>();
            if(!StringUtil.isNullOrEmpty(address1) || !StringUtil.isNullOrEmpty(address2)){
                addressParams.put(Constants.BILLING_ADDRESS_TYPE, "Billing Address1");
                addressParams.put(Constants.BILLING_ADDRESS, StringUtil.isNullOrEmpty(address1)?"":address1);
                addressParams.put(Constants.BILLING_POSTAL, postal);
                addressParams.put(Constants.SHIPPING_ADDRESS_TYPE, "Shipping Address1");
                addressParams.put(Constants.SHIPPING_ADDRESS, StringUtil.isNullOrEmpty(address2)?address1:address2);
                addressParams.put(Constants.SHIPPING_POSTAL, postal);
            } else {
                addressParams=AccountingAddressManager.getDefaultCustomerAddressParams(customer.getID(), companyid, accountingHandlerDAOobj);// addressParams = getCustomerDefaultAddressParams(customer,companyid);
            }
            
            KwlReturnObject addressresult = accountingHandlerDAOobj.saveAddressDetail(addressParams, companyid);
            BillingShippingAddresses bsa = (BillingShippingAddresses) addressresult.getEntityList().get(0);
            invjson.put("billshipAddressid", bsa.getID());
             invjson.put(Constants.Checklocktransactiondate, request.getParameter("billdate"));
            result = accInvoiceDAOobj.addInvoice(invjson, new HashSet());
            
            invoice = (Invoice) result.getEntityList().get(0);//Create Invoice without invoice-details.
            Iterator itr = invcdetails.iterator();
            while (itr.hasNext()) {
                InvoiceDetail ivd = (InvoiceDetail) itr.next();
                if((pendingApprovalFlag == 1 || istemplate == 2) && ivd.getInventory().isInvrecord()) {
                    Inventory invtry = ivd.getInventory();
                    invtry.setActquantity(invtry.getQuantity());
                    invtry.setQuantity(0);
                    }
                ivd.setInvoice(invoice);
            }
            
            invjson.put("invoiceid", invoice.getID());
            result = accInvoiceDAOobj.updateInvoice(invjson, invcdetails);
            invoice = (Invoice) result.getEntityList().get(0);//Add invoice details
            
            //Insert new entries again in optimized table.
            accJournalEntryobj.saveAccountJEs_optimized(jeid);
            
             /*
             * If invoice terms applied then add mapping in against invoice
             */
            if (StringUtil.isAsciiString(invoiceTermsArray)) {
                mapInvoiceTerms(invoiceTermsArray, invoice.getID(), sessionHandlerImpl.getUserid(request));
            }
            
            boolean isEdit = false;
            boolean isCopy = false;
            String action="Imported new";
            
            
        } catch (UnsupportedEncodingException ex) {
            Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
            throw ServiceException.FAILURE("saveInvoice : " + ex.getMessage(), ex);
        } catch (JSONException ex) {
            Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
            throw ServiceException.FAILURE("saveInvoice : " + ex.getMessage(), ex);
        } catch (ServiceException ex) {
            Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
            throw ServiceException.FAILURE("saveInvoice : " + ex.getMessage(), ex);
        }
        
    }
    
    public List mapInvoiceTerms(String InvoiceTerms, String invoiceID, String userid) throws ServiceException {
        List ll = new ArrayList();
        try {
            JSONArray termsArr = new JSONArray(InvoiceTerms);
            for (int cnt = 0; cnt < termsArr.length(); cnt++) {
                JSONObject temp = termsArr.getJSONObject(cnt);
                HashMap<String, Object> termMap = new HashMap<String, Object>();
                termMap.put("term", temp.getString("id"));
                termMap.put("termamount", Double.parseDouble(temp.getString("termamount")));
                double percentage = 0;
                if (!StringUtil.isNullOrEmpty(temp.optString("termpercentage",""))) {
                    percentage = Double.parseDouble(temp.getString("termpercentage"));
                }
                termMap.put("termpercentage", percentage);
                termMap.put("invoice", invoiceID);
                termMap.put("creationdate", new Date());
                termMap.put(Constants.useridKey , userid);
                accInvoiceDAOobj.saveInvoiceTermMap(termMap);
            }
        } catch (Exception ex) {
            throw ServiceException.FAILURE(ex.getMessage(), ex);
        }
        return ll;
    }
        
    private void saveVendorInvoice(HttpServletRequest request, HashMap<String,Object> noteMap) throws SessionExpiredException, ServiceException, AccountingException{
        try {
            String entryNumber = (String) noteMap.get("entryNumber");
            Date creationDate = (Date) noteMap.get("creationDate");
            String currencyid = (String) noteMap.get(Constants.currencyKey);
            double externalCurrencyRate = (Double) noteMap.get("externalCurrencyRate");
            String vendor_accountid = (String) noteMap.get("vendor_accountid");
            String vendorid = (String) noteMap.get("vendorid");
            String productid = (String) noteMap.get("productId");
            String productTax = (String) noteMap.get("productTax");
            String productTaxAmount = (String) noteMap.get("productTaxAmount");

            String contractNo = (String) noteMap.get("contractNo");
            String buyerName = (String) noteMap.get("buyerName");
            double invoicedQuantity = (Double) noteMap.get("invoicedQuantity");
            double commissionRate = (Double) noteMap.get("commissionRate");
            HashMap<String, FieldParams> vendorInvoiceFieldParamsMap = (HashMap<String, FieldParams>) noteMap.get("vendorInvoiceFieldParamsMap");
            String vesselName = (String) noteMap.get("vesselName");
            String documentRemark = (String) noteMap.get("documentRemark");
            double transactionAmount = (Double) noteMap.get("transactionAmount");
            
            
            List ll = new ArrayList();
            String jeentryNumber= "";
            String jeSeqFormatId="";
            String jeIntegerPart="";
            String jeDatePrefix = "";
            String jeDateAfterPrefix = "";
            String jeDateSuffix = "";
            GoodsReceipt receipt = null;
            
            ArrayList discountArr=new ArrayList();
            String invoiceid=null;
            
            int istemplate = 0;
            
            KwlReturnObject result=null;
            String sequenceformat="NA";
            
            int nocount;
            HashMap<String, Object> requestParams = AccountingManager.getGlobalParams(request);
            
            String companyid = sessionHandlerImpl.getCompanyid(request);
            String termid =request.getParameter("termid");
            String jeid=null;
            
            boolean jeautogenflag = false;
            Vendor vendor=null;
            boolean isFixedAsset = false;
            
            String createdby= sessionHandlerImpl.getUserid(request);
            String modifiedby= sessionHandlerImpl.getUserid(request);            
            long createdon= System.currentTimeMillis();
            long updatedon = System.currentTimeMillis();
            
            String taxid = "";
            double taxamount = 0d;
            Discount discount = null;
            double discValue = 0.0;
            
            double shippingCharges = 0d;
            double otherCharges = 0d;
            boolean inCash = false;
            
            KwlReturnObject cap = accountingHandlerDAOobj.getObject(CompanyAccountPreferences.class.getName(), companyid);
            CompanyAccountPreferences preferences = (CompanyAccountPreferences) cap.getEntityList().get(0);

            KwlReturnObject extraCap = accountingHandlerDAOobj.getObject(ExtraCompanyPreferences.class.getName(), companyid);
            ExtraCompanyPreferences extraPreferences = (ExtraCompanyPreferences) extraCap.getEntityList().get(0);

            KwlReturnObject cmp = accountingHandlerDAOobj.getObject(Company.class.getName(), companyid);
            Company company = (Company) cmp.getEntityList().get(0);
            
            KwlReturnObject curresult = accountingHandlerDAOobj.getObject(KWLCurrency.class.getName(), currencyid);
            KWLCurrency currency = (KWLCurrency) curresult.getEntityList().get(0);
            
            KwlReturnObject custresult = accountingHandlerDAOobj.getObject(Vendor.class.getName(), vendorid);
            vendor = (Vendor) custresult.getEntityList().get(0);
            
//            JSONObject invjson = new JSONObject();
            Map<String, Object> invmap= new HashMap<String, Object>();
            invmap.put("invoiceid", invoiceid);
            invmap.put("accountid", vendor_accountid);
            invmap.put("vendorid", vendorid);
           
            result = accGoodsReceiptobj.getReceiptFromNo(entryNumber, companyid);
            nocount = result.getRecordTotalCount();
            if (nocount > 0 && sequenceformat.equals("NA")) {
                if (inCash) {
                    throw new AccountingException("Purchase receipt number '" + entryNumber + "' already exists.");
                } else {
                    throw new AccountingException("Purchase Invoice number '" + entryNumber + "' already exists.");
                }
            }
            
            invmap.put("entrynumber", entryNumber);
            invmap.put("autogenerated", false);
            
            invmap.put(Constants.isFixedAsset, isFixedAsset);
            invmap.put("memo", documentRemark);
            invmap.put("billto", "");
            invmap.put("shipaddress", "");
            invmap.put("porefno", "");
            invmap.put("duedate", creationDate);
            invmap.put(Constants.companyKey, companyid);
            invmap.put(Constants.currencyKey, currencyid);
            invmap.put("externalCurrencyRate", externalCurrencyRate);
            invmap.put("createdby",createdby);
            invmap.put("modifiedby",modifiedby);
            invmap.put("createdon",createdon);
            invmap.put("updatedon",updatedon);
            invmap.put("partialinv",false);
            invmap.put("gstIncluded",false);
            
            synchronized (this) {
                HashMap<String, Object> JEFormatParams = new HashMap<String, Object>();
                JEFormatParams.put(Constants.moduleid, Constants.Acc_GENERAL_LEDGER_ModuleId);
                JEFormatParams.put("modulename", CompanyPreferencesConstants.AUTOJOURNALENTRY);
                JEFormatParams.put(Constants.companyKey, companyid);
                JEFormatParams.put("isdefaultFormat", true);

                KwlReturnObject kwlObj = accCompanyPreferencesObj.getSequenceFormat(JEFormatParams);
                SequenceFormat format = (SequenceFormat) kwlObj.getEntityList().get(0);
                Map<String, Object> seqNumberMap = new HashMap<String, Object>();
                seqNumberMap = accCompanyPreferencesObj.getNextAutoNumber_Modified(companyid, StaticValues.AUTONUM_JOURNALENTRY, format.getID(), false, creationDate);
                jeentryNumber = (String)seqNumberMap.get(Constants.AUTO_ENTRYNUMBER);  //next auto generated number
                jeIntegerPart = (String)seqNumberMap.get(Constants.SEQNUMBER);//integer Part
                jeSeqFormatId = format.getID();
                jeautogenflag = true;
            }
            
            Map<String,Object> jeDataMap = AccountingManager.getGlobalParams(request);
            jeDataMap.put("entrynumber", jeentryNumber);
            jeDataMap.put("autogenerated", jeautogenflag);
            jeDataMap.put(Constants.SEQFORMAT,jeSeqFormatId ); 
            jeDataMap.put(Constants.SEQNUMBER,jeIntegerPart );    
            jeDataMap.put(Constants.DATEPREFIX, jeDatePrefix);
            jeDataMap.put(Constants.DATEAFTERPREFIX, jeDateAfterPrefix);
            jeDataMap.put(Constants.DATESUFFIX, jeDateSuffix);
            jeDataMap.put("entrydate", creationDate);
            jeDataMap.put(Constants.companyKey, companyid);
            jeDataMap.put("memo", documentRemark);
            jeDataMap.put(Constants.currencyKey, currencyid);
            
            HashSet jeDetails = new HashSet();
            KwlReturnObject jeresult = accJournalEntryobj.saveJournalEntry(jeDataMap);//Create Journal entry without JEdetails
            JournalEntry journalEntry = (JournalEntry) jeresult.getEntityList().get(0);
            jeid = journalEntry.getID();
            invmap.put("journalentryid", jeid);                       
            jeDataMap.put("jeid", jeid);
            
            String invoiceDetails = getInvoiceDetails(productid, transactionAmount, currency.getSymbol(), externalCurrencyRate,productTax,productTaxAmount);
            
            List dll = saveVendorInvoiceRows(request, invoiceDetails, jeid, company, jeDetails, currency, externalCurrencyRate, creationDate);
            double[] totals = (double[]) dll.get(0);
            HashSet<GoodsReceiptDetail> invcdetails = (HashSet<GoodsReceiptDetail>) dll.get(1);
            ArrayList<String> prodList = (ArrayList<String>) dll.get(2);
            double disc = 0d;
            
            if (disc > 0) {

                JSONObject discjson = new JSONObject();
                discjson.put("discount", disc);
                discjson.put("inpercent", true);
                discjson.put("originalamount", totals[1] - totals[0]+totals[2]);
                discjson.put(Constants.companyKey, companyid);
                KwlReturnObject dscresult = accDiscountobj.addDiscount(discjson);
                discount = (Discount) dscresult.getEntityList().get(0);
                invmap.put("discountid", discount.getID());
                discValue = discount.getDiscountValue();
            }
            
            discValue += totals[0];
            
            /*
             * If invoice terms applied then add mapping in against invoice
             */
            double termTotalAmount = 0;
            HashMap<String, Double> termAcc = new HashMap<String, Double>();
            String InvoiceTerms = request.getParameter("invoicetermsmap");
            if(!StringUtil.isNullOrEmpty(InvoiceTerms)) {
                JSONArray termsArr = new JSONArray(InvoiceTerms);
                for(int cnt=0; cnt<termsArr.length(); cnt++) {
                    double termamount = termsArr.getJSONObject(cnt).getDouble("termamount");
                    termTotalAmount += termamount;
                     if(termAcc.containsKey(termsArr.getJSONObject(cnt).getString("glaccount"))) {
                        double tempAmount=termAcc.get(termsArr.getJSONObject(cnt).getString("glaccount"));
                        termAcc.put(termsArr.getJSONObject(cnt).getString("glaccount"), termamount+tempAmount);
                    }
                    else{   
                        termAcc.put(termsArr.getJSONObject(cnt).getString("glaccount"), termamount);
                    }
                }
            }
            
            double totalInvAmount = totals[1] + shippingCharges + otherCharges - discValue + termTotalAmount + taxamount + totals[2];
            KwlReturnObject bAmt = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, totalInvAmount, currencyid, creationDate,externalCurrencyRate);
            double totalInvAmountinBase =(Double)bAmt.getEntityList().get(0);
            invmap.put(Constants.invoiceamountdue, totalInvAmount);
            invmap.put(Constants.invoiceamountdueinbase, totalInvAmountinBase);
            invmap.put(Constants.invoiceamount, totalInvAmount);
            invmap.put(Constants.invoiceamountinbase, totalInvAmountinBase);
            
            
            ArrayList amountApprove = (accountingHandlerDAOobj.getApprovalFlagForAmount(totalInvAmountinBase, Constants.CUSTOMER_INVOICE_APPROVAL, Constants.TRANS_AMOUNT,companyid));             
            boolean amountExceed = (Boolean)amountApprove.get(0);
            
            ArrayList prodApprove = (accountingHandlerDAOobj.getApprovalFlagForProducts(prodList, Constants.CUSTOMER_INVOICE_APPROVAL, Constants.TRANS_PRODUCT,companyid));
            boolean prodExists = (Boolean)prodApprove.get(0);
            boolean pendingApprovalFlagForDisc = false;
            int approvalLevelForDisc = 1;

            Iterator invitr = invcdetails.iterator();
            while (invitr.hasNext()) {
                GoodsReceiptDetail ivd = (GoodsReceiptDetail) invitr.next();
                Discount discount1 = ivd.getDiscount();
                String productId = ivd.getInventory().getProduct().getID();
                if (discount1 != null) {
                    double discountVal = discount1.getDiscountValue();
                    KwlReturnObject dAmount = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, discountVal, currencyid, creationDate, externalCurrencyRate);
                    double discAmountinBase = (Double) dAmount.getEntityList().get(0);
                    ArrayList prodApproveDisc = (accountingHandlerDAOobj.getApprovalFlagForProductsDiscount(discAmountinBase,productId, Constants.CUSTOMER_INVOICE_APPROVAL, Constants.TRANS_DISCOUNT, companyid, pendingApprovalFlagForDisc, approvalLevelForDisc));
                    pendingApprovalFlagForDisc = (Boolean) prodApproveDisc.get(0);
                    approvalLevelForDisc = (Integer) prodApproveDisc.get(1);
                }

            }
            
            int pendingApprovalFlag = 0;
            
            int approvalLevel = ((Integer) (amountApprove.get(1)) > (Integer) (prodApprove.get(1))) ? (Integer) (amountApprove.get(1)) : (Integer) (prodApprove.get(1));
            if (approvalLevelForDisc > approvalLevel) {
                approvalLevel = approvalLevelForDisc;
            }
            
            JSONObject jedjson = new JSONObject();
            jedjson.put("srno", jeDetails.size()+1);
            jedjson.put(Constants.companyKey, companyid);
            jedjson.put("amount", totalInvAmount);
            jedjson.put("accountid", vendor_accountid);
            jedjson.put("debit", false);
            jedjson.put("jeid", jeid);
            
            KwlReturnObject jedresult = accJournalEntryobj.addJournalEntryDetails(jedjson);
            JournalEntryDetail jed = (JournalEntryDetail) jedresult.getEntityList().get(0);
            jeDetails.add(jed);
            
            invmap.put("vendorentryid", jed.getID());
            if (discValue > 0) {
                jedjson = new JSONObject();
                jedjson.put("srno", jeDetails.size()+1);
                jedjson.put(Constants.companyKey, companyid);
                jedjson.put("amount", discValue);
                jedjson.put("accountid", preferences.getDiscountGiven().getID());
                jedjson.put("debit", false);
                jedjson.put("jeid", jeid);
                jedresult = accJournalEntryobj.addJournalEntryDetails(jedjson);
                jed = (JournalEntryDetail) jedresult.getEntityList().get(0);
                jeDetails.add(jed);
            }

            if(termAcc.size()>0) {
                for (Map.Entry<String, Double> entry : termAcc.entrySet()) {
                    jedjson = new JSONObject();
                    jedjson.put("srno", jeDetails.size()+1);
                    jedjson.put(Constants.companyKey, companyid);
                    jedjson.put("amount", entry.getValue()>0 ? entry.getValue() : (entry.getValue()*(-1)));
                    jedjson.put("accountid", entry.getKey());
                    jedjson.put("debit", entry.getValue()>0 ? true : false);
                    jedjson.put("jeid", jeid);
                    jedresult = accJournalEntryobj.addJournalEntryDetails(jedjson);
                    jed = (JournalEntryDetail) jedresult.getEntityList().get(0);
                    jeDetails.add(jed);
                }
            }

            
            jeDataMap.put("jedetails", jeDetails);
            jeDataMap.put("pendingapproval", pendingApprovalFlag);
            jeDataMap.put("istemplate", istemplate);
            jeDataMap.put("externalCurrencyRate", externalCurrencyRate);
            jeresult = accJournalEntryobj.saveJournalEntry(jeDataMap);//Add Journal entry details
            journalEntry = (JournalEntry) jeresult.getEntityList().get(0);
            
            String customfield = getCustomFieldsForImport(vendorInvoiceFieldParamsMap,contractNo, vesselName,buyerName, invoicedQuantity, commissionRate, Constants.Acc_Vendor_Invoice_ModuleId, companyid);
            
            if (!StringUtil.isNullOrEmpty(customfield)) {
                JSONArray jcustomarray = new JSONArray(customfield);
                HashMap<String, Object> customrequestParams = new HashMap<String, Object>();
                customrequestParams.put("customarray", jcustomarray);
                customrequestParams.put("modulename", Constants.Acc_JE_modulename);
                customrequestParams.put("moduleprimarykey", Constants.Acc_JEid);
                customrequestParams.put("modulerecid", journalEntry.getID());
                customrequestParams.put(Constants.moduleid, Constants.Acc_Invoice_ModuleId);
                customrequestParams.put(Constants.companyKey, companyid);
                customrequestParams.put("customdataclasspath", Constants.Acc_BillInv_custom_data_classpath);
                KwlReturnObject customDataresult = fieldDataManagercntrl.setCustomData(customrequestParams);
                if (customDataresult != null && customDataresult.getEntityList().size() > 0) {
                    jeDataMap.put("accjecustomdataref", journalEntry.getID());
                    jeresult = accJournalEntryobj.saveJournalEntry(jeDataMap);
                }
            }
            
            KwlReturnObject ERresult = accCurrencyDAOobj.getExcDetailID(requestParams, currencyid, creationDate, null);
            ExchangeRateDetails erd = (ExchangeRateDetails) ERresult.getEntityList().get(0);
            String erdid = (erd == null) ? null : erd.getID();
            invmap.put("erdid", erdid);
            
            invmap.put("pendingapproval", pendingApprovalFlag);
            invmap.put("istemplate", istemplate);
            invmap.put("approvallevel", approvalLevel);
            invmap.put("incash", "false");
            
            Map<String, Object> addressParams=new HashMap<String,Object>();
            if(extraPreferences.isIsAddressFromVendorMaster()){
                addressParams = AccountingAddressManager.getDefaultVendorAddressParams(vendorid, companyid, accountingHandlerDAOobj);
            } else {
                addressParams = AccountingAddressManager.getDefaultVendorCompanyAddressParams(vendorid, companyid, accountingHandlerDAOobj);
            }
            KwlReturnObject addressresult= accountingHandlerDAOobj.saveAddressDetail(addressParams, companyid);
            BillingShippingAddresses bsa= (BillingShippingAddresses) addressresult.getEntityList().get(0);
            invmap.put("billshipAddressid", bsa.getID());
            invmap.put(Constants.Checklocktransactiondate, creationDate);
            invmap.put("creationDate", creationDate);
            result = accGoodsReceiptobj.addGoodsReceipt(invmap);            
            receipt = (GoodsReceipt) result.getEntityList().get(0);
            
            Iterator itr = invcdetails.iterator();
            while (itr.hasNext()) {
                GoodsReceiptDetail ivd = (GoodsReceiptDetail) itr.next();
                if((pendingApprovalFlag == 1 || istemplate == 2) && ivd.getInventory().isInvrecord()) {
                    Inventory invtry = ivd.getInventory();
                    invtry.setActquantity(invtry.getQuantity());
                    invtry.setQuantity(0);
                    }
                ivd.setGoodsReceipt(receipt);
            }
              
            invmap.put("grdetails", invcdetails);
            invmap.put("grid", receipt.getID());
            result = accGoodsReceiptobj.updateGoodsReceipt(invmap);
            accJournalEntryobj.saveAccountJEs_optimized(jeid);

        } catch (UnsupportedEncodingException ex) {
            Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
            throw ServiceException.FAILURE("saveInvoice : " + ex.getMessage(), ex);
        } catch (JSONException ex) {
            Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
            throw ServiceException.FAILURE("saveInvoice : " + ex.getMessage(), ex);
        } catch (ServiceException ex) {
            Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
            throw ServiceException.FAILURE("saveInvoice : " + ex.getMessage(), ex);
        }
        
    }

    public List saveVendorInvoiceRows(HttpServletRequest request, String invoiceDetails,String jeid, Company company, Set<JournalEntryDetail> jeDetails, KWLCurrency currency, double externalCurrencyRate, Date creationDate) throws ServiceException, SessionExpiredException, AccountingException, UnsupportedEncodingException {
        Set hs = new HashSet(), rows = new HashSet();
        ArrayList<String> prodList = new ArrayList<String>();
        double totaldiscount = 0, totalamount = 0, taxamount = 0;
        List ll = new ArrayList();
        try {
            String currencyid = (request.getParameter(Constants.currencyKey) == null ? currency.getCurrencyID() : request.getParameter(Constants.currencyKey));
            Map<String, Object> requestParams =  AccountingManager.getGlobalParams(request);
            
            boolean inCash = false;
            boolean isFixedAsset = false;
            boolean isVILinkFromGR = false;
            String companyid = company.getCompanyID();
            
            KwlReturnObject cap = accountingHandlerDAOobj.getObject(CompanyAccountPreferences.class.getName(), companyid);
            CompanyAccountPreferences preferences = (CompanyAccountPreferences) cap.getEntityList().get(0);
            boolean updateInventoryFlag = (preferences.isWithInvUpdate()) ? false : true;
            
            JSONArray jArr = new JSONArray(invoiceDetails);
            for (int i = 0; i < jArr.length(); i++) {
                JSONObject jobj = jArr.getJSONObject(i);                
                KwlReturnObject prdresult = accountingHandlerDAOobj.getObject(Product.class.getName(), jobj.getString("productid"));
                Product product = (Product) prdresult.getEntityList().get(0);
                
                GoodsReceiptDetail row = new GoodsReceiptDetail();                
                row.setSrno(i + 1);
                row.setWasRowTaxFieldEditable(true);// this field has been added after making row tax field editable its value will be set always true from its implementation. i.e from 28-jan-2014.REASON -  when Row Tax Amount field was not editable then tax calculation was taking place according to tax percent, as selected From Tax combo in JS Side.
                row.setCompany(company);
                row.setDescription(StringUtil.DecodeText(jobj.optString("desc")));
                row.setSupplierpartnumber(StringUtil.DecodeText(jobj.optString("supplierpartnumber")));
                

                if (preferences.isInventoryAccountingIntegration() && (!preferences.isWithInvUpdate() || inCash) && preferences.isUpdateInvLevel()) {
                    if (!StringUtil.isNullOrEmpty(jobj.optString("invstore"))) {
                        row.setInvstoreid(jobj.optString("invstore"));
                    } else {
                        row.setInvstoreid("");
                    }
                    if (!StringUtil.isNullOrEmpty(jobj.optString("invlocation"))) {
                        row.setInvlocid(jobj.optString("invlocation"));
                    } else {
                        row.setInvlocid("");
                    }
                }               
              
                row.setRate(jobj.optDouble("rate", 0.0));
                prodList.add(jobj.getString("productid"));  

                JSONObject inventoryjson = new JSONObject();
                inventoryjson.put("productid", jobj.getString("productid"));
                inventoryjson.put("description", jobj.getString("desc"));
                inventoryjson.put("carryin", true);
                inventoryjson.put("defective", false);
                inventoryjson.put("newinventory", false);
                inventoryjson.put(Constants.companyKey, company.getCompanyID());
                inventoryjson.put("quantity", jobj.getDouble("quantity"));
                if (jobj.has("uomid")) {
                    inventoryjson.put("uomid", jobj.getString("uomid"));
                }
                if (jobj.has("baseuomquantity") && jobj.get("baseuomquantity") != null) {
                    inventoryjson.put("baseuomquantity", updateInventoryFlag ? jobj.getDouble("baseuomquantity") : 0);
                    inventoryjson.put("actquantity", updateInventoryFlag ? 0 : jobj.getDouble("baseuomquantity"));
                    inventoryjson.put("baseuomrate", jobj.getDouble("baseuomrate"));
                } else {
                    inventoryjson.put("baseuomquantity", updateInventoryFlag ? jobj.getDouble("quantity") : 0);
                    inventoryjson.put("actquantity", updateInventoryFlag ? 0 : jobj.getDouble("quantity"));
                    inventoryjson.put("baseuomrate", jobj.getDouble("baseuomrate"));
                }
                inventoryjson.put("invrecord", updateInventoryFlag ? true : false);
                inventoryjson.put("updatedate", creationDate);
                KwlReturnObject invresult = accProductObj.addInventory(inventoryjson);
                Inventory inventory = (Inventory) invresult.getEntityList().get(0);

                row.setInventory(inventory);
                double rowamount = row.getRate() * jobj.getDouble("quantity");
                double rowdiscount = 0;
                totalamount += rowamount;

                Discount discount = null;
                double disc = jobj.getDouble("prdiscount");
                int rowdisc = jobj.getInt("discountispercent");
                if (disc != 0.0) {
                    JSONObject discjson = new JSONObject();
                    discjson.put("discount", disc);
                    discjson.put("inpercent", (rowdisc == 1) ? true : false);
                    discjson.put("originalamount", rowamount);
                    discjson.put(Constants.companyKey, company.getCompanyID());
                    KwlReturnObject dscresult = accDiscountobj.addDiscount(discjson);
                    discount = (Discount) dscresult.getEntityList().get(0);
                    row.setDiscount(discount);
                    rowdiscount = discount.getDiscountValue();
                    totaldiscount += discount.getDiscountValue();

                }
                JSONObject jedjson = new JSONObject();
                jedjson.put("srno", jeDetails.size() + 1);
                jedjson.put(Constants.companyKey, company.getCompanyID());
                jedjson.put("amount", rowamount);
                jedjson.put("accountid", product.getPurchaseAccount().getID());
                jedjson.put("debit", true);
                jedjson.put("jeid", jeid);
                KwlReturnObject jedresult = accJournalEntryobj.addJournalEntryDetails(jedjson);
                JournalEntryDetail jed = (JournalEntryDetail) jedresult.getEntityList().get(0);
                jeDetails.add(jed);

                // Add Custom fields details 
                if (!StringUtil.isNullOrEmpty(jobj.optString("customfield", ""))) {
                    JSONArray jcustomarray = new JSONArray(jobj.optString("customfield", "[]"));
                    HashMap<String, Object> customrequestParams = new HashMap<String, Object>();
                    customrequestParams.put("customarray", jcustomarray);
                    customrequestParams.put("modulename", Constants.Acc_JEDetail_modulename);
                    customrequestParams.put("moduleprimarykey", Constants.Acc_JEDetailId);
                    customrequestParams.put("modulerecid", jed.getID());
                    customrequestParams.put("recdetailId", row.getInventory().getID());
                    customrequestParams.put(Constants.moduleid, Constants.Acc_Vendor_Invoice_ModuleId);
                    customrequestParams.put(Constants.companyKey, companyid);
                    customrequestParams.put("customdataclasspath", Constants.Acc_BillInvDetail_custom_data_classpath);
                    KwlReturnObject customDataresult = fieldDataManagercntrl.setCustomData(customrequestParams);
                    if (customDataresult != null && customDataresult.getEntityList().size() > 0) {
                        jedjson.put("accjedetailcustomdata", jed.getID());
                        jedjson.put("jedid", jed.getID());
                        jedresult = accJournalEntryobj.updateJournalEntryDetails(jedjson);
                    }
                }

                // Add Custom fields details for Product
                if (!StringUtil.isNullOrEmpty(jobj.optString("productcustomfield", ""))) {
                    JSONArray jcustomarray = new JSONArray(jobj.optString("productcustomfield", "[]"));
                    HashMap<String, Object> customrequestParams = new HashMap<String, Object>();
                    customrequestParams.put("customarray", jcustomarray);
                    customrequestParams.put("modulename", Constants.Acc_JEDetail_modulename);
                    customrequestParams.put("moduleprimarykey", Constants.Acc_JEDetailId);
                    customrequestParams.put("modulerecid", jed.getID());
                    customrequestParams.put(Constants.moduleid, Constants.Acc_Vendor_Invoice_ModuleId);
                    customrequestParams.put("recdetailId", inventory.getID());
                    customrequestParams.put("productId", row.getInventory().getProduct().getID());
                    customrequestParams.put(Constants.companyKey, companyid);
                    customrequestParams.put("customdataclasspath", Constants.Acc_JEDetail_Productcustom_data_classpath);
                    KwlReturnObject customDataresult = fieldDataManagercntrl.setCustomData(customrequestParams);
                    if (customDataresult != null && customDataresult.getEntityList().size() > 0) {
                        jedjson.put("accjedetailproductcustomdataref", jed.getID());
                        jedjson.put("jedid", jed.getID());
                        jedresult = accJournalEntryobj.updateJournalEntryDetails(jedjson);
                    }
                }

                String rowtaxid = jobj.getString("prtaxid");
                if (!StringUtil.isNullOrEmpty(rowtaxid)) {
                    boolean taxExist = false;
                    KwlReturnObject txresult = accountingHandlerDAOobj.getObject(Tax.class.getName(), rowtaxid); // (Tax)session.get(Tax.class, taxid);
                    Tax rowtax = (Tax) txresult.getEntityList().get(0);
                    if (rowtax == null) {
                        throw new AccountingException(messageSource.getMessage("acc.so.taxcode", null, RequestContextUtils.getLocale(request)));
                    } else {
                        row.setTax(rowtax);
                        double rowtaxamount=StringUtil.getDouble(jobj.getString("taxamount"));
                        row.setRowTaxAmount(rowtaxamount);
                        taxamount += rowtaxamount;
                        if (taxamount > 0) {
                            if (jeDetails != null && !jeDetails.isEmpty()) {
                                Iterator itr = jeDetails.iterator();
                                while (itr.hasNext()) {
                                    jed = (JournalEntryDetail) itr.next();
                                    if (jed.getAccount() == rowtax.getAccount()) {
                                        jedjson = new JSONObject();
                                        jedjson.put("jedid", jed.getID());
                                        jedjson.put("amount", jed.getAmount() + rowtaxamount);
                                        jedresult = accJournalEntryobj.updateJournalEntryDetails(jedjson);
                                        jed = (JournalEntryDetail) jedresult.getEntityList().get(0);
                                        taxExist = true;
                                        break;
                                    }
                                }
                            }
                            if (!taxExist) {
                                jedjson = new JSONObject();
                                jedjson = new JSONObject();
                                jedjson.put("srno", jeDetails.size() + 1);
                                jedjson.put(Constants.companyKey, company.getCompanyID());
                                jedjson.put("amount", rowtaxamount);
                                jedjson.put("accountid", rowtax.getAccount().getID());
                                jedjson.put("debit", true);
                                jedjson.put("jeid", jeid);
                                jedresult = accJournalEntryobj.addJournalEntryDetails(jedjson);
                                jed = (JournalEntryDetail) jedresult.getEntityList().get(0);
                                jeDetails.add(jed);

                            }
                        }
                    }
                }
                rows.add(row);
            }
        }catch (JSONException ex) {
            throw ServiceException.FAILURE("saveGoodsReceiptRows : " + ex.getMessage(), ex);
        }catch (Exception ex){
            throw ServiceException.FAILURE("saveGoodsReceiptRows : " + ex.getMessage(), ex);
        } finally {
            ll.add(new double[]{totaldiscount, totalamount, taxamount});
            ll.add(rows);
            ll.add(prodList);
        }
        return ll;
    }
    
    private List saveInvoiceRows(HttpServletRequest request, String invoiceDetails, String jeid, Company company, HashSet jeDetails, String currencyid, Double externalCurrencyRate, Date creationDate) throws ServiceException, SessionExpiredException, AccountingException, UnsupportedEncodingException{
        HashSet hs = new HashSet(), rows = new HashSet();
        ArrayList<String> prodList = new ArrayList<String>();
        double totaldiscount = 0, totalamount = 0,taxamount=0;
        List ll = new ArrayList();
        try {
//            DateFormat df = authHandler.getDateFormatter(request);
            HashMap<String, Object> GlobalParams = AccountingManager.getGlobalParams(request);
            String companyid = company.getCompanyID();
            boolean inCash = false;//Boolean.parseBoolean(request.getParameter("incash"));
            KwlReturnObject cap = accountingHandlerDAOobj.getObject(CompanyAccountPreferences.class.getName(), companyid);
            CompanyAccountPreferences preferences = (CompanyAccountPreferences) cap.getEntityList().get(0);
                
            boolean isFixedAsset = false;//(!StringUtil.isNullOrEmpty(request.getParameter("isFixedAsset")))?Boolean.parseBoolean(request.getParameter("isFixedAsset")):false;
            boolean isLinkedWithDO = false;
            boolean partialInv =  false;//(request.getParameter("partialinv") != null)? Boolean.parseBoolean(request.getParameter("partialinv")) : false;
            
            JSONArray jArr = new JSONArray(invoiceDetails);
                for (int i = 0; i < jArr.length(); i++) {
                    
                JSONObject jobj = jArr.getJSONObject(i);
                InvoiceDetail row = new InvoiceDetail();
                JournalEntryDetail jed;
                row.setSrno(i+1);
                row.setWasRowTaxFieldEditable(true);// this field has been added after making row tax field editable its value will be set always true from its implementation. i.e from 28-jan-2014.REASON -  when Row Tax Amount field was not editable then tax calculation was taking place according to tax percent, as selected From Tax combo in JS Side.
                if(!StringUtil.isNullOrEmpty(jobj.optString("desc"))){
                   
                        row.setDescription(StringUtil.DecodeText(jobj.optString("desc")));
                    
                }    
                
                KwlReturnObject prdresult = accountingHandlerDAOobj.getObject(Product.class.getName(),jobj.getString("productid"));
                Product product = (Product) prdresult.getEntityList().get(0);
                
                double profitLossAmt = 0d;
                
                if(isFixedAsset){
                    profitLossAmt = jobj.optDouble("profitLossAmt", 0);
                    if(profitLossAmt!=0){
                        JSONObject jedjson = new JSONObject();
                        jedjson.put("srno", jeDetails.size()+1);
                        jedjson.put(Constants.companyKey, companyid);
                        jedjson.put("amount", (profitLossAmt<0)?(-1*profitLossAmt):profitLossAmt);
                        jedjson.put("accountid", product.getSellAssetGLAccount().getID());
                        jedjson.put("debit", (profitLossAmt<0)?true:false);
                        jedjson.put("jeid", jeid);
                        KwlReturnObject jedresult = accJournalEntryobj.addJournalEntryDetails(jedjson);
                        jed = (JournalEntryDetail) jedresult.getEntityList().get(0);
                        jeDetails.add(jed);
                    }
                }
                
                if (preferences.isInventoryAccountingIntegration() && (!preferences.isWithInvUpdate()||inCash) && preferences.isUpdateInvLevel()) {  
                    if(!StringUtil.isNullOrEmpty(jobj.optString("invstore"))){                    
                        row.setInvstoreid(jobj.optString("invstore"));
                    }else{
                        row.setInvstoreid("");
                    }
                    
                    if(!StringUtil.isNullOrEmpty(jobj.optString("invlocation"))){                    
                        row.setInvlocid(jobj.optString("invlocation"));
                    }else{
                        row.setInvlocid("");
                    }
                }  
                  
                //                SalesOrderDetail rd = (SalesOrderDetail) session.get(SalesOrderDetail.class, jobj.getString("rowid"));\
                String linkMode="";//request.getParameter("fromLinkCombo");
                boolean updateInventoryFlag = ( preferences.isWithInvUpdate()) ? false : true;
                
                double partamount = (jobj.has("partamount")&&(!StringUtil.isNullOrEmpty(jobj.get("partamount").toString())))? jobj.getDouble("partamount") : 0.0;
                row.setPartamount(partamount);
                
//                if (!StringUtil.isNullOrEmpty(linkMode)) {
//                    if (linkMode.equalsIgnoreCase("Sales Order")) {
//                       KwlReturnObject rdresult = accountingHandlerDAOobj.getObject(SalesOrderDetail.class.getName(),(StringUtil.isNullOrEmpty(jobj.getString("linkto")))?jobj.getString("rowid"):jobj.getString("savedrowid"));
//                       SalesOrderDetail rd = (SalesOrderDetail) rdresult.getEntityList().get(0);
//                       row.setSalesorderdetail(rd);
//                       
//                       if(updateInventoryFlag && partialInv){
//                            double sodAmount = rd.getQuantity() * 100;
//                            
//                            double invDetailAmount = getInvoiceDetailAMount(rd);
//                            invDetailAmount +=  jobj.getDouble("quantity") * partamount;
//                            if(sodAmount > invDetailAmount) {
//                                updateInventoryFlag = false;
//                            }
//                        }
//                    }
//                    else if(linkMode.equalsIgnoreCase("Delivery Order")){
//                       isLinkedWithDO = true;
//                       KwlReturnObject rdresult = accountingHandlerDAOobj.getObject(DeliveryOrderDetail.class.getName(),(StringUtil.isNullOrEmpty(jobj.getString("linkto")))?jobj.getString("rowid"):jobj.getString("savedrowid"));
//                       DeliveryOrderDetail deliveryOrderDetail = (DeliveryOrderDetail) rdresult.getEntityList().get(0);
//                       row.setDeliveryOrderDetail(deliveryOrderDetail);                                                
//                    }else if(linkMode.equalsIgnoreCase("Customer Quotation")){
//                       KwlReturnObject rdresult = accountingHandlerDAOobj.getObject(QuotationDetail.class.getName(),(StringUtil.isNullOrEmpty(jobj.getString("linkto")))?jobj.getString("rowid"):jobj.getString("savedrowid"));
//                       QuotationDetail quotationDetail = (QuotationDetail) rdresult.getEntityList().get(0);
//                       row.setQuotationDetail(quotationDetail);                
//                    }
//                }                                                           
                row.setCompany(company);
    //            row.setInvoice(invoice);
    //            row.setRate(CompanyHandler.getBaseToCurrencyAmount(session,request,jobj.getDouble("rate"),currencyid,AuthHandler.getDateFormatter(request).parse(request.getParameter("billdate"))));
//                KwlReturnObject bAmt = accCurrencyDAOobj.getBaseToCurrencyAmount(GlobalParams, jobj.getDouble("rate"), currencyid, df.parse(request.getParameter("billdate")), externalCurrencyRate);
                row.setRate(jobj.getDouble("rate"));
//                KwlReturnObject prdresult = accountingHandlerDAOobj.getObject(Product.class.getName(),jobj.getString("productid"));
//                Product product = (Product) prdresult.getEntityList().get(0);
                //(Product)session.get(Product.class, jobj.getString("productid"));
                
                prodList.add(jobj.getString("productid"));     
                
                JSONObject inventoryjson = new JSONObject();
                inventoryjson.put("productid", jobj.getString("productid"));
//                isWithInvUpdate = true , Update from DO
//                isWithInvUpdate = false , Update from INVOICE
                inventoryjson.put("quantity", jobj.getDouble("quantity"));
                if(jobj.has("uomid")){
                    inventoryjson.put("uomid", jobj.getString("uomid"));                    
                }
                if(jobj.has("baseuomquantity") && jobj.get("baseuomquantity")!= null) {
                    inventoryjson.put("baseuomquantity", updateInventoryFlag ? jobj.getDouble("baseuomquantity") : 0 );
                    inventoryjson.put("actquantity", updateInventoryFlag ? 0 : jobj.getDouble("baseuomquantity"));
                    inventoryjson.put("baseuomrate", jobj.getDouble("baseuomrate"));
                } else {
                    inventoryjson.put("baseuomquantity", updateInventoryFlag ? jobj.getDouble("quantity") : 0 );
                    inventoryjson.put("actquantity", updateInventoryFlag ? 0 : jobj.getDouble("quantity"));
                    inventoryjson.put("baseuomrate", jobj.getDouble("baseuomrate"));
                }
                inventoryjson.put("invrecord", updateInventoryFlag ? true : false );
                if(jobj.has("rateIncludingGst")) {
                    row.setRateincludegst(jobj.optDouble("rateIncludingGst",0));
                }
                inventoryjson.put("description", jobj.getString("desc"));
                inventoryjson.put("carryin", false);
                inventoryjson.put("defective", false);
                inventoryjson.put("newinventory", false);
                inventoryjson.put(Constants.companyKey, companyid);
                inventoryjson.put("updatedate", creationDate);
                KwlReturnObject invresult = accProductObj.addInventory(inventoryjson);
                Inventory inventory = (Inventory) invresult.getEntityList().get(0);

                row.setInventory(inventory);
                
                double rowAmount = authHandler.round(row.getRate() * jobj.getDouble("quantity"), companyid);
                double rowdiscount = 0;
                if(partamount != 0.0){
                    rowAmount = rowAmount * (partamount/100);
                }
                totalamount += rowAmount;
                Discount discount = null;
                double disc = jobj.getDouble("prdiscount");
                int rowdisc = jobj.getInt("discountispercent");
                if (disc != 0.0) {
    //                discount=new Discount();
    //                discount.setDiscount(disc);
    //                discount.setOriginalAmount(row.getRate()*row.getInventory().getQuantity());
    //                discount.setInPercent(true);
    //                discount.setCompany(company);
                    JSONObject discjson = new JSONObject();
                    discjson.put("discount", disc);
                    discjson.put("inpercent", (rowdisc == 1)? true : false);
                    discjson.put("originalamount", rowAmount);
                    discjson.put(Constants.companyKey, companyid);
                    KwlReturnObject dscresult = accDiscountobj.addDiscount(discjson);
                    discount = (Discount) dscresult.getEntityList().get(0);
                    row.setDiscount(discount);
                    rowdiscount = discount.getDiscountValue();
                    totaldiscount += rowdiscount;
                }
                
              //  if (hs.add(product.getSalesAccount())) 
                {
    //                jed=new JournalEntryDetail();
    //                jed.setCompany(company);
    //                jed.setAccount(product.getSalesAccount());
    //                jed.setAmount(row.getRate()*inventory.getQuantity());
    //                jed.setDebit(false);
                    JSONObject jedjson = new JSONObject();
                    jedjson.put("srno", jeDetails.size()+1);
                    jedjson.put(Constants.companyKey, companyid);
                    if(isFixedAsset){
                        jedjson.put("amount", (profitLossAmt<0)?(rowAmount+(-1*profitLossAmt)):(rowAmount-profitLossAmt));
                    }else{
                        jedjson.put("amount", rowAmount);
                    }
                    jedjson.put("accountid", product.getSalesAccount().getID());
                    jedjson.put("debit", false);
                    jedjson.put("jeid", jeid);
                    KwlReturnObject jedresult = accJournalEntryobj.addJournalEntryDetails(jedjson);
                    jed = (JournalEntryDetail) jedresult.getEntityList().get(0);
                    jeDetails.add(jed);
                    
                    row.setDeferredJeDetailId(jed.getID());
                    
                    // Add Custom fields details 
                    if(!StringUtil.isNullOrEmpty(jobj.optString("customfield", ""))){
                        JSONArray jcustomarray = new JSONArray(jobj.optString("customfield", "[]"));
                        HashMap<String, Object> customrequestParams = new HashMap<String, Object>();
                        customrequestParams.put("customarray", jcustomarray);
                        customrequestParams.put("modulename", Constants.Acc_JEDetail_modulename);
                        customrequestParams.put("moduleprimarykey", Constants.Acc_JEDetailId);// Constants.Acc_JEDetail_recdetailId
                        customrequestParams.put("modulerecid", jed.getID());
                        customrequestParams.put("recdetailId", row.getInventory().getID());
                        customrequestParams.put(Constants.moduleid, Constants.Acc_Invoice_ModuleId);
                        customrequestParams.put(Constants.companyKey, companyid);
                        customrequestParams.put("customdataclasspath", Constants.Acc_BillInvDetail_custom_data_classpath);
                        KwlReturnObject customDataresult = fieldDataManagercntrl.setCustomData(customrequestParams);
                        if (customDataresult != null && customDataresult.getEntityList().size() > 0) {
                            jedjson.put("accjedetailcustomdata", jed.getID());
                            jedjson.put("jedid", jed.getID());
                            jedresult = accJournalEntryobj.updateJournalEntryDetails(jedjson);
                        }
                    }
                    // Add Custom fields details for Product
                    if(!StringUtil.isNullOrEmpty(jobj.optString("productcustomfield", ""))){
                        JSONArray jcustomarray = new JSONArray(jobj.optString("productcustomfield", "[]"));
                        HashMap<String, Object> customrequestParams = new HashMap<String, Object>();
                        customrequestParams.put("customarray", jcustomarray);
                        customrequestParams.put("modulename", Constants.Acc_JEDetail_modulename);
                        customrequestParams.put("moduleprimarykey", Constants.Acc_JEDetailId);
                        customrequestParams.put("modulerecid", jed.getID());
                        customrequestParams.put(Constants.moduleid, Constants.Acc_Invoice_ModuleId);
                        customrequestParams.put("recdetailId", inventory.getID());
                        customrequestParams.put("productId", row.getInventory().getProduct().getID());
                        customrequestParams.put(Constants.companyKey, companyid);
                        customrequestParams.put("customdataclasspath", Constants.Acc_JEDetail_Productcustom_data_classpath);
                        KwlReturnObject customDataresult = fieldDataManagercntrl.setCustomData(customrequestParams);
                        if (customDataresult != null && customDataresult.getEntityList().size() > 0) {
                            jedjson.put("accjedetailproductcustomdataref", jed.getID());
                            jedjson.put("jedid", jed.getID());
                            jedresult = accJournalEntryobj.updateJournalEntryDetails(jedjson);
                        }
                    }
                    
                } 

                String rowtaxid = jobj.getString("prtaxid");
                if (!StringUtil.isNullOrEmpty(rowtaxid)) {
                    boolean taxExist=false;
                    KwlReturnObject txresult = accountingHandlerDAOobj.getObject(Tax.class.getName(),rowtaxid); // (Tax)session.get(Tax.class, taxid);
                    Tax rowtax = (Tax) txresult.getEntityList().get(0);
                    if (rowtax == null)
                        throw new AccountingException(messageSource.getMessage("acc.so.taxcode", null, RequestContextUtils.getLocale(request)));
                    else{
                        row.setTax(rowtax);
//                        int rowTaxper = jobj.getInt("taxpercent");
                        double rowtaxamount=StringUtil.getDouble(jobj.getString("taxamount"));//rowtaxamount=(rowAmount - rowdiscount) * rowTaxper/100;
                        rowtaxamount=authHandler.round(rowtaxamount, companyid);
//                        bAmt = accCurrencyDAOobj.getBaseToCurrencyAmount(GlobalParams, rowtaxamount, currencyid, df.parse(request.getParameter("billdate")), externalCurrencyRate);
//                        rowtaxamount= (Double) bAmt.getEntityList().get(0);
                        row.setRowTaxAmount(rowtaxamount);
                        taxamount += rowtaxamount;
                        if (taxamount > 0) {
                            Iterator itr = jeDetails.iterator();
                            while (itr.hasNext()) {
                                jed = (JournalEntryDetail) itr.next();
                                if (jed.getAccount() == rowtax.getAccount()) {
//                                          jed.setAmount(jed.getAmount() + row.getRate() * inventory.getQuantity());
                                    JSONObject jedjson = new JSONObject();
                                    jedjson.put("jedid", jed.getID());
                                    jedjson.put("amount",jed.getAmount() +rowtaxamount );
                                    KwlReturnObject jedresult = accJournalEntryobj.updateJournalEntryDetails(jedjson);
                                    jed = (JournalEntryDetail) jedresult.getEntityList().get(0);
                                    taxExist=true;
                                    break;
                                }
                            }
                            if(!taxExist){
                                JSONObject jedjson = new JSONObject();
                                jedjson = new JSONObject();
                                jedjson.put("srno", jeDetails.size()+1);
                                jedjson.put(Constants.companyKey, companyid);
                                jedjson.put("amount", rowtaxamount);
                                jedjson.put("accountid", rowtax.getAccount().getID());
                                jedjson.put("debit", false);
                                jedjson.put("jeid", jeid);
                                KwlReturnObject jedresult = accJournalEntryobj.addJournalEntryDetails(jedjson);
                                jed = (JournalEntryDetail) jedresult.getEntityList().get(0);
                                jeDetails.add(jed);

                            }
                        }
                    }
                }
                  
                rows.add(row);
            }
        } catch (JSONException ex) {
            throw ServiceException.FAILURE("saveInvoiceRows : "+ex.getMessage(), ex);
        }
//        invoice.setRows(rows);
        ll.add(new double[]{totaldiscount, totalamount,taxamount});
        ll.add(rows);
        ll.add(prodList);
        return ll;
    }
    
    private String getInvoiceDetails(String productid, double transactionAmount, String currencySymbol, double currencyrate,String productTax,String productTaxamount) throws JSONException, ServiceException {
        JSONArray returnArray = new JSONArray();
        JSONObject jobj = new JSONObject();

        KwlReturnObject prodObj = accountingHandlerDAOobj.getObject(Product.class.getName(), productid);
        Product product = (Product) prodObj.getEntityList().get(0);

        jobj.put("rowid", "");
        jobj.put("productname", "");
        jobj.put(Constants.billid, "");
        jobj.put("billno", "");
        jobj.put("Cust_billno", "");
        jobj.put("productid", productid);
        jobj.put("desc", product.getName());
        jobj.put("quantity", 1);
        jobj.put("baseuomquantity", 1);
        jobj.put("uomname", "");
        jobj.put("baseuomname", "");
        jobj.put("uomid", (product.getUnitOfMeasure()!=null)?product.getUnitOfMeasure().getID():"");
        jobj.put("baseuomrate", 1);
        jobj.put("copyquantity", "");
        jobj.put("rate", transactionAmount);
        jobj.put("rateIncludingGst", transactionAmount);
        jobj.put("isRateIncludingGstEnabled", 0);
        jobj.put("rateinbase", "");
        jobj.put("partamount", "0");
        jobj.put("discamount", "");
        jobj.put("discount", "");
        jobj.put("discountispercent", "1");
        jobj.put("prdiscount", "0");
        jobj.put("invstore", "");
        jobj.put("invlocation", "");
        jobj.put("prtaxid", productTax);
        jobj.put("prtaxname", "");
        jobj.put("prtaxpercent", "0");
        jobj.put("taxamount", productTaxamount);
        jobj.put("amount", transactionAmount);
        jobj.put("amountwithtax", "0");
        jobj.put("amountwithouttax", transactionAmount);
        jobj.put("taxpercent", "");
        jobj.put("remark", "");
        jobj.put("transectionno", "");
        jobj.put("remquantity", "");
        jobj.put("remainingquantity", "");
        jobj.put("oldcurrencyrate", "1");
        jobj.put("currencysymbol", currencySymbol);
        jobj.put("currencyrate", currencyrate + "");
        jobj.put("externalcurrencyrate", "");
        jobj.put("orignalamount", "");
        jobj.put("typeid", "0");
        jobj.put("isNewRecord", "1");
        jobj.put("producttype", "");
        jobj.put("permit", "");
        jobj.put("linkto", "");
        jobj.put("linkid", "");
        jobj.put("linktype", "");
        jobj.put("savedrowid", "");
        jobj.put("changedQuantity", "-1");
        jobj.put("approvedcost", "");
        jobj.put("approverremark", "");
        jobj.put("customfield", "[{}]");
        jobj.put("gridRemark", "");
        jobj.put("productcustomfield", "[{}]");
        jobj.put("accountId", "");
        jobj.put("salesAccountId", "");
        jobj.put("discountAccountId", "");
        jobj.put("rowTaxAmount", "");
        jobj.put("type", "");
        jobj.put("shelfLocation", "");
        jobj.put("supplierpartnumber", "");
        jobj.put("copybaseuomrate", "");
        jobj.put("modified", true);

        returnArray.put(jobj);

        return returnArray.toString();

    }
    private String getInvoiceDetailsMultipleProducts(String productids, double transactionAmount, String currencySymbol, double currencyrate,String productTaxs,String productTaxamounts,String productAmounts, String productDesc) throws JSONException, ServiceException {
        JSONArray returnArray = new JSONArray();
        String []productIdArray=productids.split("~");
        String productid="";
        String []productAmountArray=productAmounts.split("~");
        String []productTaxArray=productTaxs.split("~");
        String []productTaxAmountArray=productTaxamounts.split("~");
        String []productDescArray=productDesc.split("~");
        for (int i = 0; i < productIdArray.length; i++) {
            if(StringUtil.isNullOrEmpty(productAmountArray[i])||(!StringUtil.isNullOrEmpty(productAmountArray[i])&&productAmountArray[i].equals("0.0"))){
                continue;
            }
            JSONObject jobj = new JSONObject();
            productid = productIdArray[i];
            KwlReturnObject prodObj = accountingHandlerDAOobj.getObject(Product.class.getName(), productid);
            Product product = (Product) prodObj.getEntityList().get(0);
    
            jobj.put("rowid", "");
            jobj.put("productname", "");
            jobj.put(Constants.billid, "");
            jobj.put("billno", "");
            jobj.put("Cust_billno", "");
            jobj.put("productid", productid);
            jobj.put("desc", (productDescArray[i].equals("") || productDescArray[i].equals("-"))?product.getName():productDescArray[i]);
            jobj.put("quantity", 1);
            jobj.put("baseuomquantity", 1);
            jobj.put("uomname", "");
            jobj.put("baseuomname", "");
            jobj.put("uomid", (product.getUnitOfMeasure() != null) ? product.getUnitOfMeasure().getID() : "");
            jobj.put("baseuomrate", 1);
            jobj.put("copyquantity", "");
            jobj.put("rate", !StringUtil.isNullOrEmpty(productAmountArray[i])?Double.parseDouble(productAmountArray[i]):0.0);
            jobj.put("rateIncludingGst", !StringUtil.isNullOrEmpty(productAmountArray[i])?Double.parseDouble(productAmountArray[i]):0.0);
            jobj.put("isRateIncludingGstEnabled", 0);
            jobj.put("rateinbase", "");
            jobj.put("partamount", "0");
            jobj.put("discamount", "");
            jobj.put("discount", "");
            jobj.put("discountispercent", "1");
            jobj.put("prdiscount", "0");
            jobj.put("invstore", "");
            jobj.put("invlocation", "");
            jobj.put("prtaxid", productTaxArray[i]!=null?productTaxArray[i]:"");
            jobj.put("prtaxname", "");
            jobj.put("prtaxpercent", "0");
            jobj.put("taxamount", !StringUtil.isNullOrEmpty(productTaxAmountArray[i])?Double.parseDouble(productTaxAmountArray[i]):0.0);
            jobj.put("amount", !StringUtil.isNullOrEmpty(productAmountArray[i])?Double.parseDouble(productAmountArray[i]):0.0);
            jobj.put("amountwithtax", "0");
            jobj.put("amountwithouttax", !StringUtil.isNullOrEmpty(productAmountArray[i])?Double.parseDouble(productAmountArray[i]):0.0);
            jobj.put("taxpercent", "");
            jobj.put("remark", "");
            jobj.put("transectionno", "");
            jobj.put("remquantity", "");
            jobj.put("remainingquantity", "");
            jobj.put("oldcurrencyrate", "1");
            jobj.put("currencysymbol", currencySymbol);
            jobj.put("currencyrate", currencyrate + "");
            jobj.put("externalcurrencyrate", "");
            jobj.put("orignalamount", "");
            jobj.put("typeid", "0");
            jobj.put("isNewRecord", "1");
            jobj.put("producttype", "");
            jobj.put("permit", "");
            jobj.put("linkto", "");
            jobj.put("linkid", "");
            jobj.put("linktype", "");
            jobj.put("savedrowid", "");
            jobj.put("changedQuantity", "-1");
            jobj.put("approvedcost", "");
            jobj.put("approverremark", "");
            jobj.put("customfield", "[{}]");
            jobj.put("gridRemark", "");
            jobj.put("productcustomfield", "[{}]");
            jobj.put("accountId", "");
            jobj.put("salesAccountId", "");
            jobj.put("discountAccountId", "");
            jobj.put("rowTaxAmount", "");
            jobj.put("type", "");
            jobj.put("shelfLocation", "");
            jobj.put("supplierpartnumber", "");
            jobj.put("copybaseuomrate", "");
            jobj.put("modified", true);

            returnArray.put(jobj);
        }
        return returnArray.toString();

    }
    
    private void saveDebitNote(HttpServletRequest request, HashMap<String,Object> noteMap) throws SessionExpiredException, ServiceException, AccountingException{
        try {
            String entryNumber = (String) noteMap.get("entryNumber");
            Date creationDate = (Date) noteMap.get("creationDate");
            String currencyid = (String) noteMap.get(Constants.currencyKey);
            double externalCurrencyRate = (Double) noteMap.get("externalCurrencyRate");
            String accountid = (String) noteMap.get("accountid");
            String vendor_accountid = (String) noteMap.get("vendor_accountid");
            String vendorid = (String) noteMap.get("vendorid");
            String contractNo = (String) noteMap.get("contractNo");
            String buyerName = (String) noteMap.get("buyerName");
            double invoicedQuantity = (Double) noteMap.get("invoicedQuantity");
            double commissionRate = (Double) noteMap.get("commissionRate");
            String vesselName = (String) noteMap.get("vesselName");
            double cnamount = (Double) noteMap.get("cnamount");
            HashMap<String, FieldParams> debitNoteFieldParamsMap = (HashMap<String, FieldParams>) noteMap.get("debitNoteFieldParamsMap");
            
            DebitNote debitnote = null;
            KwlReturnObject result;
            List ll = new ArrayList();
            String oldjeid="";
            String auditMsg="",auditID="";
            
            String companyid = sessionHandlerImpl.getCompanyid(request);
            String createdby= sessionHandlerImpl.getUserid(request);
            String modifiedby= sessionHandlerImpl.getUserid(request);
            long createdon= System.currentTimeMillis();
            long updatedon = createdon;
            boolean otherwise = true;
            String sequenceformat="NA";
            
            HashMap<String,Object> GlobalParams = AccountingManager.getGlobalParams(request);
            
            KwlReturnObject capresult = accountingHandlerDAOobj.getObject(CompanyAccountPreferences.class.getName(), companyid);
            CompanyAccountPreferences preferences = (CompanyAccountPreferences) capresult.getEntityList().get(0);
            
            KwlReturnObject cmpresult = accountingHandlerDAOobj.getObject(Company.class.getName(), companyid);
            Company company = (Company) cmpresult.getEntityList().get(0);
            
            KwlReturnObject curresult = accountingHandlerDAOobj.getObject(KWLCurrency.class.getName(), currencyid);
            KWLCurrency kwlcurrency = (KWLCurrency) curresult.getEntityList().get(0);
            
            
            HashMap<String,Object> dnhm = new HashMap<String,Object>();
            
            result = accDebitNoteobj.getDNFromNoteNo(entryNumber, companyid);
            
            int count = result.getRecordTotalCount();
            if (count > 0) {
                if (sequenceformat.equals("NA")) {
                    throw new AccountingException(messageSource.getMessage("acc.field.Debitnotenumber", null, RequestContextUtils.getLocale(request)) + entryNumber + messageSource.getMessage("acc.field.alreadyexists.", null, RequestContextUtils.getLocale(request)));
                }
            }
            
            String nextDNAutoNo = "";
            String nextAutoNoInt = "";
            
            dnhm.put("entrynumber", entryNumber);
            dnhm.put("autogenerated", nextDNAutoNo.equals(entryNumber));
            dnhm.put("oldRecord", false);
            
            Long seqNumber = null;
            result = accDebitNoteobj.getDNSequenceNo(companyid, creationDate);
            List li = result.getEntityList();
            if (!li.isEmpty()) {
                seqNumber = (Long) li.get(0);
            }
            dnhm.put("sequence", seqNumber.intValue());
            
            dnhm.put("memo", "Debit Note Created by Import");
            dnhm.put(Constants.companyKey, companyid);
            dnhm.put(Constants.currencyKey, currencyid);
            dnhm.put("createdby",createdby);
            dnhm.put("modifiedby",modifiedby);
            dnhm.put("createdon",createdon);
            dnhm.put("updatedon",updatedon);
            dnhm.put("creationDate",creationDate);
            
            String jeentryNumber = "";
            String jeIntegerPart = "";
            String jeDatePrefix = "";
            String jeDateAfterPrefix = "";
            String jeDateSuffix = "";
            String jeSeqFormatId = "";
            boolean jeautogenflag = false;
            
            synchronized (this) {
                HashMap<String, Object> JEFormatParams = new HashMap<String, Object>();
                JEFormatParams.put(Constants.moduleid, Constants.Acc_GENERAL_LEDGER_ModuleId);
                JEFormatParams.put("modulename", "autojournalentry");
                JEFormatParams.put(Constants.companyKey, companyid);
                JEFormatParams.put("isdefaultFormat", true);

                KwlReturnObject kwlObj = accCompanyPreferencesObj.getSequenceFormat(JEFormatParams);
                SequenceFormat format = (SequenceFormat) kwlObj.getEntityList().get(0);
                Map<String, Object> seqNumberMap = new HashMap<String, Object>();
                seqNumberMap = accCompanyPreferencesObj.getNextAutoNumber_Modified(companyid, StaticValues.AUTONUM_JOURNALENTRY, format.getID(), false, creationDate);
                jeentryNumber = (String)seqNumberMap.get(Constants.AUTO_ENTRYNUMBER);  //next auto generated number
                jeIntegerPart = (String)seqNumberMap.get(Constants.SEQNUMBER);//integer Part
                jeDatePrefix = (String)seqNumberMap.get(Constants.DATEPREFIX);//Date Prefix Part
                jeDateAfterPrefix = (String)seqNumberMap.get(Constants.DATEAFTERPREFIX);//Date After Prefix Part
                jeDateSuffix = (String)seqNumberMap.get(Constants.DATESUFFIX);//Date Suffix Part
                jeSeqFormatId = format.getID();
                jeautogenflag = true;
            }
            
            Map<String,Object> jeDataMap = AccountingManager.getGlobalParams(request);
            jeDataMap.put("entrynumber", jeentryNumber);
            jeDataMap.put("autogenerated", jeautogenflag);
            jeDataMap.put(Constants.SEQFORMAT,jeSeqFormatId );
            jeDataMap.put(Constants.SEQNUMBER,jeIntegerPart);
            jeDataMap.put(Constants.DATEPREFIX, jeDatePrefix);
            jeDataMap.put(Constants.DATEAFTERPREFIX, jeDateAfterPrefix);
            jeDataMap.put(Constants.DATESUFFIX, jeDateSuffix);
            jeDataMap.put("entrydate", creationDate);
            jeDataMap.put(Constants.companyKey, company.getCompanyID());
            jeDataMap.put("memo", "Debit Note Created by Import");
            jeDataMap.put(Constants.currencyKey, currencyid);
            
            HashSet<JournalEntryDetail> jedetails = new HashSet();
            KwlReturnObject jeresult = accJournalEntryobj.saveJournalEntry(jeDataMap);//Create Journal entry without JEdetails
            JournalEntry journalEntry = (JournalEntry) jeresult.getEntityList().get(0);
            String jeid = journalEntry.getID();
            jeDataMap.put("jeid", jeid);
            dnhm.put("journalentryid", jeid);
            
            List DNlist = new ArrayList();
            double dnamount = cnamount;
            double dnamountdue = 0.0;
            
            int cntype = 2;
            
            dnhm.put("vendorid", vendorid);
            dnhm.put("otherwise", true);
            dnhm.put("openflag", true);
            
            dnamountdue = cnamount;
            dnhm.put("dnamount", dnamount);
            dnhm.put("dnamountdue", dnamountdue);
            dnhm.put("cntype", 2);
            
            // Create Details Json Array
        
            String details = getNoteDetails(vendor_accountid, cnamount).toString();
            
            DNlist = saveDebitNoteRowsOW(GlobalParams, request, company, kwlcurrency, journalEntry, preferences, externalCurrencyRate,details);
            
            Double totalAmount = (Double) DNlist.get(0);
            Double discAccAmount = (Double) DNlist.get(1);
            HashSet<DebitNoteDetail> dndetails = (HashSet<DebitNoteDetail>) DNlist.get(2);
            HashSet<DebitNoteTaxEntry> dnTaxEntryDetails = (HashSet<DebitNoteTaxEntry>) DNlist.get(5);
            jedetails = (HashSet<JournalEntryDetail>) DNlist.get(3);
//            reloadInventory = (Boolean) DNlist.get(4);

            double termTotalAmount = 0;
            HashMap<String, Double> termAcc = new HashMap<String, Double>();
            String dnTerms = request.getParameter("invoicetermsmap");
            if (!StringUtil.isNullOrEmpty(dnTerms)) {
                JSONArray termsArr = new JSONArray(dnTerms);
                for (int cnt = 0; cnt < termsArr.length(); cnt++) {
                    double termamount = termsArr.getJSONObject(cnt).getDouble("termamount");
                    termTotalAmount += termamount;
                    if (termAcc.containsKey(termsArr.getJSONObject(cnt).getString("glaccount"))) {
                        double tempAmount = termAcc.get(termsArr.getJSONObject(cnt).getString("glaccount"));
                        termAcc.put(termsArr.getJSONObject(cnt).getString("glaccount"), termamount + tempAmount);
                    } else {
                        termAcc.put(termsArr.getJSONObject(cnt).getString("glaccount"), termamount);
                    }
                }
            }
            totalAmount += termTotalAmount;
            
            JSONObject jedjson = new JSONObject();
            jedjson.put("srno", jedetails.size()+1);
            jedjson.put(Constants.companyKey, company.getCompanyID());
            jedjson.put("amount", totalAmount);
            jedjson.put("accountid", accountid);
            jedjson.put("debit", true);
            jedjson.put("jeid", jeid);
            KwlReturnObject jedresult = accJournalEntryobj.addJournalEntryDetails(jedjson);
            JournalEntryDetail jed = (JournalEntryDetail) jedresult.getEntityList().get(0);
            jedetails.add(jed);
            dnhm.put("vendorentry", jed.getID());
            if (termAcc.size() > 0) {
                for (Map.Entry<String, Double> entry : termAcc.entrySet()) {
                    jedjson = new JSONObject();
                    jedjson.put("srno", jedetails.size() + 1);
                    jedjson.put(Constants.companyKey, companyid);
                    jedjson.put("amount", entry.getValue() > 0 ? entry.getValue() : (entry.getValue() * (-1)));
                    jedjson.put("accountid", entry.getKey());
                    jedjson.put("debit", entry.getValue() > 0 ? false : true);
                    jedjson.put("jeid", jeid);
                    jedresult = accJournalEntryobj.addJournalEntryDetails(jedjson);
                    jed = (JournalEntryDetail) jedresult.getEntityList().get(0);
                    jedetails.add(jed);
                }
            }
            
//            jeDataMap.put("jedetails", jedetails);
//            jeDataMap.put("externalCurrencyRate", externalCurrencyRate);
//            jeresult = accJournalEntryobj.saveJournalEntry(jeDataMap);//Add Journal entry details
//            journalEntry = (JournalEntry) jeresult.getEntityList().get(0);
            dnhm.put("approvestatuslevel", 11);
            result = accDebitNoteobj.addDebitNote(dnhm);
            auditID="90";
            auditMsg="added";
            
            String customfield = getCustomFieldsForImport(debitNoteFieldParamsMap, contractNo, vesselName, buyerName,invoicedQuantity,commissionRate, Constants.Acc_Debit_Note_ModuleId, companyid); 
            
            debitnote = (DebitNote)result.getEntityList().get(0);
            jeDataMap.put("transactionId", debitnote.getID());// Adding DN ID as a transactionId in JournalEntry
            jeDataMap.put("transactionModuleid", Constants.Acc_Debit_Note_ModuleId);
            jeDataMap.put("jedetails", jedetails);
            jeDataMap.put("externalCurrencyRate", externalCurrencyRate);
            jeresult = accJournalEntryobj.saveJournalEntry(jeDataMap);//Add Journal entry details
            journalEntry = (JournalEntry) jeresult.getEntityList().get(0);
            
            if (!StringUtil.isNullOrEmpty(customfield)) {
                JSONArray jcustomarray = new JSONArray(customfield);
                HashMap<String, Object> customrequestParams = new HashMap<String, Object>();
                customrequestParams.put("customarray", jcustomarray);
                customrequestParams.put("modulename", Constants.Acc_JE_modulename);
                customrequestParams.put("moduleprimarykey", Constants.Acc_JEid);
                customrequestParams.put("modulerecid", journalEntry.getID());
                customrequestParams.put(Constants.moduleid, Constants.Acc_Debit_Note_ModuleId);
                customrequestParams.put(Constants.companyKey, companyid);
                customrequestParams.put("customdataclasspath", Constants.Acc_BillInv_custom_data_classpath);
                KwlReturnObject customDataresult = fieldDataManagercntrl.setCustomData(customrequestParams);
                if (customDataresult != null && customDataresult.getEntityList().size() > 0) {
                    jeDataMap.put("accjecustomdataref", journalEntry.getID());
                    jeresult = accJournalEntryobj.saveJournalEntry(jeDataMap);
                }
            }
            
            dnhm.put("dnid", debitnote.getID());
            Iterator itr = dndetails.iterator();
            while (itr.hasNext()) {
                DebitNoteDetail cnd = (DebitNoteDetail) itr.next();
                cnd.setDebitNote(debitnote);
            }
            dnhm.put("dndetails", dndetails);
            
            Iterator dntaxitr = dnTaxEntryDetails.iterator();
            while (dntaxitr.hasNext()) {
                DebitNoteTaxEntry noteTaxEntry = (DebitNoteTaxEntry) dntaxitr.next();
                noteTaxEntry.setDebitNote(debitnote);
            }
            dnhm.put("debitNoteTaxEntryDetails", dnTaxEntryDetails);
            
            result = accDebitNoteobj.updateDebitNote(dnhm);
            debitnote = (DebitNote)result.getEntityList().get(0);
            
            //Add entry in optimized table
            accJournalEntryobj.saveAccountJEs_optimized(jeid);
            
        } catch (ParseException ex) {
            Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
            throw ServiceException.FAILURE("saveDebitNote : " + ex.getMessage(), ex);
        } catch (JSONException ex) {
            Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
            throw ServiceException.FAILURE("saveDebitNote : " + ex.getMessage(), ex);
        } catch (ServiceException ex) {
            Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
            throw ServiceException.FAILURE("saveDebitNote : " + ex.getMessage(), ex);
        }
        
    }
    
    private void saveCreditNote(HttpServletRequest request, HashMap<String,Object> noteMap) throws SessionExpiredException, ServiceException, AccountingException, JSONException, ParseException{

        String entryNumber = (String) noteMap.get("entryNumber");
        Date creationDate = (Date) noteMap.get("creationDate");
        String currencyid = (String) noteMap.get(Constants.currencyKey);
        double externalCurrencyRate = (Double) noteMap.get("externalCurrencyRate");
        String accountid = (String) noteMap.get("accountid");
        String customer_accountid = (String) noteMap.get("customer_accountid");
        String customerid = (String) noteMap.get(Constants.customerid);
        String contractNo = (String) noteMap.get("contractNo");
        String buyerName = (String) noteMap.get("buyerName");
        double invoicedQuantity = (Double) noteMap.get("invoicedQuantity");
        double commissionRate = (Double) noteMap.get("commissionRate");
        String vesselName = (String) noteMap.get("vesselName");
        double cnamount = (Double) noteMap.get("cnamount");
        HashMap<String, FieldParams> creditNoteFieldParamsMap = (HashMap<String, FieldParams>) noteMap.get("creditNoteFieldParamsMap");
        
        
        CreditNote creditnote = null;
        KwlReturnObject result;
        List ll = new ArrayList();
        String oldjeid="";
        String auditMsg="",auditID="";
        
        
        String companyid = sessionHandlerImpl.getCompanyid(request);
        String createdby= sessionHandlerImpl.getUserid(request);
        String modifiedby= sessionHandlerImpl.getUserid(request);
        long createdon= System.currentTimeMillis();
        long updatedon = createdon;
        boolean otherwise = true;
        String sequenceformat="NA";
        
        HashMap<String,Object> GlobalParams = AccountingManager.getGlobalParams(request);
        
        KwlReturnObject capresult = accountingHandlerDAOobj.getObject(CompanyAccountPreferences.class.getName(), companyid);
        CompanyAccountPreferences preferences = (CompanyAccountPreferences) capresult.getEntityList().get(0);
        
        KwlReturnObject cmpresult = accountingHandlerDAOobj.getObject(Company.class.getName(), companyid);
        Company company = (Company) cmpresult.getEntityList().get(0);
        
        KwlReturnObject curresult = accountingHandlerDAOobj.getObject(KWLCurrency.class.getName(), currencyid);
        KWLCurrency kwlcurrency = (KWLCurrency) curresult.getEntityList().get(0);
        
        HashMap<String,Object> credithm = new HashMap<String,Object>();
        
        result = accCreditNoteDAOobj.getCNFromNoteNo(entryNumber, companyid);
        int count = result.getRecordTotalCount();
        if (count > 0 && sequenceformat.equals("NA")) {                        
                throw new AccountingException(messageSource.getMessage("acc.field.Creditnotenumber", null, RequestContextUtils.getLocale(request)) + entryNumber + messageSource.getMessage("acc.field.alreadyexists.", null, RequestContextUtils.getLocale(request)));                        
        }
        
        String nextCNAutoNo = "";
        String nextAutoNoInt = "";
        
        credithm.put("entrynumber", entryNumber);
        credithm.put("autogenerated", nextCNAutoNo.equals(entryNumber));
        credithm.put("oldRecord", false);
        
        Long seqNumber = null;
        result = accCreditNoteDAOobj.getCNSequenceNo(companyid, creationDate);
        List list = result.getEntityList();
        if (!list.isEmpty()) {
            seqNumber = (Long) list.get(0);
        }
        credithm.put("sequence", seqNumber.intValue());
        
        curresult = accountingHandlerDAOobj.getObject(KWLCurrency.class.getName(), currencyid);
        KWLCurrency currency = (KWLCurrency) curresult.getEntityList().get(0);
        
        credithm.put("memo", "");
        credithm.put(Constants.companyKey, company.getCompanyID());
        credithm.put(Constants.currencyKey, currencyid);
        credithm.put("createdby",createdby);
        credithm.put("modifiedby",modifiedby);
        credithm.put("createdon",createdon);
        credithm.put("updatedon",updatedon);
        credithm.put("creationDate",creationDate);
        
        String jeentryNumber = "";
        String jeIntegerPart = "";
        String jeDatePrefix = "";
        String jeDateAfterPrefix = "";
        String jeDateSuffix = "";
        String jeSeqFormatId = "";
        boolean jeautogenflag = false;
        
        HashMap<String, Object> JEFormatParams = new HashMap<String, Object>();
        JEFormatParams.put(Constants.moduleid, Constants.Acc_GENERAL_LEDGER_ModuleId);
        JEFormatParams.put("modulename", "autojournalentry");
        JEFormatParams.put(Constants.companyKey, companyid);
        JEFormatParams.put("isdefaultFormat", true);

        KwlReturnObject kwlObj = accCompanyPreferencesObj.getSequenceFormat(JEFormatParams);
        SequenceFormat format = (SequenceFormat) kwlObj.getEntityList().get(0);
        Map<String, Object> seqNumberMap = new HashMap<String, Object>();
        seqNumberMap = accCompanyPreferencesObj.getNextAutoNumber_Modified(companyid, StaticValues.AUTONUM_JOURNALENTRY, format.getID(), false, creationDate);
        jeentryNumber = (String)seqNumberMap.get(Constants.AUTO_ENTRYNUMBER);  //next auto generated number
        jeIntegerPart = (String)seqNumberMap.get(Constants.SEQNUMBER);//integer Part
        jeDatePrefix = (String)seqNumberMap.get(Constants.DATEPREFIX);//Date Prefix Part
        jeDateAfterPrefix = (String)seqNumberMap.get(Constants.DATEAFTERPREFIX);//Date After Prefix Part
        jeDateSuffix = (String)seqNumberMap.get(Constants.DATESUFFIX);//Date Suffix Part
        jeSeqFormatId = format.getID();
        jeautogenflag = true;
        
        Map<String,Object> jeDataMap = AccountingManager.getGlobalParams(request);
        jeDataMap.put("entrynumber", jeentryNumber);
        jeDataMap.put("autogenerated", jeautogenflag);
        jeDataMap.put(Constants.SEQFORMAT,jeSeqFormatId );
        jeDataMap.put(Constants.SEQNUMBER,jeIntegerPart);
        jeDataMap.put(Constants.DATEPREFIX, jeDatePrefix);
        jeDataMap.put(Constants.DATEAFTERPREFIX, jeDateAfterPrefix);
        jeDataMap.put(Constants.DATESUFFIX, jeDateSuffix);
        jeDataMap.put("entrydate", creationDate);
        jeDataMap.put(Constants.companyKey, company.getCompanyID());
        jeDataMap.put("memo", "Credit Note Creation Through Import");
        jeDataMap.put(Constants.currencyKey, currencyid);
        
        HashSet<JournalEntryDetail> jedetails = new HashSet();
        
        KwlReturnObject jeresult = accJournalEntryobj.saveJournalEntry(jeDataMap);//Create Journal entry without JEdetails
        JournalEntry journalEntry = (JournalEntry) jeresult.getEntityList().get(0);
        String jeid = journalEntry.getID();
        jeDataMap.put("jeid", jeid);
        credithm.put("journalentryid", jeid);
        
        List CNlist = new ArrayList();
        
        double cnamountdue = 0.0;
        
        int cntype = 2;
        
        credithm.put(Constants.customerid, customerid);
        
        credithm.put("otherwise", true);
        credithm.put("openflag", true);
//        cnamount = Double.parseDouble(request.getParameter("amount"));
        cnamountdue = cnamount;
        credithm.put("cnamount", cnamount);
        credithm.put("cnamountdue", cnamountdue);
        credithm.put("cntype", 2);
        credithm.put("approvestatuslevel", 11);
        
        // Create Details Json Array
        
        String details = getNoteDetails(customer_accountid, cnamount).toString();
        
        
        
        CNlist = saveCreditNoteRowsOW2(GlobalParams, request, company, currency, journalEntry, preferences, externalCurrencyRate,details);                
        
        Double totalAmount = (Double) CNlist.get(0);
        Double discAccAmount = (Double) CNlist.get(1);
        HashSet<CreditNoteDetail> cndetails = (HashSet<CreditNoteDetail>) CNlist.get(2);
        jedetails = (HashSet<JournalEntryDetail>) CNlist.get(3);
        HashSet<CreditNoteTaxEntry>  creditNoteTaxEntryDetails = (HashSet<CreditNoteTaxEntry>) CNlist.get(5);
//        reloadInventory = (Boolean) CNlist.get(4);
//        returnJobj.put("reloadInventory", reloadInventory);
        
        double termTotalAmount = 0;
        HashMap<String, Double> termAcc = new HashMap<String, Double>();
        String cnTerms = request.getParameter("invoicetermsmap");
        if (!StringUtil.isNullOrEmpty(cnTerms)) {
            JSONArray termsArr = new JSONArray(cnTerms);
            for (int cnt = 0; cnt < termsArr.length(); cnt++) {
                double termamount = termsArr.getJSONObject(cnt).getDouble("termamount");
                termTotalAmount += termamount;
                if (termAcc.containsKey(termsArr.getJSONObject(cnt).getString("glaccount"))) {
                    double tempAmount = termAcc.get(termsArr.getJSONObject(cnt).getString("glaccount"));
                    termAcc.put(termsArr.getJSONObject(cnt).getString("glaccount"), termamount + tempAmount);
                } else {
                    termAcc.put(termsArr.getJSONObject(cnt).getString("glaccount"), termamount);
                }
            }
        }
        totalAmount += termTotalAmount;
        
        JSONObject jedjson = new JSONObject();
        jedjson.put("srno", jedetails.size()+1);
        jedjson.put(Constants.companyKey, company.getCompanyID());
        jedjson.put("amount", totalAmount);
        jedjson.put("accountid", accountid);
        jedjson.put("debit", false);
        jedjson.put("jeid", jeid);
        
        KwlReturnObject jedresult = accJournalEntryobj.addJournalEntryDetails(jedjson);
        JournalEntryDetail jed = (JournalEntryDetail) jedresult.getEntityList().get(0);
        jedetails.add(jed);
        credithm.put("customerentry", jed.getID());
        if(termAcc.size()>0) {
            for (Map.Entry<String, Double> entry : termAcc.entrySet()) {
                jedjson = new JSONObject();
                jedjson.put("srno", jedetails.size()+1);
                jedjson.put(Constants.companyKey, companyid);
                jedjson.put("amount", entry.getValue()>0 ? entry.getValue() : (entry.getValue()*(-1)));
                jedjson.put("accountid", entry.getKey());
                jedjson.put("debit", entry.getValue()>0 ? true : false);
                jedjson.put("jeid", jeid);
                jedresult = accJournalEntryobj.addJournalEntryDetails(jedjson);
                jed = (JournalEntryDetail) jedresult.getEntityList().get(0);
                jedetails.add(jed);
            }
        }
        
        result = accCreditNoteDAOobj.addCreditNote(credithm);
        creditnote = (CreditNote) result.getEntityList().get(0);
        jeDataMap.put("jedetails", jedetails);
        jeDataMap.put("externalCurrencyRate", externalCurrencyRate);
        jeDataMap.put("transactionId", creditnote.getID());// Adding CN ID as a transactionId in JournalEntry
        jeDataMap.put("transactionModuleid", Constants.Acc_Credit_Note_ModuleId);
        jeresult = accJournalEntryobj.saveJournalEntry(jeDataMap);//Add Journal entry details
        
        journalEntry = (JournalEntry) jeresult.getEntityList().get(0);
        
//        result = accCreditNoteDAOobj.addCreditNote(credithm);
        auditID="30";
        auditMsg="added";
        
        String customfield = getCustomFieldsForImport(creditNoteFieldParamsMap, contractNo, vesselName,buyerName,invoicedQuantity,commissionRate, Constants.Acc_Credit_Note_ModuleId, companyid); 
        
//        creditnote = (CreditNote)result.getEntityList().get(0);
        if (!StringUtil.isNullOrEmpty(customfield)) {
            JSONArray jcustomarray = new JSONArray(customfield);
            HashMap<String, Object> customrequestParams = new HashMap<String, Object>();
            customrequestParams.put("customarray", jcustomarray);
            customrequestParams.put("modulename", Constants.Acc_JE_modulename);
            customrequestParams.put("moduleprimarykey", Constants.Acc_JEid);
            customrequestParams.put("modulerecid", journalEntry.getID());
            customrequestParams.put(Constants.moduleid, Constants.Acc_Credit_Note_ModuleId);
            customrequestParams.put(Constants.companyKey, companyid);
            customrequestParams.put("customdataclasspath", Constants.Acc_BillInv_custom_data_classpath);
            KwlReturnObject customDataresult = fieldDataManagercntrl.setCustomData(customrequestParams);
            if (customDataresult != null && customDataresult.getEntityList().size() > 0) {
                jeDataMap.put("accjecustomdataref", journalEntry.getID());
                jeresult = accJournalEntryobj.saveJournalEntry(jeDataMap);
            }
        }
        
        credithm.put("cnid", creditnote.getID());
        Iterator itr = cndetails.iterator();
        while (itr.hasNext()) {
            CreditNoteDetail cnd = (CreditNoteDetail) itr.next();
            cnd.setCreditNote(creditnote);
        }
        credithm.put("cndetails", cndetails);
        
        Iterator cntaxitr = creditNoteTaxEntryDetails.iterator();
        while (cntaxitr.hasNext()) {
            CreditNoteTaxEntry noteTaxEntry = (CreditNoteTaxEntry) cntaxitr.next();
            noteTaxEntry.setCreditNote(creditnote);
        }
        credithm.put("creditNoteTaxEntryDetails", creditNoteTaxEntryDetails);
        
        result = accCreditNoteDAOobj.updateCreditNote(credithm);
        creditnote = (CreditNote)result.getEntityList().get(0);
        
        //Add entry in optimized table
        accJournalEntryobj.saveAccountJEs_optimized(jeid);
        
    }
    
    private String getCustomFieldsForImport(HashMap<String, FieldParams> fieldParamsMap, String contractNo, String vesselName, String buyerName, double invoicedQuantity,double commissionRate, int moduleId, String companyid) throws JSONException {
        String retString = "";
        try {
            // getting FieldParams Object by custom field name -- Vessel Name
            JSONArray returnArray = new JSONArray();
            
            
            
            if(fieldParamsMap.containsKey("Vessel Name")){
                FieldParams fieldParams = fieldParamsMap.get("Vessel Name");
                if (fieldParams != null) {
                    getCustomFieldsData(fieldParams, returnArray, vesselName);// for vessel name
                }
            }
            
            if(fieldParamsMap.containsKey("Contract No")){
                FieldParams fieldParams = fieldParamsMap.get("Contract No");
                if (fieldParams != null) {
                    getCustomFieldsData(fieldParams, returnArray, contractNo);// for vessel name
                }
            }
            
            if(fieldParamsMap.containsKey("Buyer Name")){
                FieldParams fieldParams = fieldParamsMap.get("Buyer Name");
                if (fieldParams != null) {
                    getCustomFieldsData(fieldParams, returnArray, buyerName);// for buyer Name
                }
            }
            
            if (fieldParamsMap.containsKey("Invoiced Quantity")) {
                FieldParams fieldParams = fieldParamsMap.get("Invoiced Quantity");
                if (fieldParams != null) {
                    getCustomFieldsData(fieldParams, returnArray, invoicedQuantity + "");// for Invoiced Quantity
                }
            }
            
            if (fieldParamsMap.containsKey("Commission Rate")) {
                FieldParams fieldParams = fieldParamsMap.get("Commission Rate");
                if (fieldParams != null) {
                    getCustomFieldsData(fieldParams, returnArray, commissionRate + "");// for Commission Rate
                }
            }
            

            if (returnArray.length() > 0) {
                retString = returnArray.toString();
            }

        } catch (JSONException ex) {
            Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
            throw new JSONException(ex);
        }

        return retString;
    }
       private String getCustomFieldsForImport1(HashMap<String, FieldParams> fieldParamsMap, String classofInvoice, String class1ofInvoice, String giro,String remarks) throws JSONException {
        String retString = "";
        try {
            // getting FieldParams Object by custom field name -- Vessel Name
            JSONArray returnArray = new JSONArray();
    
            
            
            if(fieldParamsMap.containsKey("Class")){
                FieldParams fieldParams = fieldParamsMap.get("Class");
                if (fieldParams != null) {
                    getCustomFieldsData(fieldParams, returnArray, classofInvoice);// for vessel name
                }
            }
            
            if(fieldParamsMap.containsKey("Class1")){
                FieldParams fieldParams = fieldParamsMap.get("Class1");
                if (fieldParams != null) {
                    getCustomFieldsData(fieldParams, returnArray, class1ofInvoice);// for vessel name
                }
            }
            
            if(fieldParamsMap.containsKey("Payment Method")){
                FieldParams fieldParams = fieldParamsMap.get("Payment Method");
                if (fieldParams != null) {
                    getCustomFieldsData(fieldParams, returnArray, giro);// for buyer Name
                }
            }
            if(fieldParamsMap.containsKey("Remarks")){
                FieldParams fieldParams = fieldParamsMap.get("Remarks");
                if (fieldParams != null) {
                    getCustomFieldsData(fieldParams, returnArray, remarks);// for buyer Name
                }
            }
            
            if (returnArray.length() > 0) {
                retString = returnArray.toString();
            }

        } catch (JSONException ex) {
            Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
            throw new JSONException(ex);
        }

        return retString;
    }
    
    private void getCustomFieldsData(FieldParams fieldParams, JSONArray returnArray, String customFieldValue) throws JSONException {
        JSONObject jobj = new JSONObject();
        jobj.put("fieldid", fieldParams.getId());
        jobj.put("refcolumn_name", "Col" + fieldParams.getRefcolnum());
        jobj.put("fieldname", fieldParams.getFieldname());
        jobj.put("xtype", fieldParams.getFieldtype());
        jobj.put("fieldDataVal", customFieldValue);
        jobj.put("Col" + fieldParams.getColnum(), customFieldValue);
        jobj.put(fieldParams.getFieldname(), "Col" + fieldParams.getColnum());

        returnArray.put(jobj);
    }
    
    private JSONArray getNoteDetails(String accountid, double transactionAmount) throws JSONException {
        JSONObject jobj = new JSONObject();
        jobj.put("accountid", accountid);
        jobj.put("dramount", transactionAmount);
        jobj.put("prtaxid", "");
        jobj.put("amountwithtax", transactionAmount);
        jobj.put("taxamount", 0);
        jobj.put("customfield", "[{}]");
        jobj.put("description", "");
        jobj.put("modified", true);

        JSONArray array = new JSONArray();
        array.put(jobj);

        return array;
    }
    
    private List saveDebitNoteRowsOW(HashMap GlobalParams, HttpServletRequest request, Company company, KWLCurrency currency, JournalEntry je, CompanyAccountPreferences preferences, double externalCurrencyRate, String details) throws JSONException, ServiceException, SessionExpiredException, ParseException, AccountingException {
        List resultlist = new ArrayList();
        double cnamount = 0.0;
        HashSet cndetails = new HashSet();
        HashSet jedetails = new HashSet();
        HashSet dnTaxEntryDetails = new HashSet();
        String companyid = company.getCompanyID();
        JournalEntryDetail jed;
        boolean reloadInventory = false;

         int i = 0;
//         String details = //request.getParameter("details");
         if (!StringUtil.isNullOrEmpty(details)) {
             JSONArray jArr = new JSONArray(details);
             for (int iter = 0; iter < jArr.length(); iter++) {
                 JSONObject jobj = jArr.getJSONObject(iter);
                 String DebitNoteDetailID = StringUtil.generateUUID();
                 DebitNoteDetail row = new DebitNoteDetail();
                 row.setSrno(i + 1);
                 row.setID(DebitNoteDetailID);
                 row.setTotalDiscount(0.00);
                 row.setCompany(company);
                 row.setMemo(jobj.optString("description"));
                 String purchase_accid = "";
                 DebitNoteTaxEntry taxEntry = new DebitNoteTaxEntry();
                 String DebitNoteTaxID = StringUtil.generateUUID();
                 taxEntry.setID(DebitNoteTaxID);
                 int cntype = 2;//StringUtil.isNullOrEmpty(request.getParameter("cntype")) ? 1 : Integer.parseInt(request.getParameter("cntype"));
                 if (cntype == 1 || cntype == 4 || cntype == 2) {//DN against customer
                     if (!StringUtil.isNullOrEmpty(jobj.optString("accountid"))) {
                         purchase_accid = jobj.optString("accountid");
                     } else {
                         throw new AccountingException(messageSource.getMessage("acc.field.Nocreditaccountselected", null, RequestContextUtils.getLocale(request)));
                     }
                 } else {
                     KwlReturnObject dscresult = this.accAccountDAOobj.getAccountFromName(company.getCompanyID(), Constants.PURCHASE_ACCOUNT);
                     List ll = dscresult.getEntityList();
                     if (ll.size() == 1) {
                         purchase_accid = ((Account) ll.get(0)).getID();
                     } else {
                         throw new AccountingException(messageSource.getMessage("acc.field.NoPurchaseaccountfound", null, RequestContextUtils.getLocale(request)));
                     }
                 }
                 cnamount += Double.parseDouble(jobj.optString("dramount"));//jobj.getDouble("discamount");        
                 if (iter == 0) {// create  dndetail entry only once in this case i.e if multitple accounts are linked.
                     cndetails.add(row);
                 }

                 JSONObject jedjson = new JSONObject();
                 jedjson.put("srno", jedetails.size() + 1);
                 jedjson.put(Constants.companyKey, company.getCompanyID());
                 jedjson.put("amount", (Double.parseDouble(jobj.optString("dramount"))));
                 jedjson.put("accountid", purchase_accid);
                 jedjson.put("debit", false);
                 jedjson.put("jeid", je.getID());
                 jedjson.put("description", jobj.optString("description"));
                 KwlReturnObject jedresult = accJournalEntryobj.addJournalEntryDetails(jedjson);
                 jed = (JournalEntryDetail) jedresult.getEntityList().get(0);
                 jedetails.add(jed);
                   // Add Custom fields details 
                    if(!StringUtil.isNullOrEmpty(jobj.optString("customfield", ""))){
                        JSONArray jcustomarray = new JSONArray(jobj.optString("customfield", "[]"));
                        HashMap<String, Object> customrequestParams = new HashMap<String, Object>();
                        customrequestParams.put("customarray", jcustomarray);
                        customrequestParams.put("modulename", Constants.Acc_JEDetail_modulename);
                        customrequestParams.put("moduleprimarykey", Constants.Acc_JEDetailId);// Constants.Acc_JEDetail_recdetailId
                        customrequestParams.put("modulerecid", jed.getID());
                        customrequestParams.put("recdetailId", taxEntry.getID());
                        customrequestParams.put(Constants.moduleid, Constants.Acc_Debit_Note_ModuleId);
                        customrequestParams.put(Constants.companyKey,  company.getCompanyID());
                        customrequestParams.put("customdataclasspath", Constants.Acc_BillInvDetail_custom_data_classpath);
                        KwlReturnObject customDataresult = fieldDataManagercntrl.setCustomData(customrequestParams);
                        if (customDataresult != null && customDataresult.getEntityList().size() > 0) {
                            JSONObject tempjedjson = new JSONObject();
                            tempjedjson.put("accjedetailcustomdata", jed.getID());
                            tempjedjson.put("jedid", jed.getID());
                            jedresult = accJournalEntryobj.updateJournalEntryDetails(tempjedjson);
                        }
                    }
                 String rowtaxid = jobj.optString("prtaxid", "");
                 double rowtaxamount = 0d;
                 String rowTaxJeId = "";
                 KwlReturnObject txresult = accountingHandlerDAOobj.getObject(Tax.class.getName(), rowtaxid);
                 Tax rowtax = (Tax) txresult.getEntityList().get(0);
                 if (rowtax != null) {
//                     DecimalFormat f = new DecimalFormat("##.00");
                     rowtaxamount = Double.parseDouble(jobj.optString("taxamount", "0.0"));
                     jedjson = new JSONObject();
                     jedjson.put("srno", jedetails.size() + 1);
                     jedjson.put(Constants.companyKey, company.getCompanyID());
                     jedjson.put("amount", authHandler.formattedAmount(rowtaxamount, companyid));
                     jedjson.put("accountid", rowtax.getAccount().getID());
                     jedjson.put("debit", false);
                     jedjson.put("jeid", je.getID());
                     jedjson.put("description", jobj.optString("description"));
                     jedresult = accJournalEntryobj.addJournalEntryDetails(jedjson);
                     jed = (JournalEntryDetail) jedresult.getEntityList().get(0);
                     jedetails.add(jed);
                    // Add Custom fields details 
                    if(!StringUtil.isNullOrEmpty(jobj.optString("customfield", ""))){
                        JSONArray jcustomarray = new JSONArray(jobj.optString("customfield", "[]"));
                        HashMap<String, Object> customrequestParams = new HashMap<String, Object>();
                        customrequestParams.put("customarray", jcustomarray);
                        customrequestParams.put("modulename", Constants.Acc_JEDetail_modulename);
                        customrequestParams.put("moduleprimarykey", Constants.Acc_JEDetailId);// Constants.Acc_JEDetail_recdetailId
                        customrequestParams.put("modulerecid", jed.getID());
                        customrequestParams.put("recdetailId", taxEntry.getID());
                        customrequestParams.put(Constants.moduleid, Constants.Acc_Debit_Note_ModuleId);
                        customrequestParams.put(Constants.companyKey,  company.getCompanyID());
                        customrequestParams.put("customdataclasspath", Constants.Acc_BillInvDetail_custom_data_classpath);
                        KwlReturnObject customDataresult = fieldDataManagercntrl.setCustomData(customrequestParams);
                        if (customDataresult != null && customDataresult.getEntityList().size() > 0) {
                            JSONObject tempjedjson = new JSONObject();
                            tempjedjson.put("accjedetailcustomdata", jed.getID());
                            tempjedjson.put("jedid", jed.getID());
                            jedresult = accJournalEntryobj.updateJournalEntryDetails(tempjedjson);
                        }
                    }
                     rowTaxJeId = jed.getID();
                     cnamount += rowtaxamount;
                 }

                     KwlReturnObject accountresult = accountingHandlerDAOobj.getObject(Account.class.getName(), purchase_accid);
                     Account account = (Account) accountresult.getEntityList().get(0);

                     taxEntry.setAccount(account);
                     taxEntry.setAmount((Double.parseDouble(jobj.optString("dramount"))));
                     taxEntry.setCompany(company);
//                    taxEntry.setCreditNote(null);
                     taxEntry.setDescription(jobj.optString("description"));
                     taxEntry.setIsForDetailsAccount(true);
                     taxEntry.setDebitForMultiCNDN(false);
                     taxEntry.setTax(rowtax);
                     taxEntry.setTaxJedId(rowTaxJeId);
                     taxEntry.setTaxamount(rowtaxamount);

                     dnTaxEntryDetails.add(taxEntry);

                 
                 i++;
             }

         }else{
            DebitNoteDetail row = new DebitNoteDetail();
            String DebitNoteDetailID = StringUtil.generateUUID();
            row.setID(DebitNoteDetailID);
            row.setSrno(i+1);
            row.setTotalDiscount(0.00);
            row.setCompany(company);
            row.setMemo(request.getParameter("memo"));
            String purchase_accid = "";
            int cntype = StringUtil.isNullOrEmpty(request.getParameter("cntype"))?1:Integer.parseInt(request.getParameter("cntype"));
            if(cntype == 4 || cntype == 2) {//DN against customer
                if(!StringUtil.isNullOrEmpty(request.getParameter("reverseaccid"))) {
                    purchase_accid = request.getParameter("reverseaccid");
                } else {
                    throw new AccountingException(messageSource.getMessage("acc.field.Nocreditaccountselected", null, RequestContextUtils.getLocale(request)));
                }
            } else {
            KwlReturnObject dscresult = this.accAccountDAOobj.getAccountFromName(company.getCompanyID(), Constants.PURCHASE_ACCOUNT);
            List ll = dscresult.getEntityList();
            if(ll.size() == 1) {
                purchase_accid = ((Account) ll.get(0)).getID();
            } else {
                throw new AccountingException(messageSource.getMessage("acc.field.NoPurchaseaccountfound", null, RequestContextUtils.getLocale(request)));
            }
            }
            cnamount = Double.parseDouble(request.getParameter("amount"));//jobj.getDouble("discamount");

    //        JSONObject discjson = new JSONObject();
    //        discjson.put("discount", cnamount);
    //        discjson.put("inpercent", false);
    ////        KwlReturnObject bAmt = accCurrencyDAOobj.getBaseToCurrencyAmount(GlobalParams, cnamount, currencyid, null, externalCurrencyRate);
    //        discjson.put("originalamount", 0);//(Double) bAmt.getEntityList().get(0));
    //        discjson.put(Constants.companyKey, company.getCompanyID());
    //        dscresult = accDiscountobj.addDiscount(discjson);
    //        Discount discount = (Discount) dscresult.getEntityList().get(0);
    //        row.setDiscount(discount);
            cndetails.add(row);

            JSONObject jedjson = new JSONObject();
            jedjson.put("srno", jedetails.size()+1);
            jedjson.put(Constants.companyKey, company.getCompanyID());
            jedjson.put("amount", (cnamount));
            jedjson.put("accountid", purchase_accid);
            jedjson.put("debit", false);
            jedjson.put("jeid", je.getID());
            KwlReturnObject jedresult = accJournalEntryobj.addJournalEntryDetails(jedjson);
            jed = (JournalEntryDetail) jedresult.getEntityList().get(0);
            jedetails.add(jed);
            }
            resultlist.add(cnamount);  //resultlist.add(totalAmount + totalTax);
            resultlist.add(cnamount);
            resultlist.add(cndetails);
            resultlist.add(jedetails);
            resultlist.add(reloadInventory);
            resultlist.add(dnTaxEntryDetails);
            return resultlist;
    }
    
    
    private List saveCreditNoteRowsOW2(HashMap GlobalParams, HttpServletRequest request, Company company, KWLCurrency currency, JournalEntry je, CompanyAccountPreferences preferences, double externalCurrencyRate, String details) throws JSONException, ServiceException, SessionExpiredException, ParseException, AccountingException {
        List resultlist = new ArrayList();
        double cnamount = 0.0;
        HashSet cndetails = new HashSet();
        HashSet cnTaxEntryDetails = new HashSet();
        HashSet jedetails = new HashSet();
        String companyid = company.getCompanyID();
        JournalEntryDetail jed;
        boolean reloadInventory = false;

        int i = 0; 
//        String details = request.getParameter("details");
        if (!StringUtil.isNullOrEmpty(details)) {
            JSONArray jArr = new JSONArray(details);
            for (int iter = 0; iter < jArr.length(); iter++) {
                JSONObject jobj = jArr.getJSONObject(iter);
                String CreditNoteDetailID = StringUtil.generateUUID();
                CreditNoteDetail row = new CreditNoteDetail();
                row.setSrno(i + 1);
                row.setID(CreditNoteDetailID);
                row.setTotalDiscount(0.00);
                row.setCompany(company);
                row.setMemo(jobj.optString("description"));
                CreditNoteTaxEntry taxEntry = new CreditNoteTaxEntry();
                String CreditNoteTaxID = StringUtil.generateUUID();
                taxEntry.setID(CreditNoteTaxID);
                String sales_accid = "";
                int cntype = 2;//StringUtil.isNullOrEmpty(request.getParameter("cntype")) ? 1 : Integer.parseInt(request.getParameter("cntype"));
                if (cntype == 1 || cntype == 4 || cntype == 2) {//CN against customer
                    if (!StringUtil.isNullOrEmpty(jobj.optString("accountid"))) {
                        sales_accid = jobj.optString("accountid");
                    } else {
                        throw new AccountingException(messageSource.getMessage("acc.field.Nodebitaccountselected", null, RequestContextUtils.getLocale(request)));
                    }
                } else {
                    KwlReturnObject dscresult = this.accAccountDAOobj.getAccountFromName(company.getCompanyID(), Constants.SALES_ACCOUNT);
                    List ll = dscresult.getEntityList();

                    if (ll.size() == 1) {
                        sales_accid = ((Account) ll.get(0)).getID();
                    } else {
                        throw new AccountingException(messageSource.getMessage("acc.field.Nosalesaccountfound", null, RequestContextUtils.getLocale(request)));
                    }
                }
                cnamount += Double.parseDouble(jobj.optString("dramount"));//jobj.getDouble("discamount");
                if (iter == 0) {// create  cndetail entry only once in this case i.e if multitple accounts are linked.
                    cndetails.add(row);
                }

                JSONObject jedjson = new JSONObject();
                jedjson.put("srno", jedetails.size() + 1);
                jedjson.put(Constants.companyKey, company.getCompanyID());
                jedjson.put("amount", (Double.parseDouble(jobj.optString("dramount"))));
                jedjson.put("accountid", sales_accid);
                jedjson.put("debit", true);
                jedjson.put("jeid", je.getID());
                jedjson.put("description", jobj.optString("description"));
                KwlReturnObject jedresult = accJournalEntryobj.addJournalEntryDetails(jedjson);
                jed = (JournalEntryDetail) jedresult.getEntityList().get(0);
                jedetails.add(jed);
                 // Add Custom fields details 
                    if(!StringUtil.isNullOrEmpty(jobj.optString("customfield", ""))){
                        JSONArray jcustomarray = new JSONArray(jobj.optString("customfield", "[]"));
                        HashMap<String, Object> customrequestParams = new HashMap<String, Object>();
                        customrequestParams.put("customarray", jcustomarray);
                        customrequestParams.put("modulename", Constants.Acc_JEDetail_modulename);
                        customrequestParams.put("moduleprimarykey", Constants.Acc_JEDetailId);// Constants.Acc_JEDetail_recdetailId
                        customrequestParams.put("modulerecid", jed.getID());
                        customrequestParams.put("recdetailId", taxEntry.getID());
                        customrequestParams.put(Constants.moduleid, Constants.Acc_Credit_Note_ModuleId);
                        customrequestParams.put(Constants.companyKey,  company.getCompanyID());
                        customrequestParams.put("customdataclasspath", Constants.Acc_BillInvDetail_custom_data_classpath);
//                        KwlReturnObject customDataresult = fieldDataManagercntrl.setCustomData(customrequestParams);
//                        if (customDataresult != null && customDataresult.getEntityList().size() > 0) {
//                            JSONObject tempjedjson = new JSONObject();
//                            tempjedjson.put("accjedetailcustomdata", jed.getID());
//                            tempjedjson.put("jedid", jed.getID());
//                            jedresult = accJournalEntryobj.updateJournalEntryDetails(tempjedjson);
//                        }
                    }
                
                // Entering data for Tax Entry
                
                String rowtaxid = jobj.optString("prtaxid", "");
                double rowtaxamount = 0d;
                String rowTaxJeId = "";
                KwlReturnObject txresult = accountingHandlerDAOobj.getObject(Tax.class.getName(), rowtaxid);
                Tax rowtax = (Tax) txresult.getEntityList().get(0);
                if (rowtax != null) {
//                    DecimalFormat f = new DecimalFormat("##.00");
                    rowtaxamount = Double.parseDouble(jobj.optString("taxamount", "0.0"));
                    jedjson = new JSONObject();
                    jedjson.put("srno", jedetails.size() + 1);
                    jedjson.put(Constants.companyKey, company.getCompanyID());
                    jedjson.put("amount", authHandler.formattedAmount(rowtaxamount, companyid));
                    jedjson.put("accountid", rowtax.getAccount().getID());
                    jedjson.put("debit", true);
                    jedjson.put("jeid", je.getID());
                    jedjson.put("description", jobj.optString("description"));
                    jedresult = accJournalEntryobj.addJournalEntryDetails(jedjson);
                    jed = (JournalEntryDetail) jedresult.getEntityList().get(0);
                    jedetails.add(jed);
//                      Add Custom fields details 
                    if(!StringUtil.isNullOrEmpty(jobj.optString("customfield", ""))){
                        JSONArray jcustomarray = new JSONArray(jobj.optString("customfield", "[]"));
                        HashMap<String, Object> customrequestParams = new HashMap<String, Object>();
                        customrequestParams.put("customarray", jcustomarray);
                        customrequestParams.put("modulename", Constants.Acc_JEDetail_modulename);
                        customrequestParams.put("moduleprimarykey", Constants.Acc_JEDetailId);// Constants.Acc_JEDetail_recdetailId
                        customrequestParams.put("modulerecid", jed.getID());
                        customrequestParams.put("recdetailId", taxEntry.getID());
                        customrequestParams.put(Constants.moduleid, Constants.Acc_Credit_Note_ModuleId);
                        customrequestParams.put(Constants.companyKey,  company.getCompanyID());
                        customrequestParams.put("customdataclasspath", Constants.Acc_BillInvDetail_custom_data_classpath);
                    }
                    rowTaxJeId = jed.getID();
                    
                    cnamount += rowtaxamount;
                }
                                      
                    KwlReturnObject accountresult = accountingHandlerDAOobj.getObject(Account.class.getName(), sales_accid);
                    Account account = (Account) accountresult.getEntityList().get(0);
                    
                    taxEntry.setAccount(account);
                    taxEntry.setAmount((Double.parseDouble(jobj.optString("dramount"))));
                    taxEntry.setCompany(company);
                    taxEntry.setDescription(jobj.getString("description"));
                    taxEntry.setIsForDetailsAccount(true);
                    taxEntry.setDebitForMultiCNDN(true);
                    taxEntry.setTax(rowtax);
                    taxEntry.setTaxJedId(rowTaxJeId);
                    taxEntry.setTaxamount(rowtaxamount);
                    
                    cnTaxEntryDetails.add(taxEntry);
                    
            }
        }else{
        CreditNoteDetail row = new CreditNoteDetail();
        String CreditNoteDetailID = StringUtil.generateUUID();
        row.setID(CreditNoteDetailID);
        row.setSrno(i+1);
        row.setTotalDiscount(0.00);
        row.setCompany(company);
        row.setMemo(request.getParameter("memo"));

        String sales_accid = "";
        int cntype = 2;//StringUtil.isNullOrEmpty(request.getParameter("cntype"))?1:Integer.parseInt(request.getParameter("cntype"));
        if(cntype == 4 || cntype == 2) {//CN against vendor
            if(!StringUtil.isNullOrEmpty(request.getParameter("reverseaccid"))) {
                sales_accid = request.getParameter("reverseaccid");
            } else {
                throw new AccountingException(messageSource.getMessage("acc.field.Nodebitaccountselected", null, RequestContextUtils.getLocale(request)));
            }
        } else {
            KwlReturnObject dscresult = this.accAccountDAOobj.getAccountFromName(company.getCompanyID(), Constants.SALES_ACCOUNT);
            List ll = dscresult.getEntityList();

            if(ll.size() == 1) {
                sales_accid = ((Account) ll.get(0)).getID();
            } else {
                throw new AccountingException(messageSource.getMessage("acc.field.Nosalesaccountfound", null, RequestContextUtils.getLocale(request)));
            }
        }
        cnamount = Double.parseDouble(request.getParameter("amount"));//jobj.getDouble("discamount");
        cndetails.add(row);
        
        JSONObject jedjson = new JSONObject();
        jedjson.put("srno", jedetails.size()+1);
        jedjson.put(Constants.companyKey, company.getCompanyID());
        jedjson.put("amount", (cnamount));
        jedjson.put("accountid", sales_accid);
        jedjson.put("debit", true);
        jedjson.put("jeid", je.getID());
        KwlReturnObject jedresult = accJournalEntryobj.addJournalEntryDetails(jedjson);
        jed = (JournalEntryDetail) jedresult.getEntityList().get(0);
        jedetails.add(jed);
         }
        resultlist.add(cnamount);  //resultlist.add(totalAmount + totalTax);
        resultlist.add(cnamount);
        resultlist.add(cndetails);
        resultlist.add(jedetails);
        resultlist.add(reloadInventory);
        resultlist.add(cnTaxEntryDetails);
        return resultlist;
    }
    
    private String getCurrencyId(String currencyName, HashMap currencyMap) {
        String currencyId = "";
        if (currencyMap != null && currencyMap.containsKey(currencyName)) {
            currencyId = currencyMap.get(currencyName).toString();
        }
        return currencyId;
    }
    
    public HashMap getCurrencyMap(boolean isCurrencyCode) throws ServiceException {
        HashMap currencyMap = new HashMap();
        KwlReturnObject returnObject = accCurrencyDAOobj.getCurrencies(currencyMap);
        List currencyList = returnObject.getEntityList();

        if (currencyList != null && !currencyList.isEmpty()) {
            Iterator iterator = currencyList.iterator();
            while (iterator.hasNext()) {
                KWLCurrency currency = (KWLCurrency) iterator.next();
                if(isCurrencyCode){
                    currencyMap.put(currency.getCurrencyCode(), currency.getCurrencyID());
                }else{
                    currencyMap.put(currency.getName(), currency.getCurrencyID());
                }
            }
        }
        return currencyMap;
    }
    
    public static String getActualFileName(String storageName) {
        String ext = storageName.substring(storageName.lastIndexOf("."));
        String actualName = storageName.substring(0,storageName.lastIndexOf("_"));
        actualName = actualName+ext;
        return actualName;
    }
    
    public void createFailureFiles(String filename, StringBuilder failedRecords, String ext) {
        String destinationDirectory;
        try {
            destinationDirectory = storageHandlerImpl.GetDocStorePath() + "importplans";
            
            if(!StringUtil.isNullOrEmpty(filename.substring(filename.lastIndexOf(".")))){
                ext = filename.substring(filename.lastIndexOf("."));
            }
//            if(StringUtil.isNullOrEmpty(ext)) {
//                ext = filename.substring(filename.lastIndexOf("."));
//            }
            filename = filename.substring(0,filename.lastIndexOf("."));

            java.io.FileOutputStream failurefileOut = new java.io.FileOutputStream(destinationDirectory + "/" + filename+ImportLog.failureTag+ext);
            failurefileOut.write(failedRecords.toString().getBytes());
            failurefileOut.flush();
            failurefileOut.close();
        } catch (Exception ex) {
            System.out.println("\nError file write [success/failed] " + ex);
        }
    }
    
    private Customer getCustomerByCode(String customerCode, String companyID) throws AccountingException {
        Customer customer = null;
        try{
        if (!StringUtil.isNullOrEmpty(customerCode) && !StringUtil.isNullOrEmpty(companyID)) {
            KwlReturnObject retObj = accCustomerDAOobj.getCustomerByCode(customerCode, companyID);
            if (retObj != null && !retObj.getEntityList().isEmpty()) {
                customer = (Customer) retObj.getEntityList().get(0);
            }
        }
        }catch(Exception ex){
            Logger.getLogger(accInvoiceController.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
            throw new AccountingException("System Failure while fetching customer");
        }
        return customer;
    }
    private Customer getCustomerByCodeOrName(String customerCode, String companyID) throws AccountingException {
        Customer customer = null;
        try{
        if (!StringUtil.isNullOrEmpty(customerCode) && !StringUtil.isNullOrEmpty(companyID)) {
            KwlReturnObject retObj = accCustomerDAOobj.getCustomerByCodeOrName(customerCode, companyID);
            if (retObj != null && !retObj.getEntityList().isEmpty()) {
                customer = (Customer) retObj.getEntityList().get(0);
            }
        }
        }catch(Exception ex){
            Logger.getLogger(accInvoiceController.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
            throw new AccountingException("System Failure while fetching customer");
        }
        return customer;
    }
    private Term getTermIdByDays(int days, String companyId) throws AccountingException {
        Term term = null;
        try{
        if (!StringUtil.isNullOrEmpty(companyId)&&days!=0) {
            KwlReturnObject retObj = accCustomerDAOobj.getTermIdByDays(days, companyId);
            if (retObj != null && !retObj.getEntityList().isEmpty()) {
                term = (Term) retObj.getEntityList().get(0);
            }
        }
        }catch(Exception ex){
            Logger.getLogger(accInvoiceController.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
            throw new AccountingException("System Failure while fetching term");
        }
        return term;
    }
    
    private Vendor getVendorByCode(String vendorCode, String companyID) throws AccountingException {
        Vendor vendor = null;
        try {
            if (!StringUtil.isNullOrEmpty(vendorCode) && !StringUtil.isNullOrEmpty(companyID)) {
                KwlReturnObject retObj = accVendorDAOObj.getVendorByCode(vendorCode, companyID);
                if (retObj != null && !retObj.getEntityList().isEmpty()) {
                    vendor = (Vendor) retObj.getEntityList().get(0);
                }
            }
        } catch (Exception ex) {
            Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
            throw new AccountingException("System Failure while fetching vendor");
        }
        return vendor;
    }
    
    private Account getAccountByCode(String accountCode, String companyID) throws AccountingException {
        Account account = null;
        try {
            if (!StringUtil.isNullOrEmpty(accountCode) && !StringUtil.isNullOrEmpty(companyID)) {
                KwlReturnObject retObj = accAccountDAOobj.getAccountFromCode(companyID, accountCode);
                if (retObj != null && !retObj.getEntityList().isEmpty()) {
                    account = (Account) retObj.getEntityList().get(0);
                }
            }
        } catch (Exception ex) {
            Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
            throw new AccountingException("System Failure while fetching Account");
        }
        return account;
    }
    private Tax getGSTByCode(String accountCode, String companyID) throws AccountingException {
        Tax tax = null;
        try {
            if (!StringUtil.isNullOrEmpty(accountCode) && !StringUtil.isNullOrEmpty(companyID)) {
                KwlReturnObject retObj = accAccountDAOobj.getTaxFromCode(companyID, accountCode);
                if (retObj != null && !retObj.getEntityList().isEmpty()) {
                    tax = (Tax) retObj.getEntityList().get(0);
                }
            }
        } catch (Exception ex) {
            Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
            throw new AccountingException("System Failure while fetching Account");
        }
        return tax;
    }
    
    private Product getProductByName(String productCode, String companyID) throws AccountingException {
        Product product = null;
        try {
            if (!StringUtil.isNullOrEmpty(productCode) && !StringUtil.isNullOrEmpty(companyID)) {

                HashMap<String, Object> dataMap = new HashMap<String, Object>();

                dataMap.put("productName", productCode);
                dataMap.put(Constants.companyKey, companyID);

                KwlReturnObject retObj = accProductObj.getProductByName(dataMap);
                if (retObj != null && !retObj.getEntityList().isEmpty()) {
                    product = (Product) retObj.getEntityList().get(0);
                }
            }
        } catch (Exception ex) {
            Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
            throw new AccountingException("System Failure while fetching Product");
        }
        return product;
    }
    
    private Product getProductByCode(String productCode, String companyID) throws AccountingException {
        Product product = null;
        try {
            if (!StringUtil.isNullOrEmpty(productCode) && !StringUtil.isNullOrEmpty(companyID)) {
                KwlReturnObject retObj = accProductObj.getProductByProdID(productCode,companyID,false);
                if (retObj != null && !retObj.getEntityList().isEmpty()) {
                    product = (Product) retObj.getEntityList().get(0);
                }
            }
        } catch (Exception ex) {
            Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
            throw new AccountingException("System Failure while fetching Product");
        }
        return product;
    }

    
    
    public ModelAndView getAgeingAnalysisDetailsJasper(HttpServletRequest request, HttpServletResponse response) throws ServiceException, SessionExpiredException {
        Map<String, Object> agedReceivableMap = new HashMap<String, Object>();
        String view = "agedReceivable";
        AgedReceivable agedReceivable = new AgedReceivable();
        ArrayList<AgedReceivable> agedReceivableList = new ArrayList<AgedReceivable>();
        try {
            request.setAttribute("isAgeingExport", true);
            int templateflag=Integer.parseInt(request.getParameter("templateflag"));
            boolean isLandscape = request.getParameter("isLandscape") != null ? Boolean.parseBoolean(request.getParameter("isLandscape")) : false;
            String companyid = sessionHandlerImpl.getCompanyid(request);
            KwlReturnObject cmpresult = accountingHandlerDAOobj.getObject(Company.class.getName(), companyid);
            Company company = (Company) cmpresult.getEntityList().get(0);
            int isgroupcomboDate = request.getParameter("groupcombo")!=null?Integer.parseInt(request.getParameter("groupcombo")):0;
         
            agedReceivable.setName(company.getCompanyName());
            agedReceivable.setEmail(company.getEmailID() != null ? company.getEmailID() : "");
            agedReceivable.setFax(company.getFaxNumber() != null ? company.getFaxNumber() : "");
            agedReceivable.setPhone(company.getPhoneNumber() != null ? company.getPhoneNumber() : "");

            KWLCurrency currency = company.getCurrency();
            agedReceivable.setCurrencyinword(currency.getName().toString());

            SimpleDateFormat df = new SimpleDateFormat(Constants.ddMMyyyy);
            String endDate = df.format(authHandler.getDateOnlyFormat().parse(request.getParameter("enddate")));
            Calendar c = Calendar.getInstance();
            c.setTime(df.parse(endDate)); // number of days to substract
            //           c.add(Calendar.DATE, -1);
            endDate = df.format(c.getTime());
//            String startDate = df.format(authHandler.getDateOnlyFormat().parse(request.getParameter("stdate")));
            String startDate = null;
            if (!StringUtil.isNullOrEmpty(request.getParameter("stdate")) && !(request.getParameter("stdate").toString()).equals("undefined")) {
                startDate = df.format(authHandler.getGlobalDateFormat().parse(request.getParameter("stdate")));
            } else {
                startDate = df.format(authHandler.getGlobalDateFormat().parse(Constants.opening_Date));
            }
            if (!StringUtil.isNullOrEmpty(request.getParameter("asofdate")) && !request.getParameter("asofdate").equals("undefined")) {
                 String asOfDate=df.format(authHandler.getGlobalDateFormat().parse(request.getParameter("asofdate")));
                 agedReceivable.setAsOnDate("As of Date : " +asOfDate);
            }
             if (!StringUtil.isNullOrEmpty(request.getParameter("datefilter"))&&!request.getParameter("datefilter").equals("undefined")) {
                 String agedon = "Aged On :"; 
                 if(Integer.parseInt(request.getParameter("datefilter"))==Constants.agedDueDate1to30Filter){
                        agedon +=Constants.agedDueDate1to30Days;
                    } else if(Integer.parseInt(request.getParameter("datefilter"))==Constants.agedInvoiceDateFilter){
                        agedon +=Constants.agedInvoiceDate;                      
                    } else if (Integer.parseInt(request.getParameter("datefilter")) == Constants.agedInvoiceDate0to30Filter) {
                        agedon += Constants.agedInvoiceDate0to30;
                    } else{
                        agedon +=Constants.agedDueDate0to30Days;                 
                    }
                    agedReceivable.setAgedOn(agedon);
              }
//            String date = "From Date : " + startDate + ",To Date : " + endDate;
            String date = "To Date : " + endDate;
            agedReceivable.setDateRange(date);
            KwlReturnObject result = accountingHandlerDAOobj.getObject(CompanyAccountPreferences.class.getName(), sessionHandlerImpl.getCompanyid(request));
            CompanyAccountPreferences companyAccountPreferences = (CompanyAccountPreferences) result.getEntityList().get(0);
            String fiscalstart = df.format(companyAccountPreferences.getFinancialYearFrom());
            Calendar c1 = Calendar.getInstance();
            c1.setTime(df.parse(fiscalstart));
            c1.add(Calendar.YEAR, 1); // number of years to add
            c1.add(Calendar.DATE, -1);
            String fiscalend = df.format(c1.getTime());
            String period = fiscalstart + " - " + fiscalend;
            agedReceivable.setStartDate(period);
            int duration = Integer.parseInt(request.getParameter("duration"));
            agedReceivable.setAmountDue1Header(duration + " & Below");
            agedReceivable.setAmountDue2Header(duration + 1 + "-" + (2 * duration));
            agedReceivable.setAmountDue3Header("Over " + (2 * duration));
            if ((templateflag == Constants.F1RecreationLeasing_templateflag || templateflag == Constants.F1Recreation_templateflag ) && isgroupcomboDate!=1) 
            {  agedReceivable.setCurentAmountDueHeader("Current");//Current
               agedReceivable.setAmountDue1Header(1+"-"+duration);
               agedReceivable.setAmountDue3Header((2 * duration)+1+"-"+(3 * duration));//61-90
               agedReceivable.setAmountDue4Header((3 * duration)+1+"-"+(4 * duration));//91-120
               agedReceivable.setAmountDue5Header((4 * duration)+1+"-"+(5 * duration));//121-150
               agedReceivable.setAmountDue6Header((5 * duration)+1+"-"+(6 * duration));//151-180
               agedReceivable.setAmountDue7Header(">"+(6 * duration));//>180
            }
            agedReceivableMap = getAgedReceivableJasperDetails(request, response);

            agedReceivableList.add(agedReceivable);
            agedReceivableMap.put("companyaddress", AccountingAddressManager.getCompanyDefaultBillingAddress(companyid, accountingHandlerDAOobj));
            agedReceivableMap.put("format", "pdf");
            agedReceivableMap.put("person", "Customer");
            String fileName1 = StorageHandler.GetDocStorePath() + companyid + "_template" + FileUploadHandler.getCompanyImageExt();
            String fileName2 = StorageHandler.GetDocStorePath()+ companyid + "_onlyLogo" + FileUploadHandler.getCompanyImageExt();
            if(templateflag==Constants.sms_templateflag || templateflag==Constants.smsholding_templateflag){
                agedReceivableMap.put("imagePath", fileName2);
            }else{
                agedReceivableMap.put("imagePath", fileName1);
            }

            agedReceivableMap.put("datasource", new JRBeanCollectionDataSource(agedReceivableList));
            String mainReportName="AgedReceivable";
            String subReportName="AgedReceivableSubReport";
             if (isgroupcomboDate == 1) {
                subReportName = "AgedReceivableSortByDateSubreport";
            } else if (templateflag == Constants.F1RecreationLeasing_templateflag || templateflag == Constants.F1Recreation_templateflag) {
                mainReportName = "AgedReceivableDetailedAllInterval";
                subReportName = "AgedReceivableDetailedSubReportAllInterval";
            }
            if(isLandscape){
                mainReportName+="Landscape";
                subReportName+="Landscape";
            }
            InputStream inputStream = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/"+mainReportName+".jrxml");
            JasperDesign jasperDesign = JRXmlLoader.load(inputStream);
            JasperReport jasperReport = JasperCompileManager.compileReport(jasperDesign);

            InputStream inputStreamSubReport = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/"+subReportName+".jrxml");
            JasperDesign jasperDesignSubReport = JRXmlLoader.load(inputStreamSubReport);
            JasperReport jasperReportSubReport = JasperCompileManager.compileReport(jasperDesignSubReport);

            agedReceivableMap.put("AgedReceivableSubReport", jasperReportSubReport);
            JRBeanCollectionDataSource beanColDataSource = new JRBeanCollectionDataSource(agedReceivableList);
            JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, agedReceivableMap, beanColDataSource);
            response.setHeader("Content-Disposition", "attachment;filename=" + "AgedReceivableReportView_v1.pdf");
            
            JRPdfExporter exp = new JRPdfExporter();
            exp.setParameter(JRExporterParameter.JASPER_PRINT, jasperPrint);
            exp.setParameter(JRPdfExporterParameter.OUTPUT_STREAM, response.getOutputStream());
            exp.exportReport();
            
        } catch (Exception ex) {
            Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
        }
        return new ModelAndView("", agedReceivableMap);
    }

    public Map<String, Object> getAgedReceivableJasperDetails(HttpServletRequest request, HttpServletResponse response) throws ServiceException, SessionExpiredException {
        ArrayList<AgedReceivableSubReport> agedReceivableSubReportList = new ArrayList<>();
        Map<String, Object> agedReceivableMap = new HashMap<>();
        SimpleDateFormat df = new SimpleDateFormat("dd/MM/yyyy");
        JSONObject jobj = new JSONObject();
        try {
            String companyid = sessionHandlerImpl.getCompanyid(request);
            KwlReturnObject companyresult = accountingHandlerDAOobj.getObject(Company.class.getName(), companyid);
            Company company = (Company) companyresult.getEntityList().get(0);
            KWLCurrency currency = company.getCurrency();

            boolean isGroupBy = request.getParameter("fieldid") == null ? false : (request.getParameter("fieldid").equals("Customer") ? false : true);
            ModelAndView result = getInvoicesMerged(request, response);
            String model = (String) result.getModel().get("model");
            JSONObject objJSONObj = new JSONObject(model);
            JSONArray DataJArr = objJSONObj.getJSONArray(Constants.data);
            HashMap<String, Double> currencyTotal = new HashMap<>();
            int length = isGroupBy ? DataJArr.length() - 1 : DataJArr.length();

            double amountdue1 = 0.0; 
            for (int i = 0; i < length; i++) {
                AgedReceivableSubReport agedReceivableSubReport = new AgedReceivableSubReport();
                jobj = DataJArr.getJSONObject(i);
                String groupby = "";
                if (isGroupBy) {
                    groupby = StringUtil.isNullOrEmpty(jobj.optString("dimensionvalue")) ? "" : jobj.getString("dimensionvalue");
                } else {
                    groupby = StringUtil.isNullOrEmpty(jobj.optString("personname")) ? "" : jobj.getString("personname");
                    if (jobj.optString("personid") != null && !StringUtil.isNullOrEmpty(jobj.optString("personid"))) {
                        KwlReturnObject cmpresult = accountingHandlerDAOobj.getObject(Customer.class.getName(), jobj.getString("personid"));
                        Customer customer = (Customer) cmpresult.getEntityList().get(0);
                        agedReceivableSubReport.setCustomerCode(customer.getAcccode() != null ? customer.getAcccode() : "");
                        agedReceivableSubReport.setCreditlimit(StringUtil.isNullOrEmpty(Double.toString(customer.getCreditlimit())) ? "" : authHandler.formattedAmount(customer.getCreditlimit(), companyid));
                        agedReceivableSubReport.setCreditdays(customer.getCreditTerm() != null ? Integer.toString(customer.getCreditTerm().getTermdays()) : "");
                    }
                }
                agedReceivableSubReport.setCustomerName(groupby);
                agedReceivableSubReport.setBasecurr(currency.getName() != null ? currency.getName().toString() : currency.getSymbol());
                agedReceivableSubReport.setDate(jobj.optString("date") != null ? df.format(Date.parse(jobj.getString("date"))) : "");
                KwlReturnObject currencyresult = accountingHandlerDAOobj.getObject(KWLCurrency.class.getName(), jobj.getString(Constants.currencyKey));
                KWLCurrency currency1 = (KWLCurrency) currencyresult.getEntityList().get(0);
                agedReceivableSubReport.setExchangerate(jobj.getString("exchangerate"));
                agedReceivableSubReport.setCurrency(currency1.getName());
                agedReceivableSubReport.setEntryNumber(jobj.optString("billno") != null ? jobj.getString("billno") : "");
                if (currencyTotal.containsKey(currency1.getName())) {
                    Double newValue = 0.0;
                    Double oldValue = 0.0;
                    oldValue = currencyTotal.get(currency1.getName());
                    newValue = jobj.optString("amountdue") != null ? Double.parseDouble(jobj.getString("amountdue")) : 0.0;
                    currencyTotal.put(currency1.getName(), oldValue + newValue);
                } else {
                    currencyTotal.put(currency1.getName(), jobj.optString("amountdue") != null ? Double.parseDouble(jobj.getString("amountdue")) : 0.0);
                }
                agedReceivableSubReport.setEntryType(jobj.optString("type") != null ? jobj.getString("type") : "");
                agedReceivableSubReport.setDocumentAmount(jobj.optString("amountdue") != null ? Double.parseDouble(jobj.getString("amountdue")) : 0.0);
                agedReceivableSubReport.setTotalinbase(jobj.optString("amountdueinbase") != null ? Double.parseDouble(jobj.getString("amountdueinbase")) : 0.0);
//                agedReceivableSubReport.setAmountDue1(jobj.optString("amountdue2") != null ? Double.parseDouble(jobj.getString("amountdue2")) : 0.0);
                //Show current and 1-30 Days Column amount in 30 and Below Column (in PDF Case).   jobj.getString("amountdue1") :- Current , jobj.optString("amountdue2") - 1-30. 
                amountdue1 = (jobj.optString("amountdue1") != null ? Double.parseDouble(jobj.getString("amountdue1")) : 0.00) + (jobj.optString("amountdue2") != null ? Double.parseDouble(jobj.getString("amountdue2")) : 0.00);
                agedReceivableSubReport.setAmountDue1(amountdue1);
                agedReceivableSubReport.setAmountDue2(jobj.optString("amountdue3") != null ? Double.parseDouble(jobj.getString("amountdue3")) : 0.0);
                double total = 0.0;
                if (jobj.optString("amountdue1") != null) {
                    agedReceivableSubReport.setDueAmount1(Double.parseDouble(jobj.getString("amountdue1")));
                }
                if (jobj.optString("amountdue2") != null) {
                    agedReceivableSubReport.setDueAmount2(Double.parseDouble(jobj.getString("amountdue2")));
                }
                if (jobj.optString("amountdue3") != null) {
                    agedReceivableSubReport.setDueAmount3(Double.parseDouble(jobj.getString("amountdue3")));
                }
                if (jobj.optString("amountdue4") != null) {
                    total = total + Double.parseDouble(jobj.getString("amountdue4"));
                    agedReceivableSubReport.setDueAmount4(Double.parseDouble(jobj.getString("amountdue4")));
                }
                if (jobj.optString("amountdue5") != null) {
                    total = total + Double.parseDouble(jobj.getString("amountdue5"));
                    agedReceivableSubReport.setDueAmount5(Double.parseDouble(jobj.getString("amountdue5")));
                }
                if (jobj.optString("amountdue6") != null) {
                    total = total + Double.parseDouble(jobj.getString("amountdue6"));
                    agedReceivableSubReport.setDueAmount6(Double.parseDouble(jobj.getString("amountdue6")));
                }
                if (jobj.optString("amountdue7") != null) {
                    total = total + Double.parseDouble(jobj.getString("amountdue7"));
                    agedReceivableSubReport.setDueAmount7(Double.parseDouble(jobj.getString("amountdue7")));
                }
                double amountdue8 = 0;
//                        double accruedBalance = 0;
                if (jobj.optString("amountdue8") != null) {
                    amountdue8 = Double.parseDouble(jobj.getString("amountdue8"));
                    total = total + amountdue8;
                }
//                        if (jobj.optString("accruedbalance") != null) {
//                            accruedBalance = Double.parseDouble(jobj.getString("accruedbalance"));
//                            total = total + accruedBalance;
//                        }
                if (jobj.optString("amountdue9") != null) {
                    amountdue8 += Double.parseDouble(jobj.getString("amountdue9"));
                    total = total + Double.parseDouble(jobj.getString("amountdue9"));
//                                agedReceivableSubReport.setDueAmount9(Double.parseDouble(jobj.getString("amountdue9")));
                }
                if (jobj.optString("amountdue10") != null) {
                    amountdue8 += Double.parseDouble(jobj.getString("amountdue10"));
                    total = total + Double.parseDouble(jobj.getString("amountdue10"));
//                                agedReceivableSubReport.setDueAmount9(Double.parseDouble(jobj.getString("amountdue9")));
                }
                if (jobj.optString("amountdue11") != null) {
                    amountdue8 += Double.parseDouble(jobj.getString("amountdue11"));
                    total = total + Double.parseDouble(jobj.getString("amountdue11"));
//                                agedReceivableSubReport.setDueAmount9(Double.parseDouble(jobj.getString("amountdue9")));
                }

                agedReceivableSubReport.setDueAmount8(amountdue8);

                agedReceivableSubReport.setBasecurr(currency.getName());
                agedReceivableSubReport.setAmountDue3(total);
                agedReceivableSubReportList.add(agedReceivableSubReport);
            }

            List<CurrencyWiseGrandTotals> ctList = new ArrayList<>();
            for (String key : currencyTotal.keySet()) {
                Double value = currencyTotal.get(key);
                CurrencyWiseGrandTotals ct = new CurrencyWiseGrandTotals();
                ct.setCurrency(key);
                ct.setTotal(value);
                ctList.add(ct);
            }

            AgedReceivableSubReport lastList = agedReceivableSubReportList.get(agedReceivableSubReportList.size() - 1);
            lastList.setCtList(ctList);
            agedReceivableSubReportList.remove(agedReceivableSubReportList.size() - 1);
            agedReceivableSubReportList.add(lastList);

            agedReceivableMap.put("AgedReceivableSubReportData", new JRBeanCollectionDataSource(agedReceivableSubReportList));

        } catch (JSONException ex) {
            Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
            throw ServiceException.FAILURE("getAgedReceivableJasperDetails : " + ex.getMessage(), ex);
        }
        return agedReceivableMap;
    }

    public ModelAndView getAgeingAnalysisSummariesedJasper(HttpServletRequest request, HttpServletResponse response) throws ServiceException, SessionExpiredException {
        Map<String, Object> agedReceivableMap = new HashMap<String, Object>();
        String view ="";
        String filename ="";
        AgedReceivable agedReceivable = new AgedReceivable();
        ArrayList<AgedReceivable> agedReceivableList = new ArrayList<AgedReceivable>();
        try {
            int templateflag=Integer.parseInt(request.getParameter("templateflag"));
            String satsFileName ="AgedReceivableWithoutAging.jrxml";
            String satsSubReportFileName ="";
            boolean isLandscape = request.getParameter("isLandscape") != null ? Boolean.parseBoolean(request.getParameter("isLandscape")) : false;
            boolean reportWithoutAging = Boolean.parseBoolean(request.getParameter("reportWithoutAging"));
            String companyid = sessionHandlerImpl.getCompanyid(request);
            if (templateflag == Constants.sats_templateflag) {
                if (reportWithoutAging) {
                    satsSubReportFileName = "SATSAgedReceivableWithoutAgingSubReport.jrxml";
                    filename = "AgedReceivableWithoutAging";
                } else {
                    satsSubReportFileName = "SATSAgedReceivableSummarisedSubReport.jrxml";
                    filename = "AgedReceivableSummarised";
                }
            } else if (templateflag == Constants.F1RecreationLeasing_templateflag || templateflag == Constants.F1Recreation_templateflag) {
                if (reportWithoutAging) {
                    filename = "AgedReceivableWithoutAging";
                } else {
                    filename = "AgedReceivablesAllIntervals";
                }
            } else {
                if (reportWithoutAging) {
                    filename = "AgedReceivableWithoutAging";
                } else {
                    filename = "AgedReceivableSummarised";
                }
            }
            KwlReturnObject cmpresult = accountingHandlerDAOobj.getObject(Company.class.getName(), companyid);
            Company company = (Company) cmpresult.getEntityList().get(0);

            agedReceivable.setName(company.getCompanyName());
            agedReceivable.setEmail(company.getEmailID() != null ? company.getEmailID() : "");
            agedReceivable.setFax(company.getFaxNumber() != null ? company.getFaxNumber() : "");
            agedReceivable.setPhone(company.getPhoneNumber() != null ? company.getPhoneNumber() : "");

            KWLCurrency currency = company.getCurrency();
            agedReceivable.setCurrencyinword(currency.getName().toString());

            SimpleDateFormat df = new SimpleDateFormat(Constants.ddMMyyyy);
            String endDate = df.format(authHandler.getGlobalDateFormat().parse(request.getParameter("enddate")));
            Calendar c = Calendar.getInstance();
            c.setTime(df.parse(endDate)); // number of days to substract
            //           c.add(Calendar.DATE, -1);
            endDate = df.format(c.getTime());
//            String startDate = df.format(authHandler.getGlobalDateFormat().parse(request.getParameter("stdate")));
            String startDate = null;
            if (!StringUtil.isNullOrEmpty(request.getParameter("stdate")) && !request.getParameter("stdate").equals("undefined")) {
                startDate = df.format(authHandler.getGlobalDateFormat().parse(request.getParameter("stdate")));
            } else {
                startDate = df.format(authHandler.getGlobalDateFormat().parse(Constants.opening_Date));
            }
            if (!StringUtil.isNullOrEmpty(request.getParameter("asofdate")) && !request.getParameter("asofdate").equals("undefined")) {
                String asOfDate = df.format(authHandler.getGlobalDateFormat().parse(request.getParameter("asofdate")));
                agedReceivable.setAsOnDate("As of Date : " + asOfDate);

            }
            if (!StringUtil.isNullOrEmpty(request.getParameter("datefilter")) && !request.getParameter("datefilter").equals("undefined")) {
                String agedon = "Aged On :";
                if (Integer.parseInt(request.getParameter("datefilter")) == Constants.agedDueDate1to30Filter) {
                    agedon += Constants.agedDueDate1to30Days;
                } else if (Integer.parseInt(request.getParameter("datefilter")) == Constants.agedInvoiceDateFilter) {
                    agedon += Constants.agedInvoiceDate;
                } else if (Integer.parseInt(request.getParameter("datefilter")) == Constants.agedInvoiceDate0to30Filter) {
                    agedon += Constants.agedInvoiceDate0to30;
                } else {
                    agedon += Constants.agedDueDate0to30Days;
                }
                agedReceivable.setAgedOn(agedon);
            }
            String date = "To Date : " + endDate;
//            String date = "From Date : " + startDate + ",To Date : " + endDate;
            agedReceivable.setDateRange(date);
            KwlReturnObject result = accountingHandlerDAOobj.getObject(CompanyAccountPreferences.class.getName(), sessionHandlerImpl.getCompanyid(request));
            CompanyAccountPreferences companyAccountPreferences = (CompanyAccountPreferences) result.getEntityList().get(0);
            String fiscalstart = df.format(companyAccountPreferences.getFinancialYearFrom());
            Calendar c1 = Calendar.getInstance();
            c1.setTime(df.parse(fiscalstart));
            c1.add(Calendar.YEAR, 1); // number of years to add
            c1.add(Calendar.DATE, -1);
            String fiscalend = df.format(c1.getTime());
            String period = fiscalstart + " - " + fiscalend;
            agedReceivable.setStartDate(period);
            int duration = Integer.parseInt(request.getParameter("duration"));
            agedReceivable.setAmountDue1Header(duration + " & Below");
            agedReceivable.setAmountDue2Header(duration + 1 + "-" + (2 * duration));
            agedReceivable.setAmountDue3Header("Over " + (2 * duration));
           if (templateflag == Constants.F1RecreationLeasing_templateflag || templateflag == Constants.F1Recreation_templateflag) 
            {  agedReceivable.setCurentAmountDueHeader("Current");//Current
               agedReceivable.setAmountDue1Header(1+"-"+duration);
               agedReceivable.setAmountDue3Header((2 * duration)+1+"-"+(3 * duration));//61-90
               agedReceivable.setAmountDue4Header((3 * duration)+1+"-"+(4 * duration));//91-120
               agedReceivable.setAmountDue5Header((4 * duration)+1+"-"+(5 * duration));//121-150
               agedReceivable.setAmountDue6Header((5 * duration)+1+"-"+(6 * duration));//151-180
               agedReceivable.setAmountDue7Header(">"+(6 * duration));//>180
                
            }
            agedReceivableMap = getAgedReceivableSummarisedJasper(request, response);
            String asonDate = df.format(authHandler.getGlobalDateFormat().parse(request.getParameter("asofdate")));
            boolean flag=false;
            if (templateflag == Constants.Monzone_templateflag) {   //Show following footer details only in Monzone template
                flag=true;
                agedReceivable.setAsOnDate("As on - "+asonDate);
                double amountdueinbasecol1 = StringUtil.isNullOrEmpty(agedReceivableMap.get("amountdueinbasecol1").toString()) ? 0 : Double.parseDouble(agedReceivableMap.get("amountdueinbasecol1").toString());
                double amountdueinbasecol2 = StringUtil.isNullOrEmpty(agedReceivableMap.get("amountdueinbasecol2").toString()) ? 0 : Double.parseDouble(agedReceivableMap.get("amountdueinbasecol2").toString());
                double amountdueinbasecol3 = StringUtil.isNullOrEmpty(agedReceivableMap.get("amountdueinbasecol3").toString()) ? 0 : Double.parseDouble(agedReceivableMap.get("amountdueinbasecol3").toString());
                agedReceivable.setColTotalHeader("Sub Total (" + currency.getName().toString()+")");
                agedReceivable.setAmountDue1Total(authHandler.formattedCommaSeparatedAmount(amountdueinbasecol1, companyid));
                agedReceivable.setAmountDue2Total(authHandler.formattedCommaSeparatedAmount(amountdueinbasecol2, companyid));
                agedReceivable.setAmountDue3Total(authHandler.formattedCommaSeparatedAmount(amountdueinbasecol3, companyid));
            }
            agedReceivableMap.put("isMonzone", flag);
            agedReceivableList.add(agedReceivable);
            agedReceivableMap.put("format", "pdf");
            agedReceivableMap.put("person", "Customer");
             String fileName1 = StorageHandler.GetDocStorePath() + companyid + "_template" + FileUploadHandler.getCompanyImageExt();
            String fileName2 = StorageHandler.GetDocStorePath()+ companyid + "_onlyLogo" + FileUploadHandler.getCompanyImageExt();
            if(templateflag==Constants.sms_templateflag || templateflag==Constants.smsholding_templateflag){
                agedReceivableMap.put("imagePath", fileName2);
            }else{
                agedReceivableMap.put("imagePath", fileName1);
            }
            agedReceivableMap.put("datasource", new JRBeanCollectionDataSource(agedReceivableList));
            agedReceivableMap.put("companyaddress", AccountingAddressManager.getCompanyDefaultBillingAddress(companyid, accountingHandlerDAOobj));
            String orientation="";
            if(isLandscape){
                orientation+="Landscape";
            }
            InputStream inputStream = null;
            InputStream inputStreamSubReport = null;
            if (templateflag == Constants.sats_templateflag) {
                inputStream = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/" + satsFileName);
                inputStreamSubReport = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/" + satsSubReportFileName);
            } else {
                inputStream = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/" + filename + orientation + ".jrxml");
                inputStreamSubReport = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/" + filename + "SubReport" + orientation + ".jrxml");
            }

            JasperDesign jasperDesign = JRXmlLoader.load(inputStream);
            JasperReport jasperReport = JasperCompileManager.compileReport(jasperDesign);
            JasperDesign jasperDesignSubReport = JRXmlLoader.load(inputStreamSubReport);
            JasperReport jasperReportSubReport = JasperCompileManager.compileReport(jasperDesignSubReport);
            agedReceivableMap.put("AgedReceivableSubReport", jasperReportSubReport);
            JRBeanCollectionDataSource beanColDataSource = new JRBeanCollectionDataSource(agedReceivableList);
            JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, agedReceivableMap, beanColDataSource);

            JRPdfExporter exp = new JRPdfExporter();
            exp.setParameter(JRPdfExporterParameter.JASPER_PRINT, jasperPrint);
            exp.setParameter(JRPdfExporterParameter.OUTPUT_STREAM, response.getOutputStream());
            response.setHeader("Content-Disposition", "attachment;filename=\"" + filename+"_v1.pdf\"");
            exp.exportReport();

        } catch (Exception ex) {
            Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
        }
        return new ModelAndView(view, agedReceivableMap);
    }

    public Map<String, Object> getAgedReceivableSummarisedJasper(HttpServletRequest request, HttpServletResponse response) throws ServiceException, SessionExpiredException, ParseException {
        ArrayList<AgedReceivableSubReport> agedReceivableSubReportList = new ArrayList<>();
        HashMap<String, AgedReceivableSubReport> arSubReportListMap = new HashMap<>();
        Map<String, Object> agedReceivableMap = new HashMap<>();
        JSONObject jobj = new JSONObject();
        JSONObject mainJobj = new JSONObject();
        double finaltotal = 0;
        double amountdueinbasecol1 = 0;   //TO show in PDF
        double amountdueinbasecol2 = 0;
        double amountdueinbasecol3 = 0;
        try {

            String companyid = sessionHandlerImpl.getCompanyid(request);
            int templateflag = StringUtil.isNullOrEmpty(request.getParameter("templateflag")) ? 0 : Integer.parseInt(request.getParameter("templateflag"));   //ERP-6383
            KwlReturnObject companyresult = accountingHandlerDAOobj.getObject(Company.class.getName(), companyid);
            Company company = (Company) companyresult.getEntityList().get(0);
            KWLCurrency currency = company.getCurrency();

            HashMap<String, Object> requestParams = new HashMap<String, Object>();
            requestParams.put(COMPANYID, sessionHandlerImpl.getCompanyid(request));
            requestParams.put(GCURRENCYID, sessionHandlerImpl.getCurrencyID(request));
            requestParams.put(DATEFORMAT, authHandler.getDateOnlyFormat());
            requestParams.put(START, request.getParameter(START));
            requestParams.put(LIMIT, request.getParameter(LIMIT));
            requestParams.put(SS, request.getParameter(SS));
            requestParams.put(ACCID, request.getParameter(ACCID));
            requestParams.put(CASHONLY, request.getParameter(CASHONLY));
            requestParams.put(CREDITONLY, request.getParameter(CREDITONLY));
            requestParams.put(IGNOREZERO, request.getParameter(IGNOREZERO));
            requestParams.put(CURDATE, request.getParameter(CURDATE));
            requestParams.put(PERSONGROUP, request.getParameter(PERSONGROUP));
            requestParams.put(ISAGEDGRAPH, request.getParameter(ISAGEDGRAPH));
            requestParams.put(VENDORID, request.getParameter(VENDORID));
            requestParams.put(NONDELETED, request.getParameter(NONDELETED));
            requestParams.put(DURATION, request.getParameter(DURATION));
            requestParams.put(ISDISTRIBUTIVE, request.getParameter(ISDISTRIBUTIVE));
            requestParams.put(WITHINVENTORY, request.getParameter(WITHINVENTORY));
            requestParams.put(Constants.df, authHandler.getDateOnlyFormat());
            requestParams.put(Constants.REQ_startdate, request.getParameter(Constants.REQ_startdate));
            requestParams.put(Constants.REQ_enddate, request.getParameter(Constants.REQ_enddate));
            requestParams.put("pendingapproval", (request.getParameter("pendingapproval") != null) ? Boolean.parseBoolean(request.getParameter("pendingapproval")) : false);
            requestParams.put("istemplate", (request.getParameter("istemplate") != null) ? Integer.parseInt(request.getParameter("istemplate")) : 0);
            requestParams.put("datefilter", request.getParameter("datefilter"));
            requestParams.put("asofdate", request.getParameter("asofdate"));
            requestParams.put("isAged", request.getParameter("isAged"));
            requestParams.put("exportAgedPayables", true);
            requestParams.put("isAgedPayables", true);
            boolean isGroupBy = request.getParameter("fieldid") == null ? false : (request.getParameter("fieldid").equals("Customer") ? false : true);
            JSONArray allTransaction = new JSONArray();
            JSONObject mainobj = new JSONObject();
            request.setAttribute("isCurrencyDetails", false);
            request.setAttribute("detailedPDF", true);
            mainobj = accInvoiceServiceDAO.getCustomerAgedReceivableMerged(request, false, true);

            allTransaction = mainobj.getJSONArray(Constants.data);
            
            /**
             * AR Summary View Export (PDF)
             */
            String sort = "";
            String dir = "";
            Map<String, JSONArray> jArrMap;
            if (!StringUtil.isNullOrEmpty(request.getParameter("dir")) && !StringUtil.isNullOrEmpty(request.getParameter("sort"))) {
                dir = request.getParameter("dir");
                sort = request.getParameter("sort");
            }
            if (sort.equals("code") && !(sort.equals(""))) {
                jArrMap = AccountingManager.getSortedArrayMapBasedOnJSONAttribute(allTransaction, InvoiceConstants.code, dir);
            } else {
                jArrMap = AccountingManager.getSortedArrayMapBasedOnJSONAttribute(allTransaction, InvoiceConstants.personinfo,dir);
            }
                        
            for (String key : jArrMap.keySet()) {

                JSONArray jarr = jArrMap.get(key);

                AgedReceivableSubReport agedReceivableSubReport = new AgedReceivableSubReport();
                ArrayList<AgedReceivableSubReportCurrencyWiseAgeing> ageingList = new ArrayList< AgedReceivableSubReportCurrencyWiseAgeing>();

                for (int i = 0; i < jarr.length(); i++) {
                    jobj = jarr.getJSONObject(i);

                    if (i == 0) {
                        String personid = StringUtil.isNullOrEmpty(jobj.optString("personid")) ? "" : jobj.getString("personid");
                        String groupby = "";
                        if (isGroupBy) {
                            groupby = StringUtil.isNullOrEmpty(jobj.optString("dimensionname")) ? "" : jobj.getString("dimensionname");
                        } else {
                            groupby = StringUtil.isNullOrEmpty(jobj.optString("personname")) ? "" : jobj.getString("personname");
                            if (jobj.optString("personid") != null && !StringUtil.isNullOrEmpty(jobj.optString("personid"))) {
                                agedReceivableSubReport.setCustomerId(personid);
                                KwlReturnObject cmpresult = accountingHandlerDAOobj.getObject(Customer.class.getName(), personid);
                                Customer customer = (Customer) cmpresult.getEntityList().get(0);
                                agedReceivableSubReport.setCustomerCode(customer.getAcccode() != null ? customer.getAcccode() : "");
                                if (templateflag != Constants.Monzone_templateflag) {   //ERP-6383 : Hide Credit Limit & Days in Monzone Template
                                    agedReceivableSubReport.setCreditlimit(StringUtil.isNullOrEmpty(Double.toString(customer.getCreditlimit())) ? "" : authHandler.formattedAmount(customer.getCreditlimit(), companyid));
                                    agedReceivableSubReport.setCreditdays(customer.getCreditTerm() != null ? Integer.toString(customer.getCreditTerm().getTermdays()) : "");
                                }
                            }
                        }
                        agedReceivableSubReport.setCustomerName(groupby);
                        agedReceivableSubReport.setBasecurr(currency.getName() != null ? currency.getName().toString() : currency.getSymbol());

                        agedReceivableSubReport.setCustomerId(jobj.optString("personid") != null ? jobj.getString("personid") : "");
//                        agedReceivableSubReport.setCustomerName(jobj.optString("personname") != null ? jobj.getString("personname") : "");
//                        agedReceivableSubReport.setBasecurr(currency.getName() != null ? currency.getName().toString() : currency.getSymbol());
                        if (templateflag != Constants.Monzone_templateflag) {
                            agedReceivableSubReport.setCredit("Credit Limit : ");
                            agedReceivableSubReport.setCreditdaystitle("Credit Days : ");
                        }
                        if (jobj.optString("personid") != null && !StringUtil.isNullOrEmpty(jobj.optString("personid"))) {
                            KwlReturnObject cmpresult = accountingHandlerDAOobj.getObject(Customer.class.getName(), jobj.getString("personid"));
                            Customer customer = (Customer) cmpresult.getEntityList().get(0);

                            agedReceivableSubReport.setCustomerCode(customer.getAcccode() != null ? customer.getAcccode() : "");

                            if (templateflag != Constants.Monzone_templateflag) {   //Hide Debit Limit & Days in Monzone Template
                                agedReceivableSubReport.setCreditlimit(StringUtil.isNullOrEmpty(Double.toString(customer.getCreditlimit())) ? "" : authHandler.formattedAmount(customer.getCreditlimit(), companyid));
                                agedReceivableSubReport.setCreditdays(customer.getCreditTerm() != null ? Integer.toString(customer.getCreditTerm().getTermdays()) : "");
                            }
                        }

                        agedReceivableSubReport.setCurrency(jobj.optString("currencyname") != null ? jobj.getString("currencyname") : "");
//                        agedReceivableSubReport.setDocumentAmount(jobj.optString("total") != null ? Double.parseDouble(jobj.getString("total")) : 0.00);
                        agedReceivableSubReport.setTotalinbase(jobj.optString("totalinbase") != null ? Double.parseDouble(jobj.getString("totalinbase")) : 0.00);
                        double amountdue1 = (jobj.optString("amountdue1") != null ? Double.parseDouble(jobj.getString("amountdue1")) : 0.00) + (jobj.optString("amountdue2") != null ? Double.parseDouble(jobj.getString("amountdue2")) : 0.00);
                        agedReceivableSubReport.setAmountDue1(amountdue1);
                        agedReceivableSubReport.setAmountDue2(jobj.optString("amountdue3") != null ? Double.parseDouble(jobj.getString("amountdue3")) : 0.00);
                        finaltotal += jobj.optString("totalinbase") != null ? Double.parseDouble(jobj.getString("totalinbase")) : 0.00;
                        double total = 0.0;
                        if (jobj.optString("amountdue1") != null) {
                            agedReceivableSubReport.setDueAmount1(Double.parseDouble(jobj.getString("amountdue1")));
                        }
                        if (jobj.optString("amountdue2") != null) {
                            agedReceivableSubReport.setDueAmount2(Double.parseDouble(jobj.getString("amountdue2")));
                        }
                        if (jobj.optString("amountdue3") != null) {
                            agedReceivableSubReport.setDueAmount3(Double.parseDouble(jobj.getString("amountdue3")));
                        }
                        if (jobj.optString("amountdue4") != null) {
                            total = total + Double.parseDouble(jobj.getString("amountdue4"));
                            agedReceivableSubReport.setDueAmount4(Double.parseDouble(jobj.getString("amountdue4")));
                        }
                        if (jobj.optString("amountdue5") != null) {
                            total = total + Double.parseDouble(jobj.getString("amountdue5"));
                            agedReceivableSubReport.setDueAmount5(Double.parseDouble(jobj.getString("amountdue5")));
                        }
                        if (jobj.optString("amountdue6") != null) {
                            total = total + Double.parseDouble(jobj.getString("amountdue6"));
                            agedReceivableSubReport.setDueAmount6(Double.parseDouble(jobj.getString("amountdue6")));
                        }
                        if (jobj.optString("amountdue7") != null) {
                            total = total + Double.parseDouble(jobj.getString("amountdue7"));
                            agedReceivableSubReport.setDueAmount7(Double.parseDouble(jobj.getString("amountdue7")));
                        }
                        double amountdue8 = 0;
//                                double accruedBalance = 0;
                        if (jobj.optString("amountdue8") != null) {
                            amountdue8 = Double.parseDouble(jobj.getString("amountdue8"));
                            total = total + amountdue8;
                        }
                        if (jobj.optString("amountdue9") != null) {
                            amountdue8 += Double.parseDouble(jobj.getString("amountdue9"));
                            total = total + Double.parseDouble(jobj.getString("amountdue9"));
//                                agedReceivableSubReport.setDueAmount9(Double.parseDouble(jobj.getString("amountdue9")));
                        }
                        if (jobj.optString("amountdue10") != null) {
                            amountdue8 += Double.parseDouble(jobj.getString("amountdue10"));
                            total = total + Double.parseDouble(jobj.getString("amountdue10"));
//                                agedReceivableSubReport.setDueAmount9(Double.parseDouble(jobj.getString("amountdue9")));
                        }
                        if (jobj.optString("amountdue11") != null) {
                            amountdue8 += Double.parseDouble(jobj.getString("amountdue11"));
                            total = total + Double.parseDouble(jobj.getString("amountdue11"));
//                                agedReceivableSubReport.setDueAmount9(Double.parseDouble(jobj.getString("amountdue9")));
                        }
//                                if (jobj.optString("accruedbalance") != null) {
//                                    accruedBalance = Double.parseDouble(jobj.getString("accruedbalance"));
//                                    total = total + accruedBalance;
//                                }
                        agedReceivableSubReport.setDueAmount8(amountdue8);
                        //ERP-6383 : TO show in PDF for Monzone
                        amountdueinbasecol1 += (Double.parseDouble(jobj.optString("amountdueinbase1")) + Double.parseDouble(jobj.optString("amountdueinbase2")));
                        amountdueinbasecol2 += Double.parseDouble(jobj.optString("amountdueinbase3"));

                        amountdueinbasecol3 += (Double.parseDouble(jobj.optString("amountdueinbase4")) + Double.parseDouble(jobj.optString("amountdueinbase5")) + Double.parseDouble(jobj.optString("amountdueinbase6")) + Double.parseDouble(jobj.optString("amountdueinbase7")) + Double.parseDouble(jobj.optString("amountdueinbase8")) + Double.parseDouble(jobj.optString("amountdueinbase10")) + Double.parseDouble(jobj.optString("amountdueinbase9")) + Double.parseDouble(jobj.optString("amountdueinbase11")));

                        agedReceivableSubReport.setTotalinbase(jobj.optString("totalinbase") != null ? Double.parseDouble(jobj.getString("totalinbase")) : 0.00);
                        agedReceivableSubReport.setAmountDue3(total);

                    } else if (!isGroupBy) {

                        JSONObject jobj1 = jobj;
                        AgedReceivableSubReportCurrencyWiseAgeing ageing = new AgedReceivableSubReportCurrencyWiseAgeing();
                        ageing.setCurrency(jobj1.optString("currencyname") != null ? jobj1.getString("currencyname") : "");
//                        ageing.setDocumentAmount(jobj1.optString("total") != null ? Double.parseDouble(jobj1.getString("total")) : 0.00);
                        ageing.setAmountDue1((jobj1.optString("amountdue1") != null ? Double.parseDouble(jobj1.getString("amountdue1")) : 0.00) + (jobj1.optString("amountdue2") != null ? Double.parseDouble(jobj1.getString("amountdue2")) : 0.00));
                        ageing.setAmountDue2(jobj1.optString("amountdue3") != null ? Double.parseDouble(jobj1.getString("amountdue3")) : 0.00);
                        double total1 = 0.0;
                        if (jobj1.optString("amountdue1") != null) {
                            ageing.setDueAmount1(Double.parseDouble(jobj1.getString("amountdue1")));
                        }
                        if (jobj1.optString("amountdue2") != null) {
                            ageing.setDueAmount2(Double.parseDouble(jobj1.getString("amountdue2")));
                        }
                        if (jobj1.optString("amountdue3") != null) {
                            ageing.setDueAmount3(Double.parseDouble(jobj1.getString("amountdue3")));
                        }
                        if (jobj1.optString("amountdue4") != null) {
                            total1 = total1 + Double.parseDouble(jobj1.getString("amountdue4"));
                            ageing.setDueAmount4(Double.parseDouble(jobj1.getString("amountdue4")));
                        }
                        if (jobj1.optString("amountdue5") != null) {
                            total1 = total1 + Double.parseDouble(jobj1.getString("amountdue5"));
                            ageing.setDueAmount5(Double.parseDouble(jobj1.getString("amountdue5")));
                        }
                        if (jobj1.optString("amountdue6") != null) {
                            total1 = total1 + Double.parseDouble(jobj1.getString("amountdue6"));
                            ageing.setDueAmount6(Double.parseDouble(jobj1.getString("amountdue6")));
                        }
                        if (jobj1.optString("amountdue7") != null) {
                            total1 = total1 + Double.parseDouble(jobj1.getString("amountdue7"));
                            ageing.setDueAmount7(Double.parseDouble(jobj1.getString("amountdue7")));
                        }
                        double amountdue8 = 0;
//                                double accruedBalance = 0;
                        if (jobj1.optString("amountdue8") != null) {
                            amountdue8 = Double.parseDouble(jobj1.getString("amountdue8"));
                            total1 = total1 + amountdue8;
                        }
                        if (jobj.optString("amountdue9") != null) {
                            amountdue8 += Double.parseDouble(jobj.getString("amountdue9"));
                            total1 = total1 + Double.parseDouble(jobj.getString("amountdue9"));
//                                agedReceivableSubReport.setDueAmount9(Double.parseDouble(jobj.getString("amountdue9")));
                        }
                        if (jobj.optString("amountdue10") != null) {
                            amountdue8 += Double.parseDouble(jobj.getString("amountdue10"));
                            total1 = total1 + Double.parseDouble(jobj.getString("amountdue10"));
//                                agedReceivableSubReport.setDueAmount9(Double.parseDouble(jobj.getString("amountdue9")));
                        }
                        if (jobj.optString("amountdue11") != null) {
                            amountdue8 += Double.parseDouble(jobj.getString("amountdue11"));
                            total1 = total1 + Double.parseDouble(jobj.getString("amountdue11"));
//                                agedReceivableSubReport.setDueAmount9(Double.parseDouble(jobj.getString("amountdue9")));
                        }

//                            if (jobj1.optString("accruedbalance") != null) {
//                                    accruedBalance = Double.parseDouble(jobj1.getString("accruedbalance"));
//                                    total1 = total1 + accruedBalance;
//                                }
                        ageing.setDueAmount8(amountdue8);

                        ageing.setTotalinbase(jobj1.optString("totalinbase") != null ? Double.parseDouble(jobj1.getString("totalinbase")) : 0.00);
                        ageing.setAmountDue3(total1);
                        ageingList.add(ageing);

                    }//else

                }//for

                agedReceivableSubReport.setAgedReceivableSubReportCurrencyWiseAgeings(ageingList);
                agedReceivableSubReportList.add(agedReceivableSubReport);
                arSubReportListMap.put(key, agedReceivableSubReport);

            }//for

            agedReceivableMap.put("AgedReceivableSubReportData", new JRBeanCollectionDataSource(agedReceivableSubReportList));
            agedReceivableMap.put("amountdueinbasecol1", authHandler.round(amountdueinbasecol1, companyid));
            agedReceivableMap.put("amountdueinbasecol2", authHandler.round(amountdueinbasecol2, companyid));
            agedReceivableMap.put("amountdueinbasecol3", authHandler.round(amountdueinbasecol3, companyid));
            agedReceivableMap.put("total", finaltotal);
            agedReceivableMap.put("basecurr", currency.getName() != null ? currency.getName().toString() : currency.getSymbol());

        } catch (JSONException ex) {
            Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
            throw ServiceException.FAILURE("getAgedReceivableSummarisedJasper : " + ex.getMessage(), ex);
        }
        return agedReceivableMap;
    }    

    public ModelAndView getInvoiceLinkedInTransaction(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        String msg = "";
        boolean issuccess = false;
        try {
            jobj = getInvoiceLinkedInTransaction(request);
            issuccess = true;
        } catch (SessionExpiredException ex) {
            msg = ex.getMessage();
            Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ServiceException ex) {
            msg = "accInvoiceControllerCMN.getInvoiceLinkedInTransaction:" + ex.getMessage();
            Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            msg = "accInvoiceControllerCMN.getInvoiceLinkedInTransaction:" + ex.getMessage();
            Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                jobj.put("success", issuccess);
                jobj.put("msg", msg);
            } catch (JSONException ex) {
                Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return new ModelAndView(Constants.jsonView, "model", jobj.toString());
    }

    public JSONObject getInvoiceLinkedInTransaction(HttpServletRequest request) throws SessionExpiredException, ServiceException {
        JSONObject jobj = new JSONObject();
        JSONArray jArr = new JSONArray();
        try {
            HashMap<String, Object> requestParams = AccountingManager.getGlobalParams(request);
            String billid = request.getParameter(Constants.billid);
            String companyid = sessionHandlerImpl.getCompanyid(request);
            DateFormat df = authHandler.getDateOnlyFormat();
            String isFixedAsset = request.getParameter(Constants.isFixedAsset);
            String currencyid = request.getParameter(Constants.globalCurrencyKey) != null ? request.getParameter(Constants.globalCurrencyKey) : sessionHandlerImpl.getCurrencyID(request);
            double tax = 0;
            KwlReturnObject curresult = accountingHandlerDAOobj.getObject(KWLCurrency.class.getName(), currencyid);
            KWLCurrency currency = (KWLCurrency) curresult.getEntityList().get(0);
            DateFormat userdf = (DateFormat) requestParams.get(Constants.userdf);
            if (!StringUtil.isNullOrEmpty(billid)) {

                KwlReturnObject cnresult = accInvoiceDAOobj.getCreditNoteLinkedWithInvoice(billid, companyid);
                List listc = cnresult.getEntityList();
               // Iterator itr1 = listc.iterator();
               for (int index = 0; index < listc.size(); index++) {
                    Object[] linkedCNObj = (Object[]) listc.get(index);
                    String orderid = (String) linkedCNObj[0];
                    Date linkdate =  (Date)linkedCNObj[1];

                    JSONObject obj = new JSONObject();
                    KwlReturnObject objItr = accountingHandlerDAOobj.getObject(CreditNote.class.getName(), orderid);
                    CreditNote creditNote = (CreditNote) objItr.getEntityList().get(0);
                    JournalEntry je = creditNote.getJournalEntry();
                    JournalEntryDetail details=null;
                    if (!creditNote.isOtherwise()) {
                        KwlReturnObject resultObject = accountingHandlerDAOobj.getObject(JournalEntryDetail.class.getName(), creditNote.getCustomerEntry().getID());
                        details = (JournalEntryDetail) resultObject.getEntityList().get(0);
                    }
                    int type=0; // SI->CN
                    Customer customer = creditNote.getCustomer();
                    obj.put(Constants.billid, creditNote.getID());
                    obj.put(Constants.companyKey, creditNote.getCompany().getCompanyID());
                    obj.put("withoutinventory", "");
                    obj.put("transactionNo", creditNote.getCreditNoteNumber());   //delivery order no
                    obj.put("date", df.format(creditNote.getCreationDate()));  //date of delivery order
                    obj.put("linkingdate", df.format(linkdate));
                    obj.put("mergedCategoryData", "Credit Note");  //type of data
                    obj.put("personname", customer.getName());
                    obj.put("isReturnNote", creditNote.getSalesReturn() == null ? false : true);
                    obj.put("noteid", creditNote.getID());
                    obj.put("isOldRecord", creditNote.isOldRecord());
                    obj.put(Constants.companyKey, creditNote.getCompany().getCompanyID());
                    obj.put("companyname", creditNote.getCompany().getCompanyName());
                    obj.put("noteno", creditNote.getCreditNoteNumber());
                    obj.put("journalEntryNo",je!=null? je.getEntryNumber():"");
                    obj.put("personid", customer.getID());
                    obj.put("amount", creditNote.isOtherwise() ? creditNote.getCnamount() : details.getAmount());
                    obj.put("date", df.format(creditNote.getCreationDate()));
                    obj.put("memo", creditNote.getMemo());
                    obj.put("deleted", creditNote.isDeleted());
                    obj.put("isprinted", creditNote.isPrinted());
                    obj.put("openflag", creditNote.isOpenflag());
                    obj.put("isCreatedFromReturnForm", (creditNote.getSalesReturn() != null) ? true : false);
                    obj.put("cntype", creditNote.getCntype());
                    obj.put("costcenterid", creditNote.getCostcenter() == null ? "" : creditNote.getCostcenter().getID());
                    obj.put("costcenterName", creditNote.getCostcenter() == null ? "" : creditNote.getCostcenter().getName());
                    obj.put("externalcurrencyrate", !creditNote.isIsOpeningBalenceCN() ? je.getExternalCurrencyRate() : creditNote.getExternalCurrencyRate());
                    obj.put("currencysymbol", (creditNote.getCurrency() == null ? currency.getSymbol() : creditNote.getCurrency().getSymbol()));
                    obj.put(Constants.currencyKey, (creditNote.getCurrency() == null ? currency.getCurrencyID() : creditNote.getCurrency().getCurrencyID()));
                    obj.put("journalentryid", je!=null?je.getID():"");
                    Set<CreditNoteTaxEntry> cnTaxEntryDetails = creditNote.getCnTaxEntryDetails();
                    String reason = "";
                    double totalCnTax = 0;
                    if (cnTaxEntryDetails != null && !cnTaxEntryDetails.isEmpty()) {

                        for (CreditNoteTaxEntry noteTaxEntry : cnTaxEntryDetails) {
                            reason += ((noteTaxEntry.getReason() != null) ? noteTaxEntry.getReason().getValue() : "") + ",";
                            if (noteTaxEntry.isDebitForMultiCNDN()) {
                                totalCnTax += noteTaxEntry.getTaxamount();
                            } else {
                                totalCnTax -= noteTaxEntry.getTaxamount();
                            }
                        }
                    }
                    obj.put("taxamount", authHandler.round(totalCnTax, companyid));
                    double cnTotalAmount = creditNote.isOtherwise() ? creditNote.getCnamount() : details.getAmount();
                    obj.put("amountbeforegst", authHandler.round(cnTotalAmount - totalCnTax, companyid));
                    if (!StringUtil.isNullOrEmpty(reason)) {
                        obj.put("reason", reason.substring(0, reason.length() - 1));
                    } else {
                        obj.put("reason", reason);
                    }

                    obj.put(Constants.SEQUENCEFORMATID, creditNote.getSeqformat() != null ? creditNote.getSeqformat().getID() : "");
                    KwlReturnObject result = null;
                    if(!creditNote.isIsOpeningBalenceCN() ||  je!=null){
                        result = accJournalEntryobj.getJournalEntryDetail(je.getID(), sessionHandlerImpl.getCompanyid(request));
                        Iterator iterator = result.getEntityList().iterator();
                        while (iterator.hasNext()) {
                            JournalEntryDetail jed = (JournalEntryDetail) iterator.next();
                            Account account = null;
                            account = jed.getAccount();
                            if (account.getMastertypevalue() == Group.ACCOUNTTYPE_GST) {//GST transaction.
                                if (jed.isDebit()) {
                                    tax = jed.getAmount();
                                }
                            }
                        }  
                    }
                    result = accCreditNoteDAOobj.getTotalTax_TotalDiscount(creditNote.getID());
                    double totTax = 0, totDiscount = 0;
                    if (result != null && result.getEntityList() != null) {
                        Iterator resItr = result.getEntityList().iterator();
                        Object[] sumRow = (Object[]) resItr.next();
                        if (sumRow[0] != null) {
                            totTax = Double.parseDouble(sumRow[0].toString());
                        }
                        if (sumRow[1] != null) {
                            totDiscount = Double.parseDouble(sumRow[1].toString());
                        }
                    }

                    obj.put("noteSubTotal", cnTotalAmount+ totDiscount - totTax);
                    obj.put("notetax", tax);
                    obj.put("totalTax", totTax);
                    obj.put("totalDiscount", totDiscount);
                    /*
                     * Credit note will be allowed to copy in following case- 1.
                     * CN against sales invoice - NOT allowed 2. CN otherwise -
                     * allowed if no invoice is linked to CN at time of creation
                     * or later on 3. CN against Vendor - Allowed
                     */
                    if (creditNote.getCntype() == Constants.CreditNoteAgainstSalesInvoice) {
                        obj.put("isCopyAllowed", false);
                    }
                      HashMap<String, Integer> FieldMap = null;
                    HashMap<String, Object> fieldrequestParams = new HashMap();
                    HashMap<String, String> replaceFieldMap = new HashMap<String, String>();
                    HashMap<String, String> customFieldMap = new HashMap<String, String>();
                    HashMap<String, String> customDateFieldMap = new HashMap<String, String>();
                    fieldrequestParams.put(Constants.filter_names, Arrays.asList(Constants.companyid, Constants.moduleid));
                    fieldrequestParams.put(Constants.filter_values, Arrays.asList(sessionHandlerImpl.getCompanyid(request), Constants.Acc_Credit_Note_ModuleId));
                    FieldMap = accAccountDAOobj.getFieldParamsCustomMap(fieldrequestParams, replaceFieldMap, customFieldMap, customDateFieldMap);
                    Map<String, Object> variableMap = new HashMap<String, Object>();
                    HashMap<String, Object> invDetailRequestParams = new HashMap<String, Object>();
                    if (!creditNote.isIsOpeningBalenceCN() || je != null) {
                        ArrayList Detailfilter_names = new ArrayList(), Detailfilter_params = new ArrayList();
                        Detailfilter_names.add(Constants.companyKey);
                        Detailfilter_params.add(creditNote.getCompany().getCompanyID());
                        Detailfilter_names.add("journalentryId");
                        Detailfilter_params.add(creditNote.getJournalEntry().getID());
                        Detailfilter_names.add("moduleId");
                        Detailfilter_params.add(Constants.Acc_Credit_Note_ModuleId + "");
                        invDetailRequestParams.put("filter_names", Detailfilter_names);
                        invDetailRequestParams.put("filter_params", Detailfilter_params);
                        KwlReturnObject idcustresult = accJournalEntryobj.getJournalEntryCustomData(invDetailRequestParams);
                        if (idcustresult.getEntityList().size() > 0) {
                            AccJECustomData jeCustom = (AccJECustomData) idcustresult.getEntityList().get(0);
                            AccountingManager.setCustomColumnValues(jeCustom, FieldMap, replaceFieldMap, variableMap);
                            JSONObject params = new JSONObject();
                            boolean isExport = (request.getAttribute(Constants.isExport) == null) ? false : true;
                            params.put(Constants.isExport, isExport);
                            fieldDataManagercntrl.addCustomData(variableMap, customFieldMap, customDateFieldMap, obj, params);
                        }
                    }
                    obj.put("type",type);
                    jArr.put(obj);
                }
                /*
                 * While linking invoice is link to debit note
                 *
                 */
                KwlReturnObject linkedDebitNoteResult = accInvoiceDAOobj.getDebitNoteLinkedWithInvoice(billid, companyid);

                List listDn = linkedDebitNoteResult.getEntityList();
                for (int index = 0; index < listDn.size(); index++) {
                    String orderid = (String) listDn.get(index);

                    JSONObject obj = new JSONObject();
                    KwlReturnObject objItr = accountingHandlerDAOobj.getObject(DebitNote.class.getName(), orderid);
                    DebitNote debitNote = (DebitNote) objItr.getEntityList().get(0);
                    JournalEntry je = debitNote.getJournalEntry();
                    /*
                     * There is no use of getting object of Journal Entry
                     * Details because used code for that has been commented
                     * below that is not being used here
                     */
                    Customer vendor = debitNote.getCustomer();
                    double amountdue = debitNote.isOtherwise() ? debitNote.getDnamountdue() : 0;
                    double amountDueOriginal = debitNote.isOtherwise() ? debitNote.getDnamountdue() : 0;
                    obj.put("transactionNo", debitNote.getDebitNoteNumber());
                    obj.put("billid", debitNote.getID());
                    obj.put("companyid", debitNote.getCompany().getCompanyID());
                    obj.put("withoutinventory", false);
                    obj.put("date", df.format(debitNote.getCreationDate()));  //date of delivery order
                    obj.put("linkingdate", df.format(debitNote.getCreationDate()));
                    obj.put("journalEntryNo", (debitNote.isIsOpeningBalenceDN()) ? "" : debitNote.getJournalEntry().getEntryNumber());  //journal entry no
                    obj.put("mergedCategoryData", "Debit Note");  //type of data
                    obj.put("personname", vendor.getName());
                    obj.put("personid", vendor.getID());
                    obj.put("deleted", debitNote.isDeleted());
                    obj.put("otherwise", debitNote.isOtherwise());
                    obj.put("isprinted", debitNote.isPrinted());
                    obj.put("openflag", debitNote.isOpenflag());
                    obj.put("isCreatedFromReturnForm", (debitNote.getPurchaseReturn() != null) ? true : false);
                    obj.put("cntype", debitNote.getDntype());
                    obj.put("costcenterid", debitNote.getCostcenter() == null ? "" : debitNote.getCostcenter().getID());
                    obj.put("costcenterName", debitNote.getCostcenter() == null ? "" : debitNote.getCostcenter().getName());
                    obj.put("memo", debitNote.getMemo());
                    obj.put("journalentryid", debitNote.isIsOpeningBalenceDN() ? "" : je.getID());
                    obj.put("currencysymbol", (debitNote.getCurrency() == null ? currency.getSymbol() : debitNote.getCurrency().getSymbol()));
                    obj.put("currencyid", (debitNote.getCurrency() == null ? currency.getCurrencyID() : debitNote.getCurrency().getCurrencyID()));
                    obj.put("entryno", debitNote.isIsOpeningBalenceDN() ? "" : je.getEntryNumber());
                    obj.put("noteno", debitNote.getDebitNoteNumber());
                    obj.put("noteid", debitNote.getID());
                    obj.put("exchangeratefortransaction", (amountDueOriginal <= 0 && amountdue <= 0) ? 0 : (amountdue / amountDueOriginal));
                    obj.put("amountdue", 0);
                    obj.put("amountduenonnegative", 0);

                    obj.put("accountid", debitNote.getAccount() == null ? "" : debitNote.getAccount().getID());
                    obj.put("accountnames", debitNote.getAccount() == null ? "" : debitNote.getAccount().getName());
                    obj.put("currencyidtransaction", currencyid);
                    obj.put("externalcurrencyrate", debitNote.isIsOpeningBalenceDN() ? debitNote.getExchangeRateForOpeningTransaction() : je.getExternalCurrencyRate());
                    obj.put("currencysymboltransaction", (debitNote.getCurrency() == null ? currency.getSymbol() : debitNote.getCurrency().getSymbol()));
                    if (debitNote.getDntype() == Constants.DebitNoteAgainstPurchaseInvoice) {
                        obj.put("isCopyAllowed", false);
                    }
                    obj.put("currencycode", (debitNote.getCurrency() == null ? currency.getCurrencyCode() : debitNote.getCurrency().getCurrencyCode()));
                    obj.put(Constants.SEQUENCEFORMATID, debitNote.getSeqformat() != null ? debitNote.getSeqformat().getID() : "");
                    String reason = "";
                    if (!StringUtil.isNullOrEmpty(reason)) {
                        obj.put("reason", reason.substring(0, reason.length() - 1));
                    } else {
                        obj.put("reason", reason);
                    }
                    obj.put("isOpeningBalanceTransaction", debitNote.isIsOpeningBalenceDN());
                    obj.put("type", 8);
                    HashMap<String, String> replaceFieldMap = new HashMap<String, String>();
                    HashMap<String, String> customFieldMap = new HashMap<String, String>();
                    HashMap<String, String> customDateFieldMap = new HashMap<String, String>();
                    HashMap<String, Integer> FieldMap = null;
                    HashMap<String, Object> fieldrequestParams = new HashMap();
                    fieldrequestParams.put(Constants.filter_names, Arrays.asList(Constants.companyid, Constants.moduleid));
                    fieldrequestParams.put(Constants.filter_values, Arrays.asList(companyid, Constants.Acc_Debit_Note_ModuleId));
                    FieldMap = accAccountDAOobj.getFieldParamsCustomMap(fieldrequestParams, replaceFieldMap, customFieldMap, customDateFieldMap);
                    Map<String, Object> variableMap = new HashMap<String, Object>();
                    HashMap<String, Object> cnDetailRequestParams = new HashMap<String, Object>();
                    ArrayList Detailfilter_names = new ArrayList(), Detailfilter_params = new ArrayList();
                    Detailfilter_names.add("companyid");
                    Detailfilter_params.add(debitNote.getCompany().getCompanyID());
                    Detailfilter_names.add("journalentryId");
                    Detailfilter_params.add(debitNote.isIsOpeningBalenceDN() ? "" : debitNote.getJournalEntry().getID());
                    Detailfilter_names.add("moduleId");
                    Detailfilter_params.add(Constants.Acc_Debit_Note_ModuleId + "");
                    cnDetailRequestParams.put("filter_names", Detailfilter_names);
                    cnDetailRequestParams.put("filter_params", Detailfilter_params);
                    KwlReturnObject idcustresult = accJournalEntryobj.getJournalEntryCustomData(cnDetailRequestParams);
                    if (idcustresult.getEntityList().size() > 0) {
                        AccJECustomData jeCustom = (AccJECustomData) idcustresult.getEntityList().get(0);
                        AccountingManager.setCustomColumnValues(jeCustom, FieldMap, replaceFieldMap, variableMap);
                        JSONObject params = new JSONObject();
                        boolean isExport = (request.getAttribute("isExport") == null) ? false : true;
                        params.put("isExport", isExport);
                        fieldDataManagercntrl.addCustomData(variableMap, customFieldMap, customDateFieldMap, obj, params);
                    }
                    jArr.put(obj);
                }

                KwlReturnObject linkedOverchargeCNListResult = accInvoiceDAOobj.getCreditNoteForOverchargeLinkedWithInvoice(billid, companyid);
                List overchargeCNList = linkedOverchargeCNListResult.getEntityList();
                for (Object overchargeCNList1 : overchargeCNList) {
                    String noteId = (String) overchargeCNList1;
                    JSONObject obj = new JSONObject();
                    KwlReturnObject objItr = accountingHandlerDAOobj.getObject(CreditNote.class.getName(), noteId);
                    CreditNote creditNote = (CreditNote) objItr.getEntityList().get(0);
                    JournalEntry je = creditNote.getJournalEntry();
                    Customer customer = creditNote.getCustomer();
                    obj.put("billid", creditNote.getID());
                    obj.put("transactionNo", creditNote.getCreditNoteNumber());
                    obj.put("noteno", creditNote.getCreditNoteNumber());
                    obj.put("noteid", creditNote.getID());
                    obj.put("journalEntryNo", (creditNote.isIsOpeningBalenceCN()) ? "" : je.getEntryNumber());
                    obj.put("journalentryid", creditNote.isIsOpeningBalenceCN() ? "" : je.getID());
                    obj.put("entryno", creditNote.isIsOpeningBalenceCN() ? "" : je.getEntryNumber());
                    obj.put("mergedCategoryData", "Credit Note");//Type of data
                    obj.put("withoutinventory", false);
                    obj.put("date", df.format(creditNote.getCreationDate()));
                    obj.put("linkingdate", df.format(creditNote.getCreationDate()));
                    obj.put("personname", customer.getName());
                    obj.put("personid", customer.getID());
                    obj.put("otherwise", creditNote.isOtherwise());
                    obj.put("isCreatedFromReturnForm", (creditNote.getSalesReturn() != null));
                    obj.put("cntype", creditNote.getCntype());
                    obj.put("costcenterid", creditNote.getCostcenter() == null ? "" : creditNote.getCostcenter().getID());
                    obj.put("costcenterName", creditNote.getCostcenter() == null ? "" : creditNote.getCostcenter().getName());
                    obj.put("memo", creditNote.getMemo() != null ? creditNote.getMemo() : "");
                    obj.put("currencysymbol", (creditNote.getCurrency() == null ? currency.getSymbol() : creditNote.getCurrency().getSymbol()));
                    obj.put("currencyid", (creditNote.getCurrency() == null ? currency.getCurrencyID() : creditNote.getCurrency().getCurrencyID()));
                    obj.put("amountdue", creditNote.getCnamountdue());
                    obj.put("accountid", creditNote.getAccount() == null ? "" : creditNote.getAccount().getID());
                    obj.put("accountnames", creditNote.getAccount() == null ? "" : creditNote.getAccount().getName());
                    obj.put("currencyidtransaction", currencyid);
                    obj.put("externalcurrencyrate", creditNote.isIsOpeningBalenceCN() ? creditNote.getExchangeRateForOpeningTransaction() : je.getExternalCurrencyRate());
                    obj.put("currencysymboltransaction", (creditNote.getCurrency() == null ? currency.getSymbol() : creditNote.getCurrency().getSymbol()));
                    obj.put("isCopyAllowed", false);
                    obj.put("currencycode", (creditNote.getCurrency() == null ? currency.getCurrencyCode() : creditNote.getCurrency().getCurrencyCode()));
                    obj.put(Constants.SEQUENCEFORMATID, creditNote.getSeqformat() != null ? creditNote.getSeqformat().getID() : "");
                    obj.put("isOpeningBalanceTransaction", creditNote.isIsOpeningBalenceCN());
                    obj.put("salesPersonID", creditNote.getSalesPerson() == null ? "" : creditNote.getSalesPerson().getID());
                    obj.put("lasteditedby", creditNote.getModifiedby() != null ? (creditNote.getModifiedby().getFirstName() + " " + creditNote.getModifiedby().getLastName()) : "");
                    obj.put("type", 0);//CN for Overcharged SI
                    
                    boolean includeprotax = false;
                    Set<CreditNoteAgainstVendorGst> rows = creditNote.getRowsGst();
                    for (CreditNoteAgainstVendorGst row : rows) {
                        if (row.getTax() != null) {
                            includeprotax = true;
                            break;
                        }
                    }
                    obj.put("includeprotax", includeprotax);

                    HashMap<String, String> replaceFieldMap = new HashMap<>();
                    HashMap<String, String> customFieldMap = new HashMap<>();
                    HashMap<String, String> customDateFieldMap = new HashMap<>();
                    HashMap<String, Integer> FieldMap = null;
                    HashMap<String, Object> fieldrequestParams = new HashMap();
                    fieldrequestParams.put(Constants.filter_names, Arrays.asList(Constants.companyid, Constants.moduleid));
                    fieldrequestParams.put(Constants.filter_values, Arrays.asList(companyid, Constants.Acc_Debit_Note_ModuleId));
                    FieldMap = accAccountDAOobj.getFieldParamsCustomMap(fieldrequestParams, replaceFieldMap, customFieldMap, customDateFieldMap);
                    Map<String, Object> variableMap = new HashMap<>();
                    HashMap<String, Object> cnDetailRequestParams = new HashMap<>();
                    ArrayList Detailfilter_names = new ArrayList(), Detailfilter_params = new ArrayList();
                    Detailfilter_names.add("companyid");
                    Detailfilter_params.add(companyid);
                    Detailfilter_names.add("journalentryId");
                    Detailfilter_params.add(je.getID());
                    Detailfilter_names.add("moduleId");
                    Detailfilter_params.add(Constants.Acc_Debit_Note_ModuleId + "");
                    cnDetailRequestParams.put(Constants.filter_names, Detailfilter_names);
                    cnDetailRequestParams.put(Constants.filter_params, Detailfilter_params);
                    KwlReturnObject idcustresult = accJournalEntryobj.getJournalEntryCustomData(cnDetailRequestParams);
                    if (idcustresult.getEntityList().size() > 0) {
                        AccJECustomData jeCustom = (AccJECustomData) idcustresult.getEntityList().get(0);
                        AccountingManager.setCustomColumnValues(jeCustom, FieldMap, replaceFieldMap, variableMap);
                        JSONObject params = new JSONObject();
                        params.put(Constants.isExport, false);
                        fieldDataManagercntrl.addCustomData(variableMap, customFieldMap, customDateFieldMap, obj, params);
                    }
                    jArr.put(obj);
                }
                
                KwlReturnObject linkedRPResult = accInvoiceDAOobj.getAdvanceReceiptLinkedWithInvoice(billid, companyid);
                List listLinkedPaymentDetail = linkedRPResult.getEntityList();
                Set<String> receiptIds = new HashSet<String>(); // Used to avoid the duplication of payment number when getting details of invoice linking
                for (int index = 0; index < listLinkedPaymentDetail.size(); index++) {
                    Object[] linkedRPObj = (Object[]) listLinkedPaymentDetail.get(index);
                    String orderid = (String) linkedRPObj[0];
                    Date linkdate =  (Date)linkedRPObj[1];
                    receiptIds.add(orderid);
                    JSONObject obj = new JSONObject();
                    KwlReturnObject objItr = accountingHandlerDAOobj.getObject(Receipt.class.getName(), orderid);
                    int type=1; // SI->Advance Receipt
                    Receipt receipt = (Receipt) objItr.getEntityList().get(0);
                    Customer customer = receipt.getCustomer();
                    String jeNumber = (receipt.isIsOpeningBalenceReceipt()) ? "" : receipt.getJournalEntry().getEntryNumber();
                    String jeIds = (receipt.isIsOpeningBalenceReceipt()) ? "" :receipt.getJournalEntry().getID();
                    if (receipt.getJournalEntryForBankCharges() != null) {
                        jeNumber += "<br>" + receipt.getJournalEntryForBankCharges().getEntryNumber();
                        jeIds += "," + receipt.getJournalEntryForBankCharges().getID();
                    }
                    if (receipt.getJournalEntryForBankInterest() != null) {
                        jeNumber += "<br>" + receipt.getJournalEntryForBankInterest().getEntryNumber();
                        jeIds += "," + receipt.getJournalEntryForBankInterest().getID();
                    }
                    obj.put(Constants.billid, receipt.getID());
                    obj.put("linkingdate", df.format(linkdate));  //date of delivery order
                    obj.put(Constants.companyKey, receipt.getCompany().getCompanyID());
                    obj.put("withoutinventory", "");
                    obj.put("transactionNo", receipt.getReceiptNumber());   //payment no
                    obj.put("date", df.format(receipt.getCreationDate()));  //date of delivery order
                    obj.put("journalEntryNo", jeNumber);  //journal entry no
                    obj.put("mergedCategoryData", "Payment Receipt");  //type of data
                    obj.put("personname", customer.getName());
                    obj.put("journalentryid", jeIds);
                    obj.put("paymentwindowtype", receipt.getPaymentWindowType());
                    Date invoiceCreationDate = null;
                    double externalCurrencyRate = 0d;
                    if (receipt.isNormalReceipt()) {
                        externalCurrencyRate = receipt.getJournalEntry().getExternalCurrencyRate();
                    } else {
                        externalCurrencyRate = receipt.getExternalCurrencyRate();
                    }
                    invoiceCreationDate = receipt.getCreationDate();
                    if (receipt.getExternalCurrencyRate() == 0) {
                        KwlReturnObject bAmt = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, 1.0d, receipt.getCurrency().getCurrencyID(), invoiceCreationDate, externalCurrencyRate);
                        obj.put("externalcurrencyrate", 1 / (Double) bAmt.getEntityList().get(0));
                    } else {
                        obj.put("externalcurrencyrate", receipt.getExternalCurrencyRate());
                    }
                     HashMap<String, Object> fieldrequestParamsGlobalLevel = new HashMap();
                        HashMap<String, String> customFieldMapGlobalLevel = new HashMap<String, String>();
                        HashMap<String, String> customDateFieldMapGlobalLevel = new HashMap<String, String>();
                        fieldrequestParamsGlobalLevel.put(Constants.filter_names, Arrays.asList(Constants.companyid, Constants.moduleid));
                        fieldrequestParamsGlobalLevel.put(Constants.filter_values, Arrays.asList(companyid, Constants.Acc_Receive_Payment_ModuleId));
                        HashMap<String, String> replaceFieldMapGlobalLevel = new HashMap<String, String>();

                        HashMap<String, Integer> FieldMapGlobalLevel = accAccountDAOobj.getFieldParamsCustomMap(fieldrequestParamsGlobalLevel, replaceFieldMapGlobalLevel, customFieldMapGlobalLevel, customDateFieldMapGlobalLevel);
                        Map<String, Object> variableMap = new HashMap<String, Object>();
                        HashMap<String, Object> invDetailRequestParams = new HashMap<String, Object>();
                        ArrayList Detailfilter_names = new ArrayList(), Detailfilter_params = new ArrayList();
                        Detailfilter_names.add(Constants.companyKey);
                        Detailfilter_params.add(receipt.getCompany().getCompanyID());
                        Detailfilter_names.add("journalentryId");
                        Detailfilter_params.add((receipt.isIsOpeningBalenceReceipt()) ? "" :receipt.getJournalEntry().getID());
                        Detailfilter_names.add("moduleId");
                        Detailfilter_params.add(Constants.Acc_Receive_Payment_ModuleId + "");
                        invDetailRequestParams.put("filter_names", Detailfilter_names);
                        invDetailRequestParams.put("filter_params", Detailfilter_params);
                        KwlReturnObject idcustresult = accReceiptDAOobj.getReciptPaymentGlobalCustomData(invDetailRequestParams);
                        if (idcustresult.getEntityList().size() > 0) {
                            AccJECustomData jeCustom = (AccJECustomData) idcustresult.getEntityList().get(0);
                            AccountingManager.setCustomColumnValues(jeCustom, FieldMapGlobalLevel, replaceFieldMapGlobalLevel, variableMap);
                            for (Map.Entry<String, Object> varEntry : variableMap.entrySet()) {
                                String coldata = varEntry.getValue().toString();
                                if (customFieldMapGlobalLevel.containsKey(varEntry.getKey())) {
                                    String value = "";
                                    String Ids[] = coldata.split(",");
                                    for (int i = 0; i < Ids.length; i++) {
                                        KwlReturnObject rdresult = accountingHandlerDAOobj.getObject(FieldComboData.class.getName(), Ids[i]);
                                        FieldComboData fieldComboData = (FieldComboData) rdresult.getEntityList().get(0);
                                        if (fieldComboData != null) {
                                            if (fieldComboData.getField().getFieldtype() == 12 || fieldComboData.getField().getFieldtype() == 7) {
                                                value += Ids[i] != null ? Ids[i] + "," : ",";
                                            } else {
                                                value += fieldComboData.getValue() != null ? fieldComboData.getValue() + "," : ",";
                                                obj.put("Dimension_" + fieldComboData.getField().getFieldlabel(), fieldComboData.getValue() != null ? fieldComboData.getValue() : ""); //to differentiate custom field and dimension in sms payment templates.
                                            }

                                        }
                                    }
                                    if (!StringUtil.isNullOrEmpty(value)) {
                                        value = value.substring(0, value.length() - 1);
                                    }
                                    obj.put(varEntry.getKey(), value);
                                } else if (customDateFieldMapGlobalLevel.containsKey(varEntry.getKey())) {
                                    DateFormat userDateFormat = (DateFormat) authHandler.getDateFormatter(request);
                                    DateFormat defaultDateFormat = new SimpleDateFormat(Constants.MMMMdyyyy);
                                    Date dateFromDB = null;
                                    try {
                                        dateFromDB = defaultDateFormat.parse(coldata);
                                        coldata = userDateFormat.format(dateFromDB);

                                    } catch (Exception e) {
                                    }
                                    obj.put(varEntry.getKey(), coldata);
                                } else {
                                    if (!StringUtil.isNullOrEmpty(coldata)) {
                                        String[] coldataArray = coldata.split(",");
                                        String Coldata = "";
                                        for (int countArray = 0; countArray < coldataArray.length; countArray++) {
                                            Coldata += "'" + coldataArray[countArray] + "',";
                                        }
                                        Coldata = Coldata.substring(0, Coldata.length() - 1);
                                        String ColValue = accAccountDAOobj.getfieldcombodatabyids(Coldata);
                                        obj.put(varEntry.getKey(), coldata);
                                        obj.put(varEntry.getKey() + "_Values", ColValue);
                                    }
                                }
                            }
                        }
                        obj.put("type",type);
                    jArr.put(obj);
                }
                KwlReturnObject rpresult = accInvoiceDAOobj.getPaymentReceiptsLinkedWithInvoice(billid, companyid);
                List listr = rpresult.getEntityList();
                Iterator itr2 = listr.iterator();
                while (itr2.hasNext()) {
                    String orderid = (String) itr2.next();
                    if (!receiptIds.contains(orderid)) {
                        JSONObject obj = new JSONObject();
                        KwlReturnObject objItr = accountingHandlerDAOobj.getObject(Receipt.class.getName(), orderid);
                        Receipt receipt = (Receipt) objItr.getEntityList().get(0);
                        int type = 2; // SI->RP
                        String jeNumber=(receipt.isIsOpeningBalenceReceipt()) ? "" : receipt.getJournalEntry().getEntryNumber();
                        String jeIds=receipt.getJournalEntry().getID();
                        if (receipt.getJournalEntryForBankCharges() != null) {
                            jeNumber += "<br>" + receipt.getJournalEntryForBankCharges().getEntryNumber();
                            jeIds += "," + receipt.getJournalEntryForBankCharges().getID();
                        }
                        if (receipt.getJournalEntryForBankInterest() != null) {
                            jeNumber += "<br>" + receipt.getJournalEntryForBankInterest().getEntryNumber();
                            jeIds += "," + receipt.getJournalEntryForBankInterest().getID();
                        }
                        Customer customer = receipt.getCustomer();
                        obj.put(Constants.billid, receipt.getID());
                        obj.put(Constants.companyKey, receipt.getCompany().getCompanyID());
                        obj.put("withoutinventory", "");
                        obj.put("transactionNo", receipt.getReceiptNumber());   //delivery order no
                        obj.put("date", df.format(receipt.getCreationDate()));  //date of delivery order
                        obj.put("linkingdate", df.format(receipt.getCreationDate())); //date of delivery order
                        obj.put("journalEntryNo",jeNumber );  //journal entry no
                        obj.put("mergedCategoryData", "Payment Receipt");  //type of data
                        obj.put("personname", customer.getName());
                        obj.put("paymentwindowtype", receipt.getPaymentWindowType());
                        obj.put("journalentryid", jeIds);
                        obj.put("deleted", receipt.isDeleted());
                        Date invoiceCreationDate = null;
                        double externalCurrencyRate = 0d;
                        if (receipt.isNormalReceipt()) {
                            externalCurrencyRate = receipt.getJournalEntry().getExternalCurrencyRate();
                        }else{
                            externalCurrencyRate=receipt.getExternalCurrencyRate();
                        }
                        invoiceCreationDate=receipt.getCreationDate();
                        if (receipt.getExternalCurrencyRate() == 0) {
                            KwlReturnObject bAmt = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, 1.0d, receipt.getCurrency().getCurrencyID(), invoiceCreationDate,externalCurrencyRate);
                            obj.put("externalcurrencyrate", 1 / (Double) bAmt.getEntityList().get(0));
                        } else {
                            obj.put("externalcurrencyrate", receipt.getExternalCurrencyRate());
                        }
                        HashMap<String, Object> fieldrequestParamsGlobalLevel = new HashMap();
                        HashMap<String, String> customFieldMapGlobalLevel = new HashMap<String, String>();
                        HashMap<String, String> customDateFieldMapGlobalLevel = new HashMap<String, String>();
                        fieldrequestParamsGlobalLevel.put(Constants.filter_names, Arrays.asList(Constants.companyid, Constants.moduleid));
                        fieldrequestParamsGlobalLevel.put(Constants.filter_values, Arrays.asList(companyid, Constants.Acc_Receive_Payment_ModuleId));
                        HashMap<String, String> replaceFieldMapGlobalLevel = new HashMap<String, String>();

                        HashMap<String, Integer> FieldMapGlobalLevel = accAccountDAOobj.getFieldParamsCustomMap(fieldrequestParamsGlobalLevel, replaceFieldMapGlobalLevel, customFieldMapGlobalLevel, customDateFieldMapGlobalLevel);
                        Map<String, Object> variableMap = new HashMap<String, Object>();
                        HashMap<String, Object> invDetailRequestParams = new HashMap<String, Object>();
                        ArrayList Detailfilter_names = new ArrayList(), Detailfilter_params = new ArrayList();
                        Detailfilter_names.add(Constants.companyKey);
                        Detailfilter_params.add(receipt.getCompany().getCompanyID());
                        Detailfilter_names.add("journalentryId");
                        Detailfilter_params.add(receipt.getJournalEntry().getID());
                        Detailfilter_names.add("moduleId");
                        Detailfilter_params.add(Constants.Acc_Receive_Payment_ModuleId + "");
                        invDetailRequestParams.put("filter_names", Detailfilter_names);
                        invDetailRequestParams.put("filter_params", Detailfilter_params);
                        KwlReturnObject idcustresult = accReceiptDAOobj.getReciptPaymentGlobalCustomData(invDetailRequestParams);
                        if (idcustresult.getEntityList().size() > 0) {
                            AccJECustomData jeCustom = (AccJECustomData) idcustresult.getEntityList().get(0);
                            AccountingManager.setCustomColumnValues(jeCustom, FieldMapGlobalLevel, replaceFieldMapGlobalLevel, variableMap);
                            for (Map.Entry<String, Object> varEntry : variableMap.entrySet()) {
                                String coldata = varEntry.getValue().toString();
                                if (customFieldMapGlobalLevel.containsKey(varEntry.getKey())) {
                                    String value = "";
                                    String Ids[] = coldata.split(",");
                                    for (int i = 0; i < Ids.length; i++) {
                                        KwlReturnObject rdresult = accountingHandlerDAOobj.getObject(FieldComboData.class.getName(), Ids[i]);
                                        FieldComboData fieldComboData = (FieldComboData) rdresult.getEntityList().get(0);
                                        if (fieldComboData != null) {
                                            if (fieldComboData.getField().getFieldtype() == 12 || fieldComboData.getField().getFieldtype() == 7) {
                                                value += Ids[i] != null ? Ids[i] + "," : ",";
                                            } else {
                                                value += fieldComboData.getValue() != null ? fieldComboData.getValue() + "," : ",";
                                                obj.put("Dimension_" + fieldComboData.getField().getFieldlabel(), fieldComboData.getValue() != null ? fieldComboData.getValue() : ""); //to differentiate custom field and dimension in sms payment templates.
                                            }

                                        }
                                    }
                                    if (!StringUtil.isNullOrEmpty(value)) {
                                        value = value.substring(0, value.length() - 1);
                                    }
                                    obj.put(varEntry.getKey(), value);
                                } else if (customDateFieldMapGlobalLevel.containsKey(varEntry.getKey())) {
                                    obj.put(varEntry.getKey(), coldata);
                                } else {
                                    if (!StringUtil.isNullOrEmpty(coldata)) {
                                        String[] coldataArray = coldata.split(",");
                                        String Coldata = "";
                                        for (int countArray = 0; countArray < coldataArray.length; countArray++) {
                                            Coldata += "'" + coldataArray[countArray] + "',";
                                        }
                                        Coldata = Coldata.substring(0, Coldata.length() - 1);
                                        String ColValue = accAccountDAOobj.getfieldcombodatabyids(Coldata);
                                        obj.put(varEntry.getKey(), coldata);
                                        obj.put(varEntry.getKey() + "_Values", ColValue);
                                    }
                                }
                            }
                        }
                        obj.put("type",type);
                        jArr.put(obj);
                    }
                }

                HashMap<String, Object> requestParams1 = new HashMap<String, Object>();
                requestParams1.put(Constants.companyKey, companyid);
                requestParams1.put("invoiceid", billid);
                requestParams1.put(Constants.isFixedAsset, isFixedAsset);

                KwlReturnObject doresult = accInvoiceDAOobj.getDOFromOrToInvoices(billid,companyid);

                List listdo = doresult.getEntityList();
                Iterator itr3 = listdo.iterator();
                while (itr3.hasNext()) {
                    Object[] oj = (Object[]) itr3.next();
                    DeliveryOrder deliveryOrder = (DeliveryOrder)oj[0];
                    JSONObject obj = new JSONObject();
                    boolean withoutinventory = false;//Boolean.parseBoolean(oj[1].toString());
                    int type=(int)oj[1];
                    boolean includeprotax = false;
                    Set<String> invoiceno = new HashSet<String>();
                    Customer customer = deliveryOrder.getCustomer();
                    obj.put(Constants.billid, deliveryOrder.getID());
                    obj.put(Constants.companyKey, deliveryOrder.getCompany().getCompanyID());
                    obj.put("withoutinventory", withoutinventory);
                    obj.put("transactionNo", deliveryOrder.getDeliveryOrderNumber());   //delivery order no
                    obj.put("date", df.format(deliveryOrder.getOrderDate()));  //date of delivery order
                    obj.put("journalEntryNo", deliveryOrder.getJournalEntry() != null ? deliveryOrder.getJournalEntry().getEntryNumber() : "");  //journal entry no
                   if(deliveryOrder.isFixedAssetDO()) {
                      obj.put("mergedCategoryData", "Fixed Asset Delivery Order");  //type of data     
                   }else{
                       obj.put("mergedCategoryData", "Delivery Order");  //type of data
                    }
                    obj.put("personname", customer.getName());
                    obj.put("companyname", deliveryOrder.getCompany().getCompanyName());
                    obj.put("externalcurrencyrate", deliveryOrder.getExternalCurrencyRate());
                    obj.put("withoutinventory", withoutinventory);
                    obj.put("personid", customer.getID());
                    obj.put("billno", deliveryOrder.getDeliveryOrderNumber());
                    obj.put(Constants.IsRoundingAdjustmentApplied, deliveryOrder.isIsRoundingAdjustmentApplied());
                   
                    obj.put("isFromPOS", deliveryOrder.isPOSDO());
                    if (deliveryOrder.getModifiedby() != null) {
                        obj.put("lasteditedby", StringUtil.getFullName(deliveryOrder.getModifiedby()));
                    }
                    obj.put("personname", customer.getName());
                    HashMap<String, Object> addressParams = new HashMap<String, Object>();
                    addressParams.put(Constants.companyKey, deliveryOrder.getCompany().getCompanyID());
                    addressParams.put("isDefaultAddress", true);    //always true to get defaultaddress
                    addressParams.put("isBillingAddress", true);    //true to get billing address
                    addressParams.put(Constants.customerid, customer.getID());
                    CustomerAddressDetails customerAddressDetails = accountingHandlerDAOobj.getCustomerAddressobj(addressParams);
                    obj.put("personemail", customerAddressDetails != null ? customerAddressDetails.getEmailID() : "");
                    obj.put("customername", customer.getName());
                    obj.put("aliasname", customer.getAliasname());
                    obj.put("customercode", customer.getAcccode() == null ? "" : customer.getAcccode());
                    obj.put("billtoaddress", deliveryOrder.getBillingShippingAddresses() != null ? CommonFunctions.getBillingShippingAddress(deliveryOrder.getBillingShippingAddresses(), true) : "");
                    obj.put("shiptoaddress", deliveryOrder.getBillingShippingAddresses() != null ? CommonFunctions.getBillingShippingAddress(deliveryOrder.getBillingShippingAddresses(), false) : "");
                    obj.put("dateinuserformat", authHandler.getUserDateFormatter(request).format(deliveryOrder.getOrderDate()));
                    obj.put("createdby", deliveryOrder.getCreatedby() == null ? "" : StringUtil.getFullName(deliveryOrder.getCreatedby()));
                    obj.put("termdays", customer.getCreditTerm() == null ? 0 : customer.getCreditTerm().getTermdays());
                    obj.put("salesPerson", deliveryOrder.getSalesperson() == null ? "" : deliveryOrder.getSalesperson().getID());
                    obj.put("salesPersonCode", deliveryOrder.getSalesperson() == null ? "" : deliveryOrder.getSalesperson().getCode());
                    obj.put("createdby", deliveryOrder.getCreatedby() == null ? "" : deliveryOrder.getCreatedby().getFullName());
                    obj.put("mapSalesPersonName", deliveryOrder.getSalesperson() == null ? "" : deliveryOrder.getSalesperson().getValue());
                    obj.put("termname", customer.getCreditTerm() == null ? 0 : customer.getCreditTerm().getTermname());
                    obj.put("memo", deliveryOrder.getMemo());
                    obj.put("ordernoreferedformemoaddress", deliveryOrder.getOrderNoReferedForMemoAddress());
                    obj.put("posttext", deliveryOrder.getPostText() == null ? "" : deliveryOrder.getPostText());
                    obj.put("costcenterid", deliveryOrder.getCostcenter() == null ? "" : deliveryOrder.getCostcenter().getID());
                    obj.put("costcenterName", deliveryOrder.getCostcenter() == null ? "" : deliveryOrder.getCostcenter().getName());
                    obj.put("statusID", deliveryOrder.getStatus() == null ? "" : deliveryOrder.getStatus().getID());
                    obj.put("status", deliveryOrder.getStatus() == null ? "" : deliveryOrder.getStatus().getValue());
                    obj.put("deleted", deliveryOrder.isDeleted());
                    if (deliveryOrder.isIsDOClosed()) {
                        obj.put("status", Constants.closedStatus);
                    }
                    double taxPercent = 0;
                    if (deliveryOrder.getTax() != null) {
                        KwlReturnObject taxresult = accTaxObj.getTaxPercent(sessionHandlerImpl.getCompanyid(request), deliveryOrder.getOrderDate(), deliveryOrder.getTax().getID());
                        taxPercent = (Double) taxresult.getEntityList().get(0);

                    }
                    Set<DeliveryOrderDetail> deliveryOrderDetails = deliveryOrder.getRows();
                    double rowTaxAmt = 0;

                    for (DeliveryOrderDetail deliveryOrderDetail : deliveryOrderDetails) {
                        if (deliveryOrderDetail.getTax() != null) {

                            if (deliveryOrderDetail.getCidetails() != null && deliveryOrderDetail.getCidetails().getInvoice() != null) {
                                if (deliveryOrderDetail.getCidetails().getInvoice().getTax() != null) {
                                }
                            }
                            includeprotax = true;
                            rowTaxAmt += deliveryOrderDetail.getRowTaxAmount();
                        }
                    }
                    obj.put("rowTaxAmt", rowTaxAmt);
                    obj.put("taxid", deliveryOrder.getTax() != null ? deliveryOrder.getTax().getID() : "");
                    obj.put("taxpercent", taxPercent);
                    obj.put("taxpercent", taxPercent);
                    obj.put("shipdate", deliveryOrder.getShipdate() == null ? "" : authHandler.getDateOnlyFormat().format(deliveryOrder.getShipdate()));
                    obj.put("shipvia", deliveryOrder.getShipvia() == null ? "" : deliveryOrder.getShipvia());
                    obj.put("fob", deliveryOrder.getFob() == null ? "" : deliveryOrder.getFob());
                    obj.put("isfavourite", deliveryOrder.isFavourite());
                    obj.put("isprinted", deliveryOrder.isPrinted());
                    obj.put("isAppliedForTax", deliveryOrder.isAppliedForTax());
                    obj.put("isautogenerateddo", deliveryOrder.isIsAutoGeneratedDO());
                    obj.put("deleted", deliveryOrder.isDeleted());
                    obj.put(Constants.currencyKey, (deliveryOrder.getCurrency() == null ? "" : deliveryOrder.getCurrency().getCurrencyID()));
                    obj.put("currencysymbol", (deliveryOrder.getCurrency() == null ? "" : deliveryOrder.getCurrency().getSymbol()));
                    obj.put("currencyCode", (deliveryOrder.getCurrency() == null ? "" : deliveryOrder.getCurrency().getCurrencyCode()));
                    obj.put(Constants.SEQUENCEFORMATID, deliveryOrder.getSeqformat() != null ? deliveryOrder.getSeqformat().getID() : "");
                    obj.put(Constants.isConsignment, deliveryOrder.isIsconsignment());
                    obj.put(Constants.isLeaseFixedAsset, deliveryOrder.isLeaseDO());
                    obj.put(Constants.isFixedAsset, deliveryOrder.isFixedAssetDO());
                    if (deliveryOrder.getCustWarehouse() != null) {
                        obj.put("custWarehouse", deliveryOrder.getCustWarehouse().getId());
                    }
                    obj.put("driver", deliveryOrder.getDriver() != null ? deliveryOrder.getDriver().getID() : "");
                    if (deliveryOrder.isIsconsignment()) {
                        obj.put("movementtype", deliveryOrder.getMovementType() != null ? deliveryOrder.getMovementType().getID() : "");
                        obj.put("movementtypename", deliveryOrder.getMovementType() != null ? deliveryOrder.getMovementType().getValue() : "");
                    }
                    BillingShippingAddresses addresses = deliveryOrder.getBillingShippingAddresses();
                    AccountingAddressManager.getTransactionAddressJSON(obj, addresses, false);
                    obj.put("includeprotax", includeprotax);

                    String invoiceNumbers = org.springframework.util.StringUtils.collectionToCommaDelimitedString(invoiceno);
                    KwlReturnObject invoiceResult = accInvoiceDAOobj.getInvoiceNumbersOfDO(deliveryOrder.getID(), deliveryOrder.getCompany().getCompanyID());
                    List invoiceList = invoiceResult.getEntityList();
                    Iterator invoiceItr = invoiceList.iterator();
                    while (invoiceItr.hasNext()) {
                        Invoice invoice = (Invoice) invoiceItr.next();
                        if (invoiceNumbers.length() > 1) {
                            invoiceNumbers += "," + invoice.getInvoiceNumber();
                        } else {
                            invoiceNumbers = invoice.getInvoiceNumber();
                        }
                    }
                    obj.put("invoicenumber", invoiceNumbers);
                    obj.put("invoiceno", invoiceNumbers);
                    obj.put("approvalstatusinfo", deliveryOrder.getApprovestatuslevel() == -1 ? "Rejected" : deliveryOrder.getApprovestatuslevel() < 11 ? "Waiting for Approval at Level - " + deliveryOrder.getApprovestatuslevel() : "Approved");
                    obj.put("approvalstatus", deliveryOrder.getApprovestatuslevel());
                    obj.put("type",type);
                    jArr.put(obj);
                }

                KwlReturnObject srresult = accInvoiceDAOobj.getSalesReturnLinkedWithInvoice(billid, companyid);
                List listsr = srresult.getEntityList();
                Iterator itr4 = listsr.iterator();
                double quantity = 0;
                double amount = 0;
                while (itr4.hasNext()) {
                    String orderid = (String) itr4.next();
                    JSONObject obj = new JSONObject();
                    KwlReturnObject objItr = accountingHandlerDAOobj.getObject(SalesReturn.class.getName(), orderid);
                    SalesReturn salesReturn = (SalesReturn) objItr.getEntityList().get(0);
                    int type=4; // SI->SR
                    Customer customer = salesReturn.getCustomer();
                    obj.put(Constants.billid, salesReturn.getID());
                    obj.put(Constants.companyKey, salesReturn.getCompany().getCompanyID());
                    obj.put("withoutinventory", "");
                    obj.put("transactionNo", salesReturn.getSalesReturnNumber());   //delivery order no
                    obj.put("date", df.format(salesReturn.getOrderDate()));  //date of delivery order
                    obj.put("linkingdate", df.format(salesReturn.getOrderDate()));  //date of delivery order
                    obj.put("journalEntryNo", "");  //journal entry no
                    obj.put("mergedCategoryData", "Sales Return");  //type of data
                    obj.put("personname", customer.getName());

                    if (salesReturn.isIsconsignment()) {
                        obj.put("mergedCategoryData", "Consignment Sales Return");  //type of data
                    } else if (salesReturn.isLeaseSalesReturn()) {
                        obj.put("mergedCategoryData", "Lease Sales Return");  //type of data
                    } else {
                        obj.put("mergedCategoryData", "Sales Return");  //type of data
                    }

                    CreditNote creditNote = null;
                    if (salesReturn.isIsNoteAlso()) {
                        KwlReturnObject creditnoteresult = accCreditNoteDAOobj.getCreditNoteIdFromSRId(salesReturn.getID(), companyid);
                        if (!creditnoteresult.getEntityList().isEmpty()) {
                            creditNote = (CreditNote) creditnoteresult.getEntityList().get(0);
                        }
                    }

                    obj.put("companyname", salesReturn.getCompany().getCompanyName());
                    obj.put("withoutinventory", false);
                    obj.put("personid", customer.getID());
                    obj.put("billno", salesReturn.getSalesReturnNumber());
                    obj.put("externalcurrencyrate", salesReturn.getExternalCurrencyRate());

                    obj.put("aliasname", customer.getAliasname());
                    obj.put("personemail", customer.getEmail());
                    obj.put("memo", salesReturn.getMemo());
                    obj.put("posttext", salesReturn.getPostText() == null ? "" : salesReturn.getPostText());
                    obj.put("costcenterid", salesReturn.getCostcenter() == null ? "" : salesReturn.getCostcenter().getID());
                    obj.put("costcenterName", salesReturn.getCostcenter() == null ? "" : salesReturn.getCostcenter().getName());
                    obj.put("deleted", salesReturn.isDeleted());

                    obj.put("shipdate", salesReturn.getShipdate() == null ? "" : authHandler.getDateOnlyFormat().format(salesReturn.getShipdate()));
                    obj.put("shipvia", salesReturn.getShipvia() == null ? "" : salesReturn.getShipvia());
                    obj.put("fob", salesReturn.getFob() == null ? "" : salesReturn.getFob());
                    obj.put("isfavourite", salesReturn.isFavourite());
                    obj.put(Constants.currencyKey, (salesReturn.getCurrency() == null ? "" : salesReturn.getCurrency().getCurrencyID()));
                    obj.put("currencysymbol", (salesReturn.getCurrency() == null ? "" : salesReturn.getCurrency().getSymbol()));
                    obj.put("currencycode", (salesReturn.getCurrency() == null ? "" : salesReturn.getCurrency().getCurrencyCode()));
                    obj.put("sequenceformatid", salesReturn.getSeqformat() != null ? salesReturn.getSeqformat().getID() : "");
                    obj.put(Constants.isConsignment, salesReturn.isIsconsignment());
                    obj.put("isNoteAlso", salesReturn.isIsNoteAlso());
                    obj.put("isAssignSRNumberntocn", salesReturn.isIsAssignSRNumberntocn());
                          obj.put("cndnsequenceformatid", creditNote != null ? (creditNote.getSeqformat() != null ? creditNote.getSeqformat().getID() : "") : "");
                    obj.put("cndnnumber", creditNote != null ? creditNote.getCreditNoteNumber() : "");
                    obj.put("taxid", salesReturn.getTax() != null ? salesReturn.getTax().getID() : "");
                   
                    if (salesReturn.getModifiedby() != null) {
                        obj.put("lasteditedby", StringUtil.getFullName(salesReturn.getModifiedby()));
                    }
                   
                    Set<SalesReturnDetail> doRows = salesReturn.getRows();

                    boolean includeprotax = false;
                    if (doRows != null && !doRows.isEmpty()) {
                        for (SalesReturnDetail temp : doRows) {
                            quantity = temp.getInventory().getQuantity();
                            double rowAmt = temp.getRate() * quantity;

                            double disc = 0;

                            if (temp.getDiscountispercent() == 1) {
                                disc = rowAmt * temp.getDiscount() / 100;
                            } else {
                                disc = temp.getDiscount();
                            }

                            rowAmt = rowAmt - disc;

                            // getting tax also

                            double taxAmt = temp.getRowTaxAmount();
                            rowAmt += taxAmt;

                            amount += rowAmt;
                            if (temp.getTax() != null) {
                                includeprotax = true;
                            }
                        }
                    }
                    obj.put("includeprotax", includeprotax);
                    obj.put("amount", authHandler.round(amount, companyid));
                    obj.put("type",type);
                    jArr.put(obj);
                }
                KwlReturnObject resultcq = accInvoiceDAOobj.getCustomerQuotationLinkedInInvoice(billid,companyid);
                List listcq = resultcq.getEntityList();
                if(listcq!=null && listcq.size()>0){
                    int type = 7; // CQ->SI
                    jArr=accSalesOrderServiceDAOobj.getCustomerQuotationJsonForLinking(jArr, listcq, currency, userdf, df, type);
                }
                KwlReturnObject soresult = accSalesOrderDAOobj.getSalesOrdersLinkedInInvoice(billid, companyid);
                List salesorders = soresult.getEntityList();
                if (salesorders != null && salesorders.size() > 0) { // type=6 SO->SI
                    jArr = accSalesOrderServiceDAOobj.getSalesOrderJsonForLinking(jArr, salesorders, currency, df);
                }
                jobj.put("count", jArr.length());
                jobj.put(Constants.data, jArr);

            }
        } catch (JSONException je) {
            throw ServiceException.FAILURE(je.getMessage(), je);
        }
        return jobj;
    }
    public ModelAndView getDOLinkedInTransaction(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        String msg = "";
        boolean issuccess = false;
        try {
            jobj = getDOLinkedInTransaction(request);
            issuccess = true;
        } catch (SessionExpiredException ex) {
            msg = ex.getMessage();
            Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ServiceException ex) {
            msg = "accInvoiceControllerCMN.getDOLinkedInTransaction:" + ex.getMessage();
            Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            msg = "accInvoiceControllerCMN.getDOLinkedInTransaction:" + ex.getMessage();
            Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                jobj.put("success", issuccess);
                jobj.put("msg", msg);
            } catch (JSONException ex) {
                Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return new ModelAndView(Constants.jsonView, "model", jobj.toString());
    }
    /*
     * Function- To be used to get linked documents to/from delivery order
     */

    public JSONObject getDOLinkedInTransaction(HttpServletRequest request) throws SessionExpiredException, ServiceException {
        JSONObject jobj = new JSONObject();
        JSONArray jArr = new JSONArray();
        try {
            String billid = request.getParameter(Constants.billid);
            String companyid = sessionHandlerImpl.getCompanyid(request);
            DateFormat df = authHandler.getDateOnlyFormat();
            KwlReturnObject curresult = accountingHandlerDAOobj.getObject(KWLCurrency.class.getName(), sessionHandlerImpl.getCurrencyID(request));
            KWLCurrency currency = (KWLCurrency) curresult.getEntityList().get(0);
            if (!StringUtil.isNullOrEmpty(billid)) {
                /*
                 * TYPE-0= DO -> SI, TYPE-1= SI -> DO, TYPE-2= SO -> DO,TYPE-3= DO->SR
                 */
                KwlReturnObject siresult = accInvoiceDAOobj.getInvoiceFromDO(billid, companyid);
                List invoices = siresult.getEntityList();
                if (invoices != null && invoices.size() > 0) { // type=0,1
                    Iterator iterator = invoices.iterator();
                    while (iterator.hasNext()) {
                        Object[] oj = (Object[]) iterator.next();
                        Invoice invoice = (Invoice) oj[0];
                        int type = (int) oj[1];
                        JSONObject obj = new JSONObject();
                        Customer customer = invoice.getCustomer();
                        obj.put(Constants.billid, invoice.getID());
                        obj.put(Constants.companyKey, invoice.getCompany().getCompanyID());
                        obj.put("withoutinventory", "");
                        obj.put("customername", customer.getName());
                        obj.put("transactionNo", invoice.getInvoiceNumber());   //delivery order no
                        obj.put("date", df.format(invoice.getCreationDate()));  //date of invoice
                        obj.put("journalEntryNo", invoice.getJournalEntry().getEntryNumber());  //journal entry no
                        if (invoice.isIsconsignment()) {
                            obj.put("mergedCategoryData", "Consignment Customer Invoice");  //type of data
                        } else if (invoice.isFixedAssetInvoice()) {
                            obj.put("mergedCategoryData", "Fixed Asset Disposal Invoice");  //type of data
                        } else if (invoice.isFixedAssetLeaseInvoice()) {
                            obj.put("mergedCategoryData", "Lease Invoice");  //type of data
                        } else {
                            obj.put("mergedCategoryData", "Customer Invoice");  //type of data
                        }
                        obj.put("isOpeningBalanceInvoice", invoice.isIsOpeningBalenceInvoice());
                        HashMap requestParams = AccInvoiceServiceHandler.getInvoiceRequestMap(request);
                        JournalEntry je = invoice.getJournalEntry();
                        List<String> idsList = new ArrayList<String>();
                        idsList.add(invoice.getID());
                        String invid = invoice.getID();
                        Map<String, JournalEntryDetail> invoiceCustomerEntryMap = accInvoiceDAOobj.getInvoiceCustomerEntryList(idsList);
                        JournalEntryDetail d = invoiceCustomerEntryMap.get(invid);
                        Account account = d.getAccount();
                        String currencyid = (invoice.getCurrency() == null ? currency.getCurrencyID() : invoice.getCurrency().getCurrencyID());
                        String currencyFilterForTrans = "";
                        if (requestParams.containsKey("currencyfilterfortrans") && requestParams.containsKey("isReceipt")) {
                            currencyFilterForTrans = requestParams.get("currencyfilterfortrans") != null ? (String) requestParams.get("currencyfilterfortrans") : "";
                            KwlReturnObject currencyFilterResult = accountingHandlerDAOobj.getObject(KWLCurrency.class.getName(), currencyFilterForTrans);
                            KWLCurrency currencyFilter = (KWLCurrency) currencyFilterResult.getEntityList().get(0);
                            obj.put("currencyidpayment", currencyFilterForTrans);
                            obj.put("currencysymbolpayment", (currencyFilter == null ? currency.getSymbol() : currencyFilter.getSymbol()));
                        }
                        Date invoiceCreationDate = invoice.getCreationDate();
                        double currencyToBaseRate = accCurrencyDAOobj.getCurrencyToBaseRate(requestParams, currencyid, invoiceCreationDate);
                        obj.put("personid", customer == null ? account.getID() : customer.getID());
                        obj.put("personemail", customer == null ? "" : customer.getEmail());
                        obj.put("aliasname", customer == null ? "" : customer.getAliasname());
                        obj.put("accid", account.getID());
                        obj.put("accountid", invoice.getAccount() == null ? "" : invoice.getAccount().getID());
                        obj.put("billno", invoice.getInvoiceNumber());
                        obj.put("transectionno", invoice.getInvoiceNumber());
                        obj.put(Constants.currencyKey, currencyid);
                        obj.put("currencysymbol", (invoice.getCurrency() == null ? currency.getSymbol() : invoice.getCurrency().getSymbol()));
                        obj.put("currencyidtransaction", currencyid);
                        obj.put("currencysymboltransaction", (invoice.getCurrency() == null ? currency.getSymbol() : invoice.getCurrency().getSymbol()));
                        obj.put("companyaddress", invoice.getCompany().getAddress());
                        obj.put("companyname", invoice.getCompany().getCompanyName());
                        obj.put("oldcurrencyrate", currencyToBaseRate * 1.0);
                        obj.put("billto", invoice.getBillTo());
                        obj.put("shipto", invoice.getShipTo());
                        obj.put("journalentryid", je.getID());
                        obj.put("porefno", invoice.getPoRefNumber());
                        obj.put("externalcurrencyrate", je.getExternalCurrencyRate());
                        obj.put("entryno", je.getEntryNumber());
                        obj.put(Constants.IsRoundingAdjustmentApplied, invoice.isIsRoundingAdjustmentApplied());
                        obj.put("date", df.format(invoice.getCreationDate()));
                        obj.put("creationdate", df.format(invoice.getCreationDate()));
                        obj.put("invoicedate", df.format(invoice.getCreationDate()));
                        obj.put("shipdate", invoice.getShipDate() == null ? "" : df.format(invoice.getShipDate()));
                        obj.put("duedate", df.format(invoice.getDueDate()));
                        obj.put("personname", customer == null ? account.getName() : customer.getName());
                        obj.put("salesPerson", invoice.getMasterSalesPerson() == null ? "" : invoice.getMasterSalesPerson().getID());
                        obj.put("salespersonname", invoice.getMasterSalesPerson() == null ? "" : invoice.getMasterSalesPerson().getValue());
                        obj.put("memo", invoice.getMemo());
                        obj.put("termname", customer == null ? "" : customer.getCreditTerm().getTermname());
                        obj.put("termid", customer == null ? "" : customer.getCreditTerm().getID());
                        obj.put("deleted", invoice.isDeleted());
                        obj.put("taxincluded", invoice.getTax() == null ? false : true);
                        obj.put("taxid", invoice.getTax() == null ? "" : invoice.getTax().getID());
                        obj.put("taxname", invoice.getTax() == null ? "" : invoice.getTax().getName());
                        obj.put("taxamount", invoice.getTaxEntry() == null ? 0 : invoice.getTaxEntry().getAmount());
                        obj.put("discount", invoice.getDiscount() == null ? 0 : invoice.getDiscount().getDiscountValue());
                        obj.put("ispercentdiscount", invoice.getDiscount() == null ? false : invoice.getDiscount().isInPercent());
                        obj.put("discountval", invoice.getDiscount() == null ? 0 : invoice.getDiscount().getDiscount());
                        obj.put("costcenterid", je.getCostcenter() == null ? "" : je.getCostcenter().getID());
                        obj.put("costcenterName", je.getCostcenter() == null ? "" : je.getCostcenter().getName());
                        obj.put("shipvia", invoice.getShipvia() == null ? "" : invoice.getShipvia());
                        obj.put("fob", invoice.getFob() == null ? "" : invoice.getFob());
                        obj.put("isClaimedInvoice", (invoice.getBadDebtType() == 1 || invoice.getBadDebtType() == 2));// for Malasian Company
                        obj.put("invoicedate", invoice.getCreationDate() == null ? "" : df.format(invoice.getCreationDate()));
                        BillingShippingAddresses addresses = invoice.getBillingShippingAddresses();
                        AccountingAddressManager.getTransactionAddressJSON(obj, addresses, false);
                        if (invoice.getModifiedby() != null) {
                            obj.put("lasteditedby", StringUtil.getFullName(invoice.getModifiedby()));
                        }
                        obj.put("personname", customer.getName());
                        obj.put("type", type);
                        jArr.put(obj);
                    }
                }
                // type=3
                KwlReturnObject srresult = accInvoiceDAOobj.getSalesReturnsFromDO(billid, companyid);
                List salesreturns = srresult.getEntityList();
                if (salesreturns != null && salesreturns.size() > 0) {
                    Iterator iterator = salesreturns.iterator();
                    while (iterator.hasNext()) {
                        Object[] oj = (Object[]) iterator.next();
                        SalesReturn salesReturn = (SalesReturn) oj[0];
                        int type = (int) oj[1];
                        JSONObject obj = new JSONObject();
                        Customer customer = salesReturn.getCustomer();
                        obj.put(Constants.billid, salesReturn.getID());
                        obj.put(Constants.companyKey, salesReturn.getCompany().getCompanyID());
                        obj.put("withoutinventory", "");
                        obj.put("transactionNo", salesReturn.getSalesReturnNumber());
                        obj.put("date", df.format(salesReturn.getOrderDate()));  //date of delivery order
                        obj.put("journalEntryNo", "");  //journal entry no
                        if (salesReturn.isIsconsignment()) {
                            obj.put("mergedCategoryData", "Consignment Sales Return");  //type of data
                        } else if (salesReturn.isLeaseSalesReturn()) {
                            obj.put("mergedCategoryData", "Lease Sales Return");  //type of data
                        } else {
                            obj.put("mergedCategoryData", "Sales Return");  //type of data
                        }
                        CreditNote creditNote = null;
                        if (salesReturn.isIsNoteAlso()) {
                            KwlReturnObject creditnoteresult = accCreditNoteDAOobj.getCreditNoteIdFromSRId(salesReturn.getID(), companyid);
                            if (!creditnoteresult.getEntityList().isEmpty()) {
                                creditNote = (CreditNote) creditnoteresult.getEntityList().get(0);
                            }
                        }
                        obj.put("companyname", salesReturn.getCompany().getCompanyName());
                        obj.put("withoutinventory", false);
                        obj.put("personid", customer.getID());
                        obj.put("billno", salesReturn.getSalesReturnNumber());
                        obj.put("externalcurrencyrate", salesReturn.getExternalCurrencyRate());
                        obj.put("personname", customer.getName());
                        obj.put("aliasname", customer.getAliasname());
                        obj.put("personemail", customer.getEmail());
                        obj.put("memo", salesReturn.getMemo());
                        obj.put("posttext", salesReturn.getPostText() == null ? "" : salesReturn.getPostText());
                        obj.put("costcenterid", salesReturn.getCostcenter() == null ? "" : salesReturn.getCostcenter().getID());
                        obj.put("costcenterName", salesReturn.getCostcenter() == null ? "" : salesReturn.getCostcenter().getName());
                        obj.put("deleted", salesReturn.isDeleted());

                        obj.put("shipdate", salesReturn.getShipdate() == null ? "" : authHandler.getDateOnlyFormat().format(salesReturn.getShipdate()));
                        obj.put("shipvia", salesReturn.getShipvia() == null ? "" : salesReturn.getShipvia());
                        obj.put("fob", salesReturn.getFob() == null ? "" : salesReturn.getFob());
                        obj.put("isfavourite", salesReturn.isFavourite());
                        obj.put(Constants.currencyKey, (salesReturn.getCurrency() == null ? "" : salesReturn.getCurrency().getCurrencyID()));
                        obj.put("currencysymbol", (salesReturn.getCurrency() == null ? "" : salesReturn.getCurrency().getSymbol()));
                        obj.put("currencycode", (salesReturn.getCurrency() == null ? "" : salesReturn.getCurrency().getCurrencyCode()));
                        obj.put("sequenceformatid", salesReturn.getSeqformat() != null ? salesReturn.getSeqformat().getID() : "");
                        obj.put(Constants.isConsignment, salesReturn.isIsconsignment());
                        obj.put("isNoteAlso", salesReturn.isIsNoteAlso());
                        obj.put("isAssignSRNumberntocn", salesReturn.isIsAssignSRNumberntocn());
                        obj.put("cndnsequenceformatid", creditNote != null ? (creditNote.getSeqformat() != null ? creditNote.getSeqformat().getID() : "") : "");
                        obj.put("cndnnumber", creditNote != null ? creditNote.getCreditNoteNumber() : "");
                        obj.put("taxid", salesReturn.getTax() != null ? salesReturn.getTax().getID() : "");
                        if (salesReturn.getCustWarehouse() != null) {
                            obj.put("custWarehouse", salesReturn.getCustWarehouse().getId());
                        }
                        if (salesReturn.getModifiedby() != null) {
                            obj.put("lasteditedby", StringUtil.getFullName(salesReturn.getModifiedby()));
                        }
                        if (salesReturn.isIsconsignment()) {
                            obj.put("movementtype", salesReturn.getMovementType() != null ? salesReturn.getMovementType().getID() : "");
                            obj.put("movementtypename", salesReturn.getMovementType() != null ? salesReturn.getMovementType().getValue() : "");
                        }
                        obj.put("type", type);
                        jArr.put(obj);
                    }
                }
                KwlReturnObject soresult = accInvoiceDAOobj.getSalesOrdersFromDO(billid, companyid);
                List salesorders = soresult.getEntityList();
                if (salesorders != null && salesorders.size() > 0) {
                    jArr=accSalesOrderServiceDAOobj.getSalesOrderJsonForLinking(jArr, salesorders, currency,df);
                }
                jobj.put("count", jArr.length());
                jobj.put(Constants.data, jArr);
            }
        } catch (JSONException je) {
            throw ServiceException.FAILURE(je.getMessage(), je);
        }
        return jobj;
    }
    
    public void exportCustomerLedgerJasperReport(HttpServletRequest request, HttpServletResponse response) {

        try {
            JSONObject paramJobj = StringUtil.convertRequestToJsonObject(request);
            paramJobj.put(Constants.JRXML_REAL_PATH_KEY, request.getSession().getServletContext().getRealPath("jrxml"));
            boolean threadFlag = false;
            if (!StringUtil.isNullOrEmpty(paramJobj.optString("threadflag", null))) {
                threadFlag = Boolean.parseBoolean(paramJobj.optString("threadflag"));
            }
            //Thread Process
            if (threadFlag) {
                HashMap<String, Object> requestParams = AccountingManager.getGlobalParamsJson(paramJobj);
                String companyid = paramJobj.getString(Constants.companyKey);
                KwlReturnObject cmpresult = accountingHandlerDAOobj.getObject(Company.class.getName(), companyid);
                Company company = (Company) cmpresult.getEntityList().get(0);
                requestParams.put("paramsJsonObject", paramJobj);
                exportSOA.add(requestParams);
                exportSOA.setCompany(company);
                exportSOA.setIscustomer(true);

                Thread t = new Thread(exportSOA);        //Run method for this thread is available in ExportSOA.java
                t.start();
            } else {
                if (!request.getParameter("typeoffile").contains("ZIP")) {
                    JasperPrint jasperPrint = accExportReportsServiceDAOobj.exportCustomerLedgerJasperReport(paramJobj);
                    JRPdfExporter exp = new JRPdfExporter();
                    exp.setParameter(JRExporterParameter.JASPER_PRINT, jasperPrint);
                    exp.setParameter(JRPdfExporterParameter.OUTPUT_STREAM, response.getOutputStream());
                    int reportid = !StringUtil.isNullOrEmpty(paramJobj.optString("reportid")) ? Integer.parseInt(paramJobj.optString("reportid")) : -1;
                    if (reportid == Constants.SOA_CUSTOMER_ACCOUNT_STATEMENT_REPORTID) {
                        response.setHeader("Content-Disposition", "attachment;filename=" + "SOA - CustomerAccount Statement_v1.pdf");
                    } else {
                        response.setHeader("Content-Disposition", "attachment;filename=" + "StatementOfAccounts_v1.pdf");
                    }
                    exp.exportReport();
                } else {
                    accExportReportsServiceDAOobj.exportSOAtoZIP_FILE(paramJobj, response, true);
                }
            }
        } catch (Exception e) {
            Logger.getLogger(accInvoiceController.class.getName()).log(Level.SEVERE, null, e);
        }
    }

    public void exportCreditNoteJasperReport(HttpServletRequest request, HttpServletResponse response) {

        try {
            List<Object> list = accExportReportsServiceDAOobj.exportCreditNoteJasperReport(request, response);
            JRPdfExporter exp = new JRPdfExporter();
            exp.setParameter(JRExporterParameter.JASPER_PRINT_LIST, list);
            exp.setParameter(JRPdfExporterParameter.OUTPUT_STREAM, response.getOutputStream());
            response.setHeader("Content-Disposition", "attachment;filename=" + "CreditNote.pdf");
            exp.exportReport();
        } catch (Exception e) {
            Logger.getLogger(accInvoiceController.class.getName()).log(Level.SEVERE, null, e);
        }

    }
    
    public void exportCreditNoteJasperReportForMonzone(HttpServletRequest request, HttpServletResponse response) {

        try {
            HashMap requestParams = new HashMap();
            requestParams.put("cntype",request.getParameter("cntype"));
            requestParams.put("consolidateFlag",request.getParameter("consolidateFlag"));
            requestParams.put("deleted",request.getParameter("deleted"));
            requestParams.put("enddate",request.getParameter("enddate"));
            requestParams.put(Constants.globalCurrencyKey,request.getParameter(Constants.globalCurrencyKey));
            requestParams.put("isprinted",request.getParameter("isprinted"));
            requestParams.put("mode",request.getParameter("mode"));
            requestParams.put("nondeleted",request.getParameter("nondeleted"));
            requestParams.put("startdate",request.getParameter("startdate"));
            requestParams.put(Constants.useridKey ,request.getParameter(Constants.useridKey ));
            requestParams.put(Constants.companyids,request.getParameter(Constants.companyids));
            requestParams.put(Constants.companyKey,sessionHandlerImpl.getCompanyid(request));
            requestParams.put("costCenterId",request.getParameter("costCenterId"));
            requestParams.put(Constants.df, authHandler.getDateFormatter(request));  //This format belongs to our global date format[i.e.new SimpleDateFormat("MMMM d, yyyy hh:mm:ss aa")]
            
            KwlReturnObject NoteList = null;
            List<Object> list = null;
            String filename = "";
            if("true".equals(request.getParameter("isCreditNote"))){
                NoteList = accCreditNoteDAOobj.getCreditNoteMerged(requestParams);
                list = accExportOtherReportsServiceDAOobj.exportCreditNoteJasperReportForMonzone(request, response, NoteList.getEntityList());
                filename = "CreditNoteRegister_v1.pdf";
            } else {
                NoteList = accDebitNoteobj.getDebitNoteMerged(requestParams);
                list = accExportOtherReportsServiceDAOobj.exportDebitNoteJasperReportForMonzone(request, response, NoteList.getEntityList());
                filename = "DebitNoteRegister_v1.pdf";
            }
            JRPdfExporter exp = new JRPdfExporter();
            exp.setParameter(JRExporterParameter.JASPER_PRINT_LIST, list);
            exp.setParameter(JRPdfExporterParameter.OUTPUT_STREAM, response.getOutputStream());
            response.setHeader("Content-Disposition", "attachment;filename=\"" + filename+"\"");
            exp.exportReport();
        } catch (Exception e) {
            Logger.getLogger(accInvoiceController.class.getName()).log(Level.SEVERE, null, e);
        }

    }

    public void exportCustomerInvoiceReport(HttpServletRequest request, HttpServletResponse response) {
        try {
            
            List<Object> list = accExportReportsServiceDAOobj.exportCustomerInvoiceReport(request, response);
            JRPdfExporter exp = new JRPdfExporter();
            exp.setParameter(JRPdfExporterParameter.JASPER_PRINT_LIST, list);
            exp.setParameter(JRPdfExporterParameter.OUTPUT_STREAM, response.getOutputStream());
            exp.exportReport();
        } catch (Exception e) {
            Logger.getLogger(accInvoiceController.class.getName()).log(Level.SEVERE, null, e);
        }
    }

    public void exportFerrateGroupTaxInvoiceJasper(HttpServletRequest request, HttpServletResponse response) {
        try {
            List jasperPrint = accExportReportsServiceDAOobj.exportFerrateGroupTaxInvoiceJasper(request, response);
            JRPdfExporter exp = new JRPdfExporter();
            exp.setParameter(JRExporterParameter.JASPER_PRINT_LIST, jasperPrint);
            exp.setParameter(JRPdfExporterParameter.OUTPUT_STREAM, response.getOutputStream());
            exp.exportReport();
        } catch (Exception e) {
            Logger.getLogger(accInvoiceController.class.getName()).log(Level.SEVERE, null, e);
        }
    }
    
    public void exportForm21AInvoiceJasper(HttpServletRequest request, HttpServletResponse response) {
        try {
            List jasperPrint = accExportReportsServiceDAOobj.exportForm21AInvoiceJasper(request, response);
            JRPdfExporter exp = new JRPdfExporter();
            exp.setParameter(JRExporterParameter.JASPER_PRINT_LIST, jasperPrint);
            exp.setParameter(JRPdfExporterParameter.OUTPUT_STREAM, response.getOutputStream());
            exp.exportReport();
        } catch (Exception e) {
            Logger.getLogger(accInvoiceController.class.getName()).log(Level.SEVERE, null, e);
        }
    }
    
    public void exportExciseFormERJasper(HttpServletRequest request, HttpServletResponse response) {
        try {
            List<JasperPrint> jasperPrint = accExportReportsServiceDAOobj.exportExciseFormERJasper(request, response);
            JRPdfExporter exp = new JRPdfExporter();
            exp.setParameter(JRExporterParameter.JASPER_PRINT_LIST, jasperPrint);
            exp.setParameter(JRPdfExporterParameter.OUTPUT_STREAM, response.getOutputStream());
            exp.exportReport();
        } catch (Exception e) {
            Logger.getLogger(accInvoiceController.class.getName()).log(Level.SEVERE, null, e);
        }
    }
    
    public void exportRuleNo11Jasper(HttpServletRequest request, HttpServletResponse response) {
        try {
            List jasperPrint=null;
            if(!StringUtil.isNullOrEmpty(request.getParameter("invoiceid"))){
                jasperPrint = accExportReportsServiceDAOobj.exportRuleNo11Jasper(request, response);
            }else if(!StringUtil.isNullOrEmpty(request.getParameter("transactionNo"))){
                jasperPrint = accExportReportsServiceDAOobj.exportRuleNo11JasperForInterStockTransfer(request, response);
            }else if(!StringUtil.isNullOrEmpty(request.getParameter("purchaseOrderId"))){
                jasperPrint = accExportReportsServiceDAOobj.exportRuleNo11JasperForPO(request, response);
            }
            JRPdfExporter exp = new JRPdfExporter();
            exp.setParameter(JRExporterParameter.JASPER_PRINT_LIST, jasperPrint);
            exp.setParameter(JRPdfExporterParameter.OUTPUT_STREAM, response.getOutputStream());
            exp.exportReport();
        } catch (Exception e) {
            Logger.getLogger(accInvoiceController.class.getName()).log(Level.SEVERE, null, e);
        }
    }
    
   public void exportForm201CJasper(HttpServletRequest request, HttpServletResponse response) {
        try {
            List<JasperPrint> jasperPrint = accExportReportsServiceDAOobj.exportForm201CJasper(request, response);
            JRPdfExporter exp = new JRPdfExporter();
            exp.setParameter(JRExporterParameter.JASPER_PRINT_LIST, jasperPrint);
            exp.setParameter(JRPdfExporterParameter.OUTPUT_STREAM, response.getOutputStream());
            exp.exportReport();
        } catch (Exception e) {
            Logger.getLogger(accInvoiceController.class.getName()).log(Level.SEVERE, null, e);
        }
    }
   public void exportDVAT16FormJasper(HttpServletRequest request, HttpServletResponse response) {
        try {            
            response.setHeader("Content-Disposition", "attachment; filename=\""+ "DVAT Form 16.pdf");
            response.setContentType("application/octet-stream");
            File outFile = new File(storageHandlerImpl.GetDocStorePath() + "DVAT 16 Return Form.pdf");
            FileInputStream fin = new FileInputStream(outFile);
            byte fileContent[] = new byte[(int) outFile.length()];
            fin.read(fileContent);
            response.getOutputStream().write(fileContent);
            response.getOutputStream().flush();
            response.getOutputStream().close();
        } catch (Exception e) {
            Logger.getLogger(accInvoiceController.class.getName()).log(Level.SEVERE, null, e);
        }
    }

    /**
     * Used to export VatPurchaseRegister.
     *
     * @param HttpServletRequest request
     * @param HttpServletResponse response
     */
    public ModelAndView exportVATPurchaseRegister(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        JSONArray jArr = new JSONArray();
        String view = Constants.jsonView_ex;
        HashMap<String, Object> requestParams = new HashMap<String, Object>();
        try {
            DateFormat df = authHandler.getDateOnlyFormat();
            DateFormat userdf = authHandler.getUserDateFormatter(request);
            String companyid = sessionHandlerImpl.getCompanyid(request);
            requestParams.put("companyid", companyid);
            requestParams.put(Constants.df, df);
            requestParams.put("dateformat", df);
            requestParams.put("userdf", userdf);
            requestParams.put("isExport", true);
            if (!StringUtil.isNullOrEmpty(request.getParameter("stdate"))) {
                requestParams.put("startdate", request.getParameter("stdate"));
            }
            if (!StringUtil.isNullOrEmpty(request.getParameter("enddate"))) {
                requestParams.put("enddate", request.getParameter("enddate"));
            }
            jArr = accReportsService.getVatPurchaseRegister(requestParams);
            jobj.put(Constants.data, jArr);
            String fileType = request.getParameter("filetype");
            if (StringUtil.equal(fileType, "print")) {
                String GenerateDate = authHandler.getDateFormatter(request).format(new Date());
                jobj.put("GenerateDate", GenerateDate);
                view = "jsonView-empty";
            }
            exportDaoObj.processRequest(request, response, jobj);
        } catch (SessionExpiredException ex) {
            Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
        }
        return new ModelAndView(view, Constants.model, jobj.toString());
    }

    /**
     * Used to export VATSalesRegister.
     *
     * @param HttpServletRequest request
     * @param HttpServletResponse response
     */
    public ModelAndView exportVATSalesRegister(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        JSONArray jArr = new JSONArray();
        String view = Constants.jsonView_ex;
        HashMap<String, Object> requestParams = new HashMap<String, Object>();
        try {
            DateFormat df = authHandler.getDateOnlyFormat();
            DateFormat userdf = authHandler.getUserDateFormatter(request);
            String companyid = sessionHandlerImpl.getCompanyid(request);
            requestParams.put("companyid", companyid);
            requestParams.put(Constants.df, df);
            requestParams.put("dateformat", df);
            requestParams.put("userdf", userdf);
            requestParams.put("isExport", true);
            if (!StringUtil.isNullOrEmpty(request.getParameter("stdate"))) {
                requestParams.put("startdate", request.getParameter("stdate"));
            }
            if (!StringUtil.isNullOrEmpty(request.getParameter("enddate"))) {
                requestParams.put("enddate", request.getParameter("enddate"));
            }
            jArr = accReportsService.getVatSalesRegister(requestParams);
            jobj.put(Constants.data, jArr);
            String fileType = request.getParameter("filetype");
            if (StringUtil.equal(fileType, "print")) {
                String GenerateDate = authHandler.getDateFormatter(request).format(new Date());
                jobj.put("GenerateDate", GenerateDate);
                view = "jsonView-empty";
            }
            exportDaoObj.processRequest(request, response, jobj);
        } catch (SessionExpiredException ex) {
            Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
        }
        return new ModelAndView(view, Constants.model, jobj.toString());
    }

    public void exportForm33Jasper(HttpServletRequest request, HttpServletResponse response) {
        try {
            List<JasperPrint> jasperPrint = accExportReportsServiceDAOobj.exportForm33Jasper(request, response);
            JRPdfExporter exp = new JRPdfExporter();
            exp.setParameter(JRExporterParameter.JASPER_PRINT_LIST, jasperPrint);
            exp.setParameter(JRPdfExporterParameter.OUTPUT_STREAM, response.getOutputStream());
            exp.exportReport();
        } catch (Exception e) {
            Logger.getLogger(accInvoiceController.class.getName()).log(Level.SEVERE, null, e);
        }
    }
    
    public void exportAnnexureII57F4(HttpServletRequest request, HttpServletResponse response) {
        try {    
            String fileName="";
            if(request.getParameter("report").equals("AnnexureII57F4I")){
                fileName="57F4_1.pdf";
            }else if(request.getParameter("report").equals("AnnexureII57F4II")){
                fileName="57F4_2.pdf";
            }else if(request.getParameter("report").equals("AnnexureII57F4III")){
                fileName="57F4_3.pdf";
            }
            response.setHeader("Content-Disposition", "attachment; filename=\""+ fileName);
            response.setContentType("application/octet-stream");
            File outFile = new File(request.getSession().getServletContext().getRealPath("IndiaCompliance")+"/StaticReports/"+ fileName);
            FileInputStream fin = new FileInputStream(outFile);
            byte fileContent[] = new byte[(int) outFile.length()];
            fin.read(fileContent);
            response.getOutputStream().write(fileContent);
            response.getOutputStream().flush();
            response.getOutputStream().close();
        } catch (Exception e) {
            Logger.getLogger(accInvoiceController.class.getName()).log(Level.SEVERE, null, e);
        }
    }
    
    public void exportCommercialInvoiceJasper(HttpServletRequest request, HttpServletResponse response) {
        try {
            List jasperPrint = accExportReportsServiceDAOobj.exportCommercialInvoiceJasper(request, response);
            JRPdfExporter exp = new JRPdfExporter();
            exp.setParameter(JRExporterParameter.JASPER_PRINT_LIST, jasperPrint);
            exp.setParameter(JRPdfExporterParameter.OUTPUT_STREAM, response.getOutputStream());
            exp.exportReport();
        } catch (Exception e) {
            Logger.getLogger(accInvoiceController.class.getName()).log(Level.SEVERE, null, e);
        }
    }
    
    public void exportLSHCustomerInvoiceReport(HttpServletRequest request, HttpServletResponse response) {
        try {
            List jasperPrint = accExportReportsServiceDAOobj.exportLSHCustomerInvoiceReport(request, response);
            JRPdfExporter exp = new JRPdfExporter();
            exp.setParameter(JRExporterParameter.JASPER_PRINT_LIST, jasperPrint);
            exp.setParameter(JRPdfExporterParameter.OUTPUT_STREAM, response.getOutputStream());
            exp.exportReport();
        } catch (Exception e) {
            Logger.getLogger(accInvoiceController.class.getName()).log(Level.SEVERE, null, e);
        }
    }
    
    public void exportDiamondAviationCustomerInvoice(HttpServletRequest request, HttpServletResponse response) {
        try {
            List jasperPrint = accExportOtherReportsServiceDAOobj.exportDiamondAviationCustomerInvoice(request, response);
            JRPdfExporter exp = new JRPdfExporter();
            exp.setParameter(JRExporterParameter.JASPER_PRINT_LIST, jasperPrint);
            exp.setParameter(JRPdfExporterParameter.OUTPUT_STREAM, response.getOutputStream());
            exp.exportReport();
        } catch (Exception e) {
            Logger.getLogger(accInvoiceController.class.getName()).log(Level.SEVERE, null, e);
        }
    }
    public void exportMonzoneTaxInvoice(HttpServletRequest request, HttpServletResponse response) {
        try {
            List jasperPrint = accExportOtherReportsServiceDAOobj.exportMonzoneTaxInvoice(request, response);
            JRPdfExporter exp = new JRPdfExporter();
            exp.setParameter(JRExporterParameter.JASPER_PRINT_LIST, jasperPrint);
            exp.setParameter(JRPdfExporterParameter.OUTPUT_STREAM, response.getOutputStream());
            exp.exportReport();
        } catch (Exception e) {
            Logger.getLogger(accInvoiceController.class.getName()).log(Level.SEVERE, null, e);
        }
    }
    public void exportKimCheyInvoice(HttpServletRequest request, HttpServletResponse response) {
        try {
            List jasperPrint = accExportOtherReportsServiceDAOobj.exportKimCheyInvoice(request, response);
            JRPdfExporter exp = new JRPdfExporter();
            exp.setParameter(JRExporterParameter.JASPER_PRINT_LIST, jasperPrint);
            exp.setParameter(JRPdfExporterParameter.OUTPUT_STREAM, response.getOutputStream());
            exp.exportReport();
        } catch (Exception e) {
            Logger.getLogger(accInvoiceController.class.getName()).log(Level.SEVERE, null, e);
        }
    }
    public void exportKimCheyDeliveryOrder(HttpServletRequest request, HttpServletResponse response) {
        try {
            List jasperPrint = accExportOtherReportsServiceDAOobj.exportKimCheyDeliveryOrder(request, response);
            JRPdfExporter exp = new JRPdfExporter();
            exp.setParameter(JRExporterParameter.JASPER_PRINT_LIST, jasperPrint);
            exp.setParameter(JRPdfExporterParameter.OUTPUT_STREAM, response.getOutputStream());
            exp.exportReport();
        } catch (Exception e) {
            Logger.getLogger(accInvoiceController.class.getName()).log(Level.SEVERE, null, e);
        }
    }
    public void exportMonzoneDeliveryOrder(HttpServletRequest request, HttpServletResponse response) {
        try {
            List jasperPrint = accExportOtherReportsServiceDAOobj.exportMonzoneDeliveryOrder(request, response);
            JRPdfExporter exp = new JRPdfExporter();
            exp.setParameter(JRExporterParameter.JASPER_PRINT_LIST, jasperPrint);
            exp.setParameter(JRPdfExporterParameter.OUTPUT_STREAM, response.getOutputStream());
            exp.exportReport();
        } catch (Exception e) {
            Logger.getLogger(accInvoiceController.class.getName()).log(Level.SEVERE, null, e);
        }
    }
  public void exportARKCustomerInvoice(HttpServletRequest request, HttpServletResponse response) {
        try {
            List jasperPrint = accExportOtherReportsServiceDAOobj.exportARKCustomerInvoice(request, response);
            JRPdfExporter exp = new JRPdfExporter();
            exp.setParameter(JRExporterParameter.JASPER_PRINT_LIST, jasperPrint);
            exp.setParameter(JRPdfExporterParameter.OUTPUT_STREAM, response.getOutputStream());
            exp.exportReport();
        } catch (Exception e) {
            Logger.getLogger(accInvoiceController.class.getName()).log(Level.SEVERE, null, e);
        }
    }
   public void exportLANDPLUSCustomerInvoice(HttpServletRequest request, HttpServletResponse response) {
        try {
            List jasperPrint = accExportOtherReportsServiceDAOobj.exportLANDPLUSCustomerInvoice(request, response);
            JRPdfExporter exp = new JRPdfExporter();
            exp.setParameter(JRExporterParameter.JASPER_PRINT_LIST, jasperPrint);
            exp.setParameter(JRPdfExporterParameter.OUTPUT_STREAM, response.getOutputStream());
            exp.exportReport();
        } catch (Exception e) {
            Logger.getLogger(accInvoiceController.class.getName()).log(Level.SEVERE, null, e);
        }
    }
    public void exportSenwanGroupSingleCustomerQuotation(HttpServletRequest request, HttpServletResponse response) {

        try {
            List jasperPrint = accExportReportsServiceDAOobj.exportSenwanGroupCustomerQuotation(request, response);
            JRPdfExporter exp = new JRPdfExporter();
            exp.setParameter(JRExporterParameter.JASPER_PRINT_LIST, jasperPrint);
            exp.setParameter(JRPdfExporterParameter.OUTPUT_STREAM, response.getOutputStream());
            exp.exportReport();
        } catch (Exception e) {
            Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, e);
        }
    }

    public void exportSenwanCommercialInvoiceJasper(HttpServletRequest request, HttpServletResponse response) {
        try {
            List jasperPrint = accExportReportsServiceDAOobj.exportSenwanCommercialInvoiceJasper(request, response);
            JRPdfExporter exp = new JRPdfExporter();
            exp.setParameter(JRExporterParameter.JASPER_PRINT_LIST, jasperPrint);
            exp.setParameter(JRPdfExporterParameter.OUTPUT_STREAM, response.getOutputStream());
            exp.exportReport();
        } catch (Exception e) {
            Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, e);
        }

    }

    public void exportVHQCustomerQuotation(HttpServletRequest request, HttpServletResponse response) {
        try {
            List jasperPrint = accExportReportsServiceDAOobj.exportVHQCustomerQuotation(request, response);
            JRPdfExporter exp = new JRPdfExporter();
            exp.setParameter(JRExporterParameter.JASPER_PRINT_LIST, jasperPrint);
            exp.setParameter(JRPdfExporterParameter.OUTPUT_STREAM, response.getOutputStream());
            exp.exportReport();
        } catch (Exception e) {
            Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, e);
        }
    }
    
    public void exportSatsTaxInvoiceJasper(HttpServletRequest request, HttpServletResponse response){
        try {
            List jasperPrint = accExportReportsServiceDAOobj.exportSatsTaxInvoiceJasper(request, response);
            JRPdfExporter exp = new JRPdfExporter();
            exp.setParameter(JRExporterParameter.JASPER_PRINT_LIST, jasperPrint);
            exp.setParameter(JRPdfExporterParameter.OUTPUT_STREAM, response.getOutputStream());
            exp.exportReport();
        } catch (Exception e) {
            Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, e);
        }
    }
    
     public void exportSATSCreditNoteJasperReport(HttpServletRequest request, HttpServletResponse response){
        try {
            List jasperPrint = accExportReportsServiceDAOobj.exportSATSCreditNoteJasperReport(request, response);
            JRPdfExporter exp = new JRPdfExporter();
            exp.setParameter(JRExporterParameter.JASPER_PRINT_LIST, jasperPrint);
            exp.setParameter(JRPdfExporterParameter.OUTPUT_STREAM, response.getOutputStream());
            exp.exportReport();
        } catch (Exception e) {
            Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, e);
        }
    }
    
    public void exportSupplementaryInvoiceJasper(HttpServletRequest request, HttpServletResponse response) {
        try {
            List jasperPrint = accExportReportsServiceDAOobj.exportSupplementaryInvoiceJasper(request, response);
            JRPdfExporter exp = new JRPdfExporter();
            exp.setParameter(JRExporterParameter.JASPER_PRINT_LIST, jasperPrint);
            exp.setParameter(JRPdfExporterParameter.OUTPUT_STREAM, response.getOutputStream());
            exp.exportReport();
        } catch (Exception e) {
            Logger.getLogger(accInvoiceController.class.getName()).log(Level.SEVERE, null, e);
        }
    }
        
    public ModelAndView getCustInvoiceDueEvents(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        JSONArray jArr = new JSONArray();
        try {
            HashMap requestParams = AccInvoiceServiceHandler.getInvoiceRequestMap(request);
            String accid = request.getParameter(InvoiceConstants.accid);
            boolean CashAndInvoice = request.getParameter("CashAndInvoice") != null ? Boolean.FALSE.parseBoolean(request.getParameter("CashAndInvoice")) : false;
            requestParams.put("CashAndInvoice", CashAndInvoice);
            if (request.getParameter("minimumAmountDue") != null) {
                requestParams.put("minimumAmountDue", Double.parseDouble(request.getParameter("minimumAmountDue").toString()));
            }
            requestParams.put("calendar", true);
            requestParams.put("calstartdt", request.getParameter("start"));
            requestParams.put("calenddt", request.getParameter("end"));
            requestParams.put("nondeleted", "true");
            requestParams.put("deleted", "false");
            
            KwlReturnObject invoceObj = accInvoiceDAOobj.getInvoices(requestParams);
            List<Invoice> list = invoceObj.getEntityList();
            String companyid = sessionHandlerImpl.getCompanyid(request);
            KwlReturnObject cap = accountingHandlerDAOobj.getObject(CompanyAccountPreferences.class.getName(), companyid);
            CompanyAccountPreferences pref = (CompanyAccountPreferences) cap.getEntityList().get(0);
            String cashAccount = pref.getCashAccount().getID();
            KwlReturnObject curresult = accountingHandlerDAOobj.getObject(KWLCurrency.class.getName(), sessionHandlerImpl.getCurrencyID(request));
            KWLCurrency currency = (KWLCurrency) curresult.getEntityList().get(0);
            List<String> idsList = new ArrayList<String>();
            for (Invoice invoice : list) {
                idsList.add(invoice.getID());
            }
            Map<String, JournalEntryDetail> invoiceCustomerEntryMap = accInvoiceDAOobj.getInvoiceCustomerEntryList(idsList);
            SimpleDateFormat sdf=new SimpleDateFormat("yyyy-MM-dd");
            DecimalFormat df = new DecimalFormat("#.00");
            
            for (Invoice invoice : list) {
                String invid = invoice.getID();
                JournalEntryDetail d = invoiceCustomerEntryMap.get(invid);
                Account account = d.getAccount();
                if (account.getID().equals(cashAccount) && !CashAndInvoice) {
                    continue;
                }
                String currencyid=(invoice.getCurrency() == null ? currency.getCurrencyID() : invoice.getCurrency().getCurrencyID());
    
                List ll = new ArrayList();
                if (Constants.InvoiceAmountDueFlag) {
                    ll = accInvoiceCommon.getInvoiceDiscountAmountInfo(requestParams, invoice);
                } else {
                    ll = accInvoiceCommon.getAmountDue_Discount(requestParams, invoice);
                }
                double amountdue = (Double) ll.get(0);
                if (authHandler.round(amountdue, companyid) <= 0) {
                    continue;
                }
                String custnm = invoice.getCustomer() == null ? account.getName() : invoice.getCustomer().getName();
                 
                
               
                JSONObject obj = new JSONObject();
                
                String docno=invoice.getInvoiceNumber();
                String dueAmt=df.format(authHandler.round(amountdue, companyid));
                String amt=df.format(d.getAmount());
                String currencysyb=(invoice.getCurrency()==null?currency.getCurrencyCode(): invoice.getCurrency().getCurrencyCode());
                String title =  custnm + "\n" +"Document No.: "+docno + "\n"+"Document Amount: "+currencysyb+" "+amt+ "\n" +"Due Amount: "+currencysyb+" "+dueAmt ;
                obj.put("title", title);
                obj.put("start",sdf.format(invoice.getDueDate()));
                jArr.put(obj);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return new ModelAndView("jsonView_ex", "model", jArr.toString());
    }
    
    public ModelAndView getPackingDoListMerged(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        JSONArray DataJArr = new JSONArray();
        String msg = "";
        boolean issuccess = false;
        try {
            HashMap<String, Object> requestParams = getPackingDoListsMap(request);
            boolean consolidateFlag = request.getParameter("consolidateFlag") != null ? Boolean.parseBoolean(request.getParameter("consolidateFlag")) : false;
            String companyid = (consolidateFlag && request.getParameter(Constants.companyids) != null) ? request.getParameter(Constants.companyids) : sessionHandlerImpl.getCompanyid(request);
            String gcurrencyid = (consolidateFlag && request.getParameter(Constants.globalCurrencyKey) != null) ? request.getParameter(Constants.globalCurrencyKey) : sessionHandlerImpl.getCurrencyID(request);
            request.setAttribute(Constants.companyKey, companyid);
            requestParams.put(Constants.companyKey, companyid);
            String dir = "";
            String sort = "";
            if (!StringUtil.isNullOrEmpty(request.getParameter("dir")) && !StringUtil.isNullOrEmpty(request.getParameter("sort"))) {
                dir = request.getParameter("dir");
                sort = request.getParameter("sort");
                requestParams.put("sort", sort);
                requestParams.put("dir", dir);
            }
            KwlReturnObject result = accInvoiceDAOobj.getPackingDoLists(requestParams);
            JSONArray jarr = getPackingDoListsJsonMerged(request, result.getEntityList());
            jobj.put(Constants.data, jarr);
            jobj.put("count", result.getRecordTotalCount());
            issuccess = true;
        } catch (Exception ex) {
            msg = "" + ex.getMessage();
            Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                jobj.put("success", issuccess);
                jobj.put("msg", msg);
            } catch (JSONException ex) {
                Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return new ModelAndView(Constants.jsonView, "model", jobj.toString());
    }
    /*
    Function to get packed DO
    */
    public ModelAndView getPackingMerged(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        JSONArray DataJArr = new JSONArray();
        String msg = "";
        boolean issuccess = false;
        try {
            HashMap<String, Object> requestParams = getPackingDoListsMap(request);
            boolean consolidateFlag = request.getParameter("consolidateFlag") != null ? Boolean.parseBoolean(request.getParameter("consolidateFlag")) : false;
            String companyid = (consolidateFlag && request.getParameter(Constants.companyids) != null) ? request.getParameter(Constants.companyids) : sessionHandlerImpl.getCompanyid(request);
            String gcurrencyid = (consolidateFlag && request.getParameter(Constants.globalCurrencyKey) != null) ? request.getParameter(Constants.globalCurrencyKey) : sessionHandlerImpl.getCurrencyID(request);
            request.setAttribute(Constants.companyKey, companyid);
            requestParams.put(Constants.companyKey, companyid);
            KwlReturnObject extracapresult = accountingHandlerDAOobj.getObject(ExtraCompanyPreferences.class.getName(), companyid);
            ExtraCompanyPreferences extraCompanyPreferences = (ExtraCompanyPreferences) extracapresult.getEntityList().get(0);
            boolean upsIntegrationFlag = false; //Flag to indicate whether or not UPS REST integration is enabled ERP-31339
            if (extraCompanyPreferences != null) {
                upsIntegrationFlag = extraCompanyPreferences.isUpsIntegration();
            }
            requestParams.put("upsIntegrationFlag", upsIntegrationFlag);
            String dir = "";
            String sort = "";
            if (!StringUtil.isNullOrEmpty(request.getParameter("dir")) && !StringUtil.isNullOrEmpty(request.getParameter("sort"))) {
                dir = request.getParameter("dir");
                sort = request.getParameter("sort");
                requestParams.put("sort", sort);
                requestParams.put("dir", dir);
            }
            KwlReturnObject result = accInvoiceDAOobj.getPackingLists(requestParams);
            /*
            Function which will return JSON array of packed DO
            */
            JSONObject packingDataJObj = getPackingJsonMerged(request, result.getEntityList());
            JSONArray jarr = packingDataJObj.optJSONArray(Constants.data);
            JSONObject upsErrorJSON = packingDataJObj.optJSONObject("upsErrorJSON");
            jobj.put(Constants.data, jarr);
            jobj.put("upsErrorJSON", upsErrorJSON);
            jobj.put("count", result.getRecordTotalCount());
            issuccess = true;
        } catch (Exception ex) {
            msg = "" + ex.getMessage();
            Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                jobj.put("success", issuccess);
                jobj.put("msg", msg);
            } catch (JSONException ex) {
                Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return new ModelAndView(Constants.jsonView, "model", jobj.toString());
    }
    /**
     * Used to export records of Packing Report
     * @param request
     * @param response 
     */
    public void getPackingReportExport(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        try {
            String filetype = "";
            if(!StringUtil.isNullOrEmpty(request.getParameter("filetype"))) {
                filetype = request.getParameter("filetype");
            }
            HashMap<String, Object> requestParams = getPackingDoListsMap(request);
            KwlReturnObject result = accInvoiceDAOobj.getPackingLists(requestParams);
            JSONObject packingDataJObj = getPackingJsonMerged(request, result.getEntityList());            
            if(StringUtil.equalIgnoreCase(filetype, "detailedXls")) {
                JSONArray jArr = new JSONArray();
                int index = 0;
                JSONArray packingReport = packingDataJObj.optJSONArray(Constants.data);
                String bills = "";
                for (Object obj : result.getEntityList()) {
                    Object[] temp = (Object[]) obj;
                    bills += temp[0].toString() + ",";
                }
                bills = bills.substring(0, bills.length() - 1);
                request.setAttribute("bills", bills);
                JSONObject temp = getPackingRows(request);
                for (int i = 0; i < packingReport.length(); i++) {
                    JSONObject data = packingReport.optJSONObject(i);
                    jArr.put(data);
                    JSONArray packingdolistdetails = temp.optJSONArray(Constants.data).optJSONObject(index++).optJSONArray("packingdolistdetails");
                    JSONArray shipingdodetails = temp.optJSONArray(Constants.data).optJSONObject(index++).optJSONArray("shipingdodetails");
                    JSONArray itempackingdetails = temp.optJSONArray(Constants.data).optJSONObject(index++).optJSONArray("itempackingdetails");                    
                    for (int j = 0; j < packingdolistdetails.length(); j++) {
                        JSONObject packingdolist = packingdolistdetails.optJSONObject(j);
                        packingdolist.put("productlistpid", packingdolist.optString("pid"));
                        packingdolist.put("productlistproductname", packingdolist.optString("productname"));
                        packingdolist.put("productlistdescription", packingdolist.optString("description"));
                        packingdolist.put("productlistunitname", packingdolist.optString("unitname"));
                        packingdolist.put("productlisttype", packingdolist.optString("type"));
                        packingdolist.remove("pid");
                        packingdolist.remove("productname");
                        packingdolist.remove("description");
                        packingdolist.remove("unitname");
                        packingdolist.remove("type");
                        jArr.put(packingdolist);
                    }
                    for (int j = 0; j < shipingdodetails.length(); j++) {
                        JSONObject shipingdo = shipingdodetails.optJSONObject(j);
                        shipingdo.put("shipingdosrno", j+1);
                        shipingdo.put("shipingdoproductname", shipingdo.optString("productname"));
                        shipingdo.put("shipingdodescription", shipingdo.optString("description"));
                        shipingdo.put("shipingdounitname", shipingdo.optString("unitname"));
                        shipingdo.remove("productname");
                        shipingdo.remove("description");
                        shipingdo.remove("unitname");
                        jArr.put(shipingdo);
                    }
                    for (int j = 0; j < itempackingdetails.length(); j++) {
                        JSONObject itempacking = itempackingdetails.optJSONObject(j);
                        itempacking.put("itempackingsrno", j+1);
                        itempacking.put("itempackingproductname", itempacking.optString("productname"));
                        itempacking.remove("srno");
                        itempacking.remove("productname");
                        jArr.put(itempacking);
                    }
                }
                jobj.put(Constants.data, jArr);
                exportDaoObj.processRequest(request, response, jobj);
            } else {
                exportDaoObj.processRequest(request, response, packingDataJObj);
            }           
        } catch (Exception e) {
            Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, e);
        }
    }
    
    public JSONArray getPackingDoListsJsonMerged(HttpServletRequest request, List list) throws ServiceException {
        JSONArray jArr = new JSONArray();
        try {
            HashMap<String, Object> requestParams = AccountingManager.getGlobalParams(request);
            HashMap<String, Object> fieldrequestParams = new HashMap();
            fieldrequestParams.put(Constants.filter_names, Arrays.asList(Constants.companyid, Constants.moduleid, Constants.customcolumn));
            Iterator itr = list.iterator();
            while (itr.hasNext()) {
                Object[] oj = (Object[]) itr.next();
                String orderid = oj[0].toString();
                KwlReturnObject objItr = accountingHandlerDAOobj.getObject(PackingDoList.class.getName(), orderid);
                PackingDoList packingdolist = (PackingDoList) objItr.getEntityList().get(0);
                String customer = packingdolist.getCustomer();
                JSONObject obj = new JSONObject();
                obj.put(Constants.billid, packingdolist.getID());
                obj.put(Constants.companyKey, packingdolist.getCompany().getCompanyID());
                obj.put("companyname", packingdolist.getCompany().getCompanyName());
                obj.put("personid", customer);
                obj.put("billno", packingdolist.getPackNumber());
                obj.put("date", authHandler.getDateOnlyFormat().format(packingdolist.getPackingDate()));
                obj.put("personname", customer);
                obj.put("memo", packingdolist.getMemo());
                obj.put("statusID", packingdolist.getStatus() == null ? "" : packingdolist.getStatus().getID());
                obj.put("status", packingdolist.getStatus() == null ? "" : packingdolist.getStatus().getValue());
                obj.put("deleted", packingdolist.isDeleted());
                jArr.put(obj);
}
        } catch (Exception ex) {
            throw ServiceException.FAILURE("getPackingDoListsJsonMerged : " + ex.getMessage(), ex);
        }
        return jArr;
    }
    /*
    Function which will return JSON array of packed DO
    */
    public JSONObject getPackingJsonMerged(HttpServletRequest request, List list) throws ServiceException {
        JSONObject packingDataJSON = new JSONObject();
        JSONObject upsErrorJSON = new JSONObject();
        JSONArray jArr = new JSONArray();
        try {
            HashMap<String, Object> requestParams = AccountingManager.getGlobalParams(request);
            HashMap<String, Object> fieldrequestParams = new HashMap();
            fieldrequestParams.put(Constants.filter_names, Arrays.asList(Constants.companyid, Constants.moduleid, Constants.customcolumn));
            Iterator itr = list.iterator();
            KwlReturnObject extracompanyprefresult = accountingHandlerDAOobj.getObject(ExtraCompanyPreferences.class.getName(), sessionHandlerImpl.getCompanyid(request));
            ExtraCompanyPreferences extracompanypref = (ExtraCompanyPreferences) extracompanyprefresult.getEntityList().get(0);
            String recordIDForCostCalculation = "";//Id of packing record selected for cost calculation
            if (!StringUtil.isNullOrEmpty(request.getParameter("recordIDForCostCalculation"))) {
                recordIDForCostCalculation = request.getParameter("recordIDForCostCalculation");
            }
            JSONObject requestJobj = StringUtil.convertRequestToJsonObject(request);
            while (itr.hasNext()) {
                Object[] oj = (Object[]) itr.next();
                String orderid = oj[0].toString();
                String donumber = "";
                KwlReturnObject objItr = accountingHandlerDAOobj.getObject(Packing.class.getName(), orderid);
                Packing Packing = (Packing) objItr.getEntityList().get(0);
                String customer = Packing.getCustomer();
                Company company = Packing.getCompany();
                /**
                 * Getting the related DO number to display alongside the Packing record.
                 */
                Set<PackingDetail> packingdetail = Packing.getRows();
                Iterator packdetail = packingdetail.iterator();
                while (packdetail.hasNext()) {
                    PackingDetail pd = (PackingDetail) packdetail.next();
                    donumber = pd.getDodetailid().getDeliveryOrder().getDeliveryOrderNumber();
                    break;
                }
                JSONObject obj = new JSONObject();
                obj.put(Constants.billid, Packing.getID());
                obj.put(Constants.companyKey, company.getCompanyID());
                obj.put("companyname", company.getCompanyName());
                obj.put("personid", customer);
                obj.put("dono", donumber);
                obj.put("billno", Packing.getPackNumber());
                obj.put("date", authHandler.getDateOnlyFormat().format(Packing.getPackingDate()));
                obj.put("personname", customer);
                obj.put("memo", Packing.getMemo());
                obj.put("statusID", Packing.getStatus() == null ? "" : Packing.getStatus().getID());
                obj.put("status", Packing.getStatus() == null ? "" : Packing.getStatus().getValue());
                obj.put("deleted", Packing.isDeleted());
                obj.put(IntegrationConstants.totalShippingCost, Packing.getTotalCost());
                obj.put(IntegrationConstants.shippedWithUPS, Packing.isShippedWithUPS());

                boolean upsIntegrationFlag = extracompanypref.isUpsIntegration();
                if (upsIntegrationFlag && recordIDForCostCalculation.equals(Packing.getID())) {
                    JSONObject tempJobj = getShippingCostFromUpsRestService(requestJobj, Packing);
                    if (tempJobj.has(IntegrationConstants.totalShippingCost)) {
                        obj.put(IntegrationConstants.totalShippingCost, tempJobj.optDouble(IntegrationConstants.totalShippingCost));
                    }
                    if (tempJobj.has(IntegrationConstants.shippedWithUPS)) {
                        obj.put(IntegrationConstants.shippedWithUPS, tempJobj.optBoolean(IntegrationConstants.shippedWithUPS, false));
                    }
                    upsErrorJSON = tempJobj.optJSONObject("upsErrorJSON");
                }
                jArr.put(obj);
            }
            packingDataJSON.put(Constants.data, jArr);
            packingDataJSON.put("upsErrorJSON", upsErrorJSON);
        } catch (Exception ex) {
            throw ServiceException.FAILURE("getPackingJsonMerged : " + ex.getMessage(), ex);
        }
        return packingDataJSON;
    }
    
    /**
     * Create shipment on UPS side and calculate shipping cost with UPS REST service for Packing Record
     * Used in UPS Integration functionality
     */
    public JSONObject getShippingCostFromUpsRestService(JSONObject requestJobj, Packing packing) throws ServiceException, JSONException, AccountingException {
        JSONObject returnJobj = new JSONObject();
        JSONObject upsErrorJSON = new JSONObject();
        JSONArray packageDetailsJarr = !StringUtil.isNullOrEmpty(requestJobj.optString(IntegrationConstants.packageDetails)) ? new JSONArray(requestJobj.optString(IntegrationConstants.packageDetails)) : new JSONArray();
        requestJobj.put(IntegrationConstants.integrationOperationIdKey, IntegrationConstants.ups_shipping);
        requestJobj.put(IntegrationConstants.integrationPartyIdKey, IntegrationConstants.integrationPartyId_UPS);
        JSONObject costingDetailJSON = integrationCommonService.processIntegrationRequest(requestJobj);//POST data to UPS REST service and receive response
        if (costingDetailJSON.optJSONObject("ShipmentResponse") != null) {//If request sent to UPS is successful, then read response
            JSONObject FreightShipResponse = costingDetailJSON.optJSONObject("ShipmentResponse");
            JSONObject ShipmentResults = FreightShipResponse.optJSONObject("ShipmentResults");
            JSONObject ShipmentCharges = ShipmentResults.optJSONObject("ShipmentCharges");
            JSONObject TotalShipmentCharge = ShipmentCharges.optJSONObject("TotalCharges");
            double totalShippingCost = TotalShipmentCharge.optDouble("MonetaryValue", -1);
            if (totalShippingCost != -1) {
                HashMap<String, Object> dataMap = new HashMap<>();
                dataMap.put(Constants.billid, packing.getID());
                dataMap.put(IntegrationConstants.totalShippingCost, totalShippingCost);
                dataMap.put(IntegrationConstants.shippedWithUPS, true);
                accInvoiceDAOobj.savePacking(dataMap);//Update Total Shipping Cost and shippedWithUPS flag
                returnJobj.put(IntegrationConstants.shippedWithUPS, true);
            }
            if (packageDetailsJarr.length() == 1) {//In case of single package, PackageResults is JSONObject in UPS response
                JSONObject PackageResults = ShipmentResults.optJSONObject("PackageResults");
                saveUpsPackageDetails(packageDetailsJarr.optJSONObject(0), PackageResults, packing);
            } else {//In case of multiple packages, PackageResults is JSONArray in UPS response
                JSONArray PackageResults = ShipmentResults.optJSONArray("PackageResults");
                for (int i = 0; i < PackageResults.length(); i++) {
                    JSONObject packageDetailsFromUps = PackageResults.optJSONObject(i);
                    saveUpsPackageDetails(packageDetailsJarr.optJSONObject(i), packageDetailsFromUps, packing);
                }
            }
            returnJobj.put(IntegrationConstants.totalShippingCost, totalShippingCost);
        } else {//Read error in case request to UPS fails
            JSONObject ErrorJSON = costingDetailJSON.optJSONObject("Fault");
            JSONObject ErrorDetailJSON = ErrorJSON.optJSONObject("detail");
            JSONObject ErrorDetailErrorsJSON = ErrorDetailJSON.optJSONObject("Errors");
            JSONObject ErrorDetails = ErrorDetailErrorsJSON.optJSONObject("ErrorDetail");
            JSONObject ErrorDetailsPrimaryErrorCode = ErrorDetails.optJSONObject("PrimaryErrorCode");
            upsErrorJSON.put("ErrorSeverity", ErrorDetails.optString("Severity"));
            upsErrorJSON.put("ErrorCode", ErrorDetailsPrimaryErrorCode.optString("Code"));
            upsErrorJSON.put("ErrorDescription", ErrorDetailsPrimaryErrorCode.optString("Description"));
        }
        returnJobj.put("upsErrorJSON", upsErrorJSON);
        return returnJobj;
    }

    //Save UPS package details into database, including Tracking Number and Shipping Label
    //details are saved in table UpsPackagedetails
    //Used in UPS Integration functionality
    public void saveUpsPackageDetails(JSONObject packageDetailsJobj, JSONObject packageDetailsFromUps, Packing packing) throws JSONException, ServiceException {
        Map<String, Object> paramsMap = new HashMap<>();
        paramsMap.put("packingId", packing.getID());
        if (!StringUtil.isNullOrEmpty(packageDetailsJobj.optString("srno", null))) {
            paramsMap.put("srno", packageDetailsJobj.optInt("srno"));
        }
        if (!StringUtil.isNullOrEmpty(StringUtil.decodeString(packageDetailsJobj.optString(IntegrationConstants.packageNumber)))) {
            paramsMap.put(IntegrationConstants.packageNumber, StringUtil.decodeString(packageDetailsJobj.optString(IntegrationConstants.packageNumber)));
        }
        if (!StringUtil.isNullOrEmpty(packageDetailsJobj.optString(IntegrationConstants.packagingType, null))) {
            paramsMap.put(IntegrationConstants.packagingType, packageDetailsJobj.optString(IntegrationConstants.packagingType));
        }
        if (!StringUtil.isNullOrEmpty(packageDetailsJobj.optString(IntegrationConstants.packageWeight, null))) {
            paramsMap.put(IntegrationConstants.packageWeight, packageDetailsJobj.optDouble(IntegrationConstants.packageWeight));
        }
        if (!StringUtil.isNullOrEmpty(packageDetailsJobj.optString(IntegrationConstants.packageDimensions, null))) {
            paramsMap.put(IntegrationConstants.packageDimensions, packageDetailsJobj.optString(IntegrationConstants.packageDimensions));
        }
        if (!StringUtil.isNullOrEmpty(packageDetailsJobj.optString(IntegrationConstants.declaredValue, null))) {
            paramsMap.put(IntegrationConstants.declaredValue, packageDetailsJobj.optDouble(IntegrationConstants.declaredValue));
        }
        if (!StringUtil.isNullOrEmpty(packageDetailsJobj.optString(IntegrationConstants.deliveryConfirmationType, null))) {
            paramsMap.put(IntegrationConstants.deliveryConfirmationType, packageDetailsJobj.optString(IntegrationConstants.deliveryConfirmationType));
        }
        if (!StringUtil.isNullOrEmpty(packageDetailsJobj.optString(IntegrationConstants.additionalHandling, null))) {
            paramsMap.put(IntegrationConstants.additionalHandling, packageDetailsJobj.optString(IntegrationConstants.additionalHandling));
        }
        if (!StringUtil.isNullOrEmpty(packageDetailsFromUps.optString(IntegrationConstants.TrackingNumber, null))) {
            paramsMap.put(IntegrationConstants.trackingNumber, packageDetailsFromUps.optString(IntegrationConstants.TrackingNumber));
            paramsMap.put(IntegrationConstants.shippingLabel, packageDetailsFromUps.optJSONObject(IntegrationConstants.ShippingLabel).optString("GraphicImage"));
        }
        accInvoiceDAOobj.saveOrUpdateUpsPackageDetails(paramsMap);
    }

    //Method to process user's request to download Shipping Label received from UPS side for package from packing report
    //Used in UPS Integration functionality
    public ModelAndView downloadLabel(HttpServletRequest request, HttpServletResponse response) {
        try {
//            String recordIDForLabelPrinting = request.getParameter("recordIDForLabelPrinting");//Id of ItemDetail record selected for Label Printing
//            if (!StringUtil.isNullOrEmpty(recordIDForLabelPrinting)) {
//                JSONObject requestParams = new JSONObject();
//                requestParams.put("companyid", sessionHandlerImpl.getCompanyid(request));
//                requestParams.put("recordIDForLabelPrinting", recordIDForLabelPrinting);
//                downloadShippingLabel(requestParams, request, response);
//            }
            
            JSONObject requestJobj = StringUtil.convertRequestToJsonObject(request);
            downloadShippingLabel(requestJobj, response);
        } catch (Exception ex) {
            Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
        }
        return new ModelAndView("jsonView-empty", "model", "Success");
    }

    //Method to process user's request to download Shipping Label received from UPS side for package from packing report
    //Used in UPS Integration functionality
    public void downloadShippingLabel(JSONObject requestJobj, HttpServletResponse response) {
        ByteArrayOutputStream baos = null;
        try {
            KwlReturnObject upsPackageDetailsKwlObj = accountingHandlerDAOobj.getObject(UpsPackageDetails.class.getName(), requestJobj.optString("recordIDForLabelPrinting"));
            UpsPackageDetails upsPackageDetails = (UpsPackageDetails) upsPackageDetailsKwlObj.getEntityList().get(0);
            String labelString = upsPackageDetails.getShippingLabel();
            if (!StringUtil.isNullOrEmpty(labelString)) {
                byte[] labelData = labelString.getBytes();
                labelData = Base64.decodeBase64(labelData);
                baos = new ByteArrayOutputStream(labelData.length);
                baos.write(labelData);
                String fileName = "shippingLabel_" + upsPackageDetails.getTrackingNumber();//Append Tracking Number in the name of shipping-label file
                String fileType = "gif";//File extension
                ExportrecordObj.writeDataToFile(fileName + "." + fileType, baos, response);
            }
        } catch (Exception ex) {
            Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                if (baos != null) {
                    baos.close();
                }
            } catch (IOException ex) {
                Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }
    
    //Method to process user's request to download Shipping Label received from UPS side for package from packing report
    //Used in UPS Integration functionality
//    public void downloadShippingLabel(JSONObject requestJobj, HttpServletResponse response) {
//        ByteArrayOutputStream baos = null;
//        try {
//            String trackingNumber = requestJobj.optString("trackingNumber");
//            if (StringUtil.isNullOrEmpty(trackingNumber)) {
//                KwlReturnObject upsPackageDetailsKwlObj = accountingHandlerDAOobj.getObject(UpsPackageDetails.class.getName(), requestJobj.optString("recordIDForLabelPrinting"));
//                UpsPackageDetails upsPackageDetails = (UpsPackageDetails) upsPackageDetailsKwlObj.getEntityList().get(0);
//                trackingNumber = upsPackageDetails.getTrackingNumber();
//            }
//            JSONObject paramsjobj = new JSONObject();
//            paramsjobj.put(Constants.companyKey, requestJobj.optString(Constants.companyKey));
//            paramsjobj.put(IntegrationConstants.TrackingNumber, trackingNumber);
//            paramsjobj.put(IntegrationConstants.integrationOperationIdKey, IntegrationConstants.ups_labelRecovery);
//            paramsjobj.put(IntegrationConstants.integrationPartyIdKey, IntegrationConstants.integrationPartyId_UPS);
//            
//            JSONObject labelrecoveryResponseJobj = integrationCommonService.processIntegrationRequest(paramsjobj);//POST data to UPS REST service and receive response
//            JSONObject LabelRecoveryResponse = labelrecoveryResponseJobj.optJSONObject("LabelRecoveryResponse");
//            JSONObject LabelResults = LabelRecoveryResponse.optJSONObject("LabelResults");
//            JSONObject LabelImage = LabelResults.optJSONObject("LabelImage");
//            String GraphicImage = LabelImage.optString("GraphicImage");
//            byte[] labelData = GraphicImage.getBytes();
//            
//            if (labelData.length != 0) {
//                labelData = Base64.decodeBase64(labelData);
//                baos = new ByteArrayOutputStream(labelData.length);
//                baos.write(labelData);
//                String fileName = "shippingLabel_" + trackingNumber;//Append Tracking Number in the name of shipping-label file
//                String fileType = "gif";//File extension
//                ExportrecordObj.writeDataToFile(fileName + "." + fileType, baos, response);
//            }
//        } catch (Exception ex) {
//            Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
//        } finally {
//            try {
//                if (baos != null) {
//                    baos.close();
//                }
//            } catch (IOException ex) {
//                Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
//            }
//        }
//    }

    public HashMap<String, Object> getPackingDoListsMap(HttpServletRequest request) throws SessionExpiredException {
        HashMap<String, Object> requestParams = AccountingManager.getGlobalParams(request);
        requestParams.put(Constants.ss, request.getParameter(Constants.ss));
        if (StringUtil.isNullOrEmpty(request.getParameter("filetype"))) {
            requestParams.put(Constants.start, request.getParameter(Constants.start));
            requestParams.put(Constants.limit, request.getParameter(Constants.limit));
        }
        requestParams.put(CCConstants.REQ_customerId, request.getParameter(CCConstants.REQ_customerId));
        requestParams.put(Constants.REQ_startdate, StringUtil.DecodeText(request.getParameter(Constants.REQ_startdate))); //When records are exported in pdf startdate and enddate
        requestParams.put(Constants.REQ_enddate, StringUtil.DecodeText(request.getParameter(Constants.REQ_enddate)));    //sends in url encoding
        requestParams.put(InvoiceConstants.billid, request.getParameter(InvoiceConstants.billid));
        requestParams.put("deleted", request.getParameter("deleted"));
        requestParams.put(Constants.productid, (request.getParameter(Constants.productid) == null) ? "" : request.getParameter(Constants.productid));
        requestParams.put(Constants.productCategoryid, (request.getParameter(Constants.productCategoryid) == null) ? "" : request.getParameter(Constants.productCategoryid));
        return requestParams;
    }

    public ModelAndView  getPackingDoListRows(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        String msg = "";
        boolean issuccess = false;
        try {
            jobj = getPackingDoListRows(request);
            issuccess = true;
        } catch (SessionExpiredException ex) {
            msg = ex.getMessage();
            Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ServiceException ex) {
            msg = "accInvoiceControllerCMN.getPackingDoListRows:" + ex.getMessage();
            Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            msg = "accInvoiceControllerCMN.getPackingDoListRows:" + ex.getMessage();
            Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                jobj.put("success", issuccess);
                jobj.put("msg", msg);
            } catch (JSONException ex) {
                Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return new ModelAndView(Constants.jsonView, "model", jobj.toString());
    }
    /*
        Function to get packing details
    */
    public ModelAndView  getPackingRows(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        String msg = "";
        boolean issuccess = false;
        try {
            jobj = getPackingRows(request);
            issuccess = true;
        } catch (SessionExpiredException ex) {
            msg = ex.getMessage();
            Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ServiceException ex) {
            msg = "accInvoiceControllerCMN.getPackingDoListRows:" + ex.getMessage();
            Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            msg = "accInvoiceControllerCMN.getPackingDoListRows:" + ex.getMessage();
            Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                jobj.put("success", issuccess);
                jobj.put("msg", msg);
            } catch (JSONException ex) {
                Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return new ModelAndView(Constants.jsonView, "model", jobj.toString());
    }
    
    public JSONObject getPackingDoListRows(HttpServletRequest request) throws SessionExpiredException, ServiceException {  //, HashMap<String, Integer> fieldMap
        JSONObject tempObj=new JSONObject();
        JSONArray tempArray=new JSONArray();
        try {
            HashMap<String, Object> requestParams = new HashMap<String, Object>();
            requestParams.put(Constants.companyKey, sessionHandlerImpl.getCompanyid(request));
            String companyid = sessionHandlerImpl.getCompanyid(request);
            DateFormat df = authHandler.getDateOnlyFormat();
            String[] billids = (String[]) request.getParameter("bills").split(",");
            int i = 0;
            HashMap<String, Object> fieldrequestParams = new HashMap();
            fieldrequestParams.put(Constants.filter_names, Arrays.asList(Constants.companyid, Constants.moduleid, Constants.customcolumn));
            fieldrequestParams.put(Constants.filter_values, Arrays.asList(sessionHandlerImpl.getCompanyid(request), 1));
            HashMap<String, Object> doRequestParams = new HashMap<String, Object>();
            ArrayList filter_names = new ArrayList(), filter_params = new ArrayList(), order_by = new ArrayList(), order_type = new ArrayList();
            filter_names.add("packingDoList.ID");
            doRequestParams.put("filter_names", filter_names);
            doRequestParams.put("filter_params", filter_params);
            while (billids != null && i < billids.length) {
                KwlReturnObject result = accountingHandlerDAOobj.getObject(PackingDoList.class.getName(), billids[i]);
                PackingDoList pack = (PackingDoList) result.getEntityList().get(0);
                filter_params.clear();
                filter_params.add(pack.getID());
                JSONArray productjArr = new JSONArray();
                JSONObject jobj = new JSONObject();
                KwlReturnObject podresult = accInvoiceDAOobj.getPackingDoListDetails(doRequestParams);
                Iterator itr = podresult.getEntityList().iterator();
                while (itr.hasNext()) {
                    PackingDoListDetail row = (PackingDoListDetail) itr.next();
                    JSONObject obj1 = new JSONObject();
                    obj1.put(Constants.billid, pack.getID());
                    obj1.put("billno", pack.getPackNumber());
                    obj1.put("srno", row.getSrno());
                    obj1.put("rowid", row.getID());
                    obj1.put("originalTransactionRowid", row.getID());
                    obj1.put("productid", row.getProduct().getID());
                    obj1.put("productname", row.getProduct().getName());
                    obj1.put("unitname",row.getProduct().getUnitOfMeasure()!=null?row.getProduct().getUnitOfMeasure().getNameEmptyforNA():"");
                    obj1.put("desc", StringUtil.isNullOrEmpty(row.getDescription()) ? row.getProduct().getDescription() : row.getDescription());
                    obj1.put("type", row.getProduct().getProducttype() == null ? "" : row.getProduct().getProducttype().getName());
                    obj1.put("pid", row.getProduct().getProductid());
                    obj1.put("remark", row.getRemark());
                    obj1.put("quantity", row.getActualQuantity());
                    obj1.put("deliveredquantity", row.getDeliveredQuantity());
                    obj1.put("description", StringUtil.isNullOrEmpty(row.getDescription()) ? row.getProduct().getDescription() : row.getDescription());
                    obj1.put("remark", row.getRemark());
                    obj1.put("actualquantity", row.getActualQuantity());
                    productjArr.put(obj1);
                }
                jobj.put("packingdolistdetails", productjArr);
                tempArray.put(jobj);
                
                JSONArray shipdojArr = new JSONArray();
                JSONObject jobj1 = new JSONObject();
                KwlReturnObject shipingdodetailsresult = accInvoiceDAOobj.getShipingDoDetails(doRequestParams);
                Iterator shipdoitr = shipingdodetailsresult.getEntityList().iterator();
                while (shipdoitr.hasNext()) {
                    ShipingDoDetails row = (ShipingDoDetails) shipdoitr.next();
                    JSONObject obj2 = new JSONObject();
                    obj2.put(Constants.billid, pack.getID());
                    obj2.put("billno", pack.getPackNumber());
                    obj2.put("rowid", row.getID());
                    obj2.put("originalTransactionRowid", row.getID());
                    obj2.put("productid", row.getProduct().getID());
                    obj2.put("productname", row.getProduct().getName());
                    obj2.put("unitname",row.getProduct().getUnitOfMeasure()!=null?row.getProduct().getUnitOfMeasure().getNameEmptyforNA():"");
                    obj2.put("desc", StringUtil.isNullOrEmpty(row.getProduct().getDescription()) ? row.getProduct().getDescription() : row.getProduct().getDescription());
                    obj2.put("type", row.getProduct().getProducttype() == null ? "" : row.getProduct().getProducttype().getName());
                    obj2.put("pid", row.getProduct().getProductid());
                    obj2.put("dono",row.getDeliveryOrder().getDeliveryOrderNumber());
                    obj2.put("quantityindo", row.getActualQuantity());
                    obj2.put("shipquantity",row.getShipQuantity());
                    obj2.put("duequantity",  row.getActualQuantity()-row.getShipedQuantity());
                    obj2.put("description", StringUtil.isNullOrEmpty(row.getProduct().getDescription()) ? row.getProduct().getDescription() : row.getProduct().getDescription());
                    obj2.put("actualquantity", row.getActualQuantity());
                    shipdojArr.put(obj2);
                }
                jobj1.put("shipingdodetails", shipdojArr);
                tempArray.put(jobj1);
                
                JSONArray packitemjArr = new JSONArray();
                JSONObject jobj2 = new JSONObject();
                KwlReturnObject itempackingdetailsres = accInvoiceDAOobj.getItemPackingDetails(doRequestParams);
                Iterator itempackitr = itempackingdetailsres.getEntityList().iterator();
                while (itempackitr.hasNext()) {
                    ItemPackingDetail row = (ItemPackingDetail) itempackitr.next();
                    JSONObject obj3 = new JSONObject();
                    obj3.put(Constants.billid, pack.getID());
                    obj3.put("billno", pack.getPackNumber());
                    obj3.put("srno", row.getSrno());
                    obj3.put("rowid", row.getID());
                    obj3.put("originalTransactionRowid", row.getID());
                    obj3.put("productid", row.getProduct().getID());
                    obj3.put("productname", row.getProduct().getName());
                    obj3.put("unitname",row.getProduct().getUnitOfMeasure()!=null?row.getProduct().getUnitOfMeasure().getNameEmptyforNA():"");
                    obj3.put("desc", StringUtil.isNullOrEmpty(row.getDescription()) ? row.getProduct().getDescription() : row.getDescription());
                    obj3.put("type", row.getProduct().getProducttype() == null ? "" : row.getProduct().getProducttype().getName());
                    obj3.put("pid", row.getProduct().getProductid());
                    obj3.put("packagequantity", row.getPackageQuantity());
                    obj3.put("itemperpackage", row.getItemPerPackage());
                    obj3.put("description", StringUtil.isNullOrEmpty(row.getDescription()) ? row.getProduct().getDescription() : row.getDescription());
                    obj3.put("totalquantity", row.getTotalItems());
                    obj3.put("packageid", row.getPackages().getPackageid());
                    obj3.put("packagename",row.getPackages().getPackagename());
                    obj3.put("packageweight",row.getPackages().getPackageweight());
                    obj3.put("productweight",row.getProduct().getProductweight());
                    obj3.put("grossweight",row.getGrossWeight());
                    packitemjArr.put(obj3);
                }
                jobj2.put("itempackingdetails", packitemjArr);
                tempArray.put(jobj2);  
                tempObj.put(Constants.data,tempArray);
                i++;
            }
           
        } catch (JSONException je) {
            throw ServiceException.FAILURE(je.getMessage(), je);
        }
        return tempObj;
    }
    /*
        Function which will return JSON object of packing details
    */
    public JSONObject getPackingRows(HttpServletRequest request) throws SessionExpiredException, ServiceException {  //, HashMap<String, Integer> fieldMap
        JSONObject tempObj=new JSONObject();
        JSONArray tempArray=new JSONArray();
        try {
            String companyid = sessionHandlerImpl.getCompanyid(request);
            KwlReturnObject extracompanyprefresult = accountingHandlerDAOobj.getObject(ExtraCompanyPreferences.class.getName(), companyid);
            ExtraCompanyPreferences extracompanypref = (ExtraCompanyPreferences) extracompanyprefresult.getEntityList().get(0);
            DateFormat df = authHandler.getDateOnlyFormat();
            String[] billids = null;
            if (!StringUtil.isNullOrEmpty(request.getParameter("filetype"))) {
                billids = request.getAttribute("bills").toString().split(",");
            } else {
                billids = request.getParameter("bills").split(",");
            }
            int i = 0;
            HashMap<String, Object> fieldrequestParams = new HashMap();
            fieldrequestParams.put(Constants.filter_names, Arrays.asList(Constants.companyid, Constants.moduleid, Constants.customcolumn));
            fieldrequestParams.put(Constants.filter_values, Arrays.asList(sessionHandlerImpl.getCompanyid(request), 1));
            HashMap<String, Object> doRequestParams = new HashMap<String, Object>();
            ArrayList filter_names = new ArrayList(), filter_params = new ArrayList(), order_by = new ArrayList(), order_type = new ArrayList();
            filter_names.add("packing.ID");
            doRequestParams.put("filter_names", filter_names);
            doRequestParams.put("filter_params", filter_params);
            while (billids != null && i < billids.length) {
                KwlReturnObject result = accountingHandlerDAOobj.getObject(Packing.class.getName(), billids[i]);
                Packing pack = (Packing) result.getEntityList().get(0);
                filter_params.clear();
                filter_params.add(pack.getID());
                JSONArray productjArr = new JSONArray();
                JSONObject jobj = new JSONObject();
                KwlReturnObject podresult = accInvoiceDAOobj.getPackingDetails(doRequestParams);
                Iterator itr = podresult.getEntityList().iterator();
                while (itr.hasNext()) {
                    PackingDetail row = (PackingDetail) itr.next();
                    JSONObject obj1 = new JSONObject();
                    obj1.put(Constants.billid, pack.getID());
                    obj1.put("billno", pack.getPackNumber());
                    obj1.put("srno", row.getSrno());
                    obj1.put("rowid", row.getID());
                    obj1.put("originalTransactionRowid", row.getID());
                    obj1.put("productid", row.getProduct().getID());
                    obj1.put("productname", row.getProduct().getName());
                    obj1.put("unitname",row.getProduct().getUnitOfMeasure()!=null?row.getProduct().getUnitOfMeasure().getNameEmptyforNA():"");
                    obj1.put("desc", StringUtil.isNullOrEmpty(row.getDescription()) ? row.getProduct().getDescription() : row.getDescription());
                    obj1.put(IntegrationConstants.packageNumber, row.getPackageNumber() == null ? "" : row.getPackageNumber());
                    obj1.put("type", row.getProduct().getProducttype() == null ? "" : row.getProduct().getProducttype().getName());
                    obj1.put("pid", row.getProduct().getProductid());
                    /**
                     * If the products baseUOMrate is not 1 then display the UOM conversion =product qty X baseUOMrate. 
                     */
                    if (row.getDodetailid().getBaseuomrate() != 1) {
                        obj1.put("quantity", row.getActualQuantity() * row.getDodetailid().getBaseuomrate());
                        obj1.put("deliveredquantity", row.getPackingQuantity() * row.getDodetailid().getBaseuomrate());
                        obj1.put("actualquantity", row.getActualQuantity() * row.getDodetailid().getBaseuomrate());
                    } else {
                        obj1.put("quantity", row.getActualQuantity());
                        obj1.put("deliveredquantity", row.getPackingQuantity());
                        obj1.put("actualquantity", row.getActualQuantity());
                    }
                    obj1.put("description", StringUtil.isNullOrEmpty(row.getDescription()) ? row.getProduct().getDescription() : StringUtil.DecodeText(row.getDescription()));
                    productjArr.put(obj1);
                }
                jobj.put("packingdolistdetails", productjArr);
                tempArray.put(jobj);
                
                JSONArray shipdojArr = new JSONArray();
                JSONObject jobj1 = new JSONObject();
                KwlReturnObject dodetailsresult = accInvoiceDAOobj.getPackingDetails(doRequestParams);
                Iterator doitr = dodetailsresult.getEntityList().iterator();
                while (doitr.hasNext()) {
                    PackingDetail row = (PackingDetail) doitr.next();
                    JSONObject obj2 = new JSONObject();
                    obj2.put(Constants.billid, pack.getID());
                    obj2.put("billno", pack.getPackNumber());
                    obj2.put("rowid", row.getID());
                    obj2.put("originalTransactionRowid", row.getID());
                    obj2.put("productid", row.getProduct().getID());
                    obj2.put("productname", row.getProduct().getName());
                    obj2.put("unitname",row.getDodetailid().getUom().getNameEmptyforNA());
                    obj2.put("desc", StringUtil.isNullOrEmpty(row.getProduct().getDescription()) ? row.getProduct().getDescription() : row.getProduct().getDescription());
                    obj2.put("type", row.getProduct().getProducttype() == null ? "" : row.getProduct().getProducttype().getName());
                    obj2.put("pid", row.getProduct().getProductid());
                    obj2.put("dono",row.getDodetailid().getDeliveryOrder().getDeliveryOrderNumber());
                    obj2.put("quantityindo", row.getActualQuantity());
                    obj2.put("shipquantity",row.getPackingQuantity());
                    obj2.put("duequantity",  row.getActualQuantity()-row.getPackingQuantity());
                    obj2.put("description", StringUtil.isNullOrEmpty(row.getProduct().getDescription()) ? row.getProduct().getDescription() : row.getProduct().getDescription());
                    obj2.put("actualquantity", row.getActualQuantity());
                    shipdojArr.put(obj2);
                }
                jobj1.put("shipingdodetails", shipdojArr);
                tempArray.put(jobj1);
                
                boolean upsIntegrationFlag = extracompanypref.isUpsIntegration();
                if (upsIntegrationFlag) {//In case of UPS Integration, fetch and add UpsPackageDetails instead of ItemDetails
                    JSONArray upsPackageDetailsJarr = new JSONArray();
                    JSONObject jobj2 = new JSONObject();
                    order_by.add("srno");
                    order_type.add("ASC");
                    doRequestParams.put("order_by", order_by);
                    doRequestParams.put("order_type", order_type);
                    KwlReturnObject upsPackageDetailsKwlObj = accInvoiceDAOobj.getUpsPackageDetails(doRequestParams);
                    if (upsPackageDetailsKwlObj.getEntityList() != null) {
                        Iterator upsPackageDetailsItr = upsPackageDetailsKwlObj.getEntityList().iterator();
                        while (upsPackageDetailsItr.hasNext()) {
                            UpsPackageDetails upsPackageDetails = (UpsPackageDetails) upsPackageDetailsItr.next();
                            JSONObject upsPackageDetailsJobj = new JSONObject();
                            upsPackageDetailsJobj.put("rowid", upsPackageDetails.getID());
                            upsPackageDetailsJobj.put(Constants.billid, pack.getID());
                            upsPackageDetailsJobj.put("srno", upsPackageDetails.getSrno());
                            upsPackageDetailsJobj.put(IntegrationConstants.packageNumber, upsPackageDetails.getPackageNumber());
                            upsPackageDetailsJobj.put(IntegrationConstants.packagingType, upsPackageDetails.getPackagingType());
                            upsPackageDetailsJobj.put(IntegrationConstants.packageWeight, upsPackageDetails.getPackageWeight());
                            upsPackageDetailsJobj.put(IntegrationConstants.packageDimensions, upsPackageDetails.getPackageDimensions());
                            upsPackageDetailsJobj.put(IntegrationConstants.declaredValue, upsPackageDetails.getDeclaredValue());
                            upsPackageDetailsJobj.put(IntegrationConstants.deliveryConfirmationType, upsPackageDetails.getDeliveryConfirmationType());
                            upsPackageDetailsJobj.put(IntegrationConstants.additionalHandling, upsPackageDetails.getAdditionalHandling());
                            upsPackageDetailsJobj.put("trackingNumber", upsPackageDetails.getTrackingNumber());
                            upsPackageDetailsJarr.put(upsPackageDetailsJobj);
                        }
                    }
                    jobj2.put("upsPackageDetails", upsPackageDetailsJarr);
                    tempArray.put(jobj2); 
                } else {
                    JSONArray packitemjArr = new JSONArray();
                    JSONObject jobj2 = new JSONObject();
                    KwlReturnObject itempackingdetailsres = accInvoiceDAOobj.getItemDetails(doRequestParams);
                    Iterator itempackitr = itempackingdetailsres.getEntityList().iterator();
                    while (itempackitr.hasNext()) {
                        ItemDetail row = (ItemDetail) itempackitr.next();
                        JSONObject obj3 = new JSONObject();
                        obj3.put(Constants.billid, pack.getID());
                        obj3.put("billno", pack.getPackNumber());
                        obj3.put("srno", row.getSrno());
                        obj3.put("rowid", row.getID());
                        obj3.put("originalTransactionRowid", row.getID());
                        obj3.put("productid", row.getProduct().getID());
                        obj3.put("productname", row.getProduct().getName());
                        obj3.put("unitname",row.getPackingdetails().getDodetailid().getUom().getNameEmptyforNA());
                        obj3.put("desc", StringUtil.isNullOrEmpty(row.getDescription()) ? row.getProduct().getDescription() : row.getDescription());
                        obj3.put("type", row.getProduct().getProducttype() == null ? "" : row.getProduct().getProducttype().getName());
                        obj3.put("pid", row.getProduct().getProductid());
                        obj3.put("packagequantity", row.getPackageQuantity());
                        obj3.put("itemperpackage", row.getItemPerPackage());
                        obj3.put("description", StringUtil.isNullOrEmpty(row.getDescription()) ? row.getProduct().getDescription() : row.getDescription());
                        obj3.put("totalquantity", row.getTotalItems());
                        obj3.put("packageid", row.getPackages().getPackageid());
                        obj3.put("packagename",row.getPackages().getPackagename());
                        obj3.put("packageweight",row.getPackages().getPackageweight());
                        obj3.put("productweight",row.getProduct().getProductweight());
                        obj3.put("grossweight",row.getGrossWeight());
                        obj3.put("measurement",row.getPackages().getMeasurement());
                        packitemjArr.put(obj3);
                    }
                    jobj2.put("itempackingdetails", packitemjArr);
                    tempArray.put(jobj2);  
                }
                tempObj.put(Constants.data,tempArray);
                i++;
            }
           
        } catch (JSONException je) {
            throw ServiceException.FAILURE(je.getMessage(), je);
        }
        return tempObj;
    }
    public void exportBMCustomerInvoiceReport(HttpServletRequest request, HttpServletResponse response) {//buildmate company
        try {
            List jasperPrint = accExportReportsServiceDAOobj.exportBMCustomerInvoiceReport(request, response);
            JRPdfExporter exp = new JRPdfExporter();
            exp.setParameter(JRExporterParameter.JASPER_PRINT_LIST, jasperPrint);
            exp.setParameter(JRPdfExporterParameter.OUTPUT_STREAM, response.getOutputStream());
            exp.exportReport();
        } catch (Exception e) {
            Logger.getLogger(accInvoiceController.class.getName()).log(Level.SEVERE, null, e);
        }
    }

    public void exportFOneCustomerInvoiceReport(HttpServletRequest request, HttpServletResponse response) {//buildmate company
        try {
            List jasperPrint = accExportReportsServiceDAOobj.exportFOneCustomerInvoiceReport(request, response);
            JRPdfExporter exp = new JRPdfExporter();
            exp.setParameter(JRExporterParameter.JASPER_PRINT_LIST, jasperPrint);
            exp.setParameter(JRPdfExporterParameter.OUTPUT_STREAM, response.getOutputStream());
            exp.exportReport();
        } catch (Exception e) {
            Logger.getLogger(accInvoiceController.class.getName()).log(Level.SEVERE, null, e);
        }
    }

    public void exportF1RecreationCustomerQuotation(HttpServletRequest request, HttpServletResponse response) {

        try {
            List jasperPrint = accExportReportsServiceDAOobj.exportF1RecreationCustomerQuotation(request, response);
            JRPdfExporter exp = new JRPdfExporter();
            exp.setParameter(JRExporterParameter.JASPER_PRINT_LIST, jasperPrint);
            exp.setParameter(JRPdfExporterParameter.OUTPUT_STREAM, response.getOutputStream());
            exp.exportReport();
        } catch (Exception e) {
            Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, e);
        }
    }
    
    public void exportGuanChongProformaInvoice(HttpServletRequest request, HttpServletResponse response) {

        try {
            List jasperPrint = accExportOtherReportsServiceDAOobj.exportGuanChongProformaInvoice(request, response);
            JRPdfExporter exp = new JRPdfExporter();
            exp.setParameter(JRExporterParameter.JASPER_PRINT_LIST, jasperPrint);
            exp.setParameter(JRPdfExporterParameter.OUTPUT_STREAM, response.getOutputStream());
            exp.exportReport();
        } catch (Exception e) {
            Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, e);
        }
    }

    public void exportDiamondAviationCustomerQuotation(HttpServletRequest request, HttpServletResponse response) {

        try {
            List jasperPrint = accExportOtherReportsServiceDAOobj.exportDiamondAviationCustomerQuotation(request, response);
            JRPdfExporter exp = new JRPdfExporter();
            exp.setParameter(JRExporterParameter.JASPER_PRINT_LIST, jasperPrint);
            exp.setParameter(JRPdfExporterParameter.OUTPUT_STREAM, response.getOutputStream());
            exp.exportReport();
        } catch (Exception e) {
            Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, e);
        }
    }
    
    public void exportRightSpaceCustomerQuoteAndInvoice(HttpServletRequest request, HttpServletResponse response) {

        try {
            List jasperPrint = accExportOtherReportsServiceDAOobj.exportRightSpaceCustomerQuoteAndInvoice(request, response);
            JRPdfExporter exp = new JRPdfExporter();
            exp.setParameter(JRExporterParameter.JASPER_PRINT_LIST, jasperPrint);
            exp.setParameter(JRPdfExporterParameter.OUTPUT_STREAM, response.getOutputStream());
            exp.exportReport();
        } catch (Exception e) {
            Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, e);
        }
    }
    
    public void exportCustomerQuotationForFasten(HttpServletRequest request, HttpServletResponse response) {

        try {
            List jasperPrint = accExportOtherReportsServiceDAOobj.exportCustomerQuotationForFasten(request, response);
            JRPdfExporter exp = new JRPdfExporter();
            exp.setParameter(JRExporterParameter.JASPER_PRINT_LIST, jasperPrint);
            exp.setParameter(JRPdfExporterParameter.OUTPUT_STREAM, response.getOutputStream());
            exp.exportReport();
        } catch (Exception e) {
            Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, e);
        }
    }
    
    public void exportHinsitsuCustomerQoutationJasper(HttpServletRequest request, HttpServletResponse response) {
        try {
            List jasperPrint = accExportOtherReportsServiceDAOobj.exportHinsitsuCustomerQoutationJasper(request, response);
            JRPdfExporter exp = new JRPdfExporter();
            exp.setParameter(JRExporterParameter.JASPER_PRINT_LIST, jasperPrint);
            exp.setParameter(JRPdfExporterParameter.OUTPUT_STREAM, response.getOutputStream());
            exp.exportReport();
        } catch (Exception e) {
            Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, e);
        }
    }
    
    public void exportMonzoneCustomerQuotation(HttpServletRequest request, HttpServletResponse response) {

        try {
             List jasperPrint = accExportOtherReportsServiceDAOobj.exportMonzoneCustomerQuotation(request, response);
            JRPdfExporter exp = new JRPdfExporter();
            exp.setParameter(JRExporterParameter.JASPER_PRINT_LIST, jasperPrint);
            exp.setParameter(JRPdfExporterParameter.OUTPUT_STREAM, response.getOutputStream());
            exp.exportReport();
        } catch (Exception e) {
            Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, e);
        }
    }
    public void exportCustomerQuotationJasper(HttpServletRequest request, HttpServletResponse response) {

        try {
            List jasperPrint = accExportOtherReportsServiceDAOobj.exportCustomerQuotationJasper(request, response);
            JRPdfExporter exp = new JRPdfExporter();
            exp.setParameter(JRExporterParameter.JASPER_PRINT_LIST, jasperPrint);
            exp.setParameter(JRPdfExporterParameter.OUTPUT_STREAM, response.getOutputStream());
            exp.exportReport();
        } catch (Exception e) {
            Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, e);
        }
    }
    public void exportCustomerQuotationForTonyFibreGlass(HttpServletRequest request, HttpServletResponse response) {

        try {
            List jasperPrint = accExportOtherReportsServiceDAOobj.exportCustomerQuotationForTonyFibreGlass(request, response);
            JRPdfExporter exp = new JRPdfExporter();
            exp.setParameter(JRExporterParameter.JASPER_PRINT_LIST, jasperPrint);
            exp.setParameter(JRPdfExporterParameter.OUTPUT_STREAM, response.getOutputStream());
            exp.exportReport();
        } catch (Exception e) {
            Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, e);
        }
    }
    public void exportPurchaseReturn(HttpServletRequest request, HttpServletResponse response) {
        try {
            List jasperPrint = accExportReportsServiceDAOobj.exportPurchaseReturn(request, response,null, null);
            JRPdfExporter exp = new JRPdfExporter();
            exp.setParameter(JRExporterParameter.JASPER_PRINT_LIST, jasperPrint);
            exp.setParameter(JRPdfExporterParameter.OUTPUT_STREAM, response.getOutputStream());
            exp.exportReport();
        } catch (Exception e) {
            Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, e);
        }
    }

    public void exportSalesReturnJasper(HttpServletRequest request, HttpServletResponse response ) {
        try {
            List jasperPrint = accExportReportsServiceDAOobj.exportSalesReturnJasper(request, response,null,null);
            JRPdfExporter exp = new JRPdfExporter();
            exp.setParameter(JRExporterParameter.JASPER_PRINT_LIST, jasperPrint);
            exp.setParameter(JRPdfExporterParameter.OUTPUT_STREAM, response.getOutputStream());
            exp.exportReport();
        } catch (Exception e) {
            Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, e);
        }
    }
    
    public void exportCNDNSRPRJasperForFasten(HttpServletRequest request, HttpServletResponse response ) {
        try {
            List jasperPrint = accExportOtherReportsServiceDAOobj.exportCNDNSRPRJasperForFasten(request, response,null,null,Constants.Acc_Sales_Return_ModuleId);
            JRPdfExporter exp = new JRPdfExporter();
            exp.setParameter(JRExporterParameter.JASPER_PRINT_LIST, jasperPrint);
            exp.setParameter(JRPdfExporterParameter.OUTPUT_STREAM, response.getOutputStream());
            exp.exportReport();
        } catch (Exception e) {
            Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, e);
        }
    }

    public void exportDefaultFormatCreditNoteJasper(HttpServletRequest request, HttpServletResponse response ) {
        try {

            List<Object> list = new ArrayList<Object>();
            String billid = "";
            String recordIDs = request.getParameter("recordids") != null ? request.getParameter("recordids") : "";
            String recArray[] = recordIDs.split(",");

            if (recArray.length != 0) {
                for (String s : recArray) {
                    billid = s;
                    JasperPrint jasperPrint = null;
                    if ("3".equals(request.getParameter("mode"))) {
                        jasperPrint = accExportOtherReportsServiceDAOobj.exportDefaultFormatCreditNoteJasperReport(request, response, billid);
                    } else {
                        jasperPrint = accExportOtherReportsServiceDAOobj.exportDefaultFormatDebitNoteJasperReport(request, response, billid);
                    }
                    list.add(jasperPrint);
                }
            }
            JRPdfExporter exp = new JRPdfExporter();
            exp.setParameter(JRExporterParameter.JASPER_PRINT_LIST, list);
            exp.setParameter(JRPdfExporterParameter.OUTPUT_STREAM, response.getOutputStream());
            exp.exportReport();
        } catch (Exception e) {
            Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, e);
        }
    }
     
    public void exportPackingList(HttpServletRequest request, HttpServletResponse response) {
        try {
            List jasperPrint = accExportReportsServiceDAOobj.exportPackingList(request, response);
            JRPdfExporter exp = new JRPdfExporter();
            exp.setParameter(JRExporterParameter.JASPER_PRINT_LIST, jasperPrint);
            exp.setParameter(JRPdfExporterParameter.OUTPUT_STREAM, response.getOutputStream());
            exp.exportReport();
        } catch (Exception e) {
            Logger.getLogger(accInvoiceController.class.getName()).log(Level.SEVERE, null, e);
        }
    }
     public void exportGCBCreditNoteJasperReport(HttpServletRequest request, HttpServletResponse response){
        try {
            List jasperPrint = accExportReportsServiceDAOobj.exportGCBCreditNoteJasperReport(request, response);
            JRPdfExporter exp = new JRPdfExporter();
            exp.setParameter(JRExporterParameter.JASPER_PRINT_LIST, jasperPrint);
            exp.setParameter(JRPdfExporterParameter.OUTPUT_STREAM, response.getOutputStream());
            exp.exportReport();
        } catch (Exception e) {
            Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, e);
        }
    }
     public ModelAndView getInvoicesForLifoFifo(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        JSONArray invoiceArray = new JSONArray();
        JSONArray advanceArray = new JSONArray();
        JSONObject returnObject = new JSONObject();
        boolean issuccess = false;
        String msg = "";
        try {
	    DateFormat df = authHandler.getDateOnlyFormat();
            String companyid = sessionHandlerImpl.getCompanyid(request);
            boolean isEdit = request.getParameter("isEdit") == null ? false : Boolean.parseBoolean(request.getParameter("isEdit"));
            boolean isCopy = request.getParameter("isCopy") == null ? false : Boolean.parseBoolean(request.getParameter("isCopy"));
            boolean isFullPaymentRequired = false;
            String customerId = request.getParameter(InvoiceConstants.accid) != null ? request.getParameter(InvoiceConstants.accid).toString() : "";
            KwlReturnObject custResult = accountingHandlerDAOobj.getObject(Customer.class.getName(), customerId);
            Customer customer = (Customer) custResult.getEntityList().get(0);
            isFullPaymentRequired = customer.isOverseas();
            String currencyfilterfortrans = request.getParameter("currencyfilterfortrans");
            HashSet invoicesList = new HashSet();
            double amountToPay = Double.parseDouble(request.getParameter("amount"));
            KwlReturnObject curresult = accountingHandlerDAOobj.getObject(KWLCurrency.class.getName(), sessionHandlerImpl.getCurrencyID(request));
            KWLCurrency currency = (KWLCurrency) curresult.getEntityList().get(0);
            HashMap requestParams = AccInvoiceServiceHandler.getInvoiceRequestMap(request);
            /*
             * onlyclaimedamountdue is used for loading the invoices having amount due  = 0 but claimed amount due not equal to 0 
             */
            requestParams.put("onlyclaimedamountdue", true);
            /**
             * Getting record based on JE date rather than document creation
             * date ERM-655.
             */
            requestParams.put("getRecordBasedOnJEDate", true);
            KwlReturnObject result = accInvoiceDAOobj.getInvoices(requestParams);
            List<Invoice> list = result.getEntityList();
            KwlReturnObject openingInvoicesResult = accInvoiceDAOobj.getOpeningBalanceInvoices(requestParams);
            List<Invoice> openingInvoicesList = openingInvoicesResult.getEntityList();         // Here, objects of openinginvoices are added into the normal invoices list.
            list.addAll(openingInvoicesList);
            if ((isEdit && !isCopy) && !StringUtil.isNullOrEmpty(request.getParameter("billId").toString())) {
                KwlReturnObject receiptResult = accountingHandlerDAOobj.getObject(Receipt.class.getName(), request.getParameter("billId").toString());
                Receipt receipt = (Receipt) receiptResult.getEntityList().get(0);
                Set<ReceiptDetail> receiptDetails = receipt.getRows();
                for (ReceiptDetail receiptDetail : receiptDetails) {
                    invoicesList.add(receiptDetail.getInvoice().getID());
                }
            }
            if (!StringUtil.isNullOrEmpty(request.getParameter("direction")) && request.getParameter("direction").toString().equals("ASC")) {
                Collections.sort(list, Collections.reverseOrder(new InvoiceComparator()));                                                  // List is reveresed if FIFO methos is used.
            } else {
                Collections.sort(list, new InvoiceComparator());
            }
            boolean isInvoiceIsClaimed = false;
            for (Invoice invoice : list) {
                if ((!isEdit || isEdit && !(invoicesList.contains(invoice.getID()))) && amountToPay != 0) {
                    double externalCurrencyRate = 0.0;
                    Date creationDate = null;
                    double amountdue = 0.0;
                    double amountDueDummy = 0.0; // Used for calculation purpose only. 
                    double amountDueOriginal = 0.0;
                    JSONObject obj = new JSONObject();
                    String currencyid = (invoice.getCurrency() == null ? currency.getCurrencyID() : invoice.getCurrency().getCurrencyID());
                    List ll = new ArrayList();
                    isInvoiceIsClaimed = invoice.getBadDebtType() == Constants.Invoice_Claimed || invoice.getBadDebtType() == Constants.Invoice_Recovered;
                    JournalEntry je = invoice.getJournalEntry();
                    if (isInvoiceIsClaimed) {
                        amountdue = invoice.getClaimAmountDue();
                        amountDueOriginal = amountdue;
                        // Converting the amount due into payment currency
                        if (!StringUtil.isNullOrEmpty(currencyfilterfortrans) && !StringUtil.isNullOrEmpty(currencyid) && !currencyfilterfortrans.equals(currencyid)) {
//                            KwlReturnObject bAmt = accCurrencyDAOobj.getOneCurrencyToOtherModified(requestParams, amountdue, currencyid, currencyfilterfortrans, invoice.getJournalEntry().getEntryDate(), invoice.getExternalCurrencyRate());
                            KwlReturnObject bAmt = accCurrencyDAOobj.getOneCurrencyToOtherModified(requestParams, amountdue, currencyid, currencyfilterfortrans, invoice.getCreationDate(), invoice.getExternalCurrencyRate());
                            amountdue = (Double) bAmt.getEntityList().get(0);
                        }
                    } else {
                        creationDate = invoice.getCreationDate();
                        if (invoice.isIsOpeningBalenceInvoice() && !invoice.isNormalInvoice()) {   // Opening Invoice
                            amountdue = invoice.getOpeningBalanceAmountDue();       // this amount is converted in Payment Currency Below
                            amountDueOriginal = invoice.getOpeningBalanceAmountDue();//this amount is in Invoice currency
                            externalCurrencyRate = invoice.getExchangeRateForOpeningTransaction();
                        } else {
                            if (Constants.InvoiceAmountDueFlag) {
                                ll = accInvoiceCommon.getInvoiceDiscountAmountInfo(requestParams, invoice);
                            } else {
                                ll = accInvoiceCommon.getAmountDue_Discount(requestParams, invoice);
                            }
                            amountdue = (Double) ll.get(0);               // this amount is in payment currency
                            amountDueOriginal = (Double) ll.get(3);        //this amount is in Invoice currency
                            externalCurrencyRate = invoice.getJournalEntry().getExternalCurrencyRate();
//                            creationDate = invoice.getJournalEntry().getEntryDate();
                        }
                        if (invoice.isIsOpeningBalenceInvoice() && !currencyfilterfortrans.equals(currencyid)) {
                            KwlReturnObject bAmt1 = null;
                            if (invoice.isConversionRateFromCurrencyToBase()) {
                                bAmt1 = accCurrencyDAOobj.getOneCurrencyToOtherModifiedAccordingToCurrencyToBaseExchangeRate(requestParams, amountdue, currencyid, currencyfilterfortrans, creationDate, externalCurrencyRate);
                            } else {
                                bAmt1 = accCurrencyDAOobj.getOneCurrencyToOtherModified(requestParams, amountdue, currencyid, currencyfilterfortrans, creationDate, externalCurrencyRate);
                            }
                            amountdue = (Double) bAmt1.getEntityList().get(0);       // this amount is in payment currency
                        }
                    }

                    amountDueDummy = amountdue;

                    /*
                     * ERP-16644 , ERP-16276 
                     * Cases: 1. If 'isFullPaymentRequired' is True of customer , No invoice
                     * will be paid partially. Instead, extra amount will be
                     * added as advance amount 
                     * 2. If 'isFullPaymentRequired' is
                     * False of customer , and extra amount is less than next
                     * invoice's amount due, that invoice will be paid partially
                     * with that extra amount.
                     */
                    if (amountdue == 0 || amountdue < 0) {                        // Invoice with amount due zero
                        continue;
                    } else if (amountdue > amountToPay && !isFullPaymentRequired) {   // If amount remaining is less than next invoice amount due and partial payment for customer is allowed
                        amountDueDummy = amountToPay;
                        amountToPay = 0;
                    } else if (amountdue > amountToPay && isFullPaymentRequired) {     // If amount remaining is less than next invoice amount due and partial payment for customer is NOT allowed. Here remaning amount will be considered as advance.
                        break;
                    } else {
                        amountToPay = amountToPay - amountdue;                     // Normal Flow
                    }
                    obj.put("type", 2);
                    obj.put("enteramount", authHandler.round(amountDueDummy, companyid));
                    obj.put("documentid", invoice.getID());
                    obj.put("documentno", invoice.getInvoiceNumber());
		    try{
//                        obj.put("date", df.format(invoice.getJournalEntry().getEntryDate()));    //SDP-12268
                        obj.put("date", df.format(invoice.getCreationDate()));    //SDP-12268
                        /**
                         * Passing JE date in response for validating date on JS
                         * Side ERM-655.
                         */
                        obj.put("jeDate", df.format(invoice.getJournalEntry() != null ? invoice.getJournalEntry().getEntryDate() : invoice.getCreationDate()));
                    } catch(Exception pe){
                        obj.put("date", "");    //SDP-12268
                    }
                    obj.put("amountdue", authHandler.round(amountdue, companyid));
                    obj.put("amountDueOriginal", (amountDueOriginal <= 0) ? 0 : authHandler.round(amountDueOriginal, companyid));
                    obj.put("amountDueOriginalSaved", (amountDueOriginal <= 0) ? 0 : authHandler.round(amountDueOriginal, companyid));
                    obj.put("exchangeratefortransaction", (amountDueOriginal <= 0 && amountdue <= 0) ? 0 : (amountdue / amountDueOriginal));
                    obj.put("currencyidtransaction", currencyid);
                    obj.put("currencysymboltransaction", (invoice.getCurrency() == null ? currency.getSymbol() : invoice.getCurrency().getSymbol()));
                    obj.put(Constants.currencyKey, currencyid);
                    
                    //Get Invoice Custom Data
                    accInvoiceServiceDAO.getInvoiceCustomDataForPayment(requestParams, obj, invoice, je);
                    invoiceArray.put(obj);
                }
            }
            returnObject.put("Invoices", invoiceArray);
            if (invoiceArray.length() != 0 && amountToPay != 0) { // This is the condition where sum of all the invoices selected is less than amount entered by user. This extra amount will be received as 'Advance Amount'
                JSONObject obj = new JSONObject();
                obj.put("type", 1);
                obj.put("enteramount", authHandler.round(amountToPay, companyid));
                obj.put("documentno", "");
                obj.put("amountdue", authHandler.round(amountToPay, companyid));
                obj.put("amountDueOriginal", 0);
                obj.put("amountDueOriginalSaved", 0);
                obj.put("exchangeratefortransaction", 1);
                advanceArray.put(obj);
            }
            returnObject.put("AdvancePayment", advanceArray);
            jobj.put(Constants.data, returnObject);
            jobj.put("count", invoiceArray.length());
            issuccess = true;
        } catch (SessionExpiredException ex) {
            msg = ex.getMessage();
            Logger.getLogger(accGoodsReceiptController.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ServiceException ex) {
            msg = ex.getMessage();
            Logger.getLogger(accGoodsReceiptController.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            msg = "accInvoiceControllerCMN.getInvoicesForLifoFifo : " + ex.getMessage();
        } finally {
            try {
                jobj.put("success", issuccess);
                jobj.put("msg", msg);
            } catch (JSONException ex) {
                Logger.getLogger(accGoodsReceiptController.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return new ModelAndView(Constants.jsonView, "model", jobj.toString());
    }
     
    public ModelAndView getInvoicesForPayment(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        boolean issuccess = false;
        String msg = "";
        try {
            HashMap requestParams = AccInvoiceServiceHandler.getInvoiceRequestMap(request);
            /*
             * onlyclaimedamountdue is used for loading the invoices having amount due  = 0 but claimed amount due not equal to 0 
             */
            requestParams.put("onlyclaimedamountdue", true);
            requestParams.put("getRecordBasedOnJEDate", true);
            KwlReturnObject result = accInvoiceDAOobj.getInvoices(requestParams);
            List list = result.getEntityList();
            JSONArray DataJArr = new JSONArray();  
            boolean isEdit = request.getParameter("isEdit") == null ? false : Boolean.parseBoolean(request.getParameter("isEdit"));
            request.setAttribute("isEdit", isEdit);
            HashSet invoicesList = new HashSet();
            if (isEdit && !StringUtil.isNullOrEmpty(request.getParameter("billId").toString())) {
                KwlReturnObject receiptResult = accountingHandlerDAOobj.getObject(Receipt.class.getName(), request.getParameter("billId").toString());
                Receipt receipt = (Receipt) receiptResult.getEntityList().get(0);
                Set<ReceiptDetail> receiptDetails = receipt.getRows();
                for (ReceiptDetail receiptDetail : receiptDetails) {
                    invoicesList.add(receiptDetail.getInvoice().getID());
                    invoicesList.add(receiptDetail.getROWJEDID());
                }
            }
            DataJArr = getInvoiceJsonForPayment(request, list,invoicesList).getJSONArray(Constants.data);
            JSONArray openingBalanceInvoicesJsonArray = getOpeningBalanceInvoicesJsonArray(request, DataJArr,invoicesList);     //ERP-41122
            int count = DataJArr.length();
            JSONArray pagedJson = DataJArr;
            String start = request.getParameter("start");
            String limit = request.getParameter("limit");
            if (!StringUtil.isNullOrEmpty(start) && !StringUtil.isNullOrEmpty(limit)) {
                pagedJson = StringUtil.getPagedJSON(pagedJson, Integer.parseInt(start), Integer.parseInt(limit));
            }

            jobj.put(Constants.data, pagedJson);
            jobj.put("count", count);
            issuccess = true;
        } catch (Exception ex) {
            msg = "" + ex.getMessage();
            Logger.getLogger(accInvoiceController.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                jobj.put("success", issuccess);
                jobj.put("msg", msg);
            } catch (JSONException ex) {
                Logger.getLogger(accInvoiceController.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return new ModelAndView(Constants.jsonView, "model", jobj.toString());
    }

    public JSONObject getInvoiceJsonForPayment(HttpServletRequest request, List<Invoice> list, HashSet invoicesList) throws SessionExpiredException, ServiceException {
        JSONObject jobj = new JSONObject();
        JSONArray jArr = new JSONArray();
        try {
            HashMap requestParams = AccInvoiceServiceHandler.getInvoiceRequestMap(request);
            DateFormat df = authHandler.getDateOnlyFormat();
            String companyid = sessionHandlerImpl.getCompanyid(request);
            KwlReturnObject extraprefresult = accountingHandlerDAOobj.getObject(ExtraCompanyPreferences.class.getName(), companyid);
            ExtraCompanyPreferences extraCompanyPreferences = extraprefresult != null ? (ExtraCompanyPreferences) extraprefresult.getEntityList().get(0) : null;
            Date creationDate = null;
            if (!StringUtil.isNullOrEmpty(request.getParameter("creationDate"))) {
                creationDate = df.parse(request.getParameter("creationDate"));
            }
            boolean onlyAmountDue = requestParams.get("onlyamountdue") != null;
            boolean CashAndInvoice = Boolean.FALSE.parseBoolean(String.valueOf(request.getParameter("CashAndInvoice")));

            boolean forMonthWiseInvoices = request.getParameter("forMonthWiseInvoices") == null ? false : Boolean.parseBoolean(request.getParameter("forMonthWiseInvoices").toString());
            String months = request.getParameter("months") == null ? "" : request.getParameter("months").toString();
            boolean getOnlyAmountDueInJson = request.getParameter("getOnlyAmountDueInJson") != null ? Boolean.parseBoolean(request.getParameter("getOnlyAmountDueInJson").toString()) : false;

            KwlReturnObject cap = accountingHandlerDAOobj.getObject(CompanyAccountPreferences.class.getName(), companyid);
            CompanyAccountPreferences pref = (CompanyAccountPreferences) cap.getEntityList().get(0);
            String cashAccount = pref.getCashAccount().getID();

            KwlReturnObject curresult = accountingHandlerDAOobj.getObject(KWLCurrency.class.getName(), sessionHandlerImpl.getCurrencyID(request));
            KWLCurrency currency = (KWLCurrency) curresult.getEntityList().get(0);
            String currencyfilterfortrans = request.getParameter("currencyfilterfortrans");
            Set<Integer> monthsSet = new HashSet<Integer>();
            if (forMonthWiseInvoices && !(StringUtil.isNullOrEmpty(months))) {
                String[] monthsArray = months.split(",");
                for (int i = 0; i < monthsArray.length; i++) {
                    monthsSet.add(Integer.parseInt(monthsArray[i]));
                }
            }

            List<String> idsList = new ArrayList<String>();
            for (Invoice invoice : list) {
                idsList.add(invoice.getID());
            }
            Map<String, JournalEntryDetail> invoiceCustomerEntryMap = accInvoiceDAOobj.getInvoiceCustomerEntryList(idsList);
            boolean isInvoiceIsClaimed = false;
            for (Invoice invoice : list) {
                if (!Boolean.parseBoolean(request.getParameter("isEdit").toString()) || Boolean.parseBoolean(request.getParameter("isEdit").toString()) && !(invoicesList.contains(invoice.getID()))) {
                    String invid = invoice.getID();
                    JournalEntry je = invoice.getJournalEntry();
//                    Date invoiceDate = je.getEntryDate();
                    Date invoiceDate = invoice.getCreationDate();
                    Calendar cal = Calendar.getInstance();
                    cal.setTime(invoiceDate);
                    Date invoiceDueDate = invoice.getDueDate();
                    int invoiceMonth = cal.get(Calendar.MONTH);
                    if (forMonthWiseInvoices && !monthsSet.contains(invoiceMonth)) {
                        continue;
                    }
                    JournalEntryDetail d = invoiceCustomerEntryMap.get(invid);
                    Account account = d.getAccount();
                    if (account.getID().equals(cashAccount) && !CashAndInvoice) {
                        continue;
                    }
                    String currencyid = (invoice.getCurrency() == null ? currency.getCurrencyID() : invoice.getCurrency().getCurrencyID());
//                    double currencyToBaseRate = accCurrencyDAOobj.getCurrencyToBaseRate(requestParams, currencyid, invoice.getJournalEntry().getEntryDate());
                    double currencyToBaseRate = accCurrencyDAOobj.getCurrencyToBaseRate(requestParams, currencyid, invoice.getCreationDate());
                    List ll = new ArrayList();
                    double amountdue = 0.0;
                    double amountDueOriginal = 0.0;
                    double amountDueInBase = 0.0;
                    isInvoiceIsClaimed = invoice.getBadDebtType() == Constants.Invoice_Claimed || invoice.getBadDebtType() == Constants.Invoice_Recovered;
                    if (isInvoiceIsClaimed) {
                        amountdue = invoice.getClaimAmountDue();
                        amountDueOriginal = amountdue;
                        // Converting amount due into payment currency
                        if (!StringUtil.isNullOrEmpty(currencyfilterfortrans) && !StringUtil.isNullOrEmpty(currencyid) && !currencyfilterfortrans.equals(currencyid)) {
//                            KwlReturnObject bAmt = accCurrencyDAOobj.getOneCurrencyToOtherModified(requestParams, amountdue, currencyid, currencyfilterfortrans, invoice.getJournalEntry().getEntryDate(), invoice.getExternalCurrencyRate());
                            KwlReturnObject bAmt = accCurrencyDAOobj.getOneCurrencyToOtherModified(requestParams, amountdue, currencyid, currencyfilterfortrans, invoice.getCreationDate(), invoice.getExternalCurrencyRate());
                            amountdue = (Double) bAmt.getEntityList().get(0);
                        }
                    } else {
                        if (Constants.InvoiceAmountDueFlag) {
                            ll = accInvoiceCommon.getInvoiceDiscountAmountInfo(requestParams, invoice);
                        } else {
                            ll = accInvoiceCommon.getAmountDue_Discount(requestParams, invoice);
                        }
                        amountdue = (Double) ll.get(0);
                        amountDueOriginal = (Double) ll.get(3);
                    }
                    if (onlyAmountDue && authHandler.round(amountdue,companyid) == 0) {
                        continue;
                    }
                    amountdue = authHandler.round(amountdue, companyid);
                    amountDueInBase = amountdue;
                    if (je.getExternalCurrencyRate() != 0) {
                        amountDueInBase = amountDueOriginal / je.getExternalCurrencyRate();
                    } else if (currencyToBaseRate != 0) {
                        amountDueInBase = amountDueOriginal / currencyToBaseRate;
                    }
                    amountDueInBase = authHandler.round(amountDueInBase, companyid);
                    JSONObject obj = new JSONObject();
                    if (account.getID().equals(cashAccount)) {
                        obj.put("amountdue", 0);
                    } else {
                        obj.put("amountdue", amountdue);
                    }
                    obj.put("amountdueinbase", amountDueInBase);
//                    obj.put("date", df.format(je.getEntryDate()));
                    obj.put("date", df.format(invoice.getCreationDate()));
                    /**
                     * Passing JE date in response for validating date on JS
                     * Side ERM-655.
                     */
                    obj.put("jeDate", je != null ? df.format(je.getEntryDate()) : df.format(invoice.getCreationDate()));
                    JSONObject jObj = null;
                    double discount = 0.0;
                    double discountValue = 0.0;
                    int applicableDays = -1;
                    boolean discountType = false;
                    if (!StringUtil.isNullOrEmpty(extraCompanyPreferences.getColumnPref())) {
                        jObj = new JSONObject((String) extraCompanyPreferences.getColumnPref());
                        if (jObj.has(Constants.DISCOUNT_ON_PAYMENT_TERMS) && jObj.get(Constants.DISCOUNT_ON_PAYMENT_TERMS) != null && jObj.optBoolean(Constants.DISCOUNT_ON_PAYMENT_TERMS, false)) {
                            Term term = invoice.getTermid();
                            if (term != null && term.getDiscountName() != null) {
                                DiscountMaster discountMaster = term.getDiscountName();
                                discountValue = discountMaster.getValue();
                                discountType = discountMaster.isDiscounttype();
                                applicableDays=term.getApplicableDays();
                            }
                        }
                    }
                    if (!getOnlyAmountDueInJson) {
                        obj.put(Constants.billid, invoice.getID());
                        obj.put("accountid", invoice.getAccount() == null ? "" : invoice.getAccount().getID());
                        obj.put("accountnames", invoice.getAccount() == null ? "" : invoice.getAccount().getName());
                        obj.put("billno", invoice.getInvoiceNumber());
                        obj.put(Constants.currencyKey, currencyid);
                        obj.put("currencyidtransaction", currencyid);
                        obj.put("currencysymboltransaction", (invoice.getCurrency() == null ? currency.getSymbol() : invoice.getCurrency().getSymbol()));
                        obj.put("isClaimedInvoice", (invoice.getBadDebtType() == 1 || invoice.getBadDebtType() == 2));// for Malasian Company
                        obj.put("amountDueOriginal", (amountDueOriginal <= 0) ? 0 : authHandler.round(amountDueOriginal, companyid));
                        obj.put("amountDueOriginalSaved", (amountDueOriginal <= 0) ? 0 : authHandler.round(amountDueOriginal, companyid));
                        obj.put("exchangeratefortransaction", (amountDueOriginal <= 0 && amountdue <= 0) ? 0 : (amountdue / amountDueOriginal));
                        obj.put("amount", d.getAmount());   //actual invoice amount
                        obj.put("claimedDate", invoice.getDebtClaimedDate() == null ? "" : df.format(invoice.getDebtClaimedDate()));
                        obj.put("invType","0");
                        obj.put("discountvalue", discountValue);
                        obj.put("discounttype", discountType ? Integer.parseInt(Constants.DISCOUNT_MASTER_TYPE_PERCENTAGE) : Integer.parseInt(Constants.DISCOUNT_MASTER_TYPE_FLAT));
                        obj.put("applicabledays", applicableDays);
                        obj.put("invoicecreationdate", invoiceDate!=null?df.format(invoiceDate):"");//ERP-36465 : Always pass date in string format to JS side.
                        obj.put("invoiceduedate", invoiceDueDate);
                        
                        //Get Invoice Custom Data For Payment
                        accInvoiceServiceDAO.getInvoiceCustomDataForPayment(requestParams, obj, invoice, je);
                    }
                    jArr.put(obj);
                }
            }

            jobj.put(Constants.data, jArr);
        } catch (JSONException ex) {
            throw ServiceException.FAILURE("getInvoiceJsonForPayment : " + ex.getMessage(), ex);
        }catch (ParseException pex) {
            throw ServiceException.FAILURE("getInvoiceJsonForPayment : " + pex.getMessage(), pex);
        }
        return jobj;
    }
    

    private class InvoiceComparator implements Comparator {

        @Override
        public int compare(Object o1, Object o2) {

            Calendar calendar= Calendar.getInstance();
            int result = 0;
            
            Invoice entry1 = (Invoice) o1;
            Invoice entry2 = (Invoice) o2;
            long invoice1_date=0;
            long invoice2_date=0;
            if(entry1.isIsOpeningBalenceInvoice() && ! entry1.isNormalInvoice()){
                calendar.setTime(entry1.getCreationDate());                       // For opening invoices, date is saved as 'Creation date'
                invoice1_date= calendar.getTimeInMillis();
            } else {
                calendar.setTime(entry1.getJournalEntry().getEntryDate());       // For Normal invoices, date is taken from its journal entry.
//                calendar.setTime(entry1.getCreationDate());
                invoice1_date=calendar.getTimeInMillis();
}
            if(entry2.isIsOpeningBalenceInvoice() && ! entry2.isNormalInvoice()){   // For opening invoices, date is saved as 'Creation date'
                calendar.setTime(entry2.getCreationDate());
                invoice2_date= calendar.getTimeInMillis();
            } else {
                calendar.setTime(entry2.getJournalEntry().getEntryDate());          // For Normal invoices, date is taken from its journal entry.
//                calendar.setTime(entry2.getCreationDate());          // For Normal invoices, date is taken from its journal entry.
                invoice2_date=calendar.getTimeInMillis();
            }
            if (invoice1_date < invoice2_date) {                            // Here if sign '>' is changed to '<' or vice versa , order of soring will be reverted.
                result = 1;
            } else if (invoice1_date > invoice2_date) {
                result = -1;
            } else {
                result = 0;
            }

            return result;
        }
    }
    
    
 
    public void exportDefaultDeliveryOrder(HttpServletRequest request, HttpServletResponse response) {
        try {
            
            List<Object> list = accExportOtherReportsServiceDAOobj.exportDeliveryOrder(request, response);
            JRPdfExporter exp = new JRPdfExporter();
            exp.setParameter(JRPdfExporterParameter.JASPER_PRINT_LIST, list);
            exp.setParameter(JRPdfExporterParameter.OUTPUT_STREAM, response.getOutputStream());
            exp.exportReport();
        } catch (Exception e) {
            Logger.getLogger(accInvoiceController.class.getName()).log(Level.SEVERE, null, e);
        }
    }
    public void exportDeliveryOrderForFasten(HttpServletRequest request, HttpServletResponse response) {
        try {
            List<Object> list = accExportOtherReportsServiceDAOobj.exportDeliveryOrderForFasten(request, response);
            JRPdfExporter exp = new JRPdfExporter();
            exp.setParameter(JRPdfExporterParameter.JASPER_PRINT_LIST, list);
            exp.setParameter(JRPdfExporterParameter.OUTPUT_STREAM, response.getOutputStream());
            exp.exportReport();
        } catch (Exception e) {
            Logger.getLogger(accInvoiceController.class.getName()).log(Level.SEVERE, null, e);
        }
    }
    public void exportSalesOrderForHINSITSU(HttpServletRequest request, HttpServletResponse response) {
        try {
            List<Object> list = accExportOtherReportsServiceDAOobj.exportSalesOrderForHINSITSU(request, response);
            JRPdfExporter exp = new JRPdfExporter();
            exp.setParameter(JRPdfExporterParameter.JASPER_PRINT_LIST, list);
            exp.setParameter(JRPdfExporterParameter.OUTPUT_STREAM, response.getOutputStream());
            exp.exportReport();
        } catch (Exception e) {
            Logger.getLogger(accInvoiceController.class.getName()).log(Level.SEVERE, null, e);
        }
    }
 public void exportCustomerInvoice(HttpServletRequest request, HttpServletResponse response) {
        try {
            List jasperPrint = accExportOtherReportsServiceDAOobj.exportCustomerInvoice(request, response);
            JRPdfExporter exp = new JRPdfExporter();
            exp.setParameter(JRExporterParameter.JASPER_PRINT_LIST, jasperPrint);
            exp.setParameter(JRPdfExporterParameter.OUTPUT_STREAM, response.getOutputStream());
            exp.exportReport();
        } catch (Exception e) {
            Logger.getLogger(accInvoiceController.class.getName()).log(Level.SEVERE, null, e);
        }
    }
 
 public void exportCustomerInvoiceForFasten(HttpServletRequest request, HttpServletResponse response) {
        try {
            List jasperPrint = accExportOtherReportsServiceDAOobj.exportCustomerInvoiceForFasten(request, response);
            JRPdfExporter exp = new JRPdfExporter();
            exp.setParameter(JRExporterParameter.JASPER_PRINT_LIST, jasperPrint);
            exp.setParameter(JRPdfExporterParameter.OUTPUT_STREAM, response.getOutputStream());
            exp.exportReport();
        } catch (Exception e) {
            Logger.getLogger(accInvoiceController.class.getName()).log(Level.SEVERE, null, e);
        }
    }
 
    private String getSalesPersonIDByName(String salesPersonName, String companyID) throws AccountingException {
        String salesPersonID = "";
        try {
            if (!StringUtil.isNullOrEmpty(salesPersonName) && !StringUtil.isNullOrEmpty(companyID)) {
                HashMap<String, Object> filterRequestParams = new HashMap<String, Object>();
                ArrayList filter_names = new ArrayList(), filter_params = new ArrayList();
                filter_names.add("company.companyID");
                filter_params.add(companyID);
                filter_names.add("masterGroup.ID");
                filter_params.add("15"); // For Geting Sales Person
                filter_names.add("value");
                filter_params.add(salesPersonName);
                filterRequestParams.put("filter_names", filter_names);
                filterRequestParams.put("filter_params", filter_params);

                KwlReturnObject retObj = accMasterItemsDAOobj.getMasterItems(filterRequestParams);
                if (retObj != null && !retObj.getEntityList().isEmpty()) {
                    MasterItem salesPerson = (MasterItem) retObj.getEntityList().get(0);
                    salesPersonID = salesPerson.getID();
                }
            }
        } catch (Exception ex) {
            Logger.getLogger(accInvoiceCMN.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
            throw new AccountingException("System Failure while fetching Sales Person.");
        }
        return salesPersonID;
    }
    
    private String getCostCenterIDByName(String costCenterName, String companyID) throws AccountingException {
        String costCenterID = "";
        try {
            if (!StringUtil.isNullOrEmpty(costCenterName) && !StringUtil.isNullOrEmpty(companyID)) {
                HashMap<String, Object> requestParams = new HashMap<String, Object>();
                ArrayList filter_names = new ArrayList(), filter_params = new ArrayList();
                filter_names.add("company.companyID");
                filter_params.add(companyID);
                filter_names.add("name");
                filter_params.add(costCenterName);
                requestParams.put(Constants.filterNamesKey, filter_names);
                requestParams.put(Constants.filterParamsKey, filter_params);

                KwlReturnObject retObj = accCostCenterObj.getCostCenter(requestParams);
                if (retObj != null && !retObj.getEntityList().isEmpty()) {
                    CostCenter costCenter = (CostCenter) retObj.getEntityList().get(0);
                    costCenterID = costCenter.getID();
                }
            }
        } catch (Exception ex) {
            Logger.getLogger(accInvoiceCMN.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
            throw new AccountingException("System Failure while fetching Cost Center.");
        }
        return costCenterID;
    }
    
//     public void exportF1RecreationCreditDebitNote(HttpServletRequest request, HttpServletResponse response) {
//
//        try {
//            List<Object> list = accExportOtherReportsServiceDAOobj.exportF1RecreationCreditDebitNote(request, response);
//            JRPdfExporter exp = new JRPdfExporter();
//            exp.setParameter(JRExporterParameter.JASPER_PRINT_LIST, list);
//            exp.setParameter(JRPdfExporterParameter.OUTPUT_STREAM, response.getOutputStream());
//            response.setHeader("Content-Disposition", "attachment;filename=" + "CreditNote.pdf");
//            exp.exportReport();
//        } catch (Exception e) {
//            Logger.getLogger(accInvoiceController.class.getName()).log(Level.SEVERE, null, e);
//        }
//
//    }
    
    public ModelAndView getConsignmentLoanDetails(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        JSONArray DataJArr = new JSONArray();
        boolean issuccess = false;
        String msg = "";
        try {
            boolean isConsignmentLoanOutstadingReport = request.getParameter("isConsignmentLoanOutstadingReport") != null ? Boolean.FALSE.parseBoolean(request.getParameter("isConsignmentLoanOutstadingReport")) : false;
            HashMap<String, Object> requestParams = new HashMap<String, Object>();
            requestParams.put(Constants.df, authHandler.getDateFormatter(request));
            requestParams.put("start", request.getParameter("start"));
            requestParams.put("limit", request.getParameter("limit"));
            requestParams.put("ss", request.getParameter("ss"));
            requestParams.put(Constants.REQ_startdate, request.getParameter("startdate"));
            requestParams.put(Constants.REQ_enddate, request.getParameter("enddate"));
            requestParams.put(Constants.companyKey, sessionHandlerImpl.getCompanyid(request));
            requestParams.put("isConsignmentLoanOutstadingReport", isConsignmentLoanOutstadingReport);

            KwlReturnObject result = accInvoiceDAOobj.getConsignmentLoanDetails(requestParams);
            List<Object[]> list = result.getEntityList();
            
            int cnt = result.getRecordTotalCount();
            DataJArr = getConsignmentLoanDetailsJson(request, list);
            JSONArray pagedJArr = DataJArr;
            String start = request.getParameter("start");
            String limit = request.getParameter("limit");
            if (!StringUtil.isNullOrEmpty(start) && !StringUtil.isNullOrEmpty(limit)) {
                pagedJArr = StringUtil.getPagedJSON(pagedJArr, Integer.parseInt(start), Integer.parseInt(limit));
            }

            jobj.put(Constants.data, !isConsignmentLoanOutstadingReport? pagedJArr:DataJArr);
            jobj.put("totalCount",cnt);
            issuccess = true;
        } catch (SessionExpiredException ex) {
            msg = ex.getMessage();
            Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ServiceException ex) {
            msg = ex.getMessage();
            Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            msg = "" + ex.getMessage();
            Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                jobj.put("success", issuccess);
                jobj.put("msg", msg);
            } catch (JSONException ex) {
                Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return new ModelAndView(Constants.jsonView, "model", jobj.toString());
    }
    public ModelAndView getConsignmentReturnDetails(HttpServletRequest request, HttpServletResponse response) {
       JSONObject jobj=new JSONObject();
        String msg = "";
        boolean issuccess = false;
        try {
         
            JSONObject paramJobj=StringUtil.convertRequestToJsonObject(request);
            HashMap<String, Object> requestParams = accInvoiceServiceDAO.getDeliveryOrdersMapJSON(paramJobj);
            boolean consolidateFlag = paramJobj.optString("consolidateFlag",null)!=null?Boolean.parseBoolean(paramJobj.getString("consolidateFlag")):false;            
            String companyid = (consolidateFlag && paramJobj.optString(Constants.companyids,null)!=null)?paramJobj.getString(Constants.companyids):paramJobj.getString(Constants.companyKey);
            String gcurrencyid = (consolidateFlag && paramJobj.optString(Constants.globalCurrencyKey,null)!=null)?paramJobj.getString(Constants.globalCurrencyKey):paramJobj.getString(Constants.globalCurrencyKey);                        
            String moduleid = StringUtil.isNullOrEmpty(paramJobj.optString(Constants.moduleid,null)) ? "" : paramJobj.getString(Constants.moduleid); 
            requestParams.put(Constants.moduleid, moduleid);
            requestParams.put(Constants.companyKey, companyid);
            requestParams.put(Constants.globalCurrencyKey, gcurrencyid);
            requestParams.put(Constants.ss, request.getParameter("ss"));
            requestParams.put(Constants.start, null);
            requestParams.put(Constants.limit, null);
            ExtraCompanyPreferences extraPref = (ExtraCompanyPreferences) kwlCommonTablesDAOObj.getClassObject("com.krawler.common.admin.ExtraCompanyPreferences", sessionHandlerImpl.getCompanyid(request));
            if (extraPref != null && extraPref.isEnablesalespersonAgentFlow()) {
                int permCode = sessionHandlerImpl.getPerms(request, Constants.CUSTOMER_PERMCODE);
                if (!((permCode & Constants.CUSTOMER_VIEWALL_PERMCODE) == Constants.CUSTOMER_VIEWALL_PERMCODE)) {
                    /*
                     * when (permCode & Constants.CUSTOMER_VIEWALL_PERMCODE) == Constants.CUSTOMER_VIEWALL_PERMCODE is true then user has permission to view all customers documents,so at that time there is need to filter record according to user&salesperson. 
                     */
                    String userId = sessionHandlerImpl.getUserid(request);
                    requestParams.put(Constants.useridKey , userId);
                    requestParams.put("enablesalespersonagentflow", extraPref.isEnablesalespersonAgentFlow());
                }
                 Map<String, Object> salesPersonParams = new HashMap<>();

                salesPersonParams.put(Constants.useridKey , paramJobj.getString(Constants.useridKey));
                salesPersonParams.put(Constants.companyKey, paramJobj.getString(Constants.companyKey));
                salesPersonParams.put("grID", "15");
                KwlReturnObject masterItemByUserList = accountingHandlerDAOobj.getMasterItemByUserID(salesPersonParams);
                List<MasterItem> masterItems = masterItemByUserList.getEntityList();
                String salesPersons = "";
                StringBuffer salesPersonids = new StringBuffer();
                for (Object obj : masterItems) {
                    if (obj != null) {
                        salesPersonids.append(obj.toString() + ",");
                    }
                }
                if (salesPersonids.length() > 0) {
                    salesPersons = salesPersonids.substring(0, (salesPersonids.length() - 1));
                    requestParams.put("salesPersonid", salesPersons);
               }
            }
            String exportFileName = request.getParameter("filename"); // for Export
            boolean isExport = false;
            if (!StringUtil.isNullOrEmpty(exportFileName)) {
                isExport = true;
//                paging = null;
            }
            boolean isSalesReturnCreditNote = false;
            
            if(!StringUtil.isNullOrEmpty(paramJobj.optString("isNoteReturns",null))) {
                isSalesReturnCreditNote = Boolean.parseBoolean(paramJobj.getString("isNoteReturns"));
            }
            
            requestParams.put("isSalesReturnCreditNote", isSalesReturnCreditNote);
            
            if(!StringUtil.isNullOrEmpty(paramJobj.optString("searchJson",null)))
            {
                requestParams.put("searchJson", paramJobj.optString("searchJson",null));
                requestParams.put(Constants.moduleid, paramJobj.optString(Constants.moduleid));
                requestParams.put("filterConjuctionCriteria", paramJobj.optString("filterConjuctionCriteria"));
            }
            if(!StringUtil.isNullOrEmpty(paramJobj.optString("linknumber",null))){
                requestParams.put("linknumber", paramJobj.getString("linknumber"));
            }
             String dir = "";
            String sort = "";
             if(!StringUtil.isNullOrEmpty(paramJobj.optString("dir",null)) && !StringUtil.isNullOrEmpty(paramJobj.optString("sort",null))){
                dir = paramJobj.getString("dir");
                 sort = paramJobj.getString("sort");
                   requestParams.put("sort", sort);
                requestParams.put("dir", dir);
            }
                
            DateFormat dfWithoutSeconds = authHandler.getDateFormatterWithoutSeconds(request);
            KwlReturnObject result = accInvoiceDAOobj.getSalesReturn(requestParams);
            JSONArray jarr = accInvoiceServiceDAO.getSalesReturnDetailsJson(paramJobj, result.getEntityList(),dfWithoutSeconds);            
           
            JSONArray pagedJson = jarr;
            String start = request.getParameter("start");
            String limit = request.getParameter("limit");
            if (!StringUtil.isNullOrEmpty(start) && !StringUtil.isNullOrEmpty(limit)) {
                pagedJson = StringUtil.getPagedJSON(pagedJson, Integer.parseInt(start), Integer.parseInt(limit));
            }
            jobj.put(Constants.data, pagedJson);
            
//            jobj.put(Constants.data, jarr);
            jobj.put("count", jarr.length());
            if (isExport) {
                jobj.put("data", jarr);
                exportDaoObj.processRequest(request, response, jobj);
            }
            issuccess = true;
        } catch (Exception ex) {
            msg = "" + ex.getMessage();
            Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                jobj.put("success", issuccess);
                jobj.put("msg", msg);
            } catch (JSONException ex) {
                Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return new ModelAndView(Constants.jsonView, "model", jobj.toString());
    }

    public JSONArray getConsignmentLoanDetailsJson(HttpServletRequest request, List<Object[]> list) throws JSONException, ServiceException {
        JSONArray jArr = new JSONArray();
        try {
            boolean isConsignmentLoanOutstadingReport = request.getParameter("isConsignmentLoanOutstadingReport") != null ? Boolean.FALSE.parseBoolean(request.getParameter("isConsignmentLoanOutstadingReport")) : false;
            String companyID = sessionHandlerImpl.getCompanyid(request);
            KwlReturnObject cap = accountingHandlerDAOobj.getObject(CompanyAccountPreferences.class.getName(), companyID);
            CompanyAccountPreferences preferences = (CompanyAccountPreferences) cap.getEntityList().get(0);
            JSONArray productCustomFieldInfo = new JSONArray();
            DateFormat sdfr = new SimpleDateFormat("yyyy-MM-dd");
            // Find out any product custom fields need to show in this report
            String customFieldQuery = "select customcolumninfo from showcustomcolumninreport where moduleid = ? and companyid = ?";
            List<String> customFieldinfoList = null;
            customFieldinfoList = accCommonTablesDAO.executeSQLQuery(customFieldQuery, new Object[]{Constants.Acc_Product_Master_ModuleId,companyID});
            
            HashMap<String, HashMap> productCustomData = new HashMap<String, HashMap>();
            HashMap<String, String> productreplaceFieldMap = new HashMap<String, String>();
            HashMap<String, String> productcustomFieldMap = new HashMap<String, String>();
            HashMap<String, String> productcustomDateFieldMap = new HashMap<String, String>();
            HashMap<String, Integer> productFieldMap = null;
            
            Map<String, Object[]> batchSerMap = accInvoiceServiceDAO.getBatchSerialForConsignmentLoan(list, companyID);
            Map<String, Double> closedQtyMp=accInvoiceServiceDAO.getClosedQtyForLoan(companyID);

            if (customFieldinfoList.size() > 0) {
                String jsonString = customFieldinfoList.get(0);
                JSONArray productCustomFields = new JSONArray(jsonString);
                String fieldIds = "";
                for(int jCnt=0; jCnt<productCustomFields.length();jCnt++) {
                   fieldIds =fieldIds.concat("'").concat(productCustomFields.getJSONObject(jCnt).getString("fieldid")).concat("',");
                }
                if(!StringUtil.isNullOrEmpty(fieldIds)) {
                    fieldIds = fieldIds.substring(0,fieldIds.length()-1);
                }
                HashMap<String, Object> fieldrequestParams = new HashMap();
                fieldrequestParams.put(Constants.filter_names, Arrays.asList(Constants.companyid, Constants.moduleid, "INid"));
                fieldrequestParams.put(Constants.filter_values, Arrays.asList(companyID, Constants.Acc_Product_Master_ModuleId, fieldIds));
                productFieldMap = accAccountDAOobj.getFieldParamsCustomMap(fieldrequestParams, productreplaceFieldMap, productcustomFieldMap, productcustomDateFieldMap);
            }
            
            if(productreplaceFieldMap.size()>0) {
                for (Map.Entry<String, String> varEntry : productreplaceFieldMap.entrySet()) {
                    JSONObject fieldInfo = new JSONObject();
                    fieldInfo.put("dataindex", varEntry.getKey());
                    fieldInfo.put("columnname", varEntry.getKey().replaceAll("Custom_", ""));
                    productCustomFieldInfo.put(fieldInfo);
                }
            }
            
            DateFormat df = authHandler.getDateOnlyFormat();
            DateFormat dfWithoutSeconds = authHandler.getDateFormatterWithoutSeconds(request);
            Iterator itr = list.iterator();
            
            for (Object[] row : list) {
                String dodid = (row[0] != null) ? (String) row[0] : "";
                String consignmentRequistid = (row[1] != null) ? (String) row[1] : "";

                KwlReturnObject dodObj = accountingHandlerDAOobj.getObject(DeliveryOrderDetail.class.getName(), dodid);
                DeliveryOrderDetail doDetail = (DeliveryOrderDetail) dodObj.getEntityList().get(0);
                
                SalesOrder consignmentRequest = null;
                if (!StringUtil.isNullOrEmpty(consignmentRequistid)) {
                    KwlReturnObject consignmentReqObj = accountingHandlerDAOobj.getObject(SalesOrder.class.getName(), consignmentRequistid);
                    if (!consignmentReqObj.getEntityList().isEmpty() && consignmentReqObj.getEntityList().get(0) != null) {
                        consignmentRequest = (SalesOrder) consignmentReqObj.getEntityList().get(0);
                    }
                }
                
                boolean isBatchForProduct = false;
                boolean isSerialForProduct = false;
                boolean isLocationForProduct = false;
                boolean isWarehouseForProduct = false;
                boolean isRowForProduct = false;
                boolean isRackForProduct = false;
                boolean isBinForProduct = false;
                Object[] batchSerObj=null;
                
                if (!StringUtil.isNullOrEmpty(doDetail.getProduct().getID())) {
                    KwlReturnObject prodresult = accProductObj.getObject(Product.class.getName(), doDetail.getProduct().getID());
                    Product product = (Product) prodresult.getEntityList().get(0);
                    isLocationForProduct = product.isIslocationforproduct();
                    isWarehouseForProduct = product.isIswarehouseforproduct();
                    isBatchForProduct = product.isIsBatchForProduct();
                    isSerialForProduct = product.isIsSerialForProduct();
                    isRowForProduct = product.isIsrowforproduct();
                    isRackForProduct = product.isIsrackforproduct();
                    isBinForProduct = product.isIsbinforproduct();
                }
                KwlReturnObject batchSerialObj = null;
                if (preferences.isIsBatchCompulsory() || preferences.isIsSerialCompulsory() || preferences.isIslocationcompulsory() || preferences.isIswarehousecompulsory() || preferences.isIsrowcompulsory() || preferences.isIsrackcompulsory() || preferences.isIsbincompulsory()) { // check if company level option is on then only we will check productt level
                    if (isBatchForProduct || isSerialForProduct || isSerialForProduct || isLocationForProduct || isWarehouseForProduct || isRowForProduct || isRackForProduct || isBinForProduct) {  // product level batch and serial no on or not
//                            batchSerialObj = accInvoiceServiceDAO.getNewBatchSerialForConsignmentLoan(doDetail.getProduct(), request, doDetail.getID());
                        batchSerObj = batchSerMap.get(doDetail.getID());
                    }
                }
                String orderDt = "";
                String srcwarehouse = "";
                String srclocation = "";
                String loanfrmdate = "";
                String costcenter = "";
                String salesperson = "";
                String remark = "";
                String purposeOfLoan = "";
                if (consignmentRequest != null) {
                  
//                    orderDt = (consignmentRequest != null ?((consignmentRequest.getOrderDate()!=null?sdfr.format(consignmentRequest.getOrderDate()):"")): "");
                    srcwarehouse = (consignmentRequest != null && consignmentRequest.getRequestWarehouse()!=null ? consignmentRequest.getRequestWarehouse().getName() : "");
                    srclocation = consignmentRequest != null && consignmentRequest.getRequestLocation()!=null ? consignmentRequest.getRequestLocation().getName() : "";
                    loanfrmdate = (consignmentRequest != null ? ((consignmentRequest.getFromdate()!=null?sdfr.format(consignmentRequest.getFromdate()):"")) : "");
                    costcenter = consignmentRequest != null ? (consignmentRequest.getCostcenter() != null ? consignmentRequest.getCostcenter().getName() : "") : "";
                    salesperson = consignmentRequest != null ? (consignmentRequest.getSalesperson() != null ? consignmentRequest.getSalesperson().getValue() : "") : "";
//                    remark = consignmentRequest != null ? consignmentRequest.getMemo() : "";

                    
                    HashMap<String, Object> fieldrequestParams = new HashMap();
                    fieldrequestParams.put(Constants.filter_names, Arrays.asList(Constants.companyid, Constants.moduleid));
                    fieldrequestParams.put(Constants.filter_values, Arrays.asList(sessionHandlerImpl.getCompanyid(request), Constants.Acc_ConsignmentRequest_ModuleId));
                    HashMap<String, String> replaceFieldMap1 = new HashMap<String, String>();
                    HashMap<String, String> customFieldMap = new HashMap<String, String>();
                    HashMap<String, String> customDateFieldMap = new HashMap<String, String>();
                    HashMap<String, Integer> fieldMap = accAccountDAOobj.getFieldParamsCustomMap(fieldrequestParams, replaceFieldMap1, customFieldMap, customDateFieldMap);
                    Map<String, Object> variableMap = new HashMap<String, Object>();
                    SalesOrderCustomData soCustomData = (SalesOrderCustomData) consignmentRequest.getSoCustomData();
                    HashMap<String, String> replaceFieldMap = new HashMap<String, String>();
                    AccountingManager.setCustomColumnValues(soCustomData, fieldMap, replaceFieldMap, variableMap);
                    
                    for (Map.Entry<String, Object> varEntry : variableMap.entrySet()) {
                        String coldata = varEntry.getValue().toString();
                        if (customFieldMap.containsKey(varEntry.getKey())) {
                            if (varEntry.getKey().equalsIgnoreCase("Custom_Purpose of Request")) {
                                String Ids[] = coldata.split(",");
                                for (int i = 0; i < Ids.length; i++) {
                                    KwlReturnObject rdresult = accountingHandlerDAOobj.getObject(FieldComboData.class.getName(), Ids[i]);
                                    FieldComboData fieldComboData = (FieldComboData) rdresult.getEntityList().get(0);
                                    if (fieldComboData != null) {
                                        purposeOfLoan += fieldComboData.getValue() != null ? fieldComboData.getValue() + "," : ",";
                                    }
                                }
                                if (!StringUtil.isNullOrEmpty(purposeOfLoan)) {
                                    purposeOfLoan = purposeOfLoan.substring(0, purposeOfLoan.length() - 1);
                                }
                            }
                        }
                    }
                }
                
//                KwlReturnObject idresult = accInvoiceDAOobj.getSalesReturnIDFromDODetailsForFullReturnCase(doDetail.getID());
//                if (isConsignmentLoanOutstadingReport && !idresult.getEntityList().isEmpty()) {
//                    continue;
//                }
                KwlReturnObject idresult=null;
                if(!isConsignmentLoanOutstadingReport){
                     idresult = accInvoiceDAOobj.getSalesReturnIDFromDODetailsForFullReturnCase(doDetail.getID());
                }
                if (idresult!=null&&!idresult.getEntityList().isEmpty()) {
                    List<SalesReturnDetail> srDetailList = idresult.getEntityList();
                    for (SalesReturnDetail srDetail : srDetailList) {
                        JSONObject obj = new JSONObject();
//                        obj.put("country", country);
                        obj.put("consigneeName", (doDetail.getDeliveryOrder() != null) ? doDetail.getDeliveryOrder().getCustomer().getName() : "");
                        
                        HashMap<String, Object> addressParams = new HashMap<String, Object>();
                        addressParams.put(Constants.companyKey, companyID);
                        addressParams.put("isDefaultAddress", true);    //always true to get defaultaddress
                        addressParams.put("isBillingAddress", true);    //true to get billing address
                        addressParams.put(Constants.customerid, doDetail.getDeliveryOrder().getCustomer().getID());
                        CustomerAddressDetails customerAddressDetails = accountingHandlerDAOobj.getCustomerAddressobj(addressParams);
                        obj.put("deliverToParty", customerAddressDetails != null ? customerAddressDetails.getAddress() : "");
                        if (doDetail.getDeliveryOrder() != null) {
                            obj.put("contactperson", (doDetail.getDeliveryOrder().getBillingShippingAddresses() != null ? doDetail.getDeliveryOrder().getBillingShippingAddresses().getShippingContactPerson() : ""));
                        }

                        obj.put("documentReferenceNo", (doDetail.getDeliveryOrder() != null) ? doDetail.getDeliveryOrder().getDeliveryOrderNumber() : "");
                        obj.put("country", customerAddressDetails.getCountry());
//                        obj.put("itemasset", (batchSerialObj != null) ? batchSerialObj.getEntityList().get(2) != null ? batchSerialObj.getEntityList().get(2) : "-" : "-");
//                        if (StringUtil.isNullOrEmpty("" + batchSerialObj.getEntityList().get(2))) {
//                            obj.put("itemasset", "-");
//                        }
                        if (batchSerObj != null && batchSerObj.length > 0) {
                            obj.put("batch", batchSerObj[0] != null ? batchSerObj[0] : "-");
                            obj.put("serialNo", batchSerObj[1] != null ? batchSerObj[1] : "-");
                            obj.put("itemasset", batchSerObj[2] != null ? batchSerObj[2] : "-");
                        }
                        obj.put("sequence", "Line " + doDetail.getSrno());
                        obj.put("productID", (doDetail.getProduct() != null) ? doDetail.getProduct().getProductid() : "");
                        obj.put("productName", (doDetail.getProduct() != null) ? doDetail.getProduct().getName() : "");
                        obj.put("description", (doDetail.getProduct() != null) ? doDetail.getProduct().getDescription() : "");
                        obj.put("quantity", doDetail.getBaseuomdeliveredquantity());
//                        obj.put("batch", (batchSerialObj != null) ? batchSerialObj.getEntityList().get(0) != null ? batchSerialObj.getEntityList().get(0) : "-" : "-");
//                        obj.put("serialNo", (batchSerialObj != null) ? batchSerialObj.getEntityList().get(1) != null ? batchSerialObj.getEntityList().get(1) : "-" : "-");
                        obj.put("stockType", (doDetail.getProduct() != null && doDetail.getProduct().getItemReusability() != null) ? (doDetail.getProduct().getItemReusability().getStringName().equalsIgnoreCase("Reusable") ? "R" : "C") : "C");
                        obj.put("purposeOfLoan", purposeOfLoan);
                        obj.put("loanDueDate", (consignmentRequest != null && consignmentRequest.getTodate() != null) ? df.format(consignmentRequest.getTodate()) : "");
                        obj.put("returnNo", srDetail.getSalesReturn().getSalesReturnNumber());
                        obj.put("dateOfReturn", srDetail.getSalesReturn().getOrderDate() != null ? dfWithoutSeconds.format(srDetail.getSalesReturn().getOrderDate()) : "");
                        obj.put("dndate", (doDetail.getDeliveryOrder() != null ? (doDetail.getDeliveryOrder().getOrderDate() != null ? df.format(doDetail.getDeliveryOrder().getOrderDate()) : "") : ""));
                        obj.put("srcwarehouse", srcwarehouse);
                        obj.put("srclocation", srclocation);
                        obj.put("loanfrmdate", loanfrmdate);
                        obj.put("costcenter", costcenter);
                        obj.put("salesperson", salesperson);
                         if (!isConsignmentLoanOutstadingReport && closedQtyMp != null && closedQtyMp.containsKey(doDetail.getID())) {
                            obj.put("closedqty", closedQtyMp.get(doDetail.getID()));
                        }else{
                             obj.put("closedqty", 0);
                        }
                         if(srDetail.getSalesReturn()!=null){
                             obj.put("remarkormemo", srDetail.getSalesReturn().getMemo());
                        }else{
                            obj.put("remarkormemo", srDetail.getRemark());
                        }
                        if(doDetail.getDeliveryOrder() != null){
                            obj.put("dnremarkormemo", doDetail.getDeliveryOrder().getMemo());
                        }
                        obj.put("remark", srDetail.getRemark());
                        obj.put("dnremark", doDetail.getRemark());
                        
                        if (!isConsignmentLoanOutstadingReport) {
                            // get last srdetail to get allreturnno and date 
                            KwlReturnObject returnDtl = accInvoiceDAOobj.getPartialFullSalesReturnDetailsByDOId(companyID,doDetail.getID());
                            Object[] dtlList = (Object[]) returnDtl.getEntityList().get(0);

                            obj.put("returnNo", (dtlList != null) ? dtlList[0] != null ? dtlList[0] : "" : "");
                            obj.put("dateOfReturn", (dtlList != null) ? dtlList[1] != null ? dtlList[1] : "" : "");
                            obj.put("returnqty", (dtlList != null) ? dtlList[2] != null ? dtlList[2] : "" : "");

                        }
                   
                    
                        
                        // Add Product Level Custom Fiels 
                        if (productFieldMap != null) {
                            if (productCustomData.containsKey(doDetail.getProduct().getID())) {
                                HashMap<String, String> prodDataArray = productCustomData.get(doDetail.getProduct().getID());
                                for (Map.Entry<String, String> varEntry : prodDataArray.entrySet()) {
                                    obj.put(varEntry.getKey(), varEntry.getValue());
                                }
                            } else {
                                AccProductCustomData obj1 = (AccProductCustomData) kwlCommonTablesDAOObj.getClassObject(AccProductCustomData.class.getName(), doDetail.getProduct().getID());
                                if (obj1 != null) {
                                    HashMap<String, String> prodDataArray = new HashMap<String, String>();
                                    HashMap<String, Object>variableMap = new HashMap<String, Object>();
                                    AccountingManager.setCustomColumnValues(obj1, productFieldMap, productreplaceFieldMap, variableMap);
                                    DateFormat defaultDateFormat=new SimpleDateFormat(Constants.MMMMdyyyy);
                                    Date dateFromDB=null;
                                    for (Map.Entry<String, Object> varEntry : variableMap.entrySet()) {
                                        String coldata = varEntry.getValue().toString();
                                        if (productcustomFieldMap.containsKey(varEntry.getKey())) {
                                            boolean isCustomExport = true;
                                            String value = "";
                                            String Ids[] = coldata.split(",");
                                            for (int i = 0; i < Ids.length; i++) {
                                                FieldComboData fieldComboData = (FieldComboData) kwlCommonTablesDAOObj.getClassObject(FieldComboData.class.getName(), Ids[i]);
                                                if (fieldComboData != null) {
                                                    if (fieldComboData.getField().getFieldtype() == 12 && !isCustomExport) {
                                                        value += Ids[i] != null ? Ids[i] + "," : ",";
                                                    } else {
                                                        value += fieldComboData.getValue() != null ? fieldComboData.getValue() + "," : ",";
                                                    }
                                                }
                                            }
                                            if (!StringUtil.isNullOrEmpty(value)) {
                                                value = value.substring(0, value.length() - 1);
                                            }
                                            prodDataArray.put(varEntry.getKey(), value);
                                            obj.put(varEntry.getKey(), value);
                                        } else if (productcustomDateFieldMap.containsKey(varEntry.getKey())) {
                                            DateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
                                            dateFromDB=defaultDateFormat.parse(coldata);
                                            coldata=sdf.format(dateFromDB);
                                            obj.put(varEntry.getKey(),coldata);
                                            prodDataArray.put(varEntry.getKey(), coldata);
                                        } else {
                                            if (!StringUtil.isNullOrEmpty(coldata)) {
                                                obj.put(varEntry.getKey(), coldata);
                                                prodDataArray.put(varEntry.getKey(), coldata);
                                            }
                                        }
                                    }
                                    productCustomData.put(doDetail.getProduct().getID(), prodDataArray);
                                }
                            }
                        }
                    
                        jArr.put(obj);
                    }
                } else {
                    JSONObject obj = new JSONObject();
                    
                    KwlReturnObject idresult1 = accInvoiceDAOobj.getSalesReturnIDFromDODetails(doDetail.getID());
                    List<SalesReturnDetail> srDetailList = idresult1.getEntityList();
                    
                   String skuField="";
                   String serialNames="";
                   String returnMemo="";
                    if (srDetailList != null && !srDetailList.isEmpty() && isConsignmentLoanOutstadingReport) {
                        SalesReturnDetail srd = srDetailList.get(srDetailList.size() - 1); // get last srdetail to get outstanding quantity and serial
                       double retQuantiy=0;
                        for(SalesReturnDetail dtl:srDetailList){
                            retQuantiy+=dtl.getReturnQuantity();
                        }
//                        obj.put("quantity", doDetail.getBaseuomdeliveredquantity() - srd.getReturnQuantity());
                        obj.put("quantity", doDetail.getBaseuomdeliveredquantity()-retQuantiy);
                        String doDetailId=srd.getDodetails().getID();

                        KwlReturnObject btchsrlDtl = accInvoiceDAOobj.getOutstandingBatchSerialDetailBySalesReturnDetailId(srd.getProduct(),srd.getID(),doDetailId);
                        Object[] dtlList = null;
                        if(btchsrlDtl.getRecordTotalCount() > 0){
                            dtlList=(Object []) btchsrlDtl.getEntityList().get(0);
                        }
                        if (batchSerObj != null && batchSerObj.length > 0) {
                            obj.put("itemasset", (dtlList != null) ? dtlList[2] != null ? dtlList[2] : "-" : "-");
                            skuField = (dtlList != null) ? dtlList[2] != null ? "" + dtlList[2] : "" : "";
                            obj.put("batch", (dtlList != null) ? dtlList[0] != null ? dtlList[0] : "-" : "-");
                            obj.put("serialNo", (dtlList != null) ? dtlList[1] != null ? dtlList[1] : "-" : "-");
                            serialNames= (dtlList != null) ? dtlList[1] != null ? ""+dtlList[1] : "-" : "-";
                        }  
                        
                    } else {
                        obj.put("quantity", doDetail.getBaseuomdeliveredquantity());
                        if (batchSerObj != null && batchSerObj.length > 0) {
                            obj.put("batch", batchSerObj[0] != null ? batchSerObj[0] : "-");
                            obj.put("serialNo", batchSerObj[1] != null ? batchSerObj[1] : "-");
                             serialNames= batchSerObj[1] != null ? ""+batchSerObj[1] : "-";
                            obj.put("itemasset", batchSerObj[2] != null ? batchSerObj[2] : "-");
                            skuField =batchSerObj[2] != null ? ""+batchSerObj[2] : "-";
                        }
                    }
                    if (StringUtil.isNullOrEmpty(skuField) && !StringUtil.isNullOrEmpty(serialNames)) {
                        String serArr[] = serialNames.split(",");
                        for (int i = 0; i < serArr.length; i++) {
                            NewBatchSerial serialForSku = stockService.getSerialDataBySerialName(doDetail.getProduct(), serArr[i]);
                            if (serialForSku != null) {
                                String asset = ((!StringUtil.isNullOrEmpty(serialForSku.getSkufield()) && doDetail.getProduct().isIsSKUForProduct()) ? serialForSku.getSkufield() : "");
                                skuField += asset + " , ";
                            }
                        }
                        if (skuField.endsWith(" , ")) {
                            skuField = skuField.substring(0, skuField.length() - 2);
                        }
                        obj.put("itemasset", skuField);
                    }
//                    obj.put("country", country);
                    obj.put("consigneeName", (doDetail.getDeliveryOrder() != null) ? doDetail.getDeliveryOrder().getCustomer().getName() : "");
                    
                    HashMap<String, Object> addressParams = new HashMap<String, Object>();
                    addressParams.put(Constants.companyKey, companyID);
                    addressParams.put("isDefaultAddress", true);    //always true to get defaultaddress
                    addressParams.put("isBillingAddress", true);    //true to get billing address
                    addressParams.put(Constants.customerid, doDetail.getDeliveryOrder().getCustomer().getID());
                    CustomerAddressDetails customerAddressDetails = accountingHandlerDAOobj.getCustomerAddressobj(addressParams);
                    obj.put("deliverToParty", (customerAddressDetails != null ? customerAddressDetails.getAddress() : "").trim());
                    if (doDetail.getDeliveryOrder() != null) {
                        obj.put("contactperson", (doDetail.getDeliveryOrder().getBillingShippingAddresses() != null ? doDetail.getDeliveryOrder().getBillingShippingAddresses().getShippingContactPerson() : ""));
                    }
                    obj.put("country", (customerAddressDetails != null ? customerAddressDetails.getCountry() : "").trim());
                    obj.put("documentReferenceNo", (doDetail.getDeliveryOrder() != null) ? doDetail.getDeliveryOrder().getDeliveryOrderNumber() : "");
                    obj.put("sequence", "Line " + doDetail.getSrno());
                    obj.put("productID", (doDetail.getProduct() != null) ? doDetail.getProduct().getProductid() : "");
                    obj.put("productName", (doDetail.getProduct() != null) ? doDetail.getProduct().getName() : "");
                    obj.put("description", (doDetail.getProduct() != null) ? doDetail.getProduct().getDescription() : "");
                    obj.put("dndate", (doDetail.getDeliveryOrder()!=null?(doDetail.getDeliveryOrder().getOrderDate()!=null?df.format(doDetail.getDeliveryOrder().getOrderDate()):""):""));
                    obj.put("srcwarehouse", srcwarehouse);
                    obj.put("srclocation", srclocation);
                    obj.put("loanfrmdate", loanfrmdate);
                    obj.put("costcenter", costcenter);
                    obj.put("salesperson", salesperson);
                    if (!isConsignmentLoanOutstadingReport && closedQtyMp != null && closedQtyMp.containsKey(doDetail.getID())) {
                        obj.put("closedqty", closedQtyMp.get(doDetail.getID()));
                    } else {
                        obj.put("closedqty", 0);
                    }
                    obj.put("dnremark", doDetail.getRemark());
                    if (doDetail.getDeliveryOrder() != null) {
                        obj.put("dnremarkormemo", doDetail.getDeliveryOrder().getMemo());
                    } else {
                        obj.put("dnremarkormemo", doDetail.getRemark());
                    }

                    obj.put("stockType", (doDetail.getProduct() != null && doDetail.getProduct().getItemReusability() != null) ? (doDetail.getProduct().getItemReusability().getStringName().equalsIgnoreCase("Reusable") ? "R" : "C") : "C");
                    obj.put("purposeOfLoan", purposeOfLoan);
                    obj.put("loanDueDate", (consignmentRequest != null && consignmentRequest.getTodate() != null) ? df.format(consignmentRequest.getTodate()) : "");
                    
                    if (!isConsignmentLoanOutstadingReport) {
                        // get last srdetail to get allreturnno and date 
                        KwlReturnObject returnDtl = accInvoiceDAOobj.getPartialFullSalesReturnDetailsByDOId(companyID, doDetail.getID());
                        Object[] dtlList = (Object[]) returnDtl.getEntityList().get(0);

                        obj.put("returnNo", (dtlList != null) ? dtlList[0] != null ? dtlList[0] : "" : "");
                        obj.put("dateOfReturn", (dtlList != null) ? dtlList[1] != null ? dtlList[1] : "" : "");
                        obj.put("returnqty", (dtlList != null) ? dtlList[2] != null ? dtlList[2] : "" : "");
                        obj.put("remarkormemo", (dtlList != null) ? dtlList[3] != null ? dtlList[3] : "" : "");
                        obj.put("remark", (dtlList != null) ? dtlList[4] != null ? dtlList[4] : "" : "");

                    }
                    // Add Product Level Custom Fiels 
                    if (productFieldMap != null) {
                        if (productCustomData.containsKey(doDetail.getProduct().getID())) {
                            HashMap<String, String> prodDataArray = productCustomData.get(doDetail.getProduct().getID());
                            for (Map.Entry<String, String> varEntry : prodDataArray.entrySet()) {
                                obj.put(varEntry.getKey(), varEntry.getValue());
                            }
                        } else {
                            AccProductCustomData obj1 = (AccProductCustomData) kwlCommonTablesDAOObj.getClassObject(AccProductCustomData.class.getName(), doDetail.getProduct().getID());
                            if (obj1 != null) {
                                HashMap<String, String> prodDataArray = new HashMap<String, String>();
                                HashMap<String, Object>variableMap = new HashMap<String, Object>();
                                AccountingManager.setCustomColumnValues(obj1, productFieldMap, productreplaceFieldMap, variableMap);
                                DateFormat defaultDateFormat=new SimpleDateFormat(Constants.MMMMdyyyy);
                                Date dateFromDB=null;
                                for (Map.Entry<String, Object> varEntry : variableMap.entrySet()) {
                                    String coldata = varEntry.getValue().toString();
                                    if (productcustomFieldMap.containsKey(varEntry.getKey())) {
                                        boolean isCustomExport = true;
                                        String value = "";
                                        String Ids[] = coldata.split(",");
                                        for (int i = 0; i < Ids.length; i++) {
                                            FieldComboData fieldComboData = (FieldComboData) kwlCommonTablesDAOObj.getClassObject(FieldComboData.class.getName(), Ids[i]);
                                            if (fieldComboData != null) {
                                                if (fieldComboData.getField().getFieldtype() == 12 && !isCustomExport) {
                                                    value += Ids[i] != null ? Ids[i] + "," : ",";
                                                } else {
                                                    value += fieldComboData.getValue() != null ? fieldComboData.getValue() + "," : ",";
                                                }
                                            }
                                        }
                                        if (!StringUtil.isNullOrEmpty(value)) {
                                            value = value.substring(0, value.length() - 1);
                                        }
                                        prodDataArray.put(varEntry.getKey(), value);
                                        obj.put(varEntry.getKey(), value);
                                    } else if (productcustomDateFieldMap.containsKey(varEntry.getKey())) {
                                        DateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
                                        dateFromDB=defaultDateFormat.parse(coldata);
                                        coldata=sdf.format(dateFromDB);
                                        obj.put(varEntry.getKey(),coldata);
                                        prodDataArray.put(varEntry.getKey(), coldata);
                                    } else {
                                        if (!StringUtil.isNullOrEmpty(coldata)) {
                                            obj.put(varEntry.getKey(), coldata);
                                            prodDataArray.put(varEntry.getKey(), coldata);
                                        }
                                    }
                                }
                                productCustomData.put(doDetail.getProduct().getID(), prodDataArray);
                            }
                        }
                    }
                    // this check is for if DO is close then do not show its detail in Loan outstanding Report ,but it can be seen in loan report
                    if(isConsignmentLoanOutstadingReport && !doDetail.getDeliveryOrder().isIsDOClosed() || !isConsignmentLoanOutstadingReport){  // this check is for if DO is close then do not show its detail in Loan outstanding Report
                       jArr.put(obj);
                    }
                 }
            }

        } catch (Exception ex) {
            Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
        }
        return jArr;
    }
    
    public ModelAndView exportSalesCommissionDetail(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        String view = "jsonView_ex";
        try {
            
            HashMap requestParams = AccountingManager.getGlobalParams(request);
            String salesPersonID = request.getParameter("salesPersonID") != null ? request.getParameter("salesPersonID") : "";
            String[] salesPersonIdArray = salesPersonID.split(",");
            if (!StringUtil.isNullOrEmpty(salesPersonID) && !salesPersonID.equalsIgnoreCase("All")) {
                String salesPersonIds = "";
                for (int i = 0; i < salesPersonIdArray.length; i++) {
                    salesPersonIds += "'" + salesPersonIdArray[i] + "',";
                }
                salesPersonIds = salesPersonIds.substring(0, salesPersonIds.length() - 1);
                requestParams.put("salesPersonIds", salesPersonIds);
            }

            requestParams.put(InvoiceConstants.deleted, request.getParameter(InvoiceConstants.deleted));
            requestParams.put(InvoiceConstants.nondeleted, request.getParameter(InvoiceConstants.nondeleted));
            requestParams.put(Constants.ss, request.getParameter(Constants.ss));
            requestParams.put(Constants.REQ_startdate, request.getParameter(Constants.REQ_startdate));
            requestParams.put(Constants.REQ_enddate, request.getParameter(Constants.REQ_enddate));
            requestParams.put(Constants.start, request.getParameter(Constants.start));
            requestParams.put(Constants.limit, request.getParameter(Constants.limit));

            KwlReturnObject invResult = accInvoiceDAOobj.getInvoicesForSalesCommission(requestParams);
            List<Invoice> invList = invResult.getEntityList();
            int totalCount = invResult.getRecordTotalCount();
            JSONArray dataJArr = getSalesCommissionDetailReportJson(request,invList);

            jobj.put(Constants.data, dataJArr);
            jobj.put("totalCount", totalCount);

            String fileType = request.getParameter("filetype");
            if (StringUtil.equal(fileType, "print")) {
                String GenerateDate = authHandler.getDateFormatter(request).format(new Date());
                jobj.put("GenerateDate", GenerateDate);
                view = "jsonView-empty";
            }
            exportDaoObj.processRequest(request, response, jobj);
            jobj.put("success", true);
        } catch (SessionExpiredException ex) {
            Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
        }
        return new ModelAndView(view, "model", jobj.toString());
    }
    public ModelAndView exportSalesCommissionproductDetail(HttpServletRequest request, HttpServletResponse response) {
       JSONObject jobj = new JSONObject();
        boolean issuccess = false;
        String msg = "";
        try {
            JSONObject paramJobj = StringUtil.convertRequestToJsonObject(request);
            KwlReturnObject curresult = accountingHandlerDAOobj.getObject(KWLCurrency.class.getName(), AccountingManager.getGlobalCurrencyidFromRequest(request));
            KWLCurrency currency = (KWLCurrency) curresult.getEntityList().get(0);
            HashMap requestParams = AccountingManager.getGlobalParams(request);
            paramJobj.put(InvoiceConstants.deleted, request.getParameter(InvoiceConstants.deleted));
            paramJobj.put(InvoiceConstants.nondeleted, request.getParameter(InvoiceConstants.nondeleted));
            paramJobj.put(Constants.ss, request.getParameter(Constants.ss));
            paramJobj.put(Constants.REQ_startdate, request.getParameter(Constants.REQ_startdate));
            paramJobj.put(Constants.REQ_enddate, request.getParameter(Constants.REQ_enddate));
            paramJobj.put("currencysymbol", currency != null ? currency.getSymbol() : "");
            paramJobj.put("commissiontype", request.getParameter("commissiontype"));
            paramJobj.put("salesPersonID", request.getParameter("salesPersonID") != null ? request.getParameter("salesPersonID") : "");
            String start = request.getParameter(Constants.start);
            String limit = request.getParameter(Constants.limit);
            JSONArray jArr=accInvoiceModuleService.getSalesCommissionProductDetailReportJson(paramJobj);
            JSONArray pagedJson = new JSONArray();
            pagedJson = jArr;
            if (!StringUtil.isNullOrEmpty(start) && !StringUtil.isNullOrEmpty(limit)) {
                pagedJson = StringUtil.getPagedJSON(pagedJson, Integer.parseInt(start), Integer.parseInt(limit));
            }
//            int totalCount = invResult.getRecordTotalCount();            
//            jobj.put(Constants.data, pagedJson);
//            jobj.put("totalCount", pagedJson.length());
            jobj.put(Constants.RES_data, jArr);
            jobj.put(Constants.RES_count, jArr.length());
            
            String fileType = request.getParameter("filetype");
            exportDaoObj.processRequest(request, response, jobj);
            jobj.put("success", true);
            issuccess = true;
        } catch (SessionExpiredException ex) {
            Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
        }
        return new ModelAndView(Constants.jsonView, "model", jobj.toString());
//        return new ModelAndView(view, "model", jobj.toString());
    }
    public ModelAndView exportConsignmentLoanDetails(HttpServletRequest request, HttpServletResponse response) {
      
        JSONObject jobj = new JSONObject();
        JSONArray DataJArr = new JSONArray();
        boolean issuccess = false;
        String view = "jsonView_ex";
        String msg = "";
        try {
             boolean isConsignmentLoanOutstadingReport = request.getParameter("isConsignmentLoanOutstadingReport") != null ? Boolean.FALSE.parseBoolean(request.getParameter("isConsignmentLoanOutstadingReport")) : false;
            HashMap<String, Object> requestParams = new HashMap<String, Object>();
            requestParams.put(Constants.df, authHandler.getDateFormatter(request));
            requestParams.put(Constants.REQ_startdate, request.getParameter("startdate"));
            requestParams.put(Constants.REQ_enddate, request.getParameter("enddate"));
            requestParams.put(Constants.ss, request.getParameter("ss"));
            requestParams.put(Constants.companyKey, sessionHandlerImpl.getCompanyid(request));
            requestParams.put("isConsignmentLoanOutstadingReport", isConsignmentLoanOutstadingReport);

            KwlReturnObject result = accInvoiceDAOobj.getConsignmentLoanDetails(requestParams);
            List<Object[]> list = result.getEntityList();
            DataJArr = getConsignmentLoanDetailsJson(request, list);
            JSONArray pagedJArr = DataJArr;
//            String start = request.getParameter("start");
//            String limit = request.getParameter("limit");
//            if (!StringUtil.isNullOrEmpty(start) && !StringUtil.isNullOrEmpty(limit)) {
//                pagedJArr = StringUtil.getPagedJSON(pagedJArr, Integer.parseInt(start), Integer.parseInt(limit));
//            }
            jobj.put(Constants.RES_data, pagedJArr);
            jobj.put(Constants.RES_count, DataJArr.length());
            
            String fileType = request.getParameter("filetype");
            if (StringUtil.equal(fileType, "print")) {
                view = "jsonView-empty";
            }
            exportDaoObj.processRequest(request, response, jobj);
            jobj.put("success", true);
        } catch (SessionExpiredException ex) {
            Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
        }
        return new ModelAndView(view, "model", jobj.toString());
    }
    
    public ModelAndView getSalesCommissionDetailReport(HttpServletRequest request, HttpServletResponse response) {   
       
        JSONObject jobj = new JSONObject();
        boolean issuccess = false;
        String msg = "";
        try {
            
            HashMap requestParams = AccountingManager.getGlobalParams(request);
            String salesPersonID = request.getParameter("salesPersonID") != null ? request.getParameter("salesPersonID") : "";
            String[] salesPersonIdArray = salesPersonID.split(",");
            if (!StringUtil.isNullOrEmpty(salesPersonID) && !salesPersonID.equalsIgnoreCase("All")) {
                String salesPersonIds = "";
                for (int i = 0; i < salesPersonIdArray.length; i++) {
                    salesPersonIds += "'" + salesPersonIdArray[i] + "',";
                }
                salesPersonIds = salesPersonIds.substring(0, salesPersonIds.length() - 1);
                requestParams.put("salesPersonIds", salesPersonIds);
            }

            requestParams.put(InvoiceConstants.deleted, request.getParameter(InvoiceConstants.deleted));
            requestParams.put(InvoiceConstants.nondeleted, request.getParameter(InvoiceConstants.nondeleted));
            requestParams.put(Constants.ss, request.getParameter(Constants.ss));
            requestParams.put(Constants.REQ_startdate, request.getParameter(Constants.REQ_startdate));
            requestParams.put(Constants.REQ_enddate, request.getParameter(Constants.REQ_enddate));
            requestParams.put(Constants.start, request.getParameter(Constants.start));
            requestParams.put(Constants.limit, request.getParameter(Constants.limit));

            KwlReturnObject invResult = accInvoiceDAOobj.getInvoicesForSalesCommission(requestParams);
            List<Invoice> invList = invResult.getEntityList();
            int totalCount = invResult.getRecordTotalCount();
            JSONArray dataJArr = getSalesCommissionDetailReportJson(request, invList);
            jobj.put(Constants.data, dataJArr);
            jobj.put("totalCount", totalCount);
            issuccess = true;
        } catch (SessionExpiredException ex) {
            msg = ex.getMessage();
            Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ServiceException ex) {
            msg = ex.getMessage();
            Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            msg = "" + ex.getMessage();
            Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                jobj.put("success", issuccess);
                jobj.put("msg", msg);
            } catch (JSONException ex) {
                Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return new ModelAndView(Constants.jsonView, "model", jobj.toString());
    }
    public ModelAndView getSalesCommissionProductDetailReport(HttpServletRequest request, HttpServletResponse response) {   
       
        JSONObject jobj = new JSONObject();
        boolean issuccess = false;
        String msg = "";
        try {
            JSONObject paramJobj = StringUtil.convertRequestToJsonObject(request);
            KwlReturnObject curresult = accountingHandlerDAOobj.getObject(KWLCurrency.class.getName(), AccountingManager.getGlobalCurrencyidFromRequest(request));
            KWLCurrency currency = (KWLCurrency) curresult.getEntityList().get(0);
            HashMap requestParams = AccountingManager.getGlobalParams(request);
            paramJobj.put(InvoiceConstants.deleted, request.getParameter(InvoiceConstants.deleted));
            paramJobj.put(InvoiceConstants.nondeleted, request.getParameter(InvoiceConstants.nondeleted));
            paramJobj.put(Constants.ss, request.getParameter(Constants.ss));
            paramJobj.put(Constants.REQ_startdate, request.getParameter(Constants.REQ_startdate));
            paramJobj.put(Constants.REQ_enddate, request.getParameter(Constants.REQ_enddate));
            paramJobj.put("currencysymbol", currency != null ? currency.getSymbol() : "");
            paramJobj.put("commissiontype", request.getParameter("commissiontype"));
            paramJobj.put("salesPersonID", request.getParameter("salesPersonID") != null ? request.getParameter("salesPersonID") : "");
            String start = request.getParameter(Constants.start);
            String limit = request.getParameter(Constants.limit);
            JSONArray jArr=accInvoiceModuleService.getSalesCommissionProductDetailReportJson(paramJobj);
            JSONArray pagedJson = new JSONArray();
            pagedJson = jArr;
            if (!StringUtil.isNullOrEmpty(start) && !StringUtil.isNullOrEmpty(limit)) {
                pagedJson = StringUtil.getPagedJSON(pagedJson, Integer.parseInt(start), Integer.parseInt(limit));
            }
//            int totalCount = invResult.getRecordTotalCount();            
            jobj.put(Constants.data, pagedJson);
            jobj.put("totalCount", jArr.length());
            issuccess = true;
        } catch (SessionExpiredException ex) {
            msg = ex.getMessage();
            Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ServiceException ex) {
            msg = ex.getMessage();
            Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            msg = "" + ex.getMessage();
            Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                jobj.put("success", issuccess);
                jobj.put("msg", msg);
            } catch (JSONException ex) {
                Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return new ModelAndView(Constants.jsonView, "model", jobj.toString());
    }
    public JSONArray getSalesCommissionDetailReportJson(HttpServletRequest request, List<Invoice> invList) throws SessionExpiredException, ServiceException {
        JSONArray jArr = new JSONArray();
        try {
            KwlReturnObject extracapresult = accountingHandlerDAOobj.getObject(ExtraCompanyPreferences.class.getName(), sessionHandlerImpl.getCompanyid(request));
            ExtraCompanyPreferences extraCompanyPreferences = (ExtraCompanyPreferences) extracapresult.getEntityList().get(0);
            KwlReturnObject curresult = accountingHandlerDAOobj.getObject(KWLCurrency.class.getName(), AccountingManager.getGlobalCurrencyidFromRequest(request));
            KWLCurrency currency = (KWLCurrency) curresult.getEntityList().get(0);
            DateFormat df = authHandler.getDateFormatter(request);
            String companyid = sessionHandlerImpl.getCompanyid(request);
            HashMap requestParams = AccountingManager.getGlobalParams(request);
            for (Invoice inv : invList) {
                double termAmount = 0;
                double TaxAmount = 0, rowTaxAmount = 0, rowDisocuntAmount = 0;
                JSONObject obj = new JSONObject();

                obj.put("invoiceID", inv.getID());
                obj.put("invoiceNo", inv.getInvoiceNumber());
                obj.put("jeID", (inv.getJournalEntry() != null) ? inv.getJournalEntry().getID() : "");
                obj.put("jeNo", (inv.getJournalEntry() != null) ? inv.getJournalEntry().getEntryNumber() : "");
//                obj.put("invoiceDate", (inv.getJournalEntry() != null) ? df.format(inv.getJournalEntry().getEntryDate()) : "");
                obj.put("invoiceDate", (inv.getCreationDate() != null) ? df.format(inv.getCreationDate()) : "");
                obj.put("customer", (inv.getCustomer() != null) ? inv.getCustomer().getName() : "");
                obj.put("salesPerson", (inv.getMasterSalesPerson() != null) ? inv.getMasterSalesPerson().getValue() : "");

                Date invoiceCreationDate = inv.getCreationDate();
                Double externalCurrencyRate = 0d;
                Double invoiceOriginalAmount = 0d;
                if (inv.isIsOpeningBalenceInvoice() && !inv.isNormalInvoice()) {
                    ExchangeRateDetails erd = inv.getExchangeRateDetail();
                    externalCurrencyRate = inv.getExchangeRateForOpeningTransaction();
                    invoiceOriginalAmount = inv.getOriginalOpeningBalanceAmount();
                }

                Set<InvoiceDetail> invoiceDetails = inv.getRows();
                for (InvoiceDetail invoiceDetail : invoiceDetails) {
                    /**
                     *  SDP-12911 RowTermAmount includes linelevel tax summation for every Product as multiple taxes can be applied on single line level
                     * for Indian Country
                     */
                    rowTaxAmount += invoiceDetail.getRowTaxAmount() + invoiceDetail.getRowTermTaxAmount() + invoiceDetail.getRowTermAmount();
                    if (invoiceDetail.getDiscount() != null) {
                        rowDisocuntAmount += invoiceDetail.getDiscount().getDiscountValue();
                    }
                    }

                JournalEntry je = null;
                if (inv.isNormalInvoice()) {
                    je = inv.getJournalEntry();
//                    invoiceCreationDate = je.getEntryDate();
                    externalCurrencyRate = je.getExternalCurrencyRate();
                }

                JournalEntryDetail d = null;
                if (inv.isNormalInvoice()) {
                    d = inv.getCustomerEntry();
                    invoiceOriginalAmount = d.getAmount();
                }

                JournalEntryDetail tempd = inv.getTaxEntry();
                tempd = inv.getTaxEntry();
                if (tempd != null) {
                    TaxAmount += tempd.getAmount();
                }

                HashMap<String, Object> requestParam = new HashMap();
                requestParam.put("invoiceid", inv.getID());
                curresult = accInvoiceDAOobj.getInvoiceTermMap(requestParam);
                List<InvoiceTermsMap> termMap = curresult.getEntityList();
                for (InvoiceTermsMap invoiceTerMap : termMap) {
                    InvoiceTermsSales mt = invoiceTerMap.getTerm();
                    termAmount += invoiceTerMap.getTermamount();
                }

                String currencyid = (inv.getCurrency() == null ? currency.getCurrencyID() : inv.getCurrency().getCurrencyID());

//                        double invoiceAmount = invoiceOriginalAmount + rowDisocuntAmount - rowTaxAmount - termAmount - TaxAmount;
                double invoiceAmount = 0;
                if (extraCompanyPreferences != null && extraCompanyPreferences.getSalesCommissionReportMode() == Constants.SalesCommission_InvoiceNetAmountExcludingTaxMode) {
                    invoiceAmount = invoiceOriginalAmount + rowDisocuntAmount - termAmount - rowTaxAmount - TaxAmount; // Line Item Price Amount + Tax amount
                } else if (extraCompanyPreferences != null && extraCompanyPreferences.getSalesCommissionReportMode() == 1) {
                    invoiceAmount = (invoiceOriginalAmount - termAmount); // (Line Item Price Amount - Discount Amount) + Tax Amount
                } else {
                    invoiceAmount = invoiceOriginalAmount + rowDisocuntAmount - rowTaxAmount - TaxAmount; // default rule
                }
                KwlReturnObject bAmt = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, invoiceAmount, currencyid, invoiceCreationDate, externalCurrencyRate);
                double amountinbase = (Double) bAmt.getEntityList().get(0);

                obj.put("totalInvoiceAmount", amountinbase);
                obj.put("totalInvoiceAmountInDoc", invoiceAmount);
                obj.put(Constants.currencyKey, currency != null ? currency.getCurrencyID() : "");
                obj.put("currencysymbol", currency != null ? currency.getSymbol() : "");
                obj.put("currencysymboltransaction", inv.getCurrency() != null ? inv.getCurrency().getSymbol() : "");

                if (inv.getMasterSalesPerson() != null) {
                    String itemid = inv.getMasterSalesPerson().getID();

                    HashMap<String, Object> filterRequestParams = new HashMap<String, Object>();
                    ArrayList filter_names = new ArrayList(), filter_params = new ArrayList(), order_by = new ArrayList(), order_type = new ArrayList();
                    filter_names.add("company.companyID");
                    filter_params.add(sessionHandlerImpl.getCompanyid(request));
                    filter_names.add("schemaItem");
                    filter_params.add(itemid);
                    filter_names.add("commissiontype");
                    filter_params.add(1);
                    order_by.add("lowerlimit");
                    order_by.add("upperlimit");
                    order_type.add("asc");
                    order_type.add("asc");
                    filterRequestParams.put("filter_names", filter_names);
                    filterRequestParams.put("filter_params", filter_params);
                    filterRequestParams.put("order_by", order_by);
                    filterRequestParams.put("order_type", order_type);
                    KwlReturnObject salesCommissionResult = accMasterItemsDAOobj.getsalesComissionScehma(filterRequestParams);
                    List listSales = salesCommissionResult.getEntityList();

                    double commissionAmount = 0.0;
                    double tempOriginalAmount = amountinbase;
                    
                    Iterator itrSales = listSales.iterator();
                    while (itrSales.hasNext()) {
                        SalesComissionScehma salesComissionScehma = (SalesComissionScehma) itrSales.next();
                        double lowervalue = salesComissionScehma.getLowerlimit();
                        double uppervalue = salesComissionScehma.getUpperlimit();
                        double percentageType = salesComissionScehma.getPercentageType();
                        double amount = salesComissionScehma.getAmount();
                        if (percentageType == 1) {
                             if (tempOriginalAmount >= lowervalue && tempOriginalAmount >= uppervalue) {
                                //ERP-1948,ERP-16107.
                                if (lowervalue == 0) {//In this case, we already get diff "including lowervalue & including uppervalue".
                                    commissionAmount = commissionAmount + ((uppervalue - lowervalue) * amount) / 100.00;
                                } else {// Adding +1 in diff because we are considering both values as "including lowervalue & including uppervalue".
                                    commissionAmount = commissionAmount + (((uppervalue - lowervalue) + 1) * amount) / 100.00;
                                }
                            } else if (tempOriginalAmount >= lowervalue && tempOriginalAmount < uppervalue) {
                                if (lowervalue == 0) {//In this case, we already get diff "including lowervalue & including uppervalue".
                                    commissionAmount = commissionAmount + ((tempOriginalAmount - lowervalue) * amount) / 100.00;
                                } else {// Adding +1 in diff because we are considering both values as "including lowervalue & including uppervalue".
                                    commissionAmount = commissionAmount + (((tempOriginalAmount - lowervalue)) * amount) / 100.00;
                                }
                            }
                        } else {
                            if (tempOriginalAmount > lowervalue && tempOriginalAmount >= uppervalue) {
                                commissionAmount = commissionAmount + amount;
                            } else if (tempOriginalAmount > lowervalue && tempOriginalAmount < uppervalue) {
                                commissionAmount = commissionAmount + amount;
                            }
                        }
                                }
                    requestParam.put(Constants.companyid, companyid);
                    requestParam.put(Constants.globalCurrencyKey, currency.getCurrencyID());
                    KwlReturnObject bAmt1 = accCurrencyDAOobj.getBaseToCurrencyAmount(requestParam, commissionAmount, inv.getCurrency().getCurrencyID(), invoiceCreationDate, 0);
                    double commissionAmountInDoc = authHandler.round((Double) bAmt1.getEntityList().get(0), companyid);
                    obj.put("totalCommissionAmount", commissionAmount);
                    obj.put("totalCommissionAmountInDoc", commissionAmountInDoc);
                }             

                jArr.put(obj);
            }

        } catch (Exception ex) {

            Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
        }
        return jArr;
    }
     public void getAgedReceivableJasperCustomerRemainderLetter(HttpServletRequest request, HttpServletResponse response) throws ServiceException, SessionExpiredException, ParseException {
        ArrayList<CustomerRemainderJasperTable> agedReceivableSubReportList = new ArrayList<CustomerRemainderJasperTable>();
        ArrayList<OnlyDatePojo> DateOnlyPojoLOist = new ArrayList<OnlyDatePojo>();
        Map<String, Object> agedReceivableMap = new HashMap<String, Object>();
        SimpleDateFormat df = new SimpleDateFormat("dd/MM/yyyy");
        JSONObject jobj = new JSONObject();
        JSONObject jobjTemp = new JSONObject();
        OnlyDatePojo DateOnlyPojo = new OnlyDatePojo();
        JasperPrint jasperPrint = null;
        try {
            int templateflag=Integer.parseInt(request.getParameter("templateflag"));
            String companyid = sessionHandlerImpl.getCompanyid(request);
            KwlReturnObject companyresult = accountingHandlerDAOobj.getObject(Company.class.getName(), companyid);
            Company company = (Company) companyresult.getEntityList().get(0);
            KWLCurrency currency = company.getCurrency();
            KwlReturnObject resultCPF = accountingHandlerDAOobj.getObject(CompanyAccountPreferences.class.getName(), sessionHandlerImpl.getCompanyid(request));
            CompanyAccountPreferences companyAccountPreferences = (CompanyAccountPreferences) resultCPF.getEntityList().get(0);
           
            agedReceivableMap.put("CompanyName", company.getCompanyName());
            agedReceivableMap.put("CompanyMail", company.getEmailID() != null ? company.getEmailID() : "");
            agedReceivableMap.put("CompanyFax", company.getFaxNumber() != null ? company.getFaxNumber() : "");
            agedReceivableMap.put("CompanyPhone", company.getPhoneNumber() != null ? company.getPhoneNumber() : "");
            agedReceivableMap.put("CompanyAddress",AccountingAddressManager.getCompanyDefaultBillingAddress(companyid, accountingHandlerDAOobj));
           
            String endDate = df.format(authHandler.getDateFormatter(request).parse(request.getParameter("enddate")));
            String startDate = df.format(authHandler.getDateFormatter(request).parse(request.getParameter("stdate")));
            String dateRange = "From Date : " + startDate + ",To Date : " + endDate;
            DateOnlyPojo.setDate(dateRange);
            String duration = request.getParameter("duration");
            ModelAndView result=getInvoicesMerged(request,response);
            String model = (String) result.getModel().get("model");
            JSONObject objJSONObj = new JSONObject(model);
            JSONArray DataJArr = objJSONObj.getJSONArray(Constants.data);
            
            //params to send to get billing address
            HashMap<String, Object> addressParams = new HashMap<String, Object>();
            addressParams.put(Constants.companyKey, sessionHandlerImpl.getCompanyid(request));
            addressParams.put("isDefaultAddress", true); //always true to get defaultaddress
            
            for (int i = 0; i < DataJArr.length(); i++) {
                CustomerRemainderJasperTable  agedReceivableSubReport = new CustomerRemainderJasperTable();
                jobj = DataJArr.getJSONObject(i);
               //--------------------Only Take entry foir sales invoice and debit note for Customer-------------------------
                if(!(jobj.getString("type").equalsIgnoreCase("Sales Invoice") ||jobj.getString("type").equalsIgnoreCase("Debit Note"))){
                   continue;
                }
                String customerName = "";
                String cutCode = "";
                String custAddress = "";
                String invoiceNo = "";
                String doc = "";
                String date = "";
                String dueOn = "";
                double amount = 0.0;
                String currencyCode = "";
                String currencySymbol = "";
                String poNo = "";
                double receivedAmount = 0.0;
                String interval = duration;
                double balance = 0;
                Customer customer = null;
                invoiceNo = jobj.getString("billno");
                customerName = jobj.optString("personname") != null ? jobj.getString("personname") : "";
                currencyCode = currency!= null ? currency.getCurrencyCode()!=null?currency.getCurrencyCode():"":"";
                currencySymbol = currency!= null ? currency.getSymbol()!=null?currency.getSymbol():"":"";
               
                if (jobj.optString("personid") != null && !StringUtil.isNullOrEmpty(jobj.optString("personid"))) {
                    KwlReturnObject cmpresult = accountingHandlerDAOobj.getObject(Customer.class.getName(), jobj.getString("personid"));
                    customer = (Customer) cmpresult.getEntityList().get(0);
                    cutCode = customer.getAcccode() != null ? customer.getAcccode() : "";
                }
              
                date = jobj.optString("date") != null ? df.format(Date.parse(jobj.getString("date"))) : "";
                dueOn = jobj.optString("duedate") != null ? df.format(Date.parse(jobj.getString("duedate"))) : "";
                balance = jobj.optString("amountdueinbase") != null ? Double.parseDouble(jobj.getString("amountdueinbase")) : 0.0;
                amount = jobj.optDouble("amountinbase",0.0);
                receivedAmount = jobj.optDouble("amountinbase",0.0)!=0.0?jobj.optDouble("amountinbase",0.0) -jobj.optDouble("amountdueinbase",0.0):0.0;
                addressParams.put("isBillingAddress", true); //true to get billing address
                addressParams.put(Constants.customerid, customer.getID());
                custAddress = accountingHandlerDAOobj.getCustomerAddress(addressParams);
                poNo = jobj.optString("porefno","");
                agedReceivableSubReport.setCustId(jobj.optString("personid"));
                agedReceivableSubReport.setCustomerName(customerName);
                agedReceivableSubReport.setCutCode(cutCode);
                agedReceivableSubReport.setCustAddress(custAddress);
                agedReceivableSubReport.setDate(date);
                agedReceivableSubReport.setDoc(doc);
                agedReceivableSubReport.setDueOn(dueOn);
                agedReceivableSubReport.setInterval(interval);
                agedReceivableSubReport.setInvoiceNo(invoiceNo);
                agedReceivableSubReport.setPoNo(poNo);
                agedReceivableSubReport.setReceivedAmount(authHandler.formattedAmount(receivedAmount, companyid));
                agedReceivableSubReport.setBalance(balance);
                agedReceivableSubReport.setAmount(authHandler.formattedAmount(amount, companyid));
                agedReceivableSubReport.setDocumentdate(endDate);
                agedReceivableSubReport.setCurrencyCode(currencyCode);
                agedReceivableSubReport.setCompanyName(company.getCompanyName());//to print atr each subreport 
                agedReceivableSubReport.setCurrencySymbol(currencySymbol);
                agedReceivableSubReportList.add(agedReceivableSubReport);
          
            DateOnlyPojoLOist.add(DateOnlyPojo);
            }
            response.setHeader("Content-Disposition", "attachment;filename=" + "CustomerRemainderLetter.pdf");
            InputStream SubReportInputStream = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/CustomerRemainderLetter_subreport.jrxml");
            JasperDesign SubReportJasperDesign = JRXmlLoader.load(SubReportInputStream);
            JasperReport SubReport = JasperCompileManager.compileReport(SubReportJasperDesign);
            agedReceivableMap.put("CRSubReport", SubReport);
            agedReceivableMap.put("format", "pdf");
            agedReceivableMap.put("CRSubReportData", new JRBeanCollectionDataSource(agedReceivableSubReportList));
            InputStream inputStream = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/CustomerRemainderLetter.jrxml");
            JasperDesign jasperDesign = JRXmlLoader.load(inputStream);
            JasperReport jasperReport = JasperCompileManager.compileReport(jasperDesign);
            JRBeanCollectionDataSource beanColDataSource = new JRBeanCollectionDataSource(DateOnlyPojoLOist);
            jasperPrint = JasperFillManager.fillReport(jasperReport, agedReceivableMap, beanColDataSource);
         //--------------------------------------------Logic to remove the last blank page generated----------------------------
            List<JasperPrint> jprintlist = new ArrayList<JasperPrint>();
            jprintlist.add(jasperPrint);
            JasperPrint jsperPages = jprintlist.get(0);
            List<JRPrintPage> pages = jsperPages.getPages();
            if (pages.size() > 1) {
                pages.remove(pages.size() - 1);
            }
           
            JRPdfExporter exp = new JRPdfExporter();
            exp.setParameter(JRExporterParameter.JASPER_PRINT, jasperPrint);
            exp.setParameter(JRPdfExporterParameter.OUTPUT_STREAM, response.getOutputStream());
            exp.exportReport();
          } catch (Exception ex) {
            Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
           throw ServiceException.FAILURE("getAgedReceivableJasperCustomerRemainder : " + ex.getMessage(), ex);
         }
    }
     
    public void exportSalesInvoiceRegisterReport(HttpServletRequest request, HttpServletResponse response) {
        List jasperPrint = null;
        boolean isDetailPDF = false;
        try {
            isDetailPDF = request.getParameter("isLandscape")!=null?Boolean.parseBoolean(request.getParameter("isLandscape")):false;
            if(isDetailPDF){
                jasperPrint = accExportReportsServiceDAOobj.exportSalesInvoiceRegisterReport(request, response,new JSONArray());
            } else {
                    jasperPrint = accExportReportsServiceDAOobj.exportSalesInvoiceRegisterSummaryReport(request, response);
                }
                JRPdfExporter exp = new JRPdfExporter();
                exp.setParameter(JRExporterParameter.JASPER_PRINT_LIST, jasperPrint);
                exp.setParameter(JRPdfExporterParameter.OUTPUT_STREAM, response.getOutputStream());
                exp.exportReport();
        } catch (Exception e) {
            Logger.getLogger(accInvoiceController.class.getName()).log(Level.SEVERE, null, e);
        }
    }
    
    public void exportChallanNo281Report(HttpServletRequest request, HttpServletResponse response) {
        List jasperPrint = null;
        List<Object> jasperPrint1 = new ArrayList();
        String paymentAccountid = StringUtil.isNullOrEmpty(request.getParameter("paymentaccountid")) ? "" : request.getParameter("paymentaccountid");
        if (!StringUtil.isNullOrEmpty(paymentAccountid)) {

            Calendar date = Calendar.getInstance();
            date.setTime(new Date());
            SimpleDateFormat f = new SimpleDateFormat("yyyy");
            String assessmentYear = f.format(date.getTime());
            date.add(Calendar.YEAR, 1);
            f = new SimpleDateFormat("yy");
            assessmentYear += f.format(date.getTime());
            String paymentIds[] = paymentAccountid.split(",");
            String tannumber = "";
            String fullname = "";
            String address = "";
            try {
                String companyid = sessionHandlerImpl.getCompanyid(request);
                ExtraCompanyPreferences extraCompanyPreferences = (ExtraCompanyPreferences) kwlCommonTablesDAOObj.getClassObject(ExtraCompanyPreferences.class.getName(), companyid);
                tannumber = extraCompanyPreferences.getTanNumber();
                KwlReturnObject cmpresult = accountingHandlerDAOobj.getObject(Company.class.getName(), companyid);
                Company company = (Company) cmpresult.getEntityList().get(0);
                fullname = company.getCompanyName();
                address = company.getAddress();
            } catch (Exception e) {
                Logger.getLogger(accInvoiceController.class.getName()).log(Level.SEVERE, null, e);
            }
            Map<String, Object> requiredData = new HashMap<String, Object>();
            requiredData.put("assessmentYear", assessmentYear);
            requiredData.put("tanNo", tannumber);
            requiredData.put("fullName", fullname);
            requiredData.put("address", address);
            String appendQuery = "";
            try {
                JSONArray lineLevelEntries = new JSONArray();
                String deducteeType = "";
                int residentialStatus = 0;
                for (int i = 0; i < paymentIds.length; i++) {
                    KwlReturnObject paymentresult = accountingHandlerDAOobj.getObject(Payment.class.getName(), paymentIds[i]);
                    Payment details = (Payment) paymentresult.getEntityList().get(0);
                    if (details != null) {
                        List<Payment> paymentList = paymentresult.getEntityList();
                        for (Payment payment : paymentList) {
                            String findDeducteetypeQuery = "SELECT code from masteritem WHERE id=?";
                            List<String> findDeducteetypeList = null;
                            deducteeType = payment.getVendor().getDeducteeType();
                            findDeducteetypeList = accCommonTablesDAO.executeSQLQuery(findDeducteetypeQuery, new Object[]{deducteeType});
                            if (findDeducteetypeList.size() > 0) {
                                JSONArray jArr = new JSONArray(findDeducteetypeList);
                                deducteeType = jArr.get(0).toString();
                            }
                            residentialStatus = payment.getVendor().getResidentialstatus();
                        }

                        Set<PaymentDetail> paymentDetails = details.getRows(); //get Invoice line entries.
                        for (PaymentDetail paymentDetail : paymentDetails) {
                            Set<TdsDetails> tdsDetails = paymentDetail.getTdsdetails();
                            for (TdsDetails tdsDetail : tdsDetails) {
                                JSONObject temp = new JSONObject();
                                String natureOfPayment = tdsDetail.getNatureOfPayment() != null ? tdsDetail.getNatureOfPayment().getID() : "";
                                double tdsamount = tdsDetail.getTdsamount();
                                temp.put("deducteetype", deducteeType);
                                temp.put("tdsamount", tdsamount);
                                temp.put("residentialstatus", residentialStatus);
                                temp.put("natureofpayment", natureOfPayment);
                                lineLevelEntries.put(temp);
                            }
                        }

                        Set<AdvanceDetail> AdvancedpaymentDetails = details.getAdvanceDetails(); //get Advance / Deposit line entries.
                        for (AdvanceDetail paymentDetail : AdvancedpaymentDetails) {
                            Set<TdsDetails> tdsDetails = paymentDetail.getTdsdetails();
                            for (TdsDetails tdsDetail : tdsDetails) {
                                JSONObject temp = new JSONObject();
                                String natureOfPayment = tdsDetail.getNatureOfPayment() != null ? tdsDetail.getNatureOfPayment().getID() : "";
                                double tdsamount = tdsDetail.getTdsamount();
                                temp.put("deducteetype", deducteeType);
                                temp.put("tdsamount", tdsamount);
                                temp.put("residentialstatus", residentialStatus);
                                temp.put("natureofpayment", natureOfPayment);
                                lineLevelEntries.put(temp);
                            }
                        }

                        Set<PaymentDetailOtherwise> AgainstGLpaymentDetails = details.getPaymentDetailOtherwises(); //get GL line entries.
                        for (PaymentDetailOtherwise paymentDetail : AgainstGLpaymentDetails) {
                            Set<TdsDetails> tdsDetails = paymentDetail.getTdsdetails();
                            for (TdsDetails tdsDetail : tdsDetails) {
                                JSONObject temp = new JSONObject();
                                double tdsamount = tdsDetail.getTdsamount();
                                String natureOfPayment = tdsDetail.getNatureOfPayment() != null ? tdsDetail.getNatureOfPayment().getID() : "";
                                temp.put("deducteetype", deducteeType);
                                temp.put("tdsamount", tdsamount);
                                temp.put("residentialstatus", residentialStatus);
                                temp.put("natureofpayment", natureOfPayment);
                                lineLevelEntries.put(temp);
                            }
                        }

                        String creditnotedetailquery = "SELECT tdsamount, natureOfPayment FROM account "
                                + " INNER JOIN tdsdetails ON tdsdetails.account=account.id "
                                + " WHERE account.id IN (SELECT account FROM tdsdetails WHERE creditnotepaymentdetail IN "
                                + " ( SELECT id FROM creditnotpayment WHERE paymentid=? ))";
                        List<String> creditnotedetailList = null;
                        creditnotedetailList = accCommonTablesDAO.executeSQLQuery(creditnotedetailquery, new Object[]{paymentIds[i]});
                        Iterator ite = creditnotedetailList.iterator();
                        while (ite.hasNext()) {
                            Object[] row = (Object[]) ite.next();
                            JSONObject temp = new JSONObject();
                            temp.put("deducteetype", deducteeType);
                            temp.put("residentialstatus", residentialStatus);
                            temp.put("tdsamount", row[0]);
                            temp.put("natureofpayment", row[1]);
                            lineLevelEntries.put(temp);
                        }
                    }
                }
                HashSet dupentries = new HashSet();
                for (int i = 0; i < lineLevelEntries.length(); i++) {
                    if (dupentries.contains(i)) {
                        continue;
                    }
                    int tdsamount = 0;
                    JSONObject printChallan = lineLevelEntries.getJSONObject(i);
                    tdsamount += Double.parseDouble(printChallan.getString("tdsamount"));
                    boolean companyDeductee = true;
                    if (deducteeType.equalsIgnoreCase("0")) {
                        companyDeductee = false;
                    }
                    for (int j = i + 1; j < lineLevelEntries.length(); j++) {
                        JSONObject temp = lineLevelEntries.getJSONObject(j);
                        if (!printChallan.getString("deducteetype").equalsIgnoreCase(temp.getString("deducteetype"))) {
                            continue;
                        }
                        if (!printChallan.getString("residentialstatus").equalsIgnoreCase(temp.getString("residentialstatus"))) {
                            continue;
                        }
                        if (printChallan.getString("natureofpayment").equalsIgnoreCase(temp.getString("natureofpayment"))) {
                            dupentries.add(j);
                            tdsamount += Double.parseDouble(temp.getString("tdsamount"));
                        }
                    }

                    String natureOfPaymentQuery = "SELECT value, code from masteritem WHERE id=?";
                    List<String> natureOfPaymentList = null;
                    natureOfPaymentList = accCommonTablesDAO.executeSQLQuery(natureOfPaymentQuery, new Object[]{printChallan.getString("natureofpayment")});
                    String code = "";
                    String natureOfPayment = "";
                    Iterator it = natureOfPaymentList.iterator();
                    while (it.hasNext()) {
                        Object[] row = (Object[]) it.next();
                        code = row[1].toString();
                        natureOfPayment = row[0].toString();
                    }

                    requiredData.put("isCompanyDeductee", companyDeductee);
                    requiredData.put("code", code);
                    requiredData.put("natureofpayment", natureOfPayment);
                    requiredData.put("tdsamount", String.valueOf(tdsamount));

                    jasperPrint = accExportReportsServiceDAOobj.exportChallanNo281Report(request, response, requiredData);
                    jasperPrint1.addAll(jasperPrint);
                }
                JRPdfExporter exp = new JRPdfExporter();
                exp.setParameter(JRExporterParameter.JASPER_PRINT_LIST, jasperPrint1);
                exp.setParameter(JRPdfExporterParameter.OUTPUT_STREAM, response.getOutputStream());
                exp.exportReport();

            } catch (Exception ex) {
                Logger.getLogger(accInvoiceController.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }
    public void exportSalesInvoiceRegisterXlxReport(HttpServletRequest request, HttpServletResponse response) {
        boolean isDetailPDF = false;
        try {
            String companyid = sessionHandlerImpl.getCompanyid(request);
            JSONArray temArray = new JSONArray();
            List jasperPrint = accExportReportsServiceDAOobj.exportSalesInvoiceRegisterReport(request, response, temArray);
            accExportOtherReportsServiceDAOobj.exportXlsReport(response, Constants.CUSTOMER_INVOICE, Constants.CUSTOMER_INVOICE, temArray, companyid);
        } catch (Exception e) {
            Logger.getLogger(accInvoiceController.class.getName()).log(Level.SEVERE, null, e);
        }
    }

    public void exportDeliveryOrderRegisterXlxReport(HttpServletRequest request, HttpServletResponse response) {
        boolean isDetailPDF = false;
        try {
            String companyid = sessionHandlerImpl.getCompanyid(request);
            JSONArray temArray = new JSONArray();
            accExportOtherReportsServiceDAOobj.exportDeliveryOrderXls(request, response, temArray);
            accExportOtherReportsServiceDAOobj.exportXlsReport(response, Constants.Delivery_Order, Constants.Delivery_Order, temArray, companyid);
        } catch (Exception e) {
            Logger.getLogger(accInvoiceController.class.getName()).log(Level.SEVERE, null, e);
        }
    }
    public ModelAndView activateDeactivateRecurringInvoice(HttpServletRequest request, HttpServletResponse response) throws SessionExpiredException {
        JSONObject jobj = new JSONObject();
        String msg = "";
        boolean issuccess = false;
        DefaultTransactionDefinition def = new DefaultTransactionDefinition();
        def.setName("JEC_Tx");
        def.setPropagationBehavior(TransactionDefinition.PROPAGATION_REQUIRED);

        TransactionStatus status = txnManager.getTransaction(def);
        try {
            msg = activateDeactivateRecurringInvoice(request);
            txnManager.commit(status);
            issuccess = true;
            //msg = messageSource.getMessage("acc.je1.updt", null, RequestContextUtils.getLocale(request));   //"Journal Entry has been updated successfully";
        } catch (AccountingException ex) {
            txnManager.rollback(status);
            msg = ex.getMessage();
        } catch (SessionExpiredException ex) {
            txnManager.rollback(status);
            msg = ex.getMessage();
            Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, "accInvoiceControllerCMN.activateDeactivateRecurringInvoice", ex);
        } catch (Exception ex) {
            txnManager.rollback(status);
            msg = ex.getMessage();
            Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, "accInvoiceControllerCMN.activateDeactivateRecurringInvoice", ex);
        } finally {
            try {
                jobj.put("success", issuccess);
                jobj.put("msg", msg);
            } catch (Exception ex) {
                Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, "accInvoiceControllerCMN.activateDeactivateRecurringInvoice", ex);
            }
        }
        return new ModelAndView(Constants.jsonView, "model", jobj.toString());
    }
    
    public String activateDeactivateRecurringInvoice(HttpServletRequest request) throws SessionExpiredException, AccountingException, ServiceException {
        String msg = "";
        try {
            JSONArray jArr = new JSONArray(request.getParameter(Constants.data));
            for (int i = 0; i < jArr.length(); i++) {
                JSONObject jobj = jArr.getJSONObject(i);
                if (!StringUtil.isNullOrEmpty(jobj.getString("repeatedid"))) {
                    String repeateid  = jobj.getString("repeatedid");
                    boolean isactivate = jobj.optBoolean("isactivate");
                    boolean ispendingapproval = jobj.optBoolean("ispendingapproval");
                    String billno = jobj.optString("billno");
                    if(ispendingapproval){
                        accInvoiceDAOobj.approveRecurringInvoice(repeateid, false);    //Invoice Approved here
                        msg = "Recurring Invoice has been approved successfully.";
                    } else {
                        accInvoiceDAOobj.activateDeactivateRecurringInvoice(repeateid, isactivate);
                        msg = messageSource.getMessage("acc.inv.recupdate", null, RequestContextUtils.getLocale(request)); 
                        auditTrailObj.insertAuditLog(AuditAction.INVOICE_UPDATED, messageSource.getMessage("acc.field.User", null, RequestContextUtils.getLocale(request)) + sessionHandlerImpl.getUserFullName(request) +" "+messageSource.getMessage("acc.field.has", null, RequestContextUtils.getLocale(request)) + " " +(isactivate? messageSource.getMessage("acc.field.Deactivated", null, RequestContextUtils.getLocale(request)):messageSource.getMessage("acc.field.Activated", null, RequestContextUtils.getLocale(request))) + " " +messageSource.getMessage("acc.field.RecurringSalesInvoice", null, RequestContextUtils.getLocale(request)) +" " +billno, request, billno);
                    }
                }//if
            }//for            
        } catch(Exception ex){//try
            Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, "accInvoiceControllerCMN.activateDeactivateRecurringInvoice", ex);
        }//catch
        return msg;
    }//method-end
    public ModelAndView getForeignCurrencyGainAndLoss(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        String msg = "";
        boolean issuccess = false;
        JSONArray DataJArr = new JSONArray();
        JSONArray jArr = new JSONArray();
        try {
            DataJArr = getForeignCurrencyGainAndLoss(request);
            JSONArray pagedJson = DataJArr;
            String start = request.getParameter("start");
            String limit = request.getParameter("limit");
            if (!StringUtil.isNullOrEmpty(start) && !StringUtil.isNullOrEmpty(limit)) {
                pagedJson = StringUtil.getPagedJSON(pagedJson, Integer.parseInt(start), Integer.parseInt(limit));
            }
            jobj.put(Constants.data, pagedJson);
            jobj.put("count", DataJArr.length());
            issuccess = true;
        } catch (Exception ex) {
            ex.printStackTrace();
            msg = "" + ex.getMessage();
            Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                jobj.put("success", issuccess);
                jobj.put("msg", msg);
            } catch (JSONException ex) {
                ex.printStackTrace();
                Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return new ModelAndView(Constants.jsonView, "model", jobj.toString());
    }

   public ModelAndView exportForeignCurrencyGainAndLossReport(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        String view = "jsonView_ex";
        try {
            JSONArray jArr = getForeignCurrencyGainAndLoss(request);
            JSONObject dataObj = new JSONObject();
            dataObj.put(Constants.data, jArr);
            String fileType = request.getParameter("filetype");
            if (StringUtil.equal(fileType, "print")) {
                String GenerateDate = authHandler.getDateFormatter(request).format(new Date());
                dataObj.put("GenerateDate", GenerateDate);
                view = "jsonView-empty";
            }
            exportDaoObj.processRequest(request, response, dataObj);
        } catch (SessionExpiredException ex) {
            Logger.getLogger(accGoodsReceiptControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            Logger.getLogger(accGoodsReceiptControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
        }
        return new ModelAndView(view, "model", jobj.toString());
    }

    public JSONArray getForeignCurrencyGainAndLoss(HttpServletRequest request) {
        JSONArray DataJArr = new JSONArray();
        try {
            DecimalFormat f = new DecimalFormat("##.00");
            int optionSelected = !StringUtil.isNullOrEmpty(request.getParameter("optionSelected")) ? Integer.parseInt(request.getParameter("optionSelected")) : 2;
            String vendorid = request.getParameter("vendorid");
            String customerid = request.getParameter(Constants.customerid);
            String companyid = sessionHandlerImpl.getCompanyid(request);
            KwlReturnObject resultcompany = accountingHandlerDAOobj.getObject(CompanyAccountPreferences.class.getName(), companyid);
            CompanyAccountPreferences companyAccountPreferences = (CompanyAccountPreferences) resultcompany.getEntityList().get(0);
            String forexAccount = companyAccountPreferences.getForeignexchange() != null ? companyAccountPreferences.getForeignexchange().getID() : "";
            KwlReturnObject curresult = accountingHandlerDAOobj.getObject(KWLCurrency.class.getName(), sessionHandlerImpl.getCurrencyID(request));
            KWLCurrency currency = (KWLCurrency) curresult.getEntityList().get(0);
            DateFormat df = authHandler.getDateFormatter(request);
            HashMap requestParams = AccInvoiceServiceHandler.getInvoiceRequestMap(request);
            HashMap requestParams1 = new HashMap();
            ArrayList filter_names = new ArrayList(), filter_values = new ArrayList();
            KwlReturnObject resultObj = null;
            List list = null;
            if (optionSelected == 2 || optionSelected == 0) {
                if (optionSelected == 0 && !StringUtil.isNullOrEmpty(customerid)) {
                    filter_names.addAll(Arrays.asList("company.companyID", "fixedAssetLeaseInvoice", "fixedAssetInvoice", "isconsignment", "customer.ID", "deleted"));
                    filter_values.addAll(Arrays.asList(companyid, false, false, false, customerid, false));
                } else {
                    filter_names.addAll(Arrays.asList("company.companyID", "fixedAssetLeaseInvoice", "fixedAssetInvoice", "isconsignment", "deleted"));
                    filter_values.addAll(Arrays.asList(companyid, false, false, false, false));
                }
                requestParams1.put(Constants.filter_names, filter_names);
                requestParams1.put(Constants.filter_values, filter_values);
                requestParams1.put(Constants.REQ_startdate, request.getParameter(Constants.REQ_startdate));
                requestParams1.put(Constants.REQ_enddate, request.getParameter(Constants.REQ_enddate));
                requestParams1.put("df", df);
                requestParams1.put("loadCustomerInvoices", true);
                resultObj = accInvoiceDAOobj.getForeignCurrencyGainAndLossData(requestParams1);
                // Customer Invoice
                list = resultObj.getEntityList();
                for (Object o : list) {
                    Invoice invoice = (Invoice) o;
                    String invid = invoice.getID();
                    HashMap requestParamsTemp = new HashMap();
                    requestParamsTemp.put(Constants.companyKey, companyid);
                    requestParamsTemp.put("invoiceid", invoice.getID());
                    requestParamsTemp.put("isReceipt", true);
                    KwlReturnObject resultReceiptDetails = accInvoiceDAOobj.getForeignCurrencyGainAndLossData(requestParamsTemp);
                    List receiptDetails = resultReceiptDetails.getEntityList();
                    for (Object o1 : receiptDetails) { //Receive Payment
                        ReceiptDetail row = (ReceiptDetail) o1;
                        if (currency == invoice.getCurrency() && currency == row.getReceipt().getCurrency()) {
                            continue;
                        }
                        List<String> idsList = new ArrayList<String>();
                        idsList.add(invid);
                        Map<String, InvoiceInfo> invoiceObjectMap = accInvoiceDAOobj.getInvoiceList(idsList);
                        Map<String, JournalEntry> invoiceJEMap = accInvoiceDAOobj.getInvoiceJEList(idsList);
                        Map<String, JournalEntryDetail> invoiceCustomerEntryMap = accInvoiceDAOobj.getInvoiceCustomerEntryList(idsList);
                        InvoiceInfo invoiceinfo = invoiceObjectMap.get(invid);
                        String currencyid = (invoiceinfo.getCurrency() == null ? currency.getCurrencyID() : invoiceinfo.getCurrency().getCurrencyID());
                        double invoiceOriginalAmount = 0;
                        Date invoiceCreationDate = null;
                        double externalCurrencyRate = 0d;
                        double rowAmount = (authHandler.round(row.getAmount(), companyid));
                        JournalEntry je = null;
                        if (invoice.isNormalInvoice() && invoiceJEMap.containsKey(invid)) {
                            je = invoiceJEMap.get(invid);
//                            invoiceCreationDate = je.getEntryDate();
                            invoiceCreationDate = invoice.getCreationDate();
                            externalCurrencyRate = je.getExternalCurrencyRate();
                        }
                        JournalEntryDetail d = null;
                        if (invoice.isNormalInvoice() && invoiceCustomerEntryMap.containsKey(invid)) {
                            d = invoiceCustomerEntryMap.get(invid);
                            invoiceOriginalAmount = d.getAmount();
                        }
                        double amountinbase = invoiceOriginalAmount;
                        boolean isopeningBalanceInvoice = invoice.isIsOpeningBalenceInvoice();
                        double currencyToBaseRate = accCurrencyDAOobj.getCurrencyToBaseRate(requestParams, currencyid, invoiceCreationDate);
                        if (isopeningBalanceInvoice && invoice.isConversionRateFromCurrencyToBase()) {// if invoice is opening balance invoice and Conversion rate is taken from user is Currency to base then following method will be called.
                            KwlReturnObject bAmt = accCurrencyDAOobj.getCurrencyToBaseAmountAccordingToCurrencyToBaseExchangeRate(requestParams, invoiceOriginalAmount, currencyid, invoiceCreationDate, externalCurrencyRate);
                            amountinbase = (Double) bAmt.getEntityList().get(0);
                        } else if (invoiceOriginalAmount != 0) {
                            if (externalCurrencyRate != 0) {
                                amountinbase = invoiceOriginalAmount / externalCurrencyRate;
                            } else if (currencyToBaseRate != 0) {
                                amountinbase = invoiceOriginalAmount / currencyToBaseRate;
                            }
                        }
                        double paymentExchangeRate = row.getExchangeRateForTransaction();
                        if (invoice.getCurrency() == currency) {
                            Map<String, Object> temp = new HashMap<String, Object>();
                            temp.put("fromcurrencyid", invoice.getCurrency().getCurrencyID());
                            temp.put("tocurrencyid", row.getReceipt().getCurrency().getCurrencyID());
                            KwlReturnObject resultExchangeRates = accCurrencyDAOobj.getCurrencyExchange(temp);
                            List<ExchangeRate> exchangeRates = resultExchangeRates.getEntityList();
                            if (exchangeRates != null && !exchangeRates.isEmpty()) {
                                for (ExchangeRate ER : exchangeRates) {
                                    String erID = ER.getID();
                                    KwlReturnObject erdresult = accCurrencyDAOobj.getExcDetailID(requestParams, null, invoiceCreationDate, erID);
                                    ExchangeRateDetails erd = (ExchangeRateDetails) erdresult.getEntityList().get(0);
                                    if (erd != null) {
                                        externalCurrencyRate = erd.getExchangeRate();
//                                        paymentExchangeRate = paymentExchangeRate / externalCurrencyRate;
                                    }
                                }
                            }
                        } else {
                            externalCurrencyRate=1/externalCurrencyRate;
                        }
                        if (invoice.getCurrency() != currency && row.getReceipt().getCurrency() != currency) {
                            paymentExchangeRate=row.getReceipt().getJournalEntry().getExternalCurrencyRate();
                            paymentExchangeRate=1/paymentExchangeRate;
                        }
                        JSONObject temp = new JSONObject();
                        temp.put("no", row.getInvoice().getInvoiceNumber());
                        temp.put("invoicedate", invoiceCreationDate != null ? authHandler.getUserDateFormatter(request).format(invoiceCreationDate) : "");
                        temp.put("personname", invoice.getAccount().getAccountName());
                        temp.put("accid", invoice.getAccount().getID());
                        temp.put("amountinbase", authHandler.formattedAmount(amountinbase, companyid));
                        temp.put("exchangerate", authHandler.round(externalCurrencyRate, companyid));
                        temp.put("amount", authHandler.formattedAmount(invoiceOriginalAmount, companyid));
                        temp.put("invoiceCurrencyCode", invoice.getCurrency().getCurrencyCode());
                        temp.put("paymentCurrencyCode", row.getReceipt().getCurrency().getCurrencyCode());
//                        temp.put("paymentdate", row.getReceipt().getJournalEntry().getEntryDate() != null ? authHandler.getUserDateFormatter(request).format(row.getReceipt().getJournalEntry().getEntryDate()) : "");
                        temp.put("paymentdate", row.getReceipt().getCreationDate() != null ? authHandler.getUserDateFormatter(request).format(row.getReceipt().getCreationDate()) : "");
                        temp.put("paymentno", row.getReceipt().getReceiptNumber());
                        temp.put("paymentamount", authHandler.formattedAmount(rowAmount, companyid));
                        temp.put("amountdue", authHandler.formattedAmount(invoiceOriginalAmount, companyid));
                        temp.put("paymentTransactionExchangeRate", authHandler.round((paymentExchangeRate), companyid));
                        temp.put("amountdueinbase", authHandler.formattedAmount(amountinbase, companyid));
                        String reccurrencyid = (row.getReceipt().getCurrency() == null ? currency.getCurrencyID() : row.getReceipt().getCurrency().getCurrencyID());
//                        KwlReturnObject bAmt = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, rowAmount, reccurrencyid, row.getReceipt().getJournalEntry().getEntryDate(), row.getReceipt().getJournalEntry().getExternalCurrencyRate());
                        KwlReturnObject bAmt = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, rowAmount, reccurrencyid, row.getReceipt().getCreationDate(), row.getReceipt().getJournalEntry().getExternalCurrencyRate());
                        double paymentamountinbase = (Double) bAmt.getEntityList().get(0);
                        temp.put("paymentamountinbase", authHandler.formattedAmount(paymentamountinbase, companyid));
                        temp.put("differenceRate", authHandler.round(((paymentExchangeRate) - externalCurrencyRate), companyid));
//                    temp.put("differenceAmount", authHandler.formattedAmount(paymentamountinbase - amountinbase));
//                    if (row.getReceipt().getExternalCurrencyRate() == 0) {
//                        bAmt = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, 1.0d, reccurrencyid, row.getReceipt().getJournalEntry().getEntryDate(), row.getReceipt().getJournalEntry().getExternalCurrencyRate());
//                        temp.put("paymentrate", 1 / (Double) bAmt.getEntityList().get(0));
//                        temp.put("differenceRate", authHandler.round((externalCurrencyRate - (1 / (Double) bAmt.getEntityList().get(0))), 2));
//                    } else {
//                        temp.put("paymentrate", row.getReceipt().getExternalCurrencyRate());
//                        temp.put("differenceRate", authHandler.round((row.getReceipt().getExternalCurrencyRate() - externalCurrencyRate), 2));
//                    }
                        Set<JournalEntryDetail> entryset = row.getReceipt().getJournalEntry().getDetails();
                        double differenceAmount = 0.0;
                        for (JournalEntryDetail entryDetail : entryset) {
                            String accid = entryDetail.getAccount() != null ? entryDetail.getAccount().getID() : "";
                            if (forexAccount.equals(accid)) {
                                String currencyJEid = entryDetail.getJournalEntry().getCurrency() == null ? currency.getCurrencyID() : entryDetail.getJournalEntry().getCurrency().getCurrencyID();
                                bAmt = accCurrencyDAOobj.getCurrencyToBaseAmountRoundOff(requestParams, entryDetail.getAmount(), currencyJEid, entryDetail.getJournalEntry().getEntryDate(), entryDetail.getJournalEntry().getExternalCurrencyRate());
                                differenceAmount = (Double) bAmt.getEntityList().get(0);
                            }
                            if (accid.equals(invoice.getAccount().getID())) {
                                rowAmount = entryDetail.getAmount();
                            }
                        }
                         if (amountinbase > paymentamountinbase) {
                            differenceAmount=(-1)* differenceAmount;
                        }
                        temp.put("paymentamount", authHandler.formattedAmount(rowAmount, companyid));
//                        temp.put("differenceAmount", authHandler.formattedAmount(paymentamountinbase - amountinbase));
                        temp.put("differenceAmount", authHandler.formattedAmount(differenceAmount, companyid));
                        DataJArr.put(temp);
                    }
                    //CreditNote Against Customer Invoice
                    requestParamsTemp = new HashMap();
                    requestParamsTemp.put(Constants.companyKey, companyid);
                    requestParamsTemp.put("invoiceid", invoice.getID());
                    requestParamsTemp.put("isCreditNote", true);
                    KwlReturnObject resultCNDetails = accInvoiceDAOobj.getForeignCurrencyGainAndLossData(requestParamsTemp);
                    List CNDetails = resultCNDetails.getEntityList();
                    for (Object o1 : CNDetails) { //Receive Payment
                        CreditNoteDetail row = (CreditNoteDetail) o1;
                        if (currency == invoice.getCurrency() && currency == row.getCreditNote().getCurrency()) {
                            continue;
                        }
                        List<String> idsList = new ArrayList<String>();
                        idsList.add(invid);
                        Map<String, InvoiceInfo> invoiceObjectMap = accInvoiceDAOobj.getInvoiceList(idsList);
                        Map<String, JournalEntry> invoiceJEMap = accInvoiceDAOobj.getInvoiceJEList(idsList);
                        Map<String, JournalEntryDetail> invoiceCustomerEntryMap = accInvoiceDAOobj.getInvoiceCustomerEntryList(idsList);
                        InvoiceInfo invoiceinfo = invoiceObjectMap.get(invid);
                        String currencyid = (invoiceinfo.getCurrency() == null ? currency.getCurrencyID() : invoiceinfo.getCurrency().getCurrencyID());
                        double invoiceOriginalAmount = 0;
                        Date invoiceCreationDate = null;
                        double externalCurrencyRate = 0d;

                        JournalEntry je = null;
                        if (invoice.isNormalInvoice() && invoiceJEMap.containsKey(invid)) {
                            je = invoiceJEMap.get(invid);
//                            invoiceCreationDate = je.getEntryDate();
                            invoiceCreationDate = row.getCreditNote().getCreationDate();
                            externalCurrencyRate = je.getExternalCurrencyRate();
                        }
                        JournalEntryDetail d = null;
                        if (invoice.isNormalInvoice() && invoiceCustomerEntryMap.containsKey(invid)) {
                            d = invoiceCustomerEntryMap.get(invid);
                            invoiceOriginalAmount = d.getAmount();
                        }
                        double amountinbase = invoiceOriginalAmount;
                        boolean isopeningBalanceInvoice = invoice.isIsOpeningBalenceInvoice();
                        double currencyToBaseRate = accCurrencyDAOobj.getCurrencyToBaseRate(requestParams, currencyid, invoiceCreationDate);
                        if (isopeningBalanceInvoice && invoice.isConversionRateFromCurrencyToBase()) {// if invoice is opening balance invoice and Conversion rate is taken from user is Currency to base then following method will be called.
                            KwlReturnObject bAmt = accCurrencyDAOobj.getCurrencyToBaseAmountAccordingToCurrencyToBaseExchangeRate(requestParams, invoiceOriginalAmount, currencyid, invoiceCreationDate, externalCurrencyRate);
                            amountinbase = (Double) bAmt.getEntityList().get(0);
                        } else if (invoiceOriginalAmount != 0) {
                            if (externalCurrencyRate != 0) {
                                amountinbase = invoiceOriginalAmount / externalCurrencyRate;
                            } else if (currencyToBaseRate != 0) {
                                amountinbase = invoiceOriginalAmount / currencyToBaseRate;
                            }
                        }
                        CreditNote creditNote = (CreditNote) row.getCreditNote();
                        double paymentExchangeRate = row.getExchangeRateForTransaction();
                        if (invoice.getCurrency() == currency) {
                            Map<String, Object> temp = new HashMap<String, Object>();
                            temp.put("fromcurrencyid", invoice.getCurrency().getCurrencyID());
                            temp.put("tocurrencyid", creditNote.getCurrency().getCurrencyID());
                            KwlReturnObject resultExchangeRates = accCurrencyDAOobj.getCurrencyExchange(temp);
                            List<ExchangeRate> exchangeRates = resultExchangeRates.getEntityList();
                            if (exchangeRates != null && !exchangeRates.isEmpty()) {
                                for (ExchangeRate ER : exchangeRates) {
                                    String erID = ER.getID();
                                    KwlReturnObject erdresult = accCurrencyDAOobj.getExcDetailID(requestParams, null, invoiceCreationDate, erID);
                                    ExchangeRateDetails erd = (ExchangeRateDetails) erdresult.getEntityList().get(0);
                                    if (erd != null) {
                                        externalCurrencyRate = erd.getExchangeRate();
//                                        paymentExchangeRate = paymentExchangeRate / externalCurrencyRate;
                                    }
                                }
                            }
                        }else{
                            externalCurrencyRate=1 / externalCurrencyRate;
                        }
                        JournalEntry jeDetails = creditNote.getJournalEntry();
                        if (invoice.getCurrency() != currency && creditNote.getCurrency() != currency) {
                            paymentExchangeRate = jeDetails.getExternalCurrencyRate();
                            paymentExchangeRate = 1 / paymentExchangeRate;
                        }
                        JSONObject temp = new JSONObject();
                        temp.put("no", row.getInvoice().getInvoiceNumber());
                        temp.put("invoicedate", invoiceCreationDate != null ? authHandler.getUserDateFormatter(request).format(invoiceCreationDate) : "");
                        temp.put("personname", invoice.getAccount().getAccountName());
                        temp.put("accid", invoice.getAccount().getID());
                        temp.put("amountinbase", authHandler.formattedAmount(amountinbase, companyid));
                        temp.put("exchangerate", authHandler.round(externalCurrencyRate, companyid));
                        temp.put("amount", authHandler.formattedAmount(invoiceOriginalAmount, companyid));
                        temp.put("invoiceCurrencyCode", invoice.getCurrency().getCurrencyCode());
                        temp.put("paymentCurrencyCode", row.getCreditNote().getCurrency().getCurrencyCode());
//                        temp.put("paymentdate", jeDetails.getEntryDate() != null ? authHandler.getUserDateFormatter(request).format(jeDetails.getEntryDate()) : "");
                        temp.put("paymentdate", creditNote.getCreationDate() != null ? authHandler.getUserDateFormatter(request).format(creditNote.getCreationDate()) : "");
                        temp.put("paymentno", creditNote.getCreditNoteNumber());
//                    temp.put("paymentTransactionExchangeRate", jeDetails.getExternalCurrencyRate());
                        temp.put("amountdue", authHandler.formattedAmount(invoiceOriginalAmount, companyid));
                        temp.put("paymentTransactionExchangeRate", authHandler.round(paymentExchangeRate, companyid));
                        temp.put("paymentamount", authHandler.formattedAmount(creditNote.getCnamount(), companyid));
//                        KwlReturnObject baseAmt = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, creditNote.getCnamount(), creditNote.getCurrency().getCurrencyID(), jeDetails.getEntryDate(), jeDetails.getExternalCurrencyRate());
                        KwlReturnObject baseAmt = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, creditNote.getCnamount(), creditNote.getCurrency().getCurrencyID(), creditNote.getCreationDate(), jeDetails.getExternalCurrencyRate());
                        double paymentAmountInBase = (Double) baseAmt.getEntityList().get(0);
                        temp.put("paymentamountinbase", authHandler.formattedAmount(paymentAmountInBase, companyid));
//                        temp.put("differenceAmount", authHandler.formattedAmount(paymentAmountInBase - amountinbase));
                        temp.put("differenceRate", authHandler.round((paymentExchangeRate - externalCurrencyRate), companyid));

                        JournalEntry foreignExchangeJE = null;
                        if (!StringUtil.isNullOrEmpty(row.getLinkedGainLossJE())) {
                            Map<String, Object> tempJE = new HashMap<String, Object>();
                            tempJE.put("jeid", row.getLinkedGainLossJE());
                            foreignExchangeJE = accJournalEntryobj.getJournalEntry(tempJE);
                        }
                        Set<JournalEntryDetail> entryset = null;
                        if (foreignExchangeJE != null) {
                            entryset = foreignExchangeJE.getDetails();
                        }
                        double differenceAmount = 0.0, amt = 0.0;
                        for (JournalEntryDetail entryDetail : entryset) {
                            String accid = entryDetail.getAccount() != null ? entryDetail.getAccount().getID() : "";
                            if (forexAccount.equals(accid)) {
                                String currencyJEid = entryDetail.getJournalEntry().getCurrency() == null ? currency.getCurrencyID() : entryDetail.getJournalEntry().getCurrency().getCurrencyID();
                                KwlReturnObject bAmt = accCurrencyDAOobj.getCurrencyToBaseAmountRoundOff(requestParams, entryDetail.getAmount(), currencyJEid, entryDetail.getJournalEntry().getEntryDate(), entryDetail.getJournalEntry().getExternalCurrencyRate());
                                differenceAmount = (Double) bAmt.getEntityList().get(0);
                            }
                            if (accid.equals(invoice.getAccount().getID())) {
                                amt = entryDetail.getAmount();
                            }
                        }
                        if (amountinbase > paymentAmountInBase) {
                            differenceAmount = (-1) * differenceAmount;
                        }
//                    temp.put("paymentamount", authHandler.formattedAmount(amt));
                        temp.put("differenceAmount", authHandler.formattedAmount(differenceAmount, companyid));
                        DataJArr.put(temp);
                    }
                }
            }
            //Vendor Invoice
            if (optionSelected == 2 || optionSelected == 1) {
                filter_names.clear();
                filter_values.clear();
                requestParams1.clear();
                if (optionSelected == 1 && !StringUtil.isNullOrEmpty(vendorid)) {
                    filter_names.addAll(Arrays.asList("company.companyID", "fixedAssetInvoice", "isconsignment", "vendor.ID", "deleted"));
                    filter_values.addAll(Arrays.asList(companyid, false,  false, vendorid, false));
                } else {
                    filter_names.addAll(Arrays.asList("company.companyID", "fixedAssetInvoice", "isconsignment", "deleted"));
                    filter_values.addAll(Arrays.asList(companyid, false, false, false));
                }
                requestParams1.put(Constants.filter_names, filter_names);
                requestParams1.put(Constants.filter_values, filter_values);
                requestParams1.put(Constants.REQ_startdate, request.getParameter(Constants.REQ_startdate));
                requestParams1.put(Constants.REQ_enddate, request.getParameter(Constants.REQ_enddate));
                requestParams1.put("df", df);
                requestParams1.put("loadVendorInvoices", true);
                resultObj = accInvoiceDAOobj.getForeignCurrencyGainAndLossData(requestParams1);
                list = resultObj.getEntityList();
                for (Object o : list) {
                    GoodsReceipt goodsreceipt = (GoodsReceipt) o;
                    String invid = goodsreceipt.getID();
                    HashMap requestParamsTemp = new HashMap();
                    requestParamsTemp.put(Constants.companyKey, companyid);
                    requestParamsTemp.put("goodsReceiptID", invid);
                    requestParamsTemp.put("isPayment", true);
                    KwlReturnObject resultReceiptDetails = accInvoiceDAOobj.getForeignCurrencyGainAndLossData(requestParamsTemp);
                    List receiptDetails = resultReceiptDetails.getEntityList();
                    for (Object o1 : receiptDetails) {
                        PaymentDetail row = (PaymentDetail) o1;
                        if (currency == goodsreceipt.getCurrency() && currency == row.getPayment().getCurrency()) {
                            continue;
                        }
                        Date grCreationDate = null;
                        double rowAmount = (authHandler.round(row.getAmount(), companyid));
                        double invoiceOriginalAmount = 0, externalCurrencyRate = 0d;
                        boolean isopeningBalanceInvoice = goodsreceipt.isIsOpeningBalenceInvoice();
                        String currencyid = (goodsreceipt.getCurrency() == null ? currency.getCurrencyID() : goodsreceipt.getCurrency().getCurrencyID());
                        JournalEntry je = null;
                        JournalEntryDetail d = null;
                        if (goodsreceipt.isNormalInvoice()) {
                            je = goodsreceipt.getJournalEntry();
                            d = goodsreceipt.getVendorEntry();
                        }
                        grCreationDate = goodsreceipt.getCreationDate();
                        if (isopeningBalanceInvoice && !goodsreceipt.isNormalInvoice()) {
                            externalCurrencyRate = goodsreceipt.getExchangeRateForOpeningTransaction();
                            invoiceOriginalAmount = goodsreceipt.getOriginalOpeningBalanceAmount();
                        } else {
                            externalCurrencyRate = je.getExternalCurrencyRate();
//                            grCreationDate = je.getEntryDate();
                            invoiceOriginalAmount = d.getAmount();
                        }
                        KwlReturnObject bAmt = null;
                        if (isopeningBalanceInvoice && goodsreceipt.isConversionRateFromCurrencyToBase()) {// if invoice is opening balance invoice and Conversion rate is taken from user is Currency to base then following method will be called.
                            bAmt = accCurrencyDAOobj.getCurrencyToBaseAmountAccordingToCurrencyToBaseExchangeRate(requestParams, invoiceOriginalAmount, currencyid, grCreationDate, externalCurrencyRate);
                        } else {
                            bAmt = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, invoiceOriginalAmount, currencyid, grCreationDate, externalCurrencyRate);
                        }
                        double amountinbase = (Double) bAmt.getEntityList().get(0);
                        double paymentExchangeRate = row.getExchangeRateForTransaction();
                        if (goodsreceipt.getCurrency() == currency) {
                            Map<String, Object> temp = new HashMap<String, Object>();
                            temp.put("fromcurrencyid", goodsreceipt.getCurrency().getCurrencyID());
                            temp.put("tocurrencyid", row.getPayment().getCurrency().getCurrencyID());
                            KwlReturnObject resultExchangeRates = accCurrencyDAOobj.getCurrencyExchange(temp);
                            List<ExchangeRate> exchangeRates = resultExchangeRates.getEntityList();
                            if (exchangeRates != null && !exchangeRates.isEmpty()) {
                                for (ExchangeRate ER : exchangeRates) {
                                    String erID = ER.getID();
                                    KwlReturnObject erdresult = accCurrencyDAOobj.getExcDetailID(requestParams, null, grCreationDate, erID);
                                    ExchangeRateDetails erd = (ExchangeRateDetails) erdresult.getEntityList().get(0);
                                    if (erd != null) {
                                        externalCurrencyRate = erd.getExchangeRate();
//                                        paymentExchangeRate = paymentExchangeRate / externalCurrencyRate;
                                    }
                                }
                            }
                        }else{
                            externalCurrencyRate=1/externalCurrencyRate;
                        }
                        if (goodsreceipt.getCurrency() != currency && row.getPayment().getCurrency() != currency) {
                            paymentExchangeRate = row.getPayment().getJournalEntry().getExternalCurrencyRate();
                            paymentExchangeRate = 1 / paymentExchangeRate;
                        }
                        JSONObject temp = new JSONObject();
                        temp.put("no", goodsreceipt.getGoodsReceiptNumber());
                        temp.put("invoicedate", grCreationDate != null ? authHandler.getUserDateFormatter(request).format(grCreationDate) : "");
                        temp.put("personname", goodsreceipt.getAccount().getAccountName());
                        temp.put("accid", goodsreceipt.getAccount().getID());
                        temp.put("exchangerate", authHandler.round(externalCurrencyRate, companyid));
                        temp.put("amountinbase", authHandler.formattedAmount(amountinbase, companyid));
                        temp.put("invoiceCurrencyCode", goodsreceipt.getCurrency().getCurrencyCode());
                        temp.put("amount", authHandler.formattedAmount(invoiceOriginalAmount, companyid));
                        temp.put("paymentCurrencyCode", row.getPayment().getCurrency().getCurrencyCode());
//                        temp.put("paymentdate", row.getPayment().getJournalEntry().getEntryDate() != null ? authHandler.getUserDateFormatter(request).format(row.getPayment().getJournalEntry().getEntryDate()) : "");
                        temp.put("paymentdate", row.getPayment().getCreationDate() != null ? authHandler.getUserDateFormatter(request).format(row.getPayment().getCreationDate()) : "");
                        temp.put("paymentno", row.getPayment().getPaymentNumber());
                        temp.put("paymentamount", authHandler.formattedAmount(rowAmount, companyid));
                        temp.put("amountdue", authHandler.formattedAmount(invoiceOriginalAmount, companyid));
                        String paycurrencyid = (row.getPayment().getCurrency() == null ? currency.getCurrencyID() : row.getPayment().getCurrency().getCurrencyID());
//                        bAmt = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, rowAmount, paycurrencyid, row.getPayment().getJournalEntry().getEntryDate(), row.getPayment().getJournalEntry().getExternalCurrencyRate());
                        bAmt = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, rowAmount, paycurrencyid, row.getPayment().getCreationDate(), row.getPayment().getJournalEntry().getExternalCurrencyRate());
                        double paymentamountinbase = (Double) bAmt.getEntityList().get(0);
                        temp.put("paymentamountinbase", authHandler.formattedAmount(paymentamountinbase, companyid));
                        temp.put("paymentTransactionExchangeRate", authHandler.round(paymentExchangeRate, companyid));
                        temp.put("differenceRate", authHandler.round((externalCurrencyRate - paymentExchangeRate), companyid));
//                    temp.put("differenceAmount", authHandler.formattedAmount(amountinbase - paymentamountinbase));
//                    if (row.getPayment().getExternalCurrencyRate() == 0) {
//                        bAmt = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, 1.0d, row.getPayment().getCurrency().getCurrencyID(), row.getPayment().getJournalEntry().getEntryDate(), row.getPayment().getJournalEntry().getExternalCurrencyRate());
//                        temp.put("paymentrate", 1 / (Double) bAmt.getEntityList().get(0));
//                        temp.put("differenceRate", authHandler.formattedAmount((externalCurrencyRate - (1 / (Double) bAmt.getEntityList().get(0)))));
//                    } else {
//                        temp.put("paymentrate", row.getPayment().getExternalCurrencyRate());
//                        temp.put("differenceRate", authHandler.round((externalCurrencyRate - row.getPayment().getExternalCurrencyRate()), 2));
//                    }
                        Set<JournalEntryDetail> entryset = row.getPayment().getJournalEntry().getDetails();
                        double differenceAmount = 0.0, amt = 0.0;
                        for (JournalEntryDetail entryDetail : entryset) {
                            String accid = entryDetail.getAccount() != null ? entryDetail.getAccount().getID() : "";
                            if (forexAccount.equals(accid)) {
                                String currencyJEid = entryDetail.getJournalEntry().getCurrency() == null ? currency.getCurrencyID() : entryDetail.getJournalEntry().getCurrency().getCurrencyID();
                                bAmt = accCurrencyDAOobj.getCurrencyToBaseAmountRoundOff(requestParams, entryDetail.getAmount(), currencyJEid, entryDetail.getJournalEntry().getEntryDate(), entryDetail.getJournalEntry().getExternalCurrencyRate());
                                differenceAmount = (Double) bAmt.getEntityList().get(0);
                            }
                            if (accid.equals(goodsreceipt.getAccount().getID())) {
                                amt = entryDetail.getAmount();
                            }
                        }
                        if (amountinbase < paymentamountinbase) {
                            differenceAmount = (-1) * differenceAmount;
                        }
//                        temp.put("paymentamount", authHandler.formattedAmount(amt));
                        temp.put("differenceAmount", authHandler.formattedAmount(differenceAmount, companyid));
//                        temp.put("differenceAmount", authHandler.formattedAmount(differenceAmount));differenceAmount += entryDetail.getAmount();
                        DataJArr.put(temp);
                    }
                    //Debit Note Against Vendor Invoice
                    requestParamsTemp = new HashMap();
                    requestParamsTemp.put(Constants.companyKey, companyid);
                    requestParamsTemp.put("goodsReceiptID", invid);
                    requestParamsTemp.put("isDebitNote", true);
                    KwlReturnObject resultDNDetails = accInvoiceDAOobj.getForeignCurrencyGainAndLossData(requestParamsTemp);
                    List DNDetails = resultDNDetails.getEntityList();
                    for (Object o1 : DNDetails) {
                        DebitNoteDetail row = (DebitNoteDetail) o1;
                        if (currency == goodsreceipt.getCurrency() && currency == row.getDebitNote().getCurrency()) {
                            continue;
                        }
                        Date grCreationDate = null;
                        double invoiceOriginalAmount = 0, externalCurrencyRate = 0d;
                        boolean isopeningBalanceInvoice = goodsreceipt.isIsOpeningBalenceInvoice();
                        String currencyid = (goodsreceipt.getCurrency() == null ? currency.getCurrencyID() : goodsreceipt.getCurrency().getCurrencyID());
                        JournalEntry je = null;
                        JournalEntryDetail d = null;
                        if (goodsreceipt.isNormalInvoice()) {
                            je = goodsreceipt.getJournalEntry();
                            d = goodsreceipt.getVendorEntry();
                        }
                        grCreationDate = goodsreceipt.getCreationDate();
                        if (isopeningBalanceInvoice && !goodsreceipt.isNormalInvoice()) {
                            externalCurrencyRate = goodsreceipt.getExchangeRateForOpeningTransaction();
                            invoiceOriginalAmount = goodsreceipt.getOriginalOpeningBalanceAmount();
                        } else {
                            externalCurrencyRate = je.getExternalCurrencyRate();
//                            grCreationDate = je.getEntryDate();
                            invoiceOriginalAmount = d.getAmount();
                        }
                        DebitNote debitNote = (DebitNote) row.getDebitNote();
                        JournalEntry jeDetails = debitNote.getJournalEntry();
                        double paymentExchangeRate = row.getExchangeRateForTransaction();
                        KwlReturnObject bAmt = null;
                        if (isopeningBalanceInvoice && goodsreceipt.isConversionRateFromCurrencyToBase()) {// if invoice is opening balance invoice and Conversion rate is taken from user is Currency to base then following method will be called.
                            bAmt = accCurrencyDAOobj.getCurrencyToBaseAmountAccordingToCurrencyToBaseExchangeRate(requestParams, invoiceOriginalAmount, currencyid, grCreationDate, externalCurrencyRate);
                        } else {
                            bAmt = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, invoiceOriginalAmount, currencyid, grCreationDate, externalCurrencyRate);
                        }
                        double amountinbase = (Double) bAmt.getEntityList().get(0);
                        if (goodsreceipt.getCurrency() == currency) {
                            Map<String, Object> temp = new HashMap<String, Object>();
                            temp.put("fromcurrencyid", goodsreceipt.getCurrency().getCurrencyID());
                            temp.put("tocurrencyid", debitNote.getCurrency().getCurrencyID());
                            KwlReturnObject resultExchangeRates = accCurrencyDAOobj.getCurrencyExchange(temp);
                            List<ExchangeRate> exchangeRates = resultExchangeRates.getEntityList();
                            if (exchangeRates != null && !exchangeRates.isEmpty()) {
                                for (ExchangeRate ER : exchangeRates) {
                                    String erID = ER.getID();
                                    KwlReturnObject erdresult = accCurrencyDAOobj.getExcDetailID(requestParams, null, grCreationDate, erID);
                                    ExchangeRateDetails erd = (ExchangeRateDetails) erdresult.getEntityList().get(0);
                                    if (erd != null) {
                                        externalCurrencyRate = erd.getExchangeRate();
//                                        paymentExchangeRate = paymentExchangeRate / externalCurrencyRate;
                                    }
                                }
                            }
                        }else{
                            externalCurrencyRate=1/externalCurrencyRate;
                        }
                        if (goodsreceipt.getCurrency() != currency && debitNote.getCurrency() != currency) {
                            paymentExchangeRate = jeDetails.getExternalCurrencyRate();
                            paymentExchangeRate = 1 / paymentExchangeRate;
                        }
                        JSONObject temp = new JSONObject();
                        temp.put("no", goodsreceipt.getGoodsReceiptNumber());
                        temp.put("invoicedate", grCreationDate != null ? authHandler.getUserDateFormatter(request).format(grCreationDate) : "");
                        temp.put("personname", goodsreceipt.getAccount().getAccountName());
                        temp.put("accid", goodsreceipt.getAccount().getID());
                        temp.put("exchangerate", authHandler.round(externalCurrencyRate, companyid));
                        temp.put("amountinbase", authHandler.formattedAmount(amountinbase, companyid));
                        temp.put("amount", authHandler.formattedAmount(invoiceOriginalAmount, companyid));
                        temp.put("invoiceCurrencyCode", goodsreceipt.getCurrency().getCurrencyCode());
                        temp.put("paymentCurrencyCode", row.getDebitNote().getCurrency().getCurrencyCode());
                        temp.put("amountdue", authHandler.formattedAmount(invoiceOriginalAmount, companyid));
//                        temp.put("paymentdate", jeDetails.getEntryDate() != null ? authHandler.getUserDateFormatter(request).format(jeDetails.getEntryDate()) : "");
                        temp.put("paymentdate", debitNote.getCreationDate() != null ? authHandler.getUserDateFormatter(request).format(debitNote.getCreationDate()) : "");
                        temp.put("paymentno", debitNote.getDebitNoteNumber());
//                    temp.put("paymentTransactionExchangeRate", jeDetails.getExternalCurrencyRate());
                        temp.put("paymentTransactionExchangeRate", authHandler.round(paymentExchangeRate, companyid));
                        temp.put("paymentamount", authHandler.formattedAmount(debitNote.getDnamount(), companyid));
//                        KwlReturnObject baseAmt = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, debitNote.getDnamount(), debitNote.getCurrency().getCurrencyID(), jeDetails.getEntryDate(), jeDetails.getExternalCurrencyRate());
                        KwlReturnObject baseAmt = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, debitNote.getDnamount(), debitNote.getCurrency().getCurrencyID(), debitNote.getCreationDate(), jeDetails.getExternalCurrencyRate());
                        double paymentAmountInBase = (Double) baseAmt.getEntityList().get(0);
                        temp.put("paymentamountinbase", authHandler.formattedAmount(paymentAmountInBase, companyid));
//                    temp.put("differenceAmount", authHandler.formattedAmount(amountinbase-paymentAmountInBase));
                        temp.put("differenceRate", authHandler.round((externalCurrencyRate - paymentExchangeRate), companyid));
                        JournalEntry foreignExchangeJE = null;
                        if (!StringUtil.isNullOrEmpty(row.getLinkedGainLossJE())) {
                            Map<String, Object> tempJE = new HashMap<String, Object>();
                            tempJE.put("jeid", row.getLinkedGainLossJE());
                            foreignExchangeJE = accJournalEntryobj.getJournalEntry(tempJE);
                        }
                        Set<JournalEntryDetail> entryset = null;
                        if (foreignExchangeJE != null) {
                            entryset = foreignExchangeJE.getDetails();
                        }
                        double differenceAmount = 0.0, amt = 0.0;
                        if (entryset != null && !entryset.isEmpty()) {
                            for (JournalEntryDetail entryDetail : entryset) {
                                String accid = entryDetail.getAccount() != null ? entryDetail.getAccount().getID() : "";
                                if (forexAccount.equals(accid)) {
                                    String currencyJEid = entryDetail.getJournalEntry().getCurrency() == null ? currency.getCurrencyID() : entryDetail.getJournalEntry().getCurrency().getCurrencyID();
                                    bAmt = accCurrencyDAOobj.getCurrencyToBaseAmountRoundOff(requestParams, entryDetail.getAmount(), currencyJEid, entryDetail.getJournalEntry().getEntryDate(), entryDetail.getJournalEntry().getExternalCurrencyRate());
                                    differenceAmount = (Double) bAmt.getEntityList().get(0);
                                }
                                if (accid.equals(goodsreceipt.getAccount().getID())) {
                                    amt = entryDetail.getAmount();
                                }
                            }
                        }
                        if (amountinbase < paymentAmountInBase) {
                            differenceAmount = (-1) * differenceAmount;
                        }
//                    temp.put("paymentamount", authHandler.formattedAmount(amt));
                        temp.put("differenceAmount", authHandler.formattedAmount(differenceAmount, companyid));
//                        temp.put("differenceAmount", authHandler.formattedAmount(amountinbase - paymentAmountInBase));
                        DataJArr.put(temp);
                    }
                }
            }
            // CreditNote for OtherWise/Vendor
            requestParams1.clear();
            requestParams1.put(Constants.REQ_startdate, request.getParameter(Constants.REQ_startdate));
            requestParams1.put(Constants.REQ_enddate, request.getParameter(Constants.REQ_enddate));
            requestParams1.put("df", df);
            requestParams1.put(Constants.companyKey, companyid);
            requestParams1.put("loadCNType2", true);
            requestParams1.put("optionSelected", optionSelected);
            if (optionSelected == 1 && !StringUtil.isNullOrEmpty(vendorid)) {
                requestParams1.put("vendorid", vendorid);
            } else if (optionSelected == 0 && !StringUtil.isNullOrEmpty(customerid)) {
                requestParams1.put(Constants.customerid, customerid);
            }
            resultObj = accInvoiceDAOobj.getForeignCurrencyGainAndLossData(requestParams1);
            list = resultObj.getEntityList();
            for (Object o : list) {
                CreditNote cndetails = (CreditNote) o;
                String cnID = cndetails.getID();
                HashMap requestParamsTemp = new HashMap();
                requestParamsTemp.put(Constants.companyKey, companyid);
                requestParamsTemp.put("cnID", cnID);
                requestParamsTemp.put("loadCreditNotePayment", true);
                KwlReturnObject resultCNDetails = accInvoiceDAOobj.getForeignCurrencyGainAndLossData(requestParamsTemp);
                List CNPaymentDetails = resultCNDetails.getEntityList();
                for (Object o1 : CNPaymentDetails) {
                    CreditNotePaymentDetails row = (CreditNotePaymentDetails) o1;
                    if (currency == cndetails.getCurrency() && currency == row.getPayment().getCurrency()) {
                        continue;
                    }
                    JournalEntry jeDetails = cndetails.getJournalEntry();
                    double externalCurrencyRate = jeDetails.getExternalCurrencyRate();
                    double paymentExchangeRate = row.getExchangeRateForTransaction();
                    if (cndetails.getCurrency() == currency) {
                        Map<String, Object> temp = new HashMap<String, Object>();
                        temp.put("fromcurrencyid", cndetails.getCurrency().getCurrencyID());
                        temp.put("tocurrencyid", row.getPayment().getCurrency().getCurrencyID());
                        KwlReturnObject resultExchangeRates = accCurrencyDAOobj.getCurrencyExchange(temp);
                        List<ExchangeRate> exchangeRates = resultExchangeRates.getEntityList();
                        if (exchangeRates != null && !exchangeRates.isEmpty()) {
                            for (ExchangeRate ER : exchangeRates) {
                                String erID = ER.getID();
//                                KwlReturnObject erdresult = accCurrencyDAOobj.getExcDetailID(requestParams, null, jeDetails.getEntryDate(), erID);
                                KwlReturnObject erdresult = accCurrencyDAOobj.getExcDetailID(requestParams, null, cndetails.getCreationDate(), erID);
                                ExchangeRateDetails erd = (ExchangeRateDetails) erdresult.getEntityList().get(0);
                                if (erd != null) {
                                    externalCurrencyRate = erd.getExchangeRate();
//                                    paymentExchangeRate = paymentExchangeRate / externalCurrencyRate;
                                }
                            }
                        }
                    }else{
                        externalCurrencyRate=(externalCurrencyRate != 0.0 ? (1 / externalCurrencyRate) : externalCurrencyRate);
                    }
                    if (cndetails.getCurrency() != currency && row.getPayment().getCurrency() != currency) {
                        paymentExchangeRate = row.getPayment().getJournalEntry().getExternalCurrencyRate();
                        paymentExchangeRate = 1 / paymentExchangeRate;
                    }
                    JSONObject temp = new JSONObject();
                    temp.put("no", cndetails.getCreditNoteNumber());
                    temp.put("amountinbase", authHandler.formattedAmount(row.getAmountInBaseCurrency(), companyid));
                    temp.put("invoiceCurrencyCode", cndetails.getCurrency().getCurrencyCode());
                    if (cndetails.getCntype() == 4) {
                        temp.put("personname", cndetails.getVendor().getAccount().getAccountName());
                        temp.put("accid", cndetails.getVendor().getAccount().getID());
                    } else {
                        temp.put("personname", cndetails.getCustomer().getAccount().getAccountName());
                        temp.put("accid", cndetails.getCustomer().getAccount().getID());
                    }
                    temp.put("amount", authHandler.formattedAmount(row.getAmountPaid(), companyid));
//                    temp.put("invoicedate", jeDetails.getEntryDate() != null ? authHandler.getUserDateFormatter(request).format(jeDetails.getEntryDate()) : "");
                    temp.put("invoicedate", cndetails.getCreationDate() != null ? authHandler.getUserDateFormatter(request).format(cndetails.getCreationDate()) : "");
                    temp.put("exchangerate", authHandler.round(externalCurrencyRate, companyid));
                    temp.put("paymentCurrencyCode", row.getPayment().getCurrency().getCurrencyCode());
//                    temp.put("paymentdate", row.getPayment().getJournalEntry().getEntryDate() != null ? authHandler.getUserDateFormatter(request).format(row.getPayment().getJournalEntry().getEntryDate()) : "");
                    temp.put("paymentdate", row.getPayment().getCreationDate() != null ? authHandler.getUserDateFormatter(request).format(row.getPayment().getCreationDate()) : "");
                    temp.put("paymentno", row.getPayment().getPaymentNumber());
                    double payAmount = row.getPayment().getDepositAmount();
                    temp.put("paymentamount", authHandler.formattedAmount(payAmount, companyid));
                    temp.put("amountdue", authHandler.formattedAmount(row.getAmountPaid(), companyid));
                    String paycurrencyid = (row.getPayment().getCurrency() == null ? currency.getCurrencyID() : row.getPayment().getCurrency().getCurrencyID());
//                    KwlReturnObject bAmt = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, payAmount, paycurrencyid, row.getPayment().getJournalEntry().getEntryDate(), row.getPayment().getJournalEntry().getExternalCurrencyRate());
                    KwlReturnObject bAmt = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, payAmount, paycurrencyid, row.getPayment().getCreationDate(), row.getPayment().getJournalEntry().getExternalCurrencyRate());
                    double paymentAmountinbase = (Double) bAmt.getEntityList().get(0);
                    temp.put("paymentamountinbase", authHandler.formattedAmount(paymentAmountinbase, companyid));
                    temp.put("paymentTransactionExchangeRate", authHandler.round(paymentExchangeRate, companyid));
//                    if (row.getPayment().getExternalCurrencyRate() == 0) {
//                        bAmt = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, 1.0d, row.getPayment().getCurrency().getCurrencyID(), row.getPayment().getJournalEntry().getEntryDate(), row.getPayment().getJournalEntry().getExternalCurrencyRate());
//                        temp.put("paymentTransactionExchangeRate", 1 / (Double) bAmt.getEntityList().get(0));
//                        temp.put("differenceRate", ((1 / (Double) bAmt.getEntityList().get(0))-jeDetails.getExternalCurrencyRate()));
//                    } else {
//                        temp.put("paymentTransactionExchangeRate", row.getPayment().getExternalCurrencyRate());
//                        temp.put("differenceRate",( row.getPayment().getExternalCurrencyRate()-jeDetails.getExternalCurrencyRate()));
//                    }
//                    temp.put("differenceAmount", authHandler.formattedAmount(paymentAmountinbase - row.getAmountInBaseCurrency()));
                    temp.put("differenceRate", authHandler.round((externalCurrencyRate-paymentExchangeRate), companyid));
                    Set<JournalEntryDetail> entryset = row.getPayment().getJournalEntry().getDetails();
                    double differenceAmount = 0.0;
                    for (JournalEntryDetail entryDetail : entryset) {
                        String accid = entryDetail.getAccount() != null ? entryDetail.getAccount().getID() : "";
                        if (forexAccount.equals(accid)) {
                            String currencyJEid = entryDetail.getJournalEntry().getCurrency() == null ? currency.getCurrencyID() : entryDetail.getJournalEntry().getCurrency().getCurrencyID();
                            bAmt = accCurrencyDAOobj.getCurrencyToBaseAmountRoundOff(requestParams, entryDetail.getAmount(), currencyJEid, entryDetail.getJournalEntry().getEntryDate(), entryDetail.getJournalEntry().getExternalCurrencyRate());
                            differenceAmount = (Double) bAmt.getEntityList().get(0);
                        }
                    }
                    if (row.getAmountInBaseCurrency() < paymentAmountinbase) {
                        differenceAmount = (-1) * differenceAmount;
                    }
                    temp.put("differenceAmount", authHandler.formattedAmount(differenceAmount, companyid));
//                    temp.put("differenceAmount", authHandler.formattedAmount((row.getAmountInBaseCurrency() -paymentAmountinbase )));
//                    System.out.println( cndetails.getCreditNoteNumber()+" CN "+(row.getAmountInBaseCurrency() -paymentAmountinbase )+" Amount "+differenceAmount);
                    DataJArr.put(temp);
                }
            }

            // DebitNote for OtherWise/Customer
            requestParams1.clear();
            requestParams1.put(Constants.REQ_startdate, request.getParameter(Constants.REQ_startdate));
            requestParams1.put(Constants.REQ_enddate, request.getParameter(Constants.REQ_enddate));
            requestParams1.put("df", df);
            requestParams1.put(Constants.companyKey, companyid);
            requestParams1.put("loadDNType2", true);
            requestParams1.put("optionSelected", optionSelected);
            if (optionSelected == 1 && !StringUtil.isNullOrEmpty(vendorid)) {
                requestParams1.put("vendorid", vendorid);
            } else if (optionSelected == 0 && !StringUtil.isNullOrEmpty(customerid)) {
                requestParams1.put(Constants.customerid, customerid);
            }
            resultObj = accInvoiceDAOobj.getForeignCurrencyGainAndLossData(requestParams1);
            list = resultObj.getEntityList();
            for (Object o : list) {
                DebitNote dndetails = (DebitNote) o;
                String cnID = dndetails.getID();
                HashMap requestParamsTemp = new HashMap();
                requestParamsTemp.put(Constants.companyKey, companyid);
                requestParamsTemp.put("cnID", cnID);
                requestParamsTemp.put("loadDebitNotePayment", true);
                KwlReturnObject resultDNDetails = accInvoiceDAOobj.getForeignCurrencyGainAndLossData(requestParamsTemp);
                List DNPaymentDetails = resultDNDetails.getEntityList();
                for (Object o1 : DNPaymentDetails) {
                    DebitNotePaymentDetails row = (DebitNotePaymentDetails) o1;
                    if (currency == dndetails.getCurrency() && currency == row.getReceipt().getCurrency()) {
                        continue;
                    }
                    JournalEntry jeDetails = dndetails.getJournalEntry();
                    double externalCurrencyRate = jeDetails.getExternalCurrencyRate();
                    double paymentExchangeRate = row.getExchangeRateForTransaction();
                    if (dndetails.getCurrency() == currency) {
                        Map<String, Object> temp = new HashMap<String, Object>();
                        temp.put("fromcurrencyid", dndetails.getCurrency().getCurrencyID());
                        temp.put("tocurrencyid", row.getReceipt().getCurrency().getCurrencyID());
                        KwlReturnObject resultExchangeRates = accCurrencyDAOobj.getCurrencyExchange(temp);
                        List<ExchangeRate> exchangeRates = resultExchangeRates.getEntityList();
                        if (exchangeRates != null && !exchangeRates.isEmpty()) {
                            for (ExchangeRate ER : exchangeRates) {
                                String erID = ER.getID();
//                                KwlReturnObject erdresult = accCurrencyDAOobj.getExcDetailID(requestParams, null, jeDetails.getEntryDate(), erID);
                                KwlReturnObject erdresult = accCurrencyDAOobj.getExcDetailID(requestParams, null, dndetails.getCreationDate(), erID);
                                ExchangeRateDetails erd = (ExchangeRateDetails) erdresult.getEntityList().get(0);
                                if (erd != null) {
                                    externalCurrencyRate = erd.getExchangeRate();
//                                    paymentExchangeRate = paymentExchangeRate / externalCurrencyRate;
                                }
                            }
                        }
                    }else{
                        externalCurrencyRate=(externalCurrencyRate != 0.0 ? (1 / externalCurrencyRate) : externalCurrencyRate);
                    }
                    if (dndetails.getCurrency() != currency && row.getReceipt().getCurrency() != currency) {
                        paymentExchangeRate = row.getReceipt().getJournalEntry().getExternalCurrencyRate();
                        paymentExchangeRate = 1 / paymentExchangeRate;
                    }
                    JSONObject temp = new JSONObject();
                    temp.put("no", dndetails.getDebitNoteNumber());
//                    temp.put("invoicedate", jeDetails.getEntryDate() != null ? authHandler.getUserDateFormatter(request).format(jeDetails.getEntryDate()) : "");
                    temp.put("invoicedate", dndetails.getCreationDate() != null ? authHandler.getUserDateFormatter(request).format(dndetails.getCreationDate()) : "");
                    temp.put("exchangerate", authHandler.round(externalCurrencyRate, companyid));
                    if (dndetails.getDntype() == 4) {
                        temp.put("personname", dndetails.getCustomer().getAccount().getAccountName());
                        temp.put("accid", dndetails.getCustomer().getAccount().getID());
                    } else {
                        temp.put("personname", dndetails.getVendor().getAccount().getAccountName());
                        temp.put("accid", dndetails.getVendor().getAccount().getID());
                    }
                    temp.put("amountinbase", authHandler.formattedAmount(row.getAmountInBaseCurrency(), companyid));
                    temp.put("invoiceCurrencyCode", dndetails.getCurrency().getCurrencyCode());
                    temp.put("amount", authHandler.formattedAmount(row.getAmountPaid(),companyid));
                    temp.put("paymentCurrencyCode", row.getReceipt().getCurrency().getCurrencyCode());
//                    temp.put("paymentdate", row.getReceipt().getJournalEntry().getEntryDate() != null ? authHandler.getUserDateFormatter(request).format(row.getReceipt().getJournalEntry().getEntryDate()) : "");
                    temp.put("paymentdate", row.getReceipt().getCreationDate() != null ? authHandler.getUserDateFormatter(request).format(row.getReceipt().getCreationDate()) : "");
                    temp.put("paymentno", row.getReceipt().getReceiptNumber());
                    double payAmount = row.getReceipt().getDepositAmount();
                    temp.put("paymentamount", authHandler.formattedAmount(payAmount, companyid));
                    temp.put("amountdue", authHandler.formattedAmount(row.getAmountPaid(), companyid));
                    String paycurrencyid = (row.getReceipt().getCurrency() == null ? currency.getCurrencyID() : row.getReceipt().getCurrency().getCurrencyID());
//                    KwlReturnObject bAmt = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, payAmount, paycurrencyid, row.getReceipt().getJournalEntry().getEntryDate(), row.getReceipt().getJournalEntry().getExternalCurrencyRate());
                    KwlReturnObject bAmt = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, payAmount, paycurrencyid, row.getReceipt().getCreationDate(), row.getReceipt().getJournalEntry().getExternalCurrencyRate());
                    double paymentAmountinbase = (Double) bAmt.getEntityList().get(0);
                    temp.put("paymentamountinbase", authHandler.formattedAmount(paymentAmountinbase, companyid));
                    temp.put("paymentTransactionExchangeRate", authHandler.round(paymentExchangeRate, companyid));
//                    if (row.getReceipt().getExternalCurrencyRate() == 0) {
//                        bAmt = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, 1.0d, row.getReceipt().getCurrency().getCurrencyID(), row.getReceipt().getJournalEntry().getEntryDate(), row.getReceipt().getJournalEntry().getExternalCurrencyRate());
//                        temp.put("paymentTransactionExchangeRate", 1 / (Double) bAmt.getEntityList().get(0));
//                        temp.put("differenceRate", (jeDetails.getExternalCurrencyRate()-(1 / (Double) bAmt.getEntityList().get(0))));
//                    } else {
//                        temp.put("paymentTransactionExchangeRate", row.getReceipt().getExternalCurrencyRate());
//                        temp.put("differenceRate", (jeDetails.getExternalCurrencyRate()-row.getReceipt().getExternalCurrencyRate()));
//                    }
//                    temp.put("differenceAmount", authHandler.formattedAmount(row.getAmountInBaseCurrency()-paymentAmountinbase));
                    temp.put("differenceRate", authHandler.round((paymentExchangeRate-externalCurrencyRate), companyid));
                    Set<JournalEntryDetail> entryset = row.getReceipt().getJournalEntry().getDetails();
                    double differenceAmount = 0.0;
                    for (JournalEntryDetail entryDetail : entryset) {
                        String accid = entryDetail.getAccount() != null ? entryDetail.getAccount().getID() : "";
                        if (forexAccount.equals(accid)) {
                            String currencyJEid = entryDetail.getJournalEntry().getCurrency() == null ? currency.getCurrencyID() : entryDetail.getJournalEntry().getCurrency().getCurrencyID();
                            bAmt = accCurrencyDAOobj.getCurrencyToBaseAmountRoundOff(requestParams, entryDetail.getAmount(), currencyJEid, entryDetail.getJournalEntry().getEntryDate(), entryDetail.getJournalEntry().getExternalCurrencyRate());
                            differenceAmount = (Double) bAmt.getEntityList().get(0);
                        }
                    }
                    if (row.getAmountInBaseCurrency() > paymentAmountinbase) {
                        differenceAmount = (-1) * differenceAmount;
                    }
//                    temp.put("differenceAmount", authHandler.formattedAmount((paymentAmountinbase - row.getAmountInBaseCurrency())));
                    temp.put("differenceAmount", authHandler.formattedAmount(differenceAmount, companyid));
//                    System.out.println(dndetails.getDebitNoteNumber() + " DN " + (paymentAmountinbase-row.getAmountInBaseCurrency() ) + " Amount " + differenceAmount);
                    DataJArr.put(temp);
                }
            }
            //Load Linked Receipt - Advance Payment Against Customer Invoice
            if (optionSelected == 2 || optionSelected == 0) {
                requestParams1.clear();
                requestParams1.put(Constants.REQ_startdate, request.getParameter(Constants.REQ_startdate));
                requestParams1.put(Constants.REQ_enddate, request.getParameter(Constants.REQ_enddate));
                requestParams1.put("df", df);
                requestParams1.put(Constants.companyKey, companyid);
                requestParams1.put("LinkDetailReceipt", true);
                requestParams1.put("optionSelected", optionSelected);
                if (optionSelected == 0 && !StringUtil.isNullOrEmpty(customerid)) {
                    requestParams1.put(Constants.customerid, customerid);
                }
                resultObj = accInvoiceDAOobj.getForeignCurrencyGainAndLossData(requestParams1);
                list = resultObj.getEntityList();
                for (Object o : list) {
                    LinkDetailReceipt linkedReceipt = (LinkDetailReceipt) o;
                    Invoice invoice = linkedReceipt.getInvoice();
                    Receipt receipt = linkedReceipt.getReceipt();
                    List<String> idsList = new ArrayList<String>();
                    String invid = invoice.getID();
                    idsList.add(invid);
                    Map<String, InvoiceInfo> invoiceObjectMap = accInvoiceDAOobj.getInvoiceList(idsList);
                    Map<String, JournalEntry> invoiceJEMap = accInvoiceDAOobj.getInvoiceJEList(idsList);
                    Map<String, JournalEntryDetail> invoiceCustomerEntryMap = accInvoiceDAOobj.getInvoiceCustomerEntryList(idsList);
                    InvoiceInfo invoiceinfo = invoiceObjectMap.get(invid);
                    String currencyid = (invoiceinfo.getCurrency() == null ? currency.getCurrencyID() : invoiceinfo.getCurrency().getCurrencyID());
                    double invoiceOriginalAmount = 0;
                    Date invoiceCreationDate = null;
                    double externalCurrencyRate = 0d;
                    JournalEntry je = null;
                    if (invoice.isNormalInvoice() && invoiceJEMap.containsKey(invid)) {
                        je = invoiceJEMap.get(invid);
//                        invoiceCreationDate = je.getEntryDate();
                        invoiceCreationDate = invoice.getCreationDate();
                        externalCurrencyRate = je.getExternalCurrencyRate();
                    }
                    JournalEntryDetail d = null;
                    if (invoice.isNormalInvoice() && invoiceCustomerEntryMap.containsKey(invid)) {
                        d = invoiceCustomerEntryMap.get(invid);
                        invoiceOriginalAmount = d.getAmount();
                    }
                    double amountinbase = invoiceOriginalAmount;
                    boolean isopeningBalanceInvoice = invoice.isIsOpeningBalenceInvoice();
                    double currencyToBaseRate = accCurrencyDAOobj.getCurrencyToBaseRate(requestParams, currencyid, invoiceCreationDate);
                    if (isopeningBalanceInvoice && invoice.isConversionRateFromCurrencyToBase()) {// if invoice is opening balance invoice and Conversion rate is taken from user is Currency to base then following method will be called.
                        KwlReturnObject bAmt = accCurrencyDAOobj.getCurrencyToBaseAmountAccordingToCurrencyToBaseExchangeRate(requestParams, invoiceOriginalAmount, currencyid, invoiceCreationDate, externalCurrencyRate);
                        amountinbase = (Double) bAmt.getEntityList().get(0);
                    } else if (invoiceOriginalAmount != 0) {
                        if (externalCurrencyRate != 0) {
                            amountinbase = invoiceOriginalAmount / externalCurrencyRate;
                        } else if (currencyToBaseRate != 0) {
                            amountinbase = invoiceOriginalAmount / currencyToBaseRate;
                        }
                    }
                    double paymentExchangeRate = linkedReceipt.getExchangeRateForTransaction();
                    if (invoice.getCurrency() == currency) {
                        Map<String, Object> temp = new HashMap<String, Object>();
                        temp.put("fromcurrencyid", invoice.getCurrency().getCurrencyID());
                        temp.put("tocurrencyid", receipt.getCurrency().getCurrencyID());
                        KwlReturnObject resultExchangeRates = accCurrencyDAOobj.getCurrencyExchange(temp);
                        List<ExchangeRate> exchangeRates = resultExchangeRates.getEntityList();
                        if (exchangeRates != null && !exchangeRates.isEmpty()) {
                            for (ExchangeRate ER : exchangeRates) {
                                String erID = ER.getID();
                                KwlReturnObject erdresult = accCurrencyDAOobj.getExcDetailID(requestParams, null, invoiceCreationDate, erID);
                                ExchangeRateDetails erd = (ExchangeRateDetails) erdresult.getEntityList().get(0);
                                if (erd != null) {
                                    externalCurrencyRate = erd.getExchangeRate();
//                                paymentExchangeRate=paymentExchangeRate/externalCurrencyRate;
                                }
                            }
                        }
                    } else {
                        externalCurrencyRate = 1 / externalCurrencyRate;
                    }
                    if (invoice.getCurrency() != currency && receipt.getCurrency() != currency) {
                        paymentExchangeRate =receipt.getJournalEntry().getExternalCurrencyRate();
                        paymentExchangeRate = 1 / paymentExchangeRate;
                    }
                    JSONObject temp = new JSONObject();
                    temp.put("no", invoice.getInvoiceNumber());
                    temp.put("invoicedate", invoiceCreationDate != null ? authHandler.getUserDateFormatter(request).format(invoiceCreationDate) : "");
                    temp.put("personname", invoice.getAccount().getAccountName());
                    temp.put("accid", invoice.getAccount().getID());
                    temp.put("amountinbase", authHandler.formattedAmount(amountinbase, companyid));
                    temp.put("exchangerate", authHandler.round(externalCurrencyRate, companyid));
                    temp.put("amount", authHandler.formattedAmount(invoiceOriginalAmount, companyid));
                    temp.put("invoiceCurrencyCode", invoice.getCurrency().getCurrencyCode());
                    temp.put("amountdue", authHandler.formattedAmount(invoiceOriginalAmount, companyid));
                    temp.put("paymentCurrencyCode", receipt.getCurrency().getCurrencyCode());
//                    temp.put("paymentdate", receipt.getJournalEntry()==null?"":(receipt.getJournalEntry().getEntryDate() != null ? authHandler.getUserDateFormatter(request).format(receipt.getJournalEntry().getEntryDate()) : "") );
                    temp.put("paymentdate", receipt.getCreationDate() != null ? authHandler.getUserDateFormatter(request).format(receipt.getCreationDate()) : "");
                    temp.put("paymentno", receipt.getReceiptNumber());
                    temp.put("paymentTransactionExchangeRate", authHandler.round(paymentExchangeRate, companyid));
                    String reccurrencyid = (receipt.getCurrency() == null ? currency.getCurrencyID() : receipt.getCurrency().getCurrencyID());
//                    KwlReturnObject bAmt = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, linkedReceipt.getAmount(), reccurrencyid, receipt.getJournalEntry().getEntryDate(), receipt.getJournalEntry().getExternalCurrencyRate());
                    KwlReturnObject bAmt = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, linkedReceipt.getAmount(), reccurrencyid, receipt.getCreationDate(), receipt.getJournalEntry().getExternalCurrencyRate());
                    double paymentamountinbase = (Double) bAmt.getEntityList().get(0);
                    temp.put("paymentamountinbase", authHandler.formattedAmount(paymentamountinbase, companyid));
                    temp.put("differenceRate", authHandler.round((paymentExchangeRate - externalCurrencyRate), companyid));
                    JournalEntry foreignExchangeJE = null;
                    if (!StringUtil.isNullOrEmpty(linkedReceipt.getLinkedGainLossJE())) {
                        Map<String, Object> tempJE = new HashMap<String, Object>();
                        tempJE.put("jeid", linkedReceipt.getLinkedGainLossJE());
                        foreignExchangeJE = accJournalEntryobj.getJournalEntry(tempJE);
                    }
                    Set<JournalEntryDetail> entryset = null;
                    if (foreignExchangeJE != null) {
                        entryset = foreignExchangeJE.getDetails();
                    }
                    double differenceAmount = 0.0;
                    for (JournalEntryDetail entryDetail : entryset) {
                        String accid = entryDetail.getAccount() != null ? entryDetail.getAccount().getID() : "";
                        if (forexAccount.equals(accid)) {
                            String currencyJEid = entryDetail.getJournalEntry().getCurrency() == null ? currency.getCurrencyID() : entryDetail.getJournalEntry().getCurrency().getCurrencyID();
                            bAmt = accCurrencyDAOobj.getCurrencyToBaseAmountRoundOff(requestParams, entryDetail.getAmount(), currencyJEid, entryDetail.getJournalEntry().getEntryDate(), entryDetail.getJournalEntry().getExternalCurrencyRate());
                            differenceAmount = (Double) bAmt.getEntityList().get(0);
                        }
                    }
                    if (amountinbase > paymentamountinbase) {
                        differenceAmount = (-1) * differenceAmount;
                    }
                    temp.put("paymentamount", authHandler.formattedAmount(linkedReceipt.getAmount(), companyid));
                    temp.put("differenceAmount", authHandler.formattedAmount((paymentamountinbase - amountinbase), companyid));
//                temp.put("differenceAmount", authHandler.formattedAmount(differenceAmount));
                    DataJArr.put(temp);
                }
            }

            //Load Linked Payment - Advance Payment Against Vendor Invoice
            if (optionSelected == 2 || optionSelected == 1) {
                requestParams1.clear();
                requestParams1.put(Constants.REQ_startdate, request.getParameter(Constants.REQ_startdate));
                requestParams1.put(Constants.REQ_enddate, request.getParameter(Constants.REQ_enddate));
                requestParams1.put("df", df);
                requestParams1.put(Constants.companyKey, companyid);
                requestParams1.put("LinkDetailPayment", true);
                requestParams1.put("optionSelected", optionSelected);
                if (optionSelected == 1 && !StringUtil.isNullOrEmpty(vendorid)) {
                    requestParams1.put("vendorid", vendorid);
                }
                resultObj = accInvoiceDAOobj.getForeignCurrencyGainAndLossData(requestParams1);
                list = resultObj.getEntityList();
                for (Object o : list) {
                    LinkDetailPayment linkedPayment = (LinkDetailPayment) o;
                    Payment payment = linkedPayment.getPayment();
                    GoodsReceipt goodsreceipt = linkedPayment.getGoodsReceipt();
                    Date grCreationDate = null;
                    double invoiceOriginalAmount = 0, externalCurrencyRate = 0d;
                    boolean isopeningBalanceInvoice = goodsreceipt.isIsOpeningBalenceInvoice();
                    String currencyid = (goodsreceipt.getCurrency() == null ? currency.getCurrencyID() : goodsreceipt.getCurrency().getCurrencyID());
                    JournalEntry je = null;
                    JournalEntryDetail d = null;
                    if (goodsreceipt.isNormalInvoice()) {
                        je = goodsreceipt.getJournalEntry();
                        d = goodsreceipt.getVendorEntry();
                    }
                    grCreationDate = goodsreceipt.getCreationDate();
                    if (isopeningBalanceInvoice && !goodsreceipt.isNormalInvoice()) {
                        externalCurrencyRate = goodsreceipt.getExchangeRateForOpeningTransaction();
                        invoiceOriginalAmount = goodsreceipt.getOriginalOpeningBalanceAmount();
                    } else {
                        externalCurrencyRate = je.getExternalCurrencyRate();
//                        grCreationDate = je.getEntryDate();
                        invoiceOriginalAmount = d.getAmount();
                    }
                    KwlReturnObject bAmt = null;
                    if (isopeningBalanceInvoice && goodsreceipt.isConversionRateFromCurrencyToBase()) {// if invoice is opening balance invoice and Conversion rate is taken from user is Currency to base then following method will be called.
                        bAmt = accCurrencyDAOobj.getCurrencyToBaseAmountAccordingToCurrencyToBaseExchangeRate(requestParams, invoiceOriginalAmount, currencyid, grCreationDate, externalCurrencyRate);
                    } else {
                        bAmt = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, invoiceOriginalAmount, currencyid, grCreationDate, externalCurrencyRate);
                    }
                    double amountinbase = (Double) bAmt.getEntityList().get(0);
                    if (goodsreceipt.getCurrency() == currency) {
                        Map<String, Object> temp = new HashMap<String, Object>();
                        temp.put("fromcurrencyid", goodsreceipt.getCurrency().getCurrencyID());
                        temp.put("tocurrencyid", payment.getCurrency().getCurrencyID());
                        KwlReturnObject resultExchangeRates = accCurrencyDAOobj.getCurrencyExchange(temp);
                        List<ExchangeRate> exchangeRates = resultExchangeRates.getEntityList();
                        if (exchangeRates != null && !exchangeRates.isEmpty()) {
                            for (ExchangeRate ER : exchangeRates) {
                                String erID = ER.getID();
                                KwlReturnObject erdresult = accCurrencyDAOobj.getExcDetailID(requestParams, null, grCreationDate, erID);
                                ExchangeRateDetails erd = (ExchangeRateDetails) erdresult.getEntityList().get(0);
                                if (erd != null) {
                                    externalCurrencyRate = erd.getExchangeRate();
                                }
                            }
                        }
                    }else{
                        externalCurrencyRate=1/externalCurrencyRate;
                    }
                    double paymentExchangeRate = linkedPayment.getExchangeRateForTransaction();
                    if (goodsreceipt.getCurrency() != currency && payment.getCurrency() != currency) {
                        paymentExchangeRate = payment.getJournalEntry().getExternalCurrencyRate();
                        paymentExchangeRate = 1 / paymentExchangeRate;
                    }
                    JSONObject temp = new JSONObject();
                    temp.put("no", goodsreceipt.getGoodsReceiptNumber());
                    temp.put("invoicedate", grCreationDate != null ? authHandler.getUserDateFormatter(request).format(grCreationDate) : "");
                    temp.put("personname", goodsreceipt.getAccount().getAccountName());
                    temp.put("accid", goodsreceipt.getAccount().getID());
                    temp.put("exchangerate", authHandler.round(externalCurrencyRate, companyid));
                    temp.put("amountinbase", authHandler.formattedAmount(amountinbase, companyid));
                    temp.put("invoiceCurrencyCode", goodsreceipt.getCurrency().getCurrencyCode());
                    temp.put("amount", authHandler.formattedAmount(invoiceOriginalAmount, companyid));
                    temp.put("amountdue", authHandler.formattedAmount(invoiceOriginalAmount, companyid));
                    temp.put("paymentCurrencyCode", payment.getCurrency().getCurrencyCode());
//                    temp.put("paymentdate", payment.getJournalEntry().getEntryDate() != null ? authHandler.getUserDateFormatter(request).format(payment.getJournalEntry().getEntryDate()) : "");
                    temp.put("paymentdate", payment.getCreationDate() != null ? authHandler.getUserDateFormatter(request).format(payment.getCreationDate()) : "");
                    temp.put("paymentno", payment.getPaymentNumber());
                    String paycurrencyid = (payment.getCurrency() == null ? currency.getCurrencyID() : payment.getCurrency().getCurrencyID());
//                    bAmt = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, linkedPayment.getAmount(), paycurrencyid, payment.getJournalEntry().getEntryDate(), payment.getJournalEntry().getExternalCurrencyRate());
                    bAmt = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, linkedPayment.getAmount(), paycurrencyid, payment.getCreationDate(), payment.getJournalEntry().getExternalCurrencyRate());
                    double paymentamountinbase = (Double) bAmt.getEntityList().get(0);
                    temp.put("paymentamountinbase", authHandler.formattedAmount(paymentamountinbase, companyid));
                    temp.put("paymentTransactionExchangeRate", authHandler.round(paymentExchangeRate, companyid));
                    temp.put("differenceRate", authHandler.round((externalCurrencyRate - paymentExchangeRate), companyid));
                    temp.put("paymentamount", authHandler.formattedAmount(linkedPayment.getAmount(), companyid));
                    JournalEntry foreignExchangeJE = null;
                    if (!StringUtil.isNullOrEmpty(linkedPayment.getLinkedGainLossJE())) {
                        Map<String, Object> tempJE = new HashMap<String, Object>();
                        tempJE.put("jeid", linkedPayment.getLinkedGainLossJE());
                        foreignExchangeJE = accJournalEntryobj.getJournalEntry(tempJE);
                    }
                    Set<JournalEntryDetail> entryset = null;
                    if (foreignExchangeJE != null) {
                        entryset = foreignExchangeJE.getDetails();
                    }
                    double differenceAmount = 0.0, amt = 0.0;

                    if (entryset != null && !entryset.isEmpty()) {

                        for (JournalEntryDetail entryDetail : entryset) {
                            String accid = entryDetail.getAccount() != null ? entryDetail.getAccount().getID() : "";
                            if (forexAccount.equals(accid)) {
                                String currencyJEid = entryDetail.getJournalEntry().getCurrency() == null ? currency.getCurrencyID() : entryDetail.getJournalEntry().getCurrency().getCurrencyID();
                                bAmt = accCurrencyDAOobj.getCurrencyToBaseAmountRoundOff(requestParams, entryDetail.getAmount(), currencyJEid, entryDetail.getJournalEntry().getEntryDate(), entryDetail.getJournalEntry().getExternalCurrencyRate());
                                differenceAmount = (Double) bAmt.getEntityList().get(0);
                            }
                        }
                    }
                    if (amountinbase < paymentamountinbase) {
                        differenceAmount = (-1) * differenceAmount;
                    }
                    //temp.put("differenceAmount", authHandler.formattedAmount(amountinbase - paymentamountinbase));
                    temp.put("differenceAmount", authHandler.formattedAmount(differenceAmount, companyid));
                    DataJArr.put(temp);
                }
            }
        } catch (Exception ex) {
            Logger.getLogger(accInvoiceController.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            return DataJArr;
        }
    }
    /* 
     Function to be used to unlink document(s) from/to invoice 
     TYPE=0 SI->CN
     TYPE=1 SI->ADVANCE RP
     TYPE=2 SI->RP
     TYPE=3 SI->DO
     TYPE=4 SI->SR
     TYPE=5 DO->SI
     TYPE=6 SO->SI
     TYPE=7 CQ->SI
     */
    public ModelAndView unlinkInvoiceDocuments(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        String msg = "";
        boolean isSItoRP = false;
        boolean issuccess = false;
        String linkedTransaction="";
        boolean deleteRoundingJE = false;//by unlinking of transactions if Amount due get affected then this variable bocomes true.
        boolean cnAgainstInv=false;
        boolean cashRefund=false;
        try {
            JSONArray documentArr = new JSONArray(request.getParameter(Constants.data));
            String companyid = sessionHandlerImpl.getCompanyid(request);
            boolean isAvalaraIntegration = false;
            KwlReturnObject result = accountingHandlerDAOobj.getObject(ExtraCompanyPreferences.class.getName(), companyid);
            if (result != null && result.getEntityList() != null && !result.getEntityList().isEmpty() && result.getEntityList().get(0) != null) {
                ExtraCompanyPreferences extraCompanyPreferences = (ExtraCompanyPreferences) result.getEntityList().get(0);
                isAvalaraIntegration = extraCompanyPreferences.isAvalaraIntegration();
            }
            String billid = (!StringUtil.isNullOrEmpty(request.getParameter(Constants.billid))) ? (String) request.getParameter(Constants.billid) : "";
            String doNo = "", soNo = "", cqNo = "", srNo = "", cnNo = "", advanceRP = "",rpNo="";
            if (!StringUtil.isNullOrEmpty(billid) && documentArr != null && documentArr.length() > 0) {
                result = accountingHandlerDAOobj.getObject(Invoice.class.getName(), billid);
                Invoice invoice = (Invoice) result.getEntityList().get(0);
                String invNo = invoice.getInvoiceNumber();
                HashMap<String, Object> requestParams = new HashMap<String, Object>();
                ArrayList filter_names = new ArrayList(), filter_params = new ArrayList();
                HashMap<String, Object> linkingrequestParams = new HashMap<String, Object>();

                KwlReturnObject invDetailsResult = null;
                List<InvoiceDetail> invoiceDetailList = null;
                for (int i = 0; i < documentArr.length(); i++) {
                    JSONObject document = documentArr.getJSONObject(i);
                    int type = document.optInt("type", -1);
                    String linkedTransactionID = document.optString(Constants.billid, "");
                    if (!StringUtil.isNullOrEmpty(linkedTransactionID) && type != -1) {
                        switch (type) {
                            case 0: // SI->CN
                                filter_names.clear();
                                filter_params.clear();
                                filter_names.add("creditNote.ID");
                                filter_params.add(linkedTransactionID);
                                filter_names.add("invoice.ID");
                                filter_params.add(billid);
                                requestParams.put("filter_names", filter_names);
                                requestParams.put("filter_params", filter_params);
                                invDetailsResult = accCreditNoteDAOobj.getCreditNoteDetails(requestParams);
                                List<CreditNoteDetail> cndetails = invDetailsResult.getEntityList();
                                
                                KwlReturnObject result1 = accountingHandlerDAOobj.getObject(CreditNote.class.getName(), linkedTransactionID);
                                CreditNote creditNote = (CreditNote) result1.getEntityList().get(0);
                                /* Credit Note against Invoice (Type=1)
                                 *cannot be unliked
                                 */
                                if (creditNote != null && (creditNote.getCntype() == 1 || creditNote.getCntype() == Constants.CreditNoteForOvercharge)) {
                                    linkedTransaction += "<b>" + creditNote.getCreditNoteNumber() + "</b> ,";
                                    continue;
                                }
                               
                                // check if Forex/Gain Loss JE generated. If yes then need to delete JE too
                                for (CreditNoteDetail creditNoteDetail : cndetails) {
                                    if (creditNoteDetail.getLinkedGainLossJE() != null && !creditNoteDetail.getLinkedGainLossJE().isEmpty()) {
                                        accCreditNoteService.deleteJEArray(creditNoteDetail.getLinkedGainLossJE(), companyid);
                                    }
                                }
                                if (cndetails != null && cndetails.size() > 0) {
                                    List cnnumbers = accInvoiceServiceDAO.unlinkCreditNoteFromInvoice(request, cndetails, linkedTransactionID);
                                    for (Object object : cnnumbers) {
                                        cnNo += object.toString() + ",";
                                    }
                                    deleteRoundingJE = true;
                                }
                                break;
                            case 1: // SI->Advance Receipt
                                filter_names.clear();
                                filter_params.clear();
                                filter_names.add("receipt.ID");
                                filter_params.add(linkedTransactionID);
                                filter_names.add("invoice.ID");
                                filter_params.add(billid);
                                requestParams.put("filter_names", filter_names);
                                requestParams.put("filter_params", filter_params);
                                invDetailsResult = accInvoiceDAOobj.getLinkDetailReceipts(requestParams);
                                List<LinkDetailReceipt> rpdetails = invDetailsResult.getEntityList();
                                if (rpdetails != null && rpdetails.size() > 0) {
                                    List lst = accInvoiceServiceDAO.unlinkReceiptFromInvoice(request, rpdetails, linkedTransactionID);
                                    for (Object object : lst) {
                                        advanceRP = advanceRP.concat(object.toString()).concat(",");
                                    }
                                    deleteRoundingJE = true;
                                }
                                linkingrequestParams.put("linkedTransactionID", linkedTransactionID);
                                linkingrequestParams.put(Constants.billid, billid);
                                linkingrequestParams.put("type", type);
                                linkingrequestParams.put("unlinkflag", true);
                                accInvoiceDAOobj.deleteLinkingInformationOfSI(linkingrequestParams);
                                break;
                            case 2: // SI->RP
                                result = accountingHandlerDAOobj.getObject(Receipt.class.getName(), linkedTransactionID);
                                Receipt receipt = (Receipt) result.getEntityList().get(0);
                                if(receipt!=null){
                                    rpNo+=receipt.getReceiptNumber()+",";
                                }
                                linkingrequestParams.clear();
                                linkingrequestParams.put("linkedTransactionID", linkedTransactionID);
                                linkingrequestParams.put(Constants.billid, billid);
                                linkingrequestParams.put("type", type);
                                linkingrequestParams.put("unlinkflag", true);
                                accInvoiceDAOobj.deleteLinkingInformationOfSI(linkingrequestParams);
                                break;
                            case 3: // SI->DO
                                invDetailsResult = accInvoiceDAOobj.getDODetailsFromCustomerInvoice(billid, linkedTransactionID, companyid);
                                List<DeliveryOrderDetail> dodetails = invDetailsResult.getEntityList();
                                if (dodetails != null) {
                                    for (DeliveryOrderDetail deliveryOrderDetail : dodetails) {
                                        if (deliveryOrderDetail.getCidetails() != null) {// SI linked in DO
                                            InvoiceDetail invoiceDetail = deliveryOrderDetail.getCidetails();
                                            if (doNo.indexOf(deliveryOrderDetail.getDeliveryOrder().getDeliveryOrderNumber()) == -1) {
                                                doNo += deliveryOrderDetail.getDeliveryOrder().getDeliveryOrderNumber() + ",";
                                            }
                                            /*Updating isLineItemClosed & isSOClosed to false if SI(linked with SO) is unlinked from DO i.e SO->SI->DO*/
                                            if (deliveryOrderDetail.getCidetails().getSalesorderdetail() != null) {
                                                deliveryOrderDetail.getCidetails().getSalesorderdetail().getSalesOrder().setIsSOClosed(false);
                                                deliveryOrderDetail.getCidetails().getSalesorderdetail().setIsLineItemClosed(false);
                                                
                                                /* Updating balance quantity of SO, If SI is linked with SO*/
                                                HashMap soMap = new HashMap();
                                                soMap.put("sodetails", deliveryOrderDetail.getCidetails().getSalesorderdetail().getID());
                                                soMap.put(Constants.companyKey, companyid);
                                                soMap.put("balanceqty", deliveryOrderDetail.getDeliveredQuantity());
                                                soMap.put("add", true);
                                                accCommonTablesDAO.updateSalesorderOrderStatus(soMap);
                                            }
                                            deliveryOrderDetail.setCidetails(null);
                                            invoiceDetail.getInvoice().setIsOpenDO(true);
                                        }
                                    }
                                }
                                linkingrequestParams.clear();
                                linkingrequestParams.put("linkedTransactionID", linkedTransactionID);
                                linkingrequestParams.put(Constants.billid, billid);
                                linkingrequestParams.put("type", type);
                                linkingrequestParams.put("unlinkflag", true);
                                accInvoiceDAOobj.deleteLinkingInformationOfSI(linkingrequestParams);
                                break;
                            case 4: // SI->SR
                                filter_names.clear();
                                filter_params.clear();
                                filter_names.add("salesReturn.ID");
                                filter_params.add(linkedTransactionID);
                                filter_names.add("cidetails.invoice.ID");
                                filter_params.add(billid);
                                requestParams.put("filter_names", filter_names);
                                requestParams.put("filter_params", filter_params);
                                invDetailsResult = accInvoiceDAOobj.getSalesReturnDetails(requestParams);
                                List<SalesReturnDetail> srDetailList = invDetailsResult.getEntityList();
                                for (SalesReturnDetail salesReturnDetail : srDetailList) {
                                    if (salesReturnDetail.getCidetails() != null) {
                                        InvoiceDetail invoiceDetail = salesReturnDetail.getCidetails();
                                        if (srNo.indexOf(salesReturnDetail.getSalesReturn().getSalesReturnNumber()) == -1) {
                                            srNo += salesReturnDetail.getSalesReturn().getSalesReturnNumber() + ",";
                                            if(salesReturnDetail.getSalesReturn().isIsPayment()){
                                                cashRefund=true;
                                                break;
                                            }
                                        }
                                        salesReturnDetail.setCidetails(null);
                                        invoiceDetail.getInvoice().setIsOpenSR(true);
                                    }
                                }
                                linkingrequestParams.clear();
                                linkingrequestParams.put("linkedTransactionID", linkedTransactionID);
                                linkingrequestParams.put(Constants.billid, billid);
                                linkingrequestParams.put("type", type);
                                linkingrequestParams.put("unlinkflag", true);
                                if (!cashRefund) {
                                    accInvoiceDAOobj.deleteLinkingInformationOfSI(linkingrequestParams);
                                }
                                break;
                            case 5: // DO->SI
                                /**
                                 * passing isAvalaraIntegration flag because deleted invoices are also to be unlinked in case of Avalara integration
                                 */
                                invDetailsResult = accInvoiceDAOobj.getInvoiceDetailsFromDO(billid, linkedTransactionID, companyid, isAvalaraIntegration);
                                invoiceDetailList = invDetailsResult.getEntityList();
                                if (invoiceDetailList != null && invoiceDetailList.size() > 0) {
                                    for (InvoiceDetail invoiceDetail : invoiceDetailList) {
                                        if (invoiceDetail.getDeliveryOrderDetail() != null) {
                                            DeliveryOrderDetail deliveryOrderDetail = invoiceDetail.getDeliveryOrderDetail();
                                            if (doNo.indexOf(deliveryOrderDetail.getDeliveryOrder().getDeliveryOrderNumber()) == -1) {
                                                doNo += deliveryOrderDetail.getDeliveryOrder().getDeliveryOrderNumber() + ",";
                                            }
                                            invoiceDetail.setDeliveryOrderDetail(null);
                                            deliveryOrderDetail.getDeliveryOrder().setIsOpenInSI(true);
                                        }
                                    }
                                }
                                linkingrequestParams.clear();
                                linkingrequestParams.put("linkedTransactionID", linkedTransactionID);
                                linkingrequestParams.put(Constants.billid, billid);
                                linkingrequestParams.put("type", type);
                                linkingrequestParams.put("unlinkflag", true);
                                accInvoiceDAOobj.deleteLinkingInformationOfSI(linkingrequestParams);
                                break;
                            case 6: // SO->SI
                                filter_names.clear();
                                filter_params.clear();
                                filter_names.add("invoice.ID");
                                filter_params.add(billid);
                                filter_names.add("salesorderdetail.salesOrder.ID");
                                filter_params.add(linkedTransactionID);
                                requestParams.put("filter_names", filter_names);
                                requestParams.put("filter_params", filter_params);
                                invDetailsResult = accInvoiceDAOobj.getInvoiceDetails(requestParams);
                                invoiceDetailList = invDetailsResult.getEntityList();
                                if (invoiceDetailList != null && invoiceDetailList.size() > 0) {
                                    for (InvoiceDetail invoiceDetail : invoiceDetailList) {
                                        if (invoiceDetail.getSalesorderdetail() != null) {
                                            SalesOrderDetail salesOrderDetail = invoiceDetail.getSalesorderdetail();
                                            if (soNo.indexOf(salesOrderDetail.getSalesOrder().getSalesOrderNumber()) == -1) {
                                                soNo += salesOrderDetail.getSalesOrder().getSalesOrderNumber() + ",";
                                            }
                                             /*Updating isLineItemClosed & isSOClosed flag to false if SI linked with SO is linked with DO is unlinked from SO */
                                            KwlReturnObject doresult = accSalesOrderDAOobj.checkWhetherSOIsUsedInDOOrNot(salesOrderDetail.getID(), companyid);
                                            List list1 = doresult.getEntityList();
                                            if (list1.size() > 0) {
                                                invoiceDetail.getSalesorderdetail().getSalesOrder().setIsSOClosed(false);
                                                invoiceDetail.getSalesorderdetail().setIsLineItemClosed(false);
                                               
                                                /*Updating balance quantity of SO, if SI is linked with SO and SI is linked with DO */
                                                String doDetailId = (String) doresult.getEntityList().get(0);
                                                result = accountingHandlerDAOobj.getObject(DeliveryOrderDetail.class.getName(), doDetailId);
                                                DeliveryOrderDetail deliveryOrderDetail = (DeliveryOrderDetail) result.getEntityList().get(0);

                                                HashMap soMap = new HashMap();
                                                soMap.put("sodetails", salesOrderDetail.getID());
                                                soMap.put(Constants.companyKey, companyid);
                                                soMap.put("balanceqty", deliveryOrderDetail.getDeliveredQuantity());
                                                soMap.put("add", true);
                                                accCommonTablesDAO.updateSalesorderOrderStatus(soMap);
                                            }
                                            invoiceDetail.setSalesorderdetail(null);
                                            salesOrderDetail.getSalesOrder().setLinkflag(0);
                                            salesOrderDetail.getSalesOrder().setIsopen(true);
                                        }
                                    }
                                }
                                linkingrequestParams.clear();
                                linkingrequestParams.put("linkedTransactionID", linkedTransactionID);
                                linkingrequestParams.put(Constants.billid, billid);
                                linkingrequestParams.put("type", type);
                                linkingrequestParams.put("unlinkflag", true);
                                accInvoiceDAOobj.deleteLinkingInformationOfSI(linkingrequestParams);
                                break;
                            case 7: // CQ->SI
                                filter_names.clear();
                                filter_params.clear();
                                filter_names.add("invoice.ID");
                                filter_params.add(billid);
                                filter_names.add("quotationDetail.quotation.ID");
                                filter_params.add(linkedTransactionID);
                                requestParams.put("filter_names", filter_names);
                                requestParams.put("filter_params", filter_params);
                                invDetailsResult = accInvoiceDAOobj.getInvoiceDetails(requestParams);
                                invoiceDetailList = invDetailsResult.getEntityList();
                                if (invoiceDetailList != null && invoiceDetailList.size() > 0) {
                                    for (InvoiceDetail invoiceDetail : invoiceDetailList) {
                                        if (invoiceDetail.getQuotationDetail() != null) {
                                            QuotationDetail quotationDetail = invoiceDetail.getQuotationDetail();
                                            if (cqNo.indexOf(quotationDetail.getQuotation().getQuotationNumber()) == -1) {
                                                cqNo += quotationDetail.getQuotation().getQuotationNumber() + ",";
                                            }
                                            invoiceDetail.setQuotationDetail(null);
                                            quotationDetail.getQuotation().setLinkflag(0);
                                            quotationDetail.getQuotation().setIsopen(true);
                                        }
                                    }
                                }
                                linkingrequestParams.clear();
                                linkingrequestParams.put("linkedTransactionID", linkedTransactionID);
                                linkingrequestParams.put(Constants.billid, billid);
                                linkingrequestParams.put("type", type);
                                linkingrequestParams.put("unlinkflag", true);
                                accInvoiceDAOobj.deleteLinkingInformationOfSI(linkingrequestParams);
                                break;
                            case 8: // SI->DN
                                cnAgainstInv=true;
                                filter_names.clear();
                                filter_params.clear();
                                filter_names.add("debitNote.ID");
                                filter_params.add(linkedTransactionID);
                                filter_names.add("cidetails.ID");
                                filter_params.add(billid);
                                requestParams.put("filter_names", filter_names);
                                requestParams.put("filter_params", filter_params);

                                invDetailsResult = accDebitNoteobj.getDebitNoteDetailsGst(requestParams);
                                List<CreditNoteAgainstVendorGst> dndetails = invDetailsResult.getEntityList();
                                result1 = accountingHandlerDAOobj.getObject(DebitNote.class.getName(), linkedTransactionID);
                                DebitNote debitNote = (DebitNote) result1.getEntityList().get(0);
                                /*
                                 * Credit Note against Purchase Invoice cannot
                                 * be unliked
                                 */
                                if (debitNote != null && debitNote.getDntype() == 5) {
                                    linkedTransaction += "<b>" + debitNote.getDebitNoteNumber() + "</b> ,";
                                    continue;
                                }
                                 break;   
                        }
                    }
                }

                String roundingJENo = "";
                String roundingIDs = "";
                if (deleteRoundingJE) {
                    KwlReturnObject jeResult = accJournalEntryobj.getRoundingJournalEntryByGRIds(billid, companyid);
                    List<JournalEntry> jeList = jeResult.getEntityList();
                    if (!jeList.isEmpty() && jeList.get(0) != null) {
                        JournalEntry roundingJE = jeList.get(0);
                        roundingJENo = roundingJE.getEntryNumber();
                        roundingIDs = roundingJE.getID();
                        KwlReturnObject jedResult = accJournalEntryobj.getJournalEntryDetail(roundingJE.getID(), companyid);
                        List<JournalEntryDetail> jedList = jedResult.getEntityList();
                        for (JournalEntryDetail jed : jedList) {
                            accJournalEntryobj.deleteJournalEntryDetailRow(jed.getID(), companyid);
                        }
                        accJournalEntryobj.permanentDeleteJournalEntry(roundingJE.getID(), companyid);
                    }
                }
                if (!StringUtil.isNullOrEmpty(soNo) && !StringUtil.isNullOrEmpty(invNo)) {
                    msg += messageSource.getMessage("acc.field.salesOrder(s)", null, RequestContextUtils.getLocale(request)) + " " + soNo.substring(0, soNo.length() - 1) + " " + messageSource.getMessage("acc.field.hasBeenUnlinkedFromSelected", null, RequestContextUtils.getLocale(request)) + " " + messageSource.getMessage("acc.field.CustomerInvoice", null, RequestContextUtils.getLocale(request)) + " " + invNo + ".";
                    issuccess = true;
                    msg+="<br>";
                    auditTrailObj.insertAuditLog(AuditAction.UNLINK_SO_FROM_SI, "User " + sessionHandlerImpl.getUserFullName(request) + " has unlink " + "Sales Invoice " + invNo + " from the Sales Order(s) " + soNo.substring(0, soNo.length() - 1) + ".", request, invNo);
                }
                if (!StringUtil.isNullOrEmpty(invNo) && !StringUtil.isNullOrEmpty(doNo)) {
                    msg += messageSource.getMessage("acc.field.deliveryOrder(s)", null, RequestContextUtils.getLocale(request)) + " " + doNo.substring(0, doNo.length() - 1) + " " + messageSource.getMessage("acc.field.hasBeenUnlinkedFromSelected", null, RequestContextUtils.getLocale(request)) + " " + messageSource.getMessage("acc.field.CustomerInvoice", null, RequestContextUtils.getLocale(request)) + " " + invNo + ".";
                    issuccess = true;
                    msg += "<br>";
                    auditTrailObj.insertAuditLog(AuditAction.UNLINK_DO_FROM_SI, "User " + sessionHandlerImpl.getUserFullName(request) + " has unlink " + "Sales Invoice " + invNo + " from the Delivery Order(s) " + doNo.substring(0, doNo.length() - 1) + ".", request, invNo);
                }
                if (!StringUtil.isNullOrEmpty(invNo) && !StringUtil.isNullOrEmpty(cqNo)) {
                    msg += messageSource.getMessage("acc.field.CustomerQuotation(s)", null, RequestContextUtils.getLocale(request)) + " " + cqNo.substring(0, cqNo.length() - 1) + " " + messageSource.getMessage("acc.field.hasBeenUnlinkedFromSelected", null, RequestContextUtils.getLocale(request)) + " " + messageSource.getMessage("acc.field.CustomerInvoice", null, RequestContextUtils.getLocale(request)) + " " + invNo + ".";
                    issuccess = true;
                    msg += "<br>";
                    auditTrailObj.insertAuditLog(AuditAction.UNLINK_CQ_FROM_SI, "User " + sessionHandlerImpl.getUserFullName(request) + " has unlink " + "Sales Invoice " + invNo + " from the Customer Quotation(s) " + cqNo.substring(0, cqNo.length() - 1) + ".", request, invNo);
                }
                if (!StringUtil.isNullOrEmpty(invNo) &&  (!StringUtil.isNullOrEmpty(cnNo) || !StringUtil.isNullOrEmpty(linkedTransaction))) {

                if (cnAgainstInv) {
                    msg += messageSource.getMessage("acc.field.debitnote(s).Except", null, RequestContextUtils.getLocale(request)) + " " + linkedTransaction.substring(0, linkedTransaction.length() - 1) + " " + messageSource.getMessage("acc.field.hasBeenUnlinkedFromSelected", null, RequestContextUtils.getLocale(request)) + " " + messageSource.getMessage("acc.pi.PurchaseInvoice", null, RequestContextUtils.getLocale(request)) + " " + invNo + ".";
                    issuccess = true;
                    msg += "<br>";
                }else if (StringUtil.isNullOrEmpty(linkedTransaction)) {
                        msg += messageSource.getMessage("acc.field.creditnote(s)", null, RequestContextUtils.getLocale(request)) + " " + cnNo.substring(0, cnNo.length() - 1) + " " + messageSource.getMessage("acc.field.hasBeenUnlinkedFromSelected", null, RequestContextUtils.getLocale(request)) + " " + messageSource.getMessage("acc.field.CustomerInvoice", null, RequestContextUtils.getLocale(request)) + " " + invNo + ".";
                        issuccess = true;
                        msg += "<br>";
                    } else {
                        msg += messageSource.getMessage("acc.field.creditnote(s).Except", null, RequestContextUtils.getLocale(request)) + " " + linkedTransaction.substring(0, linkedTransaction.length() - 1) + " " + messageSource.getMessage("acc.field.hasBeenUnlinkedFromSelected", null, RequestContextUtils.getLocale(request)) + " " + messageSource.getMessage("acc.field.CustomerInvoice", null, RequestContextUtils.getLocale(request)) + " " + invNo + ".";
                        issuccess = true;
                        msg += "<br>";
                    }

                    if (!StringUtil.isNullOrEmpty(cnNo)) {
                        auditTrailObj.insertAuditLog(AuditAction.LINKEDRECEIPT, "User " + sessionHandlerImpl.getUserFullName(request) + " has unlink Credit Note(s) " + cnNo.substring(0, cnNo.length() - 1) + " from Sales Invoice " + invNo + ".", request, invNo);
                    }

                }
                if (!StringUtil.isNullOrEmpty(advanceRP) && !StringUtil.isNullOrEmpty(invNo)) {
                    msg += messageSource.getMessage("acc.writeOff.receipts", null, RequestContextUtils.getLocale(request)) + " " + advanceRP.substring(0, advanceRP.length() - 1) + " " + messageSource.getMessage("acc.field.hasBeenUnlinkedFromSelected", null, RequestContextUtils.getLocale(request)) + " " + messageSource.getMessage("acc.field.CustomerInvoice", null, RequestContextUtils.getLocale(request)) + " " + invNo + ".";
                    issuccess = true;
                    msg += "<br>";
                    auditTrailObj.insertAuditLog(AuditAction.LINKEDRECEIPT, "User " + sessionHandlerImpl.getUserFullName(request) + " has unlink Receipt(s) " + advanceRP.substring(0, advanceRP.length() - 1) + " from Sales Invoice " + invNo+".", request, invNo);
                }
                if (!StringUtil.isNullOrEmpty(srNo) && !StringUtil.isNullOrEmpty(invNo)) {
                    if (cashRefund) {
                        msg += messageSource.getMessage("acc.pi.Unlinkcashtypetransaction", null, RequestContextUtils.getLocale(request));
                        msg += "<br>";
                        issuccess = false;
                    } else {
                        msg += messageSource.getMessage("acc.field.SalesInvoice(s)", null, RequestContextUtils.getLocale(request)) + " " + invNo + " " + messageSource.getMessage("acc.field.hasBeenUnlinkedFromSelected", null, RequestContextUtils.getLocale(request)) + " " + messageSource.getMessage("acc.accPref.autoSR", null, RequestContextUtils.getLocale(request)) + " " + srNo.substring(0, srNo.length() - 1) + ".";
                        msg += "<br>";
                        issuccess = true;
                        auditTrailObj.insertAuditLog(AuditAction.UNLINK_SI_FROM_SR, "User " + sessionHandlerImpl.getUserFullName(request) + " has unlink " + "Sales Return " + srNo.substring(0, srNo.length() - 1) + " from the Sales Invoice(s) " + invNo + ".", request, invNo);
                    }
                }
                if(!StringUtil.isNullOrEmpty(rpNo) && !StringUtil.isNullOrEmpty(invNo)){
                    msg+="Please edit receipt(s) "+rpNo.substring(0, rpNo.length()-1)+" and unlink sales invoice " +invNo+".";
                    issuccess = true;
                    isSItoRP = true;
                }
                 if (!StringUtil.isNullOrEmpty(roundingJENo)) {
                    String unlinkingDocs = "";
                    if (!StringUtil.isNullOrEmpty(cnNo) && !StringUtil.isNullOrEmpty(advanceRP)) {
                        unlinkingDocs = " "+messageSource.getMessage("acc.roundingje.fromcreditnotes", null, RequestContextUtils.getLocale(request)) + " "+cnNo.substring(0, cnNo.length() - 1) +" "+messageSource.getMessage("acc.roundingje.andreceipts", null, RequestContextUtils.getLocale(request)) +" "+ advanceRP.substring(0, advanceRP.length() - 1);
                    } else if (!StringUtil.isNullOrEmpty(cnNo)) {
                        unlinkingDocs = " "+messageSource.getMessage("acc.roundingje.fromcreditnotes", null, RequestContextUtils.getLocale(request))+" " + cnNo.substring(0, cnNo.length() - 1);
                    } else if (!StringUtil.isNullOrEmpty(advanceRP)) {
                        unlinkingDocs = " "+messageSource.getMessage("acc.roundingje.fromreceipts", null, RequestContextUtils.getLocale(request)) +" "+ advanceRP.substring(0, advanceRP.length() - 1);
                    }
                    auditTrailObj.insertAuditLog(AuditAction.ROUNDING_OFF_JE_DELETED, "User " + sessionHandlerImpl.getUserFullName(request) + messageSource.getMessage("acc.roundingje.hasunlinkedsi", null, RequestContextUtils.getLocale(request))+" "+ unlinkingDocs + "."+messageSource.getMessage("acc.roundingje.roundingje", null, RequestContextUtils.getLocale(request)) +" "+ roundingJENo + messageSource.getMessage("acc.roundingje.roundingjedelted", null, RequestContextUtils.getLocale(request)), request, roundingIDs);
                }
            }

        } catch (Exception ex) {
            msg = "accInvoiceControllerCMN.unlinkInvoiceDocuments:" + ex.getMessage();
            Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                jobj.put("success", issuccess);
                jobj.put("msg", msg);
                jobj.put("isSItoRP",isSItoRP);
            } catch (JSONException ex) {
                Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return new ModelAndView(Constants.jsonView, "model", jobj.toString());
    }
    /*
     * Function- To be used to unlink document from/to delivery order
     */
    public ModelAndView unlinkDeliveryOrderDocuments(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        String msg = "";
        boolean issuccess = false;
        try {
            JSONArray documentArr = new JSONArray(request.getParameter(Constants.data));
            String doid = request.getParameter("doid");
            String invoiceNo="",doInvoiceNo="",doSalesOrderNo="",doNo="",salesReturnNo="";
            String companyid=sessionHandlerImpl.getCompanyid(request);
            boolean isAvalaraIntegration = false;
            KwlReturnObject result = accountingHandlerDAOobj.getObject(ExtraCompanyPreferences.class.getName(), companyid);
            if (result != null && result.getEntityList() != null && !result.getEntityList().isEmpty() && result.getEntityList().get(0) != null) {
                ExtraCompanyPreferences extraCompanyPreferences = (ExtraCompanyPreferences) result.getEntityList().get(0);
                isAvalaraIntegration = extraCompanyPreferences.isAvalaraIntegration();
            }
            if (!StringUtil.isNullOrEmpty(doid) && documentArr != null && documentArr.length() > 0) {
                result = accountingHandlerDAOobj.getObject(DeliveryOrder.class.getName(), doid);
                DeliveryOrder deliveryOrder = (DeliveryOrder) result.getEntityList().get(0);
                HashMap<String, Object> linkingrequestParams = new HashMap<String, Object>();
           
                if(deliveryOrder!=null){
                    doNo=deliveryOrder.getDeliveryOrderNumber();
                }
                for (int i = 0; i < documentArr.length(); i++) {
                    JSONObject document = documentArr.getJSONObject(i);
                    int type = document.optInt("type", -1);
                    String billid = document.optString(Constants.billid, "");
                    if (!StringUtil.isNullOrEmpty(billid) && type != -1) {
                        if (type == 0) {    // DO -> SI (InvoiceDetail)
                            // DO linked in SI
                            
                            /**
                             * passing isAvalaraIntegration flag because deleted invoices are also to be unlinked in case of Avalara integration
                             */
                            KwlReturnObject doDetailsResult = accInvoiceDAOobj.getInvoiceDetailsFromDO(billid, doid, companyid, isAvalaraIntegration);
                            List<InvoiceDetail> invoicedetails  = doDetailsResult.getEntityList();
                            if (invoicedetails != null) {
                                for (InvoiceDetail invoiceDetail : invoicedetails) {
                                    if (invoiceDetail.getDeliveryOrderDetail() != null) {
                                        DeliveryOrderDetail deliveryOrderDetail = invoiceDetail.getDeliveryOrderDetail();
                                        invoiceDetail.setDeliveryOrderDetail(null);
                                        deliveryOrderDetail.getDeliveryOrder().setIsOpenInSI(true);
                                        if (invoiceNo.indexOf(invoiceDetail.getInvoice().getInvoiceNumber()) == -1) {
                                            invoiceNo += invoiceDetail.getInvoice().getInvoiceNumber() + ",";
                                        }
                                    }
                                }
                                linkingrequestParams.clear();
                                linkingrequestParams.put("doid", deliveryOrder.getID());
                                linkingrequestParams.put(Constants.billid, billid);
                                linkingrequestParams.put("type", type);
                                linkingrequestParams.put("unlinkflag", true);
                                accInvoiceDAOobj.deleteLinkingInformationOfDO(linkingrequestParams);//Deleting linking information of DO during Unlinking DO.
                            }
                        } else if (type == 1) { // Type=1 SI -> DO (DeliveryOrderDetail)
                            KwlReturnObject doDetailsResult = accInvoiceDAOobj.getDODetailsFromCustomerInvoice(billid, doid, companyid);
                            List<DeliveryOrderDetail> dodetails = doDetailsResult.getEntityList();
                            if (dodetails != null) {
                                for (DeliveryOrderDetail deliveryOrderDetail : dodetails) {
                                    if (deliveryOrderDetail.getCidetails() != null && type == 1) {// SI linked in DO
                                        InvoiceDetail invoiceDetail = deliveryOrderDetail.getCidetails();
                                        if (doInvoiceNo.indexOf(invoiceDetail.getInvoice().getInvoiceNumber()) == -1) {
                                            doInvoiceNo += invoiceDetail.getInvoice().getInvoiceNumber() + ",";
                                        }
                                        if (deliveryOrderDetail.getCidetails().getSalesorderdetail() != null) {
                                            deliveryOrderDetail.getCidetails().getSalesorderdetail().getSalesOrder().setIsSOClosed(false);
                                            deliveryOrderDetail.getCidetails().getSalesorderdetail().setIsLineItemClosed(false);
                                            
                                            /* Updating balance quantity of SO, If SI is linked with SO*/
                                            HashMap soMap = new HashMap();
                                            soMap.put("sodetails", deliveryOrderDetail.getCidetails().getSalesorderdetail().getID());
                                            soMap.put(Constants.companyKey, companyid);
                                            soMap.put("balanceqty", deliveryOrderDetail.getDeliveredQuantity());
                                            soMap.put("add", true);
                                            accCommonTablesDAO.updateSalesorderOrderStatus(soMap);
                                        }
                                        deliveryOrderDetail.setCidetails(null);
                                        invoiceDetail.getInvoice().setIsOpenDO(true);
                                    }
                                }
                                linkingrequestParams.clear();
                                linkingrequestParams.put("doid", deliveryOrder.getID());
                                linkingrequestParams.put(Constants.billid, billid);
                                linkingrequestParams.put("type", type);
                                linkingrequestParams.put("unlinkflag", true);
                                accInvoiceDAOobj.deleteLinkingInformationOfDO(linkingrequestParams);//Deleting linking information of DO during Unlinking DO.
                            }
                        }else if(type==2){//  Type=2  SO-> DO (DeliveryOrderDetail)
                            KwlReturnObject doDetailsResult = accInvoiceDAOobj.getDODetailsFromSalesOrder(billid,doid,companyid);
                              // update the salesorder order balance quantity
                            accInvoiceDAOobj.updateSOBalanceQtyAfterDO(doid, billid,companyid);
                           
                            KwlReturnObject rdresult = accountingHandlerDAOobj.getObject(SalesOrder.class.getName(), billid);
                            SalesOrder salesorder = (SalesOrder) rdresult.getEntityList().get(0);
                            HashMap requestparams = new HashMap();

                            requestparams.put("salesOrder", salesorder);
                            requestparams.put("closeFlag", false);
                            KwlReturnObject result1 = accSalesOrderDAOobj.closeDocument(requestparams);
                            
                            List<DeliveryOrderDetail> dodetails = doDetailsResult.getEntityList();
                            for (DeliveryOrderDetail deliveryOrderDetail : dodetails) {
                                if (deliveryOrderDetail.getSodetails() != null && type == 2) { // SO linked in DO
                                    SalesOrderDetail salesOrderDetail = deliveryOrderDetail.getSodetails();
                                    if (doSalesOrderNo.indexOf(salesOrderDetail.getSalesOrder().getSalesOrderNumber()) == -1) {
                                        doSalesOrderNo += salesOrderDetail.getSalesOrder().getSalesOrderNumber() + ",";
                                    }
                                    deliveryOrderDetail.setSodetails(null);
                                    salesOrderDetail.getSalesOrder().setLinkflag(0);
                                    salesOrderDetail.getSalesOrder().setIsopen(true);
                                    salesOrderDetail.setIsLineItemClosed(false);
                                }
                                linkingrequestParams.clear();
                                linkingrequestParams.put("doid", deliveryOrder.getID());
                                linkingrequestParams.put(Constants.billid, billid);
                                linkingrequestParams.put("type", type);
                                linkingrequestParams.put("unlinkflag", true);
                                accInvoiceDAOobj.deleteLinkingInformationOfDO(linkingrequestParams);//Deleting linking information of DO during Unlinking DO.
                            }
                        }else if(type==3){ // DO -> SR (SalesReturnDetail)
                            // DO linked in SR
                            KwlReturnObject doDetailsResult = accInvoiceDAOobj.getSalesReturnDetailsFromDO(billid, doid, companyid);
                            List<SalesReturnDetail> salesReturnDetails = doDetailsResult.getEntityList();
                            if(salesReturnDetails!=null){
                                for (SalesReturnDetail salesReturnDetail : salesReturnDetails) {
                                    if (salesReturnDetail.getDodetails() != null) {
                                        DeliveryOrderDetail deliveryOrderDetail = salesReturnDetail.getDodetails();
                                        if (salesReturnNo.indexOf(salesReturnDetail.getSalesReturn().getSalesReturnNumber()) == -1) {
                                            salesReturnNo += salesReturnDetail.getSalesReturn().getSalesReturnNumber() + ",";
                                        }
                                        salesReturnDetail.setDodetails(null);
                                        deliveryOrderDetail.getDeliveryOrder().setIsOpenInSR(true);
                                    }
                                }
                                linkingrequestParams.clear();
                                linkingrequestParams.put("doid", deliveryOrder.getID());
                                linkingrequestParams.put(Constants.billid, billid);
                                linkingrequestParams.put("type", type);
                                linkingrequestParams.put("unlinkflag", true);
                                accInvoiceDAOobj.deleteLinkingInformationOfDO(linkingrequestParams);//Deleting linking information of DO during Unlinking DO.
                            }
                        }
                    }
                }
                if(!StringUtil.isNullOrEmpty(doNo) && !StringUtil.isNullOrEmpty(invoiceNo)){ // type=0 DO linked in invoice
                    msg += messageSource.getMessage("acc.field.deliveryOrder(s)", null, RequestContextUtils.getLocale(request)) + " " + doNo + " " + messageSource.getMessage("acc.field.hasBeenUnlinkedFromSelected", null, RequestContextUtils.getLocale(request)) + " " + messageSource.getMessage("acc.field.CustomerInvoice", null, RequestContextUtils.getLocale(request)) + " " + invoiceNo.substring(0, invoiceNo.length() - 1) + ".";
                    msg+="<br>";
                    issuccess = true;
                    auditTrailObj.insertAuditLog(AuditAction.UNLINK_DO_FROM_SI, "User " + sessionHandlerImpl.getUserFullName(request) + " has unlink " + "Sales Invoice " + invoiceNo.substring(0, invoiceNo.length() - 1) + " from the Delivery Order(s) " + doNo + ".", request, invoiceNo.substring(0, invoiceNo.length() - 1));
                }
                if (!StringUtil.isNullOrEmpty(doNo) && !StringUtil.isNullOrEmpty(doInvoiceNo)) { // type=1 CI linked in DO
                    msg += messageSource.getMessage("acc.field.SalesInvoice(s)", null, RequestContextUtils.getLocale(request)) + " " + doInvoiceNo.substring(0, doInvoiceNo.length() - 1) + " " + messageSource.getMessage("acc.field.hasBeenUnlinkedFromSelected", null, RequestContextUtils.getLocale(request)) + " " + messageSource.getMessage("acc.wtfTrans.do", null, RequestContextUtils.getLocale(request)) + " " + doNo + ".";
                    msg += "<br>";
                    issuccess = true;
                    auditTrailObj.insertAuditLog(AuditAction.UNLINK_SI_FROM_DO, "User " + sessionHandlerImpl.getUserFullName(request) + " has unlink " + "Delivery Order " + doNo + " from the Sales Invoice(s) " + doInvoiceNo.substring(0, doInvoiceNo.length() - 1) + ".", request, doNo);
                }
                if(!StringUtil.isNullOrEmpty(doNo) && !StringUtil.isNullOrEmpty(doSalesOrderNo)){ // type=2 SO linked in DO
                    msg += messageSource.getMessage("acc.field.salesOrder(s)", null, RequestContextUtils.getLocale(request)) + " " + doSalesOrderNo.substring(0, doSalesOrderNo.length() - 1) + " " + messageSource.getMessage("acc.field.hasBeenUnlinkedFromSelected", null, RequestContextUtils.getLocale(request)) + " " + messageSource.getMessage("acc.wtfTrans.do", null, RequestContextUtils.getLocale(request)) + " " + doNo + ".";
                    issuccess = true;
                    auditTrailObj.insertAuditLog(AuditAction.UNLINK_SO_FROM_DO, "User " + sessionHandlerImpl.getUserFullName(request) + " has unlink " + "Delivery Order " + doNo + " from the Sales Order(s) " + doSalesOrderNo.substring(0, doSalesOrderNo.length() - 1) + ".", request, doNo);
                }
                if(!StringUtil.isNullOrEmpty(doNo) && !StringUtil.isNullOrEmpty(salesReturnNo)){ // type=3 DO linked in SR
                    msg += messageSource.getMessage("acc.field.deliveryOrder(s)", null, RequestContextUtils.getLocale(request)) + " " + doNo + " " + messageSource.getMessage("acc.field.hasBeenUnlinkedFromSelected", null, RequestContextUtils.getLocale(request)) + " " + messageSource.getMessage("acc.accPref.autoSR", null, RequestContextUtils.getLocale(request)) + " " + salesReturnNo.substring(0, salesReturnNo.length() - 1) + ".";
                    issuccess = true;
                    auditTrailObj.insertAuditLog(AuditAction.UNLINK_DO_FROM_SR, "User " + sessionHandlerImpl.getUserFullName(request) + " has unlink " + "Sales Return " + salesReturnNo.substring(0, salesReturnNo.length() - 1) + " from the Delivery Order(s) " + doNo + ".", request, salesReturnNo.substring(0, salesReturnNo.length() - 1));
                }
            }
            issuccess = true;
        } catch (Exception ex) {
            msg = "accInvoiceControllerCMN.unlinkDeliveryOrderDocuments:" + ex.getMessage();
            Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                jobj.put("success", issuccess);
                jobj.put("msg", msg);
            } catch (JSONException ex) {
                Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return new ModelAndView(Constants.jsonView, "model", jobj.toString());
    }

    public ModelAndView unlinkSalesReturnDocuments(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        StringBuffer msg = new StringBuffer();
        boolean issuccess = false;
        try {

            String billid = (!StringUtil.isNullOrEmpty(request.getParameter(Constants.billid))) ? (String) request.getParameter(Constants.billid) : "";

            KwlReturnObject result = accountingHandlerDAOobj.getObject(SalesReturn.class.getName(), billid);
            SalesReturn salesReturn = (SalesReturn) result.getEntityList().get(0);
            String srNo = salesReturn.getSalesReturnNumber();

            HashMap<String, Object> requestParams = new HashMap<String, Object>();
            ArrayList filter_names = new ArrayList(), filter_params = new ArrayList();

            HashMap<String, Object> linkingrequestParams = new HashMap<String, Object>();

            JSONArray documentArr = new JSONArray(request.getParameter(Constants.data));
            if (!StringUtil.isNullOrEmpty(billid) && documentArr != null && documentArr.length() > 0) {
                String invoiceNo = "", deliveryOrderNo = "";
                for (int i = 0; i < documentArr.length(); i++) {

                    JSONObject document = documentArr.getJSONObject(i);
                    int type = document.optInt("type", -1);
                    String linkedDocumentID = document.optString(Constants.billid, "");
                    if (!StringUtil.isNullOrEmpty(billid) && type != -1) {

                        if (type == 1 || type == 2) {//Type=1,SI->SR & Type=2,DO->SR

                            filter_names.add("salesReturn.ID");
                            filter_params.add(salesReturn.getID());
                            requestParams.put("filter_names", filter_names);
                            requestParams.put("filter_params", filter_params);

                            /* Fetching Sales Return Details */
                            KwlReturnObject srDetailsResult = accInvoiceDAOobj.getSalesReturnDetails(requestParams);
                            List<SalesReturnDetail> srDetailList = srDetailsResult.getEntityList();
                            if (srDetailList != null && srDetailList.size() > 0) {
                                /* Invoice ->Sales Return*/
                                if (type == 1) {
                                    KwlReturnObject invoiceObj = accountingHandlerDAOobj.getObject(Invoice.class.getName(), linkedDocumentID);
                                    Invoice invoice = (Invoice) invoiceObj.getEntityList().get(0);
                                    if (invoice != null) {
                                        Set<InvoiceDetail> invoicedetails = invoice.getRows();
                                        if (invoicedetails != null && invoicedetails.size() > 0) {

                                            /* Iterating Sales Return Details for selected Sales Return*/
                                            for (SalesReturnDetail srDetails : srDetailList) {
                                                if (srDetails.getCidetails() != null) {

                                                    /* Iterating invoice Details for checking 
                                                    
                                                     whether it is used in Sales Return ,
                                                    
                                                     if Yes then deleting invoice details id from Sales Return Details*/
                                                    for (InvoiceDetail invDetails : invoicedetails) {
                                                        if (invDetails != null && invDetails.getID().equals(srDetails.getCidetails().getID())) {
                                                            if (invDetails != null && invoiceNo.indexOf(invDetails.getInvoice().getInvoiceNumber()) == -1) {
                                                                invoiceNo += invDetails.getInvoice().getInvoiceNumber() + ",";
                                                            }
                                                            srDetails.setCidetails(null);
                                                            invDetails.getInvoice().setIsOpenSR(true);
                                                            break;
                                                        }
                                                    }
                                                }
                                            }
                                            linkingrequestParams.clear();
                                            linkingrequestParams.put("linkedTransactionID", linkedDocumentID);
                                            linkingrequestParams.put("srid", billid);
                                            linkingrequestParams.put("type", type);
                                            linkingrequestParams.put("unlinkflag", true);

                                            /*Deleting linking information of SR & SI*/
                                            accInvoiceDAOobj.deleteLinkingInformationOfSR(linkingrequestParams);

                                        }
                                    }
                                    /* Delivery Order ->Sales Return*/
                                } else if (type == 2) {
                                    KwlReturnObject goodsReceiptObj = accountingHandlerDAOobj.getObject(DeliveryOrder.class.getName(), linkedDocumentID);
                                    DeliveryOrder deliveryOrder = (DeliveryOrder) goodsReceiptObj.getEntityList().get(0);
                                    if (deliveryOrder != null) {
                                        Set<DeliveryOrderDetail> doDetailsList = deliveryOrder.getRows();
                                        if (doDetailsList != null && doDetailsList.size() > 0) {

                                            /* Iterating Sales Return Details for selected Sales Return*/
                                            for (SalesReturnDetail srDetails : srDetailList) {
                                                if (srDetails.getDodetails() != null) {

                                                    /* Iterating Delivery Order Details for checking 
                                                    
                                                     whether it is used in Sales Return ,
                                                    
                                                     if Yes then deleting Delivery Order details id from Sales Return Details*/
                                                    for (DeliveryOrderDetail doDetails : doDetailsList) {
                                                        if (doDetails != null && doDetails.getID().equals(srDetails.getDodetails().getID())) {
                                                            if (doDetails != null && deliveryOrderNo.indexOf(doDetails.getDeliveryOrder().getDeliveryOrderNumber()) == -1) {
                                                                deliveryOrderNo += doDetails.getDeliveryOrder().getDeliveryOrderNumber() + ",";
                                                            }
                                                            srDetails.setDodetails(null);
                                                            doDetails.getDeliveryOrder().setIsOpenInSR(true);
                                                            break;
                                                        }
                                                    }
                                                }
                                            }
                                            linkingrequestParams.clear();
                                            linkingrequestParams.put("linkedTransactionID", linkedDocumentID);
                                            linkingrequestParams.put("srid", billid);
                                            linkingrequestParams.put("type", type);
                                            linkingrequestParams.put("unlinkflag", true);

                                            /*Deleting linking information of SR & DO*/
                                            accInvoiceDAOobj.deleteLinkingInformationOfSR(linkingrequestParams);

                                        }
                                    }
                                }
                            }
                        }

                    }
                }

                if (!StringUtil.isNullOrEmpty(srNo) && !StringUtil.isNullOrEmpty(deliveryOrderNo)) {
                    msg.append(messageSource.getMessage("acc.field.deliveryOrder(s)", null, RequestContextUtils.getLocale(request)) + " " + deliveryOrderNo.substring(0, deliveryOrderNo.length() - 1) + " " + messageSource.getMessage("acc.field.hasBeenUnlinkedFromSelected", null, RequestContextUtils.getLocale(request)) + " " + messageSource.getMessage("acc.accPref.autoSR", null, RequestContextUtils.getLocale(request)) + " " + srNo + ".");
                    issuccess = true;
                    auditTrailObj.insertAuditLog(AuditAction.UNLINK_DO_FROM_SR, "User " + sessionHandlerImpl.getUserFullName(request) + " has unlink " + "Sales Return " + srNo + " from the Delivery Order(s) " + deliveryOrderNo.substring(0, deliveryOrderNo.length() - 1) + ".", request, srNo);
                } else if (!StringUtil.isNullOrEmpty(srNo) && !StringUtil.isNullOrEmpty(invoiceNo)) {
                    msg.append(messageSource.getMessage("acc.field.SalesInvoice(s)", null, RequestContextUtils.getLocale(request)) + " " + invoiceNo.substring(0, invoiceNo.length() - 1) + " " + messageSource.getMessage("acc.field.hasBeenUnlinkedFromSelected", null, RequestContextUtils.getLocale(request)) + " " + messageSource.getMessage("acc.accPref.autoSR", null, RequestContextUtils.getLocale(request)) + " " + srNo + ".");
                    issuccess = true;
                    auditTrailObj.insertAuditLog(AuditAction.UNLINK_SI_FROM_SR, "User " + sessionHandlerImpl.getUserFullName(request) + " has unlinked " + "Sales Return " + srNo + " from the Sales Invoice(s) " + invoiceNo.substring(0, invoiceNo.length() - 1) + ".", request, srNo);
                }
            }

        } catch (Exception ex) {
            msg.append("accInvoiceControllerCMN.unlinkSalesReturnDocuments:" + ex.getMessage());
            Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                jobj.put("success", issuccess);
                jobj.put("msg", msg);
            } catch (JSONException ex) {
                Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return new ModelAndView(Constants.jsonView, "model", jobj.toString());
    }
    
    public ModelAndView getInvoicesForWriteOff(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        boolean issuccess = false;
        String msg = "";
        try {
            HashMap requestParams = AccInvoiceServiceHandler.getInvoiceRequestMap(request);
            KwlReturnObject result = accInvoiceDAOobj.getInvoices(requestParams);
            List list = result.getEntityList();
            JSONArray DataJArr = new JSONArray();
            
            DataJArr = getInvoiceJsonForWriteOff(request, list).getJSONArray(Constants.data);
            /**
             * Passing empty HashSet as we want to fetch all the opening
             * invoices.invoiceList contains id of invoices which we do not want
             * to put in response JSON. ERP-41122
             */
            HashSet invoicesList = new HashSet();
            JSONArray openingBalanceInvoicesJsonArray = getOpeningBalanceInvoicesJsonArray(request, DataJArr,invoicesList);     //ERP-41122
            int count = DataJArr.length();
            JSONArray pagedJson = DataJArr;
            String start = request.getParameter("start");
            String limit = request.getParameter("limit");
            if (!StringUtil.isNullOrEmpty(start) && !StringUtil.isNullOrEmpty(limit)) {
                pagedJson = StringUtil.getPagedJSON(pagedJson, Integer.parseInt(start), Integer.parseInt(limit));
            }
            jobj.put(Constants.data, pagedJson);
            jobj.put("count", count);
            issuccess = true;
        } catch (Exception ex) {
            msg = "" + ex.getMessage();
            Logger.getLogger(accInvoiceController.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                jobj.put("success", issuccess);
                jobj.put("msg", msg);
            } catch (JSONException ex) {
                Logger.getLogger(accInvoiceController.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return new ModelAndView(Constants.jsonView, "model", jobj.toString());
    }

    public JSONObject getInvoiceJsonForWriteOff(HttpServletRequest request, List<Invoice> list) throws SessionExpiredException, ServiceException {
        JSONObject jobj = new JSONObject();
        JSONArray jArr = new JSONArray();
        try {
            HashMap requestParams = AccInvoiceServiceHandler.getInvoiceRequestMap(request);
            DateFormat df = authHandler.getDateOnlyFormat();
            String companyid = sessionHandlerImpl.getCompanyid(request);
            boolean onlyAmountDue = requestParams.get("onlyamountdue") != null;
            boolean CashAndInvoice = Boolean.FALSE.parseBoolean(String.valueOf(request.getParameter("CashAndInvoice")));
            KwlReturnObject cap = accountingHandlerDAOobj.getObject(CompanyAccountPreferences.class.getName(), companyid);
            CompanyAccountPreferences pref = (CompanyAccountPreferences) cap.getEntityList().get(0);
            String cashAccount = pref.getCashAccount().getID();

            KwlReturnObject curresult = accountingHandlerDAOobj.getObject(KWLCurrency.class.getName(), sessionHandlerImpl.getCurrencyID(request));
            KWLCurrency currency = (KWLCurrency) curresult.getEntityList().get(0);

            List<String> idsList = new ArrayList<String>();
            for (Invoice invoice : list) {
                idsList.add(invoice.getID());
            }
            Map<String, JournalEntryDetail> invoiceCustomerEntryMap = accInvoiceDAOobj.getInvoiceCustomerEntryList(idsList);
            for (Invoice invoice : list) {
                    String invid = invoice.getID();
                    JournalEntry je = invoice.getJournalEntry();
                    JournalEntryDetail d = invoiceCustomerEntryMap.get(invid);
                    Account account = d.getAccount();
                    if (account.getID().equals(cashAccount) && !CashAndInvoice) {
                        continue;
                    }
                    String currencyid = (invoice.getCurrency() == null ? currency.getCurrencyID() : invoice.getCurrency().getCurrencyID());
                    List ll = new ArrayList();
                    if (Constants.InvoiceAmountDueFlag) {
                        ll = accInvoiceCommon.getInvoiceDiscountAmountInfo(requestParams, invoice);
                    } else {
                        ll = accInvoiceCommon.getAmountDue_Discount(requestParams, invoice);
                    }
                    double amountdue = (Double) ll.get(0);
                    double amountDueOriginal = (Double) ll.get(3);
                    if (onlyAmountDue && authHandler.round(amountdue, companyid) == 0) {
                        continue;
                    }
                    JSONObject obj = new JSONObject();
                    obj.put(Constants.billid, invoice.getID());
                    obj.put("accountid", invoice.getAccount() == null ? "" : invoice.getAccount().getID());
                    obj.put("personname", invoice.getCustomer() == null ? "" : invoice.getCustomer().getName());
                    obj.put("billno", invoice.getInvoiceNumber());
                    obj.put(Constants.currencyKey, currencyid);
                    obj.put("currencyidtransaction", currencyid);
                    obj.put("currencysymboltransaction", (invoice.getCurrency() == null ? currency.getSymbol() : invoice.getCurrency().getSymbol()));
//                    obj.put("date", df.format(je.getEntryDate()));
                    obj.put("date", df.format(invoice.getCreationDate()));
                    if (account.getID().equals(cashAccount)) {
                        obj.put("amountdue", 0);
                    } else {
                        obj.put("amountdue", authHandler.round(amountdue, companyid));
                    }
                    obj.put("amountDueOriginal", (amountDueOriginal <= 0) ? 0 : authHandler.round(amountDueOriginal, companyid));
                    obj.put("amountDueOriginalSaved", (amountDueOriginal <= 0) ? 0 : authHandler.round(amountDueOriginal, companyid));
                    obj.put("exchangeratefortransaction", (amountDueOriginal <= 0 && amountdue <= 0) ? 0 : (amountdue / amountDueOriginal));
                    obj.put("amount", d.getAmount());   //actual invoice amount
                    jArr.put(obj);
            }

            jobj.put(Constants.data, jArr);
        } catch (JSONException ex) {
            throw ServiceException.FAILURE("getInvoiceJsonForWriteOff : " + ex.getMessage(), ex);
        }
        return jobj;
    }
    
    public JSONObject IsInvoiceRecovered(String invoiceId, String companyId) throws ServiceException {
        JSONObject jObj = new JSONObject();
        boolean recovered = true;
        HashMap<String, Object> writeOffMap = new HashMap<String, Object>();
        boolean isWrittenOff = false;
        int recoveredTime = 0;
        writeOffMap.put("invoiceid", invoiceId);
        writeOffMap.put(Constants.companyKey, companyId);
        KwlReturnObject writeOffResult = accWriteOffServiceDao.getInvoiceWriteOffEntries(writeOffMap);
        List<InvoiceWriteOff> WriteOffList = writeOffResult.getEntityList();
        if (!WriteOffList.isEmpty()) {
            isWrittenOff = true;
            for (InvoiceWriteOff IWO : WriteOffList) {
                if (IWO.isIsRecovered()) {
                    recoveredTime++;
                }
            }
            if(!(WriteOffList.size() == recoveredTime)){
                recovered =false;
            }
        }
        try {
            jObj.put("isWrittenOff", isWrittenOff);
            jObj.put("isRecovered", recovered);
        } catch (JSONException ex) {
            Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        return jObj;
}
    public ModelAndView deleteRecurringInvoiceRule(HttpServletRequest request, HttpServletResponse response) throws SessionExpiredException {
        JSONObject jobj = new JSONObject();
        String msg = "";
        boolean issuccess = false;
        try {
            HashMap<String, Object> requestParams = AccountingManager.getGlobalParams(request);
            requestParams.put(Constants.data, request.getParameter(Constants.data));
            requestParams.put("isSalesInvoice", request.getParameter("isSalesInvoice"));
            
            //Below Params Added for Audit Trial Entry
            requestParams.put("reqHeader", request.getHeader("x-real-ip"));
            requestParams.put("remoteAddress", request.getRemoteAddr());
            requestParams.put(Constants.useridKey , sessionHandlerImpl.getUserid(request));
            requestParams.put("userFullName",  sessionHandlerImpl.getUserFullName(request));
            requestParams.put("locale", RequestContextUtils.getLocale(request));
            msg = accInvoiceServiceDAO.deleteRecurringInvoiceRule(requestParams);
            issuccess = true;
        } catch (Exception ex) {
            msg = ex.getMessage();
            Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, "accInvoiceControllerCMN.deleteRecurringInvoiceRule", ex);
        } finally {
            try {
                jobj.put("success", issuccess);
                jobj.put("msg", msg);
            } catch (Exception ex) {
                Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, "accInvoiceControllerCMN.deleteRecurringInvoiceRule", ex);
            }
        }
        return new ModelAndView(Constants.jsonView, "model", jobj.toString());
    }

    public ModelAndView getMonthWiseInvoicesDue(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        boolean issuccess = false;
        String msg = "";
        try {
            String companyid = sessionHandlerImpl.getCompanyid(request);
            HashMap requestParams = AccInvoiceServiceHandler.getInvoiceRequestMap(request);
            KwlReturnObject result = accInvoiceDAOobj.getInvoices(requestParams);
            List list = result.getEntityList();
            boolean isEdit = request.getParameter("isEdit") == null ? false : Boolean.parseBoolean(request.getParameter("isEdit"));
            requestParams.put("isEdit", isEdit);
            String year = request.getParameter("year") != null ? request.getParameter("year").toString() : "";
            DateFormat df = (DateFormat) requestParams.get("df");
            HashSet invoicesList = new HashSet();
            if (isEdit && !StringUtil.isNullOrEmpty(request.getParameter("billId").toString())) {
                KwlReturnObject receiptResult = accountingHandlerDAOobj.getObject(Receipt.class.getName(), request.getParameter("billId").toString());
                Receipt receipt = (Receipt) receiptResult.getEntityList().get(0);
                Set<ReceiptDetail> receiptDetails = receipt.getRows();
                for (ReceiptDetail receiptDetail : receiptDetails) {
                    invoicesList.add(receiptDetail.getInvoice().getID());
            }
            }
            String currencyfilterfortrans = request.getParameter("currencyfilterfortrans") != null ? request.getParameter("currencyfilterfortrans") : "";
            request.setAttribute("getOnlyAmountDueInJson", true);

            JSONArray DataJArr = new JSONArray();
            DataJArr = getInvoiceJsonForPayment(request, list, invoicesList).getJSONArray(Constants.data);
            JSONArray openingBalanceInvoicesJsonArray = getOpeningBalanceInvoicesJsonArray(request, DataJArr,invoicesList);     //ERP-41122
            DataJArr = getMonthWiseInvoicesAmountDueJson(DataJArr, year, currencyfilterfortrans, companyid);
            int count = DataJArr.length();

            jobj.put(Constants.data, DataJArr);
            jobj.put("count", count);
            issuccess = true;
        } catch (SessionExpiredException ex) {
            msg = ex.getMessage();
            Logger.getLogger(accGoodsReceiptController.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ServiceException ex) {
            msg = ex.getMessage();
            Logger.getLogger(accGoodsReceiptController.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            msg = "accInvoiceControllerCMN.getMonthWiseInvoicesDue : " + ex.getMessage();
        } finally {
            try {
                jobj.put("success", issuccess);
                jobj.put("msg", msg);
            } catch (JSONException ex) {
                Logger.getLogger(accGoodsReceiptController.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return new ModelAndView(Constants.jsonView, "model", jobj.toString());
    }
    
    public JSONArray getMonthWiseInvoicesAmountDueJson(JSONArray jsonArr, String year, String currencyfilterfortrans, String companyid) throws ServiceException {
        JSONArray jArr = new JSONArray();
        try {

            String yearName = "";
            int Year = StringUtil.isNullOrEmpty(year) ? 0 : Integer.parseInt(year);
            SimpleDateFormat formatter = new SimpleDateFormat("MMM dd, yyyy");
            KwlReturnObject currencyresult = accountingHandlerDAOobj.getObject(KWLCurrency.class.getName(), currencyfilterfortrans);
            List list = currencyresult.getEntityList();
            KWLCurrency paymentCurrency = (KWLCurrency) list.get(0);
            String paymentCurrencySymbol = paymentCurrency.getSymbol();
            Date today = new Date();
            Calendar calendar = Calendar.getInstance();
            calendar.setTime(today);
            yearName += " " + (calendar.get(Calendar.YEAR) - Year);
            double janDue = 0, febDue = 0, marchDue = 0, aprilDue = 0, mayDue = 0, juneDue = 0, julyDue = 0, augustDue = 0, septDue = 0, octDue = 0, novDue = 0, decDue = 0;
            double janDueBase = 0, febDueBase = 0, marchDueBase = 0, aprilDueBase = 0, mayDueBase = 0, juneDueBase = 0, julyDueBase = 0, augustDueBase = 0, septDueBase = 0, octDueBase = 0, novDueBase = 0, decDueBase = 0;
            for (int i = 0; i < jsonArr.length(); i++) {
                JSONObject obj = new JSONObject();
                obj = jsonArr.getJSONObject(i);
                Date grDate = formatter.parse(obj.get("date").toString());
                double amountdue = 0, amountdueinbase = 0;
                amountdue = obj.optDouble("amountdue");
                amountdueinbase = obj.optDouble("amountdueinbase");
                amountdue = authHandler.round(amountdue, companyid);
                amountdueinbase = authHandler.round(amountdueinbase, companyid);
                Calendar cal = Calendar.getInstance();
                cal.setTime(grDate);

                if (cal.get(Calendar.MONTH) == Constants.Months_According_To_Indices.get(Constants.January)) {
                    janDue += amountdue;
                    janDueBase += amountdueinbase;
                } else if (cal.get(Calendar.MONTH) == Constants.Months_According_To_Indices.get(Constants.February)) {
                    febDue += amountdue;
                    febDueBase += amountdueinbase;
                } else if (cal.get(Calendar.MONTH) == Constants.Months_According_To_Indices.get(Constants.March)) {
                    marchDue += amountdue;
                    marchDueBase += amountdueinbase;
                } else if (cal.get(Calendar.MONTH) == Constants.Months_According_To_Indices.get(Constants.April)) {
                    aprilDue += amountdue;
                    aprilDueBase += amountdueinbase;
                } else if (cal.get(Calendar.MONTH) == Constants.Months_According_To_Indices.get(Constants.May)) {
                    mayDue += amountdue;
                    mayDueBase += amountdueinbase;
                } else if (cal.get(Calendar.MONTH) == Constants.Months_According_To_Indices.get(Constants.June)) {
                    juneDue += amountdue;
                    juneDueBase += amountdueinbase;
                } else if (cal.get(Calendar.MONTH) == Constants.Months_According_To_Indices.get(Constants.July)) {
                    julyDue += amountdue;
                    julyDueBase += amountdueinbase;
                } else if (cal.get(Calendar.MONTH) == Constants.Months_According_To_Indices.get(Constants.August)) {
                    augustDue += amountdue;
                    augustDueBase += amountdueinbase;
                } else if (cal.get(Calendar.MONTH) == Constants.Months_According_To_Indices.get(Constants.September)) {
                    septDue += amountdue;
                    septDueBase += amountdueinbase;
                } else if (cal.get(Calendar.MONTH) == Constants.Months_According_To_Indices.get(Constants.October)) {
                    octDue += amountdue;
                    octDueBase += amountdueinbase;
                } else if (cal.get(Calendar.MONTH) == Constants.Months_According_To_Indices.get(Constants.November)) {
                    novDue += amountdue;
                    novDueBase += amountdueinbase;
                } else if (cal.get(Calendar.MONTH) == Constants.Months_According_To_Indices.get(Constants.December)) {
                    decDue += amountdue;
                    decDueBase += amountdueinbase;
                }
            
            }

            JSONObject monthObject = new JSONObject();
            monthObject.put("monthid", Constants.Months_According_To_Indices.get(Constants.January));
            monthObject.put("month", "January, " + yearName);
            monthObject.put("balanceInPaymentCurrency", janDue);
            monthObject.put("amountdueinbase", janDueBase);
            monthObject.put("currencysymboltransaction", paymentCurrencySymbol);
            jArr.put(monthObject);
            monthObject = new JSONObject();
            monthObject.put("monthid", Constants.Months_According_To_Indices.get(Constants.February));
            monthObject.put("month", "February, " + yearName);
            monthObject.put("balanceInPaymentCurrency", febDue);
            monthObject.put("amountdueinbase", febDueBase);
            monthObject.put("currencysymboltransaction", paymentCurrencySymbol);
            jArr.put(monthObject);
            monthObject = new JSONObject();
            monthObject.put("monthid", Constants.Months_According_To_Indices.get(Constants.March));
            monthObject.put("month", "March, " + yearName);
            monthObject.put("balanceInPaymentCurrency", marchDue);
            monthObject.put("amountdueinbase", marchDueBase);
            monthObject.put("currencysymboltransaction", paymentCurrencySymbol);
            jArr.put(monthObject);
            monthObject = new JSONObject();
            monthObject.put("monthid", Constants.Months_According_To_Indices.get(Constants.April));
            monthObject.put("month", "April, " + yearName);
            monthObject.put("balanceInPaymentCurrency", aprilDue);
            monthObject.put("amountdueinbase", aprilDueBase);
            monthObject.put("currencysymboltransaction", paymentCurrencySymbol);
            jArr.put(monthObject);
            monthObject = new JSONObject();
            monthObject.put("monthid", Constants.Months_According_To_Indices.get(Constants.May));
            monthObject.put("month", "May, " + yearName);
            monthObject.put("balanceInPaymentCurrency", mayDue);
            monthObject.put("amountdueinbase", mayDueBase);
            monthObject.put("currencysymboltransaction", paymentCurrencySymbol);
            jArr.put(monthObject);
            monthObject = new JSONObject();
            monthObject.put("monthid", Constants.Months_According_To_Indices.get(Constants.June));
            monthObject.put("month", "June, " + yearName);
            monthObject.put("balanceInPaymentCurrency", juneDue);
            monthObject.put("amountdueinbase", juneDueBase);
            monthObject.put("currencysymboltransaction", paymentCurrencySymbol);
            jArr.put(monthObject);
            monthObject = new JSONObject();
            monthObject.put("monthid", Constants.Months_According_To_Indices.get(Constants.July));
            monthObject.put("month", "July, " + yearName);
            monthObject.put("balanceInPaymentCurrency", julyDue);
            monthObject.put("amountdueinbase", julyDueBase);
            monthObject.put("currencysymboltransaction", paymentCurrencySymbol);
            jArr.put(monthObject);
            monthObject = new JSONObject();
            monthObject.put("monthid", Constants.Months_According_To_Indices.get(Constants.August));
            monthObject.put("month", "August, " + yearName);
            monthObject.put("balanceInPaymentCurrency", augustDue);
            monthObject.put("amountdueinbase", augustDueBase);
            monthObject.put("currencysymboltransaction", paymentCurrencySymbol);
            jArr.put(monthObject);
            monthObject = new JSONObject();
            monthObject.put("monthid", Constants.Months_According_To_Indices.get(Constants.September));
            monthObject.put("month", "September, " + yearName);
            monthObject.put("balanceInPaymentCurrency", septDue);
            monthObject.put("amountdueinbase", septDueBase);
            monthObject.put("currencysymboltransaction", paymentCurrencySymbol);
            jArr.put(monthObject);
            monthObject = new JSONObject();
            monthObject.put("monthid", Constants.Months_According_To_Indices.get(Constants.October));
            monthObject.put("month", "October, " + yearName);
            monthObject.put("balanceInPaymentCurrency", octDue);
            monthObject.put("amountdueinbase", octDueBase);
            monthObject.put("currencysymboltransaction", paymentCurrencySymbol);
            jArr.put(monthObject);
            monthObject = new JSONObject();
            monthObject.put("monthid", Constants.Months_According_To_Indices.get(Constants.November));
            monthObject.put("month", "November, " + yearName);
            monthObject.put("balanceInPaymentCurrency", novDue);
            monthObject.put("amountdueinbase", novDueBase);
            monthObject.put("currencysymboltransaction", paymentCurrencySymbol);
            jArr.put(monthObject);
            monthObject = new JSONObject();
            monthObject.put("monthid", Constants.Months_According_To_Indices.get(Constants.December));
            monthObject.put("month", "December, " + yearName);
            monthObject.put("balanceInPaymentCurrency", decDue);
            monthObject.put("amountdueinbase", decDueBase);
            monthObject.put("currencysymboltransaction", paymentCurrencySymbol);
            jArr.put(monthObject);
        } catch (Exception ex) {
            throw ServiceException.FAILURE("accInvoiceControllerCMN.getMonthWiseInvoicesAmountDueJson : " + ex.getMessage(), ex);
        }
        return jArr;
    }
        
    public ModelAndView getMonthWiseInvoices(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        boolean issuccess = false;
        String msg = "";
        try {
            HashMap requestParams = AccInvoiceServiceHandler.getInvoiceRequestMap(request);
            KwlReturnObject result = accInvoiceDAOobj.getInvoices(requestParams);
                List list = result.getEntityList();
            boolean isEdit = request.getParameter("isEdit") == null ? false : Boolean.parseBoolean(request.getParameter("isEdit"));
            requestParams.put("isEdit", isEdit);
            HashSet invoicesList = new HashSet();
            if (isEdit && !StringUtil.isNullOrEmpty(request.getParameter("billId").toString())) {
                KwlReturnObject receiptResult = accountingHandlerDAOobj.getObject(Receipt.class.getName(), request.getParameter("billId").toString());
                Receipt receipt = (Receipt) receiptResult.getEntityList().get(0);
                Set<ReceiptDetail> receiptDetails = receipt.getRows();
                for (ReceiptDetail receiptDetail : receiptDetails) {
                    invoicesList.add(receiptDetail.getInvoice().getID());
                }
                    }
            request.setAttribute("getOnlyAmountDueInJson", false);

            JSONArray DataJArr = new JSONArray();
            DataJArr = getInvoiceJsonForPayment(request, list, invoicesList).getJSONArray(Constants.data);
            JSONArray openingBalanceInvoicesJsonArray = getOpeningBalanceInvoicesJsonArray(request, DataJArr,invoicesList);     //ERP-41122
            int count = DataJArr.length();

            jobj.put(Constants.data, DataJArr);
                jobj.put("count", count);
            issuccess = true;
        } catch (SessionExpiredException ex) {
            msg = ex.getMessage();
            Logger.getLogger(accGoodsReceiptController.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ServiceException ex) {
            msg = ex.getMessage();
            Logger.getLogger(accGoodsReceiptController.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            msg = "accInvoiceControllerCMN.getMonthWiseInvoices : " + ex.getMessage();
        } finally {
            try {
                jobj.put("success", issuccess);
                jobj.put("msg", msg);
            } catch (JSONException ex) {
                Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return new ModelAndView(Constants.jsonView, "model", jobj.toString());
    }
    
          /*
     * Set dimension values and custom fields for Global Section only
     */
    public String returnGlobalLevelCustomFieldDimensionValues(List lst, AccCustomData accCustomData, boolean iscustomfield, DateFormat df) {
        StringBuilder appendimensionString = new StringBuilder();
        try {
            HashMap<String, Object> CustomRequestParams = new HashMap<String, Object>();
            for (int cnt = 0; cnt < lst.size(); cnt++) {
                String data = "";
                FieldParams tmpcontyp = (FieldParams) lst.get(cnt);
                if (accCustomData != null) {
                    String coldata = accCustomData.getCol(tmpcontyp.getColnum());
                    if (!StringUtil.isNullOrEmpty(coldata)) {
                        int fieldType = tmpcontyp.getFieldtype();
                        DateFormat defaultDateFormat= new SimpleDateFormat(Constants.MMMMdyyyy);
                        switch (fieldType) {
                            case 3:
                                if (df != null) {
                                    try {
                                        Date dateFromDB = defaultDateFormat.parse(coldata);
                                        data = df.format(dateFromDB);
                                    } catch (ParseException p) {
                                        data = coldata;
                                    }
                                } else {
                                    data = coldata;
                                }
                                break;
                            case 4:
                                CustomRequestParams.clear();
                                CustomRequestParams.put(Constants.filter_names, Arrays.asList(FieldConstants.Crm_id, FieldConstants.Crm_deleteflag));
                                CustomRequestParams.put(Constants.filter_values, Arrays.asList(coldata, 0));
                                KwlReturnObject customresult = accAccountDAOobj.getCustomCombodata(CustomRequestParams);
                                if (customresult != null) {
                                    List customDataList = customresult.getEntityList();
                                    Iterator cite = customDataList.iterator();
                                    while (cite.hasNext()) {
                                        Object[] row = (Object[]) cite.next();
                                        FieldComboData combodata = (FieldComboData) row[0];
                                        data = combodata.getValue();
            }
        }
                                break;
                            case 12:
                                String fieldid = tmpcontyp.getId();
                                HashMap<String, Object> checkListRequestParams = new HashMap<String, Object>();
                                String Colsplit[] = coldata.split(",");
                                for (int i = 0; i < Colsplit.length; i++) {
                                    coldata = Colsplit[i];
                                    checkListRequestParams.put(Constants.filter_names, Arrays.asList(FieldConstants.Crm_id, FieldConstants.Crm_deleteflag));
                                    checkListRequestParams.put(Constants.filter_values, Arrays.asList(coldata, 0));
                                    ArrayList order_by = new ArrayList();
                                    ArrayList order_type = new ArrayList();
                                    order_by.add("itemsequence");
                                    order_type.add("asc");
                                    checkListRequestParams.put("order_by", order_by);
                                    checkListRequestParams.put("order_type", order_type);
                                    KwlReturnObject checkListresult = accAccountDAOobj.getCustomCombodata(checkListRequestParams);
                                    List checklst = checkListresult.getEntityList();
                                    Iterator checkite = checklst.iterator();
                                    while (checkite.hasNext()) {
                                        Object[] row = (Object[]) checkite.next();
                                        FieldComboData checkfield = (FieldComboData) row[0];
                                        data += checkfield.getValue() + ",";
    }
                                }
                                data = data.substring(0, data.length() - 1);
                                break;
                            case 13:
                                data = coldata.replaceAll("(\r\n|\n\r|\r|\n)", "<br />");
                                break;
                            default:
                                data = coldata;
                                break;
                        }
                    } else {
                        data = "";
                    }
                }

                if (!StringUtil.isNullOrEmpty(data)) {
                    if (iscustomfield) { //For global level customfields
                        String dimensionPlaceholder = CustomDesignerConstants.CustomFieldKeyValuePair;
                        dimensionPlaceholder = dimensionPlaceholder.replace(CustomDesignerConstants.CustomFieldLabel, tmpcontyp.getFieldlabel());
                        dimensionPlaceholder = dimensionPlaceholder.replace(CustomDesignerConstants.CustomFieldValue, data);
                        appendimensionString.append(dimensionPlaceholder);
                    } else {//for global level dimensions
                        String dimensionPlaceholder = CustomDesignerConstants.DimensionKeyValuePair;
                        dimensionPlaceholder = dimensionPlaceholder.replace(CustomDesignerConstants.DimensionLabel, tmpcontyp.getFieldlabel());
                        dimensionPlaceholder = dimensionPlaceholder.replace(CustomDesignerConstants.DimensionValue, data);
                        appendimensionString.append(dimensionPlaceholder);
                    }
                }
                
            }
        } catch (Exception ex) {
        }
        return appendimensionString.toString();
    }  
    
    public ModelAndView getMonthlySalesByProductSubjectToGSTReport(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        boolean issuccess = false;
        String msg = "";
        int count = 0;
        try {
            JSONArray jArr = new JSONArray();
            JSONObject tempObj = getMonthlySalesByProductSubjectToGSTReport(request, false);
            jArr = tempObj.getJSONArray(Constants.data);
            count = tempObj.getInt("count");
            JSONArray monthArray = getMonthsJSONArrayForGST(request);
            if (jArr.length() == 0) {
                jArr.put(new JSONObject().put("months", monthArray));
            } else {
                JSONObject firstObject = jArr.getJSONObject(0);
                firstObject.put("months", monthArray);
            }
            jobj.put(Constants.data, jArr);
            jobj.put("count", count);
            issuccess = true;
        } catch (SessionExpiredException | ServiceException ex) {
            msg = ex.getMessage();
            Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
        }  catch (Exception ex) {
            ex.printStackTrace();
            msg = "" + ex.getMessage();
            Logger.getLogger(accInvoiceController.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                jobj.put("success", issuccess);
                jobj.put("msg", msg);
            } catch (JSONException ex) {
                Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return new ModelAndView(Constants.jsonView, "model", jobj.toString());
    }
    
    private JSONObject getMonthlySalesByProductSubjectToGSTReport(HttpServletRequest request, boolean isForExport) throws JSONException, SessionExpiredException, ServiceException, ParseException {
        JSONObject jobj = new JSONObject();
        JSONArray DataJArr = new JSONArray();
        DateFormat df = authHandler.getDateOnlyFormat();
        final DateTimeFormatter dtf = DateTimeFormat.forPattern("MMMM, yyyy");
        Date startDate = dtf.parseLocalDate(request.getParameter("stdate")).toDate();
        Date endDate = dtf.parseLocalDate(request.getParameter("enddate")).toDate();
        String companyid = sessionHandlerImpl.getCompanyid(request);
        LocalDate localStartDate = new LocalDate(startDate);
        LocalDate localEndDate = new LocalDate(endDate);

        startDate = localStartDate.toDateTimeAtCurrentTime().dayOfMonth().withMinimumValue().toDate();
        endDate = localEndDate.toDateTimeAtCurrentTime().dayOfMonth().withMaximumValue().toDate();
        
        Calendar startDateCal = Calendar.getInstance();
        startDateCal.setTime(startDate);
        startDateCal.set(Calendar.HOUR_OF_DAY, 00);
        startDateCal.set(Calendar.MINUTE, 00);
        startDateCal.set(Calendar.SECOND, 00);
        startDateCal.set(Calendar.MILLISECOND, 00);
        String startDateCalString = authHandler.getDateOnlyFormat().format(startDateCal.getTime());
        Date startDateCalDate = authHandler.getDateOnlyFormat().parse(startDateCalString);
        startDate = startDateCalDate;
            
        Calendar endDateCal = Calendar.getInstance();
        endDateCal.setTime(endDate);
        endDateCal.set(Calendar.HOUR_OF_DAY, 00);
        endDateCal.set(Calendar.MINUTE, 00);
        endDateCal.set(Calendar.SECOND, 00);
        endDateCal.set(Calendar.MILLISECOND, 00);
        String endDateCalString = authHandler.getDateOnlyFormat().format(endDateCal.getTime());
        Date endDateCalDate = authHandler.getDateOnlyFormat().parse(endDateCalString);
        endDate = endDateCalDate;
        
        Calendar cal = Calendar.getInstance();
        cal.setTime(startDate);

        cal.setTime(endDate);

        HashMap<String, Object> requestParams1 = AccountingManager.getGlobalParams(request);
        requestParams1.put("fromDate", df.format(startDate));
        requestParams1.put("toDate", df.format(startDate));
        requestParams1.put("ss", request.getParameter("ss"));
        requestParams1.put("df1", authHandler.getDateOnlyFormat());
        requestParams1.put(Constants.companyKey, AccountingManager.getCompanyidFromRequest(request));

        if (!isForExport) {
            String start = request.getParameter("start");
            String limit = request.getParameter("limit");
            requestParams1.put("start", start);
            requestParams1.put("limit", limit);
            if(!StringUtil.isNullOrEmpty(request.getParameter("productTypeID"))){
                requestParams1.put("productTypeID", request.getParameter("productTypeID") != null ? request.getParameter("productTypeID") : "");
            }
         }

        KwlReturnObject result = accProductObj.getProductList((Map) requestParams1);
        List<Product> list = result.getEntityList();
        int count = result.getRecordTotalCount();
        requestParams1.remove("fromDate");
        requestParams1.remove("toDate");
        LocalDate templocalStartDate = localStartDate;
        // just a trick to include the last month as well
        localEndDate = localEndDate.plus(Period.months(1));
        if (list != null) {
            for (Product proObj : list) {
                double totalProSalesFor0PerGST = 0;
                double totalProSalesFor7PerGST = 0;
                List ll = null;
                JSONObject obj = null;
                localStartDate = templocalStartDate;
                while (localStartDate.isBefore(localEndDate)) {
                    DateTime date = localStartDate.toDateTime(LocalTime.MIDNIGHT);
                    Date startDate1, endDate1;

                    DateTime firstDateOfMonth = date.dayOfMonth().withMinimumValue();
                    Date tempDate = firstDateOfMonth.toDate();
                    Calendar cal1 = Calendar.getInstance();
                    cal1.setTime(tempDate);
                    cal1.set(Calendar.HOUR_OF_DAY, 00);
                    cal1.set(Calendar.MINUTE, 00);
                    cal1.set(Calendar.SECOND, 00);
                    cal1.set(Calendar.MILLISECOND, 00);
                    String cal1String = authHandler.getDateOnlyFormat().format(cal1.getTime());
                    Date cal1Date = authHandler.getDateOnlyFormat().parse(cal1String);
                    startDate1 = cal1Date;

                    DateTime lastDateOfMonth = date.dayOfMonth().withMaximumValue();
                    lastDateOfMonth.plusDays(1);

                    Calendar endcal = Calendar.getInstance();
                    Date tempEndDate = lastDateOfMonth.toDate();
                    endcal.setTime(tempEndDate);
                    endcal.set(Calendar.HOUR_OF_DAY, 23);
                    endcal.set(Calendar.MINUTE, 59);
                    endcal.set(Calendar.SECOND, 59);
                    endcal.set(Calendar.MILLISECOND, 00);
                    String endcalString = authHandler.getDateOnlyFormat().format(endcal.getTime());
                    Date endcalDate = authHandler.getDateOnlyFormat().parse(endcalString);
                    endDate1 = endcalDate;

                    LocalDate invoiceDate = new LocalDate(startDate1);
                    String monthYear = invoiceDate.toString("MMM yyyy");

                    SimpleDateFormat sdf = new SimpleDateFormat();
                    sdf.applyPattern(Constants.DATEFORMATINGPATTERN);
                    requestParams1.put("fromDate", startDate1);
                    requestParams1.put("toDate", endDate1);

                    ll = getTotalSalesCostForGST(requestParams1, proObj.getID());
                    totalProSalesFor0PerGST = (Double) ll.get(2);
                    totalProSalesFor7PerGST = (Double) ll.get(3);

                    obj = new JSONObject();
                    obj.put("monthYear0PerGST", monthYear + " (0% GST)");
                    obj.put("amount0PerGST", totalProSalesFor0PerGST);
                    
                    obj.put("monthYear7PerGST", monthYear + " (7% GST)");
                    obj.put("amount7PerGST", totalProSalesFor7PerGST);
                    
                    obj.put("productid", proObj.getID());
                    obj.put("productname", proObj.getName());
                    
                    DataJArr.put(obj);
                    
                    localStartDate = localStartDate.plus(Period.months(1));
                } // end looping thru the months
                }
                }

        List monthList = getMonthListForGST(request.getParameter("stdate"), request.getParameter("enddate"), "MMMM, yyyy");
        monthList.add("Total");

        Map productMap = new HashMap();
        for (int invIndex = 0; invIndex < DataJArr.length(); invIndex++) {
            JSONObject product = DataJArr.getJSONObject(invIndex);
            String productid = product.getString("productid");
            Double invoiceAmount0PerGST = product.getDouble("amount0PerGST");
            String monthYear0PerGST = product.getString("monthYear0PerGST");
            Double invoiceAmount7PerGST = product.getDouble("amount7PerGST");
            String monthYear7PerGST = product.getString("monthYear7PerGST");
            if (productMap.containsKey(productid)) {
                Map monthlySalesMap = (HashMap) productMap.get(productid);
                if (monthlySalesMap == null) {
                    monthlySalesMap = new HashMap();
                    monthlySalesMap.put(monthYear0PerGST, invoiceAmount0PerGST);
                    monthlySalesMap.put(monthYear7PerGST, invoiceAmount7PerGST);
                } else {
                    Double monthlySalesAmount0GST = (Double) monthlySalesMap.get(monthYear0PerGST);
                    if (monthlySalesAmount0GST == null) {
                        monthlySalesMap.put(monthYear0PerGST, invoiceAmount0PerGST);
                    } else {
                        double amount = monthlySalesAmount0GST.doubleValue();
                        amount += invoiceAmount0PerGST.doubleValue();
                        monthlySalesMap.put(monthYear0PerGST, new Double(amount));
                }
                    
                    Double monthlySalesAmount7GST = (Double) monthlySalesMap.get(monthYear7PerGST);
                    if (monthlySalesAmount7GST == null) {
                        monthlySalesMap.put(monthYear7PerGST, invoiceAmount7PerGST);
                    } else {
                        double amount = monthlySalesAmount7GST.doubleValue();
                        amount += invoiceAmount7PerGST.doubleValue();
                        monthlySalesMap.put(monthYear7PerGST, new Double(amount));
                }
                }
                if (isForExport) { // total only in export case
                    Map monthlySalesTotalMap = new HashMap();
                    if (productMap.containsKey("Total")) {
                        monthlySalesTotalMap = (HashMap) productMap.get("Total");
                        if (monthlySalesTotalMap.containsKey(monthYear0PerGST)) {
                            double totalAmount = (Double) monthlySalesTotalMap.get(monthYear0PerGST);
                            totalAmount += invoiceAmount0PerGST;
                            monthlySalesTotalMap.put(monthYear0PerGST, totalAmount);
                        } else {
                            monthlySalesTotalMap.put(monthYear0PerGST, invoiceAmount0PerGST);
                }
                        productMap.put("Total", monthlySalesTotalMap);
                    } else {
                        monthlySalesTotalMap = new HashMap();
                        monthlySalesTotalMap.put(monthYear0PerGST, invoiceAmount0PerGST);
                        productMap.put("Total", monthlySalesTotalMap);
            }
            
                    monthlySalesTotalMap = new HashMap();
                    if (productMap.containsKey("Total")) {
                        monthlySalesTotalMap = (HashMap) productMap.get("Total");
                        if (monthlySalesTotalMap.containsKey(monthYear7PerGST)) {
                            double totalAmount = (Double) monthlySalesTotalMap.get(monthYear7PerGST);
                            totalAmount += invoiceAmount7PerGST;
                            monthlySalesTotalMap.put(monthYear7PerGST, totalAmount);
            } else {
                            monthlySalesTotalMap.put(monthYear7PerGST, invoiceAmount7PerGST);
            }
                        productMap.put("Total", monthlySalesTotalMap);
                    } else {
                        monthlySalesTotalMap = new HashMap();
                        monthlySalesTotalMap.put(monthYear7PerGST, invoiceAmount7PerGST);
                        productMap.put("Total", monthlySalesTotalMap);
                    }
                }
            } else {
                Map monthlySalesMap = new HashMap();
                monthlySalesMap.put(monthYear0PerGST, invoiceAmount0PerGST);

                if (isForExport) {
                    Map monthlySalesTotalMap = new HashMap();
                    if (productMap.containsKey("Total")) {
                        monthlySalesTotalMap = (HashMap) productMap.get("Total");
                        if (monthlySalesTotalMap.containsKey(monthYear0PerGST)) {
                            double totalAmount = (Double) monthlySalesTotalMap.get(monthYear0PerGST);
                            totalAmount += invoiceAmount0PerGST;
                            monthlySalesTotalMap.put(monthYear0PerGST, totalAmount);
                        } else {
                            monthlySalesTotalMap.put(monthYear0PerGST, invoiceAmount0PerGST);
                        }
                        productMap.put("Total", monthlySalesTotalMap);
                    } else {
                        monthlySalesTotalMap = new HashMap();
                        monthlySalesTotalMap.put(monthYear0PerGST, invoiceAmount0PerGST);
                        productMap.put("Total", monthlySalesTotalMap);
                    }
                }

                monthlySalesMap.put(monthYear7PerGST, invoiceAmount7PerGST);
                productMap.put(productid, monthlySalesMap);

                if (isForExport) {
                    Map monthlySalesTotalMap = new HashMap();
                    if (productMap.containsKey("Total")) {
                        monthlySalesTotalMap = (HashMap) productMap.get("Total");
                        if (monthlySalesTotalMap.containsKey(monthYear7PerGST)) {
                            double totalAmount = (Double) monthlySalesTotalMap.get(monthYear7PerGST);
                            totalAmount += invoiceAmount7PerGST;
                            monthlySalesTotalMap.put(monthYear7PerGST, totalAmount);
                        } else {
                            monthlySalesTotalMap.put(monthYear7PerGST, invoiceAmount7PerGST);
        }
                        productMap.put("Total", monthlySalesTotalMap);
                    } else {
                        monthlySalesTotalMap = new HashMap();
                        monthlySalesTotalMap.put(monthYear7PerGST, invoiceAmount7PerGST);
                        productMap.put("Total", monthlySalesTotalMap);
    }
                }
            }
        }
        
        JSONArray jArr = new JSONArray(); // final data
        int size = monthList.size();
        double[] monthlyTotal = new double[size];
        double grandTotal = 0.0;
        for (Product proObj : list) {
            String productid = proObj.getID();
            if (productMap.containsKey(productid)) {
                Map monthlySalesMap = (HashMap) productMap.get(productid);
                JSONObject obj = new JSONObject();
                obj.put("productid", productid);
                obj.put("productname", proObj.getName());
                obj.put("pid", proObj.getProductid());
                obj.put("salesAccountName", (proObj.getSalesAccount() != null) ? proObj.getSalesAccount().getAccountName() : "");
                double totalSalesAmount = 0.00;

                for (int i = 0; i < monthList.size() - 1; i++) {
                    String monthYear = (String) monthList.get(i);

                    if (monthlySalesMap.containsKey(monthYear)) {
        
                        double monthlySalesAmount = ((Double) monthlySalesMap.get(monthYear)).doubleValue();
                        totalSalesAmount += authHandler.round(monthlySalesAmount, companyid);
            
                        if (isForExport) {
                            obj.put("amount_" + i, authHandler.formattedAmount(monthlySalesAmount, companyid));
                        } else {
                            obj.put("amount_" + i, authHandler.round(monthlySalesAmount, companyid));
                }

                        monthlyTotal[i] = 0.0 + monthlyTotal[i] + monthlySalesAmount; // add month total for all product
                    } else {
                        if (isForExport) {
                            obj.put("amount_" + i, authHandler.formattedAmount(0, companyid));
                        } else {
                            obj.put("amount_" + i, authHandler.formattedAmount(0, companyid));
                }
                }
                }
                grandTotal = grandTotal + totalSalesAmount; // grand total for all product   
                if (isForExport) {
                    obj.put("amountinbase", authHandler.formattedAmount(totalSalesAmount, companyid));
                } else {
                    obj.put("amountinbase", authHandler.round(totalSalesAmount, companyid));
                }
                if (obj.optString("productid", "").equals("Total")) {
                    obj.put("productname", "Total");
                } else {
                    jArr.put(obj);
                }
                }
                }
        jobj.put(Constants.data, jArr);
        jobj.put("count", count);
        return jobj;
            }
            
    public ModelAndView exportMonthlySalesByProductSubjectToGSTReport(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        String view = "jsonView_ex";
        try {
            JSONArray jArr = new JSONArray();
            int count = 0;
            boolean isBasedOnProduct = request.getParameter("isBasedOnProduct") != null ? Boolean.parseBoolean(request.getParameter("isBasedOnProduct")) : false;
            if (isBasedOnProduct) {
                JSONObject tempObj = getMonthlySalesByProductSubjectToGSTReport(request, true);
                jArr = tempObj.getJSONArray(Constants.data);
            } else {
                JSONObject json = getMonthlySales(request, true);
                if (json.has(Constants.data) && json.get(Constants.data) != null) {
                    jArr = json.getJSONArray(Constants.data);
                }
            }

            jobj.put(Constants.data, jArr);

            String fileType = request.getParameter("filetype");
            if (StringUtil.equal(fileType, "print")) {
                String stDate = request.getParameter("stdate");
                String edDate = request.getParameter("enddate");
                if (!StringUtil.isNullOrEmpty(stDate) && !StringUtil.isNullOrEmpty(edDate)) {
                    DateTimeFormatter dtf = DateTimeFormat.forPattern("MMMM, yyyy");
                    Date startDate = dtf.parseLocalDate(request.getParameter("stdate")).toDate();
                    Date endDate = dtf.parseLocalDate(request.getParameter("enddate")).toDate();

                    LocalDate localStartDate = new LocalDate(startDate);
                    LocalDate localEndDate = new LocalDate(endDate);

                    startDate = localStartDate.toDateTimeAtCurrentTime().dayOfMonth().withMinimumValue().toDate();
                    endDate = localEndDate.toDateTimeAtCurrentTime().dayOfMonth().withMaximumValue().toDate();
                    startDate.setHours(00);
                    startDate.setMinutes(00);
                    startDate.setSeconds(00);

                    endDate.setHours(00);
                    endDate.setMinutes(00);
                    endDate.setSeconds(00);
                    stDate = authHandler.getDateOnlyFormat().format(startDate);
                    edDate = authHandler.getDateOnlyFormat().format(endDate);
                    jobj.put("isFromToDateRequired", true);
                    jobj.put("stdate", stDate);
                    jobj.put("enddate", edDate);
                } else {
                    String GenerateDate = authHandler.getDateOnlyFormat().format(new Date());
                    jobj.put("GenerateDate", GenerateDate);
                }
                view = "jsonView-empty";
            }
            exportDaoObj.processRequest(request, response, jobj);
        } catch (SessionExpiredException ex) {
            Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
            }
        return new ModelAndView(view, "model", jobj.toString());
    }
    
    private List getMonthListForGST(String startDateStr, String endDateStr, String datePattern) {
        List<String> monthList = new ArrayList();

        final DateTimeFormatter dtf = DateTimeFormat.forPattern(datePattern);
        Date startDate = dtf.parseLocalDate(startDateStr).toDate();
        Date endDate = dtf.parseLocalDate(endDateStr).toDate();

        // we need to include the month of the end date as well
        LocalDate localStartDate = new LocalDate(startDate);
        LocalDate localEndDate = new LocalDate(endDate);

        Calendar cal = Calendar.getInstance();
        cal.setTime(localStartDate.toDate());
        int startMonth = cal.get(Calendar.MONTH);
        int startYear = cal.get(Calendar.YEAR);

        cal.setTime(localEndDate.toDate());
        int endMonth = cal.get(Calendar.MONTH);
        int endYear = cal.get(Calendar.YEAR);

        // if user selects same month & year for both start & end fields, we get the last date of the month to populate into the endDate
        if (startMonth == endMonth && startYear == endYear) {
            monthList.add(localStartDate.toString("MMM yyyy") + " (7% GST)");
            monthList.add(localStartDate.toString("MMM yyyy") + " (0% GST)");
                        } else {
            // just a trick to include the last month as well
            localEndDate = localEndDate.plus(Period.months(1));

            while (localStartDate.isBefore(localEndDate)) {
                monthList.add(localStartDate.toString("MMM yyyy") + " (7% GST)");
                monthList.add(localStartDate.toString("MMM yyyy") + " (0% GST)");
                localStartDate = localStartDate.plus(Period.months(1));
                    }
            localStartDate = new LocalDate(startDate);
                }
        return monthList;
                }

    private JSONArray getMonthsJSONArrayForGST(HttpServletRequest request) throws JSONException {
        List monthList = getMonthListForGST(request.getParameter("stdate"), request.getParameter("enddate"), "MMMM, yyyy");
        JSONArray monthArray = new JSONArray();
        for (int i = 0; i < monthList.size(); i++) {
            JSONObject monthObj = new JSONObject();
            monthObj.put("monthname", monthList.get(i));
            monthArray.put(monthObj);
                    }
        return monthArray;
                    }

    public List getTotalSalesCostForGST(HashMap<String, Object> requestParams, String productid) throws ServiceException, ParseException {
        List ll = new ArrayList();
        try {
            DateFormat sdf = authHandler.getDateOnlyFormat();
            DateFormat df1 = (DateFormat) requestParams.get("df1");
            Date fromDate = (Date) requestParams.get("fromDate");
            fromDate = df1.parse(sdf.format(fromDate));
            Date toDate = (Date) requestParams.get("toDate");
            toDate = df1.parse(sdf.format(toDate));
            HashMap<String, Object> requestParams1 = new HashMap();
            String companyid = (String) requestParams.get(Constants.companyKey);
            requestParams1.put(Constants.companyKey, companyid);
            KwlReturnObject invoiceDetailResult = accInvoiceDAOobj.getInvoiceProductDetails(productid, fromDate, toDate, requestParams1);
            List<InvoiceDetail> invDetailList = invoiceDetailResult.getEntityList();
            double totalQuantityOut = 0;
            double totalProSales = 0;
            double totalProSalesFor0PerGST = 0;
            double totalProSalesFor7PerGST = 0;
            if (invDetailList != null) {
                for (InvoiceDetail invDetail : invDetailList) {
                    double taxPercentage = -1;
                    if (invDetail.getTax() != null) {
                        KwlReturnObject taxListResult = accountingHandlerDAOobj.getObject(TaxList.class.getName(), invDetail.getTax().getID());
                        TaxList taxList = (TaxList) taxListResult.getEntityList().get(0);
                        if (taxList != null) {
                            taxPercentage = taxList.getPercent();
                    }
                    } else if (invDetail.getInvoice() != null && invDetail.getInvoice().getTax() != null) {
                        KwlReturnObject taxListResult = accountingHandlerDAOobj.getObject(TaxList.class.getName(), invDetail.getInvoice().getTax().getID());
                        TaxList taxList = (TaxList) taxListResult.getEntityList().get(0);
                        if (taxList != null) {
                            taxPercentage = taxList.getPercent();
                    }
                }
                                
                    double temqua = 0;
                    double invProSales = 0;
                    HashMap hm = accInvoiceServiceDAO.applyCreditNotes(requestParams, invDetail.getInvoice());
                    if (hm.containsKey(invDetail)) {
                        Object[] val = (Object[]) hm.get(invDetail);
                        invProSales = (Double) val[3]; // formula: (rate*quantity)-rowdiscount-invdiscount-cnamount[PS]
                        temqua = (Double) val[1];
                        KwlReturnObject crresult = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, invProSales, invDetail.getInvoice().getCurrency().getCurrencyID(), invDetail.getInvoice().getCreationDate(), invDetail.getInvoice().getExternalCurrencyRate());
                        invProSales = (Double) crresult.getEntityList().get(0);
                        totalQuantityOut += temqua;
                        totalProSales += invProSales;

                        if (taxPercentage == 7) {
                            totalProSalesFor7PerGST += invProSales;
                        } else if (taxPercentage == 0) {
                            totalProSalesFor0PerGST += invProSales;
                    }
                    }
                }
            }
            ll.add(0, totalProSales);
            ll.add(1, totalQuantityOut);
            ll.add(2, totalProSalesFor0PerGST);
            ll.add(3, totalProSalesFor7PerGST);
        } catch (Exception ex) {
            throw ServiceException.FAILURE("getSalesByItem : " + ex.getMessage(), ex);
            }
        return ll;
        }

    public ModelAndView getSalesByServiceProductDetailReport(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        boolean issuccess = false;
        String msg = "";
        try {
            jobj = accInvoiceCommon.getSalesByServiceProductDetailReport(request, false);
            issuccess = true;
        } catch (Exception ex) {
            msg = "" + ex.getMessage();
            Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                jobj.put("success", issuccess);
                jobj.put("msg", msg);
            } catch (JSONException ex) {
                Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return new ModelAndView("jsonView_ex", "model", jobj.toString());
    }


    public ModelAndView exportSalesByServiceProductDetailReport(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        String view = "jsonView_ex";
        try {
            jobj = accInvoiceCommon.getSalesByServiceProductDetailReport(request, true);

            String fileType = request.getParameter("filetype");
            if (StringUtil.equal(fileType, "print")) {
                String startDate = request.getParameter("startdate");
                String endDate = request.getParameter("enddate");
                if (!StringUtil.isNullOrEmpty(startDate) && !StringUtil.isNullOrEmpty(startDate)) {
                    startDate = authHandler.getDateOnlyFormat().format(authHandler.getDateOnlyFormat().parse(startDate));
                    endDate = authHandler.getDateOnlyFormat().format(authHandler.getDateOnlyFormat().parse(endDate));
                    jobj.put("isFromToDateRequired", true);
                    jobj.put("stdate", startDate);
                    jobj.put("enddate", endDate);
                } else {
                    authHandler.getDateFormatter(request).format(new Date());
                    String GenerateDate = authHandler.getDateOnlyFormat().format(new Date());
                    jobj.put("GenerateDate", GenerateDate);
                }
                view = "jsonView-empty";
            }
            exportDaoObj.processRequest(request, response, jobj);
            jobj.put("success", true);
        } catch (Exception ex) {
            Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
        }
        return new ModelAndView(view, "model", jobj.toString());
    }

 public ModelAndView getCustomerPartyLedgerSummary(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        boolean issuccess = false;
        JSONObject mainJobj = new JSONObject();
        String msg = "";
        int totalCount = 0;
        try {
            JSONArray invJArr = new JSONArray();
            mainJobj = accInvoiceServiceDAO.getCustomerPartyLedgerSummary(request);
            totalCount = mainJobj.getInt("totalcount");
            invJArr = mainJobj.getJSONArray(Constants.data);
            JSONArray jArr = new JSONArray();
            String start = request.getParameter("start");
            String limit = request.getParameter("limit");
            if (!StringUtil.isNullOrEmpty(start) && !StringUtil.isNullOrEmpty(limit)) {
                int st = Integer.parseInt(start);
                int ed = Math.min(133, st + Integer.parseInt(limit));
                for (int i = st; i < totalCount && i < ed; i++) {
                    jArr.put(invJArr.getJSONObject(i));
                }
            }
            jobj.put(Constants.data, jArr);
            jobj.put("count", totalCount);
            issuccess = true;
        } catch (SessionExpiredException ex) {
            Logger.getLogger(accInvoiceController.class.getName()).log(Level.SEVERE, null, ex);
            issuccess = false;
            msg = ex.getMessage();
        } catch (Exception ex) {
            issuccess = false;
            msg = "accInvoiceController.getCustomerPartyLedgerSummary : " + ex.getMessage();
        } finally {
            try {
                jobj.put("success", issuccess);
                jobj.put("msg", msg);
            } catch (JSONException ex) {
                Logger.getLogger(accInvoiceController.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return new ModelAndView(Constants.jsonView, "model", jobj.toString());
    }

    public ModelAndView exportCustomerPartyLedgerSummary(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        boolean issuccess = false;
        JSONObject mainJobj = new JSONObject();
        String view = "jsonView_ex";
        String msg = "";
        int totalCount = 0;
        try {
            JSONArray invJArr = new JSONArray();
            mainJobj = accInvoiceServiceDAO.getCustomerPartyLedgerSummary(request);
            totalCount = mainJobj.getInt("totalcount");
            invJArr = mainJobj.getJSONArray(Constants.data);
            JSONArray jArr = invJArr;
            jobj.put(Constants.data, jArr);
            jobj.put("count", totalCount);
            String fileType = request.getParameter("filetype");
            if (StringUtil.equal(fileType, "print")) {
                String GenerateDate = authHandler.getDateFormatter(request).format(new Date());
                jobj.put("GenerateDate", GenerateDate);
                view = "jsonView-empty";
            }
            exportDaoObj.processRequest(request, response, jobj);
            issuccess = true;
        } catch (SessionExpiredException ex) {
            Logger.getLogger(accInvoiceController.class.getName()).log(Level.SEVERE, null, ex);
            issuccess = false;
            msg = ex.getMessage();
        } catch (Exception ex) {
            issuccess = false;
            msg = "accInvoiceController.exportCustomerPartyLedgerSummary : " + ex.getMessage();
        } finally {
            try {
                jobj.put("success", issuccess);
                jobj.put("msg", msg);
            } catch (JSONException ex) {
                Logger.getLogger(accInvoiceController.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return new ModelAndView(view, "model", jobj.toString());
    }

    public ModelAndView getCustomerPartyLedgerSummariesedJasper(HttpServletRequest request, HttpServletResponse response) throws ServiceException, SessionExpiredException {
        Map<String, Object> agedReceivableMap = new HashMap<String, Object>();
        String view = "";
        String filename = "";
        AgedReceivable agedReceivable = new AgedReceivable();
        ArrayList<AgedReceivable> agedReceivableList = new ArrayList<AgedReceivable>();
        try {
            int templateflag = Integer.parseInt(request.getParameter("templateflag"));
            view = "PartyLedgerSummarised";
            filename = "PartyLedgerSummarised";

            String companyid = sessionHandlerImpl.getCompanyid(request);
            KwlReturnObject cmpresult = accountingHandlerDAOobj.getObject(Company.class.getName(), companyid);
            Company company = (Company) cmpresult.getEntityList().get(0);

            agedReceivable.setName(company.getCompanyName());
            agedReceivable.setEmail(company.getEmailID() != null ? company.getEmailID() : "");
            agedReceivable.setFax(company.getFaxNumber() != null ? company.getFaxNumber() : "");
            agedReceivable.setPhone(company.getPhoneNumber() != null ? company.getPhoneNumber() : "");
            KWLCurrency currency = company.getCurrency();
            agedReceivable.setCurrencyinword(currency.getName().toString());
            SimpleDateFormat df = new SimpleDateFormat("dd/MM/yyyy");
            String endDate = df.format(authHandler.getGlobalDateFormat().parse(request.getParameter("enddate")));
            Calendar c = Calendar.getInstance();
            c.setTime(df.parse(endDate)); // number of days to substract
            endDate = df.format(c.getTime());
            String startDate = df.format(authHandler.getGlobalDateFormat().parse(request.getParameter("stdate")));
            String date = "From Date : " + startDate + ",To Date : " + endDate;
            agedReceivable.setDateRange(date);
            KwlReturnObject result = accountingHandlerDAOobj.getObject(CompanyAccountPreferences.class.getName(), sessionHandlerImpl.getCompanyid(request));
            CompanyAccountPreferences companyAccountPreferences = (CompanyAccountPreferences) result.getEntityList().get(0);
            String fiscalstart = df.format(companyAccountPreferences.getFinancialYearFrom());
            Calendar c1 = Calendar.getInstance();
            c1.setTime(df.parse(fiscalstart));
            c1.add(Calendar.YEAR, 1); // number of years to add
            c1.add(Calendar.DATE, -1);
            String fiscalend = df.format(c1.getTime());
            String period = fiscalstart + " - " + fiscalend;
            agedReceivable.setStartDate(period);

            ArrayList<PartyLedger> agedReceivableSubReportList = new ArrayList< PartyLedger>();
            JSONArray invJArr = new JSONArray();
            JSONObject mainJobj = accInvoiceServiceDAO.getCustomerPartyLedgerSummary(request);
            invJArr = mainJobj.getJSONArray(Constants.data);
            double open_debit = 0, open_credit = 0, debit = 0, credit = 0, closing = 0;

            PartyLedger pl = null;
            for (int i = 0; i < invJArr.length(); i++) {
                JSONObject jobj = invJArr.getJSONObject(i);
                pl = new PartyLedger();
                if (jobj.has("personname")) {
                    pl.setPerson(jobj.getString("personname"));
                }
                if (jobj.has("code")) {
                    pl.setCode(jobj.getString("code"));
                }
                if (jobj.has("d_open_amount_base")) {
                    pl.setOpen_debit(jobj.getDouble("d_open_amount_base"));
                    open_debit += jobj.getDouble("d_open_amount_base");
                }
                if (jobj.has("c_open_amount_base")) {
                    pl.setOpen_credit(jobj.getDouble("c_open_amount_base"));
                    open_credit += jobj.getDouble("c_open_amount_base");
                }
                if (jobj.has("d_amount_base")) {
                    pl.setDebit(jobj.getDouble("d_amount_base"));
                    debit += jobj.getDouble("d_amount_base");
                }
                if (jobj.has("c_amount_base")) {
                    pl.setCredit(jobj.getDouble("c_amount_base"));
                    credit += jobj.getDouble("c_amount_base");
                }
                if (jobj.has("balance_base")) {
                    pl.setClosing(jobj.getDouble("balance_base"));
                    closing += jobj.getDouble("balance_base");
                }
                agedReceivableSubReportList.add(pl);
            }

            agedReceivableMap.put("open_debit", open_debit);
            agedReceivableMap.put("open_credit", open_credit);
            agedReceivableMap.put("debit", debit);
            agedReceivableMap.put("credit", credit);
            agedReceivableMap.put("closing", closing);
            agedReceivableMap.put("AgedReceivableSubReportData", new JRBeanCollectionDataSource(agedReceivableSubReportList));
            agedReceivableList.add(agedReceivable);
            agedReceivableMap.put("format", "pdf");
            agedReceivableMap.put("person", "Customer");
            String fileName1 = StorageHandler.GetDocStorePath() + companyid + "_template" + FileUploadHandler.getCompanyImageExt();
            String fileName2 = StorageHandler.GetDocStorePath() + companyid + "_onlyLogo" + FileUploadHandler.getCompanyImageExt();
            if (templateflag == Constants.sms_templateflag || templateflag == Constants.smsholding_templateflag) {
                agedReceivableMap.put("imagePath", fileName2);
            } else {
                agedReceivableMap.put("imagePath", fileName1);
            }
            agedReceivableMap.put("basecurr", currency.getName() != null ? currency.getName().toString() : currency.getSymbol());
            agedReceivableMap.put("datasource", new JRBeanCollectionDataSource(agedReceivableList));
            agedReceivableMap.put("companyaddress", AccountingAddressManager.getCompanyDefaultBillingAddress(companyid, accountingHandlerDAOobj));
            InputStream inputStream = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/" + filename + ".jrxml");
            InputStream inputStreamSubReport = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/" + filename + "SubReport" + ".jrxml");
            JasperDesign jasperDesign = JRXmlLoader.load(inputStream);
            JasperReport jasperReport = JasperCompileManager.compileReport(jasperDesign);
            JasperDesign jasperDesignSubReport = JRXmlLoader.load(inputStreamSubReport);
            JasperReport jasperReportSubReport = JasperCompileManager.compileReport(jasperDesignSubReport);
            agedReceivableMap.put("AgedReceivableSubReport", jasperReportSubReport);
            JRBeanCollectionDataSource beanColDataSource = new JRBeanCollectionDataSource(agedReceivableList);
            JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, agedReceivableMap, beanColDataSource);

            JRPdfExporter exp = new JRPdfExporter();
            exp.setParameter(JRPdfExporterParameter.JASPER_PRINT, jasperPrint);
            exp.setParameter(JRPdfExporterParameter.OUTPUT_STREAM, response.getOutputStream());
            response.setHeader("Content-Disposition", "attachment;filename=\"" + filename + "_v1.pdf\"");
            exp.exportReport();

        } catch (Exception ex) {
            Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
        }
        return new ModelAndView(view, agedReceivableMap);
    }

    public ModelAndView getCustomerPartyLedgerDetailsJasper(HttpServletRequest request, HttpServletResponse response) throws ServiceException, SessionExpiredException {
        Map<String, Object> agedReceivableMap = new HashMap<String, Object>();
        String view = "";
        String filename = "";
        AgedReceivable agedReceivable = new AgedReceivable();
        ArrayList<AgedReceivable> agedReceivableList = new ArrayList<AgedReceivable>();
        try {
            int templateflag = Integer.parseInt(request.getParameter("templateflag"));
            view = "PartyLedgerDetails";
            filename = "PartyLedgerDetails";

            String companyid = sessionHandlerImpl.getCompanyid(request);
            KwlReturnObject cmpresult = accountingHandlerDAOobj.getObject(Company.class.getName(), companyid);
            Company company = (Company) cmpresult.getEntityList().get(0);

            agedReceivable.setName(company.getCompanyName());
            agedReceivable.setEmail(company.getEmailID() != null ? company.getEmailID() : "");
            agedReceivable.setFax(company.getFaxNumber() != null ? company.getFaxNumber() : "");
            agedReceivable.setPhone(company.getPhoneNumber() != null ? company.getPhoneNumber() : "");
            KWLCurrency currency = company.getCurrency();
            agedReceivable.setCurrencyinword(currency.getName() != null ? currency.getName().toString() : currency.getSymbol());
            agedReceivable.setAmountDue1Header("Sales Person Name");
            SimpleDateFormat df = new SimpleDateFormat("dd/MM/yyyy");
            String endDate = df.format(authHandler.getGlobalDateFormat().parse(request.getParameter("enddate")));
            Calendar c = Calendar.getInstance();
            c.setTime(df.parse(endDate)); // number of days to substract
            endDate = df.format(c.getTime());
            String startDate = df.format(authHandler.getGlobalDateFormat().parse(request.getParameter("stdate")));
            String date = "From Date : " + startDate + ",To Date : " + endDate;
            agedReceivable.setDateRange(date);
            KwlReturnObject result = accountingHandlerDAOobj.getObject(CompanyAccountPreferences.class.getName(), sessionHandlerImpl.getCompanyid(request));
            CompanyAccountPreferences companyAccountPreferences = (CompanyAccountPreferences) result.getEntityList().get(0);
            String fiscalstart = df.format(companyAccountPreferences.getFinancialYearFrom());
            Calendar c1 = Calendar.getInstance();
            c1.setTime(df.parse(fiscalstart));
            c1.add(Calendar.YEAR, 1); // number of years to add
            c1.add(Calendar.DATE, -1);
            String fiscalend = df.format(c1.getTime());
            String period = fiscalstart + " - " + fiscalend;
            agedReceivable.setStartDate(period);

            ArrayList<PartyLedger> agedReceivableSubReportList = new ArrayList< PartyLedger>();
            JSONArray invJArr = new JSONArray();
            ModelAndView result1 = getCustomerPartyLedgerDetails(request, response);
            String model = (String) result1.getModel().get("model");
            JSONObject objJSONObj = new JSONObject(model);
            invJArr = objJSONObj.getJSONArray(Constants.data);
            double debit = 0, credit = 0;

            PartyLedger pl = null;
            for (int i = 0; i < invJArr.length(); i++) {
                JSONObject jobj = invJArr.getJSONObject(i);
                pl = new PartyLedger();
                if (jobj.has("personname")) {
                    pl.setPerson(jobj.getString("personname"));
                }
                if (jobj.has("type")) {
                    pl.setEntryType(jobj.getString("type"));
                }
                if (jobj.has("currencyname")) {
                    pl.setCurrency(jobj.getString("currencyname"));
                }
                if (jobj.has("code")) {
                    pl.setCode(jobj.getString("code"));
                }
                if (jobj.has("d_amount_base")) {
                    pl.setDebit(jobj.getDouble("d_amount_base"));
                    debit += jobj.getDouble("d_amount_base");
                }
                if (jobj.has("c_amount_base")) {
                    pl.setCredit(jobj.getDouble("c_amount_base"));
                    credit += jobj.getDouble("c_amount_base");
                }
                if (jobj.has("balance_base")) {
                    pl.setClosing(jobj.getDouble("balance_base"));
                }
                pl.setBasecurr(currency.getSymbol() != null ? currency.getSymbol().toString() : currency.getName());
                pl.setSp_agent(jobj.optString("salesPersonName", ""));
                if (jobj.has("Custom_Property Address")) {
                    pl.setPropaddr("Property Address: " + jobj.getString("Custom_Property Address"));
                }
                pl.setDate(jobj.optString("date") != null ? df.format(Date.parse(jobj.getString("date"))) : "");
                pl.setEntryNumber(jobj.optString("billno") != null ? jobj.getString("billno") : "");
                agedReceivableSubReportList.add(pl);
            }

            agedReceivableMap.put("debit", debit);
            agedReceivableMap.put("credit", credit);
            agedReceivableMap.put("closing", debit - credit);
            agedReceivableMap.put("AgedReceivableSubReportData", new JRBeanCollectionDataSource(agedReceivableSubReportList));
            agedReceivableList.add(agedReceivable);
            agedReceivableMap.put("format", "pdf");
            agedReceivableMap.put("person", "Customer");
            String fileName1 = StorageHandler.GetDocStorePath() + companyid + "_template" + FileUploadHandler.getCompanyImageExt();
            String fileName2 = StorageHandler.GetDocStorePath() + companyid + "_onlyLogo" + FileUploadHandler.getCompanyImageExt();
            if (templateflag == Constants.sms_templateflag || templateflag == Constants.smsholding_templateflag) {
                agedReceivableMap.put("imagePath", fileName2);
            } else {
                agedReceivableMap.put("imagePath", fileName1);
            }
            agedReceivableMap.put("basecurr", currency.getName() != null ? currency.getName().toString() : currency.getSymbol());
            agedReceivableMap.put("datasource", new JRBeanCollectionDataSource(agedReceivableList));
            agedReceivableMap.put("companyaddress", AccountingAddressManager.getCompanyDefaultBillingAddress(companyid, accountingHandlerDAOobj));
            InputStream inputStream = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/" + filename + ".jrxml");
            InputStream inputStreamSubReport = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/" + filename + "SubReport" + ".jrxml");
            JasperDesign jasperDesign = JRXmlLoader.load(inputStream);
            JasperReport jasperReport = JasperCompileManager.compileReport(jasperDesign);
            JasperDesign jasperDesignSubReport = JRXmlLoader.load(inputStreamSubReport);
            JasperReport jasperReportSubReport = JasperCompileManager.compileReport(jasperDesignSubReport);
            agedReceivableMap.put("AgedReceivableSubReport", jasperReportSubReport);
            JRBeanCollectionDataSource beanColDataSource = new JRBeanCollectionDataSource(agedReceivableList);
            JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, agedReceivableMap, beanColDataSource);

            JRPdfExporter exp = new JRPdfExporter();
            exp.setParameter(JRPdfExporterParameter.JASPER_PRINT, jasperPrint);
            exp.setParameter(JRPdfExporterParameter.OUTPUT_STREAM, response.getOutputStream());
            response.setHeader("Content-Disposition", "attachment;filename=\"" + filename + "_v1.pdf\"");
            exp.exportReport();

        } catch (Exception ex) {
            Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
        }
        return new ModelAndView(view, agedReceivableMap);
    }

    public ModelAndView exportCustomerPartyLedgerDetails(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        boolean issuccess = false;
        String view = "jsonView_ex";
        String msg = "";
        int totalCount = 0;
        try {
            ModelAndView result = getCustomerPartyLedgerDetails(request, response);
            String model = (String) result.getModel().get("model");
            JSONObject objJSONObj = new JSONObject(model);
            JSONArray DataJArr = objJSONObj.getJSONArray(Constants.data);
            totalCount = DataJArr.length();
            JSONArray jArr = DataJArr;
            jobj.put(Constants.data, jArr);
            jobj.put("count", totalCount);
            String fileType = request.getParameter("filetype");
            if (StringUtil.equal(fileType, "print")) {
                String GenerateDate = authHandler.getDateFormatter(request).format(new Date());
                jobj.put("GenerateDate", GenerateDate);
                view = "jsonView-empty";
            }
            exportDaoObj.processRequest(request, response, jobj);
            issuccess = true;
        } catch (SessionExpiredException ex) {
            Logger.getLogger(accInvoiceController.class.getName()).log(Level.SEVERE, null, ex);
            issuccess = false;
            msg = ex.getMessage();
        } catch (Exception ex) {
            issuccess = false;
            msg = "accInvoiceController.exportCustomerPartyLedgerDetails : " + ex.getMessage();
        } finally {
            try {
                jobj.put("success", issuccess);
                jobj.put("msg", msg);
            } catch (JSONException ex) {
                Logger.getLogger(accInvoiceController.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return new ModelAndView(view, "model", jobj.toString());
    }

    public ModelAndView getCustomerPartyLedgerDetails(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        JSONObject tempObj = new JSONObject();
        JSONArray DataJArr = new JSONArray();
        boolean issuccess = false;
        String fileType = request.getParameter("filetype");
        String msg = "";
        try {
            boolean consolidateFlag = request.getParameter("consolidateFlag") != null ? Boolean.parseBoolean(request.getParameter("consolidateFlag")) : false;
            String[] companyids = (consolidateFlag && request.getParameter(Constants.companyids) != null) ? request.getParameter(Constants.companyids).split(",") : sessionHandlerImpl.getCompanyid(request).split(",");
            String gcurrencyid = (consolidateFlag && request.getParameter(Constants.globalCurrencyKey) != null) ? request.getParameter(Constants.globalCurrencyKey) : sessionHandlerImpl.getCurrencyID(request);
            boolean isAged = request.getParameter("isAged") != null ? Boolean.parseBoolean(request.getParameter("isAged")) : false;
            boolean isForTemplate = false;
            boolean report = false;
            double balance_base = 0;
            int totalCount = 0;

            if (!StringUtil.isNullOrEmpty(request.getParameter("isForTemplate"))) {
                isForTemplate = Boolean.parseBoolean(request.getParameter("isForTemplate"));
            }
            if (!StringUtil.isNullOrEmpty(request.getParameter("report"))) {
                report = Boolean.parseBoolean(request.getParameter("report"));
            }

            HashMap requestParams = AccInvoiceServiceHandler.getInvoiceRequestMap(request);
            String dir = "";
            String sort = "";
            if (!StringUtil.isNullOrEmpty(request.getParameter("dir")) && !StringUtil.isNullOrEmpty(request.getParameter("sort"))) {
                dir = request.getParameter("dir");
                sort = request.getParameter("sort");
                requestParams.put("sort", sort);
                requestParams.put("dir", dir);
            }

            KwlReturnObject userResult = accountingHandlerDAOobj.getObject(User.class.getName(), sessionHandlerImpl.getUserid(request));
            User user = (User) userResult.getEntityList().get(0);
            if (!StringUtil.isNullOrEmpty(user.getDepartment())) {
                requestParams.put("userDepartment", user.getDepartment());
            }

            String companyid = companyids[0];
            KwlReturnObject custresult = accCustomerDAOobj.getCustomerForAgedReceivable(requestParams);
            Iterator itrcust = custresult.getEntityList().iterator();
            while (itrcust.hasNext()) {
                Object custid = itrcust.next();
                balance_base = 0;
                requestParams.put(Constants.customerid, custid);
                requestParams.put("accid", custid);
                requestParams.put("cntype", null);

                request.setAttribute(Constants.companyKey, companyid);
                request.setAttribute(Constants.globalCurrencyKey, gcurrencyid);
                requestParams.put(Constants.companyKey, companyid);
                requestParams.put(Constants.globalCurrencyKey, gcurrencyid);
                requestParams.put("consolidateFlag", consolidateFlag);
                requestParams.put("isForTemplate", isForTemplate);
                requestParams.put("custVendorID", custid);

                boolean isBadDebtInvoices = false;
                if (!StringUtil.isNullOrEmpty(request.getParameter("isBadDebtInvoices"))) {// for Malasian Company
                    isBadDebtInvoices = Boolean.parseBoolean(request.getParameter("isBadDebtInvoices"));
                    if (isBadDebtInvoices) {
                        int baddebttype = Integer.parseInt(request.getParameter("baddebttype"));
                        requestParams.put("isBadDebtInvoices", isBadDebtInvoices);
                        requestParams.put("baddebttype", baddebttype);
                        if (baddebttype == 0) {
                            requestParams.put("badDebtCalculationDate", request.getParameter("badDebtCalculationDate"));
                            requestParams.put("badDebtCriteria", Integer.parseInt(request.getParameter("badDebtCriteria")));
                        } else {
                            requestParams.put("badDebtCalculationFromDate", request.getParameter("badDebtCalculationFromDate"));
                            requestParams.put("badDebtCalculationToDate", request.getParameter("badDebtCalculationToDate"));
                        }

                    }
                }
                if (!StringUtil.isNullOrEmpty(request.getParameter(Constants.billid))) {
                    KwlReturnObject result = accountingHandlerDAOobj.getObject(Invoice.class.getName(), request.getParameter(Constants.billid));
                    Invoice inv = (Invoice) result.getEntityList().get(0);
                    requestParams.put(Constants.isFixedAsset, inv.isFixedAssetInvoice());
                    requestParams.put(Constants.isDraft, inv.isDraft());
                }

                //Calculate Opening First
                if (isAged) {
                    requestParams.put("agedReport", true);
                    JSONArray OBJArryInvoice = new JSONArray();
                    KwlReturnObject result = accInvoiceDAOobj.getOpeningBalanceInvoices(requestParams);
                    OBJArryInvoice = AccInvoiceServiceHandler.getAgedOpeningBalanceInvoiceJson(requestParams, result.getEntityList(), OBJArryInvoice, accCurrencyDAOobj, accInvoiceCommon, request, accountingHandlerDAOobj,accAccountDAOobj,fieldDataManagercntrl,accJournalEntryobj);
                    for (int i = 0; i < OBJArryInvoice.length(); i++) {
                        tempObj = OBJArryInvoice.getJSONObject(i);
                        balance_base = balance_base + tempObj.getDouble("amountinbase");
                        tempObj.put("d_amount_base", tempObj.getDouble("amountinbase"));
                        tempObj.put("balance_base", balance_base);
                        tempObj.put("type", "Opening " + tempObj.getString("type"));
                        DataJArr.put(tempObj);
                    }

                    JSONArray OBJArryDebitNote = new JSONArray();
                    result = accDebitNoteobj.getOpeningBalanceCustomerDNs(requestParams);
                    OBJArryDebitNote = AccInvoiceServiceHandler.getAgedOpeningBalanceDebitNoteJson(requestParams, result.getEntityList(), OBJArryDebitNote, accCurrencyDAOobj, accReceiptDAOobj, request, accountingHandlerDAOobj,accAccountDAOobj,fieldDataManagercntrl,accJournalEntryobj,accCreditNoteDAOobj);
                    for (int i = 0; i < OBJArryDebitNote.length(); i++) {
                        tempObj = OBJArryDebitNote.getJSONObject(i);
                        balance_base = balance_base + tempObj.getDouble("amountinbase");
                        tempObj.put("d_amount_base", tempObj.getDouble("amountinbase"));
                        tempObj.put("balance_base", balance_base);
                        tempObj.put("type", "Opening " + tempObj.getString("type"));
                        DataJArr.put(tempObj);
                    }

                    JSONArray OBJArryCreditNote = new JSONArray();
                    result = accCreditNoteDAOobj.getOpeningBalanceCNs(requestParams);
                    OBJArryCreditNote = AccInvoiceServiceHandler.getAgedOpeningBalanceCreditNoteJson(requestParams, result.getEntityList(), OBJArryCreditNote, accCurrencyDAOobj, accPaymentDAOobj, request, accountingHandlerDAOobj,accCreditNoteDAOobj,accAccountDAOobj,fieldDataManagercntrl,accJournalEntryobj);
                    for (int i = 0; i < OBJArryCreditNote.length(); i++) {
                        tempObj = OBJArryCreditNote.getJSONObject(i);
                        balance_base = balance_base - tempObj.getDouble("amountinbase");
                        tempObj.put("c_amount_base", tempObj.getDouble("amountinbase"));
                        tempObj.put("balance_base", balance_base);
                        tempObj.put("type", "Opening " + tempObj.getString("type"));
                        DataJArr.put(tempObj);
                    }

                    JSONArray OBJArryPayment = new JSONArray();
                    result = accReceiptDAOobj.getOpeningBalanceReceipts(requestParams);
                    OBJArryPayment = AccInvoiceServiceHandler.getAgedOpeningBalanceReceiptJson(requestParams, result.getEntityList(), OBJArryPayment, accCurrencyDAOobj, accReceiptDAOobj, request, accountingHandlerDAOobj,accAccountDAOobj,fieldDataManagercntrl,accJournalEntryobj);
                    for (int i = 0; i < OBJArryPayment.length(); i++) {
                        tempObj = OBJArryPayment.getJSONObject(i);
                        balance_base = balance_base - tempObj.getDouble("amountinbase");
                        tempObj.put("c_amount_base", tempObj.getDouble("amountinbase"));
                        tempObj.put("balance_base", balance_base);
                        tempObj.put("type", "Opening " + tempObj.getString("type"));
                        DataJArr.put(tempObj);
                    }
                }

                //Now Calculate Normal
                KwlReturnObject result = accInvoiceDAOobj.getInvoicesMerged(requestParams);
                totalCount = result != null ? result.getRecordTotalCount() : 0;
                List list = result.getEntityList();
                JSONArray OBJArryInvoice = new JSONArray();
                OBJArryInvoice = accInvoiceServiceDAO.getInvoiceJsonMerged(request, list, OBJArryInvoice);
                for (int i = 0; i < OBJArryInvoice.length(); i++) {
                    tempObj = OBJArryInvoice.getJSONObject(i);
                    balance_base = balance_base + tempObj.getDouble("amountinbase");
                    tempObj.put("d_amount_base", tempObj.getDouble("amountinbase"));
                    tempObj.put("balance_base", balance_base);
                    DataJArr.put(tempObj);
                }
                if (isAged) {
                    JSONArray CreditNotejArr = new JSONArray();
                    requestParams.put("agedReport", true);
                    result = accCreditNoteDAOobj.getCreditNoteMerged(requestParams);
                    CreditNotejArr = AccInvoiceServiceHandler.getCreditNotesMergedJson(requestParams, result.getEntityList(), CreditNotejArr, accountingHandlerDAOobj, authHandlerDAOObj, accCurrencyDAOobj, accPaymentDAOobj, request, accCreditNoteDAOobj,accAccountDAOobj,fieldDataManagercntrl,accJournalEntryobj);
                    for (int i = 0; i < CreditNotejArr.length(); i++) {
                        tempObj = CreditNotejArr.getJSONObject(i);
                        balance_base = balance_base - tempObj.getDouble("amountinbase");
                        tempObj.put("c_amount_base", tempObj.getDouble("amountinbase"));
                        tempObj.put("balance_base", balance_base);
                        DataJArr.put(tempObj);
                    }

                    requestParams.put("cntype", 4);
                    JSONArray DebitNotejArr = new JSONArray();//This is used for getting DN gainst customer 
                    result = accDebitNoteobj.getDebitNoteMerged(requestParams);
                    DebitNotejArr = AccInvoiceServiceHandler.getDebitNotesMergedJson(requestParams, result.getEntityList(), DebitNotejArr, accountingHandlerDAOobj, authHandlerDAOObj, accCurrencyDAOobj, accReceiptDAOobj, request,accAccountDAOobj,fieldDataManagercntrl,accJournalEntryobj,accCreditNoteDAOobj);
                    for (int i = 0; i < DebitNotejArr.length(); i++) {
                        tempObj = DebitNotejArr.getJSONObject(i);
                        balance_base = balance_base + tempObj.getDouble("amountinbase");
                        tempObj.put("d_amount_base", tempObj.getDouble("amountinbase"));
                        tempObj.put("balance_base", balance_base);
                        DataJArr.put(tempObj);
                    }
                    requestParams.remove("cntype");
                    
                    JSONArray receivePaymentJArr = new JSONArray();
                    requestParams.put("paymentWindowType", 1);//Receipt to Customer record
                    result = accReceiptDAOobj.getReceipts(requestParams);
                    receivePaymentJArr = AccInvoiceServiceHandler.getReceiptsJson(requestParams, result.getEntityList(), receivePaymentJArr, accountingHandlerDAOobj, authHandlerDAOObj, accCurrencyDAOobj, accReceiptDAOobj, request,accAccountDAOobj,fieldDataManagercntrl,accJournalEntryobj);
                    for (int i = 0; i < receivePaymentJArr.length(); i++) {
                        tempObj = receivePaymentJArr.getJSONObject(i);
                        balance_base = balance_base - tempObj.getDouble("amountinbase");
                        tempObj.put("c_amount_base", tempObj.getDouble("amountinbase"));
                        tempObj.put("balance_base", balance_base);
                        DataJArr.put(tempObj);
                    }
                    
                    JSONArray makePaymentJArr = new JSONArray();
                    requestParams.put("allAdvPayment", true); // needs only refund type record so that putted true
                    requestParams.put("paymentWindowType", 2);//Payment to Customer record
                    result = accVendorPaymentobj.getPayments(requestParams);
                    companyid = sessionHandlerImpl.getCompanyid(request);
                    requestParams.put("companyid", companyid);
                    if (result != null && result.getEntityList() != null && !result.getEntityList().isEmpty()) {
                        makePaymentJArr = accGoodsReceiptServiceHandler.getPaymentsJson(requestParams, result.getEntityList(), makePaymentJArr, accCurrencyDAOobj, accountingHandlerDAOobj, accVendorPaymentobj);
                        for (int i = 0; i < makePaymentJArr.length(); i++) {
                            tempObj = makePaymentJArr.getJSONObject(i);
                            balance_base = balance_base - tempObj.getDouble("amountinbase");
                            tempObj.put("c_amount_base", tempObj.getDouble("amountinbase"));
                            tempObj.put("balance_base", balance_base);
                            DataJArr.put(tempObj);
                        }
                    }
                    requestParams.remove("allAdvPayment");
                    requestParams.remove("paymentWindowType");
                }
            }

            JSONArray pagedJson = DataJArr;
            int count = DataJArr.length();
            if (fileType == null) {
                String start = request.getParameter("start");
                String limit = request.getParameter("limit");
                if (!StringUtil.isNullOrEmpty(start) && !StringUtil.isNullOrEmpty(limit)) {
                    pagedJson = StringUtil.getPagedJSON(pagedJson, Integer.parseInt(start), Integer.parseInt(limit));
                }
            }
            jobj.put(Constants.data, pagedJson);
            jobj.put("count", count);
            issuccess = true;
        } catch (Exception ex) {
            msg = "" + ex.getMessage();
            Logger.getLogger(accInvoiceController.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                jobj.put("success", issuccess);
                jobj.put("msg", msg);
            } catch (JSONException ex) {
                Logger.getLogger(accInvoiceController.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return new ModelAndView(Constants.jsonView, "model", jobj.toString());
    }
    
    public ModelAndView getSalesPersonCommissionDimensionReport(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        boolean issuccess = false;
        String msg = "";
        try {
            jobj = accInvoiceServiceDAO.getSalesPersonCommissionDimensionReport(request, false);
            issuccess = true;
        } catch (Exception ex) {
            msg = "" + ex.getMessage();
            Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                jobj.put("success", issuccess);
                jobj.put("msg", msg);
            } catch (JSONException ex) {
                Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return new ModelAndView("jsonView_ex", "model", jobj.toString());
    }

    public ModelAndView exportSalesPersonCommissionDimensionReport(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        String view = "jsonView_ex";
        try {
            jobj = accInvoiceServiceDAO.getSalesPersonCommissionDimensionReport(request, true);

            String fileType = request.getParameter("filetype");
            if (StringUtil.equal(fileType, "print")) {
                String GenerateDate = authHandler.getDateFormatter(request).format(new Date());
                jobj.put("GenerateDate", GenerateDate);
                view = "jsonView-empty";
            }
            exportDaoObj.processRequest(request, response, jobj);
            jobj.put("success", true);
        } catch (Exception ex) {
            Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
        }
        return new ModelAndView(view, "model", jobj.toString());
    }
     public void exportCashReceipt(HttpServletRequest request, HttpServletResponse response) {
        try {
            List jasperPrint = accExportOtherReportsServiceDAOobj.exportCashReceipt(request, response);
            JRPdfExporter exp = new JRPdfExporter();
            exp.setParameter(JRExporterParameter.JASPER_PRINT_LIST, jasperPrint);
            exp.setParameter(JRPdfExporterParameter.OUTPUT_STREAM, response.getOutputStream());
            exp.exportReport();
        } catch (Exception e) {
            Logger.getLogger(accInvoiceController.class.getName()).log(Level.SEVERE, null, e);
        }
    }
     
    public ModelAndView getPaymentTermSalesCommissionDetailReport(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        boolean issuccess = false;
        String msg = "";
        try {
            HashMap requestParams = AccountingManager.getGlobalParams(request);
            String salesPersonID = request.getParameter("salesPersonID") != null ? request.getParameter("salesPersonID") : "";
            String[] salesPersonIdArray = salesPersonID.split(",");
            if (!StringUtil.isNullOrEmpty(salesPersonID) && !salesPersonID.equalsIgnoreCase("All")) {
                String salesPersonIds = "";
                for (int i = 0; i < salesPersonIdArray.length; i++) {
                    salesPersonIds += "'" + salesPersonIdArray[i] + "',";
                }
                salesPersonIds = salesPersonIds.substring(0, salesPersonIds.length() - 1);
                requestParams.put("salesPersonIds", salesPersonIds);
            }

            requestParams.put(InvoiceConstants.deleted, request.getParameter(InvoiceConstants.deleted));
            requestParams.put(InvoiceConstants.nondeleted, request.getParameter(InvoiceConstants.nondeleted));
            requestParams.put(Constants.ss, request.getParameter(Constants.ss));
            requestParams.put(Constants.REQ_startdate, request.getParameter(Constants.REQ_startdate));
            requestParams.put(Constants.REQ_enddate, request.getParameter(Constants.REQ_enddate));
            requestParams.put(Constants.start, request.getParameter(Constants.start));
            requestParams.put(Constants.limit, request.getParameter(Constants.limit));

            KwlReturnObject invResult = accInvoiceDAOobj.getInvoicesForSalesCommission(requestParams);
            List<Invoice> invList = invResult.getEntityList();
            int totalCount = invResult.getRecordTotalCount();
            JSONArray dataJArr = accInvoiceServiceDAO.getPaymentTermSalesCommissionDetailReportJson(request, invList);
            jobj.put(Constants.data, dataJArr);
            jobj.put("totalCount", totalCount);
            issuccess = true;
        } catch (SessionExpiredException | ServiceException ex) {
            msg = ex.getMessage();
            Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            msg = "" + ex.getMessage();
            Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                jobj.put("success", issuccess);
                jobj.put("msg", msg);
            } catch (JSONException ex) {
                Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return new ModelAndView(Constants.jsonView, "model", jobj.toString());
    }
    
    public ModelAndView exportPaymentTermSalesCommissionDetailReport(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        String view = "jsonView_ex";
        try {
            HashMap requestParams = AccountingManager.getGlobalParams(request);
            String salesPersonID = request.getParameter("salesPersonID") != null ? request.getParameter("salesPersonID") : "";
            String[] salesPersonIdArray = salesPersonID.split(",");
            if (!StringUtil.isNullOrEmpty(salesPersonID) && !salesPersonID.equalsIgnoreCase("All")) {
                String salesPersonIds = "";
                for (int i = 0; i < salesPersonIdArray.length; i++) {
                    salesPersonIds += "'" + salesPersonIdArray[i] + "',";
                }
                salesPersonIds = salesPersonIds.substring(0, salesPersonIds.length() - 1);
                requestParams.put("salesPersonIds", salesPersonIds);
            }

            requestParams.put(InvoiceConstants.deleted, request.getParameter(InvoiceConstants.deleted));
            requestParams.put(InvoiceConstants.nondeleted, request.getParameter(InvoiceConstants.nondeleted));
            requestParams.put(Constants.ss, request.getParameter(Constants.ss));
            requestParams.put(Constants.REQ_startdate, request.getParameter(Constants.REQ_startdate));
            requestParams.put(Constants.REQ_enddate, request.getParameter(Constants.REQ_enddate));
            requestParams.put(Constants.start, request.getParameter(Constants.start));
            requestParams.put(Constants.limit, request.getParameter(Constants.limit));

            KwlReturnObject invResult = accInvoiceDAOobj.getInvoicesForSalesCommission(requestParams);
            List<Invoice> invList = invResult.getEntityList();
            int totalCount = invResult.getRecordTotalCount();
            JSONArray dataJArr = accInvoiceServiceDAO.getPaymentTermSalesCommissionDetailReportJson(request, invList);

            jobj.put(Constants.data, dataJArr);
            jobj.put("totalCount", totalCount);

            String fileType = request.getParameter("filetype");
            if (StringUtil.equal(fileType, "print")) {
                String GenerateDate = authHandler.getDateFormatter(request).format(new Date());
                jobj.put("GenerateDate", GenerateDate);
                view = "jsonView-empty";
            }
            exportDaoObj.processRequest(request, response, jobj);
            jobj.put("success", true);
        } catch (SessionExpiredException ex) {
            Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
        }
        return new ModelAndView(view, "model", jobj.toString());
    }
    
    public ModelAndView getPriceVarianceReport(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        boolean issuccess = false;
        String msg = "";
        try {
            jobj = accInvoiceCommon.getPriceVarianceReport(request, false);
            issuccess = true;
        } catch (Exception ex) {
            msg = "" + ex.getMessage();
            Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                jobj.put("success", issuccess);
                jobj.put("msg", msg);
            } catch (JSONException ex) {
                Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return new ModelAndView("jsonView_ex", "model", jobj.toString());
    }
    
    public ModelAndView exportPriceVarianceReport(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        String view = "jsonView_ex";
        try {
            jobj = accInvoiceCommon.getPriceVarianceReport(request, true);

            String fileType = request.getParameter("filetype");
            if (StringUtil.equal(fileType, "print")) {
                String GenerateDate = authHandler.getDateFormatter(request).format(new Date());
                jobj.put("GenerateDate", GenerateDate);
                view = "jsonView-empty";
            }
            exportDaoObj.processRequest(request, response, jobj);
            jobj.put("success", true);
        } catch (Exception ex) {
            Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
        }
        return new ModelAndView(view, "model", jobj.toString());
    }
    
        public ModelAndView getColumnModelForWorkCentreReport(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        boolean issuccess = false;
        String msg = "";
        try {
            jobj = accInvoiceServiceDAO.getColumnModelForWorkCentreReport(false);
            issuccess = true;
        } catch (Exception ex) {
            msg = "" + ex.getMessage();
            Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                jobj.put("success", issuccess);
                jobj.put("msg", msg);
            } catch (JSONException ex) {
                Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return new ModelAndView("jsonView_ex", "model", jobj.toString());
    }
        
        
    public ModelAndView getColumnModelForJobOrderReport(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        boolean issuccess = false;
        String msg = "";
        try {
            jobj = accInvoiceServiceDAO.getColumnModelForJobOrderReport(false);
            issuccess = true;
        } catch (Exception ex) {
            msg = "" + ex.getMessage();
            Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                jobj.put("success", issuccess);
                jobj.put("msg", msg);
            } catch (JSONException ex) {
                Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return new ModelAndView("jsonView_ex", "model", jobj.toString());
    }
    
    public ModelAndView getColumnModelForWorkCentreList(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        boolean issuccess = false;
        String msg = "";
        try {
            jobj = accInvoiceServiceDAO.getColumnModelForWorkCentreList(false);
            issuccess = true;
        } catch (Exception ex) {
            msg = "" + ex.getMessage();
            Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                jobj.put("success", issuccess);
                jobj.put("msg", msg);
            } catch (JSONException ex) {
                Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return new ModelAndView("jsonView_ex", "model", jobj.toString());
    }
    public ModelAndView getIndiaComplianceReportData(HttpServletRequest request, HttpServletResponse response) {
        DefaultTransactionDefinition def = new DefaultTransactionDefinition();
        def.setName("import_Tx");
        def.setPropagationBehavior(TransactionDefinition.PROPAGATION_REQUIRED);
        TransactionStatus status = txnManager.getTransaction(def);
        boolean commitedEx = false;
        boolean issuccess = true, isSTCompReport=false;
        JSONObject jobj = new JSONObject();
        String msg = "";
        try {
            isSTCompReport = !StringUtil.isNullOrEmpty(request.getParameter("isSTCompReport")) ? Boolean.parseBoolean(request.getParameter("isSTCompReport")) : false;
            String companyId = sessionHandlerImpl.getCompanyid(request);
            String endDate = request.getParameter("enddate");
            String adjustamount = request.getParameter("adjustamount");
            String dutypayable = request.getParameter("dutypayable");
            String selectedIdJson = request.getParameter("selectedIdJson");
            JSONArray idArray = new JSONArray(selectedIdJson);
            Set<String> grIDSet = new HashSet<String>();
            Map<String, ArrayList<Double>> creditAdj = new HashMap<String, ArrayList<Double>>();
            
            KwlReturnObject companyresult = accountingHandlerDAOobj.getObject(Company.class.getName(), companyId);
            Company company = (Company) companyresult.getEntityList().get(0);
            KwlReturnObject extracompanypreferencesresult = accountingHandlerDAOobj.getObject(ExtraCompanyPreferences.class.getName(), companyId);
            ExtraCompanyPreferences extraCompanyPreferences = (ExtraCompanyPreferences) extracompanypreferencesresult.getEntityList().get(0);
            
            
            
            for(int i=0; i<idArray.length();i++){
                JSONObject jsonid = idArray.getJSONObject(i);
                if(jsonid.has("documentid") && !StringUtil.isNullOrEmpty(jsonid.getString("documentid"))){
                    grIDSet.add(jsonid.getString("documentid"));
                    KwlReturnObject objItr = accountingHandlerDAOobj.getObject(GoodsReceipt.class.getName(), jsonid.getString("documentid"));
                    GoodsReceipt goodsReceipt = (GoodsReceipt) objItr.getEntityList().get(0);
                    HashMap<String, Object> params = new HashMap<String, Object>();
                    KwlReturnObject curresult = accountingHandlerDAOobj.getObject(KWLCurrency.class.getName(), sessionHandlerImpl.getCurrencyID(request));
                    KWLCurrency currency = (KWLCurrency) curresult.getEntityList().get(0);
                    params.put(Constants.companyKey, company.getCompanyID());
                    params.put(Constants.globalCurrencyKey, currency.getCurrencyID());
                    Set<GoodsReceiptDetail> rows = goodsReceipt.getRows();
                    String currencyid = (goodsReceipt.getCurrency() == null ? currency.getCurrencyID() : goodsReceipt.getCurrency().getCurrencyID());
                    for (GoodsReceiptDetail row : rows) {
                        HashMap<String, Object> grDetailParams = new HashMap();
                        grDetailParams.put("GoodsReceiptDetailid", row.getID());
                        KwlReturnObject grMapresult = accGoodsReceiptobj.getGoodsReceiptdetailTermMap(grDetailParams);
                        List<ReceiptDetailTermsMap> grDetailTermsMapList = grMapresult.getEntityList();
                        for (ReceiptDetailTermsMap grDetailTermMap : grDetailTermsMapList) {
                            if (grDetailTermMap.getTerm() != null && grDetailTermMap.getTerm().getTermType() == IndiaComplianceConstants.LINELEVELTERMTYPE_Excise_DUTY && !isSTCompReport){
                                KwlReturnObject kwlBaseCurrencyrate = accCurrencyDAOobj.getCurrencyToBaseAmount(params, grDetailTermMap.getTermamount(), currencyid, goodsReceipt.getCreationDate(), goodsReceipt.getJournalEntry().getExternalCurrencyRate());
                                Double Excise = (Double) kwlBaseCurrencyrate.getEntityList().get(0);
                                String accountId = grDetailTermMap.getTerm().getAccount().getID();
                                if (creditAdj.containsKey(accountId)) {
                                    kwlBaseCurrencyrate = accCurrencyDAOobj.getCurrencyToBaseAmount(params, grDetailTermMap.getAssessablevalue(), currencyid, goodsReceipt.getCreationDate(), goodsReceipt.getJournalEntry().getExternalCurrencyRate());
                                    ArrayList<Double> tempAmt = (ArrayList<Double>) creditAdj.get(accountId);
                                    tempAmt.add(Excise);
                                    creditAdj.put(accountId, tempAmt);
                                } else {
                                    ArrayList<Double> tempAmt = new ArrayList<Double>();
                                    tempAmt.add(Excise);
                                    creditAdj.put(accountId, tempAmt);
                                }
                            }
                            if (isSTCompReport && grDetailTermMap.getTerm() != null && 
                                 (  grDetailTermMap.getTerm().getTermType() == IndiaComplianceConstants.LINELEVELTERMTYPE_SERVICE_TAX 
                                 || grDetailTermMap.getTerm().getTermType() == IndiaComplianceConstants.LINELEVELTERMTYPE_KKC )){
                                KwlReturnObject kwlBaseCurrencyrate = accCurrencyDAOobj.getCurrencyToBaseAmount(params, grDetailTermMap.getTermamount(), currencyid, goodsReceipt.getCreationDate(), goodsReceipt.getJournalEntry().getExternalCurrencyRate());
                                Double Service = (Double) kwlBaseCurrencyrate.getEntityList().get(0);
                                String accountId = grDetailTermMap.getTerm().getAccount().getID();
                                if (creditAdj.containsKey(accountId)) {
                                    kwlBaseCurrencyrate = accCurrencyDAOobj.getCurrencyToBaseAmount(params, grDetailTermMap.getAssessablevalue(), currencyid, goodsReceipt.getCreationDate(), goodsReceipt.getJournalEntry().getExternalCurrencyRate());
                                    ArrayList<Double> tempAmt = (ArrayList<Double>) creditAdj.get(accountId);
                                    tempAmt.add(Service);
                                    creditAdj.put(accountId, tempAmt);
                                } else {
                                    ArrayList<Double> tempAmt = new ArrayList<Double>();
                                    tempAmt.add(Service);
                                    creditAdj.put(accountId, tempAmt);
                                }
                            }
                        }
                    }
                }
            }
            double adujestAmt=0.0d;
            double dutyTotalAmount=0.0d;
            
            if(!StringUtil.isNullOrEmpty(adjustamount)){
              adujestAmt=  Double.parseDouble(adjustamount);
            }
            if(!StringUtil.isNullOrEmpty(dutypayable)){
              dutyTotalAmount=  Double.parseDouble(dutypayable);
            }

            boolean CreditAdjustmentflag = !StringUtil.isNullOrEmpty(request.getParameter("CreditAdjustmentflag")) ? Boolean.parseBoolean(request.getParameter("CreditAdjustmentflag")) : false;
            KwlReturnObject cap = accountingHandlerDAOobj.getObject(CompanyAccountPreferences.class.getName(), companyId);
            CompanyAccountPreferences preferences = (CompanyAccountPreferences) cap.getEntityList().get(0);
            DateFormat df = authHandler.getDateOnlyFormat();
            String jeentryNumber = null,jeIntegerPart = null,jeDatePrefix = null,jeDateAfterPrefix = null,jeDateSuffix = null,jeSeqFormatId = null,jeid = null;
            JournalEntryDetail jed = null;
            boolean jeautogenflag = false;
            Date creationDate = new Date();

            synchronized (this) {
                HashMap<String, Object> JEFormatParams = new HashMap<String, Object>();
                JEFormatParams.put(Constants.moduleid, Constants.Acc_GENERAL_LEDGER_ModuleId);
                JEFormatParams.put("modulename", CompanyPreferencesConstants.AUTOJOURNALENTRY);
                JEFormatParams.put(Constants.companyKey, companyId);
                JEFormatParams.put("isdefaultFormat", true);

                KwlReturnObject kwlObj = accCompanyPreferencesObj.getSequenceFormat(JEFormatParams);
                SequenceFormat format = (SequenceFormat) kwlObj.getEntityList().get(0);
                Map<String, Object> seqNumberMap = new HashMap<String, Object>();
                seqNumberMap = accCompanyPreferencesObj.getNextAutoNumber_Modified(companyId, StaticValues.AUTONUM_JOURNALENTRY, format.getID(), false, creationDate);
                jeentryNumber = (String) seqNumberMap.get(Constants.AUTO_ENTRYNUMBER);  //next auto generated number
                jeIntegerPart = (String) seqNumberMap.get(Constants.SEQNUMBER);//integer Part
                jeDatePrefix = (String) seqNumberMap.get(Constants.DATEPREFIX);//Date Prefix Part
                jeDateAfterPrefix = (String) seqNumberMap.get(Constants.DATEAFTERPREFIX);//Date After Prefix Part
                jeDateSuffix = (String) seqNumberMap.get(Constants.DATESUFFIX);//Date Suffix Part
                jeSeqFormatId = format.getID();
                jeautogenflag = true;
            }
            
            Map<String, Object> jeDataMap = AccountingManager.getGlobalParams(request);
            jeDataMap.put("entrynumber", jeentryNumber);
            jeDataMap.put("autogenerated", jeautogenflag);
            jeDataMap.put(Constants.SEQFORMAT, jeSeqFormatId);
            jeDataMap.put(Constants.SEQNUMBER, jeIntegerPart);
            jeDataMap.put(Constants.DATEPREFIX, jeDatePrefix);
            jeDataMap.put(Constants.DATEAFTERPREFIX, jeDateAfterPrefix);
            jeDataMap.put(Constants.DATESUFFIX, jeDateSuffix);
            jeDataMap.put("entrydate", creationDate);
            jeDataMap.put(Constants.companyKey, companyId);
            if(isSTCompReport){
                jeDataMap.put("memo", "Credit Adjustment For Service Tax");
            }else{
                jeDataMap.put("memo", "Credit Adjustment");
            }
            jeDataMap.put(Constants.currencyKey, sessionHandlerImpl.getCurrencyID(request));
            HashSet jeDetails = new HashSet();
            KwlReturnObject jeresult = accJournalEntryobj.saveJournalEntry(jeDataMap);//Create Journal entry without JEdetails
            JournalEntry journalEntry = (JournalEntry) jeresult.getEntityList().get(0);
            jeid = journalEntry.getID();
            jeDataMap.put("jeid", jeid);

            HashMap CreditAdjustmentHM = new HashMap();
            CreditAdjustmentHM.put(Constants.companyKey, companyId);
            CreditAdjustmentHM.put(Constants.df, df);
            CreditAdjustmentHM.put("startdate", df.format(preferences.getFinancialYearFrom()));//Payable From Financial Year From Date to "To Date".
            CreditAdjustmentHM.put("enddate", endDate);
            if(isSTCompReport){
                CreditAdjustmentHM.put("isSTCompReport", isSTCompReport);// isFromSTReport.
            }else{
                CreditAdjustmentHM.put("isexcisepaid", 0);//0- Non paid, 1- Paid.
            }
            CreditAdjustmentHM.put("CreditAdjustmentflag", CreditAdjustmentflag);
            KwlReturnObject result = accInvoiceDAOobj.getComputationReportDetailsTransactionWise(CreditAdjustmentHM);
            Iterator itr1 = result.getEntityList().iterator();
            String termAccount = null;
            
            Map<String,Double> invoiceIDSet= new HashMap<String,Double>();
            while (itr1.hasNext()) {
                Object[] oj = (Object[]) itr1.next();
                termAccount = oj[2].toString();
                double invAmount = Double.parseDouble(oj[3].toString());
                if (!StringUtil.isNullOrEmpty(oj[0].toString()) && !invoiceIDSet.containsKey(oj[0].toString())) {
                    String invoiceId = oj[0].toString();
                    invoiceIDSet.put(invoiceId, invAmount);
                }
            
            if (!StringUtil.isNullOrEmpty(termAccount)) {
                KwlReturnObject accountresult = accountingHandlerDAOobj.getObject(Account.class.getName(), termAccount);
                Account account = (Account) accountresult.getEntityList().get(0);
                JSONObject jedjson = new JSONObject();
                jedjson.put("srno", jeDetails.size() + 1);
                jedjson.put(Constants.companyKey, companyId);
                jedjson.put("amount", invAmount);
                jedjson.put("accountid", account.getID());
                jedjson.put("debit", true);
                jedjson.put("jeid", jeid);
                KwlReturnObject jedresult = accJournalEntryobj.addJournalEntryDetails(jedjson);
                jed = (JournalEntryDetail) jedresult.getEntityList().get(0);
                jeDetails.add(jed);
            }
            }
            HashMap paramsHM=new HashMap<>();
            paramsHM.put(Constants.companyKey, companyId);
            paramsHM.put(Constants.df, df);
            paramsHM.put(Constants.REQ_startdate, request.getParameter(Constants.REQ_startdate));
            paramsHM.put(Constants.REQ_enddate, request.getParameter(Constants.REQ_enddate));
            paramsHM.put("FinancialYearFrom", df.format(preferences.getFinancialYearFrom()));
            if(isSTCompReport){
                paramsHM.put("termType", IndiaComplianceConstants.LINELEVELTERMTYPE_SERVICE_TAX); //Excise term type = 2
            }else{
                paramsHM.put("termType", IndiaComplianceConstants.LINELEVELTERMTYPE_Excise_DUTY); //Excise term type = 2
            }
            paramsHM.put("capitalGoodsProductsFlag", false);
            List grExciseDetailList = accGoodsReceiptobj.getGoodsRecieptIndiaTaxDetails(paramsHM);
            JSONObject jObj = indiaTaxComputation(grExciseDetailList,new JSONObject());  
            JSONObject jedjson = new JSONObject();
            KwlReturnObject jedresult = null;
            for(String accId : creditAdj.keySet()){
                double creditAdjAmount = 0.0d;
                for (double amount : creditAdj.get(accId)) {
                    creditAdjAmount += amount;
                }
                jedjson.put("srno", jeDetails.size() + 1);
                jedjson.put(Constants.companyKey, companyId);
                jedjson.put("amount", creditAdjAmount);
                jedjson.put("accountid", accId);
                jedjson.put("debit", false);
                jedjson.put("jeid", jeid);
                jedresult = accJournalEntryobj.addJournalEntryDetails(jedjson);
                jed = (JournalEntryDetail) jedresult.getEntityList().get(0);
                jeDetails.add(jed);
            }
            double inputexciseCreditBalance = dutyTotalAmount-adujestAmt;
            if (!isSTCompReport && !StringUtil.isNullOrEmpty(extraCompanyPreferences.getExcisePayableAcc())) {
                KwlReturnObject Exciseaccresult = accountingHandlerDAOobj.getObject(Account.class.getName(), extraCompanyPreferences.getExcisePayableAcc());
                Account Exciseaccount = (Account) Exciseaccresult.getEntityList().get(0);
                //inputexciseCreditBalance = accReportsService.getAccountBalance(request, extraCompanyPreferences.getExcisePayableAcc(), null, new Date(endDate));
                if (inputexciseCreditBalance > 0.0) {
                    jedjson = new JSONObject();
                    jedjson.put("srno", jeDetails.size() + 1);
                    jedjson.put(Constants.companyKey, companyId);
                    jedjson.put("amount", inputexciseCreditBalance);
                    jedjson.put("accountid", Exciseaccount.getID());
                    jedjson.put("debit", false);
                    jedjson.put("jeid", jeid);
                    jedresult = accJournalEntryobj.addJournalEntryDetails(jedjson);
                    jed = (JournalEntryDetail) jedresult.getEntityList().get(0);
                    jeDetails.add(jed);
                }
            }else if (isSTCompReport && !StringUtil.isNullOrEmpty(extraCompanyPreferences.getSTPayableAcc())) {
                KwlReturnObject STaccresult = accountingHandlerDAOobj.getObject(Account.class.getName(), extraCompanyPreferences.getSTPayableAcc());
                Account STaccount = (Account) STaccresult.getEntityList().get(0);
                //inputexciseCreditBalance = accReportsService.getAccountBalance(request, extraCompanyPreferences.getExcisePayableAcc(), null, new Date(endDate));
                if (inputexciseCreditBalance > 0.0) {
                    jedjson = new JSONObject();
                    jedjson.put("srno", jeDetails.size() + 1);
                    jedjson.put(Constants.companyKey, companyId);
                    jedjson.put("amount", inputexciseCreditBalance);
                    jedjson.put("accountid", STaccount.getID());
                    jedjson.put("debit", false);
                    jedjson.put("jeid", jeid);
                    jedresult = accJournalEntryobj.addJournalEntryDetails(jedjson);
                    jed = (JournalEntryDetail) jedresult.getEntityList().get(0);
                    jeDetails.add(jed);
                }
            }else{
                throw new Exception(messageSource.getMessage("acc.field.ExcisePayableAcc.error.msg", null, RequestContextUtils.getLocale(request)));
            }

            jeDataMap.put("jedetails", jeDetails);
            jeresult = accJournalEntryobj.saveJournalEntry(jeDataMap);//Add Journal entry details
            journalEntry = (JournalEntry) jeresult.getEntityList().get(0);
            msg+="Credit Adjustment has been Done successfully , JE No : "+journalEntry.getEntryNumber();
            try {                
                 for(String inv: invoiceIDSet.keySet()){
                    KwlReturnObject accountresult = accountingHandlerDAOobj.getObject(Invoice.class.getName(), inv);
                    Invoice invoice = (Invoice) accountresult.getEntityList().get(0);
                    Set<InvoiceDetail> rows = invoice.getRows();
                    for (InvoiceDetail row : rows) {
                        HashMap<String, Object> InvoiceDetailParams = new HashMap<String, Object>();
                        InvoiceDetailParams.put("InvoiceDetailid", row.getID());
                        KwlReturnObject grdTermMapresult = accInvoiceDAOobj.getInvoicedetailTermMap(InvoiceDetailParams);
                        List<InvoiceDetailTermsMap> InvoiceDetailTermsMapList = grdTermMapresult.getEntityList();
                        for (InvoiceDetailTermsMap invoicedetailTermMap : InvoiceDetailTermsMapList) {
                            if (!isSTCompReport && invoicedetailTermMap.getTerm() != null && invoicedetailTermMap.getTerm().getTermType() == 2) {
                                invoicedetailTermMap.setCreditAvailedFlag(1);
                                invoicedetailTermMap.setTaxPaymentJE(journalEntry);
                            }else if (isSTCompReport && invoicedetailTermMap.getTerm() != null &&
                                    (  invoicedetailTermMap.getTerm().getTermType() == IndiaComplianceConstants.LINELEVELTERMTYPE_SERVICE_TAX
                                    || invoicedetailTermMap.getTerm().getTermType() == IndiaComplianceConstants.LINELEVELTERMTYPE_KKC )) {
                                invoicedetailTermMap.setCreditAvailedFlagServiceTax(1);
                                invoicedetailTermMap.setTaxPaymentJE(journalEntry);
                            }
                        }
                    }
                    accInvoiceDAOobj.updateInvoiceExciseDuty(invoice);                   
                }
                 
                for(String grID: grIDSet){
                    KwlReturnObject accountresult = accountingHandlerDAOobj.getObject(GoodsReceipt.class.getName(), grID);
                    GoodsReceipt goodsReceipt = (GoodsReceipt) accountresult.getEntityList().get(0);
                    Set<GoodsReceiptDetail> rows = goodsReceipt.getRows();
                    for (GoodsReceiptDetail row : rows) {
                        HashMap<String, Object> grDetailParams = new HashMap();
                        grDetailParams.put("GoodsReceiptDetailid", row.getID());
                        KwlReturnObject grMapresult = accGoodsReceiptobj.getGoodsReceiptdetailTermMap(grDetailParams);
                        List<ReceiptDetailTermsMap> grDetailTermsMapList = grMapresult.getEntityList();
                        for (ReceiptDetailTermsMap grDetailTermMap : grDetailTermsMapList) {
                            if (!isSTCompReport && grDetailTermMap.getTerm() != null && grDetailTermMap.getTerm().getTermType() == 2) {
                                grDetailTermMap.setCreditAvailedFlag(1);
                                grDetailTermMap.setTaxPaymentJE(journalEntry);
                            }else if (isSTCompReport && grDetailTermMap.getTerm() != null &&
                                    (  grDetailTermMap.getTerm().getTermType() == IndiaComplianceConstants.LINELEVELTERMTYPE_SERVICE_TAX
                                    || grDetailTermMap.getTerm().getTermType() == IndiaComplianceConstants.LINELEVELTERMTYPE_KKC )) {
                                grDetailTermMap.setCreditAvailedFlagServiceTax(1);
                                grDetailTermMap.setTaxPaymentJE(journalEntry);
                            }
                        }
                    }
                    accGoodsReceiptobj.updateGoodsReceiptExciseDuty(goodsReceipt);                    
                }
                txnManager.commit(status);
            } catch (Exception ex) {
                commitedEx = true;
                throw ex;
            }
            issuccess = true;
        } catch (Exception ex) {
            if (!commitedEx) { // if exception occurs during commit then dont call rollback
                txnManager.rollback(status);
            }
            msg = "" + ex.getMessage();
            Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                jobj.put("success", issuccess);
                jobj.put("msg", msg);
            } catch (JSONException ex) {
                Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return new ModelAndView(Constants.jsonView, "model", jobj.toString());
    }
    public ModelAndView getExcisePaymentJEData(HttpServletRequest request, HttpServletResponse response) {
        
        
        JSONObject finaljobj = new JSONObject();
        JSONArray DataJArr = new JSONArray();
        String msg = "";
        try {
            String companyId = sessionHandlerImpl.getCompanyid(request);
            JSONObject jobj = new JSONObject();
            double inputexciseCreditBalance = Double.parseDouble(request.getParameter("excisePaymentAmt"));
            KwlReturnObject companyresult = accountingHandlerDAOobj.getObject(Company.class.getName(), companyId);
            Company company = (Company) companyresult.getEntityList().get(0);
            KwlReturnObject extracompanypreferencesresult = accountingHandlerDAOobj.getObject(ExtraCompanyPreferences.class.getName(), companyId);
            ExtraCompanyPreferences extraCompanyPreferences = (ExtraCompanyPreferences) extracompanypreferencesresult.getEntityList().get(0);
             DateFormat df = authHandler.getDateOnlyFormat();
             JSONArray jeDetailsArr = new JSONArray();
             String accountId=request.getParameter("accid");
             if(StringUtil.isNullOrEmpty(accountId)){
                 accountId=extraCompanyPreferences.getExcisePayableAcc();
             }
             String pmtMethode=request.getParameter("pmtMethode");
                if (StringUtil.isNullOrEmpty(pmtMethode)) {
                    pmtMethode = extraCompanyPreferences.getPaymentMethodId();
                }
             if (!StringUtil.isNullOrEmpty(extraCompanyPreferences.getExcisePayableAcc())) {
                KwlReturnObject Exciseaccresult = accountingHandlerDAOobj.getObject(Account.class.getName(), accountId);
                Account Exciseaccount = (Account) Exciseaccresult.getEntityList().get(0);                
                if (inputexciseCreditBalance > 0.0) {
                    JSONObject jextemp = new JSONObject();
                    jextemp.put("exchangeratefortransaction", 1);
                    jextemp.put("type", 4);// Document Type - General Ledger Code
                    jextemp.put("debit", true);
                    jextemp.put("amountdue", 0);
                    jextemp.put("srNoForRow", jeDetailsArr.length() + 1);
                    jextemp.put("masterTypeValue", Exciseaccount.getMastertypevalue());
                    jextemp.put("documentno", Exciseaccount.getAccountName());
                    jextemp.put("enteramount", authHandler.round((inputexciseCreditBalance), companyId));
                    jextemp.put("amountDueOriginal", 0);
                    jextemp.put("documentid", Exciseaccount.getID());
                    jextemp.put("amountDueOriginalSaved", 0);

                    jeDetailsArr.put(jextemp);
                }
            }            
        
            JSONObject jtemp2 = new JSONObject();
            jtemp2.put(Constants.data, jeDetailsArr);
            jobj.put("Details", jtemp2);
            jobj.put("memo", "Excise Payment");
            
            if(!StringUtil.isNullOrEmpty(extraCompanyPreferences.getPaymentMethodId())){
                KwlReturnObject paymentMethodresult = accountingHandlerDAOobj.getObject(PaymentMethod.class.getName(), pmtMethode);
                PaymentMethod paymentMethod = (PaymentMethod) paymentMethodresult.getEntityList().get(0);
                
                jobj.put("paymentmethodname", paymentMethod.getMethodName());
                jobj.put("pmtmethod", paymentMethod.getID());
            }
            
            jobj.put(Constants.billid, "");
            jobj.put("sequenceformatid", "");
            jobj.put("bankChargesCmb", "");
            jobj.put("bankInterestCmb", "");
            
            DataJArr.put(jobj);
            finaljobj.put(Constants.data, DataJArr);
            finaljobj.put("count", DataJArr.length());
            finaljobj.put("success", true);
            msg+="JournalEntry : ";
            
        } catch (Exception ex) {
            
            msg = "" + ex.getMessage();
            Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {                
                finaljobj.put("msg", msg);
            } catch (JSONException ex) {
                Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return new ModelAndView(Constants.jsonView, "model", finaljobj.toString());
    }
    /*
     We have handled import Cash Sales related code in normal Sales Invoice import controller.
    Changes done in -ERP-39182
     */
    public Date getFinancialYearStartEndDate(boolean isStart, Date getFinancialYearDate) {
        Date returnDate;

        Calendar calendar = Calendar.getInstance();
        calendar.set(Calendar.HOUR, 0);
        calendar.set(Calendar.MINUTE, 0);
        calendar.set(Calendar.SECOND, 0);
        calendar.set(Calendar.MILLISECOND, 0);

        Calendar financialYearDateCalendar = Calendar.getInstance();
        financialYearDateCalendar.setTime(getFinancialYearDate);
        financialYearDateCalendar.set(Calendar.HOUR, 0);
        financialYearDateCalendar.set(Calendar.MINUTE, 0);
        financialYearDateCalendar.set(Calendar.SECOND, 0);
        financialYearDateCalendar.set(Calendar.MILLISECOND, 0);
        financialYearDateCalendar.set(Calendar.YEAR, calendar.get(Calendar.YEAR));

        if (calendar.compareTo(financialYearDateCalendar) < 0) {
            financialYearDateCalendar.add(Calendar.YEAR, -1);
        }

        if (isStart) {
            financialYearDateCalendar.set(Calendar.HOUR, 0);
            financialYearDateCalendar.set(Calendar.MINUTE, 0);
            financialYearDateCalendar.set(Calendar.SECOND, 0);
            financialYearDateCalendar.set(Calendar.MILLISECOND, 0);
            returnDate = financialYearDateCalendar.getTime();
        } else {
            financialYearDateCalendar.add(Calendar.YEAR, 1);
            financialYearDateCalendar.add(Calendar.DATE, -1);
            financialYearDateCalendar.set(Calendar.HOUR, 23);
            financialYearDateCalendar.set(Calendar.MINUTE, 59);
            financialYearDateCalendar.set(Calendar.SECOND, 59);
            financialYearDateCalendar.set(Calendar.MILLISECOND, 999);
            returnDate = financialYearDateCalendar.getTime();
        }
        
        return returnDate;
    }
    
    /**
     * Description: Method for importing Convert Sales Invoice in to Cash Sales.
     *
     * @param request
     * @param response
     * @return
     */
    public ModelAndView importConvertSalesInvoiceInToCashSales(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        try {
            JSONObject paramJobj = getImportConvertSalesInvoiceInToCashSalesParams(request);
            jobj = importConvertSalesInvoiceInToCashSalesJSON(paramJobj);
        } catch (Exception ex) {
            Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
        }
        return new ModelAndView(Constants.jsonView, "model", jobj.toString());
    }

    /**
     * Description: Method for getting parameters of import Convert Sales Invoice in to Cash Sales.
     *
     * @param request
     * @return
     * @throws JSONException
     * @throws SessionExpiredException
     */
    public JSONObject getImportConvertSalesInvoiceInToCashSalesParams(HttpServletRequest request) throws JSONException, SessionExpiredException {
        JSONObject paramJobj = StringUtil.convertRequestToJsonObject(request);
        paramJobj.put("servletContext", this.getServletContext());
        return paramJobj;
    }
    
    /**
     * Description: Method for importing and validating Convert Sales Invoice in to Cash Sales.
     *
     * @param paramJobj
     * @return
     */
    public JSONObject importConvertSalesInvoiceInToCashSalesJSON(JSONObject paramJobj) {
        JSONObject jobj = new JSONObject();
        try {
            String doAction = paramJobj.getString("do");

            if (doAction.compareToIgnoreCase("import") == 0) {
                jobj = importConvertSalesInvoiceInToCashSalesRecordsForCSV(paramJobj);
            } else if (doAction.compareToIgnoreCase("validateData") == 0) {
                String eParams = paramJobj.getString("extraParams");
                JSONObject extraParams = StringUtil.isNullOrEmpty(eParams) ? new JSONObject() : new JSONObject(eParams);
                extraParams.put("Company", paramJobj.getString(Constants.companyKey));

                // for getting import parameters
                HashMap<String, Object> requestParams = importHandler.getImportRequestParams(paramJobj);
                requestParams.put("extraParams", extraParams);
                requestParams.put("extraObj", null);
                requestParams.put("servletContext", paramJobj.get("servletContext"));

                jobj = importHandler.validateFileData(requestParams);
                jobj.put("success", true);
            }
        } catch (Exception ex) {
            try {
                jobj.put("success", false);
                jobj.put("msg", "" + ex.getMessage());
            } catch (JSONException jex) {
                Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, jex);
            }
        }
        return jobj;
    }
    
    /**
     * Description: Method for business logic of import Convert Sales Invoice in to Cash Sales.
     *
     * @param requestJobj
     * @return
     * @throws AccountingException
     * @throws IOException
     * @throws SessionExpiredException
     * @throws JSONException
     */
    public JSONObject importConvertSalesInvoiceInToCashSalesRecordsForCSV(JSONObject requestJobj) throws AccountingException, IOException, SessionExpiredException, JSONException {
        JSONObject returnObj = new JSONObject();
        String msg = "";
        int total = 0, failed = 0;
        String fileName = requestJobj.getString("filename");
        String companyID = requestJobj.getString(Constants.companyKey);
        boolean issuccess = true;
        FileInputStream fileInputStream = null;
        CsvReader csvReader = null;
        boolean isDraft = false;
        boolean inCash = true;
        Map<String, Object> bankReconsilationMap = new HashMap<>();

        try {
            String dateFormat = null, dateFormatId = requestJobj.getString("dateFormat");
            if (!StringUtil.isNullOrEmpty(dateFormatId)) {
                KwlReturnObject kdfObj = accountingHandlerDAOobj.getObject(KWLDateFormat.class.getName(), dateFormatId);
                KWLDateFormat kdf = (KWLDateFormat) kdfObj.getEntityList().get(0);

                dateFormat = kdf != null ? kdf.getJavaForm() : null;
            }
            DateFormat df = new SimpleDateFormat(dateFormat);
            df.setLenient(false);

            KwlReturnObject capresult = accountingHandlerDAOobj.getObject(CompanyAccountPreferences.class.getName(), companyID);
            CompanyAccountPreferences preferences = (CompanyAccountPreferences) capresult.getEntityList().get(0);

            String destinationDirectory = storageHandlerImpl.GetDocStorePath() + "importplans";
            File filePath = new File(destinationDirectory + File.separator + fileName);
            fileInputStream = new FileInputStream(filePath);
            String delimiterType = requestJobj.getString("delimiterType");
            csvReader = new CsvReader(new InputStreamReader(fileInputStream), delimiterType);

            JSONObject resjson = new JSONObject(requestJobj.getString("resjson"));
            JSONArray jSONArray = resjson.getJSONArray("root");
            HashMap<String, Integer> columnConfig = new HashMap<>();
            for (int i = 0; i < jSONArray.length(); i++) {
                JSONObject jSONObject = jSONArray.getJSONObject(i);
                columnConfig.put(jSONObject.getString("dataindex"), jSONObject.getInt("csvindex"));
            }

            int cnt = 0;
            StringBuilder failedRecords = new StringBuilder();

            Set invoiceNumberSet = new HashSet();
            while (csvReader.readRecord()) {
                String failureMsg = "";
                String[] recarr = csvReader.getValues();

                if (cnt == 0) {
                    failedRecords.append(accSalesOrderServiceobj.createCSVrecord(recarr)).append("\" \"");
                } else if (cnt == 1) {
                    failedRecords.append("\n").append(accSalesOrderServiceobj.createCSVrecord(recarr)).append("\"Error Message\"");
                } else {
                    try {
                        String entryNumber = "";
                        if (columnConfig.containsKey("invoiceNumber")) {
                            entryNumber = recarr[(Integer) columnConfig.get("invoiceNumber")].replaceAll("\"", "").trim();
                            if (StringUtil.isNullOrEmpty(entryNumber)) {
                                failureMsg += "Invoice Number is not available. ";
                            } else if(!invoiceNumberSet.add(entryNumber)){
                                failureMsg += "Duplicate Invoice Number '" + entryNumber + "' in file";
                            }
                        } else {
                            failureMsg += "Invoice Number column is not found. ";
                        }

                        String poRefNumber = "";
                        if (columnConfig.containsKey("poRefNumber")) {
                            poRefNumber = recarr[(Integer) columnConfig.get("poRefNumber")].replaceAll("\"", "").trim();
                        }
                        String exportDeclarationNo = "";
                        if (columnConfig.containsKey(Constants.importExportDeclarationNo)) {
                            exportDeclarationNo = recarr[columnConfig.get(Constants.importExportDeclarationNo)].replaceAll("\"", "").trim();
                        }

                        Date shipDate = null;
                        if (columnConfig.containsKey("shipdate")) {
                            String shipDateStr = recarr[(Integer) columnConfig.get("shipdate")].replaceAll("\"", "").trim();

                            if (!StringUtil.isNullOrEmpty(shipDateStr)) {
                                try {
                                    shipDate = df.parse(shipDateStr);
                                } catch (Exception ex) {
                                    failureMsg += "Incorrect date format for Delivery Date, Please specify values in " + dateFormat + " format. ";
                                }
                            }
                        }

                        String memo = "";
                        if (columnConfig.containsKey("memo")) {
                            memo = recarr[(Integer) columnConfig.get("memo")].replaceAll("\"", "").trim();
                        }

                        String shipVia = "";
                        if (columnConfig.containsKey("shipvia")) {
                            shipVia = recarr[(Integer) columnConfig.get("shipvia")].replaceAll("\"", "").trim();
                        }

                        String fob = "";
                        if (columnConfig.containsKey("fob")) {
                            fob = recarr[(Integer) columnConfig.get("fob")].replaceAll("\"", "").trim();
                        }

                        String salesPersonID = "";
                        if (columnConfig.containsKey("salesperson")) {
                            String salesPersonName = recarr[(Integer) columnConfig.get("salesperson")].replaceAll("\"", "").trim();
                            if (!StringUtil.isNullOrEmpty(salesPersonName)) {
                                salesPersonID = getSalesPersonIDByName(salesPersonName, companyID);
                                if (StringUtil.isNullOrEmpty(salesPersonID)) {
                                    failureMsg += "Sales Person is not found for name " + salesPersonName + ". ";
                                }
                            }
                        }

                        PaymentMethod payMethod = null;
                        if (columnConfig.containsKey("paymentmethodid")) {
                            String paymentMethodStr = recarr[(Integer) columnConfig.get("paymentmethodid")].replaceAll("\"", "").trim();
                            if (!StringUtil.isNullOrEmpty(paymentMethodStr)) {
                                KwlReturnObject retObj = accMasterItemsDAOobj.getPaymentMethodIdFromName(paymentMethodStr, companyID);
                                if (retObj != null && !retObj.getEntityList().isEmpty()) {
                                    payMethod = (PaymentMethod) retObj.getEntityList().get(0);
                                }
                                if (payMethod == null) {
                                    failureMsg += "Payment Method is not found for " + paymentMethodStr + ". ";
                                }
                            } else {
                                failureMsg += "Payment Method is not available. ";
                            }
                        } else {
                            failureMsg += "Payment Method column is not found. ";
                        }

                        String ChequeNo = "";
                        if (columnConfig.containsKey("chequeno")) {
                            ChequeNo = recarr[(Integer) columnConfig.get("chequeno")].replaceAll("\"", "").trim();
                        }

                        String bankName = "";
                        String bankNameMasterItemID = "";
                        if (columnConfig.containsKey("bankname")) {
                            bankName = recarr[(Integer) columnConfig.get("bankname")].replaceAll("\"", "").trim();
                            if (!StringUtil.isNullOrEmpty(bankName)) {
                                KwlReturnObject returnObject = importDao.getBankNameMasterItemName(companyID, bankName);
                                if (returnObject.getEntityList().isEmpty()) {
                                    failureMsg += "Incorrect Bank Name type value for Bank Name. Please add new Bank Name as \"" + bankName + "\" with other details.";
                                } else {
                                    MasterItem masterItem = (MasterItem) returnObject.getEntityList().get(0);
                                    bankNameMasterItemID = masterItem.getID();
                                }
                            } else {
                                if (payMethod != null && payMethod.getDetailType() == Constants.bank_detail_type) {
                                    failureMsg += "Empty data found in Bank Name, cannot set empty data for Bank Name if Payment Method is selected as Bank.";
                                }
                            }
                        } else {
                            if (payMethod != null && payMethod.getDetailType() == Constants.bank_detail_type) {
                                failureMsg += "Bank Name column is not found. ";
                            }
                        }

                        Date chequeDate = null;
                        if (columnConfig.containsKey("chequedate")) {
                            String chequeDateStr = recarr[(Integer) columnConfig.get("chequedate")].replaceAll("\"", "").trim();

                            if (StringUtil.isNullOrEmpty(chequeDateStr)) {
                                if (payMethod != null && payMethod.getDetailType() != PaymentMethod.TYPE_CASH) {
                                    failureMsg += "Cheque Date is not available. ";
                                }
                            } else {
                                try {
                                    chequeDate = df.parse(chequeDateStr);
                                } catch (Exception ex) {
                                    failureMsg += "Incorrect date format for Cheque Date, Please specify values in " + dateFormat + " format. ";
                                }
                            }
                        } else {
                            if (payMethod != null && payMethod.getDetailType() != PaymentMethod.TYPE_CASH) {
                                failureMsg += "Cheque Date column is not found. ";
                            }

                        }

                        boolean cleared = false;
                        if (columnConfig.containsKey("paymentStatus")) {
                            String paymentStatusStr = recarr[(Integer) columnConfig.get("paymentStatus")].replaceAll("\"", "").trim();
                            if (StringUtil.isNullOrEmpty(paymentStatusStr)) {
                                cleared = false;
                            } else {
                                if (paymentStatusStr.equalsIgnoreCase("Cleared")) {
                                    cleared = true;
                                } else if (paymentStatusStr.equalsIgnoreCase("Uncleared")) {
                                    cleared = false;
                                } else {
                                    failureMsg += "Incorrect Payment Status type value for Payment Status. It should be either Cleared or Uncleared. ";
                                }
                            }
                        }

                        Date clearanceDate = null;
                        if (columnConfig.containsKey("clearanceDate")) {
                            if (payMethod.getDetailType() != PaymentMethod.TYPE_CASH && cleared) { // when payment type is other than cash and payment sttus is clear then only need of clerance date. So its validation
                                String clearenceDateStr = recarr[(Integer) columnConfig.get("clearanceDate")].replaceAll("\"", "").trim();
                                if (!StringUtil.isNullOrEmpty(clearenceDateStr)) {
                                    try {
                                        clearanceDate = df.parse(clearenceDateStr);
                                        if (chequeDate.compareTo(clearanceDate) > 0) {
                                            failureMsg += "Clearence date should be greter than Cheque date.";
                                        }
                                    } catch (ParseException ex) {
                                        failureMsg += "Incorrect date format for Clearence Date, Please specify values in " + dateFormat + " format.";
                                    }
                                } else {
                                    failureMsg += "You have entered the Payment Status as Cleared. So you cannot set empty data for Clearence Date.";
                                }
                            }
                        } else {
                            if (payMethod.getDetailType() != PaymentMethod.TYPE_CASH && cleared) {
                                failureMsg += "Clearance Date column is not found. ";
                            }
                        }

                        String ChequeDesc = "";
                        if (columnConfig.containsKey("chequedescription")) {
                            ChequeDesc = recarr[(Integer) columnConfig.get("chequedescription")].replaceAll("\"", "").trim();
                        }


                        String modifiedby = requestJobj.getString(Constants.useridKey);
                        long updatedon = System.currentTimeMillis();

                        Invoice invoice = null;
                        KwlReturnObject result = accInvoiceDAOobj.getInvoiceCount(entryNumber, companyID);
                        int nocount = result.getRecordTotalCount();
                        if (nocount == 0) {
                            throw new AccountingException("Invoice number'" + entryNumber + "' is not exists.");
                        } else {
                            invoice = (Invoice) result.getEntityList().get(0);
                        }

                        if (!StringUtil.isNullOrEmpty(failureMsg)) {
                            throw new AccountingException(failureMsg);
                        }

                        // in cash when payment method selected
                        PayDetail paydetail = invoice.getPayDetail();
                        if (payMethod != null) {
                            HashMap pdetailhm = new HashMap();
                            pdetailhm.put("paymethodid", payMethod.getID());
                            pdetailhm.put("companyid", companyID);

                            if (payMethod.getDetailType() != PaymentMethod.TYPE_CASH) {
                                if (payMethod.getDetailType() == PaymentMethod.TYPE_BANK) {
                                    HashMap chequehm = new HashMap();
                                    chequehm.put("chequeno", ChequeNo);
                                    chequehm.put("description", ChequeDesc);
                                    chequehm.put("bankname", bankName);
                                    chequehm.put("bankmasteritemid", bankNameMasterItemID);
                                    chequehm.put("duedate", chequeDate);
                                    chequehm.put("companyId", companyID);
                                    KwlReturnObject cqresult = accPaymentDAOobj.addCheque(chequehm);
                                    Cheque cheque = (Cheque) cqresult.getEntityList().get(0);
                                    pdetailhm.put("chequeid", cheque.getID());

                                    /*
                                     * need to save the data to reconcilation
                                     * Cleared or Uncleared
                                     */
                                    boolean bankReconsilationEntry = cleared;
                                    if (bankReconsilationEntry) {
                                        String bankAccountId = payMethod.getAccount().getID();
                                        Date fyDate = preferences.getFinancialYearFrom();
                                        Date startDate = getFinancialYearStartEndDate(true, fyDate);
                                        Date endDate = getFinancialYearStartEndDate(false, fyDate);
                                        bankReconsilationMap.put("bankAccountId", bankAccountId);
                                        bankReconsilationMap.put("startDate", startDate);
                                        bankReconsilationMap.put("endDate", endDate);
                                        bankReconsilationMap.put("clearanceDate", clearanceDate);
                                        bankReconsilationMap.put("endingAmount", 0.0);
                                        bankReconsilationMap.put("companyId", companyID);
                                    }
                                }
                            }
                            KwlReturnObject payresult = accPaymentDAOobj.addPayDetail(pdetailhm);
                            paydetail = (PayDetail) payresult.getEntityList().get(0);
                        }
                        
                        if (!bankReconsilationMap.isEmpty()) {
                            bankReconsilationMap.put("clearingamount", invoice.getInvoiceamount());
                            bankReconsilationMap.put("currencyid", invoice.getCurrency().getCurrencyID());
                            bankReconsilationMap.put("invoice", invoice);

                            HashMap<String, Object> globalParams = AccountingManager.getGlobalParamsJson(requestJobj);
                            accInvoiceModuleService.saveBankReconsilation(bankReconsilationMap, globalParams);
                        }

                        String accountID = "";
                        if (inCash) {
                            if (paydetail != null && paydetail.getPaymentMethod() != null) {
                                accountID = paydetail.getPaymentMethod().getAccount().getID();
                            } else {
                                accountID = preferences.getCashAccount().getID();
                            }
                        }
                        
                        // creating json
                        JSONObject invjson = new JSONObject();
                        invjson.put("accountid", accountID);
                        if (paydetail != null) {
                            invjson.put("paydetailsid", paydetail.getID());
                        }

                        invjson.put("invoiceid", invoice.getID());
                        invjson.put("incash", inCash);
                        invjson.put("memo", memo);
                        invjson.put("porefno", poRefNumber);
                        invjson.put("companyid", companyID);
                        invjson.put("salesPerson", salesPersonID);
                        invjson.put("shipvia", shipVia);
                        invjson.put("fob", fob);
                        invjson.put("modifiedby", modifiedby);
                        invjson.put("updatedon", updatedon);
                        invjson.put("isDraft", isDraft);
                        if (shipDate != null) {
                            invjson.put("shipdate", shipDate);
                        }
                        invjson.put(Constants.importExportDeclarationNo, exportDeclarationNo);
                        
                        HashSet invcdetails = new HashSet();
                        result = accInvoiceDAOobj.updateInvoice(invjson, invcdetails);
                        invoice = (Invoice) result.getEntityList().get(0); // Add invoice details 

                        JSONObject jeJobj = new JSONObject();
                        HashSet<JournalEntryDetail> details = new HashSet<>();
                        jeJobj.put("jeid", invoice.getJournalEntry().getID());
                        jeJobj.put("transactionModuleid", inCash ? Constants.Acc_Cash_Sales_ModuleId : Constants.Acc_Invoice_ModuleId);
                        jeJobj.put("memo", memo);
                        accJournalEntryobj.updateJournalEntry(jeJobj, details);
                    } catch (Exception ex) {
                        failed++;
                        String errorMsg = ex.getMessage();
                        if (ex.getMessage() != null) {
                            errorMsg = ex.getMessage();
                        } else if (ex.getCause() != null) {
                            errorMsg = ex.getCause().getMessage();
                        }

                        failedRecords.append("\n").append(accSalesOrderServiceobj.createCSVrecord(recarr)).append("\"").append(errorMsg.replaceAll("\"", "")).append("\"");
                    }
                    total++;
                }
                cnt++;
            }

            if (failed > 0) {
                importHandler.createFailureFiles(fileName, failedRecords, ".csv");
            }

            int success = total - failed;
            if (total == 0) {
                msg = "Empty file.";
            } else if (success == 0) {
                msg = "Failed to import all the records.";
            } else if (success == total) {
                msg = "All records are imported successfully.";
            } else {
                msg = "Imported " + success + " record" + (success > 1 ? "s" : "") + " successfully";
                msg += (failed == 0 ? "." : " and failed to import " + failed + " record" + (failed > 1 ? "s" : "") + ".");
            }
        } catch (Exception ex) {
            issuccess = false;
            msg = "" + ex.getMessage();

            Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
            throw new AccountingException("Error While Importing Records.");
        } finally {
            fileInputStream.close();
            csvReader.close();

            // For saving import log
            accSalesOrderServiceobj.saveImportLog(requestJobj, msg, total, failed, Constants.CONVERT_SALES_INVOICE_INTO_CASH_SALES_MODULE_ID);

            try {
                returnObj.put("success", issuccess);
                returnObj.put("msg", msg);
                returnObj.put("totalrecords", total);
                returnObj.put("successrecords", total - failed);
                returnObj.put("failedrecords", failed);
                returnObj.put("filename", ImportLog.getActualFileName(fileName));
                returnObj.put("Module", Constants.CONVERT_SALES_INVOICE_INTO_CASH_SALES_MODULE_ID);
            } catch (JSONException ex) {
                Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

        return returnObj;
    }

    public ModelAndView getSalesAnalysisReportGraphical(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        JSONObject convertedObj = new JSONObject();
        boolean issuccess = false;
        String msg = "";
        try {
            JSONObject paramJobj = StringUtil.convertRequestToJsonObject(request);
            boolean isTopCustomers = Boolean.parseBoolean(request.getParameter("isTopCustomers"));
            boolean isTopProducts = Boolean.parseBoolean(request.getParameter("isTopProducts"));
            boolean isTopAgents = Boolean.parseBoolean(request.getParameter("isTopAgents"));

            if(isTopCustomers){
                jobj = accInvoiceServiceDAO.getSalesAnalysis_TopCustomers_Report(paramJobj);
            }else if(isTopProducts){
                jobj = accInvoiceServiceDAO.getSalesAnalysis_TopProducts_Report(paramJobj);
            }else if(isTopAgents){
                jobj = accInvoiceServiceDAO.getSalesAnalysis_TopAgents_Report(paramJobj);
            }
            if(jobj.has("data")){
                JSONArray dataArr = jobj.getJSONArray("data");
                JSONArray convertedArr = new JSONArray();
                DecimalFormat df = new DecimalFormat("###.##");
                for (int i = 0; i < dataArr.length(); i++) {
                    JSONObject temp = new JSONObject();
                    JSONObject origObj = dataArr.getJSONObject(i);
                    temp.put("accname", origObj.getString("accname"));
                    temp.put("value",   df.format(origObj.get("value")));
                    convertedArr.put(temp);
                }
            convertedObj.put("data", convertedArr);
        }
            
            issuccess = true;
        } catch (Exception ex) {
            msg = "" + ex.getMessage();
            Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                jobj.put("success", issuccess);
                jobj.put("msg", msg);
            } catch (JSONException ex) {
                Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return new ModelAndView("jsonView_ex", "model", convertedObj.toString());
    }
    
    public ModelAndView getSalesAnalysisReport(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        boolean issuccess = false;
        String msg = "";
        try {
            JSONObject paramJobj = StringUtil.convertRequestToJsonObject(request);
            boolean isTopCustomers = Boolean.parseBoolean(request.getParameter("isTopCustomers"));
            boolean isTopProducts = Boolean.parseBoolean(request.getParameter("isTopProducts"));
            boolean isTopAgents = Boolean.parseBoolean(request.getParameter("isTopAgents"));

            if(isTopCustomers){
                jobj = accInvoiceServiceDAO.getSalesAnalysis_TopCustomers_Report(paramJobj);
            }else if(isTopProducts){
                jobj = accInvoiceServiceDAO.getSalesAnalysis_TopProducts_Report(paramJobj);
            }else if(isTopAgents){
                jobj = accInvoiceServiceDAO.getSalesAnalysis_TopAgents_Report(paramJobj);
            }
            issuccess = true;
        } catch (Exception ex) {
            msg = "" + ex.getMessage();
            Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                jobj.put("success", issuccess);
                jobj.put("msg", msg);
            } catch (JSONException ex) {
                Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return new ModelAndView("jsonView_ex", "model", jobj.toString());
    }

    public ModelAndView exportSalesAnalysisReport(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        String view = "jsonView_ex";
        try {
            JSONObject paramJobj = StringUtil.convertRequestToJsonObject(request);
            boolean isTopCustomers = Boolean.parseBoolean(request.getParameter("isTopCustomers"));
            boolean isTopProducts = Boolean.parseBoolean(request.getParameter("isTopProducts"));
            boolean isTopAgents = Boolean.parseBoolean(request.getParameter("isTopAgents"));
            
            paramJobj.put("isExport",true);

            if(isTopCustomers){
                jobj = accInvoiceServiceDAO.getSalesAnalysis_TopCustomers_Report(paramJobj);
            }else if(isTopProducts){
                jobj = accInvoiceServiceDAO.getSalesAnalysis_TopProducts_Report(paramJobj);
            }else if(isTopAgents){
                jobj = accInvoiceServiceDAO.getSalesAnalysis_TopAgents_Report(paramJobj);
            }
            String fileType = request.getParameter("filetype");
            if (StringUtil.equal(fileType, "print")) {
                String GenerateDate = authHandler.getDateFormatter(request).format(new Date());
                jobj.put("GenerateDate", GenerateDate);
                view = "jsonView-empty";
            }
            exportDaoObj.processRequest(request, response, jobj);
            jobj.put("success", true);
        } catch (Exception ex) {
            Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
        }
        return new ModelAndView(view, "model", jobj.toString());
    }
    
    /*
     * Function for fetching payment details of payments done against invoices
     */ 
    public ModelAndView getPaymentDetailsForInvoice(HttpServletRequest request, HttpServletResponse response){
        JSONObject jobj = new JSONObject();
        String msg = "";
        boolean isSuccess=false;
        try{
            JSONObject paramJobj = StringUtil.convertRequestToJsonObject(request);
            Date endDate = authHandler.getDateOnlyFormat().parse(request.getParameter("enddate"));
            Date startDate = authHandler.getDateOnlyFormat().parse(request.getParameter("startdate"));
            paramJobj.put("startdate", startDate);
            paramJobj.put("enddate", endDate);
            jobj = accInvoiceServiceDAO.getPaymentDetailsForInvoice(paramJobj);
            isSuccess = true;
        } catch(Exception ex){
            Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                jobj.put("success", isSuccess);
                jobj.put("msg", msg);
            } catch (JSONException ex) {
                Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return new ModelAndView(Constants.jsonView,"model",jobj.toString());
    }
    
    /*
     * Function for exporting the payment details of payments done against invoices
     */ 
    public ModelAndView exportPaymentDetailsForInvoice(HttpServletRequest request, HttpServletResponse response){
        JSONObject jobj = new JSONObject();
        String msg = "";
        boolean isSuccess=false;
        String view = Constants.jsonView;
        try{
            JSONObject paramJobj = StringUtil.convertRequestToJsonObject(request);
            Date endDate = authHandler.getDateOnlyFormat().parse(request.getParameter("enddate"));
            Date startDate = authHandler.getDateOnlyFormat().parse(request.getParameter("startdate"));
            paramJobj.put("startdate", startDate);
            paramJobj.put("enddate", endDate);
            paramJobj.put("isExport", true);
            jobj = accInvoiceServiceDAO.getPaymentDetailsForInvoice(paramJobj);
            String fileType = request.getParameter("filetype");
            if (StringUtil.equal(fileType, "print")) {
                String GenerateDate = authHandler.getDateFormatter(request).format(new Date());
                jobj.put("GenerateDate", GenerateDate);
                view = "jsonView-empty";
            }
            exportDaoObj.processRequest(request, response, jobj);
            isSuccess = true;
        } catch(Exception ex){
            Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                jobj.put("success", isSuccess);
                jobj.put("msg", msg);
            } catch (JSONException ex) {
                Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return new ModelAndView(view,"model",jobj.toString());
    }
    
    public ModelAndView revertFileGenerationStatus(HttpServletRequest request, HttpServletResponse response){
        JSONObject jobj = new JSONObject();
        String msg = "";
        boolean issuccess = false;

        DefaultTransactionDefinition def = new DefaultTransactionDefinition();
        def.setName("UOBRevertStatus_Tx");
        def.setPropagationBehavior(TransactionDefinition.PROPAGATION_REQUIRED);
        TransactionStatus status = txnManager.getTransaction(def);
        try {
            String companyId = sessionHandlerImpl.getCompanyid(request);
            String invoiceIds = request.getParameter("arrayOfBillIds")!=null?request.getParameter("arrayOfBillIds"):"";
            HashMap<String,Object> map = new HashMap<>();
            map.put("companyId", companyId);
            map.put("invoiceIds", invoiceIds);
            accInvoiceModuleService.revertGIROFileGenerationStatus(map);
            issuccess = true;
            msg = messageSource.getMessage("acc.uob.statusRevertedSuccessfully", null, RequestContextUtils.getLocale(request));
            txnManager.commit(status);
        } catch (SessionExpiredException ex) {
            txnManager.rollback(status);
            msg = ex.getMessage();
            Logger.getLogger(accInvoiceController.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            txnManager.rollback(status);
            msg = "" + ex.getMessage();
            Logger.getLogger(accInvoiceController.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                jobj.put(Constants.RES_success, issuccess);
                jobj.put(Constants.RES_msg, msg);
            } catch (JSONException ex) {
                Logger.getLogger(accInvoiceController.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return new ModelAndView(Constants.jsonView, "model", jobj.toString());
    }
    /**
     * @Desc Fetch data in shipping report
     * @param request
     * @param response
     * @return
     */
    public ModelAndView getShippingDeliveryOrders(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        String msg = "";
        boolean issuccess = false;
        try {
            Map<String, Object> requestMap = new HashMap();
            requestMap.put(Constants.df, authHandler.getDateOnlyFormat());
            requestMap.put("requestcontextutilsobj", RequestContextUtils.getLocale(request));
            requestMap.put(Constants.companyKey, sessionHandlerImpl.getCompanyid(request));
            JSONObject reqparams = StringUtil.convertRequestToJsonObject(request);
            jobj = accInvoiceServiceDAO.getShippingDeliveryOrder(reqparams, requestMap);

        } catch (SessionExpiredException ex) {
            msg = ex.getMessage();
            Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ServiceException ex) {
            msg = "getDeliveryOrderRowsForpackingDoDetails" + ex.getMessage();
            Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            msg = "getDeliveryOrderRowsForpackingDoDetails" + ex.getMessage();
            Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                jobj.put("success", issuccess);
                jobj.put("msg", msg);
            } catch (JSONException ex) {
                Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return new ModelAndView(Constants.jsonView, Constants.model, jobj.toString());
    }
    /**
     * @Desc : Export Shipping DO report
     * @param request
     * @param response
     * @return 
     */
        public ModelAndView exportShippingDO(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        JSONArray DataJArr = new JSONArray();
        String view = "jsonView_ex";
        String msg = "";
        try {
            /*
             Put Request params into Map
             */
            HashMap<String, Object> requestParams = new HashMap<String, Object>();
            requestParams.put("ss", request.getParameter("ss"));
            requestParams.put("isExport", true);
            requestParams.put(Constants.df, authHandler.getDateOnlyFormat());
            if (!StringUtil.isNullOrEmpty(request.getParameter("productid"))) {
                requestParams.put("productid", request.getParameter("productid"));
            }
            if (!StringUtil.isNullOrEmpty(request.getParameter("customerid"))) {
                requestParams.put("customerid", request.getParameter("customerid"));
            }
            requestParams.put(Constants.REQ_startdate, request.getParameter("startdate"));
            requestParams.put(Constants.REQ_enddate, request.getParameter("enddate"));
            requestParams.put(Constants.companyKey, sessionHandlerImpl.getCompanyid(request));
            requestParams.put("requestcontextutilsobj", RequestContextUtils.getLocale(request));
            JSONObject reqparams = StringUtil.convertRequestToJsonObject(request);
            reqparams.put("isExport", true);
            jobj = accInvoiceServiceDAO.getShippingDeliveryOrder(reqparams, requestParams);
            DataJArr = (JSONArray) jobj.optJSONArray("data");
            request.setAttribute("isExport", true);
            jobj.put("data", DataJArr);
            jobj.put("count", DataJArr.length());
            String fileType = request.getParameter("filetype");
            if (StringUtil.equal(fileType, "print")) {
                String GenerateDate = authHandler.getDateFormatter(request).format(new Date());
                jobj.put("GenerateDate", GenerateDate);
                view = "jsonView-empty";
            }
            exportDaoObj.processRequest(request, response, jobj);
        } catch (Exception ex) {
            msg = "" + ex.getMessage();
            Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                jobj.put("msg", msg);
            } catch (JSONException ex) {
                Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return new ModelAndView(Constants.jsonView, "model", jobj.toString());
    }
        
    public ModelAndView exportCheckListSO(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        HashMap<String, Object> requestParams = new HashMap<String, Object>();
        try {
            JSONObject paramJobj = StringUtil.convertRequestToJsonObject(request);
            DateFormat df = authHandler.getDateOnlyFormat();
            requestParams.put(Constants.REQ_startdate, df.parse(request.getParameter("startdate")));
            requestParams.put(Constants.REQ_enddate, df.parse(request.getParameter("enddate")));
            requestParams.put("companyId", sessionHandlerImpl.getCompanyid(request));
            DateFormat udf = authHandler.getUserDateFormatterWithoutTimeZone(request);
            requestParams.put("userDateFormat", udf);
            if (paramJobj.optBoolean("salesPersonFilterFlag", false)) {
                requestParams.put("salesPersonFilterFlag", (String) request.getParameter("salesPersonFilterFlag"));
                requestParams.put("newcustomerid", request.getParameter("newcustomerid"));
}
            Map<String, Object> jasperMap = accInvoiceServiceDAO.getCheckListSOAgainstDO(requestParams);

            response.setHeader("Content-Disposition", "attachment;filename=" + "SOCheckList.pdf");

            JasperPrint jasperPrint = null;
            JasperReport jasperReport = null;
            JasperReport jasperReportSubReport = null;
            InputStream inputStream = null;
            InputStream inputStreamSubReport = null;
            int templateflag = Integer.parseInt((String) request.getParameter("templateflag"));
            if (templateflag == Constants.hinsitsu_templateflag) {
                inputStream = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/CheckListSOMainReport.jrxml");
                inputStreamSubReport = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/CheckListSOSubReport.jrxml");
            }
            JasperDesign jasperDesign = JRXmlLoader.load(inputStream);
            jasperReport = JasperCompileManager.compileReport(jasperDesign);

            List SOList = new ArrayList();
            OnlyDatePojo odp = new OnlyDatePojo();
            odp.setDate(df.format(new Date()));
            SOList.add(odp);
            JasperDesign jasperDesignSubReport = JRXmlLoader.load(inputStreamSubReport);
            jasperReportSubReport = JasperCompileManager.compileReport(jasperDesignSubReport);
            jasperMap.put("subReport", jasperReportSubReport);
            JRBeanCollectionDataSource beanColDataSource = new JRBeanCollectionDataSource(SOList);
            jasperPrint = JasperFillManager.fillReport(jasperReport, jasperMap, beanColDataSource);

            ArrayList list = new ArrayList();
            list.add(jasperPrint);
            JRPdfExporter exp = new JRPdfExporter();
            exp.setParameter(JRExporterParameter.JASPER_PRINT_LIST, list);
            exp.setParameter(JRPdfExporterParameter.OUTPUT_STREAM, response.getOutputStream());
            exp.exportReport();

        } catch (Exception e) {
            Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, e);
        }
        return new ModelAndView(Constants.jsonView, "model", jobj.toString());
    }
    
    //ERM-745: From Delivery Order Report when selecting multiple DO generates multiple GRN on the basis of Vendor Mapped Products
    public ModelAndView generateGRNFromMultipleDO(HttpServletRequest request, HttpServletResponse response) throws ServiceException, SessionExpiredException, JSONException {
        JSONObject paramJobj = StringUtil.convertRequestToJsonObject(request);
        JSONObject returnJObj = accInvoiceServiceDAO.generateGRNFromMultipleDO(paramJobj);
        return new ModelAndView(Constants.jsonView, "model", returnJObj.toString());
    }
    /*Save Invoice*/   
    /**
     * This method is only called when user creates sales invoice from UI i.e
     * from invoice report or dashboard. ERM-736 
     * @param request
     * @param response
     * @return
     * @throws SessionExpiredException
     * @throws ServiceException
     * @throws JSONException 
     */
    public ModelAndView saveInvoice(HttpServletRequest request, HttpServletResponse response) throws SessionExpiredException, ServiceException, JSONException {
        JSONObject jobj = new JSONObject();
        boolean issuccess = false;
        boolean pendingApproval = false;
        boolean receiptIsSuccess = false;
        boolean isDraft = false;
        String channelName = "";
        try {
            JSONObject paramJobj = StringUtil.convertRequestToJsonObject(request);
            String url = this.getServletContext().getInitParameter(Constants.inventoryURL);
            paramJobj.put(Constants.inventoryURL, url);
            String baseUrl = URLUtil.getPageURL(request, loginpageFull);
            String userName = sessionHandlerImpl.getUserFullName(request);
            paramJobj.put(Constants.username,userName);
            paramJobj.put("baseUrl", baseUrl);
            jobj = accInvoiceModuleService.saveInvoice(paramJobj);   
            issuccess = jobj.optBoolean(Constants.RES_success, false);
            pendingApproval = jobj.optBoolean("pendingApproval", false);
            isDraft = paramJobj.optBoolean(Constants.isDraft, false);
            
            /**
             * If invoice is saved successfully than fetching all the linked
             * advance receipts to all sales order which are linked to sales
             * invoice by ordering it on createdon as we have to apply FIFO
             * logic to knock off the advance receipt and sales invoice. ERM-736
             */
            if (issuccess && !pendingApproval && !isDraft) {
                String linkMode = paramJobj.optString("fromLinkCombo");
                boolean linkWithAdvanceReceipt = linkMode.equalsIgnoreCase(Constants.SALESORDER);
                if (linkWithAdvanceReceipt) {
                    String invid = "";
                    if (jobj.has("invid") && !StringUtil.isNullOrEmpty(jobj.optString("invid", ""))) {
                        invid = jobj.optString("invid", "");
                    }
                    /**
                     * If sales invoice is linked to sales order than getting
                     * the all the sales order ids linked to sales invoice and
                     * then fetching the advance receipt linked to all sales
                     * order. ERM-736
                     */
                    String[] linkNumbers = paramJobj.optString("linkNumber").split(",");
                    if (linkMode.equalsIgnoreCase(Constants.SALESORDER)) {
                        JSONObject linkParamsObj = new JSONObject();
                        String docIds = org.springframework.util.StringUtils.collectionToDelimitedString(Arrays.asList(linkNumbers), ",", "'", "'");
                        linkParamsObj.put("docid", docIds);
                        linkParamsObj.put("moduleid", Constants.Acc_Receive_Payment_ModuleId);
                        linkParamsObj.put("excludeTempDeletedReceipt", true);
                        KwlReturnObject result3 = accSalesOrderDAOobj.getLinkedDocByModuleId(linkParamsObj);
                        /**
                         * Passing all the adv receipt one by one and invoice to
                         * create a json and then passing json to
                         * linkReceiptToDocumentsJSON method to link it to sales
                         * invoice the logic of linkReceiptToDocumentsJSON is
                         * same as the function which is called from UI when we
                         * link SI to any Adv Receipt. ERM-736
                         */
                        if (result3.getEntityList() != null && !result3.getEntityList().isEmpty()) {
                            List<Object[]> list = result3.getEntityList();
                            for (Object[] advanceDetail : list) {
                                JSONObject rpJson = new JSONObject();
                                rpJson.put("paymentid", (String) advanceDetail[5]);
                                double receiptAmountDue = (double) advanceDetail[1];
                                KwlReturnObject invoiceResult = accountingHandlerDAOobj.getObject(Invoice.class.getName(), invid);
                                Invoice invObj = (Invoice) invoiceResult.getEntityList().get(0);
                                KwlReturnObject rpResult = accountingHandlerDAOobj.getObject(Receipt.class.getName(), rpJson.optString("paymentid"));
                                Receipt rpObj = (Receipt) rpResult.getEntityList().get(0);
                                rpJson.put("amount", receiptAmountDue <= invObj.getInvoiceamountdue() ? receiptAmountDue : invObj.getInvoiceamountdue());
                                rpJson.put("enteramount", receiptAmountDue <= invObj.getInvoiceamountdue() ? receiptAmountDue : invObj.getInvoiceamountdue());
                                rpJson.put("linkamount", receiptAmountDue <= invObj.getInvoiceamountdue() ? receiptAmountDue : invObj.getInvoiceamountdue());
                                if (invObj.getInvoiceamountdue() > 0) {
                                    JSONObject linkInvoicesJson = transactionService.jsonCreatelinkInvoicesToReceivePayment(paramJobj, rpJson, invObj, rpObj);
                                    linkInvoicesJson.put("isToCheckAmountDueOfInvoice", true);
                                    JSONObject resJson = accReceivePaymentModuleServiceObj.linkReceiptToDocumentsJSON(linkInvoicesJson);
                                    if (resJson.has(Constants.RES_success) && resJson.optBoolean(Constants.RES_success)) {
                                        receiptIsSuccess = resJson.optBoolean(Constants.RES_success);
                                        jobj.put("receiptIsSuccess",receiptIsSuccess);
                                    }
                                }
                            }
                        }
                    }
                }
            }
            channelName = jobj.optString(Constants.channelName, null);
            jobj.put(Constants.userSessionId, (request.getSession(true)).getAttribute(Constants.userSessionId));// adding user session id to idenntify unique user session
            return new ModelAndView("jsonView", "model", jobj.toString());
        } catch (Exception ex) {
            Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, ex);

        } finally {
            if (issuccess && !StringUtil.isNullOrEmpty(channelName)) {
                ServerEventManager.publish(channelName, jobj.toString(), (ServletContext) this.getServletContext());
            }
        }
        return new ModelAndView("jsonView", "model", jobj.toString());
    }
    /**
     * ERM-912
     * @desc To Fetch SalesReportMaster Data
     * @param request
     * @param response
     * @return ModelAndView Object
     */
    public ModelAndView getSalesReportMasterData(HttpServletRequest request, HttpServletResponse response){
        JSONObject jobj = new JSONObject();
        boolean isSuccess = false;
        JSONArray jarray = new JSONArray();
        JSONArray array = new JSONArray();
        String msg = "";
        String view = "jsonView";
        KwlReturnObject result = null;
        List listOfData = new ArrayList();
        int totalCount=0;
        try{
            JSONObject requestParams = StringUtil.convertRequestToJsonObject(request);
            requestParams.put(Constants.locale, RequestContextUtils.getLocale(request));
            requestParams.put(Constants.df,authHandler.getDateOnlyFormat());
            String exportFileName = request.getParameter("filename"); // for Export
            boolean isExport = false;
            if (!StringUtil.isNullOrEmpty(exportFileName)) {
                isExport = true;
            }
            requestParams.put("isExport",isExport);
            result = accInvoiceDAOobj.getSalesReportMasterData(requestParams);
            String fileType = request.getParameter("filetype");
            if (result != null && result.getEntityList() != null && result.getEntityList().size() > 0) {

                listOfData = result.getEntityList();
                totalCount = result.getRecordTotalCount();
            }
            if (StringUtil.equal(fileType, "print")) {
                String  GenerateDate = authHandler.getDateOnlyFormat().format(new Date());
                jobj.put("GenerateDate", GenerateDate);
                view = "jsonView-empty";
            }
            
            HashMap<String, Object> params = new HashMap<String, Object>();
            params.put(Constants.df,authHandler.getDateOnlyFormat());
            params.put(Constants.REQ_startdate, request.getParameter("startdate"));
            params.put(Constants.REQ_enddate, request.getParameter("enddate"));
            params.put("companyid", sessionHandlerImpl.getCompanyid(request));
            params.put("isFromSalesReport", true);
            array = AccProductService.getInventoryValuationData(params);
            jarray = accInvoiceModuleService.getSalesReportMasterDataJson(requestParams, listOfData, jarray, params);
            int start = 0;
            int limit = 30;

            if (request.getParameter(Constants.start) != null && request.getParameter(Constants.limit) != null && !isExport) {
                start = Integer.parseInt(request.getParameter(Constants.start));
                limit = Integer.parseInt(request.getParameter(Constants.limit));
            }
            
            JSONArray pagedjArr = new JSONArray();
            JSONArray detailJArr = jarray.getJSONArray(0);
            totalCount += jarray.getInt(1);
            List<String> transactionIds = new ArrayList<String>();
            if (detailJArr.length() >= start) {
                int end = Math.min(detailJArr.length(), start + limit);
                double totalAmountInBase = 0;
                double totalQty = 0;
                for (int i = start; i < end; i++) {
                    JSONObject tempJobj = detailJArr.getJSONObject(i);
                    if(!transactionIds.contains(tempJobj.optString("billid", ""))) {
                        totalAmountInBase += tempJobj.optDouble("invoiceamountinbase", 0.0);
                    }
                    transactionIds.add(tempJobj.optString("billid", ""));
                    totalQty += tempJobj.optDouble("invoicesalesqty", 0.0);
                    pagedjArr.put(detailJArr.getJSONObject(i));
                }
                if (!isExport) {
                    JSONObject obj1 = new JSONObject();
                    obj1.put("documenttype", "Total");
                    obj1.put("invoiceamountinbase", totalAmountInBase);
                    obj1.put("invoicesalesqty", totalQty);
                    pagedjArr.put(obj1);
                }
            } else {
                double totalAmountInBase = 0;
                double totalQty = 0;
                for (int i = 0; i < detailJArr.length(); i++) {
                    JSONObject tempJobj = detailJArr.getJSONObject(i);
                    if(!transactionIds.contains(tempJobj.optString("billid", ""))) {
                        totalAmountInBase += tempJobj.optDouble("invoiceamountinbase", 0.0);
                    }
                    transactionIds.add(tempJobj.optString("billid", ""));
                    totalQty += tempJobj.optDouble("invoicesalesqty", 0.0);
                    pagedjArr.put(detailJArr.getJSONObject(i));
                }
                if (!isExport) {
                    JSONObject obj1 = new JSONObject();
                    obj1.put("documenttype", "Total");
                    obj1.put("invoiceamountinbase", totalAmountInBase);
                    obj1.put("invoicesalesqty", totalQty);
                    pagedjArr.put(obj1);
                }
//                pagedjArr = detailJArr;
            }
            if (isExport) {
                jobj.put("data", detailJArr);
                exportDaoObj.processRequest(request, response, jobj);
            }
            JSONArray pagedJson = pagedjArr;
            jobj.put("data", pagedJson); 
           jobj.put("count", totalCount);
        } catch (Exception ex){
            Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                jobj.put(Constants.RES_success, isSuccess);
                jobj.put(Constants.RES_msg, msg);
            } catch (JSONException ex) {
                Logger.getLogger(accInvoiceControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return new ModelAndView(view, "model", jobj.toString());
    }
}
