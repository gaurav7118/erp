/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.krawler.spring.accounting.product;

import com.krawler.common.admin.*;
import com.krawler.common.service.ServiceException;
import com.krawler.common.session.SessionExpiredException;
import com.krawler.common.util.*;
import com.krawler.customFieldMaster.fieldDataManager;
import com.krawler.esp.handlers.SendMailHandler;
import com.krawler.hql.accounting.*;
import com.krawler.inventory.model.frequency.Frequency;
import com.krawler.inventory.model.location.Location;
import com.krawler.inventory.model.packaging.Packaging;
import com.krawler.inventory.model.stockmovement.*;
import com.krawler.inventory.model.store.Store;
import com.krawler.inventory.model.store.StoreService;
import com.krawler.inventory.model.store.StoreType;
import com.krawler.spring.accounting.account.accAccountDAO;
import com.krawler.spring.accounting.currency.accCurrencyDAO;
import com.krawler.spring.accounting.handler.AccountingHandlerDAO;
import com.krawler.spring.accounting.handler.AccountingManager;
import com.krawler.spring.accounting.inventory.AccImportService;
import com.krawler.spring.accounting.journalentry.accJournalEntryDAO;
import com.krawler.spring.accounting.masteritems.accMasterItemsDAO;
import com.krawler.spring.accounting.productmodule.service.AccProductModuleService;
import com.krawler.spring.accounting.uom.accUomDAO;
import com.krawler.spring.auditTrailModule.auditTrailDAO;
import com.krawler.spring.authHandler.authHandler;
import com.krawler.spring.authHandler.authHandlerDAO;
import com.krawler.spring.common.AccCommonTablesDAO;
import com.krawler.spring.common.KwlReturnObject;
import com.krawler.spring.common.kwlCommonTablesDAO;
import com.krawler.spring.importFunctionality.ImportDAO;
import com.krawler.spring.importFunctionality.ImportHandler;
import com.krawler.spring.sessionHandler.sessionHandlerImpl;
import com.krawler.spring.storageHandler.storageHandlerImpl;
import com.krawler.utils.json.base.JSONArray;
import com.krawler.utils.json.base.JSONException;
import com.krawler.utils.json.base.JSONObject;
import java.io.*;
import java.net.URLDecoder;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.*;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.servlet.http.HttpServletRequest;
import org.apache.commons.lang.mutable.MutableInt;
import org.apache.poi.ss.usermodel.*;
import org.joda.time.YearMonth;
import org.joda.time.format.DateTimeFormat;
import org.joda.time.format.DateTimeFormatter;
import org.springframework.context.MessageSource;
import org.springframework.context.MessageSourceAware;
import org.springframework.orm.hibernate3.HibernateTransactionManager;
import org.springframework.transaction.TransactionDefinition;
import org.springframework.transaction.TransactionStatus;
import org.springframework.transaction.annotation.Propagation;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.transaction.support.DefaultTransactionDefinition;

/**
 *
 * @author krawler
 */
public class Importproduct implements Runnable,MessageSourceAware {

    ArrayList processQueue = new ArrayList();
    private boolean isworking = false;

    public boolean isIsworking() {
        return isworking;
    }

    public void setIsworking(boolean isworking) {
        this.isworking = isworking;
    }
    private int importLimit = 1500;
    private HibernateTransactionManager txnManager;
    private accProductDAO accProductObj;
//    private String successView;
    private MessageSource messageSource;
    private fieldDataManager fieldDataManagercntrl;
    private accAccountDAO accAccountDAOobj;
    private AccountingHandlerDAO accountingHandlerDAOobj;
    public ImportHandler importHandler;
    private ImportDAO importDao;
    private accJournalEntryDAO accJournalEntryobj;
    private AccCommonTablesDAO accCommonTablesDAO;
    private accUomDAO accUomObj;
    private accMasterItemsDAO accMasterItemsDAOobj;
    private AccProductModuleService accProductModuleService;
    private accCurrencyDAO accCurrencyDAOobj;
    private authHandlerDAO authHandlerDAOObj;
    private AccImportService accImportServiceObj;
    private StoreService storeService;
    private StockMovementService stockMovementService;

    private kwlCommonTablesDAO kwlCommonTablesDAOObj;
    private auditTrailDAO auditTrailObj;

    public void setauditTrailDAO(auditTrailDAO auditTrailDAOObj){
        this.auditTrailObj = auditTrailDAOObj;
    }
    
    public void setkwlCommonTablesDAO(kwlCommonTablesDAO kwlCommonTablesDAOObj1) {
        this.kwlCommonTablesDAOObj = kwlCommonTablesDAOObj1;
    }

    public void setAuthHandlerDAOObj(authHandlerDAO authHandlerDAOObj) {
        this.authHandlerDAOObj = authHandlerDAOObj;
    }

    public void setAccJournalEntryDAO(accJournalEntryDAO accJournalEntryobj) {
        this.accJournalEntryobj = accJournalEntryobj;
    }

    public void setTxnManager(HibernateTransactionManager txManager) {
        this.txnManager = txManager;
    }

    public void setaccProductDAO(accProductDAO accProductObj) {
        this.accProductObj = accProductObj;
    }

    public void setFieldDataManager(fieldDataManager fieldDataManagercntrl) {
        this.fieldDataManagercntrl = fieldDataManagercntrl;
    }

    public void setaccAccountDAO(accAccountDAO accAccountDAOobj) {
        this.accAccountDAOobj = accAccountDAOobj;
    }

    public void setaccountingHandlerDAO(AccountingHandlerDAO AccountingHandlerDAOobj) {
        this.accountingHandlerDAOobj = AccountingHandlerDAOobj;
    }

    public void setimportHandler(ImportHandler importHandler) {
        this.importHandler = importHandler;
    }

    public void setimportDAO(ImportDAO importDao) {
        this.importDao = importDao;
    }

    public void setaccCommonTablesDAO(AccCommonTablesDAO accCommonTablesDAO) {
        this.accCommonTablesDAO = accCommonTablesDAO;
    }

    public void setaccUomDAO(accUomDAO accUomObj) {
        this.accUomObj = accUomObj;
    }

    public void setaccMasterItemsDAO(accMasterItemsDAO accMasterItemsDAOobj) {
        this.accMasterItemsDAOobj = accMasterItemsDAOobj;
    }

    public void setAccProductModuleService(AccProductModuleService accProductModuleService) {
        this.accProductModuleService = accProductModuleService;
    }

    public void setaccCurrencyDAO(accCurrencyDAO accCurrencyDAOobj) {
        this.accCurrencyDAOobj = accCurrencyDAOobj;
    }
    
    public void setAccImportServiceObj(AccImportService accImportServiceObj) {
        this.accImportServiceObj = accImportServiceObj;
    }
    
    public void setStoreService(StoreService storeService) {
        this.storeService = storeService;
    }
    
    public void setStockMovementService(StockMovementService stockMovementService) {
        this.stockMovementService = stockMovementService;
    }
    
    @Override
    public void setMessageSource(MessageSource ms) {
        this.messageSource = ms;
    }
    public void add(HashMap<String, Object> requestParams) {
        try {
            processQueue.add(requestParams);
        } catch (Exception ex) {
            Logger.getLogger(ImportHandler.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    public String addPendingImportLog(HashMap<String, Object> requestParams) {
        String logId = null;
        try {
            //Insert Integration log
            String fileName = (String) requestParams.get("filename");
            String Module = (String) requestParams.get("modName");
            try {
                List list = importDao.getModuleObject(Module);
                Modules module = (Modules) list.get(0); //Will throw null pointer if no module entry found
                Module = module.getId();
            } catch (Exception ex) {
                throw new DataInvalidateException("Column config not available for module " + Module);
            }
            HashMap<String, Object> logDataMap = new HashMap<String, Object>();
            logDataMap.put("FileName", ImportLog.getActualFileName(fileName));
            logDataMap.put("StorageName", fileName);
            logDataMap.put("Log", "Pending");
            logDataMap.put("Type", fileName.substring(fileName.lastIndexOf(".") + 1));
            logDataMap.put("Module", Module);
            logDataMap.put("ImportDate", new Date());
            logDataMap.put("User", (String) requestParams.get("userid"));
            logDataMap.put("Company", (String) requestParams.get("companyid"));
            ImportLog importlog = (ImportLog) importDao.saveImportLog(logDataMap);
            logId = importlog.getId();
        } catch (Exception ex) {
            logId = null;
        }
        return logId;
    }

    @Override
    public void run() {

        try {
            while (!processQueue.isEmpty() && !isworking) {
                this.isworking = true;
                HashMap<String, Object> requestParams1 = (HashMap<String, Object>) processQueue.get(0);
                try {

                    boolean allowropagatechildcompanies = requestParams1.containsKey("allowropagatechildcompanies") ? Boolean.parseBoolean(requestParams1.get("allowropagatechildcompanies").toString()) : false;
                    if (allowropagatechildcompanies) {
                        Object childcompanies = requestParams1.containsKey("childcompanylist") ? requestParams1.get("childcompanylist") : "";
                        List childcompanylist = (List) childcompanies;
                        int totalChildCompanies = childcompanylist.size();

                        int currentChildCompanycount = 0;
                        requestParams1.put("totalChildCompanies", totalChildCompanies);
                        for (Object childObj : childcompanylist) {
                            try {
                                currentChildCompanycount++;
                                Object[] childdataOBj = (Object[]) childObj;
                                String childCompanyID = (String) childdataOBj[0];
                                requestParams1.put("companyid", childCompanyID);
                                requestParams1.put("currentChildCompanycount", currentChildCompanycount);
                                JSONObject jobj = new JSONObject();
                                String modulename = requestParams1.get("modName").toString();
                                String importflag = requestParams1.get("importflag").toString();
                                if (importflag.equalsIgnoreCase(Constants.importproductxls)) {
                                    jobj = importproductsdata(requestParams1);
                                } else if (importflag.equalsIgnoreCase(Constants.importproductcsv)) {
                                    jobj = importProductcsv(requestParams1);
                                } else if (importflag.equalsIgnoreCase(Constants.importproductpricecsv)) {
                                    jobj = importProductPriceCSV(requestParams1);
                                }
                                sendMail(requestParams1, jobj);
                            } catch (Exception ex) {
                                Logger.getLogger(ImportHandler.class.getName()).log(Level.SEVERE, null, ex);
                            }

                        }
                    } else {

                        JSONObject jobj = new JSONObject();
                        String modulename = requestParams1.get("modName").toString();
                        String importflag = requestParams1.get("importflag").toString();
                        if (importflag.equalsIgnoreCase(Constants.importproductxls)) {
                            jobj = importproductsdata(requestParams1);
                        } else if (importflag.equalsIgnoreCase(Constants.importassemblyproduct)) {
                            jobj = importAssemblyProductCSV(requestParams1);  //import Assembly product for csv File
                        } else if (importflag.equalsIgnoreCase(Constants.sampleAssemblyProductWithoutBOM)) {
                            jobj = importAssemblyProductWithoutBOMCSV(requestParams1);  //import Assembly product for csv File
                        } else if (importflag.equalsIgnoreCase(Constants.importproductpricecsv)) {
                            jobj = importProductPriceCSV(requestParams1);
                        } else if (importflag.equalsIgnoreCase(Constants.importproductopeningqty)) {
                            jobj = importProductopeningqtyRecords(requestParams1); //import product opening quantity 
                        } else if (importflag.equalsIgnoreCase(Constants.importproductcsv)) {
                            jobj = importProductcsv(requestParams1);
                        } else if (importflag.equalsIgnoreCase(Constants.importproductcategorycsv)) {
                            jobj = importProductCategorycsv(requestParams1);
                        }
                        sendMail(requestParams1, jobj);
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                } finally {
                    processQueue.remove(requestParams1);
                    this.isworking = false;
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {

        }
    }
    
    public void sendMail(Map<String, Object> requestParams1, JSONObject jobj) throws ServiceException {
        try {
            String modulename = requestParams1.get("modName").toString();
            User user = (User) kwlCommonTablesDAOObj.getClassObject("com.krawler.common.admin.User", requestParams1.get("userid").toString());
            Company company = (Company) kwlCommonTablesDAOObj.getClassObject(Company.class.getName(), user.getCompany().getCompanyID());
            String htmltxt = "Report for data imported.<br/>";
            htmltxt += "<br/>Module Name: " + modulename + "<br/>";
            htmltxt += "<br/>File Name: " + jobj.get("filename") + "<br/>";
            htmltxt += "Total Records: " + jobj.get("totalrecords") + "<br/>";
            htmltxt += "Records Imported Successfully: " + jobj.get("successrecords");
            htmltxt += "<br/>Failed Records: " + jobj.get("failedrecords");
            htmltxt += "<br/>URL: " + requestParams1.get("baseUrl").toString()+"<br/>";
            htmltxt += "<br/><br/>Please check the import log in the system for more details.";
            htmltxt += "<br/>For queries, email us at support@deskera.com<br/>";
            htmltxt += "Deskera Team";

            String plainMsg = "Report for data imported.\n";
            plainMsg += "\nModule Name: " + modulename + "\n";
            plainMsg += "\nFile Name:" + jobj.get("filename") + "\n";
            plainMsg += "Total Records: " + jobj.get("totalrecords");
            plainMsg += "\nRecords Imported Successfully: " + jobj.get("successrecords");
            plainMsg += "\nFailed Records: " + jobj.get("failedrecords");
            plainMsg += "\nURL: " + requestParams1.get("baseUrl").toString();
            plainMsg += "\n\nPlease check the import log in the system for more details.";

            plainMsg += "\nFor queries, email us at support@deskera.com\n";
            plainMsg += "Deskera Team";
            String fromEmailId = (!company.isEmailFromCompanyCreator())?Constants.ADMIN_EMAILID:authHandlerDAOObj.getSysEmailIdByCompanyID(company.getCompanyID());
            Map<String, Object> smtpConfigMap = authHandler.getSMTPConfigMap(company);
            SendMailHandler.postMail(new String[]{user.getEmailID()}, "Deskera Accounting - Report for data imported", htmltxt, plainMsg, fromEmailId, smtpConfigMap);
        } catch (Exception ex) {
            Logger.getLogger(accProductController.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
            throw ServiceException.FAILURE("Importproduct.sendMail : " + ex.getMessage(), ex);
        }

    }
    public JSONObject importproductsdata(HashMap<String, Object> requestParams1) throws AccountingException {

        DefaultTransactionDefinition def = new DefaultTransactionDefinition();
        def.setName("import_Tx");
        def.setPropagationBehavior(TransactionDefinition.PROPAGATION_REQUIRED);
        TransactionStatus status = txnManager.getTransaction(def);
        boolean commitedEx = false;
        boolean issuccess = true;
        String msg = "";
        String fileName = null;
        int total = 0, failed = 0;
        String companyid = requestParams1.get("companyid").toString();
        int countryid = requestParams1.get("countryid")!=null ? Integer.parseInt((String)requestParams1.get("countryid")) : 0 ;
        String currencyId = requestParams1.get("currencyId").toString();
        String userId = requestParams1.get("userid").toString();
        String excelDF = importHandler.getDFPattern();
        DateFormat df = new SimpleDateFormat(excelDF);
        df.setLenient(false);
        JSONObject datajobj = new JSONObject();
        datajobj = (JSONObject) requestParams1.get("jobj");
        String masterPreference = requestParams1.get("masterPreference").toString();
        boolean updateExistingRecordFlag = false;
        if (!StringUtil.isNullOrEmpty(requestParams1.get("updateExistingRecordFlag").toString())) {
            updateExistingRecordFlag = Boolean.FALSE.parseBoolean(requestParams1.get("updateExistingRecordFlag").toString());
        }
        Locale locale=null;
        if(requestParams1.containsKey("locale") && requestParams1.get("locale") != null){
           locale=(Locale)requestParams1.get("locale"); 
        }
        int limit = Constants.Transaction_Commit_Limit;
        int count = 1;
        boolean isInventoryIntegrationOn = false;
        
//        String excel_Full_DF = "yyyy-MM-dd hh:mm:ss";
        JSONObject returnObj = new JSONObject();
        String failureMsg = "";

        String logId = null; 
        try {
            logId = addPendingImportLog(requestParams1);
            fileName = datajobj.getString("filename");
            KwlReturnObject CompanyPrefResult = accountingHandlerDAOobj.getObject(CompanyAccountPreferences.class.getName(), companyid);
            CompanyAccountPreferences companyAccountPreferences = (CompanyAccountPreferences) CompanyPrefResult.getEntityList().get(0);

            Date bookBookBeginningDate=companyAccountPreferences.getBookBeginningFrom();
            KwlReturnObject extraCompanyPrefResult = accountingHandlerDAOobj.getObject(ExtraCompanyPreferences.class.getName(), companyid);
            ExtraCompanyPreferences extraCompanyPreferences = (ExtraCompanyPreferences) extraCompanyPrefResult.getEntityList().get(0);
            
            extraCompanyPrefResult = accountingHandlerDAOobj.getObject(CompanyAccountPreferences.class.getName(), companyid);
            CompanyAccountPreferences preferences = (CompanyAccountPreferences) extraCompanyPrefResult.getEntityList().get(0);
            
            KwlReturnObject jeresult = accountingHandlerDAOobj.getObject(User.class.getName(), userId);
            User user = (User) jeresult.getEntityList().get(0);
            
            jeresult = accountingHandlerDAOobj.getObject(Company.class.getName(), companyid);
            Company company = (Company) jeresult.getEntityList().get(0);
            
            isInventoryIntegrationOn = extraCompanyPreferences.isActivateInventoryTab();
            boolean isAddUpdateInitialQuantity = false;
            isAddUpdateInitialQuantity = companyAccountPreferences.isIswarehousecompulsory() || companyAccountPreferences.isIslocationcompulsory() || companyAccountPreferences.isIsBatchCompulsory() || companyAccountPreferences.isIsSerialCompulsory() || companyAccountPreferences.isIsrackcompulsory() || companyAccountPreferences.isIsrowcompulsory() || companyAccountPreferences.isIsbincompulsory();
            boolean isCurrencyCode=extraCompanyPreferences.isCurrencyCode();
            boolean isVatApplicable=extraCompanyPreferences.isEnableVatCst();
            boolean isExciseApplicable=extraCompanyPreferences.isExciseApplicable();
            boolean indianCheck=(company.getCountry().getID()).equals(""+Constants.indian_country_id);
            
            int sheetNo = Integer.parseInt(requestParams1.get("sheetindex").toString());
            String customfield = "";
            System.out.println("filenameinrun" + datajobj.getString("FilePath"));
            
            FileInputStream fs = new FileInputStream(datajobj.getString("FilePath"));

            Workbook wb = WorkbookFactory.create(fs);// create workbook for all types of excel file like xls, xlsx etc
//            HSSFFormulaEvaluator evaluator = new HSSFFormulaEvaluator(wb);
            Sheet sheet = wb.getSheetAt(sheetNo);

            int cnt = 0;

//            StringBuilder failedRecords = new StringBuilder();

            Map<Integer, Frequency> frequencyMap = getCCFrequencyMap();
            HashMap<String, Integer> columnConfig = new HashMap<>();
            Map<String, JSONObject> configMap = new HashMap<>();
            JSONArray jSONArray = datajobj.getJSONArray("resjson");
            for (int i = 0; i < jSONArray.length(); i++) {
                JSONObject jSONObject = jSONArray.getJSONObject(i);
                columnConfig.put(jSONObject.getString("dataindex"), jSONObject.getInt("csvindex"));
                configMap.put(jSONObject.getString("dataindex"), jSONObject);
            }
            
            Map<String, Map<String, Object>> refColumnObjMap = new HashMap();

            HashMap currencyMap = getCurrencyMap(isCurrencyCode);
            List failureArr = new ArrayList();
            List failureColumnArr = new ArrayList();
            List recarr = new ArrayList();
            int maxCol = 0;
            Set usedProductIdSet = new HashSet();
            for (int i = 0; i <= sheet.getLastRowNum(); i++) {
                failureMsg = "";
                Map<Integer, Object> invalidColumn = new HashMap<>();
                Row row = sheet.getRow(i);
                if(row == null){
                    continue;
                }
                if (i == 0) {
                    maxCol = row.getLastCellNum();
                    recarr = new ArrayList();
                    for (int cellcount = 0; cellcount < maxCol; cellcount++) {
                        Cell cell = row.getCell(cellcount);

                        if (cell != null) {
                            if (cell.getCellType() == Cell.CELL_TYPE_STRING) {
                                cell.setCellValue(cell.getStringCellValue().replaceAll("\n", ""));
                            } else if (cell.getCellType() == Cell.CELL_TYPE_NUMERIC) {
                                String CellStringValue = Double.toString((Double) cell.getNumericCellValue()).replaceAll("\n", "");
                                cell.setCellValue(Double.parseDouble(CellStringValue)); //Parsed to Doouble as getnumericCellValue returns double by Default
                            }
                            recarr.add(cell);
                        } else {
                            recarr.add("");
                        }
                    }
//                    failedRecords.append(createCSVrecord(recarr.toArray()) + "\"Error Message\"");
                    ArrayList failureRecArr = new ArrayList();
                    failureRecArr.addAll(recarr);
                    failureRecArr.add("Error Message");
                    failureArr.add(failureRecArr);
                    failureColumnArr.add(invalidColumn);
                }
                if (cnt != 0) {
                    recarr = new ArrayList();
                    for (int cellcount = 0; cellcount < maxCol; cellcount++) {
                        Cell cell = row.getCell(cellcount);

                        if (cell != null) {
                            if (cell.getCellType() == Cell.CELL_TYPE_STRING) {
                                cell.setCellValue(cell.getStringCellValue().replaceAll("\n", ""));
                            } else if (cell.getCellType() == Cell.CELL_TYPE_NUMERIC) {
                                String CellStringValue = Double.toString((Double) cell.getNumericCellValue()).replaceAll("\n", "");
                                cell.setCellValue(Double.parseDouble(CellStringValue)); //Parsed to Doouble as getnumericCellValue returns double by Default
                            }
                            recarr.add(cell);
                        } else {
                            recarr.add("");
                        }
                    }

                    try {
                        //currencyId = sessionHandlerImpl.getCurrencyID(request);

                        boolean newProductAddinUpdateCase = false;
                        
                        String productID = "";
                        if (columnConfig.containsKey("pid")) {
                            Cell cell = row.getCell((Integer) columnConfig.get("pid"));

                            if (cell == null || cell.getCellType() == Cell.CELL_TYPE_BLANK) {
                                invalidColumn.put((Integer) columnConfig.get("pid"), "Invalid");
                                failureMsg += "Product ID is not available.";
                            } else {
                               productID = importHandler.getCellValue(cell);
                                if(!usedProductIdSet.add(productID)){
                                    invalidColumn.put((Integer) columnConfig.get("pid"), "Invalid");
                                    throw new AccountingException("Duplicate Product ID '" + productID + "' in file");
                                }
                                JSONObject configObj = configMap.get("pid");
                                int maxLength = configObj.optInt("maxLength", 0);
                                String validationType = configObj.optString("validatetype");
                                if ("string".equalsIgnoreCase(validationType) && !StringUtil.isNullOrEmpty(productID) && productID.length() > maxLength) {
                                    if (masterPreference.equals(0)) {
                                        invalidColumn.put((Integer) columnConfig.get("pid"), "Invalid");
                                        failureMsg += "Data length greater than " + maxLength + " for column Product ID.";
                                    } else {// for other two cases need to trim data upto max length
                                        productID = productID.substring(0, maxLength);
                                    }
                                }
                            }
                        } else {
                            failureMsg += "Product ID column is not found.";
                        }


                        // For Checking 'ProductID' is exist or not
                        KwlReturnObject result = accProductObj.getProductIDCount(productID, companyid,false);
                        Product productOldObj = null;
                        int nocount = result.getRecordTotalCount();
                        if (nocount > 0 && !updateExistingRecordFlag) {
                            invalidColumn.put((Integer) columnConfig.get("pid"), "Invalid");
                            throw new AccountingException("Product ID '" + productID + "' already exists.");
                        } else if (nocount == 0 && updateExistingRecordFlag) {
                            /*
                             Changes done in ERP-34672. In ERP-34672 we have make Product ID as mandatory and remaining field as optional in Update Existing Case.
                            */
                            invalidColumn.put((Integer) columnConfig.get("pid"), "Invalid");
                            throw new AccountingException("Product ID '" + productID + "' not exists.");
//                            newProductAddinUpdateCase = true;
                        }

                        String productTypeID = "";
                        if (columnConfig.containsKey("type")) {
                            Cell cell = row.getCell((Integer) columnConfig.get("type"));

                            if (cell == null || cell.getCellType() == Cell.CELL_TYPE_BLANK) {
                                invalidColumn.put((Integer) columnConfig.get("type"), "Invalid");
                                failureMsg += "Product Type is not available.";
                            } else {
                                String productTypeName = importHandler.getCellValue(cell);//cell.getStringCellValue().trim();

                                // Ref Optimization related code. 
                                Map refData = null;
                                if (refColumnObjMap.containsKey("ptoducttype")) {
                                    refData = refColumnObjMap.get("ptoducttype");
                                } else {
                                    refData = new HashMap();
                                    refColumnObjMap.put("ptoducttype", refData);
                                }
                                Producttype producttype = null;
                                if (refData.containsKey(productTypeName)) {
                                    producttype = refData.get(productTypeName) != null ? (Producttype) refData.get(productTypeName) : null;
                                } else {
                                    producttype = getProductTypeByName(productTypeName);
                                    refData.put(productTypeName, producttype);
                                }
                                // Ref Optimization related code. 

                                if (producttype != null) {
                                    productTypeID = producttype.getID();
                                    if (productTypeID.equalsIgnoreCase(Producttype.ASSEMBLY)) {
                                        invalidColumn.put((Integer) columnConfig.get("type"), "Invalid");
                                        throw new AccountingException("Assembly products need to be imported separately through 'Import Assembly Product'.");
                                    }
                                } else {
                                    invalidColumn.put((Integer) columnConfig.get("type"), "Invalid");
                                    failureMsg += "Product Type is not found for " + productTypeName + ".";
                                }
                            }
                        } else if(!updateExistingRecordFlag) {
                            failureMsg += "Product Type column is not found.";
                        }

                        String productName = "";
                        if (columnConfig.containsKey("productname")) {
                            Cell cell = row.getCell((Integer) columnConfig.get("productname"));
                            if (cell == null || cell.getCellType() == Cell.CELL_TYPE_BLANK) {
                                invalidColumn.put((Integer) columnConfig.get("productname"), "Invalid");
                                failureMsg += "Product Name is not available";
                            } else {
                                productName = importHandler.getCellValue(cell);

                                JSONObject configObj = configMap.get("productname");
                                int maxLength = configObj.optInt("maxLength", 0);
                                String validationType = configObj.optString("validatetype");
                                if("string".equalsIgnoreCase(validationType) && !StringUtil.isNullOrEmpty(productName) && productName.length() > maxLength){
                                    if (masterPreference.equals(0)) {
                                        invalidColumn.put((Integer) columnConfig.get("productname"), "Invalid");
                                        failureMsg += "Data length greater than " + maxLength + " for column Product Name.";
                                    } else {// for other two cases need to trim data upto max length
                                        productID = productID.substring(0, maxLength);
                                    }
                                }
                                if(!StringUtil.isNullOrEmpty(productName) && productName.contains(",")){
                                    failureMsg += "Please enter valid Product Name.";
                                }
                            }
                        } else if(!updateExistingRecordFlag) {
                            failureMsg += "Product Name column is not found.";
                        }

                        String productDescription = "";
                        if (columnConfig.containsKey("desc")) {
                            Cell cell = row.getCell((Integer) columnConfig.get("desc"));
                            if (cell != null) {
                                productDescription = importHandler.getCellValue(cell);
                            }
                        }

                        /*
                        * Check for Stock UOM, Casing UOM, Inner UOM.
                        * Casing Uom, Inner Uom and Stock Uom must be different.
                        */ 
                        String stockUOM = "", casingUOM = "", innerUOM = "";
                        if(columnConfig.containsKey("uomname") && columnConfig.get("uomname")!=null){
                            Cell cell = row.getCell((Integer) columnConfig.get("uomname"));
                            if (cell != null && cell.getCellType() != Cell.CELL_TYPE_BLANK) {
                                stockUOM = importHandler.getCellValue(cell);
                            }
                        }
                        if(columnConfig.containsKey("casinguom") && columnConfig.get("casinguom")!=null){
                            Cell cell = row.getCell((Integer) columnConfig.get("casinguom"));
                            if (cell != null && cell.getCellType() != Cell.CELL_TYPE_BLANK) {
                                casingUOM = importHandler.getCellValue(cell);
                            }
                        }
                        if(columnConfig.containsKey("inneruom") && columnConfig.get("inneruom")!=null){
                            Cell cell = row.getCell((Integer) columnConfig.get("inneruom"));
                            if (cell != null && cell.getCellType() != Cell.CELL_TYPE_BLANK) {
                                innerUOM = importHandler.getCellValue(cell);
                            }
                        }
                        if((!StringUtil.isNullOrEmptyWithTrim(casingUOM) && casingUOM.equalsIgnoreCase(innerUOM)) || 
                        (!StringUtil.isNullOrEmptyWithTrim(casingUOM) && casingUOM.equalsIgnoreCase(stockUOM)) ||
                        (!StringUtil.isNullOrEmptyWithTrim(innerUOM) && innerUOM.equalsIgnoreCase(stockUOM))){
                            invalidColumn.put((Integer) columnConfig.get("uomname"), "Invalid");
                            invalidColumn.put((Integer) columnConfig.get("casinguom"), "Invalid");
                            invalidColumn.put((Integer) columnConfig.get("inneruom"), "Invalid");
                            failureMsg += "Casing Uom, Inner Uom and Stock Uom cannot be same.";
                        }

                        String productUOMID = "";
                        UnitOfMeasure uom = null;
                        if (columnConfig.containsKey("uomname")) {
                            Cell cell = row.getCell((Integer) columnConfig.get("uomname"));

                            if (cell != null && cell.getCellType() != Cell.CELL_TYPE_BLANK) {
                                String productUOMName = importHandler.getCellValue(cell);//cell.getStringCellValue().trim();
                                if (!StringUtil.isNullOrEmpty(productUOMName)) {
                                    
                                    // Ref Optimization related code. 
                                    Map refData = null;
                                    if(refColumnObjMap.containsKey("uom")){
                                        refData = refColumnObjMap.get("uom");
                                    }else{
                                        refData = new HashMap();
                                        refColumnObjMap.put("uom", refData);
                                    }
                                    
                                    // Adding
                                    if(refData.containsKey(productUOMName)){
                                        uom = refData.get(productUOMName) != null ? (UnitOfMeasure) refData.get(productUOMName): null;
                                    }else{
                                        uom = getUOMByName(productUOMName, companyid);
                                        refData.put(productUOMName, uom);
                                    }
                                    // Ref Optimization related code. 
                                    
                                    if (uom != null) {
                                        if(productUOMName.equals("N/A") && !productTypeID.equals(Producttype.SERVICE)){
                                            invalidColumn.put((Integer) columnConfig.get("uomname"), "Invalid");
                                            failureMsg += "You can only select N/A UOM for Service type Product.";
                                        }else{
                                            productUOMID = uom.getID();
                                        }
                                    } else {
                                        if (masterPreference.equalsIgnoreCase("2")) {
                                            HashMap<String, Object> uomMap = new HashMap<String, Object>();
                                            uomMap.put("uomname", StringUtil.DecodeText(productUOMName));
                                            uomMap.put("uomtype",StringUtil.DecodeText(productUOMName));
                                            uomMap.put("precision", 0);
                                            uomMap.put("companyid", companyid);

                                            KwlReturnObject uomresult = accUomObj.addUoM(uomMap);
                                            uom = (UnitOfMeasure) uomresult.getEntityList().get(0);
                                            productUOMID = uom.getID();
                                            
                                            refData.put(productUOMName, uom);// Ref Optimization related code. 
                                        } else {
//                                            if (masterPreference.equalsIgnoreCase("1")) {
//                                                productUOMID = "";
//                                            } else {
//                                                if (productTypeID.equals(Producttype.SERVICE)) {
////                                                    productUOMID = "";
//                                                    uom = getUOMByName("N/A", companyid);
//                                                    if (uom != null) {
//                                                        productUOMID = uom.getID();
//                                                    }
//                                                } else {
                                                    invalidColumn.put((Integer) columnConfig.get("uomname"), "Invalid");
                                                    failureMsg += "Stock UOM is not found for " + productUOMName + ".";
//                                                }
//                                            }
                                        }
                                    }
                                } else {
//                                    if (masterPreference.equalsIgnoreCase("1")) {
//                                        productUOMID = "";
//                                    } else {
                                        if (productTypeID.equals(Producttype.SERVICE)) {
//                                            productUOMID = "";
                                            uom = getUOMByName("N/A", companyid);
                                            if (uom != null) {
                                                productUOMID = uom.getID();
                                            }
                                        } else {
                                            invalidColumn.put((Integer) columnConfig.get("uomname"), "Invalid");
                                            failureMsg += "Data should not be empty for column Stock UOM.";
                                        }
//                                    }
                                }
                            } else if(!updateExistingRecordFlag) {
//                                if (masterPreference.equalsIgnoreCase("1")) {
//                                    productUOMID = "";
//                                } else {
                                    if (productTypeID.equals(Producttype.SERVICE)) {
//                                        productUOMID = "";
                                        uom = getUOMByName("N/A", companyid);
                                        if (uom != null) {
                                            productUOMID = uom.getID();
                                        }
                                    } else {
                                        invalidColumn.put((Integer) columnConfig.get("uomname"), "Invalid");
                                        failureMsg += "Data should not be empty for column Stock UOM.";
                                    }
//                                }
                            }
                        } else if(!updateExistingRecordFlag) {
//                            if (masterPreference.equalsIgnoreCase("1")) {
//                                productUOMID = "";
//                            } else {
                                if (productTypeID.equals(Producttype.SERVICE)) {
//                                    productUOMID = "";
                                    uom = getUOMByName("N/A", companyid);
                                    if (uom != null) {
                                        productUOMID = uom.getID();
                                    }
                                } else {
                                    failureMsg += "Product Stock UOM column is not found.";
                                }
//                            }
                        }

                        String casingUoMID = "";
                        UnitOfMeasure casinguom = null;
                        if (columnConfig.containsKey("casinguom")) {
                            Cell cell = row.getCell((Integer) columnConfig.get("casinguom"));
                            if (cell != null && cell.getCellType() != Cell.CELL_TYPE_BLANK) {
                                String productUOMName = importHandler.getCellValue(cell);//cell.getStringCellValue().trim();
                                if (!StringUtil.isNullOrEmpty(productUOMName)) {
                                    
                                    // Ref Optimization related code. 
                                    Map refData = null;
                                    if(refColumnObjMap.containsKey("uom")){
                                        refData = refColumnObjMap.get("uom");
                                    }else{
                                        refData = new HashMap();
                                        refColumnObjMap.put("uom", refData);
                                    }
                                    
                                    // Adding
                                    if(refData.containsKey(productUOMName)){
                                        casinguom = refData.get(productUOMName) != null ? (UnitOfMeasure) refData.get(productUOMName): null;
                                    }else{
                                        casinguom = accProductModuleService.getUOMByName(productUOMName, companyid);
                                        refData.put(productUOMName, casinguom);
                                    }
                                    // Ref Optimization related code. 
                                    
                                    if (casinguom != null) {
                                        casingUoMID = casinguom.getID();
                                    } else {
                                        if (masterPreference.equalsIgnoreCase("2")) {
                                            HashMap<String, Object> uomMap = new HashMap<String, Object>();
                                            uomMap.put("uomname", StringUtil.DecodeText(productUOMName));
                                            uomMap.put("uomtype",StringUtil.DecodeText(productUOMName));
                                            uomMap.put("precision", 0);
                                            uomMap.put("companyid", companyid);
                                            KwlReturnObject uomresult = accUomObj.addUoM(uomMap);
                                            casinguom = (UnitOfMeasure) uomresult.getEntityList().get(0);
                                            casingUoMID = casinguom.getID();
                                            refData.put(productUOMName, casinguom);// Ref Optimization related code. 
                                        } else {
                                            if (masterPreference.equalsIgnoreCase("1")) {
                                                casingUoMID = "";
                                            } else {
                                                invalidColumn.put((Integer) columnConfig.get("casinguom"), "Invalid");
                                                failureMsg += "Product Casing Unit Of Measure is not found for " + productUOMName + ".";
                                            }
                                        }
                                    }
                                }
                            }
                        } else if(!updateExistingRecordFlag) {
                            casingUoMID = "";
                        }

                        String innerUoMID = "";
                        UnitOfMeasure inneruom = null;
                        if (columnConfig.containsKey("inneruom")) {
                            Cell cell = row.getCell((Integer) columnConfig.get("inneruom"));
                            if (cell != null && cell.getCellType() != Cell.CELL_TYPE_BLANK) {
                                String productUOMName = importHandler.getCellValue(cell);//cell.getStringCellValue().trim();
                                if (!StringUtil.isNullOrEmpty(productUOMName)) {
                                    
                                    // Ref Optimization related code. 
                                    Map refData = null;
                                    if(refColumnObjMap.containsKey("uom")){
                                        refData = refColumnObjMap.get("uom");
                                    }else{
                                        refData = new HashMap();
                                        refColumnObjMap.put("uom", refData);
                                    }
                                    
                                    if(refData.containsKey(productUOMName)){
                                        inneruom = refData.get(productUOMName) != null ? (UnitOfMeasure) refData.get(productUOMName): null;
                                    }else{
                                        inneruom = getUOMByName(productUOMName, companyid);
                                        refData.put(productUOMName, inneruom);
                                    }
                                    // Ref Optimization related code. 
                                    
                                    if (inneruom != null) {
                                        innerUoMID = inneruom.getID();
                                    } else {
                                        if (masterPreference.equalsIgnoreCase("2")) {
                                            HashMap<String, Object> uomMap = new HashMap<String, Object>();
                                            uomMap.put("uomname",StringUtil.DecodeText(productUOMName));
                                            uomMap.put("uomtype", StringUtil.DecodeText(productUOMName));
                                            uomMap.put("precision", 0);
                                            uomMap.put("companyid", companyid);

                                            KwlReturnObject uomresult = accUomObj.addUoM(uomMap);
                                            inneruom = (UnitOfMeasure) uomresult.getEntityList().get(0);
                                            innerUoMID = inneruom.getID();
                                            refData.put(productUOMName, inneruom);// Ref Optimization related code. 
                                        } else {
                                            if (masterPreference.equalsIgnoreCase("1")) {
                                                innerUoMID = "";
                                            } else {
                                                invalidColumn.put((Integer) columnConfig.get("inneruom"), "Invalid");
                                                failureMsg += "Product Inner Unit Of Measure is not found for " + productUOMName + ".";
                                            }
                                        }
                                    }
                                }
                            }
                        } else if(!updateExistingRecordFlag) {
                            innerUoMID = "";
                        }

                        String PurchaseUOMID = "";
                        UnitOfMeasure purchaseruom = null;
                        if (columnConfig.containsKey("purchaseuom")) {
                            Cell cell = row.getCell((Integer) columnConfig.get("purchaseuom"));
                            if (cell != null && cell.getCellType() != Cell.CELL_TYPE_BLANK) {
                                String productUOMName = importHandler.getCellValue(cell);//cell.getStringCellValue().trim();
                                if (!StringUtil.isNullOrEmpty(productUOMName)) {
                                    
                                    // Ref Optimization related code. 
                                    Map refData = null;
                                    if(refColumnObjMap.containsKey("uom")){
                                        refData = refColumnObjMap.get("uom");
                                    }else{
                                        refData = new HashMap();
                                        refColumnObjMap.put("uom", refData);
                                    }
                                    
                                    if(refData.containsKey(productUOMName)){
                                        purchaseruom = refData.get(productUOMName) != null ? (UnitOfMeasure) refData.get(productUOMName): null;
                                    }else{
                                        purchaseruom = getUOMByName(productUOMName, companyid);
                                        refData.put(productUOMName, purchaseruom);
                                    }
                                    // Ref Optimization related code. 
                                    
                                    if (purchaseruom != null) {
                                        PurchaseUOMID = purchaseruom.getID();
                                    } else {
                                        if (masterPreference.equalsIgnoreCase("2")) {
                                            HashMap<String, Object> uomMap = new HashMap<String, Object>();
                                            uomMap.put("uomname", StringUtil.DecodeText(productUOMName));
                                            uomMap.put("uomtype",StringUtil.DecodeText(productUOMName));
                                            uomMap.put("precision", 0);
                                            uomMap.put("companyid", companyid);

                                            KwlReturnObject uomresult = accUomObj.addUoM(uomMap);
                                            purchaseruom = (UnitOfMeasure) uomresult.getEntityList().get(0);
                                            PurchaseUOMID = purchaseruom.getID();
                                            refData.put(productUOMName, purchaseruom);// Ref Optimization related code. 
                                        } else {
                                            if (masterPreference.equalsIgnoreCase("1")) {
                                                PurchaseUOMID = "";
                                            } else {
                                                invalidColumn.put((Integer) columnConfig.get("purchaseuom"), "Invalid");
                                                failureMsg += "Product Purchase Unit Of Measure is not found for " + productUOMName + ".";
                                            }
                                        }
                                    }
                                }
                            }
                        } else if(!updateExistingRecordFlag) {
                            PurchaseUOMID = "";
                        }

                        String SalesUOMID = "";
                        UnitOfMeasure salesuom = null;
                        if (columnConfig.containsKey("salesuom")) {
                            Cell cell = row.getCell((Integer) columnConfig.get("salesuom"));
                            if (cell != null && cell.getCellType() != Cell.CELL_TYPE_BLANK) {
                                String productUOMName = importHandler.getCellValue(cell);//cell.getStringCellValue().trim();
                                if (!StringUtil.isNullOrEmpty(productUOMName)) {
                                    
                                    // Ref Optimization related code. 
                                    Map refData = null;
                                    if(refColumnObjMap.containsKey("uom")){
                                        refData = refColumnObjMap.get("uom");
                                    }else{
                                        refData = new HashMap();
                                        refColumnObjMap.put("uom", refData);
                                    }
                                    
                                    if(refData.containsKey(productUOMName)){
                                        salesuom = refData.get(productUOMName) != null ? (UnitOfMeasure) refData.get(productUOMName): null;
                                    }else{
                                        salesuom = accProductModuleService.getUOMByName(productUOMName, companyid);
                                        refData.put(productUOMName, salesuom);
                                    }
                                    // Ref Optimization related code. 
                                    
                                    if (salesuom != null) {
                                        SalesUOMID = salesuom.getID();
                                    } else {
                                        if (masterPreference.equalsIgnoreCase("2")) {
                                            HashMap<String, Object> uomMap = new HashMap<String, Object>();
                                            uomMap.put("uomname",StringUtil.DecodeText(productUOMName));
                                            uomMap.put("uomtype", StringUtil.DecodeText(productUOMName));
                                            uomMap.put("precision", 0);
                                            uomMap.put("companyid", companyid);

                                            KwlReturnObject uomresult = accUomObj.addUoM(uomMap);
                                            salesuom = (UnitOfMeasure) uomresult.getEntityList().get(0);
                                            SalesUOMID = salesuom.getID();
                                            refData.put(productUOMName, salesuom);// Ref Optimization related code. 
                                        } else {
                                            if (masterPreference.equalsIgnoreCase("1")) {
                                                SalesUOMID = "";
                                            } else {
                                                invalidColumn.put((Integer) columnConfig.get("salesuom"), "Invalid");
                                                failureMsg += "Product Sales Unit Of Measure is not found for " + productUOMName + ".";
                                            }
                                        }
                                    }
                                }
                            }
                        } else if(!updateExistingRecordFlag) {
                            SalesUOMID = "";
                        }

                        String casinguomvalue = "1";
                        if (columnConfig.containsKey("casinguom_value")) {
                            Cell cell = row.getCell((Integer) columnConfig.get("casinguom_value"));
                            if (cell != null) {
                                casinguomvalue = importHandler.getCellValue(cell);
                                if (!StringUtil.isNullOrEmpty(casinguomvalue)) {
                                    try {
                                        Object vDataValue = Double.parseDouble(casinguomvalue);
                                    } catch (Exception ex) {
                                        if (masterPreference.equals("1")) {
                                            casinguomvalue = "1";
                                        } else {
                                            invalidColumn.put((Integer) columnConfig.get("casinguom_value"), "Invalid");
                                            failureMsg += "Incorrect numeric value for Casing UOM Value, Please ensure that value type of Casing UOM Value matches with the Casing UOM Value.";
                                        }
                                    }
                                }
                            }
                        }

                        String inneruomvalue = "1";
                        if (columnConfig.containsKey("inneruom_value")) {
                            Cell cell = row.getCell((Integer) columnConfig.get("inneruom_value"));
                            if (cell != null) {
                                inneruomvalue = importHandler.getCellValue(cell);
                                if (!StringUtil.isNullOrEmpty(inneruomvalue)) {
                                    try {
                                        Object vDataValue = Double.parseDouble(inneruomvalue);
                                    } catch (Exception ex) {
                                        if (masterPreference.equals("1")) {
                                            inneruomvalue = "1";
                                        } else {
                                            invalidColumn.put((Integer) columnConfig.get("inneruom_value"), "Invalid");
                                            failureMsg += "Incorrect numeric value for Inner UOM Value, Please ensure that value type of Inner UOM Value matches with the Inner UOM Value.";
                                        }
                                    }
                                }
                            }
                        }

                        String stcokuomvalue = "1";
                        if (columnConfig.containsKey("stockuom_value")) {
                            Cell cell = row.getCell((Integer) columnConfig.get("stockuom_value"));
                            if (cell != null) {
                                stcokuomvalue = importHandler.getCellValue(cell);
                                if (!StringUtil.isNullOrEmpty(stcokuomvalue)) {
                                    try {
                                        Object vDataValue = Double.parseDouble(stcokuomvalue);
                                    } catch (Exception ex) {
                                        if (masterPreference.equals("1")) {
                                            stcokuomvalue = "1";
                                        } else {
                                            invalidColumn.put((Integer) columnConfig.get("stockuom_value"), "Invalid");
                                            failureMsg += "Incorrect numeric value for Stock UOM Value, Please ensure that value type of Stock UOM Value matches with the Stock UOM Value.";
                                        }
                                    }
                                }
                            }
                        }

                        String costOfGoodsSoldAccountID = "";
                        if (columnConfig.containsKey("cogsaccountid")) {
                            if (!productTypeID.equals(Producttype.SERVICE)) {// If product is non service type then these values needed to validate and save 
                                if (extraCompanyPreferences.isActivateMRPModule() || companyAccountPreferences.getInventoryValuationType() == 1) {// This field need only when mrp activated or inventory valuation is perpetual. In this case oit is mandatory
                                    Cell cell = row.getCell((Integer) columnConfig.get("cogsaccountid"));

                                    if (cell != null && cell.getCellType() != Cell.CELL_TYPE_BLANK) {
                                        String cogsAccountName = importHandler.getCellValue(cell);//cell.getStringCellValue().trim();

                                        // Ref Optimization related code. 
                                        Map refData = null;
                                        if (refColumnObjMap.containsKey("account")) {
                                            refData = refColumnObjMap.get("account");
                                        } else {
                                            refData = new HashMap();
                                            refColumnObjMap.put("account", refData);
                                        }
                                        Account cogsAccount = null;
                                        if (refData.containsKey(cogsAccountName)) {
                                            cogsAccount = refData.get(cogsAccountName) != null ? (Account) refData.get(cogsAccountName) : null;
                                        } else {
                                            KwlReturnObject retObj = accAccountDAOobj.getAccountFromName(companyid,cogsAccountName);
                                            if (retObj != null && !retObj.getEntityList().isEmpty()) {
                                                cogsAccount = (Account) retObj.getEntityList().get(0);
                                            }
                                            refData.put(cogsAccountName, cogsAccount);
                                        }
                                        // Ref Optimization related code. 

                                        if (cogsAccount != null) {
                                            costOfGoodsSoldAccountID = cogsAccount.getID();
                                        } else {
                                            invalidColumn.put((Integer) columnConfig.get("cogsaccountid"), "Invalid");
                                            failureMsg += "Cost of Goods Sold Account is not found for " + cogsAccountName + ".";
                                        }
                                    } else {
                                        invalidColumn.put((Integer) columnConfig.get("cogsaccountid"), "Invalid");
                                        failureMsg += "Data not found for Cost of Goods Sold Account.";
                                    }
                                }
                            }
                        } else if (!productTypeID.equals(Producttype.SERVICE) && (extraCompanyPreferences.isActivateMRPModule() || companyAccountPreferences.getInventoryValuationType() == 1) && !updateExistingRecordFlag) {
                            failureMsg += "Cost of Goods Sold Account column is not found.";
                        }

                        String inventoryAccountID = "";
                        if (columnConfig.containsKey("inventoryaccountid")) {
                            if (!productTypeID.equals(Producttype.SERVICE)) {// If product is non service type then these values needed to validate and save 
                                if (extraCompanyPreferences.isActivateMRPModule() || companyAccountPreferences.getInventoryValuationType() == 1) {// This field need only when mrp activated or inventory valuation is perpetual. In this case oit is mandatory
                                    Cell cell = row.getCell((Integer) columnConfig.get("inventoryaccountid"));

                                    if (cell != null && cell.getCellType() != Cell.CELL_TYPE_BLANK) {
                                        String invAccountName = importHandler.getCellValue(cell);//cell.getStringCellValue().trim();

                                        // Ref Optimization related code. 
                                        Map refData = null;
                                        if (refColumnObjMap.containsKey("account")) {
                                            refData = refColumnObjMap.get("account");
                                        } else {
                                            refData = new HashMap();
                                            refColumnObjMap.put("account", refData);
                                        }
                                        Account invAccount = null;
                                        if (refData.containsKey(invAccountName)) {
                                            invAccount = refData.get(invAccountName) != null ? (Account) refData.get(invAccountName) : null;
                                        } else {
                                            KwlReturnObject retObj = accAccountDAOobj.getAccountFromName(companyid,invAccountName);
                                            if (retObj != null && !retObj.getEntityList().isEmpty()) {
                                                invAccount = (Account) retObj.getEntityList().get(0);
                                            }
                                            refData.put(invAccountName, invAccount);
                                        }
                                        // Ref Optimization related code. 

                                        if (invAccount != null) {
                                            inventoryAccountID = invAccount.getID();
                                        } else {
                                            invalidColumn.put((Integer) columnConfig.get("inventoryaccountid"), "Invalid");
                                            failureMsg += "Inventory Account is not found for " + invAccountName + ".";
                                        }
                                    } else {
                                        invalidColumn.put((Integer) columnConfig.get("inventoryaccountid"), "Invalid");
                                        failureMsg += "Data not found for Inventory Account.";
                                    }
                                }
                            }
                        } else if (!productTypeID.equals(Producttype.SERVICE) && (extraCompanyPreferences.isActivateMRPModule() || companyAccountPreferences.getInventoryValuationType() == 1) && !updateExistingRecordFlag) {
                            failureMsg += "Inventory Account column is not found.";
                        }

                        String stockAdjustmentAccountID = "";
                        if (columnConfig.containsKey("stockadjustmentaccountid")) {
                            if (!productTypeID.equals(Producttype.SERVICE)) {// If product is non service type then these values needed to validate and save 
                                if (extraCompanyPreferences.isActivateMRPModule() || companyAccountPreferences.getInventoryValuationType() == 1) {// This field need only when mrp activated or inventory valuation is perpetual. In this case oit is mandatory
                                    Cell cell = row.getCell((Integer) columnConfig.get("stockadjustmentaccountid"));

                                    if (cell != null && cell.getCellType() != Cell.CELL_TYPE_BLANK) {
                                        String stockAdjAccountName = importHandler.getCellValue(cell);//cell.getStringCellValue().trim();

                                        // Ref Optimization related code. 
                                        Map refData = null;
                                        if (refColumnObjMap.containsKey("account")) {
                                            refData = refColumnObjMap.get("account");
                                        } else {
                                            refData = new HashMap();
                                            refColumnObjMap.put("account", refData);
                                        }
                                        Account stockAdjAccount = null;
                                        if (refData.containsKey(stockAdjAccountName)) {
                                            stockAdjAccount = refData.get(stockAdjAccountName) != null ? (Account) refData.get(stockAdjAccountName) : null;
                                        } else {
                                            KwlReturnObject retObj = accAccountDAOobj.getAccountFromName(companyid,stockAdjAccountName);
                                            if (retObj != null && !retObj.getEntityList().isEmpty()) {
                                                stockAdjAccount = (Account) retObj.getEntityList().get(0);
                                            }
                                            refData.put(stockAdjAccountName, stockAdjAccount);
                                        }
                                        // Ref Optimization related code. 

                                        if (stockAdjAccount != null) {
                                            stockAdjustmentAccountID = stockAdjAccount.getID();
                                        } else {
                                            invalidColumn.put((Integer) columnConfig.get("stockadjustmentaccountid"), "Invalid");
                                            failureMsg += "Stock Adjustment Account is not found for " + stockAdjAccountName + ".";
                                        }
                                    } else {
                                        invalidColumn.put((Integer) columnConfig.get("stockadjustmentaccountid"), "Invalid");
                                        failureMsg += "Data not found for Stock Adjustment Account.";
                                    }
                                }
                            }
                        } else if (!productTypeID.equals(Producttype.SERVICE) && (extraCompanyPreferences.isActivateMRPModule() || companyAccountPreferences.getInventoryValuationType() == 1) && !updateExistingRecordFlag) {
                            failureMsg += "Stock Adjustment Account column is not found.";
                        }
                        
                        String productBrandID = "";
                        if (columnConfig.containsKey("productBrandName")) {
                            Cell cell = row.getCell((Integer) columnConfig.get("productBrandName"));
                            if (cell != null && cell.getCellType() != Cell.CELL_TYPE_BLANK) {
                                String productBrandName = importHandler.getCellValue(cell);//cell.getStringCellValue().trim();
                                if (!StringUtil.isNullOrEmpty(productBrandName)) {

                                    // Ref Optimization related code start. 
                                    Map refData = null;
                                    if (refColumnObjMap.containsKey("productbrandname")) {
                                        refData = refColumnObjMap.get("productbrandname");
                                    } else {
                                        refData = new HashMap();
                                        refColumnObjMap.put("productbrandname", refData);
                                    }
                                    if (refData.containsKey(productBrandName)) {
                                        productBrandID = (String) refData.get(productBrandName);
                                    } else {
                                        KwlReturnObject retObj = accMasterItemsDAOobj.getMasterItemByNameorID(companyid, productBrandName, String.valueOf(53), "mst.ID", "mst.value");
                                        if (retObj != null && !retObj.getEntityList().isEmpty()) {
                                            productBrandID = (String) retObj.getEntityList().get(0);
                                            refData.put(productBrandName, productBrandID);
                                        }
                                    }
                                    // Ref Optimization related code ended. 

                                    if (StringUtil.isNullOrEmpty(productBrandID)) {// when Product Brand not found for given value
                                        if (masterPreference.equalsIgnoreCase("2")) {// add case
                                            HashMap<String, Object> requestMap = new HashMap<String, Object>();
                                            requestMap.put("name", productBrandName);
                                            requestMap.put("groupid", String.valueOf(53));
                                            requestMap.put("companyid", companyid);
                                            KwlReturnObject masterResult = accMasterItemsDAOobj.addMasterItem(requestMap);
                                            MasterItem master = (MasterItem) masterResult.getEntityList().get(0);
                                            productBrandID = master.getID();
                                        } else if (masterPreference.equalsIgnoreCase("1")) {// import with empty data
                                            productBrandID = "";
                                        } else {//Most restricted case 0
                                            invalidColumn.put((Integer) columnConfig.get("productBrandName"), "Invalid");
                                            failureMsg += "Product Brand is not found for " + productBrandName + ".";
                                        }
                                    }
                                }
                            }
                        }
                        
                        String landingcostcategoryids = "";
                        if (columnConfig.containsKey("landingcostcategory")) {
                            Cell cell = row.getCell((Integer) columnConfig.get("landingcostcategory"));
                            if (cell != null && cell.getCellType() != Cell.CELL_TYPE_BLANK) {
                                String landingcostcategory = importHandler.getCellValue(cell);
                                if (!StringUtil.isNullOrEmpty(landingcostcategory)) {
                                    String[] categorys = landingcostcategory.split(",");
                                    Map refData = null;
                                    if (refColumnObjMap.containsKey("landingcostcategory")) {
                                        refData = refColumnObjMap.get("landingcostcategory");
                                    } else {
                                        refData = new HashMap();
                                        refColumnObjMap.put("landingcostcategory", refData);
                                    }

                                    HashMap requestParams = null;
                                    if (categorys.length > 0) {
                                        requestParams = new HashMap<String, Object>();
                                        requestParams.put(Constants.companyKey, companyid);
                                    }
                                    for (int j = 0; j < categorys.length; j++) {
                                        requestParams.put("lccname", categorys[j].trim());
                                        KwlReturnObject retObj = accMasterItemsDAOobj.getMasterItemFromLandingCostCategory(requestParams);
                                        if (retObj != null && !retObj.getEntityList().isEmpty() && retObj.getEntityList().get(0) != null) {
                                            LandingCostCategory lcc = (LandingCostCategory) retObj.getEntityList().get(0);
                                            if (lcc.getId() != null) {
                                                if (j < categorys.length - 1) {
                                                    landingcostcategoryids += lcc.getId() + ",";
                                                } else {
                                                    landingcostcategoryids += lcc.getId();
                                                }
                                            } else {
                                                invalidColumn.put((Integer) columnConfig.get("landingcostcategory"), "Invalid");
                                                failureMsg += "Landed Cost Category " + categorys[j] + " does not present.";
                                            }
                                        } else {
                                            invalidColumn.put((Integer) columnConfig.get("landingcostcategory"), "Invalid");
                                            failureMsg += "Landed Cost Category " + categorys[j] + " does not present.";
                                        }
                                    }
                                    refData.put(landingcostcategory, landingcostcategoryids);
                                }
                            }
                        }

                        String productReorderLevel = "0";
                        if (columnConfig.containsKey("reorderlevel")) {
                            Cell cell = row.getCell((Integer) columnConfig.get("reorderlevel"));

                            if (cell == null || cell.getCellType() == Cell.CELL_TYPE_BLANK) {
                                productReorderLevel = "0";
                            } else {
                                productReorderLevel = importHandler.getCellValue(cell);//
                                if (!StringUtil.isNullOrEmpty(productReorderLevel)) {
                                    try {
                                        Object vDataValue = Double.parseDouble(productReorderLevel);
                                    } catch (Exception ex) {
                                        if (masterPreference.equals("1")) {
                                            productReorderLevel = "0";
                                        } else {
                                            invalidColumn.put((Integer) columnConfig.get("reorderlevel"), "Invalid");
                                            failureMsg += "Incorrect numeric value for Reorder Level, Please ensure that value type of Reorder Level matches with the Reorder Level.";
                                        }
                                    }
                                }
                            }
                        } 
                        String productReorderQuantity = "0";
                        if (columnConfig.containsKey("reorderquantity")) {
                            Cell cell = row.getCell((Integer) columnConfig.get("reorderquantity"));

                            if (cell == null || cell.getCellType() == Cell.CELL_TYPE_BLANK) {
                                productReorderQuantity = "0";
                            } else {
                                productReorderQuantity = importHandler.getCellValue(cell);//

                                if (!StringUtil.isNullOrEmpty(productReorderQuantity)) {
                                    try {
                                        Object vDataValue = Double.parseDouble(productReorderQuantity);
                                    } catch (Exception ex) {
                                        if (masterPreference.equals("1")) {
                                            productReorderQuantity = "0";
                                        } else {
                                            invalidColumn.put((Integer) columnConfig.get("reorderquantity"), "Invalid");
                                            failureMsg += "Incorrect numeric value for Reorder Quantity, Please ensure that value type of Reorder Quantity matches with the Reorder Quantity.";
                                        }
                                    }
                                }
                            }
                        } 

                        String productWarrantyPeriod = "0";
                        if (columnConfig.containsKey("warrantyperiod")) {
                            Cell cell = row.getCell((Integer) columnConfig.get("warrantyperiod"));

                            if (cell == null || cell.getCellType() == Cell.CELL_TYPE_BLANK) {
                                productWarrantyPeriod = "0";
                            } else {
                                productWarrantyPeriod = importHandler.getCellValue(cell);//

                                if (!StringUtil.isNullOrEmpty(productWarrantyPeriod)) {
                                    try {
                                        Object vDataValue = Integer.parseInt(productWarrantyPeriod);
                                    } catch (Exception ex) {
                                        if (masterPreference.equals("1")) {
                                            productWarrantyPeriod = "0";
                                        } else {
                                            invalidColumn.put((Integer) columnConfig.get("warrantyperiod"), "Invalid");
                                            failureMsg += "Incorrect numeric value for Warranty Period (in days), Please ensure that value type of Warranty Period (in days) matches with the Warranty Period (in days).";
                                        }
                                    }
                                }
                            }
                        } 

                        String productSalesWarrantyPeriod = "0";
                        if (columnConfig.containsKey("warrantyperiodsal")) {
                            Cell cell = row.getCell((Integer) columnConfig.get("warrantyperiodsal"));

                            if (cell == null || cell.getCellType() == Cell.CELL_TYPE_BLANK) {
                                productSalesWarrantyPeriod = "0";
                            } else {
                                productSalesWarrantyPeriod = importHandler.getCellValue(cell);//

                                if (!StringUtil.isNullOrEmpty(productSalesWarrantyPeriod)) {
                                    try {
                                        Object vDataValue = Integer.parseInt(productSalesWarrantyPeriod);
                                    } catch (Exception ex) {
                                        if (masterPreference.equals("1")) {
                                            productSalesWarrantyPeriod = "0";
                                        } else {
                                            invalidColumn.put((Integer) columnConfig.get("warrantyperiodsal"), "Invalid");
                                            failureMsg += "Incorrect numeric value for Sales Warranty Period (in days), Please ensure that value type of Sales Warranty Period (in days) matches with the Sales Warranty Period (in days).";
                                        }
                                    }
                                }
                            }
                        }

                        String productLeadTime = "0";
                        if (columnConfig.containsKey("leadtime")) {
                            Cell cell = row.getCell((Integer) columnConfig.get("leadtime"));

                            if (cell == null || cell.getCellType() == Cell.CELL_TYPE_BLANK) {
                                if (masterPreference.equalsIgnoreCase("1")) {
                                    productLeadTime = "0";
                                } else {
                                    if (productTypeID.equals(Producttype.SERVICE)) {
                                        productLeadTime = "0";
                                    } else {
                                        invalidColumn.put((Integer) columnConfig.get("leadtime"), "Invalid");
                                        failureMsg += "Product Lead Time is not available.";
                                    }
                                }
                            } else {
                                productLeadTime = importHandler.getCellValue(cell);//

                                if (!StringUtil.isNullOrEmpty(productLeadTime)) {
                                    try {
                                        if (Integer.parseInt(productLeadTime) > 365) {
                                            invalidColumn.put((Integer) columnConfig.get("leadtime"), "Invalid");
                                            failureMsg += "Product Lead Time should not be greater than 365.";
                                        } else if (Integer.parseInt(productLeadTime) < 0) {
                                            invalidColumn.put((Integer) columnConfig.get("leadtime"), "Invalid");
                                            failureMsg += "Product Lead Time should not be less than 0.";
                                        }
                                    } catch (Exception ex) {
                                        if (masterPreference.equals("1")) {
                                            productLeadTime = "0";
                                        } else {
                                            invalidColumn.put((Integer) columnConfig.get("leadtime"), "Invalid");
                                            failureMsg += "Incorrect numeric value for Lead Time(in days), Please ensure that value type of Lead Time(in days) matches with the Lead Time(in days).";
                                        }
                                    }
                                }
                            }
                        } 

//                        String productCycleCountInterval = "";
//                        if (columnConfig.containsKey("ccountinterval")) {
//                            Cell cell = row.getCell((Integer) columnConfig.get("ccountinterval"));
//
//                            if (cell == null) {
//                                productCycleCountInterval = "1";
//                            } else {
//                                productCycleCountInterval = Integer.toString((int) cell.getNumericCellValue());
//                            }
//                        } else {
//                            productCycleCountInterval = "1";
//                        }
//
//                        String productCycleCountTolerance = "";
//                        if (columnConfig.containsKey("ccounttolerance")) {
//                            Cell cell = row.getCell((Integer) columnConfig.get("ccounttolerance"));
//
//                            if (cell == null) {
//                                productCycleCountTolerance = "0";
//                            } else {
//                                productCycleCountTolerance = Integer.toString((int) cell.getNumericCellValue());
//                            }
//                        } else {
//                            productCycleCountTolerance = "0";
//                        }

                        String parentProductUUID = "";
                        if (columnConfig.containsKey("parentid")) {
                            Cell cell = row.getCell((Integer) columnConfig.get("parentid"));

                            if (cell != null && cell.getCellType() != Cell.CELL_TYPE_BLANK) {
                                String parentProductID = importHandler.getCellValue(cell);//cell.getStringCellValue().trim();
                                if (!StringUtil.isNullOrEmpty(parentProductID)) {
                                    
                                    // Ref Optimization related code. 
                                    Map refData = null;
                                    if(refColumnObjMap.containsKey("parentid")){
                                        refData = refColumnObjMap.get("parentid");
                                    }else{
                                        refData = new HashMap();
                                        refColumnObjMap.put("parentid", refData);
                                    }
                                    Product parentProduct = null;
                                    if(refData.containsKey(parentProductID)){
                                        parentProduct = refData.get(parentProductID) != null ? (Product) refData.get(parentProductID): null;
                                    }else{
                                        parentProduct = accProductModuleService.getProductByProductID(parentProductID, companyid);
                                        refData.put(parentProductID, parentProduct);
                                    }
                                    // Ref Optimization related code. 
                                    
                                    if (parentProduct != null) {
                                        parentProductUUID = parentProduct.getID();
                                    } else {
                                        if (masterPreference.equalsIgnoreCase("1")) {
                                            parentProductUUID = null;
                                        } else {
                                            invalidColumn.put((Integer) columnConfig.get("parentid"), "Invalid");
                                            failureMsg += "Parent Product is not found for " + parentProductID + ".";
                                        }
                                    }
                                }
                            }
                        } else if(!updateExistingRecordFlag) {
                            parentProductUUID = null;
                        }

                        String productSalesAccId = "";
                        if (columnConfig.containsKey("salesaccountname")) {
                            Cell cell = row.getCell((Integer) columnConfig.get("salesaccountname"));

                            if (cell != null && cell.getCellType() != Cell.CELL_TYPE_BLANK) {
                                String productSalesAccountName = importHandler.getCellValue(cell);//cell.getStringCellValue().trim();
                                
                                // Ref Optimization related code. 
                                Map refData = null;
                                if (refColumnObjMap.containsKey("account")) {
                                    refData = refColumnObjMap.get("account");
                                } else {
                                    refData = new HashMap();
                                    refColumnObjMap.put("account", refData);
                                }
                                Account salesAccount = null;
                                if (refData.containsKey(productSalesAccountName)) {
                                    salesAccount = refData.get(productSalesAccountName) != null ? (Account) refData.get(productSalesAccountName) : null;
                                } else {
                                    salesAccount = getAccountByName(productSalesAccountName, companyid);
                                    refData.put(productSalesAccountName, salesAccount);
                                }
                                // Ref Optimization related code. 
                                
                                if (salesAccount != null) {
                                    productSalesAccId = salesAccount.getID();
                                } else {
                                    invalidColumn.put((Integer) columnConfig.get("salesaccountname"), "Invalid");
                                    failureMsg += "Product Sales Account is not found for " + productSalesAccountName + ".";
                                }
                            } else {
                                invalidColumn.put((Integer) columnConfig.get("salesaccountname"), "Invalid");
                                failureMsg += "Product Sales Account is not available.";
                            }
                        } else if(!updateExistingRecordFlag) {
                            failureMsg += "Product Sales Account column is not found.";
                        }

                        String productSalesReturnAccId = "";
                        if (columnConfig.containsKey("salesretaccountname")) {
                            Cell cell = row.getCell((Integer) columnConfig.get("salesretaccountname"));

                            if (cell != null && cell.getCellType() != Cell.CELL_TYPE_BLANK) {
                                String productSalesReturnAccountName = importHandler.getCellValue(cell);//cell.getStringCellValue().trim();
                                
                                // Ref Optimization related code. 
                                Map refData = null;
                                if (refColumnObjMap.containsKey("account")) {
                                    refData = refColumnObjMap.get("account");
                                } else {
                                    refData = new HashMap();
                                    refColumnObjMap.put("account", refData);
                                }
                                Account salesReturnAccount = null;
                                if (refData.containsKey(productSalesReturnAccountName)) {
                                    salesReturnAccount = refData.get(productSalesReturnAccountName) != null ? (Account) refData.get(productSalesReturnAccountName) : null;
                                } else {
                                    salesReturnAccount = getAccountByName(productSalesReturnAccountName, companyid);
                                    refData.put(productSalesReturnAccountName, salesReturnAccount);
                                }
                                // Ref Optimization related code. 
                                
                                if (salesReturnAccount != null) {
                                    productSalesReturnAccId = salesReturnAccount.getID();
                                } else {
                                    invalidColumn.put((Integer) columnConfig.get("salesretaccountname"), "Invalid");
                                    failureMsg += "Product Sales Return Account is not found for " + productSalesReturnAccountName + ".";
                                }
                            } else {
                                invalidColumn.put((Integer) columnConfig.get("salesretaccountname"), "Invalid");
                                failureMsg += "Product Sales Return Account is not available.";
                            }
                        } else if(!updateExistingRecordFlag) {
                            failureMsg += "Product Sales Return Account column is not found.";
                        }

                        /*-----Block is executed only for Malaysian Company-------  */
                        String purchasetaxId = "";
                        String salestaxId = "";
                        if (countryid == Constants.malaysian_country_id) {
                            if (columnConfig.containsKey("purchasetaxId")) {
                                Cell cell = row.getCell((Integer) columnConfig.get("purchasetaxId"));
                                if (cell != null && cell.getCellType() != Cell.CELL_TYPE_BLANK) {
                                    String purchaseTaxCode = importHandler.getCellValue(cell);//cell.getStringCellValue().trim();  

                                    if (!StringUtil.isNullOrEmpty(purchaseTaxCode)) {
//                                        Tax taxObj = getTaxByCode(purchaseTaxCode, companyid);
                                        Map taxMap = new HashMap<>();
                                        taxMap.put(Constants.companyKey, companyid);
                                        taxMap.put(Constants.TAXCODE, purchaseTaxCode);
                                        ArrayList taxList = importHandler.getTax(taxMap);
                                        if (taxList.get(0) != null) {
                                            Tax taxObj = (Tax) taxList.get(0);
                                            purchasetaxId = taxObj.getID();
                                        } else if (!StringUtil.isNullOrEmpty((String) taxList.get(2))) {
                                            failureMsg += (String) taxList.get(2) + purchaseTaxCode;
                                        }
                                    }
                                }
                            }
                            
                            if (columnConfig.containsKey("salestaxId")) {

                                Cell cell = row.getCell((Integer) columnConfig.get("salestaxId"));
                                if (cell != null && cell.getCellType() != Cell.CELL_TYPE_BLANK) {
                                    String salesTaxCode = importHandler.getCellValue(cell);//cell.getStringCellValue().trim();  

                                    if (!StringUtil.isNullOrEmpty(salesTaxCode)) {
//                                        Tax taxObj = getTaxByCode(salesTaxCode, companyid);
                                        Map taxMap = new HashMap<>();
                                        taxMap.put(Constants.companyKey, companyid);
                                        taxMap.put(Constants.TAXCODE, salesTaxCode);
                                        ArrayList taxList = importHandler.getTax(taxMap);
                                        if (taxList.get(0) != null) {
                                            Tax taxObj = (Tax) taxList.get(0);
                                            salestaxId = taxObj.getID();
                                        } else if (!StringUtil.isNullOrEmpty((String) taxList.get(2))) {
                                            failureMsg += (String) taxList.get(2) + salesTaxCode;
                                        }
                                    }
                                }
                            }
                        }

                        String productPreferedVendorID = "";
                        if (columnConfig.containsKey("vendornameid")) {
                            Cell cell = row.getCell((Integer) columnConfig.get("vendornameid"));

                            if (cell != null && cell.getCellType() != Cell.CELL_TYPE_BLANK) {
                                String productPreferedVendorName = importHandler.getCellValue(cell);//cell.getStringCellValue().trim();
                                if (!StringUtil.isNullOrEmpty(productPreferedVendorName)) {
                                    
                                    // Ref Optimization related code. 
                                    Map refData = null;
                                    if (refColumnObjMap.containsKey("vendor")) {
                                        refData = refColumnObjMap.get("vendor");
                                    } else {
                                        refData = new HashMap();
                                        refColumnObjMap.put("vendor", refData);
                                    }
                                    Vendor vendor = null;
                                    if (refData.containsKey(productPreferedVendorName)) {
                                        vendor = refData.get(productPreferedVendorName) != null ? (Vendor) refData.get(productPreferedVendorName) : null;
                                    } else {
                                        vendor = getVendorByName(productPreferedVendorName, companyid);
                                        refData.put(productPreferedVendorName, vendor);
                                    }
                                    // Ref Optimization related code. 
                                
                                    if (vendor != null) {
                                        productPreferedVendorID = vendor.getID();
                                    } else {
                                        if (masterPreference.equalsIgnoreCase("1")) {
                                            productPreferedVendorID = null;
                                        } else {
                                            invalidColumn.put((Integer) columnConfig.get("vendornameid"), "Invalid");
                                            failureMsg += "Prefered Vendor is not found for " + productPreferedVendorName + ".";
                                        }
                                    }
                                }
                            }
                        } else if(!updateExistingRecordFlag) {
                            productPreferedVendorID = null;
                        }

                        String productPurchaseAccId = "";
                        if (columnConfig.containsKey("purchaseaccountname")) {
                            Cell cell = row.getCell((Integer) columnConfig.get("purchaseaccountname"));

                            if (cell != null && cell.getCellType() != Cell.CELL_TYPE_BLANK) {
                                String productPurchaseAccountName = importHandler.getCellValue(cell);//cell.getStringCellValue().trim();
                                
                                // Ref Optimization related code. 
                                Map refData = null;
                                if (refColumnObjMap.containsKey("account")) {
                                    refData = refColumnObjMap.get("account");
                                } else {
                                    refData = new HashMap();
                                    refColumnObjMap.put("account", refData);
                                }
                                Account purchaseAccount = null;
                                if (refData.containsKey(productPurchaseAccountName)) {
                                    purchaseAccount = refData.get(productPurchaseAccountName) != null ? (Account) refData.get(productPurchaseAccountName) : null;
                                } else {
                                    purchaseAccount = getAccountByName(productPurchaseAccountName, companyid);
                                    refData.put(productPurchaseAccountName, purchaseAccount);
                                }
                                // Ref Optimization related code. 
                                
                                if (purchaseAccount != null) {
                                    productPurchaseAccId = purchaseAccount.getID();
                                } else {
                                    invalidColumn.put((Integer) columnConfig.get("purchaseaccountname"), "Invalid");
                                    failureMsg += "Product Purchase Account is not found for " + productPurchaseAccountName + ".";
                                }
                            } else {
                                invalidColumn.put((Integer) columnConfig.get("purchaseaccountname"), "Invalid");
                                failureMsg += "Product Purchase Account is not available.";
                            }
                        } else if(!updateExistingRecordFlag) {
                            failureMsg += "Product Purchase Account column is not found.";
                        }

                        String productPurchaseReturnAccId = "";
                        if (columnConfig.containsKey("purchaseretaccountname")) {
                            Cell cell = row.getCell((Integer) columnConfig.get("purchaseretaccountname"));

                            if (cell != null && cell.getCellType() != Cell.CELL_TYPE_BLANK) {
                                String productPurchaseReturnAccountName = importHandler.getCellValue(cell);//cell.getStringCellValue().trim();
                                
                                // Ref Optimization related code. 
                                Map refData = null;
                                if (refColumnObjMap.containsKey("account")) {
                                    refData = refColumnObjMap.get("account");
                                } else {
                                    refData = new HashMap();
                                    refColumnObjMap.put("account", refData);
                                }
                                Account purchaseReturnAccount = null;
                                if (refData.containsKey(productPurchaseReturnAccountName)) {
                                    purchaseReturnAccount = refData.get(productPurchaseReturnAccountName) != null ? (Account) refData.get(productPurchaseReturnAccountName) : null;
                                } else {
                                    purchaseReturnAccount = getAccountByName(productPurchaseReturnAccountName, companyid);
                                    refData.put(productPurchaseReturnAccountName, purchaseReturnAccount);
                                }
                                // Ref Optimization related code. 
                                
                                if (purchaseReturnAccount != null) {
                                    productPurchaseReturnAccId = purchaseReturnAccount.getID();
                                } else {
                                    invalidColumn.put((Integer) columnConfig.get("purchaseretaccountname"), "Invalid");
                                    failureMsg += "Product Purchase Return Account is not found for " + productPurchaseReturnAccountName + ".";
                                }
                            } else {
                                invalidColumn.put((Integer) columnConfig.get("purchaseretaccountname"), "Invalid");
                                failureMsg += "Product Purchase Return Account is not available.";
                            }
                        } else if(!updateExistingRecordFlag) {
                            failureMsg += "Product Purchase Return Account column is not found.";
                        }

                        String productInitialQuantity = "0";
                        if (columnConfig.containsKey("quantity") && isAddUpdateInitialQuantity == false) {
                            Cell cell = row.getCell((Integer) columnConfig.get("quantity"));

                            if (cell == null || cell.getCellType() == Cell.CELL_TYPE_BLANK) {
                                productInitialQuantity = "0";
                            } else {
                                productInitialQuantity = importHandler.getCellValue(cell);//
                                if (!StringUtil.isNullOrEmpty(productInitialQuantity)) {
                                    try {
                                        Object vDataValue = Double.parseDouble(productInitialQuantity);
                                    } catch (Exception ex) {
                                        if (masterPreference.equalsIgnoreCase("1")) {//set empty data preferences
                                            productInitialQuantity = "0";
                                        } else {
                                            invalidColumn.put((Integer) columnConfig.get("quantity"), "Invalid");
                                            failureMsg += "Incorrect numeric value for Initial Quantity, Please ensure that value type of Initial Quantity matches with the Initial Quantity.";
                                        }
                                    }
                                }
                            }
                        } 

                        String productInitialPurchasePrise = "0";
                        if (columnConfig.containsKey("purchaseprice")) {
                            Cell cell = row.getCell((Integer) columnConfig.get("purchaseprice"));

                            if (cell != null && cell.getCellType() != Cell.CELL_TYPE_BLANK) {
                                productInitialPurchasePrise = importHandler.getCellValue(cell);//
                                if (!StringUtil.isNullOrEmpty(productInitialPurchasePrise)) {
                                    try {
                                        Object vDataValue = Double.parseDouble(productInitialPurchasePrise);
                                    } catch (Exception ex) {
                                        if (masterPreference.equals("1")) {
                                            productInitialPurchasePrise = "0";
                                        } else {
                                            invalidColumn.put((Integer) columnConfig.get("purchaseprice"), "Invalid");
                                            failureMsg += "Incorrect numeric value for Initial Purchase Price, Please ensure that value type of Initial Purchase Price matches with the Initial Purchase Price.";
                                        }
                                    }
                                }
                            }
                        }

                        String productSalesPrice = "0";
                        if (columnConfig.containsKey("saleprice")) {
                            Cell cell = row.getCell((Integer) columnConfig.get("saleprice"));

                            if (cell != null && cell.getCellType() != Cell.CELL_TYPE_BLANK) {
                                productSalesPrice = importHandler.getCellValue(cell);//
                                if (!StringUtil.isNullOrEmpty(productSalesPrice)) {
                                    try {
                                        Object vDataValue = Double.parseDouble(productSalesPrice);
                                    } catch (Exception ex) {
                                        if (masterPreference.equals("1")) {
                                            productSalesPrice = "0";
                                        } else {
                                            invalidColumn.put((Integer) columnConfig.get("saleprice"), "Invalid");
                                            failureMsg += "Incorrect numeric value for Sales Price, Please ensure that value type of Sales Price matches with the Sales Price.";
                                        }
                                    }
                                }
                            }
                        } 

                        String MsgExep = "";
                        if (isCurrencyCode?columnConfig.containsKey("currencyCode"):columnConfig.containsKey("currencyName")) {
                            Cell cell = isCurrencyCode?row.getCell((Integer) columnConfig.get("currencyCode")):row.getCell((Integer) columnConfig.get("currencyName"));

                            if (cell != null && cell.getCellType() != Cell.CELL_TYPE_BLANK) {
                                String productPriceCurrencyStr = importHandler.getCellValue(cell);//cell.getStringCellValue().trim();
                                currencyId = getCurrencyId(productPriceCurrencyStr, currencyMap);
                                if (StringUtil.isNullOrEmpty(currencyId)) {
                                    invalidColumn.put(isCurrencyCode?(Integer) columnConfig.get("currencyCode"):(Integer) columnConfig.get("currencyName"), "Invalid");
                                    MsgExep = "Currency format you entered is not correct. it should be like \"SG Dollar (SGD)\""; // messageSource.getMessage("acc.field.ImportProductExceptionFormat", null, RequestContextUtils.getLocale(request));
                                    failureMsg += MsgExep;
                                }
                            } else {
                                if (!masterPreference.equalsIgnoreCase("1")) {
                                    invalidColumn.put(isCurrencyCode?(Integer) columnConfig.get("currencyCode"):(Integer) columnConfig.get("currencyName"), "Invalid");
                                    failureMsg += "Currency is not available.";
                                }
                            }
                        }

                        UOMschemaType uomSchemaType = null;
                        if (columnConfig.containsKey("uomSchemaTypeName")) {
                            Cell cell = row.getCell((Integer) columnConfig.get("uomSchemaTypeName"));
                            if (cell != null && cell.getCellType() != Cell.CELL_TYPE_BLANK) {
                                String uomSchemaTypeName = importHandler.getCellValue(cell);//cell.getStringCellValue().trim();
                                if (!StringUtil.isNullOrEmpty(uomSchemaTypeName)) {
                                    
                                    // Ref Optimization related code. 
                                    Map refData = null;
                                    if (refColumnObjMap.containsKey("uomSchemaType")) {
                                        refData = refColumnObjMap.get("uomSchemaType");
                                    } else {
                                        refData = new HashMap();
                                        refColumnObjMap.put("uomSchemaType", refData);
                                    }
                                    if (refData.containsKey(uomSchemaTypeName)) {
                                        uomSchemaType = refData.get(uomSchemaTypeName) != null ? (UOMschemaType) refData.get(uomSchemaTypeName) : null;
                                    } else {
                                        uomSchemaType = getUOMschemaTypeByName(uomSchemaTypeName, companyid);
                                        refData.put(uomSchemaTypeName, uomSchemaType);
                                    }
                                    // Ref Optimization related code. 
                                    
                                    if (uomSchemaType == null) {
                                        if (!masterPreference.equalsIgnoreCase("1")) {
                                            invalidColumn.put((Integer) columnConfig.get("uomSchemaTypeName"), "Invalid");
                                            failureMsg += "UOM Schema is not found for " + uomSchemaTypeName;
                                        }
                                    }
                                }
                            }
                        }

                        if (uomSchemaType != null && !productUOMID.equalsIgnoreCase(uomSchemaType.getStockuom().getID())) {
                            invalidColumn.put((Integer) columnConfig.get("uomSchemaTypeName"), "Invalid");
                            failureMsg += "Stock UOM of Product and UOM Schema's Stock UOM should be same.";
                        }
                        
                        Boolean isIslocationforproduct = false;
                        if (!(productTypeID.equals(Producttype.SERVICE) || productTypeID.equals(Producttype.NON_INVENTORY_PART)) && columnConfig.containsKey(Constants.ACTIVATE_LOCATION) && companyAccountPreferences.isIslocationcompulsory()) {
                            Cell cell = row.getCell((Integer) columnConfig.get(Constants.ACTIVATE_LOCATION));
                            if (cell != null && cell.getCellType() != Cell.CELL_TYPE_BLANK) {
                                String ISlocationforproduct = importHandler.getCellValue(cell);//cell.getStringCellValue().trim();
                                if (ISlocationforproduct.equalsIgnoreCase("T")) {
                                    isIslocationforproduct = true;
                                } else if (ISlocationforproduct.equalsIgnoreCase("F")) {
                                    isIslocationforproduct = false;
                                } else {
                                    invalidColumn.put((Integer) columnConfig.get(Constants.ACTIVATE_LOCATION), "Invalid");
                                    failureMsg += "Format you entered is not correct for Activate Location. It should be like \"T\" or \"F\".";
                                }
                            } if (companyAccountPreferences.isInventoryAccountingIntegration()) {

                                if (productID.equalsIgnoreCase(Producttype.INVENTORY_PART) || productID.equalsIgnoreCase(Producttype.Inventory_Non_Sales) || productID.equalsIgnoreCase(Producttype.CUSTOMER_INVENTORY) || productID.equalsIgnoreCase(Producttype.CUSTOMER_ASSEMBLY) ||productID.equalsIgnoreCase(Producttype.ASSEMBLY)) {
                                    isIslocationforproduct = true;
                             }
                         }
                        } else if (!updateExistingRecordFlag && !(productTypeID.equals(Producttype.SERVICE) || productTypeID.equals(Producttype.NON_INVENTORY_PART)) && !columnConfig.containsKey(Constants.ACTIVATE_LOCATION) && companyAccountPreferences.isIslocationcompulsory()) {
                            invalidColumn.put((Integer) columnConfig.get(Constants.ACTIVATE_LOCATION), "Invalid");
                            failureMsg += "Location should be active for product";
                        }
                        
                        Boolean isIswarehouseforproduct = false;
                        if (!(productTypeID.equals(Producttype.SERVICE) || productTypeID.equals(Producttype.NON_INVENTORY_PART)) && columnConfig.containsKey(Constants.ACTIVATE_WAREHOUSE) && companyAccountPreferences.isIswarehousecompulsory()) {
                            Cell cell = row.getCell((Integer) columnConfig.get(Constants.ACTIVATE_WAREHOUSE));
                            if (cell != null && cell.getCellType() != Cell.CELL_TYPE_BLANK) {
                                String Iswarehouseforproduct = importHandler.getCellValue(cell);//cell.getStringCellValue().trim();
                                if (Iswarehouseforproduct.equalsIgnoreCase("T")) {
                                    isIswarehouseforproduct = true;
                                } else if (Iswarehouseforproduct.equalsIgnoreCase("F")) {
                                    isIswarehouseforproduct = false;
                                } else {
                                    invalidColumn.put((Integer) columnConfig.get(Constants.ACTIVATE_WAREHOUSE), "Invalid");
                                    failureMsg += "Format you entered is not correct for Activate Warehouse. It should be like \"T\" or \"F\".";
                                }
                            } if (companyAccountPreferences.isInventoryAccountingIntegration()) {

                                if (productID.equalsIgnoreCase(Producttype.INVENTORY_PART) || productID.equalsIgnoreCase(Producttype.Inventory_Non_Sales) || productID.equalsIgnoreCase(Producttype.CUSTOMER_INVENTORY) || productID.equalsIgnoreCase(Producttype.CUSTOMER_ASSEMBLY) ||productID.equalsIgnoreCase(Producttype.ASSEMBLY)) {
                                    isIswarehouseforproduct = true;
                             }
                         }
                        } else if (!updateExistingRecordFlag && !(productTypeID.equals(Producttype.SERVICE) || productTypeID.equals(Producttype.NON_INVENTORY_PART)) && !columnConfig.containsKey(Constants.ACTIVATE_WAREHOUSE) && companyAccountPreferences.isIslocationcompulsory()) {
                            invalidColumn.put((Integer) columnConfig.get(Constants.ACTIVATE_WAREHOUSE), "Invalid");
                            failureMsg += "Warehouse should be active for product";
                        }

                        String productDefaultLocationID = "";
                        if (!(productTypeID.equals(Producttype.SERVICE) || productTypeID.equals(Producttype.NON_INVENTORY_PART)) && columnConfig.containsKey("locationName") && companyAccountPreferences.isIslocationcompulsory()) {
                            Cell cell = row.getCell((Integer) columnConfig.get("locationName"));

                            if (cell != null && cell.getCellType() != Cell.CELL_TYPE_BLANK) {
                                String productDefaultLocationName = importHandler.getCellValue(cell);//cell.getStringCellValue().trim();
                                if (!StringUtil.isNullOrEmpty(productDefaultLocationName)) {
                                    
                                    // Ref Optimization related code. 
                                    Map refData = null;
                                    if (refColumnObjMap.containsKey("locationName")) {
                                        refData = refColumnObjMap.get("locationName");
                                    } else {
                                        refData = new HashMap();
                                        refColumnObjMap.put("locationName", refData);
                                    }
                                    InventoryLocation invLoc = null;
                                    if (refData.containsKey(productDefaultLocationName)) {
                                        invLoc = refData.get(productDefaultLocationName) != null ? (InventoryLocation) refData.get(productDefaultLocationName) : null;
                                    } else {
                                        invLoc = getInventoryLocationByName(productDefaultLocationName, companyid);
                                        refData.put(productDefaultLocationName, invLoc);
                                    }
                                    // Ref Optimization related code. 
                                    
                                    if (invLoc != null) {
                                        productDefaultLocationID = invLoc.getId();
                                    } else {
                                        if (masterPreference.equalsIgnoreCase("2") && isIslocationforproduct) {
                                            HashMap requestParam = requestParams1; //AccountingManager.getGlobalParams(request);
                                            requestParam.put("id", "");
                                            requestParam.put("name", productDefaultLocationName);
                                            requestParam.put("parent", null);
//                                            KwlReturnObject jeresult = accountingHandlerDAOobj.getObject(User.class.getName(), userId);
//                                            User user = (User) jeresult.getEntityList().get(0);
                                            requestParam.put("user", user);
                                            KwlReturnObject locationResult = accMasterItemsDAOobj.addLocationItem(requestParam);
                                            invLoc = (InventoryLocation) locationResult.getEntityList().get(0);
                                            productDefaultLocationID = invLoc.getId();
                                            refData.put(productDefaultLocationName, invLoc);// Ref Optimization related code. 
                                        } else {
                                            if (masterPreference.equalsIgnoreCase("1")) {
                                                productDefaultLocationID = null;
                                            } else {
                                                if (isIslocationforproduct) {
                                                    invalidColumn.put((Integer) columnConfig.get("locationName"), "Invalid");
                                                    failureMsg += "Default Location is not found for " + productDefaultLocationName + ".";
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        } else if(!updateExistingRecordFlag) {
                            productDefaultLocationID = null;
                        }

                        String productDefaultWarehouseID = "";
                        if (!(productTypeID.equals(Producttype.SERVICE) || productTypeID.equals(Producttype.NON_INVENTORY_PART)) && columnConfig.containsKey("warehouseName") && companyAccountPreferences.isIswarehousecompulsory()) {
                            Cell cell = row.getCell((Integer) columnConfig.get("warehouseName"));

                            if (cell != null && cell.getCellType() != Cell.CELL_TYPE_BLANK) {
                                String productDefaultWarehouseName = importHandler.getCellValue(cell);//cell.getStringCellValue().trim();
                                if (!StringUtil.isNullOrEmpty(productDefaultWarehouseName)) {
                                    
                                    // Ref Optimization related code. 
                                    Map refData = null;
                                    if (refColumnObjMap.containsKey("warehouseName")) {
                                        refData = refColumnObjMap.get("warehouseName");
                                    } else {
                                        refData = new HashMap();
                                        refColumnObjMap.put("warehouseName", refData);
                                    }
                                    InventoryWarehouse invWHouse = null;
                                    if (refData.containsKey(productDefaultWarehouseName)) {
                                        invWHouse = refData.get(productDefaultWarehouseName) != null ? (InventoryWarehouse) refData.get(productDefaultWarehouseName) : null;
                                    } else {
                                        invWHouse = getInventoryWarehouseByName(productDefaultWarehouseName, companyid);
                                        refData.put(productDefaultWarehouseName, invWHouse);
                                    }
                                    // Ref Optimization related code. 
                                    
                                    if (invWHouse != null) {
                                        productDefaultWarehouseID = invWHouse.getId();
                                        //Get the Store Object & check store type.
                                        Store store = storeService.getStoreById(productDefaultWarehouseID);
                                        // Check if store type is not Warehouse or Headquarter as such Default Warehouse are not allowed to map to product.
                                        if (isIswarehouseforproduct && store.getStoreType() != StoreType.WAREHOUSE && store.getStoreType() != StoreType.HEADQUARTER){
                                            invalidColumn.put((Integer) columnConfig.get("warehouseName"), "Invalid");
                                            failureMsg += "Store type for " + productDefaultWarehouseName + " store must be either "+ StoreType.WAREHOUSE.toString() +" or "+ StoreType.HEADQUARTER.toString() +".";
                                        }
                                        if (((!StringUtil.isNullOrEmpty(extraCompanyPreferences.getInspectionStore()) && extraCompanyPreferences.getInspectionStore().equals(productDefaultWarehouseID))) || (!StringUtil.isNullOrEmpty(extraCompanyPreferences.getRepairStore()) && extraCompanyPreferences.getRepairStore().equals(productDefaultWarehouseID))) {
                                            failureMsg += "Can not use QA or Repair warehouse as default warehouse.";
                                        }
                                    } else {
                                        if (masterPreference.equalsIgnoreCase("2") && isIswarehouseforproduct) {
                                            Store store = new Store();
                                            store.setStoreType(storeService.getStoreType(0));//Set Store type to warehouse
                                            store.setAbbreviation(productDefaultWarehouseName);
                                            store.setDescription(productDefaultWarehouseName);
                                            store.setCcDateAllow(false);//set Default False
                                            store.setSmccAllow(false);//set Default False
//                                            KwlReturnObject jeresult = accountingHandlerDAOobj.getObject(User.class.getName(), userId);
//                                            User user = (User) jeresult.getEntityList().get(0);
                                            store.setCreatedBy(user);
                                            Set<User> userSet = new HashSet<>();
                                            userSet.add(user);
                                            Set<User> executiveSet = new HashSet<>();
                                            executiveSet.add(user);
                                            store.setCompany(user.getCompany());
                                            store.setStoreManagerSet(userSet);
                                            store.setStoreExecutiveSet(executiveSet);
                                            storeService.addStore(user, store);
                                            productDefaultWarehouseID = store.getId();
                                            
                                            refData.put(productDefaultWarehouseName, storeService.getERPWarehouse(productDefaultWarehouseID));// Ref Optimization related code. 
                                        } else {
                                            if (masterPreference.equalsIgnoreCase("1")) {
                                                productDefaultWarehouseID = null;
                                            } else {
                                                if (isIswarehouseforproduct) {
                                                    invalidColumn.put((Integer) columnConfig.get("warehouseName"), "Invalid");
                                                    failureMsg += "Default Warehouse is not found for " + productDefaultWarehouseName + ".";
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        } else if(!updateExistingRecordFlag) {
                            productDefaultWarehouseID = null;
                        }

                        //ERP-34463
                        if(!StringUtil.isNullOrEmpty(productDefaultWarehouseID) && !isIswarehouseforproduct){
                            isIswarehouseforproduct=true;
                        }
                        if(!StringUtil.isNullOrEmpty(productDefaultLocationID) && !isIslocationforproduct){
                            isIslocationforproduct=true;
                        }
                        if((!isIswarehouseforproduct && isIslocationforproduct) || (!isIslocationforproduct && isIswarehouseforproduct)){
                            isIswarehouseforproduct=true;
                            isIslocationforproduct=true;
                        }

                        Boolean isSyncable = false;
                        if (columnConfig.containsKey("syncable")) {
                            Cell cell = row.getCell((Integer) columnConfig.get("syncable"));

                            if (cell != null && cell.getCellType() != Cell.CELL_TYPE_BLANK) {
                                String productMakeAvailableInOtherApp = importHandler.getCellValue(cell);//cell.getStringCellValue().trim();
                                if (productMakeAvailableInOtherApp.equalsIgnoreCase("T")) {
                                    isSyncable = true;
                                } else if (productMakeAvailableInOtherApp.equalsIgnoreCase("F")) {
                                    isSyncable = false;
                                } else {
                                    invalidColumn.put((Integer) columnConfig.get("syncable"), "Invalid");
                                    failureMsg += "Format you entered is not correct for Make available in other application. It should be like \"T\" or \"F\".";
                                }
                            }
                        }

                        Boolean isMultiUOM = false;
                        if (columnConfig.containsKey("multiuom")) {
                            Cell cell = row.getCell((Integer) columnConfig.get("multiuom"));

                            if (cell != null && cell.getCellType() != Cell.CELL_TYPE_BLANK) {
                                String multipleUOM = importHandler.getCellValue(cell);//cell.getStringCellValue().trim();
                                if (multipleUOM.equalsIgnoreCase("T")) {
                                    isMultiUOM = true;
                                } else if (multipleUOM.equalsIgnoreCase("F")) {
                                    isMultiUOM = false;
                                } else {
                                    invalidColumn.put((Integer) columnConfig.get("multiuom"), "Invalid");
                                    failureMsg += "Format you entered is not correct for Multiple UOM. It should be like \"T\" or \"F\".";
                                }
                            }
                        }
                        
                        if (!productTypeID.equals(Producttype.SERVICE) && isIslocationforproduct && StringUtil.isNullOrEmpty(productDefaultLocationID) && (!updateExistingRecordFlag || (newProductAddinUpdateCase && updateExistingRecordFlag))) {
                            invalidColumn.put((Integer) columnConfig.get("locationName"), "Invalid");
                            failureMsg += "Location is activated but Default Location Value is not Provided.";
                        }

                        Boolean isIsSerialForProduct = false;
                        if (!(productTypeID.equals(Producttype.SERVICE) || productTypeID.equals(Producttype.NON_INVENTORY_PART)) && columnConfig.containsKey(Constants.ACTIVATE_SERIAL_NO) && companyAccountPreferences.isIsSerialCompulsory()) {
                            Cell cell = row.getCell((Integer) columnConfig.get(Constants.ACTIVATE_SERIAL_NO));
                            if (cell != null && cell.getCellType() != Cell.CELL_TYPE_BLANK) {
                                String IsSerialForProduct = importHandler.getCellValue(cell);//cell.getStringCellValue().trim();
                                if (IsSerialForProduct.equalsIgnoreCase("T")) {
                                    isIsSerialForProduct = true;
                                } else if (IsSerialForProduct.equalsIgnoreCase("F")) {
                                    isIsSerialForProduct = false;
                                } else {
                                    invalidColumn.put((Integer) columnConfig.get(Constants.ACTIVATE_SERIAL_NO), "Invalid");
                                    failureMsg += "Format you entered is not correct for Activate Serial No. It should be like \"T\" or \"F\".";
                                }
                            }
                        }
                        
                        if (!productTypeID.equals(Producttype.SERVICE) && isIswarehouseforproduct && StringUtil.isNullOrEmpty(productDefaultWarehouseID) && (!updateExistingRecordFlag || (newProductAddinUpdateCase && updateExistingRecordFlag))) {
                            invalidColumn.put((Integer) columnConfig.get("warehouseName"), "Invalid");
                            failureMsg += "Warehouse is activated but Default Warehouse Value is not Provided.";
                        }

                        Boolean isIsBatchForProduct = false;
                        if (!(productTypeID.equals(Producttype.SERVICE) || productTypeID.equals(Producttype.NON_INVENTORY_PART)) && columnConfig.containsKey(Constants.ACTIVATE_BATCH) && companyAccountPreferences.isIsBatchCompulsory()) {
                            Cell cell = row.getCell((Integer) columnConfig.get(Constants.ACTIVATE_BATCH));
                            if (cell != null && cell.getCellType() != Cell.CELL_TYPE_BLANK) {
                                String IsBatchForProduct = importHandler.getCellValue(cell);//cell.getStringCellValue().trim();
                                if (IsBatchForProduct.equalsIgnoreCase("T")) {
                                    isIsBatchForProduct = true;
                                } else if (IsBatchForProduct.equalsIgnoreCase("F")) {
                                    isIsBatchForProduct = false;
                                } else {
                                    invalidColumn.put((Integer) columnConfig.get(Constants.ACTIVATE_BATCH), "Invalid");
                                    failureMsg += "Format you entered is not correct for Activate Batches. It should be like \"T\" or \"F\".";
                                }
                            }
                        }

                        Boolean isIsRowForProduct = false;
                        if (!(productTypeID.equals(Producttype.SERVICE) || productTypeID.equals(Producttype.NON_INVENTORY_PART)) && columnConfig.containsKey(Constants.ACTIVATE_ROW) && companyAccountPreferences.isIsrowcompulsory()) {
                            Cell cell = row.getCell((Integer) columnConfig.get(Constants.ACTIVATE_ROW));
                            if (cell != null && cell.getCellType() != Cell.CELL_TYPE_BLANK) {
                                String IsRowForProduct = importHandler.getCellValue(cell);//cell.getStringCellValue().trim();
                                if (IsRowForProduct.equalsIgnoreCase("T")) {
                                    isIsRowForProduct = true;
                                } else if (IsRowForProduct.equalsIgnoreCase("F")) {
                                    isIsRowForProduct = false;
                                } else {
                                    invalidColumn.put((Integer) columnConfig.get(Constants.ACTIVATE_ROW), "Invalid");
                                    failureMsg += "Format you entered is not correct for Activate Row. It should be like \"T\" or \"F\".";
                                }
                            }
                        }
                        Boolean isIsRackForProduct = false;
                        if (!(productTypeID.equals(Producttype.SERVICE) || productTypeID.equals(Producttype.NON_INVENTORY_PART)) && columnConfig.containsKey(Constants.ACTIVATE_RACK) && companyAccountPreferences.isIsrackcompulsory()) {
                            Cell cell = row.getCell((Integer) columnConfig.get(Constants.ACTIVATE_RACK));
                            if (cell != null && cell.getCellType() != Cell.CELL_TYPE_BLANK) {
                                String IsRackForProduct = importHandler.getCellValue(cell);//cell.getStringCellValue().trim();
                                if (IsRackForProduct.equalsIgnoreCase("T")) {
                                    isIsRackForProduct = true;
                                } else if (IsRackForProduct.equalsIgnoreCase("F")) {
                                    isIsRackForProduct = false;
                                } else {
                                    invalidColumn.put((Integer) columnConfig.get(Constants.ACTIVATE_RACK), "Invalid");
                                    failureMsg += "Format you entered is not correct for Activate Rack. It should be like \"T\" or \"F\".";
                                }
                            }
                        }
                        Boolean isIsBinForProduct = false;
                        if (!(productTypeID.equals(Producttype.SERVICE) || productTypeID.equals(Producttype.NON_INVENTORY_PART)) && columnConfig.containsKey(Constants.ACTIVATE_BIN) && companyAccountPreferences.isIsbincompulsory()) {
                            Cell cell = row.getCell((Integer) columnConfig.get(Constants.ACTIVATE_BIN));
                            if (cell != null && cell.getCellType() != Cell.CELL_TYPE_BLANK) {
                                String IsBinForProduct = importHandler.getCellValue(cell);//cell.getStringCellValue().trim();
                                if (IsBinForProduct.equalsIgnoreCase("T")) {
                                    isIsBinForProduct = true;
                                } else if (IsBinForProduct.equalsIgnoreCase("F")) {
                                    isIsBinForProduct = false;
                                } else {
                                    invalidColumn.put((Integer) columnConfig.get(Constants.ACTIVATE_BIN), "Invalid");
                                    failureMsg += "Format you entered is not correct for Activate Bin. It should be like \"T\" or \"F\".";
                                }
                            }
                        }

                        String wipoffset = "";
                        if (columnConfig.containsKey("wipoffset")) {
                            Cell cell = row.getCell((Integer) columnConfig.get("wipoffset"));
                            if (cell != null) {
                                wipoffset = importHandler.getCellValue(cell);//cell.getStringCellValue().trim();
                            }
                        }

                        String inventoryoffset = "";
                        if (columnConfig.containsKey("inventoryoffset")) {
                            Cell cell = row.getCell((Integer) columnConfig.get("inventoryoffset"));
                            if (cell != null) {
                                inventoryoffset = importHandler.getCellValue(cell);//cell.getStringCellValue().trim();
                            }
                        }

                        String hscode = "";
                        if (columnConfig.containsKey("hscode")) {
                            Cell cell = row.getCell((Integer) columnConfig.get("hscode"));
                            if (cell != null) {
                                hscode = importHandler.getCellValue(cell);//cell.getStringCellValue().trim();
                            }
                        }
                        String additionalfreetext = "";
                        if (columnConfig.containsKey("additionalfreetext")) {
                            Cell cell = row.getCell((Integer) columnConfig.get("additionalfreetext"));
                            if (cell != null) {
                                additionalfreetext = importHandler.getCellValue(cell);//cell.getStringCellValue().trim();
                            }
                        }
                        String itemcolor = "";
                        if (columnConfig.containsKey("itemcolor")) {
                            Cell cell = row.getCell((Integer) columnConfig.get("itemcolor"));
                            if (cell != null) {
                                itemcolor = importHandler.getCellValue(cell);//cell.getStringCellValue().trim();
                            }
                        }
                        String alternateproduct = "";
                        if (columnConfig.containsKey("alternateproduct")) {
                            Cell cell = row.getCell((Integer) columnConfig.get("alternateproduct"));
                            if (cell != null) {
                                alternateproduct = importHandler.getCellValue(cell);//cell.getStringCellValue().trim();
                            }
                        }
                        String purchasemfg = "";
                        if (columnConfig.containsKey("purchasemfg")) {
                            Cell cell = row.getCell((Integer) columnConfig.get("purchasemfg"));
                            if (cell != null) {
                                purchasemfg = importHandler.getCellValue(cell);//cell.getStringCellValue().trim();
                            }
                        }
                        String catalogno = "";
                        if (columnConfig.containsKey("catalogno")) {
                            Cell cell = row.getCell((Integer) columnConfig.get("catalogno"));
                            if (cell != null) {
                                catalogno = importHandler.getCellValue(cell);//cell.getStringCellValue().trim();
                            }
                        }
                        String barcode = "";
                        if (columnConfig.containsKey("barcode")) {
                            Cell cell = row.getCell((Integer) columnConfig.get("barcode"));
                            if (cell != null) {
                                barcode = importHandler.getCellValue(cell);//cell.getStringCellValue().trim();
                            }
                        }
                        String supplier = "";
                        if (columnConfig.containsKey("supplier")) {
                            Cell cell = row.getCell((Integer) columnConfig.get("supplier"));
                            if (cell != null) {
                                supplier = importHandler.getCellValue(cell);//cell.getStringCellValue().trim();
                            }
                        }
                        String additionaldesc = "";
                        if (columnConfig.containsKey("additionaldesc")) {
                            Cell cell = row.getCell((Integer) columnConfig.get("additionaldesc"));
                            if (cell != null) {
                                additionaldesc = importHandler.getCellValue(cell);//cell.getStringCellValue().trim();
                            }
                        }
                        String descinforeign = "";
                        if (columnConfig.containsKey("descinforeign")) {
                            Cell cell = row.getCell((Integer) columnConfig.get("descinforeign"));
                            if (cell != null) {
                                descinforeign = importHandler.getCellValue(cell);//cell.getStringCellValue().trim();
                            }
                        }
                        String licensecode = "";
                        if (columnConfig.containsKey("licensecode")) {
                            Cell cell = row.getCell((Integer) columnConfig.get("licensecode"));
                            if (cell != null) {
                                licensecode = importHandler.getCellValue(cell);//cell.getStringCellValue().trim();
                            }
                        }
                        String itemgroup = "";
                        if (columnConfig.containsKey("itemgroup")) {
                            Cell cell = row.getCell((Integer) columnConfig.get("itemgroup"));
                            if (cell != null) {
                                itemgroup = importHandler.getCellValue(cell);//cell.getStringCellValue().trim();
                            }
                        }
                        String pricelist = "";
                        if (columnConfig.containsKey("pricelist")) {
                            Cell cell = row.getCell((Integer) columnConfig.get("pricelist"));
                            if (cell != null) {
                                pricelist = importHandler.getCellValue(cell);//cell.getStringCellValue().trim();
                            }
                        }
                        String shippingtype = "";
                        if (columnConfig.containsKey("shippingtype")) {
                            Cell cell = row.getCell((Integer) columnConfig.get("shippingtype"));
                            if (cell != null) {
                                shippingtype = importHandler.getCellValue(cell);//cell.getStringCellValue().trim();
                            }
                        }
                        Boolean recyclable = false;
                        if (columnConfig.containsKey("recyclable")) {
                            Cell cell = row.getCell((Integer) columnConfig.get("recyclable"));
                            if (cell != null && cell.getCellType() != Cell.CELL_TYPE_BLANK) {
                                String isRecyclable = importHandler.getCellValue(cell);//cell.getStringCellValue().trim();
                                if (isRecyclable.equalsIgnoreCase("T")) {
                                    recyclable = true;
                                } else if (isRecyclable.equalsIgnoreCase("F")) {
                                    recyclable = false;
                                } else {
                                    invalidColumn.put((Integer) columnConfig.get("recyclable"), "Invalid");
                                    failureMsg += "Format you entered is not correct for Is Recyclable. It should be like \"T\" or \"F\".";
                                }
                            }
                        }
                        Boolean qaenable = false;
                        if (columnConfig.containsKey("qaenable")) {
                            Cell cell = row.getCell((Integer) columnConfig.get("qaenable"));
                            if (cell != null && cell.getCellType() != Cell.CELL_TYPE_BLANK) {
                                String isQaenable = importHandler.getCellValue(cell);//cell.getStringCellValue().trim();
                                if (isQaenable.equalsIgnoreCase("T")) {
                                    qaenable = true;
                                } else if (isQaenable.equalsIgnoreCase("F")) {
                                    qaenable = false;
                                } else {
                                    invalidColumn.put((Integer) columnConfig.get("qaenable"), "Invalid");
                                    failureMsg += "Format you entered is not correct for QA Enable. It should be like \"T\" or \"F\".";
                                }
                            }
                        }
                        Boolean isknittingitem = false;
                        if (columnConfig.containsKey("isknittingitem")) {
                            Cell cell = row.getCell((Integer) columnConfig.get("isknittingitem"));
                            if (cell != null && cell.getCellType() != Cell.CELL_TYPE_BLANK) {
                                String isIsknittingitem = importHandler.getCellValue(cell);//cell.getStringCellValue().trim();
                                if (isIsknittingitem.equalsIgnoreCase("T")) {
                                    isknittingitem = true;
                                } else if (isIsknittingitem.equalsIgnoreCase("F")) {
                                    isknittingitem = false;
                                } else {
                                    invalidColumn.put((Integer) columnConfig.get("isknittingitem"), "Invalid");
                                    failureMsg += "Format you entered is not correct for Is Kitting item. It should be like \"T\" or \"F\".";
                                }
                            }
                        }
                        Boolean isactive = false;
                        if (columnConfig.containsKey("isactive")) {
                            Cell cell = row.getCell((Integer) columnConfig.get("isactive"));
                            if (cell != null && cell.getCellType() != Cell.CELL_TYPE_BLANK) {
                                String isIsactive = importHandler.getCellValue(cell);//cell.getStringCellValue().trim();
                                if (isIsactive.equalsIgnoreCase("T")) {
                                    isactive = true;
                                } else if (isIsactive.equalsIgnoreCase("F")) {
                                    isactive = false;
                                } else {
                                    invalidColumn.put((Integer) columnConfig.get("isactive"), "Invalid");
                                    failureMsg += "Format you entered is not correct for Is Active. It should be like \"T\" or \"F\".";
                                }
                            }
                        }
                        Boolean blockloosesell = false;
                        if (columnConfig.containsKey("blockloosesell")) {
                            Cell cell = row.getCell((Integer) columnConfig.get("blockloosesell"));
                            if (cell != null && cell.getCellType() != Cell.CELL_TYPE_BLANK) {
                                String isBlockloosesell = importHandler.getCellValue(cell);//cell.getStringCellValue().trim();
                                if (isBlockloosesell.equalsIgnoreCase("T")) {
                                    blockloosesell = true;
                                } else if (isBlockloosesell.equalsIgnoreCase("F")) {
                                    blockloosesell = false;
                                } else {
                                    invalidColumn.put((Integer) columnConfig.get("blockloosesell"), "Invalid");
                                    failureMsg += "Format you entered is not correct for Block Loose Selling. It should be like \"T\" or \"F\".";
                                }
                            }
                        }
                        String itemsalesvolume = "";
                        if (columnConfig.containsKey("itemsalesvolume")) {
                            Cell cell = row.getCell((Integer) columnConfig.get("itemsalesvolume"));
                            if (cell != null) {
                                itemsalesvolume = importHandler.getCellValue(cell);//
                                if (!StringUtil.isNullOrEmpty(itemsalesvolume)) {
                                    try {
                                        Object vDataValue = Double.parseDouble(itemsalesvolume);
                                    } catch (Exception ex) {
                                        if (masterPreference.equals("1")) {
                                            itemsalesvolume = "";
                                        } else {
                                            invalidColumn.put((Integer) columnConfig.get("itemsalesvolume"), "Invalid");
                                            failureMsg += "Incorrect numeric value for item Sales Volume, Please ensure that value type of item Sales Volume matches with the item Sales Volume.";
                                        }
                                    }
                                }
                            }
                        }
                        String productweight = "0";
                        if (columnConfig.containsKey("productweight")) {
                            Cell cell = row.getCell((Integer) columnConfig.get("productweight"));
                            if (cell != null) {
                                productweight = importHandler.getCellValue(cell);//
                                if (!StringUtil.isNullOrEmpty(productweight)) {
                                    try {
                                        Object vDataValue = Double.parseDouble(productweight);
                                    } catch (Exception ex) {
                                        if (masterPreference.equals("1")) {
                                            productweight = "0";
                                        } else {
                                            invalidColumn.put((Integer) columnConfig.get("productweight"), "Invalid");
                                            failureMsg += "Incorrect numeric value for product weight, Please ensure that value type of product weight matches with the product weight.";
                                        }
                                    }
                                }
                            }
                        }
                       
                        String productWeightIncludingPakagingPerStockUom = "0";
                        if (columnConfig.containsKey("productweightincludingpakagingperstockuom") && columnConfig.get("productweightincludingpakagingperstockuom") != null) {
                            Cell cell = row.getCell((Integer) columnConfig.get("productweightincludingpakagingperstockuom"));
                            if (cell != null) {
                                productWeightIncludingPakagingPerStockUom = importHandler.getCellValue(cell);//
                                if (!StringUtil.isNullOrEmpty(productWeightIncludingPakagingPerStockUom)) {
                                    try {
                                        Object vDataValue = Double.parseDouble(productWeightIncludingPakagingPerStockUom);
                                    } catch (Exception ex) {
                                        if (masterPreference.equals("1")) {
                                            productWeightIncludingPakagingPerStockUom = "0";
                                        } else {
                                            invalidColumn.put((Integer) columnConfig.get("productweightincludingpakagingperstockuom"), "Invalid");
                                            failureMsg += messageSource.getMessage("acc.productimport.invalid.productweightincludingpackagingperstockuom", null, locale);
                                        }
                                    }
                                }
                            }
                        }
                        
                        String productWeightPerStockUom = "0";
                        if (columnConfig.containsKey("productweightperstockuom") && columnConfig.get("productweightperstockuom") != null) {
                            Cell cell = row.getCell((Integer) columnConfig.get("productweightperstockuom"));
                            if (cell != null) {
                                productWeightPerStockUom = importHandler.getCellValue(cell);//
                                if (!StringUtil.isNullOrEmpty(productWeightPerStockUom)) {
                                    try {
                                        Object vDataValue = Double.parseDouble(productWeightPerStockUom);
                                    } catch (Exception ex) {
                                        if (masterPreference.equals("1")) {
                                            productWeightPerStockUom = "0";
                                        } else {
                                            invalidColumn.put((Integer) columnConfig.get("productweightperstockuom"), "Invalid");
                                            failureMsg += failureMsg += messageSource.getMessage("acc.productimport.invalid.productweightperstockuom", null, locale);
                                        }
                                    }
                                }
                            }
                        }
                        String itemsaleswidth = "";
                        if (columnConfig.containsKey("itemsaleswidth")) {
                            Cell cell = row.getCell((Integer) columnConfig.get("itemsaleswidth"));
                            if (cell != null) {
                                itemsaleswidth = importHandler.getCellValue(cell);//
                                if (!StringUtil.isNullOrEmpty(itemsaleswidth)) {
                                    try {
                                        Object vDataValue = Double.parseDouble(itemsaleswidth);
                                    } catch (Exception ex) {
                                        if (masterPreference.equals("1")) {
                                            itemsaleswidth = "";
                                        } else {
                                            invalidColumn.put((Integer) columnConfig.get("itemsaleswidth"), "Invalid");
                                            failureMsg += "Incorrect numeric value for Item Sales Width, Please ensure that value type of Item Sales Width matches with the Item Sales Width.";
                                        }
                                    }
                                }
                            }
                        }
                        String itemsalesheight = "";
                        if (columnConfig.containsKey("itemsalesheight")) {
                            Cell cell = row.getCell((Integer) columnConfig.get("itemsalesheight"));
                            if (cell != null) {
                                itemsalesheight = importHandler.getCellValue(cell);//
                                if (!StringUtil.isNullOrEmpty(itemsalesheight)) {
                                    try {
                                        Object vDataValue = Double.parseDouble(itemsalesheight);
                                    } catch (Exception ex) {
                                        if (masterPreference.equals("1")) {
                                            itemsalesheight = "";
                                        } else {
                                            invalidColumn.put((Integer) columnConfig.get("itemsalesheight"), "Invalid");
                                            failureMsg += "Incorrect numeric value for Item Sales Height, Please ensure that value type of Item Sales Height matches with the Item Sales Height.";
                                        }
                                    }
                                }
                            }
                        }
                        String itemwidth = "";
                        if (columnConfig.containsKey("itemwidth")) {
                            Cell cell = row.getCell((Integer) columnConfig.get("itemwidth"));
                            if (cell != null) {
                                itemwidth = importHandler.getCellValue(cell);//
                                if (!StringUtil.isNullOrEmpty(itemwidth)) {
                                    try {
                                        Object vDataValue = Double.parseDouble(itemwidth);
                                    } catch (Exception ex) {
                                        if (masterPreference.equals("1")) {
                                            itemwidth = "";
                                        } else {
                                            invalidColumn.put((Integer) columnConfig.get("itemwidth"), "Invalid");
                                            failureMsg += "Incorrect numeric value for Item Width, Please ensure that value type of Item Width matches with the Item Width.";
                                        }
                                    }
                                }
                            }
                        }
                         String itemlength = "";
                        if (columnConfig.containsKey("itemlength")) {
                            Cell cell = row.getCell((Integer) columnConfig.get("itemlength"));
                            if (cell != null) {
                                itemlength = importHandler.getCellValue(cell);//
                                if (!StringUtil.isNullOrEmpty(itemlength)) {
                                    try {
                                        Object vDataValue = Double.parseDouble(itemlength);
                                        if(itemlength.length()>11) {
                                            invalidColumn.put((Integer) columnConfig.get("itemlength"), "Invalid");
                                            failureMsg += "Data length greater than 11 for column Item Length";
                                        }
                                    } catch (Exception ex) {
                                        if (masterPreference.equals("1")) {
                                            itemlength = "";
                                        } else {
                                            invalidColumn.put((Integer) columnConfig.get("itemlength"), "Invalid");
                                            failureMsg += "Incorrect numeric value for Item Length, Please ensure that value type of Item Length matches with the Item Length.";
                                        }
                                        }
                                    }
                                }
                            }
                         String itemheight = "";
                        if (columnConfig.containsKey("itemheight")) {
                            Cell cell = row.getCell((Integer) columnConfig.get("itemheight"));
                            if (cell != null) {
                                itemheight = importHandler.getCellValue(cell);//
                                if (!StringUtil.isNullOrEmpty(itemheight)) {
                                    try {
                                        Object vDataValue = Double.parseDouble(itemheight);
                                        if(itemheight.length()>11) {
                                            invalidColumn.put((Integer) columnConfig.get("itemheight"), "Invalid");
                                            failureMsg += "Data length greater than 11 for column Item Height";
                                        }
                                    } catch (Exception ex) {
                                        if (masterPreference.equals("1")) {
                                            itemheight = "";
                                        } else {
                                            invalidColumn.put((Integer) columnConfig.get("itemheight"), "Invalid");
                                            failureMsg += "Incorrect numeric value for Item Height, Please ensure that value type of Item Height matches with the Item Height.";
                                        }
                                    }
                                }
                            }
                        }
                        String itemvolume = "";
                        if (columnConfig.containsKey("itemvolume")) {
                            Cell cell = row.getCell((Integer) columnConfig.get("itemvolume"));
                            if (cell != null) {
                                itemvolume = importHandler.getCellValue(cell);//
                                if (!StringUtil.isNullOrEmpty(itemvolume)) {
                                    try {
                                        Object vDataValue = Double.parseDouble(itemvolume);
                                    } catch (Exception ex) {
                                        if (masterPreference.equals("1")) {
                                            itemvolume = "";
                                        } else {
                                            invalidColumn.put((Integer) columnConfig.get("itemvolume"), "Invalid");
                                            failureMsg += "Incorrect numeric value for Item Width, Please ensure that value type of Item Width matches with the Item Width.";
                                        }
                                    }
                                }
                            }
                        }
                        String itempurchasewidth = "";
                        if (columnConfig.containsKey("itempurchasewidth")) {
                            Cell cell = row.getCell((Integer) columnConfig.get("itempurchasewidth"));
                            if (cell != null) {
                                itempurchasewidth = importHandler.getCellValue(cell);//
                                if (!StringUtil.isNullOrEmpty(itempurchasewidth)) {
                                    try {
                                        Object vDataValue = Double.parseDouble(itempurchasewidth);
                                    } catch (Exception ex) {
                                        if (masterPreference.equals("1")) {
                                            itempurchasewidth = "";
                                        } else {
                                            invalidColumn.put((Integer) columnConfig.get("itempurchasewidth"), "Invalid");
                                            failureMsg += "Incorrect numeric value for Item Purchase Width, Please ensure that value type of Item Purchase Width matches with the Item Purchase Width.";
                                        }
                                    }
                                }
                            }
                        }
                        String itempurchasevolume = "";
                        if (columnConfig.containsKey("itempurchasevolume")) {
                            Cell cell = row.getCell((Integer) columnConfig.get("itempurchasevolume"));
                            if (cell != null) {
                                itempurchasevolume = importHandler.getCellValue(cell);//
                                if (!StringUtil.isNullOrEmpty(itempurchasevolume)) {
                                    try {
                                        Object vDataValue = Double.parseDouble(itempurchasevolume);
                                    } catch (Exception ex) {
                                        if (masterPreference.equals("1")) {
                                            itempurchasevolume = "";
                                        } else {
                                            invalidColumn.put((Integer) columnConfig.get("itempurchasevolume"), "Invalid");
                                            failureMsg += "Incorrect numeric value for Item Purchase Volume, Please ensure that value type of Item Purchase Volume matches with the Item Purchase Volume.";
                                        }
                                    }
                                }
                            }
                        }
                        String itempurchaselength = "0";
                        if (columnConfig.containsKey("itempurchaselength")) {
                            Cell cell = row.getCell((Integer) columnConfig.get("itempurchaselength"));
                            if (cell != null) {
                                itempurchaselength = importHandler.getCellValue(cell);//

                                if (!StringUtil.isNullOrEmpty(itempurchaselength)) {
                                    try {
                                        Object vDataValue = Double.parseDouble(itempurchaselength);
                                    } catch (Exception ex) {
                                        if (masterPreference.equals("1")) {
                                            itempurchaselength = "0";
                                        } else {
                                            invalidColumn.put((Integer) columnConfig.get("itempurchaselength"), "Invalid");
                                            failureMsg += "Incorrect numeric value for Item Purchase Length, Please ensure that value type of Item Purchase Length matches with the Item Purchase Length.";
                                        }
                                    }
                                }
                            }
                        }
                        String qaleadtimeindays = "0";
                        if (columnConfig.containsKey("qaleadtimeindays")) {
                            Cell cell = row.getCell((Integer) columnConfig.get("qaleadtimeindays"));
                            if (cell != null && cell.getCellType() != Cell.CELL_TYPE_BLANK) {
                                qaleadtimeindays = importHandler.getCellValue(cell);//

                                if (!StringUtil.isNullOrEmpty(qaleadtimeindays)) {
                                    try {
                                        Double d = Double.parseDouble(qaleadtimeindays);
                                        int intValue = d.intValue();
                                        qaleadtimeindays = Integer.toString(intValue);
                                    } catch (Exception ex) {
                                        if (masterPreference.equals("1")) {
                                            qaleadtimeindays = "0";
                                        } else {
                                            invalidColumn.put((Integer) columnConfig.get("qaleadtimeindays"), "Invalid");
                                            failureMsg += "Incorrect numeric value for QA Lead Time(in days), Please ensure that value type of QA Lead Time(in days) matches with the QA Lead Time(in days).";
                                        }
                                    }
                                }
                            }
                        }
                        String reusabilitycount = "";
                        if (columnConfig.containsKey("reusabilitycount")) {
                            Cell cell = row.getCell((Integer) columnConfig.get("reusabilitycount"));
                            if (cell != null && cell.getCellType() != Cell.CELL_TYPE_BLANK) {
                                reusabilitycount = importHandler.getCellValue(cell);//

                                if (!StringUtil.isNullOrEmpty(reusabilitycount)) {
                                    try {
                                        Double d = Double.parseDouble(reusabilitycount);
                                        int intValue = d.intValue();
                                        reusabilitycount = Integer.toString(intValue);
                                    } catch (Exception ex) {
                                        if (masterPreference.equals("1")) {
                                            reusabilitycount = "0";
                                        } else {
                                            invalidColumn.put((Integer) columnConfig.get("reusabilitycount"), "Invalid");
                                            failureMsg += "Incorrect numeric value for Re-usability Count, Please ensure that value type of Re-usability Count matches with the Re-usability Count.";
                                        }
                                    }
                                }
                            }
                        }
                        
                                
                        ItemReusability itemReusability = null;
                        if (columnConfig.containsKey("itemreusability")) {
                            Cell cell = row.getCell((Integer) columnConfig.get("itemreusability"));
                            if (cell != null && cell.getCellType() != Cell.CELL_TYPE_BLANK) {
                                String itemReusabilityStr = importHandler.getCellValue(cell);
                                if (!StringUtil.isNullOrEmpty(itemReusabilityStr)) {
                                    try {
                                        if (itemReusabilityStr.equalsIgnoreCase(Constants.CONSUMABLE)) {
                                            itemReusability = ItemReusability.DISPOSABLE;
                                        } else if (itemReusabilityStr.equalsIgnoreCase(Constants.REUSABLE)) {
                                            itemReusability = ItemReusability.REUSABLE;
                                        } else {
                                            invalidColumn.put((Integer) columnConfig.get("itemreusability"), "Invalid");
                                            failureMsg += "Incorrect value for item Reusability, Please ensure that value type of Item Reusability matches with the Item Reusability.";
                                        }   
                                    } catch (Exception ex) {
                                        if (masterPreference.equals("1")) {
                                            itemReusability = ItemReusability.REUSABLE;
                                        } else {
                                            invalidColumn.put((Integer) columnConfig.get("itemreusability"), "Invalid");
                                            failureMsg += "Incorrect value for item Reusability, Please ensure that value type of Item Reusability matches with the Item Reusability.";
                                        }
                                    }
                                }
                            }
                        }
                        
                        Boolean vatonmrp = isVatApplicable;
                        if (columnConfig.containsKey("vatonmrp") && indianCheck && isVatApplicable) {
                            Cell cell = row.getCell((Integer) columnConfig.get("vatonmrp"));
                            if (cell != null && cell.getCellType() != Cell.CELL_TYPE_BLANK) {
                                String vatonmrpTemp = importHandler.getCellValue(cell);//

                                if (!StringUtil.isNullOrEmpty(vatonmrpTemp)) {
                                    try {
                                        vatonmrp =(vatonmrpTemp.equalsIgnoreCase("T") || vatonmrpTemp.equalsIgnoreCase("True"));
                                    } catch (Exception ex) {
                                        if (masterPreference.equals("1")) {
                                            vatonmrp = isVatApplicable; // False means UI Side Colapse 
                                        } else {
                                            invalidColumn.put((Integer) columnConfig.get("mrprate"), "Invalid");
                                            failureMsg += "VAT Details Activated  is not found";
                                        }
                                    }
                                }
                            }
                        }
                        Boolean rcmapplicable = null;
                        if (columnConfig.containsKey("rcmapplicable") && indianCheck) {
                            Cell cell = row.getCell((Integer) columnConfig.get("rcmapplicable"));
                            if (cell != null && cell.getCellType() != Cell.CELL_TYPE_BLANK) {
                                String vatonmrpTemp = importHandler.getCellValue(cell);//
                                if (!StringUtil.isNullOrEmpty(vatonmrpTemp)) {
                                    try {
                                        rcmapplicable =(vatonmrpTemp.equalsIgnoreCase("T") || vatonmrpTemp.equalsIgnoreCase("True"));
                                    } catch (Exception ex) {
                                       
                                    }
                                }
                            }
                        }
                        String tariffName = "";
                        if (!productTypeID.equals(Producttype.SERVICE) && columnConfig.containsKey("tariffname") && indianCheck) {
                            Cell cell = row.getCell((Integer) columnConfig.get("tariffname"));
                            if (cell != null && cell.getCellType() != Cell.CELL_TYPE_BLANK) {
                                tariffName = importHandler.getCellValue(cell);
                            } else {
                               if (masterPreference.equalsIgnoreCase("1")) {
                                   tariffName="";
                                }else{
                                   failureMsg += "Tariff Name column is not found.";
                               }
                            }
                        }
                        
                        String hsncode = "";
                        if (columnConfig.containsKey("hsncode") && indianCheck && !productTypeID.equals(Producttype.SERVICE)) {
                            Cell cell = row.getCell((Integer) columnConfig.get("hsncode"));
                            if (cell != null && cell.getCellType() != Cell.CELL_TYPE_BLANK) {
                                hsncode = importHandler.getCellValue(cell);//

                                if (!StringUtil.isNullOrEmpty(hsncode)) {
                                    try {
                                        Double d = Double.parseDouble(hsncode);
                                        int intValue = d.intValue();
                                        hsncode = Integer.toString(intValue);
                                    } catch (Exception ex) {
                                        if (masterPreference.equals("1")) {
                                            hsncode = "0";
                                        } else {
                                            invalidColumn.put((Integer) columnConfig.get("hsncode"), "Invalid");
                                            failureMsg += "Incorrect numeric value for HSN Code, Please ensure that value type of HSN Code matches with the HSN Code.";
                                        }
                                    }
                                }
                            }else{
                                 if (masterPreference.equals("1")) {
                                    hsncode = "0";
                                } else {
                                    failureMsg += "HSNCode column is not found.";
                                }
                            }
                        }
                        
                        String reportinguomName = "",reportinguomID="";
                        UnitOfMeasure reportinguom=null;
                        if (!productTypeID.equals(Producttype.SERVICE) && columnConfig.containsKey("reportinguom") && indianCheck ) {
                            Cell cell = row.getCell((Integer) columnConfig.get("reportinguom"));
                            if (cell != null && cell.getCellType() != Cell.CELL_TYPE_BLANK) {
                                reportinguomName = importHandler.getCellValue(cell);
                                reportinguom = accProductModuleService.getUOMByName(reportinguomName, companyid);
                                if(reportinguom!=null){
                                    reportinguomID=reportinguom.getID();
                                }
                            }else {
                                if (masterPreference.equalsIgnoreCase("2")) {
                                    HashMap<String, Object> uomMap = new HashMap<String, Object>();
                                    uomMap.put("uomname",StringUtil.DecodeText(reportinguomName));
                                    uomMap.put("uomtype", StringUtil.DecodeText(reportinguomName));
                                    uomMap.put("precision", 0);
                                    uomMap.put("companyid", companyid);

                                    KwlReturnObject uomresult = accUomObj.addUoM(uomMap);
                                    reportinguom = (UnitOfMeasure) uomresult.getEntityList().get(0);
                                    reportinguomID = reportinguom.getID();
                                } else {
                                    if (masterPreference.equalsIgnoreCase("1")) {
                                        reportinguomID = "";
                                    } else {
                                        invalidColumn.put((Integer) columnConfig.get("reportinguom"), "Invalid");
                                        failureMsg += "Reporting UOM  is not found for " + reportinguomName + ".";
                                    }
                                }
                            }
                        }
                        
                        UOMschemaType reportingSchemaType = null;
                        if (!productTypeID.equals(Producttype.SERVICE) && columnConfig.containsKey("reportingschematype") && indianCheck ) {
                            Cell cell = row.getCell((Integer) columnConfig.get("reportingschematype"));
                            if (cell != null && cell.getCellType() != Cell.CELL_TYPE_BLANK) {
                                String uomSchemaTypeName = importHandler.getCellValue(cell);//cell.getStringCellValue().trim();
                                if (!StringUtil.isNullOrEmpty(uomSchemaTypeName)) {
                                    
                                    // Ref Optimization related code. 
                                    Map refData = null;
                                    if (refColumnObjMap.containsKey("uomSchemaType")) {
                                        refData = refColumnObjMap.get("uomSchemaType");
                                    } else {
                                        refData = new HashMap();
                                        refColumnObjMap.put("uomSchemaType", refData);
                                    }
                                    if (refData.containsKey(uomSchemaTypeName)) {
                                        reportingSchemaType = refData.get(uomSchemaTypeName) != null ? (UOMschemaType) refData.get(uomSchemaTypeName) : null;
                                    } else {
                                        reportingSchemaType = getUOMschemaTypeByName(uomSchemaTypeName, companyid);
                                        refData.put(uomSchemaTypeName, reportingSchemaType);
                                    }
                                }
                                 // Ref Optimization related code. 
                                 if (reportingSchemaType == null) {                                        
                                      if (!masterPreference.equalsIgnoreCase("1")) {
                                            invalidColumn.put((Integer) columnConfig.get("uomSchemaTypeName"), "Invalid");
                                            failureMsg += "UOM Schema is not found for " + uomSchemaTypeName;
                                      }
                                    }
                            }
                        }
                        
                        String excisemethod = "";
                        if (!productTypeID.equals(Producttype.SERVICE) && columnConfig.containsKey("excisemethodmain") && indianCheck && isExciseApplicable) {
                            Cell cell = row.getCell((Integer) columnConfig.get("excisemethodmain"));
                            if (cell != null && cell.getCellType() != Cell.CELL_TYPE_BLANK) {
                                excisemethod = importHandler.getCellValue(cell);
                                if (IndiaComplianceConstants.valuationType.containsKey(excisemethod.trim())) { //ERP-28454
                                    excisemethod = IndiaComplianceConstants.valuationType.get(excisemethod.trim());
                                    if(excisemethod.equals("specific")){
                                        failureMsg += excisemethod+" which is not found Valuation Type (1.Ad Valorem Method,2.Quantity,3.MRP (Maximum Retail Price)).";
                                    }
                                }else{
                                    failureMsg += excisemethod+" which is not found Valuation Type (1.Ad Valorem Method,2.Quantity,3.Specific basis,4.MRP (Maximum Retail Price)).";
                                }
                            } else {
                                failureMsg += "Valuation Type column is not found.";
                            }
                        }
                        String vatMethodType = "";
                        if (columnConfig.containsKey("vatMethodType") && indianCheck && vatonmrp) {
                            Cell cell = row.getCell((Integer) columnConfig.get("vatMethodType"));
                            if (cell != null && cell.getCellType() != Cell.CELL_TYPE_BLANK) {
                               String tempData = importHandler.getCellValue(cell);
                               
                                if (IndiaComplianceConstants.valuationType.containsKey(tempData.trim())) { //ERP-28454
                                    vatMethodType = IndiaComplianceConstants.valuationType.get(tempData.trim());
                                    if (vatMethodType.equals("specific")) {
                                        failureMsg += tempData + " which is not found Vat Valuation Type (1.Ad Valorem Method,2.Quantity,3.Specific basis,4.MRP (Maximum Retail Price)).";
                                    }
                                }else{
                                    failureMsg += tempData+" which is not found Vat Valuation Type.(1.Ad Valorem Method,2.Quantity,3.Specific basis,4.MRP (Maximum Retail Price))";
                                }
                            } else {
                                failureMsg += "Vat Valuation Type column is not found.";
                            } 
                        }
                        
                        Date vatAbatementPeriodFromDate=null;
                        if (columnConfig.containsKey("vatAbatementPeriodFromDate") && indianCheck && vatonmrp ) {//when AsofDate header is mapped
                            Cell cell = row.getCell((Integer) columnConfig.get("vatAbatementPeriodFromDate"));
                            if (cell != null) {
                                String stringAsOfDate = importHandler.getCellValue(cell, df);
                                if (!stringAsOfDate.equals("")) {
                                    try {
                                        
                                        vatAbatementPeriodFromDate = df.parse(stringAsOfDate);
                                    } catch (Exception ex) {
                                        if (masterPreference.equalsIgnoreCase("2")) {
                                            invalidColumn.put((Integer) columnConfig.get("vatAbatementPeriodFromDate"), "Invalid");
                                            failureMsg += "Incorrect date format for Applicability Period From, Please specify values in " + excelDF + " format.";
                                        }
                                    }
                                }
                            } 
                        }
                        
                        Date vatAbatementPeriodToDate=null;
                        if (columnConfig.containsKey("vatAbatementPeriodToDate") && indianCheck && vatonmrp) {//when AsofDate header is mapped
                            Cell cell = row.getCell((Integer) columnConfig.get("vatAbatementPeriodToDate"));
                            if (cell != null) {
                                String stringAsOfDate = importHandler.getCellValue(cell, df);
                                if (!stringAsOfDate.equals("")) {
                                    try {
                                        
                                        vatAbatementPeriodToDate = df.parse(stringAsOfDate);
                                    } catch (Exception ex) {
                                        if (masterPreference.equalsIgnoreCase("2")) {
                                            invalidColumn.put((Integer) columnConfig.get("vatAbatementPeriodToDate"), "Invalid");
                                            failureMsg += "Incorrect date format for Applicability Period To, Please specify values in " + excelDF + " format.";
                                        }
                                    }
                                }
                            } 
                        }
                        
                        String vatcommoditycode = "";
                        if (columnConfig.containsKey("vatcommoditycode") && indianCheck && vatonmrp) {
                            Cell cell = row.getCell((Integer) columnConfig.get("vatcommoditycode"));
                            if (cell != null && cell.getCellType() != Cell.CELL_TYPE_BLANK) {
                                String vatcommodityname = importHandler.getCellValue(cell);
                                Map tempData = new HashMap<String, String>();
                                tempData.put("vatcommodityname", vatcommodityname);
                                tempData.put("company", companyid);
                                KwlReturnObject vatCommresult = accProductObj.getVATCommodityCodeByName(tempData);
                                if (vatCommresult.getRecordTotalCount() > 0) {
                                    List list = (ArrayList) vatCommresult.getEntityList();
                                    Iterator itr = list.iterator();
                                    if (itr.hasNext()) {
                                        vatcommoditycode = (String) itr.next();                                         
                                    }
                                } else {
                                    if (masterPreference.equalsIgnoreCase("2")) {
                                        failureMsg += vatcommodityname + " which is not present in system.";
                                    }
                                }
                            }
                        }
                        /**
                         * While Importing product data Validate import "Input Terms" line level term if line level term as tax flag ON
                         */
                        List<String> inputDefaultTerms = new ArrayList<String>();
                        if (extraCompanyPreferences.getLineLevelTermFlag()==1 && columnConfig.containsKey("InputTax")) {
                            Cell cell = row.getCell((Integer) columnConfig.get("InputTax"));
                            if (cell != null && !StringUtil.isNullOrEmpty(cell.getStringCellValue())) {
                                inputDefaultTerms.addAll(Arrays.asList(cell.getStringCellValue().split(","))); // Get Input terms seperated by coma from Import file
                                Map<String, Object> requestData = new HashMap<String, Object>();
                                requestData.put("companyid", requestParams1.get("companyid").toString());
                                requestData.put("colData", cell.getStringCellValue().trim());
                                requestData.put("isOutputTax", false);//ERP-29870
                                List<String> termsList = importDao.getLineLevelTermPresentByName(requestData); // Checking given input terms present in system or not
                                if (termsList.size() > 0) { // If List size is greater than zero it means some terms not presnet in system terms then reject the record
                                    String invalidData = Arrays.toString(termsList.toArray());
                                    failureMsg +=" Input Tax column Data is not valid. Input tax should be present in system: " + invalidData;
                                }
                            }
                        }
                         /**
                         * While Importing product data Validate import "Output Terms" line level term if line level term as tax flag ON
                         */
                        List<String> outputDefaultTerms = new ArrayList<String>();
                        if (extraCompanyPreferences.getLineLevelTermFlag()==1 && columnConfig.containsKey("OutputTax")) {
                            Cell cell = row.getCell((Integer) columnConfig.get("OutputTax"));
                            if (cell != null && !StringUtil.isNullOrEmpty(cell.getStringCellValue())) {
                                outputDefaultTerms.addAll(Arrays.asList(cell.getStringCellValue().split(",")));  // Get Output terms seperated by coma from Import file
                                Map<String, Object> requestData = new HashMap<String, Object>();
                                requestData.put("companyid", requestParams1.get("companyid").toString());
                                requestData.put("colData", cell.getStringCellValue().trim());
                                requestData.put("isOutputTax", true);//ERP-29870
                                List<String> termsList = importDao.getLineLevelTermPresentByName(requestData); // Checking given input terms present in system or not
                                if (termsList.size() > 0) {// If List size is greater than zero it means some terms not presnet in system terms then reject the record
                                    String invalidData = Arrays.toString(termsList.toArray());
                                    failureMsg +=" Output Tax column Data is not valid. Output tax should be present in system: " + invalidData;
                                }
                            }
                        }
                        String natureofStockItem = "";
                        if (!productTypeID.equals(Producttype.SERVICE) && columnConfig.containsKey("natureofStockItem") && indianCheck ) {
                            Cell cell = row.getCell((Integer) columnConfig.get("natureofStockItem"));
                            if (cell != null && cell.getCellType() != Cell.CELL_TYPE_BLANK) {
                                String natureofStockItemname = importHandler.getCellValue(cell);
                                Map tempData = new HashMap<String, String>();
                                tempData.put("natureofStockItemname", natureofStockItemname);
                                tempData.put("company", companyid);
                                KwlReturnObject vatCommresult = accProductObj.getNatureofStockItemCodeByName(tempData);
                                if (vatCommresult.getRecordTotalCount() > 0) {
                                    List list = (ArrayList) vatCommresult.getEntityList();
                                    Iterator itr = list.iterator();
                                    if (itr.hasNext()) {
                                        natureofStockItem = (String) itr.next();                                         
                                    }
                                } else {
                                    failureMsg += natureofStockItemname + " is not found in Types of Goods.";
                                }
                            }
                        }
                        
                        String mrprate = "";
                        if (columnConfig.containsKey("mrprate") && indianCheck && !productTypeID.equals(Producttype.SERVICE)) {
                            Cell cell = row.getCell((Integer) columnConfig.get("mrprate"));
                            if (cell != null && cell.getCellType() != Cell.CELL_TYPE_BLANK) {
                                mrprate = importHandler.getCellValue(cell);//

                                if (!StringUtil.isNullOrEmpty(mrprate)) {
                                    try {
                                        Double d = Double.parseDouble(mrprate);
                                        int intValue = d.intValue();
                                        mrprate = Integer.toString(intValue);
                                    } catch (Exception ex) {
                                        if (masterPreference.equals("1")) {
                                            mrprate = "0";
                                        } else {
                                            invalidColumn.put((Integer) columnConfig.get("mrprate"), "Invalid");
                                            failureMsg += "Incorrect numeric value for MRP for Excise and VAT, Please ensure that value type of MRP for Excise and VAT matches with the MRP for Excise and VAT.";
                                        }
                                    }
                                }
                            }
                        }
                        
                        String serviceTaxCode = "";
                        if (columnConfig.containsKey("serviceTaxCode") && indianCheck ) {
                            Cell cell = row.getCell((Integer) columnConfig.get("serviceTaxCode"));
                            if (cell != null && cell.getCellType() != Cell.CELL_TYPE_BLANK) {
                                serviceTaxCode = importHandler.getCellValue(cell);//

                                if (!StringUtil.isNullOrEmpty(serviceTaxCode)) {
                                    try {
                                        Double d = Double.parseDouble(serviceTaxCode);
                                        int intValue = d.intValue();
                                        serviceTaxCode = Integer.toString(intValue);
                                    } catch (Exception ex) {
                                        if (masterPreference.equals("1")) {
                                            serviceTaxCode = "0";
                                        } else {
                                            invalidColumn.put((Integer) columnConfig.get("serviceTaxCode"), "Invalid");
                                            failureMsg += "Incorrect numeric value for Accounting code (Service), Please ensure that value type of Accounting code (Service) matches with the Accounting code (Service).";
                                        }
                                    }
                                }
                            }
                        }
                        
                        String interStatePurchaseAccount = "";
                        if (columnConfig.containsKey("interStatePurchaseAccount") && indianCheck ) {
                            Cell cell = row.getCell((Integer) columnConfig.get("interStatePurchaseAccount"));

                            if (cell != null && cell.getCellType() != Cell.CELL_TYPE_BLANK) {
                                String productPurchaseAccountName = importHandler.getCellValue(cell);//cell.getStringCellValue().trim();
                                
                                // Ref Optimization related code. 
                                Map refData = null;
                                if (refColumnObjMap.containsKey("account")) {
                                    refData = refColumnObjMap.get("account");
                                } else {
                                    refData = new HashMap();
                                    refColumnObjMap.put("account", refData);
                                }
                                Account purchaseAccount = null;
                                if (refData.containsKey(productPurchaseAccountName)) {
                                    purchaseAccount = refData.get(productPurchaseAccountName) != null ? (Account) refData.get(productPurchaseAccountName) : null;
                                } else {
                                    purchaseAccount = getAccountByName(productPurchaseAccountName, companyid);
                                    refData.put(productPurchaseAccountName, purchaseAccount);
                                }
                                // Ref Optimization related code. 
                                
                                if (purchaseAccount != null) {
                                    interStatePurchaseAccount = purchaseAccount.getID();
                                } else {
                                    invalidColumn.put((Integer) columnConfig.get("interStatePurchaseAccount"), "Invalid");
                                    failureMsg += "Product Inter State Purchase Account is not found for " + productPurchaseAccountName + ".";
                                }
                            } 
                        }
                        
                        String interStatePurchaseAccountCForm = "";
                        if (columnConfig.containsKey("interStatePurchaseAccountCForm") && indianCheck ) {
                            Cell cell = row.getCell((Integer) columnConfig.get("interStatePurchaseAccountCForm"));

                            if (cell != null && cell.getCellType() != Cell.CELL_TYPE_BLANK) {
                                String productPurchaseAccountName = importHandler.getCellValue(cell);//cell.getStringCellValue().trim();
                                
                                // Ref Optimization related code. 
                                Map refData = null;
                                if (refColumnObjMap.containsKey("account")) {
                                    refData = refColumnObjMap.get("account");
                                } else {
                                    refData = new HashMap();
                                    refColumnObjMap.put("account", refData);
                                }
                                Account purchaseAccount = null;
                                if (refData.containsKey(productPurchaseAccountName)) {
                                    purchaseAccount = refData.get(productPurchaseAccountName) != null ? (Account) refData.get(productPurchaseAccountName) : null;
                                } else {
                                    purchaseAccount = getAccountByName(productPurchaseAccountName, companyid);
                                    refData.put(productPurchaseAccountName, purchaseAccount);
                                }
                                // Ref Optimization related code. 
                                
                                if (purchaseAccount != null) {
                                    interStatePurchaseAccountCForm = purchaseAccount.getID();
                                } else {
                                    invalidColumn.put((Integer) columnConfig.get("interStatePurchaseAccountCForm"), "Invalid");
                                    failureMsg += "Product Inter State Purchase Account C Form is not found for " + productPurchaseAccountName + ".";
                                }
                            } 
                        }
                        
                        String interStatePurchaseReturnAccount = "";
                        if (columnConfig.containsKey("interStatePurchaseReturnAccount") && indianCheck ) {
                            Cell cell = row.getCell((Integer) columnConfig.get("interStatePurchaseReturnAccount"));

                            if (cell != null && cell.getCellType() != Cell.CELL_TYPE_BLANK) {
                                String productPurchaseAccountName = importHandler.getCellValue(cell);//cell.getStringCellValue().trim();
                                
                                // Ref Optimization related code. 
                                Map refData = null;
                                if (refColumnObjMap.containsKey("account")) {
                                    refData = refColumnObjMap.get("account");
                                } else {
                                    refData = new HashMap();
                                    refColumnObjMap.put("account", refData);
                                }
                                Account purchaseAccount = null;
                                if (refData.containsKey(productPurchaseAccountName)) {
                                    purchaseAccount = refData.get(productPurchaseAccountName) != null ? (Account) refData.get(productPurchaseAccountName) : null;
                                } else {
                                    purchaseAccount = getAccountByName(productPurchaseAccountName, companyid);
                                    refData.put(productPurchaseAccountName, purchaseAccount);
                                }
                                // Ref Optimization related code. 
                                
                                if (purchaseAccount != null) {
                                    interStatePurchaseReturnAccount = purchaseAccount.getID();
                                } else {
                                    invalidColumn.put((Integer) columnConfig.get("interStatePurchaseReturnAccount"), "Invalid");
                                    failureMsg += "Product Inter State Purchase Return Account  is not found for " + productPurchaseAccountName + ".";
                                }
                            } 
                        }
                        
                        String interStatePurchaseReturnAccountCForm = "";
                        if (columnConfig.containsKey("interStatePurchaseReturnAccountCForm") && indianCheck ) {
                            Cell cell = row.getCell((Integer) columnConfig.get("interStatePurchaseReturnAccountCForm"));

                            if (cell != null && cell.getCellType() != Cell.CELL_TYPE_BLANK) {
                                String productPurchaseAccountName = importHandler.getCellValue(cell);//cell.getStringCellValue().trim();
                                
                                // Ref Optimization related code. 
                                Map refData = null;
                                if (refColumnObjMap.containsKey("account")) {
                                    refData = refColumnObjMap.get("account");
                                } else {
                                    refData = new HashMap();
                                    refColumnObjMap.put("account", refData);
                                }
                                Account purchaseAccount = null;
                                if (refData.containsKey(productPurchaseAccountName)) {
                                    purchaseAccount = refData.get(productPurchaseAccountName) != null ? (Account) refData.get(productPurchaseAccountName) : null;
                                } else {
                                    purchaseAccount = getAccountByName(productPurchaseAccountName, companyid);
                                    refData.put(productPurchaseAccountName, purchaseAccount);
                                }
                                // Ref Optimization related code. 
                                
                                if (purchaseAccount != null) {
                                    interStatePurchaseReturnAccountCForm = purchaseAccount.getID();
                                } else {
                                    invalidColumn.put((Integer) columnConfig.get("interStatePurchaseReturnAccountCForm"), "Invalid");
                                    failureMsg += "Product Inter State Purchase Return Account C Form  is not found for " + productPurchaseAccountName + ".";
                                }
                            } 
                        } 
                        
                        
                        String interStateSalesAccount = "";
                        if (columnConfig.containsKey("interStateSalesAccount") && indianCheck ) {
                            Cell cell = row.getCell((Integer) columnConfig.get("interStateSalesAccount"));

                            if (cell != null && cell.getCellType() != Cell.CELL_TYPE_BLANK) {
                                String productPurchaseAccountName = importHandler.getCellValue(cell);//cell.getStringCellValue().trim();
                                
                                // Ref Optimization related code. 
                                Map refData = null;
                                if (refColumnObjMap.containsKey("account")) {
                                    refData = refColumnObjMap.get("account");
                                } else {
                                    refData = new HashMap();
                                    refColumnObjMap.put("account", refData);
                                }
                                Account purchaseAccount = null;
                                if (refData.containsKey(productPurchaseAccountName)) {
                                    purchaseAccount = refData.get(productPurchaseAccountName) != null ? (Account) refData.get(productPurchaseAccountName) : null;
                                } else {
                                    purchaseAccount = getAccountByName(productPurchaseAccountName, companyid);
                                    refData.put(productPurchaseAccountName, purchaseAccount);
                                }
                                // Ref Optimization related code. 
                                
                                if (purchaseAccount != null) {
                                    interStateSalesAccount = purchaseAccount.getID();
                                } else {
                                    invalidColumn.put((Integer) columnConfig.get("interStateSalesAccount"), "Invalid");
                                    failureMsg += "Product Inter State Sales Account  is not found for " + productPurchaseAccountName + ".";
                                }
                            } 
                        } 
                        
                        
                        String interStateSalesAccountCForm = "";
                        if (columnConfig.containsKey("interStateSalesAccountCForm") && indianCheck ) {
                            Cell cell = row.getCell((Integer) columnConfig.get("interStateSalesAccountCForm"));

                            if (cell != null && cell.getCellType() != Cell.CELL_TYPE_BLANK) {
                                String productPurchaseAccountName = importHandler.getCellValue(cell);//cell.getStringCellValue().trim();
                                
                                // Ref Optimization related code. 
                                Map refData = null;
                                if (refColumnObjMap.containsKey("account")) {
                                    refData = refColumnObjMap.get("account");
                                } else {
                                    refData = new HashMap();
                                    refColumnObjMap.put("account", refData);
                                }
                                Account purchaseAccount = null;
                                if (refData.containsKey(productPurchaseAccountName)) {
                                    purchaseAccount = refData.get(productPurchaseAccountName) != null ? (Account) refData.get(productPurchaseAccountName) : null;
                                } else {
                                    purchaseAccount = getAccountByName(productPurchaseAccountName, companyid);
                                    refData.put(productPurchaseAccountName, purchaseAccount);
                                }
                                // Ref Optimization related code. 
                                
                                if (purchaseAccount != null) {
                                    interStateSalesAccountCForm = purchaseAccount.getID();
                                } else {
                                    invalidColumn.put((Integer) columnConfig.get("interStateSalesAccountCForm"), "Invalid");
                                    failureMsg += "Product Inter State Sales Account CForm  is not found for " + productPurchaseAccountName + ".";
                                }
                            }
                        } 
                        
                        String interStateSalesReturnAccount = "";
                        if (columnConfig.containsKey("interStateSalesReturnAccount") && indianCheck ) {
                            Cell cell = row.getCell((Integer) columnConfig.get("interStateSalesReturnAccount"));

                            if (cell != null && cell.getCellType() != Cell.CELL_TYPE_BLANK) {
                                String productPurchaseAccountName = importHandler.getCellValue(cell);//cell.getStringCellValue().trim();
                                
                                // Ref Optimization related code. 
                                Map refData = null;
                                if (refColumnObjMap.containsKey("account")) {
                                    refData = refColumnObjMap.get("account");
                                } else {
                                    refData = new HashMap();
                                    refColumnObjMap.put("account", refData);
                                }
                                Account purchaseAccount = null;
                                if (refData.containsKey(productPurchaseAccountName)) {
                                    purchaseAccount = refData.get(productPurchaseAccountName) != null ? (Account) refData.get(productPurchaseAccountName) : null;
                                } else {
                                    purchaseAccount = getAccountByName(productPurchaseAccountName, companyid);
                                    refData.put(productPurchaseAccountName, purchaseAccount);
                                }
                                // Ref Optimization related code. 
                                
                                if (purchaseAccount != null) {
                                    interStateSalesReturnAccount = purchaseAccount.getID();
                                } else {
                                    invalidColumn.put((Integer) columnConfig.get("interStateSalesReturnAccount"), "Invalid");
                                    failureMsg += "Product Inter State Sales Return Account  is not found for " + productPurchaseAccountName + ".";
                                }
                            } 
                        } 
                        
                        String interStateSalesReturnAccountCForm = "";
                        if (columnConfig.containsKey("interStateSalesReturnAccountCForm") && indianCheck ) {
                            Cell cell = row.getCell((Integer) columnConfig.get("interStateSalesReturnAccountCForm"));

                            if (cell != null && cell.getCellType() != Cell.CELL_TYPE_BLANK) {
                                String productPurchaseAccountName = importHandler.getCellValue(cell);//cell.getStringCellValue().trim();
                                
                                // Ref Optimization related code. 
                                Map refData = null;
                                if (refColumnObjMap.containsKey("account")) {
                                    refData = refColumnObjMap.get("account");
                                } else {
                                    refData = new HashMap();
                                    refColumnObjMap.put("account", refData);
                                }
                                Account purchaseAccount = null;
                                if (refData.containsKey(productPurchaseAccountName)) {
                                    purchaseAccount = refData.get(productPurchaseAccountName) != null ? (Account) refData.get(productPurchaseAccountName) : null;
                                } else {
                                    purchaseAccount = getAccountByName(productPurchaseAccountName, companyid);
                                    refData.put(productPurchaseAccountName, purchaseAccount);
                                }
                                // Ref Optimization related code. 
                                
                                if (purchaseAccount != null) {
                                    interStateSalesReturnAccountCForm = purchaseAccount.getID();
                                } else {
                                    invalidColumn.put((Integer) columnConfig.get("interStateSalesReturnAccountCForm"), "Invalid");
                                    failureMsg += "Product Inter State Sales Return Account CForm  is not found for " + productPurchaseAccountName + ".";
                                }
                            } 
                        } 
                        
                        ValuationMethod valMethod = null;
                        if (columnConfig.containsKey("valuationmethod")) {
                            Cell cell = row.getCell((Integer) columnConfig.get("valuationmethod"));
                            if (cell != null && cell.getCellType() != Cell.CELL_TYPE_BLANK) {
                                String cell1 = importHandler.getCellValue(cell);//cell.getStringCellValue();
                                if (!StringUtil.isNullOrEmpty(cell1)) {
                                    if (cell1.equalsIgnoreCase("LIFO")) {
                                        cell1 = "0";
                                    } else if (cell1.equalsIgnoreCase("FIFO")) {
                                        cell1 = "1";
                                    } else if (cell1.equalsIgnoreCase("Moving Average")) {
                                        cell1 = "2";
                                    } else {
                                        invalidColumn.put((Integer) columnConfig.get("valuationmethod"), "Invalid");
                                        failureMsg += "Value is not valid for column. It should be 'FIFO' or 'LIFO' or 'Moving Average'.";
                                    }
                                    int valuationMethod = Integer.parseInt(cell1);
                                    for (ValuationMethod st : ValuationMethod.values()) {
                                        if (st.ordinal() == valuationMethod) {
                                            valMethod = st;
                                            break;
                                        }
                                    }
                                }
                            }
                        } else if(!updateExistingRecordFlag) {
                            valMethod = ValuationMethod.FIFO;
                        }
                        String orderinguom = "";
                        UnitOfMeasure orderuom = null;
                        if (columnConfig.containsKey("orderinguom")) {
                            Cell cell = row.getCell((Integer) columnConfig.get("orderinguom"));
                            if (cell != null && cell.getCellType() != Cell.CELL_TYPE_BLANK) {
                                String productUOMName = importHandler.getCellValue(cell);//cell.getStringCellValue().trim();
                                if (!StringUtil.isNullOrEmpty(productUOMName)) {
                                    
                                    // Ref Optimization related code. 
                                    Map refData = null;
                                    if(refColumnObjMap.containsKey("uom")){
                                        refData = refColumnObjMap.get("uom");
                                    }else{
                                        refData = new HashMap();
                                        refColumnObjMap.put("uom", refData);
                                    }
                                    
                                    if(refData.containsKey(productUOMName)){
                                        orderuom = refData.get(productUOMName) != null ? (UnitOfMeasure) refData.get(productUOMName): null;
                                    }else{
                                        orderuom = getUOMByName(productUOMName, companyid);
                                        refData.put(productUOMName, orderuom);
                                    }
                                    // Ref Optimization related code. 
                                    
                                    if (orderuom != null) {
                                        orderinguom = orderuom.getID();
                                    } else {
                                        if (masterPreference.equalsIgnoreCase("2")) {
                                            HashMap<String, Object> uomMap = new HashMap<String, Object>();
                                            uomMap.put("uomname",StringUtil.DecodeText(productUOMName));
                                            uomMap.put("uomtype", StringUtil.DecodeText(productUOMName));
                                            uomMap.put("precision", 0);
                                            uomMap.put("companyid", companyid);

                                            KwlReturnObject uomresult = accUomObj.addUoM(uomMap);
                                            orderuom = (UnitOfMeasure) uomresult.getEntityList().get(0);
                                            orderinguom = orderuom.getID();
                                            refData.put(productUOMName, orderuom);// Ref Optimization related code. 
                                        } else {
                                            if (masterPreference.equalsIgnoreCase("1")) {
                                                orderinguom = "";
                                            } else {
                                                invalidColumn.put((Integer) columnConfig.get("orderinguom"), "Invalid");
                                                failureMsg += "Product Ordering Unit Of Measure is not found for " + productUOMName + ".";
                                            }
                                        }
                                    }
                                }
                            }
                        } else if(!updateExistingRecordFlag) {
                            orderinguom = "";
                        }

                        String transferuom = "";
                        UnitOfMeasure transferUOM = null;
                        if (columnConfig.containsKey("transferuom")) {
                            Cell cell = row.getCell((Integer) columnConfig.get("transferuom"));
                            if (cell != null && cell.getCellType() != Cell.CELL_TYPE_BLANK) {
                                String productUOMName = importHandler.getCellValue(cell);//cell.getStringCellValue().trim();
                                if (!StringUtil.isNullOrEmpty(productUOMName)) {
                                    
                                    // Ref Optimization related code. 
                                    Map refData = null;
                                    if(refColumnObjMap.containsKey("uom")){
                                        refData = refColumnObjMap.get("uom");
                                    }else{
                                        refData = new HashMap();
                                        refColumnObjMap.put("uom", refData);
                                    }
                                    
                                    if(refData.containsKey(productUOMName)){
                                        transferUOM = refData.get(productUOMName) != null ? (UnitOfMeasure) refData.get(productUOMName): null;
                                    }else{
                                        transferUOM = getUOMByName(productUOMName, companyid);
                                        refData.put(productUOMName, transferUOM);
                                    }
                                    // Ref Optimization related code. 
                                    
                                    
                                    if (transferUOM != null) {
                                        transferuom = transferUOM.getID();
                                    } else {
                                        if (masterPreference.equalsIgnoreCase("2")) {
                                            HashMap<String, Object> uomMap = new HashMap<String, Object>();
                                            uomMap.put("uomname", StringUtil.DecodeText(productUOMName));
                                            uomMap.put("uomtype", StringUtil.DecodeText(productUOMName));
                                            uomMap.put("precision", 0);
                                            uomMap.put("companyid", companyid);

                                            KwlReturnObject uomresult = accUomObj.addUoM(uomMap);
                                            transferUOM = (UnitOfMeasure) uomresult.getEntityList().get(0);
                                            transferuom = transferUOM.getID();
                                            refData.put(productUOMName, transferUOM);// Ref Optimization related code. 
                                        } else {
                                            if (masterPreference.equalsIgnoreCase("1")) {
                                                transferuom = "";
                                            } else {
                                                invalidColumn.put((Integer) columnConfig.get("transferuom"), "Invalid");
                                                failureMsg += "Product Transfer Unit Of Measure is not found for " + productUOMName + ".";
                                            }
                                        }
                                    }
                                }
                            }
                        } else if(!updateExistingRecordFlag) {
                            transferuom = "";
                        }
                        
                        Set<Frequency> ccFrequencies = new HashSet();
                        if (!productTypeID.equals(Producttype.SERVICE) && !productTypeID.equals(Producttype.SERVICE_Name) && columnConfig.containsKey("CCFrequency")) {
                            Cell cell = row.getCell((Integer) columnConfig.get("CCFrequency"));
                            if (cell != null) {
                                String frequencies = cell.getStringCellValue().trim();
                                if (!StringUtil.isNullOrEmpty(frequencies)) {
                                    String[] frqs = frequencies.split(",");
                                    String notFoundNames = "";
                                    for (int c = 0; c < frqs.length; c++) {
                                        Frequency frq = null;
                                        if ("Daily".equalsIgnoreCase(frqs[c])) {
                                            frq = frequencyMap.get(Frequency.DAILY);
                                        } else if ("Weekly".equalsIgnoreCase(frqs[c])) {
                                            frq = frequencyMap.get(Frequency.WEEKLY);
                                        } else if ("Fortnightly".equalsIgnoreCase(frqs[c])) {
                                            frq = frequencyMap.get(Frequency.FORTNIGHT);
                                        } else if ("Monthly".equalsIgnoreCase(frqs[c])) {
                                            frq = frequencyMap.get(Frequency.MONTHLY);
                                        } else {
                                            notFoundNames += frqs[c] + ", ";
                                        }
                                        if (frq != null) {
                                            ccFrequencies.add(frq);
                                        }
                                    }
                                    if (!StringUtil.isNullOrEmpty(notFoundNames) && masterPreference.equalsIgnoreCase("0")) {
                                        notFoundNames = notFoundNames.substring(0, notFoundNames.lastIndexOf(","));
                                        throw new AccountingException("Cycle Count Frequency is not found for " + notFoundNames);
                                    }
                                }
                            }
                        }
                        
                        String minOrderingQuantity = "0";
                        if (columnConfig.containsKey("minorderingquantity")) {
                            Cell cell = row.getCell((Integer) columnConfig.get("minorderingquantity"));

                            if (cell == null || cell.getCellType() == Cell.CELL_TYPE_BLANK) {
                                minOrderingQuantity = "0";
                            } else {
                                minOrderingQuantity = importHandler.getCellValue(cell);//

                                if (!StringUtil.isNullOrEmpty(minOrderingQuantity)) {
                                    try {
                                        Object vDataValue = Double.parseDouble(minOrderingQuantity);
                                    } catch (Exception ex) {
                                        if (masterPreference.equals("1")) {
                                            minOrderingQuantity = "0";
                                        } else {
                                            invalidColumn.put((Integer) columnConfig.get("minorderingquantity"), "Invalid");
                                            failureMsg += "Incorrect numeric value for Minimum Ordering Quantity, Please ensure that value type of Minimum Ordering Quantity matches with the Minimum Ordering Quantity.";
                                        }
                                    }
                                }
                            }
                        }
                        
                        String maxOrderingQuantity = "0";
                        if (columnConfig.containsKey("maxorderingquantity")) {
                            Cell cell = row.getCell((Integer) columnConfig.get("maxorderingquantity"));

                            if (cell == null || cell.getCellType() == Cell.CELL_TYPE_BLANK) {
                                maxOrderingQuantity = "0";
                            } else {
                                maxOrderingQuantity = importHandler.getCellValue(cell);//

                                if (!StringUtil.isNullOrEmpty(maxOrderingQuantity)) {
                                    try {
                                        Object vDataValue = Double.parseDouble(maxOrderingQuantity);
                                    } catch (Exception ex) {
                                        if (masterPreference.equals("1")) {
                                            maxOrderingQuantity = "0";
                                        } else {
                                            invalidColumn.put((Integer) columnConfig.get("maxorderingquantity"), "Invalid");
                                            failureMsg += "Incorrect numeric value for Maximum Ordering Quantity, Please ensure that value type of Maximum Ordering Quantity matches with the Maximum Ordering Quantity.";
                                        }
                                    }
                                }
                            }
                        }
                        // Custom Column Implementation
                        customfield = "";
                        JSONArray customJArr = new JSONArray();
                        for (int j = 0; j < jSONArray.length(); j++) {
                            JSONObject jSONObject = jSONArray.getJSONObject(j);
                            if (jSONObject.optBoolean("customflag", false)) { // customflag=true : Custom Field
                                HashMap<String, Object> requestParams = new HashMap<String, Object>();
                                requestParams.put(Constants.filter_names, Arrays.asList(Constants.companyid, Constants.moduleid, Constants.fieldlabel));
                                requestParams.put(Constants.filter_values, Arrays.asList(companyid, Constants.Acc_Product_Master_ModuleId, jSONObject.getString("columnname")));
                                KwlReturnObject fieldParamsResult = accCommonTablesDAO.getFieldParams(requestParams); // get custom field for module
                                FieldParams params = (FieldParams) fieldParamsResult.getEntityList().get(0);
                                if (recarr.get(jSONObject.getInt("csvindex")) != null && !StringUtil.isNullOrEmpty(recarr.get(jSONObject.getInt("csvindex")).toString().replaceAll("\"", "").trim())) {
                                    JSONObject customJObj = new JSONObject();
                                    customJObj.put("fieldid", params.getId());
                                    customJObj.put("refcolumn_name", "Col" + params.getRefcolnum());
                                    customJObj.put("fieldname", "Custom_" + params.getFieldlabel());
                                    customJObj.put("xtype", params.getFieldtype());
                                    String fieldComboDataStr = "";
                                    if (params.getFieldtype() == 3) { // if field of date typed
                                        Cell cell = row.getCell(jSONObject.getInt("csvindex"));
                                        if (cell != null) {
                                            try {
                                                customJObj.put("Col" + params.getColnum(), cell.getDateCellValue().getTime());
                                                customJObj.put("fieldDataVal", cell.getDateCellValue().getTime());
                                            } catch (Exception ex) {
                                                invalidColumn.put(jSONObject.getInt("csvindex"), "Invalid");
                                                failureMsg += "Incorrect date format for " + jSONObject.getString("columnname") + ", Please specify values in correct date format.";
                                            }
                                        }
                                    } else if (params.getFieldtype() == 4 || params.getFieldtype() == 7) { // if field of MultiSelect Drop Down OR Drop Down
                                        Cell cell = row.getCell(jSONObject.getInt("csvindex"));
                                        if(cell != null){
                                            String fieldComboDataArrStr = importHandler.getCellValue(cell);
                                            if (!StringUtil.isNullOrEmpty(fieldComboDataArrStr)) {
                                                String[] fieldComboDataArr = fieldComboDataArrStr.replaceAll("\"", "").trim().split(";");
                                                for (int dataArrIndex = 0; dataArrIndex < fieldComboDataArr.length; dataArrIndex++) {
                                                    requestParams = new HashMap<String, Object>();
                                                    requestParams.put(Constants.filter_names, Arrays.asList(Constants.Acc_custom_fieldId, "value", "deleteflag"));
                                                    requestParams.put(Constants.filter_values, Arrays.asList(params.getId(), fieldComboDataArr[dataArrIndex], 0));
                                                    fieldParamsResult = accCommonTablesDAO.getCustomCombodata(requestParams);
                                                    if (fieldParamsResult != null && !fieldParamsResult.getEntityList().isEmpty()) {
                                                        FieldComboData fieldComboData = (FieldComboData) fieldParamsResult.getEntityList().get(0);
                                                        fieldComboDataStr += fieldComboData.getId() + ",";
                                                    } else {
                                                        invalidColumn.put(jSONObject.getInt("csvindex"), "Invalid");
                                                        failureMsg += jSONObject.getString("columnname") + " entry not found in master list for " + jSONObject.getString("columnname") + " dropdown.";
                                                    }
                                                }
                                                if (!StringUtil.isNullOrEmpty(fieldComboDataStr)) {
                                                    customJObj.put("Col" + params.getColnum(), fieldComboDataStr.substring(0, fieldComboDataStr.length() - 1));
                                                    customJObj.put("fieldDataVal", fieldComboDataStr.substring(0, fieldComboDataStr.length() - 1));
                                                } else {
                                                    continue;
                                                }
                                            }
                                        }
                                    } else if (params.getFieldtype() == 11) { // if field of check box type 
                                        customJObj.put("Col" + params.getColnum(), Boolean.parseBoolean(recarr.get(jSONObject.getInt("csvindex")).toString().replaceAll("\"", "").trim()));
                                        customJObj.put("fieldDataVal", Boolean.parseBoolean(recarr.get(jSONObject.getInt("csvindex")).toString().replaceAll("\"", "").trim()));
                                    } else if (params.getFieldtype() == 12) { // if field of check list type
                                        requestParams = new HashMap<String, Object>();
                                        requestParams.put(Constants.filter_names, Arrays.asList(Constants.Acc_custom_fieldId, "deleteflag"));
                                        requestParams.put(Constants.filter_values, Arrays.asList(params.getId(), 0));
                                        fieldParamsResult = accCommonTablesDAO.getCustomCombodata(requestParams);
                                        List<FieldComboData> fieldComboDataList = fieldParamsResult.getEntityList();
                                        String[] fieldComboDataArr = recarr.get(jSONObject.getInt("csvindex")).toString().replaceAll("\"", "").trim().split(";");
                                        int dataArrIndex = 0;
                                        for (FieldComboData fieldComboData : fieldComboDataList) {
                                            if (fieldComboDataArr.length != dataArrIndex && fieldComboDataArr[dataArrIndex] != null && fieldComboDataArr[dataArrIndex].replaceAll("\"", "").trim().equalsIgnoreCase("true")) {
                                                fieldComboDataStr += fieldComboData.getId() + ",";
                                            }
                                            dataArrIndex++;
                                        }
                                        if (!StringUtil.isNullOrEmpty(fieldComboDataStr)) {
                                            customJObj.put("Col" + params.getColnum(), fieldComboDataStr.substring(0, fieldComboDataStr.length() - 1));
                                            customJObj.put("fieldDataVal", fieldComboDataStr.substring(0, fieldComboDataStr.length() - 1));
                                        } else {
                                            continue;
                                        }
                                    } else if (params.getFieldtype() == 2) { // if field of Number field type
                                        String numStr = recarr.get(jSONObject.getInt("csvindex")).toString().replaceAll("\"", "").trim();
                                        if (!StringUtil.isNullOrEmpty(numStr)) {
                                            try {
                                                Object vDataValue = Double.parseDouble(numStr);
                                            } catch (Exception ex) {
                                                invalidColumn.put(jSONObject.getInt("csvindex"), "Invalid");
                                                failureMsg += "Incorrect numeric value for " + jSONObject.getString("columnname") + ", Please ensure that value type of " + jSONObject.getString("columnname") + " matches with the " + jSONObject.getString("columnname") + ".";
                                            }
                                        }
                                        customJObj.put("Col" + params.getColnum(), recarr.get(jSONObject.getInt("csvindex")).toString().replaceAll("\"", "").trim());
                                        customJObj.put("fieldDataVal", recarr.get(jSONObject.getInt("csvindex")).toString().replaceAll("\"", "").trim());
                                    } else {
                                        customJObj.put("Col" + params.getColnum(), recarr.get(jSONObject.getInt("csvindex")).toString().replaceAll("\"", "").trim());
                                        customJObj.put("fieldDataVal", recarr.get(jSONObject.getInt("csvindex")).toString().replaceAll("\"", "").trim());
                                    }
                                    customJObj.put("Custom_" + params.getFieldlabel(), "Col" + params.getColnum());
                                    customJArr.put(customJObj);
                                }
                            }
                        }


                        // if Ordering UOM is not in Stock UOM, Inner UOM or Casing UOM fail record by exception msg
                        if (!StringUtil.isNullOrEmpty(orderinguom) && !(productUOMID.equalsIgnoreCase(orderinguom) || innerUoMID.equalsIgnoreCase(orderinguom) || casingUoMID.equalsIgnoreCase(orderinguom))) {
                            invalidColumn.put((Integer) columnConfig.get("orderinguom"), "Invalid");
                            failureMsg += "Ordering UOM are not matching with either Stock UOM or Inner UOM or Casing UOM.";
                        }

                        // if Transfer UOM is not in Stock UOM, Inner UOM or Casing UOM fail record by exception msg
                        if (!StringUtil.isNullOrEmpty(transferuom) && !(productUOMID.equalsIgnoreCase(transferuom) || innerUoMID.equalsIgnoreCase(transferuom) || casingUoMID.equalsIgnoreCase(transferuom))) {
                            invalidColumn.put((Integer) columnConfig.get("transferuom"), "Invalid");
                            failureMsg += "Transfer UOM are not matching with either Stock UOM or Inner UOM or Casing UOM.";
                        }

                        // if Purchase UOM is not in Stock UOM, Inner UOM or Casing UOM fail record by exception msg
                        if (!StringUtil.isNullOrEmpty(PurchaseUOMID) && !(productUOMID.equalsIgnoreCase(PurchaseUOMID) || innerUoMID.equalsIgnoreCase(PurchaseUOMID) || casingUoMID.equalsIgnoreCase(PurchaseUOMID))) {
                            invalidColumn.put((Integer) columnConfig.get("purchaseuom"), "Invalid");
                            failureMsg += "Purchase UOM are not matching with either Stock UOM or Inner UOM or Casing UOM.";
                        }

                        // if Sales UOM is not in Stock UOM, Inner UOM or Casing UOM fail record by exception msg
                        if (!StringUtil.isNullOrEmpty(SalesUOMID) && !(productUOMID.equalsIgnoreCase(SalesUOMID) || innerUoMID.equalsIgnoreCase(SalesUOMID) || casingUoMID.equalsIgnoreCase(SalesUOMID))) {
                            invalidColumn.put((Integer) columnConfig.get("salesuom"), "Invalid");
                            failureMsg += "Sales UOM are not matching with either Stock UOM or Inner UOM or Casing UOM.";
                        }

                        Date asOfDate=null;
                        if (columnConfig.containsKey("asofdate")) {//when AsofDate header is mapped
                            Cell cell = row.getCell((Integer) columnConfig.get("asofdate"));
                            if (cell != null) {
                                String stringAsOfDate = importHandler.getCellValue(cell, df);
                                if (!stringAsOfDate.equals("")) {
                                    try {
                                        
                                        asOfDate = df.parse(stringAsOfDate);
                                    } catch (Exception ex) {
                                        if (masterPreference.equalsIgnoreCase("1")) {//when set empty option is selected then setting its default value bookbeginning date
                                            asOfDate = bookBookBeginningDate;
                                        } else {
                                            invalidColumn.put((Integer) columnConfig.get("asofdate"), "Invalid");
                                            failureMsg += "Incorrect date format for As Of Date, Please specify values in " + excelDF + " format.";
                                        }
                                    }
                                }
                            } else {//when value is null or empty
                                if (masterPreference.equals("0")) {//most resticted
                                    invalidColumn.put((Integer) columnConfig.get("asofdate"), "Invalid");
                                    failureMsg += "Empty data found in As Of Date, cannot set empty data for As Of Date.";
                                } else if (masterPreference.equals("2") || masterPreference.equals("1")) {// add new case and set empty case
                                    asOfDate = bookBookBeginningDate;
                                }
                            }
                        }
                        Date gstapplicabledate = null;
                        if (columnConfig.containsKey("gstapplicabledate")) {//when AsofDate header is mapped
                            Cell cell = row.getCell((Integer) columnConfig.get("gstapplicabledate"));
                            if (cell != null) {
                                String stringAsOfDate = importHandler.getCellValue(cell, df);
                                if (!stringAsOfDate.equals("")) {
                                    try {

                                        gstapplicabledate = df.parse(stringAsOfDate);
                                    } catch (Exception ex) {

                                        invalidColumn.put((Integer) columnConfig.get("asofdate"), "Invalid");
                                        failureMsg += "Incorrect date format for GST Applicable Date, Please specify values in " + excelDF + " format.";
                                    }
                                }
                            }
                        }
                        if (nocount > 0 && updateExistingRecordFlag && !result.getEntityList().isEmpty()) {
                            productOldObj = (Product) result.getEntityList().get(0);
                            String propChangeErrMsg = "";
                            if (productOldObj != null && productOldObj.getAvailableQuantity() > 0) {
                                    if (productOldObj.isIswarehouseforproduct() != isIswarehouseforproduct) {
                                        if (columnConfig.containsKey(Constants.ACTIVATE_WAREHOUSE)) {
                                            invalidColumn.put((Integer) columnConfig.get(Constants.ACTIVATE_WAREHOUSE), "Invalid");
                                            propChangeErrMsg += StringUtil.isNullOrEmpty(propChangeErrMsg) ? "warehouse" : " ,warehouse";
                                        }
                                    }
                                    if (productOldObj.isIslocationforproduct() != isIslocationforproduct) {
                                        if (columnConfig.containsKey(Constants.ACTIVATE_LOCATION)) {
                                            invalidColumn.put((Integer) columnConfig.get(Constants.ACTIVATE_LOCATION), "Invalid");
                                            propChangeErrMsg += StringUtil.isNullOrEmpty(propChangeErrMsg) ? "location" : " ,location";
                                        }
                                        
                                    }
                                    if (productOldObj.isIsrowforproduct() != isIsRowForProduct) {
                                        if (columnConfig.containsKey(Constants.ACTIVATE_ROW)) {
                                            invalidColumn.put((Integer) columnConfig.get(Constants.ACTIVATE_ROW), "Invalid");
                                            propChangeErrMsg += StringUtil.isNullOrEmpty(propChangeErrMsg) ? "row" : " ,row";
                                        }
                                        
                                    }
                                    if (productOldObj.isIsrackforproduct() != isIsRackForProduct) {
                                        if (columnConfig.containsKey(Constants.ACTIVATE_RACK)) {
                                            invalidColumn.put((Integer) columnConfig.get(Constants.ACTIVATE_RACK), "Invalid");
                                            propChangeErrMsg += StringUtil.isNullOrEmpty(propChangeErrMsg) ? "rack" : " ,rack";
                                        }
                                    }
                                    if (productOldObj.isIsbinforproduct() != isIsBinForProduct) {
                                        if (columnConfig.containsKey(Constants.ACTIVATE_BIN)) {
                                            invalidColumn.put((Integer) columnConfig.get(Constants.ACTIVATE_BIN), "Invalid");
                                            propChangeErrMsg += StringUtil.isNullOrEmpty(propChangeErrMsg) ? "bin" : " ,bin";
                                        }
                                    }
                                    if (productOldObj.isIsBatchForProduct() != isIsBatchForProduct) {
                                        if (columnConfig.containsKey(Constants.ACTIVATE_BATCH)) {
                                            invalidColumn.put((Integer) columnConfig.get(Constants.ACTIVATE_BATCH), "Invalid");
                                            propChangeErrMsg += StringUtil.isNullOrEmpty(propChangeErrMsg) ? "batch" : " ,batch";
                                        }
                                    }
                                    if (productOldObj.isIsSerialForProduct() != isIsSerialForProduct) {
                                        if (columnConfig.containsKey(Constants.ACTIVATE_SERIAL_NO)) {
                                            invalidColumn.put((Integer) columnConfig.get(Constants.ACTIVATE_SERIAL_NO), "Invalid");
                                            propChangeErrMsg += StringUtil.isNullOrEmpty(propChangeErrMsg) ? "serial" : " ,serial";
                                        }
                                    }
                                    if (!StringUtil.isNullOrEmpty(propChangeErrMsg)) {
                                        throw new AccountingException("Opening stock is already added for this product.So, " + propChangeErrMsg + " property can not be changed.");
                                    }
                                }
                        
                        }
                        
                        if (!StringUtil.isNullOrEmpty(failureMsg)) {
                            throw new AccountingException(failureMsg);
                        }

                        // creating product Hashmap
                        HashMap<String, Object> productMap = new HashMap<String, Object>();

                        if (nocount == 0) {//if product does not exist i.e new product then need to check, whether it can be generate by sequence format or not. 
                            Map<String, String> sequenceNumberDataMap = new HashMap<String, String>();
                            sequenceNumberDataMap.put("moduleID", String.valueOf(Constants.Acc_Product_Master_ModuleId));
                            sequenceNumberDataMap.put("entryNumber", productID);
                            sequenceNumberDataMap.put("companyID", companyid);
                            List list = importHandler.checksEntryNumberForSequenceNumber(sequenceNumberDataMap);
                            if (!list.isEmpty()) {
                                boolean isvalidEntryNumber = (Boolean) list.get(0);
                                if (!isvalidEntryNumber) {
                                    String formatID = (String) list.get(2);
                                    int intSeq = (Integer) list.get(3);
                                    productMap.put(Constants.SEQNUMBER, intSeq);
                                    productMap.put(Constants.SEQFORMAT, formatID);
                                }
                            }
                        }

                        boolean isUsedInTransaction = false;
                        if (updateExistingRecordFlag && newProductAddinUpdateCase == false) {
                            Product product = (Product) result.getEntityList().get(0);
                            productMap.put("id", product.getID());
                            List listObj = accProductModuleService.isProductUsedintransction(product.getID(), companyid, requestParams1);
                            isUsedInTransaction = (Boolean) listObj.get(0);    //always boolean value
                        } else {
                            productMap.put("producttype", productTypeID);
                        }
                        if (columnConfig.containsKey("productname")) {
                            productMap.put("name", productName);
                        }
                        productMap.put("productid", productID);
                        if (columnConfig.containsKey("desc")) {
                            productMap.put("desc", productDescription);
                        }

                        if (columnConfig.containsKey("wipoffset")) {
                            productMap.put("WIPoffset", wipoffset);
                        }
                        if (columnConfig.containsKey("inventoryoffset")) {
                            productMap.put("Inventoryoffset", inventoryoffset);
                        }
                        if (columnConfig.containsKey("hscode")) {
                            productMap.put("hsCode", hscode);
                        }
                        if (columnConfig.containsKey("additionalfreetext")) {
                            productMap.put("additionalfreetext", additionalfreetext);
                        }
                        if (columnConfig.containsKey("itemcolor")) {
                            productMap.put("itemcolor", itemcolor);
                        }
                        if (columnConfig.containsKey("alternateproduct")) {
                            productMap.put("alternateproductid", alternateproduct);
                        }
                        if (columnConfig.containsKey("purchasemfg")) {
                            productMap.put("purchasemfg", purchasemfg);
                        }
                        if (columnConfig.containsKey("catalogno")) {
                            productMap.put("catalogNo", catalogno);
                        }
                        if (columnConfig.containsKey("supplier")) {
                            productMap.put("supplier", supplier);
                        }
                        if (columnConfig.containsKey("barcode")) {
                            productMap.put("barcode", barcode);
                        }
                        if (columnConfig.containsKey("additionaldesc")) {
                            productMap.put("additionaldescription", additionaldesc);
                        }
                        if (columnConfig.containsKey("descinforeign")) {
                            productMap.put("foreigndescription", descinforeign);
                        }
                        if (columnConfig.containsKey("licensecode")) {
                            productMap.put("licensecode", licensecode);
                        }
                        if (columnConfig.containsKey("itemgroup")) {
                            productMap.put("itemgroup", itemgroup);
                        }
                        if (columnConfig.containsKey("pricelist")) {
                            productMap.put("itempricelist", pricelist);
                        }
                        if (columnConfig.containsKey("shippingtype")) {
                            productMap.put("shippingtype", shippingtype);
                        }
                        if (columnConfig.containsKey("recyclable")) {
                            productMap.put("isrecyclable", recyclable);
                        }
                        if (columnConfig.containsKey("qaenable")) {
                            productMap.put("isQAenable", qaenable);
                        }
                        if (columnConfig.containsKey("isknittingitem")) {
                            productMap.put("isKnittingItem", isknittingitem);
                        }
                        if (columnConfig.containsKey("isactive")) {
                            productMap.put("isActiveItem", isactive);
                        } else if(!updateExistingRecordFlag){
                            productMap.put("isActiveItem", true);
                        }
                        if (columnConfig.containsKey("blockloosesell")) {
                            productMap.put("blockLooseSell", blockloosesell);
                        }
                        if (!StringUtil.isNullOrEmpty(itemsalesvolume)) {
                            productMap.put("itemsalesvolume", Double.parseDouble(itemsalesvolume));
                        }
                        if (!StringUtil.isNullOrEmpty(productweight)) {
                            productMap.put("productweight", Double.parseDouble(productweight));
                        }
                        if (!StringUtil.isNullOrEmpty(productWeightPerStockUom)) {
                            productMap.put("productweightperstockuom", authHandler.round(Double.parseDouble(productWeightPerStockUom),companyid));
                        }
                        if (!StringUtil.isNullOrEmpty(productWeightIncludingPakagingPerStockUom)) {
                            productMap.put("productweightincludingpakagingperstockuom", authHandler.round(Double.parseDouble(productWeightIncludingPakagingPerStockUom),companyid));
                        }
                        if (!StringUtil.isNullOrEmpty(itemsaleswidth)) {
                            productMap.put("itemsaleswidth", Double.parseDouble(itemsaleswidth));
                        }
                        if (!StringUtil.isNullOrEmpty(itemsalesheight)) {
                            productMap.put("itemsalesheight", Double.parseDouble(itemsalesheight));
                        }
                        if (!StringUtil.isNullOrEmpty(itemwidth)) {
                            productMap.put("itemwidth", Double.parseDouble(itemwidth));
                        }
                        if (!StringUtil.isNullOrEmpty(itemlength)) {
                            productMap.put("itemlength", Double.parseDouble(itemlength));
                        }
                        if (!StringUtil.isNullOrEmpty(itemheight)) {
                            productMap.put("itemheight", Double.parseDouble(itemheight));
                        }
                        if (!StringUtil.isNullOrEmpty(itemvolume)) {
                            productMap.put("itemvolume", Double.parseDouble(itemvolume));
                        }
                        if (!StringUtil.isNullOrEmpty(itempurchasewidth)) {
                            productMap.put("itempurchasewidth", Double.parseDouble(itempurchasewidth));
                        }
                        if (!StringUtil.isNullOrEmpty(itempurchasevolume)) {
                            productMap.put("itempurchasevolume", Double.parseDouble(itempurchasevolume));
                        }
                        if (!StringUtil.isNullOrEmpty(itempurchaselength)) {
                            productMap.put("itempurchaselength", Double.parseDouble(itempurchaselength));
                        }
                        if (valMethod != null) {
                            productMap.put("valuationmethod", valMethod);
                        }
                        if (!StringUtil.isNullOrEmpty(qaleadtimeindays)) {
                            productMap.put("QAleadtime", Integer.parseInt(qaleadtimeindays));
                        }
                        if (!StringUtil.isNullOrEmpty(reusabilitycount)) {
                            productMap.put("reusabilitycount", Integer.parseInt(reusabilitycount));
                        }
                        if (itemReusability != null) {
                            productMap.put("isreusable", itemReusability);
                        }
                        if (transferUOM != null) {
                            productMap.put("transferUoM", transferUOM);
                        }
                        if (orderuom != null) {
                            productMap.put("orderUoM", orderuom);
                        }
                        if (!ccFrequencies.isEmpty()) {
                            productMap.put("CCFrequency", ccFrequencies);
                            productMap.put("countable", true); 
                        }else if(!updateExistingRecordFlag){
                            productMap.put("countable", false); 
                        }
                        productMap.put("currencyid", currencyId);
                        productMap.put("purchasetaxId", purchasetaxId);
                        productMap.put("salestaxId", salestaxId);

                        if (!isUsedInTransaction) {
                            if (columnConfig.containsKey(Constants.ACTIVATE_BATCH)) {
                                productMap.put("isBatchForProduct", isIsBatchForProduct);
                            }
                            if (columnConfig.containsKey(Constants.ACTIVATE_SERIAL_NO)) {
                                productMap.put("isSerialForProduct", isIsSerialForProduct);
                            }
                            if (columnConfig.containsKey(Constants.ACTIVATE_LOCATION)) {
                                productMap.put("isLocationForProduct", isIslocationforproduct);
                            }
                            if (columnConfig.containsKey(Constants.ACTIVATE_WAREHOUSE)) {
                                productMap.put("isWarehouseForProduct", isIswarehouseforproduct);
                                productMap.put("isRowForProduct", isIsRowForProduct);
                                productMap.put("isRackForProduct", isIsRackForProduct);
                                productMap.put("isBinForProduct", isIsBinForProduct);
                            }
                        }

                        if (columnConfig.containsKey("uomname")) {
                            productMap.put("uomid", productUOMID);
                        }
                        if (!productTypeID.equals(Producttype.SERVICE)) {
                            if (uom != null) {
                                productMap.put("transferUoM", uom);
                                productMap.put("orderUoM", uom);
                            }
                            if (salesuom != null) {
                                productMap.put("salesuomid", salesuom);
                            } else if (salesuom == null && uom != null) {
                                productMap.put("salesuomid", uom);
                            }
                            if (purchaseruom != null) {
                                productMap.put("purchaseuomid", purchaseruom);
                            } else if (purchaseruom == null && uom != null) {
                                productMap.put("purchaseuomid", uom);
                            }

//                            KwlReturnObject companyObj = accountingHandlerDAOobj.getObject(Company.class.getName(), companyid);
//                            Company company = (Company) companyObj.getEntityList().get(0);
                            Packaging packaging = null;
                            if (inneruom != null || casinguom != null || uom !=null) {
                                packaging = new Packaging();
                                if (columnConfig.containsKey("casinguom")) {
                                    packaging.setCasingUoM(casinguom);
                                }
                                if (columnConfig.containsKey("inneruom")) {
                                    packaging.setInnerUoM(inneruom);
                                }
                                if (columnConfig.containsKey("uomname")) {
                                    packaging.setStockUoM(uom);
                                }
                                /*
                                casinguomvalue / inneruomvalue / stcokuomvalue should not be null or empty 
                                */
                                if (!StringUtil.isNullOrEmpty(casinguomvalue)) {
                                    packaging.setCasingUomValue(Double.parseDouble(casinguomvalue));
                                }
                                if (!StringUtil.isNullOrEmpty(inneruomvalue)) {
                                    packaging.setInnerUomValue(Double.parseDouble(inneruomvalue));
                                }
                                if (!StringUtil.isNullOrEmpty(stcokuomvalue)) {
                                    packaging.setStockUomValue(Double.parseDouble(stcokuomvalue));
                                }
                                packaging.setCompany(company);

                            }
                            if (packaging != null) {
                                accProductObj.saveProductPackging(packaging);
                                productMap.put("packaging", packaging);
                            }
                        }

                        if (columnConfig.containsKey("reorderlevel")) {
                            productMap.put("reorderlevel", Double.parseDouble(productReorderLevel));
                        }
                        if (columnConfig.containsKey("reorderquantity")) {
                            productMap.put("reorderquantity", Double.parseDouble(productReorderQuantity));
                        }
                        if (columnConfig.containsKey("warrantyperiod")) {
                            productMap.put("warrantyperiod", Integer.parseInt(productWarrantyPeriod));
                        }
                        if (columnConfig.containsKey("warrantyperiodsal")) {
                            productMap.put("warrantyperiodsal", Integer.parseInt(productSalesWarrantyPeriod));
                        }
                        if (columnConfig.containsKey("leadtime")) {
                            productMap.put("leadtime", Integer.parseInt(productLeadTime));
                        }

                        if (columnConfig.containsKey("parentid")) {
                            productMap.put("parentid", parentProductUUID);
                        }
                        if (columnConfig.containsKey("salesaccountname")) {
                            productMap.put("salesaccountid", productSalesAccId);
                        }
                        if (columnConfig.containsKey("purchaseretaccountname")) {
                            productMap.put("purchaseretaccountid", productPurchaseReturnAccId);
                        }
                        if (columnConfig.containsKey("salesretaccountname")) {
                            productMap.put("salesretaccountid", productSalesReturnAccId);
                        }
                        if (columnConfig.containsKey("vendornameid")) {
                            productMap.put("vendorid", productPreferedVendorID);
                        }
                        if (columnConfig.containsKey("purchaseaccountname")) {
                            productMap.put("purchaseaccountid", productPurchaseAccId);
                        }
                        if (columnConfig.containsKey("purchaseretaccountname")) {
                            productMap.put("purchaseretaccountid", productPurchaseReturnAccId);
                        }
                        if (!StringUtil.isNullOrEmpty(productBrandID)) {
                            productMap.put("productBrandId", productBrandID);
                        }
                        if (!StringUtil.isNullOrEmpty(landingcostcategoryids)) {
                            productMap.put("landingCostCategory", landingcostcategoryids);
                        }
                        if (!StringUtil.isNullOrEmpty(stockAdjustmentAccountID)) {
                            productMap.put("stockadjustmentaccountid", stockAdjustmentAccountID); // Stock Adjustment Account
                        }
                        if (!StringUtil.isNullOrEmpty(inventoryAccountID)) {
                            productMap.put("inventoryaccountid", inventoryAccountID); // Inventory Account
                        }
                        if (!StringUtil.isNullOrEmpty(costOfGoodsSoldAccountID)) {
                            productMap.put("cogsaccountid", costOfGoodsSoldAccountID); // Cost of Goods Sold Account
                        }

                        // if product have multiuom = 'T' and Account Preferences have UOM Setting for UOM Schema then set uomschemaType for product
                        if (uomSchemaType != null && isMultiUOM && extraCompanyPreferences != null && extraCompanyPreferences.getUomSchemaType() == 0) {
                            productMap.put("uomschemaType", uomSchemaType);
                        }

                        if (!StringUtil.isNullOrEmpty(productDefaultLocationID)) {
                            productMap.put("location", productDefaultLocationID);
                        }

                        if (!StringUtil.isNullOrEmpty(productDefaultWarehouseID)) {
                            productMap.put("warehouse", productDefaultWarehouseID);
                        }

                        if (columnConfig.containsKey("syncable")) {
                            productMap.put("syncable", isSyncable);
                        }
                        if (columnConfig.containsKey("multiuom")) {
                            productMap.put("multiuom", isMultiUOM);
                        }
                        
                        if (columnConfig.containsKey("minorderingquantity")) {
                            productMap.put("minorderingquantity", Double.parseDouble(minOrderingQuantity));
                        }
                        if (columnConfig.containsKey("maxorderingquantity")) {
                            productMap.put("maxorderingquantity", Double.parseDouble(maxOrderingQuantity));
                        }
                        if (indianCheck) {
                            if (!StringUtil.isNullOrEmpty(tariffName)) {
                                productMap.put("tariffname", tariffName);
                            }
                            if (!StringUtil.isNullOrEmpty(hsncode)) {
                                productMap.put("hsCode", hsncode);
                            }
                            if (!StringUtil.isNullOrEmpty(reportinguomID)) {
                                productMap.put("reportinguom", reportinguomID);
                            }
                            if (columnConfig.containsKey("reportingschematype") && reportingSchemaType != null) {
                                productMap.put("reportingSchemaType", reportingSchemaType.getID());
                            }
                            if (!StringUtil.isNullOrEmpty(excisemethod)) {
                                productMap.put("excisemethod", excisemethod);
                            }
                            if (!StringUtil.isNullOrEmpty(vatMethodType)) {
                                productMap.put("vatMethodType", vatMethodType);
                            }
                            if (vatAbatementPeriodFromDate != null) {
                                productMap.put("vatAbatementPeriodFromDate", vatAbatementPeriodFromDate);
                            }
                            if (vatAbatementPeriodToDate != null) {
                                productMap.put("vatAbatementPeriodToDate", vatAbatementPeriodToDate);
                            }
                            if (!StringUtil.isNullOrEmpty(vatcommoditycode)) {
                                productMap.put("vatcommoditycode", vatcommoditycode);
                            }
                            if (!StringUtil.isNullOrEmpty(natureofStockItem)) {
                                productMap.put("natureOfStockItem", natureofStockItem);
                            }
                            if (!StringUtil.isNullOrEmpty(mrprate)) {
                                productMap.put("mrprate", mrprate);
                            }
                            if (!StringUtil.isNullOrEmpty(vatonmrp.toString())) {
                                productMap.put("vatonmrp", !vatonmrp);
                            }
                            if (rcmapplicable != null) {
                                productMap.put("rcmapplicable", rcmapplicable);
                            }
                            if (!StringUtil.isNullOrEmpty(serviceTaxCode)) {
                                productMap.put("servicetaxcode", serviceTaxCode);
                            }

                            if (!StringUtil.isNullOrEmpty(interStatePurchaseAccount)) {
                                productMap.put("interStatePurAccID", interStatePurchaseAccount);
                            }
                            if (!StringUtil.isNullOrEmpty(interStatePurchaseAccountCForm)) {
                                productMap.put("interStatePurAccCformID", interStatePurchaseAccountCForm);
                            }
                            if (!StringUtil.isNullOrEmpty(interStatePurchaseReturnAccount)) {
                                productMap.put("interStatePurReturnAccID", interStatePurchaseReturnAccount);
                            }
                            if (!StringUtil.isNullOrEmpty(interStatePurchaseReturnAccountCForm)) {
                                productMap.put("interStatePurReturnAccCformID", interStatePurchaseReturnAccountCForm);
                            }

                            if (!StringUtil.isNullOrEmpty(interStateSalesAccount)) {
                                productMap.put("interStateSalesAccID", interStateSalesAccount);
                            }
                            if (!StringUtil.isNullOrEmpty(interStateSalesAccountCForm)) {
                                productMap.put("interStateSalesAccCformID", interStateSalesAccountCForm);
                            }
                            if (!StringUtil.isNullOrEmpty(interStateSalesReturnAccount)) {
                                productMap.put("interStateSalesReturnAccID", interStateSalesReturnAccount);
                            }
                            if (!StringUtil.isNullOrEmpty(interStateSalesReturnAccountCForm)) {
                                productMap.put("interStateSalesReturnAccCformID", interStateSalesReturnAccountCForm);
                            }
                        }
                        productMap.put("deletedflag", false);
                        productMap.put("companyid", companyid);
                       // productMap.put("vendorid", null);
                        productMap.put("isImport", 1);
                        if (asOfDate == null) {//asOfDate field will be null only when product is new and field is not mapped
                            asOfDate = companyAccountPreferences.getBookBeginningFrom();
                        }
                        if (columnConfig.containsKey("asofdate")) {
                            productMap.put("asOfDate", asOfDate);
                        }
                        
                        if (!StringUtil.isNullOrEmpty(productInitialQuantity) && !StringUtil.isNullOrEmpty(productInitialPurchasePrise) && (extraCompanyPreferences.isActivateMRPModule() || preferences.getInventoryValuationType() == Constants.PERPETUAL_VALUATION_METHOD) && Double.parseDouble(productInitialPurchasePrise) > 0) {
                            try {
                                JSONObject accParams = new JSONObject();
                                Account inventoryAccount = null;
                                Map<String, Object> currencyParams = requestParams1;
                                double openingbalanceamount = (Integer.parseInt(productInitialQuantity) * Double.parseDouble(productInitialPurchasePrise));
                                double openingbalanceamountinbase = openingbalanceamount;
                                productMap.put("openingbalanceamount", authHandler.round(openingbalanceamount, companyid));
                                if (!StringUtil.isNullOrEmpty(currencyId)) {
                                    result = accCurrencyDAOobj.getCurrencyToBaseAmount(currencyParams, openingbalanceamount, currencyId, asOfDate, 0);
                                    openingbalanceamountinbase = (Double) result.getEntityList().get(0);
                                    productMap.put("openingbalanceamountinbase", authHandler.round(openingbalanceamountinbase, companyid));
                                    result = accCurrencyDAOobj.getExcDetailID(currencyParams, currencyId, asOfDate, null);
                                    if (result != null && result.getEntityList() != null && !result.getEntityList().isEmpty()) {
                                        ExchangeRateDetails erd = (ExchangeRateDetails) result.getEntityList().get(0);
                                        if (erd != null) {
                                            productMap.put("exchangerateforopeningbalanceamount", erd.getExchangeRate());
                                        }
                                    }
                                } else {
                                    productMap.put("openingbalanceamountinbase", authHandler.round(openingbalanceamountinbase, companyid));
                                    productMap.put("exchangerateforopeningbalanceamount", 1);
                                }

                                if (productTypeID.equals(Producttype.ASSEMBLY) || productTypeID.equals(Producttype.INVENTORY_PART)) {
                                    if (updateExistingRecordFlag && productOldObj != null) { // Subtract balance from old account
                                        inventoryAccount = productOldObj.getInventoryAccount();
                                        if (inventoryAccount != null) {
                                            accParams.put("accountid", inventoryAccount.getID());
                                            KwlReturnObject amountresult = accCurrencyDAOobj.getBaseToCurrencyAmount(currencyParams, productOldObj.getOpeningBalanceAmountInBase(), inventoryAccount.getCurrency().getCurrencyID(), asOfDate, 0);
                                            double amountInAccountCurrency = inventoryAccount.getOpeningBalance() - (Double) amountresult.getEntityList().get(0);
                                            accParams.put("balance", authHandler.round(amountInAccountCurrency, companyid));
                                            accParams.put("acccode", (StringUtil.isNullOrEmpty(inventoryAccount.getAcccode()))?"":inventoryAccount.getAcccode());
                                            accParams.put("taxid", inventoryAccount.getTaxid() != null ? inventoryAccount.getTaxid() : "");
                                            accAccountDAOobj.updateAccount(accParams);
                                            inventoryAccount = null;
                                        }
                                    }
                                    if (!StringUtil.isNullOrEmpty(inventoryAccountID)) { // Add balance in new account
                                        KwlReturnObject accountresult = accountingHandlerDAOobj.getObject(Account.class.getName(), inventoryAccountID);
                                        inventoryAccount = (Account) accountresult.getEntityList().get(0);
                                        if (inventoryAccount != null) {
                                            accParams.put("accountid", inventoryAccount.getID());
                                            KwlReturnObject amountresult = accCurrencyDAOobj.getBaseToCurrencyAmount(currencyParams, openingbalanceamountinbase, inventoryAccount.getCurrency().getCurrencyID(), asOfDate, 0);
                                            double amountInAccountCurrency = inventoryAccount.getOpeningBalance() + (Double) amountresult.getEntityList().get(0);
                                            accParams.put("balance", authHandler.round(amountInAccountCurrency, companyid));
                                            accParams.put("acccode", (StringUtil.isNullOrEmpty(inventoryAccount.getAcccode()))?"":inventoryAccount.getAcccode());
                                            accParams.put("taxid", inventoryAccount.getTaxid() != null ? inventoryAccount.getTaxid() : "");
                                            accAccountDAOobj.updateAccount(accParams);
                                            inventoryAccount = null;
                                        }
                                    }
                                }
                            } catch (Exception ex) {
                                Logger.getLogger(Importproduct.class.getName()).log(Level.WARNING, ex.getMessage());
                            }
                        }

                        KwlReturnObject productresult = null;
                        String auditID = "", auditAction ="";
                        if (!updateExistingRecordFlag || (newProductAddinUpdateCase && updateExistingRecordFlag)) {
                            productresult = accProductObj.addProduct(productMap);
                            auditID = AuditAction.PRODUCT_CREATION;
                            auditAction = "created";
                        } else {
                            productresult = accProductObj.updateProduct(productMap);
                            auditID = AuditAction.PRODUCT_UPDATION;  
                            auditAction = "updated";
                        }
                        Product product = (Product) productresult.getEntityList().get(0);

                        Object remoteAddress = requestParams1.containsKey("remoteAddress")?requestParams1.get("remoteAddress") : Constants.defaultIp;
                        insertAuditLog(auditID,auditAction, remoteAddress.toString(), "Product", product, user);
                        
//                        if (!productTypeID.equals(Producttype.SERVICE)) {
//                            // creating Price list Hashmap
//                            HashMap<String, Object> cycleParams = new HashMap<String, Object>();
//                            cycleParams.put("productid", product.getID());
//                            cycleParams.put("interval", Integer.parseInt(productCycleCountInterval));
//                            cycleParams.put("tolerance", Integer.parseInt(productCycleCountTolerance));
//                            accProductObj.saveProductCycleCount(cycleParams);
//                        }
                        // if at company level warehouse/location/batch/serial/row/rack/bin one this option is true then we are not updating intial quantity from here. 
                        if (isAddUpdateInitialQuantity == false && productInitialQuantity.length() > 0) { //&& !updateExistingRecordFlag
                            JSONObject inventoryjson = new JSONObject();
                            inventoryjson.put("productid", product.getID());
                            inventoryjson.put("quantity", Double.parseDouble(productInitialQuantity));
                            if (!isUsedInTransaction) {
                                inventoryjson.put("baseuomquantity", Double.parseDouble(productInitialQuantity));
                            }
                            inventoryjson.put("baseuomrate", 1);
                            if (product.getUnitOfMeasure() != null) {
                                inventoryjson.put("uomid", product.getUnitOfMeasure().getID());
                            }
                            inventoryjson.put("description", "Inventory Opened");
                            inventoryjson.put("carryin", true);
                            inventoryjson.put("defective", false);
                            inventoryjson.put("newinventory", true);
                            inventoryjson.put("companyid", companyid);
                            inventoryjson.put("updatedate", asOfDate);

//                            String batchLocationId= "";
//                            String batchWarehouseId="";
//                            double batchQty=0;
//                            KwlReturnObject openingBatchDetail= accImportServiceObj.getProductOpeningQtyBatchDetail(product);
//                            
//                            double prodInitPurchasePrice = 0;
//                            if (productInitialPurchasePrise.length() > 0 && !isUsedInTransaction) {
//                                prodInitPurchasePrice = Double.parseDouble(productInitialPurchasePrise);
//                            }
                            if (!updateExistingRecordFlag || (newProductAddinUpdateCase && updateExistingRecordFlag)) {
                                KwlReturnObject newInvObj = accProductObj.addInventory(inventoryjson);
//                                if(!StringUtil.isNullOrEmpty(productDefaultLocationID) && !StringUtil.isNullOrEmpty(productDefaultWarehouseID) && isInventoryIntegrationOn){
//                                    accImportServiceObj.addStockInventorySide(newInvObj,inventoryjson,productDefaultWarehouseID,productDefaultLocationID,prodInitPurchasePrice);
//                                }
                            } else if (columnConfig.containsKey("quantity")) { // if this is product import(ie. update product import),then quantity column  is removed from mapping,so this will be called only while add product case - Raj Shaha
                                KwlReturnObject updatedInvObj = accProductObj.updateInitialInventory(inventoryjson);
//                                if (openingBatchDetail != null && openingBatchDetail.getEntityList() != null && openingBatchDetail.getRecordTotalCount() > 0) {
//                                    Iterator it1=openingBatchDetail.getEntityList().iterator();
//                                    // if new batch,serial,warehouse,location data is available then only delete previous stock for product
//                                    if(openingBatchDetail.getEntityList().size() > 0){ 
//                                        accImportServiceObj.deleteStockAndSMForProduct(product);//delete stock
//                                        while(it1.hasNext()){ // add new stock
//                                            LocationBatchDocumentMapping lbm = (LocationBatchDocumentMapping) it1.next();
//                                            if (lbm != null) {
//                                                batchWarehouseId = lbm.getBatchmapid().getWarehouse() != null ? lbm.getBatchmapid().getWarehouse().getId() : "";
//                                                batchLocationId = lbm.getBatchmapid().getLocation() != null ? lbm.getBatchmapid().getLocation().getId() : "";
//                                                if (!StringUtil.isNullOrEmpty(batchLocationId) && !StringUtil.isNullOrEmpty(batchWarehouseId) && isInventoryIntegrationOn) {
//                                                    accImportServiceObj.updateStockInventorySide(updatedInvObj, inventoryjson,lbm,prodInitPurchasePrice);
//                                                }
//                                            }
//
//                                        }
//                                    }
//
//                                }
                            }

                            HashMap<String, Object> assemblyParams = requestParams1;
                            assemblyParams.put("assembly", "");
                            assemblyParams.put("applydate", new Date());
                            assemblyParams.put("quantity", Double.parseDouble(productInitialQuantity));
                            assemblyParams.put("memo", "Inventory Opened");
                            assemblyParams.put("refno", "");
                            assemblyParams.put("buildproductid", product.getID());
                            accProductObj.updateAssemblyInventory(assemblyParams);
                        }
                        Date ondate = asOfDate;
                        if (productInitialPurchasePrise.length() > 0 && !isUsedInTransaction && columnConfig.containsKey("purchaseprice")) {
                            HashMap<String, Object> requestParams = new HashMap<>();
                            requestParams.put(Constants.productid, product.getID());
                            requestParams.put("carryin", true);
//                            requestParams.put("applydate", ondate);
                            //requestParams.put("price", authHandler.roundUnitPrice(Double.parseDouble(productInitialPurchasePrise),companyid));
                            requestParams.put("affecteduser", "-1");
                            requestParams.put(Constants.currencyKey, currencyId);
                            requestParams.put("initialPrice", true);
                            requestParams.put("uomid", product.getUnitOfMeasure().getID());
                            KwlReturnObject priceResult = accProductObj.getPriceListEntry(requestParams);
                            List list = priceResult.getEntityList();
                            
                            // creating Price list Hashmap
//                            accProductObj.setInitialPriceForProduct(product.getID(), companyid);
                            HashMap<String, Object> initialPurchasePriceMap = new HashMap<String, Object>();
                            initialPurchasePriceMap.put("productid", product.getID());
                            initialPurchasePriceMap.put("companyid", companyid);
                            initialPurchasePriceMap.put("carryin", true);
                            initialPurchasePriceMap.put("initialPrice", true);
                            initialPurchasePriceMap.put("price", authHandler.roundUnitPrice(Double.parseDouble(productInitialPurchasePrise),companyid));
                            initialPurchasePriceMap.put("applydate", ondate);
                            initialPurchasePriceMap.put("affecteduser", "-1");
                            initialPurchasePriceMap.put("currencyid", currencyId);
                            initialPurchasePriceMap.put("uomid", product.getUnitOfMeasure().getID());
                            if(list != null && list.size() > 0){
                                PriceList price = (PriceList) list.get(0);
                                initialPurchasePriceMap.put("priceid", price.getID());
                                accProductObj.updatePriceList(initialPurchasePriceMap); 
                            }else{
                            accProductObj.addPriceList(initialPurchasePriceMap);
                        }
                        }

                        if (productSalesPrice.length() > 0 && !isUsedInTransaction && columnConfig.containsKey("saleprice")) {
                            HashMap<String, Object> requestParams = new HashMap<>(); //  Checking exsting price exits for same date if present then update other wise insert new
                            requestParams.put(Constants.productid, product.getID());
                            requestParams.put("carryin", false);
                            requestParams.put("applydate", ondate);
//                            requestParams.put("price", authHandler.roundUnitPrice(Double.parseDouble(productSalesPrice),companyid));
                            requestParams.put("affecteduser", "-1");
                            requestParams.put(Constants.currencyKey, currencyId);
                            requestParams.put("uomid", product.getUnitOfMeasure().getID());
                            KwlReturnObject priceResult = accProductObj.getPriceListEntry(requestParams);
                            List list = priceResult.getEntityList();
                            
                            // creating Price list Hashmap
                            HashMap<String, Object> salesPriceMap = new HashMap<String, Object>();
                            salesPriceMap.put("productid", product.getID());
                            salesPriceMap.put("companyid", companyid);
                            salesPriceMap.put("carryin", false);
                            salesPriceMap.put("price", authHandler.roundUnitPrice(Double.parseDouble(productSalesPrice),companyid));
                            salesPriceMap.put("applydate", ondate);
                            salesPriceMap.put("affecteduser", "-1");
                            salesPriceMap.put("currencyid", currencyId);
                            salesPriceMap.put("uomid", product.getUnitOfMeasure().getID());
                            if (list != null && list.size() > 0) {
                                PriceList price = (PriceList) list.get(0);
                                salesPriceMap.put("priceid", price.getID());
                                accProductObj.updatePriceList(salesPriceMap); 
                            } else {
                            accProductObj.addPriceList(salesPriceMap);
                        }
                        }

                        customfield = customJArr.toString();
                        if (!StringUtil.isNullOrEmpty(customfield)) {
                            JSONArray jcustomarray = new JSONArray(customfield);
                            HashMap<String, Object> customrequestParams = new HashMap<String, Object>();
                            customrequestParams.put("customarray", jcustomarray);
                            customrequestParams.put("modulename", Constants.Acc_Product_modulename);
                            customrequestParams.put("moduleprimarykey", Constants.Acc_Productid);
                            customrequestParams.put("modulerecid", product.getID());
                            customrequestParams.put("moduleid", Constants.Acc_Product_Master_ModuleId);
                            customrequestParams.put("companyid", companyid);
                            productMap.put("id", product.getID());
                            customrequestParams.put("customdataclasspath", Constants.Acc_Product_custom_data_classpath);
                            KwlReturnObject customDataresult = fieldDataManagercntrl.setCustomData(customrequestParams);
                            if (customDataresult != null && customDataresult.getEntityList().size() > 0) {
                                productMap.put("accproductcustomdataref", product.getID());
                                productresult = accProductObj.updateProduct(productMap);
                            }
                            HashMap<String, Object> customHistoryParams = new HashMap<String, Object>();
                            customHistoryParams.put("productId", product.getID());
                            customHistoryParams.put("customarray", jcustomarray);
                            requestParams1.put("gstapplieddate", gstapplicabledate!=null?gstapplicabledate:product.getAsOfDate());
                            maintainCustomFieldHistoryForProduct(requestParams1, customHistoryParams);
                        }
                        
                        // Tax Mapping for India Company Company Level Tax Mapp to Product Default.                        
//                        if (extraCompanyPreferences.getLineLevelTermFlag() == IndiaComplianceConstants.LINELEVEL_FLAG_ON) {
//                            HashMap<String, String> mapDataInd = new HashMap<String, String>();
//                            mapDataInd.put("productid", product.getID());
//                            mapDataInd.put("companyid", extraCompanyPreferences.getCompany().getCompanyID());
//                            Map<String, List<String>> mapDefaultTerm = new HashMap<String, List<String>>();
//                            mapDefaultTerm.put("Purchases", inputDefaultTerms);
//                            mapDefaultTerm.put("Sales", outputDefaultTerms);
//                            if (!updateExistingRecordFlag) {
//                                accProductObj.mapCompanyTaxToProductTax(mapDataInd, product, mapDefaultTerm); //send Default Terms data for addinng default terms  while importing product Input/ Output terms  
//                            } else {
//                                accProductObj.UpdateTaxToProductTax(mapDataInd, product, mapDefaultTerm); //send Default Terms data for addinng default terms  while importing product Input/ Output terms     
//                            }
//                        }
                        
                    } catch (Exception ex) {
                        failed++;
                        String errorMsg = ex.getMessage(), invalidColumns = "";
                        try {
                            JSONObject errorLog = new JSONObject("errorMsg");
                            errorMsg = errorLog.getString("errorMsg");
                            invalidColumns = errorLog.getString("invalidColumns");
                        } catch (JSONException jex) {
                            // Logger.getLogger(Importproduct.class.getName()).log(Level.SEVERE, null, jex);
                        }
//                        failedRecords.append("\n" + accProductModuleService.createCSVrecord(recarr.toArray()) + "\"" + errorMsg.replaceAll("\"", "") + "\"");
                        ArrayList failureRecArr = new ArrayList();
                        failureRecArr.addAll(recarr);
                        failureRecArr.add(errorMsg.replaceAll("\"", ""));
                        failureArr.add(failureRecArr);
                        
                        failureColumnArr.add(invalidColumn);
                    }
                    total++;
                }
                cnt++;

                if (count == limit) {
                    KwlReturnObject companyObj = accountingHandlerDAOobj.getObject(ImportLog.class.getName(), logId);
                    ImportLog importLog = (ImportLog) companyObj.getEntityList().get(0);
                    importLog.setLog("Imported " + ((cnt - failed) - 1) + " records  successfully and failed to import " + failed + " records.");
                    importLog.setRejected(failed);
                    importLog.setTotalRecs(total);
                    txnManager.commit(status);

                    // for reset counter of transaction limit
                    count = 1;
                    def = new DefaultTransactionDefinition();
                    def.setName("import_Tx");
                    def.setPropagationBehavior(TransactionDefinition.PROPAGATION_REQUIRED);
                    status = txnManager.getTransaction(def);
                } else {
                    count++;
                }
            }

            if (failed > 0) {
//                createFailureFiles(fileName, failedRecords, ".csv");
                importDao.createFailureXlsFiles(fileName, failureArr, ".xls", failureColumnArr);
            }

            int success = total - failed;
            if (total == 0) {
                msg = "Empty file.";
            } else if (success == 0) {
//                issuccess = false;
                msg = "Failed to import all the records.";
            } else if (success == total) {
                msg = "All records are imported successfully.";
            } else {
                msg = "Imported " + success + " record" + (success > 1 ? "s" : "") + " successfully";
                msg += (failed == 0 ? "." : " and failed to import " + failed + " record" + (failed > 1 ? "s" : "") + ".");
            }

            try {
                txnManager.commit(status);
            } catch (Exception ex) {
                commitedEx = true;
                throw ex;
            }
        } catch (Exception ex) {
            if (!commitedEx) { //if exception occurs during commit then dont call rollback
                txnManager.rollback(status);
            }
            issuccess = false;
            msg = "" + ex.getMessage();
            Logger.getLogger(Importproduct.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
            throw new AccountingException("Error While Importing Records.");
        } finally {
//            fileInputStream.close();
//            br.close();
            // processQueue.remove(requestParams1);
            //this.isworking = false;
            DefaultTransactionDefinition ldef = new DefaultTransactionDefinition();
            ldef.setName("import_Tx");
            ldef.setPropagationBehavior(TransactionDefinition.PROPAGATION_REQUIRED);
            TransactionStatus lstatus = txnManager.getTransaction(ldef);

            try {
                //Insert Integration log
                HashMap<String, Object> logDataMap = new HashMap<String, Object>();
                logDataMap.put("FileName", getActualFileName(fileName));
                logDataMap.put("StorageName", fileName);
                logDataMap.put("Log", msg);
                logDataMap.put("Type", "xls");
                logDataMap.put("FailureFileType", failed>0?"xls":"");
                logDataMap.put("TotalRecs", total);
                logDataMap.put("Rejected", failed);
                logDataMap.put("Module", Constants.Acc_Product_Master_ModuleId);
                logDataMap.put("ImportDate", new Date());
                logDataMap.put("User", userId);
                logDataMap.put("Company", companyid);
                logDataMap.put("Id", logId);
                importDao.saveImportLog(logDataMap);

                String tableName = importDao.getTableName(fileName);
                importDao.removeFileTable(tableName); // Remove table after importing all records

                txnManager.commit(lstatus);
            } catch (Exception ex) {
                txnManager.rollback(lstatus);
                Logger.getLogger(Importproduct.class.getName()).log(Level.SEVERE, null, ex);
            }

            try {
                returnObj.put("success", issuccess);
                returnObj.put("msg", msg);
                returnObj.put("totalrecords", total);
                returnObj.put("successrecords", total - failed);
                returnObj.put("failedrecords", failed);
                returnObj.put("filename", getActualFileName(fileName));
                returnObj.put("Module", Constants.Acc_Product_Master_ModuleId);
            } catch (JSONException ex) {
                Logger.getLogger(Importproduct.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return returnObj;

    }

    @Transactional(propagation = Propagation.REQUIRED)
    private void saveProductPrice(String companyid, String currencyId, boolean isCurrencyCode, String[] recarr, HashMap currencyMap, HashMap<String, Integer> columnConfig, HashMap<String, Object> requestParam, MutableInt total, MutableInt failed, StringBuilder failedRecords, DateFormat df, String dateFormat, User user,ExtraCompanyPreferences extraPref, List importlist, CompanyAccountPreferences companyAccountPreferences) throws ServiceException {
        String failureMsg = "";
        boolean isSalesPriceCol=true;
        boolean isPurchasePriceCol=true;
        try {

            String productID = "";
            if (columnConfig.containsKey("productid")) {
                productID = recarr[(Integer) columnConfig.get("productid")].replaceAll("\"", "").trim();
                if (!StringUtil.isNullOrEmpty(productID)) {
                    productID = productID.replaceAll("\"", "");
                } else {
                    failureMsg += "Product ID is not available.";
                }
            } else {
                failureMsg += "Product ID column is not found.";
            }

            String customerId = "";
            if (columnConfig.containsKey("customer")) {
                String customerCode = recarr[(Integer) columnConfig.get("customer")].replaceAll("\"", "").trim();
                if (!StringUtil.isNullOrEmpty(customerCode)) {
                    customerId = getCustomerIDByCode(customerCode, companyid);
                    if (StringUtil.isNullOrEmpty(customerId)) {
                        failureMsg += "Customer is not found for Code " + customerCode + ".";
                    }
                }
            }

            String vendorId = "";
            if (columnConfig.containsKey("vendor")) {
                String vendorCode = recarr[(Integer) columnConfig.get("vendor")].replaceAll("\"", "").trim();
                if (!StringUtil.isNullOrEmpty(vendorCode)) {
                    vendorId = getVendorIDByCode(vendorCode, companyid);
                    if (StringUtil.isNullOrEmpty(vendorId)) {
                        failureMsg += "Vendor is not found for Code " + vendorCode + ".";
                    }
                }
            }

            String productPurchasePrice = "";
            if (columnConfig.containsKey("purchasePrice")) {
                productPurchasePrice = recarr[(Integer) columnConfig.get("purchasePrice")].replaceAll("\"", "").trim();
                productPurchasePrice = productPurchasePrice.replaceAll(",", "");
            } else{
                isPurchasePriceCol=false;
            }

            String productSalesPrice = "";
            if (columnConfig.containsKey("salesPrice")) {
                productSalesPrice = recarr[(Integer) columnConfig.get("salesPrice")].replaceAll("\"", "").trim();
                productSalesPrice = productSalesPrice.replaceAll(",", "");
            } else{
                isSalesPriceCol=false;
            }
            
            /*
            Check if at least one price column is present or not.
            */
            if(!(isPurchasePriceCol || isSalesPriceCol)){
                 failureMsg += "Sales or Purchase price column is not found.Please insert Sales or Purchase Price column in File or insert both.";
            }

            Date productPriceDate = null;
            if (columnConfig.containsKey("applyDate")) {
                String productPriceDateStr = recarr[(Integer) columnConfig.get("applyDate")].replaceAll("\"", "").trim();

                if (StringUtil.isNullOrEmpty(productPriceDateStr)) {
                    failureMsg += "Product Price Applicable Date is not available.";
                } else {
                    try {
                        JSONObject params = new JSONObject();
                        params.put("date", productPriceDateStr);
                        params.put("format", dateFormat);
                        if (!StringUtil.isDateMatchingWithDateFormat(params)) {
                            failureMsg += "Incorrect date format for Applicable Date, Please specify values in " + dateFormat + " format.";
                        }else{
                            productPriceDate = df.parse(productPriceDateStr);
                        }
                    } catch (Exception ex) {
                        failureMsg += "Incorrect date format for Applicable Date, Please specify values in " + dateFormat + " format.";
                    }
                }
            } else {
                failureMsg += "Applicable Date column is not found.";
            }

            if (isCurrencyCode ? columnConfig.containsKey("currencyCode") : columnConfig.containsKey("currencyName")) {
                String productPriceCurrencyStr = isCurrencyCode ? recarr[(Integer) columnConfig.get("currencyCode")].replaceAll("\"", "").trim() : recarr[(Integer) columnConfig.get("currencyName")].replaceAll("\"", "").trim();
                if (!StringUtil.isNullOrEmpty(productPriceCurrencyStr)) {
                    currencyId = getCurrencyId(productPriceCurrencyStr, currencyMap);

                    if (StringUtil.isNullOrEmpty(currencyId)) {
                        failureMsg += isCurrencyCode ? "Purchase Currency format you entered is not correct. it should be like \\\"(SGD)\\\"." : "Purchase Currency format you entered is not correct. it should be like \\\"SG Dollar (SGD)\\\".";
                    }
                }
            }
            String salescurrencyId = "";
            if (columnConfig.containsKey("SalesCurrency")) {
                String productPriceCurrencyStr = recarr[(Integer) columnConfig.get("SalesCurrency")].replaceAll("\"", "").trim();
                if (!StringUtil.isNullOrEmpty(productPriceCurrencyStr)) {
                    salescurrencyId = getCurrencyId(productPriceCurrencyStr, currencyMap);
                    if (StringUtil.isNullOrEmpty(salescurrencyId)) {
                        failureMsg += isCurrencyCode ? "Sales Currency format you entered is not correct. it should be like \\\"(SGD)\\\"." : "Sales Currency format you entered is not correct. it should be like \\\"SG Dollar (SGD)\\\".";
                    }
                }
            } else {
                salescurrencyId = currencyId;
            }

            String purchasecurrencyId = "";
            if (columnConfig.containsKey("PurchaseCurrency")) {
                String productPriceCurrencyStr = recarr[(Integer) columnConfig.get("PurchaseCurrency")].replaceAll("\"", "").trim();
                if (!StringUtil.isNullOrEmpty(productPriceCurrencyStr)) {
                    purchasecurrencyId = getCurrencyId(productPriceCurrencyStr, currencyMap);
                    if (StringUtil.isNullOrEmpty(purchasecurrencyId)) {
                        failureMsg += isCurrencyCode ? "Purchase Currency format you entered is not correct. it should be like \\\"(SGD)\\\"." : "Purchase Currency format you entered is not correct. it should be like \\\"SG Dollar (SGD)\\\".";
                    }
                }
            } else {
                purchasecurrencyId = currencyId;
            }
            
            // getting product object
            KwlReturnObject result = accProductObj.getProductIDCount(productID, companyid, false);
            int nocount = result.getRecordTotalCount();
            if (nocount == 0 && result.getEntityList().isEmpty()) {
                throw new AccountingException("Product ID '" + productID + "' not exists.");
            } else {
                Product product = (Product) result.getEntityList().get(0);

                /**
                 * Below Code is written to Validate UOM sent in csv file if UOM
                 * is present in master then the uomid is fetched from db and
                 * passed to json to save the price of product mapped with
                 * UOM.If uom is not present then for service type product id of
                 * N/A Uom is set and in case of special rate for customer stock
                 * uomid is set ERM-389 / ERP-35140.
                 */
                String uomName = "";
                String uomid = "";
                if (columnConfig.containsKey("uom")) {
                    uomName = recarr[(Integer) columnConfig.get("uom")].replaceAll("\"", "").trim();
                    if (!StringUtil.isNullOrEmpty(uomName) && !uomName.equals("N/A")) {
                        JSONObject paramsJobj = new JSONObject();
                        paramsJobj.put("companyid", companyid);
                        paramsJobj.put("uomname", uomName);
                        uomid = getUOMId(paramsJobj);
//                    HashMap<String, Object> filterParams = new HashMap<>();
//                    filterParams.put("companyid", companyid);
//                    filterParams.put("uomname", uomName);
//                    KwlReturnObject returnObject = accUomObj.getUnitOfMeasure(filterParams);
//                    List uomList = returnObject.getEntityList();
                        if (StringUtil.isNullOrEmpty(uomid)) {
                            failureMsg += "UOM " + uomName + " not exists. ";
                        }
                    } else if (product.getProducttype().getID().equalsIgnoreCase(Producttype.SERVICE)) {
                        JSONObject paramsJobj = new JSONObject();
                        paramsJobj.put("companyid", companyid);
                        paramsJobj.put("uomname", "N/A");
                        uomid = getUOMId(paramsJobj);
                    } else if (extraPref.isBandsWithSpecialRateForSales()) {
                        uomid = product.getUnitOfMeasure().getID();
                    } else if (!product.getProducttype().getID().equalsIgnoreCase(Producttype.SERVICE) && uomName.equals("N/A")) {
                        failureMsg += "You cannot map price of " + product.getProducttype().getName() + " type product to N/A UOM.";
                    }
                } else if (product.getProducttype().getID().equalsIgnoreCase(Producttype.SERVICE)) {
                    JSONObject paramsJobj = new JSONObject();
                    paramsJobj.put("companyid", companyid);
                    paramsJobj.put("uomname", "N/A");
                    uomid = getUOMId(paramsJobj);
                } else if (extraPref.isBandsWithSpecialRateForSales()) {
                    uomid = product.getUnitOfMeasure().getID();
                } else {                                                //if Special rate is not activated in company preferences and UOM colomn is not found then error message is shown.
                    failureMsg += "UOM column is not found.";
                }

                if (!StringUtil.isNullOrEmpty(failureMsg)) {
                    throw new AccountingException(failureMsg);
                }

            
                String importkey = "";
                // For Purchase Price
                if (productPurchasePrice.length() > 0) {
                    HashMap<String, Object> requestParams = requestParam;// AccountingManager.getGlobalParams(request);
                    requestParams.put("productid", product.getID());
                    requestParams.put("carryin", true);
                    requestParams.put("applydate", productPriceDate);
                    requestParams.put("price", authHandler.roundUnitPrice(Double.parseDouble(productPurchasePrice), companyid));
                    requestParams.put("currencyid", purchasecurrencyId);
                    requestParams.put("companyid", companyid);
                    requestParams.put("initialPrice", false);
                    if (!StringUtil.isNullOrEmpty(uomid)) {
                        requestParams.put("uomid", uomid);              //ERM-389 / ERP-35140
                    }
                    if (!StringUtil.isNullOrEmpty(vendorId)) {
                        // Purchase Price for Vendor
                        requestParams.put("affecteduser", vendorId);
                    } else {
                        // Purchase Price for All
                        requestParams.put("affecteduser", "-1");
                    }

                    importkey = requestParams.get("productid").toString() + "%" + requestParams.get("carryin").toString() + "%" + requestParams.get("applydate").toString() + "%"
                            + requestParams.get("currencyid").toString() + "%" + requestParams.get("companyid").toString() + "%"
                            + requestParams.get("uomid").toString() + "%" + requestParams.get("affecteduser").toString();

                    KwlReturnObject priceListResult = accProductObj.getPriceListEntry(requestParams);
                    List purchasePriceList = priceListResult.getEntityList();

                    HashMap<String, Object> purchacePriceMap = new HashMap<String, Object>();
                    purchacePriceMap.put("price", authHandler.roundUnitPrice(Double.parseDouble(productPurchasePrice), companyid));
                    String auditID = "", auditAction = "";
                    if (purchasePriceList.size() <= 0 && !importlist.contains(importkey)) {
                        purchacePriceMap.put("productid", product.getID());
                        purchacePriceMap.put("companyid", companyid);
                        purchacePriceMap.put("carryin", true);
                        purchacePriceMap.put("applydate", productPriceDate);
                        purchacePriceMap.put("currencyid", purchasecurrencyId);
                        purchacePriceMap.put("uomid", uomid);          //ERM-389 / ERP-35140
                        if (!StringUtil.isNullOrEmpty(vendorId)) {
                            // Purchase Price for Vendor
                            purchacePriceMap.put("affecteduser", vendorId);
                        } else {
                            // Purchase Price for All
                            purchacePriceMap.put("affecteduser", "-1");
                        }
                        accProductObj.addPriceList(purchacePriceMap);
                        auditID = AuditAction.PRODUCT_PRICE_CREATED;
                        auditAction = "created";
                        importlist.add(importkey);
                    } else if (purchasePriceList.size() > 0) {
                        PriceList purchasePrice = (PriceList) purchasePriceList.get(0);
                        purchacePriceMap.put("priceid", purchasePrice.getID());
                        accProductObj.updatePriceList(purchacePriceMap);
                        auditID = AuditAction.PRICE_CHANGED;
                        auditAction = "updated";
                    }
                    Object remoteAddress = requestParam.containsKey("remoteAddress") ? requestParams.get("remoteAddress") : Constants.defaultIp;
                    insertAuditLog(auditID, auditAction, remoteAddress.toString(), "Product Purchase Price", product, user);
                }

                // For Sales Price
                if (productSalesPrice.length() > 0) {
                    HashMap<String, Object> requestParams = requestParam; //AccountingManager.getGlobalParams(request);
                    requestParams.put("productid", product.getID());
                    requestParams.put("carryin", false);
                    requestParams.put("applydate", productPriceDate);
                    requestParams.put("price", authHandler.roundUnitPrice(Double.parseDouble(productSalesPrice), companyid));
                    requestParams.put("currencyid", salescurrencyId);
                    requestParams.put("companyid", companyid);
                    if (!StringUtil.isNullOrEmpty(uomid)) {
                        requestParams.put("uomid", uomid);              //ERM-389 / ERP-35140
                    }
                    if (!StringUtil.isNullOrEmpty(customerId)) {
                        // Sales Price for customer
                        requestParams.put("affecteduser", customerId);
                    } else {
                        // Sales Price for All
                        requestParams.put("affecteduser", "-1");
                    }

                    importkey = requestParams.get("productid").toString() + "%" + requestParams.get("carryin").toString() + "%" + requestParams.get("applydate").toString() + "%"
                            + requestParams.get("currencyid").toString() + "%" + requestParams.get("companyid").toString() + "%"
                            + requestParams.get("uomid").toString() + "%" + requestParams.get("affecteduser").toString();

                    KwlReturnObject salesPriceListResult = accProductObj.getPriceListEntry(requestParams);
                    List salesPriceList = salesPriceListResult.getEntityList();

                    HashMap<String, Object> salesPriceMap = new HashMap<String, Object>();
                    salesPriceMap.put("price", authHandler.roundUnitPrice(Double.parseDouble(productSalesPrice), companyid));
                    String auditID = "", auditAction = "";
                    if (salesPriceList.size() <= 0 && !importlist.contains(importkey)) {
                        salesPriceMap.put("productid", product.getID());
                        salesPriceMap.put("companyid", companyid);
                        salesPriceMap.put("carryin", false);
                        salesPriceMap.put("applydate", productPriceDate);
                        salesPriceMap.put("currencyid", salescurrencyId);
                        salesPriceMap.put("uomid", uomid);                  //ERM-389 / ERP-35140
                        if (!StringUtil.isNullOrEmpty(customerId)) {
                            // Sales Price for customer
                            salesPriceMap.put("affecteduser", customerId);
                        } else {
                            // Sales Price for All
                            salesPriceMap.put("affecteduser", "-1");
                        }
                        accProductObj.addPriceList(salesPriceMap);
                        auditID = AuditAction.PRODUCT_PRICE_CREATED;
                        auditAction = "created";
                        importlist.add(importkey);
                    } else if (salesPriceList.size() > 0) {
                        PriceList salesPrice = (PriceList) salesPriceList.get(0);
                        salesPriceMap.put("priceid", salesPrice.getID());
//                    salesPriceMap.put("uomid", uomid);      //to confirm wether we need to update the UOM
                        accProductObj.updatePriceList(salesPriceMap);
                        auditID = AuditAction.PRICE_CHANGED;
                        auditAction = "updated";
                    }
                    Object remoteAddress = requestParam.containsKey("remoteAddress") ? requestParams.get("remoteAddress") : Constants.defaultIp;
                    insertAuditLog(auditID, auditAction, remoteAddress.toString(), "Product Sales Price", product, user);
                }

                /*
                 * ERP-38309 - Action 2 - Update the opening balance of inventory account with price in #1.
                 */
                if (productPurchasePrice.length() > 0) {
                    if ((extraPref.isActivateMRPModule() || companyAccountPreferences.getInventoryValuationType() == Constants.PERPETUAL_VALUATION_METHOD)) {
                        String productCurrency = product.getCurrency() != null ? product.getCurrency().getCurrencyID() : "";
                        Date asOfDate = product.getAsOfDate() != null ? product.getAsOfDate() : new Date(product.getCreatedon());

                        Map<String, Object> requestDataMap = new HashMap<>();
                        requestDataMap.put("productid", product.getID());
                        KwlReturnObject resultObj = accImportServiceObj.getProductOpeningQtyFromBatchSerial(requestDataMap);
                        double invIntialqty = (resultObj != null && !resultObj.getEntityList().isEmpty() && resultObj.getEntityList().get(0) != null) ? (Double) resultObj.getEntityList().get(0) : 0;
                        if (invIntialqty >= 0) {

                            HashMap<String, Object> productMap = new HashMap<String, Object>();
                            productMap.put("id", product.getID());
                            result = null;
                            double openingbalanceamount = (invIntialqty * authHandler.roundUnitPrice(Double.parseDouble(productPurchasePrice), companyid));
                            double openingbalanceamountinbase = openingbalanceamount;
                            String baseCurrency = (String) requestParam.get(Constants.globalCurrencyKey);
                            productMap.put("openingbalanceamount", authHandler.round(openingbalanceamount, companyid));
                            if (!StringUtil.isNullOrEmpty(productCurrency) && !baseCurrency.equals(productCurrency)) {
                                result = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParam, openingbalanceamount, productCurrency, asOfDate, 0);
                                openingbalanceamountinbase = (Double) result.getEntityList().get(0);
                                productMap.put("openingbalanceamountinbase", authHandler.round(openingbalanceamountinbase, companyid));
                                result = accCurrencyDAOobj.getExcDetailID(requestParam, productCurrency, asOfDate, null);
                                if (result != null && result.getEntityList() != null && !result.getEntityList().isEmpty()) {
                                    ExchangeRateDetails erd = (ExchangeRateDetails) result.getEntityList().get(0);
                                    if (erd != null) {
                                        productMap.put("exchangerateforopeningbalanceamount", erd.getExchangeRate());
                                    }
                                    erd = null;
                                }
                            } else {
                                productMap.put("openingbalanceamountinbase", authHandler.round(openingbalanceamountinbase, companyid));
                                productMap.put("exchangerateforopeningbalanceamount", 1);
                            }

//                                    System.out.println(productObj.getProductid() + "," + invIntialqty + "," + prodInitPurchasePrice + "," + openingbalanceamount + "," + productCurrency + "," + (productMap.get("exchangerateforopeningbalanceamount") != null ? productMap.get("exchangerateforopeningbalanceamount").toString() : "1"));
                            if (product.getProducttype().getID().equals(Producttype.ASSEMBLY) || product.getProducttype().getID().equals(Producttype.INVENTORY_PART)) {
                                JSONObject accParams = new JSONObject();
                                Account inventoryAccount = product.getInventoryAccount();
                                if (inventoryAccount != null) {
                                    accParams.put("accountid", inventoryAccount.getID());
                                    // Subtract balance from account
                                    result = accCurrencyDAOobj.getBaseToCurrencyAmount(requestParam, product.getOpeningBalanceAmountInBase(), inventoryAccount.getCurrency().getCurrencyID(), asOfDate, 0);
                                    double amountInAccountCurrency = inventoryAccount.getOpeningBalance() - (Double) result.getEntityList().get(0);
//                                            accParams.put("balance", authHandler.round(amountInAccountCurrency, companyid));
//                                            accAccountDAOobj.updateAccount(accParams);

                                    // Add balance in account
                                    result = accCurrencyDAOobj.getBaseToCurrencyAmount(requestParam, openingbalanceamount, inventoryAccount.getCurrency().getCurrencyID(), asOfDate, 0);
                                    amountInAccountCurrency = amountInAccountCurrency + (Double) result.getEntityList().get(0);
                                    accParams.put("balance", authHandler.round(amountInAccountCurrency, companyid));
                                    accParams.put("acccode", (StringUtil.isNullOrEmpty(inventoryAccount.getAcccode())) ? "" : inventoryAccount.getAcccode());
                                    accParams.put("taxid", inventoryAccount.getTaxid() != null ? inventoryAccount.getTaxid() : "");
                                    accAccountDAOobj.updateAccount(accParams);

                                    accParams = null;
                                    result = null;
                                    inventoryAccount = null;
                                    baseCurrency = null;
                                    productCurrency = null;
                                }
                            }
                            /*
                             * ERP-38309 - Action 3 - Update product's openingbalanceamountinbase and openingbalanceamount with import
                             */
                            accProductObj.updateProduct(productMap);
                        }
                    }
                }
            }
        } catch (Exception ex) {
            failed.increment();
            String errorMsg = ex.getMessage(), invalidColumns = "";
            try {
                JSONObject errorLog = new JSONObject(errorMsg);
                errorMsg = errorLog.getString("errorMsg");
                invalidColumns = errorLog.getString("invalidColumns");
            } catch (JSONException jex) {
            }
            failedRecords.append("\n" + accProductModuleService.createCSVrecord(recarr) + "\"" + errorMsg.replaceAll("\"", "") + "\"");
        }
        total.increment();
    }
    
    public JSONObject importProductPriceCSV(HashMap<String, Object> requestParam) throws JSONException, AccountingException, IOException {
//        DefaultTransactionDefinition def = new DefaultTransactionDefinition();
//        def.setName("import_Tx");
//        def.setPropagationBehavior(TransactionDefinition.PROPAGATION_REQUIRED);
//        TransactionStatus status = txnManager.getTransaction(def);
//        boolean commitedEx = false;
        boolean issuccess = true;
        String msg = "";
        FileInputStream fileInputStream = null;
        CsvReader csvReader = null;
        int totalInt = 0, failedInt = 0;
        int limit = Constants.Transaction_Commit_Limit;
        int count = 1;
        String companyid = requestParam.get("companyid").toString();
        String currencyId = requestParam.get("currencyId").toString();
        String userId = requestParam.get("userid").toString();
//        String currencyId = sessionHandlerImpl.getCurrencyID(request);
//        String companyid = sessionHandlerImpl.getCompanyid(request);
//        String userId = sessionHandlerImpl.getUserid(request);

        JSONObject jobj = new JSONObject();
        jobj = (JSONObject) requestParam.get("jobj");
        String fileName = jobj.getString("filename");
        String masterPreference = requestParam.get("masterPreference").toString();
        String delimiterType = requestParam.get("delimiterType").toString();
        String timzonediff = jobj.getString("timeZoneDifferenceId");
        String dateformateproduct = jobj.getString("dateformateproduct");
        JSONObject returnObj = new JSONObject();
        String failureMsg = "";
        String logId = null;
        MutableInt total= new MutableInt(0), failed = new MutableInt(0);
        try {
            KwlReturnObject userresult = accountingHandlerDAOobj.getObject(User.class.getName(), userId);
            User user = (User) userresult.getEntityList().get(0);  
            logId = addPendingImportLog(requestParam);
            String dateFormat = null, dateFormatId = dateformateproduct;
            if (!StringUtil.isNullOrEmpty(dateFormatId)) {

                KwlReturnObject kdfObj = accountingHandlerDAOobj.getObject(KWLDateFormat.class.getName(), dateFormatId);
                KWLDateFormat kdf = (KWLDateFormat) kdfObj.getEntityList().get(0);

                dateFormat = kdf != null ? kdf.getJavaForm() : null;
            }
            ExtraCompanyPreferences extraPref = (ExtraCompanyPreferences) kwlCommonTablesDAOObj.getClassObject("com.krawler.common.admin.ExtraCompanyPreferences", companyid);
            CompanyAccountPreferences companyAccountPreferences = (CompanyAccountPreferences) kwlCommonTablesDAOObj.getClassObject("com.krawler.hql.accounting.CompanyAccountPreferences", companyid);
            boolean isCurrencyCode=extraPref.isCurrencyCode();
            SimpleDateFormat sdf = new SimpleDateFormat(dateFormat);
//            sdf.setTimeZone(TimeZone.getTimeZone("GMT" + timzonediff));//sessionHandlerImpl.getTimeZoneDifference(request)
            DateFormat df = sdf; // For ERP-13295
            fileInputStream = new FileInputStream(jobj.getString("FilePath"));
            csvReader = new CsvReader(new InputStreamReader(fileInputStream), delimiterType);
            int cnt = 0;

            StringBuilder failedRecords = new StringBuilder();

            HashMap<String, Integer> columnConfig = new HashMap<>();
            JSONArray jSONArray = jobj.getJSONArray("resjson");
            for (int i = 0; i < jSONArray.length(); i++) {
                JSONObject jSONObject = jSONArray.getJSONObject(i);
                columnConfig.put(jSONObject.getString("dataindex"), jSONObject.getInt("csvindex"));
            }

            HashMap currencyMap = getCurrencyMap(isCurrencyCode);
            List<String> importlist = new ArrayList<String>();

            while (csvReader.readRecord()) {
                failureMsg = "";
                String[] recarr = csvReader.getValues();
                if (cnt == 0) {
                    failedRecords.append(accProductModuleService.createCSVrecord(recarr) + "\"Error Message\"");
                }
                if (cnt != 0) {
                    saveProductPrice(companyid, currencyId, isCurrencyCode, recarr, currencyMap, columnConfig, requestParam, total, failed, failedRecords, df, dateFormat, user,extraPref, importlist, companyAccountPreferences);     //ERM-389 / ERP-35140
                }
                cnt++;
                if (count == limit) {
//                    txnManager.commit(status);

                    // for reset counter of transaction limit
                    count = 1;
//                    def = new DefaultTransactionDefinition();
//                    def.setName("import_Tx");
//                    def.setPropagationBehavior(TransactionDefinition.PROPAGATION_REQUIRED);
//                    status = txnManager.getTransaction(def);
                } else {
                    count++;
                }
            }

            failedInt = failed.intValue();
            totalInt=total.intValue();
            if (failedInt > 0) {
                createFailureFiles(fileName, failedRecords, ".csv");
            }

            int success = totalInt - failedInt;
            if (totalInt == 0) {
                msg = "Empty file.";
            } else if (success == 0) {
//                issuccess = false;
                msg = "Failed to import all the records.";
            } else if (success == totalInt) {
                msg = "All records are imported successfully.";
            } else {
                msg = "Imported " + success + " record" + (success > 1 ? "s" : "") + " successfully";
                msg += (failedInt == 0 ? "." : " and failed to import " + failedInt + " record" + (failedInt > 1 ? "s" : "") + ".");
            }

//            try {
//                txnManager.commit(status);
//            } catch (Exception ex) {
//                commitedEx = true;
//                throw ex;
//            }
        } catch (Exception ex) {
//            if (!commitedEx) { //if exception occurs during commit then dont call rollback
//                txnManager.rollback(status);
//            }
            issuccess = false;
            msg = "" + ex.getMessage();

            Logger.getLogger(accProductController.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
            throw new AccountingException("Error While Importing Records.");
        } finally {
            fileInputStream.close();
            csvReader.close();

//            DefaultTransactionDefinition ldef = new DefaultTransactionDefinition();
//            ldef.setName("import_Tx");
//            ldef.setPropagationBehavior(TransactionDefinition.PROPAGATION_REQUIRED);
//            TransactionStatus lstatus = txnManager.getTransaction(ldef);

            try {
                //Insert Integration log
                HashMap<String, Object> logDataMap = new HashMap<String, Object>();
                logDataMap.put("FileName", getActualFileName(fileName));
                logDataMap.put("StorageName", fileName);
                logDataMap.put("Log", msg);
                logDataMap.put("Type", "csv");
                logDataMap.put("FailureFileType", failedInt>0?"csv":"");
                logDataMap.put("TotalRecs", totalInt);
                logDataMap.put("Rejected", failedInt);
                logDataMap.put("Module", Constants.Acc_Product_Price_List_ModuleId);
                logDataMap.put("ImportDate", new Date());
                logDataMap.put("User", userId);
                logDataMap.put("Company", companyid);
                logDataMap.put("Id", logId);
                importDao.saveImportLog(logDataMap);

                String tableName = importDao.getTableName(fileName);
                importDao.removeFileTable(tableName); // Remove table after importing all records

//                txnManager.commit(lstatus);
            } catch (Exception ex) {
//                txnManager.rollback(lstatus);
                Logger.getLogger(accProductController.class.getName()).log(Level.SEVERE, null, ex);
            }

            try {
                returnObj.put("success", issuccess);
                returnObj.put("msg", msg);
                returnObj.put("totalrecords", totalInt);
                returnObj.put("successrecords", totalInt - failedInt);
                returnObj.put("failedrecords", failedInt);
                returnObj.put("filename", getActualFileName(fileName));
            } catch (JSONException ex) {
                Logger.getLogger(accProductController.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

        return returnObj;
    }

    private String getCustomerIDByCode(String customerCode, String companyID) throws AccountingException {
        String customerID = "";
        try {
            if (!StringUtil.isNullOrEmpty(customerCode) && !StringUtil.isNullOrEmpty(companyID)) {
                KwlReturnObject retObj = accProductObj.getCustomerIDByCode(customerCode, companyID);
                List list = retObj.getEntityList();
                Iterator itr = list.iterator();
                while (itr.hasNext()) {
                    customerID = (String) itr.next();
                }
            }
        } catch (Exception ex) {
            Logger.getLogger(accProductController.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
            throw new AccountingException("System Failure while fetching Customer");
        }
        return customerID;
    }

    private String getVendorIDByCode(String vendorCode, String companyID) throws AccountingException {
        String vendorID = "";
        try {
            if (!StringUtil.isNullOrEmpty(vendorCode) && !StringUtil.isNullOrEmpty(companyID)) {
                KwlReturnObject retObj = accProductObj.getVendorIDByCode(vendorCode, companyID);
                List list = retObj.getEntityList();
                Iterator itr = list.iterator();
                while (itr.hasNext()) {
                    vendorID = (String) itr.next();
                }
            }
        } catch (Exception ex) {
            Logger.getLogger(accProductController.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
            throw new AccountingException("System Failure while fetching Vendor");
        }
        return vendorID;
    }

    //Save Assembly Product
    public void saveImportAssemblyProduct(JSONArray bomarray, Product assemblyProduct, boolean updateExistingRecordFlag, String companyid) throws ServiceException {
        try {
//            if (updateExistingRecordFlag) {  //This function need to implement to update inventory in case of update existing product
//                updateImportBillofMaterialsInventory(bomarray, assemblyProduct, companyid);
//            }
//                accProductObj.deleteProductAssembly(assemblyProduct.getID());

            // for checking is default bom details added for Assembly producdt
            BOMDetail bomdetail = null;
            boolean isDefaultBOMAdded = false;
            Map<String, Object> subBOMMap = new HashMap<>();
            subBOMMap.put("productid", assemblyProduct.getID());
            subBOMMap.put("isdefaultbom", true);
            KwlReturnObject subReturnObject = accProductObj.getBOMDetail(subBOMMap);
            if (subReturnObject != null && subReturnObject.getEntityList() != null && !subReturnObject.getEntityList().isEmpty()) {
                bomdetail = (BOMDetail) subReturnObject.getEntityList().get(0);
                isDefaultBOMAdded = true;
            }
            
            HashMap<String, Object> assemblyMap = new HashMap<String, Object>();
            for (int i = 0; i < bomarray.length(); i++) {
                JSONObject obj = new JSONObject();
                obj = (JSONObject) bomarray.get(i);
                
                /*
                * If bomCode is present in file and MRP is activated then check for resepective bom code Else as per old flow check for Default BOM
                */
                boolean isBOMAdded = isDefaultBOMAdded;
                if(obj.has("bomCode") && !StringUtil.isNullOrEmpty(obj.getString("bomCode"))){
                    isBOMAdded = false;
                    subBOMMap = new HashMap<>();
                    subBOMMap.put("productid", assemblyProduct.getID());
                    subBOMMap.put("bomCode", obj.getString("bomCode"));
                    subReturnObject = accProductObj.getBOMDetail(subBOMMap);
                    if (subReturnObject != null && subReturnObject.getEntityList() != null && !subReturnObject.getEntityList().isEmpty()) {
                        bomdetail = (BOMDetail) subReturnObject.getEntityList().get(0);
                        isBOMAdded = true;
                    }
                }
                
                // For adding default BOM Details
                if (!isBOMAdded) {
                    Map<String, Object> bomMap = new HashMap<>();
                    bomMap.put("productid", assemblyProduct.getID());
                    /*
                    * If bomCode is present in file and MRP is activated then save resepective bom code Else as per old flow save Default BOM
                    */
                    if(obj.has("bomCode") && !StringUtil.isNullOrEmpty(obj.getString("bomCode"))){
                        bomMap.put("bomCode", obj.getString("bomCode"));
//                        bomMap.put("isdefaultbom", !isDefaultBOMAdded);
                        bomMap.put("isdefaultbom", obj.optString("isDefaultBOM"));
                        bomMap.put("bomName", obj.optString("bomName"));
                    } else {
                        bomMap.put("assigndefaultbomcode", true);
                    }
                    KwlReturnObject bomdetailResult = accProductObj.saveBOMDetail(bomMap);
                    bomdetail = bomdetailResult.getEntityList() != null ? (BOMDetail) bomdetailResult.getEntityList().get(0) : null;
                }
                // if Assembly details contains Assembly Product then get its default bom detail id as subbomid
                try {
                    KwlReturnObject productList = accProductObj.getProductByID((String) obj.get("bomproductpid"), companyid);
                    Product subproduct = productList.getEntityList() != null ? (Product) productList.getEntityList().get(0) : null;
                    if (subproduct != null) {
                        if (subproduct.getProducttype().getID().equals(Producttype.ASSEMBLY)) {
                            subBOMMap = new HashMap<>();
                            subBOMMap.put("productid", subproduct.getID());
                            subBOMMap.put("isdefaultbom", true);
                            subReturnObject = accProductObj.getBOMDetail(subBOMMap);
                            if (subReturnObject != null && subReturnObject.getEntityList() != null && !subReturnObject.getEntityList().isEmpty()) {
                                BOMDetail subbom = (BOMDetail) subReturnObject.getEntityList().get(0);
                                assemblyMap.put("subbomid", subbom.getID());
                            }
                        }
                    }
                } catch (Exception ex) {
                    Logger.getLogger(accProductController.class.getName()).log(Level.INFO, ex.getMessage());
                }
                
                assemblyMap.put("bomdetailid", bomdetail != null ? bomdetail.getID() : "");
                assemblyMap.put("productid", assemblyProduct.getID());

                if (!StringUtil.isNullObject(obj.get("bomproductpid"))) {
                    assemblyMap.put("subproductid", (String) obj.get("bomproductpid"));
                }

                if (!StringUtil.isNullObject(obj.get("compQuantity"))) {
                    assemblyMap.put("quantity", (Double) obj.get("compQuantity"));
                }

                if (!StringUtil.isNullObject(obj.get("comppercent"))) {
                    assemblyMap.put("percentage", (Double) obj.get("comppercent"));
                }

                if (!StringUtil.isNullObject(obj.get("compactualQuantity"))) {
                    assemblyMap.put("actualquantity", (Double) obj.get("compactualQuantity"));
                }

                if (!StringUtil.isNullObject(obj.get("inventoryquantiy"))) {
                    assemblyMap.put("inventoryquantiy", (Double) obj.get("inventoryquantiy"));
                }

                if (!StringUtil.isNullObject(obj.get("recylequantity"))) {
                    assemblyMap.put("recylequantity", obj.get("recylequantity"));
                }

                if (!StringUtil.isNullObject(obj.get("remainingquantity"))) {
                    assemblyMap.put("remainingquantity", obj.get("remainingquantity"));
                }
                
                accProductObj.saveProductAssembly(assemblyMap); //Save Assembly Product
            }//for
        } catch (Exception ex) {
            throw ServiceException.FAILURE("saveAssemblyProduct : " + ex.getMessage(), ex);
        }
    }

    public Product getProductByProductName(String companyid, String productTypeID) throws AccountingException {
        Product product = null;
        try {
            if (!StringUtil.isNullOrEmpty(productTypeID)) {
                KwlReturnObject retObj = accProductObj.getProductByProductName(companyid, productTypeID);
                if (retObj != null && !retObj.getEntityList().isEmpty()) {
                    product = (Product) retObj.getEntityList().get(0);
                }
            }
        } catch (Exception ex) {
            Logger.getLogger(accProductController.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
            throw new AccountingException("System Failure while fetching Product Details");
        }
        return product;
    }

    public Producttype getProductTypeByProductID(String productTypeID) throws AccountingException {
        Producttype producttype = null;
        try {
            if (!StringUtil.isNullOrEmpty(productTypeID)) {
                KwlReturnObject retObj = accProductObj.getProductTypeByProductID(productTypeID);
                if (retObj != null && !retObj.getEntityList().isEmpty()) {
                    producttype = (Producttype) retObj.getEntityList().get(0);
                }
            }
        } catch (Exception ex) {
            Logger.getLogger(accProductController.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
            throw new AccountingException("System Failure while fetching Product Type");
        }
        return producttype;
    }

    public static String getActualFileName(String storageName) {
        String ext = storageName.substring(storageName.lastIndexOf("."));
        String actualName = storageName.substring(0, storageName.lastIndexOf("_"));
        actualName = actualName + ext;
        return actualName;
    }

    public String createCSVrecord(Object[] listArray) {
       return accProductModuleService.createCSVrecord(listArray);
    }

    public void createFailureFiles(String filename, StringBuilder failedRecords, String ext) {
         accProductModuleService.createFailureFiles(filename, failedRecords, ext);
    }

    public Product maintainCustomFieldHistoryForProduct(HttpServletRequest request) throws SessionExpiredException, ServiceException {
        String productId = request.getParameter("productId");
        String fieldId = request.getParameter("fieldId");
        String value = request.getParameter("value");
        String applyDateString = request.getParameter("applyDate");
        String creationDateString = request.getParameter("creationDate");
        String loginId = sessionHandlerImpl.getUserid(request);
        String moduleIdString = request.getParameter("moduleId");
        String customfield = request.getParameter("customfield");
        int moduleId = 0;
        if (!StringUtil.isNullOrEmpty(moduleIdString)) {
            moduleId = Integer.parseInt(moduleIdString);
        }
        Date applyDate = null;
        Date creationDate = null;
        if (!StringUtil.isNullOrEmpty(applyDateString)) {
            try {
                applyDate = authHandler.getDateFormatter(request).parse(applyDateString);
            } catch (ParseException ex) {
                Logger.getLogger(Importproduct.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        if (!StringUtil.isNullOrEmpty(creationDateString)) {
            try {
                creationDate = authHandler.getDateFormatter(request).parse(creationDateString);
            } catch (ParseException ex) {
                Logger.getLogger(Importproduct.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        HashMap<String, Object> requestParams = new HashMap<String, Object>();
        requestParams = AccountingManager.getGlobalParams(request);
        requestParams.put("productId", productId);
        requestParams.put("fieldId", fieldId);
        requestParams.put("value", value);
        requestParams.put("applyDate", applyDate);
        requestParams.put("creationDate", creationDate);
        requestParams.put("loginId", loginId);
        requestParams.put("moduleId", moduleId);
        KwlReturnObject fieldReturnObject = accProductObj.getCustomFieldHistoryForProduct(requestParams);
        List list = fieldReturnObject.getEntityList();
        if (list.size() > 0) {
            accProductObj.deleteCustomFieldHistoryForProduct(requestParams);
        }
        KwlReturnObject returnObject = accProductObj.maintainCustomFieldHistoryForProduct(requestParams);
        ProductCustomFieldHistory customFieldHistory = (ProductCustomFieldHistory) returnObject.getEntityList().get(0);
        Product product = null;
        if (customFieldHistory != null) {
            product = customFieldHistory.getProduct();
        }

        SimpleDateFormat sdf = new SimpleDateFormat("MMMM d, yyyy");
        Date currDate = new Date();
        try {
            applyDate = sdf.parse(sdf.format(applyDate));
            currDate = sdf.parse(sdf.format(currDate));
        } catch (ParseException ex) {
            Logger.getLogger(Importproduct.class.getName()).log(Level.SEVERE, null, ex);
        }
        if (applyDate.equals(currDate)) {// we will update here AccProductCustomData values only in this condition
            saveCustomFieldData(request);
        }
        return product;
    }

    public void saveCustomFieldData(HttpServletRequest request) {
        String customfield = request.getParameter("customfield");
        if (!StringUtil.isNullOrEmpty(customfield)) {
            try {
                HashMap<String, Object> customrequestParams = new HashMap<String, Object>();
                String productId = request.getParameter("productId");
                customrequestParams = AccountingManager.getGlobalParams(request);
                JSONArray jcustomarray = new JSONArray(customfield);
                customrequestParams.put("customarray", jcustomarray);
                customrequestParams.put("modulename", Constants.Acc_Product_modulename);
                customrequestParams.put("moduleprimarykey", Constants.Acc_Productid);
                customrequestParams.put("modulerecid", productId);
                customrequestParams.put("moduleid", Constants.Acc_Product_Master_ModuleId);
                customrequestParams.put("id", productId);
                customrequestParams.put("customdataclasspath", Constants.Acc_Product_custom_data_classpath);
                KwlReturnObject customDataresult = fieldDataManagercntrl.setCustomData(customrequestParams);
            } catch (ServiceException ex) {
                Logger.getLogger(Importproduct.class.getName()).log(Level.SEVERE, null, ex);
            } catch (SessionExpiredException ex) {
                Logger.getLogger(Importproduct.class.getName()).log(Level.SEVERE, null, ex);
            } catch (JSONException ex) {
                Logger.getLogger(Importproduct.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

    public void maintainCustomFieldHistoryForProduct(HashMap<String, Object> requestParams1, HashMap<String, Object> customrequestParams) {
        try {
            JSONArray jcustomarray = (JSONArray) customrequestParams.get("customarray");
            String loginId = requestParams1.get("userid").toString();   // sessionHandlerImpl.getUserid(request);
            SimpleDateFormat sdf = new SimpleDateFormat("MMMM d, yyyy");
            Date applyDate=authHandler.getOnlyDateFormat().parse(authHandler.getOnlyDateFormat().format(new Date()));
            if(requestParams1.containsKey("ApplyDate") && requestParams1.get("ApplyDate") != null){
                applyDate = (Date) (requestParams1.get("ApplyDate"));
            }
            int moduleId = 30;
            String countryid = "";
            if (requestParams1.containsKey("countryid")) {
                countryid = (String) requestParams1.get("countryid");
            }
            if (!StringUtil.isNullOrEmpty(countryid) && countryid.equalsIgnoreCase("" + Constants.indian_country_id) && requestParams1.containsKey("gstapplieddate")) {
                applyDate = (Date) requestParams1.get("gstapplieddate");
            }
            //Date applyDate = (Date) (requestParams1.get("ApplyDate")); //authHandler.getDateOnlyFormatter(request).parse(authHandler.getDateOnlyFormatter(request).format(new Date()));
            for (int i = 0; i < jcustomarray.length(); i++) {
                HashMap<String, Object> requestParams = requestParams1;
                String productId = "";
                String fieldId = "";
                
                String value = "";
                JSONObject jobj = jcustomarray.getJSONObject(i);
                if (jobj != null) {
                    productId = (String) customrequestParams.get("productId");
                    fieldId = jobj.getString("fieldid");
                    moduleId = 30;
                    int fieldType = jobj.getInt("xtype");
                    value = jobj.getString("fieldDataVal");
                    requestParams.put("productId", productId);
                    requestParams.put("fieldId", fieldId);
                    requestParams.put("value", value);
                    requestParams.put("applyDate", applyDate);
                    requestParams.put("moduleId", moduleId);
                    requestParams.put("creationDate", applyDate);
                    requestParams.put("loginId", loginId);
                    KwlReturnObject fieldReturnObject = accProductObj.getCustomFieldHistoryForProduct(requestParams);
                    List list = fieldReturnObject.getEntityList();
                    if (list.size() > 0) {
                        accProductObj.deleteCustomFieldHistoryForProduct(requestParams);
                    }
                    if ((fieldType == 1 || fieldType == 2) && !StringUtil.isNullOrEmpty(value)) {
                        KwlReturnObject returnObject = accProductObj.maintainCustomFieldHistoryForProduct(requestParams);
                    } else if (!StringUtil.isNullOrEmpty(countryid) && countryid.equalsIgnoreCase("" + Constants.indian_country_id) && fieldType == 4 && jobj.optString("fieldname").equalsIgnoreCase("Custom_" + Constants.GSTProdCategory)) {
                        /**
                         * Save Product tax class history.
                         */
                        String fieldname = jobj.optString("fieldname");
                        String coldata = jobj.optString(fieldname);
                        value = jobj.optString(coldata);
                        requestParams.put("value", value);
                        List histList = accProductObj.getGstProductHistory(requestParams);
                        if (!histList.isEmpty() && histList.get(0) != null) {
                            requestParams.put("id", (String) histList.get(0));
                        }
                        /**
                         * Save audit trail entry for Product Tax Class History
                         */
                        JSONObject paramsJObj = new JSONObject();
                        paramsJObj.put(Constants.productid, productId);
                        paramsJObj.put("ProductTaxClassValue", value);
                        DateFormat df = authHandler.getDateOnlyFormat();
                        paramsJObj.put("gstapplieddate", df.format(applyDate));
                        if (requestParams1.containsKey(Constants.reqHeader) && requestParams1.get(Constants.reqHeader) != null) {
                            paramsJObj.put(Constants.reqHeader, requestParams1.get(Constants.reqHeader).toString());
                        }
                        if (requestParams1.containsKey(Constants.remoteIPAddress) && requestParams1.get(Constants.remoteIPAddress) != null) {
                            paramsJObj.put(Constants.remoteIPAddress, requestParams1.get(Constants.remoteIPAddress).toString());
                        }
                        if (requestParams1.containsKey(Constants.useridKey) && requestParams1.get(Constants.useridKey) != null) {
                            paramsJObj.put(Constants.useridKey, requestParams1.get(Constants.useridKey).toString());
                        }
                        if (requestParams1.containsKey(Constants.userfullname) && requestParams1.get(Constants.userfullname) != null) {
                            paramsJObj.put(Constants.userfullname, requestParams1.get(Constants.userfullname).toString());
                        }
                        if (requestParams1.containsKey(Constants.companyKey) && requestParams1.get(Constants.companyKey) != null) {
                            paramsJObj.put(Constants.companyKey, requestParams1.get(Constants.companyKey).toString());
                        }
                        accProductModuleService.saveProductGSTHistoryAuditTrail(paramsJObj);
                        /**
                         * Save history for Product tax Class.
                         */
                        KwlReturnObject returnObject = accProductObj.maintainCustomFieldHistoryForProduct(requestParams);
                    }
//                    else if((fieldType == 1 || fieldType == 2) && StringUtil.isNullOrEmpty(value)){
//                        KwlReturnObject returnObject = accProductObj.deleteCustomFieldHistoryForProduct(requestParams);
//                    }
                }

            }
        } catch (Exception e) {
            Logger.getLogger(Importproduct.class.getName()).log(Level.SEVERE, null, e);
        }
    }

    private UnitOfMeasure getUOMByName(String productUOMName, String companyID) throws AccountingException {
        return accProductModuleService.getUOMByName(productUOMName, companyID);
    }

    private InventoryWarehouse getInventoryWarehouseByName(String inventoryWarehouse, String companyID) throws AccountingException {
        return accProductModuleService.getInventoryWarehouseByName(inventoryWarehouse, companyID);
    }

    private Vendor getVendorByName(String vendorName, String companyID) throws AccountingException {
        return accProductModuleService.getVendorByName(vendorName, companyID);
    }

    private InventoryLocation getInventoryLocationByName(String inventoryLocation, String companyID) throws AccountingException {
        return accProductModuleService.getInventoryLocationByName(inventoryLocation, companyID);
    }
    
    public Location getLocationByID(String locID, String companyID) throws AccountingException {
        return accProductModuleService.getLocationByID(locID, companyID);
    }

    private UOMschemaType getUOMschemaTypeByName(String uomSchemaTypeName, String companyID) throws AccountingException {
        UOMschemaType uomSchemaType = null;
        try {
            if (!StringUtil.isNullOrEmpty(uomSchemaTypeName) && !StringUtil.isNullOrEmpty(companyID)) {
                KwlReturnObject retObj = accUomObj.getUOMschemaTypeByName(uomSchemaTypeName, companyID);
                if (retObj != null && !retObj.getEntityList().isEmpty()) {
                    uomSchemaType = (UOMschemaType) retObj.getEntityList().get(0);
                }
            }
        } catch (Exception ex) {
            Logger.getLogger(Importproduct.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
            throw new AccountingException("System Failure while fetching UOM Schema");
        }
        return uomSchemaType;
    }

    private Tax getTaxByCode(String accountCode, String companyID) throws AccountingException {
        Tax tax = null;
        try {
            if (!StringUtil.isNullOrEmpty(accountCode) && !StringUtil.isNullOrEmpty(companyID)) {
                KwlReturnObject retObj = accAccountDAOobj.getTaxFromCode(companyID, accountCode);
                if (retObj != null && !retObj.getEntityList().isEmpty()) {
                    tax = (Tax) retObj.getEntityList().get(0);
                }
            }
        } catch (Exception ex) {
            Logger.getLogger(ImportProduct.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
            throw new AccountingException("System Failure while fetching Tax");
        }
        return tax;
    }

    private String getCurrencyId(String currencyName, HashMap currencyMap) {
       return accProductModuleService.getCurrencyId(currencyName, currencyMap);
    }

    private Account getAccountByName(String accountName, String companyID) throws AccountingException {
        return accProductModuleService.getAccountByName(accountName, companyID);
    }

    private Product getProductByProductID(String productID, String companyID) throws AccountingException {
        return accProductModuleService.getProductByProductID(productID, companyID);
    }

    private Producttype getProductTypeByName(String productTypeName) throws AccountingException {
        return  accProductModuleService.getProductTypeByName(productTypeName);
    }

    public HashMap getCurrencyMap(boolean isCurrencyCode) throws ServiceException {
       return accProductModuleService.getCurrencyMap(isCurrencyCode);
    }
    
    public Map<Integer, Frequency> getCCFrequencyMap() throws ServiceException {
        return accProductModuleService.getCCFrequencyMap();
    }
    public JSONObject importProductopeningqtyRecords(HashMap<String, Object> requestParams) throws AccountingException, IOException, SessionExpiredException, JSONException {
        DefaultTransactionDefinition def = new DefaultTransactionDefinition();
        def.setName("import_Tx");
        def.setPropagationBehavior(TransactionDefinition.PROPAGATION_REQUIRED);
//        def.setIsolationLevel(TransactionDefinition.ISOLATION_READ_UNCOMMITTED); 
        TransactionStatus status = txnManager.getTransaction(def);
        boolean commitedEx = false;
        boolean issuccess = true;
        String msg = "";
        FileInputStream fileInputStream = null;
//        BufferedReader br = null;
        CsvReader csvReader = null;
        int total = 0, failed = 0;
        String companyid = requestParams.get("companyid").toString();
        String currencyId = requestParams.get("currencyId").toString();
        String userId = requestParams.get("userid").toString();
        List<String> productList= new ArrayList<>();
        Map <String,List<JSONObject>> batchMap = new HashMap<>();
        Map <String,List<Object>> batchSerialMap = new HashMap<>();
        List <String> SerialMap = new ArrayList<>();
        Map<String, Object> productDetailMap = new HashMap<>();
        JSONArray batchDetailArr = new JSONArray();
        JSONObject jobj = new JSONObject();
        jobj = (JSONObject) requestParams.get("jobj");
        String dateformateproduct = jobj.getString("dateformateproduct");
        String masterPreference = requestParams.get("masterPreference").toString();
        String fileName = jobj.getString("filename");
        String delimiterType = requestParams.get("delimiterType").toString();
        Date bookBeginningDate =  (Date) requestParams.get("bookbeginning");
        JSONObject returnObj = new JSONObject();
        boolean isInventoryIntegrationOn=false;
        String logId = null;
        Locale locale = null;
        if (requestParams.containsKey("locale")) {
            locale = (Locale) requestParams.get("locale");
        }
        JSONObject productDetailsObj = new JSONObject();
        String prevProductID="";
        double totalBatchQty=0;
        boolean isRecordFailed=false;
        try {
            logId = addPendingImportLog(requestParams);
            boolean isBatchForProduct = false;
            boolean isSerialForProduct = false;
            boolean isLocationForProduct = false;
            boolean isWarehouseForProduct = false;
            boolean isRowForProduct = false;
            boolean isRackForProduct = false;
            boolean isBinForProduct = false;
            String productid="";
            boolean isImported=false;
            boolean isBookClosed = false;
            if (requestParams.containsKey("isBookClosed") && requestParams.get("isBookClosed") != null) {
                isBookClosed = (Boolean) requestParams.get("isBookClosed");
            }
            KwlReturnObject kmsg = null;
            
            KwlReturnObject extraCompanyPrefResult = accountingHandlerDAOobj.getObject(ExtraCompanyPreferences.class.getName(), companyid);
            ExtraCompanyPreferences extraCompanyPreferences = (ExtraCompanyPreferences) extraCompanyPrefResult.getEntityList().get(0);
            
            extraCompanyPrefResult = accountingHandlerDAOobj.getObject(CompanyAccountPreferences.class.getName(), companyid);
            CompanyAccountPreferences preferences = (CompanyAccountPreferences) extraCompanyPrefResult.getEntityList().get(0);
            
            isInventoryIntegrationOn = extraCompanyPreferences.isActivateInventoryTab();
            boolean isCurrencyCode=extraCompanyPreferences.isCurrencyCode();
            Date newUserDate = new Date();
            KwlReturnObject custumObjresult = accountingHandlerDAOobj.getObject(Company.class.getName(), companyid);
            Company company1 = (Company) custumObjresult.getEntityList().get(0);
            if (company1.getCreator() != null) {
                newUserDate = authHandler.getUserNewDate(null, company1.getCreator().getTimeZone()!=null?company1.getCreator().getTimeZone().getDifference() : company1.getTimeZone().getDifference());
            }
            String dateFormat = null, dateFormatId = dateformateproduct;
            if (!StringUtil.isNullOrEmpty(dateFormatId)) {
                KwlReturnObject kdfObj = accountingHandlerDAOobj.getObject(KWLDateFormat.class.getName(), dateFormatId);
                KWLDateFormat kdf = (KWLDateFormat) kdfObj.getEntityList().get(0);
                dateFormat = kdf != null ? kdf.getJavaForm() : null;
            }
            
            SimpleDateFormat df = new SimpleDateFormat(dateFormat);
            KwlReturnObject jeresult = accountingHandlerDAOobj.getObject(User.class.getName(), userId);
            User user = (User) jeresult.getEntityList().get(0);
            fileInputStream = new FileInputStream(jobj.getString("FilePath"));
            csvReader = new CsvReader(new InputStreamReader(fileInputStream), delimiterType);
            String record = "";
            int cnt = 0;
            int count = 1;
            int limit = Constants.Transaction_Commit_Limit;

            StringBuilder failedRecords = new StringBuilder();
            StringBuilder singleInvociceFailedRecords = new StringBuilder();
            int singleProductFailureCount=0; // Count total no of Product Fail
            Set<String> failureList = new HashSet<>(); // set of invoice having failyure record's

            HashMap<String, Integer> columnConfig = new HashMap<String, Integer>();
            JSONArray jSONArray = jobj.getJSONArray("resjson");
            for (int i = 0; i < jSONArray.length(); i++) {
                JSONObject jSONObject = jSONArray.getJSONObject(i);

                columnConfig.put(jSONObject.getString("dataindex"), jSONObject.getInt("csvindex"));
            }
            HashMap currencyMap = getCurrencyMap(isCurrencyCode);
            boolean isfailurerecord = false; // used to keep track Invoice Row  failure/correct
            while (csvReader.readRecord()) {
                String[] recarr = csvReader.getValues();
                if (cnt != 0) {
                    try {
//                        currencyId = currencyId;    //sessionHandlerImpl.getCurrencyID(request);
                        isfailurerecord = false;
                        NewProductBatch productBatch = null;
                        String productBatchId = "";
                        String productID = "";
                        if (columnConfig.containsKey("productid")) {
                            productID = recarr[(Integer) columnConfig.get("productid")].replaceAll("\"", "").trim();
                            if (!StringUtil.isNullOrEmpty(productID)) {
                                productID = productID.replaceAll("\"", "");
                                if (productID.endsWith("”")) {
                                    productID = productID.substring(0, productID.length() - 1) + '"';
                                }
                            } else {
                                throw new AccountingException("Product ID is not available.");
                            }
                        } else {
                            throw new AccountingException("Product ID column is not found.");
                        }

                        // getting product object
                        KwlReturnObject result = accProductObj.getProductIDCount(productID, companyid,false);
                        int nocount = result.getRecordTotalCount();
                        if (nocount == 0) {
                            throw new AccountingException("productID '" + productID + "' not exists.");
                        }
                        Product product = (Product) result.getEntityList().get(0);
                          // Creating Product Details JSON
                        if (!prevProductID.equalsIgnoreCase(productID) || productID.equalsIgnoreCase("")) {
                            if (failureList.contains(productID)) {
                                if (singleProductFailureCount > 0) {
                                    failedRecords.append(singleInvociceFailedRecords);
                                }
                                singleInvociceFailedRecords = new StringBuilder();
                                singleProductFailureCount = 0;
                            }
                            
                            if (!isRecordFailed) { //rows.length() > 0 &&
                                if (batchDetailArr.length() > 0) {
                                    Map<String, Object> resultMap = manipulateRowDetails(productDetailMap, batchSerialMap, batchMap, batchDetailArr, failedRecords, singleInvociceFailedRecords, singleProductFailureCount, totalBatchQty, isRecordFailed);
                                    if (resultMap.containsKey("totalBatchQty")) {
                                        totalBatchQty = (double) resultMap.get("totalBatchQty");
                                    }
                                    if (resultMap.containsKey("isRecordFailed")) {
                                        isRecordFailed = (boolean) resultMap.get("isRecordFailed");
                                        if (!isRecordFailed) {
                                            productDetailMap = new HashMap<>();
                                            batchSerialMap = new HashMap<>();
                                            batchDetailArr = new JSONArray();
                                            totalBatchQty = 0;
                                        } 
                                    }
                                    if (resultMap.containsKey("batchMap") && resultMap.get("batchMap") != null) {
                                        batchMap = (Map<String, List<JSONObject>>) resultMap.get("batchMap");
                                    }
                                    String batchDetails = "";
                                    if (resultMap.containsKey("batchdetails") && resultMap.get("batchdetails") != null) {
                                        batchDetails = (String) resultMap.get("batchdetails");
                                    }

                                    if (!StringUtil.isNullOrEmpty(batchDetails)) {
                                        Date asOfDate = productDetailsObj.has("asOfDate") ? (Date) productDetailsObj.get("asOfDate") : new Date();
                                        Product productObj = productDetailsObj.has("product") ? (Product) productDetailsObj.get("product") : null;
                                        if (productObj != null) {
                                            double prodInitPurchasePrice = 0;
                                            KwlReturnObject initPurchasePriceObj = accProductObj.getInitialPrice(productObj.getID(), true);

                                            if (initPurchasePriceObj != null && initPurchasePriceObj.isSuccessFlag() && initPurchasePriceObj.getEntityList() != null && initPurchasePriceObj.getEntityList().get(0) != null) {
                                                prodInitPurchasePrice = (double) initPurchasePriceObj.getEntityList().get(0);
                                            }

                                            productObj.setAsOfDate(asOfDate);//update the asofdate in product table also. 
                                            List<StockMovement> stockMovementsList = new ArrayList<StockMovement>();
                                            
                                            JSONArray batchDeatilArr =new JSONArray();
                                            JSONArray jArr = new JSONArray(batchDetails);
                                                for (int i = 0; i < jArr.length(); i++) {
                                                JSONObject jSONObject = new JSONObject(jArr.get(i).toString());
                                                if (jSONObject.has("quantity") && !jSONObject.getString("quantity").equals("undefined") && !jSONObject.getString("quantity").isEmpty()) {
                                                    Map<String, Object> requestData = new HashMap<>();
                                                    requestData.put("productid", productObj.getID());
                                                    if (jSONObject.has("warehouse")) {
                                                        requestData.put("warehouse", jSONObject.optString("warehouse"));
                                                    }
                                                    if (jSONObject.has("location")) {
                                                        requestData.put("location", jSONObject.optString("location"));
                                                    }
                                                    if (jSONObject.has("batch")) {
                                                        requestData.put("batch", jSONObject.optString("batch"));
                                                    }
                                                    accImportServiceObj.deleteProductBatchSerialDetails(requestData);
                                                    
                                                    if (jSONObject.optDouble("quantity") != 0 ) {
                                                        batchDeatilArr.put(jSONObject);
                                                    }
                                                    } else {
                                                        batchDeatilArr.put(jSONObject);
                                                    }
                                                }

                                            Map<String, Object> requestDataMap = new HashMap<>();
                                            requestDataMap.put("asOfDate", asOfDate);;
                                            requestDataMap.put("initialprice", prodInitPurchasePrice);  //  initialprice
                                            saveProductBatch(batchDeatilArr.toString(), productObj, requestDataMap, stockMovementsList);
                                            isImported=true;
//                                            txnManager.commit(status);
//                                            status = txnManager.getTransaction(def);
                                        }
                                    }

                                }

                            }
                            isRecordFailed = false;
                            prevProductID = productID;

                        }    
                        
                        if (product != null) {
                            isBatchForProduct = product.isIsBatchForProduct();
                            isSerialForProduct = product.isIsSerialForProduct();
                            isLocationForProduct = product.isIslocationforproduct();
                            isWarehouseForProduct = product.isIswarehouseforproduct();
                            isRowForProduct = product.isIsrowforproduct();
                            isRackForProduct = product.isIsrackforproduct();
                            isBinForProduct = product.isIsbinforproduct();
                            
                            productid=product.getID();
                            if(!productList.contains(productid)){
                                productList.add(productid);
                            }
                            
                            String warehouse = null;
                            String location = null;
                            double batchquantity = 0;
                            String serialName = "";
                            String batchName = "";
                            String rowName = "";
                            String rackName = "";
                            String binName = "";

                            InventoryWarehouse warehouseObj = null;
                            InventoryLocation locationObj = null;
                            NewProductBatch productBatchObj=null;
                            StoreMaster rowObj = null;
                            StoreMaster rackObj = null;
                            StoreMaster binObj = null;

                            boolean isProductUsedInTransaction = accImportServiceObj.isProductUsedInTransaction(companyid, product.getID());
                            if (isProductUsedInTransaction) {
                                throw new AccountingException("Product is already used in transaction,so can't update its opening quantity.");
                            }
                            
                            // ERP-28052 Check Currency and Product Currency is same or not
                            if(columnConfig.containsKey("currencyName") && columnConfig.get("currencyName")!=null && !StringUtil.isNullOrEmpty(columnConfig.get("currencyName").toString())){
                                String currency = recarr[(Integer) columnConfig.get("currencyName")].replaceAll("\"", "").trim();
                                String productCurrencyName = product.getCurrency().getName();
                                if(!StringUtil.isNullOrEmpty(currency) && !currency.equalsIgnoreCase(productCurrencyName)){
                                    throw new AccountingException("Currency '"+ currency +"' does not match with Product Currency '"+ productCurrencyName +"'.");
                                }
                            }
                            
                            String invalidColumns = "";
                            String failureMsg = "";
                            if(isWarehouseForProduct){
                                if (columnConfig.containsKey("warehouseName") && recarr.length > (Integer)columnConfig.get("warehouseName")) {
                                    warehouse = recarr[(Integer) columnConfig.get("warehouseName")].replaceAll("\"", "").trim();
                                    if(StringUtil.isNullOrEmpty(warehouse)){
                                        if(!StringUtil.isNullOrEmpty(invalidColumns)){
                                            invalidColumns +=",";
                                        }
                                        invalidColumns += " Warehouse";
                                    }
                                }else{
                                    if (!StringUtil.isNullOrEmpty(invalidColumns)) {
                                        invalidColumns += ",";
                                    }
                                    invalidColumns += " Warehouse";
                                }
                            }
                            if(isLocationForProduct){
                                if (columnConfig.containsKey("locationName") && recarr.length > (Integer)columnConfig.get("locationName")) {
                                    location = recarr[(Integer) columnConfig.get("locationName")].replaceAll("\"", "").trim();
                                    if(StringUtil.isNullOrEmpty(location)){
                                        if(!StringUtil.isNullOrEmpty(invalidColumns)){
                                            invalidColumns +=",";
                                        }
                                        invalidColumns += " Location";
                                    }
                                }else{
                                    if (!StringUtil.isNullOrEmpty(invalidColumns)) {
                                        invalidColumns += ",";
                                    }
                                    invalidColumns += " Location";
                                }
                            }
                            if(isRowForProduct){
                                if (columnConfig.containsKey("row") && recarr.length > (Integer)columnConfig.get("row")) {
                                    rowName = recarr[(Integer) columnConfig.get("row")].replaceAll("\"", "").trim();
                                    if(StringUtil.isNullOrEmpty(rowName)){
                                        if(!StringUtil.isNullOrEmpty(invalidColumns)){
                                            invalidColumns +=",";
                                        }
                                        invalidColumns += " Row";
                                    }
                                }else{
                                    if (!StringUtil.isNullOrEmpty(invalidColumns)) {
                                        invalidColumns += ",";
                                    }
                                    invalidColumns += " Row";
                                }
                            }
                            if(isRackForProduct){
                                if (columnConfig.containsKey("rack") && recarr.length > (Integer)columnConfig.get("rack")) {
                                    rackName = recarr[(Integer) columnConfig.get("rack")].replaceAll("\"", "").trim();
                                    if(StringUtil.isNullOrEmpty(rackName)){
                                        if(!StringUtil.isNullOrEmpty(invalidColumns)){
                                            invalidColumns +=",";
                                        }
                                        invalidColumns += " Rack";
                                    }
                                }else{
                                    if (!StringUtil.isNullOrEmpty(invalidColumns)) {
                                        invalidColumns += ",";
                                    }
                                    invalidColumns += " Rack";
                                }
                            }
                            if(isBinForProduct){
                                if (columnConfig.containsKey("bin") && recarr.length > (Integer)columnConfig.get("bin")) {
                                    binName = recarr[(Integer) columnConfig.get("bin")].replaceAll("\"", "").trim();
                                    if(StringUtil.isNullOrEmpty(binName)){
                                        if(!StringUtil.isNullOrEmpty(invalidColumns)){
                                            invalidColumns +=",";
                                        }
                                        invalidColumns += " Bin";
                                    }
                                }else{
                                    if (!StringUtil.isNullOrEmpty(invalidColumns)) {
                                        invalidColumns += ",";
                                    }
                                    invalidColumns += " Bin";
                                }
                            }
                            if(isBatchForProduct){
                                if (columnConfig.containsKey("batch") && recarr.length > (Integer)columnConfig.get("batch")) {
                                    batchName = recarr[(Integer) columnConfig.get("batch")].replaceAll("\"", "").trim();
                                    if(StringUtil.isNullOrEmpty(batchName)){
                                        if(!StringUtil.isNullOrEmpty(invalidColumns)){
                                            invalidColumns +=",";
                                        }
                                        invalidColumns += " Batch";
                                    }
                                }else{
                                    if (!StringUtil.isNullOrEmpty(invalidColumns)) {
                                        invalidColumns += ",";
                                    }
                                    invalidColumns += " Batch";
                                }
                            }
                            if(isSerialForProduct){
                                if (columnConfig.containsKey("serial") && recarr.length > (Integer)columnConfig.get("serial")) {
                                    serialName = recarr[(Integer) columnConfig.get("serial")].replaceAll("\"", "").trim();
                                    if(StringUtil.isNullOrEmpty(serialName)){
                                        if(!StringUtil.isNullOrEmpty(invalidColumns)){
                                            invalidColumns +=",";
                                        }
                                        invalidColumns += " Serial";
                                    }
                                }else{
                                    if (!StringUtil.isNullOrEmpty(invalidColumns)) {
                                        invalidColumns += ",";
                                    }
                                    invalidColumns += " Serial";
                                }
                            }
                            
                          
                            
                             String mfgdateStr = "";
                            if (isBatchForProduct && columnConfig.containsKey("mfgdate")) {
                                mfgdateStr = recarr[(Integer) columnConfig.get("mfgdate")].replaceAll("\"", "").trim();
                                if (!StringUtil.isNullOrEmpty(mfgdateStr)) {
                                    try {
                                        Date mfgDateObj = df.parse(mfgdateStr);
                                        mfgdateStr = authHandler.getDateOnlyFormat().format(mfgDateObj);
                                    } catch (Exception ex) {
                                        failureMsg += "Incorrect date format for mfg Date, Please specify values in " + dateFormat + " format. ";
                                    }
                                }
                            }

                            String expdateStr = "";
                            if (isBatchForProduct && columnConfig.containsKey("expdate")) {
                                expdateStr = recarr[(Integer) columnConfig.get("expdate")].replaceAll("\"", "").trim();
                                if (!StringUtil.isNullOrEmpty(expdateStr)) {
                                    try {
                                        Date expDateObj = df.parse(expdateStr);
                                        expdateStr = authHandler.getDateOnlyFormat().format(expDateObj);
                                    } catch (Exception ex) {
                                        failureMsg += "Incorrect date format for expriy Date, Please specify values in " + dateFormat + " format. ";
                                    }
                                }
                            }

                            String expstartStr = "";
                            if (columnConfig.containsKey("expstart")) {
                                expstartStr = recarr[(Integer) columnConfig.get("expstart")].replaceAll("\"", "").trim();
                                if (!StringUtil.isNullOrEmpty(expstartStr)) {
                                    try {
                                        Date mfgDateObj = df.parse(expstartStr);
                                        expstartStr = authHandler.getDateOnlyFormat().format(mfgDateObj);
                                    } catch (Exception ex) {
                                        failureMsg += "Incorrect date format for mfg Date, Please specify values in " + dateFormat + " format. ";
                                    }
                                }
                            }

                            String expendStr = "";
                            if (columnConfig.containsKey("expend")) {
                                expendStr = recarr[(Integer) columnConfig.get("expend")].replaceAll("\"", "").trim();
                                if (!StringUtil.isNullOrEmpty(expendStr)) {
                                    try {
                                        Date expDateObj = df.parse(expendStr);
                                        expendStr = authHandler.getDateOnlyFormat().format(expDateObj);
                                    } catch (Exception ex) {
                                        failureMsg += "Incorrect date format for expriy Date, Please specify values in " + dateFormat + " format. ";
                                    }
                                }
                            }

                            
                            if(!StringUtil.isNullOrEmpty(invalidColumns)){
                                String exceptionMsg=invalidColumns;
                                if(!StringUtil.isNullOrEmpty(failureMsg)){
                                    throw new AccountingException(invalidColumns +" is not available."+exceptionMsg);
                                }else{
                                    throw new AccountingException(invalidColumns +" is not available.");
                                }
                                
                                
                            }
                            String serialKey = product.getProductid();
                            String productDefaultLocationID = "";
                            if (isLocationForProduct && !StringUtil.isNullOrEmpty(location)) {
                                 locationObj = accProductModuleService.getInventoryLocationByName(location, companyid);
                                if (locationObj != null) {
                                    productDefaultLocationID = locationObj.getId();
                                } else {
                                    if (masterPreference.equalsIgnoreCase("2")) {
                                        HashMap requestParam = requestParams;//AccountingManager.getGlobalParams(request);
                                        requestParam.put("id", "");
                                        requestParam.put("name", location);
                                        requestParam.put("parent", null);
                                        requestParam.put("user", user);
                                        KwlReturnObject locationResult = accMasterItemsDAOobj.addLocationItem(requestParam);
                                        locationObj = (InventoryLocation) locationResult.getEntityList().get(0);
                                        productDefaultLocationID = locationObj.getId();
                                    } else {
                                        if (masterPreference.equalsIgnoreCase("1")) {
                                            productDefaultLocationID = null;
                                        } else {
                                            throw new AccountingException("Default Location is not found for " + location);
                                        }
                                    }
                                }
                                 serialKey = !isBatchForProduct ?serialKey:serialKey + locationObj.getName();
                            } else {
                                if (masterPreference.equalsIgnoreCase("1")) {
                                    productDefaultLocationID = null;
                                } else {
                                    throw new AccountingException("Default Location is not available.");
                                }
                            }

                            String warehouseID = "";
                            if (isWarehouseForProduct && !StringUtil.isNullOrEmpty(warehouse)) {
                                   warehouseObj = accProductModuleService.getInventoryWarehouseByName(warehouse, companyid);
                                    if (warehouseObj != null) {
                                        warehouseID = warehouseObj.getId();
                                    } else {
                                        if (masterPreference.equalsIgnoreCase("2")) {
                                            Store store = new Store();
                                            store.setStoreType(storeService.getStoreType(0));//Set Store type to warehouse
                                            store.setAbbreviation(warehouse);
                                            store.setDescription(warehouse);
                                            store.setCcDateAllow(false);//set Default False
                                            store.setSmccAllow(false);//set Default False
                                            store.setCreatedBy(user);
                                            Set<User> userSet = new HashSet<>();
                                            userSet.add(user);
                                            Set<User> executiveSet = new HashSet<>();
                                            executiveSet.add(user);
                                            store.setCompany(user.getCompany());
                                            store.setStoreManagerSet(userSet);
                                            store.setStoreExecutiveSet(executiveSet);
                                            storeService.addStore(user, store);
                                            warehouseID = store.getId();
                                        } else {
                                            if (masterPreference.equalsIgnoreCase("1")) {
                                                warehouseID = null;
                                            } else {
                                                throw new AccountingException("Default Warehouse is not found for " + warehouse);
                                            }
                                        }
                                    }
                                     serialKey = !isBatchForProduct?serialKey:serialKey + warehouseObj.getName();
                            } else {
                               if (masterPreference.equalsIgnoreCase("1")) {
                                        warehouseID = null;
                                    } else {
                                        throw new AccountingException("Default Warehouse is not available.");
                                    }
                            }
                            
                             if (isBatchForProduct && columnConfig.containsKey("batch")) {
                                batchName = recarr[(Integer) columnConfig.get("batch")].replaceAll("\"", "").trim();
                                HashMap<String, Object> filterRequestParams = new HashMap<String, Object>();
                                ArrayList filter_names = new ArrayList(), filter_params = new ArrayList(), order_by = new ArrayList(), order_type = new ArrayList();
                                filter_names.add("company.companyID");
                                filter_params.add(companyid);

                                if (!StringUtil.isNullOrEmpty(locationObj.getId())) {
                                    filter_names.add("location.id");
                                    filter_params.add(locationObj.getId());
                                }

                                if (!StringUtil.isNullOrEmpty(warehouseObj.getId())) {
                                    filter_names.add("warehouse.id");
                                    filter_params.add(warehouseObj.getId());
                                }
                                if (!StringUtil.isNullOrEmpty(product.getID())) {
                                    filter_names.add("product");
                                    filter_params.add(productid);
                                }
//                                    if (!StringUtil.isNullOrEmpty(paramJObj.optString("ispurchase", null))) {
//                                        filter_names.add("ispurchase");
//                                        filter_params.add(Boolean.parseBoolean(paramJObj.optString("ispurchase")));
//                                    }
                                if (!StringUtil.isNullOrEmpty(batchName)) {
                                    filter_names.add("batchname");
                                    filter_params.add(batchName);
                                }

                                order_by.add("name");
                                order_type.add("asc");
                                filterRequestParams.put("filter_names", filter_names);
                                filterRequestParams.put("filter_params", filter_params);
                                filterRequestParams.put("order_by", order_by);
                                filterRequestParams.put("order_type", order_type);
                                KwlReturnObject resultObj = accMasterItemsDAOobj.getNewBatches(filterRequestParams, false, false);
                                productBatchObj = (resultObj != null && !resultObj.getEntityList().isEmpty() && resultObj.getEntityList().get(0) != null) ? (NewProductBatch) resultObj.getEntityList().get(0) : null;

                                if (StringUtil.isNullOrEmpty(batchName)) {
                                    failureMsg += "Product Batch is not available. ";
                                }
                                 serialKey = isBatchForProduct ? serialKey + batchName : serialKey;
                            } 

                            String productInitialQuantity = "";
                            if (columnConfig.containsKey("initialquantity")) {
                                productInitialQuantity = recarr[(Integer) columnConfig.get("initialquantity")].replaceAll("\"", "").trim();
                                if (StringUtil.isNullOrEmpty(productInitialQuantity)) {
                                    if (masterPreference.equalsIgnoreCase("1")) {
                                        productInitialQuantity = "0";
                                    } else {
                                        if (product.getProducttype().equals(Producttype.SERVICE) || isSerialForProduct) {
                                            productInitialQuantity = "";
                                        } else {
                                            throw new AccountingException("Product Initial Quantity is not available");
                                        }
                                    }
                                } else {
                                    if(Double.parseDouble(productInitialQuantity) < 0){//ERP-35743 - System should not allow -ve initial quantity.
                                        throw new AccountingException("Product Initial Quantity should not be negative");
                                    }
                                }
//                                if (isBookClosed) {
//                                    double quantity = (!StringUtil.isNullOrEmpty(productInitialQuantity)) ? Double.parseDouble(productInitialQuantity) : 0;
//                                    KwlReturnObject resultSet = importDao.getOpeningQuantityAndInitialPrice(companyid, productid);
//                                    double oldQuantity = 0;
//                                    if (resultSet != null && !resultSet.getEntityList().isEmpty() && resultSet.getEntityList().get(0) != null) {
//                                        Object[] objArr = (Object[]) resultSet.getEntityList().get(0);
//                                        oldQuantity = (Double) objArr[0];
//                                    }
//                                    if (quantity != oldQuantity) {
//                                        throw new AccountingException("Cannot add/update initial quantity for the product, as book(s) for first financial year is already closed.");
//                                    }
//                                }
                            } else {
                                productInitialQuantity = "0";
                            }
                            
                            if (isBookClosed) {
                                throw new AccountingException("Cannot add/update initial quantity for the product, as book(s) for first financial year is already closed.");
                            }                        
                            if (isSerialForProduct && columnConfig.containsKey("serial")) {
                                serialName = recarr[(Integer) columnConfig.get("serial")].replaceAll("\"", "").trim();
                                if ( !productInitialQuantity.equals("0") && StringUtil.isNullOrEmpty(serialName)) {
                                    failureMsg += "Product Serial is not available.";
                                } else {
                                    int duplicateCount = 0;
                                    if (isBatchForProduct && productBatchObj != null) {
                                        KwlReturnObject resultObj = accMasterItemsDAOobj.checkDuplicateSerialforProduct(productid, productBatchObj.getId(), serialName, companyid);
                                        duplicateCount = resultObj.getRecordTotalCount();
                                    } else {
                                        KwlReturnObject resultObj = accMasterItemsDAOobj.checkDuplicateSerialforProduct(productid, "", serialName, companyid);
                                        duplicateCount = resultObj.getRecordTotalCount();
                                    }
                                    if (duplicateCount > 0) {
                                        failureMsg += "Serial " + serialName + " is already exists.";
                                    }

                                }
                                 serialKey = isSerialForProduct ? serialKey + serialName : serialKey;
                            } 
                            
                            
                            if(isSerialForProduct && SerialMap.contains(serialKey)){
                                 failureMsg += "Serial " + serialName + " is already exists.";
                                 throw new AccountingException(failureMsg);
                            }else{
                                SerialMap.add(serialKey);
                            }
                            
                            
                            HashMap<String, StoreMaster> storeMasterSet = new HashMap<String, StoreMaster>();
                            
                            if (isRowForProduct) {
                                if (!StringUtil.isNullOrEmpty(rowName)) {
                                    rowObj = storeService.getStoreMasterByName(rowName, companyid, 1);
                                    if (rowObj == null) {
                                        throw new AccountingException("Row is not available.");
                                    } else {
                                        storeMasterSet.put("row", rowObj);
                                    }
                                } else {
                                    throw new AccountingException("Row is not available.");
                                }
                            }
                            
                            if (isRackForProduct) {
                                if (!StringUtil.isNullOrEmpty(rackName)) {
                                    rackObj = storeService.getStoreMasterByName(rackName, companyid, 2);
                                    if (rackObj == null) {
                                        throw new AccountingException("Rack is not available.");
                                    } else {
                                        storeMasterSet.put("rack", rackObj);
                                    }
                                } else {
                                    throw new AccountingException("Rack is not available.");
                                }
                            }
                           
                            if (isBinForProduct) {
                                if (!StringUtil.isNullOrEmpty(binName)) {
                                    binObj = storeService.getStoreMasterByName(binName, companyid, 3);
                                    if (binObj == null) {
                                        throw new AccountingException("Bin is not available.");
                                    } else {
                                        storeMasterSet.put("bin", binObj);
                                    }
                                } else {
                                    throw new AccountingException("Bin is not available.");
                                }
                            }

                            
                        
                            // import validation to check ,product creation date with book beginning date.
                            //if greater then fail the import.
                            Date asOfDate = null;
                            if (columnConfig.containsKey("asofdate")) {
                                String AsOfDate_temp = recarr[(Integer) columnConfig.get("asofdate")].replaceAll("\"", "").trim();
                                if (!StringUtil.isNullOrEmpty(AsOfDate_temp)) {
                                    SimpleDateFormat sdf = new SimpleDateFormat(dateFormat);
                                    asOfDate = sdf.parse(AsOfDate_temp);
                                    if (asOfDate.after(bookBeginningDate)) {
                                        throw new DataInvalidateException(messageSource.getMessage("acc.importproduct.dateAlert", null, locale));
                                    }
                                }else{
                                       throw new AccountingException("As of Date should not be empty.");
                                }
                            }  
                            Date gstapplicabledate = null;
                            if (columnConfig.containsKey("gstapplicabledate")) {
                                String AsOfDate_temp = recarr[(Integer) columnConfig.get("gstapplicabledate")].replaceAll("\"", "").trim();
                                if (!StringUtil.isNullOrEmpty(AsOfDate_temp)) {
                                    SimpleDateFormat sdf = new SimpleDateFormat(dateFormat);
                                    gstapplicabledate = sdf.parse(AsOfDate_temp);
                                } else {
                                    gstapplicabledate=asOfDate;
                                }
                            }
                            
                            /*
                            Added currency and Initial purchase price column in Import Product Opening QTY.
                            */
                            if (isCurrencyCode ? columnConfig.containsKey("currencyCode") : columnConfig.containsKey("currencyName")) {
                                String productPriceCurrencyStr = isCurrencyCode ? recarr[(Integer) columnConfig.get("currencyCode")].replaceAll("\"", "").trim() : recarr[(Integer) columnConfig.get("currencyName")].replaceAll("\"", "").trim();
                                if (!StringUtil.isNullOrEmpty(productPriceCurrencyStr)) {
                                    currencyId = getCurrencyId(productPriceCurrencyStr, currencyMap);
                                    if (StringUtil.isNullOrEmpty(currencyId)) {
                                        failureMsg += "Currency format you entered is not correct. it should be like \"SG Dollar (SGD)\".";
                                    }
                                } else {
                                    if (!masterPreference.equalsIgnoreCase("1")) {
                                        failureMsg += "Currency is not available.";
                                    }
                                }
                            }
                            String productInitialPurchasePrise = "0";
                            if (columnConfig.containsKey("initialprice") || columnConfig.containsKey("purchaseprice")) {//SDP-15084
                                if (columnConfig.containsKey("initialprice")) {
                                    productInitialPurchasePrise = recarr[(Integer) columnConfig.get("initialprice")].replaceAll("\"", "").trim();
                                } else {
                                    productInitialPurchasePrise = recarr[(Integer) columnConfig.get("purchaseprice")].replaceAll("\"", "").trim();
                                }
                                if (!StringUtil.isNullOrEmpty(productInitialPurchasePrise)) {
                                    try {
                                        Object vDataValue = Double.parseDouble(productInitialPurchasePrise);
                                    } catch (Exception ex) {
                                        if (masterPreference.equals("1")) {
                                            productInitialPurchasePrise = "0";
                                        } else {
                                            failureMsg += "Incorrect numeric value for Initial Purchase Price, Please ensure that value type of Initial Purchase Price matches with the Initial Purchase Price.";
                                        }
                                    }
                                } else {// ERP-38309 - Action 1 - Make price column mandatory while importing initial quantity.
                                    throw new AccountingException("Initial Purchase Price should not be empty.");
                                }
//                                if (isBookClosed) {
//                                    double price = (!StringUtil.isNullOrEmpty(productInitialPurchasePrise)) ? Double.parseDouble(productInitialPurchasePrise) : 0;
//                                    KwlReturnObject resultSet = importDao.getOpeningQuantityAndInitialPrice(companyid, productid);
//                                    double oldPrice = 0;
//                                    if (resultSet != null && !resultSet.getEntityList().isEmpty() && resultSet.getEntityList().get(0) != null) {
//                                        Object[] objArr = (Object[]) resultSet.getEntityList().get(0);
//                                        oldPrice = (Double) objArr[1];
//                                    }
//                                    if (price != oldPrice) {
//                                        throw new AccountingException("Cannot add/update initial price for the product, as book(s) for first financial year is already closed.");
//                                    }
//                                }
                            }
                            
                            if (productInitialPurchasePrise.length() > 0 && (columnConfig.containsKey("initialprice") || columnConfig.containsKey("purchaseprice"))) {//SDP-15084
                                HashMap<String, Object> priceListMap = new HashMap<>();
                                priceListMap.put(Constants.productid, product.getID());
                                priceListMap.put("carryin", true);
//                                priceListMap.put("applydate", asOfDate);
                                priceListMap.put("affecteduser", "-1");
                                priceListMap.put("initialPrice", true);
                                priceListMap.put(Constants.currencyKey, currencyId);
                                priceListMap.put("uomid", product.getUnitOfMeasure().getID());
                                KwlReturnObject priceResult = accProductObj.getPriceListEntry(priceListMap);
                                List list = priceResult.getEntityList();

                                // creating Price list Hashmap
//                                accProductObj.setInitialPriceForProduct(productid, companyid);
                                HashMap<String, Object> initialPurchasePriceMap = new HashMap<String, Object>();
                                initialPurchasePriceMap.put("productid", product.getID());
                                initialPurchasePriceMap.put("companyid", companyid);
                                initialPurchasePriceMap.put("carryin", true);
                                initialPurchasePriceMap.put("initialPrice", true);
                                initialPurchasePriceMap.put("price", authHandler.roundUnitPrice(Double.parseDouble(productInitialPurchasePrise), companyid));
                                initialPurchasePriceMap.put("applydate", asOfDate);
                                initialPurchasePriceMap.put("affecteduser", "-1");
                                initialPurchasePriceMap.put("currencyid", currencyId);
                                initialPurchasePriceMap.put("uomid", product.getUnitOfMeasure().getID());       //need to handle
                                String auditID = "",auditAction="";
                                if (list != null && list.size() > 0) {
                                    PriceList price = (PriceList) list.get(0);
                                    initialPurchasePriceMap.put("priceid", price.getID());
                                    accProductObj.updatePriceList(initialPurchasePriceMap);
                                    auditID = AuditAction.PRICE_CHANGED;
                                    auditAction = "updated";
                                } else {
                                    accProductObj.addPriceList(initialPurchasePriceMap);
                                    auditID = AuditAction.PRODUCT_PRICE_CREATED;
                                    auditAction = "created";
                                }
                                Object remoteAddress = requestParams.containsKey("remoteAddress") ? requestParams.get("remoteAddress") : Constants.defaultIp;
                                insertAuditLog(auditID, auditAction, remoteAddress.toString(), "Product Initial Purchase Price", product, user);
                            }
                            
                            
                            String key = product.getProductid();
                            JSONObject obj = new JSONObject();
                            if (isWarehouseForProduct || isLocationForProduct || isBatchForProduct || isSerialForProduct || isRowForProduct || isRackForProduct || isBinForProduct ) {   // For batch Serial Flow

                                if (isWarehouseForProduct && warehouseObj != null) {
                                    key = key + warehouseObj.getName();
                                    obj.put("warehouse", warehouseObj.getId());
                                }
                                if (isLocationForProduct && locationObj != null) {
                                    key = key + locationObj.getName();
                                    obj.put("location", locationObj.getId());
                                }
                                if (isRowForProduct && rowObj != null) {
                                    obj.put("row", rowObj.getId());
                                }
                                if (isRackForProduct && rackObj != null) {
                                    obj.put("rack", rackObj.getId());
                                }
                                if (isBinForProduct && binObj != null) {
                                    obj.put("bin", binObj.getId());
                                }
                                obj.put("quantity", productInitialQuantity.equals("") ? productInitialQuantity : Double.parseDouble(productInitialQuantity));
                                obj.put("isBatchForProduct", isBatchForProduct);
                                if (isBatchForProduct) {
                                    obj.put("batch", batchName);
                                    obj.put("mfgdate", mfgdateStr);
                                    obj.put("expdate", expdateStr);
                                    obj.put("isSerialForProduct", isSerialForProduct);


                                    String batchKey = isBatchForProduct ? key + batchName : key;
                                    if (batchMap.containsKey(batchKey)) {
                                        List<JSONObject> list = batchMap.get(batchKey);
                                        list.add(obj);
                                        batchMap.put(batchKey, list);
                                        obj.put("duplicatebatchrow", "true");
                                    } else {
                                        List<JSONObject> list = new ArrayList<>();
                                        list.add(obj);
                                        batchMap.put(batchKey, list);
                                    }
                                }
                                if (isSerialForProduct) {
                                    obj.put("serialno", serialName);
                                    obj.put("serialnoid", "");
                                    obj.put("expstart", expstartStr);
                                    obj.put("expend", expendStr);

                                    String batchKey = isBatchForProduct ? key + batchName : key;
                                    if (batchSerialMap.containsKey(batchKey)) {
                                            List<Object> list = batchSerialMap.get(batchKey);
                                            list.add(serialName);
                                            batchSerialMap.put(batchKey, list);
                                    } else {
                                        List<Object> list = new ArrayList<>();
                                        list.add(serialName);
                                        batchSerialMap.put(batchKey, list);
                                    }
                                }
                                productDetailsObj.put("product", product);
//                                productDetailsObj.put("quantity",productInitialQuantity.equals("") ? 0 : Double.parseDouble(productInitialQuantity));
                                productDetailsObj.put("asOfDate", asOfDate);
                                batchDetailArr.put(obj);  
                            }
                            
                        }
                        System.out.println(productid); // remove after test
                    } catch (Exception ex) {
//                        failed++;
                        isfailurerecord = true;
                        String errorMsg = ex.getMessage(), invalidColumns = "";
                        try {
                            JSONObject errorLog = new JSONObject(errorMsg);
                            errorMsg = errorLog.getString("errorMsg");
                            invalidColumns = errorLog.getString("invalidColumns");
                        } catch (JSONException jex) {
                        }
                        singleProductFailureCount++;
                        singleInvociceFailedRecords.append("\n").append(createCSVrecord(recarr)).append("\"").append(errorMsg.replaceAll("\"", "")).append("\"");
                    }
                    if (!isfailurerecord) {
                        singleInvociceFailedRecords.append("\n").append(createCSVrecord(recarr)).append("\"").append(" ").append("\"");
                    }    
                    total++;
                } else {
                    failedRecords.append(createCSVrecord(recarr) + "\"Error Message\"");
                }
                cnt++;
                
                if (count == limit) {
                    KwlReturnObject companyObj = accountingHandlerDAOobj.getObject(ImportLog.class.getName(), logId);
                    ImportLog importLog = (ImportLog) companyObj.getEntityList().get(0);
                    importLog.setLog("Imported " + ((cnt - failed) - 1) + " records  successfully and failed to import " + failed + " records.");
                    importLog.setRejected(failed);
                    importLog.setTotalRecs(total);
                    txnManager.commit(status);
                    // for reset counter of transaction limit
                    count = 1;
                    def = new DefaultTransactionDefinition();
                    def.setName("import_Tx");
                    def.setPropagationBehavior(TransactionDefinition.PROPAGATION_REQUIRED);
                    status = txnManager.getTransaction(def);
                } else {
                    count++;
                }
            }

            Product productObj = productDetailsObj.has("product") ? (Product) productDetailsObj.get("product") : null;
//            double productQuantity = productDetailsObj.has("quantity") ? (Double) productDetailsObj.get("quantity") : 0;
            if (!isRecordFailed && productObj != null) { //rows.length() > 0 &&
                if (batchDetailArr.length() > 0) {
                    Map<String, Object> resultMap = manipulateRowDetails(productDetailMap, batchSerialMap, batchMap, batchDetailArr, failedRecords, singleInvociceFailedRecords,singleProductFailureCount, totalBatchQty, isRecordFailed);
                    if (resultMap.containsKey("totalBatchQty")) {
                        totalBatchQty = (double) resultMap.get("totalBatchQty");
                    }
                    if (resultMap.containsKey("isRecordFailed")) {
                        isRecordFailed = (boolean) resultMap.get("isRecordFailed");
                        if (!isRecordFailed) {
                            productDetailMap = new HashMap<>();
                            batchSerialMap = new HashMap<>();
                            batchDetailArr = new JSONArray();
                           // totalBatchQty = 0;
                        }else if(singleProductFailureCount > 0) {
                            failed += singleProductFailureCount;
                            failedRecords.append(singleInvociceFailedRecords);
                            singleProductFailureCount=0;
                        }
                    }
                    if (resultMap.containsKey("batchMap") && resultMap.get("batchMap") != null) {
                        batchMap = (Map<String, List<JSONObject>>) resultMap.get("batchMap");
                    }
                    String batchDetails = "";
                    if (resultMap.containsKey("batchdetails") && resultMap.get("batchdetails") != null) {
                        batchDetails = (String) resultMap.get("batchdetails");
                    }
                    
                    if (!StringUtil.isNullOrEmpty(batchDetails)) {
                        Date asOfDate = productDetailsObj.has("asOfDate") ? (Date) productDetailsObj.get("asOfDate") : new Date();
                        double invQty = 0, invBqty = 0;
                        if (productObj != null) {
                            double prodInitPurchasePrice = 0;
                            KwlReturnObject initPurchasePriceObj = accProductObj.getInitialPrice(productObj.getID(), true);

                            if (initPurchasePriceObj != null && initPurchasePriceObj.isSuccessFlag() && initPurchasePriceObj.getEntityList() != null && initPurchasePriceObj.getEntityList().get(0) != null) {
                                prodInitPurchasePrice = (double) initPurchasePriceObj.getEntityList().get(0);
                            }

                            productObj.setAsOfDate(asOfDate);//update the asofdate in product table also. 
                            List<StockMovement> stockMovementsList = new ArrayList<StockMovement>();

                            JSONArray batchDeatilArr = new JSONArray();
                            JSONArray jArr = new JSONArray(batchDetails);
                            for (int i = 0; i < jArr.length(); i++) {
                                JSONObject jSONObject = new JSONObject(jArr.get(i).toString());
                                if (jSONObject.has("quantity") && !jSONObject.getString("quantity").equals("undefined") && !jSONObject.getString("quantity").isEmpty()) {
                                    Map<String, Object> requestData = new HashMap<>();
                                    requestData.put("productid", productObj.getID());
                                    if (jSONObject.has("warehouse")) {
                                        requestData.put("warehouse", jSONObject.optString("warehouse"));
                                    }
                                    if (jSONObject.has("location")) {
                                        requestData.put("location", jSONObject.optString("location"));
                                    }
                                    if (jSONObject.has("batch")) {
                                        requestData.put("batch", jSONObject.optString("batch"));
                                    }
                                    accImportServiceObj.deleteProductBatchSerialDetails(requestData);
                                    if (jSONObject.optDouble("quantity") != 0) {
                                        batchDeatilArr.put(jSONObject);
                                    }

                                }else{
                                    batchDeatilArr.put(jSONObject);
                                }
                            }
                            
                            Map<String, Object> requestDataMap = new HashMap<>();
                            requestDataMap.put("asOfDate", asOfDate);;
                            requestDataMap.put("initialprice", prodInitPurchasePrice);  //  initialprice
                            saveProductBatch(batchDeatilArr.toString(), productObj, requestDataMap, stockMovementsList);
                            isImported=true;
                            
//                            txnManager.commit(status);
//                            status = txnManager.getTransaction(def);
                            
                        }
                    }
                }
            }
             if (singleProductFailureCount > 0) {// only if last invoice is failed
                failed += singleProductFailureCount; // last interation failure record
                failedRecords.append(singleInvociceFailedRecords);
            }
            if (failed > 0) {
                createFailureFiles(fileName, failedRecords, ".csv");
            }

            int success = total - failed;
            if(!isImported){
                success=0;failed=total;
            }
            if (total == 0) {
                msg = "Empty file.";
            } else if (success == 0) {
//                issuccess = false;
                msg = "Failed to import all the records.";
            } else if (success == total) {
                msg = "All records are imported successfully.";
            } else {
                msg = "Imported " + success + " record" + (success > 1 ? "s" : "") + " successfully";
                msg += (failed == 0 ? "." : " and failed to import " + failed + " record" + (failed > 1 ? "s" : "") + ".");
            }

            try {
                txnManager.commit(status);
            } catch (Exception ex) {
                commitedEx = true;
                throw ex;
            }
            if(!commitedEx){
                DefaultTransactionDefinition updatedef = new DefaultTransactionDefinition();
                updatedef.setName("import_Tx");
                updatedef.setPropagationBehavior(TransactionDefinition.PROPAGATION_REQUIRED);
                TransactionStatus updatestatus = txnManager.getTransaction(updatedef);

                try {
//                    System.out.println("product name,  InvIn ,Product Init Price  ,opening bala  ,Currency   ,ExchangeRate ");
                    //Update Initial Quantity and Inventory Stock
                    for (String prodid : productList) {
                        KwlReturnObject objResult = accountingHandlerDAOobj.getObject(Product.class.getName(), prodid);
                        productObj = (Product) objResult.getEntityList().get(0);
                        if (productObj != null) {
                            double prodInitPurchasePrice = 0;
                            String productCurrency = productObj.getCurrency() != null ? productObj.getCurrency().getCurrencyID() : "";
                            Date asOfDate = productObj.getAsOfDate() != null ? productObj.getAsOfDate() : new Date(productObj.getCreatedon());
                            boolean excludeInitialPrice = false;
                            KwlReturnObject initPurchasePriceObj = accProductObj.getProductPrice(productObj.getID(), true, null, null, productCurrency, productObj.getUnitOfMeasure().getID(), excludeInitialPrice);
                            if (initPurchasePriceObj != null && initPurchasePriceObj.isSuccessFlag() && initPurchasePriceObj.getEntityList() != null && initPurchasePriceObj.getEntityList().get(0) != null) {
                                prodInitPurchasePrice = (double) initPurchasePriceObj.getEntityList().get(0);
                            }
                            if (extraCompanyPreferences != null && extraCompanyPreferences.isActivateInventoryTab()) {
                                List<StockMovement> stockMovementsList = new ArrayList<StockMovement>();
                                stockMovementService.removeStockMovementByReferenceId(productObj.getCompany(), productObj.getID());
                                newStockMovementForProduct(productObj, stockMovementsList, prodInitPurchasePrice);
                                if (!stockMovementsList.isEmpty()) {
                                    stockMovementService.addOrUpdateBulkStockMovement(productObj.getCompany(), productObj.getID(), stockMovementsList);
                                }
                            }

                            Map<String, Object> requestDataMap = new HashMap<>();
                            requestDataMap.put("productid", productObj.getID());
                            KwlReturnObject resultObj = accImportServiceObj.getProductOpeningQtyFromBatchSerial(requestDataMap);
                            double invIntialqty = (resultObj != null && !resultObj.getEntityList().isEmpty() && resultObj.getEntityList().get(0) != null) ? (Double) resultObj.getEntityList().get(0) : 0;

                            JSONObject inventoryjson = new JSONObject();
                            HashMap<String, Object> productMap = new HashMap<String, Object>();
                            productMap.put("id", productObj.getID());
                            if (invIntialqty >= 0) {
                                if ((extraCompanyPreferences.isActivateMRPModule() || preferences.getInventoryValuationType() == Constants.PERPETUAL_VALUATION_METHOD)) {

                                    KwlReturnObject result = null;
                                    double openingbalanceamount = (invIntialqty * prodInitPurchasePrice);
                                    double openingbalanceamountinbase = openingbalanceamount;
                                    String baseCurrency = (String) requestParams.get(Constants.globalCurrencyKey);
                                    productMap.put("openingbalanceamount", authHandler.round(openingbalanceamount, companyid));
                                    if (!StringUtil.isNullOrEmpty(productCurrency) && !baseCurrency.equals(productCurrency)) {
                                        result = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, openingbalanceamount, productCurrency, asOfDate, 0);
                                        openingbalanceamountinbase = (Double) result.getEntityList().get(0);
                                        productMap.put("openingbalanceamountinbase", authHandler.round(openingbalanceamountinbase, companyid));
                                        result = accCurrencyDAOobj.getExcDetailID(requestParams, productCurrency, asOfDate, null);
                                        if (result != null && result.getEntityList() != null && !result.getEntityList().isEmpty()) {
                                            ExchangeRateDetails erd = (ExchangeRateDetails) result.getEntityList().get(0);
                                            if (erd != null) {
                                                productMap.put("exchangerateforopeningbalanceamount", erd.getExchangeRate());
                                            }
                                            erd = null;
                                        }
                                    } else {
                                        productMap.put("openingbalanceamountinbase", authHandler.round(openingbalanceamountinbase, companyid));
                                        productMap.put("exchangerateforopeningbalanceamount", 1);
                                    }
//                                    System.out.println(productObj.getProductid() + "," + invIntialqty + "," + prodInitPurchasePrice + "," + openingbalanceamount + "," + productCurrency + "," + (productMap.get("exchangerateforopeningbalanceamount") != null ? productMap.get("exchangerateforopeningbalanceamount").toString() : "1"));
                                    if (productObj.getProducttype().getID().equals(Producttype.ASSEMBLY) || productObj.getProducttype().getID().equals(Producttype.INVENTORY_PART)) {
                                        JSONObject accParams = new JSONObject();
                                        Account inventoryAccount = productObj.getInventoryAccount();
                                        if (inventoryAccount != null) {
                                            accParams.put("accountid", inventoryAccount.getID());
                                            // Subtract balance from account
                                            result = accCurrencyDAOobj.getBaseToCurrencyAmount(requestParams, productObj.getOpeningBalanceAmountInBase(), inventoryAccount.getCurrency().getCurrencyID(), asOfDate, 0);
                                            double amountInAccountCurrency = inventoryAccount.getOpeningBalance() - (Double) result.getEntityList().get(0);
//                                            accParams.put("balance", authHandler.round(amountInAccountCurrency, companyid));
//                                            accAccountDAOobj.updateAccount(accParams);

                                            // Add balance in account
                                            result = accCurrencyDAOobj.getBaseToCurrencyAmount(requestParams, openingbalanceamountinbase, inventoryAccount.getCurrency().getCurrencyID(), asOfDate, 0);
                                            amountInAccountCurrency = amountInAccountCurrency + (Double) result.getEntityList().get(0);
                                            accParams.put("balance", authHandler.round(amountInAccountCurrency, companyid));
                                            accParams.put("acccode", (StringUtil.isNullOrEmpty(inventoryAccount.getAcccode()))?"":inventoryAccount.getAcccode());
                                            accParams.put("taxid", inventoryAccount.getTaxid() != null ? inventoryAccount.getTaxid() : "");
                                            accAccountDAOobj.updateAccount(accParams);

                                            accParams = null;
                                            result = null;
                                            inventoryAccount = null;
                                            baseCurrency = null;
                                            productCurrency = null;
                                        }
                                    }
                                }

                                accProductObj.updateProduct(productMap);
                                productMap = null;
                                
                                inventoryjson.put("productid", productObj.getID());
                                inventoryjson.put("baseuomrate", 1);
                                if (productObj.getUnitOfMeasure() != null) {
                                    inventoryjson.put("uomid", productObj.getUnitOfMeasure().getID());
                                }
                                inventoryjson.put("description", "Inventory Opened");
                                inventoryjson.put("carryin", true);
                                inventoryjson.put("defective", false);
                                inventoryjson.put("newinventory", true);
                                inventoryjson.put("companyid", companyid);
                                inventoryjson.put("updatedate", productObj.getAsOfDate());//used to update transaction date in stock movement table and inventory table
                                inventoryjson.put("quantity", invIntialqty);
                                inventoryjson.put("baseuomquantity", invIntialqty);

                                KwlReturnObject newInvObj = accProductObj.updateInitialInventory(inventoryjson);
                                if (productObj.getProducttype().getID().equalsIgnoreCase(Producttype.ASSEMBLY)) {
                                    HashMap<String, Object> assemblyParams = requestParams; // AccountingManager.getGlobalParams(request);
                                    assemblyParams.put("assembly", "");
                                    assemblyParams.put("applydate", new Date());
                                    assemblyParams.put("quantity", invIntialqty);
                                    assemblyParams.put("memo", "Inventory Opened");
                                    assemblyParams.put("refno", "");
                                    assemblyParams.put("buildproductid", productid);
                                    accProductObj.updateAssemblyInventory(assemblyParams);
                                    Object remoteAddress = requestParams.containsKey("remoteAddress") ? requestParams.get("remoteAddress") : Constants.defaultIp;
                                    insertAuditLog(AuditAction.PRODUCT_BUILD_ASSEMBLY_UPDATED, "updated", remoteAddress.toString(), "Product Build", productObj, user);

                                }
                            }
                        }
                    }
                    txnManager.commit(updatestatus);
                } catch (Exception ex) {
                    txnManager.rollback(updatestatus);
                    Logger.getLogger(Importproduct.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        } catch (Exception ex) {
            if (!commitedEx) { //if exception occurs during commit then dont call rollback
                txnManager.rollback(status);
            }
            issuccess = false;
            msg = "" + ex.getMessage();

            Logger.getLogger(accProductController.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
            throw new AccountingException("Error While Importing Records.");
        } finally {
            fileInputStream.close();
            csvReader.close();

            DefaultTransactionDefinition ldef = new DefaultTransactionDefinition();
            ldef.setName("import_Tx");
            ldef.setPropagationBehavior(TransactionDefinition.PROPAGATION_REQUIRED);
            TransactionStatus lstatus = txnManager.getTransaction(ldef);

            try {
                //Insert Integration log
                HashMap<String, Object> logDataMap = new HashMap<String, Object>();
                logDataMap.put("FileName", getActualFileName(fileName));
                logDataMap.put("StorageName", fileName);
                logDataMap.put("Log", msg);
                logDataMap.put("Type", "csv");
                logDataMap.put("FailureFileType", failed>0?"csv":"");
                logDataMap.put("TotalRecs", total);
                logDataMap.put("Rejected", failed);
                logDataMap.put("Module", Constants.Acc_Product_opening_stock_ModuleId);
                logDataMap.put("ImportDate", new Date());
                logDataMap.put("User", userId);
                logDataMap.put("Company", companyid);
                logDataMap.put("Id", logId);
                importDao.saveImportLog(logDataMap);

                String tableName = importDao.getTableName(fileName);
                importDao.removeFileTable(tableName); // Remove table after importing all records

                txnManager.commit(lstatus);
            } catch (Exception ex) {
                txnManager.rollback(lstatus);
                Logger.getLogger(accProductController.class.getName()).log(Level.SEVERE, null, ex);
            }

            try {
                returnObj.put("success", issuccess);
                returnObj.put("msg", msg);
                returnObj.put("totalrecords", total);
                returnObj.put("successrecords", total - failed);
                returnObj.put("failedrecords", failed);
                returnObj.put("filename", getActualFileName(fileName));
            } catch (JSONException ex) {
                Logger.getLogger(accProductController.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

        return returnObj;
    }
     
    public Map<String,Object> manipulateRowDetails(Map<String, Object> productDetailMap, Map<String, List<Object>> batchSerialMap, Map<String, List<JSONObject>> batchMap, JSONArray batchDetailArr, StringBuilder failedRecords, StringBuilder singleInvociceFailedRecords,int singleProductFailureCount, double totalBatchQty, boolean isRecordFailed) {
            Map<String,Object> dataMap=new HashMap<>();
            try {
                List<String> batchKeyList = new ArrayList(batchMap.size());
                for (String batchKey : batchMap.keySet()) {
                    double rowQty = 0;
                    List<JSONObject> list = (List<JSONObject>) batchMap.get(batchKey);
                    double batchQty = 0.0;
                    if (!list.isEmpty()) {
                        for (JSONObject obj1 : list) {
                            if (obj1.has("quantity")) {
                                batchQty += obj1.optDouble("quantity", 0.0);
                            }
                           // break; //getting quantity from first row only for same batch
                        }
                    }
                    rowQty += batchQty;
                    if (batchSerialMap.containsKey(batchKey)) {
                        List serialList = batchSerialMap.get(batchKey);
                        if (!serialList.isEmpty() && serialList.size() != batchQty) {
                            throw new AccountingException("Product batch quantity and serial quantity does not match");
                        } else {
                            batchKeyList.add(batchKey);
                        }
                    }
                }
                for (String batchKey : batchKeyList) { // Removing checked Batches
                    batchMap.remove(batchKey);
                }

//                for (String keydetail : productDetailMap.keySet()) {
//                    JSONObject jObj = (JSONObject) productDetailMap.get(keydetail);
//                    double rowQunatity = jObj.has("dquantity") ? jObj.optDouble("dquantity", 0.0) : jObj.optDouble("quantity", 0.0);
                    double batchQty = 0;
                    for (int i = 0; i < batchDetailArr.length(); i++) {
                        JSONObject batchObj = (JSONObject) batchDetailArr.get(i);
                        if (batchObj.has("quantity") && batchObj.get("quantity") != null) {
                            batchQty += (double) batchObj.optDouble("quantity", 0);
                        }
                    }
                    
                    
                    dataMap.put("totalBatchQty", batchQty);
                    dataMap.put("batchdetails", batchDetailArr.toString());
//                    if (rowQunatity != batchQty) {
//                        throw new AccountingException("Product quantity and product batch quantity does not match");
//                    }
//                    jObj.put("batchdetails", batchDetailArr.toString());
////                    rows.put(jObj);
//                }
                
            } catch (Exception ex) {
                String errorMsg = ex.getMessage();
                isRecordFailed = true;
                if (ex.getMessage() != null) {
                    errorMsg = ex.getMessage();
                } else if (ex.getCause() != null) {
                    errorMsg = ex.getCause().getMessage();
                }
                singleProductFailureCount ++;
                singleInvociceFailedRecords.append(errorMsg.replaceAll("\"", ""));

            }
            
            
            dataMap.put("batchMap",batchMap);
//            dataMap.put("totalBatchQty",totalBatchQty);
            dataMap.put("isRecordFailed", isRecordFailed);
            return dataMap;
    }
    public JSONObject importProductcsv(HashMap<String, Object> requestParams1) throws AccountingException, IOException, SessionExpiredException, JSONException {
        DefaultTransactionDefinition def = new DefaultTransactionDefinition();
        def.setName("import_Tx");
        def.setPropagationBehavior(TransactionDefinition.PROPAGATION_REQUIRED);
        TransactionStatus status = txnManager.getTransaction(def);
        boolean commitedEx = false;
        boolean issuccess = true;
        boolean isCurrencyColum = false;
        String msg = "";
        String customfield = "";
        FileInputStream fileInputStream = null;
        BufferedReader br = null;
        CsvReader csvReader = null;
        int total = 0, failed = 0;
        String companyid = requestParams1.get("companyid").toString();
        int countryid = requestParams1.get("countryid")!=null ? Integer.parseInt((String)requestParams1.get("countryid")) : 0 ;
        String currencyId = requestParams1.get("currencyId").toString();
        String userId = requestParams1.get("userid").toString();
        //DateFormat df = (DateFormat) requestParams1.get("dateFormat");
        JSONObject jobj = new JSONObject();
        jobj = (JSONObject) requestParams1.get("jobj");
        String masterPreference = requestParams1.get("masterPreference").toString();
        String delimiterType = requestParams1.get("delimiterType").toString();
        boolean updateExistingRecordFlag = false;
        if (!StringUtil.isNullOrEmpty(requestParams1.get("updateExistingRecordFlag").toString())) {
            updateExistingRecordFlag = Boolean.FALSE.parseBoolean(requestParams1.get("updateExistingRecordFlag").toString());
        }
        Locale locale=null;
        if(requestParams1.containsKey("locale")){
           locale=(Locale)requestParams1.get("locale"); 
        }
        int limit = Constants.Transaction_Commit_Limit;
        int count = 1;
        String fileName = jobj.getString("filename");

        boolean isInventoryIntegrationOn = false;
        JSONObject returnObj = new JSONObject();
        String failureMsg = "";
        String logId = null;
        try {
            logId = addPendingImportLog(requestParams1);
            KwlReturnObject CompanyPrefResult = accountingHandlerDAOobj.getObject(CompanyAccountPreferences.class.getName(), companyid);
            CompanyAccountPreferences companyAccountPreferences = (CompanyAccountPreferences) CompanyPrefResult.getEntityList().get(0);
            Date bookBookBeginningDate=companyAccountPreferences.getBookBeginningFrom();
            
            KwlReturnObject extraCompanyPrefResult = accountingHandlerDAOobj.getObject(ExtraCompanyPreferences.class.getName(), companyid);
            ExtraCompanyPreferences extraCompanyPreferences = (ExtraCompanyPreferences) extraCompanyPrefResult.getEntityList().get(0);

            extraCompanyPrefResult = accountingHandlerDAOobj.getObject(CompanyAccountPreferences.class.getName(), companyid);
            CompanyAccountPreferences preferences = (CompanyAccountPreferences) extraCompanyPrefResult.getEntityList().get(0);

            KwlReturnObject jeresult = accountingHandlerDAOobj.getObject(User.class.getName(), userId);
            User user = (User) jeresult.getEntityList().get(0);
            
            jeresult = accountingHandlerDAOobj.getObject(Company.class.getName(), companyid);
            Company company = (Company) jeresult.getEntityList().get(0);
            
            isInventoryIntegrationOn = extraCompanyPreferences.isActivateInventoryTab();
            boolean isVatApplicable=extraCompanyPreferences.isEnableVatCst();
            boolean isExciseApplicable=extraCompanyPreferences.isExciseApplicable();
            boolean indianCheck=(company.getCountry().getID()).equals(""+Constants.indian_country_id);
            
            boolean isAddUpdateInitialQuantity = false;
            isAddUpdateInitialQuantity = companyAccountPreferences.isIswarehousecompulsory() || companyAccountPreferences.isIslocationcompulsory() || companyAccountPreferences.isIsBatchCompulsory() || companyAccountPreferences.isIsSerialCompulsory() || companyAccountPreferences.isIsrackcompulsory() || companyAccountPreferences.isIsrowcompulsory() || companyAccountPreferences.isIsbincompulsory();
            boolean isCurrencyCode=extraCompanyPreferences.isCurrencyCode();
            JSONObject columnPrefJObj = null;
            if (!StringUtil.isNullOrEmpty(extraCompanyPreferences.getColumnPref())) {
                columnPrefJObj = new JSONObject((String) extraCompanyPreferences.getColumnPref());
            }
            String dateFormat = null, dateFormatId = requestParams1.get("dateFormat").toString();
            if (!StringUtil.isNullOrEmpty(dateFormatId)) {
                KwlReturnObject kdfObj = accountingHandlerDAOobj.getObject(KWLDateFormat.class.getName(), dateFormatId);
                KWLDateFormat kdf = (KWLDateFormat) kdfObj.getEntityList().get(0);
                dateFormat = kdf != null ? kdf.getJavaForm() : null;
            }
            DateFormat df = new SimpleDateFormat(dateFormat);

            fileInputStream = new FileInputStream(jobj.getString("FilePath"));
            csvReader = new CsvReader(new InputStreamReader(fileInputStream), delimiterType);
            int cnt = 0;

//            StringBuilder failedRecords = new StringBuilder();

            Map<Integer, Frequency> frequencyMap = getCCFrequencyMap();
            HashMap<String, Integer> columnConfig = new HashMap<>();
            Map<String, JSONObject> configMap = new HashMap<>();
            JSONArray jSONArray = jobj.getJSONArray("resjson");
            for (int i = 0; i < jSONArray.length(); i++) {
                JSONObject jSONObject = jSONArray.getJSONObject(i);
                columnConfig.put(jSONObject.getString("dataindex"), jSONObject.getInt("csvindex"));
                configMap.put(jSONObject.getString("dataindex"), jSONObject);
            }
            
            Map<String, Map<String, Object>> refColumnObjMap = new HashMap();
            
            HashMap currencyMap = getCurrencyMap(isCurrencyCode);
            List failureArr = new ArrayList();
            List failureColumnArr = new ArrayList();
            
            Set usedProductIdSet = new HashSet();
            while (csvReader.readRecord()) {
                failureMsg = "";
                String[] recarr = csvReader.getValues();
                Map<Integer, Object> invalidColumn = new HashMap<>();
                if (cnt == 0) {
                    List failureRecArr = new ArrayList();
                    for (int header = 0; header < recarr.length; header++) {
                        failureRecArr.add(recarr[header]);
                    }
                    failureRecArr.add("Error Message");
                    failureArr.add(failureRecArr);
                    failureColumnArr.add(invalidColumn);
//                    failedRecords.append(createCSVrecord(recarr) + "\"Error Message\"");
                }
                if (cnt != 0) {
                    try {
                        currencyId = currencyId;    // sessionHandlerImpl.getCurrencyID(request);
                        boolean newProductAddinUpdateCase = false;

                        String productID = "";
                        if (columnConfig.containsKey("pid")) {
                            productID = recarr[(Integer) columnConfig.get("pid")].replaceAll("\"", "").trim();
                            if (StringUtil.isNullOrEmpty(productID)) {
                                invalidColumn.put((Integer) columnConfig.get("pid"), "Invalid");
                                failureMsg += "Product ID is not available.";
                            }else if(!usedProductIdSet.add(productID)){
                                invalidColumn.put((Integer) columnConfig.get("pid"), "Invalid");
                                throw new AccountingException("Duplicate Product ID '" + productID + "' in file");
                            }
                            JSONObject configObj = configMap.get("pid");
                            int maxLength = configObj.optInt("maxLength", 0);
                            String validationType = configObj.optString("validatetype");
                            if("string".equalsIgnoreCase(validationType) && !StringUtil.isNullOrEmpty(productID) && productID.length() > maxLength){
                                if (masterPreference.equals(0)) {
                                    invalidColumn.put((Integer) columnConfig.get("pid"), "Invalid");
                                    failureMsg += "Data length greater than " + maxLength + " for column Product ID.";
                                } else {// for other two cases need to trim data upto max length
                                    productID = productID.substring(0, maxLength);
                                }
                            }
                        } else {
                            failureMsg += "Product ID column is not found.";
                        }
                        
                        // For Checking 'ProductID' is exist or not
                        KwlReturnObject result = accProductObj.getProductIDCount(productID, companyid, false);
                        Product productOldObj = null;
                        int nocount = result.getRecordTotalCount();
                        if (nocount > 0 && !updateExistingRecordFlag) {
                            invalidColumn.put((Integer) columnConfig.get("pid"), "Invalid");
                            throw new AccountingException("Product ID '" + productID + "' already exists.");
                        } else if (nocount == 0 && updateExistingRecordFlag) {
                            /*
                             Changes done in ERP-34672. In ERP-34672 we have make Product ID as mandatory and remaining field as optional in Update Existing Case.
                            */
//                            newProductAddinUpdateCase = true;
                            throw new AccountingException("Product ID '" + productID + "' not exists.");
                        }
                        
                        String productTypeID = "";
                        if (columnConfig.containsKey("type")) {
                            String productTypeName = recarr[(Integer) columnConfig.get("type")].replaceAll("\"", "").trim();
                            if (StringUtil.isNullOrEmpty(productTypeName)) {
                                invalidColumn.put((Integer) columnConfig.get("type"), "Invalid");
                                failureMsg += "Product Type is not available.";
                            }
                            // Ref Optimization related code. 
                            Map refData = null;
                            if (refColumnObjMap.containsKey("ptoducttype")) {
                                refData = refColumnObjMap.get("ptoducttype");
                            } else {
                                refData = new HashMap();
                                refColumnObjMap.put("ptoducttype", refData);
                            }
                            Producttype producttype = null;
                            if (refData.containsKey(productTypeName)) {
                                producttype = refData.get(productTypeName) != null ? (Producttype) refData.get(productTypeName) : null;
                            } else {
                                producttype = getProductTypeByName(productTypeName);
                                refData.put(productTypeName, producttype);
                            }
                            // Ref Optimization related code. 
                            
                            if (producttype != null) {
                                productTypeID = producttype.getID();
                                if (productTypeID.equalsIgnoreCase(Producttype.ASSEMBLY)) {
                                    invalidColumn.put((Integer) columnConfig.get("type"), "Invalid");
                                    throw new AccountingException("Assembly products need to be imported separately through 'Import Assembly Product'.");
                                }
                            } else {
                                invalidColumn.put((Integer) columnConfig.get("type"), "Invalid");
                                failureMsg += "Product Type is not found for " + productTypeName + ".";
                            }
                        } else if(!updateExistingRecordFlag) {
                                failureMsg += "Product Type column is not found.";
                            }

                        String productName = "";
                        if (columnConfig.containsKey("productname")) {
                            productName = recarr[(Integer) columnConfig.get("productname")].replaceAll("\"", "").trim();
                            if (StringUtil.isNullOrEmpty(productName)) {
                                invalidColumn.put((Integer) columnConfig.get("productname"), "Invalid");
                                failureMsg += "Product Name is not available.";
                            }
                            JSONObject configObj = configMap.get("productname");
                            int maxLength = configObj.optInt("maxLength", 0);
                            String validationType = configObj.optString("validatetype");
                            if ("string".equalsIgnoreCase(validationType) && !StringUtil.isNullOrEmpty(productName) && productName.length() > maxLength) {
                                if (masterPreference.equals(0)) {
                                    invalidColumn.put((Integer) columnConfig.get("productname"), "Invalid");
                                    failureMsg += "Data length greater than " + maxLength + " for column Product Name.";
                                } else {// for other two cases need to trim data upto max length
                                    productName = productName.substring(0, maxLength);
                                }
                            }
                            if(!StringUtil.isNullOrEmpty(productName) && productName.contains(",")){
                                failureMsg += "Please enter valid Product Name.";
                            }
                        } else if( !updateExistingRecordFlag){
                                failureMsg += "Product Name column is not found.";
                            }

                        String productDescription = "";
                        if (columnConfig.containsKey("desc")) {
                            productDescription = recarr[(Integer) columnConfig.get("desc")].replaceAll("\"", "").trim();
                        }

                        String productUOMID = "";
                        UnitOfMeasure uom = null;
                        if (columnConfig.containsKey("uomname")) {
                            String productUOMName = recarr[(Integer) columnConfig.get("uomname")].replaceAll("\"", "").trim();
                            if (!StringUtil.isNullOrEmpty(productUOMName)) {
                                
                                // Ref Optimization related code. 
                                Map refData = null;
                                if (refColumnObjMap.containsKey("uom")) {
                                    refData = refColumnObjMap.get("uom");
                                } else {
                                    refData = new HashMap();
                                    refColumnObjMap.put("uom", refData);
                                }

                                if (refData.containsKey(productUOMName)) {
                                    uom = refData.get(productUOMName) != null ? (UnitOfMeasure) refData.get(productUOMName) : null;
                                } else {
                                    uom = getUOMByName(productUOMName, companyid);
                                    refData.put(productUOMName, uom);
                                }
                                // Ref Optimization related code. 
                                
                                if (uom != null) {
                                    if (productUOMName.equals("N/A") && !productTypeID.equals(Producttype.SERVICE)) {
                                        invalidColumn.put((Integer) columnConfig.get("uomname"), "Invalid");
                                        failureMsg += "You can only select N/A UOM for Service type Product.";
                                    } else {
                                        productUOMID = uom.getID();
                                    }
                                } else {
                                    if (masterPreference.equalsIgnoreCase("2")) {
                                        HashMap<String, Object> uomMap = new HashMap<String, Object>();
                                        uomMap.put("uomname", StringUtil.DecodeText(productUOMName));
                                        uomMap.put("uomtype", StringUtil.DecodeText(productUOMName));
                                        uomMap.put("precision", 0);
                                        uomMap.put("companyid", companyid);

                                        KwlReturnObject uomresult = accUomObj.addUoM(uomMap);
                                        uom = (UnitOfMeasure) uomresult.getEntityList().get(0);
                                        productUOMID = uom.getID();
                                        
                                        refData.put(productUOMName, uom);// Ref Optimization related code.
                                    } else {
//                                        if (masterPreference.equalsIgnoreCase("1")) {
//                                            productUOMID = "";
//                                        } else 
//                                        if (productTypeID.equals(Producttype.SERVICE)) {
////                                            productUOMID = "";
//                                            uom = getUOMByName("N/A", companyid);
//                                            if (uom != null) {
//                                                productUOMID = uom.getID();
//                                            }
//                                        } else {
                                            invalidColumn.put((Integer) columnConfig.get("uomname"), "Invalid");
                                            if (!updateExistingRecordFlag) {
                                                failureMsg += "Product Stock UOM is not found for " + productUOMName + ".";
                                            }
//                                        }
                                    }
                                }
                            } else {
//                                if (masterPreference.equalsIgnoreCase("1")) {
//                                    productUOMID = "";
//                                } else {
                                    if (productTypeID.equals(Producttype.SERVICE)) {
//                                        productUOMID = "";
                                        uom = getUOMByName("N/A", companyid);
                                        if (uom != null) {
                                            productUOMID = uom.getID();
                                        }
                                    } else {
                                        invalidColumn.put((Integer) columnConfig.get("uomname"), "Invalid");
                                        failureMsg += "Data should not be empty for column Stock UOM.";
                                    }
//                                }
                            }
                        } else if (!updateExistingRecordFlag){
//                            if (masterPreference.equalsIgnoreCase("1")) {
//                                productUOMID = "";
//                            } else {
                                if (productTypeID.equals(Producttype.SERVICE)) {
//                                    productUOMID = "";
                                    uom = getUOMByName("N/A", companyid);
                                    if (uom != null) {
                                        productUOMID = uom.getID();
                                    }
                                } else {
                                        failureMsg += "Product Stock UOM column is not found.";
                                    }
//                            }
                        }
                        
                        /*
                        * Check for Stock UOM, Casing UOM, Inner UOM.
                        * Casing Uom, Inner Uom and Stock Uom must be different.
                        */ 
                        String stockUOM = "", casingUOM = "", innerUOM = "";
                        if(columnConfig.containsKey("uomname") && columnConfig.get("uomname")!=null){
                            stockUOM = recarr[(Integer) columnConfig.get("uomname")].replaceAll("\"", "").trim();
                        }
                        if(columnConfig.containsKey("casinguom") && columnConfig.get("casinguom")!=null){
                            casingUOM = recarr[(Integer) columnConfig.get("casinguom")].replaceAll("\"", "").trim();
                        }
                        if(columnConfig.containsKey("inneruom") && columnConfig.get("inneruom")!=null){
                            innerUOM = recarr[(Integer) columnConfig.get("inneruom")].replaceAll("\"", "").trim();
                        }
                        if((!StringUtil.isNullOrEmptyWithTrim(casingUOM) && casingUOM.equalsIgnoreCase(innerUOM)) || 
                        (!StringUtil.isNullOrEmptyWithTrim(casingUOM) && casingUOM.equalsIgnoreCase(stockUOM)) ||
                        (!StringUtil.isNullOrEmptyWithTrim(innerUOM) && innerUOM.equalsIgnoreCase(stockUOM))){
                            invalidColumn.put((Integer) columnConfig.get("uomname"), "Invalid");
                            invalidColumn.put((Integer) columnConfig.get("casinguom"), "Invalid");
                            invalidColumn.put((Integer) columnConfig.get("inneruom"), "Invalid");
                            failureMsg += "Casing Uom, Inner Uom and Stock Uom cannot be same.";
                        }
                        
                        String casingUoMID = "";
                        UnitOfMeasure casinguom = null;
                        if (columnConfig.containsKey("casinguom")) {
                            String productUOMName = recarr[(Integer) columnConfig.get("casinguom")].replaceAll("\"", "").trim();
                            if (!StringUtil.isNullOrEmpty(productUOMName)) {
                                
                                // Ref Optimization related code. 
                                Map refData = null;
                                if (refColumnObjMap.containsKey("uom")) {
                                    refData = refColumnObjMap.get("uom");
                                } else {
                                    refData = new HashMap();
                                    refColumnObjMap.put("uom", refData);
                                }

                                // Adding
                                if (refData.containsKey(productUOMName)) {
                                    casinguom = refData.get(productUOMName) != null ? (UnitOfMeasure) refData.get(productUOMName) : null;
                                } else {
                                    casinguom = accProductModuleService.getUOMByName(productUOMName, companyid);
                                    refData.put(productUOMName, casinguom);
                                }
                                // Ref Optimization related code. 

                                if (casinguom != null) {
                                    casingUoMID = casinguom.getID();
                                } else {
                                    if (masterPreference.equalsIgnoreCase("2")) {
                                        HashMap<String, Object> uomMap = new HashMap<String, Object>();
                                        uomMap.put("uomname", StringUtil.DecodeText(productUOMName));
                                        uomMap.put("uomtype", StringUtil.DecodeText(productUOMName));
                                        uomMap.put("precision", 0);
                                        uomMap.put("companyid", companyid);
                                        KwlReturnObject uomresult = accUomObj.addUoM(uomMap);
                                        casinguom = (UnitOfMeasure) uomresult.getEntityList().get(0);
                                        casingUoMID = casinguom.getID();
                                        refData.put(productUOMName, casinguom);// Ref Optimization related code. 
                                    } else {
                                        if (masterPreference.equalsIgnoreCase("1")) {
                                            casingUoMID = "";
                                        } else {
                                            invalidColumn.put((Integer) columnConfig.get("casinguom"), "Invalid");
                                            failureMsg += "Product Casing Unit Of Measure is not found for " + productUOMName + ".";
                                        }
                                    }
                                }
                            }
                        } else if(!updateExistingRecordFlag) {
                            casingUoMID = "";
                        }

                        String innerUoMID = "";
                        UnitOfMeasure inneruom = null;
                        if (columnConfig.containsKey("inneruom")) {
                            String productUOMName = recarr[(Integer) columnConfig.get("inneruom")].replaceAll("\"", "").trim();
                            if (!StringUtil.isNullOrEmpty(productUOMName)) {
                                
                                    // Ref Optimization related code. 
                                    Map refData = null;
                                    if(refColumnObjMap.containsKey("uom")){
                                        refData = refColumnObjMap.get("uom");
                                    }else{
                                        refData = new HashMap();
                                        refColumnObjMap.put("uom", refData);
                                    }
                                    
                                    if(refData.containsKey(productUOMName)){
                                        inneruom = refData.get(productUOMName) != null ? (UnitOfMeasure) refData.get(productUOMName): null;
                                    }else{
                                        inneruom = getUOMByName(productUOMName, companyid);
                                        refData.put(productUOMName, inneruom);
                                    }
                                    // Ref Optimization related code. 
                                    
                                if (inneruom != null) {
                                    innerUoMID = inneruom.getID();
                                } else {
                                    if (masterPreference.equalsIgnoreCase("2")) {
                                        HashMap<String, Object> uomMap = new HashMap<String, Object>();
                                        uomMap.put("uomname",StringUtil.DecodeText(productUOMName));
                                        uomMap.put("uomtype", StringUtil.DecodeText(productUOMName));
                                        uomMap.put("precision", 0);
                                        uomMap.put("companyid", companyid);

                                        KwlReturnObject uomresult = accUomObj.addUoM(uomMap);
                                        inneruom = (UnitOfMeasure) uomresult.getEntityList().get(0);
                                        innerUoMID = inneruom.getID();
                                        refData.put(productUOMName, inneruom);// Ref Optimization related code. 
                                    } else {
                                        if (masterPreference.equalsIgnoreCase("1")) {
                                            innerUoMID = "";
                                        } else {
                                            invalidColumn.put((Integer) columnConfig.get("inneruom"), "Invalid");
                                            failureMsg += "Product Inner Unit Of Measure is not found for " + productUOMName + ".";
                                        }
                                    }
                                }
                            }
                        } else if(!updateExistingRecordFlag){
                            innerUoMID = "";
                        }

                        String PurchaseUOMID = "";
                        UnitOfMeasure purchaseruom = null;
                        if (columnConfig.containsKey("purchaseuom")) {
                            String productUOMName = recarr[(Integer) columnConfig.get("purchaseuom")].replaceAll("\"", "").trim();
                            if (!StringUtil.isNullOrEmpty(productUOMName)) {
                                
                                // Ref Optimization related code. 
                                Map refData = null;
                                if (refColumnObjMap.containsKey("uom")) {
                                    refData = refColumnObjMap.get("uom");
                                } else {
                                    refData = new HashMap();
                                    refColumnObjMap.put("uom", refData);
                                }

                                if (refData.containsKey(productUOMName)) {
                                    purchaseruom = refData.get(productUOMName) != null ? (UnitOfMeasure) refData.get(productUOMName) : null;
                                } else {
                                    purchaseruom = getUOMByName(productUOMName, companyid);
                                    refData.put(productUOMName, purchaseruom);
                                }
                                // Ref Optimization related code. 

                                if (purchaseruom != null) {
                                    PurchaseUOMID = purchaseruom.getID();
                                } else {
                                    if (masterPreference.equalsIgnoreCase("2")) {
                                        HashMap<String, Object> uomMap = new HashMap<String, Object>();
                                        uomMap.put("uomname", StringUtil.DecodeText(productUOMName));
                                        uomMap.put("uomtype", StringUtil.DecodeText(productUOMName));
                                        uomMap.put("precision", 0);
                                        uomMap.put("companyid", companyid);

                                        KwlReturnObject uomresult = accUomObj.addUoM(uomMap);
                                        purchaseruom = (UnitOfMeasure) uomresult.getEntityList().get(0);
                                        PurchaseUOMID = purchaseruom.getID();
                                        refData.put(productUOMName, purchaseruom);// Ref Optimization related code. 
                                    } else {
                                        if (masterPreference.equalsIgnoreCase("1")) {
                                            PurchaseUOMID = "";
                                        } else {
                                            invalidColumn.put((Integer) columnConfig.get("purchaseuom"), "Invalid");
                                            failureMsg += "Product Purchase Unit Of Measure is not found for " + productUOMName + ".";
                                        }
                                    }
                                }
                            }
                        } else if(!updateExistingRecordFlag) {
                            PurchaseUOMID = "";
                        }

                        String SalesUOMID = "";
                        UnitOfMeasure salesuom = null;
                        if (columnConfig.containsKey("salesuom")) {
                            String productUOMName = recarr[(Integer) columnConfig.get("salesuom")].replaceAll("\"", "").trim();
                            if (!StringUtil.isNullOrEmpty(productUOMName)) {
                                
                                // Ref Optimization related code. 
                                Map refData = null;
                                if (refColumnObjMap.containsKey("uom")) {
                                    refData = refColumnObjMap.get("uom");
                                } else {
                                    refData = new HashMap();
                                    refColumnObjMap.put("uom", refData);
                                }

                                if (refData.containsKey(productUOMName)) {
                                    salesuom = refData.get(productUOMName) != null ? (UnitOfMeasure) refData.get(productUOMName) : null;
                                } else {
                                    salesuom = accProductModuleService.getUOMByName(productUOMName, companyid);
                                    refData.put(productUOMName, salesuom);
                                }
                                // Ref Optimization related code. 

                                if (salesuom != null) {
                                    SalesUOMID = salesuom.getID();
                                } else {
                                    if (masterPreference.equalsIgnoreCase("2")) {
                                        HashMap<String, Object> uomMap = new HashMap<String, Object>();
                                        uomMap.put("uomname",StringUtil.DecodeText(productUOMName));
                                        uomMap.put("uomtype",StringUtil.DecodeText(productUOMName));
                                        uomMap.put("precision", 0);
                                        uomMap.put("companyid", companyid);

                                        KwlReturnObject uomresult = accUomObj.addUoM(uomMap);
                                        salesuom = (UnitOfMeasure) uomresult.getEntityList().get(0);
                                        SalesUOMID = salesuom.getID();
                                        refData.put(productUOMName, salesuom);// Ref Optimization related code. 
                                    } else {
                                        if (masterPreference.equalsIgnoreCase("1")) {
                                            SalesUOMID = "";
                                        } else {
                                            invalidColumn.put((Integer) columnConfig.get("salesuom"), "Invalid");
                                            failureMsg += "Product Sales Unit Of Measure is not found for " + productUOMName + ".";
                                        }
                                    }
                                }
                            }
                        } else if(!updateExistingRecordFlag) {
                            SalesUOMID = "";
                        }

                        String casinguomvalue = "1";
                        if (columnConfig.containsKey("casinguom_value")) {
                            casinguomvalue = recarr[(Integer) columnConfig.get("casinguom_value")].replaceAll("\"", "").trim();
                            if (!StringUtil.isNullOrEmpty(casinguomvalue)) {
                                try {
                                    Object vDataValue = Double.parseDouble(casinguomvalue);
                                } catch (Exception ex) {
                                    if(masterPreference.equals("1")){
                                        casinguomvalue="1";
                                    } else {
                                       invalidColumn.put((Integer) columnConfig.get("casinguom_value"), "Invalid");
                                       failureMsg += "Incorrect numeric value for Casing UOM Value, Please ensure that value type of Casing UOM Value matches with the Casing UOM Value."; 
                                    }
                                }
                            }else{
                                casinguomvalue="1";
                            }
                        }
                        String inneruomvalue = "1";
                        if (columnConfig.containsKey("inneruom_value")) {
                            inneruomvalue = recarr[(Integer) columnConfig.get("inneruom_value")].replaceAll("\"", "").trim();
                            if (!StringUtil.isNullOrEmpty(inneruomvalue)) {
                                try {
                                    Object vDataValue = Double.parseDouble(inneruomvalue);
                                } catch (Exception ex) {
                                    if(masterPreference.equals("1")){
                                        inneruomvalue="1";
                                    } else {
                                        invalidColumn.put((Integer) columnConfig.get("inneruom_value"), "Invalid");
                                        failureMsg += "Incorrect numeric value for Inner UOM Value, Please ensure that value type of Inner UOM Value matches with the Inner UOM Value.";
                                    }
                                }
                            }else{
                                inneruomvalue="1";
                            }
                        }
                        String stcokuomvalue = "1";
                        if (columnConfig.containsKey("stockuom_value")) {
                            stcokuomvalue = recarr[(Integer) columnConfig.get("stockuom_value")].replaceAll("\"", "").trim();
                            if (!StringUtil.isNullOrEmpty(stcokuomvalue)) {
                                try {
                                    Object vDataValue = Double.parseDouble(stcokuomvalue);
                                } catch (Exception ex) {
                                    if (masterPreference.equals("1")) {
                                        stcokuomvalue = "1";
                                    } else {
                                        invalidColumn.put((Integer) columnConfig.get("stockuom_value"), "Invalid");
                                        failureMsg += "Incorrect numeric value for Stock UOM Value, Please ensure that value type of Stock UOM Value matches with the Stock UOM Value.";
                                    }
                                }
                            }else{
                                stcokuomvalue="1";
                            }
                        }

                        String costOfGoodsSoldAccountID = "";
                        if (columnConfig.containsKey("cogsaccountid")) {
                            if (!productTypeID.equals(Producttype.SERVICE) && !productTypeID.equals(Producttype.NON_INVENTORY_PART)) {// If product is non service type then these values needed to validate and save 
                                if (extraCompanyPreferences.isActivateMRPModule() || companyAccountPreferences.getInventoryValuationType() == 1) {// This field need only when mrp activated or inventory valuation is perpetual. In this case oit is mandatory
                                   String cogsAccountName = recarr[(Integer) columnConfig.get("cogsaccountid")].replaceAll("\"", "").trim();
                                   
                                    if (!StringUtil.isNullOrEmpty(cogsAccountName)) {
                                        // Ref Optimization related code. 
                                        Map refData = null;
                                        if (refColumnObjMap.containsKey("account")) {
                                            refData = refColumnObjMap.get("account");
                                        } else {
                                            refData = new HashMap();
                                            refColumnObjMap.put("account", refData);
                                        }
                                        Account cogsAccount = null;
                                        if (refData.containsKey(cogsAccountName)) {
                                            cogsAccount = refData.get(cogsAccountName) != null ? (Account) refData.get(cogsAccountName) : null;
                                        } else {
                                            KwlReturnObject retObj = accAccountDAOobj.getAccountFromName(companyid, cogsAccountName);
                                            if (retObj != null && !retObj.getEntityList().isEmpty()) {
                                                cogsAccount = (Account) retObj.getEntityList().get(0);
                                            }
                                            refData.put(cogsAccountName, cogsAccount);
                                        }
                                        // Ref Optimization related code. 

                                        if (cogsAccount != null) {
                                            costOfGoodsSoldAccountID = cogsAccount.getID();
                                        } else {
                                            invalidColumn.put((Integer) columnConfig.get("cogsaccountid"), "Invalid");
                                            failureMsg += "Cost of Goods Sold Account is not found for " + cogsAccountName + ".";
                                        }
                                    } else {
                                        invalidColumn.put((Integer) columnConfig.get("cogsaccountid"), "Invalid");
                                        failureMsg += "Data not found for Cost of Goods Sold Account.";
                                    }
                                }
                            }
                        } else if (!productTypeID.equals(Producttype.SERVICE) && !productTypeID.equals(Producttype.NON_INVENTORY_PART) && (extraCompanyPreferences.isActivateMRPModule() || companyAccountPreferences.getInventoryValuationType() == 1)) {
                            if (!updateExistingRecordFlag) {
                                failureMsg += "Cost of Goods Sold Account column is not found.";
                            }
                        }

                        String inventoryAccountID = "";
                        if (columnConfig.containsKey("inventoryaccountid")) {
                            if (!productTypeID.equals(Producttype.SERVICE) && !productTypeID.equals(Producttype.NON_INVENTORY_PART)) {// If product is non service type then these values needed to validate and save 
                                if (extraCompanyPreferences.isActivateMRPModule() || companyAccountPreferences.getInventoryValuationType() == 1) {// This field need only when mrp activated or inventory valuation is perpetual. In this case oit is mandatory
                                    String invAccountName = recarr[(Integer) columnConfig.get("inventoryaccountid")].replaceAll("\"", "").trim();

                                    if (!StringUtil.isNullOrEmpty(invAccountName)) {
                                        // Ref Optimization related code. 
                                        Map refData = null;
                                        if (refColumnObjMap.containsKey("account")) {
                                            refData = refColumnObjMap.get("account");
                                        } else {
                                            refData = new HashMap();
                                            refColumnObjMap.put("account", refData);
                                        }
                                        Account invAccount = null;
                                        if (refData.containsKey(invAccountName)) {
                                            invAccount = refData.get(invAccountName) != null ? (Account) refData.get(invAccountName) : null;
                                        } else {
                                            KwlReturnObject retObj = accAccountDAOobj.getAccountFromName(companyid, invAccountName);
                                            if (retObj != null && !retObj.getEntityList().isEmpty()) {
                                                invAccount = (Account) retObj.getEntityList().get(0);
                                            }
                                            refData.put(invAccountName, invAccount);
                                        }
                                        // Ref Optimization related code. 

                                        if (invAccount != null) {
                                            inventoryAccountID = invAccount.getID();
                                        } else {
                                            invalidColumn.put((Integer) columnConfig.get("inventoryaccountid"), "Invalid");
                                            failureMsg += "Inventory Account is not found for " + invAccountName + ".";
                                        }
                                    } else {
                                        invalidColumn.put((Integer) columnConfig.get("inventoryaccountid"), "Invalid");
                                        failureMsg += "Data not found for Inventory Account.";
                                    }
                                }
                            }
                        } else if (!productTypeID.equals(Producttype.SERVICE) && !productTypeID.equals(Producttype.NON_INVENTORY_PART) && (extraCompanyPreferences.isActivateMRPModule() || companyAccountPreferences.getInventoryValuationType() == 1)) {
                            if (!updateExistingRecordFlag) {
                                failureMsg += "Inventory Account column is not found.";
                            }
                        }

                        String stockAdjustmentAccountID = "";
                        if (columnConfig.containsKey("stockadjustmentaccountid")) {
                            if (!productTypeID.equals(Producttype.SERVICE) && !productTypeID.equals(Producttype.NON_INVENTORY_PART)) {// If product is non service type then these values needed to validate and save 
                                if (extraCompanyPreferences.isActivateMRPModule() || companyAccountPreferences.getInventoryValuationType() == 1) {// This field need only when mrp activated or inventory valuation is perpetual. In this case oit is mandatory
                                    String stockAdjAccountName = recarr[(Integer) columnConfig.get("stockadjustmentaccountid")].replaceAll("\"", "").trim();
                                   
                                    if (!StringUtil.isNullOrEmpty(stockAdjAccountName)) {
                                        // Ref Optimization related code. 
                                        Map refData = null;
                                        if (refColumnObjMap.containsKey("account")) {
                                            refData = refColumnObjMap.get("account");
                                        } else {
                                            refData = new HashMap();
                                            refColumnObjMap.put("account", refData);
                                        }
                                        Account stockAdjAccount = null;
                                        if (refData.containsKey(stockAdjAccountName)) {
                                            stockAdjAccount = refData.get(stockAdjAccountName) != null ? (Account) refData.get(stockAdjAccountName) : null;
                                        } else {
                                            KwlReturnObject retObj = accAccountDAOobj.getAccountFromName(companyid, stockAdjAccountName);
                                            if (retObj != null && !retObj.getEntityList().isEmpty()) {
                                                stockAdjAccount = (Account) retObj.getEntityList().get(0);
                                            }
                                            refData.put(stockAdjAccountName, stockAdjAccount);
                                        }
                                        // Ref Optimization related code. 

                                        if (stockAdjAccount != null) {
                                            stockAdjustmentAccountID = stockAdjAccount.getID();
                                        } else {
                                            invalidColumn.put((Integer) columnConfig.get("stockadjustmentaccountid"), "Invalid");
                                            failureMsg += "Stock Adjustment Account is not found for " + stockAdjAccountName + ".";
                                        }
                                    } else {
                                        invalidColumn.put((Integer) columnConfig.get("stockadjustmentaccountid"), "Invalid");
                                        failureMsg += "Data not found for Stock Adjustment Account.";
                                    }
                                }
                            }
                        } else if (!productTypeID.equals(Producttype.SERVICE) && !productTypeID.equals(Producttype.NON_INVENTORY_PART) && (extraCompanyPreferences.isActivateMRPModule() || companyAccountPreferences.getInventoryValuationType() == 1) && !updateExistingRecordFlag) {
                            failureMsg += "Stock Adjustment Account column is not found.";
                        }

                        String productBrandID = "";
                        if (columnConfig.containsKey("productBrandName")) {
                            String productBrandName = recarr[(Integer) columnConfig.get("productBrandName")].replaceAll("\"", "").trim();
                            if (!StringUtil.isNullOrEmpty(productBrandName)) {

                                // Ref Optimization related code start. 
                                Map refData = null;
                                if (refColumnObjMap.containsKey("productbrandname")) {
                                    refData = refColumnObjMap.get("productbrandname");
                                } else {
                                    refData = new HashMap();
                                    refColumnObjMap.put("productbrandname", refData);
                                }
                                if (refData.containsKey(productBrandName)) {
                                    productBrandID = (String) refData.get(productBrandName);
                                } else {
                                    KwlReturnObject retObj = accMasterItemsDAOobj.getMasterItemByNameorID(companyid, productBrandName, String.valueOf(53), "mst.ID", "mst.value");
                                    if (retObj != null && !retObj.getEntityList().isEmpty()) {
                                        productBrandID = (String) retObj.getEntityList().get(0);
                                        refData.put(productBrandName, productBrandID);
                                    }
                                }
                                // Ref Optimization related code ended. 

                                if (StringUtil.isNullOrEmpty(productBrandID)) {// when Product Brand not found for given value
                                    if (masterPreference.equalsIgnoreCase("2")) {// add case
                                        HashMap<String, Object> requestMap = new HashMap<String, Object>();
                                        requestMap.put("name", productBrandName);
                                        requestMap.put("groupid", String.valueOf(53));
                                        requestMap.put("companyid", companyid);
                                        KwlReturnObject masterResult = accMasterItemsDAOobj.addMasterItem(requestMap);
                                        MasterItem master = (MasterItem) masterResult.getEntityList().get(0);
                                        productBrandID = master.getID();
                                    } else if (masterPreference.equalsIgnoreCase("1")) {// import with empty data
                                        productBrandID = "";
                                    } else {//Most restricted case 0
                                        invalidColumn.put((Integer) columnConfig.get("productBrandName"), "Invalid");
                                        failureMsg += "Product Brand is not found for " + productBrandName + ".";
                                    }
                                }
                            }
                        }
                        
                        String landingcostcategoryids = "";
                        if (columnConfig.containsKey("landingcostcategory")) {
                            String landingcostcategory = recarr[(Integer) columnConfig.get("landingcostcategory")].replaceAll("\"", "").trim();
                            if (!StringUtil.isNullOrEmpty(landingcostcategory)) {
                                String[] categorys = landingcostcategory.split(",");
                                Map refData = null;
                                if (refColumnObjMap.containsKey("landingcostcategory")) {
                                    refData = refColumnObjMap.get("landingcostcategory");
                                } else {
                                    refData = new HashMap();
                                    refColumnObjMap.put("landingcostcategory", refData);
                                }
                                
                                HashMap requestParams = null;
                                if (categorys.length > 0) {
                                    requestParams = new HashMap<String, Object>();
                                    requestParams.put(Constants.companyKey, companyid);
                                }
                                for (int i = 0; i < categorys.length; i++) {
                                    requestParams.put("lccname", categorys[i].trim());
                                    KwlReturnObject retObj = accMasterItemsDAOobj.getMasterItemFromLandingCostCategory(requestParams);
                                    if (retObj != null && !retObj.getEntityList().isEmpty() && retObj.getEntityList().get(0) != null) {
                                        LandingCostCategory lcc = (LandingCostCategory) retObj.getEntityList().get(0);
                                        if (lcc.getId() != null) {
                                            if (i < categorys.length - 1) {
                                                landingcostcategoryids += lcc.getId() + ",";
                                            } else {
                                                landingcostcategoryids += lcc.getId();
                                            }
                                        } else {
                                            invalidColumn.put((Integer) columnConfig.get("landingcostcategory"), "Invalid");
                                            failureMsg += "Landed Cost Category " + categorys[i] + " does not present.";
                                        }
                                    } else {
                                        invalidColumn.put((Integer) columnConfig.get("landingcostcategory"), "Invalid");
                                        failureMsg += "Landed Cost Category " + categorys[i] + " does not present.";
                                    }
                                }
                                refData.put(landingcostcategory, landingcostcategoryids);
                            }
                        }
                        
                        String productReorderLevel = "0";
                        if (columnConfig.containsKey("reorderlevel")) {
                            productReorderLevel = recarr[(Integer) columnConfig.get("reorderlevel")].replaceAll("\"", "").trim();
                            if (StringUtil.isNullOrEmpty(productReorderLevel)) {
                                productReorderLevel = "0";
                            } else {
                                try {
                                    Object vDataValue = Double.parseDouble(productReorderLevel);
                                } catch (Exception ex) {
                                    if(masterPreference.equals("1")){
                                        productReorderLevel="0";
                                    } else {
                                        invalidColumn.put((Integer) columnConfig.get("reorderlevel"), "Invalid");
                                        failureMsg += "Incorrect numeric value for Reorder Level, Please ensure that value type of Reorder Level matches with the Reorder Level.";
                                    }
                                }
                            }
                        } 
                        String productReorderQuantity = "0";
                        if (columnConfig.containsKey("reorderquantity")) {
                            productReorderQuantity = recarr[(Integer) columnConfig.get("reorderquantity")].replaceAll("\"", "").trim();
                            if (StringUtil.isNullOrEmpty(productReorderQuantity)) {
                                productReorderQuantity = "0";
                            } else {
                                try {
                                    Object vDataValue = Double.parseDouble(productReorderQuantity);
                                } catch (Exception ex) {
                                    if(masterPreference.equals("1")){
                                        productReorderQuantity="0";
                                    } else {
                                        invalidColumn.put((Integer) columnConfig.get("reorderquantity"), "Invalid");
                                        failureMsg += "Incorrect numeric value for Reorder Quantity, Please ensure that value type of Reorder Quantity matches with the Reorder Quantity."; 
                                    }
                                }
                            }
                        } 

                        String productWarrantyPeriod = "0";
                        if (columnConfig.containsKey("warrantyperiod")) {
                            productWarrantyPeriod = recarr[(Integer) columnConfig.get("warrantyperiod")].replaceAll("\"", "").trim();
                            if (StringUtil.isNullOrEmpty(productWarrantyPeriod)) {
                                productWarrantyPeriod = "0";
                            } else {
                                try {
                                    Object vDataValue = Integer.parseInt(productWarrantyPeriod);
                                } catch (Exception ex) {
                                    if (masterPreference.equals("1")) {
                                        productWarrantyPeriod = "0";
                                    } else {
                                        invalidColumn.put((Integer) columnConfig.get("warrantyperiod"), "Invalid");
                                        failureMsg += "Incorrect numeric value for Warranty Period (in days), Please ensure that value type of Warranty Period (in days) matches with the Warranty Period (in days).";
                                    }
                                }
                            }
                        } 

                        String productSalesWarrantyPeriod = "0";
                        if (columnConfig.containsKey("warrantyperiodsal")) {
                            productSalesWarrantyPeriod = recarr[(Integer) columnConfig.get("warrantyperiodsal")].replaceAll("\"", "").trim();
                            if (StringUtil.isNullOrEmpty(productSalesWarrantyPeriod)) {
                                productSalesWarrantyPeriod = "0";
                            } else {
                                try {
                                    Object vDataValue = Integer.parseInt(productSalesWarrantyPeriod);
                                } catch (Exception ex) {
                                     if (masterPreference.equals("1")) {
                                        productSalesWarrantyPeriod = "0";
                                    } else {
                                        invalidColumn.put((Integer) columnConfig.get("warrantyperiodsal"), "Invalid");
                                        failureMsg += "Incorrect numeric value for Sales Warranty Period (in days), Please ensure that value type of Sales Warranty Period (in days) matches with the Sales Warranty Period (in days).";
                                    }
                                }
                            }
                        }
                        String productLeadTime = "0";
                        if (columnConfig.containsKey("leadtime")) {
                            productLeadTime = recarr[(Integer) columnConfig.get("leadtime")].replaceAll("\"", "").trim();
                            if (StringUtil.isNullOrEmpty(productLeadTime)) {
                                if (masterPreference.equalsIgnoreCase("1")) {
                                    productLeadTime = "0";
                                } else {
                                    if (productTypeID.equals(Producttype.SERVICE)) {
                                        productLeadTime = "0";
                                    } else {
                                        invalidColumn.put((Integer) columnConfig.get("leadtime"), "Invalid");
                                        failureMsg += "Product Lead Time is not available.";
                                    }
                                }
                            } else {
                                try {
                                    if (Integer.parseInt(productLeadTime) > 365) {
                                        invalidColumn.put((Integer) columnConfig.get("leadtime"), "Invalid");
                                        failureMsg += "Product Lead Time should not be greater than 365.";
                                    } else if (Integer.parseInt(productLeadTime) < 0) {
                                        invalidColumn.put((Integer) columnConfig.get("leadtime"), "Invalid");
                                        failureMsg += "Product Lead Time should not be less than 0.";
                                    }
                                } catch (Exception ex) {
                                    if (masterPreference.equals("1")) {
                                        productLeadTime = "0";
                                    } else {
                                        invalidColumn.put((Integer) columnConfig.get("leadtime"), "Invalid");
                                        failureMsg += "Incorrect numeric value for Lead Time(in days), Please ensure that value type of Lead Time(in days) matches with the Lead Time(in days).";
                                    }
                                }
                            }
                        }

//                        String productCycleCountInterval = "";
//                        if (columnConfig.containsKey("ccountinterval")) {
//                            productCycleCountInterval = recarr[(Integer) columnConfig.get("ccountinterval")].replaceAll("\"", "").trim();
//                            if (StringUtil.isNullOrEmpty(productCycleCountInterval)) {
//                                productCycleCountInterval = "1";
//                            }
//                        } else {
//                            productCycleCountInterval = "1";
//                        }
//
//                        String productCycleCountTolerance = "";
//                        if (columnConfig.containsKey("ccounttolerance")) {
//                            productCycleCountTolerance = recarr[(Integer) columnConfig.get("ccounttolerance")].replaceAll("\"", "").trim();
//                            if (StringUtil.isNullOrEmpty(productCycleCountTolerance)) {
//                                productCycleCountTolerance = "0";
//                            }
//                        } else {
//                            productCycleCountTolerance = "0";
//                        }

                        String parentProductUUID = "";
                        if (columnConfig.containsKey("parentid")) {
                            String parentProductID = recarr[(Integer) columnConfig.get("parentid")].replaceAll("\"", "").trim();
                            if (!StringUtil.isNullOrEmpty(parentProductID)) {
                                
                                // Ref Optimization related code. 
                                Map refData = null;
                                if (refColumnObjMap.containsKey("parentid")) {
                                    refData = refColumnObjMap.get("parentid");
                                } else {
                                    refData = new HashMap();
                                    refColumnObjMap.put("parentid", refData);
                                }
                                Product parentProduct = null;
                                if (refData.containsKey(parentProductID)) {
                                    parentProduct = refData.get(parentProductID) != null ? (Product) refData.get(parentProductID) : null;
                                } else {
                                    parentProduct = accProductModuleService.getProductByProductID(parentProductID, companyid);
                                    refData.put(parentProductID, parentProduct);
                                }
                                // Ref Optimization related code. 
    
                                if (parentProduct != null) {
                                    parentProductUUID = parentProduct.getID();
                                } else {
                                    if (masterPreference.equalsIgnoreCase("1")) {
                                        parentProductUUID = null;
                                    } else {
                                        invalidColumn.put((Integer) columnConfig.get("parentid"), "Invalid");
                                        failureMsg += "Parent Product is not found for " + parentProductID + ".";
                                    }
                                }
                            }
                        } else if(!updateExistingRecordFlag) {
                            parentProductUUID = null;
                        }

                        String productSalesAccId = "";
                        if (columnConfig.containsKey("salesaccountname")) {
                            String productSalesAccountName = recarr[(Integer) columnConfig.get("salesaccountname")].replaceAll("\"", "").trim();
                            if (!StringUtil.isNullOrEmpty(productSalesAccountName)) {
                                
                                // Ref Optimization related code. 
                                Map refData = null;
                                if (refColumnObjMap.containsKey("account")) {
                                    refData = refColumnObjMap.get("account");
                                } else {
                                    refData = new HashMap();
                                    refColumnObjMap.put("account", refData);
                                }
                                Account salesAccount = null;
                                if (refData.containsKey(productSalesAccountName)) {
                                    salesAccount = refData.get(productSalesAccountName) != null ? (Account) refData.get(productSalesAccountName) : null;
                                } else {
                                    salesAccount = getAccountByName(productSalesAccountName, companyid);
                                    refData.put(productSalesAccountName, salesAccount);
                                }
                                // Ref Optimization related code. 
                                
                                if (salesAccount != null) {
                                    productSalesAccId = salesAccount.getID();
                                } else {
                                    invalidColumn.put((Integer) columnConfig.get("salesaccountname"), "Invalid");
                                    failureMsg += "Product Sales Account is not found for " + productSalesAccountName + ".";
                                }
                            } else {
                                invalidColumn.put((Integer) columnConfig.get("salesaccountname"), "Invalid");
                                failureMsg += "Product Sales Account is not available.";
                            }
                        } else if(!updateExistingRecordFlag) {
                            failureMsg += "Product Sales Account column is not found.";
                        }

                        String productSalesReturnAccId = "";
                        if (columnConfig.containsKey("salesretaccountname")) {
                            String productSalesReturnAccountName = recarr[(Integer) columnConfig.get("salesretaccountname")].replaceAll("\"", "").trim();
                            if (!StringUtil.isNullOrEmpty(productSalesReturnAccountName)) {
                                
                                // Ref Optimization related code. 
                                Map refData = null;
                                if (refColumnObjMap.containsKey("account")) {
                                    refData = refColumnObjMap.get("account");
                                } else {
                                    refData = new HashMap();
                                    refColumnObjMap.put("account", refData);
                                }
                                Account salesReturnAccount = null;
                                if (refData.containsKey(productSalesReturnAccountName)) {
                                    salesReturnAccount = refData.get(productSalesReturnAccountName) != null ? (Account) refData.get(productSalesReturnAccountName) : null;
                                } else {
                                    salesReturnAccount = getAccountByName(productSalesReturnAccountName, companyid);
                                    refData.put(productSalesReturnAccountName, salesReturnAccount);
                                }
                                // Ref Optimization related code. 
                                
                                if (salesReturnAccount != null) {
                                    productSalesReturnAccId = salesReturnAccount.getID();
                                } else {
                                    invalidColumn.put((Integer) columnConfig.get("salesretaccountname"), "Invalid");
                                    failureMsg += "Product Sales Return Account is not found for " + productSalesReturnAccountName + ".";
                                }
                            } else {
                                invalidColumn.put((Integer) columnConfig.get("salesretaccountname"), "Invalid");
                                failureMsg += "Product Sales Return Account is not available.";
                            }
                        } else if(!updateExistingRecordFlag) {
                            failureMsg += "Product Sales Return Account column is not found.";
                        }

                        /*-----Block is executed only for Malaysian Company-------  */
                        String purchasetaxId = "";
                        String salestaxId = "";
                        if (countryid == Constants.malaysian_country_id) {

                            if (columnConfig.containsKey("purchasetaxId")) {
                                String purchaseTaxCode = recarr[(Integer) columnConfig.get("purchasetaxId")].replaceAll("\"", "").trim();
                                if (!StringUtil.isNullOrEmpty(purchaseTaxCode)) {
//                                    Tax taxObj = getTaxByCode(purchaseTaxCode, companyid);
                                    Map taxMap = new HashMap<>();
                                    taxMap.put(Constants.companyKey, companyid);
                                    taxMap.put(Constants.TAXCODE, purchaseTaxCode);
                                    ArrayList taxList = importHandler.getTax(taxMap);
                                    if (taxList.get(0) != null) {
                                        Tax taxObj = (Tax) taxList.get(0);
                                        if (taxObj.getTaxtype() == Constants.SALES_TYPE_TAX) {
                                            failureMsg += "Tax Code is not Purchase Type " + purchaseTaxCode;
                                        } else {
                                            purchasetaxId = taxObj.getID();
                                        }
                                    } else if (!StringUtil.isNullOrEmpty((String) taxList.get(2))) {
                                        failureMsg += (String) taxList.get(2) + purchaseTaxCode;
                                    }
                                }
                            }

                            if (columnConfig.containsKey("salestaxId")) {
                                String salesTaxCode = recarr[(Integer) columnConfig.get("salestaxId")].replaceAll("\"", "").trim();
                                if (!StringUtil.isNullOrEmpty(salesTaxCode)) {
//                                    Tax taxObj = getTaxByCode(salesTaxCode, companyid);
                                    Map taxMap = new HashMap<>();
                                    taxMap.put(Constants.companyKey, companyid);
                                    taxMap.put(Constants.TAXCODE, salesTaxCode);
                                    ArrayList taxList = importHandler.getTax(taxMap);
                                    if (taxList.get(0) != null) {
                                        Tax taxObj = (Tax) taxList.get(0);
                                        if (taxObj.getTaxtype() == Constants.PURCHASE_TYPE_TAX) {
                                            failureMsg += "Tax Code is not Sales Type " + salesTaxCode;
                                        } else {
                                            salestaxId = taxObj.getID();
                                        }
                                    } else if (!StringUtil.isNullOrEmpty((String) taxList.get(2))) {
                                        failureMsg += (String) taxList.get(2) + salesTaxCode;
                                    }
                                }
                            }
                        }

                        String productPreferedVendorID = "";
                        if (columnConfig.containsKey("vendornameid")) {
                            String productPreferedVendorName = recarr[(Integer) columnConfig.get("vendornameid")].replaceAll("\"", "").trim();
                            if (!StringUtil.isNullOrEmpty(productPreferedVendorName)) {
                                
                                // Ref Optimization related code. 
                                Map refData = null;
                                if (refColumnObjMap.containsKey("vendor")) {
                                    refData = refColumnObjMap.get("vendor");
                                } else {
                                    refData = new HashMap();
                                    refColumnObjMap.put("vendor", refData);
                                }
                                Vendor vendor = null;
                                if (refData.containsKey(productPreferedVendorName)) {
                                    vendor = refData.get(productPreferedVendorName) != null ? (Vendor) refData.get(productPreferedVendorName) : null;
                                } else {
                                    vendor = getVendorByName(productPreferedVendorName, companyid);
                                    refData.put(productPreferedVendorName, vendor);
                                }
                                // Ref Optimization related code. 

                                if (vendor != null) {
                                    productPreferedVendorID = vendor.getID();
                                } else {
                                    if (masterPreference.equalsIgnoreCase("1")) {
                                        productPreferedVendorID = null;
                                    } else {
                                        invalidColumn.put((Integer) columnConfig.get("vendornameid"), "Invalid");
                                        failureMsg += "Prefered Vendor is not found for " + productPreferedVendorName + ".";
                                    }
                                }
                            }
                        } else if(!updateExistingRecordFlag){
                            productPreferedVendorID = null;
                        }

                        String productPurchaseAccId = "";
                        if (columnConfig.containsKey("purchaseaccountname")) {
                            String productPurchaseAccountName = recarr[(Integer) columnConfig.get("purchaseaccountname")].replaceAll("\"", "").trim();
                            if (!StringUtil.isNullOrEmpty(productPurchaseAccountName)) {
                                
                                // Ref Optimization related code. 
                                Map refData = null;
                                if (refColumnObjMap.containsKey("account")) {
                                    refData = refColumnObjMap.get("account");
                                } else {
                                    refData = new HashMap();
                                    refColumnObjMap.put("account", refData);
                                }
                                Account purchaseAccount = null;
                                if (refData.containsKey(productPurchaseAccountName)) {
                                    purchaseAccount = refData.get(productPurchaseAccountName) != null ? (Account) refData.get(productPurchaseAccountName) : null;
                                } else {
                                    purchaseAccount = getAccountByName(productPurchaseAccountName, companyid);
                                    refData.put(productPurchaseAccountName, purchaseAccount);
                                }
                                // Ref Optimization related code. 
                                
                                if (purchaseAccount != null) {
                                    productPurchaseAccId = purchaseAccount.getID();
                                } else {
                                    invalidColumn.put((Integer) columnConfig.get("purchaseaccountname"), "Invalid");
                                    failureMsg += "Product Purchase Account is not found for " + productPurchaseAccountName + ".";
                                }
                            } else {
                                invalidColumn.put((Integer) columnConfig.get("purchaseaccountname"), "Invalid");
                                failureMsg += "Product Purchase Account is not available.";
                            }
                        } else if(!updateExistingRecordFlag) {
                            failureMsg += "Product Purchase Account column is not found.";
                        }

                        String productPurchaseReturnAccId = "";
                        if (columnConfig.containsKey("purchaseretaccountname")) {
                            String productPurchaseReturnAccountName = recarr[(Integer) columnConfig.get("purchaseretaccountname")].replaceAll("\"", "").trim();
                            if (!StringUtil.isNullOrEmpty(productPurchaseReturnAccountName)) {
                                
                                // Ref Optimization related code. 
                                Map refData = null;
                                if (refColumnObjMap.containsKey("account")) {
                                    refData = refColumnObjMap.get("account");
                                } else {
                                    refData = new HashMap();
                                    refColumnObjMap.put("account", refData);
                                }
                                Account purchaseReturnAccount = null;
                                if (refData.containsKey(productPurchaseReturnAccountName)) {
                                    purchaseReturnAccount = refData.get(productPurchaseReturnAccountName) != null ? (Account) refData.get(productPurchaseReturnAccountName) : null;
                                } else {
                                    purchaseReturnAccount = getAccountByName(productPurchaseReturnAccountName, companyid);
                                    refData.put(productPurchaseReturnAccountName, purchaseReturnAccount);
                                }
                                // Ref Optimization related code. 
                                
                                if (purchaseReturnAccount != null) {
                                    productPurchaseReturnAccId = purchaseReturnAccount.getID();
                                } else {
                                    invalidColumn.put((Integer) columnConfig.get("purchaseretaccountname"), "Invalid");
                                    failureMsg += "Product Purchase Return Account is not found for " + productPurchaseReturnAccountName + ".";
                                }
                            } else {
                                invalidColumn.put((Integer) columnConfig.get("purchaseretaccountname"), "Invalid");
                                failureMsg += "Product Purchase Return Account is not available.";
                            }
                        } else  if(!updateExistingRecordFlag) {
                            failureMsg += "Product Purchase Return Account column is not found.";
                        }

                        String productInitialQuantity = "0";
                        if (columnConfig.containsKey("initialquantity") && isAddUpdateInitialQuantity == false) {
                            productInitialQuantity = recarr[(Integer) columnConfig.get("initialquantity")].replaceAll("\"", "").trim();
                            if (StringUtil.isNullOrEmpty(productInitialQuantity)) {
                                productInitialQuantity = "0";
                            } else {
                                try {
                                    Object vDataValue = Double.parseDouble(productInitialQuantity);
                                } catch (Exception ex) {
                                    if (masterPreference.equals("1")) {
                                        productInitialQuantity = "0";
                                    } else {
                                        invalidColumn.put((Integer) columnConfig.get("initialquantity"), "Invalid");
                                        failureMsg += "Incorrect numeric value for Initial Quantity, Please ensure that value type of Initial Quantity matches with the Initial Quantity.";
                                    }
                                }
                            }
                        } 

                        String productInitialPurchasePrise = "0";
                        if (columnConfig.containsKey("purchaseprice")) {
                            productInitialPurchasePrise = recarr[(Integer) columnConfig.get("purchaseprice")].replaceAll("\"", "").trim();
                            if (!StringUtil.isNullOrEmpty(productInitialPurchasePrise)) {
                                try {
                                    Object vDataValue = Double.parseDouble(productInitialPurchasePrise);
                                } catch (Exception ex) {
                                    if (masterPreference.equals("1")) {
                                        productInitialPurchasePrise = "0";
                                    } else {
                                        invalidColumn.put((Integer) columnConfig.get("purchaseprice"), "Invalid");
                                        failureMsg += "Incorrect numeric value for Initial Purchase Price, Please ensure that value type of Initial Purchase Price matches with the Initial Purchase Price.";
                                    }
                                }
                            }
                        }

                        String productSalesPrice = "0";
                        if (columnConfig.containsKey("saleprice")) {
                            productSalesPrice = recarr[(Integer) columnConfig.get("saleprice")].replaceAll("\"", "").trim();
                            if (!StringUtil.isNullOrEmpty(productSalesPrice)) {
                                try {
                                    Object vDataValue = Double.parseDouble(productSalesPrice);
                                } catch (Exception ex) {
                                     if (masterPreference.equals("1")) {
                                        productSalesPrice = "0";
                                    } else {
                                         invalidColumn.put((Integer) columnConfig.get("saleprice"), "Invalid");
                                         failureMsg += "Incorrect numeric value for Sales Price, Please ensure that value type of Sales Price matches with the Sales Price.";
                                    }
                                }
                            }
                        } 

                        String MsgExep = "";
                        if (isCurrencyCode?columnConfig.containsKey("currencyCode"):columnConfig.containsKey("currencyName")) {
                            String productPriceCurrencyStr = isCurrencyCode?recarr[(Integer) columnConfig.get("currencyCode")].replaceAll("\"", "").trim():recarr[(Integer) columnConfig.get("currencyName")].replaceAll("\"", "").trim();
                            if (!StringUtil.isNullOrEmpty(productPriceCurrencyStr)) {
                                currencyId = getCurrencyId(productPriceCurrencyStr, currencyMap);
                                if (StringUtil.isNullOrEmpty(currencyId)) {
                                    invalidColumn.put( isCurrencyCode?(Integer) columnConfig.get("currencyCode"):(Integer) columnConfig.get("currencyName"), "Invalid");
                                    //MsgExep = messageSource.getMessage("acc.field.ImportProductExceptionFormat", null, RequestContextUtils.getLocale(request));
                                    failureMsg += "Currency format you entered is not correct. it should be like \"SG Dollar (SGD)\".";
                                }
                            } else {
                                if (!masterPreference.equalsIgnoreCase("1")) {
                                    invalidColumn.put(isCurrencyCode?(Integer) columnConfig.get("currencyCode"):(Integer) columnConfig.get("currencyName"), "Invalid");
                                    failureMsg += "Currency is not available.";
                                }
                            }
                        }

                        UOMschemaType uomSchemaType = null;
                        if (columnConfig.containsKey("uomSchemaTypeName") && recarr.length > columnConfig.get("uomSchemaTypeName")) {
                            String uomSchemaTypeName = recarr[(Integer) columnConfig.get("uomSchemaTypeName")].replaceAll("\"", "").trim();
                            if (!StringUtil.isNullOrEmpty(uomSchemaTypeName)) {
                               
                                // Ref Optimization related code. 
                                Map refData = null;
                                if (refColumnObjMap.containsKey("uomSchemaType")) {
                                    refData = refColumnObjMap.get("uomSchemaType");
                                } else {
                                    refData = new HashMap();
                                    refColumnObjMap.put("uomSchemaType", refData);
                                }
                                if (refData.containsKey(uomSchemaTypeName)) {
                                    uomSchemaType = refData.get(uomSchemaTypeName) != null ? (UOMschemaType) refData.get(uomSchemaTypeName) : null;
                                } else {
                                    uomSchemaType = getUOMschemaTypeByName(uomSchemaTypeName, companyid);
                                    refData.put(uomSchemaTypeName, uomSchemaType);
                                }
                                // Ref Optimization related code. 

                                if (uomSchemaType == null) {
                                    if (!masterPreference.equalsIgnoreCase("1")) {
                                        invalidColumn.put((Integer) columnConfig.get("uomSchemaTypeName"), "Invalid");
                                        failureMsg += "UOM Schema is not found for " + uomSchemaTypeName + ".";
                                    }
                                }
                            }
                        }

                        if (uomSchemaType != null && !productUOMID.equalsIgnoreCase(uomSchemaType.getStockuom().getID())) {
                            invalidColumn.put((Integer) columnConfig.get("uomSchemaTypeName"), "Invalid");
                            failureMsg += "Stock UOM of Product and UOM Schema's Stock UOM should be same.";
                        }
                        
                        // if Account Preferences have show Display UOM Setting is ON
                        UnitOfMeasure displayUoMObj = null;
                        if (columnPrefJObj!=null && columnPrefJObj.has(Constants.isDisplayUOM) && columnPrefJObj.get(Constants.isDisplayUOM) != null && (Boolean) columnPrefJObj.get(Constants.isDisplayUOM) != false) {
                            if (columnConfig.containsKey("displayUoM") && recarr.length > columnConfig.get("displayUoM") && uomSchemaType != null) {
                                String displayUoM = recarr[(Integer) columnConfig.get("displayUoM")].replaceAll("\"", "").trim();
                                if (!StringUtil.isNullOrEmpty(displayUoM)) {
                                    // Ref Optimization related code. 
                                    Map refData = null;
                                    if (refColumnObjMap.containsKey("displayUoM")) {
                                        refData = refColumnObjMap.get("displayUoM");
                                    } else {
                                        refData = new HashMap();
                                        refColumnObjMap.put("displayUoM", refData);
                                    }

                                    if (refData.containsKey(displayUoM)) {
                                        displayUoMObj = refData.get(displayUoM) != null ? (UnitOfMeasure) refData.get(displayUoM) : null;
                                    } else {
                                        displayUoMObj = getUOMByName(displayUoM, companyid);
                                        refData.put(displayUoM, displayUoMObj);
                                    }
                                    // Ref Optimization related code. 

                                    boolean validDisplayUOM = false;
                                    if (displayUoMObj != null) {
                                        validDisplayUOM = accUomObj.isValidDisplayUOM(uomSchemaType.getID(), displayUoMObj.getID());
                                    }
                                    if(!validDisplayUOM){
                                        invalidColumn.put((Integer) columnConfig.get("displayUoM"), "Invalid");
                                        failureMsg += "Wrong value entered into Display UOM";
                                    }
                                }
                            }
                        }
                        
                        Boolean isIslocationforproduct = false;
                        if (!(productTypeID.equals(Producttype.SERVICE) || productTypeID.equals(Producttype.NON_INVENTORY_PART)) && columnConfig.containsKey(Constants.ACTIVATE_LOCATION) && companyAccountPreferences.isIslocationcompulsory()) {
                            String ISlocationforproduct = recarr[(Integer) columnConfig.get(Constants.ACTIVATE_LOCATION)].replaceAll("\"", "").trim();
                            if (!StringUtil.isNullOrEmpty(ISlocationforproduct)) {
                                if (ISlocationforproduct.equalsIgnoreCase("T")) {
                                    isIslocationforproduct = true;
                                } else if (ISlocationforproduct.equalsIgnoreCase("F")) {
                                    isIslocationforproduct = false;
                                } else {
                                    invalidColumn.put((Integer) columnConfig.get(Constants.ACTIVATE_LOCATION), "Invalid");
                                    failureMsg += "Format you entered is not correct for Activate Location. It should be like \"T\" or \"F\".";
                                }
                            } 
                            if (companyAccountPreferences.isInventoryAccountingIntegration()) {

                                if (productID.equalsIgnoreCase(Producttype.INVENTORY_PART) || productID.equalsIgnoreCase(Producttype.Inventory_Non_Sales) || productID.equalsIgnoreCase(Producttype.CUSTOMER_INVENTORY) || productID.equalsIgnoreCase(Producttype.CUSTOMER_ASSEMBLY) || productID.equalsIgnoreCase(Producttype.ASSEMBLY)) {
                                    isIslocationforproduct = true;
                                }
                            }
                        } else if (!updateExistingRecordFlag && !(productTypeID.equals(Producttype.SERVICE) || productTypeID.equals(Producttype.NON_INVENTORY_PART)) && !columnConfig.containsKey(Constants.ACTIVATE_LOCATION) && companyAccountPreferences.isIslocationcompulsory()) {
                            invalidColumn.put((Integer) columnConfig.get(Constants.ACTIVATE_LOCATION), "Invalid");
                            failureMsg += "Location should be active for product";
                        }

                        Boolean isIswarehouseforproduct = false;
                        if (!(productTypeID.equals(Producttype.SERVICE) || productTypeID.equals(Producttype.NON_INVENTORY_PART)) && columnConfig.containsKey(Constants.ACTIVATE_WAREHOUSE) && companyAccountPreferences.isIswarehousecompulsory()) {
                            String Iswarehouseforproduct = recarr[(Integer) columnConfig.get(Constants.ACTIVATE_WAREHOUSE)].replaceAll("\"", "").trim();
                            if (!StringUtil.isNullOrEmpty(Iswarehouseforproduct)) {
                                if (Iswarehouseforproduct.equalsIgnoreCase("T")) {
                                    isIswarehouseforproduct = true;
                                } else if (Iswarehouseforproduct.equalsIgnoreCase("F")) {
                                    isIswarehouseforproduct = false;
                                } else {
                                    invalidColumn.put((Integer) columnConfig.get(Constants.ACTIVATE_WAREHOUSE), "Invalid");
                                    failureMsg += "Format you entered is not correct for Activate Warehouse. It should be like \"T\" or \"F\"";
                                }
                            } 
                            if (companyAccountPreferences.isInventoryAccountingIntegration()) {

                                if (productID.equalsIgnoreCase(Producttype.INVENTORY_PART) || productID.equalsIgnoreCase(Producttype.Inventory_Non_Sales) || productID.equalsIgnoreCase(Producttype.CUSTOMER_INVENTORY) || productID.equalsIgnoreCase(Producttype.CUSTOMER_ASSEMBLY) || productID.equalsIgnoreCase(Producttype.ASSEMBLY)) {
                                    isIswarehouseforproduct = true;
                                }
                            }
                        } else if (!updateExistingRecordFlag && !(productTypeID.equals(Producttype.SERVICE) || productTypeID.equals(Producttype.NON_INVENTORY_PART)) && !columnConfig.containsKey(Constants.ACTIVATE_WAREHOUSE) && companyAccountPreferences.isIslocationcompulsory()) {
                            invalidColumn.put((Integer) columnConfig.get(Constants.ACTIVATE_WAREHOUSE), "Invalid");
                            failureMsg += "Warehouse should be active for product";
                        }

                        String productDefaultLocationID = "";
                        if (!(productTypeID.equals(Producttype.SERVICE) || productTypeID.equals(Producttype.NON_INVENTORY_PART)) && columnConfig.containsKey("locationName") && companyAccountPreferences.isIslocationcompulsory()) {
                            String productDefaultLocationName = recarr[(Integer) columnConfig.get("locationName")].replaceAll("\"", "").trim();
                            if (!StringUtil.isNullOrEmpty(productDefaultLocationName)) {
                                
                                // Ref Optimization related code. 
                                Map refData = null;
                                if (refColumnObjMap.containsKey("locationName")) {
                                    refData = refColumnObjMap.get("locationName");
                                } else {
                                    refData = new HashMap();
                                    refColumnObjMap.put("locationName", refData);
                                }
                                InventoryLocation invLoc = null;
                                if (refData.containsKey(productDefaultLocationName)) {
                                    invLoc = refData.get(productDefaultLocationName) != null ? (InventoryLocation) refData.get(productDefaultLocationName) : null;
                                } else {
                                    invLoc = getInventoryLocationByName(productDefaultLocationName, companyid);
                                    refData.put(productDefaultLocationName, invLoc);
                                }
                                // Ref Optimization related code. 

                                if (invLoc != null) {
                                    productDefaultLocationID = invLoc.getId();
                                } else {
                                    if (masterPreference.equalsIgnoreCase("2") && isIslocationforproduct) {
                                        HashMap requestParam = requestParams1; // AccountingManager.getGlobalParams(request);
                                        requestParam.put("id", "");
                                        requestParam.put("name", productDefaultLocationName);
                                        requestParam.put("parent", null);
                                        requestParam.put("user", user);
                                        KwlReturnObject locationResult = accMasterItemsDAOobj.addLocationItem(requestParam);
                                        invLoc = (InventoryLocation) locationResult.getEntityList().get(0);
                                        productDefaultLocationID = invLoc.getId();
                                        refData.put(productDefaultLocationName, invLoc);// Ref Optimization related code. 
                                    } else {
                                        if (masterPreference.equalsIgnoreCase("1")) {
                                            productDefaultLocationID = null;
                                        } else {
                                            if (isIslocationforproduct) {
                                                invalidColumn.put((Integer) columnConfig.get("locationName"), "Invalid");
                                                failureMsg += "Default Location is not found for " + productDefaultLocationName + ".";
                                            }
                                        }
                                    }
                                }
                            }
                        } else if(!updateExistingRecordFlag) {
                            productDefaultLocationID = null;
                        }
                        
                        
                        String productDefaultWarehouseID = "";
                        if (!(productTypeID.equals(Producttype.SERVICE) || productTypeID.equals(Producttype.NON_INVENTORY_PART)) && columnConfig.containsKey("warehouseName") && companyAccountPreferences.isIswarehousecompulsory()) {
                            String productDefaultWarehouseName = recarr[(Integer) columnConfig.get("warehouseName")].replaceAll("\"", "").trim();
                            if (!StringUtil.isNullOrEmpty(productDefaultWarehouseName)) {
                                
                                // Ref Optimization related code. 
                                Map refData = null;
                                if (refColumnObjMap.containsKey("warehouseName")) {
                                    refData = refColumnObjMap.get("warehouseName");
                                } else {
                                    refData = new HashMap();
                                    refColumnObjMap.put("warehouseName", refData);
                                }
                                InventoryWarehouse invWHouse = null;
                                if (refData.containsKey(productDefaultWarehouseName)) {
                                    invWHouse = refData.get(productDefaultWarehouseName) != null ? (InventoryWarehouse) refData.get(productDefaultWarehouseName) : null;
                                } else {
                                    invWHouse = getInventoryWarehouseByName(productDefaultWarehouseName, companyid);
                                    refData.put(productDefaultWarehouseName, invWHouse);
                                }
                                // Ref Optimization related code. 

                                if (invWHouse != null) {
                                    productDefaultWarehouseID = invWHouse.getId();
                                    //Get the Store Object & check store type.
                                    Store store = storeService.getStoreById(productDefaultWarehouseID);
                                    // Check if store type is not Warehouse or Headquarter as such Default Warehouse are not allowed to map to product.
                                    if (isIswarehouseforproduct && store.getStoreType() != StoreType.WAREHOUSE && store.getStoreType() != StoreType.HEADQUARTER){
                                        invalidColumn.put((Integer) columnConfig.get("warehouseName"), "Invalid");
                                        failureMsg += "Store type for " + productDefaultWarehouseName + " store must be either "+ StoreType.WAREHOUSE.toString() +" or "+ StoreType.HEADQUARTER.toString() +".";
                                    }
                                    if (((!StringUtil.isNullOrEmpty(extraCompanyPreferences.getInspectionStore()) && extraCompanyPreferences.getInspectionStore().equals(productDefaultWarehouseID))) || (!StringUtil.isNullOrEmpty(extraCompanyPreferences.getRepairStore()) && extraCompanyPreferences.getRepairStore().equals(productDefaultWarehouseID))) {
                                        failureMsg += "Can not use QA or Repair warehouse as default warehouse.";
                                    }
                                } else {
                                    if (masterPreference.equalsIgnoreCase("2") && isIswarehouseforproduct) {
                                        Store store = new Store();
                                        store.setStoreType(storeService.getStoreType(0));//Set Store type to warehouse
                                        store.setAbbreviation(productDefaultWarehouseName);
                                        store.setDescription(productDefaultWarehouseName);
                                        store.setCcDateAllow(false);//set Default False
                                        store.setSmccAllow(false);//set Default False
                                        store.setCreatedBy(user);
                                        Set<User> userSet = new HashSet<>();
                                        userSet.add(user);
                                        Set<User> executiveSet = new HashSet<>();
                                        executiveSet.add(user);
                                        store.setCompany(user.getCompany());
                                        store.setStoreManagerSet(userSet);
                                        store.setStoreExecutiveSet(executiveSet);
                                        storeService.addStore(user, store);
                                        productDefaultWarehouseID = store.getId();
                                        refData.put(productDefaultWarehouseName, storeService.getERPWarehouse(productDefaultWarehouseID));// Ref Optimization related code. 
                                    } else {
                                        if (masterPreference.equalsIgnoreCase("1")) {
                                            productDefaultWarehouseID = null;
                                        } else {
                                            if (isIswarehouseforproduct) {
                                                invalidColumn.put((Integer) columnConfig.get("warehouseName"), "Invalid");
                                                failureMsg += "Default Warehouse is not found for " + productDefaultWarehouseName + ".";
                                            }
                                        }
                                    }
                                }
                            }
                        } else if(!updateExistingRecordFlag){
                            productDefaultWarehouseID = null;
                        }

                        //ERP-34463
                        if(!StringUtil.isNullOrEmpty(productDefaultWarehouseID) && !isIswarehouseforproduct){
                            isIswarehouseforproduct=true;
                        }
                        if(!StringUtil.isNullOrEmpty(productDefaultLocationID) && !isIslocationforproduct){
                            isIslocationforproduct=true;
                        }
                        if((!isIswarehouseforproduct && isIslocationforproduct) || (!isIslocationforproduct && isIswarehouseforproduct)){
                            isIswarehouseforproduct=true;
                            isIslocationforproduct=true;
                        }

                        Boolean isSyncable = false;
                        if (columnConfig.containsKey("syncable")) {
                            String productMakeAvailableInOtherApp = recarr[(Integer) columnConfig.get("syncable")].replaceAll("\"", "").trim();
                            if (!StringUtil.isNullOrEmpty(productMakeAvailableInOtherApp)) {
                                if (productMakeAvailableInOtherApp.equalsIgnoreCase("T")) {
                                    isSyncable = true;
                                } else if (productMakeAvailableInOtherApp.equalsIgnoreCase("F")) {
                                    isSyncable = false;
                                } else {
                                    invalidColumn.put((Integer) columnConfig.get("syncable"), "Invalid");
                                    failureMsg += "Format you entered is not correct for Make available in other application. It should be like \"T\" or \"F\".";
                                }
                            }
                        }


                        Boolean isMultiUOM = false;
                        if (columnConfig.containsKey("multiuom")) {
                            String multipleUOM = recarr[(Integer) columnConfig.get("multiuom")].replaceAll("\"", "").trim();
                            if (!StringUtil.isNullOrEmpty(multipleUOM)) {
                                if (multipleUOM.equalsIgnoreCase("T")) {
                                    isMultiUOM = true;
                                } else if (multipleUOM.equalsIgnoreCase("F")) {
                                    isMultiUOM = false;
                                } else {
                                    invalidColumn.put((Integer) columnConfig.get("multiuom"), "Invalid");
                                    failureMsg += "Format you entered is not correct for Multiple UOM. It should be like \"T\" or \"F\".";
                                }
                            }
                        }
                        
                        if (isIslocationforproduct && StringUtil.isNullOrEmpty(productDefaultLocationID) && (!updateExistingRecordFlag || (newProductAddinUpdateCase && updateExistingRecordFlag))) {
                            invalidColumn.put((Integer) columnConfig.get("locationName"), "Invalid");
                            failureMsg += "Location is activated but Default Location Value is not Provided.";
                        }

                        Boolean isIsSerialForProduct = false;
                        if (!(productTypeID.equals(Producttype.SERVICE) || productTypeID.equals(Producttype.NON_INVENTORY_PART)) && columnConfig.containsKey(Constants.ACTIVATE_SERIAL_NO) && companyAccountPreferences.isIsSerialCompulsory()) {
                            String IsSerialForProduct = recarr[(Integer) columnConfig.get(Constants.ACTIVATE_SERIAL_NO)].replaceAll("\"", "").trim();
                            if (!StringUtil.isNullOrEmpty(IsSerialForProduct)) {
                                if (IsSerialForProduct.equalsIgnoreCase("T")) {
                                    isIsSerialForProduct = true;
                                } else if (IsSerialForProduct.equalsIgnoreCase("F")) {
                                    isIsSerialForProduct = false;
                                } else {
                                    invalidColumn.put((Integer) columnConfig.get(Constants.ACTIVATE_SERIAL_NO), "Invalid");
                                    failureMsg += "Format you entered is not correct for Activate Serial No. It should be like \"T\" or \"F\".";
                                }
                            }
                        }

                        if (isIsSerialForProduct && Double.parseDouble(productInitialQuantity) > 0) {
                            invalidColumn.put((Integer) columnConfig.get("initialquantity"), "Invalid");
                            failureMsg += "Serial Data can't be imported because Opening Quantity is more than 0.";
                        }
                                               
                        if (isIswarehouseforproduct && StringUtil.isNullOrEmpty(productDefaultWarehouseID) && (!updateExistingRecordFlag || (newProductAddinUpdateCase && updateExistingRecordFlag))) {
                            invalidColumn.put((Integer) columnConfig.get("warehouseName"), "Invalid");
                            failureMsg += "Warehouse is activated but Default Warehouse Value is not Provided.";
                        }

                        Boolean isIsBatchForProduct = false;
                        if (!(productTypeID.equals(Producttype.SERVICE) || productTypeID.equals(Producttype.NON_INVENTORY_PART)) && columnConfig.containsKey(Constants.ACTIVATE_BATCH) && companyAccountPreferences.isIsBatchCompulsory()) {
                            String IsBatchForProduct = recarr[(Integer) columnConfig.get(Constants.ACTIVATE_BATCH)].replaceAll("\"", "").trim();
                            if (!StringUtil.isNullOrEmpty(IsBatchForProduct)) {
                                if (IsBatchForProduct.equalsIgnoreCase("T")) {
                                    isIsBatchForProduct = true;
                                } else if (IsBatchForProduct.equalsIgnoreCase("F")) {
                                    isIsBatchForProduct = false;
                                } else {
                                    invalidColumn.put((Integer) columnConfig.get(Constants.ACTIVATE_BATCH), "Invalid");
                                    failureMsg += "Format you entered is not correct for Activate Batches. It should be like \"T\" or \"F\".";
                                }
                            }
                        }

                        Boolean isIsRowForProduct = false;
                        if (!(productTypeID.equals(Producttype.SERVICE) || productTypeID.equals(Producttype.NON_INVENTORY_PART)) && columnConfig.containsKey(Constants.ACTIVATE_ROW) && companyAccountPreferences.isIsrowcompulsory()) {
                            String IsRowForProduct = recarr[(Integer) columnConfig.get(Constants.ACTIVATE_ROW)].replaceAll("\"", "").trim();
                            if (!StringUtil.isNullOrEmpty(IsRowForProduct)) {
                                if (IsRowForProduct.equalsIgnoreCase("T")) {
                                    isIsRowForProduct = true;
                                } else if (IsRowForProduct.equalsIgnoreCase("F")) {
                                    isIsRowForProduct = false;
                                } else {
                                    invalidColumn.put((Integer) columnConfig.get(Constants.ACTIVATE_ROW), "Invalid");
                                    failureMsg += "Format you entered is not correct for Activate Row. It should be like \"T\" or \"F\".";
                                }
                            }
                        }
                        Boolean isIsRackForProduct = false;
                        if (!(productTypeID.equals(Producttype.SERVICE) || productTypeID.equals(Producttype.NON_INVENTORY_PART)) && columnConfig.containsKey(Constants.ACTIVATE_RACK) && companyAccountPreferences.isIsrackcompulsory()) {
                            String IsRackForProduct = recarr[(Integer) columnConfig.get(Constants.ACTIVATE_RACK)].replaceAll("\"", "").trim();
                            if (!StringUtil.isNullOrEmpty(IsRackForProduct)) {
                                if (IsRackForProduct.equalsIgnoreCase("T")) {
                                    isIsRackForProduct = true;
                                } else if (IsRackForProduct.equalsIgnoreCase("F")) {
                                    isIsRackForProduct = false;
                                } else {
                                    invalidColumn.put((Integer) columnConfig.get(Constants.ACTIVATE_RACK), "Invalid");
                                    failureMsg += "Format you entered is not correct for Activate Rack. It should be like \"T\" or \"F\".";
                                }
                            }
                        }
                        Boolean isIsBinForProduct = false;
                        if (!(productTypeID.equals(Producttype.SERVICE) || productTypeID.equals(Producttype.NON_INVENTORY_PART)) && columnConfig.containsKey(Constants.ACTIVATE_BIN) && companyAccountPreferences.isIsbincompulsory()) {
                            String IsBinForProduct = recarr[(Integer) columnConfig.get(Constants.ACTIVATE_BIN)].replaceAll("\"", "").trim();
                            if (!StringUtil.isNullOrEmpty(IsBinForProduct)) {
                                if (IsBinForProduct.equalsIgnoreCase("T")) {
                                    isIsBinForProduct = true;
                                } else if (IsBinForProduct.equalsIgnoreCase("F")) {
                                    isIsBinForProduct = false;
                                } else {
                                    invalidColumn.put((Integer) columnConfig.get(Constants.ACTIVATE_BIN), "Invalid");
                                    failureMsg += "Format you entered is not correct for Activate Bin. It should be like \"T\" or \"F\".";
                                }
                            }
                        }

                        String wipoffset = "";
                        if (columnConfig.containsKey("wipoffset")) {
                            String temp = recarr[(Integer) columnConfig.get("wipoffset")].replaceAll("\"", "").trim();
                            if (!StringUtil.isNullOrEmpty(temp)) {
                                wipoffset = temp;
                            }
                        }

                        String inventoryoffset = "";
                        if (columnConfig.containsKey("inventoryoffset")) {
                            String temp = recarr[(Integer) columnConfig.get("inventoryoffset")].replaceAll("\"", "").trim();
                            if (!StringUtil.isNullOrEmpty(temp)) {
                                inventoryoffset = temp;
                            }
                        }

                        String hscode = "";
                        if (columnConfig.containsKey("hscode")) {
                            String temp = recarr[(Integer) columnConfig.get("hscode")].replaceAll("\"", "").trim();
                            if (!StringUtil.isNullOrEmpty(temp)) {
                                hscode = temp;
                            }
                        }
                        String additionalfreetext = "";
                        if (columnConfig.containsKey("additionalfreetext")) {
                            String temp = recarr[(Integer) columnConfig.get("additionalfreetext")].replaceAll("\"", "").trim();
                            if (!StringUtil.isNullOrEmpty(temp)) {
                                additionalfreetext = temp;
                            }
                        }
                        String itemcolor = "";
                        if (columnConfig.containsKey("itemcolor")) {
                            String temp = recarr[(Integer) columnConfig.get("itemcolor")].replaceAll("\"", "").trim();
                            if (!StringUtil.isNullOrEmpty(temp)) {
                                itemcolor = temp;
                            }
                        }
                        String alternateproduct = "";
                        if (columnConfig.containsKey("alternateproduct")) {
                            String temp = recarr[(Integer) columnConfig.get("alternateproduct")].replaceAll("\"", "").trim();
                            if (!StringUtil.isNullOrEmpty(temp)) {
                                alternateproduct = temp;
                            }
                        }
                        String purchasemfg = "";
                        if (columnConfig.containsKey("purchasemfg")) {
                            String temp = recarr[(Integer) columnConfig.get("purchasemfg")].replaceAll("\"", "").trim();
                            if (!StringUtil.isNullOrEmpty(temp)) {
                                purchasemfg = temp;
                            }
                        }
                        String catalogno = "";
                        if (columnConfig.containsKey("catalogno")) {
                            String temp = recarr[(Integer) columnConfig.get("catalogno")].replaceAll("\"", "").trim();
                            if (!StringUtil.isNullOrEmpty(temp)) {
                                catalogno = temp;
                            }
                        }
                        String barcode = "";
                        if (columnConfig.containsKey("barcode")) {
                            String temp = recarr[(Integer) columnConfig.get("barcode")].replaceAll("\"", "").trim();
                            if (!StringUtil.isNullOrEmpty(temp)) {
                                barcode = temp;
                            }
                        }
                        String supplier = "";
                        if (columnConfig.containsKey("supplier")) {
                            String temp = recarr[(Integer) columnConfig.get("supplier")].replaceAll("\"", "").trim();
                            if (!StringUtil.isNullOrEmpty(temp)) {
                                supplier = temp;
                            }
                        }
                        String additionaldesc = "";
                        if (columnConfig.containsKey("additionaldesc")) {
                            String temp = recarr[(Integer) columnConfig.get("additionaldesc")].replaceAll("\"", "").trim();
                            if (!StringUtil.isNullOrEmpty(temp)) {
                                additionaldesc = temp;
                            }
                        }
                        String descinforeign = "";
                        if (columnConfig.containsKey("descinforeign")) {
                            String temp = recarr[(Integer) columnConfig.get("descinforeign")].replaceAll("\"", "").trim();
                            if (!StringUtil.isNullOrEmpty(temp)) {
                                descinforeign = temp;
                            }
                        }
                        String licensecode = "";
                        if (columnConfig.containsKey("licensecode")) {
                            String temp = recarr[(Integer) columnConfig.get("licensecode")].replaceAll("\"", "").trim();
                            if (!StringUtil.isNullOrEmpty(temp)) {
                                licensecode = temp;
                            }
                        }
                        String itemgroup = "";
                        if (columnConfig.containsKey("itemgroup")) {
                            String temp = recarr[(Integer) columnConfig.get("itemgroup")].replaceAll("\"", "").trim();
                            if (!StringUtil.isNullOrEmpty(temp)) {
                                itemgroup = temp;
                            }
                        }
                        String pricelist = "";
                        if (columnConfig.containsKey("pricelist")) {
                            String temp = recarr[(Integer) columnConfig.get("pricelist")].replaceAll("\"", "").trim();
                            if (!StringUtil.isNullOrEmpty(temp)) {
                                pricelist = temp;
                            }
                        }
                        String shippingtype = "";
                        if (columnConfig.containsKey("shippingtype")) {
                            String temp = recarr[(Integer) columnConfig.get("shippingtype")].replaceAll("\"", "").trim();
                            if (!StringUtil.isNullOrEmpty(temp)) {
                                shippingtype = temp;
                            }
                        }
                        Boolean recyclable = false;
                        if (columnConfig.containsKey("recyclable")) {
                            String temp = recarr[(Integer) columnConfig.get("recyclable")].replaceAll("\"", "").trim();
                            if (!StringUtil.isNullOrEmpty(temp)) {
                                String isRecyclable = temp;
                                if (isRecyclable.equalsIgnoreCase("T")) {
                                    recyclable = true;
                                } else if (isRecyclable.equalsIgnoreCase("F")) {
                                    recyclable = false;
                                } else {
                                    invalidColumn.put((Integer) columnConfig.get("recyclable"), "Invalid");
                                    failureMsg += "Format you entered is not correct for Is Recyclable. It should be like \"T\" or \"F\".";
                                }
                            }
                        }
                        Boolean qaenable = false;
                        if (columnConfig.containsKey("qaenable")) {
                            String temp = recarr[(Integer) columnConfig.get("qaenable")].replaceAll("\"", "").trim();
                            if (!StringUtil.isNullOrEmpty(temp)) {
                                String isQaenable = temp;
                                if (isQaenable.equalsIgnoreCase("T")) {
                                    qaenable = true;
                                } else if (isQaenable.equalsIgnoreCase("F")) {
                                    qaenable = false;
                                } else {
                                    invalidColumn.put((Integer) columnConfig.get("qaenable"), "Invalid");
                                    failureMsg += "Format you entered is not correct for QA Enable. It should be like \"T\" or \"F\".";
                                }
                            }
                        }
                        Boolean isknittingitem = false;
                        if (columnConfig.containsKey("isknittingitem")) {
                            String temp = recarr[(Integer) columnConfig.get("isknittingitem")].replaceAll("\"", "").trim();
                            if (!StringUtil.isNullOrEmpty(temp)) {
                                String isIsknittingitem = temp;
                                if (isIsknittingitem.equalsIgnoreCase("T")) {
                                    isknittingitem = true;
                                } else if (isIsknittingitem.equalsIgnoreCase("F")) {
                                    isknittingitem = false;
                                } else {
                                    invalidColumn.put((Integer) columnConfig.get("isknittingitem"), "Invalid");
                                    failureMsg += "Format you entered is not correct for Is Kitting item. It should be like \"T\" or \"F\".";
                                }
                            }
                        }
                        Boolean isactive = false;
                        if (columnConfig.containsKey("isactive")) {
                            String temp = recarr[(Integer) columnConfig.get("isactive")].replaceAll("\"", "").trim();
                            if (!StringUtil.isNullOrEmpty(temp)) {
                                String isIsactive = temp;
                                if (isIsactive.equalsIgnoreCase("T")) {
                                    isactive = true;
                                } else if (isIsactive.equalsIgnoreCase("F")) {
                                    isactive = false;
                                } else {
                                    invalidColumn.put((Integer) columnConfig.get("isactive"), "Invalid");
                                    failureMsg += "Format you entered is not correct for Is Active. It should be like \"T\" or \"F\".";
                                }
                            }
                        }
                        Boolean blockloosesell = false;
                        if (columnConfig.containsKey("blockloosesell")) {
                            String temp = recarr[(Integer) columnConfig.get("blockloosesell")].replaceAll("\"", "").trim();
                            if (!StringUtil.isNullOrEmpty(temp)) {
                                String isBlockloosesell = temp;
                                if (isBlockloosesell.equalsIgnoreCase("T")) {
                                    blockloosesell = true;
                                } else if (isBlockloosesell.equalsIgnoreCase("F")) {
                                    blockloosesell = false;
                                } else {
                                    invalidColumn.put((Integer) columnConfig.get("blockloosesell"), "Invalid");
                                    failureMsg += "Format you entered is not correct for Block Loose Selling. It should be like \"T\" or \"F\".";
                                }
                            }
                        }
                        String itemsalesvolume = "";
                        if (columnConfig.containsKey("itemsalesvolume")) {
                            String temp = recarr[(Integer) columnConfig.get("itemsalesvolume")].replaceAll("\"", "").trim();
                            if (!StringUtil.isNullOrEmpty(temp)) {
                                itemsalesvolume = temp;
                                try {
                                    Object vDataValue = Double.parseDouble(itemsalesvolume);
                                } catch (Exception ex) {
                                     if (masterPreference.equals("1")) {
                                        itemsalesvolume = "";
                                    } else {
                                        invalidColumn.put((Integer) columnConfig.get("itemsalesvolume"), "Invalid");
                                        failureMsg += "Incorrect numeric value for item Sales Volume, Please ensure that value type of item Sales Volume matches with the item Sales Volume.";
                                    }
                                }
                            }
                        }
                        String productweight = "";
                        if (columnConfig.containsKey("productweight")) {
                            String temp = recarr[(Integer) columnConfig.get("productweight")].replaceAll("\"", "").trim();
                            if (!StringUtil.isNullOrEmpty(temp)) {
                                productweight = temp;
                                try {
                                    Object vDataValue = Double.parseDouble(productweight);
                                } catch (Exception ex) {
                                    if (masterPreference.equals("1")) {
                                        productweight = "";
                                    } else {
                                        invalidColumn.put((Integer) columnConfig.get("productweight"), "Invalid");
                                        failureMsg += "Incorrect numeric value for product weight, Please ensure that value type of product weight matches with the product weight.";
                                    }
                                }
                            }
                        }
                        String productWeightPerStockUom = "";
                        if (columnConfig.containsKey("productweightperstockuom")  && columnConfig.get("productweightperstockuom") != null) {
                            String temp = recarr[(Integer) columnConfig.get("productweightperstockuom")].replaceAll("\"", "").trim();
                            if (!StringUtil.isNullOrEmpty(temp)) {
                                productWeightPerStockUom = temp;
                                try {
                                    Object vDataValue = Double.parseDouble(productWeightPerStockUom);
                                } catch (Exception ex) {
                                    if (masterPreference.equals("1")) {
                                        productWeightPerStockUom = "";
                                    } else {
                                        invalidColumn.put((Integer) columnConfig.get("productweightperstockuom"), "Invalid");
                                        failureMsg += messageSource.getMessage("acc.productimport.invalid.productweightperstockuom", null, locale);
                                    }
                                }
                            }
                        }
                        String productWeightIncludingPakagingPerStockUom = "";
                        if (columnConfig.containsKey("productweightincludingpakagingperstockuom") && columnConfig.get("productweightincludingpakagingperstockuom") != null) {
                            String temp = recarr[(Integer) columnConfig.get("productweightincludingpakagingperstockuom")].replaceAll("\"", "").trim();
                            if (!StringUtil.isNullOrEmpty(temp)) {
                                productWeightIncludingPakagingPerStockUom = temp;
                                try {
                                    Object vDataValue = Double.parseDouble(productWeightIncludingPakagingPerStockUom);
                                } catch (Exception ex) {
                                    if (masterPreference.equals("1")) {
                                        productWeightIncludingPakagingPerStockUom = "";
                                    } else {
                                        invalidColumn.put(columnConfig.get("productweightincludingpakagingperstockuom"), "Invalid");
                                        failureMsg += messageSource.getMessage("acc.productimport.invalid.productweightincludingpackagingperstockuom", null, locale);
                                    }
                                }
                            }
                        }
                        String itemsaleswidth = "";
                        if (columnConfig.containsKey("itemsaleswidth")) {
                            String temp = recarr[(Integer) columnConfig.get("itemsaleswidth")].replaceAll("\"", "").trim();
                            if (!StringUtil.isNullOrEmpty(temp)) {
                                itemsaleswidth = temp;
                                try {
                                    Object vDataValue = Double.parseDouble(itemsaleswidth);
                                } catch (Exception ex) {
                                    if (masterPreference.equals("1")) {
                                        itemsaleswidth = "";
                                    } else {
                                        invalidColumn.put((Integer) columnConfig.get("itemsaleswidth"), "Invalid");
                                        failureMsg += "Incorrect numeric value for Item Sales Width, Please ensure that value type of Item Sales Width matches with the Item Sales Width.";
                                    }
                                }
                            }
                        }
                        String itemsalesheight = "";
                        if (columnConfig.containsKey("itemsalesheight")) {
                            String temp = recarr[(Integer) columnConfig.get("itemsalesheight")].replaceAll("\"", "").trim();
                            if (!StringUtil.isNullOrEmpty(temp)) {
                                itemsalesheight = temp;
                                try {
                                    Object vDataValue = Double.parseDouble(itemsalesheight);
                                } catch (Exception ex) {
                                    if (masterPreference.equals("1")) {
                                        itemsalesheight = "";
                                    } else {
                                        invalidColumn.put((Integer) columnConfig.get("itemsalesheight"), "Invalid");
                                        failureMsg += "Incorrect numeric value for Item Sales Height, Please ensure that value type of Item Sales Height matches with the Item Sales Height.";
                                    }
                                }
                            }
                        }
                        String itemwidth = "";
                        if (columnConfig.containsKey("itemwidth")) {
                            String temp = recarr[(Integer) columnConfig.get("itemwidth")].replaceAll("\"", "").trim();
                            if (!StringUtil.isNullOrEmpty(temp)) {
                                itemwidth = temp;
                                try {
                                    Object vDataValue = Double.parseDouble(itemwidth);
                                } catch (Exception ex) {
                                   if (masterPreference.equals("1")) {
                                        itemwidth = "";
                                    } else {
                                        invalidColumn.put((Integer) columnConfig.get("itemwidth"), "Invalid");
                                        failureMsg += "Incorrect numeric value for Item Width, Please ensure that value type of Item Width matches with the Item Width.";
                                    }
                                }
                            }
                        }
                          String itemlength = "";
                        if (columnConfig.containsKey("itemlength")) {
                            String temp = recarr[(Integer) columnConfig.get("itemlength")].replaceAll("\"", "").trim();
                            if (!StringUtil.isNullOrEmpty(temp)) {
                                itemlength = temp;
                                try {
                                    Object vDataValue = Double.parseDouble(itemlength);
                                    if(itemlength.length()>11){
                                        invalidColumn.put((Integer) columnConfig.get("itemlength"), "Invalid");
                                        failureMsg += "Data length greater than 11 for column Item Length";
                                    }
                                    
                                } catch (Exception ex) {
                                   if (masterPreference.equals("1")) {
                                        itemlength = "";
                                    } else {
                                        invalidColumn.put((Integer) columnConfig.get("itemlength"), "Invalid");
                                        failureMsg += "Incorrect numeric value for Item Length, Please ensure that value type of Item Length matches with the Item Length.";
                                    }
                                    }
                                }
                            }
                          String itemheight = "";
                        if (columnConfig.containsKey("itemheight")) {
                            String temp = recarr[(Integer) columnConfig.get("itemheight")].replaceAll("\"", "").trim();
                            if (!StringUtil.isNullOrEmpty(temp)) {
                                itemheight = temp;
                                try {
                                    Object vDataValue = Double.parseDouble(itemheight);
                                    if(itemheight.length()>11){
                                        invalidColumn.put((Integer) columnConfig.get("itemheight"), "Invalid");
                                        failureMsg += "Data length greater than 11 for column Item Height";
                                    }
                                } catch (Exception ex) {
                                   if (masterPreference.equals("1")) {
                                        itemheight = "";
                                    } else {
                                        invalidColumn.put((Integer) columnConfig.get("itemheight"), "Invalid");
                                        failureMsg += "Incorrect numeric value for Item Height, Please ensure that value type of Item Height matches with the Item Height.";
                                    }
                                }
                            }
                        }
                        String itemvolume = "";
                        if (columnConfig.containsKey("itemvolume")) {
                            String temp = recarr[(Integer) columnConfig.get("itemvolume")].replaceAll("\"", "").trim();
                            if (!StringUtil.isNullOrEmpty(temp)) {
                                itemvolume = temp;
                                try {
                                    Object vDataValue = Double.parseDouble(itemwidth);
                                } catch (Exception ex) {
                                   if (masterPreference.equals("1")) {
                                        itemvolume = "";
                                    } else {
                                        invalidColumn.put((Integer) columnConfig.get("itemvolume"), "Invalid");
                                        failureMsg += "Incorrect numeric value for Item Width, Please ensure that value type of Item Width matches with the Item Width.";
                                    }
                                }
                            }
                        }
                        String itempurchasewidth = "";
                        if (columnConfig.containsKey("itempurchasewidth")) {
                            String temp = recarr[(Integer) columnConfig.get("itempurchasewidth")].replaceAll("\"", "").trim();
                            if (!StringUtil.isNullOrEmpty(temp)) {
                                itempurchasewidth = temp;
                                try {
                                    Object vDataValue = Double.parseDouble(itempurchasewidth);
                                } catch (Exception ex) {
                                    if (masterPreference.equals("1")) {
                                        itempurchasewidth = "";
                                    } else {
                                        invalidColumn.put((Integer) columnConfig.get("itempurchasewidth"), "Invalid");
                                        failureMsg += "Incorrect numeric value for Item Purchase Width, Please ensure that value type of Item Purchase Width matches with the Item Purchase Width.";
                                    }
                                }
                            }
                        }
                        String itempurchasevolume = "";
                        if (columnConfig.containsKey("itempurchasevolume")) {
                            String temp = recarr[(Integer) columnConfig.get("itempurchasevolume")].replaceAll("\"", "").trim();
                            if (!StringUtil.isNullOrEmpty(temp)) {
                                itempurchasevolume = temp;
                                try {
                                    Object vDataValue = Double.parseDouble(itempurchasevolume);
                                } catch (Exception ex) {
                                    if (masterPreference.equals("1")) {
                                        itempurchasevolume = "";
                                    } else {
                                        invalidColumn.put((Integer) columnConfig.get("itempurchasevolume"), "Invalid");
                                        failureMsg += "Incorrect numeric value for Item Purchase Volume, Please ensure that value type of Item Purchase Volume matches with the Item Purchase Volume.";
                                    }
                                }
                            }
                        }
                        String itempurchaselength = "";
                        if (columnConfig.containsKey("itempurchaselength")) {
                            String temp = recarr[(Integer) columnConfig.get("itempurchaselength")].replaceAll("\"", "").trim();
                            if (!StringUtil.isNullOrEmpty(temp)) {
                                itempurchaselength = temp;
                                try {
                                    Object vDataValue = Double.parseDouble(itempurchaselength);
                                } catch (Exception ex) {
                                    if (masterPreference.equals("1")) {
                                        itempurchaselength = "";
                                    } else {
                                        invalidColumn.put((Integer) columnConfig.get("itempurchaselength"), "Invalid");
                                        failureMsg += "Incorrect numeric value for Item Purchase Length, Please ensure that value type of Item Purchase Length matches with the Item Purchase Length.";
                                    }
                                }
                            }
                        }
                        String qaleadtimeindays = "";
                        if (columnConfig.containsKey("qaleadtimeindays")) {
                            String temp = recarr[(Integer) columnConfig.get("qaleadtimeindays")].replaceAll("\"", "").trim();
                            if (!StringUtil.isNullOrEmpty(temp)) {
                                qaleadtimeindays = temp;
                                try {
                                    Object vDataValue = Integer.parseInt(qaleadtimeindays);
                                } catch (Exception ex) {
                                     if (masterPreference.equals("1")) {
                                        qaleadtimeindays = "";
                                    } else {
                                        invalidColumn.put((Integer) columnConfig.get("qaleadtimeindays"), "Invalid");
                                        failureMsg += "Incorrect numeric value for QA Lead Time(in days), Please ensure that value type of QA Lead Time(in days) matches with the QA Lead Time(in days).";
                                    }
                                }
                            }
                        }
                        String reusabilitycount = "";
                        if (columnConfig.containsKey("reusabilitycount")) {
                            String temp = recarr[(Integer) columnConfig.get("reusabilitycount")].replaceAll("\"", "").trim();
                            if (!StringUtil.isNullOrEmpty(temp)) {
                                reusabilitycount = temp;
                                try {
                                    Object vDataValue = Integer.parseInt(reusabilitycount);
                                } catch (Exception ex) {
                                    if (masterPreference.equals("1")) {
                                        reusabilitycount = "";
                                    } else {
                                        invalidColumn.put((Integer) columnConfig.get("reusabilitycount"), "Invalid");
                                        failureMsg += "Incorrect numeric value for Re-usability Count, Please ensure that value type of Re-usability Count matches with the Re-usability Count.";
                                    }
                                }
                            }
                        }
                        
                        ItemReusability itemReusability = null;
                        if (columnConfig.containsKey("itemreusability")) {
                            String temp = recarr[(Integer) columnConfig.get("itemreusability")].replaceAll("\"", "").trim();
                            if (!StringUtil.isNullOrEmpty(temp)) {

                                if (temp.equalsIgnoreCase(Constants.CONSUMABLE)) {
                                    itemReusability = ItemReusability.DISPOSABLE;
                                } else if (temp.equalsIgnoreCase(Constants.REUSABLE)) {
                                    itemReusability = ItemReusability.REUSABLE;
                                } else {
                                    if (masterPreference.equals("1")) {
                                        itemReusability = ItemReusability.REUSABLE;
                                    } else {
                                        invalidColumn.put((Integer) columnConfig.get("itemreusability"), "Invalid");
                                        failureMsg += "Incorrect value for item Reusability, Please ensure that value type of Item Reusability matches with the Item Reusability.";
                                    }
                                }
                            }
                        }
                        
                        Boolean vatonmrp = isVatApplicable;
                        if (columnConfig.containsKey("vatonmrp") && indianCheck && isVatApplicable) {
                            String temp = recarr[(Integer) columnConfig.get("vatonmrp")].replaceAll("\"", "").trim();
                            if (!StringUtil.isNullOrEmpty(temp)) {
                                String vatonmrpTemp = temp;

                                if (!StringUtil.isNullOrEmpty(vatonmrpTemp)) {
                                    try {
                                        vatonmrp =vatonmrpTemp.equalsIgnoreCase("T") || vatonmrpTemp.equalsIgnoreCase("True");
                                    } catch (Exception ex) {
                                        if (masterPreference.equals("1")) {
                                            vatonmrp = !isVatApplicable; // False means UI Side Colapse 
                                        } else {
                                            invalidColumn.put((Integer) columnConfig.get("mrprate"), "Invalid");
                                            failureMsg += "VAT Details Activated  is not found";
                                        }
                                    }
                                }
                            }
                        }
                        Boolean rcmapplicable = null;
                        if (columnConfig.containsKey("rcmapplicable") && indianCheck) {
                            String temp = recarr[(Integer) columnConfig.get("rcmapplicable")].replaceAll("\"", "").trim();
                            if (!StringUtil.isNullOrEmpty(temp)) {
                                rcmapplicable = temp.equalsIgnoreCase("T") || temp.equalsIgnoreCase("True");
                            }
                        }
                        
                        String tariffName = "";
                        if (!productTypeID.equals(Producttype.SERVICE) && columnConfig.containsKey("tariffname") && indianCheck) {
                            String temp = recarr[(Integer) columnConfig.get("tariffname")].replaceAll("\"", "").trim();
                            if (!StringUtil.isNullOrEmpty(temp)) {
                                tariffName = temp;
                            } else {
                                if (masterPreference.equalsIgnoreCase("1")) {
                                   tariffName="";
                                }else{
                                   failureMsg += "Tariff Name column is not found.";
                               }
                            }
                        }
                        
                        String hsncode = "";
                        if (!productTypeID.equals(Producttype.SERVICE) && columnConfig.containsKey("hsncode") && indianCheck) {
                            String temp = recarr[(Integer) columnConfig.get("hsncode")].replaceAll("\"", "").trim();
                            if (!StringUtil.isNullOrEmpty(temp)) {
                                hsncode = temp;
                                try {
                                    Object vDataValue = Integer.parseInt(hsncode);
                                } catch (Exception ex) {
                                     if (masterPreference.equals("1")) {
                                        hsncode = "0";
                                    } else {
                                        invalidColumn.put((Integer) columnConfig.get("hsncode"), "Invalid");
                                        failureMsg += "Incorrect numeric value for HSN Code, Please ensure that value type of HSN Code matches with the HSN Code.";
                                    }
                                }
                            } else if(!updateExistingRecordFlag) {
                                failureMsg += "HSNCode column is not found.";
                            }
                        }
                        
                        String reportinguomName = "",reportinguomID="";
                        UnitOfMeasure reportinguom=null;
                        if (!productTypeID.equals(Producttype.SERVICE) && columnConfig.containsKey("reportinguom") && indianCheck) {
                            String temp = recarr[(Integer) columnConfig.get("reportinguom")].replaceAll("\"", "").trim();
                            if (!StringUtil.isNullOrEmpty(temp)) {
                                reportinguomName = temp;
                                reportinguom = accProductModuleService.getUOMByName(reportinguomName, companyid);
                                if(reportinguom!=null){
                                    reportinguomID=reportinguom.getID();
                                }
                            }else {
                                if (masterPreference.equalsIgnoreCase("1")) {
                                    reportinguomID = "";
                                } else if(!updateExistingRecordFlag) {
                                    failureMsg += "Reporting UOM column is not found.";
                                }
                        }
                        }
                        
                        UOMschemaType reportingSchemaType = null;
                        if (!productTypeID.equals(Producttype.SERVICE) && columnConfig.containsKey("reportingschematype") && indianCheck) {
                            String temp = recarr[(Integer) columnConfig.get("reportingschematype")].replaceAll("\"", "").trim();
                            if (!StringUtil.isNullOrEmpty(temp)) {
                                String uomSchemaTypeName = temp;//cell.getStringCellValue().trim();
                                if (!StringUtil.isNullOrEmpty(uomSchemaTypeName)) {
                                    
                                    // Ref Optimization related code. 
                                    Map refData = null;
                                    if (refColumnObjMap.containsKey("uomSchemaType")) {
                                        refData = refColumnObjMap.get("uomSchemaType");
                                    } else {
                                        refData = new HashMap();
                                        refColumnObjMap.put("uomSchemaType", refData);
                                    }
                                    if (refData.containsKey(uomSchemaTypeName)) {
                                        reportingSchemaType = refData.get(uomSchemaTypeName) != null ? (UOMschemaType) refData.get(uomSchemaTypeName) : null;
                                    } else {
                                        reportingSchemaType = getUOMschemaTypeByName(uomSchemaTypeName, companyid);
                                        refData.put(uomSchemaTypeName, reportingSchemaType);
                                    }
                                }
                                 // Ref Optimization related code. 
                                 if (reportingSchemaType == null) {                                        
                                            invalidColumn.put((Integer) columnConfig.get("uomSchemaTypeName"), "Invalid");
                                            failureMsg += "UOM Schema is not found for " + uomSchemaTypeName;                                        
                                    }
                            }
                        }
                        
                        String excisemethod = "";
                        if (!productTypeID.equals(Producttype.SERVICE) && columnConfig.containsKey("excisemethodmain") && indianCheck && isExciseApplicable) {
                            String temp = recarr[(Integer) columnConfig.get("excisemethodmain")].replaceAll("\"", "").trim();
                            if (!StringUtil.isNullOrEmpty(temp)) {
                                excisemethod = temp;
                                if (IndiaComplianceConstants.valuationType.containsKey(excisemethod.trim())) { //ERP-28454
                                    excisemethod = IndiaComplianceConstants.valuationType.get(excisemethod.trim());
                                }else{
                                    failureMsg += temp+" which is not found Valuation Type (1.Ad Valorem Method,2.Quantity,3.Specific basis,4.MRP (Maximum Retail Price)).";
                                }
                            } else if(productTypeID.equals(Producttype.SERVICE) && StringUtil.isNullOrEmpty(temp) && !updateExistingRecordFlag) {
                                failureMsg += "Valuation Type column is not found.";
                            }
                        }
                        String vatMethodType = "";
                        if (columnConfig.containsKey("vatMethodType") && indianCheck && vatonmrp) {
                            String temp = recarr[(Integer) columnConfig.get("vatMethodType")].replaceAll("\"", "").trim();
                            if (!StringUtil.isNullOrEmpty(temp)) {
                                if (IndiaComplianceConstants.valuationType.containsKey(temp.trim())) { //ERP-28454
                                    vatMethodType = IndiaComplianceConstants.valuationType.get(temp.trim());
                                    if (vatMethodType.equals("specific")) {
                                        failureMsg += temp + " which is not found Vat Valuation Type (1.Ad Valorem Method,2.Quantity,3.Specific basis,4.MRP (Maximum Retail Price)).";
                                    }
                                }else{
                                    failureMsg += temp+" whih is not found Vat Valuation Type.(1.Ad Valorem Method,2.Quantity,3.Specific basis,4.MRP (Maximum Retail Price))";
                                }
                            } else if(!updateExistingRecordFlag) {
                                failureMsg += "Vat Valuation Type column is not found.";
                            }
                        }
                        
                        Date vatAbatementPeriodFromDate=null;
                        if (columnConfig.containsKey("vatAbatementPeriodFromDate") && indianCheck && vatonmrp) {//when AsofDate header is mapped
                            String temp = recarr[(Integer) columnConfig.get("vatAbatementPeriodFromDate")].replaceAll("\"", "").trim();
                            if (!StringUtil.isNullOrEmpty(temp)) {
                                String stringAsOfDate = temp;
                                if (!stringAsOfDate.equals("")) {
                                    try {
                                        
                                        vatAbatementPeriodFromDate = df.parse(stringAsOfDate);
                                    } catch (Exception ex) {
                                            invalidColumn.put((Integer) columnConfig.get("vatAbatementPeriodFromDate"), "Invalid");
                                            failureMsg += "Incorrect date format for Applicability Period From, Please specify values in " + temp + " format.";
                                    }
                                }
                            } 
                        }
                        
                        Date vatAbatementPeriodToDate=null;
                        if (columnConfig.containsKey("vatAbatementPeriodToDate") && indianCheck && vatonmrp) {//when AsofDate header is mapped
                            String temp = recarr[(Integer) columnConfig.get("vatAbatementPeriodToDate")].replaceAll("\"", "").trim();
                            if (!StringUtil.isNullOrEmpty(temp)) {
                                String stringAsOfDate = temp;
                                if (!stringAsOfDate.equals("")) {
                                    try {
                                        
                                        vatAbatementPeriodToDate = df.parse(stringAsOfDate);
                                    } catch (Exception ex) {
                                            invalidColumn.put((Integer) columnConfig.get("vatAbatementPeriodToDate"), "Invalid");
                                            failureMsg += "Incorrect date format for Applicability Period To, Please specify values in " + temp + " format.";
                                    }
                                }
                            } 
                        }
                        
                        String vatcommoditycode = "";
                        if (columnConfig.containsKey("vatcommoditycode") && indianCheck && vatonmrp) {
                            String temp = recarr[(Integer) columnConfig.get("vatcommoditycode")].replaceAll("\"", "").trim();
                            if (!StringUtil.isNullOrEmpty(temp)) {
                                String vatcommodityname = temp;
                                Map tempData = new HashMap<String, String>();
                                tempData.put("vatcommodityname", vatcommodityname);
                                tempData.put("company", companyid);
                                KwlReturnObject vatCommresult = accProductObj.getVATCommodityCodeByName(tempData);
                                if (vatCommresult.getRecordTotalCount() > 0) {
                                    List list = (ArrayList) vatCommresult.getEntityList();
                                    Iterator itr = list.iterator();
                                    if (itr.hasNext()) {
                                        vatcommoditycode = (String) itr.next();                                         
                                    }
                                } else {
                                    failureMsg += vatcommodityname + " which is not present in system.";
                                }
                            } 
                        }
                        /**
                         * While Importing product CSV , validate import data "Input terms" line level term if line level term as tax flag ON
                         */
                        List<String> inputDefaultTerms = new ArrayList<String>();
                        if (extraCompanyPreferences.getLineLevelTermFlag()==1 && columnConfig.containsKey("InputTax")) {
                            String temp = recarr[(Integer) columnConfig.get("InputTax")].replaceAll("\"", "").trim();
                            if (!StringUtil.isNullOrEmpty(temp)) {
                                inputDefaultTerms.addAll(Arrays.asList(temp.split(","))); // Get Input terms seperated by coma from Import file
                                Map<String, Object> requestData = new HashMap<String, Object>();
                                requestData.put("companyid", requestParams1.get("companyid").toString());
                                requestData.put("colData", temp);
                                requestData.put("isOutputTax", false);//ERP-29870
                                List<String> termsList = importDao.getLineLevelTermPresentByName(requestData); // Checking given input terms present in system or not
                                if (termsList.size() > 0) {
                                    String invalidData = Arrays.toString(termsList.toArray());
                                    failureMsg +=" Input Tax column Data is not valid. Input tax should be present in system: " + invalidData;
                                }
                            }
                        }
                         /**
                         * While Importing product CSV , validate import data "Output terms" line level term if line level term as tax flag ON
                         */
                        List<String> outputDefaultTerms = new ArrayList<String>();
                        if (extraCompanyPreferences.getLineLevelTermFlag()==1 && columnConfig.containsKey("OutputTax")) {
                            String temp = recarr[(Integer) columnConfig.get("OutputTax")].replaceAll("\"", "").trim();
                            if (!StringUtil.isNullOrEmpty(temp)) {
                                outputDefaultTerms.addAll(Arrays.asList(temp.split(",")));  // Get Output terms seperated by coma from Import file
                                Map<String, Object> requestData = new HashMap<String, Object>();
                                requestData.put("companyid", requestParams1.get("companyid").toString());
                                requestData.put("colData", temp);
                                requestData.put("isOutputTax", true);//ERP-29870
                                List<String> termsList = importDao.getLineLevelTermPresentByName(requestData); // Checking given utput terms present in system or not
                                if (termsList.size() > 0) { // If List size is greater than zero it means some terms not presnet in system terms then reject the record
                                    String invalidData = Arrays.toString(termsList.toArray());
                                    failureMsg += " Output Tax column Data is not valid. Output tax should be present in system: " + invalidData;
                                }
                            }
                        }
                        String natureofStockItem = "";
                        if (!productTypeID.equals(Producttype.SERVICE) && columnConfig.containsKey("natureofStockItem")) {
                            String natureofStockItemname = recarr[(Integer) columnConfig.get("natureofStockItem")].replaceAll("\"", "").trim();
                            if (!StringUtil.isNullOrEmpty(natureofStockItemname)) {
                                Map tempData = new HashMap<String, String>();
                                tempData.put("natureofStockItemname", natureofStockItemname);
                                tempData.put("company", companyid);
                                KwlReturnObject vatCommresult = accProductObj.getNatureofStockItemCodeByName(tempData);
                                if (vatCommresult.getRecordTotalCount() > 0) {
                                    List list = (ArrayList) vatCommresult.getEntityList();
                                    Iterator itr = list.iterator();
                                    if (itr.hasNext()) {
                                        natureofStockItem = (String) itr.next();                                         
                                    }
                                } else {
                                    failureMsg += natureofStockItemname + " is not found in Types of Goods.";
                                }
                            }
                        }
                        
                        String mrprate = "";
                        if (columnConfig.containsKey("mrprate") && indianCheck) {
                            String temp = recarr[(Integer) columnConfig.get("mrprate")].replaceAll("\"", "").trim();
                            if (!StringUtil.isNullOrEmpty(temp)) {
                                mrprate = temp;
                                try {
                                    Object vDataValue = Integer.parseInt(mrprate);
                                } catch (Exception ex) {
                                     if (masterPreference.equals("1")) {
                                        mrprate = "0";
                                    } else {
                                        invalidColumn.put((Integer) columnConfig.get("mrprate"), "Invalid");
                                        failureMsg += "Incorrect numeric value for MRP for Excise and VAT, Please ensure that value type of MRP for Excise and VAT matches with the MRP for Excise and VAT.";
                                    }
                                }
                            }
                        }
                        String serviceTaxCode = "";
                        if (columnConfig.containsKey("serviceTaxCode") && indianCheck) {
                            String temp = recarr[(Integer) columnConfig.get("serviceTaxCode")].replaceAll("\"", "").trim();
                            if (!StringUtil.isNullOrEmpty(temp)) {
                                serviceTaxCode = temp;
                                try {
                                    Object vDataValue = Integer.parseInt(serviceTaxCode);
                                } catch (Exception ex) {
                                     if (masterPreference.equals("1")) {
                                        serviceTaxCode = "0";
                                    } else {
                                        invalidColumn.put((Integer) columnConfig.get("serviceTaxCode"), "Invalid");
                                        failureMsg += "Incorrect numeric value for Accounting code (Service), Please ensure that value type of Accounting code (Service) matches with the Accounting code (Service).";
                                    }
                                }
                            }
                        }
                        String interStatePurchaseAccount = "";
                        if (columnConfig.containsKey("interStatePurchaseAccount") && indianCheck) {
                            String temp = recarr[(Integer) columnConfig.get("interStatePurchaseAccount")].replaceAll("\"", "").trim();

                            if (!StringUtil.isNullOrEmpty(temp)) {
                                String productPurchaseAccountName = temp;//cell.getStringCellValue().trim();
                                // Ref Optimization related code. 
                                Map refData = null;
                                if (refColumnObjMap.containsKey("account")) {
                                    refData = refColumnObjMap.get("account");
                                } else {
                                    refData = new HashMap();
                                    refColumnObjMap.put("account", refData);
                                }
                                Account purchaseAccount = null;
                                if (refData.containsKey(productPurchaseAccountName)) {
                                    purchaseAccount = refData.get(productPurchaseAccountName) != null ? (Account) refData.get(productPurchaseAccountName) : null;
                                } else {
                                    purchaseAccount = getAccountByName(productPurchaseAccountName, companyid);
                                    refData.put(productPurchaseAccountName, purchaseAccount);
                                }
                                // Ref Optimization related code. 
                                
                                if (purchaseAccount != null) {
                                    interStatePurchaseAccount = purchaseAccount.getID();
                                } else {
                                    invalidColumn.put((Integer) columnConfig.get("interStatePurchaseAccount"), "Invalid");
                                    failureMsg += "Product Inter State Purchase Account is not found for " + productPurchaseAccountName + ".";
                                }
                            } 
                        }
                        
                        String interStatePurchaseAccountCForm = "";
                        if (columnConfig.containsKey("interStatePurchaseAccountCForm") && indianCheck) {
                            String temp = recarr[(Integer) columnConfig.get("interStatePurchaseAccountCForm")].replaceAll("\"", "").trim();

                            if (!StringUtil.isNullOrEmpty(temp)) {
                                String productPurchaseAccountName = temp;//cell.getStringCellValue().trim();
                                
                                // Ref Optimization related code. 
                                Map refData = null;
                                if (refColumnObjMap.containsKey("account")) {
                                    refData = refColumnObjMap.get("account");
                                } else {
                                    refData = new HashMap();
                                    refColumnObjMap.put("account", refData);
                                }
                                Account purchaseAccount = null;
                                if (refData.containsKey(productPurchaseAccountName)) {
                                    purchaseAccount = refData.get(productPurchaseAccountName) != null ? (Account) refData.get(productPurchaseAccountName) : null;
                                } else {
                                    purchaseAccount = getAccountByName(productPurchaseAccountName, companyid);
                                    refData.put(productPurchaseAccountName, purchaseAccount);
                                }
                                // Ref Optimization related code. 
                                
                                if (purchaseAccount != null) {
                                    interStatePurchaseAccountCForm = purchaseAccount.getID();
                                } else {
                                    invalidColumn.put((Integer) columnConfig.get("interStatePurchaseAccountCForm"), "Invalid");
                                    failureMsg += "Product Inter State Purchase Account C Form is not found for " + productPurchaseAccountName + ".";
                                }
                            }
                        }
                        
                        String interStatePurchaseReturnAccount = "";
                        if (columnConfig.containsKey("interStatePurchaseReturnAccount") && indianCheck) {
                           String temp = recarr[(Integer) columnConfig.get("interStatePurchaseReturnAccount")].replaceAll("\"", "").trim();

                            if (!StringUtil.isNullOrEmpty(temp)) {
                                String productPurchaseAccountName = temp;//cell.getStringCellValue().trim();
                                
                                // Ref Optimization related code. 
                                Map refData = null;
                                if (refColumnObjMap.containsKey("account")) {
                                    refData = refColumnObjMap.get("account");
                                } else {
                                    refData = new HashMap();
                                    refColumnObjMap.put("account", refData);
                                }
                                Account purchaseAccount = null;
                                if (refData.containsKey(productPurchaseAccountName)) {
                                    purchaseAccount = refData.get(productPurchaseAccountName) != null ? (Account) refData.get(productPurchaseAccountName) : null;
                                } else {
                                    purchaseAccount = getAccountByName(productPurchaseAccountName, companyid);
                                    refData.put(productPurchaseAccountName, purchaseAccount);
                                }
                                // Ref Optimization related code. 
                                
                                if (purchaseAccount != null) {
                                    interStatePurchaseReturnAccount = purchaseAccount.getID();
                                } else {
                                    invalidColumn.put((Integer) columnConfig.get("interStatePurchaseReturnAccount"), "Invalid");
                                    failureMsg += "Product Inter State Purchase Return Account  is not found for " + productPurchaseAccountName + ".";
                                }
                            } 
                        }
                        
                        String interStatePurchaseReturnAccountCForm = "";
                        if (columnConfig.containsKey("interStatePurchaseReturnAccountCForm") && indianCheck) {
                            String temp = recarr[(Integer) columnConfig.get("interStatePurchaseReturnAccountCForm")].replaceAll("\"", "").trim();

                            if (!StringUtil.isNullOrEmpty(temp)) {
                                String productPurchaseAccountName = temp;//cell.getStringCellValue().trim();
                                
                                // Ref Optimization related code. 
                                Map refData = null;
                                if (refColumnObjMap.containsKey("account")) {
                                    refData = refColumnObjMap.get("account");
                                } else {
                                    refData = new HashMap();
                                    refColumnObjMap.put("account", refData);
                                }
                                Account purchaseAccount = null;
                                if (refData.containsKey(productPurchaseAccountName)) {
                                    purchaseAccount = refData.get(productPurchaseAccountName) != null ? (Account) refData.get(productPurchaseAccountName) : null;
                                } else {
                                    purchaseAccount = getAccountByName(productPurchaseAccountName, companyid);
                                    refData.put(productPurchaseAccountName, purchaseAccount);
                                }
                                // Ref Optimization related code. 
                                
                                if (purchaseAccount != null) {
                                    interStatePurchaseReturnAccountCForm = purchaseAccount.getID();
                                } else {
                                    invalidColumn.put((Integer) columnConfig.get("interStatePurchaseReturnAccountCForm"), "Invalid");
                                    failureMsg += "Product Inter State Purchase Return Account C Form  is not found for " + productPurchaseAccountName + ".";
                                }
                            } 
                        } 
                        
                        
                        String interStateSalesAccount = "";
                        if (columnConfig.containsKey("interStateSalesAccount") && indianCheck) {
                            String temp = recarr[(Integer) columnConfig.get("interStateSalesAccount")].replaceAll("\"", "").trim();

                            if (!StringUtil.isNullOrEmpty(temp)) {
                                String productPurchaseAccountName = temp;//cell.getStringCellValue().trim();
                                
                                // Ref Optimization related code. 
                                Map refData = null;
                                if (refColumnObjMap.containsKey("account")) {
                                    refData = refColumnObjMap.get("account");
                                } else {
                                    refData = new HashMap();
                                    refColumnObjMap.put("account", refData);
                                }
                                Account purchaseAccount = null;
                                if (refData.containsKey(productPurchaseAccountName)) {
                                    purchaseAccount = refData.get(productPurchaseAccountName) != null ? (Account) refData.get(productPurchaseAccountName) : null;
                                } else {
                                    purchaseAccount = getAccountByName(productPurchaseAccountName, companyid);
                                    refData.put(productPurchaseAccountName, purchaseAccount);
                                }
                                // Ref Optimization related code. 
                                
                                if (purchaseAccount != null) {
                                    interStateSalesAccount = purchaseAccount.getID();
                                } else {
                                    invalidColumn.put((Integer) columnConfig.get("interStateSalesAccount"), "Invalid");
                                    failureMsg += "Product Inter State Sales Account  is not found for " + productPurchaseAccountName + ".";
                                }
                            } 
                        } 
                        
                        
                        String interStateSalesAccountCForm = "";
                        if (columnConfig.containsKey("interStateSalesAccountCForm") && indianCheck) {
                            String temp = recarr[(Integer) columnConfig.get("interStateSalesAccountCForm")].replaceAll("\"", "").trim();

                            if (!StringUtil.isNullOrEmpty(temp)) {
                                String productPurchaseAccountName =temp;//cell.getStringCellValue().trim();
                                
                                // Ref Optimization related code. 
                                Map refData = null;
                                if (refColumnObjMap.containsKey("account")) {
                                    refData = refColumnObjMap.get("account");
                                } else {
                                    refData = new HashMap();
                                    refColumnObjMap.put("account", refData);
                                }
                                Account purchaseAccount = null;
                                if (refData.containsKey(productPurchaseAccountName)) {
                                    purchaseAccount = refData.get(productPurchaseAccountName) != null ? (Account) refData.get(productPurchaseAccountName) : null;
                                } else {
                                    purchaseAccount = getAccountByName(productPurchaseAccountName, companyid);
                                    refData.put(productPurchaseAccountName, purchaseAccount);
                                }
                                // Ref Optimization related code. 
                                
                                if (purchaseAccount != null) {
                                    interStateSalesAccountCForm = purchaseAccount.getID();
                                } else {
                                    invalidColumn.put((Integer) columnConfig.get("interStateSalesAccountCForm"), "Invalid");
                                    failureMsg += "Product Inter State Sales Account CForm  is not found for " + productPurchaseAccountName + ".";
                                }
                            } 
                        } 
                        
                        String interStateSalesReturnAccount = "";
                        if (columnConfig.containsKey("interStateSalesReturnAccount") && indianCheck) {
                            String temp = recarr[(Integer) columnConfig.get("interStateSalesReturnAccount")].replaceAll("\"", "").trim();

                            if (!StringUtil.isNullOrEmpty(temp)) {
                                String productPurchaseAccountName = temp;//cell.getStringCellValue().trim();
                                
                                // Ref Optimization related code. 
                                Map refData = null;
                                if (refColumnObjMap.containsKey("account")) {
                                    refData = refColumnObjMap.get("account");
                                } else {
                                    refData = new HashMap();
                                    refColumnObjMap.put("account", refData);
                                }
                                Account purchaseAccount = null;
                                if (refData.containsKey(productPurchaseAccountName)) {
                                    purchaseAccount = refData.get(productPurchaseAccountName) != null ? (Account) refData.get(productPurchaseAccountName) : null;
                                } else {
                                    purchaseAccount = getAccountByName(productPurchaseAccountName, companyid);
                                    refData.put(productPurchaseAccountName, purchaseAccount);
                                }
                                // Ref Optimization related code. 
                                
                                if (purchaseAccount != null) {
                                    interStateSalesReturnAccount = purchaseAccount.getID();
                                } else {
                                    invalidColumn.put((Integer) columnConfig.get("interStateSalesReturnAccount"), "Invalid");
                                    failureMsg += "Product Inter State Sales Return Account  is not found for " + productPurchaseAccountName + ".";
                                }
                            } 
                        } 
                        
                        String interStateSalesReturnAccountCForm = "";
                        if (columnConfig.containsKey("interStateSalesReturnAccountCForm") && indianCheck) {
                            String temp = recarr[(Integer) columnConfig.get("interStateSalesReturnAccountCForm")].replaceAll("\"", "").trim();

                            if (!StringUtil.isNullOrEmpty(temp)) {
                                String productPurchaseAccountName = temp;//cell.getStringCellValue().trim();

                                // Ref Optimization related code. 
                                Map refData = null;
                                if (refColumnObjMap.containsKey("account")) {
                                    refData = refColumnObjMap.get("account");
                                } else {
                                    refData = new HashMap();
                                    refColumnObjMap.put("account", refData);
                                }
                                Account purchaseAccount = null;
                                if (refData.containsKey(productPurchaseAccountName)) {
                                    purchaseAccount = refData.get(productPurchaseAccountName) != null ? (Account) refData.get(productPurchaseAccountName) : null;
                                } else {
                                    purchaseAccount = getAccountByName(productPurchaseAccountName, companyid);
                                    refData.put(productPurchaseAccountName, purchaseAccount);
                                }
                                // Ref Optimization related code. 

                                if (purchaseAccount != null) {
                                    interStateSalesReturnAccountCForm = purchaseAccount.getID();
                                } else {
                                    invalidColumn.put((Integer) columnConfig.get("interStateSalesReturnAccountCForm"), "Invalid");
                                    failureMsg += "Product Inter State Sales Return Account CForm  is not found for " + productPurchaseAccountName + ".";
                                }
                            }
                        }

                        ValuationMethod valMethod = null;
                        if (columnConfig.containsKey("valuationmethod")) {
                            String temp = recarr[(Integer) columnConfig.get("valuationmethod")].replaceAll("\"", "").trim();
                            if (!StringUtil.isNullOrEmpty(temp)) {
                                if (temp.equalsIgnoreCase("LIFO")) {
                                    temp = "0";
                                } else if (temp.equalsIgnoreCase("FIFO")) {
                                    temp = "1";
                                } else if (temp.equalsIgnoreCase("Moving Average")) {
                                    temp = "2";
                                } else {
                                    invalidColumn.put((Integer) columnConfig.get("valuationmethod"), "Invalid");
                                    failureMsg += "Value is not valid for column. It should be 'FIFO' or 'LIFO' or 'Moving Average'.";
                                }
                                int valuationMethod = Integer.parseInt(temp);
                                for (ValuationMethod st : ValuationMethod.values()) {
                                    if (st.ordinal() == valuationMethod) {
                                        valMethod = st;
                                        break;
                                    }
                                }
                            }
                        } else if(!updateExistingRecordFlag) {
                            valMethod = ValuationMethod.FIFO;
                        }
                        String orderinguom = "";
                        UnitOfMeasure orderuom = null;
                        if (columnConfig.containsKey("orderinguom")) {
                            String productUOMName = recarr[(Integer) columnConfig.get("orderinguom")].replaceAll("\"", "").trim();
                            if (!StringUtil.isNullOrEmpty(productUOMName)) {
                              
                                // Ref Optimization related code. 
                                Map refData = null;
                                if (refColumnObjMap.containsKey("uom")) {
                                    refData = refColumnObjMap.get("uom");
                                } else {
                                    refData = new HashMap();
                                    refColumnObjMap.put("uom", refData);
                                }

                                if (refData.containsKey(productUOMName)) {
                                    orderuom = refData.get(productUOMName) != null ? (UnitOfMeasure) refData.get(productUOMName) : null;
                                } else {
                                    orderuom = getUOMByName(productUOMName, companyid);
                                    refData.put(productUOMName, orderuom);
                                }
                                // Ref Optimization related code. 

                                if (orderuom != null) {
                                    orderinguom = orderuom.getID();
                                } else {
                                    if (masterPreference.equalsIgnoreCase("2")) {
                                        HashMap<String, Object> uomMap = new HashMap<String, Object>();
                                        uomMap.put("uomname", StringUtil.DecodeText(productUOMName));
                                        uomMap.put("uomtype", StringUtil.DecodeText(productUOMName));
                                        uomMap.put("precision", 0);
                                        uomMap.put("companyid", companyid);

                                        KwlReturnObject uomresult = accUomObj.addUoM(uomMap);
                                        orderuom = (UnitOfMeasure) uomresult.getEntityList().get(0);
                                        orderinguom = orderuom.getID();
                                        refData.put(productUOMName, orderuom);// Ref Optimization related code. 
                                    } else {
                                        if (masterPreference.equalsIgnoreCase("1")) {
                                            orderinguom = "";
                                        } else {
                                            invalidColumn.put((Integer) columnConfig.get("orderinguom"), "Invalid");
                                            failureMsg += "Product Ordering Unit Of Measure is not found for " + productUOMName + ".";
                                        }
                                    }
                                }
                            }
                        } else if(!updateExistingRecordFlag){
                            orderinguom = "";
                        }

                        String transferuom = "";
                        UnitOfMeasure transferUOM = null;
                        if (columnConfig.containsKey("transferuom")) {
                            String productUOMName = recarr[(Integer) columnConfig.get("transferuom")].replaceAll("\"", "").trim();
                            if (!StringUtil.isNullOrEmpty(productUOMName)) {
                                
                                // Ref Optimization related code. 
                                Map refData = null;
                                if (refColumnObjMap.containsKey("uom")) {
                                    refData = refColumnObjMap.get("uom");
                                } else {
                                    refData = new HashMap();
                                    refColumnObjMap.put("uom", refData);
                                }

                                if (refData.containsKey(productUOMName)) {
                                    transferUOM = refData.get(productUOMName) != null ? (UnitOfMeasure) refData.get(productUOMName) : null;
                                } else {
                                    transferUOM = getUOMByName(productUOMName, companyid);
                                    refData.put(productUOMName, transferUOM);
                                }
                                // Ref Optimization related code. 

                                if (transferUOM != null) {
                                    transferuom = transferUOM.getID();
                                } else {
                                    if (masterPreference.equalsIgnoreCase("2")) {
                                        HashMap<String, Object> uomMap = new HashMap<String, Object>();
                                        uomMap.put("uomname", StringUtil.DecodeText(productUOMName));
                                        uomMap.put("uomtype", StringUtil.DecodeText(productUOMName));
                                        uomMap.put("precision", 0);
                                        uomMap.put("companyid", companyid);

                                        KwlReturnObject uomresult = accUomObj.addUoM(uomMap);
                                        transferUOM = (UnitOfMeasure) uomresult.getEntityList().get(0);
                                        transferuom = transferUOM.getID();
                                        refData.put(productUOMName, transferUOM);// Ref Optimization related code. 
                                    } else {
                                        if (masterPreference.equalsIgnoreCase("1")) {
                                            transferuom = "";
                                        } else {
                                            invalidColumn.put((Integer) columnConfig.get("transferuom"), "Invalid");
                                            failureMsg += "Product Transfer Unit Of Measure is not found for " + productUOMName + ".";
                                        }
                                    }
                                }
                            }
                        } else if(!updateExistingRecordFlag){
                            transferuom = "";
                        }
                        Set<Frequency> ccFrequencies = new HashSet();
                        if (!productTypeID.equals(Producttype.SERVICE) && !productTypeID.equals(Producttype.SERVICE_Name) && columnConfig.containsKey("CCFrequency")) {
                            String frequencies = recarr[(Integer) columnConfig.get("CCFrequency")].replaceAll("\"", "").trim();
                            if (!StringUtil.isNullOrEmpty(frequencies)) {
                                String[] frqs = frequencies.split(",");
                                String notFoundNames = "";
                                for (int i = 0; i < frqs.length; i++) {
                                    Frequency frq = null;
                                    if ("Daily".equalsIgnoreCase(frqs[i])) {
                                        frq = frequencyMap.get(Frequency.DAILY);
                                    } else if ("Weekly".equalsIgnoreCase(frqs[i])) {
                                        frq = frequencyMap.get(Frequency.WEEKLY);
                                    } else if ("Fortnightly".equalsIgnoreCase(frqs[i])) {
                                        frq = frequencyMap.get(Frequency.FORTNIGHT);
                                    } else if ("Monthly".equalsIgnoreCase(frqs[i])) {
                                        frq = frequencyMap.get(Frequency.MONTHLY);
                                    } else {
                                        notFoundNames += frqs[i] + ", ";
                                    }
                                    if (frq != null) {
                                        ccFrequencies.add(frq);
                                    }
                                }
                                if (!StringUtil.isNullOrEmpty(notFoundNames) && masterPreference.equalsIgnoreCase("0")) {
                                    notFoundNames = notFoundNames.substring(0, notFoundNames.lastIndexOf(","));
                                    throw new AccountingException("Cycle Count Frequency is not found for " + notFoundNames);
                                }
                            }
                        }
                        
                        String minOrderingQuantity = "0";
                        if (columnConfig.containsKey("minorderingquantity")) {
                            minOrderingQuantity = recarr[(Integer) columnConfig.get("minorderingquantity")].replaceAll("\"", "").trim();
                            if (StringUtil.isNullOrEmpty(minOrderingQuantity)) {
                                minOrderingQuantity = "0";
                            } else {
                                try {
                                    Object vDataValue = Double.parseDouble(minOrderingQuantity);
                                } catch (Exception ex) {
                                    if(masterPreference.equals("1")){
                                        minOrderingQuantity="0";
                                    } else {
                                        invalidColumn.put((Integer) columnConfig.get("minorderingquantity"), "Invalid");
                                        failureMsg += "Incorrect numeric value for Minimum Ordering Quantity, Please ensure that value type of Minimum Ordering Quantity matches with the Minimum Ordering Quantity."; 
                                    }
                                }
                            }
                        }
                        
                        String maxOrderingQuantity = "0";
                        if (columnConfig.containsKey("maxorderingquantity")) {
                            maxOrderingQuantity = recarr[(Integer) columnConfig.get("maxorderingquantity")].replaceAll("\"", "").trim();
                            if (StringUtil.isNullOrEmpty(maxOrderingQuantity)) {
                                maxOrderingQuantity = "0";
                            } else {
                                try {
                                    Object vDataValue = Double.parseDouble(maxOrderingQuantity);
                                } catch (Exception ex) {
                                    if(masterPreference.equals("1")){
                                        maxOrderingQuantity="0";
                                    } else {
                                        invalidColumn.put((Integer) columnConfig.get("maxorderingquantity"), "Invalid");
                                        failureMsg += "Incorrect numeric value for Maximum Ordering Quantity, Please ensure that value type of Maximum Ordering Quantity matches with the Maximum Ordering Quantity."; 
                                    }
                                }
                            }
                        }
                        // For create custom field array
                        customfield = "";
                        JSONArray customJArr = new JSONArray();
                        for (int i = 0; i < jSONArray.length(); i++) {
                            JSONObject jSONObject = jSONArray.getJSONObject(i);

                            if (jSONObject.optBoolean("customflag", false)) {
                                HashMap<String, Object> requestParams = new HashMap<String, Object>();
                                requestParams.put(Constants.filter_names, Arrays.asList(Constants.companyid, Constants.moduleid, Constants.fieldlabel));
                                requestParams.put(Constants.filter_values, Arrays.asList(companyid, Constants.Acc_Product_Master_ModuleId, jSONObject.getString("columnname")));

                                KwlReturnObject fieldParamsResult = accCommonTablesDAO.getFieldParams(requestParams); // get custom field for module
                                FieldParams params = (FieldParams) fieldParamsResult.getEntityList().get(0);
                                if (jSONObject.getInt("csvindex") > recarr.length - 1) {// (csv) arrayindexoutofbound when last custom column value is empty.
                                    continue;
                                }
                                if (!StringUtil.isNullOrEmpty(recarr[jSONObject.getInt("csvindex")].replaceAll("\"", "").trim())) {
                                    JSONObject customJObj = new JSONObject();
                                    customJObj.put("fieldid", params.getId());
                                    customJObj.put("filedid", params.getId());
                                    customJObj.put("refcolumn_name", "Col" + params.getRefcolnum());
                                    customJObj.put("fieldname", "Custom_" + params.getFieldlabel());
                                    customJObj.put("xtype", params.getFieldtype());

                                    String fieldComboDataStr = "";
                                    if (params.getFieldtype() == 3) { // if field of date type
                                        String dateStr = recarr[jSONObject.getInt("csvindex")].replaceAll("\"", "").trim();
                                        try {
                                            customJObj.put("Col" + params.getColnum(), df.parse(dateStr).getTime());
                                            customJObj.put("fieldDataVal", df.parse(dateStr).getTime());
                                        } catch (Exception ex) {
                                            invalidColumn.put(jSONObject.getInt("csvindex"), "Invalid");
                                            failureMsg += "Incorrect date format for " + jSONObject.getString("columnname") + ", Please specify values in " + dateFormat + " format.";
                                        }
                                    } else if (params.getFieldtype() == 4 || params.getFieldtype() == 7) { // if field of MultiSelect Drop Down OR Drop Down
                                        String[] fieldComboDataArr = recarr[jSONObject.getInt("csvindex")].replaceAll("\"", "").trim().split(";");

                                        for (int dataArrIndex = 0; dataArrIndex < fieldComboDataArr.length; dataArrIndex++) {
                                            if (!StringUtil.isNullOrEmpty(fieldComboDataArr[dataArrIndex])) {
                                                requestParams = new HashMap<String, Object>();
                                                requestParams.put(Constants.filter_names, Arrays.asList(Constants.Acc_custom_fieldId, "value", "deleteflag"));
                                                requestParams.put(Constants.filter_values, Arrays.asList(params.getId(), fieldComboDataArr[dataArrIndex], 0));


                                                fieldParamsResult = accCommonTablesDAO.getCustomCombodata(requestParams);
                                                if (fieldParamsResult != null && !fieldParamsResult.getEntityList().isEmpty()) {
                                                    FieldComboData fieldComboData = (FieldComboData) fieldParamsResult.getEntityList().get(0);
                                                    fieldComboDataStr += fieldComboData.getId() + ",";
                                                } else {
                                                    invalidColumn.put(jSONObject.getInt("csvindex"), "Invalid");
                                                    failureMsg += jSONObject.getString("columnname") + " entry not found in master list for " + jSONObject.getString("columnname") + " dropdown.";
                                                }
                                            }
                                        }

                                        if (!StringUtil.isNullOrEmpty(fieldComboDataStr)) {
                                            customJObj.put("Col" + params.getColnum(), fieldComboDataStr.substring(0, fieldComboDataStr.length() - 1));
                                            customJObj.put("fieldDataVal", fieldComboDataStr.substring(0, fieldComboDataStr.length() - 1));
                                        } else {
                                            continue;
                                        }
                                    } else if (params.getFieldtype() == 11) { // if field of check box type 
                                        customJObj.put("Col" + params.getColnum(), Boolean.parseBoolean(recarr[jSONObject.getInt("csvindex")].replaceAll("\"", "").trim()));
                                        customJObj.put("fieldDataVal", Boolean.parseBoolean(recarr[jSONObject.getInt("csvindex")].replaceAll("\"", "").trim()));
                                    } else if (params.getFieldtype() == 12) { // if field of check list type
                                        requestParams = new HashMap<String, Object>();
                                        requestParams.put(Constants.filter_names, Arrays.asList(Constants.Acc_custom_fieldId, "deleteflag"));
                                        requestParams.put(Constants.filter_values, Arrays.asList(params.getId(), 0));


                                        fieldParamsResult = accCommonTablesDAO.getCustomCombodata(requestParams);
                                        List<FieldComboData> fieldComboDataList = fieldParamsResult.getEntityList();

                                        String[] fieldComboDataArr = recarr[jSONObject.getInt("csvindex")].replaceAll("\"", "").trim().split(";");

                                        int dataArrIndex = 0;

                                        for (FieldComboData fieldComboData : fieldComboDataList) {
                                            if (fieldComboDataArr.length != dataArrIndex && fieldComboDataArr[dataArrIndex] != null && fieldComboDataArr[dataArrIndex].replaceAll("\"", "").trim().equalsIgnoreCase("true")) {
                                                fieldComboDataStr += fieldComboData.getId() + ",";
                                            }
                                            dataArrIndex++;
                                        }

                                        if (!StringUtil.isNullOrEmpty(fieldComboDataStr)) {
                                            customJObj.put("Col" + params.getColnum(), fieldComboDataStr.substring(0, fieldComboDataStr.length() - 1));
                                            customJObj.put("fieldDataVal", fieldComboDataStr.substring(0, fieldComboDataStr.length() - 1));
                                        } else {
                                            continue;
                                        }
                                    } else if (params.getFieldtype() == 2) { // if field of Number field type
                                        String numStr = recarr[jSONObject.getInt("csvindex")].replaceAll("\"", "").trim();
                                        if (!StringUtil.isNullOrEmpty(numStr)) {
                                            try {
                                                Object vDataValue = Double.parseDouble(numStr);
                                            } catch (Exception ex) {
                                                invalidColumn.put(jSONObject.getInt("csvindex"), "Invalid");
                                                failureMsg += "Incorrect numeric value for " + jSONObject.getString("columnname") + ", Please ensure that value type of " + jSONObject.getString("columnname") + " matches with the " + jSONObject.getString("columnname") + ".";
                                            }
                                        }
                                        customJObj.put("Col" + params.getColnum(), recarr[jSONObject.getInt("csvindex")].replaceAll("\"", "").trim());
                                        customJObj.put("fieldDataVal", recarr[jSONObject.getInt("csvindex")].replaceAll("\"", "").trim());
                                    } else {
                                        customJObj.put("Col" + params.getColnum(), recarr[jSONObject.getInt("csvindex")].replaceAll("\"", "").trim());
                                        customJObj.put("fieldDataVal", recarr[jSONObject.getInt("csvindex")].replaceAll("\"", "").trim());
                                    }

                                    customJObj.put("Custom_" + params.getFieldlabel(), "Col" + params.getColnum());

                                    customJArr.put(customJObj);
                                }
                            }
                        }

                        customfield = customJArr.toString();
                        

                        // if Ordering UOM is not in Stock UOM, Inner UOM or Casing UOM fail record by exception msg
                        if (!StringUtil.isNullOrEmpty(orderinguom) && !(productUOMID.equalsIgnoreCase(orderinguom) || innerUoMID.equalsIgnoreCase(orderinguom) || casingUoMID.equalsIgnoreCase(orderinguom))) {
                            invalidColumn.put((Integer) columnConfig.get("orderinguom"), "Invalid");
                            failureMsg += "Ordering UOM are not matching with either Stock UOM or Inner UOM or Casing UOM.";
                        }

                        // if Transfer UOM is not in Stock UOM, Inner UOM or Casing UOM fail record by exception msg
                        if (!StringUtil.isNullOrEmpty(transferuom) && !(productUOMID.equalsIgnoreCase(transferuom) || innerUoMID.equalsIgnoreCase(transferuom) || casingUoMID.equalsIgnoreCase(transferuom))) {
                            invalidColumn.put((Integer) columnConfig.get("transferuom"), "Invalid");
                            failureMsg += "Transfer UOM are not matching with either Stock UOM or Inner UOM or Casing UOM.";
                        }

                        // if Purchase UOM is not in Stock UOM, Inner UOM or Casing UOM fail record by exception msg
                        if (!StringUtil.isNullOrEmpty(PurchaseUOMID) && !(productUOMID.equalsIgnoreCase(PurchaseUOMID) || innerUoMID.equalsIgnoreCase(PurchaseUOMID) || casingUoMID.equalsIgnoreCase(PurchaseUOMID))) {
                            invalidColumn.put((Integer) columnConfig.get("purchaseuom"), "Invalid");
                            failureMsg += "Purchase UOM are not matching with either Stock UOM or Inner UOM or Casing UOM.";
                        }

                        // if Sales UOM is not in Stock UOM, Inner UOM or Casing UOM fail record by exception msg
                        if (!StringUtil.isNullOrEmpty(SalesUOMID) && !(productUOMID.equalsIgnoreCase(SalesUOMID) || innerUoMID.equalsIgnoreCase(SalesUOMID) || casingUoMID.equalsIgnoreCase(SalesUOMID))) {
                            invalidColumn.put((Integer) columnConfig.get("salesuom"), "Invalid");
                            failureMsg += "Sales UOM are not matching with either Stock UOM or Inner UOM or Casing UOM.";
                        }
                        
                        Date asOfDate = null;
                        if (columnConfig.containsKey("asofdate")) {//when AsofDate header is mapped
                            String asofdate = recarr[(Integer) columnConfig.get("asofdate")].replaceAll("\"", "").trim();
                            if (!StringUtil.isNullOrEmpty(asofdate)) {
                                try {
                                    df.setLenient(false);
                                    asOfDate = df.parse(asofdate);
                                } catch (Exception ex) {
                                    if (masterPreference.equalsIgnoreCase("1")) {//when set empty option is selected then setting its default value bookbeginning date
                                        asOfDate = bookBookBeginningDate;
                                    } else {
                                        invalidColumn.put((Integer) columnConfig.get("asofdate"), "Invalid");
                                        failureMsg += "Incorrect date format for As Of Date, Please specify values in " + dateFormat + " format.";
                                    }
                                }
                            } else {//when value is null or empty
                                failureMsg += messageSource.getMessage("acc.importproduct.AsOfDateIsNotAvailable", null, locale);
//                                if (masterPreference.equals("0")) {//most resticted
//                                    invalidColumn.put((Integer) columnConfig.get("asofdate"), "Invalid");
//                                    failureMsg += "Empty data found in As Of Date, cannot set empty data for As Of Date.";
//                                } else if (masterPreference.equals("2") || masterPreference.equals("1")) {// add new case and set empty case
//                                    asOfDate = bookBookBeginningDate;
//                            }
                        }
                        } else if (!updateExistingRecordFlag) {
                            failureMsg += messageSource.getMessage("acc.importproduct.AsOfDateColumnIsNotFound", null, locale);
                        }
                        Date gstapplicabledate = null;
                        if (columnConfig.containsKey("gstapplicabledate")) {//when AsofDate header is mapped
                            String asofdate = recarr[(Integer) columnConfig.get("gstapplicabledate")].replaceAll("\"", "").trim();
                            if (!StringUtil.isNullOrEmpty(asofdate)) {
                                try {
                                    df.setLenient(false);
                                    gstapplicabledate = df.parse(asofdate);
                                } catch (Exception ex) {

                                    invalidColumn.put((Integer) columnConfig.get("asofdate"), "Invalid");
                                    failureMsg += "Incorrect date format for GST Applicable Date, Please specify values in " + dateFormat + " format.";
                                }
                            } else {//when value is null or empty
                                gstapplicabledate=asOfDate;
                            }
                        }
                                                
                        if (nocount > 0 && updateExistingRecordFlag && !result.getEntityList().isEmpty()) {
                            productOldObj = (Product) result.getEntityList().get(0);
                            String propChangeErrMsg = "";
                            if (productOldObj != null && productOldObj.getAvailableQuantity() > 0) {
                                if (productOldObj.isIswarehouseforproduct() != isIswarehouseforproduct) {
                                    if (columnConfig.containsKey(Constants.ACTIVATE_WAREHOUSE)) {
                                        invalidColumn.put((Integer) columnConfig.get(Constants.ACTIVATE_WAREHOUSE), "Invalid");
                                        propChangeErrMsg += StringUtil.isNullOrEmpty(propChangeErrMsg) ? "warehouse" : " ,warehouse";
                                    }
                                }
                                if (productOldObj.isIslocationforproduct() != isIslocationforproduct) {
                                    if (columnConfig.containsKey(Constants.ACTIVATE_LOCATION)) {
                                        invalidColumn.put((Integer) columnConfig.get(Constants.ACTIVATE_LOCATION), "Invalid");
                                        propChangeErrMsg += StringUtil.isNullOrEmpty(propChangeErrMsg) ? "location" : " ,location";
                                    }
                                }
                                if (productOldObj.isIsrowforproduct() != isIsRowForProduct) {
                                    if (columnConfig.containsKey(Constants.ACTIVATE_ROW)) {
                                        invalidColumn.put((Integer) columnConfig.get(Constants.ACTIVATE_ROW), "Invalid");
                                        propChangeErrMsg += StringUtil.isNullOrEmpty(propChangeErrMsg) ? "row" : " ,row";
                                    }
                                }
                                if (productOldObj.isIsrackforproduct() != isIsRackForProduct) {
                                    if (columnConfig.containsKey(Constants.ACTIVATE_RACK)) {
                                        invalidColumn.put((Integer) columnConfig.get(Constants.ACTIVATE_RACK), "Invalid");
                                        propChangeErrMsg += StringUtil.isNullOrEmpty(propChangeErrMsg) ? "rack" : " ,rack";
                                    }
                                }
                                if (productOldObj.isIsbinforproduct() != isIsBinForProduct) {
                                    if (columnConfig.containsKey(Constants.ACTIVATE_BIN)) {
                                        invalidColumn.put((Integer) columnConfig.get(Constants.ACTIVATE_BIN), "Invalid");
                                        propChangeErrMsg += StringUtil.isNullOrEmpty(propChangeErrMsg) ? "bin" : " ,bin";
                                    }
                                }
                                if (productOldObj.isIsBatchForProduct() != isIsBatchForProduct) {
                                    if (columnConfig.containsKey(Constants.ACTIVATE_BATCH)) {
                                        invalidColumn.put((Integer) columnConfig.get(Constants.ACTIVATE_BATCH), "Invalid");
                                        propChangeErrMsg += StringUtil.isNullOrEmpty(propChangeErrMsg) ? "batch" : " ,batch";
                                    }
                                }
                                if (productOldObj.isIsSerialForProduct() != isIsSerialForProduct) {
                                    if (columnConfig.containsKey(Constants.ACTIVATE_SERIAL_NO)) {
                                        invalidColumn.put((Integer) columnConfig.get(Constants.ACTIVATE_SERIAL_NO), "Invalid");
                                        propChangeErrMsg += StringUtil.isNullOrEmpty(propChangeErrMsg) ? "serial" : " ,serial";
                                    }
                                }
                                if (!StringUtil.isNullOrEmpty(propChangeErrMsg)) {
                                    throw new AccountingException("Opening stock is already added for this product.So, " + propChangeErrMsg + " property can not be changed.");
                                }
                            }

                        }

                        

                        // creating product Hashmap
                        HashMap<String, Object> productMap = new HashMap<String, Object>();

                        if (nocount == 0) {//if product does not exist i.e new product then need to check, whether it can be generate by sequence format or not. 
                            Map<String, String> sequenceNumberDataMap = new HashMap<String, String>();
                            sequenceNumberDataMap.put("moduleID", String.valueOf(Constants.Acc_Product_Master_ModuleId));
                            sequenceNumberDataMap.put("entryNumber", productID);
                            sequenceNumberDataMap.put("companyID", companyid);
                            List list = importHandler.checksEntryNumberForSequenceNumber(sequenceNumberDataMap);
                            if (!list.isEmpty()) {
                                boolean isvalidEntryNumber = (Boolean) list.get(0);
                                if (!isvalidEntryNumber) {
                                    String formatID = (String) list.get(2);
                                    int intSeq = (Integer) list.get(3);
                                    productMap.put(Constants.SEQNUMBER, intSeq);
                                    productMap.put(Constants.SEQFORMAT, formatID);
                                }
                            }
                        }
                        
                        boolean isUsedInTransaction = false;
                        Product product = null;
                        if (updateExistingRecordFlag && newProductAddinUpdateCase == false) {
                            product = (Product) result.getEntityList().get(0);
                            productMap.put("id", product.getID());
                            List listObj = accProductModuleService.isProductUsedintransction(product.getID(), companyid, requestParams1);
                            isUsedInTransaction = (Boolean) listObj.get(0);    //always boolean value
                        } else {
                            productMap.put("producttype", productTypeID);
                        }
                        if (columnConfig.containsKey("productname")) {
                            productMap.put("name", productName);
                        }
                        productMap.put("productid", productID);
                        if (columnConfig.containsKey("desc")) {
                            productMap.put("desc", productDescription);
                        }
                        if (columnConfig.containsKey("wipoffset")) {
                            productMap.put("WIPoffset", wipoffset);
                        }
                        if (columnConfig.containsKey("inventoryoffset")) {
                            productMap.put("Inventoryoffset", inventoryoffset);
                        }
                        if (columnConfig.containsKey("hscode")) {
                            productMap.put("hsCode", hscode);
                        }
                        if (columnConfig.containsKey("additionalfreetext")) {
                            productMap.put("additionalfreetext", additionalfreetext);
                        }
                        if (columnConfig.containsKey("itemcolor")) {
                            productMap.put("itemcolor", itemcolor);
                        }
                        if (columnConfig.containsKey("alternateproduct")) {
                            productMap.put("alternateproductid", alternateproduct);
                        }
                        if (columnConfig.containsKey("purchasemfg")) {
                            productMap.put("purchasemfg", purchasemfg);
                        }
                        if (columnConfig.containsKey("catalogno")) {
                            productMap.put("catalogNo", catalogno);
                        }
                        if (columnConfig.containsKey("supplier")) {
                            productMap.put("supplier", supplier);
                        }
                        if (columnConfig.containsKey("barcode")) {
                            productMap.put("barcode", barcode);
                        }
                        if (columnConfig.containsKey("additionaldesc")) {
                            productMap.put("additionaldescription", additionaldesc);
                        }
                        if (columnConfig.containsKey("descinforeign")) {
                            productMap.put("foreigndescription", descinforeign);
                        }
                        if (columnConfig.containsKey("licensecode")) {
                            productMap.put("licensecode", licensecode);
                        }
                        if (columnConfig.containsKey("itemgroup")) {
                            productMap.put("itemgroup", itemgroup);
                        }
                        if (columnConfig.containsKey("pricelist")) {
                            productMap.put("itempricelist", pricelist);
                        }
                        if (columnConfig.containsKey("shippingtype")) {
                            productMap.put("shippingtype", shippingtype);
                        }
                        if (columnConfig.containsKey("recyclable")) {
                            productMap.put("isrecyclable", recyclable);
                        }
                        if (columnConfig.containsKey("qaenable")) {
                            productMap.put("isQAenable", qaenable);
                        }
                        if (columnConfig.containsKey("isknittingitem")) {
                            productMap.put("isKnittingItem", isknittingitem);
                        }
                        if (columnConfig.containsKey("isactive")) {
                             productMap.put("isActiveItem", isactive);
                        } else if(!updateExistingRecordFlag){
                            productMap.put("isActiveItem", true);
                        }
                        if (columnConfig.containsKey("blockloosesell")) {
                            productMap.put("blockLooseSell", blockloosesell);
                        }
                        if (!StringUtil.isNullOrEmpty(itemsalesvolume)) {
                            productMap.put("itemsalesvolume", Double.parseDouble(itemsalesvolume));
                        }
                        if (!StringUtil.isNullOrEmpty(productweight)) {
                            productMap.put("productweight", Double.parseDouble(productweight));
                        }
                        if (!StringUtil.isNullOrEmpty(productWeightPerStockUom)) {
                            productMap.put("productweightperstockuom", authHandler.round(Double.parseDouble(productWeightPerStockUom),companyid));
                        }
                        if (!StringUtil.isNullOrEmpty(productWeightIncludingPakagingPerStockUom)) {
                            productMap.put("productweightincludingpakagingperstockuom", authHandler.round(Double.parseDouble(productWeightIncludingPakagingPerStockUom),companyid));
                        }
                        if (!StringUtil.isNullOrEmpty(itemsaleswidth)) {
                            productMap.put("itemsaleswidth", Double.parseDouble(itemsaleswidth));
                        }
                        if (!StringUtil.isNullOrEmpty(itemsalesheight)) {
                            productMap.put("itemsalesheight", Double.parseDouble(itemsalesheight));
                        }
                        if (!StringUtil.isNullOrEmpty(itemwidth)) {
                            productMap.put("itemwidth", Double.parseDouble(itemwidth));
                        }
                        if (!StringUtil.isNullOrEmpty(itemheight)) {
                            productMap.put("itemheight", Double.parseDouble(itemheight));
                        }
                        if (!StringUtil.isNullOrEmpty(itemlength)) {
                            productMap.put("itemlength", Double.parseDouble(itemlength));
                        }
                        if (!StringUtil.isNullOrEmpty(itemvolume)) {
                            productMap.put("itemvolume", Double.parseDouble(itemvolume));
                        }
                        if (!StringUtil.isNullOrEmpty(itempurchasewidth)) {
                            productMap.put("itempurchasewidth", Double.parseDouble(itempurchasewidth));
                        }
                        if (!StringUtil.isNullOrEmpty(itempurchasevolume)) {
                            productMap.put("itempurchasevolume", Double.parseDouble(itempurchasevolume));
                        }
                        if (!StringUtil.isNullOrEmpty(itempurchaselength)) {
                            productMap.put("itempurchaselength", Double.parseDouble(itempurchaselength));
                        }
                        if (!StringUtil.isNullOrEmpty(qaleadtimeindays)) {
                            productMap.put("QAleadtime", Integer.parseInt(qaleadtimeindays));
                        }
                        if (valMethod != null) {
                            productMap.put("valuationmethod", valMethod);
                        }
                        if (!StringUtil.isNullOrEmpty(reusabilitycount)) {
                            productMap.put("reusabilitycount", Integer.parseInt(reusabilitycount));
                        }
                        if (itemReusability != null) {
                            productMap.put("isreusable", itemReusability);
                        }
                        if (transferUOM != null) {
                            productMap.put("transferUoM", transferUOM);
                        }
                        if (orderuom != null) {
                            productMap.put("orderUoM", orderuom);
                        }
                        if (!ccFrequencies.isEmpty()) {
                            productMap.put("CCFrequency", ccFrequencies);
                            productMap.put("countable", true); 
                        }else if(!updateExistingRecordFlag){
                            productMap.put("countable", false); 
                        }
                        productMap.put("currencyid", currencyId);
                        productMap.put("purchasetaxId", purchasetaxId);
                        productMap.put("salestaxId", salestaxId);
                        if (updateExistingRecordFlag && product != null && isUsedInTransaction
                                && (!StringUtil.isNullOrEmpty(currencyId) && product.getCurrency() != null && !currencyId.equalsIgnoreCase(product.getCurrency().getCurrencyID())
                                || (columnConfig.containsKey(Constants.ACTIVATE_BATCH) && !isIsBatchForProduct.equals(product.isIsBatchForProduct()))
                                || (columnConfig.containsKey(Constants.ACTIVATE_SERIAL_NO) && !isIsSerialForProduct.equals(product.isIsSerialForProduct()))
                                || (columnConfig.containsKey(Constants.ACTIVATE_LOCATION) && !isIslocationforproduct.equals(product.isIslocationforproduct()))
                                || (columnConfig.containsKey(Constants.ACTIVATE_WAREHOUSE) && !isIswarehouseforproduct.equals(product.isIswarehouseforproduct()))
                                || (columnConfig.containsKey(Constants.ACTIVATE_ROW) && !isIsRowForProduct.equals(product.isIsrowforproduct()))
                                || (columnConfig.containsKey(Constants.ACTIVATE_RACK) && !isIsRackForProduct.equals(product.isIsrackforproduct()))
                                || (columnConfig.containsKey(Constants.ACTIVATE_BIN) && !isIsBinForProduct.equals(product.isIsbinforproduct()))
                                || (!StringUtil.isNullOrEmpty(productUOMID) && product.getUnitOfMeasure() != null && !productUOMID.equals(product.getUnitOfMeasure().getID())))) {
                            failureMsg += "Product is already used in transaction,so can't update Currency , Initial Purchase Price , Stock UOM , Warehouse , Location , Batch , Serial , Row ,Rack , Bin.";
                        }
                        if (!StringUtil.isNullOrEmpty(failureMsg)) {
                            throw new AccountingException(failureMsg);
                        }
                        if (!isUsedInTransaction) {
                            if (columnConfig.containsKey(Constants.ACTIVATE_BATCH)) {
                                productMap.put("isBatchForProduct", isIsBatchForProduct);
                            }
                            if (columnConfig.containsKey(Constants.ACTIVATE_SERIAL_NO)) {
                                productMap.put("isSerialForProduct", isIsSerialForProduct);
                            }
                            if (columnConfig.containsKey(Constants.ACTIVATE_LOCATION)) {
                                productMap.put("isLocationForProduct", isIslocationforproduct);
                            }
                            if (columnConfig.containsKey(Constants.ACTIVATE_WAREHOUSE)) {
                                productMap.put("isWarehouseForProduct", isIswarehouseforproduct);
                                productMap.put("isRowForProduct", isIsRowForProduct);
                                productMap.put("isRackForProduct", isIsRackForProduct);
                                productMap.put("isBinForProduct", isIsBinForProduct);
                            }
                        }

                        if (columnConfig.containsKey("uomname")) {
                            productMap.put("uomid", productUOMID);
                        }
                        if (!productTypeID.equals(Producttype.SERVICE)) {
                            if (uom != null) {
                                productMap.put("transferUoM", uom);
                                productMap.put("orderUoM", uom);
                            }
                            if (salesuom != null) {
                                productMap.put("salesuomid", salesuom);
                            } else if (salesuom == null && uom != null) {
                                productMap.put("salesuomid", uom);
                            }
                            if (purchaseruom != null) {
                                productMap.put("purchaseuomid", purchaseruom);
                            } else if (purchaseruom == null && uom != null) {
                                productMap.put("purchaseuomid", uom);
                            }

//                            KwlReturnObject companyObj = accountingHandlerDAOobj.getObject(Company.class.getName(), companyid);
//                            Company company = (Company) companyObj.getEntityList().get(0);
                            Packaging packaging = null;
                            if (inneruom != null || casinguom != null || uom !=null) {
                                packaging = new Packaging();
                                if (columnConfig.containsKey("casinguom")) {
                                    packaging.setCasingUoM(casinguom);
                                }
                                if (columnConfig.containsKey("inneruom")) {
                                    packaging.setInnerUoM(inneruom);
                                }
                                if (columnConfig.containsKey("uomname")) {
                                    packaging.setStockUoM(uom);
                                }
                                if (columnConfig.containsKey("casinguom_value")) {
                                    packaging.setCasingUomValue(Double.parseDouble(casinguomvalue));
                                }
                                if (columnConfig.containsKey("inneruom_value")) {
                                    packaging.setInnerUomValue(Double.parseDouble(inneruomvalue));
                                }
                                if (columnConfig.containsKey("stockuom_value")) {
                                    packaging.setStockUomValue(Double.parseDouble(stcokuomvalue));
                                }
                                packaging.setCompany(company);

                            }
                            if (packaging != null) {
                                accProductObj.saveProductPackging(packaging);
                                productMap.put("packaging", packaging);
                            }
                        }

                        if (columnConfig.containsKey("reorderlevel")) {
                            productMap.put("reorderlevel", Double.parseDouble(productReorderLevel));
                        }
                        if (columnConfig.containsKey("reorderquantity")) {
                            productMap.put("reorderquantity", Double.parseDouble(productReorderQuantity));
                        }
                        if (columnConfig.containsKey("warrantyperiod")) {
                            productMap.put("warrantyperiod", Integer.parseInt(productWarrantyPeriod));
                        }
                        if (columnConfig.containsKey("warrantyperiodsal")) {
                            productMap.put("warrantyperiodsal", Integer.parseInt(productSalesWarrantyPeriod));
                        }
                        if (columnConfig.containsKey("leadtime")) {
                            productMap.put("leadtime", Integer.parseInt(productLeadTime));
                        }

                        if (columnConfig.containsKey("parentid")) {
                            productMap.put("parentid", parentProductUUID);
                        }
                        if (columnConfig.containsKey("salesaccountname")) {
                            productMap.put("salesaccountid", productSalesAccId);
                        }
                        if (columnConfig.containsKey("salesretaccountname")) {
                            productMap.put("salesretaccountid", productSalesReturnAccId);
                        }
                        if (columnConfig.containsKey("vendornameid")) {
                            productMap.put("vendorid", productPreferedVendorID);
                        }
                        if (columnConfig.containsKey("purchaseaccountname")) {
                            productMap.put("purchaseaccountid", productPurchaseAccId);
                        }
                        if (columnConfig.containsKey("purchaseretaccountname")) {
                            productMap.put("purchaseretaccountid", productPurchaseReturnAccId);
                        }

                        if (!StringUtil.isNullOrEmpty(productBrandID)) {
                            productMap.put("productBrandId", productBrandID);
                        }
                        
                        if (!StringUtil.isNullOrEmpty(landingcostcategoryids)) {
                            productMap.put("landingCostCategory", landingcostcategoryids);
                        }
                        
                        if (!StringUtil.isNullOrEmpty(stockAdjustmentAccountID)) {
                            productMap.put("stockadjustmentaccountid", stockAdjustmentAccountID); // Stock Adjustment Account
                        }
                        if (!StringUtil.isNullOrEmpty(inventoryAccountID)) {
                            productMap.put("inventoryaccountid", inventoryAccountID); // Inventory Account
                        }
                        if (!StringUtil.isNullOrEmpty(costOfGoodsSoldAccountID)) {
                            productMap.put("cogsaccountid", costOfGoodsSoldAccountID); // Cost of Goods Sold Account
                        }
                        
                        // if product have multiuom = 'T' and Account Preferences have UOM Setting for UOM Schema then set uomschemaType for product
                        if (uomSchemaType != null && isMultiUOM && extraCompanyPreferences != null && extraCompanyPreferences.getUomSchemaType() == 0) {
                            productMap.put("uomschemaType", uomSchemaType);
                        }
                        
                        // if product have uomSchemaType != null and displayUoMObj != null when Account Preferences have show Display UOM Setting is ON
                        if (uomSchemaType != null && displayUoMObj != null) {
                            productMap.put("displayUoM", displayUoMObj.getID());
                        }

                        if (!StringUtil.isNullOrEmpty(productDefaultLocationID)) {
                            productMap.put("location", productDefaultLocationID);
                        }

                        if (!StringUtil.isNullOrEmpty(productDefaultWarehouseID)) {
                            productMap.put("warehouse", productDefaultWarehouseID);
                        }

                        if (columnConfig.containsKey("syncable")) {
                            productMap.put("syncable", isSyncable);
                        }
                        if (columnConfig.containsKey("multiuom")) {
                            productMap.put("multiuom", isMultiUOM);
                        }

                        if (columnConfig.containsKey("minorderingquantity")) {
                            productMap.put("minorderingquantity", Double.parseDouble(minOrderingQuantity));
                        }
                        if (columnConfig.containsKey("maxorderingquantity")) {
                            productMap.put("maxorderingquantity", Double.parseDouble(maxOrderingQuantity));
                        }
                        if (indianCheck) {
                             if (!StringUtil.isNullOrEmpty(vatonmrp.toString())) {
                                productMap.put("vatonmrp", !vatonmrp);
                            }
                            if (!StringUtil.isNullOrEmpty(tariffName)) {
                                productMap.put("tariffname", tariffName);
                            }
                            if (!StringUtil.isNullOrEmpty(hsncode)) {
                                productMap.put("hsCode", hsncode);
                            }
                            if (!StringUtil.isNullOrEmpty(reportinguomID)) {
                                productMap.put("reportinguom", reportinguomID);
                            }
                            if (columnConfig.containsKey("reportingschematype") && reportingSchemaType != null) {
                                productMap.put("reportingSchemaType", reportingSchemaType.getID());
                            }
                            if (!StringUtil.isNullOrEmpty(excisemethod)) {
                                productMap.put("excisemethod", excisemethod);
                            }
                            if (!StringUtil.isNullOrEmpty(vatMethodType)) {
                                productMap.put("vatMethodType", vatMethodType);
                            }
                            if (vatAbatementPeriodFromDate != null) {
                                productMap.put("vatAbatementPeriodFromDate", vatAbatementPeriodFromDate);
                            }
                            if (vatAbatementPeriodToDate != null) {
                                productMap.put("vatAbatementPeriodToDate", vatAbatementPeriodToDate);
                            }
                            if (!StringUtil.isNullOrEmpty(vatcommoditycode)) {
                                productMap.put("vatcommoditycode", vatcommoditycode);
                            }
                            if (!StringUtil.isNullOrEmpty(natureofStockItem)) {
                                productMap.put("natureOfStockItem", natureofStockItem);
                            }
                            if (!StringUtil.isNullOrEmpty(mrprate)) {
                                productMap.put("mrprate", mrprate);
                            }
                            if (!StringUtil.isNullOrEmpty(serviceTaxCode)) {
                                productMap.put("servicetaxcode", serviceTaxCode);
                            }

                            if (!StringUtil.isNullOrEmpty(interStatePurchaseAccount)) {
                                productMap.put("interStatePurAccID", interStatePurchaseAccount);
                            }
                            if (!StringUtil.isNullOrEmpty(interStatePurchaseAccountCForm)) {
                                productMap.put("interStatePurAccCformID", interStatePurchaseAccountCForm);
                            }
                            if (!StringUtil.isNullOrEmpty(interStatePurchaseReturnAccount)) {
                                productMap.put("interStatePurReturnAccID", interStatePurchaseReturnAccount);
                            }
                            if (!StringUtil.isNullOrEmpty(interStatePurchaseReturnAccountCForm)) {
                                productMap.put("interStatePurReturnAccCformID", interStatePurchaseReturnAccountCForm);
                            }

                            if (!StringUtil.isNullOrEmpty(interStateSalesAccount)) {
                                productMap.put("interStateSalesAccID", interStateSalesAccount);
                            }
                            if (!StringUtil.isNullOrEmpty(interStateSalesAccountCForm)) {
                                productMap.put("interStateSalesAccCformID", interStateSalesAccountCForm);
                            }   
                            if (!StringUtil.isNullOrEmpty(interStateSalesReturnAccount)) {
                                productMap.put("interStateSalesReturnAccID", interStateSalesReturnAccount);
                            }
                            if (!StringUtil.isNullOrEmpty(interStateSalesReturnAccountCForm)) {
                                productMap.put("interStateSalesReturnAccCformID", interStateSalesReturnAccountCForm);
                            }
                            if (rcmapplicable != null) {
                                productMap.put("rcmapplicable", rcmapplicable);
                            }
                        }
                        productMap.put("deletedflag", false);
                        productMap.put("companyid", companyid);
                        productMap.put("isImport", 1);

                        if (asOfDate == null) {//asOfDate field will be null only when product is new and field is not mapped
                            asOfDate = bookBookBeginningDate;
                        }
                        /*
                         * As of date should be before or equals to book beginning date
                         */
                        if (asOfDate!=null && Double.parseDouble(productInitialQuantity) > 0 && asOfDate.after(bookBookBeginningDate)) {
                            throw new DataInvalidateException(messageSource.getMessage("acc.importproduct.beforeOrEqualToBookBeginningDate", null, locale));
                        }
                        if (columnConfig.containsKey("asofdate")) {
                            productMap.put("asOfDate", asOfDate);
                        }

                        if (!StringUtil.isNullOrEmpty(productInitialQuantity) && !StringUtil.isNullOrEmpty(productInitialPurchasePrise) && (extraCompanyPreferences.isActivateMRPModule() || preferences.getInventoryValuationType() == Constants.PERPETUAL_VALUATION_METHOD) && Double.parseDouble(productInitialPurchasePrise) > 0) {
                            try {
                                JSONObject accParams = new JSONObject();
                                Account inventoryAccount = null;
                                Map<String, Object> currencyParams = requestParams1;
                                double openingbalanceamount = (Integer.parseInt(productInitialQuantity) * Double.parseDouble(productInitialPurchasePrise));
                                double openingbalanceamountinbase = openingbalanceamount;
                                productMap.put("openingbalanceamount", authHandler.round(openingbalanceamount, companyid));
                                if (!StringUtil.isNullOrEmpty(currencyId)) {
                                    result = accCurrencyDAOobj.getCurrencyToBaseAmount(currencyParams, openingbalanceamount, currencyId, asOfDate, 0);
                                    openingbalanceamountinbase = (Double) result.getEntityList().get(0);
                                    productMap.put("openingbalanceamountinbase", authHandler.round(openingbalanceamountinbase, companyid));
                                    result = accCurrencyDAOobj.getExcDetailID(currencyParams, currencyId, asOfDate, null);
                                    if (result != null && result.getEntityList() != null && !result.getEntityList().isEmpty()) {
                                        ExchangeRateDetails erd = (ExchangeRateDetails) result.getEntityList().get(0);
                                        if (erd != null) {
                                            productMap.put("exchangerateforopeningbalanceamount", erd.getExchangeRate());
                                        }
                                    }
                                } else {
                                    productMap.put("openingbalanceamountinbase", authHandler.round(openingbalanceamountinbase, companyid));
                                    productMap.put("exchangerateforopeningbalanceamount", 1);
                                }

                                if (productTypeID.equals(Producttype.ASSEMBLY) || productTypeID.equals(Producttype.INVENTORY_PART)) {
                                    if (updateExistingRecordFlag && productOldObj != null) { // Subtract balance from old account
                                        inventoryAccount = productOldObj.getInventoryAccount();
                                        if (inventoryAccount != null) {
                                            accParams.put("accountid", inventoryAccount.getID());
                                            KwlReturnObject amountresult = accCurrencyDAOobj.getBaseToCurrencyAmount(currencyParams, productOldObj.getOpeningBalanceAmountInBase(), inventoryAccount.getCurrency().getCurrencyID(), asOfDate, 0);
                                            double amountInAccountCurrency = inventoryAccount.getOpeningBalance() - (Double) amountresult.getEntityList().get(0);
                                            accParams.put("balance", authHandler.round(amountInAccountCurrency, companyid));
                                            accParams.put("acccode", (StringUtil.isNullOrEmpty(inventoryAccount.getAcccode()))?"":inventoryAccount.getAcccode());
                                            accParams.put("taxid", inventoryAccount.getTaxid() != null ? inventoryAccount.getTaxid() : "");
                                            accAccountDAOobj.updateAccount(accParams);
                                            inventoryAccount = null;
                                        }
                                    }
                                    if (!StringUtil.isNullOrEmpty(inventoryAccountID)) { // Add balance in new account
                                        KwlReturnObject accountresult = accountingHandlerDAOobj.getObject(Account.class.getName(), inventoryAccountID);
                                        inventoryAccount = (Account) accountresult.getEntityList().get(0);
                                        if (inventoryAccount != null) {
                                            accParams.put("accountid", inventoryAccount.getID());
                                            KwlReturnObject amountresult = accCurrencyDAOobj.getBaseToCurrencyAmount(currencyParams, openingbalanceamountinbase, inventoryAccount.getCurrency().getCurrencyID(), asOfDate, 0);
                                            double amountInAccountCurrency = inventoryAccount.getOpeningBalance() + (Double) amountresult.getEntityList().get(0);
                                            accParams.put("balance", authHandler.round(amountInAccountCurrency, companyid));
                                            accParams.put("acccode", (StringUtil.isNullOrEmpty(inventoryAccount.getAcccode()))?"":inventoryAccount.getAcccode());
                                            accParams.put("taxid", inventoryAccount.getTaxid() != null ? inventoryAccount.getTaxid() : "");
                                            accAccountDAOobj.updateAccount(accParams);
                                            inventoryAccount = null;
                                        }
                                    }
                                }
                            } catch (Exception ex) {
                                Logger.getLogger(Importproduct.class.getName()).log(Level.WARNING, ex.getMessage());
                            }
                        }

                        KwlReturnObject productresult = null;
                        String auditID = "",auditAction="";
                        if ((!updateExistingRecordFlag || (newProductAddinUpdateCase && updateExistingRecordFlag))) {
                            productresult = accProductObj.addProduct(productMap);
                            auditID = AuditAction.PRODUCT_CREATION;
                            auditAction="created";
                        } else {
                            productresult = accProductObj.updateProduct(productMap);
                           auditID = AuditAction.PRODUCT_UPDATION;                            
                           auditAction="updated";
                        }
                        System.out.println(productName);
                        product = (Product) productresult.getEntityList().get(0);
                        Object remoteAddress = requestParams1.containsKey("remoteAddress")?requestParams1.get("remoteAddress") : Constants.defaultIp;
                        insertAuditLog(auditID,auditAction, remoteAddress.toString(), "Product", product, user);                        
//                        if (!productTypeID.equals(Producttype.SERVICE)) {
//                            // creating Price list Hashmap
//                            HashMap<String, Object> cycleParams = new HashMap<String, Object>();
//                            cycleParams.put("productid", product.getID());
//                            cycleParams.put("interval", Integer.parseInt(productCycleCountInterval));
//                            cycleParams.put("tolerance", Integer.parseInt(productCycleCountTolerance));
//                            accProductObj.saveProductCycleCount(cycleParams);
//                        }

                        // if at company level warehouse/location/batch/serial/row/rack/bin one this option is true then we are not updating intial quantity from here. 

                        if (isAddUpdateInitialQuantity == false && productInitialQuantity.length() > 0) {
                            JSONObject inventoryjson = new JSONObject();
                            inventoryjson.put("productid", product.getID());
                            inventoryjson.put("quantity", Double.parseDouble(productInitialQuantity));
                            if (!isUsedInTransaction) {
                                inventoryjson.put("baseuomquantity", Double.parseDouble(productInitialQuantity));
                            }
//                            inventoryjson.put("baseuomquantity", Double.parseDouble(productInitialQuantity));
                            inventoryjson.put("baseuomrate", 1);
                            if (product.getUnitOfMeasure() != null) {
                                inventoryjson.put("uomid", product.getUnitOfMeasure().getID());
                            }
                            inventoryjson.put("description", "Inventory Opened");
                            inventoryjson.put("carryin", true);
                            inventoryjson.put("defective", false);
                            inventoryjson.put("newinventory", true);
                            inventoryjson.put("companyid", companyid);
                            inventoryjson.put("updatedate", asOfDate);
//                            accProductObj.addInventory(inventoryjson);

//                            String batchLocationId= "";
//                            String batchWarehouseId="";
//                            double batchQty=0;
//                            KwlReturnObject openingBatchDetail= accImportServiceObj.getProductOpeningQtyBatchDetail(product);

//                            double prodInitPurchasePrice = 0;
//                            if (productInitialPurchasePrise.length() > 0 && !isUsedInTransaction) {
//                                prodInitPurchasePrice = Double.parseDouble(productInitialPurchasePrise);
//                            }
                            if (!updateExistingRecordFlag || (newProductAddinUpdateCase && updateExistingRecordFlag)) {
                                KwlReturnObject newInvObj = accProductObj.addInventory(inventoryjson);
//                                if(!StringUtil.isNullOrEmpty(productDefaultLocationID) && !StringUtil.isNullOrEmpty(productDefaultWarehouseID) && isInventoryIntegrationOn){
//                                    accImportServiceObj.addStockInventorySide(newInvObj,inventoryjson,productDefaultWarehouseID,productDefaultLocationID,prodInitPurchasePrice);
//                                }
                            } else if (columnConfig.containsKey("initialquantity") && !isUsedInTransaction) { // if this is product import(ie. update product import),then quantity column  is removed from mapping,so this will be called only while add product case - Raj Shaha(Added isUsedInTransaction flag so that initial quantity will not update when product is used in transaction)
                                KwlReturnObject updatedInvObj = accProductObj.updateInitialInventory(inventoryjson);
//                                if (openingBatchDetail != null && openingBatchDetail.getEntityList() != null && openingBatchDetail.getRecordTotalCount() > 0) {
//                                    Iterator it1=openingBatchDetail.getEntityList().iterator();
//                                    // if new batch,serial,warehouse,location data is available then only delete previous stock for product
//                                    if(openingBatchDetail.getEntityList().size() > 0){ 
//                                        accImportServiceObj.deleteStockAndSMForProduct(product);//delete stock
//                                        while(it1.hasNext()){ // add new stock
//                                            LocationBatchDocumentMapping lbm = (LocationBatchDocumentMapping) it1.next();
//                                            if (lbm != null) {
//                                                batchWarehouseId = lbm.getBatchmapid().getWarehouse() != null ? lbm.getBatchmapid().getWarehouse().getId() : "";
//                                                batchLocationId = lbm.getBatchmapid().getLocation() != null ? lbm.getBatchmapid().getLocation().getId() : "";
//                                                if (!StringUtil.isNullOrEmpty(batchLocationId) && !StringUtil.isNullOrEmpty(batchWarehouseId) && isInventoryIntegrationOn) {
//                                                    accImportServiceObj.updateStockInventorySide(updatedInvObj, inventoryjson,lbm,prodInitPurchasePrice);
//                                                }
//                                            }
//
//                                        }
//                                    }
//
//                                }
                            }

                            HashMap<String, Object> assemblyParams = requestParams1; //AccountingManager.getGlobalParams(request);
                            assemblyParams.put("assembly", "");
                            assemblyParams.put("applydate", new Date());
                            assemblyParams.put("quantity", Double.parseDouble(productInitialQuantity));
                            assemblyParams.put("memo", "Inventory Opened");
                            assemblyParams.put("refno", "");
                            assemblyParams.put("buildproductid", product.getID());
                            accProductObj.updateAssemblyInventory(assemblyParams);
                        }
//                        Date ondate = new Date();
                        Date ondate = asOfDate;
                        if (productInitialPurchasePrise.length() > 0 && !isUsedInTransaction && columnConfig.containsKey("purchaseprice")) {
                            HashMap<String, Object> requestParams = new HashMap<>();
                            requestParams.put(Constants.productid, product.getID());
                            requestParams.put("carryin", true);
//                            requestParams.put("applydate", ondate);
                            //requestParams.put("price", authHandler.roundUnitPrice(Double.parseDouble(productInitialPurchasePrise),companyid));
                            requestParams.put("affecteduser", "-1");
                            requestParams.put("initialPrice", true);
                            requestParams.put(Constants.currencyKey, currencyId);
                            requestParams.put("uomid", product.getUnitOfMeasure().getID());
                            KwlReturnObject priceResult = accProductObj.getPriceListEntry(requestParams);
                            List list = priceResult.getEntityList();
                            
                            // creating Price list Hashmap
//                            accProductObj.setInitialPriceForProduct(product.getID(), companyid);
                            HashMap<String, Object> initialPurchasePriceMap = new HashMap<String, Object>();
                            initialPurchasePriceMap.put("productid", product.getID());
                            initialPurchasePriceMap.put("companyid", companyid);
                            initialPurchasePriceMap.put("carryin", true);
                            initialPurchasePriceMap.put("price", authHandler.roundUnitPrice(Double.parseDouble(productInitialPurchasePrise),companyid));
                            initialPurchasePriceMap.put("applydate", ondate);
                            initialPurchasePriceMap.put("initialPrice", true);
                            initialPurchasePriceMap.put("affecteduser", "-1");
                            initialPurchasePriceMap.put("currencyid", currencyId);
                            initialPurchasePriceMap.put("uomid", product.getUnitOfMeasure().getID());
                            if(list != null && list.size() > 0){
                                PriceList price = (PriceList) list.get(0);
                                initialPurchasePriceMap.put("priceid", price.getID());
                                accProductObj.updatePriceList(initialPurchasePriceMap); 
                            }else{
                            accProductObj.addPriceList(initialPurchasePriceMap);
                        }

                        }

                        if (productSalesPrice.length() > 0 && !isUsedInTransaction && columnConfig.containsKey("saleprice")) {
                            HashMap<String, Object> requestParams = new HashMap<>();
                            requestParams.put(Constants.productid, product.getID());
                            requestParams.put("carryin", false);
                            requestParams.put("applydate", ondate);
//                            requestParams.put("price", authHandler.roundUnitPrice(Double.parseDouble(productSalesPrice),companyid));
                            requestParams.put("affecteduser", "-1");
                            requestParams.put(Constants.currencyKey, currencyId);
                            requestParams.put("uomid", product.getUnitOfMeasure().getID());
                            KwlReturnObject priceResult = accProductObj.getPriceListEntry(requestParams);
                            List list = priceResult.getEntityList();
                            
                            // creating Price list Hashmap
                            HashMap<String, Object> salesPriceMap = new HashMap<String, Object>();
                            salesPriceMap.put("productid", product.getID());
                            salesPriceMap.put("companyid", companyid);
                            salesPriceMap.put("carryin", false);
                            salesPriceMap.put("price", authHandler.roundUnitPrice(Double.parseDouble(productSalesPrice),companyid));
                            salesPriceMap.put("applydate", ondate);
                            salesPriceMap.put("affecteduser", "-1");
                            salesPriceMap.put("currencyid", currencyId);
                            salesPriceMap.put("uomid", product.getUnitOfMeasure().getID());
                              if (list != null && list.size() > 0) {
                                PriceList price = (PriceList) list.get(0);
                                salesPriceMap.put("priceid", price.getID());
                                accProductObj.updatePriceList(salesPriceMap); 
                            } else {
                            accProductObj.addPriceList(salesPriceMap);
                        }
                        }

                        if (!StringUtil.isNullOrEmpty(customfield) && !customfield.equals("[]")) {
                            JSONArray jcustomarray = new JSONArray(customfield);
                            HashMap<String, Object> customrequestParams = new HashMap<String, Object>();
                            customrequestParams.put("customarray", jcustomarray);
                            customrequestParams.put("modulename", Constants.Acc_Product_modulename);
                            customrequestParams.put("moduleprimarykey", Constants.Acc_Productid);
                            customrequestParams.put("modulerecid", product.getID());
                            customrequestParams.put("moduleid", Constants.Acc_Product_Master_ModuleId);//isFixedAsset ? Constants.Acc_FixedAssets_AssetsGroups_ModuleId:
                            customrequestParams.put("companyid", companyid);
                            productMap.put("id", product.getID());
                            customrequestParams.put("customdataclasspath", Constants.Acc_Product_custom_data_classpath);
                            KwlReturnObject customDataresult = fieldDataManagercntrl.setCustomData(customrequestParams);
                            if (customDataresult != null && customDataresult.getEntityList().size() > 0) {
                                productMap.put("accproductcustomdataref", product.getID());
                                productresult = accProductObj.updateProduct(productMap);
                            }
                            HashMap<String, Object> customHistoryParams = new HashMap<String, Object>();
                            customHistoryParams.put("productId", product.getID());
                            customHistoryParams.put("customarray", jcustomarray);
                            requestParams1.put("gstapplieddate", gstapplicabledate!=null?gstapplicabledate:product.getAsOfDate());
                            maintainCustomFieldHistoryForProduct(requestParams1, customHistoryParams);
                        }
                        
//                        // Tax Mapping for India Company Company Level Tax Mapp to Product Default.                        
//                        if (extraCompanyPreferences.getLineLevelTermFlag() == IndiaComplianceConstants.LINELEVEL_FLAG_ON) {
//                            HashMap<String, String> mapDataInd = new HashMap<String, String>();
//                            mapDataInd.put("productid", product.getID());
//                            mapDataInd.put("companyid", extraCompanyPreferences.getCompany().getCompanyID());
//                            Map<String, List<String>> mapDefaultTerm = new HashMap<String, List<String>>();
//                            mapDefaultTerm.put("Purchases", inputDefaultTerms);
//                            mapDefaultTerm.put("Sales", outputDefaultTerms);
//                            if (!updateExistingRecordFlag) {
//                                accProductObj.mapCompanyTaxToProductTax(mapDataInd, product, mapDefaultTerm); //send Default Terms data for addinng default terms  while importing product Input/ Output terms  
//                            } else {
//                                accProductObj.UpdateTaxToProductTax(mapDataInd, product, mapDefaultTerm); //send Default Terms data for addinng default terms  while importing product Input/ Output terms     
//                            }
//                        }
                        

                    } catch (Exception ex) {
                        failed++;
                        String errorMsg = ex.getMessage(), invalidColumns = "";
                        try {
                            JSONObject errorLog = new JSONObject(errorMsg);
                            errorMsg = errorLog.getString("errorMsg");
                            invalidColumns = errorLog.getString("invalidColumns");
                        } catch (JSONException jex) {
                        }
//                        failedRecords.append("\n" + createCSVrecord(recarr) + "\"" + errorMsg.replaceAll("\"", "") + "\"");
                        List failureRecArr = new ArrayList();
                        for (int cellData = 0; cellData < recarr.length; cellData++) {
                            failureRecArr.add(recarr[cellData]);
                        }
                        failureRecArr.add(errorMsg.replaceAll("\"", ""));
                        failureArr.add(failureRecArr);
                        
                        failureColumnArr.add(invalidColumn);
                    }
                    total++;
                }
                cnt++;

                if (count == limit) {
                    KwlReturnObject companyObj = accountingHandlerDAOobj.getObject(ImportLog.class.getName(), logId);
                    ImportLog importLog = (ImportLog) companyObj.getEntityList().get(0);
                    importLog.setLog("Imported " + ((cnt - failed) - 1) + " records  successfully and failed to import " + failed + " records.");
                    importLog.setRejected(failed);
                    importLog.setTotalRecs(total);
                    txnManager.commit(status);

                    // for reset counter of transaction limit
                    count = 1;
                    def = new DefaultTransactionDefinition();
                    def.setName("import_Tx");
                    def.setPropagationBehavior(TransactionDefinition.PROPAGATION_REQUIRED);
                    status = txnManager.getTransaction(def);
                } else {
                    count++;
                }
            }

            if (failed > 0) {
//                createFailureFiles(fileName, failedRecords, ".csv");
                importDao.createFailureXlsFiles(fileName, failureArr, ".xls", failureColumnArr);
            }

            int success = total - failed;
            if (total == 0) {
                msg = "Empty file.";
            } else if (success == 0) {
//                issuccess = false;
                msg = "Failed to import all the records.";
            } else if (success == total) {
                msg = "All records are imported successfully.";
            } else {
                msg = "Imported " + success + " record" + (success > 1 ? "s" : "") + " successfully";
                msg += (failed == 0 ? "." : " and failed to import " + failed + " record" + (failed > 1 ? "s" : "") + ".");
            }

            try {
                txnManager.commit(status);
            } catch (Exception ex) {
                commitedEx = true;
                throw ex;
            }
        } catch (Exception ex) {
            if (!commitedEx) { //if exception occurs during commit then dont call rollback
                txnManager.rollback(status);
            }
            issuccess = false;
            msg = "" + ex.getMessage();

            Logger.getLogger(accProductController.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
            throw new AccountingException("Error While Importing Records.");
        } finally {
            fileInputStream.close();
            csvReader.close();

            DefaultTransactionDefinition ldef = new DefaultTransactionDefinition();
            ldef.setName("import_Tx");
            ldef.setPropagationBehavior(TransactionDefinition.PROPAGATION_REQUIRED);
            TransactionStatus lstatus = txnManager.getTransaction(ldef);

            try {
                //Insert Integration log
                HashMap<String, Object> logDataMap = new HashMap<String, Object>();
                logDataMap.put("FileName", getActualFileName(fileName));
                logDataMap.put("StorageName", fileName);
                logDataMap.put("Log", msg);
                logDataMap.put("Type", "csv");
                logDataMap.put("FailureFileType", failed>0?"xls":"");
                logDataMap.put("TotalRecs", total);
                logDataMap.put("Rejected", failed);
                logDataMap.put("Module", Constants.Acc_Product_Master_ModuleId);
                logDataMap.put("ImportDate", new Date());
                logDataMap.put("User", userId);
                logDataMap.put("Company", companyid);
                logDataMap.put("Id", logId);
                importDao.saveImportLog(logDataMap);
                
                String tableName = importDao.getTableName(fileName);
                importDao.removeFileTable(tableName); // Remove table after importing all records
                
                txnManager.commit(lstatus);
            } catch (Exception ex) {
                txnManager.rollback(lstatus);
                Logger.getLogger(accProductController.class.getName()).log(Level.SEVERE, null, ex);
            }

            try {
                returnObj.put("success", issuccess);
                returnObj.put("msg", msg);
                returnObj.put("totalrecords", total);
                returnObj.put("successrecords", total - failed);
                returnObj.put("failedrecords", failed);
                returnObj.put("filename", getActualFileName(fileName));
                returnObj.put("Module", Constants.Acc_Product_Master_ModuleId);
            } catch (JSONException ex) {
                Logger.getLogger(accProductController.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

        return returnObj;
    }
       public JSONObject importProductCategorycsv(HashMap<String,Object> requestParams) throws AccountingException, IOException, SessionExpiredException, JSONException {
        DefaultTransactionDefinition def = new DefaultTransactionDefinition();
        def.setName("import_Tx");
        def.setPropagationBehavior(TransactionDefinition.PROPAGATION_REQUIRED);
        TransactionStatus status = txnManager.getTransaction(def);
        boolean commitedEx = false;
        boolean issuccess = true;
        String msg = "";
        FileInputStream fileInputStream = null;
        BufferedReader br = null;
        int total = 0, failed = 0;
        int count = 1;
        int limit = Constants.Transaction_Commit_Limit;
        String companyid = requestParams.get("companyid").toString();
        String userId = requestParams.get("userid").toString();
        JSONObject jobj=new JSONObject();
        jobj = (JSONObject) requestParams.get("jobj");
        String masterPreference = requestParams.get("masterPreference").toString();
        String fileName = jobj.getString("filename");
       
  
        JSONObject returnObj = new JSONObject();

        String logId = null;
        try {
            KwlReturnObject jeresult = accountingHandlerDAOobj.getObject(User.class.getName(), userId);
            User user = (User) jeresult.getEntityList().get(0);            
            logId = addPendingImportLog(requestParams);
            fileInputStream = new FileInputStream(jobj.getString("FilePath"));
            br = new BufferedReader(new InputStreamReader(fileInputStream));
            String record = "";
            int cnt = 0;

            StringBuilder failedRecords = new StringBuilder();

            HashMap<String, Integer> columnConfig = new HashMap<String, Integer>();
            JSONArray jSONArray = jobj.getJSONArray("resjson");
            List headArrayList = new ArrayList();
            for (int i = 0; i < jSONArray.length(); i++) {
                JSONObject jSONObject = jSONArray.getJSONObject(i);
                headArrayList.add(jSONObject.get("csvheader"));

                columnConfig.put(jSONObject.getString("dataindex"), jSONObject.getInt("csvindex"));
            }

            while ((record = br.readLine()) != null) {
                String[] recarr = record.split(",");
                if (cnt == 0){//Putting Header in failure File
                    failedRecords.append(createCSVrecord(recarr) + "\"Error Message\"");
                }else {
                    try {
                        Product product =null;
                        String productIDUUID = "";
                        String productID = "";
                        if (columnConfig.containsKey("productid")) {
                            productID = recarr[(Integer) columnConfig.get("productid")].replaceAll("\"", "").trim();
                            if (!StringUtil.isNullOrEmpty(productID)) {
                                product= getProductByProductID(productID, companyid);
                                if (product != null) {
                                    productIDUUID = product.getID();
                                } else {
                                    throw new AccountingException("Product ID is not found for " + productID);
                                }
                                
                            } else {
                                throw new AccountingException("Product ID is not available.");
                            }
                        } else {
                            throw new AccountingException("Product ID column is not found.");
                        }

                        String productCategoryID = "";
                        String productCategoryName = "";
                        if (columnConfig.containsKey("productCategory")) {
                            productCategoryName = recarr[(Integer) columnConfig.get("productCategory")].replaceAll("\"", "").trim();
                            if (!StringUtil.isNullOrEmpty(productCategoryName)) {
                                if (StringUtil.equal(productCategoryName, "None")) {
                                    productCategoryID = null;
                                } else {
                                    productCategoryID = getProductCategoryIDByName(productCategoryName, companyid);
                                    if (StringUtil.isNullOrEmpty(productCategoryID) && masterPreference.equalsIgnoreCase("2")) {
                                        HashMap<String, Object> requestMap = new HashMap<>();
                                        requestMap.put("name", productCategoryName);
                                        requestMap.put("groupid", String.valueOf(19));
                                        requestMap.put("companyid", companyid);
                                        KwlReturnObject masterResult = accMasterItemsDAOobj.addMasterItem(requestMap);
                                        MasterItem master = (MasterItem) masterResult.getEntityList().get(0);
                                        productCategoryID= master.getID();
                                    }else if(StringUtil.isNullOrEmpty(productCategoryID)){
                                        throw new AccountingException("Product Category is not found for " + productCategoryName);
                                    }
                                }
                            } else {
                                throw new AccountingException("Product Category is not available.");
                            }
                        } else {
                            throw new AccountingException("Product Category column is not found.");
                        }
                        
                        if (!StringUtil.isNullOrEmpty(productCategoryID)) {
                            KwlReturnObject categoryResult = accProductObj.getProductCategoryMapping(productIDUUID, productCategoryID);
                            int nocount = categoryResult.getRecordTotalCount();
                            if (nocount > 0) {
                                throw new AccountingException("Product Category '" + productCategoryName + "' for Product ID '" + productID + "' is already exists.");
                            }
                        }
                        
                        if (!StringUtil.isNullOrEmpty(productCategoryID)) {
                            accProductObj.deleteProductCategoryMappingForNoneCategory(productIDUUID);
                        } else {
                            accProductObj.deleteProductCategoryMappingDtails(productIDUUID);
                        }
                        System.out.println(productID);
                        // For saving Product and Category Mapping
                        accProductObj.saveProductCategoryMapping(productIDUUID, productCategoryID);
                        Object remoteAddress = requestParams.containsKey("remoteAddress")?requestParams.get("remoteAddress") : Constants.defaultIp;
                        insertAuditLog(AuditAction.PRODUCT_CATEGORY_ADDED,"created", remoteAddress.toString(), "Product Category Mapping", product, user);                        
                    } catch (Exception ex) {
                        failed++;
                        String errorMsg = ex.getMessage(), invalidColumns = "";
                        try {
                            JSONObject errorLog = new JSONObject(errorMsg);
                            errorMsg = errorLog.getString("errorMsg");
                            invalidColumns = errorLog.getString("invalidColumns");
                        } catch (JSONException jex) {
                        }
                        failedRecords.append("\n" + createCSVrecord(recarr) + "\"" + errorMsg.replaceAll("\"", "") + "\"");
                    }
                    total++;
                }
                cnt++;
                  if (count == limit) {
                    txnManager.commit(status);
                    
                    // for reset counter of transaction limit
                    count = 1;
                    def = new DefaultTransactionDefinition();
                    def.setName("import_Tx");
                    def.setPropagationBehavior(TransactionDefinition.PROPAGATION_REQUIRED);
                    status = txnManager.getTransaction(def);
                } else {
                    count++;
                }
            }

            if (failed > 0) {
                createFailureFiles(fileName, failedRecords, ".csv");
            }

            int success = total - failed;
            if (total == 0) {
                msg = "Empty file.";
            } else if (success == 0) {
//                issuccess = false;
                msg = "Failed to import all the records.";
            } else if (success == total) {
                msg = "All records are imported successfully.";
            } else {
                msg = "Imported " + success + " record" + (success > 1 ? "s" : "") + " successfully";
                msg += (failed == 0 ? "." : " and failed to import " + failed + " record" + (failed > 1 ? "s" : "") + ".");
            }

            try {
                txnManager.commit(status);
            } catch (Exception ex) {
                commitedEx = true;
                throw ex;
            }
        } catch (Exception ex) {
            if (!commitedEx) { // if exception occurs during commit then dont call rollback
                txnManager.rollback(status);
            }
            issuccess = false;
            msg = "" + ex.getMessage();

            Logger.getLogger(accProductController.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
            throw new AccountingException("Error While Importing Records.");
        } finally {
            fileInputStream.close();
            br.close();

            DefaultTransactionDefinition ldef = new DefaultTransactionDefinition();
            ldef.setName("import_Tx");
            ldef.setPropagationBehavior(TransactionDefinition.PROPAGATION_REQUIRED);
            TransactionStatus lstatus = txnManager.getTransaction(ldef);

            try {
                // Insert Integration log
                HashMap<String, Object> logDataMap = new HashMap<String, Object>();
                logDataMap.put("FileName", getActualFileName(fileName));
                logDataMap.put("StorageName", fileName);
                logDataMap.put("Log", msg);
                logDataMap.put("Type", "csv");
                logDataMap.put("FailureFileType", failed>0?"csv":"");
                logDataMap.put("TotalRecs", total);
                logDataMap.put("Rejected", failed);
                logDataMap.put("Module", Constants.Acc_Product_Category_ModuleId);
                logDataMap.put("ImportDate", new Date());
                logDataMap.put("User", userId);
                logDataMap.put("Company", companyid);
                logDataMap.put("Id", logId);
                importDao.saveImportLog(logDataMap);

                String tableName = importDao.getTableName(fileName);
                importDao.removeFileTable(tableName); // Remove table after importing all records

                txnManager.commit(lstatus);
            } catch (Exception ex) {
                txnManager.rollback(lstatus);
                Logger.getLogger(accProductController.class.getName()).log(Level.SEVERE, null, ex);
            }

            try {
                returnObj.put("success", issuccess);
                returnObj.put("msg", msg);
                returnObj.put("totalrecords", total);
                returnObj.put("successrecords", total - failed);
                returnObj.put("failedrecords", failed);
                returnObj.put("filename", getActualFileName(fileName));
            } catch (JSONException ex) {
                Logger.getLogger(accProductController.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

        return returnObj;
    }
     private String getProductCategoryIDByName(String productCategoryName, String companyID) throws AccountingException {
        String productCategoryID = "";
        try {
            if (!StringUtil.isNullOrEmpty(productCategoryName) && !StringUtil.isNullOrEmpty(companyID)) {
                KwlReturnObject retObj = accProductObj.getProductCategoryIDByName(productCategoryName, companyID);
                List list = retObj.getEntityList();
                Iterator itr = list.iterator();
                while (itr.hasNext()) {
                    productCategoryID = (String) itr.next();
                }
            }
        } catch (Exception ex) {
            Logger.getLogger(accProductController.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
            throw new AccountingException("System Failure while fetching Product Category");
        }
        return productCategoryID;
    }
     
    private void insertAuditLog(String auditID, String auditAction, String remoteAddress, String classAction,Product product, User user) throws ServiceException {
//        String auditMsg = auditID == com.krawler.accounting.utils.AuditAction.PRODUCT_CREATION ? "created " : "updated ";
        Map<String, Object> requestParams = new HashMap<String, Object>();
        requestParams.put("remoteAddress", remoteAddress);
        requestParams.put("userid", user.getUserID());
        auditTrailObj.insertAuditLog(auditID, "User " + user.getFullName() + " has " + auditAction +" "+ classAction + " " + product.getName() + " [" + product.getProductid() + "]", requestParams, product.getProductid());
    }

    private void insertAuditLog(String auditID, String remoteAddress, Map<String, String> detailsMap, String userId) throws ServiceException {
        Map<String, Object> requestParams = new HashMap<String, Object>();
        requestParams.put("remoteAddress", remoteAddress);
        requestParams.put("userid", userId);
        for (Map.Entry<String, String> mapEntry : detailsMap.entrySet()) {
            auditTrailObj.insertAuditLog(auditID, mapEntry.getValue(), requestParams, mapEntry.getKey());
        }
    }   
    
    public JSONObject importAssemblyProductCSV(HashMap<String, Object> requestParams) throws AccountingException, IOException, SessionExpiredException, JSONException {
        JSONObject returnObj = new JSONObject();
        try {
            returnObj = saveAssemblyProductWithBOM(requestParams);      //SDP-11688
        } catch (Exception ex) {
            Logger.getLogger(Importproduct.class.getName()).log(Level.SEVERE, null, ex);
        }
        return returnObj;
    }
    
//    @Transactional(propagation = Propagation.REQUIRED)
    private JSONObject saveAssemblyProductWithBOM(HashMap<String, Object> requestParams) throws AccountingException, IOException, SessionExpiredException, JSONException, ServiceException, DataInvalidateException{
        JSONObject returnObj = new JSONObject();
        DefaultTransactionDefinition def = new DefaultTransactionDefinition();
        def.setName("import_Tx");
        def.setPropagationBehavior(TransactionDefinition.PROPAGATION_REQUIRED);
        TransactionStatus status = txnManager.getTransaction(def);
        boolean commitedEx = false;
        boolean issuccess = true;
        boolean isCurrencyColum = false;
        Product product = null;
        String prevProductCode = "";  //To Compare with new / next record in CSV / XLS
        String msg = "";
        String customfield = "";
        String fileName = null;
        double productInitialPurchasePrise = 0; // Product Initial Purchase Price     
        Date ondate = new Date();
        String productSalesPrice = ""; //Product Sales Price
        HashMap<String, Object> productMap = null;  //Product Hashmap
        KwlReturnObject productresult = null;
        FileInputStream fileInputStream = null;
        CsvReader csvReader = null;
        int total = 0, failed = 0;
        String companyid = requestParams.get("companyid").toString();
        String currencyId = requestParams.get("currencyId").toString();
        String userId = requestParams.get("userid").toString();
        SimpleDateFormat df = new SimpleDateFormat("MMMM d, yyyy hh:mm:ss aa");
        // DateFormat df = (DateFormat) requestParams.get("dateFormat");
        JSONObject jobj = new JSONObject();
        jobj = (JSONObject) requestParams.get("jobj");
        String masterPreference = requestParams.get("masterPreference").toString();
        String delimiterType = requestParams.get("delimiterType").toString();
        int limit = Constants.Transaction_Commit_Limit;
        int count = 1;
        boolean updateExistingRecordFlag = false;
        if (!StringUtil.isNullOrEmpty(requestParams.get("updateExistingRecordFlag").toString())) {
            updateExistingRecordFlag = Boolean.FALSE.parseBoolean(requestParams.get("updateExistingRecordFlag").toString());
        }
        String logId = null;
        try {
            KwlReturnObject jeresult = accountingHandlerDAOobj.getObject(User.class.getName(), userId);
            User user = (User) jeresult.getEntityList().get(0);                 
            String[] recarr = null;
            logId = addPendingImportLog(requestParams);
            Date newUserDate = new Date();
            String dateFormat = null, dateFormatId = requestParams.get("dateFormat").toString();
            if (!StringUtil.isNullOrEmpty(dateFormatId)) {
                KwlReturnObject kdfObj = accountingHandlerDAOobj.getObject(KWLDateFormat.class.getName(), dateFormatId);
                KWLDateFormat kdf = (KWLDateFormat) kdfObj.getEntityList().get(0);
                dateFormat = kdf != null ? kdf.getJavaForm() : null;
            }
            DateFormat df1 = new SimpleDateFormat(dateFormat);
            KwlReturnObject CompanyPrefResult = accountingHandlerDAOobj.getObject(CompanyAccountPreferences.class.getName(), companyid);
            CompanyAccountPreferences companyAccountPreferences = (CompanyAccountPreferences) CompanyPrefResult.getEntityList().get(0);
            Date bookBookBeginningDate=companyAccountPreferences.getBookBeginningFrom();
            KwlReturnObject custumObjresult = accountingHandlerDAOobj.getObject(Company.class.getName(), companyid);
            Company company1 = (Company) custumObjresult.getEntityList().get(0);
            if (company1.getCreator() != null) {
                newUserDate = authHandler.getUserNewDate(null, company1.getCreator().getTimeZone()!=null?company1.getCreator().getTimeZone().getDifference() : company1.getTimeZone().getDifference());
            }
            fileName = jobj.getString("filename");
            fileInputStream = new FileInputStream(jobj.getString("FilePath"));
            csvReader = new CsvReader(new InputStreamReader(fileInputStream), delimiterType);
            String record = "";
            int cnt = 0;
            ExtraCompanyPreferences extraPref = (ExtraCompanyPreferences) kwlCommonTablesDAOObj.getClassObject("com.krawler.common.admin.ExtraCompanyPreferences", companyid);
            boolean isCurrencyCode=extraPref.isCurrencyCode();
            boolean activateMRPModule=extraPref.isActivateMRPModule();
            JSONObject columnPrefJObj = null;
            if (!StringUtil.isNullOrEmpty(extraPref.getColumnPref())) {
                columnPrefJObj = new JSONObject((String) extraPref.getColumnPref());
            }
            StringBuilder failedRecords = new StringBuilder();

            HashMap<String, Integer> columnConfig = new HashMap<String, Integer>();
             Map<Integer, Frequency> frequencyMap = getCCFrequencyMap();
            JSONArray jSONArray = jobj.getJSONArray("resjson");
            for (int i = 0; i < jSONArray.length(); i++) {
                JSONObject jSONObject = jSONArray.getJSONObject(i);
                columnConfig.put(jSONObject.getString("dataindex"), jSONObject.getInt("csvindex"));
            }
            // the below line is commited due to not proparely showing header in error log file . ERP-11483
            // failedRecords.append(createCSVrecord(headArrayList.toArray()) + "\"Error Message\""); // failedRecords.append("\"Row No.\","+createCSVrecord(fileData)+"\"Error Message\"");
            HashMap currencyMap = getCurrencyMap(isCurrencyCode);
            Set<String> productIdSet=new HashSet<>();
            Map<String, String> importLogDetailsMap = new HashMap<String, String>();
            // To find duplicate record with respect to Product ID, BOM Code and BOM Product ID
            Set<String> uniqueKeySet=new HashSet<>();
            // To check and allow only one Default BOM Code for one Assembly Product   <Assembly Product ID, BOM Code>
            HashMap<String, String> defaultBOMCodeMap = new HashMap<String, String>();
            while (csvReader.readRecord()) {
                recarr = csvReader.getValues();
                if (cnt == 0) {
                    failedRecords.append(createCSVrecord(recarr)).append("\"Error Message\"");
                }
                if (cnt != 0) {
                    recarr = csvReader.getValues();

                    try {
//                        currencyId = currencyId;   //sessionHandlerImpl.getCurrencyID(request);

                        /*-------------------------------Sub-product Details (BOM)----------------------------------*/
                        /*If BOM Product ID OR Quantity is not available then Global Product Details will not save, */
                        //Build Of Material (BOM) Details
                        String bomProductID = "";
                        if (columnConfig.containsKey("bompid")) {
                            try {
                                bomProductID = recarr[(Integer) columnConfig.get("bompid")].replaceAll("\"", "").trim();
                                if (StringUtil.isNullOrEmpty(bomProductID)) {
                                    throw new AccountingException("BOM Product ID is not available");
                                }
                            } catch (ArrayIndexOutOfBoundsException ae) { //If user do not enter BOM % then default value ll be 100.
                                throw new AccountingException("BOM Product ID is not available");
                            }
                        } else {
                            throw new AccountingException("BOM Product ID column is not found");
                        }

                        //Get BOM Product Name
                        String bomProductName = "";
                        String bompid = ""; //Used to read Product Price.
                        Product bomproduct = getProductByProductName(companyid, bomProductID);
                        if (bomproduct != null) {
                            bomProductName = bomproduct.getName();
                            bompid = bomproduct.getID();
                        } else {
                            throw new AccountingException("Product Name is not found for " + bomProductID);
                        }

                        //Get BOM Product Description
                        String bomProductDesc = "";
                        if (bomproduct != null) {
                            bomProductDesc = bomproduct.getDescription();
                        } else {
                            throw new AccountingException("Product Description is not found for " + bomProductID);
                        }

                        //Get BOM Product Type
                        String bomProductType = "";
                        boolean isBomSerialActivated = false;
                        Producttype bomproducttype = getProductTypeByProductID(bomProductID);
                        if (bomproducttype != null) {
                            bomProductType = bomproducttype.getID();
                            isBomSerialActivated = bomproduct.isIsSerialForProduct();
                        } else {
                            throw new AccountingException("Product Type is not found for " + bomProductID);
                        }

                        //Get BOM Product Initial Purchase Price
                        double bomProductPurchasePrice = 0;
                        KwlReturnObject purchase = accProductObj.getProductPrice(bompid, true, null, "", ""); //True for Purchase Price, False for Sales Price
                        bomProductPurchasePrice = purchase.getEntityList().get(0) == null ? 0 : ((Double) purchase.getEntityList().get(0)).doubleValue();    //Converted into primitive data type

                        //Component Quantity, Actual Quantity, Total
                        String componentQuantity = "";
                        double compQuantity = 0;
                        String componentpercent = "";
                        double comppercent = 100;
                        double compactualQuantity = 0;
                        double comptotal = 0;
                        double recylequantity = 0;
                        double inventoryquantiy = 0;
                        double remainingquantity = 0;
                        
                        if (columnConfig.containsKey("bomquantity")) {
                            try {
                                componentQuantity = recarr[(Integer) columnConfig.get("bomquantity")].replaceAll("\"", "").trim();
                                compQuantity = Double.parseDouble(componentQuantity);
                                if (compQuantity != 0) {
                                    if (columnConfig.containsKey("bompercent")) {
                                        try {
                                            componentpercent = recarr[(Integer) columnConfig.get("bompercent")].replaceAll("\"", "").trim();

                                            comppercent = Double.parseDouble(componentpercent);
                                            if (comppercent > 100) {
                                                throw new AccountingException("BOM percentage should not be greater than 100%.");
                                            } else if(isBomSerialActivated && comppercent!=100){
                                                throw new AccountingException("Serial is activated for '"+bomProductID+"'. So BOM percentage should be 100%."); //ERP-26481
                                            }
                                            compactualQuantity = compQuantity * (comppercent / 100);
                                            comptotal = compQuantity * bomProductPurchasePrice * (comppercent / 100);
                                        } catch (NumberFormatException ne) {
                                            throw new AccountingException("Invalid BOM Component percent. It should be greater than zero");
                                        } catch (ArrayIndexOutOfBoundsException ae) {
                                            comppercent = 100;  //If user do not enter BOM % then default value ll be 100.
                                        }
                                    } else {    //Default Percentage
                                        compactualQuantity = compQuantity * 1; //componentpercent = 100
                                        comptotal = compQuantity * bomProductPurchasePrice * (comppercent / 100);
                                    }
                                } else {
                                    throw new AccountingException("Component Quantity should be greater than zero.");

                                }
                            } catch (NumberFormatException e) {
                                throw new AccountingException("Invalid BOM Quantity.");
                            } catch (ArrayIndexOutOfBoundsException ae) {
                                throw new AccountingException("Invalid BOM Quantity.");
                            }
                        }//Component Quantity

                        /*-------------------------------Sub-product Details (BOM)----------------------------------*/
                        //Get Product ID
                        String productID = "";
                        if (columnConfig.containsKey("pid")) {
                            productID = recarr[(Integer) columnConfig.get("pid")].replaceAll("\"", "").trim();
                            if (StringUtil.isNullOrEmpty(productID)) {
                                throw new AccountingException("Product ID is not available");
                            }
                        } else {
                            throw new AccountingException("Product ID column is not found");
                        }
                        
                        /*
                        * SDP-14522 - New 3 columns added - BOM Code, BOM Name and Is Default BOM Code.
                        */
                        String bomCode = "";
                        String bomName = "";
                        Boolean isDefaultBOM = false;
                        if(activateMRPModule){ // If MRP Module is activated
                            if (columnConfig.containsKey("bomCode")) {
                                bomCode = recarr[(Integer) columnConfig.get("bomCode")].replaceAll("\"", "").trim();
                                if (StringUtil.isNullOrEmpty(bomCode)) {
                                    throw new AccountingException("BOM Code is not available");
                                }
                            } else {
                                throw new AccountingException("BOM Code column is not found");
                            }
                            if (columnConfig.containsKey("bomName")) {
                                bomName = recarr[(Integer) columnConfig.get("bomName")].replaceAll("\"", "").trim();
                            }
                            if (columnConfig.containsKey("isDefaultBOM")) {
                                String isDefaultBOMStr = recarr[(Integer) columnConfig.get("isDefaultBOM")].replaceAll("\"", "").trim();
                                if (!StringUtil.isNullOrEmpty(isDefaultBOMStr)) {
                                    if (isDefaultBOMStr.equalsIgnoreCase("T") || isDefaultBOMStr.equalsIgnoreCase("TRUE")) {
                                        isDefaultBOM = true;
                                    } else if (isDefaultBOMStr.equalsIgnoreCase("F") || isDefaultBOMStr.equalsIgnoreCase("FALSE")) {
                                        isDefaultBOM = false;
                                    } else {
                                        throw new AccountingException("Format you entered for Is Default BOM is not correct. It should be like \"T\"/\"TRUE\" or \"F\"/\"FALSE\"");
                                    }
                                    if(isDefaultBOM){ // If Is Default BOM Code TRUE then check If Assembly Product already has one default BOM then show failure Else consider as First Default.
                                        if(defaultBOMCodeMap.containsKey(productID)){
                                            if(!defaultBOMCodeMap.get(productID).equalsIgnoreCase(bomCode)){
                                                throw new AccountingException("Only one Default BOM Code is allowed for one Assembly Product.");
                                            }
                                        } else {
                                            defaultBOMCodeMap.put(productID, bomCode);
                                        }
                                    }
                                }
                            } 
                        }
                        
                        //To avoid duplicate record with respect to Assembly Product ID, BOM Code and BOM Product ID
                        if(uniqueKeySet.contains(productID+bomCode+bomProductID)){
                            throw new AccountingException("Duplicate record found for Product ID, BOM Code and BOM Product ID.");
                        } else {
                            uniqueKeySet.add(productID+bomCode+bomProductID);
                        }
                        
                        /**
                         * while Importing Assembly product Validate "Input terms" line level terms data
                         */
                        List<String> inputDefaultTerms = new ArrayList<String>();
                        if (extraPref.getLineLevelTermFlag()==1 && columnConfig.containsKey("InputTax")) {
                            String temp = recarr[(Integer) columnConfig.get("InputTax")].replaceAll("\"", "").trim(); 
                            if (temp != null && !StringUtil.isNullOrEmpty(temp)) {
                               inputDefaultTerms.addAll(Arrays.asList(temp.split(","))); // Get Input terms seperated by coma from Import file
                               Map<String, Object> requestData = new HashMap<String, Object>();
                                requestData.put("companyid", requestParams.get("companyid").toString());
                                requestData.put("colData", temp);
                                requestData.put("isOutputTax", false);//ERP-29870
                                List<String> termsList = importDao.getLineLevelTermPresentByName(requestData);// Checking given input terms present in system or not
                                if (termsList.size() > 0) { 
                                    String invalidData = Arrays.toString(termsList.toArray());
                                    throw new AccountingException(" Input Tax column Data is not valid. Input tax should be present in system: " + invalidData);
                                }
                            }
                        }
                        /**
                         * while Importing Assembly product Validate "Output terms" line level terms data
                         */
                        List<String> outputDefaultTerms = new ArrayList<String>();
                        if (extraPref.getLineLevelTermFlag()==1 && columnConfig.containsKey("OutputTax")) {
                            String temp = recarr[(Integer) columnConfig.get("OutputTax")].replaceAll("\"", "").trim(); // Get Output terms seperated by coma from Import file
                            if (temp != null && !StringUtil.isNullOrEmpty(temp)) {
                             outputDefaultTerms.addAll(Arrays.asList(temp.split(","))); // Get Output terms seperated by coma from Import file
                             Map<String, Object> requestData = new HashMap<String, Object>();
                                requestData.put("companyid", requestParams.get("companyid").toString());
                                requestData.put("colData", temp);
                                requestData.put("isOutputTax", true);//ERP-29870
                                List<String> termsList = importDao.getLineLevelTermPresentByName(requestData);  // Checking given Output terms present in system or not
                                if (termsList.size() > 0) {
                                    String invalidData = Arrays.toString(termsList.toArray());
                                    throw new AccountingException(" Output Tax column Data is not valid. Output tax should be present in system: " + invalidData);
                                }
                            }
                        }
                        if (!prevProductCode.equalsIgnoreCase(productID)) { //if Multiple BOM Components are associated with Single Product then we ll not hold global data again for same product
                            // for saving BOM initial purchase price
//                            if (!prevProductCode.equalsIgnoreCase("") && productInitialPurchasePrise > 0 && product != null) {
//                                if (productInitialPurchasePrise > 0) {
//                                    HashMap<String, Object> initialPurchasePriceMap = new HashMap<String, Object>();
//                                    initialPurchasePriceMap.put("productid", product.getID());
//                                    initialPurchasePriceMap.put("companyid", companyid);
//                                    initialPurchasePriceMap.put("carryin", true);
//                                    initialPurchasePriceMap.put("price", productInitialPurchasePrise);
//                                    initialPurchasePriceMap.put("applydate", ondate);
//                                    initialPurchasePriceMap.put("affecteduser", "-1");
//                                    initialPurchasePriceMap.put("currencyid", currencyId);
//                                    accProductObj.addPriceList(initialPurchasePriceMap);
//                                }
//                            }

                            productInitialPurchasePrise = 0;
                            prevProductCode = productID;
                            //Get Product Type 
                            String productTypeID = "";
                            if (columnConfig.containsKey("type")) {
                                String productTypeName = recarr[(Integer) columnConfig.get("type")].replaceAll("\"", "").trim();
                                if (StringUtil.isNullOrEmpty(productTypeName)) {
                                    prevProductCode = "";
                                    throw new AccountingException("Product Type is not available");
                                }

                                Producttype producttype = getProductTypeByName(productTypeName);
                                if (producttype != null) {
                                    productTypeID = producttype.getID();
                                } else {
                                    prevProductCode = "";
                                    throw new AccountingException("Product Type is not found for " + productTypeName);
                                }
                            } else {
                                throw new AccountingException("Product Type column is not found.");
                            }

                            //Get Product Name
                            String productName = "";
                            if (columnConfig.containsKey("productname")) {
                                productName = recarr[(Integer) columnConfig.get("productname")].replaceAll("\"", "").trim();
                                if (StringUtil.isNullOrEmpty(productName)) {
                                    prevProductCode = "";
                                    throw new AccountingException("Product Name is not available");
                                }
                            } else {
                                throw new AccountingException("Product Name column is not found.");
                            }

                            //Get Product Description
                            String productDescription = "";
                            if (columnConfig.containsKey("desc")) {
                                productDescription = recarr[(Integer) columnConfig.get("desc")].replaceAll("\"", "").trim();
                            }
                            String additionaldesc = "";
                            if (columnConfig.containsKey("additionaldesc")) {
                                String temp = recarr[(Integer) columnConfig.get("additionaldesc")].replaceAll("\"", "").trim();
                                if (!StringUtil.isNullOrEmpty(temp)) {
                                    additionaldesc = temp;
                                }
                            }
                            
                            /*
                            * Check for Stock UOM, Casing UOM, Inner UOM.
                            * Casing Uom, Inner Uom and Stock Uom must be different.
                            */ 
                            String stockUOM = "", casingUOM = "", innerUOM = "";
                            if(columnConfig.containsKey("uomname") && columnConfig.get("uomname")!=null){
                                stockUOM = recarr[(Integer) columnConfig.get("uomname")].replaceAll("\"", "").trim();
                            }
                            if(columnConfig.containsKey("casinguom") && columnConfig.get("casinguom")!=null){
                                casingUOM = recarr[(Integer) columnConfig.get("casinguom")].replaceAll("\"", "").trim();
                            }
                            if(columnConfig.containsKey("inneruom") && columnConfig.get("inneruom")!=null){
                                innerUOM = recarr[(Integer) columnConfig.get("inneruom")].replaceAll("\"", "").trim();
                            }
                            if((!StringUtil.isNullOrEmptyWithTrim(casingUOM) && casingUOM.equalsIgnoreCase(innerUOM)) || 
                            (!StringUtil.isNullOrEmptyWithTrim(casingUOM) && casingUOM.equalsIgnoreCase(stockUOM)) ||
                            (!StringUtil.isNullOrEmptyWithTrim(innerUOM) && innerUOM.equalsIgnoreCase(stockUOM))){
                                throw new AccountingException("Casing Uom, Inner Uom and Stock Uom cannot be same.");
                            }
                            
                            //Get Product UOM ID
                            String productUOMID = "";
                            UnitOfMeasure uom = null;
                            if (columnConfig.containsKey("uomname")) {
                                String productUOMName = recarr[(Integer) columnConfig.get("uomname")].replaceAll("\"", "").trim();
                                if (!StringUtil.isNullOrEmpty(productUOMName)) {
                                    uom = getUOMByName(productUOMName, companyid);
                                    if (uom != null) {
                                        productUOMID = uom.getID();
                                    } else {
                                        if (masterPreference.equalsIgnoreCase("2")) {
                                            HashMap<String, Object> uomMap = new HashMap<String, Object>();
                                            uomMap.put("uomname", StringUtil.DecodeText(productUOMName));
                                            uomMap.put("uomtype", StringUtil.DecodeText(productUOMName));
                                            uomMap.put("precision", 0);
                                            uomMap.put("companyid", companyid);

                                            KwlReturnObject uomresult = accUomObj.addUoM(uomMap);
                                            uom = (UnitOfMeasure) uomresult.getEntityList().get(0);
                                            productUOMID = uom.getID();
                                        } else {
//                                            if (masterPreference.equalsIgnoreCase("1")) {
//                                                productUOMID = "";
//                                            } else {
                                                prevProductCode = "";
                                                throw new AccountingException("Product Stock Unit Of Measure is not found for " + productUOMName);
//                                            }
                                        }
                                    }
                                } else {
//                                    if (masterPreference.equalsIgnoreCase("1")) {
//                                        productUOMID = "";
//                                    } else {
                                        if (productTypeID.equals(Producttype.ASSEMBLY)) {
                                            productUOMID = "";
                                        } else {
                                            prevProductCode = "";
                                            throw new AccountingException("Product Stock Unit Of Measure is not available");
                                        }
//                                    }
                                }
                            } else {
                                throw new AccountingException("Product Stock UOM column is not found.");
                            }

                            //Get Product Casing UOM ID
                            String casingUoMID = "";
                            UnitOfMeasure casinguom = null;
                            if (columnConfig.containsKey("casinguom")) {
                                String productUOMName = recarr[(Integer) columnConfig.get("casinguom")].replaceAll("\"", "").trim();
                                if (!StringUtil.isNullOrEmpty(productUOMName)) {
                                    casinguom = getUOMByName(productUOMName, companyid);
                                    if (casinguom != null) {
                                        casingUoMID = casinguom.getID();
                                    } else {
                                        if (masterPreference.equalsIgnoreCase("2")) {
                                            HashMap<String, Object> uomMap = new HashMap<String, Object>();
                                            uomMap.put("uomname",StringUtil.DecodeText(productUOMName));
                                            uomMap.put("uomtype", StringUtil.DecodeText(productUOMName));
                                            uomMap.put("precision", 0);
                                            uomMap.put("companyid", companyid);
                                            KwlReturnObject uomresult = accUomObj.addUoM(uomMap);
                                            casinguom = (UnitOfMeasure) uomresult.getEntityList().get(0);
                                            casingUoMID = casinguom.getID();
                                        } else {
                                            if (masterPreference.equalsIgnoreCase("1")) {
                                                casingUoMID = "";
                                            } else {
                                                prevProductCode = "";
                                                throw new AccountingException("Product Unit Of Measure is not found for " + productUOMName);
                                            }
                                        }
                                    }
                                } else {
                                    if (masterPreference.equalsIgnoreCase("1")) {
                                        casingUoMID = "";
                                    } else {
                                        if (productTypeID.equals(Producttype.ASSEMBLY)) {
                                            casingUoMID = "";
                                        } else {
                                            prevProductCode = "";
                                            throw new AccountingException("Product  Casing Unit Of Measure is not available");
                                        }
                                    }
                                }
                            } else {
                                casingUoMID = "";
                            }

                            //Get Product Inner UOM ID
                            String innerUoMID = "";
                            UnitOfMeasure inneruom = null;
                            if (columnConfig.containsKey("inneruom")) {
                                String productUOMName = recarr[(Integer) columnConfig.get("inneruom")].replaceAll("\"", "").trim();
                                if (!StringUtil.isNullOrEmpty(productUOMName)) {
                                    inneruom = getUOMByName(productUOMName, companyid);
                                    if (inneruom != null) {
                                        innerUoMID = inneruom.getID();
                                    } else {
                                        if (masterPreference.equalsIgnoreCase("2")) {
                                            HashMap<String, Object> uomMap = new HashMap<String, Object>();
                                            uomMap.put("uomname", StringUtil.DecodeText(productUOMName));
                                            uomMap.put("uomtype", StringUtil.DecodeText(productUOMName));
                                            uomMap.put("precision", 0);
                                            uomMap.put("companyid", companyid);

                                            KwlReturnObject uomresult = accUomObj.addUoM(uomMap);
                                            inneruom = (UnitOfMeasure) uomresult.getEntityList().get(0);
                                            innerUoMID = inneruom.getID();
                                        } else {
                                            if (masterPreference.equalsIgnoreCase("1")) {
                                                innerUoMID = "";
                                            } else {
                                                prevProductCode = "";
                                                throw new AccountingException("Product Inner Unit Of Measure is not found for " + productUOMName);
                                            }
                                        }
                                    }
                                } else {
                                    if (masterPreference.equalsIgnoreCase("1")) {
                                        innerUoMID = "";
                                    } else {
                                        if (productTypeID.equals(Producttype.ASSEMBLY)) {
                                            innerUoMID = "";
                                        } else {
                                            prevProductCode = "";
                                            throw new AccountingException("Product Inner Unit Of Measure is not available");
                                        }
                                    }
                                }
                            } else {
                                innerUoMID = "";
                            }

                            //Get Product Purchase UOM ID
                            String PurchaseUOMID = "";
                            UnitOfMeasure purchaseruom = null;
                            if (columnConfig.containsKey("purchaseuom")) {
                                String productUOMName = recarr[(Integer) columnConfig.get("purchaseuom")].replaceAll("\"", "").trim();
                                if (!StringUtil.isNullOrEmpty(productUOMName)) {
                                    purchaseruom = getUOMByName(productUOMName, companyid);
                                    if (purchaseruom != null) {
                                        PurchaseUOMID = purchaseruom.getID();
                                    } else {
                                        if (masterPreference.equalsIgnoreCase("2")) {
                                            HashMap<String, Object> uomMap = new HashMap<String, Object>();
                                            uomMap.put("uomname", StringUtil.DecodeText(productUOMName));
                                            uomMap.put("uomtype", StringUtil.DecodeText(productUOMName));
                                            uomMap.put("precision", 0);
                                            uomMap.put("companyid", companyid);

                                            KwlReturnObject uomresult = accUomObj.addUoM(uomMap);
                                            purchaseruom = (UnitOfMeasure) uomresult.getEntityList().get(0);
                                            PurchaseUOMID = purchaseruom.getID();
                                        } else {
                                            if (masterPreference.equalsIgnoreCase("1")) {
                                                PurchaseUOMID = "";
                                            } else {
                                                prevProductCode = "";
                                                throw new AccountingException("Product Purchase Unit Of Measure is not found for " + productUOMName);
                                            }
                                        }
                                    }
                                } else {
                                    if (masterPreference.equalsIgnoreCase("1")) {
                                        PurchaseUOMID = "";
                                    } else {
                                        if (productTypeID.equals(Producttype.ASSEMBLY)) {
                                            PurchaseUOMID = "";
                                        } else {
                                            prevProductCode = "";
                                            throw new AccountingException("Product Purchase Unit Of Measure is not available");
                                        }
                                    }
                                }
                            } else {
                                PurchaseUOMID = "";
                            }

                            //Get Product Sales UOM ID
                            String SalesUOMID = "";
                            UnitOfMeasure salesuom = null;
                            if (columnConfig.containsKey("salesuom")) {
                                String productUOMName = recarr[(Integer) columnConfig.get("salesuom")].replaceAll("\"", "").trim();
                                if (!StringUtil.isNullOrEmpty(productUOMName)) {
                                    salesuom = getUOMByName(productUOMName, companyid);
                                    if (salesuom != null) {
                                        SalesUOMID = salesuom.getID();
                                    } else {
                                        if (masterPreference.equalsIgnoreCase("2")) {
                                            HashMap<String, Object> uomMap = new HashMap<String, Object>();
                                            uomMap.put("uomname", StringUtil.DecodeText(productUOMName));
                                            uomMap.put("uomtype", StringUtil.DecodeText(productUOMName));
                                            uomMap.put("precision", 0);
                                            uomMap.put("companyid", companyid);

                                            KwlReturnObject uomresult = accUomObj.addUoM(uomMap);
                                            salesuom = (UnitOfMeasure) uomresult.getEntityList().get(0);
                                            SalesUOMID = salesuom.getID();
                                        } else {
                                            if (masterPreference.equalsIgnoreCase("1")) {
                                                SalesUOMID = "";
                                            } else {
                                                prevProductCode = "";
                                                throw new AccountingException("Product Sales Unit Of Measure is not found for " + productUOMName);
                                            }
                                        }
                                    }
                                } else {
                                    if (masterPreference.equalsIgnoreCase("1")) {
                                        SalesUOMID = "";
                                    } else {
                                        if (productTypeID.equals(Producttype.ASSEMBLY)) {
                                            SalesUOMID = "";
                                        } else {
                                            prevProductCode = "";
                                            throw new AccountingException("Product Sales Unit Of Measure is not available");
                                        }
                                    }
                                }
                            } else {
                                SalesUOMID = "";
                            }

                            //Get Casing UOM Value
                            String casinguomvalue = "1";
                            if (columnConfig.containsKey("casinguom_value")) {
                                casinguomvalue = recarr[(Integer) columnConfig.get("casinguom_value")].replaceAll("\"", "").trim();
                            }

                            //Get Inner UOM Value
                            String inneruomvalue = "1";
                            if (columnConfig.containsKey("inneruom_value")) {
                                inneruomvalue = recarr[(Integer) columnConfig.get("inneruom_value")].replaceAll("\"", "").trim();
                            }

                            //Get Stock UOM Value
                            String stcokuomvalue = "1";
                            if (columnConfig.containsKey("stockuom_value")) {
                                stcokuomvalue = recarr[(Integer) columnConfig.get("stockuom_value")].replaceAll("\"", "").trim();
                            }
                            
                            String costOfGoodsSoldAccountID = "";
                            if (columnConfig.containsKey("cogsaccountid")) {
                                if (!productTypeID.equals(Producttype.SERVICE)) {// If product is non service type then these values needed to validate and save 
                                    if (extraPref.isActivateMRPModule() || companyAccountPreferences.getInventoryValuationType() == 1) {// This field need only when mrp activated or inventory valuation is perpetual. In this case oit is mandatory
                                       String cogsAccountName = recarr[(Integer) columnConfig.get("cogsaccountid")].replaceAll("\"", "").trim();

                                        if (!StringUtil.isNullOrEmpty(cogsAccountName)) {
                                            Account cogsAccount = null;
                                            KwlReturnObject retObj = accAccountDAOobj.getAccountFromName(companyid, cogsAccountName);
                                            if (retObj != null && !retObj.getEntityList().isEmpty()) {
                                                cogsAccount = (Account) retObj.getEntityList().get(0);
                                            }

                                            if (cogsAccount != null) {
                                                costOfGoodsSoldAccountID = cogsAccount.getID();
                                            } else {
                                                throw new AccountingException("Cost of Goods Sold Account is not found for " + cogsAccountName + ".");
                                            }
                                        } else {
                                            throw new AccountingException("Data not found for Cost of Goods Sold Account.");
                                        }
                                    }
                                }
                            } else if (!productTypeID.equals(Producttype.SERVICE) && (extraPref.isActivateMRPModule() || companyAccountPreferences.getInventoryValuationType() == 1)) {
                                if (!updateExistingRecordFlag) {
                                    throw new AccountingException("Cost of Goods Sold Account column is not found.");
                                }
                            }

                            String inventoryAccountID = "";
                            if (columnConfig.containsKey("inventoryaccountid")) {
                                if (!productTypeID.equals(Producttype.SERVICE)) {// If product is non service type then these values needed to validate and save 
                                    if (extraPref.isActivateMRPModule() || companyAccountPreferences.getInventoryValuationType() == 1) {// This field need only when mrp activated or inventory valuation is perpetual. In this case oit is mandatory
                                        String invAccountName = recarr[(Integer) columnConfig.get("inventoryaccountid")].replaceAll("\"", "").trim();

                                        if (!StringUtil.isNullOrEmpty(invAccountName)) {
                                            Account invAccount = null;
                                            KwlReturnObject retObj = accAccountDAOobj.getAccountFromName(companyid, invAccountName);
                                            if (retObj != null && !retObj.getEntityList().isEmpty()) {
                                                invAccount = (Account) retObj.getEntityList().get(0);
                                            }

                                            if (invAccount != null) {
                                                inventoryAccountID = invAccount.getID();
                                            } else {
                                                throw new AccountingException("Inventory Account is not found for " + invAccountName + ".");
                                            }
                                        } else {
                                            throw new AccountingException("Data not found for Inventory Account.");
                                        }
                                    }
                                }
                            } else if (!productTypeID.equals(Producttype.SERVICE) && (extraPref.isActivateMRPModule() || companyAccountPreferences.getInventoryValuationType() == 1)) {
                                if (!updateExistingRecordFlag) {
                                    throw new AccountingException("Inventory Account column is not found.");
                                }
                            }

                            String stockAdjustmentAccountID = "";
                            if (columnConfig.containsKey("stockadjustmentaccountid")) {
                                if (!productTypeID.equals(Producttype.SERVICE)) {// If product is non service type then these values needed to validate and save 
                                    if (extraPref.isActivateMRPModule() || companyAccountPreferences.getInventoryValuationType() == 1) {// This field need only when mrp activated or inventory valuation is perpetual. In this case oit is mandatory
                                        String stockAdjAccountName = recarr[(Integer) columnConfig.get("stockadjustmentaccountid")].replaceAll("\"", "").trim();

                                        if (!StringUtil.isNullOrEmpty(stockAdjAccountName)) {
                                            Account stockAdjAccount = null;
                                            KwlReturnObject retObj = accAccountDAOobj.getAccountFromName(companyid, stockAdjAccountName);
                                            if (retObj != null && !retObj.getEntityList().isEmpty()) {
                                                stockAdjAccount = (Account) retObj.getEntityList().get(0);
                                            }

                                            if (stockAdjAccount != null) {
                                                stockAdjustmentAccountID = stockAdjAccount.getID();
                                            } else {
                                                throw new AccountingException("Stock Adjustment Account is not found for " + stockAdjAccountName + ".");
                                            }
                                        } else {
                                            throw new AccountingException("Data not found for Stock Adjustment Account.");
                                        }
                                    }
                                }
                            } else if (!productTypeID.equals(Producttype.SERVICE) && (extraPref.isActivateMRPModule() || companyAccountPreferences.getInventoryValuationType() == 1) && !updateExistingRecordFlag) {
                                throw new AccountingException("Stock Adjustment Account column is not found.");
                            }

                            //Product Reorder Level
                            String productReorderLevel = "";
                            if (columnConfig.containsKey("reorderlevel")) {
                                productReorderLevel = recarr[(Integer) columnConfig.get("reorderlevel")].replaceAll("\"", "").trim();
                                if (StringUtil.isNullOrEmpty(productReorderLevel)) {
                                    if (masterPreference.equalsIgnoreCase("1")) {
                                        productReorderLevel = "0";
                                    } else {
                                        if (productTypeID.equals(Producttype.ASSEMBLY)) {
                                            productReorderLevel = "0";
                                        } else {
                                            prevProductCode = "";
                                            throw new AccountingException("Product Reorder Level is not available");
                                        }
                                    }
                                }
                            } else {
                                productReorderLevel = "0";
                            }

                            //Product Reorder Quantity
                            String productReorderQuantity = "";
                            if (columnConfig.containsKey("reorderquantity")) {
                                productReorderQuantity = recarr[(Integer) columnConfig.get("reorderquantity")].replaceAll("\"", "").trim();
                                if (StringUtil.isNullOrEmpty(productReorderQuantity)) {
                                    if (masterPreference.equalsIgnoreCase("1")) {
                                        productReorderQuantity = "0";
                                    } else {
                                        if (productTypeID.equals(Producttype.ASSEMBLY)) {
                                            productReorderQuantity = "0";
                                        } else {
                                            prevProductCode = "";
                                            throw new AccountingException("Product Reorder Quantity is not available");
                                        }
                                    }
                                }
                            } else {
                                productReorderQuantity = "0";
                            }

                            //Product Warranty Period
                            String productWarrantyPeriod = "";
                            if (columnConfig.containsKey("warrantyperiod")) {
                                productWarrantyPeriod = recarr[(Integer) columnConfig.get("warrantyperiod")].replaceAll("\"", "").trim();
                                if (StringUtil.isNullOrEmpty(productWarrantyPeriod)) {
                                    if (masterPreference.equalsIgnoreCase("1")) {
                                        productWarrantyPeriod = "0";
                                    } else {
                                        if (productTypeID.equals(Producttype.ASSEMBLY)) {
                                            productWarrantyPeriod = "0";
                                        } else {
                                            prevProductCode = "";
                                            throw new AccountingException("Product Warranty Period is not available");
                                        }
                                    }
                                }
                            } else {
                                productWarrantyPeriod = "0";
                            }

                            //Product Sales Warranty Period
                            String productSalesWarrantyPeriod = "";
                            if (columnConfig.containsKey("warrantyperiodsal")) {
                                productSalesWarrantyPeriod = recarr[(Integer) columnConfig.get("warrantyperiodsal")].replaceAll("\"", "").trim();
                                if (StringUtil.isNullOrEmpty(productSalesWarrantyPeriod)) {
                                    if (masterPreference.equalsIgnoreCase("1")) {
                                        productSalesWarrantyPeriod = "0";
                                    } else {
                                        if (productTypeID.equals(Producttype.ASSEMBLY)) {
                                            productSalesWarrantyPeriod = "0";
                                        } else {
                                            prevProductCode = "";
                                            throw new AccountingException("Product Sales Warranty Period is not available");
                                        }
                                    }
                                }
                            } else {
                                productSalesWarrantyPeriod = "0";
                            }

                            //Product Lead Time
                            String productLeadTime = "";
                            if (columnConfig.containsKey("leadtime")) {
                                productLeadTime = recarr[(Integer) columnConfig.get("leadtime")].replaceAll("\"", "").trim();
                                if (StringUtil.isNullOrEmpty(productLeadTime)) {
                                    if (masterPreference.equalsIgnoreCase("1")) {
                                        productLeadTime = "0";
                                    } else {
                                        if (productTypeID.equals(Producttype.ASSEMBLY)) {
                                            productLeadTime = "0";
                                        } else {
                                            prevProductCode = "";
                                            throw new AccountingException("Product Lead Time is not available");
                                        }
                                    }
                                } else {
                                    if (Integer.parseInt(productLeadTime) > 365) {
                                        throw new AccountingException("Product Lead Time should not be greater than 365");
                                    } else if (Integer.parseInt(productLeadTime) < 0) {
                                        throw new AccountingException("Product Lead Time should not be less than 0");
                                    }
                                }
                            } else {
                                productLeadTime = "0";
                            }

                            String productweight = "";
                            if (columnConfig.containsKey("productweight")) {
                                productweight = recarr[(Integer) columnConfig.get("productweight")].replaceAll("\"", "").trim();
                                if (StringUtil.isNullOrEmpty(productweight)) {
                                    if (masterPreference.equalsIgnoreCase("1")) {
                                        productweight = "0";
                                    } else {
                                        if (productTypeID.equals(Producttype.ASSEMBLY)) {
                                            productweight = "0";
                                        } else {
                                            prevProductCode = "";
                                            throw new AccountingException("This is not an Assembly Product");
                                        }
                                    }
                                } else {
                                    if (Double.parseDouble(productweight) <= -1) {
                                        throw new AccountingException("Product Weight should not be less than zero");
                                    }
                                }
                            } else {
                                productweight = "0";
                            }

                            //Cycle Count Interval
                            String productCycleCountInterval = "";
                            if (columnConfig.containsKey("ccountinterval")) {
                                productCycleCountInterval = recarr[(Integer) columnConfig.get("ccountinterval")].replaceAll("\"", "").trim();
                                if (StringUtil.isNullOrEmpty(productCycleCountInterval)) {
                                    if (masterPreference.equalsIgnoreCase("1")) {
                                        productCycleCountInterval = "1";
                                    } else {
                                        if (productTypeID.equals(Producttype.ASSEMBLY)) {
                                            productCycleCountInterval = "1";
                                        } else {
                                            prevProductCode = "";
                                            throw new AccountingException("Product Cycle Count Interval is not available");
                                        }
                                    }
                                }
                            } else {
                                productCycleCountInterval = "1";
                            }

                            //Cycle Count Tolerance
                            String productCycleCountTolerance = "";
                            if (columnConfig.containsKey("ccounttolerance")) {
                                productCycleCountTolerance = recarr[(Integer) columnConfig.get("ccounttolerance")].replaceAll("\"", "").trim();
                                if (StringUtil.isNullOrEmpty(productCycleCountTolerance)) {
                                    if (masterPreference.equalsIgnoreCase("1")) {
                                        productCycleCountTolerance = "0";
                                    } else {
                                        if (productTypeID.equals(Producttype.ASSEMBLY)) {
                                            productCycleCountTolerance = "0";
                                        } else {
                                            prevProductCode = "";
                                            throw new AccountingException("Product Cycle Count Tolerance is not available");
                                        }
                                    }
                                }
                            } else {
                                productCycleCountTolerance = "0";
                            }
                            
                            String landingcostcategoryids = "";
                            if (columnConfig.containsKey("landingcostcategory")) {
                                String landingcostcategory = recarr[(Integer) columnConfig.get("landingcostcategory")].replaceAll("\"", "").trim();
                                if (!StringUtil.isNullOrEmpty(landingcostcategory)) {
                                    String[] categorys = landingcostcategory.split(",");
                                    HashMap params = null;
                                    if (categorys.length > 0) {
                                        params = new HashMap<String, Object>();
                                        params.put(Constants.companyKey, companyid);
                                    }
                                    for (int i = 0; i < categorys.length; i++) {
                                        params.put("lccname", categorys[i].trim());
                                        KwlReturnObject retObj = accMasterItemsDAOobj.getMasterItemFromLandingCostCategory(params);
                                        if (retObj != null && !retObj.getEntityList().isEmpty() && retObj.getEntityList().get(0) != null) {
                                            LandingCostCategory lcc = (LandingCostCategory) retObj.getEntityList().get(0);
                                            if (lcc.getId() != null) {
                                                if (i < categorys.length - 1) {
                                                    landingcostcategoryids += lcc.getId() + ",";
                                                } else {
                                                    landingcostcategoryids += lcc.getId();
                                                }
                                            } else {
                                                landingcostcategoryids = "";
                                                throw new AccountingException("Landed Cost Category " + categorys[i] + " does not present.");
                                            }
                                        } else {
                                            landingcostcategoryids = "";
                                            throw new AccountingException("Landed Cost Category " + categorys[i] + " does not present.");
                                        }
                                    }
                                }
                            }

                            //Parent Product UUID
                            String parentProductUUID = "";
                            if (columnConfig.containsKey("parentid")) {
                                String parentProductID = recarr[(Integer) columnConfig.get("parentid")].replaceAll("\"", "").trim();
                                if (!StringUtil.isNullOrEmpty(parentProductID)) {
                                    Product parentProduct = getProductByProductID(parentProductID, companyid);
                                    if (parentProduct != null) {
                                        parentProductUUID = parentProduct.getID();
                                    } else {
                                        if (masterPreference.equalsIgnoreCase("1")) {
                                            parentProductUUID = null;
                                        } else {
                                            prevProductCode = "";
                                            throw new AccountingException("Parent Product is not found for " + parentProductID);
                                        }
                                    }
                                } else {
                                    if (masterPreference.equalsIgnoreCase("1")) {
                                        parentProductUUID = null;
                                    } else {
                                        prevProductCode = "";
                                        throw new AccountingException("Parent Product is not available");
                                    }
                                }
                            } else {
                                parentProductUUID = null;
                            }

                            //Product Sales Account ID
                            String productSalesAccId = "";
                            if (columnConfig.containsKey("salesaccountname")) {
                                String productSalesAccountName = recarr[(Integer) columnConfig.get("salesaccountname")].replaceAll("\"", "").trim();
                                if (!StringUtil.isNullOrEmpty(productSalesAccountName)) {
                                    Account salesAccount = getAccountByName(productSalesAccountName, companyid);
                                    if (salesAccount != null) {
                                        productSalesAccId = salesAccount.getID();
                                    } else {
                                        prevProductCode = "";
                                        throw new AccountingException("Product Sales Account is not found for " + productSalesAccountName);
                                    }
                                } else {
                                    prevProductCode = "";
                                    throw new AccountingException("Product Sales Account is not available");
                                }
                            } else {
                                throw new AccountingException("Product Sales Account column is not found.");
                            }

                            //Product Sales Account Return ID
                            String productSalesReturnAccId = "";
                            if (columnConfig.containsKey("salesretaccountname")) {
                                String productSalesReturnAccountName = recarr[(Integer) columnConfig.get("salesretaccountname")].replaceAll("\"", "").trim();
                                if (!StringUtil.isNullOrEmpty(productSalesReturnAccountName)) {
                                    Account salesReturnAccount = getAccountByName(productSalesReturnAccountName, companyid);
                                    if (salesReturnAccount != null) {
                                        productSalesReturnAccId = salesReturnAccount.getID();
                                    } else {
                                        prevProductCode = "";
                                        throw new AccountingException("Product Sales Return Account is not found for " + productSalesReturnAccountName);
                                    }
                                } else {
                                    prevProductCode = "";
                                    throw new AccountingException("Product Sales Return Account is not available");
                                }
                            } else {
                                throw new AccountingException("Product Sales Return Account column is not found.");
                            }

                            //Vendor Details
                            String productPreferedVendorID = "";
                            if (columnConfig.containsKey("vendornameid")) {
                                String productPreferedVendorName = recarr[(Integer) columnConfig.get("vendornameid")].replaceAll("\"", "").trim();
                                if (!StringUtil.isNullOrEmpty(productPreferedVendorName)) {
                                    Vendor vendor = getVendorByName(productPreferedVendorName, companyid);
                                    if (vendor != null) {
                                        productPreferedVendorID = vendor.getID();
                                    } else {
                                        if (masterPreference.equalsIgnoreCase("1")) {
                                            productPreferedVendorID = null;
                                        } else {
                                            prevProductCode = "";
                                            throw new AccountingException("Prefered Vendor is not found for " + productPreferedVendorName);
                                        }
                                    }
                                } else {
                                    if (masterPreference.equalsIgnoreCase("1")) {
                                        productPreferedVendorID = null;
                                    } else {
                                        if (productTypeID.equals(Producttype.ASSEMBLY)) {
                                            productPreferedVendorID = null;
                                        } else {
                                            prevProductCode = "";
                                            throw new AccountingException("Prefered Vendor is not available");
                                        }
                                    }
                                }
                            } else {
                                productPreferedVendorID = null;
                            }

                            //Product Purchase Account ID
                            String productPurchaseAccId = "";
                            if (columnConfig.containsKey("purchaseaccountname")) {
                                String productPurchaseAccountName = recarr[(Integer) columnConfig.get("purchaseaccountname")].replaceAll("\"", "").trim();
                                if (!StringUtil.isNullOrEmpty(productPurchaseAccountName)) {
                                    Account purchaseAccount = getAccountByName(productPurchaseAccountName, companyid);
                                    if (purchaseAccount != null) {
                                        productPurchaseAccId = purchaseAccount.getID();
                                    } else {
                                        prevProductCode = "";
                                        throw new AccountingException("Product Purchase Account is not found for " + productPurchaseAccountName);
                                    }
                                } else {
                                    prevProductCode = "";
                                    throw new AccountingException("Product Purchase Account is not available");
                                }
                            } else {
                                throw new AccountingException("Product Purchase Account column is not found.");
                            }

                            //Product Purchase Return Account ID
                            String productPurchaseReturnAccId = "";
                            if (columnConfig.containsKey("purchaseretaccountname")) {
                                String productPurchaseReturnAccountName = recarr[(Integer) columnConfig.get("purchaseretaccountname")].replaceAll("\"", "").trim();
                                if (!StringUtil.isNullOrEmpty(productPurchaseReturnAccountName)) {
                                    Account purchaseReturnAccount = getAccountByName(productPurchaseReturnAccountName, companyid);
                                    if (purchaseReturnAccount != null) {
                                        productPurchaseReturnAccId = purchaseReturnAccount.getID();
                                    } else {
                                        prevProductCode = "";
                                        throw new AccountingException("Product Purchase Return Account is not found for " + productPurchaseReturnAccountName);
                                    }
                                } else {
                                    prevProductCode = "";
                                    throw new AccountingException("Product Purchase Return Account is not available");
                                }
                            } else {
                                throw new AccountingException("Product Purchase Return Account column is not found.");
                            }

                            //Product Initial Quantity   
                            Double productInitialQuantity = 0.0;
                            if (columnConfig.containsKey("initialquantity")) {
                                String productInitialQuantityStr = recarr[(Integer) columnConfig.get("initialquantity")].replaceAll("\"", "").trim();
                                if (!StringUtil.isNullOrEmpty(productInitialQuantityStr)) {
                                    productInitialQuantity = Double.parseDouble(productInitialQuantityStr);
                                } else {
                                    if (masterPreference.equalsIgnoreCase("1")) {
                                        productInitialQuantity = 0.0;
                                    } else {
                                        if (productTypeID.equals(Producttype.ASSEMBLY)) {
                                            productInitialQuantity = 0.0;
                                        } else {
                                            prevProductCode = "";
                                            throw new AccountingException("Product Initial Quantity is not available");
                                        }
                                    }
                                }
                            } else {
                                productInitialQuantity = 0.0;
                            }

                            if (columnConfig.containsKey("initialsalesprice")) {
                                productSalesPrice = recarr[(Integer) columnConfig.get("initialsalesprice")].replaceAll("\"", "").trim();
                                if (StringUtil.isNullOrEmpty(productSalesPrice)) {
                                    if (masterPreference.equalsIgnoreCase("1")) {
                                        productSalesPrice = "";
                                    } else {
                                        prevProductCode = "";
                                        throw new AccountingException("Product Sales Price is not available");
                                    }
                                }
                            } else {
                                productSalesPrice = "";
                            }

//                            //Currency Details
//                            String MsgExep = "";
//                            if (isCurrencyCode?columnConfig.containsKey("currencyCode"):columnConfig.containsKey("currencyName")) {
//                                String productPriceCurrencyStr = isCurrencyCode?recarr[(Integer) columnConfig.get("currencyCode")].replaceAll("\"", "").trim():recarr[(Integer) columnConfig.get("currencyName")].replaceAll("\"", "").trim();
//                                if (!StringUtil.isNullOrEmpty(productPriceCurrencyStr)) {
//                                    currencyId = getCurrencyId(productPriceCurrencyStr, currencyMap);
//                                    if (StringUtil.isNullOrEmpty(currencyId)) {
//                                        MsgExep = "Currency format you entered is not correct. it should be like \\\"SG Dollar (SGD)\\\""; //messageSource.getMessage("acc.field.ImportProductExceptionFormat", null, RequestContextUtils.getLocale(request));
//                                        prevProductCode = "";
//                                        throw new AccountingException(MsgExep);
//                                    }
//                                } else {
//                                    prevProductCode = "";
//                                    throw new AccountingException("Currency is not available.");
//                                }
//                            } else {
//                                throw new AccountingException("Currency column is not found.");
//                            }                            
                            
                            Boolean isIswarehouseforproduct = false;
                            if (columnConfig.containsKey("iswarehouseforproduct")) {
                                String Iswarehouseforproduct = recarr[(Integer) columnConfig.get("iswarehouseforproduct")].replaceAll("\"", "").trim();
                                if (!StringUtil.isNullOrEmpty(Iswarehouseforproduct)) {
                                    if (Iswarehouseforproduct.equalsIgnoreCase("T") || Iswarehouseforproduct.equalsIgnoreCase("TRUE")) {
                                        isIswarehouseforproduct = true;
                                    } else if ((Iswarehouseforproduct.equalsIgnoreCase("F") || Iswarehouseforproduct.equalsIgnoreCase("FALSE")) && productTypeID.equals(Producttype.ASSEMBLY)  && companyAccountPreferences.isIswarehousecompulsory()) {
                                        throw new AccountingException("Warehouse should be active for Assembly Product");
                                    } else if (Iswarehouseforproduct.equalsIgnoreCase("F") || Iswarehouseforproduct.equalsIgnoreCase("FALSE")) {
                                        isIswarehouseforproduct = false;
                                    } else {
                                        prevProductCode = "";
                                        throw new AccountingException("Format you entered for Activate Warehouse is not correct. It should be like \"T\"/\"TRUE\" or \"F\"/\"FALSE\"");
                                    }
                                }
                            } else if (!columnConfig.containsKey("iswarehouseforproduct") && productTypeID.equals(Producttype.ASSEMBLY) && companyAccountPreferences.isIswarehousecompulsory() && !updateExistingRecordFlag){
                                throw new AccountingException("Activate Warehouse column should be available for Assembly Product");
                            }
                            
                            if (updateExistingRecordFlag && !isIswarehouseforproduct && productTypeID.equals(Producttype.ASSEMBLY)){
                                isIswarehouseforproduct = true;
                            }
                            //Default Warehouse
                            Store store = null;
                            String productDefaultWarehouseID = "";
                            if (columnConfig.containsKey("warehouseName") && isIswarehouseforproduct) {
                                String productDefaultWarehouseName = recarr[(Integer) columnConfig.get("warehouseName")].replaceAll("\"", "").trim();
                                if (!StringUtil.isNullOrEmpty(productDefaultWarehouseName)) {
                                    InventoryWarehouse invWHouse = getInventoryWarehouseByName(productDefaultWarehouseName, companyid);
                                    if (invWHouse != null) {
                                        productDefaultWarehouseID = invWHouse.getId();
                                        //Get the Store Object & Link this Warehouse with Location
                                        store = storeService.getStoreById(productDefaultWarehouseID);
                                    } else {
                                        if (masterPreference.equalsIgnoreCase("2")) {
                                            store = new Store();
                                            store.setStoreType(storeService.getStoreType(0));//Set Store type to warehouse
                                            store.setAbbreviation(productDefaultWarehouseName);
                                            store.setDescription(productDefaultWarehouseName);
                                            store.setCcDateAllow(false);//set Default False
                                            store.setSmccAllow(false);//set Default False
                                            store.setCreatedBy(user);
                                            Set<User> userSet = new HashSet<>();
                                            userSet.add(user);
                                            Set<User> executiveSet = new HashSet<>();
                                            executiveSet.add(user);
                                            store.setCompany(user.getCompany());
                                            store.setStoreManagerSet(userSet);
                                            store.setStoreExecutiveSet(executiveSet);
                                            storeService.addStore(user, store);
                                            productDefaultWarehouseID = store.getId();
                                        } else {
                                            if (masterPreference.equalsIgnoreCase("1")) {
                                                productDefaultWarehouseID = null;
                                            } else {
                                                prevProductCode = "";
                                                throw new AccountingException("Default Warehouse is not found for " + productDefaultWarehouseName);
                                            }
                                        }
                                    }
                                } else {
                                    if (masterPreference.equalsIgnoreCase("1")) {
                                        productDefaultWarehouseID = null;
                                    } else {
                                        prevProductCode = "";
                                        throw new AccountingException("Default Warehouse is not available.");
                                    }
                                }
                            } else {
                                productDefaultWarehouseID = null;
                            }
                            
                            
                            Boolean isIslocationforproduct = false;
                            if (columnConfig.containsKey("islocationforproduct")) {
                                String ISlocationforproduct = recarr[(Integer) columnConfig.get("islocationforproduct")].replaceAll("\"", "").trim();
                                if (!StringUtil.isNullOrEmpty(ISlocationforproduct)) {
                                    if (ISlocationforproduct.equalsIgnoreCase("T") || ISlocationforproduct.equalsIgnoreCase("TRUE")) {
                                        isIslocationforproduct = true;
                                    } else if ((ISlocationforproduct.equalsIgnoreCase("F") || ISlocationforproduct.equalsIgnoreCase("FALSE")) && productTypeID.equals(Producttype.ASSEMBLY)  && companyAccountPreferences.isIslocationcompulsory()) {
                                        throw new AccountingException("Location should be active for Assembly Product");
                                    } else if (ISlocationforproduct.equalsIgnoreCase("F") || ISlocationforproduct.equalsIgnoreCase("FALSE")) {
                                        isIslocationforproduct = false;
                                    } else {
                                        prevProductCode = "";
                                        throw new AccountingException("Format you entered for Activate Location is not correct. It should be like \"T\"/\"TRUE\" or \"F\"/\"FALSE\"");
                                    }
                                }
                            } else if (!columnConfig.containsKey("islocationforproduct") && productTypeID.equals(Producttype.ASSEMBLY) && companyAccountPreferences.isIslocationcompulsory() && !updateExistingRecordFlag){
                                throw new AccountingException("Activate Location column should be available for Assembly Product");
                            }
                            
                            if (updateExistingRecordFlag && !isIslocationforproduct && productTypeID.equals(Producttype.ASSEMBLY)){
                                isIslocationforproduct = true;
                            }
//                          Product Default Location
                            String productDefaultLocationID = "";
                            if (columnConfig.containsKey("locationName") && isIslocationforproduct) {
                                String productDefaultLocationName = recarr[(Integer) columnConfig.get("locationName")].replaceAll("\"", "").trim();
                                if (!StringUtil.isNullOrEmpty(productDefaultLocationName)) {
                                    InventoryLocation invLoc = getInventoryLocationByName(productDefaultLocationName, companyid);
                                    if (invLoc != null) {
                                        productDefaultLocationID = invLoc.getId();
                                        if(store!=null){
                                            //Get the Location Object & Update Warehouse with this Location
                                            Location loc = getLocationByID(productDefaultLocationID, companyid);
                                            Set<Store> stores = loc.getStores();
                                            stores.add(store);
                                            HashMap locmap = new HashMap();
                                            locmap.put("locid", loc.getId());
                                            locmap.put("stores", stores);
                                            accMasterItemsDAOobj.addUpdateLocation(locmap);
                                        }
                                        
                                    } else {
                                        if (masterPreference.equalsIgnoreCase("2")) {
                                            HashMap requestParam = requestParams;//AccountingManager.getGlobalParams(request);
                                            requestParam.put("id", "");
                                            requestParam.put("name", productDefaultLocationName);
                                            requestParam.put("parent", null);
                                            requestParam.put("user", user);
                                            KwlReturnObject locationResult = accMasterItemsDAOobj.addLocationItem(requestParam);
                                            invLoc = (InventoryLocation) locationResult.getEntityList().get(0);
                                            productDefaultLocationID = invLoc.getId();
                                            if (store != null) {
                                                Location loc = getLocationByID(productDefaultLocationID, companyid);
                                                Set<Store> stores = loc.getStores();
                                                stores.add(store);
                                                HashMap locmap = new HashMap();
                                                locmap.put("locid", loc.getId());
                                                locmap.put("stores", stores);
                                                accMasterItemsDAOobj.addUpdateLocation(locmap);
                                            }
                                        } else {
                                            if (masterPreference.equalsIgnoreCase("1")) {
                                                productDefaultLocationID = null;
                                            } else {
                                                prevProductCode = "";
                                                throw new AccountingException("Default Location is not found for " + productDefaultLocationName);
                                            }
                                        }
                                    }
                                } else {
                                    if (masterPreference.equalsIgnoreCase("1")) {
                                        productDefaultLocationID = null;
                                    } else {
                                        prevProductCode = "";
                                        throw new AccountingException("Default Location is not available.");
                                    }
                                }
                            } else {
                                productDefaultLocationID = null;
                            }                                                                                 

                            //ERP-34463
                            if(!StringUtil.isNullOrEmpty(productDefaultWarehouseID) && !isIswarehouseforproduct){
                                isIswarehouseforproduct=true;
                            }
                            if(!StringUtil.isNullOrEmpty(productDefaultLocationID) && !isIslocationforproduct){
                                isIslocationforproduct=true;
                            }
                            if((!isIswarehouseforproduct && isIslocationforproduct) || (!isIslocationforproduct && isIswarehouseforproduct)){
                                isIswarehouseforproduct=true;
                                isIslocationforproduct=true;
                            }
                        
                            //Make available in other application
                            Boolean isSyncable = false;
                            if (columnConfig.containsKey("syncable")) {
                                String productMakeAvailableInOtherApp = recarr[(Integer) columnConfig.get("syncable")].replaceAll("\"", "").trim();
                                if (!StringUtil.isNullOrEmpty(productMakeAvailableInOtherApp)) {
                                    if (productMakeAvailableInOtherApp.equalsIgnoreCase("T") || productMakeAvailableInOtherApp.equalsIgnoreCase("TRUE")) {
                                        isSyncable = true;
                                    } else if (productMakeAvailableInOtherApp.equalsIgnoreCase("F") || productMakeAvailableInOtherApp.equalsIgnoreCase("FALSE")) {
                                        isSyncable = false;
                                    } else {
                                        prevProductCode = "";
                                        throw new AccountingException("Format you entered for Make Available in other application is not correct. It should be like \"T\"/\"TRUE\" or \"F\"/\"FALSE\"");
                                    }
                                } else {
                                    if (masterPreference.equalsIgnoreCase("1")) {
                                        isSyncable = false;
                                    } else {
                                        prevProductCode = "";
                                        throw new AccountingException("Make available in other application is not available.");
                                    }
                                }
                            }

                            //Multiple UOM
                            Boolean isMultiUOM = false;
                            if (columnConfig.containsKey("multiuom")) {
                                String multipleUOM = recarr[(Integer) columnConfig.get("multiuom")].replaceAll("\"", "").trim();
                                if (!StringUtil.isNullOrEmpty(multipleUOM)) {
                                    if (multipleUOM.equalsIgnoreCase("T") || multipleUOM.equalsIgnoreCase("TRUE")) {
                                        isMultiUOM = true;
                                    } else if (multipleUOM.equalsIgnoreCase("F") || multipleUOM.equalsIgnoreCase("FALSE")) {
                                        isMultiUOM = false;
                                    } else {
                                        prevProductCode = "";
                                        throw new AccountingException("Format you entered for Multiple UOM is not correct. It should be like \"T\"/\"TRUE\" or \"F\"/\"FALSE\"");
                                    }
                                } else {
                                    if (masterPreference.equalsIgnoreCase("1")) {
                                        isMultiUOM = false;
                                    } else {
                                        if (productTypeID.equals(Producttype.ASSEMBLY)) {
                                            isMultiUOM = false;
                                        } else {
                                            prevProductCode = "";
                                            throw new AccountingException("Multiple UOM is not available.");
                                        }
                                    }
                                }
                            }
                            
                            UOMschemaType uomSchemaType = null;     //SDP-8926
                            if (columnConfig.containsKey("uomSchemaTypeName") && recarr.length > columnConfig.get("uomSchemaTypeName")) {
                                String uomSchemaTypeName = recarr[(Integer) columnConfig.get("uomSchemaTypeName")].replaceAll("\"", "").trim();
                                if (!StringUtil.isNullOrEmpty(uomSchemaTypeName)) {
                                    uomSchemaType = getUOMschemaTypeByName(uomSchemaTypeName, companyid);
                                    if (uomSchemaType == null) {
                                        if (!masterPreference.equalsIgnoreCase("1")) {
                                            prevProductCode = "";
                                            throw new AccountingException("UOM Schema is not found for " + uomSchemaTypeName + ".");
                                        }
                                    }
                                }
                            }
                            if (uomSchemaType != null && !productUOMID.equalsIgnoreCase(uomSchemaType.getStockuom().getID())) {
                                throw new AccountingException("Stock UOM of Product and UOM Schema's Stock UOM should be same.");
                            }
                            
                            // if Account Preferences have show Display UOM Setting is ON
                            UnitOfMeasure displayUoMObj = null;
                            if (columnPrefJObj!=null && columnPrefJObj.has(Constants.isDisplayUOM) && columnPrefJObj.get(Constants.isDisplayUOM) != null && (Boolean) columnPrefJObj.get(Constants.isDisplayUOM) != false) {
                                if (columnConfig.containsKey("displayUoM") && recarr.length > columnConfig.get("displayUoM") && uomSchemaType != null) {
                                    String displayUoM = recarr[(Integer) columnConfig.get("displayUoM")].replaceAll("\"", "").trim();
                                    if (!StringUtil.isNullOrEmpty(displayUoM)) {
                                        displayUoMObj = getUOMByName(displayUoM, companyid);

                                        boolean validDisplayUOM = false;
                                        if (displayUoMObj != null) {
                                            validDisplayUOM = accUomObj.isValidDisplayUOM(uomSchemaType.getID(), displayUoMObj.getID());
                                        }
                                        if(!validDisplayUOM){
                                            throw new AccountingException("Wrong value entered into Display UOM");
                                        }
                                    }
                                }
                            }

                            Date asOfDate = null;
                            if (columnConfig.containsKey("asofdate")) {//when AsofDate header is mapped
                                String asofdate = recarr[(Integer) columnConfig.get("asofdate")].replaceAll("\"", "").trim();
                                if (!StringUtil.isNullOrEmpty(asofdate)) {
                                    try {
                                        df1.setLenient(false);
                                        asOfDate = df1.parse(asofdate);
                                    } catch (Exception ex) {
                                        if (masterPreference.equalsIgnoreCase("1")) {//when set empty option is selected then setting its default value bookbeginning date
                                            asOfDate = bookBookBeginningDate;
                                        } else {
                                            throw new AccountingException("Incorrect date format for As Of Date, Please specify values in " + dateFormat + " format.");
                                        }
                                    }
                                } else {//when value is null or empty
                                    if (masterPreference.equals("0")) {//most resticted
                                        throw new AccountingException("Empty data found in As Of Date, cannot set empty data for As Of Date.");
                                    } else if (masterPreference.equals("2") || masterPreference.equals("1")) {// add new case and set empty case
                                        asOfDate = bookBookBeginningDate;
                                    }
                                }
                            }
                            Date gstapplicabledate = null;
                            if (columnConfig.containsKey("gstapplicabledate")) {//when AsofDate header is mapped
                                String asofdate = recarr[(Integer) columnConfig.get("gstapplicabledate")].replaceAll("\"", "").trim();
                                if (!StringUtil.isNullOrEmpty(asofdate)) {
                                    try {
                                        df1.setLenient(false);
                                        gstapplicabledate = df1.parse(asofdate);
                                    } catch (Exception ex) {

                                        throw new AccountingException("Incorrect date format for As Of Date, Please specify values in " + dateFormat + " format.");
                                    }
                                }
                            }
                            ValuationMethod valMethod = ValuationMethod.FIFO;
                            if (columnConfig.containsKey("valuationmethod")) {
                                String temp = recarr[(Integer) columnConfig.get("valuationmethod")].replaceAll("\"", "").trim();
                                if (!StringUtil.isNullOrEmpty(temp)) {
                                    if (temp.equalsIgnoreCase("LIFO")) {
                                        temp = "0";
                                    } else if (temp.equalsIgnoreCase("FIFO")) {
                                        temp = "1";
                                    } else if (temp.equalsIgnoreCase("Moving Average")) {
                                        temp = "2";
                                    } else {
                                        throw new AccountingException("Value is not valid for column. It should be 'FIFO' or 'LIFO' or 'Moving Average'.");
                                    }
                                    int valuationMethod = Integer.parseInt(temp);
                                    for (ValuationMethod st : ValuationMethod.values()) {
                                        if (st.ordinal() == valuationMethod) {
                                            valMethod = st;
                                            break;
                                        }
                                    }
                                }
                            } else {
                                valMethod = ValuationMethod.FIFO;
                            }
                            

                            Boolean isIsSerialForProduct = false;
                            if (columnConfig.containsKey(Constants.ACTIVATE_SERIAL_NO)) {
                                String IsSerialForProduct = recarr[(Integer) columnConfig.get(Constants.ACTIVATE_SERIAL_NO)].replaceAll("\"", "").trim();
                                if (!StringUtil.isNullOrEmpty(IsSerialForProduct)) {
                                    if (IsSerialForProduct.equalsIgnoreCase("T") || IsSerialForProduct.equalsIgnoreCase("TRUE")) {
                                        isIsSerialForProduct = true;
                                    } else if (IsSerialForProduct.equalsIgnoreCase("F") || IsSerialForProduct.equalsIgnoreCase("FALSE")) {
                                        isIsSerialForProduct = false;
                                    } else {
                                        prevProductCode = "";
                                        throw new AccountingException("Format you entered for Activate Serial is not correct. It should be like \"T\"/\"TRUE\" or \"F\"/\"FALSE\"");
                                    }
                                }
                            }
                            
                            Boolean isIsBatchForProduct = false;
                            if (columnConfig.containsKey(Constants.ACTIVATE_BATCH)) {
                                String IsBatchForProduct = recarr[(Integer) columnConfig.get(Constants.ACTIVATE_BATCH)].replaceAll("\"", "").trim();
                                if (!StringUtil.isNullOrEmpty(IsBatchForProduct)) {
                                    if (IsBatchForProduct.equalsIgnoreCase("T") || IsBatchForProduct.equalsIgnoreCase("TRUE")) {
                                        isIsBatchForProduct = true;
                                    } else if (IsBatchForProduct.equalsIgnoreCase("F") || IsBatchForProduct.equalsIgnoreCase("FALSE")) {
                                        isIsBatchForProduct = false;
                                    } else {
                                        prevProductCode = "";
                                        throw new AccountingException("Format you entered for Activate Batch is not correct. It should be like \"T\"/\"TRUE\" or \"F\"/\"FALSE\"");
                                    }
                                }
                            }
                            
                            String tariffName = "";
                            if (!productTypeID.equals(Producttype.SERVICE) && columnConfig.containsKey("tariffname")) {
                                String temp = recarr[(Integer) columnConfig.get("tariffname")].replaceAll("\"", "").trim();
                                if (!StringUtil.isNullOrEmpty(temp)) {
                                    tariffName = temp;
                                } else {
                                    throw new AccountingException("Tariff Name column is not found.");
                                }
                            }

                            String hsncode = "";
                            if (!productTypeID.equals(Producttype.SERVICE) && columnConfig.containsKey("hsncode")) {
                                String temp = recarr[(Integer) columnConfig.get("hsncode")].replaceAll("\"", "").trim();
                                if (!StringUtil.isNullOrEmpty(temp)) {
                                    hsncode = temp;
                                } else {
                                    throw new AccountingException("HSNCode column is not found.");
                                }
                            }

                            String reportinguomName = "", reportinguomID = "";
                            UnitOfMeasure reportinguom = null;
                            if (!productTypeID.equals(Producttype.SERVICE) && columnConfig.containsKey("reportinguom")) {
                                String temp = recarr[(Integer) columnConfig.get("reportinguom")].replaceAll("\"", "").trim();
                                if (!StringUtil.isNullOrEmpty(temp)) {
                                    reportinguomName = temp;
                                    reportinguom = accProductModuleService.getUOMByName(reportinguomName, companyid);
                                    if (reportinguom != null) {
                                        reportinguomID = reportinguom.getID();
                                    }
                                } else {
                                    throw new AccountingException("Reporting UOM column is not found.");
                                }
                            }

                            UOMschemaType reportingSchemaType = null;
                            if (!productTypeID.equals(Producttype.SERVICE) && columnConfig.containsKey("reportingschematype")) {
                                String temp = recarr[(Integer) columnConfig.get("reportingschematype")].replaceAll("\"", "").trim();
                                if (!StringUtil.isNullOrEmpty(temp)) {
                                    String uomSchemaTypeName = temp;//cell.getStringCellValue().trim();
                                    if (!StringUtil.isNullOrEmpty(uomSchemaTypeName)) {
                                        reportingSchemaType = getUOMschemaTypeByName(uomSchemaTypeName, companyid);
                                    }
                                    // Ref Optimization related code. 
                                    if (reportingSchemaType == null) {
                                        throw new AccountingException("UOM Schema is not found for " + uomSchemaTypeName);
                                    }
                                }
                            }

                            String excisemethod = "";
                            if (!productTypeID.equals(Producttype.SERVICE) && columnConfig.containsKey("excisemethodmain")) {
                                String temp = recarr[(Integer) columnConfig.get("excisemethodmain")].replaceAll("\"", "").trim();
                                if (!StringUtil.isNullOrEmpty(temp)) {
                                    excisemethod = temp;
                                    if (IndiaComplianceConstants.valuationType.containsKey(excisemethod)) {
                                        excisemethod = IndiaComplianceConstants.valuationType.get(excisemethod);
                                        if (excisemethod.equals("specific")) {
                                            throw new AccountingException(excisemethod + " which is not found Valuation Type (1.Ad Valorem Method,2.Quantity,3.Specific basis,4.MRP (Maximum Retail Price)).");
                                        }
                                    }
                                } else {
                                    throw new AccountingException("Valuation Type column is not found.");
                                }
                            }
                            String vatMethodType = "";
                            if (!productTypeID.equals(Producttype.SERVICE) &&  columnConfig.containsKey("vatMethodType")) {
                                String temp = recarr[(Integer) columnConfig.get("vatMethodType")].replaceAll("\"", "").trim();
                                if (!StringUtil.isNullOrEmpty(temp)) {
                                  
                                    if (IndiaComplianceConstants.valuationType.containsKey(temp)) {
                                        vatMethodType = IndiaComplianceConstants.valuationType.get(temp);
                                        if (vatMethodType.equals("specific")) {
                                            throw new AccountingException( temp + " which is not found Vat Valuation Type (1.Ad Valorem Method,2.Quantity,3.Specific basis,4.MRP (Maximum Retail Price)).");
                                        }
                                    }
                                } else {
                                    throw new AccountingException("Vat Valuation Type column is not found.");
                                }
                            }

                            Date vatAbatementPeriodFromDate = null;
                            if (columnConfig.containsKey("vatAbatementPeriodFromDate")) {//when AsofDate header is mapped
                                String temp = recarr[(Integer) columnConfig.get("vatAbatementPeriodFromDate")].replaceAll("\"", "").trim();
                                if (!StringUtil.isNullOrEmpty(temp)) {
                                    String stringAsOfDate = temp;
                                    if (!stringAsOfDate.equals("")) {
                                        try {
                                            vatAbatementPeriodFromDate = df.parse(stringAsOfDate);
                                        } catch (Exception ex) {
                                            throw new AccountingException("Incorrect date format for Applicability Period From, Please specify values in " + temp + " format.");
                                        }
                                    }
                                }
                            }

                            Date vatAbatementPeriodToDate = null;
                            if (columnConfig.containsKey("vatAbatementPeriodToDate")) {//when AsofDate header is mapped
                                String temp = recarr[(Integer) columnConfig.get("vatAbatementPeriodToDate")].replaceAll("\"", "").trim();
                                if (!StringUtil.isNullOrEmpty(temp)) {
                                    String stringAsOfDate = temp;
                                    if (!stringAsOfDate.equals("")) {
                                        try {

                                            vatAbatementPeriodToDate = df.parse(stringAsOfDate);
                                        } catch (Exception ex) {
                                            throw new AccountingException("Incorrect date format for Applicability Period To, Please specify values in " + temp + " format.");
                                        }
                                    }
                                }
                            }

                            String vatcommoditycode = "";
                            if (columnConfig.containsKey("vatcommoditycode")) {
                                String temp = recarr[(Integer) columnConfig.get("vatcommoditycode")].replaceAll("\"", "").trim();
                                if (!StringUtil.isNullOrEmpty(temp)) {
                                    String vatcommodityname = temp;
                                    Map tempData = new HashMap<String, String>();
                                    tempData.put("vatcommodityname", vatcommodityname);
                                    tempData.put("company", companyid);
                                    KwlReturnObject vatCommresult = accProductObj.getVATCommodityCodeByName(tempData);
                                    if (vatCommresult.getRecordTotalCount() > 0) {
                                        List list = (ArrayList) vatCommresult.getEntityList();
                                        Iterator itr = list.iterator();
                                        if (itr.hasNext()) {
                                            vatcommoditycode = (String) itr.next();
                                        }
                                    } else {
                                        throw new AccountingException(vatcommodityname + " is not found in VAT Commodity Name.");
                                    }
                                }
                            }
                        
                            String natureofStockItem = "";
                            if (!productTypeID.equals(Producttype.SERVICE) && columnConfig.containsKey("natureofStockItem")) {
                                String temp = recarr[(Integer) columnConfig.get("natureofStockItem")].replaceAll("\"", "").trim();
                                if (!StringUtil.isNullOrEmpty(temp)) {
                                    Map tempData = new HashMap<String, String>();
                                    tempData.put("natureofStockItemname", temp);
                                    tempData.put("company", companyid);
                                    KwlReturnObject vatCommresult = accProductObj.getNatureofStockItemCodeByName(tempData);
                                    if (vatCommresult.getRecordTotalCount() > 0) {
                                        List list = (ArrayList) vatCommresult.getEntityList();
                                        Iterator itr = list.iterator();
                                        if (itr.hasNext()) {
                                            natureofStockItem = (String) itr.next();
                                        }
                                    } else {
                                        throw new AccountingException(temp + " is not found in Types of Goods.");
                                    }
                                }
                            }
                            
                            String mrprate = "";
                            if (!productTypeID.equals(Producttype.SERVICE) && columnConfig.containsKey("mrprate")) {
                               String temp = recarr[(Integer) columnConfig.get("mrprate")].replaceAll("\"", "").trim();
                                if (!StringUtil.isNullOrEmpty(temp)) {
                                    mrprate = temp;
                                }
                            }
                            String serviceTaxCode = "";
                            if (columnConfig.containsKey("serviceTaxCode")) {
                               String temp = recarr[(Integer) columnConfig.get("serviceTaxCode")].replaceAll("\"", "").trim();
                                if (!StringUtil.isNullOrEmpty(temp)) {
                                    serviceTaxCode = temp;
                                }
                            }
                            String interStatePurchaseAccount = "";
                            if (columnConfig.containsKey("interStatePurchaseAccount")) {
                                String temp = recarr[(Integer) columnConfig.get("interStatePurchaseAccount")].replaceAll("\"", "").trim();
                                if (!StringUtil.isNullOrEmpty(temp)) {
                                    Account purchaseAccount = getAccountByName(temp, companyid);
                                    if (purchaseAccount != null) {
                                        interStatePurchaseAccount = purchaseAccount.getID();
                                    } else {
                                        prevProductCode = "";
                                        throw new AccountingException("Inter State Purchase Account is not found for " + temp);
                                    }
                                }
                            }

                            String interStatePurchaseAccountCForm = "";
                            if (columnConfig.containsKey("interStatePurchaseAccountCForm")) {
                                String temp = recarr[(Integer) columnConfig.get("interStatePurchaseAccountCForm")].replaceAll("\"", "").trim();
                                if (!StringUtil.isNullOrEmpty(temp)) {
                                    Account purchaseAccount = getAccountByName(temp, companyid);
                                    if (purchaseAccount != null) {
                                        interStatePurchaseAccountCForm = purchaseAccount.getID();
                                    } else {
                                        prevProductCode = "";
                                        throw new AccountingException("Inter State Purchase Account C-Form is not found for " + temp);
                                    }
                                }
                            }

                            String interStatePurchaseReturnAccount = "";
                            if (columnConfig.containsKey("interStatePurchaseReturnAccount")) {
                                String temp = recarr[(Integer) columnConfig.get("interStatePurchaseReturnAccount")].replaceAll("\"", "").trim();
                                if (!StringUtil.isNullOrEmpty(temp)) {
                                    Account purchaseAccount = getAccountByName(temp, companyid);
                                    if (purchaseAccount != null) {
                                        interStatePurchaseReturnAccount = purchaseAccount.getID();
                                    } else {
                                        prevProductCode = "";
                                        throw new AccountingException("Inter State Purchase Return Account is not found for " + temp);
                                    }
                                }
                            }

                            String interStatePurchaseReturnAccountCForm = "";
                            if (columnConfig.containsKey("interStatePurchaseReturnAccountCForm")) {
                                String temp = recarr[(Integer) columnConfig.get("interStatePurchaseReturnAccountCForm")].replaceAll("\"", "").trim();
                                if (!StringUtil.isNullOrEmpty(temp)) {
                                    Account purchaseAccount = getAccountByName(temp, companyid);
                                    if (purchaseAccount != null) {
                                        interStatePurchaseReturnAccountCForm = purchaseAccount.getID();
                                    } else {
                                        prevProductCode = "";
                                        throw new AccountingException("Inter State Purchase Return Account CForm is not found for " + temp);
                                    }
                                }
                            }
                            String interStateSalesAccount = "";
                            if (columnConfig.containsKey("interStateSalesAccount")) {
                                String temp = recarr[(Integer) columnConfig.get("interStateSalesAccount")].replaceAll("\"", "").trim();
                                if (!StringUtil.isNullOrEmpty(temp)) {
                                    Account purchaseAccount = getAccountByName(temp, companyid);
                                    if (purchaseAccount != null) {
                                        interStateSalesAccount = purchaseAccount.getID();
                                    } else {
                                        prevProductCode = "";
                                        throw new AccountingException("Inter State Sales Account is not found for " + temp);
                                    }
                                }
                            }

                            String interStateSalesAccountCForm = "";
                            if (columnConfig.containsKey("interStateSalesAccountCForm")) {
                                String temp = recarr[(Integer) columnConfig.get("interStateSalesAccountCForm")].replaceAll("\"", "").trim();
                                if (!StringUtil.isNullOrEmpty(temp)) {
                                    Account purchaseAccount = getAccountByName(temp, companyid);
                                    if (purchaseAccount != null) {
                                        interStateSalesAccountCForm = purchaseAccount.getID();
                                    } else {
                                        prevProductCode = "";
                                        throw new AccountingException("Inter State Sales Account CForm is not found for " + temp);
                                    }
                                }
                            }

                            String interStateSalesReturnAccount = "";
                            if (columnConfig.containsKey("interStateSalesReturnAccount")) {
                                String temp = recarr[(Integer) columnConfig.get("interStateSalesReturnAccount")].replaceAll("\"", "").trim();
                                if (!StringUtil.isNullOrEmpty(temp)) {
                                    Account purchaseAccount = getAccountByName(temp, companyid);
                                    if (purchaseAccount != null) {
                                        interStateSalesReturnAccount = purchaseAccount.getID();
                                    } else {
                                        prevProductCode = "";
                                        throw new AccountingException("Inter State Sales Return Account is not found for " + temp);
                                    }
                                }
                            }

                            String interStateSalesReturnAccountCForm = "";
                            if (columnConfig.containsKey("interStateSalesReturnAccountCForm")) {
                                String temp = recarr[(Integer) columnConfig.get("interStateSalesReturnAccountCForm")].replaceAll("\"", "").trim();

                                if (!StringUtil.isNullOrEmpty(temp)) {
                                    Account purchaseAccount = getAccountByName(temp, companyid);
                                    if (purchaseAccount != null) {
                                        interStateSalesReturnAccountCForm = purchaseAccount.getID();
                                    } else {
                                        prevProductCode = "";
                                        throw new AccountingException("Inter State Sales Return Account CForm is not found for " + temp);
                                    }
                                }
                            }

                            Set<Frequency> ccFrequencies = new HashSet();
                            if (!productTypeID.equals(Producttype.SERVICE) && !productTypeID.equals(Producttype.SERVICE_Name) && columnConfig.containsKey("CCFrequency")) {
                                String frequencies = recarr[(Integer) columnConfig.get("CCFrequency")].replaceAll("\"", "").trim();
                                if (!StringUtil.isNullOrEmpty(frequencies)) {
                                    String[] frqs = frequencies.split(",");
                                    String notFoundNames = "";
                                    for (int i = 0; i < frqs.length; i++) {
                                        Frequency frq = null;
                                        if ("Daily".equalsIgnoreCase(frqs[i])) {
                                            frq = frequencyMap.get(Frequency.DAILY);
                                        } else if ("Weekly".equalsIgnoreCase(frqs[i])) {
                                            frq = frequencyMap.get(Frequency.WEEKLY);
                                        } else if ("Fortnightly".equalsIgnoreCase(frqs[i])) {
                                            frq = frequencyMap.get(Frequency.FORTNIGHT);
                                        } else if ("Monthly".equalsIgnoreCase(frqs[i])) {
                                            frq = frequencyMap.get(Frequency.MONTHLY);
                                        } else {
                                            notFoundNames += frqs[i] + ", ";
                                        }
                                        if (frq != null) {
                                            ccFrequencies.add(frq);
                                        }
                                    }
                                    if (!StringUtil.isNullOrEmpty(notFoundNames) && masterPreference.equalsIgnoreCase("0")) {
                                        notFoundNames = notFoundNames.substring(0, notFoundNames.lastIndexOf(","));
                                        throw new AccountingException("Cycle Count Frequency is not found for " + notFoundNames);
                                    }
                                }
                            }



                            // For Checking 'ProductID' is exist or not
                            KwlReturnObject result = accProductObj.getProductIDCount(productID, companyid,false);
                        Product productOldObj = null;
                            int nocount = result.getRecordTotalCount();
                            if (nocount > 0 && !updateExistingRecordFlag) {
                                throw new AccountingException("Product ID '" + productID + "' already exists.");
                            } else if (nocount == 0 && updateExistingRecordFlag) {
                                throw new AccountingException("Product ID '" + productID + "' not exists.");
                        } else if (nocount > 0 && updateExistingRecordFlag && !result.getEntityList().isEmpty()) {
                            productOldObj = (Product) result.getEntityList().get(0);
                            String propChangeErrMsg="";
                            if (productOldObj != null && productOldObj.getAvailableQuantity() > 0) {
                                if (productOldObj.isIswarehouseforproduct() != isIswarehouseforproduct) {
                                    propChangeErrMsg += StringUtil.isNullOrEmpty(propChangeErrMsg) ? "warehouse" : " ,warehouse";
                            }
                                if (productOldObj.isIslocationforproduct() != isIslocationforproduct) {
                                    propChangeErrMsg += StringUtil.isNullOrEmpty(propChangeErrMsg) ? "location" : " ,location";
                                }
                                if (productOldObj.isIsBatchForProduct() != isIsBatchForProduct) {
                                    propChangeErrMsg += StringUtil.isNullOrEmpty(propChangeErrMsg) ? "batch" : " ,batch";
                                }
                                if (productOldObj.isIsSerialForProduct() != isIsSerialForProduct) {
                                    propChangeErrMsg += StringUtil.isNullOrEmpty(propChangeErrMsg) ? "serial" : " ,serial";
                                }
                                if(!StringUtil.isNullOrEmpty(propChangeErrMsg)){
                                    throw new AccountingException("Opening stock is already added for this product.So, "+propChangeErrMsg + " property can not be changed.");
                                }
                            }

                        }
                            MasterItem prodMasterItemObj = accProductObj.getProductsMasterItem(companyid, productID);
                            KwlReturnObject kwlReturnObject_SPA = accProductObj.selectSubProductFromAssembly(productID);
                            KwlReturnObject kwlReturnObject_I = accProductObj.selectInventoryByProduct(productID, companyid);
                            boolean isUsedInTransaction = false, isAssemblyProductWithBOM = false;                            
                            Product prod = null;
                            
                            if (updateExistingRecordFlag) {
                                    prod = (Product) result.getEntityList().get(0);
                                    List booleanlist = accProductObj.isAssemblyProductWithBOM(prod.getID());
                                    isAssemblyProductWithBOM = (Boolean) booleanlist.get(0);    //always boolean value 
                                    //If Product is of Assembly Type & it do not have BOM Products then this condition will not check
                                    if (isAssemblyProductWithBOM) {
                                    List listObj = accProductModuleService.isProductUsedintransction(prod.getID(), companyid, requestParams);
                                    isUsedInTransaction = (Boolean) listObj.get(0);    //always boolean value
                                    if (isUsedInTransaction) {
                                        throw new AccountingException("Product ID '" + productID + "' used in transaction(s). So it cannot update");
                                    }
                                    //Check whether this product is used for Build Assembly or not
                                    KwlReturnObject rs = accProductObj.getAssemblyProductDetails(prod.getID()); //ERP-12252
                                    if (rs.getRecordTotalCount() > 0) {
                                        throw new AccountingException(productID + "' used in Build Assembly. You cannot edit this Assembly Product.");
                                    }
                                    //In update case, if product is not linked in any transaction, delete this product
                                System.out.println("Product not linked. so deleting this product to update");
                                    accProductObj.deleteProductCustomData(prod.getID());
                                    accProductObj.deleteProPricePermanently(prod.getID(), companyid);
                                    accProductObj.deleteProductCategoryMappingDtails(productID);
                                    if (prod.getProducttype().getID().equals(Producttype.ASSEMBLY)) {
                                        accProductObj.deleteProductAssembly(prod.getID());
                                        accProductObj.deleteBOMDetail(prod.getID());
                                        accProductObj.deleteProductBuildDetails(prod.getID(), companyid);
                                        accProductObj.deleteProductbBuild(prod.getID(), companyid);
                                    }
                                    if (!StringUtil.isNullOrEmpty(productID) && prodMasterItemObj != null) {
                                        accProductObj.deleteProductCategoryMappingDtails(prod.getID());
                                    }
                                    if (!StringUtil.isNullOrEmpty(prod.getID())) {
                                        accProductObj.deleteNewProductBatch(prod.getID(), companyid);
                                    }
                                    if (!StringUtil.isNullOrEmpty(productID) && kwlReturnObject_I.getRecordTotalCount() > 0 && !prod.getProducttype().getID().equals(Producttype.ASSEMBLY)) {
                                        accProductObj.deleteProductInitialInventoryDtails(prod.getID(), companyid);
                                    } else {
                                        accProductObj.deleteAssemblyProductInventory(prod.getID(), companyid);
                                    }
                                    accProductObj.deleteProductPermanently(prod.getID(), companyid);
                                }
                            }
                            //Create Global Product Map
                            productMap = new HashMap<String, Object>();                            
                            productMap.put("producttype", productTypeID);
                            productMap.put("name", productName);
                            productMap.put("productid", productID);
                            if (columnConfig.containsKey("desc")) {
                                productMap.put("desc", productDescription);
                            }
                            if (columnConfig.containsKey("additionaldesc")) {
                                productMap.put("additionaldescription", additionaldesc);
                            }
                            
                            productMap.put("syncable", false);
                            productMap.put("multiuom", false);
                            productMap.put("isBatchForProduct", isIsBatchForProduct);
                            productMap.put("isSerialForProduct", isIsSerialForProduct);
                            productMap.put("uomid", productUOMID);
                            if (!productTypeID.equals(Producttype.SERVICE)) { //Service Product
                                if (uom != null) {
                                    productMap.put("transferUoM", uom);
                                    productMap.put("orderUoM", uom);
                                }
                                if (salesuom != null) {
                                    productMap.put("salesuomid", salesuom);
                                } else if (salesuom == null && uom != null) {
                                    productMap.put("salesuomid", uom);
                                }
                                if (purchaseruom != null) {
                                    productMap.put("purchaseuomid", purchaseruom);
                                } else if (purchaseruom == null && uom != null) {
                                    productMap.put("purchaseuomid", uom);
                                }
                                if (!ccFrequencies.isEmpty()) {
                                    productMap.put("CCFrequency", ccFrequencies);
                                    productMap.put("countable", true);
                                } else {
                                    productMap.put("countable", false);
                                }

                                //UOM Details
                                KwlReturnObject companyObj = accountingHandlerDAOobj.getObject(Company.class.getName(), companyid);
                                Company company = (Company) companyObj.getEntityList().get(0);
                                Packaging packaging = null;
                                if (inneruom != null || casinguom != null || uom !=null) {
                                    packaging = new Packaging();
                                    packaging.setCasingUoM(casinguom);
                                    packaging.setInnerUoM(inneruom);
                                    packaging.setStockUoM(uom);
                                    packaging.setCasingUomValue(Double.parseDouble(casinguomvalue));
                                    packaging.setInnerUomValue(Double.parseDouble(inneruomvalue));
                                    packaging.setStockUomValue(Double.parseDouble(stcokuomvalue));
                                    packaging.setCompany(company);

                                }
                                if (packaging != null) {
                                    accProductObj.saveProductPackging(packaging);
                                    productMap.put("packaging", packaging);
                                }
                            } //Service Product
                            
                            Boolean isactive = false;
                            if (columnConfig.containsKey("isactive")) {
                                String temp = recarr[(Integer) columnConfig.get("isactive")].replaceAll("\"", "").trim();
                                if (!StringUtil.isNullOrEmpty(temp)) {
                                    String isIsactive = temp;
                                    if (isIsactive.equalsIgnoreCase("T") || isIsactive.equalsIgnoreCase("TRUE")) {
                                        isactive = true;
                                    } else if (isIsactive.equalsIgnoreCase("F") || isIsactive.equalsIgnoreCase("FALSE")) {
                                        isactive = false;
                                    } else {
                                        throw new AccountingException("Format you entered for Is Active is not correct. It should be like \"T\"/\"TRUE\" or \"F\"/\"FALSE\"");
                                    }
                                }
                            }

                            if (columnConfig.containsKey("isactive")) {
                                productMap.put("isActiveItem", isactive);
                            } else {
                                productMap.put("isActiveItem", true);
                            }
                            productMap.put("reorderlevel", Double.parseDouble(productReorderLevel));
                            productMap.put("reorderquantity", Double.parseDouble(productReorderQuantity));
                            productMap.put("warrantyperiod", Integer.parseInt(productWarrantyPeriod));
                            productMap.put("warrantyperiodsal", Integer.parseInt(productSalesWarrantyPeriod));
                            productMap.put("leadtime", Integer.parseInt(productLeadTime));
                            productMap.put("productweight", Double.parseDouble(productweight));
                            productMap.put("landingCostCategory", landingcostcategoryids);
                            
                            if (!StringUtil.isNullOrEmpty(stockAdjustmentAccountID)) {
                                productMap.put("stockadjustmentaccountid", stockAdjustmentAccountID); // Stock Adjustment Account
                            }
                            if (!StringUtil.isNullOrEmpty(inventoryAccountID)) {
                                productMap.put("inventoryaccountid", inventoryAccountID); // Inventory Account
                            }
                            if (!StringUtil.isNullOrEmpty(costOfGoodsSoldAccountID)) {
                                productMap.put("cogsaccountid", costOfGoodsSoldAccountID); // Cost of Goods Sold Account
                            }

                            productMap.put("parentid", parentProductUUID);
                            productMap.put("salesaccountid", productSalesAccId);
                            productMap.put("purchaseretaccountid", productPurchaseReturnAccId);
                            productMap.put("salesretaccountid", productSalesReturnAccId);
                            productMap.put("vendorid", productPreferedVendorID);
                            productMap.put("purchaseaccountid", productPurchaseAccId);
                            productMap.put("purchaseretaccountid", productPurchaseReturnAccId);

                            if (asOfDate == null) {//asOfDate field will be null only when product is new and field is not mapped
                                asOfDate = bookBookBeginningDate;
                            }
                            productMap.put("asOfDate", asOfDate);
                            if (valMethod != null) {
                                productMap.put("valuationmethod", valMethod);
                            }
                            if (!StringUtil.isNullOrEmpty(productDefaultLocationID)) {
                                productMap.put("location", productDefaultLocationID);
                            }

                            if (!StringUtil.isNullOrEmpty(productDefaultWarehouseID)) {
                                productMap.put("warehouse", productDefaultWarehouseID);
                            }

                            productMap.put("syncable", isSyncable);
                            productMap.put("multiuom", isMultiUOM);
                            if (uomSchemaType != null && isMultiUOM && extraPref != null && extraPref.getUomSchemaType() == 0) {   //SDP-8926
                                productMap.put("uomschemaType", uomSchemaType);
                            }
                            // if product have uomSchemaType != null and displayUoMObj != null when Account Preferences have show Display UOM Setting is ON
                            if (uomSchemaType != null && displayUoMObj != null) {
                                productMap.put("displayUoM", displayUoMObj.getID());
                            }
                            productMap.put("isLocationForProduct", isIslocationforproduct);
                            productMap.put("isWarehouseForProduct", isIswarehouseforproduct);
                            productMap.put("deletedflag", false);
                            productMap.put("companyid", companyid);
                            productMap.put("isImport", 1);
                            productMap.put("updateExistingRecordFlag", updateExistingRecordFlag);
                            productMap.put("currencyid", currencyId);
                            /*  -------------------- Indian Company Fields ------------------ */

                            if (!StringUtil.isNullOrEmpty(tariffName)) {
                                productMap.put("tariffname", tariffName);
                            }
                            if (!StringUtil.isNullOrEmpty(hsncode)) {
                                productMap.put("hsCode", hsncode);
                            }
                            if (reportingSchemaType != null) {
                                productMap.put("reportingSchemaType", reportingSchemaType);
                            }
                            if (!StringUtil.isNullOrEmpty(reportinguomID)) {
                                productMap.put("reportinguom", reportinguomID);
                            }
                            if (!StringUtil.isNullOrEmpty(excisemethod)) {
                                productMap.put("excisemethod", excisemethod);
                            }
                            if (!StringUtil.isNullOrEmpty(vatMethodType)) {
                                productMap.put("vatMethodType", vatMethodType);
                            }
                            if (vatAbatementPeriodFromDate != null) {
                                productMap.put("vatAbatementPeriodFromDate", vatAbatementPeriodFromDate);
                            }
                            if (vatAbatementPeriodToDate != null) {
                                productMap.put("vatAbatementPeriodToDate", vatAbatementPeriodToDate);
                            }
                            if (!StringUtil.isNullOrEmpty(vatcommoditycode)) {
                                productMap.put("vatcommoditycode", vatcommoditycode);
                            }
                            if (!StringUtil.isNullOrEmpty(natureofStockItem)) {
                                productMap.put("natureOfStockItem", natureofStockItem);
                            }
                            if (!StringUtil.isNullOrEmpty(mrprate)) {
                                productMap.put("mrprate", mrprate);
                            }
                            if (!StringUtil.isNullOrEmpty(serviceTaxCode)) {
                                productMap.put("servicetaxcode", serviceTaxCode);
                            }
                            if (!StringUtil.isNullOrEmpty(interStatePurchaseAccount)) {
                                productMap.put("interStatePurAccID", interStatePurchaseAccount);
                            }
                            if (!StringUtil.isNullOrEmpty(interStatePurchaseAccountCForm)) {
                                productMap.put("interStatePurAccCformID", interStatePurchaseAccountCForm);
                            }
                            if (!StringUtil.isNullOrEmpty(interStatePurchaseReturnAccount)) {
                                productMap.put("interStatePurReturnAccID", interStatePurchaseReturnAccount);
                            }
                            if (!StringUtil.isNullOrEmpty(interStatePurchaseReturnAccountCForm)) {
                                productMap.put("interStatePurReturnAccCformID", interStatePurchaseReturnAccountCForm);
                            }
                            if (!StringUtil.isNullOrEmpty(interStateSalesAccount)) {
                                productMap.put("interStateSalesAccID", interStateSalesAccount);
                            }
                            if (!StringUtil.isNullOrEmpty(interStateSalesAccountCForm)) {
                                productMap.put("interStateSalesAccCformID", interStateSalesAccountCForm);
                            }
                            if (!StringUtil.isNullOrEmpty(interStateSalesReturnAccount)) {
                                productMap.put("interStateSalesReturnAccID", interStateSalesReturnAccount);
                            }
                            if (!StringUtil.isNullOrEmpty(interStateSalesReturnAccountCForm)) {
                                productMap.put("interStateSalesReturnAccCformID", interStateSalesReturnAccountCForm);
                            }
                            
                            
                            
                            //Save Global Product Details
                            if (!StringUtil.isNullOrEmpty(bomProductID) && compQuantity > 0) { //Global Product ll save only when Bom Product ID & Quantity is not empty
                                if(updateExistingRecordFlag && !isAssemblyProductWithBOM){
                                    productMap.put("id", prod.getID());  //To update the Assembly Product which don't have BOM
                                    productresult = accProductObj.updateProduct(productMap);   
                                } else {
                                    productresult = accProductObj.addProduct(productMap);
                                }                                
                                product = (Product) productresult.getEntityList().get(0);
				productIdSet.add(product.getID());
                                Object remoteAddress = requestParams.containsKey("remoteAddress")?requestParams.get("remoteAddress") : Constants.defaultIp;
                                String saveAction = updateExistingRecordFlag ? "updated" : "created";
                                String detail= "User " + user.getFullName() + " has " + saveAction +" "+ "Product" + " " + product.getName() + " [" + product.getProductid() + "]";
                                importLogDetailsMap.put(product.getProductid(), detail);
                            }

                            if (productSalesPrice.length() > 0 && !isUsedInTransaction) {
                                HashMap<String, Object> requestParams2 = new HashMap<>();
                                requestParams2.put(Constants.productid, product.getID());
                                requestParams2.put("carryin", false);
                                requestParams2.put("applydate", product.getAsOfDate());
                                requestParams2.put("affecteduser", "-1");
                                requestParams2.put(Constants.currencyKey, currencyId);
                                requestParams2.put("uomid", product.getUnitOfMeasure().getID());
                                KwlReturnObject priceResult = accProductObj.getPriceListEntry(requestParams2);
                                List list = priceResult.getEntityList();
                                
                                // creating Price list Hashmap
                                HashMap<String, Object> salesPriceMap = new HashMap<String, Object>();
                                salesPriceMap.put("productid", product.getID());
                                salesPriceMap.put("companyid", companyid);
                                salesPriceMap.put("carryin", false);
                                salesPriceMap.put("price", authHandler.roundUnitPrice(Double.parseDouble(productSalesPrice),companyid));
                                salesPriceMap.put("applydate", product.getAsOfDate());
                                salesPriceMap.put("affecteduser", "-1");
                                salesPriceMap.put("currencyid", currencyId);
                                salesPriceMap.put("uomid", product.getUnitOfMeasure().getID());
                                if (list != null && list.size() > 0) {
                                    PriceList price = (PriceList) list.get(0);
                                    salesPriceMap.put("priceid", price.getID());
                                    accProductObj.updatePriceList(salesPriceMap); 
                                } else {
                                    accProductObj.addPriceList(salesPriceMap);
                                }
                            }
                            // For create custom field array
                            customfield = "";
                            JSONArray customJArr = new JSONArray();
                            for (int i = 0; i < jSONArray.length(); i++) {
                                JSONObject jSONObject = jSONArray.getJSONObject(i);

                                if (jSONObject.optBoolean("customflag", false)) {//&& !jSONObject.optBoolean("isLineItem",false)
                                    HashMap<String, Object> requestParams1 = new HashMap<String, Object>();
                                    requestParams1.put(Constants.filter_names, Arrays.asList(Constants.companyid, Constants.moduleid, Constants.fieldlabel));
                                    requestParams1.put(Constants.filter_values, Arrays.asList(companyid, Constants.Acc_Product_Master_ModuleId, jSONObject.getString("columnname")));

                                    KwlReturnObject fieldParamsResult = accCommonTablesDAO.getFieldParams(requestParams1); // get custom field for module
                                    FieldParams params = (FieldParams) fieldParamsResult.getEntityList().get(0);

                                    if (!StringUtil.isNullOrEmpty(recarr[jSONObject.getInt("csvindex")].replaceAll("\"", "").trim())) {
                                        JSONObject customJObj = new JSONObject();
                                        customJObj.put("fieldid", params.getId());
                                        customJObj.put("filedid", params.getId());
                                        customJObj.put("refcolumn_name", "Col" + params.getRefcolnum());
                                        customJObj.put("fieldname", "Custom_" + params.getFieldlabel());
                                        customJObj.put("xtype", params.getFieldtype());

                                        String fieldComboDataStr = "";
                                        if (params.getFieldtype() == 3) { // if field of date type
                                            String dateStr = recarr[jSONObject.getInt("csvindex")].replaceAll("\"", "").trim();
                                            customJObj.put("Col" + params.getColnum(), df.parse(dateStr).getTime());
                                            customJObj.put("fieldDataVal", df.parse(dateStr).getTime());
                                        } else if (params.getFieldtype() == 4 || params.getFieldtype() == 7) { // if field of MultiSelect Drop Down OR Drop Down
                                            String[] fieldComboDataArr = recarr[jSONObject.getInt("csvindex")].replaceAll("\"", "").trim().split(";");

                                            for (int dataArrIndex = 0; dataArrIndex < fieldComboDataArr.length; dataArrIndex++) {
                                                requestParams1 = new HashMap<String, Object>();
                                                requestParams1.put(Constants.filter_names, Arrays.asList(Constants.Acc_custom_fieldId, "value", "deleteflag"));
                                                requestParams1.put(Constants.filter_values, Arrays.asList(params.getId(), fieldComboDataArr[dataArrIndex], 0));

                                                fieldParamsResult = accCommonTablesDAO.getCustomCombodata(requestParams1);
                                                if (fieldParamsResult != null && !fieldParamsResult.getEntityList().isEmpty()) {
                                                    FieldComboData fieldComboData = (FieldComboData) fieldParamsResult.getEntityList().get(0);
                                                    fieldComboDataStr += fieldComboData.getId() + ",";
                                                }
                                            }

                                            if (!StringUtil.isNullOrEmpty(fieldComboDataStr)) {
                                                customJObj.put("Col" + params.getColnum(), fieldComboDataStr.substring(0, fieldComboDataStr.length() - 1));
                                                customJObj.put("fieldDataVal", fieldComboDataStr.substring(0, fieldComboDataStr.length() - 1));
                                            } else {
                                                continue;
                                            }
                                        } else if (params.getFieldtype() == 11) { // if field of check box type 
                                            customJObj.put("Col" + params.getColnum(), Boolean.parseBoolean(recarr[jSONObject.getInt("csvindex")].replaceAll("\"", "").trim()));
                                            customJObj.put("fieldDataVal", Boolean.parseBoolean(recarr[jSONObject.getInt("csvindex")].replaceAll("\"", "").trim()));
                                        } else if (params.getFieldtype() == 12) { // if field of check list type
                                            requestParams1 = new HashMap<String, Object>();
                                            requestParams1.put(Constants.filter_names, Arrays.asList(Constants.Acc_custom_fieldId, "deleteflag"));
                                            requestParams1.put(Constants.filter_values, Arrays.asList(params.getId(), 0));

                                            fieldParamsResult = accCommonTablesDAO.getCustomCombodata(requestParams1);
                                            List<FieldComboData> fieldComboDataList = fieldParamsResult.getEntityList();

                                            String[] fieldComboDataArr = recarr[jSONObject.getInt("csvindex")].replaceAll("\"", "").trim().split(";");

                                            int dataArrIndex = 0;

                                            for (FieldComboData fieldComboData : fieldComboDataList) {
                                                if (fieldComboDataArr.length != dataArrIndex && fieldComboDataArr[dataArrIndex] != null && fieldComboDataArr[dataArrIndex].replaceAll("\"", "").trim().equalsIgnoreCase("true")) {
                                                    fieldComboDataStr += fieldComboData.getId() + ",";
                                                }
                                                dataArrIndex++;
                                            }

                                            if (!StringUtil.isNullOrEmpty(fieldComboDataStr)) {
                                                customJObj.put("Col" + params.getColnum(), fieldComboDataStr.substring(0, fieldComboDataStr.length() - 1));
                                                customJObj.put("fieldDataVal", fieldComboDataStr.substring(0, fieldComboDataStr.length() - 1));
                                            } else {
                                                continue;
                                            }
                                        } else {
                                            customJObj.put("Col" + params.getColnum(), recarr[jSONObject.getInt("csvindex")].replaceAll("\"", "").trim());
                                            customJObj.put("fieldDataVal", recarr[jSONObject.getInt("csvindex")].replaceAll("\"", "").trim());
                                        }

                                        customJObj.put("Custom_" + params.getFieldlabel(), "Col" + params.getColnum());

                                        customJArr.put(customJObj);
                                    }
                                }
                            }//Create Custom Field Array
                            customfield = customJArr.toString();
                            if (!StringUtil.isNullOrEmpty(customfield) && !customfield.equals("[]")) {
                                JSONArray jcustomarray = new JSONArray(customfield);
                                HashMap<String, Object> customrequestParams = new HashMap<String, Object>();
                                customrequestParams.put("customarray", jcustomarray);
                                customrequestParams.put("modulename", Constants.Acc_Product_modulename);
                                customrequestParams.put("moduleprimarykey", Constants.Acc_Productid);
                                customrequestParams.put("modulerecid", product.getID());
                                customrequestParams.put("moduleid", Constants.Acc_Product_Master_ModuleId);//isFixedAsset ? Constants.Acc_FixedAssets_AssetsGroups_ModuleId:
                                customrequestParams.put("companyid", companyid);
                                productMap.put("id", product.getID());
                                customrequestParams.put("customdataclasspath", Constants.Acc_Product_custom_data_classpath);
                                KwlReturnObject customDataresult = fieldDataManagercntrl.setCustomData(customrequestParams);
                                if (customDataresult != null && customDataresult.getEntityList().size() > 0) {
                                    productMap.put("accproductcustomdataref", product.getID());
                                    productresult = accProductObj.updateProduct(productMap);
                                }
                                HashMap<String, Object> customHistoryParams = new HashMap<String, Object>();
                                customHistoryParams.put("productId", product.getID());
                                customHistoryParams.put("customarray", jcustomarray);
                                requestParams.put("gstapplieddate", gstapplicabledate!=null?gstapplicabledate:product.getAsOfDate());                                    
                                maintainCustomFieldHistoryForProduct(requestParams, customHistoryParams);
                            }
                        }// Product Code check                        
                        
                        // Tax Mapping for India Company Company Level Tax Mapp to Product Default.                        
//                        if (extraPref.getLineLevelTermFlag() == IndiaComplianceConstants.LINELEVEL_FLAG_ON) {
//                            HashMap<String, String> mapDataInd = new HashMap<String, String>();
//                            mapDataInd.put("productid", product.getID());
//                            mapDataInd.put("companyid", extraPref.getCompany().getCompanyID());
//                            Map<String, List<String>> mapDefaultTerm = new HashMap<String, List<String>>();
//                            mapDefaultTerm.put("Purchases", inputDefaultTerms);
//                            mapDefaultTerm.put("Sales", outputDefaultTerms);
//                            if (!updateExistingRecordFlag) {
//                                accProductObj.mapCompanyTaxToProductTax(mapDataInd, product, mapDefaultTerm); //send Default Terms data for addinng default terms  while importing product Input/ Output terms  
//                            } else {
//                                accProductObj.UpdateTaxToProductTax(mapDataInd, product, mapDefaultTerm); //send Default Terms data for addinng default terms  while importing product Input/ Output terms     
//                            }
//                        }
                        
                        //BOM Product Map
                        JSONArray bomarray = new JSONArray();
                        JSONObject bomobj = new JSONObject();
                        bomobj.put("bomCode", bomCode);
                        bomobj.put("bomName", bomName);
                        bomobj.put("isDefaultBOM", isDefaultBOM);
                        bomobj.put("bomproductpid", bompid);
                        bomobj.put("bomproductname", bomProductName);
                        bomobj.put("bomproductdesc", bomProductDesc);
                        bomobj.put("bomProductType", bomProductType);
                        bomobj.put("bomProductPurchasePrice", bomProductPurchasePrice);
                        bomobj.put("compQuantity", compQuantity);
                        bomobj.put("comppercent", comppercent);
                        bomobj.put("compactualQuantity", compactualQuantity);
                        bomobj.put("comptotal", comptotal);
                        bomobj.put("recylequantity", recylequantity);
                        bomobj.put("inventoryquantiy", compactualQuantity);  //Inventory Quantiy & Actual Quantity is the same
                        bomobj.put("remainingquantity", remainingquantity);
                        bomarray.put(bomobj);
//                        System.out.println(bomProductName);
                        // for calculating total cost of bom product
                        productInitialPurchasePrise += comptotal;

                        //Save BOM Products of an Assembly Product  
                        if (product != null) {
                            if (product.getProducttype().getID().equals(Producttype.ASSEMBLY) || product.getProducttype().getID().equals(Producttype.CUSTOMER_ASSEMBLY)) {
                                saveImportAssemblyProduct(bomarray, product, updateExistingRecordFlag, companyid);
                            }
                        } else {
                            if (!prevProductCode.equalsIgnoreCase(productID)) {  //ERP-11477
                                throw new AccountingException("This is not an Assembly Product.");
                            } else {
                                throw new AccountingException("Product ID '" + productID + "' already exists.");   //ERP-11477
                            }
                        }
                    } catch (Exception ex) {// Inner Try-Catch
                        failed++;
                        String errorMsg = ex.getMessage(), invalidColumns = "";
                        try {
                            JSONObject errorLog = new JSONObject(errorMsg);
                            errorMsg = errorLog.getString("errorMsg");
                            invalidColumns = errorLog.getString("invalidColumns");
                        } catch (JSONException jex) {
                        }
                        failedRecords.append("\n" + accProductModuleService.createCSVrecord(recarr) + "\"" + errorMsg.replaceAll("\"", "") + "\"");
                    }
                    total++;
                }
                cnt++;
                if (count == limit) {
                    txnManager.commit(status);
                    insertAuditLog(AuditAction.PRODUCT_CREATION, record, importLogDetailsMap, userId);
                    importLogDetailsMap.clear();
                    // for reset counter of transaction limit
                    count = 1;
                    def = new DefaultTransactionDefinition();
                    def.setName("import_Tx");
                    def.setPropagationBehavior(TransactionDefinition.PROPAGATION_REQUIRED);
                    status = txnManager.getTransaction(def);
                } else {
                    count++;
                }
            }//while

            HashMap<String, Object> dataMap = new HashMap<>();
            dataMap.put("isdefaultbom", true);
            dataMap.put("currencyid", currencyId);
            for (String productId : productIdSet) {
                double assemblyProductPrice = 0;
                dataMap.put(Constants.productid, productId);
                KwlReturnObject retObj = accProductObj.getAssemblyItems(dataMap);
                List<ProductAssembly> list = retObj.getEntityList();
                Iterator itr = list.iterator();
                while (itr.hasNext()) {
                    Object[] row = (Object[]) itr.next();
                    ProductAssembly passembly = (ProductAssembly) row[0];
                    double purchaseprice = row[1] == null ? 0 : (Double) row[1];
                    double percentage = passembly.getPercentage();
                    double quantity = passembly.getQuantity();
                    assemblyProductPrice += quantity * purchaseprice * (percentage / 100);
                }


                // for saving BOM initial purchase price
                if (assemblyProductPrice > 0) {
                    HashMap<String, Object> initialPurchasePriceMap = new HashMap<String, Object>();
                    initialPurchasePriceMap.put("productid", productId);
                    initialPurchasePriceMap.put("companyid", companyid);
                    initialPurchasePriceMap.put("carryin", true);
                    initialPurchasePriceMap.put("price", assemblyProductPrice);
                    initialPurchasePriceMap.put("applydate", ondate);
                    initialPurchasePriceMap.put("affecteduser", "-1");
                    initialPurchasePriceMap.put("currencyid", currencyId);
                    Map<String, Object>  paramsMap = new HashMap();
                    paramsMap.put("id", productId);
                    UnitOfMeasure unitOfMeasure = (UnitOfMeasure) kwlCommonTablesDAOObj.getRequestedObjectFields(Product.class, new String[]{"unitOfMeasure"}, paramsMap);
                    initialPurchasePriceMap.put("uomid", unitOfMeasure.getID());
                    accProductObj.addPriceList(initialPurchasePriceMap);
                }
                
            }

            if (failed > 0) {
                createFailureFiles(fileName, failedRecords, ".csv");
            }

            int success = total - failed;
            if (total == 0) {
                msg = "Empty file.";
            } else if (success == 0) {
//                issuccess = false;
                msg = "Failed to import all the records.";
            } else if (success == total) {
                msg = "All records are imported successfully.";
            } else {
                msg = "Imported " + success + " record" + (success > 1 ? "s" : "") + " successfully";
                msg += (failed == 0 ? "." : " and failed to import " + failed + " record" + (failed > 1 ? "s" : "") + ".");
            }

            try {
                txnManager.commit(status);
                insertAuditLog(AuditAction.PRODUCT_CREATION, record, importLogDetailsMap, userId);
                importLogDetailsMap.clear();
            } catch (Exception ex) {
                commitedEx = true;
                throw ex;
            }
        } catch (Exception ex) {// Outer Try-Catch
            if (!commitedEx) { //if exception occurs during commit then dont call rollback
                txnManager.rollback(status);
            }
            issuccess = false;
            msg = "" + ex.getMessage();

            Logger.getLogger(accProductController.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
            throw new AccountingException("Error While Importing Records.");
        } finally {
            fileInputStream.close();
            csvReader.close();

            DefaultTransactionDefinition ldef = new DefaultTransactionDefinition();
            ldef.setName("import_Tx");
            ldef.setPropagationBehavior(TransactionDefinition.PROPAGATION_REQUIRED);
            TransactionStatus lstatus = txnManager.getTransaction(ldef);

            try {
                //Insert Integration log
                HashMap<String, Object> logDataMap = new HashMap<String, Object>();
                logDataMap.put("FileName", getActualFileName(fileName));
                logDataMap.put("StorageName", fileName);
                logDataMap.put("Log", msg);
                logDataMap.put("Type", "csv");
                logDataMap.put("FailureFileType", failed>0?"csv":"");
                logDataMap.put("TotalRecs", total);
                logDataMap.put("Rejected", failed);
                logDataMap.put("Module", Constants.Acc_Product_Master_ModuleId);
                logDataMap.put("ImportDate", new Date());
                logDataMap.put("User", userId);
                logDataMap.put("Company", companyid);
                logDataMap.put("Id", logId);
                importDao.saveImportLog(logDataMap);
                
                String tableName = importDao.getTableName(fileName);
                importDao.removeFileTable(tableName); // Remove table after importing all records
                
                txnManager.commit(lstatus);
            } catch (Exception ex) {
                try {  //ERP-12252
                    txnManager.rollback(lstatus);
                } catch (Exception ee) {
                    Logger.getLogger(accProductController.class.getName()).log(Level.SEVERE, null, ee);
                }
                Logger.getLogger(accProductController.class.getName()).log(Level.SEVERE, null, ex);
            }

            try {
                returnObj.put("success", issuccess);
                returnObj.put("msg", msg);
                returnObj.put("totalrecords", total);
                returnObj.put("successrecords", total - failed);
                returnObj.put("failedrecords", failed);
                returnObj.put("filename", getActualFileName(fileName));
                returnObj.put("Module", Constants.Acc_Product_Master_ModuleId);
            } catch (JSONException ex) {
                Logger.getLogger(accProductController.class.getName()).log(Level.SEVERE, null, ex);
            }
        }//finally
        return returnObj;
    }
    
    
    public JSONObject importAssemblyProductWithoutBOMCSV(HashMap<String, Object> requestParams) throws AccountingException, IOException, SessionExpiredException, JSONException {
        JSONObject returnObj = new JSONObject();
        try {
            returnObj = saveAssemblyProductWithoutBOM(requestParams);   //SDP-11688
        } catch (Exception ex) {
            Logger.getLogger(Importproduct.class.getName()).log(Level.SEVERE, null, ex);
        }
        return returnObj;
    }
    
//    @Transactional(propagation = Propagation.REQUIRED)
    private JSONObject saveAssemblyProductWithoutBOM(HashMap<String, Object> requestParams) throws AccountingException, IOException, SessionExpiredException, JSONException {
        JSONObject returnObj = new JSONObject();
        DefaultTransactionDefinition def = new DefaultTransactionDefinition();
        def.setName("import_Tx");
        def.setPropagationBehavior(TransactionDefinition.PROPAGATION_REQUIRED);
        TransactionStatus status = txnManager.getTransaction(def);
        boolean commitedEx = false;
        boolean issuccess = true;
        boolean isCurrencyColum = false;
        Product product = null;
        String prevProductCode = "";  //To Compare with new / next record in CSV / XLS
        String msg = "";
        String customfield = "";
        String fileName = null;
        double productInitialPurchasePrise = 0; // Product Initial Purchase Price     
        Date ondate = new Date();
        String productPurchasePrice = ""; //Product Sales Price
        String productSalesPrice = ""; //Product Sales Price
        HashMap<String, Object> productMap = null;  //Product Hashmap
        KwlReturnObject productresult = null;
        FileInputStream fileInputStream = null;
        CsvReader csvReader = null;
        int total = 0, failed = 0;
        String companyid = requestParams.get("companyid").toString();
        String currencyId = requestParams.get("currencyId").toString();
        String userId = requestParams.get("userid").toString();
        SimpleDateFormat df = new SimpleDateFormat("MMMM d, yyyy hh:mm:ss aa");
        // DateFormat df = (DateFormat) requestParams.get("dateFormat");
        JSONObject jobj = new JSONObject();
        jobj = (JSONObject) requestParams.get("jobj");
        String masterPreference = requestParams.get("masterPreference").toString();
        String delimiterType = requestParams.get("delimiterType").toString();
        int limit = Constants.Transaction_Commit_Limit;
        int count = 1;
        boolean updateExistingRecordFlag = false;
        if (!StringUtil.isNullOrEmpty(requestParams.get("updateExistingRecordFlag").toString())) {
            updateExistingRecordFlag = Boolean.FALSE.parseBoolean(requestParams.get("updateExistingRecordFlag").toString());
        }        
        String logId = null;
        try {
            KwlReturnObject jeresult = accountingHandlerDAOobj.getObject(User.class.getName(), userId);
            User user = (User) jeresult.getEntityList().get(0);                 
            String[] recarr = null;
            logId = addPendingImportLog(requestParams);
            Date newUserDate = new Date();
            String dateFormat = null, dateFormatId = requestParams.get("dateFormat").toString();
            if (!StringUtil.isNullOrEmpty(dateFormatId)) {
                KwlReturnObject kdfObj = accountingHandlerDAOobj.getObject(KWLDateFormat.class.getName(), dateFormatId);
                KWLDateFormat kdf = (KWLDateFormat) kdfObj.getEntityList().get(0);
                dateFormat = kdf != null ? kdf.getJavaForm() : null;
            }
            DateFormat df1 = new SimpleDateFormat(dateFormat);
            KwlReturnObject CompanyPrefResult = accountingHandlerDAOobj.getObject(CompanyAccountPreferences.class.getName(), companyid);
            CompanyAccountPreferences companyAccountPreferences = (CompanyAccountPreferences) CompanyPrefResult.getEntityList().get(0);
            Date bookBookBeginningDate=companyAccountPreferences.getBookBeginningFrom();
            KwlReturnObject custumObjresult = accountingHandlerDAOobj.getObject(Company.class.getName(), companyid);
            Company company1 = (Company) custumObjresult.getEntityList().get(0);
            if (company1.getCreator() != null) {
                newUserDate = authHandler.getUserNewDate(null, company1.getCreator().getTimeZone()!=null?company1.getCreator().getTimeZone().getDifference() : company1.getTimeZone().getDifference());
            }
            fileName = jobj.getString("filename");
            fileInputStream = new FileInputStream(jobj.getString("FilePath"));
            csvReader = new CsvReader(new InputStreamReader(fileInputStream), delimiterType);
            String record = "";
            int cnt = 0;
            ExtraCompanyPreferences extraPref = (ExtraCompanyPreferences) kwlCommonTablesDAOObj.getClassObject("com.krawler.common.admin.ExtraCompanyPreferences", companyid);
            boolean isCurrencyCode=extraPref.isCurrencyCode();
            JSONObject columnPrefJObj = null;
            if (!StringUtil.isNullOrEmpty(extraPref.getColumnPref())) {
                columnPrefJObj = new JSONObject((String) extraPref.getColumnPref());
            }
            StringBuilder failedRecords = new StringBuilder();

            HashMap<String, Integer> columnConfig = new HashMap<String, Integer>();
             Map<Integer, Frequency> frequencyMap = getCCFrequencyMap();
            JSONArray jSONArray = jobj.getJSONArray("resjson");
            for (int i = 0; i < jSONArray.length(); i++) {
                JSONObject jSONObject = jSONArray.getJSONObject(i);
                columnConfig.put(jSONObject.getString("dataindex"), jSONObject.getInt("csvindex"));
            }
            // the below line is commited due to not proparely showing header in error log file . ERP-11483
            // failedRecords.append(createCSVrecord(headArrayList.toArray()) + "\"Error Message\""); // failedRecords.append("\"Row No.\","+createCSVrecord(fileData)+"\"Error Message\"");
            HashMap currencyMap = getCurrencyMap(isCurrencyCode);
            Set<String> productIdSet=new HashSet<>();
            Map<String, String> importLogDetailsMap = new HashMap<String, String>();
            HashMap<String, String> dupmap = new HashMap<String, String>();
            while (csvReader.readRecord()) {
                recarr = csvReader.getValues();
                if (cnt == 0) {
                    failedRecords.append(createCSVrecord(recarr)).append("\"Error Message\"");
                }
                if (cnt != 0) {
                    recarr = csvReader.getValues();

                    try {
//                        currencyId = currencyId;   //sessionHandlerImpl.getCurrencyID(request);

                        /*-------------------------------Sub-product Details (BOM)----------------------------------*/
                        /*If BOM Product ID OR Quantity is not available then Global Product Details will not save, */
                        //Build Of Material (BOM) Details
                        if (columnConfig.containsKey("bompid")) {
                            throw new AccountingException("This is a Assembly Product without BOM. So import the file without BOM details.");    //In case of without BOM file, BOM Product column should not be there. We cannot validatate this on JS side.
                        }
//
//                        //Get BOM Product Name
//                        String bomProductName = "";
//                        String bompid = ""; //Used to read Product Price.
//                        Product bomproduct = getProductByProductName(companyid, bomProductID);
//                        if (bomproduct != null) {
//                            bomProductName = bomproduct.getName();
//                            bompid = bomproduct.getID();
//                        } else {
//                            throw new AccountingException("Product Name is not found for " + bomProductID);
//                        }
//
//                        //Get BOM Product Description
//                        String bomProductDesc = "";
//                        if (bomproduct != null) {
//                            bomProductDesc = bomproduct.getDescription();
//                        } else {
//                            throw new AccountingException("Product Description is not found for " + bomProductID);
//                        }
//
//                        //Get BOM Product Type
//                        String bomProductType = "";
//                        boolean isBomSerialActivated = false;
//                        Producttype bomproducttype = getProductTypeByProductID(bomProductID);
//                        if (bomproducttype != null) {
//                            bomProductType = bomproducttype.getID();
//                            isBomSerialActivated = bomproduct.isIsSerialForProduct();
//                        } else {
//                            throw new AccountingException("Product Type is not found for " + bomProductID);
//                        }
//
//                        //Get BOM Product Initial Purchase Price
//                        double bomProductPurchasePrice = 0;
//                        KwlReturnObject purchase = accProductObj.getProductPrice(bompid, true, null, "", ""); //True for Purchase Price, False for Sales Price
//                        bomProductPurchasePrice = purchase.getEntityList().get(0) == null ? 0 : ((Double) purchase.getEntityList().get(0)).doubleValue();    //Converted into primitive data type
//
//                        //Component Quantity, Actual Quantity, Total
//                        String componentQuantity = "";
//                        double compQuantity = 0;
//                        String componentpercent = "";
//                        double comppercent = 100;
//                        double compactualQuantity = 0;
//                        double comptotal = 0;
//                        double recylequantity = 0;
//                        double inventoryquantiy = 0;
//                        double remainingquantity = 0;
//                        
//                        if (columnConfig.containsKey("bomquantity")) {
//                            try {
//                                componentQuantity = recarr[(Integer) columnConfig.get("bomquantity")].replaceAll("\"", "").trim();
//                                compQuantity = Double.parseDouble(componentQuantity);
//                                if (compQuantity != 0) {
//                                    if (columnConfig.containsKey("bompercent")) {
//                                        try {
//                                            componentpercent = recarr[(Integer) columnConfig.get("bompercent")].replaceAll("\"", "").trim();
//
//                                            comppercent = Double.parseDouble(componentpercent);
//                                            if (comppercent > 100) {
//                                                throw new AccountingException("BOM percentage should not be greater than 100%.");
//                                            } else if(isBomSerialActivated && comppercent!=100){
//                                                throw new AccountingException("Serial is activated for '"+bomProductID+"'. So BOM percentage should be 100%."); //ERP-26481
//                                            }
//                                            compactualQuantity = compQuantity * (comppercent / 100);
//                                            comptotal = compQuantity * bomProductPurchasePrice * (comppercent / 100);
//                                        } catch (NumberFormatException ne) {
//                                            throw new AccountingException("Invalid BOM Component percent. It should be greater than zero");
//                                        } catch (ArrayIndexOutOfBoundsException ae) {
//                                            comppercent = 100;  //If user do not enter BOM % then default value ll be 100.
//                                        }
//                                    } else {    //Default Percentage
//                                        compactualQuantity = compQuantity * 1; //componentpercent = 100
//                                        comptotal = compQuantity * bomProductPurchasePrice * (comppercent / 100);
//                                    }
//                                } else {
//                                    throw new AccountingException("Component Quantity should be greater than zero.");
//
//                                }
//                            } catch (NumberFormatException e) {
//                                throw new AccountingException("Invalid BOM Quantity.");
//                            } catch (ArrayIndexOutOfBoundsException ae) {
//                                throw new AccountingException("Invalid BOM Quantity.");
//                            }
//                        }//Component Quantity

                        /*-------------------------------Sub-product Details (BOM)----------------------------------*/
                        //Get Product ID
                        String productID = "";
                        if (columnConfig.containsKey("pid")) {
                            productID = recarr[(Integer) columnConfig.get("pid")].replaceAll("\"", "").trim();
                            if (StringUtil.isNullOrEmpty(productID)) {
                                throw new AccountingException("Product ID is not available");
                            }
                        } else {
                            throw new AccountingException("Product ID column is not found");
                        }
                        
                        //To avoid duplicate BOM Product for Assembly Product.  //ERP-26471
//                        if(dupmap.containsKey(bomProductID) && ((String)dupmap.get(bomProductID)).equals(productID)){
//                            throw new AccountingException("BOM Product '"+bomProductID +"' is already exist in file for Assembly Product '"+productID+"'.");
//                        } else {
//                            dupmap.put(bomProductID, productID);
//                        }
                        
                        /**
                         * while Importing Assembly product Validate "Input terms" line level terms data
                         */
                        List<String> inputDefaultTerms = new ArrayList<String>();
                        if (extraPref.getLineLevelTermFlag()==1 && columnConfig.containsKey("InputTax")) {
                            String temp = recarr[(Integer) columnConfig.get("InputTax")].replaceAll("\"", "").trim(); 
                            if (temp != null && !StringUtil.isNullOrEmpty(temp)) {
                               inputDefaultTerms.addAll(Arrays.asList(temp.split(","))); // Get Input terms seperated by coma from Import file
                               Map<String, Object> requestData = new HashMap<String, Object>();
                                requestData.put("companyid", requestParams.get("companyid").toString());
                                requestData.put("colData", temp);
                                requestData.put("isOutputTax", false);//ERP-29870
                                List<String> termsList = importDao.getLineLevelTermPresentByName(requestData);// Checking given input terms present in system or not
                                if (termsList.size() > 0) { 
                                    String invalidData = Arrays.toString(termsList.toArray());
                                    throw new AccountingException(" Input Tax column Data is not valid. Input tax should be present in system: " + invalidData);
                                }
                            }
                        }
                        /**
                         * while Importing Assembly product Validate "Output terms" line level terms data
                         */
                        List<String> outputDefaultTerms = new ArrayList<String>();
                        if (extraPref.getLineLevelTermFlag()==1 && columnConfig.containsKey("OutputTax")) {
                            String temp = recarr[(Integer) columnConfig.get("OutputTax")].replaceAll("\"", "").trim(); // Get Output terms seperated by coma from Import file
                            if (temp != null && !StringUtil.isNullOrEmpty(temp)) {
                             outputDefaultTerms.addAll(Arrays.asList(temp.split(","))); // Get Output terms seperated by coma from Import file
                             Map<String, Object> requestData = new HashMap<String, Object>();
                                requestData.put("companyid", requestParams.get("companyid").toString());
                                requestData.put("colData", temp);
                                requestData.put("isOutputTax", true);//ERP-29870
                                List<String> termsList = importDao.getLineLevelTermPresentByName(requestData);  // Checking given Output terms present in system or not
                                if (termsList.size() > 0) {
                                    String invalidData = Arrays.toString(termsList.toArray());
                                    throw new AccountingException(" Output Tax column Data is not valid. Output tax should be present in system: " + invalidData);
                                }
                            }
                        }
                        if (!prevProductCode.equalsIgnoreCase(productID)) { //if Multiple BOM Components are associated with Single Product then we ll not hold global data again for same product
                            // for saving BOM initial purchase price
//                            if (!prevProductCode.equalsIgnoreCase("") && productInitialPurchasePrise > 0 && product != null) {
//                                if (productInitialPurchasePrise > 0) {
//                                    HashMap<String, Object> initialPurchasePriceMap = new HashMap<String, Object>();
//                                    initialPurchasePriceMap.put("productid", product.getID());
//                                    initialPurchasePriceMap.put("companyid", companyid);
//                                    initialPurchasePriceMap.put("carryin", true);
//                                    initialPurchasePriceMap.put("price", productInitialPurchasePrise);
//                                    initialPurchasePriceMap.put("applydate", ondate);
//                                    initialPurchasePriceMap.put("affecteduser", "-1");
//                                    initialPurchasePriceMap.put("currencyid", currencyId);
//                                    accProductObj.addPriceList(initialPurchasePriceMap);
//                                }
//                            }

                            productInitialPurchasePrise = 0;
                            prevProductCode = productID;
                            //Get Product Type 
                            String productTypeID = "";
                            if (columnConfig.containsKey("type")) {
                                String productTypeName = recarr[(Integer) columnConfig.get("type")].replaceAll("\"", "").trim();
                                if (StringUtil.isNullOrEmpty(productTypeName)) {
                                    prevProductCode = "";
                                    throw new AccountingException("Product Type is not available");
                                }

                                Producttype producttype = getProductTypeByName(productTypeName);
                                if (producttype != null) {
                                    productTypeID = producttype.getID();
                                } else {
                                    prevProductCode = "";
                                    throw new AccountingException("Product Type is not found for " + productTypeName);
                                }
                            } else if(!updateExistingRecordFlag) {
                                throw new AccountingException("Product Type column is not found.");
                            }

                            //Get Product Name
                            String productName = "";
                            if (columnConfig.containsKey("productname")) {
                                productName = recarr[(Integer) columnConfig.get("productname")].replaceAll("\"", "").trim();
                                if (StringUtil.isNullOrEmpty(productName)) {
                                    prevProductCode = "";
                                    throw new AccountingException("Product Name is not available");
                                }
                            } else if(!updateExistingRecordFlag) {
                                throw new AccountingException("Product Name column is not found.");
                            }

                            //Get Product Description
                            String productDescription = "";
                            if (columnConfig.containsKey("desc")) {
                                productDescription = recarr[(Integer) columnConfig.get("desc")].replaceAll("\"", "").trim();
                            }
                            
                            /*
                            * Check for Stock UOM, Casing UOM, Inner UOM.
                            * Casing Uom, Inner Uom and Stock Uom must be different.
                            */ 
                            String stockUOM = "", casingUOM = "", innerUOM = "";
                            if(columnConfig.containsKey("uomname") && columnConfig.get("uomname")!=null){
                                stockUOM = recarr[(Integer) columnConfig.get("uomname")].replaceAll("\"", "").trim();
                            }
                            if(columnConfig.containsKey("casinguom") && columnConfig.get("casinguom")!=null){
                                casingUOM = recarr[(Integer) columnConfig.get("casinguom")].replaceAll("\"", "").trim();
                            }
                            if(columnConfig.containsKey("inneruom") && columnConfig.get("inneruom")!=null){
                                innerUOM = recarr[(Integer) columnConfig.get("inneruom")].replaceAll("\"", "").trim();
                            }
                            if((!StringUtil.isNullOrEmptyWithTrim(casingUOM) && casingUOM.equalsIgnoreCase(innerUOM)) || 
                            (!StringUtil.isNullOrEmptyWithTrim(casingUOM) && casingUOM.equalsIgnoreCase(stockUOM)) ||
                            (!StringUtil.isNullOrEmptyWithTrim(innerUOM) && innerUOM.equalsIgnoreCase(stockUOM))){
                                throw new AccountingException("Casing Uom, Inner Uom and Stock Uom cannot be same.");
                            }
                            
                            //Get Product UOM ID
                            String productUOMID = "";
                            UnitOfMeasure uom = null;
                            if (columnConfig.containsKey("uomname")) {
                                String productUOMName = recarr[(Integer) columnConfig.get("uomname")].replaceAll("\"", "").trim();
                                if (!StringUtil.isNullOrEmpty(productUOMName)) {
                                    uom = getUOMByName(productUOMName, companyid);
                                    if (uom != null) {
                                        productUOMID = uom.getID();
                                    } else {
                                        if (masterPreference.equalsIgnoreCase("2")) {
                                            HashMap<String, Object> uomMap = new HashMap<String, Object>();
                                            uomMap.put("uomname", StringUtil.DecodeText(productUOMName));
                                            uomMap.put("uomtype", StringUtil.DecodeText(productUOMName));
                                            uomMap.put("precision", 0);
                                            uomMap.put("companyid", companyid);

                                            KwlReturnObject uomresult = accUomObj.addUoM(uomMap);
                                            uom = (UnitOfMeasure) uomresult.getEntityList().get(0);
                                            productUOMID = uom.getID();
                                        } else {
                                            if (masterPreference.equalsIgnoreCase("1")) {
                                                productUOMID = "";
                                            } else {
                                                prevProductCode = "";
                                                throw new AccountingException("Product Stock Unit Of Measure is not found for " + productUOMName);
                                            }
                                        }
                                    }
                                } else {
                                    if (masterPreference.equalsIgnoreCase("1")) {
                                        productUOMID = "";
                                    } else {
                                        if (productTypeID.equals(Producttype.ASSEMBLY)) {
                                            productUOMID = "";
                                        } else {
                                            prevProductCode = "";
                                            throw new AccountingException("Product Stock Unit Of Measure is not available");
                                        }
                                    }
                                }
                            } else if(!updateExistingRecordFlag) {
                                throw new AccountingException("Product Stock UOM column is not found.");
                            }

                            //Get Product Casing UOM ID
                            String casingUoMID = "";
                            UnitOfMeasure casinguom = null;
                            if (columnConfig.containsKey("casinguom")) {
                                String productUOMName = recarr[(Integer) columnConfig.get("casinguom")].replaceAll("\"", "").trim();
                                if (!StringUtil.isNullOrEmpty(productUOMName)) {
                                    casinguom = getUOMByName(productUOMName, companyid);
                                    if (casinguom != null) {
                                        casingUoMID = casinguom.getID();
                                    } else {
                                        if (masterPreference.equalsIgnoreCase("2")) {
                                            HashMap<String, Object> uomMap = new HashMap<String, Object>();
                                            uomMap.put("uomname",StringUtil.DecodeText(productUOMName));
                                            uomMap.put("uomtype",StringUtil.DecodeText(productUOMName));
                                            uomMap.put("precision", 0);
                                            uomMap.put("companyid", companyid);
                                            KwlReturnObject uomresult = accUomObj.addUoM(uomMap);
                                            casinguom = (UnitOfMeasure) uomresult.getEntityList().get(0);
                                            casingUoMID = casinguom.getID();
                                        } else {
                                            if (masterPreference.equalsIgnoreCase("1")) {
                                                casingUoMID = "";
                                            } else {
                                                prevProductCode = "";
                                                throw new AccountingException("Product Unit Of Measure is not found for " + productUOMName);
                                            }
                                        }
                                    }
                                } else {
                                    if (masterPreference.equalsIgnoreCase("1")) {
                                        casingUoMID = "";
                                    } else {
                                        if (productTypeID.equals(Producttype.ASSEMBLY)) {
                                            casingUoMID = "";
                                        } else {
                                            prevProductCode = "";
                                            throw new AccountingException("Product  Casing Unit Of Measure is not available");
                                        }
                                    }
                                }
                            } else if(!updateExistingRecordFlag) {
                                casingUoMID = "";
                            }

                            //Get Product Inner UOM ID
                            String innerUoMID = "";
                            UnitOfMeasure inneruom = null;
                            if (columnConfig.containsKey("inneruom")) {
                                String productUOMName = recarr[(Integer) columnConfig.get("inneruom")].replaceAll("\"", "").trim();
                                if (!StringUtil.isNullOrEmpty(productUOMName)) {
                                    inneruom = getUOMByName(productUOMName, companyid);
                                    if (inneruom != null) {
                                        innerUoMID = inneruom.getID();
                                    } else {
                                        if (masterPreference.equalsIgnoreCase("2")) {
                                            HashMap<String, Object> uomMap = new HashMap<String, Object>();
                                            uomMap.put("uomname", StringUtil.DecodeText(productUOMName));
                                            uomMap.put("uomtype", StringUtil.DecodeText(productUOMName));
                                            uomMap.put("precision", 0);
                                            uomMap.put("companyid", companyid);

                                            KwlReturnObject uomresult = accUomObj.addUoM(uomMap);
                                            inneruom = (UnitOfMeasure) uomresult.getEntityList().get(0);
                                            innerUoMID = inneruom.getID();
                                        } else {
                                            if (masterPreference.equalsIgnoreCase("1")) {
                                                innerUoMID = "";
                                            } else {
                                                prevProductCode = "";
                                                throw new AccountingException("Product Inner Unit Of Measure is not found for " + productUOMName);
                                            }
                                        }
                                    }
                                } else {
                                    if (masterPreference.equalsIgnoreCase("1")) {
                                        innerUoMID = "";
                                    } else {
                                        if (productTypeID.equals(Producttype.ASSEMBLY)) {
                                            innerUoMID = "";
                                        } else {
                                            prevProductCode = "";
                                            throw new AccountingException("Product Inner Unit Of Measure is not available");
                                        }
                                    }
                                }
                            } else if(!updateExistingRecordFlag) {
                                innerUoMID = "";
                            }

                            //Get Product Purchase UOM ID
                            String PurchaseUOMID = "";
                            UnitOfMeasure purchaseruom = null;
                            if (columnConfig.containsKey("purchaseuom")) {
                                String productUOMName = recarr[(Integer) columnConfig.get("purchaseuom")].replaceAll("\"", "").trim();
                                if (!StringUtil.isNullOrEmpty(productUOMName)) {
                                    purchaseruom = getUOMByName(productUOMName, companyid);
                                    if (purchaseruom != null) {
                                        PurchaseUOMID = purchaseruom.getID();
                                    } else {
                                        if (masterPreference.equalsIgnoreCase("2")) {
                                            HashMap<String, Object> uomMap = new HashMap<String, Object>();
                                            uomMap.put("uomname",StringUtil.DecodeText(productUOMName));
                                            uomMap.put("uomtype",StringUtil.DecodeText(productUOMName));
                                            uomMap.put("precision", 0);
                                            uomMap.put("companyid", companyid);

                                            KwlReturnObject uomresult = accUomObj.addUoM(uomMap);
                                            purchaseruom = (UnitOfMeasure) uomresult.getEntityList().get(0);
                                            PurchaseUOMID = purchaseruom.getID();
                                        } else {
                                            if (masterPreference.equalsIgnoreCase("1")) {
                                                PurchaseUOMID = "";
                                            } else {
                                                prevProductCode = "";
                                                throw new AccountingException("Product Purchase Unit Of Measure is not found for " + productUOMName);
                                            }
                                        }
                                    }
                                } else {
                                    if (masterPreference.equalsIgnoreCase("1")) {
                                        PurchaseUOMID = "";
                                    } else {
                                        if (productTypeID.equals(Producttype.ASSEMBLY)) {
                                            PurchaseUOMID = "";
                                        } else {
                                            prevProductCode = "";
                                            throw new AccountingException("Product Purchase Unit Of Measure is not available");
                                        }
                                    }
                                }
                            } else if(!updateExistingRecordFlag) {
                                PurchaseUOMID = "";
                            }

                            //Get Product Sales UOM ID
                            String SalesUOMID = "";
                            UnitOfMeasure salesuom = null;
                            if (columnConfig.containsKey("salesuom")) {
                                String productUOMName = recarr[(Integer) columnConfig.get("salesuom")].replaceAll("\"", "").trim();
                                if (!StringUtil.isNullOrEmpty(productUOMName)) {
                                    salesuom = getUOMByName(productUOMName, companyid);
                                    if (salesuom != null) {
                                        SalesUOMID = salesuom.getID();
                                    } else {
                                        if (masterPreference.equalsIgnoreCase("2")) {
                                            HashMap<String, Object> uomMap = new HashMap<String, Object>();
                                            uomMap.put("uomname",StringUtil.DecodeText(productUOMName));
                                            uomMap.put("uomtype", StringUtil.DecodeText(productUOMName));
                                            uomMap.put("precision", 0);
                                            uomMap.put("companyid", companyid);

                                            KwlReturnObject uomresult = accUomObj.addUoM(uomMap);
                                            salesuom = (UnitOfMeasure) uomresult.getEntityList().get(0);
                                            SalesUOMID = salesuom.getID();
                                        } else {
                                            if (masterPreference.equalsIgnoreCase("1")) {
                                                SalesUOMID = "";
                                            } else {
                                                prevProductCode = "";
                                                throw new AccountingException("Product Sales Unit Of Measure is not found for " + productUOMName);
                                            }
                                        }
                                    }
                                } else {
                                    if (masterPreference.equalsIgnoreCase("1")) {
                                        SalesUOMID = "";
                                    } else {
                                        if (productTypeID.equals(Producttype.ASSEMBLY)) {
                                            SalesUOMID = "";
                                        } else {
                                            prevProductCode = "";
                                            throw new AccountingException("Product Sales Unit Of Measure is not available");
                                        }
                                    }
                                }
                            } else if(!updateExistingRecordFlag) {
                                SalesUOMID = "";
                            }

                            //Get Casing UOM Value
                            String casinguomvalue = "1";
                            if (columnConfig.containsKey("casinguom_value")) {
                                casinguomvalue = recarr[(Integer) columnConfig.get("casinguom_value")].replaceAll("\"", "").trim();
                            }

                            //Get Inner UOM Value
                            String inneruomvalue = "1";
                            if (columnConfig.containsKey("inneruom_value")) {
                                inneruomvalue = recarr[(Integer) columnConfig.get("inneruom_value")].replaceAll("\"", "").trim();
                            }

                            //Get Stock UOM Value
                            String stcokuomvalue = "1";
                            if (columnConfig.containsKey("stockuom_value")) {
                                stcokuomvalue = recarr[(Integer) columnConfig.get("stockuom_value")].replaceAll("\"", "").trim();
                            }
                            
                            String costOfGoodsSoldAccountID = "";
                            if (columnConfig.containsKey("cogsaccountid")) {
                                if (!productTypeID.equals(Producttype.SERVICE)) {// If product is non service type then these values needed to validate and save 
                                    if (extraPref.isActivateMRPModule() || companyAccountPreferences.getInventoryValuationType() == 1) {// This field need only when mrp activated or inventory valuation is perpetual. In this case oit is mandatory
                                       String cogsAccountName = recarr[(Integer) columnConfig.get("cogsaccountid")].replaceAll("\"", "").trim();

                                        if (!StringUtil.isNullOrEmpty(cogsAccountName)) {
                                            Account cogsAccount = null;
                                            KwlReturnObject retObj = accAccountDAOobj.getAccountFromName(companyid, cogsAccountName);
                                            if (retObj != null && !retObj.getEntityList().isEmpty()) {
                                                cogsAccount = (Account) retObj.getEntityList().get(0);
                                            }

                                            if (cogsAccount != null) {
                                                costOfGoodsSoldAccountID = cogsAccount.getID();
                                            } else {
                                                throw new AccountingException("Cost of Goods Sold Account is not found for " + cogsAccountName + ".");
                                            }
                                        } else {
                                            throw new AccountingException("Data not found for Cost of Goods Sold Account.");
                                        }
                                    }
                                }
                            } else if (!productTypeID.equals(Producttype.SERVICE) && (extraPref.isActivateMRPModule() || companyAccountPreferences.getInventoryValuationType() == 1)) {
                                if (!updateExistingRecordFlag) {
                                    throw new AccountingException("Cost of Goods Sold Account column is not found.");
                                }
                            }

                            String inventoryAccountID = "";
                            if (columnConfig.containsKey("inventoryaccountid")) {
                                if (!productTypeID.equals(Producttype.SERVICE)) {// If product is non service type then these values needed to validate and save 
                                    if (extraPref.isActivateMRPModule() || companyAccountPreferences.getInventoryValuationType() == 1) {// This field need only when mrp activated or inventory valuation is perpetual. In this case oit is mandatory
                                        String invAccountName = recarr[(Integer) columnConfig.get("inventoryaccountid")].replaceAll("\"", "").trim();

                                        if (!StringUtil.isNullOrEmpty(invAccountName)) {
                                            Account invAccount = null;
                                            KwlReturnObject retObj = accAccountDAOobj.getAccountFromName(companyid, invAccountName);
                                            if (retObj != null && !retObj.getEntityList().isEmpty()) {
                                                invAccount = (Account) retObj.getEntityList().get(0);
                                            }

                                            if (invAccount != null) {
                                                inventoryAccountID = invAccount.getID();
                                            } else {
                                                throw new AccountingException("Inventory Account is not found for " + invAccountName + ".");
                                            }
                                        } else {
                                            throw new AccountingException("Data not found for Inventory Account.");
                                        }
                                    }
                                }
                            } else if (!productTypeID.equals(Producttype.SERVICE) && (extraPref.isActivateMRPModule() || companyAccountPreferences.getInventoryValuationType() == 1)) {
                                if (!updateExistingRecordFlag) {
                                    throw new AccountingException("Inventory Account column is not found.");
                                }
                            }

                            String stockAdjustmentAccountID = "";
                            if (columnConfig.containsKey("stockadjustmentaccountid")) {
                                if (!productTypeID.equals(Producttype.SERVICE)) {// If product is non service type then these values needed to validate and save 
                                    if (extraPref.isActivateMRPModule() || companyAccountPreferences.getInventoryValuationType() == 1) {// This field need only when mrp activated or inventory valuation is perpetual. In this case oit is mandatory
                                        String stockAdjAccountName = recarr[(Integer) columnConfig.get("stockadjustmentaccountid")].replaceAll("\"", "").trim();

                                        if (!StringUtil.isNullOrEmpty(stockAdjAccountName)) {
                                            Account stockAdjAccount = null;
                                            KwlReturnObject retObj = accAccountDAOobj.getAccountFromName(companyid, stockAdjAccountName);
                                            if (retObj != null && !retObj.getEntityList().isEmpty()) {
                                                stockAdjAccount = (Account) retObj.getEntityList().get(0);
                                            }

                                            if (stockAdjAccount != null) {
                                                stockAdjustmentAccountID = stockAdjAccount.getID();
                                            } else {
                                                throw new AccountingException("Stock Adjustment Account is not found for " + stockAdjAccountName + ".");
                                            }
                                        } else {
                                            throw new AccountingException("Data not found for Stock Adjustment Account.");
                                        }
                                    }
                                }
                            } else if (!productTypeID.equals(Producttype.SERVICE) && (extraPref.isActivateMRPModule() || companyAccountPreferences.getInventoryValuationType() == 1) && !updateExistingRecordFlag) {
                                throw new AccountingException("Stock Adjustment Account column is not found.");
                            }

                            //Product Reorder Level
                            String productReorderLevel = "";
                            if (columnConfig.containsKey("reorderlevel")) {
                                productReorderLevel = recarr[(Integer) columnConfig.get("reorderlevel")].replaceAll("\"", "").trim();
                                if (StringUtil.isNullOrEmpty(productReorderLevel)) {
                                    if (masterPreference.equalsIgnoreCase("1")) {
                                        productReorderLevel = "0";
                                    } else {
                                        if (productTypeID.equals(Producttype.ASSEMBLY)) {
                                            productReorderLevel = "0";
                                        } else {
                                            prevProductCode = "";
                                            throw new AccountingException("Product Reorder Level is not available");
                                        }
                                    }
                                }
                            } else if(!updateExistingRecordFlag) {
                                productReorderLevel = "0";
                            }

                            //Product Reorder Quantity
                            String productReorderQuantity = "";
                            if (columnConfig.containsKey("reorderquantity")) {
                                productReorderQuantity = recarr[(Integer) columnConfig.get("reorderquantity")].replaceAll("\"", "").trim();
                                if (StringUtil.isNullOrEmpty(productReorderQuantity)) {
                                    if (masterPreference.equalsIgnoreCase("1")) {
                                        productReorderQuantity = "0";
                                    } else {
                                        if (productTypeID.equals(Producttype.ASSEMBLY)) {
                                            productReorderQuantity = "0";
                                        } else {
                                            prevProductCode = "";
                                            throw new AccountingException("Product Reorder Quantity is not available");
                                        }
                                    }
                                }
                            } else if(!updateExistingRecordFlag) {
                                productReorderQuantity = "0";
                            }

                            //Product Warranty Period
                            String productWarrantyPeriod = "";
                            if (columnConfig.containsKey("warrantyperiod")) {
                                productWarrantyPeriod = recarr[(Integer) columnConfig.get("warrantyperiod")].replaceAll("\"", "").trim();
                                if (StringUtil.isNullOrEmpty(productWarrantyPeriod)) {
                                    if (masterPreference.equalsIgnoreCase("1")) {
                                        productWarrantyPeriod = "0";
                                    } else {
                                        if (productTypeID.equals(Producttype.ASSEMBLY)) {
                                            productWarrantyPeriod = "0";
                                        } else {
                                            prevProductCode = "";
                                            throw new AccountingException("Product Warranty Period is not available");
                                        }
                                    }
                                }
                            } else if(!updateExistingRecordFlag) {
                                productWarrantyPeriod = "0";
                            }

                            //Product Sales Warranty Period
                            String productSalesWarrantyPeriod = "";
                            if (columnConfig.containsKey("warrantyperiodsal")) {
                                productSalesWarrantyPeriod = recarr[(Integer) columnConfig.get("warrantyperiodsal")].replaceAll("\"", "").trim();
                                if (StringUtil.isNullOrEmpty(productSalesWarrantyPeriod)) {
                                    if (masterPreference.equalsIgnoreCase("1")) {
                                        productSalesWarrantyPeriod = "0";
                                    } else {
                                        if (productTypeID.equals(Producttype.ASSEMBLY)) {
                                            productSalesWarrantyPeriod = "0";
                                        } else {
                                            prevProductCode = "";
                                            throw new AccountingException("Product Sales Warranty Period is not available");
                                        }
                                    }
                                }
                            } else if(!updateExistingRecordFlag) {
                                productSalesWarrantyPeriod = "0";
                            }

                            //Product Lead Time
                            String productLeadTime = "";
                            if (columnConfig.containsKey("leadtime")) {
                                productLeadTime = recarr[(Integer) columnConfig.get("leadtime")].replaceAll("\"", "").trim();
                                if (StringUtil.isNullOrEmpty(productLeadTime)) {
                                    if (masterPreference.equalsIgnoreCase("1")) {
                                        productLeadTime = "0";
                                    } else {
                                        if (productTypeID.equals(Producttype.ASSEMBLY)) {
                                            productLeadTime = "0";
                                        } else {
                                            prevProductCode = "";
                                            throw new AccountingException("Product Lead Time is not available");
                                        }
                                    }
                                } else {
                                    if (Integer.parseInt(productLeadTime) > 365) {
                                        throw new AccountingException("Product Lead Time should not be greater than 365");
                                    } else if (Integer.parseInt(productLeadTime) < 0) {
                                        throw new AccountingException("Product Lead Time should not be less than 0");
                                    }
                                }
                            } else if(!updateExistingRecordFlag) {
                                productLeadTime = "0";
                            }

                            String productweight = "";
                            if (columnConfig.containsKey("productweight")) {
                                productweight = recarr[(Integer) columnConfig.get("productweight")].replaceAll("\"", "").trim();
                                if (StringUtil.isNullOrEmpty(productweight)) {
                                    if (masterPreference.equalsIgnoreCase("1")) {
                                        productweight = "0";
                                    } else {
                                        if (productTypeID.equals(Producttype.ASSEMBLY)) {
                                            productweight = "0";
                                        } else {
                                            prevProductCode = "";
                                            throw new AccountingException("This is not an Assembly Product");
                                        }
                                    }
                                } else {
                                    if (Double.parseDouble(productweight) <= -1) {
                                        throw new AccountingException("Product Weight should not be less than zero");
                                    }
                                }
                            } else if(!updateExistingRecordFlag) {
                                productweight = "0";
                            }

                            //Cycle Count Interval
                            String productCycleCountInterval = "";
                            if (columnConfig.containsKey("ccountinterval")) {
                                productCycleCountInterval = recarr[(Integer) columnConfig.get("ccountinterval")].replaceAll("\"", "").trim();
                                if (StringUtil.isNullOrEmpty(productCycleCountInterval)) {
                                    if (masterPreference.equalsIgnoreCase("1")) {
                                        productCycleCountInterval = "1";
                                    } else {
                                        if (productTypeID.equals(Producttype.ASSEMBLY)) {
                                            productCycleCountInterval = "1";
                                        } else {
                                            prevProductCode = "";
                                            throw new AccountingException("Product Cycle Count Interval is not available");
                                        }
                                    }
                                }
                            } else if(!updateExistingRecordFlag) {
                                productCycleCountInterval = "1";
                            }

                            //Cycle Count Tolerance
                            String productCycleCountTolerance = "";
                            if (columnConfig.containsKey("ccounttolerance")) {
                                productCycleCountTolerance = recarr[(Integer) columnConfig.get("ccounttolerance")].replaceAll("\"", "").trim();
                                if (StringUtil.isNullOrEmpty(productCycleCountTolerance)) {
                                    if (masterPreference.equalsIgnoreCase("1")) {
                                        productCycleCountTolerance = "0";
                                    } else {
                                        if (productTypeID.equals(Producttype.ASSEMBLY)) {
                                            productCycleCountTolerance = "0";
                                        } else {
                                            prevProductCode = "";
                                            throw new AccountingException("Product Cycle Count Tolerance is not available");
                                        }
                                    }
                                }
                            } else if(!updateExistingRecordFlag) {
                                productCycleCountTolerance = "0";
                            }

                            //Parent Product UUID
                            String parentProductUUID = "";
                            if (columnConfig.containsKey("parentid")) {
                                String parentProductID = recarr[(Integer) columnConfig.get("parentid")].replaceAll("\"", "").trim();
                                if (!StringUtil.isNullOrEmpty(parentProductID)) {
                                    Product parentProduct = getProductByProductID(parentProductID, companyid);
                                    if (parentProduct != null) {
                                        parentProductUUID = parentProduct.getID();
                                    } else {
                                        if (masterPreference.equalsIgnoreCase("1")) {
                                            parentProductUUID = null;
                                        } else {
                                            prevProductCode = "";
                                            throw new AccountingException("Parent Product is not found for " + parentProductID);
                                        }
                                    }
                                } else {
                                    if (masterPreference.equalsIgnoreCase("1")) {
                                        parentProductUUID = null;
                                    } else {
                                        prevProductCode = "";
                                        throw new AccountingException("Parent Product is not available");
                                    }
                                }
                            } else if(!updateExistingRecordFlag) {
                                parentProductUUID = null;
                            }

                            //Product Sales Account ID
                            String productSalesAccId = "";
                            if (columnConfig.containsKey("salesaccountname")) {
                                String productSalesAccountName = recarr[(Integer) columnConfig.get("salesaccountname")].replaceAll("\"", "").trim();
                                if (!StringUtil.isNullOrEmpty(productSalesAccountName)) {
                                    Account salesAccount = getAccountByName(productSalesAccountName, companyid);
                                    if (salesAccount != null) {
                                        productSalesAccId = salesAccount.getID();
                                    } else {
                                        prevProductCode = "";
                                        throw new AccountingException("Product Sales Account is not found for " + productSalesAccountName);
                                    }
                                } else {
                                    prevProductCode = "";
                                    throw new AccountingException("Product Sales Account is not available");
                                }
                            } else if(!updateExistingRecordFlag) {
                                throw new AccountingException("Product Sales Account column is not found.");
                            }

                            //Product Sales Account Return ID
                            String productSalesReturnAccId = "";
                            if (columnConfig.containsKey("salesretaccountname")) {
                                String productSalesReturnAccountName = recarr[(Integer) columnConfig.get("salesretaccountname")].replaceAll("\"", "").trim();
                                if (!StringUtil.isNullOrEmpty(productSalesReturnAccountName)) {
                                    Account salesReturnAccount = getAccountByName(productSalesReturnAccountName, companyid);
                                    if (salesReturnAccount != null) {
                                        productSalesReturnAccId = salesReturnAccount.getID();
                                    } else {
                                        prevProductCode = "";
                                        throw new AccountingException("Product Sales Return Account is not found for " + productSalesReturnAccountName);
                                    }
                                } else {
                                    prevProductCode = "";
                                    throw new AccountingException("Product Sales Return Account is not available");
                                }
                            } else if(!updateExistingRecordFlag) {
                                throw new AccountingException("Product Sales Return Account column is not found.");
                            }

                            //Vendor Details
                            String productPreferedVendorID = "";
                            if (columnConfig.containsKey("vendornameid")) {
                                String productPreferedVendorName = recarr[(Integer) columnConfig.get("vendornameid")].replaceAll("\"", "").trim();
                                if (!StringUtil.isNullOrEmpty(productPreferedVendorName)) {
                                    Vendor vendor = getVendorByName(productPreferedVendorName, companyid);
                                    if (vendor != null) {
                                        productPreferedVendorID = vendor.getID();
                                    } else {
                                        if (masterPreference.equalsIgnoreCase("1")) {
                                            productPreferedVendorID = null;
                                        } else {
                                            prevProductCode = "";
                                            throw new AccountingException("Prefered Vendor is not found for " + productPreferedVendorName);
                                        }
                                    }
                                } else {
                                    if (masterPreference.equalsIgnoreCase("1")) {
                                        productPreferedVendorID = null;
                                    } else {
                                        if (productTypeID.equals(Producttype.ASSEMBLY)) {
                                            productPreferedVendorID = null;
                                        } else {
                                            prevProductCode = "";
                                            throw new AccountingException("Prefered Vendor is not available");
                                        }
                                    }
                                }
                            } else if(!updateExistingRecordFlag) {
                                productPreferedVendorID = null;
                            }

                            //Product Purchase Account ID
                            String productPurchaseAccId = "";
                            if (columnConfig.containsKey("purchaseaccountname")) {
                                String productPurchaseAccountName = recarr[(Integer) columnConfig.get("purchaseaccountname")].replaceAll("\"", "").trim();
                                if (!StringUtil.isNullOrEmpty(productPurchaseAccountName)) {
                                    Account purchaseAccount = getAccountByName(productPurchaseAccountName, companyid);
                                    if (purchaseAccount != null) {
                                        productPurchaseAccId = purchaseAccount.getID();
                                    } else {
                                        prevProductCode = "";
                                        throw new AccountingException("Product Purchase Account is not found for " + productPurchaseAccountName);
                                    }
                                } else {
                                    prevProductCode = "";
                                    throw new AccountingException("Product Purchase Account is not available");
                                }
                            } else if(!updateExistingRecordFlag) {
                                throw new AccountingException("Product Purchase Account column is not found.");
                            }

                            //Product Purchase Return Account ID
                            String productPurchaseReturnAccId = "";
                            if (columnConfig.containsKey("purchaseretaccountname")) {
                                String productPurchaseReturnAccountName = recarr[(Integer) columnConfig.get("purchaseretaccountname")].replaceAll("\"", "").trim();
                                if (!StringUtil.isNullOrEmpty(productPurchaseReturnAccountName)) {
                                    Account purchaseReturnAccount = getAccountByName(productPurchaseReturnAccountName, companyid);
                                    if (purchaseReturnAccount != null) {
                                        productPurchaseReturnAccId = purchaseReturnAccount.getID();
                                    } else {
                                        prevProductCode = "";
                                        throw new AccountingException("Product Purchase Return Account is not found for " + productPurchaseReturnAccountName);
                                    }
                                } else {
                                    prevProductCode = "";
                                    throw new AccountingException("Product Purchase Return Account is not available");
                                }
                            } else if(!updateExistingRecordFlag) {
                                throw new AccountingException("Product Purchase Return Account column is not found.");
                            }

                            //Product Initial Quantity   
                            String productInitialQuantity = "0";
                            if (columnConfig.containsKey("initialquantity")) {
                                productInitialQuantity = recarr[(Integer) columnConfig.get("initialquantity")].replaceAll("\"", "").trim();
                                if (StringUtil.isNullOrEmpty(productInitialQuantity)) {
                                    if (masterPreference.equalsIgnoreCase("1")) {
                                        productInitialQuantity = "0";
                                    } else {
                                        if (productTypeID.equals(Producttype.ASSEMBLY)) {
                                            productInitialQuantity = "0";
                                        } else {
                                            prevProductCode = "";
                                            throw new AccountingException("Product Initial Quantity is not available");
                                        }
                                    }
                                }
                            } else if(!updateExistingRecordFlag) {
                                productInitialQuantity = "0";
                            }
                            //To update initial Purchase Price
//                            if (columnConfig.containsKey("initialpurchaseprice")) {
//                                productPurchasePrice = recarr[(Integer) columnConfig.get("initialpurchaseprice")].replaceAll("\"", "").trim();
//                                if (StringUtil.isNullOrEmpty(productPurchasePrice)) {
//                                    if (masterPreference.equalsIgnoreCase("1")) {
//                                        productPurchasePrice = "";
//                                    } else {
//                                        prevProductCode = "";
//                                        throw new AccountingException("Product Sales Price is not available");
//                                    }
//                                }
//                            } else {
//                                productPurchasePrice = "";
//                            }

                            if (columnConfig.containsKey("initialsalesprice")) {
                                productSalesPrice = recarr[(Integer) columnConfig.get("initialsalesprice")].replaceAll("\"", "").trim();
                                if (StringUtil.isNullOrEmpty(productSalesPrice)) {
                                    if (masterPreference.equalsIgnoreCase("1")) {
                                        productSalesPrice = "";
                                    } else {
                                        prevProductCode = "";
                                        throw new AccountingException("Product Sales Price is not available");
                                    }
                                }
                            } else {
                                productSalesPrice = "";
                            }

//                            //Currency Details
//                            String MsgExep = "";
//                            if (isCurrencyCode?columnConfig.containsKey("currencyCode"):columnConfig.containsKey("currencyName")) {
//                                String productPriceCurrencyStr = isCurrencyCode?recarr[(Integer) columnConfig.get("currencyCode")].replaceAll("\"", "").trim():recarr[(Integer) columnConfig.get("currencyName")].replaceAll("\"", "").trim();
//                                if (!StringUtil.isNullOrEmpty(productPriceCurrencyStr)) {
//                                    currencyId = getCurrencyId(productPriceCurrencyStr, currencyMap);
//                                    if (StringUtil.isNullOrEmpty(currencyId)) {
//                                        MsgExep = "Currency format you entered is not correct. it should be like \\\"SG Dollar (SGD)\\\""; //messageSource.getMessage("acc.field.ImportProductExceptionFormat", null, RequestContextUtils.getLocale(request));
//                                        prevProductCode = "";
//                                        throw new AccountingException(MsgExep);
//                                    }
//                                } else {
//                                    prevProductCode = "";
//                                    throw new AccountingException("Currency is not available.");
//                                }
//                            } else {
//                                throw new AccountingException("Currency column is not found.");
//                            }
                            
                            Boolean isIswarehouseforproduct = false;
                            if (columnConfig.containsKey("iswarehouseforproduct")) {
                                String Iswarehouseforproduct = recarr[(Integer) columnConfig.get("iswarehouseforproduct")].replaceAll("\"", "").trim();
                                if (!StringUtil.isNullOrEmpty(Iswarehouseforproduct)) {
                                    if (Iswarehouseforproduct.equalsIgnoreCase("T") || Iswarehouseforproduct.equalsIgnoreCase("TRUE")) {
                                        isIswarehouseforproduct = true;
                                    } else if (Iswarehouseforproduct.equalsIgnoreCase("F") || Iswarehouseforproduct.equalsIgnoreCase("FALSE")) {
                                        isIswarehouseforproduct = false;
                                    } else {
                                        prevProductCode = "";
                                        throw new AccountingException("Format you entered for Activate Warehouse is not correct. It should be like \"T\"/\"TRUE\" or \"F\"/\"FALSE\"");
                                    }
                                }
                            } 
                            
                            //Default Warehouse
                            Store store = null;
                            String productDefaultWarehouseID = "";
                            if (columnConfig.containsKey("warehouseName") && isIswarehouseforproduct) {
                                String productDefaultWarehouseName = recarr[(Integer) columnConfig.get("warehouseName")].replaceAll("\"", "").trim();
                                if (!StringUtil.isNullOrEmpty(productDefaultWarehouseName)) {
                                    InventoryWarehouse invWHouse = getInventoryWarehouseByName(productDefaultWarehouseName, companyid);
                                    if (invWHouse != null) {
                                        productDefaultWarehouseID = invWHouse.getId();
                                        //Get the Store Object & Link this Warehouse with Location
                                        store = storeService.getStoreById(productDefaultWarehouseID);
                                    } else {
                                        if (masterPreference.equalsIgnoreCase("2")) {
                                            store = new Store();
                                            store.setStoreType(storeService.getStoreType(0));//Set Store type to warehouse
                                            store.setAbbreviation(productDefaultWarehouseName);
                                            store.setDescription(productDefaultWarehouseName);
                                            store.setCcDateAllow(false);//set Default False
                                            store.setSmccAllow(false);//set Default False
                                            store.setCreatedBy(user);
                                            Set<User> userSet = new HashSet<>();
                                            userSet.add(user);
                                            Set<User> executiveSet = new HashSet<>();
                                            executiveSet.add(user);
                                            store.setCompany(user.getCompany());
                                            store.setStoreManagerSet(userSet);
                                            store.setStoreExecutiveSet(executiveSet);
                                            storeService.addStore(user, store);
                                            productDefaultWarehouseID = store.getId();
                                        } else {
                                            if (masterPreference.equalsIgnoreCase("1")) {
                                                productDefaultWarehouseID = null;
                                            } else {
                                                prevProductCode = "";
                                                throw new AccountingException("Default Warehouse is not found for " + productDefaultWarehouseName);
                                            }
                                        }
                                    }
                                } else {
                                    if (masterPreference.equalsIgnoreCase("1")) {
                                        productDefaultWarehouseID = null;
                                    } else {
                                        prevProductCode = "";
                                        throw new AccountingException("Default Warehouse is not available.");
                                    }
                                }
                            } else if(!updateExistingRecordFlag) {
                                productDefaultWarehouseID = null;
                            }
                            
                            
                            Boolean isIslocationforproduct = false;
                            if (columnConfig.containsKey("islocationforproduct")) {
                                String ISlocationforproduct = recarr[(Integer) columnConfig.get("islocationforproduct")].replaceAll("\"", "").trim();
                                if (!StringUtil.isNullOrEmpty(ISlocationforproduct)) {
                                    if (ISlocationforproduct.equalsIgnoreCase("T") || ISlocationforproduct.equalsIgnoreCase("TRUE")) {
                                        isIslocationforproduct = true;
                                    } else if (ISlocationforproduct.equalsIgnoreCase("F") || ISlocationforproduct.equalsIgnoreCase("FALSE")) {
                                        isIslocationforproduct = false;
                                    } else {
                                        prevProductCode = "";
                                        throw new AccountingException("Format you entered for Activate Location is not correct. It should be like \"T\"/\"TRUE\" or \"F\"/\"FALSE\"");
                                    }
                                }
                            }
                           
//                          Product Default Location
                            String productDefaultLocationID = "";
                            if (columnConfig.containsKey("locationName") && isIslocationforproduct) {
                                String productDefaultLocationName = recarr[(Integer) columnConfig.get("locationName")].replaceAll("\"", "").trim();
                                if (!StringUtil.isNullOrEmpty(productDefaultLocationName)) {
                                    InventoryLocation invLoc = getInventoryLocationByName(productDefaultLocationName, companyid);
                                    if (invLoc != null) {
                                        productDefaultLocationID = invLoc.getId();
                                        if(store!=null){
                                            //Get the Location Object & update that Warehouse 
                                            Location loc = getLocationByID(productDefaultLocationID, companyid);
                                            Set<Store> stores = loc.getStores();
                                            stores.add(store);
                                            HashMap locmap = new HashMap();
                                            locmap.put("locid", loc.getId());
                                            locmap.put("stores", stores);
                                            accMasterItemsDAOobj.addUpdateLocation(locmap);
                                        }
                                        
                                    } else {
                                        if (masterPreference.equalsIgnoreCase("2")) {
                                            HashMap requestParam = requestParams;//AccountingManager.getGlobalParams(request);
                                            requestParam.put("id", "");
                                            requestParam.put("name", productDefaultLocationName);
                                            requestParam.put("parent", null);
                                            requestParam.put("user", user);
                                            KwlReturnObject locationResult = accMasterItemsDAOobj.addLocationItem(requestParam);
                                            invLoc = (InventoryLocation) locationResult.getEntityList().get(0);
                                            productDefaultLocationID = invLoc.getId();
                                            if (store != null) {
                                                Location loc = getLocationByID(productDefaultLocationID, companyid);
                                                Set<Store> stores = loc.getStores();
                                                stores.add(store);
                                                HashMap locmap = new HashMap();
                                                locmap.put("locid", loc.getId());
                                                locmap.put("stores", stores);
                                                accMasterItemsDAOobj.addUpdateLocation(locmap);
                                            }
                                        } else {
                                            if (masterPreference.equalsIgnoreCase("1")) {
                                                productDefaultLocationID = null;
                                            } else {
                                                prevProductCode = "";
                                                throw new AccountingException("Default Location is not found for " + productDefaultLocationName);
                                            }
                                        }
                                    }
                                } else {
                                    if (masterPreference.equalsIgnoreCase("1")) {
                                        productDefaultLocationID = null;
                                    } else {
                                        prevProductCode = "";
                                        throw new AccountingException("Default Location is not available.");
                                    }
                                }
                            } else if(!updateExistingRecordFlag) {
                                productDefaultLocationID = null;
                            }                                                                                 

                            //ERP-34463
                            if(!StringUtil.isNullOrEmpty(productDefaultWarehouseID) && !isIswarehouseforproduct){
                                isIswarehouseforproduct=true;
                            }
                            if(!StringUtil.isNullOrEmpty(productDefaultLocationID) && !isIslocationforproduct){
                                isIslocationforproduct=true;
                            }
                            if((!isIswarehouseforproduct && isIslocationforproduct) || (!isIslocationforproduct && isIswarehouseforproduct)){
                                isIswarehouseforproduct=true;
                                isIslocationforproduct=true;
                            }

                            //Make available in other application
                            Boolean isSyncable = false;
                            if (columnConfig.containsKey("syncable")) {
                                String productMakeAvailableInOtherApp = recarr[(Integer) columnConfig.get("syncable")].replaceAll("\"", "").trim();
                                if (!StringUtil.isNullOrEmpty(productMakeAvailableInOtherApp)) {
                                    if (productMakeAvailableInOtherApp.equalsIgnoreCase("T") || productMakeAvailableInOtherApp.equalsIgnoreCase("TRUE")) {
                                        isSyncable = true;
                                    } else if (productMakeAvailableInOtherApp.equalsIgnoreCase("F") || productMakeAvailableInOtherApp.equalsIgnoreCase("FALSE")) {
                                        isSyncable = false;
                                    } else {
                                        prevProductCode = "";
                                        throw new AccountingException("Format you entered for Make Available in other application is not correct. It should be like \"T\"/\"TRUE\" or \"F\"/\"FALSE\"");
                                    }
                                } else {
                                    if (masterPreference.equalsIgnoreCase("1")) {
                                        isSyncable = false;
                                    } else {
                                        prevProductCode = "";
                                        throw new AccountingException("Make available in other application is not available.");
                                    }
                                }
                            }

                            //Multiple UOM
                            Boolean isMultiUOM = false;
                            if (columnConfig.containsKey("multiuom")) {
                                String multipleUOM = recarr[(Integer) columnConfig.get("multiuom")].replaceAll("\"", "").trim();
                                if (!StringUtil.isNullOrEmpty(multipleUOM)) {
                                    if (multipleUOM.equalsIgnoreCase("T") || multipleUOM.equalsIgnoreCase("TRUE")) {
                                        isMultiUOM = true;
                                    } else if (multipleUOM.equalsIgnoreCase("F") || multipleUOM.equalsIgnoreCase("FALSE")) {
                                        isMultiUOM = false;
                                    } else {
                                        prevProductCode = "";
                                        throw new AccountingException("Format you entered for Multiple UOM is not correct. It should be like \"T\"/\"TRUE\" or \"F\"/\"FALSE\"");
                                    }
                                } else {
                                    if (masterPreference.equalsIgnoreCase("1")) {
                                        isMultiUOM = false;
                                    } else {
                                        if (productTypeID.equals(Producttype.ASSEMBLY)) {
                                            isMultiUOM = false;
                                        } else {
                                            prevProductCode = "";
                                            throw new AccountingException("Multiple UOM is not available.");
                                        }
                                    }
                                }
                            }
                            
                            UOMschemaType uomSchemaType = null;     //SDP-8926
                            if (columnConfig.containsKey("uomSchemaTypeName") && recarr.length > columnConfig.get("uomSchemaTypeName")) {
                                String uomSchemaTypeName = recarr[(Integer) columnConfig.get("uomSchemaTypeName")].replaceAll("\"", "").trim();
                                if (!StringUtil.isNullOrEmpty(uomSchemaTypeName)) {
                                    uomSchemaType = getUOMschemaTypeByName(uomSchemaTypeName, companyid);
                                    if (uomSchemaType == null) {
                                        if (!masterPreference.equalsIgnoreCase("1")) {
                                            prevProductCode = "";
                                            throw new AccountingException("UOM Schema is not found for " + uomSchemaTypeName + ".");
                                        }
                                    }
                                }
                            }
                            if (uomSchemaType != null && !productUOMID.equalsIgnoreCase(uomSchemaType.getStockuom().getID())) {
                                throw new AccountingException("Stock UOM of Product and UOM Schema's Stock UOM should be same.");
                            }
                            
                            // if Account Preferences have show Display UOM Setting is ON
                            UnitOfMeasure displayUoMObj = null;
                            if (columnPrefJObj!=null && columnPrefJObj.has(Constants.isDisplayUOM) && columnPrefJObj.get(Constants.isDisplayUOM) != null && (Boolean) columnPrefJObj.get(Constants.isDisplayUOM) != false) {
                                if (columnConfig.containsKey("displayUoM") && recarr.length > columnConfig.get("displayUoM") && uomSchemaType != null) {
                                    String displayUoM = recarr[(Integer) columnConfig.get("displayUoM")].replaceAll("\"", "").trim();
                                    if (!StringUtil.isNullOrEmpty(displayUoM)) {
                                        displayUoMObj = getUOMByName(displayUoM, companyid);

                                        boolean validDisplayUOM = false;
                                        if (displayUoMObj != null) {
                                            validDisplayUOM = accUomObj.isValidDisplayUOM(uomSchemaType.getID(), displayUoMObj.getID());
                                        }
                                        if(!validDisplayUOM){
                                            throw new AccountingException("Wrong value entered into Display UOM");
                                        }
                                    }
                                }
                            }

                            Date asOfDate = null;
                            if (columnConfig.containsKey("asofdate")) {//when AsofDate header is mapped
                                String asofdate = recarr[(Integer) columnConfig.get("asofdate")].replaceAll("\"", "").trim();
                                if (!StringUtil.isNullOrEmpty(asofdate)) {
                                    try {
                                        df1.setLenient(false);
                                        asOfDate = df1.parse(asofdate);
                                    } catch (Exception ex) {
                                        if (masterPreference.equalsIgnoreCase("1")) {//when set empty option is selected then setting its default value bookbeginning date
                                            asOfDate = bookBookBeginningDate;
                                        } else {
                                            throw new AccountingException("Incorrect date format for As Of Date, Please specify values in " + dateFormat + " format.");
                                        }
                                    }
                                } else {//when value is null or empty
                                    if (masterPreference.equals("0")) {//most resticted
                                        throw new AccountingException("Empty data found in As Of Date, cannot set empty data for As Of Date.");
                                    } else if (masterPreference.equals("2") || masterPreference.equals("1")) {// add new case and set empty case
                                        asOfDate = bookBookBeginningDate;
                                    }
                                }
                            }
                            ValuationMethod valMethod = null;
                            if (columnConfig.containsKey("valuationmethod")) {
                                String temp = recarr[(Integer) columnConfig.get("valuationmethod")].replaceAll("\"", "").trim();
                                if (!StringUtil.isNullOrEmpty(temp)) {
                                    if (temp.equalsIgnoreCase("LIFO")) {
                                        temp = "0";
                                    } else if (temp.equalsIgnoreCase("FIFO")) {
                                        temp = "1";
                                    } else if (temp.equalsIgnoreCase("Moving Average")) {
                                        temp = "2";
                                    } else {
                                        throw new AccountingException("Value is not valid for column. It should be 'FIFO' or 'LIFO' or 'Moving Average'.");
                                    }
                                    int valuationMethod = Integer.parseInt(temp);
                                    for (ValuationMethod st : ValuationMethod.values()) {
                                        if (st.ordinal() == valuationMethod) {
                                            valMethod = st;
                                            break;
                                        }
                                    }
                                }
                            } else if(!updateExistingRecordFlag) {
                                valMethod = ValuationMethod.FIFO;
                            }
                            

                            Boolean isIsSerialForProduct = false;
                            if (columnConfig.containsKey(Constants.ACTIVATE_SERIAL_NO)) {
                                String IsSerialForProduct = recarr[(Integer) columnConfig.get(Constants.ACTIVATE_SERIAL_NO)].replaceAll("\"", "").trim();
                                if (!StringUtil.isNullOrEmpty(IsSerialForProduct)) {
                                    if (IsSerialForProduct.equalsIgnoreCase("T") || IsSerialForProduct.equalsIgnoreCase("TRUE")) {
                                        isIsSerialForProduct = true;
                                    } else if (IsSerialForProduct.equalsIgnoreCase("F") || IsSerialForProduct.equalsIgnoreCase("FALSE")) {
                                        isIsSerialForProduct = false;
                                    } else {
                                        prevProductCode = "";
                                        throw new AccountingException("Format you entered for Activate Serial is not correct. It should be like \"T\"/\"TRUE\" or \"F\"/\"FALSE\"");
                                    }
                                }
                            }
                            
                            Boolean isIsBatchForProduct = false;
                            if (columnConfig.containsKey(Constants.ACTIVATE_BATCH)) {
                                String IsBatchForProduct = recarr[(Integer) columnConfig.get(Constants.ACTIVATE_BATCH)].replaceAll("\"", "").trim();
                                if (!StringUtil.isNullOrEmpty(IsBatchForProduct)) {
                                    if (IsBatchForProduct.equalsIgnoreCase("T") || IsBatchForProduct.equalsIgnoreCase("TRUE")) {
                                        isIsBatchForProduct = true;
                                    } else if (IsBatchForProduct.equalsIgnoreCase("F") || IsBatchForProduct.equalsIgnoreCase("FALSE")) {
                                        isIsBatchForProduct = false;
                                    } else {
                                        prevProductCode = "";
                                        throw new AccountingException("Format you entered for Activate Batch is not correct. It should be like \"T\"/\"TRUE\" or \"F\"/\"FALSE\"");
                                    }
                                }
                            }
                            
                            String tariffName = "";
                            if (!productTypeID.equals(Producttype.SERVICE) && columnConfig.containsKey("tariffname")) {
                                String temp = recarr[(Integer) columnConfig.get("tariffname")].replaceAll("\"", "").trim();
                                if (!StringUtil.isNullOrEmpty(temp)) {
                                    tariffName = temp;
                                } else {
                                    throw new AccountingException("Tariff Name column is not found.");
                                }
                            }

                            String hsncode = "";
                            if (!productTypeID.equals(Producttype.SERVICE) && columnConfig.containsKey("hsncode")) {
                                String temp = recarr[(Integer) columnConfig.get("hsncode")].replaceAll("\"", "").trim();
                                if (!StringUtil.isNullOrEmpty(temp)) {
                                    hsncode = temp;
                                } else {
                                    throw new AccountingException("HSNCode column is not found.");
                                }
                            }

                            String reportinguomName = "", reportinguomID = "";
                            UnitOfMeasure reportinguom = null;
                            if (!productTypeID.equals(Producttype.SERVICE) && columnConfig.containsKey("reportinguom")) {
                                String temp = recarr[(Integer) columnConfig.get("reportinguom")].replaceAll("\"", "").trim();
                                if (!StringUtil.isNullOrEmpty(temp)) {
                                    reportinguomName = temp;
                                    reportinguom = accProductModuleService.getUOMByName(reportinguomName, companyid);
                                    if (reportinguom != null) {
                                        reportinguomID = reportinguom.getID();
                                    }
                                } else {
                                    throw new AccountingException("Reporting UOM column is not found.");
                                }
                            }

                            UOMschemaType reportingSchemaType = null;
                            if (!productTypeID.equals(Producttype.SERVICE) && columnConfig.containsKey("reportingschematype")) {
                                String temp = recarr[(Integer) columnConfig.get("reportingschematype")].replaceAll("\"", "").trim();
                                if (!StringUtil.isNullOrEmpty(temp)) {
                                    String uomSchemaTypeName = temp;//cell.getStringCellValue().trim();
                                    if (!StringUtil.isNullOrEmpty(uomSchemaTypeName)) {
                                        reportingSchemaType = getUOMschemaTypeByName(uomSchemaTypeName, companyid);
                                    }
                                    // Ref Optimization related code. 
                                    if (reportingSchemaType == null) {
                                        throw new AccountingException("UOM Schema is not found for " + uomSchemaTypeName);
                                    }
                                }
                            }

                            String excisemethod = "";
                            if (!productTypeID.equals(Producttype.SERVICE) && columnConfig.containsKey("excisemethodmain")) {
                                String temp = recarr[(Integer) columnConfig.get("excisemethodmain")].replaceAll("\"", "").trim();
                                if (!StringUtil.isNullOrEmpty(temp)) {
                                    excisemethod = temp;
                                    if (IndiaComplianceConstants.valuationType.containsKey(excisemethod)) {
                                        excisemethod = IndiaComplianceConstants.valuationType.get(excisemethod);
                                        if (excisemethod.equals("specific")) {
                                            throw new AccountingException(excisemethod + " which is not found Valuation Type (1.Ad Valorem Method,2.Quantity,3.Specific basis,4.MRP (Maximum Retail Price)).");
                                        }
                                    }
                                } else {
                                    throw new AccountingException("Valuation Type column is not found.");
                                }
                            }
                            String vatMethodType = "";
                            if (!productTypeID.equals(Producttype.SERVICE) &&  columnConfig.containsKey("vatMethodType")) {
                                String temp = recarr[(Integer) columnConfig.get("vatMethodType")].replaceAll("\"", "").trim();
                                if (!StringUtil.isNullOrEmpty(temp)) {
                                  
                                    if (IndiaComplianceConstants.valuationType.containsKey(temp)) {
                                        vatMethodType = IndiaComplianceConstants.valuationType.get(temp);
                                        if (vatMethodType.equals("specific")) {
                                            throw new AccountingException( temp + " which is not found Vat Valuation Type (1.Ad Valorem Method,2.Quantity,3.Specific basis,4.MRP (Maximum Retail Price)).");
                                        }
                                    }
                                } else {
                                    throw new AccountingException("Vat Valuation Type column is not found.");
                                }
                            }

                            Date vatAbatementPeriodFromDate = null;
                            if (columnConfig.containsKey("vatAbatementPeriodFromDate")) {//when AsofDate header is mapped
                                String temp = recarr[(Integer) columnConfig.get("vatAbatementPeriodFromDate")].replaceAll("\"", "").trim();
                                if (!StringUtil.isNullOrEmpty(temp)) {
                                    String stringAsOfDate = temp;
                                    if (!stringAsOfDate.equals("")) {
                                        try {
                                            vatAbatementPeriodFromDate = df.parse(stringAsOfDate);
                                        } catch (Exception ex) {
                                            throw new AccountingException("Incorrect date format for Applicability Period From, Please specify values in " + temp + " format.");
                                        }
                                    }
                                }
                            }

                            Date vatAbatementPeriodToDate = null;
                            if (columnConfig.containsKey("vatAbatementPeriodToDate")) {//when AsofDate header is mapped
                                String temp = recarr[(Integer) columnConfig.get("vatAbatementPeriodToDate")].replaceAll("\"", "").trim();
                                if (!StringUtil.isNullOrEmpty(temp)) {
                                    String stringAsOfDate = temp;
                                    if (!stringAsOfDate.equals("")) {
                                        try {

                                            vatAbatementPeriodToDate = df.parse(stringAsOfDate);
                                        } catch (Exception ex) {
                                            throw new AccountingException("Incorrect date format for Applicability Period To, Please specify values in " + temp + " format.");
                                        }
                                    }
                                }
                            }

                            String vatcommoditycode = "";
                            if (columnConfig.containsKey("vatcommoditycode")) {
                                String temp = recarr[(Integer) columnConfig.get("vatcommoditycode")].replaceAll("\"", "").trim();
                                if (!StringUtil.isNullOrEmpty(temp)) {
                                    String vatcommodityname = temp;
                                    Map tempData = new HashMap<String, String>();
                                    tempData.put("vatcommodityname", vatcommodityname);
                                    tempData.put("company", companyid);
                                    KwlReturnObject vatCommresult = accProductObj.getVATCommodityCodeByName(tempData);
                                    if (vatCommresult.getRecordTotalCount() > 0) {
                                        List list = (ArrayList) vatCommresult.getEntityList();
                                        Iterator itr = list.iterator();
                                        if (itr.hasNext()) {
                                            vatcommoditycode = (String) itr.next();
                                        }
                                    } else {
                                        throw new AccountingException(vatcommodityname + " is not found in VAT Commodity Name.");
                                    }
                                }
                            }
                        
                            String natureofStockItem = "";
                            if (!productTypeID.equals(Producttype.SERVICE) && columnConfig.containsKey("natureofStockItem")) {
                                String temp = recarr[(Integer) columnConfig.get("natureofStockItem")].replaceAll("\"", "").trim();
                                if (!StringUtil.isNullOrEmpty(temp)) {
                                    Map tempData = new HashMap<String, String>();
                                    tempData.put("natureofStockItemname", temp);
                                    tempData.put("company", companyid);
                                    KwlReturnObject vatCommresult = accProductObj.getNatureofStockItemCodeByName(tempData);
                                    if (vatCommresult.getRecordTotalCount() > 0) {
                                        List list = (ArrayList) vatCommresult.getEntityList();
                                        Iterator itr = list.iterator();
                                        if (itr.hasNext()) {
                                            natureofStockItem = (String) itr.next();
                                        }
                                    } else {
                                        throw new AccountingException(temp + " is not found in Types of Goods.");
                                    }
                                }
                            }
                            
                            String mrprate = "";
                            if (!productTypeID.equals(Producttype.SERVICE) && columnConfig.containsKey("mrprate")) {
                               String temp = recarr[(Integer) columnConfig.get("mrprate")].replaceAll("\"", "").trim();
                                if (!StringUtil.isNullOrEmpty(temp)) {
                                    mrprate = temp;
                                }
                            }
                            String serviceTaxCode = "";
                            if (columnConfig.containsKey("serviceTaxCode")) {
                               String temp = recarr[(Integer) columnConfig.get("serviceTaxCode")].replaceAll("\"", "").trim();
                                if (!StringUtil.isNullOrEmpty(temp)) {
                                    serviceTaxCode = temp;
                                }
                            }
                            String interStatePurchaseAccount = "";
                            if (columnConfig.containsKey("interStatePurchaseAccount")) {
                                String temp = recarr[(Integer) columnConfig.get("interStatePurchaseAccount")].replaceAll("\"", "").trim();
                                if (!StringUtil.isNullOrEmpty(temp)) {
                                    Account purchaseAccount = getAccountByName(temp, companyid);
                                    if (purchaseAccount != null) {
                                        interStatePurchaseAccount = purchaseAccount.getID();
                                    } else {
                                        prevProductCode = "";
                                        throw new AccountingException("Inter State Purchase Account is not found for " + temp);
                                    }
                                }
                            }

                            String interStatePurchaseAccountCForm = "";
                            if (columnConfig.containsKey("interStatePurchaseAccountCForm")) {
                                String temp = recarr[(Integer) columnConfig.get("interStatePurchaseAccountCForm")].replaceAll("\"", "").trim();
                                if (!StringUtil.isNullOrEmpty(temp)) {
                                    Account purchaseAccount = getAccountByName(temp, companyid);
                                    if (purchaseAccount != null) {
                                        interStatePurchaseAccountCForm = purchaseAccount.getID();
                                    } else {
                                        prevProductCode = "";
                                        throw new AccountingException("Inter State Purchase Account C-Form is not found for " + temp);
                                    }
                                }
                            }

                            String interStatePurchaseReturnAccount = "";
                            if (columnConfig.containsKey("interStatePurchaseReturnAccount")) {
                                String temp = recarr[(Integer) columnConfig.get("interStatePurchaseReturnAccount")].replaceAll("\"", "").trim();
                                if (!StringUtil.isNullOrEmpty(temp)) {
                                    Account purchaseAccount = getAccountByName(temp, companyid);
                                    if (purchaseAccount != null) {
                                        interStatePurchaseReturnAccount = purchaseAccount.getID();
                                    } else {
                                        prevProductCode = "";
                                        throw new AccountingException("Inter State Purchase Return Account is not found for " + temp);
                                    }
                                }
                            }

                            String interStatePurchaseReturnAccountCForm = "";
                            if (columnConfig.containsKey("interStatePurchaseReturnAccountCForm")) {
                                String temp = recarr[(Integer) columnConfig.get("interStatePurchaseReturnAccountCForm")].replaceAll("\"", "").trim();
                                if (!StringUtil.isNullOrEmpty(temp)) {
                                    Account purchaseAccount = getAccountByName(temp, companyid);
                                    if (purchaseAccount != null) {
                                        interStatePurchaseReturnAccountCForm = purchaseAccount.getID();
                                    } else {
                                        prevProductCode = "";
                                        throw new AccountingException("Inter State Purchase Return Account CForm is not found for " + temp);
                                    }
                                }
                            }
                            String interStateSalesAccount = "";
                            if (columnConfig.containsKey("interStateSalesAccount")) {
                                String temp = recarr[(Integer) columnConfig.get("interStateSalesAccount")].replaceAll("\"", "").trim();
                                if (!StringUtil.isNullOrEmpty(temp)) {
                                    Account purchaseAccount = getAccountByName(temp, companyid);
                                    if (purchaseAccount != null) {
                                        interStateSalesAccount = purchaseAccount.getID();
                                    } else {
                                        prevProductCode = "";
                                        throw new AccountingException("Inter State Sales Account is not found for " + temp);
                                    }
                                }
                            }

                            String interStateSalesAccountCForm = "";
                            if (columnConfig.containsKey("interStateSalesAccountCForm")) {
                                String temp = recarr[(Integer) columnConfig.get("interStateSalesAccountCForm")].replaceAll("\"", "").trim();
                                if (!StringUtil.isNullOrEmpty(temp)) {
                                    Account purchaseAccount = getAccountByName(temp, companyid);
                                    if (purchaseAccount != null) {
                                        interStateSalesAccountCForm = purchaseAccount.getID();
                                    } else {
                                        prevProductCode = "";
                                        throw new AccountingException("Inter State Sales Account CForm is not found for " + temp);
                                    }
                                }
                            }
                            
                            String landingcostcategoryids = "";
                            if (columnConfig.containsKey("landingcostcategory")) {
                                String landingcostcategory = recarr[(Integer) columnConfig.get("landingcostcategory")].replaceAll("\"", "").trim();
                                if (!StringUtil.isNullOrEmpty(landingcostcategory)) {
                                    String[] categorys = landingcostcategory.split(",");
                                    HashMap params = null;
                                    if (categorys.length > 0) {
                                        params = new HashMap<String, Object>();
                                        params.put(Constants.companyKey, companyid);
                                    }
                                    for (int i = 0; i < categorys.length; i++) {
                                        params.put("lccname", categorys[i].trim());
                                        KwlReturnObject retObj = accMasterItemsDAOobj.getMasterItemFromLandingCostCategory(params);
                                        if (retObj != null && !retObj.getEntityList().isEmpty() && retObj.getEntityList().get(0) != null) {
                                            LandingCostCategory lcc = (LandingCostCategory) retObj.getEntityList().get(0);
                                            if (lcc.getId() != null) {
                                                if (i < categorys.length - 1) {
                                                    landingcostcategoryids += lcc.getId() + ",";
                                                } else {
                                                    landingcostcategoryids += lcc.getId();
                                                }
                                            } else {
                                                landingcostcategoryids = "";
                                                throw new AccountingException("Landed Cost Category " + categorys[i] + " does not present.");
                                            }
                                        } else {
                                            landingcostcategoryids = "";
                                            throw new AccountingException("Landed Cost Category " + categorys[i] + " does not present.");
                                        }
                                    }
                                }
                            }

                            String interStateSalesReturnAccount = "";
                            if (columnConfig.containsKey("interStateSalesReturnAccount")) {
                                String temp = recarr[(Integer) columnConfig.get("interStateSalesReturnAccount")].replaceAll("\"", "").trim();
                                if (!StringUtil.isNullOrEmpty(temp)) {
                                    Account purchaseAccount = getAccountByName(temp, companyid);
                                    if (purchaseAccount != null) {
                                        interStateSalesReturnAccount = purchaseAccount.getID();
                                    } else {
                                        prevProductCode = "";
                                        throw new AccountingException("Inter State Sales Return Account is not found for " + temp);
                                    }
                                }
                            }

                            String interStateSalesReturnAccountCForm = "";
                            if (columnConfig.containsKey("interStateSalesReturnAccountCForm")) {
                                String temp = recarr[(Integer) columnConfig.get("interStateSalesReturnAccountCForm")].replaceAll("\"", "").trim();

                                if (!StringUtil.isNullOrEmpty(temp)) {
                                    Account purchaseAccount = getAccountByName(temp, companyid);
                                    if (purchaseAccount != null) {
                                        interStateSalesReturnAccountCForm = purchaseAccount.getID();
                                    } else {
                                        prevProductCode = "";
                                        throw new AccountingException("Inter State Sales Return Account CForm is not found for " + temp);
                                    }
                                }
                            }

                            Set<Frequency> ccFrequencies = new HashSet();
                            if (!productTypeID.equals(Producttype.SERVICE) && !productTypeID.equals(Producttype.SERVICE_Name) && columnConfig.containsKey("CCFrequency")) {
                                String frequencies = recarr[(Integer) columnConfig.get("CCFrequency")].replaceAll("\"", "").trim();
                                if (!StringUtil.isNullOrEmpty(frequencies)) {
                                    String[] frqs = frequencies.split(",");
                                    String notFoundNames = "";
                                    for (int i = 0; i < frqs.length; i++) {
                                        Frequency frq = null;
                                        if ("Daily".equalsIgnoreCase(frqs[i])) {
                                            frq = frequencyMap.get(Frequency.DAILY);
                                        } else if ("Weekly".equalsIgnoreCase(frqs[i])) {
                                            frq = frequencyMap.get(Frequency.WEEKLY);
                                        } else if ("Fortnightly".equalsIgnoreCase(frqs[i])) {
                                            frq = frequencyMap.get(Frequency.FORTNIGHT);
                                        } else if ("Monthly".equalsIgnoreCase(frqs[i])) {
                                            frq = frequencyMap.get(Frequency.MONTHLY);
                                        } else {
                                            notFoundNames += frqs[i] + ", ";
                                        }
                                        if (frq != null) {
                                            ccFrequencies.add(frq);
                                        }
                                    }
                                    if (!StringUtil.isNullOrEmpty(notFoundNames) && masterPreference.equalsIgnoreCase("0")) {
                                        notFoundNames = notFoundNames.substring(0, notFoundNames.lastIndexOf(","));
                                        throw new AccountingException("Cycle Count Frequency is not found for " + notFoundNames);
                                    }
                                }
                            }



                            // For Checking 'ProductID' is exist or not
                            KwlReturnObject result = accProductObj.getProductIDCount(productID, companyid,false);
                        Product productOldObj = null;
                            int nocount = result.getRecordTotalCount();
                            if (nocount > 0 && !updateExistingRecordFlag) {
                                throw new AccountingException("Product ID '" + productID + "' already exists.");
                            } else if (nocount == 0 && updateExistingRecordFlag) {
                                throw new AccountingException("Product ID '" + productID + "' not exists.");
                        } else if (nocount > 0 && updateExistingRecordFlag && !result.getEntityList().isEmpty()) {
                            productOldObj = (Product) result.getEntityList().get(0);
                            String propChangeErrMsg="";
                            if (productOldObj != null && productOldObj.getAvailableQuantity() > 0) {
                                if (productOldObj.isIswarehouseforproduct() != isIswarehouseforproduct) {
                                    propChangeErrMsg += StringUtil.isNullOrEmpty(propChangeErrMsg) ? "warehouse" : " ,warehouse";
                            }
                                if (productOldObj.isIslocationforproduct() != isIslocationforproduct) {
                                    propChangeErrMsg += StringUtil.isNullOrEmpty(propChangeErrMsg) ? "location" : " ,location";
                                }
                                if (productOldObj.isIsBatchForProduct() != isIsBatchForProduct) {
                                    propChangeErrMsg += StringUtil.isNullOrEmpty(propChangeErrMsg) ? "batch" : " ,batch";
                                }
                                if (productOldObj.isIsSerialForProduct() != isIsSerialForProduct) {
                                    propChangeErrMsg += StringUtil.isNullOrEmpty(propChangeErrMsg) ? "serial" : " ,serial";
                                }
                                if(!StringUtil.isNullOrEmpty(propChangeErrMsg)){
                                    throw new AccountingException("Opening stock is already added for this product.So, "+propChangeErrMsg + " property can not be changed.");
                                }
                            }

                        }
                            MasterItem prodMasterItemObj = accProductObj.getProductsMasterItem(companyid, productID);
                            KwlReturnObject kwlReturnObject_SPA = accProductObj.selectSubProductFromAssembly(productID);
                            KwlReturnObject kwlReturnObject_I = accProductObj.selectInventoryByProduct(productID, companyid);
                            boolean isUsedInTransaction = false, isAssemblyProductWithBOM = false;                                                      
                            Product prod = null;
                            if (updateExistingRecordFlag) {
                                //Check whether the product have any BOM Products, if it is have then only check 'Used in Transaction' case else skip this case.
                                prod = (Product) result.getEntityList().get(0);  //Defined Main Product object at global scope
                                List booleanlist = accProductObj.isAssemblyProductWithBOM(prod.getID());
                                isAssemblyProductWithBOM = (Boolean) booleanlist.get(0);    //always boolean value   
                                if (isAssemblyProductWithBOM) {   //Do not check whether the without BOM Assembly Product used in any transaction or not.
                                    //Check whether this product is used in any transaction or not
                                    List listObj = accProductModuleService.isProductUsedintransction(prod.getID(), companyid, requestParams);
                                    isUsedInTransaction = (Boolean) listObj.get(0);    //always boolean value
                                    if (isUsedInTransaction) {
                                        throw new AccountingException("Product ID '" + productID + "' used in transaction(s). So it cannot update");
                                    }
                                    //Check whether this product is used for Build Assembly or not
                                    KwlReturnObject rs = accProductObj.getAssemblyProductDetails(prod.getID()); //ERP-12252
                                    if (rs.getRecordTotalCount() > 0) {
                                        throw new AccountingException(productID + "' used in Build Assembly. You cannot edit this Assembly Product.");
                                    }
                                    
                                    /* At earlier stage user has imported Assembly Product without BOM. Later he has added BOM product manually. By mistake he has updating the Assembly Product using
                                        Asssembly Product without BOM file then we cannnot delete those Assembly Product which has updated manually.
                                    */
                                    
                                    //In update case, if product is not linked in any transaction, delete this product
//                                    System.out.println("Product not linked. so deleting this product to update");
//                                    accProductObj.deleteProductCustomData(prod.getID());
//                                    accProductObj.deleteProPricePermanently(prod.getID(), companyid);
//                                    accProductObj.deleteProductCategoryMappingDtails(productID);
//                                    if (prod.getProducttype().getID().equals(Producttype.ASSEMBLY)) {
//                                        accProductObj.deleteProductAssembly(prod.getID());
//                                        accProductObj.deleteBOMDetail(prod.getID());
//                                        accProductObj.deleteProductBuildDetails(prod.getID(), companyid);
//                                        accProductObj.deleteProductbBuild(prod.getID(), companyid);
//                                    }
//                                    if (!StringUtil.isNullOrEmpty(productID) && prodMasterItemObj != null) {
//                                        accProductObj.deleteProductCategoryMappingDtails(prod.getID());
//                                    }
//                                    if (!StringUtil.isNullOrEmpty(prod.getID())) {
//                                        accProductObj.deleteNewProductBatch(prod.getID(), companyid);
//                                    }
//                                    if (!StringUtil.isNullOrEmpty(productID) && kwlReturnObject_I.getRecordTotalCount() > 0 && !prod.getProducttype().getID().equals(Producttype.ASSEMBLY)) {
//                                        accProductObj.deleteProductInitialInventoryDtails(prod.getID(), companyid);
//                                    } else {
//                                        accProductObj.deleteAssemblyProductInventory(prod.getID(), companyid);
//                                    }
//                                    accProductObj.deleteProductPermanently(prod.getID(), companyid);
                                }
                            }
                            //Create Global Product Map
                            productMap = new HashMap<String, Object>();
                            if (columnConfig.containsKey("type")) {
                                productMap.put("producttype", productTypeID);
                            }
                            if (columnConfig.containsKey("productname")) {
                                productMap.put("name", productName);
                            }
                            productMap.put("productid", productID);
                            if (columnConfig.containsKey("desc")) {
                                productMap.put("desc", productDescription);
                            }
                            if(!updateExistingRecordFlag) {
                                productMap.put("syncable", false);
                                productMap.put("multiuom", false);
                            }
                            if (columnConfig.containsKey(Constants.ACTIVATE_BATCH)) {
                                productMap.put("isBatchForProduct", isIsBatchForProduct);
                            }
                            if (columnConfig.containsKey(Constants.ACTIVATE_SERIAL_NO)) {
                                productMap.put("isSerialForProduct", isIsSerialForProduct);
                            }
                            if (columnConfig.containsKey("uomname")) {
                                productMap.put("uomid", productUOMID);
                            }
                            if (!productTypeID.equals(Producttype.SERVICE)) { //Service Product
                                if (uom != null) {
                                    productMap.put("transferUoM", uom);
                                    productMap.put("orderUoM", uom);
                                }
                                if (salesuom != null) {
                                    productMap.put("salesuomid", salesuom);
                                } else if (salesuom == null && uom != null) {
                                    productMap.put("salesuomid", uom);
                                }
                                if (purchaseruom != null) {
                                    productMap.put("purchaseuomid", purchaseruom);
                                } else if (purchaseruom == null && uom != null) {
                                    productMap.put("purchaseuomid", uom);
                                }
                                if (!ccFrequencies.isEmpty()) {
                                    productMap.put("CCFrequency", ccFrequencies);
                                    productMap.put("countable", true);
                                } else if(!updateExistingRecordFlag) {
                                    productMap.put("countable", false);
                                }

                                //UOM Details
                                KwlReturnObject companyObj = accountingHandlerDAOobj.getObject(Company.class.getName(), companyid);
                                Company company = (Company) companyObj.getEntityList().get(0);
                                Packaging packaging = null;
                                if (inneruom != null || casinguom != null || uom !=null) {
                                    packaging = new Packaging();
                                    packaging.setCasingUoM(casinguom);
                                    packaging.setInnerUoM(inneruom);
                                    packaging.setStockUoM(uom);
                                    packaging.setCasingUomValue(Double.parseDouble(casinguomvalue));
                                    packaging.setInnerUomValue(Double.parseDouble(inneruomvalue));
                                    packaging.setStockUomValue(Double.parseDouble(stcokuomvalue));
                                    packaging.setCompany(company);

                                }
                                if (packaging != null) {
                                    accProductObj.saveProductPackging(packaging);
                                    productMap.put("packaging", packaging);
                                }
                            } //Service Product
                            
                            Boolean isactive = false;
                            if (columnConfig.containsKey("isactive")) {
                                String temp = recarr[(Integer) columnConfig.get("isactive")].replaceAll("\"", "").trim();
                                if (!StringUtil.isNullOrEmpty(temp)) {
                                    String isIsactive = temp;
                                    if (isIsactive.equalsIgnoreCase("T") || isIsactive.equalsIgnoreCase("TRUE")) {
                                        isactive = true;
                                    } else if (isIsactive.equalsIgnoreCase("F") || isIsactive.equalsIgnoreCase("FALSE")) {
                                        isactive = false;
                                    } else {
                                        throw new AccountingException("Format you entered for Is Active is not correct. It should be like \"T\"/\"TRUE\" or \"F\"/\"FALSE\"");
                                    }
                                }
                            }

                            if (columnConfig.containsKey("isactive")) {
                                productMap.put("isActiveItem", isactive);
                            } else if(!updateExistingRecordFlag) {
                                productMap.put("isActiveItem", true);
                            }
                            if (columnConfig.containsKey("reorderlevel")) {
                                productMap.put("reorderlevel", Double.parseDouble(productReorderLevel));
                            }
                            if (columnConfig.containsKey("reorderquantity")) {
                                productMap.put("reorderquantity", Double.parseDouble(productReorderQuantity));
                            }
                            if (columnConfig.containsKey("warrantyperiod")) {
                                productMap.put("warrantyperiod", Integer.parseInt(productWarrantyPeriod));
                            }
                            if (columnConfig.containsKey("warrantyperiodsal")) {
                                productMap.put("warrantyperiodsal", Integer.parseInt(productSalesWarrantyPeriod));
                            }
                            if (columnConfig.containsKey("leadtime")) {
                                productMap.put("leadtime", Integer.parseInt(productLeadTime));
                            }
                            if (columnConfig.containsKey("productweight")) {
                                productMap.put("productweight", Double.parseDouble(productweight));
                            }
                            if (columnConfig.containsKey("landingcostcategory")) {
                                productMap.put("landingCostCategory", landingcostcategoryids);
                            }
                            
                            if (!StringUtil.isNullOrEmpty(stockAdjustmentAccountID)) {
                                productMap.put("stockadjustmentaccountid", stockAdjustmentAccountID); // Stock Adjustment Account
                            }
                            if (!StringUtil.isNullOrEmpty(inventoryAccountID)) {
                                productMap.put("inventoryaccountid", inventoryAccountID); // Inventory Account
                            }
                            if (!StringUtil.isNullOrEmpty(costOfGoodsSoldAccountID)) {
                                productMap.put("cogsaccountid", costOfGoodsSoldAccountID); // Cost of Goods Sold Account
                            }

                            if (columnConfig.containsKey("parentid")) {
                                productMap.put("parentid", parentProductUUID);
                            }
                            if (columnConfig.containsKey("salesaccountname")) {
                                productMap.put("salesaccountid", productSalesAccId);
                            }
                            if (columnConfig.containsKey("purchaseretaccountname")) {
                                productMap.put("purchaseretaccountid", productPurchaseReturnAccId);
                            }
                            if (columnConfig.containsKey("salesretaccountname")) {
                                productMap.put("salesretaccountid", productSalesReturnAccId);
                            }
                            if (columnConfig.containsKey("vendornameid")) {
                                productMap.put("vendorid", productPreferedVendorID);
                            }
                            if (columnConfig.containsKey("purchaseaccountname")) {
                                productMap.put("purchaseaccountid", productPurchaseAccId);
                            }
                                
                            if (asOfDate == null) {//asOfDate field will be null only when product is new and field is not mapped
                                asOfDate = bookBookBeginningDate;
                            }
                            if (!updateExistingRecordFlag || (updateExistingRecordFlag && columnConfig.containsKey("asofdate"))) {
                                productMap.put("asOfDate", asOfDate);
                            }
                            if (valMethod != null) {
                                productMap.put("valuationmethod", valMethod);
                            }
                            if (!StringUtil.isNullOrEmpty(productDefaultLocationID)) {
                                productMap.put("location", productDefaultLocationID);
                            }

                            if (!StringUtil.isNullOrEmpty(productDefaultWarehouseID)) {
                                productMap.put("warehouse", productDefaultWarehouseID);
                            }

                            if (columnConfig.containsKey("syncable")) {
                                productMap.put("syncable", isSyncable);
                            }
                            if (columnConfig.containsKey("multiuom")) {
                                productMap.put("multiuom", isMultiUOM);
                            }
                            if (uomSchemaType != null && isMultiUOM && extraPref != null && extraPref.getUomSchemaType() == 0) {    //SDP-8926
                                productMap.put("uomschemaType", uomSchemaType);
                            }
                            // if product have uomSchemaType != null and displayUoMObj != null when Account Preferences have show Display UOM Setting is ON
                            if (uomSchemaType != null && displayUoMObj != null) {
                                productMap.put("displayUoM", displayUoMObj.getID());
                            }
                            if ((updateExistingRecordFlag && columnConfig.containsKey("islocationforproduct")) || !updateExistingRecordFlag) {
                                productMap.put("isLocationForProduct", isIslocationforproduct);
                            }
                            if ((updateExistingRecordFlag && columnConfig.containsKey("iswarehouseforproduct")) || !updateExistingRecordFlag) {
                                productMap.put("isWarehouseForProduct", isIswarehouseforproduct);
                            }
                            if(!updateExistingRecordFlag) {
                                productMap.put("deletedflag", false);
                                productMap.put("companyid", companyid);
                                productMap.put("isImport", 1);
                                productMap.put("currencyid", currencyId);
                            }
                            productMap.put("updateExistingRecordFlag", updateExistingRecordFlag);
                            /*  -------------------- Indian Company Fields ------------------ */

                            if (!StringUtil.isNullOrEmpty(tariffName)) {
                                productMap.put("tariffname", tariffName);
                            }
                            if (!StringUtil.isNullOrEmpty(hsncode)) {
                                productMap.put("hsCode", hsncode);
                            }
                            if (reportingSchemaType != null) {
                                productMap.put("reportingSchemaType", reportingSchemaType);
                            }
                            if (!StringUtil.isNullOrEmpty(reportinguomID)) {
                                productMap.put("reportinguom", reportinguomID);
                            }
                            if (!StringUtil.isNullOrEmpty(excisemethod)) {
                                productMap.put("excisemethod", excisemethod);
                            }
                            if (!StringUtil.isNullOrEmpty(vatMethodType)) {
                                productMap.put("vatMethodType", vatMethodType);
                            }
                            if (vatAbatementPeriodFromDate != null) {
                                productMap.put("vatAbatementPeriodFromDate", vatAbatementPeriodFromDate);
                            }
                            if (vatAbatementPeriodToDate != null) {
                                productMap.put("vatAbatementPeriodToDate", vatAbatementPeriodToDate);
                            }
                            if (!StringUtil.isNullOrEmpty(vatcommoditycode)) {
                                productMap.put("vatcommoditycode", vatcommoditycode);
                            }
                            if (!StringUtil.isNullOrEmpty(natureofStockItem)) {
                                productMap.put("natureOfStockItem", natureofStockItem);
                            }
                            if (!StringUtil.isNullOrEmpty(mrprate)) {
                                productMap.put("mrprate", mrprate);
                            }
                            if (!StringUtil.isNullOrEmpty(serviceTaxCode)) {
                                productMap.put("servicetaxcode", serviceTaxCode);
                            }
                            if (!StringUtil.isNullOrEmpty(interStatePurchaseAccount)) {
                                productMap.put("interStatePurAccID", interStatePurchaseAccount);
                            }
                            if (!StringUtil.isNullOrEmpty(interStatePurchaseAccountCForm)) {
                                productMap.put("interStatePurAccCformID", interStatePurchaseAccountCForm);
                            }
                            if (!StringUtil.isNullOrEmpty(interStatePurchaseReturnAccount)) {
                                productMap.put("interStatePurReturnAccID", interStatePurchaseReturnAccount);
                            }
                            if (!StringUtil.isNullOrEmpty(interStatePurchaseReturnAccountCForm)) {
                                productMap.put("interStatePurReturnAccCformID", interStatePurchaseReturnAccountCForm);
                            }
                            if (!StringUtil.isNullOrEmpty(interStateSalesAccount)) {
                                productMap.put("interStateSalesAccID", interStateSalesAccount);
                            }
                            if (!StringUtil.isNullOrEmpty(interStateSalesAccountCForm)) {
                                productMap.put("interStateSalesAccCformID", interStateSalesAccountCForm);
                            }
                            if (!StringUtil.isNullOrEmpty(interStateSalesReturnAccount)) {
                                productMap.put("interStateSalesReturnAccID", interStateSalesReturnAccount);
                            }
                            if (!StringUtil.isNullOrEmpty(interStateSalesReturnAccountCForm)) {
                                productMap.put("interStateSalesReturnAccCformID", interStateSalesReturnAccountCForm);
                            }
                            
                            
                            
                            //Save Global Product Details
                            //if (!StringUtil.isNullOrEmpty(bomProductID) && compQuantity > 0) { //Global Product ll save only when Bom Product ID & Quantity is not empty
                                if(updateExistingRecordFlag){
                                    productMap.put("id", prod.getID());
                                    productresult = accProductObj.updateProduct(productMap);
                                } else {
                                    productresult = accProductObj.addProduct(productMap);
                                }                                
                                product = (Product) productresult.getEntityList().get(0);
				productIdSet.add(product.getID());
                                Object remoteAddress = requestParams.containsKey("remoteAddress")?requestParams.get("remoteAddress") : Constants.defaultIp;
                                String saveAction = updateExistingRecordFlag ? "updated" : "created";
                                String detail= "User " + user.getFullName() + " has " + saveAction +" "+ "Product" + " " + product.getName() + " [" + product.getProductid() + "]";
                                importLogDetailsMap.put(product.getProductid(), detail);
                            //}

                            if (productSalesPrice.length() > 0 && !isUsedInTransaction) {
                                HashMap<String, Object> requestParams2 = new HashMap<>();
                                requestParams2.put(Constants.productid, product.getID());
                                requestParams2.put("carryin", false);
                                requestParams2.put("applydate", product.getAsOfDate());
                                requestParams2.put("affecteduser", "-1");
                                requestParams2.put(Constants.currencyKey, currencyId);
                                requestParams2.put("uomid", product.getUnitOfMeasure().getID());
                                KwlReturnObject priceResult = accProductObj.getPriceListEntry(requestParams2);
                                List list = priceResult.getEntityList();
                                
                                // creating Price list Hashmap
                                HashMap<String, Object> salesPriceMap = new HashMap<String, Object>();
                                salesPriceMap.put("productid", product.getID());
                                salesPriceMap.put("companyid", companyid);
                                salesPriceMap.put("carryin", false);
                                salesPriceMap.put("price", authHandler.roundUnitPrice(Double.parseDouble(productSalesPrice),companyid));
                                salesPriceMap.put("applydate", product.getAsOfDate());
                                salesPriceMap.put("affecteduser", "-1");
                                salesPriceMap.put("currencyid", currencyId);
                                salesPriceMap.put("uomid", product.getUnitOfMeasure().getID());
                                if (list != null && list.size() > 0) {
                                    PriceList price = (PriceList) list.get(0);
                                    salesPriceMap.put("priceid", price.getID());
                                    accProductObj.updatePriceList(salesPriceMap); 
                                } else {
                                    accProductObj.addPriceList(salesPriceMap);
                                }
                            }
                            // For create custom field array
                            customfield = "";
                            JSONArray customJArr = new JSONArray();
                            for (int i = 0; i < jSONArray.length(); i++) {
                                JSONObject jSONObject = jSONArray.getJSONObject(i);

                                if (jSONObject.optBoolean("customflag", false)) {//&& !jSONObject.optBoolean("isLineItem",false)
                                    HashMap<String, Object> requestParams1 = new HashMap<String, Object>();
                                    requestParams1.put(Constants.filter_names, Arrays.asList(Constants.companyid, Constants.moduleid, Constants.fieldlabel));
                                    requestParams1.put(Constants.filter_values, Arrays.asList(companyid, Constants.Acc_Product_Master_ModuleId, jSONObject.getString("columnname")));

                                    KwlReturnObject fieldParamsResult = accCommonTablesDAO.getFieldParams(requestParams1); // get custom field for module
                                    FieldParams params = (FieldParams) fieldParamsResult.getEntityList().get(0);

                                    if (!StringUtil.isNullOrEmpty(recarr[jSONObject.getInt("csvindex")].replaceAll("\"", "").trim())) {
                                        JSONObject customJObj = new JSONObject();
                                        customJObj.put("fieldid", params.getId());
                                        customJObj.put("filedid", params.getId());
                                        customJObj.put("refcolumn_name", "Col" + params.getRefcolnum());
                                        customJObj.put("fieldname", "Custom_" + params.getFieldlabel());
                                        customJObj.put("xtype", params.getFieldtype());

                                        String fieldComboDataStr = "";
                                        if (params.getFieldtype() == 3) { // if field of date type
                                            String dateStr = recarr[jSONObject.getInt("csvindex")].replaceAll("\"", "").trim();
                                            customJObj.put("Col" + params.getColnum(), df.parse(dateStr).getTime());
                                            customJObj.put("fieldDataVal", df.parse(dateStr).getTime());
                                        } else if (params.getFieldtype() == 4 || params.getFieldtype() == 7) { // if field of MultiSelect Drop Down OR Drop Down
                                            String[] fieldComboDataArr = recarr[jSONObject.getInt("csvindex")].replaceAll("\"", "").trim().split(";");

                                            for (int dataArrIndex = 0; dataArrIndex < fieldComboDataArr.length; dataArrIndex++) {
                                                requestParams1 = new HashMap<String, Object>();
                                                requestParams1.put(Constants.filter_names, Arrays.asList(Constants.Acc_custom_fieldId, "value", "deleteflag"));
                                                requestParams1.put(Constants.filter_values, Arrays.asList(params.getId(), fieldComboDataArr[dataArrIndex], 0));

                                                fieldParamsResult = accCommonTablesDAO.getCustomCombodata(requestParams1);
                                                if (fieldParamsResult != null && !fieldParamsResult.getEntityList().isEmpty()) {
                                                    FieldComboData fieldComboData = (FieldComboData) fieldParamsResult.getEntityList().get(0);
                                                    fieldComboDataStr += fieldComboData.getId() + ",";
                                                }
                                            }

                                            if (!StringUtil.isNullOrEmpty(fieldComboDataStr)) {
                                                customJObj.put("Col" + params.getColnum(), fieldComboDataStr.substring(0, fieldComboDataStr.length() - 1));
                                                customJObj.put("fieldDataVal", fieldComboDataStr.substring(0, fieldComboDataStr.length() - 1));
                                            } else {
                                                continue;
                                            }
                                        } else if (params.getFieldtype() == 11) { // if field of check box type 
                                            customJObj.put("Col" + params.getColnum(), Boolean.parseBoolean(recarr[jSONObject.getInt("csvindex")].replaceAll("\"", "").trim()));
                                            customJObj.put("fieldDataVal", Boolean.parseBoolean(recarr[jSONObject.getInt("csvindex")].replaceAll("\"", "").trim()));
                                        } else if (params.getFieldtype() == 12) { // if field of check list type
                                            requestParams1 = new HashMap<String, Object>();
                                            requestParams1.put(Constants.filter_names, Arrays.asList(Constants.Acc_custom_fieldId, "deleteflag"));
                                            requestParams1.put(Constants.filter_values, Arrays.asList(params.getId(), 0));

                                            fieldParamsResult = accCommonTablesDAO.getCustomCombodata(requestParams1);
                                            List<FieldComboData> fieldComboDataList = fieldParamsResult.getEntityList();

                                            String[] fieldComboDataArr = recarr[jSONObject.getInt("csvindex")].replaceAll("\"", "").trim().split(";");

                                            int dataArrIndex = 0;

                                            for (FieldComboData fieldComboData : fieldComboDataList) {
                                                if (fieldComboDataArr.length != dataArrIndex && fieldComboDataArr[dataArrIndex] != null && fieldComboDataArr[dataArrIndex].replaceAll("\"", "").trim().equalsIgnoreCase("true")) {
                                                    fieldComboDataStr += fieldComboData.getId() + ",";
                                                }
                                                dataArrIndex++;
                                            }

                                            if (!StringUtil.isNullOrEmpty(fieldComboDataStr)) {
                                                customJObj.put("Col" + params.getColnum(), fieldComboDataStr.substring(0, fieldComboDataStr.length() - 1));
                                                customJObj.put("fieldDataVal", fieldComboDataStr.substring(0, fieldComboDataStr.length() - 1));
                                            } else {
                                                continue;
                                            }
                                        } else {
                                            customJObj.put("Col" + params.getColnum(), recarr[jSONObject.getInt("csvindex")].replaceAll("\"", "").trim());
                                            customJObj.put("fieldDataVal", recarr[jSONObject.getInt("csvindex")].replaceAll("\"", "").trim());
                                        }

                                        customJObj.put("Custom_" + params.getFieldlabel(), "Col" + params.getColnum());

                                        customJArr.put(customJObj);
                                    }
                                }
                            }//Create Custom Field Array
                            customfield = customJArr.toString();
                            if (!StringUtil.isNullOrEmpty(customfield) && !customfield.equals("[]")) {
                                JSONArray jcustomarray = new JSONArray(customfield);
                                HashMap<String, Object> customrequestParams = new HashMap<String, Object>();
                                customrequestParams.put("customarray", jcustomarray);
                                customrequestParams.put("modulename", Constants.Acc_Product_modulename);
                                customrequestParams.put("moduleprimarykey", Constants.Acc_Productid);
                                customrequestParams.put("modulerecid", product.getID());
                                customrequestParams.put("moduleid", Constants.Acc_Product_Master_ModuleId);//isFixedAsset ? Constants.Acc_FixedAssets_AssetsGroups_ModuleId:
                                customrequestParams.put("companyid", companyid);
                                productMap.put("id", product.getID());
                                customrequestParams.put("customdataclasspath", Constants.Acc_Product_custom_data_classpath);
                                KwlReturnObject customDataresult = fieldDataManagercntrl.setCustomData(customrequestParams);
                                if (customDataresult != null && customDataresult.getEntityList().size() > 0) {
                                    productMap.put("accproductcustomdataref", product.getID());
                                    productresult = accProductObj.updateProduct(productMap);
                                }
                                HashMap<String, Object> customHistoryParams = new HashMap<String, Object>();
                                customHistoryParams.put("productId", product.getID());
                                customHistoryParams.put("customarray", jcustomarray);
                                requestParams.put("gstapplieddate", product.getAsOfDate());                                                                  
                                maintainCustomFieldHistoryForProduct(requestParams, customHistoryParams);
                            }
                        }// Product Code check                        
                        
                        // Tax Mapping for India Company Company Level Tax Mapp to Product Default.                        
//                        if (extraPref.getLineLevelTermFlag() == IndiaComplianceConstants.LINELEVEL_FLAG_ON && product != null) { //SDP-9303
//                            HashMap<String, String> mapDataInd = new HashMap<String, String>();
//                            mapDataInd.put("productid", product.getID());
//                            mapDataInd.put("companyid", extraPref.getCompany().getCompanyID());
//                            Map<String, List<String>> mapDefaultTerm = new HashMap<String, List<String>>();
//                            mapDefaultTerm.put("Purchases", inputDefaultTerms);
//                            mapDefaultTerm.put("Sales", outputDefaultTerms);
//                            if (!updateExistingRecordFlag) {
//                                accProductObj.mapCompanyTaxToProductTax(mapDataInd, product, mapDefaultTerm); //send Default Terms data for addinng default terms  while importing product Input/ Output terms  
//                            } else {
//                                accProductObj.UpdateTaxToProductTax(mapDataInd, product, mapDefaultTerm); //send Default Terms data for addinng default terms  while importing product Input/ Output terms     
//                            }
//                        }
                        
                        if (!updateExistingRecordFlag) {
                            //BOM Product Map
                            JSONArray bomarray = new JSONArray();
                            JSONObject bomobj = new JSONObject();
    //                        bomobj.put("bomproductpid", bompid);
    //                        bomobj.put("bomproductname", bomProductName);
    //                        bomobj.put("bomproductdesc", bomProductDesc);
    //                        bomobj.put("bomProductType", bomProductType);
    //                        bomobj.put("bomProductPurchasePrice", bomProductPurchasePrice);
    //                        bomobj.put("compQuantity", compQuantity);
    //                        bomobj.put("comppercent", comppercent);
    //                        bomobj.put("compactualQuantity", compactualQuantity);
    //                        bomobj.put("comptotal", comptotal);
    //                        bomobj.put("recylequantity", recylequantity);
    //                        bomobj.put("inventoryquantiy", compactualQuantity);  //Inventory Quantiy & Actual Quantity is the same
    //                        bomobj.put("remainingquantity", remainingquantity);
                            bomarray.put(bomobj);
    //                        System.out.println(bomProductName);
                            // for calculating total cost of bom product
    //                        productInitialPurchasePrise += comptotal;
                            productInitialPurchasePrise = 0;

                            //Save BOM Products of an Assembly Product  
                            if (product != null) {
                                if (product.getProducttype().getID().equals(Producttype.ASSEMBLY)) {
                                    saveImportAssemblyProductWithoutBOM(bomarray, product, updateExistingRecordFlag, companyid);
                                }
                            } else {
                                if (!prevProductCode.equalsIgnoreCase(productID)) {  //ERP-11477
                                    throw new AccountingException("This is not an Assembly Product.");
                                } else {
                                    throw new AccountingException("Product ID '" + productID + "' already exists.");   //ERP-11477
                                }
                            }
                        }
                    } catch (Exception ex) {// Inner Try-Catch
                        failed++;
                        String errorMsg = ex.getMessage(), invalidColumns = "";
                        try {
                            JSONObject errorLog = new JSONObject(errorMsg);
                            errorMsg = errorLog.getString("errorMsg");
                            invalidColumns = errorLog.getString("invalidColumns");
                        } catch (JSONException jex) {
                        }
                        failedRecords.append("\n" + accProductModuleService.createCSVrecord(recarr) + "\"" + errorMsg.replaceAll("\"", "") + "\"");
                    }
                    total++;
                }
                cnt++;
                if (count == limit) {
                    txnManager.commit(status);
                    insertAuditLog(AuditAction.PRODUCT_CREATION, record, importLogDetailsMap, userId);
                    importLogDetailsMap.clear();
                    // for reset counter of transaction limit
                    count = 1;
                    def = new DefaultTransactionDefinition();
                    def.setName("import_Tx");
                    def.setPropagationBehavior(TransactionDefinition.PROPAGATION_REQUIRED);
                    status = txnManager.getTransaction(def);
                } else {
                    count++;
                }
            }//while

            HashMap<String, Object> dataMap = new HashMap<>();
            dataMap.put("isdefaultbom", true);
            dataMap.put("currencyid", currencyId);
            for (String productId : productIdSet) {
                double assemblyProductPrice = 0;
                dataMap.put(Constants.productid, productId);
                KwlReturnObject retObj = accProductObj.getAssemblyItems(dataMap);
                List<ProductAssembly> list = retObj.getEntityList();
                Iterator itr = list.iterator();
                while (itr.hasNext()) {
                    Object[] row = (Object[]) itr.next();
                    ProductAssembly passembly = (ProductAssembly) row[0];
                    double purchaseprice = row[1] == null ? 0 : (Double) row[1];
                    double percentage = passembly.getPercentage();
                    double quantity = passembly.getQuantity();
                    assemblyProductPrice += quantity * purchaseprice * (percentage / 100);
                }


                // for saving BOM initial purchase price
                if (assemblyProductPrice > 0) {
                    HashMap<String, Object> initialPurchasePriceMap = new HashMap<String, Object>();
                    initialPurchasePriceMap.put("productid", productId);
                    initialPurchasePriceMap.put("companyid", companyid);
                    initialPurchasePriceMap.put("carryin", true);
                    initialPurchasePriceMap.put("price", assemblyProductPrice);
                    initialPurchasePriceMap.put("applydate", ondate);
                    initialPurchasePriceMap.put("affecteduser", "-1");
                    initialPurchasePriceMap.put("currencyid", currencyId);
                    Map<String, Object>  paramsMap = new HashMap();
                    paramsMap.put("id", productId);
                    UnitOfMeasure unitOfMeasure = (UnitOfMeasure) kwlCommonTablesDAOObj.getRequestedObjectFields(Product.class, new String[]{"unitOfMeasure"}, paramsMap);
                    initialPurchasePriceMap.put("uomid", unitOfMeasure.getID());
                    accProductObj.addPriceList(initialPurchasePriceMap);
                }
                
            }

            if (failed > 0) {
                createFailureFiles(fileName, failedRecords, ".csv");
            }

            int success = total - failed;
            if (total == 0) {
                msg = "Empty file.";
            } else if (success == 0) {
//                issuccess = false;
                msg = "Failed to import all the records.";
            } else if (success == total) {
                msg = "All records are imported successfully.";
            } else {
                msg = "Imported " + success + " record" + (success > 1 ? "s" : "") + " successfully";
                msg += (failed == 0 ? "." : " and failed to import " + failed + " record" + (failed > 1 ? "s" : "") + ".");
            }

            try {
                txnManager.commit(status);
                insertAuditLog(AuditAction.PRODUCT_CREATION, record, importLogDetailsMap, userId);
                importLogDetailsMap.clear();
            } catch (Exception ex) {
                commitedEx = true;
                throw ex;
            }
        } catch (Exception ex) {// Outer Try-Catch
            if (!commitedEx) { //if exception occurs during commit then dont call rollback
                txnManager.rollback(status);
            }
            issuccess = false;
            msg = "" + ex.getMessage();

            Logger.getLogger(accProductController.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
            throw new AccountingException("Error While Importing Records.");
        } finally {
            fileInputStream.close();
            csvReader.close();

            DefaultTransactionDefinition ldef = new DefaultTransactionDefinition();
            ldef.setName("import_Tx");
            ldef.setPropagationBehavior(TransactionDefinition.PROPAGATION_REQUIRED);
            TransactionStatus lstatus = txnManager.getTransaction(ldef);

            try {
                //Insert Integration log
                HashMap<String, Object> logDataMap = new HashMap<String, Object>();
                logDataMap.put("FileName", getActualFileName(fileName));
                logDataMap.put("StorageName", fileName);
                logDataMap.put("Log", msg);
                logDataMap.put("Type", "csv");
                logDataMap.put("FailureFileType", failed>0?"csv":"");
                logDataMap.put("TotalRecs", total);
                logDataMap.put("Rejected", failed);
                logDataMap.put("Module", Constants.Acc_Product_Master_ModuleId);
                logDataMap.put("ImportDate", new Date());
                logDataMap.put("User", userId);
                logDataMap.put("Company", companyid);
                logDataMap.put("Id", logId);
                importDao.saveImportLog(logDataMap);
                
                String tableName = importDao.getTableName(fileName);
                importDao.removeFileTable(tableName); // Remove table after importing all records
                
                txnManager.commit(lstatus);
            } catch (Exception ex) {
                try {  //ERP-12252
                    txnManager.rollback(lstatus);
                } catch (Exception ee) {
                    Logger.getLogger(accProductController.class.getName()).log(Level.SEVERE, null, ee);
                }
                Logger.getLogger(accProductController.class.getName()).log(Level.SEVERE, null, ex);
            }
            try {
                returnObj.put("success", issuccess);
                returnObj.put("msg", msg);
                returnObj.put("totalrecords", total);
                returnObj.put("successrecords", total - failed);
                returnObj.put("failedrecords", failed);
                returnObj.put("filename", getActualFileName(fileName));
                returnObj.put("Module", Constants.Acc_Product_Master_ModuleId);
            } catch (JSONException ex) {
                Logger.getLogger(accProductController.class.getName()).log(Level.SEVERE, null, ex);
            }
        }//finally
        return returnObj;
    }


        //Save Assembly Product Without BOM
    public void saveImportAssemblyProductWithoutBOM(JSONArray bomarray, Product assemblyProduct, boolean updateExistingRecordFlag, String companyid) throws ServiceException {
        try {
//            if (updateExistingRecordFlag) {  //This function need to implement to update inventory in case of update existing product
//                updateImportBillofMaterialsInventory(bomarray, assemblyProduct, companyid);
//            }
//                accProductObj.deleteProductAssembly(assemblyProduct.getID());

            // for checking is default bom details added for Assembly producdt
            BOMDetail bomdetail = null;
            boolean isDefaultBOMAdded = false;
            Map<String, Object> subBOMMap = new HashMap<>();
            subBOMMap.put("productid", assemblyProduct.getID());
            subBOMMap.put("isdefaultbom", true);
            KwlReturnObject subReturnObject = accProductObj.getBOMDetail(subBOMMap);
            if (subReturnObject != null && subReturnObject.getEntityList() != null && !subReturnObject.getEntityList().isEmpty()) {
                bomdetail = (BOMDetail) subReturnObject.getEntityList().get(0);
                isDefaultBOMAdded = true;
            }
            
            HashMap<String, Object> assemblyMap = new HashMap<String, Object>();
            for (int i = 0; i < bomarray.length(); i++) {
                JSONObject obj = new JSONObject();
                obj = (JSONObject) bomarray.get(i);
                
                // For adding default BOM Details
                if (!isDefaultBOMAdded) {
                    Map<String, Object> bomMap = new HashMap<>();
                    bomMap.put("productid", assemblyProduct.getID());
                    bomMap.put("assigndefaultbomcode", true);
                    KwlReturnObject bomdetailResult = accProductObj.saveBOMDetail(bomMap);
                    bomdetail = bomdetailResult.getEntityList() != null ? (BOMDetail) bomdetailResult.getEntityList().get(0) : null;
                    isDefaultBOMAdded = true;
                }
                // if Assembly details contains Assembly Product then get its default bom detail id as subbomid
//                try {     //SDP-6182
//                    KwlReturnObject productList = accProductObj.getProductByID((String) obj.get("bomproductpid"), companyid);
//                    Product subproduct = productList.getEntityList() != null ? (Product) productList.getEntityList().get(0) : null;
//                    if (subproduct != null) {
//                        if (subproduct.getProducttype().getID().equals(Producttype.ASSEMBLY)) {
//                            subBOMMap = new HashMap<>();
//                            subBOMMap.put("productid", subproduct.getID());
//                            subBOMMap.put("isdefaultbom", true);
//                            subReturnObject = accProductObj.getBOMDetail(subBOMMap);
//                            if (subReturnObject != null && subReturnObject.getEntityList() != null && !subReturnObject.getEntityList().isEmpty()) {
//                                BOMDetail subbom = (BOMDetail) subReturnObject.getEntityList().get(0);
//                                assemblyMap.put("subbomid", subbom.getID());
//                            }
//                        }
//                    }
//                } catch (Exception ex) {
//                    Logger.getLogger(accProductController.class.getName()).log(Level.INFO, ex.getMessage());
//                }
//                
//                assemblyMap.put("bomdetailid", bomdetail != null ? bomdetail.getID() : "");
//                assemblyMap.put("productid", assemblyProduct.getID());
//
//                if (!StringUtil.isNullObject(obj.get("bomproductpid"))) {
//                    assemblyMap.put("subproductid", (String) obj.get("bomproductpid"));
//                }
//
//                if (!StringUtil.isNullObject(obj.get("compQuantity"))) {
//                    assemblyMap.put("quantity", (Double) obj.get("compQuantity"));
//                }
//
//                if (!StringUtil.isNullObject(obj.get("comppercent"))) {
//                    assemblyMap.put("percentage", (Double) obj.get("comppercent"));
//                }
//
//                if (!StringUtil.isNullObject(obj.get("compactualQuantity"))) {
//                    assemblyMap.put("actualquantity", (Double) obj.get("compactualQuantity"));
//                }
//
//                if (!StringUtil.isNullObject(obj.get("inventoryquantiy"))) {
//                    assemblyMap.put("inventoryquantiy", (Double) obj.get("inventoryquantiy"));
//                }
//
//                if (!StringUtil.isNullObject(obj.get("recylequantity"))) {
//                    assemblyMap.put("recylequantity", obj.get("recylequantity"));
//                }
//
//                if (!StringUtil.isNullObject(obj.get("remainingquantity"))) {
//                    assemblyMap.put("remainingquantity", obj.get("remainingquantity"));
//                }
//                
//                accProductObj.saveProductAssembly(assemblyMap); //Save Assembly Product
            }//for
        } catch (Exception ex) {
            throw ServiceException.FAILURE("saveAssemblyProduct : " + ex.getMessage(), ex);
        }
    }
    
      private void newStockMovementForProduct(Product product,List<StockMovement> stockMovementsList,double InitialPrice) throws ServiceException{
        try {
            String documentid=product.getID();
            KwlReturnObject kmsg = null;
            List<Object[]> batchserialdetails = null;           
            boolean isBatch = false;
            DateFormat df = authHandler.getDateOnlyFormat();
            if (!product.isIsBatchForProduct() && !product.isIslocationforproduct() && !product.isIswarehouseforproduct() && !product.isIsrowforproduct() && !product.isIsrackforproduct() && !product.isIsbinforproduct() && product.isIsSerialForProduct()) {
                kmsg = accCommonTablesDAO.getOnlySerialDetails(documentid, false, String.valueOf(Constants.Acc_Product_Master_ModuleId), false, true);
                batchserialdetails = kmsg.getEntityList();
            } else {
                isBatch = true;
                kmsg = accCommonTablesDAO.getBatchSerialDetails(documentid, !product.isIsSerialForProduct(), false, String.valueOf(Constants.Acc_Product_Master_ModuleId), false, true, "");
                batchserialdetails = kmsg.getEntityList();
            }
            double ActbatchQty = 1;
            double batchQty = 0;
            if (batchserialdetails != null) {
                // Save Batch detail for both  option for serial no and batch also as if batch option is off then also we are generating batch in backend
                StockMovementDetail smd = null;
                StockMovement stockMovement = null;
                Map<Store, StockMovement> storeWiseStockMovement = new HashMap<>();
                for (Object[] objArr : batchserialdetails) {
                    String locationid = "";
                    String warehouseid = "";
                    String batchid = (String) objArr[0];
                    if (objArr[2] != null) {
                        locationid = (String) objArr[2];
                    }
                    if (objArr[3] != null) {
                        warehouseid = (String) objArr[3];
                    }
                    //double quantity = getNewBatchRemainingQuantity(locationid, warehouseid, companyid, product.getID(), batchid, moduleID, isEdit, documentid);
//                    obj.put("avlquantity", quantity);
                    if ((product.isIsBatchForProduct() || product.isIslocationforproduct() || product.isIswarehouseforproduct() || product.isIsrowforproduct() || product.isIsrackforproduct() || product.isIsbinforproduct())) {
                        ActbatchQty = accCommonTablesDAO.getBatchQuantity(documentid, (String) objArr[0]);
                        if (batchQty == 0) {
                            batchQty = ActbatchQty;

                            KwlReturnObject warehouseObj = accountingHandlerDAOobj.getObject(Store.class.getName(), warehouseid);
                            Store store = (Store) warehouseObj.getEntityList().get(0);
                            if (product.isIswarehouseforproduct() && product.isIslocationforproduct()) {
                                if (storeWiseStockMovement.containsKey(store)) {
                                    stockMovement = storeWiseStockMovement.get(store);
                                    stockMovement.setQuantity(stockMovement.getQuantity() + batchQty);
                                } else {
                                    stockMovement = new StockMovement();
                                    if (store != null) {
                                        stockMovement.setStore(store);
                                    }
                                    stockMovement.setCompany(product.getCompany());
                                    stockMovement.setProduct(product);
                                    stockMovement.setStockUoM(product.getUnitOfMeasure());
                                    stockMovement.setPricePerUnit(InitialPrice); 
                                    stockMovement.setQuantity(batchQty);
                                    stockMovement.setTransactionDate(product.getAsOfDate());
                                    stockMovement.setModuleRefId(product.getID());
                                    stockMovement.setModuleRefDetailId(product.getID());
                                    stockMovement.setTransactionNo(product.getProductid());
                                    stockMovement.setTransactionModule(stockMovement.getTransactionModule().ERP_PRODUCT);
                                    stockMovement.setTransactionType(TransactionType.OPENING);
                                    storeWiseStockMovement.put(store, stockMovement);
                                }
                            }
                        }
                        if ((product.isIslocationforproduct() || product.isIswarehouseforproduct() || product.isIsBatchForProduct() || product.isIsrowforproduct() || product.isIsrackforproduct() || product.isIsbinforproduct()) && (batchQty == ActbatchQty)) {
                            KwlReturnObject locationUpdate = accountingHandlerDAOobj.getObject(Location.class.getName(), locationid);
                            Location locationObj = (Location) locationUpdate.getEntityList().get(0);
                            if (product.isIswarehouseforproduct() && product.isIslocationforproduct()) {
                                smd = new StockMovementDetail();
                                if (locationObj != null) {
                                    smd.setLocation(locationObj);
                                }
                                if (product.isIsrowforproduct()) {
                                    KwlReturnObject krObject = accountingHandlerDAOobj.getObject(StoreMaster.class.getName(), (String) objArr[15]);
                                    StoreMaster row = (StoreMaster) krObject.getEntityList().get(0);
                                    smd.setRow(row);
                                }
                                if (product.isIsrackforproduct()) {
                                    KwlReturnObject krObject = accountingHandlerDAOobj.getObject(StoreMaster.class.getName(), (String) objArr[16]);
                                    StoreMaster rack = (StoreMaster) krObject.getEntityList().get(0);
                                    smd.setRack(rack);
                                }
                                if (product.isIsbinforproduct()) {
                                    KwlReturnObject krObject = accountingHandlerDAOobj.getObject(StoreMaster.class.getName(), (String) objArr[17]);
                                    StoreMaster bin = (StoreMaster) krObject.getEntityList().get(0);
                                    smd.setBin(bin);
                                }

                                if (product.isIsBatchForProduct() && objArr[0] != null) {
                                    KwlReturnObject result1 = accountingHandlerDAOobj.getObject(NewProductBatch.class.getName(), objArr[0].toString());
                                    NewProductBatch newProductBatch = (NewProductBatch) result1.getEntityList().get(0);
                                    if (newProductBatch != null) {
                                        smd.setBatchName(newProductBatch.getBatchname());
                                    }
                                }
                                smd.setQuantity(batchQty);
                                smd.setStockMovement(stockMovement);

                                stockMovement.getStockMovementDetails().add(smd);
                            }

                        }
                    }
                    batchQty--;

                    if (product.isIsSerialForProduct() && objArr[7] != null) {
                        KwlReturnObject result1 = accountingHandlerDAOobj.getObject(NewBatchSerial.class.getName(), objArr[7].toString());
                        NewBatchSerial newBatchSerial = (NewBatchSerial) result1.getEntityList().get(0);
                        if (newBatchSerial != null && product.isIswarehouseforproduct() && product.isIslocationforproduct()) {
                            smd.addSerialName(newBatchSerial.getSerialname());
                        }
                    } else {
                        batchQty = 0;
                    }

                }
                if (product.isIswarehouseforproduct() && product.isIslocationforproduct()) {
                    for (Map.Entry<Store, StockMovement> entry : storeWiseStockMovement.entrySet()) {
                        stockMovementsList.add(entry.getValue());
                    }
                }
            }
        } catch (Exception ex) {
            Logger.getLogger(Importproduct.class.getName()).log(Level.INFO, ex.getMessage());
        }
    }
    
    
    public void saveProductBatch(String batchJSON, Product product, Map<String,Object>  requestData,List<StockMovement> stockMovementsList) throws JSONException, ParseException, SessionExpiredException, ServiceException, UnsupportedEncodingException, AccountingException {
        JSONArray jArr = new JSONArray(batchJSON);
        String purchasebatchid = "";
        KwlReturnObject kmsg = null;
        double ActbatchQty = 1;
        double batchQty = 0;
        boolean isBatch = false;
        boolean isserial = false;
        boolean isLocationForProduct = false;
        boolean isWarehouseForProduct = false;
        boolean isRowForProduct = false;
        boolean isRackForProduct = false;
        boolean isBinForProduct = false;
        boolean isBatchForProduct = false;
        boolean isSerialForProduct = false;
        boolean isSKUForProduct = false;
        int serialsequence = 1 , batchsequence = 1; // for user selected sequence of batch and serial while creating Product.
//        DateFormat df = authHandler.getDateFormatter(request);    //refer ticket ERP-15117
        DateFormat df = authHandler.getDateOnlyFormat();
         if (requestData.containsKey(Constants.importdf) && ((DateFormat) requestData.get(Constants.importdf)) != null) {
            df = (DateFormat) requestData.get(Constants.importdf);
        }
        Date asOfDate = null;
        if (requestData.containsKey("asOfDate") && requestData.get("asOfDate") != null) {
            asOfDate = (Date) requestData.get("asOfDate");
        }
        String companyid = product.getCompany().getCompanyID();
        KwlReturnObject capresult = accountingHandlerDAOobj.getObject(CompanyAccountPreferences.class.getName(), companyid);
        CompanyAccountPreferences preferences = (CompanyAccountPreferences) capresult.getEntityList().get(0);
        isBatch = preferences.isIsBatchCompulsory();
        isserial = preferences.isIsSerialCompulsory();
        double inititialprice=0;
        if(requestData.containsKey("initialprice") && requestData.get("initialprice") != null ){
            inititialprice=(Double) requestData.get("initialprice");
        }
                
        if (!StringUtil.isNullOrEmpty(product.getID())) {
            isLocationForProduct = product.isIslocationforproduct();
            isWarehouseForProduct = product.isIswarehouseforproduct();
            isRowForProduct = product.isIsrowforproduct();
            isRackForProduct = product.isIsrackforproduct();
            isBinForProduct = product.isIsbinforproduct();
            isBatchForProduct = product.isIsBatchForProduct();
            isSerialForProduct = product.isIsSerialForProduct();
            isSKUForProduct = product.isIsSKUForProduct();
        }
        NewProductBatch productBatch = null;
        String productBatchId = "";
        //Save Batch detail for both  option for serial no and batch also as if batch option is off then also we are generating batch in backend
        StockMovementDetail smd=null;
        StockMovement stockMovement=null;
        Map<Store, StockMovement> storeWiseStockMovement = new HashMap<Store, StockMovement>();
        Map<String,Double> qtymp=new HashMap<>();
        for (int i = 0; i < jArr.length(); i++) {
            JSONObject jSONObject = new JSONObject(jArr.get(i).toString());
            if (jSONObject.has("quantity") && !jSONObject.getString("quantity").equals("undefined") && !jSONObject.getString("quantity").isEmpty()) {
                ActbatchQty = jSONObject.getDouble("quantity");
            }
            if (batchQty == 0) {
                batchQty = jSONObject.getDouble("quantity");
                
                KwlReturnObject warehouseObj = accountingHandlerDAOobj.getObject(Store.class.getName(),jSONObject.getString("warehouse"));
                Store store = (Store) warehouseObj.getEntityList().get(0);            
                if (isWarehouseForProduct && isLocationForProduct) {
                    if (storeWiseStockMovement.containsKey(store)) {
                        stockMovement = storeWiseStockMovement.get(store);
                        stockMovement.setQuantity(stockMovement.getQuantity() + jSONObject.optDouble("quantity", 0.0));
                    } else {
                        stockMovement = new StockMovement();
                        if (store != null) {
                            stockMovement.setStore(store);
                        }
                        stockMovement.setCompany(product.getCompany());
                        stockMovement.setProduct(product);
                        stockMovement.setStockUoM(product.getUnitOfMeasure());
                        stockMovement.setPricePerUnit(inititialprice);
                        double qty=isSerialForProduct?jArr.length():jSONObject.optDouble("quantity", 0.0);
                        stockMovement.setQuantity(qty);
//                        stockMovement.setTransactionDate(authHandler.getConstantDateFormatter().parse(authHandler.getConstantDateFormatter().format(new Date())));
                        stockMovement.setTransactionDate(asOfDate);//instead of 'new Date()' 'asofdate' field value taken as transaction date
                        stockMovement.setModuleRefId(product.getID());
                        stockMovement.setModuleRefDetailId(product.getID());
                        //                stockMovement.setVendor(goodsReceiptOrderDetails.getGrOrder().getVendor());
                        //                stockMovement.setCostCenter(goodsReceiptOrderDetails.getGrOrder().getCostcenter());
                        stockMovement.setTransactionNo(product.getProductid());
                        stockMovement.setTransactionModule(stockMovement.getTransactionModule().ERP_PRODUCT);
                        stockMovement.setTransactionType(TransactionType.OPENING);
                        storeWiseStockMovement.put(store, stockMovement);
                    }
                }
            }
            if ((isLocationForProduct || isWarehouseForProduct || isBatchForProduct) && (batchQty == ActbatchQty)) {

                HashMap<String, Object> pdfTemplateMap = new HashMap<String, Object>();
                pdfTemplateMap.put("companyid", companyid);
                pdfTemplateMap.put("name",StringUtil.DecodeText(jSONObject.optString("batch")));
                if (jSONObject.has("mfgdate") && !StringUtil.isNullOrEmpty(jSONObject.getString("mfgdate"))) {
                    pdfTemplateMap.put("mfgdate", df.parse(jSONObject.getString("mfgdate")));
                }
                if (jSONObject.has("expdate") && !StringUtil.isNullOrEmpty(jSONObject.getString("expdate"))) {
                    pdfTemplateMap.put("expdate", df.parse(jSONObject.getString("expdate")));
                }
                 double qty=isSerialForProduct?jArr.length():jSONObject.optDouble("quantity", 0.0);
//                pdfTemplateMap.put("quantity", qty);
                pdfTemplateMap.put("quantity", jSONObject.getString("quantity"));
//                pdfTemplateMap.put("balance", jSONObject.getString("balance"));
                pdfTemplateMap.put("location", jSONObject.optString("location",""));
                pdfTemplateMap.put("product", product.getID());
                pdfTemplateMap.put("warehouse", jSONObject.optString("warehouse",""));
                pdfTemplateMap.put("row", jSONObject.optString("row",""));
                pdfTemplateMap.put("rack", jSONObject.optString("rack",""));
                pdfTemplateMap.put("bin", jSONObject.optString("bin",""));
                pdfTemplateMap.put("isopening", true);
                pdfTemplateMap.put("transactiontype", "28");//This is GRN Type Tranction  
                pdfTemplateMap.put("ispurchase", true);
                
                //Check duplicate batch 
                ArrayList filter_names = new ArrayList(), filter_params = new ArrayList();
                HashMap<String, Object> filterRequestParams = new HashMap<String, Object>();
                filter_names.add("company.companyID");
                filter_params.add(companyid);
                
                filter_names.add("location.id");
                filter_params.add(jSONObject.optString("location",""));
                
                filter_names.add("warehouse.id");
                filter_params.add(jSONObject.optString("warehouse",""));
                
                filter_names.add("product");
                filter_params.add(product.getID());
                
                filter_names.add("batchname");
                filter_params.add(StringUtil.DecodeText(jSONObject.optString("batch")));

                if(isBinForProduct){
                    filter_names.add("bin.id");
                    filter_params.add(jSONObject.optString("bin",""));
                }
                if(isRowForProduct){
                    filter_names.add("row.id");
                    filter_params.add(jSONObject.optString("row",""));
                }
                if(isRackForProduct){
                    filter_names.add("rack.id");
                    filter_params.add(jSONObject.optString("rack",""));
                }
                
                filterRequestParams.put("filter_names", filter_names);
                filterRequestParams.put("filter_params", filter_params);

                KwlReturnObject resultObj = accMasterItemsDAOobj.getNewBatches(filterRequestParams, false, false);
                NewProductBatch productBatchObj = (resultObj != null && !resultObj.getEntityList().isEmpty() && resultObj.getEntityList().get(0) != null) ? (NewProductBatch) resultObj.getEntityList().get(0) : null;
                if (productBatchObj != null) {
                    pdfTemplateMap.put("id", productBatchObj.getId());
                    if(i!=0 && isSerialForProduct){
                        
                    pdfTemplateMap.put("quantity", productBatchObj.getQuantitydue()+Double.parseDouble(jSONObject.getString("quantity")));
                }
                }
                if (isBatchForProduct && !isSerialForProduct && jSONObject.has("duplicatebatchrow") && Boolean.parseBoolean(jSONObject.getString("duplicatebatchrow"))) {

                    pdfTemplateMap.put("quantity", productBatchObj.getQuantitydue() + Double.parseDouble(jSONObject.getString("quantity")));
                }
                kmsg = accCommonTablesDAO.saveNewBatchForProduct(pdfTemplateMap);

                if (kmsg != null && kmsg.getEntityList().size() != 0) {
                    productBatch = (NewProductBatch) kmsg.getEntityList().get(0);
                    productBatchId = productBatch.getId();
                    
                    // on success save, update exp date for all entries from same batch and product
                    if (jSONObject.has("expdate") && !StringUtil.isNullOrEmpty(jSONObject.getString("expdate"))) {
                        HashMap<String, Object> batchParams = new HashMap<String, Object>();
                        batchParams.put("batchname", StringUtil.DecodeText(jSONObject.optString("batch")));
                        batchParams.put("itemcode", product.getProductid());
                        batchParams.put("company", companyid);
                        batchParams.put("exptodate", df.parse(jSONObject.getString("expdate")));
                        accCommonTablesDAO.updateBatchExpDate(batchParams);
                    }
                }
//               
                HashMap<String, Object> documentMap = new HashMap<String, Object>();
//                documentMap.put("quantity", qty);
                documentMap.put("quantity", jSONObject.getString("quantity"));
                documentMap.put("batchmapid", productBatchId);
                documentMap.put("documentid", product.getID());
                documentMap.put("transactiontype", "28");//This is GRN Type Tranction
                if (jSONObject.has("mfgdate") && !StringUtil.isNullOrEmpty(jSONObject.getString("mfgdate"))) {
                    documentMap.put("mfgdate", df.parse(jSONObject.getString("mfgdate")));
                }
                if (jSONObject.has("expdate") && !StringUtil.isNullOrEmpty(jSONObject.getString("expdate"))) {
                    documentMap.put("expdate", df.parse(jSONObject.getString("expdate")));
                }
                
                //Code to Send Batch
                KwlReturnObject batchObj = accountingHandlerDAOobj.getObject(NewProductBatch.class.getName(), productBatchId);
                NewProductBatch newProductBatch1 = (NewProductBatch) batchObj.getEntityList().get(0);
                
                KwlReturnObject locationUpdate = accountingHandlerDAOobj.getObject(Location.class.getName(), jSONObject.getString("location"));
                Location locationObj = (Location) locationUpdate.getEntityList().get(0);
                if (isWarehouseForProduct && isLocationForProduct) {
                    smd = new StockMovementDetail();
                    if (locationObj != null) {
                        smd.setLocation(locationObj);
                    }
                    if(isRowForProduct){
                        KwlReturnObject krObject = accountingHandlerDAOobj.getObject(StoreMaster.class.getName(), jSONObject.optString("row"));
                        StoreMaster row = (StoreMaster) krObject.getEntityList().get(0);
                        smd.setRow(row);
                    }
                    if(isRackForProduct){
                        KwlReturnObject krObject = accountingHandlerDAOobj.getObject(StoreMaster.class.getName(), jSONObject.optString("rack"));
                        StoreMaster rack = (StoreMaster) krObject.getEntityList().get(0);
                        smd.setRack(rack);
                    }
                    if(isBinForProduct){
                        KwlReturnObject krObject = accountingHandlerDAOobj.getObject(StoreMaster.class.getName(), jSONObject.optString("bin"));
                        StoreMaster bin = (StoreMaster) krObject.getEntityList().get(0);
                        smd.setBin(bin);
                    }
                    
//                    smd.setQuantity(qty);
                    smd.setQuantity(Double.parseDouble(jSONObject.getString("quantity")));
                    smd.setBatchName(newProductBatch1.getBatchname());
                    smd.setStockMovement(stockMovement);
                    stockMovement.getStockMovementDetails().add(smd);
                }
                
                KwlReturnObject krObject= accMasterItemsDAOobj.getLocationBatchDocumentMp(documentMap);
                LocationBatchDocumentMapping locationBatchDocumentMappingObj=(krObject.getEntityList()!=null&&!krObject.getEntityList().isEmpty())?(LocationBatchDocumentMapping) krObject.getEntityList().get(0):null;
                if(locationBatchDocumentMappingObj!=null){
                    documentMap.put("id", locationBatchDocumentMappingObj.getId());
                }
                double docQty=0;
                if(qtymp.containsKey(productBatchId)){
                    docQty=qtymp.get(productBatchId);
                    docQty+=(!StringUtil.isNullOrEmpty(jSONObject.getString("quantity")))? Double.parseDouble(jSONObject.getString("quantity")):0;
                    documentMap.put("quantity", docQty);
                    qtymp.put(productBatchId, docQty);
                }else{
                    docQty=(!StringUtil.isNullOrEmpty(jSONObject.getString("quantity")))? Double.parseDouble(jSONObject.getString("quantity")):0;
                    qtymp.put(productBatchId, docQty);
                }
                
                /**
                 * added selected sequence for batch selected by user while
                 * creating Product.
                 */
                documentMap.put("batchsequence", batchsequence++);
                accCommonTablesDAO.saveBatchDocumentMapping(documentMap);
            }
            batchQty--;

            if (isSerialForProduct) {  //if serial no option is on then only save the serial no details 

                HashMap<String, Object> pdfTemplateMap = new HashMap<String, Object>();
                pdfTemplateMap.put("id", jSONObject.getString("serialnoid"));
                pdfTemplateMap.put("companyid", companyid);
                pdfTemplateMap.put("product", product.getID());
                pdfTemplateMap.put("name", StringUtil.DecodeText(jSONObject.optString("serialno")));
                if (jSONObject.has("expstart") && !StringUtil.isNullOrEmpty(jSONObject.getString("expstart"))) {
                    pdfTemplateMap.put("expfromdate", df.parse(jSONObject.getString("expstart")));
                }
                if (jSONObject.has("expend") && !StringUtil.isNullOrEmpty(jSONObject.getString("expend"))) {
                    pdfTemplateMap.put("exptodate", df.parse(jSONObject.getString("expend")));
                }
                //check if expend date is provided if not provide expdate as expiry date
                if (StringUtil.isNullOrEmpty(jSONObject.getString("expend"))) {
                    if (jSONObject.has("expdate") && !StringUtil.isNullOrEmpty(jSONObject.getString("expdate"))) {
                        pdfTemplateMap.put("exptodate", df.parse(jSONObject.getString("expdate")));
                    }
                }
                pdfTemplateMap.put("batch", productBatchId);
                pdfTemplateMap.put("transactiontype", "28");//This is GRN Type Tranction  
                pdfTemplateMap.put("quantity", "1");//This is GRN Type Tranction  
                pdfTemplateMap.put("ispurchase", true);
                pdfTemplateMap.put("isopening", true);
                pdfTemplateMap.put("skuvalue", jSONObject.optString("skufield", ""));
                kmsg = accCommonTablesDAO.saveNewSerialForBatch(pdfTemplateMap);
                String serialDetailsId = "";
                if (kmsg != null && kmsg.getEntityList().size() != 0) {
                    NewBatchSerial serialDetails = (NewBatchSerial) kmsg.getEntityList().get(0);
                    serialDetailsId = serialDetails.getId();
                }

                HashMap<String, Object> documentMap = new HashMap<String, Object>();
                documentMap.put("quantity", 1);
                documentMap.put("serialmapid", serialDetailsId);
                documentMap.put("documentid", product.getID());
                documentMap.put("transactiontype", "28");//This is GRN Type Tranction  
                if (jSONObject.has("expstart") && !StringUtil.isNullOrEmpty(jSONObject.getString("expstart"))) {
                    documentMap.put("expfromdate", df.parse(jSONObject.getString("expstart")));
                }
                if (jSONObject.has("expend") && !StringUtil.isNullOrEmpty(jSONObject.getString("expend"))) {
                    documentMap.put("exptodate", df.parse(jSONObject.getString("expend")));
                }
               
                // accCommonTablesDAO.saveSerialDocumentMapping(documentMap);
                /**
                 * added selected sequence for serial selected by user while
                 * creating Product.
                 */
                documentMap.put("serialsequence", serialsequence++);
                KwlReturnObject krObj = accCommonTablesDAO.saveSerialDocumentMapping(documentMap);
                SerialDocumentMapping serialDocumentMapping = (SerialDocumentMapping) krObj.getEntityList().get(0);
                if (jSONObject.has("customfield")) {
                    String customfield = jSONObject.getString("customfield");
                    if (!StringUtil.isNullOrEmpty(customfield)) {
                        HashMap<String, Object> DOMap = new HashMap<String, Object>();
                        JSONArray jcustomarray = new JSONArray(customfield);

                        HashMap<String, Object> customrequestParams = new HashMap<String, Object>();
                        customrequestParams.put("customarray", jcustomarray);
                        customrequestParams.put("modulename", "SerialDocumentMapping");
                        customrequestParams.put("moduleprimarykey", "SerialDocumentMappingId");
                        customrequestParams.put("modulerecid", serialDocumentMapping.getId());
                        customrequestParams.put("moduleid", Constants.SerialWindow_ModuleId);
                        customrequestParams.put("companyid", companyid);
                        DOMap.put("id", serialDocumentMapping.getId());
                        customrequestParams.put("customdataclasspath", Constants.Acc_Serial_custom_data_classpath);
                        KwlReturnObject customDataresult = fieldDataManagercntrl.setCustomData(customrequestParams);
                        if (customDataresult != null && customDataresult.getEntityList().size() > 0) {
                            DOMap.put("serialcustomdataref", serialDocumentMapping.getId());
                            accCommonTablesDAO.updateserialcustomdata(DOMap);
                        }
                    }
                } 
                
                //Code to Send Serial Numbers to Inventory      
                KwlReturnObject serialObj = accountingHandlerDAOobj.getObject(NewBatchSerial.class.getName(), serialDetailsId);
                NewBatchSerial newBatchSerial = (NewBatchSerial) serialObj.getEntityList().get(0);
                if (newBatchSerial != null) {
                    if (isWarehouseForProduct && isLocationForProduct) {
                        smd.addSerialName(newBatchSerial.getSerialname());
                    }
                }
                                            
//                accCommonTablesDAO.saveSerialDocumentMapping(documentMap);

            }else{
                batchQty=0;
            }
        }
        if (isWarehouseForProduct && isLocationForProduct) {
            for (Map.Entry<Store, StockMovement> entry : storeWiseStockMovement.entrySet()) {
                stockMovementsList.add(entry.getValue());
            }
        }

    }
    public String getUOMId(JSONObject params) {
        String uomid = "";
        HashMap<String, Object> filterParams = new HashMap<>();
        try {
            filterParams.put("companyid", params.getString("companyid"));
            filterParams.put("uomname", params.getString("uomname"));
            KwlReturnObject returnObject = accUomObj.getUnitOfMeasure(filterParams);
            List uomList = returnObject.getEntityList();
            if (!uomList.isEmpty()) {
                UnitOfMeasure uom = (UnitOfMeasure) uomList.get(0);
                uomid = !StringUtil.isNullObject(uom) ? uom.getID() : "";
            }
        } catch (Exception ex) {
            Logger.getLogger(ImportHandler.class.getName()).log(Level.SEVERE, null, ex);
        }
        return uomid;
    }
            
}
