
/*
 * Copyright (C) 2012  Krawler Information Systems Pvt Ltd
 * All rights reserved.
 * 
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 */
package com.krawler.spring.accounting.product;

import com.krawler.common.admin.AuditAction;
import com.krawler.common.admin.*;
import com.krawler.common.service.ServiceException;
import com.krawler.common.session.SessionExpiredException;
import com.krawler.common.util.*; //INV_ACC_MERGE
import com.krawler.customFieldMaster.fieldDataManager;
import com.krawler.esp.handlers.*;
import com.krawler.hql.accounting.*;
import com.krawler.spring.accounting.account.accAccountDAO;
import com.krawler.spring.accounting.currency.accCurrencyDAO;
import com.krawler.spring.accounting.account.accVendorCustomerProductDAO;
import com.krawler.spring.accounting.goodsreceipt.accGoodsReceiptDAO;
import com.krawler.spring.accounting.handler.AccountingHandlerDAO;
import com.krawler.spring.accounting.handler.AccountingManager;
import com.krawler.spring.accounting.handler.CommonFunctions;
import com.krawler.spring.accounting.invoice.accInvoiceDAO;
import com.krawler.spring.accounting.purchaseorder.accPurchaseOrderDAO;
import com.krawler.spring.accounting.salesorder.accSalesOrderDAO;
import com.krawler.spring.auditTrailModule.auditTrailDAO;
import com.krawler.spring.authHandler.authHandler;
import com.krawler.spring.common.AccCommonTablesDAO;
import com.krawler.spring.common.KwlReturnObject;
import com.krawler.spring.sessionHandler.sessionHandlerImpl;
import com.krawler.spring.storageHandler.storageHandlerImpl;
import com.krawler.utils.json.base.JSONArray;
import com.krawler.utils.json.base.JSONException;
import com.krawler.utils.json.base.JSONObject;
import java.io.UnsupportedEncodingException;
import java.math.BigInteger;
import java.net.URLEncoder;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.*;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.springframework.context.MessageSource;
import org.springframework.context.MessageSourceAware;
import org.springframework.orm.hibernate3.HibernateTransactionManager;
import org.springframework.transaction.TransactionDefinition;
import org.springframework.transaction.TransactionStatus;
import org.springframework.transaction.support.DefaultTransactionDefinition;
import org.springframework.web.servlet.ModelAndView;
import org.springframework.web.servlet.mvc.multiaction.MultiActionController;
import org.springframework.web.servlet.support.RequestContextUtils;
import com.krawler.hql.accounting.VendorProductMapping;
import com.krawler.inventory.exception.InventoryException;
import com.krawler.inventory.model.inspection.InspectionTemplate;
import com.krawler.inventory.model.location.Location;
import com.krawler.inventory.model.packaging.Packaging;     //INV_ACC_MERGE
import com.krawler.inventory.model.packaging.PackagingService;//INV_ACC_MERGE
import com.krawler.inventory.model.stockmovement.StockMovement;
import com.krawler.inventory.model.stockmovement.StockMovementDetail;
import com.krawler.inventory.model.stockmovement.StockMovementService;
import com.krawler.inventory.model.stockmovement.TransactionModule;
import com.krawler.inventory.model.stockmovement.TransactionType;
import com.krawler.inventory.model.store.Store;
import com.krawler.inventory.model.store.StoreService;
import com.krawler.spring.accounting.companypreferances.CompanyPreferencesConstants;
import com.krawler.spring.accounting.companypreferances.accCompanyPreferencesDAO;
import com.krawler.spring.accounting.inventory.AccImportService;
import java.text.ParseException;
import com.krawler.spring.accounting.jasperreports.*;
import com.krawler.spring.accounting.journalentry.accJournalEntryDAO;
import com.krawler.spring.accounting.masteritems.accMasterItemsDAO;
import static com.krawler.spring.accounting.product.accProductController.getActualFileName;
import com.krawler.spring.accounting.productmodule.service.AccProductModuleService;
import com.krawler.spring.accounting.reports.AccReportsHandler;
import com.krawler.spring.accounting.reports.AccReportsService;
import com.krawler.spring.accounting.uom.accUomDAO;
import com.krawler.spring.common.fieldManagerDAO;
import com.krawler.spring.common.kwlCommonTablesDAO;
import com.krawler.spring.companyDetails.companyDetailsDAO;
import com.krawler.spring.exportFunctionality.exportMPXDAOImpl;
import com.krawler.spring.importFunctionality.ImportDAO;
import com.krawler.spring.importFunctionality.ImportHandler;
import com.krawler.esp.handlers.APICallHandlerService;
import com.krawler.inventory.model.approval.consignmentservice.ConsignmentService;
import com.krawler.inventory.model.frequency.Frequency;
import com.krawler.inventory.model.location.LocationService;
import com.krawler.inventory.model.stock.StockDAO;
import com.krawler.inventory.model.stock.StockService;
import com.krawler.inventory.model.stockout.StockAdjustment;
import com.krawler.inventory.view.StockController;
import com.krawler.spring.accounting.customer.accCustomerDAO;
import com.krawler.spring.accounting.product.service.AccProductService;
import com.krawler.spring.accounting.assemblyQA.AssemblyProductApprovalDetails;
import com.krawler.spring.accounting.assemblyQA.AssemblyQAStatus;
import com.krawler.spring.accounting.handler.*;
import com.krawler.spring.sessionHandler.CompanySessionClass;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.net.URLDecoder;
import java.util.concurrent.ArrayBlockingQueue;
import java.util.concurrent.BlockingQueue;
import javax.servlet.ServletContext;
import net.sf.jasperreports.engine.*;
import net.sf.jasperreports.engine.data.JRBeanCollectionDataSource;
import net.sf.jasperreports.engine.design.JasperDesign;
import net.sf.jasperreports.engine.export.JRPdfExporter;
import net.sf.jasperreports.engine.export.JRPdfExporterParameter;
import net.sf.jasperreports.engine.xml.JRXmlLoader;
import org.apache.poi.hssf.usermodel.HSSFCell;
import org.apache.poi.hssf.usermodel.HSSFFormulaEvaluator;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.poifs.filesystem.POIFSFileSystem;
import com.krawler.spring.exportFuctionality.ExportRecordHandler;
import com.krawler.spring.accounting.goodsreceipt.AccGoodsReceiptServiceDAO;
import com.krawler.spring.accounting.invoice.AccInvoiceServiceDAO;
import org.apache.velocity.app.VelocityEngine;
import com.krawler.spring.accounting.customDesign.CustomDesignDAO;
import com.krawler.spring.accounting.reports.ConsolidationReportExportThread;
import static com.krawler.esp.web.resource.Links.loginpageFull;
import com.krawler.inventory.exception.SeqFormatException;
import com.krawler.inventory.model.sequence.ModuleConst;
import com.krawler.inventory.model.sequence.SeqFormat;
import com.krawler.inventory.model.sequence.SeqService;
import com.krawler.inventory.view.ImportInvData;
import com.krawler.spring.accounting.asset.AccAssetService;
import com.krawler.spring.authHandler.authHandlerDAO;
/**
 *
 * @author krawler
 */
public class accProductControllerCMN extends MultiActionController implements MessageSourceAware{
    private static final Logger lgr = Logger.getLogger(StockController.class.getName());
    private HibernateTransactionManager txnManager;
    private accProductDAO accProductObj;
    private accSalesOrderDAO accSalesOrderDAOobj;
    private accPurchaseOrderDAO accPurchaseOrderobj;
    private String successView;
    private auditTrailDAO auditTrailObj;
    private accInvoiceDAO accInvoiceDAOobj;
    private accGoodsReceiptDAO accGoodsReceiptDAOobj;
    private MessageSource messageSource;
    private AccountingHandlerDAO accountingHandlerDAOobj;
    private accAccountDAO accAccountDAOobj;
    private accVendorCustomerProductDAO accVendorCustomerProductDAOobj;
    private AccCommonTablesDAO accCommonTablesDAO;
    private accCurrencyDAO accCurrencyDAOobj;
    private accCompanyPreferencesDAO accCompanyPreferencesObj;    
    private accProductController accProductcontrollerObj;
    private kwlCommonTablesDAO kwlCommonTablesDAOObj;
    private accJournalEntryDAO accJournalEntryobj;
    private fieldDataManager fieldDataManagercntrl;
    private com.krawler.spring.common.fieldDataManager accountingCommonfieldDataManage;
    private exportMPXDAOImpl exportDaoObj;
    private PackagingService packagingService; //INV_ACC_MERGE
    private StockMovementService stockMovementService;
    private accMasterItemsDAO accMasterItemsDAO;
    private AccReportsService accReportsService;
    public ImportHandler importHandler;
    public Importproduct  importpoductobj;
    private AccProductModuleService accProductModuleService;
    private accUomDAO accUomObj;
    private ImportDAO importDao;
    private AccImportService accImportServiceObj;
    private StoreService storeService;
    private companyDetailsDAO companyDetailsDAOObj;
    private fieldManagerDAO fieldManagerDAOobj;
    private APICallHandlerService apiCallHandlerService; 
    private StockDAO stockDAO;
    private AccProductService AccProductService;
    private accCustomerDAO accCustomerDAOobj;
    private StockService stockService;
    private LocationService locationService;
    private ConsignmentService consignmentService;
    private AccGoodsReceiptServiceDAO accGoodsReceiptServiceDAOObj;
    private AccInvoiceServiceDAO accInvoiceServiceDAOObj;
    private VelocityEngine velocityEngine;
    private CustomDesignDAO customDesignDAOObj;
    private ConsolidationReportExportThread consolidationReportExportThread;
    private AccAssetService accAssetService;
    private authHandlerDAO authHandlerDAOObj;
    private SeqService seqService;
    private ImportInvData importInvData;

    public void setConsolidationReportExportThread(ConsolidationReportExportThread consolidationReportExportThread) {
        this.consolidationReportExportThread = consolidationReportExportThread;
    }    

    public void setCommonfieldDataManager(com.krawler.spring.common.fieldDataManager fieldDataManagercntrl) {
        this.accountingCommonfieldDataManage = fieldDataManagercntrl;
    }

    public void setAccGoodsReceiptServiceDAOobj(AccGoodsReceiptServiceDAO accGoodsReceiptServiceDAOObj) {
        this.accGoodsReceiptServiceDAOObj = accGoodsReceiptServiceDAOObj;
    }

    public void setAccInvoiceServiceDAOObj(AccInvoiceServiceDAO accInvoiceServiceDAOObj) {
        this.accInvoiceServiceDAOObj = accInvoiceServiceDAOObj;
    }

    public void setVelocityEngine(VelocityEngine velocityEngine) {
        this.velocityEngine = velocityEngine;
    }

    public void setCustomDesignDAOObj(CustomDesignDAO customDesignDAOObj) {
        this.customDesignDAOObj = customDesignDAOObj;
    }
  
    public void setConsignmentService(ConsignmentService consignmentService) {
        this.consignmentService = consignmentService;
    }


    @Override
    public void setMessageSource(MessageSource ms) {
        this.messageSource=ms;
    }

    public accVendorCustomerProductDAO getAccVendorCustomerProductDAOobj() {
        return accVendorCustomerProductDAOobj;
    }

    public void setAccVendorCustomerProductDAOobj(accVendorCustomerProductDAO accVendorCustomerProductDAOobj) {
        this.accVendorCustomerProductDAOobj = accVendorCustomerProductDAOobj;
    }

    public void setAccGoodsReceiptDAO(accGoodsReceiptDAO accGoodsReceiptDAOobj) {
        this.accGoodsReceiptDAOobj = accGoodsReceiptDAOobj;
    }
    public void setAccInvoiceDAO(accInvoiceDAO accInvoiceDAOobj) {
        this.accInvoiceDAOobj = accInvoiceDAOobj;
    }
    public void setTxnManager(HibernateTransactionManager txManager) {
        this.txnManager = txManager;
    }
    public void setaccProductDAO(accProductDAO accProductObj) {
        this.accProductObj = accProductObj;
    }
    public void setaccSalesOrderDAO(accSalesOrderDAO accSalesOrderDAOobj) {
        this.accSalesOrderDAOobj = accSalesOrderDAOobj;
    }
    public void setaccPurchaseOrderDAO(accPurchaseOrderDAO accPurchaseOrderobj) {
        this.accPurchaseOrderobj = accPurchaseOrderobj;
    }
    public String getSuccessView() {
        return successView;
    }
    public void setSuccessView(String successView) {
        this.successView = successView;
    }
    public void setauditTrailDAO(auditTrailDAO auditTrailDAOObj){
        this.auditTrailObj = auditTrailDAOObj;
    }
    public void setaccountingHandlerDAO(AccountingHandlerDAO AccountingHandlerDAOobj) {
        this.accountingHandlerDAOobj = AccountingHandlerDAOobj;
    }
    public void setaccAccountDAO(accAccountDAO accAccountDAOobj) {
        this.accAccountDAOobj = accAccountDAOobj;
    }
    public void setaccCurrencyDAO(accCurrencyDAO accCurrencyDAOobj) {
        this.accCurrencyDAOobj = accCurrencyDAOobj;
    }
    public void setaccCommonTablesDAO(AccCommonTablesDAO accCommonTablesDAO) {
        this.accCommonTablesDAO = accCommonTablesDAO;
    }
    public void setaccCompanyPreferencesDAO(accCompanyPreferencesDAO accCompanyPreferencesObj) {
        this.accCompanyPreferencesObj = accCompanyPreferencesObj;
    }
    public void setkwlCommonTablesDAO(kwlCommonTablesDAO kwlCommonTablesDAOObj1) {
        this.kwlCommonTablesDAOObj = kwlCommonTablesDAOObj1;
    }
    public void setAccJournalEntryDAO(accJournalEntryDAO accJournalEntryobj) {
        this.accJournalEntryobj = accJournalEntryobj;
    }

    public void setaccProductcontroller(accProductController accProductControllerObj) {
        this.accProductcontrollerObj = accProductControllerObj;
    }
    
    public void setFieldDataManager(fieldDataManager fieldDataManagercntrl) {
        this.fieldDataManagercntrl = fieldDataManagercntrl;
    }
     public void setexportMPXDAOImpl(exportMPXDAOImpl exportDaoObj) {
        this.exportDaoObj = exportDaoObj;
    }
     
    public void setPackagingService(PackagingService packagingService) {   //INV_ACC_MERGE
        this.packagingService = packagingService;
    }
    
    public void setStockMovementService(StockMovementService stockMovementService) {
        this.stockMovementService = stockMovementService;
    }

    public accMasterItemsDAO getAccMasterItemsDAO() {
        return accMasterItemsDAO;
    }

    public void setAccMasterItemsDAO(accMasterItemsDAO accMasterItemsDAO) {
        this.accMasterItemsDAO = accMasterItemsDAO;
    }

    public AccReportsService getAccReportsService() {
        return accReportsService;
    }

    public void setAccReportsService(AccReportsService accReportsService) {
        this.accReportsService = accReportsService;
    }
    
    public void setimportHandler(ImportHandler importHandler) {
        this.importHandler = importHandler;
    }
    
    public void setImportpoductobj(Importproduct importpoductobj) {
        this.importpoductobj = importpoductobj;
    }
    
    public void setAccProductModuleService(AccProductModuleService accProductModuleService) {
        this.accProductModuleService = accProductModuleService;
    }
    
    public void setaccUomDAO(accUomDAO accUomObj) {
        this.accUomObj = accUomObj;
    }
   
    public void setimportDAO(ImportDAO importDao) {
        this.importDao = importDao;
    }

    public void setAccImportServiceObj(AccImportService accImportServiceObj) {
        this.accImportServiceObj = accImportServiceObj;
    }

    public void setStoreService(StoreService storeService) {
        this.storeService = storeService;
    }
    
    public void setcompanyDetailsDAO(companyDetailsDAO companyDetailsDAOObj1) {
        this.companyDetailsDAOObj = companyDetailsDAOObj1;
    }
    public void setFieldManagerDAO(fieldManagerDAO fieldManagerDAOobj) {
        this.fieldManagerDAOobj = fieldManagerDAOobj;
    }
    public void setApiCallHandlerService(APICallHandlerService apiCallHandlerService) {     
        this.apiCallHandlerService = apiCallHandlerService;
    }
    public void setStockDAO(StockDAO stockDAO) {
        this.stockDAO = stockDAO;
    }
    public void setAccProductService(AccProductService AccProductService) {
        this.AccProductService = AccProductService;
    }
    public void setaccCustomerDAO(accCustomerDAO accCustomerDAOobj) {
        this.accCustomerDAOobj = accCustomerDAOobj;
    }
    
    public void setStockService(StockService stockService) {
        this.stockService = stockService;
    }

    public void setLocationService(LocationService locationService) {
        this.locationService = locationService;
    }

    public void setAccAssetService(AccAssetService accAssetService) {
        this.accAssetService = accAssetService;
    }
    public void setAuthHandlerDAOObj(authHandlerDAO authHandlerDAOObj) {
        this.authHandlerDAOObj = authHandlerDAOObj;
    }

    public void setSeqService(SeqService seqService) {
        this.seqService = seqService;
    }
     public void setImportInvData(ImportInvData importInvData) {
        this.importInvData = importInvData;
    }
    public ModelAndView deleteProducts(HttpServletRequest request, HttpServletResponse response){
        JSONObject jobj=new JSONObject();
        String msg="";
        boolean issuccess = false;
        boolean isused = false;
        Map<String,Object> requestParams=new HashMap(); 
//        DefaultTransactionDefinition def = new DefaultTransactionDefinition();
//        def.setName("ProductCMN_Tx");
//        def.setPropagationBehavior(TransactionDefinition.PROPAGATION_REQUIRED);

//        TransactionStatus status = txnManager.getTransaction(def);
        try {
            boolean isUnbuild = false;
            boolean isFixedAsset = false;
            if(!StringUtil.isNullOrEmpty(request.getParameter("isFixedAsset"))){
                isFixedAsset = Boolean.parseBoolean(request.getParameter("isFixedAsset"));
            }
            if(!StringUtil.isNullOrEmpty(request.getParameter("unBuild"))){
                isUnbuild=Boolean.parseBoolean(request.getParameter("unBuild"));
            }
            
            
            String linkedTransaction = deleteProducts(request,requestParams);
//            txnManager.commit(status);
            issuccess = true;
            
            boolean propagateTOChildCompaniesFalg = false;
            if (!StringUtil.isNullOrEmpty(request.getParameter("ispropagatetochildcompanyflag"))) {
                propagateTOChildCompaniesFalg = Boolean.parseBoolean(request.getParameter("ispropagatetochildcompanyflag"));
            }
            
            if (propagateTOChildCompaniesFalg) {
                try {
                    
                    requestParams.put("propagateTOChildCompaniesFlag", propagateTOChildCompaniesFalg);
                    String ids[] = request.getParameterValues("ids");
                    for (int i = 0; i < ids.length; i++) {
                        HashMap<String, Object> ChildRequestParams = new HashMap();
                        ChildRequestParams.put("parentCompanyProductID", ids[i]);
                        KwlReturnObject result = accProductObj.getChildproducts(ChildRequestParams);
                        List childCompaniesProductList = result.getEntityList();
                         for (Object childObj : childCompaniesProductList) {
                              Product prod = (Product) childObj;
                                if (prod != null) {
                                    
                                    String childProductID = prod.getID();
                                    String ChildProductname = prod.getName();
                                    String childCompanyID = prod.getCompany().getCompanyID();
                                    String childCompanyName = prod.getCompany().getSubDomain();

                                    requestParams.put("ChildCompanyid", childCompanyID);
                                    requestParams.put("childCompanyName", childCompanyName);
                                    requestParams.put("childProductID", childProductID);
                                    requestParams.put("ChildProductname", ChildProductname);
                                    deleteProducts(request,requestParams);
                                }
                             
                         }

                    }

                } catch (Exception ex) {
                    Logger.getLogger(accProductControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            //*****************************************delete Propagated customer In child companies**************************
            
            if (StringUtil.isNullOrEmpty(linkedTransaction)) {
                if (isFixedAsset) {
                    msg = messageSource.getMessage("acc.fixed.assetgroup.del", null, RequestContextUtils.getLocale(request));
                } else if (isUnbuild) {
                    msg = messageSource.getMessage("acc.prod.unbuildsuccess", null, RequestContextUtils.getLocale(request));    //"Product has been unbuilded successfully";
                } else {
                    msg = messageSource.getMessage("acc.prod.del", null, RequestContextUtils.getLocale(request));   //"Product has been deleted successfully";
                }
            } else if(Boolean.parseBoolean(StorageHandler.getStandalone())){
                if (isFixedAsset) {
                    msg = messageSource.getMessage("acc.field.fixedAssetExcept", null, RequestContextUtils.getLocale(request)) + " " + linkedTransaction.substring(0, linkedTransaction.length() - 2) + " " + messageSource.getMessage("acc.field.hasbeendeletedsuccessfully", null, RequestContextUtils.getLocale(request));
                } else if (isUnbuild) {
                    msg = messageSource.getMessage("acc.field.assemblyProduct", null, RequestContextUtils.getLocale(request)) + " " + linkedTransaction.substring(0, linkedTransaction.length() - 2) + " " + messageSource.getMessage("acc.field.hasBeenUnbuiltSuccessfully", null, RequestContextUtils.getLocale(request));
                } else {
                    msg = messageSource.getMessage("acc.field.productExcept", null, RequestContextUtils.getLocale(request)) + " " + linkedTransaction.substring(0, linkedTransaction.length() - 2) + " " + messageSource.getMessage("acc.field.hasbeendeletedsuccessfully", null, RequestContextUtils.getLocale(request));
                }
            } else {
                if (isFixedAsset) {
                    msg = messageSource.getMessage("acc.field.allassetsdeleted", null, RequestContextUtils.getLocale(request)) + linkedTransaction.substring(0, linkedTransaction.length() - 2) + " " + messageSource.getMessage("acc.field.maybeused", null, RequestContextUtils.getLocale(request));
                } else if (isUnbuild) {
                    msg = messageSource.getMessage("acc.field.allassemblyproductunbuilt", null, RequestContextUtils.getLocale(request)) + linkedTransaction.substring(0, linkedTransaction.length() - 2) + " " + messageSource.getMessage("acc.field.maybeused", null, RequestContextUtils.getLocale(request));
                } else {
                    msg = messageSource.getMessage("acc.field.allproductdeleted", null, RequestContextUtils.getLocale(request)) + linkedTransaction.substring(0, linkedTransaction.length() - 2) + " " + messageSource.getMessage("acc.field.maybeused", null, RequestContextUtils.getLocale(request));
                }
            }
        } catch (AccountingException acc) {
//            txnManager.rollback(status);
            msg = acc.getMessage();
        } catch (SessionExpiredException ex) {
//            txnManager.rollback(status);
            msg = ex.getMessage();
            Logger.getLogger(accProductControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
//            txnManager.rollback(status);
            msg = ""+ex.getMessage();
            Logger.getLogger(accProductControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
        } finally{
            try {
                jobj.put("success", issuccess);
                jobj.put("msg", msg);
                jobj.put("isused",true);
            } catch (JSONException ex) {
                Logger.getLogger(accProductControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
            }
            
        }
        return new ModelAndView("jsonView", "model", jobj.toString());
    }

    public String deleteProducts(HttpServletRequest request,Map<String,Object>ChildProductRequestParams) throws SessionExpiredException, AccountingException, ServiceException {
        String linkedTransaction = "";
        TransactionStatus status = null;
        try {
            String companyid = sessionHandlerImpl.getCompanyid(request);
            String ids[] = request.getParameterValues("ids");
            String actionID=AuditAction.PRODUCT_DELETION;
            String childProductID = "";
            String childCompanyName = "";
            boolean propagateTOChildCompaniesFlag = false;
            if (ChildProductRequestParams.containsKey("propagateTOChildCompaniesFlag") && (Boolean) ChildProductRequestParams.containsKey("propagateTOChildCompaniesFlag")) {
                propagateTOChildCompaniesFlag = (Boolean) ChildProductRequestParams.containsKey("propagateTOChildCompaniesFlag");
                childProductID = (String) ChildProductRequestParams.get("childProductID");
                companyid = (String) ChildProductRequestParams.get("ChildCompanyid");
                childCompanyName = (String) ChildProductRequestParams.get("childCompanyName");

                ids = childProductID.split(",");
            }
            String productid = "";
            String productCode = "";
            KwlReturnObject extracompanyprefObjresult = accountingHandlerDAOobj.getObject(ExtraCompanyPreferences.class.getName(), companyid);
            ExtraCompanyPreferences extracompanyobj = (ExtraCompanyPreferences) extracompanyprefObjresult.getEntityList().get(0);
            KwlReturnObject capresult = accountingHandlerDAOobj.getObject(CompanyAccountPreferences.class.getName(), companyid);
            CompanyAccountPreferences preferences = (CompanyAccountPreferences) capresult.getEntityList().get(0);
            boolean unBuild = Boolean.parseBoolean(request.getParameter("unBuild"));
            boolean isPermDel=false;
            if(!StringUtil.isNullOrEmpty(request.getParameter("isPermDel"))){
                isPermDel=Boolean.parseBoolean(request.getParameter("isPermDel"));
            }
            
            int limit = Constants.Transaction_Commit_Limit;
            int count = 1;
            DefaultTransactionDefinition def = new DefaultTransactionDefinition();
            def.setName("ProductCMN_Tx");
            def.setPropagationBehavior(TransactionDefinition.PROPAGATION_REQUIRED);
            status = txnManager.getTransaction(def);
            
            boolean isCommit = false;
            
            for (int i = 0; i < ids.length; i++) {
                String prodNames = "";
                Product prd=null;
                String audtmsg = "";
                if (!StringUtil.isNullOrEmpty(ids[i])) {
                    productid = ids[i];
                    
                    KwlReturnObject res = accountingHandlerDAOobj.getObject(Product.class.getName(), productid);
                    Product product = (Product) res.getEntityList().get(0);
                    Map<String, Object> requestMap = new HashMap<>();
                    requestMap.put("productId", productid);
                    requestMap.put("companyId", companyid);
                    productCode = product.getProductid();
//                    selQuery = "from PurchaseOrderDetail pod where product.ID in( " + qMarks + ") and pod.company.companyID=?";
//                    List list1 = HibernateUtil.executeQuery(session, selQuery, params1.toArray());
                    KwlReturnObject result = accPurchaseOrderobj.getPO_Product(requestMap); //Is used in Purchase Order ?
                    List list1 = result.getEntityList();
                    int count1 = list1.size();
//                    if (count1 > 0) {
//                        throw new AccountingException("Selected record(s) is currently used in the Purchase Order(s). So it cannot be deleted.");
//                    }

//                    selQuery = "from SalesOrderDetail sod where product.ID in( " + qMarks + ") and sod.company.companyID=?";
//                    List list2 = HibernateUtil.executeQuery(session, selQuery, params1.toArray());
                    result = accSalesOrderDAOobj.getSO_Product(requestMap);  // Is used in Sales Order ?
                    List list2 = result.getEntityList();
                    int count2 = list2.size();
//                    if (count2 > 0) {
//                        throw new AccountingException("Selected record(s) is currently used in the Sales Order(s). So it cannot be deleted.");
//                    }

                    result = accGoodsReceiptDAOobj.getGoodsReceipt_Product(requestMap); // Is Used in Vendor Invoice?
                    List list3 = result.getEntityList();
                    int count3 = list3.size();
                    
                    result = accInvoiceDAOobj.getInvoice_Product(requestMap);  // Is used in Customer Invoice?
                    List list4 = result.getEntityList();
                    int count4 = list4.size();
                    
                    result = accProductObj.checkSubProductforAssembly(productid); //Is used in Assembly Product? 
                    BigInteger bigInteger5 = (BigInteger) result.getEntityList().get(0);
                    int count5 = 0;
                    if (bigInteger5.intValue() > 0) {
                        count5 = bigInteger5.intValue();
                    }
                    
                    result = accGoodsReceiptDAOobj.getGR_Product(requestMap); // Is used in Goods Receipt
                    List list7=result.getEntityList();
                    int count7=list7.size();
                    
                    result = accInvoiceDAOobj.getDO_Product(requestMap); //Is used in Delivery Order?
                    List list8=result.getEntityList();
                    int count8=list8.size();
                    
                    result = accPurchaseOrderobj.getPR_Product(productid, companyid); //Is used in Purchase Requisition?
                    List list9=result.getEntityList();
                    int count9=list9.size();
//                  
                    //ERP-10941
                    result = accPurchaseOrderobj.getPR_AssetProduct(productid, companyid); //Is used in Purchase Requisition?
                    List list14=result.getEntityList();
                    int count14=list14.size();
//                    
                    result = accPurchaseOrderobj.getPR_AssetRequisitionMappingProduct(productid, companyid); //Is used in Purchase Requisition?
                    List list15=result.getEntityList();
                    int count15=list15.size();
                    
                    result = accPurchaseOrderobj.getRFQDetails(productid, companyid); //Is used in Purchase Requisition?
                    List list16=result.getEntityList();
                    int count16=list16.size();
                    
                    result = accPurchaseOrderobj.getVQ_Product(productid, companyid); // Is used in Vendor Quotation
                    List list10=result.getEntityList();
                    int count10=list10.size();
                    
                    result = accSalesOrderDAOobj.getCQ_Product(productid, companyid); //Is used in Customer Quotation
                    List list11= result.getEntityList();
                    int count11= list11.size();
                    
                    result = accGoodsReceiptDAOobj.getPurchaseReturn_Product(productid, companyid); //Is used in Purchase Return?
                    List list12= result.getEntityList();
                    int count12=list12.size();
                    
                    result = accInvoiceDAOobj.getSalesReturn_Product(productid, companyid); //Is used in Sales Return?
                    List list13=result.getEntityList();
                    int count13=list13.size();
               
                    result = accProductObj.getVendors_Product(productid, companyid); //Is used in Sales Return?
                    List listven=result.getEntityList();
                    int countven=listven.size();
                    
                    result = accProductObj.getCustomers_Product(productid, companyid); //Is used in Sales Return?
                    List listcus=result.getEntityList();
                    int countcus=listcus.size();
                    
                    int count17=0;
                    if(!unBuild){      // ERP-11936
                        result = accInvoiceDAOobj.getCountBuildDettails_Product(productid, companyid); //Is used in Sales Return?
                        List list17=result.getEntityList();
                        count17=list17.size();
                    }        

                    result = accProductObj.getSubstituteProduct(productid, companyid); // Is used as Sustiture Product
                    List list18 = result.getEntityList();
                    int count18 = list18.size();
                    
                    result = accProductObj.getInventoryTransactions(productid, companyid); // Is used as Sustiture Product
                    List list19 = result.getEntityList();
                    int count19 = list19.size();
                    
                    if (count1 > 0 || count2 > 0 || count3 > 0 || count4 > 0 || count7 > 0 || count8 > 0 || count9 > 0 || count10 > 0 || count11 > 0 || count12 > 0 || count13 > 0 || count14 > 0 || count15 > 0|| count16 > 0 || count17 > 0 || count18 > 0 | countven > 0 || countcus > 0 || count19>0){
                        linkedTransaction += productCode + ", ";
                        continue;
//                    	throw new AccountingException(messageSource.getMessage("acc.prod.excp1", null, RequestContextUtils.getLocale(request)));   //"Selected record(s) is currently used in the Transaction(s). So it cannot be deleted.");
                    }
                    
                    if(count5 > 0){
                        linkedTransaction += productCode + ", ";
                        continue;
//                    	throw new AccountingException(messageSource.getMessage("acc.prod.excp2", null, RequestContextUtils.getLocale(request))); 
                    }
                    if (extracompanyobj != null && product != null && !product.isDeleted() && (extracompanyobj.isActivateMRPModule() || preferences.getInventoryValuationType() == Constants.PERPETUAL_VALUATION_METHOD)) {
                        try { 
                            // updating inventory account opening balance for product
                            if (product != null) {
                                String oldInventoryAccountID = product.getInventoryAccount() != null ? product.getInventoryAccount().getID() : "";
                                if (!StringUtil.isNullOrEmpty(oldInventoryAccountID)) {
                                    KwlReturnObject accountresult = accountingHandlerDAOobj.getObject(Account.class.getName(), oldInventoryAccountID);
                                    Account inventoryAccount = (Account) accountresult.getEntityList().get(0);
                                    if (inventoryAccount != null) {
                                        HashMap<String, Object> currencyParams = AccountingManager.getGlobalParams(request);
                                        KwlReturnObject amountresult = accCurrencyDAOobj.getBaseToCurrencyAmount(currencyParams, product.getOpeningBalanceAmountInBase(), inventoryAccount.getCurrency().getCurrencyID(), new Date(product.getCreatedon()), 0);
                                        double amountInAccountCurrency = (Double) amountresult.getEntityList().get(0);
                                        double updatedOpeningbalance = inventoryAccount.getOpeningBalance() - amountInAccountCurrency;
                                        inventoryAccount.setOpeningBalance(authHandler.round(updatedOpeningbalance, companyid));
                                        /**
                                         * Problem with product deletion in balance sheet, because of SQL update function. ERP-35822
                                         */
//                                        accAccountDAOobj.updateAccountOpeningBalance(oldInventoryAccountID, authHandler.round(updatedOpeningbalance, companyid));
                                    }
                                }
                            }
                        } catch (Exception ex) {
                            Logger.getLogger(accProductControllerCMN.class.getName()).log(Level.WARNING, ex.getMessage());
                        }
                    }
                    if (!Boolean.parseBoolean(StorageHandler.getStandalone()) && extracompanyobj.isActivateCRMIntegration()) {
                        //Session session = null;
                        try{
//                            String crmURL = this.getServletContext().getInitParameter("crmURL");
//                            String action = "218";
                            String crmURL = URLUtil.buildRestURL(Constants.crmURL);
                            crmURL = crmURL + "master/checkndeleteproducts";                            
                            //session = HibernateUtil.getCurrentSession();
                            JSONObject resObj = new JSONObject();
                            JSONObject userData = new JSONObject();
                            userData.put("remoteapikey", StorageHandler.GetRemoteAPIKey());
                            userData.put("userid", sessionHandlerImpl.getUserid(request));
                            userData.put("productid", productid);
                            userData.put("iscommit", true);
                            userData.put("companyid", companyid);
                            resObj = apiCallHandlerService.restPostMethod(crmURL, userData.toString());
//                            resObj = apiCallHandlerService.callApp(crmURL, userData, companyid, action);
                            if (resObj.has("productisusedincrm") && resObj.optBoolean("productisusedincrm", false)) { //If product used in CRM then do not delete and continue with next product
                                linkedTransaction += productCode + ", ";
                                continue;
                            } 
                        } catch (Exception ex) {
                            Logger.getLogger(accProductControllerCMN.class.getName()).log(Level.SEVERE, null, "Prodct Delete From ERP To CRM- Method Not Found" + ex.getMessage());
                        }
//                        finally{
//                                try{
//                                    HibernateUtil.closeSession(session);
//                                }catch(Exception e1){
//                                    Logger.getLogger(accProductControllerCMN.class.getName()).log(Level.SEVERE, null, e1.getMessage());
//                                }
//                            }                        
                            }                        
                    
                    KwlReturnObject rtObj = accProductObj.getProductByID(productid, companyid);
                    prd = ((Product) rtObj.getEntityList().get(0));
                    prodNames += ", " + prd.getName();
                    
                    MasterItem prodMasterItemObj=accProductObj.getProductsMasterItem(companyid,productid);
                    boolean isFixedAsset = prd.isAsset();
                    //Delete product from All Assemblies
                    
                    KwlReturnObject kwlReturnObject_SPA = accProductObj.selectSubProductFromAssembly(productid);
                    KwlReturnObject kwlReturnObject_I = accProductObj.selectInventoryByProduct(productid, companyid);
//                    KwlReturnObject kwlReturnObject_PP = accProductObj.selectProPricePermanently(productid, companyid);
                    //KwlReturnObject kwlReturnObject_CC = accProductObj.selectCyclecountPermanently(productid, companyid);
//                    KwlReturnObject kwlReturnObject_PCC = accProductObj.selectProductCycleCountPermanently(productid, companyid);
                    HashMap<String, Object> requestParams = new HashMap<>();
                    requestParams.put("productid", productid);
                    requestParams.put("companyid", companyid);
                    if(kwlReturnObject_SPA.getRecordTotalCount() > 0 && !unBuild)//|| kwlReturnObject_CC.getRecordTotalCount() > 0
                    {
                        linkedTransaction += productCode + ", ";
                        continue;
                    } else{  
                        result = accProductObj.checkIfParentProduct(productid);
                        BigInteger bigInteger100 = (BigInteger) result.getEntityList().get(0);
                        int count100 = 0;
                        if (bigInteger100.intValue() > 0) {
                            count100 = bigInteger100.intValue();
                        }
                        if (count100 > 0) {//setting reference to null so that product can be deleted
                            accProductObj.updateProductParent(productid, companyid);
                        }
                        
                        if (extracompanyobj.isAvalaraIntegration() && product.isProductCreatedOnAvalara()) {
                            accProductModuleService.deleteItemOnAvalaraForProduct(productid, companyid);//In case of Avalara Integration, delete corresponding item on AvaTax
                        }
                        
                        if(!unBuild){
                            if(!isPermDel){
                              accProductObj.deleteProduct(productid);  
                            }else{
                                accProductObj.deleteProductCustomData(productid);
//                                if(!prd.getProducttype().getID().equals(Producttype.SERVICE)){
//                                    accProductObj.deleteProductCycleCountPermanently(productid, companyid);
//                                }
                                accProductObj.deleteProPricePermanently(productid, companyid);
                                accProductObj.deleteProductCategoryMappingDtails(productid);
                                if(prd.getProducttype().getID().equals(Producttype.ASSEMBLY)){
                                    // To delete Product Build data and JE while build assembly product.
                                    KwlReturnObject retObj = accProductObj.getAssemblyProducts(requestParams);
                                    List<ProductBuild> list = retObj.getEntityList();
                                    accProductObj.deleteProductAssembly(productid);
                                    accProductObj.deleteBOMDetail(productid);
                                    accProductObj.deleteProductBuildDetails(productid,companyid);
                                    accProductObj.deleteProductbBuild(productid,companyid);
                                    accProductObj.deleteStockMovement(productid,companyid);     //ERP-32959
                                    // Delete JE
                                    deleteProductBuildJournalEntry(list, companyid);
                                }
                                /*
                                 * Delete Packaging entry while deleting product 
                                 */
                                if(prd.getPackaging() != null && prd.getPackaging().getStockUoM() != null){
                                    Map<String, String> deletePackingMap = new HashMap<>();
                                    deletePackingMap.put("packingId", prd.getPackaging().getId());
                                    deletePackingMap.put("companyid", companyid);
                                    accUomObj.deletePackaging(deletePackingMap);
                                }
                                HashMap<String, Object> deleteSerialMap = new HashMap<String, Object>();
                                deleteSerialMap.put("productid", productid);
                                deleteSerialMap.put("companyid", companyid);
                                
                                if (!StringUtil.isNullOrEmpty(productid) && prodMasterItemObj!=null) {
                                    accProductObj.deleteProductCategoryMappingDtails(productid);
                                }if (!StringUtil.isNullOrEmpty(productid)) {
                                   // accProductObj.deleteLocationDocumentMap(productid, companyid);
                                    //accProductObj.deleteNewProductBatch(productid, companyid);
                                    accProductObj.deleteProductBatchSerialDetails(deleteSerialMap);
                                }
                                if (!StringUtil.isNullOrEmpty(productid) && kwlReturnObject_I.getRecordTotalCount() > 0 && !prd.getProducttype().getID().equals(Producttype.ASSEMBLY)) {
                                    accProductObj.deleteProductInitialInventoryDtails(productid, companyid);
                                }else{
                                    accProductObj.deleteAssemblyProductInventory(productid,companyid);
                                }
                               
                                accProductObj.deleteProductCompostion(deleteSerialMap);
                                /**
                                 * Used to unmapped accounts associated with product.
                                 */
                                accProductObj.unmapAccount(productid);
                                /**
                                 * delete product discount mapping details
                                 */
                                accMasterItemsDAO.deleteProductDiscountMapping(productid, companyid);
                                accProductObj.deleteProductPermanently(productid, companyid);
                                if (product.getCompany().getCountry().getID().equals("" + Constants.indian_country_id)) {
                                    /**
                                     * delete product tax class history.
                                     */
                                    accProductObj.deleteProductTaxClassHistoryPermanently(productid);
                                }
                            }
                        }else{
                            // To delete Product Build data and JE while build assembly product.
                            if (prd.getProducttype().getID().equals(Producttype.ASSEMBLY)) {
                                KwlReturnObject retObj = accProductObj.getAssemblyProducts(requestParams);
                                List<ProductBuild> list = retObj.getEntityList();
                                accProductObj.deleteProductBuildDetails(productid, companyid);
                                accProductObj.deleteProductbBuild(productid, companyid);
                                // Delete JE
                                deleteProductBuildJournalEntry(list, companyid);
                            }
                        }
                        if (!Boolean.parseBoolean(StorageHandler.getStandalone()) && !unBuild && !isFixedAsset && extracompanyobj.isIsPOSIntegration()) {
                            //Session session = null;
                            try {
                                String subdomain = sessionHandlerImpl.getCompanySessionObj(request).getCdomain();
                                String posURL = this.getServletContext().getInitParameter("posURL");
                                String action = "35";
                                //session = HibernateUtil.getCurrentSession();
                                JSONObject resObj = new JSONObject();
                                JSONObject userData = new JSONObject();
                                userData.put("remoteapikey", StorageHandler.GetRemoteAPIKey());
                                userData.put("userid", sessionHandlerImpl.getUserid(request));
                                userData.put("productid", productid);
                                userData.put("iscommit", true);
                                userData.put("companyid", companyid);
                                userData.put("subdomain", subdomain);
                                //session = HibernateUtil.getCurrentSession();;
                                resObj = apiCallHandlerService.callApp(posURL, userData, companyid, action);
                            } catch (Exception ex) {
                                Logger.getLogger(accProductControllerCMN.class.getName()).log(Level.SEVERE, null, "Prodct Delete From ERP To POS- Method Not Found" + ex.getMessage());
                                }
//                            finally{
//                                try{
//                                    HibernateUtil.closeSession(session);
//                                }catch(Exception e1){
//                                    Logger.getLogger(accProductControllerCMN.class.getName()).log(Level.SEVERE, null, e1.getMessage());
//                                }
//                            }
                            }
                        }
                    if(prd.getProducttype().getID().equals(Producttype.ASSEMBLY)){
                    	RestockBillofMaterialsinInventory(productid, companyid); 
                        //ERP-11730
                        HashMap<String, Object> deleteSerialMap = new HashMap<String, Object>();
                        deleteSerialMap.put("companyid", companyid);
                        accProductObj.deleteProductBatchSerialDetails(deleteSerialMap);
                        updateQuantityDueOfSerailnumbers(productid, companyid);
//                        No need to reset Initial Quantity ERP-12200. As we are not updating inventory product's inventory for initial quantity of Assembly Product.
//                        List inventoryId = accProductObj.searchInventoryId(productid, true);
//                        if(unBuild && inventoryId.size()>0){
//                            resetInitialQuantityofProduct(productid, companyid);     // Function for reset the initial quantity in case of unbuild an assembly product
//                        }
                    }
                    
                    
                    //ERP-20637
                    accProductObj.deleteProductLandingCostCategory(productid); //Delete Landing Cost Category
                    
//                    accProductObj.deleteSubProductFromAssembly(productid);
//                    accProductObj.deleteInventoryByProduct(productid, companyid);
//                    accProductObj.deleteProPricePermanently(productid, companyid);
//                    accProductObj.deleteCyclecountPermanently(productid, companyid);
//                    accProductObj.deleteProductCycleCountPermanently(productid, companyid);
//                    accProductObj.deleteProductPermanently(productid, companyid);
//                   
                    
                    
           //         KwlReturnObject rtObj = accProductObj.deleteProduct(productid);
         //           Product prd = ((Product) rtObj.getEntityList().get(0));
        //            prodNames += ", " + prd.getName();
                    
                    if(isFixedAsset){
                        // if Producr has fixed asset opening documents so it can not be delete
                        
                        HashMap<String, Object> dataMap = new HashMap<String, Object>();
                        dataMap.put("companyId", companyid);
                        dataMap.put("productId", prd.getID());
                        
                        KwlReturnObject assetOpeningDocsRetObj =  accProductObj.getAssetOpenings(dataMap);
    
                        if(assetOpeningDocsRetObj.getRecordTotalCount()>0){
                            linkedTransaction += productCode + ", ";
                            continue;
//                            throw new AccountingException(messageSource.getMessage("acc.acc.excp1", null, RequestContextUtils.getLocale(request)));   //"Selected record(s) is currently used in the Transaction(s). So it cannot be deleted.");
                        }
                    }
                    
                    if (isFixedAsset) {
                        audtmsg = " Asset Group ";
                        actionID=AuditAction.ASSET_DELETION;
                    } else {
                        audtmsg = " Product ";
                    }
                }
                String perma=isPermDel ? " Permanently.":"" ;
                if (prodNames.length() > 0 && prd != null) {
                    if (propagateTOChildCompaniesFlag) {
                        auditTrailObj.insertAuditLog(actionID, "User " + sessionHandlerImpl.getUserFullName(request) + " has deleted " + audtmsg + prd.getName()+" ["+prd.getProductid()+"]"+" from child company "+childCompanyName + perma, request, prd.getID());
                    } else {
                        auditTrailObj.insertAuditLog(actionID, "User " + sessionHandlerImpl.getUserFullName(request) + " has deleted" + audtmsg + prd.getName() +" ["+prd.getProductid()+"] "+ perma, request, prd.getID());

                    }
                }
                
                if ((count == limit) || (i == ids.length - 1)) {
                    txnManager.commit(status);
                    isCommit = true;

                    if (i != ids.length - 1) {
                        count = 1;
                        def = new DefaultTransactionDefinition();
                        def.setName("ProductCMN_Tx");
                        def.setPropagationBehavior(TransactionDefinition.PROPAGATION_REQUIRED);
                        status = txnManager.getTransaction(def);
                    }
                } else {
                    count++;
                }
            }
            
            if (!isCommit) {
                txnManager.commit(status);
            }
        } catch (Exception ex) {
            if (status != null) {
                txnManager.rollback(status);
            }
            throw new AccountingException(messageSource.getMessage("acc.acc.excp1", null, RequestContextUtils.getLocale(request)));
//            throw ServiceException.FAILURE(messageSource.getMessage("acc.acc.excp1", null, RequestContextUtils.getLocale(request)), ex);
        }
        return linkedTransaction;
    }
    
    public String deleteProducts1(HttpServletRequest request) throws SessionExpiredException, AccountingException, ServiceException {
        String linkedTransaction = "";
        TransactionStatus status = null;
//        Date sd = new  Date();
        try {
            String companyid = sessionHandlerImpl.getCompanyid(request);
            String ids[] = request.getParameterValues("ids");
            String productid = "";
            String actionID=AuditAction.PRODUCT_DELETION;
//            String productCode = "";
            KwlReturnObject extracompanyprefObjresult = accountingHandlerDAOobj.getObject(ExtraCompanyPreferences.class.getName(), companyid);
            ExtraCompanyPreferences extracompanyobj = (ExtraCompanyPreferences) extracompanyprefObjresult.getEntityList().get(0);
            boolean unBuild = Boolean.parseBoolean(request.getParameter("unBuild"));
            boolean isPermDel=false;
            if(!StringUtil.isNullOrEmpty(request.getParameter("isPermDel"))){
                isPermDel=Boolean.parseBoolean(request.getParameter("isPermDel"));
            }
            
            int limit = Constants.Transaction_Commit_Limit;
            int count = 1;
            
            
            boolean isCommit = false;
            
            if(ids != null && ids.length > 0){
                Set<String> givenIds = new HashSet(Arrays.asList(ids));
//                Date d1 = new Date();
                Set<String> usedproductIds = accProductObj.getProductIdUsedInTransaction(ids, unBuild);
//                System.out.println("Getting used in transaction : "+(new Date().getTime() - d1.getTime()));
                
                givenIds.removeAll(usedproductIds);
                
                if (!Boolean.parseBoolean(StorageHandler.getStandalone()) && extracompanyobj.isActivateCRMIntegration()) {
                    //Session session = null;
                    try {
                        for (String givenId : givenIds) {
//                            String crmURL = this.getServletContext().getInitParameter("crmURL");
//                            String action = "218";
                            String crmURL = URLUtil.buildRestURL(Constants.crmURL);
                            crmURL = crmURL + "master/checkndeleteproducts";                              
                            //session = HibernateUtil.getCurrentSession();
                            JSONObject resObj = new JSONObject();
                            JSONObject userData = new JSONObject();
                            userData.put("remoteapikey", StorageHandler.GetRemoteAPIKey());
                            userData.put("userid", sessionHandlerImpl.getUserid(request));
                            userData.put("productid", givenId);
                            userData.put("iscommit", true);
                            userData.put("companyid", companyid);
                            resObj = apiCallHandlerService.restGetMethod(crmURL, userData.toString());
//                            resObj = apiCallHandlerService.callApp(crmURL, userData, companyid, action);
                            if (resObj.has("productisusedincrm") && resObj.optBoolean("productisusedincrm", false)) { //If product used in CRM then do not delete and continue with next product
                                usedproductIds.add(givenId);
                            }
                        }
                    } catch (Exception ex) {
                        Logger.getLogger(accProductControllerCMN.class.getName()).log(Level.SEVERE, null, "Prodct Delete From ERP To CRM- Method Not Found" + ex.getMessage());
                    }
                    givenIds.removeAll(usedproductIds);
                }
                if (usedproductIds != null && !usedproductIds.isEmpty()) {
//                    d1 = new Date();
                    List usedProductCodes = accProductObj.getProductCodesListByIds(usedproductIds);
//                    System.out.println("Getting used list : "+(new Date().getTime() - d1.getTime()));
                    for (Object pCode : usedProductCodes) {
                        if (!StringUtil.isNullOrEmpty(linkedTransaction)) {
                            linkedTransaction += ", ";
                        }
                        linkedTransaction += String.valueOf(pCode);
                    }
                }
                
                
                if(!givenIds.isEmpty()){
//                d1 = new Date();
                List<Product> unusedProductList = accProductObj.getProductListByIds(givenIds);
//                System.out.println("Getting Unused list : "+(new Date().getTime() - d1.getTime()));
                
                DefaultTransactionDefinition def = new DefaultTransactionDefinition();
                def.setName("ProductCMN_Tx");
                def.setPropagationBehavior(TransactionDefinition.PROPAGATION_REQUIRED);
                status = txnManager.getTransaction(def);
                
                for (int i = 0; i < unusedProductList.size(); i++) {
                    Product prd = unusedProductList.get(i);
                    productid = prd.getID();
                    String prodNames = "";
                    String audtmsg = "";

                    prodNames += ", " + prd.getName();

//                    d1 = new Date();
                    MasterItem prodMasterItemObj = accProductObj.getProductsMasterItem(companyid, productid);
//                    System.out.println("Getting master : "+(new Date().getTime() - d1.getTime()));
                    boolean isFixedAsset = prd.isAsset();
                    //Delete product from All Assemblies

//                    d1 = new Date();
                    KwlReturnObject kwlReturnObject_I = accProductObj.selectInventoryByProduct(productid, companyid);
//                    System.out.println("updating product parent : "+(new Date().getTime() - d1.getTime()));

                    HashMap<String, Object> requestParams = new HashMap<>();
                    requestParams.put("productid", productid);
                    requestParams.put("companyid", companyid);

                    KwlReturnObject result = accProductObj.checkIfParentProduct(productid);
                    if (result.getEntityList().size() > 0) {//setting reference to null so that product can be deleted
//                        d1 = new Date();
                        accProductObj.updateProductParent(productid, companyid);
//                        System.out.println("updating product parent : "+(new Date().getTime() - d1.getTime()));
                    }
                    if (!unBuild) {
                        if (!isPermDel) {
//                            d1 = new Date();
                            accProductObj.deleteProduct(productid);
//                            System.out.println("updating delete status : "+(new Date().getTime() - d1.getTime()));
                        } else {
//                            d1 = new Date();
                            accProductObj.deleteProductCustomData(productid);
//                            System.out.println("deleting custom data : "+(new Date().getTime() - d1.getTime()));

//                            d1 = new Date();
                            accProductObj.deleteProPricePermanently(productid, companyid);
//                            System.out.println("deleting price  : "+(new Date().getTime() - d1.getTime()));
//                            d1 = new Date();
                            accProductObj.deleteProductCategoryMappingDtails(productid);
//                            System.out.println("deleting category mapping : "+(new Date().getTime() - d1.getTime()));
                            if (prd.getProducttype().getID().equals(Producttype.ASSEMBLY)) {
                                // To delete Product Build data and JE while build assembly product.
//                                d1 = new Date();
                                KwlReturnObject retObj = accProductObj.getAssemblyProducts(requestParams);
                                List<ProductBuild> list = retObj.getEntityList();
//                                System.out.println("Getting Assembly products: "+(new Date().getTime() - d1.getTime()));
//                                d1 = new Date();
                                accProductObj.deleteProductAssembly(productid);
//                                System.out.println("deleting product assembly : "+(new Date().getTime() - d1.getTime()));
//                                d1 = new Date();
                                accProductObj.deleteProductBuildDetails(productid, companyid);
//                                System.out.println("deleting product build details : "+(new Date().getTime() - d1.getTime()));
//                                d1 = new Date();
                                accProductObj.deleteProductbBuild(productid, companyid);
//                                System.out.println("deleting product build : "+(new Date().getTime() - d1.getTime()));
                                // Delete JE
//                                d1 = new Date();
                                deleteProductBuildJournalEntry(list, companyid);
//                                System.out.println("deleting productbuild JE : "+(new Date().getTime() - d1.getTime()));
                                
                            }
//                            if (!StringUtil.isNullOrEmpty(productid) && prodMasterItemObj != null) {
//                                accProductObj.deleteProductCategoryMappingDtails(productid);
//                            }
                            if (!StringUtil.isNullOrEmpty(productid)) {
//                                d1 = new Date();
                                accProductObj.deleteNewProductBatch(productid, companyid);
//                                System.out.println("deleting new product batch : "+(new Date().getTime() - d1.getTime()));
                            }
                            if (!StringUtil.isNullOrEmpty(productid) && kwlReturnObject_I.getRecordTotalCount() > 0 && !prd.getProducttype().getID().equals(Producttype.ASSEMBLY)) {
//                                d1 = new Date();
                                accProductObj.deleteProductInitialInventoryDtails(productid, companyid);
//                                System.out.println("deleting initial inventory : "+(new Date().getTime() - d1.getTime()));
                            } else {
//                                d1 = new Date();
                                accProductObj.deleteAssemblyProductInventory(productid, companyid);
//                                System.out.println("deleting assembly product inventory : "+(new Date().getTime() - d1.getTime()));
                            }
                            HashMap<String, Object> deleteSerialMap = new HashMap<String, Object>();
                            deleteSerialMap.put("INproductid", productid);
                            deleteSerialMap.put("companyid", companyid);
//                            d1 = new Date();
                            accProductObj.deleteProductBatchSerialDetails(deleteSerialMap);
//                            System.out.println("deleting batch serial : "+(new Date().getTime() - d1.getTime()));
//                            d1 = new Date();
                            accProductObj.deleteProductCompostion(deleteSerialMap);
//                            System.out.println("deleting product composition : "+(new Date().getTime() - d1.getTime()));
//                            d1 = new Date();
                            accProductObj.deleteProductPermanently(productid, companyid);
//                            System.out.println("deleting product permanently : "+(new Date().getTime() - d1.getTime()));
                        }
                    } else {
                        // To delete Product Build data and JE while build assembly product.
                        if (prd.getProducttype().getID().equals(Producttype.ASSEMBLY)) {
//                            d1 = new Date();
                            KwlReturnObject retObj = accProductObj.getAssemblyProducts(requestParams);
                            List<ProductBuild> list = retObj.getEntityList();
//                            System.out.println("Getting assembly products 2 : "+(new Date().getTime() - d1.getTime()));
//                            d1 = new Date();
                            accProductObj.deleteProductBuildDetails(productid, companyid);
//                            System.out.println("deleting product build details 2 : "+(new Date().getTime() - d1.getTime()));
//                            d1 = new Date();
                            accProductObj.deleteProductbBuild(productid, companyid);
//                            System.out.println("deleting product build 2 : "+(new Date().getTime() - d1.getTime()));
                            // Delete JE
//                            d1 = new Date();
                            deleteProductBuildJournalEntry(list, companyid);
//                            System.out.println("deleting product build JE 2 : "+(new Date().getTime() - d1.getTime()));
                        }
                    }
                    if (!Boolean.parseBoolean(StorageHandler.getStandalone()) && !unBuild && !isFixedAsset && extracompanyobj.isIsPOSIntegration()) {
                        //Session session = null;
                        try {
                            String subdomain = sessionHandlerImpl.getCompanySessionObj(request).getCdomain();
                            String posURL = this.getServletContext().getInitParameter("posURL");
                            String action = "35";
                            //session = HibernateUtil.getCurrentSession();
                            JSONObject resObj = new JSONObject();
                            JSONObject userData = new JSONObject();
                            userData.put("remoteapikey", StorageHandler.GetRemoteAPIKey());
                            userData.put("userid", sessionHandlerImpl.getUserid(request));
                            userData.put("productid", productid);
                            userData.put("iscommit", true);
                            userData.put("companyid", companyid);
                            userData.put("subdomain", subdomain);
                            //session = HibernateUtil.getCurrentSession();;
                            resObj = apiCallHandlerService.callApp(posURL, userData, companyid, action);
                        } catch (Exception ex) {
                            Logger.getLogger(accProductControllerCMN.class.getName()).log(Level.SEVERE, null, "Prodct Delete From ERP To POS- Method Not Found" + ex.getMessage());
                        }

                    }
                    if (prd.getProducttype().getID().equals(Producttype.ASSEMBLY)) {
//                        d1 = new Date();
                        RestockBillofMaterialsinInventory(productid, companyid);
//                        System.out.println("Restoring BOM : "+(new Date().getTime() - d1.getTime()));
                        //ERP-11730
//                        d1 = new Date();
                        HashMap<String, Object> deleteSerialMap = new HashMap<String, Object>();
                        deleteSerialMap.put("companyid", companyid);
                        accProductObj.deleteProductBatchSerialDetails(deleteSerialMap);
//                        System.out.println("deleting product batch serial details : "+(new Date().getTime() - d1.getTime()));
//                        d1 = new Date();
                        updateQuantityDueOfSerailnumbers(productid, companyid);
//                        System.out.println("updating qty due for serials : "+(new Date().getTime() - d1.getTime()));

                    }

                    if (isFixedAsset) {
                        audtmsg = " Asset Group ";
                        actionID=AuditAction.ASSET_DELETION;
                    } else {
                        audtmsg = " Product ";
                    }
                    String perma = isPermDel ? " Permanently." : "";
                    if (prodNames.length() > 0 && prd != null) {
//                        d1 = new Date();
                        auditTrailObj.insertAuditLog(actionID, "User " + sessionHandlerImpl.getUserFullName(request) + " has deleted" + audtmsg + prd.getName() +" ["+prd.getProductid()+"] "+ perma, request, prd.getID());
//                        System.out.println("inserting audit log : "+(new Date().getTime() - d1.getTime()));
                    }

                    if ((count == limit) || (i == unusedProductList.size() - 1)) {
//                        d1 = new Date();
                        txnManager.commit(status);
//                        System.out.println("commiting : "+(new Date().getTime() - d1.getTime()));
                        isCommit = true;

                        if (i != unusedProductList.size() - 1) {
                            count = 1;
                            def = new DefaultTransactionDefinition();
                            def.setName("ProductCMN_Tx");
                            def.setPropagationBehavior(TransactionDefinition.PROPAGATION_REQUIRED);
                            status = txnManager.getTransaction(def);
                        }
                    } else {
                        count++;
                    }
                }
            }
            }
           
            if (!isCommit && status != null) {
                txnManager.commit(status);
            }
        } catch (Exception ex) {
            if (status != null) {
                txnManager.rollback(status);
            }
            ex.printStackTrace();
            throw new AccountingException(messageSource.getMessage("acc.acc.excp1", null, RequestContextUtils.getLocale(request)));
//            throw ServiceException.FAILURE(messageSource.getMessage("acc.acc.excp1", null, RequestContextUtils.getLocale(request)), ex);
        }
//        System.out.println("Total time taken for deleting : "+(new Date().getTime() - sd.getTime()));
        return linkedTransaction;
    }
    /*
     * activateDeactivateProducts() used to activate/deactivate of product
     */
    public ModelAndView activateDeactivateProducts(HttpServletRequest request, HttpServletResponse response){
        JSONObject jobj=new JSONObject();
        String msg="",auditMsg="";
        KwlReturnObject result = null;
        boolean issuccess = false;
        DefaultTransactionDefinition def = new DefaultTransactionDefinition();
        def.setName("Account_Tx");
        def.setPropagationBehavior(TransactionDefinition.PROPAGATION_REQUIRED);
        TransactionStatus status = txnManager.getTransaction(def);
        try {
            HashMap<String, Object> requestParams = new HashMap<String, Object>();
            requestParams.put(Constants.data, request.getParameter(Constants.data));
            String productActivateDeactivate = request.getParameter("activateDeactivateFlag");
            String companyid=sessionHandlerImpl.getCompanyid(request);
            boolean productActivateDeactivateFlag = StringUtil.isNullOrEmpty(productActivateDeactivate)?false:Boolean.parseBoolean(productActivateDeactivate);
            requestParams.put("productActivateDeactivateFlag", productActivateDeactivateFlag);
            requestParams.put(Constants.companyKey, companyid);
            //activateDeactivateProducts() used to activate/deactivate of product
            result = accProductObj.activateDeactivateProducts(requestParams);   
            issuccess = true;
            msg = productActivateDeactivateFlag? messageSource.getMessage("acc.product.activate", null, RequestContextUtils.getLocale(request)):messageSource.getMessage("acc.product.deactivate", null, RequestContextUtils.getLocale(request));
            txnManager.commit(status);
            auditMsg = productActivateDeactivateFlag ? "Activated Product " : "Deactivated Product ";
            for (int i = 0; i < result.getRecordTotalCount(); i++) {
                Product product = (Product) result.getEntityList().get(i);
                auditTrailObj.insertAuditLog(AuditAction.CUSTOMER_ACTIVATE_DEACTIVATE, "User " + sessionHandlerImpl.getUserFullName(request) + " has " + auditMsg + "<b>" + product.getName() + "</b>" + " ( " + product.getProductid()+ " ) ", request, product.getID());
            }
        } catch (Exception ex) {
            txnManager.rollback(status);
            msg = ""+ex.getMessage();
            Logger.getLogger(accProductControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
        } finally{
            try {
                jobj.put(Constants.RES_success, issuccess);
                jobj.put(Constants.RES_msg, msg);
            } catch (JSONException ex) {
                Logger.getLogger(accProductControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return new ModelAndView("jsonView", "model", jobj.toString());
    }    
//    
//    private void deleteFixedAssetData(Product product, HttpServletRequest request) throws SessionExpiredException, AccountingException {
//        try {
//            String companyId = sessionHandlerImpl.getCompanyid(request);
//            HashMap<String, Object> dataMap = new HashMap<String, Object>();
//            dataMap.put("companyId", companyId);
//            dataMap.put("productId", product.getID());
//
//            KwlReturnObject assetOpeningResult = accProductObj.getAssetOpenings(dataMap);
//
//            List assetOpeningList = assetOpeningResult.getEntityList();
//
//            Iterator openingit = assetOpeningList.iterator();
//
//            while (openingit.hasNext()) {
//
//                FixedAssetOpening assetOpening = (FixedAssetOpening) openingit.next();
//
//                String documentId = assetOpening.getId();
//                HashMap<String, Object> requestMap = new HashMap<String, Object>();
//
//                requestMap.put("companyId", companyId);
//                requestMap.put("documentId", documentId);
//                KwlReturnObject assetDetailsResult = accProductObj.getAssetDetailsMappedWithOPeningDocument(requestMap);
//
//                List list = assetDetailsResult.getEntityList();
//                Iterator it = list.iterator();
//
//                while (it.hasNext()) {
//                    FixedAssetOpeningMappingWithAssetDetail openingMappingWithAssetDetail = (FixedAssetOpeningMappingWithAssetDetail) it.next();
//                    AssetDetails ad = openingMappingWithAssetDetail.getAssetDetails();
//                    HashMap<String, Object> deleteMap = new HashMap<String, Object>();
//                    deleteMap.put("companyId", companyId);
//                    deleteMap.put("assetDetailId", ad.getId());
//                    accProductObj.deleteAssetDetails(deleteMap);
//                }
//
//                accProductObj.deleteAssetOpeningDocument(requestMap);
//            }
//
//        } catch (ServiceException ex) {
//            Logger.getLogger(accProductControllerCMN.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
//            throw new AccountingException("Error while deleting Data");
//        }
//    }

    public ModelAndView editQuantity(HttpServletRequest request, HttpServletResponse response){
    	JSONObject jobj=new JSONObject();
    	boolean issuccess = false;
        String msg = "";
        try{
        	String productid = request.getParameter("productid");
        	String companyid = sessionHandlerImpl.getCompanyid(request);
        	List iCount = accProductObj.searchInventoryId(productid, false);
        	int invCount = iCount.size();
                Map<String, Object> requestMap = new HashMap<>();
                requestMap.put("productId", productid);
                requestMap.put("companyId", companyid);
        	KwlReturnObject Count = accSalesOrderDAOobj.getSO_Product(requestMap);
                jobj.put("isUsedInBatchSerial", isProductUsedinBatchSerialtransction(productid, companyid));
            int SOCount = Count.getRecordTotalCount();
            if(invCount == 0 && SOCount == 0){
            	jobj.put("quantityEdit", true);
            	msg = messageSource.getMessage("acc.field.Productsinitialquantitycanbeedited", null, RequestContextUtils.getLocale(request));
            }else{
            	jobj.put("quantityEdit", false);
            	msg = messageSource.getMessage("acc.field.Productsinitialquantitycannotbeeditedasitisusedintransactionsalready", null, RequestContextUtils.getLocale(request));
            }
            issuccess = true;
        } catch (Exception ex) {
            msg = ""+ex.getMessage();
            Logger.getLogger(accProductControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                jobj.put("success", issuccess);
                jobj.put("msg", msg);
            } catch (JSONException ex) {
                Logger.getLogger(accProductControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    	return new ModelAndView("jsonView", "model", jobj.toString());
    }
    
    public boolean isProductUsedinBatchSerialtransction(String productid, String companyid) throws ServiceException {
        Long count = 0l;
        BigInteger count1;
        KwlReturnObject result = accProductObj.isQuantityInStockMovementfor_Product(productid, companyid); // Is used in Goods Receipt
        List list = result.getEntityList();
        if (!list.isEmpty() && list.size() > 0 && !list.contains(null)) {
            count = (Long) list.get(0);
            if (count > 0) {
                return true;
            }
        }
        KwlReturnObject result1 = accProductObj.getSerialsfor_Product(productid, companyid); // Is used in Goods Receipt
        List list1 = result1.getEntityList();
        if (!list1.isEmpty() && list1.size() > 0 && !list1.contains(null)) {
            count = (Long) list1.get(0);
             if (count > 0) {
                return true;
            }
        }
        
        result = accProductObj.getGR_Product(productid, companyid); // Is used in Goods Receipt
        List list7 = result.getEntityList();
        if (!list7.isEmpty() && list7.size() > 0 && !list7.contains(null)) {
            count1 = (BigInteger) list7.get(0);
             if (count > 0) {
                return true;
            }
        }

        result = accProductObj.getDO_Product(productid, companyid); //Is used in Delivery Order?
        List list8 = result.getEntityList();
        if (!list8.isEmpty() && list8.size() > 0 && !list8.contains(null)) {
            count1 = (BigInteger) list8.get(0);
             if (count > 0) {
                return true;
            }
        }

        result = accProductObj.getPurchaseReturn_Product(productid, companyid); //Is used in Purchase Return?
        List list12 = result.getEntityList();
        if (!list12.isEmpty() && list12.size() > 0 && !list12.contains(null)) {
            count1 = (BigInteger) list12.get(0);
             if (count > 0) {
                return true;
            }
        }

        result = accProductObj.getSalesReturn_Product(productid, companyid); //Is used in Sales Return?
        List list13 = result.getEntityList();
        if (!list13.isEmpty() && list13.size() > 0 && !list13.contains(null)) {
           count1 = (BigInteger) list13.get(0);
             if (count > 0) {
                return true;
            }
        }
        
        result = accProductObj.getBatchesfor_Product(productid, companyid); // Is used in Goods Receipt
        list = result.getEntityList();
        if (!list.isEmpty() && list.size() > 0 && !list.contains(null)) {
            count = (Long) list.get(0);
            if (count > 0) {
                return true;
            } else {
                accProductObj.deleteNewProductBatch(productid, companyid);
            }
        }
        return false;
    }
    public void deleteProductBuildJournalEntry(List<ProductBuild> list, String companyid) {
        try {
            for (ProductBuild prdBld : list) {
                if (prdBld.getJournalentry() != null) {
                    accJournalEntryobj.deleteJournalEntryDetails(prdBld.getJournalentry().getID(), companyid);
                    accJournalEntryobj.deleteJournalEntry(prdBld.getJournalentry().getID(), companyid);
                }
            }
        } catch (Exception ex) {
            Logger.getLogger(accProductControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    public void RestockBillofMaterialsinInventory(String productid, String companyid){
    	try{                
	    	KwlReturnObject result1 = accProductObj.getQuantity(productid);
	    	if (result1.getEntityList() != null && result1.getEntityList().get(0) != null) {
	        	double qty = Double.parseDouble(result1.getEntityList().get(0).toString());
                            if(qty > 0){
                                Product product = null;
                                KwlReturnObject result2 = accProductObj.getAssemblyProductDetails(productid);
	        		if(result2.getEntityList() != null){
	        			Iterator<List> res2 = result2.getEntityList().iterator();
	        			while(res2.hasNext()){
	        				ProductBuildDetails pbd = (ProductBuildDetails) res2.next();
//                                                product = productAssembly.getProduct();
	        				try {
                                                    JSONObject inventoryjson = new JSONObject();
                                                    inventoryjson.put("productid",pbd.getAproduct().getID());
                                                    inventoryjson.put("quantity", pbd.getBuild().getQuantity() * pbd.getInventoryQuantity() );
                                                    inventoryjson.put("baseuomquantity", pbd.getBuild().getQuantity() * pbd.getInventoryQuantity());
                                                    inventoryjson.put("baseuomrate", 1);
                                                    if( pbd.getAproduct().getUnitOfMeasure()!=null) {
                                                        inventoryjson.put("uomid",  pbd.getAproduct().getUnitOfMeasure().getID());
                                                    }
                                                    inventoryjson.put("description", "unBuild or Disassemble Product Assembly for "+pbd.getAproduct().getName());
                                                    inventoryjson.put("carryin", true);
                                                    inventoryjson.put("defective", false);
                                                    inventoryjson.put("newinventory", false);
                                                    inventoryjson.put("companyid", companyid);
                                                    accProductObj.addInventory(inventoryjson);
                                                    accProductObj.updateRecycleQuantityofSubProductFromAssembly(pbd.getAproduct().getID(),(-pbd.getRemainingQuantity() + pbd.getRecycleQuantity()));
                                                    pbd.setUnbuild(true);
                                                    accProductObj.updateProductBuildDetails(pbd);
                                                } catch (JSONException e) {
                                                        e.printStackTrace();
                                                }
	        			}
	        		}
                                try {
                                        Inventory invetory=null;
                                    List inventoryList = accProductObj.searchInventoryId(productid, true);
                                        if(inventoryList.size() > 0){
                                        invetory = (Inventory) inventoryList.get(0);
                                    }
                                    double openingQty = 0.0;
                                    if (invetory != null) {
                                        openingQty = invetory.getBaseuomquantity();
                                    }
                                        qty-=openingQty;
                                    JSONObject inventoryjson = new JSONObject();
                                    inventoryjson.put("productid", productid);
                                    inventoryjson.put("quantity", qty);
                                    inventoryjson.put("baseuomquantity", qty);
                                    inventoryjson.put("baseuomrate", 1);
                                        if( product != null && product.getUnitOfMeasure()!=null) {
                                            inventoryjson.put("uomid",  product.getUnitOfMeasure().getID());
                                    }
                                    inventoryjson.put("description", "Inventory removed after deletion");
                                    inventoryjson.put("carryin", false);
                                    inventoryjson.put("defective", false);
                                    inventoryjson.put("newinventory", false);
                                    inventoryjson.put("companyid", companyid);
                                    accProductObj.addInventory(inventoryjson);
                                } catch (JSONException e) {
                                    e.printStackTrace();
                                }
                        }
	    	}
    	}catch (Exception ex){
            Logger.getLogger(accProductControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
    	}
    }
    //Function for reset the initial quantity in case of unbuild an assembly product
    public void resetInitialQuantityofProduct(String productid, String companyid) throws ServiceException {
        try {
            double quantity = 0.0;
            JSONObject inventoryjson = new JSONObject();
            inventoryjson.put("productid", productid);
            inventoryjson.put("quantity", quantity);
            inventoryjson.put("baseuomquantity", quantity);
            accProductObj.updateInitialInventory(inventoryjson);
        } catch (JSONException e) {
            e.printStackTrace();
        }
    }
    //ERP-11730
    public void updateQuantityDueOfSerailnumbers(String productid, String companyid) throws ServiceException {
        try {
            
            JSONObject assmblejson = new JSONObject();
            assmblejson.put("productid", productid);
            assmblejson.put("companyid", companyid);
            accProductObj.updateQuantityDueOfSerailnumbers(assmblejson);
        } catch (JSONException e) {
            e.printStackTrace();
        }
    }
    
    public ModelAndView getProductsForDropdownOptimised(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        boolean issuccess=false;
        List<Product> selectedProductList = new ArrayList();
        try {
            JSONObject paramJObj = StringUtil.convertRequestToJsonObject(request);
            HashMap<String, Object> requestParams = productHandler.getProductRequestMapfromJson(paramJObj);
            String selectedProductIds = request.getParameter("combovalue"); 
            KwlReturnObject companyPrefObj = accCompanyPreferencesObj.getCompanyPreferences(requestParams);
            if(companyPrefObj!=null && companyPrefObj.getEntityList()!= null && companyPrefObj.getEntityList().size() >0 && companyPrefObj.getEntityList().get(0)!=null){
                CompanyAccountPreferences prefObj = (CompanyAccountPreferences) companyPrefObj.getEntityList().get(0);
              requestParams.put("productsortingflag", prefObj.getProductSortingFlag());
            }
            /**
             * Block used to get selected Products using their ids from Sales by Sale Person Report.
             */
            if (!StringUtil.isNullOrEmpty(selectedProductIds) && !selectedProductIds.equals("All")) {
                requestParams.put("selectedProductIds", selectedProductIds);
                requestParams.put("ismultiselectProductids", true);
                KwlReturnObject selectedProducts =  accProductObj.getProductsForCombo(requestParams);
                requestParams.remove("ismultiselectProductids");
                selectedProductList = selectedProducts.getEntityList();
            }
            ExtraCompanyPreferences extraPref = (ExtraCompanyPreferences) kwlCommonTablesDAOObj.getClassObject("com.krawler.common.admin.ExtraCompanyPreferences", paramJObj.optString(Constants.companyKey));
            requestParams.put(Constants.PRODUCT_SEARCH_FLAG, extraPref != null ? extraPref.getProductSearchingFlag() : Constants.PRODUCT_SEARCH_ANYWHERE);
            KwlReturnObject result = accProductObj.getProductsForCombo(requestParams);
            List<Product> prolist = result.getEntityList();
            selectedProductList.addAll(prolist);
            int count = result.getRecordTotalCount();
            JSONArray jArray = getProductsJsonForDropdown(paramJObj, selectedProductList);
            jobj.put("data", jArray);
            jobj.put("totalCount", result.getRecordTotalCount());
            issuccess = true;
        } catch (SessionExpiredException ex) {
            Logger.getLogger(accProductController.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            Logger.getLogger(accProductController.class.getName()).log(Level.SEVERE, null, ex);
        }finally {
            try {
                jobj.put("success", issuccess);
                jobj.put("msg", "");
            } catch (JSONException ex) {
                Logger.getLogger(accProductController.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return new ModelAndView("jsonView", "model", jobj.toString());
    } 

    public JSONArray getProductsJsonForDropdown(JSONObject paramJObj, List<Product> list) throws JSONException, ServiceException, SessionExpiredException, Exception {
        Iterator itr=list.iterator();
         JSONArray jArr = new JSONArray();
        Producttype producttype = new Producttype();
        String productid = paramJObj.optString(Constants.productid);
        Boolean nonSaleInventory = Boolean.parseBoolean((String) paramJObj.optString("loadInventory"));
	boolean isAssemblyType = paramJObj.optString("isAssemblyType",null)!=null ? Boolean.parseBoolean(paramJObj.optString("isAssemblyType")) : false;  //Check from Product Assembly Form. Do not allow service type of Product in BOM.

         Boolean isSettingNewPrice = StringUtil.isNullOrEmpty(paramJObj.optString("isSettingNewPrice",null))? false:Boolean.parseBoolean((String) paramJObj.optString("isSettingNewPrice"));
        String companyid = paramJObj.optString(Constants.companyKey);
        if (isSettingNewPrice) {
            while (itr.hasNext()) {
                Product product = (Product) itr.next();
                
                JSONObject obj = new JSONObject();
                obj.put(Constants.productid, product.getID());
                obj.put("productname", product.getName());
                obj.put("pid", product.getProductid());
                String type = "";
                if (product.getProducttype() != null) {
                    if (storageHandlerImpl.GetVRnetCompanyId().contains(companyid)) {
                        if (StringUtil.equal(product.getProducttype().getName(), "Inventory Assembly")) {
                            type = "Inventory Bundle";
                        } else {
                            type = product.getProducttype().getName();
                        }
                    } else {
                        type = product.getProducttype().getName();
                    }
                    if (isAssemblyType && product.getProducttype().getName().equals("Service")) {   //ERP-21517
                        continue;   //Do not load Service Type of Product in BOM when create new Assembly Product.
                    }
                }
                if (product.isAsset()) {   //For Fixed Asset Group, type will be "Asset"
                    obj.put("type", "Asset");
                } else {
                    obj.put("type", type);
                }
                jArr.put(obj);
            }
        } else {
            while (itr.hasNext()) {
                Product product = (Product) itr.next();
                if (product.getID().equals(productid)) {
                    continue;
                }
                JSONObject obj = new JSONObject();
                String productType = "";
                productType = (product.getProducttype() != null ? product.getProducttype().getName() : "");
                if (nonSaleInventory && productType.equals(producttype.Inventory_Non_Sales)) {
                    continue;
                }
                if (isAssemblyType && productType.equals("Service")) {   //ERP-21517
                    continue;   //Do not load Service Type of Product in BOM when create new Assembly Product.
                }
                obj.put(Constants.productid, product.getID());
                obj.put("hasAccess", product.isIsActive());
                obj.put("productname", product.getName());
                obj.put("desc", product.getDescription());
                obj.put("isAsset", product.isAsset());
                obj.put("location", (product.getLocation() != null ? product.getLocation().getId() : ""));
                obj.put("warehouse", (product.getWarehouse() != null ? product.getWarehouse().getId() : ""));
                String type = "";
                if (product.getProducttype() != null) {
                    if (storageHandlerImpl.GetVRnetCompanyId().contains(companyid)) {
                        if (StringUtil.equal(product.getProducttype().getName(), "Inventory Assembly")) {
                            type = "Inventory Bundle";
                        } else {
                            type = product.getProducttype().getName();
                        }
                    } else {
                        type = product.getProducttype().getName();
                    }
                }
                if (product.isAsset()) {   //For Fixed Asset Group, type will be "Asset"
                    obj.put("type", "Asset");
                } else {
                    obj.put("type", type);
                }
                obj.put("pid", product.getProductid());
                jArr.put(obj);
            }
        }
        return jArr;
    }
    
       public ModelAndView getProductsForComboOptimised(HttpServletRequest request, HttpServletResponse response) {
            JSONObject jobj = new JSONObject();
        boolean issuccess = false;
        String msg = "";
        try {
            HashMap<String, Object> requestParams = productHandler.getProductRequestMap(request);
            if(!StringUtil.isNullOrEmpty(request.getParameter("moduleid"))){
                requestParams.put("moduleid", (String) request.getParameter("moduleid"));
            }  
            
            KwlReturnObject companyPrefObj = accCompanyPreferencesObj.getCompanyPreferences(requestParams);
            
            
            if(companyPrefObj!=null && companyPrefObj.getEntityList()!= null && companyPrefObj.getEntityList().size() >0 && companyPrefObj.getEntityList().get(0)!=null){
                CompanyAccountPreferences prefObj = (CompanyAccountPreferences) companyPrefObj.getEntityList().get(0);
              requestParams.put("productsortingflag", prefObj.getProductSortingFlag());
            }
            
            /**
             * This Function will use when Users Visibility Feature is Enable
             * Append user condition while querying data
             */

            ExtraCompanyPreferences extraPref = (ExtraCompanyPreferences) kwlCommonTablesDAOObj.getClassObject("com.krawler.common.admin.ExtraCompanyPreferences", sessionHandlerImpl.getCompanyid(request));
            if (extraPref != null && extraPref.isUsersVisibilityFlow()) {
                /**
                 * if Users visibility enable
                 */
                KwlReturnObject object = accountingHandlerDAOobj.getObject(User.class.getName(), sessionHandlerImpl.getUserid(request));
                User user = object.getEntityList().size() > 0 ? (User) object.getEntityList().get(0) : null;
                if (!AccountingManager.isCompanyAdmin(user)) {
                    /**
                     *  if Users visibility enable and current user is not admin
                     */
                    Map<String, Object> reqMap = new HashMap();
                    requestParams.put("isUserVisibilityFlow", true);
                    reqMap.put("companyid", sessionHandlerImpl.getCompanyid(request));
                    reqMap.put("userid", sessionHandlerImpl.getUserid(request));
                    reqMap.put("jointable", "pcd");
                    reqMap.put("moduleid", Constants.Acc_Product_Master_ModuleId);
                    String custcondition = fieldManagerDAOobj.appendUsersCondition(reqMap);
                    if (!StringUtil.isNullOrEmpty(custcondition)) {
                        /**
                         * If mapping found with dimension
                         */
                        String usercondition = " and (" + custcondition + ")";
                        requestParams.put("appendusercondtion", usercondition);
                    } else {
                        /**
                         * If no Mapping found for current ser then return
                         * function call
                         */
                        jobj.put("data", new com.krawler.utils.json.JSONArray());
                        jobj.put("totalCount", 0);
                        jobj.put("success", true);
                        jobj.put("msg", "");
                        return new ModelAndView("jsonView", "model", jobj.toString());
                    }
                }
            }
            requestParams.put(Constants.PRODUCT_SEARCH_FLAG, extraPref != null ? extraPref.getProductSearchingFlag() : Constants.PRODUCT_SEARCH_ANYWHERE);
            KwlReturnObject result = accProductObj.getProductsForCombo(requestParams);
            List list = result.getEntityList();
            JSONArray DataJArr = getProductsJsonForComboOptimised(request, list);
            String ss = "";
            jobj.put("data", DataJArr);
            jobj.put("totalCount", result.getRecordTotalCount());
            issuccess = true;
//            System.out.println("End Time" + new Date());
        } catch (SessionExpiredException ex) {
            msg = ex.getMessage();
            Logger.getLogger(accProductController.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ServiceException ex) {
            msg = ex.getMessage();
            Logger.getLogger(accProductController.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            msg = ""+ex.getMessage();
            Logger.getLogger(accProductController.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                jobj.put("success", issuccess);
                jobj.put("msg", msg);
            } catch (JSONException ex) {
                Logger.getLogger(accProductController.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return new ModelAndView("jsonView", "model", jobj.toString());
    }
    
    public JSONArray getProductsJsonForComboOptimised(HttpServletRequest request, List list) throws JSONException, ServiceException, SessionExpiredException, Exception {
        Iterator itr = list.iterator();
        JSONArray jArr = new JSONArray();
        Producttype producttype = new Producttype();

        String companyid = sessionHandlerImpl.getCompanyid(request);
        KwlReturnObject kwlReturnObject = accountingHandlerDAOobj.getObject(CompanyAccountPreferences.class.getName(), companyid);
        CompanyAccountPreferences preferences = (CompanyAccountPreferences) kwlReturnObject.getEntityList().get(0);

        KwlReturnObject cap1 = accountingHandlerDAOobj.getObject(ExtraCompanyPreferences.class.getName(), companyid);
        ExtraCompanyPreferences ecf = (ExtraCompanyPreferences) cap1.getEntityList().get(0);

        String productid = request.getParameter("productid");
        String forCurrency = request.getParameter("forCurrency");
        Boolean onlyProduct = Boolean.parseBoolean((String) request.getParameter("onlyProduct"));
        Boolean nonSaleInventory = Boolean.parseBoolean((String) request.getParameter("loadInventory"));
        Boolean isClone = Boolean.parseBoolean((String) request.getParameter("isClone"));
        int moduleid = (StringUtil.isNullOrEmpty(request.getParameter("moduleid"))) ? 0 : Integer.parseInt(request.getParameter("moduleid"));
        String module_name = StringUtil.isNullOrEmpty(request.getParameter("module_name")) ? "" : request.getParameter("module_name");
        boolean carryin = request.getParameter("carryin") != null ? Boolean.parseBoolean(request.getParameter("carryin")) : false;  //Check from Product Assembly Form. Do not allow service type of Product in BOM.
        if (moduleid == Constants.Acc_Purchase_Return_ModuleId || moduleid == Constants.Acc_Goods_Receipt_ModuleId) {
            carryin = true;
        }
        boolean isFreeTextSearching = (!StringUtil.isNullOrEmpty(request.getParameter("isFreeTextSearching"))) ? Boolean.parseBoolean(request.getParameter("isFreeTextSearching")) : false;

        if (StringUtil.equal(module_name, "INVMODULE")) {
            jArr = getJSONForRegularTransactionsOptimised(itr, productid, request);
        } else if (StringUtil.equal(module_name, "BUDGETING") || StringUtil.equal(module_name, "PRODUCT_CATEGORY")) {
            jArr = getJSONForBudgeting(itr, productid, request);
        } else if (StringUtil.equal(module_name, "CONSIGNMENT")) {
            jArr = getJSONForConsignment(itr, productid, request);
        } else if (StringUtil.equal(module_name, "CONSIGNMENT_RETURN")) {
            jArr = getJSONForConsignmentReturn(itr, productid, request);
        } else if (StringUtil.equal(module_name, "DELIVERY_ORDER")) {
            jArr = getJSONForDeliveryOrder(itr, productid, request);
        } else {
            boolean getSOPOflag = request.getParameter("getSOPOflag") != null ? Boolean.parseBoolean(request.getParameter("getSOPOflag")) : false;
            while (itr.hasNext()) {
                Product product = (Product) itr.next();
                if (product.getID().equals(productid)&&!isClone) {
                    continue;
                }
                JSONObject obj = new JSONObject();
                String productType = "";
                String gcurrencyid = sessionHandlerImpl.getCurrencyID(request);
                productType = (product.getProducttype() != null ? product.getProducttype().getName() : "");
                if (nonSaleInventory && productType.equals(producttype.Inventory_Non_Sales)) {
                    continue;
                }
                // For free text searching mode, deactivated products will not be included in search
                if (isFreeTextSearching && !product.isIsActive()) {
                    continue;
                }
                obj.put("productid", product.getID());
                if (accAccountDAOobj.isTaxActivated(companyid, product.getPurchasetaxid())) {
                    obj.put("purchasetaxId", product.getPurchasetaxid());
                }
                if (accAccountDAOobj.isTaxActivated(companyid, product.getSalestaxid())) {
                    obj.put("salestaxId", product.getSalestaxid());
                }
                obj.put("productname", product.getName());
                obj.put("isActive", product.isIsActive());
                obj.put("hasAccess", product.isIsActive());
                obj.put("isAutoAssembly", product.isAutoAssembly());
                obj.put("desc", product.getDescription());
                obj.put("supplierpartnumber", StringUtil.isNullOrEmpty(product.getSupplier()) ? "" : product.getSupplier());
                obj.put("isAsset", product.isAsset());
                obj.put("minorderingquantity", product.getMinOrderingQuantity());
                obj.put("maxorderingquantity", product.getMaxOrderingQuantity());
                UnitOfMeasure uom = product.getUnitOfMeasure();
                obj.put("uomid", uom == null ? "" : uom.getID());
                obj.put("uomname", uom == null ? "" : uom.getNameEmptyforNA());
                obj.put("displayUoMid", product.getDisplayUoM() == null ? "" : product.getDisplayUoM().getID());
                obj.put("displayUoMName", product.getDisplayUoM() == null ? "" : product.getDisplayUoM().getNameEmptyforNA());
                obj.put("packaging", product.getPackaging() != null ? product.getPackaging().toString() : "");
                obj.put("multiuom", product.isMultiuom());
                obj.put("blockLooseSell", product.isblockLooseSell());
                obj.put("uomschematypeid", product.getUomSchemaType() != null ? product.getUomSchemaType().getID() : "");
                UnitOfMeasure purchaseuom = product.getPurchaseUOM();
                UnitOfMeasure salesuom = product.getSalesUOM();
                obj.put("purchaseuom", purchaseuom == null ? "" : purchaseuom.getID());
                obj.put("purchaseuomname", purchaseuom == null ? "" : purchaseuom.getNameEmptyforNA());
                obj.put("salesuom", salesuom == null ? "" : salesuom.getID());
                obj.put("salesuomname", salesuom == null ? "" : salesuom.getNameEmptyforNA());
                obj.put("stockuom", (product.getPackaging() == null || product.getPackaging().getStockUoM() == null) ? (uom == null ? "" : uom.getID()) : product.getPackaging().getStockUoM().getID());
                obj.put("caseuom", (product.getPackaging() == null || product.getPackaging().getCasingUoM() == null) ? "" : product.getPackaging().getCasingUoM().getID());
                obj.put("inneruom", (product.getPackaging() == null || product.getPackaging().getInnerUoM() == null) ? "" : product.getPackaging().getInnerUoM().getID());
                obj.put("caseuomvalue", (product.getPackaging() == null || product.getPackaging().getCasingUoM() == null) ? 1 : product.getPackaging().getStockUomQtyFactor(product.getPackaging().getCasingUoM()));
                obj.put("inneruomvalue", (product.getPackaging() == null || product.getPackaging().getInnerUoM() == null) ? 1 : product.getPackaging().getStockUomQtyFactor(product.getPackaging().getInnerUoM()));
                obj.put("stockpurchaseuomvalue", purchaseuom == null || product.getPackaging() == null ? 1 : product.getPackaging().getStockUomQtyFactor(purchaseuom));
                obj.put("stocksalesuomvalue", salesuom == null || product.getPackaging() == null ? 1 : product.getPackaging().getStockUomQtyFactor(salesuom));
                obj.put("isLocationForProduct", product.isIslocationforproduct());
                obj.put("isWarehouseForProduct", product.isIswarehouseforproduct());
                obj.put("isRowForProduct", product.isIsrowforproduct());
                obj.put("isRackForProduct", product.isIsrackforproduct());
                obj.put("isBinForProduct", product.isIsbinforproduct());
                obj.put("isBatchForProduct", product.isIsBatchForProduct());
                obj.put("isSerialForProduct", product.isIsSerialForProduct());
                obj.put("isSKUForProduct", product.isIsSKUForProduct());
                obj.put("isRecyclable", product.isRecyclable());
                obj.put("recycleQuantity", product.getRecycleQuantity());
                obj.put("activateProductComposition", product.isActivateProductComposition());
                obj.put("purchaseacctaxcode", ((product.getPurchaseAccount() != null && (!StringUtil.isNullOrEmpty(product.getPurchaseAccount().getTaxid()))) ? product.getPurchaseAccount().getTaxid() : ""));
                obj.put("salesacctaxcode", ((product.getSalesAccount() != null && (!StringUtil.isNullOrEmpty(product.getSalesAccount().getTaxid()))) ? product.getSalesAccount().getTaxid() : ""));
                obj.put("warrantyperiod", product.getWarrantyperiod());
                obj.put("warrantyperiodsal", product.getWarrantyperiodsal());
                obj.put("location", (product.getLocation() != null ? product.getLocation().getId() : ""));
                obj.put("warehouse", (product.getWarehouse() != null ? product.getWarehouse().getId() : ""));
                obj.put("isWastageApplicable", product.isWastageApplicable());
                obj.put("productweightperstockuom", product.getProductWeightPerStockUom());
                obj.put("productweightincludingpakagingperstockuom", product.getProductWeightIncludingPakagingPerStockUom());
                obj.put("productvolumeperstockuom", product.getProductVolumePerStockUom());
                obj.put("productvolumeincludingpakagingperstockuom", product.getProductVolumeIncludingPakagingPerStockUom());
                obj.put("isQAEnable", product.isQaenable());
                if (!onlyProduct && !storageHandlerImpl.GetLowercaseCompanyId().contains(companyid) || product.getParent() != null) {

                    obj.put("purchaseretaccountid", (product.getPurchaseReturnAccount() != null ? product.getPurchaseReturnAccount().getID() : ""));
                    obj.put("salesretaccountid", (product.getSalesReturnAccount() != null ? product.getSalesReturnAccount().getID() : ""));
                    /*
                     * forCurrency- Transaction Currency. Only passed from
                     * CostAndMargin window in SO and CQ
                     */
                    if (!StringUtil.isNullOrEmpty(forCurrency)) { /*
                         * TRANSACTION CURRENCY
                         */
                        Map<String, Object> currencyParams = AccountingManager.getGlobalParams(request);
                        if (gcurrencyid.equals(forCurrency)) {
                            /*
                             * IF TRANSACTION CURRENCY IS EMPTY THEN GET PRICE
                             * IN BASE CURRENCY
                             */
                            KwlReturnObject purchase = accProductObj.getProductPrice(product.getID(), true, null, "", gcurrencyid);
                            obj.put("purchaseprice", purchase.getEntityList().isEmpty() ? 0 : (purchase.getEntityList().get(0) == null ? 0 : (Double) purchase.getEntityList().get(0)));
                        } else {
                            /*
                             * IF TRANSACTION CURRENCY IS NOT EMPTY THEN GET
                             * PRICE AND CONVERT IT INTO BASE CURRENCY
                             */
                            KwlReturnObject purchase = accProductObj.getProductPrice(product.getID(), true, null, "", forCurrency);
                            if (!purchase.getEntityList().isEmpty() && purchase.getEntityList().get(0) != null) {
                                double purchaseprice = (Double) purchase.getEntityList().get(0);
                                KwlReturnObject pplist = accCurrencyDAOobj.getCurrencyToBaseAmount(currencyParams, purchaseprice, forCurrency, null, 0);
                                obj.put("purchaseprice", pplist.getEntityList().get(0));
                            } else {
                                purchase = accProductObj.getProductPrice(product.getID(), true, null, "", gcurrencyid);
                                obj.put("purchaseprice", purchase.getEntityList().isEmpty() ? 0 : (purchase.getEntityList().get(0) == null ? 0 : (Double) purchase.getEntityList().get(0)));
                            }
                        }
                    } else {
                        KwlReturnObject purchase = accProductObj.getProductPrice(product.getID(), true, null, "", "");
                        obj.put("purchaseprice", purchase.getEntityList().get(0));
                    }
                    KwlReturnObject sales = accProductObj.getProductPrice(product.getID(), false, null, "", "");
                    obj.put("saleprice", sales.getEntityList().get(0));
                } else {
                    if (onlyProduct) {
                        if (!StringUtil.isNullOrEmpty(forCurrency)) { /*
                             * TRANSACTION CURRENCY
                             */
                            Map<String, Object> currencyParams = AccountingManager.getGlobalParams(request);
                            if (gcurrencyid.equals(forCurrency)) {
                                /*
                                 * IF TRANSACTION CURRENCY IS EMPTY THEN GET
                                 * PRICE IN BASE CURRENCY
                                 */
                                KwlReturnObject purchase = accProductObj.getProductPrice(product.getID(), true, null, "", gcurrencyid);
                                obj.put("purchaseprice", purchase.getEntityList().isEmpty() ? 0 : (purchase.getEntityList().get(0) == null ? 0 : (Double) purchase.getEntityList().get(0)));
                            } else {
                                /*
                                 * IF TRANSACTION CURRENCY IS NOT EMPTY THEN GET
                                 * PRICE AND CONVERT IT INTO BASE CURRENCY
                                 */
                                KwlReturnObject purchase = accProductObj.getProductPrice(product.getID(), true, null, "", forCurrency);
                                if (!purchase.getEntityList().isEmpty() && purchase.getEntityList().get(0) != null) {
                                    double purchaseprice = (Double) purchase.getEntityList().get(0);
                                    KwlReturnObject pplist = accCurrencyDAOobj.getCurrencyToBaseAmount(currencyParams, purchaseprice, forCurrency, null, 0);
                                    obj.put("purchaseprice", pplist.getEntityList().get(0));
                                } else {
                                    purchase = accProductObj.getProductPrice(product.getID(), true, null, "", gcurrencyid);
                                    obj.put("purchaseprice", purchase.getEntityList().isEmpty() ? 0 : (purchase.getEntityList().get(0) == null ? 0 : (Double) purchase.getEntityList().get(0)));
                                }
                            }
                        } else {
                            KwlReturnObject purchase = accProductObj.getProductPrice(product.getID(), true, null, "", "");
                            obj.put("purchaseprice", purchase.getEntityList().get(0));
                        }
                    }
                }

                obj.put("dependentType", (product.getDependenttype() != null ? (product.getDependenttype().getType() == 1) ? product.getDependenttype().getID() : "" : ""));
                obj.put("dependentTypeNo", (product.getDependenttype() != null ? (product.getDependenttype().getType() == 0) ? product.getDependenttype().getID() : "" : ""));
                obj.put("dependentTypeQty", (product.getDependenttype() != null ? (product.getDependenttype().getType() == 2) ? product.getDependenttype().getID() : "" : ""));
                obj.put("parentDependentType", (product.getDependenttype() != null ? product.getDependenttype().getID() : ""));
                obj.put("timeintervalChk", product.isIntervalfield());
                obj.put("addshiplentheithqty", product.isAddshiplentheithqty());
                obj.put("hourtimeinterval", product.getTimeinterval());
                obj.put("noofquqntity", product.getNoofquqntity());
                if (product.getChildren().size() > 0) {
                    obj.put("isparentproduct", true);
                } else {
                    obj.put("isparentproduct", false);
                }
                obj.put("parentid", ((product.getParent() != null) ? product.getParent().getID() : ""));
                obj.put("parentname", ((product.getParent() != null) ? product.getParent().getName() : ""));
                obj.put("noofqtyvalue", product.getNoofqtyvalue());
                
                double quantity = 1;
                double baseuomrate = 1;
                JSONObject jObj = null;
                if (!StringUtil.isNullOrEmpty(ecf.getColumnPref())) {
                    jObj = new JSONObject((String) ecf.getColumnPref());
                    if (jObj.has(Constants.isDisplayUOM) && jObj.get(Constants.isDisplayUOM) != null && (Boolean) jObj.get(Constants.isDisplayUOM) != false) {
                        obj = accProductObj.getProductDisplayUOM(product, quantity, baseuomrate, carryin, obj);
                    }
                }
                obj.put("intervalField", product.isIntervalfield());
                String type = "";
                if (product.getProducttype() != null) {
                    if (storageHandlerImpl.GetVRnetCompanyId().contains(companyid)) {
                        if (StringUtil.equal(product.getProducttype().getName(), "Inventory Assembly")) {
                            type = "Inventory Bundle";
                        } else {
                            type = product.getProducttype().getName();
                        }
                    } else {
                        type = product.getProducttype().getName();
                    }
                }

                if (preferences.isInventoryAccountingIntegration()) {
                    JSONArray customJSONArray = getCustomColumnData(product.getID(), companyid);
                    if (customJSONArray.length() > 0) {
                        for (int count = 0; count < customJSONArray.length(); count++) {

                            JSONObject customJSONObject = customJSONArray.getJSONObject(count);
                            String customFieldName = StringUtil.isNullOrEmpty(customJSONObject.optString("fieldname", "")) ? "" : customJSONObject.optString("fieldname", "");
                            if (!customJSONObject.isNull("fieldname") && (customFieldName.equalsIgnoreCase(Constants.CUSTOM_STOP_PURCHASE) || customFieldName.equalsIgnoreCase(Constants.CUSTOM_OBSOLETE)) && (customJSONObject.getInt("fieldtype") == Constants.CUSTOM_CHECKBOX)) {
                                if (!customJSONObject.isNull("fieldData") && !StringUtil.isNullOrEmpty(customJSONObject.optString("fieldData", "")) && customJSONObject.getString("fieldData").equalsIgnoreCase("true")) {
                                    obj.put("isStopPurchase", true);
                                    break;
                                }
                            }
                        }
                    }
                }
                if (product.isAsset()) {     //For Fixed Asset Group, type will be "Asset"
                    obj.put("type", "Asset");
                } else {
                    obj.put("type", type);
                }
                obj.put("pid", product.getProductid());
                String prodtype = (product.getProducttype() != null ? product.getProducttype().getID() : "");
                obj.put("producttype", prodtype);

                if (product.isblockLooseSell()) {
                    KwlReturnObject result = accProductObj.getAvailableQuantityInSelectedUOM(product.getID(), product.getUnitOfMeasure().getID());
                    obj.put("quantity", (result.getEntityList().get(0) == null ? 0 : result.getEntityList().get(0)));
                } else {
                    KwlReturnObject result = accProductObj.getQuantity(product.getID());;
                    obj.put("quantity", (result.getEntityList().get(0) == null ? 0 : result.getEntityList().get(0)));
                }

                KwlReturnObject result4 = accProductObj.getVendorConsignedQuantity(product.getID());
                obj.put("venconsignuomquantity", (result4.getEntityList().get(0) == null ? 0 : result4.getEntityList().get(0)));

                KwlReturnObject result5 = accProductObj.getConsignedQuantity(product.getID());
                obj.put("consignquantity", (result5.getEntityList().get(0) == null ? 0 : result5.getEntityList().get(0)));
                jArr.put(obj);
            }
        }
        return jArr;
    }

    public JSONArray getJSONForRegularTransactionsOptimised(Iterator itr, String productid, HttpServletRequest request) throws ServiceException, SessionExpiredException, JSONException, Exception {
        JSONArray jArr = new JSONArray();
        KwlReturnObject kwlReturnObject = null;

        Producttype producttype = new Producttype();
        String companyid = sessionHandlerImpl.getCompanyid(request);

        kwlReturnObject = accountingHandlerDAOobj.getObject(CompanyAccountPreferences.class.getName(), companyid);
        CompanyAccountPreferences preferences = (CompanyAccountPreferences) kwlReturnObject.getEntityList().get(0);
        String skipRichTextArea = request.getParameter("skipRichTextArea") != null ? request.getParameter("skipRichTextArea") : Boolean.FALSE.toString();
        kwlReturnObject = accountingHandlerDAOobj.getObject(ExtraCompanyPreferences.class.getName(), companyid);
        ExtraCompanyPreferences extraPreferences = (ExtraCompanyPreferences) kwlReturnObject.getEntityList().get(0);

        Boolean nonSaleInventory = Boolean.parseBoolean((String) request.getParameter("loadInventory"));

        int moduleid = (StringUtil.isNullOrEmpty(request.getParameter("moduleid"))) ? 0 : Integer.parseInt(request.getParameter("moduleid"));

        boolean isStopPurchase = (moduleid == 22 || moduleid == 20 || moduleid == 2) ? false : true;
        Boolean onlyProduct = StringUtil.isNullOrEmpty(request.getParameter("onlyProduct")) ? false : Boolean.parseBoolean((String) request.getParameter("onlyProduct"));
        String gcurrencyid = sessionHandlerImpl.getCurrencyID(request);
        boolean getSOPOflag = request.getParameter("getSOPOflag") != null ? Boolean.parseBoolean(request.getParameter("getSOPOflag")) : false;
        boolean isFreeTextSearching = (!StringUtil.isNullOrEmpty(request.getParameter("isFreeTextSearching"))) ? Boolean.parseBoolean(request.getParameter("isFreeTextSearching")) : false;
        boolean isIndividualProductPrice = (!StringUtil.isNullOrEmpty(request.getParameter("isIndividualProductPrice"))) ? Boolean.parseBoolean(request.getParameter("isIndividualProductPrice")) : false;
        while (itr.hasNext()) {
            JSONObject obj = new JSONObject();
            Product product = (Product) itr.next();
            if (product.getID().equals(productid)) {
                continue;
            }

            String productType = "";
            String productTypeId = "";
            productType = (product.getProducttype() != null ? product.getProducttype().getName() : "");
            productTypeId = (product.getProducttype() != null ? product.getProducttype().getID() : "");
            if (nonSaleInventory && productType.equals(producttype.Inventory_Non_Sales)) {
                continue;
            }
            // For free text searching mode, deactivated products will not be included in search
            if (isFreeTextSearching && !product.isIsActive()) {
                continue;
            }
            obj.put("productid", product.getID());
            if (accAccountDAOobj.isTaxActivated(companyid, product.getPurchasetaxid())) {
                obj.put("purchasetaxId", product.getPurchasetaxid());
            }
            if (accAccountDAOobj.isTaxActivated(companyid, product.getSalestaxid())) {
                obj.put("salestaxId", product.getSalestaxid());
            }
            obj.put("hsncode", !StringUtil.isNullOrEmpty(product.getHSNCode()) ? product.getHSNCode() : "");
            obj.put("productname", product.getName());
            obj.put("isActive", product.isIsActive());
            obj.put("hasAccess", product.isIsActive());
            obj.put("desc", product.getDescription());
            obj.put("isAutoAssembly", product.isAutoAssembly());
            UnitOfMeasure uom = product.getUnitOfMeasure();
            obj.put("uomid", uom == null ? "" : uom.getID());
            obj.put("uomname", uom == null ? "" : uom.getNameEmptyforNA());
            obj.put("multiuom", product.isMultiuom());
            obj.put("uomschematypeid", product.getUomSchemaType() != null ? product.getUomSchemaType().getID() : "");
            obj.put("displayUoMid", product.getDisplayUoM() == null ? "" : product.getDisplayUoM().getID());
            obj.put("displayUoMName", product.getDisplayUoM() == null ? "" : product.getDisplayUoM().getNameEmptyforNA());
            UnitOfMeasure purchaseuom = product.getPurchaseUOM();
            UnitOfMeasure salesuom = product.getSalesUOM();
            obj.put("purchaseuom", purchaseuom == null ? "" : purchaseuom.getID());
            obj.put("salesuom", salesuom == null ? "" : salesuom.getID());
            obj.put("stockuom", (product.getPackaging() == null || product.getPackaging().getStockUoM() == null) ? (uom == null ? "" : uom.getID()) : product.getPackaging().getStockUoM().getID());
            obj.put("caseuom", (product.getPackaging() == null || product.getPackaging().getCasingUoM() == null) ? "" : product.getPackaging().getCasingUoM().getID());
            obj.put("inneruom", (product.getPackaging() == null || product.getPackaging().getInnerUoM() == null) ? "" : product.getPackaging().getInnerUoM().getID());
            obj.put("caseuomvalue", (product.getPackaging() == null || product.getPackaging().getCasingUoM() == null) ? 1 : product.getPackaging().getStockUomQtyFactor(product.getPackaging().getCasingUoM()));
            obj.put("inneruomvalue", (product.getPackaging() == null || product.getPackaging().getInnerUoM() == null) ? 1 : product.getPackaging().getStockUomQtyFactor(product.getPackaging().getInnerUoM()));
            obj.put("stockpurchaseuomvalue", purchaseuom == null || product.getPackaging() == null ? 1 : product.getPackaging().getStockUomQtyFactor(purchaseuom));
            obj.put("stocksalesuomvalue", salesuom == null || product.getPackaging() == null ? 1 : product.getPackaging().getStockUomQtyFactor(salesuom));
            obj.put("isLocationForProduct", product.isIslocationforproduct());
            obj.put("isWarehouseForProduct", product.isIswarehouseforproduct());
            obj.put("isRowForProduct", product.isIsrowforproduct());
            obj.put("isRackForProduct", product.isIsrackforproduct());
            obj.put("isBinForProduct", product.isIsbinforproduct());
            obj.put("isBatchForProduct", product.isIsBatchForProduct());
            obj.put("isSerialForProduct", product.isIsSerialForProduct());
            obj.put("isSKUForProduct", product.isIsSKUForProduct());
            obj.put("location", (product.getLocation() != null ? product.getLocation().getId() : ""));
            obj.put("warehouse", (product.getWarehouse() != null ? product.getWarehouse().getId() : ""));
            obj.put("minorderingquantity", product.getMinOrderingQuantity());
            obj.put("maxorderingquantity", product.getMaxOrderingQuantity());
            if (productTypeId.equals(Producttype.ASSEMBLY) || productTypeId.equals(Producttype.CUSTOMER_ASSEMBLY)) {

                Map<String, Object> requestParams = new HashMap<>();
                requestParams.put(Constants.productid, product.getID());
                requestParams.put("isdefaultbom", true);

                KwlReturnObject bomresult = accProductObj.getBOMDetail(requestParams);
                List<BOMDetail> bomdetails = bomresult.getEntityList();
                if (!bomdetails.isEmpty()) {
                    BOMDetail bomdObj = bomdetails.get(0);
                    obj.put("defaultbomid", bomdObj.getID());
                    obj.put("defaultbomcode", bomdObj.getBomCode());
                }

            }
            if (!onlyProduct) {
                KwlReturnObject purchase = accProductObj.getProductPrice(product.getID(), true, null, "", "");
                obj.put("purchaseprice", purchase.getEntityList().get(0));
            }

            String type = "";
            
            if (product.getProducttype() != null) {
                if (storageHandlerImpl.GetVRnetCompanyId().contains(companyid)) {
                    if (StringUtil.equal(product.getProducttype().getName(), "Inventory Assembly")) {
                        type = "Inventory Bundle";
                    } else {
                        type = product.getProducttype().getName();
                    }
                } else if (product.isAsset()) {     //For Fixed Asset Group, type will be "Asset"
                    obj.put("type", "Asset");
                } else {
                    type = product.getProducttype().getName();
                    obj.put("type",type);
                }
            }

            if (isStopPurchase && preferences.isInventoryAccountingIntegration()) {
                JSONArray customJSONArray = getCustomColumnData(product.getID(), companyid);
                if (customJSONArray.length() > 0) {
                    for (int count = 0; count < customJSONArray.length(); count++) {

                        JSONObject customJSONObject = customJSONArray.getJSONObject(count);
                        String customFieldName = StringUtil.isNullOrEmpty(customJSONObject.optString("fieldname", "")) ? "" : customJSONObject.optString("fieldname", "");
                        if (!customJSONObject.isNull("fieldname") && (customFieldName.equalsIgnoreCase(Constants.CUSTOM_STOP_PURCHASE) || customFieldName.equalsIgnoreCase(Constants.CUSTOM_OBSOLETE)) && (customJSONObject.getInt("fieldtype") == Constants.CUSTOM_CHECKBOX)) {
                            if (!customJSONObject.isNull("fieldData") && !StringUtil.isNullOrEmpty(customJSONObject.optString("fieldData", "")) && customJSONObject.getString("fieldData").equalsIgnoreCase("true")) {
                                obj.put("isStopPurchase", true);
                                break;
                            }
                        }
                    }
                }
            }

            obj.put("pid", product.getProductid());
            obj.put("producttype", (product.getProducttype() != null ? product.getProducttype().getID() : ""));
            if (preferences.isShowprodserial()) {
                ProductBatch batch = getBatchDetailsForProduct(product.getID());
                if (batch != null) {
                    obj.put("location", batch.getLocation().getId());
                    obj.put("warehouse", batch.getWarehouse().getId());
                } else {
                    obj.put("location", "");
                    obj.put("warehouse", "");
                }
            }
            String salesOrPurchase = request.getParameter("termSalesOrPurchaseCheck") != null ? request.getParameter("termSalesOrPurchaseCheck").toString() : "false";
            if (product.getCompany().getCountry().getID().equals("" + Constants.indian_country_id)) {  // Fetch Vat term details of Product
                boolean carryin = StringUtil.isNullOrEmpty(salesOrPurchase) ? true : Boolean.parseBoolean(salesOrPurchase);
                String uomid = (uom == null) ? "" : uom.getID();
                // Excise AND VAT special type TAX ------ START-------
                if (extraPreferences.isExciseApplicable()) {
                    String reortingUOM = !StringUtil.isNullOrEmpty(product.getReportinguom()) ? product.getReportinguom() : "";
                    String valuationType = !StringUtil.isNullOrEmpty(product.getExcisemethodmain()) ? product.getExcisemethodmain() : "";
                    obj.put("valuationType", valuationType);
                    if ((Constants.QUENTITY).equals(valuationType)) {
                        obj.put("compairwithUOM", 1);
                        obj.put("reortingUOMExcise", reortingUOM);
                        if (product.getReportingSchemaType() != null && !reortingUOM.equals(uomid)) {
                            String reportinguomschema = product.getReportingSchemaType().getID();
                            obj.put("reortingUOMSchemaExcise", reportinguomschema);
                            HashMap<String, Object> hsMap = new HashMap<String, Object>();
                            hsMap.put("uomschematypeid", reportinguomschema);
                            hsMap.put("currentuomid", uomid);
                            hsMap.put("carryin", carryin);
                            hsMap.put("companyid", companyid);
                            KwlReturnObject convertor = accProductObj.getProductBaseUOMRate(hsMap);
                            List list = convertor.getEntityList();
                            Iterator itrList = list.iterator();
                            if (itrList.hasNext()) {
                                UOMSchema row = (UOMSchema) itrList.next();
                                if (row != null) {
                                    obj.put("compairwithUOM", row.getBaseuomrate());
                                }
                            }
                        }

                    } else if ((Constants.MRP).equals(valuationType)) {
                        obj.put("productMRP", product.getMrprate());
                    }
                }
                if (extraPreferences.isEnableVatCst()) {
                    String reortingUOMVAT = !StringUtil.isNullOrEmpty(product.getReportinguomVAT()) ? product.getReportinguomVAT() : "";
                    String valuationTypeVAT = !StringUtil.isNullOrEmpty(product.getVatMethodType()) ? product.getVatMethodType() : "";
                    obj.put("valuationTypeVAT", valuationTypeVAT);
                    if ((Constants.QUENTITY).equals(valuationTypeVAT)) {
                        obj.put("compairwithUOMVAT", 1);
                        obj.put("reportingUOMVAT", reortingUOMVAT);
                        if (product.getReportingSchemaTypeVAT() != null && !reortingUOMVAT.equals(uomid)) {
                            String reportinguomschema = product.getReportingSchemaTypeVAT().getID();
                            obj.put("reportingUOMSchemaVAT", reportinguomschema);
                            HashMap<String, Object> hsMap = new HashMap<String, Object>();
                            hsMap.put("uomschematypeid", reportinguomschema);
                            hsMap.put("currentuomid", uomid);
                            hsMap.put("carryin", carryin);
                            hsMap.put("companyid", companyid);
                            KwlReturnObject convertor = accProductObj.getProductBaseUOMRate(hsMap);
                            List list = convertor.getEntityList();
                            Iterator itrList = list.iterator();
                            if (itrList.hasNext()) {
                                UOMSchema row = (UOMSchema) itrList.next();
                                if (row != null) {
                                    obj.put("compairwithUOMVAT", row.getBaseuomrate());
                                }
                            }
                        }

                    } else if ((Constants.MRP).equals(valuationTypeVAT)) {
                        obj.put("productMRP", product.getMrprate());
                    }
                }
                // Excise AND VAT special type TAX ------ END-------  
            }
            //jArr.put(obj);
            double quantity = 0.0;
            if (product.isblockLooseSell()) {
                KwlReturnObject result = accProductObj.getAvailableQuantityInSelectedUOM(product.getID(), product.getUnitOfMeasure().getID());
                quantity = (result.getEntityList().get(0) == null ? 0 : (Double) result.getEntityList().get(0));
                obj.put("quantity", quantity);
                obj.put("availableQtyInSelectedUOM", (result.getEntityList().get(0) == null ? 0 : result.getEntityList().get(0)));
            } else {
                KwlReturnObject result = accProductObj.getQuantity(product.getID());;
                quantity = (result.getEntityList().get(0) == null ? 0 : (Double) result.getEntityList().get(0));
                obj.put("quantity", quantity);
                obj.put("availableQtyInSelectedUOM", (result.getEntityList().get(0) == null ? 0 : result.getEntityList().get(0)));
            }
            
            if(isIndividualProductPrice){
                JSONObject paramJobj = StringUtil.convertRequestToJsonObject(request);
                paramJobj.put(Constants.productid, product.getID());
                paramJobj.put("quantity", quantity);
                paramJobj.put("skipRichTextArea", skipRichTextArea);
                JSONObject jobj = AccProductService.getIndividualProductPrice(paramJobj);
                if(jobj.has("data") && !StringUtil.isNullOrEmpty(jobj.getString("data"))){
                    obj.put("individualproductprice", new JSONArray(jobj.getString("data")));
                }
                if(jobj.has("discountData") && !StringUtil.isNullOrEmpty(jobj.getString("discountData"))){
                    obj.put("discountData", new JSONArray(jobj.getString("discountData")));
                }
            }
            obj.put("itctype", product.getItcType());
            jArr.put(obj);
        }
        return jArr;
    }
    
    public ModelAndView getProductsForSelectionGridOptimised(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        boolean issuccess = false;
        String msg = "";
        try {
            HashMap<String, Object> requestParams = productHandler.getProductRequestMap(request);
            System.out.println("Start Time" + new Date());

            if (!StringUtil.isNullOrEmpty(request.getParameter("moduleid"))) {
                requestParams.put("moduleid", (String) request.getParameter("moduleid"));
            }
            if (!StringUtil.isNullOrEmpty(request.getParameter("type"))) {  //ERP-11098 [SJ]
                requestParams.put("type", (String) request.getParameter("type"));
            }
            String companyid = sessionHandlerImpl.getCompanyid(request);
            KwlReturnObject rst = accountingHandlerDAOobj.getObject(CompanyAccountPreferences.class.getName(), companyid);
            CompanyAccountPreferences prefObj = (CompanyAccountPreferences) rst.getEntityList().get(0);

            if (prefObj != null) {
                requestParams.put("productsortingflag", prefObj.getProductSortingFlag());
            }
            String start = request.getParameter("start");
            String limit = request.getParameter("limit");
            if (!StringUtil.isNullOrEmpty(start)) {
                requestParams.put("start", start);
            }
            if (!StringUtil.isNullOrEmpty(limit)) {
                requestParams.put("limit", limit);
            }
            if (!StringUtil.isNullOrEmpty(request.getParameter("categoryid"))) {
                requestParams.put("categoryid", request.getParameter("categoryid"));
            }
            if (!StringUtil.isNullOrEmpty(request.getParameter("isStoreLocationEnable"))) {
                requestParams.put("isStoreLocationEnable", request.getParameter("isStoreLocationEnable"));
            }
            /**
             * This Function will use when Users Visibility Feature is Enable
             * Append user condition while querying data
             */
            ExtraCompanyPreferences extraPref = (ExtraCompanyPreferences) kwlCommonTablesDAOObj.getClassObject("com.krawler.common.admin.ExtraCompanyPreferences", companyid);
            if (extraPref != null && extraPref.isUsersVisibilityFlow()) {
                KwlReturnObject object = accountingHandlerDAOobj.getObject(User.class.getName(), sessionHandlerImpl.getUserid(request));
                User user = object.getEntityList().size() > 0 ? (User) object.getEntityList().get(0) : null;
                if (!AccountingManager.isCompanyAdmin(user)) {
                    /**
                     * if Users visibility enable and current user is not admin
                     */
                    Map<String, Object> reqMap = new HashMap();
                    requestParams.put("isUserVisibilityFlow", true);
                    reqMap.put("companyid", companyid);
                    reqMap.put("userid", sessionHandlerImpl.getUserid(request));
                    reqMap.put("jointable", "pcd");
                    reqMap.put("moduleid", Constants.Acc_Product_Master_ModuleId);
                    String custcondition = fieldManagerDAOobj.appendUsersCondition(reqMap);
                    if (!StringUtil.isNullOrEmpty(custcondition)) {
                        /**
                         * If mapping found with dimension
                         */
                        String usercondition = " and (" + custcondition + ")";
                        requestParams.put("appendusercondtion", usercondition);
                    } else {
                        /**
                         * If no Mapping found for current ser then return
                         * function call
                         */
                        jobj.put("data", new com.krawler.utils.json.JSONArray());
                        jobj.put("totalCount", 0);
                        jobj.put("success", true);
                        jobj.put("msg", "");
                        return new ModelAndView("jsonView", "model", jobj.toString());
                    }
                }
            }

//            Date date1 = new Date();
            KwlReturnObject result = accProductObj.getProductsForSelectionGrid(requestParams);
            List list = result.getEntityList();
//            Date date2 = new Date();
//            long diff = date2.getTime() - date1.getTime();
//            System.out.println("Seconds" + diff / 1000 % 60);

//            JSONArray DataJArr = getProductsJsonForProductSelectionGrid(request, list);
            JSONArray DataJArr = getProductsJsonForProductSelectionGridOptimised(request, list);

            jobj.put("data", DataJArr);
            jobj.put("totalCount", result.getRecordTotalCount());
            issuccess = true;
            System.out.println("End Time" + new Date());
        } catch (SessionExpiredException ex) {
            msg = ex.getMessage();
            Logger.getLogger(accProductController.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ServiceException ex) {
            msg = ex.getMessage();
            Logger.getLogger(accProductController.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            msg = "" + ex.getMessage();
            Logger.getLogger(accProductController.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                jobj.put("success", issuccess);
                jobj.put("msg", msg);
            } catch (JSONException ex) {
                Logger.getLogger(accProductController.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return new ModelAndView("jsonView", "model", jobj.toString());
    }
    
      //ERP-8199 : Product selection grid window JSON
    public JSONArray getProductsJsonForProductSelectionGridOptimised(HttpServletRequest request, List<Object[]> list) throws JSONException, ServiceException, SessionExpiredException, Exception {
//        Iterator itr = list.iterator();
        JSONArray jArr = new JSONArray();
        Producttype producttype = new Producttype();

        String companyid = sessionHandlerImpl.getCompanyid(request);
        boolean isFromInventorySide = false;
        int moduleID =0;
        if (!StringUtil.isNullOrEmpty(request.getParameter("moduleid"))) {
            moduleID = Integer.parseInt((String) request.getParameter("moduleid"));
            if (moduleID == Constants.Acc_Stock_Adjustment_ModuleId || moduleID == Constants.Acc_Stock_Request_ModuleId || moduleID == Constants.Acc_InterStore_ModuleId || moduleID == Constants.Acc_InterLocation_ModuleId) {
                isFromInventorySide = true;
            }
        }
         String ss=""; 
        if (!StringUtil.isNullOrEmpty(request.getParameter("ss"))) {
            ss = (String) request.getParameter("ss");
        }
        Boolean onlyProduct = Boolean.parseBoolean((String) request.getParameter("onlyProduct"));
        Boolean nonSaleInventory = Boolean.parseBoolean((String) request.getParameter("loadInventory"));
        double availableQty = 0.0;
        KwlReturnObject companyObj1 = accountingHandlerDAOobj.getObject(Company.class.getName(), companyid);
        Company compObj = (Company) companyObj1.getEntityList().get(0);
        Map<String, Double> quantityUnderQAForGRNAndDO=new HashMap<String, Double>();
        Map<String, Double> quantityUnderRepairForGRNAndDO=new HashMap<String, Double>();
        
        boolean isCustomer = request.getParameter("isCustomer") != null ? Boolean.parseBoolean(request.getParameter("isCustomer")) : false;
        String customerid = "";
        String Vendorid = "";

        if (!StringUtil.isNullOrEmpty(request.getParameter("customerid"))) {
            if (isCustomer) {
                customerid = (String) request.getParameter("customerid");
            } else {
                Vendorid = (String) request.getParameter("customerid");
            }
        }
        Store store = null;
        if (!StringUtil.isNullOrEmpty(request.getParameter("warehouseid"))) {
            store = storeService.getStoreById(request.getParameter("warehouseid"));
        }
        Location location = null;
        if (!StringUtil.isNullOrEmpty(request.getParameter("locationid"))) {
            location = locationService.getLocation(request.getParameter("locationid"));
        }
        HashMap<String, String> customFieldMap = new HashMap<String, String>();
        HashMap<String, String> customDateFieldMap = new HashMap<String, String>();
        HashMap<String, Object> fieldrequestParams = new HashMap();
        HashMap<String, String> replaceFieldMap = new HashMap();
        HashMap<String, Integer> FieldMap = new HashMap();
        fieldrequestParams.put(Constants.filter_names, Arrays.asList(Constants.companyid, Constants.moduleid));
        fieldrequestParams.put(Constants.filter_values, Arrays.asList(companyid, Constants.Acc_Product_Master_ModuleId));
        replaceFieldMap = new HashMap<String, String>();
        FieldMap = accAccountDAOobj.getFieldParamsCustomMap(fieldrequestParams, replaceFieldMap, customFieldMap, customDateFieldMap);
        
        quantityUnderQAForGRNAndDO = accProductObj.getProductQuantityUnderQAForGRNAndDO(compObj, null, true);
        quantityUnderRepairForGRNAndDO = accProductObj.getProductQuantityUnderRepairForGRNAndDO(compObj, null, true);
//       while (itr.hasNext()) {
//            Object row[] = (Object[])itr.next();
        for (Object row[] : list) {
            String productid = (String) row[0];
            KwlReturnObject productObj = accountingHandlerDAOobj.getObject(Product.class.getName(), productid);
            Product product = (Product) productObj.getEntityList().get(0);
            JSONObject obj = new JSONObject();
            String productType = "";
            String prodCurrency = "";
            productType = (product.getProducttype() != null ? product.getProducttype().getName() : "");
            if (nonSaleInventory && productType.equals(producttype.Inventory_Non_Sales)) {
                continue;
            }
            obj.put("productid", product.getID());
            obj.put("productname", product.getName());
            obj.put("desc", product.getDescription());
            obj.put("isActiveItem", product.isIsActive());//Mandatory else it will not select in grid

            if (!onlyProduct && !storageHandlerImpl.GetLowercaseCompanyId().contains(companyid) || product.getParent() != null) {
                String stockUomID = product.getUnitOfMeasure() != null ? product.getUnitOfMeasure().getID() : "";
                boolean excludeInitialPrice = true;
                KwlReturnObject purchase = accProductObj.getProductPrice(product.getID(), true, null, "", prodCurrency, stockUomID, excludeInitialPrice);         // Purchase Price
                if (purchase.getEntityList().get(0) == null) {
                    purchase = accProductObj.getProductPrice(product.getID(), true, null, "", prodCurrency);         // purchasePrice
                }
                obj.put("purchaseprice", purchase.getEntityList().get(0) == null ? 0 : purchase.getEntityList().get(0));

                KwlReturnObject sales = accProductObj.getProductPrice(product.getID(), false, null, "", prodCurrency, stockUomID, excludeInitialPrice);           // Sales Price
                if (sales.getEntityList().get(0) == null) {
                    sales = accProductObj.getProductPrice(product.getID(), false, null, "", prodCurrency);           // Sales Price
                }
                obj.put("saleprice", sales.getEntityList().get(0) == null ? 0 : sales.getEntityList().get(0));
            }
            double qaQuantityForGRNAndDO = 0, repairQuantityForGRNAndDO = 0;
            if (quantityUnderQAForGRNAndDO.containsKey(product.getID()) && quantityUnderQAForGRNAndDO.get(product.getID()) != null) {
                qaQuantityForGRNAndDO = quantityUnderQAForGRNAndDO.get(product.getID());
            }
            if (quantityUnderRepairForGRNAndDO.containsKey(product.getID()) && quantityUnderRepairForGRNAndDO.get(product.getID()) != null) {
                repairQuantityForGRNAndDO = quantityUnderRepairForGRNAndDO.get(product.getID());
            }
            obj.put("pid", product.getProductid());
            obj.put("producttype", (product.getProducttype() != null ? product.getProducttype().getID() : ""));
            obj.put("isSKUForProduct", product.isIsSKUForProduct());
            if (isFromInventorySide) {
                obj.put("uomname", product.getUnitOfMeasure() != null ? product.getUnitOfMeasure().getNameEmptyforNA() : "");
                obj.put("uomid", product.getUnitOfMeasure() != null ? product.getUnitOfMeasure().getID() : "");
                obj.put("packaging", product.getPackaging() != null ? product.getPackaging().toString() : "");
                obj.put("packagingid", product.getPackaging() != null ? product.getPackaging().getId() : "");
                obj.put("warehouse", product.getWarehouse() != null ? product.getWarehouse().getId() : "");
                obj.put("orderToStockUOMFactor", product.getPackaging() != null ? product.getPackaging().getStockUomQtyFactor(product.getOrderingUOM()) : 1);
                obj.put("transferToStockUOMFactor", product.getPackaging() != null ? product.getPackaging().getStockUomQtyFactor(product.getTransferUOM()) : 1);
                obj.put("orderinguomid", product.getOrderingUOM() != null ? product.getOrderingUOM().getID() : "");
                obj.put("transferinguomid", product.getTransferUOM() != null ? product.getTransferUOM().getID() : "");
                obj.put("orderinguomname", product.getOrderingUOM() != null ? product.getOrderingUOM().getNameEmptyforNA() : "");
                obj.put("transferinguomname", product.getTransferUOM() != null ? product.getTransferUOM().getNameEmptyforNA() : "");
                obj.put("isBatchForProduct", product.isIsBatchForProduct());
                obj.put("isSerialForProduct", product.isIsSerialForProduct());
                obj.put("isSKUForProduct", product.isIsSKUForProduct());
                obj.put("isRowForProduct", product.isIsrowforproduct());
                obj.put("isRackForProduct", product.isIsrackforproduct());
                obj.put("isBinForProduct", product.isIsbinforproduct());
                obj.put("ismultipleuom", product.isMultiuom());
                obj.put("uomschematype", product.getUomSchemaType() != null ? product.getUomSchemaType().getID() : "");
                
                

//                availableQty = stockDAO.getProductTotalQuantityInStore(product, store);
//                obj.put("quantity", availableQty);
            }
            
            if (product.isblockLooseSell() && !isFromInventorySide) {
                KwlReturnObject result = accProductObj.getAvailableQuantityInSelectedUOM(product.getID(), product.getUnitOfMeasure().getID());
                availableQty = (result.getEntityList().get(0) == null ? 0 : (Double) result.getEntityList().get(0));
                obj.put("quantity", (availableQty - (qaQuantityForGRNAndDO + repairQuantityForGRNAndDO)));
            } else if (!isFromInventorySide) {
                availableQty = product.getAvailableQuantity();
                obj.put("quantity", (availableQty - (qaQuantityForGRNAndDO + repairQuantityForGRNAndDO)));
            }
            
            if (!StringUtil.isNullObject(store)) {
                availableQty = stockDAO.getProductQuantityInStoreLocation(product, store, location);
                obj.put("quantity", authHandler.roundQuantity(availableQty, companyid));
            }
            KwlReturnObject result = accProductObj.getVendorConsignedQuantity(product.getID());
            obj.put("venconsignuomquantity", (result.getEntityList().get(0) == null ? 0 : result.getEntityList().get(0)));
            HashMap<String, Object> requestParams = new HashMap<String, Object>();
            requestParams.put("companyObj", compObj);
            requestParams.put("productObj", product);
            requestParams.put("ss", ss);
            JSONObject jobj = AccProductService.getBlockedQuantityOfProduct(requestParams);

            double lockQuantityInSelectedUOM = jobj.optDouble("lockquantity", 0);
//            obj.put("lockquantity", (lockQuantityInSelectedUOM));
            double balanceQuantity = availableQty - (lockQuantityInSelectedUOM);
            obj.put("balancequantity", (balanceQuantity));
            if ((product.getProducttype().getID().equals(Producttype.NON_INVENTORY_PART) || product.getProducttype().getID().equals(Producttype.SERVICE))) {
                obj.put("balancequantity", "NA");
                obj.put("baseuomquantity", "NA");
                obj.put("quantity", "NA");
                obj.put("lockquantity", "NA");
                obj.put("venconsignuomquantity", "NA");
            }
            obj.put("jsonstring", "");
                        if (!StringUtil.isNullOrEmpty(customerid)) {
                KwlReturnObject productjsonobj = accVendorCustomerProductDAOobj.getProductsByCustomer(customerid, "", null);
                List<CustomerProductMapping> listpro = productjsonobj.getEntityList();
                for (CustomerProductMapping CustomerProductObj : listpro) {
                    String customerproductsid = CustomerProductObj.getProducts().getID();
                    if (customerproductsid.equals(product.getID())) {
                        obj.remove("jsonstring");
                        obj.put("jsonstring", CustomerProductObj.getJsonstring());
                    }
                }
            } else if (!StringUtil.isNullOrEmpty(Vendorid)) {
                KwlReturnObject productjsonobj = accVendorCustomerProductDAOobj.getProductsByVendor(Vendorid, "", null);
                List<VendorProductMapping> listpro = productjsonobj.getEntityList();
                for (VendorProductMapping vendorProductObj : listpro) {
                    String vendorproductsid = vendorProductObj.getProducts().getID();
                    if (vendorproductsid.equals(product.getID())) {
                        obj.remove("jsonstring");
                        obj.put("jsonstring", vendorProductObj.getJsonstring());
                    }
                }
            }
            /**
             * Get Product Custom data
             */            
            Map<String, Object> variableMap = new HashMap<String, Object>();
            KwlReturnObject custumObjresult = accountingHandlerDAOobj.getObject(AccProductCustomData.class.getName(), product.getID());
            replaceFieldMap = new HashMap<String, String>();
            if (custumObjresult != null && custumObjresult.getEntityList().size() > 0) {
                AccProductCustomData jeDetailCustom = (AccProductCustomData) custumObjresult.getEntityList().get(0);
                if (jeDetailCustom != null) {
                    AccountingManager.setCustomColumnValues(jeDetailCustom, FieldMap, replaceFieldMap, variableMap);
                    JSONObject params = new JSONObject();
                    params.put("isExport", true);
                    accountingCommonfieldDataManage.addCustomData(variableMap, customFieldMap, customDateFieldMap, obj, params);
                }
            }
            jArr.put(obj);
        }
        return jArr;
    }
    
    public ModelAndView getProductsForCombo(HttpServletRequest request, HttpServletResponse response) {
            JSONObject jobj = new JSONObject();
        boolean issuccess = false;
        String msg = "";
        try {
            HashMap<String, Object> requestParams = productHandler.getProductRequestMap(request);
//            System.out.println("Start Time" + new Date());
            String venid = request.getParameter("customerid");
            String iscustomercategoryfilter = request.getParameter("iscustomercategoryfilter");
            if(!StringUtil.isNullOrEmpty(request.getParameter("moduleid"))){
                requestParams.put("moduleid", (String) request.getParameter("moduleid"));
            }  
            if(!StringUtil.isNullOrEmpty(request.getParameter("ismultiselectProductids"))){
                requestParams.put("ismultiselectProductids", (String) request.getParameter("ismultiselectProductids"));
            }
             if(!StringUtil.isNullOrEmpty(request.getParameter("selectedProductIds"))){
                requestParams.put("selectedProductIds", (String) request.getParameter("selectedProductIds"));
            }
            
            KwlReturnObject companyPrefObj = accCompanyPreferencesObj.getCompanyPreferences(requestParams);
            
            
            if(companyPrefObj!=null && companyPrefObj.getEntityList()!= null && companyPrefObj.getEntityList().size() >0 && companyPrefObj.getEntityList().get(0)!=null){
                CompanyAccountPreferences prefObj = (CompanyAccountPreferences) companyPrefObj.getEntityList().get(0);
              requestParams.put("productsortingflag", prefObj.getProductSortingFlag());
            }
            
            if(!StringUtil.isNullOrEmpty(iscustomercategoryfilter) && !StringUtil.isNullOrEmpty(venid)){
                requestParams.put("iscustomercategoryfilter", iscustomercategoryfilter);
                Customer cust = (Customer) kwlCommonTablesDAOObj.getClassObject(Customer.class.getName(), venid);
                if(cust!=null) {
                    KwlReturnObject result = accVendorCustomerProductDAOobj.getCustomerCategoryIDs(venid);
                    List<CustomerCategoryMapping> list = result.getEntityList();
                    if(list.size()>0) {
                        requestParams.put("customervendorcategory", list.get(0).getCustomerCategory().getID());
                    }
                }
            } 
            /**
             * This Function will use when Users Visibility Feature is Enable
             * Append user condition while querying data
             */

            ExtraCompanyPreferences extraPref = (ExtraCompanyPreferences) kwlCommonTablesDAOObj.getClassObject("com.krawler.common.admin.ExtraCompanyPreferences", sessionHandlerImpl.getCompanyid(request));
            if (extraPref != null && extraPref.isUsersVisibilityFlow()) {
                /**
                 * if Users visibility enable
                 */
                KwlReturnObject object = accountingHandlerDAOobj.getObject(User.class.getName(), sessionHandlerImpl.getUserid(request));
                User user = object.getEntityList().size() > 0 ? (User) object.getEntityList().get(0) : null;
                if (!AccountingManager.isCompanyAdmin(user)) {
                    /**
                     *  if Users visibility enable and current user is not admin
                     */
                    Map<String, Object> reqMap = new HashMap();
                    requestParams.put("isUserVisibilityFlow", true);
                    reqMap.put("companyid", sessionHandlerImpl.getCompanyid(request));
                    reqMap.put("userid", sessionHandlerImpl.getUserid(request));
                    reqMap.put("jointable", "pcd");
                    reqMap.put("moduleid", Constants.Acc_Product_Master_ModuleId);
                    String custcondition = fieldManagerDAOobj.appendUsersCondition(reqMap);
                    if (!StringUtil.isNullOrEmpty(custcondition)) {
                        /**
                         * If mapping found with dimension
                         */
                        String usercondition = " and (" + custcondition + ")";
                        requestParams.put("appendusercondtion", usercondition);
                    } else {
                        /**
                         * If no Mapping found for current ser then return
                         * function call
                         */
                        jobj.put("data", new com.krawler.utils.json.JSONArray());
                        jobj.put("totalCount", 0);
                        jobj.put("success", true);
                        jobj.put("msg", "");
                        return new ModelAndView("jsonView", "model", jobj.toString());
                    }
                }
            }
            requestParams.put(Constants.PRODUCT_SEARCH_FLAG, extraPref != null ? extraPref.getProductSearchingFlag() : Constants.PRODUCT_SEARCH_ANYWHERE);
            
            boolean isDifferentUOMConversion = false;
            if (extraPref != null) {
                JSONObject columnPrefJSON = !StringUtil.isNullOrEmpty(extraPref.getColumnPref()) ? new JSONObject(extraPref.getColumnPref()) : new JSONObject();
                isDifferentUOMConversion = columnPrefJSON.optBoolean("differentUOM", false);
            }
            if(isDifferentUOMConversion && !StringUtil.isNullOrEmpty(request.getParameter("selectedProductIds")) && !StringUtil.isNullOrEmpty(request.getParameter("ismultiselectProductids"))){
                requestParams.put("selectedProductIds", request.getParameter("selectedProductIds"));
                requestParams.put("ismultiselectProductids", request.getParameter("ismultiselectProductids"));
            }
            KwlReturnObject result = accProductObj.getProductsForCombo(requestParams);
            List list = result.getEntityList();
            KwlReturnObject result1, result2 = null;            
            JSONArray vendorjarray = new JSONArray();
            JSONArray DataJArr = getProductsJsonForCombo(request, list);
            String ss = "";
            if (!StringUtil.isNullOrEmpty(venid)) {//for vendor side
                result1 = accVendorCustomerProductDAOobj.getProductsByVendor(venid, ss, null);
                List<VendorProductMapping> listvendorproducts = result1.getEntityList();
                if (listvendorproducts.size() > 0) {
                    for (VendorProductMapping VendorProductObj : listvendorproducts) {
                        String productid = VendorProductObj.getProducts().getID();
                        //First comparing the product present in DataArrray i.e.Total Product List
                        if (listvendorproducts.size() > 0) {
                            for (int cnt = 0; cnt < DataJArr.length(); cnt++) {
                                String prodid = DataJArr.getJSONObject(cnt).getString("productid");
                                if (productid.equals(prodid)) {
                                    vendorjarray.put(DataJArr.getJSONObject(cnt));
                                }
                            }
                        }
                    }
                    //to remove the duplicates from DataArray
                    result2 = accVendorCustomerProductDAOobj.getProductsVendorabsence(requestParams, listvendorproducts);
                } else if (!StringUtil.isNullOrEmpty(venid)) {//for customer side
                    if (result1.getEntityList().isEmpty()) {
                        result1 = accVendorCustomerProductDAOobj.getProductsByCustomer(venid, ss, null);
                        List<CustomerProductMapping> listcustomerproducts = result1.getEntityList();
                        if (listcustomerproducts.size() > 0) {
                            for (CustomerProductMapping CustomerProductObj : listcustomerproducts) {
                                String productid = CustomerProductObj.getProducts().getID();
                                //First comparing the product present in DataArrray i.e.Total Product List
                                if (listcustomerproducts.size() > 0) {
                                    for (int cnt = 0; cnt < DataJArr.length(); cnt++) {
                                        String prodid = DataJArr.getJSONObject(cnt).getString("productid");
                                        if (productid.equals(prodid)) {
                                            vendorjarray.put(DataJArr.getJSONObject(cnt));
                                        }
                                    }
                                }
                            }
                            //to remove the duplicates from DataArray
                            result2 = accVendorCustomerProductDAOobj.getProductsCustomerabsence(requestParams, listcustomerproducts);
                        }
                    }
                }
                if (result1.getEntityList().size() > 0) {
                    JSONObject objreturn = getProductDetailJson(request, result2, result1);
                    JSONArray objARRAY = objreturn.getJSONArray("objreturn");
                    for (int jcount = 0; jcount < objARRAY.length(); jcount++) {
                        vendorjarray.put(objARRAY.getJSONObject(jcount));
                    }
                } else {//other than vendor & customer side
                    vendorjarray = DataJArr;
                }
            } else {
                vendorjarray = DataJArr;
            }//venid
            jobj.put("data", vendorjarray);
            jobj.put("totalCount", result.getRecordTotalCount());
            issuccess = true;
//            System.out.println("End Time" + new Date());
        } catch (SessionExpiredException ex) {
            msg = ex.getMessage();
            Logger.getLogger(accProductController.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ServiceException ex) {
            msg = ex.getMessage();
            Logger.getLogger(accProductController.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            msg = ""+ex.getMessage();
            Logger.getLogger(accProductController.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                jobj.put("success", issuccess);
                jobj.put("msg", msg);
            } catch (JSONException ex) {
                Logger.getLogger(accProductController.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return new ModelAndView("jsonView", "model", jobj.toString());
    }
    
    //ERP-8199 : Product selection grid window
    public ModelAndView getProductsForSelectionGrid(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        boolean issuccess = false;
        String msg = "";
        try {
            HashMap<String, Object> requestParams = productHandler.getProductRequestMap(request);
            System.out.println("Start Time" + new Date());
          
            if(!StringUtil.isNullOrEmpty(request.getParameter("moduleid"))){
                requestParams.put("moduleid", (String) request.getParameter("moduleid"));
            }            
            if(!StringUtil.isNullOrEmpty(request.getParameter("type"))){  //ERP-11098 [SJ]
                requestParams.put("type", (String) request.getParameter("type"));
            }   
            KwlReturnObject companyPrefObj = accCompanyPreferencesObj.getCompanyPreferences(requestParams);
            CompanyAccountPreferences prefObj = (CompanyAccountPreferences) companyPrefObj.getEntityList().get(0);
            
            if(prefObj!=null){
             requestParams.put("productsortingflag", prefObj.getProductSortingFlag());
            }
            String start = request.getParameter("start");
            String limit = request.getParameter("limit");
            if ( !StringUtil.isNullOrEmpty(start) ) {
                requestParams.put("start",  start);
            }
            if ( !StringUtil.isNullOrEmpty(limit) ) {
                requestParams.put("limit",  limit);
            }
            if ( !StringUtil.isNullOrEmpty(request.getParameter("categoryid")) ) {
                requestParams.put("categoryid", request.getParameter("categoryid"));
            }
            if ( !StringUtil.isNullOrEmpty(request.getParameter("isStoreLocationEnable")) ) {
                requestParams.put("isStoreLocationEnable", request.getParameter("isStoreLocationEnable"));
            }
            /**
             * This Function will use when Users Visibility Feature is Enable
             * Append user condition while querying data
             */
            ExtraCompanyPreferences extraPref = (ExtraCompanyPreferences) kwlCommonTablesDAOObj.getClassObject("com.krawler.common.admin.ExtraCompanyPreferences", sessionHandlerImpl.getCompanyid(request));
            if (extraPref != null && extraPref.isUsersVisibilityFlow()) {
                KwlReturnObject object = accountingHandlerDAOobj.getObject(User.class.getName(), sessionHandlerImpl.getUserid(request));
                User user = object.getEntityList().size() > 0 ? (User) object.getEntityList().get(0) : null;
                if (!AccountingManager.isCompanyAdmin(user)) {
                    /**
                     * if Users visibility enable and current user is not admin
                     */
                    Map<String, Object> reqMap = new HashMap();
                    requestParams.put("isUserVisibilityFlow", true);
                    reqMap.put("companyid", sessionHandlerImpl.getCompanyid(request));
                    reqMap.put("userid", sessionHandlerImpl.getUserid(request));
                    reqMap.put("jointable", "pcd");
                    reqMap.put("moduleid", Constants.Acc_Product_Master_ModuleId);
                    String custcondition = fieldManagerDAOobj.appendUsersCondition(reqMap);
                    if (!StringUtil.isNullOrEmpty(custcondition)) {
                        /**
                         * If mapping found with dimension
                         */
                        String usercondition = " and (" + custcondition + ")";
                        requestParams.put("appendusercondtion", usercondition);
                    } else {
                        /**
                         * If no Mapping found for current ser then return
                         * function call
                         */
                        jobj.put("data", new com.krawler.utils.json.JSONArray());
                        jobj.put("totalCount", 0);
                        jobj.put("success", true);
                        jobj.put("msg", "");
                        return new ModelAndView("jsonView", "model", jobj.toString());
                    }
                }
            }
            KwlReturnObject result = accProductObj.getProductsForSelectionGrid(requestParams);
            List list = result.getEntityList();
            
            JSONArray DataJArr = getProductsJsonForProductSelectionGrid(request, list);
            
            jobj.put("data", DataJArr);
            jobj.put("totalCount", result.getRecordTotalCount());
            issuccess = true;
            System.out.println("End Time" + new Date());
        } catch (SessionExpiredException ex) {
            msg = ex.getMessage();
            Logger.getLogger(accProductController.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ServiceException ex) {
            msg = ex.getMessage();
            Logger.getLogger(accProductController.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            msg = ""+ex.getMessage();
            Logger.getLogger(accProductController.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                jobj.put("success", issuccess);
                jobj.put("msg", msg);
            } catch (JSONException ex) {
                Logger.getLogger(accProductController.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return new ModelAndView("jsonView", "model", jobj.toString());
    }
    public ModelAndView getUserMappedProducts(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        boolean issuccess = false;
        String msg = "";
        try {
            HashMap<String, Object> requestParams = productHandler.getProductRequestMap(request);
           
            if(!StringUtil.isNullOrEmpty(request.getParameter("moduleid"))){
                requestParams.put("moduleid", (String) request.getParameter("moduleid"));
            }            
            if(!StringUtil.isNullOrEmpty(request.getParameter("isCustomer"))){
                requestParams.put("isCustomer",request.getParameter("isCustomer"));
            }      
            KwlReturnObject result = accProductObj.getUserMappedProducts(requestParams);
             List list = result.getEntityList();
            JSONArray DataJArr = getMappedProductsJsonForCombo(request, list);
            jobj.put("data", DataJArr);
            jobj.put("totalCount", result.getRecordTotalCount());
            issuccess = true;
          
        } catch (SessionExpiredException ex) {
            msg = ex.getMessage();
            Logger.getLogger(accProductController.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ServiceException ex) {
            msg = ex.getMessage();
            Logger.getLogger(accProductController.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            msg = ""+ex.getMessage();
            Logger.getLogger(accProductController.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                jobj.put("success", issuccess);
                jobj.put("msg", msg);
            } catch (JSONException ex) {
                Logger.getLogger(accProductController.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return new ModelAndView("jsonView", "model", jobj.toString());
    }
    
     private void saveProductInChildCompanies(HttpServletRequest request, boolean isEdit, Map<String, Object> parentDataMap, String parentCompanyid, String childCompanyID) throws DataInvalidateException {
        /*
         fetchColumn - column whose value is fetched from database
         dataColumn - column on which we apply condition
         */
        try {
            HashMap<String, Object> FinalDataMap = new HashMap<String, Object>();
            HashMap<String, Object> requestParams = new HashMap<String, Object>();
            List list = null;
            //********************default fields processing*********************************************
            int subModuleFlag = 0;
            //Replaced the multiple arguments of getModuleColumnConfig() with single HashMap object
            HashMap<String, Object> params = new HashMap<String, Object> ();
            params.put("moduleId", String.valueOf(Constants.Acc_Product_Master_ModuleId));
            params.put("companyid", childCompanyID);
            params.put("isdocumentimport", "F");
            params.put("subModuleFlag", new Integer(subModuleFlag));
            JSONArray defaultColumnConfigJarray = importHandler.getModuleColumnConfig(params);
            for (int i = 0; i < defaultColumnConfigJarray.length(); i++) {

                JSONObject ColumnConfigJObj = defaultColumnConfigJarray.getJSONObject(i);
                String formfieldname = ColumnConfigJObj.getString("formfieldname");
                if (!StringUtil.isNullOrEmpty(formfieldname)) {
                    if (parentDataMap.containsKey(formfieldname)) {
                        String validateType = ColumnConfigJObj.has("validatetype") ? ColumnConfigJObj.getString("validatetype") : "";
                        Object value = parentDataMap.get(formfieldname);
                        if (validateType.equals("ref")) {
                            String data = value.toString();
                            if (!StringUtil.isNullOrEmpty(data)) {
                                try {
                                    String table = ColumnConfigJObj.getString("refModule");
                                    String fetchColumn = ColumnConfigJObj.getString("refDataColumn");
                                    String dataColumn = ColumnConfigJObj.getString("refFetchColumn");
                                    //get id from name .example - select name from account where id=?
                                    requestParams.put("companyid", parentCompanyid);
                                    list = importHandler.getRefData(requestParams, table, dataColumn, fetchColumn, "", data);
                                    data = (String) list.get(0);
                                    //get id from name .example - select id from account where name=?
                                    requestParams.put("companyid", childCompanyID);
                                    list = importHandler.getRefData(requestParams, table, fetchColumn, dataColumn, "", data);
                                    data = (String) list.get(0);
                                    if (!StringUtil.isNullOrEmpty(data)) {
                                        FinalDataMap.put(formfieldname, data);
                                    }
                                } catch (Exception ex) {
                                    throw new DataInvalidateException("Combo value not found in child company.");
                                }
                            }
                        } else if (validateType.equalsIgnoreCase("date")) {
                            String data = value.toString();
                            if (!StringUtil.isNullOrEmpty(data)) {
                                Date date = request.getParameter("creationDate") == null ? new Date() : authHandler.getDateOnlyFormat().parse(request.getParameter("creationDate"));
                                if (date == null) {
                                    date = new Date();
                                }
                                FinalDataMap.put(formfieldname, date);
                            }
                        } else if (validateType.equalsIgnoreCase("integer")) {
                            String data = value.toString();
                            int numberValue = 0;
                            if (!StringUtil.isNullOrEmpty(data)) {
                                numberValue = StringUtil.isNullOrEmpty(data) ? 0 : Integer.parseInt(data);
                                FinalDataMap.put(formfieldname, numberValue);
                            }
                        } else if (validateType.equalsIgnoreCase("double")) {
                            String data = value.toString();
                            double numberValue = 0.0;
                            if (!StringUtil.isNullOrEmpty(data)) {
                                numberValue = StringUtil.isNullOrEmpty(data) ? 0 : Double.parseDouble(data);
                                FinalDataMap.put(formfieldname, numberValue);
                            }
                        } else if (validateType.equalsIgnoreCase("boolean")) {
                            String data = value.toString();
                            Object vDataValue = false;
                            if (!StringUtil.isNullOrEmpty(data)) {
                                if (data.equalsIgnoreCase("true") || data.equalsIgnoreCase("1") || data.equalsIgnoreCase("T") || data.equalsIgnoreCase("YES")) {
                                    vDataValue = true;
                                } else if (data.equalsIgnoreCase("false") || data.equalsIgnoreCase("0") || data.equalsIgnoreCase("F") || data.equalsIgnoreCase("NO")) {
                                    vDataValue = false;
                                }
                            } else {
                                vDataValue = null;
                            }
                            FinalDataMap.put(formfieldname, vDataValue);
                        } else {
                            String dataVal = value.toString();
                            if (!StringUtil.isNullOrEmpty(dataVal)) {
                                FinalDataMap.put(formfieldname, value);
                            }
                        }

                    }

                }
            }
            //********************default fields processing Ends*********************************************

            //**************Field which cannot be handled through generic code******************************
            ValuationMethod valMethod = ValuationMethod.STANDARD;
            if (parentDataMap.containsKey("valuationmethod") &&  !StringUtil.isNullOrEmpty(parentDataMap.get("valuationmethod").toString())) {

                int valuationMethod = Integer.parseInt((String) parentDataMap.get("valuationmethod"));
                for (ValuationMethod st : ValuationMethod.values()) {
                    if (st.ordinal() == valuationMethod) {
                        valMethod = st;
                        break;
                    }
                }

            }
            FinalDataMap.put("valuationmethod", valMethod);

            ItemReusability ir = null;
            if (parentDataMap.containsKey("isreusable") && !StringUtil.isNullOrEmpty(parentDataMap.get("isreusable").toString())) {
                int itemReusability = Integer.parseInt((String) parentDataMap.get("isreusable"));
                for (ItemReusability st : ItemReusability.values()) {
                    if (st.ordinal() == itemReusability) {
                        ir = st;
                        break;
                    }
                }

                FinalDataMap.put("isreusable", ir);
            }

            if (parentDataMap.containsKey("licensetype") && !StringUtil.isNullOrEmpty(parentDataMap.get("licensetype").toString())) {
                LicenseType lt = LicenseType.valueOf((String) parentDataMap.get("licensetype"));
                FinalDataMap.put("licensetype", lt);
            }
           //********************************this fields are added here bacause they have missing default header entries*****************
            if (parentDataMap.containsKey("catalogNo") && !StringUtil.isNullOrEmpty(parentDataMap.get("catalogNo").toString())) {
                FinalDataMap.put("catalogNo", request.getParameter("catalogNo"));
            }
            if (parentDataMap.containsKey("itempurchaseheight") && !StringUtil.isNullOrEmpty(parentDataMap.get("itempurchaseheight").toString())) {
                FinalDataMap.put("itempurchaseheight", Double.parseDouble(request.getParameter("itempurchaseheight")));
            }

            if (parentDataMap.containsKey("itempurchaselength") && !StringUtil.isNullOrEmpty(parentDataMap.get("itempurchaselength").toString())) {
                FinalDataMap.put("itempurchaselength", Double.parseDouble(request.getParameter("itempurchaselength")));
            }
            if (parentDataMap.containsKey("itempurchasevolume") && !StringUtil.isNullOrEmpty(parentDataMap.get("itempurchasevolume").toString())) {
                FinalDataMap.put("itempurchasevolume", Double.parseDouble(request.getParameter("itempurchasevolume")));
            }

            if (parentDataMap.containsKey("itemsaleswidth") && !StringUtil.isNullOrEmpty(parentDataMap.get("itemsaleswidth").toString())) {
                FinalDataMap.put("itemsaleswidth", Double.parseDouble(request.getParameter("itemsaleswidth")));
            }

            if (parentDataMap.containsKey("itemsaleslength") && !StringUtil.isNullOrEmpty(parentDataMap.get("itemsaleslength").toString())) {
                FinalDataMap.put("itemsaleslength", Double.parseDouble(request.getParameter("itemsaleslength")));
            }

            if (parentDataMap.containsKey("itemheight") && !StringUtil.isNullOrEmpty(parentDataMap.get("itemheight").toString())) {
                FinalDataMap.put("itemheight", Double.parseDouble(request.getParameter("itemheight")));
            }
            if (parentDataMap.containsKey("itemlength") && !StringUtil.isNullOrEmpty(parentDataMap.get("itemlength").toString())) {
                FinalDataMap.put("itemlength", Double.parseDouble(request.getParameter("itemlength")));
            }
            
            //****************************Add/Edit child compny's customer************************************
            String parentCompanyProductID = parentDataMap.containsKey("parentCompanyProductID") ? (String) parentDataMap.get("parentCompanyProductID") : "";
            String entryNumber = parentDataMap.containsKey("productid") ? (String) parentDataMap.get("productid") : "";
            FinalDataMap.put("productid", entryNumber);
            FinalDataMap.put("parentCompanyProductID", parentCompanyProductID);
            FinalDataMap.put("companyid", childCompanyID);
            KwlReturnObject result = null;
            String childProductID = "";
            Product product = null;
            try {
                if (!isEdit) {
                    result = accProductObj.addProduct(FinalDataMap);
                } else {

                    String childproductid = parentDataMap.containsKey("childproductid") ? (String) parentDataMap.get("childproductid") : "";
                    FinalDataMap.put("id", childproductid);
                    result = accProductObj.updateProduct(FinalDataMap);
                }
                product = (Product) result.getEntityList().get(0);
                childProductID = product.getID();
            } catch (Exception ex) {
                throw new DataInvalidateException("Product could not be saved.");
            }

            //*******************Save Custom Fields Data****************************
            try {
                JSONArray jarray = parentDataMap.containsKey("customfield") ? new JSONArray(parentDataMap.get("customfield").toString()) : new JSONArray();
                Map<String, Object> customColumnConfigMap = importHandler.getCustomModuleColumnConfigForSharingMastersData(String.valueOf(Constants.Acc_Product_Master_ModuleId), childCompanyID, false);

                JSONArray childFinalCustomJarray = new JSONArray();
                for (int i = 0; i < jarray.length(); i++) {
                    JSONObject customColumnJobj = jarray.getJSONObject(i);
                    String parentFieldValue = customColumnJobj.getString("fieldDataVal");
                    String parentFieldName = customColumnJobj.getString("fieldname");
                    String parentFieldID = customColumnJobj.getString("fieldid");
                    int parentXtype = Integer.parseInt(customColumnJobj.getString("xtype"));

                    if (customColumnConfigMap.containsKey(parentFieldName)) {
                        JSONObject childCustomConfig = (JSONObject) customColumnConfigMap.get(parentFieldName);
                        int childXtype = childCustomConfig.getInt("xtype");
                        String childFieldID = childCustomConfig.getString("id");
                        if (parentXtype == childXtype) {
                            JSONObject cjobj = new JSONObject();

                            cjobj.put("fieldid", childCustomConfig.getString("id"));
                            cjobj.put("refcolumn_name", "Col" + childCustomConfig.get("refcolnum"));
                            cjobj.put("fieldname", "Custom_" + childCustomConfig.get("columnName"));
                            cjobj.put("xtype", childCustomConfig.getString("xtype"));

                            cjobj.put("Custom_" + childCustomConfig.get("columnName"), "Col" + childCustomConfig.get("colnum"));

                            if (childXtype == 4 || childXtype == 7 || childXtype == 12) {
                                //combo ,multiselect combo,checklist.
                                try {
                                    if (parentFieldValue != null) {
                                        String[] fieldComboDataArr = parentFieldValue.toString().split(",");
                                        String fieldComboDataStr = "";

                                        for (int dataArrIndex = 0; dataArrIndex < fieldComboDataArr.length; dataArrIndex++) {
                                            String value = fieldComboDataArr[dataArrIndex];
                                            if (!StringUtil.isNullOrEmpty(value)) {

                                                String CustomFetchColumn = "value";
                                                list = importHandler.getCustomComboValue(value, parentFieldID, CustomFetchColumn);

                                                value = list.get(0).toString();
                                                CustomFetchColumn = "id";
                                                list = importHandler.getCustomComboID(value, childFieldID, CustomFetchColumn);
                                                if (list != null && !list.isEmpty()) {
                                                    fieldComboDataStr += list.get(0).toString() + ",";
                                                }
                                            }
                                        }

                                        if (!StringUtil.isNullOrEmpty(fieldComboDataStr)) {
                                            String comboids = fieldComboDataStr.substring(0, fieldComboDataStr.length() - 1);
                                            cjobj.put("fieldDataVal", comboids);
                                            cjobj.put("Col" + childCustomConfig.get("colnum"), comboids);
                                        } else {
                                            cjobj.put("fieldDataVal", "");
                                            cjobj.put("Col" + childCustomConfig.get("colnum"), "");
                                        }
                                    } else {
                                        cjobj.put("fieldDataVal", "");
                                        cjobj.put("Col" + childCustomConfig.get("colnum"), "");
                                    }
                                } catch (Exception ex) {
                                    throw new DataInvalidateException("Combo value not found in child company.");
                                }
                            } else {
                                cjobj.put("fieldDataVal", parentFieldValue);
                                cjobj.put("Col" + childCustomConfig.get("colnum"), parentFieldValue);
                            }

                            childFinalCustomJarray.put(cjobj);
                        }

                    }

                }

                if (childFinalCustomJarray.length() > 0) {
                    HashMap<String, Object> customrequestParams = new HashMap<String, Object>();
                    customrequestParams.put("customarray", childFinalCustomJarray);
                    customrequestParams.put("modulename", Constants.Acc_Product_modulename);
                    customrequestParams.put("moduleprimarykey", Constants.Acc_Productid);
                    customrequestParams.put("modulerecid", product.getID());
                    customrequestParams.put("moduleid", Constants.Acc_Product_Master_ModuleId);
                    customrequestParams.put("companyid", childCompanyID);
                    requestParams.put("id", product.getID());
                    customrequestParams.put("customdataclasspath", Constants.Acc_Product_custom_data_classpath);
                    KwlReturnObject customDataresult = fieldDataManagercntrl.setCustomData(customrequestParams);
                    if (customDataresult != null && customDataresult.getEntityList().size() > 0) {
                        requestParams.put("accproductcustomdataref", product.getID());
                        KwlReturnObject productresult = accProductObj.updateProduct(requestParams);
                    }
                    HashMap<String, Object> customHistoryParams = new HashMap<String, Object>();
                    customHistoryParams.put("productId", product.getID());
                    customHistoryParams.put("customarray", childFinalCustomJarray);
                    accProductModuleService.maintainCustomFieldHistoryForProduct(request, customHistoryParams);
                }
                //**************************Save Custom Fields Data End****************************
            } catch (Exception ex) {
                throw new DataInvalidateException("Error ocurred while saving products custom data " + ex);
            }
            //****************************Add/Edit child compny's customer************************************
        } catch (Exception ex) {
            throw new DataInvalidateException("Error ocurred while saving Product " + ex);
        }
    }

    public ModelAndView saveProduct(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj=new JSONObject();
        String msg="";
        boolean issuccess = false;
        boolean isDuplicateNoExe = false;
        boolean isAccountingExe = false;
        boolean isGeneralExe = false;
        boolean isFixedAsset = false;
        boolean isFromProductView = false;
        boolean isTaxDeactivated = false;
        String entryNumber="";
        String channelName="";
        DefaultTransactionDefinition def = new DefaultTransactionDefinition();
        def.setName("Product_Tx");
        def.setPropagationBehavior(TransactionDefinition.PROPAGATION_REQUIRED);

        TransactionStatus status = null;//txnManager.getTransaction(def);
        entryNumber = request.getParameter("pid");
        String companyid = "";
        try {
            companyid = sessionHandlerImpl.getCompanyid(request);
            String productid = request.getParameter("productid");
            boolean  isEdit = !StringUtil.isNullOrEmpty(request.getParameter("productid")) ? true : false ;
            String sequenceformat=request.getParameter("sequenceformat");
            KwlReturnObject pcount = null;
            
            if (!StringUtil.isNullOrEmpty(request.getParameter("isFixedAsset"))) {
                isFixedAsset = Boolean.parseBoolean(request.getParameter("isFixedAsset"));
            }
            if (!StringUtil.isNullOrEmpty(request.getParameter("isFromProductView"))) {
                isFromProductView = Boolean.parseBoolean(request.getParameter("isFromProductView"));
            }
            //Checks duplicate number in edit case
            if (!StringUtil.isNullOrEmpty(productid) && sequenceformat.equals("NA")){
                pcount = accProductObj.checkDuplicateProductForEdit(entryNumber,companyid,productid,isFixedAsset);
                if (pcount.getEntityList().size() > 0) {
                    isDuplicateNoExe = true;
                    if (!isFixedAsset) {
                        throw new AccountingException(messageSource.getMessage("acc.product.productid", null, RequestContextUtils.getLocale(request)) + entryNumber + messageSource.getMessage("acc.field.alreadyexists.", null, RequestContextUtils.getLocale(request)));
                    } else {
                        throw new AccountingException(messageSource.getMessage("acc.fixed.asset.groupID", null, RequestContextUtils.getLocale(request)) + entryNumber + messageSource.getMessage("acc.field.alreadyexists.", null, RequestContextUtils.getLocale(request)));
                    }
                }
            }else if(sequenceformat.equals("NA")){//Checks duplicate number in add case
                pcount = accProductObj.getProductByProdID(entryNumber, companyid, isFixedAsset);
                if (pcount.getEntityList().size() > 0) {
                    isDuplicateNoExe = true;
                    if (!isFixedAsset) {
                        throw new AccountingException(messageSource.getMessage("acc.product.productid", null, RequestContextUtils.getLocale(request)) + entryNumber + messageSource.getMessage("acc.field.alreadyexists.", null, RequestContextUtils.getLocale(request)));
                    } else {
                        throw new AccountingException(messageSource.getMessage("acc.fixed.asset.groupID", null, RequestContextUtils.getLocale(request)) + entryNumber + messageSource.getMessage("acc.field.alreadyexists.", null, RequestContextUtils.getLocale(request)));
                    }
                }
            }
            if (!isEdit) {
                //Check Deactivate Tax in New Transaction.
                if ((!StringUtil.isNullOrEmpty(request.getParameter("purchasetaxId")) && !accAccountDAOobj.isTaxActivated(companyid, request.getParameter("purchasetaxId"))) || (!StringUtil.isNullOrEmpty(request.getParameter("salestaxId")) && !accAccountDAOobj.isTaxActivated(companyid, request.getParameter("salestaxId")))) {
                    isTaxDeactivated = true;
                    throw ServiceException.FAILURE(messageSource.getMessage("acc.tax.deactivated.tax.saveAlert", null, RequestContextUtils.getLocale(request)), "", false);
                }
            }
                
            //Checks duplicate number in simultaneous transactions
            synchronized (this) {
                status = txnManager.getTransaction(def);
                if (sequenceformat.equals("NA")) {
                    //Checks entry in temporary table
                    KwlReturnObject resultInv=null;
                    if (isFixedAsset) {
                        resultInv = accCommonTablesDAO.getTransactionInTemp(entryNumber, companyid, Constants.Acc_FixedAssets_AssetsGroups_ModuleId);
                    } else {
                        resultInv = accCommonTablesDAO.getTransactionInTemp(entryNumber, companyid, Constants.Acc_Product_Master_ModuleId);
                    }
                    if (resultInv.getRecordTotalCount() > 0) {
                        isDuplicateNoExe = true;
                        if (isFixedAsset) {
                            throw new AccountingException(messageSource.getMessage("acc.fixed.asset.selectedgroupID", null, RequestContextUtils.getLocale(request)) + entryNumber + messageSource.getMessage("acc.field.alreadyinprocess.", null, RequestContextUtils.getLocale(request)));
                        } else {
                            throw new AccountingException(messageSource.getMessage("acc.product.selectedproductid", null, RequestContextUtils.getLocale(request)) + entryNumber + messageSource.getMessage("acc.field.alreadyinprocess.", null, RequestContextUtils.getLocale(request)));
                        }
                    } else {
                        //Add entry in temporary table
                        if (isFixedAsset) {
                            accCommonTablesDAO.insertTransactionInTemp(entryNumber, companyid, Constants.Acc_FixedAssets_AssetsGroups_ModuleId);
                        } else {
                            accCommonTablesDAO.insertTransactionInTemp(entryNumber, companyid, Constants.Acc_Product_Master_ModuleId);
                        }
                    }
                }
                txnManager.commit(status);
            }
            status = txnManager.getTransaction(def);
            KwlReturnObject productresult = saveProduct(request);
            Product product = (Product) productresult.getEntityList().get(0);
            jobj.put("productID", product.getID());
            ExtraCompanyPreferences extraCompanyPreferences = null; //Take object declaration outside the if condition
            /*
            Sync product to pm on creation when mrp module is activated through company preferences.
            */
             KwlReturnObject extraCompanyPrefResult = accountingHandlerDAOobj.getObject(ExtraCompanyPreferences.class.getName(), companyid);
            if (extraCompanyPrefResult.getEntityList().size() > 0) {
                extraCompanyPreferences = (ExtraCompanyPreferences) extraCompanyPrefResult.getEntityList().get(0); 
                if (extraCompanyPreferences!=null) {
                    boolean isMRPActivated = extraCompanyPreferences.isActivateMRPModule();
                    if (isMRPActivated) {
                        JSONObject resObj = SyncProductToPMOnCreation(product);
                        if(resObj.has("success") && resObj.getBoolean("success")){  //ERP-40195 - If MRP activated and Product is not synced with PM then we will not save that product in ERP too.
                            auditTrailObj.insertAuditLog("Product synced to PM", "User " + sessionHandlerImpl.getUserFullName(request) + " has  created/updated product and  synced it into PM  "+product.getName() , request, product.getID());
                        } else {
                            throw new AccountingException(messageSource.getMessage("acc.mrp.pm.productsync.failedmsg", null, RequestContextUtils.getLocale(request))); //MRP is activated for this subdomain and PM Application is not working now. So, product can not be created. Please try again later.
                        }                        
                    }
                }
            }
            issuccess = true;
            txnManager.commit(status);
            status=null;
            //if(!StringUtil.isNullOrEmpty(request.getParameter("countryid")) && request.getParameter("countryid").equals("105")){//Check for  "Compliance India"
            /* isFixedAsset= This check is added because of term related code is not implemented for asset module.*/
            if(!isFixedAsset && extraCompanyPreferences!=null && extraCompanyPreferences.getLineLevelTermFlag()==1){
                status = txnManager.getTransaction(def);     
                saveProductTerms(request,product.getID());// Method for mapping the product to terms for "Compliance India"
                txnManager.commit(status);
                status=null;
            }
            TransactionStatus AutoNoStatus = null;
            try {
                synchronized (this) {
                    DefaultTransactionDefinition def1 = new DefaultTransactionDefinition();
                    def1.setName("AutoNum_Tx");
                    def1.setPropagationBehavior(TransactionDefinition.PROPAGATION_REQUIRES_NEW);
                    AutoNoStatus = txnManager.getTransaction(def1);
                    if (StringUtil.isNullOrEmpty(productid) && (!StringUtil.isNullOrEmpty(sequenceformat) && !sequenceformat.equals("NA"))) {
                        boolean seqformat_oldflag = false;//    old flag was used when sequence format not implemented.
                        String nextAutoNoInt = "", nextAutoNumber = "";
                        Map<String, Object> seqNumberMap = new HashMap<String, Object>();
                        if (seqformat_oldflag) {
                            nextAutoNumber = accCompanyPreferencesObj.getNextAutoNumber(companyid, StaticValues.AUTONUM_PRODUCTID, sequenceformat);
                            seqNumberMap.put(Constants.AUTO_ENTRYNUMBER, nextAutoNumber);
                        } else {
                            int from = isFixedAsset?StaticValues.AUTONUM_ASSETGROUP:StaticValues.AUTONUM_PRODUCTID;
                            seqNumberMap = accCompanyPreferencesObj.getNextAutoNumber_Modified(companyid, from, sequenceformat, seqformat_oldflag,product.getAsOfDate());
                        }
                        entryNumber= nextAutoNumber;
                        seqNumberMap.put(Constants.DOCUMENTID, product.getID());
                        seqNumberMap.put(Constants.SEQUENCEFORMATID, sequenceformat);
                        accProductObj.updateProductEntryNumber(seqNumberMap);
                    }
                    /*if (StringUtil.isNullOrEmpty(productid) && sequenceformat.equals("NA")){
                        KwlReturnObject count = accProductObj.getProductByProdID(entryNumber, companyid);
                        while (count.getEntityList().size() > 0) {
                            entryNumber=entryNumber+"-1";
                            count = accProductObj.getProductByProdID(entryNumber, companyid);
                        }
                        accProductObj.updateNAProductEntryNumber(product.getID(),entryNumber);
                }*/
                txnManager.commit(AutoNoStatus);    
                AutoNoStatus=null;
                    }
            } catch (Exception ex) {
                if (AutoNoStatus != null) {
                    txnManager.rollback(AutoNoStatus);
                }
                //Delete entry in temporary table
                if (isFixedAsset) {
                    accCommonTablesDAO.deleteTransactionInTemp(entryNumber, companyid, Constants.Acc_FixedAssets_AssetsGroups_ModuleId);
                } else {
                    accCommonTablesDAO.deleteTransactionInTemp(entryNumber, companyid, Constants.Acc_Product_Master_ModuleId);
                }
                
                Logger.getLogger(accProductController.class.getName()).log(Level.SEVERE, null, ex);
                }
            
            /**
             * Save or update item on AvaTax side in case of Avalara Integration
             */
            if (extraCompanyPreferences.isAvalaraIntegration()) {
                String productId = product.getID();
                accountingHandlerDAOobj.evictObj(product);//Remove current 'product' object from Hibernate session so that when we fetch product object again, we get latest record from database
                KwlReturnObject tempKwlObj = accountingHandlerDAOobj.getObject(Product.class.getName(), productId);
                product = (Product) tempKwlObj.getEntityList().get(0);
                accProductModuleService.createOrUpdateItemOnAvalaraForProduct(product, companyid, isEdit);
            }
            
                        //*****************************************Propagate Product In child companies**************************
            String auditID = "";
            boolean propagateTOChildCompaniesFalg = false;
            if (!StringUtil.isNullOrEmpty(request.getParameter("ispropagatetochildcompanyflag"))) {
                propagateTOChildCompaniesFalg = Boolean.parseBoolean(request.getParameter("ispropagatetochildcompanyflag"));
            }
            if (propagateTOChildCompaniesFalg) {
                try {
                    String parentcompanyid = companyid;
                    Map<String, Object> parentdataMap = new HashMap<>();
                    Map<String, Object> requestMap = request.getParameterMap();
                    Set set = requestMap.entrySet();
                    for (Object obj : set) {
                        Map.Entry<String, Object> entry = (Map.Entry<String, Object>) obj;
                        String[] value = (String[]) entry.getValue();
                        parentdataMap.put(entry.getKey(), value[0]);
                    }
                    String parentcompanyProductid = product.getID();
                    parentdataMap.put("parentCompanyProductID", parentcompanyProductid);
                    parentdataMap.put("productid", entryNumber);
                    List childCompaniesList = companyDetailsDAOObj.getChildCompanies(parentcompanyid);
                    String childCompanyName="";
                    if (!isEdit) {
                        auditID = AuditAction.PRODUCT_CREATION;
                        for (Object childObj : childCompaniesList) {
                            try {
                                status = txnManager.getTransaction(def);
                                Object[] childdataOBj = (Object[]) childObj;
                                String childCompanyID = (String) childdataOBj[0];
                                childCompanyName = (String) childdataOBj[1];
                                saveProductInChildCompanies(request, isEdit, parentdataMap, parentcompanyid, childCompanyID);
                                txnManager.commit(status);
                                auditTrailObj.insertAuditLog(auditID, "User " + sessionHandlerImpl.getUserFullName(request) + " has propagated(added) product " + product.getName()+" ["+product.getProductid()+"]" + " to child company " + childCompanyName, request, product.getID());
                                status=null;
                            } catch (Exception ex) {
                                txnManager.rollback(status);
                                auditTrailObj.insertAuditLog(auditID, "Product " + product.getName() +" ["+product.getProductid()+"]"+ " could not be propagated(added) to child company " + childCompanyName, request, product.getID());
                            }
                        }
                    } else {
                        auditID = AuditAction.PRODUCT_UPDATION;
                        HashMap<String, Object> requestParams = new HashMap<String, Object>();
                        requestParams.put("parentCompanyProductID", parentcompanyProductid);
                        KwlReturnObject result = accProductObj.getChildproducts(requestParams);
                        List childCompaniesProductList = result.getEntityList();
                      
                           for (Object childObj : childCompaniesProductList) {
                            try {
                                Product prod = (Product) childObj;
                                if (prod != null) {
                                    status = txnManager.getTransaction(def);
                                    String childcompanyproductid = prod.getID();
                                    String childCompanyID = prod.getCompany().getCompanyID();
                                    childCompanyName = prod.getCompany().getSubDomain();
                                    parentdataMap.put("childproductid", childcompanyproductid);
                                    saveProductInChildCompanies(request, isEdit, parentdataMap, parentcompanyid, childCompanyID);
                                    txnManager.commit(status);
                                    auditTrailObj.insertAuditLog(auditID, "User " + sessionHandlerImpl.getUserFullName(request) + " has propagated(updated) Product " + product.getName()+" ["+product.getProductid()+"]" + " to child company " + childCompanyName, request, product.getID());
                                    status=null;
                                }
                            } catch (Exception ex) {
                                txnManager.rollback(status);
                                auditTrailObj.insertAuditLog(auditID, "Product " + product.getName()+" ["+product.getProductid()+"]" + " could not be propagated(udated) to child company " + childCompanyName, request, product.getID());
                            }
                        } 
                        
                    }
                } catch (Exception ex) {
                    if (status != null) {
                        txnManager.rollback(status);
                        auditTrailObj.insertAuditLog(auditID, "Product " + product.getName()+" ["+product.getProductid()+"]" + " could not be propagated(added) to child company " + product.getCompany().getSubDomain(), request, product.getID());
                    }
                }
            }
            //*****************************************Propagate Product In child companies**************************
            
            
            if (product.isAsset()) {
                msg = messageSource.getMessage("acc.fixed.asset.save", null, RequestContextUtils.getLocale(request));
            } else {
                channelName="/ProductsDetails/gridAutoRefresh";//used for refreshing product and services grid after add/clone/edit
                msg = messageSource.getMessage("acc.prod.save", null, RequestContextUtils.getLocale(request));   //"Product/Service has been saved successfully";
            }
            status = txnManager.getTransaction(def);
            //Delete entry in temporary table
            if (isFixedAsset) {
                accCommonTablesDAO.deleteTransactionInTemp(entryNumber, companyid, Constants.Acc_FixedAssets_AssetsGroups_ModuleId);
            } else {
                accCommonTablesDAO.deleteTransactionInTemp(entryNumber, companyid, Constants.Acc_Product_Master_ModuleId);
            }
            txnManager.commit(status);
            status=null;
        } catch (SessionExpiredException ex) {
            if (status != null) {
            txnManager.rollback(status);
            }
            msg = ex.getMessage();
            isGeneralExe = true;
        } catch (AccountingException ex) {
            if (status != null) {
                txnManager.rollback(status);
            }
            isAccountingExe = true;
            msg = "" + ex.getMessage();
        } catch (Exception ex) {
            if (status != null) {
            txnManager.rollback(status);
            }
            isGeneralExe = true;
            msg = ""+ex.getMessage();
            Logger.getLogger(accProductController.class.getName()).log(Level.SEVERE, null, ex);
        } finally{
            try {
                if (isGeneralExe || isAccountingExe) {
                    try {
                        //Delete entry in temporary table
                        if (isFixedAsset) {
                            accCommonTablesDAO.deleteTransactionInTemp(entryNumber, companyid, Constants.Acc_FixedAssets_AssetsGroups_ModuleId);
                        } else {
                            accCommonTablesDAO.deleteTransactionInTemp(entryNumber, companyid, Constants.Acc_Product_Master_ModuleId);
                        }
                    } catch (ServiceException ex1) {
                        Logger.getLogger(accProductControllerCMN.class.getName()).log(Level.SEVERE, null, ex1);
                    }
                }
                jobj.put("success", issuccess);
                jobj.put("msg", msg);
                jobj.put("isDuplicateExe",isDuplicateNoExe);
                jobj.put("isAccountingExe",isAccountingExe);
                jobj.put("isFromProductView",isFromProductView);
                jobj.put(Constants.isTaxDeactivated,isTaxDeactivated);
                if (issuccess && !StringUtil.isNullOrEmpty(channelName)) {
                    ServerEventManager.publish(channelName, jobj.toString(), (ServletContext) this.getServletContext());
                }
            } catch (JSONException ex) {
                Logger.getLogger(accProductController.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return new ModelAndView("jsonView", "model", jobj.toString());
    }
    public JSONObject SyncProductToPMOnCreation(Product product) throws Exception {
            JSONObject resObj = new JSONObject();
        try {            

            /*
             Sync product to pm on creation when mrp module is activated through company preferences.
             */
            String companyid = product.getCompany().getCompanyID();
            JSONArray DataJArr = new JSONArray();
            JSONObject jobj = new JSONObject();

            List lst = new ArrayList();
            Object [] ObjArr=new Object[]{product};
            lst.add(ObjArr);

            DataJArr=AccProductService.getProductsJsonToSyncTOPM(lst);
            resObj = AccProductService.SyncProductsIntoPM(DataJArr, companyid);
        } catch (Exception ex) {
            throw ex;
        }
        return resObj;
    }

     public KwlReturnObject saveProduct(HttpServletRequest request) throws ServiceException, AccountingException, SessionExpiredException, ParseException, UnsupportedEncodingException {
        KwlReturnObject productresult;
        try {
            String auditMsg = "added";
            boolean isInventoryIntegrationOn=false;
            boolean isDescriptionChanged=false;
            boolean isProductNameChanged=false;
            boolean isWastageApplicable = (!StringUtil.isNullOrEmpty(request.getParameter("isWastageApplicable"))) ? Boolean.parseBoolean(request.getParameter("isWastageApplicable")) : false;
            boolean isReusabilityChanged=false;
            String auditReusabilityMsg="";
            String productid = request.getParameter("productid");
            String displayUoM = !StringUtil.isNullOrEmpty(request.getParameter("displayUoM")) ? request.getParameter("displayUoM") : "";
            String displayuomidold = !StringUtil.isNullOrEmpty(request.getParameter("displayUoM")) ? request.getParameter("displayUoM") : "";
            String displayuomname = "";
            String customfield =request.getParameter("customfield");
            String productName = request.getParameter("productname");
            String parentName = request.getParameter("parentname");
            String dependentType = request.getParameter("dependentType");
            String timeinterval = request.getParameter("timeinterval");
            boolean  isEdit = !StringUtil.isNullOrEmpty(request.getParameter("productid")) ? true : false ;
            double productweight = (!StringUtil.isNullOrEmpty(request.getParameter("productweight")))?Double.parseDouble(request.getParameter("productweight")):0;
            double productweightperstockuom = (!StringUtil.isNullOrEmpty(request.getParameter("productweightperstockuom")))?Double.parseDouble(request.getParameter("productweightperstockuom")):0;
            double productweightincludingpakagingperstockuom = (!StringUtil.isNullOrEmpty(request.getParameter("productweightincludingpakagingperstockuom")))?Double.parseDouble(request.getParameter("productweightincludingpakagingperstockuom")):0;
            double productVolumePerStockuom = (!StringUtil.isNullOrEmpty(request.getParameter("productvolumeperstockuom")))?Double.parseDouble(request.getParameter("productvolumeperstockuom")):0;
            double productVolumeIncludingPakagingPerStockuom = (!StringUtil.isNullOrEmpty(request.getParameter("productvolumeincludingpakagingperstockuom")))?Double.parseDouble(request.getParameter("productvolumeincludingpakagingperstockuom")):0;
            boolean isFixedAsset = false;
            if (!StringUtil.isNullOrEmpty(request.getParameter("isFixedAsset"))) {
                isFixedAsset = Boolean.parseBoolean(request.getParameter("isFixedAsset"));
            }
            String auditID = (isFixedAsset)?AuditAction.ASSET_CREATION:AuditAction.PRODUCT_CREATION;
            String addshiplentheithqty = request.getParameter("addshiplentheithqty");
            String noofqty = request.getParameter("noofqty");
            String qtyUOM="";
            if(!StringUtil.isNullOrEmpty(noofqty)){
                int noofqtyint=Integer.parseInt(noofqty);
                for(int i=1;i<=noofqtyint;i++){
                    qtyUOM+=request.getParameter("qtyuom"+i);
                    if(i!=noofqtyint)
                        qtyUOM+=",";
                }
                
            }
            String companyid = sessionHandlerImpl.getCompanyid(request);
            
            KwlReturnObject extraCompanyPrefResult = accountingHandlerDAOobj.getObject(ExtraCompanyPreferences.class.getName(), companyid);
            ExtraCompanyPreferences extraCompanyPreferences = (ExtraCompanyPreferences) extraCompanyPrefResult.getEntityList().get(0);
            isInventoryIntegrationOn=extraCompanyPreferences.isActivateInventoryTab();
            
            boolean isRebuild = false;
            String supplier = request.getParameter("supplier");
            String coilcraft = request.getParameter("coilcraft");
            String interplant = request.getParameter("interplant");
            String batchDetails = request.getParameter("batchDetails");
            String sequenceformat=request.getParameter("sequenceformat");
            String entryNumber = request.getParameter("pid");
            String currencyId =request.getParameter("currencyid");
            double minOrderingQuantity = (!StringUtil.isNullOrEmpty(request.getParameter("minorderingquantity")))?Double.parseDouble(request.getParameter("minorderingquantity")):0;
            double maxOrderingQuantity = (!StringUtil.isNullOrEmpty(request.getParameter("maxorderingquantity")))?Double.parseDouble(request.getParameter("maxorderingquantity")):0;
            long createdon = System.currentTimeMillis();
            KwlReturnObject capresult = accountingHandlerDAOobj.getObject(CompanyAccountPreferences.class.getName(), companyid);
            CompanyAccountPreferences preferences = (CompanyAccountPreferences) capresult.getEntityList().get(0);
            
            Date appDate = authHandler.getSimpleDateAndTimeFormat().parse(authHandler.getConstantDateFormatter().format(new Date()));
            Date asOfDate = null;
            if(!StringUtil.isNullOrEmpty(request.getParameter("asOfDate"))) {
                asOfDate = authHandler.getDateOnlyFormat().parse(request.getParameter("asOfDate"));
            }
            /*
             * Following code was not to allow Edit of Assembly Product which we need to allow now
             */

            
//            boolean allowAssemblyProductToEdit = false;
//            if(!StringUtil.isNullOrEmpty(request.getParameter("allowAssemblyProductToEdit"))) {
//                allowAssemblyProductToEdit = Boolean.parseBoolean(request.getParameter("allowAssemblyProductToEdit"));
//            }
            HashMap<String, Object> productMap = new HashMap<String, Object>();
            String parentid = request.getParameter("parentid");
            boolean issub = request.getParameter("subproduct") != null;
            boolean syncable = Boolean.parseBoolean(request.getParameter("syncable"));
            boolean multiuom = Boolean.parseBoolean(request.getParameter("multiuom"));
            boolean countable = Boolean.parseBoolean(request.getParameter("countable"));
            boolean blockLooseSell = Boolean.parseBoolean(request.getParameter("blockLooseSell"));
            boolean autoAssembly = false;
            if (!StringUtil.isNullOrEmpty(request.getParameter("autoAssembly"))) {
                autoAssembly = Boolean.parseBoolean(request.getParameter("autoAssembly"));
            }
            boolean intervalField = Boolean.parseBoolean(request.getParameter("intervalField"));
            if (issub && !StringUtil.isNullOrEmpty(parentid)) {
                productMap.put("parentid", parentid);
            }else{
                productMap.put("parentid", null);
            }
            // ERP-20637
            String landingCostCategory ="";
            if (!StringUtil.isNullOrEmpty(request.getParameter("landingCostCategoryId"))) {
                landingCostCategory=request.getParameter("landingCostCategoryId");
            }
            
            
            if(multiuom){
                 if (!StringUtil.isNullOrEmpty(request.getParameter("schemaType"))) {
                    KwlReturnObject jeres = accountingHandlerDAOobj.getObject(UOMschemaType.class.getName(), request.getParameter("schemaType"));
                    UOMschemaType uomschemaType = (UOMschemaType) jeres.getEntityList().get(0);
                    productMap.put("uomschemaType",uomschemaType); 
                    productMap.put("displayUoM",displayUoM);
                 }
            }else{
                productMap.put("uomschemaType",null); 
                productMap.put("displayUoM","");
            }
            productMap.put("dependentType", dependentType);
            productMap.put("noofqty", noofqty);
            productMap.put("qtyUOM", qtyUOM);
            productMap.put("desc", request.getParameter("desc"));
            if (StringUtil.isNullOrEmpty(request.getParameter("uomid")) && isFixedAsset) {
                //In case of Fixed asset we need to set NA as stock uom ERP-35758.
                UnitOfMeasure unitOfMeasure = accProductModuleService.getUOMByName("N/A", companyid);
                productMap.put("uomid", unitOfMeasure.getID());
            }else{
                productMap.put("uomid", request.getParameter("uomid")); 
            }
            productMap.put("minorderingquantity", minOrderingQuantity); 
            productMap.put("maxorderingquantity", maxOrderingQuantity); 
            if (!StringUtil.isNullOrEmpty(currencyId)) {
                productMap.put("currencyid", currencyId); 
            }
            
            if(!StringUtil.isNullOrEmpty(request.getParameter("industryCodeId"))) {
                productMap.put("industryCodeId",request.getParameter("industryCodeId"));
            }
            if (isFixedAsset) {// For case of fixed Asset There will be only one controlling account in which purchase and sales activity will be record.
                String assetControllingAccountId = request.getParameter("assetControllingAccountId");
                if (!StringUtil.isNullOrEmpty(assetControllingAccountId)) {
                    productMap.put("purchaseaccountid", assetControllingAccountId);
                    productMap.put("salesaccountid", assetControllingAccountId);
                    productMap.put("purchaseretaccountid", assetControllingAccountId);
                    productMap.put("salesretaccountid", assetControllingAccountId);
                } else {
                    throw new AccountingException("Asset Group Controlling Account Id is not Availabe");
                }
            } else {
            productMap.put("purchaseaccountid", request.getParameter("purchaseaccountid"));
            productMap.put("salesaccountid", request.getParameter("salesaccountid"));
            productMap.put("purchaseretaccountid", request.getParameter("purchaseretaccountid"));
            productMap.put("salesretaccountid", request.getParameter("salesretaccountid"));
            }
            productMap.put("interStatePurAccID", request.getParameter("interStatePurAccID"));
            productMap.put("interStatePurAccCformID", request.getParameter("interStatePurAccCformID"));
            productMap.put("interStatePurReturnAccID", request.getParameter("interStatePurReturnAccID"));
            productMap.put("interStatePurReturnAccCformID", request.getParameter("interStatePurReturnAccCformID"));
            
            productMap.put("cstVAT", request.getParameter("cstVAT"));
            productMap.put("cstVATattwo", request.getParameter("cstVATattwo"));
            productMap.put("inputVAT", request.getParameter("interStatePurReturnAccCformID"));
            
            productMap.put("interStateSalesAccID", request.getParameter("interStateSalesAccID"));
            productMap.put("interStateSalesAccCformID", request.getParameter("interStateSalesAccCformID"));
            productMap.put("interStateSalesReturnAccID", request.getParameter("interStateSalesReturnAccID"));
            productMap.put("interStateSalesReturnAccCformID", request.getParameter("interStateSalesReturnAccCformID"));
            
            productMap.put("cstVATSales", request.getParameter("cstVATSales"));
            productMap.put("cstVATattwoSales", request.getParameter("cstVATattwoSales"));
            productMap.put("inputVATSales", request.getParameter("inputVATSales"));
            
            productMap.put("stockadjustmentaccountid", request.getParameter("stockadjustmentaccountid")); // Stock Adjustment Account
            productMap.put("inventoryaccountid", request.getParameter("inventoryaccountid")); // Inventory Account
            productMap.put("cogsaccountid", request.getParameter("cogsaccountid")); // Cost of Goods Sold Account
            
            if (!StringUtil.isNullOrEmpty(request.getParameter("location"))) {
                productMap.put("location", request.getParameter("location"));  //default location and warehouse
            }
            if (!StringUtil.isNullOrEmpty(request.getParameter("warehouse"))) {
                productMap.put("warehouse", request.getParameter("warehouse"));
            }
            productMap.put("isLocationForProduct", (!StringUtil.isNullOrEmpty(request.getParameter("isLocationForProduct"))) ? Boolean.parseBoolean(request.getParameter("isLocationForProduct")) : false) ;
            productMap.put("isWarehouseForProduct", (!StringUtil.isNullOrEmpty(request.getParameter("isWarehouseForProduct"))) ? Boolean.parseBoolean(request.getParameter("isWarehouseForProduct")) : false) ;
            productMap.put("isRowForProduct", (!StringUtil.isNullOrEmpty(request.getParameter("isRowForProduct"))) ? Boolean.parseBoolean(request.getParameter("isRowForProduct")) : false) ;
            productMap.put("isRackForProduct", (!StringUtil.isNullOrEmpty(request.getParameter("isRackForProduct"))) ? Boolean.parseBoolean(request.getParameter("isRackForProduct")) : false) ;
            productMap.put("isBinForProduct", (!StringUtil.isNullOrEmpty(request.getParameter("isBinForProduct"))) ? Boolean.parseBoolean(request.getParameter("isBinForProduct")) : false) ;
            productMap.put("isBatchForProduct", (!StringUtil.isNullOrEmpty(request.getParameter("isBatchForProduct"))) ? Boolean.parseBoolean(request.getParameter("isBatchForProduct")) : false) ;
            productMap.put("isrecyclable",  (!StringUtil.isNullOrEmpty(request.getParameter("recyclable"))) ? Boolean.parseBoolean(request.getParameter("recyclable")) : false);
            productMap.put("rcmapplicable",  (!StringUtil.isNullOrEmpty(request.getParameter("rcmapplicable"))) ? Boolean.parseBoolean(request.getParameter("rcmapplicable")) : false);
            productMap.put("isWastageApplicable",  isWastageApplicable);
            if (isWastageApplicable) {
                productMap.put("wastageAccount", request.getParameter("wastageAccount"));
            }
            productMap.put("isSerialForProduct",  (!StringUtil.isNullOrEmpty(request.getParameter("isSerialForProduct"))) ? Boolean.parseBoolean(request.getParameter("isSerialForProduct")) : false);
            productMap.put("isSKUForProduct",  (!StringUtil.isNullOrEmpty(request.getParameter("isSKUForProduct"))) ? Boolean.parseBoolean(request.getParameter("isSKUForProduct")) : false);
            productMap.put("salesRevenueRecognitionAccountid", request.getParameter("salesRevenueRecognitionAccountid"));
            productMap.put("revenueRecognitionProcess", !StringUtil.isNullOrEmpty(request.getParameter("revenueRecognitionProcess")));
            productMap.put("leadtime",  !StringUtil.isNullOrEmpty(request.getParameter("QAleadtime"))?Integer.parseInt(request.getParameter("leadtime")):0);
            productMap.put("QAleadtime", !StringUtil.isNullOrEmpty(request.getParameter("QAleadtime"))?Integer.parseInt(request.getParameter("QAleadtime")):0);
            productMap.put("hsCode", !StringUtil.isNullOrEmpty(request.getParameter("hsCode"))?request.getParameter("hsCode"):"");
            productMap.put("activateProductComposition", (!StringUtil.isNullOrEmpty(request.getParameter("activateProductComposition"))) ?request.getParameter("activateProductComposition").equals("on")?true:false: false) ;
            if(!StringUtil.isNullOrEmpty(request.getParameter("shelfLocationId"))){
                productMap.put("shelfLocationId", request.getParameter("shelfLocationId"));
            }
            if(!StringUtil.isNullOrEmpty(request.getParameter("warrantyperiod")) && !StringUtil.equal(request.getParameter("warrantyperiod"), "N/A")){
                productMap.put("warrantyperiod", Integer.parseInt(request.getParameter("warrantyperiod")));
            } else {
                productMap.put("warrantyperiod",0);
            }
            if(!StringUtil.isNullOrEmpty(request.getParameter("warrantyperiodsal")) && !StringUtil.equal(request.getParameter("warrantyperiodsal"), "N/A")){
                productMap.put("warrantyperiodsal", Integer.parseInt(request.getParameter("warrantyperiodsal")));
            } else {
                productMap.put("warrantyperiodsal", 0);
            }
            boolean isQAenable = Boolean.parseBoolean(request.getParameter("qaenable"));
            productMap.put("isQAenable", isQAenable);
            productMap.put("reorderlevel",(request.getParameter("reorderlevel")!=null && !request.getParameter("reorderlevel").equals(""))? Double.parseDouble(request.getParameter("reorderlevel")):0);
            productMap.put("reorderquantity",(request.getParameter("reorderquantity")!=null && !request.getParameter("reorderquantity").equals(""))?Double.parseDouble(request.getParameter("reorderquantity")):0);
            productMap.put("minorderingquantity", minOrderingQuantity);
            productMap.put("maxorderingquantity", maxOrderingQuantity);
            productMap.put("companyid", companyid);
            productMap.put("vendorid", request.getParameter("vendor"));
            productMap.put("multiuom", multiuom);
            productMap.put("countable", countable);
            productMap.put("blockLooseSell", blockLooseSell);
            productMap.put("autoAssembly", autoAssembly);
            productMap.put("syncable", syncable);
            productMap.put("intervalField", intervalField);
            productMap.put("addshiplentheithqty", addshiplentheithqty);
            productMap.put("timeinterval", timeinterval);
            productMap.put("productweight",productweight);
            productMap.put("productweightperstockuom",productweightperstockuom);
            productMap.put("productweightincludingpakagingperstockuom",productweightincludingpakagingperstockuom);
            productMap.put("productvolumeperstockuom",productVolumePerStockuom);
            productMap.put("productvolumeincludingpakagingperstockuom",productVolumeIncludingPakagingPerStockuom);
            productMap.put("name", productName);
            productMap.put("supplier", supplier);
            productMap.put("coilcraft", coilcraft);
            productMap.put("interplant", interplant);
            productMap.put("isFixedAsset", isFixedAsset);
            productMap.put("barcodeField",StringUtil.isNullOrEmpty(request.getParameter("barcodeField"))?0:Integer.parseInt(request.getParameter("barcodeField"))); //Default value for BarcodeFied is 0
            
            //INV_ACC_MERGE
            //General tan fields
            
            if (!StringUtil.isNullOrEmpty(request.getParameter("additionaldescription"))) {
                productMap.put("additionaldescription",request.getParameter("additionaldescription")); 
            }
            if (!StringUtil.isNullOrEmpty(request.getParameter("barcode"))) {
                productMap.put("barcode",request.getParameter("barcode")); 
            }
            if (!StringUtil.isNullOrEmpty(request.getParameter("foreigndescription"))) {
                productMap.put("foreigndescription",request.getParameter("foreigndescription")); 
            }
            if (!StringUtil.isNullOrEmpty(request.getParameter("itemgroup"))) {
                productMap.put("itemgroup",request.getParameter("itemgroup")); 
            }
            if (!StringUtil.isNullOrEmpty(request.getParameter("itempricelist"))) {
                productMap.put("itempricelist",request.getParameter("itempricelist")); 
            }
            if (!StringUtil.isNullOrEmpty(request.getParameter("shippingtype"))) {
                productMap.put("shippingtype",request.getParameter("shippingtype")); 
            }
            if (!StringUtil.isNullOrEmpty(request.getParameter("isActiveItem"))) {
                productMap.put("isActiveItem", Boolean.parseBoolean(request.getParameter("isActiveItem"))); 
            } else {
                if(isFixedAsset){ // For fixed assets, every new asset group will be activated by default
                    productMap.put("isActiveItem", true); 
                }
            }
            if (!StringUtil.isNullOrEmpty(request.getParameter("isKnittingItem"))) {
                productMap.put("isKnittingItem", Boolean.parseBoolean(request.getParameter("isKnittingItem"))); 
            }
            
            ItemReusability ir=null;
            if (!StringUtil.isNullOrEmpty(request.getParameter("isreusable"))) {
                int itemReusability = Integer.parseInt(request.getParameter("isreusable"));
                for (ItemReusability st : ItemReusability.values()) {
                    if (st.ordinal() == itemReusability) {
                        ir = st;
                        break;
                    }
                }
                
            }
            productMap.put("isreusable",ir); 
            
            if (!StringUtil.isNullOrEmpty(request.getParameter("reusabilitycount"))) {
                productMap.put("reusabilitycount", Integer.parseInt(request.getParameter("reusabilitycount"))); 
            }
            
            if (!StringUtil.isNullOrEmpty(request.getParameter("substituteProductId"))) {
                productMap.put("substituteProductId", request.getParameter("substituteProductId"));
            }
            if (!StringUtil.isNullOrEmpty(request.getParameter("substituteQty"))) {
                productMap.put("substituteQty", Double.parseDouble(request.getParameter("substituteQty")));
            }
            
            if (!StringUtil.isNullOrEmpty(request.getParameter("licensetype"))) {
                LicenseType lt= LicenseType.valueOf(request.getParameter("licensetype"));
                productMap.put("licensetype",lt); 
            }
            if (!StringUtil.isNullOrEmpty(request.getParameter("licensecode"))) {
                productMap.put("licensecode",request.getParameter("licensecode")); 
            }
            productMap.put("productBrandId", request.getParameter("productBrandId"));
            
            if (!StringUtil.isNullOrEmpty(request.getParameter("customercategory"))) {
//                KwlReturnObject masterItem = accountingHandlerDAOobj.getObject(MasterItem.class.getName(), request.getParameter("customercategory"));
//                if (masterItem.getEntityList().size() > 0) {
//                    MasterItem customerCategory = (MasterItem) masterItem.getEntityList().get(0);
                productMap.put("customercategory", request.getParameter("customercategory"));
//                }
            }
            if (!StringUtil.isNullOrEmpty(request.getParameter("servicetaxcode"))) {
                productMap.put("servicetaxcode",request.getParameter("servicetaxcode")); 
            }
            if (!StringUtil.isNullOrEmpty(request.getParameter("abatementrate"))) {
                productMap.put("abatementrate",Double.parseDouble(request.getParameter("abatementrate"))); 
            }
            if (!StringUtil.isNullOrEmpty(request.getParameter("excisemethod"))) {
                productMap.put("excisemethod",request.getParameter("excisemethod")); 
            }
            if (!StringUtil.isNullOrEmpty(request.getParameter("natureOfStockItem"))) {
                productMap.put("natureOfStockItem",request.getParameter("natureOfStockItem")); 
            }
            if (!StringUtil.isNullOrEmpty(request.getParameter("excisemethodsubtype"))) {
                productMap.put("excisemethodsubtype",request.getParameter("excisemethodsubtype")); 
            }
            if (!StringUtil.isNullOrEmpty(request.getParameter("exciserate")) && !StringUtil.isNullOrEmpty(request.getParameter("producttype")) && !request.getParameter("producttype").equals(Producttype.SERVICE)) {
                productMap.put("exciserate",Double.parseDouble(request.getParameter("exciserate"))); 
            }
            if (!StringUtil.isNullOrEmpty(request.getParameter("vatcommoditycode"))) {
                productMap.put("vatcommoditycode",request.getParameter("vatcommoditycode")); 
            }
            if (!StringUtil.isNullOrEmpty(request.getParameter("mrprate"))) {
                productMap.put("mrprate",request.getParameter("mrprate")); 
            }
            if (!StringUtil.isNullOrEmpty(request.getParameter("sac"))) {
                productMap.put("sac",request.getParameter("sac")); 
            }
            if (!StringUtil.isNullOrEmpty(request.getParameter("vatonmrp"))) {
                productMap.put("vatonmrp", request.getParameter("vatonmrp"));
            }
            if (!StringUtil.isNullOrEmpty(request.getParameter("vatabatementrate"))) {
                productMap.put("vatabatementrate",Double.parseDouble(request.getParameter("vatabatementrate"))); 
            }
            if(!StringUtil.isNullOrEmpty(request.getParameter("vatabatementperiodfromdate"))) {
                Date vatAbatementPeriodFromDate = authHandler.getDateOnlyFormat().parse(request.getParameter("vatabatementperiodfromdate"));
                productMap.put("vatAbatementPeriodFromDate", vatAbatementPeriodFromDate);
            }
            if(!StringUtil.isNullOrEmpty(request.getParameter("vatabatementperiodtodate"))) {
                Date vatAbatementPeriodToDate = authHandler.getDateOnlyFormat().parse(request.getParameter("vatabatementperiodtodate"));
                productMap.put("vatAbatementPeriodToDate", vatAbatementPeriodToDate);
            }
            if (!StringUtil.isNullOrEmpty(request.getParameter("vatMethodType"))) {
                productMap.put("vatMethodType", request.getParameter("vatMethodType"));
            }
            if (!StringUtil.isNullOrEmpty(request.getParameter("reportingUOMVAT"))) {
                productMap.put("reportingUOMVAT", request.getParameter("reportingUOMVAT"));
            }
            if (!StringUtil.isNullOrEmpty(request.getParameter("reportingSchemaVAT"))) {
                productMap.put("reportingSchemaVAT", request.getParameter("reportingSchemaVAT"));
            } else {
                productMap.put("reportingSchemaVAT", null);
            }
                        
//            
//            // Purchase Tab fields
//            
            if (!StringUtil.isNullOrEmpty(request.getParameter("catalogNo"))) {
                productMap.put("catalogNo",request.getParameter("catalogNo")); 
            }
            
            if (!StringUtil.isNullOrEmpty(request.getParameter("purchaseuomid"))) {
                KwlReturnObject jeres = accountingHandlerDAOobj.getObject(UnitOfMeasure.class.getName(), request.getParameter("purchaseuomid"));
                UnitOfMeasure PurchaseUOM = (UnitOfMeasure) jeres.getEntityList().get(0);

                productMap.put("purchaseuomid",PurchaseUOM); 
            }
            if (!StringUtil.isNullOrEmpty(request.getParameter("itempurchaseheight"))) {
                productMap.put("itempurchaseheight",Double.parseDouble(request.getParameter("itempurchaseheight"))); 
            }
            if (!StringUtil.isNullOrEmpty(request.getParameter("itempurchasewidth"))) {
                productMap.put("itempurchasewidth",Double.parseDouble(request.getParameter("itempurchasewidth"))); 
            }
            if (!StringUtil.isNullOrEmpty(request.getParameter("itempurchaselength"))) {
                productMap.put("itempurchaselength",Double.parseDouble(request.getParameter("itempurchaselength"))); 
            }
            if (!StringUtil.isNullOrEmpty(request.getParameter("itempurchasevolume"))) {
                productMap.put("itempurchasevolume",Double.parseDouble(request.getParameter("itempurchasevolume"))); 
            }
            if (!StringUtil.isNullOrEmpty(request.getParameter("purchasemfg"))) {
                productMap.put("purchasemfg",request.getParameter("purchasemfg")); 
            }
            
            
            // Sales Tab fields
        
            if (!StringUtil.isNullOrEmpty(request.getParameter("salesuomid"))) {
                KwlReturnObject jeres = accountingHandlerDAOobj.getObject(UnitOfMeasure.class.getName(), request.getParameter("salesuomid"));
                UnitOfMeasure SalesUOM = (UnitOfMeasure) jeres.getEntityList().get(0);

                productMap.put("salesuomid",SalesUOM); 
            }
            if (!StringUtil.isNullOrEmpty(request.getParameter("itemsalesheight"))) {
                productMap.put("itemsalesheight",Double.parseDouble(request.getParameter("itemsalesheight"))); 
            }
            if (!StringUtil.isNullOrEmpty(request.getParameter("itemsaleswidth"))) {
                productMap.put("itemsaleswidth",Double.parseDouble(request.getParameter("itemsaleswidth"))); 
            }
            if (!StringUtil.isNullOrEmpty(request.getParameter("itemsaleslength"))) {
                productMap.put("itemsaleslength",Double.parseDouble(request.getParameter("itemsaleslength"))); 
            }
            if (!StringUtil.isNullOrEmpty(request.getParameter("itemsalesvolume"))) {
                productMap.put("itemsalesvolume",Double.parseDouble(request.getParameter("itemsalesvolume"))); 
            }
            
            if (!StringUtil.isNullOrEmpty(request.getParameter("alternateproductid"))) {
                productMap.put("alternateproductid",request.getParameter("alternateproductid")); 
            }
            
            //  Properties Tab fields
             
            if (!StringUtil.isNullOrEmpty(request.getParameter("itemheight"))) {
                productMap.put("itemheight",Double.parseDouble(request.getParameter("itemheight"))); 
            }
            if (!StringUtil.isNullOrEmpty(request.getParameter("itemwidth"))) {
                productMap.put("itemwidth",Double.parseDouble(request.getParameter("itemwidth"))); 
            }
            if (!StringUtil.isNullOrEmpty(request.getParameter("itemlength"))) {
                productMap.put("itemlength",Double.parseDouble(request.getParameter("itemlength"))); 
            }
            if (!StringUtil.isNullOrEmpty(request.getParameter("itemvolume"))) {
                productMap.put("itemvolume",Double.parseDouble(request.getParameter("itemvolume"))); 
            }
            if (!StringUtil.isNullOrEmpty(request.getParameter("itemcolor"))) {
                productMap.put("itemcolor",request.getParameter("itemcolor")); 
            }
            
             //  Remarks Tab fields         
            
            if (!StringUtil.isNullOrEmpty(request.getParameter("additionalfreetext"))) {
                productMap.put("additionalfreetext",request.getParameter("additionalfreetext")); 
            }
            //ERP-20637
//            if (!StringUtil.isNullOrEmpty(landingCostCategory) ) {
                productMap.put("landingCostCategory",landingCostCategory); 
                /**
                 * ERM-447 validation if product has landing cost category and its being used in a purchase invoice.
                 */
//                if (preferences.getInventoryValuationType() == Constants.PERPETUAL_VALUATION_METHOD && extraCompanyPreferences.isActivelandingcostofitem()) {
//                if (extraCompanyPreferences.isActivelandingcostofitem()) {
//                    KwlReturnObject landedkwl = accProductObj.getLandedInvoiceListForProduct(productid, companyid);
//                    List<String> landedinvlist = landedkwl.getEntityList();
//                    if (landedinvlist!=null && !landedinvlist.isEmpty()) {
//                      throw new AccountingException(messageSource.getMessage("acc.landingcost.editproduct",null,RequestContextUtils.getLocale(request)));
//                    }
//                }
//            }
                
            //  Inventory Data Tab fields
            ValuationMethod valMethod= ValuationMethod.STANDARD;
            if (!StringUtil.isNullOrEmpty(request.getParameter("valuationmethod"))) {

                int valuationMethod = Integer.parseInt(request.getParameter("valuationmethod"));
                for (ValuationMethod st : ValuationMethod.values()) {
                    if (st.ordinal() == valuationMethod) {
                        valMethod = st;
                        break;
                    }
                }
                
            }
            productMap.put("valuationmethod",valMethod);
            
            KwlReturnObject jeresult =null;
            
            UnitOfMeasure casingUoM = null;
            if(!StringUtil.isNullOrEmpty(request.getParameter("casinguomid"))){
                jeresult = accountingHandlerDAOobj.getObject(UnitOfMeasure.class.getName(), request.getParameter("casinguomid"));
                casingUoM = (UnitOfMeasure) jeresult.getEntityList().get(0);
            }
            
            UnitOfMeasure innerUoM = null;
            if(!StringUtil.isNullOrEmpty(request.getParameter("inneruomid"))){
                jeresult = accountingHandlerDAOobj.getObject(UnitOfMeasure.class.getName(), request.getParameter("inneruomid"));
                innerUoM = (UnitOfMeasure) jeresult.getEntityList().get(0);
            }
            
            UnitOfMeasure stockUoM = null;
            if(!StringUtil.isNullOrEmpty(request.getParameter("stockuomid"))){
               jeresult = accountingHandlerDAOobj.getObject(UnitOfMeasure.class.getName(), request.getParameter("stockuomid"));
               stockUoM = (UnitOfMeasure) jeresult.getEntityList().get(0); 
                }
            
            double casingUOMValue=0;
            double innerUomValue=0;
            double stockUomValue=0;
            
            if (!StringUtil.isNullOrEmpty(request.getParameter("casinguomvalue"))) {
                casingUOMValue=Double.parseDouble(request.getParameter("casinguomvalue")); 
            }
            if (!StringUtil.isNullOrEmpty(request.getParameter("inneruomvalue"))) {
                innerUomValue=Double.parseDouble(request.getParameter("inneruomvalue")); 
            }
            if (!StringUtil.isNullOrEmpty(request.getParameter("stockuomvalue"))) {
                stockUomValue=Double.parseDouble(request.getParameter("stockuomvalue")); 
            }
            
            jeresult = accountingHandlerDAOobj.getObject(Company.class.getName(),companyid);
            Company company = (Company) jeresult.getEntityList().get(0);
            
            Packaging packaging = null;
            
            if(!StringUtil.isNullOrEmpty(productid)){
                jeresult = accountingHandlerDAOobj.getObject(Product.class.getName(),productid);
                 Product product = (Product) jeresult.getEntityList().get(0);
                 displayuomidold = (product.getDisplayUoM() != null) ? product.getDisplayUoM().getID(): "";
                 displayuomname = (product.getDisplayUoM() != null) ? product.getDisplayUoM().getNameEmptyforNA(): "";                 
                 packaging=product.getPackaging();
                 if (packaging != null) {
                    packaging.setCasingUoM(casingUoM);
                    packaging.setInnerUoM(innerUoM);
                    packaging.setStockUoM(stockUoM);
                    packaging.setCasingUomValue(casingUOMValue);
                    packaging.setInnerUomValue(innerUomValue);
                    packaging.setStockUomValue(stockUomValue);
                }
            }
            if(packaging==null){
                 packaging =new Packaging(company, casingUoM, innerUoM, stockUoM, casingUOMValue, innerUomValue, stockUomValue);
            }
            packagingService.addOrUpdatePackaging(packaging);
            productMap.put("packaging",packaging); 
            
            if (!StringUtil.isNullOrEmpty(request.getParameter("orderinguomid"))) {
                 jeresult = accountingHandlerDAOobj.getObject(UnitOfMeasure.class.getName(), request.getParameter("orderinguomid"));
                 UnitOfMeasure orderUoM = (UnitOfMeasure) jeresult.getEntityList().get(0);
                 productMap.put("orderUoM",orderUoM); 
            }
            
            if (!StringUtil.isNullOrEmpty(request.getParameter("transferuomid"))) {
                  jeresult = accountingHandlerDAOobj.getObject(UnitOfMeasure.class.getName(), request.getParameter("transferuomid"));
                  UnitOfMeasure transferUoM = (UnitOfMeasure) jeresult.getEntityList().get(0);
                  productMap.put("transferUoM",transferUoM); 
            }
            
            if (!StringUtil.isNullOrEmpty(request.getParameter("inspectionTemplateId"))) {
                  jeresult = accountingHandlerDAOobj.getObject(InspectionTemplate.class.getName(), request.getParameter("inspectionTemplateId"));
                  InspectionTemplate inspectionTemplate = (InspectionTemplate) jeresult.getEntityList().get(0);
                  productMap.put("inspectionTemplate",inspectionTemplate); 
            }
           
            
            if (!StringUtil.isNullOrEmpty(request.getParameter("WIPoffset"))) {
                productMap.put("WIPoffset",request.getParameter("WIPoffset")); 
            }
            if (!StringUtil.isNullOrEmpty(request.getParameter("Inventoryoffset"))) {
                productMap.put("Inventoryoffset",request.getParameter("Inventoryoffset")); 
            }
            if (!StringUtil.isNullOrEmpty(request.getParameter("CCFrequency"))) {
                Set<Frequency> frequencys = new HashSet();
                String  frqIds = request.getParameter("CCFrequency"); // comma separated ids
                String[] fArray = frqIds.split(",");
                for(String fId : fArray){
                    Integer freqid=Integer.parseInt(fId);
                    jeresult = accountingHandlerDAOobj.getObject(Frequency.class.getName(), freqid);
                    Frequency frequency = (Frequency) jeresult.getEntityList().get(0);
                    frequencys.add(frequency);
                }
                productMap.put("CCFrequency",frequencys);
            }
            
            if (!StringUtil.isNullOrEmpty(request.getParameter("location"))) {
                productMap.put("location", request.getParameter("location"));  //default location and warehouse
            }
            if (!StringUtil.isNullOrEmpty(request.getParameter("warehouse"))) {
                productMap.put("warehouse", request.getParameter("warehouse"));
            }
            if (!StringUtil.isNullOrEmpty(request.getParameter("tariffname"))) {
                productMap.put("tariffname", request.getParameter("tariffname"));
            }
            if (!StringUtil.isNullOrEmpty(request.getParameter("hsncode"))) {
                productMap.put("hsncode", request.getParameter("hsncode"));
            }
            if (!StringUtil.isNullOrEmpty(request.getParameter("reportinguom"))) {
                productMap.put("reportinguom", request.getParameter("reportinguom"));
            }
            if (!StringUtil.isNullOrEmpty(request.getParameter("reportingSchemaType"))) {
                productMap.put("reportingSchemaType", request.getParameter("reportingSchemaType"));
            }else{
                productMap.put("reportingSchemaType", null);
            }
            if (isFixedAsset) {
                boolean isDepreciable = (!StringUtil.isNullOrEmpty(request.getParameter("isDepreciable"))) ? Boolean.parseBoolean(request.getParameter("isDepreciable")) : false;
                int depreciationMethod = (!StringUtil.isNullOrEmpty(request.getParameter("depreciationMethod"))) ? Integer.parseInt(request.getParameter("depreciationMethod")) : 1;
                double depreciationRate = (!StringUtil.isNullOrEmpty(request.getParameter("depreciationRate"))) ? Double.parseDouble(request.getParameter("depreciationRate")) : 0;
                int depreciationCostLimit = (!StringUtil.isNullOrEmpty(request.getParameter("depreciationCostLimit"))) ? Integer.parseInt(request.getParameter("depreciationCostLimit")) : 0;

                String depreciationGLAccountID = request.getParameter("depreciationGLAccount");
                String depreciationProvisionGLAccountID = request.getParameter("depreciationProvisionGLAccount");
                String sellAssetGLAccountID = request.getParameter("sellAssetGLAccount");
                String writeOffAssetAccountId = request.getParameter("writeOffAssetAccount");

                productMap.put("isDepreciable", isDepreciable);
                productMap.put("depreciationMethod", depreciationMethod);
                productMap.put("depreciationRate", depreciationRate);
                productMap.put("depreciationCostLimit", depreciationCostLimit);
                productMap.put("depreciationGLAccountID", depreciationGLAccountID);
                productMap.put("depreciationProvisionGLAccountID", depreciationProvisionGLAccountID);
                productMap.put("sellAssetGLAccountID", sellAssetGLAccountID);                
                productMap.put("writeoffassetaccount", writeOffAssetAccountId);                
                
                // CHECK WHETHER FIXED ASSET GROUP OF SAME NAME EXIST OR NOT IN CASE OF FIXED ASSET.
                /*if (StringUtil.isNullOrEmpty(productid)) {
                    boolean isAssetGroupExistsOfSameId = isAssetGroupExistsOfSameName(request);

                    if (isAssetGroupExistsOfSameId) {
                        throw new AccountingException(messageSource.getMessage("acc.fixed.asset.group.exist", null, RequestContextUtils.getLocale(request)));//Asset Group Id You have entered is already exist
                    }
                }*/
            }
            
            if (sequenceformat.equals("NA")) {//In case of NA checks wheather this number can also be generated by a sequence format or not 
                int moduleid=isFixedAsset?Constants.Acc_FixedAssets_AssetsGroups_ModuleId:Constants.Acc_Product_Master_ModuleId;
                List list = accCompanyPreferencesObj.checksEntryNumberForSequenceNumber(moduleid, entryNumber, companyid);
                if (!list.isEmpty()) {
                    boolean isvalidEntryNumber = (Boolean) list.get(0);
                    String formatName = (String) list.get(1);
                    if (!isvalidEntryNumber) {
                        throw new AccountingException(messageSource.getMessage("acc.common.enterdocumentnumber", null, RequestContextUtils.getLocale(request)) + " <b>" + entryNumber + "</b> " + messageSource.getMessage("acc.common.belongsto", null, RequestContextUtils.getLocale(request)) + " <b>" + formatName + "</b>. " + messageSource.getMessage("acc.common.plselectseqformat", null, RequestContextUtils.getLocale(request)) + " <b>" + formatName + "</b> " + messageSource.getMessage("acc.common.insteadof", null, RequestContextUtils.getLocale(request)));
                    }

                }
                //This check is used for to check the Existing Product ID.
                /*if (!StringUtil.isNullOrEmpty(entryNumber) && !StringUtil.isNullOrEmpty(companyid) && StringUtil.isNullOrEmpty(productid)) {
                    productresult = accProductObj.getProductByProdID(entryNumber, companyid);
                   int count=productresult.getEntityList().size();
                    if (count>0) {
                        throw new AccountingException(messageSource.getMessage("acc.msgbox.41", null, RequestContextUtils.getLocale(request)));
                    }
                }*/
                    }
            Product product = null;
            String oldDescription=null;
            String oldProductName=null;
            String nextAutoNumber = "";
            boolean seqformat_oldflag = StringUtil.getBoolean(request.getParameter("seqformat_oldflag"));                    
            String nextAutoNoInt = "";
            SequenceFormat prevSeqFormat = null;
            if (!StringUtil.isNullOrEmpty(productid)) {         // In Edit case
                KwlReturnObject rst = accountingHandlerDAOobj.getObject(Product.class.getName(), productid);
                Product p = (Product) rst.getEntityList().get(0);
                prevSeqFormat = p.getSeqformat();
                oldDescription=p.getDescription();
                oldProductName=p.getProductName();

            }
            /*if (!sequenceformat.equals("NA") && prevSeqFormat == null) {
                if (seqformat_oldflag) {
                    nextAutoNumber = accCompanyPreferencesObj.getNextAutoNumber(companyid, StaticValues.AUTONUM_PRODUCTID, sequenceformat);
                } else {
                    String[] nextAutoNoTemp = accCompanyPreferencesObj.getNextAutoNumber_Modified(companyid, StaticValues.AUTONUM_PRODUCTID, sequenceformat, seqformat_oldflag);
                    nextAutoNumber = nextAutoNoTemp[0];
                    nextAutoNoInt = nextAutoNoTemp[1];
                    productMap.put(Constants.SEQFORMAT, sequenceformat);
                    productMap.put(Constants.SEQNUMBER, nextAutoNoInt);
                }
            }*/
            double quantity;
            try {
                quantity = Double.parseDouble(request.getParameter("quantity"));
            } catch (Exception e) {
                quantity = 0;
            }
            double initialprice = (!StringUtil.isNullOrEmpty(request.getParameter("initialprice"))) ?Double.parseDouble(request.getParameter("initialprice")):0;
            double initialsalesprice = (!StringUtil.isNullOrEmpty(request.getParameter("initialsalesprice"))) ?Double.parseDouble(request.getParameter("initialsalesprice")):0;
            if (extraCompanyPreferences != null && (extraCompanyPreferences.isActivateMRPModule() || preferences.getInventoryValuationType() == Constants.PERPETUAL_VALUATION_METHOD)) {
                try {
                    Map<String, Object> currencyParams = AccountingManager.getGlobalParams(request);
                    double openingbalanceamount = (quantity * initialprice);
                    double openingbalanceamountinbase = openingbalanceamount;
                    productMap.put("openingbalanceamount", authHandler.round(openingbalanceamount, companyid));
                    if (!StringUtil.isNullOrEmpty(currencyId)) {
                        KwlReturnObject result = accCurrencyDAOobj.getCurrencyToBaseAmount(currencyParams, openingbalanceamount, currencyId, asOfDate, 0);
                        openingbalanceamountinbase = (Double) result.getEntityList().get(0);
                        productMap.put("openingbalanceamountinbase", authHandler.round(openingbalanceamountinbase, companyid));
                        result = accCurrencyDAOobj.getExcDetailID(currencyParams, currencyId, asOfDate, null);
                        if(result!=null && result.getEntityList()!=null && !result.getEntityList().isEmpty()){
                            ExchangeRateDetails erd = (ExchangeRateDetails) result.getEntityList().get(0);
                            if(erd!=null){
                                productMap.put("exchangerateforopeningbalanceamount", erd.getExchangeRate());    
                            }
                        }
                    } else {
                        productMap.put("openingbalanceamountinbase", authHandler.round(openingbalanceamountinbase, companyid));
                        productMap.put("exchangerateforopeningbalanceamount", 1);
                    }
                    
                    if (!StringUtil.isNullOrEmpty(productid)) { // Subtract balance from old account
                        KwlReturnObject accountresult = accountingHandlerDAOobj.getObject(Product.class.getName(), productid);
                        Product rowproduct = (Product) accountresult.getEntityList().get(0);
                        if (rowproduct != null) {
                            String oldInventoryAccountID = rowproduct.getInventoryAccount() != null ? rowproduct.getInventoryAccount().getID() : "";
                            if (!StringUtil.isNullOrEmpty(oldInventoryAccountID)) {
                                accountresult = accountingHandlerDAOobj.getObject(Account.class.getName(),oldInventoryAccountID);
                                Account inventoryAccount = (Account) accountresult.getEntityList().get(0);
                                if (inventoryAccount != null) {
                                    KwlReturnObject amountresult = accCurrencyDAOobj.getBaseToCurrencyAmount(currencyParams, rowproduct.getOpeningBalanceAmountInBase(), inventoryAccount.getCurrency().getCurrencyID(), asOfDate, 0);
                                    double amountInAccountCurrency = (Double) amountresult.getEntityList().get(0);
                                    double updatedOpeningbalance = inventoryAccount.getOpeningBalance() - amountInAccountCurrency;
                                    accAccountDAOobj.updateAccountOpeningBalance(oldInventoryAccountID, authHandler.round(updatedOpeningbalance, companyid));
                                }
                            }
                        }
                    }
                    if (!StringUtil.isNullOrEmpty(request.getParameter("inventoryaccountid"))) { // Subtract balance in new account
                        KwlReturnObject accountresult = accountingHandlerDAOobj.getObject(Account.class.getName(), request.getParameter("inventoryaccountid"));
                        Account inventoryAccount = (Account) accountresult.getEntityList().get(0);
                        if (inventoryAccount != null) {
                            KwlReturnObject amountresult = accCurrencyDAOobj.getBaseToCurrencyAmount(currencyParams, openingbalanceamountinbase, inventoryAccount.getCurrency().getCurrencyID(), asOfDate, 0);
                            double amountInAccountCurrency = (Double) amountresult.getEntityList().get(0);
                            accAccountDAOobj.updateAccountOpeningAmount(inventoryAccount.getID(), authHandler.round(amountInAccountCurrency, companyid));
                        }
                    }
                } catch (Exception ex) {
                    Logger.getLogger(accProductControllerCMN.class.getName()).log(Level.WARNING, ex.getMessage());
                }
            }
            //ERP-37144 : If Purchase/Sales tax are enabled then emty value can save if user selected tax none.In all cases if tax not selected then we will save blank.
            if (request.getParameter("purchasetaxId")!= null) {
                productMap.put("purchasetaxId", request.getParameter("purchasetaxId"));
            }
            if (request.getParameter("salestaxId") != null) {
                productMap.put("salestaxId", request.getParameter("salestaxId"));
            }
            if (!StringUtil.isNullOrEmpty(request.getParameter("itcAccountId"))) {
                productMap.put("itcAccountId", request.getParameter("itcAccountId"));
            }
            productMap.put("itctype",StringUtil.isNullOrEmpty(request.getParameter("itctype"))?1:Integer.parseInt(request.getParameter("itctype"))); 
            if (StringUtil.isNullOrEmpty(productid)) {
                productMap.put("name", productName);
                productMap.put("producttype", request.getParameter("producttype"));
                productMap.put("productid", sequenceformat.equals("NA")?entryNumber:"");
                productMap.put("createdon", createdon);
                productMap.put("asOfDate", asOfDate);

                productresult = accProductObj.addProduct(productMap);
                product = (Product) productresult.getEntityList().get(0);

                /*id of selected product to use in clone*/
                String cloneId = (String) request.getParameter("cloneId");
                if (!StringUtil.isNullOrEmpty(cloneId)) {
                    /* Getting Category of Product that is being used in cloning process*/
                    KwlReturnObject productresult1 = accProductObj.getProductCategory(cloneId);
                    if (productresult1 != null && productresult1.getEntityList()!=null && !productresult1.getEntityList().isEmpty()) {
                        String productCategoryId = (String) productresult1.getEntityList().get(0);
                        /* Save product Category At the time of cloning product*/
                        accProductObj.saveProductCategoryMapping(product.getID(), productCategoryId);
                    }
                }
                           
                List<StockMovement> stockMovementsList=new ArrayList<StockMovement>();
                double initQuantity =(!StringUtil.isNullOrEmpty(request.getParameter("quantity")))? Double.parseDouble(request.getParameter("quantity")):0;
                if(!StringUtil.isNullOrEmpty(batchDetails)&&initQuantity>0)
                {
                    Map<String,Object> requestDataMap = new HashMap<>();
                    requestDataMap.put("asOfDate",asOfDate);;
                    requestDataMap.put("initialprice", !StringUtil.isNullOrEmpty(request.getParameter("initialprice")) ?Double.parseDouble(request.getParameter("initialprice")):0);  //  initialprice
                    importpoductobj.saveProductBatch(batchDetails,product,requestDataMap,stockMovementsList);
//                productMap.put("id", product.getID());
//                productMap.put("batch", productBatch.getId());
//                productresult = accProductObj.updateProduct(productMap);
                }
                
                if(extraCompanyPreferences!=null && extraCompanyPreferences.isActivateInventoryTab()&& !stockMovementsList.isEmpty()){
                    stockMovementService.addOrUpdateBulkStockMovement(product.getCompany(), product.getID(), stockMovementsList);
                }
            } else {
                
                boolean isUsedInTransaction = false;
                List listObj = accProductModuleService.isProductUsedintransction(productid, companyid, request,false);// false: Product & Services Report
                isUsedInTransaction =(Boolean) listObj.get(0);    //always boolean value
                String updatedDescription = request.getParameter("desc");
                isDescriptionChanged=StringUtil.equal(oldDescription, updatedDescription);
                isProductNameChanged=StringUtil.equal(oldProductName,productName);
                
//                if (isFixedAsset && !StringUtil.isNullOrEmpty(productid)) {
//                    boolean isOpeningPresent = accProductObj.isOpeningPresentForAsset(productid, companyid);
//                    if (isOpeningPresent && !isDescriptionChanged && !isProductNameChanged) {
//                        throw new AccountingException(messageSource.getMessage("acc.asset.cannoteditasset", null, RequestContextUtils.getLocale(request)));
//                    }
//                }
                HashMap<String, Object> deleteSerialMap = new HashMap<String, Object>();
                deleteSerialMap.put("productid", productid);
                deleteSerialMap.put("companyid", companyid);
                if (!StringUtil.isNullOrEmpty(productid) && !isUsedInTransaction) {
                    KwlReturnObject rst = accountingHandlerDAOobj.getObject(Product.class.getName(), productid);
                    Product p = (Product) rst.getEntityList().get(0);
                     accProductObj.deleteProductBatchSerialDetails(deleteSerialMap);
                     request.setAttribute("EditFlag", true);
                       if (!StringUtil.isNullOrEmpty(batchDetails)) {
                        accProductcontrollerObj.saveProductBatch(batchDetails, p, request);
                    }
                }    
//                if(accProductObj.isChild(productid, parentid)){
//                    throw new AccountingException("\""+productName+"\" is a parent of \""+parentName+"\" so can't set \""+parentName+"\" as a parent.");
            	if(!StringUtil.isNullOrEmpty(parentid) && accProductcontrollerObj.isChildorGrandChild(productid, parentid)){
                    throw new AccountingException("\""+productName+"\" is a parent of \""+parentName+"\" so can't set \""+parentName+"\" as a parent.");
                }
                
            /*
             * Following code was not to allow Edit of Assembly Product which we need to allow now
             */
//                if(!allowAssemblyProductToEdit){
//                checkProductTransactions(request, productid, companyid);
//                }
                
                
                 if (isEdit) {
                    KwlReturnObject prodResult = accountingHandlerDAOobj.getObject(Product.class.getName(), productid);

                    Product prodReuse = (Product) prodResult.getEntityList().get(0);

                    String oldReusable = prodReuse.getItemReusability() != null ? prodReuse.getItemReusability().getStringName() : "NULL";
                    String propertyVal = request.getParameter("isreusable") != null ? request.getParameter("isreusable") : "NULL";

                    if (oldReusable.equals("Disposable")) {
                        oldReusable = "Consumable";
                    }

                    if (propertyVal.equals("0")) {
                        propertyVal = "Reusable";
                    } else if (propertyVal.equals("1")) {
                        propertyVal = "Consumable";
                    }

                    if (!oldReusable.equals(propertyVal)) {
                        isReusabilityChanged = true;
                        auditReusabilityMsg =  "changed the Product Reusability Property from " +oldReusable+" to "+propertyVal+" for product";
                    }
                }
                auditMsg = "updated";
                auditID = (isFixedAsset)?AuditAction.ASSET_UPDATION:AuditAction.PRODUCT_UPDATION;
                productMap.put("id", productid);
                productMap.put("productid", request.getParameter("pid"));
                productMap.put("asOfDate", asOfDate);
                productresult = accProductObj.updateProduct(productMap);
                product = (Product) productresult.getEntityList().get(0);
                if(Boolean.parseBoolean(request.getParameter("editQuantity")) == true){	    // Update initial quantity while product edit  
                        String batchLocationId= "";
                        String batchWarehouseId="";
                        double batchQty=0;
                        
                        KwlReturnObject openingBatchDetail= accImportServiceObj.getProductOpeningQtyBatchDetail(product);
                        
                        KwlReturnObject kwl=accProductObj.getInitialPrice(productid, true);
                        double prodInitPurchasePrice = 0;
                        if(kwl !=null && kwl.getEntityList() !=null && kwl.getEntityList().get(0)!=null){
                            prodInitPurchasePrice=(double)kwl.getEntityList().get(0);
                        }
                	double initialPrice = Double.parseDouble(request.getParameter("initialprice"));
                	JSONObject inventoryjson = new JSONObject();
                	inventoryjson.put("productid", productid);
                	inventoryjson.put("quantity", quantity);
                        inventoryjson.put("baseuomquantity", quantity);
                        inventoryjson.put("baseuomrate", 1);
                        if(product.getUnitOfMeasure()!=null) {
                            inventoryjson.put("uomid", product.getUnitOfMeasure().getID());
                        }
                	inventoryjson.put("description", "Inventory Opened");
                	inventoryjson.put("carryin", true);
                	inventoryjson.put("defective", false);
                	inventoryjson.put("newinventory", true);
                	inventoryjson.put("companyid", companyid);
//                	inventoryjson.put("updatedate", appDate);
                	inventoryjson.put("updatedate", asOfDate);//instead of 'new Date()' 'asOfDate' field value is taken - refer ticket ERP-15908
                        
                        KwlReturnObject updatedInvObj = accProductObj.updateInitialInventory(inventoryjson);
                            if (openingBatchDetail != null && openingBatchDetail.getEntityList() != null) { 
                            Iterator it1 = openingBatchDetail.getEntityList().iterator();
                            // if new batch,serial,warehouse,location data is available then only delete previous stock for product
                            if (openingBatchDetail.getEntityList().size() >= 0) { // >= 0 is for  ERP-19149
                                accImportServiceObj.deleteStockAndSMForProduct(product);//delete stock
                                while (it1.hasNext()) { // add new stock
                                    LocationBatchDocumentMapping lbm = (LocationBatchDocumentMapping) it1.next();
                                    if (lbm != null) {
                                        batchWarehouseId = lbm.getBatchmapid().getWarehouse() != null ? lbm.getBatchmapid().getWarehouse().getId() : "";
                                        batchLocationId = lbm.getBatchmapid().getLocation() != null ? lbm.getBatchmapid().getLocation().getId() : "";
                                        if (!StringUtil.isNullOrEmpty(batchLocationId) && !StringUtil.isNullOrEmpty(batchWarehouseId) && isInventoryIntegrationOn) {
                                            accImportServiceObj.updateStockInventorySide(updatedInvObj, inventoryjson, lbm, initialPrice);
                                        }
                                    }

                                }
                            }
                        }
                      if (isEdit && quantity == 0) {    //Delete entry from inventory table if initial quantity is 0 in edit case.
                        Inventory inventoryID = new Inventory();
                        List inventory = accProductObj.searchInventoryId(productid, true);
                        if (inventory.size() != 0) {
                            inventoryID = (Inventory) inventory.get(0);
                            if (inventoryID.getID() != null) {
                                accProductObj.deleteInventory(inventoryID.getID(), companyid);
                    }
                }
            
                    }   
                    }
                }
            
            product = (Product) productresult.getEntityList().get(0);
                            
            //for product mapping--Neeraj D
            if (!StringUtil.isNullOrEmpty(request.getParameter("vendor")) && extraCompanyPreferences.isActivateGroupCompaniesFlag()) {
                if (!StringUtil.isNullOrEmpty(product.getID())) {
                    accVendorCustomerProductDAOobj.deleteVendorProductMapped(null, product.getID());
                }
                String[] vendorMapping = request.getParameter("vendor").split(",");
                JSONArray jArray = null;
                JSONObject job = null;

                if (!StringUtil.isNullOrEmpty(request.getParameter("customJSONString"))) {
                    jArray = new JSONArray(request.getParameter("customJSONString"));
                }
                if (vendorMapping != null) {
                    for (int j = 0; j < vendorMapping.length; j++) {
                        String jsonString = "";
                        if (jArray != null && jArray.length() > 0) {
                            for (int cnt = 0; cnt < jArray.length(); cnt++) {
                                job = jArray.getJSONObject(cnt);
                                if (job.has(vendorMapping[j])) {
                                    // Save Custom data Json of that product 
                                    jsonString = job.get(vendorMapping[j]).toString();
                                    break;
                                }
                            }
                        }
                        if (!StringUtil.isNullOrEmpty(product.getID()) && !StringUtil.isNullOrEmpty(vendorMapping[j])) {
                            accVendorCustomerProductDAOobj.saveVendorProductMapping(vendorMapping[j].toString(), product.getID(), jsonString);
                        }
                    }
                }
            }
            
            // Adding checks for customer Assembly type products. so that they can also work as Assembly type products
            if (product.getProducttype().getID().equals(Producttype.CUSTOMER_ASSEMBLY) ) {
                boolean isAssemblyProductBuild = accProductObj.checkProductBuild(productid);
                if (isAssemblyProductBuild) {
                    throw new AccountingException(messageSource.getMessage("acc.product.assembly.productbuild.exception", null, RequestContextUtils.getLocale(request)));
                }
            }
            if (product.getProducttype().getID().equals(Producttype.CUSTOMER_ASSEMBLY)) {
                boolean isProductBomDetail = accProductObj.checkProductBomDetail(productid);
                if (isProductBomDetail) {
                    throw new AccountingException(messageSource.getMessage("acc.product.assembly.subassembly.exception", null, RequestContextUtils.getLocale(request)));
                }
            }
            /*
            * If JW assembly product used in JWO and also its BOM is mapped then throwing  accounting exception on Product Edit
            */
            if (product.getProducttype().getID().equals(Producttype.CUSTOMER_ASSEMBLY)) {
                boolean isProductBomDetail = accProductObj.checkProductUsedinJWO(productid);
                if (isProductBomDetail) {
                    throw new AccountingException(messageSource.getMessage("acc.product.assembly.usedInJobWO.exception", null, RequestContextUtils.getLocale(request)));
                }
            }
            if(product.getProducttype().getID().equals(Producttype.ASSEMBLY) || product.getProducttype().getID().equals(Producttype.CUSTOMER_ASSEMBLY)) {
            	if (!StringUtil.isNullOrEmpty(productid))
            		isRebuild = Boolean.parseBoolean(request.getParameter("reBuild"));
                accProductcontrollerObj.saveAssemblyProduct(request, product, isRebuild,extraCompanyPreferences.isActivateMRPModule());
            }
            if(extraCompanyPreferences.isActivateMRPModule()){
                Map<String, Object> reqParams = new HashMap();
                reqParams.put("product", product);
                accProductcontrollerObj.saveQualityControlData(request, reqParams);
            }
            if((!StringUtil.isNullOrEmpty(request.getParameter("activateProductComposition"))) && request.getParameter("activateProductComposition").equals("on")){
                accProductcontrollerObj.saveProductComposition(request, product,companyid);
            }
            
//            accProductObj.deleteProductCustomData(product.getID());
             if (!StringUtil.isNullOrEmpty(customfield)) {
                        JSONArray jcustomarray = new JSONArray(customfield);
                        HashMap<String, Object> customrequestParams = new HashMap<String, Object>();
                        customrequestParams.put("customarray", jcustomarray);
                        customrequestParams.put("modulename", Constants.Acc_Product_modulename);
                        customrequestParams.put("moduleprimarykey", Constants.Acc_Productid);
                        customrequestParams.put("modulerecid", product.getID());
                        customrequestParams.put("moduleid", isFixedAsset ? Constants.Acc_FixedAssets_AssetsGroups_ModuleId:Constants.Acc_Product_Master_ModuleId);
                        customrequestParams.put("companyid", companyid);
                        productMap.put("id", product.getID());
                        customrequestParams.put("customdataclasspath", Constants.Acc_Product_custom_data_classpath);
                        KwlReturnObject customDataresult = fieldDataManagercntrl.setCustomData(customrequestParams);
                        if (customDataresult != null && customDataresult.getEntityList().size() > 0) {
                            productMap.put("accproductcustomdataref", product.getID());
                            productresult = accProductObj.updateProduct(productMap);
                        }
                        HashMap<String, Object> customHistoryParams = new HashMap<String, Object>();
                        customHistoryParams.put("productId", product.getID());
                        customHistoryParams.put("customarray", jcustomarray);
                        accProductModuleService.maintainCustomFieldHistoryForProduct(request,customHistoryParams);
                    }
            //Cycle count will performed all the item except service.
//            if(!request.getParameter("producttype").equalsIgnoreCase(Producttype.SERVICE)){
//                int interval = Integer.parseInt(request.getParameter("ccountinterval"));
//                int tolerance = Integer.parseInt(request.getParameter("ccounttolerance"));
////                cyclecount.makeProductCyclecountEntry(session,product,productid,interval,tolerance);
//                HashMap<String, Object> cycleParams = new HashMap<String, Object>();
//                cycleParams.put("productid", product.getID());
//                cycleParams.put("interval", interval);
//                cycleParams.put("tolerance", tolerance);
//                accProductObj.saveProductCycleCount(cycleParams);
//            }

            boolean isFromProductView = false;
            if (request.getParameter("isFromProductView") != null) {
                isFromProductView = StringUtil.isNullOrEmpty(request.getParameter("isFromProductView")) ? false : Boolean.valueOf(request.getParameter("isFromProductView"));
            }
            /*
             * Saving product category in case of product view. Please refer
             * ERM-552.
             */
            if (isFromProductView && !StringUtil.isNullOrEmpty(request.getParameter("productCategory"))) {
                JSONObject paramObj = StringUtil.convertRequestToJsonObject(request);
                paramObj.put("productList", product.getID());
                accProductModuleService.saveProductCategoryMapping(paramObj);
            }

            Inventory inventory;
            if (quantity > 0 && !isFixedAsset) {
                if (StringUtil.isNullOrEmpty(productid)) {
//                    makeNewInventory(session, request, product, quantity, "Inventory Opened", true, false);
                    JSONObject inventoryjson = new JSONObject();
                    inventoryjson.put("productid", product.getID());
                    inventoryjson.put("quantity", quantity);
                    inventoryjson.put("baseuomquantity", quantity);
                    inventoryjson.put("baseuomrate", 1);
                    if(product.getUnitOfMeasure()!=null) {
                        inventoryjson.put("uomid", product.getUnitOfMeasure().getID());
                    }
                    inventoryjson.put("description", "Inventory Opened");
                    inventoryjson.put("carryin", true);
                    inventoryjson.put("defective", false);
                    inventoryjson.put("newinventory", true);
                    inventoryjson.put("companyid", companyid);
//                    inventoryjson.put("updatedate", appDate);
                    inventoryjson.put("updatedate", asOfDate);//instead of 'new Date()' 'asOfDate' field value is taken - refer ticket ERP-15908
                    KwlReturnObject invresult = accProductObj.addInventory(inventoryjson);
                    inventory = (Inventory) invresult.getEntityList().get(0);

//                    updateAssemblyInventory(session, request, quantity, "", "Inventory Opened", product);
                    HashMap<String, Object> assemblyParams = accProductcontrollerObj.getAssemblyRequestParams(request);
                    assemblyParams.put("memo", "Inventory Opened");
                    assemblyParams.put("refno", "");
                    assemblyParams.put("buildproductid", product.getID());
                    assemblyParams.put("cost", quantity* initialprice);
                    accProductObj.updateAssemblyInventory(assemblyParams);
                } else {
//                    Company company = (Company) session.get(Company.class, AuthHandler.getCompanyid(request));
//                    String selQuery = "select id from Inventory   where product.ID =? and newinv='T' and company.companyID=?";
//                    List list = HibernateUtil.executeQuery(session, selQuery, new Object[]{productid, company.getCompanyID()});
                    HashMap<String, Object> inventoryFilter = new HashMap<String, Object>();
                    inventoryFilter.put("productid", productid);
                    inventoryFilter.put("companyid", companyid);
                    KwlReturnObject result = accProductObj.getInventoryEntry(inventoryFilter);
                    List list = result.getEntityList();
//                    Iterator itr = list.iterator();
                    if (list.isEmpty()) {
//                        makeNewInventory(session, request, product, quantity, "Inventory Opened", true, false);
                        JSONObject inventoryjson = new JSONObject();
                        inventoryjson.put("productid", product.getID());
                        inventoryjson.put("quantity", quantity);
                        inventoryjson.put("baseuomquantity", quantity);
                        inventoryjson.put("baseuomrate", 1);
                        if(product.getUnitOfMeasure()!=null) {
                            inventoryjson.put("uomid", product.getUnitOfMeasure().getID());
                        }
                        inventoryjson.put("description", "Inventory Opened");
                        inventoryjson.put("carryin", true);
                        inventoryjson.put("defective", false);
                        inventoryjson.put("newinventory", true);
                        inventoryjson.put("companyid", companyid);
//                        inventoryjson.put("updatedate", appDate);
                        inventoryjson.put("updatedate", asOfDate);//instead of 'new Date()' 'asOfDate' field value is taken - refer ticket ERP-15908
                        KwlReturnObject invresult = accProductObj.addInventory(inventoryjson);
                        inventory = (Inventory) invresult.getEntityList().get(0);

//                        updateAssemblyInventory(session, request, quantity, "", "Inventory Opened", product);
                        HashMap<String, Object> assemblyParams = accProductcontrollerObj.getAssemblyRequestParams(request);
                        assemblyParams.put("memo", "Inventory Opened");
                        assemblyParams.put("refno", "");
                        assemblyParams.put("buildproductid", product.getID());
                         assemblyParams.put("cost", quantity* initialprice);
                        accProductObj.updateAssemblyInventory(assemblyParams);
                    }
/*//Do not update intial quantity after product creation
                     else {
//                        String row = (String) itr.next();
//                        Inventory inventory = (Inventory) session.get(Inventory.class, row);
//                        inventory.setQuantity(quantity);
                        inventory = (Inventory) itr.next();
                        JSONObject inventoryjson = new JSONObject();
                        inventoryjson.put("inventoryid", inventory.getID());
                        inventoryjson.put("quantity", quantity);
                        inventoryjson.put("newinv", "T");
                        KwlReturnObject invresult = accProductObj.updateInventory(inventoryjson);
                        inventory = (Inventory) invresult.getEntityList().get(0);
                    }
 */
                }
            }
            //String pDescription=StringUtil.isNullOrEmpty(product.getDescription())?"":" ("+product.getDescription()+")";
                String module = "",priceMsg="";
                if (isFixedAsset) {
                    module = " Asset Group ";
                    if (!auditMsg.equalsIgnoreCase("updated")) {
                        priceMsg = " with [Purchase Price=" + initialprice + " and Sales Price =" + initialsalesprice + "]";
                    }
                } else {
                    module = " Product ";
                }            
           
                if(!displayuomidold.equals(displayUoM) && product.getDisplayUoM()!=null){
                    auditTrailObj.insertAuditLog(auditID, "User "+sessionHandlerImpl.getUserFullName(request)+" has changed display UOM "+ module +product.getName()+" ["+entryNumber+"] "+ displayuomname + " to "+ product.getDisplayUoM().getName(),request, product.getID(),product.getID());
                }
                if (isFixedAsset) {
                    if (isProductNameChanged) {
                        auditTrailObj.insertAuditLog(auditID, "User " + sessionHandlerImpl.getUserFullName(request) + " has " + auditMsg + " " + module + " [" + entryNumber + "]" + " [ Field : " + "Group Name" + " : " + " Old Value = " + oldProductName + " , " + " New Value = " + product.getName() + " ] " + priceMsg, request, product.getID(), product.getID());
                    }
                    if (isDescriptionChanged) {
                        auditTrailObj.insertAuditLog(auditID, "User " + sessionHandlerImpl.getUserFullName(request) + " has " + auditMsg + " " + module + " [" + entryNumber + "]" + " [ Field : " + "Description" + " : " + " Old Value = " + oldDescription + " , " + " New Value = " + product.getDescription() + " ] " + priceMsg, request, product.getID(), product.getID());
                    }
               }
               auditTrailObj.insertAuditLog(auditID, "User "+sessionHandlerImpl.getUserFullName(request)+" has "+auditMsg + module +product.getName()+" ["+entryNumber+"]"+priceMsg, request, product.getID(),product.getID());
               if(isReusabilityChanged){
               auditTrailObj.insertAuditLog(auditID, "User "+sessionHandlerImpl.getUserFullName(request)+" has "+auditReusabilityMsg+" "+product.getName()+" ["+product.getProductid()+"]", request, product.getID(),product.getID());
               }
        } catch (InventoryException ex) {
            Logger.getLogger(accProductController.class.getName()).log(Level.SEVERE, null, ex);
            throw ServiceException.FAILURE(ex.getMessage(), ex);
        } catch (JSONException ex) {
            Logger.getLogger(accProductController.class.getName()).log(Level.SEVERE, null, ex);
            throw ServiceException.FAILURE(ex.getMessage(), ex);
        } catch (NumberFormatException ex) {
            Logger.getLogger(accProductController.class.getName()).log(Level.SEVERE, null, ex);
            throw ServiceException.FAILURE(ex.getMessage(), ex);
        }   
        return productresult;
    }
    
    
    private boolean isAssetGroupExistsOfSameName(HttpServletRequest request) throws SessionExpiredException, ServiceException {
        boolean isAssetGroupExistsOfSameName = false;

        String productName = request.getParameter("productname");
        String productid = request.getParameter("pid");
        String companyid = sessionHandlerImpl.getCompanyid(request);

        HashMap<String, Object> requestMap = new HashMap<String, Object>();
        requestMap.put("productIDText", productid);
        requestMap.put("companyid", companyid);
        requestMap.put("isForAsset", true);

        KwlReturnObject returnObject = accProductObj.getProductByName(requestMap);

        if (returnObject.getRecordTotalCount() > 0) {
            isAssetGroupExistsOfSameName = true;
        }
        return isAssetGroupExistsOfSameName;
    }
    
    public JSONArray getProductsJsonForCombo(HttpServletRequest request, List list) throws JSONException, ServiceException, SessionExpiredException ,Exception{
    Iterator itr = list.iterator();
        JSONArray jArr = new JSONArray();
        Producttype producttype = new Producttype();                
        
        String companyid = sessionHandlerImpl.getCompanyid(request);
        KwlReturnObject kwlReturnObject = accountingHandlerDAOobj.getObject(CompanyAccountPreferences.class.getName(), companyid);
        CompanyAccountPreferences preferences = (CompanyAccountPreferences) kwlReturnObject.getEntityList().get(0);
        
        KwlReturnObject cap1 = accountingHandlerDAOobj.getObject(ExtraCompanyPreferences.class.getName(), companyid);
        ExtraCompanyPreferences ecf = (ExtraCompanyPreferences) cap1.getEntityList().get(0);

        String productid = request.getParameter("productid");
        String forCurrency = request.getParameter("forCurrency");
        Boolean onlyProduct = Boolean.parseBoolean((String) request.getParameter("onlyProduct"));
        Boolean nonSaleInventory = Boolean.parseBoolean((String) request.getParameter("loadInventory"));
        String module_name = StringUtil.isNullOrEmpty(request.getParameter("module_name"))? "" : request.getParameter("module_name") ;
        boolean carryin = request.getParameter("carryin")!=null ? Boolean.parseBoolean(request.getParameter("carryin")) : false;  //Check from Product Assembly Form. Do not allow service type of Product in BOM.

        boolean isFreeTextSearching = (!StringUtil.isNullOrEmpty(request.getParameter("isFreeTextSearching"))) ? Boolean.parseBoolean(request.getParameter("isFreeTextSearching")) : false;
        
        if (StringUtil.equal(module_name, "INVMODULE")) {
            jArr = getJSONForRegularTransactions(itr, productid, request);
        } else if (StringUtil.equal(module_name, "BUDGETING") || StringUtil.equal(module_name, "PRODUCT_CATEGORY")) {
            jArr = getJSONForBudgeting(itr, productid, request);
        } else if (StringUtil.equal(module_name, "CONSIGNMENT")) {
            jArr = getJSONForConsignment(itr, productid, request);
        } else if (StringUtil.equal(module_name, "CONSIGNMENT_RETURN")) {
            jArr = getJSONForConsignmentReturn(itr, productid, request);
        } else if (StringUtil.equal(module_name, "DELIVERY_ORDER")) {
            jArr = getJSONForDeliveryOrder(itr, productid, request);
        } else {
            while (itr.hasNext()) {
                Product product = (Product) itr.next();
                if (product.getID().equals(productid)) {
                    continue;
                }
                JSONObject obj = new JSONObject();
                String productType = "";
                String gcurrencyid = sessionHandlerImpl.getCurrencyID(request);
                productType = (product.getProducttype() != null ? product.getProducttype().getName() : "");
                if (nonSaleInventory && productType.equals(producttype.Inventory_Non_Sales)) {
                    continue;
                }
                // For free text searching mode, deactivated products will not be included in search
                if(isFreeTextSearching && !product.isIsActive()){
                    continue;
                }
                obj.put("productid", product.getID());
                if (accAccountDAOobj.isTaxActivated(companyid, product.getPurchasetaxid())) {
                    obj.put("purchasetaxId", product.getPurchasetaxid());
                }
                if (accAccountDAOobj.isTaxActivated(companyid, product.getSalestaxid())) {
                    obj.put("salestaxId", product.getSalestaxid());
                }
                obj.put("productname", product.getName());
                obj.put("barcodetype", product.getBarcodefield());  //ERM-304
                obj.put("barcode", product.getBarcode());  //ERM-304
                obj.put("isActive", product.isIsActive());
                obj.put("hasAccess", product.isIsActive());
                obj.put("isAutoAssembly", product.isAutoAssembly());
                obj.put("desc", product.getDescription());
                obj.put("supplierpartnumber", StringUtil.isNullOrEmpty(product.getSupplier()) ? "" : product.getSupplier());
                obj.put("isAsset", product.isAsset());
                obj.put("minorderingquantity", product.getMinOrderingQuantity());
                obj.put("maxorderingquantity", product.getMaxOrderingQuantity());
                if (product.isAsset()) {
                    obj.put("depreciationRate", product.getDepreciationRate());
                    obj.put("depreciationMethod", product.getDepreciationMethod());
                    obj.put("depreciationCostLimit", product.getDepreciationCostLimit());
                    obj.put("depreciationGL", (product.getDepreciationGLAccount() != null) ? product.getDepreciationGLAccount().getID() : "");
                    obj.put("provisionGL", (product.getDepreciationProvisionGLAccount() != null) ? product.getDepreciationProvisionGLAccount().getID() : "");
                    obj.put("assetSaleGL", (product.getSellAssetGLAccount() != null) ? product.getSellAssetGLAccount().getID() : "");
                    obj.put("depreciationGLAccount", (product.getDepreciationGLAccount() != null) ? product.getDepreciationGLAccount().getID() : "");
                    obj.put("depreciationProvisionGLAccount", (product.getDepreciationProvisionGLAccount() != null) ? product.getDepreciationProvisionGLAccount().getID() : "");
                }
                UnitOfMeasure uom = product.getUnitOfMeasure();
                obj.put("uomid", uom == null ? "" : uom.getID());
                obj.put("uomname", uom == null ? "" : uom.getName());
                obj.put("displayUoMid", product.getDisplayUoM() == null? "" : product.getDisplayUoM().getID());
                obj.put("displayUoMName", product.getDisplayUoM() == null? "" : product.getDisplayUoM().getName());
                obj.put("packaging", product.getPackaging() != null ? product.getPackaging().toString() : "");
                obj.put("multiuom", product.isMultiuom());
                obj.put("blockLooseSell", product.isblockLooseSell());
                obj.put("uomschematypeid", product.getUomSchemaType() != null ? product.getUomSchemaType().getID() : "");
                UnitOfMeasure purchaseuom = product.getPurchaseUOM();
                UnitOfMeasure salesuom = product.getSalesUOM();
                obj.put("purchaseuom", purchaseuom == null ? "" : purchaseuom.getID());
                obj.put("purchaseuomname", purchaseuom == null ? "" : purchaseuom.getName());
                obj.put("salesuom", salesuom == null ? "" : salesuom.getID());
                obj.put("salesuomname", salesuom == null ? "" : salesuom.getName());
                obj.put("stockuom", (product.getPackaging()==null || product.getPackaging().getStockUoM()==null) ? (uom == null ? "" : uom.getID()):product.getPackaging().getStockUoM().getID());
                obj.put("caseuom", (product.getPackaging()==null || product.getPackaging().getCasingUoM()==null) ? "":product.getPackaging().getCasingUoM().getID());
                obj.put("inneruom", (product.getPackaging()==null || product.getPackaging().getInnerUoM()==null) ? "":product.getPackaging().getInnerUoM().getID());
                obj.put("caseuomvalue",(product.getPackaging()==null || product.getPackaging().getCasingUoM()==null) ? 1:product.getPackaging().getStockUomQtyFactor(product.getPackaging().getCasingUoM()));
                obj.put("inneruomvalue", (product.getPackaging()==null || product.getPackaging().getInnerUoM()==null) ? 1:product.getPackaging().getStockUomQtyFactor(product.getPackaging().getInnerUoM()));
                obj.put("stockpurchaseuomvalue", purchaseuom == null || product.getPackaging()==null ? 1:product.getPackaging().getStockUomQtyFactor(purchaseuom));
                obj.put("stocksalesuomvalue",salesuom == null || product.getPackaging()==null ? 1 : product.getPackaging().getStockUomQtyFactor(salesuom));
                obj.put("isLocationForProduct", product.isIslocationforproduct());
                obj.put("isWarehouseForProduct", product.isIswarehouseforproduct());
                obj.put("isRowForProduct", product.isIsrowforproduct());
                obj.put("isRackForProduct", product.isIsrackforproduct());
                obj.put("isBinForProduct", product.isIsbinforproduct());
                obj.put("isBatchForProduct", product.isIsBatchForProduct());
                obj.put("isSerialForProduct", product.isIsSerialForProduct());
                obj.put("isSKUForProduct", product.isIsSKUForProduct());
                obj.put("isRecyclable", product.isRecyclable());
                obj.put("rcmapplicable", product.isRcmApplicable());
                obj.put("recycleQuantity", product.getRecycleQuantity());
                obj.put("activateProductComposition", product.isActivateProductComposition());
                obj.put("purchaseacctaxcode", ((product.getPurchaseAccount() != null && (!StringUtil.isNullOrEmpty(product.getPurchaseAccount().getTaxid()))) ? product.getPurchaseAccount().getTaxid() : ""));
                obj.put("salesacctaxcode", ((product.getSalesAccount() != null && (!StringUtil.isNullOrEmpty(product.getSalesAccount().getTaxid()))) ? product.getSalesAccount().getTaxid() : ""));
                obj.put("warrantyperiod", product.getWarrantyperiod());
                obj.put("warrantyperiodsal", product.getWarrantyperiodsal());
                obj.put("location", (product.getLocation() != null ? product.getLocation().getId() : ""));
                obj.put("warehouse", (product.getWarehouse() != null ? product.getWarehouse().getId() : ""));
                obj.put("isWastageApplicable", product.isWastageApplicable());
                obj.put("productweightperstockuom",  product.getProductWeightPerStockUom());
                obj.put("productweightincludingpakagingperstockuom", product.getProductWeightIncludingPakagingPerStockUom());
                obj.put("productvolumeperstockuom",product.getProductVolumePerStockUom());
                obj.put("productvolumeincludingpakagingperstockuom",product.getProductVolumeIncludingPakagingPerStockUom());
                obj.put("isQAEnable",product.isQaenable());
                obj.put("itctype", product.getItcType());
                // }
//                if (ecf.getLineLevelTermFlag()==1) {  // Fetch Vat term details of Product
//                    String salesOrPurchase = request.getParameter("termSalesOrPurchaseCheck") != null ? request.getParameter("termSalesOrPurchaseCheck").toString() : "false";
//                    boolean isDefault = request.getParameter("isDefault")!= null ? Boolean.parseBoolean(request.getParameter("isDefault")):false;
//                    Map<String, Object> mapData = new HashMap<String, Object>();
//                    mapData.put("productid", product.getID());
//                    mapData.put("salesOrPurchase", salesOrPurchase);
//                    if(isDefault){
//                        mapData.put("isDefault", isDefault);
//                    }
//                    KwlReturnObject result6 = accProductObj.getProductTermDetails(mapData);
//                    if (result6.getEntityList() != null && result6.getEntityList().size() > 0 && result6.getEntityList().get(0) != null) {
//                        ArrayList<ProductTermsMap> productTermDetail = (ArrayList<ProductTermsMap>) result6.getEntityList();
//                        JSONArray productTermJsonArry = fetchProductTermMapDetails(productTermDetail);
//                        obj.put("LineTermdetails", productTermJsonArry.toString());
//                    }
//                    if(isDefault){
//                        mapData.put("isDefault", false);
//                    }
//                    KwlReturnObject result7 = accProductObj.getProductTermDetails(mapData);
//                    if (result7.getEntityList() != null && result7.getEntityList().size() > 0 && result7.getEntityList().get(0) != null) {
//                        ArrayList<ProductTermsMap> productTermDetail = (ArrayList<ProductTermsMap>) result7.getEntityList();
//                        JSONArray productTermJsonArry = fetchProductTermMapDetails(productTermDetail);
//                        obj.put("uncheckedTermdetails", productTermJsonArry.toString());
//                    }
//                }
                
                if(!onlyProduct && !storageHandlerImpl.GetLowercaseCompanyId().contains(companyid) ||product.getParent() !=null){ 
                    
                    obj.put("purchaseretaccountid", (product.getPurchaseReturnAccount() != null ? product.getPurchaseReturnAccount().getID() : ""));
                    obj.put("salesretaccountid", (product.getSalesReturnAccount() != null ? product.getSalesReturnAccount().getID() : ""));
                    /* forCurrency- Transaction Currency. Only passed from CostAndMargin window in SO and CQ*/
                    if (!StringUtil.isNullOrEmpty(forCurrency)) { /* TRANSACTION CURRENCY*/
                        Map<String, Object> currencyParams = AccountingManager.getGlobalParams(request);
                        if (gcurrencyid.equals(forCurrency)) {
                            /* IF TRANSACTION CURRENCY IS EMPTY THEN GET PRICE IN BASE CURRENCY*/
                            KwlReturnObject purchase = accProductObj.getProductPrice(product.getID(), true, null, "", gcurrencyid);
                            obj.put("purchaseprice", purchase.getEntityList().isEmpty() ? 0 : (purchase.getEntityList().get(0) == null ? 0 : (Double) purchase.getEntityList().get(0)));
                        } else {
                            /* IF TRANSACTION CURRENCY IS NOT EMPTY THEN GET PRICE AND CONVERT IT INTO BASE CURRENCY*/
                            KwlReturnObject purchase = accProductObj.getProductPrice(product.getID(), true, null, "", forCurrency);
                            if (!purchase.getEntityList().isEmpty() && purchase.getEntityList().get(0) != null) {
                                double purchaseprice = (Double) purchase.getEntityList().get(0);
                                KwlReturnObject pplist = accCurrencyDAOobj.getCurrencyToBaseAmount(currencyParams, purchaseprice, forCurrency, null, 0);
                                obj.put("purchaseprice", pplist.getEntityList().get(0));
                            } else {
                                purchase = accProductObj.getProductPrice(product.getID(), true, null, "", gcurrencyid);
                                obj.put("purchaseprice", purchase.getEntityList().isEmpty() ? 0 : (purchase.getEntityList().get(0) == null ? 0 : (Double) purchase.getEntityList().get(0)));
                            }
                        }
                    } else {
                        KwlReturnObject purchase = accProductObj.getProductPrice(product.getID(), true, null, "", "");
                        obj.put("purchaseprice", purchase.getEntityList().get(0));
                    }
                    KwlReturnObject sales = accProductObj.getProductPrice(product.getID(), false, null, "","");
                    obj.put("saleprice", sales.getEntityList().get(0));
                } else {
                    if (onlyProduct) {
                        if (!StringUtil.isNullOrEmpty(forCurrency)) { /* TRANSACTION CURRENCY*/
                            Map<String, Object> currencyParams = AccountingManager.getGlobalParams(request);
                            if (gcurrencyid.equals(forCurrency)) {
                                /* IF TRANSACTION CURRENCY IS EMPTY THEN GET PRICE IN BASE CURRENCY*/
                                KwlReturnObject purchase = accProductObj.getProductPrice(product.getID(), true, null, "", gcurrencyid);
                                obj.put("purchaseprice", purchase.getEntityList().isEmpty() ? 0 : (purchase.getEntityList().get(0) == null ? 0 : (Double) purchase.getEntityList().get(0)));
                            } else {
                                /* IF TRANSACTION CURRENCY IS NOT EMPTY THEN GET PRICE AND CONVERT IT INTO BASE CURRENCY*/
                                KwlReturnObject purchase = accProductObj.getProductPrice(product.getID(), true, null, "", forCurrency);
                                if (!purchase.getEntityList().isEmpty() && purchase.getEntityList().get(0) != null) {
                                    double purchaseprice = (Double) purchase.getEntityList().get(0);
                                    KwlReturnObject pplist = accCurrencyDAOobj.getCurrencyToBaseAmount(currencyParams, purchaseprice, forCurrency, null, 0);
                                    obj.put("purchaseprice", pplist.getEntityList().get(0));
                                } else {
                                    purchase = accProductObj.getProductPrice(product.getID(), true, null, "", gcurrencyid);
                                    obj.put("purchaseprice", purchase.getEntityList().isEmpty() ? 0 : (purchase.getEntityList().get(0) == null ? 0 : (Double) purchase.getEntityList().get(0)));
                                }
                            }
                        } else {
                            KwlReturnObject purchase = accProductObj.getProductPrice(product.getID(), true, null, "", "");
                            obj.put("purchaseprice", purchase.getEntityList().get(0));
                        }
                    }
                }

                obj.put("dependentType", (product.getDependenttype() != null ? (product.getDependenttype().getType()==1)?product.getDependenttype().getID() : "":""));
                obj.put("dependentTypeNo", (product.getDependenttype() != null ? (product.getDependenttype().getType()==0)?product.getDependenttype().getID() : "":""));
                obj.put("dependentTypeQty", (product.getDependenttype() != null ? (product.getDependenttype().getType()==2)?product.getDependenttype().getID() : "":""));
                obj.put("parentDependentType", (product.getDependenttype() != null ? product.getDependenttype().getID():""));
                obj.put("timeintervalChk", product.isIntervalfield());
                obj.put("addshiplentheithqty", product.isAddshiplentheithqty());
                obj.put("hourtimeinterval", product.getTimeinterval());
                obj.put("noofquqntity", product.getNoofquqntity());
                if (product.getChildren().size() > 0) {
                    obj.put("isparentproduct", true);
                } else {
                    obj.put("isparentproduct", false);
                }
                obj.put("parentid", ((product.getParent() != null) ? product.getParent().getID() : ""));
                obj.put("parentname", ((product.getParent() != null) ? product.getParent().getName() : ""));
                obj.put("noofqtyvalue", product.getNoofqtyvalue());

                double quantity = 1;
                double baseuomrate = 1;
                JSONObject jObj = null;
                if (!StringUtil.isNullOrEmpty(ecf.getColumnPref())) {
                    jObj = new JSONObject((String) ecf.getColumnPref());
                    if (jObj.has(Constants.isDisplayUOM) && jObj.get(Constants.isDisplayUOM) != null && (Boolean) jObj.get(Constants.isDisplayUOM) != false) {
                        obj = accProductObj.getProductDisplayUOM(product, quantity, baseuomrate, carryin, obj);
                    }
                }
                obj.put("intervalField", product.isIntervalfield());
                String type = "";
            if(product.getProducttype() != null){
                    if (storageHandlerImpl.GetVRnetCompanyId().contains(companyid)) {
                        if (StringUtil.equal(product.getProducttype().getName(), "Inventory Assembly")) {
                            type = "Inventory Bundle";
                        } else {
                            type = product.getProducttype().getName();
                        }
                    } else {
                        type = product.getProducttype().getName();
                    }
                }

            if(preferences.isInventoryAccountingIntegration()){
                JSONArray customJSONArray=getCustomColumnData(product.getID(),companyid);
                if(customJSONArray.length()>0){
                    for(int count=0;count<customJSONArray.length();count++){

                        JSONObject customJSONObject=customJSONArray.getJSONObject(count);                        
                        String customFieldName=StringUtil.isNullOrEmpty(customJSONObject.optString("fieldname",""))?"":customJSONObject.optString("fieldname","");
                        if(!customJSONObject.isNull("fieldname") && (customFieldName.equalsIgnoreCase(Constants.CUSTOM_STOP_PURCHASE)||customFieldName.equalsIgnoreCase(Constants.CUSTOM_OBSOLETE)) && (customJSONObject.getInt("fieldtype")==Constants.CUSTOM_CHECKBOX)){
                            if(!customJSONObject.isNull("fieldData") && !StringUtil.isNullOrEmpty(customJSONObject.optString("fieldData","")) && customJSONObject.getString("fieldData").equalsIgnoreCase("true")){
                                    obj.put("isStopPurchase", true);
                                    break;
                                }
                            }
                        }
                    }
                }
                if (product.isAsset()) {     //For Fixed Asset Group, type will be "Asset"
                    obj.put("type", "Asset");
                } else {
                    obj.put("type", type);
                }
                obj.put("pid", product.getProductid());
                String prodtype=(product.getProducttype()!=null?product.getProducttype().getID():"");
                obj.put("producttype", prodtype);         
                
                if (prodtype.equals(Producttype.ASSEMBLY) ||  prodtype.equals(Producttype.CUSTOMER_ASSEMBLY)  ) {

                    Map<String, Object> requestParams = new HashMap<>();
                    requestParams.put(Constants.productid, product.getID());
                    requestParams.put("isdefaultbom", true);

                    KwlReturnObject bomresult = accProductObj.getBOMDetail(requestParams);
                    List<BOMDetail> bomdetails = bomresult.getEntityList();
                    if (!bomdetails.isEmpty()) {
                        BOMDetail bomdObj = bomdetails.get(0);
                        obj.put("defaultbomid", bomdObj.getID());
                        obj.put("defaultbomcode", bomdObj.getBomCode());
                    }
                }

                if (product.isblockLooseSell()) {
                    KwlReturnObject result = accProductObj.getAvailableQuantityInSelectedUOM(product.getID(), product.getUnitOfMeasure().getID());
                    obj.put("quantity", (result.getEntityList().get(0) == null ? 0 : result.getEntityList().get(0)));
                } else {
                    KwlReturnObject result = accProductObj.getQuantity(product.getID());;
                    obj.put("quantity", (result.getEntityList().get(0) == null ? 0 : result.getEntityList().get(0)));
                }

                KwlReturnObject result4 = accProductObj.getVendorConsignedQuantity(product.getID());
                obj.put("venconsignuomquantity", (result4.getEntityList().get(0) == null ? 0 : result4.getEntityList().get(0)));

                KwlReturnObject result5 = accProductObj.getConsignedQuantity(product.getID());
                obj.put("consignquantity", (result5.getEntityList().get(0) == null ? 0 : result5.getEntityList().get(0)));
                jArr.put(obj);
            }
        }
        return jArr;
    }
    /**
     * 
     * @param request
     * @param list
     * @return Json array
     * @Description Written New function to get mapped product JSON of customer.
     */
    public JSONArray getMappedProductsJsonForCombo(HttpServletRequest request, List list) throws JSONException, ServiceException, SessionExpiredException, Exception {
        Iterator itr = list.iterator();
        JSONArray jArr = new JSONArray();
        String moduleid = "";
        if (!StringUtil.isNullOrEmpty(request.getParameter("moduleId"))) {
            moduleid = request.getParameter("moduleId");
        }
        String companyid = sessionHandlerImpl.getCompanyid(request);
        String productid = request.getParameter("productid");
        DateFormat sdf = new SimpleDateFormat(sessionHandlerImpl.getUserDateFormat(request));
        while (itr.hasNext()) {
            Object[] row = (Object[]) itr.next();
            JSONObject obj = new JSONObject();
            JSONObject finalJobj = new JSONObject();
            Product product = (Product) row[0];
            obj.put("productid", product.getID());
            if (accAccountDAOobj.isTaxActivated(companyid, product.getPurchasetaxid())) {
                obj.put("purchasetaxId", product.getPurchasetaxid());
            }
            if (accAccountDAOobj.isTaxActivated(companyid, product.getSalestaxid())) {
                obj.put("salestaxId", product.getSalestaxid());
            }
            obj.put("pid", product.getProductid());
            obj.put("productname", product.getProductName());
            obj.put("desc", product.getDescription());
            obj.put("uomid", product.getUnitOfMeasure() != null ? product.getUnitOfMeasure().getID():"");
            obj.put("uomname", product.getUnitOfMeasure() != null ? product.getUnitOfMeasure().getNameEmptyforNA():"");
            obj.put("multiuom", product.isMultiuom());
            obj.put("uomschematypeid", product.getUomSchemaType() != null ? product.getUomSchemaType().getID() : "");
            obj.put("isLocationForProduct",product.isIslocationforproduct());
            obj.put("isWarehouseForProduct",product.isIswarehouseforproduct());
            UnitOfMeasure purchaseuom = product.getPurchaseUOM();
            UnitOfMeasure salesuom = product.getSalesUOM();
            obj.put("purchaseuom", purchaseuom == null ? "" : purchaseuom.getID());
            obj.put("purchaseuomname", purchaseuom == null ? "" : purchaseuom.getName());
            obj.put("salesuom", salesuom == null ? "" : salesuom.getID());
            obj.put("salesuomname", salesuom == null ? "" : salesuom.getName());
            obj.put("stockuom", (product.getPackaging() == null || product.getPackaging().getStockUoM() == null) ? (product.getUnitOfMeasure() == null ? "" : product.getUnitOfMeasure().getID()) : product.getPackaging().getStockUoM().getID());
            obj.put("caseuom", (product.getPackaging() == null || product.getPackaging().getCasingUoM() == null) ? "" : product.getPackaging().getCasingUoM().getID());
            obj.put("inneruom", (product.getPackaging() == null || product.getPackaging().getInnerUoM() == null) ? "" : product.getPackaging().getInnerUoM().getID());
            obj.put("caseuomvalue", (product.getPackaging() == null || product.getPackaging().getCasingUoM() == null) ? 1 : product.getPackaging().getStockUomQtyFactor(product.getPackaging().getCasingUoM()));
            obj.put("inneruomvalue", (product.getPackaging() == null || product.getPackaging().getInnerUoM() == null) ? 1 : product.getPackaging().getStockUomQtyFactor(product.getPackaging().getInnerUoM()));
            obj.put("stockpurchaseuomvalue", purchaseuom == null || product.getPackaging() == null ? 1 : product.getPackaging().getStockUomQtyFactor(purchaseuom));
            obj.put("stocksalesuomvalue", salesuom == null || product.getPackaging() == null ? 1 : product.getPackaging().getStockUomQtyFactor(salesuom));
            obj.put("isBatchForProduct",product.isIsBatchForProduct());
            obj.put("isSerialForProduct",product.isIsSerialForProduct());
            obj.put("location", (product.getLocation() != null ? product.getLocation().getId() : ""));
            obj.put("warehouse", (product.getWarehouse() != null ? product.getWarehouse().getId() : ""));
            if (product.isblockLooseSell()) {
                KwlReturnObject result = accProductObj.getAvailableQuantityInSelectedUOM(product.getID(), product.getUnitOfMeasure().getID());
                obj.put("availablequantity", (result.getEntityList().get(0) == null ? 0 : result.getEntityList().get(0)));
                obj.put("availableQtyInSelectedUOM", (result.getEntityList().get(0) == null ? 0 : result.getEntityList().get(0)));
            } else {
                KwlReturnObject result = accProductObj.getQuantity(product.getID());;
                obj.put("availablequantity", (result.getEntityList().get(0) == null ? 0 : result.getEntityList().get(0)));
                obj.put("availableQtyInSelectedUOM", (result.getEntityList().get(0) == null ? 0 : result.getEntityList().get(0)));
            }
            obj.put("type", (product.getProducttype()!=null?product.getProducttype().getName():""));
            String jsonString = (String) row[1];

            if (!StringUtil.isNullOrEmpty(jsonString)) {
                JSONArray array = new JSONArray(jsonString);
                if (array.length() >= 0) {

                    for (int i = 0; i < array.length(); i++) {

                        JSONObject jsonObj = array.getJSONObject(i);
                        Iterator<String> keys = jsonObj.keys();
                        while (keys.hasNext()) {
                            String fieldlable = "";
                            String value = "";
                            String productmoduleFieldid = keys.next();
                            String ProductModulevalue = jsonObj.getString(productmoduleFieldid);

                            KwlReturnObject custumObjresult = accountingHandlerDAOobj.getObject(FieldParams.class.getName(), productmoduleFieldid);
                            FieldParams fieldParams = (FieldParams) custumObjresult.getEntityList().get(0);
                            if (fieldParams != null) {
                                fieldlable = fieldParams.getFieldname();
                            }
                            
                            String temp = "";
                            /**
                             * Parse a date field to user date format or else pass as it is if not date.
                             */
                            try {
                                temp = sdf.format(sdf.parse(ProductModulevalue));
                                ProductModulevalue = temp;
                            } catch (ParseException ex) {
                                ProductModulevalue = ProductModulevalue;
                            }
                            
                            finalJobj.put(fieldlable, ProductModulevalue);
                        }

                    }
                }
            }
            obj.put("jsonString", finalJobj);
            jArr.put(obj);
        }
        return jArr;
    }

       
    public JSONArray fetchProductTermMapDetails(ArrayList<ProductTermsMap> productTermDetail) {
        
        JSONArray productTermJsonArry = new JSONArray();
        try{
        for (ProductTermsMap productTermsMapObj : productTermDetail) {
            JSONObject productTermJsonObj = new JSONObject();
            productTermJsonObj.put("productid", productTermsMapObj.getProduct().getID());
            productTermJsonObj.put("termid", productTermsMapObj.getTerm().getId());
            productTermJsonObj.put("term", productTermsMapObj.getTerm().getTerm());
            productTermJsonObj.put("termtype", productTermsMapObj.getTerm().getTermType());
            productTermJsonObj.put("termsequence", productTermsMapObj.getTerm().getTermSequence());
            productTermJsonObj.put("formula", productTermsMapObj.getTerm().getFormula());
            productTermJsonObj.put("formulaids", productTermsMapObj.getTerm().getFormula());
            productTermJsonObj.put("termpercentage", productTermsMapObj.getPercentage());
            productTermJsonObj.put("originalTermPercentage", productTermsMapObj.getTerm().getPercentage()); // For Service tax term abatment calculation
            productTermJsonObj.put("termamount", "0.0");
            productTermJsonObj.put("assessablevalue", "0.0");
            productTermJsonObj.put("glaccountname", productTermsMapObj.getAccount().getAccountName());
            productTermJsonObj.put("accountid", productTermsMapObj.getAccount().getID());
            productTermJsonObj.put("glaccount", productTermsMapObj.getAccount().getID());
            productTermJsonObj.put("IsOtherTermTaxable", productTermsMapObj.getTerm().isOtherTermTaxable());
            productTermJsonObj.put("sign", productTermsMapObj.getTerm().getSign());
            productTermJsonObj.put("taxtype", productTermsMapObj.getTaxType());
            productTermJsonObj.put("purchasevalueorsalevalue", productTermsMapObj.getPurchaseValueOrSaleValue());
            productTermJsonObj.put("isDefault", productTermsMapObj.isIsDefault());
            productTermJsonObj.put("deductionorabatementpercent", productTermsMapObj.getDeductionOrAbatementPercent());
            productTermJsonObj.put("taxvalue", productTermsMapObj.getPercentage());
            productTermJsonObj.put("formType", !StringUtil.isNullOrEmpty(productTermsMapObj.getTerm().getFormType()) ? productTermsMapObj.getTerm().getFormType() : "1"); // 1 for without form SDP-7150
            productTermJsonObj.put("isIsAdditionalTax", productTermsMapObj.getTerm().isIsAdditionalTax());
            productTermJsonObj.put("includeInTDSCalculation", productTermsMapObj.getTerm().isIncludeInTDSCalculation());
            productTermJsonArry.put(productTermJsonObj);
        }
        }catch(Exception ex){
            Logger.getLogger(accProductControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
        }
        return productTermJsonArry;
    }
    public JSONArray getJSONForRegularTransactions(Iterator itr, String productid, HttpServletRequest request) throws ServiceException, SessionExpiredException, JSONException, Exception {
        JSONArray jArr = new JSONArray();
        KwlReturnObject kwlReturnObject = null;
        
        Producttype producttype = new Producttype(); 
        String companyid = sessionHandlerImpl.getCompanyid(request);
        
        kwlReturnObject = accountingHandlerDAOobj.getObject(CompanyAccountPreferences.class.getName(), companyid);
        CompanyAccountPreferences preferences = (CompanyAccountPreferences) kwlReturnObject.getEntityList().get(0);
        
        Boolean nonSaleInventory = Boolean.parseBoolean((String) request.getParameter("loadInventory"));
        
        int moduleid = (StringUtil.isNullOrEmpty(request.getParameter("moduleid")))? 0 : Integer.parseInt(request.getParameter("moduleid"));
        
        boolean isStopPurchase = (moduleid == 22 ||moduleid == 20 ||moduleid == 2)? false : true;
        Boolean onlyProduct = StringUtil.isNullOrEmpty(request.getParameter("onlyProduct")) ? false : Boolean.parseBoolean((String) request.getParameter("onlyProduct"));
        String gcurrencyid = sessionHandlerImpl.getCurrencyID(request);
        boolean getSOPOflag = request.getParameter("getSOPOflag") != null ? Boolean.parseBoolean(request.getParameter("getSOPOflag")) : false;
        boolean isFreeTextSearching = (!StringUtil.isNullOrEmpty(request.getParameter("isFreeTextSearching"))) ? Boolean.parseBoolean(request.getParameter("isFreeTextSearching")) : false;
         Map<String, Object> ProductFieldsRequestParams = new HashMap();
            ProductFieldsRequestParams.put("companyid", companyid);
            ProductFieldsRequestParams.put("moduleid", moduleid);
            List masterFieldsResultList = CommonFunctions.getproductmastersFieldsToShowLineLevel(ProductFieldsRequestParams, accountingHandlerDAOobj);

        while (itr.hasNext()) {
            JSONObject obj = new JSONObject();
            Product product = (Product) itr.next();



            if (product.getID().equals(productid)) {
                continue;
            }
            
            String productType = "";
            String productTypeId = "";
            productType = (product.getProducttype() != null ? product.getProducttype().getName() : "");
            productTypeId = (product.getProducttype() != null ? product.getProducttype().getID() : "");
            if (nonSaleInventory && productType.equals(producttype.Inventory_Non_Sales)) {
                continue;
            }
            // For free text searching mode, deactivated products will not be included in search
            if(isFreeTextSearching && !product.isIsActive()){
                    continue;
            }
            obj.put("productid", product.getID());
            if (accAccountDAOobj.isTaxActivated(companyid, product.getPurchasetaxid())) {
                obj.put("purchasetaxId", product.getPurchasetaxid());
            }
            if (accAccountDAOobj.isTaxActivated(companyid, product.getSalestaxid())) {
                obj.put("salestaxId", product.getSalestaxid());
            }
            obj.put("hsncode", !StringUtil.isNullOrEmpty(product.getHSNCode())?product.getHSNCode():"");
            obj.put("productname", product.getName());
            obj.put("barcodetype", product.getBarcodefield());  //ERM-304
            obj.put("barcode", product.getBarcode());  
            obj.put("isActive", product.isIsActive());
            obj.put("hasAccess", product.isIsActive());
            obj.put("desc", product.getDescription());
            obj.put("supplierpartnumber", StringUtil.isNullOrEmpty(product.getSupplier()) ? "" : product.getSupplier());
//            obj.put("isAsset", product.isAsset());
            obj.put("minorderingquantity", product.getMinOrderingQuantity());
            obj.put("maxorderingquantity", product.getMaxOrderingQuantity());
            obj.put("isAutoAssembly", product.isAutoAssembly());
//            if (product.isAsset()) {
//                obj.put("depreciationRate", product.getDepreciationRate());
//                obj.put("depreciationMethod", product.getDepreciationMethod());
//                obj.put("depreciationCostLimit", product.getDepreciationCostLimit());
//                obj.put("depreciationGL", (product.getDepreciationGLAccount() != null) ? product.getDepreciationGLAccount().getID() : "");
//                obj.put("provisionGL", (product.getDepreciationProvisionGLAccount() != null) ? product.getDepreciationProvisionGLAccount().getID() : "");
//                obj.put("assetSaleGL", (product.getSellAssetGLAccount() != null) ? product.getSellAssetGLAccount().getID() : "");
//                obj.put("depreciationGLAccount", (product.getDepreciationGLAccount() != null) ? product.getDepreciationGLAccount().getID() : "");
//                obj.put("depreciationProvisionGLAccount", (product.getDepreciationProvisionGLAccount() != null) ? product.getDepreciationProvisionGLAccount().getID() : "");
//            }
            UnitOfMeasure uom = product.getUnitOfMeasure();
            obj.put("uomid", uom == null ? "" : uom.getID());
            obj.put("uomname", uom == null ? "" : uom.getNameEmptyforNA());
            obj.put("multiuom", product.isMultiuom());
            obj.put("blockLooseSell", product.isblockLooseSell());
            obj.put("uomschematypeid", product.getUomSchemaType() != null ? product.getUomSchemaType().getID() : "");
            obj.put("displayUoMid", product.getDisplayUoM() == null ? "" : product.getDisplayUoM().getID());
            obj.put("displayUoMName", product.getDisplayUoM() == null? "" : product.getDisplayUoM().getNameEmptyforNA());
            //get inspection template from product level
            obj.put("inspectionTemplate", product.getInspectionTemplate() == null ? "" : product.getInspectionTemplate().getId());
            UnitOfMeasure purchaseuom = product.getPurchaseUOM();
            UnitOfMeasure salesuom = product.getSalesUOM();
            obj.put("purchaseuom", purchaseuom == null ? "" : purchaseuom.getID());
            //obj.put("purchaseuomname", purchaseuom == null ? "" : purchaseuom.getName());
            obj.put("salesuom", salesuom == null ? "" : salesuom.getID());
            //obj.put("salesuomname", salesuom == null ? "" : salesuom.getName());
            obj.put("stockuom", (product.getPackaging() == null || product.getPackaging().getStockUoM() == null) ? (uom == null ? "" : uom.getID()) : product.getPackaging().getStockUoM().getID());
            obj.put("caseuom", (product.getPackaging() == null || product.getPackaging().getCasingUoM() == null) ? "" : product.getPackaging().getCasingUoM().getID());
            obj.put("inneruom", (product.getPackaging() == null || product.getPackaging().getInnerUoM() == null) ? "" : product.getPackaging().getInnerUoM().getID());
            obj.put("caseuomvalue", (product.getPackaging() == null || product.getPackaging().getCasingUoM() == null) ? 1 : product.getPackaging().getStockUomQtyFactor(product.getPackaging().getCasingUoM()));
            obj.put("inneruomvalue", (product.getPackaging() == null || product.getPackaging().getInnerUoM() == null) ? 1 : product.getPackaging().getStockUomQtyFactor(product.getPackaging().getInnerUoM()));
            obj.put("stockpurchaseuomvalue", purchaseuom == null || product.getPackaging() == null ? 1 : product.getPackaging().getStockUomQtyFactor(purchaseuom));
            obj.put("stocksalesuomvalue", salesuom == null || product.getPackaging() == null ? 1 : product.getPackaging().getStockUomQtyFactor(salesuom));
            obj.put("isLocationForProduct", product.isIslocationforproduct());
            obj.put("isWarehouseForProduct", product.isIswarehouseforproduct());
            obj.put("isRowForProduct", product.isIsrowforproduct());
            obj.put("isRackForProduct", product.isIsrackforproduct());
            obj.put("isBinForProduct", product.isIsbinforproduct());
            obj.put("isBatchForProduct", product.isIsBatchForProduct());
            obj.put("isSerialForProduct", product.isIsSerialForProduct());
            obj.put("isSKUForProduct", product.isIsSKUForProduct());
            obj.put("productpurchaseaccountid", product.getPurchaseAccount() != null ? product.getPurchaseAccount().getID() : "");
            obj.put("productsalesaccountid", product.getSalesAccount() != null ? product.getSalesAccount().getID() : "");
            //obj.put("isRecyclable", product.isRecyclable());
            //obj.put("recycleQuantity", product.getRecycleQuantity());
            //obj.put("activateProductComposition", product.isActivateProductComposition());
            //obj.put("purchaseacctaxcode", ((product.getPurchaseAccount() != null && (!StringUtil.isNullOrEmpty(product.getPurchaseAccount().getTaxid()))) ? product.getPurchaseAccount().getTaxid() : ""));
            //obj.put("salesacctaxcode", ((product.getSalesAccount() != null && (!StringUtil.isNullOrEmpty(product.getSalesAccount().getTaxid()))) ? product.getSalesAccount().getTaxid() : ""));
            obj.put("warrantyperiod", product.getWarrantyperiod());
            obj.put("warrantyperiodsal", product.getWarrantyperiodsal());
            obj.put("location", (product.getLocation() != null ? product.getLocation().getId() : ""));
            obj.put("warehouse", (product.getWarehouse() != null ? product.getWarehouse().getId() : ""));
            obj.put("productweightperstockuom", product.getProductWeightPerStockUom());
            obj.put("productweightincludingpakagingperstockuom", product.getProductWeightIncludingPakagingPerStockUom());
            obj.put("productvolumeperstockuom", product.getProductVolumePerStockUom());
            obj.put("productvolumeincludingpakagingperstockuom", product.getProductVolumeIncludingPakagingPerStockUom());
            obj.put("itctype", product.getItcType());
            if (productTypeId.equals(Producttype.ASSEMBLY) || productTypeId.equals(Producttype.CUSTOMER_ASSEMBLY)) {

                Map<String, Object> requestParams = new HashMap<>();
                requestParams.put(Constants.productid, product.getID());
                requestParams.put("isdefaultbom", true);

                KwlReturnObject bomresult = accProductObj.getBOMDetail(requestParams);
                List<BOMDetail> bomdetails = bomresult.getEntityList();
                if(!bomdetails.isEmpty()){
                    BOMDetail bomdObj = bomdetails.get(0);
                    obj.put("defaultbomid", bomdObj.getID());
                    obj.put("defaultbomcode", bomdObj.getBomCode());
                }
                
            }
            // }
            /*
             * if (!onlyProduct &&
             * !storageHandlerImpl.GetLowercaseCompanyId().contains(companyid)
             * || product.getParent() != null) {

             //obj.put("purchaseretaccountid", (product.getPurchaseReturnAccount() != null ? product.getPurchaseReturnAccount().getID() : ""));
             //obj.put("salesretaccountid", (product.getSalesReturnAccount() != null ? product.getSalesReturnAccount().getID() : ""));
                KwlReturnObject purchase = accProductObj.getProductPrice(product.getID(), true, null, "", "");
                obj.put("purchaseprice", purchase.getEntityList().get(0));
//                KwlReturnObject sales = accProductObj.getProductPrice(product.getID(), false, null, "", "");
//                obj.put("saleprice", sales.getEntityList().get(0));
            } else {
                if (onlyProduct) {
                    KwlReturnObject purchase = accProductObj.getProductPrice(product.getID(), true, null, "", "");
                    obj.put("purchaseprice", purchase.getEntityList().get(0));
                }
            }*/
            
            if (!onlyProduct) {
                KwlReturnObject purchase = accProductObj.getProductPrice(product.getID(), true, null, "", "");
                obj.put("purchaseprice", purchase.getEntityList().get(0));
            }
            
            /*For SATS*/
            if(storageHandlerImpl.GetSATSCompanyId().contains(companyid)){
                obj = getSATSJSONForRegularTransactions(obj, product);
            }
            /******/
            
            String type = "";

            if (product.getProducttype() != null) {
                if (storageHandlerImpl.GetVRnetCompanyId().contains(companyid)) {
                    if (StringUtil.equal(product.getProducttype().getName(), "Inventory Assembly")) {
                        type = "Inventory Bundle";
                    } else {
                        type = product.getProducttype().getName();
                    }
                } else {
                    type = product.getProducttype().getName();
                }
            }

            if (isStopPurchase && preferences.isInventoryAccountingIntegration()) {
                JSONArray customJSONArray = getCustomColumnData(product.getID(), companyid);
                if (customJSONArray.length() > 0) {
                    for (int count = 0; count < customJSONArray.length(); count++) {

                        JSONObject customJSONObject = customJSONArray.getJSONObject(count);
                        String customFieldName = StringUtil.isNullOrEmpty(customJSONObject.optString("fieldname", "")) ? "" : customJSONObject.optString("fieldname", "");
                        if (!customJSONObject.isNull("fieldname") && (customFieldName.equalsIgnoreCase(Constants.CUSTOM_STOP_PURCHASE) || customFieldName.equalsIgnoreCase(Constants.CUSTOM_OBSOLETE)) && (customJSONObject.getInt("fieldtype") == Constants.CUSTOM_CHECKBOX)) {
                            if (!customJSONObject.isNull("fieldData") && !StringUtil.isNullOrEmpty(customJSONObject.optString("fieldData", "")) && customJSONObject.getString("fieldData").equalsIgnoreCase("true")) {
                                obj.put("isStopPurchase", true);
                                break;
                            }
                        }
                    }
                }
            }
            if (product.isAsset()) {     //For Fixed Asset Group, type will be "Asset"
                obj.put("type", "Asset");
            } else {
                obj.put("type", type);
            }
            obj.put("pid", product.getProductid());
            obj.put("producttype", (product.getProducttype() != null ? product.getProducttype().getID() : ""));
            if (preferences.isShowprodserial()) {
                ProductBatch batch = getBatchDetailsForProduct(product.getID());
                if (batch != null) {
                    obj.put("location", batch.getLocation().getId());
                    obj.put("warehouse", batch.getWarehouse().getId());
                } else {
                    obj.put("location", "");
                    obj.put("warehouse", "");
                }
            }
            if (product.isblockLooseSell()) {
                KwlReturnObject result = accProductObj.getAvailableQuantityInSelectedUOM(product.getID(), product.getUnitOfMeasure().getID());
                obj.put("quantity", (result.getEntityList().get(0) == null ? 0 : result.getEntityList().get(0)));
                obj.put("availableQtyInSelectedUOM", (result.getEntityList().get(0) == null ? 0 : result.getEntityList().get(0)));
            } else {
                KwlReturnObject result = accProductObj.getQuantity(product.getID());
                if(result.getEntityList().get(0) != null && (Double)result.getEntityList().get(0)>0){
                obj.put("quantity", (result.getEntityList().get(0) == null ? 0 : result.getEntityList().get(0)));
                obj.put("availableQtyInSelectedUOM", (result.getEntityList().get(0) == null ? 0 : result.getEntityList().get(0)));
                }else{
                     obj.put("quantity",product.getAvailableQuantity());
                obj.put("availableQtyInSelectedUOM", product.getAvailableQuantity());
            }
            }

            CommonFunctions.getterMethodForProductsData( product,masterFieldsResultList,obj);
            jArr.put(obj);
        }
        return jArr;
    }
    
    public JSONObject getSATSJSONForRegularTransactions(JSONObject obj, Product product){
        try {
            obj.put("dependentType", (product.getDependenttype() != null ? (product.getDependenttype().getType() == 1) ? product.getDependenttype().getID() : "" : ""));
            obj.put("dependentTypeNo", (product.getDependenttype() != null ? (product.getDependenttype().getType() == 0) ? product.getDependenttype().getID() : "" : ""));
            obj.put("dependentTypeQty", (product.getDependenttype() != null ? (product.getDependenttype().getType() == 2) ? product.getDependenttype().getID() : "" : ""));
            obj.put("parentDependentType", (product.getDependenttype() != null ? product.getDependenttype().getID() : ""));
            obj.put("timeintervalChk", product.isIntervalfield());
            obj.put("addshiplentheithqty", product.isAddshiplentheithqty());
            obj.put("hourtimeinterval", product.getTimeinterval());
            obj.put("noofquqntity", product.getNoofquqntity());
            if (product.getChildren().size() > 0) {
                obj.put("isparentproduct", true);
            } else {
                obj.put("isparentproduct", false);
            }
            obj.put("parentid", ((product.getParent() != null) ? product.getParent().getID() : ""));
            obj.put("parentname", ((product.getParent() != null) ? product.getParent().getName() : ""));
            obj.put("noofqtyvalue", product.getNoofqtyvalue());
            obj.put("intervalField", product.isIntervalfield());
        } catch (JSONException ex) {
            Logger.getLogger(accProductControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
        }
        return obj;
    }
    
    public JSONArray getJSONForBudgeting(Iterator itr, String productid, HttpServletRequest request) throws ServiceException, SessionExpiredException, JSONException, Exception {
        JSONArray jArr = new JSONArray();
        
        Producttype producttype = new Producttype(); 
        String companyid = sessionHandlerImpl.getCompanyid(request);
        
        
        Boolean nonSaleInventory = Boolean.parseBoolean((String) request.getParameter("loadInventory"));
        boolean isFreeTextSearching = (!StringUtil.isNullOrEmpty(request.getParameter("isFreeTextSearching"))) ? Boolean.parseBoolean(request.getParameter("isFreeTextSearching")) : false;
      
        while (itr.hasNext()) {
            JSONObject obj = new JSONObject();
            Product product = (Product) itr.next();



            if (product.getID().equals(productid)) {
                continue;
            }
            // For free text searching mode, deactivated products will not be included in search
            if(isFreeTextSearching && !product.isIsActive()){
                    continue;
            }
            String productType = "";
            
            productType = (product.getProducttype() != null ? product.getProducttype().getName() : "");
            if (nonSaleInventory && productType.equals(producttype.Inventory_Non_Sales)) {
                continue;
            }
            obj.put("productid", product.getID());
            obj.put("productname", product.getName());
            obj.put("barcodetype", product.getBarcodefield());  //ERM-304
            obj.put("barcode", product.getBarcode());  
            obj.put("desc", product.getDescription());
            obj.put("isActive", product.isIsActive());
            obj.put("hasAccess", product.isIsActive());
            String type = "";

            if (product.getProducttype() != null) {
                if (storageHandlerImpl.GetVRnetCompanyId().contains(companyid)) {
                    if (StringUtil.equal(product.getProducttype().getName(), "Inventory Assembly")) {
                        type = "Inventory Bundle";
                    } else {
                        type = product.getProducttype().getName();
                    }
                } else {
                    type = product.getProducttype().getName();
                }
            }

            if (product.isAsset()) {     //For Fixed Asset Group, type will be "Asset"
                obj.put("type", "Asset");
            } else {
                obj.put("type", type);
            }
            obj.put("pid", product.getProductid());
            obj.put("producttype", (product.getProducttype() != null ? product.getProducttype().getID() : ""));
            
            jArr.put(obj);
        }
        return jArr;
    }
    
    public JSONArray getJSONForConsignment(Iterator itr, String productid, HttpServletRequest request) throws ServiceException, SessionExpiredException, JSONException, Exception {
        JSONArray jArr = new JSONArray();
        KwlReturnObject kwlReturnObject = null;
        
        Producttype producttype = new Producttype(); 
        String companyid = sessionHandlerImpl.getCompanyid(request);
        
        kwlReturnObject = accountingHandlerDAOobj.getObject(CompanyAccountPreferences.class.getName(), companyid);
        CompanyAccountPreferences preferences = (CompanyAccountPreferences) kwlReturnObject.getEntityList().get(0);
        
        Boolean nonSaleInventory = Boolean.parseBoolean((String) request.getParameter("loadInventory"));
        
        int moduleid = (StringUtil.isNullOrEmpty(request.getParameter("moduleid")))? 0 : Integer.parseInt(request.getParameter("moduleid"));
        
        boolean isStopPurchase = (moduleid == 50)? false : true;
        boolean isFreeTextSearching = (!StringUtil.isNullOrEmpty(request.getParameter("isFreeTextSearching"))) ? Boolean.parseBoolean(request.getParameter("isFreeTextSearching")) : false;
//        String gcurrencyid = sessionHandlerImpl.getCurrencyID(request);
//        boolean getSOPOflag = request.getParameter("getSOPOflag") != null ? Boolean.parseBoolean(request.getParameter("getSOPOflag")) : false;
        
        
            while (itr.hasNext()) {
                Product product = (Product) itr.next();
                if (product.getID().equals(productid)) {
                    continue;
                }
                JSONObject obj = new JSONObject();
                String productType = "";
                String gcurrencyid = sessionHandlerImpl.getCurrencyID(request);
                productType = (product.getProducttype() != null ? product.getProducttype().getName() : "");
                if (nonSaleInventory && productType.equals(producttype.Inventory_Non_Sales)) {
                    continue;
                }
                // For free text searching mode, deactivated products will not be included in search
                if(isFreeTextSearching && !product.isIsActive()){
                    continue;
                }
                obj.put("productid", product.getID());
                obj.put("productname", product.getName());
                obj.put("barcodetype", product.getBarcodefield());  //ERM-304
                obj.put("barcode", product.getBarcode());  
                obj.put("isActive", product.isIsActive());
                obj.put("hasAccess", product.isIsActive());
                obj.put("desc", product.getDescription());
                obj.put("supplierpartnumber", StringUtil.isNullOrEmpty(product.getSupplier()) ? "" : product.getSupplier());
                obj.put("isAsset", product.isAsset());
//                obj.put("minorderingquantity", product.getMinOrderingQuantity());
//                obj.put("maxorderingquantity", product.getMaxOrderingQuantity());
//                if (product.isAsset()) {
//                    obj.put("depreciationRate", product.getDepreciationRate());
//                    obj.put("depreciationMethod", product.getDepreciationMethod());
//                    obj.put("depreciationCostLimit", product.getDepreciationCostLimit());
//                    obj.put("depreciationGL", (product.getDepreciationGLAccount() != null) ? product.getDepreciationGLAccount().getID() : "");
//                    obj.put("provisionGL", (product.getDepreciationProvisionGLAccount() != null) ? product.getDepreciationProvisionGLAccount().getID() : "");
//                    obj.put("assetSaleGL", (product.getSellAssetGLAccount() != null) ? product.getSellAssetGLAccount().getID() : "");
//                    obj.put("depreciationGLAccount", (product.getDepreciationGLAccount() != null) ? product.getDepreciationGLAccount().getID() : "");
//                    obj.put("depreciationProvisionGLAccount", (product.getDepreciationProvisionGLAccount() != null) ? product.getDepreciationProvisionGLAccount().getID() : "");
//                }
                UnitOfMeasure uom = product.getUnitOfMeasure();
                obj.put("uomid", uom == null ? "" : uom.getID());
                obj.put("uomname", uom == null ? "" : uom.getNameEmptyforNA());
                obj.put("multiuom", product.isMultiuom());
                obj.put("blockLooseSell", product.isblockLooseSell());
                obj.put("uomschematypeid", product.getUomSchemaType() != null ? product.getUomSchemaType().getID() : "");
                UnitOfMeasure purchaseuom = product.getPurchaseUOM();
                UnitOfMeasure salesuom = product.getSalesUOM();
                obj.put("purchaseuom", purchaseuom == null ? "" : purchaseuom.getID());
                obj.put("purchaseuomname", purchaseuom == null ? "" : purchaseuom.getNameEmptyforNA());
                obj.put("salesuom", salesuom == null ? "" : salesuom.getID());
                obj.put("salesuomname", salesuom == null ? "" : salesuom.getNameEmptyforNA());
                obj.put("stockuom", (product.getPackaging()==null || product.getPackaging().getStockUoM()==null) ? (uom == null ? "" : uom.getID()):product.getPackaging().getStockUoM().getID());
                obj.put("caseuom", (product.getPackaging()==null || product.getPackaging().getCasingUoM()==null) ? "":product.getPackaging().getCasingUoM().getID());
                obj.put("inneruom", (product.getPackaging()==null || product.getPackaging().getInnerUoM()==null) ? "":product.getPackaging().getInnerUoM().getID());
                obj.put("caseuomvalue",(product.getPackaging()==null || product.getPackaging().getCasingUoM()==null) ? 1:product.getPackaging().getStockUomQtyFactor(product.getPackaging().getCasingUoM()));
                obj.put("inneruomvalue", (product.getPackaging()==null || product.getPackaging().getInnerUoM()==null) ? 1:product.getPackaging().getStockUomQtyFactor(product.getPackaging().getInnerUoM()));
                obj.put("stockpurchaseuomvalue", purchaseuom == null || product.getPackaging()==null ? 1:product.getPackaging().getStockUomQtyFactor(purchaseuom));
                obj.put("stocksalesuomvalue",salesuom == null || product.getPackaging()==null ? 1 : product.getPackaging().getStockUomQtyFactor(salesuom));
                obj.put("isLocationForProduct", product.isIslocationforproduct());
                obj.put("isWarehouseForProduct", product.isIswarehouseforproduct());
                obj.put("isRowForProduct", product.isIsrowforproduct());
                obj.put("isRackForProduct", product.isIsrackforproduct());
                obj.put("isBinForProduct", product.isIsbinforproduct());
                obj.put("isBatchForProduct", product.isIsBatchForProduct());
                obj.put("isSerialForProduct", product.isIsSerialForProduct());
                obj.put("isSKUForProduct", product.isIsSKUForProduct());
                obj.put("isRecyclable", product.isRecyclable());
                obj.put("recycleQuantity", product.getRecycleQuantity());
                obj.put("activateProductComposition", product.isActivateProductComposition());
                obj.put("purchaseacctaxcode", ((product.getPurchaseAccount() != null && (!StringUtil.isNullOrEmpty(product.getPurchaseAccount().getTaxid()))) ? product.getPurchaseAccount().getTaxid() : ""));
                obj.put("salesacctaxcode", ((product.getSalesAccount() != null && (!StringUtil.isNullOrEmpty(product.getSalesAccount().getTaxid()))) ? product.getSalesAccount().getTaxid() : ""));
                obj.put("warrantyperiod", product.getWarrantyperiod());
                obj.put("warrantyperiodsal", product.getWarrantyperiodsal());
                obj.put("location", (product.getLocation() != null ? product.getLocation().getId() : ""));
                obj.put("warehouse", (product.getWarehouse() != null ? product.getWarehouse().getId() : ""));
                obj.put("productweightperstockuom",  product.getProductWeightPerStockUom());
                obj.put("productweightincludingpakagingperstockuom", product.getProductWeightIncludingPakagingPerStockUom());
                obj.put("productvolumeperstockuom",product.getProductVolumePerStockUom());
                obj.put("productvolumeincludingpakagingperstockuom",product.getProductVolumeIncludingPakagingPerStockUom());
                // }
//                if(!onlyProduct && !storageHandlerImpl.GetLowercaseCompanyId().contains(companyid) ||product.getParent() !=null){ 
//
//                    obj.put("purchaseretaccountid", (product.getPurchaseReturnAccount() != null ? product.getPurchaseReturnAccount().getID() : ""));
//                    obj.put("salesretaccountid", (product.getSalesReturnAccount() != null ? product.getSalesReturnAccount().getID() : ""));
//                    KwlReturnObject purchase = accProductObj.getProductPrice(product.getID(), true, null, "","");
//                    obj.put("purchaseprice", purchase.getEntityList().get(0));
//                    KwlReturnObject sales = accProductObj.getProductPrice(product.getID(), false, null, "","");
//                    obj.put("saleprice", sales.getEntityList().get(0));
//                } else {
//                    if (onlyProduct) {
//                        KwlReturnObject purchase = accProductObj.getProductPrice(product.getID(), true, null, "", "");
//                        obj.put("purchaseprice", purchase.getEntityList().get(0));
//                    }
//                }

//                obj.put("dependentType", (product.getDependenttype() != null ? (product.getDependenttype().getType()==1)?product.getDependenttype().getID() : "":""));
//                obj.put("dependentTypeNo", (product.getDependenttype() != null ? (product.getDependenttype().getType()==0)?product.getDependenttype().getID() : "":""));
//                obj.put("dependentTypeQty", (product.getDependenttype() != null ? (product.getDependenttype().getType()==2)?product.getDependenttype().getID() : "":""));
//                obj.put("parentDependentType", (product.getDependenttype() != null ? product.getDependenttype().getID():""));
//                obj.put("timeintervalChk", product.isIntervalfield());
//                obj.put("addshiplentheithqty", product.isAddshiplentheithqty());
//                obj.put("hourtimeinterval", product.getTimeinterval());
//                obj.put("noofquqntity", product.getNoofquqntity());
//                if (product.getChildren().size() > 0) {
//                    obj.put("isparentproduct", true);
//                } else {
//                    obj.put("isparentproduct", false);
//                }
//                obj.put("parentid", ((product.getParent() != null) ? product.getParent().getID() : ""));
//                obj.put("parentname", ((product.getParent() != null) ? product.getParent().getName() : ""));
//                obj.put("noofqtyvalue", product.getNoofqtyvalue());

//                obj.put("intervalField", product.isIntervalfield());
                String type = "";

                        
//            if(getSOPOflag){
//                    HashMap<String, Object> requestParams=new HashMap<String, Object>();            
//                    requestParams.put("companyid", companyid);
//                    requestParams.put("gcurrencyid", gcurrencyid);
//                    requestParams.put("df", authHandler.getDateFormatter(request));
//                    requestParams.put("pendingapproval", false);
//                    requestParams.put("startdate" ,request.getParameter("startdate"));
//                    requestParams.put("enddate" ,request.getParameter("enddate"));
//                    KwlReturnObject poresult = accPurchaseOrderobj.getPurchaseOrdersMerged(requestParams);
//                    List list1=poresult.getEntityList();
//                    String productuomId = (product.getUnitOfMeasure() != null)?product.getUnitOfMeasure().getID():"";
//                    double productCount = getOutstandingPoSoProductsCount(list1, true, product.getID(), accountingHandlerDAOobj, accGoodsReceiptDAOobj, accInvoiceDAOobj, productuomId);
//
//
//                    obj.put("pocount", productCount);
//                    obj.put("pocountinselecteduom", productCount);
//
//                    KwlReturnObject soresult = accSalesOrderDAOobj.getSalesOrdersMerged(requestParams);
//                    list1=soresult.getEntityList();
//                    productCount = getOutstandingPoSoProductsCount(list1, false, product.getID(), accountingHandlerDAOobj, accGoodsReceiptDAOobj, accInvoiceDAOobj, productuomId);
//
//                    obj.put("socount", productCount);
//                    obj.put("socountinselecteduom", productCount);
//                }

            if(product.getProducttype() != null){
                    if (storageHandlerImpl.GetVRnetCompanyId().contains(companyid)) {
                        if (StringUtil.equal(product.getProducttype().getName(), "Inventory Assembly")) {
                            type = "Inventory Bundle";
                        } else {
                            type = product.getProducttype().getName();
                        }
                    } else {
                        type = product.getProducttype().getName();
                    }
                }

            if(isStopPurchase && preferences.isInventoryAccountingIntegration()){
                JSONArray customJSONArray=getCustomColumnData(product.getID(),companyid);
                if(customJSONArray.length()>0){
                    for(int count=0;count<customJSONArray.length();count++){

                        JSONObject customJSONObject=customJSONArray.getJSONObject(count);                        
                        String customFieldName=StringUtil.isNullOrEmpty(customJSONObject.optString("fieldname",""))?"":customJSONObject.optString("fieldname","");
                        if(!customJSONObject.isNull("fieldname") && (customFieldName.equalsIgnoreCase(Constants.CUSTOM_STOP_PURCHASE)||customFieldName.equalsIgnoreCase(Constants.CUSTOM_OBSOLETE)) && (customJSONObject.getInt("fieldtype")==Constants.CUSTOM_CHECKBOX)){
                            if(!customJSONObject.isNull("fieldData") && !StringUtil.isNullOrEmpty(customJSONObject.optString("fieldData","")) && customJSONObject.getString("fieldData").equalsIgnoreCase("true")){
                                    obj.put("isStopPurchase", true);
                                    break;
                                }
                            }
                        }
                    }
                }
                if (product.isAsset()) {     //For Fixed Asset Group, type will be "Asset"
                    obj.put("type", "Asset");
                } else {
                    obj.put("type", type);
                }
                obj.put("pid", product.getProductid());
                obj.put("producttype", (product.getProducttype()!=null?product.getProducttype().getID():""));         
//            if (preferences.isShowprodserial()) {
//                ProductBatch batch = getBatchDetailsForProduct(product.getID());
//                if (batch != null) {
//                    obj.put("location", batch.getLocation().getId());
//                    obj.put("warehouse", batch.getWarehouse().getId());
//                } else {
//                    obj.put("location", "");
//                    obj.put("warehouse", "");
//                }
//            }

                if (product.isblockLooseSell()) {
                    KwlReturnObject result = accProductObj.getAvailableQuantityInSelectedUOM(product.getID(), product.getUnitOfMeasure().getID());
                    obj.put("quantity", (result.getEntityList().get(0) == null ? 0 : result.getEntityList().get(0)));
                } else {
                    KwlReturnObject result = accProductObj.getQuantity(product.getID());;
                    obj.put("quantity", (result.getEntityList().get(0) == null ? 0 : result.getEntityList().get(0)));
                }

//                KwlReturnObject result2 = accProductObj.getAssemblyLockQuantity(product.getID()); //get the lock quantity locked in assembly type of product in SO
//                Double assmblyLockQuantity=(Double)(result2.getEntityList().get(0) == null ? 0.0 : result2.getEntityList().get(0));
//
//                KwlReturnObject result1 = accProductObj.getLockQuantity(product.getID());//get the lock quantity locked in inventory type of product in  all SO
//                Double  SoLockQuantity=(Double)(result1.getEntityList().get(0) == null ? 0.0 : result1.getEntityList().get(0));
//
//                obj.put("lockquantity",assmblyLockQuantity+SoLockQuantity);  //total lock quantity of product locked in SO

                KwlReturnObject result4 = accProductObj.getVendorConsignedQuantity(product.getID());
                obj.put("venconsignuomquantity", (result4.getEntityList().get(0) == null ? 0 : result4.getEntityList().get(0)));

                KwlReturnObject result5 = accProductObj.getConsignedQuantity(product.getID());
                obj.put("consignquantity", (result5.getEntityList().get(0) == null ? 0 : result5.getEntityList().get(0)));
                jArr.put(obj);
            }
        return jArr;
    }
    
    
    //ERP-8199 : Product selection grid window JSON
    public JSONArray getProductsJsonForProductSelectionGrid(HttpServletRequest request, List list) throws JSONException, ServiceException, SessionExpiredException ,Exception{
    Iterator itr = list.iterator();
        JSONArray jArr = new JSONArray();
        Producttype producttype = new Producttype();                
        
        String companyid = sessionHandlerImpl.getCompanyid(request);
        KwlReturnObject extraCompanyPrefResult = accountingHandlerDAOobj.getObject(ExtraCompanyPreferences.class.getName(), companyid);
        ExtraCompanyPreferences extraCompanyPreferences = (ExtraCompanyPreferences) extraCompanyPrefResult.getEntityList().get(0);
        KwlReturnObject kwlReturnObject = accountingHandlerDAOobj.getObject(CompanyAccountPreferences.class.getName(), companyid);
        CompanyAccountPreferences preferences = (CompanyAccountPreferences) kwlReturnObject.getEntityList().get(0);
        boolean isFromInventorySide=false;
        if (!StringUtil.isNullOrEmpty(request.getParameter("moduleid"))) {
            int moduleID = Integer.parseInt((String) request.getParameter("moduleid"));
            if (moduleID == Constants.Acc_Stock_Adjustment_ModuleId || moduleID == Constants.Acc_Stock_Request_ModuleId || moduleID == Constants.Acc_InterStore_ModuleId || moduleID == Constants.Acc_InterLocation_ModuleId) {
                isFromInventorySide=true;
            }
        }
        boolean isCustomer = request.getParameter("isCustomer") != null ? Boolean.parseBoolean(request.getParameter("isCustomer")) : false;
        String customerid = "";
        String Vendorid = "";
        if (!StringUtil.isNullOrEmpty(request.getParameter("customerid"))) {
            if (isCustomer) {
                customerid = (String) request.getParameter("customerid");
            } else {
                Vendorid = (String) request.getParameter("customerid");
            }
        }
        HashMap<String, String> customFieldMap = new HashMap<String, String>();
        HashMap<String, String> customDateFieldMap = new HashMap<String, String>();
        HashMap<String, Object> fieldrequestParams = new HashMap();
        HashMap<String, String> replaceFieldMap = new HashMap();
        HashMap<String, Integer> FieldMap = new HashMap();

        String moduleid = request.getParameter("moduleid");
//        if (!StringUtil.isNullOrEmpty(moduleid)) {
//            if (moduleid.equalsIgnoreCase("" + Constants.Acc_Receive_Payment_ModuleId)) {
                fieldrequestParams.put(Constants.filter_names, Arrays.asList(Constants.companyid, Constants.moduleid));
                fieldrequestParams.put(Constants.filter_values, Arrays.asList(companyid, Constants.Acc_Product_Master_ModuleId));
                replaceFieldMap = new HashMap<String, String>();
                FieldMap = accAccountDAOobj.getFieldParamsCustomMap(fieldrequestParams, replaceFieldMap, customFieldMap, customDateFieldMap);
//            }
//        }
        Boolean onlyProduct = Boolean.parseBoolean((String) request.getParameter("onlyProduct"));
        Boolean nonSaleInventory = Boolean.parseBoolean((String) request.getParameter("loadInventory"));
//	boolean isFixedAsset = (!StringUtil.isNullOrEmpty(request.getParameter("isFixedAsset"))) ? Boolean.parseBoolean(request.getParameter("isFixedAsset")) : false;        
        double availableQty=0.0;
        KwlReturnObject companyObj1 = accountingHandlerDAOobj.getObject(Company.class.getName(), companyid);
        Company compObj = (Company) companyObj1.getEntityList().get(0);
         String ss=""; 
        if (!StringUtil.isNullOrEmpty(request.getParameter("ss"))) {
            ss = (String) request.getParameter("ss");
        }
        Store store = null;
        if (!StringUtil.isNullOrEmpty(request.getParameter("warehouseid"))) {
            store = storeService.getStoreById(request.getParameter("warehouseid"));
        }
        Location location = null;
        if (!StringUtil.isNullOrEmpty(request.getParameter("locationid"))) {
            location = locationService.getLocation(request.getParameter("locationid"));
        }
        Map<String, Double> quantityUnderQAForGRNAndDO = new HashMap<>();
        if (extraCompanyPreferences != null && extraCompanyPreferences.isPickpackship()) {
            /**
             * If Pick, Pack & Ship flow is activated then we don't add entry in
             * inventory table. Get quantity present in QC store for Delivery
             * Order.
             */
            boolean isGRNOnly = false;
            quantityUnderQAForGRNAndDO = accProductObj.getProductQuantityUnderQAForGRNAndDO(compObj, store, isGRNOnly);
        } else {
            boolean isGRNOnly = true;
            /**
             * If Pick, Pack & Ship flow is deactivated then we add entry in
             * inventory table So, no need to get quantity present in QC store
             * for delivery order separately.
             */
            quantityUnderQAForGRNAndDO = accProductObj.getProductQuantityUnderQAForGRNAndDO(compObj, store, isGRNOnly);
        }
        Map<String, Double> quantityUnderRepairForGRNAndDO = new HashMap<>();
        if (extraCompanyPreferences != null && extraCompanyPreferences.isPickpackship()) {
            /**
             * If Pick, Pack & Ship flow is activated then we don't add entry in
             * inventory table. Get quantity present in QC store for Delivery
             * Order.
             */
            quantityUnderRepairForGRNAndDO = accProductObj.getProductQuantityUnderRepairForGRNAndDO(compObj, store, false);
        } else {
            /**
             * If Pick, Pack & Ship flow is deactivated then we add entry in
             * inventory table So, no need to get quantity present in QC store
             * for delivery order separately.
             */
            quantityUnderRepairForGRNAndDO = accProductObj.getProductQuantityUnderRepairForGRNAndDO(compObj, store, true);
        }
        Map<String, Double> doApprovedOrRejectedOrPickedQtyMap = new HashMap<>();
        if (!extraCompanyPreferences.isPickpackship()) {
            doApprovedOrRejectedOrPickedQtyMap = accProductObj.getProductApprovedOrRejectedOrPickedQty(compObj, store);
        }
        Map<String, Double> quantityUnderQA = accProductObj.getProductQuantityUnderQA(compObj, null);
        Map<String, Double> quantityUnderRepair = accProductObj.getProductQuantityUnderRepair(compObj, null);
        while (itr.hasNext()) {
            Object row[] = (Object[])itr.next();
            String productid=(String)row[0];
            String productCatMapId=(String)row[1];
            KwlReturnObject productObj = accountingHandlerDAOobj.getObject(Product.class.getName(), productid);
            Product product = (Product)productObj.getEntityList().get(0);
            JSONObject obj = new JSONObject();
            String productType = "";            
            String prodCurrency = "";            
            String prodCurrencyCode = "";            
            String gcurrencyid = sessionHandlerImpl.getCurrencyID(request);
            productType = (product.getProducttype() != null ? product.getProducttype().getName() : "");
            if (nonSaleInventory && productType.equals(producttype.Inventory_Non_Sales)) {
                continue;
            }
            obj.put("productid", product.getID());
            obj.put("productname", product.getName());
            obj.put("desc", product.getDescription());
            obj.put("minorderingquantity", product.getMinOrderingQuantity());
            obj.put("maxorderingquantity", product.getMaxOrderingQuantity());
            obj.put("isActiveItem", product.isIsActive());
            obj.put("hasAccess", product.isIsActive());
            obj.put("productweightperstockuom", product.getProductWeightPerStockUom());
            obj.put("productweightincludingpakagingperstockuom", product.getProductWeightIncludingPakagingPerStockUom());
            obj.put("productvolumeperstockuom",product.getProductVolumePerStockUom());
            obj.put("productvolumeincludingpakagingperstockuom",product.getProductVolumeIncludingPakagingPerStockUom());
            MasterItem masterItem = null;
            if (!StringUtil.isNullOrEmpty(productCatMapId)) {
                KwlReturnObject catresult = accProductObj.getObject(MasterItem.class.getName(), productCatMapId);
                masterItem = (MasterItem) catresult.getEntityList().get(0);
                obj.put("categoryid", masterItem == null ? "" : masterItem.getID());
                obj.put("category", masterItem == null ? "" : masterItem.getValue());
            }
            // ERP-20484 Unit Purchase Price not showing in Add Product button window. 
            if (product.getCurrency() != null) {
                prodCurrency = product.getCurrency().getCurrencyID();
                prodCurrencyCode = product.getCurrency().getCurrencyCode();
            }
            if (!onlyProduct && !storageHandlerImpl.GetLowercaseCompanyId().contains(companyid) || product.getParent() != null) {
                String stockUomID = product.getUnitOfMeasure() != null ? product.getUnitOfMeasure().getID() : "";
                boolean excludeInitialPrice = true;
                KwlReturnObject purchase = accProductObj.getProductPrice(product.getID(), true, null, "", prodCurrency, stockUomID,excludeInitialPrice);         // Purchase Price
                if (purchase.getEntityList().get(0) == null) {
                    purchase = accProductObj.getProductPrice(product.getID(), true, null, "", prodCurrency);         // purchasePrice
            }
                obj.put("purchaseprice", purchase.getEntityList().get(0) == null ? 0 : purchase.getEntityList().get(0));

                KwlReturnObject sales = accProductObj.getProductPrice(product.getID(), false, null, "", prodCurrency, stockUomID,excludeInitialPrice);           // Sales Price
                if (sales.getEntityList().get(0) == null) {
                    sales = accProductObj.getProductPrice(product.getID(), false, null, "", prodCurrency);           // Sales Price
                }
                obj.put("saleprice", sales.getEntityList().get(0) == null ? 0 : sales.getEntityList().get(0));
            }
            double qaQuantityForGRNAndDO = 0, repairQuantityForGRNAndDO = 0, doApprovedOrRejectedOrPickedQty = 0;
            if (quantityUnderQAForGRNAndDO.containsKey(product.getID()) && quantityUnderQAForGRNAndDO.get(product.getID()) != null) {
                qaQuantityForGRNAndDO = quantityUnderQAForGRNAndDO.get(product.getID());
            }
            if (quantityUnderRepairForGRNAndDO.containsKey(product.getID()) && quantityUnderRepairForGRNAndDO.get(product.getID()) != null) {
                repairQuantityForGRNAndDO = quantityUnderRepairForGRNAndDO.get(product.getID());
            }
            if (doApprovedOrRejectedOrPickedQtyMap.containsKey(product.getID()) && doApprovedOrRejectedOrPickedQtyMap.get(product.getID()) != null) {
                doApprovedOrRejectedOrPickedQty = doApprovedOrRejectedOrPickedQtyMap.get(product.getID());
            }
            double qaQuantity = 0, repairQuantity = 0;
            if (quantityUnderQA.containsKey(product.getID()) && quantityUnderQA.get(product.getID()) != null) {
                qaQuantity = quantityUnderQA.get(product.getID());
            }
            if (quantityUnderRepair.containsKey(product.getID()) && quantityUnderRepair.get(product.getID()) != null) {
                repairQuantity = quantityUnderRepair.get(product.getID());
            }
            if(StringUtil.isNullOrEmpty(prodCurrency))
            {
                prodCurrencyCode=product.getCompany().getCurrency().getCurrencyCode();
            }
            obj.put("currencysymbol",prodCurrencyCode);
            if (product.getChildren().size() > 0) {
                obj.put("isparentproduct", true);
            } else {
                obj.put("isparentproduct", false);
            }
            obj.put("parentid", ((product.getParent() != null) ? product.getParent().getID() : ""));
            obj.put("parentname", ((product.getParent() != null) ? product.getParent().getName() : ""));
            obj.put("noofqtyvalue", product.getNoofqtyvalue());
            obj.put("hsncode", !StringUtil.isNullOrEmpty(product.getHSNCode())?product.getHSNCode():"");
            
            obj.put("intervalField", product.isIntervalfield());
            obj.put("rcmapplicable", product.isRcmApplicable());
            String type = "";
                          
            if (product.isAsset()) {     //For Fixed Asset Group, type will be "Asset"
                obj.put("type", "Asset");
            } else {
            obj.put("type", type);
            }
            obj.put("pid", product.getProductid());
            obj.put("producttype", (product.getProducttype()!=null?product.getProducttype().getID():""));         
            obj.put("isSKUForProduct", product.isIsSKUForProduct());
            if (isFromInventorySide) {
                obj.put("uomname", product.getUnitOfMeasure() != null ? product.getUnitOfMeasure().getNameEmptyforNA() : "");
                obj.put("uomid", product.getUnitOfMeasure() != null ? product.getUnitOfMeasure().getID() : "");
                obj.put("packaging", product.getPackaging() != null ? product.getPackaging().toString() : "");
                obj.put("packagingid", product.getPackaging() != null ? product.getPackaging().getId() : "");
                obj.put("warehouse", product.getWarehouse() != null ? product.getWarehouse().getId() : "");
                obj.put("orderToStockUOMFactor", product.getPackaging() != null ? product.getPackaging().getStockUomQtyFactor(product.getOrderingUOM()) : 1);
                obj.put("transferToStockUOMFactor", product.getPackaging() != null ? product.getPackaging().getStockUomQtyFactor(product.getTransferUOM()) : 1);
                obj.put("orderinguomid", product.getOrderingUOM() != null ? product.getOrderingUOM().getID() : "");
                obj.put("transferinguomid", product.getTransferUOM() != null ? product.getTransferUOM().getID() : "");
                obj.put("orderinguomname", product.getOrderingUOM() != null ? product.getOrderingUOM().getNameEmptyforNA() : "");
                obj.put("transferinguomname", product.getTransferUOM() != null ? product.getTransferUOM().getNameEmptyforNA() : "");
                obj.put("isBatchForProduct", product.isIsBatchForProduct());
                obj.put("isSerialForProduct", product.isIsSerialForProduct());
                obj.put("isSKUForProduct", product.isIsSKUForProduct());
                obj.put("isRowForProduct", product.isIsrowforproduct());
                obj.put("isRackForProduct", product.isIsrackforproduct());
                obj.put("isBinForProduct", product.isIsbinforproduct());
                obj.put("ismultipleuom", product.isMultiuom());
                obj.put("uomschematype", product.getUomSchemaType()!=null ? product.getUomSchemaType().getID() : "");
//                availableQty = stockDAO.getProductTotalQuantityInStore(product, store);
//                obj.put("quantity", authHandler.roundQuantity(availableQty,companyid));
            }
            
            if (product.isblockLooseSell() && !isFromInventorySide) {
                KwlReturnObject result = accProductObj.getAvailableQuantityInSelectedUOM(product.getID(), product.getUnitOfMeasure().getID());
                availableQty = result.getEntityList().get(0) == null ? 0 : (Double) result.getEntityList().get(0);
                availableQty = (availableQty - (qaQuantityForGRNAndDO + repairQuantityForGRNAndDO) + doApprovedOrRejectedOrPickedQty);
                obj.put("quantity", authHandler.roundQuantity(availableQty,companyid));
            } else if (!isFromInventorySide) {
//                KwlReturnObject result = accProductObj.getQuantity(product.getID());;
                availableQty = product.getAvailableQuantity();
                availableQty = (availableQty - (qaQuantityForGRNAndDO + repairQuantityForGRNAndDO) + doApprovedOrRejectedOrPickedQty);
                obj.put("quantity", authHandler.roundQuantity((availableQty - (qaQuantityForGRNAndDO+repairQuantityForGRNAndDO)),companyid));

            }
            if (!StringUtil.isNullObject(store)) {
                availableQty = stockDAO.getProductQuantityInStoreLocation(product, store, location);
                obj.put("quantity", authHandler.roundQuantity(availableQty, companyid));
            }
            if(extraCompanyPreferences.isExciseApplicable()){
                obj.put("reortingUOM", !StringUtil.isNullOrEmpty(product.getReportinguom())?product.getReportinguom():"");
                obj.put("valuationType", !StringUtil.isNullOrEmpty(product.getExcisemethodmain())?product.getExcisemethodmain():"");
            }
            
            KwlReturnObject result = accProductObj.getVendorConsignedQuantity(product.getID());
            obj.put("venconsignuomquantity", (result.getEntityList().get(0) == null ? 0 : result.getEntityList().get(0)));
             
           
            HashMap<String, Object> requestParams = new HashMap<String, Object>();
            requestParams.put("companyObj", compObj);
            requestParams.put("productObj", product);
            requestParams.put("ss", ss);
           
            /* Fetch block quantity of product after clicking on Add button at line level for all transaction forms
            
             If any changes is done in Product master form for block quantity then here must do the same changes 
             */
            JSONObject jobj = AccProductService.getBlockedQuantityOfProduct(requestParams);

            double lockQuantityInSelectedUOM = jobj.optDouble("lockquantity",0);
                      
            obj.put("lockquantity", (lockQuantityInSelectedUOM));
            /**
             * If Pick Pack & Ship is activated then we do not post entry in
             * inventory table. So, we need to subtract the balance quantity if
             * QA and Pick Pack & Ship features are activated.
             *
             * Balance Qty= Total Available Qty + Qty. in QA Store + Qty. in
             * repair store.
             */
            double balanceQuantity = availableQty - (lockQuantityInSelectedUOM) + qaQuantity + repairQuantity;
            obj.put("balancequantity", authHandler.roundQuantity(balanceQuantity, companyid));
            
            if ((product.getProducttype().getID().equals(Producttype.NON_INVENTORY_PART) || product.getProducttype().getID().equals(Producttype.SERVICE))) {
                obj.put("balancequantity", "NA");
                obj.put("baseuomquantity", "NA");
                obj.put("quantity", "NA");
                obj.put("lockquantity", "NA");
                obj.put("venconsignuomquantity","NA");
            }
             /**
              *  Get Customer/Vendor specific custom field Json here
              */
            obj.put("jsonstring", "");
            if (!StringUtil.isNullOrEmpty(customerid)) {
                KwlReturnObject productjsonobj = accVendorCustomerProductDAOobj.getProductsByCustomer(customerid, "", null);
                List<CustomerProductMapping> listpro = productjsonobj.getEntityList();
                for (CustomerProductMapping CustomerProductObj : listpro) {
                    String customerproductsid = CustomerProductObj.getProducts().getID();
                    if (customerproductsid.equals(product.getID())) {
                        obj.remove("jsonstring");
                        obj.put("jsonstring", CustomerProductObj.getJsonstring());
                    }
                }
            } else if (!StringUtil.isNullOrEmpty(Vendorid)) {
                KwlReturnObject productjsonobj = accVendorCustomerProductDAOobj.getProductsByVendor(Vendorid, "", null);
                List<VendorProductMapping> listpro = productjsonobj.getEntityList();
                for (VendorProductMapping vendorProductObj : listpro) {
                    String vendorproductsid = vendorProductObj.getProducts().getID();
                    if (vendorproductsid.equals(product.getID())) {
                        obj.remove("jsonstring");
                        obj.put("jsonstring", vendorProductObj.getJsonstring());
                    }
                }
            }
//            if (moduleid.equalsIgnoreCase("" + Constants.Acc_Receive_Payment_ModuleId)) {
                Map<String, Object> variableMap = new HashMap<String, Object>();
                KwlReturnObject custumObjresult = accountingHandlerDAOobj.getObject(AccProductCustomData.class.getName(), product.getID());
                replaceFieldMap = new HashMap<String, String>();
                if (custumObjresult != null && custumObjresult.getEntityList().size() > 0) {
                    AccProductCustomData jeDetailCustom = (AccProductCustomData) custumObjresult.getEntityList().get(0);
                    if (jeDetailCustom != null) {
                        AccountingManager.setCustomColumnValues(jeDetailCustom, FieldMap, replaceFieldMap, variableMap);
                        JSONObject params = new JSONObject();
                        params.put("isExport", true);
                        accountingCommonfieldDataManage.addCustomData(variableMap, customFieldMap, customDateFieldMap, obj, params);
                    }
                }
//            }

            jArr.put(obj);          
        }
        return jArr;
    } 
    
    public ModelAndView getIndividualProductPrice(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        boolean issuccess = false;
        String msg = "";
        try {
            JSONObject paramJobj = StringUtil.convertRequestToJsonObject(request);
            jobj = AccProductService.getIndividualProductPrice(paramJobj);
            if (jobj.has(Constants.RES_success)) {
                issuccess = jobj.optBoolean(Constants.RES_success, false);
            }
            if (jobj.has(Constants.RES_msg)) {
                msg = jobj.optString(Constants.RES_msg, "");
            }
        } catch (SessionExpiredException ex) {
            msg = ex.getMessage();
            Logger.getLogger(accProductController.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            msg = "" + ex.getMessage();
            Logger.getLogger(accProductController.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                jobj.put(Constants.RES_success, issuccess);
                jobj.put(Constants.RES_msg, msg);
            } catch (JSONException ex) {
                Logger.getLogger(accProductController.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return new ModelAndView("jsonView", "model", jobj.toString());
    }
    
    public ModelAndView getIndividualProductBaseUOMRate(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        boolean issuccess = false;
        String msg = "";
        try {
            JSONObject obj = new JSONObject();
            HashMap<String, Object> requestParams =new HashMap<String, Object>();
            String companyid = sessionHandlerImpl.getCompanyid(request);
            boolean carryin = Boolean.parseBoolean(request.getParameter("carryin"));
            String uomschematypeid=(String) request.getParameter("uomschematypeid");
            String productId=(String) request.getParameter("productId");
            String currentuomid=(String) request.getParameter("currentuomid"); 
            
            String gcurrencyid = sessionHandlerImpl.getCurrencyID(request);
            
            
            // Get Available Quantity of Product For Selected UOM
            
            KwlReturnObject qtyResult = accProductObj.getAvailableQuantityInSelectedUOM(productId, currentuomid);
            double availableQuantity = qtyResult.getEntityList().get(0) == null ? 0 : (Double)qtyResult.getEntityList().get(0);
            
            qtyResult = accProductObj.getLockQuantityInSelectedUOM(productId, currentuomid);
            double lockQuantityInSelectedUOM = qtyResult.getEntityList().get(0) == null ? 0 : (Double) qtyResult.getEntityList().get(0);

            KwlReturnObject productObj = accountingHandlerDAOobj.getObject(Product.class.getName(), productId);
            Product product = (Product)productObj.getEntityList().get(0);
            
            if(product.isblockLooseSell()){
                HashMap<String, Object> orderParams=new HashMap<String, Object>();            
                orderParams.put("companyid", companyid);
                orderParams.put("gcurrencyid", gcurrencyid);
                orderParams.put("df", authHandler.getDateOnlyFormat(request));            
                orderParams.put("pendingapproval", false);
                if (!StringUtil.isNullOrEmpty(request.getParameter("startdate"))) {
                    orderParams.put("startdate", authHandler.getDateOnlyFormat(request).parse(request.getParameter("startdate")));
                }
                if (!StringUtil.isNullOrEmpty(request.getParameter("enddate"))) {
                    orderParams.put("enddate", authHandler.getDateOnlyFormat(request).parse(request.getParameter("enddate")));
                }
                orderParams.put("productId" ,productId);
                double productCount = 0;
                productCount = AccProductService.getOutstandingPoSoProductsCount(orderParams, true, product.getID(), accountingHandlerDAOobj, accGoodsReceiptDAOobj, accInvoiceDAOobj, accSalesOrderDAOobj, accPurchaseOrderobj, currentuomid);//list1,
                obj.put("pocountinselecteduom", productCount);

                productCount = AccProductService.getOutstandingPoSoProductsCount(orderParams, false, product.getID(), accountingHandlerDAOobj, accGoodsReceiptDAOobj, accInvoiceDAOobj, accSalesOrderDAOobj, accPurchaseOrderobj, currentuomid);//list1,
                obj.put("socountinselecteduom", productCount);
            }
            
            if(!StringUtil.isNullOrEmpty(request.getParameter("uomschematypeid"))){                
                requestParams.put("uomschematypeid", uomschematypeid);
                requestParams.put("currentuomid", currentuomid);
                requestParams.put("companyid", companyid);
                requestParams.put("carryin", carryin); 
                KwlReturnObject result = accProductObj.getProductBaseUOMRate(requestParams);
                    List list = result.getEntityList();
                    Iterator itr = list.iterator();
                    if (itr.hasNext()) {
                        UOMSchema  row =(UOMSchema) itr.next();
                        if (row == null) {
                            obj.put("baseuomrate", 1);                           
                            obj.put("rateperuom", 0);                           
                        } else {
                            obj.put("baseuomrate", row.getBaseuomrate());        
                            obj.put("rateperuom", row.getRateperuom());        
                        }
                        obj.put("availableQtyInSelectedUOM", availableQuantity);
                        obj.put("lockQuantityInSelectedUOM", lockQuantityInSelectedUOM);
                        jobj.append("data", obj);
                    } else {
                        obj.put("baseuomrate", 1);
                        obj.put("rateperuom", 0);
                        obj.put("availableQtyInSelectedUOM", availableQuantity);
                        obj.put("lockQuantityInSelectedUOM", lockQuantityInSelectedUOM);
                        jobj.append("data", obj);
                    }                                             
            }else{
                obj.put("baseuomrate", 1);
                obj.put("rateperuom", 0);
                obj.put("availableQtyInSelectedUOM", availableQuantity);
                obj.put("lockQuantityInSelectedUOM", lockQuantityInSelectedUOM);
                jobj.append("data", obj);
            }
            issuccess = true;
        } catch (SessionExpiredException ex) {
            msg = ex.getMessage();
            Logger.getLogger(accProductControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ServiceException ex) {
            msg = ex.getMessage();
            Logger.getLogger(accProductControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            msg = "" + ex.getMessage();
            Logger.getLogger(accProductControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                jobj.put("success", issuccess);
                jobj.put("msg", msg);
            } catch (JSONException ex) {
                Logger.getLogger(accProductControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return new ModelAndView("jsonView", "model", jobj.toString());
    }
    
    public void checkProductTransactions(HttpServletRequest request, String productid, String companyid) throws SessionExpiredException, AccountingException, ServiceException {
        try {
            if (!StringUtil.isNullOrEmpty(productid)) {
                KwlReturnObject rtObj = accProductObj.getProductByID(productid, companyid);
                Product prd = ((Product) rtObj.getEntityList().get(0));
                Map<String, Object> requestMap = new HashMap<>();
                requestMap.put("productId", productid);
                requestMap.put("companyId", companyid);
                if(prd.getProducttype().getID().equals(Producttype.ASSEMBLY)){//Checking in case of only Assembly products
                    KwlReturnObject result = accPurchaseOrderobj.getPO_Product(requestMap);
                    List list1 = result.getEntityList();
                    int count1 = list1.size();

                    result = accSalesOrderDAOobj.getSO_Product(requestMap);
                    List list2 = result.getEntityList();
                    int count2 = list2.size();

                    result = accGoodsReceiptDAOobj.getGoodsReceipt_Product(requestMap);
                    List list3 = result.getEntityList();
                    int count3 = list3.size();

                    result = accInvoiceDAOobj.getInvoice_Product(requestMap);
                    List list4 = result.getEntityList();
                    int count4 = list4.size();

                    if (count1 > 0 || count2 > 0 || count3 > 0 || count4 > 0) {
                        throw new AccountingException(messageSource.getMessage("acc.acc.editprodexcp", null, RequestContextUtils.getLocale(request)));   //"Selected product is currently used in the Transaction(s). So it cannot be edited.");
                    }
                }
            }
        } catch (ServiceException ex) {
            throw ServiceException.FAILURE(messageSource.getMessage("acc.acc.editprodexcp", null, RequestContextUtils.getLocale(request)), ex);
        }
    }
    private ProductBatch getBatchDetailsForProduct(String productid) throws ServiceException {
        ProductBatch productBatch=null;
        HashMap<String, Object> requestParams = new HashMap<String, Object>();
        requestParams.put("filter_names", Arrays.asList("product"));
        requestParams.put("filter_values", productid);
        KwlReturnObject kmsg = accCommonTablesDAO.getBatch(requestParams);
        List list = kmsg.getEntityList();
        Iterator iter = list.iterator();
        while (iter.hasNext()) {
            productBatch = (ProductBatch) iter.next();
        }
        return productBatch;
    }

    public static double getOutstandingSICount(HashMap<String, Object> requestParams,accInvoiceDAO accInvoiceDAOobj) {
        double quantity = 0;
        try {
            KwlReturnObject result = accInvoiceDAOobj.getInvoiceDetailsForProduct(requestParams);
            List list = result.getEntityList();
            Iterator ite = list.iterator();
            while (ite.hasNext()) {
                InvoiceDetail invoicedetail = (InvoiceDetail) ite.next();
                double actualQty = 0, deliveredQty = 0;
                if (invoicedetail.getInventory() != null) {
                    actualQty = invoicedetail.getInventory().getActquantity();
                }
                deliveredQty += accInvoiceDAOobj.getDeliveryOrderQuantityFromSI(invoicedetail.getID(), (String) requestParams.get("companyid"), false);
                if (invoicedetail.getDeliveryOrderDetail() != null) {
                    deliveredQty += accInvoiceDAOobj.getInvoiceFromQuantityDO(invoicedetail.getDeliveryOrderDetail().getID(), (String) requestParams.get("companyid"), false);
                }
                if (deliveredQty < actualQty) {
                    quantity = quantity + (actualQty - deliveredQty);
                }
            }
        } catch (Exception ex) {
            System.out.println("Exception occurred in getOutstandingSICount: " + ex.getMessage());
        } finally {
            return quantity;
        }
    }
    public static double getPurchaseOrderCount(AccountingHandlerDAO accountingHandlerDAOobj, accGoodsReceiptDAO accGoodsReceiptDAOobj, PurchaseOrderDetail pDetail, CompanyAccountPreferences pref, double count) throws ServiceException {
        double actualQty = 0;
        double deliveredQty = 0;
        actualQty = pDetail.getBaseuomquantity();
        deliveredQty = 0;
        boolean inSelectedUOM=false;
        if (pref.isWithInvUpdate()) { //In Trading Flow  
             deliveredQty +=accGoodsReceiptDAOobj.getReceiptOrderQuantityFromPOD(pDetail.getID(), pref.getCompany().getCompanyID(),inSelectedUOM);
//            KwlReturnObject groresult = accGoodsReceiptDAOobj.getReceiptOrderDFromPOD(pDetail.getID(), pref.getCompany().getCompanyID());
//            List grolist = groresult.getEntityList();
//            if (grolist.size() > 0) {
//                Iterator ite1 = grolist.iterator();
//                while (ite1.hasNext()) {
//                    String groOrderId = (String) ite1.next();
//                    KwlReturnObject res = accountingHandlerDAOobj.getObject(GoodsReceiptOrderDetails.class.getName(), groOrderId);
//                    GoodsReceiptOrderDetails goodsReceiptOrderDetails = (GoodsReceiptOrderDetails) res.getEntityList().get(0);
//                    deliveredQty += goodsReceiptOrderDetails.getBaseuomdeliveredquantity();
//                }
//            }
        } else { //In Non Trading Flow 
            KwlReturnObject grresult = accGoodsReceiptDAOobj.getReceiptDFromPOD(pDetail.getID());
            List grList = grresult.getEntityList();
            Iterator ite1 = grList.iterator();
            while (ite1.hasNext()) {
                GoodsReceiptDetail ge = (GoodsReceiptDetail) ite1.next();
                //                qua += ge.getInventory().getQuantity();
//                                        deliveredQty += pref.isWithInvUpdate()? ge.getInventory().getQuantity() : ge.getInventory().getQuantity();
                deliveredQty += ge.getInventory().getBaseuomquantity();
            }
        }
        if (deliveredQty < actualQty) {
            count = count + (actualQty - deliveredQty);
        }
        return count;
    }
    
    public static double getPurchaseOrderCountInSelectedUOM(AccountingHandlerDAO accountingHandlerDAOobj, accGoodsReceiptDAO accGoodsReceiptDAOobj, PurchaseOrderDetail pDetail, CompanyAccountPreferences pref, double count) throws ServiceException {
        double actualQty = 0;
        double deliveredQty = 0;
        boolean inSelectedUOM=true;
        actualQty = pDetail.getQuantity();//pDetail.getBaseuomquantity();
        if (pref.isWithInvUpdate()) { //In Trading Flow    
            deliveredQty +=accGoodsReceiptDAOobj.getReceiptOrderQuantityFromPOD(pDetail.getID(), pref.getCompany().getCompanyID(),inSelectedUOM);
//            KwlReturnObject groresult = accGoodsReceiptDAOobj.getReceiptOrderDFromPOD(pDetail.getID(), pref.getCompany().getCompanyID());
//            List grolist = groresult.getEntityList();
//            if (grolist.size() > 0) {
//                Iterator ite1 = grolist.iterator();
//                while (ite1.hasNext()) {
//                    String groOrderId = (String) ite1.next();
//                    KwlReturnObject res = accountingHandlerDAOobj.getObject(GoodsReceiptOrderDetails.class.getName(), groOrderId);
//                    GoodsReceiptOrderDetails goodsReceiptOrderDetails = (GoodsReceiptOrderDetails) res.getEntityList().get(0);
//                    deliveredQty += goodsReceiptOrderDetails.getDeliveredQuantity();//goodsReceiptOrderDetails.getBaseuomdeliveredquantity();
//                }
//            }
        } else { //In Non Trading Flow 
            KwlReturnObject grresult = accGoodsReceiptDAOobj.getReceiptDFromPOD(pDetail.getID());
            List grList = grresult.getEntityList();
            Iterator ite1 = grList.iterator();
            while (ite1.hasNext()) {
                GoodsReceiptDetail ge = (GoodsReceiptDetail) ite1.next();
                //                qua += ge.getInventory().getQuantity();
//                                        deliveredQty += pref.isWithInvUpdate()? ge.getInventory().getQuantity() : ge.getInventory().getQuantity();
                deliveredQty += ge.getInventory().getQuantity();//ge.getInventory().getBaseuomquantity();
            }
        }
        if (deliveredQty < actualQty) {
            count = count + (actualQty - deliveredQty);
        }
        return count;
    }
   
    public static double getSalesOrderCount(AccountingHandlerDAO accountingHandlerDAOobj, accInvoiceDAO accInvoiceDAOobj, SalesOrderDetail soDetail, CompanyAccountPreferences pref, boolean fullInv, double count) throws ServiceException {
        double actualQty = 0;
        double deliveredQty = 0;
        actualQty = soDetail.getBaseuomquantity();
        deliveredQty = 0;
        double quantPartTt = soDetail.getQuantity() * 100;
        double quantPartTtInv = 0.0;
        boolean inSelectedUOM=false;
        if (pref.isWithInvUpdate()) { //In Trading Flow  
            deliveredQty +=accInvoiceDAOobj.getDeliveryOrderQuantityFromSOD(soDetail.getID(), pref.getCompany().getCompanyID(), inSelectedUOM); 
             fullInv = true;
//            KwlReturnObject doresult = accInvoiceDAOobj.getDeliveryOrderDFromSOD(soDetail.getID(), pref.getCompany().getCompanyID());
//            List dodlist = doresult.getEntityList();
//            if (dodlist.size() > 0) {
//                Iterator ite1 = dodlist.iterator();
//                while (ite1.hasNext()) {
//                    String dodOrderid = (String) ite1.next();
//                    KwlReturnObject res = accountingHandlerDAOobj.getObject(DeliveryOrderDetail.class.getName(), dodOrderid);
//                    DeliveryOrderDetail deliveryOrderDetail = (DeliveryOrderDetail) res.getEntityList().get(0);
//                    fullInv = true;
//                    deliveredQty += deliveryOrderDetail.getBaseuomdeliveredquantity();
//                }
//            }
        } else { //In Non Trading Flow 
    
            KwlReturnObject idresult = accInvoiceDAOobj.getIDFromSOD(soDetail.getID());
            List invdlist = idresult.getEntityList();
            Iterator ite1 = invdlist.iterator();
            while (ite1.hasNext()) {
                InvoiceDetail ge = (InvoiceDetail) ite1.next();
                if (ge.getInvoice().isPartialinv()) {
                    deliveredQty = ge.getInventory().getBaseuomquantity();
                    quantPartTtInv += ge.getInventory().getQuantity() * ge.getPartamount();
                } else {
                    fullInv = true;
                    deliveredQty += ge.getInventory().getBaseuomquantity();
                }
            }
        }

        if (fullInv) {
            if (deliveredQty < actualQty) {
                count = count + (actualQty - deliveredQty);
            }
        } else if (quantPartTt > quantPartTtInv) {
            count = count + (actualQty - deliveredQty);
        }
        return count;
    }
    
    public static double getSalesOrderCountInSelectedUOM(AccountingHandlerDAO accountingHandlerDAOobj, accInvoiceDAO accInvoiceDAOobj, SalesOrderDetail soDetail, CompanyAccountPreferences pref, boolean fullInv, double count) throws ServiceException {
        double actualQty = 0;
        double deliveredQty = 0;
        actualQty = soDetail.getQuantity();//soDetail.getBaseuomquantity();
        double quantPartTt = soDetail.getQuantity() * 100;
        double quantPartTtInv = 0.0;
        boolean inSelectedUOM=true;
        if (pref.isWithInvUpdate()) { //In Trading Flow 
            deliveredQty +=accInvoiceDAOobj.getDeliveryOrderQuantityFromSOD(soDetail.getID(), pref.getCompany().getCompanyID(), inSelectedUOM); 
             fullInv = true;
//            KwlReturnObject doresult = accInvoiceDAOobj.getDeliveryOrderDFromSOD(soDetail.getID(), pref.getCompany().getCompanyID());
//            List dodlist = doresult.getEntityList();
//            if (dodlist.size() > 0) {
//                Iterator ite1 = dodlist.iterator();
//                while (ite1.hasNext()) {
//                    String dodOrderid = (String) ite1.next();
//                    KwlReturnObject res = accountingHandlerDAOobj.getObject(DeliveryOrderDetail.class.getName(), dodOrderid);
//                    DeliveryOrderDetail deliveryOrderDetail = (DeliveryOrderDetail) res.getEntityList().get(0);
//                    fullInv = true;
//                    deliveredQty += deliveryOrderDetail.getDeliveredQuantity();//deliveryOrderDetail.getBaseuomdeliveredquantity();
//                }
//            }
        } else { //In Non Trading Flow 
    
            KwlReturnObject idresult = accInvoiceDAOobj.getIDFromSOD(soDetail.getID());
            List invdlist = idresult.getEntityList();
            Iterator ite1 = invdlist.iterator();
            while (ite1.hasNext()) {
                InvoiceDetail ge = (InvoiceDetail) ite1.next();
                if (ge.getInvoice().isPartialinv()) {
                    deliveredQty = ge.getInventory().getQuantity();//ge.getInventory().getBaseuomquantity();
                    quantPartTtInv += ge.getInventory().getQuantity() * ge.getPartamount();
                } else {
                    fullInv = true;
                    deliveredQty += ge.getInventory().getQuantity();//ge.getInventory().getBaseuomquantity();
                }
            }
        }

        if (fullInv) {
            if (deliveredQty < actualQty) {
                count = count + (actualQty - deliveredQty);
            }
        } else if (quantPartTt > quantPartTtInv) {
            count = count + (actualQty - deliveredQty);
        }
        return count;
    }
    
    public static double getSalesOrderCountFromProduct(HashMap<String, Object> requestParams, accInvoiceDAO accInvoiceDAOobj, CompanyAccountPreferences pref, double count) throws ServiceException {
        double deliveredQty = 0;
        deliveredQty = accInvoiceDAOobj.getDODetailQuantityFromProduct(requestParams);
        count += deliveredQty;
        return count;
    }

    //Function to show the open SO amd Po for product with its detail uantity
    public ModelAndView getProductOutstandingQuantityDetails(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        String msg = "";
        boolean issuccess = false;
        try {
            jobj = getProductOutstandingQuantityDetails(request);
            issuccess = true;
        } catch (SessionExpiredException ex) {
            msg = ex.getMessage();
            Logger.getLogger(accProductControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ServiceException ex) {
            msg = "accProductControllerCMN.getProductDetailsQuantity:" + ex.getMessage();
            Logger.getLogger(accProductControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            msg = "accProductControllerCMN.getProductDetailsQuantity:" + ex.getMessage();
            Logger.getLogger(accProductControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                jobj.put("success", issuccess);
                jobj.put("msg", msg);
            } catch (JSONException ex) {
                Logger.getLogger(accProductControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return new ModelAndView("jsonView", "model", jobj.toString());
    }

    public JSONObject getProductOutstandingQuantityDetails(HttpServletRequest request) throws SessionExpiredException, ServiceException {
        JSONObject jobj = new JSONObject();
        JSONArray jArr = new JSONArray();
          double TotalCount=0; 
        try {
            String productid = request.getParameter("productid");
            String productname = request.getParameter("productname");
            boolean SoPoFlag = Boolean.parseBoolean(request.getParameter("SoPoFlag"));
            String companyid = sessionHandlerImpl.getCompanyid(request);
            DateFormat df = authHandler.getDateOnlyFormat(request);

            HashMap<String, Object> requestParams = productHandler.getProductRequestMap(request);
            requestParams.remove(Constants.start);
            requestParams.remove(Constants.limit);
            requestParams.put("productid", productid);
            requestParams.put("companyid", companyid);
            requestParams.put("df", authHandler.getDateOnlyFormat(request));
            requestParams.put("pendingapproval", false);
            requestParams.put("issopoclosed", true);//added to get so and po which are not closed manually
            if (!StringUtil.isNullOrEmpty(productid)) {
                if (SoPoFlag) {
                    KwlReturnObject result = accSalesOrderDAOobj.getSalesOrdersMerged(requestParams);
                    List list = result.getEntityList();
                    Iterator itr = list.iterator();
                    while (itr.hasNext()) {
                        JSONObject obj = new JSONObject();
                        Object[] oj = (Object[]) itr.next();
                        String invid = oj[0].toString();
                        KwlReturnObject objItr = accountingHandlerDAOobj.getObject(SalesOrder.class.getName(), invid);
                        SalesOrder soorder = (SalesOrder) objItr.getEntityList().get(0);
                        Set<SalesOrderDetail> orderDetail = soorder.getRows();
                        Iterator ite = orderDetail.iterator();

                        KwlReturnObject cpresult = accountingHandlerDAOobj.getObject(CompanyAccountPreferences.class.getName(), soorder.getCompany().getCompanyID());
                        CompanyAccountPreferences pref = (CompanyAccountPreferences) cpresult.getEntityList().get(0);
                        String resultorder = "Closed";
                        boolean fullInv = false;
                        while (ite.hasNext()) {

                            SalesOrderDetail soDetail = (SalesOrderDetail) ite.next();
                            if(!productid.equals(soDetail.getProduct().getID())){
                                continue;
                            }
                            double qua = 0;
                            double quantPartTt = soDetail.getQuantity() * 100;
                            double quantPartTtInv = 0.0;
                            if (pref.isWithInvUpdate()) { //In Trading Flow                 
                                KwlReturnObject doresult = accInvoiceDAOobj.getDeliveryOrderDFromSOD(soDetail.getID(), pref.getCompany().getCompanyID());
                                List list1 = doresult.getEntityList();
                                if (list1.size() > 0) {
                                    Iterator ite1 = list1.iterator();
                                    while (ite1.hasNext()) {
                                        String orderid = (String) ite1.next();
                                        KwlReturnObject res = accountingHandlerDAOobj.getObject(DeliveryOrderDetail.class.getName(), orderid);
                                        DeliveryOrderDetail deliveryOrderDetail = (DeliveryOrderDetail) res.getEntityList().get(0);
                                        fullInv = true;
                                        qua += deliveryOrderDetail.getBaseuomdeliveredquantity();
                                    }
                                }
                            } else { //In Non Trading Flow 

                                KwlReturnObject idresult = accInvoiceDAOobj.getIDFromSOD(soDetail.getID());
                                List list1 = idresult.getEntityList();
                                Iterator ite1 = list1.iterator();
                                while (ite1.hasNext()) {
                                    InvoiceDetail ge = (InvoiceDetail) ite1.next();
                                    if (ge.getInvoice().isPartialinv()) {
                                        double quantity = ge.getInventory().getBaseuomquantity();
                                        quantPartTtInv += quantity * ge.getPartamount();
                                    } else {
                                        fullInv = true;
                                        qua += ge.getInventory().getBaseuomquantity();
                                    }
                                }
                            }
  
                            if (fullInv) {
                                if (qua < soDetail.getBaseuomquantity()) {
                                    resultorder = "Open";
                                    obj.put("productid", soorder.getID());
                                    obj.put("sonumber", soorder.getSalesOrderNumber());
                                    obj.put("sodate", df.format(soorder.getOrderDate()));
                                    obj.put("customername", soorder.getCustomer() == null ? "" : soorder.getCustomer().getName());
                                    obj.put("productname", productname);
                                    obj.put("status", resultorder);
                                    obj.put("quantity", (soDetail.getBaseuomquantity() - qua));
                                    TotalCount = TotalCount + (soDetail.getBaseuomquantity() - qua);
                                    jArr.put(obj);
                                    break;

                                }

                            } else if (quantPartTt > quantPartTtInv && !(soDetail.isIsLineItemClosed())) {
                                resultorder = "Open";
                                obj.put("productid", soorder.getID());
                                obj.put("sonumber", soorder.getSalesOrderNumber());
                                obj.put("sodate", df.format(soorder.getOrderDate()));
                                obj.put("customername", soorder.getCustomer() == null ? "" : soorder.getCustomer().getName());
                                obj.put("productname", productname);
                                obj.put("status", resultorder);
                                obj.put("quantity", (soDetail.getBaseuomquantity() - qua));
                                TotalCount = TotalCount + (soDetail.getBaseuomquantity() - qua);
                                jArr.put(obj);
                                //break;
                            }
                        }

                    }

                } else {
                    KwlReturnObject result1 = accPurchaseOrderobj.getPurchaseOrdersMerged(requestParams);
                    List list1 = result1.getEntityList();
                    Iterator itr1 = list1.iterator();
                    while (itr1.hasNext()) {

                        Object[] oj = (Object[]) itr1.next();
                        String invid = oj[0].toString();
                        JSONObject obj = new JSONObject();
                        KwlReturnObject objItr1 = accountingHandlerDAOobj.getObject(PurchaseOrder.class.getName(), invid);
                        PurchaseOrder purchaseOrder = (PurchaseOrder) objItr1.getEntityList().get(0);
                      
                        KwlReturnObject cpresult = accountingHandlerDAOobj.getObject(CompanyAccountPreferences.class.getName(), purchaseOrder.getCompany().getCompanyID());
                        CompanyAccountPreferences pref = (CompanyAccountPreferences) cpresult.getEntityList().get(0);

                           String resultorder = "Closed";
                        Set<PurchaseOrderDetail> orderDetail = purchaseOrder.getRows();
                        Iterator ite = orderDetail.iterator();
                        while (ite.hasNext()) {
                            PurchaseOrderDetail pDetail = (PurchaseOrderDetail) ite.next();
                            if(!productid.equals(pDetail.getProduct().getID())){
                                continue;
                            }
                            double qua = 0;
                                 if (pref.isWithInvUpdate()) { //In Trading Flow                  
                                    KwlReturnObject groresult = accGoodsReceiptDAOobj.getReceiptOrderDFromPODOptimized(pDetail.getID(), pref.getCompany().getCompanyID());
                                    List list = groresult.getEntityList();
                                    if (list.size() > 0) {
                                        Iterator ite1 = list.iterator();
                                        while (ite1.hasNext()) {
                                            String orderid = (String) ite1.next();
                                            KwlReturnObject res = accountingHandlerDAOobj.getObject(GoodsReceiptOrderDetails.class.getName(), orderid);
                                            GoodsReceiptOrderDetails goodsReceiptOrderDetails = (GoodsReceiptOrderDetails) res.getEntityList().get(0);
                                            qua += goodsReceiptOrderDetails.getBaseuomdeliveredquantity();
                                        }
                                    }
                                } else { //In Non Trading Flow 
                                    KwlReturnObject grresult = accGoodsReceiptDAOobj.getReceiptDFromPOD(pDetail.getID());
                                    List list = grresult.getEntityList();
                                    Iterator ite1 = list.iterator();
                                    while (ite1.hasNext()) {
                                        GoodsReceiptDetail ge = (GoodsReceiptDetail) ite1.next();
                                        qua += ge.getInventory().getBaseuomquantity();
                                    }
                                }
                                if (qua < pDetail.getBaseuomquantity() && !(pDetail.isIsLineItemClosed()) ) {
                                    resultorder = "Open";
                                    obj.put("productid", purchaseOrder.getID());
                                    obj.put("productname", productname);
                                    obj.put("sonumber", purchaseOrder.getPurchaseOrderNumber());
                                    obj.put("sodate", df.format(purchaseOrder.getOrderDate()));
                                    obj.put("customername", purchaseOrder.getVendor() == null ? "" : purchaseOrder.getVendor().getName());
                                    obj.put("status", resultorder);
                                    obj.put("quantity", (pDetail.getBaseuomquantity() - qua));
                                     TotalCount = TotalCount + (pDetail.getBaseuomquantity() - qua);
                                    jArr.put(obj);
                                    //break;
                                
                                }
                         }

                    }
                }
                jobj.put("TotalCount",TotalCount);
                jobj.put("count", jArr.length());
                jobj.put("data", jArr);

            }
        } catch (JSONException je) {
            throw ServiceException.FAILURE(je.getMessage(), je);
        }
        return jobj;
    }

       
    public ModelAndView getReorderAnalysisProducts(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        boolean issuccess = false;
        String msg = "";
        try{
            HashMap<String, Object> requestParams = productHandler.getProductRequestMap(request);
            String companyid=(String)requestParams.get(Constants.companyKey);
            KwlReturnObject result = accProductObj.getProducts(requestParams);
            List list = result.getEntityList();
            int count = result.getRecordTotalCount();//list.size();
            JSONArray DataJArr = getReorderAnalysisProductsJson(request, list,companyid);
            jobj.put("data", DataJArr);
            jobj.put("count", count);
            issuccess = true;
        } catch (SessionExpiredException ex) {
            msg = ex.getMessage();
            Logger.getLogger(accProductControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ServiceException ex) {
            msg = ex.getMessage();
            Logger.getLogger(accProductControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
        } catch (JSONException ex) {
            msg = ex.getMessage();
            Logger.getLogger(accProductControllerCMN.class.getName()).log(Level.SEVERE, null, ex);        
        } catch (Exception ex) {
            msg = ""+ex.getMessage();
            Logger.getLogger(accProductControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                jobj.put("success", issuccess);
                jobj.put("msg", msg);
            } catch (JSONException ex) {
                Logger.getLogger(accProductControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return new ModelAndView("jsonView", "model", jobj.toString());
    }
    
    private JSONArray getReorderAnalysisProductsJson(HttpServletRequest request, List list,String companyid) throws JSONException, ServiceException ,Exception{
        Iterator itr = list.iterator();
        JSONArray jArr=new JSONArray();
        Producttype producttype = new Producttype();
        String productid = request.getParameter("productid");
        Boolean isSearch=false;
         if(request.getParameter("ss") != null && !StringUtil.isNullOrEmpty(request.getParameter("ss"))) {
            isSearch=true;
        }
        Boolean nonSaleInventory = Boolean.parseBoolean((String)request.getParameter("loadInventory"));
        
        KwlReturnObject cpresult = accountingHandlerDAOobj.getObject(CompanyAccountPreferences.class.getName(),companyid);
        CompanyAccountPreferences pref = (CompanyAccountPreferences) cpresult.getEntityList().get(0);
                
        HashMap<String, Object> requestParams = AccountingManager.getGlobalParams(request);
        requestParams.put(Constants.REQ_startdate ,request.getParameter(Constants.REQ_startdate));
        requestParams.put(Constants.REQ_enddate ,request.getParameter(Constants.REQ_enddate));
        requestParams.put("pendingapproval" , false);
        Boolean isTradingFlow = false;
        if (pref!=null && pref.isWithInvUpdate())
              isTradingFlow = true;            
        requestParams.put("isTradingFlow", isTradingFlow);        
        
        KwlReturnObject res = accPurchaseOrderobj.getPurchaseOrdersMerged(requestParams);
        List POList=res.getEntityList();
        
        KwlReturnObject result = accPurchaseOrderobj.getOutstandingPurchaseOrders(requestParams);
        List outStandingPOList=result.getEntityList();
                
        String startDate = request.getParameter(Constants.REQ_startdate);
        String endDate =  request.getParameter(Constants.REQ_enddate);
        long numberOfWeeks=0;
        if (!StringUtil.isNullOrEmpty(startDate) && !StringUtil.isNullOrEmpty(endDate)) {
            DateFormat df = (DateFormat) requestParams.get(Constants.df);
            Date stDate=df.parse(startDate);
            Date enDate=df.parse(endDate);
            numberOfWeeks=getNumberOfWeeks(stDate,enDate);
        }                    
        
        while(itr.hasNext()) {
            try {
                double outStandingPOQuantity=0;
                double POQuantity=0;
                double avgqty=0;
                double minqty=0;
                double deliverytime=1;
                double safetystock=0;
                double ordercycletime=1;
                double ordercycleqty=0;
                double reorderqty=0;
                
                Object[] row = (Object[]) itr.next();
                Product product = (Product) row[0];
                Product parentProduct = product.getParent();
                if(product.getID().equals(productid)) continue;
//                ProductCyclecount pcObject = (ProductCyclecount) row[8];
                JSONObject obj = new JSONObject();
                obj.put("productid", product.getID());
                obj.put("productname", product.getName());
                obj.put("description", URLEncoder.encode(StringUtil.isNullOrEmpty(product.getDescription())?"":product.getDescription(), "UTF-8"));
                obj.put("desc", product.getDescription());
                UnitOfMeasure uom = product.getUnitOfMeasure();
//                UnitOfMeasure purchaseuom = product.getPurchaseUoM();
//                UnitOfMeasure salesuom = product.getSalesUoM();
                obj.put("uomid", uom==null?"":uom.getID());
//                obj.put("purchaseuom", purchaseuom==null?"":purchaseuom.getID());
//                obj.put("salesuom", salesuom==null?"":salesuom.getID());
//                obj.put("stockpurchaseuomvalue", product.getPurchasetostockuomvalue());
//                obj.put("stocksalesuomvalue", product.getSalestostockuomvalue());
                obj.put("uomname", uom==null?"":uom.getNameEmptyforNA());
//                obj.put("purchaseuomname", purchaseuom==null?"":purchaseuom.getName());
//                obj.put("salesuomname", salesuom==null?"":salesuom.getName());
                obj.put("precision", uom==null?0:(Integer) uom.getAllowedPrecision());
                obj.put("leadtime", product.getLeadTimeInDays());
                //if(product.getWarrantyperiod() !=-1){
                    obj.put("warrantyperiod", product.getWarrantyperiod());
                    obj.put("warrantyperiodsal", product.getWarrantyperiodsal());
               // }
                
                obj.put("supplier", product.getSupplier());
                obj.put("coilcraft", product.getCoilcraft());
                obj.put("interplant", product.getInterplant());
                obj.put("syncable", product.isSyncable());
                obj.put("multiuom", product.isMultiuom());
                obj.put("uomschematypeid", product.getUomSchemaType()!=null?product.getUomSchemaType().getID():"");
                 obj.put("isBatchForProduct", product.isIsBatchForProduct());
                obj.put("isSerialForProduct", product.isIsSerialForProduct());
                obj.put("qaenable", product.isQaenable());
                obj.put("activateProductComposition", product.isActivateProductComposition());
                obj.put("reorderlevel", product.getReorderLevel());
                obj.put("reorderquantity", product.getReorderQuantity());
                obj.put("purchaseaccountid", (product.getPurchaseAccount()!=null?product.getPurchaseAccount().getID():""));
                obj.put("salesaccountid", (product.getSalesAccount()!=null?product.getSalesAccount().getID():""));
    //            obj.put("salesacctaxcode", "c340667e2896c0d80128a569f065017a");//(product.getPurchaseAccount()!=null?product.getPurchaseAccount().getID():""));
    //            obj.put("purchaseacctaxcode", "c340667e2896c0d80128a569f065017a");//(product.getSalesAccount()!=null?product.getSalesAccount().getID():""));
                obj.put("purchaseacctaxcode", ((product.getPurchaseAccount()!=null && (!StringUtil.isNullOrEmpty(product.getPurchaseAccount().getTaxid())))?product.getPurchaseAccount().getTaxid():""));
                obj.put("salesacctaxcode", ((product.getSalesAccount()!=null && (!StringUtil.isNullOrEmpty(product.getSalesAccount().getTaxid())))?product.getSalesAccount().getTaxid():""));
                obj.put("purchaseretaccountid", (product.getPurchaseReturnAccount()!=null?product.getPurchaseReturnAccount().getID():""));
                obj.put("salesretaccountid", (product.getSalesReturnAccount()!=null?product.getSalesReturnAccount().getID():""));
                obj.put("vendor", (product.getVendor()!=null?product.getVendor().getID():""));
                obj.put("vendornameid", (product.getVendor()!=null?product.getVendor().getName():""));
                obj.put("producttype", (product.getProducttype()!=null?product.getProducttype().getID():""));
                obj.put("vendorphoneno", (product.getVendor()!=null?product.getVendor().getContactNumber():""));
                obj.put("vendoremail", (product.getVendor()!=null?product.getVendor().getEmail():""));
                obj.put("type", (product.getProducttype()!=null?product.getProducttype().getName():""));
                obj.put("pid",product.getProductid());
                obj.put("partnumber", product.getCoilcraft());
                obj.put("productweight", product.getProductweight());
                obj.put("productweightperstockuom",  product.getProductWeightPerStockUom());
                obj.put("productweightincludingpakagingperstockuom", product.getProductWeightIncludingPakagingPerStockUom());
                obj.put("productvolumeperstockuom",product.getProductVolumePerStockUom());
                obj.put("productvolumeincludingpakagingperstockuom",product.getProductVolumeIncludingPakagingPerStockUom());            

                if(product.getWarrantyperiod() == 0){
                    obj.put("warranty","N/A");
                } else {
                    obj.put("warranty",product.getWarrantyperiod());
                }
                if(product.getWarrantyperiodsal() == 0){
                    obj.put("warrantyperiodsal","N/A");
                } else {
                    obj.put("warrantyperiodsal",product.getWarrantyperiodsal());
                }
                
                obj.put("parentuuid", parentProduct==null?"":parentProduct.getID());
                obj.put("parentid", parentProduct==null?"":parentProduct.getProductid());
                obj.put("parentname", parentProduct==null?"":parentProduct.getName());
                if (isSearch) {
                    obj.put("level", 0);
                    obj.put("leaf", true);
                } else {
                    obj.put("level", row[1]);
                    obj.put("leaf", row[2]);
                }
                
                JSONArray customJSONArray=getCustomColumnData(product.getID(),companyid);
                if(customJSONArray.length()>0){
                    for(int count=0;count<customJSONArray.length();count++){
                        
                        JSONObject customJSONObject=customJSONArray.getJSONObject(count);
                        
                        if(!customJSONObject.isNull("fieldname") && customJSONObject.optString("fieldname","").equalsIgnoreCase("Custom_Minimum Quantity") && (customJSONObject.getInt("fieldtype")== 2)){
                            if(!customJSONObject.isNull("fieldData") && StringUtil.isNullOrEmpty(customJSONObject.optString("fieldData",""))){
                                obj.put("minqty", customJSONObject.getString("fieldData"));
                                minqty=Double.parseDouble(customJSONObject.getString("fieldData"));
                            }
                        }
                        
                        if(!customJSONObject.isNull("fieldname") && customJSONObject.optString("fieldname","").equalsIgnoreCase("Custom_Delivery Time") && (customJSONObject.getInt("fieldtype")== 2)){
                            if(!customJSONObject.isNull("fieldData") && StringUtil.isNullOrEmpty(customJSONObject.optString("fieldData",""))){                                
                                deliverytime=Double.parseDouble(customJSONObject.getString("fieldData"));
                            }
                        }
                        
                        if(!customJSONObject.isNull("fieldname") && customJSONObject.optString("fieldname","").equalsIgnoreCase("Custom_Order Cycle Time (in days)") && (customJSONObject.getInt("fieldtype")== 2)){
                            if(!customJSONObject.isNull("fieldData") && StringUtil.isNullOrEmpty(customJSONObject.optString("fieldData",""))){                                
                                ordercycletime=Double.parseDouble(customJSONObject.getString("fieldData"));
                                if(ordercycletime==0){
                                   ordercycletime=1;
                                }
                            }
                        }
                    }
                }
                                
                outStandingPOQuantity=getOutStandingPOQuantity(outStandingPOList,product.getID());
                obj.put("outstandingpoqty", outStandingPOQuantity);
                    
                POQuantity=getOutStandingPOQuantity(POList,product.getID());
                
                if(numberOfWeeks!=0){
                    avgqty=POQuantity/numberOfWeeks;
                    avgqty=StringUtil.roundDoubleTo(avgqty, 3);
                }
                obj.put("avgqty", avgqty);
                
                safetystock=(deliverytime*avgqty)+minqty;
                obj.put("safetystock",StringUtil.roundDoubleTo(safetystock,3));
                
                ordercycleqty=(ordercycletime/7)*avgqty;
                obj.put("ordercycleqty",StringUtil.roundDoubleTo(ordercycleqty,3));
                
//                reorderqty=(safetystock+ordercycleqty-(outStandingPOQuantity*product.getPurchasetostockuomvalue()))/product.getPurchasetostockuomvalue();
                obj.put("reorderqty",StringUtil.roundDoubleTo(reorderqty,3));
                
                obj.put("purchaseprice", row[3]==null?0:row[3]);
                obj.put("saleprice",row[4]==null?0:row[4]);
                obj.put("quantity",(row[5]==null?0:row[5]));
                obj.put("initialquantity",(row[6]==null?0:row[6]));
                obj.put("initialprice",(row[7]==null?0:row[7]));
                obj.put("salespricedatewise",(row[9]==null?0:row[9]));
                obj.put("purchasepricedatewise",(row[10]==null?0:row[10]));
                obj.put("initialsalesprice",(row[11]==null?0:row[11]));                
//                obj.put("ccountinterval",pcObject!=null?pcObject.getCountInterval():"");
//                obj.put("ccounttolerance",pcObject!=null?pcObject.getTolerance():"");
                SimpleDateFormat sdf=new SimpleDateFormat("MMMM d, yyyy hh:mm:ss aa");
             //  obj.put("createdon", (row[12]==null?"":sdf.format(row[12])));
    //            jArr.put(obj);
                if(nonSaleInventory && obj.get("producttype").equals(producttype.Inventory_Non_Sales)){
                        // Do Nothing
                }else{
                    jArr.put(obj);
                }
            } catch (UnsupportedEncodingException ex) {
                throw ServiceException.FAILURE("getProductsJson : " + ex.getMessage(), ex);
            }
        }
        return jArr;
    }
    
    private double getOutStandingPOQuantity(List outStandingPOList,String productId)throws Exception{    
        double outStandingPOQuantity=0;
        Iterator poItr = outStandingPOList.iterator();
            while (poItr.hasNext()) {
                Object[] oj = (Object[])poItr.next();                
                String orderid = oj[0].toString();                
                boolean withoutinventory = Boolean.parseBoolean(oj[1].toString());
                if(!withoutinventory) {
                    KwlReturnObject objItr = accountingHandlerDAOobj.getObject(PurchaseOrder.class.getName(), orderid);
                    PurchaseOrder purchaseOrder = (PurchaseOrder) objItr.getEntityList().get(0);
                    Set<PurchaseOrderDetail> purchaseOrderDetails = purchaseOrder.getRows();
                    for (PurchaseOrderDetail purchaseOrderDetail : purchaseOrderDetails) {
                         if (productId.equalsIgnoreCase(purchaseOrderDetail.getProduct().getID())) {
                             outStandingPOQuantity+=purchaseOrderDetail.getQuantity();
                        }
                    }
                }
            }        
        return outStandingPOQuantity;        
    }
    
    private long getNumberOfWeeks(Date startDate,Date endDate)throws Exception{
    
        long numberOfWeeks=0;
        
        Calendar stDate=Calendar.getInstance();        
        stDate.setTime(startDate);        
        Calendar enDate=Calendar.getInstance();        
        enDate.setTime(endDate);
        
        if(stDate.after(enDate)){
            return numberOfWeeks;
        }
            
        for(numberOfWeeks=1;; numberOfWeeks++ ){
            stDate.add(Calendar.WEEK_OF_YEAR,1); // add one day, week, year, etc.
            if(stDate.after(enDate)){
                System.out.println(numberOfWeeks);
                return numberOfWeeks;                
            }                
        }
        
    }
    
    private JSONArray getCustomColumnData(String productId, String companyId) throws JSONException,Exception{
    
        JSONArray customJSONArray=new  JSONArray();
        
        int lineitem = 0;//we don't have line items so its value is 0
        String module = String.valueOf(Constants.Acc_Product_Master_ModuleId);
//        String itemId = request.getParameter("itemId");
        String[] moduleidarray = null; //we don't have multiple modules so its value is null and we have only one module i.e ItemMaster_ModuleId
        String commaSepratedModuleids = "";
        if (moduleidarray != null) {
            for (int i = 0; i < moduleidarray.length; i++) {
                if (!StringUtil.isNullOrEmpty(moduleidarray[i])) {
                    commaSepratedModuleids += moduleidarray[i] + ",";
                }
            }
            if (moduleidarray.length > 1) {
                commaSepratedModuleids = commaSepratedModuleids.substring(0, commaSepratedModuleids.length() - 1);
            }
        }
        HashMap<String, Object> requestParams = new HashMap<String, Object>();        
        String companyid = companyId;
        List<String> paramStrings = new ArrayList<String>();
        List<Object> paramValues = new ArrayList<Object>();
        Integer colcount = 1;
        if (StringUtil.isNullOrEmpty(commaSepratedModuleids) && StringUtil.isNullOrEmpty(module)) {                
                paramStrings.add(Constants.companyid);
                paramStrings.add(Constants.customcolumn);                
                requestParams.put(Constants.filter_names, paramStrings);
                //requestParams.put(CustomColumnConstants.filter_names, Arrays.asList(CustomColumnConstants.companyid,CustomColumnConstants.customcolumn));
                
                paramValues.add(companyid);
                paramValues.add(lineitem);                
                requestParams.put(Constants.filter_values, paramValues);
                //requestParams.put(Constants.filter_values, Arrays.asList(companyid,lineitem));
            
            } else if (StringUtil.isNullOrEmpty(commaSepratedModuleids)) {
                Integer moduleid = Integer.parseInt(module);
               if(moduleid>99){  //Added module >100 for Report like ledger, Balance sheet etc
               if(moduleid==101){ 
                    paramStrings.add(Constants.companyid);
                    requestParams.put(Constants.filter_names, paramStrings);
                    //requestParams.put(Constants.filter_names, Arrays.asList(Constants.companyid));
                
                    paramValues.add(companyid);
                    requestParams.put(Constants.filter_values, paramValues);
                    //requestParams.put(Constants.filter_values, Arrays.asList(companyid));
                
               }else{
                   paramStrings.add(Constants.companyid);
                   paramStrings.add(Constants.customcolumn);                
                   requestParams.put(Constants.filter_names, paramStrings);
                   //requestParams.put(CustomColumnConstants.filter_names, Arrays.asList(CustomColumnConstants.companyid,CustomColumnConstants.customcolumn));
                
                   paramValues.add(companyid);
                   paramValues.add(lineitem);                
                   requestParams.put(Constants.filter_values, paramValues);
                   //requestParams.put(Constants.filter_values, Arrays.asList(companyid,lineitem));                                      
               }
               }else{
                    paramStrings.add(Constants.companyid);
                    paramStrings.add(Constants.moduleid);
                    paramStrings.add(Constants.customcolumn);                
                    requestParams.put(Constants.filter_names, paramStrings);
                    //requestParams.put(Constants.filter_names, Arrays.asList(Constants.companyid, Constants.moduleid,Constants.customcolumn));                

                    paramValues.add(companyid);
                    paramValues.add(moduleid);
                    paramValues.add(lineitem);                
                    requestParams.put(Constants.filter_values, paramValues);                                
                    //requestParams.put(Constants.filter_values, Arrays.asList(companyid, moduleid,lineitem));                                   
               }
            } else {
                paramStrings.add(Constants.companyid);
                paramStrings.add(Constants.INmoduleid);
                paramStrings.add(Constants.customcolumn);                
                requestParams.put(Constants.filter_names, paramStrings);
                //requestParams.put(Constants.filter_names, Arrays.asList(Constants.companyid, Constants.INmoduleid,Constants.customcolumn));                
                
                paramValues.add(companyid);
                paramValues.add(commaSepratedModuleids);
                paramValues.add(lineitem);                
                requestParams.put(Constants.filter_values, paramValues);                                
                //requestParams.put(Constants.filter_values, Arrays.asList(companyid, commaSepratedModuleids,lineitem));
            }
             KwlReturnObject result = accAccountDAOobj.getFieldParams(requestParams);             
             List lst=result.getEntityList();
             colcount = lst.size();
             Iterator ite = lst.iterator();
            while (ite.hasNext()) {
                FieldParams tmpcontyp = (FieldParams) ite.next();
                JSONObject jobj = new JSONObject();
                jobj.put("fieldname", tmpcontyp.getFieldname());
                AccProductCustomData accProductCustomData=new AccProductCustomData();
                KwlReturnObject custumObjresult = null;
                if (!StringUtil.isNullOrEmpty(productId)) {                    
                    try {
                        custumObjresult = accountingHandlerDAOobj.getObject(AccProductCustomData.class.getName(), productId);
                    } catch (Exception e) {
                    }
                    accProductCustomData = (AccProductCustomData) custumObjresult.getEntityList().get(0);
                        if (accProductCustomData != null) {
                            String coldata = accProductCustomData.getCol(tmpcontyp.getColnum());
                            if (!StringUtil.isNullOrEmpty(coldata)) {
                                jobj.put("fieldData", coldata);
                            }
                        }                                        
                }
                
                if(StringUtil.isNullOrEmpty(module)){
                    if(lineitem==0)
                        jobj.put("fieldlabel", tmpcontyp.getFieldlabel()+"(Product Master)");
                    else 
                        jobj.put("fieldlabel", tmpcontyp.getFieldlabel());
                }else{
                     Integer moduleid = Integer.parseInt(module);
                     if(moduleid>99){ 
                         jobj.put("fieldlabel", tmpcontyp.getFieldlabel()+"(Product Master)");
                     }else
                     jobj.put("fieldlabel", tmpcontyp.getFieldlabel());
                }
                jobj.put("isessential", tmpcontyp.getIsessential());
                jobj.put("maxlength", tmpcontyp.getMaxlength());
                jobj.put("validationtype", tmpcontyp.getValidationtype());
                jobj.put("fieldid", tmpcontyp.getId());
                jobj.put("moduleid", tmpcontyp.getModuleid());
                jobj.put("fieldtype", tmpcontyp.getFieldtype());
                jobj.put("iseditable", tmpcontyp.getIseditable());
                jobj.put("comboid", tmpcontyp.getComboid());
                jobj.put("comboname", tmpcontyp.getComboname());
                jobj.put("moduleflag", tmpcontyp.getModuleflag());
                jobj.put("refcolumn_number", Constants.Custom_column_Prefix + tmpcontyp.getRefcolnum());
                jobj.put("column_number", Constants.Custom_column_Prefix + tmpcontyp.getColnum());
                jobj.put("sendnotification", tmpcontyp.getsendNotification());
                jobj.put("notificationdays", tmpcontyp.getnotificationDays());
                jobj.put("iscustomfield", tmpcontyp.getCustomfield()==1 ? true : false);
                jobj.put("iscustomcolumn", tmpcontyp.getCustomcolumn()==1 ? true : false);
                customJSONArray.put(jobj);
            }
            
        return customJSONArray; 
    }
    
    //Common function to produce product detail in json-Neeraj D   
    public JSONObject getProductDetailJson(HttpServletRequest request, KwlReturnObject result2, KwlReturnObject result1) throws SessionExpiredException, ServiceException, JSONException, UnsupportedEncodingException {
        List novendorproductlist;
        JSONObject objfinal = new JSONObject();
//        JSONObject obj= new JSONObject();
        try {
            novendorproductlist = result2.getEntityList();
            JSONArray jArray = new JSONArray();
            for (int cnt = 0; cnt < novendorproductlist.size(); cnt++) {
                Product product = (Product) novendorproductlist.get(cnt);
                JSONObject obj = accProductModuleService.createProductJsonObject(product);
                jArray.put(obj);
            }
            objfinal.put("objreturn", jArray);
        } catch (Exception ex) {
            Logger.getLogger(accProductControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
            throw ServiceException.FAILURE("getProductDetailJson : " + ex.getMessage(), ex);
        }
        return objfinal;
    }
    
    public ModelAndView exportStockLedger(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        JSONArray DataJArr = new JSONArray();
        String view = "jsonView_ex";
        try {
            String companyid = sessionHandlerImpl.getCompanyid(request);
            HashMap<String, Object> companyPriceListParams = new HashMap<String, Object>();
            companyPriceListParams.put("isPurchase", true);
            KwlReturnObject kwlCompanyMaxDateProductPriceList = accProductObj.getAllProductsMaxAppliedDatePriceDetails(companyid, companyPriceListParams);
            Map<String, Object[]> companyMaxDateProductPriceList = AccReportsHandler.getcompanyMaxDateProductPriceListMap(kwlCompanyMaxDateProductPriceList.getEntityList());
            /**
             * if MRP is Activated, isActivateMRPModule flag will be true to get all MRP related transaction.
             * otherwise isActivateMRPModule flag will be false which will not return MRP related transaction.
             */
            boolean isActivateMRPModule = false;
            Map<String, Object> filterMap = new HashMap();
            filterMap.put(Constants.Acc_id, companyid);
            Object extraPrefActivateMRP = kwlCommonTablesDAOObj.getRequestedObjectFields(ExtraCompanyPreferences.class, new String[]{"activateMRPModule"}, filterMap);
            if (extraPrefActivateMRP != null) {
                isActivateMRPModule = (Boolean) extraPrefActivateMRP;
            }
            
            boolean isStockLedger=true;
            boolean isInventoryValuation = true;
            boolean isFromStockReport = true;
            HashMap<String, Object> requestParams = new HashMap<String, Object>();
            requestParams.put(Constants.globalCurrencyKey, sessionHandlerImpl.getCurrencyID(request));
            requestParams.put(Constants.df, authHandler.getDateOnlyFormat(request));
            isStockLedger=Boolean.parseBoolean(request.getParameter("isStockLedger"));
            if(!StringUtil.isNullOrEmpty(request.getParameter("customerId"))){
                requestParams.put("customerId", request.getParameter("customerId"));
            }
            if(!StringUtil.isNullOrEmpty(request.getParameter("vendorId"))){
                requestParams.put("vendorId", request.getParameter("customerId"));
            }
            if(!StringUtil.isNullOrEmpty(request.getParameter("selproductIds"))){
                requestParams.put("selproductIds", request.getParameter("selproductIds"));
            }
            isInventoryValuation = Boolean.parseBoolean(request.getParameter("isInventoryValuation"));
            isFromStockReport = Boolean.parseBoolean(request.getParameter("isFromStockReport"));
//            requestParams.put("start", request.getParameter("start"));
//            requestParams.put("limit", request.getParameter("limit"));
            String ss = request.getParameter("ss");
            if (!StringUtil.isNullOrEmpty(ss)) {
                if (!StringUtil.isNullOrEmpty(request.getParameter("searchOnField"))) {
                    String searchOnField = request.getParameter("searchOnField");
                    if (searchOnField.equalsIgnoreCase("BATCH")) {
                        /**
                         * If Quick Search is on batch names.
                         */
                        requestParams.put("batchNameSearch", ss);
                    } else if (searchOnField.equalsIgnoreCase("SERIAL")) {
                        /**
                         * If Quick Search is on serial names.
                         */
                        requestParams.put("serialNameSearch", ss);
                    } else {
                        requestParams.put("ss", ss);
                    }
                } else {
                    requestParams.put("ss", ss);
                }
            }
            requestParams.put(Constants.REQ_startdate, request.getParameter("startdate"));
            requestParams.put(Constants.REQ_enddate, request.getParameter("enddate"));
            requestParams.put("companyid", sessionHandlerImpl.getCompanyid(request));
            requestParams.put("searchJson", request.getParameter("searchJson"));
            requestParams.put("docType", request.getParameter("docType"));
            requestParams.put("productId", request.getParameter("productId"));
            requestParams.put("filterConjuctionCriteria", request.getParameter("filterConjuctionCriteria"));
            requestParams.put("isFromStockReport", request.getParameter("isFromStockReport"));
            requestParams.put("isInventoryValuation", request.getParameter("isInventoryValuation"));
            requestParams.put("isExportPDF", true);
            requestParams.put("filetype", request.getParameter("filetype"));
            if (!StringUtil.isNullOrEmpty(request.getParameter("isStockLedgerDetailedReport"))) {
                Boolean isStockLedgerDetailedReport = Boolean.parseBoolean(request.getParameter("isStockLedgerDetailedReport"));
                requestParams.put("isStockLedgerDetailedReport", isStockLedgerDetailedReport);
            }
            requestParams.put(Constants.isActivateMRPModule, isActivateMRPModule);
            KwlReturnObject result = accProductObj.getStockLedger(requestParams);
            

            List list = result.getEntityList();
            if (isStockLedger || isInventoryValuation || isFromStockReport) {
//                DataJArr = getNewStockLedgerJson(request, list, companyMaxDateProductPriceList, new JSONArray());
                DataJArr = AccProductService.getInventoryValuationData(requestParams);
            } else {
                DataJArr = getSalesPurchaseJson(request, list, companyMaxDateProductPriceList);
            }
            jobj.put("data", DataJArr);

            String fileType = request.getParameter("filetype");
            if (StringUtil.equal(fileType, "print")) {
                String GenerateDate = authHandler.getDateFormatter(request).format(new Date());
                jobj.put("GenerateDate", GenerateDate);
                view = "jsonView-empty";
            }
            exportDaoObj.processRequest(request, response, jobj);
            jobj.put("success", true);
        } catch (SessionExpiredException ex) {
            Logger.getLogger(accProductControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            Logger.getLogger(accProductControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
        }
        return new ModelAndView(view, "model", jobj.toString());
    }
    
    public ModelAndView exportStockLedgerJapser(HttpServletRequest request, HttpServletResponse response) {
        Map<String, Object> financeDetailsMap = new HashMap<String, Object>();
        String view = "stockLedger";
        FinanceDetails financeDetails = new FinanceDetails();
        ArrayList<FinanceDetails> financeDetailsList = new ArrayList<FinanceDetails>();
        try {
            int templateflag = Integer.parseInt(request.getParameter("templateflag"));
            boolean isLandscape = request.getParameter("isLandscape") != null ? Boolean.parseBoolean(request.getParameter("isLandscape")) : false;
            if (templateflag == Constants.sustenir_templateflag) {
                view = "sustenirStockLedger";
            }
            String companyid = sessionHandlerImpl.getCompanyid(request);
            KwlReturnObject cmpresult = accountingHandlerDAOobj.getObject(Company.class.getName(), companyid);
            Company company = (Company) cmpresult.getEntityList().get(0);
            financeDetails.setName(company.getCompanyName());
            financeDetails.setEmail(company.getEmailID() != null ? company.getEmailID() : "");
            financeDetails.setFax(company.getFaxNumber() != null ? company.getFaxNumber() : "");
            financeDetails.setPhone(company.getPhoneNumber() != null ? company.getPhoneNumber() : "");
            financeDetails.setCurrencyinword(company.getCurrency().getName() != null ? company.getCurrency().getName() : "");
            DateFormat df = authHandler.getUserDateFormatterWithoutTimeZone(request); //ERP-20972   //new SimpleDateFormat("dd/MM/yyyy");
            String endDate = df.format(authHandler.getDateOnlyFormat(request).parse(request.getParameter("enddate")));
            Calendar c = Calendar.getInstance();
            c.setTime(df.parse(endDate)); // number of days to substract
//            c.add(Calendar.DATE, -1);
            endDate = df.format(c.getTime());
            String startDate = df.format(authHandler.getDateOnlyFormat(request).parse(request.getParameter("startdate")));
            String date = "From Date : " + startDate + ",To Date : " + endDate;
            financeDetails.setDateRange(date);

            KwlReturnObject result = accountingHandlerDAOobj.getObject(CompanyAccountPreferences.class.getName(), sessionHandlerImpl.getCompanyid(request));
            CompanyAccountPreferences companyAccountPreferences = (CompanyAccountPreferences) result.getEntityList().get(0);
            String fiscalstart=df.format(companyAccountPreferences.getFinancialYearFrom());
            Calendar c1 = Calendar.getInstance();
            c1.setTime(df.parse(fiscalstart));
            c1.add(Calendar.YEAR, 1); // number of years to add
            String fiscalend = df.format(c.getTime());
            String accPeriod= "Accounting Period : "+fiscalstart+" - "+fiscalend;
            financeDetails.setAccountigperiod(accPeriod);   //to calsulate financial year. mayur b
            
            HashMap<String, Object> companyPriceListParams = new HashMap<String, Object>();
            companyPriceListParams.put("isPurchase", true);
            KwlReturnObject kwlCompanyMaxDateProductPriceList = accProductObj.getAllProductsMaxAppliedDatePriceDetails(companyid, companyPriceListParams);
            Map<String, Object[]> companyMaxDateProductPriceList = AccReportsHandler.getcompanyMaxDateProductPriceListMap(kwlCompanyMaxDateProductPriceList.getEntityList());
            
            /**
             * if MRP is Activated, isActivateMRPModule flag will be true to get all MRP related transaction.
             * otherwise isActivateMRPModule flag will be false which will not return MRP related transaction.
             */       
            boolean isActivateMRPModule = false;
            Map<String, Object> filterMap = new HashMap();
            filterMap.put(Constants.Acc_id, companyid);
            Object extraPrefActivateMRP = kwlCommonTablesDAOObj.getRequestedObjectFields(ExtraCompanyPreferences.class, new String[]{"activateMRPModule"}, filterMap);
            if (extraPrefActivateMRP != null) {
                isActivateMRPModule = (Boolean) extraPrefActivateMRP;
            }
            
            HashMap<String, Object> requestParams = new HashMap<String, Object>();
            requestParams.put(Constants.df, authHandler.getDateOnlyFormat(request));
//            requestParams.put("start", request.getParameter("start"));
//            requestParams.put("limit", request.getParameter("limit"));
            requestParams.put("ss", request.getParameter("ss"));
            requestParams.put(Constants.REQ_startdate, request.getParameter("startdate"));
            requestParams.put(Constants.REQ_enddate, request.getParameter("enddate"));
            requestParams.put("companyid", sessionHandlerImpl.getCompanyid(request));
            requestParams.put("searchJson", request.getParameter("searchJson"));
            requestParams.put("filterConjuctionCriteria", request.getParameter("filterConjuctionCriteria"));
            requestParams.put("isExportPDF", true);
            requestParams.put("gcurrencyid", sessionHandlerImpl.getCurrencyID(request));
            requestParams.put(Constants.isActivateMRPModule, isActivateMRPModule);
            JSONArray DataJArr = AccProductService.getInventoryValuationData(requestParams);
            
          /*
            HashMap<String, Object> jsonRequestParam = new HashMap<String, Object>();
            KwlReturnObject resultSL = accProductObj.getStockLedger(requestParams);
            List list = resultSL.getEntityList();
//            request.setAttribute("isExportPDF", true);
            Map<String, Object> requestMap = request.getParameterMap();
            Set set = requestMap.entrySet();
            for (Object obj : set) {
                Map.Entry<String, Object> entry = (Map.Entry<String, Object>) obj;
                String[] value = (String[]) entry.getValue();
                jsonRequestParam.put(entry.getKey(), value[0]);
            }
            jsonRequestParam.put("isExportPDF", true);
            jsonRequestParam.put(Constants.df, authHandler.getDateOnlyFormat(request));
            jsonRequestParam.put("companyid", sessionHandlerImpl.getCompanyid(request));
            jsonRequestParam.put("gcurrencyid", sessionHandlerImpl.getCurrencyID(request));
            AccProductService.getInventoryValuationData(requestParams);
            JSONArray DataJArr = stockService.getNewStockLedgerJson(jsonRequestParam, list, companyMaxDateProductPriceList,new JSONArray());*/
            financeDetailsMap = accProductModuleService.exportStockLedger(DataJArr, df, companyid);
            financeDetailsList.add(financeDetails);
            financeDetailsMap.put("format", "pdf");
            String fileName = StorageHandler.GetDocStorePath() + companyid + "_template" + FileUploadHandler.getCompanyImageExt();
            financeDetailsMap.put("logo", fileName);
            financeDetailsMap.put("datasource", new JRBeanCollectionDataSource(financeDetailsList));
            
            InputStream inputStream = null;
            InputStream inputStreamSubReport = null;
            if(isLandscape){
                inputStream = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/StockLedgerLandscape.jrxml");
                inputStreamSubReport = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/StockLedgerSubReportLandscape.jrxml");
            }else{
                inputStream = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/StockLedger.jrxml");
                inputStreamSubReport = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/StockLedgerSubReport.jrxml");
            }

            JasperDesign jasperDesign = JRXmlLoader.load(inputStream);
            JasperReport jasperReport = JasperCompileManager.compileReport(jasperDesign);
            JasperDesign jasperDesignSubReport = JRXmlLoader.load(inputStreamSubReport);
            JasperReport jasperReportSubReport = JasperCompileManager.compileReport(jasperDesignSubReport);

            financeDetailsMap.put("StockLedgerSubReport", jasperReportSubReport);
            JRBeanCollectionDataSource beanColDataSource = new JRBeanCollectionDataSource(financeDetailsList);
            JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, financeDetailsMap, beanColDataSource);
            JRPdfExporter exp = new JRPdfExporter();

            exp.setParameter(JRPdfExporterParameter.JASPER_PRINT, jasperPrint);
            exp.setParameter(JRPdfExporterParameter.OUTPUT_STREAM, response.getOutputStream());
            response.setHeader("Content-Disposition", "attachment;filename=" + "StockLedger_v1.pdf");
            exp.exportReport();
            
        } catch (Exception ex) {
            Logger.getLogger(accProductControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
        }
        return new ModelAndView("", financeDetailsMap);
    }

  

    public ModelAndView getStockLedger(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        JSONArray DataJArr = new JSONArray();
        boolean issuccess = false;
        String msg = "";
        try {
            String companyid = sessionHandlerImpl.getCompanyid(request);
            HashMap<String, Object> companyPriceListParams = new HashMap<String, Object>();
            companyPriceListParams.put("isPurchase", true);
            boolean isStockLedger=true;
            boolean isInventoryValuation=true;
            boolean isFromStockReport=true;
            KwlReturnObject kwlCompanyMaxDateProductPriceList = accProductObj.getAllProductsMaxAppliedDatePriceDetails(companyid, companyPriceListParams);
            Map<String, Object[]> companyMaxDateProductPriceList = AccReportsHandler.getcompanyMaxDateProductPriceListMap(kwlCompanyMaxDateProductPriceList.getEntityList());
            isStockLedger=Boolean.parseBoolean(request.getParameter("isStockLedger"));
            isInventoryValuation=Boolean.parseBoolean(request.getParameter("isInventoryValuation"));
            isFromStockReport=Boolean.parseBoolean(request.getParameter("isFromStockReport"));
            HashMap<String, Object> requestParams = new HashMap<String, Object>();
            HashMap<String, Object> jsonRequestParam = new HashMap<String, Object>();
            requestParams.put(Constants.df, authHandler.getDateOnlyFormat(request));
            requestParams.put("start", request.getParameter("start"));
            requestParams.put("limit", request.getParameter("limit"));
            requestParams.put("ss", request.getParameter("ss"));
            requestParams.put("productCategoryid", request.getParameter("productCategoryid")); 
            requestParams.put(Constants.REQ_startdate, request.getParameter("startdate"));
            requestParams.put(Constants.REQ_enddate, request.getParameter("enddate"));
            requestParams.put("companyid", sessionHandlerImpl.getCompanyid(request));
            requestParams.put("searchJson", request.getParameter("searchJson"));
            requestParams.put("docType", request.getParameter("docType"));
            requestParams.put("isStockLedger", request.getParameter("isStockLedger"));
            requestParams.put("productId", request.getParameter("productId"));
            requestParams.put("isInventoryValuation", request.getParameter("isInventoryValuation"));
            requestParams.put("isFromStockReport", request.getParameter("isFromStockReport"));
            requestParams.put("filterConjuctionCriteria", request.getParameter("filterConjuctionCriteria"));
            if (!StringUtil.isNullOrEmpty(request.getParameter("customerId"))) {
                requestParams.put("customerId", request.getParameter("customerId"));
            }
            if (!StringUtil.isNullOrEmpty(request.getParameter("vendorId"))) {
                requestParams.put("vendorId", request.getParameter("vendorId"));
            }
            KwlReturnObject result = accProductObj.getStockLedger(requestParams);
            List list = result.getEntityList();
            
            Map<String, Object> requestMap = request.getParameterMap();
            Set set = requestMap.entrySet();
            for (Object obj : set) {
                Map.Entry<String, Object> entry = (Map.Entry<String, Object>) obj;
                String[] value = (String[]) entry.getValue();
                jsonRequestParam.put(entry.getKey(), value[0]);
            }
            jsonRequestParam.put(Constants.df, authHandler.getDateOnlyFormat(request));
            jsonRequestParam.put("companyid", sessionHandlerImpl.getCompanyid(request));
            jsonRequestParam.put("gcurrencyid", sessionHandlerImpl.getCurrencyID(request));
            if (isStockLedger || isInventoryValuation || isFromStockReport) {
                DataJArr = stockService.getNewStockLedgerJson(jsonRequestParam, list, companyMaxDateProductPriceList,new JSONArray());
            } else {
                DataJArr = getSalesPurchaseJson(request, list, companyMaxDateProductPriceList);
            }
            int count = result.getRecordTotalCount();
            jobj.put("data", DataJArr);
            jobj.put("totalCount", count);
            issuccess = true;
        } catch (SessionExpiredException ex) {
            msg = ex.getMessage();
            Logger.getLogger(accProductController.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ServiceException ex) {
            msg = ex.getMessage();
            Logger.getLogger(accProductController.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            msg = "" + ex.getMessage();
            Logger.getLogger(accProductController.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                jobj.put("success", issuccess);
                jobj.put("msg", msg);
            } catch (JSONException ex) {
                Logger.getLogger(accProductController.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return new ModelAndView("jsonView", "model", jobj.toString());
    }
    
public ModelAndView getRG23PartI(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        JSONArray DataJArr = new JSONArray();
        boolean issuccess = false;
        String msg = "";
        try {
            String companyid = sessionHandlerImpl.getCompanyid(request);
            HashMap<String, Object> companyPriceListParams = new HashMap<String, Object>();
            companyPriceListParams.put("isPurchase", true);
            boolean isStockLedger=true;
            boolean isInventoryValuation=true;
            boolean isFromStockReport=true;
            KwlReturnObject kwlCompanyMaxDateProductPriceList = accProductObj.getAllProductsMaxAppliedDatePriceDetails(companyid, companyPriceListParams);
            Map<String, Object[]> companyMaxDateProductPriceList = AccReportsHandler.getcompanyMaxDateProductPriceListMap(kwlCompanyMaxDateProductPriceList.getEntityList());
            isStockLedger=Boolean.parseBoolean(request.getParameter("isStockLedger"));
            isInventoryValuation=Boolean.parseBoolean(request.getParameter("isInventoryValuation"));
            isFromStockReport=Boolean.parseBoolean(request.getParameter("isFromStockReport"));
            HashMap<String, Object> requestParams = new HashMap<String, Object>();
            requestParams.put(Constants.df, authHandler.getDateOnlyFormat(request));
            requestParams.put("start", request.getParameter("start"));
            requestParams.put("limit", request.getParameter("limit"));
            requestParams.put("ss", request.getParameter("ss"));
            requestParams.put("productCategoryid", request.getParameter("productCategoryid")); 
            requestParams.put(Constants.REQ_startdate, request.getParameter("startdate"));
            requestParams.put(Constants.REQ_enddate, request.getParameter("enddate"));
            requestParams.put("companyid", sessionHandlerImpl.getCompanyid(request));
            requestParams.put("searchJson", request.getParameter("searchJson"));
            requestParams.put("docType", request.getParameter("docType"));
            requestParams.put("isStockLedger", request.getParameter("isStockLedger"));
            requestParams.put("productId", request.getParameter("productId"));
            requestParams.put("isInventoryValuation", request.getParameter("isInventoryValuation"));
            requestParams.put("isFromStockReport", request.getParameter("isFromStockReport"));
            requestParams.put("filterConjuctionCriteria", request.getParameter("filterConjuctionCriteria"));
            if (!StringUtil.isNullOrEmpty(request.getParameter("customerId"))) {
                requestParams.put("customerId", request.getParameter("customerId"));
            }
            if (!StringUtil.isNullOrEmpty(request.getParameter("rg23part1"))) {
                requestParams.put("isRG23part1", Boolean.parseBoolean(request.getParameter("rg23part1")));
            }
            if (!StringUtil.isNullOrEmpty(request.getParameter("exciseUnit"))) {
                requestParams.put("exciseUnit", request.getParameter("exciseUnit"));
            }
            if (!StringUtil.isNullOrEmpty(request.getParameter("vendorId"))) {
                requestParams.put("vendorId", request.getParameter("vendorId"));
            }
            KwlReturnObject result = accProductObj.getRG23PartIData(requestParams);
            List list = result.getEntityList();
            if (isStockLedger || isInventoryValuation || isFromStockReport) {
                DataJArr = getRG23PartIJson(request, list, companyMaxDateProductPriceList,new JSONArray());
            }
            int count = result.getRecordTotalCount();
            jobj.put("data", DataJArr);
            jobj.put("totalCount", count);
            issuccess = true;
        } catch (SessionExpiredException ex) {
            msg = ex.getMessage();
            Logger.getLogger(accProductController.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ServiceException ex) {
            msg = ex.getMessage();
            Logger.getLogger(accProductController.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            msg = "" + ex.getMessage();
            Logger.getLogger(accProductController.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                jobj.put("success", issuccess);
                jobj.put("msg", msg);
            } catch (JSONException ex) {
                Logger.getLogger(accProductController.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return new ModelAndView("jsonView", "model", jobj.toString());
    }

public ModelAndView exportRG23part1(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        JSONArray DataJArr = new JSONArray();
        String view = "jsonView_ex";
        try {
            String companyid = sessionHandlerImpl.getCompanyid(request);
            HashMap<String, Object> companyPriceListParams = new HashMap<String, Object>();
            companyPriceListParams.put("isPurchase", true);
            boolean isStockLedger=true;
            boolean isInventoryValuation=true;
            boolean isFromStockReport=true;
            KwlReturnObject kwlCompanyMaxDateProductPriceList = accProductObj.getAllProductsMaxAppliedDatePriceDetails(companyid, companyPriceListParams);
            Map<String, Object[]> companyMaxDateProductPriceList = AccReportsHandler.getcompanyMaxDateProductPriceListMap(kwlCompanyMaxDateProductPriceList.getEntityList());
            isStockLedger=Boolean.parseBoolean(request.getParameter("isStockLedger"));
            isInventoryValuation=Boolean.parseBoolean(request.getParameter("isInventoryValuation"));
            isFromStockReport=Boolean.parseBoolean(request.getParameter("isFromStockReport"));
            HashMap<String, Object> requestParams = new HashMap<String, Object>();
            requestParams.put(Constants.df, authHandler.getDateOnlyFormat(request));
            requestParams.put("ss", request.getParameter("ss"));
            requestParams.put("productCategoryid", request.getParameter("productCategoryid")); 
            requestParams.put(Constants.REQ_startdate, request.getParameter("startdate"));
            requestParams.put(Constants.REQ_enddate, request.getParameter("enddate"));
            requestParams.put("companyid", sessionHandlerImpl.getCompanyid(request));
            requestParams.put("searchJson", request.getParameter("searchJson"));
            requestParams.put("docType", request.getParameter("docType"));
            requestParams.put("isStockLedger", request.getParameter("isStockLedger"));
            requestParams.put("productId", request.getParameter("productId"));
            requestParams.put("isInventoryValuation", request.getParameter("isInventoryValuation"));
            requestParams.put("isFromStockReport", request.getParameter("isFromStockReport"));
            requestParams.put("filterConjuctionCriteria", request.getParameter("filterConjuctionCriteria"));
            if (!StringUtil.isNullOrEmpty(request.getParameter("customerId"))) {
                requestParams.put("customerId", request.getParameter("customerId"));
            }
            if (!StringUtil.isNullOrEmpty(request.getParameter("rg23part1"))) {
                requestParams.put("isRG23part1", Boolean.parseBoolean(request.getParameter("rg23part1")));
            }
            if (!StringUtil.isNullOrEmpty(request.getParameter("exciseUnit"))) {
                requestParams.put("exciseUnit", request.getParameter("exciseUnit"));
            }
            if (!StringUtil.isNullOrEmpty(request.getParameter("vendorId"))) {
                requestParams.put("vendorId", request.getParameter("vendorId"));
            }
            KwlReturnObject result = accProductObj.getRG23PartIData(requestParams);
            List list = result.getEntityList();
            if (isStockLedger || isInventoryValuation || isFromStockReport) {
                DataJArr = getRG23PartIJson(request, list, companyMaxDateProductPriceList, new JSONArray());
            } 
            jobj.put("data", DataJArr);

            String fileType = request.getParameter("filetype");
            if (StringUtil.equal(fileType, "print")) {
                String GenerateDate = authHandler.getDateFormatter(request).format(new Date());
                jobj.put("GenerateDate", GenerateDate);
                view = "jsonView-empty";
            }
            exportDaoObj.processRequest(request, response, jobj);
            jobj.put("success", true);
        } catch (SessionExpiredException ex) {
            Logger.getLogger(accProductControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            Logger.getLogger(accProductControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
        }
        return new ModelAndView(view, "model", jobj.toString());
    }
    
    public JSONArray getStockLedgerJson(HttpServletRequest request, List list) throws JSONException, ServiceException {
        Iterator itr = list.iterator();
        JSONArray jArr = new JSONArray();
        String pid = "";
        double balance = 0.0;

        while (itr.hasNext()) {
            try {
                String companyid = sessionHandlerImpl.getCompanyid(request);
                DateFormat df = authHandler.getDateOnlyFormat(request);
                KwlReturnObject crresult;
                HashMap<String, Object> requestParams = AccountingManager.getGlobalParams(request);
                String gcurrencyid = sessionHandlerImpl.getCurrencyID(request);
                requestParams.put("companyid", companyid);
                requestParams.put("gcurrencyid", gcurrencyid);

                Object[] row = (Object[]) itr.next();

                if (!pid.equals((String) row[2])) {
                    balance = 0.0;
                }

                BigInteger transType = (BigInteger) row[0];
                String productid = (String) row[1];
                pid = (String) row[2];
                String productDesc = (String) row[3];
                Date transactionDate = (Date) row[4];
                String transactionNumber = (String) row[5];
                String personCode = (String) row[6];
                String personName = (String) row[7];
                String personid = (String) row[8];
                double quantity = (Double) row[9];
                double stockRate = (Double) row[10];
                double baseUOMRate = (Double) row[11]; // Conversion Factor
                String ConsignmentInvoiceID = (String) row[12];
                String currencyid = (String) row[13];
                String invoiceID = (String) row[14];

                double baseUOMQuantity = authHandler.calculateBaseUOMQuatity(quantity,baseUOMRate, companyid);
                double amount = 0.0;

                if (transType.intValue() == 6) {
                    // Product Purchase Price for Opening
                    KwlReturnObject openingPurchasepriceResult = accProductObj.getProductPrice(productid, true, null, "", "");

                    Object openingPurchaseprice;
                    if (openingPurchasepriceResult != null && !openingPurchasepriceResult.getEntityList().isEmpty()) {
                        openingPurchaseprice = openingPurchasepriceResult.getEntityList().get(0);
                    } else {
                        openingPurchaseprice = null;
                    }

                    if (openingPurchaseprice != null) {
                        stockRate = (Double) openingPurchaseprice;
                    } else {
                        stockRate = 0.0;
                    }
                    amount = stockRate * baseUOMQuantity;
//                } else if (transType.intValue() == 1) {
//                    // For Vendor Invoice
//                    if (!StringUtil.isNullOrEmpty(ConsignmentInvoiceID)) {
//                        // If having Consignment Cost
//                        double vendorInvoiceTotalAmountInBase = 0;
//                        double consignmentInvoiceTotalAmountInBase = 0;
//
//                        // For finding Total Cost of Vendor Invoice
//                        List invioceTotalAmountDetail = accProductObj.getVendorInvoiceTotalAmountDetail("", transactionNumber, personName, companyid);
//                        Iterator it = invioceTotalAmountDetail.iterator();
//                        while (it.hasNext()) {
//                            Object[] itrow = (Object[]) it.next();
//                            double vendorInvoiceTotalAmount = (Double) itrow[0];
//                            String fromcurrencyid = (String) itrow[1];
//                            Date entryDate = (Date) itrow[2];
//                            double externalcurrencyrate = (Double) itrow[3];
//
//                            crresult = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, vendorInvoiceTotalAmount, fromcurrencyid, entryDate, externalcurrencyrate);
//                            vendorInvoiceTotalAmountInBase = (Double) crresult.getEntityList().get(0);
//                        }
//
//                        // For finding Total Cost of Consignment Invoice
//                        List consignmentInvoiceTotalAmountDetail = accProductObj.getVendorInvoiceTotalAmountDetail(ConsignmentInvoiceID, "", personName, companyid);
//                        it = consignmentInvoiceTotalAmountDetail.iterator();
//                        while (it.hasNext()) {
//                            Object[] itrow = (Object[]) it.next();
//                            double consignmentInvoiceTotalAmount = (Double) itrow[0];
//                            String fromcurrencyid = (String) itrow[1];
//                            Date entryDate = (Date) itrow[2];
//                            double externalcurrencyrate = (Double) itrow[3];
//
//                            crresult = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, consignmentInvoiceTotalAmount, fromcurrencyid, entryDate, externalcurrencyrate);
//                            consignmentInvoiceTotalAmountInBase = (Double) crresult.getEntityList().get(0);
//                        }
//
//                        amount = stockRate * baseUOMQuantity;
//                        // Landed Cost Formula
//                        stockRate = amount + ((amount / vendorInvoiceTotalAmountInBase) * consignmentInvoiceTotalAmountInBase);
//
//                        amount = stockRate * baseUOMQuantity;
//                    } else {
//                        // For finding Stock Rate of Vendor Invoice in base Currency
//                        List invioceTotalAmountDetail = accProductObj.getVendorInvoiceTotalAmountDetail("", transactionNumber, personName, companyid);
//                        Iterator it = invioceTotalAmountDetail.iterator();
//                        while (it.hasNext()) {
//                            Object[] itrow = (Object[]) it.next();
//                            String fromcurrencyid = (String) itrow[1];
//                            Date entryDate = (Date) itrow[2];
//                            double externalcurrencyrate = (Double) itrow[3];
//
//                            crresult = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, stockRate, fromcurrencyid, entryDate, externalcurrencyrate);
//                            stockRate = (Double) crresult.getEntityList().get(0);
//                        }
//
//                        amount = stockRate * baseUOMQuantity;
//                    }
//                } else if (transType.intValue() == 5) {
//                    // For Customer Invoice
//                    // For finding Stock Rate of Customer Invoice in base Currency
//                    List invioceTotalAmountDetail = accProductObj.getVendorInvoiceTotalAmountDetail("", transactionNumber, personName, companyid);
//                    Iterator it = invioceTotalAmountDetail.iterator();
//                    while (it.hasNext()) {
//                        Object[] itrow = (Object[]) it.next();
//                        String fromcurrencyid = (String) itrow[1];
//                        Date entryDate = (Date) itrow[2];
//                        double externalcurrencyrate = (Double) itrow[3];
//
//                        crresult = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, stockRate, fromcurrencyid, entryDate, externalcurrencyrate);
//                        stockRate = (Double) crresult.getEntityList().get(0);
//                    }
//                    amount = stockRate * baseUOMQuantity;
                } else {
//                    KwlReturnObject rateResult;
//                    if (transType.intValue() == 0 || transType.intValue() == 2) {
//                        // Product Purchase Price for 'personid'
//                        rateResult = accProductObj.getProductPrice(productid, true, transactionDate, personid);
//                    } else {
//                        // Product Sales Price for 'personid'
//                        rateResult = accProductObj.getProductPrice(productid, false, transactionDate, personid);
//                    }
//
//                    Object temp;
//                    if (rateResult != null && !rateResult.getEntityList().isEmpty()) {
//                        temp = rateResult.getEntityList().get(0);
//                    } else {
//                        temp = null;
//                    }
//                    if (temp != null) {
//                        stockRate = (Double) temp;
//                    } else {
//                        stockRate = 0.0;
//                    }
//
//                    amount = stockRate * baseUOMQuantity;
                    String consignmentInvoice = accProductObj.consignmentInvoice(invoiceID, companyid);
                    if(!StringUtil.isNullOrEmpty(consignmentInvoice)) {
                            // If having Consignment Cost
                            double vendorInvoiceTotalAmountInBase = 0;
                            double consignmentInvoiceTotalAmountInBase = 0;

                            // For finding Total Cost of Vendor Invoice
                            List invioceTotalAmountDetail = accProductObj.getVendorInvoiceTotalAmountDetail(consignmentInvoice, personName, companyid);
                            Iterator it = invioceTotalAmountDetail.iterator();
                            while (it.hasNext()) {
                                Object[] itrow = (Object[]) it.next();
                                double vendorInvoiceTotalAmount = (Double) itrow[0];
                                String fromcurrencyid = (String) itrow[1];
                                Date entryDate = (Date) itrow[2];
                                double externalcurrencyrate = (Double) itrow[3];
                                Date creationDate = (Date) itrow[4];

//                                crresult = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, vendorInvoiceTotalAmount, fromcurrencyid, entryDate, externalcurrencyrate);
                                crresult = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, vendorInvoiceTotalAmount, fromcurrencyid, creationDate, externalcurrencyrate);
                                vendorInvoiceTotalAmountInBase = (Double) crresult.getEntityList().get(0);
                            }

                            // For finding Total Cost of Consignment Invoice
                            List consignmentInvoiceTotalAmountDetail = accProductObj.getVendorInvoiceTotalAmountDetail(invoiceID, personName, companyid);
                            it = consignmentInvoiceTotalAmountDetail.iterator();
                            while (it.hasNext()) {
                                Object[] itrow = (Object[]) it.next();
                                double consignmentInvoiceTotalAmount = (Double) itrow[0];
                                String fromcurrencyid = (String) itrow[1];
                                Date entryDate = (Date) itrow[2];
                                double externalcurrencyrate = (Double) itrow[3];

                                crresult = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, consignmentInvoiceTotalAmount, fromcurrencyid, entryDate, externalcurrencyrate);
                                consignmentInvoiceTotalAmountInBase = (Double) crresult.getEntityList().get(0);
                            }

                            crresult = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, stockRate, currencyid, transactionDate, 0);
                            stockRate = (Double) crresult.getEntityList().get(0);

                            amount = stockRate * baseUOMQuantity;
                            // Landed Cost Formula
                            stockRate = amount + ((amount / vendorInvoiceTotalAmountInBase) * consignmentInvoiceTotalAmountInBase);

                            amount = stockRate * baseUOMQuantity;
                        } else {
                            crresult = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, stockRate, currencyid, transactionDate, 0);
                            stockRate = (Double) crresult.getEntityList().get(0);
                            amount = stockRate * baseUOMQuantity;
                        }
                    }

                // For Calculating balance
                if (transType.intValue() == 0 || transType.intValue() == 4 || transType.intValue() == 6) {
                    // balance for GR/SR Module OR Opening
                    balance += amount;
                } else {
                    // balance for DO/PR Module
                    balance -= amount;
                }

                JSONObject obj = new JSONObject();
                obj.put("pid", pid);
                obj.put("productDesc", productDesc);
                if (transType.intValue() != 6) {
                    obj.put("transactionDate", df.format(transactionDate));
                }
                obj.put("transactionNumber", transactionNumber);
                obj.put("personCode", personCode);
                obj.put("personName", personName);
                if (transType.intValue() == 0 || transType.intValue() == 4 || transType.intValue() == 6) {
                    // For GR/SR Module OR Opening
                    obj.put("received", baseUOMQuantity);
                } else {
                    // For DO/PR Module
                    obj.put("delivered", baseUOMQuantity);
                }
                obj.put("stockRate", authHandler.roundUnitPrice(stockRate, companyid));
                obj.put("value", authHandler.round(amount, companyid));
                obj.put("balance", authHandler.round(balance, companyid));
                jArr.put(obj);
            } catch (SessionExpiredException ex) {
                Logger.getLogger(accProductController.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return jArr;
    }
    
    public JSONObject getValuationJson(HttpServletRequest request,HashMap<String, Object> requestParams, String productidLast,Date StartDate,Date EndDate, 
            Map<String, Object[]> companyMaxDateProductPriceList) throws JSONException, ServiceException, ParseException, SessionExpiredException {
        //For Calcuating Quantity & Valuation for each product 
        double avgcost = 0, onhand = 0.0, lifo = 0, fifo = 0, valuation = 0;
        JSONObject stockArr = new JSONObject();
        Calendar startcal = Calendar.getInstance();
        if(StartDate!=null)
        startcal.setTime(StartDate);
        Calendar endcal = Calendar.getInstance();
        if(EndDate!=null)
        endcal.setTime(EndDate);
        
        requestParams.put("productid", productidLast);
        requestParams.put("isprovalReport", false);
        boolean isOpening=false;
        boolean isStockLedgerReport=false;
        String productCategoryid = "";
        if (request.getParameter(Constants.productCategoryid) != null) {
            productCategoryid = (String) request.getParameter(Constants.productCategoryid);
        }
        if(requestParams.containsKey("isOpening")){
            request.setAttribute("isOpening", requestParams.get("isOpening"));
        }
        if(requestParams.containsKey("isStockLedgerReport")){
            request.setAttribute("isStockLedgerReport", requestParams.get("isStockLedgerReport"));
        }
        requestParams.put("stDate", StartDate);
        requestParams.put("endDate", EndDate);
        requestParams.put("companyid", sessionHandlerImpl.getCompanyid(request));
        requestParams.put("productCategoryid", productCategoryid);
        KwlReturnObject rtObject = accProductObj.getProValuation(requestParams);
        List list2 = rtObject.getEntityList();
        Iterator itr2 = list2.iterator();
        if (itr2.hasNext()) {
            Object[] row2 = (Object[]) itr2.next();
            onhand = Double.parseDouble(row2[2] == null ? "0" : row2[2].toString());
            Product product = (Product) row2[0];
            String productTypeID = product.getProducttype().getID();
            ValuationMethod productValuationMethod = product.getValuationMethod();
            if (product.isIsSerialForProduct()) {
                valuation = accReportsService.getSerialNoValuation(request, onhand, productTypeID, avgcost, product, startcal, endcal);
                valuation+=accReportsService.getSerialNoInventoryValuation(request, onhand, productTypeID, avgcost, product, startcal, endcal);
            } else if (productValuationMethod != null) { //Need to calculate only in case of provaluation report
                if (productValuationMethod == ValuationMethod.STANDARD) {
                    lifo = accReportsService.getFIFO(request, product.getID(), EndDate, onhand, true, productTypeID);
                }
                if (productValuationMethod == ValuationMethod.FIFO) {
                    fifo = accReportsService.getFIFO(request, product.getID(), EndDate, onhand, false, productTypeID);
                }
                if (productValuationMethod == ValuationMethod.AVERAGE) {
                    avgcost = accReportsService.getAvarageValuation(request, onhand, productTypeID, avgcost, product, startcal, endcal);
                    valuation = avgcost * onhand;
                }
            }
        }
        valuation = valuation + lifo + fifo;
                stockArr.put("onhand",onhand);
                stockArr.put("valuation",valuation);
                return stockArr ;
    }
//    public JSONArray getNewStockLedgerJson(HttpServletRequest request, List list, Map<String, Object[]> companyMaxDateProductPriceList, JSONArray valuationArray) throws JSONException, ServiceException, ParseException, SessionExpiredException {
//        Iterator itr = list.iterator();
//        JSONArray jArr = new JSONArray();
//        String pid = "";
//        String productidLast = "";
//        String productDescLast = "";
//        double balance = 0.0, onhand = 0.0, lifo = 0, valuation = 0,totalevaluationcost = 0, totalStockOutQty = 0, totalStockInQty = 0, totalOpeningQty = 0, totalLedgerOnHandQuantity = 0;
//        int inIncludeOpening = 0;
//        int recCount = 0, lsize = 0;
//        List<TransactionBatch> pvbList = new ArrayList();
//        Date StartDate = null, EndDate = null;
//        if (request.getAttribute("jasperreport") != null && request.getAttribute("jasperreport").equals("JasperReport")) {//MonthlyTradingAndProfitLoss
//            StartDate = (Date) request.getAttribute("jaspersdate");
//            EndDate = (Date) request.getAttribute("jasperenddate");
//        } else if (request.getAttribute("PandLClosingStockOnCompare") != null && Boolean.parseBoolean(request.getAttribute("PandLClosingStockOnCompare").toString())) {// Custom Layout Profit&Loss Closing Stock Valuation for compare predate
//            StartDate = authHandler.getDateOnlyFormat(request).parse(request.getParameter("stpredate"));
//            EndDate = authHandler.getDateOnlyFormat(request).parse(request.getParameter("endpredate"));
//        } else {
//
//            KwlReturnObject result = accountingHandlerDAOobj.getObject(CompanyAccountPreferences.class.getName(), sessionHandlerImpl.getCompanyid(request));
//            CompanyAccountPreferences companyAccountPreferences = (CompanyAccountPreferences) result.getEntityList().get(0);
// 
//            StartDate = null;
//            if (request.getParameter("startdate") == null) {
//                if (request.getParameter("stdate") == null) {
//                    StartDate = companyAccountPreferences.getBookBeginningFrom();
//                } else {
//                    StartDate = authHandler.getDateOnlyFormat(request).parse(request.getParameter("stdate"));
//                }
//            } else {
//                StartDate = authHandler.getDateOnlyFormat(request).parse(request.getParameter("startdate"));
//            }
//
//            EndDate = null;
//            if (request.getParameter("enddate") == null) {
//                EndDate = new Date();
//            } else {
//                EndDate = authHandler.getDateOnlyFormat(request).parse(request.getParameter("enddate"));
//            }
//
//        }
//        boolean isActivateLandedInvAmt = Boolean.parseBoolean(request.getParameter("isactivatelandedinvamt"));
//        boolean isExport = request.getAttribute("isExportPDF") == null ? false : Boolean.parseBoolean(request.getAttribute("isExportPDF").toString());
//        boolean isRG23part1 =!StringUtil.isNullOrEmpty(request.getParameter("rg23part1"))?Boolean.parseBoolean(request.getParameter("rg23part1")):false ;
//        boolean isInventoryValuation = true;                //Inventory Valuation Report in  Product Master
//        boolean isFromStockReport = true;                   //Stock Report in Inventory Tab
//        isInventoryValuation = Boolean.parseBoolean(request.getParameter("isInventoryValuation"));
//        isFromStockReport = Boolean.parseBoolean(request.getParameter("isFromStockReport"));
//        boolean exportInventoryValuation = request.getParameter("exportInventoryValuation") == null ? false : Boolean.parseBoolean(request.getParameter("exportInventoryValuation"));
//        boolean isStockLedgerReport = true;
//        double openingAmount = 0.0;
//        double periodAmount = 0.0;
//        double periodAssemblyValuation = 0.0;
//        double OpeningAssemblyValuation = 0.0;
//        double ledgerFinalValuation = 0;
//        double ledgerOnHandQuantity = 0;
//        double periodQty = 0;
//        double openingQty = 0;
//        double closingstack = 0;
//        double ledgeropeningAmt = 0;
//        double ledgerPeriodAmt = 0;
//        double productopeningQty = 0;
//        double productPeriodQty = 0;
//        double productOpeningPrice = 0;
//        double productPeriodPrice = 0;
//        double stockInQty = 0;                    //Quantity In Selected date period
//        double stockOutQty = 0;                   //Quantity Out Selected date period
//        JSONObject FinalValuationObject = new JSONObject();
//        double stockRate = 0;
//        int openingRecordIndex = 0;
//        int gridCounter = 0;
//        Date transactionDate = null;
//
//        while (itr.hasNext()) {
//            try {
//                String companyid = sessionHandlerImpl.getCompanyid(request);
//                DateFormat df = authHandler.getDateOnlyFormat(request);
//                DateFormat userdf = authHandler.getUserDateFormatter(request);
//                KwlReturnObject crresult;
//                HashMap<String, Object> requestParams = AccountingManager.getGlobalParams(request);
//                String gcurrencyid = sessionHandlerImpl.getCurrencyID(request);
//                requestParams.put("companyid", companyid);
//                requestParams.put("gcurrencyid", gcurrencyid);
//                requestParams.put("isStockLedgerReport", isStockLedgerReport);
//
//                Object[] row = (Object[]) itr.next();
//                String productid = (String) row[1];
//                
//
//                if (recCount > 0 && !pid.equals((String) row[2])) {
//                    KwlReturnObject lastproductresult = accountingHandlerDAOobj.getObject(Product.class.getName(), productidLast);
//                    Product lastproduct = (Product) lastproductresult.getEntityList().get(0);
//                    ValuationMethod valuationMethod = lastproduct.getValuationMethod();
//                    requestParams.put("productid", productidLast);
//                    requestParams.put("isprovalReport", false);
//                    String productCategoryid = "";
//                    if (request.getParameter(Constants.productCategoryid) != null) {
//                        productCategoryid = (String) request.getParameter(Constants.productCategoryid);
//                    }
//                    requestParams.put("endDate", EndDate);
//                    requestParams.put("companyid", sessionHandlerImpl.getCompanyid(request));
//                    requestParams.put("productCategoryid", productCategoryid);
//                    //For Calcuating Quantity & Valuation for each product 
//                    if (valuationMethod == ValuationMethod.FIFO || valuationMethod == ValuationMethod.STANDARD || lastproduct.isIsSerialForProduct() || lastproduct.isIsBatchForProduct()) {
//                        for (TransactionBatch pvb : pvbList) {
//                            double qty = pvb.getQuantity();
//                            if (qty > 0) {
//                                if (pvb.isOpening()) {
//                                    if (pvb.isOutEntry()) {
////                                        openingAmount -= pvb.getPrice() * qty;
//                                        ledgeropeningAmt -= pvb.getPrice() * qty;
//                                        ledgerOnHandQuantity -= qty;
//                                        ledgerFinalValuation -= pvb.getPrice() * qty;
//                                        openingQty -= qty;
//                                        if (lastproduct.getProducttype().getID().equals(Producttype.ASSEMBLY)) {
//                                            OpeningAssemblyValuation -= pvb.getPrice() * qty;
//                                        }
//                                    } else {
////                                        openingAmount += pvb.getPrice() * qty;
//                                        ledgeropeningAmt += pvb.getPrice() * qty;
//                                        ledgerOnHandQuantity += qty;
//                                        ledgerFinalValuation += pvb.getPrice() * qty;
//                                        openingQty += qty;
//                                        if (lastproduct.getProducttype().getID().equals(Producttype.ASSEMBLY)) {
//                                            OpeningAssemblyValuation += pvb.getPrice() * qty;
//                                        }
//                                    }
//                                } else {
//                                    if (pvb.isOutEntry()) {
////                                        periodAmount -= pvb.getPrice() * qty;
//                                        ledgerPeriodAmt -= pvb.getPrice() * qty;
//                                        ledgerOnHandQuantity -= qty;
//                                        ledgerFinalValuation -= pvb.getPrice() * qty;
//                                        periodQty -= qty;
//                                        stockOutQty -= qty;
//                                        if (lastproduct.getProducttype().getID().equals(Producttype.ASSEMBLY)) {
//                                            OpeningAssemblyValuation -= pvb.getPrice() * qty;
//                                        }
//                                    } else {
////                                        periodAmount += pvb.getPrice() * qty;
//                                        ledgerPeriodAmt += pvb.getPrice() * qty;
//                                        ledgerOnHandQuantity += qty;
//                                        ledgerFinalValuation += pvb.getPrice() * qty;
//                                        periodQty += qty;
//                                        stockInQty += qty;
//                                        if (lastproduct.getProducttype().getID().equals(Producttype.ASSEMBLY)) {
//                                            OpeningAssemblyValuation += pvb.getPrice() * qty;
//                                        }
//                                    }
//                                }
//                            }
//                        }
//                        openingAmount += Double.parseDouble(authHandler.formattedAmount(ledgeropeningAmt));
//                        periodAmount += Double.parseDouble(authHandler.formattedQuantity(ledgerPeriodAmt));
//                    } else {
//                        for (TransactionBatch pvb : pvbList) {
//                            double qty = pvb.getQuantity();
//                            if (qty > 0) {
//                                if (pvb.isOpening()) {
//                                    if (pvb.isOutEntry()) {
//                                        openingQty -= qty;
//                                        ledgerOnHandQuantity -= qty;
//                                        productopeningQty -= qty;
//                                        productOpeningPrice -= pvb.getPrice() * qty;
//                                    } else {
//                                        openingQty += qty;
//                                        productopeningQty += qty;
//                                        ledgerOnHandQuantity += qty;
//                                        productOpeningPrice += pvb.getPrice() * qty;
//                                    }
//                                } else {
//                                    if (pvb.isOutEntry()) {
//                                        periodQty -= qty;
//                                        productPeriodQty -= qty;
//                                        ledgerOnHandQuantity -= qty;
//                                        stockOutQty -= qty;
//                                        productPeriodPrice -= pvb.getPrice() * qty;
//                                    } else {
//                                        periodQty += qty;
//                                        productPeriodQty += qty;
//                                        ledgerOnHandQuantity += qty;
//                                        stockInQty += qty;
//                                        productPeriodPrice += pvb.getPrice() * qty;
//                                    }
//                                }
//                            }
//                        }
////                        productavarageQty=productPeriodQty+productopeningQty;
////                        productavarageprice=productOpeningPrice+productPeriodPrice;
////                        avgcost=productavarageprice/productavarageQty;
//                        periodAmount += periodQty * stockRate;
//                        openingAmount += openingQty * stockRate;
//                        ledgerFinalValuation = (periodQty * stockRate) + (openingQty * stockRate);
//                        ledgeropeningAmt = openingQty * stockRate;
//                    }
//
//                    // For adding Quantity & Valuation rows to each product.
//                    JSONObject FinalRowObj = new JSONObject();
//                    if (!isInventoryValuation && !isFromStockReport) {
//                        // For adding Quantity & Valuation rows to each product in Stock Ledger.
//                        FinalRowObj.put("pid", pid);
//                        FinalRowObj.put("productDesc", "");
//                        FinalRowObj.put("transactionNumber", "");
//                        FinalRowObj.put("personCode", "");
//                        FinalRowObj.put("personName", "");
//                        FinalRowObj.put("received", "");
//                        FinalRowObj.put("stockRate", "Quantity on Hand: " + authHandler.formattedQuantity(ledgerOnHandQuantity));
//                        FinalRowObj.put("value", "Valuation: " + authHandler.formattedAmount(ledgerFinalValuation));
//                        FinalRowObj.put("ledgerFinalValuation",  authHandler.formattedAmount(ledgerFinalValuation));
//                        FinalRowObj.put("balance", "-");
//                        if (isExport) {
//                            FinalRowObj.put("productid", productidLast);//
//                            FinalRowObj.put("QtyOnHandJasper", authHandler.formattedQuantity(ledgerOnHandQuantity));
//                            FinalRowObj.put("ValuationJasper", authHandler.formattedAmount(ledgerFinalValuation));
//                            FinalRowObj.put("stockRate", 0);//
//                            FinalRowObj.put("value", 0);//
//                            FinalRowObj.put("isQtyAndValuationJSON", 1);//
//                            if (valuationMethod == ValuationMethod.FIFO) {
//                                FinalRowObj.put("ValuationMethod", "FIFO");
//                            } else if (valuationMethod == ValuationMethod.STANDARD) {
//                                FinalRowObj.put("ValuationMethod", "LIFO");
//                            } else {
//                                FinalRowObj.put("ValuationMethod", "Average");
//                        }
//                        }
//                        jArr.put(gridCounter + 1, FinalRowObj);
//                        gridCounter++;
//                        gridCounter++;
//
//
//                        JSONObject OpeningRowObj = new JSONObject();// For adding  Quantity & Valuation row to Last Product
//                        OpeningRowObj.put("pid", pid);
//                        OpeningRowObj.put("productDesc", "");
//                        OpeningRowObj.put("transactionNumber", "Opening");
//                        OpeningRowObj.put("personCode", "");
//                        OpeningRowObj.put("personName", "");
//                        OpeningRowObj.put("received", openingQty);
//                        OpeningRowObj.put("stockRate", "-");
//                        OpeningRowObj.put("value", authHandler.formattedAmount(ledgeropeningAmt));
//                        OpeningRowObj.put("balance", "-");
//                        if (isExport) {
//                            OpeningRowObj.put("productDesc", productDescLast);
//                            OpeningRowObj.put("productid", productidLast);//
//                            OpeningRowObj.put("isQtyAndValuationJSON", 0);//
//                            if (valuationMethod == ValuationMethod.FIFO) {
//                                OpeningRowObj.put("ValuationMethod", "FIFO");
//                            } else if (valuationMethod == ValuationMethod.STANDARD) {
//                                OpeningRowObj.put("ValuationMethod", "LIFO");
//                            } else {
//                                OpeningRowObj.put("ValuationMethod", "Average");
//                        }
//                        }
//                        jArr.put(openingRecordIndex, OpeningRowObj);
//                    } else {
//                        FinalRowObj.put("productid", lastproduct.getID());
//                        FinalRowObj.put("pid", lastproduct.getProductid());
//                        FinalRowObj.put("productname", lastproduct.getName());
//                        FinalRowObj.put("productdesc", lastproduct.getDescription());
//                        FinalRowObj.put("productType", lastproduct.getProducttype().getName());
//                        FinalRowObj.put("productTypeID", lastproduct.getProducttype().getID());
//                        if (valuationMethod == ValuationMethod.FIFO) {
//                            FinalRowObj.put("fifo", ledgerFinalValuation);
//                        } else {
//                            FinalRowObj.put("fifo", "NA");
//                        }
//                        if (valuationMethod == ValuationMethod.STANDARD) {
//                            FinalRowObj.put("lifo", ledgerFinalValuation);
//                        } else {
//                            FinalRowObj.put("lifo", "NA");
//                        }
//
//                        KwlReturnObject priceResult = accProductObj.getProductPrice(lastproduct.getID(), true, null, "-1", lastproduct.getCurrency().getCurrencyID());
//                        List<Object> priceList = priceResult.getEntityList();
//                        double proPrice = 0;
//                        if (priceList != null) {
//                            for (Object cogsval : priceList) {
//                                proPrice = (cogsval == null ? 0.0 : (Double) cogsval);
//                            }
//                            crresult = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, proPrice,  lastproduct.getCurrency().getCurrencyID(), null, 0);
//                            proPrice = (Double) crresult.getEntityList().get(0);
//                            
//                        }
//                        FinalRowObj.put("purchasecost", proPrice);
//                        FinalRowObj.put("quantity", ledgerOnHandQuantity);
//                        FinalRowObj.put("openingstockQty", openingQty);
//                        FinalRowObj.put("stockInQty", stockInQty);
//                        FinalRowObj.put("stockOutQty", stockOutQty);
//                        FinalRowObj.put("evaluationcost", ledgerFinalValuation);
//                        totalLedgerOnHandQuantity += ledgerOnHandQuantity;
//                        totalOpeningQty += openingQty;
//                        totalStockInQty += stockInQty;
//                        totalStockOutQty += stockOutQty;
//                        totalevaluationcost += ledgerFinalValuation;
//                        if (valuationMethod == ValuationMethod.AVERAGE && !lastproduct.isIsSerialForProduct() && !lastproduct.isIsBatchForProduct()) {
//                            FinalRowObj.put("avgcost", (stockRate != 0 && ledgerOnHandQuantity != 0) ? stockRate : "N.A");
//                            FinalRowObj.put("valuation", ledgerFinalValuation);
//                        } else if (valuationMethod == ValuationMethod.AVERAGE && (lastproduct.isIsSerialForProduct() || lastproduct.isIsBatchForProduct())) {//By Dipak P.
//                            FinalRowObj.put("valuation", ledgerFinalValuation);
//                        } else {
//                            FinalRowObj.put("valuation", "NA");
//                        }
//                        jArr.put(FinalRowObj);
//                    }
//
//                    if (!pid.equals((String) row[2])) {                     //Re-Initializing the Variables for Product Level Data in Stockledger/StockReport/Inventory Valuation Report
//                        balance = 0.0;
//                        inIncludeOpening = 0;
//                        pvbList.clear();
//                        ledgerOnHandQuantity = 0;
//                        ledgerFinalValuation = 0;
//                        productopeningQty = 0;
//                        productPeriodQty = 0;
//                        productOpeningPrice = 0;
//                        productPeriodPrice = 0;
//                        periodQty = 0;
//                        openingQty = 0;
//                        ledgeropeningAmt = 0;
//                        ledgerPeriodAmt = 0;
//                        stockInQty = 0;
//                        stockOutQty = 0;
//                    }
//                    openingRecordIndex = gridCounter;
//
//                }
//
//                BigInteger transType = (BigInteger) row[0];
////                String productid = (String) row[1];
//                productidLast = (String) row[1];
//                pid = (String) row[2];
//                String productDesc = (String) row[3];
//                productDescLast = (String) row[3];
//                transactionDate = (Date) row[4];
//                String transactionNumber = (String) row[5];
//                String personCode = "";
//                String personName = "";
//                if (!StringUtil.isNullOrEmpty((String) row[6])) {
//                    personCode = (String) row[6];
//                }
//                if (!StringUtil.isNullOrEmpty((String) row[7])) {
//                    personName = (String) row[7];
//                }
//
//                String personid = (String) row[8];
//                double quantity = (Double) row[9];
//                stockRate = row[10] != null ? (Double) row[10] : 0.0;
//                double baseUOMRate = (Double) row[11]; // Conversion Factor
////                String ConsignmentInvoiceID = (String) row[12];
//                String currencyid = "";
//                if (!StringUtil.isNullOrEmpty((String) row[13])) {
//                    currencyid = (String) row[13];
//                }
//
//                String invoiceID = (String) row[14];
//                double grSpotRate = 0.0;
//                String detailid = "";
//                try {
//                    if (!StringUtil.isNullOrEmpty((String) row[16])) {
//                        grSpotRate = StringUtil.getDouble((String) row[16]);
//                    }
//                } catch (java.lang.ClassCastException ex) {
//                    if (row[16] != null) {
//                        grSpotRate = (double) row[16];
//                    }
//                }
//                if (!StringUtil.isNullOrEmpty((String) row[17])) {
//                    detailid = (String) row[17];
//                }
//                boolean isOpeningtransaction = isOpeingOrPeriodTransaction(transactionDate, StartDate, transType.intValue());
//
//                KwlReturnObject productresult = accountingHandlerDAOobj.getObject(Product.class.getName(), productid);
//                Product product = (Product) productresult.getEntityList().get(0);
//                ValuationMethod valuationMethod = product.getValuationMethod();
//                Double baseUOMQuantitycount = authHandler.calculateBaseUOMQuatity(quantity, baseUOMRate);
//                double baseUOMQuantity = baseUOMQuantitycount;
//                double amount = 0.0;
//
//                inIncludeOpening++;
//                recCount++;
//                String consignmentInvoice = accProductObj.consignmentInvoice(invoiceID, companyid);
//                if (!StringUtil.isNullOrEmpty(consignmentInvoice) && isActivateLandedInvAmt) {
//                    double vendorInvoiceTotalAmountInBase = 1.0;
//                    double consignmentInvoiceTotalAmountInBase = 1.0;
//
//                    List invioceTotalAmountDetail = accProductObj.getVendorInvoiceTotalAmountDetail(consignmentInvoice, personName, companyid);
//                    Iterator it = invioceTotalAmountDetail.iterator();
//                    while (it.hasNext()) {
//                        Object[] itrow = (Object[]) it.next();
//                        double vendorInvoiceTotalAmount = (Double) itrow[0];
//                        String fromcurrencyid = (String) itrow[1];
//                        Date entryDate = (Date) itrow[2];
//                        double externalcurrencyrate = (Double) itrow[3];
//
//                        crresult = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, vendorInvoiceTotalAmount, fromcurrencyid, entryDate, externalcurrencyrate);
//                        vendorInvoiceTotalAmountInBase = (Double) crresult.getEntityList().get(0);
//                    }
//
//                    List consignmentInvoiceTotalAmountDetail = accProductObj.getVendorInvoiceTotalAmountDetail(invoiceID, personName, companyid);
//                    it = consignmentInvoiceTotalAmountDetail.iterator();
//                    while (it.hasNext()) {
//                        Object[] itrow = (Object[]) it.next();
//                        double consignmentInvoiceTotalAmount = (Double) itrow[0];
//                        String fromcurrencyid = (String) itrow[1];
//                        Date entryDate = (Date) itrow[2];
//                        double externalcurrencyrate = (Double) itrow[3];
//
//                        crresult = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, consignmentInvoiceTotalAmount, fromcurrencyid, entryDate, externalcurrencyrate);
//                        consignmentInvoiceTotalAmountInBase = (Double) crresult.getEntityList().get(0);
//                    }
//                    crresult = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, stockRate, currencyid, transactionDate, 0);
//                    stockRate = (Double) crresult.getEntityList().get(0);
//
//                    amount = stockRate * quantity;
//                    stockRate = amount + ((amount / vendorInvoiceTotalAmountInBase) * consignmentInvoiceTotalAmountInBase);
//
//                    amount = stockRate * quantity;
//                } else if (product.isIsSerialForProduct()) {
//                    crresult = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, stockRate, currencyid, transactionDate, grSpotRate);
//                    stockRate = (Double) crresult.getEntityList().get(0);
//                    int transactiontype = 28;
//                    String serial = "";
//                    if (transType.intValue() == 0 || transType.intValue() == 1 || transType.intValue() == 2 || transType.intValue() == 3 || transType.intValue() == 5 || transType.intValue() == 4) {
//                        if (transType.intValue() == 0 || transType.intValue() == 1) {
//                            transactiontype = 28;
//                        } else if (transType.intValue() == 2 || transType.intValue() == 3 || transType.intValue() == 5 || transType.intValue() == 4) {
//                            if (transType.intValue() == 2) {
//                                transactiontype = 31;
//                            } else if (transType.intValue() == 3 || transType.intValue() == 5) {
//                                transactiontype = 27;
//                            } else if (transType.intValue() == 4) {
//                                transactiontype = 29;
//                            }
//
//                        }
//                        KwlReturnObject srno = accProductObj.getSerialNoByDocumentid(detailid, transactiontype);
//                        List list2 = srno.getEntityList();
//
//                        for (Object obj : list2) {
//                            serial += obj.toString() + ",";
//                        }
//                        String[] serialId = serial.split(",");
//                        stockRate = accProductObj.getValuationPriceForSerialBatches(productid, transType.intValue(), valuationMethod, baseUOMQuantity, stockRate, baseUOMRate, isOpeningtransaction, pvbList, true, serialId);
//                        amount += stockRate * baseUOMQuantity;
//                    } else if (transType.intValue() == 7 || transType.intValue() == 8) {
//                        KwlReturnObject saresult = accountingHandlerDAOobj.getObject(StockAdjustment.class.getName(), detailid);
//                        StockAdjustment sa = (StockAdjustment) saresult.getEntityList().get(0);
//                        KwlReturnObject saDetails = accProductObj.getSADetailByStockAdjustment(detailid);
//                        List saDetailsList = saDetails.getEntityList();
//                        Iterator it = saDetailsList.iterator();
//                        while (it.hasNext()) {
//                            Object[] Objrow = (Object[]) it.next();
//                            String store = sa.getStore().getId();
//                            String location = (String) Objrow[2];
//                            String batchnames = (String) Objrow[3];
//                            double finalQuantity = (Double) Objrow[4];
//                            String serialNames = (String) Objrow[5];
//                            if (!StringUtil.isNullOrEmpty(serialNames)) {
//                                String srl[] = serialNames.split(",");
//                                for (String s : srl) {
//                                    KwlReturnObject storeresult = accountingHandlerDAOobj.getObject(Store.class.getName(), store);
//                                    Store str = (Store) storeresult.getEntityList().get(0);
//                                    KwlReturnObject locationresult = accountingHandlerDAOobj.getObject(Location.class.getName(), location);
//                                    Location loc = (Location) locationresult.getEntityList().get(0);
//
//                                    NewProductBatch batchObj = stockDAO.getERPProductBatch(sa.getProduct(), str, loc, null, null, null, batchnames);
//                                    NewBatchSerial serialObj = stockDAO.getERPBatchSerial(sa.getProduct(), batchObj, s);
//                                    if (serialObj != null) {
//                                        serial += serialObj.getId() + ",";
//                                    }
//                                }
//                            }
//                        }
//                        String[] serialId = serial.split(",");
//                        stockRate = accProductObj.getValuationPriceForSerialBatches(productid, transType.intValue(), valuationMethod, baseUOMQuantity, stockRate, baseUOMRate, isOpeningtransaction, pvbList, true, serialId);
//                        amount += stockRate * baseUOMQuantity;
//                    }
//                } else if (product.isIsBatchForProduct() && !product.isIsSerialForProduct()) {
//                    crresult = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, stockRate, currencyid, transactionDate, grSpotRate);
//                    stockRate = (Double) crresult.getEntityList().get(0);
//                    int transactiontype = 28;
//                    String batch = "";
//                    if (transType.intValue() == 0 || transType.intValue() == 1 || transType.intValue() == 2 || transType.intValue() == 3 || transType.intValue() == 5 || transType.intValue() == 4) {
//                        if (transType.intValue() == 0 || transType.intValue() == 1) {
//                            transactiontype = 28;
//                        } else if (transType.intValue() == 2 || transType.intValue() == 3 || transType.intValue() == 5 || transType.intValue() == 4) {
//                            if (transType.intValue() == 2) {
//                                transactiontype = 31;
//                            } else if (transType.intValue() == 3 || transType.intValue() == 5) {
//                                transactiontype = 27;
//                            } else if (transType.intValue() == 4) {
//                                transactiontype = 29;
//                            }
//                        }
//                        KwlReturnObject srno = accProductObj.getBatchesByDocumentid(detailid, transactiontype);
//                        List list2 = srno.getEntityList();
//                        Iterator itr1 = list2.iterator();
//                        while (itr1.hasNext()) {
//                            Object[] batchRow = (Object[]) itr1.next();
//                            batch = (String) batchRow[0];
//                            double batchQty = (Double) batchRow[1];
//                            String[] batchId = batch.split(",");
//                            stockRate = accProductObj.getValuationPriceForSerialBatches(productid, transType.intValue(), valuationMethod, batchQty, stockRate, baseUOMRate, isOpeningtransaction, pvbList, false, batchId);
//                            amount += stockRate * batchQty;
//                        }
//                        stockRate = amount / baseUOMQuantity;
//                    } else if (transType.intValue() == 7 || transType.intValue() == 8) {
//                        KwlReturnObject saresult = accountingHandlerDAOobj.getObject(StockAdjustment.class.getName(), detailid);
//                        StockAdjustment sa = (StockAdjustment) saresult.getEntityList().get(0);
//                        KwlReturnObject saDetails = accProductObj.getSADetailByStockAdjustment(detailid);
//                        List saDetailsList = saDetails.getEntityList();
//                        Iterator it = saDetailsList.iterator();
//                        while (it.hasNext()) {
//                            Object[] Objrow = (Object[]) it.next();
//                            String store = sa.getStore().getId();
//                            String location = (String) Objrow[2];
//                            String batchnames = (String) Objrow[3];
//                            double finalQuantity = (Double) Objrow[4];
//                            String pro = sa.getProduct().getID();
//                            requestParams.put("store", store);
//                            requestParams.put("location", location);
//                            requestParams.put("product", pro);
//                            requestParams.put("batchnames", batchnames);
//                            requestParams.put("finalQuantity", finalQuantity);
//
//                            KwlReturnObject storeresult = accountingHandlerDAOobj.getObject(Store.class.getName(), store);
//                            Store str = (Store) storeresult.getEntityList().get(0);
//                            KwlReturnObject locationresult = accountingHandlerDAOobj.getObject(Location.class.getName(), location);
//                            Location loc = (Location) locationresult.getEntityList().get(0);
//
//                            NewProductBatch batchObj = stockDAO.getERPProductBatch(sa.getProduct(), str, loc, null, null, null, batchnames);
//                            batch = batchObj.getId();
//                            String[] batchId = batch.split(",");
//                            stockRate = accProductObj.getValuationPriceForSerialBatches(productid, transType.intValue(), valuationMethod, finalQuantity, stockRate, baseUOMRate, isOpeningtransaction, pvbList, false, batchId);
//                            amount += stockRate * finalQuantity;
//                        }
//                        stockRate = amount / baseUOMQuantity;
//                    }
//
//                } else if (valuationMethod == ValuationMethod.FIFO || valuationMethod == ValuationMethod.STANDARD || valuationMethod == ValuationMethod.AVERAGE) {
//                    crresult = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, stockRate, currencyid, transactionDate, grSpotRate);
//                    stockRate = (Double) crresult.getEntityList().get(0);
//                    stockRate = accProductObj.getValuationPrice(productid, transType.intValue(), valuationMethod, baseUOMQuantity, stockRate, baseUOMRate, isOpeningtransaction, pvbList);
//                    amount += stockRate * baseUOMQuantity;
//                }
//                if (transType.intValue() == 0 || transType.intValue() == 1 || transType.intValue() == 4 || transType.intValue() == 6 || transType.intValue() == -1 || transType.intValue() == 7) {
//                    balance += amount;
//                } else {
//                    balance -= amount;
//                }
//
//                JSONObject obj = new JSONObject();
//                String duatyPaid = "";
//                if (isRG23part1) {
//                    duatyPaid = !StringUtil.isNullOrEmpty((String) row[13]) ? (String) row[23] : "";
//                    if (duatyPaid.equals("0")) {
//                        duatyPaid = "";
//                    }
//                    obj.put("openingstock", closingstack);
//                    if (transType.intValue() == 0 || transType.intValue() == 1 || transType.intValue() == 4) { //Assembly product //GR //SR
//                        closingstack = closingstack + baseUOMQuantity;
//                    } else if (transType.intValue() == 2 || transType.intValue() == 3 || transType.intValue() == 5) { // PR  //DO  //Sub product used in AssemblyProduct
//                        closingstack = closingstack - baseUOMQuantity;
//                    }
//                }
//                
//                if (!isOpeningtransaction && !isInventoryValuation && !isFromStockReport) {
//                    obj.put("pid", pid);
//                    obj.put("productDesc", productDesc);
//                    if (transType.intValue() != 6 && transType.intValue() != -1) {
//                        obj.put("transactionDate", df.format(transactionDate));
//                    }
//                    obj.put("transactionNumber", transactionNumber);
//                    obj.put("personCode", personCode);
//                    obj.put("personName", personName);
//                    if (transType.intValue() == 0 || transType.intValue() == 1 || transType.intValue() == 4 || transType.intValue() == 6 || transType.intValue() == -1 || transType.intValue() == 7) {
//                        obj.put("received", baseUOMQuantity);
//                    } else {
//                        obj.put("delivered", baseUOMQuantity);
//                    }
//                    if (isRG23part1) {
//                        if (transType.intValue() == 0) {  //Assembly product
//                            obj.put("transactionsrno", transactionNumber);
//                            obj.put("requisitionno", "");
//                            obj.put("invoicenodate", "");
//                            obj.put("quantityIssuedforManufacture", "");
//                            obj.put("purchasereturenQuantity", "");
//                            obj.put("duatyPaid", duatyPaid);
//                            obj.put("valueofgoods", stockRate * baseUOMQuantity);
//                        } else if (transType.intValue() == 1) {  //GR
//                            obj.put("transactionsrno", transactionNumber);
//                            obj.put("requisitionno", "");
//                            obj.put("invoicenodate", "");
//                            obj.put("quantityIssuedforManufacture", "");
//                            obj.put("purchasereturenQuantity", "");
//                            obj.put("duatyPaid", duatyPaid);
//                            obj.put("valueofgoods", stockRate * baseUOMQuantity);
//                        } else if (transType.intValue() == 2 || transType.intValue() == 3) { // PR  //DO 
//                            obj.put("transactionsrno", "");
//                            obj.put("requisitionno", "");
//                            obj.put("invoicenodate", transactionNumber + " / " + userdf.format(transactionDate));
//                            obj.put("quantityIssuedforManufacture", "");
//                            obj.put("purchasereturenQuantity", baseUOMQuantity);
//                            obj.put("valueofgoods", "");
//                            obj.put("duatyPaid", duatyPaid);
//                        } else if (transType.intValue() == 5) {  //Sub product used in AssemblyProduct
//                            obj.put("transactionsrno", "");
//                            obj.put("requisitionno", transactionNumber);
//                            obj.put("invoicenodate", "");
//                            obj.put("quantityIssuedforManufacture", baseUOMQuantity);
//                            obj.put("purchasereturenQuantity", "");
//                            obj.put("valueofgoods", "");
//                            obj.put("duatyPaid", duatyPaid);
//                        } else if (transType.intValue() == 4) {  //SR
//                            obj.put("transactionsrno", transactionNumber);
//                            obj.put("requisitionno", "");
//                            obj.put("invoicenodate", "");
//                            obj.put("quantityIssuedforManufacture", baseUOMQuantity);
//                            obj.put("purchasereturenQuantity", "");
//                            obj.put("valueofgoods", "");
//                            obj.put("duatyPaid", duatyPaid);
//                        }
//                        obj.put("closingstock", closingstack);
//                    }
//                    obj.put("transactiontype", transType.intValue());
//                    obj.put("billid", (String) row[15]);
//                    obj.put("stockRate", authHandler.roundUnitPrice(stockRate));
//                    if (transType.intValue() == -1) {
//                        obj.put("stockRate", "-");
//                    }
//                    obj.put("value", authHandler.round(amount, 2));
//                    if (isExport) {
//                        obj.put("productid", productid);//
//                        obj.put("isQtyAndValuationJSON", 0);//
//                        obj.put("transType", transType.intValue());
//                        if (valuationMethod == ValuationMethod.FIFO) {
//                            obj.put("ValuationMethod", "FIFO");
//                        } else if (valuationMethod == ValuationMethod.STANDARD) {
//                            obj.put("ValuationMethod", "LIFO");
//                        } else {
//                            obj.put("ValuationMethod", "Average");
//                    }
//                    }
//                    obj.put("balance", authHandler.round(balance, 2));
//                    if(isRG23part1){ // for report "R.G. 23A/23C Part I" not need extra rows.
//                        jArr.put(gridCounter, obj);
//                    }else{
//                        jArr.put(gridCounter + 1, obj);
//                    }
//                    gridCounter++;
//                }
//                if (lsize == list.size() - 1 && !isRG23part1) { 
//                    if (valuationMethod == ValuationMethod.FIFO || valuationMethod == ValuationMethod.STANDARD || product.isIsSerialForProduct() || product.isIsBatchForProduct()) {
//                        for (TransactionBatch pvb : pvbList) {
//                            double qty = pvb.getQuantity();
//                            if (qty > 0) {
//                                if (pvb.isOpening()) {
//                                    if (pvb.isOutEntry()) {
////                                        openingAmount -= pvb.getPrice() * qty;
//                                        ledgeropeningAmt -= pvb.getPrice() * qty;
//                                        ledgerOnHandQuantity -= qty;
//                                        ledgerFinalValuation -= pvb.getPrice() * qty;
//                                        openingQty -= qty;
//                                        if (product.getProducttype().getID().equals(Producttype.ASSEMBLY)) {
//                                            OpeningAssemblyValuation -= pvb.getPrice() * qty;
//                                        }
//                                    } else {
////                                        openingAmount += pvb.getPrice() * qty;
//                                        ledgeropeningAmt += pvb.getPrice() * qty;
//                                        ledgerOnHandQuantity += qty;
//                                        ledgerFinalValuation += pvb.getPrice() * qty;
//                                        openingQty += qty;
//                                        if (product.getProducttype().getID().equals(Producttype.ASSEMBLY)) {
//                                            OpeningAssemblyValuation += pvb.getPrice() * qty;
//                                        }
//                                    }
//                                } else {
//                                    if (pvb.isOutEntry()) {
////                                        periodAmount -= pvb.getPrice() * qty;
//                                        ledgerPeriodAmt -= pvb.getPrice() * qty;
//                                        ledgerOnHandQuantity -= qty;
//                                        periodQty -= qty;
//                                        stockOutQty -= qty;
//                                        ledgerFinalValuation -= pvb.getPrice() * qty;
//                                        if (product.getProducttype().getID().equals(Producttype.ASSEMBLY)) {
//                                            OpeningAssemblyValuation -= pvb.getPrice() * qty;
//                                        }
//                                    } else {
////                                        periodAmount += pvb.getPrice() * qty;
//                                        ledgerPeriodAmt += pvb.getPrice() * qty;
//                                        ledgerOnHandQuantity += qty;
//                                        ledgerFinalValuation += pvb.getPrice() * qty;
//                                        periodQty += qty;
//                                        stockInQty += qty;
//                                        if (product.getProducttype().getID().equals(Producttype.ASSEMBLY)) {
//                                            OpeningAssemblyValuation += pvb.getPrice() * qty;
//                                        }
//                                    }
//                                }
//                            }
//                        }
//                        openingAmount += Double.parseDouble(authHandler.formattedAmount(ledgeropeningAmt));
//                        periodAmount += Double.parseDouble(authHandler.formattedQuantity(ledgerPeriodAmt));
//                    } else {
//                        for (TransactionBatch pvb : pvbList) {
//                            double qty = pvb.getQuantity();
//                            if (qty > 0) {
//                                if (pvb.isOpening()) {
//                                    if (pvb.isOutEntry()) {
//                                        openingQty -= qty;
//                                        ledgerOnHandQuantity -= qty;
////                                        productopeningQty-=qty;
////                                        productOpeningPrice -=pvb.getPrice() * qty;
//                                        stockOutQty -= qty;
//                                        if (product.getProducttype().getID().equals(Producttype.ASSEMBLY)) {
//                                            OpeningAssemblyValuation += pvb.getPrice() * qty;
//                                        }
//                                    } else {
//                                        openingQty += qty;
//                                        ledgerOnHandQuantity += qty;
////                                        productopeningQty+=qty;
////                                        productOpeningPrice+=pvb.getPrice() * qty;
//                                        if (product.getProducttype().getID().equals(Producttype.ASSEMBLY)) {
//                                            OpeningAssemblyValuation += pvb.getPrice() * qty;
//                                        }
//                                    }
//                                } else {
//                                    if (pvb.isOutEntry()) {
//                                        periodQty -= qty;
//                                        ledgerOnHandQuantity -= qty;
////                                        productPeriodQty-=qty;
////                                        productPeriodPrice-=pvb.getPrice() * qty;
//                                        if (product.getProducttype().getID().equals(Producttype.ASSEMBLY)) {
//                                            OpeningAssemblyValuation += pvb.getPrice() * qty;
//                                        }
//                                    } else {
//                                        periodQty += qty;
//                                        ledgerOnHandQuantity += qty;
////                                        productPeriodQty+=qty;
////                                        productPeriodPrice+=pvb.getPrice() * qty;
//                                        stockInQty += qty;
//                                        if (product.getProducttype().getID().equals(Producttype.ASSEMBLY)) {
//                                            OpeningAssemblyValuation += pvb.getPrice() * qty;
//                                        }
//                                    }
//                                }
//                            }
//                        }
////                        productavarageQty=productPeriodQty+productopeningQty;
////                        productavarageprice=productOpeningPrice+productPeriodPrice;
////                        avgcost=productavarageprice/productavarageQty;
//                        periodAmount += periodQty * stockRate;
//                        openingAmount += openingQty * stockRate;
//                        ledgerFinalValuation = (periodQty * stockRate) + (openingQty * stockRate);
//                        ledgeropeningAmt = openingQty * stockRate;
//                    }
//
//                    JSONObject FinalRowObj = new JSONObject();// For adding  Quantity & Valuation row to Last Product
//                    if (!isInventoryValuation && !isFromStockReport) {                   //prepare this JSON in case of only Stock ledger
//                        FinalRowObj.put("pid", pid);
//                        FinalRowObj.put("productDesc", "");
//                        FinalRowObj.put("transactionNumber", "");
//                        FinalRowObj.put("personCode", "");
//                        FinalRowObj.put("personName", "");
//                        FinalRowObj.put("received", "");
//                        FinalRowObj.put("stockRate", "Quantity on Hand: " + authHandler.formattedQuantity(ledgerOnHandQuantity));
//                        FinalRowObj.put("value", "Valuation: " + authHandler.formattedAmount(ledgerFinalValuation));
//                        FinalRowObj.put("ledgerFinalValuation",  authHandler.formattedAmount(ledgerFinalValuation));
//                        FinalRowObj.put("balance", "-");
//                        if (isExport) {
//                            FinalRowObj.put("productid", productid);//
//                            FinalRowObj.put("QtyOnHandJasper", authHandler.formattedQuantity(ledgerOnHandQuantity));
//                            FinalRowObj.put("ValuationJasper", authHandler.formattedAmount(ledgerFinalValuation));
//                            FinalRowObj.put("stockRate", 0);//
//                            FinalRowObj.put("value", 0);//
//                            FinalRowObj.put("isQtyAndValuationJSON", 1);//
//                             if (valuationMethod == ValuationMethod.FIFO) {
//                                FinalRowObj.put("ValuationMethod", "FIFO");
//                            } else if (valuationMethod == ValuationMethod.STANDARD) {
//                                FinalRowObj.put("ValuationMethod", "LIFO");
//                            } else {
//                                FinalRowObj.put("ValuationMethod", "Average");
//                        }
//                        }
//                        jArr.put(gridCounter + 1, FinalRowObj);
//                        gridCounter++;
//
//                        JSONObject OpeningRowObj = new JSONObject();// For adding  Opening valuation row to Every Product.
//                        OpeningRowObj.put("pid", pid);
//                        OpeningRowObj.put("productDesc", "");
//                        OpeningRowObj.put("transactionNumber", "Opening");
//                        OpeningRowObj.put("personCode", "");
//                        OpeningRowObj.put("personName", "");
//                        OpeningRowObj.put("received", openingQty);
//                        OpeningRowObj.put("stockRate", "-");
//                        OpeningRowObj.put("value", authHandler.formattedAmount(ledgeropeningAmt));
//                        OpeningRowObj.put("balance", "-");
//                        if (isExport) {
//                            OpeningRowObj.put("productDesc", productDesc);
//                            OpeningRowObj.put("productid", productid);//
//                            OpeningRowObj.put("isQtyAndValuationJSON", 0);//
//                             if (valuationMethod == ValuationMethod.FIFO) {
//                                OpeningRowObj.put("ValuationMethod", "FIFO");
//                            } else if (valuationMethod == ValuationMethod.STANDARD) {
//                                OpeningRowObj.put("ValuationMethod", "LIFO");
//                            } else {
//                                OpeningRowObj.put("ValuationMethod", "Average");
//                        }
//                            
//                        }
//                        jArr.put(openingRecordIndex, OpeningRowObj);
//                    } else {
//                        FinalRowObj.put("productid", product.getID());
//                        FinalRowObj.put("pid", product.getProductid());
//                        FinalRowObj.put("productname", product.getName());
//                        FinalRowObj.put("productdesc", product.getDescription());
//                        FinalRowObj.put("productType", product.getProducttype().getName());
//                        FinalRowObj.put("productTypeID", product.getProducttype().getID());
//                        if (valuationMethod == ValuationMethod.FIFO) {
//                            FinalRowObj.put("fifo", ledgerFinalValuation);
//                        } else {
//                            FinalRowObj.put("fifo", "NA");
//                        }
//                        if (valuationMethod == ValuationMethod.STANDARD) {
//                            FinalRowObj.put("lifo", ledgerFinalValuation);
//                        } else {
//                            FinalRowObj.put("lifo", "NA");
//                        }
//                        KwlReturnObject priceResult = accProductObj.getProductPrice(product.getID(), true, null, "-1", product.getCurrency().getCurrencyID());
//                        List<Object> priceList = priceResult.getEntityList();
//                        double proPrice = 0;
//                        if (priceList != null) {
//                            for (Object cogsval : priceList) {
//                                proPrice = (cogsval == null ? 0.0 : (Double) cogsval);
//                            }
//                            crresult = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, proPrice, product.getCurrency().getCurrencyID(), null, 0);
//                            proPrice = (Double) crresult.getEntityList().get(0);
//
//                        }
//                        FinalRowObj.put("purchasecost", proPrice);
//                        FinalRowObj.put("quantity", ledgerOnHandQuantity);
//                        FinalRowObj.put("openingstockQty", openingQty);
//                        FinalRowObj.put("stockInQty", stockInQty);
//                        FinalRowObj.put("stockOutQty", stockOutQty);
//                        FinalRowObj.put("evaluationcost", ledgerFinalValuation);
//                        totalLedgerOnHandQuantity += ledgerOnHandQuantity;
//                        totalOpeningQty += openingQty;
//                        totalStockInQty += stockInQty;
//                        totalStockOutQty += stockOutQty;
//                        totalevaluationcost += ledgerFinalValuation;
//                        if (valuationMethod == ValuationMethod.AVERAGE && !product.isIsSerialForProduct()&& !product.isIsBatchForProduct()) {
//                            FinalRowObj.put("avgcost", (stockRate != 0 && ledgerOnHandQuantity != 0) ? stockRate : "N.A");
//                            FinalRowObj.put("valuation", ledgerFinalValuation);
//                        } else if (valuationMethod == ValuationMethod.AVERAGE && (product.isIsSerialForProduct() || product.isIsBatchForProduct())) {//By Dipak P.
//                            FinalRowObj.put("valuation", ledgerFinalValuation);
//                        } else {
//                            FinalRowObj.put("valuation", "NA");
//                        }
//                        jArr.put(FinalRowObj);
//                    }
//                }
//                lsize++;
//                valuation = 0;
//                onhand = 0;
//
//            } catch (SessionExpiredException ex) {
//                Logger.getLogger(accProductController.class.getName()).log(Level.SEVERE, null, ex);
//            }
//        }
//
//        //this condition is for only Product Build Assembly Case
//        if (request.getAttribute("totalQtyForProductBuild") != null && pvbList != null) {
//            //calculate unit price for totalQty of BOM 
//            double totalQtyUsedInBuild = (Double) request.getAttribute("totalQtyForProductBuild");
//            String productid = (String) request.getAttribute("BOMProductId");
//            KwlReturnObject productresult = accountingHandlerDAOobj.getObject(Product.class.getName(), productid);
//            Product product = (Product) productresult.getEntityList().get(0);
//            ValuationMethod valuationMethod = product.getValuationMethod();
//            double unitCostForProduct = accProductObj.getValuationPrice(productid, 3, valuationMethod, totalQtyUsedInBuild, stockRate, 1, false, pvbList);
//            FinalValuationObject.put("productBuildUnitCost", unitCostForProduct);
//        }
//
//        FinalValuationObject.put("openingValuation", openingAmount);
//        FinalValuationObject.put("periodValution", periodAmount);
//        FinalValuationObject.put("totalValution", periodAmount + openingAmount);
//        FinalValuationObject.put("OpeningAssemblyValuation", OpeningAssemblyValuation);
//        FinalValuationObject.put("periodAssemblyValuation", periodAssemblyValuation);
//        FinalValuationObject.put("totalAssemblyValuation", OpeningAssemblyValuation + periodAssemblyValuation);
//
//        valuationArray.put(FinalValuationObject);
//        if (exportInventoryValuation) {
//            JSONObject obj = new JSONObject();
//            obj.put("productdesc", "Total");
//            obj.put("stockInQty", totalStockInQty);
//            obj.put("stockOutQty", totalStockOutQty);
//            obj.put("openingstockQty", totalOpeningQty);
//            obj.put("quantity", totalLedgerOnHandQuantity);
//            obj.put("evaluationcost", totalevaluationcost);
//            jArr.put(obj);
//        }
//        return jArr;
//    }
    public JSONArray getRG23PartIJson(HttpServletRequest request, List list, Map<String, Object[]> companyMaxDateProductPriceList, JSONArray valuationArray) throws JSONException, ServiceException, ParseException, SessionExpiredException {
        Iterator itr = list.iterator();
        JSONArray jArr = new JSONArray();
        String pid = "";
        String productidLast = "";
        String productDescLast = "";
        double balance = 0.0, onhand = 0.0, lifo = 0, valuation = 0,totalevaluationcost = 0, totalStockOutQty = 0, totalStockInQty = 0, totalOpeningQty = 0, totalLedgerOnHandQuantity = 0;
        int inIncludeOpening = 0;
        int recCount = 0, lsize = 0;
        List<TransactionBatch> pvbList = new ArrayList();
        Date StartDate = null, EndDate = null;
            KwlReturnObject result = accountingHandlerDAOobj.getObject(CompanyAccountPreferences.class.getName(), sessionHandlerImpl.getCompanyid(request));
            CompanyAccountPreferences companyAccountPreferences = (CompanyAccountPreferences) result.getEntityList().get(0);
            StartDate = null;
            if (request.getParameter("startdate") == null) {
                if (request.getParameter("stdate") == null) {
                    StartDate = companyAccountPreferences.getBookBeginningFrom();
                } else {
                    StartDate = authHandler.getDateOnlyFormat(request).parse(request.getParameter("stdate"));
                }
            } else {
                StartDate = authHandler.getDateOnlyFormat(request).parse(request.getParameter("startdate"));
            }

            EndDate = null;
            if (request.getParameter("enddate") == null) {
                EndDate = new Date();
            } else {
                EndDate = authHandler.getDateOnlyFormat(request).parse(request.getParameter("enddate"));
            }
        boolean isActivateLandedInvAmt = Boolean.parseBoolean(request.getParameter("isactivatelandedinvamt"));
        boolean isExport = request.getAttribute("isExportPDF") == null ? false : Boolean.parseBoolean(request.getAttribute("isExportPDF").toString());
        boolean isRG23part1 =!StringUtil.isNullOrEmpty(request.getParameter("rg23part1"))?Boolean.parseBoolean(request.getParameter("rg23part1")):false ;
        boolean isInventoryValuation = true;                //Inventory Valuation Report in  Product Master
        boolean isFromStockReport = true;                   //Stock Report in Inventory Tab
        isInventoryValuation = Boolean.parseBoolean(request.getParameter("isInventoryValuation"));
        isFromStockReport = Boolean.parseBoolean(request.getParameter("isFromStockReport"));
        boolean exportInventoryValuation = request.getParameter("exportInventoryValuation") == null ? false : Boolean.parseBoolean(request.getParameter("exportInventoryValuation"));
        boolean isStockLedgerReport = true;
        double openingAmount = 0.0;
        double periodAmount = 0.0;
        double periodAssemblyValuation = 0.0;
        double OpeningAssemblyValuation = 0.0;
        double ledgerFinalValuation = 0;
        double ledgerOnHandQuantity = 0;
        double periodQty = 0;
        double openingQty = 0;
        double closingstack = 0;
        double ledgeropeningAmt = 0;
        double ledgerPeriodAmt = 0;
        double productopeningQty = 0;
        double productPeriodQty = 0;
        double productOpeningPrice = 0;
        double productPeriodPrice = 0;
        double stockInQty = 0;                    //Quantity In Selected date period
        double stockOutQty = 0;                   //Quantity Out Selected date period
        JSONObject FinalValuationObject = new JSONObject();
        double stockRate = 0;
        int openingRecordIndex = 0;
        int gridCounter = 0;
        Date transactionDate = null;

        while (itr.hasNext()) {
            try {
                String companyid = sessionHandlerImpl.getCompanyid(request);
                DateFormat df = authHandler.getDateOnlyFormat(request);
                DateFormat userdf = authHandler.getUserDateFormatter(request);
                KwlReturnObject crresult;
                HashMap<String, Object> requestParams = AccountingManager.getGlobalParams(request);
                String gcurrencyid = sessionHandlerImpl.getCurrencyID(request);
                requestParams.put("companyid", companyid);
                requestParams.put("gcurrencyid", gcurrencyid);
                requestParams.put("isStockLedgerReport", isStockLedgerReport);

                Object[] row = (Object[]) itr.next();
                String productid = (String) row[1];


                if (recCount > 0 && !pid.equals((String) row[2])) {
                    KwlReturnObject lastproductresult = accountingHandlerDAOobj.getObject(Product.class.getName(), productidLast);
                    Product lastproduct = (Product) lastproductresult.getEntityList().get(0);
                    ValuationMethod valuationMethod = lastproduct.getValuationMethod();
                    requestParams.put("productid", productidLast);
                    requestParams.put("isprovalReport", false);
                    String productCategoryid = "";
                    if (request.getParameter(Constants.productCategoryid) != null) {
                        productCategoryid = (String) request.getParameter(Constants.productCategoryid);
                    }
                    requestParams.put("endDate", EndDate);
                    requestParams.put("companyid", sessionHandlerImpl.getCompanyid(request));
                    requestParams.put("productCategoryid", productCategoryid);
                    //For Calcuating Quantity & Valuation for each product 
                    if (valuationMethod == ValuationMethod.FIFO || valuationMethod == ValuationMethod.STANDARD || lastproduct.isIsSerialForProduct() || lastproduct.isIsBatchForProduct()) {
                        for (TransactionBatch pvb : pvbList) {
                            double qty = pvb.getQuantity();
                            if (qty > 0) {
                                if (pvb.isOpening()) {
                                    if (pvb.isOutEntry()) {
                                        ledgeropeningAmt -= pvb.getPrice() * qty;
                                        ledgerOnHandQuantity -= qty;
                                        ledgerFinalValuation -= pvb.getPrice() * qty;
                                        openingQty -= qty;
                                        if (lastproduct.getProducttype().getID().equals(Producttype.ASSEMBLY)) {
                                            OpeningAssemblyValuation -= pvb.getPrice() * qty;
                                        }
                                    } else {
                                        ledgeropeningAmt += pvb.getPrice() * qty;
                                        ledgerOnHandQuantity += qty;
                                        ledgerFinalValuation += pvb.getPrice() * qty;
                                        openingQty += qty;
                                        if (lastproduct.getProducttype().getID().equals(Producttype.ASSEMBLY)) {
                                            OpeningAssemblyValuation += pvb.getPrice() * qty;
                                        }
                                    }
                                } else {
                                    if (pvb.isOutEntry()) {
                                        ledgerPeriodAmt -= pvb.getPrice() * qty;
                                        ledgerOnHandQuantity -= qty;
                                        ledgerFinalValuation -= pvb.getPrice() * qty;
                                        periodQty -= qty;
                                        stockOutQty -= qty;
                                        if (lastproduct.getProducttype().getID().equals(Producttype.ASSEMBLY)) {
                                            OpeningAssemblyValuation -= pvb.getPrice() * qty;
                                        }
                                    } else {
                                        ledgerPeriodAmt += pvb.getPrice() * qty;
                                        ledgerOnHandQuantity += qty;
                                        ledgerFinalValuation += pvb.getPrice() * qty;
                                        periodQty += qty;
                                        stockInQty += qty;
                                        if (lastproduct.getProducttype().getID().equals(Producttype.ASSEMBLY)) {
                                            OpeningAssemblyValuation += pvb.getPrice() * qty;
                                        }
                                    }
                                }
                            }
                        }
                        openingAmount += Double.parseDouble(authHandler.formattedAmount(ledgeropeningAmt, companyid));
                        periodAmount += Double.parseDouble(authHandler.formattedQuantity(ledgerPeriodAmt, companyid));
                    } else {
                        for (TransactionBatch pvb : pvbList) {
                            double qty = pvb.getQuantity();
                            if (qty > 0) {
                                if (pvb.isOpening()) {
                                    if (pvb.isOutEntry()) {
                                        openingQty -= qty;
                                        ledgerOnHandQuantity -= qty;
                                        productopeningQty -= qty;
                                        productOpeningPrice -= pvb.getPrice() * qty;
                                    } else {
                                        openingQty += qty;
                                        productopeningQty += qty;
                                        ledgerOnHandQuantity += qty;
                                        productOpeningPrice += pvb.getPrice() * qty;
                                    }
                                } else {
                                    if (pvb.isOutEntry()) {
                                        periodQty -= qty;
                                        productPeriodQty -= qty;
                                        ledgerOnHandQuantity -= qty;
                                        stockOutQty -= qty;
                                        productPeriodPrice -= pvb.getPrice() * qty;
                                    } else {
                                        periodQty += qty;
                                        productPeriodQty += qty;
                                        ledgerOnHandQuantity += qty;
                                        stockInQty += qty;
                                        productPeriodPrice += pvb.getPrice() * qty;
                                    }
                                }
                            }
                        }
                        periodAmount += periodQty * stockRate;
                        openingAmount += openingQty * stockRate;
                        ledgerFinalValuation = (periodQty * stockRate) + (openingQty * stockRate);
                        ledgeropeningAmt = openingQty * stockRate;
                    }
                    // For adding Quantity & Valuation rows to each product.
                    JSONObject FinalRowObj = new JSONObject();
                    if (!isInventoryValuation && !isFromStockReport) {
                        // For adding Quantity & Valuation rows to each product in Stock Ledger.
                        FinalRowObj.put("pid", pid);
                        FinalRowObj.put("productDesc", "");
                        FinalRowObj.put("transactionNumber", "");
                        FinalRowObj.put("personCode", "");
                        FinalRowObj.put("personName", "");
                        FinalRowObj.put("received", "");
                        FinalRowObj.put("stockRate", "Quantity on Hand: " + authHandler.formattedQuantity(ledgerOnHandQuantity, companyid));
                        FinalRowObj.put("value", "Valuation: " + authHandler.formattedAmount(ledgerFinalValuation, companyid));
                        FinalRowObj.put("ledgerFinalValuation",  authHandler.formattedAmount(ledgerFinalValuation, companyid));
                        FinalRowObj.put("balance", "-");
                        if (isExport) {
                            FinalRowObj.put("productid", productidLast);//
                            FinalRowObj.put("QtyOnHandJasper", authHandler.formattedQuantity(ledgerOnHandQuantity, companyid));
                            FinalRowObj.put("ValuationJasper", authHandler.formattedAmount(ledgerFinalValuation, companyid));
                            FinalRowObj.put("stockRate", 0);//
                            FinalRowObj.put("value", 0);//
                            FinalRowObj.put("isQtyAndValuationJSON", 1);//
                        }
                        jArr.put(gridCounter + 1, FinalRowObj);
                        gridCounter++;
                        gridCounter++;

                        JSONObject OpeningRowObj = new JSONObject();// For adding  Quantity & Valuation row to Last Product
                        OpeningRowObj.put("pid", pid);
                        OpeningRowObj.put("productDesc", "");
                        OpeningRowObj.put("transactionNumber", "Opening");
                        OpeningRowObj.put("personCode", "");
                        OpeningRowObj.put("personName", "");
                        OpeningRowObj.put("received", openingQty);
                        OpeningRowObj.put("stockRate", "-");
                        OpeningRowObj.put("value", authHandler.formattedAmount(ledgeropeningAmt, companyid));
                        OpeningRowObj.put("balance", "-");
                        if (isExport) {
                            OpeningRowObj.put("productDesc", productDescLast);
                            OpeningRowObj.put("productid", productidLast);//
                            OpeningRowObj.put("isQtyAndValuationJSON", 0);//
                        }
                        jArr.put(openingRecordIndex, OpeningRowObj);
                    } else {
                        FinalRowObj.put("productid", lastproduct.getID());
                        FinalRowObj.put("pid", lastproduct.getProductid());
                        FinalRowObj.put("productname", lastproduct.getName());
                        FinalRowObj.put("productdesc", lastproduct.getDescription());
                        FinalRowObj.put("productType", lastproduct.getProducttype().getName());
                        FinalRowObj.put("productTypeID", lastproduct.getProducttype().getID());
                        if (valuationMethod == ValuationMethod.FIFO) {
                            FinalRowObj.put("fifo", ledgerFinalValuation);
                        } else {
                            FinalRowObj.put("fifo", "NA");
                        }
                        if (valuationMethod == ValuationMethod.STANDARD) {
                            FinalRowObj.put("lifo", ledgerFinalValuation);
                        } else {
                            FinalRowObj.put("lifo", "NA");
                        }

                        KwlReturnObject priceResult = accProductObj.getProductPrice(lastproduct.getID(), true, null, "-1", lastproduct.getCurrency().getCurrencyID());
                        List<Object> priceList = priceResult.getEntityList();
                        double proPrice = 0;
                        if (priceList != null) {
                            for (Object cogsval : priceList) {
                                proPrice = (cogsval == null ? 0.0 : (Double) cogsval);
                            }
                            crresult = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, proPrice,  lastproduct.getCurrency().getCurrencyID(), null, 0);
                            proPrice = (Double) crresult.getEntityList().get(0);

                        }
                        FinalRowObj.put("purchasecost", proPrice);
                        FinalRowObj.put("quantity", ledgerOnHandQuantity);
                        FinalRowObj.put("openingstockQty", openingQty);
                        FinalRowObj.put("stockInQty", stockInQty);
                        FinalRowObj.put("stockOutQty", stockOutQty);
                        FinalRowObj.put("evaluationcost", ledgerFinalValuation);
                        totalLedgerOnHandQuantity += ledgerOnHandQuantity;
                        totalOpeningQty += openingQty;
                        totalStockInQty += stockInQty;
                        totalStockOutQty += stockOutQty;
                        totalevaluationcost += ledgerFinalValuation;
                        if (valuationMethod == ValuationMethod.AVERAGE && !lastproduct.isIsSerialForProduct() && !lastproduct.isIsBatchForProduct()) {
                            FinalRowObj.put("avgcost", (stockRate != 0 && ledgerOnHandQuantity != 0) ? stockRate : "N.A");
                            FinalRowObj.put("valuation", ledgerFinalValuation);
                        } else if (valuationMethod == ValuationMethod.AVERAGE && (lastproduct.isIsSerialForProduct() || lastproduct.isIsBatchForProduct())) {//By Dipak P.
                            FinalRowObj.put("valuation", ledgerFinalValuation);
                        } else {
                            FinalRowObj.put("valuation", "NA");
                        }
                        jArr.put(FinalRowObj);
                    }

                    if (!pid.equals((String) row[2])) {                     //Re-Initializing the Variables for Product Level Data in Stockledger/StockReport/Inventory Valuation Report
                        balance = 0.0;
                        inIncludeOpening = 0;
                        pvbList.clear();
                        ledgerOnHandQuantity = 0;
                        ledgerFinalValuation = 0;
                        productopeningQty = 0;
                        productPeriodQty = 0;
                        productOpeningPrice = 0;
                        productPeriodPrice = 0;
                        periodQty = 0;
                        openingQty = 0;
                        ledgeropeningAmt = 0;
                        ledgerPeriodAmt = 0;
                        stockInQty = 0;
                        stockOutQty = 0;
                    }
                    openingRecordIndex = gridCounter;

                }

                BigInteger transType = (BigInteger) row[0];
//                String productid = (String) row[1];
                productidLast = (String) row[1];
                pid = (String) row[2];
                String productDesc = (String) row[3];
                productDescLast = (String) row[3];
                transactionDate = (Date) row[4];
                String transactionNumber = (String) row[5];
                String personCode = "";
                String personName = "";
                if (!StringUtil.isNullOrEmpty((String) row[6])) {
                    personCode = (String) row[6];
                }
                if (!StringUtil.isNullOrEmpty((String) row[7])) {
                    personName = (String) row[7];
                }

                String personid = (String) row[8];
                double quantity = (Double) row[9];
                stockRate = row[10] != null ? (Double) row[10] : 0.0;
                double baseUOMRate = (Double) row[11]; // Conversion Factor
//                String ConsignmentInvoiceID = (String) row[12];
                String currencyid = "";
                if (!StringUtil.isNullOrEmpty((String) row[13])) {
                    currencyid = (String) row[13];
                }

                String invoiceID = (String) row[14];
                double grSpotRate = 0.0;
                String detailid = "";
                try {
                    if (!StringUtil.isNullOrEmpty((String) row[16])) {
                        grSpotRate = StringUtil.getDouble((String) row[16]);
                    }
                } catch (java.lang.ClassCastException ex) {
                    if (row[16] != null) {
                        grSpotRate = (double) row[16];
                    }
                }
                if (!StringUtil.isNullOrEmpty((String) row[17])) {
                    detailid = (String) row[17];
                }
                boolean isOpeningtransaction = isOpeingOrPeriodTransaction(transactionDate, StartDate, transType.intValue());

                KwlReturnObject productresult = accountingHandlerDAOobj.getObject(Product.class.getName(), productid);
                Product product = (Product) productresult.getEntityList().get(0);
                ValuationMethod valuationMethod = product.getValuationMethod();
                Double baseUOMQuantitycount = authHandler.calculateBaseUOMQuatity(quantity, baseUOMRate, companyid);
                double baseUOMQuantity = baseUOMQuantitycount;
                double amount = 0.0;

                inIncludeOpening++;
                recCount++;
                String consignmentInvoice = accProductObj.consignmentInvoice(invoiceID, companyid);
                if (!StringUtil.isNullOrEmpty(consignmentInvoice) && isActivateLandedInvAmt) { //
                            double vendorInvoiceTotalAmountInBase = 1.0;
                            double consignmentInvoiceTotalAmountInBase = 1.0;

                            List invioceTotalAmountDetail = accProductObj.getVendorInvoiceTotalAmountDetail(consignmentInvoice, personName, companyid);
                            Iterator it = invioceTotalAmountDetail.iterator();
                            while (it.hasNext()) {
                                Object[] itrow = (Object[]) it.next();
                                double vendorInvoiceTotalAmount = (Double) itrow[0];
                                String fromcurrencyid = (String) itrow[1];
                                Date entryDate = (Date) itrow[2];
                                double externalcurrencyrate = (Double) itrow[3];

                                crresult = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, vendorInvoiceTotalAmount, fromcurrencyid, entryDate, externalcurrencyrate);
                                vendorInvoiceTotalAmountInBase = (Double) crresult.getEntityList().get(0);
                            }

                            List consignmentInvoiceTotalAmountDetail = accProductObj.getVendorInvoiceTotalAmountDetail(invoiceID, personName, companyid);
                            it = consignmentInvoiceTotalAmountDetail.iterator();
                            while (it.hasNext()) {
                                Object[] itrow = (Object[]) it.next();
                                double consignmentInvoiceTotalAmount = (Double) itrow[0];
                                String fromcurrencyid = (String) itrow[1];
                                Date entryDate = (Date) itrow[2];
                                double externalcurrencyrate = (Double) itrow[3];

                                crresult = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, consignmentInvoiceTotalAmount, fromcurrencyid, entryDate, externalcurrencyrate);
                                consignmentInvoiceTotalAmountInBase = (Double) crresult.getEntityList().get(0);
                            }
                            crresult = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, stockRate, currencyid, transactionDate, 0);
                            stockRate = (Double) crresult.getEntityList().get(0);

                            amount = stockRate * quantity;
                            stockRate = amount + ((amount / vendorInvoiceTotalAmountInBase) * consignmentInvoiceTotalAmountInBase);

                            amount = stockRate * quantity;
                } else if (product.isIsSerialForProduct()) { //
                    crresult = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, stockRate, currencyid, transactionDate, grSpotRate);
                    stockRate = (Double) crresult.getEntityList().get(0);
                    int transactiontype = 28;
                    String serial = "";
                    if (transType.intValue() == 0 || transType.intValue() == 1 || transType.intValue() == 2 || transType.intValue() == 3 || transType.intValue() == 5 || transType.intValue() == 4) {
                        if (transType.intValue() == 0 || transType.intValue() == 1) {
                            transactiontype = 28;
                        } else if (transType.intValue() == 2 || transType.intValue() == 3 || transType.intValue() == 5 || transType.intValue() == 4) {
                            if (transType.intValue() == 2) {
                                transactiontype = 31;
                            } else if (transType.intValue() == 3 || transType.intValue() == 5) {
                                transactiontype = 27;
                            } else if (transType.intValue() == 4) {
                                transactiontype = 29;
                            }

                        }
                        KwlReturnObject srno = accProductObj.getSerialNoByDocumentid(detailid, transactiontype);
                        List list2 = srno.getEntityList();

                        for (Object obj : list2) {
                            serial += obj.toString() + ",";
                        }
                        String[] serialId = serial.split(",");
                        stockRate = accProductObj.getValuationPriceForSerialBatches(productid, transType.intValue(), valuationMethod, baseUOMQuantity, stockRate, baseUOMRate, isOpeningtransaction, pvbList, true, serialId);
                        amount += stockRate * baseUOMQuantity;
                    } else if (transType.intValue() == 7 || transType.intValue() == 8) {
                        KwlReturnObject saresult = accountingHandlerDAOobj.getObject(StockAdjustment.class.getName(), detailid);
                        StockAdjustment sa = (StockAdjustment) saresult.getEntityList().get(0);
                        KwlReturnObject saDetails = accProductObj.getSADetailByStockAdjustment(detailid);
                        List saDetailsList = saDetails.getEntityList();
                        Iterator it = saDetailsList.iterator();
                        while (it.hasNext()) {
                            Object[] Objrow = (Object[]) it.next();
                            String store = sa.getStore().getId();
                            String location = (String) Objrow[2];
                            String batchnames = (String) Objrow[3];
                            double finalQuantity = (Double) Objrow[4];
                            String serialNames = (String) Objrow[5];
                            if (!StringUtil.isNullOrEmpty(serialNames)) {
                                String srl[] = serialNames.split(",");
                                for (String s : srl) {
                                    KwlReturnObject storeresult = accountingHandlerDAOobj.getObject(Store.class.getName(), store);
                                    Store str = (Store) storeresult.getEntityList().get(0);
                                    KwlReturnObject locationresult = accountingHandlerDAOobj.getObject(Location.class.getName(), location);
                                    Location loc = (Location) locationresult.getEntityList().get(0);

                                    NewProductBatch batchObj = stockDAO.getERPProductBatch(sa.getProduct(), str, loc, null, null, null, batchnames);
                                    NewBatchSerial serialObj = stockDAO.getERPBatchSerial(sa.getProduct(), batchObj, s);
                                    if (serialObj != null) {
                                        serial += serialObj.getId() + ",";
                                    }
                                }
                            }
                        }
                        String[] serialId = serial.split(",");
                        stockRate = accProductObj.getValuationPriceForSerialBatches(productid, transType.intValue(), valuationMethod, baseUOMQuantity, stockRate, baseUOMRate, isOpeningtransaction, pvbList, true, serialId);
                        amount += stockRate * baseUOMQuantity;
                    }
                } else if (product.isIsBatchForProduct() && !product.isIsSerialForProduct()) { //
                    crresult = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, stockRate, currencyid, transactionDate, grSpotRate);
                    stockRate = (Double) crresult.getEntityList().get(0);
                    int transactiontype = 28;
                    String batch = "";
                    if (transType.intValue() == 0 || transType.intValue() == 1 || transType.intValue() == 2 || transType.intValue() == 3 || transType.intValue() == 5 || transType.intValue() == 4) {
                        if (transType.intValue() == 0 || transType.intValue() == 1) {
                            transactiontype = 28;
                        } else if (transType.intValue() == 2 || transType.intValue() == 3 || transType.intValue() == 5 || transType.intValue() == 4) {
                            if (transType.intValue() == 2) {
                                transactiontype = 31;
                            } else if (transType.intValue() == 3 || transType.intValue() == 5) {
                                transactiontype = 27;
                            } else if (transType.intValue() == 4) {
                                transactiontype = 29;
                            }
                        }
                        KwlReturnObject srno = accProductObj.getBatchesByDocumentid(detailid, transactiontype);
                        List list2 = srno.getEntityList();
                        Iterator itr1 = list2.iterator();
                        while (itr1.hasNext()) {
                            Object[] batchRow = (Object[]) itr1.next();
                            batch = (String) batchRow[0];
                            double batchQty = (Double) batchRow[1];
                            String[] batchId = batch.split(",");
                            stockRate = accProductObj.getValuationPriceForSerialBatches(productid, transType.intValue(), valuationMethod, batchQty, stockRate, baseUOMRate, isOpeningtransaction, pvbList, false, batchId);
                            amount += stockRate * batchQty;
                        }
                        stockRate = amount / baseUOMQuantity;
                    } else if (transType.intValue() == 7 || transType.intValue() == 8) {
                        KwlReturnObject saresult = accountingHandlerDAOobj.getObject(StockAdjustment.class.getName(), detailid);
                        StockAdjustment sa = (StockAdjustment) saresult.getEntityList().get(0);
                        KwlReturnObject saDetails = accProductObj.getSADetailByStockAdjustment(detailid);
                        List saDetailsList = saDetails.getEntityList();
                        Iterator it = saDetailsList.iterator();
                        while (it.hasNext()) {
                            Object[] Objrow = (Object[]) it.next();
                            String store = sa.getStore().getId();
                            String location = (String) Objrow[2];
                            String batchnames = (String) Objrow[3];
                            double finalQuantity = (Double) Objrow[4];
                            String pro = sa.getProduct().getID();
                            requestParams.put("store", store);
                            requestParams.put("location", location);
                            requestParams.put("product", pro);
                            requestParams.put("batchnames", batchnames);
                            requestParams.put("finalQuantity", finalQuantity);

                            KwlReturnObject storeresult = accountingHandlerDAOobj.getObject(Store.class.getName(), store);
                            Store str = (Store) storeresult.getEntityList().get(0);
                            KwlReturnObject locationresult = accountingHandlerDAOobj.getObject(Location.class.getName(), location);
                            Location loc = (Location) locationresult.getEntityList().get(0);

                            NewProductBatch batchObj = stockDAO.getERPProductBatch(sa.getProduct(), str, loc, null, null, null, batchnames);
                            batch = batchObj.getId();
                            String[] batchId = batch.split(",");
                            stockRate = accProductObj.getValuationPriceForSerialBatches(productid, transType.intValue(), valuationMethod, finalQuantity, stockRate, baseUOMRate, isOpeningtransaction, pvbList, false, batchId);
                            amount += stockRate * finalQuantity;
                        }
                        stockRate = amount / baseUOMQuantity;
                    }

                } else if (valuationMethod == ValuationMethod.FIFO || valuationMethod == ValuationMethod.STANDARD || valuationMethod == ValuationMethod.AVERAGE) {
                    crresult = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, stockRate, currencyid, transactionDate, grSpotRate);
                    stockRate = (Double) crresult.getEntityList().get(0);
                    stockRate = accProductObj.getValuationPrice(productid, transType.intValue(), valuationMethod, baseUOMQuantity, stockRate, baseUOMRate, isOpeningtransaction, pvbList);
                    amount += stockRate * baseUOMQuantity;
                }
                if (transType.intValue() == 0 || transType.intValue() == 1 || transType.intValue() == 4 || transType.intValue() == 6 || transType.intValue() == -1 || transType.intValue() == 7) {
                    balance += amount;
                } else {
                    balance -= amount;
                }

                JSONObject obj = new JSONObject();
                String duatyPaid = "";
                duatyPaid = !StringUtil.isNullOrEmpty((String) row[13]) ? (String) row[23] : "";
                if (duatyPaid.equals("0")) {
                    duatyPaid = "";
                }
                obj.put("openingstock", closingstack);
                obj.put("openbalance", closingstack);
                if (transType.intValue() == 0 || transType.intValue() == 1 || transType.intValue() == 4) { //Assembly product //GR //SR
                    closingstack = closingstack + baseUOMQuantity;
                } else if (transType.intValue() == 2 || transType.intValue() == 3 || transType.intValue() == 5) { // PR  //DO  //Sub product used in AssemblyProduct
                    closingstack = closingstack - baseUOMQuantity;
                }
                if (!isOpeningtransaction && !isInventoryValuation && !isFromStockReport) {
                    obj.put("pid", pid);
                    obj.put("productDesc", productDesc);
                    if (transType.intValue() != 6 && transType.intValue() != -1) {
                        obj.put("transactionDate", df.format(transactionDate));
                    }
                    obj.put("transactionNumber", transactionNumber);
                    obj.put("personCode", personCode);
                    obj.put("personName", personName);
                    if (transType.intValue() == 0 || transType.intValue() == 1 || transType.intValue() == 4 || transType.intValue() == 6 || transType.intValue() == -1 || transType.intValue() == 7) {
                        obj.put("received", baseUOMQuantity);
                    } else {
                        obj.put("delivered", baseUOMQuantity);
                    }
                    if (isRG23part1) {
                        if (transType.intValue() == 0) {  //Assembly product
                            obj.put("transactionsrno", transactionNumber);
                            obj.put("requisitionno", "");
                            obj.put("invoicenodate", "");
                            obj.put("quantityIssuedforManufacture", "");
                            obj.put("purchasereturenQuantity", "");
                            obj.put("duatyPaid", duatyPaid);
                            obj.put("valueofgoods", stockRate * baseUOMQuantity);
                        } else if (transType.intValue() == 1) {  //GR
                            obj.put("transactionsrno", transactionNumber);
                            obj.put("requisitionno", "");
                            obj.put("invoicenodate", "");
                            obj.put("quantityIssuedforManufacture", "");
                            obj.put("purchasereturenQuantity", "");
                            obj.put("duatyPaid", duatyPaid);
                            obj.put("valueofgoods", stockRate * baseUOMQuantity);
                        } else if (transType.intValue() == 2 || transType.intValue() == 3) { // PR  //DO 
                            obj.put("transactionsrno", "");
                            obj.put("requisitionno", "");
                            obj.put("invoicenodate", transactionNumber + " / " + userdf.format(transactionDate));
                            obj.put("quantityIssuedforManufacture", "");
                            obj.put("purchasereturenQuantity", baseUOMQuantity);
                            obj.put("valueofgoods", "");
                            obj.put("duatyPaid", duatyPaid);
                        } else if (transType.intValue() == 5) {  //Sub product used in AssemblyProduct
                            obj.put("transactionsrno", "");
                            obj.put("requisitionno", transactionNumber);
                            obj.put("invoicenodate", "");
                            obj.put("quantityIssuedforManufacture", baseUOMQuantity);
                            obj.put("purchasereturenQuantity", "");
                            obj.put("valueofgoods", "");
                            obj.put("duatyPaid", duatyPaid);
                        } else if (transType.intValue() == 4) {  //SR
                            obj.put("transactionsrno", transactionNumber);
                            obj.put("requisitionno", "");
                            obj.put("invoicenodate", "");
                            obj.put("quantityIssuedforManufacture", "");
                            obj.put("purchasereturenQuantity", "");
                            obj.put("valueofgoods", "");
                            obj.put("duatyPaid", duatyPaid);
                        }
                        obj.put("closingstock", closingstack);
                    }
                    obj.put("transactiontype", transType.intValue());
                    obj.put("billid", (String) row[15]);
                    obj.put("stockRate", authHandler.roundUnitPrice(stockRate, companyid));
                    if (transType.intValue() == -1) {
                        obj.put("stockRate", "-");
                    }
                    obj.put("value", authHandler.round(amount, companyid));
                    if (isExport) {
                        obj.put("productid", productid);//
                        obj.put("isQtyAndValuationJSON", 0);//
                        obj.put("transType", transType.intValue());
                    }
                    obj.put("balance", authHandler.round(balance, companyid));
                    jArr.put(gridCounter, obj);
                    gridCounter++;
                }
                if (lsize == list.size() - 1 && !isRG23part1) { 
                    if (valuationMethod == ValuationMethod.FIFO || valuationMethod == ValuationMethod.STANDARD || product.isIsSerialForProduct() || product.isIsBatchForProduct()) {
                        for (TransactionBatch pvb : pvbList) {
                            double qty = pvb.getQuantity();
                            if (qty > 0) {
                                if (pvb.isOpening()) {
                                    if (pvb.isOutEntry()) {
                                        ledgeropeningAmt -= pvb.getPrice() * qty;
                                        ledgerOnHandQuantity -= qty;
                                        ledgerFinalValuation -= pvb.getPrice() * qty;
                                        openingQty -= qty;
                                        if (product.getProducttype().getID().equals(Producttype.ASSEMBLY)) {
                                            OpeningAssemblyValuation -= pvb.getPrice() * qty;
                                        }
                                    } else {
                                        ledgeropeningAmt += pvb.getPrice() * qty;
                                        ledgerOnHandQuantity += qty;
                                        ledgerFinalValuation += pvb.getPrice() * qty;
                                        openingQty += qty;
                                        if (product.getProducttype().getID().equals(Producttype.ASSEMBLY)) {
                                            OpeningAssemblyValuation += pvb.getPrice() * qty;
                                        }
                                    }
                                } else {
                                    if (pvb.isOutEntry()) {
                                        ledgerPeriodAmt -= pvb.getPrice() * qty;
                                        ledgerOnHandQuantity -= qty;
                                        periodQty -= qty;
                                        stockOutQty -= qty;
                                        ledgerFinalValuation -= pvb.getPrice() * qty;
                                        if (product.getProducttype().getID().equals(Producttype.ASSEMBLY)) {
                                            OpeningAssemblyValuation -= pvb.getPrice() * qty;
                                        }
                                    } else {
                                        ledgerPeriodAmt += pvb.getPrice() * qty;
                                        ledgerOnHandQuantity += qty;
                                        ledgerFinalValuation += pvb.getPrice() * qty;
                                        periodQty += qty;
                                        stockInQty += qty;
                                        if (product.getProducttype().getID().equals(Producttype.ASSEMBLY)) {
                                            OpeningAssemblyValuation += pvb.getPrice() * qty;
                                        }
                                    }
                                }
                            }
                        }
                        openingAmount += Double.parseDouble(authHandler.formattedAmount(ledgeropeningAmt, companyid));
                        periodAmount += Double.parseDouble(authHandler.formattedQuantity(ledgerPeriodAmt, companyid));
                    } else {
                        for (TransactionBatch pvb : pvbList) {
                            double qty = pvb.getQuantity();
                            if (qty > 0) {
                                if (pvb.isOpening()) {
                                    if (pvb.isOutEntry()) {
                                        openingQty -= qty;
                                        ledgerOnHandQuantity -= qty;
                                        stockOutQty -= qty;
                                        if (product.getProducttype().getID().equals(Producttype.ASSEMBLY)) {
                                            OpeningAssemblyValuation += pvb.getPrice() * qty;
                                        }
                                    } else {
                                        openingQty += qty;
                                        ledgerOnHandQuantity += qty;
                                        if (product.getProducttype().getID().equals(Producttype.ASSEMBLY)) {
                                            OpeningAssemblyValuation += pvb.getPrice() * qty;
                                        }
                                    }
                                } else {
                                    if (pvb.isOutEntry()) {
                                        periodQty -= qty;
                                        ledgerOnHandQuantity -= qty;
                                        if (product.getProducttype().getID().equals(Producttype.ASSEMBLY)) {
                                            OpeningAssemblyValuation += pvb.getPrice() * qty;
                                        }
                                    } else {
                                        periodQty += qty;
                                        ledgerOnHandQuantity += qty;
                                        stockInQty += qty;
                                        if (product.getProducttype().getID().equals(Producttype.ASSEMBLY)) {
                                            OpeningAssemblyValuation += pvb.getPrice() * qty;
                                        }
                                    }
                                }
                            }
                        }
                        periodAmount += periodQty * stockRate;
                        openingAmount += openingQty * stockRate;
                        ledgerFinalValuation = (periodQty * stockRate) + (openingQty * stockRate);
                        ledgeropeningAmt = openingQty * stockRate;
                    }

                    JSONObject FinalRowObj = new JSONObject();// For adding  Quantity & Valuation row to Last Product
                    if (!isInventoryValuation && !isFromStockReport) {                   //prepare this JSON in case of only Stock ledger
                        FinalRowObj.put("pid", pid);
                        FinalRowObj.put("productDesc", "");
                        FinalRowObj.put("transactionNumber", "");
                        FinalRowObj.put("personCode", "");
                        FinalRowObj.put("personName", "");
                        FinalRowObj.put("received", "");
                        FinalRowObj.put("stockRate", "Quantity on Hand: " + authHandler.formattedQuantity(ledgerOnHandQuantity, companyid));
                        FinalRowObj.put("value", "Valuation: " + authHandler.formattedAmount(ledgerFinalValuation, companyid));
                        FinalRowObj.put("ledgerFinalValuation",  authHandler.formattedAmount(ledgerFinalValuation, companyid));
                        FinalRowObj.put("balance", "-");
                        if (isExport) {
                            FinalRowObj.put("productid", productid);//
                            FinalRowObj.put("QtyOnHandJasper", authHandler.formattedQuantity(ledgerOnHandQuantity, companyid));
                            FinalRowObj.put("ValuationJasper", authHandler.formattedAmount(ledgerFinalValuation, companyid));
                            FinalRowObj.put("stockRate", 0);//
                            FinalRowObj.put("value", 0);//
                            FinalRowObj.put("isQtyAndValuationJSON", 1);//
                        }
                        jArr.put(gridCounter + 1, FinalRowObj);
                        gridCounter++;

                        JSONObject OpeningRowObj = new JSONObject();// For adding  Opening valuation row to Every Product.
                        OpeningRowObj.put("pid", pid);
                        OpeningRowObj.put("productDesc", "");
                        OpeningRowObj.put("transactionNumber", "Opening");
                        OpeningRowObj.put("personCode", "");
                        OpeningRowObj.put("personName", "");
                        OpeningRowObj.put("received", openingQty);
                        OpeningRowObj.put("stockRate", "-");
                        OpeningRowObj.put("value", authHandler.formattedAmount(ledgeropeningAmt, companyid));
                        OpeningRowObj.put("balance", "-");
                        if (isExport) {
                            OpeningRowObj.put("productDesc", productDesc);
                            OpeningRowObj.put("productid", productid);//
                            OpeningRowObj.put("isQtyAndValuationJSON", 0);//
                        }
                        jArr.put(openingRecordIndex, OpeningRowObj);
                    } else {
                        FinalRowObj.put("productid", product.getID());
                        FinalRowObj.put("pid", product.getProductid());
                        FinalRowObj.put("productname", product.getName());
                        FinalRowObj.put("productdesc", product.getDescription());
                        FinalRowObj.put("productType", product.getProducttype().getName());
                        FinalRowObj.put("productTypeID", product.getProducttype().getID());
                        if (valuationMethod == ValuationMethod.FIFO) {
                            FinalRowObj.put("fifo", ledgerFinalValuation);
                        } else {
                            FinalRowObj.put("fifo", "NA");
                        }
                        if (valuationMethod == ValuationMethod.STANDARD) {
                            FinalRowObj.put("lifo", ledgerFinalValuation);
                        } else {
                            FinalRowObj.put("lifo", "NA");
                        }
                        KwlReturnObject priceResult = accProductObj.getProductPrice(product.getID(), true, null, "-1", product.getCurrency().getCurrencyID());
                        List<Object> priceList = priceResult.getEntityList();
                        double proPrice = 0;
                        if (priceList != null) {
                            for (Object cogsval : priceList) {
                                proPrice = (cogsval == null ? 0.0 : (Double) cogsval);
                            }
                            crresult = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, proPrice, product.getCurrency().getCurrencyID(), null, 0);
                            proPrice = (Double) crresult.getEntityList().get(0);

                        }
                        FinalRowObj.put("purchasecost", proPrice);
                        FinalRowObj.put("quantity", ledgerOnHandQuantity);
                        FinalRowObj.put("openingstockQty", openingQty);
                        FinalRowObj.put("stockInQty", stockInQty);
                        FinalRowObj.put("stockOutQty", stockOutQty);
                        FinalRowObj.put("evaluationcost", ledgerFinalValuation);
                        totalLedgerOnHandQuantity += ledgerOnHandQuantity;
                        totalOpeningQty += openingQty;
                        totalStockInQty += stockInQty;
                        totalStockOutQty += stockOutQty;
                        totalevaluationcost += ledgerFinalValuation;
                        if (valuationMethod == ValuationMethod.AVERAGE && !product.isIsSerialForProduct()&& !product.isIsBatchForProduct()) {
                            FinalRowObj.put("avgcost", (stockRate != 0 && ledgerOnHandQuantity != 0) ? stockRate : "N.A");
                            FinalRowObj.put("valuation", ledgerFinalValuation);
                        } else if (valuationMethod == ValuationMethod.AVERAGE && (product.isIsSerialForProduct() || product.isIsBatchForProduct())) {//By Dipak P.
                            FinalRowObj.put("valuation", ledgerFinalValuation);
                        } else {
                            FinalRowObj.put("valuation", "NA");
                        }
                        jArr.put(FinalRowObj);
                    }
                }
                lsize++;
                valuation = 0;
                onhand = 0;

            } catch (SessionExpiredException ex) {
                Logger.getLogger(accProductController.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return jArr;
    }

    public boolean isOpeingOrPeriodTransaction(Date transactionDate, Date StartDate, int transType) throws SessionExpiredException, ParseException {
        boolean isOpeningtransaction = false;
        try {
            String transDate = authHandler.getDateOnlyFormat().format(transactionDate);
            transactionDate = authHandler.getDateOnlyFormat().parse(transDate);
            if ((transactionDate.before(StartDate) || transactionDate.equals(StartDate)) && transType == 0) {
                isOpeningtransaction = true;
            } else if (transactionDate.before(StartDate) && transType != 0) {
                isOpeningtransaction = true;
            } else if (transactionDate.after(StartDate)) {
                isOpeningtransaction = false;
            } else {
                isOpeningtransaction = false;
            }
        } catch (SessionExpiredException ex) {
            Logger.getLogger(accProductControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ParseException ex) {
            Logger.getLogger(accProductControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
        }
        return isOpeningtransaction;
    }

    public ModelAndView exportStockAgeing(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        String view = "jsonView_ex";
        try {
            String companyid = sessionHandlerImpl.getCompanyid(request);                        
            
            /**
             * if MRP is Activated, isActivateMRPModule flag will be true to get all MRP related transaction.
             * otherwise isActivateMRPModule flag will be false which will not return MRP related transaction.
             */
            
            boolean isActivateMRPModule = false;
            Map<String, Object> filterMap = new HashMap();
            filterMap.put(Constants.Acc_id, companyid);
            Object extraPrefActivateMRP = kwlCommonTablesDAOObj.getRequestedObjectFields(ExtraCompanyPreferences.class, new String[]{"activateMRPModule"}, filterMap);
            if (extraPrefActivateMRP != null) {
                isActivateMRPModule = (Boolean) extraPrefActivateMRP;
            }
            
            HashMap<String, Object> requestParams = new HashMap<String, Object>();
            requestParams.put(Constants.df, authHandler.getDateOnlyFormat(request));           
//            requestParams.put("start", request.getParameter("start"));
//            requestParams.put("limit", request.getParameter("limit"));
            requestParams.put("ss", request.getParameter("ss"));
            requestParams.put(Constants.REQ_startdate, request.getParameter("startdate"));
            requestParams.put(Constants.REQ_enddate, request.getParameter("asofdate"));
            requestParams.put("companyid", companyid);
            if (!StringUtil.isNullOrEmpty(request.getParameter("stockAgeing"))) {
                requestParams.put("stockAgeing", Boolean.parseBoolean(request.getParameter("stockAgeing")));
            }
            if (!StringUtil.isNullOrEmpty(request.getParameter("valuationMethod"))) {
                requestParams.put("valuationMethod", Integer.parseInt(request.getParameter("valuationMethod")));
            }
            requestParams.put("duration", request.getParameter("duration"));
            requestParams.put("isSummary", request.getParameter("isSummary"));
            requestParams.put(Constants.isActivateMRPModule, isActivateMRPModule);
            JSONArray jsonArr = new JSONArray();
            jsonArr = AccProductService.getInventoryValuationData(requestParams);
            jobj.put("data", jsonArr);
            String fileType = request.getParameter("filetype");
            if (StringUtil.equal(fileType, "print")) {
                String GenerateDate = authHandler.getDateFormatter(request).format(new Date());
                jobj.put("GenerateDate", GenerateDate);
                view = "jsonView-empty";
            }
            exportDaoObj.processRequest(request, response, jobj);
            jobj.put("success", true);
        } catch (SessionExpiredException ex) {
            Logger.getLogger(accProductControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            Logger.getLogger(accProductControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
        }
        return new ModelAndView(view, "model", jobj.toString());
    }
    
    public ModelAndView exportStockAgeingJapser(HttpServletRequest request, HttpServletResponse response) {
        Map<String, Object> financeDetailsMap = new HashMap<String, Object>();
        String view = "stockAgeing";
        FinanceDetails financeDetails = new FinanceDetails();
        ArrayList<FinanceDetails> financeDetailsList = new ArrayList<FinanceDetails>();
        try {
            boolean isLandscape = request.getParameter("isLandscape") != null ? Boolean.parseBoolean(request.getParameter("isLandscape")) : false;
            String companyid = sessionHandlerImpl.getCompanyid(request);
            KwlReturnObject cmpresult = accountingHandlerDAOobj.getObject(Company.class.getName(), companyid);
            Company company = (Company) cmpresult.getEntityList().get(0);
            financeDetails.setName(company.getCompanyName());
            financeDetails.setEmail(company.getEmailID() != null ? company.getEmailID() : "");
            financeDetails.setFax(company.getFaxNumber() != null ? company.getFaxNumber() : "");
            financeDetails.setPhone(company.getPhoneNumber() != null ? company.getPhoneNumber() : "");
            financeDetails.setCurrencyinword(company.getCurrency().getName() != null ? company.getCurrency().getName() : "");
            SimpleDateFormat df = new SimpleDateFormat("dd/MM/yyyy");
            Calendar c = Calendar.getInstance();
//            String endDate = df.format(authHandler.getDateFormatter(request).parse(request.getParameter("enddate")));
//            c.setTime(df.parse(endDate)); // number of days to substract
////            c.add(Calendar.DATE, -1);
//            endDate = df.format(c.getTime());
//            String startDate = df.format(authHandler.getDateFormatter(request).parse(request.getParameter("startdate")));
//            String date = "From Date : " + startDate + ",To Date : " + endDate;
            
            Date date = new Date();
            financeDetails.setDateRange(df.format(date));

            KwlReturnObject result = accountingHandlerDAOobj.getObject(CompanyAccountPreferences.class.getName(), sessionHandlerImpl.getCompanyid(request));
            CompanyAccountPreferences companyAccountPreferences = (CompanyAccountPreferences) result.getEntityList().get(0);
            String fiscalstart=df.format(companyAccountPreferences.getFinancialYearFrom());
            Calendar c1 = Calendar.getInstance();
            c1.setTime(df.parse(fiscalstart));
            c1.add(Calendar.YEAR, 1); // number of years to add
            String fiscalend = df.format(c.getTime());
            String accPeriod= "Accounting Period : "+fiscalstart+" - "+fiscalend;
            financeDetails.setAccountigperiod(accPeriod);   //to calculate financial year. mayur b
                                    
            
            /**
             * if MRP is Activated, isActivateMRPModule flag will be true to get all MRP related transaction.
             * otherwise isActivateMRPModule flag will be false which will not return MRP related transaction.
             */
            
            boolean isActivateMRPModule = false;
            Map<String, Object> filterMap = new HashMap();
            filterMap.put(Constants.Acc_id, companyid);
            Object extraPrefActivateMRP = kwlCommonTablesDAOObj.getRequestedObjectFields(ExtraCompanyPreferences.class, new String[]{"activateMRPModule"}, filterMap);
            if (extraPrefActivateMRP != null) {
                isActivateMRPModule = (Boolean) extraPrefActivateMRP;
            }
            
           HashMap<String, Object> requestParams = new HashMap<String, Object>();
            requestParams.put(Constants.df, authHandler.getDateOnlyFormat(request));
//            requestParams.put("start", request.getParameter("start"));
//            requestParams.put("limit", request.getParameter("limit"));
            requestParams.put("ss", request.getParameter("ss"));
//            requestParams.put(Constants.REQ_startdate, request.getParameter("startdate"));
//            requestParams.put(Constants.REQ_enddate, request.getParameter("enddate"));
            requestParams.put("companyid", sessionHandlerImpl.getCompanyid(request));
            if (!StringUtil.isNullOrEmpty(request.getParameter("isStockAgeing"))) {
                requestParams.put("stockAgeing", Boolean.parseBoolean(request.getParameter("isStockAgeing")));
            }
            if (!StringUtil.isNullOrEmpty(request.getParameter("valuationMethod"))) {
                requestParams.put("valuationMethod", Integer.parseInt(request.getParameter("valuationMethod")));
            }
            requestParams.put(Constants.isActivateMRPModule, isActivateMRPModule);
//            
//            KwlReturnObject onhandQuantityResult = accProductObj.getOnhandQuantityOfProduct(requestParams);
//            List list = onhandQuantityResult.getEntityList();
//            
            financeDetailsMap = AccProductService.getDataForStockAgeingReport(requestParams);
            financeDetailsList.add(financeDetails);
            financeDetailsMap.put("format", "pdf");
            
            InputStream inputStream = null;
            InputStream inputStreamSubReport = null;
            if(isLandscape){
                inputStream = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/StockAgeingLandscape.jrxml");
                inputStreamSubReport = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/StockAgeingSubReportLandscape.jrxml");
            }else{
                inputStream = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/StockAgeing.jrxml");
                if (storageHandlerImpl.GetSATSCompanyId().contains(companyid)) {
                    inputStreamSubReport = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/SATSStockAgeingSubReport.jrxml");
                } else {
                    inputStreamSubReport = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/StockAgeingSubReport.jrxml");
                }
            }

            JasperDesign jasperDesign = JRXmlLoader.load(inputStream);
            JasperReport jasperReport = JasperCompileManager.compileReport(jasperDesign);
            JasperDesign jasperDesignSubReport = JRXmlLoader.load(inputStreamSubReport);
            JasperReport jasperReportSubReport = JasperCompileManager.compileReport(jasperDesignSubReport);

            financeDetailsMap.put("StockAgeingSubReport", jasperReportSubReport);
            JRBeanCollectionDataSource beanColDataSource = new JRBeanCollectionDataSource(financeDetailsList);
            JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, financeDetailsMap, beanColDataSource);
            JRPdfExporter exp = new JRPdfExporter();

            exp.setParameter(JRPdfExporterParameter.JASPER_PRINT, jasperPrint);
            exp.setParameter(JRPdfExporterParameter.OUTPUT_STREAM, response.getOutputStream());
            response.setHeader("Content-Disposition", "attachment;filename=" + "StockAgeing_v1.pdf");
            exp.exportReport();
            
        } catch (Exception ex) {
            Logger.getLogger(accProductControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
        }
        return new ModelAndView("", financeDetailsMap);
    }
     
   public Map<String, Object> getStockAgeingJasper(HttpServletRequest request, List list) throws JSONException, ServiceException {
        Map<String, Object> financeDetailsMap = new HashMap<String, Object>();
        ArrayList<StockAgeing> stockAgeingList = new ArrayList<StockAgeing>();
        JSONArray jArr = new JSONArray();
        try {
            int duration = 45;
            Date curDate = new Date();
            
            Calendar cal1 = Calendar.getInstance();
            Calendar cal2 = Calendar.getInstance();
            cal1.setTime(curDate);
            cal2.setTime(curDate);
            cal1.add(Calendar.DAY_OF_YEAR, -duration);
            cal2.add(Calendar.DAY_OF_YEAR, -(duration * 2));
            
            boolean isLifo = Boolean.parseBoolean(request.getParameter("isLifo"));
            String companyid = sessionHandlerImpl.getCompanyid(request);
            String currencyid = sessionHandlerImpl.getCurrencyID(request);
            DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
            DateFormat datef = authHandler.getDateOnlyFormat();
            HashMap<String, Object> currencyParams = AccountingManager.getGlobalParams(request);
            
            KwlReturnObject cmpresult = accountingHandlerDAOobj.getObject(Company.class.getName(), companyid);
            Company company = (Company) cmpresult.getEntityList().get(0);
            
            Iterator itr = list.iterator();
            while (itr.hasNext()) {
                
                Object[] row = (Object[]) itr.next();
                String productid = (String) row[0];
                double onhand =  (row[1] == null)? 0 : (Double) row[1];
                KwlReturnObject kwlReturnObject = accProductObj.getObject(Product.class.getName(), productid);
                Product product = (Product) kwlReturnObject.getEntityList().get(0);
                
                HashMap<String, Object> requestParams = new HashMap<String, Object>();
                requestParams.put("companyid", companyid);
                requestParams.put("productid", productid);
                requestParams.put("enddate", curDate);
    
                double lifo = 0;
                List<Date> date = new ArrayList();
                List<String> transactionNumber = new ArrayList();
                List<Double> qty = new ArrayList();
                List<Double> baseuomrate = new ArrayList(); // Conversion Factor
                List<Double> rate = new ArrayList();
                List<String> currency = new ArrayList();
                List<String> transactionType = new ArrayList();
                
                KwlReturnObject rateandQtyResult = accProductObj.getRateandQtyOfOpeningGRSR(requestParams); // getting transaction information of product opening, GR and SR
                List rateandQtyList = rateandQtyResult.getEntityList();
                Iterator it = rateandQtyList.iterator();
                while (it.hasNext()) {
                    Object[] Objrow = (Object[]) it.next();
                    if(Objrow[3] != null) {
                        date.add((Date) Objrow[0]);
                        transactionNumber.add((String) Objrow[1]);
                        qty.add((Double) Objrow[2]);
                        baseuomrate.add((Double) Objrow[3]);
                        rate.add((Double) Objrow[4]);
                        if (StringUtil.isNullOrEmpty(Objrow[5].toString())) {
                            currency.add(currencyid);
                        } else {
                            currency.add((String) Objrow[5]);
                        }
                        transactionType.add((String) Objrow[6]);
                    }
                }
                
                double totalQty = onhand;
                // For LIFO Valuation
                if (onhand > 0 && isLifo) {
                    for (int i = 0; i < qty.size(); i++) {
                        if (totalQty >= qty.get(i) && totalQty != 0) {
                            StockAgeing stockAgeing= new StockAgeing();
                            
                            double tempRate = rate.get(i);
                            Date transactionDate = date.get(i);
                            
                            String tdate=datef.format(transactionDate);
                            try {
                                transactionDate=datef.parse(tdate);
                            } catch (ParseException ex) {
                                transactionDate = date.get(i);
                            }
                            
                            double baseuomQty = qty.get(i) * baseuomrate.get(i);
                            
                            KwlReturnObject crresult = accCurrencyDAOobj.getCurrencyToBaseAmount(currencyParams, tempRate, currency.get(i), transactionDate, 0);
                            tempRate = (Double) crresult.getEntityList().get(0);
                            
                            lifo = (baseuomQty * tempRate);
                            stockAgeing.setHeader1("Below - "+duration);
                            stockAgeing.setHeader2(duration+1+" - "+duration*2);
                            stockAgeing.setHeader3("Over - "+duration*2);
                            stockAgeing.setProdcode(product.getProductid()!=null? product.getProductid():"");
                            stockAgeing.setProdid(product.getID()!=null? product.getID():"");
                            stockAgeing.setProdname(product.getDescription()!=null? product.getDescription():"");
                            stockAgeing.setUnit((product.getUnitOfMeasure() == null)? "" : product.getUnitOfMeasure().getNameEmptyforNA());
                            stockAgeing.setDocumentno(transactionNumber.get(i)!=null?transactionNumber.get(i):"");
                            //To format date in User Date Format
                            stockAgeing.setDate(transactionDate!=null ?authHandler.getUserDateFormatterWithoutTimeZone(request).format(transactionDate):"");
                            stockAgeing.setDocumentname(transactionType.get(i)!=null?transactionType.get(i):"");
//                            if(currency.get(i)!=null){
//                                KwlReturnObject curresult = accountingHandlerDAOobj.getObject(KWLCurrency.class.getName(), currency.get(i));
//                                KWLCurrency curr = (KWLCurrency) curresult.getEntityList().get(0);
//                                stockAgeing.setCurrency(curr.getCurrencyCode());
//                            }
                            stockAgeing.setCurrency(company.getCurrency().getCurrencyCode());
                            
                            Date cdate1=cal1.getTime();
                            String caldate1=datef.format(cdate1);
                            try {
                                cdate1=datef.parse(caldate1);
                            } catch (ParseException ex) {
                                cdate1 = cal1.getTime();
                            }
                            
                            Date cdate2=cal2.getTime();
                            String caldate2=datef.format(cdate2);
                            try {
                                cdate2=datef.parse(caldate2);
                            } catch (ParseException ex) {
                                cdate2 = cal2.getTime();
                            }
                            
                            if (cdate1.before(transactionDate) || cdate1.equals(transactionDate)) {
                                 stockAgeing.setQuantity1(baseuomQty);
                                 stockAgeing.setAmount1(authHandler.round(lifo, companyid));
                            }else if ((cdate2.before(transactionDate) || cdate2.equals(transactionDate)) && cdate1.after(transactionDate)) {
                                 stockAgeing.setQuantity2( baseuomQty);
                                 stockAgeing.setAmount2(authHandler.round(lifo, companyid));
                            }else {
                                 stockAgeing.setQuantity3(baseuomQty);
                                 stockAgeing.setAmount3(authHandler.round(lifo, companyid));
                            }
                            stockAgeingList.add(stockAgeing);
                            totalQty = totalQty - baseuomQty;
                            
                        } else if (totalQty < qty.get(i) && totalQty != 0) {
                            StockAgeing stockAgeing= new StockAgeing();
                            
                            double tempRate = rate.get(i);
                            Date transactionDate = date.get(i);
                            String tdate=datef.format(transactionDate);
                            try {
                                transactionDate=datef.parse(tdate);
                            } catch (ParseException ex) {
                                transactionDate = date.get(i);
                            }                            
                            KwlReturnObject crresult = accCurrencyDAOobj.getCurrencyToBaseAmount(currencyParams, tempRate, currency.get(i), transactionDate, 0);
                            tempRate = (Double) crresult.getEntityList().get(0);
                            
                            lifo = totalQty * tempRate;
                            stockAgeing.setHeader1("Below - "+duration);
                            stockAgeing.setHeader2(duration+1+" - "+duration*2);
                            stockAgeing.setHeader3("Over - "+duration*2);
                            stockAgeing.setProdcode(product.getProductid()!=null? product.getProductid():"");
                            stockAgeing.setProdid(product.getID()!=null? product.getID():"");
                            stockAgeing.setProdname(product.getDescription()!=null? product.getDescription():"");
                            stockAgeing.setUnit((product.getUnitOfMeasure() == null)? "" : product.getUnitOfMeasure().getNameEmptyforNA());
                            stockAgeing.setDocumentno(transactionNumber.get(i)!=null?transactionNumber.get(i):"");
                            //To format date in User Date Format
                            stockAgeing.setDate(transactionDate!=null ?authHandler.getUserDateFormatterWithoutTimeZone(request).format(transactionDate):"");
                            stockAgeing.setDocumentname(transactionType.get(i)!=null?transactionType.get(i):"");
//                            if(currency.get(i)!=null){
//                                KwlReturnObject curresult = accountingHandlerDAOobj.getObject(KWLCurrency.class.getName(), currency.get(i));
//                                KWLCurrency curr = (KWLCurrency) curresult.getEntityList().get(0);
//                                stockAgeing.setCurrency(curr.getCurrencyCode());
//                            }
                            stockAgeing.setCurrency(company.getCurrency().getCurrencyCode());
                            
                            Date cdate1=cal1.getTime();
                            String caldate1=datef.format(cdate1);
                            try {
                                cdate1=datef.parse(caldate1);
                            } catch (ParseException ex) {
                                cdate1 = cal1.getTime();
                            }
                            
                            Date cdate2=cal2.getTime();
                            String caldate2=datef.format(cdate2);
                            try {
                                cdate2=datef.parse(caldate2);
                            } catch (ParseException ex) {
                                cdate2 = cal2.getTime();
                            }
                            
                            if (cdate1.before(transactionDate) || cdate1.equals(transactionDate)) {
                                stockAgeing.setQuantity1(totalQty);
                                stockAgeing.setAmount1(authHandler.round(lifo, companyid));
                            } else if ((cdate2.before(transactionDate) || cdate2.equals(transactionDate)) && cdate1.after(transactionDate)) {
                                stockAgeing.setQuantity2(totalQty);
                                stockAgeing.setAmount2(authHandler.round(lifo, companyid));
                            } else {
                                stockAgeing.setQuantity3(totalQty);
                                stockAgeing.setAmount3(authHandler.round(lifo, companyid));
                            }
                            stockAgeingList.add(stockAgeing);
                            totalQty = 0;
                            
                        }
                    }
                }
                
                // For FIFO Valuation
                if (onhand > 0 && !isLifo) {
                    for (int i = qty.size(); i > 0; i--) {
                        if (totalQty >= qty.get(i - 1) && totalQty != 0) {
                            StockAgeing stockAgeing= new StockAgeing();
                            JSONObject obj = new JSONObject();
                            double tempRate = rate.get(i-1) != null? rate.get(i-1) : 0;
                            Date transactionDate = date.get(i-1);
                            
                            String tdate=datef.format(transactionDate);
                            try {
                                transactionDate=datef.parse(tdate);
                            } catch (ParseException ex) {
                                transactionDate = date.get(i-1);
                            } 
                            
                            double baseuomQty = qty.get(i-1) * baseuomrate.get(i-1);
                            
                            KwlReturnObject crresult = accCurrencyDAOobj.getCurrencyToBaseAmount(currencyParams, tempRate, currency.get(i-1), transactionDate, 0);
                            tempRate = (Double) crresult.getEntityList().get(0);
                            
                            lifo = (baseuomQty * tempRate);
                            stockAgeing.setHeader1("Below - "+duration);
                            stockAgeing.setHeader2(duration+1+" - "+duration*2);
                            stockAgeing.setHeader3("Over - "+duration*2);
                            stockAgeing.setProdcode(product.getProductid()!=null? product.getProductid():"");
                            stockAgeing.setProdid(product.getID()!=null? product.getID():"");
                            stockAgeing.setProdname(product.getDescription()!=null? product.getDescription():"");
                            stockAgeing.setUnit((product.getUnitOfMeasure() == null)? "" : product.getUnitOfMeasure().getNameEmptyforNA());
                            stockAgeing.setDocumentno(transactionNumber.get(i-1)!=null?transactionNumber.get(i-1):"");
                            //To format date in User Date Format
                            stockAgeing.setDate(transactionDate!=null?authHandler.getUserDateFormatterWithoutTimeZone(request).format(transactionDate):"");
                            stockAgeing.setDocumentname(transactionType.get(i-1)!=null?transactionType.get(i-1):"");
//                            if(currency.get(i-1)!=null){
//                                KwlReturnObject curresult = accountingHandlerDAOobj.getObject(KWLCurrency.class.getName(), currency.get(i-1));
//                                KWLCurrency curr = (KWLCurrency) curresult.getEntityList().get(0);
//                                stockAgeing.setCurrency(curr.getCurrencyCode());
//                            }
                            stockAgeing.setCurrency(company.getCurrency().getCurrencyCode());
                            
                            Date cdate1=cal1.getTime();
                            String caldate1=datef.format(cdate1);
                            try {
                                cdate1=datef.parse(caldate1);
                            } catch (ParseException ex) {
                                cdate1 = cal1.getTime();
                            }
                            
                            Date cdate2=cal2.getTime();
                            String caldate2=datef.format(cdate2);
                            try {
                                cdate2=datef.parse(caldate2);
                            } catch (ParseException ex) {
                                cdate2 = cal2.getTime();
                            }
                            
                            if (cdate1.before(transactionDate) || cdate1.equals(transactionDate)) {
                                stockAgeing.setQuantity1(baseuomQty);
                                stockAgeing.setAmount1(authHandler.round(lifo, companyid));
                            }else if ((cdate2.before(transactionDate) || cdate2.equals(transactionDate)) && cdate1.after(transactionDate)) {
                                stockAgeing.setQuantity2(baseuomQty);
                                stockAgeing.setAmount2(authHandler.round(lifo, companyid));
                            }else {
                                stockAgeing.setQuantity3(baseuomQty);
                                stockAgeing.setAmount3(authHandler.round(lifo, companyid));
                            }
                            stockAgeingList.add(stockAgeing);
                            totalQty = totalQty - baseuomQty;
                            jArr.put(obj);
                        } else if (totalQty < qty.get(i - 1) && totalQty != 0) {
                            StockAgeing stockAgeing= new StockAgeing();
                            JSONObject obj = new JSONObject();
                            //Added Null check
                            double tempRate = rate.get(i-1) != null? rate.get(i-1) : 0;
                            Date transactionDate = date.get(i-1);
                            String tdate=datef.format(transactionDate);
                            try {
                                transactionDate=datef.parse(tdate);
                            } catch (ParseException ex) {
                                transactionDate = date.get(i-1);
                            }
                            KwlReturnObject crresult = accCurrencyDAOobj.getCurrencyToBaseAmount(currencyParams, tempRate, currency.get(i-1), transactionDate, 0);
                            tempRate = (Double) crresult.getEntityList().get(0);
                            
                            lifo = totalQty * tempRate;
                            stockAgeing.setHeader1("Below - "+duration);
                            stockAgeing.setHeader2(duration+1+" - "+duration*2);
                            stockAgeing.setHeader3("Over - "+duration*2);
                            stockAgeing.setProdcode(product.getProductid()!=null? product.getProductid():"");
                            stockAgeing.setProdid(product.getID()!=null? product.getID():"");
                            stockAgeing.setProdname(product.getDescription()!=null? product.getDescription():"");
                            stockAgeing.setUnit((product.getUnitOfMeasure() == null)? "" : product.getUnitOfMeasure().getNameEmptyforNA());
                            stockAgeing.setDocumentno(transactionNumber.get(i-1)!=null?transactionNumber.get(i-1):"");
                            //To format date in User Date Format
                            stockAgeing.setDate(transactionDate!=null?authHandler.getUserDateFormatterWithoutTimeZone(request).format(transactionDate):"");
                            stockAgeing.setDocumentname(transactionType.get(i-1)!=null?transactionType.get(i-1):"");
//                            if(currency.get(i-1)!=null){
//                                KwlReturnObject curresult = accountingHandlerDAOobj.getObject(KWLCurrency.class.getName(), currency.get(i-1));
//                                KWLCurrency curr = (KWLCurrency) curresult.getEntityList().get(0);
//                                stockAgeing.setCurrency(curr.getCurrencyCode());
//                            }
                            stockAgeing.setCurrency(company.getCurrency().getCurrencyCode());
                            
                            Date cdate1=cal1.getTime();
                            String caldate1=datef.format(cdate1);
                            try {
                                cdate1=datef.parse(caldate1);
                            } catch (ParseException ex) {
                                cdate1 = cal1.getTime();
                            }
                            
                            Date cdate2=cal2.getTime();
                            String caldate2=datef.format(cdate2);
                            try {
                                cdate2=datef.parse(caldate2);
                            } catch (ParseException ex) {
                                cdate2 = cal2.getTime();
                            }
                            
                            if (cdate1.before(transactionDate) || cdate1.equals(transactionDate)) {
                                stockAgeing.setQuantity1(totalQty);
                                stockAgeing.setAmount1(authHandler.round(lifo, companyid));
                            } else if ((cdate2.before(transactionDate) || cdate2.equals(transactionDate)) && cdate1.after(transactionDate)) {
                                stockAgeing.setQuantity2(totalQty);
                                stockAgeing.setAmount2(authHandler.round(lifo, companyid));
                            } else {
                                stockAgeing.setQuantity3(totalQty);
                                stockAgeing.setAmount3(authHandler.round(lifo, companyid));
                            }
                            
                            totalQty = 0;
                            stockAgeingList.add(stockAgeing);
                        }
                    }
                }
                
            }
            
        } catch (SessionExpiredException ex) {
            Logger.getLogger(accProductControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
        }
        financeDetailsMap.put("StockAgeingSubReportData", new JRBeanCollectionDataSource(stockAgeingList));
        return financeDetailsMap;
}
    
    public ModelAndView getStockAgeing(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        JSONArray DataJArr = new JSONArray();
        boolean issuccess = false;
        String msg = "";
        try {
            HashMap<String, Object> requestParams = new HashMap<String, Object>();
            requestParams.put(Constants.df, authHandler.getDateOnlyFormat(request));
            requestParams.put("start", request.getParameter("start"));
            requestParams.put("limit", request.getParameter("limit"));
            String start = request.getParameter("start");
            String limit = request.getParameter("limit");
            requestParams.put("ss", request.getParameter("ss"));
            requestParams.put(Constants.REQ_startdate, request.getParameter("startdate"));
            requestParams.put(Constants.REQ_enddate, request.getParameter("enddate"));
            requestParams.put("asofdate", request.getParameter("asofdate"));
            requestParams.put("companyid", sessionHandlerImpl.getCompanyid(request));
            
            KwlReturnObject onhandQuantityResult = accProductObj.getOnhandQuantityOfProduct(requestParams);
            List list = onhandQuantityResult.getEntityList();
            DataJArr = getStockAgeingJson(request, list);
            JSONArray pagedJson = DataJArr;
            if(!StringUtil.isNullOrEmpty(start) && !StringUtil.isNullOrEmpty(limit)){
                pagedJson = StringUtil.getPagedJSON(pagedJson, Integer.parseInt(start), Integer.parseInt(limit));
            }
            int count = DataJArr.length();
            
            jobj.put("data", pagedJson);
            jobj.put("totalCount", count);
            issuccess = true;
        } catch (SessionExpiredException ex) {
            msg = ex.getMessage();
            Logger.getLogger(accProductController.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ServiceException ex) {
            msg = ex.getMessage();
            Logger.getLogger(accProductController.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            msg = "" + ex.getMessage();
            Logger.getLogger(accProductController.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                jobj.put("success", issuccess);
                jobj.put("msg", msg);
            } catch (JSONException ex) {
                Logger.getLogger(accProductController.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return new ModelAndView("jsonView", "model", jobj.toString());
    }
    
    public JSONArray getStockAgeingJson(HttpServletRequest request, List list) throws JSONException, ServiceException {
        JSONArray jArr = new JSONArray();
        try {
            KwlReturnObject extraprefresult = accountingHandlerDAOobj.getObject(ExtraCompanyPreferences.class.getName(), sessionHandlerImpl.getCompanyid(request));
            ExtraCompanyPreferences extraCompanyPreferences = extraprefresult != null ? (ExtraCompanyPreferences) extraprefresult.getEntityList().get(0) : null;
            
            int duration = 45;
            Date curDate = new Date();
            
            Calendar cal1 = Calendar.getInstance();
            Calendar cal2 = Calendar.getInstance();
            cal1.setTime(curDate);
            cal2.setTime(curDate);
            cal1.add(Calendar.DAY_OF_YEAR, -duration);
            cal2.add(Calendar.DAY_OF_YEAR, -(duration * 2));
            
            boolean isLifo = Boolean.parseBoolean(request.getParameter("isLifo"));
            String companyid = sessionHandlerImpl.getCompanyid(request);
            String currencyid = sessionHandlerImpl.getCurrencyID(request);
            DateFormat df = authHandler.getDateOnlyFormat(request);
            HashMap<String, Object> currencyParams = AccountingManager.getGlobalParams(request);
            
            
            Iterator itr = list.iterator();
            while (itr.hasNext()) {
                Object[] row = (Object[]) itr.next();
                String productid = (String) row[0];
                double onhand =  (row[1] == null)? 0 : (Double) row[1];
                
                
                
                
                double totalQty = onhand;
                // For LIFO Valuation
                if(onhand > 0){
                    KwlReturnObject kwlReturnObject = accProductObj.getObject(Product.class.getName(), productid);
                Product product = (Product) kwlReturnObject.getEntityList().get(0);
                
                HashMap<String, Object> requestParams = new HashMap<String, Object>();
                requestParams.put("companyid", companyid);
                requestParams.put("productid", productid);
                requestParams.put("enddate", curDate);
                requestParams.put("asofdate", request.getParameter("asofdate"));
                
                double lifo = 0;
                List<Date> date = new ArrayList();
                List<String> transactionNumber = new ArrayList();
                List<Double> qty = new ArrayList();
                List<Double> baseuomrate = new ArrayList(); // Conversion Factor
                List<Double> rate = new ArrayList();
                List<String> currency = new ArrayList();
                List<String> transactionType = new ArrayList();
                    KwlReturnObject rateandQtyResult = accProductObj.getRateandQtyOfOpeningGRSR(requestParams); // getting transaction information of product opening, GR and SR
                List rateandQtyList = rateandQtyResult.getEntityList();
                Iterator it = rateandQtyList.iterator();
                while (it.hasNext()) {
                    Object[] Objrow = (Object[]) it.next();
                    if(Objrow[3] != null) {
                        date.add((Date) Objrow[0]);
                        transactionNumber.add((String) Objrow[1]);
                        qty.add((Double) Objrow[2]);
                        baseuomrate.add((Double) Objrow[3]);
                        rate.add((Double) Objrow[4]);
                        if (StringUtil.isNullOrEmpty(Objrow[5].toString())) {
                            currency.add(currencyid);
                        } else {
                            currency.add((String) Objrow[5]);
                        }
                        transactionType.add((String) Objrow[6]);
                    }
                }
                if ( isLifo) {
                    for (int i = 0; i < qty.size(); i++) {
                        if (totalQty >= qty.get(i) && totalQty != 0) {
                            JSONObject obj = new JSONObject();
                            double tempRate = rate.get(i) != null? rate.get(i) : 0;
                            Date transactionDate = date.get(i);
                            String tdate=df.format(transactionDate);
                            try {
                                transactionDate=df.parse(tdate);
                            } catch (ParseException ex) {
                                transactionDate = date.get(i);
                            }
                            double baseuomQty = qty.get(i) * baseuomrate.get(i);
                            
                            KwlReturnObject crresult = accCurrencyDAOobj.getCurrencyToBaseAmount(currencyParams, tempRate, currency.get(i), transactionDate, 0);
                            tempRate = (Double) crresult.getEntityList().get(0);
                            
//                            if (extraCompanyPreferences.getUomSchemaType() == 0) { // for uom schema
//                                lifo = (baseuomQty * tempRate);
//                            } else { // for packaging schema
                                lifo = (qty.get(i) * tempRate);
//                            }
                            
                            obj.put("pid", product.getProductid());
                            obj.put("productname", product.getName());
                            obj.put("productDesc", product.getDescription());
                            obj.put("unit", (product.getUnitOfMeasure() == null)? "" : product.getUnitOfMeasure().getNameEmptyforNA());
                            obj.put("transactionNumber", transactionNumber.get(i));
                            obj.put("transactionDate", df.format(transactionDate));
                            obj.put("transactionType", transactionType.get(i));
                            
                            Date cdate1=cal1.getTime();
                            String caldate1=df.format(cdate1);
                            try {
                                cdate1=df.parse(caldate1);
                            } catch (ParseException ex) {
                                cdate1 = cal1.getTime();
                            }
                            
                            Date cdate2=cal2.getTime();
                            String caldate2=df.format(cdate2);
                            try {
                                cdate2=df.parse(caldate2);
                            } catch (ParseException ex) {
                                cdate2 = cal2.getTime();
                            }
                            
                            if (cdate1.before(transactionDate) || cdate1.equals(transactionDate)) {
                                obj.put("quantity1", authHandler.formattedQuantity(baseuomQty, companyid));
                                obj.put("amount1", authHandler.round(lifo, companyid));
                            }else if ((cdate2.before(transactionDate) || cdate2.equals(transactionDate)) && cdate1.after(transactionDate)) {
                                obj.put("quantity2", authHandler.formattedQuantity(baseuomQty, companyid));
                                obj.put("amount2", authHandler.round(lifo, companyid));
                            }else {
                                obj.put("quantity3", authHandler.formattedQuantity(baseuomQty, companyid));
                                obj.put("amount3", authHandler.round(lifo, companyid));
                            }
                            
                            totalQty = totalQty - baseuomQty;
                            jArr.put(obj);
                        } else if (totalQty < qty.get(i) && totalQty != 0) {
                            JSONObject obj = new JSONObject();
                            double tempRate = rate.get(i) != null? rate.get(i) : 0;
                            Date transactionDate = date.get(i);
                            String tdate=df.format(transactionDate);
                            try {
                                transactionDate=df.parse(tdate);
                            } catch (ParseException ex) {
                                transactionDate = date.get(i);
                            }                            
                            KwlReturnObject crresult = accCurrencyDAOobj.getCurrencyToBaseAmount(currencyParams, tempRate, currency.get(i), transactionDate, 0);
                            tempRate = (Double) crresult.getEntityList().get(0);
                            
                            lifo = totalQty * tempRate;
                            obj.put("pid", product.getProductid());
                            obj.put("productname", product.getName());
                            obj.put("productDesc", product.getDescription());
                            obj.put("unit", (product.getUnitOfMeasure() == null)? "" : product.getUnitOfMeasure().getNameEmptyforNA());
                            obj.put("transactionNumber", transactionNumber.get(i));
                            obj.put("transactionDate", df.format(transactionDate));
                            obj.put("transactionType", transactionType.get(i));
                            
                            Date cdate1=cal1.getTime();
                            String caldate1=df.format(cdate1);
                            try {
                                cdate1=df.parse(caldate1);
                            } catch (ParseException ex) {
                                cdate1 = cal1.getTime();
                            }
                            
                            Date cdate2=cal2.getTime();
                            String caldate2=df.format(cdate2);
                            try {
                                cdate2=df.parse(caldate2);
                            } catch (ParseException ex) {
                                cdate2 = cal2.getTime();
                            }
                            
                            if (cdate1.before(transactionDate) || cdate1.equals(transactionDate)) {
                                obj.put("quantity1", authHandler.formattedQuantity(totalQty, companyid));
                                obj.put("amount1", authHandler.round(lifo, companyid));
                            } else if ((cdate2.before(transactionDate) || cdate2.equals(transactionDate)) && cdate1.after(transactionDate)) {
                                obj.put("quantity2", authHandler.formattedQuantity(totalQty, companyid));
                                obj.put("amount2", authHandler.round(lifo, companyid));
                            } else {
                                obj.put("quantity3", authHandler.formattedQuantity(totalQty, companyid));
                                obj.put("amount3", authHandler.round(lifo, companyid));
                            }
                            
                            totalQty = 0;
                            jArr.put(obj);
                        }
                    }
                }
                
                // For FIFO Valuation
                if (!isLifo) {
                    for (int i = qty.size(); i > 0; i--) {
                        if (totalQty >= qty.get(i - 1) && totalQty != 0) {
                            JSONObject obj = new JSONObject();
                            double tempRate = rate.get(i-1) != null? rate.get(i-1) : 0;
                            Date transactionDate = date.get(i-1);
                            String tdate=df.format(transactionDate);
                            try {
                                transactionDate=df.parse(tdate);
                            } catch (ParseException ex) {
                                transactionDate = date.get(i-1);
                            }
                            double baseuomQty = qty.get(i-1) * baseuomrate.get(i-1);
                            
                            KwlReturnObject crresult = accCurrencyDAOobj.getCurrencyToBaseAmount(currencyParams, tempRate, currency.get(i-1), transactionDate, 0);
                            tempRate = (Double) crresult.getEntityList().get(0);
                            
//                            if (extraCompanyPreferences.getUomSchemaType() == 0) { // for uom schema
//                                lifo = (baseuomQty * tempRate); 
//                            } else { // for packaging schema
                                lifo = (qty.get(i-1) * tempRate);
//                            }
                            
                            obj.put("pid", product.getProductid());
                            obj.put("productname", product.getName());
                            obj.put("productDesc", product.getDescription());
                            obj.put("unit", (product.getUnitOfMeasure() == null)? "" : product.getUnitOfMeasure().getNameEmptyforNA());
                            obj.put("transactionNumber", transactionNumber.get(i-1));
                            obj.put("transactionDate", df.format(transactionDate));
                            obj.put("transactionType", transactionType.get(i-1));
                            
                            Date cdate1=cal1.getTime();
                            String caldate1=df.format(cdate1);
                            try {
                                cdate1=df.parse(caldate1);
                            } catch (ParseException ex) {
                                cdate1 = cal1.getTime();
                            }
                            
                            Date cdate2=cal2.getTime();
                            String caldate2=df.format(cdate2);
                            try {
                                cdate2=df.parse(caldate2);
                            } catch (ParseException ex) {
                                cdate2 = cal2.getTime();
                            }
                            
                            if (cdate1.before(transactionDate) || cdate1.equals(transactionDate)) {
                                obj.put("quantity1", authHandler.formattedQuantity(baseuomQty, companyid));
                                obj.put("amount1", authHandler.round(lifo, companyid));
                            }else if ((cdate2.before(transactionDate) || cdate2.equals(transactionDate)) && cdate1.after(transactionDate)) {
                                obj.put("quantity2", authHandler.formattedQuantity(baseuomQty, companyid));
                                obj.put("amount2", authHandler.round(lifo, companyid));
                            }else {
                                obj.put("quantity3", authHandler.formattedQuantity(baseuomQty, companyid));
                                obj.put("amount3", authHandler.round(lifo, companyid));
                            }
                            
                            totalQty = totalQty - baseuomQty;
                            jArr.put(obj);
                        } else if (totalQty < qty.get(i - 1) && totalQty != 0) {
                            JSONObject obj = new JSONObject();
                            double tempRate = rate.get(i-1) != null? rate.get(i-1) : 0;
                            Date transactionDate = date.get(i-1);
                            String tdate=df.format(transactionDate);
                            try {
                                transactionDate=df.parse(tdate);
                            } catch (ParseException ex) {
                                transactionDate = date.get(i-1);
                            }
                            KwlReturnObject crresult = accCurrencyDAOobj.getCurrencyToBaseAmount(currencyParams, tempRate, currency.get(i-1), transactionDate, 0);
                            tempRate = (Double) crresult.getEntityList().get(0);
                            
                            lifo = totalQty * tempRate;
                            obj.put("pid", product.getProductid());
                            obj.put("productname", product.getName());
                            obj.put("productDesc", product.getDescription());
                            obj.put("unit", (product.getUnitOfMeasure() == null)? "" : product.getUnitOfMeasure().getNameEmptyforNA());
                            obj.put("transactionNumber", transactionNumber.get(i-1));
                            obj.put("transactionDate", df.format(transactionDate));
                            obj.put("transactionType", transactionType.get(i-1));
                            
                            Date cdate1=cal1.getTime();
                            String caldate1=df.format(cdate1);
                            try {
                                cdate1=df.parse(caldate1);
                            } catch (ParseException ex) {
                                cdate1 = cal1.getTime();
                            }
                            
                            Date cdate2=cal2.getTime();
                            String caldate2=df.format(cdate2);
                            try {
                                cdate2=df.parse(caldate2);
                            } catch (ParseException ex) {
                                cdate2 = cal2.getTime();
                            }
                            
                            if (cdate1.before(transactionDate) || cdate1.equals(transactionDate)) {
                                obj.put("quantity1", authHandler.formattedQuantity(totalQty, companyid));
                                obj.put("amount1", authHandler.round(lifo, companyid));
                            } else if ((cdate2.before(transactionDate) || cdate2.equals(transactionDate)) && cdate1.after(transactionDate)) {
                                obj.put("quantity2", authHandler.formattedQuantity(totalQty, companyid));
                                obj.put("amount2", authHandler.round(lifo, companyid));
                            } else {
                                obj.put("quantity3", authHandler.formattedQuantity(totalQty, companyid));
                                obj.put("amount3", authHandler.round(lifo, companyid));
                            }
                            
                            totalQty = 0;
                            jArr.put(obj);
                        }
                    }
                }
            }
            }
            
        } catch (SessionExpiredException ex) {
            Logger.getLogger(accProductControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
        }
        return jArr;
    }
    
    public ModelAndView getAssetDepreciation(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        boolean issuccess = false;
        String msg = "";
        try {
            HashMap<String, Object> fieldrequestParams = new HashMap();
            fieldrequestParams.put("startMonth", request.getParameter("fromMonth") != null ? Integer.parseInt(request.getParameter("fromMonth")) : 0 );
            fieldrequestParams.put("endMonth", request.getParameter("toMonth") != null ? Integer.parseInt(request.getParameter("toMonth")) : 0);
            fieldrequestParams.put("years", request.getParameter("years") != null ? request.getParameter("years") :"");
            fieldrequestParams.put("companyid", sessionHandlerImpl.getCompanyid(request));
            fieldrequestParams.put("assetdetailIds", request.getParameter("assetdetailId") != null ? request.getParameter("assetdetailId") : "All");
            fieldrequestParams.put("depreciationCalculationType", request.getParameter("depreciationCalculationType") != null ? Integer.parseInt(request.getParameter("depreciationCalculationType")) : 0);
            fieldrequestParams.put("finanDate", request.getParameter("finanDate") != null ? new Date(request.getParameter("finanDate")) : null);
            fieldrequestParams.put("isUnpost", request.getParameter("isUnpost") != null ? Boolean.parseBoolean(request.getParameter("isUnpost")) : null);
            fieldrequestParams.put("postOption", request.getParameter("postOption") != null ? Integer.parseInt(request.getParameter("postOption")) : 0);
            /*
            This flag is used in getAssetStraightLineDepreciation method
            */
            fieldrequestParams.put("isGenerateAssetDepreciation", request.getParameter("isGenerateAssetDepreciation") != null ? Boolean.parseBoolean(request.getParameter("isGenerateAssetDepreciation")) : false);
            if(!StringUtil.isNullOrEmpty(request.getParameter("assetGroupIds"))){
                fieldrequestParams.put("assetGroupIds", request.getParameterValues("assetGroupIds"));    
            }   
            fieldrequestParams.put("isOpening",false);
            boolean isFirstTimeLoad = request.getParameter("isFirstTimeLoad") != null ? Boolean.parseBoolean(request.getParameter("isFirstTimeLoad")) : false;
            JSONArray dataArray = new JSONArray();
            if(!isFirstTimeLoad){
                dataArray = accAssetService.getAssetDepreciation(fieldrequestParams);
            }
            jobj.put("data", dataArray);
            jobj.put("totalCount", dataArray.length());
            issuccess = true;
        } catch (JSONException ex) {
            msg = ex.getMessage();
            Logger.getLogger(accProductControllerCMN.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
        } catch (SessionExpiredException ex) {
            msg = ex.getMessage();
            Logger.getLogger(accProductControllerCMN.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
        } catch (Exception ex) {
            msg = ex.getMessage();
            Logger.getLogger(accProductControllerCMN.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
        } finally {
            try {
                jobj.put("success", issuccess);
                jobj.put("msg", msg);
            } catch (JSONException ex) {
                Logger.getLogger(accProductControllerCMN.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
            }
        }
        return new ModelAndView("jsonView", "model", jobj.toString());
    }
    
    
    public ModelAndView exportAssetDepreciation(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        String view = "jsonView_ex";
        try {
            HashMap<String, Object> fieldrequestParams = new HashMap();
            fieldrequestParams.put("startMonth", request.getParameter("fromMonth") != null ? Integer.parseInt(request.getParameter("fromMonth")) : 0);
            fieldrequestParams.put("endMonth", request.getParameter("toMonth") != null ? Integer.parseInt(request.getParameter("toMonth")) : 0);
            fieldrequestParams.put("years", request.getParameter("years") != null ? request.getParameter("years") : "");
            fieldrequestParams.put("companyid", sessionHandlerImpl.getCompanyid(request));
            fieldrequestParams.put("depreciationCalculationType", request.getParameter("depreciationCalculationType") != null ? Integer.parseInt(request.getParameter("depreciationCalculationType")) : 0);
            fieldrequestParams.put("assetdetailIds", request.getParameter("assetdetailId") != null ? request.getParameter("assetdetailId") : "All");
            if(!StringUtil.isNullOrEmpty(request.getParameter("assetGroupIds"))){
                fieldrequestParams.put("assetGroupIds", request.getParameterValues("assetGroupIds"));    
            }   
            
            JSONArray dataArray = new JSONArray();
            dataArray = accAssetService.getAssetDepreciation(fieldrequestParams);
            jobj.put("data", dataArray);
            String fileType = request.getParameter("filetype");
            if (StringUtil.equal(fileType, "print")) {
                String GenerateDate = authHandler.getDateFormatter(request).format(new Date());
                jobj.put("GenerateDate", GenerateDate);
                view = "jsonView-empty";
                exportDaoObj.processRequest(request, response, jobj);
            } else {
                exportDaoObj.processRequest(request, response, jobj);
            }
        } catch (SessionExpiredException ex) {
            Logger.getLogger(accProductController.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            Logger.getLogger(accProductController.class.getName()).log(Level.SEVERE, null, ex);
        }
        return new ModelAndView(view, "model", jobj.toString());
    }
 
    public GoodsReceipt getAssetPurchaseInvoice(AssetDetails assetDetails, String companyId) throws ServiceException {
        // if asset is not opening asset

        //a) If asset is created from GR and after this GR is Linked With Purchase Invoice

        /*
         * ALGO - a) get GRO Detail ID from assetinvoicedetailmapping table. b)
         * By using that GRO Detail Id get GR Detail Id from grdetails table c)
         * By using Invoice Detail Id get Invoice Id and get Exchange Rate
         */

        //b) If asset is created from Invoice and this invoice is later Linked with Goods Receipt

        /*
         * ALGO - a) get GRO Detail ID from assetinvoicedetailmapping table. b)
         * get GR Detail Id by grdetails table c) by using invoice detail id get
         * Exchange Rate.
         */

        // I am doing all the above process to get Invoice creation date, so that i can take exchange rate for that date

        GoodsReceipt gr = null;

        HashMap<String, Object> requestMap = new HashMap<String, Object>();
        requestMap.put("assetDetailId", assetDetails.getId());
        requestMap.put("companyId", companyId);

        KwlReturnObject grReturnObject = accProductObj.getPurchaseInvoiceIdOfAssetCreatedFromGRN(requestMap);

        List list = grReturnObject.getEntityList();

        String grID = "";

        if (!list.isEmpty() && list.get(0) != null) {
            grID = (String) list.get(0);
        }

        grReturnObject = accProductObj.getPurchaseInvoiceIdOfAssetCreatedFromPurchaseInvoice(requestMap);

        list = grReturnObject.getEntityList();


        if (!list.isEmpty() && list.get(0) != null) {
            grID = (String) list.get(0);
        }

        if (!StringUtil.isNullOrEmpty(grID)) {
            gr = (GoodsReceipt) kwlCommonTablesDAOObj.getClassObject(GoodsReceipt.class.getName(), grID);
        }

        return gr;

    }

    public ModelAndView exportAssetDepreciationDetails(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        String view = "jsonView_ex";
        boolean issuccess = false;
        String msg = "";
        try {
            JSONArray dataArray = accAssetService.getAssetDepreciationDetails(request, true);
            jobj.put("data", dataArray);
            String fileType = request.getParameter("filetype");
            if (StringUtil.equal(fileType, "print")) {
                String GenerateDate = authHandler.getDateFormatter(request).format(new Date());
                jobj.put("GenerateDate", GenerateDate);
                view = "jsonView-empty";
                exportDaoObj.processRequest(request, response, jobj);
            } else {
                exportDaoObj.processRequest(request, response, jobj);
            }
        } catch (JSONException ex) {
            msg = ex.getMessage();
            Logger.getLogger(accProductController.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
        } catch (SessionExpiredException ex) {
            msg = ex.getMessage();
            Logger.getLogger(accProductController.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
        } catch (Exception ex) {
            msg = ex.getMessage();
            Logger.getLogger(accProductController.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
        } finally {
            try {
                jobj.put("success", issuccess);
                jobj.put("msg", msg);
            } catch (JSONException ex) {
                Logger.getLogger(accProductController.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
            }
        }
        return new ModelAndView(view, "model", jobj.toString());
    }
    
    public ModelAndView getAssetDepreciationDetails(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        boolean issuccess = false;
        String msg = "";
        JSONObject jobj1 = new JSONObject();
        String start = "";
        String limit = "";
        try {
            JSONObject jobjTemp = new JSONObject();
            JSONArray jarrColumns = new JSONArray();
            JSONArray jarrRecords = new JSONArray();
            JSONObject jMeta = new JSONObject();
            JSONObject commData = new JSONObject();
            
            boolean isFirstTimeLoad = request.getParameter("isFirstTimeLoad") != null ? Boolean.parseBoolean(request.getParameter("isFirstTimeLoad")) : false;
            JSONArray dataArray = new JSONArray();
            int totalCount = 0;
            if(!isFirstTimeLoad){
                dataArray = accAssetService.getAssetDepreciationDetails(request, false);//Normal Case for getassetdetails
                jobjTemp=dataArray.getJSONObject(dataArray.length()-1);
                totalCount=jobjTemp.getInt("count");
            }
//            jobjTemp.getJSONObject("count");
            JSONObject fobj1 = formatAssetDepreciationDetails(request, dataArray);
            if (!StringUtil.isNullOrEmpty(request.getParameter(Constants.start)) && !StringUtil.isNullOrEmpty(request.getParameter(Constants.limit))) {
                start = request.getParameter(Constants.start);
                limit = request.getParameter(Constants.limit);
            }
           
            jarrColumns = fobj1.getJSONArray("jarrColumns");
            jarrRecords = fobj1.getJSONArray("jarrRecords");
            JSONArray pagedJson = dataArray;
            
            commData.put("success", true);
            commData.put("coldata", dataArray);
            commData.put("columns", jarrColumns);
            jMeta.put("totalProperty", "totalCount");
            jMeta.put("root", "coldata");
            commData.put("totalCount", totalCount);
            jMeta.put("fields", jarrRecords);
            commData.put("metaData", jMeta);
            JSONArray jcom = new JSONArray();
            jcom.put(commData);

            jobj1.put("valid", true);
            jobj1.put("data", commData);
           
            issuccess = true;           
        } catch (JSONException ex) {
            msg = ex.getMessage();
            Logger.getLogger(accProductController.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
        } catch (SessionExpiredException ex) {
            msg = ex.getMessage();
            Logger.getLogger(accProductController.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
        } catch (Exception ex) {
            msg = ex.getMessage();
            Logger.getLogger(accProductController.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
        } finally {
            try {
                jobj.put("success", issuccess);
                jobj.put("msg", msg);
            } catch (JSONException ex) {
                Logger.getLogger(accProductController.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
            }
        }
        return new ModelAndView("jsonView_ex", "model", jobj1.toString());
    }
    
    public JSONObject formatAssetDepreciationDetails(HttpServletRequest request, JSONArray jArr){
        JSONObject jobj = new JSONObject();
        JSONObject headerObj = new JSONObject();
        JSONArray jarrColumns = new JSONArray(); 
        JSONArray jarrRecords = new JSONArray();
        try { 
            int depreciationCalculationType = request.getParameter("depreciationCalculationType") != null ? Integer.parseInt(request.getParameter("depreciationCalculationType")) : 0;
            boolean isDepreciationDetailReport = request.getParameter("isDepreciationDetailReport") != null ? Boolean.parseBoolean(request.getParameter("isDepreciationDetailReport")) : false;
            String companyid = sessionHandlerImpl.getCompanyid(request);
            Date startdt=null;
            Date enddt=null;
            DateFormat df = authHandler.getDateOnlyFormat(request);
            String countryId = sessionHandlerImpl.getCountryId(request);
            if (isDepreciationDetailReport && request.getParameter("stdate") != null && request.getParameter("enddate") != null) {
                startdt = df.parse(request.getParameter("stdate"));
                enddt = df.parse(request.getParameter("enddate"));
            }

            headerObj= new JSONObject();
            headerObj.put("header", " ");
            headerObj.put("hidden",true);
            headerObj.put("dataIndex", "");
            jarrColumns.put(headerObj);
            
            JSONObject recObj = new JSONObject();
            recObj.put("name", "assetId");
            jarrRecords.put(recObj);

            headerObj= new JSONObject();
            headerObj.put("header", messageSource.getMessage("acc.assetworkorder.AssetId", null, RequestContextUtils.getLocale(request)));
            headerObj.put("tip", messageSource.getMessage("acc.assetworkorder.AssetId", null, RequestContextUtils.getLocale(request)));
            headerObj.put("dataIndex", "assetId");
            headerObj.put("width", 200);
            headerObj.put("pdfwidth", 200);
            headerObj.put("align","center");
            headerObj.put("sortable", true);
            jarrColumns.put(headerObj);

            recObj = new JSONObject();
            recObj.put("name", "location");
            jarrRecords.put(recObj);

            headerObj= new JSONObject();
            headerObj.put("header", messageSource.getMessage("acc.contractActivityPanel.Location", null, RequestContextUtils.getLocale(request)));
            headerObj.put("tip", messageSource.getMessage("acc.contractActivityPanel.Location", null, RequestContextUtils.getLocale(request)));
            headerObj.put("dataIndex", "location");
            headerObj.put("width", 120);
            headerObj.put("pdfwidth", 120);
            headerObj.put("align","center");
            jarrColumns.put(headerObj);
            
            recObj = new JSONObject();
            recObj.put("name", "warehouse");
            jarrRecords.put(recObj);

            headerObj= new JSONObject();
            headerObj.put("header", messageSource.getMessage("acc.window.Warehouse", null, RequestContextUtils.getLocale(request)));
            headerObj.put("tip", messageSource.getMessage("acc.window.Warehouse", null, RequestContextUtils.getLocale(request)));
            headerObj.put("dataIndex", "warehouse");
            headerObj.put("width", 120);
            headerObj.put("pdfwidth", 120);
            headerObj.put("align","center");
            jarrColumns.put(headerObj);
          
            recObj = new JSONObject();
            recObj.put("name", "batchname");
            jarrRecords.put(recObj);

            headerObj = new JSONObject();
            headerObj.put("header", messageSource.getMessage("acc.assetdepriciation.grid.BatchName", null, RequestContextUtils.getLocale(request)));
            headerObj.put("tip", messageSource.getMessage("acc.assetdepriciation.grid.BatchName", null, RequestContextUtils.getLocale(request)));
            headerObj.put("dataIndex", "batchname");
            headerObj.put("width", 120);
            headerObj.put("pdfwidth", 120);
            headerObj.put("align", "center");
            jarrColumns.put(headerObj);
            
            recObj = new JSONObject();
            recObj.put("name", "serialno");
            jarrRecords.put(recObj);

            headerObj = new JSONObject();
            headerObj.put("header", messageSource.getMessage("acc.field.SerialNo", null, RequestContextUtils.getLocale(request)));
            headerObj.put("tip", messageSource.getMessage("acc.field.SerialNo", null, RequestContextUtils.getLocale(request)));
            headerObj.put("dataIndex", "serialno");
            headerObj.put("width", 120);
            headerObj.put("pdfwidth", 120);
            headerObj.put("align", "center");
            jarrColumns.put(headerObj);
                        
            recObj = new JSONObject();
            recObj.put("name", "purchaseDate");
            jarrRecords.put(recObj);

            headerObj = new JSONObject();
            headerObj.put("header", messageSource.getMessage("acc.field.PurchaseDate", null, RequestContextUtils.getLocale(request)));
            headerObj.put("tip", messageSource.getMessage("acc.field.PurchaseDate", null, RequestContextUtils.getLocale(request)));
            headerObj.put("dataIndex", "purchaseDate");
            headerObj.put("width", 200);
            headerObj.put("pdfwidth", 200);
            headerObj.put("align", "center");
            headerObj.put("sortable", true);
            jarrColumns.put(headerObj);
            
            recObj = new JSONObject();
            recObj.put("name", "installationDate");
            jarrRecords.put(recObj);

            headerObj = new JSONObject();
            headerObj.put("header", messageSource.getMessage("acc.fixed.asset.date.installation", null, RequestContextUtils.getLocale(request)));
            headerObj.put("tip", messageSource.getMessage("acc.fixed.asset.date.installation", null, RequestContextUtils.getLocale(request)));
            headerObj.put("dataIndex", "installationDate");
            headerObj.put("width", 200);
            headerObj.put("pdfwidth", 200);
            headerObj.put("align","center");
            headerObj.put("sortable", true);
            jarrColumns.put(headerObj);

            recObj = new JSONObject();
            recObj.put("name","assetdescription");
            jarrRecords.put(recObj);

            headerObj = new JSONObject();
            headerObj.put("header", messageSource.getMessage("erp.field.AssetDesciption", null, RequestContextUtils.getLocale(request)));
            headerObj.put("tip", messageSource.getMessage("erp.field.AssetDesciption", null, RequestContextUtils.getLocale(request)));
            headerObj.put("dataIndex", "assetdescription");
            headerObj.put("width", 200);
            headerObj.put("align", "center");
            headerObj.put("pdfwidth", 200);
            jarrColumns.put(headerObj);
            
            recObj = new JSONObject();
            recObj.put("name", "assetGroup");
            jarrRecords.put(recObj);

            recObj = new JSONObject();
            recObj.put("name", "groupinfo");
            jarrRecords.put(recObj);
            
            headerObj = new JSONObject();
            headerObj.put("header", messageSource.getMessage("acc.field.AssetGroup", null, RequestContextUtils.getLocale(request)));
            headerObj.put("tip", messageSource.getMessage("acc.field.AssetGroup", null, RequestContextUtils.getLocale(request)));
            headerObj.put("dataIndex", "groupinfo");
            headerObj.put("width", 200);
            headerObj.put("align", "center");
            headerObj.put("pdfwidth", 200);
            headerObj.put("sortable", true);
            jarrColumns.put(headerObj);
            
            recObj = new JSONObject();
            recObj.put("name", "vendorname");
            jarrRecords.put(recObj);

            headerObj = new JSONObject();
            headerObj.put("header", messageSource.getMessage("acc.ven.name", null, RequestContextUtils.getLocale(request)));
            headerObj.put("tip", messageSource.getMessage("acc.ven.name", null, RequestContextUtils.getLocale(request)));
            headerObj.put("dataIndex", "vendorname");
            headerObj.put("width", 200);
            headerObj.put("align", "center");
            headerObj.put("pdfwidth", 200);
            jarrColumns.put(headerObj);
            
            recObj = new JSONObject();
            recObj.put("name", "purchaseinvno");
            jarrRecords.put(recObj);

            headerObj = new JSONObject();
            headerObj.put("header", messageSource.getMessage("acc.het.905", null, RequestContextUtils.getLocale(request)));
            headerObj.put("tip", messageSource.getMessage("acc.het.905", null, RequestContextUtils.getLocale(request)));
            headerObj.put("dataIndex", "purchaseinvno");
            headerObj.put("width", 200);
            headerObj.put("align", "center");
            headerObj.put("pdfwidth", 200);
            jarrColumns.put(headerObj);
            
            recObj = new JSONObject();
            recObj.put("name", "acccode");
            jarrRecords.put(recObj);

            headerObj = new JSONObject();
            headerObj.put("header", messageSource.getMessage("acc.assetdepriciation.grid.DepreciationAccountCode", null, RequestContextUtils.getLocale(request)));
            headerObj.put("tip", messageSource.getMessage("acc.assetdepriciation.grid.DepreciationAccountCode", null, RequestContextUtils.getLocale(request)));
            headerObj.put("dataIndex", "acccode");
            headerObj.put("width", 200);
            headerObj.put("align", "center");
            headerObj.put("pdfwidth", 200);
            jarrColumns.put(headerObj);
            
             recObj = new JSONObject();
            recObj.put("name", "assetcost");
            jarrRecords.put(recObj);

            if (!StringUtil.isNullOrEmpty(countryId) && Integer.parseInt(countryId) == Constants.indian_country_id) {
                KwlReturnObject excap = accountingHandlerDAOobj.getObject(ExtraCompanyPreferences.class.getName(), companyid);
                ExtraCompanyPreferences extraCompanyPreferences = (ExtraCompanyPreferences) excap.getEntityList().get(0);
                if (extraCompanyPreferences.isActivelandingcostofitem()) {
                    KwlReturnObject landingCostOfRetObj = accMasterItemsDAO.getMasterItemFromLandingCostCategory(null, companyid);
                    List list = landingCostOfRetObj.getEntityList();
                    Iterator itr = list.iterator();
                    while (itr.hasNext()) {
                        LandingCostCategory lcc = (LandingCostCategory) itr.next();
                        headerObj = new JSONObject();
                        headerObj.put("name", lcc.getId());
                        jarrRecords.put(headerObj);
                        headerObj = new JSONObject();
                        headerObj.put("dataIndex", lcc.getId());
                        headerObj.put("header", lcc.getLccName() + " ( " + LandingCostAllocationType.getByValue(lcc.getLcallocationid()) + " )");
                        headerObj.put("width", 200);
                        headerObj.put("width", 200);
                        headerObj.put("renderer", "WtfGlobal.withoutRateCurrencyDeletedSymbol");
                        jarrColumns.put(headerObj);
                    }
                    headerObj = new JSONObject();
                    headerObj.put("name", "assetvaluewithoutlandedcost");
                    jarrRecords.put(headerObj);

                    headerObj = new JSONObject();
                    headerObj.put("dataIndex", "assetvaluewithoutlandedcost");
                    headerObj.put("header", "Asset Value Without Landed Cost");
                    headerObj.put("width", 200);
                    headerObj.put("width", 200);
                    headerObj.put("renderer", "WtfGlobal.withoutRateCurrencyDeletedSymbol");
                    jarrColumns.put(headerObj);
                }
            }
            headerObj = new JSONObject();
            headerObj.put("header", "Asset Cost");
            headerObj.put("tip", "Asset Cost");
            headerObj.put("dataIndex", "assetcost");
            headerObj.put("width", 200);
            headerObj.put("align", "right");
            headerObj.put("pdfwidth", 200);
            jarrColumns.put(headerObj);
            
            recObj = new JSONObject();
            recObj.put("name", "currentAssetValue");
            jarrRecords.put(recObj);
                
//            SDP-16322- Hiding temporarily 
//            headerObj = new JSONObject();
//            headerObj.put("header", "Current Asset Value");
//            headerObj.put("tip", "Current Asset Value");
//            headerObj.put("dataIndex", "currentAssetValue");
//            headerObj.put("width", 200);
//            headerObj.put("align", "right");
//            headerObj.put("pdfwidth", 200);
//            jarrColumns.put(headerObj);
            
            recObj = new JSONObject();
            recObj.put("name", "assetNetBookValue");
            jarrRecords.put(recObj);

            headerObj = new JSONObject();
            headerObj.put("header", messageSource.getMessage("acc.fixedAssetList.netBookVal", null, RequestContextUtils.getLocale(request)));
            headerObj.put("tip", messageSource.getMessage("acc.fixedAssetList.netBookVal", null, RequestContextUtils.getLocale(request)));
            headerObj.put("dataIndex", "assetNetBookValue");
            headerObj.put("width", 150);
            headerObj.put("align", "right");
            headerObj.put("pdfwidth", 150);
            jarrColumns.put(headerObj);
           
            recObj = new JSONObject();
            recObj.put("name", "assetLife");
            jarrRecords.put(recObj);

            headerObj = new JSONObject();
            headerObj.put("header", messageSource.getMessage("acc.fixedAssetList.grid.assetLife", null, RequestContextUtils.getLocale(request)));
            headerObj.put("tip", messageSource.getMessage("acc.fixedAssetList.grid.assetLife", null, RequestContextUtils.getLocale(request)));
            headerObj.put("dataIndex", "assetLife");
            headerObj.put("width", 200);
            headerObj.put("align", "center");
            headerObj.put("pdfwidth", 200);
            jarrColumns.put(headerObj);
            
            recObj = new JSONObject();
            recObj.put("name", "depreciationRate");
            jarrRecords.put(recObj);

            headerObj = new JSONObject();
            headerObj.put("header", messageSource.getMessage("erp.fixedasset.depreciationrate", null, RequestContextUtils.getLocale(request)));
            headerObj.put("tip", messageSource.getMessage("erp.fixedasset.depreciationrate", null, RequestContextUtils.getLocale(request)));
            headerObj.put("dataIndex", "depreciationRate");
            headerObj.put("width", 200);
            headerObj.put("align", "center");
            headerObj.put("pdfwidth", 200);
            jarrColumns.put(headerObj);
            
            recObj = new JSONObject();
            recObj.put("name", "assetdepreciationschedule");
            jarrRecords.put(recObj);

            headerObj = new JSONObject();
            headerObj.put("header", messageSource.getMessage("acc.assetdepriciation.grid.DepreciationSchedule", null, RequestContextUtils.getLocale(request)));
            headerObj.put("tip", messageSource.getMessage("acc.assetdepriciation.grid.DepreciationSchedule", null, RequestContextUtils.getLocale(request)));
            headerObj.put("dataIndex", "assetdepreciationschedule");
            headerObj.put("width", 200);
            headerObj.put("align", "center");
            headerObj.put("pdfwidth", 200);
            jarrColumns.put(headerObj);
            
            recObj = new JSONObject();
            recObj.put("name", "status");
            jarrRecords.put(recObj);

            headerObj = new JSONObject();
            headerObj.put("header", messageSource.getMessage("acc.GIRO.Status", null, RequestContextUtils.getLocale(request)));
            headerObj.put("tip", messageSource.getMessage("acc.GIRO.Status", null, RequestContextUtils.getLocale(request)));
            headerObj.put("dataIndex", "status");
            headerObj.put("width", 200);
            headerObj.put("align", "center");
            headerObj.put("pdfwidth", 200);
            jarrColumns.put(headerObj);
            
            recObj = new JSONObject();
            recObj.put("name", "openingDepreciation");
            jarrRecords.put(recObj);

            headerObj = new JSONObject();
            headerObj.put("header", messageSource.getMessage("acc.assetdepriciation.grid.OpeningDepreciation", null, RequestContextUtils.getLocale(request)));
            headerObj.put("tip", messageSource.getMessage("acc.assetdepriciation.grid.OpeningDepreciation", null, RequestContextUtils.getLocale(request)));
            headerObj.put("dataIndex", "openingDepreciation");
            headerObj.put("width", 200);
            headerObj.put("align", "right");
            headerObj.put("pdfwidth", 200);
            jarrColumns.put(headerObj);
            
            recObj = new JSONObject();
            recObj.put("name", "gstcode");
            jarrRecords.put(recObj);

            headerObj = new JSONObject();
            headerObj.put("header", messageSource.getMessage("acc.field.GSTCodes", null, RequestContextUtils.getLocale(request)));
            headerObj.put("tip", messageSource.getMessage("acc.field.GSTCodes", null, RequestContextUtils.getLocale(request)));
            headerObj.put("dataIndex", "gstcode");
            headerObj.put("width", 200);
            headerObj.put("align", "right");
            headerObj.put("pdfwidth", 200);
            jarrColumns.put(headerObj);
                       
            int endMonth = 11;
            Calendar startCal=null;
            Calendar endCal=null;
            if (startdt != null) {
                startCal = Calendar.getInstance();
                startCal.setTime(startdt);
            }
            if (enddt != null) {
                endCal = Calendar.getInstance();
                endCal.setTime(enddt);
            }
            
            /*
            IF start year and end year is same then end month is as per end date filter
            */
            if (startCal.get(Calendar.YEAR) == endCal.get(Calendar.YEAR)) {
                 endMonth = endCal.get(Calendar.MONTH);
            } 
            recObj = new JSONObject();
            recObj.put("name", "yearval");
            jarrRecords.put(recObj);

            headerObj = new JSONObject();
            headerObj.put("header", messageSource.getMessage("acc.field.DepreciationofYear", null, RequestContextUtils.getLocale(request))+" "+startCal.get(Calendar.YEAR));
            headerObj.put("tip", messageSource.getMessage("acc.field.DepreciationofYear", null, RequestContextUtils.getLocale(request))+" "+startCal.get(Calendar.YEAR));
            headerObj.put("dataIndex", "yearval");
            headerObj.put("width", 200);
            headerObj.put("align", "right");
            headerObj.put("pdfwidth", 200);
            jarrColumns.put(headerObj);

            if (depreciationCalculationType != 0) {
                /**
                 * column is made according to date start and end date filter.SDP-12870
                 */
                if (startCal.get(Calendar.YEAR) <= endCal.get(Calendar.YEAR)) {
                    while (startCal.get(Calendar.MONTH) <= endMonth) {

                        recObj = new JSONObject();
                        recObj.put("name", "month" + startCal.get(Calendar.YEAR) + "_" + startCal.get(Calendar.MONTH));
                        jarrRecords.put(recObj);

                        headerObj = new JSONObject();
                        headerObj.put("dataIndex", "month" + startCal.get(Calendar.YEAR) + "_" + startCal.get(Calendar.MONTH));
                        headerObj.put("width", 200);
                        headerObj.put("align", "right");
                        headerObj.put("pdfwidth", 200);

                        String columnData = startCal.getDisplayName(Calendar.MONTH, Calendar.LONG, Locale.ENGLISH) + " " + startCal.get(Calendar.YEAR);
                        headerObj.put("header", columnData);
                        headerObj.put("tip", columnData);
                        jarrColumns.put(headerObj);
                        
                        if (startCal.get(Calendar.MONTH) == 11) {  //After December start next Year
                            startCal.add(Calendar.YEAR, 1);
                            startCal.set(Calendar.MONTH, Calendar.JANUARY);
                            if (startCal.get(Calendar.YEAR) == endCal.get(Calendar.YEAR)) {
                                endMonth = endCal.get(Calendar.MONTH);
                            } else {
                                endMonth = 11;
                            }
                        } else {
                            startCal.add(Calendar.MONTH, 1); 
                        }
                        if (startCal.get(Calendar.YEAR) > endCal.get(Calendar.YEAR)) {
                            break;
                        }
                    }
                }
            }           
            
            HashMap hashMap = new HashMap();
            hashMap.put("companyId", companyid);
            hashMap.put("reportId", Constants.Acc_FixedAssets_Details_ModuleId);
            KwlReturnObject customizeReportResult = accountingHandlerDAOobj.getCustomizeReportViewMappingField(hashMap);
            List<CustomizeReportMapping> customizeReportList = customizeReportResult.getEntityList();
            List arrayList = new ArrayList();
            for (CustomizeReportMapping customizeReportMapping : customizeReportList) {
                String column = "Custom_" + customizeReportMapping.getDataIndex();
                if (!arrayList.contains(customizeReportMapping.getDataIndex())) {
                    recObj = new JSONObject();
                    recObj.put("name", column);
                    jarrRecords.put(recObj);
                    headerObj = new JSONObject();
                    headerObj.put("header", customizeReportMapping.getDataHeader());
                    headerObj.put("dataIndex", column);
                    headerObj.put("width", 150);
                    headerObj.put("pdfwidth", 150);
                    headerObj.put("custom", "true");
                    jarrColumns.put(headerObj);
                    arrayList.add(customizeReportMapping.getDataIndex());
                }
            }


            jobj.put("jarrColumns", jarrColumns);
            jobj.put("jarrRecords", jarrRecords);
        } catch (Exception ex) {
            Logger.getLogger(accProductControllerCMN.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
        }
        return jobj;
    }
    
    public Date getAssetDepreciationBasedOnDate(ExtraCompanyPreferences extra, CompanyAccountPreferences preferences){
        Date finanDate = null;
        if(extra != null && preferences != null){
            if(extra.getAssetDepreciationCalculationBasedOn() == Constants.DEPRECIATION_BASED_ON_BOOK_BEGINNING_DATE){
                finanDate = preferences.getBookBeginningFrom();
            }else{
                finanDate = preferences.getFirstFinancialYearFrom() != null ? preferences.getFirstFinancialYearFrom() : preferences.getFinancialYearFrom();
            }
        }
        return finanDate;
    }
    
    public ModelAndView postOpeningDepreciationForAssets(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj1 = new JSONObject();
        boolean issuccess = false;
        String msg = "";
        try {
            double openingBalance = 0.00;
            boolean posted = false;
            String companyId = sessionHandlerImpl.getCompanyid(request);
            java.util.Date finanDate = null; //Financial Year Start Date
            Map<String, Object> filterParams = new HashMap<String, Object>();
            filterParams.put("id", companyId);
            KwlReturnObject kresult = accCompanyPreferencesObj.getCompanyPreferences(filterParams);
            CompanyAccountPreferences preferences = null;
            if (kresult.getEntityList().size() > 0) {
                preferences = (CompanyAccountPreferences) kresult.getEntityList().get(0);
            }
            KwlReturnObject extraresult = accCompanyPreferencesObj.getExtraCompanyPreferences(filterParams);
            ExtraCompanyPreferences extra = null;
            if (extraresult.getEntityList().size() > 0) {
                extra = (ExtraCompanyPreferences) extraresult.getEntityList().get(0);
            }
            
            finanDate = getAssetDepreciationBasedOnDate(extra, preferences);
            
            boolean excludeSoldAssets = false;
            int depreciationCalculationType = request.getParameter("depreciationCalculationType") != null ? Integer.parseInt(request.getParameter("depreciationCalculationType")) : 0;
            if (!StringUtil.isNullOrEmpty(request.getParameter("excludeSoldAssets"))) {
                excludeSoldAssets = Boolean.parseBoolean(request.getParameter("excludeSoldAssets"));
            }
            HashMap<String, Object> requestParams = new HashMap<String, Object>();
            requestParams.put("companyId", companyId);
            requestParams.put("invrecord", true);

            if (excludeSoldAssets) {
                requestParams.put("excludeSoldAsset", excludeSoldAssets);
            }
            String assetDetailsIds= "";
            if(request.getParameter("assetDetailIds") != null){
                assetDetailsIds = request.getParameter("assetDetailIds");
                requestParams.put("assetDetailsIds", assetDetailsIds);
            }
            
            KwlReturnObject result = accProductObj.getAssetDetails(requestParams);
            List <AssetDetails> list = result.getEntityList();
            for (AssetDetails assetDetails : list) {
                openingBalance = 0.00;
                if (assetDetails.getInstallationDate().before(finanDate)) {
                    String backyears = "";
                    Calendar cal1 = Calendar.getInstance();
                    cal1.setTime(finanDate);
                    cal1.add(Calendar.DATE, -1);
                    int currentyear = cal1.get(Calendar.YEAR);
                    Calendar cal2 = Calendar.getInstance();
                    cal2.setTime(assetDetails.getInstallationDate());
                    int creationyear1 = cal2.get(Calendar.YEAR);
                    
//                    if(depreciationCalculationType == 0 && finanDate.getMonth() != 0){
//                        currentyear--;
//                    }
                    if(depreciationCalculationType==0 && finanDate.getMonth()!=0 && cal1.getTime().getMonth()!=0){
                        currentyear--;
                    }
                    while (creationyear1 <= currentyear) {
                        backyears += creationyear1 + ",";
                        creationyear1++;
                    }
                    
                    com.krawler.utils.json.base.JSONArray curfinalJArr = new com.krawler.utils.json.base.JSONArray();
                    HashMap<String, Object> fieldrequestParams = new HashMap();
                    fieldrequestParams.put("startMonth", assetDetails.getInstallationDate().getMonth());
                    fieldrequestParams.put("endMonth", cal1.getTime().getMonth());
                    fieldrequestParams.put("assetdetailIds",assetDetails.getId());
                    fieldrequestParams.put("years", backyears);
                    fieldrequestParams.put("companyid", companyId);
                    fieldrequestParams.put("depreciationCalculationType", depreciationCalculationType);
                    fieldrequestParams.put("finanDate", finanDate);
                    fieldrequestParams.put("isOpening",true);
                            
                    curfinalJArr = accAssetService.getAssetDepreciation(fieldrequestParams);

                    for (int i = 0; i < curfinalJArr.length(); i++) {
                        JSONObject newjobj = curfinalJArr.getJSONObject(i);
                        if (newjobj.has("firstperiodamtInBase")) {
                            openingBalance += newjobj.getDouble("firstperiodamtInBase");
                        }
                    }
                    if (curfinalJArr.length() > 0) {
                        for (int i = 0; i < curfinalJArr.length(); i++) {
                            JSONObject jobj = curfinalJArr.getJSONObject(i);
                            double perioddepreciation = Double.parseDouble(StringUtil.DecodeText(jobj.getString("perioddepreciation")));
                            HashMap<String, Object> ddMap = new HashMap<String, Object>();
                            ddMap.put("depreciationCreditToAccountId", (assetDetails.getProduct().getDepreciationProvisionGLAccount() != null) ? assetDetails.getProduct().getDepreciationProvisionGLAccount().getID() : assetDetails.getProduct().getPurchaseAccount().getID());// this is containing value of Asset Controlling Account.
                            ddMap.put("depreciationGLAccountId", assetDetails.getProduct().getDepreciationGLAccount().getID());
                            ddMap.put("productId", assetDetails.getProduct().getID());
                            ddMap.put("assetId", assetDetails.getId());
                            ddMap.put("period", Integer.parseInt(StringUtil.DecodeText(jobj.getString("period"))));
                            ddMap.put("companyid", companyId);
                            ddMap.put("jeid", null);
                            ddMap.put("periodamount", perioddepreciation);
                            ddMap.put("accamount", jobj.optDouble("accdepreciation", 0));
                            ddMap.put("netbookvalue", jobj.optDouble("netbookvalue", 0));
                            // add depreciation detail
                            accProductObj.addDepreciationDetail(ddMap);
                        }
                    }
                    assetDetails.setOpeningDepreciation(authHandler.round(openingBalance, companyId));
                    posted = true;
//                    if (assetDetails.getProduct().getDepreciationProvisionGLAccount() != null) {
//                        assetDetails.getProduct().getDepreciationProvisionGLAccount().setOpeningBalance(assetDetails.getProduct().getDepreciationProvisionGLAccount().getOpeningBalance() - openingBalance);
//                    }
                }
            }
            if(posted){
                msg = messageSource.getMessage("acc.assetdetails.post", null, RequestContextUtils.getLocale(request));
            }else{
                msg = messageSource.getMessage("acc.assetdetails.Nodepreciationtopost", null, RequestContextUtils.getLocale(request));
            }
            issuccess = true;
        } catch (JSONException ex) {
            msg = ex.getMessage();
            Logger.getLogger(accProductController.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
        } catch (SessionExpiredException ex) {
            msg = ex.getMessage();
            Logger.getLogger(accProductController.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
        } catch (Exception ex) {
            msg = ex.getMessage();
            Logger.getLogger(accProductController.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
        } finally {
            try {
                jobj1.put("success", issuccess);
                jobj1.put("msg", msg);
            } catch (JSONException ex) {
                Logger.getLogger(accProductControllerCMN.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
            }
        }
        return new ModelAndView("jsonView", "model", jobj1.toString());
    }

    public ModelAndView unPostOpeningDepreciationForAssets(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj1 = new JSONObject();
        boolean issuccess = false;
        String msg = "";
        try {
            String companyId = sessionHandlerImpl.getCompanyid(request);
            String assetDetailsIds = "";
            List<String> selectedAssetIdsList=new LinkedList<>();
            HashSet<String> assetIdsSet=new HashSet<>();
            if(request.getParameter("assetDetailIds") != null){
                assetDetailsIds = request.getParameter("assetDetailIds");
                String temString=assetDetailsIds.replaceAll("'", "");
                selectedAssetIdsList.addAll(Arrays.asList(temString.split("\\s*,\\s*")));
                
            }
            /*
            Check periodic depreciation is posted for selected asset id's. If yes- then don't reset opening depreciation of asset.
            */
            Map<String, Object> paramsMap = new HashMap<>();
            paramsMap.put("selectedAssetIdsList", selectedAssetIdsList);
            paramsMap.put("companyId", companyId);
            KwlReturnObject resultList=accProductObj.getPeriodicDepreciationOFAssetIds(paramsMap);
            List<AssetDetails> assetDetailList = resultList.getEntityList();
            
            /*
            Remove those assed id which is having periodic depreciation.
            */
            for (AssetDetails ad : assetDetailList) {
                if (selectedAssetIdsList.contains(ad.getId())) {
                    selectedAssetIdsList.remove(ad.getId());
                }
                assetIdsSet.add(ad.getAssetId());
            }
            
            /*
            Delete the opening depreciation
            */
            if (!selectedAssetIdsList.isEmpty()) {
                paramsMap.put("selectedAssetIdsList", selectedAssetIdsList);
                accProductObj.deleteOpeningAssetDepreciationDetails(paramsMap);
                paramsMap.put("selectedAssetIdsList", selectedAssetIdsList);
                accProductObj.resetOpeningDepreciationOfAssets(paramsMap);
            }
            /*
             Below code is used to customize the message as if  Periodic depreciation is posted and We are reset the Opening Depr.
             */
            String customMessage = "<ul style='display: block;list-style-type: square;margin:1em;padding-left: 6px;'>";
            msg = messageSource.getMessage("acc.assetdetails.unpost", null, RequestContextUtils.getLocale(request));
            if (assetDetailList!=null && assetDetailList.size() > 0) {
                msg += messageSource.getMessage("acc.dep.unpost.notemsg", null, RequestContextUtils.getLocale(request)) + "<b>" + assetIdsSet.toString() + "</b>" + " " + messageSource.getMessage("acc.dep.unpost.notemsg1", null, RequestContextUtils.getLocale(request));
                msg += customMessage + "<li>" + messageSource.getMessage("acc.dep.unpost.opening", null, RequestContextUtils.getLocale(request)) + "</li></ul>";
            }
            issuccess = true;
        } catch (SessionExpiredException ex) {
            msg = ex.getMessage();
            Logger.getLogger(accProductController.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
        } catch (Exception ex) {
            msg = ex.getMessage();
            Logger.getLogger(accProductController.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
        } finally {
            try {
                jobj1.put("success", issuccess);
                jobj1.put("msg", msg);
            } catch (JSONException ex) {
                Logger.getLogger(accProductControllerCMN.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
            }
        }
        return new ModelAndView("jsonView", "model", jobj1.toString());
    }
            
  public ModelAndView saveAssetDepreciation(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        String msg = "";
        boolean issuccess = false;

        DefaultTransactionDefinition def = new DefaultTransactionDefinition();
        def.setName("ADD_Tx");
        def.setPropagationBehavior(TransactionDefinition.PROPAGATION_REQUIRED);

        TransactionStatus status = txnManager.getTransaction(def);
        try {
            msg=saveAssetDepreciation(request);
            issuccess = true;
            txnManager.commit(status);
        } catch (SessionExpiredException ex) {
            txnManager.rollback(status);
            msg = ex.getMessage();
            Logger.getLogger(accProductControllerCMN.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
        } catch (Exception ex) {
            txnManager.rollback(status);
            msg = ex.getMessage();
            Logger.getLogger(accProductControllerCMN.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
        } finally {
            try {
                jobj.put("success", issuccess);
                jobj.put("msg", msg);
            } catch (JSONException ex) {
                Logger.getLogger(accProductControllerCMN.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
            }
        }
        return new ModelAndView("jsonView", "model", jobj.toString());
    }
    
    public String saveAssetDepreciation(HttpServletRequest request) throws SessionExpiredException, AccountingException, ParseException {
        String  messageString= "";
        try {
            DateFormat df = authHandler.getDateOnlyFormat(request);
            Date postdate = null,depreciationDate=null;
            JSONArray jArr1=new JSONArray();
            if (request.getParameter("postdate") != null) {
                postdate = df.parse(request.getParameter("postdate"));
            } else {
                postdate = new Date();
            }          
            Calendar Cal = Calendar.getInstance();
            Cal.setTime(postdate);
            String companyId = sessionHandlerImpl.getCompanyid(request);
            Date finanDate = null; //Financial Year Start Date
            Map<String, Object> filterParams = new HashMap<String, Object>();
            filterParams.put("id", companyId);
            KwlReturnObject kresult = accCompanyPreferencesObj.getCompanyPreferences(filterParams);
            CompanyAccountPreferences preferences = null;
            if (kresult.getEntityList().size() > 0) {
                preferences = (CompanyAccountPreferences) kresult.getEntityList().get(0);
            }
            KwlReturnObject extraresult = accCompanyPreferencesObj.getExtraCompanyPreferences(filterParams);
            ExtraCompanyPreferences extra = null;
            if (extraresult.getEntityList().size() > 0) {
                extra = (ExtraCompanyPreferences) extraresult.getEntityList().get(0);
            }
            finanDate = getAssetDepreciationBasedOnDate(extra, preferences);
            int postOption = request.getParameter("postOption") != null ? Integer.parseInt(request.getParameter("postOption")) : 0;
            boolean excludeSoldAssets=false;
            String currencyid = sessionHandlerImpl.getCurrencyID(request);
            String userfullname = sessionHandlerImpl.getUserFullName(request);
            CompanySessionClass companySessionObj = sessionHandlerImpl.getCompanySessionObj(request);
            String assetdetailIds = request.getParameter("assetdetailIds");
            String selectedAssetIds = request.getParameter("selectedAssetIds");
            List<AssetDetails> assetdetailList = new ArrayList();
            List<String> assetdetailIDList = new ArrayList();
            List<String> restrictPostDateBeforeInstDate = new ArrayList<>();
            List<String> unOrderedAssetIDList = new ArrayList();
            HashMap<String, Object> assetIdWithPeriodMap = new HashMap<String, Object>();
            HashSet<String> assetIdsSet=new HashSet<>();
            
             /*
             Check Post date is in between Lock period or not
             */
            boolean isLockingPeriodDate = false;
            String errorMsg = "";
            try {
                authHandlerDAOObj.checkLockDatePeroid(postdate, companyId);
            } catch (DataInvalidateException ex) {
                isLockingPeriodDate = true;
                errorMsg = ex.getMessage();
            }
            if (!isLockingPeriodDate) {
                if (assetdetailIds.equals("All")) {
                    HashMap<String, Object> requestParams = new HashMap<String, Object>();
                    requestParams.put("companyId", sessionHandlerImpl.getCompanyid(request));
                    requestParams.put("invrecord", true);
                    if (excludeSoldAssets) {
                        requestParams.put("excludeSoldAsset", excludeSoldAssets);
                    }
                    KwlReturnObject result = accProductObj.getAssetDetails(requestParams);
                    assetdetailList = result.getEntityList();
                } else {
                    List<String> assetdetailIdsList = Arrays.asList(assetdetailIds.split("\\s*,\\s*"));
                    for (int i = 0; i < assetdetailIdsList.size(); i++) {
                        String assetdetailId = assetdetailIdsList.get(i);
                        KwlReturnObject accresult = accountingHandlerDAOobj.getObject(AssetDetails.class.getName(), assetdetailId);
                        AssetDetails ad = (AssetDetails) accresult.getEntityList().get(0);
                        assetdetailList.add(ad);
                    }
                }

                /*
                 Below method is used to check opening depreciation of asset is posted or not
                 */
                if (!StringUtil.isNullOrEmpty(selectedAssetIds)) {
                    List<String> selectedAssetIdsList = Arrays.asList(selectedAssetIds.split("\\s*,\\s*"));
                    for (int i = 0; i < selectedAssetIdsList.size(); i++) {
                        String assetdetailId = selectedAssetIdsList.get(i);
                        KwlReturnObject accresult = accountingHandlerDAOobj.getObject(AssetDetails.class.getName(), assetdetailId);
                        AssetDetails ad = (AssetDetails) accresult.getEntityList().get(0);
                        if (ad.getInstallationDate().before(finanDate)) {
                            assetdetailIDList.add(ad.getId());
                        }

                        if (postdate.before(ad.getInstallationDate())) {
                            restrictPostDateBeforeInstDate.add(ad.getId());
                            assetIdsSet.add(ad.getAssetId());
                        }
                    }

                    /*
                     Below code block is used to get Max period of selected Assets     
                     */
                    Map<String, Object> paramsMap = new HashMap<>();
                    paramsMap.put("selectedAssetIdsList", selectedAssetIdsList);
                    paramsMap.put("companyId", companyId);
                    KwlReturnObject resultList = accProductObj.getMaxPeriodOfSelectedAssets(paramsMap);
                    List periodList = resultList.getEntityList();
                    String assetID = "";
                    int period = 0;
                    for (Object object : periodList) {
                        Object row[] = (Object[]) object;
                        assetID = (String) row[0];
                        period = (Integer) row[1];
                        assetIdWithPeriodMap.put(assetID, period);//This map is used to put assetid as key and period as value for next logic
                    }

                }
            }
            
            String detail = request.getParameter("detail");
            if (!isLockingPeriodDate && !StringUtil.isNullOrEmpty(detail)) {
                jArr1 = new JSONArray(detail);
                int first = 0;
                int last = 0;
                int maxPosted = 0;
                JSONObject jobj = new JSONObject();
                jobj = jArr1.getJSONObject(0);
                String id = jobj.optString("assetDetailsId");
                String assetID = URLDecoder.decode(jobj.optString("assetId"), StaticValues.ENCODING);
                /*
                 Below if block is used to get Maximum Period posted of first asset present in Array
                */
                if (!assetIdWithPeriodMap.isEmpty()) {
                    if (assetIdWithPeriodMap.containsKey(jobj.optString("assetDetailsId"))) {
                        maxPosted = (Integer) assetIdWithPeriodMap.get(jobj.optString("assetDetailsId"));
                    }
                }
                
                /*
                Below for loop is used to check the selected assets period is in sequential or not 
                */
                for (int i = 0; i < jArr1.length(); i++) {
                    jobj = jArr1.getJSONObject(i);
                    if (!(jobj.optString("assetDetailsId").equals(id))) {
                        if (!(maxPosted == (jArr1.getJSONObject(first).optInt("period") - 1) && (jArr1.getJSONObject(last - 1).optInt("period") - jArr1.getJSONObject(first).optInt("period")) == (last - 1) - first)) {
                            unOrderedAssetIDList.add(id);//Those asset id period is not selected in sequentially such assets are not 
                            assetIdsSet.add(assetID);//for showing message box ,Put in set for those asset id which is not selected in sequentially
                        }
                        first = last;
                        id = jobj.optString("assetDetailsId");
                        assetID = URLDecoder.decode(jobj.optString("assetId"), StaticValues.ENCODING);
                        if (assetIdWithPeriodMap.containsKey(jobj.optString("assetDetailsId"))) {
                            maxPosted = (Integer) assetIdWithPeriodMap.get(jobj.optString("assetDetailsId"));
                        }
                    }
                    /*
                    Below code is used to check last asset id in Json Array
                    */
                    if ((i == jArr1.length() - 1)) {
                        if (!(maxPosted == (jArr1.getJSONObject(first).optInt("period") - 1) && (jArr1.getJSONObject(last).optInt("period") - jArr1.getJSONObject(first).optInt("period")) == last - first)) {
                            unOrderedAssetIDList.add(id);//Those asset id period is not selected in sequentially such assets are not 
                            assetIdsSet.add(assetID);  //Put in set for those asset id which is not selected in sequentially
                        }
                    }
                    last++;
                }
            }
            
            
            messageString = messageSource.getMessage("acc.dep.post", null, RequestContextUtils.getLocale(request))+messageSource.getMessage("acc.dep.done", null, RequestContextUtils.getLocale(request));
            String msg = "<ol style='display: block;list-style-type: decimal;margin:1em;padding-left: 6px;'>";
            if (!isLockingPeriodDate && !(assetdetailIDList.isEmpty()) || !(unOrderedAssetIDList.isEmpty())) {
                Map<String, Object> paramsMap = new HashMap<>();
                paramsMap.put("assetdetailIDList", assetdetailIDList);
                paramsMap.put("companyId", companyId);
                if (assetdetailIDList.size() > 0) {
                    KwlReturnObject result = accProductObj.isOpeningDepreciationRemaining(paramsMap);
                    List openingAssetList = result.getEntityList();
                    assetdetailIDList = new ArrayList<>();
                    for (Object object : openingAssetList) {
                        Object row[] = (Object[]) object;
                        String id = (String) row[0];
                        String assetID = (String) row[1];
                        assetdetailIDList.add(id);
                        assetIdsSet.add(assetID);
                    }
                }
            }
            /*
             Below code is used to customize the message as if  Opening depreciation is not posted or Asset period is not in sequential order.
             */
            if (assetdetailIDList.size() > 0 || unOrderedAssetIDList.size() > 0 || isLockingPeriodDate || restrictPostDateBeforeInstDate.size() > 0) {
                messageString += messageSource.getMessage("acc.dep.notemsg", null, RequestContextUtils.getLocale(request)) + "<b>" + (isLockingPeriodDate?"":assetIdsSet.toString()) + "</b>" + " " + messageSource.getMessage("acc.dep.notemsg1", null, RequestContextUtils.getLocale(request));
                messageString += msg + "<li>" + messageSource.getMessage("acc.dep.remopening", null, RequestContextUtils.getLocale(request)) + "</li>" +  "<li>" + messageSource.getMessage("acc.dep.periodic", null, RequestContextUtils.getLocale(request)) + "</li>";
                if(isLockingPeriodDate){
                    messageString+="<li>" + errorMsg + "</li>" ;
                }
                if (restrictPostDateBeforeInstDate.size() > 0) {
                    messageString += "<li>" + messageSource.getMessage("acc.dep.wrongpostdate", null, RequestContextUtils.getLocale(request)) + "</li>";
                }
                messageString+="</ol>";
            }

            //Creating BlockingQueue of size Constants.DEPRECIATION_LIMIT
            if (!isLockingPeriodDate) {
                BlockingQueue<JSONObject> queue = new ArrayBlockingQueue<>(Constants.DEPRECIATION_LIMIT);
                DepreciationProducerThread depreciationProducerThread = new DepreciationProducerThread(queue);
                DepreciationConsumerThread depreciationConsumerThread = new DepreciationConsumerThread(queue);
                depreciationConsumerThread.setTxnManager(txnManager);
                depreciationConsumerThread.setkwlCommonTablesDAO(kwlCommonTablesDAOObj);
                depreciationConsumerThread.setaccCompanyPreferencesDAO(accCompanyPreferencesObj);
                depreciationConsumerThread.setAccJournalEntryDAO(accJournalEntryobj);
                depreciationConsumerThread.setaccProductDAO(accProductObj);
                depreciationConsumerThread.setauditTrailDAO(auditTrailObj);
                depreciationConsumerThread.setaccAccountDAO(accAccountDAOobj);
                depreciationConsumerThread.setFieldManagerDAO(fieldManagerDAOobj);
                depreciationConsumerThread.setFieldDataManager(fieldDataManagercntrl);

                Map<String, Object> reqMap = new HashMap<>();
                reqMap.put("detail", detail);
                /*
                 If no any asset opening depreciation posting is remaining then no need to put in reqmap
                 */
                if (!assetdetailIDList.isEmpty()) {
                    reqMap.put("assetdetailIDList", assetdetailIDList);
                }
                if (!unOrderedAssetIDList.isEmpty()) {
                    reqMap.put("unOrderedAssetIDList", unOrderedAssetIDList);
                }
                if (!restrictPostDateBeforeInstDate.isEmpty()) {
                    reqMap.put("restrictPostDateBeforeInstDate", restrictPostDateBeforeInstDate);
                }             
                depreciationProducerThread.add(reqMap);

                //starting producer to produce messages in queue
                Thread p = new Thread(depreciationProducerThread);
                p.start();
                System.out.println("DepreciationProducerThread has been started");

                Map<String, Object> requestMap = AccountingManager.getGlobalParams(request);
                requestMap.put("assetdetailList", assetdetailList);
                requestMap.put("Cal", Cal);
                requestMap.put("currencyid", currencyid);
                requestMap.put("postOption", postOption);
                requestMap.put("costcenter", request.getParameter("costcenter"));
                requestMap.put("userfullname", userfullname);
                //For audittrail
                requestMap.put(Constants.reqHeader, StringUtil.getIpAddress(request));
                requestMap.put(Constants.remoteIPAddress, request.getRemoteAddr());
                requestMap.put(Constants.useridKey, companySessionObj.getUserid());
                //For audittrail
                depreciationConsumerThread.add(requestMap);

                //starting consumer to consume messages from queue
                Thread c = new Thread(depreciationConsumerThread);
                c.start();
                System.out.println("DepreciationConsumerThread has been started");
            }

        } catch (UnsupportedEncodingException ex) {
            Logger.getLogger(accProductControllerCMN.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
        } catch (ServiceException ex) {
            Logger.getLogger(accProductControllerCMN.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
        } catch (JSONException ex) {
            Logger.getLogger(accProductControllerCMN.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
        }
        return  messageString;
        }
    public void createCustomArray(HashMap<String, Object> params, JSONArray customArray,int customColumn) {
        String companyId = "";
        String assetId = "";
        if (params.containsKey("companyId")) {
            companyId = params.get("companyId").toString();
        }
        if (params.containsKey("assetId")) {
            assetId = params.get("assetId").toString();
        }
        /*
        Get Line level custom fields of Journal Entry
        */
        HashMap<String, Object> requestParams1 = new HashMap<String, Object>();
        requestParams1.put(Constants.filter_names, Arrays.asList(Constants.companyid, Constants.customcolumn, "moduleid"));
        requestParams1.put(Constants.filter_values, Arrays.asList(companyId, customColumn, Constants.Acc_GENERAL_LEDGER_ModuleId));
        KwlReturnObject result = accAccountDAOobj.getFieldParams(requestParams1);
        List<FieldParams> list = result.getEntityList();
        for (FieldParams fieldParams : list) {
            try {
                int col= fieldManagerDAOobj.getColumnFromFieldParams(fieldParams.getFieldlabel(),companyId,Constants.Acc_FixedAssets_Details_ModuleId,customColumn);
               /*
                Get column from Field Params for custom field
                If Field not present in Asset Deatils
                */
                if(col==0){
                    continue;
                }
                /*
                get Value from AssetCustom data 
                */
                String value = accProductObj.getfieldComboIdFromAssetDetail(assetId, "col" + col);
                if (!StringUtil.isNullOrEmpty(value)) {
                    if (fieldParams.getFieldtype() == 4 || fieldParams.getFieldtype() == 7) {
                        String[] valueArr = value.split(",");
                        String val = "";
                        for (int i = 0; i < valueArr.length; i++) {
                            FieldComboData comboData = (FieldComboData) kwlCommonTablesDAOObj.getClassObject(FieldComboData.class.getName(), valueArr[i]);
                            if (comboData != null) {
                                val += comboData.getValue() + ",";
                            }
                        }
                        val = val.substring(0, val.length() - 1);
                        if (!StringUtil.isNullOrEmpty(val)) {
                            value = fieldManagerDAOobj.getIdsUsingParamsValue(fieldParams.getId(), val);
                        }
                    }
                    JSONObject jSONObject = new JSONObject();
                    jSONObject.put("filedid", fieldParams.getId());
                    jSONObject.put("Custom_"+fieldParams.getFieldlabel(), "Col" + fieldParams.getColnum());
                    jSONObject.put("xtype", "" + fieldParams.getFieldtype());
                    jSONObject.put("refcolumn_name", "Col" + fieldParams.getRefcolnum());
                    jSONObject.put("Col" + fieldParams.getColnum(), value);
                    jSONObject.put("fieldname", "Custom_"+fieldParams.getFieldlabel());
                    customArray.put(jSONObject);
                }
            } catch (ServiceException ex) {
                Logger.getLogger(accProductControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
            } catch (JSONException ex) {
                Logger.getLogger(accProductControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }
    
    public void saveJECustomData(HashMap<String, Object> customrequestParams) throws JSONException {
        try {
            JSONArray customArray = null;
            String jedId = "";
            String companyId = "";
            if (customrequestParams.containsKey("customArray")) {
                customArray = new JSONArray(customrequestParams.get("customArray").toString());
            }
            if (customrequestParams.containsKey("jedId")) {
                jedId = customrequestParams.get("jedId").toString();
            }
            if (customrequestParams.containsKey("companyId")) {
                companyId = customrequestParams.get("companyId").toString();
            }
            if (customArray.length() > 0 && !StringUtil.isNullOrEmpty(jedId)) {
                customrequestParams = new HashMap<String, Object>();
                customrequestParams.put("customarray", customArray);
                customrequestParams.put("modulename", Constants.Acc_JEDetail_modulename);
                customrequestParams.put("moduleprimarykey", Constants.Acc_JEDetailId);// Constants.Acc_JEDetail_recdetailId
                customrequestParams.put("modulerecid", jedId);
                customrequestParams.put("recdetailId", jedId);
                customrequestParams.put("moduleid", Constants.Acc_GENERAL_LEDGER_ModuleId);
                customrequestParams.put("companyid", companyId);
                customrequestParams.put("customdataclasspath", Constants.Acc_BillInvDetail_custom_data_classpath);
                KwlReturnObject customDataresult = fieldDataManagercntrl.setCustomData(customrequestParams);
                if (customDataresult != null && customDataresult.getEntityList().size() > 0) {
                    JSONObject jedjson1 = new JSONObject();
                    jedjson1.put("accjedetailcustomdata", jedId);
                    jedjson1.put("jedid", jedId);
                    KwlReturnObject jedresult = accJournalEntryobj.updateJournalEntryDetails(jedjson1);
                }
            }

        } catch (ServiceException ex) {
            Logger.getLogger(accProductControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    public ModelAndView getLocationSummary(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        JSONArray DataJArr = new JSONArray();
        boolean issuccess = false;
        String msg = "";
        try {
            HashMap<String, Object> requestParams = new HashMap<String, Object>();
            requestParams.put(Constants.df, authHandler.getDateOnlyFormat(request));
            String startstr = request.getParameter("start");
            String limitstr = request.getParameter("limit");
            requestParams.put(Constants.start, startstr);
            requestParams.put(Constants.limit, limitstr);
            requestParams.put(Constants.ss, request.getParameter("ss"));
            requestParams.put(Constants.companyid, sessionHandlerImpl.getCompanyid(request));
            requestParams.put(Constants.globalCurrencyKey, sessionHandlerImpl.getCurrencyID(request));
            requestParams.put(Constants.REQ_startdate, request.getParameter(Constants.REQ_startdate));
            requestParams.put(Constants.REQ_enddate, request.getParameter(Constants.REQ_enddate));
            String type=request.getParameter("type");
            requestParams.put("storageType", type);
            requestParams.put("isFromStockValuationSummary", true);
            ExtraCompanyPreferences extraCompanyPreferences = null;
            KwlReturnObject extraprefresult = accountingHandlerDAOobj.getObject(ExtraCompanyPreferences.class.getName(), sessionHandlerImpl.getCompanyid(request));
            extraCompanyPreferences = extraprefresult != null ? (ExtraCompanyPreferences) extraprefresult.getEntityList().get(0) : null;
            requestParams.put("isActivateMRPModule", extraCompanyPreferences.isActivateMRPModule());
//            requestParams.put("type",type);
//            KwlReturnObject result = accProductObj.getLocationSummary(requestParams);
//                        
//            HashMap<String, Object> companyPriceListParams = new HashMap<String, Object>();
//            companyPriceListParams.put("isPurchase", true);
//            KwlReturnObject kwlCompanyMaxDateProductPriceList = accProductObj.getAllProductsMaxAppliedDatePriceDetails(sessionHandlerImpl.getCompanyid(request), companyPriceListParams);
//            Map<String, Object[]> companyMaxDateProductPriceList = AccReportsHandler.getcompanyMaxDateProductPriceListMap(kwlCompanyMaxDateProductPriceList.getEntityList());
//
//            List list = result.getEntityList();
//            DataJArr = getLocationSummaryJson(request, list,companyMaxDateProductPriceList);
            DataJArr = AccProductService.getInventoryValuationData(requestParams);
            int count = DataJArr.length();
            if (StringUtil.isNullOrEmpty(startstr) == false && StringUtil.isNullOrEmpty(limitstr) == false) {
                int start = Integer.parseInt(startstr);
                int limit = Integer.parseInt(limitstr);
                DataJArr = StringUtil.getPagedJSON(DataJArr, start, limit);
            }
            
            jobj.put("data", DataJArr);
            jobj.put("totalCount", count);
            issuccess = true;
        } catch (SessionExpiredException ex) {
            msg = ex.getMessage();
            Logger.getLogger(accProductController.class.getName()).log(Level.SEVERE, null, ex);
//        } catch (ServiceException ex) {
//            msg = ex.getMessage();
//            Logger.getLogger(accProductController.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            msg = "" + ex.getMessage();
            Logger.getLogger(accProductController.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                jobj.put("success", issuccess);
                jobj.put("msg", msg);
            } catch (JSONException ex) {
                Logger.getLogger(accProductController.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return new ModelAndView("jsonView", "model", jobj.toString());
    }
     public JSONArray getLocationSummaryJson(HttpServletRequest request, List list,Map<String, Object[]> companyMaxDateProductPriceList) throws JSONException, ServiceException, ParseException {
        JSONArray jArr = new JSONArray();
        try {
            String gcurrencyid = sessionHandlerImpl.getCurrencyID(request);
            String companyid = sessionHandlerImpl.getCompanyid(request);
            int type=6;
            if(!StringUtil.isNullOrEmpty(request.getParameter("type"))){
                type=Integer.parseInt(request.getParameter("type"));
            }
            Iterator<InventoryLocation> locationItr=null;
            Iterator<InventoryWarehouse> warehouseItr=null;
            Iterator<StoreMaster> storeMasterItr=null;
            Iterator<ProductBatch> productBatchItr=null;
            InventoryLocation inventoryLocation=null;
            InventoryWarehouse inventoryWarehouse=null;
            ProductBatch productBatch=null;
            StoreMaster storeMaster=null;
            switch(type){
                case 1:
                    warehouseItr=list.iterator();
                    break;
                case 2:
                   locationItr=list.iterator();
                    break;
                case 6:
                    productBatchItr=list.iterator();
                    break;
                 default:
                     storeMasterItr=list.iterator();
                     break;
            }
            while((locationItr!=null && locationItr.hasNext()) || (warehouseItr!=null && warehouseItr.hasNext()) || (storeMasterItr!=null && storeMasterItr.hasNext())) {
                
             JSONObject obj = new JSONObject();
              HashMap<String, Object> requestParams = new HashMap<String, Object>();
                switch(type){
                case 1:
                    inventoryWarehouse=warehouseItr.next();
                    obj.put("locationid", inventoryWarehouse.getId());
                    obj.put("locationName", inventoryWarehouse.getName());
                    requestParams.put("locationid", inventoryWarehouse.getId());
                    break;
                case 2:
                    inventoryLocation=locationItr.next();
                    obj.put("locationid", inventoryLocation.getId());
                    obj.put("locationName", inventoryLocation.getName());
                    requestParams.put("locationid", inventoryLocation.getId());
                    break;
                case 6:
                    productBatch = productBatchItr.next();
                    obj.put("locationid", productBatch.getId());
                    obj.put("locationName", productBatch.getName());
                    requestParams.put("locationid", productBatch.getId());
                    break;
                 default:
                     storeMaster=storeMasterItr.next();
                     obj.put("locationid", storeMaster.getId());
                     obj.put("locationName", storeMaster.getName());
                     requestParams.put("locationid", storeMaster.getId());
                     break;
            }   
                requestParams.put(Constants.df, authHandler.getDateOnlyFormat(request));
                requestParams.put(Constants.REQ_startdate, request.getParameter("startdate"));
                requestParams.put(Constants.REQ_enddate, request.getParameter("enddate"));
                requestParams.put("batchname", request.getParameter("batchname"));
                requestParams.put("companyid", sessionHandlerImpl.getCompanyid(request));
                requestParams.put("gcurrencyid", gcurrencyid);
                requestParams.put("type",type);
                KwlReturnObject result = accProductObj.getQuantityAndRateOfProductForLocation(requestParams);
                List<Object[]> resultList = result.getEntityList();

                if (type != 6) {
                    KwlReturnObject rateandQtyResult = accProductObj.getAvailablequantityBatches(requestParams);
                    List rateandQtyList = rateandQtyResult.getEntityList();
                    Iterator it = rateandQtyList.iterator();
                    while (it.hasNext()) {
                        Object[] Objrow = (Object[]) it.next();
                        String batchnames = (String) Objrow[1];
                        String store = (String) Objrow[3];
                        String location = (String) Objrow[2];
                        String product = (String) Objrow[4];
                        requestParams.put("store", store);
                        requestParams.put("location", location);
                        requestParams.put("product", product);
                        String[] batchnamesArr = batchnames.split(",");
                        for (String btch : batchnamesArr) {
                            requestParams.put("batchnames", btch);
                            KwlReturnObject batchDet = accProductObj.getquantityAndRateOfProductForInventory(requestParams);
                            List batchDetList = batchDet.getEntityList();
                            Iterator batchDetit = batchDetList.iterator();
                            while (batchDetit.hasNext()) {
                                Object[] row = (Object[]) batchDetit.next();
                                double perUnitPrice = Double.parseDouble(row[0].toString());
                                String companyId = sessionHandlerImpl.getCompanyid(request);
                                String batchName = (String) row[1];
                                String batchWarehouse = (String) row[2];
                                String batchLocation = (String) row[3];
                                String batchRow = (String) row[4];
                                String batchRack = (String) row[5];
                                String batchBin = (String) row[6];
                                String batchProduct = (String) row[7];
                                KwlReturnObject npbobj = accProductObj.getERPProductBatch(companyId, batchProduct, batchWarehouse, batchLocation, batchRow, batchRack, batchBin, batchName, perUnitPrice);
                                if (npbobj != null && npbobj.getRecordTotalCount() > 0) {
                                    Object[] obj1 = (Object[]) npbobj.getEntityList().get(0);
                                    resultList.add(obj1);
                                }
                            }
                        }
                    }
                }
                
                
                double amount = 0.0;
                double rate = 0.0;
//                double baseUomQuantity = 0.0;
                Set<String> productSet = new HashSet();
                for(Object[] objRow : resultList) {
                    Double spotrate=0.0;
                    String groid = (String) objRow[4];
                    String batchName = (String) objRow[7];
                    KwlReturnObject accresultGRDetail = accountingHandlerDAOobj.getObject(GoodsReceiptOrderDetails.class.getName(), groid);
                    GoodsReceiptOrderDetails grd = (GoodsReceiptOrderDetails) accresultGRDetail.getEntityList().get(0);
                    if (grd != null && grd.getGrOrder().getExternalCurrencyRate() != 0) {
                        spotrate = grd.getGrOrder().getExternalCurrencyRate();
                    }
                    HashMap<String, Object> requestParamsForSR = new HashMap<String, Object>();
//                    requestParamsForSR.put("companyid", sessionHandlerImpl.getCompanyid(request));
//                    requestParamsForSR.put("groid", groid);
//                    boolean isOpeningTransaction = Boolean.parseBoolean((String) objRow[5]);
                    String batchid="";
//                    String LocationName = invloc.getName();
//                    if (isOpeningTransaction) {
                        batchid = (String) objRow[4];
//                    }
//                    KwlReturnObject resultOfSRno = accProductObj.getSerialNoWhoseDONotCreated(requestParamsForSR);
//                    List<String> listOfSRno = resultOfSRno.getEntityList();
                     List<String> listOfSRno=Arrays.asList((String) objRow[10]);
//                    if (!StringUtil.isNullOrEmpty(batchid)) {
//                        listOfSRno.add(batchid);
//                    }
                    for(int i=0;i<listOfSRno.size();i++){
                      if (!(listOfSRno.isEmpty())) {
                        if (listOfSRno.get(i) != null) {
                            requestParamsForSR.put("batchId", listOfSRno.get(i).toString());
                        }

                    }
                    List qlist = null;
                            double quantity = 0.0;
                            double availableQty = 0.0;
                        if (objRow[7] != null && !objRow[7].toString().equals("")) {
                            qlist = accProductObj.getQuantityWhoseDOCreated(requestParamsForSR);             // return quantity for which DO,SR ,PR made
                            if (!qlist.isEmpty()) {
                                if ((qlist.get(0)) != null) {
                                    availableQty = Double.parseDouble(qlist.get(0).toString());  // quantity whose SR created                    
                                }
                            }
                            while (availableQty > 0) {
//                        for (String SRid : listOfSRno) {
                                rate = (objRow[0] != null) ? Double.parseDouble(objRow[0].toString()) : 0.0;
                                double baseUomQuantity = (objRow[1] != null) ? (Double) objRow[1] : 0.0;
                                double baseuomrate = (objRow[12] != null) ? Double.parseDouble(objRow[12].toString()) : 1;
                                rate = rate / baseuomrate;
//                        rate = rate / baseUomQuantity;     // Need to comment this line because base UOM quantity related sr. no changes not merged yet in this checkout
                                quantity++;
                                if (!StringUtil.isNullOrEmpty(objRow[3].toString())) {
                                    KwlReturnObject crresult = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, rate, (String) objRow[2], (Date) objRow[3], spotrate);
                                    rate = (Double) crresult.getEntityList().get(0);
                                }
                                amount += rate;
//                        }
                                availableQty--;
                            }
                            /////////////////////////////Commented below code and added above code same as Detail Report to show value properly. //
//                    for(String SRid : listOfSRno) {
//                        rate = (objRow[0] != null) ? (Double) objRow[0] : 0.0;
//                        baseUomQuantity = (objRow[1] != null) ? (Double) objRow[1] : 0.0;
//                        KwlReturnObject crresult = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, rate, (String) objRow[2], (Date) objRow[3], 0);
//                        rate = (Double) crresult.getEntityList().get(0);
//                        amount += rate;
//                    }
                            ///////////////////////////
                        }
                         else {
                            if (!productSet.contains((String) objRow[11])) {      //Check if valuation of batch without name is calculated or not.
                                JSONObject valueArr = new JSONObject();
                                DateFormat df1 = (DateFormat) requestParams.get(Constants.df);
                                valueArr = getValuationJson(request, requestParams, (String) objRow[11], null, null,companyMaxDateProductPriceList);
                                amount += valueArr.getDouble("valuation");
                                productSet.add((String) objRow[11]);
                            } else {
                                continue;
                            }
                        }
                    }
                }
                obj.put("value", authHandler.round(amount, companyid));
                jArr.put(obj);
                }
                
        } catch (SessionExpiredException ex) {
            Logger.getLogger(accProductControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
        }
        return jArr;
    }
    
     /*
        Following function is written for ERP-41750/SDP-16293
        In case of csv and excel wrong values were exported.
     */
    public ModelAndView exportValuationSummary(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        String view = "jsonView_ex";
        try {
            HashMap<String, Object> requestParams = new HashMap<String, Object>();
            requestParams.put(Constants.df, authHandler.getDateOnlyFormat(request));
            String startstr = request.getParameter("start");
            String limitstr = request.getParameter("limit");
            requestParams.put(Constants.start, startstr);
            requestParams.put(Constants.limit, limitstr);
            requestParams.put(Constants.ss, request.getParameter("ss"));
            requestParams.put(Constants.companyid, sessionHandlerImpl.getCompanyid(request));
            requestParams.put(Constants.globalCurrencyKey, sessionHandlerImpl.getCurrencyID(request));
            requestParams.put(Constants.REQ_startdate, request.getParameter(Constants.REQ_startdate));
            requestParams.put(Constants.REQ_enddate, request.getParameter(Constants.REQ_enddate));
            requestParams.put("type", request.getParameter("type"));
            requestParams.put("storageType", request.getParameter("type"));
            requestParams.put("isFromStockValuationSummary", true);

            JSONArray DataJArr = AccProductService.getInventoryValuationData(requestParams);

            jobj.put("data", DataJArr);

            exportDaoObj.processRequest(request, response, jobj);
            jobj.put("success", true);
        } catch (SessionExpiredException ex) {
            Logger.getLogger(accProductControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            Logger.getLogger(accProductControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
        }
        return new ModelAndView(view, "model", jobj.toString());
    }
    
    public ModelAndView exportLocationSummary(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        String view = "jsonView_ex";
        try{
            String companyid = sessionHandlerImpl.getCompanyid(request);
            
            /**
             * if MRP is Activated, isActivateMRPModule flag will be true to get all MRP related transaction.
             * otherwise isActivateMRPModule flag will be false which will not return MRP related transaction.
             */            
            boolean isActivateMRPModule = false;
            Map<String, Object> filterMap = new HashMap();
            filterMap.put(Constants.Acc_id, companyid);
            Object extraPrefActivateMRP = kwlCommonTablesDAOObj.getRequestedObjectFields(ExtraCompanyPreferences.class, new String[]{"activateMRPModule"}, filterMap);
            if (extraPrefActivateMRP != null) {
                isActivateMRPModule = (Boolean) extraPrefActivateMRP;
            }

            HashMap<String, Object> requestParams = new HashMap<String, Object>();
            requestParams.put(Constants.df, authHandler.getDateOnlyFormat(request));
            requestParams.put("start", request.getParameter("start"));
            requestParams.put("limit", request.getParameter("limit"));
            requestParams.put("ss", request.getParameter("ss"));
            requestParams.put("companyid", companyid);
            requestParams.put("type", request.getParameter("type"));
            requestParams.put(Constants.isActivateMRPModule, isActivateMRPModule);
            
            KwlReturnObject result = accProductObj.getLocationSummary(requestParams);
            List list = result.getEntityList();
            HashMap<String, Object> companyPriceListParams = new HashMap<String, Object>();
            companyPriceListParams.put("isPurchase", true);
            KwlReturnObject kwlCompanyMaxDateProductPriceList = accProductObj.getAllProductsMaxAppliedDatePriceDetails(sessionHandlerImpl.getCompanyid(request), companyPriceListParams);
            Map<String, Object[]> companyMaxDateProductPriceList = AccReportsHandler.getcompanyMaxDateProductPriceListMap(kwlCompanyMaxDateProductPriceList.getEntityList());

            JSONArray DataJArr = getLocationSummaryJson(request, list, companyMaxDateProductPriceList);
            jobj.put("data", DataJArr);
            
            String fileType = request.getParameter("filetype");
            if (StringUtil.equal(fileType, "print")) {
                String  GenerateDate = authHandler.getDateFormatter(request).format(new Date());
                jobj.put("GenerateDate", GenerateDate);
                view = "jsonView-empty";
            }
            exportDaoObj.processRequest(request, response, jobj);
            jobj.put("success", true);
        } catch (SessionExpiredException ex) {
            Logger.getLogger(accProductControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
        } catch(Exception ex) {
            Logger.getLogger(accProductControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
        }
        return new ModelAndView(view, "model", jobj.toString());
    }
    
    public ModelAndView getStockValuationDetailReport(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        JSONArray DataJArr = new JSONArray();
        boolean issuccess = false;
        String msg = "";
        try {
                HashMap<String, Object> requestParams = new HashMap<String, Object>();
            requestParams.put(Constants.df, authHandler.getDateOnlyFormat(request));
//            requestParams.put("start", request.getParameter("start"));
//            requestParams.put("limit", request.getParameter("limit"));
            String startstr = (String) request.getParameter(Constants.start);
            String limitstr = (String) request.getParameter(Constants.limit);
            String companyid = sessionHandlerImpl.getCompanyid(request);
            double gTotal=0;
//            requestParams.put("locationid", request.getParameter("locationid"));
//            requestParams.put("request", request.getParameter("request"));
//            requestParams.put("type", request.getParameter("type"));
//            requestParams.put("companyid", sessionHandlerImpl.getCompanyid(request));
            requestParams.put(Constants.companyid, sessionHandlerImpl.getCompanyid(request));
            requestParams.put(Constants.globalCurrencyKey, sessionHandlerImpl.getCurrencyID(request));
            requestParams.put(Constants.REQ_startdate, request.getParameter(Constants.REQ_startdate));
            requestParams.put(Constants.REQ_enddate, request.getParameter(Constants.REQ_enddate));
            requestParams.put(Constants.ss, request.getParameter(Constants.ss));
            requestParams.put("productCategoryid", request.getParameter("productcategory"));
            String type=request.getParameter("type");
            requestParams.put("storageType", type);
            requestParams.put("storageTypeId", request.getParameter("locationid"));
            requestParams.put("isactivatelandedinvamt", request.getParameter("isactivatelandedinvamt"));
            requestParams.put("batchName", request.getParameter("batchname"));
            requestParams.put("isFromStockValuationDetail", true);
            ExtraCompanyPreferences extraCompanyPreferences = null;
            KwlReturnObject extraprefresult = accountingHandlerDAOobj.getObject(ExtraCompanyPreferences.class.getName(), companyid);
            extraCompanyPreferences = extraprefresult != null ? (ExtraCompanyPreferences) extraprefresult.getEntityList().get(0) : null;
            requestParams.put("isActivateMRPModule", extraCompanyPreferences.isActivateMRPModule());
            
//            HashMap<String, Object> companyPriceListParams = new HashMap<String, Object>();
//            companyPriceListParams.put("isPurchase", true);
//            KwlReturnObject kwlCompanyMaxDateProductPriceList = accProductObj.getAllProductsMaxAppliedDatePriceDetails(sessionHandlerImpl.getCompanyid(request), companyPriceListParams);
//            Map<String, Object[]> companyMaxDateProductPriceList = AccReportsHandler.getcompanyMaxDateProductPriceListMap(kwlCompanyMaxDateProductPriceList.getEntityList());
//
//            KwlReturnObject result = accProductObj.getLocationSummary(requestParams);
//            List list = result.getEntityList();
//            DataJArr = getStockValuationDetailReportJson(request, list,companyMaxDateProductPriceList);
            requestParams.put("grandTotal", gTotal);
            DataJArr = AccProductService.getInventoryValuationData(requestParams);
            int count = DataJArr.length();
            if (count > 0 && StringUtil.isNullOrEmpty(startstr) == false && StringUtil.isNullOrEmpty(limitstr) == false) {
                int start = Integer.parseInt(startstr);
                int limit = Integer.parseInt(limitstr);
                DataJArr = StringUtil.getPagedJSONWithPageTotalAmount(DataJArr, start, limit);
                DataJArr.getJSONObject(DataJArr.length()-1).put("grandTotalInBase", requestParams.containsKey("gTotal")? requestParams.get("gTotal"):0);
            }
            jobj.put("data", DataJArr);
            jobj.put("count", count);
            issuccess = true;
        } catch (SessionExpiredException ex) {
            msg = ex.getMessage();
            Logger.getLogger(accProductController.class.getName()).log(Level.SEVERE, null, ex);
//        } catch (ServiceException ex) {
//            msg = ex.getMessage();
//            Logger.getLogger(accProductController.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            msg = "" + ex.getMessage();
            Logger.getLogger(accProductController.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                jobj.put("success", issuccess);
                jobj.put("msg", msg);
            } catch (JSONException ex) {
                Logger.getLogger(accProductController.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return new ModelAndView("jsonView", "model", jobj.toString());
    }
    
    public ModelAndView exportStockValuationDetailReport(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        String view = "jsonView_ex";
        boolean issuccess = false;
        String msg = "";
        try {
            String type = "";
            HashMap<String, Object> requestParams = new HashMap<String, Object>();
            requestParams.put(Constants.df, authHandler.getDateOnlyFormat(request));
//            requestParams.put("start", request.getParameter("start"));
//            requestParams.put("limit", request.getParameter("limit"));
//            requestParams.put("locationid", request.getParameter("locationid"));
//            requestParams.put("companyid", sessionHandlerImpl.getCompanyid(request));
            if(!StringUtil.isNullOrEmpty(request.getParameter("type"))){
                type = request.getParameter("type");
            }
//            requestParams.put("type",type);
            String companyid=sessionHandlerImpl.getCompanyid(request);            
            /**
             * if MRP is Activated, isActivateMRPModule flag will be true to get all MRP related transaction.
             * otherwise isActivateMRPModule flag will be false which will not return MRP related transaction.
             */            
            boolean isActivateMRPModule = false;
            Map<String, Object> filterMap = new HashMap();
            filterMap.put(Constants.Acc_id, companyid);
            Object extraPrefActivateMRP = kwlCommonTablesDAOObj.getRequestedObjectFields(ExtraCompanyPreferences.class, new String[]{"activateMRPModule"}, filterMap);
            if (extraPrefActivateMRP != null) {
                isActivateMRPModule = (Boolean) extraPrefActivateMRP;
            }
            
            requestParams.put(Constants.companyid, companyid);
            requestParams.put(Constants.globalCurrencyKey, sessionHandlerImpl.getCurrencyID(request));
            requestParams.put(Constants.REQ_startdate, request.getParameter(Constants.REQ_startdate));
            requestParams.put(Constants.REQ_enddate, request.getParameter(Constants.REQ_enddate));
            requestParams.put(Constants.ss, request.getParameter(Constants.ss));
            requestParams.put("storageType", type);
            requestParams.put("storageTypeId", request.getParameter("locationid"));
            requestParams.put("batchName", request.getParameter("batchname"));
            requestParams.put("isFromStockValuationDetail", true);
            requestParams.put("productCategoryid", request.getParameter("productcategory"));
            requestParams.put(Constants.isActivateMRPModule, isActivateMRPModule);            
//            HashMap<String, Object> companyPriceListParams = new HashMap<String, Object>();
//            companyPriceListParams.put("isPurchase", true);
//            KwlReturnObject kwlCompanyMaxDateProductPriceList = accProductObj.getAllProductsMaxAppliedDatePriceDetails(sessionHandlerImpl.getCompanyid(request), companyPriceListParams);
//            Map<String, Object[]> companyMaxDateProductPriceList = AccReportsHandler.getcompanyMaxDateProductPriceListMap(kwlCompanyMaxDateProductPriceList.getEntityList());
//
//            KwlReturnObject result = accProductObj.getLocationSummary(requestParams);
//            List list = result.getEntityList();
//            JSONArray DataJArr = getStockValuationDetailReportJson(request, list,companyMaxDateProductPriceList);
            JSONArray DataJArr = AccProductService.getInventoryValuationData(requestParams);
            int count = DataJArr.length();
            jobj.put("data", DataJArr);
            jobj.put("count", count);
            
            String fileType = request.getParameter("filetype");
            if (StringUtil.equal(fileType, "print")) {
                String GenerateDate = authHandler.getDateFormatter(request).format(new Date());
                jobj.put("GenerateDate", GenerateDate);
                view = "jsonView-empty";
            }
            exportDaoObj.processRequest(request, response, jobj);
            issuccess = true;
        } catch (SessionExpiredException ex) {
            msg = ex.getMessage();
            Logger.getLogger(accProductController.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ServiceException ex) {
            msg = ex.getMessage();
            Logger.getLogger(accProductController.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            msg = "" + ex.getMessage();
            Logger.getLogger(accProductController.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                jobj.put("success", issuccess);
                jobj.put("msg", msg);
            } catch (JSONException ex) {
                Logger.getLogger(accProductController.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return new ModelAndView(view, "model", jobj.toString());
    }    
    
    public JSONArray getStockValuationDetailReportJson(HttpServletRequest request, List list,Map<String, Object[]> companyMaxDateProductPriceList) throws JSONException, ServiceException {
        JSONArray jArr = new JSONArray();
        JSONArray stockValuationDetailsjArr = new JSONArray();
        double totalcategorycost = 0;
        SimpleDateFormat df = new SimpleDateFormat("yyyy-MM-dd");
        String tempCategoryName = "";
        try {
            String companyid = sessionHandlerImpl.getCompanyid(request);
            int type = 6;
            boolean onlyBatches = false;
            if (!StringUtil.isNullOrEmpty(request.getParameter("type"))) {
                type = Integer.parseInt(request.getParameter("type"));
            }
            if (StringUtil.isNullOrEmpty(request.getParameter("type")) && (StringUtil.isNullOrEmpty(request.getParameter("batchid")) || !StringUtil.isNullOrEmpty(request.getParameter("batchid")))) {
                onlyBatches = true;
            }
            Iterator<InventoryLocation> locationItr=null;
            Iterator<InventoryWarehouse> warehouseItr=null;
            Iterator<StoreMaster> storeMasterItr=null;
            Iterator<NewProductBatch> batchItr=null;

            InventoryLocation inventoryLocation=null;
            InventoryWarehouse inventoryWarehouse=null;
            StoreMaster storeMaster=null;
            NewProductBatch newProductBatch=null;
            switch(type){
                case 1:
                    warehouseItr=list.iterator();
                    break;
                case 2:
                    locationItr = list.iterator();
                    break;
                case 6:
                    batchItr = list.iterator();
                    break;
                default:
                     storeMasterItr=list.iterator();
                    break;
            }
            KwlReturnObject currencyobj = accountingHandlerDAOobj.getObject(KWLCurrency.class.getName(), sessionHandlerImpl.getCurrencyID(request));
            KWLCurrency currency = (KWLCurrency) currencyobj.getEntityList().get(0);
            String gcurrencyid = sessionHandlerImpl.getCurrencyID(request);
            
            while((locationItr!=null && locationItr.hasNext()) || (warehouseItr!=null && warehouseItr.hasNext()) || (storeMasterItr!=null && storeMasterItr.hasNext())  || (batchItr!=null && batchItr.hasNext())) {

//             JSONObject obj = new JSONObject();
              HashMap<String, Object> requestParams = new HashMap<String, Object>();
              String locationName ="";
                switch(type){
                    case 1:
                        inventoryWarehouse = warehouseItr.next();
//                    obj.put("locationid", inventoryWarehouse.getId());
                        locationName = inventoryWarehouse.getName();
                        requestParams.put("locationid", inventoryWarehouse.getId());
                        break;
                    case 2:
                    inventoryLocation=locationItr.next();
//                    obj.put("locationid", inventoryLocation.getId());
                        locationName = inventoryLocation.getName();
                        requestParams.put("locationid", inventoryLocation.getId());
                        break;
                    case 6:
                        newProductBatch = batchItr.next();
                        locationName = "";
                        requestParams.put("locationid", newProductBatch.getId());
                        break;
                    default:
                     storeMaster=storeMasterItr.next();
//                     obj.put("locationid", storeMaster.getId());
                        locationName = storeMaster.getName();
                        requestParams.put("locationid", storeMaster.getId());
                        break;
                }
                
                requestParams.put(Constants.df, authHandler.getDateOnlyFormat(request));
                requestParams.put("companyid", sessionHandlerImpl.getCompanyid(request));
                requestParams.put("companyId", sessionHandlerImpl.getCompanyid(request));
                requestParams.put("batchid", request.getParameter("batchid"));
                requestParams.put("batchname", request.getParameter("batchname"));
                requestParams.put("onlyBatches",onlyBatches);
                requestParams.put("ss", request.getParameter("ss"));
                requestParams.put(Constants.REQ_startdate, request.getParameter("startdate"));
                requestParams.put(Constants.REQ_enddate, request.getParameter("enddate"));
                requestParams.put("gcurrencyid", gcurrencyid);
                requestParams.put("type", type);
                KwlReturnObject result = accProductObj.getQuantityAndRateOfProductForLocationDetails(requestParams);
                List<Object[]> resultList = result.getEntityList();
                
                if (type != 6) {
                    KwlReturnObject rateandQtyResult = accProductObj.getAvailablequantityBatches(requestParams);
                    List rateandQtyList = rateandQtyResult.getEntityList();
                    Iterator it = rateandQtyList.iterator();
                    while (it.hasNext()) {
                        Object[] Objrow = (Object[]) it.next();
                        String batchnames = (String) Objrow[1];
                        String store = (String) Objrow[3];
                        String location = (String) Objrow[2];
                        String product = (String) Objrow[4];
                        requestParams.put("store", store);
                        requestParams.put("location", location);
                        requestParams.put("product", product);
                        String[] batchnamesArr = batchnames.split(",");
                        for (String btch : batchnamesArr) {
                            requestParams.put("batchnames", btch);
                            KwlReturnObject batchDet = accProductObj.getquantityAndRateOfProductForInventory(requestParams);
                            List batchDetList = batchDet.getEntityList();
                            Iterator batchDetit = batchDetList.iterator();
                            while (batchDetit.hasNext()) {
                                Object[] row = (Object[]) batchDetit.next();
                                double perUnitPrice = Double.parseDouble(row[0].toString());
                                String companyId = sessionHandlerImpl.getCompanyid(request);
                                String batchName = (String) row[1];
                                String batchWarehouse = (String) row[2];
                                String batchLocation = (String) row[3];
                                String batchRow = (String) row[4];
                                String batchRack = (String) row[5];
                                String batchBin = (String) row[6];
                                String batchProduct = (String) row[7];
                                KwlReturnObject npbobj = accProductObj.getERPProductBatch(companyId, batchProduct, batchWarehouse, batchLocation, batchRow, batchRack, batchBin, batchName, perUnitPrice);
                                if (npbobj != null && npbobj.getRecordTotalCount() > 0) {
                                Object[] obj = (Object[]) npbobj.getEntityList().get(0);
                                resultList.add(obj);
                                }
                            }
                        }
                    }
                }
                Set<String> productSet = new HashSet();
                for (Object[] objRow : resultList) {
                    Double spotrate = 0.0;
                    String groid = (String) objRow[4];
                    String batchName = (String) objRow[7];
                    KwlReturnObject accresultGRDetail = accountingHandlerDAOobj.getObject(GoodsReceiptOrderDetails.class.getName(), groid);
                    GoodsReceiptOrderDetails grd = (GoodsReceiptOrderDetails) accresultGRDetail.getEntityList().get(0);
                    if (grd != null && grd.getGrOrder().getExternalCurrencyRate() != 0) {
                        spotrate = grd.getGrOrder().getExternalCurrencyRate();
                    }
                    String categoryName = (objRow[5] != null) ? (String) objRow[5] : "";
                    String productid = (String) objRow[6];
                    String productBatch = (String) objRow[7];
                    boolean isOpeningTransaction = Boolean.parseBoolean((String) objRow[9]);
                    String batchid="";
//                    String LocationName = invloc.getName();
//                    if (isOpeningTransaction) {
//                        batchid = (String) objRow[10];
//                    }

                    HashMap<String, Object> requestParamsForSR = new HashMap<String, Object>();
                    requestParamsForSR.put("companyid", sessionHandlerImpl.getCompanyid(request));
                    requestParamsForSR.put("groid", groid);
//                    KwlReturnObject resultOfSRno = accProductObj.getSerialNoWhoseDONotCreated(requestParamsForSR);  //return batch for which GR made
//                    List<String> listOfSRno = resultOfSRno.getEntityList();
                    List<String> listOfSRno=Arrays.asList((String) objRow[10]);
//                    if(!StringUtil.isNullOrEmpty(batchid)){
//                    listOfSRno.add(batchid);}
                    double grquantity = (Double) objRow[8];        //GR quantity
                    for(int i=0;i<listOfSRno.size();i++){
                        if (!(listOfSRno.isEmpty())) {
                            if (listOfSRno.get(i) != null) {
                                requestParamsForSR.put("batchId", listOfSRno.get(i).toString());
                            }

                        }
                        List qlist = null;

                        double amount = 0.0;
                        double rate = 0.0;
                        double quantity = 0.0;
                        double doquantity = 0.0;
                        double soldquantity = 0;
                        double salesreturnquantity = 0;
                        double availableQty = 0.0;
                        if (objRow[7] != null && !objRow[7].toString().equals("")) {
                            qlist = accProductObj.getQuantityWhoseDOCreated(requestParamsForSR);             // return quantity for which DO,SR ,PR made
//                    int avalquantity = (int) grquantity;                    //quantity whose GR created
//                    if ((qlist.get(1)) != null) {
//
//                        double purchasereturnqua = Double.parseDouble(qlist.get(1).toString());     // quantity whose PR created
//                        avalquantity = (int) (avalquantity - purchasereturnqua);
//                    }
//                    if ((qlist.get(0)) != null) {
//                        soldquantity=Double.parseDouble(qlist.get(0).toString());  // quantity whose DO created                     
//                    }
//                    if ((qlist.get(2)) != null) {
//                        salesreturnquantity = Double.parseDouble(qlist.get(2).toString());  // quantity whose SR created                    
//                    }
//                    avalquantity=(int)(avalquantity-(soldquantity-salesreturnquantity));        // quantity available in stock
                        if (!qlist.isEmpty()) {
                            if ((qlist.get(0)) != null) {
                                availableQty = Double.parseDouble(qlist.get(0).toString());  // quantity whose SR created  
                                productBatch=qlist.get(1).toString();
                            }
                        }
                         
//                        while (availableQty > 0) { // not use this code 
//
////                        for (String SRid : listOfSRno) {
//                            rate = (objRow[0] != null) ? (Double) objRow[0] : 0.0;
//                            double baseUomQuantity = (objRow[1] != null) ? (Double) objRow[1] : 0.0;
////                        rate = rate / baseUomQuantity;     // Need to comment this line because base UOM quantity related sr. no changes not merged yet in this checkout
//
//                            quantity++;
//
//
//                            String tansDate = (objRow[3]).toString();
//                            Date transactionDate = df.parse(tansDate);
//                            KwlReturnObject crresult = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, rate, (String) objRow[2], transactionDate, spotrate);
//                            rate = (Double) crresult.getEntityList().get(0);
//
//                            amount += rate;
////                                }
////                        avalquantity--;
//                            availableQty--;
//                        }
                            if (availableQty > 0) {

                                rate = (objRow[0] != null) ? Double.parseDouble(objRow[0].toString()) : 0.0;
                                double baseuomrate = (objRow[12] != null) ? Double.parseDouble(objRow[12].toString()) : 1;
                                rate = rate / baseuomrate;
                                quantity += availableQty;


                                String tansDate = (objRow[3]).toString();
                                if (!StringUtil.isNullOrEmpty(tansDate)) {
                                    Date transactionDate = df.parse(tansDate);
                                    KwlReturnObject crresult = null;
                                    crresult = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, rate, (String) objRow[2], transactionDate, spotrate);
                                    rate = (Double) crresult.getEntityList().get(0);
                                    amount = rate * availableQty;
                                } else {
                                    amount = rate * availableQty;
                                }
                                availableQty = 0;
                            }
                        } else {
                            if (!productSet.contains((String) objRow[11])) {      //Check if valuation of batch without name is calculated or not.
                                JSONObject valueArr = new JSONObject();
                                DateFormat df1 = (DateFormat) requestParams.get(Constants.df);
                                Date sdate = authHandler.getDateOnlyFormat(request).parse(request.getParameter("startdate"));  //Calculate Valuation of the Product for which only Location and warehouse is activated considering valuation method FIFO/LIFO/Average valuation
                                Date endDate = (authHandler.getDateOnlyFormat(request).parse(request.getParameter("enddate")));
                                valueArr = getValuationJson(request, requestParams, (String) objRow[11], sdate, endDate,companyMaxDateProductPriceList);
                                amount = valueArr.getDouble("valuation");
                                quantity = valueArr.getDouble("onhand");
                                rate = amount / quantity;
                                productSet.add((String) objRow[11]);
                            } else {
                                continue;
                            }
                        }
                        if (quantity != 0.0) {
                            if (tempCategoryName.equalsIgnoreCase(categoryName)) {
                                totalcategorycost += amount;
                            } else {
                                totalcategorycost = amount;
                            }

                            JSONObject obj = new JSONObject();
                            obj.put("productid", "ProductID - " + productid);
                            obj.put("productCategory", "Category - " + categoryName);
                            obj.put("locationName", locationName);
                            obj.put("productBatch", productBatch);
                            obj.put("quantity", quantity);
                            obj.put("rate", authHandler.roundUnitPrice(rate, companyid));
                            obj.put("value", authHandler.round(amount, companyid));
                            obj.put("currencysymbol", currency.getSymbol());
                            obj.put("currencyname", currency.getName());
                            obj.put("categoryName", "Grand");
                            obj.put("totalcategorycost", authHandler.round(totalcategorycost, companyid));
                            jArr.put(obj);
                        }
                    }
                }
                if (type == 6) {
                    if (newProductBatch != null) {
                        break;
                    }
                }
            }
        } catch (SessionExpiredException ex) {
            Logger.getLogger(accProductControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
        }catch (ParseException ex) {
            Logger.getLogger(accProductControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
        }
        return jArr;
    }
  
    public ModelAndView exportStockValByLocationJasper(HttpServletRequest request, HttpServletResponse response) {
        Map<String, Object> stockLocatioMap = new HashMap<String, Object>();
        String view = "stockValuation";
        FinanceDetails financeDetails = new FinanceDetails();
        List<FinanceDetails> financeDetailsList;
        try {
            String type = "";
            int templateflag = Integer.parseInt(request.getParameter("templateflag"));
            /*
             * COMPANY Header Details For JASPER;
             */
            financeDetailsList = getCompanyHeaderDetailsJasper(request);
            HashMap<String, Object> requestParams = new HashMap<String, Object>();
            requestParams.put(Constants.df, authHandler.getDateOnlyFormat(request));
//            requestParams.put("start", request.getParameter("start"));
//            requestParams.put("limit", request.getParameter("limit"));
//            requestParams.put("locationid", request.getParameter("locationid"));
//            requestParams.put("companyid", sessionHandlerImpl.getCompanyid(request));
            if(!StringUtil.isNullOrEmpty(request.getParameter("type"))){
                type = request.getParameter("type");
            }
//            requestParams.put("type",type);
            String companyid = sessionHandlerImpl.getCompanyid(request);
            boolean isActivateMRPModule = false;
            Map<String, Object> filterMap = new HashMap();
            filterMap.put(Constants.Acc_id, companyid);
            Object extraPrefActivateMRP = kwlCommonTablesDAOObj.getRequestedObjectFields(ExtraCompanyPreferences.class, new String[]{"activateMRPModule"}, filterMap);
            if (extraPrefActivateMRP != null) {
                isActivateMRPModule = (Boolean) extraPrefActivateMRP;
            }
            
            requestParams.put(Constants.companyid, companyid);
            requestParams.put(Constants.globalCurrencyKey, sessionHandlerImpl.getCurrencyID(request));
            requestParams.put(Constants.REQ_startdate, request.getParameter(Constants.REQ_startdate));
            requestParams.put(Constants.REQ_enddate, request.getParameter(Constants.REQ_enddate));
            requestParams.put(Constants.ss, request.getParameter(Constants.ss));
            requestParams.put("storageType", type);
            requestParams.put("storageTypeId", request.getParameter("locationid"));
            requestParams.put("batchName", request.getParameter("batchname"));
            requestParams.put("isFromStockValuationDetail", true);
            requestParams.put("productCategoryid", request.getParameter("productcategory"));
            requestParams.put(Constants.isActivateMRPModule, isActivateMRPModule);
//            HashMap<String, Object> companyPriceListParams = new HashMap<String, Object>();
//            companyPriceListParams.put("isPurchase", true);
//            KwlReturnObject kwlCompanyMaxDateProductPriceList = accProductObj.getAllProductsMaxAppliedDatePriceDetails(sessionHandlerImpl.getCompanyid(request), companyPriceListParams);
//            Map<String, Object[]> companyMaxDateProductPriceList = AccReportsHandler.getcompanyMaxDateProductPriceListMap(kwlCompanyMaxDateProductPriceList.getEntityList());
//
//            KwlReturnObject result = accProductObj.getLocationSummary(requestParams);
//            List list = result.getEntityList();
//            JSONArray DataJArr = getStockValuationDetailReportJson(request, list,companyMaxDateProductPriceList);
            JSONArray DataJArr = AccProductService.getInventoryValuationData(requestParams);

            stockLocatioMap = getStockValByLocationJasper(request, DataJArr);
            stockLocatioMap.put("format", "pdf");

            JasperPrint jasperPrint = null;
            JasperReport jasperReport = null;
            JasperReport jasperReportSubReport = null;
            InputStream inputStream = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/StockValuation.jrxml");
            JasperDesign jasperDesign = JRXmlLoader.load(inputStream);
            jasperReport = JasperCompileManager.compileReport(jasperDesign);

            InputStream inputStreamSubReport = null;
            if (templateflag == Constants.sustenir_templateflag) {
                inputStreamSubReport = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/SustenirStockValuationSubReport.jrxml");
            } else {
                inputStreamSubReport = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/StockValuationSubReport.jrxml");
            }
            JasperDesign jasperDesignSubReport = JRXmlLoader.load(inputStreamSubReport);
            jasperReportSubReport = JasperCompileManager.compileReport(jasperDesignSubReport);

            stockLocatioMap.put("StockValuationSubReport", jasperReportSubReport);
            JRBeanCollectionDataSource beanColDataSource = new JRBeanCollectionDataSource(financeDetailsList);
            jasperPrint = JasperFillManager.fillReport(jasperReport, stockLocatioMap, beanColDataSource);

            JRPdfExporter exp = new JRPdfExporter();
            exp.setParameter(JRExporterParameter.JASPER_PRINT, jasperPrint);
            exp.setParameter(JRPdfExporterParameter.OUTPUT_STREAM, response.getOutputStream());
            response.setHeader("Content-Disposition", "attachment;filename=" + "StockValuation_v1.pdf");
            exp.exportReport();

        } catch (NumberFormatException | SessionExpiredException | ServiceException | JSONException | JRException | IOException ex) {
            Logger.getLogger(accProductControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
        }
        return new ModelAndView("", stockLocatioMap);
    }
//    

    public Map<String, Object> getStockValByLocationJasper(HttpServletRequest request, JSONArray DataJarr) throws JSONException, ServiceException {
        Map<String, Object> stockLocatioMap = new HashMap<>();
        Map<String, Object> dataRowMap = new HashMap<>();
        List<Map<String, Object>> stockbyLocationList = new ArrayList<>();
        try {
            List<JSONObject> jsons = new ArrayList<JSONObject>();
            for (int i = 0; i < DataJarr.length(); i++) {
                jsons.add(DataJarr.getJSONObject(i));
            }
            Collections.sort(jsons, new Comparator<JSONObject>() {
                @Override
                public int compare(JSONObject lhs, JSONObject rhs) {
                    String lid = "", rid = "";
                    try {
                        lid = lhs.getString("locationName");
                        rid = rhs.getString("locationName");
                    } catch (JSONException ex) {
                        Logger.getLogger(authHandler.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    return lid.compareTo(rid);
                }
            });
            DataJarr = new JSONArray(jsons);
            for (int i = 0; i < DataJarr.length(); i++) {
                JSONObject job = DataJarr.getJSONObject(i);
                dataRowMap = new HashMap<>();
                dataRowMap.put("location", job.optString("locationName", ""));
                dataRowMap.put("locationDescription", job.optString("locationDescription", ""));
                dataRowMap.put("category", job.optString("productCategory", ""));
                dataRowMap.put("productid", job.optString("productIDJASPER", ""));
                dataRowMap.put("prodname", job.optString("productname", ""));
                dataRowMap.put("productBatch", job.optString("productBatch", ""));
                dataRowMap.put("productDesc", job.optString("productDesc", ""));
                dataRowMap.put("uom", job.optString("uom", ""));
                dataRowMap.put("quantity", job.optDouble("quantity", 0));
                dataRowMap.put("rate", job.optDouble("rate", 0));
                dataRowMap.put("value", job.optDouble("value", 0));
                stockbyLocationList.add(dataRowMap);
            }

        } catch (Exception ex) {
            Logger.getLogger(accProductController.class.getName()).log(Level.SEVERE, null, ex);
        }
        stockLocatioMap.put("StockValuationSubReportData", new JRBeanCollectionDataSource(stockbyLocationList));
        return stockLocatioMap;
    }

    public ModelAndView exportStockSummaryJasper(HttpServletRequest request, HttpServletResponse response) {
        String msg = "";
        Map<String, Object> stockSummaryMap = new HashMap<String, Object>();
        String view = "stockSummary";
        FinanceDetails financeDetails = new FinanceDetails();
        List<FinanceDetails> financeDetailsList = new ArrayList<FinanceDetails>();
        try {
            /*
             * Get header Information
             */
            financeDetailsList = getCompanyHeaderDetailsJasper(request);

            String companyid = sessionHandlerImpl.getCompanyid(request);
            HashMap<String, Object> requestParams = new HashMap<String, Object>();
            requestParams.put(Constants.df, authHandler.getDateOnlyFormat(request));
            String startstr = request.getParameter("start");
            String limitstr = request.getParameter("limit");
            requestParams.put(Constants.start, startstr);
            requestParams.put(Constants.limit, limitstr);
            requestParams.put(Constants.ss, request.getParameter("ss"));
            requestParams.put(Constants.companyid, companyid);
            requestParams.put(Constants.globalCurrencyKey, sessionHandlerImpl.getCurrencyID(request));
            requestParams.put(Constants.REQ_startdate, request.getParameter(Constants.REQ_startdate));
            requestParams.put(Constants.REQ_enddate, request.getParameter(Constants.REQ_enddate));
            String type=request.getParameter("type");
            String typeName = "";
            int typeValue = Integer.parseInt(type);
            requestParams.put("storageType", type);
            requestParams.put("isFromStockValuationSummary", true);

            
            /**
             * if MRP is Activated, isActivateMRPModule flag will be true to get all MRP related transaction.
             * otherwise isActivateMRPModule flag will be false which will not return MRP related transaction.
             */
            
            boolean isActivateMRPModule = false;
            Map<String, Object> filterMap = new HashMap();
            filterMap.put(Constants.Acc_id, companyid);
            Object extraPrefActivateMRP = kwlCommonTablesDAOObj.getRequestedObjectFields(ExtraCompanyPreferences.class, new String[]{"activateMRPModule"}, filterMap);
            if (extraPrefActivateMRP != null) {
                isActivateMRPModule = (Boolean) extraPrefActivateMRP;
            }
            requestParams.put(Constants.isActivateMRPModule, isActivateMRPModule);

            JSONArray DataJArr = AccProductService.getInventoryValuationData(requestParams);

            stockSummaryMap = getLocationSummaryJasper(request, DataJArr);

            stockSummaryMap.put("format", "pdf");
            switch (typeValue) {
                    case 1:
                       typeName = "Warehouse";
                        break;
                    case 2:
                        typeName = "Location";
                        break;
                    case 3:
                       typeName = "Row";
                        break;
                    case 4:
                        typeName = "Rack";
                        break;
                    case 5:
                        typeName = "Bin";
                        break;
                }
            stockSummaryMap.put("typeName", typeName);
            JasperPrint jasperPrint = null;
            JasperReport jasperReport = null;
            JasperReport jasperReportSubReport = null;
            InputStream inputStream = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/StockSummary.jrxml");
            JasperDesign jasperDesign = JRXmlLoader.load(inputStream);
            jasperReport = JasperCompileManager.compileReport(jasperDesign);
            InputStream inputStreamSubReport = new FileInputStream(request.getSession().getServletContext().getRealPath("jrxml") + "/StockSummarySubReport.jrxml");
            JasperDesign jasperDesignSubReport = JRXmlLoader.load(inputStreamSubReport);
            jasperReportSubReport = JasperCompileManager.compileReport(jasperDesignSubReport);
            stockSummaryMap.put("StockSummarySubReport", jasperReportSubReport);
            JRBeanCollectionDataSource beanColDataSource = new JRBeanCollectionDataSource(financeDetailsList);
            jasperPrint = JasperFillManager.fillReport(jasperReport, stockSummaryMap, beanColDataSource);

            JRPdfExporter exp = new JRPdfExporter();
            exp.setParameter(JRExporterParameter.JASPER_PRINT, jasperPrint);
            exp.setParameter(JRPdfExporterParameter.OUTPUT_STREAM, response.getOutputStream());
            response.setHeader("Content-Disposition", "attachment;filename=" + "StockSummary_v1.pdf");
            exp.exportReport();
        } catch (SessionExpiredException | ServiceException ex) {
            msg = ex.getMessage();
            Logger.getLogger(accProductController.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            msg = "" + ex.getMessage();
            Logger.getLogger(accProductController.class.getName()).log(Level.SEVERE, null, ex);
        }
        return new ModelAndView("", stockSummaryMap);
    }

public Map<String, Object> getLocationSummaryJasper(HttpServletRequest request, JSONArray DataJarr) throws JSONException, ServiceException {
      Map<String, Object> stockLocatioMap = new HashMap<>();
        Map<String, Object> dataRowMap = new HashMap<>();
        List<Map<String, Object>> stockbyLocationList = new ArrayList<>();
        try{
            String companyid = sessionHandlerImpl.getCompanyid(request); 
            for (int i = 0; i < DataJarr.length(); i++) {
                JSONObject job = DataJarr.getJSONObject(i);
                dataRowMap = new HashMap<>();
                dataRowMap.put("location", job.optString("locationName", ""));
                dataRowMap.put("locationDescription", job.optString("locationDescription", ""));
                dataRowMap.put("total", authHandler.round(job.optDouble("value", 0), companyid));
                stockbyLocationList.add(dataRowMap);
            }

        } catch (Exception ex) {
            Logger.getLogger(accProductController.class.getName()).log(Level.SEVERE, null, ex);
        }
        stockLocatioMap.put("StockSummarySubReportData", new JRBeanCollectionDataSource(stockbyLocationList));
        return stockLocatioMap;
    }

    public ModelAndView getSerialNos(HttpServletRequest request, HttpServletResponse response) throws JSONException, ServiceException {
        JSONObject jobj = new JSONObject();
        String view = "jsonView";
        boolean issuccess = false;
        String msg = "";
        KwlReturnObject result = null;
        List<Object> resultList = null;
        try {
            String productId[] = request.getParameterValues("productId");
            String companyId = sessionHandlerImpl.getCompanyid(request);
            String currencyId=sessionHandlerImpl.getCurrencyID(request);
            JSONArray dataJArr = new JSONArray();
            for (int i = 0; i < productId.length; i++) {
                KwlReturnObject results = accountingHandlerDAOobj.getObject(Product.class.getName(), productId[i]);
                Product product = (Product) results.getEntityList().get(0);
                String prodPrice = "";
                prodPrice = getProductPriceForBarcodePrinting(product.getID(), companyId, currencyId);
                if (product.getBarcodefield() == Constants.Barcode_BatchNumber) {   //Barcode based on Batch No.
                    result = accProductObj.getBatchDetailsByProductID(productId[i], companyId);
                    resultList = result.getEntityList();
                    if (!resultList.isEmpty()) {
                        for (Object resObjects : resultList) {
                            JSONObject jSONObject = new JSONObject();
                            NewProductBatch newproductbatch = (NewProductBatch) resObjects;                            
                            jSONObject.put("prodid", product.getProductid());
                            jSONObject.put("prodnm", product.getProductName());
                            jSONObject.put("batchno", newproductbatch.getBatchname());
                            jSONObject.put("batchqty", newproductbatch.getQuantity());
                            jSONObject.put("barcdqty", 1);
                            jSONObject.put("mfgdate", newproductbatch.getMfgdate());
                            jSONObject.put("expdate", newproductbatch.getExpdate());
                            jSONObject.put("location", newproductbatch.getLocation()!=null ? newproductbatch.getLocation().getName() : "");
                            jSONObject.put("warehouse", newproductbatch.getWarehouse()!=null ? newproductbatch.getWarehouse().getName() : "");
                            jSONObject.put("skuno", "");
                            jSONObject.put("prodPrice", prodPrice);
                            dataJArr.put(jSONObject);
                        }
                    }
                } else {
                    result = accProductObj.getSerialNos(productId[i], companyId);
                    resultList = result.getEntityList();
                    if (!resultList.isEmpty()) {
                        for (Object resObjects : resultList) {
                            JSONObject jSONObject = new JSONObject();
                            NewBatchSerial newBatchSerial = (NewBatchSerial) resObjects;
                            jSONObject.put("serialno", newBatchSerial.getSerialname());
                            jSONObject.put("prodid", product.getProductid());
                            jSONObject.put("prodnm", product.getProductName());
                            jSONObject.put("expfromdt", newBatchSerial.getExpfromdate());
                            jSONObject.put("exptodt", newBatchSerial.getExptodate());
                            jSONObject.put("skuno", newBatchSerial.getSkufield());
                            jSONObject.put("prodPrice", prodPrice);
                            dataJArr.put(jSONObject);
                        }
                    }
                }
            }
            jobj.put("data", dataJArr);
            issuccess = true;
        } catch (SessionExpiredException ex) {
            msg = ex.getMessage();
            Logger.getLogger(accProductController.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ServiceException ex) {
            msg = ex.getMessage();
            Logger.getLogger(accProductController.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            msg = "" + ex.getMessage();
            Logger.getLogger(accProductController.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                jobj.put("success", issuccess);
                jobj.put("msg", msg);
            } catch (JSONException ex) {
                Logger.getLogger(accProductController.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return new ModelAndView(view, "model", jobj.toString());
    }
    public ModelAndView getProductsForBarcodeWin(HttpServletRequest request, HttpServletResponse response) throws JSONException, ServiceException {
        JSONObject jobj = new JSONObject();
        String view = "jsonView";
        boolean issuccess = false;
        String msg = "";
        try {
            String productId[] = request.getParameterValues("productId");
            String companyId = sessionHandlerImpl.getCompanyid(request);
            String currencyId = sessionHandlerImpl.getCurrencyID(request);
            JSONArray dataJArr = new JSONArray();
            for (int i = 0; i < productId.length; i++) {
                KwlReturnObject results = accountingHandlerDAOobj.getObject(Product.class.getName(), productId[i]);
                Product product = (Product) results.getEntityList().get(0);
                String prodPrice = "";
                prodPrice = getProductPriceForBarcodePrinting(product.getID(), companyId, currencyId);
                JSONObject jSONObject = new JSONObject();
                jSONObject.put("pid", product.getID());
                jSONObject.put("prodid", product.getProductid());
                jSONObject.put("prodnm", product.getName());
                jSONObject.put("barcode", product.getBarcode());
                //jSONObject.put("barcdqty", 1);
                jSONObject.put("barcdqty", (product.getAvailableQuantity()<1 ? 1 : product.getAvailableQuantity()));
                jSONObject.put("prodPrice", prodPrice);
                jSONObject.put("mrpofprod", authHandler.getFormattedUnitPrice(product.getMrprate(), companyId));
                dataJArr.put(jSONObject);
            }
            jobj.put("data", dataJArr);
            issuccess = true;
        } catch (SessionExpiredException ex) {
            msg = ex.getMessage();
            Logger.getLogger(accProductController.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ServiceException ex) {
            msg = ex.getMessage();
            Logger.getLogger(accProductController.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            msg = "" + ex.getMessage();
            Logger.getLogger(accProductController.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                jobj.put("success", issuccess);
                jobj.put("msg", msg);
            } catch (JSONException ex) {
                Logger.getLogger(accProductController.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return new ModelAndView(view, "model", jobj.toString());
    }
    public String getProductPriceForBarcodePrinting(String prodId, String companyId, String currencyId) {
        String prodPrice = "";
        try {
            HashMap<String, Object> requestParams = new HashMap<String, Object>();
            requestParams.put("isSyncToPOS", true);
            requestParams.put("companyID", companyId);
            requestParams.put("productId", prodId);
            requestParams.put("currencyID", currencyId);
            KwlReturnObject result = accProductObj.getPriceBandProductsPrice(requestParams);
            boolean flag = false;
            if (result != null && result.getRecordTotalCount() > 0) {
                PricingBandMasterDetail bandMasterDetail = (PricingBandMasterDetail) result.getEntityList().get(0);
                prodPrice = authHandler.getFormattedUnitPrice(bandMasterDetail.getSalesPrice(), companyId);
                if (bandMasterDetail.getSalesPrice() > 0) {
                    flag = true;
                } else {
                    prodPrice = "";
                }
            }
            if (!flag) {
                KwlReturnObject sales = accProductObj.getProductPrice(prodId, false, null, "", "");
                if (sales != null && sales.getRecordTotalCount() > 0) {
                    if (sales.getEntityList().get(0) != null) {
                        double price = Double.parseDouble(sales.getEntityList().get(0).toString());
                        if (price > 0) {
                            prodPrice = authHandler.getFormattedUnitPrice(price, companyId);
                        }
                    }
                }
            }
        } catch (ServiceException ex) {
            Logger.getLogger(accProductControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
        }
        return prodPrice;
    }
    public ModelAndView deleteAssetDepreciation(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        String msg = "";
        boolean issuccess = false;
        DefaultTransactionDefinition def = new DefaultTransactionDefinition();
        def.setName("Delete_Tx");
        def.setPropagationBehavior(TransactionDefinition.PROPAGATION_REQUIRED);
        TransactionStatus status = txnManager.getTransaction(def);
        try {
            msg=deleteAssetDepreciation(request);
            issuccess = true;
//            msg = messageSource.getMessage("acc.dep.unpostdone", null, RequestContextUtils.getLocale(request));   //"Depreciation has been done successfully";
            txnManager.commit(status);
        } catch (SessionExpiredException ex) {
            txnManager.rollback(status);
            msg = ex.getMessage();
            Logger.getLogger(accProductControllerCMN.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
        } catch (Exception ex) {
            txnManager.rollback(status);
            msg = ex.getMessage();
            Logger.getLogger(accProductControllerCMN.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
        } finally {
            try {
                jobj.put("success", issuccess);
                jobj.put("msg", msg);
            } catch (JSONException ex) {
                Logger.getLogger(accProductControllerCMN.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
            }
        }
        return new ModelAndView("jsonView", "model", jobj.toString());
    }
     
     public String deleteAssetDepreciation(HttpServletRequest request) throws SessionExpiredException, AccountingException ,ParseException,ServiceException{
        String  messageString= "";
        try {
            Calendar Cal = Calendar.getInstance();
            Cal.setTime(new Date());
            boolean excludeSoldAssets = false;
            DateFormat df = authHandler.getDateOnlyFormat(request);
            String assetdetailIds = request.getParameter("assetdetailIds");
            String userfullname = sessionHandlerImpl.getUserFullName(request);
            CompanySessionClass companySessionObj = sessionHandlerImpl.getCompanySessionObj(request);
            List<AssetDetails> assetdetailList = new ArrayList();
            String selectedAssetIds = request.getParameter("selectedAssetIds");
            List<String> assetdetailIDList = new ArrayList();
            List<String> unOrderedAssetIDList = new ArrayList();
            HashMap<String, Object> assetIdWithPeriodMap = new HashMap<String, Object>();
            HashSet<String> assetIdsSet=new HashSet<>();
            String companyID=sessionHandlerImpl.getCompanyid(request);
            JSONArray jArr1=new JSONArray();
            if (assetdetailIds.equals("All")) {
                HashMap<String, Object> requestParams = new HashMap<String, Object>();
                requestParams.put("companyId",companyID);
                requestParams.put("invrecord", true);
                if (excludeSoldAssets) {
                    requestParams.put("excludeSoldAsset", excludeSoldAssets);
                }
                KwlReturnObject result = accProductObj.getAssetDetails(requestParams);
                assetdetailList = result.getEntityList();
            } else {
                List<String> assetdetailIdsList = Arrays.asList(assetdetailIds.split("\\s*,\\s*"));
                for (int i = 0; i < assetdetailIdsList.size(); i++) {
                    String assetdetailId = assetdetailIdsList.get(i);
                    KwlReturnObject accresult = accountingHandlerDAOobj.getObject(AssetDetails.class.getName(), assetdetailId);
                    AssetDetails ad = (AssetDetails) accresult.getEntityList().get(0);
                    assetdetailList.add(ad);
                }
            }
            
           
            if (!StringUtil.isNullOrEmpty(selectedAssetIds)) {
                List<String> selectedAssetIdsList = Arrays.asList(selectedAssetIds.split("\\s*,\\s*"));

                /*
                 Below code block is used to get Max period of selected Assets     
                 */
                Map<String, Object> paramsMap = new HashMap<>();
                paramsMap.put("selectedAssetIdsList", selectedAssetIdsList);
                paramsMap.put("companyId", companyID);
                KwlReturnObject resultList = accProductObj.getMaxPeriodOfSelectedAssets(paramsMap);
                List periodList = resultList.getEntityList();
                String assetID = "";
                int period = 0;
                for (Object object : periodList) {
                    Object row[] = (Object[]) object;
                    assetID = (String) row[0];
                    period = (Integer) row[1];
                    assetIdWithPeriodMap.put(assetID, period);//This map is used to put assetid as key and period as value for next logic
                }
            }

            String detail = request.getParameter("detail");
            List lockYearAssetList=new ArrayList();
            if (!StringUtil.isNullOrEmpty(detail)) {
                jArr1 = new JSONArray(detail);
                
                /*
                  Get Closed Book years
                 */
                Map<String, Object> filterParams = new HashMap<String, Object>();
                List<YearLock> yearList=null;
                Date entryDate = null;
                HashSet<String> lockYear=new HashSet<>();
                filterParams.put(Constants.companyid, companyID);
                filterParams.put("onlylockedyear", true);
                KwlReturnObject result = accCompanyPreferencesObj.getYearLock(filterParams);
                if (result.getEntityList().size() > 0) {
                    yearList = (List<YearLock>)result.getEntityList();
                    if (yearList != null) {
                        for (YearLock yrLock : yearList) {
                            lockYear.add(String.valueOf(yrLock.getYearid()));
                        }
                    }
                }
                
                if (!lockYear.isEmpty()) {
                    int len = jArr1.length();
                    JSONObject detailObj = new JSONObject();
                    SimpleDateFormat sdf = new SimpleDateFormat(Constants.yyyyMMdd);
                    Calendar cal = Calendar.getInstance();
                    for (int index = 0; index < len; index++) {
                        detailObj = jArr1.getJSONObject(index);
                        String JEDate = detailObj.optString("jedate", "");
                        entryDate = sdf.parse(JEDate);
                        cal.setTime(entryDate);
                        String tempYear = String.valueOf(cal.get(Calendar.YEAR));
                        if (lockYear.contains(tempYear)) {
                            System.out.println("Year:" + tempYear);
                            assetIdsSet.add(detailObj.optString("assetId"));
                            lockYearAssetList.add(detailObj.optString("assetDetailsId"));
                        }

                    }
                }
                
                
                int first = jArr1.length() - 1;
                int last = jArr1.length() - 1;
                int maxPosted = 0;
                JSONObject jobj = new JSONObject();
                jobj = jArr1.getJSONObject(jArr1.length() - 1);
                String id = jobj.optString("assetDetailsId");
                String assetID = URLDecoder.decode(jobj.optString("assetId"), StaticValues.ENCODING);
                /*
                 Below if block is used to get Maximum Period posted of first asset present in Array
                 */
                if (!assetIdWithPeriodMap.isEmpty()) {
                    if (assetIdWithPeriodMap.containsKey(jobj.optString("assetDetailsId"))) {
                        maxPosted = (Integer) assetIdWithPeriodMap.get(jobj.optString("assetDetailsId"));
                    }
                }

                /*
                 Below for loop is used to check the selected assets period is in sequential or not 
                 */
                for (int i = jArr1.length() - 1; i > -1; i--) {
                    jobj = jArr1.getJSONObject(i);
                    if (!(jobj.optString("assetDetailsId").equals(id))) {
                        if (!(maxPosted == (jArr1.getJSONObject(last).optInt("period")) && (jArr1.getJSONObject(last).optInt("period") - jArr1.getJSONObject(first + 1).optInt("period")) == last - (first + 1))) {
                            unOrderedAssetIDList.add(id);//Those asset id period is not selected in sequentially such assets are not 
                            assetIdsSet.add(assetID);//for showing message box ,Put in set for those asset id which is not selected in sequentially
                        }
                        last = first;
                        id = jobj.optString("assetDetailsId");
                        assetID = URLDecoder.decode(jobj.optString("assetId"), StaticValues.ENCODING);
                        if (assetIdWithPeriodMap.containsKey(jobj.optString("assetDetailsId"))) {
                            maxPosted = (Integer) assetIdWithPeriodMap.get(jobj.optString("assetDetailsId"));
                        }
                    }
                    /*
                     Below code is used to check last asset id in Json Array
                     */
                    if ((i == 0)) {
                        if (!(maxPosted == (jArr1.getJSONObject(last).optInt("period")) && (jArr1.getJSONObject(last).optInt("period") - jArr1.getJSONObject(first).optInt("period")) == last - first)) {
                            unOrderedAssetIDList.add(id);//Those asset id period is not selected in sequentially such assets are not 
                            assetIdsSet.add(assetID);  //Put in set for those asset id which is not selected in sequentially
                        }
                    }
                    first--;
                }
            }

            messageString = messageSource.getMessage("acc.dep.unpostdone", null, RequestContextUtils.getLocale(request));
            String msg = "<ul style='display: block;list-style-type: square;margin:1em;padding-left: 6px;'>";
            /*
             Below code is used to customize the message as if  Opening depreciation is not posted or Asset period is not in sequential order.
             */
            if (unOrderedAssetIDList.size() > 0 || !lockYearAssetList.isEmpty()) {
                messageString += messageSource.getMessage("acc.dep.unpost.notemsg", null, RequestContextUtils.getLocale(request)) + "<b>" + assetIdsSet.toString() + "</b>" + " " + messageSource.getMessage("acc.dep.unpost.notemsg1", null, RequestContextUtils.getLocale(request));
                messageString += msg + "<li>" + messageSource.getMessage("acc.dep.unpost.periodic", null, RequestContextUtils.getLocale(request)) + "</li>";
                if(!lockYearAssetList.isEmpty()){
                    messageString += "<li>" + messageSource.getMessage("acc.dep.unpost.periodic.lockyear", null, RequestContextUtils.getLocale(request)) + "</li>";
                }
                messageString += "</ul>";
            }
            
            //Creating BlockingQueue of size Constants.DEPRECIATION_LIMIT
            BlockingQueue<JSONObject> queue = new ArrayBlockingQueue<>(Constants.DEPRECIATION_LIMIT);
            UnPostDepreciationProducerThread unPostdepreciationProducerThread = new UnPostDepreciationProducerThread(queue);
            UnPostDepreciationConsumerThread unPostdepreciationConsumerThread = new UnPostDepreciationConsumerThread(queue);
            
            unPostdepreciationConsumerThread.setaccProductDAO(accProductObj);
            unPostdepreciationConsumerThread.setauditTrailDAO(auditTrailObj);
            
            Map<String, Object> reqMap = new HashMap<>();
            reqMap.put("detail", request.getParameter("detail"));
             if (!unOrderedAssetIDList.isEmpty()) {
                reqMap.put("unOrderedAssetIDList", unOrderedAssetIDList);
            }
            if (!lockYearAssetList.isEmpty()) {
                reqMap.put("lockYearAssetList", lockYearAssetList);
            }
            unPostdepreciationProducerThread.add(reqMap);
            
            
            //starting producer to produce messages in queue
            Thread p = new Thread(unPostdepreciationProducerThread);
            p.start();
            System.out.println("UnPostDepreciationProducerThread has been started");

            Map<String, Object> requestMap = AccountingManager.getGlobalParams(request);
            requestMap.put("assetdetailList", assetdetailList);
            requestMap.put("Cal", Cal);
            requestMap.put("userfullname", userfullname);
            
            //For audittrail
            requestMap.put(Constants.reqHeader, StringUtil.getIpAddress(request));
            requestMap.put(Constants.remoteIPAddress, request.getRemoteAddr());
            requestMap.put(Constants.useridKey, companySessionObj.getUserid());
            //For audittrail
            unPostdepreciationConsumerThread.add(requestMap);
            
             //starting consumer to consume messages from queue
            Thread c = new Thread(unPostdepreciationConsumerThread);
            c.start();
            System.out.println("UnPostDepreciationConsumerThread has been started");
        } catch (UnsupportedEncodingException | JSONException | ServiceException ex) {
            Logger.getLogger(accProductControllerCMN.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
            throw ServiceException.FAILURE("deleteAssetDepreciation : " + ex.getMessage(), ex); 
        }
        return messageString;
    }
      public ModelAndView getSummary(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        JSONArray DataJArr = new JSONArray();
        boolean issuccess = false;
        String msg = "";
        try {
            HashMap<String, Object> requestParams = new HashMap<String, Object>();
            requestParams.put(Constants.df, authHandler.getDateOnlyFormat(request));
            requestParams.put("start", request.getParameter("start"));
            requestParams.put("limit", request.getParameter("limit"));
            requestParams.put("ss", request.getParameter("ss"));
            requestParams.put("companyid", sessionHandlerImpl.getCompanyid(request));
            int type=Integer.parseInt(request.getParameter("type"));
             requestParams.put("type",type);
            KwlReturnObject result = accProductObj.getLocationSummary(requestParams);
            
            HashMap<String, Object> companyPriceListParams = new HashMap<String, Object>();
            companyPriceListParams.put("isPurchase", true);
            KwlReturnObject kwlCompanyMaxDateProductPriceList = accProductObj.getAllProductsMaxAppliedDatePriceDetails(sessionHandlerImpl.getCompanyid(request), companyPriceListParams);
            Map<String, Object[]> companyMaxDateProductPriceList = AccReportsHandler.getcompanyMaxDateProductPriceListMap(kwlCompanyMaxDateProductPriceList.getEntityList());

            List list = result.getEntityList();
            DataJArr = getLocationSummaryJson(request, list, companyMaxDateProductPriceList);
            int count = result.getRecordTotalCount();
            jobj.put("data", DataJArr);
            jobj.put("totalCount", count);
            issuccess = true;
        } catch (SessionExpiredException ex) {
            msg = ex.getMessage();
            Logger.getLogger(accProductController.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ServiceException ex) {
            msg = ex.getMessage();
            Logger.getLogger(accProductController.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            msg = "" + ex.getMessage();
            Logger.getLogger(accProductController.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                jobj.put("success", issuccess);
                jobj.put("msg", msg);
            } catch (JSONException ex) {
                Logger.getLogger(accProductController.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return new ModelAndView("jsonView", "model", jobj.toString());
    }

    public ModelAndView buildProductAssembly(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        String msg = "";
        boolean issuccess = false;
        KwlReturnObject result;
        String id = "";

        DefaultTransactionDefinition def = new DefaultTransactionDefinition();
        def.setName("Product_Tx");
        TransactionStatus status = null;
        def.setPropagationBehavior(TransactionDefinition.PROPAGATION_REQUIRED);
        boolean isEdit = StringUtil.isNullOrEmpty(request.getParameter("isEdit")) ? false : Boolean.parseBoolean(request.getParameter("isEdit"));
        try {
            status = txnManager.getTransaction(def);
        } catch (Exception e) {
            e.printStackTrace();
        }
        try {
            String sequenceFormat = StringUtil.isNullOrEmpty(request.getParameter("sequenceformat")) ? "NA" : request.getParameter("sequenceformat");
            String refNo = StringUtil.isNullOrEmpty(request.getParameter("refno")) ? "" : request.getParameter("refno");
            boolean isUnbuildAssembly = !StringUtil.isNullOrEmpty(request.getParameter("isUnbuildAssembly")) ? Boolean.parseBoolean(request.getParameter("isUnbuildAssembly")) : false;
            /*
             *  isCustomerAssembly = true, when Assembly is build for Job Work Assembly type Products
             */
            boolean isCustomerAssembly = !StringUtil.isNullOrEmpty(request.getParameter("isForCustomerAssembly")) ? Boolean.parseBoolean(request.getParameter("isForCustomerAssembly")) : false;
            boolean isBuild = !StringUtil.isNullOrEmpty(request.getParameter("isBuild")) ? Boolean.parseBoolean(request.getParameter("isBuild")) : true;
            String jobworkorderid=StringUtil.isNullOrEmpty(request.getParameter("jobworkorderid"))?"":request.getParameter("jobworkorderid");
            String companyid = sessionHandlerImpl.getCompanyid(request);
            if (isEdit) {
                deleteExistingBuildAssemblyEntries(request);
            }
            List list = buildProductAssembly(request);
            String jeEntryNumber = (String) list.get(0);
            ProductBuild productBuild = (ProductBuild) list.get(1);
           
            //From here auto number generation logic start
            synchronized (this) {
                if (sequenceFormat.equalsIgnoreCase("NA")) {     // create new case checks duplicate
                    int count = accProductObj.searchRefNo(refNo, companyid, isBuild).getRecordTotalCount();
                        while (count > 0) {
                            refNo = refNo + "-1";
                            count = accProductObj.searchRefNo(refNo, companyid, isBuild).getRecordTotalCount();
                        }
                    if(isUnbuildAssembly){ //This flag used while fetching  build / unbuild report
                        productBuild.setIsBuild(false);
                    }else{
                        productBuild.setIsBuild(true);
                    }
                    productBuild.setRefno(refNo);
                    result = accProductObj.updateProductBuild(productBuild);
                } else {
                    int count = accProductObj.searchRefNo(refNo, companyid, isBuild).getRecordTotalCount();
                    if (count > 0) {
                        throw new AccountingException("Allocated build reference number " + refNo + " is already assigned to another build assembly created by some other concurrent user. Please close the tab and create build assembly again.");
                    }                        
                    KwlReturnObject capresult = accountingHandlerDAOobj.getObject(SequenceFormat.class.getName(), sequenceFormat);
                    SequenceFormat format = (SequenceFormat) capresult.getEntityList().get(0);
                    Map<String, Object> seqNumberMap = new HashMap<String, Object>();
                    seqNumberMap = accCompanyPreferencesObj.getNextAutoNumber_Modified(companyid, StaticValues.AUTONUM_BUILDASSEMBLY, sequenceFormat, false, productBuild.getEntryDate());
                    refNo = (String)seqNumberMap.get(Constants.AUTO_ENTRYNUMBER);  //next auto generated number
                    String nextAutoNoInt = (String)seqNumberMap.get(Constants.SEQNUMBER);//integer Part
                    String datePrefix = (String)seqNumberMap.get(Constants.DATEPREFIX);//Date Prefix Part
                    String dateafterPrefix = (String)seqNumberMap.get(Constants.DATEAFTERPREFIX);  //Date After Prefix Part
                    String dateSuffix = (String)seqNumberMap.get(Constants.DATESUFFIX);//Date Suffix Part
                    productBuild.setAutoGenerated(true);
                    productBuild.setRefno(refNo);
                    productBuild.setSeqformat(format);
                    productBuild.setSeqnumber(Integer.parseInt(nextAutoNoInt));
                    productBuild.setDatePreffixValue(datePrefix);
                    productBuild.setDateAfterPreffixValue(dateafterPrefix);
                    productBuild.setDateSuffixValue(dateSuffix);
                    if(isUnbuildAssembly){ //This flag used while fetching  build / unbuild report
                        productBuild.setIsBuild(false);
                    }else{
                        productBuild.setIsBuild(true);
                    }
                    result = accProductObj.updateProductBuild(productBuild);
                }
                if (status != null) {
                    txnManager.commit(status);
                }
            }

            TransactionStatus AuditStatus = null;
            try {
                DefaultTransactionDefinition def2 = new DefaultTransactionDefinition();
                def2.setName("AuditMessage_Tx");
                def2.setPropagationBehavior(TransactionDefinition.PROPAGATION_REQUIRES_NEW);
                AuditStatus = txnManager.getTransaction(def2);
                String action = "", actionmsg=messageSource.getMessage("acc.setupWizard.added", null, RequestContextUtils.getLocale(request)), auditaction="", msgInfo="";
                if(isUnbuildAssembly){
                    action = " added product unbuild Assembly ";
                    auditaction = AuditAction.PRODUCT_UNBUILD_ASSEMBLY_ADDED;
                    msgInfo = messageSource.getMessage("acc.unbuild.donesuccessfully", null, RequestContextUtils.getLocale(request));// "Product's unbuild Assembly have been ";
                } else {
                    action = " added product build Assembly ";
                    auditaction = AuditAction.PRODUCT_BUILD_ASSEMBLY_ADDED;
                    msgInfo = messageSource.getMessage("acc.build.donesuccessfully", null, RequestContextUtils.getLocale(request));//"Product's build Assembly have been ";
                }
                
                if (isEdit) {
                    actionmsg = "updated";
                    if(isUnbuildAssembly){
                        action = " updated product unbuild Assembly ";
                        auditaction = AuditAction.PRODUCT_UNBUILD_ASSEMBLY_UPDATED;
                    } else {
                        action = " updated product build Assembly ";
                        auditaction = AuditAction.PRODUCT_BUILD_ASSEMBLY_UPDATED;
                    }                    
                }
                String Jemsg=!StringUtil.isNullOrEmpty(jeEntryNumber)?" " + messageSource.getMessage("acc.field.JENo", null, RequestContextUtils.getLocale(request)) + ": <b>" + jeEntryNumber + "</b>":"";
                auditTrailObj.insertAuditLog(auditaction, "User " + sessionHandlerImpl.getUserFullName(request) + " has " + action + refNo, request, request.getParameter("product"));
                issuccess = true;
                msg = storageHandlerImpl.GetVRnetCompanyId().contains(companyid) ? "Product's Bundles have been " + actionmsg + " successfully" : msgInfo +" "+Jemsg;   //"Product's Assemblies have been updated successfully;
                txnManager.commit(AuditStatus);
            } catch (Exception ex) {
                if (AuditStatus != null) {
                    txnManager.rollback(AuditStatus);
                }
                Logger.getLogger(accProductControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
            }
            if(result != null && result.getRecordTotalCount() > 0) {
                productBuild = (ProductBuild ) result.getEntityList().get(0);
                if(productBuild != null) {
                    id = productBuild.getID();
                }
            }
        } catch (Exception ex) {
            txnManager.rollback(status);
            msg = "" + ex.getMessage();
            Logger.getLogger(accProductControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                jobj.put("id", id);
                jobj.put("success", issuccess);
                jobj.put("msg", msg);
            } catch (JSONException ex) {
                Logger.getLogger(accProductControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return new ModelAndView("jsonView", "model", jobj.toString());
    }

    public List  buildProductAssembly(HttpServletRequest request) throws ServiceException,AccountingException{
        boolean flag=false;
        List returnList=new ArrayList();
        String jeEntryNumber="";
        ProductBuild productBuild = null;
        boolean isBatchForProduct=false,isSerialForProduct=false;
        List<String> BatchName = new ArrayList<String>();
        List<String> WarehouseName = new ArrayList<String>();
        List<String> LocationName = new ArrayList<String>();
        List<String> Quantity = new ArrayList<String>();
        List<String> ids = new ArrayList<String>();
        try {
            String productid = request.getParameter("product");
             KwlReturnObject result = null;
             int nocount=0;
             /*
             *  isCustomerAssembly = true, when Assembly is build for Job Work Assembly type Products
             */
             boolean isCustomerAssembly = !StringUtil.isNullOrEmpty(request.getParameter("isForCustomerAssembly")) ? Boolean.parseBoolean(request.getParameter("isForCustomerAssembly")) : false;
             boolean isUnbuildAssembly = !StringUtil.isNullOrEmpty(request.getParameter("isUnbuildAssembly")) ? Boolean.parseBoolean(request.getParameter("isUnbuildAssembly")) : false;
             boolean isBuild = !StringUtil.isNullOrEmpty(request.getParameter("isBuild")) ? Boolean.parseBoolean(request.getParameter("isBuild")) : true;
             String sequenceFormat=StringUtil.isNullOrEmpty(request.getParameter("sequenceformat"))?"NA":request.getParameter("sequenceformat");
             String refNo=StringUtil.isNullOrEmpty(request.getParameter("refno"))?"":request.getParameter("refno");
             String newBOMCode = !StringUtil.isNullOrEmpty(request.getParameter("newbomcode"))?request.getParameter("newbomcode") : "";    //New BOM Code for BOM Replacement
             String jobworkorderid=StringUtil.isNullOrEmpty(request.getParameter("jobworkorderid"))?"":request.getParameter("jobworkorderid");
            double quantity = Double.parseDouble(request.getParameter("quantity") == null ? "0" : request.getParameter("quantity").toString()); //Build Quantity
//            Product product = (Product)session.get(Product.class,productid);
//            String refno = request.getParameter("refno");
//            String memostr = request.getParameter("memo");
//            updateAssemblyInventory(session, request, quantity, refno, memostr, product);
            String companyid = sessionHandlerImpl.getCompanyid(request);
            
            boolean isQAinspectionRequired = !StringUtil.isNullOrEmpty(request.getParameter("isQAinspection")) ? Boolean.parseBoolean(request.getParameter("isQAinspection")) : false;
            KwlReturnObject extraCompanyPreferencesObj = accountingHandlerDAOobj.getObject(ExtraCompanyPreferences.class.getName(), companyid);
            ExtraCompanyPreferences extraCompanyPreferences = (ExtraCompanyPreferences) extraCompanyPreferencesObj.getEntityList().get(0);
            
           JSONObject columnpref = null;
           JSONObject subproductWastageJson = new JSONObject();
            if (!StringUtil.isNullOrEmpty(extraCompanyPreferences.getColumnPref())) {
                columnpref = new JSONObject(extraCompanyPreferences.getColumnPref());
            }
            
            boolean PeriodicJE = columnpref.optBoolean(Constants.PeriodicJE, false);
            boolean postJe = false;

            boolean isQAapprovalForBuildAssembly=extraCompanyPreferences != null ? extraCompanyPreferences.isBuildAssemblyApprovalFlow() : false;
            
            boolean isQAbuilAssemblyProduct= (isQAapprovalForBuildAssembly && isQAinspectionRequired && !isUnbuildAssembly ) ? true : false;
            KwlReturnObject capresult = accountingHandlerDAOobj.getObject(CompanyAccountPreferences.class.getName(), companyid);
            CompanyAccountPreferences preferences = (CompanyAccountPreferences) capresult.getEntityList().get(0);
            HashMap<String, Object> assemblyParams = getAssemblyRequestParams(request);
            assemblyParams.put("memo", request.getParameter("memo"));
            assemblyParams.put("refno", "");
            assemblyParams.put("cost", Double.parseDouble(StringUtil.isNullOrEmpty(request.getParameter("cost"))?"0":request.getParameter("cost")));
            assemblyParams.put("buildproductid", request.getParameter("product"));
            assemblyParams.put("description", request.getParameter("description"));
            assemblyParams.put("bomdetailid", request.getParameter("bomdetailid"));
            assemblyParams.put("productbatch", request.getParameter("bomdetailid"));
            assemblyParams.put("isUnbuildAssembly", isUnbuildAssembly); //For Stock Movement Detail.
            if (!StringUtil.isNullOrEmpty(jobworkorderid)) {
                /*
                * To save  jobworkorderid in ProductBuild table
                */
                assemblyParams.put("jobworkorderid", jobworkorderid);
            }
            
            if (!StringUtil.isNullOrEmpty(newBOMCode)) {    //Save New BOM Formula 
                String newBOMName = !StringUtil.isNullOrEmpty(request.getParameter("newbomname"))?request.getParameter("newbomname") : "";    //New BOM Name for BOM Replacement
                //Check whether the entered BOM Code is exist or not
                boolean isBomcodeExist = accProductObj.isBOMCodeExist(newBOMCode, request.getParameter("product"), companyid);
                if(isBomcodeExist){
                    flag = true;
                    throw new AccountingException("BOM Code '" + newBOMCode + "' already exists.");
                }
                Map<String, Object> bomMap = new HashMap<String, Object>();
                String id = request.getParameter("bomid");
                if (!StringUtil.isNullOrEmpty(id)) {
                    bomMap.put(Constants.Acc_id, id);
                }
                bomMap.put("bomCode", newBOMCode);
                bomMap.put("bomName", newBOMName);
                bomMap.put("isdefaultbom", false);
                bomMap.put(Constants.productid, request.getParameter("product"));
                KwlReturnObject bomdetailResult = accProductObj.saveBOMDetail(bomMap);
                BOMDetail bomdetail = bomdetailResult.getEntityList() != null ? (BOMDetail) bomdetailResult.getEntityList().get(0) : null;
                assemblyParams.put("bomdetailid", bomdetail.getID());     //bomcode id in case of new bom

                String assemblydata = (String) request.getParameter("assembly");
                JSONArray jarr = new JSONArray("[" + assemblydata + "]");
                for (int j = 0; j < jarr.length(); j++) {
                    JSONObject assemblyjobj = jarr.getJSONObject(j);
                    if (!StringUtil.isNullOrEmpty(assemblyjobj.optString("product", ""))) {
                        HashMap<String, Object> assemblyMap = new HashMap<String, Object>();
                        assemblyMap.put(Constants.productid, request.getParameter("product"));  //Main Product ID
                        assemblyMap.put("subproductid", assemblyjobj.getString("product"));
                        assemblyMap.put("quantity", (Double.parseDouble(assemblyjobj.getString("quantity"))/quantity));//Get Quantity for formula by dividing No.of Build Quantity
                        assemblyMap.put("percentage", Double.parseDouble(assemblyjobj.optString("percentage", "0")));
                        assemblyMap.put("actualquantity", (Double.parseDouble(assemblyjobj.optString("actualquantity", "0"))/quantity)); //Get Actual Quantity for formula by dividing No.of Build Quantity
                        assemblyMap.put("inventoryquantiy", Double.parseDouble(assemblyjobj.optString("inventoryquantiy", "0")));
                        assemblyMap.put("recylequantity", Double.parseDouble(assemblyjobj.optString("recylequantity", "").equals("") ? "0" : assemblyjobj.optString("recylequantity", "0")));
                        assemblyMap.put("remainingquantity", Double.parseDouble(assemblyjobj.optString("remainingquantity", "").equals("") ? "0" : assemblyjobj.optString("remainingquantity", "")));
                        assemblyMap.put("wastageInventoryQuantity", Double.parseDouble(assemblyjobj.optString("wastageInventoryQuantity", "0")));
                        assemblyMap.put("wastageQuantityType", Integer.parseInt(assemblyjobj.optString("wastageQuantityType", "0")));
                        assemblyMap.put("wastageQuantity", Double.parseDouble(assemblyjobj.optString("wastageQuantity", "0")));
                        assemblyMap.put("bomdetailid", bomdetail != null ? bomdetail.getID() : "");
                        if (!assemblyjobj.optString("subbomid", "").equals("")) {
                            assemblyMap.put("subbomid", assemblyjobj.optString("subbomid", ""));
                        }
                        accProductObj.saveProductAssembly(assemblyMap);
                    }
                }
            }//New BOM Formula 
            
            Product product = (Product) kwlCommonTablesDAOObj.getClassObject(Product.class.getName(), request.getParameter("product"));
            if (!StringUtil.isNullOrEmpty(product.getID())) {
                isBatchForProduct = product.isIsBatchForProduct();
                isSerialForProduct = product.isIsSerialForProduct();
            }
            String assemblyserialJson = request.getParameter("ProductSerialJson");
            assemblyParams.put("batchjson", assemblyserialJson);
            String jsonSrtingArray[] = {};
            if (sequenceFormat.equalsIgnoreCase("NA")) {//the below code is for number duplication and check for sequence number. this code execute only when user enter number maually  
                result = accProductObj.searchRefNo(refNo, companyid, isBuild);
                nocount = result.getRecordTotalCount();
                if (nocount > 0) {
                    flag = true;
                    throw new AccountingException("Build Refrence Number '" + refNo + "' already exists.");
                }
                int mduleid = Constants.Acc_Build_Assembly_Product_ModuleId;
                if(isUnbuildAssembly){
                    mduleid = Constants.Acc_Unbuild_Assembly_Product_ModuleId;
                }
                List list = accCompanyPreferencesObj.checksEntryNumberForSequenceNumber(mduleid, refNo, companyid);
                if (!list.isEmpty()) {
                    boolean isvalidEntryNumber = (Boolean) list.get(0);
                    String formatName = (String) list.get(1);
                    if (!isvalidEntryNumber) {
                        flag = true;
                        throw new AccountingException(messageSource.getMessage("acc.common.enterdocumentnumber", null, RequestContextUtils.getLocale(request)) + " <b>" + refNo + "</b> " + messageSource.getMessage("acc.common.belongsto", null, RequestContextUtils.getLocale(request)) + " <b>" + formatName + "</b>. " + messageSource.getMessage("acc.common.plselectseqformat", null, RequestContextUtils.getLocale(request)) + " <b>" + formatName + "</b> " + messageSource.getMessage("acc.common.insteadof", null, RequestContextUtils.getLocale(request)));
                    }
                }
            }
            if (!StringUtil.isNullOrEmpty(assemblyserialJson)) {
                jsonSrtingArray = assemblyserialJson.replace(",[", "#,[").split("#,");  
            }
            
            String assemblyproductjson = (String) request.getParameter("assembly");
            JSONArray jarr = new JSONArray("[" + assemblyproductjson + "]");
            DateFormat df = (DateFormat) assemblyParams.get("df");
            String applydate = (String) assemblyParams.get("applydate");
            Date appDate = null;
            appDate = df.parse(applydate);
            if (jarr.length() > 0) { //Bug Fixed #16851
                JSONObject inventoryjson = new JSONObject();
                inventoryjson.put("productid", productid);
                if (isQAbuilAssemblyProduct) {
                    inventoryjson.put("quantity", 0);
                    inventoryjson.put("baseuomquantity", 0);
                } else {
                    inventoryjson.put("quantity", quantity);
                    inventoryjson.put("baseuomquantity", quantity);
                }
                
                inventoryjson.put("baseuomrate", 1);
                if (product.getUnitOfMeasure() != null) {
                    inventoryjson.put("uomid", product.getUnitOfMeasure().getID());
                }
                if(isUnbuildAssembly){     //Build Assembly
                    inventoryjson.put("description", "Unbuild Assembly"); 
                    inventoryjson.put("carryin", false);
                } else {                   //Unbuild Assembly
                    inventoryjson.put("description", "Build Assembly"); 
                    inventoryjson.put("carryin", true);
                }                
                inventoryjson.put("defective", false);
                inventoryjson.put("newinventory", false);
                inventoryjson.put("updatedate", appDate);
                inventoryjson.put("companyid", sessionHandlerImpl.getCompanyid(request));
                KwlReturnObject invresult = accProductObj.addInventory(inventoryjson);      //Update Inventory for Parent Product
                Inventory inventory = (Inventory) invresult.getEntityList().get(0);
                assemblyParams.put("inventory", inventory);
                
                productBuild = accProductObj.updateAssemblyInventory(assemblyParams);// set inventory ref to ProductBuild
                double unitBuildCost=Double.parseDouble(StringUtil.isNullOrEmpty(request.getParameter("cost"))?"0":request.getParameter("cost"))/quantity;
                if (!isQAbuilAssemblyProduct) {
                    addStockMovementForBuildProduct(jsonSrtingArray, product, companyid, unitBuildCost, assemblyParams, productBuild, refNo); //stock movement for main product
                }
                
                JSONObject jedjson=new JSONObject();
                String jeid=null;
                HashSet jeDetails = new HashSet();
                KwlReturnObject jedresult=null;
                JournalEntryDetail jed=null;
                
                if(preferences.getInventoryValuationType()==Constants.PERPETUAL_VALUATION_METHOD || (preferences.getInventoryValuationType()==Constants.PERIODIC_VALUATION_METHOD && PeriodicJE)){
                // Create Journal Entry Number for new case
                 postJe=true;
                String oldjeid = productBuild.getJournalentry() != null ? productBuild.getJournalentry().getID() : "";
                String jeentryNumber = "";
                String jeIntegerPart = "";
                String jeDatePrefix = "";
                String jeDateAfterPrefix = "";
                String jeDateSuffix = "";
                String jeSeqFormatId = "";
                boolean jeautogenflag = false;
                if (StringUtil.isNullOrEmpty(oldjeid)) {
                    synchronized (this) {
                        HashMap<String, Object> JEFormatParams = new HashMap<String, Object>();
                        JEFormatParams.put("moduleid", Constants.Acc_GENERAL_LEDGER_ModuleId);
                        JEFormatParams.put("modulename", CompanyPreferencesConstants.AUTOJOURNALENTRY);
                        JEFormatParams.put("companyid", companyid);
                        JEFormatParams.put("isdefaultFormat", true);

                        KwlReturnObject kwlObj = accCompanyPreferencesObj.getSequenceFormat(JEFormatParams);
                        SequenceFormat format = (SequenceFormat) kwlObj.getEntityList().get(0);
                        Map<String, Object> seqNumberMap = new HashMap<String, Object>();
                        seqNumberMap = accCompanyPreferencesObj.getNextAutoNumber_Modified(companyid, StaticValues.AUTONUM_JOURNALENTRY, format.getID(), false, appDate);
                        jeentryNumber = (String)seqNumberMap.get(Constants.AUTO_ENTRYNUMBER);  //next auto generated number
                        jeIntegerPart = (String)seqNumberMap.get(Constants.SEQNUMBER);//integer Part
                        jeDatePrefix = (String)seqNumberMap.get(Constants.DATEPREFIX);//Date Prefix Part
                        jeDateAfterPrefix = (String)seqNumberMap.get(Constants.DATEAFTERPREFIX);  //Date After Prefix Part
                        jeDateSuffix = (String)seqNumberMap.get(Constants.DATESUFFIX);//Date Suffix Part
                        jeSeqFormatId = format.getID();
                        jeautogenflag = true;
                    }
                }

                Map<String, Object> jeDataMap = AccountingManager.getGlobalParams(request);
                jeDataMap.put("entrynumber", jeentryNumber);
                jeDataMap.put("autogenerated", jeautogenflag);
                jeDataMap.put(Constants.SEQFORMAT, jeSeqFormatId);
                jeDataMap.put(Constants.SEQNUMBER, jeIntegerPart);
                jeDataMap.put(Constants.DATEPREFIX, jeDatePrefix);
                jeDataMap.put(Constants.DATEAFTERPREFIX, jeDateAfterPrefix);
                jeDataMap.put(Constants.DATESUFFIX, jeDateSuffix);
                jeDataMap.put("entrydate", appDate);
                jeDataMap.put("companyid", companyid);
                if(isUnbuildAssembly){
                    jeDataMap.put("memo", "Unbuild Assembly JE for "+product.getName());
                } else {
                    jeDataMap.put("memo", "Build Assembly JE for "+product.getName());
                }
                jeDataMap.put("createdby", sessionHandlerImpl.getUserid(request));
                jeDataMap.put("currencyid", sessionHandlerImpl.getCurrencyID(request));
                jeDetails = new HashSet();
                KwlReturnObject jeresult = accJournalEntryobj.saveJournalEntry(jeDataMap);//Create Journal entry without JEdetails
                JournalEntry journalEntry = (JournalEntry) jeresult.getEntityList().get(0);
                jeid = journalEntry.getID();
                jeEntryNumber = journalEntry.getEntryNumber();
                jeDataMap.put("jeid", jeid);
                
                 jedjson = new JSONObject();
                jedjson.put("srno", jeDetails.size() + 1);
                jedjson.put("companyid", companyid);
                jedjson.put("amount", productBuild.getProductcost());
                /* Use Product's Inventory Account for posting JE instead of Purchase Account when MRP flow is activated. */
                if (extraCompanyPreferences != null && product.getInventoryAccount() != null && (extraCompanyPreferences.isActivateMRPModule() || preferences.getInventoryValuationType() == Constants.PERPETUAL_VALUATION_METHOD)) {
                    jedjson.put("accountid", product.getInventoryAccount().getID());
                } else {
                    jedjson.put("accountid", product.getPurchaseAccount().getID());
                }
                if(isUnbuildAssembly){     //Unbuild Assembly
                    jedjson.put("debit", false); 
                } else {
                    jedjson.put("debit", true); 
                }                
                jedjson.put("jeid", jeid);
                jedjson.put("exchangeratefortransaction", 1);
                jedresult = accJournalEntryobj.addJournalEntryDetails(jedjson);
                jed = (JournalEntryDetail) jedresult.getEntityList().get(0);
                jeDetails.add(jed);
                 productBuild.setJournalentry(journalEntry);
               
                productBuild.setTotaljed(jed);
                }
               
                 productBuild.setInventory(inventory);
                accProductObj.updateProductBuild(productBuild);
                /**
                 * Generating Stock adjustment number for wastahe Qty.
                 */
                String SA_No = "";
                if (extraCompanyPreferences != null && extraCompanyPreferences.isActivateWastageCalculation()) {
                    SeqFormat seqFormat = null;
                    try {
                        seqFormat = seqService.getDefaultSeqFormat(product.getCompany(), ModuleConst.STOCK_ADJUSTMENT);
                        if (seqFormat != null) {
                            SA_No = seqService.getNextFormatedSeqNumber(seqFormat);
                        } else {
                            throw new AccountingException(messageSource.getMessage("acc.companypreferences.defaultsequenceformatforStockAdjustmentNotSet", null, RequestContextUtils.getLocale(request)));
                        }
                    } catch (SeqFormatException ex) {
                        throw new AccountingException(messageSource.getMessage("acc.companypreferences.defaultsequenceformatforStockAdjustmentNotSet", null, RequestContextUtils.getLocale(request)));
                    }
                    seqService.updateSeqNumber(seqFormat);
                    subproductWastageJson.put("SAnumber", SA_No);
                }
                if (!StringUtil.isNullOrEmpty(assemblyserialJson)) {
                    jsonSrtingArray = assemblyserialJson.replace(",[", "#,[").split("#,");          // split product into array
                    for (int i = 0; i < jsonSrtingArray.length; i++) {
                        String jsonStr = jsonSrtingArray[i];
                        JSONArray jArr = new JSONArray(jsonStr);
                        String radomID = UUID.randomUUID().toString();
                        JSONObject jSONObject = new JSONObject(jArr.get(0).toString());
                        if (isBatchForProduct && !isSerialForProduct) {
                            int index = BatchName.indexOf(StringUtil.DecodeText(jSONObject.optString("batch")));
                            if (index != -1 && WarehouseName.get(index).equals(jSONObject.getString("warehouse")) && LocationName.get(index).equals(jSONObject.getString("location"))) {
                                request.setAttribute("Updatedqty", Double.parseDouble((String) jSONObject.getString("quantity")) + Double.parseDouble((String) Quantity.get(index)));
                                request.setAttribute("id", ids.get(index));
                                request.setAttribute("isUpdate", "true");
                            } else {
                                BatchName.add(StringUtil.DecodeText(jSONObject.optString("batch")));
                                WarehouseName.add(jSONObject.optString("warehouse"));
                                LocationName.add(jSONObject.optString("location"));
                                Quantity.add(jSONObject.optString("quantity"));
                                ids.add(radomID);
                                request.setAttribute("radomID", radomID);
                                request.setAttribute("isUpdate", "false");
                            }
                        }
//                    if (i != jsonSrtingArray.length - 1) {            // No need because of split without removing delimeter 
//                        jsonStr += "]";
//            }
                         /*
                        * if isCustomerAssembly = true
                        *  then saving jobworkorderid as documentid in locationbatchdocument mapping table
                        *  else saving productbuildid as documentid
                        */
                        if (isCustomerAssembly) {
                            request.setAttribute("ProductBuildID", jobworkorderid);
                        } else {
                            request.setAttribute("ProductBuildID", productBuild.getID());
                        }
                        
                        if (isQAbuilAssemblyProduct) {
                            //this is just a ptch becoz jobworkorderid is saved as documentid in locationdocumentmapping table by kausar, my finished product QA is dependent on productbuild table so to use productbuild id i written this code 
                            request.setAttribute("ProductBuildID", productBuild.getID());
                            saveAssemblyProductQADetails(jsonStr, product, request);                            
                            if (isCustomerAssembly) {
                                request.setAttribute("ProductBuildID", productBuild.getID());
                            }
                        }else{                        
                            saveProductBatch(jsonStr, product, request);
                        } 
                    }
                }
               if (isQAbuilAssemblyProduct) {
                     productBuild.setIspendingforqa(true);
                    accProductObj.updateProductBuild(productBuild);
                }
                double totalWastageAmount = 0, totalBuildCost = 0;
                List returnArrList = new ArrayList();
                for (int i = 0; i < jarr.length(); i++) {
                    JSONObject jobj = jarr.getJSONObject(i);
                    HashMap<String, Object> requestParams = new HashMap<String, Object>();
                    String bomprodid = jobj.get("product").toString();
                    if(jobj.get("quantity").equals(0)){
                        continue;
                    }
                    if(bomprodid.equalsIgnoreCase("")){ //In case of empty record from BOM JSON, skip the iteration
                        continue;
                    }
                    requestParams.put("quantity", Double.parseDouble(request.getParameter("quantity") == null ? "0" : request.getParameter("quantity").toString()));
                    requestParams.put("assemblyjson", jobj.toString());
                    requestParams.put("isBuild", isBuild);
                    requestParams.put("postJe", postJe);    //SDP-14552 : JE Amount was not posting due to wrong case-sensitive key of MAP
                    requestParams.put("buildproductid", productBuild.getID());
                    requestParams.put("companyid", companyid);
                    requestParams.put("updatedate", appDate);
                    requestParams.put("isUnbuildAssembly", isUnbuildAssembly);
                    ProductBuildDetails productBuildDetails = accProductObj.updateAssemblyBuildDetails(requestParams, jeid, jeDetails, returnArrList);
                    totalWastageAmount += (Double) returnArrList.get(0);
                    totalBuildCost += (Double) returnArrList.get(1);
                    
                    for (int k = 0; k < jsonSrtingArray.length; k++) {
                        String jsonStr = jsonSrtingArray[k];
                        if (k != jsonSrtingArray.length - 1) {
                            jsonStr += "]";
                        }

                        JSONArray batchProductjArr = new JSONArray(jsonStr);
                        JSONObject jSONObject = new JSONObject(batchProductjArr.get(0).toString());

                        String subassemblyserialJson = jSONObject.optString("subproduct");
                        String subassemblyjsonStringArray[] = {};
                        String subassemblyjsonStr = "";

                        if (!StringUtil.isNullOrEmpty(subassemblyserialJson)) {
                            subassemblyjsonStringArray = subassemblyserialJson.split("]\",\"");
                        }
                        for (int j = 0; j < subassemblyjsonStringArray.length; j++) {
                            subassemblyjsonStr = subassemblyjsonStringArray[j];
                            if (j != subassemblyjsonStringArray.length - 1) {
                                subassemblyjsonStr += "]";
                            }
                            JSONArray jArr = new JSONArray(subassemblyjsonStr);
                             
                            String Serialproductid = "";
                            for (int p = 0; p < jArr.length(); p++) {
                                HashMap<String, Object> pdfTemplateMap = new HashMap<String, Object>();
                                JSONObject jSONSerialObject = new JSONObject(jArr.get(p).toString());
                                Serialproductid = jSONSerialObject.getString("productid");

                            }
                            if (Serialproductid.equals(productBuildDetails.getAproduct().getID())) {
                                /**
                                 * Creating Stock adjustment for wastage qty.
                                 */
                                if (extraCompanyPreferences != null && extraCompanyPreferences.isActivateWastageCalculation()) {
                                    subproductWastageJson.put("subproductArrStr", jArr.toString());
                                    createStockAdjustmentDetailsForWastageQty(request, productBuild, subproductWastageJson);
                                }
                                saveNewAssemblyBatch(jArr.toString(), Serialproductid, request, productBuildDetails.getID());
                                HashMap<String, Object> map = new HashMap<String, Object>();
                                map.put("companyid", companyid);
                                map.put("productBuild", productBuild);
                                map.put("refNo", refNo); 
                                map.put("isUnbuildAssembly", isUnbuildAssembly);
                                if(isUnbuildAssembly){
                                    addStockMovementForUnBuildSubProduct(jobj,jArr,map);    //For Subproduct Disassembling
                                } else {
                                    addStockMovementForBuildSubProduct(jobj,jArr,map);
                                }
                            }
                        }
                    }
                }
                
                if (preferences.getInventoryValuationType() == Constants.PERPETUAL_VALUATION_METHOD || (preferences.getInventoryValuationType() == Constants.PERIODIC_VALUATION_METHOD && PeriodicJE)) {
                    jedjson = new JSONObject();
                    jedjson.put("jedid", jed.getID());
                    jedjson.put("jeid", jeid);
                    jedjson.put("amount", totalBuildCost);
                    productBuild.setProductcost(totalBuildCost);
                    accJournalEntryobj.addJournalEntryDetails(jedjson);
                    // Wastage total credit entry
                    if (extraCompanyPreferences != null && extraCompanyPreferences.isActivateWastageCalculation()) {
                        jedjson = new JSONObject();
                        jedjson.put("srno", jeDetails.size() + 1);
                        jedjson.put("companyid", companyid);
                        jedjson.put("amount", totalWastageAmount);
                        /**
                         * if wastage account is tag to assembly product then tagged wastage account will hit
                         * if MRP flow or Perpetual is activated then product's inventory account will hit
                         * if boh condition are false the product's purchase account will hit.
                         */
                        if (product.isWastageApplicable() && product.getWastageAccount() != null) {
                            jedjson.put("accountid", product.getWastageAccount().getID());
                        } else {
                            if (extraCompanyPreferences != null && product.getInventoryAccount() != null && (extraCompanyPreferences.isActivateMRPModule() || preferences.getInventoryValuationType() == Constants.PERPETUAL_VALUATION_METHOD)) {
                                jedjson.put("accountid", product.getInventoryAccount().getID());
                            } else {
                                jedjson.put("accountid", product.getPurchaseAccount().getID());
                            }
                        }
			if (isUnbuildAssembly) {     //Unbuild Assembly
                            jedjson.put("debit", false); //SDP-15100 : Total wastage amount should be credit in case of Unbuild Assembly 
                        } else {
                            jedjson.put("debit", true);  //SDP-15100 : Total wastage amount should be debit in case of Build Assembly
                        }
                        //jedjson.put("debit", false);
                        jedjson.put("jeid", jeid);
                        jedjson.put("exchangeratefortransaction", 1);
                        jedresult = accJournalEntryobj.addJournalEntryDetails(jedjson);
                        jed = (JournalEntryDetail) jedresult.getEntityList().get(0);
                        jeDetails.add(jed);
                        productBuild.setWastagetotaljed(jed);
                    }
                }
            }

//            makeInventory(session, request, product, quantity, "Build Assembly", true, false,null);
        } catch(AccountingException ex){
              throw new AccountingException(ex.getMessage(), ex);
        } catch (Exception e) {
            if (flag) {
                throw new AccountingException(e.getMessage(), e);
            } else {
                throw ServiceException.FAILURE("buildProductAssembly : " + e.getMessage(), e);
            }
        }
        returnList.add(jeEntryNumber);
        returnList.add(productBuild);
        return returnList;
    }
    /**
     * Method to create stock adjustment for wastage qty.
     * @throws ParseException 
     */
    public void createStockAdjustmentDetailsForWastageQty(HttpServletRequest request, ProductBuild productBuild, JSONObject subproductWastageJson) throws ServiceException, JSONException, AccountingException, SeqFormatException, SessionExpiredException, ParseException {
        /**
         * Create Stock Adjustment OUT if wastege quantiy is present while
         * building assembly product.
         */
        String companyid = sessionHandlerImpl.getCompanyid(request);
        String userId = sessionHandlerImpl.getUserid(request);
        DateFormat df = authHandler.getDateOnlyFormat();
        String transactiondate = request.getParameter("applydate") != null ? request.getParameter("applydate") : "";
        String refno = request.getParameter("refno") != null ? request.getParameter("refno") : "";
        double wastagequantity = 0.0d;
        Product subproduct = null;
        String assemblyproductsdata = (String) request.getParameter("assembly");
        JSONArray Datajarr = new JSONArray();
        JSONArray assemblyjarr = new JSONArray("[" + assemblyproductsdata + "]");
        for (int j = 0; j < assemblyjarr.length(); j++) {
            JSONObject assemblyProdjobj = assemblyjarr.getJSONObject(j);
            if (!StringUtil.isNullOrEmpty(assemblyProdjobj.optString("product", ""))) {
                subproductWastageJson.put(assemblyProdjobj.getString("product"), Double.parseDouble(assemblyProdjobj.optString("wastageQuantity", "0")));
            }
        }
        KwlReturnObject adjustmentresult = accMasterItemsDAO.getMasterItemByNameorID(companyid, "Stock Out", "31", "mst.id", "mst.value");
        String adjustmenttypeid = adjustmentresult.getEntityList().isEmpty() ? "" : adjustmentresult.getEntityList().get(0).toString();
        JSONArray jArr = new JSONArray(subproductWastageJson.optString("subproductArrStr"));
        for (int i = 0; i < jArr.length(); i++) {
            JSONObject jObj = new JSONObject(jArr.get(i).toString());
            KwlReturnObject productKwlObj = accountingHandlerDAOobj.getObject(Product.class.getName(), jObj.optString("productid"));
            subproduct = (Product) productKwlObj.getEntityList().get(0);
            System.out.println(subproduct.getProductid() + "\n");
            wastagequantity = subproductWastageJson.optDouble(jObj.optString("productid"), 0);
            if (wastagequantity == 0) {
                continue;
            }
            JSONObject jdata = new JSONObject();
            JSONObject detailObj = new JSONObject();
            if (wastagequantity > 0) {
                jdata.put("companyid", companyid);
                jdata.put("quantity", wastagequantity * (-1));
                jdata.put("purchaseprice", 0);
                jdata.put("product", jObj.optString("productid"));
                jdata.put("warehouse", jObj.optString("warehouse"));
                jdata.put("uomid", subproduct.getUnitOfMeasure() != null ? subproduct.getUnitOfMeasure().getID() : "");
                jdata.put("reason", adjustmenttypeid);
//                jdata.put("reason", "Build assembly wastage stock out");
                jdata.put("memo", "Stock OUT for Build Assembly : " + refno);
                jdata.put("businessdate", transactiondate);
                jdata.put("seqno", subproductWastageJson.optString("SAnumber"));
                jdata.put("adjustmentType", "Stock Out");//This is Stock OUT Type Tranction  

                detailObj.put("quantity", wastagequantity * (-1));
                detailObj.put("locationId", jObj.optString("location"));
                detailObj.put("rowId", jObj.optString("row"));
                detailObj.put("rackId", jObj.optString("rack"));
                detailObj.put("binId", jObj.optString("bin"));
                detailObj.put("batchName", jObj.optString("batch"));
                detailObj.put("serialNames", jObj.optString("serial"));
                detailObj.put("skuFields", "");
                detailObj.put("approvalSerials", jObj.optString("serial"));
                detailObj.put("mfgdate", "");
            }

            JSONArray dtlArr = new JSONArray();
            dtlArr.put(detailObj);

            jdata.put("stockDetails", dtlArr);

            Datajarr.put(jdata);

        }
        JSONObject returnObj = new JSONObject();
        returnObj.put("data", Datajarr);
        if (Datajarr.length() > 0) {
            Map<String, Object> parmList = new HashMap<String, Object>();
            Map<String, Object> jeDataMap = new HashMap<String, Object>();
//            parmList.put("logDataMap", logDataMap);
            parmList.put("returnObj", returnObj);
            parmList.put("companyid", companyid);
            parmList.put("dateformat", df);
            parmList.put("userId", userId);
            parmList.put("currencyId", subproduct.getCurrency().getCurrencyID());
            parmList.put("productbuild", productBuild);
            parmList.put("jeDataMap", jeDataMap);
            parmList.put("jeDataMap1", jeDataMap);
            parmList.put("locale", RequestContextUtils.getLocale(request));
            parmList.put("isfrombuildassembly", true);
            parmList.put("isQAActivated", false);
//            parmList.put("masterPreference", masterPreference);

            returnObj = importInvData.requestStockAdjustment(parmList);
        }
    }
    public void saveProductBatch(String batchJSON, Product product, HttpServletRequest request) throws JSONException, ParseException, SessionExpiredException, ServiceException, UnsupportedEncodingException, AccountingException {
        JSONArray jArr = new JSONArray(batchJSON);
        String purchasebatchid = "";
        String isUpdate =!StringUtil.isNullOrEmpty((String) request.getAttribute("isUpdate"))? (String) request.getAttribute("isUpdate"):"false";
        String ProductBuildID =!StringUtil.isNullOrEmpty((String) request.getAttribute("ProductBuildID"))? (String) request.getAttribute("ProductBuildID"):product.getID();
        String radomID =!StringUtil.isNullOrEmpty((String) request.getAttribute("radomID"))?(String) request.getAttribute("radomID"):"";
        boolean isUnbuildAssembly = !StringUtil.isNullOrEmpty(request.getParameter("isUnbuildAssembly")) ? Boolean.parseBoolean(request.getParameter("isUnbuildAssembly")) : false;
        //Please do same changes to ProductControllerCMN for Same Method
        KwlReturnObject kmsg = null;
        double ActbatchQty = 1;
        double batchQty = 0;
        boolean isBatch = false;
        boolean isserial = false;
        boolean isLocationForProduct = false;
        boolean isWarehouseForProduct = false;
        boolean isRowForProduct = false;
        boolean isRackForProduct = false;
        boolean isBinForProduct = false;

        boolean isBatchForProduct = false;
        boolean isSerialForProduct = false;
        boolean isSKUForProduct = false;
        boolean isEdit = false;
        int serialsequence = 1 , batchsequence = 1; // for user selected sequence of batch and serial while creating Product.
        isEdit = !StringUtil.isNullObject(request.getAttribute("EditFlag")) ? (Boolean) request.getAttribute("EditFlag") : false;
//        DateFormat df = authHandler.getDateFormatter(request);    //refer ticket ERP-15117
        DateFormat df = authHandler.getDateOnlyFormat(request);
        String companyid = sessionHandlerImpl.getCompanyid(request);
        KwlReturnObject capresult = accountingHandlerDAOobj.getObject(CompanyAccountPreferences.class.getName(), companyid);
        CompanyAccountPreferences preferences = (CompanyAccountPreferences) capresult.getEntityList().get(0);
        isBatch = preferences.isIsBatchCompulsory();
        isserial = preferences.isIsSerialCompulsory();

        if (!StringUtil.isNullOrEmpty(product.getID())) {
            isLocationForProduct = product.isIslocationforproduct();
            isWarehouseForProduct = product.isIswarehouseforproduct();
            isBatchForProduct = product.isIsBatchForProduct();
            isSerialForProduct = product.isIsSerialForProduct();
            isSKUForProduct = product.isIsSKUForProduct();
            isRowForProduct = product.isIsrowforproduct();
            isRackForProduct = product.isIsrackforproduct();
            isBinForProduct = product.isIsbinforproduct();
        }
        NewProductBatch productBatch = null;
        String productBatchId = "";
        //Save Batch detail for both  option for serial no and batch also as if batch option is off then also we are generating batch in backend
        for (int i = 0; i < jArr.length(); i++) {
            JSONObject jSONObject = new JSONObject(jArr.get(i).toString());
            if (jSONObject.has("quantity") && !jSONObject.getString("quantity").equals("undefined") && !jSONObject.getString("quantity").isEmpty()) {
                ActbatchQty = jSONObject.getDouble("quantity");
            }
            if (batchQty == 0) {
                batchQty = jSONObject.getDouble("quantity");
            }
            if ((isLocationForProduct || isWarehouseForProduct || isBatchForProduct || isRowForProduct || isRackForProduct || isBinForProduct) && (batchQty == ActbatchQty)) {

                String batchname=StringUtil.DecodeText(jSONObject.optString("batch"));
                productBatchId = accCommonTablesDAO.getpurchaseBatchIdForLocationWarehouseRowRackBin(product.getID(), jSONObject.getString("location"), jSONObject.getString("warehouse"), jSONObject.optString("row", null), jSONObject.optString("rack", null), jSONObject.optString("bin", null), batchname);

                if (StringUtil.isNullOrEmpty(productBatchId)) {

                    HashMap<String, Object> pdfTemplateMap = new HashMap<String, Object>();
                    pdfTemplateMap.put("companyid", product.getCompany().getCompanyID());
                    pdfTemplateMap.put("name", batchname);
                    if (jSONObject.has("mfgdate") && !StringUtil.isNullOrEmpty(jSONObject.getString("mfgdate"))) {
                        pdfTemplateMap.put("mfgdate", df.parse(jSONObject.getString("mfgdate")));
                    }
                    if (jSONObject.has("expdate") && !StringUtil.isNullOrEmpty(jSONObject.getString("expdate"))) {
                        pdfTemplateMap.put("expdate", df.parse(jSONObject.getString("expdate")));
                    }
                    pdfTemplateMap.put("quantity", jSONObject.getString("quantity"));
                    if (jSONObject.has("balance") && !StringUtil.isNullOrEmpty(jSONObject.getString("balance"))) {
                        pdfTemplateMap.put("balance", jSONObject.getString("balance"));
                    }
                    pdfTemplateMap.put("location", jSONObject.optString("location", ""));
                    pdfTemplateMap.put("product", product.getID());
                    pdfTemplateMap.put("warehouse", jSONObject.optString("warehouse", ""));
                    pdfTemplateMap.put("row", jSONObject.optString("row", null));
                    pdfTemplateMap.put("rack", jSONObject.optString("rack", null));
                    pdfTemplateMap.put("bin", jSONObject.optString("bin", null));
                    pdfTemplateMap.put("isopening", false);
                    if(isUnbuildAssembly){
                        pdfTemplateMap.put("ispurchase", false);
                        pdfTemplateMap.put("transactiontype", "27");//This is DO Type Tranction  
                    } else {
                        pdfTemplateMap.put("ispurchase", true);
                        pdfTemplateMap.put("transactiontype", "28");//This is GRN Type Tranction  
                    }
                    kmsg = accCommonTablesDAO.saveNewBatchForProduct(pdfTemplateMap);
                   
                    if (kmsg != null && kmsg.getEntityList().size() != 0) {
                        productBatch = (NewProductBatch) kmsg.getEntityList().get(0);
                        productBatchId = productBatch.getId();
                    }
                } else {
                    HashMap<String, Object> batchUpdateQtyMap = new HashMap<String, Object>();
                    String qtnyVal = String.valueOf(Double.parseDouble(jSONObject.getString("quantity")));
                    if(isUnbuildAssembly){
                        double qtyValue = - (Double.parseDouble(jSONObject.getString("quantity")));
                        qtnyVal = String.valueOf(qtyValue);
                    }
                    batchUpdateQtyMap.put("qty", qtnyVal);
                    batchUpdateQtyMap.put("quantity", String.valueOf(Double.parseDouble(jSONObject.getString("quantity"))));
                    batchUpdateQtyMap.put("id", productBatchId);
                    accCommonTablesDAO.saveBatchAmountDue(batchUpdateQtyMap);
                    KwlReturnObject batchRes = accProductObj.getObject(NewProductBatch.class.getName(), productBatchId);
                    productBatch = (NewProductBatch) batchRes.getEntityList().get(0);
                }

                HashMap<String, Object> documentMap = new HashMap<String, Object>();
                documentMap.put("quantity", jSONObject.getString("quantity"));
                documentMap.put("batchmapid", productBatchId);
                documentMap.put("documentid", ProductBuildID);
                if(isUnbuildAssembly){
                    documentMap.put("transactiontype", "27");//This is DO Type Tranction  
                }else {
                    documentMap.put("transactiontype", "28");//This is GRN Type Tranction
            }
                if (jSONObject.has("mfgdate") && !StringUtil.isNullOrEmpty(jSONObject.getString("mfgdate"))) {
                    documentMap.put("mfgdate", df.parse(jSONObject.getString("mfgdate")));
                }
                if (jSONObject.has("expdate") && !StringUtil.isNullOrEmpty(jSONObject.getString("expdate"))) {
                    documentMap.put("expdate", df.parse(jSONObject.getString("expdate")));
                }

                
                
                /**
                 * added selected sequence for batch selected by user while
                 * creating Product Build.
                 */
                documentMap.put("batchsequence", batchsequence++);
                accCommonTablesDAO.saveBatchDocumentMapping(documentMap);
            }
            batchQty--;


            if (isSerialForProduct) {  //if serial no option is on then only save the serial no details 

                HashMap<String, Object> pdfTemplateMap = new HashMap<String, Object>();
                pdfTemplateMap.put("id", isEdit ? "" : jSONObject.getString("serialnoid"));
                pdfTemplateMap.put("companyid", companyid);
                pdfTemplateMap.put("product", product.getID());
                pdfTemplateMap.put("name", StringUtil.DecodeText(jSONObject.optString("serialno")));
                if (jSONObject.has("expstart") && !StringUtil.isNullOrEmpty(jSONObject.getString("expstart"))) {
                    pdfTemplateMap.put("expfromdate", df.parse(jSONObject.getString("expstart")));
                }
                if (jSONObject.has("expend") && !StringUtil.isNullOrEmpty(jSONObject.getString("expend"))) {
                    pdfTemplateMap.put("exptodate", df.parse(jSONObject.getString("expend")));
                }
                pdfTemplateMap.put("batch", productBatchId);
                if (isUnbuildAssembly) {       //Build Assembly
                    pdfTemplateMap.put("ispurchase", false);
                    pdfTemplateMap.put("quantity", "0");//This is DO Type Tranction  
                    pdfTemplateMap.put("transactiontype", "27");//This is DO Type Tranction  
                    pdfTemplateMap.put("isUnbuildAssembly", true);
                } else {                        //Unbuild Assembly
                    pdfTemplateMap.put("ispurchase", true);
                    pdfTemplateMap.put("quantity", "1");//This is GRN Type Tranction  
                    pdfTemplateMap.put("transactiontype", "28");//This is GRN Type Tranction  
                }
                pdfTemplateMap.put("isopening", true);
                pdfTemplateMap.put("skuvalue", jSONObject.optString("skufield", ""));
                kmsg = accCommonTablesDAO.saveNewSerialForBatch(pdfTemplateMap);
                String serialDetailsId = "";
                if (kmsg != null && kmsg.getEntityList().size() != 0) {
                    NewBatchSerial serialDetails = (NewBatchSerial) kmsg.getEntityList().get(0);
                    serialDetailsId = serialDetails.getId();
            }

                HashMap<String, Object> documentMap = new HashMap<String, Object>();
                documentMap.put("serialmapid", serialDetailsId);
                documentMap.put("documentid", ProductBuildID);
                    if(isUnbuildAssembly){
                    documentMap.put("quantity", 0);
                    documentMap.put("transactiontype", "27");//This is DO Type Tranction  
                }else {
                    documentMap.put("quantity", 1);
                    documentMap.put("transactiontype", "28");//This is GRN Type Tranction
                    }
                if (jSONObject.has("expstart") && !StringUtil.isNullOrEmpty(jSONObject.getString("expstart"))) {
                    documentMap.put("expfromdate", df.parse(jSONObject.getString("expstart")));
                    }
                if (jSONObject.has("expend") && !StringUtil.isNullOrEmpty(jSONObject.getString("expend"))) {
                    documentMap.put("exptodate", df.parse(jSONObject.getString("expend")));
                }
                
                // accCommonTablesDAO.saveSerialDocumentMapping(documentMap);
                /**
                 * added selected sequence for serial selected by user while
                 * creating Product Build.
                 */
                documentMap.put("serialsequence", serialsequence++);
                KwlReturnObject krObj = accCommonTablesDAO.saveSerialDocumentMapping(documentMap);

                SerialDocumentMapping serialDocumentMapping = (SerialDocumentMapping) krObj.getEntityList().get(0);
                if (jSONObject.has("customfield")) {
                    String customfield = jSONObject.getString("customfield");
                    if (!StringUtil.isNullOrEmpty(customfield)) {
                        HashMap<String, Object> DOMap = new HashMap<String, Object>();
                        JSONArray jcustomarray = new JSONArray(customfield);

                        HashMap<String, Object> customrequestParams = new HashMap<String, Object>();
                        customrequestParams.put("customarray", jcustomarray);
                        customrequestParams.put("modulename", "SerialDocumentMapping");
                        customrequestParams.put("moduleprimarykey", "SerialDocumentMappingId");
                        customrequestParams.put("modulerecid", serialDocumentMapping.getId());
                        customrequestParams.put("moduleid", Constants.SerialWindow_ModuleId);
                        customrequestParams.put("companyid", companyid);
                        DOMap.put("id", serialDocumentMapping.getId());
                        customrequestParams.put("customdataclasspath", Constants.Acc_Serial_custom_data_classpath);
                        KwlReturnObject customDataresult = fieldDataManagercntrl.setCustomData(customrequestParams);
                        if (customDataresult != null && customDataresult.getEntityList().size() > 0) {
                            DOMap.put("serialcustomdataref", serialDocumentMapping.getId());
                            accCommonTablesDAO.updateserialcustomdata(DOMap);
                }
                }
                }
                
            } else {
                batchQty = 0;
            }
        }
        
    }
   
/*
    saveAssemblyProductQADetails() is written to save batch/serial data in QA table 
    */
    public void saveAssemblyProductQADetails(String batchJSON, Product product, HttpServletRequest request) throws JSONException, ParseException, SessionExpiredException, ServiceException, UnsupportedEncodingException {
        JSONArray jArr = new JSONArray(batchJSON);
        String purchasebatchid = "";
        String isUpdate = !StringUtil.isNullOrEmpty((String) request.getAttribute("isUpdate")) ? (String) request.getAttribute("isUpdate") : "false";
        String ProductBuildID = !StringUtil.isNullOrEmpty((String) request.getAttribute("ProductBuildID")) ? (String) request.getAttribute("ProductBuildID") : product.getID();
        String radomID = !StringUtil.isNullOrEmpty((String) request.getAttribute("radomID")) ? (String) request.getAttribute("radomID") : "";
        boolean isUnbuildAssembly = !StringUtil.isNullOrEmpty(request.getParameter("isUnbuildAssembly")) ? Boolean.parseBoolean(request.getParameter("isUnbuildAssembly")) : false;
        //Please do same changes to ProductControllerCMN for Same Method
        KwlReturnObject kmsg = null;
        double ActbatchQty = 1;
        double batchQty = 0;
        boolean isBatch = false;
        boolean isserial = false;
        boolean isLocationForProduct = false;
        boolean isWarehouseForProduct = false;
        boolean isRowForProduct = false;
        boolean isRackForProduct = false;
        boolean isBinForProduct = false;

        boolean isBatchForProduct = false;
        boolean isSerialForProduct = false;
        boolean isSKUForProduct = false;
        boolean isEdit = false;
        isEdit = !StringUtil.isNullObject(request.getAttribute("EditFlag")) ? (Boolean) request.getAttribute("EditFlag") : false;
//        DateFormat df = authHandler.getDateFormatter(request);    //refer ticket ERP-15117
        DateFormat df = authHandler.getDateOnlyFormat(request);
        String companyid = sessionHandlerImpl.getCompanyid(request);
        KwlReturnObject capresult = accountingHandlerDAOobj.getObject(CompanyAccountPreferences.class.getName(), companyid);
        CompanyAccountPreferences preferences = (CompanyAccountPreferences) capresult.getEntityList().get(0);
        isBatch = preferences.isIsBatchCompulsory();
        isserial = preferences.isIsSerialCompulsory();

        if (!StringUtil.isNullOrEmpty(product.getID())) {
            isLocationForProduct = product.isIslocationforproduct();
            isWarehouseForProduct = product.isIswarehouseforproduct();
            isBatchForProduct = product.isIsBatchForProduct();
            isSerialForProduct = product.isIsSerialForProduct();
            isSKUForProduct = product.isIsSKUForProduct();
            isRowForProduct = product.isIsrowforproduct();
            isRackForProduct = product.isIsrackforproduct();
            isBinForProduct = product.isIsbinforproduct();
        }
        NewProductBatch productBatch = null;
        String productBatchId = "";
        HashMap<String, Object> batchDataForSerialMap = new HashMap<String, Object>();// this map is used only in batch/serail case. when there is one batch and three serials at that except first record we doesent get batchdata so i have batch data in this map
        //Save Batch detail for both  option for serial no and batch also as if batch option is off then also we are generating batch in backend
        for (int i = 0; i < jArr.length(); i++) {
            JSONObject jSONObject = new JSONObject(jArr.get(i).toString());
            if (jSONObject.has("quantity") && !jSONObject.getString("quantity").equals("undefined") && !jSONObject.getString("quantity").isEmpty()) {
                ActbatchQty = jSONObject.getDouble("quantity");
            }
            if (batchQty == 0) {
                batchQty = jSONObject.getDouble("quantity");
            }
            
            HashMap<String, Object> QaDetailsMap = new HashMap<String, Object>();
            if ((isLocationForProduct || isWarehouseForProduct || isBatchForProduct || isRowForProduct || isRackForProduct || isBinForProduct) && (batchQty == ActbatchQty)) {

                HashMap<String, Object> pdfTemplateMap = new HashMap<String, Object>();
                String batchname = StringUtil.DecodeText(jSONObject.optString("batch"));

                QaDetailsMap.put("companyid", product.getCompany().getCompanyID());
                QaDetailsMap.put("batchname", batchname);
                if (jSONObject.has("mfgdate") && !StringUtil.isNullOrEmpty(jSONObject.getString("mfgdate"))) {
                    QaDetailsMap.put("mfgdate", df.parse(jSONObject.getString("mfgdate")));
                }
                if (jSONObject.has("expdate") && !StringUtil.isNullOrEmpty(jSONObject.getString("expdate"))) {
                    QaDetailsMap.put("expdate", df.parse(jSONObject.getString("expdate")));
                }
                QaDetailsMap.put("quantity", jSONObject.getString("quantity"));
                if (jSONObject.has("balance") && !StringUtil.isNullOrEmpty(jSONObject.getString("balance"))) {
                    QaDetailsMap.put("balance", jSONObject.getString("balance"));
                }
                QaDetailsMap.put("location", jSONObject.optString("location", ""));
                QaDetailsMap.put("product", product.getID());
                QaDetailsMap.put("warehouse", jSONObject.optString("warehouse", ""));
                QaDetailsMap.put("row", jSONObject.optString("row", null));
                QaDetailsMap.put("rack", jSONObject.optString("rack", null));
                QaDetailsMap.put("bin", jSONObject.optString("bin", null));
                QaDetailsMap.put("isopening", false);
                if (isUnbuildAssembly) {
                    QaDetailsMap.put("ispurchase", false);
                    QaDetailsMap.put("transactiontype", "27");//This is DO Type Tranction  
                } else {
                    QaDetailsMap.put("ispurchase", true);
                    QaDetailsMap.put("transactiontype", "28");//This is GRN Type Tranction  
                }
                for (Map.Entry<String, Object> entry : QaDetailsMap.entrySet()) {
                    batchDataForSerialMap.put(entry.getKey(), entry.getValue());
                }
//            
            }
            batchQty--;

            if (isSerialForProduct) {  //if serial no option is on then only save the serial no details 
                
                for (Map.Entry<String, Object> entry : batchDataForSerialMap.entrySet()) {
                    QaDetailsMap.put(entry.getKey(), entry.getValue());
                }
                QaDetailsMap.put("id", isEdit ? "" : jSONObject.getString("serialnoid"));
                QaDetailsMap.put("companyid", companyid);
                QaDetailsMap.put("product", product.getID());
                QaDetailsMap.put("serialname",StringUtil.DecodeText(jSONObject.optString("serialno")));
                if (jSONObject.has("expstart") && !StringUtil.isNullOrEmpty(jSONObject.getString("expstart"))) {
                    QaDetailsMap.put("expfromdate", df.parse(jSONObject.getString("expstart")));
                }
                if (jSONObject.has("expend") && !StringUtil.isNullOrEmpty(jSONObject.getString("expend"))) {
                    QaDetailsMap.put("exptodate", df.parse(jSONObject.getString("expend")));
                }
                QaDetailsMap.put("batch", productBatchId);
                if (isUnbuildAssembly) {       //Build Assembly
                    QaDetailsMap.put("ispurchase", false);
                    QaDetailsMap.put("quantity", "0");//This is DO Type Tranction  
                    QaDetailsMap.put("transactiontype", "27");//This is DO Type Tranction  
                    QaDetailsMap.put("isUnbuildAssembly", true);
                } else {                        //Unbuild Assembly
                    QaDetailsMap.put("ispurchase", true);
                    QaDetailsMap.put("quantity", "1");//This is GRN Type Tranction  
                    QaDetailsMap.put("transactiontype", "28");//This is GRN Type Tranction  
                }
                QaDetailsMap.put("isopening", true);
                QaDetailsMap.put("skuvalue", jSONObject.optString("skufield", ""));

            } else {
                batchQty = 0;
            }

            
            QaDetailsMap.put("documentid", ProductBuildID);
            QaDetailsMap.put("approvalstatus", AssemblyQAStatus.PENDING);
            KwlReturnObject QaObj = accProductObj.saveQAApprovalDetails(QaDetailsMap);
            AssemblyProductApprovalDetails apdq = (AssemblyProductApprovalDetails) QaObj.getEntityList().get(0);

        }

    }
    
    public HashMap<String, Object> getAssemblyRequestParams(HttpServletRequest request) throws ServiceException, SessionExpiredException {
        HashMap<String, Object> requestParams = AccountingManager.getGlobalParams(request);
        boolean isUnbuildAssembly = !StringUtil.isNullOrEmpty(request.getParameter("isUnbuildAssembly")) ? Boolean.parseBoolean(request.getParameter("isUnbuildAssembly")) : false;
        requestParams.put("isUnbuildAssembly", isUnbuildAssembly);       
        requestParams.put("assembly", request.getParameter("assembly"));
        requestParams.put("applydate", request.getParameter("applydate"));
        requestParams.put("createdon", request.getParameter("createdon"));
        requestParams.put("quantity", Double.parseDouble(request.getParameter("quantity") == null ? "0" : request.getParameter("quantity").toString()));
        return requestParams;
    }

    public void saveNewAssemblyBatch(String batchJSON, String productIdStr, HttpServletRequest request, String documentId) throws JSONException, ParseException, SessionExpiredException, ServiceException, UnsupportedEncodingException, AccountingException {
        JSONArray jArr = new JSONArray(batchJSON);
        String purchasebatchid = "";
        KwlReturnObject kmsg = null;
        double ActbatchQty = 1;
        double batchQty = 0;
        boolean isBatch = false;
        boolean isserial = false;
        boolean isLocationForProduct = false;
        boolean isWarehouseForProduct = false;
        boolean isBatchForProduct = false;
        boolean isSerialForProduct = false;
        boolean isRowForProduct = false;
        boolean isRackForProduct = false;
        boolean isBinForProduct = false;
//        DateFormat df = authHandler.getDateFormatter(request);    //refer ticket ERP-15117
        DateFormat df = authHandler.getDateOnlyFormat(request);
        boolean isUnbuildAssembly = !StringUtil.isNullOrEmpty(request.getParameter("isUnbuildAssembly")) ? Boolean.parseBoolean(request.getParameter("isUnbuildAssembly")) : false;             
        String companyid = sessionHandlerImpl.getCompanyid(request);
        KwlReturnObject capresult = accountingHandlerDAOobj.getObject(CompanyAccountPreferences.class.getName(), companyid);
        CompanyAccountPreferences preferences = (CompanyAccountPreferences) capresult.getEntityList().get(0);
        isBatch = preferences.isIsBatchCompulsory();
        isserial = preferences.isIsSerialCompulsory();

        if (!StringUtil.isNullOrEmpty(productIdStr)) {
            KwlReturnObject prodresult = accProductObj.getObject(Product.class.getName(), productIdStr);
            Product product = (Product) prodresult.getEntityList().get(0);
            isLocationForProduct = product.isIslocationforproduct();
            isWarehouseForProduct = product.isIswarehouseforproduct();
            isBatchForProduct = product.isIsBatchForProduct();
            isSerialForProduct = product.isIsSerialForProduct();
            isRowForProduct = product.isIsrowforproduct();
            isRackForProduct = product.isIsrackforproduct();
            isBinForProduct = product.isIsbinforproduct();
        }

        //Save Batch detail for both  option for serial no and batch also as if batch option is off then also we are generating batch in backend
        for (int i = 0; i < jArr.length(); i++) {
            JSONObject jSONObject = new JSONObject(jArr.get(i).toString());
            if (jSONObject.has("quantity") && !jSONObject.getString("quantity").equals("undefined") && !jSONObject.getString("quantity").isEmpty()) {
                ActbatchQty = jSONObject.getDouble("quantity");
            }
            if (batchQty == 0) {
                batchQty = jSONObject.getDouble("quantity");
            }
            if ((isLocationForProduct || isWarehouseForProduct || isBatchForProduct || isRowForProduct || isRackForProduct || isBinForProduct) && (batchQty == ActbatchQty)) {
                HashMap<String, Object> documentMap = new HashMap<String, Object>();
                documentMap.put("quantity", jSONObject.getString("quantity"));

                documentMap.put("documentid", documentId);
                if(isUnbuildAssembly){  //This is for BOM Products
                    documentMap.put("transactiontype", "28");//This is GRN Type Tranction  
                } else {
                    documentMap.put("transactiontype", "27");//This is GRN Type Tranction  
                }                
                if (jSONObject.has("mfgdate") && !StringUtil.isNullOrEmpty(jSONObject.getString("mfgdate"))) {
                    documentMap.put("mfgdate", df.parse(jSONObject.getString("mfgdate")));
                }
                if (jSONObject.has("expdate") && !StringUtil.isNullOrEmpty(jSONObject.getString("expdate"))) {
                    documentMap.put("expdate", df.parse(jSONObject.getString("expdate")));
                }
                documentMap.put("batchmapid", jSONObject.getString("purchasebatchid"));



                if (!isBatchForProduct && !isSerialForProduct) {
                    HashMap<String, Object> filterRequestParams = new HashMap<String, Object>();
                    ArrayList filter_names = new ArrayList(), filter_params = new ArrayList(), order_by = new ArrayList(), order_type = new ArrayList();
                    filter_names.add("company.companyID");
                    filter_params.add(sessionHandlerImpl.getCompanyid(request));

                    if (!StringUtil.isNullOrEmpty(jSONObject.getString("warehouse"))) {
                        String warehouse = jSONObject.getString("warehouse");
                        filter_names.add("warehouse.id");
                        filter_params.add(warehouse);
                    }
                    if (!StringUtil.isNullOrEmpty(jSONObject.getString("location"))) {
                        String location = jSONObject.getString("location");
                        filter_names.add("location.id");
                        filter_params.add(location);
                    }
                    if (!StringUtil.isNullOrEmpty(jSONObject.optString("row"))) {
                        String row = jSONObject.optString("row");
                        filter_names.add("row.id");
                        filter_params.add(row);
                    }
                    if (!StringUtil.isNullOrEmpty(jSONObject.optString("rack"))) {
                        String rack = jSONObject.optString("rack");
                        filter_names.add("rack.id");
                        filter_params.add(rack);
                    }
                    if (!StringUtil.isNullOrEmpty(jSONObject.optString("bin"))) {
                        String bin = jSONObject.optString("bin");
                        filter_names.add("bin.id");
                        filter_params.add(bin);
                    }


                    // if (!StringUtil.isNullOrEmpty(request.getParameter("productid"))) {
                    filter_names.add("product");
                    filter_params.add(productIdStr);
                    // }


                    filterRequestParams.put("filter_names", filter_names);
                    filterRequestParams.put("filter_params", filter_params);
                    filterRequestParams.put("order_by", order_by);
                    filterRequestParams.put("order_type", order_type);
                    KwlReturnObject result = accMasterItemsDAO.getNewBatches(filterRequestParams, false, false);
                    List listResult = result.getEntityList();
                    Iterator itrResult = listResult.iterator();
                    Double quantityToDue = ActbatchQty;
                    while (itrResult.hasNext()) {
                            NewProductBatch newProductBatch = (NewProductBatch) itrResult.next();
                        if (quantityToDue > 0) {
                            double dueQty = newProductBatch.getQuantitydue();
                            HashMap<String, Object> batchUpdateQtyMap = new HashMap<String, Object>();
                            batchUpdateQtyMap.put("id", newProductBatch.getId());
//                            if (dueQty > 0) {	//ERP-39359
                                if (quantityToDue > dueQty) {
                                    if(isUnbuildAssembly){
                                        batchUpdateQtyMap.put("qty", String.valueOf((quantityToDue)));
                                        quantityToDue = quantityToDue - dueQty;
                                    }else{
                                        batchUpdateQtyMap.put("qty", String.valueOf(-(quantityToDue)));
                                        quantityToDue = quantityToDue - dueQty;
                                    }
                                } else {
                                    if(isUnbuildAssembly){
                                        batchUpdateQtyMap.put("qty", String.valueOf((quantityToDue)));
                                        quantityToDue = quantityToDue - quantityToDue;
                                    }else{
                                        batchUpdateQtyMap.put("qty", String.valueOf(-(quantityToDue)));
                                        quantityToDue = quantityToDue - quantityToDue;
                                    }
                                    

                                }
                                documentMap.put("batchmapid", newProductBatch.getId());
                                accCommonTablesDAO.saveBatchAmountDue(batchUpdateQtyMap);
//                            }
                        }
                    }
                } else {

                    HashMap<String, Object> batchUpdateQtyMap = new HashMap<String, Object>();
                    batchUpdateQtyMap.put("qty",isUnbuildAssembly? String.valueOf(Double.parseDouble(jSONObject.getString("quantity"))) : String.valueOf(-(Double.parseDouble(jSONObject.getString("quantity")))));
                    batchUpdateQtyMap.put("id", jSONObject.getString("purchasebatchid"));
                    accCommonTablesDAO.saveBatchAmountDue(batchUpdateQtyMap);

                }
                
                if(!(ActbatchQty==0 && StringUtil.isNullOrEmpty((String) documentMap.get("batchmapid")))){
                accCommonTablesDAO.saveBatchDocumentMapping(documentMap);
            }
            }
            batchQty--;

            if (isSerialForProduct) {  //if serial no option is on then only save the serial no details 

                HashMap<String, Object> documentMap = new HashMap<String, Object>();
                documentMap.put("quantity", 1);
                documentMap.put("serialmapid", jSONObject.getString("purchaseserialid"));
                documentMap.put("documentid", documentId);
                if(isUnbuildAssembly){  //This is for BOM Product
                    documentMap.put("transactiontype", "28");//This is GRN Type Tranction  
                } else {
                    documentMap.put("transactiontype", "27");//This is GRN Type Tranction  
                }
                if (jSONObject.has("expstart") && !StringUtil.isNullOrEmpty(jSONObject.getString("expstart"))) {
                    documentMap.put("expfromdate", df.parse(jSONObject.getString("expstart")));
                }
                if (jSONObject.has("expend") && !StringUtil.isNullOrEmpty(jSONObject.getString("expend"))) {
                    documentMap.put("exptodate", df.parse(jSONObject.getString("expend")));
                }


                //   accCommonTablesDAO.saveSerialDocumentMapping(documentMap);
                KwlReturnObject krObj = accCommonTablesDAO.saveSerialDocumentMapping(documentMap);

                SerialDocumentMapping serialDocumentMapping = (SerialDocumentMapping) krObj.getEntityList().get(0);
                if (jSONObject.has("customfield")) {
                    String customfield = jSONObject.getString("customfield");
                    if (!StringUtil.isNullOrEmpty(customfield)) {
                        HashMap<String, Object> DOMap = new HashMap<String, Object>();
                        JSONArray jcustomarray = new JSONArray(customfield);

                        HashMap<String, Object> customrequestParams = new HashMap<String, Object>();
                        customrequestParams.put("customarray", jcustomarray);
                        customrequestParams.put("modulename", "SerialDocumentMapping");
                        customrequestParams.put("moduleprimarykey", "SerialDocumentMappingId");
                        customrequestParams.put("modulerecid", serialDocumentMapping.getId());
                        customrequestParams.put("moduleid", Constants.SerialWindow_ModuleId);
                        customrequestParams.put("companyid", companyid);
                        DOMap.put("id", serialDocumentMapping.getId());
                        customrequestParams.put("customdataclasspath", Constants.Acc_Serial_custom_data_classpath);
                        KwlReturnObject customDataresult = fieldDataManagercntrl.setCustomData(customrequestParams);
                        if (customDataresult != null && customDataresult.getEntityList().size() > 0) {
                            DOMap.put("serialcustomdataref", serialDocumentMapping.getId());
                            accCommonTablesDAO.updateserialcustomdata(DOMap);
                        }
                    }
                }
                HashMap<String, Object> serialUpdateQtyMap = new HashMap<String, Object>();
                if(isUnbuildAssembly){
                    serialUpdateQtyMap.put("qty", "1");
                }else{
                    serialUpdateQtyMap.put("qty", "-1");
                }
                serialUpdateQtyMap.put("id", jSONObject.getString("purchaseserialid"));
                accCommonTablesDAO.saveSerialAmountDue(serialUpdateQtyMap);

            } else {
                batchQty = 0;
            }
        }

    }

    public boolean deleteExistingBuildAssemblyEntries(HttpServletRequest request) throws ServiceException, SessionExpiredException {
        try {
            String productids[] = request.getParameterValues("productids");
            String productrefno[] = request.getParameterValues("productrefno");
            String mainproductids[] = request.getParameterValues("product");
            String assmbledProdQty[] = request.getParameterValues("assmbledProdQty");
            boolean isEdit = StringUtil.isNullOrEmpty(request.getParameter("isEdit")) ? false : Boolean.parseBoolean(request.getParameter("isEdit"));
            String companyid = sessionHandlerImpl.getCompanyid(request);
            for (int i = 0; i < productids.length; i++) {
//                addAsblyProdsNegativeEntry(productids[i], companyid);
                KwlReturnObject prodresult1 = accProductObj.getObject(ProductBuild.class.getName(), productids[i]);
                ProductBuild productbuild = (ProductBuild) prodresult1.getEntityList().get(0);
                // delete ProductBuild inventory
                if (productbuild.getInventory() != null) {
                    accProductObj.deleteInventory(productbuild.getInventory().getID(), companyid);
                }

                // delete ProductBuildDetail inventory
                KwlReturnObject result = accProductObj.getProductBuildDetailInventory(productbuild.getID());
                List<ProductBuildDetails> list = result.getEntityList();
                for (ProductBuildDetails buildDetails : list) {
                    if(buildDetails.getAproduct()!=null){
                        buildDetails.getAproduct().setRecycleQuantity(buildDetails.getAproduct().getRecycleQuantity()+buildDetails.getRecycleQuantity());
                    }
                    accProductObj.deleteInventory(buildDetails.getInventory().getID(), companyid);
                }
                
                
                accProductObj.deleteProductBuildDetailsByID(productids[i], companyid);
                accProductObj.deleteProductbBuildByID(productids[i], companyid);
                accJournalEntryobj.deleteJournalEntryPermanent(productbuild.getJournalentry().getID(), sessionHandlerImpl.getCompanyid(request));
                
                if (!isEdit) {
                    auditTrailObj.insertAuditLog(AuditAction.PRODUCT_BUILD_ASSEMBLY_DELETION, "User " + sessionHandlerImpl.getUserFullName(request) + " has deleted product build Assembly " + productrefno[i], request, productids[i]);
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }

        return true;
    }

    private void addAsblyProdsNegativeEntry(String buildProductid, String companyid) {
        try {
            List<ProductBuildDetails> list = accProductObj.getAssembyProducts(buildProductid, companyid);
            for (ProductBuildDetails pbd : list) {
                JSONObject inventoryjson = new JSONObject();
                inventoryjson.put("productid", pbd.getAproduct().getID());
                inventoryjson.put("quantity", "-" + (pbd.getAquantity() * pbd.getBuild().getQuantity()));
                inventoryjson.put("baseuomquantity", "-" + (pbd.getAquantity() * pbd.getBuild().getQuantity()));
                inventoryjson.put("baseuomrate", 1);

                inventoryjson.put("description", "Build Product Assembly for " + pbd.getAproduct().getName());
                inventoryjson.put("carryin", false);
                inventoryjson.put("defective", false);
                inventoryjson.put("newinventory", false);
                inventoryjson.put("companyid", companyid);
                KwlReturnObject invresult = accProductObj.addInventory(inventoryjson);
            }
        } catch (JSONException ex) {
            Logger.getLogger(accProductController.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ServiceException se) {
        }
    }
    
    private void addStockMovementForBuildProduct(String[] jsonData, Product product,String companyid,double  price,HashMap<String, Object> details,ProductBuild productBuild,String refNo) throws AccountingException {

        try {
            Company company=null;
            DateFormat df = (details!=null) ? (DateFormat) details.get("df") : null;
            String applydate = (details!=null) ? (String) details.get("applydate") : null;
            Date appDate = (df!=null && applydate!=null) ? df.parse(applydate) : (authHandler.getSimpleDateAndTimeFormat().parse(authHandler.getConstantDateFormatter().format(new Date())));
            List<StockMovement> stockMovementsList=new ArrayList<StockMovement>();
            boolean isUnbuildAssembly = false;
            if (details != null && details.containsKey("isUnbuildAssembly")) {
                isUnbuildAssembly = (Boolean) details.get("isUnbuildAssembly");
            }
            for (int i = 0; i < jsonData.length; i++) {
                String jsonStr = jsonData[i];
                JSONArray jArr = new JSONArray(jsonStr);

                Map prodSerialMap = new HashMap();
                for (int j = 0; j < jArr.length(); j++) {
                    JSONObject jObj = new JSONObject(jArr.get(j).toString());
                    String prod = jObj.optString("productid");
                    String serialno = jObj.getString("serialno");
                    if (!StringUtil.isNullOrEmpty(serialno)) {
                        if (prodSerialMap.containsKey(prod)) {
                            String srl=(String)prodSerialMap.get(prod);
                            srl += "," + serialno;
                            prodSerialMap.put(prod, srl);
                        }else {
                            prodSerialMap.put(prod, serialno);
                        }
                    }
                }
                
                for (int j = 0; j < jArr.length(); j++) {
                    /*StockMovementDetail obj & StockMovementDetail Set used only when you have location & warehouse
                     * So create its instance only in the case of location & warehouse.
                     */
                    Set<StockMovementDetail> stockMovementDetails = null;
                    StockMovement stockmnt=new StockMovement();
                    Store Invwarehouse =null;
                    Location locationObj=null;
                    
                    JSONObject jSONObject = new JSONObject(jArr.get(j).toString());
                    String qty = jSONObject.getString("quantity");
                    String location = jSONObject.getString("location");
                    String warehouse = jSONObject.getString("warehouse");
//                    String serialno = jSONObject.getString("serialno");
                    String batch = jSONObject.getString("batch");
                    double quantity=0;

                    if(!StringUtil.isNullOrEmpty(companyid)){
                        company = (Company) kwlCommonTablesDAOObj.getClassObject(Company.class.getName(), companyid);
                    }
                    if(!StringUtil.isNullOrEmpty(location)){
                        locationObj = (Location) kwlCommonTablesDAOObj.getClassObject(Location.class.getName(), location);
                    }
                    if(!StringUtil.isNullOrEmpty(warehouse)){
                         Invwarehouse = (Store) kwlCommonTablesDAOObj.getClassObject(Store.class.getName(), warehouse);
                    }

                    if(!StringUtil.isNullOrEmpty(qty)){
                        quantity=Double.parseDouble(qty);
                    }
                    if (locationObj != null && Invwarehouse != null) {
                        stockMovementDetails = new HashSet<StockMovementDetail>();
                        StockMovementDetail stockmovementDTL = new StockMovementDetail();
                        stockmnt.setProduct(product);
                        stockmnt.setPricePerUnit(price);
                        stockmnt.setModuleRefId(productBuild != null ? productBuild.getID() : product.getID());
                        stockmnt.setModuleRefDetailId(productBuild != null ? productBuild.getID() : product.getID());
                        stockmnt.setAssembledProduct(product);
                        stockmnt.setCompany(company);
                        stockmnt.setQuantity(quantity);
                        stockmnt.setTransactionNo(refNo);
                        stockmnt.setStore(Invwarehouse);
                        stockmnt.setStockUoM(product.getUnitOfMeasure());
                        if (isUnbuildAssembly) {    //Parent Product Stock Deduction
                            stockmnt.setRemark("New Stock deducted from Unbuild Assembly.");
                            stockmnt.setTransactionModule(TransactionModule.PRODUCT_UNBUILD_ASSEMBLY);
                            stockmnt.setTransactionType(TransactionType.OUT);
                        } else {
                            stockmnt.setRemark("New Stock Added from Build Assembly.");
                            stockmnt.setTransactionModule(TransactionModule.PRODUCT_BUILD_ASSEMBLY);
                            stockmnt.setTransactionType(TransactionType.IN);
                        }
                        stockmnt.setTransactionDate(appDate);
                        stockmovementDTL.setBatchName(batch);
                        stockmovementDTL.setLocation(locationObj);
                        if (product.isIsrowforproduct()) {
                            KwlReturnObject krObject = accountingHandlerDAOobj.getObject(StoreMaster.class.getName(), jSONObject.optString("row"));
                            StoreMaster row = (StoreMaster) krObject.getEntityList().get(0);
                            stockmovementDTL.setRow(row);
                        }
                        if (product.isIsrackforproduct()) {
                            KwlReturnObject krObject = accountingHandlerDAOobj.getObject(StoreMaster.class.getName(), jSONObject.optString("rack"));
                            StoreMaster rack = (StoreMaster) krObject.getEntityList().get(0);
                            stockmovementDTL.setRack(rack);
                        }
                        if (product.isIsbinforproduct()) {
                            KwlReturnObject krObject = accountingHandlerDAOobj.getObject(StoreMaster.class.getName(), jSONObject.optString("bin"));
                            StoreMaster bin = (StoreMaster) krObject.getEntityList().get(0);
                            stockmovementDTL.setBin(bin);
                        }
                        stockmovementDTL.setQuantity(quantity);
                        stockmovementDTL.setSerialNames(prodSerialMap.containsKey(product.getID())? (String)prodSerialMap.get(product.getID()): null);
                        stockmovementDTL.setStockMovement(stockmnt);
                        stockMovementDetails.add(stockmovementDTL);
                        stockmnt.setStockMovementDetails(stockMovementDetails);
                        stockMovementsList.add(stockmnt);
                    }
                }

            }
            if (stockMovementsList.size() > 0) {
                stockMovementService.addOrUpdateBulkStockMovement(product.getCompany(), product.getID(), stockMovementsList,false);
            }

        } catch (Exception ex) {
            Logger.getLogger(accProductController.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
            throw new AccountingException("System Failure while Build Product");
        }
    }

    /*
     * String companyid, ProductBuild Obj & String refNo put in HashMap in Actual Argument
     */
    private void addStockMovementForBuildSubProduct(JSONObject jobj, JSONArray jArr, HashMap<String, Object> map) throws AccountingException {
        try {
            Company company = null;
            Date newUserDate =new Date();
            String companyid = null, refNo = null;
            ProductBuild productBuild = null;
            boolean isUnbuildAssembly = false;
            if(map!=null && (map.containsKey("companyid") && map.get("companyid")!=null)){
                companyid = (String)map.get("companyid");
            }
            if(map!=null && (map.containsKey("productBuild") && map.get("productBuild")!=null)){
                productBuild = (ProductBuild)map.get("productBuild");
            }
            if(map!=null && (map.containsKey("refNo") && map.get("refNo")!=null)){
                refNo = (String)map.get("refNo");
            }
            if(map!=null && (map.containsKey("isUnbuildAssembly") && map.get("isUnbuildAssembly")!=null)){
                isUnbuildAssembly = (Boolean)map.get("isUnbuildAssembly");
            }
            KwlReturnObject custumObjresult = accountingHandlerDAOobj.getObject(Company.class.getName(), companyid);
            company = (Company) custumObjresult.getEntityList().get(0);
            if (company.getCreator() != null) {
               newUserDate = authHandler.getUserNewDate(null, company.getCreator().getTimeZone()!=null?company.getCreator().getTimeZone().getDifference() : company.getTimeZone().getDifference());
            }
            Date asOfDate = productBuild!=null ? (productBuild.getInventory()!=null ? productBuild.getInventory().getUpdateDate() : newUserDate) : newUserDate;
            if (jobj != null) {
                Product productObj = null;
                StockMovement stockmnt = new StockMovement();
                String product = jobj.getString("product");
                double rate =jobj.has("rate")? jobj.getDouble("rate"):0;
                double quantity = 0;
                double totalSMQty=0;
                if (!StringUtil.isNullOrEmpty(companyid)) {
                    company = (Company) kwlCommonTablesDAOObj.getClassObject(Company.class.getName(), companyid);
                }
                if(!StringUtil.isNullOrEmpty(jobj.getString("quantity"))&&!jobj.getString("quantity").equals("undefined")){
                    quantity=Double.parseDouble(jobj.getString("quantity"));
                }
                String prevLocation = "";
                String preWarehouse = "";
                String prevSerialno = "";
                String prevBatch = "";
                if (!StringUtil.isNullOrEmpty(product)) {
                    productObj = (Product) kwlCommonTablesDAOObj.getClassObject(Product.class.getName(), product);
                }
                stockmnt.setPricePerUnit(rate);
                stockmnt.setModuleRefId(productBuild.getID());
                stockmnt.setModuleRefDetailId(productBuild.getID());
                stockmnt.setProduct(productObj);                
                stockmnt.setTransactionNo(refNo);
                stockmnt.setStockUoM(productObj.getUnitOfMeasure());
                if(isUnbuildAssembly){
                    stockmnt.setRemark("Used in Unbuild Assembly");
                    stockmnt.setTransactionModule(TransactionModule.PRODUCT_UNBUILD_ASSEMBLY);
                    stockmnt.setTransactionType(TransactionType.IN);
                } else {
                    stockmnt.setRemark("Used in Build Assembly");
                    stockmnt.setTransactionModule(TransactionModule.PRODUCT_BUILD_ASSEMBLY);
                    stockmnt.setTransactionType(TransactionType.OUT);
                }
                stockmnt.setCompany(company);
                stockmnt.setAssembledProduct(productBuild.getProduct());
                stockmnt.setTransactionDate(asOfDate);
                Set<StockMovementDetail> stockMovementDetailSet=new HashSet<StockMovementDetail>();
                for (int j = 0; j < jArr.length(); j++) {
                    StockMovementDetail stockmovementDTL = new StockMovementDetail();
                    Store Invwarehouse = null;
                    Location locationObj = null;
                    JSONObject jSONObject = new JSONObject(jArr.get(j).toString());
                    double qty = 1;
                    String location = "";
                    String warehouse = "";
                    String serialno = "";
                    String batch = "";
                    if (jSONObject.has("quantity") && !jSONObject.getString("quantity").equals("undefined") && !jSONObject.getString("quantity").isEmpty()) {
                        qty = jSONObject.getDouble("quantity");
                    }
                    if (jSONObject.has("location") && !jSONObject.getString("location").equals("undefined") && !jSONObject.getString("location").isEmpty()) {
                        location = jSONObject.getString("location");
                        prevLocation=location;
                    }
                    if (jSONObject.has("warehouse") && !jSONObject.getString("warehouse").equals("undefined") && !jSONObject.getString("warehouse").isEmpty()) {
                        warehouse = jSONObject.getString("warehouse");
                        preWarehouse=warehouse;
                    }

                    if (jSONObject.has("serialno") && !jSONObject.getString("serialno").equals("undefined") && !jSONObject.getString("serialno").isEmpty()) {
                        serialno = jSONObject.getString("serialno");
                        prevSerialno=serialno;
                        qty=1;
                    }
                    if (jSONObject.has("batch") && !jSONObject.getString("batch").equals("undefined") && !jSONObject.getString("batch").isEmpty()) {
                        batch = jSONObject.getString("batch");
                        prevBatch = batch;
                    }
                    location = location == "" ? prevLocation : location;
                    warehouse = warehouse == "" ? preWarehouse : warehouse;
                    batch = batch == "" ? prevBatch : batch;
                    double pquantity = 0;
                    if (warehouse == null || location == null) {
                        continue;
                    }
                  
                    if (!StringUtil.isNullOrEmpty(location)) {
                        locationObj = (Location) kwlCommonTablesDAOObj.getClassObject(Location.class.getName(), location);
                    }
                    if (!StringUtil.isNullOrEmpty(location)) {
                        Invwarehouse = (Store) kwlCommonTablesDAOObj.getClassObject(Store.class.getName(), warehouse);
                    }
                    if (Invwarehouse != null && locationObj != null) {
                        stockmnt.setStore(Invwarehouse);
                        stockmovementDTL.setBatchName(batch);
                        stockmovementDTL.setLocation(locationObj);
                        if (productObj.isIsrowforproduct()) {
                            KwlReturnObject krObject = accountingHandlerDAOobj.getObject(StoreMaster.class.getName(), jSONObject.optString("row"));
                            StoreMaster row = (StoreMaster) krObject.getEntityList().get(0);
                            stockmovementDTL.setRow(row);
                        }
                        if (productObj.isIsrackforproduct()) {
                            KwlReturnObject krObject = accountingHandlerDAOobj.getObject(StoreMaster.class.getName(), jSONObject.optString("rack"));
                            StoreMaster rack = (StoreMaster) krObject.getEntityList().get(0);
                            stockmovementDTL.setRack(rack);
                        }
                        if (productObj.isIsbinforproduct()) {
                            KwlReturnObject krObject = accountingHandlerDAOobj.getObject(StoreMaster.class.getName(), jSONObject.optString("bin"));
                            StoreMaster bin = (StoreMaster) krObject.getEntityList().get(0);
                            stockmovementDTL.setBin(bin);
                        }
                        stockmovementDTL.setQuantity(qty);
                        stockmovementDTL.setSerialNames(serialno);
                        stockmovementDTL.setStockMovement(stockmnt);
                        stockMovementDetailSet.add(stockmovementDTL);
                        totalSMQty += qty;
                    }
                }
                stockmnt.setQuantity(totalSMQty);
                if (stockmnt.getStore() != null) {
                    stockmnt.setStockMovementDetails(stockMovementDetailSet);
                    stockMovementService.addStockMovement(stockmnt);
                }
            }

        } catch (Exception ex) {
            Logger.getLogger(accProductController.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
            throw new AccountingException("System Failure while Build Product");
        }
    } 
/*
 * addStockMovementForUnBuildSubProduct() used only for Product Disassembling Operation. Here Quantity of Sub-components will be decrease 
 * from FROM WAREHOUSE & will be increase in TO WAREHOUSE.
 */
    private void addStockMovementForUnBuildSubProduct(JSONObject jobj, JSONArray jArr, HashMap<String, Object> map) throws AccountingException {
        try {
            Company company = null;
            String companyid = null, refNo = null;
            ProductBuild productBuild = null;
            Store newWarehouseObj = null;
            Location newLocationObj = null;
            Date newUserDate = new Date();
            boolean isUnbuildAssembly = false;
            if (map != null && (map.containsKey("companyid") && map.get("companyid") != null)) {
                companyid = (String) map.get("companyid");
            }
            if (map != null && (map.containsKey("productBuild") && map.get("productBuild") != null)) {
                productBuild = (ProductBuild) map.get("productBuild");
            }
            if (map != null && (map.containsKey("refNo") && map.get("refNo") != null)) {
                refNo = (String) map.get("refNo");
            }
            if (map != null && (map.containsKey("isUnbuildAssembly") && map.get("isUnbuildAssembly") != null)) {
                isUnbuildAssembly = (Boolean) map.get("isUnbuildAssembly");
            }
            KwlReturnObject custumObjresult = accountingHandlerDAOobj.getObject(Company.class.getName(), companyid);
            company = (Company) custumObjresult.getEntityList().get(0);
            if (company.getCreator() != null) {
                newUserDate = authHandler.getUserNewDate(null, company.getCreator().getTimeZone() != null ? company.getCreator().getTimeZone().getDifference() : company.getTimeZone().getDifference());
            }
            Date asOfDate = productBuild != null ? (productBuild.getInventory() != null ? productBuild.getInventory().getUpdateDate() : newUserDate) : newUserDate;
            if (jobj != null) {
                Product productObj = null;
                StockMovement stockmnt = new StockMovement();
                String product = jobj.getString("product");
                double rate = jobj.has("rate") ? jobj.getDouble("rate") : 0;
                double quantity = 0;
                double totalSMQty = 0;
                if (!StringUtil.isNullOrEmpty(companyid)) {
                    company = (Company) kwlCommonTablesDAOObj.getClassObject(Company.class.getName(), companyid);
                }
                if (!StringUtil.isNullOrEmpty(jobj.getString("quantity")) && !jobj.getString("quantity").equals("undefined")) {
                    quantity = Double.parseDouble(jobj.getString("quantity"));
                }
                String prevLocation = "";
                String preWarehouse = "";
                String prevSerialno = "";
                String prevBatch = "";
                if (!StringUtil.isNullOrEmpty(product)) {
                    productObj = (Product) kwlCommonTablesDAOObj.getClassObject(Product.class.getName(), product);
                }
                stockmnt.setPricePerUnit(rate);
                stockmnt.setModuleRefId(productBuild.getID());
                stockmnt.setModuleRefDetailId(productBuild.getID());
                stockmnt.setProduct(productObj);
                stockmnt.setTransactionNo(refNo);
                stockmnt.setStockUoM(productObj.getUnitOfMeasure());
                stockmnt.setRemark("Used in Unbuild Assembly");
                stockmnt.setTransactionModule(TransactionModule.PRODUCT_UNBUILD_ASSEMBLY);
                stockmnt.setTransactionType(TransactionType.IN);
                stockmnt.setCompany(company);
                stockmnt.setAssembledProduct(productBuild.getProduct());
                stockmnt.setTransactionDate(asOfDate);
                Set<StockMovementDetail> stockMovementDetailSet = new HashSet<StockMovementDetail>();
                for (int j = 0; j < jArr.length(); j++) {
                    StockMovementDetail stockmovementDTL = new StockMovementDetail();
                    JSONObject jSONObject = new JSONObject(jArr.get(j).toString());
                    double qty = 1;
                    String location = "";
                    String warehouse = "";
                    String serialno = "";
                    String batch = "";
                    if (jSONObject.has("quantity") && !jSONObject.getString("quantity").equals("undefined") && !jSONObject.getString("quantity").isEmpty()) {
                        qty = jSONObject.getDouble("quantity");
                    }
                    if (jSONObject.has("location") && !jSONObject.getString("location").equals("undefined") && !jSONObject.getString("location").isEmpty()) {
                        location = jSONObject.getString("location");
                        prevLocation=location;
                    }
                    if (jSONObject.has("warehouse") && !jSONObject.getString("warehouse").equals("undefined") && !jSONObject.getString("warehouse").isEmpty()) {
                        warehouse = jSONObject.getString("warehouse");
                        preWarehouse=warehouse;
                    }
                    if (jSONObject.has("serialno") && !jSONObject.getString("serialno").equals("undefined") && !jSONObject.getString("serialno").isEmpty()) {
                        serialno = jSONObject.getString("serialno");
                        prevSerialno = serialno;
                        qty = 1;
                    }
                    if (jSONObject.has("batch") && !jSONObject.getString("batch").equals("undefined") && !jSONObject.getString("batch").isEmpty()) {
                        batch = jSONObject.getString("batch");
                        prevBatch = batch;
                    }
                    location = location == "" ? prevLocation : location;
                    warehouse = warehouse == "" ? preWarehouse : warehouse;
                    batch = batch == "" ? prevBatch : batch;
                    if (warehouse == null || location == null) {
                        continue;
                    }
                    if (!StringUtil.isNullOrEmpty(location)) {
                        newLocationObj = (Location) kwlCommonTablesDAOObj.getClassObject(Location.class.getName(), location);
                    }
                    if (!StringUtil.isNullOrEmpty(location)) {
                        newWarehouseObj = (Store) kwlCommonTablesDAOObj.getClassObject(Store.class.getName(), warehouse);
                    }
                    if (newWarehouseObj != null && newLocationObj != null) {
                        stockmnt.setStore(newWarehouseObj);
                        stockmovementDTL.setBatchName(batch);
                        stockmovementDTL.setLocation(newLocationObj);
                        if (productObj.isIsrowforproduct()) {
                            KwlReturnObject krObject = accountingHandlerDAOobj.getObject(StoreMaster.class.getName(), jSONObject.optString("row"));
                            StoreMaster row = (StoreMaster) krObject.getEntityList().get(0);
                            stockmovementDTL.setRow(row);
                        }
                        if (productObj.isIsrackforproduct()) {
                            KwlReturnObject krObject = accountingHandlerDAOobj.getObject(StoreMaster.class.getName(), jSONObject.optString("rack"));
                            StoreMaster rack = (StoreMaster) krObject.getEntityList().get(0);
                            stockmovementDTL.setRack(rack);
                        }
                        if (productObj.isIsbinforproduct()) {
                            KwlReturnObject krObject = accountingHandlerDAOobj.getObject(StoreMaster.class.getName(), jSONObject.optString("bin"));
                            StoreMaster bin = (StoreMaster) krObject.getEntityList().get(0);
                            stockmovementDTL.setBin(bin);
                        }
                        stockmovementDTL.setQuantity(qty);
                        stockmovementDTL.setSerialNames(serialno);
                        stockmovementDTL.setStockMovement(stockmnt);
                        stockMovementDetailSet.add(stockmovementDTL);
                        totalSMQty += qty;
                    }
                }
                stockmnt.setQuantity(totalSMQty);
                if (stockmnt.getStore() != null) {
                    stockmnt.setStockMovementDetails(stockMovementDetailSet);
                    stockMovementService.addStockMovement(stockmnt);
                }
            }

        } catch (Exception ex) {
            Logger.getLogger(accProductController.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
            throw new AccountingException("System Failure while Build Product");
        }
    }

public JSONArray getJSONForConsignmentReturn(Iterator itr, String productid, HttpServletRequest request) throws ServiceException, SessionExpiredException, JSONException, Exception {
        JSONArray jArr = new JSONArray();
        KwlReturnObject kwlReturnObject = null;
        
        Producttype producttype = new Producttype(); 
        String companyid = sessionHandlerImpl.getCompanyid(request);
        
     
        
        Boolean nonSaleInventory = Boolean.parseBoolean((String) request.getParameter("loadInventory"));
        boolean isFreeTextSearching = (!StringUtil.isNullOrEmpty(request.getParameter("isFreeTextSearching"))) ? Boolean.parseBoolean(request.getParameter("isFreeTextSearching")) : false;
        
        
        
//        String gcurrencyid = sessionHandlerImpl.getCurrencyID(request);
//        boolean getSOPOflag = request.getParameter("getSOPOflag") != null ? Boolean.parseBoolean(request.getParameter("getSOPOflag")) : false;
        
        
            while (itr.hasNext()) {
                Product product = (Product) itr.next();
                if (product.getID().equals(productid)) {
                    continue;
                }
                JSONObject obj = new JSONObject();
                String productType = "";
                String gcurrencyid = sessionHandlerImpl.getCurrencyID(request);
                productType = (product.getProducttype() != null ? product.getProducttype().getName() : "");
                if (nonSaleInventory && productType.equals(producttype.Inventory_Non_Sales)) {
                    continue;
                }
                // For free text searching mode, deactivated products will not be included in search
                if(isFreeTextSearching && !product.isIsActive()){
                    continue;
                }
                obj.put("productid", product.getID());
                if (accAccountDAOobj.isTaxActivated(companyid, product.getPurchasetaxid())) {
                    obj.put("purchasetaxId", product.getPurchasetaxid());
                }
                if (accAccountDAOobj.isTaxActivated(companyid, product.getSalestaxid())) {
                    obj.put("salestaxId", product.getSalestaxid());
                }
                obj.put("productname", product.getName());
                obj.put("barcodetype", product.getBarcodefield());  //ERM-304
                obj.put("barcode", product.getBarcode());  
                obj.put("isActive", product.isIsActive());
                obj.put("hasAccess", product.isIsActive());
//                obj.put("desc", product.getDescription());
//                obj.put("supplierpartnumber", StringUtil.isNullOrEmpty(product.getSupplier()) ? "" : product.getSupplier());
                obj.put("isAsset", product.isAsset());
//                obj.put("minorderingquantity", product.getMinOrderingQuantity());
//                obj.put("maxorderingquantity", product.getMaxOrderingQuantity());
//                if (product.isAsset()) {
//                    obj.put("depreciationRate", product.getDepreciationRate());
//                    obj.put("depreciationMethod", product.getDepreciationMethod());
//                    obj.put("depreciationCostLimit", product.getDepreciationCostLimit());
//                    obj.put("depreciationGL", (product.getDepreciationGLAccount() != null) ? product.getDepreciationGLAccount().getID() : "");
//                    obj.put("provisionGL", (product.getDepreciationProvisionGLAccount() != null) ? product.getDepreciationProvisionGLAccount().getID() : "");
//                    obj.put("assetSaleGL", (product.getSellAssetGLAccount() != null) ? product.getSellAssetGLAccount().getID() : "");
//                    obj.put("depreciationGLAccount", (product.getDepreciationGLAccount() != null) ? product.getDepreciationGLAccount().getID() : "");
//                    obj.put("depreciationProvisionGLAccount", (product.getDepreciationProvisionGLAccount() != null) ? product.getDepreciationProvisionGLAccount().getID() : "");
//                }
                UnitOfMeasure uom = product.getUnitOfMeasure();
                obj.put("uomid", uom == null ? "" : uom.getID());
                obj.put("uomname", uom == null ? "" : uom.getNameEmptyforNA());
//                obj.put("multiuom", product.isMultiuom());
//                obj.put("blockLooseSell", product.isblockLooseSell());
//                obj.put("uomschematypeid", product.getUomSchemaType() != null ? product.getUomSchemaType().getID() : "");
                UnitOfMeasure purchaseuom = product.getPurchaseUOM();
                UnitOfMeasure salesuom = product.getSalesUOM();
                obj.put("purchaseuom", purchaseuom == null ? "" : purchaseuom.getID());
                obj.put("purchaseuomname", purchaseuom == null ? "" : purchaseuom.getNameEmptyforNA());
                obj.put("salesuom", salesuom == null ? "" : salesuom.getID());
                obj.put("salesuomname", salesuom == null ? "" : salesuom.getNameEmptyforNA());
                obj.put("stockuom", (product.getPackaging()==null || product.getPackaging().getStockUoM()==null) ? (uom == null ? "" : uom.getID()):product.getPackaging().getStockUoM().getID());
                obj.put("caseuom", (product.getPackaging()==null || product.getPackaging().getCasingUoM()==null) ? "":product.getPackaging().getCasingUoM().getID());
                obj.put("inneruom", (product.getPackaging()==null || product.getPackaging().getInnerUoM()==null) ? "":product.getPackaging().getInnerUoM().getID());
                obj.put("caseuomvalue",(product.getPackaging()==null || product.getPackaging().getCasingUoM()==null) ? 1:product.getPackaging().getStockUomQtyFactor(product.getPackaging().getCasingUoM()));
                obj.put("inneruomvalue", (product.getPackaging()==null || product.getPackaging().getInnerUoM()==null) ? 1:product.getPackaging().getStockUomQtyFactor(product.getPackaging().getInnerUoM()));
                obj.put("stockpurchaseuomvalue", purchaseuom == null || product.getPackaging()==null ? 1:product.getPackaging().getStockUomQtyFactor(purchaseuom));
                obj.put("stocksalesuomvalue",salesuom == null || product.getPackaging()==null ? 1 : product.getPackaging().getStockUomQtyFactor(salesuom));
                obj.put("isLocationForProduct", product.isIslocationforproduct());
                obj.put("isWarehouseForProduct", product.isIswarehouseforproduct());
                obj.put("isRowForProduct", product.isIsrowforproduct());
                obj.put("isRackForProduct", product.isIsrackforproduct());
                obj.put("isBinForProduct", product.isIsbinforproduct());
                obj.put("isBatchForProduct", product.isIsBatchForProduct());
                obj.put("isSerialForProduct", product.isIsSerialForProduct());
                obj.put("isSKUForProduct", product.isIsSKUForProduct());
                obj.put("productweightperstockuom",  product.getProductWeightPerStockUom());
                obj.put("productweightincludingpakagingperstockuom", product.getProductWeightIncludingPakagingPerStockUom());
                obj.put("productvolumeperstockuom",product.getProductVolumePerStockUom());
                obj.put("productvolumeincludingpakagingperstockuom",product.getProductVolumeIncludingPakagingPerStockUom());
//                obj.put("isRecyclable", product.isRecyclable());
//                obj.put("recycleQuantity", product.getRecycleQuantity());
//                obj.put("activateProductComposition", product.isActivateProductComposition());
//                obj.put("purchaseacctaxcode", ((product.getPurchaseAccount() != null && (!StringUtil.isNullOrEmpty(product.getPurchaseAccount().getTaxid()))) ? product.getPurchaseAccount().getTaxid() : ""));
//                obj.put("salesacctaxcode", ((product.getSalesAccount() != null && (!StringUtil.isNullOrEmpty(product.getSalesAccount().getTaxid()))) ? product.getSalesAccount().getTaxid() : ""));
//                obj.put("warrantyperiod", product.getWarrantyperiod());
//                obj.put("warrantyperiodsal", product.getWarrantyperiodsal());
                obj.put("location", (product.getLocation() != null ? product.getLocation().getId() : ""));
                obj.put("warehouse", (product.getWarehouse() != null ? product.getWarehouse().getId() : ""));
                // }
//                if(!onlyProduct && !storageHandlerImpl.GetLowercaseCompanyId().contains(companyid) ||product.getParent() !=null){ 
//
//                    obj.put("purchaseretaccountid", (product.getPurchaseReturnAccount() != null ? product.getPurchaseReturnAccount().getID() : ""));
//                    obj.put("salesretaccountid", (product.getSalesReturnAccount() != null ? product.getSalesReturnAccount().getID() : ""));
//                    KwlReturnObject purchase = accProductObj.getProductPrice(product.getID(), true, null, "","");
//                    obj.put("purchaseprice", purchase.getEntityList().get(0));
//                    KwlReturnObject sales = accProductObj.getProductPrice(product.getID(), false, null, "","");
//                    obj.put("saleprice", sales.getEntityList().get(0));
//                } else {
//                    if (onlyProduct) {
//                        KwlReturnObject purchase = accProductObj.getProductPrice(product.getID(), true, null, "", "");
//                        obj.put("purchaseprice", purchase.getEntityList().get(0));
//                    }
//                }

//                obj.put("dependentType", (product.getDependenttype() != null ? (product.getDependenttype().getType()==1)?product.getDependenttype().getID() : "":""));
//                obj.put("dependentTypeNo", (product.getDependenttype() != null ? (product.getDependenttype().getType()==0)?product.getDependenttype().getID() : "":""));
//                obj.put("dependentTypeQty", (product.getDependenttype() != null ? (product.getDependenttype().getType()==2)?product.getDependenttype().getID() : "":""));
//                obj.put("parentDependentType", (product.getDependenttype() != null ? product.getDependenttype().getID():""));
//                obj.put("timeintervalChk", product.isIntervalfield());
//                obj.put("addshiplentheithqty", product.isAddshiplentheithqty());
//                obj.put("hourtimeinterval", product.getTimeinterval());
//                obj.put("noofquqntity", product.getNoofquqntity());
//                if (product.getChildren().size() > 0) {
//                    obj.put("isparentproduct", true);
//                } else {
//                    obj.put("isparentproduct", false);
//                }
//                obj.put("parentid", ((product.getParent() != null) ? product.getParent().getID() : ""));
//                obj.put("parentname", ((product.getParent() != null) ? product.getParent().getName() : ""));
//                obj.put("noofqtyvalue", product.getNoofqtyvalue());

//                obj.put("intervalField", product.isIntervalfield());
                String type = "";

                        
            /*if(getSOPOflag){
                    HashMap<String, Object> requestParams=new HashMap<String, Object>();            
                    requestParams.put("companyid", companyid);
                    requestParams.put("gcurrencyid", gcurrencyid);
                    requestParams.put("df", authHandler.getDateFormatter(request));
                    requestParams.put("pendingapproval", false);
                    requestParams.put("startdate" ,request.getParameter("startdate"));
                    requestParams.put("enddate" ,request.getParameter("enddate"));
                    KwlReturnObject poresult = accPurchaseOrderobj.getPurchaseOrdersMerged(requestParams);
                    List list1=poresult.getEntityList();
                    String productuomId = (product.getUnitOfMeasure() != null)?product.getUnitOfMeasure().getID():"";
                    double productCount = getOutstandingPoSoProductsCount(list1, true, product.getID(), accountingHandlerDAOobj, accGoodsReceiptDAOobj, accInvoiceDAOobj, productuomId);


                    obj.put("pocount", productCount);
                    obj.put("pocountinselecteduom", productCount);

                    KwlReturnObject soresult = accSalesOrderDAOobj.getSalesOrdersMerged(requestParams);
                    list1=soresult.getEntityList();
                    productCount = getOutstandingPoSoProductsCount(list1, false, product.getID(), accountingHandlerDAOobj, accGoodsReceiptDAOobj, accInvoiceDAOobj, productuomId);

                    obj.put("socount", productCount);
                    obj.put("socountinselecteduom", productCount);
                }*/

//            if(product.getProducttype() != null){
//                    if (storageHandlerImpl.GetVRnetCompanyId().contains(companyid)) {
//                        if (StringUtil.equal(product.getProducttype().getName(), "Inventory Assembly")) {
//                            type = "Inventory Bundle";
//                        } else {
//                            type = product.getProducttype().getName();
//                        }
//                    } else {
//                        type = product.getProducttype().getName();
//                    }
//                }

//            if(preferences.isInventoryAccountingIntegration()){
//                JSONArray customJSONArray=getCustomColumnData(product.getID(),companyid);
//                if(customJSONArray.length()>0){
//                    for(int count=0;count<customJSONArray.length();count++){
//
//                        JSONObject customJSONObject=customJSONArray.getJSONObject(count);                        
//                        String customFieldName=StringUtil.isNullOrEmpty(customJSONObject.optString("fieldname",""))?"":customJSONObject.optString("fieldname","");
//                        if(!customJSONObject.isNull("fieldname") && (customFieldName.equalsIgnoreCase(Constants.CUSTOM_STOP_PURCHASE)||customFieldName.equalsIgnoreCase(Constants.CUSTOM_OBSOLETE)) && (customJSONObject.getInt("fieldtype")==Constants.CUSTOM_CHECKBOX)){
//                            if(!customJSONObject.isNull("fieldData") && !StringUtil.isNullOrEmpty(customJSONObject.optString("fieldData","")) && customJSONObject.getString("fieldData").equalsIgnoreCase("true")){
//                                    obj.put("isStopPurchase", true);
//                                    break;
//                                }
//                            }
//                        }
//                    }
//                }
//                if (product.isAsset()) {     //For Fixed Asset Group, type will be "Asset"
//                    obj.put("type", "Asset");
//                } else {
//                    obj.put("type", type);
//                }
                obj.put("pid", product.getProductid());
                obj.put("producttype", (product.getProducttype()!=null?product.getProducttype().getID():""));         
//            if (preferences.isShowprodserial()) {
//                ProductBatch batch = getBatchDetailsForProduct(product.getID());
//                if (batch != null) {
//                    obj.put("location", batch.getLocation().getId());
//                    obj.put("warehouse", batch.getWarehouse().getId());
//                } else {
//                    obj.put("location", "");
//                    obj.put("warehouse", "");
//                }
//            }

                if (product.isblockLooseSell()) {
                    KwlReturnObject result = accProductObj.getAvailableQuantityInSelectedUOM(product.getID(), product.getUnitOfMeasure().getID());
                    obj.put("quantity", (result.getEntityList().get(0) == null ? 0 : result.getEntityList().get(0)));
                } else {
                    KwlReturnObject result = accProductObj.getQuantity(product.getID());;
                    obj.put("quantity", (result.getEntityList().get(0) == null ? 0 : result.getEntityList().get(0)));
                }

//                KwlReturnObject result2 = accProductObj.getAssemblyLockQuantity(product.getID()); //get the lock quantity locked in assembly type of product in SO
//                Double assmblyLockQuantity=(Double)(result2.getEntityList().get(0) == null ? 0.0 : result2.getEntityList().get(0));
//
//                KwlReturnObject result1 = accProductObj.getLockQuantity(product.getID());//get the lock quantity locked in inventory type of product in  all SO
//                Double  SoLockQuantity=(Double)(result1.getEntityList().get(0) == null ? 0.0 : result1.getEntityList().get(0));
//
//                obj.put("lockquantity",assmblyLockQuantity+SoLockQuantity);  //total lock quantity of product locked in SO

//                KwlReturnObject result4 = accProductObj.getVendorConsignedQuantity(product.getID());
//                obj.put("venconsignuomquantity", (result4.getEntityList().get(0) == null ? 0 : result4.getEntityList().get(0)));
//
                KwlReturnObject result5 = accProductObj.getConsignedQuantity(product.getID());
                obj.put("consignquantity", (result5.getEntityList().get(0) == null ? 0 : result5.getEntityList().get(0)));
                jArr.put(obj);
            }
        
        return jArr;
    }

    public JSONArray getJSONForDeliveryOrder(Iterator itr, String productid, HttpServletRequest request) throws ServiceException, SessionExpiredException, JSONException, Exception {
        JSONArray jArr = new JSONArray();
        Producttype producttype = new Producttype(); 
        String companyid = sessionHandlerImpl.getCompanyid(request);
        KwlReturnObject kwlReturnObject = accountingHandlerDAOobj.getObject(ExtraCompanyPreferences.class.getName(), companyid);
        ExtraCompanyPreferences extraPreferences = (ExtraCompanyPreferences) kwlReturnObject.getEntityList().get(0);
        Boolean nonSaleInventory = Boolean.parseBoolean((String) request.getParameter("loadInventory"));       
        boolean isFreeTextSearching = (!StringUtil.isNullOrEmpty(request.getParameter("isFreeTextSearching"))) ? Boolean.parseBoolean(request.getParameter("isFreeTextSearching")) : false;
        boolean carryin = request.getParameter("carryin")!=null ? Boolean.parseBoolean(request.getParameter("carryin")) : false;
        boolean isIndividualProductPrice = (!StringUtil.isNullOrEmpty(request.getParameter("isIndividualProductPrice"))) ? Boolean.parseBoolean(request.getParameter("isIndividualProductPrice")) : false;
        while (itr.hasNext()) {
            Product product = (Product) itr.next();
            if (product.getID().equals(productid)) {
                continue;
            }
            JSONObject obj = new JSONObject();
            String productType = "";
            productType = (product.getProducttype() != null ? product.getProducttype().getName() : "");
            if (nonSaleInventory && productType.equals(producttype.Inventory_Non_Sales)) {
                continue;
            }
            // For free text searching mode, deactivated products will not be included in search
            if(isFreeTextSearching && !product.isIsActive()){
                    continue;
            }
            obj.put("productid", product.getID());
            if (accAccountDAOobj.isTaxActivated(companyid, product.getPurchasetaxid())) {
                obj.put("purchasetaxId", product.getPurchasetaxid());
            }
            if (accAccountDAOobj.isTaxActivated(companyid, product.getSalestaxid())) {
                obj.put("salestaxId", product.getSalestaxid());
            }
            obj.put("productname", product.getName());
            obj.put("barcodetype", product.getBarcodefield());  //ERM-304
            obj.put("barcode", product.getBarcode());  
            obj.put("isActive", product.isIsActive());
            obj.put("hasAccess", product.isIsActive());
            obj.put("isAutoAssembly", product.isAutoAssembly());
            obj.put("desc", product.getDescription());
            obj.put("supplierpartnumber", StringUtil.isNullOrEmpty(product.getSupplier()) ? "" : product.getSupplier());
            UnitOfMeasure uom = product.getUnitOfMeasure();
            obj.put("uomid", uom == null ? "" : uom.getID());
            obj.put("desc", uom == null ? "" : product.getDescription());    //    ERP-12534 [SJ]
            obj.put("uomname", uom == null ? "" : uom.getNameEmptyforNA());
            obj.put("multiuom", product.isMultiuom());
            double quantity = 1;
            double baseuomrate = 1;
            JSONObject jObj = null;
            if (!StringUtil.isNullOrEmpty(extraPreferences.getColumnPref())) {
                jObj = new JSONObject((String) extraPreferences.getColumnPref());
                if (jObj.has(Constants.isDisplayUOM) && jObj.get(Constants.isDisplayUOM) != null && (Boolean) jObj.get(Constants.isDisplayUOM) != false) {
                    obj = accProductObj.getProductDisplayUOM(product, quantity, baseuomrate, carryin, obj);
                }
            }
            obj.put("blockLooseSell", product.isblockLooseSell());
            UnitOfMeasure purchaseuom = product.getPurchaseUOM();
            UnitOfMeasure salesuom = product.getSalesUOM();
            obj.put("purchaseuom", purchaseuom == null ? "" : purchaseuom.getID());
            //obj.put("purchaseuomname", purchaseuom == null ? "" : purchaseuom.getName());
            obj.put("salesuom", salesuom == null ? "" : salesuom.getID());
            //obj.put("salesuomname", salesuom == null ? "" : salesuom.getName());
            obj.put("uomschematypeid", product.getUomSchemaType() != null ? product.getUomSchemaType().getID() : "");
            obj.put("stockuom", (product.getPackaging()==null || product.getPackaging().getStockUoM()==null) ? (uom == null ? "" : uom.getID()):product.getPackaging().getStockUoM().getID());
            obj.put("caseuom", (product.getPackaging()==null || product.getPackaging().getCasingUoM()==null) ? "":product.getPackaging().getCasingUoM().getID());
            obj.put("inneruom", (product.getPackaging()==null || product.getPackaging().getInnerUoM()==null) ? "":product.getPackaging().getInnerUoM().getID());
            obj.put("caseuomvalue",(product.getPackaging()==null || product.getPackaging().getCasingUoM()==null) ? 1:product.getPackaging().getStockUomQtyFactor(product.getPackaging().getCasingUoM()));
            obj.put("inneruomvalue", (product.getPackaging()==null || product.getPackaging().getInnerUoM()==null) ? 1:product.getPackaging().getStockUomQtyFactor(product.getPackaging().getInnerUoM()));
            obj.put("stockpurchaseuomvalue", purchaseuom == null || product.getPackaging()==null ? 1:product.getPackaging().getStockUomQtyFactor(purchaseuom));
            obj.put("stocksalesuomvalue",salesuom == null || product.getPackaging()==null ? 1 : product.getPackaging().getStockUomQtyFactor(salesuom));
            obj.put("isLocationForProduct", product.isIslocationforproduct());
            obj.put("isWarehouseForProduct", product.isIswarehouseforproduct());
            obj.put("isRowForProduct", product.isIsrowforproduct());
            obj.put("isRackForProduct", product.isIsrackforproduct());
            obj.put("isBinForProduct", product.isIsbinforproduct());
            obj.put("isBatchForProduct", product.isIsBatchForProduct());
            obj.put("isSerialForProduct", product.isIsSerialForProduct());
            obj.put("isSKUForProduct", product.isIsSKUForProduct());
            obj.put("warrantyperiod", product.getWarrantyperiod());
            obj.put("warrantyperiodsal", product.getWarrantyperiodsal());
            obj.put("location", (product.getLocation() != null ? product.getLocation().getId() : ""));
            obj.put("warehouse", (product.getWarehouse() != null ? product.getWarehouse().getId() : ""));
            obj.put("isWastageApplicable", product.isWastageApplicable());
            obj.put("productweightperstockuom", product.getProductWeightPerStockUom());
            obj.put("productweightincludingpakagingperstockuom", product.getProductWeightIncludingPakagingPerStockUom());
            obj.put("productvolumeperstockuom",product.getProductVolumePerStockUom());
            obj.put("productvolumeincludingpakagingperstockuom",product.getProductVolumeIncludingPakagingPerStockUom());
            obj.put("isQAEnable",product.isQaenable());
//            if (extraPreferences.getLineLevelTermFlag()==1) {  // Fetch Vat term details of Product
//                String salesOrPurchase=request.getParameter("termSalesOrPurchaseCheck")!=null?request.getParameter("termSalesOrPurchaseCheck").toString():"false";
//                boolean isDefault = request.getParameter("isDefault")!= null ? Boolean.parseBoolean(request.getParameter("isDefault")):false;
//                Map<String,Object> mapData=new HashMap<String,Object>();
//                mapData.put("productid", product.getID());
//                mapData.put("salesOrPurchase", salesOrPurchase);
//                if(isDefault){
//                    mapData.put("isDefault", isDefault);
//                }
//                KwlReturnObject result6 = accProductObj.getProductTermDetails(mapData);
//                if (result6.getEntityList() != null && result6.getEntityList().size() > 0 && result6.getEntityList().get(0) != null) {
//                    ArrayList<ProductTermsMap> productTermDetail = (ArrayList<ProductTermsMap>) result6.getEntityList();
//                    JSONArray productTermJsonArry = fetchProductTermMapDetails(productTermDetail);
//                    obj.put("LineTermdetails", productTermJsonArry.toString());
//                }
//            }
            String type = "";
            if(product.getProducttype() != null){
                if (storageHandlerImpl.GetVRnetCompanyId().contains(companyid)) {
                    if (StringUtil.equal(product.getProducttype().getName(), "Inventory Assembly")) {
                        type = "Inventory Bundle";
                    } else {
                        type = product.getProducttype().getName();
                    }
                } else {
                    type = product.getProducttype().getName();
                }
            }
            if (product.isAsset()) {     //For Fixed Asset Group, type will be "Asset"
                obj.put("type", "Asset");
            } else {
                obj.put("type", type);
            }
            obj.put("pid", product.getProductid());
            obj.put("producttype", (product.getProducttype()!=null?product.getProducttype().getID():""));         
            if (product.isblockLooseSell()) {
                KwlReturnObject result = accProductObj.getAvailableQuantityInSelectedUOM(product.getID(), product.getUnitOfMeasure().getID());
                obj.put("quantity", (result.getEntityList().get(0) == null ? 0 : result.getEntityList().get(0)));
            } else {
                KwlReturnObject result = accProductObj.getQuantity(product.getID());;
                obj.put("quantity", (result.getEntityList().get(0) == null ? 0 : result.getEntityList().get(0)));
            }
            
            if(isIndividualProductPrice){
                JSONObject paramJobj = StringUtil.convertRequestToJsonObject(request);
                paramJobj.put(Constants.productid, product.getID());
                paramJobj.put("quantity", quantity);
                JSONObject jobj = AccProductService.getIndividualProductPrice(paramJobj);
                if(jobj.has("data") && !StringUtil.isNullOrEmpty(jobj.getString("data"))){
                    obj.put("individualproductprice", new JSONArray(jobj.getString("data")));
                }
                if(jobj.has("discountData") && !StringUtil.isNullOrEmpty(jobj.getString("discountData"))){
                    obj.put("discountData", new JSONArray(jobj.getString("discountData")));
                }
            }
            
            jArr.put(obj);
        }
        
        return jArr;
    }

    public ModelAndView importFixedAssetGroups(HttpServletRequest request, HttpServletResponse response) throws ServiceException {
        JSONObject jobj = new JSONObject();
        String msg = "";
        boolean issuccess = false;
        try {
            String companyid = sessionHandlerImpl.getCompanyid(request);
            String eParams = request.getParameter("extraParams");
            boolean typeXLSFile = (request.getParameter("typeXLSFile") != null) ? Boolean.parseBoolean(request.getParameter("typeXLSFile")) : false;
            JSONObject extraParams = StringUtil.isNullOrEmpty(eParams) ? new JSONObject() : new JSONObject(eParams);
            extraParams.put("Company", companyid);
            String currencyId = sessionHandlerImpl.getCurrencyID(request);
            boolean updateExistingRecordFlag = false;
            if (!StringUtil.isNullOrEmpty(request.getParameter("updateExistingRecordFlag"))) {
                updateExistingRecordFlag = Boolean.FALSE.parseBoolean(request.getParameter("updateExistingRecordFlag"));
            }

            String doAction = request.getParameter("do");
            HashMap<String, Object> requestParams = importHandler.getImportRequestParams(request);
            requestParams.put("extraParams", extraParams);
            requestParams.put("currencyId", currencyId);
            requestParams.put("extraObj", null);
            requestParams.put("servletContext", this.getServletContext());
            requestParams.put("importMethod", typeXLSFile ? "xls" : "csv");
            requestParams.put("companyid", companyid);
            requestParams.put("moduleName", Constants.Acc_Product_modulename);
            requestParams.put("moduleid", Constants.Acc_FixedAssets_AssetsGroups_ModuleId);
            requestParams.put("locale", RequestContextUtils.getLocale(request));
            if (updateExistingRecordFlag) {
                requestParams.put("allowDuplcateRecord", updateExistingRecordFlag);
            }

            if (doAction.compareToIgnoreCase("import") == 0) {
                requestParams.put("updateExistingRecordFlag", updateExistingRecordFlag);
                System.out.println("A(( Import start : " + new Date());
                JSONObject datajobj = new JSONObject();
                JSONObject resjson = new JSONObject(request.getParameter("resjson").toString().replaceAll("\\n", "").trim());
                JSONArray resjsonJArray = resjson.getJSONArray("root");

                String filename = request.getParameter("filename");
                datajobj.put("filename", filename);

                String destinationDirectory = storageHandlerImpl.GetDocStorePath() + "importplans";
                File filepath = new File(destinationDirectory + "/" + filename);
                datajobj.put("FilePath", filepath);

                datajobj.put("resjson", resjsonJArray);
                jobj = importFixedAssetGroups(request, datajobj);

                System.out.println("A(( Import end : " + new Date());
            } else if (doAction.compareToIgnoreCase("validateData") == 0) {
                System.out.println("A(( Validation start : " + new Date());
                jobj = importHandler.validateFileData(requestParams);
                System.out.println("A(( Validation end : " + new Date());
            }
            issuccess = true;
        } catch (Exception ex) {
            issuccess = false;
            msg = "" + ex.getMessage();
            try {
                jobj.put("success", issuccess);
                jobj.put("msg", msg);
            } catch (JSONException e) {
                Logger.getLogger(accProductController.class.getName()).log(Level.SEVERE, e.getMessage(), e);
            }
            Logger.getLogger(accProductController.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
        }
        return new ModelAndView("jsonView", "model", jobj.toString());
    }

    public JSONObject importFixedAssetGroups(HttpServletRequest request, JSONObject jobj) throws AccountingException, IOException, SessionExpiredException, JSONException {
        DefaultTransactionDefinition def = new DefaultTransactionDefinition();
        def.setName("import_Tx");
        def.setPropagationBehavior(TransactionDefinition.PROPAGATION_REQUIRED);
        TransactionStatus status = txnManager.getTransaction(def);
        boolean commitedEx = false;
        boolean issuccess = true;
        String msg = "";
        String customfield = "";
        FileInputStream fileInputStream = null;
        BufferedReader br = null;
        CsvReader csvReader = null;
        int total = 0, failed = 0;
        String companyid = sessionHandlerImpl.getCompanyid(request);
        String currencyId = sessionHandlerImpl.getCurrencyID(request);
        String userId = sessionHandlerImpl.getUserid(request);
        String fileName = jobj.getString("filename");
        String masterPreference = request.getParameter("masterPreference");
        String delimiterType = request.getParameter("delimiterType");
        String modName = request.getParameter("modName");
        String failureMessage = "";
        boolean updateExistingRecordFlag = false;
        if (!StringUtil.isNullOrEmpty(request.getParameter("updateExistingRecordFlag"))) {
            updateExistingRecordFlag = Boolean.FALSE.parseBoolean(request.getParameter("updateExistingRecordFlag"));
        }
        int limit = Constants.Transaction_Commit_Limit;
        int count = 1;
        JSONObject returnObj = new JSONObject();
        try {
            String dateFormat = null, dateFormatId = request.getParameter("dateFormat");
            if (!StringUtil.isNullOrEmpty(dateFormatId)) {
                KwlReturnObject kdfObj = accountingHandlerDAOobj.getObject(KWLDateFormat.class.getName(), dateFormatId);
                KWLDateFormat kdf = (KWLDateFormat) kdfObj.getEntityList().get(0);
                dateFormat = kdf != null ? kdf.getJavaForm() : null;
            }
            DateFormat df = new SimpleDateFormat(dateFormat);
            String[] headArray = null;
            fileInputStream = new FileInputStream(jobj.getString("FilePath"));
            csvReader = new CsvReader(new InputStreamReader(fileInputStream), delimiterType);
            String record = "";
            int cnt = 0;

            StringBuilder failedRecords = new StringBuilder();

            HashMap<String, Integer> columnConfig = new HashMap<String, Integer>();
            JSONArray jSONArray = jobj.getJSONArray("resjson");
            List headArrayList = new ArrayList();
            for (int i = 0; i < jSONArray.length(); i++) {
                JSONObject jSONObject = jSONArray.getJSONObject(i);
                headArrayList.add(jSONObject.get("csvheader"));

                columnConfig.put(jSONObject.getString("dataindex"), jSONObject.getInt("csvindex"));
            }

            while (csvReader.readRecord()) {
                headArray = csvReader.getValues();
                if (cnt == 0) {
                    failedRecords.append(createCSVrecord(headArray) + "\"Error Message\"");
                }
                if (cnt != 0) {
                    record = csvReader.getRawRecord();
                    record = record.replaceAll("\n", " ");
                    String[] recarr = null;
                    failureMessage="";
                    if (delimiterType.equalsIgnoreCase("Bar")) {
                        recarr = record.split("\\|", -1);           //apply pattern as often as possible refer ticket - ERP-14275
                    } else {
                        recarr = record.split(",", -1);             //apply pattern as often as possible refer ticket - ERP-14275
                    }
                    try {
                        String productName = "";
                        if (columnConfig.containsKey("productname")) {
                            productName = recarr[(Integer) columnConfig.get("productname")].replaceAll("\"", "").trim();
                            if (StringUtil.isNullOrEmpty(productName)) {
                                failureMessage+="Asset Group Name is not available";
                            }
                        } else {
                            failureMessage+="Asset Group Name column is not found.";
                        }

                        String productID = "";
                        if (columnConfig.containsKey("productid")) {
                            productID = recarr[(Integer) columnConfig.get("productid")].replaceAll("\"", "").trim();
                            if (StringUtil.isNullOrEmpty(productID)) {
                                failureMessage+="Product ID is not available.";
                            }
                        } else {
                            failureMessage+="Asset Group ID column is not found";
                        }

                        String productDescription = "";
                        if (columnConfig.containsKey("desc")) {
                            productDescription = recarr[(Integer) columnConfig.get("desc")].replaceAll("\"", "").trim();
                        }

                        String productWarrantyPeriod = "";
                        if (columnConfig.containsKey("warrantyperiod")) {
                            productWarrantyPeriod = recarr[(Integer) columnConfig.get("warrantyperiod")].replaceAll("\"", "").trim();
                            if (StringUtil.isNullOrEmpty(productWarrantyPeriod)) {
                                if (masterPreference.equalsIgnoreCase("1")) {
                                    productWarrantyPeriod = "0";
                                }
                            }
                        } else {
                            productWarrantyPeriod = "0";
                        }

                        String productSalesWarrantyPeriod = "";
                        if (columnConfig.containsKey("warrantyperiodsal")) {
                            productSalesWarrantyPeriod = recarr[(Integer) columnConfig.get("warrantyperiodsal")].replaceAll("\"", "").trim();
                            if (StringUtil.isNullOrEmpty(productSalesWarrantyPeriod)) {
                                if (masterPreference.equalsIgnoreCase("1")) {
                                    productSalesWarrantyPeriod = "0";
                                }
                            }
                        } else {
                            productSalesWarrantyPeriod = "0";
                        }

                        String productPreferedVendorID = "";
                        if (columnConfig.containsKey("vendornameid")) {
                            String productPreferedVendorName = recarr[(Integer) columnConfig.get("vendornameid")].replaceAll("\"", "").trim();
                            if (!StringUtil.isNullOrEmpty(productPreferedVendorName)) {
                                Vendor vendor = accProductModuleService.getVendorByName(productPreferedVendorName, companyid);
                                if (vendor != null) {
                                    productPreferedVendorID = vendor.getID();
                                } else {
                                    if (masterPreference.equalsIgnoreCase("1")) {
                                        productPreferedVendorID = null;
                                    } else {
                                        failureMessage+="Prefered Vendor is not found for " + productPreferedVendorName;
                                    }
                                }
                            } else {
                                if (masterPreference.equalsIgnoreCase("1")) {
                                    productPreferedVendorID = null;
                                }
                            }
                        } else {
                            productPreferedVendorID = null;
                        }

                        String assetControllingAccountId = "";
                        if (columnConfig.containsKey("assetControllingAccountId")) {
                            String productPurchaseAccountName = recarr[(Integer) columnConfig.get("assetControllingAccountId")].replaceAll("\"", "").trim();
                            if (!StringUtil.isNullOrEmpty(productPurchaseAccountName)) {
                                Account purchaseAccount = accProductModuleService.getAccountByName(productPurchaseAccountName, companyid);
                                if (purchaseAccount != null) {
                                    assetControllingAccountId = purchaseAccount.getID();
                                    String usedin = purchaseAccount.getUsedIn();
                                    purchaseAccount.setUsedIn(StringUtil.getUsedInValue(usedin, Constants.Product_Purchase_Account));
                                } else {
                                    failureMessage+="Fixed Asset Control Account is not found for " + productPurchaseAccountName;
                                }
                                if(purchaseAccount.getAccounttype()!=1){
                                    failureMessage+="Invalid Account type given for Controlling Account,Account type should be Controlling Account.";
                                }
                                
                                if(!purchaseAccount.isActivate()){
                                   failureMessage+="Account '" + purchaseAccount.getAccountName() + "' are already deactivated. Record cannot be imported. "; 
                                }
                                
                            } else {
                                failureMessage+="Fixed Asset Control Account is not available";
                            }
                        } else {
                            failureMessage+="Fixed Asset Control Account column is not found.";
                        }

                        String depreciationGLAccountID = "";
                        if (columnConfig.containsKey("depreciationGLAccountID")) {
                            String depreciationGLAccountName = recarr[(Integer) columnConfig.get("depreciationGLAccountID")].replaceAll("\"", "").trim();
                            if (!StringUtil.isNullOrEmpty(depreciationGLAccountName)) {
                                Account purchaseAccount = accProductModuleService.getAccountByName(depreciationGLAccountName, companyid);
                                if (purchaseAccount != null) {
                                    depreciationGLAccountID = purchaseAccount.getID();
                                    String usedin = purchaseAccount.getUsedIn();
                                    purchaseAccount.setUsedIn(StringUtil.getUsedInValue(usedin, Constants.Fixed_Asset_Depreciation_GL_Account));
                                } else {
                                    failureMessage+="Fixed Asset GL Account is not found for " + depreciationGLAccountName;
                                }
                                
                                if(purchaseAccount.getAccounttype()!=0){
                                    failureMessage+="Invalid Account type given for Depreciation GL(Profit & Loss),Account type should be Profit & Loss.";
                                }
                                
                                if(!purchaseAccount.isActivate()){
                                   failureMessage+="Account '" + purchaseAccount.getAccountName() + "' are already deactivated. Record cannot be imported. "; 
                                }
                                
                            } else {
                                failureMessage+="Fixed Asset GL Account is not available";
                            }
                        } else {
                            failureMessage+="Fixed Asset GL Account column is not found.";
                        }

                        String depreciationProvisionGLAccountID = "";
                        if (columnConfig.containsKey("depreciationProvisionGLAccountID")) {
                            String depreciationProvisionGLAccountName = recarr[(Integer) columnConfig.get("depreciationProvisionGLAccountID")].replaceAll("\"", "").trim();
                            if (!StringUtil.isNullOrEmpty(depreciationProvisionGLAccountName)) {
                                Account purchaseAccount = accProductModuleService.getAccountByName(depreciationProvisionGLAccountName, companyid);
                                if (purchaseAccount != null) {
                                    depreciationProvisionGLAccountID = purchaseAccount.getID();
                                    String usedin = purchaseAccount.getUsedIn();
                                    purchaseAccount.setUsedIn(StringUtil.getUsedInValue(usedin, Constants.Depreciation_Provision_GL_Account));
                                } else {
                                    failureMessage+="Provision For Depreciation (Balance Sheet) Account is not found for " + depreciationProvisionGLAccountName;
                                }
                                if(purchaseAccount.getAccounttype()!=1){
                                    failureMessage+="Invalid Account type given for Provision For Depreciation (Balance Sheet),Account type should be Provision For Depreciation (Balance Sheet).";
                                }
                                
                                if(!purchaseAccount.isActivate()){
                                   failureMessage+="Account '" + purchaseAccount.getAccountName() + "' are already deactivated. Record cannot be imported. "; 
                                }
                                
                            } else {
                                failureMessage+="Provision For Depreciation (Balance Sheet) Account is not available";
                            }
                        } else {
                            failureMessage+="Fixed Asset Control Account column is not found.";
                        }

                        String sellAssetGLAccountID = "";
                        if (columnConfig.containsKey("sellAssetGLAccountID")) {
                            String productPurchaseAccountName = recarr[(Integer) columnConfig.get("sellAssetGLAccountID")].replaceAll("\"", "").trim();
                            if (!StringUtil.isNullOrEmpty(productPurchaseAccountName)) {
                                Account purchaseAccount = accProductModuleService.getAccountByName(productPurchaseAccountName, companyid);
                                if (purchaseAccount != null) {
                                    sellAssetGLAccountID = purchaseAccount.getID();
                                    String usedin = purchaseAccount.getUsedIn();
                                    purchaseAccount.setUsedIn(StringUtil.getUsedInValue(usedin, Constants.Asset_Sales_Account));
                                } else {
                                    failureMessage+="Profit/Loss on Sale of Assets Account is not found for " + productPurchaseAccountName;
                                }
                                if(purchaseAccount.getAccounttype()!=0){
                                    failureMessage+="Invalid Account type given for Profit/Loss on Sale of Assets Account,Account type should be Profit/Loss on Sale of Assets Account.";
                                }
                                
                                if(!purchaseAccount.isActivate()){
                                   failureMessage+="Account '" + purchaseAccount.getAccountName() + "' are already deactivated. Record cannot be imported. "; 
                                }
                            } else {
                                failureMessage+="Profit/Loss on Sale of Assets Account is not available.";
                            }
                        } else {
                            failureMessage+="Profit/Loss on Sale of Assets Account column is not found.";
                        }
                        
                        String writeOffAssetAccountId = "";
                        if (columnConfig.containsKey("writeoffassetaccount")) {
                            String writeOffAssetAccountName = recarr[(Integer) columnConfig.get("writeoffassetaccount")].replaceAll("\"", "").trim();
                            if (!StringUtil.isNullOrEmpty(writeOffAssetAccountName)) {
                                Account writeOffAccount = accProductModuleService.getAccountByName(writeOffAssetAccountName, companyid);
                                if (writeOffAccount != null) {
                                    writeOffAssetAccountId = writeOffAccount.getID();
                                    String usedin = writeOffAccount.getUsedIn();
                                    writeOffAccount.setUsedIn(StringUtil.getUsedInValue(usedin, Constants.Asset_Write_Off_Account));
                                } else {
                                    failureMessage+="Write-Off Asset Account is not found for " + writeOffAssetAccountName;
                                }
                                if(writeOffAccount.getAccounttype()!=0){
                                    failureMessage+="Invalid Account type given for Write-Off Asset Account,Account type should be Write-Off Asset Account.";
                                }
                                
                                if(!writeOffAccount.isActivate()){
                                   failureMessage+="Account '" + writeOffAccount.getAccountName() + "' are already deactivated. Record cannot be imported. "; 
                                }
                            } else {
                                failureMessage+="Write-Off Asset Account is not available";
                            }
                        } else {
                            failureMessage+="Write-Off Account column is not found.";
                        }

                        String productInitialPurchasePrise = "";
                        if (columnConfig.containsKey("purchaseprice")) {
                            productInitialPurchasePrise = recarr[(Integer) columnConfig.get("purchaseprice")].replaceAll("\"", "").trim();
                            if (StringUtil.isNullOrEmpty(productInitialPurchasePrise)) {
                                if (masterPreference.equalsIgnoreCase("1")) {
                                    productInitialPurchasePrise = "";
                                } else {
                                    failureMessage+="Product Initial Purchase Price is not available";
                                }
                            }
                        } else {
                            productInitialPurchasePrise = "";
                        }

                        String productSalesPrice = "";
                        if (columnConfig.containsKey("saleprice")) {
                            productSalesPrice = recarr[(Integer) columnConfig.get("saleprice")].replaceAll("\"", "").trim();
                            if (StringUtil.isNullOrEmpty(productSalesPrice)) {
                                if (masterPreference.equalsIgnoreCase("1")) {
                                    productSalesPrice = "";
                                } else {
                                    failureMessage+="Product Sales Price is not available";
                                }
                            }
                        } else {
                            productSalesPrice = "";
                        }

                        String productDefaultLocationID = "";
                        if (columnConfig.containsKey("locationName")) {
                            String productDefaultLocationName = recarr[(Integer) columnConfig.get("locationName")].replaceAll("\"", "").trim();
                            if (!StringUtil.isNullOrEmpty(productDefaultLocationName)) {
                                InventoryLocation invLoc = accProductModuleService.getInventoryLocationByName(productDefaultLocationName, companyid);
                                if (invLoc != null) {
                                    productDefaultLocationID = invLoc.getId();
                                } else {
                                    if (masterPreference.equalsIgnoreCase("2")) {
                                        HashMap requestParam = AccountingManager.getGlobalParams(request);
                                        requestParam.put("id", "");
                                        requestParam.put("name", productDefaultLocationName);
                                        requestParam.put("parent", null);
                                        KwlReturnObject jeresult = accountingHandlerDAOobj.getObject(User.class.getName(), userId);
                                        User user = (User) jeresult.getEntityList().get(0);
                                        requestParam.put("user", user);
                                        KwlReturnObject locationResult = accMasterItemsDAO.addLocationItem(requestParam);
                                        invLoc = (InventoryLocation) locationResult.getEntityList().get(0);
                                        productDefaultLocationID = invLoc.getId();
                                    } else {
                                        if (masterPreference.equalsIgnoreCase("1")) {
                                            productDefaultLocationID = null;
                                        } else {
                                            failureMessage+="Default Location is not found for " + productDefaultLocationName;
                                        }
                                    }
                                }
                            } else {
                                if (masterPreference.equalsIgnoreCase("1")) {
                                    productDefaultLocationID = null;
                                } else {
                                    failureMessage+="Default Location is not available.";
                                }
                            }
                        } else {
                            productDefaultLocationID = null;
                        }

                        String productDefaultWarehouseID = "";
                        if (columnConfig.containsKey("warehouseName")) {
                            String productDefaultWarehouseName = recarr[(Integer) columnConfig.get("warehouseName")].replaceAll("\"", "").trim();
                            if (!StringUtil.isNullOrEmpty(productDefaultWarehouseName)) {
                                InventoryWarehouse invWHouse = accProductModuleService.getInventoryWarehouseByName(productDefaultWarehouseName, companyid);
                                if (invWHouse != null) {
                                    productDefaultWarehouseID = invWHouse.getId();
                                } else {
                                    if (masterPreference.equalsIgnoreCase("2")) {
                                        Store store = new Store();
                                        store.setStoreType(storeService.getStoreType(0));//Set Store type to warehouse
                                        store.setAbbreviation(productDefaultWarehouseName);
                                        store.setDescription(productDefaultWarehouseName);
                                        store.setCcDateAllow(false);//set Default False
                                        store.setSmccAllow(false);//set Default False
                                        KwlReturnObject jeresult = accountingHandlerDAOobj.getObject(User.class.getName(), userId);
                                        User user = (User) jeresult.getEntityList().get(0);
                                        store.setCreatedBy(user);
                                        Set<User> userSet = new HashSet<>();
                                        userSet.add(user);
                                        Set<User> executiveSet = new HashSet<>();
                                        executiveSet.add(user);
                                        store.setCompany(user.getCompany());
                                        store.setStoreManagerSet(userSet);
                                        store.setStoreExecutiveSet(executiveSet);
                                        storeService.addStore(user, store);
                                        productDefaultWarehouseID = store.getId();
                                    } else {
                                        if (masterPreference.equalsIgnoreCase("1")) {
                                            productDefaultWarehouseID = null;
                                        } else {
                                            failureMessage+="Default Warehouse is not found for " + productDefaultWarehouseName;
                                        }
                                    }
                                }
                            } else {
                                if (masterPreference.equalsIgnoreCase("1")) {
                                    productDefaultWarehouseID = null;
                                } else {
                                    failureMessage+="Default Warehouse is not available.";
                                }
                            }
                        } else {
                            productDefaultWarehouseID = null;
                        }

                        Boolean isSyncable = false;
                        if (columnConfig.containsKey("syncable")) {
                            String productMakeAvailableInOtherApp = recarr[(Integer) columnConfig.get("syncable")].replaceAll("\"", "").trim();
                            if (!StringUtil.isNullOrEmpty(productMakeAvailableInOtherApp)) {
                                if (productMakeAvailableInOtherApp.equalsIgnoreCase("T")) {
                                    isSyncable = true;
                                } else if (productMakeAvailableInOtherApp.equalsIgnoreCase("F")) {
                                    isSyncable = false;
                                } else {
                                    failureMessage+="Format you entered is not correct. It should be like \"T\" or \"F\"";
                                }
                            } else {
                                if (masterPreference.equalsIgnoreCase("1")) {
                                    isSyncable = false;
                                } else {
                                    failureMessage+="Make available in other application is not available.";
                                }
                            }
                        }

                        Boolean isIslocationforproduct = false;
                        if (columnConfig.containsKey(Constants.ACTIVATE_LOCATION)) {
                            String ISlocationforproduct = recarr[(Integer) columnConfig.get(Constants.ACTIVATE_LOCATION)].replaceAll("\"", "").trim();
                            if (!StringUtil.isNullOrEmpty(ISlocationforproduct)) {
                                if (ISlocationforproduct.equalsIgnoreCase("T")) {
                                    isIslocationforproduct = true;
                                } else if (ISlocationforproduct.equalsIgnoreCase("F")) {
                                    isIslocationforproduct = false;
                                } else {
                                    failureMessage+="Format you entered is not correct. It should be like \"T\" or \"F\"";
                                }
                            }
                        }

                        if (isIslocationforproduct && StringUtil.isNullOrEmpty(productDefaultLocationID)&&!"Fixed Asset Group".equals(modName)) {
                            failureMessage+="Location is activated but Default Location Value is not Provided.";
                        }

                        Boolean isIsSerialForProduct = false;
                        if (columnConfig.containsKey(Constants.ACTIVATE_SERIAL_NO)) {
                            String IsSerialForProduct = recarr[(Integer) columnConfig.get(Constants.ACTIVATE_SERIAL_NO)].replaceAll("\"", "").trim();
                            if (!StringUtil.isNullOrEmpty(IsSerialForProduct)) {
                                if (IsSerialForProduct.equalsIgnoreCase("T")) {
                                    isIsSerialForProduct = true;
                                } else if (IsSerialForProduct.equalsIgnoreCase("F")) {
                                    isIsSerialForProduct = false;
                                } else {
                                    failureMessage+="Format you entered is not correct. It should be like \"T\" or \"F\"";
                                }
                            }
                        }

                        Boolean isIswarehouseforproduct = false;
                        if (columnConfig.containsKey(Constants.ACTIVATE_WAREHOUSE)) {
                            String Iswarehouseforproduct = recarr[(Integer) columnConfig.get(Constants.ACTIVATE_WAREHOUSE)].replaceAll("\"", "").trim();
                            if (!StringUtil.isNullOrEmpty(Iswarehouseforproduct)) {
                                if (Iswarehouseforproduct.equalsIgnoreCase("T")) {
                                    isIswarehouseforproduct = true;
                                } else if (Iswarehouseforproduct.equalsIgnoreCase("F")) {
                                    isIswarehouseforproduct = false;
                                } else {
                                    failureMessage+="Format you entered is not correct. It should be like \"T\" or \"F\"";
                                }
                            }
                        }

                        if (isIswarehouseforproduct && StringUtil.isNullOrEmpty(productDefaultWarehouseID) && !"Fixed Asset Group".equals(modName)) {
                            failureMessage+="Warehouse is activated but Default Warehouse Value is not Provided.";
                        }

                        Boolean isIsBatchForProduct = false;
                        if (columnConfig.containsKey(Constants.ACTIVATE_BATCH)) {
                            String IsBatchForProduct = recarr[(Integer) columnConfig.get(Constants.ACTIVATE_BATCH)].replaceAll("\"", "").trim();
                            if (!StringUtil.isNullOrEmpty(IsBatchForProduct)) {
                                if (IsBatchForProduct.equalsIgnoreCase("T")) {
                                    isIsBatchForProduct = true;
                                } else if (IsBatchForProduct.equalsIgnoreCase("F")) {
                                    isIsBatchForProduct = false;
                                } else {
                                    failureMessage+="Format you entered is not correct. It should be like \"T\" or \"F\"";
                                }
                            }
                        }

                        String additionalfreetext = "";
                        if (columnConfig.containsKey("additionalfreetext")) {
                            String temp = recarr[(Integer) columnConfig.get("additionalfreetext")].replaceAll("\"", "").trim();
                            if (!StringUtil.isNullOrEmpty(temp)) {
                                additionalfreetext = temp;
                            }
                        }

                        String alternateproduct = "";
                        if (columnConfig.containsKey("alternateproduct")) {
                            String temp = recarr[(Integer) columnConfig.get("alternateproduct")].replaceAll("\"", "").trim();
                            if (!StringUtil.isNullOrEmpty(temp)) {
                                alternateproduct = temp;
                            }
                        }

                        String barcode = "";
                        if (columnConfig.containsKey("barcode")) {
                            String temp = recarr[(Integer) columnConfig.get("barcode")].replaceAll("\"", "").trim();
                            if (!StringUtil.isNullOrEmpty(temp)) {
                                barcode = temp;
                            }
                        }

                        String additionaldesc = "";
                        if (columnConfig.containsKey("additionaldesc")) {
                            String temp = recarr[(Integer) columnConfig.get("additionaldesc")].replaceAll("\"", "").trim();
                            if (!StringUtil.isNullOrEmpty(temp)) {
                                additionaldesc = temp;
                            }
                        }

                        String descinforeign = "";
                        if (columnConfig.containsKey("descinforeign")) {
                            String temp = recarr[(Integer) columnConfig.get("descinforeign")].replaceAll("\"", "").trim();
                            if (!StringUtil.isNullOrEmpty(temp)) {
                                descinforeign = temp;
                            }
                        }

                        String itemgroup = "";
                        if (columnConfig.containsKey("itemgroup")) {
                            String temp = recarr[(Integer) columnConfig.get("itemgroup")].replaceAll("\"", "").trim();
                            if (!StringUtil.isNullOrEmpty(temp)) {
                                itemgroup = temp;
                            }
                        }

                        int depreciationMethod = 1;
                        if (columnConfig.containsKey("depreciationMethod")) {
                            String temp = recarr[(Integer) columnConfig.get("depreciationMethod")].replaceAll("\"", "").trim();
                            if (!StringUtil.isNullOrEmpty(temp)) {
                                if (temp.equalsIgnoreCase("Straight Line Depreciation")) {
                                    depreciationMethod = 1;
                                } else if (temp.equalsIgnoreCase("Double Decline Depreciation")) {
                                    depreciationMethod = 2;
                                } else {
                                    depreciationMethod = 3;
                                }
                            }
                        }

                        double depreciationRate = 0;
                        if (columnConfig.containsKey("depreciationRate")) {
                            String temp = recarr[(Integer) columnConfig.get("depreciationRate")].replaceAll("\"", "").trim();
                            if (!StringUtil.isNullOrEmpty(temp)) {
                                depreciationRate = Double.parseDouble(temp);
                            }
                        }

                        int depreciationCostLimit = 0;
                        if (columnConfig.containsKey("depreciationCostLimit")) {
                            String temp = recarr[(Integer) columnConfig.get("depreciationCostLimit")].replaceAll("\"", "").trim();
                            if (!StringUtil.isNullOrEmpty(temp)) {
                                depreciationCostLimit = Integer.parseInt(temp);
                            }
                        }

                        // For Checking 'ProductID' is exist or not
                        KwlReturnObject result = accProductObj.getProductIDCount(productID, companyid,true);
                        int nocount = result.getRecordTotalCount();
                        if (nocount > 0 && !updateExistingRecordFlag) {
                            failureMessage+="Asset Group ID '" + productID + "' already exists.";
                        } else if (nocount == 0 && updateExistingRecordFlag) {
                            failureMessage+="Asset Group ID '" + productID + "' not exists.";
                        }
                        
                        
                        if (!StringUtil.isNullOrEmpty(failureMessage)) {
                            throw new AccountingException(failureMessage);
                        }

                        // creating product Hashmap
                        HashMap<String, Object> productMap = new HashMap<String, Object>();

                        if (nocount == 0) {//if product does not exist i.e new product then need to check, whether it can be generate by sequence format or not. 
                            Map<String, String> sequenceNumberDataMap = new HashMap<String, String>();
                            sequenceNumberDataMap.put("moduleID", String.valueOf(Constants.Acc_FixedAssets_AssetsGroups_ModuleId));
                            sequenceNumberDataMap.put("entryNumber", productID);
                            sequenceNumberDataMap.put("companyID", companyid);
                            List list = importHandler.checksEntryNumberForSequenceNumber(sequenceNumberDataMap);
                            if (!list.isEmpty()) {
                                boolean isvalidEntryNumber = (Boolean) list.get(0);
                                if (!isvalidEntryNumber) {
                                    String formatID = (String) list.get(2);
                                    int intSeq = (Integer) list.get(3);
                                    productMap.put(Constants.SEQNUMBER, intSeq);
                                    productMap.put(Constants.SEQFORMAT, formatID);
                                }
                            }
                        }

                        boolean isUsedInTransaction = false;
                        if (updateExistingRecordFlag) {
                            Product product = (Product) result.getEntityList().get(0);
                            productMap.put("id", product.getID());
                            List listObj = accProductModuleService.isProductUsedintransction(product.getID(), companyid, request,false);// false: Product & Services Report
                            isUsedInTransaction = (Boolean) listObj.get(0);    //always boolean value
                        }

                        productMap.put("producttype", "d8a50d12-515c-102d-8de6-001cc0794cfa");
                        productMap.put("name", productName);
                        productMap.put("productid", productID);
                        if (columnConfig.containsKey("desc")) {
                            productMap.put("desc", productDescription);
                        }
                        productMap.put("additionalfreetext", additionalfreetext);
                        productMap.put("alternateproductid", alternateproduct);
                        productMap.put("barcode", barcode);
                        productMap.put("additionaldescription", additionaldesc);
                        productMap.put("foreigndescription", descinforeign);
                        productMap.put("itemgroup", itemgroup);
                        productMap.put("currencyid", currencyId);
                        if (!isUsedInTransaction) {
                            productMap.put("isBatchForProduct", isIsBatchForProduct);
                            productMap.put("isSerialForProduct", isIsSerialForProduct);
                            productMap.put("isLocationForProduct", isIslocationforproduct);
                            productMap.put("isWarehouseForProduct", isIswarehouseforproduct);
                        }

                        productMap.put("warrantyperiod", Integer.parseInt(productWarrantyPeriod));
                        productMap.put("warrantyperiodsal", Integer.parseInt(productSalesWarrantyPeriod));
                        productMap.put("vendorid", productPreferedVendorID);
                        productMap.put("isDepreciable", true);
                        productMap.put("isFixedAsset", true);

                        if (!StringUtil.isNullOrEmpty(assetControllingAccountId)) {
                            productMap.put("purchaseaccountid", assetControllingAccountId);
                            productMap.put("salesaccountid", assetControllingAccountId);
                            productMap.put("purchaseretaccountid", assetControllingAccountId);
                            productMap.put("salesretaccountid", assetControllingAccountId);
                        } 
                        productMap.put("depreciationMethod", depreciationMethod);
                        productMap.put("depreciationRate", depreciationRate);
                        productMap.put("depreciationCostLimit", depreciationCostLimit);
                        productMap.put("depreciationGLAccountID", depreciationGLAccountID);
                        productMap.put("depreciationProvisionGLAccountID", depreciationProvisionGLAccountID);
                        productMap.put("sellAssetGLAccountID", sellAssetGLAccountID);
                        productMap.put("writeoffassetaccount", writeOffAssetAccountId);

                        if (!StringUtil.isNullOrEmpty(productDefaultLocationID)) {
                            productMap.put("location", productDefaultLocationID);
                        }

                        if (!StringUtil.isNullOrEmpty(productDefaultWarehouseID)) {
                            productMap.put("warehouse", productDefaultWarehouseID);
                        }

                        productMap.put("syncable", isSyncable);
                        productMap.put("deletedflag", false);
                        productMap.put("companyid", companyid);
                        productMap.put("isImport", 1);
                        productMap.put("isActiveItem", true); //By default all Asset group is active so we put this value as 'true'.ERP-35790
                        
                        //By default all Asset group has to be set N/A as default UOM ERP-35758
                        UnitOfMeasure unitOfMeasure = accProductModuleService.getUOMByName("N/A", companyid);
                        productMap.put("uomid", unitOfMeasure.getID());
                        
                        KwlReturnObject productresult = null;
                        if (!updateExistingRecordFlag) {
                            productresult = accProductObj.addProduct(productMap);
                        } else {
                            productresult = accProductObj.updateProduct(productMap);
                        }

                        Product product = (Product) productresult.getEntityList().get(0);

                        Date ondate = new Date();
                        if (productInitialPurchasePrise.length() > 0 && !isUsedInTransaction) {
                            // creating Price list Hashmap
                            HashMap<String, Object> initialPurchasePriceMap = new HashMap<String, Object>();
                            initialPurchasePriceMap.put("productid", product.getID());
                            initialPurchasePriceMap.put("companyid", companyid);
                            initialPurchasePriceMap.put("carryin", true);
                            initialPurchasePriceMap.put("price", Double.parseDouble(productInitialPurchasePrise));
                            initialPurchasePriceMap.put("applydate", ondate);
                            initialPurchasePriceMap.put("affecteduser", "-1");
                            initialPurchasePriceMap.put("currencyid", currencyId);
                            initialPurchasePriceMap.put("uomid", product.getUnitOfMeasure().getID());
                            accProductObj.addPriceList(initialPurchasePriceMap);
                        }

                        if (productSalesPrice.length() > 0 && !isUsedInTransaction) {
                            // creating Price list Hashmap
                            HashMap<String, Object> salesPriceMap = new HashMap<String, Object>();
                            salesPriceMap.put("productid", product.getID());
                            salesPriceMap.put("companyid", companyid);
                            salesPriceMap.put("carryin", false);
                            salesPriceMap.put("price", Double.parseDouble(productSalesPrice));
                            salesPriceMap.put("applydate", ondate);
                            salesPriceMap.put("affecteduser", "-1");
                            salesPriceMap.put("currencyid", currencyId);
                            salesPriceMap.put("uomid", product.getUnitOfMeasure().getID());
                            accProductObj.addPriceList(salesPriceMap);
                        }

                        // For create custom field array
                        customfield = "";
                        JSONArray customJArr = new JSONArray();
                        for (int i = 0; i < jSONArray.length(); i++) {
                            JSONObject jSONObject = jSONArray.getJSONObject(i);

                            if (jSONObject.optBoolean("customflag", false)) {//&& !jSONObject.optBoolean("isLineItem",false)
                                HashMap<String, Object> requestParams = new HashMap<String, Object>();
                                requestParams.put(Constants.filter_names, Arrays.asList(Constants.companyid, Constants.moduleid, Constants.fieldlabel));
                                requestParams.put(Constants.filter_values, Arrays.asList(companyid, Constants.Acc_FixedAssets_AssetsGroups_ModuleId, jSONObject.getString("columnname")));

                                KwlReturnObject fieldParamsResult = accCommonTablesDAO.getFieldParams(requestParams); // get custom field for module
                                FieldParams params = (FieldParams) fieldParamsResult.getEntityList().get(0);
                                if (jSONObject.getInt("csvindex") > recarr.length - 1) {// (csv) arrayindexoutofbound when last custom column value is empty.
                                    continue;
                                }
                                if (!StringUtil.isNullOrEmpty(recarr[jSONObject.getInt("csvindex")].replaceAll("\"", "").trim())) {
                                    JSONObject customJObj = new JSONObject();
                                    customJObj.put("fieldid", params.getId());
                                    customJObj.put("filedid", params.getId());
                                    customJObj.put("refcolumn_name", "Col" + params.getRefcolnum());
                                    customJObj.put("fieldname", "Custom_" + params.getFieldlabel());
                                    customJObj.put("xtype", params.getFieldtype());

                                    String fieldComboDataStr = "";
                                    if (params.getFieldtype() == 3) { // if field of date type
                                        String dateStr = recarr[jSONObject.getInt("csvindex")].replaceAll("\"", "").trim();
                                        customJObj.put("Col" + params.getColnum(), df.parse(dateStr).getTime());
                                        customJObj.put("fieldDataVal", df.parse(dateStr).getTime());
                                    } else if (params.getFieldtype() == 4 || params.getFieldtype() == 7) { // if field of MultiSelect Drop Down OR Drop Down
                                        String[] fieldComboDataArr = recarr[jSONObject.getInt("csvindex")].replaceAll("\"", "").trim().split(";");

                                        for (int dataArrIndex = 0; dataArrIndex < fieldComboDataArr.length; dataArrIndex++) {
                                            requestParams = new HashMap<String, Object>();
                                            requestParams.put(Constants.filter_names, Arrays.asList(Constants.Acc_custom_fieldId, "value", "deleteflag"));
                                            requestParams.put(Constants.filter_values, Arrays.asList(params.getId(), fieldComboDataArr[dataArrIndex], 0));

                                            fieldParamsResult = accCommonTablesDAO.getCustomCombodata(requestParams);
                                            if (fieldParamsResult != null && !fieldParamsResult.getEntityList().isEmpty()) {
                                                FieldComboData fieldComboData = (FieldComboData) fieldParamsResult.getEntityList().get(0);
                                                fieldComboDataStr += fieldComboData.getId() + ",";
                                            }
                                        }

                                        if (!StringUtil.isNullOrEmpty(fieldComboDataStr)) {
                                            customJObj.put("Col" + params.getColnum(), fieldComboDataStr.substring(0, fieldComboDataStr.length() - 1));
                                            customJObj.put("fieldDataVal", fieldComboDataStr.substring(0, fieldComboDataStr.length() - 1));
                                        } else {
                                            continue;
                                        }
                                    } else if (params.getFieldtype() == 11) { // if field of check box type 
                                        customJObj.put("Col" + params.getColnum(), Boolean.parseBoolean(recarr[jSONObject.getInt("csvindex")].replaceAll("\"", "").trim()));
                                        customJObj.put("fieldDataVal", Boolean.parseBoolean(recarr[jSONObject.getInt("csvindex")].replaceAll("\"", "").trim()));
                                    } else if (params.getFieldtype() == 12) { // if field of check list type
                                        requestParams = new HashMap<String, Object>();
                                        requestParams.put(Constants.filter_names, Arrays.asList(Constants.Acc_custom_fieldId, "deleteflag"));
                                        requestParams.put(Constants.filter_values, Arrays.asList(params.getId(), 0));

                                        fieldParamsResult = accCommonTablesDAO.getCustomCombodata(requestParams);
                                        List<FieldComboData> fieldComboDataList = fieldParamsResult.getEntityList();

                                        String[] fieldComboDataArr = recarr[jSONObject.getInt("csvindex")].replaceAll("\"", "").trim().split(";");
                                        int dataArrIndex = 0;

                                        for (FieldComboData fieldComboData : fieldComboDataList) {
                                            if (fieldComboDataArr.length != dataArrIndex && fieldComboDataArr[dataArrIndex] != null && fieldComboDataArr[dataArrIndex].replaceAll("\"", "").trim().equalsIgnoreCase("true")) {
                                                fieldComboDataStr += fieldComboData.getId() + ",";
                                            }
                                            dataArrIndex++;
                                        }

                                        if (!StringUtil.isNullOrEmpty(fieldComboDataStr)) {
                                            customJObj.put("Col" + params.getColnum(), fieldComboDataStr.substring(0, fieldComboDataStr.length() - 1));
                                            customJObj.put("fieldDataVal", fieldComboDataStr.substring(0, fieldComboDataStr.length() - 1));
                                        } else {
                                            continue;
                                        }
                                    } else {
                                        customJObj.put("Col" + params.getColnum(), recarr[jSONObject.getInt("csvindex")].replaceAll("\"", "").trim());
                                        customJObj.put("fieldDataVal", recarr[jSONObject.getInt("csvindex")].replaceAll("\"", "").trim());
                                    }

                                    customJObj.put("Custom_" + params.getFieldlabel(), "Col" + params.getColnum());
                                    customJArr.put(customJObj);
                                }
                            }
                        }
                        customfield = customJArr.toString();
                        if (!StringUtil.isNullOrEmpty(customfield)) {
                            JSONArray jcustomarray = new JSONArray(customfield);
                            HashMap<String, Object> customrequestParams = new HashMap<String, Object>();
                            customrequestParams.put("customarray", jcustomarray);
                            customrequestParams.put("modulename", Constants.Acc_Product_modulename);
                            customrequestParams.put("moduleprimarykey", Constants.Acc_Productid);
                            customrequestParams.put("modulerecid", product.getID());
                            customrequestParams.put("moduleid", Constants.Acc_FixedAssets_AssetsGroups_ModuleId);//isFixedAsset ? Constants.Acc_FixedAssets_AssetsGroups_ModuleId:
                            customrequestParams.put("companyid", companyid);
                            productMap.put("id", product.getID());
                            customrequestParams.put("customdataclasspath", Constants.Acc_Product_custom_data_classpath);
                            KwlReturnObject customDataresult = fieldDataManagercntrl.setCustomData(customrequestParams);
                            if (customDataresult != null && customDataresult.getEntityList().size() > 0) {
                                productMap.put("accproductcustomdataref", product.getID());
                                productresult = accProductObj.updateProduct(productMap);
                            }
                            HashMap<String, Object> customHistoryParams = new HashMap<String, Object>();
                            customHistoryParams.put("productId", product.getID());
                            customHistoryParams.put("customarray", jcustomarray);
                            accProductModuleService.maintainCustomFieldHistoryForProduct(request, customHistoryParams);
                        }
                    } catch (Exception ex) {
                        failed++;
                        String errorMsg = ex.getMessage(), invalidColumns = "";
                        try {
                            JSONObject errorLog = new JSONObject(errorMsg);
                            errorMsg = errorLog.getString("errorMsg");
                            invalidColumns = errorLog.getString("invalidColumns");
                        } catch (JSONException jex) {
                        }
                        failedRecords.append("\n" + accProductModuleService.createCSVrecord(recarr) + "\"" + errorMsg.replaceAll("\"", "") + "\"");
                    }
                    total++;
                }
                cnt++;

                if (count == limit) {
                    txnManager.commit(status);
                    // for reset counter of transaction limit
                    count = 1;
                    def = new DefaultTransactionDefinition();
                    def.setName("import_Tx");
                    def.setPropagationBehavior(TransactionDefinition.PROPAGATION_REQUIRED);
                    status = txnManager.getTransaction(def);
                } else {
                    count++;
                }
            }

            if (failed > 0) {
                accProductModuleService.createFailureFiles(fileName, failedRecords, ".csv");
            }

            int success = total - failed;
            if (total == 0) {
                msg = messageSource.getMessage("acc.field.Emptyfile", null, RequestContextUtils.getLocale(request));
            } else if (success == 0) {
                msg = messageSource.getMessage("acc.rem.169", null, RequestContextUtils.getLocale(request));
            } else if (success == total) {
                msg = messageSource.getMessage("acc.rem.168", null, RequestContextUtils.getLocale(request));
            } else {
                msg = messageSource.getMessage("acc.field.Imported", null, RequestContextUtils.getLocale(request))+ " " + success + " "+ messageSource.getMessage("acc.field.record", null, RequestContextUtils.getLocale(request)) + (success > 1 ? "s" : "") +" " +messageSource.getMessage("acc.field.successfully.", null, RequestContextUtils.getLocale(request));
                msg += (failed == 0 ? "." : " "+messageSource.getMessage("acc.field.andfailedtoimport", null, RequestContextUtils.getLocale(request))+ " " + failed + " "+ messageSource.getMessage("acc.field.record", null, RequestContextUtils.getLocale(request)) + (failed > 1 ? "s" : "") + ".");
            }

            try {
                txnManager.commit(status);
            } catch (Exception ex) {
                commitedEx = true;
                throw ex;
            }
        } catch (Exception ex) {
            if (!commitedEx) { //if exception occurs during commit then dont call rollback
                txnManager.rollback(status);
            }
            issuccess = false;
            msg = "" + ex.getMessage();
            Logger.getLogger(accProductController.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
            throw new AccountingException("Error While Importing Records.");
        } finally {
            fileInputStream.close();
            csvReader.close();
            DefaultTransactionDefinition ldef = new DefaultTransactionDefinition();
            ldef.setName("import_Tx");
            ldef.setPropagationBehavior(TransactionDefinition.PROPAGATION_REQUIRED);
            TransactionStatus lstatus = txnManager.getTransaction(ldef);

            try {
                //Insert Integration log
                HashMap<String, Object> logDataMap = new HashMap<String, Object>();
                logDataMap.put("FileName", getActualFileName(fileName));
                logDataMap.put("StorageName", fileName);
                logDataMap.put("Log", msg);
                logDataMap.put("Type", "csv");
                logDataMap.put("FailureFileType", failed>0?"csv":"");
                logDataMap.put("TotalRecs", total);
                logDataMap.put("Rejected", failed);
                logDataMap.put("Module", 42);
                logDataMap.put("ImportDate", new Date());
                logDataMap.put("User", userId);
                logDataMap.put("Company", companyid);
                importDao.saveImportLog(logDataMap);
                txnManager.commit(lstatus);
            } catch (Exception ex) {
                txnManager.rollback(lstatus);
                Logger.getLogger(accProductControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
            }
            try {
                returnObj.put("success", issuccess);
                returnObj.put("msg", msg);
                returnObj.put("totalrecords", total);
                returnObj.put("successrecords", total - failed);
                returnObj.put("failedrecords", failed);
                returnObj.put("filename", getActualFileName(fileName));
                returnObj.put("Module", Constants.Acc_Product_Master_ModuleId);
            } catch (JSONException ex) {
                Logger.getLogger(accProductControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return returnObj;
    }

    public ModelAndView importFixedAssetOpeningDocuments(HttpServletRequest request, HttpServletResponse response) throws ServiceException {
        JSONObject jobj = new JSONObject();
        String msg = "";
        boolean issuccess = false;
        try {
            String eParams = request.getParameter("extraParams");
            JSONObject extraParams = StringUtil.isNullOrEmpty(eParams) ? new JSONObject() : new JSONObject(eParams);
            extraParams.put("Company", sessionHandlerImpl.getCompanyid(request));

            String doAction = request.getParameter("do");
            boolean updateExistingRecordFlag = false;
            if (!StringUtil.isNullOrEmpty(request.getParameter("updateExistingRecordFlag"))) {
                updateExistingRecordFlag = Boolean.FALSE.parseBoolean(request.getParameter("updateExistingRecordFlag"));
            }
            HashMap<String, Object> requestParams = importHandler.getImportRequestParams(request);
            requestParams.put("extraParams", extraParams);
            requestParams.put("extraObj", null);
            requestParams.put("servletContext", this.getServletContext());

            if (updateExistingRecordFlag) {
                requestParams.put("allowDuplcateRecord", updateExistingRecordFlag);
            } 
            
            if (doAction.compareToIgnoreCase("import") == 0) {
                System.out.println("A(( Import start : " + new Date());
                JSONObject datajobj = new JSONObject();
                JSONObject resjson = new JSONObject(request.getParameter("resjson").toString());
                JSONArray resjsonJArray = resjson.getJSONArray("root");

                String filename = request.getParameter("filename");
                datajobj.put("filename", filename);

                String destinationDirectory = storageHandlerImpl.GetDocStorePath() + "importplans";
                File filepath = new File(destinationDirectory + "/" + filename);
                datajobj.put("FilePath", filepath);
                datajobj.put("resjson", resjsonJArray);
                jobj = importFixedAssetOpeningDocuments(request, datajobj);
                System.out.println("A(( Import end : " + new Date());
            } else if (doAction.compareToIgnoreCase("validateData") == 0) {
                System.out.println("A(( Validation start : " + new Date());
                jobj = importHandler.validateFileData(requestParams);
                System.out.println("A(( Validation end : " + new Date());
            }
            issuccess = true;
        } catch (Exception ex) {
            issuccess = false;
            msg = "" + ex.getMessage();
            try {
                jobj.put("success", issuccess);
                jobj.put("msg", msg);
            } catch (JSONException e) {
                Logger.getLogger(accProductControllerCMN.class.getName()).log(Level.SEVERE, e.getMessage(), e);
            }
            Logger.getLogger(accProductControllerCMN.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
        }
        return new ModelAndView("jsonView", "model", jobj.toString());
    }

    public JSONObject importFixedAssetOpeningDocuments(HttpServletRequest request, JSONObject jobj) throws AccountingException, IOException, SessionExpiredException, JSONException {
        DefaultTransactionDefinition def = new DefaultTransactionDefinition();
        def.setName("import_Tx");
        def.setPropagationBehavior(TransactionDefinition.PROPAGATION_REQUIRED);
        TransactionStatus status = txnManager.getTransaction(def);
        boolean commitedEx = false;
        boolean issuccess = true;
        String msg = "";
        FileInputStream fileInputStream = null;
        int total = 0, failed = 0;
        String companyid = sessionHandlerImpl.getCompanyid(request);
        String userId = sessionHandlerImpl.getUserid(request);
        String fileName = jobj.getString("filename");
        String delimiterType = request.getParameter("delimiterType");
        String prevDocumentNo = "";
        boolean isAlreadyExist = false;
        boolean isRecordFailed = false;
        boolean newProductAddinUpdateCase = false;
        CsvReader csvReader = null;
        JSONObject returnObj = new JSONObject();
        boolean updateExistingRecordFlag = false;
        if (!StringUtil.isNullOrEmpty(request.getParameter("updateExistingRecordFlag"))) {
            updateExistingRecordFlag = Boolean.FALSE.parseBoolean(request.getParameter("updateExistingRecordFlag"));
        }

        try {
            HashMap<String, Object> openingDocumentDataMap = AccountingManager.getGlobalParams(request);
            JSONArray assetDetails = new JSONArray();
            JSONArray assetBatchDetails = new JSONArray();
            JSONArray assetSerialDetails = new JSONArray();
            String[] recarr = null;
            String quantity = "";
            String rate = "";
            String dateFormat = null, dateFormatId = request.getParameter("dateFormat");
            double qty = 0;
            if (!StringUtil.isNullOrEmpty(dateFormatId)) {
                KwlReturnObject kdfObj = accountingHandlerDAOobj.getObject(KWLDateFormat.class.getName(), dateFormatId);
                KWLDateFormat kdf = (KWLDateFormat) kdfObj.getEntityList().get(0);
                dateFormat = kdf != null ? kdf.getJavaForm() : null;
            }
            
            DateFormat df = new SimpleDateFormat(dateFormat);
            fileInputStream = new FileInputStream(jobj.getString("FilePath"));

            csvReader = new CsvReader(new InputStreamReader(fileInputStream), delimiterType);
            int cnt = 0;

            StringBuilder failedRecords = new StringBuilder();
            StringBuilder failedPrevRecords = new StringBuilder();
            StringBuilder singleFailedRecords = new StringBuilder();// Asset Opening document with one row of failure record then all rows will be included in failure file
            int singleFailureRecordCount = 0;//  count of total rows in import file
            Set<String> failureList = new HashSet<>(); // set of Document having failure record's
            String documentNo = "";
            HashMap<String, Integer> columnConfig = new HashMap<String, Integer>();
            JSONArray jSONArray = jobj.getJSONArray("resjson");
            
            Date finanDate = null; //Financial Year Start Date
            Map<String, Object> filterParams = new HashMap<String, Object>();
            filterParams.put("id", companyid);
            KwlReturnObject kresult = accCompanyPreferencesObj.getCompanyPreferences(filterParams);
            CompanyAccountPreferences preferences = null;
            if (kresult.getEntityList().size() > 0) {
                preferences = (CompanyAccountPreferences) kresult.getEntityList().get(0);
            }
            KwlReturnObject extraresult = accCompanyPreferencesObj.getExtraCompanyPreferences(filterParams);
            ExtraCompanyPreferences extra = null;
            if (extraresult.getEntityList().size() > 0) {
                extra = (ExtraCompanyPreferences) extraresult.getEntityList().get(0);
            }
            finanDate = getAssetDepreciationBasedOnDate(extra, preferences);
            for (int i = 0; i < jSONArray.length(); i++) {
                JSONObject jSONObject = jSONArray.getJSONObject(i);
                columnConfig.put(jSONObject.getString("dataindex"), jSONObject.getInt("csvindex"));
            }

            while (csvReader.readRecord()) {
                String failureMsg = "";
                recarr = csvReader.getValues();
                if (cnt == 0) {
                    failedRecords.append(createCSVrecord(recarr) + "\"Error Message\"");
                }
                if (cnt != 0) {
                    try {
                        documentNo = "";
                        if (columnConfig.containsKey("documentno")) {
                            documentNo = recarr[(Integer) columnConfig.get("documentno")].replaceAll("\"", "").trim();
                            if (!StringUtil.isNullOrEmpty(documentNo)) {
                                documentNo = documentNo.replaceAll("\"", "");
                            } else {
                                failureMsg += "Document Number is not available.";
                            }
                        } else {
                            failureMsg += "Document Number column is not found.";
                        }

                        Date date = null;
                        if (columnConfig.containsKey("date")) {
                            String entryDateStr = recarr[(Integer) columnConfig.get("date")].replaceAll("\"", "").trim();
                            if (StringUtil.isNullOrEmpty(entryDateStr)) {
                                failureMsg += "Document Date is not available";
                            } else {
                                date = df.parse(entryDateStr);
                                if(date.after(finanDate)){
                                   failureMsg += "Document Date should be before or equal to Book Beginning Date or First Financial Year Date as per Depreciation Calculation Based on option. ";
                                }
                            }
                        } else {
                            failureMsg += "Document Date column is not found.";
                        }

                        if (columnConfig.containsKey("quantity")) {
                            quantity = recarr[(Integer) columnConfig.get("quantity")].replaceAll("\"", "").trim();
                            if (!StringUtil.isNullOrEmpty(quantity)) {
                                quantity = quantity.replaceAll("\"", "");
                            }else{
                                quantity = "0.00";
                            }
                        }else{
                            quantity = "0.00";
                        }

                        if (columnConfig.containsKey("rate")) {
                            rate = recarr[(Integer) columnConfig.get("rate")].replaceAll("\"", "").trim();
                            if (!StringUtil.isNullOrEmpty(rate)) {
                                rate = rate.replaceAll("\"", "");
                            }
                        }else{
                            rate = "0.00";
                        }

                        String assetgroupid = "";
                        if (columnConfig.containsKey("assetgroupid")) {
                            String assetGroupId = recarr[(Integer) columnConfig.get("assetgroupid")].replaceAll("\"", "").trim();
                            if (!StringUtil.isNullOrEmpty(assetGroupId)) {
                                Product group = getFixedAssetGroup(assetGroupId, companyid, false);
                                if (group != null) {
                                    assetgroupid = group.getID();
                                } else {
                                    failureMsg += "Fixed Asset Group Id is not found for " + assetGroupId;
                                }
                            } else {
                                if (columnConfig.containsKey("assetgroupname")) {
                                    String assetGroupName = recarr[(Integer) columnConfig.get("assetgroupname")].replaceAll("\"", "").trim();
                                    if (!StringUtil.isNullOrEmpty(assetGroupName)) {
                                        Product group = getFixedAssetGroup(assetGroupName, companyid, true);
                                        if (group != null) {
                                            assetgroupid = group.getID();
                                        } else {
                                            failureMsg += "Fixed Asset Group Name is not found for " + assetGroupName;
                                        }
                                    } else {
                                        failureMsg += "Fixed Asset Group is not available";
                                    }
                                } else {
                                    failureMsg += "Fixed Asset Group is not available";
                                }
                            }
                        } else {
                            failureMsg += "Fixed Asset Group column is not found.";
                        }

                        String assetid = "";
                        if (columnConfig.containsKey("assetid")) {
                            assetid = recarr[(Integer) columnConfig.get("assetid")].replaceAll("\"", "").trim();
                            if (StringUtil.isNullOrEmpty(assetid)) {
                                failureMsg += "Asset Id is not available";
                            }
                        } else {
                            failureMsg += "Asset Id column is not found.";
                        }

                        String desc = "";
                        if (columnConfig.containsKey("desc")) {
                            desc = recarr[(Integer) columnConfig.get("desc")].replaceAll("\"", "").trim();
                            if (!StringUtil.isNullOrEmpty(desc)) {
                                desc = desc.replaceAll("\"", "");
                            }
                        }

                        String department = "";
                        if (columnConfig.containsKey("department")) {
                            department = recarr[(Integer) columnConfig.get("department")].replaceAll("\"", "").trim();
                            if (!StringUtil.isNullOrEmpty(department)) {
                                Department dept = getDepartment(department, companyid);
                                if (dept != null) {
                                    department = dept.getId();
                                } 
                            } 
                        }

                        String userName = "";
                        if (columnConfig.containsKey("username")) {
                            userName = recarr[(Integer) columnConfig.get("username")].replaceAll("\"", "").trim();
                            if (!StringUtil.isNullOrEmpty(userName)) {
                                User user = getUser(userName, companyid);
                                if (user != null) {
                                    userName = user.getUserID();
                                } else {
                                    failureMsg += "User Name is not found for " + userName;
                                }
                            }
                        }

                        String cost = "";
                        if (columnConfig.containsKey("cost")) {
                            cost = recarr[(Integer) columnConfig.get("cost")].replaceAll("\"", "").trim();
                            if (StringUtil.isNullOrEmpty(cost)) {
                                failureMsg += "Asset Cost is not available";
                            }
                        } else {
                            failureMsg += "Asset Cost column is not found.";
                        }

                        String salvageRate = "";
                        if (columnConfig.containsKey("salvagerate")) {
                            salvageRate = recarr[(Integer) columnConfig.get("salvagerate")].replaceAll("\"", "").trim();
                            if (!StringUtil.isNullOrEmpty(salvageRate)) {
                                salvageRate = salvageRate.replaceAll("\"", "");
                            }else{
                                salvageRate = "0.00";
                            }
                        }else{
                            salvageRate = "0.00";
                        }

                        String salvageValue = "";
                        if (columnConfig.containsKey("salvagevalue")) {
                            salvageValue = recarr[(Integer) columnConfig.get("salvagevalue")].replaceAll("\"", "").trim();
                            if (!StringUtil.isNullOrEmpty(salvageValue)) {
                                salvageValue = salvageValue.replaceAll("\"", "");
                            }else{
                                salvageValue = "0.00";
                            }
                        }else{
                            salvageValue = "0.00";
                        }

                        String assetLife = "";
                        if (columnConfig.containsKey("assetlife")) {
                            assetLife = recarr[(Integer) columnConfig.get("assetlife")].replaceAll("\"", "").trim();
                            if (StringUtil.isNullOrEmpty(assetLife)) {
                                failureMsg += "Asset Life is not available";
                            }
                        } else {
                            failureMsg += "Asset Life column is not found.";
                        }

                        String elapsedLife = "";
                        if (columnConfig.containsKey("elapsedlife")) {
                            elapsedLife = recarr[(Integer) columnConfig.get("elapsedlife")].replaceAll("\"", "").trim();
                            if (!StringUtil.isNullOrEmpty(elapsedLife)) {
                                elapsedLife = elapsedLife.replaceAll("\"", "");
                            }else{
                                elapsedLife = "0.00";
                            }
                        }else{
                            elapsedLife = "0.00";
                        }

                        String nominalValue = "";
                        if (columnConfig.containsKey("nominalvalue")) {
                            nominalValue = recarr[(Integer) columnConfig.get("nominalvalue")].replaceAll("\"", "").trim();
                            if (!StringUtil.isNullOrEmpty(nominalValue)) {
                                nominalValue = nominalValue.replaceAll("\"", "");
                            }else{
                                nominalValue = "0.00";
                            }
                        }else{
                            nominalValue = "0.00";
                        }

                        Date purchaseDate = new Date();
                        if (columnConfig.containsKey("purchasedate")) {
                            String purchaseDateStr = recarr[(Integer) columnConfig.get("purchasedate")].replaceAll("\"", "").trim();
                            if (StringUtil.isNullOrEmpty(purchaseDateStr)) {
                                failureMsg += "Purchase Date is not available";
                            }else{
                                 purchaseDate = df.parse(purchaseDateStr);
                            }
                        } else {
                            failureMsg += "Purchase Date column is not found.";
                        }
                        
                        Date installationDate = new Date();
                        if (columnConfig.containsKey("installationdate")) {
                            String installationDateStr = recarr[(Integer) columnConfig.get("installationdate")].replaceAll("\"", "").trim();
                            if (StringUtil.isNullOrEmpty(installationDateStr)) {
                                failureMsg += "Installation Date is not available";
                            }else{
                                 installationDate = df.parse(installationDateStr);
                            }
                        } else {
                            failureMsg += "Installation Date column is not found.";
                        }
                        
//                        Calendar calInstallation = Calendar.getInstance();
//                        calInstallation.setTime(installationDate);
//                        long installationDateInLong = calInstallation.getTimeInMillis();
//                        Calendar calPurchase = Calendar.getInstance();
//                        calPurchase.setTime(purchaseDate);
//                        long purchaseDateInLong = calPurchase.getTimeInMillis();
//                        if(installationDateInLong < purchaseDateInLong){
//                            throw new AccountingException("Date of Installation cannot be smaller than Purchase Date.");
//                        }

                        String warehouse = "";
                        if (columnConfig.containsKey("warehouse")) {
                            warehouse = recarr[(Integer) columnConfig.get("warehouse")].replaceAll("\"", "").trim();
                            if (!StringUtil.isNullOrEmpty(warehouse)) {
                                InventoryWarehouse ware = getInventoryWarehouse(warehouse, companyid);
                                if (ware != null) {
                                    warehouse = ware.getId();
                                } 
                            } 
                        }

                        String row = "";
                        if (columnConfig.containsKey("row")) {
                            row = recarr[(Integer) columnConfig.get("row")].replaceAll("\"", "").trim();
                            if (!StringUtil.isNullOrEmpty(row)) {
                                StoreMaster row1 = getRowRackBin(row, companyid);
                                if (row1 != null) {
                                    row = row1.getId();
                                } 
                            }
                        }

                        String rack = "";
                        if (columnConfig.containsKey("rack")) {
                            rack = recarr[(Integer) columnConfig.get("rack")].replaceAll("\"", "").trim();
                            if (!StringUtil.isNullOrEmpty(row)) {
                                StoreMaster rack1 = getRowRackBin(rack, companyid);
                                if (rack1 != null) {
                                    rack = rack1.getId();
                                }
                            } 
                        }

                        String bin = "";
                        if (columnConfig.containsKey("bin")) {
                            bin = recarr[(Integer) columnConfig.get("bin")].replaceAll("\"", "").trim();
                            if (!StringUtil.isNullOrEmpty(row)) {
                                StoreMaster bin1 = getRowRackBin(bin, companyid);
                                if (bin1 != null) {
                                    bin = bin1.getId();
                                } 
                            } 
                        }

                        String location = "";
                        if (columnConfig.containsKey("locations")) {
                            location = recarr[(Integer) columnConfig.get("locations")].replaceAll("\"", "").trim();
                            if (!StringUtil.isNullOrEmpty(location)) {
                                InventoryLocation loc = getInventoryLocation(location, companyid);
                                if (loc != null) {
                                    location = loc.getId();
                                }
                            } 
                        }

                        String batch = "";
                        if (columnConfig.containsKey("batch")) {                            
                            batch = recarr[(Integer) columnConfig.get("batch")].replaceAll("\"", "").trim();
                            if (!StringUtil.isNullOrEmpty(batch)) {
                                batch = batch.replaceAll("\"", "");                                
                            }
                        }

                        String mfgDate = "";
                        if (columnConfig.containsKey("mfgdate")) {
                            mfgDate = recarr[(Integer) columnConfig.get("mfgdate")].replaceAll("\"", "").trim();
                            if (!StringUtil.isNullOrEmpty(mfgDate)) {
                                mfgDate = mfgDate.replaceAll("\"", "");
                            }
                        }

                        String expDate = "";
                        if (columnConfig.containsKey("expdate")) {
                            expDate = recarr[(Integer) columnConfig.get("expdate")].replaceAll("\"", "").trim();
                            if (!StringUtil.isNullOrEmpty(expDate)) {
                                expDate = expDate.replaceAll("\"", "");
                            }
                        }

                        String assetQuantity = "1";
//                        if (columnConfig.containsKey("assetquantity")) {
//                            assetQuantity = recarr[(Integer) columnConfig.get("assetquantity")].replaceAll("\"", "").trim();
//                            if (!StringUtil.isNullOrEmpty(assetQuantity)) {
//                                assetQuantity = assetQuantity.replaceAll("\"", "");
//                            }else{
//                                assetQuantity = "0.00";
//                            }
//                        }else{
//                            assetQuantity = "0.00";
//                        }

                        String serialNo = "";
                        if (columnConfig.containsKey("serialno")) {
                            serialNo = recarr[(Integer) columnConfig.get("serialno")].replaceAll("\"", "").trim();
                            if (!StringUtil.isNullOrEmpty(serialNo)) {
                                serialNo = serialNo.replaceAll("\"", "");
                            }
                        }

                        String warrantyExpFromDate = "";
                        if (columnConfig.containsKey("warrantyexpfromdate")) {
                            warrantyExpFromDate = recarr[(Integer) columnConfig.get("warrantyexpfromdate")].replaceAll("\"", "").trim();
                            if (!StringUtil.isNullOrEmpty(warrantyExpFromDate)) {
                                warrantyExpFromDate = warrantyExpFromDate.replaceAll("\"", "");
                            }
                        }

                        String warrantyExpToDate = "";
                        if (columnConfig.containsKey("warrantyexptodate")) {
                            warrantyExpToDate = recarr[(Integer) columnConfig.get("warrantyexptodate")].replaceAll("\"", "").trim();
                            if (!StringUtil.isNullOrEmpty(warrantyExpToDate)) {
                                warrantyExpToDate = warrantyExpToDate.replaceAll("\"", "");
                            }
                        }
                      
                        if (!prevDocumentNo.equalsIgnoreCase(documentNo)) {
                            
                            if (failureList.contains(prevDocumentNo)) {
                                failed += singleFailureRecordCount;
                                failedRecords.append(singleFailedRecords);
                                singleFailedRecords = new StringBuilder();
                                singleFailureRecordCount = 0;
                            }
                            
                            // for Opening Fixed Asset Document 
                            if (assetDetails.length() > 0 && !isRecordFailed) {
                                try {
                                    double totalCost = 0;
                                    double documentRate = openingDocumentDataMap.get("rate") != null ? (Double) openingDocumentDataMap.get("rate") : 0;
                                    documentRate = authHandler.round(documentRate, companyid);
                                    if (openingDocumentDataMap.containsKey("quantity") && openingDocumentDataMap.get("quantity") != null) {
                                        qty = (Double) openingDocumentDataMap.get("quantity");
                                    }
                                    for (int assetDetailCnt = 0; assetDetailCnt < assetDetails.length(); assetDetailCnt++) {
                                        JSONObject AssetDetailObj = assetDetails.getJSONObject(assetDetailCnt);
                                        if (AssetDetailObj.has("cost")) {
                                            totalCost += authHandler.round(AssetDetailObj.optDouble("cost",0), companyid);
                                        }
                                    }
                                    totalCost = authHandler.round(totalCost, companyid);
                                    if (totalCost == documentRate && qty==assetDetails.length()) {
                                        if (!updateExistingRecordFlag || newProductAddinUpdateCase) {
                                            saveAssetOpenings(request, openingDocumentDataMap, assetDetails);
                                        }else{
                                            openingDocumentDataMap.put("updateExistingRecordFlag", updateExistingRecordFlag);
                                            updateAssetOpenings(request, openingDocumentDataMap, assetDetails);
                                        }
                                    } else {
                                        throw new AccountingException("Either Document Rate is not matched with the Assets Cost or Document Quantity is not matched with the Assets Quantity. ");
                                    }
                                } catch (Exception ex) {
                                    String errorMsg = ex.getMessage();
                                    isRecordFailed = true;
                                    if (ex.getMessage() != null) {
                                        errorMsg = ex.getMessage();
                                    } else if (ex.getCause() != null) {
                                        errorMsg = ex.getCause().getMessage();
                                    }
                                    singleFailedRecords.append(errorMsg.replaceAll("\"", "")).append("\"");
                                    if (isRecordFailed) {
                                        if (!failureList.contains(prevDocumentNo)) {
                                            failureList.add(prevDocumentNo);
                                        }
                                        failed += singleFailureRecordCount;
                                        if (singleFailedRecords.toString().length() > 0) {
                                            failedRecords.append(singleFailedRecords);
                                        }
                                    }
                                }
                            }

                            newProductAddinUpdateCase = false;
                            isAlreadyExist = false;
                            if (!StringUtil.isNullOrEmpty(documentNo)) {
                                HashMap<String, Object> reqMap = new HashMap<String, Object>();
                                reqMap.put("companyId", companyid);
                                reqMap.put("documentNumber", documentNo);
                                KwlReturnObject result = accProductObj.getAssetOpenings(reqMap);
                                int nocount = result.getRecordTotalCount();
                                if (!updateExistingRecordFlag && nocount > 0) {
                                    isAlreadyExist = true;
                                    failureMsg += "Document number '" + documentNo + "' already exists.";
                                } else if (nocount == 0 && updateExistingRecordFlag) {
                                    newProductAddinUpdateCase = true;
//                                    failureMsg += "Document number '" + documentNo + "' not exists.");
                                }
                            }
                            
                            isRecordFailed = false;
                            assetDetails = new JSONArray();
                            assetBatchDetails = new JSONArray();
                            assetSerialDetails = new JSONArray();
                            prevDocumentNo = documentNo;
                            //below variable are get initialized to give correct failure and sucess
                            singleFailedRecords = new StringBuilder();
                            singleFailureRecordCount = 0;
                            openingDocumentDataMap.put("createdby", userId);
                            openingDocumentDataMap.put("date", date);
                            openingDocumentDataMap.put("rate", authHandler.round(Double.parseDouble(rate), companyid));
                            openingDocumentDataMap.put("documentNo", documentNo);
                            openingDocumentDataMap.put("assetgroupid", assetgroupid);
                            openingDocumentDataMap.put("quantity", Double.parseDouble(quantity)); 
                        }
                        if (!StringUtil.isNullOrEmpty(assetid)) {
                            boolean isPresent=false;
                            isPresent = importDao.isAssetIDPresent(assetid, companyid);
                            if ((!updateExistingRecordFlag || newProductAddinUpdateCase) && isPresent) {
                                isAlreadyExist = true;
                                failureMsg += "Asset ID '" + assetid + "' already exists.";
                            } else if (!isPresent && (updateExistingRecordFlag && !newProductAddinUpdateCase)) {
                                failureMsg += "Asset ID '" + assetid + "' not exists.";
                            }
                        }
                        
                         /*
                         If any failure then Skip that Document
                        */
                        if (!StringUtil.isNullOrEmpty(failureMsg)) {
                            throw new AccountingException(failureMsg);
                        }
                        failedPrevRecords = new StringBuilder();
                        failedPrevRecords.append("\n" + createCSVrecord(recarr));

                        // for Asset Details                        
                        JSONObject assetDetailObj = new JSONObject();
                        assetDetailObj.put("assetid", assetid);
                        assetDetailObj.put("desc", desc);
                        assetDetailObj.put("department", department);
                        assetDetailObj.put("userName", userName);
                        assetDetailObj.put("cost", authHandler.round(Double.parseDouble(cost), companyid));
                        assetDetailObj.put("salvageValue", Double.parseDouble(salvageValue));
                        assetDetailObj.put("salvageRate", Double.parseDouble(salvageRate));                        
                        assetDetailObj.put("assetLife",  Double.parseDouble(assetLife));
                        assetDetailObj.put("elapsedLife", Double.parseDouble(elapsedLife));
                        assetDetailObj.put("nominalValue", Double.parseDouble(nominalValue));
                        assetDetailObj.put("installationDate", installationDate);
                        assetDetailObj.put("purchaseDate", purchaseDate);

                        //Batch Details
                        JSONObject assetBatchDetailObj = new JSONObject();
                        assetBatchDetailObj.put("warehouse",warehouse);
                        assetBatchDetailObj.put("row", row);
                        assetBatchDetailObj.put("rack", rack);
                        assetBatchDetailObj.put("bin", bin);
                        assetBatchDetailObj.put("location", location);
                        assetBatchDetailObj.put("batch", batch);
                        assetBatchDetailObj.put("mfgDate", mfgDate);
                        assetBatchDetailObj.put("expDate", expDate);
                        assetBatchDetailObj.put("assetQuantity", Double.parseDouble(assetQuantity));
                        assetBatchDetailObj.put("quantity", Double.parseDouble(assetQuantity));

                        // Serial Details
                        assetBatchDetailObj.put("serialNo", serialNo);
                        assetBatchDetailObj.put("warrantyExpFromDate", warrantyExpFromDate);
                        assetBatchDetailObj.put("warrantyExpToDate",warrantyExpToDate);
                                              
                        assetBatchDetails.put(assetBatchDetailObj);
                        
                        assetDetailObj.put("batchDeatils", assetBatchDetails);
                         
                        // Add Custom fields details of line items
                        // For create custom field array
                        JSONArray lineCustomJArr = new JSONArray();
                        for (int i = 0; i < jSONArray.length(); i++) {
                            JSONObject jSONObject = jSONArray.getJSONObject(i);
                            if (jSONObject.optBoolean("customflag", false)) {
                                HashMap<String, Object> requestParams = new HashMap<String, Object>();
                                requestParams.put(Constants.filter_names, Arrays.asList(Constants.companyid, Constants.moduleid, Constants.fieldlabel));
                                requestParams.put(Constants.filter_values, Arrays.asList(companyid, Constants.Acc_FixedAssets_Details_ModuleId, jSONObject.getString("columnname")));

                                KwlReturnObject fieldParamsResult = accCommonTablesDAO.getFieldParams(requestParams); // get custom field for module
                                FieldParams params = (FieldParams) fieldParamsResult.getEntityList().get(0);
                                if (jSONObject.getInt("csvindex") > recarr.length - 1) { // (csv) arrayindexoutofbound when last custom column value is empty.
                                    continue;
                                }

                                if (!StringUtil.isNullOrEmpty(recarr[jSONObject.getInt("csvindex")].replaceAll("\"", "").trim())) {
                                    JSONObject customJObj = new JSONObject();
                                    customJObj.put("fieldid", params.getId());
                                    customJObj.put("filedid", params.getId());
                                    customJObj.put("refcolumn_name", "Col" + params.getRefcolnum());
                                    customJObj.put("fieldname", "Custom_" + params.getFieldlabel());
                                    customJObj.put("xtype", params.getFieldtype());

                                    String fieldComboDataStr = "";
                                    if (params.getFieldtype() == 3) { // if field of date type
                                        String dateStr = recarr[jSONObject.getInt("csvindex")].replaceAll("\"", "").trim();
                                        customJObj.put("Col" + params.getColnum(), df.parse(dateStr).getTime());
                                        customJObj.put("fieldDataVal", df.parse(dateStr).getTime());
                                    } else if (params.getFieldtype() == 4 || params.getFieldtype() == 7) { // if field of MultiSelect Drop Down OR Drop Down
                                        String[] fieldComboDataArr = recarr[jSONObject.getInt("csvindex")].replaceAll("\"", "").trim().split(";");

                                        for (int dataArrIndex = 0; dataArrIndex < fieldComboDataArr.length; dataArrIndex++) {
                                            requestParams = new HashMap<String, Object>();
                                            requestParams.put(Constants.filter_names, Arrays.asList(Constants.Acc_custom_fieldId, "value", "deleteflag"));
                                            requestParams.put(Constants.filter_values, Arrays.asList(params.getId(), fieldComboDataArr[dataArrIndex], 0));

                                            fieldParamsResult = accCommonTablesDAO.getCustomCombodata(requestParams);
                                            if (fieldParamsResult != null && !fieldParamsResult.getEntityList().isEmpty()) {
                                                FieldComboData fieldComboData = (FieldComboData) fieldParamsResult.getEntityList().get(0);
                                                fieldComboDataStr += fieldComboData.getId() + ",";
                                            }
                                        }

                                        if (!StringUtil.isNullOrEmpty(fieldComboDataStr)) {
                                            customJObj.put("Col" + params.getColnum(), fieldComboDataStr.substring(0, fieldComboDataStr.length() - 1));
                                            customJObj.put("fieldDataVal", fieldComboDataStr.substring(0, fieldComboDataStr.length() - 1));
                                        } else {
                                            continue;
                                        }
                                    } else if (params.getFieldtype() == 11) { // if field of check box type 
                                        customJObj.put("Col" + params.getColnum(), Boolean.parseBoolean(recarr[jSONObject.getInt("csvindex")].replaceAll("\"", "").trim()));
                                        customJObj.put("fieldDataVal", Boolean.parseBoolean(recarr[jSONObject.getInt("csvindex")].replaceAll("\"", "").trim()));
                                    } else if (params.getFieldtype() == 12) { // if field of check list type
                                        requestParams = new HashMap<String, Object>();
                                        requestParams.put(Constants.filter_names, Arrays.asList(Constants.Acc_custom_fieldId, "deleteflag"));
                                        requestParams.put(Constants.filter_values, Arrays.asList(params.getId(), 0));

                                        fieldParamsResult = accCommonTablesDAO.getCustomCombodata(requestParams);
                                        List<FieldComboData> fieldComboDataList = fieldParamsResult.getEntityList();

                                        String[] fieldComboDataArr = recarr[jSONObject.getInt("csvindex")].replaceAll("\"", "").trim().split(";");

                                        int dataArrIndex = 0;

                                        for (FieldComboData fieldComboData : fieldComboDataList) {
                                            if (fieldComboDataArr.length > dataArrIndex && fieldComboDataArr[dataArrIndex] != null && fieldComboDataArr[dataArrIndex].replaceAll("\"", "").trim().equalsIgnoreCase("true")) {
                                                fieldComboDataStr += fieldComboData.getId() + ",";
                                            }
                                            dataArrIndex++;
                                        }

                                        if (!StringUtil.isNullOrEmpty(fieldComboDataStr)) {
                                            customJObj.put("Col" + params.getColnum(), fieldComboDataStr.substring(0, fieldComboDataStr.length() - 1));
                                            customJObj.put("fieldDataVal", fieldComboDataStr.substring(0, fieldComboDataStr.length() - 1));
                                        } else {
                                            continue;
                                        }
                                    } else {
                                        customJObj.put("Col" + params.getColnum(), recarr[jSONObject.getInt("csvindex")].replaceAll("\"", "").trim());
                                        customJObj.put("fieldDataVal", recarr[jSONObject.getInt("csvindex")].replaceAll("\"", "").trim());
                                    }

                                    customJObj.put("Custom_" + params.getFieldlabel(), "Col" + params.getColnum());

                                    lineCustomJArr.put(customJObj);
                                }
                            }
                        }
                        assetDetailObj.put("customfield", lineCustomJArr.toString());
                        assetDetails.put(assetDetailObj);
                        assetBatchDetails = new JSONArray();
                        assetSerialDetails = new JSONArray();
                    } catch (Exception ex) {
                        isRecordFailed = true;
                        String errorMsg = ex.getMessage(), invalidColumns = "";
                        try {
                            JSONObject errorLog = new JSONObject(errorMsg);
                            errorMsg = errorLog.getString("errorMsg");
                            invalidColumns = errorLog.getString("invalidColumns");
                        } catch (JSONException jex) {
                        }
                        
                        if (!failureList.contains(documentNo)) {
                            if (singleFailureRecordCount > 0) {
                                failedRecords.append(singleFailedRecords);
                                singleFailedRecords = new StringBuilder();
                            }
                            prevDocumentNo = documentNo;
                            failureList.add(documentNo);
                        }
                        singleFailureRecordCount++;
                        singleFailedRecords.append("\n").append(createCSVrecord(recarr)).append("\"").append(errorMsg.replaceAll("\"", "")).append("\"");
                    }
                    if (!isRecordFailed) {
                        singleFailureRecordCount++;
                        singleFailedRecords.append("\n").append(createCSVrecord(recarr)).append("\"").append(" ").append("\"");
                    }
                    total++;
                }
                cnt++;
            }

            // save Asset Opening Document For the last record
            if (!isAlreadyExist && assetDetails.length() > 0 && !isRecordFailed) {
                try {
                    double totalCost = 0;
                    double documentRate = openingDocumentDataMap.get("rate") != null ? (Double) openingDocumentDataMap.get("rate") : 0;
                    documentRate = authHandler.round(documentRate, companyid);
                    if(openingDocumentDataMap.containsKey("quantity") && openingDocumentDataMap.get("quantity") != null){
                        qty=(Double)openingDocumentDataMap.get("quantity");
                    }
                    for (int assetDetailCnt = 0; assetDetailCnt < assetDetails.length(); assetDetailCnt++) {
                        JSONObject AssetDetailObj = assetDetails.getJSONObject(assetDetailCnt);
                        if (AssetDetailObj.has("cost")) {
                            totalCost += authHandler.round(AssetDetailObj.getDouble("cost"), companyid);
                        }
                    }
                    totalCost = authHandler.round(totalCost, companyid);
                    if (totalCost == documentRate && qty==assetDetails.length()) {
                        if (!updateExistingRecordFlag || newProductAddinUpdateCase) {
                            saveAssetOpenings(request, openingDocumentDataMap, assetDetails);
                        }else{
                            updateAssetOpenings(request, openingDocumentDataMap, assetDetails);
                        }
                    } else {
                        throw new AccountingException("Either Document Rate is not matched with the Assets Cost or Document Quantity is not matched with the Assets Quantity. ");
                    }
                } catch (Exception ex) {
                    String errorMsg = ex.getMessage();
                    isRecordFailed = true;
                    if (ex.getMessage() != null) {
                        errorMsg = ex.getMessage();
                    } else if (ex.getCause() != null) {
                        errorMsg = ex.getCause().getMessage();
                    }
                    singleFailedRecords.append(errorMsg.replaceAll("\"", "")).append("\"");
                }
            }
            
            if (isRecordFailed) {// only if last Document is failed
                failed += singleFailureRecordCount; // last interation failure record
                if (singleFailureRecordCount > 0) {
                    failedRecords.append(singleFailedRecords);
                }
            }

            if (failed > 0) {
                accProductModuleService.createFailureFiles(fileName, failedRecords, ".csv");
            }
            int success = total - failed;
            if (total == 0) {
                msg = messageSource.getMessage("acc.field.Emptyfile", null, RequestContextUtils.getLocale(request));
            } else if (success == 0) {
                msg = messageSource.getMessage("acc.rem.169", null, RequestContextUtils.getLocale(request));
            } else if (success == total) {
                msg = messageSource.getMessage("acc.rem.168", null, RequestContextUtils.getLocale(request));
            } else {
                msg = messageSource.getMessage("acc.field.Imported", null, RequestContextUtils.getLocale(request))+ " " + success + " "+ messageSource.getMessage("acc.field.record", null, RequestContextUtils.getLocale(request)) + (success > 1 ? "s" : "") + " "+messageSource.getMessage("acc.field.successfully.", null, RequestContextUtils.getLocale(request));
                msg += (failed == 0 ? "." : " "+messageSource.getMessage("acc.field.andfailedtoimport", null, RequestContextUtils.getLocale(request))+ " " + failed + " "+ messageSource.getMessage("acc.field.record", null, RequestContextUtils.getLocale(request)) + (failed > 1 ? "s" : "") + ".");
            }

            try {
                txnManager.commit(status);
            } catch (Exception ex) {
                commitedEx = true;
                throw ex;
            }
        } catch (Exception ex) {
            if (!commitedEx) { // if exception occurs during commit then dont call rollback
                txnManager.rollback(status);
            }
            issuccess = false;
            msg = "" + ex.getMessage();

            Logger.getLogger(accProductControllerCMN.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
            throw new AccountingException("Error While Importing Records.");
        } finally {
            fileInputStream.close();
            csvReader.close();

            DefaultTransactionDefinition ldef = new DefaultTransactionDefinition();
            ldef.setName("import_Tx");
            ldef.setPropagationBehavior(TransactionDefinition.PROPAGATION_REQUIRED);
            TransactionStatus lstatus = txnManager.getTransaction(ldef);

            try {
                // Insert Integration log
                HashMap<String, Object> logDataMap = new HashMap<String, Object>();
                logDataMap.put("FileName", getActualFileName(fileName));
                logDataMap.put("StorageName", fileName);
                logDataMap.put("Log", msg);
                logDataMap.put("Type", "csv");
                logDataMap.put("FailureFileType", failed>0?"csv":"");
                logDataMap.put("TotalRecs", total);
                logDataMap.put("Rejected", failed);
                logDataMap.put("Module", 121);
                logDataMap.put("ImportDate", new Date());
                logDataMap.put("User", userId);
                logDataMap.put("Company", companyid);
                importDao.saveImportLog(logDataMap);

                String tableName = importDao.getTableName(fileName);
                importDao.removeFileTable(tableName); // Remove table after importing all records
                txnManager.commit(lstatus);
            } catch (Exception ex) {
                txnManager.rollback(lstatus);
                Logger.getLogger(accProductControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
            }
            try {
                returnObj.put("success", issuccess);
                returnObj.put("msg", msg);
                returnObj.put("totalrecords", total);
                returnObj.put("successrecords", total - failed);
                returnObj.put("failedrecords", failed);
                returnObj.put("filename", getActualFileName(fileName));
            } catch (JSONException ex) {
                Logger.getLogger(accProductControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return returnObj;
    }

    public String createCSVrecord(Object[] listArray) {
        String rec = "";
        for (int i = 0; i < listArray.length; i++) { // Discard columns id at index 0 and isvalid,invalidColumns, validationlog at last 3 indexes.
            rec += "\"" + (listArray[i] == null ? "" : listArray[i].toString().replaceAll("\"", "")) + "\",";
        }
        return rec;
    }

    private Product getFixedAssetGroup(String accountCode, String companyID, boolean isByAccountName) throws AccountingException {
        Product product = null;
        try {
            if (!StringUtil.isNullOrEmpty(accountCode) && !StringUtil.isNullOrEmpty(companyID)) {
                HashMap<String, Object> requestParams = new HashMap<String, Object>();
                requestParams.put("companyid", companyID);
                requestParams.put("isForAsset", true);
                if (isByAccountName) {
                    requestParams.put("productName", accountCode);
                } else {
                    requestParams.put("productIDText", accountCode);
                }
                KwlReturnObject retObj = accProductObj.getProductByName(requestParams);
                if (retObj != null && !retObj.getEntityList().isEmpty()) {
                    product = (Product) retObj.getEntityList().get(0);
                }
            }
        } catch (Exception ex) {
            Logger.getLogger(accProductControllerCMN.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
            throw new AccountingException("System Failure while fetching Fixed Asset Group");
        }
        return product;
    }

    private Department getDepartment(String deptName, String companyID) throws AccountingException {
        Department dept = null;
        try {
            if (!StringUtil.isNullOrEmpty(deptName) && !StringUtil.isNullOrEmpty(companyID)) {
                HashMap<String, Object> requestParams = new HashMap<String, Object>();
                ArrayList filter_names = new ArrayList(), filter_params = new ArrayList();
                filter_names.add("company.companyID");
                filter_params.add(companyID);
                filter_names.add("name");
                filter_params.add(deptName);

                requestParams.put("filter_names", filter_names);
                requestParams.put("filter_params", filter_params);

                KwlReturnObject retObj = accProductObj.getDepartment(requestParams);
                if (retObj != null && !retObj.getEntityList().isEmpty()) {
                    dept = (Department) retObj.getEntityList().get(0);
                }
            }
        } catch (Exception ex) {
            Logger.getLogger(accProductControllerCMN.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
            throw new AccountingException("System Failure while fetching Depament");
        }
        return dept;
    }

    private InventoryWarehouse getInventoryWarehouse(String warehouseName, String companyID) throws AccountingException {
        InventoryWarehouse warehouse = null;
        try {
            if (!StringUtil.isNullOrEmpty(warehouseName) && !StringUtil.isNullOrEmpty(companyID)) {
                KwlReturnObject retObj = accProductObj.getInventoryWarehouseByName(warehouseName, companyID);
                if (retObj != null && !retObj.getEntityList().isEmpty()) {
                    warehouse = (InventoryWarehouse) retObj.getEntityList().get(0);
                }
            }
        } catch (Exception ex) {
            Logger.getLogger(accProductControllerCMN.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
            throw new AccountingException("System Failure while fetching Warehouse");
        }
        return warehouse;
    }

    private InventoryLocation getInventoryLocation(String locName, String companyID) throws AccountingException {
        InventoryLocation location = null;
        try {
            if (!StringUtil.isNullOrEmpty(locName) && !StringUtil.isNullOrEmpty(companyID)) {
                KwlReturnObject retObj = accProductObj.getInventoryLocationByName(locName, companyID);
                if (retObj != null && !retObj.getEntityList().isEmpty()) {
                    location = (InventoryLocation) retObj.getEntityList().get(0);
                }
            }
        } catch (Exception ex) {
            Logger.getLogger(accProductControllerCMN.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
            throw new AccountingException("System Failure while fetching Location");
        }
        return location;
    }

    private User getUser(String userName, String companyID) throws AccountingException {
        User user = null;
        try {
            if (!StringUtil.isNullOrEmpty(userName) && !StringUtil.isNullOrEmpty(companyID)) {
                HashMap<String, Object> requestParams = new HashMap<String, Object>();
                ArrayList filter_names = new ArrayList(), filter_params = new ArrayList();
                filter_names.add("company.companyID");
                filter_params.add(companyID);
                filter_names.add("firstName");
                filter_params.add(userName);

                requestParams.put("filter_names", filter_names);
                requestParams.put("filter_params", filter_params);

                KwlReturnObject retObj = accProductObj.getUser(requestParams);
                if (retObj != null && !retObj.getEntityList().isEmpty()) {
                    user = (User) retObj.getEntityList().get(0);
                }
            }
        } catch (Exception ex) {
            Logger.getLogger(accProductControllerCMN.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
            throw new AccountingException("System Failure while fetching User");
        }
        return user;
    }

    private StoreMaster getRowRackBin(String rowRackBin, String companyID) throws AccountingException {
        StoreMaster sm = null;
        try {
            if (!StringUtil.isNullOrEmpty(rowRackBin) && !StringUtil.isNullOrEmpty(companyID)) {
                HashMap<String, Object> requestParams = new HashMap<String, Object>();
                ArrayList filter_names = new ArrayList(), filter_params = new ArrayList();
                filter_names.add("company.companyID");
                filter_params.add(companyID);
                filter_names.add("name");
                filter_params.add(rowRackBin);

                requestParams.put("filter_names", filter_names);
                requestParams.put("filter_params", filter_params);

                KwlReturnObject retObj = accProductObj.getRowRackBin(requestParams);
                if (retObj != null && !retObj.getEntityList().isEmpty()) {
                    sm = (StoreMaster) retObj.getEntityList().get(0);
                }
            }
        } catch (Exception ex) {
            Logger.getLogger(accProductControllerCMN.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
            throw new AccountingException("System Failure while fetching Row or Rack or Bin");
        }
        return sm;
    }

    private void saveAssetOpenings(HttpServletRequest request, HashMap<String, Object> openingDocumentDataMap, JSONArray assetDetails) throws SessionExpiredException, AccountingException, UnsupportedEncodingException,ParseException, JSONException {
        FixedAssetOpening assetOpening = null;
        try {
            String companyId = sessionHandlerImpl.getCompanyid(request);
            String productId = (String) openingDocumentDataMap.get("assetgroupid");
            String documentNumber = (String) openingDocumentDataMap.get("documentNo");
            double quantity = (Double) openingDocumentDataMap.get("quantity");
            double rate = (Double) openingDocumentDataMap.get("rate");
//            DateFormat df = authHandler.getDateOnlyFormat(request);
            String dateFormatId = request.getParameter("dateFormat");
            String dateFormat = null;
            if (!StringUtil.isNullOrEmpty(dateFormatId)) {
                KwlReturnObject kdfObj = accountingHandlerDAOobj.getObject(KWLDateFormat.class.getName(), dateFormatId);
                KWLDateFormat kdf = (KWLDateFormat) kdfObj.getEntityList().get(0);
                dateFormat = kdf != null ? kdf.getJavaForm() : null;
            }
            DateFormat df = new SimpleDateFormat(dateFormat);
            Date creationDate = (Date)openingDocumentDataMap.get("date");
            Date newUserDate = new Date();
            KwlReturnObject custumObjresult = accountingHandlerDAOobj.getObject(Company.class.getName(), companyId);
            Company company = (Company) custumObjresult.getEntityList().get(0);
            if (company.getCreator() != null) {
               newUserDate = authHandler.getUserNewDate(null, company.getCreator().getTimeZone()!=null?company.getCreator().getTimeZone().getDifference() : company.getTimeZone().getDifference());
            }
            Map<String, Object> filterParams = new HashMap<String, Object>();
            filterParams.put("id", companyId);
            KwlReturnObject extraresult = accCompanyPreferencesObj.getExtraCompanyPreferences(filterParams);
            ExtraCompanyPreferences extra = null;
            if (extraresult.getEntityList().size() > 0) {
                extra = (ExtraCompanyPreferences) extraresult.getEntityList().get(0);
            }

            HashMap<String, Object> dataMap = new HashMap<String, Object>();
            dataMap.put("companyId", companyId);
            dataMap.put("productId", productId);
            dataMap.put("creationDate", creationDate);
            dataMap.put("documentNumber", documentNumber);
            dataMap.put("quantity", quantity);
            dataMap.put("rate", rate);
            dataMap.put("newUserDate", newUserDate);
            dataMap.put("df",df);

            // update Inventory First then save it in fixedassetopening table.
            Inventory inventory = updateOpeningInventory(dataMap);
            dataMap.put("inventory", inventory.getID());

            //Save Opening Asset Document Details
            KwlReturnObject invresult = accProductObj.addAssetOpening(dataMap);
            assetOpening = (FixedAssetOpening) invresult.getEntityList().get(0);

            // saving Asset Detail For this assetOpening

            dataMap.put("assetDetails",assetDetails);
            Set<AssetDetails> assetDetailsSet = saveAssetDetails(dataMap);

            saveAssetOpeningMapping(assetOpening, assetDetailsSet, companyId);

//            if (extra.isAllowToPostOpeningDepreciation()) {
//                saveAssetOpeningDepreciation(request, assetDetailsSet, companyId);
//            }
        } catch (ServiceException ex) {
            Logger.getLogger(accProductController.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
        } catch (Exception ex) {
            Logger.getLogger(accProductController.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
        }
    }
    
    private void updateAssetOpenings(HttpServletRequest request, HashMap<String, Object> openingDocumentDataMap, JSONArray assetDetails) throws SessionExpiredException, AccountingException, UnsupportedEncodingException, ParseException, JSONException {
        FixedAssetOpening assetOpening = null;
        try {
            String companyId = sessionHandlerImpl.getCompanyid(request);
            String productId = (String) openingDocumentDataMap.get("assetgroupid");
            String documentNumber = (String) openingDocumentDataMap.get("documentNo");
            double quantity = (Double) openingDocumentDataMap.get("quantity");
            double rate = (Double) openingDocumentDataMap.get("rate");
            boolean updateExistingRecordFlag=false;
//            DateFormat df = authHandler.getDateFormatter(request);
            if(openingDocumentDataMap.containsKey("updateExistingRecordFlag") && openingDocumentDataMap.get("updateExistingRecordFlag")!=null){
                updateExistingRecordFlag=(Boolean)openingDocumentDataMap.get("updateExistingRecordFlag");
            }
            String dateFormatId = request.getParameter("dateFormat");
            String dateFormat = null;
            if (!StringUtil.isNullOrEmpty(dateFormatId)) {
                KwlReturnObject kdfObj = accountingHandlerDAOobj.getObject(KWLDateFormat.class.getName(), dateFormatId);
                KWLDateFormat kdf = (KWLDateFormat) kdfObj.getEntityList().get(0);
                dateFormat = kdf != null ? kdf.getJavaForm() : null;
            }
            DateFormat df = new SimpleDateFormat(dateFormat);
            Date creationDate = (Date) openingDocumentDataMap.get("date");
            Date newUserDate = new Date();
            KwlReturnObject custumObjresult = accountingHandlerDAOobj.getObject(Company.class.getName(), companyId);
            Company company = (Company) custumObjresult.getEntityList().get(0);
            if (company.getCreator() != null) {
               newUserDate = authHandler.getUserNewDate(null, company.getCreator().getTimeZone()!=null?company.getCreator().getTimeZone().getDifference() : company.getTimeZone().getDifference());
            }
            Map<String, Object> filterParams = new HashMap<String, Object>();
            filterParams.put("id", companyId);
            KwlReturnObject extraresult = accCompanyPreferencesObj.getExtraCompanyPreferences(filterParams);
            ExtraCompanyPreferences extra = null;
            if (extraresult.getEntityList().size() > 0) {
                extra = (ExtraCompanyPreferences) extraresult.getEntityList().get(0);
            }

            String documentId = request.getParameter("documentId");
            KwlReturnObject aocnt = accProductObj.getAssetOpeningsEditCount(documentNumber, companyId, documentId);
            if (aocnt.getRecordTotalCount() > 0) {
                throw new AccountingException("Document number '" + documentNumber + "' already exists.");
            }

            HashMap<String, Object> requestParams = new HashMap<String, Object>();
            requestParams.put("companyId", companyId);
            requestParams.put("documentNumber", documentNumber);
            KwlReturnObject result2 = accProductObj.getAssetOpenings(requestParams);
            List<FixedAssetOpening> list = result2.getEntityList();

            FixedAssetOpening fao = (FixedAssetOpening) list.get(0);
            accProductObj.deleteInventory(fao.getInventory().getID(), companyId);
            documentId = fao.getId();
            requestParams.put("documentid", documentId);
            KwlReturnObject result1 = accProductObj.getAssetDetail(requestParams);
            List list1 = result1.getEntityList();
            Iterator it1 = list1.iterator();
            while (it1.hasNext()) {
                String assetDetailId = (String) it1.next();
                AssetDetails ad = (AssetDetails) kwlCommonTablesDAOObj.getClassObject(AssetDetails.class.getName(), assetDetailId);
                requestParams.put("productid", ad.getId());
                accProductObj.deleteProductBatchSerialDetails(requestParams);
            }

            requestParams.put("companyId", companyId);
            requestParams.put("documentId", documentId);
            boolean isOpeningDocumentHasSoldORDepreciatedAsset = false;
            boolean isDocumentHasDepreciatedAsset = false;
            boolean isDocumentHasSoldAsset = false;

            KwlReturnObject depreciatedAssetRetObject = accProductObj.getDepreciatedAssetsOfOpeningDocuments(requestParams);
            if (depreciatedAssetRetObject.getRecordTotalCount() > 0) {
                isDocumentHasDepreciatedAsset = true;
            }

            KwlReturnObject soldAssetRetObject = accProductObj.getSoldAssetsOfOpeningDocuments(requestParams);
            if (soldAssetRetObject.getRecordTotalCount() > 0) {
                isDocumentHasSoldAsset = true;
            }

            if (isDocumentHasDepreciatedAsset || isDocumentHasSoldAsset) {
                isOpeningDocumentHasSoldORDepreciatedAsset = true;
            }
            if (isOpeningDocumentHasSoldORDepreciatedAsset) {
                throw new AccountingException("Selected Asset has been depreciated or sold, So cannot be edited.");
            }

            accProductObj.deleteAssetDetailsLinkedWithOpeningDocuments(requestParams);

            HashMap<String, Object> dataMap = new HashMap<String, Object>();
            
            dataMap.put("companyId", companyId);
            dataMap.put("productId", productId);
            dataMap.put("creationDate", creationDate);
            dataMap.put("documentNumber", documentNumber);
            dataMap.put("quantity", quantity);
            dataMap.put("rate", rate);
            dataMap.put("newUserDate", newUserDate);
            dataMap.put("df", df);
            dataMap.put("updateExistingRecordFlag", updateExistingRecordFlag);

            // update Inventory First then save it in fixedassetopening table.
            Inventory inventory = updateOpeningInventory(dataMap);
            dataMap.put("inventory", inventory.getID());

            //Save Opening Asset Document Details
            KwlReturnObject invresult = accProductObj.addAssetOpening(dataMap);
            assetOpening = (FixedAssetOpening) invresult.getEntityList().get(0);

            // saving Asset Detail For this assetOpening

            dataMap.put("assetDetails", assetDetails);
            Set<AssetDetails> assetDetailsSet = saveAssetDetails(dataMap);

            saveAssetOpeningMapping(assetOpening, assetDetailsSet, companyId);

//            if (extra.isAllowToPostOpeningDepreciation()) {
//                saveAssetOpeningDepreciation(request, assetDetailsSet, companyId);
//            }
        } catch (ServiceException ex) {
            Logger.getLogger(accProductController.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
        } catch (Exception ex) {
            Logger.getLogger(accProductController.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
        }
    }
        
    public void saveAssetOpeningDepreciation(HttpServletRequest request, Set<AssetDetails> assetDetailsSet, String companyId)
            throws AccountingException, JSONException, SessionExpiredException, UnsupportedEncodingException {
        try {
            double openingBalance = 0.00;
            int depreciationCalculationType = 0;
            Date finanDate = null;
            Map<String, Object> filterParams = new HashMap<String, Object>();
            filterParams.put("id", companyId);
            KwlReturnObject kresult = accCompanyPreferencesObj.getCompanyPreferences(filterParams);
            CompanyAccountPreferences preferences = null;
            if (kresult.getEntityList().size() > 0) {
                preferences = (CompanyAccountPreferences) kresult.getEntityList().get(0);
            }
            KwlReturnObject extraresult = accCompanyPreferencesObj.getExtraCompanyPreferences(filterParams);
            ExtraCompanyPreferences extra = null;
            if (extraresult.getEntityList().size() > 0) {
                extra = (ExtraCompanyPreferences) extraresult.getEntityList().get(0);
            }
            if (extra != null) {
                depreciationCalculationType = extra.getAssetDepreciationCalculationType();
            }
            if (preferences != null && preferences.getFinancialYearFrom() != null) {
                finanDate = preferences.getFirstFinancialYearFrom() != null ? preferences.getFirstFinancialYearFrom() : preferences.getFinancialYearFrom();
            }

            for (AssetDetails assetDetails : assetDetailsSet) {
                if (assetDetails.getInstallationDate().before(finanDate)) {
                    String backyears = "";
                    Calendar cal1 = Calendar.getInstance();
                    cal1.setTime(finanDate);
                    cal1.add(Calendar.DATE, -1);
                    int currentyear = cal1.get(Calendar.YEAR);
                    Calendar cal2 = Calendar.getInstance();
                    cal2.setTime(assetDetails.getInstallationDate());
                    int creationyear1 = cal2.get(Calendar.YEAR);

                    while (creationyear1 <= currentyear) {
                        backyears += creationyear1 + ",";
                        creationyear1++;
                    }

                    JSONArray curfinalJArr = new JSONArray();
                    HashMap<String, Object> fieldrequestParams = new HashMap();
                    fieldrequestParams.put("startMonth", assetDetails.getInstallationDate().getMonth());
                    fieldrequestParams.put("endMonth", cal1.getTime().getMonth());
                    fieldrequestParams.put("assetdetailIds", assetDetails.getId());
                    fieldrequestParams.put("years", backyears);
                    fieldrequestParams.put("companyid", sessionHandlerImpl.getCompanyid(request));
                    fieldrequestParams.put("depreciationCalculationType", depreciationCalculationType);

                    curfinalJArr = accAssetService.getAssetDepreciation(fieldrequestParams);

                    for (int i = 0; i < curfinalJArr.length(); i++) {
                        JSONObject newjobj = curfinalJArr.getJSONObject(i);
                        if (newjobj.has("firstperiodamtInBase")) {
                            openingBalance += newjobj.getDouble("firstperiodamtInBase");
                        }
                    }

                    if (curfinalJArr.length() > 0) {
                        for (int i = 0; i < curfinalJArr.length(); i++) {
                            JSONObject jobj = curfinalJArr.getJSONObject(i);
                            double perioddepreciation = Double.parseDouble(StringUtil.DecodeText(jobj.optString("perioddepreciation")));
                            HashMap<String, Object> ddMap = new HashMap<String, Object>();
                            ddMap.put("depreciationCreditToAccountId", (assetDetails.getProduct().getDepreciationProvisionGLAccount() != null) ? assetDetails.getProduct().getDepreciationProvisionGLAccount().getID() : assetDetails.getProduct().getPurchaseAccount().getID());// this is containing value of Asset Controlling Account.
                            ddMap.put("depreciationGLAccountId", assetDetails.getProduct().getDepreciationGLAccount().getID());
                            ddMap.put("productId", assetDetails.getProduct().getID());
                            ddMap.put("assetId", assetDetails.getId());
                            ddMap.put("period", Integer.parseInt(StringUtil.DecodeText(jobj.optString("period"))));
                            ddMap.put("companyid", companyId);
                            ddMap.put("jeid", null);
                            ddMap.put("periodamount", perioddepreciation);
                            ddMap.put("accamount", jobj.optDouble("accdepreciation", 0));
                            ddMap.put("netbookvalue", jobj.optDouble("netbookvalue", 0));
                            // add depreciation detail
                            accProductObj.addDepreciationDetail(ddMap);
                        }
                    }
                    assetDetails.setOpeningDepreciation(openingBalance);
                }
            }
        } catch (ServiceException ex) {
            Logger.getLogger(accProductController.class.getName()).log(Level.SEVERE, null, ex);
            throw new AccountingException("Error while processing data.");
        }
    }
    
    private Inventory updateOpeningInventory(HashMap<String, Object> request) throws SessionExpiredException, AccountingException {
        Inventory inventory = null;
        try {
            String companyId = (String) request.get("companyId");
            String productId = (String) request.get("productId");
            double quantity = (Double)request.get("quantity");
            Product product = (Product) kwlCommonTablesDAOObj.getClassObject(Product.class.getName(), productId);
            DateFormat df = (DateFormat)request.get("df");
            Date appDate = (Date)request.get("newUserDate");

            JSONObject inventoryjson = new JSONObject();
            inventoryjson.put("productid", product.getID());
            inventoryjson.put("quantity", quantity);
            inventoryjson.put("baseuomquantity", quantity);
            inventoryjson.put("baseuomrate", 1);
            if (product.getUnitOfMeasure() != null) {
                inventoryjson.put("uomid", product.getUnitOfMeasure().getID());
            }
            inventoryjson.put("description", "Inventory Opened");
            inventoryjson.put("carryin", true);
            inventoryjson.put("defective", false);
            inventoryjson.put("newinventory", true);
            inventoryjson.put("companyid", companyId);
            inventoryjson.put("updatedate", appDate);
            inventoryjson.put("invrecord", true);
            inventoryjson.put("isOpeningInventory", true);
            KwlReturnObject invresult = accProductObj.addInventory(inventoryjson);
            inventory = (Inventory) invresult.getEntityList().get(0);
        } catch (ServiceException ex) {
            Logger.getLogger(accProductController.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
            throw new AccountingException("Error while saving opening document.");
        } catch (JSONException ex) {
            Logger.getLogger(accProductController.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
            throw new AccountingException("Error while saving opening document.");
        }
        return inventory;
    } 

    public void saveAssetOpeningMapping(FixedAssetOpening assetOpening, Set<AssetDetails> assetDetailsSet, String companyId) throws AccountingException {
        try {
            for (AssetDetails assetDetails : assetDetailsSet) {
                HashMap<String, Object> dataMap = new HashMap<String, Object>();
                dataMap.put("assetOpening", assetOpening.getId());
                dataMap.put("assetDetails", assetDetails.getId());
                dataMap.put("company", companyId);
                accProductObj.saveAssetOpeningMapping(dataMap);
            }
        } catch (ServiceException ex) {
            Logger.getLogger(accProductController.class.getName()).log(Level.SEVERE, null, ex);
            throw new AccountingException("Error while processing data.");
        }
    }

    private Set<AssetDetails> saveAssetDetails(HashMap<String, Object> requestMap) throws SessionExpiredException, AccountingException, UnsupportedEncodingException {
        Set<AssetDetails> assetDetailsSet = new HashSet<AssetDetails>();
        try {
            String product = (String) requestMap.get("productId");
            JSONArray jArr = (JSONArray) requestMap.get("assetDetails");
            String companyId = (String) requestMap.get("companyId");
            DateFormat df = (DateFormat) requestMap.get("df");

            HashMap<String, Object> assetParams = new HashMap<String, Object>();
            assetParams.put("companyId", companyId);

            KwlReturnObject assetResult = accProductObj.getAssetDetails(assetParams);
            assetParams.put("df", df);
            boolean updateExistingRecordFlag = false;
            if (requestMap.containsKey("updateExistingRecordFlag") && requestMap.get("updateExistingRecordFlag") != null) {
                updateExistingRecordFlag = (Boolean) requestMap.get("updateExistingRecordFlag");
            }
            List<AssetDetails> assetList = assetResult.getEntityList();
            List<String> assetNameList = new ArrayList<String>();

            for (AssetDetails ad:assetList) {
                assetNameList.add(ad.getAssetId().toLowerCase());
            }

            for (int i = 0; i < jArr.length(); i++) {                               
                JSONObject jobj = jArr.getJSONObject(i);
                String assetId =StringUtil.DecodeText(jobj.optString("assetid"));
                String assetdescription = StringUtil.DecodeText(jobj.optString("desc"));
                String location = jobj.optString("location");
                String department = jobj.optString("department");
                String assetUser = jobj.optString("userName");
                JSONArray batchDetails = jobj.getJSONArray("batchDeatils");

                double cost = jobj.getDouble("cost");
                double salvageRate = jobj.optDouble("salvageRate", 0);
                double salvageValue = jobj.optDouble("salvageValue", 0);
                double accumulatedDepreciation = jobj.optDouble("accumulatedDepreciation", 0);
                double assetLife = jobj.optDouble("assetLife", 0);
                double elapsedLife = jobj.optDouble("elapsedLife", 0);
                double nominalValue = jobj.optDouble("nominalValue", 0);
                double sellAmount = jobj.optDouble("sellAmount", 0);

                Date installationDate = (Date)jobj.opt("installationDate");
                Date purchaseDate = (Date)jobj.opt("purchaseDate");

                // Check Whether asset of this name exist or not in case of GRO -

                if (assetNameList.contains(assetId.toLowerCase()) && !updateExistingRecordFlag) {
                    throw new AccountingException("Asset Id <b>" + assetId + "</b> is already generated through Fixed Asset Opening/Fixed Asset Goods Receipt/Fixed Asset Purchase Invoice.");
                }

                HashMap<String, Object> dataMap = new HashMap<String, Object>();

                dataMap.put("assetId", assetId);
                dataMap.put("assetdescription", assetdescription);
                dataMap.put("location", location);
                dataMap.put("department", department);
                dataMap.put("assetUser", assetUser);
                dataMap.put("cost", cost);
                dataMap.put("salvageRate", salvageRate);
                dataMap.put("salvageValue", salvageValue);
                dataMap.put("accumulatedDepreciation", accumulatedDepreciation);
                dataMap.put("assetLife", assetLife);
                dataMap.put("elapsedLife", elapsedLife);
                dataMap.put("nominalValue", nominalValue);
                dataMap.put("sellAmount", sellAmount);
                dataMap.put("productId", product);
                dataMap.put("isCreatedFromOpeningForm", true);
                dataMap.put("installationDate", installationDate);
                dataMap.put("purchaseDate",purchaseDate);
                dataMap.put("companyId", companyId);
                dataMap.put("invrecord", true);

                KwlReturnObject result = accProductObj.saveAssetDetails(dataMap);
                AssetDetails row = (AssetDetails) result.getEntityList().get(0);

                String assetMainId = row.getId();
                dataMap.put("assetDetailId", assetMainId);
                saveAssetNewBatch(batchDetails, product, assetParams, assetMainId);
                
                AssetDetails assetDetails = (AssetDetails) result.getEntityList().get(0);
                if (jobj.has("customfield")) {
                    String customfield = jobj.getString("customfield");
                    if (!StringUtil.isNullOrEmpty(customfield)) {
                        HashMap<String, Object> DOMap = new HashMap<String, Object>();
                        JSONArray jcustomarray = new JSONArray(customfield);
                        HashMap<String, Object> customrequestParams = new HashMap<String, Object>();
                        customrequestParams.put("customarray", jcustomarray);
                        customrequestParams.put("modulename", "AssetDetails");
                        customrequestParams.put("moduleprimarykey", "AssetDetailsId");
                        customrequestParams.put("modulerecid", row.getId());
                        customrequestParams.put("moduleid", Constants.Acc_FixedAssets_Details_ModuleId);
                        customrequestParams.put("companyid", companyId);
                        DOMap.put("id", row.getId());
                        customrequestParams.put("customdataclasspath", Constants.Acc_FixedAsset_Details_Custom_Data_classpath);
                        KwlReturnObject customDataresult = fieldDataManagercntrl.setCustomData(customrequestParams);
                        if (customDataresult != null && customDataresult.getEntityList().size() > 0) {
                            DOMap.put("accassetdetailscustomdata", row.getId());
                            accProductObj.updateAssetDetails(DOMap);
                        }
                    }
                }
                assetDetailsSet.add(assetDetails);
            }
        } catch (UnsupportedEncodingException ex) {
            Logger.getLogger(accProductController.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
            throw new AccountingException("Error While Processing Data");
        } catch (ServiceException ex) {
            Logger.getLogger(accProductController.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
            throw new AccountingException("Error While Processing Data");
        } catch (ParseException ex) {
            Logger.getLogger(accProductController.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
            throw new AccountingException("Error While Processing Data");
        } catch (JSONException ex) {
            Logger.getLogger(accProductController.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
            throw new AccountingException("Error While Processing Data");
        }
        return assetDetailsSet;
    }

    public void saveAssetNewBatch(JSONArray jArr, String productId, HashMap<String, Object> assetParams, String documentId) throws JSONException, ParseException, SessionExpiredException, ServiceException, UnsupportedEncodingException, AccountingException, AccountingException {
        KwlReturnObject kmsg = null;
        double ActbatchQty = 1;
        double batchQty = 0;
        boolean isLocationForProduct = false;
        boolean isWarehouseForProduct = false;
        boolean isBatchForProduct = false;
        boolean isSerialForProduct = false;
        boolean isRowForProduct = false;
        boolean isRackForProduct = false;
        boolean isBinForProduct = false;
        DateFormat df = (DateFormat) assetParams.get("df");
        String companyid = (String) assetParams.get("companyId");

        if (!StringUtil.isNullOrEmpty(productId)) {
            KwlReturnObject prodresult = accProductObj.getObject(Product.class.getName(), productId);
            Product product = (Product) prodresult.getEntityList().get(0);
            isLocationForProduct = product.isIslocationforproduct();
            isWarehouseForProduct = product.isIswarehouseforproduct();
            isBatchForProduct = product.isIsBatchForProduct();
            isSerialForProduct = product.isIsSerialForProduct();
            isRowForProduct = product.isIsrowforproduct();
            isRackForProduct = product.isIsrackforproduct();
            isBinForProduct = product.isIsbinforproduct();
        }
        NewProductBatch productBatch = null;
        String productBatchId = "";
        //Save Batch detail for both  option for serial no and batch also as if batch option is off then also we are generating batch in backend
        for (int i = 0; i < jArr.length(); i++) {          
            JSONObject jSONObject = new JSONObject(jArr.get(i).toString());
            if (jSONObject.has("assetQuantity") && !jSONObject.getString("assetQuantity").equals("undefined") && !jSONObject.getString("assetQuantity").isEmpty()) {
                ActbatchQty = jSONObject.getDouble("assetQuantity");
            }
            if (batchQty == 0) {
                batchQty = jSONObject.getDouble("assetQuantity");
            }
            if ((isLocationForProduct || isWarehouseForProduct || isBatchForProduct || isRowForProduct || isRackForProduct  || isBinForProduct ) && (batchQty == ActbatchQty)) {
                HashMap<String, Object> pdfTemplateMap = new HashMap<String, Object>();
                pdfTemplateMap.put("companyid", companyid);
                pdfTemplateMap.put("name",StringUtil.DecodeText(jSONObject.optString("batch")));
                if (jSONObject.has("mfgDate") && !StringUtil.isNullOrEmpty(jSONObject.getString("mfgDate"))) {
                    pdfTemplateMap.put("mfgdate", df.parse(jSONObject.getString("mfgDate")));
                }
                if (jSONObject.has("expDate") && !StringUtil.isNullOrEmpty(jSONObject.getString("expDate"))) {
                    pdfTemplateMap.put("expdate", df.parse(jSONObject.getString("expDate")));
                }
                pdfTemplateMap.put("quantity", jSONObject.getString("assetQuantity"));
                pdfTemplateMap.put("balance", jSONObject.optString("balance"));
                pdfTemplateMap.put("location", jSONObject.optString("location"));
                pdfTemplateMap.put("row", jSONObject.optString("row"));
                pdfTemplateMap.put("rack", jSONObject.optString("rack"));
                pdfTemplateMap.put("bin", jSONObject.optString("bin"));
                pdfTemplateMap.put("product", productId);
                pdfTemplateMap.put("warehouse", jSONObject.optString("warehouse"));
                pdfTemplateMap.put("isopening", true);
                pdfTemplateMap.put("transactiontype", "1");//This is product Type Tranction  
                pdfTemplateMap.put("ispurchase", true);
                kmsg = accCommonTablesDAO.saveNewBatchForProduct(pdfTemplateMap);

                if (kmsg != null && kmsg.getEntityList().size() != 0) {
                    productBatch = (NewProductBatch) kmsg.getEntityList().get(0);
                    productBatchId = productBatch.getId();
                }               
                HashMap<String, Object> documentMap = new HashMap<String, Object>();
                documentMap.put("quantity", jSONObject.optString("quantity"));
                documentMap.put("batchmapid", productBatchId);
                documentMap.put("documentid", documentId);
                documentMap.put("transactiontype", "1");//This is product Type Tranction  
                if (jSONObject.has("mfgdate") && !StringUtil.isNullOrEmpty(jSONObject.optString("mfgdate"))) {
                    documentMap.put("mfgdate", df.parse(jSONObject.optString("mfgdate")));
                }
                if (jSONObject.has("expdate") && !StringUtil.isNullOrEmpty(jSONObject.optString("expdate"))) {
                    documentMap.put("expdate", df.parse(jSONObject.optString("expdate")));
                }
                
                accCommonTablesDAO.saveBatchDocumentMapping(documentMap);
            }
            batchQty--;
                        
            if (isSerialForProduct) {  //if serial no option is on then only save the serial no details 
                HashMap<String, Object> pdfTemplateMap = new HashMap<String, Object>();
                pdfTemplateMap.put("id", jSONObject.optString("serialnoid"));                
                pdfTemplateMap.put("companyid",companyid);
                pdfTemplateMap.put("product", productId);
                pdfTemplateMap.put("name", StringUtil.DecodeText(jSONObject.optString("serialNo")));
                if (jSONObject.has("warrantyExpFromDate") && !StringUtil.isNullOrEmpty(jSONObject.optString("warrantyExpFromDate"))) {
                    pdfTemplateMap.put("expfromdate", df.parse(jSONObject.optString("warrantyExpFromDate")));
                }
                if (jSONObject.has("warrantyExpToDate") && !StringUtil.isNullOrEmpty(jSONObject.optString("warrantyExpToDate"))) {
                    pdfTemplateMap.put("exptodate", df.parse(jSONObject.optString("warrantyExpToDate")));
                }
                pdfTemplateMap.put("batch", productBatchId);
                pdfTemplateMap.put("transactiontype", "1");//This is product Type Tranction  
                pdfTemplateMap.put("quantity", "1");
                pdfTemplateMap.put("ispurchase", true);
                pdfTemplateMap.put("isopening", true);
                pdfTemplateMap.put("skuvalue",jSONObject.optString("skufield") );
                kmsg = accCommonTablesDAO.saveNewSerialForBatch(pdfTemplateMap);
                String serialDetailsId = "";
                if (kmsg != null && kmsg.getEntityList().size() != 0) {
                    NewBatchSerial serialDetails = (NewBatchSerial) kmsg.getEntityList().get(0);
                    serialDetailsId = serialDetails.getId();
                }
                
                HashMap<String, Object> documentMap = new HashMap<String, Object>();
                documentMap.put("quantity", 1);
                documentMap.put("serialmapid", serialDetailsId);
                documentMap.put("documentid", documentId);
                documentMap.put("transactiontype", "1");//This is product Type Tranction  
                 if (jSONObject.has("warrantyExpFromDate") && !StringUtil.isNullOrEmpty(jSONObject.optString("warrantyExpFromDate"))) {
                    documentMap.put("expfromdate", df.parse(jSONObject.optString("warrantyExpFromDate")));
                }
                if (jSONObject.has("warrantyExpToDate") && !StringUtil.isNullOrEmpty(jSONObject.optString("warrantyExpToDate"))) {
                    documentMap.put("exptodate", df.parse(jSONObject.optString("warrantyExpToDate")));
                }
                accCommonTablesDAO.saveSerialDocumentMapping(documentMap);
            }else{
               batchQty=0; 
            }
        }
    }
    
    public ModelAndView importProduct(HttpServletRequest request, HttpServletResponse response) throws ServiceException {
        JSONObject jobj = new JSONObject();
        String msg = "";
        boolean issuccess = false;
        String channelName="";
        try {
            String companyid = sessionHandlerImpl.getCompanyid(request);
            String eParams = request.getParameter("extraParams");
            boolean typeXLSFile = (request.getParameter("typeXLSFile") != null) ? Boolean.parseBoolean(request.getParameter("typeXLSFile")) : false;
            JSONObject extraParams = StringUtil.isNullOrEmpty(eParams) ? new JSONObject() : new JSONObject(eParams);
            extraParams.put("Company", companyid);
            String currencyId = sessionHandlerImpl.getCurrencyID(request);
            boolean updateExistingRecordFlag = false;
            if (!StringUtil.isNullOrEmpty(request.getParameter("updateExistingRecordFlag"))) {
                updateExistingRecordFlag = Boolean.FALSE.parseBoolean(request.getParameter("updateExistingRecordFlag"));
            }
            KwlReturnObject CompanyPrefResult = accountingHandlerDAOobj.getObject(CompanyAccountPreferences.class.getName(), companyid);
            CompanyAccountPreferences preferences = (CompanyAccountPreferences) CompanyPrefResult.getEntityList().get(0);
            ExtraCompanyPreferences extraPref = (ExtraCompanyPreferences) kwlCommonTablesDAOObj.getClassObject("com.krawler.common.admin.ExtraCompanyPreferences", companyid);
            String baseUrl =com.krawler.common.util.URLUtil.getPageURL(request,loginpageFull,extraPref.getCompany().getSubDomain());
            String doAction = request.getParameter("do");
            HashMap<String, Object> requestParams = importHandler.getImportRequestParams(request);
            requestParams.put("extraParams", extraParams);
            requestParams.put("currencyId", currencyId);
            requestParams.put("extraObj", null);
            requestParams.put("servletContext", this.getServletContext());
            requestParams.put("importMethod", typeXLSFile ? "xls" : "csv");
            requestParams.put("companyid", companyid);
            requestParams.put("moduleName", Constants.Acc_Product_modulename);
            requestParams.put("moduleid", Constants.Acc_Product_Master_ModuleId);
            requestParams.put("bookbeginning", preferences.getBookBeginningFrom());
            requestParams.put("inventoryValuationType", preferences.getInventoryValuationType());
            requestParams.put("isWarehouseCompulsory", preferences.isIswarehousecompulsory());
            requestParams.put("isLocationCompulsory", preferences.isIslocationcompulsory());
            requestParams.put("isCurrencyCode",extraPref.isCurrencyCode());
            requestParams.put("isActivateMRPModule",extraPref.isActivateMRPModule());
            requestParams.put("isEnableVatCst",extraPref.isEnableVatCst());
            requestParams.put("isExciseApplicable",extraPref.isExciseApplicable());
            requestParams.put("columnPref",extraPref.getColumnPref());
            requestParams.put("countryid",preferences.getCompany().getCountry().getID());
            requestParams.put("locale",RequestContextUtils.getLocale(request));
            requestParams.put("updateExistingRecordFlag", updateExistingRecordFlag);
            requestParams.put("baseUrl", baseUrl);
            
            if (updateExistingRecordFlag) {
                requestParams.put("allowDuplcateRecord", updateExistingRecordFlag);
            }
//            ServerEventManager.publish("/importdata/111", "{total:34}",this.getServletContext());
  
            if (doAction.compareToIgnoreCase("import") == 0) {
                channelName = "/ProductsDetails/gridAutoRefresh";
                System.out.println("A(( Import start : " + new Date());
                JSONObject datajobj = new JSONObject();
                JSONObject resjson = new JSONObject(request.getParameter("resjson").toString().replaceAll("\\n", "").trim());
                JSONArray resjsonJArray = resjson.getJSONArray("root");

                String filename = request.getParameter("filename");
                datajobj.put("filename", filename);

                String destinationDirectory = storageHandlerImpl.GetDocStorePath() + "importplans";
                File filepath = new File(destinationDirectory + "/" + filename);
                datajobj.put("FilePath", filepath);

                datajobj.put("resjson", resjsonJArray);
                
                String dateFormatId = request.getParameter("dateFormat");
                requestParams.put("dateFormat", dateFormatId);
                requestParams.put("importflag", Constants.importproductcsv);
                Date applyDate = authHandler.getDateOnlyFormatter(request).parse(authHandler.getDateOnlyFormatter(request).format(new Date()));
                requestParams.put("jobj", datajobj);
                requestParams.put("ApplyDate", applyDate);
                requestParams.put("remoteAddress", StringUtil.getIpAddress(request));
                
                String exceededLimit = "yes";//request.getParameter("exceededLimit");
//                if (exceededLimit.equalsIgnoreCase("yes")){//If file contains records more than 1500 then Import file in background using thread
                    importpoductobj.add(requestParams);
                    if (!importpoductobj.isIsworking()) {
                        Thread t = new Thread(importpoductobj);
                        t.setPriority(7);
                        t.start();
                    }
                    jobj.put("success", true);
//                } else {
////                    jobj = importProductRecords(request, datajobj);
//                    jobj = importpoductobj.importProductcsv(requestParams);
//                    
//                }
                //*****************This code is written for propagating products to child companies*************************
                 if (extraPref != null && extraPref.isPropagateToChildCompanies()) {
                    try {
                        List childCompaniesList = companyDetailsDAOObj.getChildCompanies(companyid);
                        requestParams.put("allowropagatechildcompanies", extraPref.isPropagateToChildCompanies());
                        requestParams.put("childcompanylist", childCompaniesList);
                        requestParams.put("parentcompanyID", companyid);

                        importpoductobj.add(requestParams);
                        if (!importpoductobj.isIsworking()) {
                            Thread t = new Thread(importpoductobj);
                            t.start();
                        }
                    } catch (Exception ex) {
                        Logger.getLogger(accProductController.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
                    }

                }
                //*****************End - propagating products to child companies*************************
                jobj.put("exceededLimit", exceededLimit);
                System.out.println("A(( Import end : " + new Date());
            } else if (doAction.compareToIgnoreCase("importXLS") == 0) {
                channelName = "/ProductsDetails/gridAutoRefresh";
                System.out.println("A(( Import start : " + new Date());
                JSONObject datajobj = new JSONObject();
                JSONObject resjson = new JSONObject(request.getParameter("resjson").toString().replaceAll("\\n", "").trim());
                JSONArray resjsonJArray = resjson.getJSONArray("root");

                String filename = request.getParameter("filename");
                datajobj.put("filename", filename);

                String destinationDirectory = storageHandlerImpl.GetDocStorePath() + "xlsfiles";
                File filepath = new File(destinationDirectory + "/" + filename);
                datajobj.put("FilePath", filepath);

                datajobj.put("resjson", resjsonJArray);
                
                requestParams.put("importflag", Constants.importproductxls);
                Date applyDate = authHandler.getDateOnlyFormatter(request).parse(authHandler.getDateOnlyFormatter(request).format(new Date()));
                requestParams.put("jobj", datajobj);
                requestParams.put("ApplyDate", applyDate);
                requestParams.put("remoteAddress", StringUtil.getIpAddress(request));
                    
                String exceededLimit = "yes";//request.getParameter("exceededLimit");
//                if (exceededLimit.equalsIgnoreCase("yes")){//If file contains records more than 1500 then Import file in background using thread
                   importpoductobj.add(requestParams);
                   if (!importpoductobj.isIsworking()) {
                        Thread t = new Thread(importpoductobj);
                        t.setPriority(7);
                        t.start();
                    }
                    jobj.put("success", true);
//                } else {
////                    jobj = importXLSProductRecords(request, datajobj);
//                    jobj = importpoductobj.importproductsdata(requestParams);
//                }
                //*****************This code is written for propagating products to child companies*************************
               if (extraPref != null && extraPref.isPropagateToChildCompanies()) {

                    try {
                        List childCompaniesList = companyDetailsDAOObj.getChildCompanies(companyid);
                        requestParams.put("allowropagatechildcompanies", extraPref.isPropagateToChildCompanies());
                        requestParams.put("childcompanylist", childCompaniesList);
                        requestParams.put("parentcompanyID", companyid);

                        importpoductobj.add(requestParams);
                        if (!importpoductobj.isIsworking()) {
                            Thread t = new Thread(importpoductobj);
                            t.start();
                        }
                    } catch (Exception ex) {
                        Logger.getLogger(accProductController.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
                    }

                }

                //*****************End - propagating products to child companies*************************
                
                jobj.put("exceededLimit", exceededLimit);
                System.out.println("A(( Import end : " + new Date());
            } else if (doAction.compareToIgnoreCase("validateData") == 0) {
                String[] masterModules = {"MasterItem", "UnitOfMeasure", "InventoryLocation", "InventoryWarehouse"};
                importHandler.setmasterTables(masterModules);
                System.out.println("A(( Validation start : " + new Date());
                jobj = importHandler.validateFileData(requestParams);
                System.out.println("A(( Validation end : " + new Date());
            }
            issuccess = true;
        } catch (Exception ex) {
            issuccess = false;
            msg = "" + ex.getMessage();

            try {
                jobj.put("success", issuccess);
                jobj.put("msg", msg);
            } catch (JSONException e) {
                Logger.getLogger(accProductController.class.getName()).log(Level.SEVERE, e.getMessage(), e);
            }

            Logger.getLogger(accProductController.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
        } finally{
            if (issuccess && !StringUtil.isNullOrEmpty(channelName)) {
                ServerEventManager.publish(channelName, jobj.toString(), (ServletContext) this.getServletContext());
            }
        }
        return new ModelAndView("jsonView", "model", jobj.toString());
    }

    @Deprecated
    public JSONObject importProductRecords(HttpServletRequest request, JSONObject jobj) throws AccountingException, IOException, SessionExpiredException, JSONException {
        DefaultTransactionDefinition def = new DefaultTransactionDefinition();
        def.setName("import_Tx");
        def.setPropagationBehavior(TransactionDefinition.PROPAGATION_REQUIRED);
        TransactionStatus status = txnManager.getTransaction(def);
        boolean commitedEx = false;
        boolean issuccess = true;
        boolean isCurrencyColum = false;
        String msg = "";
        String customfield = "";
        FileInputStream fileInputStream = null;
        BufferedReader br = null;
        CsvReader csvReader = null;
        int total = 0, failed = 0;
        String companyid = sessionHandlerImpl.getCompanyid(request);
        String currencyId = sessionHandlerImpl.getCurrencyID(request);
        String userId = sessionHandlerImpl.getUserid(request);
        String fileName = jobj.getString("filename");
        String masterPreference = request.getParameter("masterPreference");
        String delimiterType = request.getParameter("delimiterType");
        boolean updateExistingRecordFlag = false;
        if (!StringUtil.isNullOrEmpty(request.getParameter("updateExistingRecordFlag"))) {
            updateExistingRecordFlag = Boolean.FALSE.parseBoolean(request.getParameter("updateExistingRecordFlag"));
        }
        int limit = Constants.Transaction_Commit_Limit;
        int count = 1;
        boolean isInventoryIntegrationOn = false;
        JSONObject returnObj = new JSONObject();
        String failureMsg = "";

        try {
            KwlReturnObject CompanyPrefResult = accountingHandlerDAOobj.getObject(CompanyAccountPreferences.class.getName(), companyid);
            CompanyAccountPreferences companyAccountPreferences = (CompanyAccountPreferences) CompanyPrefResult.getEntityList().get(0);

            Date bookBookBeginningDate=companyAccountPreferences.getBookBeginningFrom();
            KwlReturnObject extraCompanyPrefResult = accountingHandlerDAOobj.getObject(ExtraCompanyPreferences.class.getName(), companyid);
            ExtraCompanyPreferences extraCompanyPreferences = (ExtraCompanyPreferences) extraCompanyPrefResult.getEntityList().get(0);
            boolean isCurrencyCode=extraCompanyPreferences.isCurrencyCode();
            isInventoryIntegrationOn = extraCompanyPreferences.isActivateInventoryTab();
            boolean isAddUpdateInitialQuantity = false;
            isAddUpdateInitialQuantity = companyAccountPreferences.isIswarehousecompulsory() || companyAccountPreferences.isIslocationcompulsory() || companyAccountPreferences.isIsBatchCompulsory() || companyAccountPreferences.isIsSerialCompulsory() || companyAccountPreferences.isIsrackcompulsory() || companyAccountPreferences.isIsrowcompulsory() || companyAccountPreferences.isIsbincompulsory();

            String dateFormat = null, dateFormatId = request.getParameter("dateFormat");
            if (!StringUtil.isNullOrEmpty(dateFormatId)) {
                KwlReturnObject kdfObj = accountingHandlerDAOobj.getObject(KWLDateFormat.class.getName(), dateFormatId);
                KWLDateFormat kdf = (KWLDateFormat) kdfObj.getEntityList().get(0);
                dateFormat = kdf != null ? kdf.getJavaForm() : null;
            }
            DateFormat df = new SimpleDateFormat(dateFormat);

            fileInputStream = new FileInputStream(jobj.getString("FilePath"));
            csvReader = new CsvReader(new InputStreamReader(fileInputStream), delimiterType);
            int cnt = 0;

//            StringBuilder failedRecords = new StringBuilder();

            Map<String, Integer> columnConfig = new HashMap<>();
            Map<String, JSONObject> configMap = new HashMap<>();
            JSONArray jSONArray = jobj.getJSONArray("resjson");
            for (int i = 0; i < jSONArray.length(); i++) {
                JSONObject jSONObject = jSONArray.getJSONObject(i);
                columnConfig.put(jSONObject.getString("dataindex"), jSONObject.getInt("csvindex"));
                configMap.put(jSONObject.getString("dataindex"), jSONObject);
            }
            HashMap currencyMap = accProductModuleService.getCurrencyMap(isCurrencyCode);
            List failureArr = new ArrayList();
            List failureColumnArr = new ArrayList();
            
            Set usedProductIdSet = new HashSet();
            while (csvReader.readRecord()) {
                failureMsg = "";
                String[] recarr = csvReader.getValues();
                Map<Integer, Object> invalidColumn = new HashMap<>();
                if (cnt == 0) {
                    List failureRecArr = new ArrayList();
                    for (int header = 0; header < recarr.length; header++) {
                        failureRecArr.add(recarr[header]);
                    }
                    failureRecArr.add("Error Message");
                    failureArr.add(failureRecArr);
                    failureColumnArr.add(invalidColumn);
//                    failedRecords.append(createCSVrecord(recarr) + "\"Error Message\"");
                }
                if (cnt != 0) {
                    try {
                        currencyId = sessionHandlerImpl.getCurrencyID(request);
                        boolean newProductAddinUpdateCase = false;
                        
                        String productID = "";
                        if (columnConfig.containsKey("pid")) {
                            productID = recarr[(Integer) columnConfig.get("pid")].replaceAll("\"", "").trim();
                            if (StringUtil.isNullOrEmpty(productID)) {
                                failureMsg += "Product ID is not available";
                                invalidColumn.put((Integer) columnConfig.get("pid"), "Invalid");
                            }else if(!usedProductIdSet.add(productID)){
                                invalidColumn.put((Integer) columnConfig.get("pid"), "Invalid");
                                throw new AccountingException("Duplicate Product ID '" + productID + "' in file");
                            }
                            JSONObject configObj = configMap.get("pid");
                            int maxLength = configObj.optInt("maxLength", 0);
                            String validationType = configObj.optString("validatetype");
                            if("string".equalsIgnoreCase(validationType) && !StringUtil.isNullOrEmpty(productID) && productID.length() > maxLength){
                                invalidColumn.put((Integer) columnConfig.get("pid"), "Invalid");
                                failureMsg += "Data length greater than " + maxLength + " for column Product ID.";
                            }
                        } else {
                            failureMsg += "Product ID column is not found";
                        }
                        
                        // For Checking 'ProductID' is exist or not
                        KwlReturnObject result = accProductObj.getProductIDCount(productID, companyid,false);
                        Product productOldObj = null;
                        int nocount = result.getRecordTotalCount();
                        if (nocount > 0 && !updateExistingRecordFlag) {
                            invalidColumn.put((Integer) columnConfig.get("pid"), "Invalid");
                            throw new AccountingException("Product ID '" + productID + "' already exists.");
                        } else if (nocount == 0 && updateExistingRecordFlag) {
                            newProductAddinUpdateCase = true;
//                            throw new AccountingException("Product ID '" + productID + "' not exists.");
                        }
                        
                        String productTypeID = "";
                        if (columnConfig.containsKey("type")) {
                            String productTypeName = recarr[(Integer) columnConfig.get("type")].replaceAll("\"", "").trim();
                            if (StringUtil.isNullOrEmpty(productTypeName)) {
                                invalidColumn.put((Integer) columnConfig.get("type"), "Invalid");
                                failureMsg += "Product Type is not available.";
                            }

                            Producttype producttype = accProductModuleService.getProductTypeByName(productTypeName);
                            if (producttype != null) {
                                productTypeID = producttype.getID();
                                if (productTypeID.equalsIgnoreCase(Producttype.ASSEMBLY)) {
                                    invalidColumn.put((Integer) columnConfig.get("type"), "Invalid");
                                    throw new AccountingException("Assembly products need to be imported separately through 'Import Assembly Product'.");
                                }
                            } else {
                                invalidColumn.put((Integer) columnConfig.get("type"), "Invalid");
                                failureMsg += "Product Type is not found for " + productTypeName + ".";
                            }
                        } else {
                            failureMsg += "Product Type column is not found.";
                        }

                        String productName = "";
                        if (columnConfig.containsKey("productname")) {
                            productName = recarr[(Integer) columnConfig.get("productname")].replaceAll("\"", "").trim();
                            if (StringUtil.isNullOrEmpty(productName)) {
                                invalidColumn.put((Integer) columnConfig.get("productname"), "Invalid");
                                failureMsg += "Product Name is not available.";
                            }
                            JSONObject configObj = configMap.get("productname");
                            int maxLength = configObj.optInt("maxLength", 0);
                            String validationType = configObj.optString("validatetype");
                            if("string".equalsIgnoreCase(validationType) && !StringUtil.isNullOrEmpty(productName) && productName.length() > maxLength){
                                invalidColumn.put((Integer) columnConfig.get("productname"), "Invalid");
                                failureMsg += "Data length greater than " + maxLength + " for column Product Name.";
                            }
                        } else {
                            failureMsg += "Product Name column is not found.";
                        }

                        String productDescription = "";
                        if (columnConfig.containsKey("desc")) {
                            productDescription = recarr[(Integer) columnConfig.get("desc")].replaceAll("\"", "").trim();
                        }

                        String productUOMID = "";
                        UnitOfMeasure uom = null;
                        if (columnConfig.containsKey("uomname")) {
                            String productUOMName = recarr[(Integer) columnConfig.get("uomname")].replaceAll("\"", "").trim();
                            if (!StringUtil.isNullOrEmpty(productUOMName)) {
                                uom = accProductModuleService.getUOMByName(productUOMName, companyid);
                                if (uom != null) {
                                    productUOMID = uom.getID();
                                } else {
                                    if (masterPreference.equalsIgnoreCase("2")) {
                                        HashMap<String, Object> uomMap = new HashMap<String, Object>();
                                        uomMap.put("uomname",StringUtil.DecodeText(productUOMName));
                                        uomMap.put("uomtype",StringUtil.DecodeText(productUOMName));
                                        uomMap.put("precision", 0);
                                        uomMap.put("companyid", companyid);

                                        KwlReturnObject uomresult = accUomObj.addUoM(uomMap);
                                        uom = (UnitOfMeasure) uomresult.getEntityList().get(0);
                                        productUOMID = uom.getID();
                                    } else {
                                        if (masterPreference.equalsIgnoreCase("1")) {
                                            productUOMID = "";
                                        } else if (productTypeID.equals(Producttype.SERVICE)) {
                                            productUOMID = "";
                                        } else {
                                            invalidColumn.put((Integer) columnConfig.get("uomname"), "Invalid");
                                            failureMsg += "Product Stock UOM is not found for " + productUOMName + ".";
                                        }
                                    }
                                }
                            } else {
                                if (masterPreference.equalsIgnoreCase("1")) {
                                    productUOMID = "";
                                } else {
                                    if (productTypeID.equals(Producttype.SERVICE)) {
                                        productUOMID = "";
                                    } else {
                                        invalidColumn.put((Integer) columnConfig.get("uomname"), "Invalid");
                                        failureMsg += "Data should not be empty for column Stock UOM.";
                                    }
                                }
                            }
                        } else {
                            if (masterPreference.equalsIgnoreCase("1")) {
                                productUOMID = "";
                            } else {
                                if (productTypeID.equals(Producttype.SERVICE)) {
                                    productUOMID = "";
                                } else {
                                    failureMsg += "Product Stock UOM column is not found.";
                                }
                            }
                        }

                        String casingUoMID = "";
                        UnitOfMeasure casinguom = null;
                        if (columnConfig.containsKey("casinguom")) {
                            String productUOMName = recarr[(Integer) columnConfig.get("casinguom")].replaceAll("\"", "").trim();
                            if (!StringUtil.isNullOrEmpty(productUOMName)) {
                                casinguom = accProductModuleService.getUOMByName(productUOMName, companyid);
                                if (casinguom != null) {
                                    casingUoMID = casinguom.getID();
                                } else {
                                    if (masterPreference.equalsIgnoreCase("2")) {
                                        HashMap<String, Object> uomMap = new HashMap<String, Object>();
                                        uomMap.put("uomname",StringUtil.DecodeText(productUOMName));
                                        uomMap.put("uomtype", StringUtil.DecodeText(productUOMName));
                                        uomMap.put("precision", 0);
                                        uomMap.put("companyid", companyid);
                                        KwlReturnObject uomresult = accUomObj.addUoM(uomMap);
                                        casinguom = (UnitOfMeasure) uomresult.getEntityList().get(0);
                                        casingUoMID = casinguom.getID();
                                    } else {
                                        if (masterPreference.equalsIgnoreCase("1")) {
                                            casingUoMID = "";
                                        } else {
                                            invalidColumn.put((Integer) columnConfig.get("casinguom"), "Invalid");
                                            failureMsg += "Product Casing Unit Of Measure is not found for " + productUOMName + ".";
                                        }
                                    }
                                }
                            }
                        } else {
                            casingUoMID = "";
                        }

                        String innerUoMID = "";
                        UnitOfMeasure inneruom = null;
                        if (columnConfig.containsKey("inneruom")) {
                            String productUOMName = recarr[(Integer) columnConfig.get("inneruom")].replaceAll("\"", "").trim();
                            if (!StringUtil.isNullOrEmpty(productUOMName)) {
                                inneruom = accProductModuleService.getUOMByName(productUOMName, companyid);
                                if (inneruom != null) {
                                    innerUoMID = inneruom.getID();
                                } else {
                                    if (masterPreference.equalsIgnoreCase("2")) {
                                        HashMap<String, Object> uomMap = new HashMap<String, Object>();
                                        uomMap.put("uomname", StringUtil.DecodeText(productUOMName));
                                        uomMap.put("uomtype", StringUtil.DecodeText(productUOMName));
                                        uomMap.put("precision", 0);
                                        uomMap.put("companyid", companyid);

                                        KwlReturnObject uomresult = accUomObj.addUoM(uomMap);
                                        inneruom = (UnitOfMeasure) uomresult.getEntityList().get(0);
                                        innerUoMID = inneruom.getID();
                                    } else {
                                        if (masterPreference.equalsIgnoreCase("1")) {
                                            innerUoMID = "";
                                        } else {
                                            invalidColumn.put((Integer) columnConfig.get("inneruom"), "Invalid");
                                            failureMsg += "Product Inner Unit Of Measure is not found for " + productUOMName + ".";
                                        }
                                    }
                                }
                            }
                        } else {
                            innerUoMID = "";
                        }

                        String PurchaseUOMID = "";
                        UnitOfMeasure purchaseruom = null;
                        if (columnConfig.containsKey("purchaseuom")) {
                            String productUOMName = recarr[(Integer) columnConfig.get("purchaseuom")].replaceAll("\"", "").trim();
                            if (!StringUtil.isNullOrEmpty(productUOMName)) {
                                purchaseruom = accProductModuleService.getUOMByName(productUOMName, companyid);
                                if (purchaseruom != null) {
                                    PurchaseUOMID = purchaseruom.getID();
                                } else {
                                    if (masterPreference.equalsIgnoreCase("2")) {
                                        HashMap<String, Object> uomMap = new HashMap<String, Object>();
                                        uomMap.put("uomname", StringUtil.DecodeText(productUOMName));
                                        uomMap.put("uomtype",StringUtil.DecodeText(productUOMName));
                                        uomMap.put("precision", 0);
                                        uomMap.put("companyid", companyid);

                                        KwlReturnObject uomresult = accUomObj.addUoM(uomMap);
                                        purchaseruom = (UnitOfMeasure) uomresult.getEntityList().get(0);
                                        PurchaseUOMID = purchaseruom.getID();
                                    } else {
                                        if (masterPreference.equalsIgnoreCase("1")) {
                                            PurchaseUOMID = "";
                                        } else {
                                            invalidColumn.put((Integer) columnConfig.get("purchaseuom"), "Invalid");
                                            failureMsg += "Product Purchase Unit Of Measure is not found for " + productUOMName + ".";
                                        }
                                    }
                                }
                            }
                        } else {
                            PurchaseUOMID = "";
                        }

                        String SalesUOMID = "";
                        UnitOfMeasure salesuom = null;
                        if (columnConfig.containsKey("salesuom")) {
                            String productUOMName = recarr[(Integer) columnConfig.get("salesuom")].replaceAll("\"", "").trim();
                            if (!StringUtil.isNullOrEmpty(productUOMName)) {
                                salesuom = accProductModuleService.getUOMByName(productUOMName, companyid);
                                if (salesuom != null) {
                                    SalesUOMID = salesuom.getID();
                                } else {
                                    if (masterPreference.equalsIgnoreCase("2")) {
                                        HashMap<String, Object> uomMap = new HashMap<String, Object>();
                                        uomMap.put("uomname", StringUtil.DecodeText(productUOMName));
                                        uomMap.put("uomtype", StringUtil.DecodeText(productUOMName));
                                        uomMap.put("precision", 0);
                                        uomMap.put("companyid", companyid);

                                        KwlReturnObject uomresult = accUomObj.addUoM(uomMap);
                                        salesuom = (UnitOfMeasure) uomresult.getEntityList().get(0);
                                        SalesUOMID = salesuom.getID();
                                    } else {
                                        if (masterPreference.equalsIgnoreCase("1")) {
                                            SalesUOMID = "";
                                        } else {
                                            invalidColumn.put((Integer) columnConfig.get("salesuom"), "Invalid");
                                            failureMsg += "Product Sales Unit Of Measure is not found for " + productUOMName + ".";
                                        }
                                    }
                                }
                            }
                        } else {
                            SalesUOMID = "";
                        }

                        String casinguomvalue = "1";
                        if (columnConfig.containsKey("casinguom_value")) {
                            casinguomvalue = recarr[(Integer) columnConfig.get("casinguom_value")].replaceAll("\"", "").trim();
                            if (!StringUtil.isNullOrEmpty(casinguomvalue)) {
                                try {
                                    Object vDataValue = Double.parseDouble(casinguomvalue);
                                } catch (Exception ex) {
                                    if (masterPreference.equals("1")) {
                                        casinguomvalue = "1";
                                    } else {
                                        invalidColumn.put((Integer) columnConfig.get("casinguom_value"), "Invalid");
                                        failureMsg += "Incorrect numeric value for Casing UOM Value, Please ensure that value type of Casing UOM Value matches with the Casing UOM Value.";
                                    }
                                }
                            }
                        }
                        String inneruomvalue = "1";
                        if (columnConfig.containsKey("inneruom_value")) {
                            inneruomvalue = recarr[(Integer) columnConfig.get("inneruom_value")].replaceAll("\"", "").trim();
                            if (!StringUtil.isNullOrEmpty(inneruomvalue)) {
                                try {
                                    Object vDataValue = Double.parseDouble(inneruomvalue);
                                } catch (Exception ex) {
                                    if (masterPreference.equals("1")) {
                                        inneruomvalue = "1";
                                    } else {
                                        invalidColumn.put((Integer) columnConfig.get("inneruom_value"), "Invalid");
                                        failureMsg += "Incorrect numeric value for Inner UOM Value, Please ensure that value type of Inner UOM Value matches with the Inner UOM Value.";
                                    }
                                }
                            }
                        }
                        String stcokuomvalue = "1";
                        if (columnConfig.containsKey("stockuom_value")) {
                            stcokuomvalue = recarr[(Integer) columnConfig.get("stockuom_value")].replaceAll("\"", "").trim();
                            if (!StringUtil.isNullOrEmpty(stcokuomvalue)) {
                                try {
                                    Object vDataValue = Double.parseDouble(stcokuomvalue);
                                } catch (Exception ex) {
                                    if (masterPreference.equals("1")) {
                                        stcokuomvalue = "1";
                                    } else {
                                        invalidColumn.put((Integer) columnConfig.get("stockuom_value"), "Invalid");
                                        failureMsg += "Incorrect numeric value for Stock UOM Value, Please ensure that value type of Stock UOM Value matches with the Stock UOM Value.";
                                    }
                                }
                            }
                        }

                        String productReorderLevel = "0";
                        if (columnConfig.containsKey("reorderlevel")) {
                            productReorderLevel = recarr[(Integer) columnConfig.get("reorderlevel")].replaceAll("\"", "").trim();
                            if (StringUtil.isNullOrEmpty(productReorderLevel)) {
                                productReorderLevel = "0";
                            } else {
                                try {
                                    Object vDataValue = Double.parseDouble(productReorderLevel);
                                } catch (Exception ex) {
                                    if (masterPreference.equals("1")) {
                                        productReorderLevel = "0";
                                    } else {
                                        invalidColumn.put((Integer) columnConfig.get("reorderlevel"), "Invalid");
                                        failureMsg += "Incorrect numeric value for Reorder Level, Please ensure that value type of Reorder Level matches with the Reorder Level.";
                                    }
                                }
                            }
                        } 

                        String productReorderQuantity = "0";
                        if (columnConfig.containsKey("reorderquantity")) {
                            productReorderQuantity = recarr[(Integer) columnConfig.get("reorderquantity")].replaceAll("\"", "").trim();
                            if (StringUtil.isNullOrEmpty(productReorderQuantity)) {
                                productReorderQuantity = "0";
                            } else {
                                try {
                                    Object vDataValue = Double.parseDouble(productReorderQuantity);
                                } catch (Exception ex) {
                                    if (masterPreference.equals("1")) {
                                        productReorderQuantity = "0";
                                    } else {
                                        invalidColumn.put((Integer) columnConfig.get("reorderquantity"), "Invalid");
                                        failureMsg += "Incorrect numeric value for Reorder Quantity, Please ensure that value type of Reorder Quantity matches with the Reorder Quantity.";
                                    }
                                }
                            }
                        } 

                        String productWarrantyPeriod = "0";
                        if (columnConfig.containsKey("warrantyperiod")) {
                            productWarrantyPeriod = recarr[(Integer) columnConfig.get("warrantyperiod")].replaceAll("\"", "").trim();
                            if (StringUtil.isNullOrEmpty(productWarrantyPeriod)) {
                                productWarrantyPeriod = "0";
                            } else {
                                try {
                                    Object vDataValue = Integer.parseInt(productWarrantyPeriod);
                                } catch (Exception ex) {
                                    if (masterPreference.equals("1")) {
                                        productWarrantyPeriod = "0";
                                    } else {
                                        invalidColumn.put((Integer) columnConfig.get("warrantyperiod"), "Invalid");
                                        failureMsg += "Incorrect numeric value for Warranty Period (in days), Please ensure that value type of Warranty Period (in days) matches with the Warranty Period (in days).";
                                    }
                                }
                            }
                        } 

                        String productSalesWarrantyPeriod = "0";
                        if (columnConfig.containsKey("warrantyperiodsal")) {
                            productSalesWarrantyPeriod = recarr[(Integer) columnConfig.get("warrantyperiodsal")].replaceAll("\"", "").trim();
                            if (StringUtil.isNullOrEmpty(productSalesWarrantyPeriod)) {
                                productSalesWarrantyPeriod = "0";
                            } else {
                                try {
                                    Object vDataValue = Integer.parseInt(productSalesWarrantyPeriod);
                                } catch (Exception ex) {
                                    if (masterPreference.equals("1")) {
                                        productSalesWarrantyPeriod = "0";
                                    } else {
                                        invalidColumn.put((Integer) columnConfig.get("warrantyperiodsal"), "Invalid");
                                        failureMsg += "Incorrect numeric value for Sales Warranty Period (in days), Please ensure that value type of Sales Warranty Period (in days) matches with the Sales Warranty Period (in days).";
                                    }
                                }
                            }
                        } 

                        String productLeadTime = "0";
                        if (columnConfig.containsKey("leadtime")) {
                            productLeadTime = recarr[(Integer) columnConfig.get("leadtime")].replaceAll("\"", "").trim();
                            if (StringUtil.isNullOrEmpty(productLeadTime)) {
                                if (masterPreference.equalsIgnoreCase("1")) {
                                    productLeadTime = "0";
                                } else {
                                    if (productTypeID.equals(Producttype.SERVICE)) {
                                        productLeadTime = "0";
                                    } else {
                                        invalidColumn.put((Integer) columnConfig.get("leadtime"), "Invalid");
                                        failureMsg += "Product Lead Time is not available.";
                                    }
                                }
                            } else {
                                try {
                                    if (Integer.parseInt(productLeadTime) > 365) {
                                        invalidColumn.put((Integer) columnConfig.get("leadtime"), "Invalid");
                                        failureMsg += "Product Lead Time should not be greater than 365.";
                                    } else if (Integer.parseInt(productLeadTime) < 0) {
                                        invalidColumn.put((Integer) columnConfig.get("leadtime"), "Invalid");
                                        failureMsg += "Product Lead Time should not be less than 0.";
                                    }
                                } catch (Exception ex) {
                                    if (masterPreference.equals("1")) {
                                        productLeadTime = "0";
                                    } else {
                                        invalidColumn.put((Integer) columnConfig.get("leadtime"), "Invalid");
                                        failureMsg += "Incorrect numeric value for Lead Time(in days), Please ensure that value type of Lead Time(in days) matches with the Lead Time(in days).";
                                    }
                                }
                            }
                        }

//                        String productCycleCountInterval = "";
//                        if (columnConfig.containsKey("ccountinterval")) {
//                            productCycleCountInterval = recarr[(Integer) columnConfig.get("ccountinterval")].replaceAll("\"", "").trim();
//                            if (StringUtil.isNullOrEmpty(productCycleCountInterval)) {
//                                productCycleCountInterval = "1";
//                            }
//                        } else {
//                            productCycleCountInterval = "1";
//                        }
//
//                        String productCycleCountTolerance = "";
//                        if (columnConfig.containsKey("ccounttolerance")) {
//                            productCycleCountTolerance = recarr[(Integer) columnConfig.get("ccounttolerance")].replaceAll("\"", "").trim();
//                        } else {
//                            productCycleCountTolerance = "0";
//                        }

                        String parentProductUUID = "";
                        if (columnConfig.containsKey("parentid")) {
                            String parentProductID = recarr[(Integer) columnConfig.get("parentid")].replaceAll("\"", "").trim();
                            if (!StringUtil.isNullOrEmpty(parentProductID)) {
                                Product parentProduct = accProductModuleService.getProductByProductID(parentProductID, companyid);
                                if (parentProduct != null) {
                                    parentProductUUID = parentProduct.getID();
                                } else {
                                    if (masterPreference.equalsIgnoreCase("1")) {
                                        parentProductUUID = null;
                                    } else {
                                        invalidColumn.put((Integer) columnConfig.get("parentid"), "Invalid");
                                        failureMsg += "Parent Product is not found for " + parentProductID + ".";
                                    }
                                }
                            }
                        } else {
                            parentProductUUID = null;
                        }

                        String productSalesAccId = "";
                        if (columnConfig.containsKey("salesaccountname")) {
                            String productSalesAccountName = recarr[(Integer) columnConfig.get("salesaccountname")].replaceAll("\"", "").trim();
                            if (!StringUtil.isNullOrEmpty(productSalesAccountName)) {
                                Account salesAccount = accProductModuleService.getAccountByName(productSalesAccountName, companyid);
                                if (salesAccount != null) {
                                    productSalesAccId = salesAccount.getID();
                                    salesAccount.setUsedIn("Product Sales Account");
                                } else {
                                    invalidColumn.put((Integer) columnConfig.get("salesaccountname"), "Invalid");
                                    failureMsg += "Product Sales Account is not found for " + productSalesAccountName + ".";
                                }
                            } else {
                                invalidColumn.put((Integer) columnConfig.get("salesaccountname"), "Invalid");
                                failureMsg += "Product Sales Account is not available.";
                            }
                        } else {
                            failureMsg += "Product Sales Account column is not found.";
                        }

                        String productSalesReturnAccId = "";
                        if (columnConfig.containsKey("salesretaccountname")) {
                            String productSalesReturnAccountName = recarr[(Integer) columnConfig.get("salesretaccountname")].replaceAll("\"", "").trim();
                            if (!StringUtil.isNullOrEmpty(productSalesReturnAccountName)) {
                                Account salesReturnAccount = accProductModuleService.getAccountByName(productSalesReturnAccountName, companyid);
                                if (salesReturnAccount != null) {
                                    productSalesReturnAccId = salesReturnAccount.getID();
                                    salesReturnAccount.setUsedIn("Product Sales Return Account");
                                } else {
                                    invalidColumn.put((Integer) columnConfig.get("salesretaccountname"), "Invalid");
                                    failureMsg += "Product Sales Return Account is not found for " + productSalesReturnAccountName + ".";
                                }
                            } else {
                                invalidColumn.put((Integer) columnConfig.get("salesretaccountname"), "Invalid");
                                failureMsg += "Product Sales Return Account is not available.";
                            }
                        } else {
                            failureMsg += "Product Sales Return Account column is not found.";
                        }

                        String productPreferedVendorID = "";
                        if (columnConfig.containsKey("vendornameid")) {
                            String productPreferedVendorName = recarr[(Integer) columnConfig.get("vendornameid")].replaceAll("\"", "").trim();
                            if (!StringUtil.isNullOrEmpty(productPreferedVendorName)) {
                                Vendor vendor = accProductModuleService.getVendorByName(productPreferedVendorName, companyid);
                                if (vendor != null) {
                                    productPreferedVendorID = vendor.getID();
                                } else {
                                    if (masterPreference.equalsIgnoreCase("1")) {
                                        productPreferedVendorID = null;
                                    } else {
                                        invalidColumn.put((Integer) columnConfig.get("vendornameid"), "Invalid");
                                        failureMsg += "Prefered Vendor is not found for " + productPreferedVendorName + ".";
                                    }
                                }
                            }
                        } else {
                            productPreferedVendorID = null;
                        }

                        String productPurchaseAccId = "";
                        if (columnConfig.containsKey("purchaseaccountname")) {
                            String productPurchaseAccountName = recarr[(Integer) columnConfig.get("purchaseaccountname")].replaceAll("\"", "").trim();
                            if (!StringUtil.isNullOrEmpty(productPurchaseAccountName)) {
                                Account purchaseAccount = accProductModuleService.getAccountByName(productPurchaseAccountName, companyid);
                                if (purchaseAccount != null) {
                                    productPurchaseAccId = purchaseAccount.getID();
                                    purchaseAccount.setUsedIn("Product Purchase Account");
                                } else {
                                    invalidColumn.put((Integer) columnConfig.get("purchaseaccountname"), "Invalid");
                                    failureMsg += "Product Purchase Account is not found for " + productPurchaseAccountName + ".";
                                }
                            } else {
                                invalidColumn.put((Integer) columnConfig.get("purchaseaccountname"), "Invalid");
                                failureMsg += "Product Purchase Account is not available.";
                            }
                        } else {
                            failureMsg += "Product Purchase Account column is not found.";
                        }

                        String productPurchaseReturnAccId = "";
                        if (columnConfig.containsKey("purchaseretaccountname")) {
                            String productPurchaseReturnAccountName = recarr[(Integer) columnConfig.get("purchaseretaccountname")].replaceAll("\"", "").trim();
                            if (!StringUtil.isNullOrEmpty(productPurchaseReturnAccountName)) {
                                Account purchaseReturnAccount = accProductModuleService.getAccountByName(productPurchaseReturnAccountName, companyid);
                                if (purchaseReturnAccount != null) {
                                    productPurchaseReturnAccId = purchaseReturnAccount.getID();
                                    purchaseReturnAccount.setUsedIn("Product Purchase Return Account");
                                } else {
                                    invalidColumn.put((Integer) columnConfig.get("purchaseretaccountname"), "Invalid");
                                    failureMsg += "Product Purchase Return Account is not found for " + productPurchaseReturnAccountName + ".";
                                }
                            } else {
                                invalidColumn.put((Integer) columnConfig.get("purchaseretaccountname"), "Invalid");
                                failureMsg += "Product Purchase Return Account is not available.";
                            }
                        } else {
                            failureMsg += "Product Purchase Return Account column is not found.";
                        }

                        String productInitialQuantity = "0";
                        if (columnConfig.containsKey("quantity") && isAddUpdateInitialQuantity == false) {
                            productInitialQuantity = recarr[(Integer) columnConfig.get("quantity")].replaceAll("\"", "").trim();
                            if (StringUtil.isNullOrEmpty(productInitialQuantity)) {
                                productInitialQuantity = "0";
                            } else {
                                try {
                                    Object vDataValue = Double.parseDouble(productInitialQuantity);
                                } catch (Exception ex) {
                                    if (masterPreference.equals("1")) {
                                        productInitialQuantity = "0";
                                    } else {
                                        invalidColumn.put((Integer) columnConfig.get("quantity"), "Invalid");
                                        failureMsg += "Incorrect numeric value for Initial Quantity, Please ensure that value type of Initial Quantity matches with the Initial Quantity.";
                                    }
                                }
                            }
                        } 

                        String productInitialPurchasePrise = "0";
                        if (columnConfig.containsKey("purchaseprice")) {
                            productInitialPurchasePrise = recarr[(Integer) columnConfig.get("purchaseprice")].replaceAll("\"", "").trim();
                            if (!StringUtil.isNullOrEmpty(productInitialPurchasePrise)) {
                                try {
                                    Object vDataValue = Double.parseDouble(productInitialPurchasePrise);
                                } catch (Exception ex) {
                                    if (masterPreference.equals("1")) {
                                        productInitialPurchasePrise = "0";
                                    } else {
                                         invalidColumn.put((Integer) columnConfig.get("purchaseprice"), "Invalid");
                                         failureMsg += "Incorrect numeric value for Initial Purchase Price, Please ensure that value type of Initial Purchase Price matches with the Initial Purchase Price.";
                                     }
                                }
                            }
                        } 
                        String productSalesPrice = "0";
                        if (columnConfig.containsKey("saleprice")) {
                            productSalesPrice = recarr[(Integer) columnConfig.get("saleprice")].replaceAll("\"", "").trim();
                            if (!StringUtil.isNullOrEmpty(productSalesPrice)) {
                                try {
                                    Object vDataValue = Double.parseDouble(productSalesPrice);
                                } catch (Exception ex) {
                                    if (masterPreference.equals("1")) {
                                        productSalesPrice = "0";
                                    } else {
                                        invalidColumn.put((Integer) columnConfig.get("saleprice"), "Invalid");
                                        failureMsg += "Incorrect numeric value for Sales Price, Please ensure that value type of Sales Price matches with the Sales Price.";
                                    }
                                }
                            }
                        }

                        String MsgExep = "";
                        if (isCurrencyCode?columnConfig.containsKey("currencyCode"):columnConfig.containsKey("currencyName")) {
                            String productPriceCurrencyStr =isCurrencyCode?recarr[(Integer) columnConfig.get("currencyCode")].replaceAll("\"", "").trim():recarr[(Integer) columnConfig.get("currencyName")].replaceAll("\"", "").trim();
                            if (!StringUtil.isNullOrEmpty(productPriceCurrencyStr)) {
                                currencyId = accProductModuleService.getCurrencyId(productPriceCurrencyStr, currencyMap);
                                if (StringUtil.isNullOrEmpty(currencyId)) {
                                    invalidColumn.put(isCurrencyCode?(Integer) columnConfig.get("currencyCode"):(Integer) columnConfig.get("currencyName"), "Invalid");
                                    MsgExep = messageSource.getMessage("acc.field.ImportProductExceptionFormat", null, RequestContextUtils.getLocale(request));
                                    failureMsg += MsgExep;
                                }
                            } else {
                                if (!masterPreference.equalsIgnoreCase("1")) {
                                    invalidColumn.put(isCurrencyCode?(Integer) columnConfig.get("currencyCode"):(Integer) columnConfig.get("currencyName"), "Invalid");
                                    failureMsg += "Currency is not available.";
                                }
                            }
                        }

                        UOMschemaType uomSchemaType = null;
                        if (columnConfig.containsKey("uomSchemaTypeName") && recarr.length > columnConfig.get("uomSchemaTypeName")) {
                            String uomSchemaTypeName = recarr[(Integer) columnConfig.get("uomSchemaTypeName")].replaceAll("\"", "").trim();
                            if (!StringUtil.isNullOrEmpty(uomSchemaTypeName)) {
                                uomSchemaType = getUOMschemaTypeByName(uomSchemaTypeName, companyid);
                                if (uomSchemaType == null) {
                                    if (!masterPreference.equalsIgnoreCase("1")) {
                                        invalidColumn.put((Integer) columnConfig.get("uomSchemaTypeName"), "Invalid");
                                        failureMsg += "UOM Schema is not found for " + uomSchemaTypeName + ".";
                                    }
                                }
                            }
                        }

                        if (uomSchemaType != null && !productUOMID.equalsIgnoreCase(uomSchemaType.getStockuom().getID())) {
                            invalidColumn.put((Integer) columnConfig.get("uomSchemaTypeName"), "Invalid");
                            failureMsg += "Stock UOM of Product and UOM Schema's Stock UOM should be same.";
                        }

                        String productDefaultLocationID = "";
                        if (columnConfig.containsKey("locationName") && companyAccountPreferences.isIslocationcompulsory()) {
                            String productDefaultLocationName = recarr[(Integer) columnConfig.get("locationName")].replaceAll("\"", "").trim();
                            if (!StringUtil.isNullOrEmpty(productDefaultLocationName)) {
                                InventoryLocation invLoc = accProductModuleService.getInventoryLocationByName(productDefaultLocationName, companyid);
                                if (invLoc != null) {
                                    productDefaultLocationID = invLoc.getId();
                                } else {
                                    if (masterPreference.equalsIgnoreCase("2")) {
                                        HashMap requestParam = AccountingManager.getGlobalParams(request);
                                        requestParam.put("id", "");
                                        requestParam.put("name", productDefaultLocationName);
                                        requestParam.put("parent", null);
                                        KwlReturnObject jeresult = accountingHandlerDAOobj.getObject(User.class.getName(), userId);
                                        User user = (User) jeresult.getEntityList().get(0);
                                        requestParam.put("user", user);
                                        KwlReturnObject locationResult = accMasterItemsDAO.addLocationItem(requestParam);
                                        invLoc = (InventoryLocation) locationResult.getEntityList().get(0);
                                        productDefaultLocationID = invLoc.getId();
                                    } else {
                                        if (masterPreference.equalsIgnoreCase("1")) {
                                            productDefaultLocationID = null;
                                        } else {
                                            invalidColumn.put((Integer) columnConfig.get("locationName"), "Invalid");
                                            failureMsg += "Default Location is not found for " + productDefaultLocationName + ".";
                                        }
                                    }
                                }
                            }
                        } else {
                            productDefaultLocationID = null;
                        }


                        String productDefaultWarehouseID = "";
                        if (columnConfig.containsKey("warehouseName") && companyAccountPreferences.isIswarehousecompulsory()) {
                            String productDefaultWarehouseName = recarr[(Integer) columnConfig.get("warehouseName")].replaceAll("\"", "").trim();
                            if (!StringUtil.isNullOrEmpty(productDefaultWarehouseName)) {
                                InventoryWarehouse invWHouse = accProductModuleService.getInventoryWarehouseByName(productDefaultWarehouseName, companyid);
                                if (invWHouse != null) {
                                    productDefaultWarehouseID = invWHouse.getId();
                                } else {
                                    if (masterPreference.equalsIgnoreCase("2")) {
                                        Store store = new Store();
                                        store.setStoreType(storeService.getStoreType(0));//Set Store type to warehouse
                                        store.setAbbreviation(productDefaultWarehouseName);
                                        store.setDescription(productDefaultWarehouseName);
                                        store.setCcDateAllow(false);//set Default False
                                        store.setSmccAllow(false);//set Default False
                                        KwlReturnObject jeresult = accountingHandlerDAOobj.getObject(User.class.getName(), userId);
                                        User user = (User) jeresult.getEntityList().get(0);
                                        store.setCreatedBy(user);
                                        Set<User> userSet = new HashSet<>();
                                        userSet.add(user);
                                        Set<User> executiveSet = new HashSet<>();
                                        executiveSet.add(user);
                                        store.setCompany(user.getCompany());
                                        store.setStoreManagerSet(userSet);
                                        store.setStoreExecutiveSet(executiveSet);
                                        storeService.addStore(user, store);
                                        productDefaultWarehouseID = store.getId();
                                    } else {
                                        if (masterPreference.equalsIgnoreCase("1")) {
                                            productDefaultWarehouseID = null;
                                        } else {
                                            invalidColumn.put((Integer) columnConfig.get("warehouseName"), "Invalid");
                                            failureMsg += "Default Warehouse is not found for " + productDefaultWarehouseName + ".";
                                        }
                                    }
                                }
                            }
                        } else {
                            productDefaultWarehouseID = null;
                        }


                        Boolean isSyncable = false;
                        if (columnConfig.containsKey("syncable")) {
                            String productMakeAvailableInOtherApp = recarr[(Integer) columnConfig.get("syncable")].replaceAll("\"", "").trim();
                            if (!StringUtil.isNullOrEmpty(productMakeAvailableInOtherApp)) {
                                if (productMakeAvailableInOtherApp.equalsIgnoreCase("T")) {
                                    isSyncable = true;
                                } else if (productMakeAvailableInOtherApp.equalsIgnoreCase("F")) {
                                    isSyncable = false;
                                } else {
                                    invalidColumn.put((Integer) columnConfig.get("syncable"), "Invalid");
                                    failureMsg += "Format you entered is not correct for Make available in other application. It should be like \"T\" or \"F\".";
                                }
                            }
                        }


                        Boolean isMultiUOM = false;
                        if (columnConfig.containsKey("multiuom")) {
                            String multipleUOM = recarr[(Integer) columnConfig.get("multiuom")].replaceAll("\"", "").trim();
                            if (!StringUtil.isNullOrEmpty(multipleUOM)) {
                                if (multipleUOM.equalsIgnoreCase("T")) {
                                    isMultiUOM = true;
                                } else if (multipleUOM.equalsIgnoreCase("F")) {
                                    isMultiUOM = false;
                                } else {
                                    invalidColumn.put((Integer) columnConfig.get("multiuom"), "Invalid");
                                    failureMsg += "Format you entered is not correct for Multiple UOM. It should be like \"T\" or \"F\".";
                                }
                            }
                        }

                        Boolean isIslocationforproduct = false;
                        if (columnConfig.containsKey(Constants.ACTIVATE_LOCATION) && companyAccountPreferences.isIslocationcompulsory()) {
                            String ISlocationforproduct = recarr[(Integer) columnConfig.get(Constants.ACTIVATE_LOCATION)].replaceAll("\"", "").trim();
                            if (!StringUtil.isNullOrEmpty(ISlocationforproduct)) {
                                if (ISlocationforproduct.equalsIgnoreCase("T")) {
                                    isIslocationforproduct = true;
                                } else if (ISlocationforproduct.equalsIgnoreCase("F")) {
                                    isIslocationforproduct = false;
                                } else {
                                    invalidColumn.put((Integer) columnConfig.get(Constants.ACTIVATE_LOCATION), "Invalid");
                                    failureMsg += "Format you entered is not correct for Activate Location. It should be like \"T\" or \"F\".";
                                }
                            }
                        }

                        if (isIslocationforproduct && StringUtil.isNullOrEmpty(productDefaultLocationID) && (!updateExistingRecordFlag || (newProductAddinUpdateCase && updateExistingRecordFlag))) {
                            invalidColumn.put((Integer) columnConfig.get("locationName"), "Invalid");
                            failureMsg += "Location is activated but Default Location Value is not Provided.";
                        }

                        Boolean isIsSerialForProduct = false;
                        if (columnConfig.containsKey(Constants.ACTIVATE_SERIAL_NO) && companyAccountPreferences.isIsSerialCompulsory()) {
                            String IsSerialForProduct = recarr[(Integer) columnConfig.get(Constants.ACTIVATE_SERIAL_NO)].replaceAll("\"", "").trim();
                            if (!StringUtil.isNullOrEmpty(IsSerialForProduct)) {
                                if (IsSerialForProduct.equalsIgnoreCase("T")) {
                                    isIsSerialForProduct = true;
                                } else if (IsSerialForProduct.equalsIgnoreCase("F")) {
                                    isIsSerialForProduct = false;
                                } else {
                                    invalidColumn.put((Integer) columnConfig.get(Constants.ACTIVATE_SERIAL_NO), "Invalid");
                                    failureMsg += "Format you entered is not correct for Activate Serial No. It should be like \"T\" or \"F\".";
                                }
                            }
                        }

                        if (isIsSerialForProduct && Double.parseDouble(productInitialQuantity) > 0) {
                            invalidColumn.put((Integer) columnConfig.get("quantity"), "Invalid");
                            failureMsg += "Serial Data can't be imported because Opening Quantity is more than 0.";
                        }

                        Boolean isIswarehouseforproduct = false;
                        if (columnConfig.containsKey(Constants.ACTIVATE_WAREHOUSE) && companyAccountPreferences.isIswarehousecompulsory()) {
                            String Iswarehouseforproduct = recarr[(Integer) columnConfig.get(Constants.ACTIVATE_WAREHOUSE)].replaceAll("\"", "").trim();
                            if (!StringUtil.isNullOrEmpty(Iswarehouseforproduct)) {
                                if (Iswarehouseforproduct.equalsIgnoreCase("T")) {
                                    isIswarehouseforproduct = true;
                                } else if (Iswarehouseforproduct.equalsIgnoreCase("F")) {
                                    isIswarehouseforproduct = false;
                                } else {
                                    invalidColumn.put((Integer) columnConfig.get(Constants.ACTIVATE_WAREHOUSE), "Invalid");
                                    failureMsg += "Format you entered is not correct for Activate Warehouse. It should be like \"T\" or \"F\".";
                                }
                            }
                        }

                        if (isIswarehouseforproduct && StringUtil.isNullOrEmpty(productDefaultWarehouseID) && (!updateExistingRecordFlag || (newProductAddinUpdateCase && updateExistingRecordFlag))) {
                            invalidColumn.put((Integer) columnConfig.get("warehouseName"), "Invalid");
                            failureMsg += "Warehouse is activated but Default Warehouse Value is not Provided.";
                        }

                        Boolean isIsBatchForProduct = false;
                        if (columnConfig.containsKey(Constants.ACTIVATE_BATCH) && companyAccountPreferences.isIsBatchCompulsory()) {
                            String IsBatchForProduct = recarr[(Integer) columnConfig.get(Constants.ACTIVATE_BATCH)].replaceAll("\"", "").trim();
                            if (!StringUtil.isNullOrEmpty(IsBatchForProduct)) {
                                if (IsBatchForProduct.equalsIgnoreCase("T")) {
                                    isIsBatchForProduct = true;
                                } else if (IsBatchForProduct.equalsIgnoreCase("F")) {
                                    isIsBatchForProduct = false;
                                } else {
                                    invalidColumn.put((Integer) columnConfig.get(Constants.ACTIVATE_BATCH), "Invalid");
                                    failureMsg += "Format you entered is not correct for Activate Batches. It should be like \"T\" or \"F\"";
                                }
                            }
                        }

                        Boolean isIsRowForProduct = false;
                        if (columnConfig.containsKey(Constants.ACTIVATE_ROW) && companyAccountPreferences.isIsrowcompulsory()) {
                            String IsRowForProduct = recarr[(Integer) columnConfig.get(Constants.ACTIVATE_ROW)].replaceAll("\"", "").trim();
                            if (!StringUtil.isNullOrEmpty(IsRowForProduct)) {
                                if (IsRowForProduct.equalsIgnoreCase("T")) {
                                    isIsRowForProduct = true;
                                } else if (IsRowForProduct.equalsIgnoreCase("F")) {
                                    isIsRowForProduct = false;
                                } else {
                                    invalidColumn.put((Integer) columnConfig.get(Constants.ACTIVATE_ROW), "Invalid");
                                    failureMsg += "Format you entered is not correct for Activate Row. It should be like \"T\" or \"F\".";
                                }
                            }
                        }
                        Boolean isIsRackForProduct = false;
                        if (columnConfig.containsKey(Constants.ACTIVATE_RACK) && companyAccountPreferences.isIsrackcompulsory()) {
                            String IsRackForProduct = recarr[(Integer) columnConfig.get(Constants.ACTIVATE_RACK)].replaceAll("\"", "").trim();
                            if (!StringUtil.isNullOrEmpty(IsRackForProduct)) {
                                if (IsRackForProduct.equalsIgnoreCase("T")) {
                                    isIsRackForProduct = true;
                                } else if (IsRackForProduct.equalsIgnoreCase("F")) {
                                    isIsRackForProduct = false;
                                } else {
                                    invalidColumn.put((Integer) columnConfig.get(Constants.ACTIVATE_RACK), "Invalid");
                                    failureMsg += "Format you entered is not correct for Activate Rack. It should be like \"T\" or \"F\".";
                                }
                            }
                        }
                        Boolean isIsBinForProduct = false;
                        if (columnConfig.containsKey(Constants.ACTIVATE_BIN) && companyAccountPreferences.isIsbincompulsory()) {
                            String IsBinForProduct = recarr[(Integer) columnConfig.get(Constants.ACTIVATE_BIN)].replaceAll("\"", "").trim();
                            if (!StringUtil.isNullOrEmpty(IsBinForProduct)) {
                                if (IsBinForProduct.equalsIgnoreCase("T")) {
                                    isIsBinForProduct = true;
                                } else if (IsBinForProduct.equalsIgnoreCase("F")) {
                                    isIsBinForProduct = false;
                                } else {
                                    invalidColumn.put((Integer) columnConfig.get(Constants.ACTIVATE_BIN), "Invalid");
                                    failureMsg += "Format you entered is not correct for Activate Bin. It should be like \"T\" or \"F\".";
                                }
                            }
                        }

                        String wipoffset = "";
                        if (columnConfig.containsKey("wipoffset")) {
                            String temp = recarr[(Integer) columnConfig.get("wipoffset")].replaceAll("\"", "").trim();
                            if (!StringUtil.isNullOrEmpty(temp)) {
                                wipoffset = temp;
                            }
                        }

                        String inventoryoffset = "";
                        if (columnConfig.containsKey("inventoryoffset")) {
                            String temp = recarr[(Integer) columnConfig.get("inventoryoffset")].replaceAll("\"", "").trim();
                            if (!StringUtil.isNullOrEmpty(temp)) {
                                inventoryoffset = temp;
                            }
                        }

                        String hscode = "";
                        if (columnConfig.containsKey("hscode")) {
                            String temp = recarr[(Integer) columnConfig.get("hscode")].replaceAll("\"", "").trim();
                            if (!StringUtil.isNullOrEmpty(temp)) {
                                hscode = temp;
                            }
                        }
                        String additionalfreetext = "";
                        if (columnConfig.containsKey("additionalfreetext")) {
                            String temp = recarr[(Integer) columnConfig.get("additionalfreetext")].replaceAll("\"", "").trim();
                            if (!StringUtil.isNullOrEmpty(temp)) {
                                additionalfreetext = temp;
                            }
                        }
                        String itemcolor = "";
                        if (columnConfig.containsKey("itemcolor")) {
                            String temp = recarr[(Integer) columnConfig.get("itemcolor")].replaceAll("\"", "").trim();
                            if (!StringUtil.isNullOrEmpty(temp)) {
                                itemcolor = temp;
                            }
                        }
                        String alternateproduct = "";
                        if (columnConfig.containsKey("alternateproduct")) {
                            String temp = recarr[(Integer) columnConfig.get("alternateproduct")].replaceAll("\"", "").trim();
                            if (!StringUtil.isNullOrEmpty(temp)) {
                                alternateproduct = temp;
                            }
                        }
                        String purchasemfg = "";
                        if (columnConfig.containsKey("purchasemfg")) {
                            String temp = recarr[(Integer) columnConfig.get("purchasemfg")].replaceAll("\"", "").trim();
                            if (!StringUtil.isNullOrEmpty(temp)) {
                                purchasemfg = temp;
                            }
                        }
                        String catalogno = "";
                        if (columnConfig.containsKey("catalogno")) {
                            String temp = recarr[(Integer) columnConfig.get("catalogno")].replaceAll("\"", "").trim();
                            if (!StringUtil.isNullOrEmpty(temp)) {
                                catalogno = temp;
                            }
                        }
                        String barcode = "";
                        if (columnConfig.containsKey("barcode")) {
                            String temp = recarr[(Integer) columnConfig.get("barcode")].replaceAll("\"", "").trim();
                            if (!StringUtil.isNullOrEmpty(temp)) {
                                barcode = temp;
                            }
                        }
                        String additionaldesc = "";
                        if (columnConfig.containsKey("additionaldesc")) {
                            String temp = recarr[(Integer) columnConfig.get("additionaldesc")].replaceAll("\"", "").trim();
                            if (!StringUtil.isNullOrEmpty(temp)) {
                                additionaldesc = temp;
                            }
                        }
                        String descinforeign = "";
                        if (columnConfig.containsKey("descinforeign")) {
                            String temp = recarr[(Integer) columnConfig.get("descinforeign")].replaceAll("\"", "").trim();
                            if (!StringUtil.isNullOrEmpty(temp)) {
                                descinforeign = temp;
                            }
                        }
                        String licensecode = "";
                        if (columnConfig.containsKey("licensecode")) {
                            String temp = recarr[(Integer) columnConfig.get("licensecode")].replaceAll("\"", "").trim();
                            if (!StringUtil.isNullOrEmpty(temp)) {
                                licensecode = temp;
                            }
                        }
                        String itemgroup = "";
                        if (columnConfig.containsKey("itemgroup")) {
                            String temp = recarr[(Integer) columnConfig.get("itemgroup")].replaceAll("\"", "").trim();
                            if (!StringUtil.isNullOrEmpty(temp)) {
                                itemgroup = temp;
                            }
                        }
                        String pricelist = "";
                        if (columnConfig.containsKey("pricelist")) {
                            String temp = recarr[(Integer) columnConfig.get("pricelist")].replaceAll("\"", "").trim();
                            if (!StringUtil.isNullOrEmpty(temp)) {
                                pricelist = temp;
                            }
                        }
                        String shippingtype = "";
                        if (columnConfig.containsKey("shippingtype")) {
                            String temp = recarr[(Integer) columnConfig.get("shippingtype")].replaceAll("\"", "").trim();
                            if (!StringUtil.isNullOrEmpty(temp)) {
                                shippingtype = temp;
                            }
                        }
                        Boolean recyclable = false;
                        if (columnConfig.containsKey("recyclable")) {
                            String temp = recarr[(Integer) columnConfig.get("recyclable")].replaceAll("\"", "").trim();
                            if (!StringUtil.isNullOrEmpty(temp)) {
                                String isRecyclable = temp;
                                if (isRecyclable.equalsIgnoreCase("T")) {
                                    recyclable = true;
                                } else if (isRecyclable.equalsIgnoreCase("F")) {
                                    recyclable = false;
                                } else {
                                    invalidColumn.put((Integer) columnConfig.get("recyclable"), "Invalid");
                                    failureMsg += "Format you entered is not correct for Is Recyclable. It should be like \"T\" or \"F\".";
                                }
                            }
                        }
                        Boolean qaenable = false;
                        if (columnConfig.containsKey("qaenable")) {
                            String temp = recarr[(Integer) columnConfig.get("qaenable")].replaceAll("\"", "").trim();
                            if (!StringUtil.isNullOrEmpty(temp)) {
                                String isQaenable = temp;
                                if (isQaenable.equalsIgnoreCase("T")) {
                                    qaenable = true;
                                } else if (isQaenable.equalsIgnoreCase("F")) {
                                    qaenable = false;
                                } else {
                                    invalidColumn.put((Integer) columnConfig.get("qaenable"), "Invalid");
                                    failureMsg += "Format you entered is not correct for QA Enable. It should be like \"T\" or \"F\".";
                                }
                            }
                        }
                        Boolean isknittingitem = false;
                        if (columnConfig.containsKey("isknittingitem")) {
                            String temp = recarr[(Integer) columnConfig.get("isknittingitem")].replaceAll("\"", "").trim();
                            if (!StringUtil.isNullOrEmpty(temp)) {
                                String isIsknittingitem = temp;
                                if (isIsknittingitem.equalsIgnoreCase("T")) {
                                    isknittingitem = true;
                                } else if (isIsknittingitem.equalsIgnoreCase("F")) {
                                    isknittingitem = false;
                                } else {
                                    invalidColumn.put((Integer) columnConfig.get("isknittingitem"), "Invalid");
                                    failureMsg += "Format you entered is not correct for Is Kitting item. It should be like \"T\" or \"F\".";
                                }
                            }
                        }
                        Boolean isactive = false;
                        if (columnConfig.containsKey("isactive")) {
                            String temp = recarr[(Integer) columnConfig.get("isactive")].replaceAll("\"", "").trim();
                            if (!StringUtil.isNullOrEmpty(temp)) {
                                String isIsactive = temp;
                                if (isIsactive.equalsIgnoreCase("T")) {
                                    isactive = true;
                                } else if (isIsactive.equalsIgnoreCase("F")) {
                                    isactive = false;
                                } else {
                                    invalidColumn.put((Integer) columnConfig.get("isactive"), "Invalid");
                                    failureMsg += "Format you entered is not correct for Is Active. It should be like \"T\" or \"F\".";
                                }
                            }
                        }
                        Boolean blockloosesell = false;
                        if (columnConfig.containsKey("blockloosesell")) {
                            String temp = recarr[(Integer) columnConfig.get("blockloosesell")].replaceAll("\"", "").trim();
                            if (!StringUtil.isNullOrEmpty(temp)) {
                                String isBlockloosesell = temp;
                                if (isBlockloosesell.equalsIgnoreCase("T")) {
                                    blockloosesell = true;
                                } else if (isBlockloosesell.equalsIgnoreCase("F")) {
                                    blockloosesell = false;
                                } else {
                                    invalidColumn.put((Integer) columnConfig.get("blockloosesell"), "Invalid");
                                    failureMsg += "Format you entered is not correct for Block Loose Selling. It should be like \"T\" or \"F\".";
                                }
                            }
                        }
                        String itemsalesvolume = "";
                        if (columnConfig.containsKey("itemsalesvolume")) {
                            String temp = recarr[(Integer) columnConfig.get("itemsalesvolume")].replaceAll("\"", "").trim();
                            if (!StringUtil.isNullOrEmpty(temp)) {
                                itemsalesvolume = temp;
                                try {
                                    Object vDataValue = Double.parseDouble(itemsalesvolume);
                                } catch (Exception ex) {
                                    if (masterPreference.equals("1")) {
                                        itemsalesvolume = "";
                                    } else {
                                        invalidColumn.put((Integer) columnConfig.get("itemsalesvolume"), "Invalid");
                                        failureMsg += "Incorrect numeric value for item Sales Volume, Please ensure that value type of item Sales Volume matches with the item Sales Volume.";
                                    }
                                }
                            }
                        }
                        String productweight = "0";
                        if (columnConfig.containsKey("productweight")) {
                            String temp = recarr[(Integer) columnConfig.get("productweight")].replaceAll("\"", "").trim();
                            if (!StringUtil.isNullOrEmpty(temp)) {
                                productweight = temp;
                                try {
                                    Object vDataValue = Double.parseDouble(productweight);
                                } catch (Exception ex) {
                                    if (masterPreference.equals("1")) {
                                        productweight = "0";
                                    } else {
                                        invalidColumn.put((Integer) columnConfig.get("productweight"), "Invalid");
                                        failureMsg += "Incorrect numeric value for product weight, Please ensure that value type of product weight matches with the product weight.";
                                    }
                                }
                            }
                        }
                        String itemsaleswidth = "";
                        if (columnConfig.containsKey("itemsaleswidth")) {
                            String temp = recarr[(Integer) columnConfig.get("itemsaleswidth")].replaceAll("\"", "").trim();
                            if (!StringUtil.isNullOrEmpty(temp)) {
                                itemsaleswidth = temp;
                                try {
                                    Object vDataValue = Double.parseDouble(itemsaleswidth);
                                } catch (Exception ex) {
                                    if (masterPreference.equals("1")) {
                                        itemsaleswidth = "";
                                    } else {
                                        invalidColumn.put((Integer) columnConfig.get("itemsaleswidth"), "Invalid");
                                        failureMsg += "Incorrect numeric value for Item Sales Width, Please ensure that value type of Item Sales Width matches with the Item Sales Width.";
                                    }
                                }
                            }
                        }
                        String itemsalesheight = "";
                        if (columnConfig.containsKey("itemsalesheight")) {
                            String temp = recarr[(Integer) columnConfig.get("itemsalesheight")].replaceAll("\"", "").trim();
                            if (!StringUtil.isNullOrEmpty(temp)) {
                                itemsalesheight = temp;
                                try {
                                    Object vDataValue = Double.parseDouble(itemsalesheight);
                                } catch (Exception ex) {
                                     if (masterPreference.equals("1")) {
                                        itemsalesheight = "";
                                    } else {
                                        invalidColumn.put((Integer) columnConfig.get("itemsalesheight"), "Invalid");
                                        failureMsg += "Incorrect numeric value for Item Sales Height, Please ensure that value type of Item Sales Height matches with the Item Sales Height.";
                                    }
                                }
                            }
                        }
                        String itemwidth = "";
                        if (columnConfig.containsKey("itemwidth")) {
                            String temp = recarr[(Integer) columnConfig.get("itemwidth")].replaceAll("\"", "").trim();
                            if (!StringUtil.isNullOrEmpty(temp)) {
                                itemwidth = temp;
                                try {
                                    Object vDataValue = Double.parseDouble(itemwidth);
                                } catch (Exception ex) {
                                    if (masterPreference.equals("1")) {
                                        itemwidth = "";
                                    } else {
                                        invalidColumn.put((Integer) columnConfig.get("itemwidth"), "Invalid");
                                        failureMsg += "Incorrect numeric value for Item Width, Please ensure that value type of Item Width matches with the Item Width.";
                                    }
                                }
                            }
                        }
                        String itemvolume = "";
                        if (columnConfig.containsKey("itemvolume")) {
                            String temp = recarr[(Integer) columnConfig.get("itemvolume")].replaceAll("\"", "").trim();
                            if (!StringUtil.isNullOrEmpty(temp)) {
                                itemvolume = temp;
                                try {
                                    Object vDataValue = Double.parseDouble(itemvolume);
                                } catch (Exception ex) {
                                    if (masterPreference.equals("1")) {
                                        itemvolume = "";
                                    } else {
                                        invalidColumn.put((Integer) columnConfig.get("itemvolume"), "Invalid");
                                        failureMsg += "Incorrect numeric value for Item Width, Please ensure that value type of Item Width matches with the Item Width.";
                                    }
                                }
                            }
                        }
                        ValuationMethod valMethod = ValuationMethod.FIFO;
                        if (columnConfig.containsKey("valuationmethod")) {
                            String temp = recarr[(Integer) columnConfig.get("valuationmethod")].replaceAll("\"", "").trim();
                            if (!StringUtil.isNullOrEmpty(temp)) {
                                if (temp.equalsIgnoreCase("LIFO")) {
                                    temp = "0";
                                } else if (temp.equalsIgnoreCase("FIFO")) {
                                    temp = "1";
                                } else if (temp.equalsIgnoreCase("Moving Average")) {
                                    temp = "2";
                                } else {
                                    invalidColumn.put((Integer) columnConfig.get("valuationmethod"), "Invalid");
                                    failureMsg += "Value is not valid for column. It should be 'FIFO' or 'LIFO' or 'Moving Average'.";
                                }
                                int valuationMethod = Integer.parseInt(temp);
                                for (ValuationMethod st : ValuationMethod.values()) {
                                    if (st.ordinal() == valuationMethod) {
                                        valMethod = st;
                                        break;
                                    }
                                }
                            }
                        } else {
                            valMethod = ValuationMethod.FIFO;
                        }
                        String itempurchasewidth = "";
                        if (columnConfig.containsKey("itempurchasewidth")) {
                            String temp = recarr[(Integer) columnConfig.get("itempurchasewidth")].replaceAll("\"", "").trim();
                            if (!StringUtil.isNullOrEmpty(temp)) {
                                itempurchasewidth = temp;
                                try {
                                    Object vDataValue = Double.parseDouble(itempurchasewidth);
                                } catch (Exception ex) {
                                    if (masterPreference.equals("1")) {
                                        itempurchasewidth = "";
                                    } else {
                                        invalidColumn.put((Integer) columnConfig.get("itempurchasewidth"), "Invalid");
                                        failureMsg += "Incorrect numeric value for Item Purchase Width, Please ensure that value type of Item Purchase Width matches with the Item Purchase Width.";
                                    }
                                }
                            }
                        }
                        String itempurchasevolume = "";
                        if (columnConfig.containsKey("itempurchasevolume")) {
                            String temp = recarr[(Integer) columnConfig.get("itempurchasevolume")].replaceAll("\"", "").trim();
                            if (!StringUtil.isNullOrEmpty(temp)) {
                                itempurchasevolume = temp;
                                try {
                                    Object vDataValue = Double.parseDouble(itempurchasevolume);
                                } catch (Exception ex) {
                                    if (masterPreference.equals("1")) {
                                        itempurchasevolume = "";
                                    } else {
                                        invalidColumn.put((Integer) columnConfig.get("itempurchasevolume"), "Invalid");
                                        failureMsg += "Incorrect numeric value for Item Purchase Volume, Please ensure that value type of Item Purchase Volume matches with the Item Purchase Volume.";
                                    }
                                }
                            }
                        }
                        String itempurchaselength = "0";
                        if (columnConfig.containsKey("itempurchaselength")) {
                            String temp = recarr[(Integer) columnConfig.get("itempurchaselength")].replaceAll("\"", "").trim();
                            if (!StringUtil.isNullOrEmpty(temp)) {
                                itempurchaselength = temp;
                                try {
                                    Object vDataValue = Double.parseDouble(itempurchaselength);
                                } catch (Exception ex) {
                                    if (masterPreference.equals("1")) {
                                        itempurchaselength = "0";
                                    } else {
                                        invalidColumn.put((Integer) columnConfig.get("itempurchaselength"), "Invalid");
                                        failureMsg += "Incorrect numeric value for Item Purchase Length, Please ensure that value type of Item Purchase Length matches with the Item Purchase Length.";
                                    }
                                }
                            }
                        }
                        String qaleadtimeindays = "0";
                        if (columnConfig.containsKey("qaleadtimeindays")) {
                            String temp = recarr[(Integer) columnConfig.get("qaleadtimeindays")].replaceAll("\"", "").trim();
                            if (!StringUtil.isNullOrEmpty(temp)) {
                                qaleadtimeindays = temp;
                                try {
                                    Object vDataValue = Integer.parseInt(qaleadtimeindays);
                                } catch (Exception ex) {
                                    if (masterPreference.equals("1")) {
                                        qaleadtimeindays = "0";
                                    } else {
                                        invalidColumn.put((Integer) columnConfig.get("qaleadtimeindays"), "Invalid");
                                        failureMsg += "Incorrect numeric value for QA Lead Time(in days), Please ensure that value type of QA Lead Time(in days) matches with the QA Lead Time(in days).";
                                    }
                                }
                            }
                        }
                        String reusabilitycount = "";
                        if (columnConfig.containsKey("reusabilitycount")) {
                            String temp = recarr[(Integer) columnConfig.get("reusabilitycount")].replaceAll("\"", "").trim();
                            if (!StringUtil.isNullOrEmpty(temp)) {
                                reusabilitycount = temp;
                                try {
                                    Object vDataValue = Integer.parseInt(reusabilitycount);
                                } catch (Exception ex) {
                                    if (masterPreference.equals("1")) {
                                        reusabilitycount = "";
                                    } else {
                                        invalidColumn.put((Integer) columnConfig.get("reusabilitycount"), "Invalid");
                                        failureMsg += "Incorrect numeric value for Re-usability Count, Please ensure that value type of Re-usability Count matches with the Re-usability Count.";
                                    }
                                }
                            }
                        }

                        String orderinguom = "";
                        UnitOfMeasure orderuom = null;
                        if (columnConfig.containsKey("orderinguom")) {
                            String productUOMName = recarr[(Integer) columnConfig.get("orderinguom")].replaceAll("\"", "").trim();
                            if (!StringUtil.isNullOrEmpty(productUOMName)) {
                                orderuom = accProductModuleService.getUOMByName(productUOMName, companyid);
                                if (orderuom != null) {
                                    orderinguom = orderuom.getID();
                                } else {
                                    if (masterPreference.equalsIgnoreCase("2")) {
                                        HashMap<String, Object> uomMap = new HashMap<String, Object>();
                                        uomMap.put("uomname", StringUtil.DecodeText(productUOMName));
                                        uomMap.put("uomtype",StringUtil.DecodeText(productUOMName));
                                        uomMap.put("precision", 0);
                                        uomMap.put("companyid", companyid);

                                        KwlReturnObject uomresult = accUomObj.addUoM(uomMap);
                                        orderuom = (UnitOfMeasure) uomresult.getEntityList().get(0);
                                        orderinguom = orderuom.getID();
                                    } else {
                                        if (masterPreference.equalsIgnoreCase("1")) {
                                            orderinguom = "";
                                        } else {
                                            invalidColumn.put((Integer) columnConfig.get("orderinguom"), "Invalid");
                                            failureMsg += "Product Ordering Unit Of Measure is not found for " + productUOMName + ".";
                                        }
                                    }
                                }
                            }
                        } else {
                            orderinguom = "";
                        }
                        String transferuom = "";
                        UnitOfMeasure transferUOM = null;
                        if (columnConfig.containsKey("transferuom")) {
                            String productUOMName = recarr[(Integer) columnConfig.get("transferuom")].replaceAll("\"", "").trim();
                            if (!StringUtil.isNullOrEmpty(productUOMName)) {
                                transferUOM = accProductModuleService.getUOMByName(productUOMName, companyid);
                                if (transferUOM != null) {
                                    transferuom = transferUOM.getID();
                                } else {
                                    if (masterPreference.equalsIgnoreCase("2")) {
                                        HashMap<String, Object> uomMap = new HashMap<String, Object>();
                                        uomMap.put("uomname", StringUtil.DecodeText(productUOMName));
                                        uomMap.put("uomtype", StringUtil.DecodeText(productUOMName));
                                        uomMap.put("precision", 0);
                                        uomMap.put("companyid", companyid);

                                        KwlReturnObject uomresult = accUomObj.addUoM(uomMap);
                                        transferUOM = (UnitOfMeasure) uomresult.getEntityList().get(0);
                                        transferuom = transferUOM.getID();
                                    } else {
                                        if (masterPreference.equalsIgnoreCase("1")) {
                                            transferuom = "";
                                        } else {
                                            invalidColumn.put((Integer) columnConfig.get("transferuom"), "Invalid");
                                            failureMsg += "Product Transfer Unit Of Measure is not found for " + productUOMName + ".";
                                        }
                                    }
                                }
                            }
                        } else {
                            transferuom = "";
                        }

                        String supplierPartNumber = "";
                        if (columnConfig.containsKey("supplier")) {
                            supplierPartNumber = recarr[(Integer) columnConfig.get("supplier")].replaceAll("\"", "").trim();
                        }

                        String partNumber = "";
                        if (columnConfig.containsKey("coilcraft")) {
                            partNumber = recarr[(Integer) columnConfig.get("coilcraft")].replaceAll("\"", "").trim();
                        }

                        String CustomerPartNumber = "";
                        if (columnConfig.containsKey("interplant")) {
                            CustomerPartNumber = recarr[(Integer) columnConfig.get("interplant")].replaceAll("\"", "").trim();
                        }

                        // For create custom field array
                        customfield = "";
                        JSONArray customJArr = new JSONArray();
                        for (int i = 0; i < jSONArray.length(); i++) {
                            JSONObject jSONObject = jSONArray.getJSONObject(i);

                            if (jSONObject.optBoolean("customflag", false)) {
                                HashMap<String, Object> requestParams = new HashMap<String, Object>();
                                requestParams.put(Constants.filter_names, Arrays.asList(Constants.companyid, Constants.moduleid, Constants.fieldlabel));
                                requestParams.put(Constants.filter_values, Arrays.asList(companyid, Constants.Acc_Product_Master_ModuleId, jSONObject.getString("columnname")));

                                KwlReturnObject fieldParamsResult = accCommonTablesDAO.getFieldParams(requestParams); // get custom field for module
                                FieldParams params = (FieldParams) fieldParamsResult.getEntityList().get(0);
                                if (jSONObject.getInt("csvindex") > recarr.length - 1) {// (csv) arrayindexoutofbound when last custom column value is empty.
                                    continue;
                                }
                                if (!StringUtil.isNullOrEmpty(recarr[jSONObject.getInt("csvindex")].replaceAll("\"", "").trim())) {
                                    JSONObject customJObj = new JSONObject();
                                    customJObj.put("fieldid", params.getId());
                                    customJObj.put("filedid", params.getId());
                                    customJObj.put("refcolumn_name", "Col" + params.getRefcolnum());
                                    customJObj.put("fieldname", "Custom_" + params.getFieldlabel());
                                    customJObj.put("xtype", params.getFieldtype());

                                    String fieldComboDataStr = "";
                                    if (params.getFieldtype() == 3) { // if field of date type
                                        String dateStr = recarr[jSONObject.getInt("csvindex")].replaceAll("\"", "").trim();
                                        try {
                                            customJObj.put("Col" + params.getColnum(), df.parse(dateStr).getTime());
                                            customJObj.put("fieldDataVal", df.parse(dateStr).getTime());
                                        } catch (Exception ex) {
                                            invalidColumn.put(jSONObject.getInt("csvindex"), "Invalid");
                                            failureMsg += "Incorrect date format for " + jSONObject.getString("columnname") + ", Please specify values in " + dateFormat + " format.";
                                        }
                                    } else if (params.getFieldtype() == 4 || params.getFieldtype() == 7) { // if field of MultiSelect Drop Down OR Drop Down
                                        String[] fieldComboDataArr = recarr[jSONObject.getInt("csvindex")].replaceAll("\"", "").trim().split(";");

                                        for (int dataArrIndex = 0; dataArrIndex < fieldComboDataArr.length; dataArrIndex++) {
                                            if (!StringUtil.isNullOrEmpty(fieldComboDataArr[dataArrIndex])) {
                                                requestParams = new HashMap<String, Object>();
                                                requestParams.put(Constants.filter_names, Arrays.asList(Constants.Acc_custom_fieldId, "value", "deleteflag"));
                                                requestParams.put(Constants.filter_values, Arrays.asList(params.getId(), fieldComboDataArr[dataArrIndex], 0));


                                                fieldParamsResult = accCommonTablesDAO.getCustomCombodata(requestParams);
                                                if (fieldParamsResult != null && !fieldParamsResult.getEntityList().isEmpty()) {
                                                    FieldComboData fieldComboData = (FieldComboData) fieldParamsResult.getEntityList().get(0);
                                                    fieldComboDataStr += fieldComboData.getId() + ",";
                                                } else {
                                                    invalidColumn.put(jSONObject.getInt("csvindex"), "Invalid");
                                                    failureMsg += jSONObject.getString("columnname") + " entry not found in master list for " + jSONObject.getString("columnname") + " dropdown.";
                                                }
                                            }
                                        }

                                        if (!StringUtil.isNullOrEmpty(fieldComboDataStr)) {
                                            customJObj.put("Col" + params.getColnum(), fieldComboDataStr.substring(0, fieldComboDataStr.length() - 1));
                                            customJObj.put("fieldDataVal", fieldComboDataStr.substring(0, fieldComboDataStr.length() - 1));
                                        } else {
                                            continue;
                                        }
                                    } else if (params.getFieldtype() == 11) { // if field of check box type 
                                        customJObj.put("Col" + params.getColnum(), Boolean.parseBoolean(recarr[jSONObject.getInt("csvindex")].replaceAll("\"", "").trim()));
                                        customJObj.put("fieldDataVal", Boolean.parseBoolean(recarr[jSONObject.getInt("csvindex")].replaceAll("\"", "").trim()));
                                    } else if (params.getFieldtype() == 12) { // if field of check list type
                                        requestParams = new HashMap<String, Object>();
                                        requestParams.put(Constants.filter_names, Arrays.asList(Constants.Acc_custom_fieldId, "deleteflag"));
                                        requestParams.put(Constants.filter_values, Arrays.asList(params.getId(), 0));


                                        fieldParamsResult = accCommonTablesDAO.getCustomCombodata(requestParams);
                                        List<FieldComboData> fieldComboDataList = fieldParamsResult.getEntityList();

                                        String[] fieldComboDataArr = recarr[jSONObject.getInt("csvindex")].replaceAll("\"", "").trim().split(";");

                                        int dataArrIndex = 0;

                                        for (FieldComboData fieldComboData : fieldComboDataList) {
                                            if (fieldComboDataArr.length != dataArrIndex && fieldComboDataArr[dataArrIndex] != null && fieldComboDataArr[dataArrIndex].replaceAll("\"", "").trim().equalsIgnoreCase("true")) {
                                                fieldComboDataStr += fieldComboData.getId() + ",";
                                            }
                                            dataArrIndex++;
                                        }

                                        if (!StringUtil.isNullOrEmpty(fieldComboDataStr)) {
                                            customJObj.put("Col" + params.getColnum(), fieldComboDataStr.substring(0, fieldComboDataStr.length() - 1));
                                            customJObj.put("fieldDataVal", fieldComboDataStr.substring(0, fieldComboDataStr.length() - 1));
                                        } else {
                                            continue;
                                        }
                                    } else if (params.getFieldtype() == 2) { // if field of Number field type
                                        String numStr = recarr[jSONObject.getInt("csvindex")].replaceAll("\"", "").trim();
                                        if (!StringUtil.isNullOrEmpty(numStr)) {
                                            try {
                                                Object vDataValue = Double.parseDouble(numStr);
                                            } catch (Exception ex) {
                                                invalidColumn.put(jSONObject.getInt("csvindex"), "Invalid");
                                                failureMsg += "Incorrect numeric value for " + jSONObject.getString("columnname") + ", Please ensure that value type of " + jSONObject.getString("columnname") + " matches with the " + jSONObject.getString("columnname") + ".";
                                            }
                                        }
                                        customJObj.put("Col" + params.getColnum(), recarr[jSONObject.getInt("csvindex")].replaceAll("\"", "").trim());
                                        customJObj.put("fieldDataVal", recarr[jSONObject.getInt("csvindex")].replaceAll("\"", "").trim());
                                    } else {
                                        customJObj.put("Col" + params.getColnum(), recarr[jSONObject.getInt("csvindex")].replaceAll("\"", "").trim());
                                        customJObj.put("fieldDataVal", recarr[jSONObject.getInt("csvindex")].replaceAll("\"", "").trim());
                                    }

                                    customJObj.put("Custom_" + params.getFieldlabel(), "Col" + params.getColnum());

                                    customJArr.put(customJObj);
                                }
                            }
                        }

                        customfield = customJArr.toString();

                        // if Ordering UOM is not in Stock UOM, Inner UOM or Casing UOM fail record by exception msg
                        if (!StringUtil.isNullOrEmpty(orderinguom) && !(productUOMID.equalsIgnoreCase(orderinguom) || innerUoMID.equalsIgnoreCase(orderinguom) || casingUoMID.equalsIgnoreCase(orderinguom))) {
                            invalidColumn.put((Integer) columnConfig.get("orderinguom"), "Invalid");
                            failureMsg += "Ordering UOM are not matching with either Stock UOM or Inner UOM or Casing UOM.";
                        }

                        // if Transfer UOM is not in Stock UOM, Inner UOM or Casing UOM fail record by exception msg
                        if (!StringUtil.isNullOrEmpty(transferuom) && !(productUOMID.equalsIgnoreCase(transferuom) || innerUoMID.equalsIgnoreCase(transferuom) || casingUoMID.equalsIgnoreCase(transferuom))) {
                            invalidColumn.put((Integer) columnConfig.get("transferuom"), "Invalid");
                            failureMsg += "Transfer UOM are not matching with either Stock UOM or Inner UOM or Casing UOM.";
                        }

                        // if Purchase UOM is not in Stock UOM, Inner UOM or Casing UOM fail record by exception msg
                        if (!StringUtil.isNullOrEmpty(PurchaseUOMID) && !(productUOMID.equalsIgnoreCase(PurchaseUOMID) || innerUoMID.equalsIgnoreCase(PurchaseUOMID) || casingUoMID.equalsIgnoreCase(PurchaseUOMID))) {
                            invalidColumn.put((Integer) columnConfig.get("purchaseuom"), "Invalid");
                            failureMsg += "Purchase UOM are not matching with either Stock UOM or Inner UOM or Casing UOM.";
                        }

                        // if Sales UOM is not in Stock UOM, Inner UOM or Casing UOM fail record by exception msg
                        if (!StringUtil.isNullOrEmpty(SalesUOMID) && !(productUOMID.equalsIgnoreCase(SalesUOMID) || innerUoMID.equalsIgnoreCase(SalesUOMID) || casingUoMID.equalsIgnoreCase(SalesUOMID))) {
                            invalidColumn.put((Integer) columnConfig.get("salesuom"), "Invalid");
                            failureMsg += "Sales UOM are not matching with either Stock UOM or Inner UOM or Casing UOM.";
                        }

                        Date asOfDate = null;
                        if (columnConfig.containsKey("asofdate")) {//when AsofDate header is mapped
                            String asofdate = recarr[(Integer) columnConfig.get("asofdate")].replaceAll("\"", "").trim();
                            if (!StringUtil.isNullOrEmpty(asofdate)) {//when data is not null and empty
                                try {
                                    df.setLenient(false);
                                    asOfDate = df.parse(asofdate);
                                } catch (Exception ex) {
                                    if (masterPreference.equalsIgnoreCase("1")) {//when set empty option is selected then setting its default value bookbeginning date
                                        asOfDate = bookBookBeginningDate;
                                    } else {
                                        invalidColumn.put((Integer) columnConfig.get("asofdate"), "Invalid");
                                        failureMsg += "Incorrect date format for As Of Date, Please specify values in " + dateFormat + " format.";
                                    }
                                }
                            } else {//when value is null or empty
                                if (masterPreference.equals("0")) {//most resticted
                                    invalidColumn.put((Integer) columnConfig.get("asofdate"), "Invalid");
                                    failureMsg += "Empty data found in As Of Date, cannot set empty data for As Of Date.";
                                } else if (masterPreference.equals("2") || masterPreference.equals("1")) {// add new case and set empty case
                                    asOfDate = bookBookBeginningDate;
                                }
                            }
                        }
                        
                        if (nocount > 0 && updateExistingRecordFlag && !result.getEntityList().isEmpty()) {
                            productOldObj = (Product) result.getEntityList().get(0);
                            String propChangeErrMsg = "";
                            if (productOldObj != null && productOldObj.getAvailableQuantity() > 0) {
                                    if (productOldObj.isIswarehouseforproduct() != isIswarehouseforproduct) {
                                        invalidColumn.put((Integer) columnConfig.get(Constants.ACTIVATE_WAREHOUSE), "Invalid");
                                        propChangeErrMsg += StringUtil.isNullOrEmpty(propChangeErrMsg) ? "warehouse" : " ,warehouse";
                                    }
                                    if (productOldObj.isIslocationforproduct() != isIslocationforproduct) {
                                        invalidColumn.put((Integer) columnConfig.get(Constants.ACTIVATE_LOCATION), "Invalid");
                                        propChangeErrMsg += StringUtil.isNullOrEmpty(propChangeErrMsg) ? "location" : " ,location";
                                    }
                                    if (productOldObj.isIsrowforproduct() != isIsRowForProduct) {
                                        invalidColumn.put((Integer) columnConfig.get(Constants.ACTIVATE_ROW), "Invalid");
                                        propChangeErrMsg += StringUtil.isNullOrEmpty(propChangeErrMsg) ? "row" : " ,row";
                                    }
                                    if (productOldObj.isIsrackforproduct() != isIsRackForProduct) {
                                        invalidColumn.put((Integer) columnConfig.get(Constants.ACTIVATE_RACK), "Invalid");
                                        propChangeErrMsg += StringUtil.isNullOrEmpty(propChangeErrMsg) ? "rack" : " ,rack";
                                    }
                                    if (productOldObj.isIsbinforproduct() != isIsBinForProduct) {
                                        invalidColumn.put((Integer) columnConfig.get(Constants.ACTIVATE_BIN), "Invalid");
                                        propChangeErrMsg += StringUtil.isNullOrEmpty(propChangeErrMsg) ? "bin" : " ,bin";
                                    }
                                    if (productOldObj.isIsBatchForProduct() != isIsBatchForProduct) {
                                        invalidColumn.put((Integer) columnConfig.get(Constants.ACTIVATE_BATCH), "Invalid");
                                        propChangeErrMsg += StringUtil.isNullOrEmpty(propChangeErrMsg) ? "batch" : " ,batch";
                                    }
                                    if (productOldObj.isIsSerialForProduct() != isIsSerialForProduct) {
                                        invalidColumn.put((Integer) columnConfig.get(Constants.ACTIVATE_SERIAL_NO), "Invalid");
                                        propChangeErrMsg += StringUtil.isNullOrEmpty(propChangeErrMsg) ? "serial" : " ,serial";
                                    }
                                    if (!StringUtil.isNullOrEmpty(propChangeErrMsg)) {
                                        throw new AccountingException("Opening stock is already added for this product.So, " + propChangeErrMsg + " property can not be changed.");
                                    }
                                }

                            }
                        
                        if (!StringUtil.isNullOrEmpty(failureMsg)) {
                            throw new AccountingException(failureMsg);
                        }

                        // creating product Hashmap
                        HashMap<String, Object> productMap = new HashMap<String, Object>();

                        if (nocount == 0) {//if product does not exist i.e new product then need to check, whether it can be generate by sequence format or not. 
                            Map<String, String> sequenceNumberDataMap = new HashMap<String, String>();
                            sequenceNumberDataMap.put("moduleID", String.valueOf(Constants.Acc_Product_Master_ModuleId));
                            sequenceNumberDataMap.put("entryNumber", productID);
                            sequenceNumberDataMap.put("companyID", companyid);
                            List list = importHandler.checksEntryNumberForSequenceNumber(sequenceNumberDataMap);
                            if (!list.isEmpty()) {
                                boolean isvalidEntryNumber = (Boolean) list.get(0);
                                if (!isvalidEntryNumber) {
                                    String formatID = (String) list.get(2);
                                    int intSeq = (Integer) list.get(3);
                                    productMap.put(Constants.SEQNUMBER, intSeq);
                                    productMap.put(Constants.SEQFORMAT, formatID);
                                }
                            }
                        }

                        boolean isUsedInTransaction = false;
                        if (updateExistingRecordFlag && newProductAddinUpdateCase == false) {
                            Product product = (Product) result.getEntityList().get(0);
                            productMap.put("id", product.getID());
                            List listObj = accProductModuleService.isProductUsedintransction(product.getID(), companyid, request,false);// false: Product & Services Report
                            isUsedInTransaction = (Boolean) listObj.get(0);    //always boolean value
                        } else {
                            productMap.put("producttype", productTypeID);
                        }

                        productMap.put("name", productName);
                        productMap.put("productid", productID);
                        if (!updateExistingRecordFlag || (newProductAddinUpdateCase && updateExistingRecordFlag)){ //-- If the New Product Import or Some New Product In Update Product List Discription Saved as Blank
                            productMap.put("desc", productDescription);
                        }else if (columnConfig.containsKey("desc")) {
                            productMap.put("desc", productDescription);                                            //-- Update Case -Update Description Only If Included in Import File/
                        }
                        productMap.put("syncable", false);
                        productMap.put("multiuom", false);

                        if (columnConfig.containsKey("wipoffset")) {
                            productMap.put("WIPoffset", wipoffset);
                        }
                        if (columnConfig.containsKey("inventoryoffset")) {
                            productMap.put("Inventoryoffset", inventoryoffset);
                        }
                        if (columnConfig.containsKey("hscode")) {
                            productMap.put("hsCode", hscode);
                        }
                        if (columnConfig.containsKey("additionalfreetext")) {
                            productMap.put("additionalfreetext", additionalfreetext);
                        }
                        if (columnConfig.containsKey("itemcolor")) {
                            productMap.put("itemcolor", itemcolor);
                        }
                        if (columnConfig.containsKey("alternateproduct")) {
                            productMap.put("alternateproductid", alternateproduct);
                        }
                        if (columnConfig.containsKey("purchasemfg")) {
                            productMap.put("purchasemfg", purchasemfg);
                        }
                        if (columnConfig.containsKey("catalogno")) {
                            productMap.put("catalogNo", catalogno);
                        }
                        if (columnConfig.containsKey("barcode")) {
                            productMap.put("barcode", barcode);
                        }
                        if (columnConfig.containsKey("additionaldesc")) {
                            productMap.put("additionaldescription", additionaldesc);
                        }
                        if (columnConfig.containsKey("descinforeign")) {
                            productMap.put("foreigndescription", descinforeign);
                        }
                        if (columnConfig.containsKey("licensecode")) {
                            productMap.put("licensecode", licensecode);
                        }
                        if (columnConfig.containsKey("itemgroup")) {
                            productMap.put("itemgroup", itemgroup);
                        }
                        if (columnConfig.containsKey("pricelist")) {
                            productMap.put("itempricelist", pricelist);
                        }
                        if (columnConfig.containsKey("shippingtype")) {
                            productMap.put("shippingtype", shippingtype);
                        }
                        if (columnConfig.containsKey("recyclable")) {
                            productMap.put("isrecyclable", recyclable);
                        }
                        if (columnConfig.containsKey("qaenable")) {
                            productMap.put("isQAenable", qaenable);
                        }
                        if (columnConfig.containsKey("isknittingitem")) {
                            productMap.put("isKnittingItem", isknittingitem);
                        }
                        if (columnConfig.containsKey("isactive")) {
                            productMap.put("isActiveItem", isactive);
                        }
                        if (columnConfig.containsKey("blockloosesell")) {
                            productMap.put("blockLooseSell", blockloosesell);
                        }
                        if (!StringUtil.isNullOrEmpty(itemsalesvolume)) {
                            productMap.put("itemsalesvolume", Double.parseDouble(itemsalesvolume));
                        }
                        if (!StringUtil.isNullOrEmpty(productweight)) {
                            productMap.put("productweight", Double.parseDouble(productweight));
                        }
                        if (!StringUtil.isNullOrEmpty(itemsaleswidth)) {
                            productMap.put("itemsaleswidth", Double.parseDouble(itemsaleswidth));
                        }
                        if (!StringUtil.isNullOrEmpty(itemsalesheight)) {
                            productMap.put("itemsalesheight", Double.parseDouble(itemsalesheight));
                        }
                        if (!StringUtil.isNullOrEmpty(itemwidth)) {
                            productMap.put("itemwidth", Double.parseDouble(itemwidth));
                        }
                        if (!StringUtil.isNullOrEmpty(itemvolume)) {
                            productMap.put("itemvolume", Double.parseDouble(itemvolume));
                        }
                        if (valMethod != null) {
                            productMap.put("valuationmethod", valMethod);
                        }
                        if (!StringUtil.isNullOrEmpty(itempurchasewidth)) {
                            productMap.put("itempurchasewidth", Double.parseDouble(itempurchasewidth));
                        }
                        if (!StringUtil.isNullOrEmpty(itempurchasevolume)) {
                            productMap.put("itempurchasevolume", Double.parseDouble(itempurchasevolume));
                        }
                        if (!StringUtil.isNullOrEmpty(itempurchaselength)) {
                            productMap.put("itempurchaselength", Double.parseDouble(itempurchaselength));
                        }
                        if (!StringUtil.isNullOrEmpty(qaleadtimeindays)) {
                            productMap.put("QAleadtime", Integer.parseInt(qaleadtimeindays));
                        }
                        if (!StringUtil.isNullOrEmpty(reusabilitycount)) {
                            productMap.put("reusabilitycount", Integer.parseInt(reusabilitycount));
                        }
                        if (transferUOM != null) {
                            productMap.put("transferUoM", transferUOM);
                        }
                        if (orderuom != null) {
                            productMap.put("orderUoM", orderuom);
                        }
                        productMap.put("currencyid", currencyId);
                        if (!isUsedInTransaction) {
                            if (columnConfig.containsKey(Constants.ACTIVATE_BATCH)) {
                                productMap.put("isBatchForProduct", isIsBatchForProduct);
                            }
                            if (columnConfig.containsKey(Constants.ACTIVATE_SERIAL_NO)) {
                                productMap.put("isSerialForProduct", isIsSerialForProduct);
                            }
                            if (columnConfig.containsKey(Constants.ACTIVATE_LOCATION)) {
                                productMap.put("isLocationForProduct", isIslocationforproduct);
                            }
                            if (columnConfig.containsKey(Constants.ACTIVATE_WAREHOUSE)) {
                                productMap.put("isWarehouseForProduct", isIswarehouseforproduct);
                                productMap.put("isRowForProduct", isIsRowForProduct);
                                productMap.put("isRackForProduct", isIsRackForProduct);
                                productMap.put("isBinForProduct", isIsBinForProduct);
                            }
                        }
                        if (columnConfig.containsKey("uomname")) {
                            productMap.put("uomid", productUOMID);
                        }
                        if (!productTypeID.equals(Producttype.SERVICE)) {
                            if (uom != null && transferUOM == null) {
                                productMap.put("transferUoM", uom);
                            }
                            if (uom != null && orderuom == null) {
                                productMap.put("orderUoM", uom);
                            }
                            if (salesuom != null) {
                                productMap.put("salesuomid", salesuom);
                            } else if (salesuom == null && uom != null) {
                                productMap.put("salesuomid", uom);
                            }
                            if (purchaseruom != null) {
                                productMap.put("purchaseuomid", purchaseruom);
                            } else if (purchaseruom == null && uom != null) {
                                productMap.put("purchaseuomid", uom);
                            }

                            KwlReturnObject companyObj = accountingHandlerDAOobj.getObject(Company.class.getName(), companyid);
                            Company company = (Company) companyObj.getEntityList().get(0);
                            Packaging packaging = null;
                            if (inneruom != null || casinguom != null) {
                                packaging = new Packaging();
                                if (columnConfig.containsKey("casinguom")) {
                                    packaging.setCasingUoM(casinguom);
                                }
                                if (columnConfig.containsKey("inneruom")) {
                                    packaging.setInnerUoM(inneruom);
                                }
                                if (columnConfig.containsKey("uomname")) {
                                    packaging.setStockUoM(uom);
                                }
                                if (columnConfig.containsKey("casinguom_value")) {
                                    packaging.setCasingUomValue(Double.parseDouble(casinguomvalue));
                                }
                                if (columnConfig.containsKey("inneruom_value")) {
                                    packaging.setInnerUomValue(Double.parseDouble(inneruomvalue));
                                }
                                if (columnConfig.containsKey("stockuom_value")) {
                                    packaging.setStockUomValue(Double.parseDouble(stcokuomvalue));
                                }
                                packaging.setCompany(company);

                            }
                            if (packaging != null) {
                                accProductObj.saveProductPackging(packaging);
                                productMap.put("packaging", packaging);
                            }
                        }
                        if (columnConfig.containsKey("reorderlevel")) {
                            productMap.put("reorderlevel", Double.parseDouble(productReorderLevel));
                        }
                        if (columnConfig.containsKey("reorderquantity")) {
                            productMap.put("reorderquantity", Double.parseDouble(productReorderQuantity));
                        }
                        if (columnConfig.containsKey("warrantyperiod")) {
                            productMap.put("warrantyperiod", Integer.parseInt(productWarrantyPeriod));
                        }
                        if (columnConfig.containsKey("warrantyperiodsal")) {
                            productMap.put("warrantyperiodsal", Integer.parseInt(productSalesWarrantyPeriod));
                        }
                        if (columnConfig.containsKey("leadtime")) {
                            productMap.put("leadtime", Integer.parseInt(productLeadTime));
                        }
                        if (columnConfig.containsKey("parentid")) {
                            productMap.put("parentid", parentProductUUID);
                        }
                        productMap.put("salesaccountid", productSalesAccId);
//                        productMap.put("salesGL", sellassetglaccountId);
                        productMap.put("purchaseretaccountid", productPurchaseReturnAccId);
                        productMap.put("salesretaccountid", productSalesReturnAccId);
                        if (columnConfig.containsKey("vendornameid")) {
                            productMap.put("vendorid", productPreferedVendorID);
                        }
                        productMap.put("purchaseaccountid", productPurchaseAccId);
                        productMap.put("purchaseretaccountid", productPurchaseReturnAccId);

                        // if product have multiuom = 'T' and Account Preferences have UOM Setting for UOM Schema then set uomschemaType for product
                        if (uomSchemaType != null && isMultiUOM && extraCompanyPreferences != null && extraCompanyPreferences.getUomSchemaType() == 0) {
                            productMap.put("uomschemaType", uomSchemaType);
                        }

                        if (!StringUtil.isNullOrEmpty(productDefaultLocationID)) {
                            productMap.put("location", productDefaultLocationID);
                        }

                        if (!StringUtil.isNullOrEmpty(productDefaultWarehouseID)) {
                            productMap.put("warehouse", productDefaultWarehouseID);
                        }
                        if (columnConfig.containsKey("syncable")) {
                            productMap.put("syncable", isSyncable);
                        }
                        if (columnConfig.containsKey("multiuom")) {
                            productMap.put("multiuom", isMultiUOM);
                        }
                        productMap.put("deletedflag", false);
                        productMap.put("companyid", companyid);
                        productMap.put("isImport", 1);

                        if (!StringUtil.isNullOrEmpty(supplierPartNumber)) {
                            productMap.put("supplier", supplierPartNumber);
                        }

                        if (!StringUtil.isNullOrEmpty(partNumber)) {
                            productMap.put("coilcraft", partNumber);
                        }

                        if (!StringUtil.isNullOrEmpty(CustomerPartNumber)) {
                            productMap.put("interplant", CustomerPartNumber);
                        }
                        if (asOfDate == null) {//asOfDate field will be null only when product is new and field is not mapped
                            asOfDate = bookBookBeginningDate;
                        }
                        productMap.put("asOfDate", asOfDate);

                        KwlReturnObject productresult = null;
                        if (!updateExistingRecordFlag || (newProductAddinUpdateCase && updateExistingRecordFlag)) {
                            productresult = accProductObj.addProduct(productMap);
                        } else {
                            productresult = accProductObj.updateProduct(productMap);
                        }
                        Product product = (Product) productresult.getEntityList().get(0);

//                        if (!productTypeID.equals(Producttype.SERVICE)) {
//                            // creating Price list Hashmap
//                            HashMap<String, Object> cycleParams = new HashMap<String, Object>();
//                            cycleParams.put("productid", product.getID());
//                            cycleParams.put("interval", Integer.parseInt(productCycleCountInterval));
//                            cycleParams.put("tolerance", Integer.parseInt(productCycleCountTolerance));
//                            accProductObj.saveProductCycleCount(cycleParams);
//                        }


                        // if at company level warehouse/location/batch/serial/row/rack/bin one this option is true then we are not updating intial quantity from here. 

                        if (isAddUpdateInitialQuantity == false && productInitialQuantity.length() > 0) {
                            JSONObject inventoryjson = new JSONObject();
                            inventoryjson.put("productid", product.getID());
                            inventoryjson.put("quantity", Double.parseDouble(productInitialQuantity));
                            if (!isUsedInTransaction) {
                                inventoryjson.put("baseuomquantity", Double.parseDouble(productInitialQuantity));
                            }
//                            inventoryjson.put("baseuomquantity", Double.parseDouble(productInitialQuantity));
                            inventoryjson.put("baseuomrate", 1);
                            if (product.getUnitOfMeasure() != null) {
                                inventoryjson.put("uomid", product.getUnitOfMeasure().getID());
                            }
                            inventoryjson.put("description", "Inventory Opened");
                            inventoryjson.put("carryin", true);
                            inventoryjson.put("defective", false);
                            inventoryjson.put("newinventory", true);
                            inventoryjson.put("companyid", companyid);
                            inventoryjson.put("updatedate", asOfDate);

//                            String batchLocationId= "";
//                            String batchWarehouseId="";
//                            double batchQty=0;
//                            KwlReturnObject openingBatchDetail= accImportServiceObj.getProductOpeningQtyBatchDetail(product);
//                        
//                            double prodInitPurchasePrice = 0;
//                            if (productInitialPurchasePrise.length() > 0 && !isUsedInTransaction) {
//                                prodInitPurchasePrice = Double.parseDouble(productInitialPurchasePrise);
//                            }
                            if (!updateExistingRecordFlag || (newProductAddinUpdateCase && updateExistingRecordFlag)) {
                                KwlReturnObject newInvObj = accProductObj.addInventory(inventoryjson);
//                                if(!StringUtil.isNullOrEmpty(productDefaultLocationID) && !StringUtil.isNullOrEmpty(productDefaultWarehouseID) && isInventoryIntegrationOn){
//                                    accImportServiceObj.addStockInventorySide(newInvObj,inventoryjson,productDefaultWarehouseID,productDefaultLocationID,prodInitPurchasePrice);
//                                }
                            } else if (columnConfig.containsKey("quantity")) { // if this is product import(ie. update product import),then quantity column  is removed from mapping,so this will be called only while add product case - Raj Shaha
                                KwlReturnObject updatedInvObj = accProductObj.updateInitialInventory(inventoryjson);
//                                if (openingBatchDetail != null && openingBatchDetail.getEntityList() != null && openingBatchDetail.getRecordTotalCount() > 0) {
//                                    Iterator it1=openingBatchDetail.getEntityList().iterator();
//                                    // if new batch,serial,warehouse,location data is available then only delete previous stock for product
//                                    if(openingBatchDetail.getEntityList().size() > 0){ 
//                                        accImportServiceObj.deleteStockAndSMForProduct(product);//delete stock
//                                        while(it1.hasNext()){ // add new stock
//                                            LocationBatchDocumentMapping lbm = (LocationBatchDocumentMapping) it1.next();
//                                            if (lbm != null) {
//                                                batchWarehouseId = lbm.getBatchmapid().getWarehouse() != null ? lbm.getBatchmapid().getWarehouse().getId() : "";
//                                                batchLocationId = lbm.getBatchmapid().getLocation() != null ? lbm.getBatchmapid().getLocation().getId() : "";
//                                                if (!StringUtil.isNullOrEmpty(batchLocationId) && !StringUtil.isNullOrEmpty(batchWarehouseId) && isInventoryIntegrationOn) {
//                                                    accImportServiceObj.updateStockInventorySide(updatedInvObj, inventoryjson,lbm,prodInitPurchasePrice);
//                                                }
//                                            }
//
//                                        }
//                                    }

//                                }
                            }

                            HashMap<String, Object> assemblyParams = AccountingManager.getGlobalParams(request);
                            assemblyParams.put("assembly", "");
                            assemblyParams.put("applydate", new Date());
                            assemblyParams.put("quantity", Double.parseDouble(productInitialQuantity));
                            assemblyParams.put("memo", "Inventory Opened");
                            assemblyParams.put("refno", "");
                            assemblyParams.put("buildproductid", product.getID());
                            accProductObj.updateAssemblyInventory(assemblyParams);
                        }
                        Date ondate = new Date();
                        if (productInitialPurchasePrise.length() > 0 && !isUsedInTransaction) {
                            // creating Price list Hashmap
                            HashMap<String, Object> initialPurchasePriceMap = new HashMap<String, Object>();
                            initialPurchasePriceMap.put("productid", product.getID());
                            initialPurchasePriceMap.put("companyid", companyid);
                            initialPurchasePriceMap.put("carryin", true);
                            initialPurchasePriceMap.put("price", Double.parseDouble(productInitialPurchasePrise));
                            initialPurchasePriceMap.put("applydate", ondate);
                            initialPurchasePriceMap.put("affecteduser", "-1");
                            initialPurchasePriceMap.put("currencyid", currencyId);
                            initialPurchasePriceMap.put("uomid", product.getUnitOfMeasure().getID());
                            accProductObj.addPriceList(initialPurchasePriceMap);
                        }

                        if (productSalesPrice.length() > 0 && !isUsedInTransaction) {
                            // creating Price list Hashmap
                            HashMap<String, Object> salesPriceMap = new HashMap<String, Object>();
                            salesPriceMap.put("productid", product.getID());
                            salesPriceMap.put("companyid", companyid);
                            salesPriceMap.put("carryin", false);
                            salesPriceMap.put("price", Double.parseDouble(productSalesPrice));
                            salesPriceMap.put("applydate", ondate);
                            salesPriceMap.put("affecteduser", "-1");
                            salesPriceMap.put("currencyid", currencyId);
                            salesPriceMap.put("uomid", product.getUnitOfMeasure().getID());
                            accProductObj.addPriceList(salesPriceMap);
                        }

                        if (!StringUtil.isNullOrEmpty(customfield)) {
                            JSONArray jcustomarray = new JSONArray(customfield);
                            HashMap<String, Object> customrequestParams = new HashMap<String, Object>();
                            customrequestParams.put("customarray", jcustomarray);
                            customrequestParams.put("modulename", Constants.Acc_Product_modulename);
                            customrequestParams.put("moduleprimarykey", Constants.Acc_Productid);
                            customrequestParams.put("modulerecid", product.getID());
                            customrequestParams.put("moduleid", Constants.Acc_Product_Master_ModuleId);//isFixedAsset ? Constants.Acc_FixedAssets_AssetsGroups_ModuleId:
                            customrequestParams.put("companyid", companyid);
                            productMap.put("id", product.getID());
                            customrequestParams.put("customdataclasspath", Constants.Acc_Product_custom_data_classpath);
                            KwlReturnObject customDataresult = fieldDataManagercntrl.setCustomData(customrequestParams);
                            if (customDataresult != null && customDataresult.getEntityList().size() > 0) {
                                productMap.put("accproductcustomdataref", product.getID());
                                productresult = accProductObj.updateProduct(productMap);
                            }
                            HashMap<String, Object> customHistoryParams = new HashMap<String, Object>();
                            customHistoryParams.put("productId", product.getID());
                            customHistoryParams.put("customarray", jcustomarray);
                            accProductModuleService.maintainCustomFieldHistoryForProduct(request, customHistoryParams);
                        }

                    } catch (Exception ex) {
                        failed++;
                        String errorMsg = ex.getMessage(), invalidColumns = "";
                        try {
                            JSONObject errorLog = new JSONObject(errorMsg);
                            errorMsg = errorLog.getString("errorMsg");
                            invalidColumns = errorLog.getString("invalidColumns");
                        } catch (JSONException jex) {
                        }
//                        failedRecords.append("\n" + accProductModuleService.createCSVrecord(recarr) + "\"" + errorMsg.replaceAll("\"", "") + "\"");
                        List failureRecArr = new ArrayList();
                        for (int cellData = 0; cellData < recarr.length; cellData++) {
                            failureRecArr.add(recarr[cellData]);
                        }
                        failureRecArr.add(errorMsg.replaceAll("\"", ""));
                        failureArr.add(failureRecArr);
                        
                        failureColumnArr.add(invalidColumn);
                    }
                    total++;
                }
                cnt++;

                if (count == limit) {
                    txnManager.commit(status);

                    // for reset counter of transaction limit
                    count = 1;
                    def = new DefaultTransactionDefinition();
                    def.setName("import_Tx");
                    def.setPropagationBehavior(TransactionDefinition.PROPAGATION_REQUIRED);
                    status = txnManager.getTransaction(def);
                } else {
                    count++;
                }
            }

            if (failed > 0) {
//                accProductModuleService.createFailureFiles(fileName, failedRecords, ".csv");
                importDao.createFailureXlsFiles(fileName, failureArr, ".xls", failureColumnArr);
            }

            int success = total - failed;
            if (total == 0) {
                msg = messageSource.getMessage("acc.field.Emptyfile", null, RequestContextUtils.getLocale(request));
            } else if (success == 0) {
//                issuccess = false;
                msg = messageSource.getMessage("acc.rem.169", null, RequestContextUtils.getLocale(request));
            } else if (success == total) {
                msg = messageSource.getMessage("acc.rem.168", null, RequestContextUtils.getLocale(request));
            } else {
                msg = messageSource.getMessage("acc.field.Imported", null, RequestContextUtils.getLocale(request))+ " " + success + " "+ messageSource.getMessage("acc.field.record", null, RequestContextUtils.getLocale(request)) + (success > 1 ? "s" : "") + " "+messageSource.getMessage("acc.field.successfully.", null, RequestContextUtils.getLocale(request));
                msg += (failed == 0 ? "." : " "+messageSource.getMessage("acc.field.andfailedtoimport", null, RequestContextUtils.getLocale(request))+ " " + failed + " "+ messageSource.getMessage("acc.field.record", null, RequestContextUtils.getLocale(request)) + (failed > 1 ? "s" : "") + ".");
            }

            try {
                txnManager.commit(status);
            } catch (Exception ex) {
                commitedEx = true;
                throw ex;
            }
        } catch (Exception ex) {
            if (!commitedEx) { //if exception occurs during commit then dont call rollback
                txnManager.rollback(status);
            }
            issuccess = false;
            msg = "" + ex.getMessage();

            Logger.getLogger(accProductController.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
            throw new AccountingException("Error While Importing Records.");
        } finally {
            fileInputStream.close();
            csvReader.close();

            DefaultTransactionDefinition ldef = new DefaultTransactionDefinition();
            ldef.setName("import_Tx");
            ldef.setPropagationBehavior(TransactionDefinition.PROPAGATION_REQUIRED);
            TransactionStatus lstatus = txnManager.getTransaction(ldef);

            try {
                //Insert Integration log
                HashMap<String, Object> logDataMap = new HashMap<String, Object>();
                logDataMap.put("FileName", getActualFileName(fileName));
                logDataMap.put("StorageName", fileName);
                logDataMap.put("Log", msg);
                logDataMap.put("Type", "csv");
                logDataMap.put("FailureFileType", failed>0?"xls":"");
                logDataMap.put("TotalRecs", total);
                logDataMap.put("Rejected", failed);
                logDataMap.put("Module", Constants.Acc_Product_Master_ModuleId);
                logDataMap.put("ImportDate", new Date());
                logDataMap.put("User", userId);
                logDataMap.put("Company", companyid);
                importDao.saveImportLog(logDataMap);
                txnManager.commit(lstatus);
            } catch (Exception ex) {
                txnManager.rollback(lstatus);
                Logger.getLogger(accProductControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
            }

            try {
                returnObj.put("success", issuccess);
                returnObj.put("msg", msg);
                returnObj.put("totalrecords", total);
                returnObj.put("successrecords", total - failed);
                returnObj.put("failedrecords", failed);
                returnObj.put("filename", getActualFileName(fileName));
                returnObj.put("Module", Constants.Acc_Product_Master_ModuleId);
            } catch (JSONException ex) {
                Logger.getLogger(accProductControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

        return returnObj;
    }
               
    @Deprecated
    public JSONObject importXLSProductRecords(HttpServletRequest request, JSONObject jobj) throws AccountingException, IOException, SessionExpiredException, JSONException {
        DefaultTransactionDefinition def = new DefaultTransactionDefinition();
        def.setName("import_Tx");
        def.setPropagationBehavior(TransactionDefinition.PROPAGATION_REQUIRED);
        TransactionStatus status = txnManager.getTransaction(def);
        boolean commitedEx = false;
        boolean issuccess = true;
        String msg = "";
        int total = 0, failed = 0;
        String companyid = sessionHandlerImpl.getCompanyid(request);
        String currencyId = sessionHandlerImpl.getCurrencyID(request);
        String userId = sessionHandlerImpl.getUserid(request);
        DateFormat df = authHandler.getDateFormatter(request);
        String fileName = jobj.getString("filename");
        String masterPreference = request.getParameter("masterPreference");
        boolean updateExistingRecordFlag = false;
        if (!StringUtil.isNullOrEmpty(request.getParameter("updateExistingRecordFlag"))) {
            updateExistingRecordFlag = Boolean.FALSE.parseBoolean(request.getParameter("updateExistingRecordFlag"));
        }
        int limit = Constants.Transaction_Commit_Limit;
        int count = 1;
        boolean isInventoryIntegrationOn = false;
        String excelDF = "yyyy-MM-dd";
        String excel_Full_DF = "yyyy-MM-dd hh:mm:ss";

        JSONObject returnObj = new JSONObject();
        String failureMsg = "";

        try {
            KwlReturnObject CompanyPrefResult = accountingHandlerDAOobj.getObject(CompanyAccountPreferences.class.getName(), companyid);
            CompanyAccountPreferences companyAccountPreferences = (CompanyAccountPreferences) CompanyPrefResult.getEntityList().get(0);

            Date bookBookBeginningDate=companyAccountPreferences.getBookBeginningFrom();
            KwlReturnObject extraCompanyPrefResult = accountingHandlerDAOobj.getObject(ExtraCompanyPreferences.class.getName(), companyid);
            ExtraCompanyPreferences extraCompanyPreferences = (ExtraCompanyPreferences) extraCompanyPrefResult.getEntityList().get(0);

            isInventoryIntegrationOn = extraCompanyPreferences.isActivateInventoryTab();

            boolean isAddUpdateInitialQuantity = false;
            isAddUpdateInitialQuantity = companyAccountPreferences.isIswarehousecompulsory() || companyAccountPreferences.isIslocationcompulsory() || companyAccountPreferences.isIsBatchCompulsory() || companyAccountPreferences.isIsSerialCompulsory() || companyAccountPreferences.isIsrackcompulsory() || companyAccountPreferences.isIsrowcompulsory() || companyAccountPreferences.isIsbincompulsory();
             
            boolean isCurrencyCode=extraCompanyPreferences.isCurrencyCode();
            int sheetNo = Integer.parseInt(request.getParameter("sheetindex"));
            String customfield = "";
            POIFSFileSystem fs = new POIFSFileSystem(new FileInputStream(jobj.getString("FilePath")));

            HSSFWorkbook wb = new HSSFWorkbook(fs);
            HSSFFormulaEvaluator evaluator = new HSSFFormulaEvaluator(wb);
            HSSFSheet sheet = wb.getSheetAt(sheetNo);

            int cnt = 0;

//            StringBuilder failedRecords = new StringBuilder();

            HashMap<String, Integer> columnConfig = new HashMap<>();
            Map<String, JSONObject> configMap = new HashMap<>();
            JSONArray jSONArray = jobj.getJSONArray("resjson");
            for (int i = 0; i < jSONArray.length(); i++) {
                JSONObject jSONObject = jSONArray.getJSONObject(i);
                columnConfig.put(jSONObject.getString("dataindex"), jSONObject.getInt("csvindex"));
                configMap.put(jSONObject.getString("dataindex"), jSONObject);
            }

            HashMap currencyMap = accProductModuleService.getCurrencyMap(isCurrencyCode);
            List failureArr = new ArrayList();
            List failureColumnArr = new ArrayList();
            List recarr = new ArrayList();
            int maxCol = 0;
            Set usedProductIdSet = new HashSet();
            for (int i = 0; i <= sheet.getLastRowNum(); i++) {
                failureMsg = "";
                Map<Integer, Object> invalidColumn = new HashMap<>();
                HSSFRow row = sheet.getRow(i);
                if (i == 0) {
                    maxCol = row.getLastCellNum();
                    recarr = new ArrayList();
                    for (int cellcount = 0; cellcount < maxCol; cellcount++) {
                        HSSFCell cell = row.getCell(cellcount);

                        if (cell != null) {
                            if (cell.getCellType() == HSSFCell.CELL_TYPE_STRING) {
                                cell.setCellValue(cell.getStringCellValue().replaceAll("\n", ""));
                            } else if (cell.getCellType() == HSSFCell.CELL_TYPE_NUMERIC) {
                                String CellStringValue = Double.toString((Double) cell.getNumericCellValue()).replaceAll("\n", "");
                                cell.setCellValue(Double.parseDouble(CellStringValue)); //Parsed to Doouble as getnumericCellValue returns double by Default
                            }
                            recarr.add(cell);
                        } else {
                            recarr.add("");
                        }
                    }
//                    failedRecords.append(createCSVrecord(recarr.toArray()) + "\"Error Message\"");
                    ArrayList failureRecArr = new ArrayList();
                    failureRecArr.addAll(recarr);
                    failureRecArr.add("Error Message");
                    failureArr.add(failureRecArr);
                    failureColumnArr.add(invalidColumn);
                }
                if (cnt != 0) {
                    recarr = new ArrayList();
                    for (int cellcount = 0; cellcount < maxCol; cellcount++) {
                        HSSFCell cell = row.getCell(cellcount);

                        if (cell != null) {
                            if (cell.getCellType() == HSSFCell.CELL_TYPE_STRING) {
                                cell.setCellValue(cell.getStringCellValue().replaceAll("\n", ""));
                            } else if (cell.getCellType() == HSSFCell.CELL_TYPE_NUMERIC) {
                                String CellStringValue = Double.toString((Double) cell.getNumericCellValue()).replaceAll("\n", "");
                                cell.setCellValue(Double.parseDouble(CellStringValue)); //Parsed to Doouble as getnumericCellValue returns double by Default
                            }
                            recarr.add(cell);
                        } else {
                            recarr.add("");
                        }
                    }

                    try {
                        currencyId = sessionHandlerImpl.getCurrencyID(request);
                        boolean newProductAddinUpdateCase = false;
                        
                        String productID = "";
                        if (columnConfig.containsKey("pid")) {
                            HSSFCell cell = row.getCell((Integer) columnConfig.get("pid"));
                            
                            if (cell == null || cell.getCellType() == HSSFCell.CELL_TYPE_BLANK) {
                                invalidColumn.put((Integer) columnConfig.get("pid"), "Invalid");
                                failureMsg += "Product ID is not available.";
                            } else {
                                switch (cell.getCellType()) {
                                    case HSSFCell.CELL_TYPE_NUMERIC:
                                        productID = Integer.toString((int) cell.getNumericCellValue());
                                        break;
                                    case HSSFCell.CELL_TYPE_STRING:
                                        productID = cell.getStringCellValue().trim();
                                        break;
                                }
                                
                                if(!usedProductIdSet.add(productID)){
                                    invalidColumn.put((Integer) columnConfig.get("pid"), "Invalid");
                                    throw new AccountingException("Duplicate Product ID '" + productID + "' in file");
                                }
                                JSONObject configObj = configMap.get("pid");
                                int maxLength = configObj.optInt("maxLength", 0);
                                String validationType = configObj.optString("validatetype");
                                if("string".equalsIgnoreCase(validationType) && !StringUtil.isNullOrEmpty(productID) && productID.length() > maxLength){
                                    invalidColumn.put((Integer) columnConfig.get("pid"), "Invalid");
                                    failureMsg += "Data length greater than " + maxLength + " for column Product ID.";
                                }
                            }
                        } else {
                            failureMsg += "Product ID column is not found.";
                        }

                        // For Checking 'ProductID' is exist or not
                        KwlReturnObject result = accProductObj.getProductIDCount(productID, companyid,false);
                        Product productOldObj = null;
                        int nocount = result.getRecordTotalCount();
                        if (nocount > 0 && !updateExistingRecordFlag) {
                            invalidColumn.put((Integer) columnConfig.get("pid"), "Invalid");
                            throw new AccountingException("Product ID '" + productID + "' already exists.");
                        } else if (nocount == 0 && updateExistingRecordFlag) {
                            newProductAddinUpdateCase = true;
//                            throw new AccountingException("Product ID '" + productID + "' not exists.");
                        }

                        String productTypeID = "";
                        if (columnConfig.containsKey("type")) {
                            HSSFCell cell = row.getCell((Integer) columnConfig.get("type"));

                            if (cell == null || cell.getCellType() == HSSFCell.CELL_TYPE_BLANK) {
                                invalidColumn.put((Integer) columnConfig.get("type"), "Invalid");
                                failureMsg += "Product Type is not available.";
                            }

                            String productTypeName = cell.getStringCellValue().trim();

                            Producttype producttype = accProductModuleService.getProductTypeByName(productTypeName);
                            if (producttype != null) {
                                productTypeID = producttype.getID();
                                if (productTypeID.equalsIgnoreCase(Producttype.ASSEMBLY)) {
                                    invalidColumn.put((Integer) columnConfig.get("type"), "Invalid");
                                    throw new AccountingException("Assembly products need to be imported separately through 'Import Assembly Product'.");
                                }
                            } else {
                                invalidColumn.put((Integer) columnConfig.get("type"), "Invalid");
                                failureMsg += "Product Type is not found for " + productTypeName + ".";
                            }
                        } else {
                            failureMsg += "Product Type column is not found.";
                        }

                        String productName = "";
                        if (columnConfig.containsKey("productname")) {
                            HSSFCell cell = row.getCell((Integer) columnConfig.get("productname"));
                            if (cell == null || cell.getCellType() == HSSFCell.CELL_TYPE_BLANK) {
                                invalidColumn.put((Integer) columnConfig.get("productname"), "Invalid");
                                failureMsg += "Product Name is not available.";
                            } else {
                                switch (cell.getCellType()) {
                                    case HSSFCell.CELL_TYPE_NUMERIC:
                                        productName = Integer.toString((int) cell.getNumericCellValue());
                                        break;
                                    case HSSFCell.CELL_TYPE_STRING:
                                        productName = cell.getStringCellValue().trim();
                                        break;
                                }
                                JSONObject configObj = configMap.get("productname");
                                int maxLength = configObj.optInt("maxLength", 0);
                                String validationType = configObj.optString("validatetype");
                                if("string".equalsIgnoreCase(validationType) && !StringUtil.isNullOrEmpty(productName) && productName.length() > maxLength){
                                    invalidColumn.put((Integer) columnConfig.get("productname"), "Invalid");
                                    failureMsg += "Data length greater than " + maxLength + " for column Product Name.";
                                }
                            }
                        } else {
                            failureMsg += "Product Name column is not found.";
                        }
                        
                        String productDescription = "";
                        if (columnConfig.containsKey("desc")) {
                            HSSFCell cell = row.getCell((Integer) columnConfig.get("desc"));
                            if (cell != null) {
                                switch (cell.getCellType()) {
                                    case HSSFCell.CELL_TYPE_NUMERIC:
                                        productDescription = Integer.toString((int) cell.getNumericCellValue());
                                        break;
                                    case HSSFCell.CELL_TYPE_STRING:
                                        productDescription = cell.getStringCellValue().trim();
                                        break;
                                }
                            }
                        }

                        String productUOMID = "";
                        UnitOfMeasure uom = null;
                        if (columnConfig.containsKey("uomname")) {
                            HSSFCell cell = row.getCell((Integer) columnConfig.get("uomname"));

                            if (cell != null && cell.getCellType() != HSSFCell.CELL_TYPE_BLANK) {
                                String productUOMName = cell.getStringCellValue().trim();
                                if (!StringUtil.isNullOrEmpty(productUOMName)) {
                                    uom = accProductModuleService.getUOMByName(productUOMName, companyid);
                                    if (uom != null) {
                                        productUOMID = uom.getID();
                                    } else {
                                        if (masterPreference.equalsIgnoreCase("2")) {
                                            HashMap<String, Object> uomMap = new HashMap<String, Object>();
                                            uomMap.put("uomname",StringUtil.DecodeText(productUOMName));
                                            uomMap.put("uomtype", StringUtil.DecodeText(productUOMName));
                                            uomMap.put("precision", 0);
                                            uomMap.put("companyid", companyid);

                                            KwlReturnObject uomresult = accUomObj.addUoM(uomMap);
                                            uom = (UnitOfMeasure) uomresult.getEntityList().get(0);
                                            productUOMID = uom.getID();
                                        } else {
                                            if (masterPreference.equalsIgnoreCase("1")) {
                                                productUOMID = "";
                                            } else {
                                                if (productTypeID.equals(Producttype.SERVICE)) {
                                                    productUOMID = "";
                                                } else {
                                                    invalidColumn.put((Integer) columnConfig.get("uomname"), "Invalid");
                                                    failureMsg += "Stock UOM is not found for " + productUOMName + ".";
                                                }
                                            }
                                        }
                                    }
                                } else {
                                    if (masterPreference.equalsIgnoreCase("1")) {
                                        productUOMID = "";
                                    } else {
                                        if (productTypeID.equals(Producttype.SERVICE)) {
                                            productUOMID = "";
                                        } else {
                                            invalidColumn.put((Integer) columnConfig.get("uomname"), "Invalid");
                                            failureMsg += "Data should not be empty for column Stock UOM.";
                                        }
                                    }
                                }
                            } else {
                                if (masterPreference.equalsIgnoreCase("1")) {
                                    productUOMID = "";
                                } else {
                                    if (productTypeID.equals(Producttype.SERVICE)) {
                                        productUOMID = "";
                                    } else {
                                        invalidColumn.put((Integer) columnConfig.get("uomname"), "Invalid");
                                        failureMsg += "Data should not be empty for column Stock UOM.";
                                    }
                                }
                            }
                        } else {
                            if (masterPreference.equalsIgnoreCase("1")) {
                                productUOMID = "";
                            } else {
                                if (productTypeID.equals(Producttype.SERVICE)) {
                                    productUOMID = "";
                                } else {
                                    failureMsg += "Product Stock UOM column is not found.";
                                }
                            }
                        }

                        String casingUoMID = "";
                        UnitOfMeasure casinguom = null;
                        if (columnConfig.containsKey("casinguom")) {
                            HSSFCell cell = row.getCell((Integer) columnConfig.get("casinguom"));
                            if (cell != null && cell.getCellType() != HSSFCell.CELL_TYPE_BLANK) {
                                String productUOMName = cell.getStringCellValue().trim();
                                if (!StringUtil.isNullOrEmpty(productUOMName)) {
                                    casinguom = accProductModuleService.getUOMByName(productUOMName, companyid);
                                    if (casinguom != null) {
                                        casingUoMID = casinguom.getID();
                                    } else {
                                        if (masterPreference.equalsIgnoreCase("2")) {
                                            HashMap<String, Object> uomMap = new HashMap<String, Object>();
                                            uomMap.put("uomname", StringUtil.DecodeText(productUOMName));
                                            uomMap.put("uomtype", StringUtil.DecodeText(productUOMName));
                                            uomMap.put("precision", 0);
                                            uomMap.put("companyid", companyid);
                                            KwlReturnObject uomresult = accUomObj.addUoM(uomMap);
                                            casinguom = (UnitOfMeasure) uomresult.getEntityList().get(0);
                                            casingUoMID = casinguom.getID();
                                        } else {
                                            if (masterPreference.equalsIgnoreCase("1")) {
                                                casingUoMID = "";
                                            } else {
                                                invalidColumn.put((Integer) columnConfig.get("casinguom"), "Invalid");
                                                failureMsg += "Product Casing Unit Of Measure is not found for " + productUOMName + ".";
                                            }
                                        }
                                    }
                                }
                            }
                        } else {
                            casingUoMID = "";
                        }

                        String innerUoMID = "";
                        UnitOfMeasure inneruom = null;
                        if (columnConfig.containsKey("inneruom")) {
                            HSSFCell cell = row.getCell((Integer) columnConfig.get("inneruom"));
                            if (cell != null && cell.getCellType() != HSSFCell.CELL_TYPE_BLANK) {
                                String productUOMName = cell.getStringCellValue().trim();
                                if (!StringUtil.isNullOrEmpty(productUOMName)) {
                                    inneruom = accProductModuleService.getUOMByName(productUOMName, companyid);
                                    if (inneruom != null) {
                                        innerUoMID = inneruom.getID();
                                    } else {
                                        if (masterPreference.equalsIgnoreCase("2")) {
                                            HashMap<String, Object> uomMap = new HashMap<String, Object>();
                                            uomMap.put("uomname", StringUtil.DecodeText(productUOMName));
                                            uomMap.put("uomtype", StringUtil.DecodeText(productUOMName));
                                            uomMap.put("precision", 0);
                                            uomMap.put("companyid", companyid);

                                            KwlReturnObject uomresult = accUomObj.addUoM(uomMap);
                                            inneruom = (UnitOfMeasure) uomresult.getEntityList().get(0);
                                            innerUoMID = inneruom.getID();
                                        } else {
                                            if (masterPreference.equalsIgnoreCase("1")) {
                                                innerUoMID = "";
                                            } else {
                                                invalidColumn.put((Integer) columnConfig.get("inneruom"), "Invalid");
                                                failureMsg += "Product Inner Unit Of Measure is not found for " + productUOMName + ".";
                                            }
                                        }
                                    }
                                }
                            }
                        } else {
                            innerUoMID = "";
                        }


                        String PurchaseUOMID = "";
                        UnitOfMeasure purchaseruom = null;
                        if (columnConfig.containsKey("purchaseuom")) {
                            HSSFCell cell = row.getCell((Integer) columnConfig.get("purchaseuom"));
                            if (cell != null && cell.getCellType() != HSSFCell.CELL_TYPE_BLANK) {
                                String productUOMName = cell.getStringCellValue().trim();
                                if (!StringUtil.isNullOrEmpty(productUOMName)) {
                                    purchaseruom = accProductModuleService.getUOMByName(productUOMName, companyid);
                                    if (purchaseruom != null) {
                                        PurchaseUOMID = purchaseruom.getID();
                                    } else {
                                        if (masterPreference.equalsIgnoreCase("2")) {
                                            HashMap<String, Object> uomMap = new HashMap<String, Object>();
                                            uomMap.put("uomname", StringUtil.DecodeText(productUOMName));
                                            uomMap.put("uomtype", StringUtil.DecodeText(productUOMName));
                                            uomMap.put("precision", 0);
                                            uomMap.put("companyid", companyid);

                                            KwlReturnObject uomresult = accUomObj.addUoM(uomMap);
                                            purchaseruom = (UnitOfMeasure) uomresult.getEntityList().get(0);
                                            PurchaseUOMID = purchaseruom.getID();
                                        } else {
                                            if (masterPreference.equalsIgnoreCase("1")) {
                                                PurchaseUOMID = "";
                                            } else {
                                                invalidColumn.put((Integer) columnConfig.get("purchaseuom"), "Invalid");
                                                failureMsg += "Product Purchase Unit Of Measure is not found for " + productUOMName + ".";
                                            }
                                        }
                                    }
                                }
                            }
                        } else {
                            PurchaseUOMID = "";
                        }

                        String SalesUOMID = "";
                        UnitOfMeasure salesuom = null;
                        if (columnConfig.containsKey("salesuom")) {
                            HSSFCell cell = row.getCell((Integer) columnConfig.get("salesuom"));
                            if (cell != null && cell.getCellType() != HSSFCell.CELL_TYPE_BLANK) {
                                String productUOMName = cell.getStringCellValue().trim();
                                if (!StringUtil.isNullOrEmpty(productUOMName)) {
                                    salesuom = accProductModuleService.getUOMByName(productUOMName, companyid);
                                    if (salesuom != null) {
                                        SalesUOMID = salesuom.getID();
                                    } else {
                                        if (masterPreference.equalsIgnoreCase("2")) {
                                            HashMap<String, Object> uomMap = new HashMap<String, Object>();
                                            uomMap.put("uomname",StringUtil.DecodeText(productUOMName));
                                            uomMap.put("uomtype",StringUtil.DecodeText(productUOMName));
                                            uomMap.put("precision", 0);
                                            uomMap.put("companyid", companyid);

                                            KwlReturnObject uomresult = accUomObj.addUoM(uomMap);
                                            salesuom = (UnitOfMeasure) uomresult.getEntityList().get(0);
                                            SalesUOMID = salesuom.getID();
                                        } else {
                                            if (masterPreference.equalsIgnoreCase("1")) {
                                                SalesUOMID = "";
                                            } else {
                                                invalidColumn.put((Integer) columnConfig.get("salesuom"), "Invalid");
                                                failureMsg += "Product Sales Unit Of Measure is not found for " + productUOMName + ".";
                                            }
                                        }
                                    }
                                }
                            }
                        } else {
                            SalesUOMID = "";
                        }

                        String casinguomvalue = "1";
                        if (columnConfig.containsKey("casinguom_value")) {
                            HSSFCell cell = row.getCell((Integer) columnConfig.get("casinguom_value"));
                            if (cell != null) {
                                switch (cell.getCellType()) {
                                    case HSSFCell.CELL_TYPE_NUMERIC:
                                        casinguomvalue = Double.toString(cell.getNumericCellValue());
                                        break;
                                    case HSSFCell.CELL_TYPE_STRING:
                                        casinguomvalue = cell.getStringCellValue().trim();
                                        break;
                                }
                                if (!StringUtil.isNullOrEmpty(casinguomvalue)) {
                                    try {
                                        Object vDataValue = Double.parseDouble(casinguomvalue);
                                    } catch (Exception ex) {
                                        if (masterPreference.equals("1")) {
                                            casinguomvalue = "1";
                                        } else {
                                            invalidColumn.put((Integer) columnConfig.get("casinguom_value"), "Invalid");
                                            failureMsg += "Incorrect numeric value for Casing UOM Value, Please ensure that value type of Casing UOM Value matches with the Casing UOM Value.";
                                        }
                                    }
                                }
                            }
                        }

                        String inneruomvalue = "1";
                        if (columnConfig.containsKey("inneruom_value")) {
                            HSSFCell cell = row.getCell((Integer) columnConfig.get("inneruom_value"));
                            if (cell != null) {
                                switch (cell.getCellType()) {
                                    case HSSFCell.CELL_TYPE_NUMERIC:
                                        inneruomvalue = Double.toString(cell.getNumericCellValue());
                                        break;
                                    case HSSFCell.CELL_TYPE_STRING:
                                        inneruomvalue = cell.getStringCellValue().trim();
                                        break;
                                }
                            }
                            if (!StringUtil.isNullOrEmpty(inneruomvalue)) {
                                try {
                                    Object vDataValue = Double.parseDouble(inneruomvalue);
                                } catch (Exception ex) {
                                    if (masterPreference.equals("1")) {
                                        inneruomvalue = "1";
                                    } else {
                                        invalidColumn.put((Integer) columnConfig.get("inneruom_value"), "Invalid");
                                        failureMsg += "Incorrect numeric value for Inner UOM Value, Please ensure that value type of Inner UOM Value matches with the Inner UOM Value.";
                                    }
                                }
                            }
                        }

                        String stcokuomvalue = "1";
                        if (columnConfig.containsKey("stockuom_value")) {
                            HSSFCell cell = row.getCell((Integer) columnConfig.get("stockuom_value"));
                            if (cell != null) {
                                switch (cell.getCellType()) {
                                    case HSSFCell.CELL_TYPE_NUMERIC:
                                        stcokuomvalue = Double.toString(cell.getNumericCellValue());
                                        break;
                                    case HSSFCell.CELL_TYPE_STRING:
                                        stcokuomvalue = cell.getStringCellValue().trim();
                                        break;
                                }
                                if (!StringUtil.isNullOrEmpty(stcokuomvalue)) {
                                    try {
                                        Object vDataValue = Double.parseDouble(stcokuomvalue);
                                    } catch (Exception ex) {
                                        if (masterPreference.equals("1")) {
                                            stcokuomvalue = "1";
                                        } else {
                                            invalidColumn.put((Integer) columnConfig.get("stockuom_value"), "Invalid");
                                            failureMsg += "Incorrect numeric value for Stock UOM Value, Please ensure that value type of Stock UOM Value matches with the Stock UOM Value.";
                                        }
                                    }
                                }
                            }
                        }

                        String productReorderLevel = "0";
                        if (columnConfig.containsKey("reorderlevel")) {
                            HSSFCell cell = row.getCell((Integer) columnConfig.get("reorderlevel"));

                            if (cell == null || cell.getCellType() == HSSFCell.CELL_TYPE_BLANK) {
                                productReorderLevel = "0";
                            } else {
                                switch (cell.getCellType()) {
                                    case HSSFCell.CELL_TYPE_NUMERIC:
                                        productReorderLevel = Double.toString(cell.getNumericCellValue());
                                        break;
                                    case HSSFCell.CELL_TYPE_STRING:
                                        productReorderLevel = cell.getStringCellValue().trim();
                                        break;
                                }
                                if (!StringUtil.isNullOrEmpty(productReorderLevel)) {
                                    try {
                                        Object vDataValue = Double.parseDouble(productReorderLevel);
                                    } catch (Exception ex) {
                                        if (masterPreference.equals("1")) {
                                            productReorderLevel = "0";
                                        } else {
                                            invalidColumn.put((Integer) columnConfig.get("reorderlevel"), "Invalid");
                                            failureMsg += "Incorrect numeric value for Reorder Level, Please ensure that value type of Reorder Level matches with the Reorder Level.";
                                        }
                                    }
                                }
                            }
                        } 

                        String productReorderQuantity = "0";
                        if (columnConfig.containsKey("reorderquantity")) {
                            HSSFCell cell = row.getCell((Integer) columnConfig.get("reorderquantity"));

                            if (cell == null || cell.getCellType() == HSSFCell.CELL_TYPE_BLANK) {
                                productReorderQuantity = "0";
                            } else {
                                switch (cell.getCellType()) {
                                    case HSSFCell.CELL_TYPE_NUMERIC:
                                        productReorderQuantity = Double.toString(cell.getNumericCellValue());
                                        break;
                                    case HSSFCell.CELL_TYPE_STRING:
                                        productReorderQuantity = cell.getStringCellValue().trim();
                                        break;
                                }
                                if (!StringUtil.isNullOrEmpty(productReorderQuantity)) {
                                    try {
                                        Object vDataValue = Double.parseDouble(productReorderQuantity);
                                    } catch (Exception ex) {
                                        if (masterPreference.equals("1")) {
                                            productReorderQuantity = "0";
                                        } else {
                                            invalidColumn.put((Integer) columnConfig.get("reorderquantity"), "Invalid");
                                            failureMsg += "Incorrect numeric value for Reorder Quantity, Please ensure that value type of Reorder Quantity matches with the Reorder Quantity.";
                                        }
                                    }
                                }
                            }
                        }

                        String productWarrantyPeriod = "";
                        if (columnConfig.containsKey("warrantyperiod")) {
                            HSSFCell cell = row.getCell((Integer) columnConfig.get("warrantyperiod"));

                            if (cell == null || cell.getCellType() == HSSFCell.CELL_TYPE_BLANK) {
                                productWarrantyPeriod = "0";
                            } else {
                                switch (cell.getCellType()) {
                                    case HSSFCell.CELL_TYPE_NUMERIC:
                                        productWarrantyPeriod = Integer.toString((int) cell.getNumericCellValue());
                                        break;
                                    case HSSFCell.CELL_TYPE_STRING:
                                        productWarrantyPeriod = cell.getStringCellValue().trim();
                                        break;
                                }
                                if (!StringUtil.isNullOrEmpty(productWarrantyPeriod)) {
                                    try {
                                        Object vDataValue = Integer.parseInt(productWarrantyPeriod);
                                    } catch (Exception ex) {
                                        if (masterPreference.equals("1")) {
                                            productWarrantyPeriod = "0";
                                        } else {
                                            invalidColumn.put((Integer) columnConfig.get("warrantyperiod"), "Invalid");
                                            failureMsg += "Incorrect numeric value for Warranty Period (in days), Please ensure that value type of Warranty Period (in days) matches with the Warranty Period (in days).";
                                        }
                                    }
                                }
                            }
                        } else {
                            productWarrantyPeriod = "0";
                        }

                        String productSalesWarrantyPeriod = "0";
                        if (columnConfig.containsKey("warrantyperiodsal")) {
                            HSSFCell cell = row.getCell((Integer) columnConfig.get("warrantyperiodsal"));

                            if (cell == null || cell.getCellType() == HSSFCell.CELL_TYPE_BLANK) {
                                productSalesWarrantyPeriod = "0";
                            } else {
                                switch (cell.getCellType()) {
                                    case HSSFCell.CELL_TYPE_NUMERIC:
                                        productSalesWarrantyPeriod = Integer.toString((int) cell.getNumericCellValue());
                                        break;
                                    case HSSFCell.CELL_TYPE_STRING:
                                        productSalesWarrantyPeriod = cell.getStringCellValue().trim();
                                        break;
                                }
                                if (!StringUtil.isNullOrEmpty(productSalesWarrantyPeriod)) {
                                    try {
                                        Object vDataValue = Integer.parseInt(productSalesWarrantyPeriod);
                                    } catch (Exception ex) {
                                        if (masterPreference.equals("1")) {
                                            productSalesWarrantyPeriod = "0";
                                        } else {
                                            invalidColumn.put((Integer) columnConfig.get("warrantyperiodsal"), "Invalid");
                                            failureMsg += "Incorrect numeric value for Sales Warranty Period (in days), Please ensure that value type of Sales Warranty Period (in days) matches with the Sales Warranty Period (in days).";
                                        }
                                    }
                                }
                            }
                        } 

                        String productLeadTime = "0";
                        if (columnConfig.containsKey("leadtime")) {
                            HSSFCell cell = row.getCell((Integer) columnConfig.get("leadtime"));

                            if (cell == null || cell.getCellType() == HSSFCell.CELL_TYPE_BLANK) {
                                if (masterPreference.equalsIgnoreCase("1")) {
                                    productLeadTime = "0";
                                } else {
                                    if (productTypeID.equals(Producttype.SERVICE)) {
                                        productLeadTime = "0";
                                    } else {
                                        invalidColumn.put((Integer) columnConfig.get("leadtime"), "Invalid");
                                        failureMsg += "Product Lead Time is not available.";
                                    }
                                }
                            } else {
                                switch (cell.getCellType()) {
                                    case HSSFCell.CELL_TYPE_NUMERIC:
                                        productLeadTime = Integer.toString((int) cell.getNumericCellValue());
                                        break;
                                    case HSSFCell.CELL_TYPE_STRING:
                                        productLeadTime = cell.getStringCellValue().trim();
                                        break;
                                }
                                if (!StringUtil.isNullOrEmpty(productLeadTime)) {
                                    try {
                                        if (Integer.parseInt(productLeadTime) > 365) {
                                            invalidColumn.put((Integer) columnConfig.get("leadtime"), "Invalid");
                                            failureMsg += "Product Lead Time should not be greater than 365.";
                                        } else if (Integer.parseInt(productLeadTime) < 0) {
                                            invalidColumn.put((Integer) columnConfig.get("leadtime"), "Invalid");
                                            failureMsg += "Product Lead Time should not be less than 0.";
                                        }
                                    } catch (Exception ex) {
                                        if (masterPreference.equals("1")) {
                                            productLeadTime = "0";
                                        } else {
                                            invalidColumn.put((Integer) columnConfig.get("leadtime"), "Invalid");
                                            failureMsg += "Incorrect numeric value for Lead Time(in days), Please ensure that value type of Lead Time(in days) matches with the Lead Time(in days).";
                                        }
                                    }
                                }
                            }
                        } 

//                        String productCycleCountInterval = "";
//                        if (columnConfig.containsKey("ccountinterval")) {
//                            HSSFCell cell = row.getCell((Integer) columnConfig.get("ccountinterval"));
//                            
//                            if (cell == null) {
//                                productCycleCountInterval = "1";
//                            } else {
//                                productCycleCountInterval = Integer.toString((int) cell.getNumericCellValue());
//                            }
//                        } else {
//                            productCycleCountInterval = "1";
//                        }
//
//                        String productCycleCountTolerance = "";
//                        if (columnConfig.containsKey("ccounttolerance")) {
//                            HSSFCell cell = row.getCell((Integer) columnConfig.get("ccounttolerance"));
//                            
//                            if (cell == null) {
//                                productCycleCountTolerance = "0";
//                            } else {
//                                productCycleCountTolerance = Integer.toString((int) cell.getNumericCellValue());
//                            }
//                        } else {
//                            productCycleCountTolerance = "0";
//                        }

                        String parentProductUUID = "";
                        if (columnConfig.containsKey("parentid")) {
                            HSSFCell cell = row.getCell((Integer) columnConfig.get("parentid"));

                            if (cell != null && cell.getCellType() != HSSFCell.CELL_TYPE_BLANK) {
                                String parentProductID = cell.getStringCellValue().trim();
                                if (!StringUtil.isNullOrEmpty(parentProductID)) {
                                    Product parentProduct = accProductModuleService.getProductByProductID(parentProductID, companyid);
                                    if (parentProduct != null) {
                                        parentProductUUID = parentProduct.getID();
                                    } else {
                                        if (masterPreference.equalsIgnoreCase("1")) {
                                            parentProductUUID = null;
                                        } else {
                                            invalidColumn.put((Integer) columnConfig.get("parentid"), "Invalid");
                                            failureMsg += "Parent Product is not found for " + parentProductID + ".";
                                        }
                                    }
                                }
                            }
                        } else {
                            parentProductUUID = null;
                        }

                        String productSalesAccId = "";
                        if (columnConfig.containsKey("salesaccountname")) {
                            HSSFCell cell = row.getCell((Integer) columnConfig.get("salesaccountname"));

                            if (cell != null && cell.getCellType() != HSSFCell.CELL_TYPE_BLANK) {
                                String productSalesAccountName = cell.getStringCellValue().trim();
                                Account salesAccount = accProductModuleService.getAccountByName(productSalesAccountName, companyid);
                                if (salesAccount != null) {
                                    productSalesAccId = salesAccount.getID();
                                    salesAccount.setUsedIn("Product Sales Account");
                                } else {
                                    invalidColumn.put((Integer) columnConfig.get("salesaccountname"), "Invalid");
                                    failureMsg += "Product Sales Account is not found for " + productSalesAccountName + ".";
                                }
                            } else {
                                invalidColumn.put((Integer) columnConfig.get("salesaccountname"), "Invalid");
                                failureMsg += "Product Sales Account is not available.";
                            }
                        } else {
                            failureMsg += "Product Sales Account column is not found.";
                        }

                        String productSalesReturnAccId = "";
                        if (columnConfig.containsKey("salesretaccountname")) {
                            HSSFCell cell = row.getCell((Integer) columnConfig.get("salesretaccountname"));

                            if (cell != null && cell.getCellType() != HSSFCell.CELL_TYPE_BLANK) {
                                String productSalesReturnAccountName = cell.getStringCellValue().trim();
                                Account salesReturnAccount = accProductModuleService.getAccountByName(productSalesReturnAccountName, companyid);
                                if (salesReturnAccount != null) {
                                    productSalesReturnAccId = salesReturnAccount.getID();
                                    salesReturnAccount.setUsedIn("Product Sales Return Account");
                                } else {
                                    invalidColumn.put((Integer) columnConfig.get("salesretaccountname"), "Invalid");
                                    failureMsg += "Product Sales Return Account is not found for " + productSalesReturnAccountName + ".";
                                }
                            } else {
                                invalidColumn.put((Integer) columnConfig.get("salesretaccountname"), "Invalid");
                                failureMsg += "Product Sales Return Account is not available.";
                            }
                        } else {
                            failureMsg += "Product Sales Return Account column is not found.";
                        }

                        String productPreferedVendorID = "";
                        if (columnConfig.containsKey("vendornameid")) {
                            HSSFCell cell = row.getCell((Integer) columnConfig.get("vendornameid"));

                            if (cell != null && cell.getCellType() != HSSFCell.CELL_TYPE_BLANK) {
                                String productPreferedVendorName = cell.getStringCellValue().trim();
                                if (!StringUtil.isNullOrEmpty(productPreferedVendorName)) {
                                    Vendor vendor = accProductModuleService.getVendorByName(productPreferedVendorName, companyid);
                                    if (vendor != null) {
                                        productPreferedVendorID = vendor.getID();
                                    } else {
                                        if (masterPreference.equalsIgnoreCase("1")) {
                                            productPreferedVendorID = null;
                                        } else {
                                            invalidColumn.put((Integer) columnConfig.get("vendornameid"), "Invalid");
                                            failureMsg += "Prefered Vendor is not found for " + productPreferedVendorName + ".";
                                        }
                                    }
                                }
                            }
                        } else {
                            productPreferedVendorID = null;
                        }

                        String productPurchaseAccId = "";
                        if (columnConfig.containsKey("purchaseaccountname")) {
                            HSSFCell cell = row.getCell((Integer) columnConfig.get("purchaseaccountname"));

                            if (cell != null && cell.getCellType() != HSSFCell.CELL_TYPE_BLANK) {
                                String productPurchaseAccountName = cell.getStringCellValue().trim();
                                Account purchaseAccount = accProductModuleService.getAccountByName(productPurchaseAccountName, companyid);
                                if (purchaseAccount != null) {
                                    productPurchaseAccId = purchaseAccount.getID();
                                    purchaseAccount.setUsedIn("Product Purchase Account");
                                } else {
                                    invalidColumn.put((Integer) columnConfig.get("purchaseaccountname"), "Invalid");
                                    failureMsg += "Product Purchase Account is not found for " + productPurchaseAccountName + ".";
                                }
                            } else {
                                invalidColumn.put((Integer) columnConfig.get("purchaseaccountname"), "Invalid");
                                failureMsg += "Product Purchase Account is not available.";
                            }
                        } else {
                            failureMsg += "Product Purchase Account column is not found.";
                        }

                        String productPurchaseReturnAccId = "";
                        if (columnConfig.containsKey("purchaseretaccountname")) {
                            HSSFCell cell = row.getCell((Integer) columnConfig.get("purchaseretaccountname"));

                            if (cell != null && cell.getCellType() != HSSFCell.CELL_TYPE_BLANK) {
                                String productPurchaseReturnAccountName = cell.getStringCellValue().trim();
                                Account purchaseReturnAccount = accProductModuleService.getAccountByName(productPurchaseReturnAccountName, companyid);
                                if (purchaseReturnAccount != null) {
                                    productPurchaseReturnAccId = purchaseReturnAccount.getID();
                                    purchaseReturnAccount.setUsedIn("Product Purchase Return Account");
                                } else {
                                    invalidColumn.put((Integer) columnConfig.get("purchaseretaccountname"), "Invalid");
                                    failureMsg += "Product Purchase Return Account is not found for " + productPurchaseReturnAccountName + ".";
                                }
                            } else {
                                invalidColumn.put((Integer) columnConfig.get("purchaseretaccountname"), "Invalid");
                                failureMsg += "Product Purchase Return Account is not available.";
                            }
                        } else {
                            failureMsg += "Product Purchase Return Account column is not found.";
                        }

                        String productInitialQuantity = "0";
                        if (columnConfig.containsKey("quantity") && isAddUpdateInitialQuantity == false) {
                            HSSFCell cell = row.getCell((Integer) columnConfig.get("quantity"));

                            if (cell == null || cell.getCellType() == HSSFCell.CELL_TYPE_BLANK) {
                                productInitialQuantity = "0";
                            } else {
                                switch (cell.getCellType()) {
                                    case HSSFCell.CELL_TYPE_NUMERIC:
                                        productInitialQuantity = Double.toString(cell.getNumericCellValue());
                                        break;
                                    case HSSFCell.CELL_TYPE_STRING:
                                        productInitialQuantity = cell.getStringCellValue().trim();
                                        break;
                                }
                                if (!StringUtil.isNullOrEmpty(productInitialQuantity)) {
                                    try {
                                        Object vDataValue = Double.parseDouble(productInitialQuantity);
                                    } catch (Exception ex) {
                                        if (masterPreference.equals("1")) {
                                            productInitialQuantity = "0";
                                        } else {
                                            invalidColumn.put((Integer) columnConfig.get("quantity"), "Invalid");
                                            failureMsg += "Incorrect numeric value for Initial Quantity, Please ensure that value type of Initial Quantity matches with the Initial Quantity.";
                                        }
                                    }
                                }
                            }
                        } 

                        String productInitialPurchasePrise = "0";
                        if (columnConfig.containsKey("purchaseprice")) {
                            HSSFCell cell = row.getCell((Integer) columnConfig.get("purchaseprice"));

                            if (cell != null && cell.getCellType() != HSSFCell.CELL_TYPE_BLANK) {
                                switch (cell.getCellType()) {
                                    case HSSFCell.CELL_TYPE_NUMERIC:
                                        productInitialPurchasePrise = Double.toString(cell.getNumericCellValue());
                                        break;
                                    case HSSFCell.CELL_TYPE_STRING:
                                        productInitialPurchasePrise = cell.getStringCellValue().trim();
                                        break;
                                }
                                if (!StringUtil.isNullOrEmpty(productInitialPurchasePrise)) {
                                    try {
                                        Object vDataValue = Double.parseDouble(productInitialPurchasePrise);
                                    } catch (Exception ex) {
                                        if (masterPreference.equals("1")) {
                                            productInitialPurchasePrise = "0";
                                        } else {
                                            invalidColumn.put((Integer) columnConfig.get("purchaseprice"), "Invalid");
                                            failureMsg += "Incorrect numeric value for Initial Purchase Price, Please ensure that value type of Initial Purchase Price matches with the Initial Purchase Price.";
                                        }
                                    }
                                }
                            }
                        }

                        String productSalesPrice = "0";
                        if (columnConfig.containsKey("saleprice")) {
                            HSSFCell cell = row.getCell((Integer) columnConfig.get("saleprice"));

                            if (cell != null && cell.getCellType() != HSSFCell.CELL_TYPE_BLANK) {
                                switch (cell.getCellType()) {
                                    case HSSFCell.CELL_TYPE_NUMERIC:
                                        productSalesPrice = Double.toString(cell.getNumericCellValue());
                                        break;
                                    case HSSFCell.CELL_TYPE_STRING:
                                        productSalesPrice = cell.getStringCellValue().trim();
                                        break;
                                }
                                if (!StringUtil.isNullOrEmpty(productSalesPrice)) {
                                    try {
                                        Object vDataValue = Double.parseDouble(productSalesPrice);
                                    } catch (Exception ex) {
                                        if (masterPreference.equals("1")) {
                                            productSalesPrice = "0";
                                        } else {
                                            invalidColumn.put((Integer) columnConfig.get("saleprice"), "Invalid");
                                            failureMsg += "Incorrect numeric value for Sales Price, Please ensure that value type of Sales Price matches with the Sales Price.";
                                        }
                                    }
                                }
                            }
                        } 

                        String MsgExep = "";
                        if (isCurrencyCode?columnConfig.containsKey("currencyCode"):columnConfig.containsKey("currencyName")) {
                            HSSFCell cell =isCurrencyCode?row.getCell((Integer) columnConfig.get("currencyCode")):row.getCell((Integer) columnConfig.get("currencyName"));

                            if (cell != null && cell.getCellType() != HSSFCell.CELL_TYPE_BLANK) {
                                String productPriceCurrencyStr = cell.getStringCellValue().trim();
                                currencyId = accProductModuleService.getCurrencyId(productPriceCurrencyStr, currencyMap);
                                if (StringUtil.isNullOrEmpty(currencyId)) {
                                    invalidColumn.put(isCurrencyCode?(Integer) columnConfig.get("currencyCode"):(Integer) columnConfig.get("currencyName"), "Invalid");
                                    MsgExep = messageSource.getMessage("acc.field.ImportProductExceptionFormat", null, RequestContextUtils.getLocale(request));
                                    failureMsg += MsgExep;
                                }
                            } else {
                                if (!masterPreference.equalsIgnoreCase("1")) {
                                    invalidColumn.put(isCurrencyCode?(Integer) columnConfig.get("currencyCode"):(Integer) columnConfig.get("currencyName"), "Invalid");
                                    failureMsg += "Currency is not available.";
                                }
                            }
                        }

                        UOMschemaType uomSchemaType = null;
                        if (columnConfig.containsKey("uomSchemaTypeName")) {
                            HSSFCell cell = row.getCell((Integer) columnConfig.get("uomSchemaTypeName"));
                            if (cell != null && cell.getCellType() != HSSFCell.CELL_TYPE_BLANK) {
                                String uomSchemaTypeName = cell.getStringCellValue().trim();
                                if (!StringUtil.isNullOrEmpty(uomSchemaTypeName)) {
                                    uomSchemaType = getUOMschemaTypeByName(uomSchemaTypeName, companyid);
                                    if (uomSchemaType == null) {
                                        if (!masterPreference.equalsIgnoreCase("1")) {
                                            invalidColumn.put((Integer) columnConfig.get("uomSchemaTypeName"), "Invalid");
                                            failureMsg += "UOM Schema is not found for " + uomSchemaTypeName + ".";
                                        }
                                    }
                                }
                            }
                        }

                        if (uomSchemaType != null && !productUOMID.equalsIgnoreCase(uomSchemaType.getStockuom().getID())) {
                            invalidColumn.put((Integer) columnConfig.get("uomSchemaTypeName"), "Invalid");
                            failureMsg += "Stock UOM of Product and UOM Schema's Stock UOM should be same.";
                        }

                        String productDefaultLocationID = "";
                        if (columnConfig.containsKey("locationName") && companyAccountPreferences.isIslocationcompulsory()) {
                            HSSFCell cell = row.getCell((Integer) columnConfig.get("locationName"));

                            if (cell != null && cell.getCellType() != HSSFCell.CELL_TYPE_BLANK) {
                                String productDefaultLocationName = cell.getStringCellValue().trim();
                                if (!StringUtil.isNullOrEmpty(productDefaultLocationName)) {
                                    InventoryLocation invLoc = accProductModuleService.getInventoryLocationByName(productDefaultLocationName, companyid);
                                    if (invLoc != null) {
                                        productDefaultLocationID = invLoc.getId();
                                    } else {
                                        if (masterPreference.equalsIgnoreCase("2")) {
                                            HashMap requestParam = AccountingManager.getGlobalParams(request);
                                            requestParam.put("id", "");
                                            requestParam.put("name", productDefaultLocationName);
                                            requestParam.put("parent", null);
                                            KwlReturnObject jeresult = accountingHandlerDAOobj.getObject(User.class.getName(), userId);
                                            User user = (User) jeresult.getEntityList().get(0);
                                            requestParam.put("user", user);
                                            KwlReturnObject locationResult = accMasterItemsDAO.addLocationItem(requestParam);
                                            invLoc = (InventoryLocation) locationResult.getEntityList().get(0);
                                            productDefaultLocationID = invLoc.getId();
                                        } else {
                                            if (masterPreference.equalsIgnoreCase("1")) {
                                                productDefaultLocationID = null;
                                            } else {
                                                invalidColumn.put((Integer) columnConfig.get("locationName"), "Invalid");
                                                failureMsg += "Default Location is not found for " + productDefaultLocationName + ".";
                                            }
                                        }
                                    }
                                }
                            }
                        } else {
                            productDefaultLocationID = null;
                        }


                        String productDefaultWarehouseID = "";
                        if (columnConfig.containsKey("warehouseName") && companyAccountPreferences.isIswarehousecompulsory()) {
                            HSSFCell cell = row.getCell((Integer) columnConfig.get("warehouseName"));

                            if (cell != null && cell.getCellType() != HSSFCell.CELL_TYPE_BLANK) {
                                String productDefaultWarehouseName = cell.getStringCellValue().trim();
                                if (!StringUtil.isNullOrEmpty(productDefaultWarehouseName)) {
                                    InventoryWarehouse invWHouse = accProductModuleService.getInventoryWarehouseByName(productDefaultWarehouseName, companyid);
                                    if (invWHouse != null) {
                                        productDefaultWarehouseID = invWHouse.getId();
                                    } else {
                                        if (masterPreference.equalsIgnoreCase("2")) {
                                            Store store = new Store();
                                            store.setStoreType(storeService.getStoreType(0));//Set Store type to warehouse
                                            store.setAbbreviation(productDefaultWarehouseName);
                                            store.setDescription(productDefaultWarehouseName);
                                            store.setCcDateAllow(false);//set Default False
                                            store.setSmccAllow(false);//set Default False
                                            KwlReturnObject jeresult = accountingHandlerDAOobj.getObject(User.class.getName(), userId);
                                            User user = (User) jeresult.getEntityList().get(0);
                                            store.setCreatedBy(user);
                                            Set<User> userSet = new HashSet<>();
                                            userSet.add(user);
                                            Set<User> executiveSet = new HashSet<>();
                                            executiveSet.add(user);
                                            store.setCompany(user.getCompany());
                                            store.setStoreManagerSet(userSet);
                                            store.setStoreExecutiveSet(executiveSet);
                                            storeService.addStore(user, store);
                                            productDefaultWarehouseID = store.getId();
                                        } else {
                                            if (masterPreference.equalsIgnoreCase("1")) {
                                                productDefaultWarehouseID = null;
                                            } else {
                                                invalidColumn.put((Integer) columnConfig.get("warehouseName"), "Invalid");
                                                failureMsg += "Default Warehouse is not found for " + productDefaultWarehouseName + ".";
                                            }
                                        }
                                    }
                                }
                            }
                        } else {
                            productDefaultWarehouseID = null;
                        }


                        Boolean isSyncable = false;
                        if (columnConfig.containsKey("syncable")) {
                            HSSFCell cell = row.getCell((Integer) columnConfig.get("syncable"));

                            if (cell != null && cell.getCellType() != HSSFCell.CELL_TYPE_BLANK) {
                                String productMakeAvailableInOtherApp = cell.getStringCellValue().trim();
                                if (productMakeAvailableInOtherApp.equalsIgnoreCase("T")) {
                                    isSyncable = true;
                                } else if (productMakeAvailableInOtherApp.equalsIgnoreCase("F")) {
                                    isSyncable = false;
                                } else {
                                    invalidColumn.put((Integer) columnConfig.get("syncable"), "Invalid");
                                    failureMsg += "Format you entered is not correct for Make available in other application. It should be like \"T\" or \"F\".";
                                }
                            }
                        }


                        Boolean isMultiUOM = false;
                        if (columnConfig.containsKey("multiuom")) {
                            HSSFCell cell = row.getCell((Integer) columnConfig.get("multiuom"));

                            if (cell != null && cell.getCellType() != HSSFCell.CELL_TYPE_BLANK) {
                                String multipleUOM = cell.getStringCellValue().trim();
                                if (multipleUOM.equalsIgnoreCase("T")) {
                                    isMultiUOM = true;
                                } else if (multipleUOM.equalsIgnoreCase("F")) {
                                    isMultiUOM = false;
                                } else {
                                    invalidColumn.put((Integer) columnConfig.get("multiuom"), "Invalid");
                                    failureMsg += "Format you entered is not correct for Multiple UOM. It should be like \"T\" or \"F\".";
                                }
                            }
                        }
                        Boolean isIslocationforproduct = false;
                        if (columnConfig.containsKey(Constants.ACTIVATE_LOCATION) && companyAccountPreferences.isIslocationcompulsory()) {
                            HSSFCell cell = row.getCell((Integer) columnConfig.get(Constants.ACTIVATE_LOCATION));
                            if (cell != null && cell.getCellType() != HSSFCell.CELL_TYPE_BLANK) {
                                String ISlocationforproduct = cell.getStringCellValue().trim();
                                if (ISlocationforproduct.equalsIgnoreCase("T")) {
                                    isIslocationforproduct = true;
                                } else if (ISlocationforproduct.equalsIgnoreCase("F")) {
                                    isIslocationforproduct = false;
                                } else {
                                    invalidColumn.put((Integer) columnConfig.get(Constants.ACTIVATE_LOCATION), "Invalid");
                                    failureMsg += "Format you entered is not correct for Activate Location. It should be like \"T\" or \"F\".";
                                }
                            }
                        }

                        if (isIslocationforproduct && StringUtil.isNullOrEmpty(productDefaultLocationID) && (!updateExistingRecordFlag || (newProductAddinUpdateCase && updateExistingRecordFlag))) {
                            invalidColumn.put((Integer) columnConfig.get("locationName"), "Invalid");
                            failureMsg += "Location is activated but Default Location Value is not Provided.";
                        }

                        Boolean isIsSerialForProduct = false;
                        if (columnConfig.containsKey(Constants.ACTIVATE_SERIAL_NO) && companyAccountPreferences.isIsSerialCompulsory()) {
                            HSSFCell cell = row.getCell((Integer) columnConfig.get(Constants.ACTIVATE_SERIAL_NO));
                            if (cell != null && cell.getCellType() != HSSFCell.CELL_TYPE_BLANK) {
                                String IsSerialForProduct = cell.getStringCellValue().trim();
                                if (IsSerialForProduct.equalsIgnoreCase("T")) {
                                    isIsSerialForProduct = true;
                                } else if (IsSerialForProduct.equalsIgnoreCase("F")) {
                                    isIsSerialForProduct = false;
                                } else {
                                    invalidColumn.put((Integer) columnConfig.get(Constants.ACTIVATE_SERIAL_NO), "Invalid");
                                    failureMsg += "Format you entered is not correct for Activate Serial No. It should be like \"T\" or \"F\".";
                                }
                            }
                        }

                        if (isIsSerialForProduct && Double.parseDouble(productInitialQuantity) > 0) {
                            invalidColumn.put((Integer) columnConfig.get("quantity"), "Invalid");
                            failureMsg += "Serial Data can't be imported because Opening Quantity is more than 0.";
                        }

                        Boolean isIswarehouseforproduct = false;
                        if (columnConfig.containsKey(Constants.ACTIVATE_WAREHOUSE) && companyAccountPreferences.isIswarehousecompulsory()) {
                            HSSFCell cell = row.getCell((Integer) columnConfig.get(Constants.ACTIVATE_WAREHOUSE));
                            if (cell != null && cell.getCellType() != HSSFCell.CELL_TYPE_BLANK) {
                                String Iswarehouseforproduct = cell.getStringCellValue().trim();
                                if (Iswarehouseforproduct.equalsIgnoreCase("T")) {
                                    isIswarehouseforproduct = true;
                                } else if (Iswarehouseforproduct.equalsIgnoreCase("F")) {
                                    isIswarehouseforproduct = false;
                                } else {
                                    invalidColumn.put((Integer) columnConfig.get(Constants.ACTIVATE_WAREHOUSE), "Invalid");
                                    failureMsg += "Format you entered is not correct for Activate Warehouse. It should be like \"T\" or \"F\".";
                                }
                            }
                        }

                        if (isIswarehouseforproduct && StringUtil.isNullOrEmpty(productDefaultWarehouseID) && (!updateExistingRecordFlag || (newProductAddinUpdateCase && updateExistingRecordFlag))) {
                            invalidColumn.put((Integer) columnConfig.get("warehouseName"), "Invalid");
                            failureMsg += "Warehouse is activated but Default Warehouse Value is not Provided.";
                        }

                        Boolean isIsBatchForProduct = false;
                        if (columnConfig.containsKey(Constants.ACTIVATE_BATCH) && companyAccountPreferences.isIsBatchCompulsory()) {
                            HSSFCell cell = row.getCell((Integer) columnConfig.get(Constants.ACTIVATE_BATCH));
                            if (cell != null && cell.getCellType() != HSSFCell.CELL_TYPE_BLANK) {
                                String IsBatchForProduct = cell.getStringCellValue().trim();
                                if (IsBatchForProduct.equalsIgnoreCase("T")) {
                                    isIsBatchForProduct = true;
                                } else if (IsBatchForProduct.equalsIgnoreCase("F")) {
                                    isIsBatchForProduct = false;
                                } else {
                                    invalidColumn.put((Integer) columnConfig.get(Constants.ACTIVATE_BATCH), "Invalid");
                                    failureMsg += "Format you entered is not correct for Activate Batches. It should be like \"T\" or \"F\".";
                                }
                            }
                        }

                        Boolean isIsRowForProduct = false;
                        if (columnConfig.containsKey(Constants.ACTIVATE_ROW) && companyAccountPreferences.isIsrowcompulsory()) {
                            HSSFCell cell = row.getCell((Integer) columnConfig.get(Constants.ACTIVATE_ROW));
                            if (cell != null && cell.getCellType() != HSSFCell.CELL_TYPE_BLANK) {
                                String IsRowForProduct = cell.getStringCellValue().trim();
                                if (IsRowForProduct.equalsIgnoreCase("T")) {
                                    isIsRowForProduct = true;
                                } else if (IsRowForProduct.equalsIgnoreCase("F")) {
                                    isIsRowForProduct = false;
                                } else {
                                    invalidColumn.put((Integer) columnConfig.get(Constants.ACTIVATE_ROW), "Invalid");
                                    failureMsg += "Format you entered is not correct for Activate Row. It should be like \"T\" or \"F\".";
                                }
                            }
                        }
                        Boolean isIsRackForProduct = false;
                        if (columnConfig.containsKey(Constants.ACTIVATE_RACK) && companyAccountPreferences.isIsrackcompulsory()) {
                            HSSFCell cell = row.getCell((Integer) columnConfig.get(Constants.ACTIVATE_RACK));
                            if (cell != null && cell.getCellType() != HSSFCell.CELL_TYPE_BLANK) {
                                String IsRackForProduct = cell.getStringCellValue().trim();
                                if (IsRackForProduct.equalsIgnoreCase("T")) {
                                    isIsRackForProduct = true;
                                } else if (IsRackForProduct.equalsIgnoreCase("F")) {
                                    isIsRackForProduct = false;
                                } else {
                                    invalidColumn.put((Integer) columnConfig.get(Constants.ACTIVATE_RACK), "Invalid");
                                    failureMsg += "Format you entered is not correct for Activate Rack. It should be like \"T\" or \"F\".";
                                }
                            }
                        }
                        Boolean isIsBinForProduct = false;
                        if (columnConfig.containsKey(Constants.ACTIVATE_BIN) && companyAccountPreferences.isIsbincompulsory()) {
                            HSSFCell cell = row.getCell((Integer) columnConfig.get(Constants.ACTIVATE_BIN));
                            if (cell != null && cell.getCellType() != HSSFCell.CELL_TYPE_BLANK) {
                                String IsBinForProduct = cell.getStringCellValue().trim();
                                if (IsBinForProduct.equalsIgnoreCase("T")) {
                                    isIsBinForProduct = true;
                                } else if (IsBinForProduct.equalsIgnoreCase("F")) {
                                    isIsBinForProduct = false;
                                } else {
                                    invalidColumn.put((Integer) columnConfig.get(Constants.ACTIVATE_BIN), "Invalid");
                                    failureMsg += "Format you entered is not correct for Activate Bin. It should be like \"T\" or \"F\".";
                                }
                            }
                        }

                        String wipoffset = "";
                        if (columnConfig.containsKey("wipoffset")) {
                            HSSFCell cell = row.getCell((Integer) columnConfig.get("wipoffset"));
                            if (cell != null) {
                                wipoffset = cell.getStringCellValue().trim();
                            }
                        }

                        String inventoryoffset = "";
                        if (columnConfig.containsKey("inventoryoffset")) {
                            HSSFCell cell = row.getCell((Integer) columnConfig.get("inventoryoffset"));
                            if (cell != null) {
                                inventoryoffset = cell.getStringCellValue().trim();
                            }
                        }

                        String hscode = "";
                        if (columnConfig.containsKey("hscode")) {
                            HSSFCell cell = row.getCell((Integer) columnConfig.get("hscode"));
                            if (cell != null) {
                                hscode = cell.getStringCellValue().trim();
                            }
                        }
                        String additionalfreetext = "";
                        if (columnConfig.containsKey("additionalfreetext")) {
                            HSSFCell cell = row.getCell((Integer) columnConfig.get("additionalfreetext"));
                            if (cell != null) {
                                additionalfreetext = cell.getStringCellValue().trim();
                            }
                        }
                        String itemcolor = "";
                        if (columnConfig.containsKey("itemcolor")) {
                            HSSFCell cell = row.getCell((Integer) columnConfig.get("itemcolor"));
                            if (cell != null) {
                                itemcolor = cell.getStringCellValue().trim();
                            }
                        }
                        String alternateproduct = "";
                        if (columnConfig.containsKey("alternateproduct")) {
                            HSSFCell cell = row.getCell((Integer) columnConfig.get("alternateproduct"));
                            if (cell != null) {
                                alternateproduct = cell.getStringCellValue().trim();
                            }
                        }
                        String purchasemfg = "";
                        if (columnConfig.containsKey("purchasemfg")) {
                            HSSFCell cell = row.getCell((Integer) columnConfig.get("purchasemfg"));
                            if (cell != null) {
                                purchasemfg = cell.getStringCellValue().trim();
                            }
                        }
                        String catalogno = "";
                        if (columnConfig.containsKey("catalogno")) {
                            HSSFCell cell = row.getCell((Integer) columnConfig.get("catalogno"));
                            if (cell != null) {
                                catalogno = cell.getStringCellValue().trim();
                            }
                        }
                        String barcode = "";
                        if (columnConfig.containsKey("barcode")) {
                            HSSFCell cell = row.getCell((Integer) columnConfig.get("barcode"));
                            if (cell != null) {
                                barcode = cell.getStringCellValue().trim();
                            }
                        }
                        String additionaldesc = "";
                        if (columnConfig.containsKey("additionaldesc")) {
                            HSSFCell cell = row.getCell((Integer) columnConfig.get("additionaldesc"));
                            if (cell != null) {
                                additionaldesc = cell.getStringCellValue().trim();
                            }
                        }
                        String descinforeign = "";
                        if (columnConfig.containsKey("descinforeign")) {
                            HSSFCell cell = row.getCell((Integer) columnConfig.get("descinforeign"));
                            if (cell != null) {
                                descinforeign = cell.getStringCellValue().trim();
                            }
                        }
                        String licensecode = "";
                        if (columnConfig.containsKey("licensecode")) {
                            HSSFCell cell = row.getCell((Integer) columnConfig.get("licensecode"));
                            if (cell != null) {
                                licensecode = cell.getStringCellValue().trim();
                            }
                        }
                        String itemgroup = "";
                        if (columnConfig.containsKey("itemgroup")) {
                            HSSFCell cell = row.getCell((Integer) columnConfig.get("itemgroup"));
                            if (cell != null) {
                                itemgroup = cell.getStringCellValue().trim();
                            }
                        }
                        String pricelist = "";
                        if (columnConfig.containsKey("pricelist")) {
                            HSSFCell cell = row.getCell((Integer) columnConfig.get("pricelist"));
                            if (cell != null) {
                                pricelist = cell.getStringCellValue().trim();
                            }
                        }
                        String shippingtype = "";
                        if (columnConfig.containsKey("shippingtype")) {
                            HSSFCell cell = row.getCell((Integer) columnConfig.get("shippingtype"));
                            if (cell != null) {
                                shippingtype = cell.getStringCellValue().trim();
                            }
                        }
                        Boolean recyclable = false;
                        if (columnConfig.containsKey("recyclable")) {
                            HSSFCell cell = row.getCell((Integer) columnConfig.get("recyclable"));
                            if (cell != null && cell.getCellType() != HSSFCell.CELL_TYPE_BLANK) {
                                String isRecyclable = cell.getStringCellValue().trim();
                                if (isRecyclable.equalsIgnoreCase("T")) {
                                    recyclable = true;
                                } else if (isRecyclable.equalsIgnoreCase("F")) {
                                    recyclable = false;
                                } else {
                                    invalidColumn.put((Integer) columnConfig.get("recyclable"), "Invalid");
                                    failureMsg += "Format you entered is not correct for Is Recyclable. It should be like \"T\" or \"F\".";
                                }
                            }
                        }
                        Boolean qaenable = false;
                        if (columnConfig.containsKey("qaenable")) {
                            HSSFCell cell = row.getCell((Integer) columnConfig.get("qaenable"));
                            if (cell != null && cell.getCellType() != HSSFCell.CELL_TYPE_BLANK) {
                                String isQaenable = cell.getStringCellValue().trim();
                                if (isQaenable.equalsIgnoreCase("T")) {
                                    qaenable = true;
                                } else if (isQaenable.equalsIgnoreCase("F")) {
                                    qaenable = false;
                                } else {
                                    invalidColumn.put((Integer) columnConfig.get("qaenable"), "Invalid");
                                    failureMsg += "Format you entered is not correct for QA Enable. It should be like \"T\" or \"F\".";
                                }
                            }
                        }
                        Boolean isknittingitem = false;
                        if (columnConfig.containsKey("isknittingitem")) {
                            HSSFCell cell = row.getCell((Integer) columnConfig.get("isknittingitem"));
                            if (cell != null && cell.getCellType() != HSSFCell.CELL_TYPE_BLANK) {
                                String isIsknittingitem = cell.getStringCellValue().trim();
                                if (isIsknittingitem.equalsIgnoreCase("T")) {
                                    isknittingitem = true;
                                } else if (isIsknittingitem.equalsIgnoreCase("F")) {
                                    isknittingitem = false;
                                } else {
                                    invalidColumn.put((Integer) columnConfig.get("isknittingitem"), "Invalid");
                                    failureMsg += "Format you entered is not correct for Is Kitting item. It should be like \"T\" or \"F\".";
                                }
                            }
                        }
                        Boolean isactive = false;
                        if (columnConfig.containsKey("isactive")) {
                            HSSFCell cell = row.getCell((Integer) columnConfig.get("isactive"));
                            if (cell != null && cell.getCellType() != HSSFCell.CELL_TYPE_BLANK) {
                                String isIsactive = cell.getStringCellValue().trim();
                                if (isIsactive.equalsIgnoreCase("T")) {
                                    isactive = true;
                                } else if (isIsactive.equalsIgnoreCase("F")) {
                                    isactive = false;
                                } else {
                                    invalidColumn.put((Integer) columnConfig.get("isactive"), "Invalid");
                                    failureMsg += "Format you entered is not correct for Is Active. It should be like \"T\" or \"F\".";
                                }
                            }
                        }
                        Boolean blockloosesell = false;
                        if (columnConfig.containsKey("blockloosesell")) {
                            HSSFCell cell = row.getCell((Integer) columnConfig.get("blockloosesell"));
                            if (cell != null && cell.getCellType() != HSSFCell.CELL_TYPE_BLANK) {
                                String isBlockloosesell = cell.getStringCellValue().trim();
                                if (isBlockloosesell.equalsIgnoreCase("T")) {
                                    blockloosesell = true;
                                } else if (isBlockloosesell.equalsIgnoreCase("F")) {
                                    blockloosesell = false;
                                } else {
                                    invalidColumn.put((Integer) columnConfig.get("blockloosesell"), "Invalid");
                                    failureMsg += "Format you entered is not correct for Block Loose Selling. It should be like \"T\" or \"F\".";
                                }
                            }
                        }
                        String itemsalesvolume = "";
                        if (columnConfig.containsKey("itemsalesvolume")) {
                            HSSFCell cell = row.getCell((Integer) columnConfig.get("itemsalesvolume"));
                            if (cell != null) {
                                switch (cell.getCellType()) {
                                    case HSSFCell.CELL_TYPE_NUMERIC:
                                        itemsalesvolume = Double.toString(cell.getNumericCellValue());
                                        break;
                                    case HSSFCell.CELL_TYPE_STRING:
                                        itemsalesvolume = cell.getStringCellValue().trim();
                                        break;
                                }
                                if (!StringUtil.isNullOrEmpty(itemsalesvolume)) {
                                    try {
                                        Object vDataValue = Double.parseDouble(itemsalesvolume);
                                    } catch (Exception ex) {
                                        if (masterPreference.equals("1")) {
                                            itemsalesvolume = "";
                                        } else {
                                            invalidColumn.put((Integer) columnConfig.get("itemsalesvolume"), "Invalid");
                                            failureMsg += "Incorrect numeric value for item Sales Volume, Please ensure that value type of item Sales Volume matches with the item Sales Volume.";
                                        }
                                    }
                                }
                            }
                        }
                        String productweight = "0";
                        if (columnConfig.containsKey("productweight")) {
                            HSSFCell cell = row.getCell((Integer) columnConfig.get("productweight"));
                            if (cell != null) {
                                switch (cell.getCellType()) {
                                    case HSSFCell.CELL_TYPE_NUMERIC:
                                        productweight = Double.toString(cell.getNumericCellValue());
                                        break;
                                    case HSSFCell.CELL_TYPE_STRING:
                                        productweight = cell.getStringCellValue().trim();
                                        break;
                                }
                                if (!StringUtil.isNullOrEmpty(productweight)) {
                                    try {
                                        Object vDataValue = Double.parseDouble(productweight);
                                    } catch (Exception ex) {
                                         if (masterPreference.equals("1")) {
                                            productweight = "0";
                                        } else {
                                            invalidColumn.put((Integer) columnConfig.get("productweight"), "Invalid");
                                            failureMsg += "Incorrect numeric value for product weight, Please ensure that value type of product weight matches with the product weight.";
                                        }
                                    }
                                }
                            }
                        }
                        String itemsaleswidth = "";
                        if (columnConfig.containsKey("itemsaleswidth")) {
                            HSSFCell cell = row.getCell((Integer) columnConfig.get("itemsaleswidth"));
                            if (cell != null) {
                                switch (cell.getCellType()) {
                                    case HSSFCell.CELL_TYPE_NUMERIC:
                                        itemsaleswidth = Double.toString(cell.getNumericCellValue());
                                        break;
                                    case HSSFCell.CELL_TYPE_STRING:
                                        itemsaleswidth = cell.getStringCellValue().trim();
                                        break;
                                }
                                if (!StringUtil.isNullOrEmpty(itemsaleswidth)) {
                                    try {
                                        Object vDataValue = Double.parseDouble(itemsaleswidth);
                                    } catch (Exception ex) {
                                        if (masterPreference.equals("1")) {
                                            itemsaleswidth = "";
                                        } else {
                                            invalidColumn.put((Integer) columnConfig.get("itemsaleswidth"), "Invalid");
                                            failureMsg += "Incorrect numeric value for Item Sales Width, Please ensure that value type of Item Sales Width matches with the Item Sales Width.";
                                        }
                                    }
                                }
                            }
                        }
                        String itemsalesheight = "";
                        if (columnConfig.containsKey("itemsalesheight")) {
                            HSSFCell cell = row.getCell((Integer) columnConfig.get("itemsalesheight"));
                            if (cell != null) {
                                switch (cell.getCellType()) {
                                    case HSSFCell.CELL_TYPE_NUMERIC:
                                        itemsalesheight = Double.toString(cell.getNumericCellValue());
                                        break;
                                    case HSSFCell.CELL_TYPE_STRING:
                                        itemsalesheight = cell.getStringCellValue().trim();
                                        break;
                                }
                                if (!StringUtil.isNullOrEmpty(itemsalesheight)) {
                                    try {
                                        Object vDataValue = Double.parseDouble(itemsalesheight);
                                    } catch (Exception ex) {
                                        if (masterPreference.equals("1")) {
                                            itemsalesheight = "";
                                        } else {
                                            invalidColumn.put((Integer) columnConfig.get("itemsalesheight"), "Invalid");
                                            failureMsg += "Incorrect numeric value for Item Sales Height, Please ensure that value type of Item Sales Height matches with the Item Sales Height.";
                                        }
                                    }
                                }
                            }
                        }
                        String itemwidth = "";
                        if (columnConfig.containsKey("itemwidth")) {
                            HSSFCell cell = row.getCell((Integer) columnConfig.get("itemwidth"));
                            if (cell != null) {
                                switch (cell.getCellType()) {
                                    case HSSFCell.CELL_TYPE_NUMERIC:
                                        itemwidth = Double.toString(cell.getNumericCellValue());
                                        break;
                                    case HSSFCell.CELL_TYPE_STRING:
                                        itemwidth = cell.getStringCellValue().trim();
                                        break;
                                }
                                if (!StringUtil.isNullOrEmpty(itemwidth)) {
                                    try {
                                        Object vDataValue = Double.parseDouble(itemwidth);
                                    } catch (Exception ex) {
                                        if (masterPreference.equals("1")) {
                                            itemwidth = "";
                                        } else {
                                            invalidColumn.put((Integer) columnConfig.get("itemwidth"), "Invalid");
                                            failureMsg += "Incorrect numeric value for Item Width, Please ensure that value type of Item Width matches with the Item Width.";
                                        }
                                    }
                                }
                            }
                        }
                        String itemvolume = "";
                        if (columnConfig.containsKey("itemvolume")) {
                            HSSFCell cell = row.getCell((Integer) columnConfig.get("itemvolume"));
                            if (cell != null) {
                                switch (cell.getCellType()) {
                                    case HSSFCell.CELL_TYPE_NUMERIC:
                                        itemvolume = Double.toString(cell.getNumericCellValue());
                                        break;
                                    case HSSFCell.CELL_TYPE_STRING:
                                        itemvolume = cell.getStringCellValue().trim();
                                        break;
                                }
                                if (!StringUtil.isNullOrEmpty(itemvolume)) {
                                    try {
                                        Object vDataValue = Double.parseDouble(itemvolume);
                                    } catch (Exception ex) {
                                        if (masterPreference.equals("1")) {
                                            itemvolume = "";
                                        } else {
                                            invalidColumn.put((Integer) columnConfig.get("itemvolume"), "Invalid");
                                            failureMsg += "Incorrect numeric value for Item Volume, Please ensure that value type of Item Volume matches with the Item Volume.";
                                        }
                                    }
                                }
                            }
                        }
                        ValuationMethod valMethod = ValuationMethod.FIFO;
                        if (columnConfig.containsKey("valuationmethod")) {
                            HSSFCell cell = row.getCell((Integer) columnConfig.get("valuationmethod"));
                            if (cell != null && cell.getCellType() != HSSFCell.CELL_TYPE_BLANK) {
                                String cell1 = cell.getStringCellValue();
                                if (!StringUtil.isNullOrEmpty(cell1)) {
                                    if (cell1.equalsIgnoreCase("LIFO")) {
                                        cell1 = "0";
                                    } else if (cell1.equalsIgnoreCase("FIFO")) {
                                        cell1 = "1";
                                    } else if (cell1.equalsIgnoreCase("Moving Average")) {
                                        cell1 = "2";
                                    } else {
                                        invalidColumn.put((Integer) columnConfig.get("valuationmethod"), "Invalid");
                                        failureMsg += "Value is not valid for column. It should be 'FIFO' or 'LIFO' or 'Moving Average'.";
                                    }
                                    int valuationMethod = Integer.parseInt(cell1);
                                    for (ValuationMethod st : ValuationMethod.values()) {
                                        if (st.ordinal() == valuationMethod) {
                                            valMethod = st;
                                            break;
                                        }
                                    }
                                }
                            }
                        } else {
                            valMethod = ValuationMethod.FIFO;
                        }
                        String itempurchasewidth = "";
                        if (columnConfig.containsKey("itempurchasewidth")) {
                            HSSFCell cell = row.getCell((Integer) columnConfig.get("itempurchasewidth"));
                            if (cell != null) {
                                switch (cell.getCellType()) {
                                    case HSSFCell.CELL_TYPE_NUMERIC:
                                        itempurchasewidth = Double.toString(cell.getNumericCellValue());
                                        break;
                                    case HSSFCell.CELL_TYPE_STRING:
                                        itempurchasewidth = cell.getStringCellValue().trim();
                                        break;
                                }
                                if (!StringUtil.isNullOrEmpty(itempurchasewidth)) {
                                    try {
                                        Object vDataValue = Double.parseDouble(itempurchasewidth);
                                    } catch (Exception ex) {
                                        if (masterPreference.equals("1")) {
                                            itempurchasewidth = "";
                                        } else {
                                            invalidColumn.put((Integer) columnConfig.get("itempurchasewidth"), "Invalid");
                                            failureMsg += "Incorrect numeric value for Item Purchase Width, Please ensure that value type of Item Purchase Width matches with the Item Purchase Width.";
                                        }
                                    }
                                }
                            }
                        }
                        String itempurchasevolume = "";
                        if (columnConfig.containsKey("itempurchasevolume")) {
                            HSSFCell cell = row.getCell((Integer) columnConfig.get("itempurchasevolume"));
                            if (cell != null) {
                                switch (cell.getCellType()) {
                                    case HSSFCell.CELL_TYPE_NUMERIC:
                                        itempurchasevolume = Double.toString(cell.getNumericCellValue());
                                        break;
                                    case HSSFCell.CELL_TYPE_STRING:
                                        itempurchasevolume = cell.getStringCellValue().trim();
                                        break;
                                }
                                if (!StringUtil.isNullOrEmpty(itempurchasevolume)) {
                                    try {
                                        Object vDataValue = Double.parseDouble(itempurchasevolume);
                                    } catch (Exception ex) {
                                        if (masterPreference.equals("1")) {
                                            itempurchasevolume = "";
                                        } else {
                                            invalidColumn.put((Integer) columnConfig.get("itempurchasevolume"), "Invalid");
                                            failureMsg += "Incorrect numeric value for Item Purchase Volume, Please ensure that value type of Item Purchase Volume matches with the Item Purchase Volume.";
                                        }
                                    }
                                }
                            }
                        }
                        String itempurchaselength = "0";
                        if (columnConfig.containsKey("itempurchaselength")) {
                            HSSFCell cell = row.getCell((Integer) columnConfig.get("itempurchaselength"));
                            if (cell != null) {
                                switch (cell.getCellType()) {
                                    case HSSFCell.CELL_TYPE_NUMERIC:
                                        itempurchaselength = Double.toString(cell.getNumericCellValue());
                                        break;
                                    case HSSFCell.CELL_TYPE_STRING:
                                        itempurchaselength = cell.getStringCellValue().trim();
                                        break;
                                }
                                if (!StringUtil.isNullOrEmpty(itempurchaselength)) {
                                    try {
                                        Object vDataValue = Double.parseDouble(itempurchaselength);
                                    } catch (Exception ex) {
                                        if (masterPreference.equals("1")) {
                                            itempurchaselength = "0";
                                        } else {
                                            invalidColumn.put((Integer) columnConfig.get("itempurchaselength"), "Invalid");
                                            failureMsg += "Incorrect numeric value for Item Purchase Length, Please ensure that value type of Item Purchase Length matches with the Item Purchase Length.";
                                        }
                                    }
                                }
                            }
                        }
                        String qaleadtimeindays = "0";
                        if (columnConfig.containsKey("qaleadtimeindays")) {
                            HSSFCell cell = row.getCell((Integer) columnConfig.get("qaleadtimeindays"));
                            if (cell != null && cell.getCellType() != HSSFCell.CELL_TYPE_BLANK) {
                                switch (cell.getCellType()) {
                                    case HSSFCell.CELL_TYPE_NUMERIC:
                                        qaleadtimeindays = Double.toString(cell.getNumericCellValue());
                                        break;
                                    case HSSFCell.CELL_TYPE_STRING:
                                        qaleadtimeindays = cell.getStringCellValue().trim();
                                        break;
                                }

                                if (!StringUtil.isNullOrEmpty(qaleadtimeindays)) {
                                    try {
                                        Double d = Double.parseDouble(qaleadtimeindays);
                                        int intValue = d.intValue();
                                        qaleadtimeindays = Integer.toString(intValue);
                                    } catch (Exception ex) {
                                         if (masterPreference.equals("1")) {
                                            qaleadtimeindays = "0";
                                        } else {
                                            invalidColumn.put((Integer) columnConfig.get("qaleadtimeindays"), "Invalid");
                                            failureMsg += "Incorrect numeric value for QA Lead Time(in days), Please ensure that value type of QA Lead Time(in days) matches with the QA Lead Time(in days).";
                                        }
                                    }
                                }
                            }
                        }
                        String reusabilitycount = "";
                        if (columnConfig.containsKey("reusabilitycount")) {
                            HSSFCell cell = row.getCell((Integer) columnConfig.get("reusabilitycount"));
                            if (cell != null && cell.getCellType() != HSSFCell.CELL_TYPE_BLANK) {
                                switch (cell.getCellType()) {
                                    case HSSFCell.CELL_TYPE_NUMERIC:
                                        reusabilitycount = Double.toString(cell.getNumericCellValue());
                                        break;
                                    case HSSFCell.CELL_TYPE_STRING:
                                        reusabilitycount = cell.getStringCellValue().trim();
                                        break;
                                }

                                if (!StringUtil.isNullOrEmpty(reusabilitycount)) {
                                    try {
                                        Double d = Double.parseDouble(reusabilitycount);
                                        int intValue = d.intValue();
                                        reusabilitycount = Integer.toString(intValue);
                                    } catch (Exception ex) {
                                        if (masterPreference.equals("1")) {
                                            reusabilitycount = "";
                                        } else {
                                            invalidColumn.put((Integer) columnConfig.get("reusabilitycount"), "Invalid");
                                            failureMsg += "Incorrect numeric value for Re-usability Count, Please ensure that value type of Re-usability Count matches with the Re-usability Count.";
                                        }
                                    }
                                }
                            }
                        }

                        String orderinguom = "";
                        UnitOfMeasure orderuom = null;
                        if (columnConfig.containsKey("orderinguom")) {
                            HSSFCell cell = row.getCell((Integer) columnConfig.get("orderinguom"));
                            if (cell != null && cell.getCellType() != HSSFCell.CELL_TYPE_BLANK) {
                                String productUOMName = cell.getStringCellValue().trim();
                                if (!StringUtil.isNullOrEmpty(productUOMName)) {
                                    orderuom = accProductModuleService.getUOMByName(productUOMName, companyid);
                                    if (orderuom != null) {
                                        orderinguom = orderuom.getID();
                                    } else {
                                        if (masterPreference.equalsIgnoreCase("2")) {
                                            HashMap<String, Object> uomMap = new HashMap<String, Object>();
                                            uomMap.put("uomname", StringUtil.DecodeText(productUOMName));
                                            uomMap.put("uomtype", StringUtil.DecodeText(productUOMName));
                                            uomMap.put("precision", 0);
                                            uomMap.put("companyid", companyid);

                                            KwlReturnObject uomresult = accUomObj.addUoM(uomMap);
                                            orderuom = (UnitOfMeasure) uomresult.getEntityList().get(0);
                                            orderinguom = orderuom.getID();
                                        } else {
                                            if (masterPreference.equalsIgnoreCase("1")) {
                                                orderinguom = "";
                                            } else {
                                                invalidColumn.put((Integer) columnConfig.get("orderinguom"), "Invalid");
                                                failureMsg += "Product Ordering Unit Of Measure is not found for " + productUOMName + ".";
                                            }
                                        }
                                    }
                                }
                            }
                        } else {
                            orderinguom = "";
                        }
                        String transferuom = "";
                        UnitOfMeasure transferUOM = null;
                        if (columnConfig.containsKey("transferuom")) {
                            HSSFCell cell = row.getCell((Integer) columnConfig.get("transferuom"));
                            if (cell != null && cell.getCellType() != HSSFCell.CELL_TYPE_BLANK) {
                                String productUOMName = cell.getStringCellValue().trim();
                                if (!StringUtil.isNullOrEmpty(productUOMName)) {
                                    transferUOM = accProductModuleService.getUOMByName(productUOMName, companyid);
                                    if (transferUOM != null) {
                                        transferuom = transferUOM.getID();
                                    } else {
                                        if (masterPreference.equalsIgnoreCase("2")) {
                                            HashMap<String, Object> uomMap = new HashMap<String, Object>();
                                            uomMap.put("uomname", StringUtil.DecodeText(productUOMName));
                                            uomMap.put("uomtype", StringUtil.DecodeText(productUOMName));
                                            uomMap.put("precision", 0);
                                            uomMap.put("companyid", companyid);

                                            KwlReturnObject uomresult = accUomObj.addUoM(uomMap);
                                            transferUOM = (UnitOfMeasure) uomresult.getEntityList().get(0);
                                            transferuom = transferUOM.getID();
                                        } else {
                                            if (masterPreference.equalsIgnoreCase("1")) {
                                                transferuom = "";
                                            } else {
                                                invalidColumn.put((Integer) columnConfig.get("transferuom"), "Invalid");
                                                failureMsg += "Product Transfer Unit Of Measure is not found for " + productUOMName + ".";
                                            }
                                        }
                                    }
                                }
                            }
                        } else {
                            transferuom = "";
                        }

                        String supplierPartNumber = "";
                        if (columnConfig.containsKey("supplier")) {
                            HSSFCell cell = row.getCell((Integer) columnConfig.get("supplier"));
                            if (cell != null) {
                                switch (cell.getCellType()) {
                                    case HSSFCell.CELL_TYPE_NUMERIC:
                                        supplierPartNumber = Integer.toString((int) cell.getNumericCellValue());
                                        break;
                                    case HSSFCell.CELL_TYPE_STRING:
                                        supplierPartNumber = cell.getStringCellValue().trim();
                                        break;
                                }
                            }
                        }

                        String partNumber = "";
                        if (columnConfig.containsKey("coilcraft")) {
                            HSSFCell cell = row.getCell((Integer) columnConfig.get("coilcraft"));
                            if (cell != null) {
                                switch (cell.getCellType()) {
                                    case HSSFCell.CELL_TYPE_NUMERIC:
                                        partNumber = Integer.toString((int) cell.getNumericCellValue());
                                        break;
                                    case HSSFCell.CELL_TYPE_STRING:
                                        partNumber = cell.getStringCellValue().trim();
                                        break;
                                }
                            }
                        }

                        String CustomerPartNumber = "";
                        if (columnConfig.containsKey("interplant")) {
                            HSSFCell cell = row.getCell((Integer) columnConfig.get("interplant"));
                            if (cell != null) {
                                switch (cell.getCellType()) {
                                    case HSSFCell.CELL_TYPE_NUMERIC:
                                        CustomerPartNumber = Integer.toString((int) cell.getNumericCellValue());
                                        break;
                                    case HSSFCell.CELL_TYPE_STRING:
                                        CustomerPartNumber = cell.getStringCellValue().trim();
                                        break;
                                }
                            }
                        }

                        // Custom Column Implementation
                        customfield = "";
                        JSONArray customJArr = new JSONArray();
                        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-mm-dd");
                        for (int j = 0; j < jSONArray.length(); j++) {
                            JSONObject jSONObject = jSONArray.getJSONObject(j);
                            if (jSONObject.optBoolean("customflag", false)) { // customflag=true : Custom Field
                                HashMap<String, Object> requestParams = new HashMap<String, Object>();
                                requestParams.put(Constants.filter_names, Arrays.asList(Constants.companyid, Constants.moduleid, Constants.fieldlabel));
                                requestParams.put(Constants.filter_values, Arrays.asList(companyid, Constants.Acc_Product_Master_ModuleId, jSONObject.getString("columnname")));
                                KwlReturnObject fieldParamsResult = accCommonTablesDAO.getFieldParams(requestParams); // get custom field for module
                                FieldParams params = (FieldParams) fieldParamsResult.getEntityList().get(0);
                                if (recarr.get(jSONObject.getInt("csvindex")) != null && !StringUtil.isNullOrEmpty(recarr.get(jSONObject.getInt("csvindex")).toString().replaceAll("\"", "").trim())) {
                                    JSONObject customJObj = new JSONObject();
                                    customJObj.put("fieldid", params.getId());
                                    customJObj.put("refcolumn_name", "Col" + params.getRefcolnum());
                                    customJObj.put("fieldname", "Custom_" + params.getFieldlabel());
                                    customJObj.put("xtype", params.getFieldtype());
                                    String fieldComboDataStr = "";
                                    if (params.getFieldtype() == 3) { // if field of date typed
                                        HSSFCell cell = row.getCell(jSONObject.getInt("csvindex"));
                                        if (cell != null) {
                                            try {
                                                customJObj.put("Col" + params.getColnum(), cell.getDateCellValue().getTime());
                                                customJObj.put("fieldDataVal", cell.getDateCellValue().getTime());
                                            } catch (Exception ex) {
                                                invalidColumn.put(jSONObject.getInt("csvindex"), "Invalid");
                                                failureMsg += "Incorrect date format for " + jSONObject.getString("columnname") + ", Please specify values in correct date format.";
                                            }
                                        }
                                    } else if (params.getFieldtype() == 4 || params.getFieldtype() == 7) { // if field of MultiSelect Drop Down OR Drop Down
                                        String[] fieldComboDataArr = recarr.get(jSONObject.getInt("csvindex")).toString().replaceAll("\"", "").trim().split(";");
                                        for (int dataArrIndex = 0; dataArrIndex < fieldComboDataArr.length; dataArrIndex++) {
                                            requestParams = new HashMap<String, Object>();
                                            requestParams.put(Constants.filter_names, Arrays.asList(Constants.Acc_custom_fieldId, "value", "deleteflag"));
                                            requestParams.put(Constants.filter_values, Arrays.asList(params.getId(), fieldComboDataArr[dataArrIndex], 0));
                                            fieldParamsResult = accCommonTablesDAO.getCustomCombodata(requestParams);
                                            if (fieldParamsResult != null && !fieldParamsResult.getEntityList().isEmpty()) {
                                                FieldComboData fieldComboData = (FieldComboData) fieldParamsResult.getEntityList().get(0);
                                                fieldComboDataStr += fieldComboData.getId() + ",";
                                            } else {
                                                invalidColumn.put(jSONObject.getInt("csvindex"), "Invalid");
                                                failureMsg += jSONObject.getString("columnname") + " entry not found in master list for " + jSONObject.getString("columnname") + " dropdown.";
                                            }

                                        }
                                        if (!StringUtil.isNullOrEmpty(fieldComboDataStr)) {
                                            customJObj.put("Col" + params.getColnum(), fieldComboDataStr.substring(0, fieldComboDataStr.length() - 1));
                                            customJObj.put("fieldDataVal", fieldComboDataStr.substring(0, fieldComboDataStr.length() - 1));
                                        } else {
                                            continue;
                                        }
                                    } else if (params.getFieldtype() == 11) { // if field of check box type 
                                        customJObj.put("Col" + params.getColnum(), Boolean.parseBoolean(recarr.get(jSONObject.getInt("csvindex")).toString().replaceAll("\"", "").trim()));
                                        customJObj.put("fieldDataVal", Boolean.parseBoolean(recarr.get(jSONObject.getInt("csvindex")).toString().replaceAll("\"", "").trim()));
                                    } else if (params.getFieldtype() == 12) { // if field of check list type
                                        requestParams = new HashMap<String, Object>();
                                        requestParams.put(Constants.filter_names, Arrays.asList(Constants.Acc_custom_fieldId, "deleteflag"));
                                        requestParams.put(Constants.filter_values, Arrays.asList(params.getId(), 0));
                                        fieldParamsResult = accCommonTablesDAO.getCustomCombodata(requestParams);
                                        List<FieldComboData> fieldComboDataList = fieldParamsResult.getEntityList();
                                        String[] fieldComboDataArr = recarr.get(jSONObject.getInt("csvindex")).toString().replaceAll("\"", "").trim().split(";");
                                        int dataArrIndex = 0;
                                        for (FieldComboData fieldComboData : fieldComboDataList) {
                                            if (fieldComboDataArr.length != dataArrIndex && fieldComboDataArr[dataArrIndex] != null && fieldComboDataArr[dataArrIndex].replaceAll("\"", "").trim().equalsIgnoreCase("true")) {
                                                fieldComboDataStr += fieldComboData.getId() + ",";
                                            }
                                            dataArrIndex++;
                                        }
                                        if (!StringUtil.isNullOrEmpty(fieldComboDataStr)) {
                                            customJObj.put("Col" + params.getColnum(), fieldComboDataStr.substring(0, fieldComboDataStr.length() - 1));
                                            customJObj.put("fieldDataVal", fieldComboDataStr.substring(0, fieldComboDataStr.length() - 1));
                                        } else {
                                            continue;
                                        }
                                    } else if (params.getFieldtype() == 2) { // if field of Number field type
                                        String numStr = recarr.get(jSONObject.getInt("csvindex")).toString().replaceAll("\"", "").trim();
                                        if (!StringUtil.isNullOrEmpty(numStr)) {
                                            try {
                                                Object vDataValue = Double.parseDouble(numStr);
                                            } catch (Exception ex) {
                                                invalidColumn.put(jSONObject.getInt("csvindex"), "Invalid");
                                                failureMsg += "Incorrect numeric value for " + jSONObject.getString("columnname") + ", Please ensure that value type of " + jSONObject.getString("columnname") + " matches with the " + jSONObject.getString("columnname") + ".";
                                            }
                                        }
                                        customJObj.put("Col" + params.getColnum(), recarr.get(jSONObject.getInt("csvindex")).toString().replaceAll("\"", "").trim());
                                        customJObj.put("fieldDataVal", recarr.get(jSONObject.getInt("csvindex")).toString().replaceAll("\"", "").trim());
                                    } else {
                                        customJObj.put("Col" + params.getColnum(), recarr.get(jSONObject.getInt("csvindex")).toString().replaceAll("\"", "").trim());
                                        customJObj.put("fieldDataVal", recarr.get(jSONObject.getInt("csvindex")).toString().replaceAll("\"", "").trim());
                                    }
                                    customJObj.put("Custom_" + params.getFieldlabel(), "Col" + params.getColnum());
                                    customJArr.put(customJObj);
                                }
                            }
                        }


                        // if Ordering UOM is not in Stock UOM, Inner UOM or Casing UOM fail record by exception msg
                        if (!StringUtil.isNullOrEmpty(orderinguom) && !(productUOMID.equalsIgnoreCase(orderinguom) || innerUoMID.equalsIgnoreCase(orderinguom) || casingUoMID.equalsIgnoreCase(orderinguom))) {
                            invalidColumn.put((Integer) columnConfig.get("orderinguom"), "Invalid");
                            failureMsg += "Ordering UOM are not matching with either Stock UOM or Inner UOM or Casing UOM.";
                        }

                        // if Transfer UOM is not in Stock UOM, Inner UOM or Casing UOM fail record by exception msg
                        if (!StringUtil.isNullOrEmpty(transferuom) && !(productUOMID.equalsIgnoreCase(transferuom) || innerUoMID.equalsIgnoreCase(transferuom) || casingUoMID.equalsIgnoreCase(transferuom))) {
                            invalidColumn.put((Integer) columnConfig.get("transferuom"), "Invalid");
                            failureMsg += "Transfer UOM are not matching with either Stock UOM or Inner UOM or Casing UOM.";
                        }

                        // if Purchase UOM is not in Stock UOM, Inner UOM or Casing UOM fail record by exception msg
                        if (!StringUtil.isNullOrEmpty(PurchaseUOMID) && !(productUOMID.equalsIgnoreCase(PurchaseUOMID) || innerUoMID.equalsIgnoreCase(PurchaseUOMID) || casingUoMID.equalsIgnoreCase(PurchaseUOMID))) {
                            invalidColumn.put((Integer) columnConfig.get("purchaseuom"), "Invalid");
                            failureMsg += "Purchase UOM are not matching with either Stock UOM or Inner UOM or Casing UOM.";
                        }

                        // if Sales UOM is not in Stock UOM, Inner UOM or Casing UOM fail record by exception msg
                        if (!StringUtil.isNullOrEmpty(SalesUOMID) && !(productUOMID.equalsIgnoreCase(SalesUOMID) || innerUoMID.equalsIgnoreCase(SalesUOMID) || casingUoMID.equalsIgnoreCase(SalesUOMID))) {
                            invalidColumn.put((Integer) columnConfig.get("salesuom"), "Invalid");
                            failureMsg += "Sales UOM are not matching with either Stock UOM or Inner UOM or Casing UOM.";
                        }
                        Date asOfDate = null;
                        if (columnConfig.containsKey("asofdate")) {//when AsofDate header is mapped
                            HSSFCell cell = row.getCell((Integer) columnConfig.get("asofdate"));
                            if (cell != null) {
                                String stringAsOfDate = "";
                                switch (cell.getCellType()) {
                                    case HSSFCell.CELL_TYPE_NUMERIC:
                                        stringAsOfDate = Integer.toString((int) cell.getNumericCellValue());
                                        break;
                                    case HSSFCell.CELL_TYPE_STRING:
                                        stringAsOfDate = cell.getStringCellValue().trim();
                                        break;
                                    default:
                                        asOfDate = cell.getDateCellValue();
                                        break;
                                }
                                if (!stringAsOfDate.equals("")) {
                                    String ldf = stringAsOfDate.length() > 10 ? excel_Full_DF : excelDF;
                                    try {
                                        DateFormat exlDF = new SimpleDateFormat(ldf);
                                        exlDF.setLenient(false);
                                        asOfDate = exlDF.parse(stringAsOfDate);
                                    } catch (Exception ex) {
                                        if (masterPreference.equalsIgnoreCase("1")) {//when set empty option is selected then setting its default value bookbeginning date
                                            asOfDate = bookBookBeginningDate;
                                        } else {
                                            invalidColumn.put((Integer) columnConfig.get("asofdate"), "Invalid");
                                            failureMsg += "Incorrect date format for As Of Date, Please specify values in " + ldf + " format.";
                                        }
                                    }
                                }
                            } else {//when value is null or empty
                                if (masterPreference.equals("0")) {//most resticted
                                    invalidColumn.put((Integer) columnConfig.get("asofdate"), "Invalid");
                                    failureMsg += "Empty data found in As Of Date, cannot set empty data for As Of Date.";
                                } else if (masterPreference.equals("2") || masterPreference.equals("1")) {// add new case and set empty case
                                    asOfDate = bookBookBeginningDate;
                                }
                            }
                        } 
                                                
                        if (nocount > 0 && updateExistingRecordFlag && !result.getEntityList().isEmpty()) {
                            productOldObj = (Product) result.getEntityList().get(0);
                            String propChangeErrMsg = "";
                            if (productOldObj != null && productOldObj.getAvailableQuantity() > 0) {
                                    if (productOldObj.isIswarehouseforproduct() != isIswarehouseforproduct) {
                                        invalidColumn.put((Integer) columnConfig.get(Constants.ACTIVATE_WAREHOUSE), "Invalid");
                                        propChangeErrMsg += StringUtil.isNullOrEmpty(propChangeErrMsg) ? "warehouse" : " ,warehouse";
                                    }
                                    if (productOldObj.isIslocationforproduct() != isIslocationforproduct) {
                                        invalidColumn.put((Integer) columnConfig.get(Constants.ACTIVATE_LOCATION), "Invalid");
                                        propChangeErrMsg += StringUtil.isNullOrEmpty(propChangeErrMsg) ? "location" : " ,location";
                                    }
                                    if (productOldObj.isIsrowforproduct() != isIsRowForProduct) {
                                        invalidColumn.put((Integer) columnConfig.get(Constants.ACTIVATE_ROW), "Invalid");
                                        propChangeErrMsg += StringUtil.isNullOrEmpty(propChangeErrMsg) ? "row" : " ,row";
                                    }
                                    if (productOldObj.isIsrackforproduct() != isIsRackForProduct) {
                                        invalidColumn.put((Integer) columnConfig.get(Constants.ACTIVATE_RACK), "Invalid");
                                        propChangeErrMsg += StringUtil.isNullOrEmpty(propChangeErrMsg) ? "rack" : " ,rack";
                                    }
                                    if (productOldObj.isIsbinforproduct() != isIsBinForProduct) {
                                        invalidColumn.put((Integer) columnConfig.get(Constants.ACTIVATE_BIN), "Invalid");
                                        propChangeErrMsg += StringUtil.isNullOrEmpty(propChangeErrMsg) ? "bin" : " ,bin";
                                    }
                                    if (productOldObj.isIsBatchForProduct() != isIsBatchForProduct) {
                                        invalidColumn.put((Integer) columnConfig.get(Constants.ACTIVATE_BATCH), "Invalid");
                                        propChangeErrMsg += StringUtil.isNullOrEmpty(propChangeErrMsg) ? "batch" : " ,batch";
                                    }
                                    if (productOldObj.isIsSerialForProduct() != isIsSerialForProduct) {
                                        invalidColumn.put((Integer) columnConfig.get(Constants.ACTIVATE_SERIAL_NO), "Invalid");
                                        propChangeErrMsg += StringUtil.isNullOrEmpty(propChangeErrMsg) ? "serial" : " ,serial";
                                    }
                                    if (!StringUtil.isNullOrEmpty(propChangeErrMsg)) {
                                        throw new AccountingException("Opening stock is already added for this product.So, " + propChangeErrMsg + " property can not be changed.");
                                    }
                                }
                            }
                        if (!StringUtil.isNullOrEmpty(failureMsg)) {
                            throw new AccountingException(failureMsg);
                        }

                        // creating product Hashmap
                        HashMap<String, Object> productMap = new HashMap<String, Object>();

                        if (nocount == 0) {//if product does not exist i.e new product then need to check, whether it can be generate by sequence format or not. 
                            Map<String, String> sequenceNumberDataMap = new HashMap<String, String>();
                            sequenceNumberDataMap.put("moduleID", String.valueOf(Constants.Acc_Product_Master_ModuleId));
                            sequenceNumberDataMap.put("entryNumber", productID);
                            sequenceNumberDataMap.put("companyID", companyid);
                            List list = importHandler.checksEntryNumberForSequenceNumber(sequenceNumberDataMap);
                            if (!list.isEmpty()) {
                                boolean isvalidEntryNumber = (Boolean) list.get(0);
                                if (!isvalidEntryNumber) {
                                    String formatID = (String) list.get(2);
                                    int intSeq = (Integer) list.get(3);
                                    productMap.put(Constants.SEQNUMBER, intSeq);
                                    productMap.put(Constants.SEQFORMAT, formatID);
                                }
                            }
                        }

                        boolean isUsedInTransaction = false;
                        if (updateExistingRecordFlag && newProductAddinUpdateCase == false) {
                            Product product = (Product) result.getEntityList().get(0);
                            productMap.put("id", product.getID());
                            List listObj = accProductModuleService.isProductUsedintransction(product.getID(), companyid, request,false);// false: Product & Services Report
                            isUsedInTransaction = (Boolean) listObj.get(0);    //always boolean value
                        } else {
                            productMap.put("producttype", productTypeID);
                        }

                        productMap.put("name", productName);
                        productMap.put("productid", productID);
                        if (columnConfig.containsKey("desc")) {
                            productMap.put("desc", productDescription);
                        }
                        productMap.put("syncable", false);
                        productMap.put("multiuom", false);
                        if (columnConfig.containsKey("wipoffset")) {
                            productMap.put("WIPoffset", wipoffset);
                        }
                        if (columnConfig.containsKey("inventoryoffset")) {
                            productMap.put("Inventoryoffset", inventoryoffset);
                        }
                        if (columnConfig.containsKey("hscode")) {
                            productMap.put("hsCode", hscode);
                        }
                        if (columnConfig.containsKey("additionalfreetext")) {
                            productMap.put("additionalfreetext", additionalfreetext);
                        }
                        if (columnConfig.containsKey("itemcolor")) {
                            productMap.put("itemcolor", itemcolor);
                        }
                        if (columnConfig.containsKey("alternateproduct")) {
                            productMap.put("alternateproductid", alternateproduct);
                        }
                        if (columnConfig.containsKey("purchasemfg")) {
                            productMap.put("purchasemfg", purchasemfg);
                        }
                        if (columnConfig.containsKey("catalogno")) {
                            productMap.put("catalogNo", catalogno);
                        }
                        if (columnConfig.containsKey("barcode")) {
                            productMap.put("barcode", barcode);
                        }
                        if (columnConfig.containsKey("additionaldesc")) {
                            productMap.put("additionaldescription", additionaldesc);
                        }
                        if (columnConfig.containsKey("descinforeign")) {
                            productMap.put("foreigndescription", descinforeign);
                        }
                        if (columnConfig.containsKey("licensecode")) {
                            productMap.put("licensecode", licensecode);
                        }
                        if (columnConfig.containsKey("itemgroup")) {
                            productMap.put("itemgroup", itemgroup);
                        }
                        if (columnConfig.containsKey("pricelist")) {
                            productMap.put("itempricelist", pricelist);
                        }
                        if (columnConfig.containsKey("shippingtype")) {
                            productMap.put("shippingtype", shippingtype);
                        }
                        if (columnConfig.containsKey("recyclable")) {
                            productMap.put("isrecyclable", recyclable);
                        }
                        if (columnConfig.containsKey("qaenable")) {
                            productMap.put("isQAenable", qaenable);
                        }
                        if (columnConfig.containsKey("isknittingitem")) {
                            productMap.put("isKnittingItem", isknittingitem);
                        }
                        if (columnConfig.containsKey("isactive")) {
                            productMap.put("isActiveItem", isactive);
                        }
                        if (columnConfig.containsKey("blockloosesell")) {
                            productMap.put("blockLooseSell", blockloosesell);
                        }
                        if (!StringUtil.isNullOrEmpty(itemsalesvolume)) {
                            productMap.put("itemsalesvolume", Double.parseDouble(itemsalesvolume));
                        }
                        if (!StringUtil.isNullOrEmpty(productweight)) {
                            productMap.put("productweight", Double.parseDouble(productweight));
                        }
                        if (!StringUtil.isNullOrEmpty(itemsaleswidth)) {
                            productMap.put("itemsaleswidth", Double.parseDouble(itemsaleswidth));
                        }
                        if (!StringUtil.isNullOrEmpty(itemsalesheight)) {
                            productMap.put("itemsalesheight", Double.parseDouble(itemsalesheight));
                        }
                        if (!StringUtil.isNullOrEmpty(itemwidth)) {
                            productMap.put("itemwidth", Double.parseDouble(itemwidth));
                        }
                        if (!StringUtil.isNullOrEmpty(itemvolume)) {
                            productMap.put("itemvolume", Double.parseDouble(itemvolume));
                        }
                        if (valMethod != null) {
                            productMap.put("valuationmethod", valMethod);
                        }
                        if (!StringUtil.isNullOrEmpty(itempurchasewidth)) {
                            productMap.put("itempurchasewidth", Double.parseDouble(itempurchasewidth));
                        }
                        if (!StringUtil.isNullOrEmpty(itempurchasevolume)) {
                            productMap.put("itempurchasevolume", Double.parseDouble(itempurchasevolume));
                        }
                        if (!StringUtil.isNullOrEmpty(itempurchaselength)) {
                            productMap.put("itempurchaselength", Double.parseDouble(itempurchaselength));
                        }
                        if (!StringUtil.isNullOrEmpty(qaleadtimeindays)) {
                            productMap.put("QAleadtime", Integer.parseInt(qaleadtimeindays));
                        }
                        if (!StringUtil.isNullOrEmpty(reusabilitycount)) {
                            productMap.put("reusabilitycount", Integer.parseInt(reusabilitycount));
                        }
                        if (transferUOM != null) {
                            productMap.put("transferUoM", transferUOM);
                        }
                        if (orderuom != null) {
                            productMap.put("orderUoM", orderuom);
                        }
                        productMap.put("currencyid", currencyId);

                        if (!isUsedInTransaction) {
                            if (columnConfig.containsKey(Constants.ACTIVATE_BATCH)) {
                                productMap.put("isBatchForProduct", isIsBatchForProduct);
                            }
                            if (columnConfig.containsKey(Constants.ACTIVATE_SERIAL_NO)) {
                                productMap.put("isSerialForProduct", isIsSerialForProduct);
                            }
                            if (columnConfig.containsKey(Constants.ACTIVATE_LOCATION)) {
                                productMap.put("isLocationForProduct", isIslocationforproduct);
                            }
                            if (columnConfig.containsKey(Constants.ACTIVATE_WAREHOUSE)) {
                                productMap.put("isWarehouseForProduct", isIswarehouseforproduct);
                                productMap.put("isRowForProduct", isIsRowForProduct);
                                productMap.put("isRackForProduct", isIsRackForProduct);
                                productMap.put("isBinForProduct", isIsBinForProduct);
                            }
                        }

                        if (columnConfig.containsKey("uomname")) {
                            productMap.put("uomid", productUOMID);
                        }
                        if (!productTypeID.equals(Producttype.SERVICE)) {
                            if (uom != null && transferUOM == null) {
                                productMap.put("transferUoM", uom);
                            }
                            if (uom != null && orderuom == null) {
                                productMap.put("orderUoM", uom);
                            }
                            if (salesuom != null) {
                                productMap.put("salesuomid", salesuom);
                            } else if (salesuom == null && uom != null) {
                                productMap.put("salesuomid", uom);
                            }
                            if (purchaseruom != null) {
                                productMap.put("purchaseuomid", purchaseruom);
                            } else if (purchaseruom == null && uom != null) {
                                productMap.put("purchaseuomid", uom);
                            }

                            KwlReturnObject companyObj = accountingHandlerDAOobj.getObject(Company.class.getName(), companyid);
                            Company company = (Company) companyObj.getEntityList().get(0);
                            Packaging packaging = null;
                            if (inneruom != null || casinguom != null) {
                                packaging = new Packaging();
                                if (columnConfig.containsKey("casinguom")) {
                                    packaging.setCasingUoM(casinguom);
                                }
                                if (columnConfig.containsKey("inneruom")) {
                                    packaging.setInnerUoM(inneruom);
                                }
                                if (columnConfig.containsKey("uomname")) {
                                    packaging.setStockUoM(uom);
                                }
                                if (columnConfig.containsKey("casinguom_value")) {
                                    packaging.setCasingUomValue(Double.parseDouble(casinguomvalue));
                                }
                                if (columnConfig.containsKey("inneruom_value")) {
                                    packaging.setInnerUomValue(Double.parseDouble(inneruomvalue));
                                }
                                if (columnConfig.containsKey("stockuom_value")) {
                                    packaging.setStockUomValue(Double.parseDouble(stcokuomvalue));
                                }
                                packaging.setCompany(company);

                            }
                            if (packaging != null) {
                                accProductObj.saveProductPackging(packaging);
                                productMap.put("packaging", packaging);
                            }
                        }


                        if (columnConfig.containsKey("reorderlevel")) {
                            productMap.put("reorderlevel", Double.parseDouble(productReorderLevel));
                        }
                        if (columnConfig.containsKey("reorderquantity")) {
                            productMap.put("reorderquantity", Double.parseDouble(productReorderQuantity));
                        }
                        if (columnConfig.containsKey("warrantyperiod")) {
                            productMap.put("warrantyperiod", Integer.parseInt(productWarrantyPeriod));
                        }
                        if (columnConfig.containsKey("warrantyperiodsal")) {
                            productMap.put("warrantyperiodsal", Integer.parseInt(productSalesWarrantyPeriod));
                        }
                        if (columnConfig.containsKey("leadtime")) {
                            productMap.put("leadtime", Integer.parseInt(productLeadTime));
                        }
                        if (columnConfig.containsKey("parentid")) {
                            productMap.put("parentid", parentProductUUID);
                        }
                        productMap.put("salesaccountid", productSalesAccId);
                        productMap.put("purchaseretaccountid", productPurchaseReturnAccId);
                        productMap.put("salesretaccountid", productSalesReturnAccId);
                        productMap.put("vendorid", productPreferedVendorID);
                        productMap.put("purchaseaccountid", productPurchaseAccId);
                        productMap.put("purchaseretaccountid", productPurchaseReturnAccId);

                        // if product have multiuom = 'T' and Account Preferences have UOM Setting for UOM Schema then set uomschemaType for product
                        if (uomSchemaType != null && isMultiUOM && extraCompanyPreferences != null && extraCompanyPreferences.getUomSchemaType() == 0) {
                            productMap.put("uomschemaType", uomSchemaType);
                        }

                        if (!StringUtil.isNullOrEmpty(productDefaultLocationID)) {
                            productMap.put("location", productDefaultLocationID);
                        }

                        if (!StringUtil.isNullOrEmpty(productDefaultWarehouseID)) {
                            productMap.put("warehouse", productDefaultWarehouseID);
                        }

                        if (columnConfig.containsKey("syncable")) {
                            productMap.put("syncable", isSyncable);
                        }
                        if (columnConfig.containsKey("multiuom")) {
                            productMap.put("multiuom", isMultiUOM);
                        }
                        productMap.put("deletedflag", false);
                        productMap.put("companyid", companyid);
                        productMap.put("isImport", 1);

                        if (!StringUtil.isNullOrEmpty(supplierPartNumber)) {
                            productMap.put("supplier", supplierPartNumber);
                        }

                        if (!StringUtil.isNullOrEmpty(partNumber)) {
                            productMap.put("coilcraft", partNumber);
                        }

                        if (!StringUtil.isNullOrEmpty(CustomerPartNumber)) {
                            productMap.put("interplant", CustomerPartNumber);
                        }
                        if (asOfDate == null) {//asOfDate field will be null only when product is new and field is not mapped
                            asOfDate = bookBookBeginningDate;
                        }
                        productMap.put("asOfDate", asOfDate);

                        KwlReturnObject productresult = null;
                        if (!updateExistingRecordFlag || (newProductAddinUpdateCase && updateExistingRecordFlag)) {
                            productresult = accProductObj.addProduct(productMap);
                        } else {
                            productresult = accProductObj.updateProduct(productMap);
                        }
                        Product product = (Product) productresult.getEntityList().get(0);

//                        if (!productTypeID.equals(Producttype.SERVICE)) {
//                            // creating Price list Hashmap
//                            HashMap<String, Object> cycleParams = new HashMap<String, Object>();
//                            cycleParams.put("productid", product.getID());
//                            cycleParams.put("interval", Integer.parseInt(productCycleCountInterval));
//                            cycleParams.put("tolerance", Integer.parseInt(productCycleCountTolerance));
//                            accProductObj.saveProductCycleCount(cycleParams);
//                        }

                        // if at company level warehouse/location/batch/serial/row/rack/bin one this option is true then we are not updating intial quantity from here. 

                        if (isAddUpdateInitialQuantity == false && productInitialQuantity.length() > 0) { //&& !updateExistingRecordFlag
                            JSONObject inventoryjson = new JSONObject();
                            inventoryjson.put("productid", product.getID());
                            inventoryjson.put("quantity", Double.parseDouble(productInitialQuantity));
                            if (!isUsedInTransaction) {
                                inventoryjson.put("baseuomquantity", Double.parseDouble(productInitialQuantity));
                            }
                            inventoryjson.put("baseuomrate", 1);
                            if (product.getUnitOfMeasure() != null) {
                                inventoryjson.put("uomid", product.getUnitOfMeasure().getID());
                            }
                            inventoryjson.put("description", "Inventory Opened");
                            inventoryjson.put("carryin", true);
                            inventoryjson.put("defective", false);
                            inventoryjson.put("newinventory", true);
                            inventoryjson.put("companyid", companyid);
                            inventoryjson.put("updatedate", asOfDate);

//                            String batchLocationId= "";
//                            String batchWarehouseId="";
//                            double batchQty=0;
//                            KwlReturnObject openingBatchDetail= accImportServiceObj.getProductOpeningQtyBatchDetail(product);
//                            
//                            double prodInitPurchasePrice = 0;
//                            if (productInitialPurchasePrise.length() > 0 && !isUsedInTransaction) {
//                                prodInitPurchasePrice = Double.parseDouble(productInitialPurchasePrise);
//                            }
                            if (!updateExistingRecordFlag || (newProductAddinUpdateCase && updateExistingRecordFlag)) {
                                KwlReturnObject newInvObj = accProductObj.addInventory(inventoryjson);
//                                if(!StringUtil.isNullOrEmpty(productDefaultLocationID) && !StringUtil.isNullOrEmpty(productDefaultWarehouseID) && isInventoryIntegrationOn){
//                                    accImportServiceObj.addStockInventorySide(newInvObj,inventoryjson,productDefaultWarehouseID,productDefaultLocationID,prodInitPurchasePrice);
//                                }
                            } else if (columnConfig.containsKey("quantity")) { // if this is product import(ie. update product import),then quantity column  is removed from mapping,so this will be called only while add product case - Raj Shaha
                                KwlReturnObject updatedInvObj = accProductObj.updateInitialInventory(inventoryjson);
//                                if (openingBatchDetail != null && openingBatchDetail.getEntityList() != null && openingBatchDetail.getRecordTotalCount() > 0) {
//                                    Iterator it1=openingBatchDetail.getEntityList().iterator();
//                                    // if new batch,serial,warehouse,location data is available then only delete previous stock for product
//                                    if(openingBatchDetail.getEntityList().size() > 0){ 
//                                        accImportServiceObj.deleteStockAndSMForProduct(product);//delete stock
//                                        while(it1.hasNext()){ // add new stock
//                                            LocationBatchDocumentMapping lbm = (LocationBatchDocumentMapping) it1.next();
//                                            if (lbm != null) {
//                                                batchWarehouseId = lbm.getBatchmapid().getWarehouse() != null ? lbm.getBatchmapid().getWarehouse().getId() : "";
//                                                batchLocationId = lbm.getBatchmapid().getLocation() != null ? lbm.getBatchmapid().getLocation().getId() : "";
//                                                if (!StringUtil.isNullOrEmpty(batchLocationId) && !StringUtil.isNullOrEmpty(batchWarehouseId) && isInventoryIntegrationOn) {
//                                                    accImportServiceObj.updateStockInventorySide(updatedInvObj, inventoryjson,lbm,prodInitPurchasePrice);
//                                                }
//                                            }
//                            
//                                        }
//                                    }
//
//                                }
                            }

                            HashMap<String, Object> assemblyParams = AccountingManager.getGlobalParams(request);
                            assemblyParams.put("assembly", "");
                            assemblyParams.put("applydate", new Date());
                            assemblyParams.put("quantity", Double.parseDouble(productInitialQuantity));
                            assemblyParams.put("memo", "Inventory Opened");
                            assemblyParams.put("refno", "");
                            assemblyParams.put("buildproductid", product.getID());
                            accProductObj.updateAssemblyInventory(assemblyParams);
                        }
                        Date ondate = new Date();
                        if (productInitialPurchasePrise.length() > 0 && !isUsedInTransaction) {
                            // creating Price list Hashmap
                            HashMap<String, Object> initialPurchasePriceMap = new HashMap<String, Object>();
                            initialPurchasePriceMap.put("productid", product.getID());
                            initialPurchasePriceMap.put("companyid", companyid);
                            initialPurchasePriceMap.put("carryin", true);
                            initialPurchasePriceMap.put("price", Double.parseDouble(productInitialPurchasePrise));
                            initialPurchasePriceMap.put("applydate", ondate);
                            initialPurchasePriceMap.put("affecteduser", "-1");
                            initialPurchasePriceMap.put("currencyid", currencyId);
                            initialPurchasePriceMap.put("uomid", product.getUnitOfMeasure().getID());
                            accProductObj.addPriceList(initialPurchasePriceMap);
                        }

                        if (productSalesPrice.length() > 0 && !isUsedInTransaction) {
                            // creating Price list Hashmap
                            HashMap<String, Object> salesPriceMap = new HashMap<String, Object>();
                            salesPriceMap.put("productid", product.getID());
                            salesPriceMap.put("companyid", companyid);
                            salesPriceMap.put("carryin", false);
                            salesPriceMap.put("price", Double.parseDouble(productSalesPrice));
                            salesPriceMap.put("applydate", ondate);
                            salesPriceMap.put("affecteduser", "-1");
                            salesPriceMap.put("currencyid", currencyId);
                            salesPriceMap.put("uomid", product.getUnitOfMeasure().getID());
                            accProductObj.addPriceList(salesPriceMap);
                        }

                        customfield = customJArr.toString();
                        if (!StringUtil.isNullOrEmpty(customfield)) {
                            JSONArray jcustomarray = new JSONArray(customfield);
                            HashMap<String, Object> customrequestParams = new HashMap<String, Object>();
                            customrequestParams.put("customarray", jcustomarray);
                            customrequestParams.put("modulename", Constants.Acc_Product_modulename);
                            customrequestParams.put("moduleprimarykey", Constants.Acc_Productid);
                            customrequestParams.put("modulerecid", product.getID());
                            customrequestParams.put("moduleid", Constants.Acc_Product_Master_ModuleId);
                            customrequestParams.put("companyid", companyid);
                            productMap.put("id", product.getID());
                            customrequestParams.put("customdataclasspath", Constants.Acc_Product_custom_data_classpath);
                            KwlReturnObject customDataresult = fieldDataManagercntrl.setCustomData(customrequestParams);
                            if (customDataresult != null && customDataresult.getEntityList().size() > 0) {
                                productMap.put("accproductcustomdataref", product.getID());
                                productresult = accProductObj.updateProduct(productMap);
                            }
                            HashMap<String, Object> customHistoryParams = new HashMap<String, Object>();
                            customHistoryParams.put("productId", product.getID());
                            customHistoryParams.put("customarray", jcustomarray);
                            accProductModuleService.maintainCustomFieldHistoryForProduct(request, customHistoryParams);
                        }
                    } catch (Exception ex) {
                        failed++;
                        String errorMsg = ex.getMessage(), invalidColumns = "";
                        try {
                            JSONObject errorLog = new JSONObject(errorMsg);
                            errorMsg = errorLog.getString("errorMsg");
                            invalidColumns = errorLog.getString("invalidColumns");
                        } catch (JSONException jex) {
                            Logger.getLogger(accProductController.class.getName()).log(Level.SEVERE, null, jex);
                        }
//                        failedRecords.append("\n" + accProductModuleService.createCSVrecord(recarr.toArray()) + "\"" + errorMsg.replaceAll("\"", "") + "\"");
                        ArrayList failureRecArr = new ArrayList();
                        failureRecArr.addAll(recarr);
                        failureRecArr.add(errorMsg.replaceAll("\"", ""));
                        failureArr.add(failureRecArr);
                        
                        failureColumnArr.add(invalidColumn);
                    }
                    total++;
                }
                cnt++;

                if (count == limit) {
                    txnManager.commit(status);

                    // for reset counter of transaction limit
                    count = 1;
                    def = new DefaultTransactionDefinition();
                    def.setName("import_Tx");
                    def.setPropagationBehavior(TransactionDefinition.PROPAGATION_REQUIRED);
                    status = txnManager.getTransaction(def);
                } else {
                    count++;
                }
            }

            if (failed > 0) {
//                accProductModuleService.createFailureFiles(fileName, failedRecords, ".csv");
                importDao.createFailureXlsFiles(fileName, failureArr, ".xls", failureColumnArr);
            }

            int success = total - failed;
            if (total == 0) {
                msg = messageSource.getMessage("acc.field.Emptyfile", null, RequestContextUtils.getLocale(request));
            } else if (success == 0) {
//                issuccess = false;
                msg = messageSource.getMessage("acc.rem.169", null, RequestContextUtils.getLocale(request));
            } else if (success == total) {
                msg = messageSource.getMessage("acc.rem.168", null, RequestContextUtils.getLocale(request));
            } else {
                msg = messageSource.getMessage("acc.field.Imported", null, RequestContextUtils.getLocale(request))+ " " + success + " "+ messageSource.getMessage("acc.field.record", null, RequestContextUtils.getLocale(request)) + (success > 1 ? "s" : "") +" "+ messageSource.getMessage("acc.field.successfully.", null, RequestContextUtils.getLocale(request));
                msg += (failed == 0 ? "." : " "+messageSource.getMessage("acc.field.andfailedtoimport", null, RequestContextUtils.getLocale(request))+ " " + failed + " "+ messageSource.getMessage("acc.field.record", null, RequestContextUtils.getLocale(request)) + (failed > 1 ? "s" : "") + ".");
            }

            try {
                txnManager.commit(status);
            } catch (Exception ex) {
                commitedEx = true;
                throw ex;
            }
        } catch (Exception ex) {
            if (!commitedEx) { //if exception occurs during commit then dont call rollback
                txnManager.rollback(status);
            }
            issuccess = false;
            msg = "" + ex.getMessage();

            Logger.getLogger(accProductController.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
            throw new AccountingException("Error While Importing Records.");
        } finally {
//            fileInputStream.close();
//            br.close();

            DefaultTransactionDefinition ldef = new DefaultTransactionDefinition();
            ldef.setName("import_Tx");
            ldef.setPropagationBehavior(TransactionDefinition.PROPAGATION_REQUIRED);
            TransactionStatus lstatus = txnManager.getTransaction(ldef);

            try {
                //Insert Integration log
                HashMap<String, Object> logDataMap = new HashMap<String, Object>();
                logDataMap.put("FileName", getActualFileName(fileName));
                logDataMap.put("StorageName", fileName);
                logDataMap.put("Log", msg);
                logDataMap.put("Type", "xls");
                logDataMap.put("FailureFileType", failed>0?"xls":"");
                logDataMap.put("TotalRecs", total);
                logDataMap.put("Rejected", failed);
                logDataMap.put("Module", Constants.Acc_Product_Master_ModuleId);
                logDataMap.put("ImportDate", new Date());
                logDataMap.put("User", userId);
                logDataMap.put("Company", companyid);
                importDao.saveImportLog(logDataMap);

                String tableName = importDao.getTableName(fileName);
                importDao.removeFileTable(tableName); // Remove table after importing all records

                txnManager.commit(lstatus);
            } catch (Exception ex) {
                txnManager.rollback(lstatus);
                Logger.getLogger(accProductController.class.getName()).log(Level.SEVERE, null, ex);
            }

            try {
                returnObj.put("success", issuccess);
                returnObj.put("msg", msg);
                returnObj.put("totalrecords", total);
                returnObj.put("successrecords", total - failed);
                returnObj.put("failedrecords", failed);
                returnObj.put("filename", getActualFileName(fileName));
                returnObj.put("Module", Constants.Acc_Product_Master_ModuleId);
            } catch (JSONException ex) {
                Logger.getLogger(accProductController.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

        return returnObj;
    }
    
    public ModelAndView importProductPrice(HttpServletRequest request, HttpServletResponse response) throws ServiceException {
        JSONObject jobj = new JSONObject();
        String msg = "";
        boolean issuccess = false;
        try {
            String eParams = request.getParameter("extraParams");
            JSONObject extraParams = StringUtil.isNullOrEmpty(eParams) ? new JSONObject() : new JSONObject(eParams);
            extraParams.put("Company", sessionHandlerImpl.getCompanyid(request));
              ExtraCompanyPreferences extraPref = (ExtraCompanyPreferences) kwlCommonTablesDAOObj.getClassObject("com.krawler.common.admin.ExtraCompanyPreferences", sessionHandlerImpl.getCompanyid(request));
            String baseUrl =com.krawler.common.util.URLUtil.getPageURL(request,loginpageFull,extraPref.getCompany().getSubDomain());
            String doAction = request.getParameter("do");
            HashMap<String, Object> requestParams = importHandler.getImportRequestParams(request);
            requestParams.put("extraParams", extraParams);
            requestParams.put("extraObj", null);
            requestParams.put("servletContext", this.getServletContext());
            requestParams.put("baseUrl", baseUrl);
            String timeZoneDifferenceId = sessionHandlerImpl.getTimeZoneDifference(request);
            String currencyid=sessionHandlerImpl.getCurrencyID(request);
            String dateFormatId = request.getParameter("dateFormat");
            if (doAction.compareToIgnoreCase("import") == 0) {
                System.out.println("A(( Import start : " + new Date());
                JSONObject datajobj = new JSONObject();
                JSONObject resjson = new JSONObject(request.getParameter("resjson").toString());
                JSONArray resjsonJArray = resjson.getJSONArray("root");

                String filename = request.getParameter("filename");
                datajobj.put("filename", filename);

                String destinationDirectory = storageHandlerImpl.GetDocStorePath() + "importplans";
                File filepath = new File(destinationDirectory + "/" + filename);
                datajobj.put("FilePath", filepath);

                datajobj.put("resjson", resjsonJArray);
                    
                datajobj.put("timeZoneDifferenceId", timeZoneDifferenceId);
                datajobj.put("dateformateproduct", dateFormatId);
                requestParams.put("currencyId", currencyid);
                requestParams.put("importflag", Constants.importproductpricecsv);
                requestParams.put("updateExistingRecordFlag", request.getParameter("updateExistingRecordFlag"));
                requestParams.put("jobj", datajobj);
                requestParams.put("remoteAddress", StringUtil.getIpAddress(request));
                    
                String exceededLimit = request.getParameter("exceededLimit");
                if (exceededLimit.equalsIgnoreCase("yes")) {//If file contains records more than 1500 then Import file in background using 
                    jobj.put("isLargeNumberofProductsExporting", true);
                    importpoductobj.add(requestParams);
                    if (!importpoductobj.isIsworking()) {
                        Thread t = new Thread(importpoductobj);
                        t.start();
                    }
                    jobj.put("success", true);
                } else {
//                    jobj = importProductPriceRecords(request, datajobj);
                    jobj = importpoductobj.importProductPriceCSV(requestParams);
                    
                    if (extraPref != null && extraPref.isPropagateToChildCompanies()) {
                        try {
                            List childCompaniesList = companyDetailsDAOObj.getChildCompanies(sessionHandlerImpl.getCompanyid(request));
                            requestParams.put("allowropagatechildcompanies", extraPref.isPropagateToChildCompanies());
                            requestParams.put("childcompanylist", childCompaniesList);
                            requestParams.put("parentcompanyID", sessionHandlerImpl.getCompanyid(request));

                            importpoductobj.add(requestParams);
                            if (!importpoductobj.isIsworking()) {
                                Thread t = new Thread(importpoductobj);
                                t.start();
                            }
                        } catch (Exception ex) {
                            Logger.getLogger(accProductControllerCMN.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
                        }

                    }
                }
                jobj.put("exceededLimit", exceededLimit);
                System.out.println("A(( Import end : " + new Date());
            } else if (doAction.compareToIgnoreCase("validateData") == 0) {
                System.out.println("A(( Validation start : " + new Date());
                jobj = importHandler.validateFileData(requestParams);
                System.out.println("A(( Validation end : " + new Date());
            }
            issuccess = true;
        } catch (Exception ex) {
            issuccess = false;
            msg = "" + ex.getMessage();

            try {
                jobj.put("success", issuccess);
                jobj.put("msg", msg);
            } catch (JSONException e) {
                Logger.getLogger(accProductController.class.getName()).log(Level.SEVERE, e.getMessage(), e);
            }

            Logger.getLogger(accProductController.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
        }
        return new ModelAndView("jsonView", "model", jobj.toString());
    }
    
    public ModelAndView importProductopeningqty(HttpServletRequest request, HttpServletResponse response) throws ServiceException {//Without extrapref
        JSONObject jobj = new JSONObject();
        String msg = "";
        boolean issuccess = false;
        try {
            String eParams = request.getParameter("extraParams");
            JSONObject extraParams = StringUtil.isNullOrEmpty(eParams) ? new JSONObject() : new JSONObject(eParams);
            extraParams.put("Company", sessionHandlerImpl.getCompanyid(request));
            KwlReturnObject custumObjresult = accountingHandlerDAOobj.getObject(CompanyAccountPreferences.class.getName(), sessionHandlerImpl.getCompanyid(request));
            CompanyAccountPreferences preferences = (CompanyAccountPreferences) custumObjresult.getEntityList().get(0);
            String baseUrl =com.krawler.common.util.URLUtil.getPageURL(request,loginpageFull,preferences.getCompany().getSubDomain());
            Date bookBeginningDate = preferences.getBookBeginningFrom();
            String doAction = request.getParameter("do");
            HashMap<String, Object> requestParams = importHandler.getImportRequestParams(request);
            requestParams.put("extraParams", extraParams);
            requestParams.put("extraObj", null);
            requestParams.put("servletContext", this.getServletContext());
            requestParams.put("bookbeginning", bookBeginningDate);
            requestParams.put("baseUrl", baseUrl);
            requestParams.put("locale", RequestContextUtils.getLocale(request));    //For Localize purpose
            boolean isBookClosed = false;
            if (!StringUtil.isNullOrEmpty(request.getParameter("isBookClosed"))) {
                isBookClosed = Boolean.parseBoolean(request.getParameter("isBookClosed"));
            }
            requestParams.put("isBookClosed", isBookClosed);
            if (doAction.compareToIgnoreCase("import") == 0) {
                System.out.println("A(( Import start : " + new Date());
                JSONObject datajobj = new JSONObject();
                JSONObject resjson = new JSONObject(request.getParameter("resjson").toString());
                JSONArray resjsonJArray = resjson.getJSONArray("root");

                String filename = request.getParameter("filename");
                datajobj.put("filename", filename);

                String destinationDirectory = storageHandlerImpl.GetDocStorePath() + "importplans";
                File filepath = new File(destinationDirectory + "/" + filename);
                datajobj.put("FilePath", filepath);
                String currencyid = sessionHandlerImpl.getCurrencyID(request);
                String dateFormatId = request.getParameter("dateFormat");
                datajobj.put("resjson", resjsonJArray);
                requestParams.put("importflag", Constants.importproductopeningqty);
                requestParams.put("currencyId", currencyid);
                datajobj.put("dateformateproduct", dateFormatId);
                requestParams.put("updateExistingRecordFlag", request.getParameter("updateExistingRecordFlag"));
                requestParams.put("jobj", datajobj);
                requestParams.put("remoteAddress", StringUtil.getIpAddress(request));
                String exceededLimit = "yes";//request.getParameter("exceededLimit");
//                if (exceededLimit.equalsIgnoreCase("yes")) {//If file contains records more than 1500 then Import file in background using thread 
                    
                    importpoductobj.add(requestParams);
                    if (!importpoductobj.isIsworking()) {
                        Thread t = new Thread(importpoductobj);
                        t.setPriority(7);
                        t.start();
                    }
                    jobj.put("success", true);
                    jobj.put("exceededLimit", exceededLimit);
//                } else {
////                    jobj = importProductopeningqtyRecords(request, datajobj);
//                    jobj = importpoductobj.importProductopeningqtyRecords(requestParams);
//                }
                System.out.println("A(( Import end : " + new Date());
            } else if (doAction.compareToIgnoreCase("validateData") == 0) {
                System.out.println("A(( Validation start : " + new Date());
                jobj = importHandler.validateFileData(requestParams);
                System.out.println("A(( Validation end : " + new Date());
            }
            issuccess = true;
        } catch (Exception ex) {
            issuccess = false;
            msg = "" + ex.getMessage();

            try {
                jobj.put("success", issuccess);
                jobj.put("msg", msg);
            } catch (JSONException e) {
                Logger.getLogger(accProductController.class.getName()).log(Level.SEVERE, e.getMessage(), e);
            }

            Logger.getLogger(accProductController.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
        }
        return new ModelAndView("jsonView", "model", jobj.toString());
    }

     // Method ll be used to import the records & build the assembly product.
    public ModelAndView importAssemblyProduct(HttpServletRequest request, HttpServletResponse response) throws SessionExpiredException {
        JSONObject jobj = new JSONObject();
        String msg = "";
        boolean issuccess = false;
        String channelName = "";
        try {
            boolean withoutBOM = (request.getParameter("withoutBOM") != null) ? Boolean.parseBoolean(request.getParameter("withoutBOM")) : false;
            boolean bomlessfile = (request.getParameter("bomlessfile") != null) ? Boolean.parseBoolean(request.getParameter("bomlessfile")) : false;
            String eParams = request.getParameter("extraParams");
            boolean typeXLSFile = (request.getParameter("typeXLSFile") != null) ? Boolean.parseBoolean(request.getParameter("typeXLSFile")) : false;
            String companyid = sessionHandlerImpl.getCompanyid(request);
            ExtraCompanyPreferences extraPref = (ExtraCompanyPreferences) kwlCommonTablesDAOObj.getClassObject("com.krawler.common.admin.ExtraCompanyPreferences", companyid);
            KwlReturnObject CompanyPrefResult = accountingHandlerDAOobj.getObject(CompanyAccountPreferences.class.getName(), companyid);
            CompanyAccountPreferences preferences = (CompanyAccountPreferences) CompanyPrefResult.getEntityList().get(0);
             String baseUrl =com.krawler.common.util.URLUtil.getPageURL(request,loginpageFull,extraPref.getCompany().getSubDomain());
            JSONObject extraParams = StringUtil.isNullOrEmpty(eParams) ? new JSONObject() : new JSONObject(eParams);
            extraParams.put("Company", sessionHandlerImpl.getCompanyid(request));
            String currencyId = sessionHandlerImpl.getCurrencyID(request);
            String doAction = request.getParameter("do");
            String modName = request.getParameter("modName");
            HashMap<String, Object> requestParams = importHandler.getImportRequestParams(request);
            requestParams.put("extraParams", extraParams);
            requestParams.put("currencyId", currencyId);
            requestParams.put("servletContext", this.getServletContext());
            requestParams.put("importMethod", typeXLSFile ? "xls" : "csv");
            requestParams.put("modName", modName);
            requestParams.put("locale", RequestContextUtils.getLocale(request));    //For Localize purpose
            requestParams.put("withoutBOM", withoutBOM);  
            requestParams.put("isBomlessFile", bomlessfile);  
            requestParams.put("baseUrl", baseUrl);
            requestParams.put("isActivateMRPModule", extraPref.isActivateMRPModule());
            requestParams.put("inventoryValuationType", preferences.getInventoryValuationType());
            requestParams.put("columnPref",extraPref.getColumnPref());
            
            boolean updateExistingRecordFlag = false;
            if (!StringUtil.isNullOrEmpty(request.getParameter("updateExistingRecordFlag"))) {
                updateExistingRecordFlag = Boolean.FALSE.parseBoolean(request.getParameter("updateExistingRecordFlag"));
            }
            requestParams.put("updateExistingRecordFlag", updateExistingRecordFlag);
            if (updateExistingRecordFlag) {
                requestParams.put("allowDuplcateRecord", updateExistingRecordFlag);
            }
            if (doAction.compareToIgnoreCase("import") == 0) {
                channelName = "/ProductsDetails/gridAutoRefresh";
                System.out.println("A(( Import start : " + new Date());
                JSONObject datajobj = new JSONObject();
                JSONObject resjson = new JSONObject(request.getParameter("resjson").toString());
                JSONArray resjsonJArray = resjson.getJSONArray("root");

                String filename = request.getParameter("filename");
                datajobj.put("filename", filename);

                String destinationDirectory = storageHandlerImpl.GetDocStorePath() + "importplans";
                File filepath = new File(destinationDirectory + "/" + filename);
                datajobj.put("FilePath", filepath);

                datajobj.put("resjson", resjsonJArray);
                
                Date applyDate = authHandler.getDateOnlyFormatter(request).parse(authHandler.getDateOnlyFormatter(request).format(new Date()));
                requestParams.put("jobj", datajobj);
                boolean unBuild = Boolean.parseBoolean(request.getParameter("unBuild"));
                requestParams.put("ApplyDate", applyDate);
                requestParams.put("unBuild", unBuild);
                requestParams.put("remoteAddress", StringUtil.getIpAddress(request));
                    
                String exceededLimit = "yes";
                if (exceededLimit.equalsIgnoreCase("yes")) {//exceededLimit.equalsIgnoreCase("yes") If file contains records more than 1500 then Import file in background using thread
                    //String logId = importHandler.addPendingImportLog(requestParams);
                    //requestParams.put("logId", logId);
                    if (!withoutBOM || (withoutBOM && !bomlessfile)) {    //WithoutBOM Check True, Without BOM Check True but regular Assembly Product import file
                        requestParams.put("importflag", Constants.importassemblyproduct);
                    } else {
                        requestParams.put("importflag", Constants.sampleAssemblyProductWithoutBOM);
                    }
                    if (!importpoductobj.isIsworking()) {
                        Thread t = new Thread(importpoductobj);
                        t.setPriority(Constants.IMPORT_THREAD_PRIORITY_HIGH);
                        importpoductobj.add(requestParams);
                        t.start();
                    } else {
                        importpoductobj.add(requestParams);
                    }
                    jobj.put("success", true);
                }
                jobj.put("exceededLimit", exceededLimit);
                System.out.println("A(( Import end : " + new Date());
            } else if (doAction.compareToIgnoreCase("importXLS") == 0) {
                System.out.println("A(( Import start : " + new Date());
                JSONObject datajobj = new JSONObject();
                JSONObject resjson = new JSONObject(request.getParameter("resjson").toString());
                JSONArray resjsonJArray = resjson.getJSONArray("root");

                String filename = request.getParameter("filename");
                datajobj.put("filename", filename);

                String destinationDirectory = storageHandlerImpl.GetDocStorePath() + "xlsfiles";
                File filepath = new File(destinationDirectory + "/" + filename);
                datajobj.put("FilePath", filepath);

                datajobj.put("resjson", resjsonJArray);

                //jobj = importAssemblyProductXLS(request, datajobj);
                System.out.println("A(( Import end : " + new Date());
            } else if (doAction.compareToIgnoreCase("validateData") == 0) {
                System.out.println("A(( Validation start : " + new Date());
                jobj = importHandler.validateFileData(requestParams);
                System.out.println("A(( Validation end : " + new Date());
            }
            issuccess = true;
        } catch (Exception ex) {
            issuccess = false;
            msg = "" + ex.getMessage();

            try {
                jobj.put("success", issuccess);
                jobj.put("msg", msg);
            } catch (JSONException e) {
                Logger.getLogger(accProductController.class.getName()).log(Level.SEVERE, e.getMessage(), e);
            }

            Logger.getLogger(accProductController.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
        } finally{
            if(issuccess && !StringUtil.isNullOrEmpty(channelName)){
                ServerEventManager.publish(channelName, jobj.toString(), (ServletContext) this.getServletContext());
            }
        }
        return new ModelAndView("jsonView", "model", jobj.toString());
    }   //importAssemblyProduct
    
    
    public ModelAndView importProductCategory(HttpServletRequest request, HttpServletResponse response) throws ServiceException {
        JSONObject jobj = new JSONObject();
        String msg = "";
        boolean issuccess = false;
        try {
            String eParams = request.getParameter("extraParams");
            JSONObject extraParams = StringUtil.isNullOrEmpty(eParams) ? new JSONObject() : new JSONObject(eParams);
            extraParams.put("Company", sessionHandlerImpl.getCompanyid(request));
            String masterPreference = request.getParameter("masterPreference");
            String doAction = request.getParameter("do");
            HashMap<String, Object> requestParams = importHandler.getImportRequestParams(request);
            requestParams.put("extraParams", extraParams);
            requestParams.put("extraObj", null);
            requestParams.put("servletContext", this.getServletContext());

            if (doAction.compareToIgnoreCase("import") == 0) {
                System.out.println("A(( Import start : " + new Date());
                JSONObject datajobj = new JSONObject();
                JSONObject resjson = new JSONObject(request.getParameter("resjson").toString());
                JSONArray resjsonJArray = resjson.getJSONArray("root");

                String filename = request.getParameter("filename");
                datajobj.put("filename", filename);

                String destinationDirectory = storageHandlerImpl.GetDocStorePath() + "importplans";
                File filepath = new File(destinationDirectory + "/" + filename);
                datajobj.put("FilePath", filepath);

                datajobj.put("resjson", resjsonJArray);
                
                requestParams.put("masterPreference", masterPreference);
                requestParams.put("importflag", Constants.importproductcategorycsv);
                requestParams.put("jobj", datajobj);
                requestParams.put("remoteAddress", StringUtil.getIpAddress(request));
                    
                String exceededLimit = request.getParameter("exceededLimit");
                if (exceededLimit.equalsIgnoreCase("yes")) {//If file contains records more than 1500 then Import file in background using thread
                    importpoductobj.add(requestParams);
                    if (!importpoductobj.isIsworking()) {
                        Thread t = new Thread(importpoductobj);
                        t.start();
                    }
                    jobj.put("success", true);
                } else {
//                    jobj = importProductCategoryRecords(request, datajobj);
                    jobj = importpoductobj.importProductCategorycsv(requestParams);
                }

                System.out.println("A(( Import end : " + new Date());
            } else if (doAction.compareToIgnoreCase("validateData") == 0) {
                System.out.println("A(( Validation start : " + new Date());
                jobj = importHandler.validateFileData(requestParams);
                System.out.println("A(( Validation end : " + new Date());
            }
            issuccess = true;
        } catch (Exception ex) {
            issuccess = false;
            msg = "" + ex.getMessage();

            try {
                jobj.put("success", issuccess);
                jobj.put("msg", msg);
            } catch (JSONException e) {
                Logger.getLogger(accProductController.class.getName()).log(Level.SEVERE, e.getMessage(), e);
            }

            Logger.getLogger(accProductController.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
        }
        return new ModelAndView("jsonView", "model", jobj.toString());
    }
    
    @Deprecated
    public JSONObject importProductPriceRecords(HttpServletRequest request, JSONObject jobj) throws AccountingException, IOException, SessionExpiredException, JSONException {
        DefaultTransactionDefinition def = new DefaultTransactionDefinition();
        def.setName("import_Tx");
        def.setPropagationBehavior(TransactionDefinition.PROPAGATION_REQUIRED);
        TransactionStatus status = txnManager.getTransaction(def);
        boolean commitedEx = false;
        boolean issuccess = true;
        String msg = "";
        FileInputStream fileInputStream = null;
        CsvReader csvReader = null;
        int total = 0, failed = 0;
        String currencyId = sessionHandlerImpl.getCurrencyID(request);
        String companyid = sessionHandlerImpl.getCompanyid(request);
        String userId = sessionHandlerImpl.getUserid(request);
        String fileName = jobj.getString("filename");
        String masterPreference = request.getParameter("masterPreference");
        String delimiterType = request.getParameter("delimiterType");
        JSONObject returnObj = new JSONObject();
        String failureMsg = "";

        try {
            String dateFormat = null, dateFormatId = request.getParameter("dateFormat");
            if (!StringUtil.isNullOrEmpty(dateFormatId)) {

                KwlReturnObject kdfObj = accountingHandlerDAOobj.getObject(KWLDateFormat.class.getName(), dateFormatId);
                KWLDateFormat kdf = (KWLDateFormat) kdfObj.getEntityList().get(0);

                dateFormat = kdf != null ? kdf.getJavaForm() : null;
            }

            SimpleDateFormat sdf = new SimpleDateFormat(dateFormat) ;
//            sdf.setTimeZone(TimeZone.getTimeZone("GMT" + sessionHandlerImpl.getTimeZoneDifference(request)));
            DateFormat df = sdf; // For ERP-13295
            fileInputStream = new FileInputStream(jobj.getString("FilePath"));
            csvReader = new CsvReader(new InputStreamReader(fileInputStream), delimiterType);
            int cnt = 0;
            ExtraCompanyPreferences extraPref = (ExtraCompanyPreferences) kwlCommonTablesDAOObj.getClassObject("com.krawler.common.admin.ExtraCompanyPreferences", companyid);
            boolean isCurrencyCode=extraPref.isCurrencyCode();
            StringBuilder failedRecords = new StringBuilder();

            HashMap<String, Integer> columnConfig = new HashMap<>();
            JSONArray jSONArray = jobj.getJSONArray("resjson");
            for (int i = 0; i < jSONArray.length(); i++) {
                JSONObject jSONObject = jSONArray.getJSONObject(i);
                columnConfig.put(jSONObject.getString("dataindex"), jSONObject.getInt("csvindex"));
            }
            
            HashMap currencyMap = accProductModuleService.getCurrencyMap(isCurrencyCode);

            while (csvReader.readRecord()) {
                failureMsg = "";
                String[] recarr = csvReader.getValues();
                if (cnt == 0) {
                    failedRecords.append(accProductModuleService.createCSVrecord(recarr) + "\"Error Message\"");
                }
                if (cnt != 0) {
                    try {
                        currencyId = sessionHandlerImpl.getCurrencyID(request);
                        
                        String productID = "";
                        if (columnConfig.containsKey("productid")) {
                            productID = recarr[(Integer) columnConfig.get("productid")].replaceAll("\"", "").trim();
                            if (!StringUtil.isNullOrEmpty(productID)) {
                                productID = productID.replaceAll("\"", "");
                            } else {
                                failureMsg += "Product ID is not available.";
                            }
                        } else {
                            failureMsg += "Product ID column is not found.";
                        }
                        
                        String customerId = "";
                        if (columnConfig.containsKey("customer")) {
                            String customerCode = recarr[(Integer) columnConfig.get("customer")].replaceAll("\"", "").trim();
                            if (!StringUtil.isNullOrEmpty(customerCode)) {
                                customerId = accProductModuleService.getCustomerIDByCode(customerCode, companyid);
                                if (StringUtil.isNullOrEmpty(customerId)) {
                                    failureMsg += "Customer is not found for Code " + customerCode + ".";
                                }
                                }
                            }
                        
                        String vendorId = "";
                        if (columnConfig.containsKey("vendor")) {
                            String vendorCode = recarr[(Integer) columnConfig.get("vendor")].replaceAll("\"", "").trim();
                            if (!StringUtil.isNullOrEmpty(vendorCode)) {
                                vendorId = accProductModuleService.getVendorIDByCode(vendorCode, companyid);
                                if (StringUtil.isNullOrEmpty(vendorId)) {
                                    failureMsg += "Vendor is not found for Code " + vendorCode + ".";
                                }
                                }
                            }
                        
                        String productPurchasePrice = "";
                        if (columnConfig.containsKey("purchasePrice")) {
                            productPurchasePrice = recarr[(Integer) columnConfig.get("purchasePrice")].replaceAll("\"", "").trim();
                        } else {
                            failureMsg += "Purchase Price column is not found.";
                        }
                        
                        String productSalesPrice = "";
                        if (columnConfig.containsKey("salesPrice")) {
                            productSalesPrice = recarr[(Integer) columnConfig.get("salesPrice")].replaceAll("\"", "").trim();
                        } else {
                            failureMsg += "Sales Price column is not found.";
                        }
                        
                        Date productPriceDate = null;
                        if (columnConfig.containsKey("applyDate")) {
                            String productPriceDateStr = recarr[(Integer) columnConfig.get("applyDate")].replaceAll("\"", "").trim();
                            
                            if (StringUtil.isNullOrEmpty(productPriceDateStr)) {
                                failureMsg += "Product Price Applicable Date is not available";
                            } else {
                                try {
                                productPriceDate = df.parse(productPriceDateStr);
                                } catch (Exception ex) {
                                    failureMsg += "Incorrect date format for Applicable Date, Please specify values in " + dateFormat + " format.";
                            }
                            }
                        } else {
                            failureMsg += "Applicable Date column is not found.";
                        }
                        
                        if (isCurrencyCode?columnConfig.containsKey("currencyCode"):columnConfig.containsKey("currencyName")) {
                            String productPriceCurrencyStr =isCurrencyCode?recarr[(Integer) columnConfig.get("currencyName")].replaceAll("\"", "").trim():recarr[(Integer) columnConfig.get("currencyName")].replaceAll("\"", "").trim();
                            if (!StringUtil.isNullOrEmpty(productPriceCurrencyStr)) {
                                currencyId = accProductModuleService.getCurrencyId(productPriceCurrencyStr, currencyMap);
                                
                                if (StringUtil.isNullOrEmpty(currencyId)) {
                                    failureMsg += messageSource.getMessage("acc.field.ImportProductExceptionFormat", null, RequestContextUtils.getLocale(request));
                                }
                                }
                            }

                        // getting product object
                        KwlReturnObject result = accProductObj.getProductIDCount(productID, companyid,false);
                        int nocount = result.getRecordTotalCount();
                        if (nocount == 0) {
                            throw new AccountingException("Product ID '" + productID + "' not exists.");
                        }
                        
                        if (!StringUtil.isNullOrEmpty(failureMsg)) {
                            throw new AccountingException(failureMsg);
                        }
                        
                        Product product = (Product) result.getEntityList().get(0);


                        // For Purchase Price
                        if (productPurchasePrice.length() > 0) {
                            HashMap<String, Object> requestParams = AccountingManager.getGlobalParams(request);
                            requestParams.put("productid", product.getID());
                            requestParams.put("carryin", true);
                            requestParams.put("applydate", productPriceDate);
                            requestParams.put("price", Double.parseDouble(productPurchasePrice));
                            requestParams.put("currencyid", currencyId);
                            requestParams.put("companyid", companyid);
                            requestParams.put("uomid", product.getUnitOfMeasure().getID());
                            if (!StringUtil.isNullOrEmpty(vendorId)) {
                                // Purchase Price for Vendor
                                requestParams.put("affecteduser", vendorId);
                            } else {
                                // Purchase Price for All
                                requestParams.put("affecteduser", "-1");
                            }

                            KwlReturnObject priceListResult = accProductObj.getPriceListEntry(requestParams);
                            List purchasePriceList = priceListResult.getEntityList();

                            HashMap<String, Object> purchacePriceMap = new HashMap<String, Object>();
                            purchacePriceMap.put("price", Double.parseDouble(productPurchasePrice));

                            if (purchasePriceList.size() <= 0) {
                                purchacePriceMap.put("productid", product.getID());
                                purchacePriceMap.put("companyid", companyid);
                                purchacePriceMap.put("carryin", true);
                                purchacePriceMap.put("applydate", productPriceDate);
                                purchacePriceMap.put("currencyid", currencyId);
                                purchacePriceMap.put("uomid", product.getUnitOfMeasure().getID());
                                if (!StringUtil.isNullOrEmpty(vendorId)) {
                                    // Purchase Price for Vendor
                                    purchacePriceMap.put("affecteduser", vendorId);
                                } else {
                                    // Purchase Price for All
                                    purchacePriceMap.put("affecteduser", "-1");
                                }
                                accProductObj.addPriceList(purchacePriceMap);
                            } else {
                                PriceList purchasePrice = (PriceList) purchasePriceList.get(0);
                                purchacePriceMap.put("priceid", purchasePrice.getID());
                                accProductObj.updatePriceList(purchacePriceMap);
                            }
                        }

                        // For Sales Price
                        if (productSalesPrice.length() > 0) {
                            HashMap<String, Object> requestParams = AccountingManager.getGlobalParams(request);
                            requestParams.put("productid", product.getID());
                            requestParams.put("carryin", false);
                            requestParams.put("applydate", productPriceDate);
                            requestParams.put("price", Double.parseDouble(productSalesPrice));
                            requestParams.put("currencyid", currencyId);
                            requestParams.put("companyid", companyid);
                            requestParams.put("uomid", product.getUnitOfMeasure().getID());
                            if (!StringUtil.isNullOrEmpty(customerId)) {
                                // Sales Price for customer
                                requestParams.put("affecteduser", customerId);
                            } else {
                                // Sales Price for All
                                requestParams.put("affecteduser", "-1");
                            }

                            KwlReturnObject salesPriceListResult = accProductObj.getPriceListEntry(requestParams);
                            List salesPriceList = salesPriceListResult.getEntityList();

                            HashMap<String, Object> salesPriceMap = new HashMap<String, Object>();
                            salesPriceMap.put("price", Double.parseDouble(productSalesPrice));

                            if (salesPriceList.size() <= 0) {
                                salesPriceMap.put("productid", product.getID());
                                salesPriceMap.put("companyid", companyid);
                                salesPriceMap.put("carryin", false);
                                salesPriceMap.put("applydate", productPriceDate);
                                salesPriceMap.put("currencyid", currencyId);
                                salesPriceMap.put("uomid", product.getUnitOfMeasure().getID());
                                if (!StringUtil.isNullOrEmpty(customerId)) {
                                    // Sales Price for customer
                                    salesPriceMap.put("affecteduser", customerId);
                                } else {
                                    // Sales Price for All
                                    salesPriceMap.put("affecteduser", "-1");
                                }
                                accProductObj.addPriceList(salesPriceMap);
                            } else {
                                PriceList salesPrice = (PriceList) salesPriceList.get(0);
                                salesPriceMap.put("priceid", salesPrice.getID());
                                accProductObj.updatePriceList(salesPriceMap);
                            }
                        }

                    } catch (Exception ex) {
                        failed++;
                        String errorMsg = ex.getMessage(), invalidColumns = "";
                        try {
                            JSONObject errorLog = new JSONObject(errorMsg);
                            errorMsg = errorLog.getString("errorMsg");
                            invalidColumns = errorLog.getString("invalidColumns");
                        } catch (JSONException jex) {
                        }
                        failedRecords.append("\n" + accProductModuleService.createCSVrecord(recarr) + "\"" + errorMsg.replaceAll("\"", "") + "\"");
                    }
                    total++;
                }
                cnt++;
            }

            if (failed > 0) {
                accProductModuleService.createFailureFiles(fileName, failedRecords, ".csv");
            }

            int success = total - failed;
            if (total == 0) {
                msg = messageSource.getMessage("acc.field.Emptyfile", null, RequestContextUtils.getLocale(request));
            } else if (success == 0) {
//                issuccess = false;
                msg = messageSource.getMessage("acc.rem.169", null, RequestContextUtils.getLocale(request));
            } else if (success == total) {
                msg = messageSource.getMessage("acc.rem.168", null, RequestContextUtils.getLocale(request));
            } else {
                msg = messageSource.getMessage("acc.field.Imported", null, RequestContextUtils.getLocale(request))+ " " + success + " "+ messageSource.getMessage("acc.field.record", null, RequestContextUtils.getLocale(request)) + (success > 1 ? "s" : "") +" " +messageSource.getMessage("acc.field.successfully.", null, RequestContextUtils.getLocale(request));
                msg += (failed == 0 ? "." : " "+messageSource.getMessage("acc.field.andfailedtoimport", null, RequestContextUtils.getLocale(request))+ " " + failed + " "+ messageSource.getMessage("acc.field.record", null, RequestContextUtils.getLocale(request)) + (failed > 1 ? "s" : "") + ".");
            }

            try {
                txnManager.commit(status);
            } catch (Exception ex) {
                commitedEx = true;
                throw ex;
            }
        } catch (Exception ex) {
            if (!commitedEx) { //if exception occurs during commit then dont call rollback
                txnManager.rollback(status);
            }
            issuccess = false;
            msg = "" + ex.getMessage();

            Logger.getLogger(accProductController.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
            throw new AccountingException("Error While Importing Records.");
        } finally {
            fileInputStream.close();
            csvReader.close();

            DefaultTransactionDefinition ldef = new DefaultTransactionDefinition();
            ldef.setName("import_Tx");
            ldef.setPropagationBehavior(TransactionDefinition.PROPAGATION_REQUIRED);
            TransactionStatus lstatus = txnManager.getTransaction(ldef);

            try {
                //Insert Integration log
                HashMap<String, Object> logDataMap = new HashMap<String, Object>();
                logDataMap.put("FileName", getActualFileName(fileName));
                logDataMap.put("StorageName", fileName);
                logDataMap.put("Log", msg);
                logDataMap.put("Type", "csv");
                logDataMap.put("FailureFileType", failed>0?"csv":"");
                logDataMap.put("TotalRecs", total);
                logDataMap.put("Rejected", failed);
                logDataMap.put("Module", Constants.Acc_Product_Price_List_ModuleId);
                logDataMap.put("ImportDate", new Date());
                logDataMap.put("User", userId);
                logDataMap.put("Company", companyid);
                importDao.saveImportLog(logDataMap);
                
                String tableName = importDao.getTableName(fileName);
                importDao.removeFileTable(tableName); // Remove table after importing all records
                
                txnManager.commit(lstatus);
            } catch (Exception ex) {
                txnManager.rollback(lstatus);
                Logger.getLogger(accProductController.class.getName()).log(Level.SEVERE, null, ex);
            }

            try {
                returnObj.put("success", issuccess);
                returnObj.put("msg", msg);
                returnObj.put("totalrecords", total);
                returnObj.put("successrecords", total - failed);
                returnObj.put("failedrecords", failed);
                returnObj.put("filename", getActualFileName(fileName));
            } catch (JSONException ex) {
                Logger.getLogger(accProductController.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

        return returnObj;
    }
    
    @Deprecated
    public JSONObject importProductopeningqtyRecords(HttpServletRequest request, JSONObject jobj) throws AccountingException, IOException, SessionExpiredException, JSONException {
        DefaultTransactionDefinition def = new DefaultTransactionDefinition();
        def.setName("import_Tx");
        def.setPropagationBehavior(TransactionDefinition.PROPAGATION_REQUIRED);
        TransactionStatus status = txnManager.getTransaction(def);
        boolean commitedEx = false;
        boolean issuccess = true;
        String msg = "";
        FileInputStream fileInputStream = null;
        BufferedReader br = null;
        int total = 0, failed = 0;
        String currencyId = sessionHandlerImpl.getCurrencyID(request);
        String companyid = sessionHandlerImpl.getCompanyid(request);
        String userId = sessionHandlerImpl.getUserid(request);
        String fileName = jobj.getString("filename");
        String masterPreference = request.getParameter("masterPreference");
        
        JSONObject returnObj = new JSONObject();
        boolean isInventoryIntegrationOn=false;
        
        try {
            KwlReturnObject custumObjresult = accountingHandlerDAOobj.getObject(CompanyAccountPreferences.class.getName(), companyid);
            CompanyAccountPreferences preferences = (CompanyAccountPreferences) custumObjresult.getEntityList().get(0);
            
            boolean isBatchForProduct = false;
            boolean isSerialForProduct = false;
            boolean isLocationForProduct = false;
            boolean isWarehouseForProduct = false;
            boolean isRowForProduct = false;
            boolean isRackForProduct = false;
            boolean isBinForProduct = false;
            KwlReturnObject kmsg = null;
            
            KwlReturnObject extraCompanyPrefResult = accountingHandlerDAOobj.getObject(ExtraCompanyPreferences.class.getName(), companyid);
            ExtraCompanyPreferences extraCompanyPreferences = (ExtraCompanyPreferences) extraCompanyPrefResult.getEntityList().get(0);
            isInventoryIntegrationOn = extraCompanyPreferences.isActivateInventoryTab();
            
            String dateFormat = null, dateFormatId = request.getParameter("dateFormat");
            if (!StringUtil.isNullOrEmpty(dateFormatId)) {

                KwlReturnObject kdfObj = accountingHandlerDAOobj.getObject(KWLDateFormat.class.getName(), dateFormatId);
                KWLDateFormat kdf = (KWLDateFormat) kdfObj.getEntityList().get(0);

                dateFormat = kdf != null ? kdf.getJavaForm() : null;
            }
            boolean isCurrencyCode=extraCompanyPreferences.isCurrencyCode();
            DateFormat df = new SimpleDateFormat(dateFormat);
            fileInputStream = new FileInputStream(jobj.getString("FilePath"));
            br = new BufferedReader(new InputStreamReader(fileInputStream));
            String record = "";
            int cnt = 0;

            StringBuilder failedRecords = new StringBuilder();

            HashMap<String, Integer> columnConfig = new HashMap<String, Integer>();
            JSONArray jSONArray = jobj.getJSONArray("resjson");
            List headArrayList = new ArrayList();
            for (int i = 0; i < jSONArray.length(); i++) {
                JSONObject jSONObject = jSONArray.getJSONObject(i);
                headArrayList.add(jSONObject.get("csvheader"));

                columnConfig.put(jSONObject.getString("dataindex"), jSONObject.getInt("csvindex"));
            }

            failedRecords.append(accProductModuleService.createCSVrecord(headArrayList.toArray()) + "\"Error Message\"");//failedRecords.append("\"Row No.\","+createCSVrecord(fileData)+"\"Error Message\"");
            HashMap currencyMap = accProductModuleService.getCurrencyMap(isCurrencyCode);

            while ((record = br.readLine()) != null) {
                if (cnt != 0) {
                    String[] recarr = record.split(",");
                    try {
                        currencyId = sessionHandlerImpl.getCurrencyID(request);
                        NewProductBatch productBatch = null;
                        String productBatchId = "";
                        String productID = "";
                        if (columnConfig.containsKey("productid")) {
                            productID = recarr[(Integer) columnConfig.get("productid")].replaceAll("\"", "").trim();
                            if (!StringUtil.isNullOrEmpty(productID)) {
                                productID = productID.replaceAll("\"", "");
                            } else {
                                throw new AccountingException("Product ID is not available.");
                            }
                        } else {
                            throw new AccountingException("Product ID column is not found.");
                        }

                        // getting product object
                        KwlReturnObject result = accProductObj.getProductIDCount(productID, companyid,false);
                        int nocount = result.getRecordTotalCount();
                        if (nocount == 0) {
                            throw new AccountingException("productID '" + productID + "' not exists.");
                        }
                        Product product = (Product) result.getEntityList().get(0);
                        if (product != null) {
                            isBatchForProduct = product.isIsBatchForProduct();
                            isSerialForProduct = product.isIsSerialForProduct();
                            isLocationForProduct = product.isIslocationforproduct();
                            isWarehouseForProduct = product.isIswarehouseforproduct();
                            isRowForProduct = product.isIsrowforproduct();
                            isRackForProduct = product.isIsrackforproduct();
                            isBinForProduct = product.isIsbinforproduct();
                            
                            boolean isProductUsedInTransaction = accImportServiceObj.isProductUsedInTransaction(companyid, product.getID());
                            if (isProductUsedInTransaction) {
                                throw new AccountingException("Product is already used in transaction,so can't update its opening quantity.");
                            }
                            
                            if(isBatchForProduct || isSerialForProduct){
                                throw new AccountingException("Batch or Serial is enable for this product.So,you can't give its opening quantity through import.");
                            }
                            Date asOfDate=product.getAsOfDate();
                            if(asOfDate==null){
                                asOfDate=preferences.getBookBeginningFrom();
                            }
                            String invalidColumns = "";
                            if(isWarehouseForProduct){
                                if (columnConfig.containsKey("warehouseName") && recarr.length > (Integer)columnConfig.get("warehouseName")) {
                                    String value = recarr[(Integer) columnConfig.get("warehouseName")].replaceAll("\"", "").trim();
                                    if(StringUtil.isNullOrEmpty(value)){
                                        if(!StringUtil.isNullOrEmpty(invalidColumns)){
                                            invalidColumns +=",";
                                        }
                                        invalidColumns += " Warehouse";
                                    }
                                }else{
                                    if (!StringUtil.isNullOrEmpty(invalidColumns)) {
                                        invalidColumns += ",";
                                    }
                                    invalidColumns += " Warehouse";
                                }
                            }
                            if(isLocationForProduct){
                                if (columnConfig.containsKey("locationName") && recarr.length > (Integer)columnConfig.get("locationName")) {
                                    String value = recarr[(Integer) columnConfig.get("locationName")].replaceAll("\"", "").trim();
                                    if(StringUtil.isNullOrEmpty(value)){
                                        if(!StringUtil.isNullOrEmpty(invalidColumns)){
                                            invalidColumns +=",";
                                        }
                                        invalidColumns += " Location";
                                    }
                                }else{
                                    if (!StringUtil.isNullOrEmpty(invalidColumns)) {
                                        invalidColumns += ",";
                                    }
                                    invalidColumns += " Location";
                                }
                            }
                            if(isRowForProduct){
                                if (columnConfig.containsKey("row") && recarr.length > (Integer)columnConfig.get("row")) {
                                    String value = recarr[(Integer) columnConfig.get("row")].replaceAll("\"", "").trim();
                                    if(StringUtil.isNullOrEmpty(value)){
                                        if(!StringUtil.isNullOrEmpty(invalidColumns)){
                                            invalidColumns +=",";
                                        }
                                        invalidColumns += " Row";
                                    }
                                }else{
                                    if (!StringUtil.isNullOrEmpty(invalidColumns)) {
                                        invalidColumns += ",";
                                    }
                                    invalidColumns += " Row";
                                }
                            }
                            if(isRackForProduct){
                                if (columnConfig.containsKey("rack") && recarr.length > (Integer)columnConfig.get("rack")) {
                                    String value = recarr[(Integer) columnConfig.get("rack")].replaceAll("\"", "").trim();
                                    if(StringUtil.isNullOrEmpty(value)){
                                        if(!StringUtil.isNullOrEmpty(invalidColumns)){
                                            invalidColumns +=",";
                                        }
                                        invalidColumns += " Rack";
                                    }
                                }else{
                                    if (!StringUtil.isNullOrEmpty(invalidColumns)) {
                                        invalidColumns += ",";
                                    }
                                    invalidColumns += " Rack";
                                }
                            }
                            if(isBinForProduct){
                                if (columnConfig.containsKey("bin") && recarr.length > (Integer)columnConfig.get("bin")) {
                                    String value = recarr[(Integer) columnConfig.get("bin")].replaceAll("\"", "").trim();
                                    if(StringUtil.isNullOrEmpty(value)){
                                        if(!StringUtil.isNullOrEmpty(invalidColumns)){
                                            invalidColumns +=",";
                                        }
                                        invalidColumns += " Bin";
                                    }
                                }else{
                                    if (!StringUtil.isNullOrEmpty(invalidColumns)) {
                                        invalidColumns += ",";
                                    }
                                    invalidColumns += " Bin";
                                }
                            }
                                        if(!StringUtil.isNullOrEmpty(invalidColumns)){
                                    throw new AccountingException(invalidColumns +" is not available.");
                                }
                                
                            String productDefaultLocationID = "";
                            if (isLocationForProduct && columnConfig.containsKey("locationName")) {
                                String productDefaultLocationName = recarr[(Integer) columnConfig.get("locationName")].replaceAll("\"", "").trim();
                                if (!StringUtil.isNullOrEmpty(productDefaultLocationName)) {
                                    InventoryLocation invLoc = accProductModuleService.getInventoryLocationByName(productDefaultLocationName, companyid);
                                if (invLoc != null) {
                                    productDefaultLocationID = invLoc.getId();
                                } else {
                                    if (masterPreference.equalsIgnoreCase("2")) {
                                        HashMap requestParam = AccountingManager.getGlobalParams(request);
                                        requestParam.put("id", "");
                                            requestParam.put("name", productDefaultLocationName);
                                        requestParam.put("parent", null);
                                        KwlReturnObject jeresult = accountingHandlerDAOobj.getObject(User.class.getName(), userId);
                                        User user = (User) jeresult.getEntityList().get(0);
                                        requestParam.put("user", user);
                                        KwlReturnObject locationResult = accMasterItemsDAO.addLocationItem(requestParam);
                                        invLoc = (InventoryLocation) locationResult.getEntityList().get(0);
                                        productDefaultLocationID = invLoc.getId();
                                    } else {
                                        if (masterPreference.equalsIgnoreCase("1")) {
                                            productDefaultLocationID = null;
                                        } else {
                                                throw new AccountingException("Default Location is not found for " + productDefaultLocationName);
                                        }
                                    }
                                }
                            } else {
                                if (masterPreference.equalsIgnoreCase("1")) {
                                    productDefaultLocationID = null;
                                } else {
                                    throw new AccountingException("Default Location is not available.");
                                }
                            }
                            } else {
                                productDefaultLocationID = null;
                            }


                            String productDefaultWarehouseID = "";
                            if (isWarehouseForProduct && columnConfig.containsKey("warehouseName")) {
                                String productDefaultWarehouseName = recarr[(Integer) columnConfig.get("warehouseName")].replaceAll("\"", "").trim();
                                if (!StringUtil.isNullOrEmpty(productDefaultWarehouseName)) {
                                    InventoryWarehouse invWHouse = accProductModuleService.getInventoryWarehouseByName(productDefaultWarehouseName, companyid);
                                    if (invWHouse != null) {
                                        productDefaultWarehouseID = invWHouse.getId();
                                    } else {
                                        if (masterPreference.equalsIgnoreCase("2")) {
                                            Store store = new Store();
                                            store.setStoreType(storeService.getStoreType(0));//Set Store type to warehouse
                                            store.setAbbreviation(productDefaultWarehouseName);
                                            store.setDescription(productDefaultWarehouseName);
                                            store.setCcDateAllow(false);//set Default False
                                            store.setSmccAllow(false);//set Default False
                                            KwlReturnObject jeresult = accountingHandlerDAOobj.getObject(User.class.getName(), userId);
                                            User user = (User) jeresult.getEntityList().get(0);
                                            store.setCreatedBy(user);
                                            Set<User> userSet = new HashSet<>();
                                            userSet.add(user);
                                            Set<User> executiveSet = new HashSet<>();
                                            executiveSet.add(user);
                                            store.setCompany(user.getCompany());
                                            store.setStoreManagerSet(userSet);
                                            store.setStoreExecutiveSet(executiveSet);
                                            storeService.addStore(user, store);
                                            productDefaultWarehouseID = store.getId();
                                        } else {
                                            if (masterPreference.equalsIgnoreCase("1")) {
                                                productDefaultWarehouseID = null;
                                            } else {
                                                throw new AccountingException("Default Warehouse is not found for " + productDefaultWarehouseName);
                                            }
                                        }
                                    }
                            } else {
                               if (masterPreference.equalsIgnoreCase("1")) {
                                        productDefaultWarehouseID = null;
                                    } else {
                                        throw new AccountingException("Default Warehouse is not available.");
                                    }
                            }
                                } else {
                                productDefaultWarehouseID = null;
                                    }

                            HashMap<String, StoreMaster> storeMasterSet = new HashMap<String, StoreMaster>();
                            StoreMaster row = null;
                            String productRowName = null;
                            String productRowId = null;
                            if (columnConfig.containsKey("row") && isRowForProduct) {
                                productRowName = recarr[(Integer) columnConfig.get("row")].replaceAll("\"", "").trim();
                                if (!StringUtil.isNullOrEmpty(productRowName)) {
                                    row = storeService.getStoreMasterByName(productRowName, companyid, 1);
                                    if (row == null) {
                                        throw new AccountingException("Row is not available.");
                                    } else {
                                        productRowId= row.getId();
                                        storeMasterSet.put("row", row);
                                    }
                                } else {
                                    throw new AccountingException("Row is not available.");
                                }
                            }
                            
                            StoreMaster rack = null;
                            String productRackName = null;
                            String productRackId = null;
                            if (columnConfig.containsKey("rack") && isRackForProduct) {
                                productRackName = recarr[(Integer) columnConfig.get("rack")].replaceAll("\"", "").trim();
                                if (!StringUtil.isNullOrEmpty(productRackName)) {
                                    rack = storeService.getStoreMasterByName(productRackName, companyid, 2);
                                    if (rack == null) {
                                        throw new AccountingException("Rack is not available.");
                                    } else {
                                        productRackId = rack.getId();
                                        storeMasterSet.put("rack", rack);
                                    }
                                } else {
                                    throw new AccountingException("Rack is not available.");
                                }
                            }
                            StoreMaster bin = null;
                            String productBinName = null;
                            String productBinId = null;
                            if (columnConfig.containsKey("bin") && isBinForProduct) {
                                productBinName=recarr[(Integer) columnConfig.get("bin")].replaceAll("\"", "").trim();
                                if (!StringUtil.isNullOrEmpty(productBinName)) {
                                    bin = storeService.getStoreMasterByName(productBinName, companyid, 3);
                                    if (bin == null) {
                                        throw new AccountingException("Bin is not available.");
                                    } else {
                                        productBinId=bin.getId();
                                        storeMasterSet.put("bin", bin);
                                    }
                                } else {
                                    throw new AccountingException("Bin is not available.");
                                }
                            }

                            
                            String productInitialQuantity = "";
                            if (columnConfig.containsKey("initialquantity")) {
                                productInitialQuantity = recarr[(Integer) columnConfig.get("initialquantity")].replaceAll("\"", "").trim();
                                if (StringUtil.isNullOrEmpty(productInitialQuantity)) {
                                    if (masterPreference.equalsIgnoreCase("1")) {
                                        productInitialQuantity = "0";
                                    } else {
                                        if (product.getProducttype().equals(Producttype.SERVICE)) {
                                            productInitialQuantity = "";
                                        } else {
                                            throw new AccountingException("Product Initial Quantity is not available");
                                        }
                                    }
                                }
                            } else {
                                productInitialQuantity = "0";
                            }
                            double invQty=0,invBqty=0,oldBtchQty=0,oldBtchQtyDue=0; // here serialqty is not taken because product having only serial or batchserial can't be updated through opening stock currently in the system
                            Inventory invetory=null;
                            if (productInitialQuantity.length() > 0) {
                                JSONObject inventoryjson = new JSONObject();
                                double invIntialqty=Double.parseDouble(productInitialQuantity);
                                if(invIntialqty >= 0){
                                    if (!StringUtil.isNullOrEmpty(product.getID())) {
                                        List Inventoryid = accProductObj.searchInventoryId(product.getID(), true);
                                        if (!Inventoryid.isEmpty()) {
                                            invetory = (Inventory) Inventoryid.get(0);
                                }
                                        if (invetory != null) {
                                            invQty = invetory.getQuantity();
                                            invBqty = invetory.getBaseuomquantity();
                                }
                                }
                                inventoryjson.put("productid", product.getID());
                                inventoryjson.put("baseuomrate", 1);
                                if (product.getUnitOfMeasure() != null) {
                                    inventoryjson.put("uomid", product.getUnitOfMeasure().getID());
                                }
                                inventoryjson.put("description", "Inventory Opened");
                                inventoryjson.put("carryin", true);
                                inventoryjson.put("defective", false);
                                inventoryjson.put("newinventory", true);
                                inventoryjson.put("companyid", companyid);
                                inventoryjson.put("updatedate", asOfDate);
                                
                                    double prodInitPurchasePrice = 0;
                                    KwlReturnObject initPurchasePriceObj = accProductObj.getInitialPrice(product.getID(), true);
                                    
                                    if (initPurchasePriceObj != null && initPurchasePriceObj.isSuccessFlag() && initPurchasePriceObj.getEntityList() != null && initPurchasePriceObj.getEntityList().get(0) != null) {
                                        prodInitPurchasePrice = (double) initPurchasePriceObj.getEntityList().get(0);
                                }

                                    if ((product.isIswarehouseforproduct() && StringUtil.isNullOrEmpty(productDefaultWarehouseID) && product.isIslocationforproduct() && StringUtil.isNullOrEmpty(productDefaultLocationID))) {
                                        throw new AccountingException("Warehouse & Location is enabled for this product but their values are not provided.");
                                    }else if ((product.isIswarehouseforproduct() && StringUtil.isNullOrEmpty(productDefaultWarehouseID))) {
                                        throw new AccountingException("Warehouse is enabled for this product but its value is not provided.");
                                    }else if ((product.isIslocationforproduct() && StringUtil.isNullOrEmpty(productDefaultLocationID))) {
                                        throw new AccountingException("Location is enabled for this product but its value is not provided.");
                                    }else if ((isRowForProduct && StringUtil.isNullOrEmpty(productRowId))) {
                                        throw new AccountingException("Row is enabled for this product but its value is not provided.");
                                    }else if ((isRackForProduct && StringUtil.isNullOrEmpty(productRackId))) {
                                        throw new AccountingException("Rack is enabled for this product but its value is not provided.");
                                    }else if ((isBinForProduct && StringUtil.isNullOrEmpty(productBinId))) {
                                        throw new AccountingException("Bin is enabled for this product but its value is not provided.");
                                    }else {

                                            HashMap<String, Object> assemblyParams = AccountingManager.getGlobalParams(request);
                                            assemblyParams.put("assembly", "");
                                            assemblyParams.put("applydate", new Date());
                                            assemblyParams.put("quantity", productInitialQuantity);
                                            assemblyParams.put("memo", "Inventory Opened");
                                            assemblyParams.put("refno", "");
                                            assemblyParams.put("buildproductid", product.getID());
                                            accProductObj.updateAssemblyInventory(assemblyParams);

                                            if ((isLocationForProduct || isWarehouseForProduct || isRowForProduct || isRackForProduct || isBinForProduct)) {
                                                if (!StringUtil.isNullOrEmpty(product.getID()) && !StringUtil.isNullOrEmpty(productDefaultLocationID) && !StringUtil.isNullOrEmpty(productDefaultWarehouseID)) {
                                                    productBatchId = accCommonTablesDAO.getpurchaseBatchIdForLocationWarehouseRowRackBin(product.getID(), productDefaultLocationID, productDefaultWarehouseID, productRowId, productRackId, productBinId,"");
                                                }
                                                if (StringUtil.isNullOrEmpty(productBatchId)) {
                                                    HashMap<String, Object> pdfTemplateMap = new HashMap<String, Object>();
                                                    pdfTemplateMap.put("companyid", companyid);
                                                    pdfTemplateMap.put("quantity", String.valueOf(invIntialqty));
                                                    pdfTemplateMap.put("location", productDefaultLocationID);
                                                    pdfTemplateMap.put("product", product.getID());
                                                    pdfTemplateMap.put("warehouse", productDefaultWarehouseID);
                                                    pdfTemplateMap.put("isopening", true);
                                                    pdfTemplateMap.put("row", productRowId);
                                                    pdfTemplateMap.put("rack", productRackId);
                                                    pdfTemplateMap.put("bin", productBinId);
                                                    pdfTemplateMap.put("name", "");
                                                    pdfTemplateMap.put("transactiontype", "28");//This is GRN Type Tranction  
                                                    pdfTemplateMap.put("ispurchase", true);
                                                    kmsg = accCommonTablesDAO.saveNewBatchForProduct(pdfTemplateMap);

                                                    if (kmsg != null && kmsg.getEntityList().size() != 0) {
                                                        productBatch = (NewProductBatch) kmsg.getEntityList().get(0);
                                                        productBatchId = productBatch.getId();
                                                    }
                                    } else {
                                                    HashMap<String, Object> batchUpdateQtyMap = new HashMap<String, Object>();
                                                    batchUpdateQtyMap.put("qty", String.valueOf(invIntialqty));
                                                    batchUpdateQtyMap.put("quantity", String.valueOf(invIntialqty));
                                                    batchUpdateQtyMap.put("id", productBatchId);

                                                    NewProductBatch npb = accImportServiceObj.getNewProductBatchById(productBatchId);
                                                    oldBtchQty = npb.getQuantity();
                                                    oldBtchQtyDue = npb.getQuantitydue();
                                                    npb.setQuantity(0);
                                                    npb.setQuantitydue(0);
//                                                    accImportServiceObj.saveOrUpdate(npb);
                                                    accCommonTablesDAO.saveBatchAmountDue(batchUpdateQtyMap);
                                    }

                                                HashMap<String, Object> documentMap = new HashMap<String, Object>();
                                                documentMap.put("quantity", String.valueOf(invIntialqty));
                                                documentMap.put("batchmapid", productBatchId);
                                                documentMap.put("documentid", product.getID());
                                                documentMap.put("transactiontype", "28");//This is GRN Type Tranction
                                                accCommonTablesDAO.saveBatchDocumentMapping(documentMap);
                                                accImportServiceObj.deleteLocationBatchDocumentMappingByBatchMapId(productBatchId);//delete previous lbm enry if exists
                                }
                                            if(!isWarehouseForProduct && !isLocationForProduct && !isRowForProduct && !isRackForProduct && !isBinForProduct){ //ie. if there is no entry in newproductbatch then set oldBtchQty as previous inventoryQty # ERP-19036,ERP-19076
                                                oldBtchQty=invQty;
                                                oldBtchQtyDue=invBqty;
                                            }
                                            inventoryjson.put("quantity", (invQty - oldBtchQty + invIntialqty));
                                            inventoryjson.put("baseuomquantity", (invBqty - oldBtchQtyDue + invIntialqty));

                                            KwlReturnObject openingBatchDetail = accImportServiceObj.getProductOpeningQtyBatchDetail(product);
                                            KwlReturnObject newInvObj = accProductObj.updateInitialInventory(inventoryjson);
                                            if (openingBatchDetail != null && openingBatchDetail.getEntityList() != null && openingBatchDetail.getRecordTotalCount() > 0) {
                                                Iterator it1 = openingBatchDetail.getEntityList().iterator();
                                                // if new batch,serial,warehouse,location data is available then only delete previous stock for product
                                                if (openingBatchDetail.getEntityList().size() > 0) {
                                                    accImportServiceObj.deleteStockAndSMForProduct(product);//delete stock
                                                    while (it1.hasNext()) { // add new stock
                                                        LocationBatchDocumentMapping lbm = (LocationBatchDocumentMapping) it1.next();
                                                        if (lbm != null) {
                                                            String batchWarehouseId = lbm.getBatchmapid().getWarehouse() != null ? lbm.getBatchmapid().getWarehouse().getId() : "";
                                                            String batchLocationId = lbm.getBatchmapid().getLocation() != null ? lbm.getBatchmapid().getLocation().getId() : "";
                                                            if (!StringUtil.isNullOrEmpty(batchLocationId) && !StringUtil.isNullOrEmpty(batchWarehouseId) && isInventoryIntegrationOn && product.isIswarehouseforproduct() && product.isIslocationforproduct()) {
                                                                accImportServiceObj.updateStockInventorySide(newInvObj, inventoryjson, lbm, prodInitPurchasePrice);
                                    }
                                }

                            }
                                                }
                            
                                        }
                                        }
                                    }
                                }
                            }

                    } catch (Exception ex) {
                        failed++;
                        String errorMsg = ex.getMessage(), invalidColumns = "";
                        try {
                            JSONObject errorLog = new JSONObject(errorMsg);
                            errorMsg = errorLog.getString("errorMsg");
                            invalidColumns = errorLog.getString("invalidColumns");
                        } catch (JSONException jex) {
                        }
                        failedRecords.append("\n" + accProductModuleService.createCSVrecord(recarr) + "\"" + errorMsg.replaceAll("\"", "") + "\"");
                    }
                    total++;
                }
                cnt++;
            }

            if (failed > 0) {
                accProductModuleService.createFailureFiles(fileName, failedRecords, ".csv");
            }

            int success = total - failed;
            if (total == 0) {
                msg = messageSource.getMessage("acc.field.Emptyfile", null, RequestContextUtils.getLocale(request));
            } else if (success == 0) {
//                issuccess = false;
                msg = messageSource.getMessage("acc.rem.169", null, RequestContextUtils.getLocale(request));
            } else if (success == total) {
                msg = messageSource.getMessage("acc.rem.168", null, RequestContextUtils.getLocale(request));
            } else {
                msg = messageSource.getMessage("acc.field.Imported", null, RequestContextUtils.getLocale(request))+ " " + success + " "+ messageSource.getMessage("acc.field.record", null, RequestContextUtils.getLocale(request)) + (success > 1 ? "s" : "") + " "+messageSource.getMessage("acc.field.successfully.", null, RequestContextUtils.getLocale(request));
                msg += (failed == 0 ? "." : " "+messageSource.getMessage("acc.field.andfailedtoimport", null, RequestContextUtils.getLocale(request))+ " " + failed + " "+ messageSource.getMessage("acc.field.record", null, RequestContextUtils.getLocale(request)) + (failed > 1 ? "s" : "") + ".");
            }

            try {
                txnManager.commit(status);
            } catch (Exception ex) {
                commitedEx = true;
                throw ex;
            }
        } catch (Exception ex) {
            if (!commitedEx) { //if exception occurs during commit then dont call rollback
                txnManager.rollback(status);
            }
            issuccess = false;
            msg = "" + ex.getMessage();

            Logger.getLogger(accProductController.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
            throw new AccountingException("Error While Importing Records.");
        } finally {
            fileInputStream.close();
            br.close();

            DefaultTransactionDefinition ldef = new DefaultTransactionDefinition();
            ldef.setName("import_Tx");
            ldef.setPropagationBehavior(TransactionDefinition.PROPAGATION_REQUIRED);
            TransactionStatus lstatus = txnManager.getTransaction(ldef);

            try {
                //Insert Integration log
                HashMap<String, Object> logDataMap = new HashMap<String, Object>();
                logDataMap.put("FileName", getActualFileName(fileName));
                logDataMap.put("StorageName", fileName);
                logDataMap.put("Log", msg);
                logDataMap.put("Type", "csv");
                logDataMap.put("FailureFileType", failed>0?"csv":"");
                logDataMap.put("TotalRecs", total);
                logDataMap.put("Rejected", failed);
                logDataMap.put("Module", Constants.Acc_Product_opening_stock_ModuleId);
                logDataMap.put("ImportDate", new Date());
                logDataMap.put("User", userId);
                logDataMap.put("Company", companyid);
                importDao.saveImportLog(logDataMap);

                String tableName = importDao.getTableName(fileName);
                importDao.removeFileTable(tableName); // Remove table after importing all records

                txnManager.commit(lstatus);
            } catch (Exception ex) {
                txnManager.rollback(lstatus);
                Logger.getLogger(accProductController.class.getName()).log(Level.SEVERE, null, ex);
            }

            try {
                returnObj.put("success", issuccess);
                returnObj.put("msg", msg);
                returnObj.put("totalrecords", total);
                returnObj.put("successrecords", total - failed);
                returnObj.put("failedrecords", failed);
                returnObj.put("filename", getActualFileName(fileName));
            } catch (JSONException ex) {
                Logger.getLogger(accProductController.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

        return returnObj;
    }
    
    
    //Import & Build assembly Product from CSV File
    @Deprecated
    public JSONObject importAssemblyProductCSV(HttpServletRequest request, JSONObject jobj) throws AccountingException, IOException, SessionExpiredException, JSONException {
        DefaultTransactionDefinition def = new DefaultTransactionDefinition();
        def.setName("import_Tx");
        def.setPropagationBehavior(TransactionDefinition.PROPAGATION_REQUIRED);
        TransactionStatus status = txnManager.getTransaction(def);
        boolean commitedEx = false;
        boolean issuccess = true;
        boolean isCurrencyColum = false;
        Product product = null;
        String prevProductCode = "";  //To Compare with new / next record in CSV / XLS
        String msg = "";
        String customfield = "";
        double productInitialPurchasePrise = 0; // Product Initial Purchase Price     
        Date ondate = new Date();
        String productSalesPrice = ""; //Product Sales Price
        HashMap<String, Object> productMap = null;  //Product Hashmap
        KwlReturnObject productresult = null;
        FileInputStream fileInputStream = null;
        BufferedReader br = null;
        int total = 0, failed = 0;
        String companyid = sessionHandlerImpl.getCompanyid(request);
        String currencyId = sessionHandlerImpl.getCurrencyID(request);
        String userId = sessionHandlerImpl.getUserid(request);
        DateFormat df = authHandler.getDateFormatter(request);
        String fileName = jobj.getString("filename");
        String masterPreference = request.getParameter("masterPreference");
        String delimiterType = request.getParameter("delimiterType");
        
        boolean updateExistingRecordFlag = false;
        if (!StringUtil.isNullOrEmpty(request.getParameter("updateExistingRecordFlag"))) {
            updateExistingRecordFlag = Boolean.FALSE.parseBoolean(request.getParameter("updateExistingRecordFlag"));
        }
        
        JSONObject returnObj = new JSONObject();
        try {
            Date newUserDate = new Date();
            KwlReturnObject custumObjresult = accountingHandlerDAOobj.getObject(Company.class.getName(), companyid);
            Company company1 = (Company) custumObjresult.getEntityList().get(0);
            if (company1.getCreator() != null) {
                newUserDate = authHandler.getUserNewDate(null, company1.getCreator().getTimeZone()!=null?company1.getCreator().getTimeZone().getDifference() : company1.getTimeZone().getDifference());
            }
            fileInputStream = new FileInputStream(jobj.getString("FilePath"));
            br = new BufferedReader(new InputStreamReader(fileInputStream));
            String record = "";
            int cnt = 0;
             ExtraCompanyPreferences extraPref = (ExtraCompanyPreferences) kwlCommonTablesDAOObj.getClassObject("com.krawler.common.admin.ExtraCompanyPreferences", companyid);
             boolean isCurrencyCode=extraPref.isCurrencyCode();
            StringBuilder failedRecords = new StringBuilder();

            HashMap<String, Integer> columnConfig = new HashMap<String, Integer>();
            JSONArray jSONArray = jobj.getJSONArray("resjson");
            List headArrayList = new ArrayList();
            for (int i = 0; i < jSONArray.length(); i++) {
                JSONObject jSONObject = jSONArray.getJSONObject(i);
                headArrayList.add(jSONObject.get("csvheader"));

                columnConfig.put(jSONObject.getString("dataindex"), jSONObject.getInt("csvindex"));
            }
            // the below line is commited due to not proparely showing header in error log file . ERP-11483
           // failedRecords.append(createCSVrecord(headArrayList.toArray()) + "\"Error Message\""); // failedRecords.append("\"Row No.\","+createCSVrecord(fileData)+"\"Error Message\"");
            HashMap currencyMap = accProductModuleService.getCurrencyMap(isCurrencyCode);

            while ((record = br.readLine()) != null) {
                if (cnt != 0) {
                    String[] recarr = null;
                    if (delimiterType.equalsIgnoreCase("Bar")) {
                        recarr = record.split("\\|");
                    } else {
                        recarr = record.split(",");
                    }

                    try {
                        
                /*-------------------------------Sub-product Details (BOM)----------------------------------*/               
                /*If BOM Product ID OR Quantity is not available then Global Product Details will not save, */
                        //Build Of Material (BOM) Details
                        String bomProductID = "";
                        if (columnConfig.containsKey("bompid")) {
                            try{
                            bomProductID = recarr[(Integer) columnConfig.get("bompid")].replaceAll("\"", "").trim();
                            if (StringUtil.isNullOrEmpty(bomProductID)) {
                                throw new AccountingException("BOM Product ID is not available");
                            }
                            } catch(ArrayIndexOutOfBoundsException ae){ //If user do not enter BOM % then default value ll be 100.
                                throw new AccountingException("BOM Product ID is not available");
                            }
                        } else {
                            throw new AccountingException("BOM Product ID column is not found");
                        }
                        
                        //Get BOM Product Name
                        String bomProductName = "";
                        String bompid = ""; //Used to read Product Price.
                        Product bomproduct = accProductModuleService.getProductByProductName(companyid, bomProductID);
                        if(bomproduct!=null){
                            bomProductName = bomproduct.getName();
                            bompid = bomproduct.getID();
                        } else {
                            throw new AccountingException("Product Name is not found for " + bomProductID);
                        }
                        
                        //Get BOM Product Description
                        String bomProductDesc = "";
                        if(bomproduct!=null){
                            bomProductDesc = bomproduct.getDescription();
                        } else {
                            throw new AccountingException("Product Description is not found for " + bomProductID);
                        }
                        
                        //Get BOM Product Type
                        String bomProductType = "";
                        Producttype bomproducttype = accProductModuleService.getProductTypeByProductID(bomProductID);
                        if (bomproducttype != null) {
                            bomProductType = bomproducttype.getID();
                        } else {
                            throw new AccountingException("Product Type is not found for " + bomProductID);
                        }

                        //Get BOM Product Initial Purchase Price
                        double bomProductPurchasePrice = 0;
                        KwlReturnObject purchase = accProductObj.getProductPrice(bompid, true, null, "", ""); //True for Purchase Price, False for Sales Price
                        bomProductPurchasePrice = purchase.getEntityList().get(0) == null ? 0 : ((Double) purchase.getEntityList().get(0)).doubleValue();    //Converted into primitive data type

                        //Component Quantity, Actual Quantity, Total
                        String componentQuantity = "";
                        double compQuantity = 0;
                        String componentpercent = "";
                        double comppercent = 100;
                        double compactualQuantity = 0;
                        double comptotal = 0;
                        double recylequantity = 0;
                        double inventoryquantiy = 0;
                        double remainingquantity = 0;
                        
                        if (columnConfig.containsKey("bomquantity")) {
                            try {
                            componentQuantity = recarr[(Integer) columnConfig.get("bomquantity")].replaceAll("\"", "").trim();                            
                                compQuantity = Double.parseDouble(componentQuantity);
                                if (compQuantity != 0) {
                                    if (columnConfig.containsKey("bompercent")) {
                                        try {
                                        componentpercent = recarr[(Integer) columnConfig.get("bompercent")].replaceAll("\"", "").trim();
                                        
                                            comppercent = Double.parseDouble(componentpercent);
                                            if(comppercent > 100){
                                                throw new AccountingException("BOM percentage should not be greater than 100%.");
                                            }
                                            compactualQuantity = compQuantity * (comppercent / 100);
                                            comptotal = compQuantity * bomProductPurchasePrice * (comppercent / 100);
                                        } catch (NumberFormatException ne) {
                                            throw new AccountingException("Invalid BOM Component percent. It should be greater than zero");
                                        } catch (ArrayIndexOutOfBoundsException ae) {
                                            comppercent = 100;  //If user do not enter BOM % then default value ll be 100.
                                        }
                                    } else {    //Default Percentage
                                        compactualQuantity = compQuantity * 1; //componentpercent = 100
                                        comptotal = compQuantity * bomProductPurchasePrice * (comppercent / 100);
                                    }
                                } else {
                                    throw new AccountingException("Component Quantity should be greater than zero.");

                                }
                            } catch (NumberFormatException e) {
                                throw new AccountingException("Invalid BOM Quantity.");
                            } catch (ArrayIndexOutOfBoundsException ae){
                                throw new AccountingException("Invalid BOM Quantity.");
                            }
                        }//Component Quantity

             /*-------------------------------Sub-product Details (BOM)----------------------------------*/
                        
                        //Get Product ID
                        String productID = "";
                        if (columnConfig.containsKey("pid")) {
                            productID = recarr[(Integer) columnConfig.get("pid")].replaceAll("\"", "").trim();
                            if (StringUtil.isNullOrEmpty(productID)) {
                                throw new AccountingException("Product ID is not available");
                            }
                        } else {
                            throw new AccountingException("Product ID column is not found");
                        }
                        if (!prevProductCode.equalsIgnoreCase(productID)) { //if Multiple BOM Components are associated with Single Product then we ll not hold global data again for same product
                            // for saving BOM initial purchase price
                            if (!prevProductCode.equalsIgnoreCase("") && productInitialPurchasePrise > 0 && product != null) {
                                if (productInitialPurchasePrise > 0) {
                                    HashMap<String, Object> initialPurchasePriceMap = new HashMap<String, Object>();
                                    initialPurchasePriceMap.put("productid", product.getID());
                                    initialPurchasePriceMap.put("companyid", companyid);
                                    initialPurchasePriceMap.put("carryin", true);
                                    initialPurchasePriceMap.put("price", productInitialPurchasePrise);
                                    initialPurchasePriceMap.put("applydate", ondate);
                                    initialPurchasePriceMap.put("affecteduser", "-1");
                                    initialPurchasePriceMap.put("currencyid", currencyId);
                                    initialPurchasePriceMap.put("uomid", product.getUnitOfMeasure().getID());
                                    accProductObj.addPriceList(initialPurchasePriceMap);
                                }
                            }
                            
                            productInitialPurchasePrise = 0;
                            prevProductCode = productID;
                            //Get Product Type 
                            String productTypeID = "";
                            if (columnConfig.containsKey("type")) {
                                String productTypeName = recarr[(Integer) columnConfig.get("type")].replaceAll("\"", "").trim();
                                if (StringUtil.isNullOrEmpty(productTypeName)) {
                                    prevProductCode = "";
                                    throw new AccountingException("Product Type is not available");
                                }

                                Producttype producttype = accProductModuleService.getProductTypeByName(productTypeName);
                                if (producttype != null) {
                                    productTypeID = producttype.getID();
                                } else {
                                    prevProductCode = "";
                                    throw new AccountingException("Product Type is not found for " + productTypeName);
                                }
                            } else {
                                throw new AccountingException("Product Type column is not found.");
                            }

                            //Get Product Name
                            String productName = "";
                            if (columnConfig.containsKey("productname")) {
                                productName = recarr[(Integer) columnConfig.get("productname")].replaceAll("\"", "").trim();
                                if (StringUtil.isNullOrEmpty(productName)) {
                                    prevProductCode = "";
                                    throw new AccountingException("Product Name is not available");
                                }
                            } else {
                                throw new AccountingException("Product Name column is not found.");
                            }

                            //Get Product Description
                            String productDescription = "";
                            if (columnConfig.containsKey("desc")) {
                                productDescription = recarr[(Integer) columnConfig.get("desc")].replaceAll("\"", "").trim();
                            }

                            //Get Product UOM ID
                            String productUOMID = "";
                            UnitOfMeasure uom = null;
                            if (columnConfig.containsKey("uomname")) {
                                String productUOMName = recarr[(Integer) columnConfig.get("uomname")].replaceAll("\"", "").trim();
                                if (!StringUtil.isNullOrEmpty(productUOMName)) {
                                    uom = accProductModuleService.getUOMByName(productUOMName, companyid);
                                    if (uom != null) {
                                        if (productUOMName.equals("N/A") && !productTypeID.equals(Producttype.SERVICE)) {
                                            throw new AccountingException("You can only select N/A UOM for Service type Product.");
                                        } else {
                                            productUOMID = uom.getID();
                                        }
                                    } else {
                                        if (masterPreference.equalsIgnoreCase("2")) {
                                            HashMap<String, Object> uomMap = new HashMap<String, Object>();
                                            uomMap.put("uomname",StringUtil.DecodeText(productUOMName));
                                            uomMap.put("uomtype",StringUtil.DecodeText(productUOMName));
                                            uomMap.put("precision", 0);
                                            uomMap.put("companyid", companyid);

                                            KwlReturnObject uomresult = accUomObj.addUoM(uomMap);
                                            uom = (UnitOfMeasure) uomresult.getEntityList().get(0);
                                            productUOMID = uom.getID();
                                        } else {
//                                            if (masterPreference.equalsIgnoreCase("1")) {
//                                                productUOMID = "";
//                                            } else {
                                                prevProductCode = "";
                                                throw new AccountingException("Product Stock Unit Of Measure is not found for " + productUOMName);
//                                            }
                                        }
                                    }
                                } else {
//                                    if (masterPreference.equalsIgnoreCase("1")) {
//                                        productUOMID = "";
//                                    } else {
//                                        if (productTypeID.equals(Producttype.ASSEMBLY)) {
//                                            productUOMID = "";
//                                        } else {
                                            prevProductCode = "";
                                            throw new AccountingException("Product Stock Unit Of Measure is not available");
//                                        }
//                                    }
                                }
                            } else {
                                throw new AccountingException("Product Stock UOM column is not found.");
                            }

                            //Get Product Casing UOM ID
                            String casingUoMID = "";
                            UnitOfMeasure casinguom = null;
                            if (columnConfig.containsKey("casinguom")) {
                                String productUOMName = recarr[(Integer) columnConfig.get("casinguom")].replaceAll("\"", "").trim();
                                if (!StringUtil.isNullOrEmpty(productUOMName)) {
                                    casinguom = accProductModuleService.getUOMByName(productUOMName, companyid);
                                    if (casinguom != null) {
                                        casingUoMID = casinguom.getID();
                                    } else {
                                        if (masterPreference.equalsIgnoreCase("2")) {
                                            HashMap<String, Object> uomMap = new HashMap<String, Object>();
                                            uomMap.put("uomname",StringUtil.DecodeText(productUOMName));
                                            uomMap.put("uomtype", StringUtil.DecodeText(productUOMName));
                                            uomMap.put("precision", 0);
                                            uomMap.put("companyid", companyid);
                                            KwlReturnObject uomresult = accUomObj.addUoM(uomMap);
                                            casinguom = (UnitOfMeasure) uomresult.getEntityList().get(0);
                                            casingUoMID = casinguom.getID();
                                        } else {
                                            if (masterPreference.equalsIgnoreCase("1")) {
                                                casingUoMID = "";
                                            } else {
                                                prevProductCode = "";
                                                throw new AccountingException("Product Casing Unit Of Measure is not found for " + productUOMName);
                                            }
                                        }
                                    }
                                } else {
                                    if (masterPreference.equalsIgnoreCase("1")) {
                                        casingUoMID = "";
                                    } else {
                                        if (productTypeID.equals(Producttype.ASSEMBLY)) {
                                            casingUoMID = "";
                                        } else {
                                            prevProductCode = "";
                                            throw new AccountingException("Product  Casing Unit Of Measure is not available");
                                        }
                                    }
                                }
                            } else {
                                casingUoMID = "";
                            }

                            //Get Product Inner UOM ID
                            String innerUoMID = "";
                            UnitOfMeasure inneruom = null;
                            if (columnConfig.containsKey("inneruom")) {
                                String productUOMName = recarr[(Integer) columnConfig.get("inneruom")].replaceAll("\"", "").trim();
                                if (!StringUtil.isNullOrEmpty(productUOMName)) {
                                    inneruom = accProductModuleService.getUOMByName(productUOMName, companyid);
                                    if (inneruom != null) {
                                        innerUoMID = inneruom.getID();
                                    } else {
                                        if (masterPreference.equalsIgnoreCase("2")) {
                                            HashMap<String, Object> uomMap = new HashMap<String, Object>();
                                            uomMap.put("uomname",StringUtil.DecodeText(productUOMName));
                                            uomMap.put("uomtype",StringUtil.DecodeText(productUOMName));
                                            uomMap.put("precision", 0);
                                            uomMap.put("companyid", companyid);

                                            KwlReturnObject uomresult = accUomObj.addUoM(uomMap);
                                            inneruom = (UnitOfMeasure) uomresult.getEntityList().get(0);
                                            innerUoMID = inneruom.getID();
                                        } else {
                                            if (masterPreference.equalsIgnoreCase("1")) {
                                                innerUoMID = "";
                                            } else {
                                                prevProductCode = "";
                                                throw new AccountingException("Product Inner Unit Of Measure is not found for " + productUOMName);
                                            }
                                        }
                                    }
                                } else {
                                    if (masterPreference.equalsIgnoreCase("1")) {
                                        innerUoMID = "";
                                    } else {
                                        if (productTypeID.equals(Producttype.ASSEMBLY)) {
                                            innerUoMID = "";
                                        } else {
                                            prevProductCode = "";
                                            throw new AccountingException("Product Inner Unit Of Measure is not available");
                                        }
                                    }
                                }
                            } else {
                                innerUoMID = "";
                            }

                            //Get Product Purchase UOM ID
                            String PurchaseUOMID = "";
                            UnitOfMeasure purchaseruom = null;
                            if (columnConfig.containsKey("purchaseuom")) {
                                String productUOMName = recarr[(Integer) columnConfig.get("purchaseuom")].replaceAll("\"", "").trim();
                                if (!StringUtil.isNullOrEmpty(productUOMName)) {
                                    purchaseruom = accProductModuleService.getUOMByName(productUOMName, companyid);
                                    if (purchaseruom != null) {
                                        PurchaseUOMID = purchaseruom.getID();
                                    } else {
                                        if (masterPreference.equalsIgnoreCase("2")) {
                                            HashMap<String, Object> uomMap = new HashMap<String, Object>();
                                            uomMap.put("uomname",StringUtil.DecodeText(productUOMName));
                                            uomMap.put("uomtype",StringUtil.DecodeText(productUOMName));
                                            uomMap.put("precision", 0);
                                            uomMap.put("companyid", companyid);

                                            KwlReturnObject uomresult = accUomObj.addUoM(uomMap);
                                            purchaseruom = (UnitOfMeasure) uomresult.getEntityList().get(0);
                                            PurchaseUOMID = purchaseruom.getID();
                                        } else {
                                            if (masterPreference.equalsIgnoreCase("1")) {
                                                PurchaseUOMID = "";
                                            } else {
                                                prevProductCode = "";
                                                throw new AccountingException("Product Purchase Unit Of Measure is not found for " + productUOMName);
                                            }
                                        }
                                    }
                                } else {
                                    if (masterPreference.equalsIgnoreCase("1")) {
                                        PurchaseUOMID = "";
                                    } else {
                                        if (productTypeID.equals(Producttype.ASSEMBLY)) {
                                            PurchaseUOMID = "";
                                        } else {
                                            prevProductCode = "";
                                            throw new AccountingException("Product Purchase Unit Of Measure is not available");
                                        }
                                    }
                                }
                            } else {
                                PurchaseUOMID = "";
                            }

                            //Get Product Sales UOM ID
                            String SalesUOMID = "";
                            UnitOfMeasure salesuom = null;
                            if (columnConfig.containsKey("salesuom")) {
                                String productUOMName = recarr[(Integer) columnConfig.get("salesuom")].replaceAll("\"", "").trim();
                                if (!StringUtil.isNullOrEmpty(productUOMName)) {
                                    salesuom = accProductModuleService.getUOMByName(productUOMName, companyid);
                                    if (salesuom != null) {
                                        SalesUOMID = salesuom.getID();
                                    } else {
                                        if (masterPreference.equalsIgnoreCase("2")) {
                                            HashMap<String, Object> uomMap = new HashMap<String, Object>();
                                            uomMap.put("uomname",StringUtil.DecodeText(productUOMName));
                                            uomMap.put("uomtype", StringUtil.DecodeText(productUOMName));
                                            uomMap.put("precision", 0);
                                            uomMap.put("companyid", companyid);

                                            KwlReturnObject uomresult = accUomObj.addUoM(uomMap);
                                            salesuom = (UnitOfMeasure) uomresult.getEntityList().get(0);
                                            SalesUOMID = salesuom.getID();
                                        } else {
                                            if (masterPreference.equalsIgnoreCase("1")) {
                                                SalesUOMID = "";
                                            } else {
                                                prevProductCode = "";
                                                throw new AccountingException("Product Sales Unit Of Measure is not found for " + productUOMName);
                                            }
                                        }
                                    }
                                } else {
                                    if (masterPreference.equalsIgnoreCase("1")) {
                                        SalesUOMID = "";
                                    } else {
                                        if (productTypeID.equals(Producttype.ASSEMBLY)) {
                                            SalesUOMID = "";
                                        } else {
                                            prevProductCode = "";
                                            throw new AccountingException("Product Sales Unit Of Measure is not available");
                                        }
                                    }
                                }
                            } else {
                                SalesUOMID = "";
                            }

                            //Get Casing UOM Value
                            String casinguomvalue = "1";
                            if (columnConfig.containsKey("casinguom_value")) {
                                casinguomvalue = recarr[(Integer) columnConfig.get("casinguom_value")].replaceAll("\"", "").trim();
                            }

                            //Get Inner UOM Value
                            String inneruomvalue = "1";
                            if (columnConfig.containsKey("inneruom_value")) {
                                inneruomvalue = recarr[(Integer) columnConfig.get("inneruom_value")].replaceAll("\"", "").trim();
                            }

                            //Get Stock UOM Value
                            String stcokuomvalue = "1";
                            if (columnConfig.containsKey("stockuom_value")) {
                                stcokuomvalue = recarr[(Integer) columnConfig.get("stockuom_value")].replaceAll("\"", "").trim();
                            }

                            //Product Reorder Level
                            String productReorderLevel = "";
                            if (columnConfig.containsKey("reorderlevel")) {
                                productReorderLevel = recarr[(Integer) columnConfig.get("reorderlevel")].replaceAll("\"", "").trim();
                                if (StringUtil.isNullOrEmpty(productReorderLevel)) {
                                    if (masterPreference.equalsIgnoreCase("1")) {
                                        productReorderLevel = "0";
                                    } else {
                                        if (productTypeID.equals(Producttype.ASSEMBLY)) {
                                            productReorderLevel = "0";
                                        } else {
                                            prevProductCode = "";
                                            throw new AccountingException("Product Reorder Level is not available");
                                        }
                                    }
                                }
                            } else {
                                productReorderLevel = "0";
                            }

                            //Product Reorder Quantity
                            String productReorderQuantity = "";
                            if (columnConfig.containsKey("reorderquantity")) {
                                productReorderQuantity = recarr[(Integer) columnConfig.get("reorderquantity")].replaceAll("\"", "").trim();
                                if (StringUtil.isNullOrEmpty(productReorderQuantity)) {
                                    if (masterPreference.equalsIgnoreCase("1")) {
                                        productReorderQuantity = "0";
                                    } else {
                                        if (productTypeID.equals(Producttype.ASSEMBLY)) {
                                            productReorderQuantity = "0";
                                        } else {
                                            prevProductCode = "";
                                            throw new AccountingException("Product Reorder Quantity is not available");
                                        }
                                    }
                                }
                            } else {
                                productReorderQuantity = "0";
                            }

                            //Product Warranty Period
                            String productWarrantyPeriod = "";
                            if (columnConfig.containsKey("warrantyperiod")) {
                                productWarrantyPeriod = recarr[(Integer) columnConfig.get("warrantyperiod")].replaceAll("\"", "").trim();
                                if (StringUtil.isNullOrEmpty(productWarrantyPeriod)) {
                                    if (masterPreference.equalsIgnoreCase("1")) {
                                        productWarrantyPeriod = "0";
                                    } else {
                                        if (productTypeID.equals(Producttype.ASSEMBLY)) {
                                            productWarrantyPeriod = "0";
                                        } else {
                                            prevProductCode = "";
                                            throw new AccountingException("Product Warranty Period is not available");
                                        }
                                    }
                                }
                            } else {
                                productWarrantyPeriod = "0";
                            }

                            //Product Sales Warranty Period
                            String productSalesWarrantyPeriod = "";
                            if (columnConfig.containsKey("warrantyperiodsal")) {
                                productSalesWarrantyPeriod = recarr[(Integer) columnConfig.get("warrantyperiodsal")].replaceAll("\"", "").trim();
                                if (StringUtil.isNullOrEmpty(productSalesWarrantyPeriod)) {
                                    if (masterPreference.equalsIgnoreCase("1")) {
                                        productSalesWarrantyPeriod = "0";
                                    } else {
                                        if (productTypeID.equals(Producttype.ASSEMBLY)) {
                                            productSalesWarrantyPeriod = "0";
                                        } else {
                                            prevProductCode = "";
                                            throw new AccountingException("Product Sales Warranty Period is not available");
                                        }
                                    }
                                }
                            } else {
                                productSalesWarrantyPeriod = "0";
                            }

                            //Product Lead Time
                            String productLeadTime = "";
                            if (columnConfig.containsKey("leadtime")) {
                                productLeadTime = recarr[(Integer) columnConfig.get("leadtime")].replaceAll("\"", "").trim();
                                if (StringUtil.isNullOrEmpty(productLeadTime)) {
                                    if (masterPreference.equalsIgnoreCase("1")) {
                                        productLeadTime = "0";
                                    } else {
                                        if (productTypeID.equals(Producttype.ASSEMBLY)) {
                                            productLeadTime = "0";
                                        } else {
                                            prevProductCode = "";
                                            throw new AccountingException("Product Lead Time is not available");
                                        }
                                    }
                                } else {
                                    if (Integer.parseInt(productLeadTime) > 365) {
                                        throw new AccountingException("Product Lead Time should not be greater than 365");
                                    } else if (Integer.parseInt(productLeadTime) < 0) {
                                        throw new AccountingException("Product Lead Time should not be less than 0");
                                    }
                                }
                            } else {
                                productLeadTime = "0";
                            }
                            
                            String productweight = "";
                            if (columnConfig.containsKey("productweight")) {
                                productweight = recarr[(Integer) columnConfig.get("productweight")].replaceAll("\"", "").trim();
                                if (StringUtil.isNullOrEmpty(productweight)) {
                                    if (masterPreference.equalsIgnoreCase("1")) {
                                        productweight = "0";
                                    } else {
                                        if (productTypeID.equals(Producttype.ASSEMBLY)) {
                                            productweight = "0";
                                        } else {
                                            prevProductCode = "";
                                            throw new AccountingException("This is not an Assembly Product");
                                        }
                                    }
                                } else {
                                    if (Double.parseDouble(productweight) <= -1) {
                                        throw new AccountingException("Product Weight should not be less than zero");
                                    }
                                }
                            } else {
                                productweight = "0";
                            }
                            
                            //Cycle Count Interval
                            String productCycleCountInterval = "";
                            if (columnConfig.containsKey("ccountinterval")) {
                                productCycleCountInterval = recarr[(Integer) columnConfig.get("ccountinterval")].replaceAll("\"", "").trim();
                                if (StringUtil.isNullOrEmpty(productCycleCountInterval)) {
                                    if (masterPreference.equalsIgnoreCase("1")) {
                                        productCycleCountInterval = "1";
                                    } else {
                                        if (productTypeID.equals(Producttype.ASSEMBLY)) {
                                            productCycleCountInterval = "1";
                                        } else {
                                            prevProductCode = "";
                                            throw new AccountingException("Product Cycle Count Interval is not available");
                                        }
                                    }
                                }
                            } else {
                                productCycleCountInterval = "1";
                            }

                            //Cycle Count Tolerance
                            String productCycleCountTolerance = "";
                            if (columnConfig.containsKey("ccounttolerance")) {
                                productCycleCountTolerance = recarr[(Integer) columnConfig.get("ccounttolerance")].replaceAll("\"", "").trim();
                                if (StringUtil.isNullOrEmpty(productCycleCountTolerance)) {
                                    if (masterPreference.equalsIgnoreCase("1")) {
                                        productCycleCountTolerance = "0";
                                    } else {
                                        if (productTypeID.equals(Producttype.ASSEMBLY)) {
                                            productCycleCountTolerance = "0";
                                        } else {
                                            prevProductCode = "";
                                            throw new AccountingException("Product Cycle Count Tolerance is not available");
                                        }
                                    }
                                }
                            } else {
                                productCycleCountTolerance = "0";
                            }

                            //Parent Product UUID
                            String parentProductUUID = "";
                            if (columnConfig.containsKey("parentid")) {
                                String parentProductID = recarr[(Integer) columnConfig.get("parentid")].replaceAll("\"", "").trim();
                                if (!StringUtil.isNullOrEmpty(parentProductID)) {
                                    Product parentProduct = accProductModuleService.getProductByProductID(parentProductID, companyid);
                                    if (parentProduct != null) {
                                        parentProductUUID = parentProduct.getID();
                                    } else {
                                        if (masterPreference.equalsIgnoreCase("1")) {
                                            parentProductUUID = null;
                                        } else {
                                            prevProductCode = "";
                                            throw new AccountingException("Parent Product is not found for " + parentProductID);
                                        }
                                    }
                                } else {
                                    if (masterPreference.equalsIgnoreCase("1")) {
                                        parentProductUUID = null;
                                    } else {
                                        prevProductCode = "";
                                        throw new AccountingException("Parent Product is not available");
                                    }
                                }
                            } else {
                                parentProductUUID = null;
                            }

                            //Product Sales Account ID
                            String productSalesAccId = "";
                            if (columnConfig.containsKey("salesaccountname")) {
                                String productSalesAccountName = recarr[(Integer) columnConfig.get("salesaccountname")].replaceAll("\"", "").trim();
                                if (!StringUtil.isNullOrEmpty(productSalesAccountName)) {
                                    Account salesAccount = accProductModuleService.getAccountByName(productSalesAccountName, companyid);
                                    if (salesAccount != null) {
                                        productSalesAccId = salesAccount.getID();
                                    } else {
                                        prevProductCode = "";
                                        throw new AccountingException("Product Sales Account is not found for " + productSalesAccountName);
                                    }
                                } else {
                                    prevProductCode = "";
                                    throw new AccountingException("Product Sales Account is not available");
                                }
                            } else {
                                throw new AccountingException("Product Sales Account column is not found.");
                            }

                            //Product Sales Account Return ID
                            String productSalesReturnAccId = "";
                            if (columnConfig.containsKey("salesretaccountname")) {
                                String productSalesReturnAccountName = recarr[(Integer) columnConfig.get("salesretaccountname")].replaceAll("\"", "").trim();
                                if (!StringUtil.isNullOrEmpty(productSalesReturnAccountName)) {
                                    Account salesReturnAccount = accProductModuleService.getAccountByName(productSalesReturnAccountName, companyid);
                                    if (salesReturnAccount != null) {
                                        productSalesReturnAccId = salesReturnAccount.getID();
                                    } else {
                                        prevProductCode = "";
                                        throw new AccountingException("Product Sales Return Account is not found for " + productSalesReturnAccountName);
                                    }
                                } else {
                                    prevProductCode = "";
                                    throw new AccountingException("Product Sales Return Account is not available");
                                }
                            } else {
                                throw new AccountingException("Product Sales Return Account column is not found.");
                            }

                            //Vendor Details
                            String productPreferedVendorID = "";
                            if (columnConfig.containsKey("vendornameid")) {
                                String productPreferedVendorName = recarr[(Integer) columnConfig.get("vendornameid")].replaceAll("\"", "").trim();
                                if (!StringUtil.isNullOrEmpty(productPreferedVendorName)) {
                                    Vendor vendor = accProductModuleService.getVendorByName(productPreferedVendorName, companyid);
                                    if (vendor != null) {
                                        productPreferedVendorID = vendor.getID();
                                    } else {
                                        if (masterPreference.equalsIgnoreCase("1")) {
                                            productPreferedVendorID = null;
                                        } else {
                                            prevProductCode = "";
                                            throw new AccountingException("Prefered Vendor is not found for " + productPreferedVendorName);
                                        }
                                    }
                                } else {
                                    if (masterPreference.equalsIgnoreCase("1")) {
                                        productPreferedVendorID = null;
                                    } else {
                                        if (productTypeID.equals(Producttype.ASSEMBLY)) {
                                            productPreferedVendorID = null;
                                        } else {
                                            prevProductCode = "";
                                            throw new AccountingException("Prefered Vendor is not available");
                                        }
                                    }
                                }
                            } else {
                                productPreferedVendorID = null;
                            }

                            //Product Purchase Account ID
                            String productPurchaseAccId = "";
                            if (columnConfig.containsKey("purchaseaccountname")) {
                                String productPurchaseAccountName = recarr[(Integer) columnConfig.get("purchaseaccountname")].replaceAll("\"", "").trim();
                                if (!StringUtil.isNullOrEmpty(productPurchaseAccountName)) {
                                    Account purchaseAccount = accProductModuleService.getAccountByName(productPurchaseAccountName, companyid);
                                    if (purchaseAccount != null) {
                                        productPurchaseAccId = purchaseAccount.getID();
                                    } else {
                                        prevProductCode = "";
                                        throw new AccountingException("Product Purchase Account is not found for " + productPurchaseAccountName);
                                    }
                                } else {
                                    prevProductCode = "";
                                    throw new AccountingException("Product Purchase Account is not available");
                                }
                            } else {
                                throw new AccountingException("Product Purchase Account column is not found.");
                            }

                            //Product Purchase Return Account ID
                            String productPurchaseReturnAccId = "";
                            if (columnConfig.containsKey("purchaseretaccountname")) {
                                String productPurchaseReturnAccountName = recarr[(Integer) columnConfig.get("purchaseretaccountname")].replaceAll("\"", "").trim();
                                if (!StringUtil.isNullOrEmpty(productPurchaseReturnAccountName)) {
                                    Account purchaseReturnAccount = accProductModuleService.getAccountByName(productPurchaseReturnAccountName, companyid);
                                    if (purchaseReturnAccount != null) {
                                        productPurchaseReturnAccId = purchaseReturnAccount.getID();
                                    } else {
                                        prevProductCode = "";
                                        throw new AccountingException("Product Purchase Return Account is not found for " + productPurchaseReturnAccountName);
                                    }
                                } else {
                                    prevProductCode = "";
                                    throw new AccountingException("Product Purchase Return Account is not available");
                                }
                            } else {
                                throw new AccountingException("Product Purchase Return Account column is not found.");
                            }
                            
                            //Product Initial Quantity   
                            String productInitialQuantity = "0";      
                            if (columnConfig.containsKey("initialquantity")) {
                                productInitialQuantity = recarr[(Integer) columnConfig.get("initialquantity")].replaceAll("\"", "").trim();
                                if (StringUtil.isNullOrEmpty(productInitialQuantity)) {
                                    if (masterPreference.equalsIgnoreCase("1")) {
                                        productInitialQuantity = "0";
                                    } else {
                                        if (productTypeID.equals(Producttype.ASSEMBLY)) {
                                            productInitialQuantity = "0";
                                        } else {
                                            prevProductCode = "";
                                            throw new AccountingException("Product Initial Quantity is not available");
                                        }
                                    }
                                }
                            } else {
                                productInitialQuantity = "0";
                            }

                            if (columnConfig.containsKey("initialsalesprice")) {
                                productSalesPrice = recarr[(Integer) columnConfig.get("initialsalesprice")].replaceAll("\"", "").trim();
                                if (StringUtil.isNullOrEmpty(productSalesPrice)) {
                                    if (masterPreference.equalsIgnoreCase("1")) {
                                        productSalesPrice = "";
                                    } else {
                                        prevProductCode = "";
                                        throw new AccountingException("Product Sales Price is not available");
                                    }
                                }
                            } else {
                                productSalesPrice = "";
                            }

                            //Currency Details
                            String MsgExep = "";
                            if (isCurrencyCode?columnConfig.containsKey("currencyCode"):columnConfig.containsKey("currencyName")) {
                                String productPriceCurrencyStr = isCurrencyCode?recarr[(Integer) columnConfig.get("currencyCode")].replaceAll("\"", "").trim():recarr[(Integer) columnConfig.get("currencyName")].replaceAll("\"", "").trim();
                                if (!StringUtil.isNullOrEmpty(productPriceCurrencyStr)) {
                                    currencyId = accProductModuleService.getCurrencyId(productPriceCurrencyStr, currencyMap);
                                    if (StringUtil.isNullOrEmpty(currencyId)) {
                                        MsgExep = messageSource.getMessage("acc.field.ImportProductExceptionFormat", null, RequestContextUtils.getLocale(request));
                                        prevProductCode = "";
                                        throw new AccountingException(MsgExep);
                                    }
                                } else {
                                    prevProductCode = "";
                                    throw new AccountingException("Currency is not available.");
                                }
                            } else {
                                throw new AccountingException("Currency column is not found.");
                            }

                            //Product Default Location
                            String productDefaultLocationID = "";
                            if (columnConfig.containsKey("locationName")) {
                                String productDefaultLocationName = recarr[(Integer) columnConfig.get("locationName")].replaceAll("\"", "").trim();
                                if (!StringUtil.isNullOrEmpty(productDefaultLocationName)) {
                                    InventoryLocation invLoc = accProductModuleService.getInventoryLocationByName(productDefaultLocationName, companyid);
                                    if (invLoc != null) {
                                        productDefaultLocationID = invLoc.getId();
                                    } else {
                                        if (masterPreference.equalsIgnoreCase("2")) {
                                            HashMap requestParam = AccountingManager.getGlobalParams(request);
                                            requestParam.put("id", "");
                                            requestParam.put("name", productDefaultLocationName);
                                            requestParam.put("parent", null);
                                            KwlReturnObject jeresult = accountingHandlerDAOobj.getObject(User.class.getName(), userId);
                                            User user = (User) jeresult.getEntityList().get(0);
                                            requestParam.put("user", user);
                                            KwlReturnObject locationResult = accMasterItemsDAO.addLocationItem(requestParam);
                                            invLoc = (InventoryLocation) locationResult.getEntityList().get(0);
                                            productDefaultLocationID = invLoc.getId();
                                        } else {
                                            if (masterPreference.equalsIgnoreCase("1")) {
                                                productDefaultLocationID = null;
                                            } else {
                                                prevProductCode = "";
                                                throw new AccountingException("Default Location is not found for " + productDefaultLocationName);
                                            }
                                        }
                                    }
                                } else {
                                    if (masterPreference.equalsIgnoreCase("1")) {
                                        productDefaultLocationID = null;
                                    } else {
                                        prevProductCode = "";
                                        throw new AccountingException("Default Location is not available.");
                                    }
                                }
                            } else {
                                productDefaultLocationID = null;
                            }

                            //Default Warehouse
                            String productDefaultWarehouseID = "";
                            if (columnConfig.containsKey("warehouseName")) {
                                String productDefaultWarehouseName = recarr[(Integer) columnConfig.get("warehouseName")].replaceAll("\"", "").trim();
                                if (!StringUtil.isNullOrEmpty(productDefaultWarehouseName)) {
                                    InventoryWarehouse invWHouse = accProductModuleService.getInventoryWarehouseByName(productDefaultWarehouseName, companyid);
                                    if (invWHouse != null) {
                                        productDefaultWarehouseID = invWHouse.getId();
                                    } else {
                                        if (masterPreference.equalsIgnoreCase("2")) {
                                             Store store = new Store();
                                            store.setStoreType(storeService.getStoreType(0));//Set Store type to warehouse
                                            store.setAbbreviation(productDefaultWarehouseName);
                                            store.setDescription(productDefaultWarehouseName);
                                            store.setCcDateAllow(false);//set Default False
                                            store.setSmccAllow(false);//set Default False
                                            KwlReturnObject jeresult = accountingHandlerDAOobj.getObject(User.class.getName(), userId);
                                            User user = (User) jeresult.getEntityList().get(0);
                                            store.setCreatedBy(user);
                                            Set<User> userSet = new HashSet<>();
                                            userSet.add(user);
                                            Set<User> executiveSet = new HashSet<>();
                                            executiveSet.add(user);
                                            store.setCompany(user.getCompany());
                                            store.setStoreManagerSet(userSet);
                                            store.setStoreExecutiveSet(executiveSet);
                                            storeService.addStore(user, store);
                                            productDefaultWarehouseID = store.getId();
                                        } else {
                                            if (masterPreference.equalsIgnoreCase("1")) {
                                                productDefaultWarehouseID = null;
                                            } else {
                                                prevProductCode = "";
                                                throw new AccountingException("Default Warehouse is not found for " + productDefaultWarehouseName);
                                            }
                                        }
                                    }
                                } else {
                                    if (masterPreference.equalsIgnoreCase("1")) {
                                        productDefaultWarehouseID = null;
                                    } else {
                                        prevProductCode = "";
                                        throw new AccountingException("Default Warehouse is not available.");
                                    }
                                }
                            } else {
                                productDefaultWarehouseID = null;
                            }

                            //Make available in other application
                            Boolean isSyncable = false;
                            if (columnConfig.containsKey("syncable")) {
                                String productMakeAvailableInOtherApp = recarr[(Integer) columnConfig.get("syncable")].replaceAll("\"", "").trim();
                                if (!StringUtil.isNullOrEmpty(productMakeAvailableInOtherApp)) {
                                    if (productMakeAvailableInOtherApp.equalsIgnoreCase("T")) {
                                        isSyncable = true;
                                    } else if (productMakeAvailableInOtherApp.equalsIgnoreCase("F")) {
                                        isSyncable = false;
                                    } else {
                                        prevProductCode = "";
                                        throw new AccountingException("Format you entered is not correct. It should be like \"T\" or \"F\"");
                                    }
                                } else {
                                    if (masterPreference.equalsIgnoreCase("1")) {
                                        isSyncable = false;
                                    } else {
                                        prevProductCode = "";
                                        throw new AccountingException("Make available in other application is not available.");
                                    }
                                }
                            }

                            //Multiple UOM
                            Boolean isMultiUOM = false;
                            if (columnConfig.containsKey("multiuom")) {
                                String multipleUOM = recarr[(Integer) columnConfig.get("multiuom")].replaceAll("\"", "").trim();
                                if (!StringUtil.isNullOrEmpty(multipleUOM)) {
                                    if (multipleUOM.equalsIgnoreCase("T")) {
                                        isMultiUOM = true;
                                    } else if (multipleUOM.equalsIgnoreCase("F")) {
                                        isMultiUOM = false;
                                    } else {
                                        prevProductCode = "";
                                        throw new AccountingException("Format you entered is not correct. It should be like \"T\" or \"F\"");
                                    }
                                } else {
                                    if (masterPreference.equalsIgnoreCase("1")) {
                                        isMultiUOM = false;
                                    } else {
                                        if (productTypeID.equals(Producttype.ASSEMBLY)) {
                                            isMultiUOM = false;
                                        } else {
                                            prevProductCode = "";
                                            throw new AccountingException("Multiple UOM is not available.");
                                        }
                                    }
                                }
                            }


                            Boolean isIslocationforproduct = false;
                            if (columnConfig.containsKey(Constants.ACTIVATE_LOCATION)) {
                                String ISlocationforproduct = recarr[(Integer) columnConfig.get(Constants.ACTIVATE_LOCATION)].replaceAll("\"", "").trim();
                                if (!StringUtil.isNullOrEmpty(ISlocationforproduct)) {
                                    if (ISlocationforproduct.equalsIgnoreCase("T")) {
                                        isIslocationforproduct = true;
                                    } else if (ISlocationforproduct.equalsIgnoreCase("F")) {
                                        isIslocationforproduct = false;
                                    } else {
                                        prevProductCode = "";
                                        throw new AccountingException("Format you entered is not correct. It should be like \"T\" or \"F\"");
                                    }
                                }
                            }


                            Boolean isIsSerialForProduct = false;
                            if (columnConfig.containsKey(Constants.ACTIVATE_SERIAL_NO)) {
                                String IsSerialForProduct = recarr[(Integer) columnConfig.get(Constants.ACTIVATE_SERIAL_NO)].replaceAll("\"", "").trim();
                                if (!StringUtil.isNullOrEmpty(IsSerialForProduct)) {
                                    if (IsSerialForProduct.equalsIgnoreCase("T")) {
                                        isIsSerialForProduct = true;
                                    } else if (IsSerialForProduct.equalsIgnoreCase("F")) {
                                        isIsSerialForProduct = false;
                                    } else {
                                        prevProductCode = "";
                                        throw new AccountingException("Format you entered is not correct. It should be like \"T\" or \"F\"");
                                    }
                                }
                            }
                            Boolean isIswarehouseforproduct = false;
                            if (columnConfig.containsKey(Constants.ACTIVATE_WAREHOUSE)) {
                                String Iswarehouseforproduct = recarr[(Integer) columnConfig.get(Constants.ACTIVATE_WAREHOUSE)].replaceAll("\"", "").trim();
                                if (!StringUtil.isNullOrEmpty(Iswarehouseforproduct)) {
                                    if (Iswarehouseforproduct.equalsIgnoreCase("T")) {
                                        isIswarehouseforproduct = true;
                                    } else if (Iswarehouseforproduct.equalsIgnoreCase("F")) {
                                        isIswarehouseforproduct = false;
                                    } else {
                                        prevProductCode = "";
                                        throw new AccountingException("Format you entered is not correct. It should be like \"T\" or \"F\"");
                                    }
                                }
                            }
                            Boolean isIsBatchForProduct = false;
                            if (columnConfig.containsKey(Constants.ACTIVATE_BATCH)) {
                                String IsBatchForProduct = recarr[(Integer) columnConfig.get(Constants.ACTIVATE_BATCH)].replaceAll("\"", "").trim();
                                if (!StringUtil.isNullOrEmpty(IsBatchForProduct)) {
                                    if (IsBatchForProduct.equalsIgnoreCase("T")) {
                                        isIsBatchForProduct = true;
                                    } else if (IsBatchForProduct.equalsIgnoreCase("F")) {
                                        isIsBatchForProduct = false;
                                    } else {
                                        prevProductCode = "";
                                        throw new AccountingException("Format you entered is not correct. It should be like \"T\" or \"F\"");
                                    }
                                }
                            }
                            // For Checking 'ProductID' is exist or not
                            KwlReturnObject result = accProductObj.getProductIDCount(productID, companyid,false);
                            int nocount = result.getRecordTotalCount();
                            if (nocount > 0 && !updateExistingRecordFlag) {
                                throw new AccountingException("Product ID '" + productID + "' already exists.");
                            } else if (nocount == 0 && updateExistingRecordFlag) {
                                throw new AccountingException("Product ID '" + productID + "' not exists.");
                            }                            
                            MasterItem prodMasterItemObj = accProductObj.getProductsMasterItem(companyid, productID);
                            KwlReturnObject kwlReturnObject_SPA = accProductObj.selectSubProductFromAssembly(productID);
                            KwlReturnObject kwlReturnObject_I = accProductObj.selectInventoryByProduct(productID, companyid);                           
                            boolean isUsedInTransaction = false;
                            if (updateExistingRecordFlag) {
                                Product prod = (Product) result.getEntityList().get(0);
                                //Check whether this product is used in any transaction or not
                                List listObj = accProductModuleService.isProductUsedintransction(prod.getID(), companyid, request,false);// false: Product & Services Report
                                isUsedInTransaction =(Boolean) listObj.get(0);    //always boolean value
                                if(isUsedInTransaction){
                                    throw new AccountingException("Product ID '" + productID + "' used in transaction(s). So it cannot update");
                                }
                                //Check whether this product is used for Build Assembly or not
                                KwlReturnObject rs = accProductObj.getAssemblyProductDetails(prod.getID()); //ERP-12252
                                if (rs.getRecordTotalCount() > 0 ){                                    
                                            throw new AccountingException(productID + "' used in Build Assembly. You cannot edit this Assembly Product.");
                                }
                                //In update case, if product is not linked in any transaction, delete this product
                                    System.out.println("Product not linked. so deleting this product to update");
                                    accProductObj.deleteProductCustomData(prod.getID());
                                    accProductObj.deleteProPricePermanently(prod.getID(), companyid);
                                    accProductObj.deleteProductCategoryMappingDtails(productID);
                                    if (prod.getProducttype().getID().equals(Producttype.ASSEMBLY)) {
                                        accProductObj.deleteProductAssembly(prod.getID());
                                        accProductObj.deleteProductBuildDetails(prod.getID(), companyid);
                                        accProductObj.deleteProductbBuild(prod.getID(), companyid);
                                    }
                                    if (!StringUtil.isNullOrEmpty(productID) && prodMasterItemObj != null) {
                                        accProductObj.deleteProductCategoryMappingDtails(prod.getID());
                                    }
                                    if (!StringUtil.isNullOrEmpty(prod.getID())) {
                                        accProductObj.deleteNewProductBatch(prod.getID(), companyid);
                                    }
                                    if (!StringUtil.isNullOrEmpty(productID) && kwlReturnObject_I.getRecordTotalCount() > 0 && !prod.getProducttype().getID().equals(Producttype.ASSEMBLY)) {
                                        accProductObj.deleteProductInitialInventoryDtails(prod.getID(), companyid);
                                    } else {
                                        accProductObj.deleteAssemblyProductInventory(prod.getID(), companyid);
                                    }
                                    accProductObj.deleteProductPermanently(prod.getID(), companyid);                               
                            }  
                            //Create Global Product Map
                            productMap = new HashMap<String, Object>();
                            productMap.put("producttype", productTypeID);
                            productMap.put("name", productName);
                            productMap.put("productid", productID);
                            if (columnConfig.containsKey("desc")) {
                                productMap.put("desc", productDescription);
                            }
                            productMap.put("syncable", false);
                            productMap.put("multiuom", false);
                            productMap.put("isBatchForProduct", isIsBatchForProduct);
                            productMap.put("isSerialForProduct", isIsSerialForProduct);
                            productMap.put("uomid", productUOMID);
                            if (!productTypeID.equals(Producttype.SERVICE)) { //Service Product
                                if (uom != null) {
                                    productMap.put("transferUoM", uom);
                                    productMap.put("orderUoM", uom);
                                }
                                if (salesuom != null) {
                                    productMap.put("salesuomid", salesuom);
                                } else if (salesuom == null && uom != null) {
                                    productMap.put("salesuomid", uom);
                                }
                                if (purchaseruom != null) {
                                    productMap.put("purchaseuomid", purchaseruom);
                                } else if (purchaseruom == null && uom != null) {
                                    productMap.put("purchaseuomid", uom);
                                }

                                //UOM Details
                                KwlReturnObject companyObj = accountingHandlerDAOobj.getObject(Company.class.getName(), companyid);
                                Company company = (Company) companyObj.getEntityList().get(0);
                                Packaging packaging = null;
                                if (inneruom != null || casinguom != null) {
                                    packaging = new Packaging();
                                    packaging.setCasingUoM(casinguom);
                                    packaging.setInnerUoM(inneruom);
                                    packaging.setStockUoM(uom);
                                    packaging.setCasingUomValue(Double.parseDouble(casinguomvalue));
                                    packaging.setInnerUomValue(Double.parseDouble(inneruomvalue));
                                    packaging.setStockUomValue(Double.parseDouble(stcokuomvalue));
                                    packaging.setCompany(company);

                                }
                                if (packaging != null) {
                                    accProductObj.saveProductPackging(packaging);
                                    productMap.put("packaging", packaging);
                                }
                            } //Service Product

                            productMap.put("reorderlevel", Double.parseDouble(productReorderLevel));
                            productMap.put("reorderquantity", Double.parseDouble(productReorderQuantity));
                            productMap.put("warrantyperiod", Integer.parseInt(productWarrantyPeriod));
                            productMap.put("warrantyperiodsal", Integer.parseInt(productSalesWarrantyPeriod));
                            productMap.put("leadtime", Integer.parseInt(productLeadTime));
                            productMap.put("productweight", Double.parseDouble(productweight));

                            productMap.put("parentid", parentProductUUID);
                            productMap.put("salesaccountid", productSalesAccId);
                            productMap.put("purchaseretaccountid", productPurchaseReturnAccId);
                            productMap.put("salesretaccountid", productSalesReturnAccId);
                            productMap.put("vendorid", productPreferedVendorID);
                            productMap.put("purchaseaccountid", productPurchaseAccId);
                            productMap.put("purchaseretaccountid", productPurchaseReturnAccId);

                            if (!StringUtil.isNullOrEmpty(productDefaultLocationID)) {
                                productMap.put("location", productDefaultLocationID);
                            }

                            if (!StringUtil.isNullOrEmpty(productDefaultWarehouseID)) {
                                productMap.put("warehouse", productDefaultWarehouseID);
                            }

                            productMap.put("syncable", isSyncable);
                            productMap.put("multiuom", isMultiUOM);
                            productMap.put("isLocationForProduct", isIslocationforproduct);
                            productMap.put("isWarehouseForProduct", isIswarehouseforproduct);
                            productMap.put("deletedflag", false);
                            productMap.put("companyid", companyid);
                            productMap.put("isImport", 1);
                            productMap.put("updateExistingRecordFlag", updateExistingRecordFlag);
                            productMap.put("currencyid", currencyId);

                            //Save Global Product Details
                            if(!StringUtil.isNullOrEmpty(bomProductID) && compQuantity > 0){ //Global Product ll save only when Bom Product ID & Quantity is not empty
                                productresult = accProductObj.addProduct(productMap);
                                product = (Product) productresult.getEntityList().get(0);
                            }                       
                                                        
                            if (productInitialQuantity.length() > 0) {
                                JSONObject inventoryjson = new JSONObject();
                                inventoryjson.put("productid", product.getID());
                                inventoryjson.put("quantity", Double.parseDouble(productInitialQuantity));
                                inventoryjson.put("baseuomquantity", Double.parseDouble(productInitialQuantity));
                                inventoryjson.put("baseuomrate", 1);
                                if (product.getUnitOfMeasure() != null) {
                                    inventoryjson.put("uomid", product.getUnitOfMeasure().getID());
                                }
                                inventoryjson.put("description", "Inventory Opened");
                                inventoryjson.put("carryin", true);
                                inventoryjson.put("defective", false);
                                inventoryjson.put("newinventory", true);
                                inventoryjson.put("companyid", companyid);
                                inventoryjson.put("updatedate", newUserDate);
                                accProductObj.addInventory(inventoryjson);

                                HashMap<String, Object> assemblyParams = AccountingManager.getGlobalParams(request);
                                assemblyParams.put("assembly", "");
                                assemblyParams.put("applydate", new Date());
                                assemblyParams.put("quantity", Double.parseDouble(productInitialQuantity));
                                assemblyParams.put("memo", "Inventory Opened");
                                assemblyParams.put("refno", "");
                                assemblyParams.put("buildproductid", product.getID());
                                accProductObj.updateAssemblyInventory(assemblyParams);
                            }
                            
                            if (productSalesPrice.length() > 0) {
                                // creating Price list Hashmap
                                HashMap<String, Object> salesPriceMap = new HashMap<String, Object>();
                                salesPriceMap.put("productid", product.getID());
                                salesPriceMap.put("companyid", companyid);
                                salesPriceMap.put("carryin", false);
                                salesPriceMap.put("price", Double.parseDouble(productSalesPrice));
                                salesPriceMap.put("applydate", ondate);
                                salesPriceMap.put("affecteduser", "-1");
                                salesPriceMap.put("currencyid", currencyId);
                                salesPriceMap.put("uomid", product.getUnitOfMeasure().getID());
                                accProductObj.addPriceList(salesPriceMap);
                            }
                            // For create custom field array
                            customfield = "";
                            JSONArray customJArr = new JSONArray();
                            for (int i = 0; i < jSONArray.length(); i++) {
                                JSONObject jSONObject = jSONArray.getJSONObject(i);

                                if (jSONObject.optBoolean("customflag", false)) {//&& !jSONObject.optBoolean("isLineItem",false)
                                    HashMap<String, Object> requestParams = new HashMap<String, Object>();
                                    requestParams.put(Constants.filter_names, Arrays.asList(Constants.companyid, Constants.moduleid, Constants.fieldlabel));
                                    requestParams.put(Constants.filter_values, Arrays.asList(companyid, Constants.Acc_Product_Master_ModuleId, jSONObject.getString("columnname")));

                                    KwlReturnObject fieldParamsResult = accCommonTablesDAO.getFieldParams(requestParams); // get custom field for module
                                    FieldParams params = (FieldParams) fieldParamsResult.getEntityList().get(0);

                                    if (!StringUtil.isNullOrEmpty(recarr[jSONObject.getInt("csvindex")].replaceAll("\"", "").trim())) {
                                        JSONObject customJObj = new JSONObject();
                                        customJObj.put("fieldid", params.getId());
                                        customJObj.put("filedid", params.getId());
                                        customJObj.put("refcolumn_name", "Col" + params.getRefcolnum());
                                        customJObj.put("fieldname", "Custom_" + params.getFieldlabel());
                                        customJObj.put("xtype", params.getFieldtype());

                                        String fieldComboDataStr = "";
                                        if (params.getFieldtype() == 3) { // if field of date type
                                            String dateStr = recarr[jSONObject.getInt("csvindex")].replaceAll("\"", "").trim();
                                            customJObj.put("Col" + params.getColnum(), df.parse(dateStr).getTime());
                                            customJObj.put("fieldDataVal", df.parse(dateStr).getTime());
                                        } else if (params.getFieldtype() == 4 || params.getFieldtype() == 7) { // if field of MultiSelect Drop Down OR Drop Down
                                            String[] fieldComboDataArr = recarr[jSONObject.getInt("csvindex")].replaceAll("\"", "").trim().split(";");

                                            for (int dataArrIndex = 0; dataArrIndex < fieldComboDataArr.length; dataArrIndex++) {
                                                requestParams = new HashMap<String, Object>();
                                                requestParams.put(Constants.filter_names, Arrays.asList(Constants.Acc_custom_fieldId, "value", "deleteflag"));
                                                requestParams.put(Constants.filter_values, Arrays.asList(params.getId(), fieldComboDataArr[dataArrIndex], 0));


                                                fieldParamsResult = accCommonTablesDAO.getCustomCombodata(requestParams);
                                                if (fieldParamsResult != null && !fieldParamsResult.getEntityList().isEmpty()) {
                                                    FieldComboData fieldComboData = (FieldComboData) fieldParamsResult.getEntityList().get(0);
                                                    fieldComboDataStr += fieldComboData.getId() + ",";
                                                }
                                            }

                                            if (!StringUtil.isNullOrEmpty(fieldComboDataStr)) {
                                                customJObj.put("Col" + params.getColnum(), fieldComboDataStr.substring(0, fieldComboDataStr.length() - 1));
                                                customJObj.put("fieldDataVal", fieldComboDataStr.substring(0, fieldComboDataStr.length() - 1));
                                            } else {
                                                continue;
                                            }
                                        } else if (params.getFieldtype() == 11) { // if field of check box type 
                                            customJObj.put("Col" + params.getColnum(), Boolean.parseBoolean(recarr[jSONObject.getInt("csvindex")].replaceAll("\"", "").trim()));
                                            customJObj.put("fieldDataVal", Boolean.parseBoolean(recarr[jSONObject.getInt("csvindex")].replaceAll("\"", "").trim()));
                                        } else if (params.getFieldtype() == 12) { // if field of check list type
                                            requestParams = new HashMap<String, Object>();
                                            requestParams.put(Constants.filter_names, Arrays.asList(Constants.Acc_custom_fieldId, "deleteflag"));
                                            requestParams.put(Constants.filter_values, Arrays.asList(params.getId(), 0));


                                            fieldParamsResult = accCommonTablesDAO.getCustomCombodata(requestParams);
                                            List<FieldComboData> fieldComboDataList = fieldParamsResult.getEntityList();

                                            String[] fieldComboDataArr = recarr[jSONObject.getInt("csvindex")].replaceAll("\"", "").trim().split(";");

                                            int dataArrIndex = 0;

                                            for (FieldComboData fieldComboData : fieldComboDataList) {
                                                if (fieldComboDataArr.length != dataArrIndex && fieldComboDataArr[dataArrIndex] != null && fieldComboDataArr[dataArrIndex].replaceAll("\"", "").trim().equalsIgnoreCase("true")) {
                                                    fieldComboDataStr += fieldComboData.getId() + ",";
                                                }
                                                dataArrIndex++;
                                            }

                                            if (!StringUtil.isNullOrEmpty(fieldComboDataStr)) {
                                                customJObj.put("Col" + params.getColnum(), fieldComboDataStr.substring(0, fieldComboDataStr.length() - 1));
                                                customJObj.put("fieldDataVal", fieldComboDataStr.substring(0, fieldComboDataStr.length() - 1));
                                            } else {
                                                continue;
                                            }
                                        } else {
                                            customJObj.put("Col" + params.getColnum(), recarr[jSONObject.getInt("csvindex")].replaceAll("\"", "").trim());
                                            customJObj.put("fieldDataVal", recarr[jSONObject.getInt("csvindex")].replaceAll("\"", "").trim());
                                        }

                                        customJObj.put("Custom_" + params.getFieldlabel(), "Col" + params.getColnum());

                                        customJArr.put(customJObj);
                                    }
                                }
                            }//Create Custom Field Array
                            customfield = customJArr.toString();
                            if (!StringUtil.isNullOrEmpty(customfield)) {
                                JSONArray jcustomarray = new JSONArray(customfield);
                                HashMap<String, Object> customrequestParams = new HashMap<String, Object>();
                                customrequestParams.put("customarray", jcustomarray);
                                customrequestParams.put("modulename", Constants.Acc_Product_modulename);
                                customrequestParams.put("moduleprimarykey", Constants.Acc_Productid);
                                customrequestParams.put("modulerecid", product.getID());
                                customrequestParams.put("moduleid", Constants.Acc_Product_Master_ModuleId);//isFixedAsset ? Constants.Acc_FixedAssets_AssetsGroups_ModuleId:
                                customrequestParams.put("companyid", companyid);
                                productMap.put("id", product.getID());
                                customrequestParams.put("customdataclasspath", Constants.Acc_Product_custom_data_classpath);
                                KwlReturnObject customDataresult = fieldDataManagercntrl.setCustomData(customrequestParams);
                                if (customDataresult != null && customDataresult.getEntityList().size() > 0) {
                                    productMap.put("accproductcustomdataref", product.getID());
                                    productresult = accProductObj.updateProduct(productMap);
                                }
                                HashMap<String, Object> customHistoryParams = new HashMap<String, Object>();
                                customHistoryParams.put("productId", product.getID());
                                customHistoryParams.put("customarray", jcustomarray);
                                accProductModuleService.maintainCustomFieldHistoryForProduct(request, customHistoryParams);
                            }
                        }// Product Code check                        
                        
                        //BOM Product Map
                        JSONArray bomarray = new JSONArray();
                        JSONObject bomobj = new JSONObject();
                        bomobj.put("bomproductpid", bompid);
                        bomobj.put("bomproductname", bomProductName);
                        bomobj.put("bomproductdesc", bomProductDesc);
                        bomobj.put("bomProductType", bomProductType);
                        bomobj.put("bomProductPurchasePrice", bomProductPurchasePrice);
                        bomobj.put("compQuantity", compQuantity);
                        bomobj.put("comppercent", comppercent);
                        bomobj.put("compactualQuantity", compactualQuantity);
                        bomobj.put("comptotal", comptotal);
                        bomobj.put("recylequantity", recylequantity);
                        bomobj.put("inventoryquantiy", compactualQuantity);  //Inventory Quantiy & Actual Quantity is the same
                        bomobj.put("remainingquantity", remainingquantity);
                        bomarray.put(bomobj);
                        
                        // for calculating total cost of bom product
                        productInitialPurchasePrise += comptotal;
                        
                        //Save BOM Products of an Assembly Product  
                        if(product!=null){
                        if (product.getProducttype().getID().equals(Producttype.ASSEMBLY)) {
                            saveImportAssemblyProduct(bomarray, product, updateExistingRecordFlag, companyid);
                        } 
                      } else {
                            if(!prevProductCode.equalsIgnoreCase(productID)){  //ERP-11477
                                throw new AccountingException("This is not an Assembly Product.");
                            }
                            else{
                                throw new AccountingException("Product ID '" + productID + "' already exists.");   //ERP-11477
                            }
                        }
                    } catch (Exception ex) {// Inner Try-Catch
                        failed++;
                        String errorMsg = ex.getMessage(), invalidColumns = "";
                        try {
                            JSONObject errorLog = new JSONObject(errorMsg);
                            errorMsg = errorLog.getString("errorMsg");
                            invalidColumns = errorLog.getString("invalidColumns");
                        } catch (JSONException jex) {
                        }
                        failedRecords.append("\n" + accProductModuleService.createCSVrecord(recarr) + "\"" + errorMsg.replaceAll("\"", "") + "\"");
                    }
                    total++;
                }// if(cnt!=0)
                else{                               // the below line is commited due to not proparely showing header in error log file . ERP-11483
                     String[] recarr = null;
                    if (delimiterType.equalsIgnoreCase("Bar")) {
                        recarr = record.split("\\|");
                    } else {
                        recarr = record.split(",");
                    }
                    failedRecords.append(accProductModuleService.createCSVrecord(recarr)+"\"Error Message\""); 
                }
                cnt++;
            }//while

            // for saving BOM initial purchase price
            if (!prevProductCode.equalsIgnoreCase("") && productInitialPurchasePrise > 0 && product != null) {
                if (productInitialPurchasePrise > 0) {
                    HashMap<String, Object> initialPurchasePriceMap = new HashMap<String, Object>();
                    initialPurchasePriceMap.put("productid", product.getID());
                    initialPurchasePriceMap.put("companyid", companyid);
                    initialPurchasePriceMap.put("carryin", true);
                    initialPurchasePriceMap.put("price", productInitialPurchasePrise);
                    initialPurchasePriceMap.put("applydate", ondate);
                    initialPurchasePriceMap.put("affecteduser", "-1");
                    initialPurchasePriceMap.put("currencyid", currencyId);
                    initialPurchasePriceMap.put("uomid", product.getUnitOfMeasure().getID());
                    accProductObj.addPriceList(initialPurchasePriceMap);
                }
            }
            
            if (failed > 0) {
                accProductModuleService.createFailureFiles(fileName, failedRecords, ".csv");
            }

            int success = total - failed;
            if (total == 0) {
                msg = messageSource.getMessage("acc.field.Emptyfile", null, RequestContextUtils.getLocale(request));
            } else if (success == 0) {
//                issuccess = false;
                msg = messageSource.getMessage("acc.rem.169", null, RequestContextUtils.getLocale(request));
            } else if (success == total) {
                msg = messageSource.getMessage("acc.rem.168", null, RequestContextUtils.getLocale(request));
            } else {
                msg = messageSource.getMessage("acc.field.Imported", null, RequestContextUtils.getLocale(request))+ " " + success + " "+ messageSource.getMessage("acc.field.record", null, RequestContextUtils.getLocale(request)) + (success > 1 ? "s" : "") + " " +messageSource.getMessage("acc.field.successfully.", null, RequestContextUtils.getLocale(request));
                msg += (failed == 0 ? "." : " "+messageSource.getMessage("acc.field.andfailedtoimport", null, RequestContextUtils.getLocale(request))+ " " + failed + " "+ messageSource.getMessage("acc.field.record", null, RequestContextUtils.getLocale(request)) + (failed > 1 ? "s" : "") + ".");
            }

            try {
                txnManager.commit(status);
            } catch (Exception ex) {
                commitedEx = true;
                throw ex;
            }
        } catch (Exception ex) {// Outer Try-Catch
            if (!commitedEx) { //if exception occurs during commit then dont call rollback
                txnManager.rollback(status);
            }
            issuccess = false;
            msg = "" + ex.getMessage();

            Logger.getLogger(accProductController.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
            throw new AccountingException("Error While Importing Records.");
        } finally {
            fileInputStream.close();
            br.close();

            DefaultTransactionDefinition ldef = new DefaultTransactionDefinition();
            ldef.setName("import_Tx");
            ldef.setPropagationBehavior(TransactionDefinition.PROPAGATION_REQUIRED);
            TransactionStatus lstatus = txnManager.getTransaction(ldef);

            try {
                //Insert Integration log
                HashMap<String, Object> logDataMap = new HashMap<String, Object>();
                logDataMap.put("FileName", getActualFileName(fileName));
                logDataMap.put("StorageName", fileName);
                logDataMap.put("Log", msg);
                logDataMap.put("Type", "csv");
                logDataMap.put("FailureFileType", failed>0?"csv":"");
                logDataMap.put("TotalRecs", total);
                logDataMap.put("Rejected", failed);
                logDataMap.put("Module", Constants.Acc_Assembly_Product_Master_ModuleId);
                logDataMap.put("ImportDate", new Date());
                logDataMap.put("User", userId);
                logDataMap.put("Company", companyid);
                importDao.saveImportLog(logDataMap);
               txnManager.commit(lstatus);
            } catch (Exception ex) {
                try{  //ERP-12252
                   txnManager.rollback(lstatus);
                }
                catch(Exception ee){
                  Logger.getLogger(accProductController.class.getName()).log(Level.SEVERE, null, ee);  
                }               
                Logger.getLogger(accProductController.class.getName()).log(Level.SEVERE, null, ex);
            }

            try {
                returnObj.put("success", issuccess);
                returnObj.put("msg", msg);
                returnObj.put("totalrecords", total);
                returnObj.put("successrecords", total - failed);
                returnObj.put("failedrecords", failed);
                returnObj.put("filename", getActualFileName(fileName));
                returnObj.put("Module", Constants.Acc_Product_Master_ModuleId);
            } catch (JSONException ex) {
                Logger.getLogger(accProductController.class.getName()).log(Level.SEVERE, null, ex);
            }
        }//finally
        return returnObj;
    }
    
    @Deprecated
    public JSONObject importProductCategoryRecords(HttpServletRequest request, JSONObject jobj) throws AccountingException, IOException, SessionExpiredException, JSONException {
        DefaultTransactionDefinition def = new DefaultTransactionDefinition();
        def.setName("import_Tx");
        def.setPropagationBehavior(TransactionDefinition.PROPAGATION_REQUIRED);
        TransactionStatus status = txnManager.getTransaction(def);
        boolean commitedEx = false;
        boolean issuccess = true;
        String msg = "";
        FileInputStream fileInputStream = null;
        BufferedReader br = null;
        int total = 0, failed = 0;
        String companyid = sessionHandlerImpl.getCompanyid(request);
        String userId = sessionHandlerImpl.getUserid(request);
        String fileName = jobj.getString("filename");
        String masterPreference = request.getParameter("masterPreference");

        JSONObject returnObj = new JSONObject();

        try {
            fileInputStream = new FileInputStream(jobj.getString("FilePath"));
            br = new BufferedReader(new InputStreamReader(fileInputStream));
            String record = "";
            int cnt = 0;

            StringBuilder failedRecords = new StringBuilder();

            HashMap<String, Integer> columnConfig = new HashMap<String, Integer>();
            JSONArray jSONArray = jobj.getJSONArray("resjson");
            List headArrayList = new ArrayList();
            for (int i = 0; i < jSONArray.length(); i++) {
                JSONObject jSONObject = jSONArray.getJSONObject(i);
                headArrayList.add(jSONObject.get("csvheader"));

                columnConfig.put(jSONObject.getString("dataindex"), jSONObject.getInt("csvindex"));
            }

            failedRecords.append(accProductModuleService.createCSVrecord(headArrayList.toArray()) + "\"Error Message\"");

            while ((record = br.readLine()) != null) {
                if (cnt != 0) {
                    String[] recarr = record.split(",");
                    try {
                        String productIDUUID = "";
                        String productID = "";
                        if (columnConfig.containsKey("productid")) {
                            productID = recarr[(Integer) columnConfig.get("productid")].replaceAll("\"", "").trim();
                            if (!StringUtil.isNullOrEmpty(productID)) {
                                Product product = accProductModuleService.getProductByProductID(productID, companyid);
                                if (product != null) {
                                    productIDUUID = product.getID();
                                } else {
                                    throw new AccountingException("Product ID is not found for " + productID);
                                }
                                
                            } else {
                                throw new AccountingException("Product ID is not available.");
                            }
                        } else {
                            throw new AccountingException("Product ID column is not found.");
                        }

                        String productCategoryID = "";
                        String productCategoryName = "";
                        if (columnConfig.containsKey("productCategory")) {
                            productCategoryName = recarr[(Integer) columnConfig.get("productCategory")].replaceAll("\"", "").trim();
                            if (!StringUtil.isNullOrEmpty(productCategoryName)) {
                                if (StringUtil.equal(productCategoryName, "None")) {
                                    productCategoryID = null;
                                } else {
                                    productCategoryID = accProductModuleService.getProductCategoryIDByName(productCategoryName, companyid);
                                    if (StringUtil.isNullOrEmpty(productCategoryID)) {
                                        throw new AccountingException("Product Category is not found for " + productCategoryName);
                                    }
                                }
                            } else {
                                throw new AccountingException("Product Category is not available.");
                            }
                        } else {
                            throw new AccountingException("Product Category column is not found.");
                        }
                        
                        if (!StringUtil.isNullOrEmpty(productCategoryID)) {
                            KwlReturnObject categoryResult = accProductObj.getProductCategoryMapping(productIDUUID, productCategoryID);
                            int nocount = categoryResult.getRecordTotalCount();
                            if (nocount > 0) {
                                throw new AccountingException("Product Category '" + productCategoryName + "' for Product ID '" + productID + "' is already exists.");
                            }
                        }
                        
                        if (!StringUtil.isNullOrEmpty(productCategoryID)) {
                            accProductObj.deleteProductCategoryMappingForNoneCategory(productIDUUID);
                        } else {
                            accProductObj.deleteProductCategoryMappingDtails(productIDUUID);
                        }
                        
                        // For saving Product and Category Mapping
                        accProductObj.saveProductCategoryMapping(productIDUUID, productCategoryID);
                    } catch (Exception ex) {
                        failed++;
                        String errorMsg = ex.getMessage(), invalidColumns = "";
                        try {
                            JSONObject errorLog = new JSONObject(errorMsg);
                            errorMsg = errorLog.getString("errorMsg");
                            invalidColumns = errorLog.getString("invalidColumns");
                        } catch (JSONException jex) {
                        }
                        failedRecords.append("\n" + accProductModuleService.createCSVrecord(recarr) + "\"" + errorMsg.replaceAll("\"", "") + "\"");
                    }
                    total++;
                }
                cnt++;
            }

            if (failed > 0) {
                accProductModuleService.createFailureFiles(fileName, failedRecords, ".csv");
            }

            int success = total - failed;
            if (total == 0) {
                msg = messageSource.getMessage("acc.field.Emptyfile", null, RequestContextUtils.getLocale(request));
            } else if (success == 0) {
//                issuccess = false;
                msg = messageSource.getMessage("acc.rem.169", null, RequestContextUtils.getLocale(request));
            } else if (success == total) {
                msg = messageSource.getMessage("acc.rem.168", null, RequestContextUtils.getLocale(request));
            } else {
                msg = messageSource.getMessage("acc.field.Imported", null, RequestContextUtils.getLocale(request))+ " " + success + " "+ messageSource.getMessage("acc.field.record", null, RequestContextUtils.getLocale(request)) + (success > 1 ? "s" : "") +" "+ messageSource.getMessage("acc.field.successfully.", null, RequestContextUtils.getLocale(request));
                msg += (failed == 0 ? "." : " "+messageSource.getMessage("acc.field.andfailedtoimport", null, RequestContextUtils.getLocale(request))+ " " + failed + " "+ messageSource.getMessage("acc.field.record", null, RequestContextUtils.getLocale(request)) + (failed > 1 ? "s" : "") + ".");
            }

            try {
                txnManager.commit(status);
            } catch (Exception ex) {
                commitedEx = true;
                throw ex;
            }
        } catch (Exception ex) {
            if (!commitedEx) { // if exception occurs during commit then dont call rollback
                txnManager.rollback(status);
            }
            issuccess = false;
            msg = "" + ex.getMessage();

            Logger.getLogger(accProductController.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
            throw new AccountingException("Error While Importing Records.");
        } finally {
            fileInputStream.close();
            br.close();

            DefaultTransactionDefinition ldef = new DefaultTransactionDefinition();
            ldef.setName("import_Tx");
            ldef.setPropagationBehavior(TransactionDefinition.PROPAGATION_REQUIRED);
            TransactionStatus lstatus = txnManager.getTransaction(ldef);

            try {
                // Insert Integration log
                HashMap<String, Object> logDataMap = new HashMap<String, Object>();
                logDataMap.put("FileName", getActualFileName(fileName));
                logDataMap.put("StorageName", fileName);
                logDataMap.put("Log", msg);
                logDataMap.put("Type", "csv");
                logDataMap.put("FailureFileType", failed>0?"csv":"");
                logDataMap.put("TotalRecs", total);
                logDataMap.put("Rejected", failed);
                logDataMap.put("Module", Constants.Acc_Product_Category_ModuleId);
                logDataMap.put("ImportDate", new Date());
                logDataMap.put("User", userId);
                logDataMap.put("Company", companyid);
                importDao.saveImportLog(logDataMap);

                String tableName = importDao.getTableName(fileName);
                importDao.removeFileTable(tableName); // Remove table after importing all records

                txnManager.commit(lstatus);
            } catch (Exception ex) {
                txnManager.rollback(lstatus);
                Logger.getLogger(accProductController.class.getName()).log(Level.SEVERE, null, ex);
            }

            try {
                returnObj.put("success", issuccess);
                returnObj.put("msg", msg);
                returnObj.put("totalrecords", total);
                returnObj.put("successrecords", total - failed);
                returnObj.put("failedrecords", failed);
                returnObj.put("filename", getActualFileName(fileName));
            } catch (JSONException ex) {
                Logger.getLogger(accProductController.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

        return returnObj;
    }
    
     //Save Assembly Product
    public void saveImportAssemblyProduct(JSONArray bomarray, Product assemblyProduct, boolean updateExistingRecordFlag, String companyid) throws ServiceException {
        try {
//            if (updateExistingRecordFlag) {  //This function need to implement to update inventory in case of update existing product
//                updateImportBillofMaterialsInventory(bomarray, assemblyProduct, companyid);
//            }
//                accProductObj.deleteProductAssembly(assemblyProduct.getID());

                HashMap<String, Object> assemblyMap = new HashMap<String, Object>();
                for (int i = 0; i < bomarray.length(); i++) {
                    JSONObject obj = new JSONObject();
                    obj = (JSONObject) bomarray.get(i);

                    assemblyMap.put("productid", assemblyProduct.getID());

                    if (!StringUtil.isNullObject(obj.get("bomproductpid"))) {
                    assemblyMap.put("subproductid", (String)obj.get("bomproductpid"));
                    }

                    if (!StringUtil.isNullObject(obj.get("compQuantity"))) {
                    assemblyMap.put("quantity", (Double)obj.get("compQuantity"));
                    }

                    if (!StringUtil.isNullObject(obj.get("comppercent"))) {
                    assemblyMap.put("percentage", (Double)obj.get("comppercent"));
                    }

                    if (!StringUtil.isNullObject(obj.get("compactualQuantity"))) {
                    assemblyMap.put("actualquantity", (Double)obj.get("compactualQuantity"));
                    }

                    if (!StringUtil.isNullObject(obj.get("inventoryquantiy"))) {
                    assemblyMap.put("inventoryquantiy", (Double)obj.get("inventoryquantiy"));
                    }

                    if (!StringUtil.isNullObject(obj.get("recylequantity"))) {
                        assemblyMap.put("recylequantity", obj.get("recylequantity"));
                    }

                    if (!StringUtil.isNullObject(obj.get("remainingquantity"))) {
                        assemblyMap.put("remainingquantity", obj.get("remainingquantity"));
                    }                    

                    accProductObj.saveProductAssembly(assemblyMap); //Save Assembly Product
                }//for
        } catch (Exception ex) {
            throw ServiceException.FAILURE("saveAssemblyProduct : " + ex.getMessage(), ex);
        }
    }
    
    
    private UOMschemaType getUOMschemaTypeByName(String uomSchemaTypeName, String companyID) throws AccountingException {
        UOMschemaType uomSchemaType = null;
        try {
            if (!StringUtil.isNullOrEmpty(uomSchemaTypeName) && !StringUtil.isNullOrEmpty(companyID)) {
                KwlReturnObject retObj = accUomObj.getUOMschemaTypeByName(uomSchemaTypeName, companyID);
                if (retObj != null && !retObj.getEntityList().isEmpty()) {
                    uomSchemaType = (UOMschemaType) retObj.getEntityList().get(0);
                }
            }
        } catch (Exception ex) {
            Logger.getLogger(accProductControllerCMN.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
            throw new AccountingException("System Failure while fetching UOM Schema");
        }
        return uomSchemaType;
    }
    
    public ModelAndView getDetailedStockMovementList(HttpServletRequest request, HttpServletResponse response) {

        JSONObject jobj = new JSONObject();
        String msg = "";
        boolean issuccess = false;
        DefaultTransactionDefinition def = new DefaultTransactionDefinition();
        def.setName("SMT_Tx");
        def.setPropagationBehavior(TransactionDefinition.PROPAGATION_REQUIRED);
        TransactionStatus status = txnManager.getTransaction(def);
        Locale locale = RequestContextUtils.getLocale(request);
        JSONArray jArray = new JSONArray();
        int totalCount=0;
        int cnt = 0;
        DateFormat df = null;
        String start = request.getParameter("start");
        String limit = request.getParameter("limit");
        List<TransactionBatch> pvbList = new ArrayList();
        String pid="";
        int recCount=0;
        try {
            String userId = sessionHandlerImpl.getUserid(request);
            String companyid = sessionHandlerImpl.getCompanyid(request);
            df = authHandler.getDateOnlyFormat();
            KwlReturnObject jeresult = accountingHandlerDAOobj.getObject(User.class.getName(), userId);
            User user = (User) jeresult.getEntityList().get(0);
            jeresult = accountingHandlerDAOobj.getObject(ExtraCompanyPreferences.class.getName(), user.getCompany().getCompanyID());
            ExtraCompanyPreferences ecf = (ExtraCompanyPreferences) jeresult.getEntityList().get(0);


            String searchString = request.getParameter("ss");

            String fd = request.getParameter("fromDate");
            String td = request.getParameter("toDate");

            String storeId = request.getParameter("storeid");
            String tType = request.getParameter("transactionType");

            String exportFileName = request.getParameter("filename"); // for Export
            boolean isExport = false;
            if (!StringUtil.isNullOrEmpty(exportFileName)) {
                isExport = true;
            }
            Date fromDate = null;
            Date toDate = null;
            if (!StringUtil.isNullOrEmpty(fd) && !StringUtil.isNullOrEmpty(td)) {
                try {
                    fromDate = df.parse(fd);
                    toDate = df.parse(td);
                } catch (ParseException ex) {
                }
            }

            Store store = null;
            if (!StringUtil.isNullOrEmpty(storeId)) {
                jeresult = accountingHandlerDAOobj.getObject(Store.class.getName(), storeId);
                store = (Store) jeresult.getEntityList().get(0);
            }

            // Create column model
            JSONObject commData = new JSONObject();
            JSONObject jMeta = new JSONObject();
            JSONArray jarrColumns = new JSONArray();
            JSONArray jarrRecords = new JSONArray();
            JSONObject jobjTemp = new JSONObject();
            HashMap <String,Object> hashmap = new HashMap<>();
            hashmap.put("locale", locale);
            productHandler.createColumnModelForStockMovement(jarrColumns, jarrRecords, hashmap);
            if (store != null) {
                String filterConjuctionCriteria = request.getParameter("filterConjuctionCriteria");
                String searchJson = request.getParameter("searchJson");
                HashMap<String, Object> requestParams = new HashMap<>();
                requestParams.put("companyId", user.getCompany().getCompanyID());
                requestParams.put("companyid", user.getCompany().getCompanyID());
                requestParams.put("gcurrencyid", sessionHandlerImpl.getCurrencyID(request));
                requestParams.put("storeId", store.getId());
                requestParams.put("fromDate", fd);
                requestParams.put("toDate", td);
                requestParams.put("searchString", searchString);
                requestParams.put("start", start);
                requestParams.put("limit", limit);
                requestParams.put("filterConjuctionCriteria", filterConjuctionCriteria);
                requestParams.put("searchJson", searchJson);
                requestParams.put("isActivateMRPModule", ecf.isActivateMRPModule());
                KwlReturnObject result = accProductObj.getDetailedStockMovementList(requestParams);
                
                HashMap<String, Object> valuationRequestParams = new HashMap<>();
                valuationRequestParams.put(Constants.companyKey, user.getCompany().getCompanyID());
                valuationRequestParams.put(Constants.globalCurrencyKey, sessionHandlerImpl.getCurrencyID(request));
                valuationRequestParams.put("storeId", store.getId());
                valuationRequestParams.put(Constants.REQ_startdate, fd);
                valuationRequestParams.put(Constants.REQ_enddate, td);
                valuationRequestParams.put(Constants.df, authHandler.getDateOnlyFormat());
                valuationRequestParams.put("isFromStockMovement", true);
                valuationRequestParams.put("isActivateMRPModule", ecf.isActivateMRPModule());
                JSONArray jsonArr = AccProductService.getInventoryValuationData(valuationRequestParams);
                JSONObject prodTransObject = jsonArr.optJSONObject(0);
                
                List list = result.getEntityList();
                totalCount=result.getRecordTotalCount();
                Iterator itr = list.iterator();
                KwlReturnObject crresult;
                Set<String> smset = new HashSet<>();
                while (itr.hasNext()) {
                    Object[] row = (Object[]) itr.next();
                    String stockMovementDetail = (String) row[0];
                    if (!smset.contains(row[0].toString())) {
                    BigInteger transType;
                        if (row[7] instanceof BigInteger) {
                            transType = (BigInteger) row[7];
                        } else {
                            int intType = (Integer) row[7];
                            transType = BigInteger.valueOf(intType);
                        }
                    double stockRate = 0;
                    Date transactionDate = (Date) row[9];
                    double baseUOMRate = Double.parseDouble(StringUtil.isNullOrEmpty(row[10].toString()) ? "0" : row[10].toString()); // Conversion Factor
                    String currencyid = "";
                    if (!StringUtil.isNullOrEmpty((String) row[11])) {
                        currencyid = (String) row[11];
                    }
                    double grSpotRate = 0.0;
                    String detailid = "";
                    try {
                        if (!StringUtil.isNullOrEmpty((String) row[12])) {
                            grSpotRate = StringUtil.getDouble((String) row[12]);
                        }
                    } catch (java.lang.ClassCastException ex) {
                        if (row[12] != null) {
                            grSpotRate = (double) row[12];
                        }
                    }
                    if (!StringUtil.isNullOrEmpty((String) row[13])) {
                        detailid = (String) row[13];
                    }
                    if (recCount > 0 && !pid.equals(row[2])) {
                        pvbList.clear();
                    }
                    double total=0;
                    KwlReturnObject accresult = accountingHandlerDAOobj.getObject(StockMovementDetail.class.getName(), stockMovementDetail);
                        if (accresult != null && accresult.getRecordTotalCount() > 0) {
                            StockMovementDetail smd = (StockMovementDetail) accresult.getEntityList().get(0);
                            StockMovement sm = smd.getStockMovement();
                            JSONObject jObj = new JSONObject();
                            pid= (String) row[2];
                            jObj.put("itemcode", sm.getProduct().getProductid());
                            jObj.put("itemdescription", sm.getProduct().getDescription());
                            jObj.put("itemname", sm.getProduct().getName());
                            jObj.put("storedescription", (sm.getStore() == null) ? "" : sm.getStore().getDescription());
                            jObj.put("orderuom", (sm.getStockUoM() == null) ? "" : sm.getStockUoM().getNameEmptyforNA());
                            jObj.put("costcenter", (sm.getCostCenter() == null) ? "" : sm.getCostCenter().getCcid());
                            String vcName = (sm.getVendor() == null) ? ((sm.getCustomer() == null) ? null : sm.getCustomer().getName()) : sm.getVendor().getName();
                            jObj.put("vendor", vcName);
                            jObj.put("type", sm.getTransactionType().toString());
                            //To display date in user seleceted date format.
                            jObj.put("date", authHandler.getUserDateFormatterWithoutTimeZone(request).format(sm.getTransactionDate()));
                            jObj.put("orderno", sm.getTransactionNo());
                            jObj.put("remark", sm.getRemark());
                            jObj.put("isBatchForProduct", sm.getProduct() != null ? sm.getProduct().isIsBatchForProduct() : "");
                            jObj.put("isSerialForProduct", sm.getProduct() != null ? sm.getProduct().isIsSerialForProduct() : "");
                            jObj.put("isRowForProduct", sm.getProduct() != null ? sm.getProduct().isIsrackforproduct() : "");
                            jObj.put("isRackForProduct", sm.getProduct() != null ? sm.getProduct().isIsrackforproduct() : "");
                            jObj.put("isBinForProduct", sm.getProduct() != null ? sm.getProduct().isIsbinforproduct() : "");
                            jObj.put("module", sm.getTransactionModule().ordinal());
                            String moduleName = sm.getTransactionModule().getString();
                            jObj.put("moduleName", moduleName);
                            jObj.put("stockTypeId", sm.getProduct().getItemReusability());
                            jObj.put("id", smd.getId());
                            jObj.put("locationName", (smd.getLocation() != null) ? smd.getLocation().getName() : "");
                            jObj.put("rowName", (smd.getRow() != null) ? smd.getRow().getName() : "");
                            jObj.put("rackName", (smd.getRack() != null) ? smd.getRack().getName() : "");
                            jObj.put("binName", (smd.getBin() != null) ? smd.getBin().getName() : "");
                            jObj.put("quantity", smd.getQuantity());
                            jObj.put("serialNames", (smd.getSerialNames() != null) ? smd.getSerialNames().replace(",", ", ") : "");
                            jObj.put("batchName", (smd.getBatchName() != null) ? smd.getBatchName() : "");
                            double quantity = smd.getQuantity();
                            stockRate = sm.getPricePerUnit();
                            if (prodTransObject != null) {
                                JSONObject transObject = prodTransObject.optJSONObject(sm.getProduct().getID());
                                if(transObject != null){
                                    if (sm.getTransactionType() == TransactionType.IN && transObject.has(sm.getModuleRefDetailId() + "collect")) { // sr collect/ ist collect
                                        stockRate = transObject.optDouble(sm.getModuleRefDetailId() + "collect");
                                    } else if (transObject.has(sm.getModuleRefDetailId())) {
                                        stockRate = transObject.optDouble(sm.getModuleRefDetailId(), 0);
                                    }
                                }
                                
                            }
                            
//                            ValuationMethod valuationmethod=sm.getProduct().getValuationMethod();
//                            if (sm.getProduct().isIsSerialForProduct()) {
//                                int transactiontype = 28;
//                                String serial = "";
//                                if (transType.intValue() == 0 || transType.intValue() == 1 || transType.intValue() == 2 || transType.intValue() == 3 || transType.intValue() == 5 || transType.intValue() == 4) {
//                                    if (transType.intValue() == 0 || transType.intValue() == 1) {
//                                        transactiontype = 28;
//                                    } else if (transType.intValue() == 2 || transType.intValue() == 3 || transType.intValue() == 5 || transType.intValue() == 4) {
//                                        if (transType.intValue() == 2) {
//                                            transactiontype = 31;
//                                        } else if (transType.intValue() == 3 || transType.intValue() == 5) {
//                                            transactiontype = 27;
//                                        } else if (transType.intValue() == 4) {
//                                            transactiontype = 29;
//                                        }
//                                    }
//                                    KwlReturnObject srno = accProductObj.getSerialNoByDocumentidAndSerialNames(detailid, transactiontype, smd.getSerialNames());
//                                    List list2 = srno.getEntityList();
//
//                                    for (Object obj : list2) {
//                                        serial += obj.toString() + ",";
//                                    }
//                                    String[] serialId = serial.split(",");
//                                    stockRate = accProductObj.getValuationPriceForSerialBatches(sm.getProduct().getID(), transType.intValue(), valuationmethod, quantity, stockRate, baseUOMRate, false, pvbList, true, serialId);
//                                } else if (transType.intValue() == 7 || transType.intValue() == 8) {
//                                    String serialNames = smd.getSerialNames();
//                                    if (!StringUtil.isNullOrEmpty(serialNames)) {
//                                        String srl[] = serialNames.split(",");
//                                        for (String s : srl) {
//                                            KwlReturnObject storeresult = accountingHandlerDAOobj.getObject(Store.class.getName(), sm.getStore().getId());
//                                            Store str = (Store) storeresult.getEntityList().get(0);
//                                            KwlReturnObject locationresult = accountingHandlerDAOobj.getObject(Location.class.getName(), smd.getLocation().getId());
//                                            Location loc = (Location) locationresult.getEntityList().get(0);
//
//                                            NewProductBatch batchObj = stockDAO.getERPProductBatch(sm.getProduct(), str, loc, smd.getRow(), smd.getRack(), smd.getBin(), smd.getBatchName());
//                                            NewBatchSerial serialObj = stockDAO.getERPBatchSerial(sm.getProduct(), batchObj, s);
//                                            if (serialObj != null) {
//                                                serial += serialObj.getId() + ",";
//                                            }
//                                        }
//                                    }
//                                    String[] serialId = serial.split(",");
//                                    stockRate = accProductObj.getValuationPriceForSerialBatches(sm.getProduct().getID(), transType.intValue(), valuationmethod, quantity, stockRate, baseUOMRate, false, pvbList, true, serialId);
//                                }
//                            }else if(sm.getProduct().isIsBatchForProduct() && !sm.getProduct().isIsSerialForProduct()){
//                                crresult = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, stockRate, currencyid, transactionDate, grSpotRate);
//                                stockRate = (Double) crresult.getEntityList().get(0);
//                                int transactiontype = 28;
//                                String batch = "";
//                                if (transType.intValue() == 0 || transType.intValue() == 1 || transType.intValue() == 2 || transType.intValue() == 3 || transType.intValue() == 5 || transType.intValue() == 4) {
//                                    if (transType.intValue() == 0 || transType.intValue() == 1) {
//                                        transactiontype = 28;
//                                    } else if (transType.intValue() == 2 || transType.intValue() == 3 || transType.intValue() == 5 || transType.intValue() == 4) {
//                                        if (transType.intValue() == 2) {
//                                            transactiontype = 31;
//                                        } else if (transType.intValue() == 3 || transType.intValue() == 5) {
//                                            transactiontype = 27;
//                                        } else if (transType.intValue() == 4) {
//                                            transactiontype = 29;
//                                        }
//                                    }
//                                    KwlReturnObject srno = accProductObj.getBatchesByDocumentidAndBatchNames(detailid, transactiontype,smd.getBatchName());
//                                    List list2 = srno.getEntityList();
//                                    Iterator itr1 = list2.iterator();
//                                    while (itr1.hasNext()) {
//                                        Object[] batchRow = (Object[]) itr1.next();
//                                        batch = (String) batchRow[0];
//                                        double batchQty = (Double) batchRow[1];
//                                        String[] batchId = batch.split(",");
//                                        stockRate = accProductObj.getValuationPriceForSerialBatches(sm.getProduct().getID(), transType.intValue(), valuationmethod, quantity, stockRate, baseUOMRate, false, pvbList, false, batchId);
//                                        total += stockRate * quantity;
//                                    }
//                                    stockRate = total / quantity;
//                                }else if(transType.intValue() == 7 || transType.intValue() == 8){
//                                    KwlReturnObject storeresult = accountingHandlerDAOobj.getObject(Store.class.getName(), sm.getStore().getId());
//                                    Store str = (Store) storeresult.getEntityList().get(0);
//                                    KwlReturnObject locationresult = accountingHandlerDAOobj.getObject(Location.class.getName(), smd.getLocation().getId());
//                                    Location loc = (Location) locationresult.getEntityList().get(0);
//
//                                    NewProductBatch batchObj = stockDAO.getERPProductBatch(sm.getProduct(), str, loc, smd.getRow(), smd.getRack(), smd.getBin(), smd.getBatchName());
//                                    batch = batchObj.getId();
//                                    String[] batchId = batch.split(",");
//                                    stockRate = accProductObj.getValuationPriceForSerialBatches(sm.getProduct().getID(), transType.intValue(), valuationmethod, quantity, stockRate, baseUOMRate, false, pvbList, false, batchId);
//                                    total += total / sm.getQuantity();
//                                }
//                                stockRate = total / quantity;
//                            }else if(valuationmethod == ValuationMethod.FIFO || valuationmethod == ValuationMethod.STANDARD || valuationmethod == ValuationMethod.AVERAGE) {
//                                crresult = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, stockRate, currencyid, transactionDate, grSpotRate);
//                                stockRate = (Double) crresult.getEntityList().get(0);
//                                stockRate = accProductObj.getValuationPrice(sm.getProduct().getID(), transType.intValue(), valuationmethod, quantity, stockRate, baseUOMRate, false, pvbList);
//                            }
//                            if (transType.intValue() != 9) {      //Stock Transfer Case
                                if (sm.getTransactionType() == TransactionType.OUT) {
                                    jObj.put("qtyOut", quantity);
                                    quantity = -quantity;
                                } else {
                                    jObj.put("qtyIn", quantity);
                                }
                                double amount = quantity * stockRate;
                                jObj.put("amount", authHandler.round(amount, companyid));
                                jObj.put("avgCost", authHandler.round(stockRate, companyid));
//                            }
                            jObj.put("stockType", sm.getProduct().getItemReusability() == ItemReusability.REUSABLE ? "R" : "C");
                            Set<NewBatchSerial> batchSerialSet = new HashSet<NewBatchSerial>();
                            if (!StringUtil.isNullOrEmpty(smd.getSerialNames())) {
                                
                                String qaStore = ecf.getInspectionStore();
                                String rpStore = ecf.getRepairStore();
                                Store originalStore = null;
                                if ((sm.getStore().getId().equals(qaStore) || sm.getStore().getId().equals(rpStore)) && sm.getTransactionModule() == TransactionModule.ERP_SALES_RETURN) {
                                    originalStore = stockMovementService.getOriginalStoreFromQAStore(sm.getTransactionNo(), sm.getProduct());
                                }
                                NewProductBatch productBatch = stockDAO.getERPProductBatch(sm.getProduct(), originalStore == null ? sm.getStore() : originalStore, smd.getLocation(), smd.getRow(), smd.getRack(), smd.getBin(), smd.getBatchName());
                                String[] serialArray = smd.getSerialNames().split(",");
                                for (String serialName : serialArray) {
                                    NewBatchSerial batchSerial = stockDAO.getERPBatchSerial(sm.getProduct(), productBatch, serialName);
                                    if (batchSerial != null) {
                                        batchSerialSet.add(batchSerial);
                                    }
                                }
                            }
                            
                            if (sm.getTransactionModule() == TransactionModule.ERP_SALES_RETURN && !batchSerialSet.isEmpty()) {
                                String moduleRefId = sm.getModuleRefId();
                                Map<String, Integer> serialCount = stockMovementService.getTransactionWiseSerialUsedCount(moduleRefId, batchSerialSet);
                                String reusabilityCount = "";
                                for (Map.Entry<String, Integer> entry : serialCount.entrySet()) {
                                    jeresult = accountingHandlerDAOobj.getObject(NewBatchSerial.class.getName(), entry.getKey());
                                    NewBatchSerial serial = (NewBatchSerial) jeresult.getEntityList().get(0);
                                    if (StringUtil.isNullOrEmpty(reusabilityCount)) {
                                        reusabilityCount = serial.getSerialname() + "(" + entry.getValue() + ")";
                                    } else {
                                        reusabilityCount += "," + serial.getSerialname() + "(" + entry.getValue() + ")";
                                    }
                                }
                                jObj.put("reusabilityCount", reusabilityCount);
                            }
                            String recId = "";
                            String recDetailsId = "";
                            String module = "";
                            if (!StringUtil.isNullOrEmpty((String) row[4])) {
                                module = (String) row[4];
                            }
                            if (!StringUtil.isNullOrEmpty((String) row[5])) {
                                recId = (String) row[5];
                            }
                            if (!StringUtil.isNullOrEmpty((String) row[6])) {
                                recDetailsId = (String) row[6];
                            }
                            jObj.put("module", module);
                            jObj.put("detailId", recDetailsId);
                            jObj.put("recId", recId);
                            jObj.put("companyId", companyid);
                            /*
                        put cutom data for each module
                             */
                            putCustomData(jObj);
                            jArray.put(jObj);
                            smset.add(row[0].toString());
                        }
                        recCount++;
                    }
            }
            }
            int reportId=0;
            if (!StringUtil.isNullOrEmpty(request.getParameter("reportId"))) {
                reportId = Integer.parseInt(request.getParameter("reportId"));
            }
            HashMap hashMap=new HashMap();
            hashMap.put("companyId", companyid);
            hashMap.put("reportId", reportId);
            KwlReturnObject customizeReportResult = accountingHandlerDAOobj.getCustomizeReportViewMappingField(hashMap);
            List<CustomizeReportMapping> customizeReportList = customizeReportResult.getEntityList();
            List arrayList = new ArrayList();
            for (CustomizeReportMapping customizeReportMapping : customizeReportList) {
                String column = "Custom_" + customizeReportMapping.getDataIndex();
                if (!arrayList.contains(customizeReportMapping.getDataIndex())) {
                    jobjTemp = new JSONObject();
                    jobjTemp.put("name", column);
                    jarrRecords.put(jobjTemp);
                    jobjTemp = new JSONObject();
                    jobjTemp.put("header", customizeReportMapping.getDataHeader());
                    jobjTemp.put("dataIndex", column);
                    jobjTemp.put("width", 150);
                    jobjTemp.put("pdfwidth", 150);
                    jobjTemp.put("custom", "true");
                    jarrColumns.put(jobjTemp);
                    arrayList.add(customizeReportMapping.getDataIndex());
                }
            }
            
            commData.put("success", true);
            commData.put("coldata", jArray);
            commData.put("columns", jarrColumns);
            jMeta.put("totalProperty", "totalCount");
            jMeta.put("root", "coldata");
            commData.put("totalCount", totalCount);
            jMeta.put("fields", jarrRecords);
            commData.put("metaData", jMeta);
            jobj.put("valid", true);
            if (isExport) {
                jobj.put("data", jArray);
                exportDaoObj.processRequest(request, response, jobj);
            } else {
                jobj.put("data", commData);
            }
            issuccess = true;
            msg = "Inter Store Stock Transfer have been fetched successfully";

            txnManager.commit(status);

        } catch (SessionExpiredException ex) {
            txnManager.rollback(status);
            msg = ex.getMessage();
            Logger.getLogger(accProductControllerCMN.class.getName()).log(Level.SEVERE, msg, ex);
        } catch (InventoryException ex) {
            txnManager.rollback(status);
            msg = ex.getMessage();
        } catch (Exception ex) {
            txnManager.rollback(status);
            msg = ex.getMessage();
            Logger.getLogger(accProductControllerCMN.class.getName()).log(Level.SEVERE, msg, ex);
        } finally {
//            try {
//                if (StringUtil.isNullOrEmpty(start) == false && StringUtil.isNullOrEmpty(limit) == false) {
//                    int strt = Integer.parseInt(start);
//                    int lmt = Integer.parseInt(limit);
//                    jArray = StringUtil.getPagedJSON(jArray, strt, lmt);
//                } else {
//                }
//            } catch (JSONException ex) {
//                Logger.getLogger(accProductControllerCMN.class.getName()).log(Level.SEVERE, msg, ex);
//            }
                }
        return new ModelAndView("jsonView_ex", "model", jobj.toString());

    }

    public JSONArray getSalesPurchaseJson(HttpServletRequest request, List list, Map<String, Object[]> companyMaxDateProductPriceList) throws JSONException, ServiceException, ParseException, SessionExpiredException {
        Iterator itr = list.iterator();
        JSONArray jArr = new JSONArray();
        String pid = "";
        String productidLast = "";
        double balance = 0.0, avgcost = 0, onhand = 0.0, lifo = 0, fifo = 0, valuation = 0;
        int inIncludeOpening = 0;
        int recCount = 0, lsize = 0;
        int totalArraycnt = 0;
        double[][] priceValueStack = new double[1000000][2];
        double productavarageprice = 0;
        double productavarageQty = 0;
        Date StartDate = authHandler.getDateOnlyFormat(request).parse(request.getParameter("startdate"));
        Date EndDate = authHandler.getDateOnlyFormat(request).parse(request.getParameter("enddate"));
        boolean isExport=request.getParameter("isExport")==null?false:Boolean.parseBoolean(request.getParameter("isExport"));
        boolean isprovalReport = false, isActivateLandedInvAmt = Boolean.parseBoolean(request.getParameter("isactivatelandedinvamt"));

        while (itr.hasNext()) {
            try {
                String companyid = sessionHandlerImpl.getCompanyid(request);
                DateFormat df = authHandler.getDateOnlyFormat(request);
                KwlReturnObject crresult;
                HashMap<String, Object> requestParams = AccountingManager.getGlobalParams(request);
                String gcurrencyid = sessionHandlerImpl.getCurrencyID(request);
                requestParams.put("companyid", companyid);
                requestParams.put("gcurrencyid", gcurrencyid);

                Object[] row = (Object[]) itr.next();
                BigInteger transType = (BigInteger) row[0];
                String productid = (String) row[1];
                productidLast = (String) row[1];
                pid = (String) row[2];
                String productDesc = (String) row[3];
                Date transactionDate = (Date) row[4];
                String transactionNumber = (String) row[5];
                String personCode = "";
                String personName = "";
                if (!StringUtil.isNullOrEmpty((String) row[6])) {
                    personCode = (String) row[6];
                }
                if (!StringUtil.isNullOrEmpty((String) row[7])) {
                    personName = (String) row[7];
                }

                String personid = (String) row[8];
                double quantity = (Double) row[9];
                double stockRate = row[10] != null ? (Double) row[10] : 0.0;
                String currencyid = "";
                String uomid = "";
                double amount = 0.0;
                KwlReturnObject currencyobj = null;
                KwlReturnObject uomobj = null;
                KWLCurrency currency = null;
                UnitOfMeasure unitofmeasure = null;
                String uomName = "";
                if (!StringUtil.isNullOrEmpty((String) row[13])) {
                    currencyid = (String) row[13];
                    currencyobj = accountingHandlerDAOobj.getObject(KWLCurrency.class.getName(), currencyid);
                    currency = (KWLCurrency) currencyobj.getEntityList().get(0);
                } else {
                    currencyobj = accountingHandlerDAOobj.getObject(KWLCurrency.class.getName(), sessionHandlerImpl.getCurrencyID(request));
                    currency = (KWLCurrency) currencyobj.getEntityList().get(0);
                }
                if (!StringUtil.isNullOrEmpty((String) row[18])) {
                    uomid = (String) row[18];
                    uomobj = accountingHandlerDAOobj.getObject(UnitOfMeasure.class.getName(), uomid);
                    if (uomobj != null) {
                        unitofmeasure = (UnitOfMeasure) uomobj.getEntityList().get(0);
                        uomName = unitofmeasure.getNameEmptyforNA();
                    }
                }

                amount = stockRate * quantity;
                JSONObject obj = new JSONObject();
                if (transType.intValue() != -1) {
                    obj.put("pid", pid);
                    obj.put("productDesc", productDesc);
                    if (transType.intValue() != 6) {
                        obj.put("transactionDate", df.format(transactionDate));
                    }
                    obj.put("transactionNumber", transactionNumber);
                    obj.put("personCode", personCode);
                    obj.put("personName", personName);
                    if (isExport) {
                        if (transType.intValue() == 0 || transType.intValue() == 1 || transType.intValue() == 4 || transType.intValue() == 6 || transType.intValue() == -1 || transType.intValue() == 7) {
                            obj.put("receivedqty", authHandler.formattedQuantity(quantity, companyid) + " " + uomName + "");
                        } else {
                            obj.put("deliveredqty", authHandler.formattedQuantity(quantity, companyid) + " " + uomName + "");
                        }
                    } else {
                        if (transType.intValue() == 0 || transType.intValue() == 1 || transType.intValue() == 4 || transType.intValue() == 6 || transType.intValue() == -1 || transType.intValue() == 7) {
                            obj.put("receivedqty",authHandler.formattedQuantity(quantity,companyid));   
                        } else {
                            obj.put("deliveredqty",authHandler.formattedQuantity(quantity,companyid));
                        }
                    }
                    obj.put("stockRate", authHandler.formattingDecimalForUnitPrice(stockRate,companyid));
                    obj.put("value",authHandler.formattedAmount(amount,companyid));
                    obj.put("currencysymbol", currency != null ? currency.getSymbol() : "");
                    obj.put("currencycode", currency != null ? currency.getSymbol() : "");
                    obj.put("uomName", uomName);
                    jArr.put(obj);
                }

            } catch (SessionExpiredException ex) {
                Logger.getLogger(accProductController.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return jArr;
    }

    List<FinanceDetails> getCompanyHeaderDetailsJasper(HttpServletRequest request) {

        List<FinanceDetails> retMap = new ArrayList<>();
        FinanceDetails financeDetails = new FinanceDetails();
        List<FinanceDetails> financeDetailsList = new ArrayList<>();
        try {
            String companyid = sessionHandlerImpl.getCompanyid(request);
            KwlReturnObject cmpresult = accountingHandlerDAOobj.getObject(Company.class.getName(), companyid);
            Company company = (Company) cmpresult.getEntityList().get(0);
            financeDetails.setName(company.getCompanyName());
            financeDetails.setEmail(company.getEmailID() != null ? company.getEmailID() : "");
            financeDetails.setFax(company.getFaxNumber() != null ? company.getFaxNumber() : "");
            financeDetails.setPhone(company.getPhoneNumber() != null ? company.getPhoneNumber() : "");
            financeDetails.setCurrencyinword(company.getCurrency().getName() != null ? company.getCurrency().getName() : "");
            DateFormat df = authHandler.getUserDateFormatterWithoutTimeZone(request);   //ERP-20998     new SimpleDateFormat("dd/MM/yyyy");
            String endDate = df.format(authHandler.getDateOnlyFormat(request).parse(request.getParameter("enddate")));
            Calendar c = Calendar.getInstance();
            c.setTime(df.parse(endDate)); // number of days to substract

            String reportStartDate = df.format(authHandler.getDateOnlyFormat(request).parse(request.getParameter("startdateReport")));
            String reportEndDate = df.format(authHandler.getDateOnlyFormat(request).parse(request.getParameter("enddateReport")));
            String date = "From Date: " + reportStartDate + ",To Date: " + reportEndDate;
            financeDetails.setDateRange(date);
            KwlReturnObject resultCPF = accountingHandlerDAOobj.getObject(CompanyAccountPreferences.class.getName(), sessionHandlerImpl.getCompanyid(request));
            CompanyAccountPreferences companyAccountPreferences = (CompanyAccountPreferences) resultCPF.getEntityList().get(0);
            String fiscalstart = df.format(companyAccountPreferences.getFinancialYearFrom());
            Calendar c1 = Calendar.getInstance();

            c1.setTime(df.parse(fiscalstart));

            c1.add(Calendar.YEAR, 1); // number of years to add
            String fiscalend = df.format(c.getTime());
            String accPeriod = "Accounting Period: " + fiscalstart + " - " + fiscalend;
            financeDetails.setAccountigperiod(accPeriod);
            financeDetailsList.add(financeDetails);

        } catch (ServiceException | SessionExpiredException | ParseException ex) {
            Logger.getLogger(accProductControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
        }
        return financeDetailsList;
    }
        /**
     * 
     * @param jSONObject  = Put custom data for each record
     * @throws ServiceException
     * @throws JSONException 
     */
    public void putCustomData(JSONObject jSONObject) throws ServiceException, JSONException {
        String module = jSONObject.optString("module");
        if (!StringUtil.isNullOrEmpty(module)) {
            if (module.equalsIgnoreCase("Goods Receipt")) {
                AccProductService.putGoodsReeiptCustomData(jSONObject);
            } else if (module.equalsIgnoreCase("Delivery Order")) {
                AccProductService.putDeliveryOrderCustomData(jSONObject);
            } else if (module.equalsIgnoreCase("Purchase Return")) {
                AccProductService.putPurchaseReturnCustomData(jSONObject);
            } else if (module.equalsIgnoreCase("Sales Return")) {
                AccProductService.putSalesReturnCustomData(jSONObject);
            } else if (module.equalsIgnoreCase("Product")) {
                AccProductService.putProductCustomData(jSONObject);
            } else if (module.equalsIgnoreCase("Stock Adjustment")) {
                AccProductService.putStockAdjustmentCustomData(jSONObject);
            } else if (module.equalsIgnoreCase("Inter Store Transfer")) {
                AccProductService.putInterStoreTransferCustomData(jSONObject);
            }
        }
    }
    
    public ModelAndView updateProductPriceRulewise(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        String msg = "";
        boolean issuccess = false;

        DefaultTransactionDefinition def = new DefaultTransactionDefinition();
        def.setName("Product_Tx");
        def.setPropagationBehavior(TransactionDefinition.PROPAGATION_REQUIRED);

        TransactionStatus status = txnManager.getTransaction(def);
        try {
            boolean dateexist = false;
            dateexist = updateProductPriceRulewise(request);
            jobj.put("dateexist", dateexist);
            txnManager.commit(status);
            issuccess = true;
            msg = messageSource.getMessage("acc.prod.priceapp", null, RequestContextUtils.getLocale(request))+"<br>("+messageSource.getMessage("acc.master.UpdatePriceRule.priceCannotUpdateNote", null, RequestContextUtils.getLocale(request))+")"; // "New Price has been applied successfully";
        } catch (SessionExpiredException ex) {
            txnManager.rollback(status);
            msg = ex.getMessage();
            Logger.getLogger(accProductController.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            txnManager.rollback(status);
            msg = "" + ex.getMessage();
            Logger.getLogger(accProductController.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                jobj.put("success", issuccess);
                jobj.put("msg", msg);
            } catch (JSONException ex) {
                Logger.getLogger(accProductController.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return new ModelAndView("jsonView", "model", jobj.toString());
    }
    
    public boolean updateProductPriceRulewise(HttpServletRequest request) throws ServiceException, SessionExpiredException {
        KwlReturnObject priceresult;
        try {
            double lowerlimit = 0;
            double upperlimit = 0;
            if (!request.getParameter("lowerlimit").equalsIgnoreCase("-") && !request.getParameter("upperlimit").equalsIgnoreCase("-")) {
                lowerlimit = Double.parseDouble(request.getParameter("lowerlimit"));
                upperlimit = Double.parseDouble(request.getParameter("upperlimit"));
            }
            int basedOnId = 0;
            if (!request.getParameter("basedOnId").equalsIgnoreCase("-")) {
                basedOnId = Integer.parseInt(request.getParameter("basedOnId"));
            }
            int percentagetype = Integer.parseInt(request.getParameter("percentagetype"));
            double amount = Double.parseDouble(request.getParameter("amount"));
            int increamentordecreamentType = Integer.parseInt(request.getParameter("increamentordecreamentType"));
            int priceType = Integer.parseInt(request.getParameter("priceType"));
            int ruleType = Integer.parseInt(request.getParameter("ruleType"));
            Double newprice = 0.0;
            Double calulatedPercentAmount = 0.0;
            String categoryid = request.getParameter("categoryid");
            String currencyid = request.getParameter("currencyid");
            String categoryIds = request.getParameter("categoryIds");
            Date correctDate = authHandler.getDateOnlyFormat(request).parse(request.getParameter("currentdate"));
            String companyid = sessionHandlerImpl.getCompanyid(request);
            KwlReturnObject result = accProductObj.getProductByPrice(lowerlimit, upperlimit, companyid, categoryid, priceType, ruleType, categoryIds, currencyid);
            List<Object[]> list = result.getEntityList();
            for (Object[] row : list) {
                KwlReturnObject res = accountingHandlerDAOobj.getObject(Product.class.getName(), (String) row[4]);
                Product product = (Product) res.getEntityList().get(0);
                
                // If 'Based On' is 'Average Cost' then rule is applicable only for product whose Valuation Method is 'Moving Average'
                if (basedOnId == 2 && product.getValuationMethod() != ValuationMethod.AVERAGE) {
                    continue;
                }
                
                HashMap<String, Object> requestParams = AccountingManager.getGlobalParams(request);
                requestParams.put("productid", row[4]);
                requestParams.put("companyid", companyid);
                requestParams.put("carryin", String.valueOf(row[2]).equalsIgnoreCase("F") ? false : true);
                requestParams.put("applydate", correctDate);
                requestParams.put("affecteduser", (String) row[6]);
                requestParams.put("currencyid", (String) row[7]);
                requestParams.put("uomid", product.getUnitOfMeasure().getID());

                KwlReturnObject CheckPriceForDateRes = accProductObj.getPriceListEntry(requestParams);
                List CheckPriceForDatelist = CheckPriceForDateRes.getEntityList();
                /*
                 *  product price can not be updated to -ve value refer  ERP-33814
                 *    
                 */
                boolean dontAllowNegativePriceToBeSet=false;
               
                HashMap<String, Object> priceMap = new HashMap<>();
                Double ProductAmount = 0.0;
                if (basedOnId == 2) { // Average Cost
                    ProductAmount = accReportsService.getAvarageValuation(request, product.getAvailableQuantity(), product.getProducttype().getID(), ProductAmount, product, null, null);
                } else if (basedOnId == 3) { // Most Recent Cost
                    KwlReturnObject recentPurchasePrice = accProductObj.getProductPrice(product.getID(), true, null, "", currencyid);
                    if (recentPurchasePrice.getEntityList().get(0) != null) {
                        ProductAmount = (Double) recentPurchasePrice.getEntityList().get(0);
                    }
                } else if (basedOnId == 4) { // Initial Purchase Price
                    KwlReturnObject initialPurchasePrice = accProductObj.getInitialPrice(product.getID(), true);
                    if (initialPurchasePrice.getEntityList().get(0) != null) {
                        ProductAmount = (Double) initialPurchasePrice.getEntityList().get(0);
                    }
                } else { // default price as per old rule
                    ProductAmount = (Double) row[3];
                }

                if (percentagetype == 1) {
                    calulatedPercentAmount = (ProductAmount * amount) / 100;
                } else {
                    calulatedPercentAmount = Double.parseDouble(String.valueOf(amount));
                }
                if (increamentordecreamentType == 1) {
                    newprice = ProductAmount + calulatedPercentAmount;
                } else {
              
                    if ((ProductAmount - calulatedPercentAmount) >= 0) {
                        newprice = ProductAmount - calulatedPercentAmount;
                    } else {
                        /* 
                        * product price can not be update to -ve value  refer ERP-33814
                        * 
                        */
                        newprice = ProductAmount;
                        dontAllowNegativePriceToBeSet=true;
                    }
                }
                priceMap.put("price", newprice);
                if (dontAllowNegativePriceToBeSet) {
                    /*
                     * product price can not be update to -ve value refer
                     * ERP-33814
                     *
                     */
                    String msg1 = messageSource.getMessage("acc.master.UpdatePriceRule.changedPriceForProduct", null, RequestContextUtils.getLocale(request));
                    String msg2 = messageSource.getMessage("acc.master.UpdatePriceRule.priceCannotUpdate", null, RequestContextUtils.getLocale(request));
                    String msg3 = messageSource.getMessage("acc.field.User", null, RequestContextUtils.getLocale(request));
                    
                    String pDescription = StringUtil.isNullOrEmpty(product.getDescription()) ? "" : " (" + product.getDescription() + ")";
                    auditTrailObj.insertAuditLog(AuditAction.PRICE_CHANGED, msg3 + sessionHandlerImpl.getUserFullName(request) +" " + msg1+" " + product.getName() + pDescription
                          +" "  + msg2, request, product.getID());  
                } else {
                    if (CheckPriceForDatelist.size() <= 0) {
                        priceMap.put("productid", row[4]);
                        priceMap.put("companyid", companyid);
                        priceMap.put("carryin", String.valueOf(row[2]).equalsIgnoreCase("F") ? false : true);
                        priceMap.put("applydate", correctDate);
                        priceMap.put("affecteduser", (String) row[6]);
                        priceMap.put("currencyid", (String) row[7]);
                        priceMap.put("uomid", product.getUnitOfMeasure().getID());
                        priceresult = accProductObj.addPriceList(priceMap);
                    } else {
                        PriceList price = (PriceList) CheckPriceForDatelist.get(0);
                        priceMap.put("priceid", price.getID());
                        priceresult = accProductObj.updatePriceList(priceMap);
                    }

                    PriceList pl = (PriceList) priceresult.getEntityList().get(0);
                    String pDescription = StringUtil.isNullOrEmpty(pl.getProduct().getDescription()) ? "" : " (" + pl.getProduct().getDescription() + ")";
                    String msg1 = messageSource.getMessage("acc.master.UpdatePriceRule.changedPriceForProduct", null, RequestContextUtils.getLocale(request));
                    String msg3 = messageSource.getMessage("acc.field.User", null, RequestContextUtils.getLocale(request));
                    String msg4 = messageSource.getMessage("acc.common.advbTO", null, RequestContextUtils.getLocale(request));
                    
                    auditTrailObj.insertAuditLog(AuditAction.PRICE_CHANGED, msg3 + sessionHandlerImpl.getUserFullName(request) +" "+ msg1
                           +" " + pl.getProduct().getName() + pDescription +" " + msg4 + pl.getPrice() + " ", request, pl.getID());  //+"currencyChange"
                }
              }

        } catch (Exception ex) {
            Logger.getLogger(accProductController.class.getName()).log(Level.SEVERE, null, ex);
            throw ServiceException.FAILURE("updateProductPriceRulewise : " + ex.getMessage(), ex);
        }
        return false;
    }
    /**
     *
     * @param request
     * @param response
     * @return = Model and View for Show Products transaction details
     */
    public ModelAndView getproductTransactionDetailReport(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        boolean issuccess = false;
        String msg = "";
        try {
            Map<String, Object> requestMap = new HashMap<>();
            String productId = request.getParameter("productId");
            String type = request.getParameter("type");
            String companyId = sessionHandlerImpl.getCompanyid(request);
            if (!StringUtil.isNullOrEmpty(productId) && !StringUtil.isNullOrEmpty(type)) {
                requestMap.put("productId", productId);
                requestMap.put("companyId", companyId);
                requestMap.put("type", type);
                requestMap.put(Constants.df, authHandler.getDateOnlyFormat(request));
                requestMap.put("start", request.getParameter("start"));
                requestMap.put("limit", request.getParameter("limit"));
                requestMap.put("startdate", request.getParameter("startdate"));
                requestMap.put("enddate", request.getParameter("enddate"));
                requestMap.put("locale", RequestContextUtils.getLocale(request));
                jobj = AccProductService.getProductSummary(requestMap);
            }
            issuccess = true;
        } catch (Exception ex) {
            msg = "" + ex.getMessage();
            Logger.getLogger(accProductControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                jobj.put("success", issuccess);
                jobj.put("msg", msg);
            } catch (JSONException ex) {
                Logger.getLogger(accProductControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return new ModelAndView("jsonView_ex", "model", jobj.toString());
    }

    public ModelAndView ExportProductSummary(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        JSONObject jobj1 = new JSONObject();
        JSONArray DataJArr = new JSONArray();
        List resultList = new ArrayList();
        boolean isSummaryReport = false;
        String view = "jsonView_ex";
        String msg = "";
        try {
            Map<String, Object> requestMap = new HashMap<>();
            String productId = request.getParameter("productId");
            String type = request.getParameter("type");
            String companyId = sessionHandlerImpl.getCompanyid(request);
            if (!StringUtil.isNullOrEmpty(productId) && !StringUtil.isNullOrEmpty(type)) {
                requestMap.put("productId", productId);
                requestMap.put("companyId", companyId);
                requestMap.put("type", type);
                requestMap.put(Constants.df, authHandler.getDateOnlyFormat(request));
                requestMap.put("isExport", true);
                requestMap.put("startdate", request.getParameter("startdate"));
                requestMap.put("enddate", request.getParameter("enddate"));
                jobj1 = AccProductService.getProductSummary(requestMap);
            }
            DataJArr = (JSONArray) jobj1.optJSONArray("data");
            request.setAttribute("isExport", true);
            jobj.put("data", DataJArr);
            jobj.put("count", DataJArr.length());
            String fileType = request.getParameter("filetype");
            if (StringUtil.equal(fileType, "print")) {
                String GenerateDate = authHandler.getDateFormatter(request).format(new Date());
                jobj.put("GenerateDate", GenerateDate);
                view = "jsonView-empty";
            }
            exportDaoObj.processRequest(request, response, jobj);
        } catch (Exception ex) {
            msg = "" + ex.getMessage();
            Logger.getLogger(accProductControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                jobj.put("msg", msg);
            } catch (JSONException ex) {
                Logger.getLogger(accProductControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return new ModelAndView("jsonView", "model", jobj.toString());
    }
   
    public ModelAndView getPriceListBandReport(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        boolean issuccess = false;
        String msg = "";
        try {
            /*Code to prepare request map to fetch price list band report*/
            HashMap<String, Object> requestParams = AccountingManager.getGlobalParams(request);
            requestParams.put(Constants.ss, request.getParameter(Constants.ss));
            requestParams.put(Constants.productid, request.getParameter(Constants.productid));
            requestParams.put(Constants.start, request.getParameter(Constants.start));
            requestParams.put(Constants.limit, request.getParameter(Constants.limit));
            requestParams.put(Constants.currencyKey, request.getParameter(Constants.currencyKey));
            requestParams.put("priceType", request.getParameter("priceType"));
            requestParams.put("locale", RequestContextUtils.getLocale(request));
            
            /*Business login to fetch data*/
            jobj = accReportsService.getPriceListBandReport(requestParams, false);
            issuccess = true;
        } catch (Exception ex) {
            msg = "" + ex.getMessage();
            Logger.getLogger(accProductControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                jobj.put("success", issuccess);
                jobj.put("msg", msg);
            } catch (JSONException ex) {
                Logger.getLogger(accProductControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return new ModelAndView("jsonView_ex", "model", jobj.toString());
    }

    public ModelAndView exportPriceListBandReport(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        String view = "jsonView_ex";
        try {
            /*Code to prepare request map to fetch price list band report*/
            HashMap<String, Object> requestParams = AccountingManager.getGlobalParams(request);
            requestParams.put(Constants.ss, request.getParameter(Constants.ss));
            requestParams.put(Constants.productid, request.getParameter(Constants.productid));
//            requestParams.put(Constants.start, request.getParameter(Constants.start));
//            requestParams.put(Constants.limit, request.getParameter(Constants.limit));
            requestParams.put(Constants.currencyKey, request.getParameter(Constants.currencyKey));
            requestParams.put("priceType", request.getParameter("priceType"));
            
            /*Business login to fetch data*/
            jobj = accReportsService.getPriceListBandReport(requestParams, true);

            String fileType = request.getParameter("filetype");
            if (StringUtil.equal(fileType, "print")) {
                String GenerateDate = authHandler.getDateFormatter(request).format(new Date());
                jobj.put("GenerateDate", GenerateDate);
                view = "jsonView-empty";
            }
            exportDaoObj.processRequest(request, response, jobj);
            jobj.put("success", true);
        } catch (Exception ex) {
            Logger.getLogger(accProductControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
        }
        return new ModelAndView(view, "model", jobj.toString());
    }
    
    public ModelAndView getProductRecipes(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        boolean issuccess = false;
        String msg = "";
        try {
            String productid = request.getParameter("productid");
            String companyid = sessionHandlerImpl.getCompanyid(request);
            HashMap<String,Object> requestMap=new HashMap<>();
            requestMap.put("currencyid", sessionHandlerImpl.getCurrencyID(request));
            requestMap.put("productid", productid);
            requestMap.put("companyid", companyid);
            requestMap.put("bomid", request.getParameter("bomid"));
            jobj = AccProductService.getProductRecipes(requestMap);
            issuccess = true;
        } catch (Exception ex) {
            msg = "" + ex.getMessage();
            Logger.getLogger(accProductControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                jobj.put("success", issuccess);
                jobj.put("msg", msg);
            } catch (JSONException ex) {
                Logger.getLogger(accProductControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return new ModelAndView("jsonView", "model", jobj.toString());
    }
    
    public ModelAndView getBOMforCombo(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        boolean issuccess = false;
        try {
            JSONArray jSONArray = new JSONArray();
            String productid = "";
            productid = request.getParameter("productid");
            Map<String, Object> hashMap = new HashMap<String, Object>();
            hashMap.put("companyId", sessionHandlerImpl.getCompanyid(request));
            hashMap.put("productid", productid);
            jSONArray = AccProductService.getBOMCombo(hashMap);
            jobj.put("data", jSONArray);
            jobj.put("count", jSONArray.length());
            issuccess = true;
        } catch(Exception ex) {
            Logger.getLogger(accProductControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                jobj.put("success", issuccess);
                jobj.put("msg", "");
            } catch (JSONException ex) {
                Logger.getLogger(accProductControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return new ModelAndView("jsonView", "model", jobj.toString());
    }
    
        /*Saves Product terms mapping at the time of  Product creation*/
     public void saveProductTerms(HttpServletRequest request,String productid) throws JSONException, ParseException, SessionExpiredException, ServiceException, UnsupportedEncodingException {
        try {
            KwlReturnObject kmsg = null;
            String companyId = sessionHandlerImpl.getCompanyid(request);
            KwlReturnObject capresult = accountingHandlerDAOobj.getObject(CompanyAccountPreferences.class.getName(), companyId);
            CompanyAccountPreferences preferences = (CompanyAccountPreferences) capresult.getEntityList().get(0);
            DateFormat df = authHandler.getDateOnlyFormat(request);
            String creator = sessionHandlerImpl.getUserid(request);
            JSONArray productTermMapJsonArr = new JSONArray();
            Product product = null;
            boolean isDefault = false;
            

            if (!StringUtil.isNullOrEmpty(request.getParameter("productTermsDataPurchase"))) {
                productTermMapJsonArr = new JSONArray(request.getParameter("productTermsDataPurchase").toString());

            }else{
                if (!StringUtil.isNullOrEmpty(request.getParameter("dataProTermsExcisePurchase"))) {
                    JSONArray dataProTermsExcisePurchase = new JSONArray(request.getParameter("dataProTermsExcisePurchase").toString());
                    if(dataProTermsExcisePurchase.length()>0){
                        for(int p=0;p<dataProTermsExcisePurchase.length();p++){
                            productTermMapJsonArr.put(dataProTermsExcisePurchase.getJSONObject(p));
                        }
                    }
                }
                if (!StringUtil.isNullOrEmpty(request.getParameter("dataProTermsServicePurchase"))) {
                    JSONArray dataProTermsServicePurchase = new JSONArray(request.getParameter("dataProTermsServicePurchase").toString());
                    if(dataProTermsServicePurchase.length()>0){
                        for(int p=0;p<dataProTermsServicePurchase.length();p++){
                            productTermMapJsonArr.put(dataProTermsServicePurchase.getJSONObject(p));
                        }
                    }
                }
                if (!StringUtil.isNullOrEmpty(request.getParameter("dataProTermsCSTPurchase"))) {
                    JSONArray dataProTermsCSTPurchase = new JSONArray(request.getParameter("dataProTermsCSTPurchase").toString());
                    if(dataProTermsCSTPurchase.length()>0){
                       for(int p=0;p<dataProTermsCSTPurchase.length();p++){
                            productTermMapJsonArr.put(dataProTermsCSTPurchase.getJSONObject(p));
                        }
                    }
                }
                if (!StringUtil.isNullOrEmpty(request.getParameter("dataProTermsVATPurchase"))) {
                    JSONArray dataProTermsVATPurchase = new JSONArray(request.getParameter("dataProTermsVATPurchase").toString());
                    if(dataProTermsVATPurchase.length()>0){
                      for(int p=0;p<dataProTermsVATPurchase.length();p++){
                            productTermMapJsonArr.put(dataProTermsVATPurchase.getJSONObject(p));
                        }
                    }
                }
                if (!StringUtil.isNullOrEmpty(request.getParameter("dataProTermsOtherPurchase"))) {
                    JSONArray dataProTermsOtherPurchase = new JSONArray(request.getParameter("dataProTermsOtherPurchase").toString());
                    if(dataProTermsOtherPurchase.length()>0){
                       for(int p=0;p<dataProTermsOtherPurchase.length();p++){
                            productTermMapJsonArr.put(dataProTermsOtherPurchase.getJSONObject(p));
                        }
                    }
                }
            }    
                if (!StringUtil.isNullOrEmpty(productid)) {
                    KwlReturnObject prodresult = accProductObj.getObject(Product.class.getName(), productid);
                    product = (Product) prodresult.getEntityList().get(0);
                }
            User userObj=null;
            if (!StringUtil.isNullOrEmpty(creator)) {
                KwlReturnObject prodresult = accProductObj.getObject(User.class.getName(), creator);
                userObj = (User) prodresult.getEntityList().get(0);
            }
             Date dd=authHandler.getDateOnlyFormat().parse(request.getParameter("asOfDate"));
            for (int i = 0; i < productTermMapJsonArr.length(); i++) {
                JSONObject jsonObj = productTermMapJsonArr.getJSONObject(i);
                HashMap<String, Object> productTermMap = new HashMap<String, Object>();
                productTermMap.put("product", product);
                
                // If Clone, then dont copy producttermmapid.
                if(jsonObj.has("producttermmapid") && !StringUtil.isNullOrEmpty(jsonObj.getString("producttermmapid")) && StringUtil.isNullOrEmpty(request.getParameter("cloneId"))){// Product term map edit case for Purchase terms
                    productTermMap.put("id", jsonObj.getString("producttermmapid"));
                }
               
                productTermMap.put("createdOn",dd);
                Account accountObj=null;
                String termAccount=jsonObj.getString("glaccount");
                if (!StringUtil.isNullOrEmpty(termAccount)) {
                    KwlReturnObject prodresult = accProductObj.getObject(Account.class.getName(), termAccount);
                    accountObj = (Account) prodresult.getEntityList().get(0);
                }
                productTermMap.put("account", accountObj);
                productTermMap.put("creator", userObj);
                String term = jsonObj.getString("termid");
                LineLevelTerms termObj = null;
                if (!StringUtil.isNullOrEmpty(term)) {
                    KwlReturnObject prodresult = accProductObj.getObject(LineLevelTerms.class.getName(), term);
                    termObj = (LineLevelTerms) prodresult.getEntityList().get(0);
                }
                double percentage = jsonObj.getDouble("taxvalue");
                isDefault = Boolean.parseBoolean(jsonObj.optString("isDefault","false"));
                double purchaseValueOrSaleValue = !StringUtil.isNullOrEmpty(jsonObj.getString("purchasevalueorsalevalue")) ? jsonObj.getDouble("purchasevalueorsalevalue") : 0.0;
                double deductionOrAbatementPercent = !StringUtil.isNullOrEmpty(jsonObj.getString("deductionorabatementpercent")) ? jsonObj.getDouble("deductionorabatementpercent") : 0.0;
                productTermMap.put("term", termObj);
                productTermMap.put("percentage", percentage);
                productTermMap.put("isDefault", isDefault);
                productTermMap.put("purchasevalueorsalevalue", purchaseValueOrSaleValue);
                productTermMap.put("deductionorabatementpercent", deductionOrAbatementPercent);
                if(jsonObj.has("formType") && !StringUtil.isNullOrEmpty(jsonObj.getString("formType"))){
                    productTermMap.put("formType", jsonObj.getString("formType"));
                }
                if (jsonObj.has("taxtype") && !StringUtil.isNullOrEmpty(jsonObj.getString("taxtype"))) {
                    productTermMap.put("taxtype", jsonObj.getInt("taxtype"));
                    if (jsonObj.has("taxvalue") && !StringUtil.isNullOrEmpty(jsonObj.getString("taxvalue"))) {
                        if(jsonObj.getInt("taxtype")==0){ // If Flat
                            productTermMap.put("termamount", jsonObj.getDouble("taxvalue"));
                        } else { // Else Percentage
                            productTermMap.put("percentage", jsonObj.getDouble("taxvalue"));
                        }
                    }
                }
                
                kmsg = accProductModuleService.saveProductTerms(productTermMap);
            }
            productTermMapJsonArr = new JSONArray();
            if (!StringUtil.isNullOrEmpty(request.getParameter("productTermsAdditionalDataPurchase"))) {
                productTermMapJsonArr = new JSONArray(request.getParameter("productTermsAdditionalDataPurchase").toString());
            }
            for (int i = 0; i < productTermMapJsonArr.length(); i++) {
                JSONObject jsonObj = productTermMapJsonArr.getJSONObject(i);
                HashMap<String, Object> productTermMap = new HashMap<String, Object>();
                productTermMap.put("product", product);
                
                // If Clone, then dont copy producttermmapid.
                if(jsonObj.has("producttermmapid") && !StringUtil.isNullOrEmpty(jsonObj.getString("producttermmapid")) && StringUtil.isNullOrEmpty(request.getParameter("cloneId"))){// Product term map edit case for Sales terms
                    productTermMap.put("id", jsonObj.getString("producttermmapid"));
                }
                
                productTermMap.put("createdOn",dd);
                Account accountObj=null;
                String termAccount=jsonObj.getString("glaccount");
                if (!StringUtil.isNullOrEmpty(termAccount)) {
                    KwlReturnObject prodresult = accProductObj.getObject(Account.class.getName(), termAccount);
                    accountObj = (Account) prodresult.getEntityList().get(0);
                }
                productTermMap.put("account", accountObj);
                productTermMap.put("creator", userObj);
                String term = jsonObj.getString("termid");
                LineLevelTerms termObj = null;
                if (!StringUtil.isNullOrEmpty(term)) {
                    KwlReturnObject prodresult = accProductObj.getObject(LineLevelTerms.class.getName(), term);
                    termObj = (LineLevelTerms) prodresult.getEntityList().get(0);
                }
                isDefault = Boolean.parseBoolean(jsonObj.optString("isDefault","false"));
                double percentage = jsonObj.getDouble("taxvalue");
                double purchaseValueOrSaleValue = !StringUtil.isNullOrEmpty(jsonObj.getString("purchasevalueorsalevalue")) ? jsonObj.getDouble("purchasevalueorsalevalue") : 0.0;
                double deductionOrAbatementPercent = !StringUtil.isNullOrEmpty(jsonObj.getString("deductionorabatementpercent")) ? jsonObj.getDouble("deductionorabatementpercent") : 0.0;
                productTermMap.put("term", termObj);
                productTermMap.put("percentage", percentage);
                productTermMap.put("isDefault", isDefault);
                productTermMap.put("purchasevalueorsalevalue", purchaseValueOrSaleValue);
                productTermMap.put("deductionorabatementpercent", deductionOrAbatementPercent);
                if(jsonObj.has("formType") && !StringUtil.isNullOrEmpty(jsonObj.getString("formType"))){
                    productTermMap.put("formType", jsonObj.getString("formType"));
                }
                if (jsonObj.has("taxtype") && !StringUtil.isNullOrEmpty(jsonObj.getString("taxtype"))) {
                    productTermMap.put("taxtype", jsonObj.getInt("taxtype"));
                    if (jsonObj.has("taxvalue") && !StringUtil.isNullOrEmpty(jsonObj.getString("taxvalue"))) {
                        if(jsonObj.getInt("taxtype")==0){ // If Flat
                            productTermMap.put("termamount", jsonObj.getDouble("taxvalue"));
                        } else { // Else Percentage
                            productTermMap.put("percentage", jsonObj.getDouble("taxvalue"));
                        }
                    }
                }
                
                kmsg = accProductModuleService.saveProductTerms(productTermMap);
            }
            productTermMapJsonArr = new JSONArray();
            if (!StringUtil.isNullOrEmpty(request.getParameter("productTermsAdditionalDataSales"))) {
                productTermMapJsonArr = new JSONArray(request.getParameter("productTermsAdditionalDataSales").toString());
            }
            for (int i = 0; i < productTermMapJsonArr.length(); i++) {
                JSONObject jsonObj = productTermMapJsonArr.getJSONObject(i);
                HashMap<String, Object> productTermMap = new HashMap<String, Object>();
                productTermMap.put("product", product);
                
                // If Clone, then dont copy producttermmapid.
                if(jsonObj.has("producttermmapid") && !StringUtil.isNullOrEmpty(jsonObj.getString("producttermmapid")) && StringUtil.isNullOrEmpty(request.getParameter("cloneId"))){// Product term map edit case for Sales terms
                    productTermMap.put("id", jsonObj.getString("producttermmapid"));
                }
                
                productTermMap.put("createdOn",dd);
                Account accountObj=null;
                String termAccount=jsonObj.getString("glaccount");
                if (!StringUtil.isNullOrEmpty(termAccount)) {
                    KwlReturnObject prodresult = accProductObj.getObject(Account.class.getName(), termAccount);
                    accountObj = (Account) prodresult.getEntityList().get(0);
                }
                productTermMap.put("account", accountObj);
                productTermMap.put("creator", userObj);
                String term = jsonObj.getString("termid");
                LineLevelTerms termObj = null;
                if (!StringUtil.isNullOrEmpty(term)) {
                    KwlReturnObject prodresult = accProductObj.getObject(LineLevelTerms.class.getName(), term);
                    termObj = (LineLevelTerms) prodresult.getEntityList().get(0);
                }
                isDefault = Boolean.parseBoolean(jsonObj.optString("isDefault","false"));
                double percentage = jsonObj.getDouble("taxvalue");
                double purchaseValueOrSaleValue = !StringUtil.isNullOrEmpty(jsonObj.getString("purchasevalueorsalevalue")) ? jsonObj.getDouble("purchasevalueorsalevalue") : 0.0;
                double deductionOrAbatementPercent = !StringUtil.isNullOrEmpty(jsonObj.getString("deductionorabatementpercent")) ? jsonObj.getDouble("deductionorabatementpercent") : 0.0;
                productTermMap.put("term", termObj);
                productTermMap.put("percentage", percentage);
                productTermMap.put("isDefault", isDefault);
                productTermMap.put("purchasevalueorsalevalue", purchaseValueOrSaleValue);
                productTermMap.put("deductionorabatementpercent", deductionOrAbatementPercent);
                if(jsonObj.has("formType") && !StringUtil.isNullOrEmpty(jsonObj.getString("formType"))){
                    productTermMap.put("formType", jsonObj.getString("formType"));
                }
                if (jsonObj.has("taxtype") && !StringUtil.isNullOrEmpty(jsonObj.getString("taxtype"))) {
                    productTermMap.put("taxtype", jsonObj.getInt("taxtype"));
                    if (jsonObj.has("taxvalue") && !StringUtil.isNullOrEmpty(jsonObj.getString("taxvalue"))) {
                        if(jsonObj.getInt("taxtype")==0){ // If Flat
                            productTermMap.put("termamount", jsonObj.getDouble("taxvalue"));
                        } else { // Else Percentage
                            productTermMap.put("percentage", jsonObj.getDouble("taxvalue"));
                        }
                    }
                }
                
                kmsg = accProductModuleService.saveProductTerms(productTermMap);
            }
            productTermMapJsonArr = new JSONArray();
            if (!StringUtil.isNullOrEmpty(request.getParameter("productTermsDataSales"))) {
                productTermMapJsonArr = new JSONArray(request.getParameter("productTermsDataSales").toString());
            }else{
                if (!StringUtil.isNullOrEmpty(request.getParameter("dataProTermsExciseSales"))) {
                    JSONArray dataProTermsExciseSales = new JSONArray(request.getParameter("dataProTermsExciseSales").toString());
                    if (dataProTermsExciseSales.length() > 0) {
                        for (int p = 0; p < dataProTermsExciseSales.length(); p++) {
                            productTermMapJsonArr.put(dataProTermsExciseSales.getJSONObject(p));
                        }
                    }
                }
                if (!StringUtil.isNullOrEmpty(request.getParameter("dataProTermsServiceSales"))) {
                    JSONArray dataProTermsServiceSales = new JSONArray(request.getParameter("dataProTermsServiceSales").toString());
                    if (dataProTermsServiceSales.length() > 0) {
                        for (int p = 0; p < dataProTermsServiceSales.length(); p++) {
                            productTermMapJsonArr.put(dataProTermsServiceSales.getJSONObject(p));
                        }
                    }
                }
                if (!StringUtil.isNullOrEmpty(request.getParameter("dataProTermsCSTSales"))) {
                    JSONArray dataProTermsCSTSales = new JSONArray(request.getParameter("dataProTermsCSTSales").toString());
                    if (dataProTermsCSTSales.length() > 0) {
                        for (int p = 0; p < dataProTermsCSTSales.length(); p++) {
                            productTermMapJsonArr.put(dataProTermsCSTSales.getJSONObject(p));
                        }
                    }
                }
                if (!StringUtil.isNullOrEmpty(request.getParameter("dataProTermsVATSales"))) {
                    JSONArray dataProTermsVATSales = new JSONArray(request.getParameter("dataProTermsVATSales").toString());
                    if (dataProTermsVATSales.length() > 0) {
                        for (int p = 0; p < dataProTermsVATSales.length(); p++) {
                            productTermMapJsonArr.put(dataProTermsVATSales.getJSONObject(p));
                        }
                    }
                }
                if (!StringUtil.isNullOrEmpty(request.getParameter("dataProTermsOtherSales"))) {
                    JSONArray dataProTermsOtherSales = new JSONArray(request.getParameter("dataProTermsOtherSales").toString());
                    if (dataProTermsOtherSales.length() > 0) {
                        for (int p = 0; p < dataProTermsOtherSales.length(); p++) {
                            productTermMapJsonArr.put(dataProTermsOtherSales.getJSONObject(p));
                        }
                    }
                }
            }   
            for (int i = 0; i < productTermMapJsonArr.length(); i++) {
                JSONObject jsonObj = productTermMapJsonArr.getJSONObject(i);
                HashMap<String, Object> productTermMap = new HashMap<String, Object>();
                productTermMap.put("product", product);
                
                // If Clone, then dont copy producttermmapid.
                if(jsonObj.has("producttermmapid") && !StringUtil.isNullOrEmpty(jsonObj.getString("producttermmapid")) && StringUtil.isNullOrEmpty(request.getParameter("cloneId"))){// Product term map edit case for Sales terms
                    productTermMap.put("id", jsonObj.getString("producttermmapid"));
                }
                
                productTermMap.put("createdOn",dd);
                Account accountObj=null;
                String termAccount=jsonObj.getString("glaccount");
                if (!StringUtil.isNullOrEmpty(termAccount)) {
                    KwlReturnObject prodresult = accProductObj.getObject(Account.class.getName(), termAccount);
                    accountObj = (Account) prodresult.getEntityList().get(0);
                }
                productTermMap.put("account", accountObj);
                productTermMap.put("creator", userObj);
                String term = jsonObj.getString("termid");
                LineLevelTerms termObj = null;
                if (!StringUtil.isNullOrEmpty(term)) {
                    KwlReturnObject prodresult = accProductObj.getObject(LineLevelTerms.class.getName(), term);
                    termObj = (LineLevelTerms) prodresult.getEntityList().get(0);
                }
                isDefault = Boolean.parseBoolean(jsonObj.optString("isDefault","false"));
                double percentage = jsonObj.getDouble("taxvalue");
                double purchaseValueOrSaleValue = !StringUtil.isNullOrEmpty(jsonObj.getString("purchasevalueorsalevalue")) ? jsonObj.getDouble("purchasevalueorsalevalue") : 0.0;
                double deductionOrAbatementPercent = !StringUtil.isNullOrEmpty(jsonObj.getString("deductionorabatementpercent")) ? jsonObj.getDouble("deductionorabatementpercent") : 0.0;
                productTermMap.put("term", termObj);
                productTermMap.put("percentage", percentage);
                productTermMap.put("isDefault", isDefault);
                productTermMap.put("purchasevalueorsalevalue", purchaseValueOrSaleValue);
                productTermMap.put("deductionorabatementpercent", deductionOrAbatementPercent);
                if(jsonObj.has("producttermmapid") && !StringUtil.isNullOrEmpty(jsonObj.getString("formType"))){
                    productTermMap.put("formType", jsonObj.getString("formType"));
                }
                
                if (jsonObj.has("taxtype") && !StringUtil.isNullOrEmpty(jsonObj.getString("taxtype"))) {
                    productTermMap.put("taxtype", jsonObj.getInt("taxtype"));
                    if (jsonObj.has("taxvalue") && !StringUtil.isNullOrEmpty(jsonObj.getString("taxvalue"))) {
                        if(jsonObj.getInt("taxtype")==0){ // If Flat
                            productTermMap.put("termamount", jsonObj.getDouble("taxvalue"));
                        } else { // Else Percentage
                            productTermMap.put("percentage", jsonObj.getDouble("taxvalue"));
                        }
                    }
                }
                
                kmsg = accProductModuleService.saveProductTerms(productTermMap);
            }
        } catch (JSONException ex) {
            Logger.getLogger(accProductController.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    public double getProductOutstandingPOSOQuantity(HttpServletRequest request, String productid, boolean SoPoFlag) {
        double TotalCount = 0;
        try {
            String companyid = sessionHandlerImpl.getCompanyid(request);
            HashMap<String, Object> requestParams = productHandler.getProductRequestMap(request);
            requestParams.remove(Constants.ss);
            requestParams.put("productid", productid);
            requestParams.put("companyid", companyid);
            requestParams.put("df", authHandler.getDateOnlyFormat(request));
            requestParams.put("pendingapproval", false);
            requestParams.put("issopoclosed", true);
            if (!StringUtil.isNullOrEmpty(productid)) {
                if (SoPoFlag) {
                    KwlReturnObject result = accSalesOrderDAOobj.getSalesOrdersMerged(requestParams);
                    List list = result.getEntityList();
                    Iterator itr = list.iterator();
                    while (itr.hasNext()) {
                        JSONObject obj = new JSONObject();
                        Object[] oj = (Object[]) itr.next();
                        String invid = oj[0].toString();
                        KwlReturnObject objItr = accountingHandlerDAOobj.getObject(SalesOrder.class.getName(), invid);
                        SalesOrder soorder = (SalesOrder) objItr.getEntityList().get(0);
                        Set<SalesOrderDetail> orderDetail = soorder.getRows();
                        Iterator ite = orderDetail.iterator();
    
                        KwlReturnObject cpresult = accountingHandlerDAOobj.getObject(CompanyAccountPreferences.class.getName(), soorder.getCompany().getCompanyID());
                        CompanyAccountPreferences pref = (CompanyAccountPreferences) cpresult.getEntityList().get(0);
                        String resultorder = "Closed";
                        boolean fullInv = false;
                        while (ite.hasNext()) {
    
                            SalesOrderDetail soDetail = (SalesOrderDetail) ite.next();
                            if (!productid.equals(soDetail.getProduct().getID())) {
                                continue;
                            }
                            double qua = 0;
                            double quantPartTt = soDetail.getQuantity() * 100;
                            double quantPartTtInv = 0.0;
                            if (pref.isWithInvUpdate()) { //In Trading Flow                 
                                KwlReturnObject doresult = accInvoiceDAOobj.getDeliveryOrderDFromSOD(soDetail.getID(), pref.getCompany().getCompanyID());
                                List list1 = doresult.getEntityList();
                                if (list1.size() > 0) {
                                    Iterator ite1 = list1.iterator();
                                    while (ite1.hasNext()) {
                                        String orderid = (String) ite1.next();
                                        KwlReturnObject res = accountingHandlerDAOobj.getObject(DeliveryOrderDetail.class.getName(), orderid);
                                        DeliveryOrderDetail deliveryOrderDetail = (DeliveryOrderDetail) res.getEntityList().get(0);
                                        fullInv = true;
                                        qua += deliveryOrderDetail.getBaseuomdeliveredquantity();
                                    }
                                }
                            } else { //In Non Trading Flow 

                                KwlReturnObject idresult = accInvoiceDAOobj.getIDFromSOD(soDetail.getID());
                                List list1 = idresult.getEntityList();
                                Iterator ite1 = list1.iterator();
                                while (ite1.hasNext()) {
                                    InvoiceDetail ge = (InvoiceDetail) ite1.next();
                                    if (ge.getInvoice().isPartialinv()) {
                                        double quantity = ge.getInventory().getBaseuomquantity();
                                        quantPartTtInv += quantity * ge.getPartamount();
                                    } else {
                                        fullInv = true;
                                        qua += ge.getInventory().getBaseuomquantity();
                                    }
                                }
                            }

                            if (fullInv) {
                                if (qua < soDetail.getBaseuomquantity()) {
                                    TotalCount = TotalCount + (soDetail.getBaseuomquantity() - qua);
                                    break;

                                }

                            } else if (quantPartTt > quantPartTtInv && !(soDetail.isIsLineItemClosed())) {
                                TotalCount = TotalCount + (soDetail.getBaseuomquantity() - qua);
                                //break;
                            }
                        }

                    }

                } else {
                    KwlReturnObject result1 = accPurchaseOrderobj.getPurchaseOrdersMerged(requestParams);
                    List list1 = result1.getEntityList();
                    Iterator itr1 = list1.iterator();
                    while (itr1.hasNext()) {

                        Object[] oj = (Object[]) itr1.next();
                        String invid = oj[0].toString();
                        JSONObject obj = new JSONObject();
                        KwlReturnObject objItr1 = accountingHandlerDAOobj.getObject(PurchaseOrder.class.getName(), invid);
                        PurchaseOrder purchaseOrder = (PurchaseOrder) objItr1.getEntityList().get(0);

                        KwlReturnObject cpresult = accountingHandlerDAOobj.getObject(CompanyAccountPreferences.class.getName(), purchaseOrder.getCompany().getCompanyID());
                        CompanyAccountPreferences pref = (CompanyAccountPreferences) cpresult.getEntityList().get(0);

                        String resultorder = "Closed";
                        Set<PurchaseOrderDetail> orderDetail = purchaseOrder.getRows();
                        Iterator ite = orderDetail.iterator();
                        while (ite.hasNext()) {
                            PurchaseOrderDetail pDetail = (PurchaseOrderDetail) ite.next();
                            if (!productid.equals(pDetail.getProduct().getID())) {
                                continue;
                            }
                            double qua = 0;
                            if (pref.isWithInvUpdate()) { //In Trading Flow                  
                                KwlReturnObject groresult = accGoodsReceiptDAOobj.getReceiptOrderDFromPODOptimized(pDetail.getID(), pref.getCompany().getCompanyID());
                                List list = groresult.getEntityList();
                                if (list.size() > 0) {
                                    Iterator ite1 = list.iterator();
                                    while (ite1.hasNext()) {
                                        String orderid = (String) ite1.next();
                                        KwlReturnObject res = accountingHandlerDAOobj.getObject(GoodsReceiptOrderDetails.class.getName(), orderid);
                                        GoodsReceiptOrderDetails goodsReceiptOrderDetails = (GoodsReceiptOrderDetails) res.getEntityList().get(0);
                                        qua += goodsReceiptOrderDetails.getBaseuomdeliveredquantity();
                                    }
                                }
                            } else { //In Non Trading Flow 
                                KwlReturnObject grresult = accGoodsReceiptDAOobj.getReceiptDFromPOD(pDetail.getID());
                                List list = grresult.getEntityList();
                                Iterator ite1 = list.iterator();
                                while (ite1.hasNext()) {
                                    GoodsReceiptDetail ge = (GoodsReceiptDetail) ite1.next();
                                    qua += ge.getInventory().getBaseuomquantity();
                                }
                            }
                            if (qua < pDetail.getBaseuomquantity() && !(pDetail.isIsLineItemClosed())) {
                                TotalCount = TotalCount + (pDetail.getBaseuomquantity() - qua);
//                                break;

                            }
                        }

                    }
                }

            }
        } catch (Exception ex) {
            Logger.getLogger(accProductControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
        }
        return TotalCount;
    }
    
    /**
     * Description: Controller used to get Product Brand Discount details.
     * @param request
     * @param response
     * @return ModelAndView
     */
    public ModelAndView getProductBrandDiscountDetails(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        boolean issuccess = false;
        String msg = "";
        try {
            DateFormat df = authHandler.getDateOnlyFormat(request);
            String companyID = sessionHandlerImpl.getCompanyid(request);
            String bandID = !StringUtil.isNullOrEmpty(request.getParameter("bandID")) ? request.getParameter("bandID") : "";
            String discountType = !StringUtil.isNullOrEmpty(request.getParameter("discountType")) ? request.getParameter("discountType") : "0";
            String currencyID = !StringUtil.isNullOrEmpty(request.getParameter("currencyID")) ? request.getParameter("currencyID") : "";
            Date applicableDate = !StringUtil.isNullOrEmpty(request.getParameter("applicableDate")) ? df.parse(request.getParameter("applicableDate")) : new Date();
            boolean isCustomerCategory = !StringUtil.isNullOrEmpty(request.getParameter("isCustomerCategory")) ? Boolean.parseBoolean(request.getParameter("isCustomerCategory")) : false;
            String ss = !StringUtil.isNullOrEmpty(request.getParameter("ss")) ? request.getParameter("ss") : "";
            String start = !StringUtil.isNullOrEmpty(request.getParameter("start")) ? request.getParameter("start") : "0";
            String limit = !StringUtil.isNullOrEmpty(request.getParameter("limit")) ? request.getParameter("limit") : "30";
            
            // Column Model
            JSONObject commData = new JSONObject();
            JSONObject jMeta = new JSONObject();
            JSONArray jarrColumns = new JSONArray();
            JSONArray jarrRecords = new JSONArray();
            
            /**
             * Create column model using dimension values
             */
            JSONObject paramJobj = StringUtil.convertRequestToJsonObject(request);
            paramJobj.put("companyid", companyID);
            AccProductService.createColumnModelForProcuctBrandDisocuntDetails(jarrColumns, jarrRecords,paramJobj);
            
            boolean isCustomerCategoryRecordExist = false;
            boolean isAnyRuleRecordExist = false;
            HashMap<String, Object> params = new HashMap<>();
            ArrayList filt_names = new ArrayList(), filt_params = new ArrayList();
            filt_names.add("company.companyID");
            filt_params.add(companyID);
            params.put("filter_names", filt_names);
            params.put("filter_params", filt_params);
            KwlReturnObject resultList = accProductObj.getProductBrandDiscountDetailsList(params);
            if (resultList.getEntityList() != null && !resultList.getEntityList().isEmpty()) {
                ProductBrandDiscountDetails productBrandDiscountDetails = (ProductBrandDiscountDetails) resultList.getEntityList().get(0);
                isCustomerCategoryRecordExist = productBrandDiscountDetails.isIsCustomerCategory();
                isAnyRuleRecordExist = true;
            }
            
            if (isCustomerCategoryRecordExist) {
                isCustomerCategory = true;
            }
            
            List<Object> list;
            KwlReturnObject result;
            if (isCustomerCategory) {
                HashMap<String, Object> filterRequestParams = new HashMap<>();
                ArrayList filter_names = new ArrayList(), filter_params = new ArrayList();
                filter_names.add("masterGroup.ID");
                filter_params.add(Constants.CUSTOMER_CATEGORY_ID);
                filter_names.add("company.companyID");
                filter_params.add(companyID);
                filterRequestParams.put("filter_names", filter_names);
                filterRequestParams.put("filter_params", filter_params);
                filterRequestParams.put("ss", ss);
                filterRequestParams.put("ss_names", new String[]{"value"});
                filterRequestParams.put("start", start);
                filterRequestParams.put("limit", limit);
                result = accMasterItemsDAO.getMasterItems(filterRequestParams);
                list = result.getEntityList();
            } else {
                /**
                 * For fetching customer list
                 */
                HashMap<String, Object> requestParams = new HashMap<>();
                ArrayList filter_names = new ArrayList(), filter_params = new ArrayList();
                filter_names.add("company.companyID");
                filter_params.add(sessionHandlerImpl.getCompanyid(request));
                requestParams.put("filter_names", filter_names);
                requestParams.put("filter_params", filter_params);
                requestParams.put("ss", ss);
                requestParams.put("ss_names", new String[]{"name"});
                requestParams.put("start", start);
                requestParams.put("limit", limit);
                result = accCustomerDAOobj.getCustomerList(requestParams);
                list = result.getEntityList();
            }
            
            /**
             * For fetching customer list json
             */
            Map<String, Object> requestMap = AccountingManager.getGlobalParams(request);
            requestMap.put("isCustomerCategoryRecordExist", isCustomerCategoryRecordExist);
            requestMap.put("isAnyRuleRecordExist", isAnyRuleRecordExist);
            requestMap.put("bandID", bandID);
            requestMap.put("discountType", discountType);
            requestMap.put("currencyID", currencyID);
            requestMap.put("applicableDate", applicableDate);
            requestMap.put("isCustomerCategory", isCustomerCategory);
            requestMap.put("companyID", requestMap.get(Constants.companyKey));
            requestMap.put("dimension",paramJobj.optString("dimension"));
            JSONArray dataJArr = AccProductService.getProductBrandDiscountDetailsJson(requestMap, list);
            int totalCount = result.getRecordTotalCount();
            
            // Column Model
            commData.put("success", true);
            commData.put("coldata", dataJArr);
            commData.put("columns", jarrColumns);
            jMeta.put("totalProperty", "totalCount");
            jMeta.put("root", "coldata");
            commData.put("totalCount", totalCount);
            jMeta.put("fields", jarrRecords);
            commData.put("metaData", jMeta);
            JSONArray jcom = new JSONArray();
            jcom.put(commData);

            jobj.put("valid", true);
            jobj.put("data", commData);
            issuccess = true;
        } catch (SessionExpiredException | ServiceException ex) {
            msg = ex.getMessage();
            Logger.getLogger(accProductControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            msg = "" + ex.getMessage();
            Logger.getLogger(accProductControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                jobj.put("success", issuccess);
                jobj.put("msg", msg);
            } catch (JSONException ex) {
                Logger.getLogger(accProductControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return new ModelAndView("jsonView_ex", "model", jobj.toString());
    }
    
    public ModelAndView saveProductBrandDiscountDetails(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        String msg = "";
        boolean issuccess = true, isCommitEx = false;

        DefaultTransactionDefinition def = new DefaultTransactionDefinition();
        def.setName("Account_Tx");
        def.setPropagationBehavior(TransactionDefinition.PROPAGATION_REQUIRED);
        TransactionStatus status = txnManager.getTransaction(def);
        try {
            DateFormat df = authHandler.getDateOnlyFormat(request);
            String companyID = sessionHandlerImpl.getCompanyid(request);
            String bandID = !StringUtil.isNullOrEmpty(request.getParameter("bandID")) ? request.getParameter("bandID") : "";
            String dimension = !StringUtil.isNullOrEmpty(request.getParameter("dimension")) ? request.getParameter("dimension") : "";
            String discountType = !StringUtil.isNullOrEmpty(request.getParameter("discountType")) ? request.getParameter("discountType") : "0";
            String currencyID = !StringUtil.isNullOrEmpty(request.getParameter("currencyID")) ? request.getParameter("currencyID") : "";
            Date applicableDate = !StringUtil.isNullOrEmpty(request.getParameter("applicableDate")) ? df.parse(request.getParameter("applicableDate")) : new Date();
            boolean isCustomerCategory = !StringUtil.isNullOrEmpty(request.getParameter("isCustomerCategory")) ? Boolean.parseBoolean(request.getParameter("isCustomerCategory")) : false;
            String customerID = !StringUtil.isNullOrEmpty(request.getParameter("customerID")) ? request.getParameter("customerID") : "";
            String column_Name = !StringUtil.isNullOrEmpty(request.getParameter("column_Name")) ? request.getParameter("column_Name") : "";
            String column_Value = !StringUtil.isNullOrEmpty(request.getParameter("column_Value")) ? request.getParameter("column_Value") : "0";

            HashMap<String, Object> dataMap = new HashMap<>();
            dataMap.put("bandID", bandID);
            dataMap.put("isCustomerCategory", isCustomerCategory);
            dataMap.put("applicableDate", applicableDate);
            dataMap.put("currencyID", currencyID);
            dataMap.put("companyID", companyID);
            dataMap.put("isSaveProductBrandDiscountDetails", true);

            if (isCustomerCategory) {
                dataMap.put("customerCategoryID", customerID);
            } else {
                dataMap.put("customerID", customerID);
            }

            List<FieldComboData> fieldComboDatas = Collections.emptyList();
            if (!StringUtil.isNullOrEmpty(dimension)) {
                /**
                 * Save data only if dimension is selected 
                 */
                HashMap<String, Object> filterRequestParams = new HashMap<>();
                ArrayList filter_names = new ArrayList(), filter_params = new ArrayList();
                filter_names.add("field.id");
                filter_params.add(dimension);
                filter_names.add("value");
                filter_params.add(column_Name);
                filterRequestParams.put("filter_names", filter_names);
                filterRequestParams.put("filter_values", filter_params);
                /**
                 * Get Id from field combo data for column
                 */
                KwlReturnObject result1 = accAccountDAOobj.getFieldCombo(filterRequestParams);
                fieldComboDatas = result1.getEntityList();
                if (fieldComboDatas != null && !fieldComboDatas.isEmpty()) {
                    dataMap.put("productBrandID", fieldComboDatas.get(0).getId());
                }
            KwlReturnObject result = accProductObj.getProductBrandDiscountDetails(dataMap);
            
            dataMap.put("disocuntValue", column_Value);
            dataMap.put("discountType", discountType);
            if (result.getEntityList() != null && !result.getEntityList().isEmpty()) { // for edit case
                String rowid = (String) result.getEntityList().get(0);
                dataMap.put("rowid", rowid);
            }

            KwlReturnObject detailResult = accProductObj.saveOrUpdateProductBrandDiscountDetails(dataMap);
            ProductBrandDiscountDetails detailRow = (ProductBrandDiscountDetails) detailResult.getEntityList().get(0);
            auditTrailObj.insertAuditLog(AuditAction.PRODUCT_BRAND_DISCOUNT_CHANGED, "User " + sessionHandlerImpl.getUserFullName(request) + " has updated Discount rule for Product Brand " + detailRow.getProductBrand().getValue(), request, detailRow.getID());
                try {
                    txnManager.commit(status);
                    msg = "Record Saved Successfully.";
                } catch (Exception ex) {
                    isCommitEx = true;
                }
            } else {
                issuccess = false;
                msg = "please select Dimesion";

            }
        } catch (Exception ex) {
            if (!isCommitEx) {
                txnManager.rollback(status);
            }
            issuccess = false;
            msg = "" + ex.getMessage();
            Logger.getLogger(accProductControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                jobj.put("success", issuccess);
                jobj.put("msg", msg);
            } catch (JSONException ex) {
                Logger.getLogger(accProductControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return new ModelAndView("jsonView", "model", jobj.toString());
    }
    
    public ModelAndView SyncDataIntoPM(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        HashMap<String, Object> requestParams = new HashMap();
        String msg = "";
        boolean issuccess = false;
        JSONArray jArr = null;
        try {

            if (!StringUtil.isNullOrEmpty(request.getParameter("data"))) {
                jArr = new JSONArray(request.getParameter("data"));
            }
            requestParams.put("jArr", jArr != null ?( jArr.length() > 0 ? jArr : null) : null);
            requestParams.put("companyid", sessionHandlerImpl.getCompanyid(request));
            jobj = AccProductService.syncDataIntoPM(requestParams);

            if (jobj.has("success") && jobj.getBoolean("success")) {
                msg = messageSource.getMessage("acc.data.sync.success.msg", null, RequestContextUtils.getLocale(request));
                issuccess = true;
            } else {
                msg = messageSource.getMessage("acc.data.synctopm.failure.msg", null, RequestContextUtils.getLocale(request));
            }
             auditTrailObj.insertAuditLog("Product synced to PM", "User " + sessionHandlerImpl.getUserFullName(request) + " has   synced products it into PM  " , request, "");
        } catch (Exception ex) {
            issuccess = false;
            Logger.getLogger(accProductControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                jobj.put("success", issuccess);
                jobj.put("msg", msg);

            } catch (Exception ex) {
                Logger.getLogger(accProductControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return new ModelAndView(Constants.jsonView, Constants.model, jobj.toString());
    }

    public ModelAndView getAssetDisposalDetails(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj1 = new JSONObject();
        JSONArray disposalDetail = new JSONArray();
        boolean issuccess = false;
        String msg = "";
        try {
            DateFormat df = authHandler.getDateOnlyFormat(request);
            double postedDepreciation = 0.00; // variable to show Depreciation upto the Disposal Date
            String companyId = sessionHandlerImpl.getCompanyid(request);
            Date disposalDate = !StringUtil.isNullOrEmpty(request.getParameter("disposaldate")) ? df.parse(request.getParameter("disposaldate")) : new Date();

            java.util.Date finanDate = null; //Financial Year Start Date
            Map<String, Object> filterParams = new HashMap<String, Object>();
            filterParams.put("id", companyId);
            KwlReturnObject extraresult = accCompanyPreferencesObj.getExtraCompanyPreferences(filterParams);
            ExtraCompanyPreferences extra = null;
            if (extraresult.getEntityList().size() > 0) {
                extra = (ExtraCompanyPreferences) extraresult.getEntityList().get(0);
            }
            KwlReturnObject capresult = accountingHandlerDAOobj.getObject(CompanyAccountPreferences.class.getName(), companyId);
            CompanyAccountPreferences preferences = (CompanyAccountPreferences) capresult.getEntityList().get(0);
            
            finanDate = getAssetDepreciationBasedOnDate(extra, preferences);
            
            boolean excludeSoldAssets = false;
            int depreciationCalculationType = extra.getAssetDepreciationCalculationType();
            if (!StringUtil.isNullOrEmpty(request.getParameter("excludeSoldAssets"))) {
                excludeSoldAssets = Boolean.parseBoolean(request.getParameter("excludeSoldAssets"));
            }
            HashMap<String, Object> requestParams = new HashMap<String, Object>();
            requestParams.put("companyId", companyId);
            requestParams.put("invrecord", true);

            if (excludeSoldAssets) {
                requestParams.put("excludeSoldAsset", excludeSoldAssets);
            }
            String assetDetailsIds = "";
            if (request.getParameter("assetDetailIds") != null) {
                assetDetailsIds = request.getParameter("assetDetailIds");
                requestParams.put("assetDetailsIds", assetDetailsIds);
            }

            KwlReturnObject result = accProductObj.getAssetDetails(requestParams);
            List<AssetDetails> list = result.getEntityList();
            for (AssetDetails assetDetails : list) {
                // Check if selected Asset is already disposed
                if (assetDetails.isIsDisposed()) {
                    msg = messageSource.getMessage("acc.msg.Assetisalreadydisposed", null, RequestContextUtils.getLocale(request)); // Selected Asset is already disposed
                    issuccess = false;
                    continue;
                }
                //Check if disposal date is before the installation date the simply show the message and break the request                
                if (disposalDate.before(assetDetails.getInstallationDate())) {
                    msg = messageSource.getMessage("acc.msg.disposaldateislessthaninstallation", null, RequestContextUtils.getLocale(request));// "Entered Disposal Date for the selected Asset is less than the Installation Date, So Asset can not be Disposed.";
                    issuccess = false;
                    continue;
                }
                if (assetDetails.getInstallationDate().before(finanDate) && assetDetails.getOpeningDepreciation() <= 0) {
                    msg = messageSource.getMessage("acc.msg.openningdepreciationnotposteduptodispdate", null, RequestContextUtils.getLocale(request));// "You can not dispose asset as opening depreciation is not posted yet.";
                    issuccess = false;
                    continue;
                }
                if (assetDetails.getAssetSoldFlag() == AssetDetails.AssetsSoldFromDO) {
                    msg = messageSource.getMessage("acc.msg.Assetisalreadydelivered", null, RequestContextUtils.getLocale(request));// "Selected Asset is already delivered.";
                    issuccess = false;
                    continue;
                }
                if (assetDetails.getAssetSoldFlag() == AssetDetails.AssetsSoldFromCI) {
                    msg = messageSource.getMessage("acc.msg.Assetisalreadyinvoiced", null, RequestContextUtils.getLocale(request));// "Selected Asset is already invoiced.";
                    issuccess = false;
                    continue;
                }
                
                /*Below code is used to check if asset is already expired or not*/
                boolean isExpire=false;
                Date assetEndLifeDate=null;
                List expireList=accProductObj.isAssetExpire(assetDetails,disposalDate);
                if(expireList!=null&& expireList.size()>0){
                 isExpire=(Boolean)expireList.get(0);
                }
                postedDepreciation = 0.00;
                String backyears = "";
                Calendar cal1 = Calendar.getInstance();
                if (isExpire) {
                    long assetenddateinlong = (Long) expireList.get(1);
                    assetEndLifeDate = new Date(assetenddateinlong);
                    cal1.setTime(assetEndLifeDate);
                } else {
                    cal1.setTime(disposalDate);
                    cal1.add(Calendar.DATE, -1);
                }
                int currentyear = cal1.get(Calendar.YEAR);
                Calendar cal2 = Calendar.getInstance();
                cal2.setTime(assetDetails.getInstallationDate());
                int period = -1;
                int creationyear1 = cal2.get(Calendar.YEAR);
                int year = cal1.get(Calendar.YEAR);
                int yeardiff = year - creationyear1;
                if (depreciationCalculationType == 0) {
                    if (yeardiff < 0) {  //if selected year is less than the cretion year then there will be no depreciation to show
                        continue;
                    }
                    period = yeardiff + 1;
                } else {
                        period = (12 * yeardiff) + (isExpire?assetEndLifeDate.getMonth()+1:disposalDate.getMonth() + 1);
                    period = cal2.get(Calendar.MONTH) != 0 ? period - cal2.get(Calendar.MONTH) : period;
                }

                HashMap<String, Object> futureFilters = new HashMap<String, Object>();
                futureFilters.put("period", period + 1);
                futureFilters.put("assetDetailsId", assetDetails.getId());
                futureFilters.put("companyid", companyId);
                KwlReturnObject dresultFuture = accProductObj.getAssetDepreciationDetail(futureFilters);
                if (dresultFuture.getEntityList().size()>0) {
                    msg = messageSource.getMessage("acc.msg.depreciationalreadypostedafterdispdate", null, RequestContextUtils.getLocale(request)); //"Depreciation is already posted after the disposal Date. The disposal date can only be later than the final depreciation posted for the selected Asset. ";
                    issuccess = false;
                    continue;
                }
                
                boolean isAllDepreciated = true;
//                boolean isAssetLifeExpire = true;
                int periodDep = -1;
                Calendar calInstallation = Calendar.getInstance();
                calInstallation.setTime(assetDetails.getInstallationDate());
                int creationyearDep = calInstallation.get(Calendar.YEAR);
                int startMonth = calInstallation.get(Calendar.MONTH);
                long diffinlong = cal1.getTimeInMillis() - calInstallation.getTimeInMillis();
                long enddateinlong = calInstallation.getTimeInMillis() + diffinlong;
                Date endDate = new Date(enddateinlong);
                Calendar calEndMonth = Calendar.getInstance();
                calEndMonth.setTime(endDate);
                int endMonth = calEndMonth.get(Calendar.MONTH) + 1;
                if (depreciationCalculationType == 0) {
                    startMonth = calInstallation.get(Calendar.YEAR);
                    endMonth = calEndMonth.get(Calendar.YEAR) + 1;
                }
                    while (creationyear1 <= currentyear) {
                        backyears += creationyear1 + ",";
                        creationyear1++;
                    }
                
                List<String> yearList = Arrays.asList(backyears.split("\\s*,\\s*"));
                Collections.sort(yearList);
                int yeardiffDep=0,k=0;
                for (yeardiffDep = 0, k = 0; k < yearList.size(); k++, yeardiffDep++) {
                    
                    int startMonth1=0;
                    int endMonth1=11;
                    int year1 = Integer.parseInt(yearList.get(k)); //Back Years
                    int creationyear = cal2.get(Calendar.YEAR);           //Installation Year
                    yeardiffDep = year1 - creationyear;
                    if (creationyear == currentyear) {    // if (installation year==disposal year) then start month=installation date month && End Month=disposal year month 
                        startMonth1 = cal2.get(Calendar.MONTH);
                        endMonth1 = cal1.get(Calendar.MONTH);
                    } else if (creationyear == year1) {           // if (installation year==backyear) then start month=installation date month && End Month=11
                        startMonth1 = cal2.get(Calendar.MONTH);
                    } else if (currentyear == year1) {        // if (disposal year==backyear year) then start month=0 && End Month=disposal year mont
                        endMonth1 = cal1.get(Calendar.MONTH);
                    }
                    
                    if (depreciationCalculationType == 0) {
//                        if(yeardiffDep!=0){                  //ERP-31503
//                            yeardiffDep =- 1;
//                        }
                        startMonth1=0;
                        endMonth1=yearList.size()-1;
                    }
                    
                    for (int i = startMonth1; i <=endMonth1; i++) {
                        if (depreciationCalculationType == 0) {
                            if (yeardiffDep < 0) {  //if selected year is less than the cretion year then there will be no depreciation to show
                                continue;
                            }
                            periodDep = yeardiffDep + 1;
                        } else {
                            periodDep = (12 * yeardiffDep) + i + 1;
                            periodDep = calInstallation.get(Calendar.MONTH) != 0 ? periodDep - calInstallation.get(Calendar.MONTH) : periodDep;
                        }

                        HashMap<String, Object> filters = new HashMap<String, Object>();
                        filters.put("period", periodDep);
                        filters.put("assetDetailsId", assetDetails.getId());
                        filters.put("companyid", companyId);
                        filters.put("assetDetails", true);
                        KwlReturnObject dresult = accProductObj.getAssetDepreciationDetail(filters);
                        if (dresult.getEntityList().isEmpty()) {
                            isAllDepreciated = false;
                            break;
                        }
                    }
                }
                if (depreciationCalculationType == 0 && finanDate.getMonth() != 0) {
                    currentyear--;
                }
                com.krawler.utils.json.base.JSONArray curfinalJArr = new com.krawler.utils.json.base.JSONArray();
                HashMap<String, Object> fieldrequestParams = new HashMap();
                fieldrequestParams.put("startMonth", assetDetails.getInstallationDate().getMonth());
                fieldrequestParams.put("endMonth", cal1.getTime().getMonth());
                fieldrequestParams.put("assetdetailIds", assetDetails.getId());
                fieldrequestParams.put("years", backyears);
                fieldrequestParams.put("companyid", companyId);
                fieldrequestParams.put("depreciationCalculationType", depreciationCalculationType);
                fieldrequestParams.put("finanDate", finanDate);
                fieldrequestParams.put("isForDisposeAsset", true);

                curfinalJArr = accAssetService.getAssetDepreciation(fieldrequestParams);
                for (int i = 0; i < curfinalJArr.length(); i++) {
                    JSONObject newjobj = curfinalJArr.getJSONObject(i);
                    if (newjobj.has("firstperiodamtInBase")) {
                        postedDepreciation += newjobj.getDouble("firstperiodamtInBase");
                    }
                }
                postedDepreciation = authHandler.round(postedDepreciation, companyId);
                
                // Put Disposal Details
                JSONObject disposalData = new JSONObject();
                disposalData.put("assetdetailsid", assetDetails.getId());
                disposalData.put("assetId", assetDetails.getAssetId());
                disposalData.put("assetLife", assetDetails.getAssetLife());
                double assetLifeInMonths = assetDetails.getAssetLife() * 12;
                disposalData.put("assetLifeInMonth", authHandler.formattingDecimalForAmount(assetLifeInMonths, companyId));
                
                Calendar calAssetStartLife = Calendar.getInstance();
                calAssetStartLife.setTime(assetDetails.getInstallationDate());
                
                Calendar calAssetTempLife = Calendar.getInstance();
                calAssetTempLife.set(calAssetStartLife.get(Calendar.YEAR), (int)assetLifeInMonths, calAssetStartLife.get(Calendar.DAY_OF_MONTH));
                int daysinmonth = calAssetTempLife.getActualMaximum(Calendar.DAY_OF_MONTH);
                long daysInMillis = daysinmonth * (long)Constants.DAY_MILLIS;
                double remainingMonthValue = daysInMillis * (assetLifeInMonths - Math.floor(assetLifeInMonths));
                
                int assetEndMonth = (int)assetLifeInMonths + (calAssetStartLife.get(Calendar.MONTH)-1);
                Calendar calAssetEndLife = Calendar.getInstance();
                calAssetEndLife.set(calAssetStartLife.get(Calendar.YEAR), assetEndMonth, calAssetStartLife.get(Calendar.DAY_OF_MONTH));
                long assetTotalLifeInMillis = calAssetEndLife.getTimeInMillis() + (long)remainingMonthValue;
                calAssetEndLife.setTimeInMillis(assetTotalLifeInMillis);
                
                Calendar calAssetDisposalDate = Calendar.getInstance();
                calAssetDisposalDate.setTime(disposalDate);
                int remainingAssetLifeInMonth = 0;
                if (calAssetEndLife.getTimeInMillis() > calAssetDisposalDate.getTimeInMillis()) {
//                    isAssetLifeExpire = false;
                int remainingAssetLifeInYear = calAssetEndLife.get(Calendar.YEAR) - calAssetDisposalDate.get(Calendar.YEAR);
                    remainingAssetLifeInMonth = remainingAssetLifeInYear * 12 + calAssetEndLife.get(Calendar.MONTH) - calAssetDisposalDate.get(Calendar.MONTH);
                }                    
                
                if(!isAllDepreciated){
                    msg = messageSource.getMessage("acc.msg.depreciationnotposteduptodispdate", null, RequestContextUtils.getLocale(request)); // "Depreciation is not posted upto the disposal Date. Please post remaining depreciation from the depreciation screen.";
                    issuccess = false;
                    continue;
                }
                
                /* Below code is commnented because of changes done in SDP-8043 */
//                if(isAssetLifeExpire && (assetDetails.getCost() - authHandler.round(postedDepreciation, 2))<=0){
//                    msg = messageSource.getMessage("acc.msg.AssetIsAlreadyExpired", null, RequestContextUtils.getLocale(request));// "Selected Asset is already Expired.";
//                    issuccess = false;
//                    continue; 
//                }
                double netBookVal=authHandler.round((assetDetails.getCost() - postedDepreciation),companyId);
                double salvageValue=authHandler.round(assetDetails.getSalvageValue(),companyId);
                disposalData.put("remainingLifeInMonth", authHandler.formattingdecimal(remainingAssetLifeInMonth, Constants.AMOUNT_DIGIT_AFTER_DECIMAL));
                disposalData.put("cost", assetDetails.getCost());
                disposalData.put("depreciationUptoDisposal", postedDepreciation);
                disposalData.put("profitloss",netBookVal) ;
                disposalData.put("iswriteoffaccount", (netBookVal==salvageValue));
                disposalData.put("installationDate", df.format(assetDetails.getInstallationDate()));
                disposalData.put("disposalDate", df.format(disposalDate));
                disposalDetail.put(disposalData);
                jobj1.put("data", disposalDetail);
                issuccess = true;
            }
        } catch (JSONException ex) {
            msg = ex.getMessage();
            Logger.getLogger(accProductController.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
        } catch (SessionExpiredException ex) {
            msg = ex.getMessage();
            Logger.getLogger(accProductController.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
        } catch (Exception ex) {
            msg = ex.getMessage();
            Logger.getLogger(accProductController.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
        } finally {
            try {
                jobj1.put("success", issuccess);
                jobj1.put("msg", msg);
            } catch (JSONException ex) {
                Logger.getLogger(accProductControllerCMN.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
            }
        }
        return new ModelAndView("jsonView", "model", jobj1.toString());
    }

    public ModelAndView saveAssetDisposalDetails(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj1 = new JSONObject();
        boolean issuccess = false;
        String msg = messageSource.getMessage("acc.disposalerr", null, RequestContextUtils.getLocale(request));
        try {
            DateFormat df = authHandler.getDateOnlyFormat(request);
            String companyId = sessionHandlerImpl.getCompanyid(request);
            String currencyid = sessionHandlerImpl.getCurrencyID(request);
            Date disposalDate = !StringUtil.isNullOrEmpty(request.getParameter("disposalDate")) ? df.parse(request.getParameter("disposalDate")) : new Date();
            double profitLoss = !StringUtil.isNullOrEmpty(request.getParameter("profitloss")) ? Double.parseDouble(request.getParameter("profitloss")) : 0;
            double remainingLifeInMonth = !StringUtil.isNullOrEmpty(request.getParameter("remainingLifeInMonth")) ? Double.parseDouble(request.getParameter("remainingLifeInMonth")) : 0;
            double remainingLife = remainingLifeInMonth / 12;

            boolean excludeSoldAssets = false;
            boolean tagWriteOffAccount = false;
            if (!StringUtil.isNullOrEmpty(request.getParameter("excludeSoldAssets"))) {
                excludeSoldAssets = Boolean.parseBoolean(request.getParameter("excludeSoldAssets"));
            }
            if (!StringUtil.isNullOrEmpty(request.getParameter("iswriteoffaccount"))) {
                tagWriteOffAccount = Boolean.parseBoolean(request.getParameter("iswriteoffaccount"));
            }
            HashMap<String, Object> requestParams = new HashMap<String, Object>();
            requestParams.put("companyId", companyId);
            requestParams.put("invrecord", true);

            if (excludeSoldAssets) {
                requestParams.put("excludeSoldAsset", excludeSoldAssets);
            }
            String assetDetailsIds = "";
            if (request.getParameter("assetDetailIds") != null) {
                assetDetailsIds = request.getParameter("assetDetailIds");
                requestParams.put("assetDetailsIds", assetDetailsIds);
            }

            KwlReturnObject result = accProductObj.getAssetDetails(requestParams);
            List<AssetDetails> list = result.getEntityList();
            for (AssetDetails assetDetails : list) {
                String jeentryNumber = "";
                String jeIntegerPart = "";
                String jeDatePrefix = "";
                String jeDateAfterPrefix = "";
                String jeDateSuffix = "";
                String jeSeqFormatId = "";
                boolean jeautogenflag = false;
                synchronized (this) {
                    HashMap<String, Object> JEFormatParams = new HashMap<String, Object>();
                    JEFormatParams.put("moduleid", Constants.Acc_GENERAL_LEDGER_ModuleId);
                    JEFormatParams.put("modulename", CompanyPreferencesConstants.AUTOJOURNALENTRY);
                    JEFormatParams.put("companyid", companyId);
                    JEFormatParams.put("isdefaultFormat", true);

                    KwlReturnObject kwlObj = accCompanyPreferencesObj.getSequenceFormat(JEFormatParams);
                    SequenceFormat format = (SequenceFormat) kwlObj.getEntityList().get(0);
                    Map<String, Object> seqNumberMap = new HashMap<String, Object>();
                    seqNumberMap = accCompanyPreferencesObj.getNextAutoNumber_Modified(companyId, StaticValues.AUTONUM_JOURNALENTRY, format.getID(), false, disposalDate);
                    jeentryNumber = (String) seqNumberMap.get(Constants.AUTO_ENTRYNUMBER);  //next auto generated number
                    jeIntegerPart = (String) seqNumberMap.get(Constants.SEQNUMBER);//integer Part
                    jeDatePrefix = (String) seqNumberMap.get(Constants.DATEPREFIX);//Date Prefix Part
                    jeDateAfterPrefix = (String)seqNumberMap.get(Constants.DATEAFTERPREFIX);  //Date After Prefix Part
                    jeDateSuffix = (String) seqNumberMap.get(Constants.DATESUFFIX);//Date Suffix Part
                    jeSeqFormatId = format.getID();
                    jeautogenflag = true;
                }

                Map<String, Object> jeDataMap = AccountingManager.getGlobalParams(request);
                jeDataMap.put("entrynumber", jeentryNumber);
                jeDataMap.put("autogenerated", jeautogenflag);
                jeDataMap.put(Constants.SEQFORMAT, jeSeqFormatId);
                jeDataMap.put(Constants.SEQNUMBER, jeIntegerPart);
                jeDataMap.put(Constants.DATEPREFIX, jeDatePrefix);
                jeDataMap.put(Constants.DATEAFTERPREFIX, jeDateAfterPrefix);
                jeDataMap.put(Constants.DATESUFFIX, jeDateSuffix);

                jeDataMap.put("entrydate", disposalDate);
                jeDataMap.put("companyid", companyId);
                jeDataMap.put("memo", "Disposal JE for Asset ID - " + assetDetails.getAssetId());
                jeDataMap.put("transactionModuleid", Constants.FIXED_ASSET_DISPOSAL_MODULE);
                jeDataMap.put("currencyid", currencyid);
                jeDataMap.put("costcenterid", request.getParameter("costcenter"));

                HashSet jeDetails = new HashSet();
                KwlReturnObject jeresult = accJournalEntryobj.saveJournalEntry(jeDataMap);//Create Journal entry without JEdetails

                JournalEntry journalEntry = (JournalEntry) jeresult.getEntityList().get(0);
                String jeid = journalEntry.getID();
                jeDataMap.put("jeid", jeid);

                 if (profitLoss >= 0) {

                    JSONArray customArray = new JSONArray();
                    JSONArray customGlobalArray = new JSONArray();
                    AssetDetailsCustomData assetDetailsCustomData = (AssetDetailsCustomData) kwlCommonTablesDAOObj.getClassObject(AssetDetailsCustomData.class.getName(), assetDetails.getId());
                    if (assetDetailsCustomData != null) {
                        /*
                         Create custom field data array for Journal entry details
                         */
                        HashMap<String, Object> params = new HashMap<String, Object>();
                        /*
                         * Line level 
                         */
                        int customColumn=1;
                        params.put("companyId", companyId);
                        params.put("assetId", assetDetails.getId());
                        createCustomArray(params, customArray,customColumn);
                        /*
                         * Global level 
                         */
                        customColumn=0;
                        createCustomArray(params, customGlobalArray,customColumn);
                    }
                    JSONObject jedjson = new JSONObject();
                    jedjson.put("srno", jeDetails.size() + 1);
                    jedjson.put("companyid", companyId);
                    jedjson.put("amount", assetDetails.getCost());
                    jedjson.put("accountid", assetDetails.getProduct().getPurchaseAccount().getID());
                    jedjson.put("debit", false);
                    jedjson.put("jeid", jeid);
                    KwlReturnObject jedresult = accJournalEntryobj.addJournalEntryDetails(jedjson);
                    JournalEntryDetail jed = (JournalEntryDetail) jedresult.getEntityList().get(0);
                    jeDetails.add(jed);

                    //Save Custom field data for Purchase Account
                    /*
                     * Save Line level field
                     */
                    saveAssetDisposalCustomFieldData(customArray, jedjson, jed, companyId);
                    /*
                     * Save Global level field
                     */
                    saveJEGlobalCustomData(customGlobalArray,journalEntry, companyId);

                     if (profitLoss > 0) {
                         jedjson = new JSONObject();
                         jedjson.put("srno", jeDetails.size() + 1);
                         jedjson.put("companyid", companyId);
                         jedjson.put("amount", profitLoss);
                         jedjson.put("accountid", (tagWriteOffAccount?assetDetails.getProduct().getWriteOffAssetAccount().getID():assetDetails.getProduct().getSellAssetGLAccount().getID()));
                         jedjson.put("debit", true);
                         jedjson.put("jeid", jeid);
                         jedresult = accJournalEntryobj.addJournalEntryDetails(jedjson);
                         jed = (JournalEntryDetail) jedresult.getEntityList().get(0);
                         jeDetails.add(jed);

                         //Save Custom field data for Cost of sales  Account
                         saveAssetDisposalCustomFieldData(customArray, jedjson, jed, companyId);
                     }

                    jedjson = new JSONObject();
                    jedjson.put("srno", jeDetails.size() + 1);
                    jedjson.put("companyid", companyId);
                    jedjson.put("amount", assetDetails.getCost() - profitLoss);
                    jedjson.put("accountid", assetDetails.getProduct().getDepreciationProvisionGLAccount().getID());
                    jedjson.put("debit", true);
                    jedjson.put("jeid", jeid);
                    jedresult = accJournalEntryobj.addJournalEntryDetails(jedjson);
                    jed = (JournalEntryDetail) jedresult.getEntityList().get(0);
                    jeDetails.add(jed);

                    //Save Custom field data for Depreciation Provision GL Account
                    saveAssetDisposalCustomFieldData(customArray, jedjson, jed, companyId);

                }
                 
                jeDataMap.put("jedetails", jeDetails);
                jeDataMap.put("externalCurrencyRate", 0.0);

                jeresult = accJournalEntryobj.saveJournalEntry(jeDataMap);//Add Journal entry details

                HashMap<String, Object> fieldrequestParams = new HashMap();
                fieldrequestParams.put("assetDetailId", assetDetails.getId());
                fieldrequestParams.put("remainingLife", remainingLife);
                fieldrequestParams.put("disposalProfitLoss", profitLoss);
                fieldrequestParams.put("disposalDate", disposalDate);
                fieldrequestParams.put("isDisposed", true);
                fieldrequestParams.put("disposalJE", journalEntry);
                KwlReturnObject adresult = accProductObj.updateAssetDetails(fieldrequestParams);
                if(!adresult.getEntityList().isEmpty()){
                    AssetDetails ad = (AssetDetails) adresult.getEntityList().get(0);
                    HashMap<String, Object> reqParams = new HashMap();
                    reqParams.put("product", ad.getProduct()!=null ? ad.getProduct() : "");
                    reqParams.put("availablequantity", ad.getProduct()!=null ? ad.getProduct().getAvailableQuantity() : "");
                    accProductObj.increaseOrDecreaseAvailableQuantity(reqParams);
                }
                
                fieldrequestParams = new HashMap();
                fieldrequestParams.put("asset", assetDetails.getId());
                fieldrequestParams.put("companyID", companyId);
                fieldrequestParams.put("disposalJE", journalEntry.getID());                
                KwlReturnObject disposerevertresult = accProductObj.saveOrUpdateDisposeRevertAssets(fieldrequestParams);
                msg = messageSource.getMessage("acc.disposalsucc", null, RequestContextUtils.getLocale(request)) + " " + (messageSource.getMessage("acc.field.JENo", null, RequestContextUtils.getLocale(request)) + ": <b>" + journalEntry.getEntryNumber() + "</b>");
                issuccess = true;
                auditTrailObj.insertAuditLog(AuditAction.FIXED_ASSET_DISPOSEASSET, "User " + sessionHandlerImpl.getUserFullName(request) + " has Disposed Asset for Asset ID - " + assetDetails.getAssetId() +", Journal Entry Number - " + journalEntry.getEntryNumber(), request, assetDetails.getAssetId());
            }
        } catch (SessionExpiredException ex) {
            msg = ex.getMessage();
            Logger.getLogger(accProductController.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
        } catch (Exception ex) {
            msg = ex.getMessage();
            Logger.getLogger(accProductController.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
        } finally {
            try {
                jobj1.put("success", issuccess);
                jobj1.put("msg", msg);
            } catch (JSONException ex) {
                Logger.getLogger(accProductControllerCMN.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
            }
        }
        return new ModelAndView("jsonView", "model", jobj1.toString());
    }    
    public void saveAssetDisposalCustomFieldData(JSONArray customArray,JSONObject jedjson ,JournalEntryDetail jed,String companyId) throws Exception {
        
        if (customArray.length() > 0) {
            KwlReturnObject jedresult=null;
            HashMap<String, Object> customrequestParams = new HashMap<String, Object>();
            customrequestParams.put("customarray", customArray);
            customrequestParams.put("modulename", Constants.Acc_JEDetail_modulename);
            customrequestParams.put("moduleprimarykey", Constants.Acc_JEDetailId);// Constants.Acc_JEDetail_recdetailId
            customrequestParams.put("modulerecid", jed.getID());
            customrequestParams.put("recdetailId", jed.getID());
            customrequestParams.put("moduleid", Constants.Acc_GENERAL_LEDGER_ModuleId);
            customrequestParams.put("companyid", companyId);
            customrequestParams.put("customdataclasspath", Constants.Acc_BillInvDetail_custom_data_classpath);
            KwlReturnObject customDataresult = fieldDataManagercntrl.setCustomData(customrequestParams);
            if (customDataresult != null && customDataresult.getEntityList().size() > 0) {
                jedjson.put("accjedetailcustomdata", jed.getID());
                jedjson.put("jedid", jed.getID());
                jedresult = accJournalEntryobj.updateJournalEntryDetails(jedjson);
            }
        }

    }
    public ModelAndView revertDisposedAsset(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj1 = new JSONObject();
        boolean issuccess = false;
        String msg = messageSource.getMessage("acc.fixed.asset.reverterr", null, RequestContextUtils.getLocale(request));
        try {
            DateFormat df = authHandler.getDateOnlyFormat(request);
            String companyId = sessionHandlerImpl.getCompanyid(request);
            String currencyid = sessionHandlerImpl.getCurrencyID(request);
            String createdby = sessionHandlerImpl.getUserid(request);
            Date disposalDate = !StringUtil.isNullOrEmpty(request.getParameter("disposaldate")) ? df.parse(request.getParameter("disposaldate")) : new Date();
            double zero = 0d;
            boolean excludeSoldAssets = false;
            if (!StringUtil.isNullOrEmpty(request.getParameter("excludeSoldAssets"))) {
                excludeSoldAssets = Boolean.parseBoolean(request.getParameter("excludeSoldAssets"));
            }
            HashMap<String, Object> requestParams = new HashMap();
            requestParams.put("companyId", companyId);
            requestParams.put("invrecord", true);

            if (excludeSoldAssets) {
                requestParams.put("excludeSoldAsset", excludeSoldAssets);
            }
            String assetDetailsIds = "";
            if (request.getParameter("assetDetailIds") != null) {
                assetDetailsIds = request.getParameter("assetDetailIds");
                requestParams.put("assetDetailsIds", assetDetailsIds);
            }

            KwlReturnObject result = accProductObj.getAssetDetails(requestParams);
            List<AssetDetails> list = result.getEntityList();
            for (AssetDetails assetDetails : list) {
                if (disposalDate.before(assetDetails.getDisposalDate())) {
                    msg = messageSource.getMessage("acc.revertalert", null, RequestContextUtils.getLocale(request));
                    break;
                }
                
                if(assetDetails.getDisposalJE()!=null){
                    JournalEntry disposalJE = assetDetails.getDisposalJE();
                    
                    String jeentryNumber = "";
                    String jeIntegerPart = "";
                    String jeDatePrefix = "";
                    String jeDateAfterPrefix = "";
                    String jeDateSuffix = "";
                    String jeSeqFormatId = "";
                    boolean jeautogenflag = false;
                    JournalEntryDetail jed = null;
                    synchronized (this) {
                        HashMap<String, Object> JEFormatParams = new HashMap();
                        JEFormatParams.put("moduleid", Constants.Acc_GENERAL_LEDGER_ModuleId);
                        JEFormatParams.put("modulename", CompanyPreferencesConstants.AUTOJOURNALENTRY);
                        JEFormatParams.put("companyid", companyId);
                        JEFormatParams.put("isdefaultFormat", true);

                        KwlReturnObject kwlObj = accCompanyPreferencesObj.getSequenceFormat(JEFormatParams);
                        SequenceFormat format = (SequenceFormat) kwlObj.getEntityList().get(0);
                        Map<String, Object> seqNumberMap = new HashMap<String, Object>();
                        seqNumberMap = accCompanyPreferencesObj.getNextAutoNumber_Modified(companyId, StaticValues.AUTONUM_JOURNALENTRY, format.getID(), false, disposalDate);
                        jeentryNumber = (String) seqNumberMap.get(Constants.AUTO_ENTRYNUMBER);  //next auto generated number
                        jeIntegerPart = (String) seqNumberMap.get(Constants.SEQNUMBER);//integer Part
                        jeDatePrefix = (String) seqNumberMap.get(Constants.DATEPREFIX);//Date Prefix Part
                        jeDateAfterPrefix = (String)seqNumberMap.get(Constants.DATEAFTERPREFIX);  //Date After Prefix Part
                        jeDateSuffix = (String) seqNumberMap.get(Constants.DATESUFFIX);//Date Suffix Part
                        jeSeqFormatId = format.getID();
                        jeautogenflag = true;
                    }
                    
                    Map<String, Object> jeDataMap = AccountingManager.getGlobalParams(request);
                    jeDataMap.put("entrynumber", jeentryNumber);
                    jeDataMap.put("autogenerated", jeautogenflag);
                    jeDataMap.put(Constants.SEQFORMAT, jeSeqFormatId);
                    jeDataMap.put(Constants.SEQNUMBER, jeIntegerPart);
                    jeDataMap.put(Constants.DATEPREFIX, jeDatePrefix);
                    jeDataMap.put(Constants.DATEAFTERPREFIX, jeDateAfterPrefix);
                    jeDataMap.put(Constants.DATESUFFIX, jeDateSuffix);
                    jeDataMap.put("entrydate", disposalDate);
                    jeDataMap.put("companyid", companyId);
                    jeDataMap.put("memo", "Reverted Disposed Asset for Asset ID - " + assetDetails.getAssetId() + ", [Reverse JE of "+disposalJE.getEntryNumber()+"]");
                    jeDataMap.put("transactionModuleid", Constants.FIXED_ASSET_REVERT_DISPOSEDASSET_MODULE);
                    jeDataMap.put("currencyid", currencyid);
                    jeDataMap.put("externalCurrencyRate", disposalJE.getExternalCurrencyRate());
                    jeDataMap.put("createdby", createdby);
                    jeDataMap.put("costcenterid", request.getParameter("costcenter"));
                    jeDataMap.put("isreverseje", true);
                    KwlReturnObject jeresult = accJournalEntryobj.saveJournalEntry(jeDataMap);//Create Journal entry without JEdetails
                    JournalEntry reverseJournalEntry = (JournalEntry) jeresult.getEntityList().get(0);
                    String jeid = reverseJournalEntry.getID();
                    jeDataMap.put("jeid", jeid);
                    
                    
                    Set<JournalEntryDetail> jedetails = disposalJE.getDetails();
                    Set jedetailsnew = new HashSet();
                    for (JournalEntryDetail jedetail : jedetails) {
                        Account account = jedetail.getAccount();
                        Double amount = jedetail.getAmount();
                        boolean isDebit = jedetail.isDebit();

                        JSONObject jedjson = new JSONObject();
                        jedjson.put("srno", jedetailsnew.size() + 1);
                        jedjson.put("companyid", companyId);
                        jedjson.put("amount", amount);
                        jedjson.put("accountid", account.getID());
                        jedjson.put("debit", !isDebit);
                        jedjson.put("jeid", reverseJournalEntry.getID());

                        KwlReturnObject jedresult = accJournalEntryobj.addJournalEntryDetails(jedjson);
                        JournalEntryDetail JEdeatilId = (JournalEntryDetail) jedresult.getEntityList().get(0);
                        jedjson.put("jedid", JEdeatilId.getID());
                        jed = accJournalEntryobj.getJournalEntryDetails(jedjson);
                        jedetailsnew.add(jed);
                    }
                    
                    HashMap<String, Object> fieldrequestParams = new HashMap();
                    fieldrequestParams.put("assetDetailId", assetDetails.getId());
                    fieldrequestParams.put("remainingLife", zero);
                    fieldrequestParams.put("disposalProfitLoss", zero);
                    fieldrequestParams.put("disposalDate", disposalDate);
                    fieldrequestParams.put("isDisposed", false);
                    fieldrequestParams.put("reverseJE", reverseJournalEntry);
                    KwlReturnObject adresult = accProductObj.updateAssetDetails(fieldrequestParams);
                    if(!adresult.getEntityList().isEmpty()){
//                        if(assetDetails.getAssetSoldFlag()!=AssetDetails.AssetsSoldFromCI){//Do not revert available quantity if it is disposed from Disposal Invoice
                        AssetDetails ad = (AssetDetails) adresult.getEntityList().get(0);
                        HashMap<String, Object> reqParams = new HashMap();
                        reqParams.put("product", ad.getProduct()!=null ? ad.getProduct() : "");
                        reqParams.put("availablequantity", ad.getProduct()!=null ? ad.getProduct().getAvailableQuantity() : "");
                        reqParams.put("isIncreaseAvailableQuantity", true);
                        accProductObj.increaseOrDecreaseAvailableQuantity(reqParams);
//                        }
                    }
                    
                    fieldrequestParams = new HashMap();
                    KwlReturnObject res = accProductObj.getJEFromDisposedOrRevertedAssetDetails(disposalJE.getID(),companyId,false);
                    List<DisposeRevertAssets> ll = res.getEntityList();
                    for(DisposeRevertAssets disposeRevertAssets : ll){
                        fieldrequestParams.put("disposeRevertAssets", disposeRevertAssets);
                        fieldrequestParams.put("companyID", companyId);
                        fieldrequestParams.put("reverseJE", reverseJournalEntry.getID());                
                        fieldrequestParams.put("isreverted", true);                
                        KwlReturnObject disposerevertresult = accProductObj.saveOrUpdateDisposeRevertAssets(fieldrequestParams);
                    }
                    msg = messageSource.getMessage("acc.fixed.asset.revertsucc", null, RequestContextUtils.getLocale(request)) + " " + ("<b>" + reverseJournalEntry.getEntryNumber() + "</b>");
                    issuccess = true;
                    auditTrailObj.insertAuditLog(AuditAction.FIXED_ASSET_REVERTDISPOSEDASSET, "User " + sessionHandlerImpl.getUserFullName(request) + " has Reverted Disposed Asset for Asset ID - " + assetDetails.getAssetId() +", Journal Entry Number - " + reverseJournalEntry.getEntryNumber()+ ", [Reverse JE of " + disposalJE.getEntryNumber() + "]", request, assetDetails.getAssetId());
                }
            }
        } catch (SessionExpiredException ex) {
            msg = ex.getMessage();
            Logger.getLogger(accProductControllerCMN.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
        } catch (Exception ex) {
            msg = ex.getMessage();
            Logger.getLogger(accProductControllerCMN.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
        } finally {
            try {
                jobj1.put("success", issuccess);
                jobj1.put("msg", msg);
            } catch (JSONException ex) {
                Logger.getLogger(accProductControllerCMN.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
            }
        }
        return new ModelAndView("jsonView", "model", jobj1.toString());
    }
    
    public ModelAndView deleteDisposedAsset(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj1 = new JSONObject();
        boolean issuccess = false;
        String msg = messageSource.getMessage("acc.fixed.asset.deletedisposedasset.err", null, RequestContextUtils.getLocale(request));
        try {
            String companyId = sessionHandlerImpl.getCompanyid(request);
            boolean excludeSoldAssets = false;
            if (!StringUtil.isNullOrEmpty(request.getParameter("excludeSoldAssets"))) {
                excludeSoldAssets = Boolean.parseBoolean(request.getParameter("excludeSoldAssets"));
            }
            HashMap<String, Object> requestParams = new HashMap();
            requestParams.put("companyId", companyId);
            requestParams.put("invrecord", true);

            if (excludeSoldAssets) {
                requestParams.put("excludeSoldAsset", excludeSoldAssets);
            }
            String assetDetailsIds = "";
            if (request.getParameter("assetDetailIds") != null) {
                assetDetailsIds = request.getParameter("assetDetailIds");
                requestParams.put("assetDetailsIds", assetDetailsIds);
            }

            KwlReturnObject result = accProductObj.getAssetDetails(requestParams);
            List<AssetDetails> list = result.getEntityList();
            for (AssetDetails assetDetails : list) {
                Product assetproduct = assetDetails.getProduct()!=null ? assetDetails.getProduct() : null;
                HashMap<String,Object> reqMap = new HashMap();
                String id = assetDetails.getId();
                String assetid = assetDetails.getAssetId();
                reqMap.put("asset", id);
                reqMap.put("companyid", companyId);
                int numRows = 0;
                numRows = accProductObj.deleteDisposedAssets(reqMap);
                if(numRows>0){
                    HashMap<String, Object> reqParams = new HashMap();
                    reqParams.put("product", assetproduct!=null ? assetproduct : "");
                    reqParams.put("availablequantity", assetproduct!=null ? assetproduct.getAvailableQuantity() : "");
                    reqParams.put("isIncreaseAvailableQuantity", true);
                    accProductObj.increaseOrDecreaseAvailableQuantity(reqParams);
                }
                auditTrailObj.insertAuditLog(AuditAction.FIXED_ASSET_DELETEDISPOSEDASSET, "User " + sessionHandlerImpl.getUserFullName(request) + " has Deleted Disposed Asset for Asset ID - " + assetid, request, assetid);
            }
            msg = messageSource.getMessage("acc.fixed.asset.deletedisposedasset.succ", null, RequestContextUtils.getLocale(request));
            issuccess = true;
        } catch (SessionExpiredException ex) {
            msg = ex.getMessage();
            Logger.getLogger(accProductControllerCMN.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
        } catch (Exception ex) {
            msg = ex.getMessage();
            Logger.getLogger(accProductControllerCMN.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
        } finally {
            try {
                jobj1.put("success", issuccess);
                jobj1.put("msg", msg);
            } catch (JSONException ex) {
                Logger.getLogger(accProductControllerCMN.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
            }
        }
        return new ModelAndView("jsonView", "model", jobj1.toString());
    }
    
    public ModelAndView MappCompanyTaxIntoProductTax(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        boolean issuccess = false;
        String msg = "";
        String channelName = "";
        DefaultTransactionDefinition def = new DefaultTransactionDefinition();
        def.setName("PO_Tx");
        def.setPropagationBehavior(TransactionDefinition.PROPAGATION_REQUIRED);
        TransactionStatus status = txnManager.getTransaction(def);
        try {
            String subdomain = "";
            String[] subdomainArray = null;
            if (!StringUtil.isNullOrEmpty(request.getParameter("subdomain"))) {
                subdomain = request.getParameter("subdomain").toString().trim();
                subdomainArray = subdomain.split(",");
            }
            HashMap<String, Object> requestParams = new HashMap<String, Object>();
            KwlReturnObject rCompanyId = null;
            rCompanyId = accPurchaseOrderobj.getAllCompanyFromDb(subdomainArray);
            Iterator itrCompanyId = rCompanyId.getEntityList().iterator();
            while (itrCompanyId.hasNext()) {
                String companyid = (String) itrCompanyId.next();
                requestParams.put("companyid", companyid);
                KwlReturnObject result = accProductObj.getProductList(requestParams);
                Iterator resultItr = result.getEntityList().iterator();
                while (resultItr.hasNext()) {
                    Product product = (Product) resultItr.next();
                    HashMap<String, String> dataMap = new HashMap<String, String>();
                    dataMap.put("companyid", companyid);
                    dataMap.put("productid", product.getID());
                    //Added params for apply is default check ON while importing product with Input/ Output terms
                    boolean check = accProductObj.mapCompanyTaxToProductTax(dataMap,product, null);
                    if (check) {
                        issuccess = true;
                        txnManager.commit(status);
                    }
                }
            }
        } catch (Exception ex) {
            if (status != null) {
                txnManager.rollback(status);
            }
            ex.printStackTrace();
            msg = "" + ex.getMessage();
            if (ex.getMessage() == null) {
                msg = ex.getCause().getMessage();
            }
            Logger.getLogger(accProductControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                jobj.put("success", issuccess);
                jobj.put("msg", "Script completed update the Product Tax");
            } catch (JSONException ex) {
                Logger.getLogger(accProductControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return new ModelAndView("jsonView", "model", jobj.toString());
    }
    
     public ModelAndView getConsolidationStockReport(HttpServletRequest request, HttpServletResponse response) throws JSONException {
        JSONObject jobj = new JSONObject();
        String msg = "";
        boolean issucess = false;
        try{
            JSONObject paramJobj = StringUtil.convertRequestToJsonObject(request);
            jobj = AccProductService.getConsolidationStockReport(paramJobj);
            issucess=true;
        } catch (JSONException | SessionExpiredException | ServiceException ex){
            issucess=false;
            Logger.getLogger(accProductControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
        } finally{
            jobj.put(Constants.RES_success, issucess);
            jobj.put(Constants.RES_msg, msg);
        }
        return new ModelAndView("jsonView", "model", jobj.toString());
    }
     
     public ModelAndView exportConsolidationStockReport(HttpServletRequest request, HttpServletResponse response) throws JSONException {
        JSONObject jobj = new JSONObject();
        String msg = "";
        boolean issucess = false;
        String view = "jsonView_ex";
        try{
            JSONObject paramJobj = StringUtil.convertRequestToJsonObject(request);
            paramJobj.put("exportConsolidationStockReport", true);
            paramJobj.remove("start");
            paramJobj.remove("limit");

            paramJobj.put("exportModule", "Stock");

            String userDateFormatId = sessionHandlerImpl.getDateFormatID(request);
            String timeZoneDifferenceId = sessionHandlerImpl.getTimeZoneDifference(request);
            String currencyIDForProduct = sessionHandlerImpl.getCurrencyID(request);
            DateFormat dateFormatForProduct = authHandler.getDateOnlyFormat(request);
            paramJobj.put("dateFormatForProduct", dateFormatForProduct);
            paramJobj.put("userDateFormatId", userDateFormatId);
            paramJobj.put("timeZoneDifferenceId", timeZoneDifferenceId);
            paramJobj.put("currencyIDForProduct", currencyIDForProduct);            
            
            consolidationReportExportThread.add(paramJobj);
            Thread t = new Thread(consolidationReportExportThread);
            t.setPriority(8);
            t.start();

            issucess=true;
        } catch (Exception ex) {
            Logger.getLogger(accProductControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
        }  finally{
            jobj.put(Constants.RES_success, issucess);
            jobj.put(Constants.RES_msg, msg);
        }
        return new ModelAndView(view, "model", jobj.toString());
    }
     
    public ModelAndView getStockValuation(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        try {
            String companyid = sessionHandlerImpl.getCompanyid(request);
            HashMap<String, Object> requestParams = new HashMap<>();
            requestParams.put("companyid", companyid);
            requestParams.put(Constants.df, authHandler.getDateOnlyFormat(request));
            requestParams.put("isInventoryValuation", request.getParameter("isInventoryValuation"));
            requestParams.put("isFromStockReport", request.getParameter("isFromStockReport"));
            requestParams.put(Constants.globalCurrencyKey, sessionHandlerImpl.getCurrencyID(request));
            ExtraCompanyPreferences extraCompanyPreferences = null;
            KwlReturnObject extraprefresult = accountingHandlerDAOobj.getObject(ExtraCompanyPreferences.class.getName(), companyid);
            extraCompanyPreferences = extraprefresult != null ? (ExtraCompanyPreferences) extraprefresult.getEntityList().get(0) : null;
            requestParams.put("isActivateMRPModule", extraCompanyPreferences.isActivateMRPModule());
         
            String ss = request.getParameter("ss");
            double gTotal=0;
            if (!StringUtil.isNullOrEmpty(ss)) {
                if (!StringUtil.isNullOrEmpty(request.getParameter("searchOnField"))) {
                    String searchOnField = request.getParameter("searchOnField");
                    if (searchOnField.equalsIgnoreCase("BATCH")) {
                        /**
                         * If Quick Search is on batch names.
                         */
                        requestParams.put("batchNameSearch", ss);
                    } else if (searchOnField.equalsIgnoreCase("SERIAL")) {
                        /**
                         * If Quick Search is on serial names.
                         */
                        requestParams.put("serialNameSearch", ss);
                    } else {
                        requestParams.put("ss", ss);
                    }
                } else {
                    requestParams.put("ss", ss);
                }
            }
            if (!StringUtil.isNullOrEmpty(request.getParameter("productCategoryid"))) {
                requestParams.put("productCategoryid", request.getParameter("productCategoryid"));
            }
            requestParams.put("productType", request.getParameter("productType"));
            requestParams.put(Constants.REQ_startdate, request.getParameter("startdate"));
            requestParams.put(Constants.REQ_enddate, request.getParameter("enddate"));
            requestParams.put("companyid", sessionHandlerImpl.getCompanyid(request));
            requestParams.put("searchJson", request.getParameter("searchJson"));
            requestParams.put("docType", request.getParameter("docType"));
            requestParams.put("isStockLedger", request.getParameter("isStockLedger"));
            requestParams.put("isInventoryValuation", request.getParameter("isInventoryValuation"));
            requestParams.put("isFromStockReport", request.getParameter("isFromStockReport"));
            requestParams.put("filterConjuctionCriteria", request.getParameter("filterConjuctionCriteria"));
            requestParams.put("isactivatelandedinvamt", request.getParameter("isactivatelandedinvamt"));
            if (!StringUtil.isNullOrEmpty(request.getParameter("customerId"))) {
                requestParams.put("customerId", request.getParameter("customerId"));
            }
            if (!StringUtil.isNullOrEmpty(request.getParameter("vendorId"))) {
                requestParams.put("vendorId", request.getParameter("vendorId"));
            }
            boolean stockAging = false;
            if (!StringUtil.isNullOrEmpty(request.getParameter("stockAgeing"))) {
                requestParams.put("stockAgeing", Boolean.parseBoolean(request.getParameter("stockAgeing")));
                stockAging = Boolean.parseBoolean(request.getParameter("stockAgeing"));
                if(stockAging){
                    requestParams.put(Constants.REQ_enddate, request.getParameter("asofdate"));
                    requestParams.put("duration", request.getParameter("duration"));
                    requestParams.put("isSummary", request.getParameter("isSummary"));
                }
            }            
            if (!StringUtil.isNullOrEmpty(request.getParameter("valuationMethod"))) {
                requestParams.put("valuationMethod", Integer.parseInt(request.getParameter("valuationMethod")));
            }
            if (!StringUtil.isNullOrEmpty(request.getParameter("isStockLedgerDetailedReport"))) {
                Boolean isStockLedgerDetailedReport = Boolean.parseBoolean(request.getParameter("isStockLedgerDetailedReport"));
                requestParams.put("isStockLedgerDetailedReport", isStockLedgerDetailedReport);
            }
            requestParams.put("grandTotal", gTotal);
            JSONArray jsonArr = new JSONArray();
            jsonArr = AccProductService.getInventoryValuationData(requestParams);
            JSONArray pagedJson = jsonArr;
            if (!StringUtil.isNullOrEmpty(request.getParameter("start")) && !StringUtil.isNullOrEmpty(request.getParameter("limit"))) {
                pagedJson = StringUtil.getPagedJSONWithPageTotalAmount(pagedJson, Integer.parseInt(request.getParameter("start")), Integer.parseInt(request.getParameter("limit")));
                if(pagedJson.length()>0){
                pagedJson.getJSONObject(pagedJson.length()-1).put("grandTotalInBase", requestParams.containsKey("gTotal")? requestParams.get("gTotal"):0);
                }
            }
            jobj.put("data", pagedJson);
            jobj.put("totalCount", jsonArr.length());
        } catch (SessionExpiredException | JSONException ex) {
            Logger.getLogger(accProductControllerCMN.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
        }
        catch(ServiceException ex){
            Logger.getLogger(accProductControllerCMN.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
        }
        return new ModelAndView("jsonView", "model", jobj.toString());
    }
    
    public ModelAndView getStoreWiseStockInventory(HttpServletRequest request, HttpServletResponse response) {

        JSONObject jobj = new JSONObject();
        String msg = "";
        String inventoryCatType = "";
        boolean issuccess = false;

        JSONArray jArray = new JSONArray();
        Paging paging = null;
        JSONArray productCustomFieldInfo = new JSONArray();
        try {
            JSONArray DataJArr = new JSONArray();
            HashMap<String, Object> requestParams = new HashMap<String, Object>();
            requestParams.put(Constants.df, authHandler.getDateOnlyFormat(request));

            String startstr = (String) request.getParameter(Constants.start);
            String limitstr = (String) request.getParameter(Constants.limit);

            requestParams.put(Constants.companyid, sessionHandlerImpl.getCompanyid(request));
            requestParams.put(Constants.globalCurrencyKey, sessionHandlerImpl.getCurrencyID(request));
            requestParams.put(Constants.REQ_startdate, request.getParameter(Constants.REQ_startdate));
            requestParams.put(Constants.REQ_enddate, request.getParameter(Constants.REQ_enddate));
            requestParams.put(Constants.ss, request.getParameter(Constants.ss));
            String type = request.getParameter("type");
            requestParams.put("storageType", type);
            requestParams.put("storageTypeId", request.getParameter("locationid"));
            requestParams.put("batchName", request.getParameter("batchname"));
            requestParams.put("isFromStockValuationDetail", true);
            
            
            if (request.getParameter("inventoryCatType") != null) {
                inventoryCatType = (String) request.getParameter("inventoryCatType");
}
            String companyId = sessionHandlerImpl.getCompanyid(request);
            String userId = sessionHandlerImpl.getUserid(request);

            KwlReturnObject jeresult = accountingHandlerDAOobj.getObject(User.class.getName(), userId);
            User user = (User) jeresult.getEntityList().get(0);

            Company company = user.getCompany();

            KwlReturnObject cap1 = accountingHandlerDAOobj.getObject(ExtraCompanyPreferences.class.getName(), companyId);
            ExtraCompanyPreferences ecf = (ExtraCompanyPreferences) cap1.getEntityList().get(0);

          requestParams.put("isActivateMRPModule", ecf.isActivateMRPModule());
            String repairStore = ecf.getRepairStore();
            String qaStore = ecf.getInspectionStore();

            // Find out any product custom fields need to show in this report
            DateFormat df = new SimpleDateFormat("yyyy-MM-dd");
            String customFieldQuery = "select customcolumninfo from showcustomcolumninreport where moduleid = ? and companyid = ?";
            List<String> customFieldinfoList = null;
            customFieldinfoList = accCommonTablesDAO.executeSQLQuery(customFieldQuery, new Object[]{Constants.Acc_Product_Master_ModuleId, companyId});
            boolean isnegativestockforlocwar = false;
            isnegativestockforlocwar = ecf.isIsnegativestockforlocwar();
            HashMap<String, HashMap> productCustomData = new HashMap<String, HashMap>();
            HashMap<String, String> replaceFieldMap = new HashMap<String, String>();
            HashMap<String, String> customFieldMap = new HashMap<String, String>();
            HashMap<String, String> customDateFieldMap = new HashMap<String, String>();
            HashMap<String, Integer> FieldMap = null;

            if (customFieldinfoList.size() > 0) {
                String jsonString = customFieldinfoList.get(0);
                JSONArray productCustomFields = new JSONArray(jsonString);
                String fieldIds = "";
                for (int jCnt = 0; jCnt < productCustomFields.length(); jCnt++) {
                    fieldIds = fieldIds.concat("'").concat(productCustomFields.getJSONObject(jCnt).getString("fieldid")).concat("',");
                }
                if (!StringUtil.isNullOrEmpty(fieldIds)) {
                    fieldIds = fieldIds.substring(0, fieldIds.length() - 1);
                }
                HashMap<String, Object> fieldrequestParams = new HashMap();
                fieldrequestParams.put(Constants.filter_names, Arrays.asList(Constants.companyid, Constants.moduleid, "INid"));
                fieldrequestParams.put(Constants.filter_values, Arrays.asList(companyId, Constants.Acc_Product_Master_ModuleId, fieldIds));
                FieldMap = accAccountDAOobj.getFieldParamsCustomMap(fieldrequestParams, replaceFieldMap, customFieldMap, customDateFieldMap);
            }

            if (replaceFieldMap.size() > 0) {
                for (Map.Entry<String, String> varEntry : replaceFieldMap.entrySet()) {
                    JSONObject fieldInfo = new JSONObject();
                    fieldInfo.put("dataindex", varEntry.getKey());
                    fieldInfo.put("columnname", varEntry.getKey().replaceAll("Custom_", ""));
                    productCustomFieldInfo.put(fieldInfo);
                }
            }

            String exportFileName = request.getParameter("filename"); // for Export
            boolean isExport = false;
            if (!StringUtil.isNullOrEmpty(exportFileName)) {
                isExport = true;
            } else {
                String start = request.getParameter("start");
                String limit = request.getParameter("limit");
                paging = new Paging(start, limit);
            }
            String searchString = request.getParameter("ss");

            String storeId = request.getParameter("store");
            String locationId = request.getParameter("location");
            Set<Store> storeSet = null;
            Store store = null;
            boolean singleStore = false;
            boolean isQAorRepairStore = false;
            if (!StringUtil.isNullOrEmpty(storeId)) {
                store = storeService.getStoreById(storeId);
                if (store != null) {
                    storeSet = new HashSet<>();
                    storeSet.add(store);
                    singleStore = true;
                    if (storeId.equals(qaStore) || storeId.equals(repairStore)) {
                        isQAorRepairStore = true;
                    }
                }

            } else {
                boolean includeQAAndRepairStore = true;
                boolean includePickandPackStore = true;
                List<Store> stores = storeService.getStoresByStoreExecutivesAndManagers(user, true, null, null, null, includeQAAndRepairStore, includePickandPackStore);
                if (!stores.isEmpty()) {
                    storeSet = new HashSet<>(stores);
                }
            }
            List<Object[]> stockList = null;
            Location location = null;
            if (!StringUtil.isNullOrEmpty(locationId)) {
                location = locationService.getLocation(locationId);
            }
            if (storeSet != null && !storeSet.isEmpty()) {
                stockList = stockService.getStoreWiseProductStockList(company, storeSet, location, searchString, paging, inventoryCatType);
            }
            Map<String, Double> quantityUnderQA = stockService.getProductQuantityUnderQA(company, store);
            Map<String, Double> quantityUnderRepair = stockService.getProductQuantityUnderRepair(company, store);
            Map<String, Double> blockedQuantityList = stockService.getProductBlockedQuantity(company, store, location, searchString);
            if (StringUtil.isNullOrEmpty(storeId)) {
                DataJArr = AccProductService.getInventoryValuationData(requestParams);
            }
            if (stockList != null && !stockList.isEmpty()) {
                for (Object[] obj : stockList) {
                    String productId = obj[0] != null ? (String) obj[0] : null;
                    String productCode = obj[1] != null ? (String) obj[1] : null;
                    String productName = obj[2] != null ? (String) obj[2] : null;
                    String productDescription = obj[3] != null ? (String) obj[3] : null;
                    String uomName = obj[4] != null ? (String) obj[4] : null;
                    ItemReusability itemReusability = obj[5] != null ? (ItemReusability) obj[5] : null;
                    double pQty = obj[6] != null ? (Double) obj[6] : 0;
                    boolean isSerialForProduct = obj[7] != null ? (Boolean) obj[7] : false;
                    boolean isBatchForProduct = obj[8] != null ? (Boolean) obj[8] : false;
                    JSONObject jObj = new JSONObject();

                    double qaQuantity = 0;
                    if (quantityUnderQA != null && quantityUnderQA.containsKey(productId)) {
                        qaQuantity = quantityUnderQA.get(productId);
                    }
                    double repairQuantity = 0;
                    if (quantityUnderRepair != null && quantityUnderRepair.containsKey(productId)) {
                        repairQuantity = quantityUnderRepair.get(productId);
                    }
                    double blkQuantity = 0;
                    if (blockedQuantityList != null && blockedQuantityList.containsKey(productId)) {
                        blkQuantity = blockedQuantityList.get(productId);
                    }
                    jObj.put("itemid", productId);
                    jObj.put("itemcode", productCode);
                    jObj.put("itemdescription", productDescription);
                    jObj.put("itemname", productName);
                    jObj.put("uom", uomName);
                    double qty = singleStore ? (isQAorRepairStore ? (pQty) - (qaQuantity + repairQuantity) : pQty) : (pQty) - (qaQuantity + repairQuantity);
                    if (qty < 0 && (isnegativestockforlocwar && !(isBatchForProduct || isSerialForProduct))) {
                        jObj.put("quantity", (qty - blkQuantity));
                    } else {
                        jObj.put("quantity", (qty > blkQuantity || qty < 0) ? (qty - blkQuantity) : (blkQuantity - qty));
                    }
                    jObj.put("blockquantity", blkQuantity);
                    jObj.put("qaquantity", qaQuantity);
                    jObj.put("repairquantity", repairQuantity);
                    jObj.put("isSerialForProduct", isSerialForProduct);
                    jObj.put("stockType", itemReusability != null ? itemReusability.toString() : "");
                    jObj.put("stockTypeName", itemReusability == ItemReusability.REUSABLE ? "R" : (itemReusability == ItemReusability.DISPOSABLE ? "C" : "C"));


                    jArray.put(jObj);
                }
            }
            if (isExport) {
                jobj.put("data", jArray);
                jobj.put("productcustomfield", productCustomFieldInfo);
                exportDaoObj.processRequest(request, response, jobj);
            }
            issuccess = true;
            msg = "Stock list has been fetched successfully";

        } catch (SessionExpiredException ex) {
            msg = ex.getMessage();
            lgr.log(Level.SEVERE, msg, ex);
        } catch (InventoryException ex) {
            msg = ex.getMessage();
        } catch (Exception ex) {
            msg = ex.getMessage();
            lgr.log(Level.SEVERE, msg, ex);
        } finally {
            try {
                jobj.put("success", issuccess);
                jobj.put("msg", msg);
                jobj.put("data", jArray);
                if (paging != null) {
                    jobj.put("count", paging.getTotalRecord());
                } else {
                    jobj.put("count", jArray.length());
                }
            } catch (JSONException ex) {
                lgr.log(Level.SEVERE, msg, ex);
            }
        }
        return new ModelAndView(successView, "model", jobj.toString());

    }
    
    /**
    * this method is written to update asset id and expiry date of asset 
    */
     public ModelAndView updateSkuFiedAndExpiryDateOfSerial(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        boolean success = false;
        boolean isDuplicate = false;
        DefaultTransactionDefinition def = new DefaultTransactionDefinition(TransactionDefinition.PROPAGATION_REQUIRED);
        def.setName("updateserialskufieldnexpdate");
        TransactionStatus status = null;
        try {
            DateFormat df = authHandler.getDateOnlyFormat(request);
            status = txnManager.getTransaction(def);
            HashMap<String, Object> pdfTemplateMap = new HashMap<String, Object>();
            String serialid = !StringUtil.isNullOrEmpty(request.getParameter("serialid")) ? request.getParameter("serialid") : "";
            String type = !StringUtil.isNullOrEmpty(request.getParameter("type")) ? request.getParameter("type") : "";
            String batchName = !StringUtil.isNullOrEmpty(request.getParameter("batchName")) ? request.getParameter("batchName") : "";
            String itemCode = !StringUtil.isNullOrEmpty(request.getParameter("itemcode")) ? request.getParameter("itemcode") : "";
            String companyId=sessionHandlerImpl.getCompanyid(request);
            KwlReturnObject capresult = null;
            NewBatchSerial batchserialOBj = null;
            if (!StringUtil.isNullOrEmpty(serialid)&&"1".equals(type)) {

                String SkufieldValue = request.getParameter("skufieldValue");
                Map<String, Object> requestMap = new HashMap();
                requestMap.put("serialid", serialid);
                requestMap.put("SkufieldValue", SkufieldValue);
                requestMap.put("company", sessionHandlerImpl.getCompanyid(request));
                capresult = accountingHandlerDAOobj.getObject(NewBatchSerial.class.getName(), serialid);
                batchserialOBj = (NewBatchSerial) capresult.getEntityList().get(0);
                if (!StringUtil.isNullOrEmpty(SkufieldValue)) {
                    jobj = AccProductService.checkAssetIdIsPresent(requestMap, batchserialOBj);
                }else{
                     jobj.put("isDuplicate", false);
                }
                if (jobj != null && !jobj.getBoolean("isDuplicate")) {
                    
                    String expiryDat=batchserialOBj.getExptodate()!=null?df.format(batchserialOBj.getExptodate()):"";
                    String OldAssetID=batchserialOBj.getSkufield();
                    pdfTemplateMap.put("id", serialid);
                    pdfTemplateMap.put("type", type);
                    pdfTemplateMap.put("serialName", batchserialOBj.getSerialname());
                    pdfTemplateMap.put("skufield", SkufieldValue);
                    pdfTemplateMap.put("company", companyId);
                    pdfTemplateMap.put("itemcode", batchserialOBj.getProduct());
                    pdfTemplateMap.put("exptodate", !StringUtil.isNullOrEmpty(request.getParameter("disposaldate"))?df.parse(request.getParameter("disposaldate")):null);
//                    KwlReturnObject kmsg = accCommonTablesDAO.saveNewSerialForBatch(pdfTemplateMap);
                    accCommonTablesDAO.updateBatchExpDate(pdfTemplateMap);
                    try {
                        auditTrailObj.insertAuditLog("", "User " + sessionHandlerImpl.getUserFullName(request) + " has updated the asset Id  from " + OldAssetID + " to " + SkufieldValue + " and expiry date  from " + expiryDat + " to " + df.format(df.parse(request.getParameter("disposaldate"))), request, batchserialOBj.getId());
                    } catch (Exception ex) {
                    }
                } else {
                    isDuplicate = true;
                }
            } else if("2".equals(type)) {
                pdfTemplateMap.put("type", type);
                pdfTemplateMap.put("batchname", batchName);
                pdfTemplateMap.put("itemcode", itemCode);
                pdfTemplateMap.put("company", companyId);
                pdfTemplateMap.put("exptodate", df.parse(request.getParameter("disposaldate")));
                accCommonTablesDAO.updateBatchExpDate(pdfTemplateMap);
            }
            txnManager.commit(status);
            success = true;
        } catch (Exception e) {
            success = false;
            txnManager.rollback(status);
            Logger.getLogger(accProductControllerCMN.class.getName()).log(Level.SEVERE, "something gone wrong while updating skufield and expiry date of asset ", e);
        } finally {
            try {
              
                jobj.put("isDuplicate", isDuplicate);
                jobj.put("valid", true);
                jobj.put("success", success);
            } catch (Exception ex) {
                Logger.getLogger(accProductControllerCMN.class.getName()).log(Level.SEVERE, "something gone wrong while updating skufield and expiry date of asset ", ex);
            }
        }
        return new ModelAndView("jsonView", "model", jobj.toString());
    }
      
    public ModelAndView getStockSummaryReport(HttpServletRequest request, HttpServletResponse response) {

        JSONObject jobj = new JSONObject();
        String msg = "";
        boolean issuccess = false;
        JSONArray jArray = new JSONArray();
        DateFormat df = null;
        List<TransactionBatch> pvbList = new ArrayList();
        JSONArray pagedJson = new JSONArray();
        try {
            String userId = sessionHandlerImpl.getUserid(request);
            df = authHandler.getDateOnlyFormat();
            KwlReturnObject jeresult = accountingHandlerDAOobj.getObject(User.class.getName(), userId);
            User user = (User) jeresult.getEntityList().get(0);
            jeresult = accountingHandlerDAOobj.getObject(ExtraCompanyPreferences.class.getName(), user.getCompany().getCompanyID());
            ExtraCompanyPreferences ecf = (ExtraCompanyPreferences) jeresult.getEntityList().get(0);


            String searchString = request.getParameter("ss");

            String fd = request.getParameter("fromDate");
            String td = request.getParameter("toDate");
            String storeId = request.getParameter("storeid");
            String exportFileName = request.getParameter("filename"); // for Export
            boolean isExport = false;
            if (!StringUtil.isNullOrEmpty(exportFileName)) {
                isExport = true;
            }
            Date fromDate = null;
            Date toDate = null;
            if (!StringUtil.isNullOrEmpty(fd) && !StringUtil.isNullOrEmpty(td)) {
                try {
                    fromDate = df.parse(fd);
                    toDate = df.parse(td);
                } catch (ParseException ex) {
                }
            }

            Store store = null;
            if (!StringUtil.isNullOrEmpty(storeId)) {
                jeresult = accountingHandlerDAOobj.getObject(Store.class.getName(), storeId);
                store = (Store) jeresult.getEntityList().get(0);
            }

            if (store != null) {
                HashMap<String, Object> valuationRequestParams = new HashMap<>();
                valuationRequestParams.put(Constants.companyKey, user.getCompany().getCompanyID());
                valuationRequestParams.put(Constants.globalCurrencyKey, sessionHandlerImpl.getCurrencyID(request));
                valuationRequestParams.put("store", store.getId());
                valuationRequestParams.put("ss", searchString);
                valuationRequestParams.put(Constants.REQ_startdate, fd);
                valuationRequestParams.put(Constants.REQ_enddate, td);
                valuationRequestParams.put(Constants.df, authHandler.getDateOnlyFormat());
                valuationRequestParams.put("isFromStockSummaryReport", true);
                valuationRequestParams.put("toDate", toDate);
                valuationRequestParams.put("isActivateMRPModule",ecf.isActivateMRPModule());
                jArray = AccProductService.getInventoryValuationData(valuationRequestParams);
                pagedJson = jArray;
                if (!StringUtil.isNullOrEmpty(request.getParameter("start")) && !StringUtil.isNullOrEmpty(request.getParameter("limit"))) {
                    pagedJson = StringUtil.getPagedJSON(pagedJson, Integer.parseInt(request.getParameter("start")), Integer.parseInt(request.getParameter("limit")));
                }
                issuccess = true;
                JSONObject exportJobj =new JSONObject();
                exportJobj.put("data", pagedJson);
                if (isExport) {
                    jobj.put("data", jArray);
                    exportDaoObj.processRequest(request, response, jobj);
                }
                msg = "Stock summary have been fetched successfully";
            }
        } catch (InventoryException ex) {
            msg = ex.getMessage();
        } catch (Exception ex) {
            msg = ex.getMessage();
            Logger.getLogger(accProductControllerCMN.class.getName()).log(Level.SEVERE, msg, ex);
        } finally {
            try {
                jobj.put("success", issuccess);
                jobj.put("msg", msg);
                jobj.put("data", pagedJson);
                jobj.put("count", jArray.length());
            } catch (JSONException ex) {
                lgr.log(Level.SEVERE, msg, ex);
            }
        }
        return new ModelAndView(successView, "model", jobj.toString());

    }
    
    /**
     * Method is used as a controller to pull out the data for Material IN/OUT Report.
     * @param request
     * @param response
     * @return
     */
    public ModelAndView getMaterialInOutData(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        try {
            String companyid = sessionHandlerImpl.getCompanyid(request);
            HashMap<String, Object> requestParams = new HashMap<>();
            requestParams.put("companyid", companyid);
            requestParams.put(Constants.df, authHandler.getDateOnlyFormat(request));
            requestParams.put("docType", request.getParameter("docType"));
            requestParams.put("isMaterialInOutReport", true);
            requestParams.put("transactionType", request.getParameter("transactionType"));
            requestParams.put("fieldToSearch", request.getParameter("fieldToSearch"));
            requestParams.put(Constants.REQ_startdate, request.getParameter("fromDate"));
            requestParams.put(Constants.REQ_enddate, request.getParameter("toDate"));
            requestParams.put("fromDate", request.getParameter("fromDate"));
            requestParams.put("toDate", request.getParameter("toDate"));
            ExtraCompanyPreferences extraCompanyPreferences = null;
            KwlReturnObject extraprefresult = accountingHandlerDAOobj.getObject(ExtraCompanyPreferences.class.getName(), companyid);
            extraCompanyPreferences = extraprefresult != null ? (ExtraCompanyPreferences) extraprefresult.getEntityList().get(0) : null;
            requestParams.put("isActivateMRPModule", extraCompanyPreferences.isActivateMRPModule());
         
            Store iwStore = null;
            JSONArray jsonArr = new JSONArray();
            String exportFileName = request.getParameter("filename"); // for Export
            boolean isExport = false;
            if (!StringUtil.isNullOrEmpty(exportFileName)) {
                isExport = true;
            }
            String fieldToSearch = request.getParameter("fieldToSearch");
            String smFieldSearch = "";
            String searchString = request.getParameter("ss");
            if (!StringUtil.isNullOrEmpty(fieldToSearch) && !fieldToSearch.equals("ALL")) { 
                /**
                 * If Quick Search is on serial names.
                 */
                smFieldSearch = searchString;
                requestParams.put("serialNameSearch", smFieldSearch);
            } else {
                requestParams.put("ss", searchString);
            }
            if (!StringUtil.isNullOrEmpty(request.getParameter("storeid"))) {
                KwlReturnObject res = accountingHandlerDAOobj.getObject(Store.class.getName(), request.getParameter("storeid"));
                iwStore = (Store) res.getEntityList().get(0);
                if (iwStore != null) {
                    requestParams.put("store", iwStore.getId());
                    jsonArr = AccProductService.getInventoryValuationData(requestParams);
                }
            }
            JSONArray pagedJson = new JSONArray();
            int totalCount = 0;
            if (isExport) {
                jobj.put("data", jsonArr);
                exportDaoObj.processRequest(request, response, jobj);
            } else {
                if (!StringUtil.isNullOrEmpty(request.getParameter("start")) && !StringUtil.isNullOrEmpty(request.getParameter("limit"))) {
                    int start = Integer.parseInt(request.getParameter("start"));
                    int limit = Integer.parseInt(request.getParameter("limit"));
                    JSONObject json = StringUtil.getPagedJSONWithKey(jsonArr, start, limit, Constants.productid);
                    pagedJson = json.optJSONArray(Constants.PAGED_JSON);
                    totalCount = json.optInt(Constants.RES_TOTALCOUNT);
                }
            }
            jobj.put("data", pagedJson);
            jobj.put("totalCount", totalCount);
        } catch (SessionExpiredException | JSONException | ServiceException ex) {
            Logger.getLogger(accProductControllerCMN.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
        } catch (Exception ex) {
            Logger.getLogger(accProductControllerCMN.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
        }
        return new ModelAndView("jsonView", "model", jobj.toString());
    }
    /**
     * Print the selected records of Build Assembly as per designed template
     * @param request
     * @param response 
     */
    public void exportSingleBuildAssembly(HttpServletRequest request, HttpServletResponse response) {
        try {
            String recordids = "";
            int moduleid = 0;
            String templateSubType = "0";
            String invoicePostText = "";
            AccCustomData accCustomData = null;
            String companyid = AccountingManager.getCompanyidFromRequest(request);
            JSONObject paramJobj = StringUtil.convertRequestToJsonObject(request);
            HashMap<String, Object> otherconfigrequestParams = new HashMap();

            if (!StringUtil.isNullOrEmpty(request.getParameter("recordids"))) {
                recordids = request.getParameter("recordids");
            }
            if (!StringUtil.isNullOrEmpty(request.getParameter(Constants.moduleid))) {
                moduleid = Integer.parseInt(request.getParameter(Constants.moduleid));
            }
            if (!StringUtil.isNullOrEmpty(request.getParameter("templatesubtype"))) {
                templateSubType = request.getParameter("templatesubtype");
            }
            String[] recordidsArr = recordids.split(",");
            HashMap<String, JSONArray> lineItemsArrMap = new HashMap();
            for (int count = 0; count < recordidsArr.length; count++) {
                JSONArray lineItemsArr = AccProductService.getBuildAssemblyDetailsItemJSON(paramJobj, companyid, recordidsArr[count]);
                lineItemsArrMap.put(recordidsArr[count], lineItemsArr);
            }
            otherconfigrequestParams.put("recordids", recordids);
            otherconfigrequestParams.put(Constants.moduleid, moduleid);

            ExportRecordHandler.exportSingleGeneric(request, response, lineItemsArrMap, accCustomData, customDesignDAOObj, accCommonTablesDAO, accAccountDAOobj, accountingHandlerDAOobj, velocityEngine, invoicePostText, otherconfigrequestParams, accInvoiceServiceDAOObj, accGoodsReceiptServiceDAOObj);
        } catch (Exception e) {
            Logger.getLogger(accProductController.class.getName()).log(Level.SEVERE, null, e);
        }
    }
    public ModelAndView saveCompanyWisePriceList(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        try {
            JSONObject requestJSON = StringUtil.convertRequestToJsonObject(request);
            List list = companyDetailsDAOObj.getAllCompanyList(requestJSON);
            for (Object object : list) {
                Object[] arr = (Object[]) object;
                String companyid = (String) arr[0];
                String subdomain = (String) arr[1];
                String currency = (String) arr[2];
                HashMap<String, Object> requestParams = new HashMap<>();
                requestParams.put("companyid", companyid);
                requestParams.put(Constants.df, authHandler.getOnlyDateFormat());
                requestParams.put("subdomain", subdomain);
                if (!StringUtil.isNullOrEmpty(currency)) {
                    requestParams.put(Constants.globalCurrencyKey, currency);
                }
                requestParams.put(Constants.REQ_startdate,"2017-06-30");
                requestParams.put(Constants.REQ_enddate, "2017-06-30");
                try {
                     AccProductService.migrationPriceList(requestParams);
                     jobj.put(subdomain, true);
                } catch (Exception ex) {
                    jobj.put(subdomain, false);
                }
            }
        } catch (Exception ex) {
            Logger.getLogger(accProductControllerCMN.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
        }
        return new ModelAndView("jsonView", "model", jobj.toString());
    }
    public ModelAndView migrateCompanyWisePriceList(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        try {
            JSONObject json = StringUtil.convertRequestToJsonObject(request);
            KwlReturnObject result = companyDetailsDAOObj.getCompanyProductList(json);
            List list = result.getEntityList();
            if (list != null && !list.isEmpty()) {
                for (Object object : list) {
                    Object[] arr = (Object[]) object;
                    String productid = (String) arr[1];
                    String subdomain = (String) arr[0];
                    double price = (Double) arr[2];
                    String currencyid = (String) arr[3];
                    KwlReturnObject returnObject = accProductObj.getProductByProductIdAndSubdomain(productid, subdomain);
                    if (returnObject.getEntityList().size() > 0) {
                        List productList = returnObject.getEntityList();
                        if(productList!=null && !productList.isEmpty()){
                            Object obj = productList.get(0);
                            if (obj != null) {
                                Object[] tempArr = (Object[]) obj;
                                String tempproductid = (String) tempArr[0];
                                String tempcompanyid = (String) tempArr[1];
                                HashMap<String, Object> map = new HashMap<>();
                                map.put("productid", tempproductid);
                                map.put("companyid", tempcompanyid);
                                map.put("currencyid", currencyid);
                                map.put("price", price);
                                map.put("carryin", true);
                                map.put("applydate", authHandler.getOnlyDateFormat().parse("2017-06-30"));
                                HashMap<String, Object> paramMap = new HashMap<>();
                                paramMap.put("id", tempproductid);
                                UnitOfMeasure unitOfMeasure = (UnitOfMeasure) kwlCommonTablesDAOObj.getRequestedObjectFields(Product.class, new String[]{"unitOfMeasure"}, paramMap);
                                map.put("uomid", unitOfMeasure.getID());
                                accProductObj.addPriceList(map);
                            }
                        }
                        
                    }
                }
            }
        } catch (Exception ex) {
            Logger.getLogger(accProductControllerCMN.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
        }
        return new ModelAndView("jsonView", "model", jobj.toString());
    }    
    
    /*
     * Save Global level field
     */
    private void saveJEGlobalCustomData(JSONArray customArray, JournalEntry je, String companyId) throws JSONException, AccountingException {
        try {
            if (customArray.length() > 0) {

                HashMap<String, Object> customrequestParams = new HashMap<String, Object>();
                customrequestParams.put("customarray", customArray);
                customrequestParams.put("modulename", Constants.Acc_JE_modulename);
                customrequestParams.put("moduleprimarykey", Constants.Acc_JEid);
                customrequestParams.put("modulerecid", je.getID());
                //customrequestParams.put("recdetailId", jed.getID());
                customrequestParams.put("moduleid", Constants.Acc_GENERAL_LEDGER_ModuleId);
                customrequestParams.put("companyid", companyId);
                customrequestParams.put("customdataclasspath", Constants.Acc_BillInv_custom_data_classpath);
                KwlReturnObject customDataresult = fieldDataManagercntrl.setCustomData(customrequestParams);
                if (customDataresult != null && customDataresult.getEntityList().size() > 0) {
                    AccJECustomData accJECustomData = (AccJECustomData) customDataresult.getEntityList().get(0);
                    Map<String, Object> dataMap = new HashMap();
                    dataMap.put("accjecustomdataref", accJECustomData.getJournalentryId());
                    dataMap.put("jeid", je.getID());
                    KwlReturnObject jeresult = accJournalEntryobj.updateCustomFieldJournalEntry(dataMap);
                }
            }
        } catch (ServiceException ex) {
            Logger.getLogger(DepreciationConsumerThread.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
   public ModelAndView getProductsIdNameforCombo(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        boolean issuccess = false;
        try {
            JSONObject paramJObj = StringUtil.convertRequestToJsonObject(request);
            HashMap<String, Object> requestParams = productHandler.getProductRequestMapfromJson(paramJObj);
              /*
            list to hold the selected products in customer/vendor preferred product selection
            */
            List<Object[]> selectedProductsList = new ArrayList();
            String selectedProductsIds = request.getParameter("combovalue");
           
            KwlReturnObject companyPrefObj = accCompanyPreferencesObj.getCompanyPreferences(requestParams);
            if (companyPrefObj != null && companyPrefObj.getEntityList() != null && companyPrefObj.getEntityList().size() > 0 && companyPrefObj.getEntityList().get(0) != null) {
                CompanyAccountPreferences prefObj = (CompanyAccountPreferences) companyPrefObj.getEntityList().get(0);
                requestParams.put("productsortingflag", prefObj.getProductSortingFlag());
            }
            ExtraCompanyPreferences extraPref = (ExtraCompanyPreferences) kwlCommonTablesDAOObj.getClassObject("com.krawler.common.admin.ExtraCompanyPreferences", paramJObj.optString(Constants.companyKey));
            requestParams.put(Constants.PRODUCT_SEARCH_FLAG, extraPref != null ? extraPref.getProductSearchingFlag() : Constants.PRODUCT_SEARCH_ANYWHERE);
            JSONArray jArray = new JSONArray();
            int prodDescType= Constants.Acc_Productcombo_Include_type;
             if (!StringUtil.isNullOrEmpty(extraPref.getColumnPref())) {
               JSONObject jobject=new JSONObject( extraPref.getColumnPref());
               prodDescType = (Integer)jobject.optInt("Productflag",Constants.Acc_Productcombo_Include_type) ;
             }
            /**
             * Block used to get selected products using their ids from customer/vendor preferred product selection
             */
            if (!StringUtil.isNullOrEmpty(selectedProductsIds) && !selectedProductsIds.equals("All")) {
                requestParams.put("selectedProductsIds", selectedProductsIds);
                requestParams.put("isMultiSelectProductsids", true);
                KwlReturnObject selectedProducts =  accProductObj.getProductsForComboSQLQuery(requestParams);
                requestParams.remove("isMultiSelectProductsids");
                selectedProductsList = selectedProducts.getEntityList();
            }
            
            /**
             * This Function will use when Users Visibility Feature is Enable
             * Append user condition while querying data
             */
            if (extraPref != null && extraPref.isUsersVisibilityFlow()) {
                KwlReturnObject object = accountingHandlerDAOobj.getObject(User.class.getName(), paramJObj.optString("userid"));
                User user = object.getEntityList().size() > 0 ? (User) object.getEntityList().get(0) : null;
                if (!AccountingManager.isCompanyAdmin(user)) {
                    /**
                     * if Users visibility enable and current user is not admin
                     */
                    Map<String, Object> reqMap = new HashMap();
                    requestParams.put("isUserVisibilityFlow", true);
                    reqMap.put("companyid", paramJObj.optString("companyid"));
                    reqMap.put("userid", paramJObj.optString("userid"));
                    reqMap.put("jointable", "pcd");
                    reqMap.put("moduleid", Constants.Acc_Product_Master_ModuleId);
                    String custcondition = fieldManagerDAOobj.appendUsersCondition(reqMap);
                    if (!StringUtil.isNullOrEmpty(custcondition)) {
                        /**
                         * If mapping found with dimension
                         */
                        String usercondition = " and (" + custcondition + ")";
                        requestParams.put("appendusercondtion", usercondition);
                    }
                }
            }
            
            KwlReturnObject result = accProductObj.getProductsForComboSQLQuery(requestParams);
            List<Object[]> prolist = result.getEntityList();
            selectedProductsList.addAll(prolist);
            for (Object[] row : selectedProductsList) {
                JSONObject obj = new JSONObject();
                if (row != null) {
                    if (row[0] != null) {
                        obj.put(Constants.productid, row[0].toString());
                    }
                    if (row[1] != null) {
                        obj.put("productname", row[1].toString());
                    }
                    if (row[2] != null) {
                        obj.put("pid", row[2].toString());
                    }
                    if(prodDescType==Constants.Acc_Productcombo_Include_type){
                    if (row[3] != null) {
                        obj.put("type", row[3].toString());
                     }
                    }else{
                         obj.put("description", row[3].toString());
                    }
                    if (row[4] != null) {
                        String hasaccess = row[4].toString();
                        if (StringUtil.equalIgnoreCase(hasaccess, "T")) {
                            obj.put("hasAccess", true);
                        } else {
                            obj.put("hasAccess", false);
                        }

                    }
                }
                jArray.put(obj);
            }
            jobj.put("data", jArray);
            jobj.put("totalCount", result.getRecordTotalCount());
            issuccess = true;
        } catch (SessionExpiredException ex) {
            Logger.getLogger(accProductController.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            Logger.getLogger(accProductController.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                jobj.put("success", issuccess);
                jobj.put("msg", "");
            } catch (JSONException ex) {
                Logger.getLogger(accProductController.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return new ModelAndView("jsonView", "model", jobj.toString());
    } 
   
   
    public ModelAndView getOutstandingPOSOCount(HttpServletRequest request, HttpServletResponse response) throws ServiceException, SessionExpiredException, ParseException, JSONException {
        JSONObject jobj = new JSONObject();
        JSONObject paramJObj = StringUtil.convertRequestToJsonObject(request);
        jobj = AccProductService.getOutstandingPOSOCount(paramJObj);
        
        /*
            ERP-37525
            Code to calculate outstanding quantity for assembly product.
            If outstanding quantity of product == 0, system calculates oustanding quantity for BOM products(Inventory parts).
            If any BOM products(Inventory parts) don't have sufficient quantity to auto build assembly product, then system will throw an exception. 
            
            Added check of SO module only.
        */        
        if (paramJObj.has("moduleid") && paramJObj.getString("moduleid").equals("20")) {
            
            /*
                Variable to store quanity to build for assembly product.
            */
            double enteredAssemblyQty = !StringUtil.isNullOrEmpty(request.getParameter("assemblyqty")) ? Double.parseDouble(request.getParameter("assemblyqty")) : 0;
            String productName = "", msg = "";
            String productid = !StringUtil.isNullOrEmpty(request.getParameter("ids")) ? request.getParameter("ids") : "";
            double originalQty = !StringUtil.isNullOrEmpty(request.getParameter("originalQty")) ? Double.parseDouble(request.getParameter("originalQty")) : 0;
            boolean isEdit = !StringUtil.isNullOrEmpty(request.getParameter("isEdit")) ? Boolean.parseBoolean(request.getParameter("isEdit")) : false;
            JSONArray jsonarr = jobj.getJSONArray(Constants.data);
            
            /*
                Code to check if entered assembly quantity is not zero.
            */
            if (enteredAssemblyQty > 0 && productid!="") {
                
                /*
                Loop to check outstanding details of provided assembly products.
                i.e. In which SOs it is used or to check SO count in selected UOM
                */
                for (int i = 0; i < jsonarr.length(); i++) {
                    JSONObject jobjs = jsonarr.getJSONObject(i);
                    KwlReturnObject prodresult = accountingHandlerDAOobj.getObject(Product.class.getName(), productid);
                    Product productObj = prodresult != null ? (Product) prodresult.getEntityList().get(0) : null;
                    String produnm = productObj.getProductName();
                    boolean isEnoughBomQty = true;
                    
                    /*
                    Check to confirm if provided product is Assembly product or not. And its available quantity should be zero.
                    */
                    if (productObj != null && productObj.getProducttype().getID().equals(Constants.ASSEMBLY) && productObj.isAutoAssembly() == true && jobjs.has("quantity") && jobjs.optDouble("quantity") == 0) {
                        
                        /*
                        Code to get BOM details of provided assembly product.
                        */
                        KwlReturnObject bomdetailObj = accProductObj.getAssemblyProductBillofMaterials(productObj.getID());
                        
                        
                        if (bomdetailObj.getEntityList() != null && !bomdetailObj.getEntityList().isEmpty()) {
                            Iterator iterator = bomdetailObj.getEntityList().iterator();
                            
                            /*
                                Loop to check if all BOM (Inventory parts) quantity is enough or not.
                            */
                            while (iterator.hasNext()) {
                                Object ResultObj = iterator.next();
                                ProductAssembly productAssembly = (ProductAssembly) ResultObj;
                                
                                /*
                                    actQty = FOrmula quanity of BOM(Inventory parts) product.
                                    requiredBOMQty = Actual BOM(Inventory parts)required quanity to build Assembly product as per BOM formula. 
                                */
                                double actQty = productAssembly.getActualQuantity();  //Formula Quantity
                                double requiredBOMQty = enteredAssemblyQty * actQty;
                                
                                
                                /*
                                Code to check used quantity of Inventory part product.
                                */
                                double socountForAssembly = jobjs.optDouble("socount");
                                
                                //In edit case, previous quantity will be consider in available quantity.
                                double usedBomQty = (socountForAssembly * actQty);
                                if(isEdit){ //ERP-37525
                                    usedBomQty = usedBomQty - (originalQty * actQty);
                                }
                                String subproductid = productAssembly.getSubproducts().getID();
                                paramJObj.put("ids", subproductid);
                                
                                /*
                                Code to check balance qunatity of BOM(Inventory Part)
                                */
                                jobj = AccProductService.getOutstandingPOSOCount(paramJObj);
                                double bomAvailQty = jobj.getJSONArray(Constants.data).getJSONObject(0).optDouble("quantity");                                
                                bomAvailQty = bomAvailQty - usedBomQty;
                                
                                /*
                                    check to confirm if required quanity is available to build assembly product.
                                */
                                if(requiredBOMQty > bomAvailQty){   
                                    isEnoughBomQty = false;
                                }
                            }                            
                        }
                    }
                    if (!isEnoughBomQty) {
                        if (productName != "") {            //Show the Assembly Product Name for which we don't have enough BOM quantity
                            productName += ", " + produnm;
                        } else {
                            productName = produnm;
                        }
                    }
                }
                if (productName != "") {    //Send error message to user.
                    msg = "Sufficiet BOM(s) are not available for <b>"+ productName +"</b> Product(s).";
                }
                jobj.put("qtymsg", msg);
                
            }
        }
        return new ModelAndView("jsonView", "model", jobj.toString());
    }
    /**
     * Function to get Product Tax class History
     *
     * @param request
     * @param response
     * @return
     */
    public ModelAndView getProductGSTHistory(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        String msg = "";
        boolean issuccess = false;
        try {
            Map<String, Object> reqMap = new HashMap();
            if (!StringUtil.isNullOrEmpty(request.getParameter("productid"))) {
                reqMap.put("productId", request.getParameter("productid"));
            }
            if (!StringUtil.isNullOrEmpty(request.getParameter("gsthistorydetails"))) {
                reqMap.put("gsthistorydetails", Boolean.parseBoolean(request.getParameter("gsthistorydetails")));
            }
            if (!StringUtil.isNullOrEmpty(request.getParameter("isFixedAsset"))) {
                reqMap.put("isFixedAsset", Boolean.parseBoolean(request.getParameter("isFixedAsset")));
            }
            jobj = accProductModuleService.getProductGSTHistory(reqMap);
            issuccess = true;
        } catch (Exception ex) {
            msg = "" + ex.getMessage();
            Logger.getLogger(accProductControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                jobj.put("sucess", issuccess);
                jobj.put("msg", msg);
            } catch (JSONException ex) {
                Logger.getLogger(accProductControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return new ModelAndView("jsonView", "model", jobj.toString());
    }
    public ModelAndView getProductUsedHistory(HttpServletRequest request, HttpServletResponse response) {
        JSONObject jobj = new JSONObject();
        String msg = "";
        boolean issuccess = false;
        try {
            String companyId = sessionHandlerImpl.getCompanyid(request);
            Map<String, Object> reqMap = new HashMap();
            DateFormat df = authHandler.getGlobalDateFormat();
            if (!StringUtil.isNullOrEmpty(request.getParameter("productid"))) {
                reqMap.put("productId", request.getParameter("productid"));
            }
            if (!StringUtil.isNullOrEmpty(request.getParameter("applydate"))) {
                reqMap.put("applyDate", df.parse(request.getParameter("applydate")));
            }
            if (!StringUtil.isNullOrEmpty(companyId)) {
                reqMap.put("companyid", companyId);
            }
            jobj = accProductModuleService.getProductUsedHistory(reqMap);
            issuccess = true;
        } catch (Exception ex) {
            msg = "" + ex.getMessage();
            Logger.getLogger(accProductControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                jobj.put("success", issuccess);
                jobj.put("msg", msg);
            } catch (JSONException ex) {
                Logger.getLogger(accProductControllerCMN.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return new ModelAndView("jsonView", "model", jobj.toString());
    }
   
}
